uint64_t EncodeDYMTLRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *entry;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t result;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  v130 = a2;
  v132 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  v131 = 8LL;
  v129 = *(void *)(a1 + 1296);
  v6 = *find_entry(a4, &v129, 8uLL, 0LL);
  if (v6) {
    v6 = *(void *)(v6 + 32);
  }
  v7 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v6 + 8);
    v7 = v131 + 8;
  }

  v131 = v7;
  v128 = *(void *)(a1 + 1176);
  entry = find_entry(a4, &v128, 8uLL, 0LL);
  if (*entry) {
    v9 = *(void *)(*entry + 32LL);
  }
  else {
    v9 = 0LL;
  }
  v10 = v132;
  v11 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v9 + 8);
    v10 = v132;
    v11 = v131 + 8;
  }

  v131 = v11;
  v12 = v11 + 8;
  if (v11 + 8 <= v10)
  {
    *(void *)((char *)v130 + v11) = 31LL;
    v12 = v131 + 8;
  }

  v13 = 0LL;
  v131 = v12;
  do
  {
    v14 = v12 + 8;
    v15 = v132;
    if (v12 + 8 <= v132)
    {
      *(void *)((char *)v130 + v12) = *(void *)(a1 + v13);
      v15 = v132;
      v14 = v131 + 8;
    }

    v131 = v14;
    v16 = v14 + 8;
    if (v14 + 8 <= v15)
    {
      *(void *)((char *)v130 + v14) = *(unsigned __int16 *)(a1 + v13 + 8);
      v15 = v132;
      v16 = v131 + 8;
    }

    v131 = v16;
    v12 = v16 + 8;
    if (v16 + 8 <= v15)
    {
      *(void *)((char *)v130 + v16) = *(unsigned __int8 *)(a1 + v13 + 10);
      v12 = v131 + 8;
    }

    v131 = v12;
    v13 += 16LL;
  }

  while (v13 != 496);
  v17 = v12 + 8;
  if (v12 + 8 <= v132)
  {
    *(void *)((char *)v130 + v12) = 31LL;
    v17 = v131 + 8;
  }

  v18 = 0LL;
  v131 = v17;
  do
  {
    v19 = a1 + v18;
    v20 = v17 + 8;
    v21 = v132;
    if (v17 + 8 <= v132)
    {
      *(void *)((char *)v130 + v17) = *(unsigned __int8 *)(v19 + 501);
      v21 = v132;
      v20 = v131 + 8;
    }

    v131 = v20;
    v22 = v20 + 8;
    if (v20 + 8 <= v21)
    {
      *(void *)((char *)v130 + v20) = *(unsigned int *)(v19 + 496);
      v21 = v132;
      v22 = v131 + 8;
    }

    v131 = v22;
    v17 = v22 + 8;
    if (v22 + 8 <= v21)
    {
      *(void *)((char *)v130 + v22) = *(unsigned __int8 *)(a1 + v18 + 500);
      v17 = v131 + 8;
    }

    v131 = v17;
    v18 += 8LL;
  }

  while (v18 != 248);
  v23 = v17 + 8;
  v24 = v132;
  if (v17 + 8 <= v132)
  {
    *(void *)((char *)v130 + v17) = *(void *)(a1 + 1272);
    v24 = v132;
    v23 = v131 + 8;
  }

  v131 = v23;
  v25 = v23 + 8;
  if (v23 + 8 <= v24)
  {
    *(void *)((char *)v130 + v23) = *(void *)(a1 + 1288);
    v24 = v132;
    v25 = v131 + 8;
  }

  v131 = v25;
  v26 = v25 + 4;
  if (v25 + 4 <= v24)
  {
    *(_DWORD *)((char *)v130 + v25) = *(_DWORD *)(a1 + 1332);
    v24 = v132;
    v26 = v131 + 4;
  }

  v131 = v26;
  if (v24 > v26)
  {
    if (v24 - v26 >= 4) {
      v27 = 4LL;
    }
    else {
      v27 = v24 - v26;
    }
    bzero((char *)v130 + v26, v27);
    v26 = v131;
    v24 = v132;
  }

  v28 = v26 + 4;
  v131 = v26 + 4;
  v29 = v26 + 12;
  if (v29 <= v24)
  {
    *(void *)((char *)v130 + v28) = *(unsigned __int8 *)(a1 + 1480);
    v24 = v132;
    v29 = v131 + 8;
  }

  v131 = v29;
  v30 = v29 + 8;
  if (v29 + 8 <= v24)
  {
    *(void *)((char *)v130 + v29) = *(unsigned __int8 *)(a1 + 1481);
    v24 = v132;
    v30 = v131 + 8;
  }

  v131 = v30;
  v31 = v30 + 8;
  if (v30 + 8 <= v24)
  {
    *(void *)((char *)v130 + v30) = *(unsigned __int8 *)(a1 + 1493);
    v24 = v132;
    v31 = v131 + 8;
  }

  v131 = v31;
  v32 = v31 + 8;
  if (v31 + 8 <= v24)
  {
    *(void *)((char *)v130 + v31) = *(unsigned __int16 *)(a1 + 1340);
    v24 = v132;
    v32 = v131 + 8;
  }

  v131 = v32;
  v33 = v32 + 8;
  if (v32 + 8 <= v24)
  {
    *(void *)((char *)v130 + v32) = *(unsigned __int16 *)(a1 + 1352);
    v24 = v132;
    v33 = v131 + 8;
  }

  v131 = v33;
  v34 = v33 + 8;
  if (v33 + 8 <= v24)
  {
    *(void *)((char *)v130 + v33) = 8LL;
    v34 = v131 + 8;
  }

  v35 = 0LL;
  v131 = v34;
  do
  {
    SaveDYMTLRenderPipelineColorAttachmentDescriptor(&v130, (unsigned __int8 *)(a1 + 744 + v35));
    v35 += 16LL;
  }

  while (v35 != 128);
  WriteDynamicBufferString(&v130, *(const char **)(a1 + 1200));
  v36 = v132;
  v37 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(unsigned __int8 *)(a1 + 1485);
    v36 = v132;
    v37 = v131 + 8;
  }

  v131 = v37;
  v38 = v37 + 8;
  if (v37 + 8 <= v36)
  {
    *(void *)((char *)v130 + v37) = *(unsigned __int8 *)(a1 + 1505);
    v36 = v132;
    v38 = v131 + 8;
  }

  v131 = v38;
  v39 = v38 + 8;
  if (v38 + 8 <= v36)
  {
    *(void *)((char *)v130 + v38) = *(void *)(a1 + 1208);
    v36 = v132;
    v39 = v131 + 8;
  }

  v131 = v39;
  v40 = v39 + 8;
  if (v39 + 8 <= v36)
  {
    *(void *)((char *)v130 + v39) = *(unsigned __int8 *)(a1 + 1502);
    v36 = v132;
    v40 = v131 + 8;
  }

  v131 = v40;
  v41 = v40 + 8;
  if (v40 + 8 <= v36)
  {
    *(void *)((char *)v130 + v40) = *(unsigned __int8 *)(a1 + 1501);
    v36 = v132;
    v41 = v131 + 8;
  }

  v131 = v41;
  v42 = v41 + 8;
  if (v41 + 8 <= v36)
  {
    *(void *)((char *)v130 + v41) = *(unsigned __int8 *)(a1 + 1500);
    v36 = v132;
    v42 = v131 + 8;
  }

  v131 = v42;
  v43 = v42 + 8;
  if (v42 + 8 <= v36)
  {
    *(void *)((char *)v130 + v42) = *(unsigned __int8 *)(a1 + 1503);
    v36 = v132;
    v43 = v131 + 8;
  }

  v131 = v43;
  v44 = v43 + 8;
  if (v43 + 8 <= v36)
  {
    *(void *)((char *)v130 + v43) = *(unsigned __int8 *)(a1 + 1504);
    v36 = v132;
    v44 = v131 + 8;
  }

  v131 = v44;
  v45 = v44 + 8;
  if (v44 + 8 <= v36)
  {
    *(void *)((char *)v130 + v44) = 31LL;
    v45 = v131 + 8;
  }

  v46 = 0LL;
  v131 = v45;
  do
  {
    v47 = v45 + 8;
    if (v45 + 8 <= v132)
    {
      *(void *)((char *)v130 + v45) = *(unsigned __int8 *)(a1 + 1447 + v46);
      v47 = v131 + 8;
    }

    v131 = v47;
    ++v46;
    v45 = v47;
  }

  while (v46 != 31);
  v48 = v47 + 8;
  if (v47 + 8 <= v132)
  {
    *(void *)((char *)v130 + v47) = 31LL;
    v48 = v131 + 8;
  }

  v49 = 0LL;
  v131 = v48;
  do
  {
    v50 = v48 + 8;
    if (v48 + 8 <= v132)
    {
      *(void *)((char *)v130 + v48) = *(unsigned __int8 *)(a1 + 1354 + v49);
      v50 = v131 + 8;
    }

    v131 = v50;
    ++v49;
    v48 = v50;
  }

  while (v49 != 31);
  v51 = v50 + 8;
  v52 = v132;
  if (v50 + 8 <= v132)
  {
    *(void *)((char *)v130 + v50) = *(unsigned __int8 *)(a1 + 1499);
    v52 = v132;
    v51 = v131 + 8;
  }

  v131 = v51;
  v53 = v51 + 8;
  if (v51 + 8 <= v52)
  {
    *(void *)((char *)v130 + v51) = *(unsigned __int8 *)(a1 + 1507);
    v52 = v132;
    v53 = v131 + 8;
  }

  v131 = v53;
  v54 = v53 + 8;
  if (v53 + 8 <= v52)
  {
    *(void *)((char *)v130 + v53) = *(unsigned int *)(a1 + 1328);
    v54 = v131 + 8;
  }

  v131 = v54;
  v127 = *(void *)(a1 + 1264);
  v55 = find_entry(a4, &v127, 8uLL, 0LL);
  if (*v55) {
    v56 = *(void *)(*v55 + 32LL);
  }
  else {
    v56 = 0LL;
  }
  v57 = v132;
  v58 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v56 + 8);
    v57 = v132;
    v58 = v131 + 8;
  }

  v131 = v58;
  v59 = v58 + 8;
  if (v58 + 8 <= v57)
  {
    *(void *)((char *)v130 + v58) = *(unsigned __int8 *)(a1 + 1486);
    v57 = v132;
    v59 = v131 + 8;
  }

  v131 = v59;
  v60 = v59 + 8;
  if (v59 + 8 <= v57)
  {
    *(void *)((char *)v130 + v59) = *(unsigned __int8 *)(a1 + 1479);
    v57 = v132;
    v60 = v131 + 8;
  }

  v131 = v60;
  v61 = v60 + 8;
  if (v60 + 8 <= v57)
  {
    *(void *)((char *)v130 + v60) = *(unsigned int *)(a1 + 1336);
    v57 = v132;
    v61 = v131 + 8;
  }

  v131 = v61;
  v62 = v61 + 8;
  if (v61 + 8 <= v57)
  {
    *(void *)((char *)v130 + v61) = *(unsigned int *)(a1 + 1324);
    v57 = v132;
    v62 = v131 + 8;
  }

  v131 = v62;
  v63 = v62 + 8;
  if (v62 + 8 <= v57)
  {
    *(void *)((char *)v130 + v62) = *(unsigned __int8 *)(a1 + 1487);
    v57 = v132;
    v63 = v131 + 8;
  }

  v131 = v63;
  v64 = v63 + 8;
  if (v63 + 8 <= v57)
  {
    *(void *)((char *)v130 + v63) = *(unsigned __int8 *)(a1 + 1489);
    v57 = v132;
    v64 = v131 + 8;
  }

  v131 = v64;
  v65 = v64 + 8;
  if (v64 + 8 <= v57)
  {
    *(void *)((char *)v130 + v64) = *(unsigned __int8 *)(a1 + 1490);
    v57 = v132;
    v65 = v131 + 8;
  }

  v131 = v65;
  v66 = v65 + 8;
  if (v65 + 8 <= v57)
  {
    *(void *)((char *)v130 + v65) = *(unsigned __int8 *)(a1 + 1491);
    v57 = v132;
    v66 = v131 + 8;
  }

  v131 = v66;
  v67 = v66 + 8;
  if (v66 + 8 <= v57)
  {
    *(void *)((char *)v130 + v66) = *(unsigned __int8 *)(a1 + 1506);
    v57 = v132;
    v67 = v131 + 8;
  }

  v131 = v67;
  v68 = v67 + 8;
  if (v67 + 8 <= v57)
  {
    *(void *)((char *)v130 + v67) = *(unsigned __int8 *)(a1 + 1478);
    v57 = v132;
    v68 = v131 + 8;
  }

  v131 = v68;
  v69 = v68 + 8;
  if (v68 + 8 <= v57)
  {
    *(void *)((char *)v130 + v68) = *(unsigned __int8 *)(a1 + 1492);
    v57 = v132;
    v69 = v131 + 8;
  }

  v131 = v69;
  v70 = v69 + 8;
  if (v69 + 8 <= v57)
  {
    *(void *)((char *)v130 + v69) = *(unsigned __int8 *)(a1 + 1482);
    v57 = v132;
    v70 = v131 + 8;
  }

  v131 = v70;
  v71 = v70 + 8;
  if (v70 + 8 <= v57)
  {
    *(void *)((char *)v130 + v70) = *(void *)(a1 + 1280);
    v57 = v132;
    v71 = v131 + 8;
  }

  v131 = v71;
  v72 = v71 + 8;
  if (v71 + 8 <= v57)
  {
    *(void *)((char *)v130 + v71) = *(void *)(a1 + 1160);
    v57 = v132;
    v72 = v131 + 8;
  }

  v131 = v72;
  v73 = v72 + 8;
  if (v72 + 8 <= v57)
  {
    *(void *)((char *)v130 + v72) = *(void *)(a1 + 1168);
    v57 = v132;
    v73 = v131 + 8;
  }

  v131 = v73;
  v74 = v73 + 8;
  if (v73 + 8 <= v57)
  {
    *(void *)((char *)v130 + v73) = *(unsigned __int8 *)(a1 + 1494);
    v57 = v132;
    v74 = v131 + 8;
  }

  v131 = v74;
  v75 = v74 + 8;
  if (v74 + 8 <= v57)
  {
    *(void *)((char *)v130 + v74) = *(unsigned __int8 *)(a1 + 1488);
    v57 = v132;
    v75 = v131 + 8;
  }

  v131 = v75;
  v76 = v75 + 8;
  if (v75 + 8 <= v57)
  {
    *(void *)((char *)v130 + v75) = *(unsigned __int8 *)(a1 + 1483);
    v57 = v132;
    v76 = v131 + 8;
  }

  v131 = v76;
  v77 = v76 + 8;
  if (v76 + 8 <= v57)
  {
    *(void *)((char *)v130 + v76) = *(unsigned __int8 *)(a1 + 1484);
    v77 = v131 + 8;
  }

  v131 = v77;
  WriteGTData(&v130, *(const void **)(a1 + 1144), *(void *)(a1 + 1152));
  WriteGTData(&v130, *(const void **)(a1 + 1128), *(void *)(a1 + 1136));
  v78 = *(void *)(a1 + 1312);
  v79 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = v78;
    v79 = v131 + 8;
    v78 = *(void *)(a1 + 1312);
  }

  v131 = v79;
  if (v78)
  {
    v80 = 0LL;
    do
    {
      v126 = *(void *)(*(void *)(a1 + 1304) + 8 * v80);
      v81 = find_entry(a4, &v126, 8uLL, 0LL);
      if (*v81) {
        v82 = *(void *)(*v81 + 32LL);
      }
      else {
        v82 = 0LL;
      }
      v79 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v82 + 8);
        v79 = v131 + 8;
      }

      v131 = v79;
      ++v80;
    }

    while (*(void *)(a1 + 1312) > v80);
  }

  v83 = *(void *)(a1 + 1192);
  v84 = v79 + 8;
  if (v79 + 8 <= v132)
  {
    *(void *)((char *)v130 + v79) = v83;
    v84 = v131 + 8;
    v83 = *(void *)(a1 + 1192);
  }

  v131 = v84;
  if (v83)
  {
    v85 = 0LL;
    do
    {
      v125 = *(void *)(*(void *)(a1 + 1184) + 8 * v85);
      v86 = *find_entry(a4, &v125, 8uLL, 0LL);
      if (v86) {
        v86 = *(void *)(v86 + 32);
      }
      v87 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v86 + 8);
        v87 = v131 + 8;
      }

      v131 = v87;
      ++v85;
    }

    while (*(void *)(a1 + 1192) > v85);
  }

  SaveDYMTLLinkedFunctions(&v130, a1 + 1064, a4);
  SaveDYMTLLinkedFunctions(&v130, a1 + 872, a4);
  v124 = *(void *)(a1 + 1240);
  v88 = *find_entry(a4, &v124, 8uLL, 0LL);
  if (v88) {
    v88 = *(void *)(v88 + 32);
  }
  v89 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v88 + 8);
    v89 = v131 + 8;
  }

  v131 = v89;
  v123 = *(void *)(a1 + 1216);
  v90 = find_entry(a4, &v123, 8uLL, 0LL);
  if (*v90) {
    v91 = *(void *)(*v90 + 32LL);
  }
  else {
    v91 = 0LL;
  }
  v92 = v132;
  v93 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v91 + 8);
    v92 = v132;
    v93 = v131 + 8;
  }

  v131 = v93;
  v94 = v93 + 8;
  if (v93 + 8 <= v92)
  {
    *(void *)((char *)v130 + v93) = 31LL;
    v94 = v131 + 8;
  }

  v95 = 0LL;
  v131 = v94;
  do
  {
    v96 = v94 + 8;
    if (v94 + 8 <= v132)
    {
      *(void *)((char *)v130 + v94) = *(unsigned __int8 *)(a1 + 1416 + v95);
      v96 = v131 + 8;
    }

    v131 = v96;
    ++v95;
    v94 = v96;
  }

  while (v95 != 31);
  v97 = v96 + 8;
  if (v96 + 8 <= v132)
  {
    *(void *)((char *)v130 + v96) = 31LL;
    v97 = v131 + 8;
  }

  v98 = 0LL;
  v131 = v97;
  do
  {
    v99 = v97 + 8;
    if (v97 + 8 <= v132)
    {
      *(void *)((char *)v130 + v97) = *(unsigned __int8 *)(a1 + 1385 + v98);
      v99 = v131 + 8;
    }

    v131 = v99;
    ++v98;
    v97 = v99;
  }

  while (v98 != 31);
  v100 = *(void *)(a1 + 1256);
  v101 = v99 + 8;
  if (v99 + 8 <= v132)
  {
    *(void *)((char *)v130 + v99) = v100;
    v101 = v131 + 8;
    v100 = *(void *)(a1 + 1256);
  }

  v131 = v101;
  if (v100)
  {
    v102 = 0LL;
    do
    {
      v122 = *(void *)(*(void *)(a1 + 1248) + 8 * v102);
      v103 = find_entry(a4, &v122, 8uLL, 0LL);
      if (*v103) {
        v104 = *(void *)(*v103 + 32LL);
      }
      else {
        v104 = 0LL;
      }
      v101 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v104 + 8);
        v101 = v131 + 8;
      }

      v131 = v101;
      ++v102;
    }

    while (*(void *)(a1 + 1256) > v102);
  }

  v105 = *(void *)(a1 + 1232);
  v106 = v101 + 8;
  if (v101 + 8 <= v132)
  {
    *(void *)((char *)v130 + v101) = v105;
    v106 = v131 + 8;
    v105 = *(void *)(a1 + 1232);
  }

  v131 = v106;
  if (v105)
  {
    v107 = 0LL;
    do
    {
      v121 = *(void *)(*(void *)(a1 + 1224) + 8 * v107);
      v108 = *find_entry(a4, &v121, 8uLL, 0LL);
      if (v108) {
        v108 = *(void *)(v108 + 32);
      }
      v109 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v108 + 8);
        v109 = v131 + 8;
      }

      v131 = v109;
      ++v107;
    }

    while (*(void *)(a1 + 1232) > v107);
  }

  SaveDYMTLLinkedFunctions(&v130, a1 + 1000, a4);
  SaveDYMTLLinkedFunctions(&v130, a1 + 936, a4);
  v110 = v132;
  v111 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(unsigned __int8 *)(a1 + 1498);
    v110 = v132;
    v111 = v131 + 8;
  }

  v131 = v111;
  v112 = v111 + 8;
  if (v111 + 8 <= v110)
  {
    *(void *)((char *)v130 + v111) = *(unsigned __int8 *)(a1 + 1495);
    v110 = v132;
    v112 = v131 + 8;
  }

  v131 = v112;
  v113 = v112 + 8;
  if (v112 + 8 <= v110)
  {
    *(void *)((char *)v130 + v112) = *(unsigned __int8 *)(a1 + 1497);
    v110 = v132;
    v113 = v131 + 8;
  }

  v131 = v113;
  v114 = v113 + 8;
  if (v113 + 8 <= v110)
  {
    *(void *)((char *)v130 + v113) = *(unsigned __int8 *)(a1 + 1496);
    v110 = v132;
    v114 = v131 + 8;
  }

  v131 = v114;
  v115 = v114 + 8;
  if (v114 + 8 <= v110)
  {
    *(void *)((char *)v130 + v114) = *(unsigned int *)(a1 + 1320);
    v110 = v132;
    v115 = v131 + 8;
  }

  v131 = v115;
  v116 = v115 + 8;
  if (v115 + 8 <= v110)
  {
    *(void *)((char *)v130 + v115) = *(unsigned __int16 *)(a1 + 1350);
    v110 = v132;
    v116 = v131 + 8;
  }

  v131 = v116;
  v117 = v116 + 8;
  if (v116 + 8 <= v110)
  {
    *(void *)((char *)v130 + v116) = *(unsigned __int16 *)(a1 + 1344);
    v110 = v132;
    v117 = v131 + 8;
  }

  v131 = v117;
  v118 = v117 + 8;
  if (v117 + 8 <= v110)
  {
    *(void *)((char *)v130 + v117) = *(unsigned __int16 *)(a1 + 1348);
    v110 = v132;
    v118 = v131 + 8;
  }

  v131 = v118;
  v119 = v118 + 8;
  if (v118 + 8 <= v110)
  {
    *(void *)((char *)v130 + v118) = *(unsigned __int16 *)(a1 + 1346);
    v110 = v132;
    v119 = v131 + 8;
  }

  v131 = v119;
  result = v119 + 8;
  if (v119 + 8 <= v110)
  {
    *(void *)((char *)v130 + v119) = *(unsigned __int16 *)(a1 + 1342);
    return v131 + 8;
  }

  return result;
}

void WriteDynamicBufferString(void *a1, const char *a2)
{
  if (a2) {
    v3 = a2;
  }
  else {
    v3 = "";
  }
  size_t v4 = strlen(v3);
  size_t v5 = v4 + 1;
  uint64_t v7 = a1[1];
  size_t v6 = a1[2];
  size_t v8 = v7 + v4 + 1;
  if (v8 <= v6)
  {
    memcpy((void *)(*a1 + v7), v3, v5);
    size_t v6 = a1[2];
    size_t v8 = a1[1] + v5;
  }

  a1[1] = v8;
  unint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + ~v4 + 8;
  BOOL v10 = v6 > v8;
  size_t v11 = v6 - v8;
  if (v10)
  {
    if (v11 >= v9) {
      size_t v12 = v9;
    }
    else {
      size_t v12 = v11;
    }
    bzero((void *)(*a1 + v8), v12);
    size_t v8 = a1[1];
  }

  a1[1] = v8 + v9;
}

void *SaveDYMTLRenderPipelineColorAttachmentDescriptor(void *result, unsigned __int8 *a2)
{
  uint64_t v3 = result[1];
  unint64_t v2 = result[2];
  uint64_t v4 = v3 + 8;
  if (v3 + 8 <= v2)
  {
    *(void *)(*result + v3) = a2[3];
    unint64_t v2 = result[2];
    uint64_t v4 = result[1] + 8LL;
  }

  result[1] = v4;
  uint64_t v5 = v4 + 8;
  if (v4 + 8 <= v2)
  {
    *(void *)(*result + v4) = a2[8];
    unint64_t v2 = result[2];
    uint64_t v5 = result[1] + 8LL;
  }

  result[1] = v5;
  uint64_t v6 = v5 + 8;
  if (v5 + 8 <= v2)
  {
    *(void *)(*result + v5) = a2[5];
    unint64_t v2 = result[2];
    uint64_t v6 = result[1] + 8LL;
  }

  result[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v2)
  {
    *(void *)(*result + v6) = a2[6];
    unint64_t v2 = result[2];
    uint64_t v7 = result[1] + 8LL;
  }

  result[1] = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v2)
  {
    *(void *)(*result + v7) = a2[7];
    unint64_t v2 = result[2];
    uint64_t v8 = result[1] + 8LL;
  }

  result[1] = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v2)
  {
    *(void *)(*result + v8) = a2[4];
    unint64_t v2 = result[2];
    uint64_t v9 = result[1] + 8LL;
  }

  result[1] = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v2)
  {
    *(void *)(*result + v9) = a2[2];
    unint64_t v2 = result[2];
    uint64_t v10 = result[1] + 8LL;
  }

  result[1] = v10;
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v2)
  {
    *(void *)(*result + v10) = a2[9];
    unint64_t v2 = result[2];
    uint64_t v11 = result[1] + 8LL;
  }

  result[1] = v11;
  uint64_t v12 = v11 + 8;
  if (v11 + 8 <= v2)
  {
    *(void *)(*result + v11) = *(unsigned __int16 *)a2;
    uint64_t v12 = result[1] + 8LL;
  }

  result[1] = v12;
  return result;
}

void WriteGTData(void *a1, const void *a2, size_t __n)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = v5 + 8;
  if ((unint64_t)(v5 + 8) <= a1[2])
  {
    *(void *)(*a1 + v5) = __n;
    uint64_t v6 = a1[1] + 8LL;
  }

  a1[1] = v6;
  if (a2)
  {
    size_t v7 = v6 + __n;
    size_t v8 = a1[2];
    if (v6 + __n <= v8)
    {
      memcpy((void *)(*a1 + v6), a2, __n);
      size_t v8 = a1[2];
      size_t v7 = a1[1] + __n;
    }

    a1[1] = v7;
    size_t v9 = ((__n + 7) & 0xFFFFFFFFFFFFFFF8LL) - __n;
    BOOL v10 = v8 > v7;
    size_t v11 = v8 - v7;
    if (v10)
    {
      if (v11 >= v9) {
        size_t v12 = v9;
      }
      else {
        size_t v12 = v11;
      }
      bzero((void *)(*a1 + v7), v12);
      size_t v7 = a1[1];
    }

    a1[1] = v7 + v9;
  }

uint64_t *SaveDYMTLLinkedFunctions(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 + 8;
  if ((unint64_t)(v7 + 8) <= a1[2])
  {
    *(void *)(*a1 + v7) = v6;
    uint64_t v8 = a1[1] + 8LL;
    uint64_t v6 = *(void *)(a2 + 24);
  }

  a1[1] = v8;
  if (v6)
  {
    unint64_t v9 = 0LL;
    do
    {
      uint64_t v29 = *(void *)(*(void *)(a2 + 16) + 8 * v9);
      entry = find_entry(a3, &v29, 8uLL, 0LL);
      if (*entry) {
        uint64_t v11 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v11 = 0LL;
      }
      uint64_t v12 = a1[1];
      uint64_t v8 = v12 + 8;
      if ((unint64_t)(v12 + 8) <= a1[2])
      {
        *(void *)(*a1 + v12) = *(void *)(v11 + 8);
        uint64_t v8 = a1[1] + 8LL;
      }

      a1[1] = v8;
      ++v9;
    }

    while (*(void *)(a2 + 24) > v9);
  }

  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = v8 + 8;
  if ((unint64_t)(v8 + 8) <= a1[2])
  {
    *(void *)(*a1 + v8) = v13;
    uint64_t v14 = a1[1] + 8LL;
    uint64_t v13 = *(void *)(a2 + 8);
  }

  a1[1] = v14;
  if (v13)
  {
    unint64_t v15 = 0LL;
    do
    {
      uint64_t v28 = *(void *)(*(void *)a2 + 8 * v15);
      uint64_t v16 = *find_entry(a3, &v28, 8uLL, 0LL);
      if (v16) {
        uint64_t v16 = *(void *)(v16 + 32);
      }
      uint64_t v17 = a1[1];
      uint64_t v18 = v17 + 8;
      if ((unint64_t)(v17 + 8) <= a1[2])
      {
        *(void *)(*a1 + v17) = *(void *)(v16 + 8);
        uint64_t v18 = a1[1] + 8LL;
      }

      a1[1] = v18;
      ++v15;
    }

    while (*(void *)(a2 + 8) > v15);
  }

  result = (uint64_t *)SaveDYMTLLinkedFunctionsGroup(*(void *)(a2 + 32), *(unsigned int *)(a2 + 40), a1, a3);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = a1[1];
  uint64_t v22 = v21 + 8;
  if ((unint64_t)(v21 + 8) <= a1[2])
  {
    *(void *)(*a1 + v21) = v20;
    uint64_t v22 = a1[1] + 8LL;
    uint64_t v20 = *(void *)(a2 + 56);
  }

  a1[1] = v22;
  if (v20)
  {
    unint64_t v23 = 0LL;
    do
    {
      uint64_t v27 = *(void *)(*(void *)(a2 + 48) + 8 * v23);
      result = find_entry(a3, &v27, 8uLL, 0LL);
      uint64_t v24 = *result;
      if (*result) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      uint64_t v25 = a1[1];
      uint64_t v26 = v25 + 8;
      if ((unint64_t)(v25 + 8) <= a1[2])
      {
        *(void *)(*a1 + v25) = *(void *)(v24 + 8);
        uint64_t v26 = a1[1] + 8LL;
      }

      a1[1] = v26;
      ++v23;
    }

    while (*(void *)(a2 + 56) > v23);
  }

  return result;
}

uint64_t SaveDYMTLLinkedFunctionsGroup(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5 = a2;
  memset(v25, 0, sizeof(v25));
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = SaveDYMTLLinkedFunctionsGroup(a1, a2, 0LL, a4);
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = v25;
  }

  uint64_t v10 = v7[1];
  unint64_t v9 = v7[2];
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v9)
  {
    *(void *)(*v7 + v10) = v8;
    unint64_t v9 = v7[2];
    uint64_t v11 = v7[1] + 8LL;
  }

  v7[1] = v11;
  uint64_t result = v11 + 8;
  if (v11 + 8 <= v9)
  {
    *(void *)(*v7 + v11) = v5;
    uint64_t result = v7[1] + 8LL;
  }

  v7[1] = result;
  if (v5 >= 1)
  {
    uint64_t v13 = (unsigned int *)(a1 + 16);
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = result + 8;
      if ((unint64_t)(result + 8) <= v7[2])
      {
        *(void *)(*v7 + result) = *v13;
        uint64_t v15 = v7[1] + 8LL;
      }

      v7[1] = v15;
      v13 += 6;
      uint64_t result = v15;
      --v14;
    }

    while (v14);
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      uint64_t v17 = a1 + 24 * i;
      WriteDynamicBufferString(v7, *(const char **)v17);
      int v19 = *(_DWORD *)(v17 + 16);
      uint64_t v18 = (unsigned int *)(v17 + 16);
      if (v19)
      {
        unint64_t v20 = 0LL;
        do
        {
          uint64_t v24 = *(void *)(*(void *)(a1 + 24 * i + 8) + 8 * v20);
          uint64_t v21 = *find_entry(a4, &v24, 8uLL, 0LL);
          if (v21) {
            uint64_t v21 = *(void *)(v21 + 32);
          }
          uint64_t v22 = v7[1];
          uint64_t v23 = v22 + 8;
          if ((unint64_t)(v22 + 8) <= v7[2])
          {
            *(void *)(*v7 + v22) = *(void *)(v21 + 8);
            uint64_t v23 = v7[1] + 8LL;
          }

          v7[1] = v23;
          ++v20;
        }

        while (v20 < *v18);
      }
    }

    return v7[1];
  }

  return result;
}

size_t DecodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v47[1] = a2;
  memcpy(v46, &GTMTLMeshRenderPipelineDescriptorDefaults, sizeof(v46));
  unsigned int v9 = *(_DWORD *)a1;
  size_t result = strlen((const char *)(a1 + 8));
  v47[0] = (void *)((result & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8 + 8);
  int v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v12 = (const char *)(a1 + 8);
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v11)
  {
    size_t result = strlen(v12);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = result + 1;
    if (result != -1LL)
    {
      uint64_t v16 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v15 = 0LL;
  uint64_t v16 = 0LL;
LABEL_9:
  *uint64_t v13 = v14 + v15;
  if (a4) {
    size_t result = (size_t)memcpy(v16, v12, v15);
  }
  *(int8x16_t *)((char *)&v46[22] + 8) = vextq_s8(*(int8x16_t *)v47[0], *(int8x16_t *)v47[0], 8uLL);
  uint64_t v17 = v47[0][2];
  WORD3(v46[25]) = v47[0][3];
  uint64_t v18 = v47[0][5];
  WORD2(v46[25]) = v47[0][4];
  uint64_t v19 = v47[0][7];
  __int128 v20 = *((_OWORD *)v47[0] + 4);
  uint64_t v22 = v47[0][10];
  uint64_t v21 = v47[0][11];
  uint64_t v23 = v47[0] + 12;
  uint64_t v24 = v47[0][6];
  v47[0] += 6;
  BYTE11(v46[31]) = v18;
  BYTE10(v46[31]) = v24;
  *((void *)&v46[21] + 1) = v17;
  *(void *)&v46[22] = v16;
  *((void *)&v46[23] + 1) = v19;
  v46[20] = v20;
  *(void *)&v46[21] = v22;
  if (v21)
  {
    uint64_t v25 = (char *)&v46[29] + 8;
    do
    {
      if (a4) {
        *uint64_t v25 = *v23;
      }
      ++v23;
      ++v25;
      --v21;
    }

    while (v21);
  }

  uint64_t v28 = *v23;
  uint64_t v26 = v23 + 1;
  uint64_t v27 = v28;
  v47[0] = v26;
  if (v28)
  {
    uint64_t v29 = (char *)&v46[27] + 9;
    do
    {
      if (a4) {
        *uint64_t v29 = *v26;
      }
      ++v26;
      ++v29;
      --v27;
    }

    while (v27);
  }

  uint64_t v32 = *v26;
  v30 = v26 + 1;
  uint64_t v31 = v32;
  v47[0] = v30;
  if (v32)
  {
    v33 = (char *)&v46[25] + 10;
    do
    {
      if (a4) {
        _BYTE *v33 = *v30;
      }
      ++v30;
      ++v33;
      --v31;
    }

    while (v31);
  }

  BYTE12(v46[31]) = *v30;
  BYTE7(v46[31]) = v30[1];
  BYTE8(v46[31]) = v30[2];
  BYTE13(v46[31]) = v30[3];
  BYTE9(v46[31]) = v30[4];
  HIDWORD(v46[24]) = v30[5];
  uint64_t v34 = v30[6];
  v35 = v30 + 7;
  v47[0] = v35;
  if (v34)
  {
    v36 = v46;
    do
    {
      size_t result = (size_t)MakeDYMTLRenderPipelineColorAttachmentDescriptor(v47, (uint64_t)v36++, a4);
      --v34;
    }

    while (v34);
    v35 = v47[0];
  }

  LOWORD(v46[25]) = *v35;
  WORD4(v46[25]) = v35[1];
  BYTE14(v46[31]) = v35[2];
  if (v9 > 0x43)
  {
    uint64_t v37 = v35[3];
    v47[0] = v35 + 4;
    DWORD2(v46[24]) = v37;
    if (v9 >= 0x46)
    {
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[16], a3, a4, a5);
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[12], a3, a4, a5);
      size_t result = MakeDYMTLLinkedFunctions((size_t)v47, &v46[8], a3, a4, a5);
      if (v9 >= 0x4B)
      {
        uint64_t v38 = v47[0][1];
        WORD1(v46[25]) = *v47[0];
        *(void *)&v46[24] = v38;
      }
    }
  }

  v39 = (char *)a3[26];
  a3[26] = v39 + 512;
  if (a4)
  {
    if (a5)
    {
      Stream_10858 = (uint64_t *)GetStream_10858(a5, *(uint64_t *)&v46[23]);
      if (Stream_10858) {
        uint64_t v41 = *Stream_10858;
      }
      else {
        uint64_t v41 = 0LL;
      }
      *(void *)&v46[23] = v41;
      v43 = (uint64_t *)GetStream_10858(a5, *((uint64_t *)&v46[22] + 1));
      if (v43) {
        uint64_t v44 = *v43;
      }
      else {
        uint64_t v44 = 0LL;
      }
      *((void *)&v46[22] + 1) = v44;
      v42 = (uint64_t *)GetStream_10858(a5, *((uint64_t *)&v46[21] + 1));
      if (!v42)
      {
        uint64_t v45 = 0LL;
        goto LABEL_46;
      }
    }

    else
    {
      v42 = (uint64_t *)&v46[21] + 1;
    }

    uint64_t v45 = *v42;
LABEL_46:
    *((void *)&v46[21] + 1) = v45;
    return (size_t)memcpy(v39, v46, 0x200uLL);
  }

  return result;
}

uint64_t EncodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  v53 = a2;
  unint64_t v55 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v54 = 8LL;
  WriteDynamicBufferString(&v53, *(const char **)(a1 + 352));
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v6 = *find_entry(a4, &v52, 8uLL, 0LL);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 32);
  }
  uint64_t v7 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v6 + 8);
    uint64_t v7 = v54 + 8;
  }

  uint64_t v54 = v7;
  uint64_t v51 = *(void *)(a1 + 360);
  uint64_t v8 = *find_entry(a4, &v51, 8uLL, 0LL);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 32);
  }
  uint64_t v9 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v8 + 8);
    uint64_t v9 = v54 + 8;
  }

  uint64_t v54 = v9;
  uint64_t v50 = *(void *)(a1 + 344);
  entry = find_entry(a4, &v50, 8uLL, 0LL);
  if (*entry) {
    uint64_t v11 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v11 = 0LL;
  }
  unint64_t v12 = v55;
  uint64_t v13 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v11 + 8);
    unint64_t v12 = v55;
    uint64_t v13 = v54 + 8;
  }

  uint64_t v54 = v13;
  uint64_t v14 = v13 + 8;
  if (v13 + 8 <= v12)
  {
    *(void *)((char *)v53 + v13) = *(unsigned __int16 *)(a1 + 406);
    unint64_t v12 = v55;
    uint64_t v14 = v54 + 8;
  }

  uint64_t v54 = v14;
  uint64_t v15 = v14 + 8;
  if (v14 + 8 <= v12)
  {
    *(void *)((char *)v53 + v14) = *(unsigned __int16 *)(a1 + 404);
    unint64_t v12 = v55;
    uint64_t v15 = v54 + 8;
  }

  uint64_t v54 = v15;
  uint64_t v16 = v15 + 8;
  if (v15 + 8 <= v12)
  {
    *(void *)((char *)v53 + v15) = *(unsigned __int8 *)(a1 + 507);
    unint64_t v12 = v55;
    uint64_t v16 = v54 + 8;
  }

  uint64_t v54 = v16;
  uint64_t v17 = v16 + 8;
  if (v16 + 8 <= v12)
  {
    *(void *)((char *)v53 + v16) = *(unsigned __int8 *)(a1 + 506);
    unint64_t v12 = v55;
    uint64_t v17 = v54 + 8;
  }

  uint64_t v54 = v17;
  uint64_t v18 = v17 + 8;
  if (v17 + 8 <= v12)
  {
    *(void *)((char *)v53 + v17) = *(void *)(a1 + 376);
    unint64_t v12 = v55;
    uint64_t v18 = v54 + 8;
  }

  uint64_t v54 = v18;
  uint64_t v20 = *(void *)(a1 + 328);
  uint64_t v19 = *(void *)(a1 + 336);
  uint64_t v21 = v18 + 8;
  if (v18 + 8 <= v12)
  {
    *(void *)((char *)v53 + v18) = *(void *)(a1 + 320);
    unint64_t v12 = v55;
    uint64_t v21 = v54 + 8;
  }

  uint64_t v54 = v21;
  uint64_t v22 = v21 + 8;
  if (v21 + 8 <= v12)
  {
    *(void *)((char *)v53 + v21) = v20;
    unint64_t v12 = v55;
    uint64_t v22 = v54 + 8;
  }

  uint64_t v54 = v22;
  uint64_t v23 = v22 + 8;
  if (v22 + 8 <= v12)
  {
    *(void *)((char *)v53 + v22) = v19;
    unint64_t v12 = v55;
    uint64_t v23 = v54 + 8;
  }

  uint64_t v54 = v23;
  uint64_t v24 = v23 + 8;
  if (v23 + 8 <= v12)
  {
    *(void *)((char *)v53 + v23) = 31LL;
    uint64_t v24 = v54 + 8;
  }

  uint64_t v25 = 0LL;
  uint64_t v54 = v24;
  do
  {
    uint64_t v26 = v24 + 8;
    if (v24 + 8 <= v55)
    {
      *(void *)((char *)v53 + v24) = *(unsigned __int8 *)(a1 + 472 + v25);
      uint64_t v26 = v54 + 8;
    }

    uint64_t v54 = v26;
    ++v25;
    uint64_t v24 = v26;
  }

  while (v25 != 31);
  uint64_t v27 = v26 + 8;
  if (v26 + 8 <= v55)
  {
    *(void *)((char *)v53 + v26) = 31LL;
    uint64_t v27 = v54 + 8;
  }

  uint64_t v28 = 0LL;
  uint64_t v54 = v27;
  do
  {
    uint64_t v29 = v27 + 8;
    if (v27 + 8 <= v55)
    {
      *(void *)((char *)v53 + v27) = *(unsigned __int8 *)(a1 + 441 + v28);
      uint64_t v29 = v54 + 8;
    }

    uint64_t v54 = v29;
    ++v28;
    uint64_t v27 = v29;
  }

  while (v28 != 31);
  uint64_t v30 = v29 + 8;
  if (v29 + 8 <= v55)
  {
    *(void *)((char *)v53 + v29) = 31LL;
    uint64_t v30 = v54 + 8;
  }

  uint64_t v31 = 0LL;
  uint64_t v54 = v30;
  do
  {
    uint64_t v32 = v30 + 8;
    if (v30 + 8 <= v55)
    {
      *(void *)((char *)v53 + v30) = *(unsigned __int8 *)(a1 + 410 + v31);
      uint64_t v32 = v54 + 8;
    }

    uint64_t v54 = v32;
    ++v31;
    uint64_t v30 = v32;
  }

  while (v31 != 31);
  uint64_t v33 = v32 + 8;
  unint64_t v34 = v55;
  if (v32 + 8 <= v55)
  {
    *(void *)((char *)v53 + v32) = *(unsigned __int8 *)(a1 + 508);
    unint64_t v34 = v55;
    uint64_t v33 = v54 + 8;
  }

  uint64_t v54 = v33;
  uint64_t v35 = v33 + 8;
  if (v33 + 8 <= v34)
  {
    *(void *)((char *)v53 + v33) = *(unsigned __int8 *)(a1 + 503);
    unint64_t v34 = v55;
    uint64_t v35 = v54 + 8;
  }

  uint64_t v54 = v35;
  uint64_t v36 = v35 + 8;
  if (v35 + 8 <= v34)
  {
    *(void *)((char *)v53 + v35) = *(unsigned __int8 *)(a1 + 504);
    unint64_t v34 = v55;
    uint64_t v36 = v54 + 8;
  }

  uint64_t v54 = v36;
  uint64_t v37 = v36 + 8;
  if (v36 + 8 <= v34)
  {
    *(void *)((char *)v53 + v36) = *(unsigned __int8 *)(a1 + 509);
    unint64_t v34 = v55;
    uint64_t v37 = v54 + 8;
  }

  uint64_t v54 = v37;
  uint64_t v38 = v37 + 8;
  if (v37 + 8 <= v34)
  {
    *(void *)((char *)v53 + v37) = *(unsigned __int8 *)(a1 + 505);
    unint64_t v34 = v55;
    uint64_t v38 = v54 + 8;
  }

  uint64_t v54 = v38;
  uint64_t v39 = v38 + 8;
  if (v38 + 8 <= v34)
  {
    *(void *)((char *)v53 + v38) = *(unsigned int *)(a1 + 396);
    unint64_t v34 = v55;
    uint64_t v39 = v54 + 8;
  }

  uint64_t v54 = v39;
  uint64_t v40 = v39 + 8;
  if (v39 + 8 <= v34)
  {
    *(void *)((char *)v53 + v39) = 8LL;
    uint64_t v40 = v54 + 8;
  }

  uint64_t v41 = 0LL;
  uint64_t v54 = v40;
  do
  {
    SaveDYMTLRenderPipelineColorAttachmentDescriptor(&v53, (unsigned __int8 *)(a1 + v41));
    v41 += 16LL;
  }

  while (v41 != 128);
  unint64_t v42 = v55;
  uint64_t v43 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(unsigned __int16 *)(a1 + 400);
    unint64_t v42 = v55;
    uint64_t v43 = v54 + 8;
  }

  uint64_t v54 = v43;
  uint64_t v44 = v43 + 8;
  if (v43 + 8 <= v42)
  {
    *(void *)((char *)v53 + v43) = *(unsigned __int16 *)(a1 + 408);
    unint64_t v42 = v55;
    uint64_t v44 = v54 + 8;
  }

  uint64_t v54 = v44;
  uint64_t v45 = v44 + 8;
  if (v44 + 8 <= v42)
  {
    *(void *)((char *)v53 + v44) = *(unsigned __int8 *)(a1 + 510);
    unint64_t v42 = v55;
    uint64_t v45 = v54 + 8;
  }

  uint64_t v54 = v45;
  uint64_t v46 = v45 + 8;
  if (v45 + 8 <= v42)
  {
    *(void *)((char *)v53 + v45) = *(unsigned int *)(a1 + 392);
    uint64_t v46 = v54 + 8;
  }

  uint64_t v54 = v46;
  SaveDYMTLLinkedFunctions(&v53, a1 + 256, a4);
  SaveDYMTLLinkedFunctions(&v53, a1 + 192, a4);
  SaveDYMTLLinkedFunctions(&v53, a1 + 128, a4);
  unint64_t v47 = v55;
  uint64_t v48 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(unsigned __int16 *)(a1 + 402);
    unint64_t v47 = v55;
    uint64_t v48 = v54 + 8;
  }

  uint64_t v54 = v48;
  uint64_t result = v48 + 8;
  if (v48 + 8 <= v47)
  {
    *(void *)((char *)v53 + v48) = *(void *)(a1 + 384);
    return v54 + 8;
  }

  return result;
}

size_t DecodeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = *(_BYTE *)(a1 + 8);
  uint64_t v8 = (const char *)(a1 + 24);
  char v9 = *(_BYTE *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 24));
  size_t v11 = result;
  int v12 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24)) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v12)
  {
    size_t result = strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = result + 1;
    if (result != -1LL)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }

  size_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v17, v13, v16);
    uint64_t v19 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 32];
    uint64_t v18 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 40];
    uint64_t v21 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 16];
    uint64_t v20 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 24];
    int32x2_t v22 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 48]);
    uint64_t v24 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 88];
    uint64_t v23 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 96];
    uint64_t v26 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 72];
    uint64_t v25 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 80];
    uint64_t v27 = *(void *)(a3 + 200);
    int32x2_t v28 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8LL) + 104]);
    *(void *)(a3 + 200) = v27 + 48;
    *(int32x2_t *)uint64_t v27 = v28;
    *(_BYTE *)(v27 + 8) = v24;
    *(_BYTE *)(v27 + 9) = v23;
    *(_BYTE *)(v27 + 10) = v26;
    *(_BYTE *)(v27 + 11) = v25;
    *(_DWORD *)(v27 + 12) = 0;
    *(int32x2_t *)(v27 + 16) = v22;
    *(_BYTE *)(v27 + 24) = v19;
    *(_BYTE *)(v27 + 25) = v18;
    *(_BYTE *)(v27 + 26) = v21;
    *(_BYTE *)(v27 + 27) = v20;
    *(_DWORD *)(v27 + 28) = 0;
    *(void *)(v27 + 32) = v17;
    *(_BYTE *)(v27 + 40) = v7;
    *(_BYTE *)(v27 + 41) = v9;
    *(_WORD *)(v27 + 46) = 0;
    *(_DWORD *)(v27 + 42) = 0;
  }

  else
  {
    *(void *)(a3 + 200) += 48LL;
  }

  return result;
}

uint64_t EncodeDYMTLDepthStencilDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  int v5 = a2;
  unint64_t v7 = a3;
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
      if (a3 >= 0x18) {
        a2[2] = *(unsigned __int8 *)(a1 + 41);
      }
    }
  }

  uint64_t v6 = 24LL;
  WriteDynamicBufferString(&v5, *(const char **)(a1 + 32));
  SaveDYMTLStencilDescriptor(&v5, (unsigned int *)(a1 + 16));
  SaveDYMTLStencilDescriptor(&v5, (unsigned int *)a1);
  return v6;
}

void *SaveDYMTLStencilDescriptor(void *result, unsigned int *a2)
{
  uint64_t v3 = result[1];
  unint64_t v2 = result[2];
  uint64_t v4 = v3 + 8;
  if (v3 + 8 <= v2)
  {
    *(void *)(*result + v3) = 0LL;
    unint64_t v2 = result[2];
    uint64_t v4 = result[1] + 8LL;
  }

  result[1] = v4;
  uint64_t v5 = v4 + 8;
  if (v4 + 8 <= v2)
  {
    *(void *)(*result + v4) = *((unsigned __int8 *)a2 + 10);
    unint64_t v2 = result[2];
    uint64_t v5 = result[1] + 8LL;
  }

  result[1] = v5;
  uint64_t v6 = v5 + 8;
  if (v5 + 8 <= v2)
  {
    *(void *)(*result + v5) = *((unsigned __int8 *)a2 + 11);
    unint64_t v2 = result[2];
    uint64_t v6 = result[1] + 8LL;
  }

  result[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v2)
  {
    *(void *)(*result + v6) = *((unsigned __int8 *)a2 + 8);
    unint64_t v2 = result[2];
    uint64_t v7 = result[1] + 8LL;
  }

  result[1] = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v2)
  {
    *(void *)(*result + v7) = *((unsigned __int8 *)a2 + 9);
    unint64_t v2 = result[2];
    uint64_t v8 = result[1] + 8LL;
  }

  result[1] = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v2)
  {
    *(void *)(*result + v8) = *a2;
    unint64_t v2 = result[2];
    uint64_t v9 = result[1] + 8LL;
  }

  result[1] = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v2)
  {
    *(void *)(*result + v9) = a2[1];
    uint64_t v10 = result[1] + 8LL;
  }

  result[1] = v10;
  return result;
}

uint64_t DecodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  char v34 = *(_BYTE *)(a1 + 16);
  char v35 = *(_BYTE *)(a1 + 24);
  char v36 = *(_BYTE *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  char v37 = *(_BYTE *)(a1 + 40);
  char v38 = *(_BYTE *)(a1 + 48);
  char v9 = *(_BYTE *)(a1 + 56);
  char v10 = *(_BYTE *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 72);
  int v12 = (const char *)(a1 + 88);
  int v13 = *(_DWORD *)(a1 + 80);
  size_t v14 = strlen((const char *)(a1 + 88));
  if (*(_BYTE *)(a1 + 88)) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    size_t v16 = strlen(v15);
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
    size_t v19 = v16 + 1;
    if (v16 != -1LL)
    {
      uint64_t v20 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
  }

  size_t v19 = 0LL;
  uint64_t v20 = 0LL;
LABEL_9:
  *uint64_t v17 = v18 + v19;
  if (a4) {
    memcpy(v20, v15, v19);
  }
  int32x4_t v21 = 0uLL;
  if (v7 < 2)
  {
    int v24 = 0;
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    int v22 = 0;
LABEL_22:
    char v23 = 0;
LABEL_23:
    int v25 = 0;
LABEL_24:
    char v28 = 0;
    goto LABEL_25;
  }

  int v22 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (v7 < 8)
  {
    int v24 = 0;
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_22;
  }

  char v23 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 16];
  if (v7 < 0xA)
  {
    int v24 = 0;
    goto LABEL_41;
  }

  int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 24];
  if (v7 < 0x11)
  {
LABEL_41:
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_23;
  }

  int v25 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 32];
  if (v7 < 0x16)
  {
    char v29 = 0;
    uint64_t v26 = 0LL;
    int v27 = 0;
    goto LABEL_24;
  }

  uint64_t v26 = *(void *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 40];
  int v27 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 48];
  if (v7 < 0x1C)
  {
    char v29 = 0;
    goto LABEL_24;
  }

  char v28 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 56];
  if (v7 < 0x27)
  {
    char v29 = 0;
  }

  else
  {
    int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 64];
    int32x4_t v21 = vuzp1q_s32( *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 72],  *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 88]);
    char v29 = v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 104];
    if (v7 >= 0x2A)
    {
      __int16 v30 = *(_WORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8LL) + 112];
      goto LABEL_26;
    }
  }

uint64_t EncodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = a2;
  unint64_t v26 = a3;
  if (a3 <= 7)
  {
    uint64_t v25 = 8LL;
LABEL_9:
    uint64_t v25 = 56LL;
    goto LABEL_10;
  }

  *(void *)a2 = 81LL;
  uint64_t v25 = 8LL;
  if (a3 < 0x10) {
    goto LABEL_9;
  }
  *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 56);
  if (a3 < 0x18) {
    goto LABEL_9;
  }
  *(void *)(a2 + 16) = *(unsigned __int8 *)(a1 + 55);
  if (a3 < 0x20) {
    goto LABEL_9;
  }
  *(void *)(a2 + 24) = *(unsigned __int8 *)(a1 + 57);
  if (a3 < 0x28) {
    goto LABEL_9;
  }
  *(void *)(a2 + 32) = *(void *)(a1 + 8);
  if (a3 < 0x30) {
    goto LABEL_9;
  }
  *(void *)(a2 + 40) = *(unsigned __int8 *)(a1 + 61);
  if (a3 <= 0x37) {
    goto LABEL_9;
  }
  *(void *)(a2 + 48) = *(unsigned __int8 *)(a1 + 63);
  uint64_t v25 = 56LL;
  if (a3 >= 0x40)
  {
    *(void *)(a2 + 56) = *(unsigned __int8 *)(a1 + 59);
    if (a3 >= 0x48)
    {
      *(void *)(a2 + 64) = *(unsigned __int8 *)(a1 + 58);
      if (a3 >= 0x4C)
      {
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 44);
        if (a3 >= 0x4D)
        {
          int32x4_t v21 = (void *)(a2 + 76);
          size_t v22 = a3 - 76 >= 4 ? 4LL : a3 - 76;
          bzero(v21, v22);
          if (a3 >= 0x54)
          {
            *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
            if (a3 >= 0x55)
            {
              if (a3 - 84 >= 4) {
                size_t v23 = 4LL;
              }
              else {
                size_t v23 = a3 - 84;
              }
              bzero((void *)(a2 + 84), v23);
            }
          }
        }
      }
    }
  }

uint64_t DecodeDYMTLHeapDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 184);
  *(void *)(a3 + 184) = v4 + 24;
  if (a4)
  {
    *(_OWORD *)uint64_t v4 = GTMTLHeapDescriptorDefaults;
    *(void *)(v4 + 16) = 32LL;
    unsigned int v5 = *(_DWORD *)result;
    *(void *)(v4 + 8) = *(void *)(result + 8);
    *(_BYTE *)(v4 + 19) = *(void *)(result + 32);
    *(_WORD *)(v4 + 16) = *(void *)(result + 56);
    if (v5 >= 0x2A)
    {
      *(_BYTE *)(v4 + 18) = *(void *)(result + 64);
      if (v5 >= 0x34) {
        *(void *)uint64_t v4 = *(void *)(result + 72);
      }
    }
  }

  return result;
}

uint64_t EncodeDYMTLHeapDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(_WORD *)(a1 + 16) & 0xF;
        if (a3 >= 0x20)
        {
          a2[3] = *(_WORD *)(a1 + 16) >> 4;
          if (a3 >= 0x28)
          {
            a2[4] = *(unsigned __int8 *)(a1 + 19);
            if (a3 >= 0x30)
            {
              a2[5] = (*(_WORD *)(a1 + 16) & 0x300) == 512;
              if (a3 >= 0x38)
              {
                a2[6] = ((unint64_t)*(unsigned __int16 *)(a1 + 16) >> 8) & 3;
                if (a3 >= 0x40)
                {
                  a2[7] = *(unsigned __int16 *)(a1 + 16);
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(unsigned __int8 *)(a1 + 18);
                    if (a3 >= 0x50) {
                      a2[9] = *(void *)a1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 80LL;
}

uint64_t DecodeDYMTLIndirectCommandBufferDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 176);
  *(void *)(a3 + 176) = v4 + 24;
  if (a4)
  {
    *(void *)uint64_t v4 = 0LL;
    *(void *)(v4 + 8) = 0LL;
    *(void *)(v4 + 16) = 0LL;
    unsigned int v5 = *(_DWORD *)result;
    *(_WORD *)(v4 + 8) = *(void *)(result + 8);
    *(_BYTE *)(v4 + 11) = *(void *)(result + 16);
    *(_BYTE *)(v4 + 10) = *(void *)(result + 24);
    *(_BYTE *)(v4 + 18) = *(void *)(result + 32);
    *(_BYTE *)(v4 + 12) = *(void *)(result + 40);
    if (v5 >= 0x1B)
    {
      *(_BYTE *)(v4 + 13) = *(void *)(result + 48);
      *(_BYTE *)(v4 + 14) = *(void *)(result + 56);
      if (v5 >= 0x29)
      {
        *(void *)uint64_t v4 = *(void *)(result + 64);
        if (v5 >= 0x3C)
        {
          *(_BYTE *)(v4 + 20) = *(void *)(result + 72);
          if (v5 >= 0x48)
          {
            *(_BYTE *)(v4 + 16) = *(void *)(result + 80);
            *(_BYTE *)(v4 + 15) = *(void *)(result + 88);
            *(_BYTE *)(v4 + 17) = *(void *)(result + 96);
            if (v5 != 72)
            {
              *(_BYTE *)(v4 + 19) = *(void *)(result + 104);
              if (v5 >= 0x4A) {
                *(_BYTE *)(v4 + 21) = *(void *)(result + 112);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t EncodeDYMTLIndirectCommandBufferDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int16 *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int8 *)(a1 + 11);
        if (a3 >= 0x20)
        {
          a2[3] = *(unsigned __int8 *)(a1 + 10);
          if (a3 >= 0x28)
          {
            a2[4] = *(unsigned __int8 *)(a1 + 18);
            if (a3 >= 0x30)
            {
              a2[5] = *(unsigned __int8 *)(a1 + 12);
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int8 *)(a1 + 13);
                if (a3 >= 0x40)
                {
                  a2[7] = *(unsigned __int8 *)(a1 + 14);
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(void *)a1;
                    if (a3 >= 0x50)
                    {
                      a2[9] = *(unsigned __int8 *)(a1 + 20);
                      if (a3 >= 0x58)
                      {
                        a2[10] = *(unsigned __int8 *)(a1 + 16);
                        if (a3 >= 0x60)
                        {
                          a2[11] = *(unsigned __int8 *)(a1 + 15);
                          if (a3 >= 0x68)
                          {
                            a2[12] = *(unsigned __int8 *)(a1 + 17);
                            if (a3 >= 0x70)
                            {
                              a2[13] = *(unsigned __int8 *)(a1 + 19);
                              if (a3 >= 0x78) {
                                a2[14] = *(unsigned __int8 *)(a1 + 21);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 120LL;
}

void DecodeDYMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v66[1] = a2;
  memcpy(v65, &GTMTLComputePipelineDescriptorDefaults, sizeof(v65));
  unsigned int v9 = *(_DWORD *)a1;
  uint64_t v10 = *(void *)(a1 + 16);
  v65[106] = *(void *)(a1 + 8);
  BYTE6(v65[119]) = v10;
  v66[0] = (strlen((const char *)(a1 + 24)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 24 + 8;
  int v11 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24)) {
    uint64_t v12 = (const char *)(a1 + 24);
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v11)
  {
    size_t v13 = strlen(v12);
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1LL)
    {
      uint64_t v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }

  size_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  v65[109] = v17;
  if (v9 < 0xB) {
    goto LABEL_87;
  }
  bzero(__src, 0x2F0uLL);
  uint64_t v18 = (uint64_t *)v66[0];
  if (v9 < 0x1A)
  {
    uint64_t v19 = 31LL;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v66[0] + 8LL);
    uint64_t v19 = *(unsigned int *)v66[0];
    if (!*(_DWORD *)v66[0]) {
      goto LABEL_23;
    }
  }

  uint64_t v20 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v22 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v23 = *v18;
      if (*v18 == 0xFFFFFFFFLL) {
        uint64_t v23 = -1LL;
      }
      *(void *)(v20 - 11) = v23;
      *(_WORD *)(v20 - 3) = v22;
      *(v20 - 1) = v21;
      *(_DWORD *)uint64_t v20 = 0;
      v20[4] = 0;
    }

    v18 += 3;
    v20 += 16;
    --v19;
  }

  while (v19);
  v66[0] = v18;
  if (v9 > 0x19)
  {
LABEL_23:
    unsigned int v25 = *(_DWORD *)v18++;
    uint64_t v24 = v25;
    v66[0] = v18;
    if (!v25) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }

  uint64_t v24 = 31LL;
LABEL_26:
  unint64_t v26 = &__src[502];
  do
  {
    if (a4)
    {
      uint64_t v27 = v18[2];
      uint64_t v28 = *v18;
      *(_DWORD *)(v26 - 3) = v18[1];
      *((_BYTE *)v26 - 2) = v27;
      *((_BYTE *)v26 - 1) = v28;
      *unint64_t v26 = 0;
    }

    v18 += 3;
    v26 += 4;
    --v24;
  }

  while (v24);
LABEL_30:
  __src[745] = *v18;
  uint64_t v29 = v18[1];
  __int16 v30 = v18 + 2;
  v66[0] = v18 + 2;
  __src[744] = v29;
  if ((a4 & 1) != 0) {
    memcpy(v65, __src, 0x2F0uLL);
  }
  HIBYTE(v65[118]) = -1;
  if (v9 >= 0x12)
  {
    if (v9 < 0x1A)
    {
      uint64_t v31 = 31LL;
    }

    else
    {
      uint64_t v31 = v18[2];
      __int16 v30 = v18 + 3;
      v66[0] = v18 + 3;
      uint64_t v31 = v31;
    }

    uint64_t v32 = &v65[115];
    do
    {
      uint64_t v33 = *v30++;
      *v32++ = v33;
      --v31;
    }

    while (v31);
LABEL_39:
    if (v9 >= 0x1B)
    {
      BYTE4(v65[119]) = *v30;
      if (v9 >= 0x25)
      {
        HIWORD(v65[114]) = v30[1];
        if (v9 != 37)
        {
          v65[110] = v30[2];
          if (v9 >= 0x28)
          {
            uint64_t v34 = v30[3];
            char v35 = v30 + 4;
            v66[0] = v35;
            v65[108] = v34;
            if (v34)
            {
              char v36 = (uint64_t *)a3[50];
              v65[107] = v36;
              do
              {
                uint64_t v38 = *v35++;
                uint64_t v37 = v38;
                if (a4)
                {
                  if (a5)
                  {
                    Stream_10858 = (uint64_t *)GetStream_10858(a5, v37);
                    if (Stream_10858) {
                      uint64_t v37 = *Stream_10858;
                    }
                    else {
                      uint64_t v37 = 0LL;
                    }
                  }

                  char v36 = (uint64_t *)a3[50];
                  uint64_t *v36 = v37;
                }

                a3[50] = ++v36;
                --v34;
              }

              while (v34);
            }

            else
            {
              v65[107] = 0LL;
            }

            if (v9 >= 0x29)
            {
              v65[113] = *v35;
              if (v9 != 41)
              {
                BYTE5(v65[119]) = v35[1];
                LOWORD(v65[114]) = v35[2];
                BYTE2(v65[119]) = v35[3];
                BYTE1(v65[119]) = v35[4];
                LOBYTE(v65[119]) = v35[5];
                size_t v40 = v35[6];
                uint64_t v41 = v35 + 7;
                unint64_t v42 = (size_t *)((char *)v35 + ((v40 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 56);
                v66[0] = v42;
                if (v40) {
                  uint64_t v43 = (void *)a3[52];
                }
                else {
                  uint64_t v43 = 0LL;
                }
                uint64_t v44 = (char *)(a3[52] + v40);
                a3[52] = v44;
                if (a4)
                {
                  if (v40) {
                    uint64_t v45 = v41;
                  }
                  else {
                    uint64_t v45 = 0LL;
                  }
                  memcpy(v43, v45, v40);
                  uint64_t v44 = (char *)a3[52];
                }

                v65[104] = v43;
                v65[105] = v40;
                size_t v48 = *v42;
                unint64_t v47 = v42 + 1;
                size_t v46 = v48;
                v49 = (void *)((char *)v47 + ((v48 + 7) & 0xFFFFFFFFFFFFFFF8LL));
                v66[0] = v49;
                if (v48) {
                  uint64_t v50 = v44;
                }
                else {
                  uint64_t v50 = 0LL;
                }
                a3[52] = &v44[v46];
                if (a4)
                {
                  if (v46) {
                    uint64_t v51 = v47;
                  }
                  else {
                    uint64_t v51 = 0LL;
                  }
                  memcpy(v50, v51, v46);
                }

                v65[102] = v50;
                v65[103] = v46;
                if (v9 >= 0x2D)
                {
                  uint64_t v52 = *v49;
                  v66[0] = v49 + 1;
                  WORD2(v65[114]) = v52;
                  uint64_t v53 = v49[1];
                  v66[0] = v49 + 2;
                  BYTE3(v65[119]) = v53;
                  MakeDYMTLLinkedFunctions((size_t)v66, &v65[94], a3, a4, a5);
                  if (v9 >= 0x30)
                  {
                    uint64_t v54 = (uint64_t *)(v66[0] + 8LL);
                    uint64_t v55 = *(void *)v66[0];
                    v65[112] = v55;
                    if (v55)
                    {
                      v56 = (uint64_t *)a3[50];
                      v65[111] = v56;
                      do
                      {
                        uint64_t v58 = *v54++;
                        uint64_t v57 = v58;
                        if (a4)
                        {
                          if (a5)
                          {
                            v59 = (uint64_t *)GetStream_10858(a5, v57);
                            if (v59) {
                              uint64_t v57 = *v59;
                            }
                            else {
                              uint64_t v57 = 0LL;
                            }
                          }

                          v56 = (uint64_t *)a3[50];
                          uint64_t *v56 = v57;
                        }

                        a3[50] = ++v56;
                        --v55;
                      }

                      while (v55);
                    }

                    else
                    {
                      v65[111] = 0LL;
                    }

                    if (v9 >= 0x4B) {
                      WORD1(v65[114]) = *v54;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_87:
  v60 = (char *)a3[21];
  a3[21] = v60 + 960;
  if (!a4) {
    return;
  }
  if (a5)
  {
    v61 = (uint64_t *)GetStream_10858(a5, v65[106]);
    if (v61) {
      uint64_t v62 = *v61;
    }
    else {
      uint64_t v62 = 0LL;
    }
    v65[106] = v62;
    v63 = (uint64_t *)GetStream_10858(a5, v65[110]);
    if (!v63)
    {
      uint64_t v64 = 0LL;
      goto LABEL_96;
    }
  }

  else
  {
    v63 = &v65[110];
  }

  uint64_t v64 = *v63;
LABEL_96:
  v65[110] = v64;
  memcpy(v60, v65, 0x3C0uLL);
}

uint64_t EncodeDYMTLComputePipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v58 = a2;
  unint64_t v60 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v59 = 8LL;
  uint64_t v57 = *(void *)(a1 + 848);
  entry = find_entry(a4, &v57, 8uLL, 0LL);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v7 = 0LL;
  }
  unint64_t v8 = v60;
  uint64_t v9 = v59 + 8;
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = *(void *)(v7 + 8);
    unint64_t v8 = v60;
    uint64_t v9 = v59 + 8;
  }

  uint64_t v59 = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v8)
  {
    *(void *)((char *)v58 + v9) = *(unsigned __int8 *)(a1 + 958);
    uint64_t v10 = v59 + 8;
  }

  uint64_t v59 = v10;
  WriteDynamicBufferString(&v58, *(const char **)(a1 + 872));
  uint64_t v11 = v59 + 8;
  if (!*(_BYTE *)(a1 + 951))
  {
    if (v59 + 8 > v60) {
      goto LABEL_38;
    }
    *(void *)((char *)v58 + v59) = -1LL;
    goto LABEL_37;
  }

  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = 31LL;
    uint64_t v11 = v59 + 8;
  }

  uint64_t v12 = 0LL;
  uint64_t v59 = v11;
  do
  {
    uint64_t v13 = v11 + 8;
    unint64_t v14 = v60;
    if (v11 + 8 <= v60)
    {
      *(void *)((char *)v58 + v11) = *(void *)(a1 + v12);
      unint64_t v14 = v60;
      uint64_t v13 = v59 + 8;
    }

    uint64_t v59 = v13;
    uint64_t v15 = v13 + 8;
    if (v13 + 8 <= v14)
    {
      *(void *)((char *)v58 + v13) = *(unsigned __int16 *)(a1 + v12 + 8);
      unint64_t v14 = v60;
      uint64_t v15 = v59 + 8;
    }

    uint64_t v59 = v15;
    uint64_t v11 = v15 + 8;
    if (v15 + 8 <= v14)
    {
      *(void *)((char *)v58 + v15) = *(unsigned __int8 *)(a1 + v12 + 10);
      uint64_t v11 = v59 + 8;
    }

    uint64_t v59 = v11;
    v12 += 16LL;
  }

  while (v12 != 496);
  uint64_t v16 = v11 + 8;
  if (v11 + 8 <= v60)
  {
    *(void *)((char *)v58 + v11) = 31LL;
    uint64_t v16 = v59 + 8;
  }

  uint64_t v17 = 0LL;
  uint64_t v59 = v16;
  do
  {
    uint64_t v18 = a1 + v17;
    uint64_t v19 = v16 + 8;
    unint64_t v20 = v60;
    if (v16 + 8 <= v60)
    {
      *(void *)((char *)v58 + v16) = *(unsigned __int8 *)(v18 + 501);
      unint64_t v20 = v60;
      uint64_t v19 = v59 + 8;
    }

    uint64_t v59 = v19;
    uint64_t v21 = v19 + 8;
    if (v19 + 8 <= v20)
    {
      *(void *)((char *)v58 + v19) = *(unsigned int *)(v18 + 496);
      unint64_t v20 = v60;
      uint64_t v21 = v59 + 8;
    }

    uint64_t v59 = v21;
    uint64_t v16 = v21 + 8;
    if (v21 + 8 <= v20)
    {
      *(void *)((char *)v58 + v21) = *(unsigned __int8 *)(a1 + v17 + 500);
      uint64_t v16 = v59 + 8;
    }

    uint64_t v59 = v16;
    v17 += 8LL;
  }

  while (v17 != 248);
  uint64_t v22 = v16 + 8;
  unint64_t v23 = v60;
  if (v16 + 8 <= v60)
  {
    *(void *)((char *)v58 + v16) = *(unsigned __int8 *)(a1 + 745);
    unint64_t v23 = v60;
    uint64_t v22 = v59 + 8;
  }

  uint64_t v59 = v22;
  uint64_t v11 = v22 + 8;
  if (v22 + 8 <= v23)
  {
    *(void *)((char *)v58 + v22) = *(unsigned __int8 *)(a1 + 744);
LABEL_37:
    uint64_t v11 = v59 + 8;
  }

double DecodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v59[1] = a2;
  __int128 v56 = xmmword_1C80F8;
  __int128 v57 = unk_1C8108;
  __int128 v58 = xmmword_1C8118;
  __int128 v52 = xmmword_1C80B8;
  __int128 v53 = unk_1C80C8;
  __int128 v54 = xmmword_1C80D8;
  __int128 v55 = unk_1C80E8;
  __int128 v48 = GTMTLTileRenderPipelineDescriptorDefaults;
  __int128 v49 = unk_1C8088;
  __int128 v50 = xmmword_1C8098;
  __int128 v51 = unk_1C80A8;
  uint64_t v9 = (const char *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)a1;
  v59[0] = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8 + 8;
  int v12 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v12)
  {
    size_t v14 = strlen(v13);
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
    size_t v17 = v14 + 1;
    if (v14 != -1LL)
    {
      uint64_t v18 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
  }

  size_t v17 = 0LL;
  uint64_t v18 = 0LL;
LABEL_9:
  *uint64_t v15 = v16 + v17;
  if (a4) {
    memcpy(v18, v13, v17);
  }
  uint64_t v19 = *(void *)v59[0];
  uint64_t v20 = *(void *)(v59[0] + 8LL);
  *(void *)&__int128 v54 = v18;
  *((void *)&v55 + 1) = v19;
  WORD3(v56) = v20;
  uint64_t v21 = *(void *)(v59[0] + 16LL);
  uint64_t v22 = (void *)(v59[0] + 24LL);
  if (v21)
  {
    unint64_t v23 = &v52;
    do
    {
      if (a4) {
        *(_WORD *)unint64_t v23 = *v22;
      }
      ++v22;
      unint64_t v23 = (__int128 *)((char *)v23 + 2);
      --v21;
    }

    while (v21);
  }

  BYTE9(v58) = *v22;
  uint64_t v24 = v22[1];
  uint64_t v25 = v22 + 2;
  v59[0] = v25;
  if (v24)
  {
    uint64_t v26 = (char *)&v56 + 8;
    do
    {
      if (a4) {
        *uint64_t v26 = *v25;
      }
      ++v25;
      ++v26;
      --v24;
    }

    while (v24);
  }

  if (v10 > 0x2D)
  {
    size_t v29 = *v25;
    uint64_t v27 = v25 + 1;
    size_t v28 = v29;
    __int16 v30 = (void *)((char *)v27 + ((v29 + 7) & 0xFFFFFFFFFFFFFFF8LL));
    v59[0] = v30;
    if (v29) {
      uint64_t v31 = (void *)a3[52];
    }
    else {
      uint64_t v31 = 0LL;
    }
    a3[52] += v28;
    if (a4)
    {
      if (v28) {
        unint64_t v32 = v27;
      }
      else {
        unint64_t v32 = 0LL;
      }
      memcpy(v31, v32, v28);
    }

    *(void *)&__int128 v53 = v31;
    *((void *)&v53 + 1) = v28;
    if (v10 >= 0x33)
    {
      uint64_t v35 = *v30;
      uint64_t v34 = v30 + 1;
      uint64_t v33 = v35;
      v59[0] = v34;
      *(void *)&__int128 v55 = v35;
      if (v35)
      {
        unint64_t v36 = (uint64_t *)a3[50];
        *((void *)&v54 + 1) = v36;
        do
        {
          uint64_t v38 = *v34++;
          uint64_t v37 = v38;
          if (a4)
          {
            if (a5)
            {
              Stream_10858 = (uint64_t *)GetStream_10858(a5, v37);
              if (Stream_10858) {
                uint64_t v37 = *Stream_10858;
              }
              else {
                uint64_t v37 = 0LL;
              }
            }

            unint64_t v36 = (uint64_t *)a3[50];
            uint64_t *v36 = v37;
          }

          a3[50] = ++v36;
          --v33;
        }

        while (v33);
        v59[0] = v34;
      }

      else
      {
        *((void *)&v54 + 1) = 0LL;
      }

      if (v10 >= 0x37)
      {
        MakeDYMTLLinkedFunctions((size_t)v59, &v48, a3, a4, a5);
        if (v10 >= 0x42)
        {
          BYTE8(v58) = *(void *)v59[0];
          if (v10 >= 0x45)
          {
            WORD1(v56) = *(void *)(v59[0] + 8LL);
            if (v10 >= 0x4B) {
              LOWORD(v56) = *(void *)(v59[0] + 16LL);
            }
          }
        }
      }
    }
  }

  uint64_t v40 = (__int128 *)a3[20];
  a3[20] = v40 + 11;
  if (a4)
  {
    uint64_t v41 = *((void *)&v55 + 1);
    if (a5)
    {
      uint64_t v42 = (uint64_t *)GetStream_10858(a5, *((uint64_t *)&v55 + 1));
      if (v42) {
        uint64_t v41 = *v42;
      }
      else {
        uint64_t v41 = 0LL;
      }
    }

    *((void *)&v55 + 1) = v41;
    __int128 v43 = v57;
    v40[8] = v56;
    v40[9] = v43;
    v40[10] = v58;
    __int128 v44 = v53;
    v40[4] = v52;
    v40[5] = v44;
    __int128 v45 = v49;
    *uint64_t v40 = v48;
    v40[1] = v45;
    __int128 v46 = v51;
    v40[2] = v50;
    v40[3] = v46;
    double result = *(double *)&v54;
    __int128 v47 = v55;
    v40[6] = v54;
    v40[7] = v47;
  }

  return result;
}

uint64_t EncodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  __int16 v30 = a2;
  unint64_t v32 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v31 = 8LL;
  WriteDynamicBufferString(&v30, *(const char **)(a1 + 96));
  uint64_t v29 = *(void *)(a1 + 120);
  entry = find_entry(a4, &v29, 8uLL, 0LL);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v9 = v31;
  unint64_t v8 = v32;
  uint64_t v10 = v31 + 8;
  if (v31 + 8 <= v32) {
    *(void *)((char *)v30 + v31) = *(void *)(v7 + 8);
  }
  if (v9 + 16 <= v8) {
    *(void *)((char *)v30 + v10) = *(unsigned __int16 *)(a1 + 134);
  }
  uint64_t v31 = v9 + 16;
  if (v9 + 24 <= v8) {
    *(void *)((char *)v30 + v9 + 16) = 8LL;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = 64LL;
  do
  {
    if (v9 + v11 + 32 <= v8) {
      *(void *)((char *)v30 + v9 + v11 + 24) = *(unsigned __int16 *)(a1 + v12);
    }
    v11 += 8LL;
    v12 += 2LL;
  }

  while (v11 != 64);
  uint64_t v13 = v9 + 64;
  uint64_t v14 = v9 + 80;
  uint64_t v15 = v14 + 16;
  if (v14 + 16 <= v8) {
    *(void *)((char *)v30 + v13 + 24) = *(unsigned __int8 *)(a1 + 169);
  }
  unint64_t v16 = v14 + 24;
  if (v16 <= v8) {
    *(void *)((char *)v30 + v15) = 31LL;
  }
  for (uint64_t i = 136LL; i != 167; ++i)
  {
    if (v16 + 8 <= v8) {
      *(void *)((char *)v30 + v16) = *(unsigned __int8 *)(a1 + i);
    }
    uint64_t v31 = v16 + 8;
    v16 += 8LL;
  }

  WriteGTData(&v30, *(const void **)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = v32;
  uint64_t v20 = v31 + 8;
  if (v31 + 8 <= v32)
  {
    *(void *)((char *)v30 + v31) = v18;
    uint64_t v18 = *(void *)(a1 + 112);
  }

  uint64_t v31 = v20;
  if (v18)
  {
    unint64_t v21 = 0LL;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 104) + 8 * v21);
      uint64_t v22 = find_entry(a4, &v28, 8uLL, 0LL);
      if (*v22) {
        uint64_t v23 = *(void *)(*v22 + 32LL);
      }
      else {
        uint64_t v23 = 0LL;
      }
      if (v20 + 8 <= v19) {
        *(void *)((char *)v30 + v20) = *(void *)(v23 + 8);
      }
      uint64_t v31 = v20 + 8;
      ++v21;
      v20 += 8LL;
    }

    while (*(void *)(a1 + 112) > v21);
  }

  SaveDYMTLLinkedFunctions(&v30, a1, a4);
  unint64_t v24 = v32;
  uint64_t v25 = v31 + 8;
  if (v31 + 8 <= v32)
  {
    *(void *)((char *)v30 + v31) = *(unsigned __int8 *)(a1 + 168);
    unint64_t v24 = v32;
    uint64_t v25 = v31 + 8;
  }

  uint64_t v31 = v25;
  uint64_t v26 = v25 + 8;
  if (v25 + 8 <= v24)
  {
    *(void *)((char *)v30 + v25) = *(unsigned __int16 *)(a1 + 130);
    unint64_t v24 = v32;
    uint64_t v26 = v31 + 8;
  }

  uint64_t v31 = v26;
  uint64_t result = v26 + 8;
  if (v26 + 8 <= v24)
  {
    *(void *)((char *)v30 + v26) = *(unsigned __int16 *)(a1 + 128);
    return v31 + 8;
  }

  return result;
}

uint64_t DecodeDYMTLMotionEstimationPipelineDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  *(void *)(a3 + 152) = v4 + 4;
  if (a4)
  {
    *(_DWORD *)uint64_t v4 = 0;
    *(_WORD *)(v4 + 2) = *(void *)(result + 8);
    *(_WORD *)uint64_t v4 = *(void *)(result + 16);
  }

  return result;
}

uint64_t EncodeDYMTLMotionEstimationPipelineDescriptor(unsigned __int16 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = a1[1];
      if (a3 >= 0x18) {
        a2[2] = *a1;
      }
    }
  }

  return 24LL;
}

uint64_t DecodeDYMTLCommandQueueDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 144);
  *(void *)(a3 + 144) = v4 + 16;
  if (a4)
  {
    *(_OWORD *)uint64_t v4 = GTMTLCommandQueueDescriptorDefaults;
    unsigned int v5 = *(_DWORD *)result;
    *(_DWORD *)uint64_t v4 = *(void *)(result + 8);
    *(_BYTE *)(v4 + 8) = *(void *)(result + 16);
    *(_BYTE *)(v4 + 4) = *(void *)(result + 24);
    *(_BYTE *)(v4 + 7) = *(void *)(result + 32);
    if (v5 >= 0x2A)
    {
      *(_BYTE *)(v4 + 6) = *(void *)(result + 40);
      if (v5 >= 0x51) {
        *(_BYTE *)(v4 + 5) = *(void *)(result + 48);
      }
    }
  }

  return result;
}

uint64_t EncodeDYMTLCommandQueueDescriptor(unsigned __int8 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned int *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[8];
        if (a3 >= 0x20)
        {
          a2[3] = a1[4];
          if (a3 >= 0x28)
          {
            a2[4] = a1[7];
            if (a3 >= 0x30)
            {
              a2[5] = a1[6];
              if (a3 >= 0x38) {
                a2[6] = a1[5];
              }
            }
          }
        }
      }
    }
  }

  return 56LL;
}

void *DecodeDYMTLIOCommandQueueDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 136);
  *(void *)(a3 + 136) = v4 + 8;
  if (a4)
  {
    *(void *)uint64_t v4 = 64LL;
    *(_DWORD *)uint64_t v4 = result[1];
    *(_BYTE *)(v4 + 4) = result[2];
    *(_BYTE *)(v4 + 5) = result[3];
  }

  return result;
}

uint64_t EncodeDYMTLIOCommandQueueDescriptor(unsigned int *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = *((unsigned __int8 *)a1 + 4);
        if (a3 >= 0x20) {
          a2[3] = *((unsigned __int8 *)a1 + 5);
        }
      }
    }
  }

  return 32LL;
}

uint64_t *DecodeDYMTLCommandBufferDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = v5 + 16;
  if (a4)
  {
    *(_OWORD *)uint64_t v5 = GTMTLCommandBufferDescriptorDefaults;
    *(_BYTE *)(v5 + 8) = result[1];
    *(_BYTE *)(v5 + 9) = result[2];
    uint64_t v6 = result[3];
    *(void *)uint64_t v5 = v6;
    if (a5)
    {
      uint64_t result = (uint64_t *)GetStream_10858(a5, v6);
      if (result) {
        uint64_t v6 = *result;
      }
      else {
        uint64_t v6 = 0LL;
      }
    }

    *(void *)uint64_t v5 = v6;
  }

  return result;
}

uint64_t EncodeDYMTLCommandBufferDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *((unsigned __int8 *)a1 + 8);
      if (a3 >= 0x18) {
        a2[2] = *((unsigned __int8 *)a1 + 9);
      }
    }
  }

  uint64_t v8 = *a1;
  uint64_t v6 = *find_entry(a4, &v8, 8uLL, 0LL);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 32);
  }
  if (a3 >= 0x20) {
    a2[3] = *(void *)(v6 + 8);
  }
  return 32LL;
}

size_t DecodeDYMTLFunctionConstantValues(size_t result, uint64_t a2, void *a3, int a4)
{
  unint64_t v6 = result + 8;
  uint64_t v28 = a3[40];
  if (*(void *)(result + 8) != -1LL)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = a3[40];
      a3[40] = v8 + 32;
      uint64_t v9 = *(void *)v6;
      unint64_t v10 = v6 + 8;
      uint64_t result = strlen((const char *)(v6 + 8));
      size_t v11 = result;
      int v12 = *(unsigned __int8 *)(v6 + 8);
      uint64_t v13 = *(_BYTE *)(v6 + 8) ? (const char *)(v6 + 8) : 0LL;
      if (!v12) {
        break;
      }
      uint64_t result = strlen(v13);
      uint64_t v14 = a3[52];
      size_t v15 = result + 1;
      if (result == -1LL) {
        goto LABEL_10;
      }
      unint64_t v16 = (void *)a3[52];
LABEL_11:
      size_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + v10;
      uint64_t v18 = (uint64_t *)(v17 + 8);
      size_t v19 = v14 + v15;
      a3[52] = v19;
      if ((a4 & 1) != 0)
      {
        memcpy(v16, v13, v15);
        uint64_t v20 = (char *)a3[52];
        uint64_t v21 = v18[1];
        uint64_t v29 = *v18;
        size_t v22 = v18[2];
        uint64_t v23 = v18 + 3;
        unint64_t v6 = (unint64_t)v18 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24;
        a3[52] = &v20[v22];
        if (v22) {
          unint64_t v24 = v20;
        }
        else {
          unint64_t v24 = 0LL;
        }
        if (v22) {
          uint64_t v25 = v23;
        }
        else {
          uint64_t v25 = 0LL;
        }
        uint64_t result = (size_t)memcpy(v24, v25, v22);
        *(void *)uint64_t v8 = v24;
        *(void *)(v8 + 8) = v22;
        *(void *)(v8 + 16) = v16;
        *(_WORD *)(v8 + 24) = v9;
        *(_BYTE *)(v8 + 26) = v21;
        *(_BYTE *)(v8 + 27) = v29;
        *(_DWORD *)(v8 + 28) = 0;
      }

      else
      {
        uint64_t v26 = *(void *)(v17 + 24);
        unint64_t v6 = (unint64_t)v18 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24;
        a3[52] = v19 + v26;
      }

      ++v7;
      if (*(void *)v6 == -1LL) {
        goto LABEL_23;
      }
    }

    uint64_t v14 = a3[52];
LABEL_10:
    size_t v15 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_11;
  }

  uint64_t v7 = 0LL;
LABEL_23:
  uint64_t v27 = (void *)a3[15];
  a3[15] = v27 + 2;
  if (a4)
  {
    *uint64_t v27 = v28;
    v27[1] = v7;
  }

  return result;
}

uint64_t EncodeDYMTLFunctionConstantValues(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v14 = a2;
  unint64_t v16 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v4 = 8LL;
  uint64_t v15 = 8LL;
  if (a1[1])
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *a1;
      uint64_t v8 = v15 + 8;
      if (v15 + 8 <= v16) {
        *(void *)((char *)v14 + v15) = *(unsigned __int16 *)(v7 + v5 + 24);
      }
      uint64_t v15 = v8;
      WriteDynamicBufferString(&v14, *(const char **)(v7 + v5 + 16));
      uint64_t v9 = v15;
      unint64_t v10 = v16;
      uint64_t v11 = v15 + 8;
      if (v15 + 8 <= v16) {
        *(void *)((char *)v14 + v15) = *(unsigned __int8 *)(v7 + v5 + 27);
      }
      unint64_t v12 = v9 + 16;
      if (v12 <= v10) {
        *(void *)((char *)v14 + v11) = *(unsigned __int8 *)(v7 + v5 + 26);
      }
      uint64_t v15 = v12;
      WriteGTData(&v14, *(const void **)(v7 + v5), *(void *)(v7 + v5 + 8));
      ++v6;
      v5 += 32LL;
    }

    while (a1[1] > v6);
    uint64_t v4 = v15;
    a3 = v16;
  }

  uint64_t result = v4 + 8;
  if (v4 + 8 <= a3) {
    *(void *)((char *)v14 + v4) = -1LL;
  }
  return result;
}

uint64_t DecodeDYMTLVisibleFunctionTableDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 112);
  *(void *)(a3 + 112) = v4 + 24;
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)result;
    *(void *)uint64_t v4 = *(void *)(result + 8);
    if (v5 >= 0x2F)
    {
      *(void *)(v4 + 8) = *(void *)(result + 16);
      if (v5 >= 0x36) {
        *(_BYTE *)(v4 + 16) = *(void *)(result + 24);
      }
    }
  }

  return result;
}

uint64_t EncodeDYMTLVisibleFunctionTableDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)(a1 + 8);
        if (a3 >= 0x20) {
          a2[3] = *(unsigned __int8 *)(a1 + 16);
        }
      }
    }
  }

  return 32LL;
}

size_t DecodeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  uint64_t v8 = (const char *)(a1 + 8);
  size_t result = strlen((const char *)(a1 + 8));
  unint64_t v10 = (unint64_t)&v8[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (*(_BYTE *)(a1 + 8))
  {
    size_t result = strlen(v8);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = result + 1;
    if (result != -1LL)
    {
      unint64_t v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v11 = 0LL;
  unint64_t v12 = 0LL;
LABEL_6:
  *uint64_t v13 = v14 + v11;
  if (a4) {
    size_t result = (size_t)memcpy(v12, v8, v11);
  }
  __int16 v15 = *(_WORD *)v10;
  __int16 v16 = *(_WORD *)(v10 + 8);
  __int16 v17 = *(_WORD *)(v10 + 16);
  unint64_t v18 = v10 + 32;
  uint64_t v19 = *(void *)(v10 + 24);
  if (v19)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = a3[36];
    while (1)
    {
      uint64_t v22 = a3[36];
      a3[36] = v22 + 24;
      uint64_t v24 = *(void *)v18;
      uint64_t v23 = *(void *)(v18 + 8);
      size_t result = *(unsigned __int16 *)(v18 + 16);
      v18 += 24LL;
      if ((_WORD)v24)
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v26 + v25) = *(_DWORD *)v18;
          }
          v18 += 8LL;
          a3[51] = v26 + v25 + 4;
          v25 += 4LL;
        }

        while (4 * (unsigned __int16)v24 != (_DWORD)v25);
      }

      else
      {
        uint64_t v26 = 0LL;
      }

      if ((_WORD)v23)
      {
        uint64_t v27 = 0LL;
        uint64_t v28 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v28 + v27) = *(_DWORD *)v18;
          }
          v18 += 8LL;
          a3[51] = v28 + v27 + 4;
          v27 += 4LL;
        }

        while (4 * (unsigned __int16)v23 != (_DWORD)v27);
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }

      else
      {
        uint64_t v28 = 0LL;
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }

      *(void *)uint64_t v22 = v26;
      *(void *)(v22 + 8) = v28;
      *(_WORD *)(v22 + 16) = v24;
      *(_WORD *)(v22 + 18) = result;
      *(_WORD *)(v22 + 20) = v23;
      *(_WORD *)(v22 + 22) = 0;
LABEL_24:
      if (++v20 == v19) {
        goto LABEL_29;
      }
    }
  }

  uint64_t v21 = 0LL;
LABEL_29:
  if (v7 <= 0x39)
  {
    char v31 = 0;
    int v29 = 0;
    char v30 = 2;
  }

  else
  {
    int v29 = *(_DWORD *)v18;
    char v30 = *(_BYTE *)(v18 + 8);
    if (v7 < 0x44) {
      char v31 = 0;
    }
    else {
      char v31 = *(_BYTE *)(v18 + 16);
    }
  }

  uint64_t v32 = a3[13];
  a3[13] = v32 + 40;
  if (a4)
  {
    *(void *)uint64_t v32 = v12;
    *(void *)(v32 + 8) = v21;
    *(void *)(v32 + 16) = v19;
    *(_DWORD *)(v32 + 24) = v29;
    *(_WORD *)(v32 + 28) = v17;
    *(_WORD *)(v32 + 30) = v16;
    *(_WORD *)(v32 + 32) = v15;
    *(_BYTE *)(v32 + 34) = v30;
    *(_BYTE *)(v32 + 35) = v31;
    *(_DWORD *)(v32 + 36) = 0;
  }

  return result;
}

uint64_t EncodeDYMTLRasterizationRateMapDescriptor(const char **a1, void *a2, unint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v39 = a2;
  unint64_t v41 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v40 = 8LL;
  WriteDynamicBufferString(&v39, *a1);
  unint64_t v4 = v41;
  uint64_t v5 = v40 + 8;
  if (v40 + 8 <= v41)
  {
    uint64_t v6 = v40;
    *(void *)((char *)v39 + v40) = *((unsigned __int16 *)v3 + 16);
    uint64_t v5 = v6 + 8;
    unint64_t v4 = v41;
  }

  uint64_t v40 = v5;
  uint64_t v7 = v5 + 8;
  if (v5 + 8 <= v4)
  {
    uint64_t v8 = v40;
    *(void *)((char *)v39 + v5) = *((unsigned __int16 *)v3 + 15);
    uint64_t v7 = v8 + 8;
    unint64_t v4 = v41;
  }

  uint64_t v40 = v7;
  uint64_t v9 = v7 + 8;
  if (v7 + 8 <= v4)
  {
    uint64_t v10 = v40;
    *(void *)((char *)v39 + v7) = *((unsigned __int16 *)v3 + 14);
    uint64_t v9 = v10 + 8;
    unint64_t v4 = v41;
  }

  uint64_t v40 = v9;
  size_t v11 = v3[2];
  uint64_t v12 = v9 + 8;
  if (v9 + 8 <= v4)
  {
    uint64_t v13 = v40;
    *(void *)((char *)v39 + v9) = v11;
    uint64_t v12 = v13 + 8;
    size_t v11 = v3[2];
  }

  uint64_t v40 = v12;
  if (v11)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = v40;
    unint64_t v16 = v41;
    __int16 v17 = v39;
    uint64_t v38 = v3;
    do
    {
      unint64_t v18 = v3[1];
      uint64_t v19 = &v18[24 * v14];
      uint64_t v20 = v19 + 16;
      uint64_t v21 = v12 + 8;
      if (v12 + 8 <= v16)
      {
        *(void *)((char *)v17 + v12) = (unsigned __int16)*v20;
        uint64_t v21 = v15 + 8;
      }

      uint64_t v22 = &v18[24 * v14 + 20];
      if (v21 + 8 <= v16) {
        *(void *)((char *)v17 + v21) = *(unsigned __int16 *)v22;
      }
      uint64_t v15 = v21 + 16;
      if (v21 + 16 <= v16) {
        *(void *)((char *)v17 + v21 + 8) = *(unsigned __int16 *)&v18[24 * v14 + 18];
      }
      if (*v20)
      {
        unint64_t v23 = 0LL;
        do
        {
          unint64_t v24 = v15 + 4;
          if (v15 + 4 <= v16) {
            *(_DWORD *)((char *)v17 + v15) = *(_DWORD *)(*(void *)v19 + 4 * v23);
          }
          if (v16 > v24)
          {
            if (v16 - v24 >= 4) {
              size_t v25 = 4LL;
            }
            else {
              size_t v25 = v16 - v24;
            }
            bzero((char *)v17 + v24, v25);
          }

          uint64_t v15 = v24 + 4;
          ++v23;
        }

        while (v23 < (unsigned __int16)*v20);
      }

      if (*(_WORD *)v22)
      {
        unint64_t v26 = 0LL;
        uint64_t v27 = &v18[24 * v14 + 8];
        uint64_t v3 = v38;
        do
        {
          unint64_t v28 = v15 + 4;
          if (v15 + 4 <= v16) {
            *(_DWORD *)((char *)v17 + v15) = *(_DWORD *)(*(void *)v27 + 4 * v26);
          }
          if (v16 > v28)
          {
            if (v16 - v28 >= 4) {
              size_t v29 = 4LL;
            }
            else {
              size_t v29 = v16 - v28;
            }
            bzero((char *)v17 + v28, v29);
          }

          uint64_t v15 = v28 + 4;
          ++v26;
        }

        while (v26 < *(unsigned __int16 *)v22);
      }

      else
      {
        uint64_t v3 = v38;
      }

      ++v14;
      uint64_t v12 = v15;
    }

    while ((unint64_t)v3[2] > v14);
    uint64_t v40 = v15;
  }

  else
  {
    uint64_t v15 = v12;
  }

  unint64_t v30 = v15 + 4;
  unint64_t v31 = v41;
  if (v15 + 4 <= v41)
  {
    uint64_t v32 = v40;
    *(_DWORD *)((char *)v39 + v15) = *((_DWORD *)v3 + 6);
    unint64_t v30 = v32 + 4;
    unint64_t v31 = v41;
  }

  if (v31 > v30)
  {
    if (v31 - v30 >= 4) {
      size_t v33 = 4LL;
    }
    else {
      size_t v33 = v31 - v30;
    }
    bzero((char *)v39 + v30, v33);
  }

  uint64_t v40 = v30 + 4;
  uint64_t v34 = v30 + 12;
  if (v30 + 12 <= v31)
  {
    uint64_t v35 = v40;
    *(void *)((char *)v39 + v30 + 4) = *((unsigned __int8 *)v3 + 34);
    uint64_t v34 = v35 + 8;
    unint64_t v31 = v41;
  }

  uint64_t v40 = v34;
  uint64_t result = v34 + 8;
  if (v34 + 8 <= v31)
  {
    uint64_t v37 = v40;
    *(void *)((char *)v39 + v34) = *((unsigned __int8 *)v3 + 35);
    return v37 + 8;
  }

  return result;
}

size_t DecodeDYMTLFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char *)(a1 + 16);
  char v38 = *(_BYTE *)(a1 + 8);
  unsigned int v39 = *(_DWORD *)a1;
  size_t v10 = strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8LL;
  size_t v11 = &v9[v10 + 8];
  if (*(_BYTE *)(a1 + 16)) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    size_t v13 = strlen(v12);
    unint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1LL)
    {
      __int16 v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }

  size_t v16 = 0LL;
  __int16 v17 = 0LL;
LABEL_9:
  *unint64_t v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  size_t result = strlen(v11);
  unint64_t v19 = result & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = &v11[result & 0xFFFFFFFFFFFFFFF8LL];
  if (*v11) {
    uint64_t v21 = v11;
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v37 = v17;
  if (*v11)
  {
    size_t result = strlen(v21);
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
    size_t v24 = result + 1;
    if (result != -1LL)
    {
      size_t v25 = (void *)a3[52];
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
  }

  size_t v24 = 0LL;
  size_t v25 = 0LL;
LABEL_19:
  *uint64_t v22 = v23 + v24;
  if (a4) {
    size_t result = (size_t)memcpy(v25, v21, v24);
  }
  size_t v27 = (size_t)(v20 + 16);
  uint64_t v26 = *((void *)v20 + 1);
  if (v26)
  {
    uint64_t v28 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues(v27, v26, a3, a4);
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  if (v39 < 0x3E)
  {
    uint64_t v30 = 0LL;
    goto LABEL_36;
  }

  unint64_t v29 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v30 = *(void *)(v27 + v29);
  if (!v30)
  {
LABEL_36:
    uint64_t v32 = 0LL;
    goto LABEL_37;
  }

  uint64_t v40 = v28;
  uint64_t v31 = 0LL;
  uint64_t v32 = (uint64_t *)a3[50];
  uint64_t v33 = v10 + v19 + v29 + a1 + 48;
  uint64_t v34 = v32;
  do
  {
    if (a4)
    {
      uint64_t v35 = *(void *)(v33 + 8 * v31);
      if (a5)
      {
        size_t result = GetStream_10858(a5, v35);
        if (result) {
          uint64_t v35 = *(void *)result;
        }
        else {
          uint64_t v35 = 0LL;
        }
      }

      uint64_t v34 = (uint64_t *)a3[50];
      *uint64_t v34 = v35;
    }

    a3[50] = ++v34;
    ++v31;
  }

  while (v30 != v31);
  uint64_t v28 = v40;
LABEL_37:
  uint64_t v36 = a3[12];
  a3[12] = v36 + 48;
  if (a4)
  {
    *(void *)uint64_t v36 = v28;
    *(void *)(v36 + 8) = v37;
    *(void *)(v36 + 16) = v32;
    *(void *)(v36 + 24) = v30;
    *(void *)(v36 + 32) = v25;
    *(_BYTE *)(v36 + 40) = v38;
    *(_DWORD *)(v36 + 41) = 0;
    *(_DWORD *)(v36 + 44) = 0;
  }

  return result;
}

unint64_t EncodeDYMTLFunctionDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v19 = a2;
  unint64_t v21 = a3;
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
    }
  }

  uint64_t v20 = 16LL;
  WriteDynamicBufferString(&v19, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v19, *(const char **)(a1 + 32));
  if (*(void *)a1)
  {
    uint64_t v6 = EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, 0LL, 0LL);
    uint64_t v7 = v6;
    unint64_t v8 = v21;
    uint64_t v9 = v20 + 8;
    unint64_t v10 = v21 - (v20 + 8);
    if (v21 >= v20 + 8) {
      v19[(unint64_t)v20 / 8] = v6;
    }
    if (v6 && v9 + v6 <= v8) {
      EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, (void *)((char *)v19 + v9), v10);
    }
  }

  else
  {
    unint64_t v8 = v21;
    uint64_t v9 = v20 + 8;
    uint64_t v7 = 0LL;
    if (v20 + 8 <= v21) {
      v19[(unint64_t)v20 / 8] = 0LL;
    }
  }

  uint64_t v11 = v9 + v7;
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = v9 + v7 + 8;
  if (v13 <= v8)
  {
    *(void *)((char *)v19 + v11) = v12;
    uint64_t v12 = *(void *)(a1 + 24);
  }

  if (!v12) {
    return v13;
  }
  unint64_t v14 = 0LL;
  uint64_t v15 = v19;
  do
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8 * v14);
    uint64_t v16 = *find_entry(a4, &v18, 8uLL, 0LL);
    if (v16) {
      uint64_t v16 = *(void *)(v16 + 32);
    }
    unint64_t result = v13 + 8;
    if (v13 + 8 <= v8) {
      *(void *)((char *)v15 + v13) = *(void *)(v16 + 8);
    }
    ++v14;
    v13 += 8LL;
  }

  while (*(void *)(a1 + 24) > v14);
  return result;
}

uint64_t DecodeDYMTLCompileOptions(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)a1;
  size_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = a1 + 16 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (v9) {
    uint64_t v11 = (void *)a3[52];
  }
  else {
    uint64_t v11 = 0LL;
  }
  a3[52] += v9;
  if (a4)
  {
    if (v9) {
      uint64_t v12 = (const void *)(a1 + 16);
    }
    else {
      uint64_t v12 = 0LL;
    }
    memcpy(v11, v12, v9);
  }

  char v13 = *(_BYTE *)v10;
  char v15 = *(_BYTE *)v10 == 0;
  BOOL v14 = *(_BYTE *)v10 != 0;
  char v16 = 2 * v14;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  if (v8 <= 0xF)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    if (v8 < 6)
    {
      int v28 = 0;
      unint64_t v29 = 0LL;
      uint64_t v23 = 0LL;
      size_t v24 = 0LL;
      size_t v25 = 0LL;
      char v26 = 0;
      char v27 = 0;
    }

    else
    {
      uint64_t v23 = 0LL;
      size_t v24 = 0LL;
      size_t v25 = 0LL;
      char v26 = 0;
      char v27 = 0;
      int v28 = *(_DWORD *)(v10 + 40);
      unint64_t v29 = 0LL;
    }

    goto LABEL_62;
  }

  int v58 = *(_DWORD *)(v10 + 16);
  if (v8 < 0x28)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    unint64_t v29 = 0LL;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    size_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
LABEL_34:
    int v28 = v58;
    goto LABEL_62;
  }

  unsigned int v54 = *(unsigned __int8 *)(v10 + 8);
  char v55 = 2 * v14;
  BOOL v56 = *(_BYTE *)v10 == 0;
  char v57 = *(_BYTE *)v10;
  __int128 v53 = v11;
  unint64_t v30 = v10 + 24;
  size_t v31 = strlen((const char *)(v10 + 24));
  if (*(_BYTE *)(v10 + 24)) {
    uint64_t v32 = (const char *)(v10 + 24);
  }
  else {
    uint64_t v32 = 0LL;
  }
  if (*(_BYTE *)(v10 + 24))
  {
    size_t v33 = strlen(v32);
    uint64_t v34 = a3[52];
    size_t v35 = v33 + 1;
    if (v33 != -1LL)
    {
      unint64_t v29 = (void *)a3[52];
      char v15 = v56;
      char v13 = v57;
      uint64_t result = v54;
      char v16 = v55;
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v34 = a3[52];
  }

  char v15 = *(_BYTE *)v10 == 0;
  char v13 = *(_BYTE *)v10;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  char v16 = v55;
  size_t v35 = 0LL;
  unint64_t v29 = 0LL;
LABEL_23:
  a3[52] = v34 + v35;
  if (a4)
  {
    memcpy(v29, v32, v35);
    uint64_t result = v54;
    char v16 = v55;
    char v15 = v56;
    char v13 = v57;
  }

  if (v8 < 0x2B)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    size_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
    uint64_t v11 = v53;
    goto LABEL_34;
  }

  unint64_t v36 = (v31 & 0xFFFFFFFFFFFFFFF8LL) + v30 + 8;
  char v52 = *(_BYTE *)v36;
  if (v8 < 0x30)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    uint64_t v23 = 0LL;
    size_t v24 = 0LL;
    size_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
    uint64_t v11 = v53;
    int v28 = v58;
LABEL_61:
    char v22 = v52;
    goto LABEL_62;
  }

  size_t v37 = (strlen((const char *)(v36 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + v36 + 8 + 8;
  int v38 = *(unsigned __int8 *)(v36 + 8);
  if (*(_BYTE *)(v36 + 8)) {
    unsigned int v39 = (const char *)(v36 + 8);
  }
  else {
    unsigned int v39 = 0LL;
  }
  if (v38)
  {
    size_t v40 = strlen(v39);
    uint64_t v41 = a3[52];
    size_t v42 = v40 + 1;
    if (v40 != -1LL)
    {
      __dst = (void *)a3[52];
      char v15 = v56;
      char v13 = v57;
      uint64_t result = v54;
      char v16 = v55;
      goto LABEL_38;
    }
  }

  else
  {
    uint64_t v41 = a3[52];
  }

  char v15 = v56;
  char v13 = v57;
  uint64_t result = v54;
  char v16 = v55;
  size_t v42 = 0LL;
  __dst = 0LL;
LABEL_38:
  __int128 v50 = v29;
  a3[52] = v41 + v42;
  if (a4)
  {
    memcpy(__dst, v39, v42);
    uint64_t result = v54;
    char v16 = v55;
    char v15 = v56;
    char v13 = v57;
  }

  char v26 = *(_BYTE *)v37;
  uint64_t v23 = *(void *)(v37 + 8);
  size_t v43 = v37 + 16;
  if (v23)
  {
    size_t v24 = (uint64_t *)a3[50];
    uint64_t v44 = v23;
    __int128 v45 = v24;
    do
    {
      uint64_t v47 = *(void *)v43;
      v43 += 8LL;
      uint64_t v46 = v47;
      if (a4)
      {
        if (a5)
        {
          Stream_10858 = (uint64_t *)GetStream_10858(a5, v46);
          if (Stream_10858) {
            uint64_t v46 = *Stream_10858;
          }
          else {
            uint64_t v46 = 0LL;
          }
        }

        __int128 v45 = (uint64_t *)a3[50];
        *__int128 v45 = v46;
      }

      a3[50] = ++v45;
      --v44;
    }

    while (v44);
    uint64_t v11 = v53;
    char v15 = v56;
    char v13 = v57;
    uint64_t result = v54;
    char v16 = v55;
  }

  else
  {
    size_t v24 = 0LL;
    uint64_t v11 = v53;
  }

  if (v8 < 0x3B)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
LABEL_59:
    char v27 = 0;
LABEL_60:
    int v28 = v58;
    unint64_t v29 = v50;
    size_t v25 = __dst;
    goto LABEL_61;
  }

  char v21 = *(_BYTE *)v43;
  if (v8 < 0x40)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    goto LABEL_59;
  }

  char v27 = *(_BYTE *)(v43 + 8);
  if (v8 < 0x47)
  {
    __int16 v18 = 0;
    char v19 = 0;
    char v20 = 0;
    goto LABEL_60;
  }

  char v20 = *(_BYTE *)(v43 + 16);
  char v19 = *(_BYTE *)(v43 + 24);
  __int16 v18 = *(_WORD *)(v43 + 32);
  int v28 = v58;
  char v22 = v52;
  size_t v25 = __dst;
  if (v8 >= 0x4C)
  {
    char v15 = *(_BYTE *)(v43 + 40);
    char v16 = *(_BYTE *)(v43 + 48);
  }

  unint64_t v29 = v50;
LABEL_62:
  uint64_t v49 = a3[11];
  a3[11] = v49 + 64;
  if (a4)
  {
    *(void *)uint64_t v49 = v11;
    *(void *)(v49 + 8) = v9;
    *(void *)(v49 + 16) = v29;
    *(void *)(v49 + 24) = v25;
    *(void *)(v49 + 32) = v24;
    *(void *)(v49 + 40) = v23;
    *(_DWORD *)(v49 + 48) = v28;
    *(_WORD *)(v49 + 52) = v18;
    *(_BYTE *)(v49 + 54) = v19;
    *(_BYTE *)(v49 + 55) = v20;
    *(_BYTE *)(v49 + 56) = result;
    *(_BYTE *)(v49 + 57) = v13;
    *(_BYTE *)(v49 + 58) = v26;
    *(_BYTE *)(v49 + 59) = v15;
    *(_BYTE *)(v49 + 60) = v16;
    *(_BYTE *)(v49 + 61) = v27;
    *(_BYTE *)(v49 + 62) = v22;
    *(_BYTE *)(v49 + 63) = v21;
  }

  return result;
}

uint64_t EncodeDYMTLCompileOptions(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v29 = a2;
  unint64_t v31 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v30 = 8LL;
  WriteGTData(&v29, *(const void **)a1, *(void *)(a1 + 8));
  unint64_t v6 = v31;
  uint64_t v7 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v30) = *(unsigned __int8 *)(a1 + 57);
    unint64_t v6 = v31;
    uint64_t v7 = v30 + 8;
  }

  uint64_t v30 = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v6)
  {
    *(void *)((char *)v29 + v7) = *(unsigned __int8 *)(a1 + 56);
    unint64_t v6 = v31;
    uint64_t v8 = v30 + 8;
  }

  uint64_t v30 = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v6)
  {
    *(void *)((char *)v29 + v8) = *(unsigned int *)(a1 + 48);
    uint64_t v9 = v30 + 8;
  }

  uint64_t v30 = v9;
  WriteDynamicBufferString(&v29, *(const char **)(a1 + 16));
  uint64_t v10 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v30) = *(unsigned __int8 *)(a1 + 62);
    uint64_t v10 = v30 + 8;
  }

  uint64_t v30 = v10;
  WriteDynamicBufferString(&v29, *(const char **)(a1 + 24));
  unint64_t v11 = v31;
  uint64_t v12 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v30) = *(unsigned __int8 *)(a1 + 58);
    unint64_t v11 = v31;
    uint64_t v12 = v30 + 8;
  }

  uint64_t v30 = v12;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = v12 + 8;
  if (v12 + 8 <= v11)
  {
    *(void *)((char *)v29 + v12) = v13;
    uint64_t v14 = v30 + 8;
    uint64_t v13 = *(void *)(a1 + 40);
  }

  uint64_t v30 = v14;
  if (v13)
  {
    unint64_t v15 = 0LL;
    uint64_t v17 = v30;
    unint64_t v16 = v31;
    __int16 v18 = v29;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 8 * v15);
      uint64_t v19 = *find_entry(a4, &v28, 8uLL, 0LL);
      if (v19) {
        uint64_t v19 = *(void *)(v19 + 32);
      }
      uint64_t v14 = v17 + 8;
      if (v17 + 8 <= v16) {
        *(void *)((char *)v18 + v17) = *(void *)(v19 + 8);
      }
      ++v15;
      v17 += 8LL;
    }

    while (*(void *)(a1 + 40) > v15);
    uint64_t v30 = v14;
  }

  uint64_t v20 = v14 + 8;
  unint64_t v21 = v31;
  if (v14 + 8 <= v31)
  {
    *(void *)((char *)v29 + v14) = *(unsigned __int8 *)(a1 + 63);
    unint64_t v21 = v31;
    uint64_t v20 = v30 + 8;
  }

  uint64_t v30 = v20;
  uint64_t v22 = v20 + 8;
  if (v20 + 8 <= v21)
  {
    *(void *)((char *)v29 + v20) = *(unsigned __int8 *)(a1 + 61);
    unint64_t v21 = v31;
    uint64_t v22 = v30 + 8;
  }

  uint64_t v30 = v22;
  uint64_t v23 = v22 + 8;
  if (v22 + 8 <= v21)
  {
    *(void *)((char *)v29 + v22) = *(unsigned __int8 *)(a1 + 55);
    unint64_t v21 = v31;
    uint64_t v23 = v30 + 8;
  }

  uint64_t v30 = v23;
  uint64_t v24 = v23 + 8;
  if (v23 + 8 <= v21)
  {
    *(void *)((char *)v29 + v23) = *(unsigned __int8 *)(a1 + 54);
    unint64_t v21 = v31;
    uint64_t v24 = v30 + 8;
  }

  uint64_t v30 = v24;
  uint64_t v25 = v24 + 8;
  if (v24 + 8 <= v21)
  {
    *(void *)((char *)v29 + v24) = *(unsigned __int16 *)(a1 + 52);
    unint64_t v21 = v31;
    uint64_t v25 = v30 + 8;
  }

  uint64_t v30 = v25;
  uint64_t v26 = v25 + 8;
  if (v25 + 8 <= v21)
  {
    *(void *)((char *)v29 + v25) = *(unsigned __int8 *)(a1 + 59);
    unint64_t v21 = v31;
    uint64_t v26 = v30 + 8;
  }

  uint64_t v30 = v26;
  uint64_t result = v26 + 8;
  if (v26 + 8 <= v21)
  {
    *(void *)((char *)v29 + v26) = *(unsigned __int8 *)(a1 + 60);
    return v30 + 8;
  }

  return result;
}

uint64_t *DecodeDYMTLCaptureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = *(unsigned __int8 *)(a1 + 24);
  uint64_t result = (uint64_t *)(a1 + 24);
  int v9 = v10;
  uint64_t v11 = *(result - 2);
  char v12 = *((_BYTE *)result - 8);
  if (v10) {
    uint64_t v13 = (const char *)result;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v9)
  {
    uint64_t result = (uint64_t *)strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = (size_t)result + 1;
    if (result != (uint64_t *)-1LL)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }

  size_t v16 = 0LL;
  uint64_t v17 = 0LL;
LABEL_9:
  *uint64_t v14 = v15 + v16;
  if ((a4 & 1) != 0)
  {
    uint64_t result = (uint64_t *)memcpy(v17, v13, v16);
    uint64_t v18 = *(void *)(a3 + 72);
    *(void *)(a3 + 72) = v18 + 24;
    if (a5)
    {
      uint64_t result = (uint64_t *)GetStream_10858(a5, v11);
      if (result) {
        uint64_t v11 = *result;
      }
      else {
        uint64_t v11 = 0LL;
      }
    }

    *(void *)uint64_t v18 = v11;
    *(void *)(v18 + 8) = v17;
    *(_BYTE *)(v18 + 16) = v12;
    *(_DWORD *)(v18 + 17) = 0;
    *(_DWORD *)(v18 + 20) = 0;
  }

  else
  {
    *(void *)(a3 + 72) += 24LL;
  }

  return result;
}

uint64_t EncodeDYMTLCaptureDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v10 = a2;
  unint64_t v12 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v9 = *a1;
  uint64_t v7 = *find_entry(a4, &v9, 8uLL, 0LL);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 32);
  }
  if (a3 >= 0x10)
  {
    a2[1] = *(void *)(v7 + 8);
    if (a3 >= 0x18) {
      a2[2] = *((unsigned __int8 *)a1 + 16);
    }
  }

  uint64_t v11 = 24LL;
  WriteDynamicBufferString(&v10, (const char *)a1[1]);
  return v11;
}

uint64_t *DecodeDYMTLBlitPassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 64);
  *(void *)(a3 + 64) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        uint64_t result = (uint64_t *)GetStream_10858(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0LL;
        }
      }

      unint64_t v12 = (void *)v5 + 3 * v8;
      *unint64_t v12 = v11;
      v12[1] = v9;
      v12[2] = v10;
    }
  }

  return result;
}

unint64_t EncodeDYMTLBlitPassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8LL;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }

      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0LL);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32LL;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }

    ++v7;
    v8 += 3;
  }

  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1LL;
  }
  return result;
}

uint64_t *DecodeDYMTLComputePassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = v5 + 104;
  if (a4)
  {
    *(void *)(v5 + 96) = 0LL;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    uint64_t v7 = result + 2;
    *(_BYTE *)(v5 + 96) = result[1];
    while (1)
    {
      uint64_t v8 = *v7;
      if (*v7 == -1) {
        break;
      }
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = v7[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_10858(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0LL;
        }
      }

      uint64_t v12 = (void *)(v5 + 24 * v8);
      *uint64_t v12 = v11;
      v12[1] = v9;
      v12[2] = v10;
      v7 += 4;
    }
  }

  return result;
}

unint64_t EncodeDYMTLComputePassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 96);
    }
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 16LL;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }

      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0LL);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32LL;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }

    ++v7;
    v8 += 3;
  }

  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1LL;
  }
  return result;
}

uint64_t *DecodeDYMTLResourceStatePassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 48);
  *(void *)(a3 + 48) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_10858(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0LL;
        }
      }

      uint64_t v12 = (void *)v5 + 3 * v8;
      *uint64_t v12 = v11;
      v12[1] = v9;
      v12[2] = v10;
    }
  }

  return result;
}

unint64_t EncodeDYMTLResourceStatePassDescriptor( uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8LL;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }

      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0LL);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32LL;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }

    ++v7;
    v8 += 3;
  }

  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1LL;
  }
  return result;
}

uint64_t *DecodeDYMTLAccelerationStructurePassDescriptor( uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 40);
  *(void *)(a3 + 40) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_10858(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0LL;
        }
      }

      uint64_t v12 = (void *)v5 + 3 * v8;
      *uint64_t v12 = v11;
      v12[1] = v9;
      v12[2] = v10;
    }
  }

  return result;
}

unint64_t EncodeDYMTLAccelerationStructurePassDescriptor( uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8LL;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }

      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0LL);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32LL;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }

    ++v7;
    v8 += 3;
  }

  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1LL;
  }
  return result;
}

uint64_t DecodeDYMTLIntersectionFunctionTableDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = v4 + 16;
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)result;
    *(_DWORD *)(v4 + 8) = *(void *)(result + 8);
    if (v5 >= 0x36)
    {
      *(void *)uint64_t v4 = *(void *)(result + 16);
      *(_BYTE *)(v4 + 12) = *(void *)(result + 24);
    }
  }

  return result;
}

uint64_t EncodeDYMTLIntersectionFunctionTableDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned int *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)a1;
        if (a3 >= 0x20) {
          a2[3] = *(unsigned __int8 *)(a1 + 12);
        }
      }
    }
  }

  return 32LL;
}

uint64_t *DecodeDYMTLRenderPipelineFunctionsDescriptor( uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8 = result[1];
  unint64_t v9 = result + 2;
  uint64_t v46 = v8;
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(a3 + 400);
    __int128 v45 = v10;
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v11 = v12;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_10858(a5, v11);
          if (result) {
            uint64_t v11 = *result;
          }
          else {
            uint64_t v11 = 0LL;
          }
        }

        uint64_t v10 = *(uint64_t **)(a3 + 400);
        *uint64_t v10 = v11;
      }

      *(void *)(a3 + 400) = ++v10;
      --v8;
    }

    while (v8);
  }

  else
  {
    __int128 v45 = 0LL;
  }

  uint64_t v15 = *v9;
  uint64_t v14 = v9 + 1;
  uint64_t v13 = v15;
  uint64_t v44 = (uint64_t *)v15;
  if (v15)
  {
    size_t v16 = *(uint64_t **)(a3 + 400);
    size_t v43 = v16;
    do
    {
      uint64_t v18 = *v14++;
      uint64_t v17 = v18;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_10858(a5, v17);
          if (result) {
            uint64_t v17 = *result;
          }
          else {
            uint64_t v17 = 0LL;
          }
        }

        size_t v16 = *(uint64_t **)(a3 + 400);
        *size_t v16 = v17;
      }

      *(void *)(a3 + 400) = ++v16;
      --v13;
    }

    while (v13);
  }

  else
  {
    size_t v43 = 0LL;
  }

  uint64_t v21 = *v14;
  uint64_t v19 = v14 + 1;
  uint64_t v20 = (uint64_t *)v21;
  if (v21)
  {
    uint64_t v22 = *(uint64_t **)(a3 + 400);
    uint64_t v23 = v20;
    size_t v42 = v22;
    do
    {
      uint64_t v25 = *v19++;
      uint64_t v24 = v25;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_10858(a5, v24);
          if (result) {
            uint64_t v24 = *result;
          }
          else {
            uint64_t v24 = 0LL;
          }
        }

        uint64_t v22 = *(uint64_t **)(a3 + 400);
        *uint64_t v22 = v24;
      }

      *(void *)(a3 + 400) = ++v22;
      uint64_t v23 = (uint64_t *)((char *)v23 - 1);
    }

    while (v23);
  }

  else
  {
    size_t v42 = 0LL;
  }

  uint64_t v28 = *v19;
  char v27 = v19 + 1;
  uint64_t v26 = (uint64_t *)v28;
  if (v28)
  {
    unint64_t v29 = *(uint64_t **)(a3 + 400);
    uint64_t v30 = v26;
    unint64_t v31 = v29;
    do
    {
      uint64_t v33 = *v27++;
      uint64_t v32 = v33;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_10858(a5, v32);
          if (result) {
            uint64_t v32 = *result;
          }
          else {
            uint64_t v32 = 0LL;
          }
        }

        unint64_t v31 = *(uint64_t **)(a3 + 400);
        *unint64_t v31 = v32;
      }

      *(void *)(a3 + 400) = ++v31;
      uint64_t v30 = (uint64_t *)((char *)v30 - 1);
    }

    while (v30);
  }

  else
  {
    unint64_t v29 = 0LL;
  }

  uint64_t v34 = *v27;
  if (*v27)
  {
    size_t v35 = *(uint64_t **)(a3 + 400);
    unint64_t v36 = v27 + 1;
    uint64_t v37 = v34;
    int v38 = v35;
    do
    {
      uint64_t v40 = *v36++;
      uint64_t v39 = v40;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_10858(a5, v39);
          if (result) {
            uint64_t v39 = *result;
          }
          else {
            uint64_t v39 = 0LL;
          }
        }

        int v38 = *(uint64_t **)(a3 + 400);
        *int v38 = v39;
      }

      *(void *)(a3 + 400) = ++v38;
      --v37;
    }

    while (v37);
  }

  else
  {
    size_t v35 = 0LL;
  }

  uint64_t v41 = *(uint64_t ***)(a3 + 24);
  *(void *)(a3 + 24) = v41 + 10;
  if ((a4 & 1) != 0)
  {
    *uint64_t v41 = v43;
    v41[1] = v44;
    v41[2] = v29;
    v41[3] = v26;
    v41[4] = v35;
    v41[5] = (uint64_t *)v34;
    v41[6] = v42;
    v41[7] = v20;
    v41[8] = v45;
    v41[9] = (uint64_t *)v46;
  }

  return result;
}

uint64_t EncodeDYMTLRenderPipelineFunctionsDescriptor( void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 > 7)
  {
    *a2 = 81LL;
    uint64_t v8 = a1 + 9;
    unint64_t v9 = a1[9];
    if (a3 < 0x10) {
      goto LABEL_6;
    }
    a2[1] = v9;
  }

  else
  {
    uint64_t v8 = a1 + 9;
  }

  unint64_t v9 = *v8;
LABEL_6:
  if (v9)
  {
    unint64_t v10 = 0LL;
    uint64_t v11 = 2LL;
    do
    {
      uint64_t v42 = *(void *)(a1[8] + v10);
      uint64_t v12 = *find_entry(a4, &v42, 8uLL, 0LL);
      if (v12) {
        uint64_t v12 = *(void *)(v12 + 32);
      }
      if (v10 + 24 <= a3) {
        a2[v10 / 8 + 2] = *(void *)(v12 + 8);
      }
      v10 += 8LL;
      unint64_t v13 = v11++ - 1;
    }

    while (*v8 > v13);
    uint64_t v14 = v10 + 16;
  }

  else
  {
    uint64_t v14 = 16LL;
  }

  uint64_t v15 = a1[1];
  uint64_t v16 = v14 + 8;
  if (v14 + 8 <= a3)
  {
    *(void *)((char *)a2 + v14) = v15;
    uint64_t v15 = a1[1];
  }

  if (v15)
  {
    unint64_t v17 = 0LL;
    do
    {
      uint64_t v41 = *(void *)(*a1 + 8 * v17);
      entry = find_entry(a4, &v41, 8uLL, 0LL);
      if (*entry) {
        uint64_t v19 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v19 = 0LL;
      }
      uint64_t v20 = v16 + 8;
      if (v16 + 8 <= a3) {
        *(void *)((char *)a2 + v16) = *(void *)(v19 + 8);
      }
      ++v17;
      v16 += 8LL;
    }

    while (a1[1] > v17);
  }

  else
  {
    uint64_t v20 = v14 + 8;
  }

  uint64_t v21 = a1[7];
  uint64_t v22 = v20 + 8;
  if (v20 + 8 <= a3)
  {
    *(void *)((char *)a2 + v20) = v21;
    uint64_t v21 = a1[7];
  }

  if (v21)
  {
    unint64_t v23 = 0LL;
    do
    {
      uint64_t v40 = *(void *)(a1[6] + 8 * v23);
      uint64_t v24 = find_entry(a4, &v40, 8uLL, 0LL);
      if (*v24) {
        uint64_t v25 = *(void *)(*v24 + 32LL);
      }
      else {
        uint64_t v25 = 0LL;
      }
      uint64_t v26 = v22 + 8;
      if (v22 + 8 <= a3) {
        *(void *)((char *)a2 + v22) = *(void *)(v25 + 8);
      }
      ++v23;
      v22 += 8LL;
    }

    while (a1[7] > v23);
  }

  else
  {
    uint64_t v26 = v20 + 8;
  }

  uint64_t v27 = a1[3];
  uint64_t v28 = v26 + 8;
  if (v26 + 8 <= a3)
  {
    *(void *)((char *)a2 + v26) = v27;
    uint64_t v27 = a1[3];
  }

  if (v27)
  {
    unint64_t v29 = 0LL;
    do
    {
      uint64_t v39 = *(void *)(a1[2] + 8 * v29);
      uint64_t v30 = find_entry(a4, &v39, 8uLL, 0LL);
      if (*v30) {
        uint64_t v31 = *(void *)(*v30 + 32LL);
      }
      else {
        uint64_t v31 = 0LL;
      }
      uint64_t v32 = v28 + 8;
      if (v28 + 8 <= a3) {
        *(void *)((char *)a2 + v28) = *(void *)(v31 + 8);
      }
      ++v29;
      v28 += 8LL;
    }

    while (a1[3] > v29);
  }

  else
  {
    uint64_t v32 = v26 + 8;
  }

  uint64_t v33 = a1[5];
  uint64_t v34 = v32 + 8;
  if (v32 + 8 <= a3)
  {
    *(void *)((char *)a2 + v32) = v33;
    uint64_t v33 = a1[5];
  }

  if (!v33) {
    return v32 + 8;
  }
  unint64_t v35 = 0LL;
  do
  {
    uint64_t v38 = *(void *)(a1[4] + 8 * v35);
    uint64_t v36 = *find_entry(a4, &v38, 8uLL, 0LL);
    if (v36) {
      uint64_t v36 = *(void *)(v36 + 32);
    }
    uint64_t result = v34 + 8;
    if (v34 + 8 <= a3) {
      *(void *)((char *)a2 + v34) = *(void *)(v36 + 8);
    }
    ++v35;
    v34 += 8LL;
  }

  while (a1[5] > v35);
  return result;
}

void *DecodeDYMTLAccelerationStructureAllocationDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v4 + 16;
  if (a4)
  {
    *(_BYTE *)(v4 + 9) = result[1];
    *(_BYTE *)(v4 + 8) = result[2];
    *(void *)uint64_t v4 = result[3];
  }

  return result;
}

uint64_t EncodeDYMTLAccelerationStructureAllocationDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 9);
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int8 *)(a1 + 8);
        if (a3 >= 0x20) {
          a2[3] = *(void *)a1;
        }
      }
    }
  }

  return 32LL;
}

size_t DecodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = (const char *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 8);
  unint64_t v9 = (const char *)((strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 16 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    size_t v10 = strlen(v7);
    unint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = v10 + 1;
    if (v10 != -1LL)
    {
      uint64_t v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }

  size_t v11 = 0LL;
  uint64_t v12 = 0LL;
LABEL_6:
  *unint64_t v13 = v14 + v11;
  if (a4) {
    memcpy(v12, v7, v11);
  }
  size_t result = strlen(v9);
  uint64_t v16 = (uint64_t *)&v9[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
  int v17 = *(unsigned __int8 *)v9;
  if (!*v9) {
    unint64_t v9 = 0LL;
  }
  if (v17)
  {
    size_t result = strlen(v9);
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
    size_t v20 = result + 1;
    if (result != -1LL)
    {
      uint64_t v21 = (void *)a3[52];
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v18 = a3 + 52;
    uint64_t v19 = a3[52];
  }

  size_t v20 = 0LL;
  uint64_t v21 = 0LL;
LABEL_15:
  *uint64_t v18 = v19 + v20;
  if (a4) {
    size_t result = (size_t)memcpy(v21, v9, v20);
  }
  if (*v16)
  {
    uint64_t v22 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues((size_t)(v16 + 1), *v16, a3, a4);
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  uint64_t v23 = a3[1];
  a3[1] = v23 + 48;
  if (a4)
  {
    *(void *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = v12;
    *(void *)(v23 + 16) = 0LL;
    *(void *)(v23 + 24) = 0LL;
    *(void *)(v23 + 32) = v21;
    *(_BYTE *)(v23 + 40) = v8;
    *(_DWORD *)(v23 + 41) = 0;
    *(_DWORD *)(v23 + 44) = 0;
  }

  return result;
}

uint64_t EncodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  size_t v10 = a2;
  unint64_t v12 = a3;
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
    }
  }

  uint64_t v11 = 16LL;
  WriteDynamicBufferString(&v10, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v10, *(const char **)(a1 + 32));
  if (*(void *)a1)
  {
    uint64_t v4 = EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, 0LL, 0LL);
    uint64_t v5 = v4;
    unint64_t v6 = v12;
    uint64_t v7 = v11 + 8;
    unint64_t v8 = v12 - (v11 + 8);
    if (v12 >= v11 + 8) {
      v10[(unint64_t)v11 / 8] = v4;
    }
    if (v4 && v7 + v4 <= v6) {
      EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, (void *)((char *)v10 + v7), v8);
    }
  }

  else
  {
    uint64_t v7 = v11 + 8;
    uint64_t v5 = 0LL;
    if (v11 + 8 <= v12) {
      v10[(unint64_t)v11 / 8] = 0LL;
    }
  }

  return v7 + v5;
}

size_t DecodeDYMTLResidencySetDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = *(unsigned __int8 *)(a1 + 24);
  size_t result = a1 + 24;
  int v7 = v8;
  uint64_t v9 = *(void *)(result - 16);
  uint64_t v10 = *(void *)(result - 8);
  if (v8) {
    uint64_t v11 = (const char *)result;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v7)
  {
    size_t result = strlen(v11);
    unint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
    size_t v14 = result + 1;
    if (result != -1LL)
    {
      uint64_t v15 = (void *)a3[52];
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
  }

  size_t v14 = 0LL;
  uint64_t v15 = 0LL;
LABEL_9:
  *unint64_t v12 = v13 + v14;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v15, v11, v14);
    uint64_t v16 = *a3;
    *a3 += 24LL;
    *(void *)uint64_t v16 = v10;
    *(void *)(v16 + 8) = v15;
    *(_BYTE *)(v16 + 16) = v9;
    *(_DWORD *)(v16 + 17) = 0;
    *(_DWORD *)(v16 + 20) = 0;
  }

  else
  {
    *a3 += 24LL;
  }

  return result;
}

uint64_t EncodeDYMTLResidencySetDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a3;
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 16);
      if (a3 >= 0x18) {
        a2[2] = *(void *)a1;
      }
    }
  }

  uint64_t v5 = 24LL;
  WriteDynamicBufferString(&v4, *(const char **)(a1 + 8));
  return v5;
}

int16x4_t DecodeDYIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v31 = 0LL;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  unsigned int v6 = *(_DWORD *)a1;
  __int128 v25 = *(_OWORD *)(a1 + 8);
  WORD6(v30[0]) = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  int16x4_t result = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a1 + 56)));
  *(int16x4_t *)((char *)v30 + 14) = result;
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)&v30[0] = __PAIR64__(*(void *)(a1 + 72), v7);
  uint64_t v10 = (int32x4_t *)(a1 + 88);
  BYTE6(v30[1]) = v9;
  uint64_t v11 = v9;
  if ((_BYTE)v9)
  {
    unint64_t v12 = (int16x4_t *)((char *)&v26 + 12);
    do
    {
      int32x4_t v13 = *v10;
      v12[-2].i32[1] = v10[1].i64[1];
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      LODWORD(v14) = v10[1].i32[0];
      HIDWORD(v14) = v10[2].i32[0];
      v13.i64[1] = v14;
      int16x4_t result = vmovn_s32(v13);
      v12[-1] = result;
      uint64_t v15 = v10[2].i64[1];
      v10 += 3;
      v12->i16[0] = v15;
      v12 += 2;
      --v11;
    }

    while (v11);
  }

  DWORD2(v30[0]) = v10->i64[0];
  if (v6 <= 0x29)
  {
    uint64_t v18 = (int32x4_t *)*((void *)&v30[1] + 1);
    size_t v16 = v31;
LABEL_15:
    uint64_t v19 = GTMTLDescriptorAllocator_copyPropertyList(a3, (uint64_t)v18, v16, a4);
    size_t v16 = v20;
    goto LABEL_16;
  }

  size_t v16 = v10->u64[1];
  int v17 = v10 + 1;
  if (v16) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0LL;
  }
  if (v6 < 0x2E) {
    goto LABEL_15;
  }
  if (v16) {
    uint64_t v19 = *(void **)(a3 + 416);
  }
  else {
    uint64_t v19 = 0LL;
  }
  *(void *)(a3 + 416) += v16;
  if (a4) {
    memcpy(v19, v18, v16);
  }
LABEL_16:
  *((void *)&v30[1] + 1) = v19;
  size_t v31 = v16;
  uint64_t v21 = *(void *)(a3 + 384);
  *(void *)(a3 + 384) = v21 + 120;
  if (a4)
  {
    __int128 v22 = v30[0];
    *(_OWORD *)(v21 + 64) = v29;
    *(_OWORD *)(v21 + 80) = v22;
    *(_OWORD *)(v21 + 96) = v30[1];
    *(void *)(v21 + 112) = v31;
    __int128 v23 = v26;
    *(_OWORD *)uint64_t v21 = v25;
    *(_OWORD *)(v21 + 16) = v23;
    int16x4_t result = (int16x4_t)v27;
    __int128 v24 = v28;
    *(_OWORD *)(v21 + 32) = v27;
    *(_OWORD *)(v21 + 48) = v24;
  }

  return result;
}

uint64_t EncodeDYIOSurface(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v12 = a2;
  uint64_t v13 = 0LL;
  unint64_t v14 = a3;
  if (a3 < 8
    || (*a2 = 81LL, a3 < 0x10)
    || (a2[1] = *(void *)a1, a3 < 0x18)
    || (a2[2] = *(void *)(a1 + 8), a3 < 0x20)
    || (a2[3] = *(unsigned __int16 *)(a1 + 92), a3 <= 0x27))
  {
    uint64_t v13 = 40LL;
LABEL_7:
    uint64_t v3 = (unsigned __int8 *)(a1 + 102);
LABEL_8:
    LODWORD(v4) = *v3;
    goto LABEL_9;
  }

  a2[4] = *(unsigned __int16 *)(a1 + 94);
  uint64_t v13 = 40LL;
  if (a3 < 0x30) {
    goto LABEL_7;
  }
  a2[5] = *(unsigned __int16 *)(a1 + 96);
  if (a3 < 0x38) {
    goto LABEL_7;
  }
  a2[6] = *(unsigned int *)(a1 + 80);
  if (a3 < 0x40) {
    goto LABEL_7;
  }
  a2[7] = *(unsigned __int16 *)(a1 + 98);
  if (a3 < 0x48) {
    goto LABEL_7;
  }
  a2[8] = *(unsigned __int16 *)(a1 + 100);
  if (a3 <= 0x4F) {
    goto LABEL_7;
  }
  a2[9] = *(unsigned int *)(a1 + 84);
  uint64_t v3 = (unsigned __int8 *)(a1 + 102);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 102);
  if (a3 >= 0x58)
  {
    a2[10] = v4;
    goto LABEL_8;
  }

size_t DecodeDYMTLDeviceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7 = *(void *)a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v9 = (const char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 16));
  uint64_t v11 = &v9[result & 0xFFFFFFFFFFFFFFF8LL];
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0LL;
  }
  unint64_t v60 = v13;
  unint64_t v14 = v11 + 40;
  __int16 v57 = *((_WORD *)v11 + 4);
  char v58 = v11[32];
  __int16 v55 = *((_WORD *)v11 + 12);
  __int16 v56 = *((_WORD *)v11 + 8);
  if (v8 == 1)
  {
    uint64_t v15 = 0LL;
    size_t v16 = 0LL;
    int v17 = 0LL;
    char v18 = 0;
    char v54 = 0;
  }

  else
  {
    uint64_t v19 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8LL];
    if (*v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    char v20 = v8;
    char v21 = v7;
    size_t v7 = (size_t)&v19[(strlen(v19 + 8) & 0xFFFFFFFFFFFFFFF8LL) + 8];
    __int128 v22 = (const char *)(v7 + 8);
    if (v19[8]) {
      size_t v16 = v19 + 8;
    }
    else {
      size_t v16 = 0LL;
    }
    size_t result = strlen((const char *)(v7 + 8));
    __int128 v23 = &v22[result & 0xFFFFFFFFFFFFFFF8LL];
    int v24 = *(unsigned __int8 *)(v7 + 8);
    LOBYTE(v7) = v21;
    LOBYTE(v8) = v20;
    if (v24) {
      int v17 = v22;
    }
    else {
      int v17 = 0LL;
    }
    char v18 = v23[8];
    unint64_t v14 = v23 + 24;
    char v54 = v23[16];
  }

  if (v7 < 0xCu)
  {
    uint64_t v47 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    char v52 = 0;
    char v48 = 0;
    __int128 v53 = 0u;
    int16x8_t v51 = 0u;
    __int128 v59 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  __int128 v53 = *(_OWORD *)v14;
  if (v7 < 0xFu)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
    char v52 = 0;
    goto LABEL_25;
  }

  char v52 = v14[16];
  if (v7 < 0x19u)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
LABEL_25:
    uint64_t v50 = 0LL;
    char v48 = 0;
    LOBYTE(v49) = 0;
    __int128 v59 = 0u;
    int16x8_t v51 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  __int128 v25 = v14 + 32;
  int16x8_t v26 = 0uLL;
  __int128 v59 = 0u;
  if (*((void *)v14 + 3) == -1LL)
  {
    uint64_t v50 = 0LL;
  }

  else
  {
    v27.i32[0] = *((void *)v14 + 3);
    v27.i32[1] = *(_DWORD *)v25;
    int16x8_t v26 = vuzp1q_s16( (int16x8_t)vmovn_hight_s64(v27, *(int64x2_t *)(v14 + 40)),  (int16x8_t)vuzp1q_s32(*(int32x4_t *)(v14 + 56), *(int32x4_t *)(v14 + 72)));
    __int128 v25 = v14 + 104;
    LOWORD(v50) = *((_WORD *)v14 + 48);
    WORD2(v50) = *((_WORD *)v14 + 44);
  }

  int16x8_t v51 = v26;
  if (v7 < 0x1Cu)
  {
    uint64_t v47 = 0LL;
    BYTE4(v49) = 0;
    goto LABEL_32;
  }

  BYTE4(v49) = *v25;
  if (v7 == 28)
  {
    uint64_t v47 = 0LL;
LABEL_32:
    LOBYTE(v49) = 0;
    goto LABEL_33;
  }

  LOBYTE(v49) = v25[8];
  if (v7 < 0x2Cu)
  {
    uint64_t v47 = 0LL;
LABEL_33:
    char v48 = 0;
    if (v12) {
      goto LABEL_34;
    }
LABEL_39:
    __int128 v29 = (void *)(a3 + 416);
    uint64_t v30 = *(void *)(a3 + 416);
    __int128 v28 = v60;
    goto LABEL_40;
  }

  uint64_t v47 = *((void *)v25 + 2);
  __int128 v59 = *(_OWORD *)(v25 + 24);
  char v48 = v25[40];
  if (!v12) {
    goto LABEL_39;
  }
LABEL_34:
  __int128 v28 = v60;
  size_t result = strlen(v60);
  __int128 v29 = (void *)(a3 + 416);
  uint64_t v30 = *(void *)(a3 + 416);
  size_t v31 = result + 1;
  if (result != -1LL)
  {
    uint64_t v32 = *(void **)(a3 + 416);
    goto LABEL_41;
  }

uint64_t EncodeDYMTLDeviceDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v33 = a2;
  unint64_t v35 = a3;
  if (a3 > 7)
  {
    *a2 = 81LL;
    uint64_t v4 = (_BYTE *)(a1 + 102);
    if (a3 >= 0x10) {
      a2[1] = *v4;
    }
  }

  else
  {
    uint64_t v4 = (_BYTE *)(a1 + 102);
  }

  uint64_t v34 = 16LL;
  WriteDynamicBufferString(&v33, *(const char **)(a1 + 64));
  unint64_t v5 = v35;
  uint64_t v6 = v34 + 8;
  if (v34 + 8 <= v35)
  {
    *(void *)((char *)v33 + v34) = *(unsigned __int16 *)(a1 + 96);
    unint64_t v5 = v35;
    uint64_t v6 = v34 + 8;
  }

  uint64_t v34 = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v5)
  {
    *(void *)((char *)v33 + v6) = *(unsigned __int16 *)(a1 + 98);
    unint64_t v5 = v35;
    uint64_t v7 = v34 + 8;
  }

  uint64_t v34 = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v5)
  {
    *(void *)((char *)v33 + v7) = *(unsigned __int16 *)(a1 + 100);
    unint64_t v5 = v35;
    uint64_t v8 = v34 + 8;
  }

  uint64_t v34 = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v5)
  {
    *(void *)((char *)v33 + v8) = *(unsigned __int8 *)(a1 + 105);
    uint64_t v9 = v34 + 8;
  }

  uint64_t v34 = v9;
  if (*v4 != 1)
  {
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 72));
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 80));
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 88));
    unint64_t v10 = v35;
    uint64_t v11 = v34 + 8;
    if (v34 + 8 <= v35)
    {
      *(void *)((char *)v33 + v34) = *(unsigned __int8 *)(a1 + 106);
      unint64_t v10 = v35;
      uint64_t v11 = v34 + 8;
    }

    uint64_t v34 = v11;
    uint64_t v9 = v11 + 8;
    if (v11 + 8 <= v10)
    {
      *(void *)((char *)v33 + v11) = *(unsigned __int8 *)(a1 + 107);
      uint64_t v9 = v34 + 8;
    }

    uint64_t v34 = v9;
  }

  uint64_t v12 = v9 + 8;
  unint64_t v13 = v35;
  if (v9 + 8 <= v35)
  {
    *(void *)((char *)v33 + v9) = *(void *)a1;
    unint64_t v13 = v35;
    uint64_t v12 = v34 + 8;
  }

  uint64_t v34 = v12;
  uint64_t v14 = v12 + 8;
  if (v12 + 8 <= v13)
  {
    *(void *)((char *)v33 + v12) = *(void *)(a1 + 8);
    unint64_t v13 = v35;
    uint64_t v14 = v34 + 8;
  }

  uint64_t v34 = v14;
  uint64_t v15 = v14 + 8;
  if (v14 + 8 <= v13)
  {
    *(void *)((char *)v33 + v14) = *(unsigned __int8 *)(a1 + 108);
    unint64_t v13 = v35;
    uint64_t v15 = v34 + 8;
  }

  uint64_t v34 = v15;
  int v16 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v17 = v15 + 8;
  if (v15 + 8 <= v13)
  {
    if (*(_WORD *)(a1 + 40)) {
      uint64_t v18 = *(unsigned __int16 *)(a1 + 40);
    }
    else {
      uint64_t v18 = -1LL;
    }
    *(void *)((char *)v33 + v15) = v18;
    unint64_t v13 = v35;
    uint64_t v17 = v34 + 8;
  }

  uint64_t v34 = v17;
  if (v16)
  {
    uint64_t v19 = v17 + 8;
    if (v17 + 8 <= v13)
    {
      *(void *)((char *)v33 + v17) = *(unsigned __int16 *)(a1 + 42);
      unint64_t v13 = v35;
      uint64_t v19 = v34 + 8;
    }

    uint64_t v34 = v19;
    uint64_t v20 = v19 + 8;
    if (v19 + 8 <= v13)
    {
      *(void *)((char *)v33 + v19) = *(unsigned __int16 *)(a1 + 44);
      unint64_t v13 = v35;
      uint64_t v20 = v34 + 8;
    }

    uint64_t v34 = v20;
    uint64_t v21 = v20 + 8;
    if (v20 + 8 <= v13)
    {
      *(void *)((char *)v33 + v20) = *(unsigned __int16 *)(a1 + 46);
      unint64_t v13 = v35;
      uint64_t v21 = v34 + 8;
    }

    uint64_t v34 = v21;
    uint64_t v22 = v21 + 8;
    if (v21 + 8 <= v13)
    {
      *(void *)((char *)v33 + v21) = *(unsigned __int16 *)(a1 + 48);
      unint64_t v13 = v35;
      uint64_t v22 = v34 + 8;
    }

    uint64_t v34 = v22;
    uint64_t v23 = v22 + 8;
    if (v22 + 8 <= v13)
    {
      *(void *)((char *)v33 + v22) = *(unsigned __int16 *)(a1 + 50);
      unint64_t v13 = v35;
      uint64_t v23 = v34 + 8;
    }

    uint64_t v34 = v23;
    uint64_t v24 = v23 + 8;
    if (v23 + 8 <= v13)
    {
      *(void *)((char *)v33 + v23) = *(unsigned __int16 *)(a1 + 52);
      unint64_t v13 = v35;
      uint64_t v24 = v34 + 8;
    }

    uint64_t v34 = v24;
    uint64_t v25 = v24 + 8;
    if (v24 + 8 <= v13)
    {
      *(void *)((char *)v33 + v24) = *(unsigned __int16 *)(a1 + 54);
      unint64_t v13 = v35;
      uint64_t v25 = v34 + 8;
    }

    uint64_t v34 = v25;
    uint64_t v26 = v25 + 8;
    if (v25 + 8 <= v13)
    {
      *(void *)((char *)v33 + v25) = *(unsigned __int16 *)(a1 + 56);
      unint64_t v13 = v35;
      uint64_t v26 = v34 + 8;
    }

    uint64_t v34 = v26;
    uint64_t v17 = v26 + 8;
    if (v26 + 8 <= v13)
    {
      *(void *)((char *)v33 + v26) = *(unsigned __int16 *)(a1 + 58);
      unint64_t v13 = v35;
      uint64_t v17 = v34 + 8;
    }

    uint64_t v34 = v17;
  }

  uint64_t v27 = v17 + 8;
  if (v17 + 8 <= v13)
  {
    *(void *)((char *)v33 + v17) = *(unsigned __int8 *)(a1 + 103);
    unint64_t v13 = v35;
    uint64_t v27 = v34 + 8;
  }

  uint64_t v34 = v27;
  uint64_t v28 = v27 + 8;
  if (v27 + 8 <= v13)
  {
    *(void *)((char *)v33 + v27) = *(unsigned __int8 *)(a1 + 109);
    unint64_t v13 = v35;
    uint64_t v28 = v34 + 8;
  }

  uint64_t v34 = v28;
  uint64_t v29 = v28 + 8;
  if (v28 + 8 <= v13)
  {
    *(void *)((char *)v33 + v28) = *(void *)(a1 + 16);
    unint64_t v13 = v35;
    uint64_t v29 = v34 + 8;
  }

  uint64_t v34 = v29;
  uint64_t v30 = v29 + 8;
  if (v29 + 8 <= v13)
  {
    *(void *)((char *)v33 + v29) = *(void *)(a1 + 24);
    unint64_t v13 = v35;
    uint64_t v30 = v34 + 8;
  }

  uint64_t v34 = v30;
  uint64_t v31 = v30 + 8;
  if (v30 + 8 <= v13)
  {
    *(void *)((char *)v33 + v30) = *(void *)(a1 + 32);
    unint64_t v13 = v35;
    uint64_t v31 = v34 + 8;
  }

  uint64_t v34 = v31;
  uint64_t result = v31 + 8;
  if (v31 + 8 <= v13)
  {
    *(void *)((char *)v33 + v31) = *(unsigned __int8 *)(a1 + 110);
    return v34 + 8;
  }

  return result;
}

size_t DecodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = (char *)(a1 + 8);
  size_t v8 = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + a1 + 8;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8)) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0LL;
  }
  __s = v10;
  size_t v11 = (strlen((const char *)(v8 + 8)) & 0xFFFFFFFFFFFFFFF8LL) + v8 + 8;
  int v53 = *(unsigned __int8 *)(v8 + 8);
  if (*(_BYTE *)(v8 + 8)) {
    uint64_t v12 = (char *)(v8 + 8);
  }
  else {
    uint64_t v12 = 0LL;
  }
  __int16 v55 = v12;
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = (const char *)(v11 + 24);
  unsigned int v52 = v13;
  if (v13)
  {
    uint64_t v51 = a3[49];
    while (1)
    {
      uint64_t v15 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8LL];
      int v16 = v15 + 8;
      int v17 = *(unsigned __int8 *)v14;
      if (*v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = 0LL;
      }
      size_t v19 = strlen(v15 + 8);
      int v20 = *((unsigned __int8 *)v15 + 8);
      if (v20) {
        uint64_t v21 = v16;
      }
      else {
        uint64_t v21 = 0LL;
      }
      if (v17)
      {
        size_t v22 = strlen(v18);
        uint64_t v23 = a3[52];
        size_t v24 = v22 + 1;
        if (v22 != -1LL)
        {
          uint64_t v25 = (void *)a3[52];
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v23 = a3[52];
      }

      size_t v24 = 0LL;
      uint64_t v25 = 0LL;
LABEL_20:
      a3[52] = v23 + v24;
      if (a4) {
        memcpy(v25, v18, v24);
      }
      if (!v20)
      {
        uint64_t v27 = a3[52];
LABEL_26:
        size_t v28 = 0LL;
        uint64_t v29 = 0LL;
        goto LABEL_27;
      }

      size_t v26 = strlen(v21);
      uint64_t v27 = a3[52];
      size_t v28 = v26 + 1;
      if (v26 == -1LL) {
        goto LABEL_26;
      }
      uint64_t v29 = (void *)a3[52];
LABEL_27:
      a3[52] = v27 + v28;
      if ((a4 & 1) != 0)
      {
        memcpy(v29, v21, v28);
        uint64_t v30 = (void *)a3[49];
        a3[49] = v30 + 2;
        void *v30 = v25;
        v30[1] = v29;
      }

      else
      {
        a3[49] += 16LL;
      }

      uint64_t v14 = &v16[(v19 & 0xFFFFFFFFFFFFFFF8LL) + 8];
      if (!--v13) {
        goto LABEL_33;
      }
    }
  }

  uint64_t v51 = 0LL;
LABEL_33:
  size_t result = strlen(v14);
  uint64_t v32 = &v14[result & 0xFFFFFFFFFFFFFFF8LL];
  int v33 = *(unsigned __int8 *)v14;
  if (*v14) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = 0LL;
  }
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 2);
  if (v9)
  {
    size_t result = strlen(__s);
    uint64_t v37 = a3 + 52;
    uint64_t v38 = a3[52];
    size_t v39 = result + 1;
    if (result != -1LL)
    {
      size_t v40 = (void *)a3[52];
      uint64_t v41 = v55;
      goto LABEL_41;
    }
  }

  else
  {
    uint64_t v37 = a3 + 52;
    uint64_t v38 = a3[52];
  }

  uint64_t v41 = v55;
  size_t v39 = 0LL;
  size_t v40 = 0LL;
LABEL_41:
  *uint64_t v37 = v38 + v39;
  if (a4) {
    size_t result = (size_t)memcpy(v40, __s, v39);
  }
  if (v53)
  {
    size_t result = strlen(v41);
    uint64_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
    size_t v44 = result + 1;
    if (result != -1LL)
    {
      __int128 v45 = (void *)a3[52];
      goto LABEL_48;
    }
  }

  else
  {
    uint64_t v42 = a3 + 52;
    uint64_t v43 = a3[52];
  }

  size_t v44 = 0LL;
  __int128 v45 = 0LL;
LABEL_48:
  void *v42 = v43 + v44;
  if (a4) {
    size_t result = (size_t)memcpy(v45, v41, v44);
  }
  if (v33)
  {
    size_t result = strlen(v34);
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
    size_t v48 = result + 1;
    if (result != -1LL)
    {
      uint64_t v49 = (void *)a3[52];
      goto LABEL_55;
    }
  }

  else
  {
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
  }

  size_t v48 = 0LL;
  uint64_t v49 = 0LL;
LABEL_55:
  *uint64_t v46 = v47 + v48;
  if ((a4 & 1) != 0)
  {
    size_t result = (size_t)memcpy(v49, v34, v48);
    uint64_t v50 = a3[38];
    a3[38] = v50 + 48;
    *(void *)uint64_t v50 = v49;
    *(void *)(v50 + 8) = v40;
    *(void *)(v50 + 16) = v45;
    *(void *)(v50 + 24) = v51;
    *(void *)(v50 + 32) = v52;
    *(_DWORD *)(v50 + 40) = v36;
    *(_BYTE *)(v50 + 44) = v35;
    *(_WORD *)(v50 + 45) = 0;
    *(_BYTE *)(v50 + 47) = 0;
  }

  else
  {
    a3[38] += 48LL;
  }

  return result;
}

uint64_t EncodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v15 = a2;
  unint64_t v17 = a3;
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v16 = 8LL;
  WriteDynamicBufferString(&v15, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v15, *(const char **)(a1 + 16));
  uint64_t v4 = v16;
  unint64_t v5 = v17;
  uint64_t v6 = v16 + 8;
  if (v16 + 8 <= v17)
  {
    uint64_t v7 = GTMTLCounterSet_structType(*(const char **)(a1 + 8));
    *(void *)((char *)v15 + v4) = v7;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if (v4 + 16 <= v5)
  {
    *(void *)((char *)v15 + v6) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
  }

  uint64_t v16 = v4 + 16;
  if ((_DWORD)v8)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    do
    {
      WriteDynamicBufferString(&v15, *(const char **)(*(void *)(a1 + 24) + v9));
      WriteDynamicBufferString(&v15, *(const char **)(*(void *)(a1 + 24) + v9 + 8));
      ++v10;
      v9 += 16LL;
    }

    while (v10 < *(unsigned int *)(a1 + 32));
  }

  WriteDynamicBufferString(&v15, *(const char **)a1);
  uint64_t v11 = v16;
  unint64_t v12 = v17;
  uint64_t v13 = v16 + 8;
  if (v16 + 8 <= v17) {
    *(void *)((char *)v15 + v16) = *(unsigned __int8 *)(a1 + 44);
  }
  uint64_t result = v11 + 16;
  if (v11 + 16 <= v12) {
    *(void *)((char *)v15 + v13) = *(unsigned int *)(a1 + 40);
  }
  return result;
}

size_t DecodeDYMTLAccelerationStructureDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)result;
  int v9 = *(unsigned __int8 *)(result + 8);
  unsigned int v104 = *(unsigned __int8 *)(result + 16);
  char v105 = *(_BYTE *)(result + 8);
  if (v9 == 3)
  {
    if (v8 < 0x4E)
    {
      unint64_t v65 = 0LL;
      char v66 = 0;
      char v67 = 0;
      if (!a4) {
        goto LABEL_193;
      }
    }

    else
    {
      unint64_t v65 = *(void *)(result + 120);
      char v66 = *(_BYTE *)(result + 128);
      char v67 = *(_BYTE *)(result + 136);
      if (!a4) {
        goto LABEL_193;
      }
    }

    uint64_t v94 = *(void *)(result + 24);
    uint64_t v107 = *(void *)(result + 32);
    unint64_t v92 = *(void *)(result + 40);
    unint64_t v90 = *(void *)(result + 48);
    uint64_t v86 = *(void *)(result + 56);
    uint64_t v85 = *(void *)(result + 64);
    unint64_t v70 = *(void *)(result + 72);
    unint64_t v69 = *(void *)(result + 80);
    int64x2_t v95 = *(int64x2_t *)(result + 88);
    int v79 = *(_DWORD *)(result + 104);
    char v78 = *(_BYTE *)(result + 112);
    if (a5)
    {
      int64x2_t v125 = *(int64x2_t *)(result + 88);
      char v127 = *(_BYTE *)(result + 112);
      uint64_t v129 = *(void *)(result + 64);
      char v132 = v67;
      Stream_10858 = (uint64_t *)GetStream_10858(a5, v94);
      char v136 = v66;
      if (Stream_10858) {
        uint64_t v97 = *Stream_10858;
      }
      else {
        uint64_t v97 = 0LL;
      }
      v99 = (unint64_t *)GetStream_10858(a5, v92);
      if (v99) {
        unint64_t v92 = *v99;
      }
      else {
        unint64_t v92 = 0LL;
      }
      v100 = (uint64_t *)GetStream_10858(a5, v86);
      if (v100) {
        uint64_t v86 = *v100;
      }
      else {
        uint64_t v86 = 0LL;
      }
      v101 = (unint64_t *)GetStream_10858(a5, v70);
      if (v101) {
        unint64_t v70 = *v101;
      }
      else {
        unint64_t v70 = 0LL;
      }
      uint64_t result = v104;
      uint64_t v93 = v97;
      char v66 = v136;
      char v67 = v132;
      uint64_t v85 = v129;
      char v78 = v127;
      int64x2_t v95 = v125;
    }

    else
    {
      uint64_t result = *(unsigned __int8 *)(result + 16);
      uint64_t v93 = v94;
    }

    int32x2_t v98 = vmovn_s64(v95);
    unint64_t v91 = HIDWORD(v92);
    unint64_t v89 = HIDWORD(v90);
    unint64_t v88 = v90 >> 40;
    unint64_t v87 = HIWORD(v90);
    unint64_t v84 = HIDWORD(v70);
    uint64_t v83 = HIDWORD(v69);
    uint64_t v82 = v65 >> 8;
    unint64_t v80 = v65 & 0xFFFFFFFFFF000000LL;
    uint64_t v81 = v65 >> 16;
    goto LABEL_192;
  }

  unsigned int v126 = *(_DWORD *)result;
  if (v9 == 2)
  {
    uint64_t v107 = *(void *)(result + 24);
    unint64_t v135 = *(void *)(result + 32);
    int v68 = *(_DWORD *)(result + 40);
    LODWORD(v69) = *(_DWORD *)(result + 48);
    unint64_t v70 = *(unsigned int *)(result + 56);
    v71 = (uint64_t *)(result + 64);
    v72 = (uint64_t *)a3[50];
    a3[50] = &v72[v70];
    if (!a4) {
      goto LABEL_151;
    }
    if (a5)
    {
      uint64_t result = GetStream_10858(a5, v107);
      if (!result)
      {
        uint64_t v107 = 0LL;
        if (!v70) {
          goto LABEL_151;
        }
        goto LABEL_145;
      }

      uint64_t v107 = *(void *)result;
    }

    if (!v70) {
      goto LABEL_151;
    }
LABEL_145:
    v73 = v72;
    unint64_t v74 = v70;
    do
    {
      uint64_t v76 = *v71++;
      uint64_t v75 = v76;
      if (a5)
      {
        uint64_t result = GetStream_10858(a5, v75);
        if (result) {
          uint64_t v75 = *(void *)result;
        }
        else {
          uint64_t v75 = 0LL;
        }
      }

      *v73++ = v75;
      --v74;
    }

    while (v74);
LABEL_151:
    if (v126 < 0x39)
    {
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      uint64_t v86 = 0LL;
      unint64_t v77 = 0LL;
      uint64_t v85 = 0LL;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      if (!a4) {
        goto LABEL_193;
      }
    }

    else
    {
      LOBYTE(v65) = *(_BYTE *)v71;
      unint64_t v77 = v71[1];
      if (a5)
      {
        uint64_t result = GetStream_10858(a5, v77);
        if (result) {
          unint64_t v77 = *(void *)result;
        }
        else {
          unint64_t v77 = 0LL;
        }
      }

      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      uint64_t v86 = v71[2];
      uint64_t v83 = v71[3];
      if (v126 < 0x4E)
      {
        uint64_t v85 = 0LL;
        LOBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        if (!a4) {
          goto LABEL_193;
        }
      }

      else
      {
        uint64_t v85 = v71[4];
        uint64_t v82 = v71[5];
        uint64_t v81 = v71[6];
        if (!a4) {
          goto LABEL_193;
        }
      }
    }

    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0LL;
    unint64_t v91 = HIDWORD(v77);
    LODWORD(v90) = v135;
    unint64_t v89 = HIDWORD(v135);
    unint64_t v88 = v135 >> 40;
    unint64_t v87 = HIWORD(v135);
    int32x2_t v98 = 0LL;
    LODWORD(v92) = v77;
    goto LABEL_179;
  }

  if (v9 == 1)
  {
    unint64_t v10 = result + 32;
    uint64_t v107 = *(void *)(result + 24);
    if (v107)
    {
      uint64_t v11 = 0LL;
      uint64_t v103 = a3[37];
      while (2)
      {
        unint64_t v12 = (int32x2_t *)a3[37];
        a3[37] = v12 + 17;
        __int8 v115 = *(_BYTE *)(v10 + 16);
        __int8 v116 = *(_BYTE *)v10;
        __int32 v113 = *(_DWORD *)(v10 + 8);
        __int8 v114 = *(_BYTE *)(v10 + 24);
        switch(*(_BYTE *)v10)
        {
          case 1:
            if (v8 < 0x3C)
            {
              uint64_t v15 = 0LL;
              uint64_t v14 = 0LL;
              uint64_t v16 = 0LL;
              unint64_t v17 = (const char *)(v10 + 88);
              uint64_t v13 = 30LL;
              if (!a4) {
                goto LABEL_85;
              }
            }

            else
            {
              uint64_t v13 = *(unsigned __int8 *)(v10 + 88);
              uint64_t v15 = *(void *)(v10 + 96);
              uint64_t v14 = *(void *)(v10 + 104);
              if (v8 < 0x4E)
              {
                uint64_t v16 = 0LL;
                unint64_t v17 = (const char *)(v10 + 112);
                if (!a4) {
                  goto LABEL_85;
                }
              }

              else
              {
                uint64_t v16 = *(unsigned __int8 *)(v10 + 112);
                unint64_t v17 = (const char *)(v10 + 120);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }

            uint64_t v119 = v13;
            uint64_t v117 = v16;
            uint64_t v128 = v15;
            uint64_t v120 = v14;
            int32x2_t v130 = *(int32x2_t *)(v10 + 40);
            uint64_t v48 = *(void *)(v10 + 56);
            uint64_t v121 = *(void *)(v10 + 48);
            v124.i8[0] = *(_BYTE *)(v10 + 72);
            int32x2_t v122 = *(int32x2_t *)(v10 + 64);
            uint64_t v123 = *(void *)(v10 + 80);
            if (!a5)
            {
              uint64_t v118 = *(void *)(v10 + 32);
              uint64_t v133 = *(void *)(v10 + 56);
              goto LABEL_87;
            }

            uint64_t v49 = (uint64_t *)GetStream_10858(a5, *(void *)(v10 + 32));
            if (v49) {
              uint64_t v118 = *v49;
            }
            else {
              uint64_t v118 = 0LL;
            }
            unsigned int v52 = (uint64_t *)GetStream_10858(a5, v48);
            if (v52) {
              uint64_t v53 = *v52;
            }
            else {
              uint64_t v53 = 0LL;
            }
            uint64_t v55 = v128;
            uint64_t v133 = v53;
            uint64_t v54 = a5;
            goto LABEL_109;
          case 2:
            unint64_t v17 = (const char *)(v10 + 64);
            if (!a4) {
              goto LABEL_85;
            }
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 48);
            uint64_t v128 = *(void *)(v10 + 56);
            if (a5)
            {
              uint64_t result = GetStream_10858(a5, *(void *)(v10 + 32));
              if (result)
              {
                uint64_t v123 = 0LL;
                uint64_t v118 = 0LL;
                int32x2_t v130 = 0LL;
                uint64_t v121 = 0LL;
                v124.i8[0] = 0;
                uint64_t v117 = 0LL;
                uint64_t v119 = 0LL;
                unint64_t v18 = 0LL;
                uint64_t v111 = 0LL;
                uint64_t v112 = 0LL;
                uint64_t v109 = 0LL;
                uint64_t v110 = 0LL;
                uint64_t v108 = 0LL;
                uint64_t v133 = *(void *)result;
                goto LABEL_111;
              }

              uint64_t v133 = 0LL;
            }

            else
            {
              uint64_t v133 = *(void *)(v10 + 32);
            }

            goto LABEL_86;
          case 3:
            int32x2_t v19 = *(int32x2_t *)(v10 + 32);
            unint64_t v20 = v10 + 40;
            int32x2_t v130 = v19;
            if (v19)
            {
              uint64_t v118 = a3[43];
              do
              {
                uint64_t v21 = (uint64_t *)a3[43];
                a3[43] = v21 + 2;
                if (a4)
                {
                  uint64_t v22 = *(void *)v20;
                  uint64_t v23 = *(void *)(v20 + 8);
                  if (a5)
                  {
                    uint64_t result = GetStream_10858(a5, v22);
                    if (result) {
                      uint64_t v22 = *(void *)result;
                    }
                    else {
                      uint64_t v22 = 0LL;
                    }
                  }

                  *uint64_t v21 = v22;
                  v21[1] = v23;
                }

                v20 += 16LL;
                --*(void *)&v19;
              }

              while (v19);
            }

            else
            {
              uint64_t v118 = 0LL;
            }

            uint64_t v121 = *(void *)(v20 + 8);
            uint64_t v133 = *(void *)(v20 + 16);
            v124.i8[0] = *(_BYTE *)(v20 + 32);
            uint64_t v123 = *(void *)(v20 + 40);
            if (v8 <= 0x3B)
            {
              uint64_t v128 = 0LL;
              uint64_t v117 = 0LL;
              unint64_t v17 = (const char *)(v20 + 48);
              uint64_t v119 = 30LL;
              uint64_t v120 = 0LL;
              if (!a4) {
                goto LABEL_85;
              }
            }

            else
            {
              uint64_t v119 = *(unsigned __int8 *)(v20 + 48);
              uint64_t v128 = *(void *)(v20 + 56);
              uint64_t v120 = *(void *)(v20 + 64);
              if (v8 < 0x4E)
              {
                uint64_t v117 = 0LL;
                unint64_t v17 = (const char *)(v20 + 72);
                if (!a4)
                {
LABEL_85:
                  uint64_t v133 = 0LL;
                  int32x2_t v122 = 0LL;
                  uint64_t v128 = 0LL;
                  uint64_t v120 = 0LL;
LABEL_86:
                  uint64_t v123 = 0LL;
                  uint64_t v118 = 0LL;
                  int32x2_t v130 = 0LL;
                  uint64_t v121 = 0LL;
                  v124.i8[0] = 0;
                  uint64_t v117 = 0LL;
                  uint64_t v119 = 0LL;
                  goto LABEL_87;
                }
              }

              else
              {
                uint64_t v117 = *(unsigned __int8 *)(v20 + 72);
                unint64_t v17 = (const char *)(v20 + 80);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }

            int32x2_t v122 = *(int32x2_t *)(v20 + 24);
            if (!a5) {
              goto LABEL_87;
            }
            uint64_t v50 = (uint64_t *)GetStream_10858(a5, v133);
            if (v50) {
              uint64_t v133 = *v50;
            }
            else {
              uint64_t v133 = 0LL;
            }
            uint64_t v54 = a5;
            uint64_t v55 = v128;
LABEL_109:
            uint64_t result = GetStream_10858(v54, v55);
            if (!result)
            {
              uint64_t v128 = 0LL;
LABEL_87:
              unint64_t v18 = 0LL;
              uint64_t v111 = 0LL;
              uint64_t v112 = 0LL;
              uint64_t v109 = 0LL;
              uint64_t v110 = 0LL;
              uint64_t v108 = 0LL;
              goto LABEL_111;
            }

            unint64_t v18 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
            uint64_t v108 = 0LL;
            uint64_t v128 = *(void *)result;
LABEL_111:
            if (v8 < 0x38)
            {
              unint64_t v60 = 0LL;
              uint64_t v61 = 0LL;
              int32x2_t v62 = 0LL;
              int32x2_t v63 = 0LL;
              unint64_t v10 = (unint64_t)v17;
              if (!a4) {
                goto LABEL_134;
              }
              goto LABEL_128;
            }

            uint64_t result = strlen(v17);
            size_t v56 = result;
            if (*v17) {
              __int16 v57 = v17;
            }
            else {
              __int16 v57 = 0LL;
            }
            if (*v17)
            {
              uint64_t result = strlen(v57);
              uint64_t v58 = a3[52];
              size_t v59 = result + 1;
              if (result != -1LL)
              {
                unint64_t v60 = (void *)a3[52];
                goto LABEL_122;
              }
            }

            else
            {
              uint64_t v58 = a3[52];
            }

            size_t v59 = 0LL;
            unint64_t v60 = 0LL;
LABEL_122:
            a3[52] = v58 + v59;
            if (a4) {
              uint64_t result = (size_t)memcpy(v60, v57, v59);
            }
            unint64_t v10 = (unint64_t)&v17[(v56 & 0xFFFFFFFFFFFFFFF8LL) + 8];
            if (v126 < 0x3D)
            {
              uint64_t v61 = 0LL;
              int32x2_t v62 = 0LL;
              int32x2_t v63 = 0LL;
              if (!a4) {
                goto LABEL_134;
              }
            }

            else
            {
              uint64_t v61 = *(void *)v10;
              int32x2_t v62 = *(int32x2_t *)&v17[(v56 & 0xFFFFFFFFFFFFFFF8LL) + 16];
              int64x2_t v64 = *(int64x2_t *)(v10 + 16);
              v10 += 32LL;
              int32x2_t v63 = vmovn_s64(v64);
              if (!a4) {
                goto LABEL_134;
              }
            }

LABEL_128:
            if (a5)
            {
              int32x2_t v106 = v63;
              uint64_t result = GetStream_10858(a5, v61);
              if (result) {
                uint64_t v61 = *(void *)result;
              }
              else {
                uint64_t v61 = 0LL;
              }
              int32x2_t v63 = v106;
            }

            *unint64_t v12 = (int32x2_t)v60;
            v12[1] = (int32x2_t)v61;
            v12[2] = v62;
            v12[3] = v63;
            v12[4].i32[0] = v113;
            v12[4].i8[4] = v116;
            v12[4].i8[5] = v115;
            v12[4].i8[6] = v114;
            v12[4].i8[7] = 0;
            v12[5] = (int32x2_t)v133;
            v12[6] = v122;
            v12[7] = (int32x2_t)v128;
            v12[8] = (int32x2_t)v120;
            v12[9] = (int32x2_t)v123;
            v12[10] = (int32x2_t)v118;
            v12[11] = v130;
            v12[12] = (int32x2_t)v121;
            v12[13] = (int32x2_t)(v18 | (v119 << 16) | (v117 << 8) | v124.u8[0]);
            v12[14] = (int32x2_t)v112;
            v12[15] = (int32x2_t)v111;
            v12[16].i8[0] = BYTE4(v110);
            v12[16].i8[1] = v110;
            v12[16].i8[2] = BYTE4(v109);
            v12[16].i8[3] = v109;
            v12[16].i8[4] = BYTE4(v108);
            v12[16].i8[5] = v108;
            v12[16].i16[3] = 0;
LABEL_134:
            ++v11;
            unsigned int v8 = v126;
            if (v11 != v107) {
              continue;
            }
            uint64_t v93 = v103;
            break;
          case 4:
            int32x2_t v24 = *(int32x2_t *)(v10 + 32);
            uint64_t v25 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v24;
            if (v24)
            {
              uint64_t v133 = a3[43];
              do
              {
                size_t v26 = (uint64_t *)a3[43];
                a3[43] = v26 + 2;
                if (a4)
                {
                  uint64_t v27 = *v25;
                  uint64_t v28 = v25[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_10858(a5, v27);
                    if (result) {
                      uint64_t v27 = *(void *)result;
                    }
                    else {
                      uint64_t v27 = 0LL;
                    }
                  }

                  *size_t v26 = v27;
                  v26[1] = v28;
                }

                v25 += 2;
                --*(void *)&v24;
              }

              while (v24);
            }

            else
            {
              uint64_t v133 = 0LL;
            }

            unint64_t v17 = (const char *)(v25 + 3);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v123 = 0LL;
            uint64_t v118 = 0LL;
            int32x2_t v130 = 0LL;
            uint64_t v121 = 0LL;
            v124.i8[0] = 0;
            uint64_t v117 = 0LL;
            uint64_t v119 = 0LL;
            unint64_t v18 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
            uint64_t v108 = 0LL;
            uint64_t v128 = v25[2];
            uint64_t v120 = v25[1];
            goto LABEL_111;
          case 5:
            unint64_t v17 = (const char *)(v10 + 168);
            if (!a4) {
              goto LABEL_85;
            }
            uint64_t v29 = *(void *)(v10 + 32);
            v124.i64[0] = *(void *)(v10 + 80);
            uint64_t result = *(unsigned __int8 *)(v10 + 144);
            uint64_t v121 = *(void *)(v10 + 56);
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 72);
            uint64_t v128 = *(void *)(v10 + 64);
            uint64_t v118 = *(void *)(v10 + 96);
            uint64_t v123 = *(void *)(v10 + 88);
            uint64_t v111 = *(void *)(v10 + 104);
            uint64_t v112 = *(void *)(v10 + 112);
            LOBYTE(v110) = *(_BYTE *)(v10 + 152);
            BYTE4(v110) = *(_BYTE *)(v10 + 120);
            LOBYTE(v109) = *(_BYTE *)(v10 + 160);
            BYTE4(v109) = *(_BYTE *)(v10 + 144);
            LOBYTE(v108) = *(_BYTE *)(v10 + 128);
            BYTE4(v108) = *(_BYTE *)(v10 + 136);
            if (!a5)
            {
              int32x2_t v130 = *(int32x2_t *)(v10 + 48);
              uint64_t v133 = *(void *)(v10 + 32);
              goto LABEL_106;
            }

            uint64_t v30 = *(void *)(v10 + 48);
            uint64_t v31 = (uint64_t *)GetStream_10858(a5, v29);
            if (v31) {
              uint64_t v32 = *v31;
            }
            else {
              uint64_t v32 = 0LL;
            }
            uint64_t v51 = (int32x2_t *)GetStream_10858(a5, v30);
            if (v51) {
              int32x2_t v130 = *v51;
            }
            else {
              int32x2_t v130 = 0LL;
            }
            uint64_t v133 = v32;
            uint64_t v47 = a5;
            uint64_t v46 = v123;
            goto LABEL_103;
          case 6:
            int32x2_t v33 = *(int32x2_t *)(v10 + 32);
            uint64_t v34 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v33;
            if (v33)
            {
              uint64_t v134 = a3[43];
              do
              {
                uint64_t v35 = (uint64_t *)a3[43];
                a3[43] = v35 + 2;
                if (a4)
                {
                  uint64_t v36 = *v34;
                  uint64_t v37 = v34[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_10858(a5, v36);
                    if (result) {
                      uint64_t v36 = *(void *)result;
                    }
                    else {
                      uint64_t v36 = 0LL;
                    }
                  }

                  uint64_t *v35 = v36;
                  v35[1] = v37;
                }

                v34 += 2;
                --*(void *)&v33;
              }

              while (v33);
              uint64_t v38 = v134;
            }

            else
            {
              uint64_t v38 = 0LL;
            }

            uint64_t v41 = *v34;
            size_t v39 = v34 + 1;
            uint64_t v40 = v41;
            uint64_t v133 = v38;
            uint64_t v121 = v41;
            if (v41)
            {
              int32x2_t v131 = (int32x2_t)a3[43];
              do
              {
                uint64_t v42 = (uint64_t *)a3[43];
                a3[43] = v42 + 2;
                if (a4)
                {
                  uint64_t v43 = *v39;
                  uint64_t v44 = v39[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_10858(a5, v43);
                    if (result) {
                      uint64_t v43 = *(void *)result;
                    }
                    else {
                      uint64_t v43 = 0LL;
                    }
                  }

                  uint64_t *v42 = v43;
                  v42[1] = v44;
                }

                v39 += 2;
                --v40;
              }

              while (v40);
              int32x2_t v45 = v131;
            }

            else
            {
              int32x2_t v45 = 0LL;
            }

            unint64_t v17 = (const char *)(v39 + 13);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v128 = *v39;
            v124.i64[0] = v39[2];
            uint64_t v46 = v39[3];
            uint64_t v118 = v39[4];
            BYTE4(v110) = *((_BYTE *)v39 + 48);
            LOBYTE(v108) = *((_BYTE *)v39 + 56);
            BYTE4(v108) = *((_BYTE *)v39 + 64);
            uint64_t v111 = v39[5];
            uint64_t v112 = v39[9];
            BYTE4(v109) = *((_BYTE *)v39 + 80);
            LOBYTE(v110) = *((_BYTE *)v39 + 88);
            LOBYTE(v109) = *((_BYTE *)v39 + 96);
            int32x2_t v130 = v45;
            uint64_t v120 = v39[1];
            if (a5)
            {
              uint64_t v47 = a5;
LABEL_103:
              uint64_t result = GetStream_10858(v47, v46);
              if (result) {
                uint64_t v123 = *(void *)result;
              }
              else {
                uint64_t v123 = 0LL;
              }
            }

            else
            {
              uint64_t v123 = v39[3];
            }

LABEL_193:
  a3[10] += 96LL;
  return result;
}

uint64_t EncodeDYMTLAccelerationStructureDescriptor( unsigned __int8 *a1, void *a2, unint64_t a3, uint64_t a4)
{
  v201 = a2;
  unint64_t v203 = a3;
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18) {
        a2[2] = a1[1];
      }
    }
  }

  uint64_t result = 24LL;
  uint64_t v202 = 24LL;
  int v7 = *a1;
  switch(v7)
  {
    case 3:
      uint64_t v207 = *((void *)a1 + 1);
      entry = find_entry(a4, &v207, 8uLL, 0LL);
      if (*entry) {
        uint64_t v152 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v152 = 0LL;
      }
      unint64_t v176 = v203;
      uint64_t v177 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = *(void *)(v152 + 8);
        unint64_t v176 = v203;
        uint64_t v177 = v202 + 8;
      }

      uint64_t v202 = v177;
      uint64_t v178 = v177 + 8;
      if (v177 + 8 <= v176)
      {
        *(void *)((char *)v201 + v177) = *((void *)a1 + 2);
        uint64_t v178 = v202 + 8;
      }

      uint64_t v202 = v178;
      uint64_t v206 = *((void *)a1 + 3);
      v179 = find_entry(a4, &v206, 8uLL, 0LL);
      if (*v179) {
        uint64_t v180 = *(void *)(*v179 + 32LL);
      }
      else {
        uint64_t v180 = 0LL;
      }
      unint64_t v181 = v203;
      uint64_t v182 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = *(void *)(v180 + 8);
        unint64_t v181 = v203;
        uint64_t v182 = v202 + 8;
      }

      uint64_t v202 = v182;
      uint64_t v183 = v182 + 8;
      if (v182 + 8 <= v181)
      {
        *(void *)((char *)v201 + v182) = *((void *)a1 + 4);
        uint64_t v183 = v202 + 8;
      }

      uint64_t v202 = v183;
      uint64_t v205 = *((void *)a1 + 5);
      v184 = find_entry(a4, &v205, 8uLL, 0LL);
      if (*v184 && (uint64_t v185 = *(void *)(*v184 + 32LL)) != 0) {
        uint64_t v186 = *(void *)(v185 + 8);
      }
      else {
        uint64_t v186 = 0LL;
      }
      unint64_t v187 = v203;
      uint64_t v188 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v186;
        unint64_t v187 = v203;
        uint64_t v188 = v202 + 8;
      }

      uint64_t v202 = v188;
      uint64_t v189 = v188 + 8;
      if (v188 + 8 <= v187)
      {
        *(void *)((char *)v201 + v188) = *((void *)a1 + 6);
        uint64_t v189 = v202 + 8;
      }

      uint64_t v202 = v189;
      uint64_t v204 = *((void *)a1 + 7);
      v190 = find_entry(a4, &v204, 8uLL, 0LL);
      if (*v190 && (uint64_t v191 = *(void *)(*v190 + 32LL)) != 0) {
        uint64_t v192 = *(void *)(v191 + 8);
      }
      else {
        uint64_t v192 = 0LL;
      }
      unint64_t v193 = v203;
      uint64_t v194 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v192;
        unint64_t v193 = v203;
        uint64_t v194 = v202 + 8;
      }

      uint64_t v202 = v194;
      uint64_t v195 = v194 + 8;
      if (v194 + 8 <= v193)
      {
        *(void *)((char *)v201 + v194) = *((void *)a1 + 8);
        unint64_t v193 = v203;
        uint64_t v195 = v202 + 8;
      }

      uint64_t v202 = v195;
      uint64_t v196 = v195 + 8;
      if (v195 + 8 <= v193)
      {
        *(void *)((char *)v201 + v195) = *((unsigned int *)a1 + 20);
        unint64_t v193 = v203;
        uint64_t v196 = v202 + 8;
      }

      uint64_t v202 = v196;
      uint64_t v197 = v196 + 8;
      if (v196 + 8 <= v193)
      {
        *(void *)((char *)v201 + v196) = *((unsigned int *)a1 + 21);
        unint64_t v193 = v203;
        uint64_t v197 = v202 + 8;
      }

      uint64_t v202 = v197;
      uint64_t v198 = v197 + 8;
      if (v197 + 8 <= v193)
      {
        *(void *)((char *)v201 + v197) = *((unsigned int *)a1 + 22);
        unint64_t v193 = v203;
        uint64_t v198 = v202 + 8;
      }

      uint64_t v202 = v198;
      uint64_t v199 = v198 + 8;
      if (v198 + 8 <= v193)
      {
        *(void *)((char *)v201 + v198) = a1[92];
        unint64_t v193 = v203;
        uint64_t v199 = v202 + 8;
      }

      uint64_t v202 = v199;
      uint64_t v200 = v199 + 8;
      if (v199 + 8 <= v193)
      {
        *(void *)((char *)v201 + v199) = *((void *)a1 + 9);
        unint64_t v193 = v203;
        uint64_t v200 = v202 + 8;
      }

      uint64_t v202 = v200;
      uint64_t v174 = v200 + 8;
      if (v200 + 8 <= v193)
      {
        *(void *)((char *)v201 + v200) = a1[93];
        unint64_t v193 = v203;
        uint64_t v174 = v202 + 8;
      }

      uint64_t v202 = v174;
      uint64_t result = v174 + 8;
      if (v174 + 8 > v193) {
        return result;
      }
      uint64_t v175 = a1[94];
LABEL_314:
      *(void *)((char *)v201 + v174) = v175;
      return v202 + 8;
    case 2:
      uint64_t v207 = *((void *)a1 + 2);
      v153 = find_entry(a4, &v207, 8uLL, 0LL);
      if (*v153 && (uint64_t v154 = *(void *)(*v153 + 32LL)) != 0) {
        uint64_t v155 = *(void *)(v154 + 8);
      }
      else {
        uint64_t v155 = 0LL;
      }
      unint64_t v156 = v203;
      uint64_t v157 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v155;
        unint64_t v156 = v203;
        uint64_t v157 = v202 + 8;
      }

      uint64_t v202 = v157;
      uint64_t v158 = v157 + 8;
      if (v157 + 8 <= v156)
      {
        *(void *)((char *)v201 + v157) = *((void *)a1 + 4);
        unint64_t v156 = v203;
        uint64_t v158 = v202 + 8;
      }

      uint64_t v202 = v158;
      uint64_t v159 = v158 + 8;
      if (v158 + 8 <= v156)
      {
        *(void *)((char *)v201 + v158) = *((unsigned int *)a1 + 15);
        unint64_t v156 = v203;
        uint64_t v159 = v202 + 8;
      }

      uint64_t v202 = v159;
      uint64_t v160 = v159 + 8;
      if (v159 + 8 <= v156)
      {
        *(void *)((char *)v201 + v159) = *((unsigned int *)a1 + 16);
        unint64_t v156 = v203;
        uint64_t v160 = v202 + 8;
      }

      uint64_t v202 = v160;
      uint64_t v161 = *((unsigned int *)a1 + 14);
      uint64_t v162 = v160 + 8;
      if (v160 + 8 <= v156)
      {
        *(void *)((char *)v201 + v160) = v161;
        uint64_t v162 = v202 + 8;
        LODWORD(v161) = *((_DWORD *)a1 + 14);
      }

      uint64_t v202 = v162;
      if ((_DWORD)v161)
      {
        unint64_t v163 = 0LL;
        do
        {
          uint64_t v206 = *(void *)(*((void *)a1 + 1) + 8 * v163);
          uint64_t v164 = *find_entry(a4, &v206, 8uLL, 0LL);
          if (v164) {
            uint64_t v164 = *(void *)(v164 + 32);
          }
          uint64_t v162 = v202 + 8;
          if (v202 + 8 <= v203)
          {
            *(void *)((char *)v201 + v202) = *(void *)(v164 + 8);
            uint64_t v162 = v202 + 8;
          }

          uint64_t v202 = v162;
          ++v163;
        }

        while (v163 < *((unsigned int *)a1 + 14));
      }

      uint64_t v165 = v162 + 8;
      if (v162 + 8 <= v203)
      {
        *(void *)((char *)v201 + v162) = a1[72];
        uint64_t v165 = v202 + 8;
      }

      uint64_t v202 = v165;
      uint64_t v205 = *((void *)a1 + 3);
      v166 = find_entry(a4, &v205, 8uLL, 0LL);
      if (*v166 && (uint64_t v167 = *(void *)(*v166 + 32LL)) != 0) {
        uint64_t v168 = *(void *)(v167 + 8);
      }
      else {
        uint64_t v168 = 0LL;
      }
      unint64_t v169 = v203;
      uint64_t v170 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v168;
        unint64_t v169 = v203;
        uint64_t v170 = v202 + 8;
      }

      uint64_t v202 = v170;
      uint64_t v171 = v170 + 8;
      if (v170 + 8 <= v169)
      {
        *(void *)((char *)v201 + v170) = *((void *)a1 + 5);
        unint64_t v169 = v203;
        uint64_t v171 = v202 + 8;
      }

      uint64_t v202 = v171;
      uint64_t v172 = v171 + 8;
      if (v171 + 8 <= v169)
      {
        *(void *)((char *)v201 + v171) = *((unsigned int *)a1 + 17);
        unint64_t v169 = v203;
        uint64_t v172 = v202 + 8;
      }

      uint64_t v202 = v172;
      uint64_t v173 = v172 + 8;
      if (v172 + 8 <= v169)
      {
        *(void *)((char *)v201 + v172) = *((void *)a1 + 6);
        unint64_t v169 = v203;
        uint64_t v173 = v202 + 8;
      }

      uint64_t v202 = v173;
      uint64_t v174 = v173 + 8;
      if (v173 + 8 <= v169)
      {
        *(void *)((char *)v201 + v173) = a1[73];
        unint64_t v169 = v203;
        uint64_t v174 = v202 + 8;
      }

      uint64_t v202 = v174;
      uint64_t result = v174 + 8;
      if (v174 + 8 > v169) {
        return result;
      }
      uint64_t v175 = a1[74];
      goto LABEL_314;
    case 1:
      uint64_t v8 = *((void *)a1 + 2);
      if (a3 >= 0x20)
      {
        a2[3] = v8;
        uint64_t v8 = *((void *)a1 + 2);
      }

      uint64_t v9 = 32LL;
      uint64_t v202 = 32LL;
      if (v8)
      {
        unint64_t v10 = 0LL;
        uint64_t v9 = 32LL;
        do
        {
          uint64_t v11 = *((void *)a1 + 1);
          uint64_t v12 = v11 + 136 * v10;
          uint64_t v13 = (_BYTE *)(v12 + 36);
          uint64_t v14 = v9 + 8;
          unint64_t v15 = v203;
          if (v9 + 8 <= v203)
          {
            *(void *)((char *)v201 + v9) = *v13;
            unint64_t v15 = v203;
            uint64_t v14 = v202 + 8;
          }

          uint64_t v202 = v14;
          uint64_t v16 = v14 + 8;
          if (v14 + 8 <= v15)
          {
            *(void *)((char *)v201 + v14) = *(unsigned int *)(v11 + 136 * v10 + 32);
            unint64_t v15 = v203;
            uint64_t v16 = v202 + 8;
          }

          uint64_t v202 = v16;
          uint64_t v17 = v16 + 8;
          if (v16 + 8 <= v15)
          {
            *(void *)((char *)v201 + v16) = *(unsigned __int8 *)(v11 + 136 * v10 + 37);
            unint64_t v15 = v203;
            uint64_t v17 = v202 + 8;
          }

          uint64_t v202 = v17;
          uint64_t v18 = v17 + 8;
          if (v17 + 8 <= v15)
          {
            *(void *)((char *)v201 + v17) = *(unsigned __int8 *)(v11 + 136 * v10 + 38);
            uint64_t v18 = v202 + 8;
          }

          uint64_t v202 = v18;
          switch(*v13)
          {
            case 1:
              uint64_t v19 = v11 + 136 * v10;
              uint64_t v207 = *(void *)(v19 + 80);
              unint64_t v20 = find_entry(a4, &v207, 8uLL, 0LL);
              if (*v20 && (uint64_t v21 = *(void *)(*v20 + 32LL)) != 0) {
                uint64_t v22 = *(void *)(v21 + 8);
              }
              else {
                uint64_t v22 = 0LL;
              }
              unint64_t v71 = v203;
              uint64_t v72 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v22;
                unint64_t v71 = v203;
                uint64_t v72 = v202 + 8;
              }

              uint64_t v202 = v72;
              uint64_t v73 = v72 + 8;
              if (v72 + 8 <= v71)
              {
                *(void *)((char *)v201 + v72) = *(void *)(v11 + 136 * v10 + 88);
                unint64_t v71 = v203;
                uint64_t v73 = v202 + 8;
              }

              uint64_t v202 = v73;
              uint64_t v74 = v73 + 8;
              if (v73 + 8 <= v71)
              {
                *(void *)((char *)v201 + v73) = *(void *)(v11 + 136 * v10 + 96);
                uint64_t v74 = v202 + 8;
              }

              uint64_t v202 = v74;
              uint64_t v206 = *(void *)(v19 + 40);
              uint64_t v75 = find_entry(a4, &v206, 8uLL, 0LL);
              if (*v75 && (uint64_t v76 = *(void *)(*v75 + 32LL)) != 0) {
                uint64_t v77 = *(void *)(v76 + 8);
              }
              else {
                uint64_t v77 = 0LL;
              }
              unint64_t v83 = v203;
              uint64_t v84 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v77;
                unint64_t v83 = v203;
                uint64_t v84 = v202 + 8;
              }

              uint64_t v202 = v84;
              uint64_t v85 = v84 + 8;
              if (v84 + 8 <= v83)
              {
                *(void *)((char *)v201 + v84) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v83 = v203;
                uint64_t v85 = v202 + 8;
              }

              uint64_t v202 = v85;
              uint64_t v86 = v85 + 8;
              if (v85 + 8 <= v83)
              {
                *(void *)((char *)v201 + v85) = *(unsigned __int8 *)(v11 + 136 * v10 + 104);
                unint64_t v83 = v203;
                uint64_t v86 = v202 + 8;
              }

              uint64_t v202 = v86;
              uint64_t v87 = v86 + 8;
              if (v86 + 8 <= v83)
              {
                *(void *)((char *)v201 + v86) = *(void *)(v11 + 136 * v10 + 72);
                unint64_t v83 = v203;
                uint64_t v87 = v202 + 8;
              }

              uint64_t v202 = v87;
              uint64_t v88 = v87 + 8;
              if (v87 + 8 <= v83)
              {
                *(void *)((char *)v201 + v87) = *(unsigned __int8 *)(v12 + 106);
                uint64_t v88 = v202 + 8;
              }

              uint64_t v202 = v88;
              uint64_t v205 = *(void *)(v11 + 136 * v10 + 56);
              unint64_t v89 = find_entry(a4, &v205, 8uLL, 0LL);
              if (*v89 && (uint64_t v90 = *(void *)(*v89 + 32LL)) != 0) {
                uint64_t v91 = *(void *)(v90 + 8);
              }
              else {
                uint64_t v91 = 0LL;
              }
              unint64_t v92 = v203;
              uint64_t v93 = v202 + 8;
              if (v202 + 8 > v203) {
                goto LABEL_157;
              }
              *(void *)((char *)v201 + v202) = v91;
              goto LABEL_156;
            case 2:
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 40);
              uint64_t v23 = find_entry(a4, &v207, 8uLL, 0LL);
              if (*v23 && (uint64_t v24 = *(void *)(*v23 + 32LL)) != 0) {
                uint64_t v25 = *(void *)(v24 + 8);
              }
              else {
                uint64_t v25 = 0LL;
              }
              unint64_t v78 = v203;
              uint64_t v79 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v25;
                unint64_t v78 = v203;
                uint64_t v79 = v202 + 8;
              }

              uint64_t v202 = v79;
              uint64_t v80 = v79 + 8;
              if (v79 + 8 <= v78)
              {
                *(void *)((char *)v201 + v79) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v78 = v203;
                uint64_t v80 = v202 + 8;
              }

              uint64_t v202 = v80;
              uint64_t v81 = v80 + 8;
              if (v80 + 8 <= v78)
              {
                *(void *)((char *)v201 + v80) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v78 = v203;
                uint64_t v81 = v202 + 8;
              }

              uint64_t v202 = v81;
              uint64_t v48 = v81 + 8;
              if (v81 + 8 > v78) {
                goto LABEL_152;
              }
              uint64_t v82 = *(void *)(v11 + 136 * v10 + 56);
              goto LABEL_150;
            case 3:
              uint64_t v26 = v11 + 136 * v10;
              unint64_t v29 = *(void *)(v26 + 88);
              uint64_t v28 = (unint64_t *)(v26 + 88);
              unint64_t v27 = v29;
              uint64_t v30 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v27;
                uint64_t v30 = v202 + 8;
                unint64_t v27 = *v28;
              }

              uint64_t v202 = v30;
              if (v27)
              {
                uint64_t v31 = 0LL;
                unint64_t v32 = 0LL;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(void *)(v11 + 136 * v10 + 80) + v31), a4);
                  ++v32;
                  v31 += 16LL;
                }

                while (*v28 > v32);
                uint64_t v30 = v202;
              }

              uint64_t v33 = v30 + 8;
              unint64_t v34 = v203;
              if (v30 + 8 <= v203)
              {
                *(void *)((char *)v201 + v30) = 0LL;
                unint64_t v34 = v203;
                uint64_t v33 = v202 + 8;
              }

              uint64_t v202 = v33;
              uint64_t v35 = v33 + 8;
              if (v33 + 8 <= v34)
              {
                *(void *)((char *)v201 + v33) = *(void *)(v11 + 136 * v10 + 96);
                uint64_t v35 = v202 + 8;
              }

              uint64_t v202 = v35;
              uint64_t v207 = *(v28 - 6);
              uint64_t v36 = find_entry(a4, &v207, 8uLL, 0LL);
              if (*v36) {
                uint64_t v37 = *(void *)(*v36 + 32LL);
              }
              else {
                uint64_t v37 = 0LL;
              }
              unint64_t v94 = v203;
              uint64_t v95 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v37 + 8);
                unint64_t v94 = v203;
                uint64_t v95 = v202 + 8;
              }

              uint64_t v202 = v95;
              uint64_t v96 = v95 + 8;
              if (v95 + 8 <= v94)
              {
                *(void *)((char *)v201 + v95) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v94 = v203;
                uint64_t v96 = v202 + 8;
              }

              uint64_t v202 = v96;
              uint64_t v97 = v96 + 8;
              if (v96 + 8 <= v94)
              {
                *(void *)((char *)v201 + v96) = *(unsigned __int8 *)(v11 + 136 * v10 + 104);
                unint64_t v94 = v203;
                uint64_t v97 = v202 + 8;
              }

              uint64_t v202 = v97;
              uint64_t v98 = v97 + 8;
              if (v97 + 8 <= v94)
              {
                *(void *)((char *)v201 + v97) = *(void *)(v11 + 136 * v10 + 72);
                unint64_t v94 = v203;
                uint64_t v98 = v202 + 8;
              }

              uint64_t v202 = v98;
              uint64_t v99 = v98 + 8;
              if (v98 + 8 <= v94)
              {
                *(void *)((char *)v201 + v98) = *(unsigned __int8 *)(v12 + 106);
                uint64_t v99 = v202 + 8;
              }

              uint64_t v202 = v99;
              uint64_t v206 = *(void *)(v11 + 136 * v10 + 56);
              v100 = find_entry(a4, &v206, 8uLL, 0LL);
              if (*v100) {
                uint64_t v101 = *(void *)(*v100 + 32LL);
              }
              else {
                uint64_t v101 = 0LL;
              }
              unint64_t v92 = v203;
              uint64_t v93 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v101 + 8);
LABEL_156:
                unint64_t v92 = v203;
                uint64_t v93 = v202 + 8;
              }

LABEL_157:
              uint64_t v202 = v93;
              uint64_t v116 = v93 + 8;
              if (v93 + 8 <= v92)
              {
                *(void *)((char *)v201 + v93) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v92 = v203;
                uint64_t v116 = v202 + 8;
              }

              uint64_t v202 = v116;
              uint64_t v117 = v116 + 8;
              if (v116 + 8 > v92) {
                goto LABEL_196;
              }
              uint64_t v118 = *(unsigned __int8 *)(v12 + 105);
              goto LABEL_195;
            case 4:
              uint64_t v38 = v11 + 136 * v10;
              unint64_t v41 = *(void *)(v38 + 48);
              uint64_t v40 = (unint64_t *)(v38 + 48);
              unint64_t v39 = v41;
              uint64_t v42 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v39;
                uint64_t v42 = v202 + 8;
                unint64_t v39 = *v40;
              }

              uint64_t v202 = v42;
              if (v39)
              {
                uint64_t v43 = 0LL;
                unint64_t v44 = 0LL;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(v40 - 1) + v43), a4);
                  ++v44;
                  v43 += 16LL;
                }

                while (*v40 > v44);
                uint64_t v42 = v202;
              }

              uint64_t v45 = v42 + 8;
              unint64_t v46 = v203;
              if (v42 + 8 <= v203)
              {
                *(void *)((char *)v201 + v42) = 0LL;
                unint64_t v46 = v203;
                uint64_t v45 = v202 + 8;
              }

              uint64_t v202 = v45;
              uint64_t v47 = v45 + 8;
              if (v45 + 8 <= v46)
              {
                *(void *)((char *)v201 + v45) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v46 = v203;
                uint64_t v47 = v202 + 8;
              }

              uint64_t v202 = v47;
              uint64_t v48 = v47 + 8;
              if (v47 + 8 > v46) {
                goto LABEL_152;
              }
              *(void *)((char *)v201 + v47) = *(void *)(v11 + 136 * v10 + 56);
              goto LABEL_151;
            case 5:
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 40);
              uint64_t v49 = find_entry(a4, &v207, 8uLL, 0LL);
              if (*v49) {
                uint64_t v50 = *(void *)(*v49 + 32LL);
              }
              else {
                uint64_t v50 = 0LL;
              }
              unint64_t v102 = v203;
              uint64_t v103 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v50 + 8);
                unint64_t v102 = v203;
                uint64_t v103 = v202 + 8;
              }

              uint64_t v202 = v103;
              uint64_t v104 = v103 + 8;
              if (v103 + 8 <= v102)
              {
                *(void *)((char *)v201 + v103) = *(void *)(v11 + 136 * v10 + 48);
                uint64_t v104 = v202 + 8;
              }

              uint64_t v202 = v104;
              uint64_t v206 = *(void *)(v11 + 136 * v10 + 88);
              char v105 = find_entry(a4, &v206, 8uLL, 0LL);
              if (*v105) {
                uint64_t v106 = *(void *)(*v105 + 32LL);
              }
              else {
                uint64_t v106 = 0LL;
              }
              unint64_t v119 = v203;
              uint64_t v120 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v106 + 8);
                unint64_t v119 = v203;
                uint64_t v120 = v202 + 8;
              }

              uint64_t v202 = v120;
              uint64_t v121 = v120 + 8;
              if (v120 + 8 <= v119)
              {
                *(void *)((char *)v201 + v120) = *(void *)(v11 + 136 * v10 + 96);
                unint64_t v119 = v203;
                uint64_t v121 = v202 + 8;
              }

              uint64_t v202 = v121;
              uint64_t v122 = v121 + 8;
              if (v121 + 8 <= v119)
              {
                *(void *)((char *)v201 + v121) = *(void *)(v11 + 136 * v10 + 56);
                unint64_t v119 = v203;
                uint64_t v122 = v202 + 8;
              }

              uint64_t v202 = v122;
              uint64_t v123 = v122 + 8;
              if (v122 + 8 <= v119)
              {
                *(void *)((char *)v201 + v122) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v119 = v203;
                uint64_t v123 = v202 + 8;
              }

              uint64_t v202 = v123;
              uint64_t v124 = v123 + 8;
              if (v123 + 8 <= v119)
              {
                *(void *)((char *)v201 + v123) = *(void *)(v11 + 136 * v10 + 104);
                uint64_t v124 = v202 + 8;
              }

              uint64_t v202 = v124;
              uint64_t v205 = *(void *)(v11 + 136 * v10 + 72);
              int64x2_t v125 = find_entry(a4, &v205, 8uLL, 0LL);
              if (*v125) {
                uint64_t v126 = *(void *)(*v125 + 32LL);
              }
              else {
                uint64_t v126 = 0LL;
              }
              unint64_t v127 = v203;
              uint64_t v128 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v126 + 8);
                unint64_t v127 = v203;
                uint64_t v128 = v202 + 8;
              }

              uint64_t v202 = v128;
              uint64_t v129 = v128 + 8;
              if (v128 + 8 <= v127)
              {
                *(void *)((char *)v201 + v128) = *(void *)(v11 + 136 * v10 + 80);
                unint64_t v127 = v203;
                uint64_t v129 = v202 + 8;
              }

              uint64_t v202 = v129;
              uint64_t v130 = v129 + 8;
              if (v129 + 8 <= v127)
              {
                *(void *)((char *)v201 + v129) = *(void *)(v11 + 136 * v10 + 120);
                unint64_t v127 = v203;
                uint64_t v130 = v202 + 8;
              }

              uint64_t v202 = v130;
              uint64_t v131 = v130 + 8;
              if (v130 + 8 <= v127)
              {
                *(void *)((char *)v201 + v130) = *(void *)(v11 + 136 * v10 + 112);
                unint64_t v127 = v203;
                uint64_t v131 = v202 + 8;
              }

              uint64_t v202 = v131;
              uint64_t v132 = v131 + 8;
              if (v131 + 8 <= v127)
              {
                *(void *)((char *)v201 + v131) = *(unsigned __int8 *)(v11 + 136 * v10 + 128);
                unint64_t v127 = v203;
                uint64_t v132 = v202 + 8;
              }

              uint64_t v202 = v132;
              uint64_t v133 = v132 + 8;
              if (v132 + 8 <= v127)
              {
                *(void *)((char *)v201 + v132) = *(unsigned __int8 *)(v11 + 136 * v10 + 133);
                unint64_t v127 = v203;
                uint64_t v133 = v202 + 8;
              }

              uint64_t v202 = v133;
              uint64_t v134 = v133 + 8;
              if (v133 + 8 <= v127)
              {
                *(void *)((char *)v201 + v133) = *(unsigned __int8 *)(v11 + 136 * v10 + 132);
                unint64_t v127 = v203;
                uint64_t v134 = v202 + 8;
              }

              uint64_t v202 = v134;
              uint64_t v135 = v134 + 8;
              if (v134 + 8 <= v127)
              {
                *(void *)((char *)v201 + v134) = *(unsigned __int8 *)(v11 + 136 * v10 + 130);
                unint64_t v127 = v203;
                uint64_t v135 = v202 + 8;
              }

              uint64_t v202 = v135;
              uint64_t v116 = v135 + 8;
              if (v135 + 8 <= v127)
              {
                *(void *)((char *)v201 + v135) = *(unsigned __int8 *)(v11 + 136 * v10 + 129);
                unint64_t v127 = v203;
                uint64_t v116 = v202 + 8;
              }

              uint64_t v202 = v116;
              uint64_t v117 = v116 + 8;
              if (v116 + 8 > v127) {
                goto LABEL_196;
              }
              uint64_t v118 = *(unsigned __int8 *)(v11 + 136 * v10 + 131);
LABEL_195:
              *(void *)((char *)v201 + v116) = v118;
              uint64_t v117 = v202 + 8;
LABEL_196:
              uint64_t v202 = v117;
              break;
            case 6:
              uint64_t v51 = v11 + 136 * v10;
              unint64_t v54 = *(void *)(v51 + 48);
              uint64_t v53 = (unint64_t *)(v51 + 48);
              unint64_t v52 = v54;
              uint64_t v55 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v52;
                uint64_t v55 = v202 + 8;
                unint64_t v52 = *v53;
              }

              uint64_t v202 = v55;
              if (v52)
              {
                uint64_t v56 = 0LL;
                unint64_t v57 = 0LL;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(v53 - 1) + v56), a4);
                  ++v57;
                  v56 += 16LL;
                }

                while (*v53 > v57);
                uint64_t v55 = v202;
              }

              uint64_t v58 = v11 + 136 * v10;
              unint64_t v61 = *(void *)(v58 + 96);
              unint64_t v60 = (unint64_t *)(v58 + 96);
              unint64_t v59 = v61;
              uint64_t v62 = v55 + 8;
              if (v55 + 8 <= v203)
              {
                *(void *)((char *)v201 + v55) = v59;
                uint64_t v62 = v202 + 8;
                unint64_t v59 = *v60;
              }

              uint64_t v202 = v62;
              if (v59)
              {
                uint64_t v63 = 0LL;
                unint64_t v64 = 0LL;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(void *)(v11 + 136 * v10 + 88) + v63), a4);
                  ++v64;
                  v63 += 16LL;
                }

                while (*v60 > v64);
                uint64_t v62 = v202;
              }

              uint64_t v65 = v62 + 8;
              unint64_t v66 = v203;
              if (v62 + 8 <= v203)
              {
                *(void *)((char *)v201 + v62) = *(void *)(v11 + 136 * v10 + 56);
                unint64_t v66 = v203;
                uint64_t v65 = v202 + 8;
              }

              uint64_t v202 = v65;
              uint64_t v67 = v65 + 8;
              if (v65 + 8 <= v66)
              {
                *(void *)((char *)v201 + v65) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v66 = v203;
                uint64_t v67 = v202 + 8;
              }

              uint64_t v202 = v67;
              uint64_t v68 = v67 + 8;
              if (v67 + 8 <= v66)
              {
                *(void *)((char *)v201 + v67) = *(void *)(v11 + 136 * v10 + 104);
                uint64_t v68 = v202 + 8;
              }

              uint64_t v202 = v68;
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 72);
              unint64_t v69 = find_entry(a4, &v207, 8uLL, 0LL);
              if (*v69) {
                uint64_t v70 = *(void *)(*v69 + 32LL);
              }
              else {
                uint64_t v70 = 0LL;
              }
              unint64_t v107 = v203;
              uint64_t v108 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v70 + 8);
                unint64_t v107 = v203;
                uint64_t v108 = v202 + 8;
              }

              uint64_t v202 = v108;
              uint64_t v109 = v108 + 8;
              if (v108 + 8 <= v107)
              {
                *(void *)((char *)v201 + v108) = *(void *)(v11 + 136 * v10 + 80);
                unint64_t v107 = v203;
                uint64_t v109 = v202 + 8;
              }

              uint64_t v202 = v109;
              uint64_t v110 = v109 + 8;
              if (v109 + 8 <= v107)
              {
                *(void *)((char *)v201 + v109) = *(void *)(v11 + 136 * v10 + 120);
                unint64_t v107 = v203;
                uint64_t v110 = v202 + 8;
              }

              uint64_t v202 = v110;
              uint64_t v111 = v110 + 8;
              if (v110 + 8 <= v107)
              {
                *(void *)((char *)v201 + v110) = *(unsigned __int8 *)(v11 + 136 * v10 + 128);
                unint64_t v107 = v203;
                uint64_t v111 = v202 + 8;
              }

              uint64_t v202 = v111;
              uint64_t v112 = v111 + 8;
              if (v111 + 8 <= v107)
              {
                *(void *)((char *)v201 + v111) = *(unsigned __int8 *)(v11 + 136 * v10 + 133);
                unint64_t v107 = v203;
                uint64_t v112 = v202 + 8;
              }

              uint64_t v202 = v112;
              uint64_t v113 = v112 + 8;
              if (v112 + 8 <= v107)
              {
                *(void *)((char *)v201 + v112) = *(unsigned __int8 *)(v11 + 136 * v10 + 132);
                unint64_t v107 = v203;
                uint64_t v113 = v202 + 8;
              }

              uint64_t v202 = v113;
              uint64_t v114 = v113 + 8;
              if (v113 + 8 <= v107)
              {
                *(void *)((char *)v201 + v113) = *(void *)(v11 + 136 * v10 + 112);
                unint64_t v107 = v203;
                uint64_t v114 = v202 + 8;
              }

              uint64_t v202 = v114;
              uint64_t v115 = v114 + 8;
              if (v114 + 8 <= v107)
              {
                *(void *)((char *)v201 + v114) = *(unsigned __int8 *)(v11 + 136 * v10 + 130);
                unint64_t v107 = v203;
                uint64_t v115 = v202 + 8;
              }

              uint64_t v202 = v115;
              uint64_t v81 = v115 + 8;
              if (v115 + 8 <= v107)
              {
                *(void *)((char *)v201 + v115) = *(unsigned __int8 *)(v11 + 136 * v10 + 129);
                unint64_t v107 = v203;
                uint64_t v81 = v202 + 8;
              }

              uint64_t v202 = v81;
              uint64_t v48 = v81 + 8;
              if (v81 + 8 > v107) {
                goto LABEL_152;
              }
              uint64_t v82 = *(unsigned __int8 *)(v11 + 136 * v10 + 131);
LABEL_150:
              *(void *)((char *)v201 + v81) = v82;
LABEL_151:
              uint64_t v48 = v202 + 8;
LABEL_152:
              uint64_t v202 = v48;
              break;
            default:
              break;
          }

          WriteDynamicBufferString(&v201, *(const char **)v12);
          uint64_t v207 = *(void *)(v11 + 136 * v10 + 8);
          char v136 = find_entry(a4, &v207, 8uLL, 0LL);
          if (*v136 && (uint64_t v137 = *(void *)(*v136 + 32LL)) != 0) {
            uint64_t v138 = *(void *)(v137 + 8);
          }
          else {
            uint64_t v138 = 0LL;
          }
          unint64_t v139 = v203;
          uint64_t v140 = v202 + 8;
          if (v202 + 8 <= v203)
          {
            *(void *)((char *)v201 + v202) = v138;
            unint64_t v139 = v203;
            uint64_t v140 = v202 + 8;
          }

          uint64_t v202 = v140;
          uint64_t v141 = v140 + 8;
          if (v140 + 8 <= v139)
          {
            *(void *)((char *)v201 + v140) = *(void *)(v11 + 136 * v10 + 16);
            unint64_t v139 = v203;
            uint64_t v141 = v202 + 8;
          }

          uint64_t v202 = v141;
          uint64_t v142 = v141 + 8;
          if (v141 + 8 <= v139)
          {
            *(void *)((char *)v201 + v141) = *(unsigned int *)(v11 + 136 * v10 + 24);
            unint64_t v139 = v203;
            uint64_t v142 = v202 + 8;
          }

          uint64_t v202 = v142;
          uint64_t v9 = v142 + 8;
          if (v142 + 8 <= v139)
          {
            *(void *)((char *)v201 + v142) = *(unsigned int *)(v11 + 136 * v10 + 28);
            uint64_t v9 = v202 + 8;
          }

          uint64_t v202 = v9;
          ++v10;
        }

        while (*((void *)a1 + 2) > v10);
        a3 = v203;
      }

      unint64_t v143 = v9 + 4;
      if (v9 + 4 <= a3)
      {
        *(_DWORD *)((char *)v201 + v9) = *((_DWORD *)a1 + 8);
        a3 = v203;
        unint64_t v143 = v202 + 4;
      }

      uint64_t v202 = v143;
      if (a3 > v143)
      {
        if (a3 - v143 >= 4) {
          size_t v144 = 4LL;
        }
        else {
          size_t v144 = a3 - v143;
        }
        bzero((char *)v201 + v143, v144);
        unint64_t v143 = v202;
        a3 = v203;
      }

      unint64_t v145 = v143 + 4;
      uint64_t v202 = v143 + 4;
      unint64_t v146 = v143 + 8;
      if (v146 <= a3)
      {
        *(_DWORD *)((char *)v201 + v145) = *((_DWORD *)a1 + 6);
        a3 = v203;
        unint64_t v146 = v202 + 4;
      }

      uint64_t v202 = v146;
      if (a3 > v146)
      {
        if (a3 - v146 >= 4) {
          size_t v147 = 4LL;
        }
        else {
          size_t v147 = a3 - v146;
        }
        bzero((char *)v201 + v146, v147);
        unint64_t v146 = v202;
        a3 = v203;
      }

      unint64_t v148 = v146 + 4;
      uint64_t v202 = v146 + 4;
      unint64_t v149 = v146 + 12;
      if (v149 <= a3)
      {
        *(void *)((char *)v201 + v148) = a1[37];
        a3 = v203;
        unint64_t v149 = v202 + 8;
      }

      uint64_t v202 = v149;
      uint64_t v150 = v149 + 8;
      if (v149 + 8 <= a3)
      {
        *(void *)((char *)v201 + v149) = a1[36];
        a3 = v203;
        uint64_t v150 = v202 + 8;
      }

      uint64_t v202 = v150;
      uint64_t result = v150 + 8;
      if (v150 + 8 <= a3)
      {
        *(void *)((char *)v201 + v150) = *((unsigned int *)a1 + 7);
        return v202 + 8;
      }

      break;
  }

  return result;
}

void *SaveDYMTLMotionKeyframeData(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v12 = *a2;
  uint64_t result = find_entry(a3, &v12, 8uLL, 0LL);
  if (*result && (uint64_t v6 = *(void *)(*result + 32LL)) != 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v9 = a1[1];
  unint64_t v8 = a1[2];
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v8)
  {
    *(void *)(*a1 + v9) = v7;
    unint64_t v8 = a1[2];
    uint64_t v10 = a1[1] + 8LL;
  }

  a1[1] = v10;
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v8)
  {
    *(void *)(*a1 + v10) = a2[1];
    uint64_t v11 = a1[1] + 8LL;
  }

  a1[1] = v11;
  return result;
}

uint64_t DecodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (char *)(a1 + 16);
    do
    {
      char v8 = *v7;
      uint64_t v9 = *((void *)v7 + 1);
      v7 += 16;
      uint64_t v10 = *(void *)(a3 + 328);
      uint64_t v11 = v9;
      for (uint64_t i = v10; v11; --v11)
      {
        if (a4)
        {
          uint64_t v13 = *((void *)v7 + 2);
          *(_OWORD *)uint64_t i = *(_OWORD *)v7;
          *(void *)(i + 16) = v13;
          uint64_t i = *(void *)(a3 + 328);
        }

        v7 += 24;
        i += 24LL;
        *(void *)(a3 + 328) = i;
      }

      uint64_t v14 = *(void *)(a3 + 256);
      if ((a4 & 1) != 0)
      {
        *(_BYTE *)uint64_t v14 = v8;
        *(void *)(v14 + 8) = v9;
        *(void *)(v14 + 16) = v10;
        uint64_t v14 = *(void *)(a3 + 256);
      }

      *(void *)(a3 + 256) = v14 + 24;
      ++v6;
    }

    while (v6 != result);
  }

  return result;
}

uint64_t EncodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (a4 >= 8)
  {
    *a3 = 81LL;
    if (a4 >= 0x10) {
      a3[1] = a2;
    }
  }

  if (!a2) {
    return 16LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = 16LL;
  do
  {
    if (v5 + 8 <= a4) {
      *(void *)((char *)a3 + v5) = *(unsigned __int8 *)(a1 + 24 * v4);
    }
    uint64_t v6 = a1 + 24 * v4;
    unint64_t v9 = *(void *)(v6 + 8);
    uint64_t v7 = (unint64_t *)(v6 + 8);
    unint64_t v8 = v9;
    if (v5 + 16 <= a4)
    {
      *(void *)((char *)a3 + v5 + 8) = v8;
      unint64_t v8 = *v7;
    }

    if (v8)
    {
      uint64_t v10 = 0LL;
      unint64_t v11 = 0LL;
      uint64_t v12 = (char *)a3 + v5 + 16;
      do
      {
        uint64_t v13 = *(void *)(a1 + 24 * v4 + 16);
        if (v5 + v10 + 24 <= a4) {
          *(void *)&v12[v10] = *(void *)(v13 + v10);
        }
        if (v5 + v10 + 32 <= a4) {
          *(void *)&v12[v10 + 8] = *(void *)(v13 + v10 + 8);
        }
        if (v5 + v10 + 40 <= a4) {
          *(void *)&v12[v10 + 16] = *(void *)(v13 + v10 + 16);
        }
        ++v11;
        v10 += 24LL;
      }

      while (*v7 > v11);
      v5 += v10 + 16;
    }

    else
    {
      v5 += 16LL;
    }

    ++v4;
  }

  while (v4 != a2);
  return v5;
}

uint64_t DecodeDYMTLTextureMipmapInfo(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned __int8 *)(result + 8);
  uint64_t v5 = *(void *)(a3 + 248);
  *(void *)(a3 + 248) = v5 + 16;
  uint64_t v6 = *(void *)(a3 + 352);
  *(void *)(a3 + 352) = v6 + 16 * v4;
  if (a4)
  {
    *(_BYTE *)(v5 + 8) = v4;
    if (v4) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0LL;
    }
    *(void *)uint64_t v5 = v7;
    if (v4)
    {
      unint64_t v8 = (_DWORD *)(v6 + 8);
      unint64_t v9 = (uint64_t *)(result + 40);
      do
      {
        *(v8 - 2) = *(v9 - 2);
        *(v8 - 1) = *(v9 - 1);
        uint64_t v10 = *v9;
        v9 += 4;
        *unint64_t v8 = v10;
        v8 += 4;
        --v4;
      }

      while (v4);
    }
  }

  return result;
}

uint64_t EncodeDYMTLTextureMipmapInfo2(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 > 7)
  {
    *a2 = 81LL;
    uint64_t v3 = (unsigned __int8 *)(a1 + 1);
    uint64_t v4 = *((unsigned __int8 *)a1 + 8);
    if (a3 < 0x10) {
      goto LABEL_6;
    }
    a2[1] = v4;
  }

  else
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 1);
  }

  LODWORD(v4) = *v3;
LABEL_6:
  if (!(_DWORD)v4) {
    return 16LL;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = a2 + 5;
  unint64_t v8 = 24LL;
  do
  {
    if (v8 <= a3) {
      v7[v8 / 8 - 6] = v6;
    }
    uint64_t v9 = *a1;
    if (v8 + 8 <= a3)
    {
      a2[v8 / 8] = *(unsigned int *)(v9 + v5);
      uint64_t v9 = *a1;
    }

    if (v8 + 16 <= a3)
    {
      v7[v8 / 8 - 4] = *(unsigned int *)(v9 + v5 + 4);
      uint64_t v9 = *a1;
    }

    if (v8 + 24 <= a3) {
      v7[v8 / 8 - 3] = *(unsigned int *)(v9 + v5 + 8);
    }
    ++v6;
    v8 += 32LL;
    v5 += 16LL;
  }

  while (v6 < *v3);
  return v8 - 8;
}

uint64_t EncodeDYMTLStitchedLibraryDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v33 = a2;
  uint64_t v34 = 0LL;
  unint64_t v35 = a3;
  if (a3 < 8 || (*a2 = 81LL, a3 < 0x10) || (a2[1] = 0LL, a3 < 0x18) || (a2[2] = 0LL, a3 <= 0x1F))
  {
    unint64_t v6 = (unsigned __int16 *)(a1 + 2);
LABEL_6:
    LODWORD(v7) = *v6;
    goto LABEL_7;
  }

  a2[3] = *((unsigned __int8 *)a1 + 20);
  unint64_t v6 = (unsigned __int16 *)(a1 + 2);
  uint64_t v7 = *((unsigned __int16 *)a1 + 8);
  if (a3 >= 0x28)
  {
    a2[4] = v7;
    goto LABEL_6;
  }

void EncodeDYMTLFunctionStitchingFunctionNode(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v6 = v4 + 8;
  if (v4 + 8 <= v5)
  {
    *(void *)(*a1 + v4) = *a2;
    unint64_t v5 = a1[2];
    uint64_t v6 = a1[1] + 8LL;
  }

  a1[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v5)
  {
    *(void *)(*a1 + v6) = *((void *)a2 + 4);
    uint64_t v7 = a1[1] + 8LL;
  }

  a1[1] = v7;
  if (*a2 == 2)
  {
    uint64_t v8 = v7 + 8;
    if ((unint64_t)(v7 + 8) <= a1[2])
    {
      *(void *)(*a1 + v7) = a2[44];
      uint64_t v8 = a1[1] + 8LL;
    }

    a1[1] = v8;
  }

  WriteDynamicBufferString(a1, *((const char **)a2 + 1));
  uint64_t v9 = a1[1];
  uint64_t v10 = v9 + 8;
  if ((unint64_t)(v9 + 8) <= a1[2])
  {
    *(void *)(*a1 + v9) = *((unsigned __int16 *)a2 + 20);
    uint64_t v10 = a1[1] + 8LL;
  }

  a1[1] = v10;
  if (*((_WORD *)a2 + 20))
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    do
    {
      uint64_t v13 = *((void *)a2 + 2);
      uint64_t v14 = *(unsigned __int8 *)(v13 + v11);
      switch(*(_BYTE *)(v13 + v11))
      {
        case 1:
        case 2:
        case 0xC:
          EncodeDYMTLFunctionStitchingFunctionNode(a1);
          goto LABEL_40;
        case 3:
          uint64_t v23 = a1[1];
          unint64_t v22 = a1[2];
          uint64_t v24 = v23 + 8;
          if (v23 + 8 <= v22)
          {
            *(void *)(*a1 + v23) = 3LL;
            unint64_t v22 = a1[2];
            uint64_t v24 = a1[1] + 8LL;
          }

          a1[1] = v24;
          uint64_t v25 = v24 + 8;
          if (v24 + 8 <= v22)
          {
            *(void *)(*a1 + v24) = *(unsigned __int16 *)(v13 + v11 + 12);
            uint64_t v25 = a1[1] + 8LL;
          }

          a1[1] = v25;
          goto LABEL_40;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          uint64_t v16 = a1[1];
          unint64_t v15 = a1[2];
          uint64_t v17 = v16 + 8;
          if (v16 + 8 <= v15)
          {
            *(void *)(*a1 + v16) = v14;
            unint64_t v15 = a1[2];
            uint64_t v17 = a1[1] + 8LL;
          }

          a1[1] = v17;
          uint64_t v18 = v17 + 8;
          if (v17 + 8 > v15) {
            goto LABEL_19;
          }
          *(void *)(*a1 + v17) = *(unsigned __int16 *)(v13 + v11 + 12);
          goto LABEL_18;
        case 5:
          uint64_t v27 = a1[1];
          unint64_t v26 = a1[2];
          uint64_t v28 = v27 + 8;
          if (v27 + 8 <= v26)
          {
            *(void *)(*a1 + v27) = 5LL;
            unint64_t v26 = a1[2];
            uint64_t v28 = a1[1] + 8LL;
          }

          a1[1] = v28;
          uint64_t v29 = v13 + v11;
          uint64_t v30 = v28 + 8;
          if (v28 + 8 <= v26)
          {
            *(void *)(*a1 + v28) = *(unsigned __int16 *)(v29 + 12);
            unint64_t v26 = a1[2];
            uint64_t v30 = a1[1] + 8LL;
          }

          a1[1] = v30;
          uint64_t v31 = v30 + 8;
          if (v30 + 8 <= v26)
          {
            *(void *)(*a1 + v30) = *(unsigned int *)(v29 + 8);
            unint64_t v26 = a1[2];
            uint64_t v31 = a1[1] + 8LL;
          }

          a1[1] = v31;
          uint64_t v20 = v31 + 8;
          if (v31 + 8 > v26) {
            goto LABEL_39;
          }
          *(void *)(*a1 + v31) = *(unsigned __int8 *)(v13 + v11 + 14);
          break;
        case 0xA:
        case 0xB:
          uint64_t v19 = a1[1];
          uint64_t v20 = v19 + 8;
          *(void *)(*a1 + v19) = v14;
          break;
        default:
          uint64_t v21 = a1[1];
          uint64_t v18 = v21 + 8;
          if ((unint64_t)(v21 + 8) <= a1[2])
          {
            *(void *)(*a1 + v21) = 0LL;
LABEL_18:
            uint64_t v18 = a1[1] + 8LL;
          }

LABEL_19:
          a1[1] = v18;
          goto LABEL_40;
      }

      uint64_t v20 = a1[1] + 8LL;
LABEL_39:
      a1[1] = v20;
LABEL_40:
      ++v12;
      v11 += 48LL;
    }

    while (v12 < *((unsigned __int16 *)a2 + 20));
    uint64_t v10 = a1[1];
  }

  uint64_t v32 = v10 + 8;
  if ((unint64_t)(v10 + 8) <= a1[2])
  {
    *(void *)(*a1 + v10) = *((unsigned __int16 *)a2 + 21);
    uint64_t v32 = a1[1] + 8LL;
  }

  a1[1] = v32;
  if (*((_WORD *)a2 + 21))
  {
    uint64_t v33 = 0LL;
    unint64_t v34 = 0LL;
    do
    {
      EncodeDYMTLFunctionStitchingFunctionNode(a1);
      ++v34;
      v33 += 48LL;
    }

    while (v34 < *((unsigned __int16 *)a2 + 21));
  }

  v18->nelts = 0;
  uint64_t v32 = *(void *)(*(void *)(a1 + 568) + 24LL);
  uint64_t v33 = *(_DWORD *)(v32 + 12);
  if (v33 >= 1)
  {
    for (uint64_t i = 0LL; i < v33; ++i)
    {
      unint64_t v35 = *(void *)(*(void *)(*(void *)(v32 + 24) + 8 * i) + 48LL);
      if (v35)
      {
        uint64_t v36 = *(void *)(v35 + 16);
        if (v36)
        {
          *(void *)apr_array_push(v18) = v36;
          uint64_t v33 = *(_DWORD *)(v32 + 12);
        }
      }
    }

    uint64_t v37 = v18->nelts;
    if ((int)v37 > 0)
    {
      qsort(v18->elts, v37, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v116[0] = v8;
      v116[1] = 1LL;
      uint64_t v38 = (uint64_t *)v18->elts;
      unint64_t v39 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v38, v39, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v38, (const void *)v39);
      uint64_t v120 = v125;
      uint64_t v121 = v126;
      uint64_t v122 = v127;
      uint64_t v118 = *(_OWORD *)__s;
      unint64_t v119 = v124;
      uint64_t v40 = v18->nelts;
      v116[2] = &v118;
      v116[3] = v40;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v116,  v9,  0x100000uLL,  0LL,  0LL);
      unint64_t v41 = *v9;
      if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v43 = v9;
        uint64_t v42 = *v9;
        do
        {
          uint64_t v43 = (unsigned int *)((char *)v43 + v41);
          unint64_t v41 = *v43;
          v42 += v41;
        }

        while ((*((_BYTE *)v43 + 33) & 0x20) == 0);
      }

      else
      {
        uint64_t v42 = *v9;
      }

      fbstream_write((uint64_t)v10, (uint64_t)v9, v42);
    }
  }

  v18->nelts = 0;
  unint64_t v44 = *(void *)(a1 + 568);
  uint64_t v45 = *(void *)(v44 + 32);
  unint64_t v46 = *(_DWORD *)(v45 + 12);
  if (v46 >= 1)
  {
    uint64_t v47 = 0LL;
    while (1)
    {
      uint64_t v48 = *(void *)(*(void *)(v45 + 24) + 8 * v47);
      uint64_t v49 = *(void *)(v48 + 48);
      if (v49)
      {
        uint64_t v50 = *(void *)(v49 + 1280);
        if (!v50) {
          goto LABEL_39;
        }
      }

      else
      {
        uint64_t v51 = *(void *)(v48 + 72);
        if (!v51) {
          goto LABEL_39;
        }
        uint64_t v50 = *(void *)(v51 + 384);
        if (!v50) {
          goto LABEL_39;
        }
      }

      *(void *)apr_array_push(v18) = v50;
      unint64_t v46 = *(_DWORD *)(v45 + 12);
LABEL_39:
      if (++v47 >= v46)
      {
        unint64_t v44 = *(void *)(a1 + 568);
        break;
      }
    }
  }

  unint64_t v52 = *(void *)(v44 + 40);
  uint64_t v53 = *(_DWORD *)(v52 + 12);
  if (v53 >= 1)
  {
    for (j = 0LL; j < v53; ++j)
    {
      uint64_t v55 = *(void *)(*(void *)(*(void *)(v52 + 24) + 8 * j) + 104LL);
      if (v55)
      {
        *(void *)apr_array_push(v18) = v55;
        uint64_t v53 = *(_DWORD *)(v52 + 12);
      }
    }
  }

  uint64_t v56 = v18->nelts;
  if ((int)v56 > 0)
  {
    qsort(v18->elts, v56, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
    v115[0] = v8;
    v115[1] = 4LL;
    unint64_t v57 = (uint64_t *)v18->elts;
    uint64_t v58 = v18->elt_size * (uint64_t)v18->nelts;
    HashBytes(v57, v58, __s);
    GTMTLCaptureState_storePointer((uint64_t)a2, __s, v57, (const void *)v58);
    uint64_t v120 = v125;
    uint64_t v121 = v126;
    uint64_t v122 = v127;
    uint64_t v118 = *(_OWORD *)__s;
    unint64_t v119 = v124;
    unint64_t v59 = v18->nelts;
    v115[2] = &v118;
    v115[3] = v59;
    DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v115,  v9,  0x100000uLL,  0LL,  0LL);
    unint64_t v60 = *v9;
    if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
    {
      uint64_t v62 = v9;
      unint64_t v61 = *v9;
      do
      {
        uint64_t v62 = (unsigned int *)((char *)v62 + v60);
        unint64_t v60 = *v62;
        v61 += v60;
      }

      while ((*((_BYTE *)v62 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v61 = *v9;
    }

    fbstream_write((uint64_t)v10, (uint64_t)v9, v61);
  }

  v18->nelts = 0;
  uint64_t v63 = *(void *)(*(void *)(a1 + 568) + 48LL);
  unint64_t v64 = *(_DWORD *)(v63 + 12);
  if (v64 >= 1)
  {
    for (k = 0LL; k < v64; ++k)
    {
      unint64_t v66 = *(uint64_t **)(*(void *)(*(void *)(v63 + 24) + 8 * k) + 104LL);
      if (v66 && *v66)
      {
        uint64_t v67 = *v66;
        *(void *)apr_array_push(v18) = v67;
        unint64_t v64 = *(_DWORD *)(v63 + 12);
      }
    }

    uint64_t v68 = v18->nelts;
    if ((int)v68 > 0)
    {
      qsort(v18->elts, v68, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v114[0] = v8;
      v114[1] = 5LL;
      unint64_t v69 = (uint64_t *)v18->elts;
      uint64_t v70 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v69, v70, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v69, (const void *)v70);
      uint64_t v120 = v125;
      uint64_t v121 = v126;
      uint64_t v122 = v127;
      uint64_t v118 = *(_OWORD *)__s;
      unint64_t v119 = v124;
      unint64_t v71 = v18->nelts;
      v114[2] = &v118;
      v114[3] = v71;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v114,  v9,  0x100000uLL,  0LL,  0LL);
      uint64_t v72 = *v9;
      if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v74 = v9;
        uint64_t v73 = *v9;
        do
        {
          uint64_t v74 = (unsigned int *)((char *)v74 + v72);
          uint64_t v72 = *v74;
          v73 += v72;
        }

        while ((*((_BYTE *)v74 + 33) & 0x20) == 0);
      }

      else
      {
        uint64_t v73 = *v9;
      }

      fbstream_write((uint64_t)v10, (uint64_t)v9, v73);
    }
  }

  v18->nelts = 0;
  uint64_t v75 = *(void *)(*(void *)(a1 + 568) + 56LL);
  uint64_t v76 = *(_DWORD *)(v75 + 12);
  if (v76 >= 1)
  {
    for (m = 0LL; m < v76; ++m)
    {
      unint64_t v78 = *(void *)(*(void *)(*(void *)(v75 + 24) + 8 * m) + 104LL);
      if (v78)
      {
        uint64_t v79 = *(void *)(v78 + 8);
        if (v79)
        {
          *(void *)apr_array_push(v18) = v79;
          uint64_t v76 = *(_DWORD *)(v75 + 12);
        }
      }
    }

    uint64_t v80 = v18->nelts;
    if ((int)v80 > 0)
    {
      qsort(v18->elts, v80, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v113[0] = v8;
      v113[1] = 6LL;
      uint64_t v81 = (uint64_t *)v18->elts;
      uint64_t v82 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v81, v82, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v81, (const void *)v82);
      uint64_t v120 = v125;
      uint64_t v121 = v126;
      uint64_t v122 = v127;
      uint64_t v118 = *(_OWORD *)__s;
      unint64_t v119 = v124;
      unint64_t v83 = v18->nelts;
      v113[2] = &v118;
      v113[3] = v83;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v113,  v9,  0x100000uLL,  0LL,  0LL);
      uint64_t v84 = *v9;
      if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v86 = v9;
        uint64_t v85 = *v9;
        do
        {
          uint64_t v86 = (unsigned int *)((char *)v86 + v84);
          uint64_t v84 = *v86;
          v85 += v84;
        }

        while ((*((_BYTE *)v86 + 33) & 0x20) == 0);
      }

      else
      {
        uint64_t v85 = *v9;
      }

      fbstream_write((uint64_t)v10, (uint64_t)v9, v85);
    }
  }

  v18->nelts = 0;
  uint64_t v87 = *(void *)(*(void *)(a1 + 568) + 64LL);
  uint64_t v88 = *(_DWORD *)(v87 + 12);
  if (v88 >= 1)
  {
    for (n = 0LL; n < v88; ++n)
    {
      uint64_t v90 = *(uint64_t **)(*(void *)(*(void *)(v87 + 24) + 8 * n) + 104LL);
      if (v90 && *v90)
      {
        uint64_t v91 = *v90;
        *(void *)apr_array_push(v18) = v91;
        uint64_t v88 = *(_DWORD *)(v87 + 12);
      }
    }

    unint64_t v92 = v18->nelts;
    if ((int)v92 > 0)
    {
      qsort(v18->elts, v92, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v112[0] = v8;
      v112[1] = 7LL;
      uint64_t v93 = (uint64_t *)v18->elts;
      unint64_t v94 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v93, v94, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v93, (const void *)v94);
      uint64_t v120 = v125;
      uint64_t v121 = v126;
      uint64_t v122 = v127;
      uint64_t v118 = *(_OWORD *)__s;
      unint64_t v119 = v124;
      uint64_t v95 = v18->nelts;
      v112[2] = &v118;
      v112[3] = v95;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v112,  v9,  0x100000uLL,  0LL,  0LL);
      uint64_t v96 = *v9;
      if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v98 = v9;
        uint64_t v97 = *v9;
        do
        {
          uint64_t v98 = (unsigned int *)((char *)v98 + v96);
          uint64_t v96 = *v98;
          v97 += v96;
        }

        while ((*((_BYTE *)v98 + 33) & 0x20) == 0);
      }

      else
      {
        uint64_t v97 = *v9;
      }

      fbstream_write((uint64_t)v10, (uint64_t)v9, v97);
    }
  }

  v18->nelts = 0;
  uint64_t v99 = *(void *)(*(void *)(a1 + 568) + 72LL);
  v100 = *(_DWORD *)(v99 + 12);
  if (v100 >= 1)
  {
    for (iuint64_t i = 0LL; ii < v100; ++ii)
    {
      unint64_t v102 = *(void *)(*(void *)(*(void *)(v99 + 24) + 8 * ii) + 152LL);
      if (v102)
      {
        *(void *)apr_array_push(v18) = v102;
        v100 = *(_DWORD *)(v99 + 12);
      }
    }

    uint64_t v103 = v18->nelts;
    if ((int)v103 > 0)
    {
      qsort(v18->elts, v103, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v111[0] = v8;
      v111[1] = 8LL;
      uint64_t v104 = (uint64_t *)v18->elts;
      char v105 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v104, v105, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v104, (const void *)v105);
      uint64_t v120 = v125;
      uint64_t v121 = v126;
      uint64_t v122 = v127;
      uint64_t v118 = *(_OWORD *)__s;
      unint64_t v119 = v124;
      uint64_t v106 = v18->nelts;
      v111[2] = &v118;
      v111[3] = v106;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v111,  v9,  0x100000uLL,  0LL,  0LL);
      unint64_t v107 = *v9;
      if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v109 = v9;
        uint64_t v108 = *v9;
        do
        {
          uint64_t v109 = (unsigned int *)((char *)v109 + v107);
          unint64_t v107 = *v109;
          v108 += v107;
        }

        while ((*((_BYTE *)v109 + 33) & 0x20) == 0);
      }

      else
      {
        uint64_t v108 = *v9;
      }

      fbstream_write((uint64_t)v10, (uint64_t)v9, v108);
    }
  }

  apr_pool_cleanup_kill(*v10, v10, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v10);
}

size_t DecodeDYMTLStitchedLibraryDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v8 = (_DWORD *)(result + 8);
  unsigned int v9 = *(_DWORD *)result;
  if (*(_DWORD *)result < 0x4Fu)
  {
    char v10 = 4;
  }

  else
  {
    uint64_t v8 = (_DWORD *)(result + 32);
    char v10 = *(_BYTE *)(result + 24);
  }

  int v12 = *v8;
  uint64_t v11 = (const char *)(v8 + 2);
  unint64_t v59 = v11;
  __int16 v54 = v12;
  int v55 = (unsigned __int16)v12;
  if ((_WORD)v12)
  {
    char v52 = v10;
    int v13 = 0;
    uint64_t v53 = a3[45];
    while (1)
    {
      uint64_t v14 = v59;
      unint64_t v15 = v59 + 8;
      char v16 = *v59;
      unint64_t v59 = v15;
      uint64_t result = strlen(v15);
      uint64_t v17 = &v15[(result & 0xFFFFFFFFFFFFFFF8LL) + 8];
      unint64_t v59 = v17;
      int v18 = *((unsigned __int8 *)v14 + 8);
      uint64_t v19 = v14[8] ? v15 : 0LL;
      if (!v18) {
        break;
      }
      uint64_t result = strlen(v19);
      uint64_t v20 = a3[52];
      size_t v21 = result + 1;
      if (result == -1LL) {
        goto LABEL_13;
      }
      unint64_t v22 = (void *)a3[52];
LABEL_14:
      a3[52] = v20 + v21;
      if (a4)
      {
        uint64_t result = (size_t)memcpy(v22, v19, v21);
        uint64_t v17 = v59;
      }

      uint64_t v25 = *(void *)v17;
      uint64_t v23 = v17 + 8;
      __int16 v24 = v25;
      unint64_t v59 = v23;
      unint64_t v26 = (_OWORD *)a3[46];
      a3[46] = &v26[3 * (unsigned __int16)v25];
      int v27 = (unsigned __int16)v25;
      if ((_WORD)v25)
      {
        uint64_t v28 = v26;
        do
        {
          int v29 = *(unsigned __int8 *)v59;
          v59 += 8;
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v29, v9, (uint64_t)a3, a4);
          if (a4)
          {
            __int128 v30 = v56;
            __int128 v31 = v58;
            v28[1] = v57;
            v28[2] = v31;
            *uint64_t v28 = v30;
            v28 += 3;
          }

          --v27;
        }

        while (v27);
        uint64_t v23 = v59;
      }

      else
      {
        unint64_t v26 = 0LL;
      }

      int v34 = *(unsigned __int8 *)v23;
      uint64_t v33 = v23 + 8;
      int v32 = v34;
      unint64_t v59 = v33;
      if (v34)
      {
        unint64_t v35 = (_OWORD *)a3[46];
        a3[46] = v35 + 3;
        uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v32, v9, (uint64_t)a3, a4);
        if (a4)
        {
          __int128 v36 = v57;
          _OWORD *v35 = v56;
          v35[1] = v36;
          v35[2] = v58;
        }

        uint64_t v33 = v59;
      }

      else
      {
        unint64_t v35 = 0LL;
      }

      int v37 = *(_DWORD *)v33;
      unint64_t v59 = v33 + 8;
      uint64_t v38 = a3[47];
      int v39 = (unsigned __int16)v37;
      if ((_WORD)v37)
      {
        uint64_t v40 = v38 + 8;
        unint64_t v41 = v33 + 16;
        do
        {
          uint64_t v42 = *((void *)v41 - 1);
          unint64_t v59 = v41;
          if (a4) {
            *(_BYTE *)(v40 - 8) = v42;
          }
          v41 += 8;
          a3[47] = v40;
          v40 += 8LL;
          --v39;
        }

        while (v39);
      }

      uint64_t v43 = a3[45];
      if ((a4 & 1) != 0)
      {
        *(void *)uint64_t v43 = v22;
        *(void *)(v43 + 8) = v26;
        *(void *)(v43 + 16) = v35;
        *(void *)(v43 + 24) = v38;
        *(_WORD *)(v43 + 32) = v24;
        *(_WORD *)(v43 + 34) = v37;
        *(_BYTE *)(v43 + 36) = v16;
        *(_WORD *)(v43 + 37) = 0;
        *(_BYTE *)(v43 + 39) = 0;
        uint64_t v43 = a3[45];
      }

      a3[45] = v43 + 40;
      if (++v13 == v55)
      {
        uint64_t v11 = v59;
        char v10 = v52;
        uint64_t v5 = a5;
        goto LABEL_38;
      }
    }

    uint64_t v20 = a3[52];
LABEL_13:
    size_t v21 = 0LL;
    unint64_t v22 = 0LL;
    goto LABEL_14;
  }

  uint64_t v53 = 0LL;
LABEL_38:
  int v45 = *(_DWORD *)v11;
  int v44 = *(_DWORD *)v11;
  unint64_t v59 = v11 + 8;
  int v46 = (unsigned __int16)v45;
  if (!(_WORD)v45)
  {
    uint64_t v47 = 0LL;
    if ((a4 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }

  uint64_t v47 = (uint64_t *)a3[50];
  uint64_t v48 = v47;
  do
  {
    uint64_t v49 = *(void *)v59;
    v59 += 8;
    if (a4)
    {
      if (v5)
      {
        uint64_t result = GetStream_10858(v5, v49);
        if (result) {
          uint64_t v49 = *(void *)result;
        }
        else {
          uint64_t v49 = 0LL;
        }
      }

      uint64_t v48 = (uint64_t *)a3[50];
      *uint64_t v48 = v49;
    }

    a3[50] = ++v48;
    --v46;
  }

  while (v46);
  if ((a4 & 1) != 0)
  {
LABEL_48:
    uint64_t v50 = a3[33];
    *(void *)uint64_t v50 = v53;
    *(void *)(v50 + 8) = v47;
    *(_WORD *)(v50 + 16) = v54;
    *(_WORD *)(v50 + 18) = v44;
    *(_BYTE *)(v50 + 20) = v10;
  }

uint64_t DecodeDYMTLFunctionStitchingFunctionNode( uint64_t a1, const char **a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)a1 = a3;
  char v10 = *a2;
  if (a4 >= 0x4F)
  {
    uint64_t v11 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(void *)(a1 + 32) = v11;
  }

  if (a3 == 2)
  {
    uint64_t v12 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(_BYTE *)(a1 + 44) = v12;
  }

  *a2 = &v10[(strlen(v10) & 0xFFFFFFFFFFFFFFF8LL) + 8];
  if (*v10) {
    int v13 = v10;
  }
  else {
    int v13 = "";
  }
  uint64_t result = strlen(v13);
  size_t v15 = result + 1;
  if (result == -1) {
    char v16 = 0LL;
  }
  else {
    char v16 = *(void **)(a5 + 416);
  }
  *(void *)(a5 + 416) += v15;
  if (a6) {
    uint64_t result = (uint64_t)memcpy(v16, v13, v15);
  }
  uint64_t v17 = *(void *)*a2;
  *a2 += 8;
  unsigned int v18 = (unsigned __int16)v17;
  *(_WORD *)(a1 + 40) = v17;
  if ((_WORD)v17) {
    uint64_t v19 = *(void *)(a5 + 368);
  }
  else {
    uint64_t v19 = 0LL;
  }
  *(void *)(a5 + 368) += 48LL * (unsigned __int16)v17;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v19;
  if ((_WORD)v17)
  {
    int v20 = 0;
    __int128 v21 = 0uLL;
    while (2)
    {
      int v22 = 0;
      memset(v35, 0, 7);
      __int128 v37 = v21;
      __int128 v38 = v21;
      char v39 = 0;
      uint64_t v23 = *a2;
      int v24 = *(unsigned __int8 *)*a2;
      *a2 += 8;
      __int16 v25 = 0;
      char v26 = 0;
      switch(v24)
      {
        case 1:
        case 2:
        case 12:
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
          __int128 v21 = 0uLL;
          LOBYTE(v24) = v36[0];
          v35[0] = *(_DWORD *)&v36[1];
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v36[4];
          int v22 = *(_DWORD *)&v36[8];
          __int16 v25 = *(_WORD *)&v36[12];
          char v26 = v36[14];
          __int128 v37 = *(_OWORD *)&v36[15];
          __int128 v38 = *(_OWORD *)&v36[31];
          char v39 = v36[47];
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 3:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          LOBYTE(v24) = 3;
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 5:
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          int v22 = *((_DWORD *)v23 + 4);
          *a2 = v23 + 24;
          char v26 = v23[24];
          *a2 = v23 + 32;
          LOBYTE(v24) = 5;
          goto LABEL_26;
        case 10:
        case 11:
LABEL_26:
          if (a6) {
            goto LABEL_27;
          }
          goto LABEL_28;
        default:
          __int16 v25 = 0;
          char v26 = 0;
          if (!a6) {
            goto LABEL_28;
          }
LABEL_27:
          *(_BYTE *)uint64_t v19 = v24;
          *(_DWORD *)(v19 + 4) = *(_DWORD *)((char *)v35 + 3);
          *(_DWORD *)(v19 + 8) = v22;
          *(_DWORD *)(v19 + 1) = v35[0];
          *(_WORD *)(v19 + 12) = v25;
          *(_BYTE *)(v19 + 14) = v26;
          __int128 v27 = v37;
          __int128 v28 = v38;
          *(_BYTE *)(v19 + 47) = v39;
          *(_OWORD *)(v19 + 31) = v28;
          *(_OWORD *)(v19 + 15) = v27;
          v19 += 48LL;
          unsigned int v18 = *(unsigned __int16 *)(a1 + 40);
LABEL_28:
          if (++v20 >= v18) {
            break;
          }
          continue;
      }

      break;
    }
  }

  uint64_t v29 = *(void *)*a2;
  *a2 += 8;
  unsigned int v30 = (unsigned __int16)v29;
  *(_WORD *)(a1 + 42) = v29;
  if ((_WORD)v29) {
    __int128 v31 = *(_OWORD **)(a5 + 368);
  }
  else {
    __int128 v31 = 0LL;
  }
  *(void *)(a5 + 368) += 48LL * (unsigned __int16)v29;
  *(void *)(a1 + 24) = v31;
  if ((_WORD)v29)
  {
    unsigned int v32 = 0;
    do
    {
      *a2 += 8;
      uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
      if (a6)
      {
        __int128 v33 = *(_OWORD *)v36;
        __int128 v34 = *(_OWORD *)&v36[32];
        v31[1] = *(_OWORD *)&v36[16];
        v31[2] = v34;
        *__int128 v31 = v33;
        v31 += 3;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 42);
      }

      ++v32;
    }

    while (v32 < v30);
  }

  return result;
}

void *DecodeDYMTLFXSpatialScalerDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 272);
  *(void *)(a3 + 272) = v4 + 40;
  if (a4)
  {
    *(void *)uint64_t v4 = result[1];
    *(void *)(v4 + 8) = result[2];
    *(void *)(v4 + 16) = result[3];
    *(void *)(v4 + 24) = result[4];
    *(_WORD *)(v4 + 32) = result[5];
    *(_WORD *)(v4 + 34) = result[6];
    *(_BYTE *)(v4 + 36) = result[7];
  }

  return result;
}

uint64_t DecodeDYMTLFXTemporalScalerDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(_DWORD *)result;
  uint64_t v5 = *(void *)(a3 + 280);
  *(void *)(a3 + 280) = v5 + 64;
  if (a4)
  {
    *(_WORD *)uint64_t v5 = *(void *)(result + 8);
    *(_WORD *)(v5 + 2) = *(void *)(result + 16);
    *(_WORD *)(v5 + 4) = *(void *)(result + 24);
    *(_WORD *)(v5 + 6) = *(void *)(result + 32);
    *(void *)(v5 + 16) = *(void *)(result + 40);
    *(void *)(v5 + 24) = *(void *)(result + 48);
    *(void *)(v5 + 32) = *(void *)(result + 56);
    *(void *)(v5 + 40) = *(void *)(result + 64);
    *(_DWORD *)(v5 + 48) = *(_DWORD *)(result + 72);
    *(_DWORD *)(v5 + 52) = *(_DWORD *)(result + 80);
    *(_BYTE *)(v5 + 56) = *(void *)(result + 88);
    *(_BYTE *)(v5 + 57) = *(void *)(result + 96);
    if (v4 >= 0x4D)
    {
      *(_BYTE *)(v5 + 58) = *(void *)(result + 104);
      *(_WORD *)(v5 + 8) = *(void *)(result + 112);
      if (v4 >= 0x50) {
        *(_BYTE *)(v5 + 59) = *(void *)(result + 120);
      }
    }
  }

  return result;
}

uint64_t EncodeDYMTLFXSpatialScalerDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)(a1 + 8);
        if (a3 >= 0x20)
        {
          a2[3] = *(void *)(a1 + 16);
          if (a3 >= 0x28)
          {
            a2[4] = *(void *)(a1 + 24);
            if (a3 >= 0x30)
            {
              a2[5] = *(unsigned __int16 *)(a1 + 32);
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int16 *)(a1 + 34);
                if (a3 >= 0x40) {
                  a2[7] = *(unsigned __int8 *)(a1 + 36);
                }
              }
            }
          }
        }
      }
    }
  }

  return 64LL;
}

uint64_t EncodeDYMTLFXTemporalScalerDescriptor(unsigned __int16 *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *(void *)a2 = 81LL;
    if (a3 >= 0x10)
    {
      *(void *)(a2 + 8) = *a1;
      if (a3 >= 0x18)
      {
        *(void *)(a2 + 16) = a1[1];
        if (a3 >= 0x20)
        {
          *(void *)(a2 + 24) = a1[2];
          if (a3 >= 0x28)
          {
            *(void *)(a2 + 32) = a1[3];
            if (a3 >= 0x30)
            {
              *(void *)(a2 + 40) = *((void *)a1 + 2);
              if (a3 >= 0x38)
              {
                *(void *)(a2 + 48) = *((void *)a1 + 3);
                if (a3 >= 0x40)
                {
                  *(void *)(a2 + 56) = *((void *)a1 + 4);
                  if (a3 >= 0x48)
                  {
                    *(void *)(a2 + 64) = *((void *)a1 + 5);
                    if (a3 >= 0x4C)
                    {
                      *(_DWORD *)(a2 + 72) = *((_DWORD *)a1 + 12);
                      if (a3 >= 0x4D)
                      {
                        uint64_t v6 = (void *)(a2 + 76);
                        size_t v7 = a3 - 76 >= 4 ? 4LL : a3 - 76;
                        bzero(v6, v7);
                        if (a3 >= 0x54)
                        {
                          *(_DWORD *)(a2 + 80) = *((_DWORD *)a1 + 13);
                          if (a3 >= 0x55)
                          {
                            if (a3 - 84 >= 4) {
                              size_t v8 = 4LL;
                            }
                            else {
                              size_t v8 = a3 - 84;
                            }
                            bzero((void *)(a2 + 84), v8);
                            if (a3 >= 0x60)
                            {
                              *(void *)(a2 + 88) = *((unsigned __int8 *)a1 + 56);
                              if (a3 >= 0x68)
                              {
                                *(void *)(a2 + 96) = *((unsigned __int8 *)a1 + 57);
                                if (a3 >= 0x70)
                                {
                                  *(void *)(a2 + 104) = *((unsigned __int8 *)a1 + 58);
                                  if (a3 >= 0x78)
                                  {
                                    *(void *)(a2 + 112) = a1[4];
                                    if (a3 >= 0x80) {
                                      *(void *)(a2 + 120) = *((unsigned __int8 *)a1 + 59);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 128LL;
}

void *DecodeDYMPSSourceTextureInfo(void *result, uint64_t a2, void **a3, int a4)
{
  unsigned int v4 = *a3;
  *a3 += 10;
  if (a4)
  {
    *unsigned int v4 = result[1];
    v4[1] = result[2];
    v4[2] = result[3];
    v4[3] = result[4];
    v4[4] = result[5];
    v4[5] = result[6];
    v4[6] = result[7];
    v4[7] = result[8];
    v4[8] = result[9];
    v4[9] = result[10];
  }

  return result;
}

uint64_t EncodeDYMPSSourceTextureInfo(void *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28)
          {
            a2[4] = a1[3];
            if (a3 >= 0x30)
            {
              a2[5] = a1[4];
              if (a3 >= 0x38)
              {
                a2[6] = a1[5];
                if (a3 >= 0x40)
                {
                  a2[7] = a1[6];
                  if (a3 >= 0x48)
                  {
                    a2[8] = a1[7];
                    if (a3 >= 0x50)
                    {
                      a2[9] = a1[8];
                      if (a3 >= 0x58) {
                        a2[10] = a1[9];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 88LL;
}

void *DecodeDYMPSDestinationTextureInfo(void *result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(void **)(a3 + 8);
  *(void *)(a3 + 8) = v4 + 10;
  if (a4)
  {
    *unsigned int v4 = result[1];
    v4[1] = result[2];
    v4[2] = result[3];
    v4[3] = result[4];
    v4[4] = result[5];
    v4[5] = result[6];
    v4[6] = result[7];
    v4[7] = result[8];
    v4[8] = result[9];
    v4[9] = result[10];
  }

  return result;
}

uint64_t EncodeDYMPSDestinationTextureInfo(void *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28)
          {
            a2[4] = a1[3];
            if (a3 >= 0x30)
            {
              a2[5] = a1[4];
              if (a3 >= 0x38)
              {
                a2[6] = a1[5];
                if (a3 >= 0x40)
                {
                  a2[7] = a1[6];
                  if (a3 >= 0x48)
                  {
                    a2[8] = a1[7];
                    if (a3 >= 0x50)
                    {
                      a2[9] = a1[8];
                      if (a3 >= 0x58) {
                        a2[10] = a1[9];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 88LL;
}

uint64_t EncodeDYMPSPluginCNNConvolutionDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8) {
    goto LABEL_20;
  }
  *(void *)a2 = 81LL;
  if (a3 < 0x10) {
    goto LABEL_20;
  }
  *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 52);
  if (a3 < 0x14) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 12);
  if (a3 < 0x15) {
    goto LABEL_20;
  }
  uint64_t v6 = (void *)(a2 + 20);
  size_t v7 = a3 - 20 >= 4 ? 4LL : a3 - 20;
  bzero(v6, v7);
  if (a3 < 0x1C) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 16);
  if (a3 < 0x1D) {
    goto LABEL_20;
  }
  size_t v8 = a3 - 28 >= 4 ? 4LL : a3 - 28;
  bzero((void *)(a2 + 28), v8);
  if (a3 < 0x24) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 20);
  if (a3 <= 0x24) {
    goto LABEL_20;
  }
  if (a3 - 36 >= 4) {
    size_t v9 = 4LL;
  }
  else {
    size_t v9 = a3 - 36;
  }
  bzero((void *)(a2 + 36), v9);
  size_t v10 = *(unsigned int *)(a1 + 8);
  if (a3 >= 0x30)
  {
    *(void *)(a2 + 40) = v10;
LABEL_20:
    size_t v10 = *(unsigned int *)(a1 + 8);
  }

  if (*(void *)a1) {
    BOOL v11 = (_DWORD)v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = 48LL;
  }

  else
  {
    size_t v13 = v10 + 48;
    if (a3 >= v10 + 48) {
      memcpy((void *)(a2 + 48), *(const void **)a1, v10);
    }
    uint64_t v14 = (v10 + 7) & 0x1FFFFFFF8LL;
    if (a3 > v13)
    {
      if (a3 - v13 >= v14 - v10) {
        size_t v15 = v14 - v10;
      }
      else {
        size_t v15 = a3 - v13;
      }
      bzero((void *)(a2 + v13), v15);
    }

    uint64_t v12 = v14 + 48;
  }

  if (v12 + 8 <= a3) {
    *(void *)(a2 + v12) = *(unsigned int *)(a1 + 24);
  }
  if (v12 + 16 <= a3) {
    *(void *)(a2 + v12 + 8) = *(unsigned int *)(a1 + 28);
  }
  if (v12 + 24 <= a3) {
    *(void *)(a2 + v12 + 16) = *(unsigned __int8 *)(a1 + 53);
  }
  if (v12 + 32 <= a3) {
    *(void *)(a2 + v12 + 24) = *(unsigned __int8 *)(a1 + 54);
  }
  if (v12 + 40 <= a3) {
    *(void *)(a2 + v12 + 32) = *(unsigned int *)(a1 + 32);
  }
  if (v12 + 48 <= a3) {
    *(void *)(a2 + v12 + 40) = *(unsigned int *)(a1 + 36);
  }
  if (v12 + 56 <= a3) {
    *(void *)(a2 + v12 + 48) = *(unsigned int *)(a1 + 40);
  }
  if (v12 + 64 <= a3) {
    *(void *)(a2 + v12 + 56) = *(unsigned int *)(a1 + 44);
  }
  if (v12 + 72 <= a3) {
    *(void *)(a2 + v12 + 64) = *(unsigned int *)(a1 + 48);
  }
  if (v12 + 80 <= a3) {
    *(void *)(a2 + v12 + 72) = *(unsigned __int8 *)(a1 + 55);
  }
  if (v12 + 88 <= a3) {
    *(void *)(a2 + v12 + 80) = *(unsigned __int8 *)(a1 + 56);
  }
  if (v12 + 96 <= a3) {
    *(void *)(a2 + v12 + 88) = *(unsigned __int8 *)(a1 + 57);
  }
  uint64_t result = v12 + 104;
  if (v12 + 104 <= a3) {
    *(void *)(a2 + v12 + 96) = *(unsigned __int8 *)(a1 + 58);
  }
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result[1];
  int v6 = *((_DWORD *)result + 4);
  int v7 = *((_DWORD *)result + 6);
  int v8 = *((_DWORD *)result + 8);
  size_t v9 = result[5];
  unint64_t v10 = (unint64_t)result + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 48;
  int32x4_t v11 = *(int32x4_t *)v10;
  int64x2_t v12 = *(int64x2_t *)(v10 + 16);
  int32x4_t v13 = *(int32x4_t *)(v10 + 32);
  int64x2_t v14 = *(int64x2_t *)(v10 + 48);
  uint64_t v15 = *(void *)(v10 + 64);
  int64x2_t v16 = *(int64x2_t *)(v10 + 72);
  uint64_t v18 = *(void *)(v10 + 88);
  uint64_t v17 = *(void *)(v10 + 96);
  uint64_t v19 = *(char **)(a3 + 72);
  *(void *)(a3 + 72) = &v19[v9];
  if (a4)
  {
    if (v9) {
      int v20 = v19;
    }
    else {
      int v20 = 0LL;
    }
    if (v9) {
      __int128 v21 = result + 6;
    }
    else {
      __int128 v21 = 0LL;
    }
    int32x4_t v28 = v13;
    int32x4_t v29 = v11;
    int64x2_t v26 = v12;
    int64x2_t v27 = v14;
    int64x2_t v25 = v16;
    uint64_t result = memcpy(v20, v21, v9);
    v22.i64[1] = v26.i64[1];
    int32x2_t v23 = vmovn_s64(v25);
    *(int32x2_t *)v22.i8 = vmovn_s64(v26);
    uint64_t v24 = *(void *)(a3 + 16);
    *(void *)uint64_t v24 = v20;
    *(_DWORD *)(v24 + 8) = v9;
    *(_DWORD *)(v24 + 12) = v6;
    *(_DWORD *)(v24 + 16) = v7;
    *(_DWORD *)(v24 + 20) = v8;
    *(int32x4_t *)(v24 + 24) = vuzp1q_s32(v29, v28);
    *(int32x2_t *)(v24 + 40) = vmovn_s64(v27);
    *(_DWORD *)(v24 + 48) = v15;
    *(_BYTE *)(v24 + 52) = v5;
    v22.i16[1] = v22.i16[2];
    v22.i16[2] = v23.i16[0];
    v22.i16[3] = v23.i16[2];
    *(_DWORD *)(v24 + 53) = vmovn_s16(v22).u32[0];
    *(_BYTE *)(v24 + 57) = v18;
    *(_BYTE *)(v24 + 58) = v17;
    *(_BYTE *)(v24 + 63) = 0;
    *(_DWORD *)(v24 + 59) = 0;
  }

  *(void *)(a3 + 16) += 64LL;
  return result;
}

uint64_t EncodeDYMPSPluginCNNConvolutionData(unsigned int *a1, void *a2, unint64_t a3)
{
  uint64_t v6 = a1[15];
  size_t v7 = 4 * v6;
  unsigned int v8 = a1[2];
  if (v8 == 2)
  {
    char v11 = 0;
    size_t v10 = 0LL;
    size_t v9 = 1024LL;
  }

  else
  {
    size_t v9 = 0LL;
    if (v8 == 1) {
      size_t v10 = 8 * v6;
    }
    else {
      size_t v10 = 0LL;
    }
    char v11 = 1;
  }

  size_t v12 = a1[14];
  uint64_t v13 = *((void *)a1 + 6);
  if (v13)
  {
    int64x2_t v14 = *(const void **)v13;
    uint64_t v15 = *(const void **)(v13 + 8);
    size_t v16 = 4 * v6;
  }

  else
  {
    size_t v16 = 0LL;
    int64x2_t v14 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = (int)a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28) {
            a2[4] = v12;
          }
        }
      }
    }
  }

  uint64_t v17 = (const void *)*((void *)a1 + 2);
  uint64_t v18 = 40LL;
  __int128 v56 = v15;
  size_t v57 = v10;
  if (v17 && (_DWORD)v12)
  {
    int v55 = v14;
    size_t v19 = v12 + 40;
    if (a3 >= v12 + 40)
    {
      size_t v20 = v9;
      char v21 = v11;
      int v22 = v6;
      memcpy(a2 + 5, v17, v12);
      LODWORD(v6) = v22;
      char v11 = v21;
      size_t v9 = v20;
    }

    uint64_t v23 = (v12 + 7) & 0x1FFFFFFF8LL;
    if (a3 > v19)
    {
      char v53 = v11;
      uint64_t v24 = (char *)a2 + v19;
      if (a3 - v19 >= v23 - v12) {
        size_t v25 = v23 - v12;
      }
      else {
        size_t v25 = a3 - v19;
      }
      size_t v26 = v9;
      int v27 = v6;
      bzero(v24, v25);
      LODWORD(v6) = v27;
      char v11 = v53;
      size_t v9 = v26;
    }

    uint64_t v18 = v23 + 40;
    uint64_t v15 = v56;
    size_t v10 = v57;
    int64x2_t v14 = v55;
  }

  uint64_t v28 = v18 + 8;
  if (v18 + 8 <= a3) {
    *(void *)((char *)a2 + v18) = v7;
  }
  int32x4_t v29 = (const void *)*((void *)a1 + 3);
  if (v29 && (_DWORD)v6)
  {
    unsigned int v30 = v14;
    size_t v31 = v28 + v7;
    if (a3 >= v28 + v7)
    {
      size_t v32 = v9;
      char v33 = v11;
      memcpy((char *)a2 + v28, v29, v7);
      char v11 = v33;
      size_t v9 = v32;
    }

    uint64_t v34 = (v7 + 7) & 0x7FFFFFFF8LL;
    if (a3 > v31)
    {
      char v54 = v11;
      unint64_t v35 = (char *)a2 + v31;
      if (a3 - v31 >= v34 - v7) {
        size_t v36 = v34 - v7;
      }
      else {
        size_t v36 = a3 - v31;
      }
      size_t v37 = v9;
      bzero(v35, v36);
      char v11 = v54;
      size_t v9 = v37;
    }

    v28 += v34;
    int64x2_t v14 = v30;
    uint64_t v15 = v56;
    size_t v10 = v57;
  }

  uint64_t v38 = v28 + 8;
  if (v28 + 8 <= a3) {
    *(void *)((char *)a2 + v28) = v9;
  }
  char v39 = (const void *)*((void *)a1 + 4);
  if (!v39) {
    char v11 = 1;
  }
  uint64_t v40 = v28 + 8;
  if ((v11 & 1) == 0)
  {
    uint64_t v40 = v38 + v9;
    if (v38 + v9 <= a3) {
      memcpy((char *)a2 + v38, v39, v9);
    }
  }

  uint64_t v41 = v40 + 8;
  if (v40 + 8 <= a3) {
    *(void *)((char *)a2 + v40) = v10;
  }
  uint64_t v42 = (const void *)*((void *)a1 + 5);
  if (v42 && v10)
  {
    uint64_t v43 = v41 + v10;
    if (v41 + v10 <= a3) {
      memcpy((char *)a2 + v41, v42, v10);
    }
    uint64_t v41 = v43;
  }

  uint64_t v44 = v41 + 8;
  if (v41 + 8 <= a3) {
    *(void *)((char *)a2 + v41) = v16;
  }
  if (v14 && v16)
  {
    size_t v45 = v44 + v16;
    if (a3 >= v44 + v16) {
      memcpy((char *)a2 + v44, v14, v16);
    }
    uint64_t v46 = (v16 + 7) & 0x7FFFFFFF8LL;
    if (a3 > v45)
    {
      if (a3 - v45 >= v46 - v16) {
        size_t v47 = v46 - v16;
      }
      else {
        size_t v47 = a3 - v45;
      }
      bzero((char *)a2 + v45, v47);
    }

    v44 += v46;
  }

  uint64_t v48 = v44 + 8;
  if (v44 + 8 <= a3) {
    *(void *)((char *)a2 + v44) = v16;
  }
  if (v15 && v16)
  {
    size_t v49 = v48 + v16;
    if (a3 >= v48 + v16) {
      memcpy((char *)a2 + v48, v15, v16);
    }
    uint64_t v50 = (v16 + 7) & 0x7FFFFFFF8LL;
    if (a3 > v49)
    {
      if (a3 - v49 >= v50 - v16) {
        size_t v51 = v50 - v16;
      }
      else {
        size_t v51 = a3 - v49;
      }
      bzero((char *)a2 + v49, v51);
    }

    v48 += v50;
  }

  return v48;
}

void *DecodeDYMPSPluginCNNConvolutionData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int32x2_t v6 = vmovn_s64(*(int64x2_t *)(a1 + 8));
  __int32 v7 = *(_DWORD *)(a1 + 24);
  size_t v8 = *(void *)(a1 + 32);
  size_t v9 = (const void *)(a1 + 40);
  size_t v10 = (unint64_t *)(a1 + 40 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  unint64_t v13 = *v10;
  char v11 = v10 + 1;
  unint64_t v12 = v13;
  int64x2_t v14 = (void *)((char *)v11 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v17 = *v14;
  uint64_t v15 = v14 + 1;
  uint64_t v16 = v17;
  if (v17) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0LL;
  }
  size_t v19 = (void *)((char *)v15 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v22 = *v19;
  size_t v20 = v19 + 1;
  uint64_t v21 = v22;
  if (v22) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = 0LL;
  }
  uint64_t v24 = (void *)((char *)v20 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v27 = *v24;
  size_t v25 = v24 + 1;
  uint64_t v26 = v27;
  if (v27) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0LL;
  }
  int32x4_t v29 = (void *)((char *)v25 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v32 = *v29;
  unsigned int v30 = v29 + 1;
  uint64_t v31 = v32;
  if (v32) {
    char v33 = v30;
  }
  else {
    char v33 = 0LL;
  }
  if (v8) {
    uint64_t result = (void *)a3[9];
  }
  else {
    uint64_t result = 0LL;
  }
  a3[9] += v8;
  __int32 v53 = v7;
  int32x2_t v54 = v6;
  int32x2_t v52 = (int32x2_t)result;
  __src = v28;
  uint64_t v50 = v33;
  if ((a4 & 1) != 0)
  {
    if (v12) {
      unint64_t v35 = v11;
    }
    else {
      unint64_t v35 = 0LL;
    }
    if (v8) {
      size_t v36 = v9;
    }
    else {
      size_t v36 = 0LL;
    }
    memcpy(result, v36, v8);
    uint64_t v37 = (v12 >> 2);
    else {
      uint64_t v38 = 0LL;
    }
    a3[8] += 4 * v37;
    int32x2_t v51 = (int32x2_t)v38;
    uint64_t result = memcpy(v38, v35, 4 * v37);
    int32x2_t v6 = v54;
  }

  else
  {
    uint64_t v37 = (v12 >> 2);
    else {
      int32x2_t v39 = 0LL;
    }
    int32x2_t v51 = v39;
    a3[8] += 4 * v37;
  }

  if (v6.i32[0] == 2)
  {
    uint64_t v41 = (char *)a3[8];
    a3[8] = v41 + 1024;
    if (a4)
    {
      uint64_t result = memcpy(v41, v18, 0x400uLL);
      int32x2_t v6 = v54;
    }

    uint64_t v40 = 0LL;
  }

  else
  {
    if (v6.i32[0] == 1)
    {
      if (v37) {
        uint64_t v40 = (void *)a3[7];
      }
      else {
        uint64_t v40 = 0LL;
      }
      a3[7] += 8 * v37;
      if (a4)
      {
        uint64_t result = memcpy(v40, v23, 8 * v37);
        int32x2_t v6 = v54;
      }
    }

    else
    {
      uint64_t v40 = 0LL;
    }

    uint64_t v41 = 0LL;
  }

  if (!(v26 + v31))
  {
    int32x2_t v42 = 0LL;
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }

  uint64_t v43 = (char *)a3[8];
  uint64_t v44 = &v43[4 * v37];
  a3[8] = v44;
  if ((a4 & 1) != 0)
  {
    if (v37) {
      size_t v45 = v43;
    }
    else {
      size_t v45 = 0LL;
    }
    memcpy(v45, __src, 4 * v37);
    if (v37) {
      uint64_t v46 = (void *)a3[8];
    }
    else {
      uint64_t v46 = 0LL;
    }
    a3[8] += 4 * v37;
    uint64_t result = memcpy(v46, v50, 4 * v37);
    int32x2_t v6 = v54;
    size_t v47 = (void *)a3[6];
    *size_t v47 = v45;
    v47[1] = v46;
  }

  else
  {
    a3[8] = &v44[4 * v37];
  }

  int32x2_t v42 = (int32x2_t)a3[6];
  a3[6] = *(void *)&v42 + 16LL;
  if (a4)
  {
LABEL_56:
    uint64_t v48 = (int32x2_t *)a3[3];
    *uint64_t v48 = v6;
    v48[1].i32[0] = v53;
    v48[1].i32[1] = 0;
    v48[2] = v52;
    v48[3] = v51;
    v48[4] = (int32x2_t)v41;
    v48[5] = (int32x2_t)v40;
    v48[6] = v42;
    v48[7].i32[0] = v8;
    v48[7].i32[1] = v12 >> 2;
  }

uint64_t EncodeDYMPSPluginNDArrayConvolutionDescriptor(unsigned __int8 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8) {
    *a2 = 81LL;
  }
  uint64_t v3 = 0LL;
  unsigned int v4 = a1;
  do
  {
    if (v3 * 8 + 16 <= a3) {
      a2[v3 + 1] = *(unsigned int *)v4;
    }
    ++v3;
    v4 += 4;
  }

  while (v3 != 3);
  if (a3 >= 0x28)
  {
    a2[4] = a1[36];
    if (a3 >= 0x30) {
      a2[5] = a1[37];
    }
  }

  uint64_t v5 = 0LL;
  int32x2_t v6 = (unsigned int *)(a1 + 12);
  do
  {
    if (v5 * 8 + 56 <= a3) {
      a2[v5 + 6] = *v6;
    }
    ++v5;
    ++v6;
  }

  while (v5 != 3);
  uint64_t v7 = 0LL;
  size_t v8 = (unsigned int *)(a1 + 24);
  do
  {
    if (v7 * 8 + 80 <= a3) {
      a2[v7 + 9] = *v8;
    }
    ++v7;
    ++v8;
  }

  while (v7 != 3);
  if (a3 >= 0x68)
  {
    a2[12] = a1[38];
    if (a3 >= 0x70)
    {
      a2[13] = a1[39];
      if (a3 >= 0x78)
      {
        a2[14] = a1[40];
        if (a3 >= 0x80)
        {
          a2[15] = a1[41];
          if (a3 >= 0x88) {
            a2[16] = a1[42];
          }
        }
      }
    }
  }

  return 136LL;
}

uint64_t DecodeDYMPSPluginNDArrayConvolutionDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(_BYTE **)(a3 + 32);
  *(void *)(a3 + 32) = v4 + 44;
  if (a4)
  {
    uint64_t v5 = 0LL;
    int32x2_t v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *v6++;
      *(_DWORD *)&v4[v5] = v8;
      v5 += 4LL;
    }

    while (v5 != 12);
    uint64_t v9 = 0LL;
    v4[36] = *v6;
    uint64_t v10 = v6[1];
    char v11 = v7 + 3;
    v4[37] = v10;
    do
    {
      uint64_t v12 = *v11++;
      *(_DWORD *)&v4[v9 + 12] = v12;
      v9 += 4LL;
    }

    while (v9 != 12);
    for (uint64_t i = 0LL; i != 12; i += 4LL)
    {
      uint64_t v14 = *v11++;
      *(_DWORD *)&v4[i + 24] = v14;
    }

    v4[38] = *v11;
    v4[39] = v11[1];
    v4[40] = v11[2];
    v4[41] = v11[3];
    v4[42] = v11[4];
  }

  return result;
}

uint64_t EncodeDYMPSNDArrayStructure(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81LL;
    if (a3 >= 0x10) {
      a2[1] = *(void *)a1;
    }
  }

  uint64_t v3 = 0LL;
  unsigned int v4 = (int *)(a1 + 8);
  do
  {
    if (v3 * 8 + 24 <= a3) {
      a2[v3 + 2] = *v4;
    }
    ++v3;
    ++v4;
  }

  while (v3 != 4);
  uint64_t v5 = 0LL;
  int32x2_t v6 = (int *)(a1 + 24);
  do
  {
    if (v5 * 8 + 56 <= a3) {
      a2[v5 + 6] = *v6;
    }
    ++v5;
    ++v6;
  }

  while (v5 != 4);
  if (a3 >= 0x58) {
    a2[10] = *(unsigned int *)(a1 + 40);
  }
  return 88LL;
}

uint64_t DecodeDYMPSNDArrayStructure(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = v4 + 48;
  if (a4)
  {
    uint64_t v5 = 0LL;
    int32x2_t v6 = (uint64_t *)(result + 16);
    *(void *)uint64_t v4 = *(void *)(result + 8);
    do
    {
      uint64_t v7 = *v6++;
      *(_DWORD *)(v4 + 8 + v5) = v7;
      v5 += 4LL;
    }

    while (v5 != 16);
    uint64_t v8 = 0LL;
    uint64_t v9 = (_DWORD *)(v4 + 24);
    do
      *v9++ = v6[v8++];
    while (v8 != 4);
    *(_DWORD *)(v4 + 40) = v6[4];
  }

  return result;
}

_BYTE *GTMTLArgument_bufferPointerType(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t result = *(_BYTE **)(a1 + 8);
  if (!result || *result != 60) {
    return 0LL;
  }
  return result;
}

unsigned __int8 *GTMTLBinding_bufferStructType(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 **)(a1 + 8);
  if (!result) {
    return 0LL;
  }
  int v2 = *result;
  if (v2 == 1) {
    return result;
  }
  if (v2 == 60 && result[22] == 1) {
    return (unsigned __int8 *)*((void *)result + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t GTMTLBinding_imageBlockMasterStructMembers(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 != 17 && v1 != 16) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return *(void *)(a1 + 8);
  }
  return v2;
}

BOOL GTMTLRenderPipelineReflection_isDrawCall(unsigned __int16 *a1)
{
  return a1[104] + a1[99] + a1[100] + a1[102] + a1[105] + a1[103] + a1[106] != 0;
}

uint64_t GTMTLRenderPipelineReflection_resourceAccess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 272) = 0LL;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    CalculateBindingsAccess(v4, *(unsigned __int16 *)(a1 + 208), a2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    CalculateBindingsAccess(v5, *(unsigned __int16 *)(a1 + 198), a2);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    CalculateBindingsAccess(v6, *(unsigned __int16 *)(a1 + 200), a2 + 56);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    CalculateBindingsAccess(v7, *(unsigned __int16 *)(a1 + 204), a2 + 112);
  }
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8) {
    CalculateBindingsAccess(v8, *(unsigned __int16 *)(a1 + 210), a2 + 112);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    CalculateBindingsAccess(v9, *(unsigned __int16 *)(a1 + 206), a2 + 168);
  }
  uint64_t v10 = *(void *)(a1 + 88);
  if (v10) {
    CalculateBindingsAccess(v10, *(unsigned __int16 *)(a1 + 212), a2 + 168);
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return CalculateBindingsAccess(result, *(unsigned __int16 *)(a1 + 202), a2 + 224);
  }
  return result;
}

uint64_t CalculateBindingsAccess(uint64_t result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3 + 16;
    for (uint64_t i = a2; i; --i)
    {
      if ((*(_BYTE *)(v4 + 19) & 1) == 0) {
        goto LABEL_9;
      }
      int v7 = *(unsigned __int8 *)(v4 + 16);
      if ((v7 - 24) >= 4)
      {
        if (v7 == 2)
        {
          uint64_t v8 = (_BYTE *)v4;
          uint64_t v9 = v5;
          goto LABEL_8;
        }

        if (*(_BYTE *)(v4 + 16)) {
          goto LABEL_9;
        }
      }

      uint64_t v8 = (_BYTE *)v4;
      uint64_t v9 = a3;
LABEL_8:
      uint64_t result = (uint64_t)UpdateAccess(v8, v9);
LABEL_9:
      if (*(unsigned __int8 *)(v4 + 16) <= 1u)
      {
        uint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          int v10 = *(unsigned __int8 *)result;
          if (v10 == 1 || v10 == 60 && *(_BYTE *)(result + 22) == 1 && (uint64_t result = *(void *)(result + 8)) != 0)
          {
            uint64_t result = GTMTLStructType_isArgumentBuffer(result);
            if ((_DWORD)result) {
              *(void *)(a3 + (((unint64_t)*(unsigned __int8 *)(v4 + 18) >> 3) & 0x18) + 48) |= 1LL << *(_BYTE *)(v4 + 18);
            }
          }
        }
      }

      v4 += 56LL;
    }
  }

  return result;
}

_BYTE *UpdateAccess(_BYTE *result, uint64_t a2)
{
  uint64_t v2 = result[18];
  if (result[16] != 2)
  {
    uint64_t v3 = v2 + 1;
    goto LABEL_5;
  }

  if (result[26])
  {
    uint64_t v3 = result[26] + v2;
LABEL_5:
    int v4 = result[17];
    while (1)
    {
      unsigned int v5 = v2 >> 6;
      if (v4 == 2) {
        break;
      }
      if (v4 == 1)
      {
        uint64_t v6 = 1LL << v2;
        uint64_t v8 = (void *)(a2 + 16LL * v5);
        *v8 |= 1LL << v2;
        int v7 = v8 + 1;
        goto LABEL_12;
      }

      if (!v4)
      {
        uint64_t v6 = 1LL << v2;
        int v7 = (void *)(a2 + 16LL * v5);
LABEL_12:
        *v7 |= v6;
      }

      if (v3 == ++v2) {
        return result;
      }
    }

    uint64_t v6 = 1LL << v2;
    int v7 = (void *)(a2 + 16LL * v5 + 8);
    goto LABEL_12;
  }

  return result;
}

BOOL GTMTLStructType_isArgumentBuffer(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v1)
    {
      uint64_t v2 = 0LL;
      uint64_t v3 = *(void *)(a1 + 8);
      BOOL v4 = 1;
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(v3 + 32 * v2 + 24);
        if (v5 <= 1)
        {
          if (v5 == 1)
          {
            uint64_t v6 = v3 + 32 * v2;
LABEL_17:
            if ((GTMTLStructType_isArgumentBuffer(*(void *)(v6 + 8)) & 1) != 0) {
              return v4;
            }
          }
        }

        else if (v5 == 2)
        {
          uint64_t v6 = v3 + 32 * v2;
          do
          {
            uint64_t v6 = *(void *)(v6 + 8);
            int v7 = *(unsigned __int8 *)(v6 + 24);
          }

          while (v7 == 2);
          if (v7 == 1) {
            goto LABEL_17;
          }
        }

        else
        {
          BOOL v9 = v5 - 78 > 0x28 || ((1LL << (v5 - 78)) & 0x1E000000007LL) == 0;
          if (!v9 || v5 - 58 < 3) {
            return v4;
          }
        }

        BOOL v4 = ++v2 < v1;
        if (v2 == v1) {
          return v4;
        }
      }
    }
  }

  return 0;
}

uint64_t GTMTLComputePipelineReflection_resourceAccess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0LL;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    CalculateBindingsAccess(v4, *(unsigned __int16 *)(a1 + 92), a2);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return CalculateBindingsAccess(result, *(unsigned __int16 *)(a1 + 94), a2);
  }
  return result;
}

uint64_t DataTypeToPixelFormat(char a1)
{
  else {
    return word_1C8410[(a1 - 62)];
  }
}

void *GTMTLPipelineReflectionAllocator_copyData(uint64_t a1, const void *a2, size_t __n, int a4)
{
  if (__n) {
    uint64_t v4 = *(void **)(a1 + 184);
  }
  else {
    uint64_t v4 = 0LL;
  }
  *(void *)(a1 + 184) += __n;
  if (a4) {
    memcpy(v4, a2, __n);
  }
  return v4;
}

uint64_t GTMTLPipelineReflectionAllocator_size(uint64_t a1)
{
  uint64_t v1 = 0LL;
  int64x2_t v2 = 0uLL;
  int64x2_t v3 = vdupq_n_s64(7uLL);
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8LL);
  do
  {
    int64x2_t v2 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a1 + v1), v3), v4), v2);
    v1 += 16LL;
  }

  while (v1 != 192);
  return vaddvq_s64(v2);
}

uint64_t GTMTLPipelineReflectionAllocator_rebase(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0LL; i != 192; i += 8LL)
  {
    if (((*(void *)(result + i) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) != 0) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = 0LL;
    }
    a2 += (*(void *)(result + i) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(result + i) = v3;
  }

  return result;
}

uint64_t GTTraceDump_writeDeviceResources(uint64_t a1, apr_pool_t *a2, apr_pool_t *p)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = (char *)apr_palloc(p, 0x100000uLL);
  uint64_t v52 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(*(void *)(*find_entry(v6, &v52, 8uLL, 0LL) + 32LL) + 8LL);
  snprintf(v8, 0x100000uLL, "device-resources-0x%llx", v9);
  uint64_t v43 = v9;
  uint64_t v44 = v8;
  int v10 = *(_DWORD *)(a1 + 484);
  int v45 = 0x100000;
  int v46 = v10;
  char v11 = fbstream_open(a2, (uint64_t)v8, p);
  data = v11;
  uint64_t v48 = a2;
  uint64_t v49 = 0LL;
  char v50 = *(_BYTE *)(a1 + 488);
  memset(v51, 0, sizeof(v51));
  Object = GTMTLSMContext_getObject(*(uint64_t **)(a1 + 568), v7, *(void *)(a1 + 40));
  uint64_t v52 = v9;
  int v53 = 7;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  int v56 = 0;
  DWORD1(v54) = 2;
  GTTrace_storePointer((uint64_t)&v43, -12272, (uint64_t)&v52, v8 + 1048064, 512LL, v6);
  DYTraceEncode_InternalData((uint64_t)&v52, (unsigned int *)v8, 0x100000uLL, v13, 0LL);
  unsigned int v14 = *((_DWORD *)v8 + 8);
  *((_DWORD *)v8 + 8) = v14 | 0x46;
  unint64_t v15 = *(unsigned int *)v8;
  if ((v14 & 0x1000) != 0)
  {
    uint64_t v16 = *(unsigned int *)v8;
    uint64_t v17 = (unsigned int *)v8;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v16);
      uint64_t v16 = *v17;
      v15 += v16;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  fbstream_write((uint64_t)v11, (uint64_t)v8, v15);
  uint64_t v18 = Object[5];
  uint64_t v52 = 512LL;
  size_t v19 = (const char *)StoreMTLDeviceDescriptorUsingEncode((uint64_t)a2, v18, (uint64_t)(v8 + 1048064), &v52);
  *((void *)v8 + 1) = 0LL;
  *((void *)v8 + 2) = 0LL;
  *((void *)v8 + 3) = 0LL;
  *((void *)v8 + 4) = 0x554300000000LL;
  *(void *)uint64_t v8 = 0xFFFFD80100000028LL;
  *((void *)v8 + 5) = v9;
  *(_DWORD *)uint64_t v8 = 48;
  AppendString(v19, (int *)v8);
  uint64_t v20 = *(unsigned int *)v8;
  unint64_t v21 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
  bzero(&v8[v20], v21 - v20);
  *(_DWORD *)uint64_t v8 = v21;
  if ((v8[33] & 0x10) != 0)
  {
    LODWORD(v22) = v21;
    uint64_t v23 = (unsigned int *)v8;
    do
    {
      uint64_t v23 = (unsigned int *)((char *)v23 + v22);
      uint64_t v22 = *v23;
      v21 += v22;
    }

    while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
  }

  fbstream_write((uint64_t)v11, (uint64_t)v8, v21);
  uint64_t v25 = 0LL;
  uint64_t v26 = (_OWORD **)(a1 + 64);
  do
  {
    uint64_t v27 = *v26++;
    uint64_t v28 = &v52 + v25;
    __int128 v29 = v27[1];
    *(_OWORD *)uint64_t v28 = *v27;
    *((_OWORD *)v28 + 1) = v29;
    unsigned int v30 = (const float *)(a1 + 344 + v25);
    float32x2_t v31 = vld1_dup_f32(v30);
    *(uint64_t *)((char *)v28 + 12) = (uint64_t)v31;
    *uint64_t v28 = 0LL;
    v25 += 4LL;
  }

  while (v25 != 140);
  v42[0] = v9;
  v42[1] = "root";
  v42[2] = 0LL;
  v42[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v42, (unsigned int *)v8, 0x100000uLL, v24, 0LL);
  uint64_t v32 = *(unsigned int *)v8;
  if ((v8[33] & 0x10) != 0)
  {
    uint64_t v34 = (unsigned int *)v8;
    unint64_t v33 = *(unsigned int *)v8;
    do
    {
      uint64_t v34 = (unsigned int *)((char *)v34 + v32);
      uint64_t v32 = *v34;
      v33 += v32;
    }

    while ((*((_BYTE *)v34 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v33 = *(unsigned int *)v8;
  }

  fbstream_write((uint64_t)v11, (uint64_t)v8, v33);
  DumpDeviceResources((uint64_t)&v43, a1, (const apr_array_header_t *)&v52, (uint64_t)p);
  uint64_t v35 = v43;
  size_t v36 = v44;
  *((void *)v44 + 1) = 0LL;
  *((void *)v36 + 2) = 0LL;
  *((void *)v36 + 3) = 0LL;
  *((void *)v36 + 4) = 0x4300000046LL;
  *(void *)size_t v36 = 0xFFFFD00800000028LL;
  *((void *)v36 + 5) = v35;
  *(_DWORD *)size_t v36 = 48;
  uint64_t v37 = *(unsigned int *)v44;
  if ((v44[33] & 0x10) != 0)
  {
    int32x2_t v39 = (unsigned int *)v44;
    unint64_t v38 = *(unsigned int *)v44;
    do
    {
      int32x2_t v39 = (unsigned int *)((char *)v39 + v37);
      uint64_t v37 = *v39;
      v38 += v37;
    }

    while ((*((_BYTE *)v39 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v38 = *(unsigned int *)v44;
  }

  fbstream_write((uint64_t)data, (uint64_t)v44, v38);
  uint64_t v40 = data;
  apr_pool_cleanup_kill(*(apr_pool_t **)data, data, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v40);
}

void DumpDeviceResources(uint64_t a1, uint64_t a2, const apr_array_header_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v1575 = *(void *)(a2 + 496);
  uint64_t v9 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "heaps";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v9, *(unsigned int *)(a1 + 16), a4, 0LL);
  int v10 = *(unsigned int **)(a1 + 8);
  uint64_t v11 = *v10;
  if ((*((_BYTE *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v13 = *(unsigned int **)(a1 + 8);
    unint64_t v12 = *v10;
    do
    {
      uint64_t v13 = (unsigned int *)((char *)v13 + v11);
      uint64_t v11 = *v13;
      v12 += v11;
    }

    while ((*((_BYTE *)v13 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v12 = *v10;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v10, v12);
  uint64_t v1583 = v8;
  v1567 = (apr_pool_t *)a4;
  if (a3[9].nelts < 1) {
    goto LABEL_224;
  }
  uint64_t v14 = 0LL;
  do
  {
    uint64_t v15 = *(void *)&a3[9].elts[8 * v14];
    if (v15) {
      uint64_t v16 = *(void *)(v15 + 8);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = *(void *)(a2 + 16);
    *(void *)__str = v16;
    uint64_t v19 = *find_entry(v17, __str, 8uLL, 0LL);
    if (v19) {
      uint64_t v19 = *(void *)(v19 + 32);
    }
    uint64_t v1570 = v19;
    unint64_t v20 = *(void *)(v19 + 8);
    unint64_t v21 = *(unsigned int **)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = "heap";
    *(_OWORD *)&__str[16] = v20;
    DYTraceEncode_EnterStateGroup((uint64_t)__str, v21, *(unsigned int *)(a1 + 16), v18, 0LL);
    uint64_t v22 = *(unsigned int **)(a1 + 8);
    uint64_t v23 = *v22;
    uint64_t v1572 = v14;
    if ((*((_BYTE *)v22 + 33) & 0x10) != 0)
    {
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v24 = *v22;
      do
      {
        uint64_t v25 = (unsigned int *)((char *)v25 + v23);
        uint64_t v23 = *v25;
        v24 += v23;
      }

      while ((*((_BYTE *)v25 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v24 = *v22;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v22, v24);
    uint64_t v26 = *(void *)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = v20;
    uint64_t v27 = *(void *)(v15 + 48);
    uint64_t v28 = v26 + *(unsigned int *)(a1 + 16) - 512;
    *(void *)__s = 512LL;
    *(void *)&__str[16] = StoreMTLHeapDescriptorUsingEncode(*(void *)(a1 + 32), v27, v28, __s);
    DYTraceEncode_MTLDevice_newHeapWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    __int128 v29 = *(unsigned int **)(a1 + 8);
    v29[8] |= 0x1000u;
    uint64_t v30 = *v29;
    float32x2_t v31 = (unsigned int *)((char *)v29 + v30);
    *(void *)__str = v20;
    *(_DWORD *)&__str[8] = 118;
    memset(&__str[12], 0, 36);
    *(void *)&__str[16] = *(unsigned int *)(v15 + 72);
    DYTraceEncode_InternalData( (uint64_t)__str,  (unsigned int *)((char *)v29 + v30),  *(unsigned int *)(a1 + 16) - v30,  v32,  0LL);
    unint64_t v33 = (unsigned int *)((char *)v31 + *v31);
    *(void *)__s = v20;
    LODWORD(v1588[0]) = 125;
    memset((char *)v1588 + 4, 0, 36);
    v1588[2] = *(unsigned int *)(v15 + 76);
    DYTraceEncode_InternalData( (uint64_t)__s,  v33,  *(void *)(a1 + 8) - (void)v33 + *(unsigned int *)(a1 + 16),  v34,  0LL);
    v33[8] |= 0x2000u;
    uint64_t v35 = *(unsigned int **)(a1 + 8);
    unint64_t v36 = *v35;
    if ((*((_BYTE *)v35 + 33) & 0x10) != 0)
    {
      uint64_t v37 = *v35;
      unint64_t v38 = *(unsigned int **)(a1 + 8);
      do
      {
        unint64_t v38 = (unsigned int *)((char *)v38 + v37);
        uint64_t v37 = *v38;
        v36 += v37;
      }

      while ((*((_BYTE *)v38 + 33) & 0x20) == 0);
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v36);
    *(void *)__str = v20;
    *(_DWORD *)&__str[8] = 118;
    memset(&__str[12], 0, 36);
    *(void *)&__str[16] = *(unsigned int *)(v15 + 72);
    GTTrace_storePointer( a1,  -12272,  (uint64_t)__str,  (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL),  512LL,  v17);
    DYTraceEncode_InternalData((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), v39, 0LL);
    uint64_t v40 = *(unsigned int **)(a1 + 8);
    uint64_t v41 = *v40;
    if ((*((_BYTE *)v40 + 33) & 0x10) != 0)
    {
      uint64_t v43 = *(unsigned int **)(a1 + 8);
      unint64_t v42 = *v40;
      do
      {
        uint64_t v43 = (unsigned int *)((char *)v43 + v41);
        uint64_t v41 = *v43;
        v42 += v41;
      }

      while ((*((_BYTE *)v43 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v42 = *v40;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v40, v42);
    if (*(void *)(v15 + 56)) {
      uint64_t v44 = *(const char **)(v15 + 56);
    }
    else {
      uint64_t v44 = "";
    }
    int v45 = *(unsigned int **)(a1 + 8);
    *((void *)v45 + 1) = 0LL;
    *((void *)v45 + 2) = 0LL;
    *((void *)v45 + 3) = 0LL;
    *((void *)v45 + 4) = 0x534300000000LL;
    *(void *)int v45 = 0xFFFFC10900000028LL;
    *((void *)v45 + 5) = v20;
    *int v45 = 48;
    AppendString(v44, (int *)v45);
    uint64_t v46 = *v45;
    uint64_t v47 = ((_DWORD)v46 + 3) & 0xFFFFFFFC;
    bzero((char *)v45 + v46, v47 - v46);
    *int v45 = v47;
    uint64_t v48 = *(unsigned int **)(a1 + 8);
    uint64_t v49 = *v48;
    if ((*((_BYTE *)v48 + 33) & 0x10) != 0)
    {
      int32x2_t v51 = *(unsigned int **)(a1 + 8);
      unint64_t v50 = *v48;
      do
      {
        int32x2_t v51 = (unsigned int *)((char *)v51 + v49);
        uint64_t v49 = *v51;
        v50 += v49;
      }

      while ((*((_BYTE *)v51 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v50 = *v48;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v48, v50);
    uint64_t v52 = *(unsigned __int16 *)(v15 + 80);
    int v53 = *(void **)(a1 + 8);
    v53[2] = 0LL;
    v53[3] = 0LL;
    v53[1] = 0LL;
    v53[4] = 0x6C754300000000LL;
    void *v53 = 0xFFFFC10D00000028LL;
    v53[5] = v20;
    v53[6] = v52;
    *(_DWORD *)int v53 = 56;
    __int128 v54 = *(unsigned int **)(a1 + 8);
    uint64_t v55 = *v54;
    if ((*((_BYTE *)v54 + 33) & 0x10) != 0)
    {
      size_t v57 = *(unsigned int **)(a1 + 8);
      unint64_t v56 = *v54;
      do
      {
        size_t v57 = (unsigned int *)((char *)v57 + v55);
        uint64_t v55 = *v57;
        v56 += v55;
      }

      while ((*((_BYTE *)v57 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v56 = *v54;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v54, v56);
    int v58 = *(unsigned __int8 *)(*(void *)(v15 + 48) + 19LL);
    unint64_t v1571 = v20;
    if (v58 == 2)
    {
      uint64_t v234 = *(void *)(a2 + 16);
      uint64_t v235 = *(void *)(a2 + 496);
      uint64_t v236 = *(void *)(a2 + 520);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v237 = *find_entry(v236, __str, 8uLL, 0LL);
      if (v237)
      {
        uint64_t v238 = *(void *)(v237 + 32);
        if (v238)
        {
          qsort( *(void **)(v238 + 24),  *(int *)(v238 + 12),  *(int *)(v238 + 8),  (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
          *(void *)__str = *(void *)(v15 + 8);
          entry = find_entry(v234, __str, 8uLL, 0LL);
          int v240 = *(_DWORD *)(v238 + 12);
          if (v240 >= 1)
          {
            uint64_t v241 = 0LL;
            uint64_t v1578 = *(void *)(*(void *)(*entry + 32LL) + 8LL);
            do
            {
              uint64_t v242 = *(void *)(*(void *)(v238 + 24) + 8 * v241);
              if (*(_DWORD *)v242 == 80)
              {
                *(void *)__str = *(void *)(v242 + 8);
                uint64_t v243 = *(void *)(*find_entry(v234, __str, 8uLL, 0LL) + 32LL);
                uint64_t v244 = *(void *)(v243 + 8);
                v245 = *(unsigned int **)(a1 + 8);
                *(void *)__str = *(void *)a1;
                *(void *)&__str[8] = "texture";
                *(_OWORD *)&__str[16] = (unint64_t)v244;
                DYTraceEncode_EnterStateGroup((uint64_t)__str, v245, *(unsigned int *)(a1 + 16), v246, 0LL);
                v247 = *(unsigned int **)(a1 + 8);
                uint64_t v248 = *v247;
                if ((*((_BYTE *)v247 + 33) & 0x10) != 0)
                {
                  v250 = *(unsigned int **)(a1 + 8);
                  unint64_t v249 = *v247;
                  do
                  {
                    v250 = (unsigned int *)((char *)v250 + v248);
                    uint64_t v248 = *v250;
                    v249 += v248;
                  }

                  while ((*((_BYTE *)v250 + 33) & 0x20) == 0);
                }

                else
                {
                  unint64_t v249 = *v247;
                }

                fbstream_write(*(void *)(a1 + 24), (uint64_t)v247, v249);
                *(void *)__str = v1578;
                *(void *)&__str[8] = v244;
                uint64_t v251 = *(void *)(v242 + 104);
                uint64_t v252 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
                *(void *)__s = 512LL;
                *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v251, v252, __s);
                DYTraceEncode_MTLHeap_newTextureWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
                v253 = *(unsigned int **)(a1 + 8);
                uint64_t v254 = *v253;
                if ((*((_BYTE *)v253 + 33) & 0x10) != 0)
                {
                  v256 = *(unsigned int **)(a1 + 8);
                  unint64_t v255 = *v253;
                  do
                  {
                    v256 = (unsigned int *)((char *)v256 + v254);
                    uint64_t v254 = *v256;
                    v255 += v254;
                  }

                  while ((*((_BYTE *)v256 + 33) & 0x20) == 0);
                }

                else
                {
                  unint64_t v255 = *v253;
                }

                fbstream_write(*(void *)(a1 + 24), (uint64_t)v253, v255);
                WriteGTMTLSMTexture_properties((void *)a1, v242, v243, v234);
                *(void *)__str = *(void *)(v242 + 8);
                uint64_t v257 = *find_entry(v235, __str, 8uLL, 0LL);
                if (v257) {
                  uint64_t v258 = *(void *)(v257 + 32);
                }
                else {
                  uint64_t v258 = 0LL;
                }
                WriteGTMTLSMTexture_downloads(a1, v242, v258, 1, v244);
                WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v242);
                uint64_t v259 = *(void *)a1;
                uint64_t v260 = *(void *)(a1 + 8);
                *(void *)(v260 + 16) = 0LL;
                *(void *)(v260 + 24) = 0LL;
                *(void *)(v260 + 8) = 0LL;
                *(_DWORD *)(v260 + 32) = 70;
                *(_DWORD *)(v260 + 36) = 67;
                *(void *)uint64_t v260 = 0xFFFFD00800000028LL;
                *(void *)(v260 + 40) = v259;
                *(_DWORD *)uint64_t v260 = 48;
                v261 = *(unsigned int **)(a1 + 8);
                uint64_t v262 = *v261;
                if ((*((_BYTE *)v261 + 33) & 0x10) != 0)
                {
                  v264 = *(unsigned int **)(a1 + 8);
                  unint64_t v263 = *v261;
                  do
                  {
                    v264 = (unsigned int *)((char *)v264 + v262);
                    uint64_t v262 = *v264;
                    v263 += v262;
                  }

                  while ((*((_BYTE *)v264 + 33) & 0x20) == 0);
                }

                else
                {
                  unint64_t v263 = *v261;
                }

                fbstream_write(*(void *)(a1 + 24), (uint64_t)v261, v263);
                int v240 = *(_DWORD *)(v238 + 12);
              }

              ++v241;
            }

            while (v241 < v240);
          }
        }
      }

      goto LABEL_208;
    }

    if (v58 == 1)
    {
      uint64_t v155 = *(void *)(a2 + 16);
      uint64_t v156 = *(void *)(a2 + 496);
      uint64_t v157 = *(void *)(a2 + 520);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v158 = *find_entry(v157, __str, 8uLL, 0LL);
      if (!v158) {
        goto LABEL_208;
      }
      uint64_t v159 = *(void *)(v158 + 32);
      if (!v159) {
        goto LABEL_208;
      }
      qsort( *(void **)(v159 + 24),  *(int *)(v159 + 12),  *(int *)(v159 + 8),  (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v160 = find_entry(v155, __str, 8uLL, 0LL);
      uint64_t v161 = 0LL;
      uint64_t v1577 = *(void *)(*(void *)(*v160 + 32LL) + 8LL);
      while (1)
      {
        uint64_t v162 = *(void *)(*(void *)(v159 + 24) + 8 * v161);
        uint64_t v163 = v162 ? *(void *)(v162 + 8) : 0LL;
        *(void *)__str = v163;
        uint64_t v164 = find_entry(v155, __str, 8uLL, 0LL);
        v166 = *v164 ? *(void **)(*v164 + 32LL) : 0LL;
        uint64_t v167 = v166[1];
        int v168 = *(_DWORD *)v162;
        if (*(_DWORD *)v162 == 16) {
          break;
        }
        if (v168 == 80)
        {
          uint64_t v177 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "texture";
          *(_OWORD *)&__str[16] = (unint64_t)v167;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v177, *(unsigned int *)(a1 + 16), v165, 0LL);
          uint64_t v178 = *(unsigned int **)(a1 + 8);
          uint64_t v179 = *v178;
          if ((*((_BYTE *)v178 + 33) & 0x10) != 0)
          {
            uint64_t v195 = *(unsigned int **)(a1 + 8);
            unint64_t v180 = *v178;
            do
            {
              uint64_t v195 = (unsigned int *)((char *)v195 + v179);
              uint64_t v179 = *v195;
              v180 += v179;
            }

            while ((*((_BYTE *)v195 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v180 = *v178;
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v178, v180);
          *(void *)__str = v1577;
          *(void *)&__str[8] = v167;
          uint64_t v196 = *(void *)(v162 + 104);
          *(void *)&__str[24] = *(unsigned int *)(v162 + 80);
          uint64_t v197 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
          *(void *)__s = 512LL;
          *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v196, v197, __s);
          DYTraceEncode_MTLHeap_newTextureWithDescriptor_offset( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
          uint64_t v198 = *(unsigned int **)(a1 + 8);
          uint64_t v199 = *v198;
          if ((*((_BYTE *)v198 + 33) & 0x10) != 0)
          {
            v201 = *(unsigned int **)(a1 + 8);
            unint64_t v200 = *v198;
            do
            {
              v201 = (unsigned int *)((char *)v201 + v199);
              uint64_t v199 = *v201;
              v200 += v199;
            }

            while ((*((_BYTE *)v201 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v200 = *v198;
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v198, v200);
          WriteGTMTLSMTexture_properties((void *)a1, v162, (uint64_t)v166, v155);
          *(void *)__str = *(void *)(v162 + 8);
          uint64_t v202 = *find_entry(v156, __str, 8uLL, 0LL);
          if (v202) {
            uint64_t v203 = *(void *)(v202 + 32);
          }
          else {
            uint64_t v203 = 0LL;
          }
          WriteGTMTLSMTexture_downloads(a1, v162, v203, 0, v167);
          WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v162);
          uint64_t v223 = *(void *)a1;
          uint64_t v224 = *(void *)(a1 + 8);
          *(void *)(v224 + 16) = 0LL;
          *(void *)(v224 + 24) = 0LL;
          *(void *)(v224 + 8) = 0LL;
          *(_DWORD *)(v224 + 32) = 70;
          *(_DWORD *)(v224 + 36) = 67;
          *(void *)uint64_t v224 = 0xFFFFD00800000028LL;
          *(void *)(v224 + 40) = v223;
          *(_DWORD *)uint64_t v224 = 48;
          uint64_t v206 = *(void *)(a1 + 24);
          uint64_t v207 = *(unsigned int **)(a1 + 8);
          unint64_t v208 = *v207;
          if ((*((_BYTE *)v207 + 33) & 0x10) != 0)
          {
            v225 = *(unsigned int **)(a1 + 8);
            unint64_t v210 = *v207;
            do
            {
              v225 = (unsigned int *)((char *)v225 + v208);
              unint64_t v208 = *v225;
              v210 += v208;
            }

            while ((*((_BYTE *)v225 + 33) & 0x20) == 0);
            goto LABEL_183;
          }

          goto LABEL_180;
        }

        if (v168 == 22)
        {
          unint64_t v169 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "buffer";
          *(_OWORD *)&__str[16] = (unint64_t)v167;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v169, *(unsigned int *)(a1 + 16), v165, 0LL);
          uint64_t v170 = *(unsigned int **)(a1 + 8);
          uint64_t v171 = *v170;
          if ((*((_BYTE *)v170 + 33) & 0x10) != 0)
          {
            unint64_t v181 = *(unsigned int **)(a1 + 8);
            unint64_t v172 = *v170;
            do
            {
              unint64_t v181 = (unsigned int *)((char *)v181 + v171);
              uint64_t v171 = *v181;
              v172 += v171;
            }

            while ((*((_BYTE *)v181 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v172 = *v170;
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v170, v172);
          uint64_t v182 = *(void *)(v162 + 104);
          uint64_t v183 = *(unsigned __int16 *)(v162 + 96);
          uint64_t v184 = *(unsigned int *)(v162 + 80);
          uint64_t v185 = *(void *)(a1 + 8);
          *(void *)(v185 + 8) = 0LL;
          *(void *)(v185 + 16) = 0LL;
          *(void *)(v185 + 24) = 0LL;
          *(_DWORD *)(v185 + 32) = 1;
          *(void *)(v185 + 36) = 0x6C756C756C7543LL;
          *(void *)uint64_t v185 = 0xFFFFC25E0000002CLL;
          *(void *)(v185 + 44) = v1577;
          *(void *)(v185 + 52) = v182;
          *(void *)(v185 + 60) = v183;
          *(void *)(v185 + 68) = v184;
          *(_DWORD *)(v185 + 76) = 116;
          *(void *)(v185 + 80) = v167;
          *(_DWORD *)uint64_t v185 = 88;
          uint64_t v186 = *(unsigned int **)(a1 + 8);
          unint64_t v187 = *v186;
          if ((*((_BYTE *)v186 + 33) & 0x10) != 0)
          {
            uint64_t v188 = *v186;
            uint64_t v189 = *(unsigned int **)(a1 + 8);
            do
            {
              uint64_t v189 = (unsigned int *)((char *)v189 + v188);
              uint64_t v188 = *v189;
              v187 += v188;
            }

            while ((*((_BYTE *)v189 + 33) & 0x20) == 0);
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v186, v187);
          *(void *)__str = *(void *)(v162 + 8);
          uint64_t v190 = *find_entry(v156, __str, 8uLL, 0LL);
          if (v190) {
            uint64_t v191 = *(void *)(v190 + 32);
          }
          else {
            uint64_t v191 = 0LL;
          }
          WriteGTMTLSMBuffer_restore(a1, v191, v167);
          WriteGTMTLSMBuffer_properties((void *)a1, v162, (uint64_t)v166, v155);
          WriteGTMTLSMBuffer_debugMarkers(a1, a2, v166);
          WriteGTMTLSMBuffer_resources(a1, a2, v162);
          uint64_t v204 = *(void *)a1;
          uint64_t v205 = *(void *)(a1 + 8);
          *(void *)(v205 + 16) = 0LL;
          *(void *)(v205 + 24) = 0LL;
          *(void *)(v205 + 8) = 0LL;
          *(_DWORD *)(v205 + 32) = 70;
          *(_DWORD *)(v205 + 36) = 67;
          *(void *)uint64_t v205 = 0xFFFFD00800000028LL;
          *(void *)(v205 + 40) = v204;
          *(_DWORD *)uint64_t v205 = 48;
          uint64_t v206 = *(void *)(a1 + 24);
          uint64_t v207 = *(unsigned int **)(a1 + 8);
          unint64_t v208 = *v207;
          if ((*((_BYTE *)v207 + 33) & 0x10) != 0)
          {
            v209 = *(unsigned int **)(a1 + 8);
            unint64_t v210 = *v207;
            do
            {
              v209 = (unsigned int *)((char *)v209 + v208);
              unint64_t v208 = *v209;
              v210 += v208;
            }

            while ((*((_BYTE *)v209 + 33) & 0x20) == 0);
            goto LABEL_183;
          }

LABEL_180:
          unint64_t v210 = v208;
LABEL_183:
          fbstream_write(v206, (uint64_t)v207, v210);
        }
      }

      uint64_t v173 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "acceleration-structure";
      *(_OWORD *)&__str[16] = (unint64_t)v167;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v173, *(unsigned int *)(a1 + 16), v165, 0LL);
      uint64_t v174 = *(unsigned int **)(a1 + 8);
      uint64_t v175 = *v174;
      if ((*((_BYTE *)v174 + 33) & 0x10) != 0)
      {
        uint64_t v192 = *(unsigned int **)(a1 + 8);
        unint64_t v176 = *v174;
        do
        {
          uint64_t v192 = (unsigned int *)((char *)v192 + v175);
          uint64_t v175 = *v192;
          v176 += v175;
        }

        while ((*((_BYTE *)v192 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v176 = *v174;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v174, v176);
      *(void *)__str = *(void *)(v162 + 8);
      unint64_t v193 = find_entry(v155, __str, 8uLL, 0LL);
      if (*v193) {
        uint64_t v194 = *(void *)(*v193 + 32LL);
      }
      else {
        uint64_t v194 = 0LL;
      }
      *(void *)__str = *(void *)(v162 + 8);
      find_entry(v156, __str, 8uLL, 0LL);
      uint64_t v211 = *(void *)(v162 + 152);
      uint64_t v212 = *(void *)(v162 + 184);
      uint64_t v213 = *(unsigned int *)(v162 + 80);
      uint64_t v214 = *(void *)(a1 + 8);
      *(void *)(v214 + 8) = 0LL;
      *(void *)(v214 + 16) = 0LL;
      *(void *)(v214 + 24) = 0LL;
      if (v211)
      {
        int v215 = 88;
        uint64_t v216 = 52LL;
        *(_DWORD *)(v214 + 32) = 1;
        *(void *)(v214 + 36) = 0x77756C756C7543LL;
        uint64_t v217 = v212;
        uint64_t v218 = 60LL;
        uint64_t v212 = v213;
        uint64_t v219 = 68LL;
        *(void *)uint64_t v214 = 0xFFFFC4080000002CLL;
        uint64_t v213 = v211;
        *(void *)(v214 + 44) = v1577;
        uint64_t v220 = 76LL;
        uint64_t v221 = 78LL;
        uint64_t v222 = 80LL;
      }

      else
      {
        *(void *)uint64_t v214 = 0xFFFFC40700000024LL;
        int v215 = 80;
        uint64_t v216 = 44LL;
        uint64_t v217 = v1577;
        uint64_t v218 = 52LL;
        *(void *)(v214 + 32) = 0x756C754300000001LL;
        uint64_t v219 = 60LL;
        *(_DWORD *)(v214 + 40) = 108;
        uint64_t v220 = 68LL;
        uint64_t v221 = 70LL;
        uint64_t v222 = 72LL;
      }

      *(void *)(v214 + v216) = v217;
      *(void *)(v214 + v218) = v212;
      *(void *)(v214 + v219) = v213;
      *(_WORD *)(v214 + v220) = 116;
      *(_WORD *)(v214 + v221) = 0;
      *(void *)(v214 + v222) = v167;
      *(_DWORD *)uint64_t v214 = v215;
      v226 = *(unsigned int **)(a1 + 8);
      uint64_t v227 = *v226;
      if ((*((_BYTE *)v226 + 33) & 0x10) != 0)
      {
        v229 = *(unsigned int **)(a1 + 8);
        unint64_t v228 = *v226;
        do
        {
          v229 = (unsigned int *)((char *)v229 + v227);
          uint64_t v227 = *v229;
          v228 += v227;
        }

        while ((*((_BYTE *)v229 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v228 = *v226;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v226, v228);
      WriteAccelerationStructureInfo(a1, v162, v155, 4);
      WriteGTMTLSMAccelerationStructure_properties(a1, v162, v194, v155, v230);
      uint64_t v231 = *(void *)a1;
      uint64_t v232 = *(void *)(a1 + 8);
      *(void *)(v232 + 16) = 0LL;
      *(void *)(v232 + 24) = 0LL;
      *(void *)(v232 + 8) = 0LL;
      *(_DWORD *)(v232 + 32) = 70;
      *(_DWORD *)(v232 + 36) = 67;
      *(void *)uint64_t v232 = 0xFFFFD00800000028LL;
      *(void *)(v232 + 40) = v231;
      *(_DWORD *)uint64_t v232 = 48;
      uint64_t v206 = *(void *)(a1 + 24);
      uint64_t v207 = *(unsigned int **)(a1 + 8);
      unint64_t v208 = *v207;
      if ((*((_BYTE *)v207 + 33) & 0x10) != 0)
      {
        v233 = *(unsigned int **)(a1 + 8);
        unint64_t v210 = *v207;
        do
        {
          v233 = (unsigned int *)((char *)v233 + v208);
          unint64_t v208 = *v233;
          v210 += v208;
        }

        while ((*((_BYTE *)v233 + 33) & 0x20) == 0);
        goto LABEL_183;
      }

      goto LABEL_180;
    }

    if (*(_BYTE *)(*(void *)(v15 + 48) + 19LL)) {
      goto LABEL_208;
    }
    uint64_t v1576 = *(void *)(a2 + 16);
    uint64_t v59 = *(void *)(a2 + 520);
    uint64_t v1569 = *(void *)(a2 + 496);
    unint64_t v60 = *(void *)(a2 + 40);
    *(void *)__str = *(void *)(v15 + 8);
    uint64_t v61 = *find_entry(v59, __str, 8uLL, 0LL);
    if (!v61) {
      goto LABEL_208;
    }
    uint64_t v62 = *(void *)(v61 + 32);
    if (!v62) {
      goto LABEL_208;
    }
    qsort( *(void **)(v62 + 24),  *(int *)(v62 + 12),  *(int *)(v62 + 8),  (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
    apr_pool_create_ex(newpool, 0LL, 0LL, 0LL);
    uint64_t v63 = newpool[0];
    unint64_t v64 = apr_array_make(newpool[0], 32, 8);
    *(void *)__str = *(void *)(v15 + 8);
    uint64_t v65 = find_entry(v1576, __str, 8uLL, 0LL);
    uint64_t v66 = 0LL;
    uint64_t v1568 = *(void *)(*(void *)(*v65 + 32LL) + 8LL);
    uint64_t v1573 = v62;
    do
    {
      uint64_t v67 = *(void *)(*(void *)(v62 + 24) + 8 * v66);
      if (v67) {
        uint64_t v68 = *(void *)(v67 + 8);
      }
      else {
        uint64_t v68 = 0LL;
      }
      *(void *)__str = v68;
      uint64_t v69 = *find_entry(v1576, __str, 8uLL, 0LL);
      if (v69) {
        uint64_t v70 = *(void **)(v69 + 32);
      }
      else {
        uint64_t v70 = 0LL;
      }
      uint64_t v71 = v70[1];
      WriteMakeAliasable(a1, a2, (uint64_t)v64, *(void *)(v67 + 16));
      int v73 = *(_DWORD *)v67;
      if (*(_DWORD *)v67 == 16)
      {
        uint64_t v82 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "acceleration-structure";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v82, *(unsigned int *)(a1 + 16), v72, 0LL);
        unint64_t v83 = *(unsigned int **)(a1 + 8);
        uint64_t v84 = *v83;
        if ((*((_BYTE *)v83 + 33) & 0x10) != 0)
        {
          unint64_t v102 = *(unsigned int **)(a1 + 8);
          unint64_t v85 = *v83;
          do
          {
            unint64_t v102 = (unsigned int *)((char *)v102 + v84);
            uint64_t v84 = *v102;
            v85 += v84;
          }

          while ((*((_BYTE *)v102 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v85 = *v83;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v83, v85);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v103 = find_entry(v1576, __str, 8uLL, 0LL);
        if (*v103) {
          uint64_t v104 = *(void *)(*v103 + 32LL);
        }
        else {
          uint64_t v104 = 0LL;
        }
        *(void *)__str = *(void *)(v67 + 8);
        find_entry(v1569, __str, 8uLL, 0LL);
        uint64_t v115 = *(void *)(v67 + 152);
        uint64_t v116 = *(void *)(v67 + 184);
        uint64_t v117 = *(void *)(a1 + 8);
        *(void *)(v117 + 8) = 0LL;
        *(void *)(v117 + 16) = 0LL;
        *(void *)(v117 + 24) = 0LL;
        if (v115)
        {
          *(void *)uint64_t v117 = 0xFFFFC40900000024LL;
          *(void *)(v117 + 32) = 0x756C754300000001LL;
          int v118 = 80;
          uint64_t v119 = 52LL;
          uint64_t v120 = v116;
          uint64_t v121 = 60LL;
          uint64_t v116 = v115;
          *(_DWORD *)(v117 + 40) = 119;
          uint64_t v122 = 68LL;
          uint64_t v123 = 70LL;
          *(void *)(v117 + 44) = v1568;
          uint64_t v124 = 72LL;
        }

        else
        {
          *(void *)(v117 + 32) = 0x6C754300000001LL;
          int v118 = 68;
          uint64_t v119 = 40LL;
          uint64_t v120 = v1568;
          *(void *)uint64_t v117 = 0xFFFFC40600000028LL;
          uint64_t v121 = 48LL;
          uint64_t v122 = 56LL;
          uint64_t v123 = 58LL;
          uint64_t v124 = 60LL;
        }

        *(void *)(v117 + v119) = v120;
        *(void *)(v117 + v121) = v116;
        *(_WORD *)(v117 + v122) = 116;
        *(_WORD *)(v117 + v123) = 0;
        *(void *)(v117 + v124) = v71;
        *(_DWORD *)uint64_t v117 = v118;
        uint64_t v128 = *(unsigned int **)(a1 + 8);
        uint64_t v129 = *v128;
        if ((*((_BYTE *)v128 + 33) & 0x10) != 0)
        {
          uint64_t v131 = *(unsigned int **)(a1 + 8);
          unint64_t v130 = *v128;
          do
          {
            uint64_t v131 = (unsigned int *)((char *)v131 + v129);
            uint64_t v129 = *v131;
            v130 += v129;
          }

          while ((*((_BYTE *)v131 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v130 = *v128;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v128, v130);
        WriteAccelerationStructureInfo(a1, v67, v1576, 4);
        WriteGTMTLSMAccelerationStructure_properties(a1, v67, v104, v1576, v132);
        uint64_t v133 = *(void *)a1;
        uint64_t v134 = *(void *)(a1 + 8);
        *(void *)(v134 + 16) = 0LL;
        *(void *)(v134 + 24) = 0LL;
        *(void *)(v134 + 8) = 0LL;
        *(_DWORD *)(v134 + 32) = 70;
        *(_DWORD *)(v134 + 36) = 67;
        *(void *)uint64_t v134 = 0xFFFFD00800000028LL;
        *(void *)(v134 + 40) = v133;
        *(_DWORD *)uint64_t v134 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((_BYTE *)v111 + 33) & 0x10) != 0)
        {
          uint64_t v135 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            uint64_t v135 = (unsigned int *)((char *)v135 + v112);
            unint64_t v112 = *v135;
            v114 += v112;
          }

          while ((*((_BYTE *)v135 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }

      else if (v73 == 80)
      {
        unint64_t v78 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "texture";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v78, *(unsigned int *)(a1 + 16), v72, 0LL);
        uint64_t v79 = *(unsigned int **)(a1 + 8);
        uint64_t v80 = *v79;
        if ((*((_BYTE *)v79 + 33) & 0x10) != 0)
        {
          uint64_t v86 = *(unsigned int **)(a1 + 8);
          unint64_t v81 = *v79;
          do
          {
            uint64_t v86 = (unsigned int *)((char *)v86 + v80);
            uint64_t v80 = *v86;
            v81 += v80;
          }

          while ((*((_BYTE *)v86 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v81 = *v79;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v79, v81);
        *(void *)__str = v1568;
        *(void *)&__str[8] = v71;
        uint64_t v87 = *(void *)(v67 + 104);
        uint64_t v88 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v87, v88, __s);
        DYTraceEncode_MTLHeap_newTextureWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        unint64_t v89 = *(unsigned int **)(a1 + 8);
        uint64_t v90 = *v89;
        if ((*((_BYTE *)v89 + 33) & 0x10) != 0)
        {
          unint64_t v92 = *(unsigned int **)(a1 + 8);
          unint64_t v91 = *v89;
          do
          {
            unint64_t v92 = (unsigned int *)((char *)v92 + v90);
            uint64_t v90 = *v92;
            v91 += v90;
          }

          while ((*((_BYTE *)v92 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v91 = *v89;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v89, v91);
        WriteGTMTLSMTexture_properties((void *)a1, v67, (uint64_t)v70, v1576);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v93 = *find_entry(v1569, __str, 8uLL, 0LL);
        if (v93) {
          uint64_t v94 = *(void *)(v93 + 32);
        }
        else {
          uint64_t v94 = 0LL;
        }
        WriteGTMTLSMTexture_downloads(a1, v67, v94, 0, v71);
        WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v67);
        uint64_t v108 = *(void *)a1;
        uint64_t v109 = *(void *)(a1 + 8);
        *(void *)(v109 + 16) = 0LL;
        *(void *)(v109 + 24) = 0LL;
        *(void *)(v109 + 8) = 0LL;
        *(_DWORD *)(v109 + 32) = 70;
        *(_DWORD *)(v109 + 36) = 67;
        *(void *)uint64_t v109 = 0xFFFFD00800000028LL;
        *(void *)(v109 + 40) = v108;
        *(_DWORD *)uint64_t v109 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((_BYTE *)v111 + 33) & 0x10) != 0)
        {
          uint64_t v113 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            uint64_t v113 = (unsigned int *)((char *)v113 + v112);
            unint64_t v112 = *v113;
            v114 += v112;
          }

          while ((*((_BYTE *)v113 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }

      else
      {
        if (v73 != 22) {
          goto LABEL_99;
        }
        uint64_t v74 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "buffer";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v74, *(unsigned int *)(a1 + 16), v72, 0LL);
        uint64_t v75 = *(unsigned int **)(a1 + 8);
        uint64_t v76 = *v75;
        if ((*((_BYTE *)v75 + 33) & 0x10) != 0)
        {
          uint64_t v95 = *(unsigned int **)(a1 + 8);
          unint64_t v77 = *v75;
          do
          {
            uint64_t v95 = (unsigned int *)((char *)v95 + v76);
            uint64_t v76 = *v95;
            v77 += v76;
          }

          while ((*((_BYTE *)v95 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v77 = *v75;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v75, v77);
        uint64_t v96 = *(void *)(v67 + 104);
        uint64_t v97 = *(unsigned __int16 *)(v67 + 96);
        uint64_t v98 = *(void *)(a1 + 8);
        *(void *)(v98 + 8) = 0LL;
        *(void *)(v98 + 16) = 0LL;
        *(void *)(v98 + 24) = 0LL;
        *(void *)uint64_t v98 = 0xFFFFC10B00000024LL;
        *(_DWORD *)(v98 + 32) = 1;
        *(void *)(v98 + 36) = 0x6C756C7543LL;
        *(void *)(v98 + 44) = v1568;
        *(void *)(v98 + 52) = v96;
        *(void *)(v98 + 60) = v97;
        *(_DWORD *)(v98 + 68) = 116;
        *(void *)(v98 + 72) = v71;
        *(_DWORD *)uint64_t v98 = 80;
        uint64_t v99 = *(unsigned int **)(a1 + 8);
        uint64_t v100 = *v99;
        if ((*((_BYTE *)v99 + 33) & 0x10) != 0)
        {
          char v105 = *(unsigned int **)(a1 + 8);
          unint64_t v101 = *v99;
          do
          {
            char v105 = (unsigned int *)((char *)v105 + v100);
            uint64_t v100 = *v105;
            v101 += v100;
          }

          while ((*((_BYTE *)v105 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v101 = *v99;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v99, v101);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v106 = *find_entry(v1569, __str, 8uLL, 0LL);
        if (v106) {
          uint64_t v107 = *(void *)(v106 + 32);
        }
        else {
          uint64_t v107 = 0LL;
        }
        WriteGTMTLSMBuffer_restore(a1, v107, v71);
        WriteGTMTLSMBuffer_properties((void *)a1, v67, (uint64_t)v70, v1576);
        WriteGTMTLSMBuffer_debugMarkers(a1, a2, v70);
        WriteGTMTLSMBuffer_resources(a1, a2, v67);
        uint64_t v125 = *(void *)a1;
        uint64_t v126 = *(void *)(a1 + 8);
        *(void *)(v126 + 16) = 0LL;
        *(void *)(v126 + 24) = 0LL;
        *(void *)(v126 + 8) = 0LL;
        *(_DWORD *)(v126 + 32) = 70;
        *(_DWORD *)(v126 + 36) = 67;
        *(void *)uint64_t v126 = 0xFFFFD00800000028LL;
        *(void *)(v126 + 40) = v125;
        *(_DWORD *)uint64_t v126 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((_BYTE *)v111 + 33) & 0x10) != 0)
        {
          unint64_t v127 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            unint64_t v127 = (unsigned int *)((char *)v127 + v112);
            unint64_t v112 = *v127;
            v114 += v112;
          }

          while ((*((_BYTE *)v127 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }

      unint64_t v114 = v112;
LABEL_98:
      fbstream_write(v110, (uint64_t)v111, v114);
LABEL_99:
      uint64_t v136 = v70[4];
      if (v136)
      {
        unsigned int v137 = 0;
        uint64_t v62 = v1573;
        while (1)
        {
          unsigned int v138 = atomic_load((unsigned int *)(v136 + 4));
          uint64_t v139 = v137 + (v138 >> 6) - 1;
          uint64_t v136 = *(void *)(v136 + 40);
          unsigned int v137 = v139;
          if (!v136)
          {
            unsigned int v137 = v139;
            goto LABEL_106;
          }
        }

        uint64_t v139 = 0LL;
      }

      else
      {
        unsigned int v137 = 0;
        uint64_t v139 = 0LL;
        uint64_t v62 = v1573;
      }

LABEL_315:
      if (++v354 >= v353) {
        goto LABEL_320;
      }
    }

    *(void *)__str = *(void *)(v355 + 8);
    uint64_t v357 = *(void *)(*find_entry(v344, __str, 8uLL, 0LL) + 32LL);
    uint64_t v358 = *(void *)(v357 + 8);
    v359 = *(unsigned int **)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = "texture";
    uint64_t v1579 = v358;
    *(_OWORD *)&__str[16] = (unint64_t)v358;
    DYTraceEncode_EnterStateGroup((uint64_t)__str, v359, *(unsigned int *)(a1 + 16), v360, 0LL);
    v361 = *(unsigned int **)(a1 + 8);
    uint64_t v362 = *v361;
    if ((*((_BYTE *)v361 + 33) & 0x10) != 0)
    {
      v364 = *(unsigned int **)(a1 + 8);
      unint64_t v363 = *v361;
      do
      {
        v364 = (unsigned int *)((char *)v364 + v362);
        uint64_t v362 = *v364;
        v363 += v362;
      }

      while ((*((_BYTE *)v364 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v363 = *v361;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v361, v363);
    *(void *)__str = *(void *)(v355 + 8);
    v365 = (void *)*find_entry(v344, __str, 8uLL, 0LL);
    if (v365) {
      v365 = (void *)v365[4];
    }
    uint64_t v366 = v365[1];
    uint64_t v367 = *(void *)(v355 + 120);
    if (v367)
    {
      uint64_t v368 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v366;
      uint64_t v369 = *(void *)(v355 + 104);
      *(void *)&__str[32] = *(void *)(v355 + 152);
      uint64_t v370 = v368 + *(unsigned int *)(a1 + 16);
      *(void *)__s = 512LL;
      uint64_t v371 = *(void *)(a1 + 32);
      *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(v371, v369, v370 - 512, __s);
      *(void *)&__str[24] = StoreIOSurfaceUsingEncode(v371, v367, v370 - *(void *)__s, __s);
      DYTraceEncode_MTLDevice_newTextureWithDescriptor_iosurface_plane( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      uint64_t v372 = *(void *)(v355 + 120);
      v373 = *(unsigned int **)(a1 + 8);
      v373[8] |= 0x1000u;
      v374 = (unsigned int *)((char *)v373 + *v373);
      unsigned int v375 = *(_DWORD *)(v372 + 84);
      __s[0] = *(_DWORD *)(v372 + 88);
      __s[1] = 0;
      *(void *)__str = *(void *)v372;
      *(void *)&__str[8] = 119LL;
      *(void *)&__str[16] = __s;
      *(void *)&__str[24] = "";
      *(void *)&__str[32] = "";
      *(void *)&__str[40] = v375;
      DYTraceEncode_InternalData((uint64_t)__str, v374, *(unsigned int *)(a1 + 16), v376, 0LL);
      v374[8] |= 0x2000u;
      v377 = *(unsigned int **)(a1 + 8);
      uint64_t v378 = *v377;
      if ((*((_BYTE *)v377 + 33) & 0x10) == 0)
      {
        unint64_t v379 = *v377;
        uint64_t v344 = v1583;
        goto LABEL_306;
      }

      v388 = *(unsigned int **)(a1 + 8);
      unint64_t v379 = *v377;
      uint64_t v344 = v1583;
      v345 = v1567;
      do
      {
        v388 = (unsigned int *)((char *)v388 + v378);
        uint64_t v378 = *v388;
        v379 += v378;
      }

      while ((*((_BYTE *)v388 + 33) & 0x20) == 0);
    }

    else
    {
      if (*(_BYTE *)(v355 + 214))
      {
        uint64_t v380 = v365[4];
        if (v380) {
          uint64_t v381 = v380 + 64;
        }
        else {
          uint64_t v381 = 0LL;
        }
        v382 = GTTraceFunc_argumentBytesWithPool((uint64_t *)v381, *(unsigned __int8 *)(v381 + 13), v365[3]);
        uint64_t v383 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v366;
        uint64_t v384 = *(void *)(v355 + 104);
        *(void *)&__str[24] = *((void *)v382 + 2);
        uint64_t v385 = v383 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v384, v385, __s);
        DYTraceEncode_MTLDevice_newSharedTextureWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        v377 = *(unsigned int **)(a1 + 8);
        unint64_t v386 = *v377;
        if ((*((_BYTE *)v377 + 33) & 0x10) != 0)
        {
          v387 = *(unsigned int **)(a1 + 8);
          unint64_t v379 = *v377;
          v345 = v1567;
          do
          {
            v387 = (unsigned int *)((char *)v387 + v386);
            unint64_t v386 = *v387;
            v379 += v386;
          }

          while ((*((_BYTE *)v387 + 33) & 0x20) == 0);
          goto LABEL_307;
        }
      }

      else
      {
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v366;
        uint64_t v389 = *(void *)(v355 + 104);
        *(void *)__s = *(void *)(v355 + 184);
        *(void *)&__str[24] = *(void *)(*(void *)(*find_entry(v344, __s, 8uLL, 0LL) + 32LL) + 8LL);
        uint64_t v390 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v389, v390, __s);
        DYTraceEncode_MTLDevice_newTextureWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        v377 = *(unsigned int **)(a1 + 8);
        unint64_t v386 = *v377;
        if ((*((_BYTE *)v377 + 33) & 0x10) != 0)
        {
          v399 = *(unsigned int **)(a1 + 8);
          unint64_t v379 = *v377;
          v345 = v1567;
          do
          {
            v399 = (unsigned int *)((char *)v399 + v386);
            unint64_t v386 = *v399;
            v379 += v386;
          }

          while ((*((_BYTE *)v399 + 33) & 0x20) == 0);
          goto LABEL_307;
        }
      }

      unint64_t v379 = v386;
LABEL_306:
      v345 = v1567;
    }

LABEL_307:
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v377, v379);
    WriteGTMTLSMTexture_properties((void *)a1, v355, v357, v344);
    *(void *)__str = *(void *)(v355 + 8);
    uint64_t v391 = *find_entry(v1575, __str, 8uLL, 0LL);
    if (v391) {
      uint64_t v392 = *(void *)(v391 + 32);
    }
    else {
      uint64_t v392 = 0LL;
    }
    WriteGTMTLSMTexture_downloads(a1, v355, v392, 0, v1579);
    WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v355);
    uint64_t v393 = *(void *)a1;
    uint64_t v394 = *(void *)(a1 + 8);
    *(void *)(v394 + 16) = 0LL;
    *(void *)(v394 + 24) = 0LL;
    *(void *)(v394 + 8) = 0LL;
    *(_DWORD *)(v394 + 32) = 70;
    *(_DWORD *)(v394 + 36) = 67;
    *(void *)uint64_t v394 = 0xFFFFD00800000028LL;
    *(void *)(v394 + 40) = v393;
    *(_DWORD *)uint64_t v394 = 48;
    v395 = *(unsigned int **)(a1 + 8);
    uint64_t v396 = *v395;
    if ((*((_BYTE *)v395 + 33) & 0x10) != 0)
    {
      v398 = *(unsigned int **)(a1 + 8);
      unint64_t v397 = *v395;
      do
      {
        v398 = (unsigned int *)((char *)v398 + v396);
        uint64_t v396 = *v398;
        v397 += v396;
      }

      while ((*((_BYTE *)v398 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v397 = *v395;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v395, v397);
    int v353 = a3[1].nelts;
    goto LABEL_315;
  }

        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
        uint64_t v134 = (_BYTE *)(&v184[3] - p_n_4);
        if (v171 >= &v184[3] - p_n_4) {
          unint64_t v140 = 1;
        }
        else {
          unint64_t v140 = v17;
        }
        if (!v140) {
          uint64_t v134 = (_BYTE *)v171;
        }
      }

      else
      {
        uint64_t v41 = flush_func;
        if (v38 != 112)
        {
LABEL_202:
          LOBYTE(v36) = 0;
          LOBYTE(v16) = 0;
          uint64_t v177 = (_BYTE *)&dword_8;
          v178 += 8;
          p_n_4 = "bogus %p";
          goto LABEL_384;
        }

        unint64_t v81 = (unint64_t *)v178;
        v178 += 8;
        uint64_t v82 = *v81;
        if (HIDWORD(v82))
        {
          p_n_4 = &v184[3];
          do
          {
            *--p_n_4 = conv_p2_low_digits[v82 & 0xF];
            uint64_t v76 = v82 > 0xF;
            v82 >>= 4;
          }

          while (v76);
        }

        else
        {
          p_n_4 = &v184[3];
          do
          {
            *--p_n_4 = conv_p2_low_digits[v82 & 0xF];
            uint64_t v66 = v82 >= 0x10;
            LODWORD(v82) = v82 >> 4;
          }

          while (v66);
        }

        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
        uint64_t v134 = (_BYTE *)(&v184[3] - p_n_4);
      }

      uint64_t v177 = v134;
      uint64_t v18 = 32;
      goto LABEL_313;
    case 's':
      uint64_t v90 = (const char **)v178;
      v178 += 8;
      p_n_4 = *v90;
      if (!*v90)
      {
        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
        uint64_t v177 = (_BYTE *)(&dword_4 + 2);
        uint64_t v18 = 32;
        p_n_4 = "(null)";
        goto LABEL_297;
      }

      if ((v17 & 1) != 0)
      {
        unint64_t v91 = strlen(*v90);
        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
        uint64_t v177 = (_BYTE *)v91;
        goto LABEL_142;
      }

      uint64_t v177 = 0LL;
      uint64_t v41 = flush_func;
      LOBYTE(v36) = v171;
      unint64_t v42 = v174;
      if (v171)
      {
        unsigned int v137 = 0LL;
        while (p_n_4[v137])
        {
          uint64_t v177 = (_BYTE *)++v137;
          uint64_t v18 = 32;
          if (v171 == v137)
          {
LABEL_301:
            LOBYTE(v36) = 0;
            LOBYTE(v16) = 0;
            goto LABEL_384;
          }
        }

        LOBYTE(v36) = 0;
      }

      else
      {
        uint64_t v171 = 0LL;
      }

      LOBYTE(v16) = 0;
      goto LABEL_352;
    case 'u':
      if (v33)
      {
        unint64_t v92 = (unint64_t *)v178;
        v178 += 8;
        uint64_t v93 = v17;
        uint64_t v94 = conv_10_quad(*v92, 1, &v175, (uint64_t)&v184[3], &v177);
        uint64_t v17 = v93;
        p_n_4 = (const char *)v94;
      }

      else
      {
        unint64_t v127 = (unsigned int *)v178;
        v178 += 8;
        uint64_t v128 = *v127;
        if ((_DWORD)v36) {
          uint64_t v129 = (unsigned __int16)v128;
        }
        else {
          uint64_t v129 = v128;
        }
        uint64_t v175 = 0;
        p_n_4 = &v184[3];
        do
        {
          *--p_n_4 = v129 % 0xA + 48;
          uint64_t v76 = v129 > 9;
          v129 /= 0xAu;
        }

        while (v76);
        uint64_t v177 = (_BYTE *)(&v184[3] - p_n_4);
      }

      uint64_t v41 = flush_func;
      if ((v17 & 1) != 0)
      {
        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
      }

      else
      {
        unint64_t v130 = 511LL;
        if (v171 + 1 < 0x200) {
          unint64_t v130 = v171;
        }
        LOBYTE(v36) = 0;
        LOBYTE(v16) = 0;
      }

      goto LABEL_313;
    case 'x':
      goto LABEL_94;
    default:
      if (v37 == 71)
      {
LABEL_104:
        int v168 = v5;
        uint64_t v70 = v171;
        if (v171 <= 1) {
          uint64_t v70 = 1LL;
        }
        if ((_DWORD)v17) {
          uint64_t v71 = 6LL;
        }
        else {
          uint64_t v71 = v70;
        }
        uint64_t v72 = (double *)v178;
        v178 += 8;
        apr_cvt(v71, &__n, &v184[3], 1, __s, *v72);
        int v73 = __n_5;
        if (*(_DWORD *)&v184[3])
        {
          __n_5[0] = 45;
          int v73 = &__n_6;
        }

        uint64_t v171 = v71;
        if ((int)v71 >= 2)
        {
          uint64_t v71 = v71;
          do
          {
            uint64_t v74 = v71 - 1;
            --v71;
          }

          while ((unint64_t)(v74 + 1) > 2);
          LODWORD(v71) = 1;
        }

LABEL_320:
  uint64_t v400 = *(void *)a1;
  uint64_t v401 = *(void *)(a1 + 8);
  *(void *)(v401 + 16) = 0LL;
  *(void *)(v401 + 24) = 0LL;
  *(void *)(v401 + 8) = 0LL;
  *(_DWORD *)(v401 + 32) = 70;
  *(_DWORD *)(v401 + 36) = 67;
  *(void *)uint64_t v401 = 0xFFFFD00800000028LL;
  *(void *)(v401 + 40) = v400;
  *(_DWORD *)uint64_t v401 = 48;
  v402 = *(unsigned int **)(a1 + 8);
  uint64_t v403 = *v402;
  if ((*((_BYTE *)v402 + 33) & 0x10) != 0)
  {
    v405 = *(unsigned int **)(a1 + 8);
    unint64_t v404 = *v402;
    do
    {
      v405 = (unsigned int *)((char *)v405 + v403);
      uint64_t v403 = *v405;
      v404 += v403;
    }

    while ((*((_BYTE *)v405 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v404 = *v402;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v402, v404);
  v406 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "libraries";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v406, *(unsigned int *)(a1 + 16), v407, 0LL);
  v408 = *(unsigned int **)(a1 + 8);
  uint64_t v409 = *v408;
  if ((*((_BYTE *)v408 + 33) & 0x10) != 0)
  {
    v411 = *(unsigned int **)(a1 + 8);
    unint64_t v410 = *v408;
    do
    {
      v411 = (unsigned int *)((char *)v411 + v409);
      uint64_t v409 = *v411;
      v410 += v409;
    }

    while ((*((_BYTE *)v411 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v410 = *v408;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v408, v410);
  v412 = apr_array_copy(v345, a3 + 10);
  apr_array_cat(v412, a3 + 11);
  qsort(v412->elts, v412->nelts, v412->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v412->nelts >= 1)
  {
    uint64_t v413 = 0LL;
    do
    {
      v414 = *(void **)&v412->elts[8 * v413];
      if (*(_DWORD *)v414 == 37)
      {
        WriteGTMTLSMDynamicLibrary(a1, a2, v414, v344);
      }

      else if (*(_DWORD *)v414 == 62)
      {
        WriteGTMTLSMLibrary(a1, a2, (uint64_t)v414);
      }

      ++v413;
    }

    while (v413 < v412->nelts);
  }

  uint64_t v415 = *(void *)a1;
  uint64_t v416 = *(void *)(a1 + 8);
  *(void *)(v416 + 16) = 0LL;
  *(void *)(v416 + 24) = 0LL;
  *(void *)(v416 + 8) = 0LL;
  *(_DWORD *)(v416 + 32) = 70;
  *(_DWORD *)(v416 + 36) = 67;
  *(void *)uint64_t v416 = 0xFFFFD00800000028LL;
  *(void *)(v416 + 40) = v415;
  *(_DWORD *)uint64_t v416 = 48;
  v417 = *(unsigned int **)(a1 + 8);
  uint64_t v418 = *v417;
  if ((*((_BYTE *)v417 + 33) & 0x10) != 0)
  {
    v420 = *(unsigned int **)(a1 + 8);
    unint64_t v419 = *v417;
    do
    {
      v420 = (unsigned int *)((char *)v420 + v418);
      uint64_t v418 = *v420;
      v419 += v418;
    }

    while ((*((_BYTE *)v420 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v419 = *v417;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v417, v419);
  uint64_t v421 = *(void *)(a2 + 16);
  v422 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "gl-metal";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v422, *(unsigned int *)(a1 + 16), v423, 0LL);
  v424 = *(unsigned int **)(a1 + 8);
  uint64_t v425 = *v424;
  if ((*((_BYTE *)v424 + 33) & 0x10) != 0)
  {
    v427 = *(unsigned int **)(a1 + 8);
    unint64_t v426 = *v424;
    do
    {
      v427 = (unsigned int *)((char *)v427 + v425);
      uint64_t v425 = *v427;
      v426 += v425;
    }

    while ((*((_BYTE *)v427 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v426 = *v424;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v424, v426);
  v428 = (apr_pool_t **)apr_hash_make(v345);
  int v429 = a3[3].nelts;
  if (v429 >= 1)
  {
    for (uint64_t j = 0LL; j < v429; ++j)
    {
      uint64_t v431 = *(void *)&a3[3].elts[8 * j];
      uint64_t v432 = *(void *)(v431 + 48);
      if (v432)
      {
        uint64_t v433 = *(void *)(v431 + 56);
        WriteGLPluginDataFunction( (uint64_t *)a1,  a2,  (uint64_t)a3,  *(void *)(v432 + 1296),  *(uint64_t **)(v433 + 128),  *(const void **)(v433 + 136),  v428);
        v434 = *(uint64_t **)(v433 + 144);
        v435 = *(const void **)(v433 + 152);
        v345 = v1567;
        WriteGLPluginDataFunction((uint64_t *)a1, a2, (uint64_t)a3, *(void *)(v432 + 1176), v434, v435, v428);
        int v429 = a3[3].nelts;
      }
    }
  }

  if (a3[4].nelts >= 1)
  {
    uint64_t v436 = 0LL;
    do
    {
      uint64_t v437 = *(void *)&a3[4].elts[8 * v436];
      uint64_t v438 = *(void *)(v437 + 64);
      GTMTLSMComputePipelineState_computePipelineDescriptor(*(uint64_t **)(a2 + 568), v437, __str, v345);
      WriteGLPluginDataFunction( (uint64_t *)a1,  a2,  (uint64_t)a3,  v1586,  *(uint64_t **)(v438 + 72),  *(const void **)(v438 + 80),  v428);
      ++v436;
    }

    while (v436 < a3[4].nelts);
  }

  if (a3[27].nelts >= 1)
  {
    uint64_t v439 = 0LL;
    do
    {
      uint64_t v440 = *(void *)&a3[27].elts[8 * v439];
      if (*(_BYTE *)(v440 + 132))
      {
        uint64_t v441 = *find_entry((uint64_t)v428, (_BYTE *)(v440 + 8), 8uLL, 0LL);
        if (!v441 || !*(void *)(v441 + 32)) {
          WriteGTMTLSMFunction(a1, v440, 0x80000, v421);
        }
      }

      ++v439;
    }

    while (v439 < a3[27].nelts);
  }

  uint64_t v442 = *(void *)a1;
  uint64_t v443 = *(void *)(a1 + 8);
  *(void *)(v443 + 16) = 0LL;
  *(void *)(v443 + 24) = 0LL;
  *(void *)(v443 + 8) = 0LL;
  *(_DWORD *)(v443 + 32) = 70;
  *(_DWORD *)(v443 + 36) = 67;
  *(void *)uint64_t v443 = 0xFFFFD00800000028LL;
  *(void *)(v443 + 40) = v442;
  *(_DWORD *)uint64_t v443 = 48;
  v444 = *(unsigned int **)(a1 + 8);
  uint64_t v445 = *v444;
  if ((*((_BYTE *)v444 + 33) & 0x10) != 0)
  {
    v447 = *(unsigned int **)(a1 + 8);
    unint64_t v446 = *v444;
    do
    {
      v447 = (unsigned int *)((char *)v447 + v445);
      uint64_t v445 = *v447;
      v446 += v445;
    }

    while ((*((_BYTE *)v447 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v446 = *v444;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v444, v446);
  v448 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "pipeline-libraries";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v448, *(unsigned int *)(a1 + 16), v449, 0LL);
  v450 = *(unsigned int **)(a1 + 8);
  uint64_t v451 = *v450;
  if ((*((_BYTE *)v450 + 33) & 0x10) != 0)
  {
    v453 = *(unsigned int **)(a1 + 8);
    unint64_t v452 = *v450;
    do
    {
      v453 = (unsigned int *)((char *)v453 + v451);
      uint64_t v451 = *v453;
      v452 += v451;
    }

    while ((*((_BYTE *)v453 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v452 = *v450;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v450, v452);
  if (a3[12].nelts >= 1)
  {
    uint64_t v454 = 0LL;
    do
    {
      uint64_t v455 = *(void *)&a3[12].elts[8 * v454];
      if (v455) {
        uint64_t v456 = *(void *)(v455 + 8);
      }
      else {
        uint64_t v456 = 0LL;
      }
      *(void *)__str = v456;
      unint64_t v457 = *(void *)(*(void *)(*find_entry(v344, __str, 8uLL, 0LL) + 32LL) + 8LL);
      if (IsAppleInternalLabel(*(void *)(v455 + 56))) {
        int v459 = 0x80000;
      }
      else {
        int v459 = 0;
      }
      v460 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "pipeline-library";
      *(_OWORD *)&__str[16] = v457;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v460, *(unsigned int *)(a1 + 16), v458, 0LL);
      v461 = *(unsigned int **)(a1 + 8);
      uint64_t v462 = *v461;
      if ((*((_BYTE *)v461 + 33) & 0x10) != 0)
      {
        v464 = *(unsigned int **)(a1 + 8);
        unint64_t v463 = *v461;
        do
        {
          v464 = (unsigned int *)((char *)v464 + v462);
          uint64_t v462 = *v464;
          v463 += v462;
        }

        while ((*((_BYTE *)v464 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v463 = *v461;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v461, v463);
      *(void *)__s = *(void *)a1;
      v1588[0] = v457;
      SaveDirPath(*(void *)(a1 + 32), *(void *)(v455 + 48), (uint64_t)__str);
      v1588[1] = __str;
      v1588[2] = 0LL;
      DYTraceEncode_MTLDevice_newPipelineLibraryWithFilePath_error( (uint64_t)__s,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      FlushChainedPipelineLibraryInfo((uint64_t *)a1, v455, v344, v459);
      if (*(void *)(v455 + 56)) {
        v465 = *(const char **)(v455 + 56);
      }
      else {
        v465 = "";
      }
      v466 = *(unsigned int **)(a1 + 8);
      *((void *)v466 + 1) = 0LL;
      *((void *)v466 + 2) = 0LL;
      *((void *)v466 + 3) = 0LL;
      *((void *)v466 + 4) = 0x534300000000LL;
      *(void *)v466 = 0xFFFFC28100000028LL;
      *((void *)v466 + 5) = v457;
      unsigned int *v466 = 48;
      AppendString(v465, (int *)v466);
      uint64_t v467 = *v466;
      uint64_t v468 = ((_DWORD)v467 + 3) & 0xFFFFFFFC;
      bzero((char *)v466 + v467, v468 - v467);
      unsigned int *v466 = v468;
      v469 = *(unsigned int **)(a1 + 8);
      unsigned int v470 = v469[8];
      v469[8] = v470 | v459;
      unint64_t v471 = *v469;
      if ((v470 & 0x1000) != 0)
      {
        uint64_t v472 = *v469;
        v473 = v469;
        do
        {
          v473 = (unsigned int *)((char *)v473 + v472);
          uint64_t v472 = *v473;
          v471 += v472;
        }

        while ((*((_BYTE *)v473 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v469, v471);
      int v474 = *(unsigned __int8 *)(v455 + 82);
      uint64_t v475 = *(void *)(a1 + 8);
      *(void *)(v475 + 16) = 0LL;
      *(void *)(v475 + 24) = 0LL;
      *(void *)(v475 + 8) = 0LL;
      *(void *)(v475 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v475 = 0xFFFFC28000000028LL;
      *(void *)(v475 + 40) = v457;
      *(_DWORD *)(v475 + 48) = v474;
      *(_DWORD *)uint64_t v475 = 52;
      v476 = *(unsigned int **)(a1 + 8);
      unsigned int v477 = v476[8];
      v476[8] = v477 | v459;
      unint64_t v478 = *v476;
      uint64_t v344 = v1583;
      if ((v477 & 0x1000) != 0)
      {
        uint64_t v479 = *v476;
        v480 = v476;
        do
        {
          v480 = (unsigned int *)((char *)v480 + v479);
          uint64_t v479 = *v480;
          v478 += v479;
        }

        while ((*((_BYTE *)v480 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v476, v478);
      uint64_t v481 = *(void *)a1;
      uint64_t v482 = *(void *)(a1 + 8);
      *(void *)(v482 + 16) = 0LL;
      *(void *)(v482 + 24) = 0LL;
      *(void *)(v482 + 8) = 0LL;
      *(_DWORD *)(v482 + 32) = 70;
      *(_DWORD *)(v482 + 36) = 67;
      *(void *)uint64_t v482 = 0xFFFFD00800000028LL;
      *(void *)(v482 + 40) = v481;
      *(_DWORD *)uint64_t v482 = 48;
      v483 = *(unsigned int **)(a1 + 8);
      uint64_t v484 = *v483;
      if ((*((_BYTE *)v483 + 33) & 0x10) != 0)
      {
        v486 = *(unsigned int **)(a1 + 8);
        unint64_t v485 = *v483;
        do
        {
          v486 = (unsigned int *)((char *)v486 + v484);
          uint64_t v484 = *v486;
          v485 += v484;
        }

        while ((*((_BYTE *)v486 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v485 = *v483;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v483, v485);
      ++v454;
    }

    while (v454 < a3[12].nelts);
  }

  uint64_t v487 = *(void *)a1;
  uint64_t v488 = *(void *)(a1 + 8);
  *(void *)(v488 + 16) = 0LL;
  *(void *)(v488 + 24) = 0LL;
  *(void *)(v488 + 8) = 0LL;
  *(_DWORD *)(v488 + 32) = 70;
  *(_DWORD *)(v488 + 36) = 67;
  *(void *)uint64_t v488 = 0xFFFFD00800000028LL;
  *(void *)(v488 + 40) = v487;
  *(_DWORD *)uint64_t v488 = 48;
  v489 = *(unsigned int **)(a1 + 8);
  uint64_t v490 = *v489;
  if ((*((_BYTE *)v489 + 33) & 0x10) != 0)
  {
    v492 = *(unsigned int **)(a1 + 8);
    unint64_t v491 = *v489;
    do
    {
      v492 = (unsigned int *)((char *)v492 + v490);
      uint64_t v490 = *v492;
      v491 += v490;
    }

    while ((*((_BYTE *)v492 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v491 = *v489;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v489, v491);
  v493 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "fences";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v493, *(unsigned int *)(a1 + 16), v494, 0LL);
  v495 = *(unsigned int **)(a1 + 8);
  uint64_t v496 = *v495;
  if ((*((_BYTE *)v495 + 33) & 0x10) != 0)
  {
    v499 = *(unsigned int **)(a1 + 8);
    unint64_t v497 = *v495;
    v498 = v1567;
    do
    {
      v499 = (unsigned int *)((char *)v499 + v496);
      uint64_t v496 = *v499;
      v497 += v496;
    }

    while ((*((_BYTE *)v499 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v497 = *v495;
    v498 = v1567;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v495, v497);
  if (a3[13].nelts >= 1)
  {
    uint64_t v500 = 0LL;
    do
    {
      uint64_t v501 = *(void *)&a3[13].elts[8 * v500];
      if (v501) {
        uint64_t v502 = *(void *)(v501 + 8);
      }
      else {
        uint64_t v502 = 0LL;
      }
      *(void *)__str = v502;
      v503 = find_entry(v344, __str, 8uLL, 0LL);
      WriteGTMTLSMFence((uint64_t *)a1, v501, *(void *)(*(void *)(*v503 + 32LL) + 8LL), v504);
      ++v500;
    }

    while (v500 < a3[13].nelts);
  }

  uint64_t v505 = *(void *)a1;
  uint64_t v506 = *(void *)(a1 + 8);
  *(void *)(v506 + 16) = 0LL;
  *(void *)(v506 + 24) = 0LL;
  *(void *)(v506 + 8) = 0LL;
  *(_DWORD *)(v506 + 32) = 70;
  *(_DWORD *)(v506 + 36) = 67;
  *(void *)uint64_t v506 = 0xFFFFD00800000028LL;
  *(void *)(v506 + 40) = v505;
  *(_DWORD *)uint64_t v506 = 48;
  v507 = *(unsigned int **)(a1 + 8);
  uint64_t v508 = *v507;
  if ((*((_BYTE *)v507 + 33) & 0x10) != 0)
  {
    v510 = *(unsigned int **)(a1 + 8);
    unint64_t v509 = *v507;
    do
    {
      v510 = (unsigned int *)((char *)v510 + v508);
      uint64_t v508 = *v510;
      v509 += v508;
    }

    while ((*((_BYTE *)v510 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v509 = *v507;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v507, v509);
  v511 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v511, *(unsigned int *)(a1 + 16), v512, 0LL);
  v513 = *(unsigned int **)(a1 + 8);
  uint64_t v514 = *v513;
  if ((*((_BYTE *)v513 + 33) & 0x10) != 0)
  {
    v516 = *(unsigned int **)(a1 + 8);
    unint64_t v515 = *v513;
    do
    {
      v516 = (unsigned int *)((char *)v516 + v514);
      uint64_t v514 = *v516;
      v515 += v514;
    }

    while ((*((_BYTE *)v516 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v515 = *v513;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v513, v515);
  if (a3[14].nelts >= 1)
  {
    uint64_t v517 = 0LL;
    do
    {
      uint64_t v518 = *(void *)&a3[14].elts[8 * v517];
      if (v518) {
        uint64_t v519 = *(void *)(v518 + 8);
      }
      else {
        uint64_t v519 = 0LL;
      }
      *(void *)__str = v519;
      v520 = find_entry(v344, __str, 8uLL, 0LL);
      WriteGTMTLSMEvent((uint64_t *)a1, v518, *(void *)(*(void *)(*v520 + 32LL) + 8LL), v521);
      ++v517;
    }

    while (v517 < a3[14].nelts);
  }

  uint64_t v522 = *(void *)a1;
  uint64_t v523 = *(void *)(a1 + 8);
  *(void *)(v523 + 16) = 0LL;
  *(void *)(v523 + 24) = 0LL;
  *(void *)(v523 + 8) = 0LL;
  *(_DWORD *)(v523 + 32) = 70;
  *(_DWORD *)(v523 + 36) = 67;
  *(void *)uint64_t v523 = 0xFFFFD00800000028LL;
  *(void *)(v523 + 40) = v522;
  *(_DWORD *)uint64_t v523 = 48;
  v524 = *(unsigned int **)(a1 + 8);
  uint64_t v525 = *v524;
  if ((*((_BYTE *)v524 + 33) & 0x10) != 0)
  {
    v527 = *(unsigned int **)(a1 + 8);
    unint64_t v526 = *v524;
    do
    {
      v527 = (unsigned int *)((char *)v527 + v525);
      uint64_t v525 = *v527;
      v526 += v525;
    }

    while ((*((_BYTE *)v527 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v526 = *v524;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v524, v526);
  v528 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "late-eval-events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v528, *(unsigned int *)(a1 + 16), v529, 0LL);
  v530 = *(unsigned int **)(a1 + 8);
  uint64_t v531 = *v530;
  if ((*((_BYTE *)v530 + 33) & 0x10) != 0)
  {
    v533 = *(unsigned int **)(a1 + 8);
    unint64_t v532 = *v530;
    do
    {
      v533 = (unsigned int *)((char *)v533 + v531);
      uint64_t v531 = *v533;
      v532 += v531;
    }

    while ((*((_BYTE *)v533 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v532 = *v530;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v530, v532);
  if (a3[16].nelts >= 1)
  {
    uint64_t v534 = 0LL;
    do
    {
      uint64_t v535 = *(void *)&a3[16].elts[8 * v534];
      if (v535) {
        uint64_t v536 = *(void *)(v535 + 8);
      }
      else {
        uint64_t v536 = 0LL;
      }
      *(void *)__str = v536;
      v537 = find_entry(v344, __str, 8uLL, 0LL);
      WriteGTMTLSMLateEvalEvent((uint64_t *)a1, v535, *(void *)(*(void *)(*v537 + 32LL) + 8LL), v538);
      ++v534;
    }

    while (v534 < a3[16].nelts);
  }

  uint64_t v539 = *(void *)a1;
  uint64_t v540 = *(void *)(a1 + 8);
  *(void *)(v540 + 16) = 0LL;
  *(void *)(v540 + 24) = 0LL;
  *(void *)(v540 + 8) = 0LL;
  *(_DWORD *)(v540 + 32) = 70;
  *(_DWORD *)(v540 + 36) = 67;
  *(void *)uint64_t v540 = 0xFFFFD00800000028LL;
  *(void *)(v540 + 40) = v539;
  *(_DWORD *)uint64_t v540 = 48;
  v541 = *(unsigned int **)(a1 + 8);
  uint64_t v542 = *v541;
  if ((*((_BYTE *)v541 + 33) & 0x10) != 0)
  {
    v544 = *(unsigned int **)(a1 + 8);
    unint64_t v543 = *v541;
    do
    {
      v544 = (unsigned int *)((char *)v544 + v542);
      uint64_t v542 = *v544;
      v543 += v542;
    }

    while ((*((_BYTE *)v544 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v543 = *v541;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v541, v543);
  v545 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "shared-events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v545, *(unsigned int *)(a1 + 16), v546, 0LL);
  v547 = *(unsigned int **)(a1 + 8);
  uint64_t v548 = *v547;
  if ((*((_BYTE *)v547 + 33) & 0x10) != 0)
  {
    v550 = *(unsigned int **)(a1 + 8);
    unint64_t v549 = *v547;
    do
    {
      v550 = (unsigned int *)((char *)v550 + v548);
      uint64_t v548 = *v550;
      v549 += v548;
    }

    while ((*((_BYTE *)v550 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v549 = *v547;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v547, v549);
  v551 = apr_hash_make(v498);
  if (a3[15].nelts >= 1)
  {
    v552 = v551;
    uint64_t v553 = 0LL;
    do
    {
      uint64_t v554 = *(void *)&a3[15].elts[8 * v553];
      if (v554) {
        uint64_t v555 = *(void *)(v554 + 8);
      }
      else {
        uint64_t v555 = 0LL;
      }
      *(void *)__str = v555;
      v556 = find_entry(v344, __str, 8uLL, 0LL);
      WriteGTMTLSMSharedEvent((uint64_t *)a1, v552, v554, *(void *)(*(void *)(*v556 + 32LL) + 8LL));
      ++v553;
    }

    while (v553 < a3[15].nelts);
  }

  uint64_t v557 = *(void *)a1;
  uint64_t v558 = *(void *)(a1 + 8);
  *(void *)(v558 + 16) = 0LL;
  *(void *)(v558 + 24) = 0LL;
  *(void *)(v558 + 8) = 0LL;
  *(_DWORD *)(v558 + 32) = 70;
  *(_DWORD *)(v558 + 36) = 67;
  *(void *)uint64_t v558 = 0xFFFFD00800000028LL;
  *(void *)(v558 + 40) = v557;
  *(_DWORD *)uint64_t v558 = 48;
  v559 = *(unsigned int **)(a1 + 8);
  uint64_t v560 = *v559;
  if ((*((_BYTE *)v559 + 33) & 0x10) != 0)
  {
    v562 = *(unsigned int **)(a1 + 8);
    unint64_t v561 = *v559;
    do
    {
      v562 = (unsigned int *)((char *)v562 + v560);
      uint64_t v560 = *v562;
      v561 += v560;
    }

    while ((*((_BYTE *)v562 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v561 = *v559;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v559, v561);
  if (a3[3].nelts <= a3[4].nelts) {
    int v563 = a3[4].nelts;
  }
  else {
    int v563 = a3[3].nelts;
  }
  v564 = apr_array_make(v498, v563, 8);
  v565 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "render-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v565, *(unsigned int *)(a1 + 16), v566, 0LL);
  v567 = *(unsigned int **)(a1 + 8);
  uint64_t v568 = *v567;
  if ((*((_BYTE *)v567 + 33) & 0x10) != 0)
  {
    v570 = *(unsigned int **)(a1 + 8);
    unint64_t v569 = *v567;
    do
    {
      v570 = (unsigned int *)((char *)v570 + v568);
      uint64_t v568 = *v570;
      v569 += v568;
    }

    while ((*((_BYTE *)v570 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v569 = *v567;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v567, v569);
  v564->uint64_t nelts = 0;
  apr_array_cat(v564, a3 + 3);
  qsort(v564->elts, v564->nelts, v564->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v564->nelts >= 1)
  {
    uint64_t v571 = 0LL;
    do
    {
      v572 = *(void **)&v564->elts[8 * v571];
      if (v572) {
        uint64_t v573 = v572[1];
      }
      else {
        uint64_t v573 = 0LL;
      }
      uint64_t v574 = *(void *)(a2 + 16);
      *(void *)__str = v573;
      v575 = find_entry(v574, __str, 8uLL, 0LL);
      if (*v575) {
        uint64_t v577 = *(void *)(*v575 + 32LL);
      }
      else {
        uint64_t v577 = 0LL;
      }
      unint64_t v578 = *(void *)(v577 + 8);
      v579 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "render-pipeline-state";
      *(_OWORD *)&__str[16] = v578;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v579, *(unsigned int *)(a1 + 16), v576, 0LL);
      v580 = *(unsigned int **)(a1 + 8);
      uint64_t v581 = *v580;
      if ((*((_BYTE *)v580 + 33) & 0x10) != 0)
      {
        v583 = *(unsigned int **)(a1 + 8);
        unint64_t v582 = *v580;
        do
        {
          v583 = (unsigned int *)((char *)v583 + v581);
          uint64_t v581 = *v583;
          v582 += v581;
        }

        while ((*((_BYTE *)v583 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v582 = *v580;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v580, v582);
      uint64_t v584 = v572[8];
      if (v584)
      {
        uint64_t v585 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v578;
        *(void *)&__str[24] = 0LL;
        uint64_t v586 = v585 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLTileRenderPipelineDescriptorUsingEncode( *(void *)(a1 + 32),  v584,  v586,  __s,  v574);
        DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      }

      else
      {
        uint64_t v587 = v572[9];
        if (v587)
        {
          uint64_t v588 = *(void *)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = v578;
          *(void *)&__str[24] = 0LL;
          uint64_t v589 = v588 + *(unsigned int *)(a1 + 16) - 512;
          *(void *)__s = 512LL;
          *(void *)&__str[16] = StoreMTLMeshRenderPipelineDescriptorUsingEncode( *(void *)(a1 + 32),  v587,  v589,  __s,  v574);
          DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        else if (v572[11])
        {
          *(void *)__str = v572[5];
          *(void *)__str = *(void *)(*(void *)(*find_entry(v574, __str, 8uLL, 0LL) + 32LL) + 8LL);
          *(void *)&__str[8] = v578;
          *(_OWORD *)&__str[16] = (unint64_t)v572[11];
          *(_OWORD *)&__str[32] = 0uLL;
          DYTraceEncode_MTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        else
        {
          uint64_t v590 = v572[6];
          if (v590)
          {
            uint64_t v591 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v578;
            *(void *)&__str[24] = 0LL;
            uint64_t v592 = v591 + *(unsigned int *)(a1 + 16) - 512;
            *(void *)__s = 512LL;
            *(void *)&__str[16] = StoreMTLRenderPipelineDescriptorUsingEncode( *(void *)(a1 + 32),  v590,  v592,  __s,  v574);
            DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
          }

          else
          {
            uint64_t v661 = v572[5];
            if (v661 && v572[10])
            {
              GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), v661, v572[2]);
              *(void *)__str = v572[5];
              *(void *)__str = *(void *)(*(void *)(*find_entry(v574, __str, 8uLL, 0LL) + 32LL) + 8LL);
              *(void *)&__str[8] = v578;
              v662 = (void *)v572[10];
              *(void *)&__str[24] = 0LL;
              uint64_t v663 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
              *(void *)__s = 512LL;
              *(void *)&__str[16] = StoreMTLRenderPipelineFunctionsDescriptorUsingEncode( *(void *)(a1 + 32),  v662,  v663,  __s,  v574);
              DYTraceEncode_MTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            }
          }
        }
      }

      FlushChainedRenderPipelineStateInfo(a1, (uint64_t)v572, v574, 0);
      if (v577
        && (uint64_t v593 = *(void *)(a1 + 32),
            unint64_t v594 = atomic_load((unint64_t *)(v577 + 56)),
            (unint64_t v595 = v594 & 0xFFFFFFFFFFFFFFE0LL) != 0))
      {
        unint64_t v596 = *(void *)(v593 + 440);
        BOOL v271 = v596 >= v595;
        unint64_t v597 = v596 - v595;
        if (v597 != 0 && v271) {
          unint64_t v598 = v597 * *(unsigned int *)(v593 + 448) / *(unsigned int *)(v593 + 452);
        }
        else {
          unint64_t v598 = 0LL;
        }
      }

      else
      {
        unint64_t v598 = -1LL;
      }

      v599 = *(void **)(a1 + 8);
      v599[2] = 0LL;
      v599[3] = 0LL;
      v599[1] = 0LL;
      v599[4] = 0x77754300000000LL;
      void *v599 = 0xFFFFD84400000028LL;
      v599[5] = v578;
      v599[6] = v598;
      *(_DWORD *)v599 = 56;
      v600 = *(unsigned int **)(a1 + 8);
      uint64_t v601 = *v600;
      if ((*((_BYTE *)v600 + 33) & 0x10) != 0)
      {
        v603 = *(unsigned int **)(a1 + 8);
        unint64_t v602 = *v600;
        do
        {
          v603 = (unsigned int *)((char *)v603 + v601);
          uint64_t v601 = *v603;
          v602 += v601;
        }

        while ((*((_BYTE *)v603 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v602 = *v600;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v600, v602);
      v604 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "function-handles";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v604, *(unsigned int *)(a1 + 16), v605, 0LL);
      v606 = *(unsigned int **)(a1 + 8);
      uint64_t v607 = *v606;
      if ((*((_BYTE *)v606 + 33) & 0x10) != 0)
      {
        v609 = *(unsigned int **)(a1 + 8);
        unint64_t v608 = *v606;
        do
        {
          v609 = (unsigned int *)((char *)v609 + v607);
          uint64_t v607 = *v609;
          v608 += v607;
        }

        while ((*((_BYTE *)v609 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v608 = *v606;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v606, v608);
      int v610 = a3[31].nelts;
      if (v610 >= 1)
      {
        for (uint64_t k = 0LL; k < v610; ++k)
        {
          uint64_t v612 = *(void *)&a3[31].elts[8 * k];
          if (*(void *)(v612 + 56) == v572[1])
          {
            WriteGTMTLSMFunctionHandle((uint64_t *)a1, v612, v574);
            int v610 = a3[31].nelts;
          }
        }
      }

      uint64_t v613 = *(void *)a1;
      uint64_t v614 = *(void *)(a1 + 8);
      *(void *)(v614 + 16) = 0LL;
      *(void *)(v614 + 24) = 0LL;
      *(void *)(v614 + 8) = 0LL;
      *(_DWORD *)(v614 + 32) = 70;
      *(_DWORD *)(v614 + 36) = 67;
      *(void *)uint64_t v614 = 0xFFFFD00800000028LL;
      *(void *)(v614 + 40) = v613;
      *(_DWORD *)uint64_t v614 = 48;
      v615 = *(unsigned int **)(a1 + 8);
      uint64_t v616 = *v615;
      if ((*((_BYTE *)v615 + 33) & 0x10) != 0)
      {
        v618 = *(unsigned int **)(a1 + 8);
        unint64_t v617 = *v615;
        do
        {
          v618 = (unsigned int *)((char *)v618 + v616);
          uint64_t v616 = *v618;
          v617 += v616;
        }

        while ((*((_BYTE *)v618 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v617 = *v615;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v615, v617);
      v619 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "visible-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v619, *(unsigned int *)(a1 + 16), v620, 0LL);
      v621 = *(unsigned int **)(a1 + 8);
      uint64_t v622 = *v621;
      if ((*((_BYTE *)v621 + 33) & 0x10) != 0)
      {
        v624 = *(unsigned int **)(a1 + 8);
        unint64_t v623 = *v621;
        do
        {
          v624 = (unsigned int *)((char *)v624 + v622);
          uint64_t v622 = *v624;
          v623 += v622;
        }

        while ((*((_BYTE *)v624 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v623 = *v621;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v621, v623);
      int v625 = a3[6].nelts;
      if (v625 >= 1)
      {
        for (uint64_t m = 0LL; m < v625; ++m)
        {
          uint64_t v627 = *(void *)&a3[6].elts[8 * m];
          if (*(void *)(v627 + 128) == v572[1])
          {
            uint64_t v628 = *(void *)(a2 + 496);
            *(void *)__str = *(void *)(v627 + 8);
            uint64_t v629 = *find_entry(v628, __str, 8uLL, 0LL);
            if (v629) {
              uint64_t v630 = *(void *)(v629 + 32);
            }
            else {
              uint64_t v630 = 0LL;
            }
            WriteGTMTLSMVisibleFunctionTable(a1, *(void *)(a2 + 16), v627, v630);
            int v625 = a3[6].nelts;
          }
        }
      }

      uint64_t v631 = *(void *)a1;
      uint64_t v632 = *(void *)(a1 + 8);
      *(void *)(v632 + 16) = 0LL;
      *(void *)(v632 + 24) = 0LL;
      *(void *)(v632 + 8) = 0LL;
      *(_DWORD *)(v632 + 32) = 70;
      *(_DWORD *)(v632 + 36) = 67;
      *(void *)uint64_t v632 = 0xFFFFD00800000028LL;
      *(void *)(v632 + 40) = v631;
      *(_DWORD *)uint64_t v632 = 48;
      v633 = *(unsigned int **)(a1 + 8);
      uint64_t v634 = *v633;
      if ((*((_BYTE *)v633 + 33) & 0x10) != 0)
      {
        v636 = *(unsigned int **)(a1 + 8);
        unint64_t v635 = *v633;
        do
        {
          v636 = (unsigned int *)((char *)v636 + v634);
          uint64_t v634 = *v636;
          v635 += v634;
        }

        while ((*((_BYTE *)v636 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v635 = *v633;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v633, v635);
      v637 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "intersection-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v637, *(unsigned int *)(a1 + 16), v638, 0LL);
      v639 = *(unsigned int **)(a1 + 8);
      uint64_t v640 = *v639;
      if ((*((_BYTE *)v639 + 33) & 0x10) != 0)
      {
        v642 = *(unsigned int **)(a1 + 8);
        unint64_t v641 = *v639;
        do
        {
          v642 = (unsigned int *)((char *)v642 + v640);
          uint64_t v640 = *v642;
          v641 += v640;
        }

        while ((*((_BYTE *)v642 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v641 = *v639;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v639, v641);
      int v643 = a3[7].nelts;
      if (v643 >= 1)
      {
        for (uint64_t n = 0LL; n < v643; ++n)
        {
          v645 = *(void **)&a3[7].elts[8 * n];
          if (v645[16] == v572[1])
          {
            uint64_t v646 = *(void *)(a2 + 496);
            *(void *)__str = v645[1];
            uint64_t v647 = *find_entry(v646, __str, 8uLL, 0LL);
            if (v647) {
              uint64_t v648 = *(void *)(v647 + 32);
            }
            else {
              uint64_t v648 = 0LL;
            }
            WriteGTMTLIntersectionFunctionTable((uint64_t *)a1, (void *)a2, v645, v648);
            int v643 = a3[7].nelts;
          }
        }
      }

      uint64_t v649 = *(void *)a1;
      uint64_t v650 = *(void *)(a1 + 8);
      *(void *)(v650 + 16) = 0LL;
      *(void *)(v650 + 24) = 0LL;
      *(void *)(v650 + 8) = 0LL;
      *(_DWORD *)(v650 + 32) = 70;
      *(_DWORD *)(v650 + 36) = 67;
      *(void *)uint64_t v650 = 0xFFFFD00800000028LL;
      *(void *)(v650 + 40) = v649;
      *(_DWORD *)uint64_t v650 = 48;
      v651 = *(unsigned int **)(a1 + 8);
      uint64_t v652 = *v651;
      if ((*((_BYTE *)v651 + 33) & 0x10) != 0)
      {
        v654 = *(unsigned int **)(a1 + 8);
        unint64_t v653 = *v651;
        do
        {
          v654 = (unsigned int *)((char *)v654 + v652);
          uint64_t v652 = *v654;
          v653 += v652;
        }

        while ((*((_BYTE *)v654 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v653 = *v651;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v651, v653);
      uint64_t v655 = *(void *)a1;
      uint64_t v656 = *(void *)(a1 + 8);
      *(void *)(v656 + 16) = 0LL;
      *(void *)(v656 + 24) = 0LL;
      *(void *)(v656 + 8) = 0LL;
      *(_DWORD *)(v656 + 32) = 70;
      *(_DWORD *)(v656 + 36) = 67;
      *(void *)uint64_t v656 = 0xFFFFD00800000028LL;
      *(void *)(v656 + 40) = v655;
      *(_DWORD *)uint64_t v656 = 48;
      v657 = *(unsigned int **)(a1 + 8);
      uint64_t v658 = *v657;
      if ((*((_BYTE *)v657 + 33) & 0x10) != 0)
      {
        v660 = *(unsigned int **)(a1 + 8);
        unint64_t v659 = *v657;
        do
        {
          v660 = (unsigned int *)((char *)v660 + v658);
          uint64_t v658 = *v660;
          v659 += v658;
        }

        while ((*((_BYTE *)v660 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v659 = *v657;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v657, v659);
      ++v571;
    }

    while (v571 < v564->nelts);
  }

  uint64_t v664 = *(void *)a1;
  uint64_t v665 = *(void *)(a1 + 8);
  *(void *)(v665 + 16) = 0LL;
  *(void *)(v665 + 24) = 0LL;
  *(void *)(v665 + 8) = 0LL;
  *(_DWORD *)(v665 + 32) = 70;
  *(_DWORD *)(v665 + 36) = 67;
  *(void *)uint64_t v665 = 0xFFFFD00800000028LL;
  *(void *)(v665 + 40) = v664;
  *(_DWORD *)uint64_t v665 = 48;
  v666 = *(unsigned int **)(a1 + 8);
  uint64_t v667 = *v666;
  if ((*((_BYTE *)v666 + 33) & 0x10) != 0)
  {
    v669 = *(unsigned int **)(a1 + 8);
    unint64_t v668 = *v666;
    do
    {
      v669 = (unsigned int *)((char *)v669 + v667);
      uint64_t v667 = *v669;
      v668 += v667;
    }

    while ((*((_BYTE *)v669 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v668 = *v666;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v666, v668);
  v670 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "compute-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v670, *(unsigned int *)(a1 + 16), v671, 0LL);
  v672 = *(unsigned int **)(a1 + 8);
  uint64_t v673 = *v672;
  if ((*((_BYTE *)v672 + 33) & 0x10) != 0)
  {
    v675 = *(unsigned int **)(a1 + 8);
    unint64_t v674 = *v672;
    do
    {
      v675 = (unsigned int *)((char *)v675 + v673);
      uint64_t v673 = *v675;
      v674 += v673;
    }

    while ((*((_BYTE *)v675 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v674 = *v672;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v672, v674);
  v564->uint64_t nelts = 0;
  apr_array_cat(v564, a3 + 4);
  qsort(v564->elts, v564->nelts, v564->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v564->nelts >= 1)
  {
    uint64_t v676 = 0LL;
    do
    {
      v677 = *(void **)&v564->elts[8 * v676];
      if (v677) {
        uint64_t v678 = v677[1];
      }
      else {
        uint64_t v678 = 0LL;
      }
      uint64_t v679 = *(void *)(a2 + 16);
      *(void *)__str = v678;
      v680 = find_entry(v679, __str, 8uLL, 0LL);
      if (*v680) {
        uint64_t v682 = *(void *)(*v680 + 32LL);
      }
      else {
        uint64_t v682 = 0LL;
      }
      unint64_t v683 = *(void *)(v682 + 8);
      v684 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "compute-pipeline-state";
      *(_OWORD *)&__str[16] = v683;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v684, *(unsigned int *)(a1 + 16), v681, 0LL);
      v685 = *(unsigned int **)(a1 + 8);
      uint64_t v686 = *v685;
      if ((*((_BYTE *)v685 + 33) & 0x10) != 0)
      {
        v688 = *(unsigned int **)(a1 + 8);
        unint64_t v687 = *v685;
        do
        {
          v688 = (unsigned int *)((char *)v688 + v686);
          uint64_t v686 = *v688;
          v687 += v686;
        }

        while ((*((_BYTE *)v688 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v687 = *v685;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v685, v687);
      uint64_t v689 = v677[7];
      if (v689)
      {
        uint64_t v690 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v683;
        *(void *)&__str[24] = 0LL;
        uint64_t v691 = v690 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLComputePipelineDescriptorUsingEncode( *(void *)(a1 + 32),  v689,  v691,  __s,  v679);
        DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      }

      else
      {
        uint64_t v692 = v677[9];
        if (v692)
        {
          uint64_t v693 = *(void *)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = v683;
          uint64_t v694 = v677[10];
          *(void *)&__str[16] = v692;
          *(void *)&__str[24] = v694;
          *(void *)&__str[32] = 0LL;
          GTTrace_storePointer( a1,  -16101,  (uint64_t)__str,  (char *)(v693 + *(unsigned int *)(a1 + 16) - 512),  512LL,  v679);
          DYTraceEncode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        else if (v677[11])
        {
          *(void *)__str = v677[5];
          *(void *)__str = *(void *)(*(void *)(*find_entry(v679, __str, 8uLL, 0LL) + 32LL) + 8LL);
          *(void *)&__str[8] = v683;
          *(_OWORD *)&__str[16] = (unint64_t)v677[11];
          *(_OWORD *)&__str[32] = 0uLL;
          DYTraceEncode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        else if (v677[6])
        {
          uint64_t v1574 = *(void *)a1;
          *(void *)__str = v677[6];
          uint64_t v695 = *(void *)(*(void *)(*find_entry(v679, __str, 8uLL, 0LL) + 32LL) + 8LL);
          uint64_t v696 = *(void *)(a1 + 8);
          *(void *)(v696 + 8) = 0LL;
          *(void *)(v696 + 16) = 0LL;
          *(void *)(v696 + 24) = 0LL;
          *(void *)(v696 + 32) = 0x74744300000001LL;
          *(void *)uint64_t v696 = 0xFFFFC05500000028LL;
          *(void *)(v696 + 40) = v1574;
          *(void *)(v696 + 48) = v695;
          *(void *)(v696 + 56) = 0LL;
          *(_DWORD *)(v696 + 64) = 116;
          *(void *)(v696 + 68) = v683;
          *(_DWORD *)uint64_t v696 = 76;
        }

        else
        {
          uint64_t v765 = v677[5];
          if (v765 && v677[23])
          {
            GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), v765, v677[2]);
            *(void *)__str = v677[5];
            *(void *)__str = *(void *)(*(void *)(*find_entry(v679, __str, 8uLL, 0LL) + 32LL) + 8LL);
            *(void *)&__str[8] = v683;
            v766 = (unint64_t *)v677[23];
            *(void *)&__str[24] = 0LL;
            uint64_t v767 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
            *(void *)__s = 512LL;
            *(void *)&__str[16] = UnwrapMTLArray_(*(void *)(a1 + 32), v766, v767, __s, v679);
            DYTraceEncode_MTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
          }
        }
      }

      FlushChainedComputePipelineStateInfo(a1, (uint64_t)v677, v679, 0);
      if (v682
        && (uint64_t v697 = *(void *)(a1 + 32),
            unint64_t v698 = atomic_load((unint64_t *)(v682 + 56)),
            (unint64_t v699 = v698 & 0xFFFFFFFFFFFFFFE0LL) != 0))
      {
        unint64_t v700 = *(void *)(v697 + 440);
        BOOL v271 = v700 >= v699;
        unint64_t v701 = v700 - v699;
        if (v701 != 0 && v271) {
          unint64_t v702 = v701 * *(unsigned int *)(v697 + 448) / *(unsigned int *)(v697 + 452);
        }
        else {
          unint64_t v702 = 0LL;
        }
      }

      else
      {
        unint64_t v702 = -1LL;
      }

      v703 = *(void **)(a1 + 8);
      v703[2] = 0LL;
      v703[3] = 0LL;
      v703[1] = 0LL;
      v703[4] = 0x77754300000000LL;
      void *v703 = 0xFFFFD84500000028LL;
      v703[5] = v683;
      v703[6] = v702;
      *(_DWORD *)v703 = 56;
      v704 = *(unsigned int **)(a1 + 8);
      uint64_t v705 = *v704;
      if ((*((_BYTE *)v704 + 33) & 0x10) != 0)
      {
        v707 = *(unsigned int **)(a1 + 8);
        unint64_t v706 = *v704;
        do
        {
          v707 = (unsigned int *)((char *)v707 + v705);
          uint64_t v705 = *v707;
          v706 += v705;
        }

        while ((*((_BYTE *)v707 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v706 = *v704;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v704, v706);
      v708 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "function-handles";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v708, *(unsigned int *)(a1 + 16), v709, 0LL);
      v710 = *(unsigned int **)(a1 + 8);
      uint64_t v711 = *v710;
      if ((*((_BYTE *)v710 + 33) & 0x10) != 0)
      {
        v713 = *(unsigned int **)(a1 + 8);
        unint64_t v712 = *v710;
        do
        {
          v713 = (unsigned int *)((char *)v713 + v711);
          uint64_t v711 = *v713;
          v712 += v711;
        }

        while ((*((_BYTE *)v713 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v712 = *v710;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v710, v712);
      int v714 = a3[31].nelts;
      if (v714 >= 1)
      {
        for (iuint64_t i = 0LL; ii < v714; ++ii)
        {
          uint64_t v716 = *(void *)&a3[31].elts[8 * ii];
          if (*(void *)(v716 + 48) == v677[1])
          {
            WriteGTMTLSMFunctionHandle((uint64_t *)a1, v716, v679);
            int v714 = a3[31].nelts;
          }
        }
      }

      uint64_t v717 = *(void *)a1;
      uint64_t v718 = *(void *)(a1 + 8);
      *(void *)(v718 + 16) = 0LL;
      *(void *)(v718 + 24) = 0LL;
      *(void *)(v718 + 8) = 0LL;
      *(_DWORD *)(v718 + 32) = 70;
      *(_DWORD *)(v718 + 36) = 67;
      *(void *)uint64_t v718 = 0xFFFFD00800000028LL;
      *(void *)(v718 + 40) = v717;
      *(_DWORD *)uint64_t v718 = 48;
      v719 = *(unsigned int **)(a1 + 8);
      uint64_t v720 = *v719;
      if ((*((_BYTE *)v719 + 33) & 0x10) != 0)
      {
        v722 = *(unsigned int **)(a1 + 8);
        unint64_t v721 = *v719;
        do
        {
          v722 = (unsigned int *)((char *)v722 + v720);
          uint64_t v720 = *v722;
          v721 += v720;
        }

        while ((*((_BYTE *)v722 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v721 = *v719;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v719, v721);
      v723 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "visible-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v723, *(unsigned int *)(a1 + 16), v724, 0LL);
      v725 = *(unsigned int **)(a1 + 8);
      uint64_t v726 = *v725;
      if ((*((_BYTE *)v725 + 33) & 0x10) != 0)
      {
        v728 = *(unsigned int **)(a1 + 8);
        unint64_t v727 = *v725;
        do
        {
          v728 = (unsigned int *)((char *)v728 + v726);
          uint64_t v726 = *v728;
          v727 += v726;
        }

        while ((*((_BYTE *)v728 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v727 = *v725;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v725, v727);
      int v729 = a3[6].nelts;
      if (v729 >= 1)
      {
        for (juint64_t j = 0LL; jj < v729; ++jj)
        {
          uint64_t v731 = *(void *)&a3[6].elts[8 * jj];
          if (*(void *)(v731 + 120) == v677[1])
          {
            uint64_t v732 = *(void *)(a2 + 496);
            *(void *)__str = *(void *)(v731 + 8);
            uint64_t v733 = *find_entry(v732, __str, 8uLL, 0LL);
            if (v733) {
              uint64_t v734 = *(void *)(v733 + 32);
            }
            else {
              uint64_t v734 = 0LL;
            }
            WriteGTMTLSMVisibleFunctionTable(a1, *(void *)(a2 + 16), v731, v734);
            int v729 = a3[6].nelts;
          }
        }
      }

      uint64_t v735 = *(void *)a1;
      uint64_t v736 = *(void *)(a1 + 8);
      *(void *)(v736 + 16) = 0LL;
      *(void *)(v736 + 24) = 0LL;
      *(void *)(v736 + 8) = 0LL;
      *(_DWORD *)(v736 + 32) = 70;
      *(_DWORD *)(v736 + 36) = 67;
      *(void *)uint64_t v736 = 0xFFFFD00800000028LL;
      *(void *)(v736 + 40) = v735;
      *(_DWORD *)uint64_t v736 = 48;
      v737 = *(unsigned int **)(a1 + 8);
      uint64_t v738 = *v737;
      if ((*((_BYTE *)v737 + 33) & 0x10) != 0)
      {
        v740 = *(unsigned int **)(a1 + 8);
        unint64_t v739 = *v737;
        do
        {
          v740 = (unsigned int *)((char *)v740 + v738);
          uint64_t v738 = *v740;
          v739 += v738;
        }

        while ((*((_BYTE *)v740 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v739 = *v737;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v737, v739);
      v741 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "intersection-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v741, *(unsigned int *)(a1 + 16), v742, 0LL);
      v743 = *(unsigned int **)(a1 + 8);
      uint64_t v744 = *v743;
      if ((*((_BYTE *)v743 + 33) & 0x10) != 0)
      {
        v746 = *(unsigned int **)(a1 + 8);
        unint64_t v745 = *v743;
        do
        {
          v746 = (unsigned int *)((char *)v746 + v744);
          uint64_t v744 = *v746;
          v745 += v744;
        }

        while ((*((_BYTE *)v746 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v745 = *v743;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v743, v745);
      int v747 = a3[7].nelts;
      if (v747 >= 1)
      {
        for (kuint64_t k = 0LL; kk < v747; ++kk)
        {
          v749 = *(void **)&a3[7].elts[8 * kk];
          if (v749[15] == v677[1])
          {
            uint64_t v750 = *(void *)(a2 + 496);
            *(void *)__str = v749[1];
            uint64_t v751 = *find_entry(v750, __str, 8uLL, 0LL);
            if (v751) {
              uint64_t v752 = *(void *)(v751 + 32);
            }
            else {
              uint64_t v752 = 0LL;
            }
            WriteGTMTLIntersectionFunctionTable((uint64_t *)a1, (void *)a2, v749, v752);
            int v747 = a3[7].nelts;
          }
        }
      }

      uint64_t v753 = *(void *)a1;
      uint64_t v754 = *(void *)(a1 + 8);
      *(void *)(v754 + 16) = 0LL;
      *(void *)(v754 + 24) = 0LL;
      *(void *)(v754 + 8) = 0LL;
      *(_DWORD *)(v754 + 32) = 70;
      *(_DWORD *)(v754 + 36) = 67;
      *(void *)uint64_t v754 = 0xFFFFD00800000028LL;
      *(void *)(v754 + 40) = v753;
      *(_DWORD *)uint64_t v754 = 48;
      v755 = *(unsigned int **)(a1 + 8);
      uint64_t v756 = *v755;
      if ((*((_BYTE *)v755 + 33) & 0x10) != 0)
      {
        v758 = *(unsigned int **)(a1 + 8);
        unint64_t v757 = *v755;
        do
        {
          v758 = (unsigned int *)((char *)v758 + v756);
          uint64_t v756 = *v758;
          v757 += v756;
        }

        while ((*((_BYTE *)v758 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v757 = *v755;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v755, v757);
      uint64_t v759 = *(void *)a1;
      uint64_t v760 = *(void *)(a1 + 8);
      *(void *)(v760 + 16) = 0LL;
      *(void *)(v760 + 24) = 0LL;
      *(void *)(v760 + 8) = 0LL;
      *(_DWORD *)(v760 + 32) = 70;
      *(_DWORD *)(v760 + 36) = 67;
      *(void *)uint64_t v760 = 0xFFFFD00800000028LL;
      *(void *)(v760 + 40) = v759;
      *(_DWORD *)uint64_t v760 = 48;
      v761 = *(unsigned int **)(a1 + 8);
      uint64_t v762 = *v761;
      if ((*((_BYTE *)v761 + 33) & 0x10) != 0)
      {
        v764 = *(unsigned int **)(a1 + 8);
        unint64_t v763 = *v761;
        do
        {
          v764 = (unsigned int *)((char *)v764 + v762);
          uint64_t v762 = *v764;
          v763 += v762;
        }

        while ((*((_BYTE *)v764 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v763 = *v761;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v761, v763);
      ++v676;
    }

    while (v676 < v564->nelts);
  }

  uint64_t v768 = *(void *)a1;
  uint64_t v769 = *(void *)(a1 + 8);
  *(void *)(v769 + 16) = 0LL;
  *(void *)(v769 + 24) = 0LL;
  *(void *)(v769 + 8) = 0LL;
  *(_DWORD *)(v769 + 32) = 70;
  *(_DWORD *)(v769 + 36) = 67;
  *(void *)uint64_t v769 = 0xFFFFD00800000028LL;
  *(void *)(v769 + 40) = v768;
  *(_DWORD *)uint64_t v769 = 48;
  v770 = *(unsigned int **)(a1 + 8);
  uint64_t v771 = *v770;
  if ((*((_BYTE *)v770 + 33) & 0x10) != 0)
  {
    v773 = *(unsigned int **)(a1 + 8);
    unint64_t v772 = *v770;
    do
    {
      v773 = (unsigned int *)((char *)v773 + v771);
      uint64_t v771 = *v773;
      v772 += v771;
    }

    while ((*((_BYTE *)v773 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v772 = *v770;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v770, v772);
  v774 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "motion-estimation-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v774, *(unsigned int *)(a1 + 16), v775, 0LL);
  v776 = *(unsigned int **)(a1 + 8);
  uint64_t v777 = *v776;
  if ((*((_BYTE *)v776 + 33) & 0x10) != 0)
  {
    v779 = *(unsigned int **)(a1 + 8);
    unint64_t v778 = *v776;
    do
    {
      v779 = (unsigned int *)((char *)v779 + v777);
      uint64_t v777 = *v779;
      v778 += v777;
    }

    while ((*((_BYTE *)v779 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v778 = *v776;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v776, v778);
  if (a3[17].nelts >= 1)
  {
    uint64_t v780 = 0LL;
    do
    {
      uint64_t v781 = *(void *)&a3[17].elts[8 * v780];
      if (v781) {
        uint64_t v782 = *(void *)(v781 + 8);
      }
      else {
        uint64_t v782 = 0LL;
      }
      *(void *)__str = v782;
      unint64_t v783 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v784 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "motion-pipeline-state";
      *(_OWORD *)&__str[16] = v783;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v784, *(unsigned int *)(a1 + 16), v785, 0LL);
      v786 = *(unsigned int **)(a1 + 8);
      uint64_t v787 = *v786;
      if ((*((_BYTE *)v786 + 33) & 0x10) != 0)
      {
        v789 = *(unsigned int **)(a1 + 8);
        unint64_t v788 = *v786;
        do
        {
          v789 = (unsigned int *)((char *)v789 + v787);
          uint64_t v787 = *v789;
          v788 += v787;
        }

        while ((*((_BYTE *)v789 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v788 = *v786;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v786, v788);
      uint64_t v790 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v783;
      v791 = *(unsigned __int16 **)(v781 + 48);
      uint64_t v792 = v790 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLMotionEstimationPipelineDescriptorUsingEncode( *(void *)(a1 + 32),  v791,  v792,  __s);
      DYTraceEncode_MTLDevice_newMotionEstimationPipelineWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v793 = *(unsigned int **)(a1 + 8);
      uint64_t v794 = *v793;
      if ((*((_BYTE *)v793 + 33) & 0x10) != 0)
      {
        v796 = *(unsigned int **)(a1 + 8);
        unint64_t v795 = *v793;
        do
        {
          v796 = (unsigned int *)((char *)v796 + v794);
          uint64_t v794 = *v796;
          v795 += v794;
        }

        while ((*((_BYTE *)v796 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v795 = *v793;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v793, v795);
      uint64_t v797 = *(void *)a1;
      uint64_t v798 = *(void *)(a1 + 8);
      *(void *)(v798 + 16) = 0LL;
      *(void *)(v798 + 24) = 0LL;
      *(void *)(v798 + 8) = 0LL;
      *(_DWORD *)(v798 + 32) = 70;
      *(_DWORD *)(v798 + 36) = 67;
      *(void *)uint64_t v798 = 0xFFFFD00800000028LL;
      *(void *)(v798 + 40) = v797;
      *(_DWORD *)uint64_t v798 = 48;
      v799 = *(unsigned int **)(a1 + 8);
      uint64_t v800 = *v799;
      if ((*((_BYTE *)v799 + 33) & 0x10) != 0)
      {
        v802 = *(unsigned int **)(a1 + 8);
        unint64_t v801 = *v799;
        do
        {
          v802 = (unsigned int *)((char *)v802 + v800);
          uint64_t v800 = *v802;
          v801 += v800;
        }

        while ((*((_BYTE *)v802 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v801 = *v799;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v799, v801);
      ++v780;
    }

    while (v780 < a3[17].nelts);
  }

  uint64_t v803 = *(void *)a1;
  uint64_t v804 = *(void *)(a1 + 8);
  *(void *)(v804 + 16) = 0LL;
  *(void *)(v804 + 24) = 0LL;
  *(void *)(v804 + 8) = 0LL;
  *(_DWORD *)(v804 + 32) = 70;
  *(_DWORD *)(v804 + 36) = 67;
  *(void *)uint64_t v804 = 0xFFFFD00800000028LL;
  *(void *)(v804 + 40) = v803;
  *(_DWORD *)uint64_t v804 = 48;
  v805 = *(unsigned int **)(a1 + 8);
  uint64_t v806 = *v805;
  if ((*((_BYTE *)v805 + 33) & 0x10) != 0)
  {
    v808 = *(unsigned int **)(a1 + 8);
    unint64_t v807 = *v805;
    do
    {
      v808 = (unsigned int *)((char *)v808 + v806);
      uint64_t v806 = *v808;
      v807 += v806;
    }

    while ((*((_BYTE *)v808 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v807 = *v805;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v805, v807);
  v809 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "depth-stencil-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v809, *(unsigned int *)(a1 + 16), v810, 0LL);
  v811 = *(unsigned int **)(a1 + 8);
  uint64_t v812 = *v811;
  if ((*((_BYTE *)v811 + 33) & 0x10) != 0)
  {
    v814 = *(unsigned int **)(a1 + 8);
    unint64_t v813 = *v811;
    do
    {
      v814 = (unsigned int *)((char *)v814 + v812);
      uint64_t v812 = *v814;
      v813 += v812;
    }

    while ((*((_BYTE *)v814 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v813 = *v811;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v811, v813);
  if (a3[18].nelts >= 1)
  {
    uint64_t v815 = 0LL;
    do
    {
      uint64_t v816 = *(void *)&a3[18].elts[8 * v815];
      if (v816) {
        uint64_t v817 = *(void *)(v816 + 8);
      }
      else {
        uint64_t v817 = 0LL;
      }
      *(void *)__str = v817;
      unint64_t v818 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v819 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "depth-stencil-state";
      *(_OWORD *)&__str[16] = v818;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v819, *(unsigned int *)(a1 + 16), v820, 0LL);
      v821 = *(unsigned int **)(a1 + 8);
      uint64_t v822 = *v821;
      if ((*((_BYTE *)v821 + 33) & 0x10) != 0)
      {
        v824 = *(unsigned int **)(a1 + 8);
        unint64_t v823 = *v821;
        do
        {
          v824 = (unsigned int *)((char *)v824 + v822);
          uint64_t v822 = *v824;
          v823 += v822;
        }

        while ((*((_BYTE *)v824 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v823 = *v821;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v821, v823);
      uint64_t v825 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v818;
      uint64_t v826 = *(void *)(v816 + 48);
      uint64_t v827 = v825 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLDepthStencilDescriptorUsingEncode(*(void *)(a1 + 32), v826, v827, __s);
      DYTraceEncode_MTLDevice_newDepthStencilStateWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v828 = *(unsigned int **)(a1 + 8);
      uint64_t v829 = *v828;
      if ((*((_BYTE *)v828 + 33) & 0x10) != 0)
      {
        v831 = *(unsigned int **)(a1 + 8);
        unint64_t v830 = *v828;
        do
        {
          v831 = (unsigned int *)((char *)v831 + v829);
          uint64_t v829 = *v831;
          v830 += v829;
        }

        while ((*((_BYTE *)v831 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v830 = *v828;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v828, v830);
      uint64_t v832 = *(void *)a1;
      uint64_t v833 = *(void *)(a1 + 8);
      *(void *)(v833 + 16) = 0LL;
      *(void *)(v833 + 24) = 0LL;
      *(void *)(v833 + 8) = 0LL;
      *(_DWORD *)(v833 + 32) = 70;
      *(_DWORD *)(v833 + 36) = 67;
      *(void *)uint64_t v833 = 0xFFFFD00800000028LL;
      *(void *)(v833 + 40) = v832;
      *(_DWORD *)uint64_t v833 = 48;
      v834 = *(unsigned int **)(a1 + 8);
      uint64_t v835 = *v834;
      if ((*((_BYTE *)v834 + 33) & 0x10) != 0)
      {
        v837 = *(unsigned int **)(a1 + 8);
        unint64_t v836 = *v834;
        do
        {
          v837 = (unsigned int *)((char *)v837 + v835);
          uint64_t v835 = *v837;
          v836 += v835;
        }

        while ((*((_BYTE *)v837 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v836 = *v834;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v834, v836);
      ++v815;
    }

    while (v815 < a3[18].nelts);
  }

  uint64_t v838 = *(void *)a1;
  uint64_t v839 = *(void *)(a1 + 8);
  *(void *)(v839 + 16) = 0LL;
  *(void *)(v839 + 24) = 0LL;
  *(void *)(v839 + 8) = 0LL;
  *(_DWORD *)(v839 + 32) = 70;
  *(_DWORD *)(v839 + 36) = 67;
  *(void *)uint64_t v839 = 0xFFFFD00800000028LL;
  *(void *)(v839 + 40) = v838;
  *(_DWORD *)uint64_t v839 = 48;
  v840 = *(unsigned int **)(a1 + 8);
  uint64_t v841 = *v840;
  if ((*((_BYTE *)v840 + 33) & 0x10) != 0)
  {
    v843 = *(unsigned int **)(a1 + 8);
    unint64_t v842 = *v840;
    do
    {
      v843 = (unsigned int *)((char *)v843 + v841);
      uint64_t v841 = *v843;
      v842 += v841;
    }

    while ((*((_BYTE *)v843 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v842 = *v840;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v840, v842);
  v844 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "samplers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v844, *(unsigned int *)(a1 + 16), v845, 0LL);
  v846 = *(unsigned int **)(a1 + 8);
  uint64_t v847 = *v846;
  if ((*((_BYTE *)v846 + 33) & 0x10) != 0)
  {
    v849 = *(unsigned int **)(a1 + 8);
    unint64_t v848 = *v846;
    do
    {
      v849 = (unsigned int *)((char *)v849 + v847);
      uint64_t v847 = *v849;
      v848 += v847;
    }

    while ((*((_BYTE *)v849 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v848 = *v846;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v846, v848);
  if (a3[2].nelts >= 1)
  {
    uint64_t v850 = 0LL;
    do
    {
      uint64_t v851 = *(void *)&a3[2].elts[8 * v850];
      if (v851) {
        uint64_t v852 = *(void *)(v851 + 8);
      }
      else {
        uint64_t v852 = 0LL;
      }
      *(void *)__str = v852;
      unint64_t v853 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v854 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "sampler";
      *(_OWORD *)&__str[16] = v853;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v854, *(unsigned int *)(a1 + 16), v855, 0LL);
      v856 = *(unsigned int **)(a1 + 8);
      uint64_t v857 = *v856;
      if ((*((_BYTE *)v856 + 33) & 0x10) != 0)
      {
        v859 = *(unsigned int **)(a1 + 8);
        unint64_t v858 = *v856;
        do
        {
          v859 = (unsigned int *)((char *)v859 + v857);
          uint64_t v857 = *v859;
          v858 += v857;
        }

        while ((*((_BYTE *)v859 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v858 = *v856;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v856, v858);
      uint64_t v860 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v853;
      uint64_t v861 = *(void *)(v851 + 48);
      uint64_t v862 = v860 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLSamplerDescriptorUsingEncode(*(void *)(a1 + 32), v861, v862, __s);
      DYTraceEncode_MTLDevice_newSamplerStateWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v863 = *(unsigned int **)(a1 + 8);
      uint64_t v864 = *v863;
      if ((*((_BYTE *)v863 + 33) & 0x10) != 0)
      {
        v866 = *(unsigned int **)(a1 + 8);
        unint64_t v865 = *v863;
        do
        {
          v866 = (unsigned int *)((char *)v866 + v864);
          uint64_t v864 = *v866;
          v865 += v864;
        }

        while ((*((_BYTE *)v866 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v865 = *v863;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v863, v865);
      WriteSamplerStateInfo(a1, v851, v1583, 0);
      uint64_t v867 = *(void *)a1;
      uint64_t v868 = *(void *)(a1 + 8);
      *(void *)(v868 + 16) = 0LL;
      *(void *)(v868 + 24) = 0LL;
      *(void *)(v868 + 8) = 0LL;
      *(_DWORD *)(v868 + 32) = 70;
      *(_DWORD *)(v868 + 36) = 67;
      *(void *)uint64_t v868 = 0xFFFFD00800000028LL;
      *(void *)(v868 + 40) = v867;
      *(_DWORD *)uint64_t v868 = 48;
      v869 = *(unsigned int **)(a1 + 8);
      uint64_t v870 = *v869;
      if ((*((_BYTE *)v869 + 33) & 0x10) != 0)
      {
        v872 = *(unsigned int **)(a1 + 8);
        unint64_t v871 = *v869;
        do
        {
          v872 = (unsigned int *)((char *)v872 + v870);
          uint64_t v870 = *v872;
          v871 += v870;
        }

        while ((*((_BYTE *)v872 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v871 = *v869;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v869, v871);
      ++v850;
    }

    while (v850 < a3[2].nelts);
  }

  uint64_t v873 = *(void *)a1;
  uint64_t v874 = *(void *)(a1 + 8);
  *(void *)(v874 + 16) = 0LL;
  *(void *)(v874 + 24) = 0LL;
  *(void *)(v874 + 8) = 0LL;
  *(_DWORD *)(v874 + 32) = 70;
  *(_DWORD *)(v874 + 36) = 67;
  *(void *)uint64_t v874 = 0xFFFFD00800000028LL;
  *(void *)(v874 + 40) = v873;
  *(_DWORD *)uint64_t v874 = 48;
  v875 = *(unsigned int **)(a1 + 8);
  uint64_t v876 = *v875;
  if ((*((_BYTE *)v875 + 33) & 0x10) != 0)
  {
    v879 = *(unsigned int **)(a1 + 8);
    unint64_t v877 = *v875;
    uint64_t v878 = v1583;
    do
    {
      v879 = (unsigned int *)((char *)v879 + v876);
      uint64_t v876 = *v879;
      v877 += v876;
    }

    while ((*((_BYTE *)v879 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v877 = *v875;
    uint64_t v878 = v1583;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v875, v877);
  v880 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-command-buffers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v880, *(unsigned int *)(a1 + 16), v881, 0LL);
  v882 = *(unsigned int **)(a1 + 8);
  uint64_t v883 = *v882;
  if ((*((_BYTE *)v882 + 33) & 0x10) != 0)
  {
    v885 = *(unsigned int **)(a1 + 8);
    unint64_t v884 = *v882;
    do
    {
      v885 = (unsigned int *)((char *)v885 + v883);
      uint64_t v883 = *v885;
      v884 += v883;
    }

    while ((*((_BYTE *)v885 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v884 = *v882;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v882, v884);
  if (a3[5].nelts >= 1)
  {
    uint64_t v886 = 0LL;
    do
    {
      uint64_t v887 = *(void *)&a3[5].elts[8 * v886];
      *(void *)__str = *(void *)(v887 + 8);
      v888 = find_entry(v1575, __str, 8uLL, 0LL);
      if (*v888) {
        uint64_t v889 = *(void *)(*v888 + 32LL);
      }
      else {
        uint64_t v889 = 0LL;
      }
      *(void *)__str = *(void *)(v887 + 8);
      v890 = find_entry(v878, __str, 8uLL, 0LL);
      if (*v890) {
        uint64_t v892 = *(void *)(*v890 + 32LL);
      }
      else {
        uint64_t v892 = 0LL;
      }
      uint64_t v893 = *(void *)(v892 + 8);
      v894 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "buffer";
      *(_OWORD *)&__str[16] = (unint64_t)v893;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v894, *(unsigned int *)(a1 + 16), v891, 0LL);
      v895 = *(unsigned int **)(a1 + 8);
      uint64_t v896 = *v895;
      if ((*((_BYTE *)v895 + 33) & 0x10) != 0)
      {
        v898 = *(unsigned int **)(a1 + 8);
        unint64_t v897 = *v895;
        do
        {
          v898 = (unsigned int *)((char *)v898 + v896);
          uint64_t v896 = *v898;
          v897 += v896;
        }

        while ((*((_BYTE *)v898 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v897 = *v895;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v895, v897);
      uint64_t v899 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v893;
      uint64_t v900 = *(void *)(v887 + 104);
      uint64_t v901 = *(unsigned __int16 *)(v887 + 96);
      *(void *)&__str[24] = *(unsigned int *)(v887 + 136);
      *(void *)&__str[32] = v901;
      uint64_t v902 = v899 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLIndirectCommandBufferDescriptorUsingEncode(*(void *)(a1 + 32), v900, v902, __s);
      DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v903 = *(unsigned int **)(a1 + 8);
      unsigned int v904 = v903[8];
      v903[8] = v904 | 4;
      unint64_t v905 = *v903;
      if ((v904 & 0x1000) != 0)
      {
        uint64_t v906 = *v903;
        v907 = v903;
        do
        {
          v907 = (unsigned int *)((char *)v907 + v906);
          uint64_t v906 = *v907;
          v905 += v906;
        }

        while ((*((_BYTE *)v907 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v903, v905);
      WriteIndirectCommandBufferInfo(a1, v887, v878, 0);
      if (*(void *)(v887 + 72)) {
        v908 = *(const char **)(v887 + 72);
      }
      else {
        v908 = "";
      }
      v909 = *(unsigned int **)(a1 + 8);
      *((void *)v909 + 1) = 0LL;
      *((void *)v909 + 2) = 0LL;
      *((void *)v909 + 3) = 0LL;
      *((void *)v909 + 4) = 0x534300000000LL;
      *(void *)v909 = 0xFFFFC1CB00000028LL;
      *((void *)v909 + 5) = v893;
      unsigned int *v909 = 48;
      AppendString(v908, (int *)v909);
      uint64_t v910 = *v909;
      uint64_t v911 = ((_DWORD)v910 + 3) & 0xFFFFFFFC;
      bzero((char *)v909 + v910, v911 - v910);
      unsigned int *v909 = v911;
      v912 = *(unsigned int **)(a1 + 8);
      uint64_t v913 = *v912;
      if ((*((_BYTE *)v912 + 33) & 0x10) != 0)
      {
        v915 = *(unsigned int **)(a1 + 8);
        unint64_t v914 = *v912;
        do
        {
          v915 = (unsigned int *)((char *)v915 + v913);
          uint64_t v913 = *v915;
          v914 += v913;
        }

        while ((*((_BYTE *)v915 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v914 = *v912;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v912, v914);
      uint64_t v916 = *(unsigned __int16 *)(v887 + 98);
      v917 = *(void **)(a1 + 8);
      v917[2] = 0LL;
      v917[3] = 0LL;
      v917[1] = 0LL;
      v917[4] = 0x6C754300000000LL;
      void *v917 = 0xFFFFC1D000000028LL;
      v917[5] = v893;
      v917[6] = v916;
      *(_DWORD *)v917 = 56;
      v918 = *(unsigned int **)(a1 + 8);
      uint64_t v919 = *v918;
      uint64_t v878 = v1583;
      if ((*((_BYTE *)v918 + 33) & 0x10) != 0)
      {
        v921 = *(unsigned int **)(a1 + 8);
        unint64_t v920 = *v918;
        do
        {
          v921 = (unsigned int *)((char *)v921 + v919);
          uint64_t v919 = *v921;
          v920 += v919;
        }

        while ((*((_BYTE *)v921 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v920 = *v918;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v918, v920);
      WriteGTMTLSMIndirectCommandBuffer_restore(a1, v889, v893);
      if (v892
        && (unint64_t v922 = atomic_load((unint64_t *)(v892 + 56)),
            unint64_t v923 = v922 & 0xFFFFFFFFFFFFFFE0LL,
            (v922 & 0xFFFFFFFFFFFFFFE0LL) != 0))
      {
        uint64_t v924 = *(void *)(a1 + 32);
        unint64_t v925 = *(void *)(v924 + 440);
        BOOL v271 = v925 >= v923;
        unint64_t v926 = v925 - v923;
        if (v926 != 0 && v271) {
          unint64_t v927 = v926 * *(unsigned int *)(v924 + 448) / *(unsigned int *)(v924 + 452);
        }
        else {
          unint64_t v927 = 0LL;
        }
      }

      else
      {
        unint64_t v927 = -1LL;
      }

      v928 = *(void **)(a1 + 8);
      v928[2] = 0LL;
      v928[3] = 0LL;
      v928[1] = 0LL;
      v928[4] = 0x77754300000046LL;
      void *v928 = 0xFFFFD81F00000028LL;
      v928[5] = v893;
      v928[6] = v927;
      *(_DWORD *)v928 = 56;
      v929 = *(unsigned int **)(a1 + 8);
      uint64_t v930 = *v929;
      if ((*((_BYTE *)v929 + 33) & 0x10) != 0)
      {
        v932 = *(unsigned int **)(a1 + 8);
        unint64_t v931 = *v929;
        do
        {
          v932 = (unsigned int *)((char *)v932 + v930);
          uint64_t v930 = *v932;
          v931 += v930;
        }

        while ((*((_BYTE *)v932 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v931 = *v929;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v929, v931);
      uint64_t v933 = *(void *)a1;
      uint64_t v934 = *(void *)(a1 + 8);
      *(void *)(v934 + 16) = 0LL;
      *(void *)(v934 + 24) = 0LL;
      *(void *)(v934 + 8) = 0LL;
      *(_DWORD *)(v934 + 32) = 70;
      *(_DWORD *)(v934 + 36) = 67;
      *(void *)uint64_t v934 = 0xFFFFD00800000028LL;
      *(void *)(v934 + 40) = v933;
      *(_DWORD *)uint64_t v934 = 48;
      v935 = *(unsigned int **)(a1 + 8);
      uint64_t v936 = *v935;
      if ((*((_BYTE *)v935 + 33) & 0x10) != 0)
      {
        v938 = *(unsigned int **)(a1 + 8);
        unint64_t v937 = *v935;
        do
        {
          v938 = (unsigned int *)((char *)v938 + v936);
          uint64_t v936 = *v938;
          v937 += v936;
        }

        while ((*((_BYTE *)v938 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v937 = *v935;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v935, v937);
      ++v886;
    }

    while (v886 < a3[5].nelts);
  }

  uint64_t v939 = *(void *)a1;
  uint64_t v940 = *(void *)(a1 + 8);
  *(void *)(v940 + 16) = 0LL;
  *(void *)(v940 + 24) = 0LL;
  *(void *)(v940 + 8) = 0LL;
  *(_DWORD *)(v940 + 32) = 70;
  *(_DWORD *)(v940 + 36) = 67;
  *(void *)uint64_t v940 = 0xFFFFD00800000028LL;
  *(void *)(v940 + 40) = v939;
  *(_DWORD *)uint64_t v940 = 48;
  v941 = *(unsigned int **)(a1 + 8);
  uint64_t v942 = *v941;
  if ((*((_BYTE *)v941 + 33) & 0x10) != 0)
  {
    v944 = *(unsigned int **)(a1 + 8);
    unint64_t v943 = *v941;
    do
    {
      v944 = (unsigned int *)((char *)v944 + v942);
      uint64_t v942 = *v944;
      v943 += v942;
    }

    while ((*((_BYTE *)v944 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v943 = *v941;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v941, v943);
  v945 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "counterSampleBuffers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v945, *(unsigned int *)(a1 + 16), v946, 0LL);
  v947 = *(unsigned int **)(a1 + 8);
  uint64_t v948 = *v947;
  if ((*((_BYTE *)v947 + 33) & 0x10) != 0)
  {
    v950 = *(unsigned int **)(a1 + 8);
    unint64_t v949 = *v947;
    do
    {
      v950 = (unsigned int *)((char *)v950 + v948);
      uint64_t v948 = *v950;
      v949 += v948;
    }

    while ((*((_BYTE *)v950 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v949 = *v947;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v947, v949);
  if (a3[19].nelts >= 1)
  {
    uint64_t v951 = 0LL;
    do
    {
      uint64_t v952 = *(void *)&a3[19].elts[8 * v951];
      if (v952) {
        uint64_t v953 = *(void *)(v952 + 8);
      }
      else {
        uint64_t v953 = 0LL;
      }
      *(void *)__str = v953;
      unint64_t v954 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v955 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "counterSampleBuffer";
      *(_OWORD *)&__str[16] = v954;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v955, *(unsigned int *)(a1 + 16), v956, 0LL);
      v957 = *(unsigned int **)(a1 + 8);
      uint64_t v958 = *v957;
      if ((*((_BYTE *)v957 + 33) & 0x10) != 0)
      {
        v960 = *(unsigned int **)(a1 + 8);
        unint64_t v959 = *v957;
        do
        {
          v960 = (unsigned int *)((char *)v960 + v958);
          uint64_t v958 = *v960;
          v959 += v958;
        }

        while ((*((_BYTE *)v960 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v959 = *v957;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v957, v959);
      uint64_t v961 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v954;
      uint64_t v962 = *(void *)(v952 + 48);
      *(void *)&__str[24] = 0LL;
      uint64_t v963 = v961 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLCounterSampleBufferDescriptorUsingEncode(*(void *)(a1 + 32), v962, v963, __s);
      DYTraceEncode_MTLDevice_newCounterSampleBufferWithDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v964 = *(unsigned int **)(a1 + 8);
      uint64_t v965 = *v964;
      if ((*((_BYTE *)v964 + 33) & 0x10) != 0)
      {
        v967 = *(unsigned int **)(a1 + 8);
        unint64_t v966 = *v964;
        uint64_t v878 = v1583;
        do
        {
          v967 = (unsigned int *)((char *)v967 + v965);
          uint64_t v965 = *v967;
          v966 += v965;
        }

        while ((*((_BYTE *)v967 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v966 = *v964;
        uint64_t v878 = v1583;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v964, v966);
      uint64_t v968 = *(void *)a1;
      uint64_t v969 = *(void *)(a1 + 8);
      *(void *)(v969 + 16) = 0LL;
      *(void *)(v969 + 24) = 0LL;
      *(void *)(v969 + 8) = 0LL;
      *(_DWORD *)(v969 + 32) = 70;
      *(_DWORD *)(v969 + 36) = 67;
      *(void *)uint64_t v969 = 0xFFFFD00800000028LL;
      *(void *)(v969 + 40) = v968;
      *(_DWORD *)uint64_t v969 = 48;
      v970 = *(unsigned int **)(a1 + 8);
      uint64_t v971 = *v970;
      if ((*((_BYTE *)v970 + 33) & 0x10) != 0)
      {
        v973 = *(unsigned int **)(a1 + 8);
        unint64_t v972 = *v970;
        do
        {
          v973 = (unsigned int *)((char *)v973 + v971);
          uint64_t v971 = *v973;
          v972 += v971;
        }

        while ((*((_BYTE *)v973 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v972 = *v970;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v970, v972);
      ++v951;
    }

    while (v951 < a3[19].nelts);
  }

  uint64_t v974 = *(void *)a1;
  uint64_t v975 = *(void *)(a1 + 8);
  *(void *)(v975 + 16) = 0LL;
  *(void *)(v975 + 24) = 0LL;
  *(void *)(v975 + 8) = 0LL;
  *(_DWORD *)(v975 + 32) = 70;
  *(_DWORD *)(v975 + 36) = 67;
  *(void *)uint64_t v975 = 0xFFFFD00800000028LL;
  *(void *)(v975 + 40) = v974;
  *(_DWORD *)uint64_t v975 = 48;
  v976 = *(unsigned int **)(a1 + 8);
  uint64_t v977 = *v976;
  if ((*((_BYTE *)v976 + 33) & 0x10) != 0)
  {
    v979 = *(unsigned int **)(a1 + 8);
    unint64_t v978 = *v976;
    do
    {
      v979 = (unsigned int *)((char *)v979 + v977);
      uint64_t v977 = *v979;
      v978 += v977;
    }

    while ((*((_BYTE *)v979 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v978 = *v976;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v976, v978);
  v980 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-render-commands";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v980, *(unsigned int *)(a1 + 16), v981, 0LL);
  v982 = *(unsigned int **)(a1 + 8);
  uint64_t v983 = *v982;
  if ((*((_BYTE *)v982 + 33) & 0x10) != 0)
  {
    v985 = *(unsigned int **)(a1 + 8);
    unint64_t v984 = *v982;
    do
    {
      v985 = (unsigned int *)((char *)v985 + v983);
      uint64_t v983 = *v985;
      v984 += v983;
    }

    while ((*((_BYTE *)v985 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v984 = *v982;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v982, v984);
  if (a3[20].nelts >= 1)
  {
    uint64_t v986 = 0LL;
    do
    {
      v987 = *(void **)&a3[20].elts[8 * v986];
      *(void *)__str = v987[5];
      uint64_t v988 = *(void *)(*(void *)(*find_entry(v878, __str, 8uLL, 0LL) + 32LL) + 8LL);
      *(void *)__str = v987[1];
      uint64_t v989 = *(void *)(*(void *)(*find_entry(v878, __str, 8uLL, 0LL) + 32LL) + 8LL);
      uint64_t v990 = v987[6];
      uint64_t v991 = *(void *)(a1 + 8);
      *(void *)(v991 + 16) = 0LL;
      *(void *)(v991 + 24) = 0LL;
      *(void *)(v991 + 8) = 0LL;
      *(void *)(v991 + 32) = 0x6C754300000001LL;
      *(void *)uint64_t v991 = 0xFFFFC1CE00000028LL;
      *(void *)(v991 + 40) = v988;
      *(void *)(v991 + 48) = v990;
      *(_DWORD *)(v991 + 56) = 116;
      *(void *)(v991 + 60) = v989;
      *(_DWORD *)uint64_t v991 = 68;
      v992 = *(unsigned int **)(a1 + 8);
      uint64_t v993 = *v992;
      if ((*((_BYTE *)v992 + 33) & 0x10) != 0)
      {
        v995 = *(unsigned int **)(a1 + 8);
        unint64_t v994 = *v992;
        do
        {
          v995 = (unsigned int *)((char *)v995 + v993);
          uint64_t v993 = *v995;
          v994 += v993;
        }

        while ((*((_BYTE *)v995 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v994 = *v992;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v992, v994);
      ++v986;
    }

    while (v986 < a3[20].nelts);
  }

  uint64_t v996 = *(void *)a1;
  uint64_t v997 = *(void *)(a1 + 8);
  *(void *)(v997 + 16) = 0LL;
  *(void *)(v997 + 24) = 0LL;
  *(void *)(v997 + 8) = 0LL;
  *(_DWORD *)(v997 + 32) = 70;
  *(_DWORD *)(v997 + 36) = 67;
  *(void *)uint64_t v997 = 0xFFFFD00800000028LL;
  *(void *)(v997 + 40) = v996;
  *(_DWORD *)uint64_t v997 = 48;
  v998 = *(unsigned int **)(a1 + 8);
  uint64_t v999 = *v998;
  if ((*((_BYTE *)v998 + 33) & 0x10) != 0)
  {
    v1001 = *(unsigned int **)(a1 + 8);
    unint64_t v1000 = *v998;
    do
    {
      v1001 = (unsigned int *)((char *)v1001 + v999);
      uint64_t v999 = *v1001;
      v1000 += v999;
    }

    while ((*((_BYTE *)v1001 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1000 = *v998;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v998, v1000);
  v1002 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-compute-commands";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1002, *(unsigned int *)(a1 + 16), v1003, 0LL);
  v1004 = *(unsigned int **)(a1 + 8);
  uint64_t v1005 = *v1004;
  if ((*((_BYTE *)v1004 + 33) & 0x10) != 0)
  {
    v1007 = *(unsigned int **)(a1 + 8);
    unint64_t v1006 = *v1004;
    do
    {
      v1007 = (unsigned int *)((char *)v1007 + v1005);
      uint64_t v1005 = *v1007;
      v1006 += v1005;
    }

    while ((*((_BYTE *)v1007 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1006 = *v1004;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1004, v1006);
  if (a3[21].nelts >= 1)
  {
    uint64_t v1008 = 0LL;
    do
    {
      v1009 = *(void **)&a3[21].elts[8 * v1008];
      *(void *)__str = v1009[5];
      uint64_t v1010 = *(void *)(*(void *)(*find_entry(v878, __str, 8uLL, 0LL) + 32LL) + 8LL);
      *(void *)__str = v1009[1];
      uint64_t v1011 = *(void *)(*(void *)(*find_entry(v878, __str, 8uLL, 0LL) + 32LL) + 8LL);
      uint64_t v1012 = v1009[6];
      uint64_t v1013 = *(void *)(a1 + 8);
      *(void *)(v1013 + 16) = 0LL;
      *(void *)(v1013 + 24) = 0LL;
      *(void *)(v1013 + 8) = 0LL;
      *(void *)(v1013 + 32) = 0x6C754300000001LL;
      *(void *)uint64_t v1013 = 0xFFFFC1CF00000028LL;
      *(void *)(v1013 + 40) = v1010;
      *(void *)(v1013 + 48) = v1012;
      *(_DWORD *)(v1013 + 56) = 116;
      *(void *)(v1013 + 60) = v1011;
      *(_DWORD *)uint64_t v1013 = 68;
      v1014 = *(unsigned int **)(a1 + 8);
      uint64_t v1015 = *v1014;
      if ((*((_BYTE *)v1014 + 33) & 0x10) != 0)
      {
        v1017 = *(unsigned int **)(a1 + 8);
        unint64_t v1016 = *v1014;
        do
        {
          v1017 = (unsigned int *)((char *)v1017 + v1015);
          uint64_t v1015 = *v1017;
          v1016 += v1015;
        }

        while ((*((_BYTE *)v1017 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1016 = *v1014;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1014, v1016);
      ++v1008;
    }

    while (v1008 < a3[21].nelts);
  }

  uint64_t v1018 = *(void *)a1;
  uint64_t v1019 = *(void *)(a1 + 8);
  *(void *)(v1019 + 16) = 0LL;
  *(void *)(v1019 + 24) = 0LL;
  *(void *)(v1019 + 8) = 0LL;
  *(_DWORD *)(v1019 + 32) = 70;
  *(_DWORD *)(v1019 + 36) = 67;
  *(void *)uint64_t v1019 = 0xFFFFD00800000028LL;
  *(void *)(v1019 + 40) = v1018;
  *(_DWORD *)uint64_t v1019 = 48;
  v1020 = *(unsigned int **)(a1 + 8);
  uint64_t v1021 = *v1020;
  if ((*((_BYTE *)v1020 + 33) & 0x10) != 0)
  {
    v1023 = *(unsigned int **)(a1 + 8);
    unint64_t v1022 = *v1020;
    do
    {
      v1023 = (unsigned int *)((char *)v1023 + v1021);
      uint64_t v1021 = *v1023;
      v1022 += v1021;
    }

    while ((*((_BYTE *)v1023 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1022 = *v1020;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1020, v1022);
  v1024 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "rasterization-rate-maps";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1024, *(unsigned int *)(a1 + 16), v1025, 0LL);
  v1026 = *(unsigned int **)(a1 + 8);
  uint64_t v1027 = *v1026;
  if ((*((_BYTE *)v1026 + 33) & 0x10) != 0)
  {
    v1029 = *(unsigned int **)(a1 + 8);
    unint64_t v1028 = *v1026;
    do
    {
      v1029 = (unsigned int *)((char *)v1029 + v1027);
      uint64_t v1027 = *v1029;
      v1028 += v1027;
    }

    while ((*((_BYTE *)v1029 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1028 = *v1026;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1026, v1028);
  if (a3[24].nelts >= 1)
  {
    uint64_t v1030 = 0LL;
    do
    {
      uint64_t v1031 = *(void *)&a3[24].elts[8 * v1030];
      if (v1031) {
        uint64_t v1032 = *(void *)(v1031 + 8);
      }
      else {
        uint64_t v1032 = 0LL;
      }
      *(void *)__str = v1032;
      unint64_t v1033 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v1034 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "rasterization-rate-map";
      *(_OWORD *)&__str[16] = v1033;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1034, *(unsigned int *)(a1 + 16), v1035, 0LL);
      v1036 = *(unsigned int **)(a1 + 8);
      uint64_t v1037 = *v1036;
      if ((*((_BYTE *)v1036 + 33) & 0x10) != 0)
      {
        v1039 = *(unsigned int **)(a1 + 8);
        unint64_t v1038 = *v1036;
        do
        {
          v1039 = (unsigned int *)((char *)v1039 + v1037);
          uint64_t v1037 = *v1039;
          v1038 += v1037;
        }

        while ((*((_BYTE *)v1039 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1038 = *v1036;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1036, v1038);
      v1040 = *(__int128 **)(v1031 + 48);
      __int128 v1041 = *v1040;
      __int128 v1042 = v1040[1];
      *(void *)&__str[32] = *((void *)v1040 + 4);
      *(_OWORD *)__str = v1041;
      *(_OWORD *)&__str[16] = v1042;
      *(_DWORD *)&__str[24] = *(_DWORD *)(v1031 + 56);
      __str[34] = *(_BYTE *)(v1031 + 60);
      uint64_t v1043 = *(void *)(a1 + 8);
      *(void *)__s = *(void *)a1;
      v1588[0] = v1033;
      uint64_t v1044 = v1043 + *(unsigned int *)(a1 + 16) - 512;
      newpool[0] = (apr_pool_t *)(&stru_1F8 + 8);
      v1588[1] = StoreMTLRasterizationRateMapDescriptorUsingEncode( *(void *)(a1 + 32),  (const char **)__str,  v1044,  newpool);
      DYTraceEncode_MTLDevice_newRasterizationRateMapWithDescriptor( (uint64_t)__s,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v1045 = *(unsigned int **)(a1 + 8);
      uint64_t v1046 = *v1045;
      if ((*((_BYTE *)v1045 + 33) & 0x10) != 0)
      {
        v1048 = *(unsigned int **)(a1 + 8);
        unint64_t v1047 = *v1045;
        do
        {
          v1048 = (unsigned int *)((char *)v1048 + v1046);
          uint64_t v1046 = *v1048;
          v1047 += v1046;
        }

        while ((*((_BYTE *)v1048 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1047 = *v1045;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1045, v1047);
      uint64_t v1049 = *(void *)a1;
      uint64_t v1050 = *(void *)(a1 + 8);
      *(void *)(v1050 + 16) = 0LL;
      *(void *)(v1050 + 24) = 0LL;
      *(void *)(v1050 + 8) = 0LL;
      *(_DWORD *)(v1050 + 32) = 70;
      *(_DWORD *)(v1050 + 36) = 67;
      *(void *)uint64_t v1050 = 0xFFFFD00800000028LL;
      *(void *)(v1050 + 40) = v1049;
      *(_DWORD *)uint64_t v1050 = 48;
      v1051 = *(unsigned int **)(a1 + 8);
      uint64_t v1052 = *v1051;
      if ((*((_BYTE *)v1051 + 33) & 0x10) != 0)
      {
        v1054 = *(unsigned int **)(a1 + 8);
        unint64_t v1053 = *v1051;
        do
        {
          v1054 = (unsigned int *)((char *)v1054 + v1052);
          uint64_t v1052 = *v1054;
          v1053 += v1052;
        }

        while ((*((_BYTE *)v1054 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1053 = *v1051;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1051, v1053);
      ++v1030;
    }

    while (v1030 < a3[24].nelts);
  }

  uint64_t v1055 = *(void *)a1;
  uint64_t v1056 = *(void *)(a1 + 8);
  *(void *)(v1056 + 16) = 0LL;
  *(void *)(v1056 + 24) = 0LL;
  *(void *)(v1056 + 8) = 0LL;
  *(_DWORD *)(v1056 + 32) = 70;
  *(_DWORD *)(v1056 + 36) = 67;
  *(void *)uint64_t v1056 = 0xFFFFD00800000028LL;
  *(void *)(v1056 + 40) = v1055;
  *(_DWORD *)uint64_t v1056 = 48;
  v1057 = *(unsigned int **)(a1 + 8);
  uint64_t v1058 = *v1057;
  if ((*((_BYTE *)v1057 + 33) & 0x10) != 0)
  {
    v1061 = *(unsigned int **)(a1 + 8);
    unint64_t v1059 = *v1057;
    uint64_t v1060 = v1583;
    do
    {
      v1061 = (unsigned int *)((char *)v1061 + v1058);
      uint64_t v1058 = *v1061;
      v1059 += v1058;
    }

    while ((*((_BYTE *)v1061 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1059 = *v1057;
    uint64_t v1060 = v1583;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1057, v1059);
  v1062 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "resource-groups";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1062, *(unsigned int *)(a1 + 16), v1063, 0LL);
  v1064 = *(unsigned int **)(a1 + 8);
  uint64_t v1065 = *v1064;
  if ((*((_BYTE *)v1064 + 33) & 0x10) != 0)
  {
    v1067 = *(unsigned int **)(a1 + 8);
    unint64_t v1066 = *v1064;
    do
    {
      v1067 = (unsigned int *)((char *)v1067 + v1065);
      uint64_t v1065 = *v1067;
      v1066 += v1065;
    }

    while ((*((_BYTE *)v1067 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1066 = *v1064;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1064, v1066);
  if (a3[25].nelts >= 1)
  {
    uint64_t v1068 = 0LL;
    do
      WriteGTMTLSMResourceGroup((uint64_t *)a1, *(void *)&a3[25].elts[8 * v1068++], v1060);
    while (v1068 < a3[25].nelts);
  }

  uint64_t v1069 = *(void *)a1;
  uint64_t v1070 = *(void *)(a1 + 8);
  *(void *)(v1070 + 16) = 0LL;
  *(void *)(v1070 + 24) = 0LL;
  *(void *)(v1070 + 8) = 0LL;
  *(_DWORD *)(v1070 + 32) = 70;
  *(_DWORD *)(v1070 + 36) = 67;
  *(void *)uint64_t v1070 = 0xFFFFD00800000028LL;
  *(void *)(v1070 + 40) = v1069;
  *(_DWORD *)uint64_t v1070 = 48;
  v1071 = *(unsigned int **)(a1 + 8);
  uint64_t v1072 = *v1071;
  if ((*((_BYTE *)v1071 + 33) & 0x10) != 0)
  {
    v1074 = *(unsigned int **)(a1 + 8);
    unint64_t v1073 = *v1071;
    do
    {
      v1074 = (unsigned int *)((char *)v1074 + v1072);
      uint64_t v1072 = *v1074;
      v1073 += v1072;
    }

    while ((*((_BYTE *)v1074 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1073 = *v1071;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1071, v1073);
  v1075 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "primitive-acceleration-structures";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1075, *(unsigned int *)(a1 + 16), v1076, 0LL);
  v1077 = *(unsigned int **)(a1 + 8);
  uint64_t v1078 = *v1077;
  if ((*((_BYTE *)v1077 + 33) & 0x10) != 0)
  {
    v1080 = *(unsigned int **)(a1 + 8);
    unint64_t v1079 = *v1077;
    do
    {
      v1080 = (unsigned int *)((char *)v1080 + v1078);
      uint64_t v1078 = *v1080;
      v1079 += v1078;
    }

    while ((*((_BYTE *)v1080 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1079 = *v1077;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1077, v1079);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1081 = 0LL;
    do
    {
      uint64_t v1082 = *(void *)&a3[8].elts[8 * v1081];
      if (v1082)
      {
        *(void *)__str = *(void *)(v1082 + 8);
        v1083 = find_entry(v1583, __str, 8uLL, 0LL);
        if (*v1083) {
          uint64_t v1084 = *(void *)(*v1083 + 32LL);
        }
        else {
          uint64_t v1084 = 0LL;
        }
        uint64_t v1086 = *(void *)(v1082 + 8);
      }

      else
      {
        *(void *)__str = 0LL;
        v1085 = find_entry(v1583, __str, 8uLL, 0LL);
        if (*v1085) {
          uint64_t v1084 = *(void *)(*v1085 + 32LL);
        }
        else {
          uint64_t v1084 = 0LL;
        }
        uint64_t v1086 = 0LL;
      }

      *(void *)__str = v1086;
      v1087 = find_entry(v1583, __str, 8uLL, 0LL);
      if (!*(void *)(v1082 + 144) && !*(void *)(v1082 + 48) && !*(_BYTE *)(v1082 + 104))
      {
        unint64_t v1089 = *(void *)(*(void *)(*v1087 + 32LL) + 8LL);
        v1090 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "primitive-acceleration-structure";
        *(_OWORD *)&__str[16] = v1089;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v1090, *(unsigned int *)(a1 + 16), v1088, 0LL);
        v1091 = *(unsigned int **)(a1 + 8);
        uint64_t v1092 = *v1091;
        if ((*((_BYTE *)v1091 + 33) & 0x10) != 0)
        {
          v1094 = *(unsigned int **)(a1 + 8);
          unint64_t v1093 = *v1091;
          do
          {
            v1094 = (unsigned int *)((char *)v1094 + v1092);
            uint64_t v1092 = *v1094;
            v1093 += v1092;
          }

          while ((*((_BYTE *)v1094 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1093 = *v1091;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1091, v1093);
        WriteGTMTLSMAccelerationStructure_new((uint64_t *)a1, *(void *)(a2 + 16), v1082, *(void *)(v1084 + 8));
        WriteGTMTLSMAccelerationStructure_properties(a1, v1082, v1084, v1583, v1095);
        uint64_t v1096 = *(void *)a1;
        uint64_t v1097 = *(void *)(a1 + 8);
        *(void *)(v1097 + 16) = 0LL;
        *(void *)(v1097 + 24) = 0LL;
        *(void *)(v1097 + 8) = 0LL;
        *(_DWORD *)(v1097 + 32) = 70;
        *(_DWORD *)(v1097 + 36) = 67;
        *(void *)uint64_t v1097 = 0xFFFFD00800000028LL;
        *(void *)(v1097 + 40) = v1096;
        *(_DWORD *)uint64_t v1097 = 48;
        v1098 = *(unsigned int **)(a1 + 8);
        uint64_t v1099 = *v1098;
        if ((*((_BYTE *)v1098 + 33) & 0x10) != 0)
        {
          v1101 = *(unsigned int **)(a1 + 8);
          unint64_t v1100 = *v1098;
          do
          {
            v1101 = (unsigned int *)((char *)v1101 + v1099);
            uint64_t v1099 = *v1101;
            v1100 += v1099;
          }

          while ((*((_BYTE *)v1101 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1100 = *v1098;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1098, v1100);
      }

      ++v1081;
    }

    while (v1081 < a3[8].nelts);
  }

  uint64_t v1102 = *(void *)a1;
  uint64_t v1103 = *(void *)(a1 + 8);
  *(void *)(v1103 + 16) = 0LL;
  *(void *)(v1103 + 24) = 0LL;
  *(void *)(v1103 + 8) = 0LL;
  *(_DWORD *)(v1103 + 32) = 70;
  *(_DWORD *)(v1103 + 36) = 67;
  *(void *)uint64_t v1103 = 0xFFFFD00800000028LL;
  *(void *)(v1103 + 40) = v1102;
  *(_DWORD *)uint64_t v1103 = 48;
  v1104 = *(unsigned int **)(a1 + 8);
  uint64_t v1105 = *v1104;
  if ((*((_BYTE *)v1104 + 33) & 0x10) != 0)
  {
    v1107 = *(unsigned int **)(a1 + 8);
    unint64_t v1106 = *v1104;
    do
    {
      v1107 = (unsigned int *)((char *)v1107 + v1105);
      uint64_t v1105 = *v1107;
      v1106 += v1105;
    }

    while ((*((_BYTE *)v1107 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1106 = *v1104;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1104, v1106);
  v1108 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "instance-acceleration-structures";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1108, *(unsigned int *)(a1 + 16), v1109, 0LL);
  v1110 = *(unsigned int **)(a1 + 8);
  uint64_t v1111 = *v1110;
  if ((*((_BYTE *)v1110 + 33) & 0x10) != 0)
  {
    v1113 = *(unsigned int **)(a1 + 8);
    unint64_t v1112 = *v1110;
    do
    {
      v1113 = (unsigned int *)((char *)v1113 + v1111);
      uint64_t v1111 = *v1113;
      v1112 += v1111;
    }

    while ((*((_BYTE *)v1113 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1112 = *v1110;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1110, v1112);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1114 = 0LL;
    do
    {
      uint64_t v1115 = *(void *)&a3[8].elts[8 * v1114];
      if (!*(void *)(v1115 + 144) && !*(void *)(v1115 + 48))
      {
        *(void *)__str = *(void *)(v1115 + 8);
        v1116 = find_entry(v1583, __str, 8uLL, 0LL);
        if (*v1116) {
          uint64_t v1117 = *(void *)(*v1116 + 32LL);
        }
        else {
          uint64_t v1117 = 0LL;
        }
        *(void *)__str = *(void *)(v1115 + 8);
        uint64_t v1119 = *find_entry(v1583, __str, 8uLL, 0LL);
        if (v1119) {
          uint64_t v1119 = *(void *)(v1119 + 32);
        }
        if (*(_BYTE *)(v1115 + 104))
        {
          unint64_t v1120 = *(void *)(v1119 + 8);
          v1121 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "instance-acceleration-structure";
          *(_OWORD *)&__str[16] = v1120;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v1121, *(unsigned int *)(a1 + 16), v1118, 0LL);
          v1122 = *(unsigned int **)(a1 + 8);
          uint64_t v1123 = *v1122;
          if ((*((_BYTE *)v1122 + 33) & 0x10) != 0)
          {
            v1125 = *(unsigned int **)(a1 + 8);
            unint64_t v1124 = *v1122;
            do
            {
              v1125 = (unsigned int *)((char *)v1125 + v1123);
              uint64_t v1123 = *v1125;
              v1124 += v1123;
            }

            while ((*((_BYTE *)v1125 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v1124 = *v1122;
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v1122, v1124);
          WriteGTMTLSMAccelerationStructure_new((uint64_t *)a1, *(void *)(a2 + 16), v1115, *(void *)(v1117 + 8));
          WriteGTMTLSMAccelerationStructure_properties(a1, v1115, v1117, v1583, v1126);
          uint64_t v1127 = *(void *)a1;
          uint64_t v1128 = *(void *)(a1 + 8);
          *(void *)(v1128 + 16) = 0LL;
          *(void *)(v1128 + 24) = 0LL;
          *(void *)(v1128 + 8) = 0LL;
          *(_DWORD *)(v1128 + 32) = 70;
          *(_DWORD *)(v1128 + 36) = 67;
          *(void *)uint64_t v1128 = 0xFFFFD00800000028LL;
          *(void *)(v1128 + 40) = v1127;
          *(_DWORD *)uint64_t v1128 = 48;
          v1129 = *(unsigned int **)(a1 + 8);
          uint64_t v1130 = *v1129;
          if ((*((_BYTE *)v1129 + 33) & 0x10) != 0)
          {
            v1132 = *(unsigned int **)(a1 + 8);
            unint64_t v1131 = *v1129;
            do
            {
              v1132 = (unsigned int *)((char *)v1132 + v1130);
              uint64_t v1130 = *v1132;
              v1131 += v1130;
            }

            while ((*((_BYTE *)v1132 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v1131 = *v1129;
          }

          fbstream_write(*(void *)(a1 + 24), (uint64_t)v1129, v1131);
        }
      }

      ++v1114;
    }

    while (v1114 < a3[8].nelts);
  }

  uint64_t v1133 = *(void *)a1;
  uint64_t v1134 = *(void *)(a1 + 8);
  *(void *)(v1134 + 16) = 0LL;
  *(void *)(v1134 + 24) = 0LL;
  *(void *)(v1134 + 8) = 0LL;
  *(_DWORD *)(v1134 + 32) = 70;
  *(_DWORD *)(v1134 + 36) = 67;
  *(void *)uint64_t v1134 = 0xFFFFD00800000028LL;
  *(void *)(v1134 + 40) = v1133;
  *(_DWORD *)uint64_t v1134 = 48;
  v1135 = *(unsigned int **)(a1 + 8);
  uint64_t v1136 = *v1135;
  if ((*((_BYTE *)v1135 + 33) & 0x10) != 0)
  {
    v1139 = *(unsigned int **)(a1 + 8);
    unint64_t v1137 = *v1135;
    uint64_t v1138 = v1583;
    do
    {
      v1139 = (unsigned int *)((char *)v1139 + v1136);
      uint64_t v1136 = *v1139;
      v1137 += v1136;
    }

    while ((*((_BYTE *)v1139 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1137 = *v1135;
    uint64_t v1138 = v1583;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1135, v1137);
  v1140 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "primitive-acceleration-structure-restores";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1140, *(unsigned int *)(a1 + 16), v1141, 0LL);
  v1142 = *(unsigned int **)(a1 + 8);
  uint64_t v1143 = *v1142;
  if ((*((_BYTE *)v1142 + 33) & 0x10) != 0)
  {
    v1145 = *(unsigned int **)(a1 + 8);
    unint64_t v1144 = *v1142;
    do
    {
      v1145 = (unsigned int *)((char *)v1145 + v1143);
      uint64_t v1143 = *v1145;
      v1144 += v1143;
    }

    while ((*((_BYTE *)v1145 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1144 = *v1142;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1142, v1144);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1146 = 0LL;
    do
    {
      uint64_t v1147 = *(void *)&a3[8].elts[8 * v1146];
      if (*(_BYTE *)(v1147 + 105))
      {
        *(void *)__str = *(void *)(v1147 + 8);
        v1148 = find_entry(v1138, __str, 8uLL, 0LL);
        uint64_t v1149 = *v1148 ? *(void *)(*v1148 + 32LL) : 0LL;
        *(void *)__str = *(void *)(v1147 + 8);
        find_entry(v1138, __str, 8uLL, 0LL);
        *(void *)__str = *(void *)(v1147 + 8);
        uint64_t v1150 = *find_entry(v1575, __str, 8uLL, 0LL);
        if (v1150)
        {
          if (!*(_BYTE *)(v1147 + 104))
          {
            uint64_t v1151 = *(void *)(v1150 + 32);
            if (v1151)
            {
              uint64_t v1152 = *(void *)(v1149 + 8);
              GTResourceDownloaderGetResourceFilename(v1151, 0, __str, 0x80uLL);
              uint64_t FileSize = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __str);
              if (FileSize)
              {
                *(void *)__s = v1152;
                v1588[0] = __str;
                v1588[1] = FileSize;
                DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure( (uint64_t)__s,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
                v1154 = *(unsigned int **)(a1 + 8);
                uint64_t v1155 = *v1154;
                if ((*((_BYTE *)v1154 + 33) & 0x10) != 0)
                {
                  v1157 = *(unsigned int **)(a1 + 8);
                  unint64_t v1156 = *v1154;
                  do
                  {
                    v1157 = (unsigned int *)((char *)v1157 + v1155);
                    uint64_t v1155 = *v1157;
                    v1156 += v1155;
                  }

                  while ((*((_BYTE *)v1157 + 33) & 0x20) == 0);
                }

                else
                {
                  unint64_t v1156 = *v1154;
                }

                fbstream_write(*(void *)(a1 + 24), (uint64_t)v1154, v1156);
              }
            }
          }
        }
      }

      ++v1146;
    }

    while (v1146 < a3[8].nelts);
  }

  uint64_t v1158 = *(void *)a1;
  uint64_t v1159 = *(void *)(a1 + 8);
  *(void *)(v1159 + 16) = 0LL;
  *(void *)(v1159 + 24) = 0LL;
  *(void *)(v1159 + 8) = 0LL;
  *(_DWORD *)(v1159 + 32) = 70;
  *(_DWORD *)(v1159 + 36) = 67;
  *(void *)uint64_t v1159 = 0xFFFFD00800000028LL;
  *(void *)(v1159 + 40) = v1158;
  *(_DWORD *)uint64_t v1159 = 48;
  v1160 = *(unsigned int **)(a1 + 8);
  uint64_t v1161 = *v1160;
  if ((*((_BYTE *)v1160 + 33) & 0x10) != 0)
  {
    v1163 = *(unsigned int **)(a1 + 8);
    unint64_t v1162 = *v1160;
    do
    {
      v1163 = (unsigned int *)((char *)v1163 + v1161);
      uint64_t v1161 = *v1163;
      v1162 += v1161;
    }

    while ((*((_BYTE *)v1163 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1162 = *v1160;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1160, v1162);
  v1164 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "instance-acceleration-structure-restores";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1164, *(unsigned int *)(a1 + 16), v1165, 0LL);
  v1166 = *(unsigned int **)(a1 + 8);
  uint64_t v1167 = *v1166;
  if ((*((_BYTE *)v1166 + 33) & 0x10) != 0)
  {
    v1169 = *(unsigned int **)(a1 + 8);
    unint64_t v1168 = *v1166;
    do
    {
      v1169 = (unsigned int *)((char *)v1169 + v1167);
      uint64_t v1167 = *v1169;
      v1168 += v1167;
    }

    while ((*((_BYTE *)v1169 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1168 = *v1166;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1166, v1168);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1170 = 0LL;
    do
    {
      uint64_t v1171 = *(void *)&a3[8].elts[8 * v1170];
      if (*(_BYTE *)(v1171 + 105))
      {
        *(void *)__str = *(void *)(v1171 + 8);
        v1172 = find_entry(v1138, __str, 8uLL, 0LL);
        uint64_t v1173 = *v1172 ? *(void *)(*v1172 + 32LL) : 0LL;
        *(void *)__str = *(void *)(v1171 + 8);
        find_entry(v1138, __str, 8uLL, 0LL);
        *(void *)__str = *(void *)(v1171 + 8);
        uint64_t v1174 = *find_entry(v1575, __str, 8uLL, 0LL);
        if (v1174)
        {
          if (*(_BYTE *)(v1171 + 104))
          {
            uint64_t v1175 = *(void *)(v1174 + 32);
            if (v1175)
            {
              v1176 = *(apr_pool_t **)(v1173 + 8);
              GTResourceDownloaderGetResourceFilename(*(void *)(v1174 + 32), 0, __str, 0x80uLL);
              uint64_t v1177 = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __str);
              if (v1177)
              {
                v1178 = (apr_pool_t *)v1177;
                GTResourceDownloaderGetResourceFilename(v1175, 1, __s, 0x80uLL);
                unint64_t v1179 = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __s);
                newpool[0] = v1176;
                newpool[1] = (apr_pool_t *)__str;
                newpool[2] = v1178;
                newpool[3] = (apr_pool_t *)__s;
                newpool[4] = (apr_pool_t *)(v1179 >> 3);
                DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure_instance( (uint64_t)newpool,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
                v1180 = *(unsigned int **)(a1 + 8);
                uint64_t v1181 = *v1180;
                if ((*((_BYTE *)v1180 + 33) & 0x10) != 0)
                {
                  v1183 = *(unsigned int **)(a1 + 8);
                  unint64_t v1182 = *v1180;
                  do
                  {
                    v1183 = (unsigned int *)((char *)v1183 + v1181);
                    uint64_t v1181 = *v1183;
                    v1182 += v1181;
                  }

                  while ((*((_BYTE *)v1183 + 33) & 0x20) == 0);
                }

                else
                {
                  unint64_t v1182 = *v1180;
                }

                fbstream_write(*(void *)(a1 + 24), (uint64_t)v1180, v1182);
              }
            }
          }
        }
      }

      ++v1170;
    }

    while (v1170 < a3[8].nelts);
  }

  uint64_t v1184 = *(void *)a1;
  uint64_t v1185 = *(void *)(a1 + 8);
  *(void *)(v1185 + 16) = 0LL;
  *(void *)(v1185 + 24) = 0LL;
  *(void *)(v1185 + 8) = 0LL;
  *(_DWORD *)(v1185 + 32) = 70;
  *(_DWORD *)(v1185 + 36) = 67;
  *(void *)uint64_t v1185 = 0xFFFFD00800000028LL;
  *(void *)(v1185 + 40) = v1184;
  *(_DWORD *)uint64_t v1185 = 48;
  v1186 = *(unsigned int **)(a1 + 8);
  uint64_t v1187 = *v1186;
  if ((*((_BYTE *)v1186 + 33) & 0x10) != 0)
  {
    v1189 = *(unsigned int **)(a1 + 8);
    unint64_t v1188 = *v1186;
    do
    {
      v1189 = (unsigned int *)((char *)v1189 + v1187);
      uint64_t v1187 = *v1189;
      v1188 += v1187;
    }

    while ((*((_BYTE *)v1189 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1188 = *v1186;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1186, v1188);
  v1190 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "mps-filters";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1190, *(unsigned int *)(a1 + 16), v1191, 0LL);
  v1192 = *(unsigned int **)(a1 + 8);
  uint64_t v1193 = *v1192;
  if ((*((_BYTE *)v1192 + 33) & 0x10) != 0)
  {
    v1195 = *(unsigned int **)(a1 + 8);
    unint64_t v1194 = *v1192;
    do
    {
      v1195 = (unsigned int *)((char *)v1195 + v1193);
      uint64_t v1193 = *v1195;
      v1194 += v1193;
    }

    while ((*((_BYTE *)v1195 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1194 = *v1192;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1192, v1194);
  if (a3[26].nelts >= 1)
  {
    uint64_t v1196 = 0LL;
    do
    {
      uint64_t v1197 = *(void *)&a3[26].elts[8 * v1196];
      if (v1197) {
        uint64_t v1198 = *(void *)(v1197 + 8);
      }
      else {
        uint64_t v1198 = 0LL;
      }
      *(void *)__str = v1198;
      unint64_t v1199 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v1200 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "mps-filter";
      *(_OWORD *)&__str[16] = v1199;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1200, *(unsigned int *)(a1 + 16), v1201, 0LL);
      v1202 = *(unsigned int **)(a1 + 8);
      uint64_t v1203 = *v1202;
      if ((*((_BYTE *)v1202 + 33) & 0x10) != 0)
      {
        v1205 = *(unsigned int **)(a1 + 8);
        unint64_t v1204 = *v1202;
        do
        {
          v1205 = (unsigned int *)((char *)v1205 + v1203);
          uint64_t v1203 = *v1205;
          v1204 += v1203;
        }

        while ((*((_BYTE *)v1205 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1204 = *v1202;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1202, v1204);
      uint64_t v1206 = *(void *)(v1197 + 40);
      if (v1206 <= 4294961173LL)
      {
        switch(v1206)
        {
          case 4294961153LL:
            uint64_t v1209 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            __int128 v1580 = *(_OWORD *)(v1197 + 56);
            uint64_t v1210 = v1209 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512LL;
            uint64_t v1211 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1211, v1580, v1210 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode( v1211,  *((unsigned int **)&v1580 + 1),  v1210 - *(void *)__s,  __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_convolutionData( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            goto LABEL_1004;
          case 4294961155LL:
            __int128 v1223 = *(_OWORD *)(v1197 + 56);
            __int128 v1224 = *(_OWORD *)(v1197 + 72);
            uint64_t v1225 = *(void *)a1;
            uint64_t v1216 = *(void *)(a1 + 8);
            *(void *)(v1216 + 8) = 0LL;
            *(void *)(v1216 + 16) = 0LL;
            *(void *)(v1216 + 24) = 0LL;
            *(void *)uint64_t v1216 = 0xFFFFE80300000024LL;
LABEL_997:
            *(_DWORD *)(v1216 + 32) = 1;
            *(void *)(v1216 + 36) = *(void *)"Culululul";
            *(_DWORD *)(v1216 + 44) = 108;
            *(void *)(v1216 + 48) = v1225;
            *(_OWORD *)(v1216 + 56) = v1223;
            *(_OWORD *)(v1216 + 72) = v1224;
            *(_DWORD *)(v1216 + 88) = 116;
            *(void *)(v1216 + 92) = v1199;
            int v1222 = 100;
LABEL_998:
            *(_DWORD *)uint64_t v1216 = v1222;
            goto LABEL_1004;
          case 4294961162LL:
            uint64_t v1226 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            *(_DWORD *)&__str[16] = *(unsigned __int8 *)(v1197 + 96);
            *(_OWORD *)&__str[24] = *(_OWORD *)(v1197 + 56);
            *(_OWORD *)&__str[40] = *(_OWORD *)(v1197 + 80);
            DYTraceEncode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta( (uint64_t)__str,  v1226,  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            goto LABEL_1004;
          case 4294961163LL:
            uint64_t v1227 = *(void *)(v1197 + 56);
            uint64_t v1228 = *(void *)(v1197 + 64);
            int v1229 = *(_DWORD *)(v1197 + 72);
            uint64_t v1230 = *(void *)a1;
            uint64_t v1231 = *(void *)(a1 + 8);
            *(void *)(v1231 + 8) = 0LL;
            *(void *)(v1231 + 16) = 0LL;
            *(void *)(v1231 + 24) = 0LL;
            *(void *)uint64_t v1231 = 0xFFFFE80B00000024LL;
            *(_DWORD *)(v1231 + 32) = 1;
            *(void *)(v1231 + 36) = 0x6666666943LL;
            *(void *)(v1231 + 44) = v1230;
            *(_DWORD *)(v1231 + 52) = v1227;
            *(void *)(v1231 + 56) = v1228;
            *(_DWORD *)(v1231 + 64) = v1229;
            *(_DWORD *)(v1231 + 68) = 116;
            *(void *)(v1231 + 72) = v1199;
            *(_DWORD *)uint64_t v1231 = 80;
            goto LABEL_1004;
          case 4294961165LL:
            uint64_t v1232 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            __int128 v1582 = *(_OWORD *)(v1197 + 56);
            *(_DWORD *)&__str[32] = *(unsigned __int8 *)(v1197 + 72);
            uint64_t v1233 = v1232 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512LL;
            uint64_t v1234 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1234, v1582, v1233 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode( v1234,  *((unsigned int **)&v1582 + 1),  v1233 - *(void *)__s,  __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            goto LABEL_1004;
          case 4294961167LL:
            uint64_t v1235 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            uint64_t v1236 = *(void *)(v1197 + 64);
            *(_DWORD *)&__str[16] = *(void *)(v1197 + 56);
            *(void *)&__str[24] = *(void *)(v1197 + 72);
            *(void *)&__str[32] = v1236;
            GTTrace_storePointer( a1,  -6129,  (uint64_t)__str,  (char *)(v1235 + *(unsigned int *)(a1 + 16) - 512),  512LL,  v1583);
            DYTraceEncode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            goto LABEL_1004;
          default:
            break;
        }
      }

      else
      {
        switch(v1206)
        {
          case 4294961174LL:
            uint64_t v1207 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            int v1208 = *(unsigned __int8 *)(v1197 + 97);
            *(_DWORD *)&__str[16] = *(unsigned __int8 *)(v1197 + 96);
            *(_DWORD *)&__str[20] = v1208;
            *(_OWORD *)&__str[24] = *(_OWORD *)(v1197 + 56);
            *(void *)&__str[40] = *(void *)(v1197 + 72);
            *(_OWORD *)&__str[48] = *(_OWORD *)(v1197 + 80);
            DYTraceEncode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta( (uint64_t)__str,  v1207,  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            break;
          case 4294961175LL:
          case 4294961176LL:
          case 4294961178LL:
          case 4294961179LL:
          case 4294961181LL:
          case 4294961182LL:
          case 4294961183LL:
          case 4294961184LL:
            goto LABEL_1009;
          case 4294961177LL:
            uint64_t v1215 = *(void *)a1;
            uint64_t v1216 = *(void *)(a1 + 8);
            *(void *)(v1216 + 8) = 0LL;
            *(void *)(v1216 + 16) = 0LL;
            *(void *)(v1216 + 24) = 0LL;
            *(_DWORD *)(v1216 + 32) = 1;
            *(_DWORD *)(v1216 + 36) = 67;
            *(void *)uint64_t v1216 = 0xFFFFE81900000028LL;
            goto LABEL_994;
          case 4294961180LL:
            uint64_t v1217 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            __int128 v1218 = *(_OWORD *)(v1197 + 72);
            *(_OWORD *)&__str[16] = *(_OWORD *)(v1197 + 56);
            *(_OWORD *)&__str[32] = v1218;
            *(_OWORD *)&__str[48] = *(_OWORD *)(v1197 + 88);
            DYTraceEncode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY( __str,  v1217,  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            break;
          case 4294961185LL:
            uint64_t v1219 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1199;
            __int128 v1581 = *(_OWORD *)(v1197 + 56);
            uint64_t v1220 = v1219 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512LL;
            uint64_t v1221 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1221, v1581, v1220 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode( v1221,  *((unsigned int **)&v1581 + 1),  v1220 - *(void *)__s,  __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            break;
          case 4294961186LL:
            uint64_t v1215 = *(void *)a1;
            uint64_t v1216 = *(void *)(a1 + 8);
            *(void *)(v1216 + 8) = 0LL;
            *(void *)(v1216 + 16) = 0LL;
            *(void *)(v1216 + 24) = 0LL;
            *(_DWORD *)(v1216 + 32) = 1;
            *(_DWORD *)(v1216 + 36) = 67;
            *(void *)uint64_t v1216 = 0xFFFFE82200000028LL;
LABEL_994:
            *(void *)(v1216 + 40) = v1215;
            *(_DWORD *)(v1216 + 48) = 116;
            *(void *)(v1216 + 52) = v1199;
            int v1222 = 60;
            goto LABEL_998;
          case 4294961187LL:
            __int128 v1223 = *(_OWORD *)(v1197 + 56);
            __int128 v1224 = *(_OWORD *)(v1197 + 72);
            uint64_t v1225 = *(void *)a1;
            uint64_t v1216 = *(void *)(a1 + 8);
            *(void *)(v1216 + 8) = 0LL;
            *(void *)(v1216 + 16) = 0LL;
            *(void *)(v1216 + 24) = 0LL;
            *(void *)uint64_t v1216 = 0xFFFFE82300000024LL;
            goto LABEL_997;
          default:
            if (v1206 == 4294961200LL)
            {
              uint64_t v1237 = *(void *)(a1 + 8);
              *(void *)__str = *(void *)a1;
              *(void *)&__str[8] = v1199;
              v1238 = *(unsigned __int8 **)(v1197 + 56);
              uint64_t v1239 = v1237 + *(unsigned int *)(a1 + 16) - 512;
              *(void *)__s = 512LL;
              *(void *)&__str[16] = StoreMPSPluginNDArrayConvolutionDescriptorUsingEncode( *(void *)(a1 + 32),  v1238,  v1239,  __s);
              DYTraceEncode_MPSPlugin_newNDArrayConvolution2DGradientWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            }

            else
            {
              if (v1206 != 4294961201LL) {
                goto LABEL_1009;
              }
              uint64_t v1212 = *(void *)(a1 + 8);
              *(void *)__str = *(void *)a1;
              *(void *)&__str[8] = v1199;
              v1213 = *(unsigned __int8 **)(v1197 + 56);
              uint64_t v1214 = v1212 + *(unsigned int *)(a1 + 16) - 512;
              *(void *)__s = 512LL;
              *(void *)&__str[16] = StoreMPSPluginNDArrayConvolutionDescriptorUsingEncode( *(void *)(a1 + 32),  v1213,  v1214,  __s);
              DYTraceEncode_MPSPlugin_newNDArrayConvolution2DWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
            }

            break;
        }

LABEL_1004:
        v1240 = *(unsigned int **)(a1 + 8);
        uint64_t v1241 = *v1240;
        if ((*((_BYTE *)v1240 + 33) & 0x10) != 0)
        {
          v1243 = *(unsigned int **)(a1 + 8);
          unint64_t v1242 = *v1240;
          do
          {
            v1243 = (unsigned int *)((char *)v1243 + v1241);
            uint64_t v1241 = *v1243;
            v1242 += v1241;
          }

          while ((*((_BYTE *)v1243 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1242 = *v1240;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1240, v1242);
      }

LABEL_1009:
      uint64_t v1244 = *(void *)a1;
      uint64_t v1245 = *(void *)(a1 + 8);
      *(void *)(v1245 + 16) = 0LL;
      *(void *)(v1245 + 24) = 0LL;
      *(void *)(v1245 + 8) = 0LL;
      *(_DWORD *)(v1245 + 32) = 70;
      *(_DWORD *)(v1245 + 36) = 67;
      *(void *)uint64_t v1245 = 0xFFFFD00800000028LL;
      *(void *)(v1245 + 40) = v1244;
      *(_DWORD *)uint64_t v1245 = 48;
      v1246 = *(unsigned int **)(a1 + 8);
      uint64_t v1247 = *v1246;
      if ((*((_BYTE *)v1246 + 33) & 0x10) != 0)
      {
        v1249 = *(unsigned int **)(a1 + 8);
        unint64_t v1248 = *v1246;
        do
        {
          v1249 = (unsigned int *)((char *)v1249 + v1247);
          uint64_t v1247 = *v1249;
          v1248 += v1247;
        }

        while ((*((_BYTE *)v1249 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1248 = *v1246;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1246, v1248);
      ++v1196;
    }

    while (v1196 < a3[26].nelts);
  }

  uint64_t v1250 = *(void *)a1;
  uint64_t v1251 = *(void *)(a1 + 8);
  *(void *)(v1251 + 16) = 0LL;
  *(void *)(v1251 + 24) = 0LL;
  *(void *)(v1251 + 8) = 0LL;
  *(_DWORD *)(v1251 + 32) = 70;
  *(_DWORD *)(v1251 + 36) = 67;
  *(void *)uint64_t v1251 = 0xFFFFD00800000028LL;
  *(void *)(v1251 + 40) = v1250;
  *(_DWORD *)uint64_t v1251 = 48;
  v1252 = *(unsigned int **)(a1 + 8);
  uint64_t v1253 = *v1252;
  if ((*((_BYTE *)v1252 + 33) & 0x10) != 0)
  {
    v1256 = *(unsigned int **)(a1 + 8);
    unint64_t v1254 = *v1252;
    uint64_t v1255 = v1583;
    do
    {
      v1256 = (unsigned int *)((char *)v1256 + v1253);
      uint64_t v1253 = *v1256;
      v1254 += v1253;
    }

    while ((*((_BYTE *)v1256 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1254 = *v1252;
    uint64_t v1255 = v1583;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1252, v1254);
  v1257 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "metalfx-spatial-scalers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1257, *(unsigned int *)(a1 + 16), v1258, 0LL);
  v1259 = *(unsigned int **)(a1 + 8);
  uint64_t v1260 = *v1259;
  if ((*((_BYTE *)v1259 + 33) & 0x10) != 0)
  {
    v1262 = *(unsigned int **)(a1 + 8);
    unint64_t v1261 = *v1259;
    do
    {
      v1262 = (unsigned int *)((char *)v1262 + v1260);
      uint64_t v1260 = *v1262;
      v1261 += v1260;
    }

    while ((*((_BYTE *)v1262 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1261 = *v1259;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1259, v1261);
  if (a3[32].nelts >= 1)
  {
    uint64_t v1263 = 0LL;
    do
    {
      v1264 = *(void **)&a3[32].elts[8 * v1263];
      if (v1264) {
        uint64_t v1265 = v1264[1];
      }
      else {
        uint64_t v1265 = 0LL;
      }
      *(void *)__str = v1265;
      uint64_t v1266 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0LL) + 32LL) + 8LL);
      uint64_t v1267 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v1266;
      uint64_t v1268 = v1264[6];
      uint64_t v1269 = v1267 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLFXSpatialScalerDescriptorUsingEncode(*(void *)(a1 + 32), v1268, v1269, __s);
      DYTraceEncode_MTLDevice_newSpatialScalerWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v1270 = *(unsigned int **)(a1 + 8);
      uint64_t v1271 = *v1270;
      if ((*((_BYTE *)v1270 + 33) & 0x10) != 0)
      {
        v1273 = *(unsigned int **)(a1 + 8);
        unint64_t v1272 = *v1270;
        do
        {
          v1273 = (unsigned int *)((char *)v1273 + v1271);
          uint64_t v1271 = *v1273;
          v1272 += v1271;
        }

        while ((*((_BYTE *)v1273 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1272 = *v1270;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1270, v1272);
      uint64_t v1274 = v1264[10];
      v1275 = *(void **)(a1 + 8);
      v1275[2] = 0LL;
      v1275[3] = 0LL;
      v1275[1] = 0LL;
      v1275[4] = 0x6C754300000000LL;
      void *v1275 = 0xFFFFB00300000028LL;
      v1275[5] = v1266;
      v1275[6] = v1274;
      *(_DWORD *)v1275 = 56;
      v1276 = *(unsigned int **)(a1 + 8);
      uint64_t v1277 = *v1276;
      if ((*((_BYTE *)v1276 + 33) & 0x10) != 0)
      {
        v1279 = *(unsigned int **)(a1 + 8);
        unint64_t v1278 = *v1276;
        do
        {
          v1279 = (unsigned int *)((char *)v1279 + v1277);
          uint64_t v1277 = *v1279;
          v1278 += v1277;
        }

        while ((*((_BYTE *)v1279 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1278 = *v1276;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1276, v1278);
      uint64_t v1280 = v1264[11];
      v1281 = *(void **)(a1 + 8);
      v1281[2] = 0LL;
      v1281[3] = 0LL;
      v1281[1] = 0LL;
      v1281[4] = 0x6C754300000000LL;
      void *v1281 = 0xFFFFB00200000028LL;
      v1281[5] = v1266;
      v1281[6] = v1280;
      *(_DWORD *)v1281 = 56;
      v1282 = *(unsigned int **)(a1 + 8);
      uint64_t v1283 = *v1282;
      if ((*((_BYTE *)v1282 + 33) & 0x10) != 0)
      {
        v1285 = *(unsigned int **)(a1 + 8);
        unint64_t v1284 = *v1282;
        do
        {
          v1285 = (unsigned int *)((char *)v1285 + v1283);
          uint64_t v1283 = *v1285;
          v1284 += v1283;
        }

        while ((*((_BYTE *)v1285 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1284 = *v1282;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1282, v1284);
      if (v1264[7])
      {
        *(void *)__str = v1264[7];
        uint64_t v1286 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1287 = *(void **)(a1 + 8);
        v1287[1] = 0LL;
        v1287[2] = 0LL;
        v1287[3] = 0LL;
        v1287[4] = 0x744300000000LL;
        void *v1287 = 0xFFFFB00100000028LL;
        v1287[5] = v1266;
        v1287[6] = v1286;
        *(_DWORD *)v1287 = 56;
        v1288 = *(unsigned int **)(a1 + 8);
        uint64_t v1289 = *v1288;
        if ((*((_BYTE *)v1288 + 33) & 0x10) != 0)
        {
          v1291 = *(unsigned int **)(a1 + 8);
          unint64_t v1290 = *v1288;
          do
          {
            v1291 = (unsigned int *)((char *)v1291 + v1289);
            uint64_t v1289 = *v1291;
            v1290 += v1289;
          }

          while ((*((_BYTE *)v1291 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1290 = *v1288;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1288, v1290);
      }

      if (v1264[8])
      {
        *(void *)__str = v1264[8];
        uint64_t v1292 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1293 = *(void **)(a1 + 8);
        v1293[1] = 0LL;
        v1293[2] = 0LL;
        v1293[3] = 0LL;
        v1293[4] = 0x744300000000LL;
        void *v1293 = 0xFFFFB00000000028LL;
        v1293[5] = v1266;
        v1293[6] = v1292;
        *(_DWORD *)v1293 = 56;
        v1294 = *(unsigned int **)(a1 + 8);
        uint64_t v1295 = *v1294;
        if ((*((_BYTE *)v1294 + 33) & 0x10) != 0)
        {
          v1297 = *(unsigned int **)(a1 + 8);
          unint64_t v1296 = *v1294;
          do
          {
            v1297 = (unsigned int *)((char *)v1297 + v1295);
            uint64_t v1295 = *v1297;
            v1296 += v1295;
          }

          while ((*((_BYTE *)v1297 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1296 = *v1294;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1294, v1296);
      }

      if (v1264[9])
      {
        *(void *)__str = v1264[9];
        uint64_t v1298 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1299 = *(void **)(a1 + 8);
        v1299[1] = 0LL;
        v1299[2] = 0LL;
        v1299[3] = 0LL;
        v1299[4] = 0x744300000000LL;
        void *v1299 = 0xFFFFB00400000028LL;
        v1299[5] = v1266;
        v1299[6] = v1298;
        *(_DWORD *)v1299 = 56;
        v1300 = *(unsigned int **)(a1 + 8);
        uint64_t v1301 = *v1300;
        if ((*((_BYTE *)v1300 + 33) & 0x10) != 0)
        {
          v1303 = *(unsigned int **)(a1 + 8);
          unint64_t v1302 = *v1300;
          do
          {
            v1303 = (unsigned int *)((char *)v1303 + v1301);
            uint64_t v1301 = *v1303;
            v1302 += v1301;
          }

          while ((*((_BYTE *)v1303 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1302 = *v1300;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1300, v1302);
      }

      ++v1263;
    }

    while (v1263 < a3[32].nelts);
  }

  uint64_t v1304 = *(void *)a1;
  uint64_t v1305 = *(void *)(a1 + 8);
  *(void *)(v1305 + 16) = 0LL;
  *(void *)(v1305 + 24) = 0LL;
  *(void *)(v1305 + 8) = 0LL;
  *(_DWORD *)(v1305 + 32) = 70;
  *(_DWORD *)(v1305 + 36) = 67;
  *(void *)uint64_t v1305 = 0xFFFFD00800000028LL;
  *(void *)(v1305 + 40) = v1304;
  *(_DWORD *)uint64_t v1305 = 48;
  v1306 = *(unsigned int **)(a1 + 8);
  uint64_t v1307 = *v1306;
  if ((*((_BYTE *)v1306 + 33) & 0x10) != 0)
  {
    v1309 = *(unsigned int **)(a1 + 8);
    unint64_t v1308 = *v1306;
    do
    {
      v1309 = (unsigned int *)((char *)v1309 + v1307);
      uint64_t v1307 = *v1309;
      v1308 += v1307;
    }

    while ((*((_BYTE *)v1309 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1308 = *v1306;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1306, v1308);
  v1310 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "metalfx-temporal-scalers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1310, *(unsigned int *)(a1 + 16), v1311, 0LL);
  v1312 = *(unsigned int **)(a1 + 8);
  uint64_t v1313 = *v1312;
  if ((*((_BYTE *)v1312 + 33) & 0x10) != 0)
  {
    v1315 = *(unsigned int **)(a1 + 8);
    unint64_t v1314 = *v1312;
    do
    {
      v1315 = (unsigned int *)((char *)v1315 + v1313);
      uint64_t v1313 = *v1315;
      v1314 += v1313;
    }

    while ((*((_BYTE *)v1315 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1314 = *v1312;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1312, v1314);
  if (a3[33].nelts >= 1)
  {
    uint64_t v1316 = 0LL;
    do
    {
      uint64_t v1317 = *(void *)&a3[33].elts[8 * v1316];
      if (v1317) {
        uint64_t v1318 = *(void *)(v1317 + 8);
      }
      else {
        uint64_t v1318 = 0LL;
      }
      *(void *)__str = v1318;
      uint64_t v1319 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
      uint64_t v1320 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v1319;
      v1321 = *(unsigned __int16 **)(v1317 + 48);
      uint64_t v1322 = v1320 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512LL;
      *(void *)&__str[16] = StoreMTLFXTemporalScalerDescriptorUsingEncode(*(void *)(a1 + 32), v1321, v1322, __s);
      DYTraceEncode_MTLDevice_newTemporalScalerWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      v1323 = *(unsigned int **)(a1 + 8);
      uint64_t v1324 = *v1323;
      if ((*((_BYTE *)v1323 + 33) & 0x10) != 0)
      {
        v1326 = *(unsigned int **)(a1 + 8);
        unint64_t v1325 = *v1323;
        do
        {
          v1326 = (unsigned int *)((char *)v1326 + v1324);
          uint64_t v1324 = *v1326;
          v1325 += v1324;
        }

        while ((*((_BYTE *)v1326 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1325 = *v1323;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1323, v1325);
      uint64_t v1327 = *(void *)(v1317 + 112);
      v1328 = *(void **)(a1 + 8);
      v1328[2] = 0LL;
      v1328[3] = 0LL;
      v1328[1] = 0LL;
      v1328[4] = 0x6C754300000000LL;
      void *v1328 = 0xFFFFB00D00000028LL;
      v1328[5] = v1319;
      v1328[6] = v1327;
      *(_DWORD *)v1328 = 56;
      v1329 = *(unsigned int **)(a1 + 8);
      uint64_t v1330 = *v1329;
      if ((*((_BYTE *)v1329 + 33) & 0x10) != 0)
      {
        v1332 = *(unsigned int **)(a1 + 8);
        unint64_t v1331 = *v1329;
        do
        {
          v1332 = (unsigned int *)((char *)v1332 + v1330);
          uint64_t v1330 = *v1332;
          v1331 += v1330;
        }

        while ((*((_BYTE *)v1332 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1331 = *v1329;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1329, v1331);
      uint64_t v1333 = *(void *)(v1317 + 120);
      v1334 = *(void **)(a1 + 8);
      v1334[2] = 0LL;
      v1334[3] = 0LL;
      v1334[1] = 0LL;
      v1334[4] = 0x6C754300000000LL;
      void *v1334 = 0xFFFFB00C00000028LL;
      v1334[5] = v1319;
      v1334[6] = v1333;
      *(_DWORD *)v1334 = 56;
      v1335 = *(unsigned int **)(a1 + 8);
      uint64_t v1336 = *v1335;
      if ((*((_BYTE *)v1335 + 33) & 0x10) != 0)
      {
        v1338 = *(unsigned int **)(a1 + 8);
        unint64_t v1337 = *v1335;
        do
        {
          v1338 = (unsigned int *)((char *)v1338 + v1336);
          uint64_t v1336 = *v1338;
          v1337 += v1336;
        }

        while ((*((_BYTE *)v1338 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1337 = *v1335;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1335, v1337);
      int v1339 = *(_DWORD *)(v1317 + 144);
      uint64_t v1340 = *(void *)(a1 + 8);
      *(void *)(v1340 + 8) = 0LL;
      *(void *)(v1340 + 16) = 0LL;
      *(void *)(v1340 + 24) = 0LL;
      *(void *)(v1340 + 32) = 0x664300000000LL;
      *(void *)uint64_t v1340 = 0xFFFFB01400000028LL;
      *(void *)(v1340 + 40) = v1319;
      *(_DWORD *)(v1340 + 48) = v1339;
      *(_DWORD *)uint64_t v1340 = 52;
      v1341 = *(unsigned int **)(a1 + 8);
      uint64_t v1342 = *v1341;
      if ((*((_BYTE *)v1341 + 33) & 0x10) != 0)
      {
        v1344 = *(unsigned int **)(a1 + 8);
        unint64_t v1343 = *v1341;
        do
        {
          v1344 = (unsigned int *)((char *)v1344 + v1342);
          uint64_t v1342 = *v1344;
          v1343 += v1342;
        }

        while ((*((_BYTE *)v1344 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1343 = *v1341;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1341, v1343);
      int v1345 = *(_DWORD *)(v1317 + 128);
      uint64_t v1346 = *(void *)(a1 + 8);
      *(void *)(v1346 + 8) = 0LL;
      *(void *)(v1346 + 16) = 0LL;
      *(void *)(v1346 + 24) = 0LL;
      *(void *)(v1346 + 32) = 0x664300000000LL;
      *(void *)uint64_t v1346 = 0xFFFFB00E00000028LL;
      *(void *)(v1346 + 40) = v1319;
      *(_DWORD *)(v1346 + 48) = v1345;
      *(_DWORD *)uint64_t v1346 = 52;
      v1347 = *(unsigned int **)(a1 + 8);
      uint64_t v1348 = *v1347;
      if ((*((_BYTE *)v1347 + 33) & 0x10) != 0)
      {
        v1350 = *(unsigned int **)(a1 + 8);
        unint64_t v1349 = *v1347;
        do
        {
          v1350 = (unsigned int *)((char *)v1350 + v1348);
          uint64_t v1348 = *v1350;
          v1349 += v1348;
        }

        while ((*((_BYTE *)v1350 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1349 = *v1347;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1347, v1349);
      int v1351 = *(_DWORD *)(v1317 + 132);
      uint64_t v1352 = *(void *)(a1 + 8);
      *(void *)(v1352 + 8) = 0LL;
      *(void *)(v1352 + 16) = 0LL;
      *(void *)(v1352 + 24) = 0LL;
      *(void *)(v1352 + 32) = 0x664300000000LL;
      *(void *)uint64_t v1352 = 0xFFFFB00F00000028LL;
      *(void *)(v1352 + 40) = v1319;
      *(_DWORD *)(v1352 + 48) = v1351;
      *(_DWORD *)uint64_t v1352 = 52;
      v1353 = *(unsigned int **)(a1 + 8);
      uint64_t v1354 = *v1353;
      if ((*((_BYTE *)v1353 + 33) & 0x10) != 0)
      {
        v1356 = *(unsigned int **)(a1 + 8);
        unint64_t v1355 = *v1353;
        do
        {
          v1356 = (unsigned int *)((char *)v1356 + v1354);
          uint64_t v1354 = *v1356;
          v1355 += v1354;
        }

        while ((*((_BYTE *)v1356 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1355 = *v1353;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1353, v1355);
      int v1357 = *(_DWORD *)(v1317 + 136);
      uint64_t v1358 = *(void *)(a1 + 8);
      *(void *)(v1358 + 8) = 0LL;
      *(void *)(v1358 + 16) = 0LL;
      *(void *)(v1358 + 24) = 0LL;
      *(void *)(v1358 + 32) = 0x664300000000LL;
      *(void *)uint64_t v1358 = 0xFFFFB01100000028LL;
      *(void *)(v1358 + 40) = v1319;
      *(_DWORD *)(v1358 + 48) = v1357;
      *(_DWORD *)uint64_t v1358 = 52;
      v1359 = *(unsigned int **)(a1 + 8);
      uint64_t v1360 = *v1359;
      if ((*((_BYTE *)v1359 + 33) & 0x10) != 0)
      {
        v1362 = *(unsigned int **)(a1 + 8);
        unint64_t v1361 = *v1359;
        do
        {
          v1362 = (unsigned int *)((char *)v1362 + v1360);
          uint64_t v1360 = *v1362;
          v1361 += v1360;
        }

        while ((*((_BYTE *)v1362 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1361 = *v1359;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1359, v1361);
      int v1363 = *(_DWORD *)(v1317 + 140);
      uint64_t v1364 = *(void *)(a1 + 8);
      *(void *)(v1364 + 8) = 0LL;
      *(void *)(v1364 + 16) = 0LL;
      *(void *)(v1364 + 24) = 0LL;
      *(void *)(v1364 + 32) = 0x664300000000LL;
      *(void *)uint64_t v1364 = 0xFFFFB01200000028LL;
      *(void *)(v1364 + 40) = v1319;
      *(_DWORD *)(v1364 + 48) = v1363;
      *(_DWORD *)uint64_t v1364 = 52;
      v1365 = *(unsigned int **)(a1 + 8);
      uint64_t v1366 = *v1365;
      if ((*((_BYTE *)v1365 + 33) & 0x10) != 0)
      {
        v1368 = *(unsigned int **)(a1 + 8);
        unint64_t v1367 = *v1365;
        do
        {
          v1368 = (unsigned int *)((char *)v1368 + v1366);
          uint64_t v1366 = *v1368;
          v1367 += v1366;
        }

        while ((*((_BYTE *)v1368 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1367 = *v1365;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1365, v1367);
      int v1369 = *(unsigned __int8 *)(v1317 + 148);
      uint64_t v1370 = *(void *)(a1 + 8);
      *(void *)(v1370 + 16) = 0LL;
      *(void *)(v1370 + 24) = 0LL;
      *(void *)(v1370 + 8) = 0LL;
      *(void *)(v1370 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v1370 = 0xFFFFB00800000028LL;
      *(void *)(v1370 + 40) = v1319;
      *(_DWORD *)(v1370 + 48) = v1369;
      *(_DWORD *)uint64_t v1370 = 52;
      v1371 = *(unsigned int **)(a1 + 8);
      uint64_t v1372 = *v1371;
      if ((*((_BYTE *)v1371 + 33) & 0x10) != 0)
      {
        v1374 = *(unsigned int **)(a1 + 8);
        unint64_t v1373 = *v1371;
        do
        {
          v1374 = (unsigned int *)((char *)v1374 + v1372);
          uint64_t v1372 = *v1374;
          v1373 += v1372;
        }

        while ((*((_BYTE *)v1374 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1373 = *v1371;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1371, v1373);
      int v1375 = *(unsigned __int8 *)(v1317 + 149);
      uint64_t v1376 = *(void *)(a1 + 8);
      *(void *)(v1376 + 16) = 0LL;
      *(void *)(v1376 + 24) = 0LL;
      *(void *)(v1376 + 8) = 0LL;
      *(void *)(v1376 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v1376 = 0xFFFFB01500000028LL;
      *(void *)(v1376 + 40) = v1319;
      *(_DWORD *)(v1376 + 48) = v1375;
      *(_DWORD *)uint64_t v1376 = 52;
      v1377 = *(unsigned int **)(a1 + 8);
      uint64_t v1378 = *v1377;
      if ((*((_BYTE *)v1377 + 33) & 0x10) != 0)
      {
        v1380 = *(unsigned int **)(a1 + 8);
        unint64_t v1379 = *v1377;
        do
        {
          v1380 = (unsigned int *)((char *)v1380 + v1378);
          uint64_t v1378 = *v1380;
          v1379 += v1378;
        }

        while ((*((_BYTE *)v1380 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1379 = *v1377;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1377, v1379);
      if (*(void *)(v1317 + 56))
      {
        *(void *)__str = *(void *)(v1317 + 56);
        uint64_t v1381 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1382 = *(void **)(a1 + 8);
        v1382[1] = 0LL;
        v1382[2] = 0LL;
        v1382[3] = 0LL;
        v1382[4] = 0x744300000000LL;
        void *v1382 = 0xFFFFB00B00000028LL;
        v1382[5] = v1319;
        v1382[6] = v1381;
        *(_DWORD *)v1382 = 56;
        v1383 = *(unsigned int **)(a1 + 8);
        uint64_t v1384 = *v1383;
        if ((*((_BYTE *)v1383 + 33) & 0x10) != 0)
        {
          v1386 = *(unsigned int **)(a1 + 8);
          unint64_t v1385 = *v1383;
          do
          {
            v1386 = (unsigned int *)((char *)v1386 + v1384);
            uint64_t v1384 = *v1386;
            v1385 += v1384;
          }

          while ((*((_BYTE *)v1386 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1385 = *v1383;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1383, v1385);
      }

      if (*(void *)(v1317 + 64))
      {
        *(void *)__str = *(void *)(v1317 + 64);
        uint64_t v1387 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1388 = *(void **)(a1 + 8);
        v1388[1] = 0LL;
        v1388[2] = 0LL;
        v1388[3] = 0LL;
        v1388[4] = 0x744300000000LL;
        void *v1388 = 0xFFFFB00700000028LL;
        v1388[5] = v1319;
        v1388[6] = v1387;
        *(_DWORD *)v1388 = 56;
        v1389 = *(unsigned int **)(a1 + 8);
        uint64_t v1390 = *v1389;
        if ((*((_BYTE *)v1389 + 33) & 0x10) != 0)
        {
          v1392 = *(unsigned int **)(a1 + 8);
          unint64_t v1391 = *v1389;
          do
          {
            v1392 = (unsigned int *)((char *)v1392 + v1390);
            uint64_t v1390 = *v1392;
            v1391 += v1390;
          }

          while ((*((_BYTE *)v1392 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1391 = *v1389;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1389, v1391);
      }

      if (*(void *)(v1317 + 72))
      {
        *(void *)__str = *(void *)(v1317 + 72);
        uint64_t v1393 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1394 = *(void **)(a1 + 8);
        v1394[1] = 0LL;
        v1394[2] = 0LL;
        v1394[3] = 0LL;
        v1394[4] = 0x744300000000LL;
        void *v1394 = 0xFFFFB00900000028LL;
        v1394[5] = v1319;
        v1394[6] = v1393;
        *(_DWORD *)v1394 = 56;
        v1395 = *(unsigned int **)(a1 + 8);
        uint64_t v1396 = *v1395;
        if ((*((_BYTE *)v1395 + 33) & 0x10) != 0)
        {
          v1398 = *(unsigned int **)(a1 + 8);
          unint64_t v1397 = *v1395;
          do
          {
            v1398 = (unsigned int *)((char *)v1398 + v1396);
            uint64_t v1396 = *v1398;
            v1397 += v1396;
          }

          while ((*((_BYTE *)v1398 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1397 = *v1395;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1395, v1397);
      }

      if (*(void *)(v1317 + 80))
      {
        *(void *)__str = *(void *)(v1317 + 80);
        uint64_t v1399 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1400 = *(void **)(a1 + 8);
        v1400[1] = 0LL;
        v1400[2] = 0LL;
        v1400[3] = 0LL;
        v1400[4] = 0x744300000000LL;
        void *v1400 = 0xFFFFB01000000028LL;
        v1400[5] = v1319;
        v1400[6] = v1399;
        *(_DWORD *)v1400 = 56;
        v1401 = *(unsigned int **)(a1 + 8);
        uint64_t v1402 = *v1401;
        if ((*((_BYTE *)v1401 + 33) & 0x10) != 0)
        {
          v1404 = *(unsigned int **)(a1 + 8);
          unint64_t v1403 = *v1401;
          do
          {
            v1404 = (unsigned int *)((char *)v1404 + v1402);
            uint64_t v1402 = *v1404;
            v1403 += v1402;
          }

          while ((*((_BYTE *)v1404 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1403 = *v1401;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1401, v1403);
      }

      if (*(void *)(v1317 + 88))
      {
        *(void *)__str = *(void *)(v1317 + 88);
        uint64_t v1405 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1406 = *(void **)(a1 + 8);
        v1406[1] = 0LL;
        v1406[2] = 0LL;
        v1406[3] = 0LL;
        v1406[4] = 0x744300000000LL;
        void *v1406 = 0xFFFFB00A00000028LL;
        v1406[5] = v1319;
        v1406[6] = v1405;
        *(_DWORD *)v1406 = 56;
        v1407 = *(unsigned int **)(a1 + 8);
        uint64_t v1408 = *v1407;
        if ((*((_BYTE *)v1407 + 33) & 0x10) != 0)
        {
          v1410 = *(unsigned int **)(a1 + 8);
          unint64_t v1409 = *v1407;
          do
          {
            v1410 = (unsigned int *)((char *)v1410 + v1408);
            uint64_t v1408 = *v1410;
            v1409 += v1408;
          }

          while ((*((_BYTE *)v1410 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1409 = *v1407;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1407, v1409);
      }

      if (*(void *)(v1317 + 104))
      {
        *(void *)__str = *(void *)(v1317 + 104);
        uint64_t v1411 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1412 = *(void **)(a1 + 8);
        v1412[1] = 0LL;
        v1412[2] = 0LL;
        v1412[3] = 0LL;
        v1412[4] = 0x744300000000LL;
        void *v1412 = 0xFFFFB01800000028LL;
        v1412[5] = v1319;
        v1412[6] = v1411;
        *(_DWORD *)v1412 = 56;
        v1413 = *(unsigned int **)(a1 + 8);
        uint64_t v1414 = *v1413;
        if ((*((_BYTE *)v1413 + 33) & 0x10) != 0)
        {
          v1416 = *(unsigned int **)(a1 + 8);
          unint64_t v1415 = *v1413;
          do
          {
            v1416 = (unsigned int *)((char *)v1416 + v1414);
            uint64_t v1414 = *v1416;
            v1415 += v1414;
          }

          while ((*((_BYTE *)v1416 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1415 = *v1413;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1413, v1415);
      }

      uint64_t v1417 = *(void *)(v1317 + 96);
      uint64_t v1255 = v1583;
      if (v1417)
      {
        *(void *)__str = v1417;
        uint64_t v1418 = *(void *)(*(void *)(*find_entry(v1583, __str, 8uLL, 0LL) + 32LL) + 8LL);
        v1419 = *(void **)(a1 + 8);
        v1419[1] = 0LL;
        v1419[2] = 0LL;
        v1419[3] = 0LL;
        v1419[4] = 0x744300000000LL;
        void *v1419 = 0xFFFFB01300000028LL;
        v1419[5] = v1319;
        v1419[6] = v1418;
        *(_DWORD *)v1419 = 56;
        v1420 = *(unsigned int **)(a1 + 8);
        uint64_t v1421 = *v1420;
        if ((*((_BYTE *)v1420 + 33) & 0x10) != 0)
        {
          v1423 = *(unsigned int **)(a1 + 8);
          unint64_t v1422 = *v1420;
          do
          {
            v1423 = (unsigned int *)((char *)v1423 + v1421);
            uint64_t v1421 = *v1423;
            v1422 += v1421;
          }

          while ((*((_BYTE *)v1423 + 33) & 0x20) == 0);
        }

        else
        {
          unint64_t v1422 = *v1420;
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1420, v1422);
      }

      ++v1316;
    }

    while (v1316 < a3[33].nelts);
  }

  uint64_t v1424 = *(void *)a1;
  uint64_t v1425 = *(void *)(a1 + 8);
  *(void *)(v1425 + 16) = 0LL;
  *(void *)(v1425 + 24) = 0LL;
  *(void *)(v1425 + 8) = 0LL;
  *(_DWORD *)(v1425 + 32) = 70;
  *(_DWORD *)(v1425 + 36) = 67;
  *(void *)uint64_t v1425 = 0xFFFFD00800000028LL;
  *(void *)(v1425 + 40) = v1424;
  *(_DWORD *)uint64_t v1425 = 48;
  v1426 = *(unsigned int **)(a1 + 8);
  uint64_t v1427 = *v1426;
  if ((*((_BYTE *)v1426 + 33) & 0x10) != 0)
  {
    v1429 = *(unsigned int **)(a1 + 8);
    unint64_t v1428 = *v1426;
    do
    {
      v1429 = (unsigned int *)((char *)v1429 + v1427);
      uint64_t v1427 = *v1429;
      v1428 += v1427;
    }

    while ((*((_BYTE *)v1429 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1428 = *v1426;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1426, v1428);
  v1430 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "residency-sets";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1430, *(unsigned int *)(a1 + 16), v1431, 0LL);
  v1432 = *(unsigned int **)(a1 + 8);
  uint64_t v1433 = *v1432;
  if ((*((_BYTE *)v1432 + 33) & 0x10) != 0)
  {
    v1435 = *(unsigned int **)(a1 + 8);
    unint64_t v1434 = *v1432;
    do
    {
      v1435 = (unsigned int *)((char *)v1435 + v1433);
      uint64_t v1433 = *v1435;
      v1434 += v1433;
    }

    while ((*((_BYTE *)v1435 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1434 = *v1432;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1432, v1434);
  if (a3[34].nelts >= 1)
  {
    uint64_t v1436 = 0LL;
    do
    {
      uint64_t v1437 = *(void *)&a3[34].elts[8 * v1436];
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "residency-set";
      if (v1437) {
        uint64_t v1438 = *(void *)(v1437 + 8);
      }
      else {
        uint64_t v1438 = 0LL;
      }
      *(void *)__s = v1438;
      *(_OWORD *)&__str[16] = *(unint64_t *)(*(void *)(*find_entry(v1255, __s, 8uLL, 0LL) + 32LL) + 8LL);
      DYTraceEncode_EnterStateGroup((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), v1439, 0LL);
      v1440 = *(unsigned int **)(a1 + 8);
      uint64_t v1441 = *v1440;
      if ((*((_BYTE *)v1440 + 33) & 0x10) != 0)
      {
        v1443 = *(unsigned int **)(a1 + 8);
        unint64_t v1442 = *v1440;
        do
        {
          v1443 = (unsigned int *)((char *)v1443 + v1441);
          uint64_t v1441 = *v1443;
          v1442 += v1441;
        }

        while ((*((_BYTE *)v1443 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1442 = *v1440;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1440, v1442);
      WriteGTMTLSMResidencySet(a1, (void *)a2, v1437, 0);
      uint64_t v1444 = *(void *)a1;
      uint64_t v1445 = *(void *)(a1 + 8);
      *(void *)(v1445 + 16) = 0LL;
      *(void *)(v1445 + 24) = 0LL;
      *(void *)(v1445 + 8) = 0LL;
      *(_DWORD *)(v1445 + 32) = 70;
      *(_DWORD *)(v1445 + 36) = 67;
      *(void *)uint64_t v1445 = 0xFFFFD00800000028LL;
      *(void *)(v1445 + 40) = v1444;
      *(_DWORD *)uint64_t v1445 = 48;
      v1446 = *(unsigned int **)(a1 + 8);
      uint64_t v1447 = *v1446;
      if ((*((_BYTE *)v1446 + 33) & 0x10) != 0)
      {
        v1449 = *(unsigned int **)(a1 + 8);
        unint64_t v1448 = *v1446;
        do
        {
          v1449 = (unsigned int *)((char *)v1449 + v1447);
          uint64_t v1447 = *v1449;
          v1448 += v1447;
        }

        while ((*((_BYTE *)v1449 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1448 = *v1446;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1446, v1448);
      ++v1436;
    }

    while (v1436 < a3[34].nelts);
  }

  uint64_t v1450 = *(void *)a1;
  uint64_t v1451 = *(void *)(a1 + 8);
  *(void *)(v1451 + 16) = 0LL;
  *(void *)(v1451 + 24) = 0LL;
  *(void *)(v1451 + 8) = 0LL;
  *(_DWORD *)(v1451 + 32) = 70;
  *(_DWORD *)(v1451 + 36) = 67;
  *(void *)uint64_t v1451 = 0xFFFFD00800000028LL;
  *(void *)(v1451 + 40) = v1450;
  *(_DWORD *)uint64_t v1451 = 48;
  v1452 = *(unsigned int **)(a1 + 8);
  uint64_t v1453 = *v1452;
  if ((*((_BYTE *)v1452 + 33) & 0x10) != 0)
  {
    v1455 = *(unsigned int **)(a1 + 8);
    unint64_t v1454 = *v1452;
    do
    {
      v1455 = (unsigned int *)((char *)v1455 + v1453);
      uint64_t v1453 = *v1455;
      v1454 += v1453;
    }

    while ((*((_BYTE *)v1455 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1454 = *v1452;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1452, v1454);
  v1456 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "command-queue";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1456, *(unsigned int *)(a1 + 16), v1457, 0LL);
  v1458 = *(unsigned int **)(a1 + 8);
  uint64_t v1459 = *v1458;
  if ((*((_BYTE *)v1458 + 33) & 0x10) != 0)
  {
    v1461 = *(unsigned int **)(a1 + 8);
    unint64_t v1460 = *v1458;
    do
    {
      v1461 = (unsigned int *)((char *)v1461 + v1459);
      uint64_t v1459 = *v1461;
      v1460 += v1459;
    }

    while ((*((_BYTE *)v1461 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1460 = *v1458;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1458, v1460);
  if (a3[22].nelts >= 1)
  {
    uint64_t v1462 = 0LL;
    do
    {
      uint64_t v1463 = *(void *)&a3[22].elts[8 * v1462];
      uint64_t v1464 = *(void *)(a2 + 16);
      BOOL v1465 = IsAppleInternalLabel(*(void *)(v1463 + 48));
      *(void *)__str = *(void *)(v1463 + 8);
      unint64_t v1466 = *(void *)(*(void *)(*find_entry(v1464, __str, 8uLL, 0LL) + 32LL) + 8LL);
      v1467 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "command-queue";
      *(_OWORD *)&__str[16] = v1466;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1467, *(unsigned int *)(a1 + 16), v1468, 0LL);
      v1469 = *(unsigned int **)(a1 + 8);
      uint64_t v1470 = *v1469;
      if ((*((_BYTE *)v1469 + 33) & 0x10) != 0)
      {
        v1472 = *(unsigned int **)(a1 + 8);
        unint64_t v1471 = *v1469;
        do
        {
          v1472 = (unsigned int *)((char *)v1472 + v1470);
          uint64_t v1470 = *v1472;
          v1471 += v1470;
        }

        while ((*((_BYTE *)v1472 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1471 = *v1469;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1469, v1471);
      v1473 = *(unsigned __int8 **)(v1463 + 56);
      if (v1473)
      {
        uint64_t v1474 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v1466;
        uint64_t v1475 = v1474 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLCommandQueueDescriptorUsingEncode(*(void *)(a1 + 32), v1473, v1475, __s);
        DYTraceEncode_MTLDevice_newCommandQueueWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      }

      else
      {
        uint64_t v1476 = *(unsigned int *)(v1463 + 64);
        uint64_t v1477 = *(void *)a1;
        uint64_t v1478 = *(void *)(a1 + 8);
        *(void *)(v1478 + 8) = 0LL;
        *(void *)(v1478 + 16) = 0LL;
        *(void *)(v1478 + 24) = 0LL;
        *(void *)(v1478 + 32) = 0x6C754300000001LL;
        *(void *)uint64_t v1478 = 0xFFFFC04500000028LL;
        *(void *)(v1478 + 40) = v1477;
        *(void *)(v1478 + 48) = v1476;
        *(_DWORD *)(v1478 + 56) = 116;
        *(void *)(v1478 + 60) = v1466;
        *(_DWORD *)uint64_t v1478 = 68;
      }

      if (v1465) {
        int v1479 = 524292;
      }
      else {
        int v1479 = 4;
      }
      v1480 = *(unsigned int **)(a1 + 8);
      unsigned int v1481 = v1480[8];
      v1480[8] = v1481 | v1479;
      unint64_t v1482 = *v1480;
      if ((v1481 & 0x1000) != 0)
      {
        uint64_t v1483 = *v1480;
        v1484 = v1480;
        do
        {
          v1484 = (unsigned int *)((char *)v1484 + v1483);
          uint64_t v1483 = *v1484;
          v1482 += v1483;
        }

        while ((*((_BYTE *)v1484 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1480, v1482);
      if (*(void *)(v1463 + 48)) {
        v1485 = *(const char **)(v1463 + 48);
      }
      else {
        v1485 = "";
      }
      v1486 = *(unsigned int **)(a1 + 8);
      *((void *)v1486 + 1) = 0LL;
      *((void *)v1486 + 2) = 0LL;
      *((void *)v1486 + 3) = 0LL;
      *((void *)v1486 + 4) = 0x534300000000LL;
      *(void *)v1486 = 0xFFFFC02300000028LL;
      *((void *)v1486 + 5) = v1466;
      unsigned int *v1486 = 48;
      AppendString(v1485, (int *)v1486);
      uint64_t v1487 = *v1486;
      uint64_t v1488 = ((_DWORD)v1487 + 3) & 0xFFFFFFFC;
      bzero((char *)v1486 + v1487, v1488 - v1487);
      unsigned int *v1486 = v1488;
      v1489 = *(unsigned int **)(a1 + 8);
      unsigned int v1490 = v1489[8];
      v1489[8] = v1490 | v1479;
      unint64_t v1491 = *v1489;
      if ((v1490 & 0x1000) != 0)
      {
        uint64_t v1492 = *v1489;
        v1493 = v1489;
        do
        {
          v1493 = (unsigned int *)((char *)v1493 + v1492);
          uint64_t v1492 = *v1493;
          v1491 += v1492;
        }

        while ((*((_BYTE *)v1493 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1489, v1491);
      int v1494 = *(unsigned __int8 *)(v1463 + 74);
      uint64_t v1495 = *(void *)(a1 + 8);
      *(void *)(v1495 + 16) = 0LL;
      *(void *)(v1495 + 24) = 0LL;
      *(void *)(v1495 + 8) = 0LL;
      *(void *)(v1495 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v1495 = 0xFFFFC02700000028LL;
      *(void *)(v1495 + 40) = v1466;
      *(_DWORD *)(v1495 + 48) = v1494;
      *(_DWORD *)uint64_t v1495 = 52;
      v1496 = *(unsigned int **)(a1 + 8);
      unsigned int v1497 = v1496[8];
      v1496[8] = v1497 | v1479;
      unint64_t v1498 = *v1496;
      if ((v1497 & 0x1000) != 0)
      {
        uint64_t v1499 = *v1496;
        v1500 = v1496;
        do
        {
          v1500 = (unsigned int *)((char *)v1500 + v1499);
          uint64_t v1499 = *v1500;
          v1498 += v1499;
        }

        while ((*((_BYTE *)v1500 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1496, v1498);
      int v1501 = *(_DWORD *)(v1463 + 68);
      uint64_t v1502 = *(void *)(a1 + 8);
      *(void *)(v1502 + 8) = 0LL;
      *(void *)(v1502 + 16) = 0LL;
      *(void *)(v1502 + 24) = 0LL;
      *(void *)(v1502 + 32) = 0x694300000000LL;
      *(void *)uint64_t v1502 = 0xFFFFC02400000028LL;
      *(void *)(v1502 + 40) = v1466;
      *(_DWORD *)(v1502 + 48) = v1501;
      *(_DWORD *)uint64_t v1502 = 52;
      v1503 = *(unsigned int **)(a1 + 8);
      unsigned int v1504 = v1503[8];
      v1503[8] = v1504 | v1479;
      unint64_t v1505 = *v1503;
      if ((v1504 & 0x1000) != 0)
      {
        uint64_t v1506 = *v1503;
        v1507 = v1503;
        do
        {
          v1507 = (unsigned int *)((char *)v1507 + v1506);
          uint64_t v1506 = *v1507;
          v1505 += v1506;
        }

        while ((*((_BYTE *)v1507 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1503, v1505);
      int v1508 = *(unsigned __int8 *)(v1463 + 75);
      uint64_t v1509 = *(void *)(a1 + 8);
      *(void *)(v1509 + 16) = 0LL;
      *(void *)(v1509 + 24) = 0LL;
      *(void *)(v1509 + 8) = 0LL;
      *(void *)(v1509 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v1509 = 0xFFFFC02500000028LL;
      *(void *)(v1509 + 40) = v1466;
      *(_DWORD *)(v1509 + 48) = v1508;
      *(_DWORD *)uint64_t v1509 = 52;
      v1510 = *(unsigned int **)(a1 + 8);
      unsigned int v1511 = v1510[8];
      v1510[8] = v1511 | v1479;
      unint64_t v1512 = *v1510;
      if ((v1511 & 0x1000) != 0)
      {
        uint64_t v1513 = *v1510;
        v1514 = v1510;
        do
        {
          v1514 = (unsigned int *)((char *)v1514 + v1513);
          uint64_t v1513 = *v1514;
          v1512 += v1513;
        }

        while ((*((_BYTE *)v1514 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1510, v1512);
      int v1515 = *(unsigned __int8 *)(v1463 + 76);
      uint64_t v1516 = *(void *)(a1 + 8);
      *(void *)(v1516 + 16) = 0LL;
      *(void *)(v1516 + 24) = 0LL;
      *(void *)(v1516 + 8) = 0LL;
      *(void *)(v1516 + 32) = 0x69754300000000LL;
      *(void *)uint64_t v1516 = 0xFFFFC02600000028LL;
      *(void *)(v1516 + 40) = v1466;
      *(_DWORD *)(v1516 + 48) = v1515;
      *(_DWORD *)uint64_t v1516 = 52;
      v1517 = *(unsigned int **)(a1 + 8);
      unsigned int v1518 = v1517[8];
      v1517[8] = v1518 | v1479;
      unint64_t v1519 = *v1517;
      if ((v1518 & 0x1000) != 0)
      {
        uint64_t v1520 = *v1517;
        v1521 = v1517;
        do
        {
          v1521 = (unsigned int *)((char *)v1521 + v1520);
          uint64_t v1520 = *v1521;
          v1519 += v1520;
        }

        while ((*((_BYTE *)v1521 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1517, v1519);
      WriteGTMTLSMCommandQueue_residencySets((uint64_t *)a1, (void *)a2, v1463);
      ++v1462;
    }

    while (v1462 < a3[22].nelts);
  }

  uint64_t v1522 = *(void *)a1;
  uint64_t v1523 = *(void *)(a1 + 8);
  *(void *)(v1523 + 16) = 0LL;
  *(void *)(v1523 + 24) = 0LL;
  *(void *)(v1523 + 8) = 0LL;
  *(_DWORD *)(v1523 + 32) = 70;
  *(_DWORD *)(v1523 + 36) = 67;
  *(void *)uint64_t v1523 = 0xFFFFD00800000028LL;
  *(void *)(v1523 + 40) = v1522;
  *(_DWORD *)uint64_t v1523 = 48;
  v1524 = *(unsigned int **)(a1 + 8);
  uint64_t v1525 = *v1524;
  if ((*((_BYTE *)v1524 + 33) & 0x10) != 0)
  {
    v1528 = *(unsigned int **)(a1 + 8);
    unint64_t v1526 = *v1524;
    uint64_t v1527 = v1583;
    do
    {
      v1528 = (unsigned int *)((char *)v1528 + v1525);
      uint64_t v1525 = *v1528;
      v1526 += v1525;
    }

    while ((*((_BYTE *)v1528 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1526 = *v1524;
    uint64_t v1527 = v1583;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1524, v1526);
  v1529 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "io-command-queue";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1529, *(unsigned int *)(a1 + 16), v1530, 0LL);
  v1531 = *(unsigned int **)(a1 + 8);
  uint64_t v1532 = *v1531;
  if ((*((_BYTE *)v1531 + 33) & 0x10) != 0)
  {
    v1534 = *(unsigned int **)(a1 + 8);
    unint64_t v1533 = *v1531;
    do
    {
      v1534 = (unsigned int *)((char *)v1534 + v1532);
      uint64_t v1532 = *v1534;
      v1533 += v1532;
    }

    while ((*((_BYTE *)v1534 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1533 = *v1531;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1531, v1533);
  if (a3[23].nelts >= 1)
  {
    uint64_t v1535 = 0LL;
    do
    {
      v1536 = *(void **)&a3[23].elts[8 * v1535];
      if (v1536) {
        uint64_t v1537 = v1536[1];
      }
      else {
        uint64_t v1537 = 0LL;
      }
      *(void *)__str = v1537;
      unint64_t v1538 = *(void *)(*(void *)(*find_entry(v1527, __str, 8uLL, 0LL) + 32LL) + 8LL);
      BOOL v1539 = IsAppleInternalLabel(v1536[6]);
      v1540 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "io-command-queue";
      *(_OWORD *)&__str[16] = v1538;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1540, *(unsigned int *)(a1 + 16), v1541, 0LL);
      v1542 = *(unsigned int **)(a1 + 8);
      uint64_t v1543 = *v1542;
      if ((*((_BYTE *)v1542 + 33) & 0x10) != 0)
      {
        v1545 = *(unsigned int **)(a1 + 8);
        unint64_t v1544 = *v1542;
        do
        {
          v1545 = (unsigned int *)((char *)v1545 + v1543);
          uint64_t v1543 = *v1545;
          v1544 += v1543;
        }

        while ((*((_BYTE *)v1545 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1544 = *v1542;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1542, v1544);
      v1546 = (unsigned int *)v1536[7];
      if (v1546)
      {
        if (v1539) {
          int v1547 = 524292;
        }
        else {
          int v1547 = 4;
        }
        uint64_t v1548 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v1538;
        *(void *)&__str[24] = 0LL;
        uint64_t v1549 = v1548 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512LL;
        *(void *)&__str[16] = StoreMTLIOCommandQueueDescriptorUsingEncode(*(void *)(a1 + 32), v1546, v1549, __s);
        DYTraceEncode_MTLDevice_newIOCommandQueueWithDescriptor_error( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        v1550 = *(unsigned int **)(a1 + 8);
        unsigned int v1551 = v1550[8];
        v1550[8] = v1551 | v1547;
        unint64_t v1552 = *v1550;
        if ((v1551 & 0x1000) != 0)
        {
          uint64_t v1553 = *v1550;
          v1554 = v1550;
          do
          {
            v1554 = (unsigned int *)((char *)v1554 + v1553);
            uint64_t v1553 = *v1554;
            v1552 += v1553;
          }

          while ((*((_BYTE *)v1554 + 33) & 0x20) == 0);
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1550, v1552);
      }

      uint64_t v1555 = *(void *)a1;
      uint64_t v1556 = *(void *)(a1 + 8);
      *(void *)(v1556 + 16) = 0LL;
      *(void *)(v1556 + 24) = 0LL;
      *(void *)(v1556 + 8) = 0LL;
      *(_DWORD *)(v1556 + 32) = 70;
      *(_DWORD *)(v1556 + 36) = 67;
      *(void *)uint64_t v1556 = 0xFFFFD00800000028LL;
      *(void *)(v1556 + 40) = v1555;
      *(_DWORD *)uint64_t v1556 = 48;
      v1557 = *(unsigned int **)(a1 + 8);
      uint64_t v1558 = *v1557;
      if ((*((_BYTE *)v1557 + 33) & 0x10) != 0)
      {
        v1560 = *(unsigned int **)(a1 + 8);
        unint64_t v1559 = *v1557;
        uint64_t v1527 = v1583;
        do
        {
          v1560 = (unsigned int *)((char *)v1560 + v1558);
          uint64_t v1558 = *v1560;
          v1559 += v1558;
        }

        while ((*((_BYTE *)v1560 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v1559 = *v1557;
        uint64_t v1527 = v1583;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1557, v1559);
      ++v1535;
    }

    while (v1535 < a3[23].nelts);
  }

  uint64_t v1561 = *(void *)a1;
  uint64_t v1562 = *(void *)(a1 + 8);
  *(void *)(v1562 + 16) = 0LL;
  *(void *)(v1562 + 24) = 0LL;
  *(void *)(v1562 + 8) = 0LL;
  *(_DWORD *)(v1562 + 32) = 70;
  *(_DWORD *)(v1562 + 36) = 67;
  *(void *)uint64_t v1562 = 0xFFFFD00800000028LL;
  *(void *)(v1562 + 40) = v1561;
  *(_DWORD *)uint64_t v1562 = 48;
  v1563 = *(unsigned int **)(a1 + 8);
  uint64_t v1564 = *v1563;
  if ((*((_BYTE *)v1563 + 33) & 0x10) != 0)
  {
    v1566 = *(unsigned int **)(a1 + 8);
    unint64_t v1565 = *v1563;
    do
    {
      v1566 = (unsigned int *)((char *)v1566 + v1564);
      uint64_t v1564 = *v1566;
      v1565 += v1564;
    }

    while ((*((_BYTE *)v1566 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v1565 = *v1563;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1563, v1565);
}

uint64_t WriteMakeAliasable(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4 = *(_DWORD *)(a3 + 12);
  if (v4)
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *(unint64_t ***)(a3 + 24);
      if (**v9 >= a4) {
        break;
      }
      uint64_t v10 = v4 - 1LL;
      uint64_t v11 = v9[(int)v10];
      v9[(int)v10] = *v9;
      if (v4 < 4)
      {
        LODWORD(v16) = 0;
      }

      else
      {
        int v12 = 0;
        int v13 = v4 - 2;
        unint64_t v14 = *v11;
        int v15 = 1;
        while (1)
        {
          uint64_t v16 = v15 + 1LL;
          uint64_t v17 = *(void *)(a3 + 24);
          if ((int)v16 >= v13)
          {
            LODWORD(v16) = v15;
          }

          else if (**(void **)(v17 + 8 * v16) >= **(void **)(v17 + 8LL * v15))
          {
            LODWORD(v16) = v15;
          }

          uint64_t v18 = *(unint64_t **)(v17 + 8LL * (int)v16);
          if (v14 <= *v18) {
            break;
          }
          *(void *)(v17 + 8LL * v12) = v18;
          int v15 = 2 * v16;
          int v12 = v16;
        }

        LODWORD(v16) = v12;
      }

void WriteGTMTLSMBuffer_restore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    v6[0] = 0LL;
    v6[1] = a3;
    GTResourceDownloaderGetResourceFilename(a2, 0, __str, 0x80uLL);
    v6[2] = __str;
    __int128 v7 = *(_OWORD *)(a2 + 48);
    DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents( (uint64_t)v6,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    unsigned int v5 = *(unsigned int **)(a1 + 8);
    v5[8] = 0;
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v5, *v5);
  }

void WriteGTMTLSMBuffer_properties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 8);
  WriteBufferInfo((uint64_t)a1, a2, a4, 0);
  if (*(void *)(a2 + 72)) {
    uint64_t v8 = *(const char **)(a2 + 72);
  }
  else {
    uint64_t v8 = "";
  }
  uint64_t v9 = (unsigned int *)a1[1];
  *((void *)v9 + 1) = 0LL;
  *((void *)v9 + 2) = 0LL;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0x534300000000LL;
  *(void *)uint64_t v9 = 0xFFFFC00C00000028LL;
  *((void *)v9 + 5) = v7;
  *uint64_t v9 = 48;
  AppendString(v8, (int *)v9);
  uint64_t v10 = *v9;
  uint64_t v11 = ((_DWORD)v10 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v10, v11 - v10);
  *uint64_t v9 = v11;
  int v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    int v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      int v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (*(void *)(a2 + 48))
  {
    if (a3)
    {
LABEL_10:
      char v16 = atomic_load((unint64_t *)(a3 + 56));
      int v17 = v16 & 3;
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a2 + 98);
    uint64_t v19 = (void *)a1[1];
    v19[2] = 0LL;
    v19[3] = 0LL;
    v19[1] = 0LL;
    v19[4] = 0x6C754300000000LL;
    *uint64_t v19 = 0xFFFFC01100000028LL;
    v19[5] = v7;
    v19[6] = v18;
    *(_DWORD *)uint64_t v19 = 56;
    uint64_t v20 = (unsigned int *)a1[1];
    uint64_t v21 = *v20;
    if ((*((_BYTE *)v20 + 33) & 0x10) != 0)
    {
      uint64_t v23 = (unsigned int *)a1[1];
      unint64_t v22 = *v20;
      do
      {
        uint64_t v23 = (unsigned int *)((char *)v23 + v21);
        uint64_t v21 = *v23;
        v22 += v21;
      }

      while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v22 = *v20;
    }

    fbstream_write(a1[3], (uint64_t)v20, v22);
    if (a3) {
      goto LABEL_10;
    }
  }

  int v17 = 0;
LABEL_17:
  uint64_t v24 = a1[1];
  *(void *)(v24 + 16) = 0LL;
  *(void *)(v24 + 24) = 0LL;
  *(void *)(v24 + 8) = 0LL;
  *(void *)(v24 + 32) = 0x69754300000006LL;
  *(void *)uint64_t v24 = 0xFFFFD80500000028LL;
  *(void *)(v24 + 40) = v7;
  *(_DWORD *)(v24 + 48) = v17;
  *(_DWORD *)uint64_t v24 = 52;
  uint64_t v25 = (unsigned int *)a1[1];
  uint64_t v26 = *v25;
  if ((*((_BYTE *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = (unsigned int *)a1[1];
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }

    while ((*((_BYTE *)v28 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v27 = *v25;
  }

  fbstream_write(a1[3], (uint64_t)v25, v27);
  if (a3
    && (unint64_t v29 = atomic_load((unint64_t *)(a3 + 56)),
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0LL,
        (v29 & 0xFFFFFFFFFFFFFFE0LL) != 0))
  {
    uint64_t v31 = a1[4];
    unint64_t v32 = *(void *)(v31 + 440);
    BOOL v33 = v32 >= v30;
    unint64_t v34 = v32 - v30;
    if (v34 != 0 && v33) {
      unint64_t v35 = v34 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v35 = 0LL;
    }
  }

  else
  {
    unint64_t v35 = -1LL;
  }

  unint64_t v36 = (void *)a1[1];
  v36[2] = 0LL;
  v36[3] = 0LL;
  v36[1] = 0LL;
  v36[4] = 0x77754300000046LL;
  void *v36 = 0xFFFFD81E00000028LL;
  v36[5] = v7;
  v36[6] = v35;
  *(_DWORD *)unint64_t v36 = 56;
  uint64_t v37 = (unsigned int *)a1[1];
  uint64_t v38 = *v37;
  if ((*((_BYTE *)v37 + 33) & 0x10) != 0)
  {
    uint64_t v40 = (unsigned int *)a1[1];
    unint64_t v39 = *v37;
    do
    {
      uint64_t v40 = (unsigned int *)((char *)v40 + v38);
      uint64_t v38 = *v40;
      v39 += v38;
    }

    while ((*((_BYTE *)v40 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v39 = *v37;
  }

  fbstream_write(a1[3], (uint64_t)v37, v39);
}

void WriteGTMTLSMBuffer_debugMarkers(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = a3[1];
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }

    uint64_t v9 = 1LL;
  }

  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0LL;
  }

void WriteGTMTLSMBuffer_resources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 520);
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v79 = v6;
  entry = find_entry(v5, &v79, 8uLL, 0LL);
  if (*entry) {
    uint64_t v10 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v75 = *(void *)a1;
  uint64_t v76 = "textures";
  uint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)&v75, v11, *(unsigned int *)(a1 + 16), v9, 0LL);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (v10)
  {
    int v16 = *(_DWORD *)(v10 + 12);
    if (v16 >= 1)
    {
      uint64_t v17 = 0LL;
      while (1)
      {
        uint64_t v18 = *(void *)(*(void *)(v10 + 24) + 8 * v17);
        if (*(_DWORD *)v18 == 80) {
          break;
        }
LABEL_32:
        if (++v17 >= v16) {
          goto LABEL_33;
        }
      }

      uint64_t v75 = *(void *)(v18 + 8);
      int v19 = find_entry(v7, &v75, 8uLL, 0LL);
      if (*v19) {
        uint64_t v21 = *(void *)(*v19 + 32LL);
      }
      else {
        uint64_t v21 = 0LL;
      }
      unint64_t v22 = *(unsigned int **)(a1 + 8);
      uint64_t v75 = *(void *)a1;
      uint64_t v76 = "texture";
      uint64_t v77 = *(void *)(v21 + 8);
      uint64_t v78 = 0LL;
      DYTraceEncode_EnterStateGroup((uint64_t)&v75, v22, *(unsigned int *)(a1 + 16), v20, 0LL);
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v24 = *(unsigned int **)(a1 + 8);
      unint64_t v25 = *v24;
      if ((*((_BYTE *)v24 + 33) & 0x10) != 0)
      {
        uint64_t v26 = *(unsigned int **)(a1 + 8);
        unint64_t v27 = *v24;
        do
        {
          uint64_t v26 = (unsigned int *)((char *)v26 + v25);
          unint64_t v25 = *v26;
          v27 += v25;
        }

        while ((*((_BYTE *)v26 + 33) & 0x20) == 0);
        fbstream_write(v23, (uint64_t)v24, v27);
        if (!v21) {
          goto LABEL_25;
        }
      }

      else
      {
        fbstream_write(v23, (uint64_t)v24, v25);
      }

      uint64_t v28 = *(void *)(v21 + 32);
      if (v28 && (*(_BYTE *)(v28 + 79) & 8) != 0)
      {
        uint64_t v29 = v28 + 64;
        goto LABEL_27;
      }

void WriteGTMTLSMTexture_properties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 8);
  WriteTextureInfo((uint64_t)a1, a2, a4, 0);
  if (*(void *)(a2 + 72)) {
    unsigned int v8 = *(const char **)(a2 + 72);
  }
  else {
    unsigned int v8 = "";
  }
  uint64_t v9 = (unsigned int *)a1[1];
  *((void *)v9 + 1) = 0LL;
  *((void *)v9 + 2) = 0LL;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0x534300000000LL;
  *(void *)uint64_t v9 = 0xFFFFC09000000028LL;
  *((void *)v9 + 5) = v7;
  *uint64_t v9 = 48;
  AppendString(v8, (int *)v9);
  uint64_t v10 = *v9;
  uint64_t v11 = ((_DWORD)v10 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v10, v11 - v10);
  *uint64_t v9 = v11;
  uint64_t v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (*(void *)(a2 + 48) || *(void *)(a2 + 136) || *(void *)(a2 + 144))
  {
    if (a3)
    {
LABEL_12:
      char v16 = atomic_load((unint64_t *)(a3 + 56));
      int v17 = v16 & 3;
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a2 + 98);
    int v19 = (void *)a1[1];
    v19[2] = 0LL;
    v19[3] = 0LL;
    v19[1] = 0LL;
    v19[4] = 0x6C754300000000LL;
    *int v19 = 0xFFFFC09800000028LL;
    v19[5] = v7;
    v19[6] = v18;
    *(_DWORD *)int v19 = 56;
    uint64_t v20 = (unsigned int *)a1[1];
    uint64_t v21 = *v20;
    if ((*((_BYTE *)v20 + 33) & 0x10) != 0)
    {
      uint64_t v23 = (unsigned int *)a1[1];
      unint64_t v22 = *v20;
      do
      {
        uint64_t v23 = (unsigned int *)((char *)v23 + v21);
        uint64_t v21 = *v23;
        v22 += v21;
      }

      while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v22 = *v20;
    }

    fbstream_write(a1[3], (uint64_t)v20, v22);
    if (a3) {
      goto LABEL_12;
    }
  }

  int v17 = 0;
LABEL_19:
  uint64_t v24 = a1[1];
  *(void *)(v24 + 16) = 0LL;
  *(void *)(v24 + 24) = 0LL;
  *(void *)(v24 + 8) = 0LL;
  *(void *)(v24 + 32) = 0x69754300000006LL;
  *(void *)uint64_t v24 = 0xFFFFD80600000028LL;
  *(void *)(v24 + 40) = v7;
  *(_DWORD *)(v24 + 48) = v17;
  *(_DWORD *)uint64_t v24 = 52;
  unint64_t v25 = (unsigned int *)a1[1];
  uint64_t v26 = *v25;
  if ((*((_BYTE *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = (unsigned int *)a1[1];
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }

    while ((*((_BYTE *)v28 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v27 = *v25;
  }

  fbstream_write(a1[3], (uint64_t)v25, v27);
  if (a3
    && (unint64_t v29 = atomic_load((unint64_t *)(a3 + 56)),
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0LL,
        (v29 & 0xFFFFFFFFFFFFFFE0LL) != 0))
  {
    uint64_t v31 = a1[4];
    unint64_t v32 = *(void *)(v31 + 440);
    BOOL v33 = v32 >= v30;
    unint64_t v34 = v32 - v30;
    if (v34 != 0 && v33) {
      unint64_t v35 = v34 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v35 = 0LL;
    }
  }

  else
  {
    unint64_t v35 = -1LL;
  }

  uint64_t v36 = (void *)a1[1];
  v36[2] = 0LL;
  v36[3] = 0LL;
  v36[1] = 0LL;
  v36[4] = 0x77754300000046LL;
  void *v36 = 0xFFFFD81C00000028LL;
  v36[5] = v7;
  v36[6] = v35;
  *(_DWORD *)uint64_t v36 = 56;
  uint64_t v37 = (unsigned int *)a1[1];
  uint64_t v38 = *v37;
  if ((*((_BYTE *)v37 + 33) & 0x10) != 0)
  {
    unint64_t v40 = (unsigned int *)a1[1];
    unint64_t v39 = *v37;
    do
    {
      unint64_t v40 = (unsigned int *)((char *)v40 + v38);
      uint64_t v38 = *v40;
      v39 += v38;
    }

    while ((*((_BYTE *)v40 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v39 = *v37;
  }

  fbstream_write(a1[3], (uint64_t)v37, v39);
}

void WriteGTMTLSMTexture_downloads(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a3)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(v8 + 8) = 0LL;
      *(void *)(v8 + 16) = 0LL;
      *(void *)(v8 + 24) = 0LL;
      *(void *)uint64_t v8 = 0xFFFFC25900000024LL;
      *(_DWORD *)(v8 + 32) = 0;
      strcpy((char *)(v8 + 36), "Ctul@6ululul");
      *(_WORD *)(v8 + 49) = 0;
      *(_BYTE *)(v8 + 51) = 0;
      *(void *)(v8 + 52) = a5;
      *(void *)(v8 + 60) = a5;
      *(void *)(v8 + 68) = 2LL;
      *(_OWORD *)(v8 + 76) = 0u;
      *(_OWORD *)(v8 + 92) = 0u;
      *(_OWORD *)(v8 + 108) = 0u;
      *(void *)(v8 + 132) = 0LL;
      *(void *)(v8 + 124) = 0LL;
      *(_DWORD *)uint64_t v8 = 140;
      uint64_t v9 = *(unsigned int **)(a1 + 8);
      v9[1] = -10213;
      unsigned int v10 = v9[8];
      v9[8] = v10 | 4;
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *v9;
      if ((v10 & 0x1000) != 0)
      {
        int v19 = v9;
        unint64_t v13 = *v9;
        do
        {
          int v19 = (unsigned int *)((char *)v19 + v12);
          uint64_t v12 = *v19;
          v13 += v12;
        }

        while ((*((_BYTE *)v19 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v13 = *v9;
      }

      fbstream_write(v11, (uint64_t)v9, v13);
      unsigned int v20 = *(unsigned __int16 *)(a3 + 44);
      if (*(_WORD *)(a3 + 44))
      {
        unint64_t v21 = 0LL;
        do
        {
          if ((*(_BYTE *)(a3 + 88 * v21 + 47) & 2) == 0)
          {
            unint64_t v22 = a3 + 88 * v21;
            uint64_t v23 = *(unsigned int *)(v22 + 52);
            uint64_t v24 = *(unsigned __int16 *)(v22 + 56);
            uint64_t v25 = *(unsigned __int16 *)(v22 + 58);
            uint64_t v26 = *(unsigned int *)(v22 + 60);
            uint64_t v27 = *(unsigned __int16 *)(v22 + 64);
            uint64_t v28 = *(unsigned __int16 *)(v22 + 66);
            uint64_t v29 = *(unsigned __int16 *)(v22 + 50);
            uint64_t v30 = *(unsigned __int16 *)(v22 + 48);
            uint64_t v31 = *(void *)(a1 + 8);
            *(void *)(v31 + 8) = 0LL;
            *(void *)(v31 + 16) = 0LL;
            *(void *)(v31 + 24) = 0LL;
            *(void *)uint64_t v31 = 0xFFFFC25900000024LL;
            *(_DWORD *)(v31 + 32) = 0;
            strcpy((char *)(v31 + 36), "Ctul@6ululul");
            *(_WORD *)(v31 + 49) = 0;
            *(_BYTE *)(v31 + 51) = 0;
            *(void *)(v31 + 52) = a5;
            *(void *)(v31 + 60) = a5;
            *(void *)(v31 + 68) = 0LL;
            *(void *)(v31 + 76) = v23;
            *(void *)(v31 + 84) = v24;
            *(void *)(v31 + 92) = v25;
            *(void *)(v31 + 100) = v26;
            *(void *)(v31 + 108) = v27;
            *(void *)(v31 + 116) = v28;
            *(void *)(v31 + 124) = v29;
            *(void *)(v31 + 132) = v30;
            *(_DWORD *)uint64_t v31 = 140;
            unint64_t v32 = *(unsigned int **)(a1 + 8);
            v32[1] = -10213;
            LODWORD(v30) = v32[8];
            v32[8] = v30 | 4;
            unint64_t v33 = *v32;
            if ((v30 & 0x1000) != 0)
            {
              uint64_t v34 = *v32;
              unint64_t v35 = v32;
              do
              {
                unint64_t v35 = (unsigned int *)((char *)v35 + v34);
                uint64_t v34 = *v35;
                v33 += v34;
              }

              while ((*((_BYTE *)v35 + 33) & 0x20) == 0);
            }

            fbstream_write(*(void *)(a1 + 24), (uint64_t)v32, v33);
            unsigned int v20 = *(unsigned __int16 *)(a3 + 44);
          }

          ++v21;
        }

        while (v21 < v20);
      }

      goto LABEL_22;
    }

    if (!*(void *)(a2 + 120) || *(_BYTE *)(a3 + 46) != 86)
    {
LABEL_22:
      WriteGTMTLSMTexture_restoreTextureData(a3, a1, a5);
      return;
    }

    v36[0] = a5;
    GTResourceDownloaderGetResourceFilename(a3, *(_DWORD *)(a3 + 56), __str, 0x80uLL);
    v36[1] = __str;
    __int128 v37 = *(_OWORD *)(a3 + 48);
    DYTraceEncode_MTLTexture_restoreIOSurfaceData_length_forPlane( (uint64_t)v36,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    unint64_t v14 = *(unsigned int **)(a1 + 8);
    unsigned int v15 = v14[8];
    v14[8] = v15 | 4;
    unint64_t v16 = *v14;
    if ((v15 & 0x1000) != 0)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = v14;
      do
      {
        uint64_t v18 = (unsigned int *)((char *)v18 + v17);
        uint64_t v17 = *v18;
        v16 += v17;
      }

      while ((*((_BYTE *)v18 + 33) & 0x20) == 0);
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v14, v16);
  }

void WriteGTMTLSMTexture_textureViews(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 520);
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v47 = v6;
  entry = find_entry(v5, &v47, 8uLL, 0LL);
  if (*entry) {
    uint64_t v10 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = (unsigned int *)a1[1];
  uint64_t v43 = *a1;
  uint64_t v44 = "texture-views";
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)&v43, v11, *((unsigned int *)a1 + 4), v9, 0LL);
  uint64_t v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    unsigned int v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      unsigned int v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (v10 && *(int *)(v10 + 12) >= 1)
  {
    for (uint64_t i = 0LL; i < *(int *)(v10 + 12); ++i)
    {
      uint64_t v17 = *(void *)(*(void *)(v10 + 24) + 8 * i);
      if (v17) {
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else {
        uint64_t v18 = 0LL;
      }
      uint64_t v43 = v18;
      int v19 = find_entry(v7, &v43, 8uLL, 0LL);
      if (*v19) {
        uint64_t v21 = *(void *)(*v19 + 32LL);
      }
      else {
        uint64_t v21 = 0LL;
      }
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = (unsigned int *)a1[1];
      uint64_t v43 = *a1;
      uint64_t v44 = "texture";
      uint64_t v45 = v22;
      uint64_t v46 = 0LL;
      DYTraceEncode_EnterStateGroup((uint64_t)&v43, v23, *((unsigned int *)a1 + 4), v20, 0LL);
      uint64_t v24 = a1[3];
      uint64_t v25 = (unsigned int *)a1[1];
      unint64_t v26 = *v25;
      if ((*((_BYTE *)v25 + 33) & 0x10) != 0)
      {
        uint64_t v27 = (unsigned int *)a1[1];
        unint64_t v28 = *v25;
        do
        {
          uint64_t v27 = (unsigned int *)((char *)v27 + v26);
          unint64_t v26 = *v27;
          v28 += v26;
        }

        while ((*((_BYTE *)v27 + 33) & 0x20) == 0);
        fbstream_write(v24, (uint64_t)v25, v28);
        if (!v21) {
          goto LABEL_27;
        }
      }

      else
      {
        fbstream_write(v24, (uint64_t)v25, v26);
      }

      uint64_t v29 = *(void *)(v21 + 32);
      if (v29 && (*(_BYTE *)(v29 + 79) & 8) != 0)
      {
        uint64_t v30 = v29 + 64;
        goto LABEL_29;
      }

void WriteGTMTLSMAccelerationStructure_properties( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8x8_t a5)
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 112);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
    uint64_t v56 = 512LL;
    uint64_t v11 = (const char *)StoreMTLAccelerationStructureDescriptorUsingEncode(*(void *)(a1 + 32), v9, v10, &v56, a4);
    uint64_t v12 = *(unsigned int **)(a1 + 8);
    *((void *)v12 + 1) = 0LL;
    *((void *)v12 + 2) = 0LL;
    *((void *)v12 + 3) = 0LL;
    *((void *)v12 + 4) = 0x554300000000LL;
    *(void *)uint64_t v12 = 0xFFFFC34000000028LL;
    *((void *)v12 + 5) = v8;
    *uint64_t v12 = 48;
    AppendString(v11, (int *)v12);
    uint64_t v13 = *v12;
    uint64_t v14 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
    bzero((char *)v12 + v13, v14 - v13);
    *uint64_t v12 = v14;
    unsigned int v15 = *(unsigned int **)(a1 + 8);
    unsigned int v16 = v15[8];
    v15[8] = v16 | 4;
    unint64_t v17 = *v15;
    if ((v16 & 0x1000) != 0)
    {
      uint64_t v18 = *v15;
      int v19 = v15;
      do
      {
        int v19 = (unsigned int *)((char *)v19 + v18);
        uint64_t v18 = *v19;
        v17 += v18;
      }

      while ((*((_BYTE *)v19 + 33) & 0x20) == 0);
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v15, v17);
  }

  a5.i32[0] = *(_DWORD *)(a2 + 104);
  uint64_t v20 = *(void *)(a1 + 8);
  *(void *)(v20 + 8) = 0LL;
  *(void *)(v20 + 16) = 0LL;
  *(void *)(v20 + 24) = 0LL;
  *(void *)uint64_t v20 = 0xFFFFD85100000024LL;
  *(_DWORD *)(v20 + 32) = 4;
  *(void *)(v20 + 36) = *(void *)"Cuiuiuiui";
  *(_DWORD *)(v20 + 44) = 105;
  *(void *)(v20 + 48) = v8;
  *(uint32x4_t *)(v20 + 56) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  *(_DWORD *)uint64_t v20 = 72;
  uint64_t v21 = *(unsigned int **)(a1 + 8);
  unsigned int v22 = v21[8];
  v21[8] = v22 | 4;
  uint64_t v23 = *v21;
  if ((v22 & 0x1000) != 0)
  {
    uint64_t v25 = v21;
    unint64_t v24 = *v21;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }

    while ((*((_BYTE *)v25 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v24 = *v21;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v21, v24);
  if (*(void *)(a2 + 72)) {
    unint64_t v26 = *(const char **)(a2 + 72);
  }
  else {
    unint64_t v26 = "";
  }
  uint64_t v27 = *(unsigned int **)(a1 + 8);
  *((void *)v27 + 1) = 0LL;
  *((void *)v27 + 2) = 0LL;
  *((void *)v27 + 3) = 0LL;
  *((void *)v27 + 4) = 0x534300000000LL;
  *(void *)uint64_t v27 = 0xFFFFC2D300000028LL;
  *((void *)v27 + 5) = v8;
  *uint64_t v27 = 48;
  AppendString(v26, (int *)v27);
  uint64_t v28 = *v27;
  uint64_t v29 = ((_DWORD)v28 + 3) & 0xFFFFFFFC;
  bzero((char *)v27 + v28, v29 - v28);
  *uint64_t v27 = v29;
  uint64_t v30 = *(unsigned int **)(a1 + 8);
  unsigned int v31 = v30[8];
  v30[8] = v31 | 4;
  unint64_t v32 = *v30;
  if ((v31 & 0x1000) != 0)
  {
    uint64_t v33 = *v30;
    uint64_t v34 = v30;
    do
    {
      uint64_t v34 = (unsigned int *)((char *)v34 + v33);
      uint64_t v33 = *v34;
      v32 += v33;
    }

    while ((*((_BYTE *)v34 + 33) & 0x20) == 0);
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v30, v32);
  if (a3)
  {
    char v35 = atomic_load((unint64_t *)(a3 + 56));
    int v36 = v35 & 3;
  }

  else
  {
    int v36 = 0;
  }

  uint64_t v37 = *(void *)(a1 + 8);
  *(void *)(v37 + 16) = 0LL;
  *(void *)(v37 + 24) = 0LL;
  *(void *)(v37 + 8) = 0LL;
  *(void *)(v37 + 32) = 0x69754300000006LL;
  *(void *)uint64_t v37 = 0xFFFFD82D00000028LL;
  *(void *)(v37 + 40) = v8;
  *(_DWORD *)(v37 + 48) = v36;
  *(_DWORD *)uint64_t v37 = 52;
  uint64_t v38 = *(unsigned int **)(a1 + 8);
  unsigned int v39 = v38[8];
  v38[8] = v39 | 4;
  unint64_t v40 = *v38;
  if ((v39 & 0x1000) != 0)
  {
    uint64_t v41 = *v38;
    uint64_t v42 = v38;
    do
    {
      uint64_t v42 = (unsigned int *)((char *)v42 + v41);
      uint64_t v41 = *v42;
      v40 += v41;
    }

    while ((*((_BYTE *)v42 + 33) & 0x20) == 0);
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v38, v40);
  if (a3
    && (uint64_t v43 = *(void *)(a1 + 32),
        unint64_t v44 = atomic_load((unint64_t *)(a3 + 56)),
        (unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFE0LL) != 0))
  {
    unint64_t v46 = *(void *)(v43 + 440);
    BOOL v47 = v46 >= v45;
    unint64_t v48 = v46 - v45;
    if (v48 != 0 && v47) {
      unint64_t v49 = v48 * *(unsigned int *)(v43 + 448) / *(unsigned int *)(v43 + 452);
    }
    else {
      unint64_t v49 = 0LL;
    }
  }

  else
  {
    unint64_t v49 = -1LL;
  }

  uint64_t v50 = *(void **)(a1 + 8);
  v50[2] = 0LL;
  v50[3] = 0LL;
  v50[1] = 0LL;
  v50[4] = 0x77754300000004LL;
  *uint64_t v50 = 0xFFFFD84300000028LL;
  v50[5] = v8;
  v50[6] = v49;
  *(_DWORD *)uint64_t v50 = 56;
  int32x2_t v51 = *(unsigned int **)(a1 + 8);
  unsigned int v52 = v51[8];
  v51[8] = v52 | 4;
  unint64_t v53 = *v51;
  if ((v52 & 0x1000) != 0)
  {
    uint64_t v54 = *v51;
    uint64_t v55 = v51;
    do
    {
      uint64_t v55 = (unsigned int *)((char *)v55 + v54);
      uint64_t v54 = *v55;
      v53 += v54;
    }

    while ((*((_BYTE *)v55 + 33) & 0x20) == 0);
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v51, v53);
}

void WriteGLPluginDataFunction( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, const void *a6, apr_pool_t **a7)
{
  if (a4)
  {
    if (a6)
    {
      uint64_t v8 = *(unsigned int *)(a3 + 876);
      if ((int)v8 >= 1)
      {
        for (uint64_t i = *(uint64_t **)(a3 + 888); ; ++i)
        {
          uint64_t v14 = *i;
          uint64_t v15 = *i ? *(void *)(v14 + 8) : 0LL;
          if (v15 == a4) {
            break;
          }
          if (!--v8) {
            return;
          }
        }

        if (*(_BYTE *)(v14 + 132))
        {
          uint64_t v16 = *(void *)(a2 + 16);
          unint64_t v17 = (unint64_t *)(*(void *)(a2 + 8) + 80LL);
          do
            unint64_t v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          int v19 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "library";
          __int128 v72 = v18;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v19, *((unsigned int *)a1 + 4), a4, 0LL);
          uint64_t v20 = (unsigned int *)a1[1];
          uint64_t v21 = *v20;
          if ((*((_BYTE *)v20 + 33) & 0x10) != 0)
          {
            uint64_t v23 = (unsigned int *)a1[1];
            unint64_t v22 = *v20;
            do
            {
              uint64_t v23 = (unsigned int *)((char *)v23 + v21);
              uint64_t v21 = *v23;
              v22 += v21;
            }

            while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v22 = *v20;
          }

          fbstream_write(a1[3], (uint64_t)v20, v22);
          uint64_t v24 = a1[4];
          HashBytes(a5, (unint64_t)a6, __s);
          GTMTLCaptureState_storePointer(v24, __s, a5, a6);
          v69[2] = v73;
          v69[3] = v74;
          char v70 = v75;
          v69[0] = *(_OWORD *)__s;
          v69[1] = v72;
          uint64_t v25 = (unsigned int *)a1[1];
          v67[0] = *a1;
          v67[1] = v18;
          v67[2] = v69;
          v67[3] = 0LL;
          DYTraceEncode_MTLDevice_newLibraryWithData_error((uint64_t)v67, v25, *((unsigned int *)a1 + 4), 0LL, 0LL);
          unint64_t v26 = (unsigned int *)a1[1];
          unsigned int v27 = v26[8];
          v26[8] = v27 | 0x80000;
          unint64_t v28 = *v26;
          if ((v27 & 0x1000) != 0)
          {
            uint64_t v29 = *v26;
            uint64_t v30 = v26;
            do
            {
              uint64_t v30 = (unsigned int *)((char *)v30 + v29);
              uint64_t v29 = *v30;
              v28 += v29;
            }

            while ((*((_BYTE *)v30 + 33) & 0x20) == 0);
          }

          fbstream_write(a1[3], (uint64_t)v26, v28);
          unsigned int v31 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "functions";
          __int128 v72 = 0uLL;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v31, *((unsigned int *)a1 + 4), v32, 0LL);
          uint64_t v33 = (unsigned int *)a1[1];
          uint64_t v34 = *v33;
          if ((*((_BYTE *)v33 + 33) & 0x10) != 0)
          {
            int v36 = (unsigned int *)a1[1];
            unint64_t v35 = *v33;
            do
            {
              int v36 = (unsigned int *)((char *)v36 + v34);
              uint64_t v34 = *v36;
              v35 += v34;
            }

            while ((*((_BYTE *)v36 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v35 = *v33;
          }

          fbstream_write(a1[3], (uint64_t)v33, v35);
          uint64_t v37 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "function";
          __int128 v72 = (unint64_t)a4;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v37, *((unsigned int *)a1 + 4), v38, 0LL);
          unsigned int v39 = (unsigned int *)a1[1];
          uint64_t v40 = *v39;
          if ((*((_BYTE *)v39 + 33) & 0x10) != 0)
          {
            uint64_t v42 = (unsigned int *)a1[1];
            unint64_t v41 = *v39;
            do
            {
              uint64_t v42 = (unsigned int *)((char *)v42 + v40);
              uint64_t v40 = *v42;
              v41 += v40;
            }

            while ((*((_BYTE *)v42 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v41 = *v39;
          }

          fbstream_write(a1[3], (uint64_t)v39, v41);
          *(void *)__s = v18;
          uint64_t v68 = a4;
          *(void *)&char __s[8] = *(void *)(*(void *)(*find_entry(v16, &v68, 8uLL, 0LL) + 32LL) + 8LL);
          *(void *)&__int128 v72 = "__main";
          DYTraceEncode_MTLLibrary_newFunctionWithName( (uint64_t)__s,  (unsigned int *)a1[1],  *((unsigned int *)a1 + 4),  0LL,  0LL);
          uint64_t v43 = (unsigned int *)a1[1];
          unsigned int v44 = v43[8];
          v43[8] = v44 | 0x80000;
          unint64_t v45 = *v43;
          if ((v44 & 0x1000) != 0)
          {
            uint64_t v46 = *v43;
            BOOL v47 = v43;
            do
            {
              BOOL v47 = (unsigned int *)((char *)v47 + v46);
              uint64_t v46 = *v47;
              v45 += v46;
            }

            while ((*((_BYTE *)v47 + 33) & 0x20) == 0);
          }

          fbstream_write(a1[3], (uint64_t)v43, v45);
          uint64_t v48 = *a1;
          uint64_t v49 = a1[1];
          *(void *)(v49 + 16) = 0LL;
          *(void *)(v49 + 24) = 0LL;
          *(void *)(v49 + 8) = 0LL;
          *(_DWORD *)(v49 + 32) = 70;
          *(_DWORD *)(v49 + 36) = 67;
          *(void *)uint64_t v49 = 0xFFFFD00800000028LL;
          *(void *)(v49 + 40) = v48;
          *(_DWORD *)uint64_t v49 = 48;
          uint64_t v50 = (unsigned int *)a1[1];
          uint64_t v51 = *v50;
          if ((*((_BYTE *)v50 + 33) & 0x10) != 0)
          {
            unint64_t v53 = (unsigned int *)a1[1];
            unint64_t v52 = *v50;
            do
            {
              unint64_t v53 = (unsigned int *)((char *)v53 + v51);
              uint64_t v51 = *v53;
              v52 += v51;
            }

            while ((*((_BYTE *)v53 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v52 = *v50;
          }

          fbstream_write(a1[3], (uint64_t)v50, v52);
          uint64_t v54 = *a1;
          uint64_t v55 = a1[1];
          *(void *)(v55 + 16) = 0LL;
          *(void *)(v55 + 24) = 0LL;
          *(void *)(v55 + 8) = 0LL;
          *(_DWORD *)(v55 + 32) = 70;
          *(_DWORD *)(v55 + 36) = 67;
          *(void *)uint64_t v55 = 0xFFFFD00800000028LL;
          *(void *)(v55 + 40) = v54;
          *(_DWORD *)uint64_t v55 = 48;
          uint64_t v56 = (unsigned int *)a1[1];
          uint64_t v57 = *v56;
          if ((*((_BYTE *)v56 + 33) & 0x10) != 0)
          {
            uint64_t v59 = (unsigned int *)a1[1];
            unint64_t v58 = *v56;
            do
            {
              uint64_t v59 = (unsigned int *)((char *)v59 + v57);
              uint64_t v57 = *v59;
              v58 += v57;
            }

            while ((*((_BYTE *)v59 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v58 = *v56;
          }

          fbstream_write(a1[3], (uint64_t)v56, v58);
          uint64_t v60 = *a1;
          uint64_t v61 = a1[1];
          *(void *)(v61 + 16) = 0LL;
          *(void *)(v61 + 24) = 0LL;
          *(void *)(v61 + 8) = 0LL;
          *(_DWORD *)(v61 + 32) = 70;
          *(_DWORD *)(v61 + 36) = 67;
          *(void *)uint64_t v61 = 0xFFFFD00800000028LL;
          *(void *)(v61 + 40) = v60;
          *(_DWORD *)uint64_t v61 = 48;
          uint8x8_t v62 = (unsigned int *)a1[1];
          uint64_t v63 = *v62;
          if ((*((_BYTE *)v62 + 33) & 0x10) != 0)
          {
            uint64_t v65 = (unsigned int *)a1[1];
            unint64_t v64 = *v62;
            do
            {
              uint64_t v65 = (unsigned int *)((char *)v65 + v63);
              uint64_t v63 = *v65;
              v64 += v63;
            }

            while ((*((_BYTE *)v65 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v64 = *v62;
          }

          fbstream_write(a1[3], (uint64_t)v62, v64);
          uint64_t v66 = apr_palloc(*a7, 8uLL);
          *uint64_t v66 = a4;
          apr_hash_set((apr_hash_t *)a7, v66, 8LL, (char *)&dword_0 + 1);
        }
      }
    }
  }

void WriteGTMTLSMFunction(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v38 = v8;
  uint64_t v9 = *(const char **)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v10 = *(unsigned int **)(a1 + 8);
  uint64_t v38 = *(void *)a1;
  unsigned int v39 = "function";
  uint64_t v40 = (uint64_t)v9;
  uint64_t v41 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)&v38, v10, *(unsigned int *)(a1 + 16), v11, 0LL);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (*(void *)(a2 + 72))
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
      unsigned int v39 = v9;
      uint64_t v16 = *(void *)(a2 + 48);
      uint64_t v40 = *(void *)(a2 + 56);
      unint64_t v17 = *(uint64_t **)(a2 + 72);
      uint64_t v44 = v16;
      uint64_t v42 = *(void *)(*(void *)(*find_entry(a4, &v44, 8uLL, 0LL) + 32LL) + 8LL);
      uint64_t v43 = 0LL;
      uint64_t v18 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
      uint64_t v44 = 512LL;
      uint64_t v41 = StoreMTLFunctionConstantValuesUsingEncode(*(void *)(a1 + 32), v17, v18, &v44);
      DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    }

    else
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
      unsigned int v39 = v9;
      int v19 = *(uint64_t **)(a2 + 72);
      uint64_t v40 = *(void *)(a2 + 56);
      uint64_t v42 = 0LL;
      uint64_t v20 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
      uint64_t v44 = 512LL;
      uint64_t v41 = StoreMTLFunctionConstantValuesUsingEncode(*(void *)(a1 + 32), v19, v20, &v44);
      DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_error( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    }
  }

  else if (*(_BYTE *)(a2 + 131))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
    unsigned int v39 = v9;
    uint64_t v40 = *(void *)(a2 + 56);
    DYTraceEncode_MTLLibrary_newExternFunctionWithName( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  else if (*(void *)(a2 + 120))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
    unsigned int v39 = v9;
    uint64_t v21 = *(void *)(a2 + 120);
    uint64_t v41 = 0LL;
    uint64_t v22 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
    uint64_t v44 = 512LL;
    uint64_t v40 = StoreMTLIntersectionFunctionDescriptorUsingEncode(*(void *)(a1 + 32), v21, v22, &v44);
    DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_error( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  else if (*(_BYTE *)(a2 + 132))
  {
    uint64_t v29 = *(void *)(a2 + 88);
    if (v29)
    {
      int v30 = *(_DWORD *)(a2 + 4);
      if ((v30 + 15428) < 2)
      {
        uint64_t v35 = *(void *)(a1 + 8);
        uint64_t v38 = *(void *)a1;
        unsigned int v39 = v9;
        uint64_t v36 = *(void *)(a2 + 96);
        uint64_t v40 = v29;
        uint64_t v41 = v36;
        uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
        GTTrace_storePointer(a1, -15427, (uint64_t)&v38, (char *)(v35 + *(unsigned int *)(a1 + 16) - 512), 512LL, a4);
        DYTraceEncode_MTLDevice_newFunctionWithGLESIR_inputsDescription_functionType( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      }

      else
      {
        uint64_t v31 = *(void *)(a1 + 8);
        uint64_t v38 = *(void *)a1;
        unsigned int v39 = v9;
        if ((v30 + 15430) > 1)
        {
          uint64_t v37 = *(void *)(a2 + 96);
          uint64_t v40 = v29;
          uint64_t v41 = v37;
          uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
          GTTrace_storePointer(a1, -15730, (uint64_t)&v38, (char *)(v31 + *(unsigned int *)(a1 + 16) - 512), 512LL, a4);
          DYTraceEncode_MTLDevice_newFunctionWithGLIR_inputsDescription_functionType( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        else
        {
          uint64_t v32 = *(void *)(a2 + 96);
          uint64_t v40 = v29;
          uint64_t v41 = v32;
          uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
          GTTrace_storePointer(a1, -15429, (uint64_t)&v38, (char *)(v31 + *(unsigned int *)(a1 + 16) - 512), 512LL, a4);
          DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }
      }
    }

    if (*(void *)(a2 + 104))
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
      unsigned int v39 = v9;
      uint64_t v40 = *(void *)(a2 + 104);
      LOBYTE(v41) = *(_BYTE *)(a2 + 130);
      *(_DWORD *)((char *)&v41 + 1) = 0;
      HIDWORD(v41) = 0;
      GTTrace_storePointer( a1,  -15830,  (uint64_t)&v38,  (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL),  512LL,  a4);
      DYTraceEncode_MTLFunction_newFunctionWithPluginData_bitcodeType( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    }
  }

  else if (*(void *)(a2 + 112))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
    unsigned int v39 = v9;
    uint64_t v33 = *(void *)(a2 + 112);
    uint64_t v41 = 0LL;
    uint64_t v34 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
    uint64_t v44 = 512LL;
    uint64_t v40 = StoreMTLFunctionDescriptorUsingEncode(*(void *)(a1 + 32), v33, v34, &v44, a4);
    DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_error( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  else
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0LL) + 32LL) + 8LL);
    unsigned int v39 = v9;
    uint64_t v40 = *(void *)(a2 + 56);
    DYTraceEncode_MTLLibrary_newFunctionWithName( (uint64_t)&v38,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  FlushChainedFunctionInfo(a1, a2, a4, a3);
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  *(void *)(v24 + 16) = 0LL;
  *(void *)(v24 + 24) = 0LL;
  *(void *)(v24 + 8) = 0LL;
  *(_DWORD *)(v24 + 32) = 70;
  *(_DWORD *)(v24 + 36) = 67;
  *(void *)uint64_t v24 = 0xFFFFD00800000028LL;
  *(void *)(v24 + 40) = v23;
  *(_DWORD *)uint64_t v24 = 48;
  uint64_t v25 = *(unsigned int **)(a1 + 8);
  uint64_t v26 = *v25;
  if ((*((_BYTE *)v25 + 33) & 0x10) != 0)
  {
    unint64_t v28 = *(unsigned int **)(a1 + 8);
    unint64_t v27 = *v25;
    do
    {
      unint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }

    while ((*((_BYTE *)v28 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v27 = *v25;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v25, v27);
}

void WriteGTMTLSMLibrary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 520);
  uint64_t v7 = *(void *)(a2 + 16);
  if (IsAppleInternalLabel(*(void *)(a3 + 112))) {
    int v8 = 0x80000;
  }
  else {
    int v8 = 0;
  }
  uint64_t v96 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(*find_entry(v7, &v96, 8uLL, 0LL) + 32LL);
  uint64_t v10 = *(const char **)(v9 + 8);
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v96 = *(void *)a1;
  uint64_t v97 = "library";
  uint64_t v98 = (uint64_t)v10;
  uint64_t v99 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)&v96, v11, *(unsigned int *)(a1 + 16), v12, 0LL);
  uint64_t v13 = *(unsigned int **)(a1 + 8);
  uint64_t v14 = *v13;
  if ((*((_BYTE *)v13 + 33) & 0x10) != 0)
  {
    uint64_t v16 = *(unsigned int **)(a1 + 8);
    unint64_t v15 = *v13;
    do
    {
      uint64_t v16 = (unsigned int *)((char *)v16 + v14);
      uint64_t v14 = *v16;
      v15 += v14;
    }

    while ((*((_BYTE *)v16 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v15 = *v13;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v13, v15);
  switch(*(_BYTE *)(a3 + 161))
  {
    case 0:
      v103[0] = *(void *)a1;
      v103[1] = v10;
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(char **)(a3 + 96);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v19, a2, *(char **)(a3 + 96));
      }

      else
      {
        uint64_t v39 = __chkstk_darwin(v19, v18);
        uint64_t v20 = SaveFileWithURL(v39, v20, v95, 0LL, 1);
      }

      v103[2] = v20;
      v103[3] = 0LL;
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = v103;
      goto LABEL_32;
    case 1:
      v102[0] = *(void *)a1;
      v102[1] = v10;
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(char **)(a3 + 96);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v21, a2, *(char **)(a3 + 96));
      }

      else
      {
        uint64_t v40 = __chkstk_darwin(v21, v18);
        uint64_t v22 = SaveFileWithURL(v40, v22, v95, 0LL, 1);
      }

      v102[2] = v22;
      v102[3] = 0LL;
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = v102;
      goto LABEL_32;
    case 2:
      if (!EncodeDebugLibraryWithSource(a1, a3, v9, v7))
      {
        uint64_t v96 = *(void *)a1;
        uint64_t v97 = v10;
        uint64_t v23 = *(void *)(a3 + 96);
        if (*(_BYTE *)(a2 + 488)) {
          CopyFilePath(*(void *)(a1 + 32), a2, *(char **)(a3 + 96));
        }
        uint64_t v83 = *(void *)(a3 + 104);
        uint64_t v98 = v23;
        uint64_t v99 = v83;
        uint64_t v100 = 0LL;
        GTTrace_storePointer( a1,  -16305,  (uint64_t)&v96,  (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL),  512LL,  v7);
        DYTraceEncode_MTLDevice_newLibraryWithSource_options_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      }

      goto LABEL_33;
    case 3:
      if (EncodeDebugLibraryWithData(a1, a3, v9)) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v96 = *(void *)a1;
      uint64_t v97 = v10;
      uint64_t v98 = *(void *)(a3 + 96);
      uint64_t v99 = 0LL;
      GTTrace_storePointer(a1, -16306, (uint64_t)&v96, (char *)(v24 + *(unsigned int *)(a1 + 16) - 512), 512LL, v7);
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = &v96;
LABEL_32:
      DYTraceEncode_MTLDevice_newLibraryWithData_error((uint64_t)v27, v25, v26, 0LL, 0LL);
      goto LABEL_33;
    case 5:
      uint64_t v96 = *(void *)a1;
      uint64_t v97 = v10;
      __chkstk_darwin(v17, v18);
      uint64_t v29 = (uint64_t *)((char *)&v96 - ((v28 + 15) & 0xFFFFFFFF0LL));
      name_array_10933(v7, v29, *(uint64_t **)(a3 + 48), v30);
      uint64_t v31 = *(unsigned int *)(a3 + 152);
      uint64_t v98 = (uint64_t)v29;
      uint64_t v99 = v31;
      uint64_t v32 = *(void *)(a3 + 56);
      uint64_t v101 = 0LL;
      uint64_t v33 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
      uint64_t v104 = 512LL;
      uint64_t v100 = StoreMTLImageFilterFunctionInfoSPIUsingEncode(*(void *)(a1 + 32), v32, v33, &v104, v31);
      DYTraceEncode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
      goto LABEL_33;
    case 6:
      int v34 = *(_DWORD *)(a3 + 4);
      if (v34 > -15422)
      {
        if (v34 == -15421 || v34 == -15420)
        {
          uint64_t v80 = *(void *)(a1 + 8);
          uint64_t v96 = *(void *)a1;
          uint64_t v97 = v10;
          unint64_t v81 = *(uint64_t **)(a3 + 72);
          uint64_t v99 = 0LL;
          uint64_t v82 = v80 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v104 = 512LL;
          uint64_t v98 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v81, v82, &v104, v7);
          DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
          goto LABEL_33;
        }

        int v35 = -15419;
LABEL_26:
        if (v34 == v35)
        {
          uint64_t v36 = *(void *)(a1 + 8);
          uint64_t v96 = *(void *)a1;
          uint64_t v97 = v10;
          uint64_t v37 = *(uint64_t **)(a3 + 72);
          uint64_t v99 = 0LL;
          uint64_t v38 = v36 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v104 = 512LL;
          uint64_t v98 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v37, v38, &v104, v7);
          DYTraceEncode_MTLDevice_newLibraryWithDescriptorSPI_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
        }

        goto LABEL_33;
      }

      if (v34 != -15693)
      {
        if (v34 == -15435)
        {
          uint64_t v92 = *(void *)(a1 + 8);
          uint64_t v96 = *(void *)a1;
          uint64_t v97 = v10;
          uint64_t v93 = *(uint64_t **)(a3 + 72);
          uint64_t v99 = 0LL;
          uint64_t v94 = v92 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v104 = 512LL;
          uint64_t v98 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v93, v94, &v104, v7);
          DYTraceEncode_MTLDevice_newLibraryWithDescriptor_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
          goto LABEL_33;
        }

        int v35 = -15434;
        goto LABEL_26;
      }

      __chkstk_darwin(v17, v18);
      uint64_t v86 = (unint64_t *)((char *)&v96 - v85);
      *(uint64_t *)((char *)&v96 - v85) = v84;
      if ((_DWORD)v84)
      {
        uint64_t v87 = *(uint64_t **)(a3 + 88);
        uint64_t v88 = v86 + 1;
        do
        {
          uint64_t v89 = *v87++;
          *v88++ = v89;
          --v84;
        }

        while (v84);
      }

      uint64_t v90 = *(void *)(a1 + 8);
      uint64_t v96 = *(void *)a1;
      uint64_t v97 = v10;
      uint64_t v98 = *(void *)(a3 + 80);
      uint64_t v100 = 0LL;
      uint64_t v91 = v90 + *(unsigned int *)(a1 + 16) - 512;
      uint64_t v104 = 512LL;
      uint64_t v99 = UnwrapMTLArray_(*(void *)(a1 + 32), v86, v91, &v104, v7);
      DYTraceEncode_MTLDevice_newLibraryWithDAG_functions_error( (uint64_t)&v96,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
LABEL_33:
      FlushChainedLibraryInfo((uint64_t *)a1, a3, v7, v8);
      if (*(void *)(a3 + 112)) {
        uint64_t v41 = *(const char **)(a3 + 112);
      }
      else {
        uint64_t v41 = "";
      }
      uint64_t v42 = *(unsigned int **)(a1 + 8);
      *((void *)v42 + 1) = 0LL;
      *((void *)v42 + 2) = 0LL;
      *((void *)v42 + 3) = 0LL;
      *((void *)v42 + 4) = 0x534300000000LL;
      *(void *)uint64_t v42 = 0xFFFFC05C00000028LL;
      *((void *)v42 + 5) = v10;
      unsigned int *v42 = 48;
      AppendString(v41, (int *)v42);
      uint64_t v43 = *v42;
      uint64_t v44 = ((_DWORD)v43 + 3) & 0xFFFFFFFC;
      bzero((char *)v42 + v43, v44 - v43);
      unsigned int *v42 = v44;
      unint64_t v45 = *(unsigned int **)(a1 + 8);
      unsigned int v46 = v45[8];
      v45[8] = v46 | v8;
      unint64_t v47 = *v45;
      if ((v46 & 0x1000) != 0)
      {
        uint64_t v48 = *v45;
        uint64_t v49 = v45;
        do
        {
          uint64_t v49 = (unsigned int *)((char *)v49 + v48);
          uint64_t v48 = *v49;
          v47 += v48;
        }

        while ((*((_BYTE *)v49 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v45, v47);
      uint64_t v50 = *(const char **)(a3 + 120);
      if (v50)
      {
        uint64_t v51 = *(unsigned int **)(a1 + 8);
        *((void *)v51 + 1) = 0LL;
        *((void *)v51 + 2) = 0LL;
        *((void *)v51 + 3) = 0LL;
        *((void *)v51 + 4) = 0x534300000000LL;
        *(void *)uint64_t v51 = 0xFFFFC12D00000028LL;
        *((void *)v51 + 5) = v10;
        *uint64_t v51 = 48;
        AppendString(v50, (int *)v51);
        uint64_t v52 = *v51;
        uint64_t v53 = ((_DWORD)v52 + 3) & 0xFFFFFFFC;
        bzero((char *)v51 + v52, v53 - v52);
        *uint64_t v51 = v53;
        uint64_t v54 = *(unsigned int **)(a1 + 8);
        unsigned int v55 = v54[8];
        v54[8] = v55 | v8;
        unint64_t v56 = *v54;
        if ((v55 & 0x1000) != 0)
        {
          uint64_t v57 = *v54;
          unint64_t v58 = v54;
          do
          {
            unint64_t v58 = (unsigned int *)((char *)v58 + v57);
            uint64_t v57 = *v58;
            v56 += v57;
          }

          while ((*((_BYTE *)v58 + 33) & 0x20) == 0);
        }

        fbstream_write(*(void *)(a1 + 24), (uint64_t)v54, v56);
      }

      uint64_t v96 = *(void *)(a3 + 8);
      entry = find_entry(v6, &v96, 8uLL, 0LL);
      if (*entry) {
        uint64_t v61 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v61 = 0LL;
      }
      uint8x8_t v62 = *(unsigned int **)(a1 + 8);
      uint64_t v96 = *(void *)a1;
      uint64_t v97 = "functions";
      uint64_t v98 = 0LL;
      uint64_t v99 = 0LL;
      DYTraceEncode_EnterStateGroup((uint64_t)&v96, v62, *(unsigned int *)(a1 + 16), v60, 0LL);
      uint64_t v63 = *(unsigned int **)(a1 + 8);
      uint64_t v64 = *v63;
      if ((*((_BYTE *)v63 + 33) & 0x10) != 0)
      {
        uint64_t v66 = *(unsigned int **)(a1 + 8);
        unint64_t v65 = *v63;
        do
        {
          uint64_t v66 = (unsigned int *)((char *)v66 + v64);
          uint64_t v64 = *v66;
          v65 += v64;
        }

        while ((*((_BYTE *)v66 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v65 = *v63;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v63, v65);
      if (v61 && *(int *)(v61 + 12) >= 1)
      {
        uint64_t v67 = 0LL;
        do
          WriteGTMTLSMFunction(a1, *(void *)(*(void *)(v61 + 24) + 8 * v67++), v8, v7);
        while (v67 < *(int *)(v61 + 12));
      }

      uint64_t v68 = *(void *)a1;
      uint64_t v69 = *(void *)(a1 + 8);
      *(void *)(v69 + 16) = 0LL;
      *(void *)(v69 + 24) = 0LL;
      *(void *)(v69 + 8) = 0LL;
      *(_DWORD *)(v69 + 32) = 70;
      *(_DWORD *)(v69 + 36) = 67;
      *(void *)uint64_t v69 = 0xFFFFD00800000028LL;
      *(void *)(v69 + 40) = v68;
      *(_DWORD *)uint64_t v69 = 48;
      char v70 = *(unsigned int **)(a1 + 8);
      uint64_t v71 = *v70;
      if ((*((_BYTE *)v70 + 33) & 0x10) != 0)
      {
        __int128 v73 = *(unsigned int **)(a1 + 8);
        unint64_t v72 = *v70;
        do
        {
          __int128 v73 = (unsigned int *)((char *)v73 + v71);
          uint64_t v71 = *v73;
          v72 += v71;
        }

        while ((*((_BYTE *)v73 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v72 = *v70;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v70, v72);
      uint64_t v74 = *(void *)a1;
      uint64_t v75 = *(void *)(a1 + 8);
      *(void *)(v75 + 16) = 0LL;
      *(void *)(v75 + 24) = 0LL;
      *(void *)(v75 + 8) = 0LL;
      *(_DWORD *)(v75 + 32) = 70;
      *(_DWORD *)(v75 + 36) = 67;
      *(void *)uint64_t v75 = 0xFFFFD00800000028LL;
      *(void *)(v75 + 40) = v74;
      *(_DWORD *)uint64_t v75 = 48;
      uint64_t v76 = *(unsigned int **)(a1 + 8);
      uint64_t v77 = *v76;
      if ((*((_BYTE *)v76 + 33) & 0x10) != 0)
      {
        uint64_t v79 = *(unsigned int **)(a1 + 8);
        unint64_t v78 = *v76;
        do
        {
          uint64_t v79 = (unsigned int *)((char *)v79 + v77);
          uint64_t v77 = *v79;
          v78 += v77;
        }

        while ((*((_BYTE *)v79 + 33) & 0x20) == 0);
      }

      else
      {
        unint64_t v78 = *v76;
      }

      fbstream_write(*(void *)(a1 + 24), (uint64_t)v76, v78);
      return;
    default:
      goto LABEL_33;
  }

void WriteGTMTLSMDynamicLibrary(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  BOOL v8 = IsAppleInternalLabel(a3[8]);
  v41[0] = a3[1];
  uint64_t v9 = *(void *)(*(void *)(*find_entry(a4, v41, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v10 = *(unsigned int **)(a1 + 8);
  v41[0] = *(void *)a1;
  v41[1] = "dynamic-library";
  v41[2] = v9;
  v41[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v41, v10, *(unsigned int *)(a1 + 16), v11, 0LL);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((_BYTE *)v12 + 33) & 0x10) != 0)
  {
    unint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      unint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }

    while ((*((_BYTE *)v15 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v14 = *v12;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (a3[6])
  {
    uint64_t v17 = *(void *)a1;
    v41[0] = a3[6];
    uint64_t v18 = *(void *)(*(void *)(*find_entry(a4, v41, 8uLL, 0LL) + 32LL) + 8LL);
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + 16) = 0LL;
    *(void *)(v19 + 24) = 0LL;
    *(void *)(v19 + 32) = 0x74744300000001LL;
    *(void *)uint64_t v19 = 0xFFFFC2B100000028LL;
    *(void *)(v19 + 40) = v17;
    *(void *)(v19 + 48) = v18;
    *(void *)(v19 + 56) = 0LL;
    *(_DWORD *)(v19 + 64) = 116;
    *(void *)(v19 + 68) = v9;
    *(_DWORD *)uint64_t v19 = 76;
  }

  else
  {
    uint64_t v20 = (char *)a3[10];
    if (v20)
    {
      v40[0] = *(void *)a1;
      v40[1] = v9;
      uint64_t v21 = *(void *)(a1 + 32);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v21, a2, v20);
      }

      else
      {
        uint64_t v22 = __chkstk_darwin(v21, v16);
        uint64_t v20 = SaveFileWithURL(v22, v20, &v39, 0LL, 1);
      }

      v40[2] = v20;
      v40[3] = 0LL;
      DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_error( (uint64_t)v40,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    }
  }

  if (v8) {
    int v23 = 0x80000;
  }
  else {
    int v23 = 0;
  }
  FlushChainedDynamicLibraryInfo(a1, (uint64_t)a3, a4, v23);
  if (a3[8]) {
    uint64_t v24 = (const char *)a3[8];
  }
  else {
    uint64_t v24 = "";
  }
  uint64_t v25 = *(unsigned int **)(a1 + 8);
  *((void *)v25 + 1) = 0LL;
  *((void *)v25 + 2) = 0LL;
  *((void *)v25 + 3) = 0LL;
  *((void *)v25 + 4) = 0x534300000000LL;
  *(void *)uint64_t v25 = 0xFFFFC2C400000028LL;
  *((void *)v25 + 5) = v9;
  *uint64_t v25 = 48;
  AppendString(v24, (int *)v25);
  uint64_t v26 = *v25;
  uint64_t v27 = ((_DWORD)v26 + 3) & 0xFFFFFFFC;
  bzero((char *)v25 + v26, v27 - v26);
  *uint64_t v25 = v27;
  uint64_t v28 = *(unsigned int **)(a1 + 8);
  unsigned int v29 = v28[8];
  v28[8] = v29 | v23;
  unint64_t v30 = *v28;
  if ((v29 & 0x1000) != 0)
  {
    uint64_t v31 = *v28;
    uint64_t v32 = v28;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v31);
      uint64_t v31 = *v32;
      v30 += v31;
    }

    while ((*((_BYTE *)v32 + 33) & 0x20) == 0);
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v28, v30);
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void *)(a1 + 8);
  *(void *)(v34 + 16) = 0LL;
  *(void *)(v34 + 24) = 0LL;
  *(void *)(v34 + 8) = 0LL;
  *(_DWORD *)(v34 + 32) = 70;
  *(_DWORD *)(v34 + 36) = 67;
  *(void *)uint64_t v34 = 0xFFFFD00800000028LL;
  *(void *)(v34 + 40) = v33;
  *(_DWORD *)uint64_t v34 = 48;
  int v35 = *(unsigned int **)(a1 + 8);
  uint64_t v36 = *v35;
  if ((*((_BYTE *)v35 + 33) & 0x10) != 0)
  {
    uint64_t v38 = *(unsigned int **)(a1 + 8);
    unint64_t v37 = *v35;
    do
    {
      uint64_t v38 = (unsigned int *)((char *)v38 + v36);
      uint64_t v36 = *v38;
      v37 += v36;
    }

    while ((*((_BYTE *)v38 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v37 = *v35;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v37);
}

void WriteGTMTLSMFence(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v32[0] = *a1;
  v32[1] = "fence";
  v32[2] = a3;
  v32[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v32, v7, *((unsigned int *)a1 + 4), a4, 0LL);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((_BYTE *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }

    while ((*((_BYTE *)v11 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v10 = *v8;
  }

  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 8) = 0LL;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC10000000028LL;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((_BYTE *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v16 = *v14;
  }

  fbstream_write(a1[3], (uint64_t)v14, v16);
  if (*(void *)(a2 + 48)) {
    uint64_t v18 = *(const char **)(a2 + 48);
  }
  else {
    uint64_t v18 = "";
  }
  uint64_t v19 = (unsigned int *)a1[1];
  *((void *)v19 + 1) = 0LL;
  *((void *)v19 + 2) = 0LL;
  *((void *)v19 + 3) = 0LL;
  *((void *)v19 + 4) = 0x534300000000LL;
  *(void *)uint64_t v19 = 0xFFFFC0F800000028LL;
  *((void *)v19 + 5) = a3;
  *uint64_t v19 = 48;
  AppendString(v18, (int *)v19);
  uint64_t v20 = *v19;
  uint64_t v21 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
  bzero((char *)v19 + v20, v21 - v20);
  *uint64_t v19 = v21;
  uint64_t v22 = (unsigned int *)a1[1];
  uint64_t v23 = *v22;
  if ((*((_BYTE *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = (unsigned int *)a1[1];
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }

    while ((*((_BYTE *)v25 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v24 = *v22;
  }

  fbstream_write(a1[3], (uint64_t)v22, v24);
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  *(void *)(v27 + 16) = 0LL;
  *(void *)(v27 + 24) = 0LL;
  *(void *)(v27 + 8) = 0LL;
  *(_DWORD *)(v27 + 32) = 70;
  *(_DWORD *)(v27 + 36) = 67;
  *(void *)uint64_t v27 = 0xFFFFD00800000028LL;
  *(void *)(v27 + 40) = v26;
  *(_DWORD *)uint64_t v27 = 48;
  uint64_t v28 = (unsigned int *)a1[1];
  uint64_t v29 = *v28;
  if ((*((_BYTE *)v28 + 33) & 0x10) != 0)
  {
    uint64_t v31 = (unsigned int *)a1[1];
    unint64_t v30 = *v28;
    do
    {
      uint64_t v31 = (unsigned int *)((char *)v31 + v29);
      uint64_t v29 = *v31;
      v30 += v29;
    }

    while ((*((_BYTE *)v31 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v30 = *v28;
  }

  fbstream_write(a1[3], (uint64_t)v28, v30);
}

void WriteGTMTLSMEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v32[0] = *a1;
  v32[1] = "event";
  v32[2] = a3;
  v32[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v32, v7, *((unsigned int *)a1 + 4), a4, 0LL);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((_BYTE *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }

    while ((*((_BYTE *)v11 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v10 = *v8;
  }

  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 8) = 0LL;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC18300000028LL;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((_BYTE *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v16 = *v14;
  }

  fbstream_write(a1[3], (uint64_t)v14, v16);
  if (*(void *)(a2 + 48)) {
    uint64_t v18 = *(const char **)(a2 + 48);
  }
  else {
    uint64_t v18 = "";
  }
  uint64_t v19 = (unsigned int *)a1[1];
  *((void *)v19 + 1) = 0LL;
  *((void *)v19 + 2) = 0LL;
  *((void *)v19 + 3) = 0LL;
  *((void *)v19 + 4) = 0x534300000000LL;
  *(void *)uint64_t v19 = 0xFFFFC1F800000028LL;
  *((void *)v19 + 5) = a3;
  *uint64_t v19 = 48;
  AppendString(v18, (int *)v19);
  uint64_t v20 = *v19;
  uint64_t v21 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
  bzero((char *)v19 + v20, v21 - v20);
  *uint64_t v19 = v21;
  uint64_t v22 = (unsigned int *)a1[1];
  uint64_t v23 = *v22;
  if ((*((_BYTE *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = (unsigned int *)a1[1];
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }

    while ((*((_BYTE *)v25 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v24 = *v22;
  }

  fbstream_write(a1[3], (uint64_t)v22, v24);
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  *(void *)(v27 + 16) = 0LL;
  *(void *)(v27 + 24) = 0LL;
  *(void *)(v27 + 8) = 0LL;
  *(_DWORD *)(v27 + 32) = 70;
  *(_DWORD *)(v27 + 36) = 67;
  *(void *)uint64_t v27 = 0xFFFFD00800000028LL;
  *(void *)(v27 + 40) = v26;
  *(_DWORD *)uint64_t v27 = 48;
  uint64_t v28 = (unsigned int *)a1[1];
  uint64_t v29 = *v28;
  if ((*((_BYTE *)v28 + 33) & 0x10) != 0)
  {
    uint64_t v31 = (unsigned int *)a1[1];
    unint64_t v30 = *v28;
    do
    {
      uint64_t v31 = (unsigned int *)((char *)v31 + v29);
      uint64_t v29 = *v31;
      v30 += v29;
    }

    while ((*((_BYTE *)v31 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v30 = *v28;
  }

  fbstream_write(a1[3], (uint64_t)v28, v30);
}

void WriteGTMTLSMLateEvalEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v30[0] = *a1;
  v30[1] = "late-eval-event";
  _OWORD v30[2] = a3;
  v30[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v30, v7, *((unsigned int *)a1 + 4), a4, 0LL);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((_BYTE *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }

    while ((*((_BYTE *)v11 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v10 = *v8;
  }

  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 8) = 0LL;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC37800000028LL;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((_BYTE *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v16 = *v14;
  }

  fbstream_write(a1[3], (uint64_t)v14, v16);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v19 = (void *)a1[1];
  v19[2] = 0LL;
  v19[3] = 0LL;
  v19[1] = 0LL;
  v19[4] = 0x77754300000000LL;
  *uint64_t v19 = 0xFFFFC37E00000028LL;
  v19[5] = a3;
  v19[6] = v18;
  *(_DWORD *)uint64_t v19 = 56;
  uint64_t v20 = (unsigned int *)a1[1];
  uint64_t v21 = *v20;
  if ((*((_BYTE *)v20 + 33) & 0x10) != 0)
  {
    uint64_t v23 = (unsigned int *)a1[1];
    unint64_t v22 = *v20;
    do
    {
      uint64_t v23 = (unsigned int *)((char *)v23 + v21);
      uint64_t v21 = *v23;
      v22 += v21;
    }

    while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v22 = *v20;
  }

  fbstream_write(a1[3], (uint64_t)v20, v22);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  *(void *)(v25 + 16) = 0LL;
  *(void *)(v25 + 24) = 0LL;
  *(void *)(v25 + 8) = 0LL;
  *(_DWORD *)(v25 + 32) = 70;
  *(_DWORD *)(v25 + 36) = 67;
  *(void *)uint64_t v25 = 0xFFFFD00800000028LL;
  *(void *)(v25 + 40) = v24;
  *(_DWORD *)uint64_t v25 = 48;
  uint64_t v26 = (unsigned int *)a1[1];
  uint64_t v27 = *v26;
  if ((*((_BYTE *)v26 + 33) & 0x10) != 0)
  {
    uint64_t v29 = (unsigned int *)a1[1];
    unint64_t v28 = *v26;
    do
    {
      uint64_t v29 = (unsigned int *)((char *)v29 + v27);
      uint64_t v27 = *v29;
      v28 += v27;
    }

    while ((*((_BYTE *)v29 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v28 = *v26;
  }

  fbstream_write(a1[3], (uint64_t)v26, v28);
}

void WriteGTMTLSMSharedEvent(uint64_t *a1, apr_hash_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (unsigned int *)a1[1];
  v53[0] = *a1;
  v53[1] = "shared-event";
  v53[2] = a4;
  v53[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v53, v8, *((unsigned int *)a1 + 4), a4, 0LL);
  uint64_t v9 = (unsigned int *)a1[1];
  uint64_t v10 = *v9;
  if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
  {
    uint64_t v12 = (unsigned int *)a1[1];
    unint64_t v11 = *v9;
    do
    {
      uint64_t v12 = (unsigned int *)((char *)v12 + v10);
      uint64_t v10 = *v12;
      v11 += v10;
    }

    while ((*((_BYTE *)v12 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v11 = *v9;
  }

  fbstream_write(a1[3], (uint64_t)v9, v11);
  uint64_t v13 = *find_entry((uint64_t)a2, (_BYTE *)(a3 + 72), 4uLL, 0LL);
  if (v13 && (uint64_t v14 = *(void *)(v13 + 32)) != 0)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = *(void *)(a3 + 64);
    int v17 = *(_DWORD *)(a3 + 72);
    uint64_t v18 = *a1;
    uint64_t v19 = a1[1];
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + 16) = 0LL;
    *(void *)(v19 + 24) = 0LL;
    *(void *)uint64_t v19 = 0xFFFFC1DB00000024LL;
    *(_DWORD *)(v19 + 32) = 1;
    strcpy((char *)(v19 + 36), "Ctuiuw");
    *(_BYTE *)(v19 + 43) = 0;
    *(void *)(v19 + 44) = v18;
    *(void *)(v19 + 52) = v15;
    *(_DWORD *)(v19 + 60) = v17;
    *(void *)(v19 + 64) = v16;
    *(_DWORD *)(v19 + 72) = 116;
    *(void *)(v19 + 76) = a4;
    *(_DWORD *)uint64_t v19 = 84;
  }

  else
  {
    apr_hash_set(a2, (const void *)(a3 + 72), 4LL, (const void *)a3);
    int v20 = *(_DWORD *)(a3 + 72);
    uint64_t v21 = *a1;
    uint64_t v22 = a1[1];
    *(void *)(v22 + 16) = 0LL;
    *(void *)(v22 + 24) = 0LL;
    *(void *)(v22 + 8) = 0LL;
    *(void *)(v22 + 32) = 0x69754300000001LL;
    *(void *)uint64_t v22 = 0xFFFFC18400000028LL;
    *(void *)(v22 + 40) = v21;
    *(_DWORD *)(v22 + 48) = v20;
    *(_DWORD *)(v22 + 52) = 116;
    *(void *)(v22 + 56) = a4;
    *(_DWORD *)uint64_t v22 = 64;
    uint64_t v23 = (unsigned int *)a1[1];
    uint64_t v24 = *v23;
    if ((*((_BYTE *)v23 + 33) & 0x10) != 0)
    {
      uint64_t v26 = (unsigned int *)a1[1];
      unint64_t v25 = *v23;
      do
      {
        uint64_t v26 = (unsigned int *)((char *)v26 + v24);
        uint64_t v24 = *v26;
        v25 += v24;
      }

      while ((*((_BYTE *)v26 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v25 = *v23;
    }

    fbstream_write(a1[3], (uint64_t)v23, v25);
    uint64_t v27 = *(void *)(a3 + 64);
    unint64_t v28 = (void *)a1[1];
    v28[2] = 0LL;
    v28[3] = 0LL;
    v28[1] = 0LL;
    v28[4] = 0x77754300000000LL;
    *unint64_t v28 = 0xFFFFC19900000028LL;
    v28[5] = a4;
    v28[6] = v27;
    *(_DWORD *)unint64_t v28 = 56;
    uint64_t v29 = (unsigned int *)a1[1];
    uint64_t v30 = *v29;
    if ((*((_BYTE *)v29 + 33) & 0x10) != 0)
    {
      uint64_t v32 = (unsigned int *)a1[1];
      unint64_t v31 = *v29;
      do
      {
        uint64_t v32 = (unsigned int *)((char *)v32 + v30);
        uint64_t v30 = *v32;
        v31 += v30;
      }

      while ((*((_BYTE *)v32 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v31 = *v29;
    }

    fbstream_write(a1[3], (uint64_t)v29, v31);
    uint64_t v33 = *(void *)(a3 + 56);
    uint64_t v34 = a1[1];
    *(void *)(v34 + 8) = 0LL;
    *(void *)(v34 + 16) = 0LL;
    *(void *)(v34 + 24) = 0LL;
    *(_DWORD *)(v34 + 32) = 1;
    *(_DWORD *)(v34 + 36) = 67;
    *(void *)uint64_t v34 = 0xFFFFC1DD00000028LL;
    *(void *)(v34 + 40) = a4;
    *(_DWORD *)(v34 + 48) = 116;
    *(void *)(v34 + 52) = v33;
    *(_DWORD *)uint64_t v34 = 60;
  }

  int v35 = (unsigned int *)a1[1];
  uint64_t v36 = *v35;
  if ((*((_BYTE *)v35 + 33) & 0x10) != 0)
  {
    uint64_t v38 = (unsigned int *)a1[1];
    unint64_t v37 = *v35;
    do
    {
      uint64_t v38 = (unsigned int *)((char *)v38 + v36);
      uint64_t v36 = *v38;
      v37 += v36;
    }

    while ((*((_BYTE *)v38 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v37 = *v35;
  }

  fbstream_write(a1[3], (uint64_t)v35, v37);
  if (*(void *)(a3 + 48)) {
    char v39 = *(const char **)(a3 + 48);
  }
  else {
    char v39 = "";
  }
  uint64_t v40 = (unsigned int *)a1[1];
  *((void *)v40 + 1) = 0LL;
  *((void *)v40 + 2) = 0LL;
  *((void *)v40 + 3) = 0LL;
  *((void *)v40 + 4) = 0x534300000000LL;
  *(void *)uint64_t v40 = 0xFFFFC19A00000028LL;
  *((void *)v40 + 5) = a4;
  *uint64_t v40 = 48;
  AppendString(v39, (int *)v40);
  uint64_t v41 = *v40;
  uint64_t v42 = ((_DWORD)v41 + 3) & 0xFFFFFFFC;
  bzero((char *)v40 + v41, v42 - v41);
  *uint64_t v40 = v42;
  uint64_t v43 = (unsigned int *)a1[1];
  uint64_t v44 = *v43;
  if ((*((_BYTE *)v43 + 33) & 0x10) != 0)
  {
    unsigned int v46 = (unsigned int *)a1[1];
    unint64_t v45 = *v43;
    do
    {
      unsigned int v46 = (unsigned int *)((char *)v46 + v44);
      uint64_t v44 = *v46;
      v45 += v44;
    }

    while ((*((_BYTE *)v46 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v45 = *v43;
  }

  fbstream_write(a1[3], (uint64_t)v43, v45);
  uint64_t v47 = *a1;
  uint64_t v48 = a1[1];
  *(void *)(v48 + 16) = 0LL;
  *(void *)(v48 + 24) = 0LL;
  *(void *)(v48 + 8) = 0LL;
  *(_DWORD *)(v48 + 32) = 70;
  *(_DWORD *)(v48 + 36) = 67;
  *(void *)uint64_t v48 = 0xFFFFD00800000028LL;
  *(void *)(v48 + 40) = v47;
  *(_DWORD *)uint64_t v48 = 48;
  uint64_t v49 = (unsigned int *)a1[1];
  uint64_t v50 = *v49;
  if ((*((_BYTE *)v49 + 33) & 0x10) != 0)
  {
    uint64_t v52 = (unsigned int *)a1[1];
    unint64_t v51 = *v49;
    do
    {
      uint64_t v52 = (unsigned int *)((char *)v52 + v50);
      uint64_t v50 = *v52;
      v51 += v50;
    }

    while ((*((_BYTE *)v52 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v51 = *v49;
  }

  fbstream_write(a1[3], (uint64_t)v49, v51);
}

void WriteGTMTLSMFunctionHandle(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v31[0] = *a1;
  v31[1] = "function-handle";
  if (a2) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v32 = v6;
  v31[2] = *(void *)(*(void *)(*find_entry(a3, &v32, 8uLL, 0LL) + 32LL) + 8LL);
  v31[3] = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v31, (unsigned int *)a1[1], *((unsigned int *)a1 + 4), v7, 0LL);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((_BYTE *)v8 + 33) & 0x10) != 0)
  {
    unint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      unint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }

    while ((*((_BYTE *)v11 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v10 = *v8;
  }

  fbstream_write(a1[3], (uint64_t)v8, v10);
  if (*(void *)(a2 + 48))
  {
    v31[0] = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    v31[0] = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    v31[0] = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    uint64_t v15 = a1[1];
    *(void *)(v15 + 8) = 0LL;
    *(void *)(v15 + 16) = 0LL;
    *(void *)(v15 + 24) = 0LL;
    *(_DWORD *)(v15 + 32) = 1;
    *(_DWORD *)(v15 + 36) = 29763;
    *(void *)uint64_t v15 = 0xFFFFC2FC00000028LL;
    *(void *)(v15 + 40) = v12;
    *(void *)(v15 + 48) = v14;
    *(_DWORD *)(v15 + 56) = 116;
    *(void *)(v15 + 60) = v13;
    *(_DWORD *)uint64_t v15 = 68;
  }

  else
  {
    if (!*(void *)(a2 + 56)) {
      goto LABEL_17;
    }
    v31[0] = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    v31[0] = *(void *)(a2 + 8);
    uint64_t v17 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    v31[0] = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0LL) + 32LL) + 8LL);
    uint64_t v19 = *(unsigned __int8 *)(a2 + 64);
    uint64_t v20 = a1[1];
    *(void *)(v20 + 8) = 0LL;
    *(void *)(v20 + 16) = 0LL;
    *(void *)(v20 + 24) = 0LL;
    *(void *)uint64_t v20 = 0xFFFFC39900000024LL;
    *(_DWORD *)(v20 + 32) = 1;
    strcpy((char *)(v20 + 36), "Ctul");
    *(_WORD *)(v20 + 41) = 0;
    *(_BYTE *)(v20 + 43) = 0;
    *(void *)(v20 + 44) = v16;
    *(void *)(v20 + 52) = v18;
    *(void *)(v20 + 60) = v19;
    *(_DWORD *)(v20 + 68) = 116;
    *(void *)(v20 + 72) = v17;
    *(_DWORD *)uint64_t v20 = 80;
  }

  uint64_t v21 = (unsigned int *)a1[1];
  uint64_t v22 = *v21;
  if ((*((_BYTE *)v21 + 33) & 0x10) != 0)
  {
    uint64_t v24 = (unsigned int *)a1[1];
    unint64_t v23 = *v21;
    do
    {
      uint64_t v24 = (unsigned int *)((char *)v24 + v22);
      uint64_t v22 = *v24;
      v23 += v22;
    }

    while ((*((_BYTE *)v24 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v23 = *v21;
  }

  fbstream_write(a1[3], (uint64_t)v21, v23);
LABEL_17:
  uint64_t v25 = *a1;
  uint64_t v26 = a1[1];
  *(void *)(v26 + 16) = 0LL;
  *(void *)(v26 + 24) = 0LL;
  *(void *)(v26 + 8) = 0LL;
  *(_DWORD *)(v26 + 32) = 70;
  *(_DWORD *)(v26 + 36) = 67;
  *(void *)uint64_t v26 = 0xFFFFD00800000028LL;
  *(void *)(v26 + 40) = v25;
  *(_DWORD *)uint64_t v26 = 48;
  uint64_t v27 = (unsigned int *)a1[1];
  uint64_t v28 = *v27;
  if ((*((_BYTE *)v27 + 33) & 0x10) != 0)
  {
    uint64_t v30 = (unsigned int *)a1[1];
    unint64_t v29 = *v27;
    do
    {
      uint64_t v30 = (unsigned int *)((char *)v30 + v28);
      uint64_t v28 = *v30;
      v29 += v28;
    }

    while ((*((_BYTE *)v30 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v29 = *v27;
  }

  fbstream_write(a1[3], (uint64_t)v27, v29);
}

void WriteGTMTLSMVisibleFunctionTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v8 = 0LL;
  }
  *(void *)__str = v8;
  entry = find_entry(a2, __str, 8uLL, 0LL);
  if (*entry) {
    uint64_t v11 = *(void *)(*entry + 32LL);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = *(const char **)(v11 + 8);
  uint64_t v13 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  uint64_t v59 = "visible-function-table";
  uint64_t v60 = (uint64_t)v12;
  uint64_t v61 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v13, *(unsigned int *)(a1 + 16), v10, 0LL);
  uint64_t v14 = *(unsigned int **)(a1 + 8);
  uint64_t v15 = *v14;
  if ((*((_BYTE *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = *(unsigned int **)(a1 + 8);
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v16 = *v14;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v14, v16);
  if (*(void *)(a3 + 120))
  {
    *(void *)__str = *(void *)(a3 + 120);
    *(void *)__str = *(void *)(*(void *)(*find_entry(a2, __str, 8uLL, 0LL) + 32LL) + 8LL);
    uint64_t v59 = v12;
    uint64_t v18 = *(void *)(a3 + 104);
    uint64_t v19 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
    uint64_t v57 = 512LL;
    uint64_t v60 = StoreMTLVisibleFunctionTableDescriptorUsingEncode(*(void *)(a1 + 32), v18, v19, &v57);
    DYTraceEncode_MTLComputePipelineState_newVisibleFunctionTableWithDescriptor( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  else
  {
    if (!*(void *)(a3 + 128)) {
      goto LABEL_20;
    }
    *(void *)__str = *(void *)(a3 + 128);
    *(void *)__str = *(void *)(*(void *)(*find_entry(a2, __str, 8uLL, 0LL) + 32LL) + 8LL);
    uint64_t v59 = v12;
    uint64_t v20 = *(void *)(a3 + 104);
    uint64_t v61 = *(unsigned __int8 *)(a3 + 168);
    uint64_t v21 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
    uint64_t v57 = 512LL;
    uint64_t v60 = StoreMTLVisibleFunctionTableDescriptorUsingEncode(*(void *)(a1 + 32), v20, v21, &v57);
    DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage( (uint64_t)__str,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
  }

  uint64_t v22 = *(unsigned int **)(a1 + 8);
  uint64_t v23 = *v22;
  if ((*((_BYTE *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = *(unsigned int **)(a1 + 8);
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }

    while ((*((_BYTE *)v25 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v24 = *v22;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v22, v24);
LABEL_20:
  WriteVisibleFunctionTableInfo(a1, a3, a2, 0);
  if (*(void *)(a3 + 72)) {
    uint64_t v26 = *(const char **)(a3 + 72);
  }
  else {
    uint64_t v26 = "";
  }
  uint64_t v27 = *(unsigned int **)(a1 + 8);
  *((void *)v27 + 1) = 0LL;
  *((void *)v27 + 2) = 0LL;
  *((void *)v27 + 3) = 0LL;
  *((void *)v27 + 4) = 0x534300000000LL;
  *(void *)uint64_t v27 = 0xFFFFC30900000028LL;
  *((void *)v27 + 5) = v12;
  *uint64_t v27 = 48;
  AppendString(v26, (int *)v27);
  uint64_t v28 = *v27;
  uint64_t v29 = ((_DWORD)v28 + 3) & 0xFFFFFFFC;
  bzero((char *)v27 + v28, v29 - v28);
  *uint64_t v27 = v29;
  uint64_t v30 = *(unsigned int **)(a1 + 8);
  uint64_t v31 = *v30;
  if ((*((_BYTE *)v30 + 33) & 0x10) != 0)
  {
    uint64_t v33 = *(unsigned int **)(a1 + 8);
    unint64_t v32 = *v30;
    do
    {
      uint64_t v33 = (unsigned int *)((char *)v33 + v31);
      uint64_t v31 = *v33;
      v32 += v31;
    }

    while ((*((_BYTE *)v33 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v32 = *v30;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v30, v32);
  if (v11
    && (uint64_t v34 = *(void *)(a1 + 32),
        unint64_t v35 = atomic_load((unint64_t *)(v11 + 56)),
        (unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFE0LL) != 0))
  {
    unint64_t v37 = *(void *)(v34 + 440);
    BOOL v38 = v37 >= v36;
    unint64_t v39 = v37 - v36;
    if (v39 != 0 && v38) {
      unint64_t v40 = v39 * *(unsigned int *)(v34 + 448) / *(unsigned int *)(v34 + 452);
    }
    else {
      unint64_t v40 = 0LL;
    }
  }

  else
  {
    unint64_t v40 = -1LL;
  }

  uint64_t v41 = *(void **)(a1 + 8);
  v41[2] = 0LL;
  v41[3] = 0LL;
  v41[1] = 0LL;
  void v41[4] = 0x77754300000000LL;
  *uint64_t v41 = 0xFFFFD83E00000028LL;
  v41[5] = v12;
  v41[6] = v40;
  *(_DWORD *)uint64_t v41 = 56;
  uint64_t v42 = *(unsigned int **)(a1 + 8);
  uint64_t v43 = *v42;
  if ((*((_BYTE *)v42 + 33) & 0x10) != 0)
  {
    unint64_t v45 = *(unsigned int **)(a1 + 8);
    unint64_t v44 = *v42;
    do
    {
      unint64_t v45 = (unsigned int *)((char *)v45 + v43);
      uint64_t v43 = *v45;
      v44 += v43;
    }

    while ((*((_BYTE *)v45 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v44 = *v42;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v42, v44);
  if (a4)
  {
    v56[0] = v12;
    GTResourceDownloaderGetResourceFilename(a4, 0, __str, 0x80uLL);
    v56[1] = __str;
    v56[2] = 0LL;
    v56[3] = *(void *)(a4 + 48);
    DYTraceEncode_MTLVisibleFunctionTable_setFunctions_withRange( (uint64_t)v56,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    unsigned int v46 = *(unsigned int **)(a1 + 8);
    uint64_t v47 = *v46;
    if ((*((_BYTE *)v46 + 33) & 0x10) != 0)
    {
      uint64_t v49 = *(unsigned int **)(a1 + 8);
      unint64_t v48 = *v46;
      do
      {
        uint64_t v49 = (unsigned int *)((char *)v49 + v47);
        uint64_t v47 = *v49;
        v48 += v47;
      }

      while ((*((_BYTE *)v49 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v48 = *v46;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v46, v48);
  }

  uint64_t v50 = *(void *)a1;
  uint64_t v51 = *(void *)(a1 + 8);
  *(void *)(v51 + 16) = 0LL;
  *(void *)(v51 + 24) = 0LL;
  *(void *)(v51 + 8) = 0LL;
  *(_DWORD *)(v51 + 32) = 70;
  *(_DWORD *)(v51 + 36) = 67;
  *(void *)uint64_t v51 = 0xFFFFD00800000028LL;
  *(void *)(v51 + 40) = v50;
  *(_DWORD *)uint64_t v51 = 48;
  uint64_t v52 = *(unsigned int **)(a1 + 8);
  uint64_t v53 = *v52;
  if ((*((_BYTE *)v52 + 33) & 0x10) != 0)
  {
    unsigned int v55 = *(unsigned int **)(a1 + 8);
    unint64_t v54 = *v52;
    do
    {
      unsigned int v55 = (unsigned int *)((char *)v55 + v53);
      uint64_t v53 = *v55;
      v54 += v53;
    }

    while ((*((_BYTE *)v55 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v54 = *v52;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v52, v54);
}

void WriteGTMTLIntersectionFunctionTable(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  if (a3) {
    uint64_t v9 = a3[1];
  }
  else {
    uint64_t v9 = 0LL;
  }
  unint64_t v10 = a2[5];
  v75[0] = v9;
  entry = find_entry(v8, v75, 8uLL, 0LL);
  if (*entry) {
    uint64_t v13 = *(void **)(*entry + 32LL);
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v14 = v13[1];
  uint64_t v15 = (unsigned int *)a1[1];
  v75[0] = *a1;
  v75[1] = "intersection-function-table";
  v75[2] = v14;
  uint64_t v76 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)v75, v15, *((unsigned int *)a1 + 4), v12, 0LL);
  uint64_t v16 = a1[3];
  uint64_t v17 = (unsigned int *)a1[1];
  unint64_t v18 = *v17;
  if ((*((_BYTE *)v17 + 33) & 0x10) != 0)
  {
    uint64_t v19 = (unsigned int *)a1[1];
    unint64_t v20 = *v17;
    do
    {
      uint64_t v19 = (unsigned int *)((char *)v19 + v18);
      unint64_t v18 = *v19;
      v20 += v18;
    }

    while ((*((_BYTE *)v19 + 33) & 0x20) == 0);
    fbstream_write(v16, (uint64_t)v17, v20);
    if (!v13) {
      goto LABEL_14;
    }
  }

  else
  {
    fbstream_write(v16, (uint64_t)v17, v18);
  }

  uint64_t v21 = v13[4];
  if (!v21 || (*(_BYTE *)(v21 + 79) & 8) == 0)
  {
LABEL_14:
    uint64_t v22 = 0LL;
    goto LABEL_16;
  }

  uint64_t v22 = v21 + 64;
LABEL_16:
  GTTraceFuncToFbuf(a1, a2, v22, 0LL);
  if (a3[9]) {
    uint64_t v23 = (const char *)a3[9];
  }
  else {
    uint64_t v23 = "";
  }
  unint64_t v24 = (unsigned int *)a1[1];
  *((void *)v24 + 1) = 0LL;
  *((void *)v24 + 2) = 0LL;
  *((void *)v24 + 3) = 0LL;
  *((void *)v24 + 4) = 0x534300000000LL;
  *(void *)unint64_t v24 = 0xFFFFC32E00000028LL;
  *((void *)v24 + 5) = v14;
  *unint64_t v24 = 48;
  AppendString(v23, (int *)v24);
  uint64_t v25 = *v24;
  uint64_t v26 = ((_DWORD)v25 + 3) & 0xFFFFFFFC;
  bzero((char *)v24 + v25, v26 - v25);
  *unint64_t v24 = v26;
  uint64_t v27 = (unsigned int *)a1[1];
  uint64_t v28 = *v27;
  if ((*((_BYTE *)v27 + 33) & 0x10) != 0)
  {
    uint64_t v30 = (unsigned int *)a1[1];
    unint64_t v29 = *v27;
    do
    {
      uint64_t v30 = (unsigned int *)((char *)v30 + v28);
      uint64_t v28 = *v30;
      v29 += v28;
    }

    while ((*((_BYTE *)v30 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v29 = *v27;
  }

  fbstream_write(a1[3], (uint64_t)v27, v29);
  if (v13 && (uint64_t v31 = a1[4], v32 = atomic_load(v13 + 7), (v33 = v32 & 0xFFFFFFFFFFFFFFE0LL) != 0))
  {
    unint64_t v34 = *(void *)(v31 + 440);
    BOOL v35 = v34 >= v33;
    unint64_t v36 = v34 - v33;
    if (v36 != 0 && v35) {
      unint64_t v37 = v36 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v37 = 0LL;
    }
  }

  else
  {
    unint64_t v37 = -1LL;
  }

  BOOL v38 = (void *)a1[1];
  v38[2] = 0LL;
  v38[3] = 0LL;
  v38[1] = 0LL;
  v38[4] = 0x77754300000000LL;
  *BOOL v38 = 0xFFFFD83C00000028LL;
  v38[5] = v14;
  v38[6] = v37;
  *(_DWORD *)BOOL v38 = 56;
  unint64_t v39 = (unsigned int *)a1[1];
  uint64_t v40 = *v39;
  if ((*((_BYTE *)v39 + 33) & 0x10) != 0)
  {
    uint64_t v42 = (unsigned int *)a1[1];
    unint64_t v41 = *v39;
    do
    {
      uint64_t v42 = (unsigned int *)((char *)v42 + v40);
      uint64_t v40 = *v42;
      v41 += v40;
    }

    while ((*((_BYTE *)v42 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v41 = *v39;
  }

  fbstream_write(a1[3], (uint64_t)v39, v41);
  apr_pool_create_ex(&newpool, 0LL, 0LL, 0LL);
  bzero(v75, 0x3A0uLL);
  LODWORD(v75[0]) = 60;
  __int16 v78 = 2;
  uint64_t v76 = -1LL;
  uint64_t v77 = -1LL;
  unint64_t v80 = *(unsigned int *)(a3[13] + 8LL);
  uint64_t v79 = apr_palloc(newpool, 16 * v80);
  bzero(v79, 16 * v80);
  uint64_t v43 = v13[4];
  if (v43)
  {
    unsigned int v44 = 0;
    while (1)
    {
      unsigned int v45 = atomic_load((unsigned int *)(v43 + 4));
      uint64_t v46 = v44 + (v45 >> 6) - 1;
      uint64_t v43 = *(void *)(v43 + 40);
      unsigned int v44 = v46;
      if (!v43)
      {
        unsigned int v44 = v46;
        goto LABEL_40;
      }
    }
  }

  else
  {
    unsigned int v44 = 0;
  }

  uint64_t v46 = 0LL;
LABEL_40:
  unint64_t v47 = v44 | (unint64_t)(v46 << 32);
LABEL_41:
  uint64_t v48 = v43 + 64;
  while (v43)
  {
    uint64_t v49 = (unint64_t *)(v48 + ((uint64_t)(HIDWORD(v47) - (int)v47) << 6));
    if (*v49 >= v10) {
      break;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v75, a2[3], (uint64_t)v49, 0LL);
    unsigned int v50 = atomic_load((unsigned int *)(v43 + 4));
    int v51 = v47 + (v50 >> 6);
    uint64_t v52 = (HIDWORD(v47) + 1);
    unint64_t v47 = (v52 << 32) | v47;
    if ((_DWORD)v52 == v51 - 1)
    {
      unint64_t v47 = (v52 << 32) | v52;
      uint64_t v43 = *(void *)(v43 + 40);
      goto LABEL_41;
    }
  }

  unint64_t v53 = v80;
  if (v80)
  {
    uint64_t v54 = 0LL;
    while (1)
    {
      int v55 = *((_DWORD *)v79 + 4 * v54);
      if (v55 == 3) {
        break;
      }
      if (v55 == 2)
      {
        uint64_t v56 = *((void *)v79 + 2 * v54 + 1);
        uint64_t v57 = a1[1];
        *(void *)(v57 + 8) = 0LL;
        *(void *)(v57 + 16) = 0LL;
        *(void *)(v57 + 24) = 0LL;
        *(void *)uint64_t v57 = 0xFFFFC35600000024LL;
LABEL_55:
        *(_DWORD *)(v57 + 32) = 0;
        *(void *)(v57 + 36) = 0x6C756C7543LL;
        goto LABEL_56;
      }

      if (v55 == 1)
      {
        *(void *)__str = *((void *)v79 + 2 * v54 + 1);
        uint64_t v56 = *(void *)(*(void *)(*find_entry(v8, __str, 8uLL, 0LL) + 32LL) + 8LL);
        uint64_t v57 = a1[1];
        *(void *)(v57 + 8) = 0LL;
        *(void *)(v57 + 16) = 0LL;
        *(void *)(v57 + 24) = 0LL;
        *(void *)uint64_t v57 = 0xFFFFC33900000024LL;
        *(_DWORD *)(v57 + 32) = 0;
        strcpy((char *)(v57 + 36), "Ctul");
        *(_WORD *)(v57 + 41) = 0;
        *(_BYTE *)(v57 + 43) = 0;
LABEL_56:
        *(void *)(v57 + 44) = v14;
        *(void *)(v57 + 52) = v56;
        *(void *)(v57 + 60) = v54;
        *(_DWORD *)uint64_t v57 = 68;
        unint64_t v58 = (unsigned int *)a1[1];
        unint64_t v59 = *v58;
        if ((*((_BYTE *)v58 + 33) & 0x10) != 0)
        {
          uint64_t v60 = *v58;
          uint64_t v61 = (unsigned int *)a1[1];
          do
          {
            uint64_t v61 = (unsigned int *)((char *)v61 + v60);
            uint64_t v60 = *v61;
            v59 += v60;
          }

          while ((*((_BYTE *)v61 + 33) & 0x20) == 0);
        }

        fbstream_write(a1[3], (uint64_t)v58, v59);
        unint64_t v53 = v80;
      }

      if (v53 <= ++v54) {
        goto LABEL_61;
      }
    }

    uint64_t v56 = *((void *)v79 + 2 * v54 + 1);
    uint64_t v57 = a1[1];
    *(void *)(v57 + 8) = 0LL;
    *(void *)(v57 + 16) = 0LL;
    *(void *)(v57 + 24) = 0LL;
    *(void *)uint64_t v57 = 0xFFFFC46600000024LL;
    goto LABEL_55;
  }

LABEL_61:
  if (a4)
  {
    GTResourceDownloaderGetResourceFilename(a4, 1, __str, 0x80uLL);
    uint8x8_t v62 = (unsigned int *)a1[1];
    *((void *)v62 + 3) = 0LL;
    *((void *)v62 + 4) = 0x554300000000LL;
    *((void *)v62 + 1) = 0LL;
    *((void *)v62 + 2) = 0LL;
    *(void *)uint8x8_t v62 = 0xFFFFD85800000028LL;
    *((void *)v62 + 5) = v14;
    *uint8x8_t v62 = 48;
    AppendString(__str, (int *)v62);
    uint64_t v63 = *v62;
    uint64_t v64 = ((_DWORD)v63 + 3) & 0xFFFFFFFC;
    bzero((char *)v62 + v63, v64 - v63);
    *uint8x8_t v62 = v64;
    unint64_t v65 = (unsigned int *)a1[1];
    uint64_t v66 = *v65;
    if ((*((_BYTE *)v65 + 33) & 0x10) != 0)
    {
      uint64_t v68 = (unsigned int *)a1[1];
      unint64_t v67 = *v65;
      do
      {
        uint64_t v68 = (unsigned int *)((char *)v68 + v66);
        uint64_t v66 = *v68;
        v67 += v66;
      }

      while ((*((_BYTE *)v68 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v67 = *v65;
    }

    fbstream_write(a1[3], (uint64_t)v65, v67);
  }

  apr_pool_destroy(newpool);
  uint64_t v69 = *a1;
  uint64_t v70 = a1[1];
  *(void *)(v70 + 16) = 0LL;
  *(void *)(v70 + 24) = 0LL;
  *(void *)(v70 + 8) = 0LL;
  *(_DWORD *)(v70 + 32) = 70;
  *(_DWORD *)(v70 + 36) = 67;
  *(void *)uint64_t v70 = 0xFFFFD00800000028LL;
  *(void *)(v70 + 40) = v69;
  *(_DWORD *)uint64_t v70 = 48;
  uint64_t v71 = (unsigned int *)a1[1];
  uint64_t v72 = *v71;
  if ((*((_BYTE *)v71 + 33) & 0x10) != 0)
  {
    uint64_t v74 = (unsigned int *)a1[1];
    unint64_t v73 = *v71;
    do
    {
      uint64_t v74 = (unsigned int *)((char *)v74 + v72);
      uint64_t v72 = *v74;
      v73 += v72;
    }

    while ((*((_BYTE *)v74 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v73 = *v71;
  }

  fbstream_write(a1[3], (uint64_t)v71, v73);
}

void WriteGTMTLSMIndirectCommandBuffer_restore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    GTResourceDownloaderGetResourceFilename(a2, 0, __str, 0x80uLL);
    uint64_t v5 = *(unsigned int **)(a1 + 8);
    *((void *)v5 + 1) = 0LL;
    *((void *)v5 + 2) = 0LL;
    *((void *)v5 + 3) = 0LL;
    *((void *)v5 + 4) = 0x554300000004LL;
    *(void *)uint64_t v5 = 0xFFFFD81500000028LL;
    *((void *)v5 + 5) = a3;
    *uint64_t v5 = 48;
    AppendString(__str, (int *)v5);
    uint64_t v6 = *v5;
    uint64_t v7 = ((_DWORD)v6 + 3) & 0xFFFFFFFC;
    bzero((char *)v5 + v6, v7 - v6);
    *uint64_t v5 = v7;
    uint64_t v8 = *(unsigned int **)(a1 + 8);
    uint64_t v9 = *v8;
    if ((*((_BYTE *)v8 + 33) & 0x10) != 0)
    {
      uint64_t v11 = *(unsigned int **)(a1 + 8);
      unint64_t v10 = *v8;
      do
      {
        uint64_t v11 = (unsigned int *)((char *)v11 + v9);
        uint64_t v9 = *v11;
        v10 += v9;
      }

      while ((*((_BYTE *)v11 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v10 = *v8;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v8, v10);
  }

void WriteGTMTLSMResourceGroup(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v31 = v6;
  uint64_t v7 = *(const char **)(*(void *)(*find_entry(a3, &v31, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v8 = (unsigned int *)a1[1];
  uint64_t v31 = *a1;
  unint64_t v32 = "resource-group";
  unint64_t v33 = v7;
  uint64_t v34 = 0LL;
  DYTraceEncode_EnterStateGroup((uint64_t)&v31, v8, *((unsigned int *)a1 + 4), v9, 0LL);
  unint64_t v10 = (unsigned int *)a1[1];
  uint64_t v11 = *v10;
  if ((*((_BYTE *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v13 = (unsigned int *)a1[1];
    unint64_t v12 = *v10;
    do
    {
      uint64_t v13 = (unsigned int *)((char *)v13 + v11);
      uint64_t v11 = *v13;
      v12 += v11;
    }

    while ((*((_BYTE *)v13 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v12 = *v10;
  }

  fbstream_write(a1[3], (uint64_t)v10, v12);
  uint64_t v31 = *a1;
  unint64_t v32 = v7;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFF0LL);
  name_array_10933(a3, v17, *(uint64_t **)(a2 + 48), v18);
  uint64_t v19 = *(unsigned int *)(a2 + 56);
  unint64_t v33 = v17;
  uint64_t v34 = v19;
  DYTraceEncode_MTLDevice_newResourceGroupFromResources_count((uint64_t)&v31, a1[1], *((unsigned int *)a1 + 4), 0LL, 0LL);
  unint64_t v20 = (unsigned int *)a1[1];
  uint64_t v21 = *v20;
  if ((*((_BYTE *)v20 + 33) & 0x10) != 0)
  {
    uint64_t v23 = (unsigned int *)a1[1];
    unint64_t v22 = *v20;
    do
    {
      uint64_t v23 = (unsigned int *)((char *)v23 + v21);
      uint64_t v21 = *v23;
      v22 += v21;
    }

    while ((*((_BYTE *)v23 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v22 = *v20;
  }

  fbstream_write(a1[3], (uint64_t)v20, v22);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  *(void *)(v25 + 16) = 0LL;
  *(void *)(v25 + 24) = 0LL;
  *(void *)(v25 + 8) = 0LL;
  *(_DWORD *)(v25 + 32) = 70;
  *(_DWORD *)(v25 + 36) = 67;
  *(void *)uint64_t v25 = 0xFFFFD00800000028LL;
  *(void *)(v25 + 40) = v24;
  *(_DWORD *)uint64_t v25 = 48;
  uint64_t v26 = (unsigned int *)a1[1];
  uint64_t v27 = *v26;
  if ((*((_BYTE *)v26 + 33) & 0x10) != 0)
  {
    unint64_t v29 = (unsigned int *)a1[1];
    unint64_t v28 = *v26;
    do
    {
      unint64_t v29 = (unsigned int *)((char *)v29 + v27);
      uint64_t v27 = *v29;
      v28 += v27;
    }

    while ((*((_BYTE *)v29 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v28 = *v26;
  }

  fbstream_write(a1[3], (uint64_t)v26, v28);
}

void WriteGTMTLSMAccelerationStructure_new(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a3 + 120) + 32LL);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 8) = 0LL;
  *(void *)(v9 + 32) = 0x6C754300000001LL;
  *(void *)uint64_t v9 = 0xFFFFC30200000028LL;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *(_DWORD *)(v9 + 56) = 116;
  *(void *)(v9 + 60) = a4;
  *(_DWORD *)uint64_t v9 = 68;
  unint64_t v10 = (unsigned int *)a1[1];
  uint64_t v11 = a1[3];
  uint64_t v12 = *v10;
  if ((*((_BYTE *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v14 = v10;
    unint64_t v13 = *v10;
    do
    {
      uint64_t v14 = (unsigned int *)((char *)v14 + v12);
      uint64_t v12 = *v14;
      v13 += v12;
    }

    while ((*((_BYTE *)v14 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v13 = *v10;
  }

  fbstream_write(v11, (uint64_t)v10, v13);
  WriteAccelerationStructureInfo((uint64_t)a1, a3, a2, 4);
}

void WriteGTMTLSMResidencySet(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8 = a2[2];
  if (a3) {
    uint64_t v9 = *(apr_pool_t ***)(a3 + 8);
  }
  else {
    uint64_t v9 = 0LL;
  }
  unint64_t v10 = a2[5];
  uint64_t v63 = v9;
  uint64_t v11 = *find_entry(v8, &v63, 8uLL, 0LL);
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 32);
  }
  else {
    uint64_t v12 = 0LL;
  }
  unint64_t v13 = *(apr_pool_t ***)(v12 + 8);
  if ((a4 & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v63 = *(apr_pool_t ***)a1;
    uint64_t v64 = v13;
    uint64_t v15 = *(void *)(a3 + 48);
    uint64_t v66 = 0LL;
    uint64_t v16 = v14 + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v60 = (apr_pool_t **)(&stru_1F8 + 8);
    uint64_t nelts = StoreMTLResidencySetDescriptorUsingEncode(*(void *)(a1 + 32), v15, v16, &v60);
    DYTraceEncode_MTLDevice_newResidencySetWithDescriptor_error( (uint64_t)&v63,  *(unsigned int **)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    uint64_t v17 = *(unsigned int **)(a1 + 8);
    uint64_t v18 = *v17;
    if ((*((_BYTE *)v17 + 33) & 0x10) != 0)
    {
      unint64_t v20 = *(unsigned int **)(a1 + 8);
      unint64_t v19 = *v17;
      do
      {
        unint64_t v20 = (unsigned int *)((char *)v20 + v18);
        uint64_t v18 = *v20;
        v19 += v18;
      }

      while ((*((_BYTE *)v20 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v19 = *v17;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v17, v19);
  }

  apr_pool_create_ex(&newpool, 0LL, 0LL, 0LL);
  uint64_t v21 = newpool;
  uint64_t v61 = (apr_pool_t **)apr_hash_make(newpool);
  uint64_t v60 = (apr_pool_t **)apr_hash_make(v21);
  GatherResidencySetAllocationsUpToIndexInternal((uint64_t)&v60, v12, a2[3], v10, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((a4 & 1) != 0)
  {
    uint64_t v64 = (apr_pool_t **)apr_hash_make(v21);
    uint64_t v63 = (apr_pool_t **)apr_hash_make(v21);
    GatherResidencySetAllocationsUpToIndexInternal( (uint64_t)&v63,  v12,  a2[3],  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0);
    unint64_t v22 = v61;
    uint64_t v23 = *(void **)(a1 + 8);
    v23[1] = 0LL;
    v23[2] = 0LL;
    v23[3] = 0LL;
    v23[4] = 0x4300000000LL;
    *uint64_t v23 = 0xFFFFC49800000028LL;
    v23[5] = v13;
    *(_DWORD *)uint64_t v23 = 48;
    uint64_t v24 = *(unsigned int **)(a1 + 8);
    unint64_t v25 = *v24;
    if ((*((_BYTE *)v24 + 33) & 0x10) != 0)
    {
      uint64_t v26 = *v24;
      uint64_t v27 = *(unsigned int **)(a1 + 8);
      do
      {
        uint64_t v27 = (unsigned int *)((char *)v27 + v26);
        uint64_t v26 = *v27;
        v25 += v26;
      }

      while ((*((_BYTE *)v27 + 33) & 0x20) == 0);
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v24, v25);
  }

  else
  {
    unint64_t v22 = v61;
  }

  unint64_t v28 = apr_array_make(v21, 16, 8);
  unint64_t v29 = apr_array_make(v21, 16, 8);
  uint64_t v30 = apr_array_make(v21, 16, 8);
  FillArrayFromHash(v28, v22);
  uint64_t v31 = v60;
  FillArrayFromHashDifference(v29, v60, (uint64_t)v22);
  unint64_t v32 = FillArrayFromHashDifference(v30, v22, (uint64_t)v31);
  if (v28->nelts >= 1)
  {
    uint64_t v63 = v13;
    __chkstk_darwin(v32, v33);
    BOOL v35 = (apr_pool_t **)((char *)&v60 - ((v34 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v8, v35, (uint64_t *)v28->elts, v36);
    uint64_t v64 = v35;
    uint64_t nelts = v28->nelts;
    DYTraceEncode_MTLResidencySet_addAllocations_count( (uint64_t)&v63,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    unint64_t v37 = *(unsigned int **)(a1 + 8);
    uint64_t v38 = *v37;
    if ((*((_BYTE *)v37 + 33) & 0x10) != 0)
    {
      uint64_t v40 = *(unsigned int **)(a1 + 8);
      unint64_t v39 = *v37;
      do
      {
        uint64_t v40 = (unsigned int *)((char *)v40 + v38);
        uint64_t v38 = *v40;
        v39 += v38;
      }

      while ((*((_BYTE *)v40 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v39 = *v37;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v37, v39);
    unint64_t v41 = *(void **)(a1 + 8);
    v41[1] = 0LL;
    v41[2] = 0LL;
    v41[3] = 0LL;
    void v41[4] = 0x4300000000LL;
    *unint64_t v41 = 0xFFFFC48C00000028LL;
    v41[5] = v13;
    *(_DWORD *)unint64_t v41 = 48;
    uint64_t v42 = *(unsigned int **)(a1 + 8);
    unint64_t v43 = *v42;
    if ((*((_BYTE *)v42 + 33) & 0x10) != 0)
    {
      uint64_t v44 = *v42;
      unsigned int v45 = *(unsigned int **)(a1 + 8);
      do
      {
        unsigned int v45 = (unsigned int *)((char *)v45 + v44);
        uint64_t v44 = *v45;
        v43 += v44;
      }

      while ((*((_BYTE *)v45 + 33) & 0x20) == 0);
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v42, v43);
  }

  if (v29->nelts >= 1)
  {
    uint64_t v63 = v13;
    __chkstk_darwin(v32, v33);
    unint64_t v47 = (apr_pool_t **)((char *)&v60 - ((v46 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v8, v47, (uint64_t *)v29->elts, v48);
    uint64_t v64 = v47;
    uint64_t nelts = v29->nelts;
    DYTraceEncode_MTLResidencySet_addAllocations_count( (uint64_t)&v63,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    uint64_t v49 = *(unsigned int **)(a1 + 8);
    uint64_t v50 = *v49;
    if ((*((_BYTE *)v49 + 33) & 0x10) != 0)
    {
      uint64_t v52 = *(unsigned int **)(a1 + 8);
      unint64_t v51 = *v49;
      do
      {
        uint64_t v52 = (unsigned int *)((char *)v52 + v50);
        uint64_t v50 = *v52;
        v51 += v50;
      }

      while ((*((_BYTE *)v52 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v51 = *v49;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v49, v51);
  }

  if (v30->nelts >= 1)
  {
    uint64_t v63 = v13;
    __chkstk_darwin(v32, v33);
    uint64_t v54 = (apr_pool_t **)((char *)&v60 - ((v53 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v8, v54, (uint64_t *)v30->elts, v55);
    uint64_t v64 = v54;
    uint64_t nelts = v30->nelts;
    DYTraceEncode_MTLResidencySet_removeAllocations_count( (uint64_t)&v63,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16),  0LL,  0LL);
    uint64_t v56 = *(unsigned int **)(a1 + 8);
    uint64_t v57 = *v56;
    if ((*((_BYTE *)v56 + 33) & 0x10) != 0)
    {
      unint64_t v59 = *(unsigned int **)(a1 + 8);
      unint64_t v58 = *v56;
      do
      {
        unint64_t v59 = (unsigned int *)((char *)v59 + v57);
        uint64_t v57 = *v59;
        v58 += v57;
      }

      while ((*((_BYTE *)v59 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v58 = *v56;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v56, v58);
  }

LABEL_42:
  apr_pool_destroy(v21);
}

void WriteGTMTLSMCommandQueue_residencySets(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[2];
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  v29[0] = v6;
  uint64_t v7 = *find_entry(v5, v29, 8uLL, 0LL);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 32);
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  apr_pool_create_ex(&newpool, 0LL, 0LL, 0LL);
  unint64_t v10 = newpool;
  uint64_t v11 = (apr_pool_t **)apr_hash_make(newpool);
  GatherCommandQueueResidencySetsUpToIndexInternal(v11, v8, a2[3], a2[5], a2[6] + a2[5], 0);
  uint64_t v12 = apr_array_make(v10, 16, 8);
  unint64_t v13 = FillArrayFromHash(v12, v11);
  if (v12->nelts >= 1)
  {
    v29[0] = v9;
    __chkstk_darwin(v13, v14);
    uint64_t v16 = (void *)((char *)&v29[-1] - ((v15 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v5, v16, (uint64_t *)v12->elts, v17);
    v29[1] = v16;
    v29[2] = v12->nelts;
    DYTraceEncode_MTLCommandQueue_addResidencySets_count((uint64_t)v29, a1[1], *((unsigned int *)a1 + 4), 0LL, 0LL);
    uint64_t v18 = (unsigned int *)a1[1];
    uint64_t v19 = *v18;
    if ((*((_BYTE *)v18 + 33) & 0x10) != 0)
    {
      uint64_t v21 = (unsigned int *)a1[1];
      unint64_t v20 = *v18;
      do
      {
        uint64_t v21 = (unsigned int *)((char *)v21 + v19);
        uint64_t v19 = *v21;
        v20 += v19;
      }

      while ((*((_BYTE *)v21 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v20 = *v18;
    }

    fbstream_write(a1[3], (uint64_t)v18, v20);
  }

  apr_pool_destroy(v10);
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)(v23 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  *(void *)(v23 + 8) = 0LL;
  *(_DWORD *)(v23 + 32) = 70;
  *(_DWORD *)(v23 + 36) = 67;
  *(void *)uint64_t v23 = 0xFFFFD00800000028LL;
  *(void *)(v23 + 40) = v22;
  *(_DWORD *)uint64_t v23 = 48;
  uint64_t v24 = (unsigned int *)a1[1];
  uint64_t v25 = *v24;
  if ((*((_BYTE *)v24 + 33) & 0x10) != 0)
  {
    uint64_t v27 = (unsigned int *)a1[1];
    unint64_t v26 = *v24;
    do
    {
      uint64_t v27 = (unsigned int *)((char *)v27 + v25);
      uint64_t v25 = *v27;
      v26 += v25;
    }

    while ((*((_BYTE *)v27 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v26 = *v24;
  }

  fbstream_write(a1[3], (uint64_t)v24, v26);
}

apr_hash_index_t *FillArrayFromHash(apr_array_header_t *a1, apr_pool_t **a2)
{
  a1->uint64_t nelts = 0;
  uint64_t result = apr_hash_first(*a2, (apr_hash_t *)a2);
  if (result)
  {
    int v4 = result;
    do
    {
      uint64_t v5 = **(void **)(*((void *)v4 + 1) + 16LL);
      *(void *)apr_array_push(a1) = v5;
      uint64_t result = apr_hash_next(v4);
      int v4 = result;
    }

    while (result);
  }

  return result;
}

void *name_array_10933(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = a4;
    uint64_t v8 = a2;
    do
    {
      uint64_t v9 = *a3++;
      uint64_t v11 = v9;
      *v8++ = *(void *)(*(void *)(*find_entry(a1, &v11, 8uLL, 0LL) + 32LL) + 8LL);
      --v5;
    }

    while (v5);
  }

  return a2;
}

uint64_t HashesEqual(apr_pool_t **ht, apr_pool_t **a2)
{
  int v4 = apr_hash_first(*ht, (apr_hash_t *)ht);
  if (v4)
  {
    uint64_t v5 = v4;
    while (1)
    {
      entry = find_entry((uint64_t)a2, *(_BYTE **)(*((void *)v5 + 1) + 16LL), 8uLL, 0LL);
      if (!*entry || !*(void *)(*entry + 32LL)) {
        break;
      }
      uint64_t v5 = apr_hash_next(v5);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    uint64_t v7 = apr_hash_first(*a2, (apr_hash_t *)a2);
    if (!v7) {
      return 1LL;
    }
    uint64_t v8 = v7;
    while (1)
    {
      uint64_t v9 = find_entry((uint64_t)ht, *(_BYTE **)(*((void *)v8 + 1) + 16LL), 8uLL, 0LL);
      if (!*v9 || !*(void *)(*v9 + 32LL)) {
        break;
      }
      uint64_t v8 = apr_hash_next(v8);
      if (!v8) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

apr_hash_index_t *FillArrayFromHashDifference(apr_array_header_t *a1, apr_pool_t **a2, uint64_t a3)
{
  a1->uint64_t nelts = 0;
  uint64_t result = apr_hash_first(*a2, (apr_hash_t *)a2);
  if (result)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *(_BYTE **)(*((void *)v6 + 1) + 16LL);
      uint64_t v8 = *find_entry(a3, v7, 8uLL, 0LL);
      if (!v8 || !*(void *)(v8 + 32))
      {
        uint64_t v9 = *(void *)v7;
        *(void *)apr_array_push(a1) = v9;
      }

      uint64_t result = apr_hash_next(v6);
      uint64_t v6 = result;
    }

    while (result);
  }

  return result;
}

void WriteGTMTLSMTexture_restoreTextureData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a1 + 44))
  {
    unint64_t v6 = 0LL;
    do
    {
      unint64_t v7 = a1 + 88 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 52);
      v19[0] = a3;
      v19[1] = v8;
      uint64_t v9 = *(unsigned __int16 *)(v7 + 58);
      v19[2] = *(unsigned __int16 *)(v7 + 56);
      v19[3] = v9;
      uint64_t v10 = *(unsigned __int16 *)(v7 + 64);
      v19[4] = *(unsigned int *)(v7 + 60);
      v19[5] = v10;
      uint64_t v11 = *(unsigned __int16 *)(v7 + 50);
      v19[6] = *(unsigned __int16 *)(v7 + 66);
      v19[7] = v11;
      v19[8] = *(unsigned __int16 *)(v7 + 48);
      GTResourceDownloaderGetResourceFilename(a1, v6, __str, 0x80uLL);
      v19[9] = __str;
      uint64_t v12 = *(void *)(v7 + 68);
      *(void *)&__int128 v13 = v12;
      *((void *)&v13 + 1) = HIDWORD(v12);
      __int128 v20 = v13;
      uint64_t v21 = *(unsigned int *)(v7 + 76);
      DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage( (uint64_t)v19,  *(unsigned int **)(a2 + 8),  *(unsigned int *)(a2 + 16),  0LL,  0LL);
      uint64_t v14 = *(unsigned int **)(a2 + 8);
      v14[1] = -10236;
      unsigned int v15 = v14[8];
      v14[8] = v15 | 4;
      unint64_t v16 = *v14;
      if ((v15 & 0x1000) != 0)
      {
        uint64_t v17 = *v14;
        uint64_t v18 = v14;
        do
        {
          uint64_t v18 = (unsigned int *)((char *)v18 + v17);
          uint64_t v17 = *v18;
          v16 += v17;
        }

        while ((*((_BYTE *)v18 + 33) & 0x20) == 0);
      }

      fbstream_write(*(void *)(a2 + 24), (uint64_t)v14, v16);
      ++v6;
    }

    while (v6 < *(unsigned __int16 *)(a1 + 44));
  }

uint64_t GTTraceDump_writeUnusedDeviceResources(uint64_t a1, apr_pool_t *a2, apr_pool_t *p)
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(apr_pool_t **)(a1 + 56);
  uint64_t v8 = (char *)apr_palloc(p, 0x100000uLL);
  v28[0].pool = v7;
  uint64_t v9 = *(void *)(*(void *)(*find_entry(v6, v28, 8uLL, 0LL) + 32LL) + 8LL);
  snprintf(v8, 0x100000uLL, "unused-device-resources-0x%llx", v9);
  v20[0] = v9;
  v20[1] = v8;
  int v10 = *(_DWORD *)(a1 + 484);
  int v21 = 0x100000;
  int v22 = v10;
  uint64_t v11 = fbstream_open(a2, (uint64_t)v8, p);
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  data = v11;
  uint64_t v24 = a2;
  uint64_t v25 = 0LL;
  char v26 = *(_BYTE *)(a1 + 488);
  memset(v27, 0, sizeof(v27));
  do
  {
    uint64_t v14 = &v28[v12];
    unsigned int v15 = *(_OWORD **)(a1 + 8 * v13 + 64);
    __int128 v16 = v15[1];
    *(_OWORD *)&v14->pool = *v15;
    *(_OWORD *)&v14->nalloc = v16;
    LODWORD(v15) = *(_DWORD *)(a1 + 344 + 4 * v13);
    int elt_size = v28[v12].elt_size;
    *(int32x2_t *)&v14->uint64_t nelts = vdup_n_s32(v28[v12].nelts - (int)v15);
    v14->elts = &v28[v12].elts[elt_size * (uint64_t)(int)v15];
    v14->pool = 0LL;
    ++v13;
    ++v12;
  }

  while (v12 != 35);
  SnapshotResidencySets(*(void *)(a1 + 16), (uint64_t)&v29);
  DumpDeviceResources((uint64_t)v20, a1, v28, (uint64_t)p);
  uint64_t v18 = data;
  apr_pool_cleanup_kill(*(apr_pool_t **)data, data, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v18);
}

uint64_t GTTraceDump_writeDelta(uint64_t a1, apr_pool_t *a2, apr_pool_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 504);
  v67[0] = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(*(void *)(*find_entry(v6, v67, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v9 = (char *)apr_palloc(a3, 0x100000uLL);
  snprintf(v9, 0x100000uLL, "delta-device-resources-0x%llx", v8);
  v67[0] = v8;
  v67[1] = (uint64_t)v9;
  v67[2] = 0x100000LL;
  int v10 = fbstream_open(a2, (uint64_t)v9, a3);
  void v67[4] = 0LL;
  v67[5] = 0LL;
  v67[3] = (uint64_t)v10;
  char v68 = *(_BYTE *)(a1 + 488);
  memset(v69, 0, sizeof(v69));
  if (*(int *)(a1 + 432) >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 240) + 24LL) + 8 * v11);
      if (v12) {
        uint64_t v12 = *(void *)(v12 + 8);
      }
      uint64_t v70 = v12;
      uint64_t v13 = *(void *)(*(void *)(*find_entry(v6, &v70, 8uLL, 0LL) + 32LL) + 8LL);
      *((void *)v9 + 1) = 0LL;
      *((void *)v9 + 2) = 0LL;
      *((_DWORD *)v9 + 8) = 0;
      *((void *)v9 + 3) = 0LL;
      *((_DWORD *)v9 + 9) = 67;
      *(void *)uint64_t v9 = 0xFFFFC02C00000028LL;
      *((void *)v9 + 5) = v13;
      *(_DWORD *)uint64_t v9 = 48;
      fbstream_write((uint64_t)v10, (uint64_t)v9, 0x30uLL);
      ++v11;
    }

    while (v11 < *(int *)(a1 + 432));
  }

  if (*(int *)(a1 + 348) >= 1)
  {
    for (uint64_t i = 0LL; i < *(int *)(a1 + 348); ++i)
    {
      unsigned int v15 = *(void **)(*(void *)(*(void *)(a1 + 72) + 24LL) + 8 * i);
      uint64_t v70 = v15[1];
      entry = find_entry(v7, &v70, 8uLL, 0LL);
      if (*entry) {
        uint64_t v17 = *(void *)(*entry + 32LL);
      }
      else {
        uint64_t v17 = 0LL;
      }
      if (v15[24]) {
        continue;
      }
      uint64_t v18 = v15[13];
      if (v18)
      {
        if (*(_BYTE *)(v18 + 44)) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v17 == 0;
        }
        if (v19) {
          continue;
        }
      }

      else if (!v17)
      {
        continue;
      }

      int v20 = *(_BYTE *)(v17 + 47) & 1;
      uint64_t v70 = v15[1];
      int v21 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMTexture_downloads((uint64_t)v67, (uint64_t)v15, v17, v20, *(void *)(*(void *)(*v21 + 32LL) + 8LL));
    }
  }

  if (*(int *)(a1 + 364) >= 1)
  {
    uint64_t v22 = 0LL;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 104) + 24LL) + 8 * v22);
      uint64_t v70 = *(void *)(v23 + 8);
      uint64_t v24 = find_entry(v7, &v70, 8uLL, 0LL);
      if (*v24)
      {
        uint64_t v25 = *(void *)(*v24 + 32LL);
        if (v25)
        {
          uint64_t v70 = *(void *)(v23 + 8);
          char v26 = find_entry(v6, &v70, 8uLL, 0LL);
          WriteGTMTLSMIndirectCommandBuffer_restore((uint64_t)v67, v25, *(void *)(*(void *)(*v26 + 32LL) + 8LL));
        }
      }

      ++v22;
    }

    while (v22 < *(int *)(a1 + 364));
  }

  if (*(int *)(a1 + 396) >= 1)
  {
    uint64_t v27 = 0LL;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 168) + 24LL) + 8 * v27);
      if (v28) {
        uint64_t v29 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v29 = 0LL;
      }
      uint64_t v70 = v29;
      uint64_t v30 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMFence(v67, v28, *(void *)(*(void *)(*v30 + 32LL) + 8LL), v31);
      ++v27;
    }

    while (v27 < *(int *)(a1 + 396));
  }

  if (*(int *)(a1 + 400) >= 1)
  {
    uint64_t v32 = 0LL;
    do
    {
      uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 176) + 24LL) + 8 * v32);
      if (v33) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v34 = 0LL;
      }
      uint64_t v70 = v34;
      BOOL v35 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMEvent(v67, v33, *(void *)(*(void *)(*v35 + 32LL) + 8LL), v36);
      ++v32;
    }

    while (v32 < *(int *)(a1 + 400));
  }

  if (*(int *)(a1 + 408) >= 1)
  {
    uint64_t v37 = 0LL;
    do
    {
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 192) + 24LL) + 8 * v37);
      if (v38) {
        uint64_t v39 = *(void *)(v38 + 8);
      }
      else {
        uint64_t v39 = 0LL;
      }
      uint64_t v70 = v39;
      uint64_t v40 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMLateEvalEvent(v67, v38, *(void *)(*(void *)(*v40 + 32LL) + 8LL), v41);
      ++v37;
    }

    while (v37 < *(int *)(a1 + 408));
  }

  uint64_t v42 = apr_hash_make(a3);
  if (*(int *)(a1 + 404) >= 1)
  {
    unint64_t v43 = v42;
    uint64_t v44 = 0LL;
    do
    {
      uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 8 * v44);
      if (v45) {
        uint64_t v46 = *(void *)(v45 + 8);
      }
      else {
        uint64_t v46 = 0LL;
      }
      uint64_t v70 = v46;
      unint64_t v47 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMSharedEvent(v67, v43, v45, *(void *)(*(void *)(*v47 + 32LL) + 8LL));
      ++v44;
    }

    while (v44 < *(int *)(a1 + 404));
  }

  int v48 = *(_DWORD *)(a1 + 440);
  if (v48 >= 1)
  {
    for (uint64_t j = 0LL; j < v48; ++j)
    {
      uint64_t v50 = *(void *)(*(void *)(*(void *)(a1 + 256) + 24LL) + 8 * j);
      if (*(_BYTE *)(v50 + 60) == 1)
      {
        unint64_t v51 = v10;
        uint64_t v70 = *(void *)(v50 + 8);
        uint64_t v52 = *(void *)(*(void *)(*find_entry(v6, &v70, 8uLL, 0LL) + 32LL) + 8LL);
        uint64_t v53 = *(const char ***)(v50 + 48);
        uint64_t v70 = 512LL;
        uint64_t v54 = (const char *)StoreMTLRasterizationRateMapDescriptorUsingEncode(0LL, v53, (uint64_t)(v9 + 1048064), &v70);
        *((void *)v9 + 1) = 0LL;
        *((void *)v9 + 2) = 0LL;
        *((_DWORD *)v9 + 8) = 0;
        *((void *)v9 + 3) = 0LL;
        strcpy(v9 + 36, "CU");
        v9[39] = 0;
        *(void *)uint64_t v9 = 0xFFFFC3CD00000028LL;
        *((void *)v9 + 5) = v52;
        *(_DWORD *)uint64_t v9 = 48;
        AppendString(v54, (int *)v9);
        uint64_t v55 = *(unsigned int *)v9;
        unint64_t v56 = ((_DWORD)v55 + 3) & 0xFFFFFFFC;
        bzero(&v9[v55], v56 - v55);
        *(_DWORD *)uint64_t v9 = v56;
        if ((v9[33] & 0x10) != 0)
        {
          LODWORD(v57) = v56;
          unint64_t v58 = (unsigned int *)v9;
          int v10 = v51;
          do
          {
            unint64_t v58 = (unsigned int *)((char *)v58 + v57);
            uint64_t v57 = *v58;
            v56 += v57;
          }

          while ((*((_BYTE *)v58 + 33) & 0x20) == 0);
        }

        else
        {
          int v10 = v51;
        }

        fbstream_write((uint64_t)v10, (uint64_t)v9, v56);
        int v48 = *(_DWORD *)(a1 + 440);
      }
    }
  }

  if (*(int *)(a1 + 344) >= 1)
  {
    uint64_t v59 = 0LL;
    do
    {
      uint64_t v60 = *(void *)(*(void *)(*(void *)(a1 + 64) + 24LL) + 8 * v59);
      uint64_t v70 = *(void *)(v60 + 8);
      uint64_t v61 = find_entry(v7, &v70, 8uLL, 0LL);
      if (*v61) {
        uint64_t v62 = *(void *)(*v61 + 32LL);
      }
      else {
        uint64_t v62 = 0LL;
      }
      uint64_t v70 = *(void *)(v60 + 8);
      uint64_t v63 = find_entry(v6, &v70, 8uLL, 0LL);
      WriteGTMTLSMBuffer_restore((uint64_t)v67, v62, *(void *)(*(void *)(*v63 + 32LL) + 8LL));
      ++v59;
    }

    while (v59 < *(int *)(a1 + 344));
  }

  if (*(int *)(a1 + 480) >= 1)
  {
    uint64_t v64 = 0LL;
    do
      WriteGTMTLSMResidencySet( (uint64_t)v67,  (void *)a1,  *(void *)(*(void *)(*(void *)(a1 + 336) + 24LL) + 8 * v64++),  1);
    while (v64 < *(int *)(a1 + 480));
  }

  if (*(int *)(a1 + 432) >= 1)
  {
    uint64_t v65 = 0LL;
    do
      WriteGTMTLSMCommandQueue_residencySetsDelta( v67,  (void *)a1,  *(void *)(*(void *)(*(void *)(a1 + 240) + 24LL) + 8 * v65++));
    while (v65 < *(int *)(a1 + 432));
  }

  apr_pool_cleanup_kill(*v10, v10, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v10);
}

void WriteGTMTLSMCommandQueue_residencySetsDelta(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[2];
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v39 = v6;
  uint64_t v7 = *find_entry(v5, &v39, 8uLL, 0LL);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 32);
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  apr_pool_create_ex(&newpool, 0LL, 0LL, 0LL);
  int v10 = newpool;
  uint64_t v11 = (apr_pool_t **)apr_hash_make(newpool);
  GatherCommandQueueResidencySetsUpToIndexInternal(v11, v8, a2[3], a2[5], a2[6] + a2[5], 0);
  uint64_t v12 = (apr_pool_t **)apr_hash_make(v10);
  unint64_t v13 = a2[6] + a2[5];
  GatherCommandQueueResidencySetsUpToIndexInternal(v12, v8, a2[3], v13, v13, 0);
  uint64_t v14 = apr_array_make(v10, 16, 8);
  unsigned int v15 = apr_array_make(v10, 16, 8);
  FillArrayFromHashDifference(v14, v11, (uint64_t)v12);
  __int128 v16 = FillArrayFromHashDifference(v15, v12, (uint64_t)v11);
  if (v14->nelts >= 1)
  {
    uint64_t v39 = v9;
    __chkstk_darwin(v16, v17);
    BOOL v19 = (uint64_t *)((char *)&v38 - ((v18 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v5, v19, (uint64_t *)v14->elts, v20);
    uint64_t v40 = v19;
    uint64_t nelts = v14->nelts;
    DYTraceEncode_MTLCommandQueue_addResidencySets_count((uint64_t)&v39, a1[1], *((unsigned int *)a1 + 4), 0LL, 0LL);
    int v21 = (unsigned int *)a1[1];
    uint64_t v22 = *v21;
    if ((*((_BYTE *)v21 + 33) & 0x10) != 0)
    {
      uint64_t v24 = (unsigned int *)a1[1];
      unint64_t v23 = *v21;
      do
      {
        uint64_t v24 = (unsigned int *)((char *)v24 + v22);
        uint64_t v22 = *v24;
        v23 += v22;
      }

      while ((*((_BYTE *)v24 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v23 = *v21;
    }

    fbstream_write(a1[3], (uint64_t)v21, v23);
  }

  if (v15->nelts >= 1)
  {
    uint64_t v39 = v9;
    __chkstk_darwin(v16, v17);
    char v26 = (uint64_t *)((char *)&v38 - ((v25 + 15) & 0xFFFFFFFF0LL));
    name_array_10933(v5, v26, (uint64_t *)v15->elts, v27);
    uint64_t v40 = v26;
    uint64_t nelts = v15->nelts;
    DYTraceEncode_MTLCommandQueue_removeResidencySets_count((uint64_t)&v39, a1[1], *((unsigned int *)a1 + 4), 0LL, 0LL);
    uint64_t v28 = (unsigned int *)a1[1];
    uint64_t v29 = *v28;
    if ((*((_BYTE *)v28 + 33) & 0x10) != 0)
    {
      uint64_t v31 = (unsigned int *)a1[1];
      unint64_t v30 = *v28;
      do
      {
        uint64_t v31 = (unsigned int *)((char *)v31 + v29);
        uint64_t v29 = *v31;
        v30 += v29;
      }

      while ((*((_BYTE *)v31 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v30 = *v28;
    }

    fbstream_write(a1[3], (uint64_t)v28, v30);
  }

  apr_pool_destroy(v10);
  uint64_t v32 = *a1;
  uint64_t v33 = a1[1];
  *(void *)(v33 + 16) = 0LL;
  *(void *)(v33 + 24) = 0LL;
  *(void *)(v33 + 8) = 0LL;
  *(_DWORD *)(v33 + 32) = 70;
  *(_DWORD *)(v33 + 36) = 67;
  *(void *)uint64_t v33 = 0xFFFFD00800000028LL;
  *(void *)(v33 + 40) = v32;
  *(_DWORD *)uint64_t v33 = 48;
  uint64_t v34 = (unsigned int *)a1[1];
  uint64_t v35 = *v34;
  if ((*((_BYTE *)v34 + 33) & 0x10) != 0)
  {
    uint64_t v37 = (unsigned int *)a1[1];
    unint64_t v36 = *v34;
    do
    {
      uint64_t v37 = (unsigned int *)((char *)v37 + v35);
      uint64_t v35 = *v37;
      v36 += v35;
    }

    while ((*((_BYTE *)v37 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v36 = *v34;
  }

  fbstream_write(a1[3], (uint64_t)v34, v36);
}

uint64_t GTTraceDump_writeStartup0(uint64_t a1, apr_pool_t *a2, apr_pool_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)__s = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)__s;
  uint64_t v8 = *(void *)(*(void *)(*find_entry(v6, __s, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v9 = (unsigned int *)apr_palloc(a3, 0x100000uLL);
  int v10 = fbstream_open(a2, (uint64_t)"startup-0-platform", a3);
  uint64_t v11 = GTMTLSMContext_getObject(*(uint64_t **)(a1 + 568), v7, *(void *)(a1 + 40))[5];
  *(void *)__s = 512LL;
  uint64_t v12 = (const char *)StoreMTLDeviceDescriptorUsingEncode((uint64_t)a2, v11, (uint64_t)(v9 + 262016), __s);
  *((void *)v9 + 1) = 0LL;
  *((void *)v9 + 2) = 0LL;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0x554300000000LL;
  *(void *)uint64_t v9 = 0xFFFFD80100000028LL;
  *((void *)v9 + 5) = v8;
  *uint64_t v9 = 48;
  AppendString(v12, (int *)v9);
  uint64_t v13 = *v9;
  unint64_t v14 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v13, v14 - v13);
  *uint64_t v9 = v14;
  unsigned int v15 = v9[8];
  v9[8] = v15 | 4;
  if ((v15 & 0x1000) != 0)
  {
    LODWORD(v16) = v14;
    uint64_t v17 = v9;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v16);
      uint64_t v16 = *v17;
      v14 += v16;
    }

    while ((*((_BYTE *)v17 + 33) & 0x20) == 0);
  }

  fbstream_write((uint64_t)v10, (uint64_t)v9, v14);
  uint64_t v18 = apr_array_make(a3, 128, 8);
  v18->size_t nelts = 0;
  uint64_t v19 = *(void *)(*(void *)(a1 + 568) + 16LL);
  int v20 = *(_DWORD *)(v19 + 12);
  if (v20 >= 1)
  {
    uint64_t v21 = 0LL;
    while (1)
    {
      uint64_t v22 = *(void *)(*(void *)(v19 + 24) + 8 * v21);
      uint64_t v23 = *(void *)(v22 + 104);
      if (!v23) {
        break;
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (v24) {
        goto LABEL_8;
      }
LABEL_9:
      if (++v21 >= v20)
      {
        size_t nelts = v18->nelts;
        if ((int)nelts > 0)
        {
          qsort(v18->elts, nelts, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
          v117[0] = v8;
          v117[1] = 0LL;
          elts = (uint64_t *)v18->elts;
          unint64_t v27 = v18->elt_size * (uint64_t)v18->nelts;
          HashBytes(elts, v27, __s);
          GTMTLCaptureState_storePointer((uint64_t)a2, __s, elts, (const void *)v27);
          __int128 v120 = v125;
          __int128 v121 = v126;
          char v122 = v127;
          __int128 v118 = *(_OWORD *)__s;
          __int128 v119 = v124;
          uint64_t v28 = v18->nelts;
          v117[2] = &v118;
          v117[3] = v28;
          DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( (uint64_t)v117,  v9,  0x100000uLL,  0LL,  0LL);
          uint64_t v29 = *v9;
          if ((*((_BYTE *)v9 + 33) & 0x10) != 0)
          {
            uint64_t v31 = v9;
            unint64_t v30 = *v9;
            do
            {
              uint64_t v31 = (unsigned int *)((char *)v31 + v29);
              uint64_t v29 = *v31;
              v30 += v29;
            }

            while ((*((_BYTE *)v31 + 33) & 0x20) == 0);
          }

          else
          {
            unint64_t v30 = *v9;
          }

          fbstream_write((uint64_t)v10, (uint64_t)v9, v30);
        }

        goto LABEL_19;
      }
    }

    uint64_t v24 = *(void *)(v22 + 176);
    if (!v24) {
      goto LABEL_9;
    }
LABEL_8:
    *(void *)apr_array_push(v18) = v24;
    int v20 = *(_DWORD *)(v19 + 12);
    goto LABEL_9;
  }

uint64_t ResourceIndicesCompare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void WriteGTMTLSMLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  Object = GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), *(void *)(a3 + 40), *(void *)(a2 + 40));
  uint64_t v76 = v7;
  uint64_t v79 = *(void *)(a3 + 40);
  uint64_t v77 = *(const char **)(*(void *)(*find_entry(v6, &v79, 8uLL, 0LL) + 32LL) + 8LL);
  uint64_t v9 = Object[5];
  uint64_t v10 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL;
  uint64_t v79 = 512LL;
  uint64_t v78 = StoreMTLDeviceDescriptorUsingEncode(*(void *)(a1 + 32), v9, v10, &v79);
  DYTraceEncode_CAMetalLayer_setDevice((uint64_t)&v76, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0LL, 0LL);
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v12 = *v11;
  if ((*((_BYTE *)v11 + 33) & 0x10) != 0)
  {
    unint64_t v14 = *(unsigned int **)(a1 + 8);
    unint64_t v13 = *v11;
    do
    {
      unint64_t v14 = (unsigned int *)((char *)v14 + v12);
      uint64_t v12 = *v14;
      v13 += v12;
    }

    while ((*((_BYTE *)v14 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v13 = *v11;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v11, v13);
  int v15 = *(unsigned __int8 *)(a3 + 274);
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(v16 + 16) = 0LL;
  *(void *)(v16 + 24) = 0LL;
  *(void *)(v16 + 8) = 0LL;
  *(void *)(v16 + 32) = 0x69754300000000LL;
  *(void *)uint64_t v16 = 0xFFFFE40800000028LL;
  *(void *)(v16 + 40) = v7;
  *(_DWORD *)(v16 + 48) = v15;
  *(_DWORD *)uint64_t v16 = 52;
  uint64_t v17 = *(unsigned int **)(a1 + 8);
  uint64_t v18 = *v17;
  if ((*((_BYTE *)v17 + 33) & 0x10) != 0)
  {
    int v20 = *(unsigned int **)(a1 + 8);
    unint64_t v19 = *v17;
    do
    {
      int v20 = (unsigned int *)((char *)v20 + v18);
      uint64_t v18 = *v20;
      v19 += v18;
    }

    while ((*((_BYTE *)v20 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v19 = *v17;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v17, v19);
  uint64_t v21 = *(unsigned __int16 *)(a3 + 272);
  uint64_t v22 = *(void **)(a1 + 8);
  void v22[2] = 0LL;
  v22[3] = 0LL;
  v22[1] = 0LL;
  v22[4] = 0x6C754300000000LL;
  *uint64_t v22 = 0xFFFFE40300000028LL;
  v22[5] = v7;
  v22[6] = v21;
  *(_DWORD *)uint64_t v22 = 56;
  uint64_t v23 = *(unsigned int **)(a1 + 8);
  uint64_t v24 = *v23;
  if ((*((_BYTE *)v23 + 33) & 0x10) != 0)
  {
    char v26 = *(unsigned int **)(a1 + 8);
    unint64_t v25 = *v23;
    do
    {
      char v26 = (unsigned int *)((char *)v26 + v24);
      uint64_t v24 = *v26;
      v25 += v24;
    }

    while ((*((_BYTE *)v26 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v25 = *v23;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v23, v25);
  __int128 v27 = *(_OWORD *)(a3 + 176);
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)(v28 + 8) = 0LL;
  *(void *)(v28 + 16) = 0LL;
  *(void *)(v28 + 24) = 0LL;
  *(void *)uint64_t v28 = 0xFFFFE40400000024LL;
  *(_DWORD *)(v28 + 32) = 0;
  strcpy((char *)(v28 + 36), "C@2d");
  *(_WORD *)(v28 + 41) = 0;
  *(_BYTE *)(v28 + 43) = 0;
  *(void *)(v28 + 44) = v7;
  *(_OWORD *)(v28 + 52) = v27;
  *(_DWORD *)uint64_t v28 = 68;
  uint64_t v29 = *(unsigned int **)(a1 + 8);
  uint64_t v30 = *v29;
  if ((*((_BYTE *)v29 + 33) & 0x10) != 0)
  {
    uint64_t v32 = *(unsigned int **)(a1 + 8);
    unint64_t v31 = *v29;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v30);
      uint64_t v30 = *v32;
      v31 += v30;
    }

    while ((*((_BYTE *)v32 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v31 = *v29;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v29, v31);
  if (!*(_DWORD *)(a2 + 484))
  {
    int v33 = *(unsigned __int8 *)(a3 + 275);
    uint64_t v34 = *(void *)(a1 + 8);
    *(void *)(v34 + 16) = 0LL;
    *(void *)(v34 + 24) = 0LL;
    *(void *)(v34 + 8) = 0LL;
    *(void *)(v34 + 32) = 0x69754300000000LL;
    *(void *)uint64_t v34 = 0xFFFFE40E00000028LL;
    *(void *)(v34 + 40) = v7;
    *(_DWORD *)(v34 + 48) = v33;
    *(_DWORD *)uint64_t v34 = 52;
    uint64_t v35 = *(unsigned int **)(a1 + 8);
    uint64_t v36 = *v35;
    if ((*((_BYTE *)v35 + 33) & 0x10) != 0)
    {
      uint64_t v38 = *(unsigned int **)(a1 + 8);
      unint64_t v37 = *v35;
      do
      {
        uint64_t v38 = (unsigned int *)((char *)v38 + v36);
        uint64_t v36 = *v38;
        v37 += v36;
      }

      while ((*((_BYTE *)v38 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v37 = *v35;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v37);
  }

  __int128 v39 = *(_OWORD *)(a3 + 216);
  __int128 v40 = *(_OWORD *)(a3 + 232);
  uint64_t v41 = *(void *)(a3 + 208);
  uint64_t v42 = *(void *)(a1 + 8);
  *(void *)(v42 + 8) = 0LL;
  *(void *)(v42 + 16) = 0LL;
  *(void *)(v42 + 24) = 0LL;
  *(void *)uint64_t v42 = 0xFFFFE40600000024LL;
  *(_DWORD *)(v42 + 32) = 0;
  *(void *)(v42 + 36) = 0x6464344043LL;
  *(void *)(v42 + 44) = v7;
  *(_OWORD *)(v42 + 52) = v39;
  *(_OWORD *)(v42 + 68) = v40;
  *(void *)(v42 + 84) = v41;
  *(_DWORD *)uint64_t v42 = 92;
  unint64_t v43 = *(unsigned int **)(a1 + 8);
  uint64_t v44 = *v43;
  if ((*((_BYTE *)v43 + 33) & 0x10) != 0)
  {
    int v46 = *(unsigned int **)(a1 + 8);
    unint64_t v45 = *v43;
    do
    {
      int v46 = (unsigned int *)((char *)v46 + v44);
      uint64_t v44 = *v46;
      v45 += v44;
    }

    while ((*((_BYTE *)v46 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v45 = *v43;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v43, v45);
  __int128 v47 = *(_OWORD *)(a3 + 48);
  __int128 v48 = *(_OWORD *)(a3 + 64);
  __int128 v49 = *(_OWORD *)(a3 + 80);
  __int128 v50 = *(_OWORD *)(a3 + 96);
  __int128 v51 = *(_OWORD *)(a3 + 112);
  __int128 v52 = *(_OWORD *)(a3 + 128);
  __int128 v53 = *(_OWORD *)(a3 + 144);
  __int128 v54 = *(_OWORD *)(a3 + 160);
  __int128 v55 = *(_OWORD *)(a3 + 248);
  uint64_t v56 = *(void *)(a1 + 8);
  *(void *)(v56 + 8) = 0LL;
  *(void *)(v56 + 16) = 0LL;
  *(void *)(v56 + 24) = 0LL;
  *(_DWORD *)(v56 + 32) = 0;
  *(void *)(v56 + 36) = 0x64646436314070LL;
  *(void *)uint64_t v56 = 0xFFFFE0090000002CLL;
  *(void *)(v56 + 44) = v7;
  *(_OWORD *)(v56 + 52) = v47;
  *(_OWORD *)(v56 + 68) = v48;
  *(_OWORD *)(v56 + 84) = v49;
  *(_OWORD *)(v56 + 100) = v50;
  *(_OWORD *)(v56 + 116) = v51;
  *(_OWORD *)(v56 + 132) = v52;
  *(_OWORD *)(v56 + 148) = v53;
  *(_OWORD *)(v56 + 164) = v54;
  *(_OWORD *)(v56 + 180) = v55;
  *(_DWORD *)uint64_t v56 = 196;
  uint64_t v57 = *(unsigned int **)(a1 + 8);
  unsigned int v58 = v57[8];
  v57[8] = v58 | 0x10004;
  uint64_t v59 = *v57;
  if ((v58 & 0x1000) != 0)
  {
    unint64_t v61 = v57;
    unint64_t v60 = *v57;
    do
    {
      unint64_t v61 = (unsigned int *)((char *)v61 + v59);
      uint64_t v59 = *v61;
      v60 += v59;
    }

    while ((*((_BYTE *)v61 + 33) & 0x20) == 0);
  }

  else
  {
    unint64_t v60 = *v57;
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v57, v60);
  __int128 v62 = *(_OWORD *)(a3 + 192);
  uint64_t v63 = *(void *)(a1 + 8);
  *(void *)(v63 + 8) = 0LL;
  *(void *)(v63 + 16) = 0LL;
  *(void *)(v63 + 24) = 0LL;
  *(void *)uint64_t v63 = 0xFFFFE00B00000024LL;
  *(_DWORD *)(v63 + 32) = 0;
  strcpy((char *)(v63 + 36), "p@2d");
  *(_WORD *)(v63 + 41) = 0;
  *(_BYTE *)(v63 + 43) = 0;
  *(void *)(v63 + 44) = v7;
  *(_OWORD *)(v63 + 52) = v62;
  *(_DWORD *)uint64_t v63 = 68;
  int v64 = *(unsigned int **)(a1 + 8);
  LODWORD(v63) = v64[8];
  v64[8] = v63 | 0x10004;
  unint64_t v65 = *v64;
  if ((v63 & 0x1000) != 0)
  {
    uint64_t v66 = *v64;
    uint64_t v67 = v64;
    do
    {
      uint64_t v67 = (unsigned int *)((char *)v67 + v66);
      uint64_t v66 = *v67;
      v65 += v66;
    }

    while ((*((_BYTE *)v67 + 33) & 0x20) == 0);
  }

  fbstream_write(*(void *)(a1 + 24), (uint64_t)v64, v65);
  size_t v68 = *(const char **)(a3 + 264);
  if (v68)
  {
    uint64_t v76 = v7;
    uint64_t v77 = v68;
    GTTrace_storePointer( a1,  -7153,  (uint64_t)&v76,  (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512LL),  512LL,  v6);
    uint64_t v69 = *(unsigned int **)(a1 + 8);
    *((void *)v69 + 1) = 0LL;
    *((void *)v69 + 2) = 0LL;
    *((void *)v69 + 3) = 0LL;
    *((void *)v69 + 4) = 0x554300000000LL;
    *(void *)uint64_t v69 = 0xFFFFE40F00000028LL;
    *((void *)v69 + 5) = v76;
    *uint64_t v69 = 48;
    AppendString(v77, (int *)v69);
    uint64_t v70 = *v69;
    uint64_t v71 = ((_DWORD)v70 + 3) & 0xFFFFFFFC;
    bzero((char *)v69 + v70, v71 - v70);
    *uint64_t v69 = v71;
    uint64_t v72 = *(unsigned int **)(a1 + 8);
    uint64_t v73 = *v72;
    if ((*((_BYTE *)v72 + 33) & 0x10) != 0)
    {
      uint64_t v75 = *(unsigned int **)(a1 + 8);
      unint64_t v74 = *v72;
      do
      {
        uint64_t v75 = (unsigned int *)((char *)v75 + v73);
        uint64_t v73 = *v75;
        v74 += v73;
      }

      while ((*((_BYTE *)v75 + 33) & 0x20) == 0);
    }

    else
    {
      unint64_t v74 = *v72;
    }

    fbstream_write(*(void *)(a1 + 24), (uint64_t)v72, v74);
  }

void DYTraceEncode_CALayer_setAnchorPoint( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFE00B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "p@2d");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CALayer_setTransform(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    uint64_t v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x64646436314070LL;
  *(void *)a2 = 0xFFFFE0090000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  __int128 v13 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 84) = v13;
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  __int128 v14 = *(_OWORD *)(a1 + 72);
  __int128 v15 = *(_OWORD *)(a1 + 88);
  __int128 v16 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 148) = v16;
  *(_OWORD *)(a2 + 132) = v15;
  *(_OWORD *)(a2 + 116) = v14;
  *(_DWORD *)a2 = 180;
  *(void *)(a2 + 180) = *(void *)(a1 + 136);
  *(_DWORD *)a2 = 188;
  *(void *)(a2 + 188) = *(void *)(a1 + 144);
  unint64_t v17 = 196LL;
  *(_DWORD *)a2 = 196;
  if (__src)
  {
    int v18 = 8 * *__src;
    memcpy((void *)(a2 + 196), __src, v18 + 8);
    uint64_t v19 = (v18 + 204);
    unint64_t v17 = (v18 + 207) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      uint64_t v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_CAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    uint64_t v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFE40900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@4dd@4dull");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  __int128 v11 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 96;
  __int128 v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 112) = v12;
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = *(void *)(a1 + 80);
  *(void *)(a2 + 136) = *(int *)(a1 + 96);
  unint64_t v13 = 144LL;
  *(_DWORD *)a2 = 144;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 144), __src, v14 + 8);
    uint64_t v15 = (v14 + 152);
    unint64_t v13 = (v14 + 155) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_EnterStateGroup(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v9;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0xFFFFD00700000024LL;
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0x7775534300000046LL;
  *(unsigned int *)((char *)a2 + 39) = 7828855;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v10 = *a2;
  uint64_t v11 = ((_DWORD)v10 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v10, v11 - v10);
  *a2 = v11;
  *(void *)((char *)a2 + v11) = *(void *)(a1 + 16);
  unsigned int v12 = *a2 + 8;
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a5)
  {
    if (v13 > a3)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

const char *AppendString(const char *result, int *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    size_t v4 = strlen(result);
    int v5 = v4 + 1;
    uint64_t result = (const char *)memcpy((char *)a2 + *a2, v3, v4 + 1);
    int v6 = *a2 + v5;
  }

  else
  {
    *(void *)((char *)a2 + *a2) = 0xFFFFFFFFLL;
    int v6 = *a2 + 8;
  }

  *a2 = v6;
  return result;
}

void DYTraceEncode_ExitStateGroup(void *a1, void *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    unint64_t v13 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v11);
  }

  a2[1] = 0LL;
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[4] = 0x4300000046LL;
  *a2 = 0xFFFFD00800000028LL;
  a2[5] = *a1;
  *(_DWORD *)a2 = 48;
  if (a3 <= 0x2F)
  {
    if (a5)
    {
      int v10 = *a5;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v11);
    }
  }

void DYTraceEncode_InternalData(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    int v32 = v9;
    int v33 = 500;
    uint64_t v34 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v32);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD01000000024LL;
  a2[8] = 198;
  int v10 = *(_DWORD *)(a1 + 8);
  switch(v10)
  {
    case 101:
      uint64_t v20 = *(void *)(a1 + 40);
      if (v20)
      {
        *(void *)(a2 + 9) = 0x536C536C756943LL;
        uint64_t v21 = 44LL;
      }

      else
      {
        strcpy((char *)a2 + 36, "CiulSl");
        uint64_t v21 = 43LL;
      }

      bzero((char *)a2 + v21, 44 - v21);
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      uint64_t v29 = *a2;
      uint64_t v30 = ((_DWORD)v29 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v29, v30 - v29);
      *a2 = v30;
      *(void *)((char *)a2 + v30) = *(void *)(a1 + 24);
      unsigned int v31 = *a2 + 8;
      *a2 = v31;
      if (v20)
      {
        AppendString(*(const char **)(a1 + 40), (int *)a2);
        unsigned int v31 = *a2;
      }

      a1 = (v31 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v31, a1 - v31);
      break;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_10;
    case 107:
      strcpy((char *)a2 + 36, "Ciulul");
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      *((void *)a2 + 8) = *(void *)(a1 + 24);
      LODWORD(a1) = 72;
      break;
    case 108:
      strcpy((char *)a2 + 36, "CitS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      goto LABEL_24;
    case 109:
    case 120:
      strcpy((char *)a2 + 36, "CiSululb");
      *(_WORD *)((char *)a2 + 45) = 0;
      *((_BYTE *)a2 + 47) = 0;
      *a2 = 48;
      *((void *)a2 + 6) = *(void *)a1;
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 8);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      uint64_t v13 = *a2;
      uint64_t v14 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v13, v14 - v13);
      *a2 = v14;
      *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
      unsigned int v15 = *a2 + 8;
      *a2 = v15;
      *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
      unsigned int v16 = *a2 + 8;
      *a2 = v16;
      *((_BYTE *)a2 + v16) = *(_BYTE *)(a1 + 40);
      uint64_t v17 = *a2 + 1;
      a1 = (*a2 & 0xFFFFFFFC) + 4;
      __int128 v18 = (char *)a2 + v17;
      size_t v19 = a1 - v17;
      goto LABEL_26;
    case 110:
      *(void *)(a2 + 9) = 0x696C756943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      a2[16] = *(_DWORD *)(a1 + 24);
      LODWORD(a1) = 68;
      break;
    case 111:
      int v11 = 5597507;
      goto LABEL_6;
    case 116:
      *(void *)(a2 + 9) = 0x6C75556943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v22 = *a2;
      uint64_t v23 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v22, v23 - v22);
      *a2 = v23;
      *(void *)((char *)a2 + v23) = *(void *)(a1 + 24);
      LODWORD(a1) = *a2 + 8;
      break;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      int v11 = 5466435;
LABEL_6:
      a2[9] = v11;
      *a2 = 40;
      *((void *)a2 + 5) = *(void *)a1;
      *a2 = 48;
      a2[12] = *(_DWORD *)(a1 + 8);
      *a2 = 52;
      int v12 = *(const char **)(a1 + 16);
      goto LABEL_25;
    case 118:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v24 = *(void *)(a1 + 16);
      goto LABEL_21;
    case 119:
      *(void *)(a2 + 9) = 0x53535369756943LL;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 40);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      AppendString(*(const char **)(a1 + 24), (int *)a2);
      int v12 = *(const char **)(a1 + 32);
      goto LABEL_25;
    case 125:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v24 = *(void *)(a1 + 24);
LABEL_21:
      *((void *)a2 + 7) = v24;
      LODWORD(a1) = 64;
      break;
    case 126:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      goto LABEL_24;
    case 135:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v25 = *a2;
      uint64_t v26 = ((_DWORD)v25 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v25, v26 - v25);
      *a2 = v26;
LABEL_24:
      int v12 = *(const char **)(a1 + 24);
LABEL_25:
      AppendString(v12, (int *)a2);
      uint64_t v27 = *a2;
      a1 = ((_DWORD)v27 + 3) & 0xFFFFFFFC;
      __int128 v18 = (char *)a2 + v27;
      size_t v19 = a1 - v27;
LABEL_26:
      bzero(v18, v19);
      break;
    default:
      if (v10 == 7)
      {
        strcpy((char *)a2 + 36, "Ciui");
        *(_WORD *)((char *)a2 + 41) = 0;
        *((_BYTE *)a2 + 43) = 0;
        *a2 = 44;
        *(void *)(a2 + 11) = *(void *)a1;
        *a2 = 52;
        a2[13] = *(_DWORD *)(a1 + 8);
        *a2 = 56;
        a2[14] = *(_DWORD *)(a1 + 16);
        LODWORD(a1) = 60;
      }

      else
      {
LABEL_10:
        a2[9] = 26947;
        *a2 = 40;
        *((void *)a2 + 5) = *(void *)a1;
        *a2 = 48;
        a2[12] = *(_DWORD *)(a1 + 8);
        LODWORD(a1) = 52;
      }

      break;
  }

  *a2 = a1;
  if (a5)
  {
    if (a1 > a3)
    {
      int v28 = *a5;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      int v32 = v28;
      int v33 = 500;
      uint64_t v34 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v32);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_allocatedSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure_instance( uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD83200000024LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulU<b>ul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a5)
  {
    if (v16 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLBuffer_allocatedSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD81100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_newTextureWithDescriptor_offset_bytesPerRow( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    uint64_t v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC01000000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      uint64_t v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLBuffer_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC01100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_indirectArgumentBufferData( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD80B00000024LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    strcpy((char *)a2 + 36, "CUUUU");
    uint64_t v13 = 42LL;
  }

  else
  {
    strcpy((char *)a2 + 36, "CUUU");
    uint64_t v13 = 41LL;
  }

  bzero((char *)a2 + v13, 44 - v13);
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  if (v12) {
    AppendString(*(const char **)(a1 + 32), (int *)a2);
  }
  uint64_t v14 = *a2;
  unint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandQueue_continueCommandBuffer_retainReferences( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32781;
  }
  else {
    int v11 = 32773;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911043;
  *(void *)a2 = 0xFFFFCF0000000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = 116;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 8);
  unint64_t v12 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_continueCommandBuffer_retainReferences( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32781;
  }
  else {
    int v11 = 32773;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911043;
  *(void *)a2 = 0xFFFFCF0100000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = 116;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 8);
  unint64_t v12 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputePipelineState_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC18B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputePipelineState_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newArgumentEncoderWithArguments( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithLength_options( void *a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC04600000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  uint64_t v12 = a1[4];
  if (v12)
  {
    strcpy((char *)(a2 + 36), "Culult");
    uint64_t v13 = 43LL;
  }

  else
  {
    strcpy((char *)(a2 + 36), "Culul");
    uint64_t v13 = 42LL;
  }

  bzero((void *)(a2 + v13), 44 - v13);
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  unsigned int v14 = 68;
  *(_DWORD *)a2 = 68;
  if (v12)
  {
    *(void *)(a2 + 68) = a1[4];
    unsigned int v14 = 76;
  }

  *(_WORD *)(a2 + v14) = 116;
  uint64_t v15 = ((_BYTE)v14 + 5) & 0x58;
  bzero((void *)(a2 + (v14 | 2)), v15 - (v14 | 2));
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = a1[1];
  unint64_t v16 = (v15 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithBytes_length_options( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    __int128 v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC04700000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    strcpy((char *)a2 + 36, "CU<b>ulult");
    uint64_t v13 = 47LL;
  }

  else
  {
    strcpy((char *)a2 + 36, "CU<b>ulul");
    uint64_t v13 = 46LL;
  }

  bzero((char *)a2 + v13, 48 - v13);
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  if (v12)
  {
    *(void *)((char *)a2 + v17) = *(void *)(a1 + 40);
    unsigned int v17 = *a2 + 8;
    *a2 = v17;
  }

  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      __int128 v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    int v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC0B900000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0LL;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      int v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_options_reflection_error( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC05600000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctultt");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(void *)(a2 + 68) = 0LL;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[5];
  *(_DWORD *)(a2 + 84) = 116;
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[1];
  unint64_t v12 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11B00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC19F00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    __int128 v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC21900000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%llutU<b>t", *(void *)(a1 + 24)) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 16), 8LL * *(void *)(a1 + 24));
  *a2 += 8 * *(_DWORD *)(a1 + 24);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 40);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      __int128 v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithFile_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC04D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithSource_options_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    __int128 v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }

  *(void *)(a2 + 3) = 0LL;
  *(void *)(a2 + 1) = 0LL;
  *(void *)(a2 + 5) = 0LL;
  *a2 = 36;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[7] = 0;
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = 0x74553E623C5543LL;
  if (!v12) {
    uint64_t v13 = 0x74743E623C5543LL;
  }
  *(void *)(a2 + 9) = v13;
  *(void *)a2 = 0xFFFFC04F0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  if (v12)
  {
    AppendString(*(const char **)(a1 + 24), (int *)a2);
    uint64_t v14 = *a2;
    uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v15 - v14);
  }

  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v17 - v16);
    *a2 = v17;
    *(void *)((char *)a2 + v17) = 0LL;
    uint64_t v15 = *a2 + 8;
  }

  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }

  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      __int128 v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithSource_options_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    __int128 v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }

  *(void *)(a2 + 3) = 0LL;
  *(void *)(a2 + 1) = 0LL;
  *(void *)(a2 + 5) = 0LL;
  *a2 = 36;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[7] = 0;
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = 0x74553E623C5543LL;
  if (!v12) {
    uint64_t v13 = 0x74743E623C5543LL;
  }
  *(void *)(a2 + 9) = v13;
  *(void *)a2 = 0xFFFFC0500000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  if (v12)
  {
    AppendString(*(const char **)(a1 + 24), (int *)a2);
    uint64_t v14 = *a2;
    uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v15 - v14);
  }

  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v17 - v16);
    *a2 = v17;
    *(void *)((char *)a2 + v17) = 0LL;
    uint64_t v15 = *a2 + 8;
  }

  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }

  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      __int128 v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }

void DYTraceEncode_MTLDevice_newPipelineLibraryWithFilePath_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    uint64_t v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC13500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      uint64_t v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC05200000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0LL;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12600000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0LL;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newSharedTextureWithHandle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    int v5 = *a5;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    v6[0] = v5;
    v6[1] = 500;
    uint64_t v7 = "0";
    GTError_addError(a5, (uint64_t)v6);
  }

void DYTraceEncode_MTLDevice_newTextureWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC04A00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12)
  {
    a2[9] = 7624003;
    uint64_t v13 = 40LL;
  }

  else
  {
    strcpy((char *)a2 + 36, "CU");
    uint64_t v13 = 39LL;
  }

  bzero((char *)a2 + v13, 40 - v13);
  *a2 = 40;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (v12)
  {
    *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
    uint64_t v15 = *a2 + 8;
    *a2 = v15;
  }

  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_setCapturingCommandQueueAddress( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD80A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14D00000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cult");
  *(_DWORD *)a2 = 41;
  *(void *)(a2 + 41) = *a1;
  *(_DWORD *)a2 = 49;
  *(void *)(a2 + 49) = a1[2];
  *(void *)(a2 + 57) = 0LL;
  *(_WORD *)(a2 + 65) = 116;
  *(_BYTE *)(a2 + 67) = 0;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC10D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_allocatedSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD81900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_restoreData( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD81500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLIndirectCommandBuffer_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1D000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC23200000024LL;
  a2[8] = 8 * (a4 != 0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    *(void *)(a2 + 9) = 0x3E623C556C7543LL;
  }

  else
  {
    strcpy((char *)a2 + 36, "Cult");
    *(_WORD *)((char *)a2 + 41) = 0;
    *((_BYTE *)a2 + 43) = 0;
  }

  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  if (v11)
  {
    AppendString(*(const char **)(a1 + 16), (int *)a2);
    uint64_t v12 = *a2;
    unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v12, v13 - v12);
  }

  else
  {
    *(void *)(a2 + 15) = 0LL;
    LODWORD(v13) = 68;
  }

  *a2 = v13;
  unint64_t v13 = v13;
  if (a4)
  {
    int v14 = (char *)a2 + v13;
    int v15 = 8 * *a4 + 8;
    memcpy(v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v13 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v13 - v16);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v18 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v18;
    int v20 = 500;
    __int128 v21 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11500000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC34100000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CUttt");
  *a2 = 42;
  *(void *)((char *)a2 + 42) = *(void *)a1;
  *a2 = 50;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 8);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC28400000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSultt");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0LL;
  uint64_t v15 = (*a2 + 11) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 8, v15 - (*a2 + 8));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC28600000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSultt");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0LL;
  uint64_t v15 = (*a2 + 11) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 8, v15 - (*a2 + 8));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setScissorRect( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@4l");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v12 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v13 + 8);
    uint64_t v14 = (v13 + 92);
    unint64_t v12 = (v13 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setScissorRects_count( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC13400000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setViewports_count( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC13300000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    __int128 v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC09300000024LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[13] = 108;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)"CU<b>ulul@6ululul";
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  uint64_t v15 = *a2 + 8;
  *a2 = v15;
  int v16 = (_OWORD *)((char *)a2 + v15);
  __int128 v17 = *(_OWORD *)(a1 + 32);
  __int128 v18 = *(_OWORD *)(a1 + 64);
  v16[1] = *(_OWORD *)(a1 + 48);
  v16[2] = v18;
  *int v16 = v17;
  LODWORD(v16) = *a2 + 48;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 80);
  LODWORD(v16) = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 88);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      __int128 v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC09400000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "C@6ulululU<b>ululul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  __int128 v11 = *(_OWORD *)(a1 + 40);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)a2 + 4) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)a2 + 5) = v12;
  *((_OWORD *)a2 + 6) = v11;
  *a2 = 112;
  *((void *)a2 + 14) = *(void *)(a1 + 56);
  *a2 = 120;
  *((void *)a2 + 15) = *(void *)(a1 + 64);
  *a2 = 128;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v13 = *a2;
  uint64_t v14 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v13, v14 - v13);
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 80);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 88);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 96);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLTexture_restoreIOSurfaceData_length_forPlane( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD80800000024LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLTexture_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC09800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_Boundary_Frame(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x74747474747443LL;
  *(void *)a2 = 0xFFFFD8480000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[5];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[6];
  unint64_t v12 = 100LL;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v13 + 8);
    uint64_t v14 = (v13 + 108);
    unint64_t v12 = (v13 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_CAMetalDrawable_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalDrawable_present( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalDrawable_presentAfterMinimumDuration( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 25667;
  *(void *)a2 = 0xFFFFE40C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalDrawable_presentAtTime( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 25667;
  *(void *)a2 = 0xFFFFE40B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalDrawable_texture( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_CAMetalLayer_nextDrawable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_CAMetalLayer_setBounds_contentsScale( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFE40600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6464344043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 40);
  unint64_t v12 = 92LL;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v13 + 8);
    uint64_t v14 = (v13 + 100);
    unint64_t v12 = (v13 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_CAMetalLayer_setColorspace( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE40F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_CAMetalLayer_setDevice( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 5600323;
  *(void *)a2 = 0xFFFFE40500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)(a1 + 8);
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_CAMetalLayer_setDrawableSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFE40400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@2d");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalLayer_setFramebufferOnly( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFE40800000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalLayer_setPixelFormat( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFE40300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_CAMetalLayer_setWantsExtendedDynamicRangeContent( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFE40E00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_allocationID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_allocationInfo( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFD83A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cuwuwuwululul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  unint64_t v11 = 108LL;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v12 + 8);
    uint64_t v13 = (v12 + 116);
    unint64_t v11 = (v12 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_children( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD85400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructure_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_heapOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD84700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_resourceUsage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD82D00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543LL;
  *(void *)a2 = 0xFFFFD82E0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_state( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFD85100000024LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 105;
  *(void *)(a2 + 36) = *(void *)"Cuiuiuiui";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 20);
  unint64_t v12 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 13;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD83B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 30581;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_setDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC34000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructure_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2D300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructure_setResponsibleProcess( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC2D400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2D500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_makeAliasable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2DD00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC2DE00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructure_waitUntilComplete( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2DF00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 5600323;
  *(void *)a2 = 0xFFFFD85600000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)(a1 + 8);
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureState( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFD85200000024LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuiuiuiui");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 76;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 28);
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC2E100000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CtUtul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2E200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2E300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E400000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC35C00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CtUtul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x556C7574557443LL;
  *(void *)a2 = 0xFFFFC3960000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v14 = *a2;
  unint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC39700000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CttulU");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x6C757474557443LL;
  *(void *)a2 = 0xFFFFC2EA0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3FA00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CtUttulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 48);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2EB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctului");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAccelerationStructures_toBuffer_serializedBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC35E00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CtUtul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_updateFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2ED00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useHeap( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2EE00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useHeaps_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2EF00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useResource_usage( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2F000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useResources_count_usage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2F100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_waitForFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2F200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3FB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC44900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2F300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C75747443LL;
  *(void *)a2 = 0xFFFFC3720000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75746C757443LL;
  *(void *)a2 = 0xFFFFC3180000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serializedOffset_toBuffer_sizesBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75746C757443LL;
  *(void *)a2 = 0xFFFFC3190000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC31C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75747443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_constantDataAtIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 30581;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC14100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLArgumentEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC14200000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_newArgumentEncoderForBufferAtIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setAccelerationStructure_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2F500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setArgumentBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14300000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14400000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setIndirectCommandBuffer_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1D400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1D500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setIntersectionFunctionTable_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC34D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setIntersectionFunctionTables_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC34E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setRenderPipelineState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC17E00000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setRenderPipelineStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC17F00000024LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8LL;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14800000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14900000024LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8LL;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14600000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC14700000024LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8LL;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setVisibleFunctionTable_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC34F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLArgumentEncoder_setVisibleFunctionTables_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLBinaryArchive_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2CC00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2CE00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLBinaryArchive_addLibraryWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3BE00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2CF00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2D000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLBinaryArchive_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2BB00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC27400000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "Ct@2ultulU<b>");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 8);
  *a2 = 68;
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(a1 + 16);
  *a2 = 84;
  *(void *)(a2 + 21) = *(void *)(a1 + 32);
  *a2 = 92;
  *(void *)(a2 + 23) = *(void *)(a1 + 40);
  *a2 = 100;
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC00300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul@3ultulul@3ul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 100;
  uint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  uint64_t v12 = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 164) = v12;
  unint64_t v13 = 172LL;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v14 + 8);
    uint64_t v15 = (v14 + 180);
    unint64_t v13 = (v14 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0AE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul@3ultulul@3ulul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 100;
  uint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  uint64_t v12 = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 164) = v12;
  *(_DWORD *)a2 = 172;
  *(void *)(a2 + 172) = *(void *)(a1 + 112);
  unint64_t v13 = 180LL;
  *(_DWORD *)a2 = 180;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 180), __src, v14 + 8);
    uint64_t v15 = (v14 + 188);
    unint64_t v13 = (v14 + 191) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC00700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ctultulul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC00400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultululul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  unint64_t v13 = 172LL;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v14 + 8);
    uint64_t v15 = (v14 + 180);
    unint64_t v13 = (v14 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0AF00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulululul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  *(_DWORD *)a2 = 172;
  *(void *)(a2 + 172) = *(void *)(a1 + 112);
  unint64_t v13 = 180LL;
  *(_DWORD *)a2 = 180;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 180), __src, v14 + 8);
    uint64_t v15 = (v14 + 188);
    unint64_t v13 = (v14 + 191) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC00200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulul@3ul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  uint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 180) = v13;
  unint64_t v14 = 188LL;
  *(_DWORD *)a2 = 188;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 188), __src, v15 + 8);
    uint64_t v16 = (v15 + 196);
    unint64_t v14 = (v15 + 199) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0AD00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulul@3ulul");
  *(_WORD *)(a2 + 62) = 0;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)a1;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 96;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 112) = v11;
  *(_DWORD *)a2 = 120;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 136) = v12;
  *(_DWORD *)a2 = 144;
  *(void *)(a2 + 144) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 152;
  *(void *)(a2 + 152) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 160;
  *(void *)(a2 + 160) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 168;
  uint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 184) = v13;
  *(_DWORD *)a2 = 192;
  *(void *)(a2 + 192) = *(void *)(a1 + 128);
  unint64_t v14 = 200LL;
  *(_DWORD *)a2 = 200;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 200), __src, v15 + 8);
    uint64_t v16 = (v15 + 208);
    unint64_t v14 = (v15 + 211) & 0xFFFFFFF8;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1FA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulultulululul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124LL;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_toTexture( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC1FB00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1A900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ct@2ultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 40);
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_fillBuffer_range_pattern4( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC38E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ct@2ului");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 32);
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_fillBuffer_range_value( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC00600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ct@2ulub");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a2 + 83) = 0;
  *(_WORD *)(a2 + 81) = 0;
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC38F00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "Ctulul@6ulU<b>ul");
  *(_WORD *)((char *)a2 + 53) = 0;
  *((_BYTE *)a2 + 55) = 0;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 8);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 16);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 24);
  *a2 = 88;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 26) = v12;
  *(_OWORD *)(a2 + 30) = v11;
  *a2 = 136;
  AppendString(*(const char **)(a1 + 80), (int *)a2);
  uint64_t v13 = *a2;
  uint64_t v14 = ((_DWORD)v13 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v13, v14 - v13);
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 88);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@6ul@4d");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 100) = v12;
  *(_OWORD *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 132;
  __int128 v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 132) = v13;
  unint64_t v14 = 164LL;
  *(_DWORD *)a2 = 164;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 164), __src, v15 + 8);
    uint64_t v16 = (v15 + 172);
    unint64_t v14 = (v15 + 175) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul@6ul@4dul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 100) = v12;
  *(_OWORD *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 132;
  __int128 v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 132) = v13;
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 112);
  unint64_t v14 = 172LL;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v15 + 8);
    uint64_t v16 = (v15 + 180);
    unint64_t v14 = (v15 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_generateMipmapsForTexture( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC00500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC19700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ct@6ulululuitul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  __int128 v12 = *(_OWORD *)(a1 + 32);
  __int128 v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 84) = v12;
  *(_OWORD *)(a2 + 100) = v11;
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 132;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)a2 = 136;
  *(void *)(a2 + 136) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 144;
  *(void *)(a2 + 144) = *(void *)(a1 + 88);
  unint64_t v13 = 152LL;
  *(_DWORD *)a2 = 152;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 152), __src, v14 + 8);
    uint64_t v15 = (v14 + 160);
    unint64_t v13 = (v14 + 163) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLBlitCommandEncoder_invalidateCompressedTexture( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC39200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_invalidateCompressedTexture_slice_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForCPUAccess( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC18700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC18800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForGPUAccess( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC18500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC18600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1AA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ct@2ul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00A00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLBlitCommandEncoder_resetCommandsInBuffer_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1A800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ct@2ul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC19800000024LL;
  strcpy((char *)(a2 + 36), "Ct@6ululul");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  __int128 v12 = *(_OWORD *)(a1 + 32);
  __int128 v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 96) = v11;
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = *(void *)(a1 + 72);
  unint64_t v13 = 128LL;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v14 + 8);
    uint64_t v15 = (v14 + 136);
    unint64_t v13 = (v14 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC27500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctului");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_synchronizeResource( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0AB00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_synchronizeTexture_slice_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0AC00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_updateFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC10400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBlitCommandEncoder_waitForFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FD00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_allocationID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_contents(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_gpuVirtualAddress( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD80C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_heapOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_parentGPUAddress_parentGPUSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFD83600000024LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_resourceUsage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD80500000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_saveContentsToPath( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFD82800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLBuffer_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLBuffer_setParentGPUAddress( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC36F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_setParentGPUSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC37000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_setResponsibleProcess( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC00D00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_addDebugMarker_range( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11900000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CS@2ul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(_OWORD *)((char *)a2 + v12) = *(_OWORD *)(a1 + 16);
  unint64_t v13 = *a2 + 16;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00E00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_didModifyRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0B000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75324043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_isAliasable( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10F00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_isPurgeable( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_makeAliasable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUululul");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLBuffer_newRemoteBufferViewForDevice( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1D600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11800000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLCaptureManager_newCaptureScopeWithCommandQueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureManager_newCaptureScopeWithDevice( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureManager_notifyPostPresentHandoffSPI( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC16D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15E00000024LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Cult@4dul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  __int128 v12 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 88) = v12;
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = *(void *)(a1 + 56);
  unint64_t v13 = 112LL;
  *(_DWORD *)a2 = 112;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 112), __src, v14 + 8);
    uint64_t v15 = (v14 + 120);
    unint64_t v13 = (v14 + 123) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLCaptureManager_startCaptureWithCommandQueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC13C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureManager_startCaptureWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC28800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLCaptureManager_startCaptureWithDevice( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC13B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureManager_startCaptureWithScope( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCaptureManager_stopCapture( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCaptureScope_beginScope( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCaptureScope_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCaptureScope_endScope( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCaptureScope_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC13700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFD80000000024LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CtU<b>ulul");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC01300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLCommandBuffer_setProfilingEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC01400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_setSharedIndirectionTable( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC35300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_accelerationStructureCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2C700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3FC00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_addCompletedHandler( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_addPurgedHeap( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1A200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_addPurgedResource( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1A100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_addScheduledHandler( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_blitCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_blitCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_commit( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_commitAndHold( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC0B600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_commitAndWaitUntilSubmitted( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DC00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC42C00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_commitWithDeadline( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC42A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31E00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDispatchType( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC17200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2A000000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x69756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_debugCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_doCorruptCBSPI( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC17400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_dropResourceGroups_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1E700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC37300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    __int128 v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3CE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "Ctul@%zuul@%zuulul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  unsigned int v14 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  uint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  v11 *= 8LL;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 24), v11);
  uint64_t v17 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v17;
  memcpy((void *)(a2 + v17), *(const void **)(a1 + 32), v11);
  unsigned int v18 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v18;
  *(void *)(a2 + v18) = *(void *)(a1 + 40);
  unint64_t v19 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v19), a4, v20);
    uint64_t v21 = (v20 + *(_DWORD *)a2);
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v21), v19 - v21);
    *(_DWORD *)a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      __int128 v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeDashboardTagForResourceGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC37400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeSignalEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC18A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeSignalEventScheduled_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC48F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeWaitForEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC18900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_encodeWaitForEvent_value_timeout( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC27B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctuwui");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_enqueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC02100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC14000000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_presentDrawable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_presentDrawable_afterMinimumDuration( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6583363;
  *(void *)a2 = 0xFFFFC0FB00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_presentDrawable_atTime( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6583363;
  *(void *)a2 = 0xFFFFC01A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC13F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLCommandBuffer_renderCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC01F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_resourceStateCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC20200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_resourceStateCommandEncoderWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC32000000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUU<b>ul");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandBuffer_setResourceGroups_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1E600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandBuffer_useResidencySet( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_useResidencySets_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandBuffer_videoCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC17300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandBuffer_waitUntilCompleted( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandBuffer_waitUntilScheduled( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_setBackgroundTrackingPID( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC02400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_setExecutionEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02600000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC02300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLCommandQueue_setProfilingEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02700000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_setSkipRender( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02500000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_addResidencySet( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_addResidencySets_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandQueue_commandBuffer( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_commandBufferWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC2AB00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCommandQueue_commandBufferWithUnretainedReferences( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_finish( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02C00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_getSPIStats( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 67;
  *(void *)a2 = 0xFFFFC2F800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  strcpy((char *)a2 + 48, "U<b>");
  *(_WORD *)((char *)a2 + 53) = 0;
  *((_BYTE *)a2 + 55) = 0;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLCommandQueue_insertDebugCaptureBoundary( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_removeResidencySet( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_removeResidencySets_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLCommandQueue_setBackgroundGPUPriority( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC23F00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_setBackgroundGPUPriority_offset( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC24000000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x73756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 20);
  *(_DWORD *)(a2 + 62) = 1769275392;
  *(_WORD *)(a2 + 66) = 0;
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_setCompletionQueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC24100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCommandQueue_setGPUPriority( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC24200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_setGPUPriority_offset( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC24300000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x73756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 20);
  *(_DWORD *)(a2 + 62) = 1769275392;
  *(_WORD *)(a2 + 66) = 0;
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLCommandQueue_setSubmissionQueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC24400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x55556C75747443LL;
  *(void *)a2 = 0xFFFFC1A50000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_executeCommandsInBuffer_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x556C7532407443LL;
  *(void *)a2 = 0xFFFFC1A40000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(_OWORD *)(a2 + 15) = *(_OWORD *)(a1 + 16);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC02D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLComputeCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02E00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul@3ul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  uint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 88) = v11;
  unint64_t v12 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC13200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC13100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_enableNullBufferBinds( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC28C00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC36900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC03C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLComputeCommandEncoder_memoryBarrierWithResources_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC17800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_memoryBarrierWithScope( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC17700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03E00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC03D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC27600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctului");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC2F900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC44C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC09E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC44D0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC44E00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC09D00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC44F00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CU<b>ululul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setComputePipelineState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC02F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setImageblockWidth_height( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0EB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC32100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC32200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setStageInRegion( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC11C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75364043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100LL;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC16F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setSubstream( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A100000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupDistributionMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC45000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC45100000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC03800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupPackingDisabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC45200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC32300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC32400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_signalProgress( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_updateFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FE00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_useHeap( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_useHeaps_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_useResource_usage( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_useResources_count_usage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_waitForFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FF00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputeCommandEncoder_waitForProgress( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputePipelineState_allocatedSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD83100000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputePipelineState_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputePipelineState_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputePipelineState_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03F00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLComputePipelineState_functionHandleWithFunction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2FC00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC34B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLComputePipelineState_newIntersectionFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC34C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLComputePipelineState_newVisibleFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC32600000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLCounterSampleBuffer_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC20500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLCounterSampleBuffer_resolveCounterRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC27700000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C75324043LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(_OWORD *)(a2 + 13) = *(_OWORD *)(a1 + 16);
  strcpy((char *)a2 + 68, "U<b>");
  *(_WORD *)((char *)a2 + 73) = 0;
  *((_BYTE *)a2 + 75) = 0;
  *a2 = 76;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLDeadlineProfile_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC42800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDepthStencilState_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04000000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDevice_compileVisibleFunction_withDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC2FF00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CtUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 16);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_deviceReference( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD80100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLDevice_newBufferWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 5592387;
  *(void *)a2 = 0xFFFFC36B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newSharedEvent( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC18400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 52) = 116;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newSharedEventWithHandle( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1DB00000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuiuw");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 24);
  *(_DWORD *)(a2 + 72) = 116;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 8);
  unint64_t v12 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v13 + 8);
    uint64_t v14 = (v13 + 92);
    unint64_t v12 = (v13 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newSharedEventWithMachPort( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1D800000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775697543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newSharedTextureWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC19400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC19D00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CulUul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLDevice_setCommandBufferErrorOptions( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC2AE00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDevice_setMetalAssertionsEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC04200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDevice_setPluginData( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC37500000024LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x3E623C5543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLDevice_setWritableHeapsEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC47200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC38D00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x7474557443LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLDevice_copyShaderCacheToPath( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC27D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ui");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(unsigned int *)((char *)a2 + v14) = *(_DWORD *)(a1 + 16);
  unint64_t v15 = *a2 + 4;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04300000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3FD00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CtU<b>UU");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x553E623C557443LL;
  *(void *)a2 = 0xFFFFC3FE0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLDevice_heapBufferSizeAndAlignWithLength_options( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC11100000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 32);
  strcpy((char *)(a2 + 68), "@2ul");
  *(_WORD *)(a2 + 73) = 0;
  *(_BYTE *)(a2 + 75) = 0;
  *(_DWORD *)a2 = 76;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 8);
  unint64_t v12 = 92LL;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v13 + 8);
    uint64_t v14 = (v13 + 100);
    unint64_t v12 = (v13 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_heapTextureSizeAndAlignWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC11000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "@2ul");
  uint64_t v14 = (*a2 & 0xFFFFFFFC) + 8;
  bzero((char *)a2 + *a2 + 5, v14 - (*a2 + 5));
  *a2 = v14;
  *(_OWORD *)((char *)a2 + v14) = *(_OWORD *)(a1 + 8);
  unint64_t v15 = *a2 + 16;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC37600000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 85;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v17 = *a2;
  unint64_t v18 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v17, v18 - v17);
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (v18 > a3)
  {
    if (a5)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC37700000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CU<b>Uult";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 85;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v17 = *a2;
  unint64_t v18 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v17, v18 - v17);
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (v18 > a3)
  {
    if (a5)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_minLinearTextureAlignmentForPixelFormat( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC12300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC29900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ul");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39800000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC40100000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuluw");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC30100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC30200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC36E00000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize_withDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC40200000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CulU");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 16);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newArgumentEncoderWithBufferBinding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newBinaryArchiveWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC29B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithBytes_length_options_gpuAddress( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC2A500000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ululuw");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithBytesNoCopy_length_options_deallocator( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC04800000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulult");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithIOSurface( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC0DD00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newBufferWithLength_options_gpuAddress( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C756C7543LL;
  *(void *)a2 = 0xFFFFC2A70000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newCommandQueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newCommandQueueWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC0DB00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newCommandQueueWithMaxCommandBufferCount( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC04500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC0BA00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC0B800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC0BB00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_completionHandler( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC05700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_error( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC05500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_options_completionHandler( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC05800000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x746C757443LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newCounterSampleBufferWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC21800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newDefaultLibrary( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newDefaultLibraryWithBundle_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12100000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newDepthStencilStateWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC04900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newDynamicLibrary_error( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2B100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC30300000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_options_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC35500000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newEvent(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC18300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543LL;
  *(void *)a2 = 0xFFFFC3BA0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3BB00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLESIR_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543LL;
  *(void *)a2 = 0xFFFFC3BC0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLESIR_inputsDescription_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3BD00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLIR_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543LL;
  *(void *)a2 = 0xFFFFC28D0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newFunctionWithGLIR_inputsDescription_functionType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC28E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newHeapWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC10800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newIOCommandQueueWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC40A00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newIOFileHandleWithURL_compressionMethod_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC46400000024LL;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newIOFileHandleWithURL_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC46500000024LL;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newIOHandleWithURL_compressionMethod_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC44000000024LL;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newIOHandleWithURL_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC40C00000024LL;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC19C00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newIntersectionFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC32700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newLateEvalEvent( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC16300000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC16E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithDAG_functions_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC2B300000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithData_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC04E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3BF00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3B500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithDescriptorSPI_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3B600000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptorSPI_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newLibraryWithURL_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC15900000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newMotionEstimationPipelineWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC1ED00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newProfileWithExecutionSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_newRasterizationRateMapWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC24F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC05300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC05100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC05400000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3D200000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3D300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3D400000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3D500000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CUulU<b>t";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC12700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC12500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12800000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_newResidencySetWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC47300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newResourceGroupFromResources_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    __int128 v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1E400000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8LL;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(_WORD *)(a2 + v17) = 116;
  uint64_t v18 = (*(_DWORD *)a2 + 5) & 0xFFFFFFFC;
  bzero((void *)(a2 + (*(_DWORD *)a2 + 2)), v18 - (*(_DWORD *)a2 + 2));
  *(_DWORD *)a2 = v18;
  *(void *)(a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v19), a4, v20);
    uint64_t v21 = (v20 + *(_DWORD *)a2);
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v21), v19 - v21);
    *(_DWORD *)a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      __int128 v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLDevice_newSamplerStateWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC04B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC11D00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUui");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(unsigned int *)((char *)a2 + v13) = *(_DWORD *)(a1 + 24);
  unsigned int v14 = *a2 + 4;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12000000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulUt";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLDevice_newTextureWithDescriptor_iosurface_plane( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC05A00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C75555543LL;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    __int128 v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC16200000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ultUulul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 48);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 56);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }

  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      __int128 v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }

void DYTraceEncode_MTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    int v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC16100000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulUulul");
  *(_WORD *)((char *)a2 + 49) = 0;
  *((_BYTE *)a2 + 51) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 48);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }

  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      int v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }

void DYTraceEncode_MTLDevice_requiredLinearTextureBytesPerRowForDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC29C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ul");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLDevice_serializeStructType_version( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x69753E623C5543LL;
  *(void *)a2 = 0xFFFFC27E0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(unsigned int *)((char *)a2 + v13) = *(_DWORD *)(a1 + 24);
  uint64_t v14 = *a2 + 4;
  *a2 = v14;
  strcpy((char *)a2 + v14, "U<b>");
  uint64_t v15 = (*a2 & 0xFFFFFFFC) + 8;
  bzero((char *)a2 + *a2 + 5, v15 - (*a2 + 5));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLDevice_sparseTileSizeInBytesForSparsePageSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC2870000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 48);
  strcpy((char *)(a2 + 76), "@3ul");
  *(_WORD *)(a2 + 81) = 0;
  *(_BYTE *)(a2 + 83) = 0;
  *(_DWORD *)a2 = 84;
  __int128 v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 100) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = v12;
  unint64_t v13 = 108LL;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v14 + 8);
    uint64_t v15 = (v14 + 116);
    unint64_t v13 = (v14 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)a2 = 0xFFFFC42E00000024LL;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 56);
  strcpy((char *)(a2 + 88), "@3ul");
  *(_BYTE *)(a2 + 95) = 0;
  *(_WORD *)(a2 + 93) = 0;
  *(_DWORD *)a2 = 96;
  __int128 v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 112) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 96) = v12;
  unint64_t v13 = 120LL;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v14 + 8);
    uint64_t v15 = (v14 + 128);
    unint64_t v13 = (v14 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLDevice_supportsPrimitiveType( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1E200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_supportsRasterizationRateMapWithLayerCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC25100000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_supportsSampleCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0B300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_supportsTextureSampleCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0DA00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)a2 = 0xFFFFC24C00000024LL;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 56);
  strcpy((char *)(a2 + 88), "@3ul");
  *(_BYTE *)(a2 + 95) = 0;
  *(_WORD *)(a2 + 93) = 0;
  *(_DWORD *)a2 = 96;
  __int128 v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 112) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 96) = v12;
  unint64_t v13 = 120LL;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v14 + 8);
    uint64_t v15 = (v14 + 128);
    unint64_t v13 = (v14 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLDevice_unmapShaderSampleBuffer( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDynamicLibrary_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2C400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLDynamicLibrary_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2C500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLDynamicLibrary_serializeToURL_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC2C600000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLEvent_setEnableBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLEvent_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1F800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLEvent_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1F900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFence_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC0F800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLFence_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFunction_setDescriptor_library( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFD85300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLFunction_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC10500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLFunction_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC29D00000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cult");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC29E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CulU<b>t");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 16);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLFunction_newFunctionWithPluginData_bitcodeType( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x62753E623C5543LL;
  *(void *)a2 = 0xFFFFC22A0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  *((_BYTE *)a2 + *a2) = *(_BYTE *)(a1 + 24);
  uint64_t v12 = (*a2 & 0xFFFFFFFC) + 4;
  bzero((char *)a2 + *a2 + 1, v12 - (*a2 + 1));
  *a2 = v12;
  *(_WORD *)((char *)a2 + v12) = 116;
  uint64_t v13 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v13 - (*a2 + 2));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 8);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLFunctionHandle_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC30600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFunctionPointerHandle_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLFunctionPrivateArgument_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLHeap_currentAllocatedSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_usedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC10900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLHeap_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLHeap_maxAvailableSizeWithAlignment( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC11700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC40400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithDescriptor_offset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC40500000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC40600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC40700000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_offset_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C756C7543LL;
  *(void *)a2 = 0xFFFFC4080000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC40900000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newBufferWithLength_options( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC10B00000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newBufferWithLength_options_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC25E0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLHeap_newTextureWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC10C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLHeap_newTextureWithDescriptor_offset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC25F00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC42F00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLIOCommandBuffer_addBarrier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_addCompletedHandler( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC40F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_barrier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41000000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_commit( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_copyStatusToBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC41200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41300000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_encodeSignalEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC41400000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_encodeWaitForEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC41500000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_enqueue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC43000000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC43100000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ctulultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v12 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC44200000024LL;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ultul");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC43200000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctulul@3ululul@3ultul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v12;
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 56);
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  uint64_t v13 = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 132) = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 148) = v13;
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  unint64_t v14 = 172LL;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v15 + 8);
    uint64_t v16 = (v15 + 180);
    unint64_t v14 = (v15 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44300000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC44400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLIOCommandBuffer_signalEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC43300000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_tryCancel( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_waitForEvent_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC43400000024LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandBuffer_waitUntilCompleted( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC43500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLIOCommandQueue_barrier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_commandBuffer( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_commandBufferWithUnretainedReferences( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC43600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41C00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOCommandQueue_enqueueBarrier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIOFileHandle_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC44600000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLIOFileHandle_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOHandle_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC43700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLIOScratchBuffer_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOScratchBufferAllocator_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41F00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC43D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_allocationID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1CB00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLIndirectCommandBuffer_setResponsibleProcess( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC1CC00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1CD00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_indirectComputeCommandAtIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1CF00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_indirectRenderCommandAtIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1CE00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_isAliasable( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_isPurgeable( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_makeAliasable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectCommandBuffer_resetWithRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1E800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75324043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1C500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1C100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_reset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DF00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_setComputePipelineState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1C200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_setKernelBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1C300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC45300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_setStageInRegion( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1CA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75364043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100LL;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1C900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1AB00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC1B200000024LL;
  strcpy((char *)(a2 + 36), "Cululultultululultulul");
  *(_BYTE *)(a2 + 59) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[2];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[3];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[4];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[5];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[6];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[7];
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = a1[8];
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = a1[9];
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = a1[10];
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = a1[11];
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = a1[12];
  unint64_t v11 = 164LL;
  *(_DWORD *)a2 = 164;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 164), __src, v12 + 8);
    uint64_t v13 = (v12 + 172);
    unint64_t v11 = (v12 + 175) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1B400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululultulullul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124LL;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC45E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132LL;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC45F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132LL;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1B000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululultululultulul");
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[1];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[3];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[4];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[5];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[6];
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = a1[7];
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = a1[8];
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = a1[9];
  *(_DWORD *)a2 = 136;
  *(void *)(a2 + 136) = a1[10];
  unint64_t v11 = 144LL;
  *(_DWORD *)a2 = 144;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 144), __src, v12 + 8);
    uint64_t v13 = (v12 + 152);
    unint64_t v11 = (v12 + 155) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1B300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululululul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_reset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DE00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1AE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setMeshBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setObjectBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setRenderPipelineState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1AC00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setVertexBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC1AD00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC45400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_allocatedSize( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_allocationID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84F00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffers( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD85800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLIntersectionFunctionTable_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD83C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD84100000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 30581;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC32E00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setResponsibleProcess( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC32F00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC33000000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_makeAliasable( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC33800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC34700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC34800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setFunction_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC33900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setFunctions_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC33A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC46600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C7532406C7543LL;
  *(void *)a2 = 0xFFFFC4670000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C7532406C7543LL;
  *(void *)a2 = 0xFFFFC3570000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setPurgeableState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC33B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC35B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLLateEvalEvent_setEnableBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42400000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLLateEvalEvent_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC37D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLLateEvalEvent_setSignaledValue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC37E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLLateEvalEvent_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37F00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLLateEvalEvent_newSharedEventHandle( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC38000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLLateEvalEvent_waitUntilSignaledValue_timeoutMS( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3C000000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 68) = 26997;
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLLibrary_libraryIdentifier( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFD83400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLLibrary_type(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 13;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD83900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 27765;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLLibrary_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC05C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLLibrary_setOverrideTriple( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC12D00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLLibrary_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLLibrary_newExternFunctionWithName( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC15A00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC30700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC30800000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithName( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC05E00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x743E623C555343LL;
  *(void *)a2 = 0xFFFFC1160000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12F00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSU<b>tt");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12E00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSU<b>tt");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC34200000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLMotionEstimationPipeline_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1EB00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06300000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06600000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_renderCommandEncoder( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setColorStoreAction_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0DE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC16400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setDepthStoreAction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0DF00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setDepthStoreActionOptions( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setStencilStoreAction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E000000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLParallelRenderCommandEncoder_setStencilStoreActionOptions( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16600000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_setDisableRunTimeCompilation( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC28000000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC28100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLPipelineLibrary_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC28200000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_newComputePipelineDescriptorWithName_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7623491;
  *(void *)a2 = 0xFFFFC28300000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 85;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLPipelineLibrary_newRenderPipelineDescriptorWithName_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7623491;
  *(void *)a2 = 0xFFFFC28500000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 85;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRasterizationRateMap_copyParameterDataToBuffer_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC26000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRasterizationRateMap_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC24700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC26600000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "C@2ful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[3];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)(a2 + 68) = 6697536;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRasterizationRateMap_physicalSizeForLayer( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC24B00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 32);
  strcpy((char *)(a2 + 56), "@3ul");
  *(_WORD *)(a2 + 61) = 0;
  *(_BYTE *)(a2 + 63) = 0;
  *(_DWORD *)a2 = 64;
  __int128 v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 80) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 64) = v12;
  unint64_t v13 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v14 + 8);
    uint64_t v15 = (v14 + 96);
    unint64_t v13 = (v14 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLRasterizationRateMap_resetUsingDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3CD00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x55556C75747443LL;
  *(void *)a2 = 0xFFFFC1A70000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_executeCommandsInBuffer_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  *(void *)(a2 + 9) = 0x556C7532407443LL;
  *(void *)a2 = 0xFFFFC1A60000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(_OWORD *)(a2 + 15) = *(_OWORD *)(a1 + 16);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06700000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLRenderCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75334043LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 68) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC38200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@6ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  __int128 v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v12;
  unint64_t v14 = 128LL;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v15 + 8);
    uint64_t v16 = (v15 + 136);
    unint64_t v14 = (v15 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC43F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@3ul@6ului");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  __int128 v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v12;
  *(_DWORD *)a2 = 128;
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 80);
  unint64_t v14 = 132LL;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cultultultul");
  *(_WORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  unint64_t v11 = 116LL;
  *(_DWORD *)a2 = 116;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 116), __src, v12 + 8);
    uint64_t v13 = (v12 + 124);
    unint64_t v11 = (v12 + 127) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0EF00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 52) = 108;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)"Cululultultululul";
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[1];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[3];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[4];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[5];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[6];
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = a1[7];
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = a1[8];
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = a1[9];
  unint64_t v11 = 136LL;
  *(_DWORD *)a2 = 136;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 136), __src, v12 + 8);
    uint64_t v13 = (v12 + 144);
    unint64_t v11 = (v12 + 147) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC08800000024LL;
  strcpy((char *)(a2 + 36), "Cululultul");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC08700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululultulul");
  *(_WORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  unint64_t v11 = 108LL;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v12 + 8);
    uint64_t v13 = (v12 + 116);
    unint64_t v11 = (v12 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululultulullul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124LL;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Culultultul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3C800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132LL;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3C900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul@3ul@3ul");
  *(_WORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  uint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 92) = v11;
  *(_DWORD *)a2 = 100;
  uint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 116) = v12;
  unint64_t v13 = 124LL;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v14 + 8);
    uint64_t v15 = (v14 + 132);
    unint64_t v13 = (v14 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3CA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132LL;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }

  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      __int128 v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0EE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Cultultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0ED00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululultululul");
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  unint64_t v11 = 116LL;
  *(_DWORD *)a2 = 116;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 116), __src, v12 + 8);
    uint64_t v13 = (v12 + 124);
    unint64_t v11 = (v12 + 127) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cultul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC0860000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC08500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cululululul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08A00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC08B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC17D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutululul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(void *)(a2 + v17) = *(void *)(a1 + 32);
  unint64_t v18 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC17C0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08D00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC08C00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC27A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctului");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72LL;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setAlphaTestReferenceValue( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC28F00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC08100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6666666643LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 20);
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC0E400000024LL;
  strcpy((char *)(a2 + 36), "Ctulululul");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96LL;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC29000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulululuiul");
  *(_WORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 40);
  unint64_t v11 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setColorStoreAction_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0E100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setColorStoreActionOptions_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC16A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setCullMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthBias_slopeScale_clamp( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Cfff");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthCleared( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC29100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthClipMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07500000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0E500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC29200000024LL;
  strcpy((char *)(a2 + 36), "Ctululului");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 40);
  unint64_t v11 = 92LL;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v12 + 8);
    uint64_t v13 = (v12 + 100);
    unint64_t v11 = (v12 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStencilState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC08200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStoreAction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E200000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStoreActionOptions( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC0A100000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC08000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75746C757443LL;
  *(void *)a2 = 0xFFFFC0AA0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setFrontFacingWinding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setLineWidth( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC08900000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3D700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3D800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBuffers_offsets_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3D900000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3DA00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3DB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3DC00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3DD00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3DE00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3DF00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setMeshTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBuffers_offsets_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3E300000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3E400000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC3E700000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3E900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3EA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3EB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setPointSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC18C00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC19E00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled_index( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC19000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75697543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  unint64_t v11 = 64LL;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setProvokingVertexMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC29300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setRenderPipelineState( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC06900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilCleared( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC29400000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6975697543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  unint64_t v11 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v12 + 8);
    uint64_t v13 = (v12 + 68);
    unint64_t v11 = (v12 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilReferenceValue( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC08300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC29500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)a2 = 0xFFFFC29600000024LL;
  strcpy((char *)(a2 + 36), "Ctululului");
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 40);
  unint64_t v11 = 92LL;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v12 + 8);
    uint64_t v13 = (v12 + 100);
    unint64_t v11 = (v12 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilStoreAction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setStencilStoreActionOptions( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0EC00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTessellationFactorScale( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC0FC00000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC1360000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileBuffers_offsets_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC12900000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC0F100000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC12C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC12B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0F400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC12A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTriangleFillMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC29700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A700000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAmplificationMode_value( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC23C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffer_offset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC45500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(_BYTE *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88LL;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBufferOffset_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC0A000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C756C7543LL;
  *(void *)a2 = 0xFFFFC4560000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC45700000024LL;
  a2[8] = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8LL;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffers_offsets_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06B00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBytes_length_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC09F00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }

  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    __int128 v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC45800000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CU<b>ululul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      __int128 v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3A900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerState_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06E00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07100000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerStates_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06F00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexTexture_atIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06C00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexTextures_withRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC06D00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3AA00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3AB00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setViewport( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC07200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "C@6d");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100LL;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setViewportTransformEnabled( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC29800000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_setVisibilityResultMode_offset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC08400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C756C7543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_textureBarrier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC0B700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_updateFence_afterStages( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC10200000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useHeap( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useHeap_stages( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC23300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useHeaps_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15800000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useHeaps_count_stages( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC23400000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useResource_usage( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useResource_usage_stages( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC23500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useResources_count_usage( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    __int128 v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC15600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }

  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      __int128 v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_useResources_count_usage_stages( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    __int128 v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC23600000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutululul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(void *)(a2 + v17) = *(void *)(a1 + 32);
  unint64_t v18 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = ((_DWORD)v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }

  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      __int128 v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }

void DYTraceEncode_MTLRenderCommandEncoder_waitForFence_beforeStages( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC10300000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_allocatedSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD83000000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_imageblockSampleLength( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_timeSinceTouched( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_setEmulationPayloadMemoryLength( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC44800000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_setEmulationPrimitiveTopology( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08E00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_fragmentFunctionHandleWithFunction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3AC00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_functionHandleWithFunction_stage( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC39900000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(_BYTE *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80LL;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AD00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC39A00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC39B00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AE00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AF00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B000000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B100000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B200000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = ((_DWORD)v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }

  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC39C00000024LL;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((_BYTE *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_tileFunctionHandleWithFunction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3B300000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLRenderPipelineState_vertexFunctionHandleWithFunction( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3B400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68LL;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLResidencySet_addAllocation( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC49400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_addAllocations_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC49500000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLResidencySet_commit( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48C00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48100000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_endResidency( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48200000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_removeAllAllocations( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC49800000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_removeAllocation( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC49900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResidencySet_removeAllocations_count( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    __int128 v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC49A00000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0LL);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8LL;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = ((_DWORD)v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }

  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      __int128 v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }

void DYTraceEncode_MTLResidencySet_requestResidency( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48900000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceGroup_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC26700000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC24E00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC25000000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctulultulul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104LL;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25200000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_endEncoding( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25300000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_insertDebugSignpost( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC25400000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_popDebugGroup( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25500000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_pushDebugGroup( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC25600000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_updateFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC25700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(void *)(a2 + 36) = 0x6C75746C757443LL;
  *(void *)a2 = 0xFFFFC2580000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84LL;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC25900000024LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  strcpy((char *)(a2 + 36), "Ctul@6ululul");
  *(_WORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  __int128 v11 = *(_OWORD *)(a1 + 56);
  __int128 v12 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 92) = v12;
  *(_OWORD *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 80);
  unint64_t v13 = 140LL;
  *(_DWORD *)a2 = 140;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 140), __src, v14 + 8);
    uint64_t v15 = (v14 + 148);
    unint64_t v13 = (v14 + 151) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }

  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)a2 = 0xFFFFC25A00000024LL;
  a2[8] = 8 * (a4 != 0LL);
  strcpy((char *)a2 + 36, "CtulU<b>U<b>U<b>ul");
  *((_BYTE *)a2 + 55) = 0;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 8);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 16);
  *a2 = 80;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 48);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      __int128 v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }

void DYTraceEncode_MTLResourceStateCommandEncoder_waitForFence( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC25B00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLSamplerState_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84D00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLSamplerState_uniqueIdentifier( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD80E00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLSamplerState_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08F00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLSharedEvent_setEnableBarrier( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42700000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLSharedEvent_setLabel( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    __int128 v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  a2[8] = 8 * (a4 != 0LL);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC19A00000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = ((_DWORD)v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = ((_DWORD)v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }

  if (v12 > a3 && a5 != 0LL)
  {
    int v16 = *a5;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    __int128 v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }

void DYTraceEncode_MTLSharedEvent_setSignaledValue( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC19900000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLSharedEvent_dealloc( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC19B00000028LL;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48LL;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLSharedEvent_newSharedEventHandle( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DD00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60LL;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLSharedEvent_waitUntilSignaledValue_timeoutMS( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)a2 = 0xFFFFC3C200000024LL;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543LL;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 68) = 26997;
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  unint64_t v12 = 76LL;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_allocatedSize( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD81200000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_allocationID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82400000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_compressionFeedback( uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD82300000028LL;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52LL;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_gpuResourceID( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    __int128 v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84C00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      __int128 v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }

void DYTraceEncode_MTLTexture_heapOffset( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0LL);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83700000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }

  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }

void DYTraceEncode_MTLTexture_mipmapInfo( uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    __int128 v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  if (a4) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD80900000028LL;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = ((_DWORD)v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }

  if (v13 > a3 && a5 != 0LL)
  {
    int v17 = *a5;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    __int128 v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }

void DYTraceEncode_MTLTexture_resourceIndex( void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }

  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82A00000028LL;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56LL;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }

  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }