LABEL_265:
            free((void *)*v20);
            if (v24 != 1)
            {
              free((void *)v20[1]);
              if (v24 != 2) {
                free((void *)v20[2]);
              }
            }

              v131 = (void (**)(unsigned __int8 *))&off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
                --qword_18C468B10;
                off_18C4653A8(v33);
                v33 = (char **)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_188;
                }
                v131 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
              }

              (*v131)((unsigned __int8 *)v33);
              goto LABEL_188;
            }

            goto LABEL_262;
          }

          if (v7 == 23)
          {
            v103 = v46;
            v104 = __src;
            v105 = __src;
            a2 = v140;
            if (!v137)
            {
              v106 = *(_DWORD *)(v5 + 16);
              v103 = v46;
              v105 = __src;
              if (v106 >= 1)
              {
                v105 = __src;
                do
                {
                  while (1)
                  {
                    v108 = (unsigned __int8 *)(v105 + 1);
                    v107 = *v105;
                    else {
                      v105 += 9;
                    }
                    if (!--v106) {
                      goto LABEL_216;
                    }
                  }

                  v109 = *v108;
                  if ((v109 & 0x80) != 0)
                  {
                    v111 = v105[2];
                    if (v105[2] < 0)
                    {
                      v112 = v105[3];
                      if (v112 < 0)
                      {
                        v113 = sub_18129BD74(v105 + 1, &v148);
                        v71 = v46;
                        if (HIDWORD(v148)) {
                          v109 = -1;
                        }
                        else {
                          v109 = v148;
                        }
                        v110 = v113;
                      }

                      else
                      {
                        v109 = v112 & 0x7F | (v109 << 14) & 0x1FC07F | ((v111 & 0x7F) << 7);
                        v110 = 3LL;
                      }
                    }

                    else
                    {
                      v109 = ((v109 & 0x7F) << 7) | v111;
                      v110 = 2LL;
                    }
                  }

                  else
                  {
                    v110 = 1LL;
                  }

                  v105 = (char *)&v108[v110 + v109];
                  --v106;
                }

                while (v106);
LABEL_216:
                v114 = *(_DWORD *)(v5 + 16);
                v103 = v71;
                if (v114 >= 1)
                {
                  do
                  {
                    while (1)
                    {
                      v116 = (unsigned __int8 *)(v103 + 1);
                      v115 = *v103;
                      else {
                        v103 += 9;
                      }
                      if (!--v114) {
                        goto LABEL_234;
                      }
                    }

                    v117 = *v116;
                    if ((v117 & 0x80) != 0)
                    {
                      v119 = v103[2];
                      if (v103[2] < 0)
                      {
                        v120 = v103[3];
                        if (v120 < 0)
                        {
                          v121 = sub_18129BD74(v103 + 1, &v148);
                          v71 = v46;
                          if (HIDWORD(v148)) {
                            v117 = -1;
                          }
                          else {
                            v117 = v148;
                          }
                          v118 = v121;
                        }

                        else
                        {
                          v117 = v120 & 0x7F | (v117 << 14) & 0x1FC07F | ((v119 & 0x7F) << 7);
                          v118 = 3LL;
                        }
                      }

                      else
                      {
                        v117 = ((v117 & 0x7F) << 7) | v119;
                        v118 = 2LL;
                      }
                    }

                    else
                    {
                      v118 = 1LL;
                    }

                    v103 = (char *)&v116[v118 + v117];
                    --v114;
                  }

                  while (v114);
                }

          if (++v235 == v31)
          {
            v281 = (uint64_t (**)(void *))&off_18C4653A8;
            if (dword_18C465380)
            {
              v282 = (uint64_t *)v5;
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v73);
              --qword_18C468B10;
              off_18C4653A8(v73);
              v73 = (void *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                v281 = (uint64_t (**)(void *))&xmmword_18C465410;
                goto LABEL_311;
              }
            }

            else
            {
              v282 = (uint64_t *)v5;
LABEL_311:
              (*v281)(v73);
            }

            v283 = sub_1813B013C(a1, v307);
            if ((_DWORD)v283)
            {
LABEL_313:
              v20 = v283;
              v28 = 0;
LABEL_314:
              v27 = v307;
              v26 = v302;
LABEL_26:
              sub_1813AFFD4(a1, v27);
              sub_1813AFFD4(a1, v26);
              if ((v28 & 1) == 0)
              {
LABEL_27:
                v29 = &off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_32;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v25);
                --qword_18C468B10;
                off_18C4653A8(v25);
                v25 = xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  v29 = &xmmword_18C465410;
LABEL_32:
                  (*v29)(v25);
                }
              }

              return v20;
            }

            v284 = (uint64_t **)v302;
            v285 = *(void *)(v302 + 8);
            if (v285)
            {
LABEL_316:
              *(void *)&v318 = *(void *)(v307 + 8);
              *(void *)&v321 = v285;
              v286 = *v284;
              if (*(void *)(a2 + 8) == 1LL)
              {
                v287 = (a4 + 1);
                v283 = sub_1813B208C(a1, *v284, &v321, v287);
                if ((_DWORD)v283) {
                  goto LABEL_313;
                }
              }

              else
              {
                v283 = sub_1813B4134(a1, v284, &v317);
                if ((_DWORD)v283) {
                  goto LABEL_313;
                }
                sub_1813B41CC(a1, (uint64_t)v286, (unint64_t *)&v321, v317);
                v283 = sub_1813B4220((unsigned __int8 *)a1, v286, (uint64_t)&v321);
                if ((_DWORD)v283) {
                  goto LABEL_313;
                }
                v287 = (a4 + 1);
              }

              v283 = sub_1813B208C(a1, *(void *)v307, &v318, v287);
              if ((_DWORD)v283) {
                goto LABEL_313;
              }
              v27 = v307;
              v288 = *(void *)(v307 + 24);
              if (__rev16(*(unsigned __int16 *)(v288 + 2)))
              {
                v289 = 0;
                v290 = 0;
                if (a4) {
                  v291 = sub_1813B4678;
                }
                else {
                  v291 = sub_1813B458C;
                }
                do
                {
                  v292 = (unsigned __int8 *)(v289 * *(unsigned __int8 *)(a1 + 39) + v288);
                  if (a4 >= 1)
                  {
                    for (j = *(uint64_t **)(a1
                                          + 8LL
                                          * ((((v292[8] << 24) | (v292[9] << 16) | (v292[10] << 8))
                                            + v292[11])
                                           % 0x61)
                                          + 192); j; j = (uint64_t *)j[4])
                    {
                      if (j[1] == v293) {
                        break;
                      }
                    }

                    v295 = (uint64_t *)v27;
                    do
                    {
                      if (v295 == j)
                      {
                        v28 = 0;
                        v20 = 267LL;
                        v25 = v309;
                        v26 = v302;
                        goto LABEL_26;
                      }

                      v295 = (uint64_t *)*v295;
                    }

                    while (v295);
                    if (j)
                    {
                      sub_1813AFFD4(a1, *j);
                      v27 = v307;
                      ++*(_DWORD *)(v307 + 16);
                      *j = v307;
                    }
                  }

                  v296 = v27;
                  v297 = v291(a1, v293, *(void *)(v27 + 8));
                  if ((_DWORD)v297)
                  {
                    v20 = v297;
                    v28 = 0;
                    v25 = v309;
                    v27 = v296;
                    v26 = v302;
                    goto LABEL_26;
                  }

                  if (v293 == *v282) {
                    v290 = 1;
                  }
                  ++v289;
                  v288 = *(void *)(v296 + 24);
                  v27 = v296;
                }

                while (v289 < bswap32(*(unsigned __int16 *)(v288 + 2)) >> 16);
                v25 = v309;
                v26 = v302;
                if (*(void *)(a2 + 8) == 1LL) {
                  goto LABEL_348;
                }
                if (v290) {
                  goto LABEL_354;
                }
LABEL_353:
                v298 = sub_1813B4764(a1, *v282, v26, a4);
                v26 = v302;
                if (!(_DWORD)v298)
                {
LABEL_354:
                  v301 = sub_1813AFFD4(a1, v307);
                  if ((_DWORD)v301)
                  {
                    v20 = v301;
                    v28 = 0;
                    v27 = 0LL;
                    v26 = v302;
                  }

                  else
                  {
                    v20 = sub_1813AFFD4(a1, v302);
                    v28 = 0;
                    v26 = 0LL;
                    v27 = 0LL;
                  }

                  goto LABEL_26;
                }
              }

              else
              {
                v26 = v302;
                if (*(void *)(a2 + 8) != 1LL) {
                  goto LABEL_353;
                }
LABEL_348:
                v299 = 0;
                while (1)
                {
                  v300 = sub_1813AC85C(a1, v26, v299);
                  v298 = sub_1813B4764(a1, v300, v26, a4);
                  if ((_DWORD)v298) {
                    break;
                  }
                }
              }
            }

            else
            {
              v26 = v302;
              v298 = sub_1813B013C(a1, v302);
              if (!(_DWORD)v298)
              {
                v285 = *(void *)(v302 + 8);
                v284 = (uint64_t **)v302;
                goto LABEL_316;
              }
            }

            v20 = v298;
            v28 = 0;
            v27 = v307;
            goto LABEL_26;
          }

          continue;
        }
      }
    }
  }

  v20 = sub_1813B4220((unsigned __int8 *)a1, (uint64_t *)a2, v5);
  if ((_DWORD)v20) {
    return v20;
  }
  v21 = *(void *)v5;
  v22 = *(void *)(a2 + 8);
  if (a4) {
    return sub_1813B4678(a1, v21, v22);
  }
  else {
    return sub_1813B458C(a1, v21, v22);
  }
}

uint64_t sub_1812CBDB8(const char *a1, const char *a2, int a3)
{
  v7 = 0LL;
  ppDb = 0LL;
  uint64_t v5 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0LL);
  if (!(_DWORD)v5)
  {
    sqlite3_busy_timeout(ppDb, 60000);
    sqlite3_extended_result_codes(ppDb, 1);
    sqlite3_db_config(ppDb, 1006, 1LL, 0LL);
    uint64_t v5 = sqlite3_open_v2(a2, &v7, a3 | 6, 0LL);
    if (!(_DWORD)v5)
    {
      sqlite3_busy_timeout(v7, 60000);
      sqlite3_extended_result_codes(v7, 1);
      uint64_t v5 = sqlite3_file_control(v7, 0LL, 102, ppDb);
    }
  }

  if (ppDb) {
    sqlite3_close_v2(ppDb);
  }
  if (v7) {
    sqlite3_close(v7);
  }
  return v5;
}

uint64_t _sqlite3_apple_unarchive(const char *a1, const char *a2, int a3, uint64_t a4, uint64_t a5, char **a6)
{
  v127[1] = *(sqlite3 **)MEMORY[0x1895F89C0];
  if (qword_18C550488 != -1) {
    dispatch_once(&qword_18C550488, &unk_189B6CAF0);
  }
  unsigned int v116 = -1;
  uint64_t v11 = _sqlite3_apple_archive_type(a1, (int *)&v116, a6);
  if (!(_DWORD)v11)
  {
    uint64_t v12 = v116;
    if (v116 - 6 <= 0xFFFFFFFC)
    {
      if (a6) {
        *a6 = sqlite3_mprintf( "Source file '%s' is not an SQLite database file or backup archive, or is encrypted.  Type is %d",  a1,  v116);
      }
      return 0xFFFFFFFFLL;
    }

    v13 = (void **)calloc(1uLL, 0x20uLL);
    if ((_DWORD)v12 == 3)
    {
      uint64_t v11 = sub_1812CBDB8(a1, a2, a3);
      *v13 = strdup(a2);
      memset(&v115, 0, sizeof(v115));
      v21 = sqlite3_mprintf("%s-wal", a2);
      if (stat(v21, &v115) || v115.st_size < 1)
      {
        free(v21);
        int v22 = 1;
      }

      else
      {
        *v13 = v21;
        int v22 = 2;
      }

      memset(&v115, 0, sizeof(v115));
      v32 = sqlite3_mprintf("%s-journal", a2);
      if (stat(v32, &v115) || v115.st_size < 1)
      {
        free(v32);
        if (!(_DWORD)v11) {
          goto LABEL_126;
        }
      }

      else
      {
        ++v22;
        *v13 = v32;
        if (!(_DWORD)v11) {
          goto LABEL_126;
        }
      }

LABEL_138:
      free(v13);
      return v11;
    }

    filename = (char *)a2;
    if ((_DWORD)v12 == 5)
    {
      memset(&v122, 0, sizeof(v122));
      if (stat(a1, &v122) == -1)
      {
        v23 = (FILE *)*MEMORY[0x1895F89D0];
        v24 = __error();
        fprintf(v23, "stat failed for %d\n", *v24);
      }

      int v25 = open(a2, 1538, v122.st_mode | 0x80u);
      int v26 = open(a1, 0, 0LL);
      if (v26 < 0)
      {
        v33 = (FILE *)*MEMORY[0x1895F89D0];
        v34 = __error();
        fprintf(v33, "open destination failed for %d\n", *v34);
        close(v25);
      }

      else
      {
        int v27 = v26;
        uint64_t v106 = a5;
        v111 = valloc(0x100000uLL);
        __int128 v120 = 0u;
        __int128 v121 = 0u;
        __int128 block = 0u;
        sub_1812CA364(v27, (uint64_t)&block);
        uint64_t v28 = DWORD2(v120);
        v29 = (_BYTE *)v121;
        int __dst = v25;
        int v101 = a3;
        int v109 = v27;
        if ((void)v121)
        {
          v30 = calloc(1uLL, v121 + 1);
          if (read(v27, v30, (size_t)v29))
          {
            int v31 = off_18C550490(&v123, 1LL, v28);
            if (v31)
            {
              fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_init failed for %d\n", v31);
              v29 = 0LL;
            }

            else
            {
              unsigned int v105 = v28;
              v51 = v13;
              v52 = valloc(0x80000uLL);
              uint64_t v53 = 0LL;
              v54 = 0LL;
              v102 = v30;
              uint64_t v125 = (uint64_t)v30;
              v126 = v29;
              v55 = (FILE **)MEMORY[0x1895F89D0];
              do
              {
                v123 = v52;
                uint64_t v124 = 0x80000LL;
                unsigned int v57 = off_18C550498(&v123, 1LL);
                if (v57 >= 2) {
                  fprintf(*v55, "compression_stream_process bravo failed for %d\n", v57);
                }
                size_t v58 = 0x80000 - v124;
                if (0x80000 - v124 >= 1)
                {
                  if (v54) {
                    v56 = (char *)realloc(v54, v58 + v53);
                  }
                  else {
                    v56 = (char *)malloc(v58 + v53);
                  }
                  v54 = v56;
                  memcpy(&v56[v53], v52, v58);
                  v53 += v58;
                }
              }

              while (!v57);
              off_18C5504A0(&v123);
              v29 = realloc(v54, v53 + 1);
              v29[v53] = 0;
              v13 = v51;
              int v25 = __dst;
              uint64_t v28 = v105;
              v30 = v102;
            }
          }

          else
          {
            v29 = 0LL;
          }

          free(v30);
        }

        v59 = valloc(0x100000uLL);
        int v60 = off_18C550490(&v123, 1LL, v28);
        if (v60) {
          fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_init failed for %d\n", v60);
        }
        v103 = v29;
        int v61 = v27;
        uint64_t v62 = (uint64_t)v111;
        ssize_t v63 = read(v61, v111, 0x100000uLL);
        if (v63 >= 1)
        {
          v64 = (FILE **)MEMORY[0x1895F89D0];
          do
          {
            uint64_t v125 = v62;
            v126 = (_BYTE *)v63;
            do
            {
              v123 = v59;
              uint64_t v124 = 0x100000LL;
              unsigned int v66 = off_18C550498(&v123, 0LL);
              if (v66 >= 2) {
                fprintf(*v64, "compression_stream_process alpha failed for %d\n", v66);
              }
              if (v124 != 0x100000)
              {
                uint64_t v67 = 0x100000 - v124;
                ssize_t v68 = write(v25, v59, 0x100000 - v124);
                if (v68 != v67)
                {
                  ssize_t v69 = v68;
                  v70 = *v64;
                  int v99 = *__error();
                  v71 = v70;
                  int v25 = __dst;
                  fprintf(v71, "last write ended with return %ld expected %ld with errno %d\n", v69, v67, v99);
                }
              }

              if (v66) {
                BOOL v65 = 1;
              }
              else {
                BOOL v65 = v126 == 0LL;
              }
            }

            while (!v65);
            uint64_t v62 = (uint64_t)v111;
            ssize_t v63 = read(v109, v111, 0x100000uLL);
          }

          while (v63 > 0);
        }

        uint64_t v125 = v62;
        v126 = 0LL;
        v72 = (FILE **)MEMORY[0x1895F89D0];
        do
        {
          v123 = v59;
          uint64_t v124 = 0x100000LL;
          unsigned int v73 = off_18C550498(&v123, 1LL);
          if (v73 >= 2) {
            fprintf(*v72, "compression_stream_process bravo failed for %d\n", v73);
          }
          if (v124 != 0x100000)
          {
            uint64_t v74 = 0x100000 - v124;
            ssize_t v75 = write(v25, v59, 0x100000 - v124);
            if (v75 != v74)
            {
              ssize_t v76 = v75;
              v77 = *v72;
              int v100 = *__error();
              v78 = v77;
              int v25 = __dst;
              fprintf(v78, "last write ended with return %ld expected %ld with errno %d\n", v76, v74, v100);
            }
          }
        }

        while (!v73);
        off_18C5504A0(&v123);
        close(v25);
        close(v109);
        free(v111);
        free(v59);
        a2 = filename;
        if (v103)
        {
          v127[0] = 0LL;
          if (!sqlite3_open_v2(filename, v127, v101 | 2, 0LL))
          {
            sqlite3_busy_timeout(v127[0], 60000);
            sqlite3_extended_result_codes(v127[0], 1);
            int64_t v79 = strlen(v103);
            if (v79 >= 1)
            {
              int64_t v80 = v79;
              v81 = v103;
              do
              {
                v82 = strstr(v81, ";\n");
                if (!v82) {
                  break;
                }
                v83 = v82;
                size_t v84 = v82 - v81;
                v85 = (char *)calloc(1uLL, v82 - v81 + 1);
                strncpy(v85, v81, v84);
                sqlite3_exec(v127[0], v85, 0LL, 0LL, 0LL);
                free(v85);
                v81 = v83 + 2;
              }

              while (v83 + 2 - v103 < v80);
            }
          }

          if (v127[0]) {
            sqlite3_close(v127[0]);
          }
          free(v103);
        }

        a5 = v106;
      }

      goto LABEL_125;
    }

    if ((_DWORD)v12 != 4)
    {
      if (a6) {
        *a6 = sqlite3_mprintf("Unknown source file type %ld", v12);
      }
      uint64_t v11 = 0xFFFFFFFFLL;
      goto LABEL_138;
    }

    v127[0] = (sqlite3 *)-1LL;
    if (truncate(a2, 0LL) && *__error() != 2)
    {
      v14 = (FILE *)*MEMORY[0x1895F89D0];
      v15 = __error();
      fprintf(v14, "truncate failed on '%s' with errno %d\n", a2, *v15);
    }

    v16 = dispatch_queue_create("decompressor", 0LL);
    memset(&v122, 0, sizeof(v122));
    if (stat(a1, &v122) == -1)
    {
      v17 = (FILE *)*MEMORY[0x1895F89D0];
      v18 = __error();
      fprintf(v17, "stat failed for %d\n", *v18);
    }

    if (pipe((int *)v127))
    {
      v19 = (FILE *)*MEMORY[0x1895F89D0];
      v20 = __error();
      fprintf(v19, "pipe failed for %d\n", *v20);
LABEL_125:
      *v13 = strdup(a2);
      int v22 = 1;
LABEL_126:
      size_t v88 = strlen((const char *)*v13);
      uint64_t v11 = a5;
      if (v22 == 1)
      {
        size_t v89 = v88 + 9;
      }

      else
      {
        size_t v89 = v88 + strlen((const char *)v13[1]) + 18;
        if (v22 != 2) {
          v89 += strlen((const char *)v13[2]) + 9;
        }
      }

      size_t v90 = v89 + 8;
      v91 = sqlite3_malloc(v90);
      bzero(v91, v90);
      v92 = (char *)&v91[v22 + 1];
      size_t v93 = strlen((const char *)*v13);
      void *v91 = v92;
      strcpy(v92, (const char *)*v13);
      if (v22 != 1)
      {
        v94 = &v92[v93 + 1];
        size_t v95 = strlen((const char *)v13[1]);
        v91[1] = v94;
        strcpy(v94, (const char *)v13[1]);
        if (v22 != 2)
        {
          v96 = &v94[v95 + 1];
          v91[2] = v96;
          strcpy(v96, (const char *)v13[2]);
        }
      }

      if (v11)
      {
        v97 = (void *)v11;
        uint64_t v11 = 0LL;
        void *v97 = v91;
      }

      goto LABEL_135;
    }

    uint64_t v107 = a5;
    v123 = 0LL;
    uint64_t v124 = (uint64_t)&v123;
    uint64_t v125 = 0x2000000000LL;
    LODWORD(v126) = HIDWORD(v127[0]);
    fcntl((int)v127[0], 73, 1LL);
    fcntl(SHIDWORD(v127[0]), 73, 1LL);
    *(void *)&__int128 block = MEMORY[0x1895F87A8];
    *((void *)&block + 1) = 0x40000000LL;
    *(void *)&__int128 v120 = sub_1812CD158;
    *((void *)&v120 + 1) = &unk_189B6CB80;
    *(void *)&__int128 v121 = &v123;
    *((void *)&v121 + 1) = a1;
    dispatch_async(v16, &block);
    ppDb = 0LL;
    if (!sqlite3_open_v2(a2, &ppDb, a3 | 6, 0LL))
    {
      v104 = v13;
      sqlite3_busy_timeout(ppDb, 60000);
      sqlite3_extended_result_codes(ppDb, 1);
      sub_1812CEBCC(ppDb);
      v35 = (char *)malloc(0x80001uLL);
      v35[0x80000] = 0;
      ssize_t v36 = read((int)v127[0], v35, 0x80000uLL);
      if (v36)
      {
        *(void *)v110 = v16;
        unint64_t v37 = 0LL;
        unint64_t v38 = 0x80000LL;
        __dsta = v35;
        do
        {
          v37 += v36;
          v39 = __dsta;
          __dsta[v37] = 0;
          if (v37 >= v38)
          {
            uint64_t v40 = v35 - __dsta;
            if (v35 == __dsta)
            {
              v39 = (char *)realloc(v35, v38 + 524289);
              v41 = v39 + 0x80000;
              v38 += 0x80000LL;
            }

            else
            {
              memmove(__dsta, v35, v38 - v40);
              v37 -= v40;
              v41 = &__dsta[v37];
            }

            v112 = (void *)v38;
            char *v41 = 0;
            v35 = v39;
          }

          else
          {
            v112 = (void *)v38;
          }

          int v42 = strncmp(v35, "CREATE TRIGGER", 0xEuLL);
          if (v42) {
            v43 = ";\n";
          }
          else {
            v43 = "END;\n";
          }
          if (v42) {
            unsigned int v44 = 2;
          }
          else {
            unsigned int v44 = 5;
          }
          __dsta = v39;
          v45 = &v39[v37];
          do
          {
            v47 = strstr(v35, v43);
            if (!v47) {
              break;
            }
            v48 = v47;
            if (v47 >= v45) {
              break;
            }
            uint64_t v49 = v44 - 1;
            v47[v49] = 0;
            if (sqlite3_complete(v35))
            {
              errmsg = 0LL;
              int v50 = sqlite3_exec(ppDb, v35, 0LL, 0LL, &errmsg);
              if (v50 && v50 != 100) {
                fprintf( (FILE *)*MEMORY[0x1895F89D0],  "executing sql '%s' returned error %x with message:'%s'\n",  v35,  v50,  errmsg);
              }
              if (errmsg) {
                sqlite3_free(errmsg);
              }
              v48[v49] = 10;
              v35 = &v48[v44];
              int v46 = strncmp(v35, "CREATE TRIGGER", 0xEuLL);
              if (v46) {
                v43 = ";\n";
              }
              else {
                v43 = "END;\n";
              }
              if (v46) {
                unsigned int v44 = 2;
              }
              else {
                unsigned int v44 = 5;
              }
            }
          }

          while (v35 < v45);
          unint64_t v38 = (unint64_t)v112;
          ssize_t v36 = read((int)v127[0], v45, (size_t)v112 - v37);
          a2 = filename;
        }

        while (v36);
        v13 = v104;
        v16 = *(dispatch_queue_s **)v110;
        v86 = __dsta;
        if (!__dsta) {
          goto LABEL_120;
        }
      }

      else
      {
        v86 = v35;
        v13 = v104;
      }

      free(v86);
    }

          v8 = 1LL;
          goto LABEL_5;
        }

        goto LABEL_109;
      }

      if (byte_1813C6343[v36] == byte_1813C6343[v37])
      {
LABEL_109:
        ++v35;
        ++v34;
        continue;
      }

      break;
    }

    unint64_t v38 = "tokenchars";
    for (j = *(_BYTE **)(a2 + 8 * v31); ; ++j)
    {
      uint64_t v40 = *j;
      v41 = *(unsigned __int8 *)v38;
      if ((_DWORD)v40 != (_DWORD)v41) {
        break;
      }
      if (!*j)
      {
        int v50 = v7;
        v51 = 1;
        goto LABEL_133;
      }

void *sub_1812CCB40()
{
  result = dlopen("/usr/lib/libcompression.dylib", 8);
  if (result)
  {
    v1 = result;
    off_18C550490 = (uint64_t (*)(void, void, void))dlsym(result, "compression_stream_init");
    off_18C550498 = (uint64_t (*)(void, void))dlsym(v1, "compression_stream_process");
    result = dlsym(v1, "compression_stream_destroy");
    off_18C5504A0 = (uint64_t (*)(void))result;
  }

  return result;
}

uint64_t sub_1812CCBB4(sqlite3 *db, char *zSql, char *a3, unsigned int a4)
{
  ppStmt = 0LL;
  do
    uint64_t result = sqlite3_prepare(db, zSql, -1, &ppStmt, 0LL);
  while ((_DWORD)result == 5);
  if (!(_DWORD)result)
  {
    do
      int v9 = sqlite3_step(ppStmt);
    while (v9 == 5);
    if (v9 == 100)
    {
      v10 = sqlite3_column_text(ppStmt, 0);
      if (v10)
      {
        if (a3)
        {
          if (*v10) {
            strlcpy(a3, (const char *)v10, a4);
          }
        }
      }
    }

    return sqlite3_finalize(ppStmt);
  }

  return result;
}

uint64_t sub_1812CCC60(uint64_t a1)
{
  uint64_t result = close(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
  return result;
}

ssize_t sub_1812CCCC4(const char *a1, int a2)
{
  size_t v4 = strlen(a1);
  return write(a2, a1, v4);
}

void sub_1812CCCF4(int a1, uint64_t a2)
{
  size_t v4 = (char *)calloc(1uLL, 0x400uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 > 516)
  {
    switch(v6)
    {
      case 517LL:
        v7 = "ZLIB";
        goto LABEL_15;
      case 774LL:
        v7 = "LZMA";
        goto LABEL_15;
      case 2049LL:
        v7 = "LZFSE";
        goto LABEL_15;
    }

const char *sub_1812CCE14(const char *result)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  if (result)
  {
    v1 = result;
    if (*result)
    {
      MEMORY[0x1895F8858]();
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      return (const char *)unlink(v1);
    }
  }

  return result;
}

char *sub_1812CCF60()
{
  v0 = calloc(1uLL, 0x400uLL);
  if (!confstr(65537, (char *)v0, 0x400uLL))
  {
    free(v0);
    v0 = 0LL;
  }

  size_t v1 = strlen((const char *)v0);
  size_t v2 = v1 + 24;
  uint64_t v3 = (char *)calloc(1uLL, v1 + 24);
  strlcpy(v3, (const char *)v0, v1 + 24);
  if (v3[v1 - 1] != 47) {
    strlcat(v3, "/", v2);
  }
  strlcat(v3, "tmpsqlitearchiveXXXXXX", v2);
  free(v0);
  return v3;
}

uint64_t sub_1812CD020(uint64_t result, int a2, const char **a3)
{
  if (a2 <= 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(result + 16);
  uint64_t v6 = *a3;
  if (*a3)
  {
    size_t v7 = strlen(*a3);
    if (v7)
    {
      size_t v8 = v7 + 1;
      int v9 = (char *)calloc(1uLL, v7 + 1);
    }

    else
    {
      int v9 = 0LL;
      size_t v8 = 1LL;
    }

    strlcpy(v9, v6, v8);
    v10 = a3[1];
    if (v10) {
      goto LABEL_9;
    }
  }

  else
  {
    int v9 = 0LL;
    v10 = a3[1];
    if (v10)
    {
LABEL_9:
      size_t v12 = strlen(v10);
      if (v12)
      {
        size_t v13 = v12 + 1;
        uint64_t v11 = (char *)calloc(1uLL, v12 + 1);
      }

      else
      {
        uint64_t v11 = 0LL;
        size_t v13 = 1LL;
      }

      strlcpy(v11, v10, v13);
      goto LABEL_13;
    }
  }

  uint64_t v11 = 0LL;
LABEL_13:
  unsigned int v14 = *(_DWORD *)(v4 + 20);
  if (v5 >= v14)
  {
    unsigned int v15 = v14 + 512;
    size_t v16 = 8LL * (v14 + 512);
    *(void *)uint64_t v4 = realloc(*(void **)v4, v16);
    *(void *)(v4 + 8) = realloc(*(void **)(v4 + 8), v16);
    *(_DWORD *)(v4 + 20) = v15;
  }

  uint64_t v17 = 8 * v5;
  *(void *)(*(void *)v4 + v17) = v9;
  *(void *)(*(void *)(v4 + 8) + v17) = v11;
  ++*(_DWORD *)(v4 + 16);
  return 0LL;
}

void sub_1812CD158(uint64_t a1)
{
  int v2 = open(*(const char **)(a1 + 40), 0, 0LL);
  if (v2 < 0)
  {
    v24 = (FILE *)*MEMORY[0x1895F89D0];
    int v25 = __error();
    fprintf(v24, "open destination failed for %d\n", *v25);
  }

  else
  {
    int v3 = v2;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v31 = 0u;
    sub_1812CA364(v2, (uint64_t)&v31);
    uint64_t v4 = DWORD2(v32);
    uint64_t v5 = valloc(0x100000uLL);
    uint64_t v6 = valloc(0x100000uLL);
    int v7 = off_18C550490(&v27, 1LL, v4);
    if (v7) {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_init failed for %d\n", v7);
    }
    ssize_t v8 = read(v3, v5, 0x100000uLL);
    int v26 = v5;
    if (v8 >= 1)
    {
      int v9 = (FILE **)MEMORY[0x1895F89D0];
      do
      {
        v29 = v5;
        ssize_t v30 = v8;
        do
        {
          int v27 = v6;
          uint64_t v28 = 0x100000LL;
          unsigned int v11 = off_18C550498(&v27, 0LL);
          if (v11 >= 2) {
            fprintf(*v9, "compression_stream_process alpha failed for %d\n", v11);
          }
          if (v28 != 0x100000)
          {
            uint64_t v12 = 0x100000 - v28;
            ssize_t v13 = write(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v6, 0x100000 - v28);
            if (v13 != v12)
            {
              ssize_t v14 = v13;
              unsigned int v15 = *v9;
              size_t v16 = __error();
              fprintf(v15, "last write ended with return %ld expected %ld with errno %d\n", v14, v8, *v16);
            }
          }

          if (v11) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v30 == 0;
          }
        }

        while (!v10);
        uint64_t v5 = v26;
        ssize_t v8 = read(v3, v26, 0x100000uLL);
      }

      while (v8 > 0);
    }

    v29 = v5;
    ssize_t v30 = 0LL;
    uint64_t v17 = (FILE **)MEMORY[0x1895F89D0];
    do
    {
      int v27 = v6;
      uint64_t v28 = 0x100000LL;
      unsigned int v18 = off_18C550498(&v27, 1LL);
      if (v18 >= 2) {
        fprintf(*v17, "compression_stream_process bravo failed for %d\n", v18);
      }
      if (v28 != 0x100000)
      {
        uint64_t v19 = 0x100000 - v28;
        ssize_t v20 = write(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v6, 0x100000 - v28);
        if (v20 != v19)
        {
          ssize_t v21 = v20;
          int v22 = *v17;
          v23 = __error();
          fprintf(v22, "last write ended with return %ld expected %ld with errno %d\n", v21, v8, *v23);
        }
      }
    }

    while (!v18);
    off_18C5504A0(&v27);
    close(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
    close(v3);
    free(v26);
    free(v6);
  }

uint64_t sub_1812CD448()
{
  qword_18C4652E0 = (uint64_t)sqlite3_vfs_find(0LL);
  if (!qword_18C4652E0) {
    return 1LL;
  }
  dword_18C4652C4 = 40;
  LODWORD(result) = sqlite3_vfs_register((sqlite3_vfs *)&unk_18C4652C0, 0);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return 256LL;
  }
}

uint64_t sub_1812CD49C(int a1, char *a2, uint64_t a3, __int16 a4)
{
  *(void *)(a3 + 32) = 0LL;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a4 & 0x100) == 0) {
    return 14LL;
  }
  sqlite3_int64 v6 = sqlite3_uri_int64(a2, "ptr", 0LL);
  *(void *)(a3 + 24) = v6;
  if (!v6) {
    return 14LL;
  }
  sqlite3_int64 v7 = sqlite3_uri_int64(a2, "sz", 0LL);
  *(void *)(a3 + 8) = v7;
  if (v7 < 0) {
    return 14LL;
  }
  sqlite3_int64 v8 = sqlite3_uri_int64(a2, "max", v7);
  *(void *)(a3 + 16) = v8;
  if (v8 < *(void *)(a3 + 8)) {
    return 14LL;
  }
  int v10 = sqlite3_uri_BOOLean(a2, "freeonclose", 0);
  uint64_t result = 0LL;
  *(_DWORD *)(a3 + 32) = v10;
  *(void *)a3 = &unk_189B6CBE0;
  return result;
}

uint64_t sub_1812CD55C()
{
  return 2570LL;
}

uint64_t sub_1812CD564(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0LL;
}

uint64_t sub_1812CD570(int a1, const char *a2, int a3, char *a4)
{
  return 0LL;
}

uint64_t sub_1812CD5A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 72LL))();
}

uint64_t sub_1812CD5B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 80LL))();
}

uint64_t sub_1812CD5BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 88LL))();
}

uint64_t sub_1812CD5C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 96LL))();
}

uint64_t sub_1812CD5D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104LL))();
}

uint64_t sub_1812CD5E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 112LL))();
}

uint64_t sub_1812CD5EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 120LL))();
}

uint64_t sub_1812CD5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 128LL))();
}

uint64_t sub_1812CD604(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 136LL))();
}

uint64_t sub_1812CD610(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32)) {
    sqlite3_free(*(void **)(a1 + 24));
  }
  return 0LL;
}

uint64_t sub_1812CD634(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  return 0LL;
}

uint64_t sub_1812CD660(void *a1, void *__src, int a3, uint64_t a4)
{
  size_t v7 = a3;
  uint64_t v8 = a3 + a4;
  uint64_t v9 = a1[1];
  if (v8 > v9)
  {
    if (v8 > a1[2]) {
      return 13LL;
    }
    if (a4 > v9) {
      bzero((void *)(a1[3] + v9), a4 - v9);
    }
    a1[1] = v8;
  }

  memcpy((void *)(a1[3] + a4), __src, v7);
  return 0LL;
}

uint64_t sub_1812CD6EC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  BOOL v5 = a2 <= v4;
  size_t v6 = a2 - v4;
  if (!v5)
  {
    if (a1[2] < a2) {
      return 13LL;
    }
    bzero((void *)(a1[3] + v4), v6);
  }

  uint64_t result = 0LL;
  a1[1] = a2;
  return result;
}

uint64_t sub_1812CD740()
{
  return 0LL;
}

uint64_t sub_1812CD748(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 8);
  return 0LL;
}

uint64_t sub_1812CD758()
{
  return 0LL;
}

uint64_t sub_1812CD760()
{
  return 0LL;
}

uint64_t sub_1812CD768(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0LL;
}

uint64_t sub_1812CD774(uint64_t a1, int a2, char **a3)
{
  if (a2 != 12) {
    return 12LL;
  }
  uint64_t v4 = sqlite3_mprintf("mem(%p,%lld)", *(const void **)(a1 + 24), *(void *)(a1 + 8));
  uint64_t result = 0LL;
  *a3 = v4;
  return result;
}

uint64_t sub_1812CD7CC()
{
  return 1024LL;
}

uint64_t sub_1812CD7D4()
{
  return 5633LL;
}

uint64_t sub_1812CD7DC()
{
  return 5386LL;
}

uint64_t sub_1812CD7E4()
{
  return 5130LL;
}

uint64_t sub_1812CD7F0()
{
  return 0LL;
}

uint64_t sub_1812CD7F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = *(void *)(a1 + 24) + a2;
  return 0LL;
}

uint64_t sub_1812CD80C()
{
  return 0LL;
}

uint64_t sub_1812CD814( sqlite3 *a1, const char *a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  int v13 = 0;
  uint64_t v15 = 0LL;
  uint64_t result = sqlite3_exec(a1, "BEGIN", 0LL, 0LL, 0LL);
  unsigned int v14 = result;
  if (!(_DWORD)result)
  {
    uint64_t v12 = a1;
    size_t v16 = a4;
    uint64_t v17 = a5;
    if (!a2) {
      a2 = "main";
    }
    a4("PRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n", a5);
    if (a3)
    {
      sub_1812CD964( (uint64_t)&v12,  "SELECT name, type, sql FROM %w.sqlite_schema WHERE tbl_name=%Q COLLATE nocase AND type=='table'  AND sql NOT NULL",  a2,  a3);
      sub_1812CD9F8( (uint64_t)&v12,  "SELECT sql FROM %w.sqlite_schema WHERE sql NOT NULL  AND type IN ('index','trigger','view')  AND tbl_name=%Q COLLATE nocase",  a2,  a3);
    }

    else
    {
      sub_1812CD964( (uint64_t)&v12,  "SELECT name, type, sql FROM %w.sqlite_schema WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'",  a2);
      sub_1812CD964((uint64_t)&v12, "SELECT name, type, sql FROM %w.sqlite_schema WHERE name=='sqlite_sequence'", a2);
      sub_1812CD9F8( (uint64_t)&v12,  "SELECT sql FROM sqlite_schema WHERE sql NOT NULL AND type IN ('index','trigger','view')",  0LL);
    }

    if ((_DWORD)v15) {
      a4("PRAGMA writable_schema=OFF;\n", a5);
    }
    if (v13) {
      unsigned int v11 = "ROLLBACK; -- due to errors\n";
    }
    else {
      unsigned int v11 = "COMMIT;\n";
    }
    a4(v11, a5);
    sqlite3_exec(a1, "COMMIT", 0LL, 0LL, 0LL);
    return v14;
  }

  return result;
}

void sub_1812CD964(uint64_t a1, char *a2, ...)
{
  errmsg = 0LL;
  int v3 = sqlite3_vmprintf(a2, va);
  sqlite3_exec(*(sqlite3 **)a1, v3, (int (__cdecl *)(void *, int, char **, char **))sub_1812CDBE4, (void *)a1, &errmsg);
  sqlite3_free(v3);
  if (errmsg)
  {
    sub_1812CE7C8(a1, "/****** %s ******/\n", errmsg);
    sqlite3_free(errmsg);
    ++*(_DWORD *)(a1 + 8);
  }

void sub_1812CD9F8(uint64_t a1, char *a2, ...)
{
  int v3 = sqlite3_vmprintf(a2, va);
  if (!v3)
  {
    *(_DWORD *)(a1 + 12) = 7;
    goto LABEL_25;
  }

  uint64_t v4 = v3;
  int v5 = sqlite3_prepare_v2(*(sqlite3 **)a1, v3, -1, &ppStmt, 0LL);
  sqlite3_free(v4);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = ppStmt == 0LL;
  }
  if (v6)
  {
    size_t v7 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1812CE7C8(a1, "/**** ERROR: (%d) %s *****/\n", v5, v7);
LABEL_25:
    ++*(_DWORD *)(a1 + 8);
    return;
  }

  int v8 = sqlite3_step(ppStmt);
  int v9 = sqlite3_column_count(ppStmt);
  if (v8 == 100)
  {
    int v10 = v9;
    do
    {
      uint64_t v12 = sqlite3_column_text(ppStmt, 0);
      (*(void (**)(const unsigned __int8 *, void))(a1 + 24))(v12, *(void *)(a1 + 32));
      if (v10 >= 2)
      {
        for (int i = 1; i != v10; ++i)
        {
          (*(void (**)(const char *, void))(a1 + 24))(",", *(void *)(a1 + 32));
          unsigned int v14 = *(void (**)(const unsigned __int8 *, void))(a1 + 24);
          uint64_t v15 = sqlite3_column_text(ppStmt, i);
          v14(v15, *(void *)(a1 + 32));
        }
      }

      if (v12) {
        size_t v16 = (char *)v12;
      }
      else {
        size_t v16 = &byte_1813CEAEE;
      }
      do
      {
        while (*v16++ == 45)
        {
          if (*v16 == 45)
          {
            unsigned int v11 = "\n;\n";
            goto LABEL_12;
          }
        }
      }

      while (*(v16 - 1));
      unsigned int v11 = ";\n";
LABEL_12:
      (*(void (**)(const char *, void))(a1 + 24))(v11, *(void *)(a1 + 32));
    }

    while (sqlite3_step(ppStmt) == 100);
  }

  int v17 = sqlite3_finalize(ppStmt);
  if (v17)
  {
    int v18 = v17;
    uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1812CE7C8(a1, "/**** ERROR: (%d) %s *****/\n", v18, v19);
  }

uint64_t sub_1812CDBE4(uint64_t a1, int a2, uint64_t a3)
{
  ppStmt[3] = *(sqlite3_stmt **)MEMORY[0x1895F89C0];
  if (a2 != 3) {
    return 1LL;
  }
  uint64_t v4 = *(char **)a3;
  int v5 = *(const char **)(a3 + 8);
  BOOL v6 = *(const char **)(a3 + 16);
  if (!strcmp(*(const char **)a3, "sqlite_sequence"))
  {
    uint64_t v12 = "DELETE FROM sqlite_sequence;\n";
  }

  else if (sqlite3_strglob("sqlite_stat?", v4))
  {
    uint64_t result = strncmp(v4, "sqlite_", 7uLL);
    if (!(_DWORD)result) {
      return result;
    }
    if (!strncmp(v6, "CREATE VIRTUAL TABLE", 0x14uLL))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        (*(void (**)(const char *, void))(a1 + 24))("PRAGMA writable_schema=ON;\n", *(void *)(a1 + 32));
        *(_DWORD *)(a1 + 16) = 1;
      }

      sub_1812CE7C8( a1,  "INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','%q','%q',0,'%q');",
        v4,
        v4,
        v6);
      return 0LL;
    }

    int v8 = sqlite3_strglob("CREATE TABLE [']*", v6);
    int v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v8)
    {
      unsigned int v11 = v6;
    }

    else
    {
      v10("CREATE TABLE IF NOT EXISTS ", v9);
      unsigned int v11 = v6 + 13;
      int v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
    }

    v10(v11, v9);
    uint64_t v12 = ";\n";
  }

  else
  {
    uint64_t v12 = "ANALYZE sqlite_schema;\n";
  }

  (*(void (**)(const char *, void))(a1 + 24))(v12, *(void *)(a1 + 32));
  if (strcmp(v5, "table")) {
    return 0LL;
  }
  ppStmt[0] = 0LL;
  int v13 = sqlite3_mprintf("PRAGMA table_info=%Q", v4);
  if (!v13) {
    return 0LL;
  }
  unsigned int v14 = v13;
  int v15 = sqlite3_prepare_v2(*(sqlite3 **)a1, v13, -1, ppStmt, 0LL);
  sqlite3_free(v14);
  if (v15) {
    return 0LL;
  }
  if (sqlite3_step(ppStmt[0]) == 100)
  {
    uint64_t v16 = 0LL;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    ssize_t v20 = 0LL;
    while (1)
    {
      if (v16 >= v19 - 2)
      {
        int v19 = v16 + 2 * v19 + 10;
        ssize_t v21 = (const char **)sqlite3_realloc64(v20, 8LL * v19);
        if (!v21) {
          break;
        }
        char *v21 = 0LL;
        ssize_t v20 = v21;
      }

      int v22 = sqlite3_column_text(ppStmt[0], 1);
      v23 = sqlite3_mprintf("%s", (const char *)v22);
      v20[v16 + 1] = v23;
      if (!v23) {
        break;
      }
      if (sqlite3_column_int(ppStmt[0], 5))
      {
        if (v18 || (v24 = sqlite3_column_text(ppStmt[0], 2), sqlite3_stricmp((const char *)v24, "INTEGER")))
        {
          int v17 = 0;
          ++v18;
        }

        else
        {
          int v18 = 1;
          int v17 = 1;
        }
      }

      ++v16;
      if (sqlite3_step(ppStmt[0]) != 100) {
        goto LABEL_34;
      }
    }

LABEL_150:
      (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
      if (v67) {
        sub_1812CE7C8(a1, ",'%s',char(13))", v83);
      }
      int v53 = v97;
      if (v66) {
        sub_1812CE7C8(a1, ",'%s',char(10))", v71);
      }
LABEL_81:
      if (++v59 != v53) {
        continue;
      }
      break;
    }

    if (v45[14])
    {
      v92 = *((void *)v45 + 6);
      if (v92)
      {
        size_t v93 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v92);
          --qword_18C468B10;
          off_18C4653A8(v92);
          v92 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_158;
          }
          size_t v93 = &xmmword_18C465410;
        }

        (*v93)(v92);
      }
    }

        LODWORD(v13) = v13 - 1;
        int v73 = *++v12;
        v29 = v73;
      }

      if (v29 == 46)
      {
        uint64_t v74 = a3[3];
        if (v74 >= a3[2])
        {
          uint64_t result = sub_18135BB8C((uint64_t)a3, 48);
        }

        else
        {
          uint64_t v75 = a3[1];
          a3[3] = v74 + 1;
          *(_BYTE *)(v75 + v74) = 48;
        }
      }

      if (!(_DWORD)v13) {
        return result;
      }
      ssize_t v76 = 0LL;
      char v77 = v13;
      while (2)
      {
        if (v12[v76] != 46) {
          goto LABEL_157;
        }
        if (v13 - 1LL != v76)
        {
          if ((unint64_t)v12[v76 + 1] - 58 > 0xFFFFFFFFFFFFFFF5LL)
          {
LABEL_157:
            continue;
          }

          char v77 = v76 + 1;
        }

        break;
      }

      double v78 = a3[3];
      if (v78 + (unint64_t)v77 >= a3[2])
      {
        uint64_t result = sub_18135B8EC((uint64_t)a3, v12, v77);
        uint64_t v79 = a3[3];
      }

      else
      {
        uint64_t result = (uint64_t)memcpy((void *)(a3[1] + v78), v12, v77);
        uint64_t v79 = a3[3] + v77;
        a3[3] = v79;
      }

      v12 += v77;
      LODWORD(v13) = v13 - v77;
      if (v79 >= a3[2])
      {
        uint64_t result = sub_18135BB8C((uint64_t)a3, 48);
      }

      else
      {
        int v82 = a3[1];
        a3[3] = v79 + 1;
        *(_BYTE *)(v82 + v79) = 48;
      }

                *int v8 = (uint64_t)sqlite3_mprintf("%s", (const char *)v149);
LABEL_151:
                sub_1813C165C((uint64_t)v146);
                if (v81 <= 1) {
                  return 1LL;
                }
                else {
                  return v81;
                }
              }

              int v100 = (uint64_t (**)(char *))&xmmword_18C465410;
            }

            (*v100)(v99);
            goto LABEL_142;
          }

          v98 = (void (**)(FILE *))&xmmword_18C465410;
        }

        (*v98)(v97);
        goto LABEL_135;
      }

      uint64_t v96 = (void (**)(const char *))&xmmword_18C465410;
    }

    (*v96)(v95);
    goto LABEL_128;
  }

  if (v142 < 0)
  {
    do
    {
      sub_1813C11BC((uint64_t)v146, v89, v82, v83, v84, v85, v86, v87);
      ++*(_DWORD *)(v90 + 48);
    }

    while ((_DWORD)v147 == 44);
  }

  else
  {
    *(_DWORD *)(v88 + 48) = v142;
  }

LABEL_157:
  sqlite3_finalize(pStmt);
  sqlite3_free(v98);
  v98 = 0LL;
  uint64_t v99 = 0LL;
  __int128 v32 = zSql[0];
LABEL_158:
  sqlite3_free(v32);
  return 0LL;
}

  sub_181362408((uint64_t)&v156);
  return v8;
}

  *a4 = v7;
  return v16;
}

          int v15 = sub_18139B7E0(a1[5], v62, 0LL);
          int v59 = 1;
          if ((_DWORD)v15) {
            goto LABEL_89;
          }
          goto LABEL_158;
        }

        if ((v61 & 0x12) != 0 && *(void *)(v60 + 8))
        {
          uint64_t v62 = sub_181303DF0(v60);
          goto LABEL_157;
        }
      }

      else
      {
        sub_1812CF36C(89717);
      }

      uint64_t v62 = 0LL;
      goto LABEL_157;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v16 = *((int *)v8 + 6) + 2LL;
  }

  int v22 = a3[v16];
  if (!v22) {
    goto LABEL_36;
  }
  v23 = *((unsigned __int16 *)v22 + 10);
  if ((~v23 & 0x202) == 0 && *((_BYTE *)v22 + 22) == 1)
  {
    v24 = (char *)*((void *)v22 + 1);
    if (!*((_DWORD *)v8 + 16)) {
      goto LABEL_45;
    }
LABEL_37:
    if (v24)
    {
      uint64_t v25 = "delete";
      for (j = v24; ; ++j)
      {
        int v27 = *(unsigned __int8 *)v25;
        int v28 = *j;
        if ((_DWORD)v27 == (_DWORD)v28)
        {
          if (!*v25)
          {
            if (!*((_DWORD *)v8 + 17))
            {
              v71 = sub_18139B70C((uint64_t)a1, (uint64_t)a3);
              goto LABEL_194;
            }

            sub_18139B6CC((uint64_t)a1, "'delete' may not be used with a contentless_delete=1 table");
            goto LABEL_163;
          }
        }

        else if (byte_1813C6343[v27] != byte_1813C6343[v28])
        {
          goto LABEL_45;
        }

        ++v25;
      }
    }

    v29 = (uint64_t)a3[*((int *)v8 + 6) + 3];
    v326 = 0;
LABEL_116:
    ssize_t v68 = a1[4];
    int v69 = sub_18138B020(v68);
    sub_18138A584(v69);
    int v15 = *(unsigned int *)(v68 + 60);
    *(_DWORD *)(v68 + 60) = 0;
    if ((_DWORD)v15) {
      goto LABEL_234;
    }
    int v15 = sub_18138C160(a1[3], v24, (unsigned __int8 **)v29, &v326);
    if ((_DWORD)v15) {
      goto LABEL_234;
    }
    if (v326)
    {
      int v15 = 1LL;
      goto LABEL_234;
    }

    v71 = sub_18138A918((uint64_t *)a1[5], v24, (const sqlite3_value *)v29, 0);
    goto LABEL_194;
  }

  if ((v23 & 1) != 0)
  {
LABEL_36:
    v24 = 0LL;
    if (!*((_DWORD *)v8 + 16)) {
      goto LABEL_45;
    }
    goto LABEL_37;
  }

  v24 = (char *)sub_181303998((int *)v22, 1);
  if (*((_DWORD *)v8 + 16)) {
    goto LABEL_37;
  }
LABEL_45:
  v29 = (uint64_t)a3[*((int *)v8 + 6) + 3];
  ssize_t v30 = a1[3];
  v326 = 0;
  if (!v24) {
    goto LABEL_116;
  }
  __int128 v31 = "delete-all";
  for (k = v24; ; ++k)
  {
    __int128 v33 = *(unsigned __int8 *)v31;
    v34 = *k;
    if ((_DWORD)v33 != (_DWORD)v34) {
      break;
    }
    if (!*v31)
    {
      if (*(_DWORD *)(v30 + 64))
      {
        v71 = sub_18139CA80(a1[5]);
        goto LABEL_194;
      }

      sub_18139B6CC((uint64_t)a1, "'delete-all' may only be used with a contentless or external content fts5 table");
LABEL_163:
      int v15 = 1LL;
      goto LABEL_234;
    }

      int v67 = 0LL;
      goto LABEL_163;
    }

    if ((v43 & 0x12) != 0 && *(void *)(v38 + 8))
    {
      unsigned int v44 = sub_181303DF0(v38);
      goto LABEL_146;
    }

void sub_1812CE7C8(uint64_t a1, char *a2, ...)
{
  int v3 = sqlite3_vmprintf(a2, va);
  (*(void (**)(char *, void))(a1 + 24))(v3, *(void *)(a1 + 32));
  sqlite3_free(v3);
}

void sub_1812CE818(uint64_t a1, char *__s, unsigned int a3)
{
  uint64_t v4 = __s;
  int v6 = strlen(__s);
  int v7 = v6;
  uint64_t v8 = v6 & 0x3FFFFFFF;
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = (v6 & 0x3FFFFFFF) + v9;
  if (!a3)
  {
    unsigned int v11 = v10 + 1;
    goto LABEL_19;
  }

  unsigned int v11 = v10 + 3;
  if (!(_DWORD)v8) {
    goto LABEL_19;
  }
  unint64_t v12 = v6 & 0x3FFFFFFF;
  if (v12 < 8)
  {
    unint64_t v13 = 0LL;
    goto LABEL_15;
  }

  if (v12 < 0x20)
  {
    unint64_t v13 = 0LL;
LABEL_12:
    __int128 v32 = (int8x8_t *)&v4[v13];
    unint64_t v33 = v13 + (v6 & 7);
    unint64_t v13 = v12 - (v6 & 7);
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = (int32x4_t)v11;
    int8x8_t v36 = vdup_n_s8(a3);
    unint64_t v37 = v33 - v12;
    v38.i64[0] = 0x100000001LL;
    v38.i64[1] = 0x100000001LL;
    do
    {
      int8x8_t v39 = *v32++;
      uint16x8_t v40 = vmovl_u8((uint8x8_t)vceq_s8(v39, v36));
      int32x4_t v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v40), v38));
      int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8), v38));
      v37 += 8LL;
    }

    while (v37);
    unsigned int v11 = vaddvq_s32(vaddq_s32(v35, v34));
    if ((v6 & 7) == 0) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }

  int32x4_t v14 = 0uLL;
  int32x4_t v15 = (int32x4_t)v11;
  int8x16_t v16 = vdupq_n_s8(a3);
  unint64_t v13 = v12 - (v6 & 0x1F);
  v17.i64[0] = 0x100000001LL;
  v17.i64[1] = 0x100000001LL;
  int v18 = (int8x16_t *)(v4 + 16);
  unint64_t v19 = v13;
  int32x4_t v20 = 0uLL;
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = 0uLL;
  int32x4_t v24 = 0uLL;
  int32x4_t v25 = 0uLL;
  do
  {
    uint8x16_t v26 = (uint8x16_t)vceqq_s8(v18[-1], v16);
    uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
    uint16x8_t v28 = vmovl_high_u8(v26);
    uint8x16_t v29 = (uint8x16_t)vceqq_s8(*v18, v16);
    uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)v29.i8);
    uint16x8_t v31 = vmovl_high_u8(v29);
    int32x4_t v21 = vaddq_s32(v21, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v17));
    int32x4_t v20 = vaddq_s32(v20, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v17));
    int32x4_t v14 = vaddq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v17));
    int32x4_t v15 = vaddq_s32(v15, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v17));
    int32x4_t v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v17));
    int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v17));
    int32x4_t v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v17));
    int32x4_t v22 = vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v17));
    v18 += 2;
    v19 -= 32LL;
  }

  while (v19);
  unsigned int v11 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v22, v15), vaddq_s32(v24, v20)),  vaddq_s32(vaddq_s32(v23, v14), vaddq_s32(v25, v21))));
  if ((v6 & 0x1F) == 0) {
    goto LABEL_19;
  }
  if ((v6 & 0x1Fu) >= 8uLL) {
    goto LABEL_12;
  }
LABEL_15:
  v41 = &v4[v13];
  unint64_t v42 = v12 - v13;
  do
  {
    int v43 = *v41++;
    --v42;
  }

  while (v42);
LABEL_19:
  int v44 = v11 + v9;
  int v45 = *(_DWORD *)(a1 + 12);
  if (v44 >= v45)
  {
    int v46 = v11 + 2 * v45 + 20;
    *(_DWORD *)(a1 + 12) = v46;
    v47 = sqlite3_realloc(*(void **)a1, v46);
    if (!v47)
    {
      sqlite3_free(*(void **)a1);
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      return;
    }

    *(void *)a1 = v47;
  }

  uint64_t v48 = (char *)(*(void *)a1 + *(int *)(a1 + 8));
  if (a3)
  {
    char *v48 = a3;
    uint64_t v49 = v48 + 1;
    if ((_DWORD)v8)
    {
      uint64_t v50 = v7 & 0x3FFFFFFF;
      do
      {
        while (1)
        {
          *uint64_t v49 = *v4;
          int v51 = *v4++;
          v49[1] = a3;
          v49 += 2;
          if (!--v50) {
            goto LABEL_28;
          }
        }

        ++v49;
        --v50;
      }

      while (v50);
    }

uint64_t sub_1812CEAE0(const char *a1)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  if (*a1 < 0) {
    int v3 = __maskrune(*(unsigned __int8 *)a1, 0x100uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1895F8770] + 4 * v2 + 60) & 0x100;
  }
  if ((_DWORD)v2 != 95 && v3 == 0) {
    return 34LL;
  }
  unsigned int v5 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = MEMORY[0x1895F8770];
    while (1)
    {
      if ((v5 & 0x80) != 0)
      {
        int v8 = __maskrune(v5, 0x500uLL);
        if (v5 != 95) {
          goto LABEL_11;
        }
      }

      else
      {
        int v8 = *(_DWORD *)(v7 + 4LL * v5 + 60) & 0x500;
        if (v5 != 95)
        {
LABEL_11:
          if (!v8) {
            return 34LL;
          }
        }
      }

      int v9 = v6 + 1;
      unsigned int v5 = a1[++v6];
      if (!v5) {
        goto LABEL_18;
      }
    }
  }

  int v9 = 0;
LABEL_18:
  if (sqlite3_keyword_check(a1, v9)) {
    return 34LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1812CEBCC(sqlite3 *a1)
{
  uint64_t result = sqlite3_create_function( a1,  "ieee754",  1,  2097153,  &unk_189B6CC9C,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CED70,  0LL,  0LL);
  if (!(_DWORD)result)
  {
    uint64_t result = sqlite3_create_function( a1,  "ieee754",  2,  2097153,  &unk_189B6CCB4,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CED70,  0LL,  0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = sqlite3_create_function( a1,  "ieee754_mantissa",  1,  2097153,  &unk_189B6CCCC,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CED70,  0LL,  0LL);
      if (!(_DWORD)result)
      {
        uint64_t result = sqlite3_create_function( a1,  "ieee754_exponent",  1,  2097153,  &unk_189B6CCE4,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CED70,  0LL,  0LL);
        if (!(_DWORD)result)
        {
          uint64_t result = sqlite3_create_function( a1,  "ieee754_to_blob",  1,  2097153,  &unk_189B6CCFC,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CF104,  0LL,  0LL);
          if (!(_DWORD)result)
          {
            uint64_t result = sqlite3_create_function( a1,  "ieee754_from_blob",  1,  2097153,  &unk_189B6CD14,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CF1A0,  0LL,  0LL);
            if (!(_DWORD)result) {
              return sqlite3_create_function( a1,  "ieee754_inc",  2,  2097153,  &unk_189B6CD2C,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1812CF244,  0LL,  0LL);
            }
          }
        }
      }
    }
  }

  return result;
}

void sub_1812CED70(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a2 != 1)
  {
    sqlite3_int64 v5 = sqlite3_value_int64(*a3);
    sqlite3_int64 v6 = sqlite3_value_int64(a3[1]);
    uint64_t v7 = -10000LL;
    if (v6 > -10000) {
      uint64_t v7 = v6;
    }
    if (v7 >= 10000) {
      uint64_t v7 = 10000LL;
    }
    if (v5 < 0)
    {
      unint64_t v8 = -v5;
    }

    else
    {
      if (v5)
      {
        unint64_t v8 = v5;
        goto LABEL_46;
      }

      unint64_t v8 = 0LL;
      if ((unint64_t)(v7 + 999) <= 0x7CE)
      {
        double v9 = 0.0;
LABEL_62:
        sqlite3_result_double(a1, v9);
        return;
      }
    }

    if (!(v8 >> 53))
    {
LABEL_17:
      unint64_t v12 = v8;
LABEL_47:
      if (v12 - 1 <= 0xFFFFFFFFFFFFELL)
      {
        do
        {
          v12 *= 2LL;
          --v7;
        }

        while (v12 - 1 < 0xFFFFFFFFFFFFFLL);
      }

      uint64_t v23 = 972LL;
      if (v7 < 972) {
        uint64_t v23 = v7;
      }
      uint64_t v24 = (v23 << 52) + 0x4330000000000000LL;
      unint64_t v25 = v12 >> (-50 - v7);
      BOOL v26 = v7 <= -1075;
      if (v7 <= -1075) {
        unint64_t v27 = v25;
      }
      else {
        unint64_t v27 = v12;
      }
      if (v26) {
        uint64_t v28 = 0LL;
      }
      else {
        uint64_t v28 = v24;
      }
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFFLL | v28;
      if (v5 < 0) {
        v29 |= 0x8000000000000000LL;
      }
      double v9 = *(double *)&v29;
      goto LABEL_62;
    }

    do
    {
LABEL_46:
      unint64_t v12 = v8 >> 1;
      ++v7;
      unint64_t v22 = v8 >> 54;
      v8 >>= 1;
    }

    while (v22);
    goto LABEL_47;
  }

  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }

  else
  {
    if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
    {
      int v10 = (unsigned __int8 *)sqlite3_value_blob(*a3);
      *(void *)&double v11 = v10[7] | ((((unint64_t)v10[5] << 8) | ((((unint64_t)((v10[1] << 8) | (*v10 << 16) | v10[2]) << 16) | ((unint64_t)v10[3] << 8) | v10[4]) << 16) | v10[6]) << 8);
    }

    else
    {
      double v11 = sqlite3_value_double(*a3);
    }

    double v13 = -v11;
    if (v11 >= 0.0) {
      double v13 = v11;
    }
    if (v13 == 0.0)
    {
      LODWORD(v14) = 0;
      sqlite3_int64 v20 = 0LL;
    }

    else
    {
      uint64_t v14 = *(uint64_t *)&v13 >> 52;
      else {
        unint64_t v15 = 2 * (*(void *)&v13 & 0xFFFFFFFFFFFFFLL);
      }
      if ((int)v14 <= 1074 && v15 != 0 && (v15 & 1) == 0)
      {
        do
        {
          int v18 = v14;
          unint64_t v19 = v15;
          v15 >>= 1;
          LODWORD(v14) = v14 + 1;
        }

        while (v18 <= 1073 && v19 >= 2 && (v19 & 2) == 0);
      }

      if (v11 >= 0.0) {
        sqlite3_int64 v20 = v15;
      }
      else {
        sqlite3_int64 v20 = -(uint64_t)v15;
      }
    }

    int v21 = *(_DWORD *)sqlite3_user_data(a1);
    switch(v21)
    {
      case 2:
        sqlite3_result_int(a1, v14 - 1075);
        break;
      case 1:
        sqlite3_result_int64(a1, v20);
        break;
      case 0:
        sqlite3_snprintf(100, v30, "ieee754(%lld,%d)", v20, v14 - 1075);
        sqlite3_result_text(a1, v30, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        break;
    }
  }

void sub_1812CF104(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  v5[1] = *MEMORY[0x1895F89C0];
  if (sqlite3_value_type(*a3) == 2 || sqlite3_value_type(*a3) == 1)
  {
    v5[0] = bswap64(COERCE_UNSIGNED_INT64(sqlite3_value_double(*a3)));
    sqlite3_result_blob(a1, v5, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }

void sub_1812CF1A0(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
  {
    sqlite3_int64 v5 = (unsigned __int8 *)sqlite3_value_blob(*a3);
    sqlite3_result_double( a1,  COERCE_DOUBLE(v5[7] | ((((unint64_t)v5[5] << 8) | ((((unint64_t)((v5[1] << 8) | (*v5 << 16) | v5[2]) << 16) | ((unint64_t)v5[3] << 8) | v5[4]) << 16) | v5[6]) << 8)));
  }

void sub_1812CF244(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  double v5 = sqlite3_value_double(*a3);
  *(void *)&double v6 = sqlite3_value_int64(a3[1]) + *(void *)&v5;
  sqlite3_result_double(a1, v6);
}

int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
{
  if (op >= 0xA)
  {
    int v4 = 24423;
    return sub_1812CF36C(v4);
  }

  if (!pCurrent || !pHighwater)
  {
    int v4 = 24426;
    return sub_1812CF36C(v4);
  }

  uint64_t v8 = op;
  if (((0x379uLL >> op) & 1) != 0) {
    double v9 = &xmmword_18C468B70;
  }
  else {
    double v9 = (__int128 *)((char *)&xmmword_18C550620 + 8);
  }
  uint64_t v10 = *(void *)v9;
  if (*(void *)v9) {
    xmmword_18C465400(v10);
  }
  double v11 = &qword_18C468AC8[v8];
  sqlite3_int64 v12 = *v11;
  *pCurrent = *v11;
  sqlite3_int64 v14 = v11[10];
  double v13 = v11 + 10;
  *pHighwater = v14;
  if (resetFlag) {
    *double v13 = v12;
  }
  if (v10) {
    xmmword_18C465410(v10);
  }
  return 0;
}

uint64_t sub_1812CF36C(int a1)
{
  return sub_1812F30C4(21LL, a1, "misuse");
}

void sqlite3_mutex_enter(sqlite3_mutex *a1)
{
  if (a1) {
    xmmword_18C465400();
  }
}

void sqlite3_mutex_leave(sqlite3_mutex *a1)
{
  if (a1) {
    xmmword_18C465410();
  }
}

int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
{
  if (!pCurrent || !pHighwater)
  {
    int v5 = 24443;
    return sub_1812CF36C(v5);
  }

  if (op > 9)
  {
    int v5 = 24423;
    return sub_1812CF36C(v5);
  }

  uint64_t v9 = op;
  if (((0x379uLL >> op) & 1) != 0) {
    uint64_t v10 = &xmmword_18C468B70;
  }
  else {
    uint64_t v10 = (__int128 *)((char *)&xmmword_18C550620 + 8);
  }
  uint64_t v11 = *(void *)v10;
  if (*(void *)v10) {
    xmmword_18C465400(v11);
  }
  uint64_t v12 = qword_18C468AC8[v9];
  double v13 = &qword_18C468AC8[v9 + 10];
  uint64_t v14 = *v13;
  if (resetFlag) {
    *double v13 = v12;
  }
  if (v11) {
    xmmword_18C465410(v11);
  }
  *pCurrent = v12;
  *pHighwater = v14;
  return 0;
}

int sqlite3_db_status(sqlite3 *a1, int op, int *pCur, int *pHiwtr, int resetFlg)
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_15;
  }

  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    uint64_t v7 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1812CF36C(24492);
  }

  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  if (!pCur || !pHiwtr) {
    return sub_1812CF36C(24492);
  }
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_18C465400(v12);
  }
  switch(op)
  {
    case 0:
      uint64_t v24 = *((void *)a1 + 58);
      if (v24)
      {
        int v25 = 0;
        BOOL v26 = (void *)*((void *)a1 + 58);
        do
        {
          BOOL v26 = (void *)*v26;
          ++v25;
        }

        while (v26);
      }

      else
      {
        int v25 = 0;
      }

      uint64_t v49 = (void *)*((void *)a1 + 59);
      if (v49)
      {
        int v50 = 0;
        int v51 = (void *)*((void *)a1 + 59);
        do
        {
          int v51 = (void *)*v51;
          --v50;
        }

        while (v51);
      }

      else
      {
        int v50 = 0;
      }

      uint64_t v53 = *((void *)a1 + 60);
      if (v53)
      {
        int v54 = 0;
        v55 = (void *)*((void *)a1 + 60);
        do
        {
          v55 = (void *)*v55;
          ++v54;
        }

        while (v55);
      }

      else
      {
        int v54 = 0;
      }

      int v56 = v54 + v25;
      int v57 = (void *)*((void *)a1 + 61);
      if (v57)
      {
        int v58 = 0;
        int v59 = (void *)*((void *)a1 + 61);
        do
        {
          int v59 = (void *)*v59;
          --v58;
        }

        while (v59);
      }

      else
      {
        int v58 = 0;
      }

      *pHiwtr = *((_DWORD *)a1 + 111) - v56;
      *pCur = v50 - v56 + v58 + *((_DWORD *)a1 + 111);
      if (resetFlg)
      {
        if (v49)
        {
          sqlite3_int64 v60 = v49;
          do
          {
            double v61 = v60;
            sqlite3_int64 v60 = (void *)*v60;
          }

          while (v60);
          *double v61 = v24;
          *((void *)a1 + 58) = v49;
          *((void *)a1 + 59) = 0LL;
        }

        if (v57)
        {
          uint64_t v62 = v57;
          do
          {
            ssize_t v63 = v62;
            uint64_t v62 = (void *)*v62;
          }

          while (v62);
          resetFlg = 0;
          *ssize_t v63 = v53;
          *((void *)a1 + 60) = v57;
          *((void *)a1 + 61) = 0LL;
        }

        else
        {
          resetFlg = 0;
        }
      }

      break;
    case 1:
    case 11:
      if (!*((_BYTE *)a1 + 111)) {
        sub_1812FA020((uint64_t)a1);
      }
      int v15 = *((_DWORD *)a1 + 10);
      v64 = pHiwtr;
      if (v15 < 1)
      {
        int v17 = 0;
      }

      else
      {
        uint64_t v16 = 0LL;
        int v17 = 0;
        uint64_t v18 = 8LL;
        do
        {
          uint64_t v19 = *(void *)(*((void *)a1 + 4) + v18);
          if (v19)
          {
            uint64_t v20 = **(void **)(v19 + 8);
            int v21 = *(_DWORD *)(v20 + 200) + *(unsigned __int16 *)(v20 + 176) + 120;
            int v22 = xmmword_18C465458(*(void *)(*(void *)(v20 + 336) + 72LL));
            int v23 = off_18C4653B8(v20) + v21 * v22 + *(_DWORD *)(v20 + 200);
            if (op == 11) {
              v23 /= *(int *)(*(void *)(v19 + 8) + 104LL);
            }
            v17 += v23;
            int v15 = *((_DWORD *)a1 + 10);
          }

          ++v16;
          v18 += 32LL;
        }

        while (v16 < v15);
      }

      if (!*((_BYTE *)a1 + 111)) {
        sub_1812FA0B4((uint64_t)a1);
      }
      resetFlg = 0;
      *pCur = v17;
      int *v64 = 0;
      break;
    case 2:
      int v66 = 0;
      if (!*((_BYTE *)a1 + 111)) {
        sub_1812FA020((uint64_t)a1);
      }
      *((void *)a1 + 102) = &v66;
      *((void *)a1 + 64) = *((void *)a1 + 63);
      if (*((int *)a1 + 10) >= 1)
      {
        uint64_t v27 = 0LL;
        do
        {
          uint64_t v28 = *(void *)(*((void *)a1 + 4) + 32 * v27 + 24);
          if (v28)
          {
            int v29 = v66
                + (*(_DWORD *)(v28 + 60) + *(_DWORD *)(v28 + 12) + *(_DWORD *)(v28 + 36) + *(_DWORD *)(v28 + 84))
                * unk_18C4653C0(32LL);
            int v66 = v29;
            uint64_t v30 = *(void *)(v28 + 24);
            if (v30)
            {
              LODWORD(v30) = off_18C4653B8(v30);
              int v29 = v66;
            }

            int v31 = v29 + v30;
            int v66 = v31;
            uint64_t v32 = *(void *)(v28 + 72);
            if (v32)
            {
              LODWORD(v32) = off_18C4653B8(v32);
              int v31 = v66;
            }

            int v33 = v31 + v32;
            int v66 = v33;
            uint64_t v34 = *(void *)(v28 + 48);
            if (v34)
            {
              LODWORD(v34) = off_18C4653B8(v34);
              int v33 = v66;
            }

            int v35 = v33 + v34;
            int v66 = v35;
            uint64_t v36 = *(void *)(v28 + 96);
            if (v36)
            {
              LODWORD(v36) = off_18C4653B8(v36);
              int v35 = v66;
            }

            int v66 = v35 + v36;
            for (int i = *(void **)(v28 + 64); i; int i = (void *)*i)
              sub_18127A200(a1, i[2]);
            for (j = *(void **)(v28 + 16); j; j = (void *)*j)
            {
              uint64_t v39 = j[2];
              if (v39)
              {
                if (*((void *)a1 + 102) || (int v40 = *(_DWORD *)(v39 + 44) - 1, (*(_DWORD *)(v39 + 44) = v40) == 0)) {
                  sub_181311A80(a1, (void *)v39);
                }
              }
            }
          }

          ++v27;
        }

        while (v27 < *((int *)a1 + 10));
      }

      *((void *)a1 + 102) = 0LL;
      *((void *)a1 + 64) = *((void *)a1 + 65);
      if (!*((_BYTE *)a1 + 111)) {
        sub_1812FA0B4((uint64_t)a1);
      }
      resetFlg = 0;
      *pHiwtr = 0;
      int v42 = v66;
      goto LABEL_85;
    case 3:
      int v65 = 0;
      *((void *)a1 + 102) = &v65;
      *((void *)a1 + 64) = *((void *)a1 + 63);
      uint64_t v41 = *((void *)a1 + 1);
      if (v41)
      {
        do
        {
          sub_1812CFA64(v41);
          uint64_t v41 = *(void *)(v41 + 16);
        }

        while (v41);
        int v42 = v65;
      }

      else
      {
        int v42 = 0;
      }

      resetFlg = 0;
      *((void *)a1 + 64) = *((void *)a1 + 65);
      *((void *)a1 + 102) = 0LL;
      *pHiwtr = 0;
      goto LABEL_85;
    case 4:
    case 5:
    case 6:
      *pCur = 0;
      double v13 = (char *)a1 + 4 * (op - 4);
      *pHiwtr = *((_DWORD *)v13 + 112);
      if (resetFlg)
      {
        resetFlg = 0;
        *((_DWORD *)v13 + 112) = 0;
      }

      break;
    case 7:
    case 8:
    case 9:
      goto LABEL_61;
    case 10:
      *pHiwtr = 0;
      int v42 = *((uint64_t *)a1 + 101) > 0 || *((void *)a1 + 100) > 0LL;
      resetFlg = 0;
      goto LABEL_85;
    case 12:
      op = 10;
LABEL_61:
      int v43 = *((_DWORD *)a1 + 10);
      if (v43 < 1)
      {
        int v42 = 0;
      }

      else
      {
        uint64_t v44 = 0LL;
        int v42 = 0;
        uint64_t v45 = *((void *)a1 + 4) + 8LL;
        do
        {
          if (*(void *)v45)
          {
            uint64_t v46 = **(void **)(*(void *)v45 + 8LL) + 4 * (op - 7LL);
            int v48 = *(_DWORD *)(v46 + 248);
            v47 = (_DWORD *)(v46 + 248);
            v42 += v48;
            if (resetFlg)
            {
              _DWORD *v47 = 0;
              int v43 = *((_DWORD *)a1 + 10);
            }
          }

          ++v44;
          v45 += 32LL;
        }

        while (v44 < v43);
      }

      resetFlg = 0;
      *pHiwtr = 0;
LABEL_85:
      *pCur = v42;
      break;
    default:
      resetFlg = 1;
      break;
  }

  uint64_t v52 = *((void *)a1 + 3);
  if (v52) {
    xmmword_18C465410(v52);
  }
  return resetFlg;
}

sqlite3_uint64 sqlite3_msize(sqlite3_uint64 result)
{
  if (result) {
    return (int)off_18C4653B8(result);
  }
  return result;
}

void *sub_1812CFA64(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 152);
  if (v3)
  {
    if (*(_WORD *)(a1 + 262))
    {
      unint64_t v4 = v3 + 320LL * *(unsigned __int16 *)(a1 + 262);
      int v5 = *(void **)(v3 + 24);
      if (!v5[102])
      {
        while (1)
        {
          if ((*(_WORD *)(v3 + 20) & 0x9000) != 0)
          {
            sub_181303838(v3);
          }

          else
          {
            if (!*(_DWORD *)(v3 + 32)) {
              goto LABEL_11;
            }
            sub_1813014B0(v5, *(void **)(v3 + 40));
            *(_DWORD *)(v3 + 32) = 0;
          }

          *(_WORD *)(v3 + 20) = 0;
LABEL_11:
          v3 += 64LL;
          if (v3 >= v4) {
            goto LABEL_15;
          }
        }
      }

      do
      {
        if (*(_DWORD *)(v3 + 32))
        {
          int v6 = *(void **)(v3 + 40);
          if (v6) {
            sub_1812F20DC(v5, v6);
          }
        }

        v3 += 64LL;
      }

      while (v3 < v4);
    }

int sqlite3_vfs_unregister(sqlite3_vfs *a1)
{
  int result = sqlite3_initialize();
  if (result) {
    return result;
  }
  if (!(_BYTE)word_18C465384)
  {
    uint64_t v4 = 0LL;
LABEL_7:
    char v5 = 1;
    if (!a1) {
      goto LABEL_18;
    }
    goto LABEL_8;
  }

  uint64_t v3 = qword_18C4653F0(2LL);
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_7;
  }
  xmmword_18C465400(v3);
  char v5 = 0;
  if (!a1) {
    goto LABEL_18;
  }
LABEL_8:
  p_pNext = &qword_18C468B68;
  uint64_t v7 = (sqlite3_vfs *)qword_18C468B68;
  if ((sqlite3_vfs *)qword_18C468B68 != a1)
  {
    if (!qword_18C468B68) {
      goto LABEL_18;
    }
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = v7->pNext;
      if (v7) {
        BOOL v9 = v7 == a1;
      }
      else {
        BOOL v9 = 1;
      }
    }

    while (!v9);
    if (v7 != a1) {
      goto LABEL_18;
    }
    p_pNext = (uint64_t *)&v8->pNext;
  }

  uint64_t *p_pNext = (uint64_t)a1->pNext;
LABEL_18:
  if ((v5 & 1) == 0) {
    xmmword_18C465410(v4);
  }
  return 0;
}

sqlite3_mutex *__cdecl sqlite3_mutex_alloc(int a1)
{
  uint64_t v1 = *(void *)&a1;
  if (a1 > 1)
  {
    if (!qword_18C4653F0)
    {
      BOOL v3 = word_18C465384 == 0;
      if ((_BYTE)word_18C465384) {
        uint64_t v4 = sub_1812F1B70;
      }
      else {
        uint64_t v4 = sub_1812F20B0;
      }
      xmmword_18C4653E0 = v4;
      if ((_BYTE)word_18C465384) {
        char v5 = sub_1812F1B78;
      }
      else {
        char v5 = sub_1812F20B8;
      }
      *(&xmmword_18C4653E0 + 1) = v5;
      if ((_BYTE)word_18C465384) {
        int v6 = (uint64_t (*)(void))sub_1812F1CA8;
      }
      else {
        int v6 = nullsub_4;
      }
      off_18C4653F8 = v6;
      if ((_BYTE)word_18C465384) {
        uint64_t v7 = sub_1812F1E28;
      }
      else {
        uint64_t v7 = (uint64_t (*)(uint64_t))nullsub_5;
      }
      xmmword_18C465400 = v7;
      if ((_BYTE)word_18C465384) {
        uint64_t v8 = sub_1812F1EA4;
      }
      else {
        uint64_t v8 = (uint64_t (*)(void))sub_1812F20D0;
      }
      *(&xmmword_18C465400 + 1) = v8;
      if ((_BYTE)word_18C465384) {
        BOOL v9 = sub_1812F1EDC;
      }
      else {
        BOOL v9 = (void (*)(uint64_t))nullsub_6;
      }
      qword_18C465420 = 0LL;
      *(_OWORD *)&xmmword_18C465410 = (unint64_t)v9;
      __dmb(0xBu);
      uint64_t v10 = (uint64_t (*)(void))sub_1812F1B80;
      if (v3) {
        uint64_t v10 = (uint64_t (*)(void))sub_1812F20C0;
      }
      qword_18C4653F0 = v10;
    }

    int v11 = xmmword_18C4653E0();
    __dmb(0xBu);
    if (v11) {
      return 0LL;
    }
  }

  else if (sqlite3_initialize())
  {
    return 0LL;
  }

  return (sqlite3_mutex *)qword_18C4653F0(v1);
}

void sqlite3_mutex_free(sqlite3_mutex *a1)
{
  if (a1) {
    off_18C4653F8();
  }
}

int sqlite3_mutex_try(sqlite3_mutex *a1)
{
  if (a1) {
    LODWORD(a1) = (*(&xmmword_18C465400 + 1))();
  }
  return (int)a1;
}

int sqlite3_release_memory(int a1)
{
  return 0;
}

int sqlite3_memory_alarm(void (__cdecl *a1)(void *, sqlite3_int64, int), void *a2, sqlite3_int64 a3)
{
  return 0;
}

sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
{
  if (sqlite3_initialize()) {
    return -1LL;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  sqlite3_int64 v2 = *((void *)&xmmword_18C468B70 + 1);
  if (N < 0)
  {
    uint64_t v8 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      return v2;
    }
LABEL_25:
    xmmword_18C465410(v8);
    return v2;
  }

  sqlite3_int64 v3 = qword_18C468B80;
  if (qword_18C468B80 >= N && N != 0 || qword_18C468B80 <= 0) {
    sqlite3_int64 v3 = N;
  }
  *((void *)&xmmword_18C468B70 + 1) = v3;
  BOOL v7 = v3 > 0 && v3 <= qword_18C468AC8;
  dword_18C468B88 = v7;
  if ((void)xmmword_18C468B70)
  {
    xmmword_18C465410(xmmword_18C468B70);
    uint64_t v8 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      xmmword_18C465400(xmmword_18C468B70);
      goto LABEL_25;
    }
  }

  return v2;
}

sqlite3_int64 sqlite3_memory_used(void)
{
  uint64_t v0 = xmmword_18C468B70;
  if (!(void)xmmword_18C468B70) {
    return qword_18C468AC8;
  }
  xmmword_18C465400(xmmword_18C468B70);
  sqlite3_int64 v1 = qword_18C468AC8;
  xmmword_18C465410(v0);
  return v1;
}

void sqlite3_soft_heap_limit(int N)
{
  if (!sqlite3_initialize())
  {
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      xmmword_18C465400(xmmword_18C468B70);
      uint64_t v2 = xmmword_18C468B70;
    }

    uint64_t v3 = qword_18C468B80;
    *((void *)&xmmword_18C468B70 + 1) = v3;
    BOOL v7 = v3 > 0 && v3 <= qword_18C468AC8[0];
    dword_18C468B88 = v7;
    if (v2)
    {
      xmmword_18C465410(v2);
      uint64_t v8 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        xmmword_18C465400(xmmword_18C468B70);
        xmmword_18C465410(v8);
      }
    }
  }

uint64_t sqlite3_hard_heap_limit64(uint64_t a1)
{
  if (sqlite3_initialize()) {
    return -1LL;
  }
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2000000000LL;
    int v10 = 0;
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1812D02F8;
    block[3] = &unk_189B6CD40;
    block[4] = &v7;
    if (qword_18C5504A8 != -1) {
      dispatch_once(&qword_18C5504A8, block);
    }
    if (!*((_DWORD *)v8 + 6) || (uint64_t v3 = getprogname(), strcmp("backupd", v3)))
    {
      sub_1812CF36C(30910);
      a1 = -1LL;
    }

    _Block_object_dispose(&v7, 8);
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  uint64_t v2 = qword_18C468B80;
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    qword_18C468B80 = a1;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465410(xmmword_18C468B70);
  }
  return v2;
}

uint64_t sub_1812D02F8(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
{
  uint64_t v2 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  sqlite3_int64 v3 = qword_18C468B18;
  if (resetFlag) {
    qword_18C468B18 = qword_18C468AC8;
  }
  if (v2) {
    xmmword_18C465410(v2);
  }
  return v3;
}

void *__cdecl sqlite3_malloc64(sqlite3_uint64 a1)
{
  if (sqlite3_initialize()) {
    return 0LL;
  }
  else {
    return (void *)sub_18126F0AC(a1);
  }
}

void *__cdecl sqlite3_realloc(void *a1, int a2)
{
  if (sqlite3_initialize()) {
    return 0LL;
  }
  else {
    return (void *)sub_18127D33C((uint64_t)a1, a2 & ~(a2 >> 31));
  }
}

void *__cdecl sqlite3_realloc64(void *a1, sqlite3_uint64 a2)
{
  if (sqlite3_initialize()) {
    return 0LL;
  }
  else {
    return (void *)sub_18127D33C((uint64_t)a1, a2);
  }
}

void sqlite3_str_vappendf(sqlite3_str *a1, const char *zFormat, va_list a3)
{
  uint64_t v408 = *MEMORY[0x1895F89C0];
  va_list v387 = a3;
  if (!a1 || (sqlite3_int64 v3 = (unsigned __int8 *)zFormat) == 0LL)
  {
    sub_1812CF36C(31910);
    return;
  }

  uint64_t v4 = a1;
  char v383 = *((_BYTE *)a1 + 29);
  if ((v383 & 2) != 0)
  {
    va_list v387 = a3 + 8;
    uint64_t v5 = *(void *)a3;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  int v6 = 0LL;
  *(double *)&uint64_t v7 = 9.22337204e118;
  double v8 = 10.0;
  v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
  v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
  v10.i64[0] = 0x8080808080808080LL;
  v10.i64[1] = 0x8080808080808080LL;
  uint64_t v382 = v5;
  while (2)
  {
    if (*v3 != 37)
    {
      if (!*v3) {
        return;
      }
      uint64_t v11 = 0LL;
      do
        int v12 = v3[++v11];
      while (v12 != 37 && v12 != 0);
      if ((int)v11 <= 0)
      {
        if ((_DWORD)v11)
        {
          sub_1812CF36C(32737);
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          uint64_t v5 = v382;
        }
      }

      else
      {
        uint64_t v14 = *((unsigned int *)v4 + 6);
        if ((v14 + v11) >= *((_DWORD *)v4 + 4))
        {
          sub_1812D3A10((uint64_t)v4, v3, v11);
        }

        else
        {
          *((_DWORD *)v4 + 6) = v14 + v11;
          memcpy((void *)(*((void *)v4 + 1) + v14), v3, v11);
        }

        uint64_t v5 = v382;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
        v10.i64[0] = 0x8080808080808080LL;
        v10.i64[1] = 0x8080808080808080LL;
      }

      int v6 = (char *)v3;
      v3 += v11;
      if (!*v3) {
        return;
      }
    }

    int v17 = v3[1];
    uint64_t v16 = v3 + 1;
    LOBYTE(v15) = v17;
    if (!v17)
    {
      uint64_t v350 = *((unsigned int *)v4 + 6);
      if ((v350 + 1) >= *((_DWORD *)v4 + 4))
      {
        sub_1812D3A10((uint64_t)v4, "%", 1u);
      }

      else
      {
        *((_DWORD *)v4 + 6) = v350 + 1;
        *(_BYTE *)(*((void *)v4 + 1) + v350) = 37;
      }

      return;
    }

    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    int v384 = 0;
    uint64_t v22 = 0LL;
    LODWORD(v23) = 0;
    uint64_t v24 = 0xFFFFFFFFLL;
    while (2)
    {
      int v27 = 0;
      int v15 = (char)v15;
      uint64_t v25 = 1LL;
      switch((char)v15)
      {
        case ' ':
          int v384 = 32;
          goto LABEL_27;
        case '!':
          uint64_t v20 = 1LL;
          goto LABEL_27;
        case '#':
          uint64_t v21 = 1LL;
          goto LABEL_27;
        case '*':
          if ((v383 & 2) == 0)
          {
            uint64_t v32 = v387;
            v387 += 8;
            LODWORD(v33) = *v32;
            goto LABEL_63;
          }

          uint64_t v37 = *(int *)(v5 + 4);
          uint64_t v38 = *(void *)(v5 + 8);
          *(_DWORD *)(v5 + 4) = v37 + 1;
          uint64_t v39 = *(void *)(v38 + 8 * v37);
          if (!v39)
          {
            uint64_t v47 = v21;
            uint64_t v48 = v20;
            uint64_t v49 = v18;
            uint64_t v50 = v19;
            v377 = v6;
            int v51 = v4;
            uint64_t v52 = v24;
            sub_1812CF36C(89717);
            uint64_t v24 = v52;
            uint64_t v4 = v51;
            int v6 = v377;
            uint64_t v19 = v50;
            uint64_t v18 = v49;
            uint64_t v20 = v48;
            uint64_t v21 = v47;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            uint64_t v5 = v382;
LABEL_62:
            LODWORD(v33) = 0;
            goto LABEL_63;
          }

          __int16 v40 = *(_WORD *)(v39 + 20);
          if ((v40 & 0x24) != 0)
          {
            double v33 = *(double *)v39;
            goto LABEL_63;
          }

          if ((v40 & 8) != 0)
          {
            double v68 = *(double *)v39;
            if (*(double *)v39 >= -9.22337204e18)
            {
              if (v68 <= 9.22337204e18) {
                *(void *)&double v33 = (uint64_t)v68;
              }
              else {
                LODWORD(v33) = -1;
              }
            }

            else
            {
              LODWORD(v33) = 0;
            }
          }

          else
          {
            if ((v40 & 0x12) == 0 || !*(void *)(v39 + 8)) {
              goto LABEL_62;
            }
            uint64_t v54 = v21;
            uint64_t v55 = v20;
            uint64_t v56 = v18;
            uint64_t v57 = v19;
            v378 = v6;
            int v58 = v4;
            uint64_t v59 = v24;
            LODWORD(v33) = sub_181303DF0(v39);
            uint64_t v24 = v59;
            uint64_t v4 = v58;
            int v6 = v378;
            uint64_t v19 = v57;
            uint64_t v18 = v56;
            uint64_t v20 = v55;
            uint64_t v21 = v54;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            uint64_t v5 = v382;
          }

LABEL_81:
                  if (LODWORD(v36) == 0x80000000) {
                    unsigned int v63 = -1;
                  }
                  else {
                    unsigned int v63 = -LODWORD(v36);
                  }
                  if (SLODWORD(v36) >= 0) {
                    uint64_t v24 = LODWORD(v36);
                  }
                  else {
                    uint64_t v24 = v63;
                  }
                  int v64 = (char)v16[2];
                  v16 += 2;
                  int v15 = v64;
                  goto LABEL_88;
                }

                if ((v46 & 0x12) != 0 && *(void *)(v45 + 8))
                {
                  uint64_t v65 = v20;
                  uint64_t v66 = v18;
                  uint64_t v67 = v19;
                  LODWORD(v36) = sub_181303DF0(v45);
                  uint64_t v19 = v67;
                  uint64_t v18 = v66;
                  uint64_t v20 = v65;
                  v10.i64[0] = 0x8080808080808080LL;
                  v10.i64[1] = 0x8080808080808080LL;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                  uint64_t v5 = v382;
                  goto LABEL_81;
                }
              }

              else
              {
                uint64_t v60 = v20;
                uint64_t v61 = v18;
                uint64_t v62 = v19;
                sub_1812CF36C(89717);
                uint64_t v19 = v62;
                uint64_t v18 = v61;
                uint64_t v20 = v60;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                uint64_t v5 = v382;
              }
            }

            LODWORD(v36) = 0;
            goto LABEL_81;
          }

          if ((v15 - 48) > 9)
          {
            int v41 = 0;
          }

          else
          {
            int v41 = 0;
            do
            {
              int v41 = v15 + 10 * v41 - 48;
              int v42 = (char)*++v34;
              int v15 = v42;
            }

            while ((v42 - 48) < 0xA);
          }

          uint64_t v24 = v41 & 0x7FFFFFFF;
          uint64_t v16 = v34;
LABEL_88:
          if (v15 == 108)
          {
            --v16;
LABEL_27:
            uint64_t v25 = v22;
LABEL_28:
            int v26 = *++v16;
            LOBYTE(v15) = v26;
            uint64_t v22 = v25;
            if (!v26) {
              return;
            }
            continue;
          }

          int v27 = 0;
LABEL_104:
          unsigned int v70 = 0;
          switch(v15)
          {
            case '%':
              unsigned int v70 = 18;
              goto LABEL_133;
            case 'E':
              unsigned int v70 = 14;
              goto LABEL_133;
            case 'G':
              unsigned int v70 = 15;
              goto LABEL_133;
            case 'Q':
              unsigned int v70 = 5;
              goto LABEL_133;
            case 'T':
              unsigned int v70 = 20;
              goto LABEL_133;
            case 'X':
              unsigned int v70 = 11;
              goto LABEL_133;
            case 'c':
              unsigned int v70 = 7;
              goto LABEL_133;
            case 'd':
              goto LABEL_133;
            case 'e':
              unsigned int v70 = 13;
              goto LABEL_133;
            case 'f':
              unsigned int v70 = 12;
              goto LABEL_133;
            case 'g':
              unsigned int v70 = 2;
              goto LABEL_133;
            case 'i':
              unsigned int v70 = 16;
              goto LABEL_133;
            case 'n':
              unsigned int v70 = 17;
              goto LABEL_133;
            case 'o':
              unsigned int v70 = 8;
              goto LABEL_133;
            case 'p':
              unsigned int v70 = 19;
              goto LABEL_133;
            case 'q':
              unsigned int v70 = 4;
              goto LABEL_133;
            case 's':
              unsigned int v70 = 1;
              goto LABEL_133;
            case 'u':
              unsigned int v70 = 9;
              goto LABEL_133;
            case 'w':
              unsigned int v70 = 6;
              goto LABEL_133;
            case 'x':
              unsigned int v70 = 10;
              goto LABEL_133;
            case 'z':
              unsigned int v70 = 3;
              goto LABEL_133;
            default:
              if (v15 == 83)
              {
                unsigned int v70 = 21;
              }

              else
              {
                if (v15 != 114) {
                  return;
                }
                unsigned int v70 = 22;
              }

              break;
          }

          break;
        case '0':
          uint64_t v19 = 1LL;
          goto LABEL_27;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          int v28 = (char)v15 - 48;
          int v29 = v16 + 1;
          int v15 = (char)v16[1];
          if ((v15 - 48) > 9)
          {
            int v31 = v16[1];
          }

          else
          {
            do
            {
              int v28 = v15 + 10 * v28 - 48;
              int v30 = (char)*++v29;
              int v15 = v30;
            }

            while ((v30 - 48) < 0xA);
            int v31 = v15;
            uint64_t v16 = v29 - 1;
          }

          LODWORD(v23) = v28 & 0x7FFFFFFF;
          if (v31 == 46 || v31 == 108) {
            goto LABEL_27;
          }
          int v27 = 0;
          uint64_t v16 = v29;
          goto LABEL_104;
        case 'l':
          int v15 = v16[1];
          if (v15 == 108)
          {
            signed __int8 v71 = v16[2];
            v16 += 2;
            int v27 = 2;
            int v15 = v71;
          }

          else
          {
            int v27 = 1;
            ++v16;
            int v15 = (char)v15;
          }

          goto LABEL_104;
        default:
          goto LABEL_104;
      }

      break;
    }

    int v58 = *v57;
    if (*v57)
    {
      if (v58 == 1)
      {
        if (*(_BYTE *)(v12 + 31))
        {
          uint64_t v59 = *(_BYTE *)(v12 + 31) - 1;
          *(_BYTE *)(v12 + 31) = v59;
          uint64_t v60 = *(unsigned int *)(v12 + 4LL * v59 + 224);
        }

        else
        {
          uint64_t v60 = (*(_DWORD *)(v12 + 56) + 1);
          *(_DWORD *)(v12 + 56) = v60;
        }

        int v58 = 1;
      }

      else
      {
        unsigned int v63 = *(_DWORD *)(v12 + 40);
        int v64 = __OFSUB__(v63, v58);
        uint64_t v65 = v63 - v58;
        if (v65 < 0 != v64)
        {
          uint64_t v66 = *(_DWORD *)(v12 + 56);
          uint64_t v60 = (v66 + 1);
          *(_DWORD *)(v12 + 56) = v66 + v58;
        }

        else
        {
          uint64_t v60 = *(unsigned int *)(v12 + 44);
          *(_DWORD *)(v12 + 40) = v65;
          *(_DWORD *)(v12 + 44) = v60 + v58;
        }
      }
    }

    else
    {
      uint64_t v60 = *v57;
    }

    goto LABEL_99;
  }

  int v53 = (v51 + 2);
  if (*(_DWORD *)(v14 + 148) <= v51)
  {
    sub_18131044C(v14, 39LL, v42, v53, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v51 + 1;
    uint64_t v54 = *(void *)(v14 + 136) + 40LL * v51;
    *(_DWORD *)uint64_t v54 = 39;
    *(_DWORD *)(v54 + 4) = v42;
    *(_DWORD *)(v54 + 8) = v53;
    *(void *)(v54 + 12) = 0LL;
    *(void *)(v54 + 28) = 0LL;
    *(void *)(v54 + 20) = 0LL;
    *(_DWORD *)(v54 + 36) = 0;
  }

  uint64_t v18 = *(unsigned int *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= (int)v18)
  {
    uint64_t v18 = sub_18131044C(v14, 9LL, 0LL, 0LL, 0LL, a6, a7, a8);
    if (v15 == 76) {
      goto LABEL_106;
    }
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v18 + 1;
    uint64_t v56 = *(void *)(v14 + 136) + 40LL * (int)v18;
    *(_BYTE *)uint64_t v56 = 9;
    *(_OWORD *)(v56 + 1) = 0u;
    *(_OWORD *)(v56 + 17) = 0u;
    *(void *)(v56 + 32) = 0LL;
    if (v15 == 76) {
      goto LABEL_106;
    }
  }

  uint64_t v57 = *(int **)(v13 + 24);
  if (v57) {
    goto LABEL_81;
  }
LABEL_96:
  int v58 = 0;
  uint64_t v60 = 0LL;
LABEL_99:
  sub_18133CAD4((uint64_t *)a1, v42, v60, v53, a5, a6, a7, a8);
  sub_18133B924((uint64_t *)v12, *(int **)(v13 + 24), v60, v41, v77, v67, v68, v69);
  if (v58 == 1)
  {
    if (!(_DWORD)v60) {
      goto LABEL_106;
    }
    unsigned int v70 = *(unsigned __int8 *)(v12 + 31);
    *(_BYTE *)(v12 + 31) = v70 + 1;
    signed __int8 v71 = (_DWORD *)(v12 + 4 * v70 + 224);
    goto LABEL_105;
  }

  if (*(_DWORD *)(v12 + 40) < v58)
  {
    *(_DWORD *)(v12 + 40) = v58;
    signed __int8 v71 = (_DWORD *)(v12 + 44);
LABEL_105:
    const char *v71 = v60;
  }

    uint64_t v39 = v42;
    __int16 v40 = xmmword_1813CDE10;
    LOBYTE(v41) = 1;
LABEL_82:
    if (v23)
    {
      if ((v7 & 1) != 0)
      {
        sub_181358CC8(v9, v23, a1, 0);
      }

      else
      {
        sub_18135C07C(v9, v23, a1);
        if (a1)
        {
          uint64_t v37 = *(void *)a1;
          *(_BYTE *)(v37 + 23) = 0;
          *(_WORD *)(v37 + 20) |= 0x800u;
        }

        else
        {
          sub_1812CF36C(97481);
        }
      }
    }

    return;
  }

  uint64_t v38 = a1;
  uint64_t v39 = v42;
  int v41 = 1;
  __int16 v40 = xmmword_1813CDE00;
  v42[0] = 91;
  int v13 = a2 - 1LL;
  uint64_t v14 = a3 + 1;
  while (1)
  {
    int v15 = *v14;
    if (!*v14) {
      goto LABEL_23;
    }
    uint64_t v16 = *(unsigned __int16 *)(v15 + 20);
    if ((~v16 & 0x202) == 0 && *(_BYTE *)(v15 + 22) == 1)
    {
      int v17 = *(char **)(v15 + 8);
      goto LABEL_24;
    }

    if ((v16 & 1) != 0) {
LABEL_23:
    }
      int v17 = 0LL;
    else {
      int v17 = (char *)sub_181303998((int *)v15, 1);
    }
LABEL_24:
    uint64_t v18 = sub_181358B7C(v9, v17, 0LL, (uint64_t)a1);
    if (*(_BYTE *)(v9 + 50)) {
      break;
    }
    uint64_t v19 = v18;
    uint64_t v20 = *((void *)&v40 + 1);
    if (*((void *)&v40 + 1) && (v39[*((void *)&v40 + 1) - 1] & 0xDF) != 0x5B)
    {
      if (*((void *)&v40 + 1) < (unint64_t)v40)
      {
        ++*((void *)&v40 + 1);
        v39[v20] = 44;
      }

      else
      {
        sub_18135BB8C((uint64_t)&v38, 44);
      }
    }

    if (v19)
    {
      sub_18135A944(v9, v19, &v38);
    }

    else if (*((void *)&v40 + 1) + 4LL >= (unint64_t)v40)
    {
      sub_18135B8EC((uint64_t)&v38, "null", 4u);
    }

    else
    {
      *(_DWORD *)&v39[*((void *)&v40 + 1)] = 1819047278;
      *((void *)&v40 + 1) += 4LL;
    }

    ++v14;
    if (!--v13) {
      goto LABEL_33;
    }
  }

  if ((_DWORD)v13) {
    goto LABEL_47;
  }
LABEL_33:
  uint64_t v21 = *((void *)&v40 + 1);
  if (*((void *)&v40 + 1) >= (unint64_t)v40)
  {
    sub_18135BB8C((uint64_t)&v38, 93);
  }

  else
  {
    ++*((void *)&v40 + 1);
    v39[v21] = 93;
  }

  sub_18135B44C((uint64_t)&v38);
  if (a1)
  {
    uint64_t v24 = *(void *)a1;
    *(_BYTE *)(v24 + 23) = 74;
    *(_WORD *)(v24 + 20) |= 0x800u;
LABEL_47:
    if ((_BYTE)v41) {
      return;
    }
    goto LABEL_50;
  }

  sub_1812CF36C(97481);
  if ((_BYTE)v41) {
    return;
  }
LABEL_50:
  int v26 = v39 - 8;
  uint64_t v25 = *((void *)v39 - 1);
  if (v25 >= 2)
  {
    *(void *)int v26 = v25 - 1;
    return;
  }

  int v27 = (void (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v26);
    --qword_18C468B10;
    off_18C4653A8(v26);
    int v26 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v27 = (void (**)(char *))&xmmword_18C465410;
      goto LABEL_57;
    }
  }

  else
  {
LABEL_57:
    (*v27)(v26);
  }

    uint64_t v56 = v43 - v54;
    if ((int)v56 < 1)
    {
      double v8 = 267LL;
      goto LABEL_136;
    }

    __src = v42;
    uint64_t v57 = 0;
    __n = (int)v43;
    BOOL v149 = v39;
    int v58 = *((unsigned int *)v39 + 13);
    uint64_t v59 = (int)v54;
    uint64_t v60 = v43 + v45;
    uint64_t v61 = v43 + v45 + 1;
    uint64_t v62 = v61 - v54;
    unsigned int v63 = v60 + 2;
    int v64 = v60 + 2 - v54;
    do
    {
      uint64_t v65 = v62;
      uint64_t v66 = v64;
      ++v57;
      ++v62;
      ++v64;
      double v36 = v59 > 0x7F;
      v59 >>= 7;
    }

    while (v36);
    uint64_t v67 = v56;
    do
    {
      double v68 = v66;
      ++v65;
      ++v66;
      double v36 = v67 > 0x7F;
      v67 >>= 7;
    }

    while (v36);
    double v69 = v45;
    do
    {
      ++v68;
      double v36 = v69 > 0x7F;
      v69 >>= 7;
    }

    while (v36);
    unsigned int v70 = v68;
    if ((int)v58 >= 1 && v68 + v58 > *(int *)(a1 + 456))
    {
      signed __int8 v71 = v149[2];
      if (v71 == 0x7FFFFFFFFFFFFFFFLL)
      {
        double v8 = 267LL;
        uint64_t v39 = v149;
        goto LABEL_137;
      }

      v149[2] = v71 + 1;
      int v72 = sub_181377C44((uint64_t *)a1, v71, (char *)v149[7], v58);
      if ((_DWORD)v72
        || (++*(_DWORD *)(a1 + 100), int v72 = sub_181377DB0(a1, v149, __src, (v54 + 1)), (_DWORD)v72))
      {
        double v8 = v72;
        uint64_t v39 = v149;
        goto LABEL_137;
      }

      *((_DWORD *)v149 + 8) = 0;
      int v73 = __n;
      do
      {
        double v74 = v63;
        ++v61;
        ++v63;
        double v36 = v73 > 0x7F;
        v73 >>= 7;
      }

      while (v36);
      LODWORD(v45) = v152;
      int v75 = v152;
      do
      {
        ++v74;
        double v36 = v75 > 0x7F;
        v75 >>= 7;
      }

      while (v36);
      LODWORD(v58) = 0;
      LODWORD(v54) = 0;
      unsigned int v70 = v74;
      LODWORD(v56) = v151;
    }

    uint64_t v39 = v149;
    ssize_t v76 = v149[7];
    v149[8] += v70;
    if (v70 > *((int *)v149 + 12))
    {
      if (sqlite3_initialize() || (uint64_t v77 = sub_18127D33C(v76, v70)) == 0)
      {
LABEL_128:
        double v8 = 7LL;
        goto LABEL_137;
      }

      ssize_t v76 = v77;
      v149[7] = v77;
      *((_DWORD *)v149 + 12) = v70;
      LODWORD(v45) = v152;
    }

    double v78 = (int)v54;
    int8x16_t v79 = v56 + v58 + 2;
    uint64_t v80 = v79 + v45;
    uint64_t v81 = (_BYTE *)(v76 + (int)v58);
    uint64_t v82 = (int)v54;
    do
    {
      uint64_t v83 = v81;
      __int16 v84 = v80;
      int v85 = v82;
      *v81++ = v82 | 0x80;
      int v86 = v79;
      ++v80;
      ++v79;
      double v36 = v82 > 0x7F;
      v82 >>= 7;
    }

    while (v36);
    char *v83 = v85 & 0x7F;
    uint64_t v87 = (int)v58 + (uint64_t)((int)v81 - ((int)v76 + (int)v58));
    uint64_t v88 = (_BYTE *)(v149[7] + v87);
    int v89 = v88;
    uint64_t v90 = (int)v56;
    uint64_t v11 = v155;
    do
    {
      unsigned int v91 = v89;
      v92 = v84;
      unsigned int v93 = v90;
      *v89++ = v90 | 0x80;
      uint64_t v94 = v86;
      ++v84;
      ++v86;
      double v36 = v90 > 0x7F;
      v90 >>= 7;
    }

    while (v36);
    void *v91 = v93 & 0x7F;
    size_t v95 = v87 + (_DWORD)v89 - (_DWORD)v88;
    memcpy((void *)(v149[7] + v95), &__src[v78], (int)v56);
    uint64_t v96 = (_BYTE *)(v149[7] + v95 + (int)v56);
    int v97 = v152;
    do
    {
      unsigned int v98 = v97;
      *v96++ = v97 | 0x80;
      ++v92;
      ++v94;
      double v36 = v97 > 0x7F;
      v97 >>= 7;
    }

    while (v36);
    *(v96 - 1) = v98 & 0x7F;
    memcpy((void *)(v149[7] + v94), v147, v152);
    *((_DWORD *)v149 + 13) = v92;
    uint64_t v99 = v151;
    if (*((_DWORD *)v149 + 9) >= v151)
    {
      __int16 v40 = (void *)v149[3];
    }

    else
    {
      va_list v100 = v149[5];
      if (sqlite3_initialize()) {
        goto LABEL_128;
      }
      __int16 v40 = (void *)sub_18127D33C(v100, 2 * __n);
      if (!v40) {
        goto LABEL_128;
      }
      uint64_t v99 = v151;
      *((_DWORD *)v149 + 9) = 2 * v151;
      v149[5] = (uint64_t)v40;
      v149[3] = (uint64_t)v40;
    }

    memcpy(v40, __src, __n);
    *((_DWORD *)v149 + 8) = v99;
  }

  double v8 = v41;
  if ((_DWORD)v41) {
    goto LABEL_136;
  }
  if (a4 == -1)
  {
    if (!v39)
    {
      double v8 = 0LL;
      goto LABEL_157;
    }

      *(void *)(v24 + 64) = v25;
      *(void *)(v24 + 72) = v29;
      if (v33) {
        int v41 = 0;
      }
      else {
        int v41 = v29 == v30;
      }
      if (!v41) {
LABEL_36:
      }
        uint64_t v21 = 0;
      int8x16_t v10 = *(void *)(v10 + 16);
    }

    while (v10);
    if (!v21) {
      int v12 = 0LL;
    }
    else {
LABEL_88:
    }
      int v12 = *(char **)(v4 + 64);
    uint64_t v52 = v12;
    goto LABEL_91;
  }

  uint64_t v18 = *(unsigned __int8 *)(v17 + 48);
  sub_18137FF60(a1, v17, &v50);
  while (1)
  {
    int result = v50;
    if (v50) {
      return result;
    }
    uint64_t v20 = *(unsigned __int8 *)(v17 + 48);
    if (*(_BYTE *)(v17 + 48)) {
      goto LABEL_28;
    }
    sub_1813733EC(a1, v17, (int *)&v50);
    if (!v18 && *(void *)(v17 + 40) == v51)
    {
      int result = v50;
      if (v50) {
        return result;
      }
      uint64_t v20 = *(unsigned __int8 *)(v17 + 48);
LABEL_28:
      if (v20 == v18) {
        goto LABEL_29;
      }
      return 267LL;
    }
  }

LABEL_771:
                    *((_DWORD *)v4 + 4) = 0;
                    *((_DWORD *)v4 + 6) = 0;
                    *((void *)v4 + 1) = 0LL;
                  }

                  goto LABEL_772;
                }
              }

              int v358 = v280;
              int v362 = v19;
              int v375 = v18;
              char v292 = v20;
              if (*(void *)v4) {
                uint64_t v293 = sub_1812F2264(*(void *)v4, v290);
              }
              else {
                uint64_t v293 = sub_18126F0AC(v290);
              }
              int v6 = (char *)v293;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              LOBYTE(v20) = v292;
              LODWORD(v18) = v375;
              LODWORD(v19) = v362;
              uint64_t v294 = v293;
              LOBYTE(v72) = v369;
              int v279 = v386;
              BOOL v283 = v371;
              int v280 = v358;
              if (!v293) {
                goto LABEL_760;
              }
            }

            v295 = v6;
            if (v279)
            {
              *int v6 = v279;
              v295 = v6 + 1;
            }

            uint64_t v376 = v294;
            __int32 v296 = 0;
            if (v287 < 0)
            {
              *v295++ = 48;
            }

            else
            {
              do
              {
                v297 = v295;
                if (v296 >= v404.i32[0]) {
                  char v298 = 48;
                }
                else {
                  char v298 = v405[v296++];
                }
                *v295++ = v298;
                if ((_DWORD)v18 && v287 >= 2 && 3 * (v287 / 3u) == v287)
                {
                  v295 = v297 + 2;
                  v297[1] = 44;
                }

                BOOL v164 = v287-- <= 0;
              }

              while (!v164);
              int v280 = -1;
            }

            char v299 = v379 | v20 | (v282 > 0);
            if (v299) {
              *v295++ = 46;
            }
            if (v280 <= -2)
            {
              LODWORD(v300) = v282 - 1;
              if (v282 >= 1)
              {
                char v381 = v299;
                BOOL v301 = v300 >= -2 - v280;
                int v302 = v300 - (-2 - v280);
                else {
                  uint64_t v300 = v300;
                }
                v359 = &v295[v300 + 1];
                if (v301) {
                  int v282 = v302;
                }
                else {
                  int v282 = 0;
                }
                char v363 = v20;
                int v303 = v19;
                memset(v295, 48, v300 + 1);
                char v299 = v381;
                BOOL v283 = v371;
                int v279 = v386;
                LOBYTE(v72) = v369;
                LODWORD(v19) = v303;
                LOBYTE(v20) = v363;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v295 = v359;
              }
            }

            if (v282 >= 1)
            {
              unsigned int v304 = v282 + 1;
              do
              {
                if (v296 < v404.i32[0]) {
                  char v305 = v405[v296++];
                }
                else {
                  char v305 = 48;
                }
                *v295++ = v305;
                --v304;
              }

              while (v304 > 1);
            }

            if (v283)
            {
              uint64_t v80 = v376;
              if (v299)
              {
                --v295;
                while (1)
                {
                  int v306 = *v295;
                  if (v306 != 48) {
                    break;
                  }
                  *v295-- = 0;
                }

                if (v306 == 46)
                {
                  if ((_BYTE)v20)
                  {
                    v295[1] = 48;
                    v295 += 2;
                  }

                  else
                  {
                    char *v295 = 0;
                  }
                }

                else
                {
                  ++v295;
                }
              }
            }

            else
            {
              uint64_t v80 = v376;
            }

            if (v72 == 2)
            {
              __int32 v307 = v404.i32[1];
              char *v295 = a0123456789abcd_0[byte_1813C62B2[6 * v366 + 4]];
              int v308 = 1 - v307;
              BOOL v309 = __OFSUB__(v307, 1);
              int v310 = v307 - 1;
              if (v310 < 0 != v309) {
                char v311 = 45;
              }
              else {
                char v311 = 43;
              }
              if (v310 < 0 != v309) {
                int v310 = v308;
              }
              v295[1] = v311;
              if (v310 < 0x64)
              {
                v312 = v295 + 2;
              }

              else
              {
                v312 = v295 + 3;
                v295[2] = v310 / 0x64u + 48;
                v310 %= 0x64u;
              }

              _BYTE *v312 = (v310 / 0xAu) | 0x30;
              v295 = v312 + 2;
              v312[1] = (v310 % 0xAu) | 0x30;
            }

            char *v295 = 0;
            LODWORD(v90) = (_DWORD)v295 - (_DWORD)v6;
            if ((_DWORD)v19)
            {
              if (!(_BYTE)v22)
              {
                int v313 = (_DWORD)v23 - v90;
                if ((int)v23 > (int)v90)
                {
                  if ((v90 & 0x80000000) != 0) {
                    goto LABEL_638;
                  }
                  else {
                    uint64_t v314 = (int)v23;
                  }
                  unint64_t v315 = (int)v23 - v314 + 1;
                  if (v315 >= 8)
                  {
                    uint64_t v317 = (int)v23 >= (uint64_t)v313 ? v313 : (int)v23;
                    uint64_t v318 = (int)v23 - v317;
                    if (&v6[(int)v23 - v318] <= &v6[(int)v23]
                      && &v6[(int)v23 - (uint64_t)v313 - v318] <= &v6[(int)v23 - (uint64_t)v313]
                      && (unint64_t)(v313 + 31LL) >= 0x20)
                    {
                      if (v315 >= 0x20)
                      {
                        unint64_t v319 = v315 & 0xFFFFFFFFFFFFFFE0LL;
                        v321 = &v6[(int)v23 - 15];
                        unint64_t v322 = v315 & 0xFFFFFFFFFFFFFFE0LL;
                        do
                        {
                          __int128 v323 = *(_OWORD *)&v321[-v313];
                          *((_OWORD *)v321 - 1) = *(_OWORD *)&v321[-v313 - 16];
                          *(_OWORD *)v321 = v323;
                          v321 -= 32;
                          v322 -= 32LL;
                        }

                        while (v322);
                        if (v315 == v319) {
                          goto LABEL_638;
                        }
                        if ((v315 & 0x18) != 0) {
                          goto LABEL_661;
                        }
                        int64_t v288 = (int)v23 - v319;
                      }

                      else
                      {
                        unint64_t v319 = 0LL;
LABEL_661:
                        v324 = &v6[(int)v23 - v319];
                        unint64_t v325 = v319 - (v315 & 0xFFFFFFFFFFFFFFF8LL);
                        v326 = v324 - 7;
                        do
                        {
                          *(void *)v326 = *(void *)&v326[-v313];
                          v326 -= 8;
                          v325 += 8LL;
                        }

                        while (v325);
                        int64_t v288 = (int)v23 - (v315 & 0xFFFFFFFFFFFFFFF8LL);
                        if (v315 == (v315 & 0xFFFFFFFFFFFFFFF8LL))
                        {
LABEL_638:
                          if ((_DWORD)v23 == (_DWORD)v90)
                          {
                            LODWORD(v90) = (_DWORD)v23;
                          }

                          else
                          {
                            if (v279) {
                              v316 = v6 + 1;
                            }
                            else {
                              v316 = v6;
                            }
                            memset(v316, 48, (~(_DWORD)v295 + (_DWORD)v23 + (_DWORD)v6) + 1LL);
                            v10.i64[0] = 0x8080808080808080LL;
                            v10.i64[1] = 0x8080808080808080LL;
                            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                            LODWORD(v90) = (_DWORD)v23;
                          }

                          goto LABEL_702;
                        }
                      }
                    }
                  }

                  do
                  {
                    v6[v288] = v6[v288 - v313];
                    BOOL v164 = v288-- <= v313;
                  }

                  while (!v164);
                  goto LABEL_638;
                }
              }
            }

            goto LABEL_702;
          }

          strcpy((char *)__src, "-Inf");
          if (v402 != 45)
          {
            int v6 = (char *)__src + 1;
            if (!v384) {
              goto LABEL_574;
            }
            LOBYTE(__src[0]) = v384;
          }

          int v6 = (char *)__src;
LABEL_574:
          uint64_t v80 = 0LL;
          LODWORD(v90) = strlen(v6) & 0x3FFFFFFF;
LABEL_675:
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          goto LABEL_702;
        }

        if (byte_18C46538A)
        {
          if (v74 >= 1.0e19)
          {
            for (i = 0; v74 >= 1.0e119; double v74 = v74 * 1.0e-100)
              i += 100;
            for (; v74 >= 1.0e29; double v74 = v74 * 1.0e-10)
              i += 10;
            while (v74 >= 1.0e19)
            {
              ++i;
              double v74 = v74 * 0.1;
            }
          }

          else
          {
            for (i = 0; v74 < 1.0e-97; double v74 = v74 * 1.0e100)
              i -= 100;
            while (v74 < 10000000.0)
            {
              i -= 10;
              double v74 = v74 * 1.0e10;
            }

            for (; v74 < 1.0e17; double v74 = v74 * v8)
              --i;
          }

          unint64_t v191 = (unint64_t)v74;
        }

        else
        {
          double v389 = v74;
          double v388 = 0.0;
          if (v74 <= 9.22337204e18)
          {
            int i = 0;
            if (v74 >= 9.22337204e-83)
            {
              double v133 = 0.0;
            }

            else
            {
              do
              {
                i -= 100;
                double v397 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999995e99
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999995e99
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 5.15323793e91;
                double v391 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999995e99
                     - v397
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999995e99
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 5.15323793e91
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 5.15323793e91
                     + v388 * 1.0e100
                     + v389 * -1.59028911e83;
                double v389 = v397 + v391;
                double v74 = v397 + v391;
                double v133 = v391 + v397 - (v397 + v391);
                double v388 = v133;
              }

              while (v397 + v391 < 9.22337204e-83);
            }

            if (v74 < 92233720.4)
            {
              do
              {
                i -= 10;
                double v400 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 1.0e10
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 1.0e10
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0;
                double v394 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 1.0e10
                     - v400
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 1.0e10
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 0.0
                     + v388 * 1.0e10
                     + v389 * 0.0;
                double v389 = v400 + v394;
                double v74 = v400 + v394;
                double v133 = v394 + v400 - (v400 + v394);
                double v388 = v133;
              }

              while (v400 + v394 < 92233720.4);
            }

            while (v74 < 9.22337204e17)
            {
              --i;
              double v401 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 10.0
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 10.0
                   + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0;
              double v8 = 10.0;
              double v395 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 10.0
                   - v401
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 10.0
                   + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 0.0
                   + v388 * 10.0
                   + v389 * 0.0;
              double v389 = v401 + v395;
              double v74 = v401 + v395;
              double v133 = v395 + v401 - (v401 + v395);
              double v388 = v133;
            }
          }

          else
          {
            int i = 0;
            if (v74 <= v370)
            {
              double v133 = 0.0;
            }

            else
            {
              do
              {
                i += 100;
                double v396 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999999e-101
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999999e-101
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 1.18108707e-109;
                double v390 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999999e-101
                     - v396
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999999e-101
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 1.18108707e-109
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 1.18108707e-109
                     + v388 * 1.0e-100
                     + v389 * -1.99918998e-117;
                double v389 = v396 + v390;
                double v74 = v396 + v390;
                double v133 = v390 + v396 - (v396 + v390);
                double v388 = v133;
              }

              while (v396 + v390 > v370);
            }

            if (v74 > 9.22337204e28)
            {
              do
              {
                i += 10;
                double v398 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999996e-11
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999996e-11
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 3.99580284e-19;
                double v392 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 9.99999996e-11
                     - v398
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 9.99999996e-11
                     + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 3.99580284e-19
                     + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 3.99580284e-19
                     + v388 * 1.0e-10
                     + v389 * -3.64321973e-27;
                double v389 = v398 + v392;
                double v74 = v398 + v392;
                double v133 = v392 + v398 - (v398 + v392);
                double v388 = v133;
              }

              while (v398 + v392 > 9.22337204e28);
            }

            while (v74 > 9.22337204e18)
            {
              ++i;
              double v399 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0999999996
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 0.0999999996
                   + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 3.72529035e-10;
              double v393 = COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 0.0999999996
                   - v399
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 0.0999999996
                   + COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL) * 3.72529035e-10
                   + (v389 - COERCE_DOUBLE(*(void *)&v74 & 0xFFFFFFFFFC000000LL)) * 3.72529035e-10
                   + v388 * 0.1
                   + v389 * -5.55111512e-18;
              double v389 = v399 + v393;
              double v74 = v399 + v393;
              double v133 = v393 + v399 - (v399 + v393);
              double v388 = v133;
            }
          }

          unint64_t v191 = (unint64_t)v74 - (unint64_t)-v133;
          if (v133 >= 0.0) {
            unint64_t v191 = (unint64_t)v133 + (unint64_t)v74;
          }
        }

        *(double *)&uint64_t v7 = v370;
        if (v191)
        {
          uint64_t v264 = 47LL;
          do
          {
            *(&v402 + v264--) = (v191 % 0xA) | 0x30;
            BOOL v164 = v191 > 9;
            v191 /= 0xAuLL;
          }

          while (v164);
          int v265 = v264 - 24;
        }

        else
        {
          int v265 = 23;
        }

        int v266 = 23 - v265;
        __int32 v267 = 23 - v265 + i;
        v404.i32[0] = 23 - v265;
        v404.i32[1] = v267;
        if (v86 < 0 && (int v86 = v267 - v86) == 0)
        {
          uint64_t v272 = v265;
          if (*(&v402 + v265 + 25) < 53) {
            goto LABEL_515;
          }
          --v265;
          v406[v272] = 48;
          int32x2_t v404 = vadd_s32(v404, (int32x2_t)0x100000001LL);
          int v266 = v404.i32[0];
          int v86 = 1;
          if (v404.i32[0] > v115)
          {
LABEL_501:
            uint64_t v268 = v265;
            v269 = &v402 + v265 + 25;
            if (v86 >= v115) {
              int v266 = v115;
            }
            else {
              int v266 = v86;
            }
            v404.i32[0] = v266;
            if (v269[v266] >= 53)
            {
              int v270 = v266 - 1;
              while (1)
              {
                int v271 = ++v269[v270];
                if (v271 < 58) {
                  break;
                }
                v269[v270--] = 48;
                if (v270 == -1)
                {
                  --v265;
                  v405[v268] = 49;
                  int32x2_t v404 = vadd_s32(v404, (int32x2_t)0x100000001LL);
                  int v266 = v404.i32[0];
                  goto LABEL_515;
                }
              }

              int v266 = v404.i32[0];
            }

LABEL_515:
            unsigned int v116 = &v406[v265 + 1];
            v405 = v116;
            if (v266 >= 1)
            {
              uint64_t v276 = v266;
              char v118 = v21;
              do
              {
                uint64_t v277 = v276 - 1;
                v404.i32[0] = --v276;
              }

              while ((unint64_t)(v277 + 1) > 1);
              goto LABEL_521;
            }

LABEL_520:
            char v118 = v21;
LABEL_521:
            char v117 = v403;
            goto LABEL_522;
          }
        }

        else
        {
          if (v86 < 1) {
            goto LABEL_515;
          }
          if (v266 > v115) {
            goto LABEL_501;
          }
        }

        if (v86 >= v266) {
          goto LABEL_515;
        }
        goto LABEL_501;
      case 4u:
        if ((v383 & 2) != 0) {
          goto LABEL_699;
        }
        uint64_t v80 = 0LL;
        LODWORD(v23) = 0;
        LODWORD(v90) = 0;
        unsigned int v91 = (_DWORD **)v387;
        v387 += 8;
        *void *v91 = *((_DWORD *)v4 + 6);
        goto LABEL_702;
      case 5u:
      case 6u:
        if ((v383 & 2) == 0)
        {
          double v78 = (char **)v387;
          v387 += 8;
          int v6 = *v78;
          goto LABEL_143;
        }

        uint64_t v111 = *(int *)(v5 + 4);
        uint64_t v112 = *(void *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v111 + 1;
        uint64_t v113 = *(void *)(v112 + 8 * v111);
        if (!v113) {
          goto LABEL_367;
        }
        int v114 = *(unsigned __int16 *)(v113 + 20);
        if ((~v114 & 0x202) != 0 || *(_BYTE *)(v113 + 22) != 1)
        {
          if ((v114 & 1) != 0)
          {
LABEL_367:
            uint64_t v80 = 0LL;
            int v6 = &byte_1813CEAEE;
            v79.i64[0] = 0x100000001LL;
            v79.i64[1] = 0x100000001LL;
LABEL_368:
            if ((v24 & 0x80000000) != 0)
            {
              char v199 = v20;
              goto LABEL_379;
            }

            if (!(_BYTE)v20)
            {
              if (!(_DWORD)v24) {
                goto LABEL_701;
              }
              uint64_t v90 = 0LL;
              do
              {
                if (!v6[v90]) {
                  goto LABEL_702;
                }
                ++v90;
              }

              while (v24 != v90);
              LODWORD(v90) = v24;
              goto LABEL_702;
            }

            v197 = v6;
            if ((_DWORD)v24)
            {
              do
              {
                if (!*v197) {
                  break;
                }
                if (*v197 < 0xC0u)
                {
                  ++v197;
                }

                else
                {
                  do
                    char v198 = *++v197;
                  while ((v198 & 0xC0) == 0x80);
                }

                BOOL v164 = (int)v24 <= 1;
                LODWORD(v24) = v24 - 1;
              }

              while (!v164);
            }

            LODWORD(v90) = (_DWORD)v197 - (_DWORD)v6;
LABEL_455:
            if (v90 < 8 || (unint64_t v236 = v90 - 1LL, HIDWORD(v236)))
            {
              uint64_t v238 = v90;
            }

            else
            {
              if (v90 < 0x20)
              {
                uint64_t v237 = 0LL;
LABEL_471:
                uint64_t v238 = v90 & 7;
                int32x4_t v259 = 0uLL;
                int32x4_t v260 = (int32x4_t)v23;
                uint64_t v261 = ~v237 + v90;
                uint64_t v262 = v237 - (v90 & 0xFFFFFFF8);
                do
                {
                  uint16x8_t v263 = vmovl_u8((uint8x8_t)vceq_s8( vrev64_s8( vand_s8( *(int8x8_t *)&v6[v261 - 7],  (int8x8_t)0xC0C0C0C0C0C0C0C0LL)),  (int8x8_t)0x8080808080808080LL));
                  int32x4_t v259 = vaddq_s32(v259, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v263), v79));
                  int32x4_t v260 = vaddq_s32(v260, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v263.i8), v79));
                  v261 -= 8LL;
                  v262 += 8LL;
                }

                while (v262);
                LODWORD(v23) = vaddvq_s32(vaddq_s32(v260, v259));
                goto LABEL_462;
              }

              uint64_t v237 = v90 & 0xFFFFFFE0;
              int32x4_t v240 = 0uLL;
              int32x4_t v241 = (int32x4_t)v23;
              uint64_t v242 = v237;
              int32x4_t v243 = 0uLL;
              int32x4_t v244 = 0uLL;
              int32x4_t v245 = 0uLL;
              v246.i64[0] = 0x100000001LL;
              v246.i64[1] = 0x100000001LL;
              int32x4_t v247 = 0uLL;
              int32x4_t v248 = 0uLL;
              int32x4_t v249 = 0uLL;
              do
              {
                v250 = &v6[v236];
                int8x16_t v251 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v250 - 15), v9));
                int8x16_t v252 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v250 - 31), v9));
                uint8x16_t v253 = (uint8x16_t)vceqq_s8(vextq_s8(v251, v251, 8uLL), v10);
                uint16x8_t v254 = vmovl_u8(*(uint8x8_t *)v253.i8);
                uint16x8_t v255 = vmovl_high_u8(v253);
                uint8x16_t v256 = (uint8x16_t)vceqq_s8(vextq_s8(v252, v252, 8uLL), v10);
                uint16x8_t v257 = vmovl_u8(*(uint8x8_t *)v256.i8);
                uint16x8_t v258 = vmovl_high_u8(v256);
                int32x4_t v244 = vaddq_s32(v244, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v255), v246));
                int32x4_t v243 = vaddq_s32(v243, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v255.i8), v246));
                int32x4_t v240 = vaddq_s32(v240, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v254), v246));
                int32x4_t v241 = vaddq_s32(v241, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v254.i8), v246));
                int32x4_t v249 = vaddq_s32(v249, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v258), v246));
                int32x4_t v248 = vaddq_s32(v248, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v258.i8), v246));
                int32x4_t v247 = vaddq_s32(v247, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v257), v246));
                int32x4_t v245 = vaddq_s32(v245, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v257.i8), v246));
                v236 -= 32LL;
                v242 -= 32LL;
              }

              while (v242);
              LODWORD(v23) = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v245, v241), vaddq_s32(v248, v243)),  vaddq_s32(vaddq_s32(v247, v240), vaddq_s32(v249, v244))));
              v79.i64[0] = 0x100000001LL;
              v79.i64[1] = 0x100000001LL;
              if ((v90 & 0x18) != 0) {
                goto LABEL_471;
              }
              uint64_t v238 = v90 & 0x1F;
            }

LABEL_143:
        v79.i64[0] = 0x100000001LL;
        v79.i64[1] = 0x100000001LL;
        if (v6)
        {
          if (v72 == 6)
          {
            if (!*((_DWORD *)v4 + 6) && *((_DWORD *)v4 + 5) && !(_DWORD)v23 && (v24 & 0x80000000) != 0)
            {
              if (*((_BYTE *)v4 + 28))
              {
                char v199 = v20;
                uint64_t v80 = (uint64_t)v6;
LABEL_379:
                LODWORD(v90) = strlen(v6) & 0x7FFFFFFF;
                v79.i64[0] = 0x100000001LL;
                v79.i64[1] = 0x100000001LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                if (v199) {
                  goto LABEL_455;
                }
                goto LABEL_702;
              }

              *((void *)v4 + 1) = v6;
              uint64_t v348 = *(void *)v4;
              if (*(void *)v4 && *(void *)(v348 + 520) > (unint64_t)v6)
              {
                if (*(void *)(v348 + 496) <= (unint64_t)v6)
                {
                  int v349 = 128;
                  goto LABEL_745;
                }

                if (*(void *)(v348 + 504) <= (unint64_t)v6)
                {
                  int v349 = *(unsigned __int16 *)(v348 + 438);
                  goto LABEL_745;
                }
              }

              int v349 = off_18C4653B8(v6);
LABEL_745:
              *((_DWORD *)v4 + 4) = v349;
              uint64_t v80 = 0LL;
              LODWORD(v23) = 0;
              LODWORD(v90) = 0;
              *((_DWORD *)v4 + 6) = strlen(v6) & 0x7FFFFFFF;
              *((_BYTE *)v4 + 29) |= 4u;
              goto LABEL_675;
            }

            uint64_t v80 = (uint64_t)v6;
          }

          else
          {
            uint64_t v80 = 0LL;
          }
        }

        else
        {
          uint64_t v80 = 0LL;
          int v6 = &byte_1813CEAEE;
        }

        goto LABEL_368;
      case 7u:
        uint64_t v80 = 0LL;
        LOBYTE(__src[0]) = 37;
        int v6 = (char *)__src;
        LODWORD(v90) = 1;
        goto LABEL_702;
      case 8u:
        if ((v383 & 2) == 0)
        {
          v92 = (unsigned int *)v387;
          v387 += 8;
          unsigned int v93 = *v92;
          if (v93 <= 0x7F)
          {
            LOBYTE(__src[0]) = v93;
LABEL_422:
            LODWORD(v90) = 1;
            v79.i64[0] = 0x100000001LL;
            v79.i64[1] = 0x100000001LL;
            goto LABEL_423;
          }

          v79.i64[0] = 0x100000001LL;
          v79.i64[1] = 0x100000001LL;
          if (v93 <= 0x7FF)
          {
            LOBYTE(__src[0]) = (v93 >> 6) | 0xC0;
            BYTE1(__src[0]) = v93 & 0x3F | 0x80;
            LODWORD(v90) = 2;
            goto LABEL_423;
          }

          if (!HIWORD(v93))
          {
            LOBYTE(__src[0]) = (v93 >> 12) | 0xE0;
            BYTE1(__src[0]) = (v93 >> 6) & 0x3F | 0x80;
            BYTE2(__src[0]) = v93 & 0x3F | 0x80;
            LODWORD(v90) = 3;
            goto LABEL_423;
          }

          LOBYTE(__src[0]) = (v93 >> 18) & 7 | 0xF0;
          BYTE1(__src[0]) = (v93 >> 12) & 0x3F | 0x80;
          BYTE2(__src[0]) = (v93 >> 6) & 0x3F | 0x80;
          HIBYTE(__src[0]) = v93 & 0x3F | 0x80;
          goto LABEL_656;
        }

        uint64_t v128 = *(int *)(v5 + 4);
        uint64_t v129 = *(void *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v128 + 1;
        uint64_t v130 = *(void *)(v129 + 8 * v128);
        if (!v130) {
          goto LABEL_421;
        }
        int v131 = *(unsigned __int16 *)(v130 + 20);
        if ((~v131 & 0x202) != 0 || *(_BYTE *)(v130 + 22) != 1)
        {
          if ((v131 & 1) != 0) {
            goto LABEL_421;
          }
          int v219 = v24;
          v132 = (_BYTE *)sub_181303998((int *)v130, 1);
          LODWORD(v24) = v219;
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
        }

        else
        {
          v132 = *(_BYTE **)(v130 + 8);
        }

        if (!v132)
        {
LABEL_421:
          LOBYTE(__src[0]) = 0;
          goto LABEL_422;
        }

        LOBYTE(__src[0]) = *v132;
        v79.i64[0] = 0x100000001LL;
        v79.i64[1] = 0x100000001LL;
        if (LOBYTE(__src[0]) >= 0xC0u && (v132[1] & 0xC0) == 0x80)
        {
          BYTE1(__src[0]) = v132[1];
          if ((v132[2] & 0xC0) == 0x80)
          {
            BYTE2(__src[0]) = v132[2];
            if ((v132[3] & 0xC0) == 0x80)
            {
              HIBYTE(__src[0]) = v132[3];
LABEL_656:
              LODWORD(v90) = 4;
              goto LABEL_423;
            }

            LODWORD(v90) = 3;
          }

          else
          {
            LODWORD(v90) = 2;
          }
        }

        else
        {
          LODWORD(v90) = 1;
        }

      int v73 = (__int16)v29;
      double v74 = ((26215 * v73) >> 18) + ((26215 * v73) >> 31);
      int v75 = (__int16)v29 % 10;
      ssize_t v76 = (__int16)v75 - 1LL;
      if (!v75) {
        ssize_t v76 = 0LL;
      }
      if (v75 <= 4u) {
        uint64_t v77 = v76;
      }
      else {
        uint64_t v77 = (__int16)v75 - 2LL;
      }
      double v78 = v77 + 8;
      int8x16_t v79 = v78 << (v74 - 3);
      int v72 = v78 >> (3 - v74);
      if (v73 > 29) {
        int v72 = v79;
      }
      *uint64_t v50 = v72;
      if (v72 < 8)
      {
        if (v72 < 2)
        {
          uint64_t v80 = 0;
          goto LABEL_164;
        }

        uint64_t v81 = 40;
        do
        {
          uint64_t v83 = v72;
          v81 -= 10;
          v72 *= 2LL;
        }

        while (v83 < 4);
LABEL_163:
        uint64_t v80 = (__int16)(v81 + word_1813CD842[v72 & 7] - 10);
LABEL_164:
        sqlite3_int64 v1 = 0;
        sqlite3_str *v51 = v80;
        return v1;
      }

      if (v72 < 0x100)
      {
        uint64_t v81 = 40;
        goto LABEL_161;
      }

LABEL_423:
        if ((int)v24 >= 2)
        {
          int v220 = v24 - 1;
          LODWORD(v23) = (_DWORD)v23 - (v24 - 1);
          if ((int)v23 >= 2 && !(_BYTE)v22)
          {
            uint64_t v221 = ((_DWORD)v23 - 1);
            if ((unint64_t)*((unsigned int *)v4 + 6) + v221 < *((unsigned int *)v4 + 4)
              || (int v222 = v24,
                  int v223 = sub_1812D3698((void **)v4, v221),
                  LODWORD(v24) = v222,
                  LODWORD(v221) = v223,
                  v223 >= 1))
            {
              unsigned int v224 = v221 + 1;
              do
              {
                uint64_t v225 = *((void *)v4 + 1);
                uint64_t v226 = *((unsigned int *)v4 + 6);
                *((_DWORD *)v4 + 6) = v226 + 1;
                *(_BYTE *)(v225 + v226) = 32;
                --v224;
              }

              while (v224 > 1);
            }

            LODWORD(v23) = 0;
          }

          int v227 = v24;
          uint64_t v228 = *((unsigned int *)v4 + 6);
          if ((v228 + v90) >= *((_DWORD *)v4 + 4))
          {
            sub_1812D3A10((uint64_t)v4, __src, v90);
          }

          else
          {
            *((_DWORD *)v4 + 6) = v228 + v90;
            memcpy((void *)(*((void *)v4 + 1) + v228), __src, v90);
          }

          v79.i64[0] = 0x100000001LL;
          v79.i64[1] = 0x100000001LL;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          if (v227 >= 3)
          {
            uint64_t v229 = 1LL;
            while (1)
            {
              else {
                uint64_t v230 = v229;
              }
              uint64_t v231 = v230 * v90;
              if (v231 + *((unsigned int *)v4 + 6) >= *((unsigned int *)v4 + 4))
              {
                sub_1812D3698((void **)v4, v230 * v90);
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v79.i64[0] = 0x100000001LL;
                v79.i64[1] = 0x100000001LL;
              }

              if (*((_BYTE *)v4 + 28)) {
                break;
              }
              uint64_t v232 = *((void *)v4 + 1);
              if ((int)v231 < 1 || v232 == 0)
              {
                if ((_DWORD)v231)
                {
                  sub_1812CF36C(32737);
                  v10.i64[0] = 0x8080808080808080LL;
                  v10.i64[1] = 0x8080808080808080LL;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                  v79.i64[0] = 0x100000001LL;
                  v79.i64[1] = 0x100000001LL;
                }
              }

              else
              {
                uint64_t v234 = *((unsigned int *)v4 + 6);
                v235 = (const void *)(v232 + v234 - v231);
                if ((v234 + v231) < *((_DWORD *)v4 + 4))
                {
                  *((_DWORD *)v4 + 6) = v234 + v231;
                  memcpy((void *)(v232 + v234), v235, v231);
                }

                else
                {
                  sub_1812D3A10((uint64_t)v4, v235, v230 * v90);
                }

                v79.i64[0] = 0x100000001LL;
                v79.i64[1] = 0x100000001LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
              }

              v220 -= v230;
              uint64_t v229 = 2 * v230;
              int v6 = (char *)__src;
              if (v220 <= 1)
              {
                uint64_t v80 = 0LL;
                goto LABEL_455;
              }
            }
          }
        }

        uint64_t v80 = 0LL;
        int v6 = (char *)__src;
        goto LABEL_455;
      case 9u:
      case 0xAu:
      case 0xEu:
        if (v70 == 6) {
          int v75 = 34;
        }
        else {
          int v75 = 39;
        }
        if ((v383 & 2) == 0)
        {
          ssize_t v76 = (uint64_t *)v387;
          v387 += 8;
          uint64_t v77 = *v76;
          goto LABEL_259;
        }

        uint64_t v87 = *(int *)(v5 + 4);
        uint64_t v88 = *(void *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v87 + 1;
        uint64_t v77 = *(void *)(v88 + 8 * v87);
        if (v77)
        {
          int v89 = *(unsigned __int16 *)(v77 + 20);
          if ((~v89 & 0x202) != 0 || *(_BYTE *)(v77 + 22) != 1)
          {
            if ((v89 & 1) != 0)
            {
LABEL_258:
              uint64_t v77 = 0LL;
            }

            else
            {
              char v137 = v20;
              int v138 = v24;
              uint64_t v77 = sub_181303998((int *)v77, 1);
              LODWORD(v24) = v138;
              LOBYTE(v20) = v137;
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            }
          }

          else
          {
            uint64_t v77 = *(void *)(v77 + 8);
          }
        }

LABEL_259:
        unsigned int v139 = v70;
        v140 = "(NULL)";
        if (v70 == 5) {
          v140 = "NULL";
        }
        if (v77) {
          v141 = (unsigned __int8 *)v77;
        }
        else {
          v141 = (unsigned __int8 *)v140;
        }
        if (!(_DWORD)v24)
        {
          uint64_t v145 = 0LL;
          uint64_t v142 = 0LL;
          goto LABEL_277;
        }

        uint64_t v142 = 0LL;
        uint64_t v143 = 0LL;
        uint64_t v144 = (int)v24;
        while (1)
        {
          unsigned int v146 = v141[v143];
          if (!v141[v143]) {
            break;
          }
          if (v146 == v75) {
            ++v142;
          }
          if ((_BYTE)v20 && v146 >= 0xC0)
          {
            do
            {
              uint64_t v145 = v143 + 1;
              int v147 = v141[++v143] & 0xC0;
            }

            while (v147 == 128);
          }

          else
          {
            uint64_t v145 = v143 + 1;
          }

          uint64_t v143 = v145;
          if (!--v144) {
            goto LABEL_277;
          }
        }

        uint64_t v145 = v143;
LABEL_277:
        BOOL v149 = v139 == 5 && v77 != 0;
        uint64_t v150 = v145 + v142 + 3;
        if (v150 < 513)
        {
          uint64_t v154 = 0LL;
          int v6 = (char *)__src;
          v79.i64[0] = 0x100000001LL;
          v79.i64[1] = 0x100000001LL;
          goto LABEL_292;
        }

        if (*((_BYTE *)v4 + 28)) {
          return;
        }
        if (v150 <= (unint64_t)*((unsigned int *)v4 + 4) || (unint64_t v151 = *((unsigned int *)v4 + 5), v150 <= v151))
        {
          BOOL v385 = v149;
          char v152 = v20;
          if (*(void *)v4) {
            uint64_t v153 = sub_1812F2264(*(void *)v4, v150);
          }
          else {
            uint64_t v153 = sub_18126F0AC(v150);
          }
          int v6 = (char *)v153;
          v79.i64[0] = 0x100000001LL;
          v79.i64[1] = 0x100000001LL;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          LOBYTE(v20) = v152;
          uint64_t v154 = v153;
          BOOL v149 = v385;
          if (!v153) {
            goto LABEL_760;
          }
LABEL_292:
          if (v149)
          {
            *int v6 = v75;
            uint64_t v155 = 1LL;
            if (v145 < 1) {
              goto LABEL_296;
            }
          }

          else
          {
            uint64_t v155 = 0LL;
            if (v145 < 1)
            {
LABEL_296:
              uint64_t v90 = v155;
              goto LABEL_297;
            }
          }

          do
          {
            int v156 = *v141++;
            uint64_t v90 = v155 + 1;
            v6[v155] = v156;
            if (v156 == v75)
            {
              v6[v90] = v75;
              uint64_t v90 = v155 + 2;
            }

            uint64_t v155 = v90;
            --v145;
          }

          while (v145);
LABEL_297:
          if (v149) {
            v6[v90++] = v75;
          }
          uint64_t v80 = v154;
          v6[v90] = 0;
          if ((_BYTE)v20) {
            goto LABEL_455;
          }
LABEL_702:
          uint64_t v337 = ((_DWORD)v23 - v90);
          if ((int)v337 < 1)
          {
            if (!v6) {
              goto LABEL_731;
            }
            if ((int)v90 > 0)
            {
LABEL_717:
              uint64_t v343 = *((unsigned int *)v4 + 6);
              if ((v343 + v90) >= *((_DWORD *)v4 + 4))
              {
                sub_1812D3A10((uint64_t)v4, v6, v90);
              }

              else
              {
                *((_DWORD *)v4 + 6) = v343 + v90;
                memcpy((void *)(*((void *)v4 + 1) + v343), v6, v90);
              }

              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              goto LABEL_731;
            }
          }

          else
          {
            if ((_BYTE)v22)
            {
              if ((int)v90 >= 1 && v6)
              {
                uint64_t v338 = *((unsigned int *)v4 + 6);
                if ((v338 + v90) >= *((_DWORD *)v4 + 4))
                {
                  sub_1812D3A10((uint64_t)v4, v6, v90);
                }

                else
                {
                  *((_DWORD *)v4 + 6) = v338 + v90;
                  memcpy((void *)(*((void *)v4 + 1) + v338), v6, v90);
                }

                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
              }

              else if ((_DWORD)v90)
              {
                sub_1812CF36C(32737);
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
              }

              if ((unint64_t)*((unsigned int *)v4 + 6) + v337 < *((unsigned int *)v4 + 4)
                || (int v344 = sub_1812D3698((void **)v4, ((_DWORD)v23 - v90)),
                    v10.i64[0] = 0x8080808080808080LL,
                    v10.i64[1] = 0x8080808080808080LL,
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL,
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL,
                    LODWORD(v337) = v344,
                    v344 >= 1))
              {
                unsigned int v345 = v337 + 1;
                do
                {
                  uint64_t v346 = *((void *)v4 + 1);
                  uint64_t v347 = *((unsigned int *)v4 + 6);
                  *((_DWORD *)v4 + 6) = v347 + 1;
                  *(_BYTE *)(v346 + v347) = 32;
                  --v345;
                }

                while (v345 > 1);
              }

              goto LABEL_731;
            }

            if ((unint64_t)*((unsigned int *)v4 + 6) + v337 < *((unsigned int *)v4 + 4)
              || (int v339 = sub_1812D3698((void **)v4, ((_DWORD)v23 - v90)),
                  v10.i64[0] = 0x8080808080808080LL,
                  v10.i64[1] = 0x8080808080808080LL,
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL,
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL,
                  LODWORD(v337) = v339,
                  v339 >= 1))
            {
              unsigned int v340 = v337 + 1;
              do
              {
                uint64_t v341 = *((void *)v4 + 1);
                uint64_t v342 = *((unsigned int *)v4 + 6);
                *((_DWORD *)v4 + 6) = v342 + 1;
                *(_BYTE *)(v341 + v342) = 32;
                --v340;
              }

              while (v340 > 1);
            }
          }

          if ((_DWORD)v90)
          {
            sub_1812CF36C(32737);
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          }

LABEL_731:
          if (v80)
          {
            sub_1812F20DC(*(void **)v4, (void *)v80);
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          }

          sqlite3_int64 v3 = v16 + 1;
          uint64_t v5 = v382;
          continue;
        }

LABEL_766:
        *((_BYTE *)v4 + 28) = 18;
        if ((_DWORD)v151)
        {
          char v353 = *((_BYTE *)v4 + 29);
          if ((v353 & 4) != 0)
          {
            v354 = (void *)*((void *)v4 + 1);
            if (v354)
            {
              sub_1812F20DC(*(void **)v4, v354);
              char v353 = *((_BYTE *)v4 + 29);
            }

            *((_BYTE *)v4 + 29) = v353 & 0xFB;
          }

          goto LABEL_771;
        }

LABEL_772:
        if (*(void *)v4)
        {
          uint64_t v355 = *(void *)(*(void *)v4 + 344LL);
          if (v355)
          {
            *(_DWORD *)(v355 + 24) = 18;
            ++*(_DWORD *)(v355 + 48);
          }
        }

        return;
      case 0xBu:
        if ((*((_BYTE *)v4 + 29) & 1) == 0) {
          return;
        }
        uint64_t v94 = v387;
        v387 += 8;
        size_t v95 = (size_t *)*v94;
        if ((_BYTE)v21)
        {
          if (v95 && (*((_BYTE *)v95 + 5) & 8) == 0)
          {
            uint64_t v96 = (const void *)v95[1];
            if (v96)
            {
              int v97 = strlen((const char *)v95[1]);
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
              unsigned int v98 = v97 & 0x3FFFFFFF;
              if ((v97 & 0x3FFFFFFF) != 0)
              {
                uint64_t v99 = *((unsigned int *)v4 + 6);
                if (v99 + v98 >= *((_DWORD *)v4 + 4))
                {
                  sub_1812D3A10((uint64_t)v4, v96, v98);
                }

                else
                {
                  *((_DWORD *)v4 + 6) = v99 + v98;
                  memcpy((void *)(*((void *)v4 + 1) + v99), v96, v97 & 0x3FFFFFFF);
                }

                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
              }
            }

            do
            {
              if ((*((_BYTE *)v95 + 4) & 3) == 0)
              {
                int v333 = *((_DWORD *)v95 + 14);
                if (v333 > 0)
                {
                  uint64_t v80 = 0LL;
                  LODWORD(v23) = 0;
                  LODWORD(v90) = 0;
                  *(_DWORD *)(*(void *)v4 + 84LL) = v333;
                  goto LABEL_702;
                }
              }

              size_t v95 = (size_t *)v95[2];
            }

            while (v95);
          }

LABEL_699:
          uint64_t v80 = 0LL;
LABEL_700:
          LODWORD(v23) = 0;
LABEL_701:
          LODWORD(v90) = 0;
          goto LABEL_702;
        }

        if (!v95) {
          goto LABEL_699;
        }
        size_t v134 = *((unsigned int *)v95 + 2);
        if (!(_DWORD)v134) {
          goto LABEL_699;
        }
        v135 = (const void *)*v95;
        if ((int)v134 < 1 || v135 == 0LL)
        {
          sub_1812CF36C(32737);
        }

        else
        {
          uint64_t v320 = *((unsigned int *)v4 + 6);
          if ((v320 + v134) >= *((_DWORD *)v4 + 4))
          {
            sub_1812D3A10((uint64_t)v4, v135, v134);
          }

          else
          {
            *((_DWORD *)v4 + 6) = v320 + v134;
            memcpy((void *)(*((void *)v4 + 1) + v320), v135, v134);
          }
        }

        uint64_t v80 = *(void *)v4;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
        v10.i64[0] = 0x8080808080808080LL;
        v10.i64[1] = 0x8080808080808080LL;
        if (!*(void *)v4) {
          goto LABEL_700;
        }
        if (*(_DWORD *)(v80 + 84) != -2) {
          goto LABEL_699;
        }
        uint64_t v334 = *(void *)(v80 + 344);
        if (!v334) {
          goto LABEL_699;
        }
        size_t v335 = *(void *)(v334 + 336);
        if (!v335) {
          goto LABEL_699;
        }
        size_t v336 = *v95;
        if (v335 > v336) {
          goto LABEL_699;
        }
        LODWORD(v23) = 0;
        LODWORD(v90) = 0;
        *(_DWORD *)(v80 + 84) = v336 - v335;
        uint64_t v80 = 0LL;
        goto LABEL_675;
      case 0xCu:
        if ((*((_BYTE *)v4 + 29) & 1) == 0) {
          return;
        }
        va_list v100 = v387;
        v387 += 8;
        uint64_t v101 = *(void *)v100;
        int v23 = *(const char **)(*(void *)v100 + 24LL);
        if (v23) {
          BOOL v102 = v20 == 0;
        }
        else {
          BOOL v102 = 0;
        }
        if (v102) {
          goto LABEL_670;
        }
        if (!*(void *)(v101 + 16))
        {
          if (v23)
          {
LABEL_670:
            int v328 = strlen(v23);
            unsigned int v329 = v328 & 0x3FFFFFFF;
            if ((v328 & 0x3FFFFFFF) != 0)
            {
              uint64_t v330 = *((unsigned int *)v4 + 6);
              if (v330 + v329 >= *((_DWORD *)v4 + 4))
              {
                sub_1812D3A10((uint64_t)v4, v23, v329);
              }

              else
              {
                *((_DWORD *)v4 + 6) = v330 + v329;
                memcpy((void *)(*((void *)v4 + 1) + v330), v23, v328 & 0x3FFFFFFF);
              }
            }
          }

          else
          {
            uint64_t v208 = *(void *)(v101 + 40);
            int v209 = *(_DWORD *)(v208 + 16);
            if ((*(_BYTE *)(v208 + 5) & 8) != 0) {
              sqlite3_str_appendf(v4, "(join-%u)", v209);
            }
            else {
              sqlite3_str_appendf(v4, "(subquery-%u)", v209);
            }
          }

LABEL_674:
          uint64_t v80 = 0LL;
          LODWORD(v23) = 0;
          LODWORD(v90) = 0;
          goto LABEL_675;
        }

        v103 = *(const void **)(v101 + 8);
        if (v103)
        {
          int v104 = strlen(*(const char **)(v101 + 8));
          unsigned int v105 = v104 & 0x3FFFFFFF;
          if ((v104 & 0x3FFFFFFF) != 0)
          {
            uint64_t v106 = *((unsigned int *)v4 + 6);
            if (v106 + v105 >= *((_DWORD *)v4 + 4))
            {
              sub_1812D3A10((uint64_t)v4, v103, v105);
            }

            else
            {
              *((_DWORD *)v4 + 6) = v106 + v105;
              memcpy((void *)(*((void *)v4 + 1) + v106), v103, v104 & 0x3FFFFFFF);
            }
          }

          uint64_t v327 = *((unsigned int *)v4 + 6);
          if ((v327 + 1) >= *((_DWORD *)v4 + 4))
          {
            sub_1812D3A10((uint64_t)v4, ".", 1u);
          }

          else
          {
            *((_DWORD *)v4 + 6) = v327 + 1;
            *(_BYTE *)(*((void *)v4 + 1) + v327) = 46;
          }
        }

        int v23 = *(const char **)(v101 + 16);
        if (v23) {
          goto LABEL_670;
        }
        uint64_t v80 = 0LL;
        LODWORD(v90) = 0;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
        v10.i64[0] = 0x8080808080808080LL;
        v10.i64[1] = 0x8080808080808080LL;
        goto LABEL_702;
      case 0xDu:
        int v27 = 2;
LABEL_190:
        LODWORD(v18) = 0;
        goto LABEL_191;
      case 0x10u:
LABEL_191:
        if (((0x3E0FFAuLL >> v70) & 1) != 0)
        {
          if ((v383 & 2) == 0)
          {
            if (v27)
            {
              int v384 = 0;
              int v109 = v387;
              v387 += 8;
              double v110 = *(double *)v109;
              if (*v109) {
                goto LABEL_310;
              }
            }

            else
            {
              int v384 = 0;
              v190 = v387;
              v387 += 8;
              *(void *)&double v110 = *v190;
              if (*v190) {
                goto LABEL_310;
              }
            }

            goto LABEL_680;
          }

          uint64_t v124 = *(int *)(v5 + 4);
          uint64_t v125 = *(void *)(v5 + 8);
          *(_DWORD *)(v5 + 4) = v124 + 1;
          uint64_t v126 = *(void *)(v125 + 8 * v124);
          if (!v126)
          {
            int v204 = v18;
            int v205 = v19;
            v206 = v4;
            int v207 = v24;
            sub_1812CF36C(89717);
            LODWORD(v24) = v207;
            uint64_t v4 = v206;
            LODWORD(v19) = v205;
            LODWORD(v18) = v204;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            int v384 = 0;
            goto LABEL_680;
          }

          __int16 v127 = *(_WORD *)(v126 + 20);
          if ((v127 & 0x24) != 0)
          {
            int v384 = 0;
            double v110 = *(double *)v126;
            if (*(void *)v126) {
              goto LABEL_310;
            }
            goto LABEL_680;
          }

          if ((v127 & 8) == 0)
          {
            if ((v127 & 0x12) != 0 && *(void *)(v126 + 8))
            {
              int v214 = v18;
              int v215 = v19;
              char v216 = v21;
              uint64_t v21 = (uint64_t)v4;
              int v217 = v24;
              uint64_t v218 = sub_181303DF0(v126);
              LODWORD(v24) = v217;
              uint64_t v4 = (sqlite3_str *)v21;
              LOBYTE(v21) = v216;
              LODWORD(v19) = v215;
              LODWORD(v18) = v214;
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
              double v110 = *(double *)&v218;
              int v384 = 0;
              if (v218) {
                goto LABEL_310;
              }
            }

            else
            {
LABEL_412:
              int v384 = 0;
            }

LABEL_680:
            double v110 = 0.0;
            LOBYTE(v21) = 0;
            if (!(_DWORD)v19) {
              goto LABEL_313;
            }
            goto LABEL_311;
          }

          double v332 = *(double *)v126;
          if (*(double *)v126 >= -9.22337204e18)
          {
            if (v332 <= 9.22337204e18)
            {
              int v384 = 0;
              *(void *)&double v110 = (uint64_t)v332;
              goto LABEL_680;
            }

            int v384 = 0;
            double v110 = NAN;
            if (!(_DWORD)v19) {
              goto LABEL_313;
            }
          }

          else
          {
            int v384 = 0;
            double v110 = -0.0;
            if (!(_DWORD)v19) {
              goto LABEL_313;
            }
          }

LABEL_311:
LABEL_313:
          int v372 = v18;
          char v380 = v21;
          if ((int)v24 >= 332)
          {
            unint64_t v159 = v24 + 10LL;
            if ((_DWORD)v18) {
              v159 += v24 / 3uLL;
            }
            if (*((_BYTE *)v4 + 28)) {
              return;
            }
            if (v159 > *((unsigned int *)v4 + 4))
            {
              unint64_t v151 = *((unsigned int *)v4 + 5);
              if (v159 > v151) {
                goto LABEL_766;
              }
            }

            int v160 = v24;
            if (*(void *)v4) {
              uint64_t v161 = sub_1812F2264(*(void *)v4, v159);
            }
            else {
              uint64_t v161 = sub_18126F0AC(v159);
            }
            LODWORD(v18) = v372;
            if (!v161)
            {
LABEL_760:
              *((_BYTE *)v4 + 28) = 7;
              if (*((_DWORD *)v4 + 5))
              {
                char v351 = *((_BYTE *)v4 + 29);
                if ((v351 & 4) != 0)
                {
                  v352 = (void *)*((void *)v4 + 1);
                  if (v352)
                  {
                    sub_1812F20DC(*(void **)v4, v352);
                    char v351 = *((_BYTE *)v4 + 29);
                  }

                  *((_BYTE *)v4 + 29) = v351 & 0xFB;
                }

                *((_DWORD *)v4 + 4) = 0;
                *((_DWORD *)v4 + 6) = 0;
                *((void *)v4 + 1) = 0LL;
              }

              return;
            }

            LODWORD(v24) = v160;
            uint64_t v80 = v161;
            v158 = (_DWORD *)v161;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
          }

          else
          {
            uint64_t v80 = 0LL;
            v158 = __src;
            LODWORD(v159) = 512;
          }

          v162 = (char *)v158 + (int)v159 - 1;
          v163 = v162;
          if (v70 == 22)
          {
            BOOL v164 = __ROR8__(0xCCCCCCCCCCCCCCCDLL * (*(void *)&v110 / 0xAuLL) + 0x3333333333333333LL, 1) < 0x199999999999999AuLL
                || (*(void *)&v110 % 0xAuLL) > 3;
            if (v164) {
              unsigned int v165 = 0;
            }
            else {
              unsigned int v165 = *(void *)&v110 % 0xAuLL;
            }
            uint64_t v166 = 2LL * v165;
            char v167 = aThstndrd[(v166 & 0xFFFFFFFE) + 1];
            *(v162 - 2) = aThstndrd[v166];
            v163 = v162 - 2;
            *(v162 - 1) = v167;
          }

          uint64_t v168 = 0LL;
          v169 = (char *)&byte_1813C62B2[6 * v70];
          v170 = &a0123456789abcd_0[v169[4]];
          unint64_t v171 = v169[1];
          int v172 = v159 + (_DWORD)v158;
          unsigned int v173 = v24 + (_DWORD)v163 - (v159 + (_DWORD)v158);
          do
          {
            v163[--v168] = v170[*(void *)&v110 % v171];
            --v173;
            BOOL v301 = *(void *)&v110 >= v171;
            *(void *)&v110 /= v171;
          }

          while (v301);
          int v174 = ~(_DWORD)v163 + v159 + (_DWORD)v158 - v168;
          if ((int)v24 <= v174)
          {
            int v6 = &v163[v168];
            int v180 = v174;
          }

          else
          {
            int v6 = &v163[v168 - v173 - 1];
            int v175 = (int)v162;
            unsigned int v176 = v70;
            uint64_t v177 = v80;
            v178 = v4;
            int v179 = v24;
            memset(v6, 48, (v24 + (_DWORD)v163 - v172 + v168) + 1LL);
            LODWORD(v162) = v175;
            int v180 = v179;
            uint64_t v4 = v178;
            uint64_t v80 = v177;
            unsigned int v70 = v176;
            LODWORD(v18) = v372;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          }

          if ((_DWORD)v18)
          {
            int v181 = (v180 - 1) / 3;
            v6 += (v180 - 1) / -3;
            if (v180 >= 4)
            {
              int v182 = 0;
              unsigned int v183 = (v180 - 1) % 3u + 1;
              do
              {
                uint64_t v184 = v182;
                v6[v182] = v6[v182 + (uint64_t)v181];
                if (!--v183)
                {
                  ++v182;
                  v6[v184 + 1] = v18;
                  --v181;
                  unsigned int v183 = 3;
                }

                ++v182;
              }

              while (v181 > 0);
            }
          }

          if (v384) {
            *--int v6 = v384;
          }
          if (v380 && ((0x77F2FFuLL >> v70) & 1) == 0)
          {
            v185 = (char *)&unk_1813C633C + byte_1813C62B2[6 * v70 + 5];
            char v188 = *v185;
            v186 = v185 + 1;
            char v187 = v188;
            do
            {
              *--int v6 = v187;
              int v189 = *v186++;
              char v187 = v189;
            }

            while (v189);
          }

          LODWORD(v90) = (_DWORD)v162 - (_DWORD)v6;
          goto LABEL_702;
        }

        if ((v383 & 2) != 0)
        {
          uint64_t v120 = *(int *)(v5 + 4);
          uint64_t v121 = *(void *)(v5 + 8);
          *(_DWORD *)(v5 + 4) = v120 + 1;
          uint64_t v122 = *(void *)(v121 + 8 * v120);
          if (!v122)
          {
            int v200 = v18;
            int v201 = v19;
            v202 = v4;
            int v203 = v24;
            sub_1812CF36C(89717);
            LODWORD(v24) = v203;
            uint64_t v4 = v202;
            LODWORD(v19) = v201;
            LODWORD(v18) = v200;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            goto LABEL_680;
          }

          __int16 v123 = *(_WORD *)(v122 + 20);
          if ((v123 & 0x24) != 0)
          {
            uint64_t v108 = *(void *)v122;
          }

          else if ((v123 & 8) != 0)
          {
            double v331 = *(double *)v122;
            if (*(double *)v122 < -9.22337204e18)
            {
              double v110 = -0.0;
              goto LABEL_679;
            }

            if (v331 > 9.22337204e18)
            {
              double v110 = NAN;
LABEL_310:
              if (!(_DWORD)v19) {
                goto LABEL_313;
              }
              goto LABEL_311;
            }

            uint64_t v108 = (uint64_t)v331;
          }

          else
          {
            if ((v123 & 0x12) == 0 || !*(void *)(v122 + 8)) {
              goto LABEL_680;
            }
            int v210 = v18;
            int v211 = v19;
            char v212 = v21;
            uint64_t v21 = (uint64_t)v4;
            int v213 = v24;
            uint64_t v108 = sub_181303DF0(v122);
            LODWORD(v24) = v213;
            uint64_t v4 = (sqlite3_str *)v21;
            LOBYTE(v21) = v212;
            LODWORD(v19) = v211;
            LODWORD(v18) = v210;
            v10.i64[0] = 0x8080808080808080LL;
            v10.i64[1] = 0x8080808080808080LL;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          }
        }

        else if (v27)
        {
          uint64_t v107 = (uint64_t *)v387;
          v387 += 8;
          uint64_t v108 = *v107;
        }

        else
        {
          v157 = (int *)v387;
          v387 += 8;
          uint64_t v108 = *v157;
        }

        if (v108 >= 0) {
          double v110 = *(double *)&v108;
        }
        else {
          *(void *)&double v110 = -v108;
        }
        if ((v108 & 0x8000000000000000LL) == 0)
        {
          if (v110 != 0.0) {
            goto LABEL_310;
          }
          goto LABEL_680;
        }

LABEL_679:
        int v384 = 45;
        if (v110 != 0.0) {
          goto LABEL_310;
        }
        goto LABEL_680;
      default:
        return;
    }
  }

void sqlite3_str_append(sqlite3_str *a1, const char *zIn, int N)
{
  if (a1)
  {
    if (zIn && N > 0)
    {
      uint64_t v3 = *((unsigned int *)a1 + 6);
      if ((v3 + N) >= *((_DWORD *)a1 + 4))
      {
        sub_1812D3A10((uint64_t)a1, zIn, N);
      }

      else
      {
        *((_DWORD *)a1 + 6) = v3 + N;
        memcpy((void *)(*((void *)a1 + 1) + v3), zIn, N);
      }
    }

    else if (N)
    {
      sub_1812CF36C(32737);
    }
  }

  else
  {
    sub_1812CF36C(32733);
  }

void sqlite3_str_appendchar(sqlite3_str *a1, int N, char C)
{
  if (!a1 || N < 0)
  {
    sub_1812CF36C(32699);
    return;
  }

  if (*((unsigned int *)a1 + 6) + (unint64_t)N >= *((unsigned int *)a1 + 4))
  {
    N = sub_1812D3698((void **)a1, N);
    if (N < 1) {
      return;
    }
  }

  else if (!N)
  {
    return;
  }

  unsigned int v5 = N + 1;
  do
  {
    uint64_t v6 = *((void *)a1 + 1);
    uint64_t v7 = *((unsigned int *)a1 + 6);
    *((_DWORD *)a1 + 6) = v7 + 1;
    *(_BYTE *)(v6 + v7) = C;
    --v5;
  }

  while (v5 > 1);
}

uint64_t sub_1812D3698(void **a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 28)) {
    return 0LL;
  }
  uint64_t v5 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v5)
  {
    uint64_t v2 = a2;
    char v6 = *((_BYTE *)a1 + 29);
    if ((v6 & 4) != 0) {
      uint64_t v7 = a1[1];
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v9 = *((unsigned int *)a1 + 6);
    uint64_t v10 = a2 + v9;
    uint64_t v11 = a2 + v9 + 1 + v9;
    if (v11 > v5) {
      uint64_t v11 = v10 + 1;
    }
    if (v11 > v5)
    {
      if ((*((_BYTE *)a1 + 29) & 4) != 0)
      {
        int v13 = a1[1];
        if (v13)
        {
          sub_1812F20DC(*a1, v13);
          char v6 = *((_BYTE *)a1 + 29);
          BOOL v14 = *((_DWORD *)a1 + 5) == 0;
        }

        else
        {
          BOOL v14 = 0;
        }

        v6 &= ~4u;
        *((_BYTE *)a1 + 29) = v6;
        *((_DWORD *)a1 + 4) = 0;
        *((_DWORD *)a1 + 6) = 0;
        a1[1] = 0LL;
        *((_BYTE *)a1 + 28) = 18;
        if (v14) {
          goto LABEL_33;
        }
      }

      else
      {
        *((_BYTE *)a1 + 28) = 18;
      }

      if ((v6 & 4) != 0) {
        *((_BYTE *)a1 + 29) = v6 & 0xFB;
      }
      *((_DWORD *)a1 + 4) = 0;
      *((_DWORD *)a1 + 6) = 0;
      a1[1] = 0LL;
LABEL_33:
      if (*a1)
      {
        uint64_t v16 = (*a1)[43];
        if (v16)
        {
          uint64_t v2 = 0LL;
          *(_DWORD *)(v16 + 24) = 18;
          ++*(_DWORD *)(v16 + 48);
          return v2;
        }
      }

      return 0LL;
    }

    *((_DWORD *)a1 + 4) = v11;
    uint64_t v12 = (uint64_t)*a1;
    if (*a1)
    {
      if (v7)
      {
        if (*(void *)(v12 + 512) > (unint64_t)v7)
        {
          if (*(void *)(v12 + 496) <= (unint64_t)v7)
          {
          }

          else if (*(void *)(v12 + 504) <= (unint64_t)v7 {
                 && v11 <= (unint64_t)*(unsigned __int16 *)(v12 + 438))
          }
          {
LABEL_39:
            if ((v6 & 4) == 0)
            {
              size_t v17 = *((unsigned int *)a1 + 6);
              if ((_DWORD)v17) {
                memcpy(v7, a1[1], v17);
              }
            }

            a1[1] = v7;
            uint64_t v18 = (uint64_t)*a1;
            if (*a1 && *(void *)(v18 + 520) > (unint64_t)v7)
            {
              if (*(void *)(v18 + 496) <= (unint64_t)v7)
              {
                int v19 = 128;
                goto LABEL_47;
              }

              if (*(void *)(v18 + 504) <= (unint64_t)v7)
              {
                int v19 = *(unsigned __int16 *)(v18 + 438);
                goto LABEL_47;
              }
            }

            int v19 = off_18C4653B8(v7);
LABEL_47:
            *((_DWORD *)a1 + 4) = v19;
            *((_BYTE *)a1 + 29) |= 4u;
            return v2;
          }
        }

        uint64_t v15 = sub_1812F2310(v12, v7, v11);
      }

      else
      {
        uint64_t v15 = sub_1812F2264(v12, v11);
      }
    }

    else
    {
      uint64_t v15 = sub_18127D33C((uint64_t)v7, v11);
    }

    uint64_t v7 = (void *)v15;
    char v6 = *((_BYTE *)a1 + 29);
    if (v15) {
      goto LABEL_39;
    }
    if ((*((_BYTE *)a1 + 29) & 4) != 0)
    {
      uint64_t v20 = a1[1];
      if (v20)
      {
        sub_1812F20DC(*a1, v20);
        char v6 = *((_BYTE *)a1 + 29);
      }

      v6 &= ~4u;
      *((_BYTE *)a1 + 29) = v6;
    }

    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0LL;
    *((_BYTE *)a1 + 28) = 7;
    if (!*((_DWORD *)a1 + 5)) {
      return 0LL;
    }
    if ((v6 & 4) != 0) {
      *((_BYTE *)a1 + 29) = v6 & 0xFB;
    }
    uint64_t v2 = 0LL;
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0LL;
  }

  else
  {
    *((_BYTE *)a1 + 28) = 18;
    if (*a1)
    {
      uint64_t v8 = (*a1)[43];
      if (v8)
      {
        *(_DWORD *)(v8 + 24) = 18;
        ++*(_DWORD *)(v8 + 48);
      }
    }

    return (*((_DWORD *)a1 + 4) + ~*((_DWORD *)a1 + 6));
  }

  return v2;
}

void sqlite3_str_appendall(sqlite3_str *a1, const char *zIn)
{
  if (!zIn)
  {
    unsigned int v4 = 0;
    if (a1) {
      goto LABEL_3;
    }
LABEL_8:
    int v6 = 32733;
LABEL_11:
    sub_1812CF36C(v6);
    return;
  }

  unsigned int v4 = strlen(zIn) & 0x3FFFFFFF;
  if (!a1) {
    goto LABEL_8;
  }
LABEL_3:
  if (!zIn || !v4)
  {
    if (!v4) {
      return;
    }
    int v6 = 32737;
    goto LABEL_11;
  }

  uint64_t v5 = *((unsigned int *)a1 + 6);
  if (v5 + v4 >= *((_DWORD *)a1 + 4))
  {
    sub_1812D3A10((uint64_t)a1, zIn, v4);
  }

  else
  {
    *((_DWORD *)a1 + 6) = v5 + v4;
    memcpy((void *)(*((void *)a1 + 1) + v5), zIn, v4);
  }

void sqlite3_str_appendf(sqlite3_str *a1, const char *zFormat, ...)
{
}

uint64_t sub_1812D3A10(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result = sub_1812D3698((void **)a1, a3);
  if ((int)result >= 1)
  {
    int v6 = result;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24)), a2, result);
    *(_DWORD *)(a1 + 24) += v6;
  }

  return result;
}

char *__cdecl sqlite3_str_finish(sqlite3_str *a1)
{
  sqlite3_int64 v1 = 0LL;
  if (a1)
  {
    uint64_t v2 = a1;
    if (a1 != (sqlite3_str *)&unk_18C54FA08)
    {
      uint64_t v3 = *((void *)a1 + 1);
      else {
        sqlite3_int64 v1 = (char *)*((void *)a1 + 1);
      }
      unsigned int v4 = (void (**)(sqlite3_str *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_13;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      off_18C4653A8(v2);
      uint64_t v2 = (sqlite3_str *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        unsigned int v4 = (void (**)(sqlite3_str *))&xmmword_18C465410;
LABEL_13:
        (*v4)(v2);
      }
    }
  }

  return v1;
}

int sqlite3_str_errcode(sqlite3_str *a1)
{
  if (a1) {
    return *((unsigned __int8 *)a1 + 28);
  }
  else {
    return 7;
  }
}

int sqlite3_str_length(sqlite3_str *a1)
{
  if (a1) {
    LODWORD(a1) = *((_DWORD *)a1 + 6);
  }
  return (int)a1;
}

char *__cdecl sqlite3_str_value(char *result)
{
  if (result)
  {
    uint64_t v1 = *((unsigned int *)result + 6);
    if ((_DWORD)v1)
    {
      *(_BYTE *)(*((void *)result + 1) + v1) = 0;
      return (char *)*((void *)result + 1);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sqlite3_str_reset(sqlite3_str *a1)
{
  if (a1)
  {
    char v2 = *((_BYTE *)a1 + 29);
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = (void *)*((void *)a1 + 1);
      if (v3)
      {
        sub_1812F20DC(*(void **)a1, v3);
        char v2 = *((_BYTE *)a1 + 29);
      }

      *((_BYTE *)a1 + 29) = v2 & 0xFB;
    }

    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    *((void *)a1 + 1) = 0LL;
  }

  else
  {
    sub_1812CF36C(32852);
  }

sqlite3_str *__cdecl sqlite3_str_new(sqlite3 *a1)
{
  if (sqlite3_initialize()) {
    return (sqlite3_str *)&unk_18C54FA08;
  }
  uint64_t result = (sqlite3_str *)sub_18126F0AC(32LL);
  if (!result) {
    return (sqlite3_str *)&unk_18C54FA08;
  }
  if (a1) {
    int v3 = *((_DWORD *)a1 + 34);
  }
  else {
    int v3 = 2147483645;
  }
  *(void *)uint64_t result = 0LL;
  *((void *)result + 1) = 0LL;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 5) = v3;
  *((_DWORD *)result + 6) = 0;
  *((_WORD *)result + 14) = 0;
  return result;
}

char *__cdecl sqlite3_vsnprintf(int a1, char *a2, const char *a3, va_list a4)
{
  if (a1 >= 1)
  {
    if (a2 && a3)
    {
      v7[0] = 0LL;
      v7[1] = a2;
      int v8 = a1;
      uint64_t v9 = 0LL;
      __int16 v10 = 0;
      sqlite3_str_vappendf((sqlite3_str *)v7, a3, a4);
      uint64_t v5 = &a2[HIDWORD(v9)];
LABEL_6:
      *uint64_t v5 = 0;
      return a2;
    }

    sub_1812CF36C(32992);
    uint64_t v5 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  return a2;
}

int sqlite3_stricmp(const char *a1, const char *a2)
{
  if (a1)
  {
    if (a2)
    {
      while (1)
      {
        uint64_t v2 = *(unsigned __int8 *)a1;
        uint64_t v3 = *(unsigned __int8 *)a2;
        if ((_DWORD)v2 == (_DWORD)v3)
        {
          if (!*a1) {
            return v2;
          }
        }

        else
        {
          LODWORD(v2) = byte_1813C6343[v2] - byte_1813C6343[v3];
          if ((_DWORD)v2) {
            return v2;
          }
        }

        ++a1;
        ++a2;
      }
    }

    return 1;
  }

  else if (a2)
  {
    return -1;
  }

  else
  {
    return 0;
  }

int sqlite3_strnicmp(const char *a1, const char *a2, int a3)
{
  if (a3 < 0)
  {
    sub_1812CF36C(35844);
    return 0;
  }

  if (!a1)
  {
    if (a2) {
      return -1;
    }
    else {
      return 0;
    }
  }

  if (!a2) {
    return 1;
  }
  if (!a3) {
    return 0;
  }
  int v3 = a3 + 1;
  while (1)
  {
    uint64_t v4 = *(unsigned __int8 *)a1;
    if (!*a1) {
      break;
    }
    LODWORD(v4) = byte_1813C6343[v4];
    ++a1;
    ++a2;
  }

  return v4 - byte_1813C6343[*(unsigned __int8 *)a2];
}

int sqlite3_os_init(void)
{
  for (uint64_t i = 0LL; i != 9; ++i)
  {
    if (sqlite3_initialize()) {
      continue;
    }
    if ((_BYTE)word_18C465384)
    {
      uint64_t v1 = qword_18C4653F0(2LL);
      uint64_t v2 = v1;
      if (v1)
      {
        xmmword_18C465400(v1);
        char v3 = 0;
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v2 = 0LL;
    }

    char v3 = 1;
LABEL_9:
    uint64_t v4 = (char *)&qword_18C465568[21 * i];
    uint64_t v5 = qword_18C468B68;
    if ((char *)qword_18C468B68 == v4)
    {
      uint64_t v9 = &qword_18C468B68;
      goto LABEL_20;
    }

    if (!qword_18C468B68) {
      goto LABEL_24;
    }
    uint64_t v6 = qword_18C468B68;
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      if (v6) {
        BOOL v8 = v6 == (void)v4;
      }
      else {
        BOOL v8 = 1;
      }
    }

    while (!v8);
    if ((char *)v6 == v4)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16);
LABEL_20:
      *uint64_t v9 = qword_18C465568[21 * i + 2];
      uint64_t v5 = qword_18C468B68;
    }

    if (i && v5)
    {
      __int16 v10 = (uint64_t *)(v5 + 16);
      uint64_t v5 = *(void *)(v5 + 16);
      goto LABEL_25;
    }

uint64_t sub_1812D41B8(uint64_t a1, uint64_t a2)
{
  v4.tv_sec = (int)a2 / 1000000;
  v4.tv_nsec = 1000 * ((int)a2 % 1000000);
  nanosleep(&v4, 0LL);
  return a2;
}

uint64_t sub_1812D4224(uint64_t a1, double *a2)
{
  *a2 = (double)(1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000LL) / 86400000.0;
  return 0LL;
}

uint64_t sub_1812D42AC()
{
  return *__error();
}

uint64_t sub_1812D42C4(int a1, char *__s1, char *a3)
{
  if (__s1)
  {
    uint64_t v5 = 0LL;
    while (strcmp(__s1, (&off_18C54FCC0)[v5]))
    {
      v5 += 3LL;
      if (v5 == 87) {
        return 12LL;
      }
    }

    uint64_t v9 = &(&off_18C54FCC0)[v5];
    __int16 v10 = (&off_18C54FCC0)[v5 + 2];
    if (!v10)
    {
      __int16 v10 = v9[1];
      v9[2] = v10;
    }

    uint64_t result = 0LL;
    if (a3) {
      __int16 v10 = a3;
    }
    v9[1] = v10;
  }

  else
  {
    for (uint64_t i = 0LL; i != 87; i += 3LL)
    {
      BOOL v8 = (&off_18C54FCC0)[i + 2];
      if (v8) {
        (&off_18C54FCC0)[i + 1] = v8;
      }
    }

    return 0LL;
  }

  return result;
}

char *sub_1812D437C(int a1, char *__s1)
{
  uint64_t v3 = 0LL;
  while (strcmp(__s1, (&off_18C54FCC0)[v3]))
  {
    v3 += 3LL;
    if (v3 == 87) {
      return 0LL;
    }
  }

  return (&off_18C54FCC0)[v3 + 1];
}

uint64_t sub_1812D43D8(int a1, char *__s1)
{
  if (__s1)
  {
    uint64_t v3 = 0LL;
    timeval v4 = (const char **)&off_18C54FCC0;
    do
    {
      if (!strcmp(__s1, *v4)) {
        break;
      }
      ++v3;
      v4 += 3;
    }

    while (v3 != 28);
  }

  else
  {
    uint64_t v3 = -1LL;
  }

  uint64_t v5 = v3 - 29;
  uint64_t v6 = &(&off_18C54FCC0)[3 * v3 + 4];
  while (!__CFADD__(v5++, 1LL))
  {
    BOOL v8 = v6 + 3;
    uint64_t v9 = *v6;
    v6 += 3;
    if (v9) {
      return (uint64_t)*(v8 - 4);
    }
  }

  return 0LL;
}

char *sub_1812D4470()
{
  xmmword_18C468BA0 = *(_OWORD *)&MEMORY[0x1895FB738];
  qword_18C468BB0 = (uint64_t)MEMORY[0x1895FB730];
  qword_18C468BB8 = (uint64_t)MEMORY[0x1895FB748];
  qword_18C468BC0 = (uint64_t)MEMORY[0x1895FB750];
  uint64_t result = getenv("RC_XBS");
  if (result)
  {
    if (*result)
    {
      qword_18C468BB8 = 0LL;
      qword_18C468BC0 = 0LL;
    }
  }

  return result;
}

int sqlite3_os_end(void)
{
  qword_18C468B90 = 0LL;
  return 0;
}

unsigned __int8 *__cdecl sqlite3_serialize( sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
{
  pStmt = 0LL;
  if (!db)
  {
    uint64_t v6 = "NULL";
    goto LABEL_32;
  }

  int v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_32:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1812CF36C(58675);
    return 0LL;
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_32;
    }

    goto LABEL_5;
  }

  char v7 = mFlags;
  uint64_t v9 = zSchema;
  if (!zSchema) {
    uint64_t v9 = (const char *)**((void **)db + 4);
  }
  uint64_t v50 = 0LL;
  int v10 = sqlite3_file_control(db, v9, 7, &v50);
  uint64_t v11 = 0LL;
  if (!v10)
  {
    if (*(_UNKNOWN **)v50 == &unk_189B6D390)
    {
      uint64_t v39 = *(void *)(v50 + 8);
      uint64_t v40 = *(void *)(v39 + 32);
      if (v40) {
        xmmword_18C465400(v40);
      }
      if (*(void *)(v39 + 64)) {
        uint64_t v50 = 0LL;
      }
      uint64_t v41 = *(void *)(v39 + 32);
      if (v41) {
        xmmword_18C465410(v41);
      }
      uint64_t v11 = v50;
      if (!v9) {
        goto LABEL_48;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if (!v9) {
        goto LABEL_48;
      }
    }

int sqlite3_deserialize( sqlite3 *db, const char *zSchema, unsigned __int8 *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
{
  pStmt = 0LL;
  if (!db)
  {
    BOOL v8 = "NULL";
    goto LABEL_33;
  }

  int v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    BOOL v8 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    return sub_1812CF36C(58754);
  }

  if (v7 != 118)
  {
    if (v7 != 109)
    {
      BOOL v8 = "invalid";
      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (szDb < 0) {
    return sub_1812CF36C(58756);
  }
  if (szBuf < 0) {
    return sub_1812CF36C(58757);
  }
  uint64_t v14 = *((void *)db + 3);
  if (v14) {
    xmmword_18C465400(v14);
  }
  if (!zSchema)
  {
    zSchema = (const char *)**((void **)db + 4);
    if (!zSchema) {
      goto LABEL_36;
    }
  }

  int v15 = *((_DWORD *)db + 10);
  uint64_t v16 = (v15 - 1);
  if (v15 >= 1)
  {
    size_t v17 = (void *)(*((void *)db + 4) + 32 * v16);
    do
    {
      if (*v17)
      {
        for (uint64_t i = 0LL; ; ++i)
        {
          uint64_t v19 = *(unsigned __int8 *)(*v17 + i);
          uint64_t v20 = zSchema[i];
          if ((_DWORD)v19 == (_DWORD)v20)
          {
            if (!*(_BYTE *)(*v17 + i)) {
              goto LABEL_37;
            }
          }

          else if (byte_1813C6343[v19] != byte_1813C6343[v20])
          {
            break;
          }
        }
      }

      if (!(_DWORD)v16)
      {
        for (uint64_t j = 0LL; ; ++j)
        {
          uint64_t v23 = aMain[j];
          uint64_t v24 = zSchema[j];
          if ((_DWORD)v23 == (_DWORD)v24)
          {
            if (!aMain[j])
            {
              LOBYTE(v16) = 0;
              goto LABEL_40;
            }
          }

          else if (byte_1813C6343[v23] != byte_1813C6343[v24])
          {
            break;
          }
        }
      }

      v17 -= 4;
      BOOL v21 = (int)v16 <= 0;
      LODWORD(v16) = v16 - 1;
    }

    while (!v21);
LABEL_36:
    LODWORD(v16) = -1;
  }

LABEL_70:
  uint64_t v38 = *((void *)db + 3);
  if (v38) {
    xmmword_18C465410(v38);
  }
  return v26;
}

          uint64_t result = sub_181289D04(v4, v46, v16, v17, v18, v19, v20, v21);
          if (result) {
            uint64_t result = sub_181322E40((uint64_t)v45, v9, *(const char **)result);
          }
          ++v8;
          v9 += 16LL;
        }

        while (v8 < *(__int16 *)(v5 + 54));
      }

      *(_WORD *)(v5 + 60) = 1;
    }
  }

  return result;
}

        double v74 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v74)
        {
          sub_18131044C(v20, 138LL, v53, v38, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v74 + 1;
          int v75 = *(void *)(v20 + 136) + 40LL * v74;
          *(_DWORD *)int v75 = 138;
          *(_DWORD *)(v75 + 4) = v53;
          *(_DWORD *)(v75 + 8) = v38;
          *(void *)(v75 + 12) = 0LL;
          *(void *)(v75 + 28) = 0LL;
          *(void *)(v75 + 20) = 0LL;
          *(_DWORD *)(v75 + 36) = 0;
        }

        ssize_t v76 = *(_DWORD *)(v20 + 144);
        if (v76 >= 1) {
          *(_WORD *)(*(void *)(v20 + 136) + 40LL * (v76 - 1) + 2) = 16;
        }
        if ((_DWORD)v38)
        {
          uint64_t v77 = *(unsigned __int8 *)(a1 + 31);
          if (v77 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v77 + 1;
            *(_DWORD *)(a1 + 4 * v77 + 224) = v38;
            ssize_t v76 = *(_DWORD *)(v20 + 144);
          }
        }

        if (*(_DWORD *)(v20 + 148) <= v76)
        {
          sub_18131044C(v20, 37LL, v25, v67, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v76 + 1;
          double v78 = *(void *)(v20 + 136) + 40LL * v76;
          *(_DWORD *)double v78 = 37;
          *(_DWORD *)(v78 + 4) = v25;
          *(_DWORD *)(v78 + 8) = v67;
          *(void *)(v78 + 12) = 0LL;
          *(void *)(v78 + 28) = 0LL;
          *(void *)(v78 + 20) = 0LL;
          *(_DWORD *)(v78 + 36) = 0;
        }

        int8x16_t v79 = *(_DWORD *)(v20 + 144);
        if (*(_BYTE *)(*(void *)v20 + 103LL)) {
          uint64_t v80 = &byte_18C550680;
        }
        else {
          uint64_t v80 = (char *)(*(void *)(v20 + 136) + 40LL * v61);
        }
        *((_DWORD *)v80 + 2) = v79;
        if (*(_DWORD *)(v20 + 148) <= v79)
        {
          sub_18131044C(v20, 122LL, v90, 0LL, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v79 + 1;
          uint64_t v81 = *(void *)(v20 + 136) + 40LL * v79;
          *(_DWORD *)uint64_t v81 = 122;
          *(_DWORD *)(v81 + 4) = v90;
          *(_OWORD *)(v81 + 8) = 0u;
          *(_OWORD *)(v81 + 24) = 0u;
        }

        uint64_t v82 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v82)
        {
          sub_18131044C(v20, 122LL, v53, 0LL, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v82 + 1;
          uint64_t v83 = *(void *)(v20 + 136) + 40LL * v82;
          *(_DWORD *)uint64_t v83 = 122;
          *(_DWORD *)(v83 + 4) = v53;
          *(_OWORD *)(v83 + 8) = 0u;
          *(_OWORD *)(v83 + 24) = 0u;
        }

        __int16 v84 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v84)
        {
          sub_18131044C(v20, 122LL, v25, 0LL, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v84 + 1;
          int v85 = *(void *)(v20 + 136) + 40LL * v84;
          *(_DWORD *)int v85 = 122;
          *(_DWORD *)(v85 + 4) = v25;
          *(_OWORD *)(v85 + 8) = 0u;
          *(_OWORD *)(v85 + 24) = 0u;
        }

        return;
      }
    }

    __int16 v46 = *(void *)(a1 + 16);
    uint64_t v47 = *(void *)(v46 + 24);
    uint64_t v48 = ~v45;
    if (*(_DWORD *)(v47 + 68) + *(_DWORD *)(v47 + 72) < 0) {
      sub_18131E420(v47, v46, v48);
    }
    else {
      *(_DWORD *)(*(void *)(v47 + 80) + 4LL * v48) = *(_DWORD *)(v46 + 144);
    }
    goto LABEL_35;
  }

          if ((v9 & 0x40) == 0 || (v32 & 0x40) != 0)
          {
            if (v44 <= v43) {
              uint64_t v47 = *(_WORD *)(a2 + 20);
            }
            else {
              uint64_t v47 = *((_WORD *)v7 + 10);
            }
            *(_WORD *)(a2 + 20) = v47;
            uint64_t v48 = *((__int16 *)v7 + 11);
            else {
              int v31 = *(_WORD *)(a2 + 22);
            }
LABEL_36:
            *(_WORD *)(a2 + 22) = v31;
          }
        }

          int v10 = 0LL;
          goto LABEL_71;
        }

  BOOL v21 = sub_1813531B0((uint64_t)a1, (uint64_t *)v43, (uint64_t)v16, 0LL, 0LL, v18, v19, v20);
LABEL_71:
  uint64_t v39 = *(void **)&v43[0];
  if (*(void *)&v43[0])
  {
    do
    {
      uint64_t v40 = (void *)v39[3];
      sub_1812F20DC((void *)v10, v39);
      uint64_t v39 = v40;
    }

    while (v40);
  }

  if (v21)
  {
LABEL_74:
    if (v21 == 1 && (*(void *)(v10 + 48) & 0x10000001LL) == 1)
    {
      sqlite3_result_value(a1, (sqlite3_value *)a3[1]);
    }

    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v21;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
      {
        switch(v21)
        {
          case 516:
            uint64_t v41 = "abort due to ROLLBACK";
            break;
          case 101:
            uint64_t v41 = "no more rows available";
            break;
          case 100:
            uint64_t v41 = "another row available";
            break;
          default:
            else {
              uint64_t v41 = off_189B6EC30[v21];
            }
            break;
        }

        sub_1812D7A8C((uint64_t)a1, v41, -1, 1u, 0LL);
      }
    }

    else
    {
      sub_1812CF36C(97620);
    }
  }

  uint64_t result = (uint64_t)sub_18135379C(v44);
LABEL_92:
  *(void *)(v10 + 528) = v17;
  if (!*(_BYTE *)(v10 + 111)) {
    return sub_1812FA0B4(v10);
  }
  return result;
}

  sub_181371114(a1, *(void *)(a1 + 24), (_DWORD *)&v72 + 1);
  uint64_t v6 = HIDWORD(v72);
  uint64_t v39 = *(void **)(v5 + 480);
  if (v39)
  {
    uint64_t v40 = (sqlite3_stmt *)v39[3];
    uint64_t v41 = (void *)v39[4];
    int v42 = v41[3];
    if (v42) {
      xmmword_18C465400(v42);
    }
    sub_1812F20DC(v41, v39);
    uint64_t v43 = v41[3];
    if (v43) {
      xmmword_18C465410(v43);
    }
    sqlite3_finalize(v40);
  }

  *(void *)(v5 + 480) = 0LL;
  if (!(_DWORD)v6)
  {
    uint64_t v44 = *(void *)(a1 + 64);
    *(void *)(a1 + 48) = 0LL;
    *(void *)(a1 + 56) = v44;
    goto LABEL_78;
  }

  return v6;
}

  if ((_DWORD)v6)
  {
LABEL_71:
    sub_18136EEAC(v3);
    uint64_t v3 = 0LL;
  }

                if (v49 >= 3)
                {
                  ssize_t v76 = v43 + 1;
                  v33[v43] = 34;
                  if (v42 <= v41)
                  {
                    LODWORD(v79) = v43 + 1;
                  }

                  else
                  {
                    uint64_t v77 = v42 - (uint64_t)v41;
                    double v78 = (unsigned __int8 *)&v23[v41];
                    do
                    {
                      int8x16_t v79 = v76 + 1LL;
                      v33[v76] = *v78;
                      uint64_t v80 = *v78++;
                      if (v80 == 34)
                      {
                        v33[v79] = 34;
                        LODWORD(v79) = v76 + 2;
                      }

                      ssize_t v76 = v79;
                      --v77;
                    }

                    while (v77);
                  }

                  *(_WORD *)&v33[(int)v79] = 8226;
                  uint64_t v43 = v79 + 2;
                }
              }

              if (v34 == v23[v40])
              {
                uint64_t v81 = v23[v42 + 1] == 94 ? 3 : 2;
                v42 += v81;
                uint64_t v82 = v42;
                if (v31 > v42)
                {
                  while (v23[v82] != 93)
                  {
                    if (v31 <= ++v82)
                    {
                      LODWORD(v82) = v31;
                      break;
                    }
                  }

                  int v42 = v82;
                }
              }

              uint64_t v41 = ++v42;
LABEL_44:
              uint64_t v40 = v42;
            }

            while (v31 >= v42);
            if (v43 < 1)
            {
LABEL_90:
              BOOL v8 = 0LL;
              uint64_t v144 = 0LL;
              goto LABEL_104;
            }

            uint64_t v83 = *(_DWORD *)(v141 + 92);
            if (v83)
            {
              if (v83 == 1) {
                int v26 = *(unsigned int *)(v141 + 24);
              }
              else {
                uint64_t v83 = 1;
              }
            }

            v33[v43] = 0;
            BOOL v8 = sub_18138DBF0(v141, v83, v26, v33, &v144, *(void **)(v141 + 184));
LABEL_104:
            uint64_t v90 = (void (**)(unsigned __int8 *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
              --qword_18C468B10;
              off_18C4653A8(v33);
              uint64_t v33 = (unsigned __int8 *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v90 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
                goto LABEL_109;
              }
            }

            else
            {
LABEL_109:
              (*v90)(v33);
            }

            uint64_t v18 = v144;
            uint64_t v6 = v141;
            if ((_DWORD)v8)
            {
LABEL_192:
              sub_18138CE6C(v18);
              *(void *)(v6 + 184) = v134;
              return v8;
            }

  BOOL v21 = *(void *)(v1 + 96);
  if (v21)
  {
    uint64_t v22 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v21);
      --qword_18C468B10;
      off_18C4653A8(v21);
      BOOL v21 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_77;
      }
      uint64_t v22 = &xmmword_18C465410;
    }

    (*v22)(v21);
  }

    uint64_t v16 = 8;
    goto LABEL_71;
  }

    sqlite3_int64 v36 = *(int *)(a1 + 16);
    if ((int)v36 < *(_DWORD *)(a1 + 20) - 1)
    {
      uint64_t v24 = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(v24 + v36) = v21;
    }

    else if (sub_1813C17FC(a1, v21))
    {
      return 0LL;
    }
  }

  LOBYTE(v27) = -1;
LABEL_94:
  uint64_t v45 = *(int *)(a1 + 16);
  __int16 v46 = (unsigned __int8 *)(v45 + *(void *)(a1 + 8) - 1);
  uint64_t v47 = v45 - 1;
  do
  {
    *(_DWORD *)(a1 + 16) = v47;
    uint64_t v48 = *v46--;
    --v47;
  }

  while (v48 != 34);
  *(_DWORD *)(a1 + 32) = (char)v27;
LABEL_89:
  uint64_t v44 = *(void *)(a1 + 8);
  if (v44)
  {
    *(_BYTE *)(v44 + *(int *)(a1 + 16)) = 0;
    uint64_t result = *(void *)(a1 + 8);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 28) = 1;
  return result;
}

sqlite3_file *__cdecl sqlite3_database_file_object(sqlite3_file *result)
{
  if (result)
  {
    return *(sqlite3_file **)(*((void *)i - 1) + 72LL);
  }

  return result;
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  if (p1 && p2)
  {
    unsigned int v4 = *(_DWORD *)&p1->hidden[32];
    unsigned int v5 = *(_DWORD *)&p2->hidden[32];
    if (v4 >= v5)
    {
      if (v4 > v5)
      {
        return 1;
      }

      else
      {
        unsigned int v7 = *(_DWORD *)&p1->hidden[16];
        unsigned int v8 = *(_DWORD *)&p2->hidden[16];
        BOOL v9 = v7 >= v8;
        BOOL v10 = v7 > v8;
        if (v9) {
          return v10;
        }
        else {
          return -1;
        }
      }
    }

    else
    {
      return -1;
    }
  }

  else
  {
    sub_1812CF36C(76385);
    return p1 != p2;
  }

int sqlite3_enable_shared_cache(int a1)
{
  return 21;
}

sqlite3_backup *__cdecl sqlite3_backup_init( sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  if (!pSource) {
    goto LABEL_11;
  }
  int v9 = *((unsigned __int8 *)pSource + 113);
  if (v9 == 186)
  {
LABEL_5:
    BOOL v10 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1812CF36C(88404);
    return 0LL;
  }

  if (v9 != 118)
  {
    if (v9 == 109) {
      goto LABEL_5;
    }
LABEL_10:
    BOOL v10 = "invalid";
    goto LABEL_12;
  }

  if (!pDest)
  {
LABEL_11:
    BOOL v10 = "NULL";
    goto LABEL_12;
  }

  int v12 = *((unsigned __int8 *)pDest + 113);
  if (v12 == 186) {
    goto LABEL_5;
  }
  if (v12 != 118)
  {
    if (v12 == 109) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  uint64_t v17 = *((void *)pSource + 3);
  if (v17) {
    xmmword_18C465400(v17);
  }
  uint64_t v18 = *((void *)pDest + 3);
  if (v18) {
    xmmword_18C465400(v18);
  }
  if (pSource == pDest)
  {
    sub_1812D50CC( (uint64_t)pSource,  1,  "source and destination must be distinct",  (uint64_t)zSourceName,  v4,  v5,  v6,  v7,  v40);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v19 = sub_18126F0AC(72LL);
    uint64_t v13 = v19;
    if (v19)
    {
      *(void *)(v19 + 64) = 0LL;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)uint64_t v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(void *)(v19 + 40) = sub_1812D51F0(pDest, (uint64_t)pSource, (uint64_t)zSourceName, v20, v21, v22, v23, v24);
      uint64_t v30 = sub_1812D51F0(pDest, (uint64_t)pDest, (uint64_t)zDestName, v25, v26, v27, v28, v29);
      *(void *)uint64_t v13 = pDest;
      *(void *)(v13 + 8) = v30;
      *(void *)(v13 + 32) = pSource;
      *(_DWORD *)(v13 + 24) = 1;
      *(_DWORD *)(v13 + 60) = 0;
      uint64_t v36 = *(void *)(v13 + 40);
      if (v36 && v30)
      {
        if (!*(_BYTE *)(v30 + 16))
        {
          ++*(_DWORD *)(v36 + 24);
          goto LABEL_33;
        }

        sub_1812D50CC((uint64_t)pDest, 1, "destination database is in use", v31, v32, v33, v34, v35, v40);
      }

      uint64_t v37 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v13);
        --qword_18C468B10;
        off_18C4653A8(v13);
        uint64_t v13 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_33;
        }
        uint64_t v37 = &xmmword_18C465410;
      }

      (*v37)(v13);
      uint64_t v13 = 0LL;
    }

    else
    {
      *((_DWORD *)pDest + 20) = 7;
      sub_1812FA264((uint64_t)pDest, 7);
    }
  }

LABEL_33:
  uint64_t v38 = *((void *)pDest + 3);
  if (v38) {
    xmmword_18C465410(v38);
  }
  uint64_t v39 = *((void *)pSource + 3);
  if (v39) {
    xmmword_18C465410(v39);
  }
  return (sqlite3_backup *)v13;
}

  sub_1812D6500(v3, v10);
  return v11;
}

  uint64_t v5 = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(void *)(a1 + 416))
  {
LABEL_4:
    sub_1812FA264(a1, v5);
    if (v5) {
      return sub_1813037C4(a1, v5);
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_5:
  if (!*(_BYTE *)(a1 + 103)) {
    return 0LL;
  }
  return sub_1813037C4(a1, v5);
}

    uint64_t v21 = (const char *)v31;
LABEL_34:
    uint64_t v14 = sqlite3_exec((sqlite3 *)a1, v21, 0LL, 0LL, 0LL);
    if (v21)
    {
      uint64_t v22 = (void (**)(const char *))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_40:
        (*v22)(v21);
        goto LABEL_41;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v21);
      --qword_18C468B10;
      off_18C4653A8(v21);
      uint64_t v21 = (const char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v22 = (void (**)(const char *))&xmmword_18C465410;
        goto LABEL_40;
      }
    }

                  uint64_t v1 = zOptName + 7;
                  goto LABEL_34;
                }

                if ((_DWORD)v8 == 95) {
                  goto LABEL_33;
                }
                int v9 = &byte_1813C6343[v8];
                BOOL v10 = "_";
              }

              else
              {
                int v9 = &byte_1813C6343[v7];
                BOOL v10 = "E_";
              }
            }

            else
            {
              int v9 = &byte_1813C6343[v6];
              BOOL v10 = "TE_";
            }
          }

          else
          {
            int v9 = &byte_1813C6343[v5];
            BOOL v10 = "ITE_";
          }
        }

        else
        {
          int v9 = &byte_1813C6343[v4];
          BOOL v10 = "LITE_";
        }
      }

      else
      {
        int v9 = &byte_1813C6343[v3];
        BOOL v10 = "QLITE_";
      }
    }

    else
    {
      int v9 = &byte_1813C6343[v2];
      BOOL v10 = "SQLITE_";
    }

    int v12 = *v9;
    goto LABEL_32;
  }

  sub_1812CF36C(190875);
  return 0;
}

      uint64_t v18 = *(void *)(a1 + 72);
      *(void *)(a1 + 144) = v18;
      if (v18)
      {
        uint64_t v19 = *(int *)(a1 + 120);
        v18 += 16 * v19;
        uint64_t v20 = v18 + v19;
      }

      else
      {
        uint64_t v20 = 0LL;
      }

      *(void *)(a1 + 136) = v18;
      *(void *)(a1 + 112) = v20;
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result) {
        goto LABEL_15;
      }
      uint64_t result = sub_1813BBD3C(a1, 2);
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result) {
        goto LABEL_15;
      }
      LODWORD(v13) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 4) = v13;
    }

    uint64_t v37 = 233954;
    if (!*(void *)(a1 + 112) || (uint64_t v38 = *(_DWORD *)(a1 + 88)) != 0 && *(_DWORD *)(a1 + 92))
    {
LABEL_104:
      uint64_t result = sub_1812FBF50(v37);
      *(_DWORD *)(a1 + 100) = result;
      break;
    }

    *(_DWORD *)(a1 + 124) = v17;
    *(_DWORD *)(a1 + 8) = v13 + 2;
    *(_DWORD *)(a1 + 128) = *(unsigned __int8 *)(v15 + v16);
    if (v17 > 0x17 || ((1 << v17) & 0x840200) == 0)
    {
      uint64_t v37 = 233960;
      goto LABEL_104;
    }

    if (a2)
    {
      if (v17 == 23 && v38 == 0)
      {
        uint64_t v43 = 2 * *(_DWORD *)(a1 + 120);
        goto LABEL_106;
      }

      uint64_t v41 = *(unsigned int *)(a1 + 120);
      int v42 = v17 != 9 || v38 == 0;
      uint64_t v43 = *(_DWORD *)(a1 + 120);
      if (!v42)
      {
        if ((int)v41 < 1)
        {
          uint64_t v43 = 0;
          goto LABEL_106;
        }

        uint64_t v44 = *(int8x16_t **)(a1 + 136);
        if (v41 >= 8)
        {
          if (v41 >= 0x20)
          {
            uint64_t v60 = 0uLL;
            uint64_t v45 = v41 & 0xFFFFFFE0;
            uint64_t v61 = 0uLL;
            uint64_t v62 = v44 + 1;
            unsigned int v63 = v45;
            int v64 = 0uLL;
            uint64_t v65 = 0uLL;
            uint64_t v66 = 0uLL;
            uint64_t v67 = 0uLL;
            double v68 = 0uLL;
            double v69 = 0uLL;
            v70.i64[0] = 0x100000001LL;
            v70.i64[1] = 0x100000001LL;
            do
            {
              signed __int8 v71 = (uint8x16_t)vtstq_s8(v62[-1], v62[-1]);
              int v72 = vmovl_u8(*(uint8x8_t *)v71.i8);
              int v73 = vmovl_high_u8(v71);
              double v74 = (uint8x16_t)vtstq_s8(*v62, *v62);
              int v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
              ssize_t v76 = vmovl_high_u8(v74);
              uint64_t v65 = vaddq_s32(v65, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v73), v70));
              int v64 = vaddq_s32(v64, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v73.i8), v70));
              uint64_t v61 = vaddq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v70));
              uint64_t v60 = vaddq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v70));
              double v69 = vaddq_s32(v69, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v76), v70));
              double v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v76.i8), v70));
              uint64_t v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v75), v70));
              uint64_t v66 = vaddq_s32(v66, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8), v70));
              v62 += 2;
              v63 -= 32LL;
            }

            while (v63);
            uint64_t v43 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v66, v60), vaddq_s32(v68, v64)),  vaddq_s32(vaddq_s32(v67, v61), vaddq_s32(v69, v65))));
            if (v45 == v41) {
              goto LABEL_106;
            }
            if ((v41 & 0x18) == 0) {
              goto LABEL_139;
            }
          }

          else
          {
            uint64_t v43 = 0;
            uint64_t v45 = 0LL;
          }

          uint64_t v77 = v45;
          uint64_t v45 = v41 & 0xFFFFFFF8;
          double v78 = 0uLL;
          int8x16_t v79 = (int32x4_t)v43;
          uint64_t v80 = (int8x8_t *)&v44->i8[v77];
          uint64_t v81 = v77 - v45;
          v82.i64[0] = 0x100000001LL;
          v82.i64[1] = 0x100000001LL;
          do
          {
            uint64_t v83 = *v80++;
            __int16 v84 = vmovl_u8((uint8x8_t)vtst_s8(v83, v83));
            double v78 = vaddq_s32(v78, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v84), v82));
            int8x16_t v79 = vaddq_s32(v79, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v84.i8), v82));
            v81 += 8LL;
          }

          while (v81);
          uint64_t v43 = vaddvq_s32(vaddq_s32(v79, v78));
          if (v45 != v41) {
            goto LABEL_139;
          }
        }

        else
        {
          uint64_t v45 = 0LL;
          uint64_t v43 = 0;
LABEL_139:
          int v85 = v41 - v45;
          int v86 = &v44->u8[v45];
          do
          {
            if (*v86++) {
              ++v43;
            }
            --v85;
          }

          while (v85);
        }
      }

    if (*(_DWORD *)v5)
    {
      uint64_t v17 = *(const char **)(v5 + 8);
      uint64_t v28 = 1;
      uint64_t v26 = dword_18C54FA50 + 1LL;
      uint64_t v27 = 1LL;
      uint64_t v29 = *(_DWORD *)(a1 + 24);
      if (fsctl(v17, 0xC0207A17uLL, &v26, 0) != -1)
      {
        *(_DWORD *)uint64_t v5 = 0;
        goto LABEL_36;
      }

      int v15 = *__error();
      int v12 = 5LL;
      if (((1LL << v15) & 0x1000000800012010LL) == 0)
      {
        if (v15 == 1)
        {
LABEL_45:
          int v12 = 3LL;
          *(_DWORD *)(a1 + 32) = v15;
          if (a2 | 3) {
            goto LABEL_62;
          }
          goto LABEL_55;
        }

    int v15 = 7LL;
    if ((v26 & 1) != 0) {
      return v15;
    }
    goto LABEL_13;
  }

  uint64_t v21 = dword_18C5505A0++;
  *(void *)(v20 + 8 * v21) = v14;
  qword_18C5505A8 = v20;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(void *)(v14 + 64) = 0LL;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 44) = 3;
  *(void *)(v14 + 16) = qword_18C465518;
  *(void *)(v14 + 64) = v14 + 72;
  memcpy((void *)(v14 + 72), __s, v9 + 1);
  uint64_t v22 = sqlite3_initialize();
  if ((_DWORD)v22)
  {
    *(void *)(v14 + 32) = 0LL;
LABEL_26:
    --dword_18C5505A0;
    goto LABEL_27;
  }

  uint64_t v25 = qword_18C4653F0(v22);
  *(void *)(v14 + 32) = v25;
  if (!v25) {
    goto LABEL_26;
  }
  *(_DWORD *)(v14 + 56) = 1;
  xmmword_18C465400(v25);
  if ((v26 & 1) == 0) {
LABEL_38:
  }
    xmmword_18C465410(v12);
LABEL_10:
  a3[1] = v14;
  if (a5) {
    *a5 = a4 | 0x80;
  }
  int v15 = 0LL;
  *a3 = &unk_189B6D390;
  int v12 = *(void *)(v14 + 32);
  if (v12) {
LABEL_13:
  }
    xmmword_18C465410(v12);
  return v15;
}

      if (v11 >= v29) {
        uint64_t v25 = *(unsigned __int8 *)(v12 + 9) + 8LL;
      }
      else {
        uint64_t v25 = (*(unsigned __int8 *)(v17 + 2LL * v11 + 1) | (*(unsigned __int8 *)(v17 + 2LL * v11) << 8)) & *(void *)&v15;
      }
      uint64_t v26 = bswap32(*(_DWORD *)(*(void *)(v12 + 80) + v25));
      *(_WORD *)(a1 + 86) = v11;
      uint64_t result = sub_18129BA78(a1, v26);
      BOOL v10 = v28;
      if ((_DWORD)result) {
        goto LABEL_41;
      }
      goto LABEL_15;
    }

    uint64_t v13 = v14 - 1;
LABEL_28:
    uint64_t v14 = (v13 + v11) >> 1;
  }

  *(_WORD *)(a1 + 86) = v14;
  if (!*(_BYTE *)(v12 + 8))
  {
    uint64_t v11 = v14;
    goto LABEL_33;
  }

  uint64_t result = 0LL;
  *(_BYTE *)(a1 + 1) |= 2u;
  *(void *)(a1 + 48) = v23;
  *(_WORD *)(a1 + 70) = 0;
  *uint64_t v27 = 0;
  return result;
}

  *a5 = v22;
  return v19;
}

  uint64_t v35 = *v13;
  if (*v8)
  {
    uint64_t v26 = v13[12];
    if (v26)
    {
      uint64_t v27 = *(void *)(*(void *)*v8 + 32LL);
      uint64_t v28 = (uint64_t *)(v27 + 24);
      uint64_t v29 = 0xFFFFFFFF00000000LL;
      do
      {
        uint64_t v30 = *v28;
        v28 += 4;
        v29 += 0x100000000LL;
      }

      while (v30 != v26);
      uint64_t v36 = *(void *)(v27 + (v29 >> 27));
    }
  }

      uint64_t v27 = v34;
      if (v34 + 1 >= v32)
      {
        sub_1812D3A10((uint64_t)&v30, ".", 1u);
        if (v22)
        {
LABEL_37:
          uint64_t v28 = strlen(v22);
          a3 = v28 & 0x3FFFFFFF;
          if ((v28 & 0x3FFFFFFF) != 0)
          {
            uint64_t v29 = v34;
            if (v34 + a3 < v32)
            {
              v34 += a3;
              memcpy(&v31[v29], v22, v28 & 0x3FFFFFFF);
            }

            else
            {
              sub_1812D3A10((uint64_t)&v30, v22, a3);
            }
          }
        }
      }

      else
      {
        ++v34;
        v31[v27] = 46;
        if (v22) {
          goto LABEL_37;
        }
      }
    }

    v34 += 2;
    *(_WORD *)&v31[v23] = 8236;
LABEL_26:
    uint64_t v24 = *(const char **)v11;
    if (!*(void *)v11) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }

  sqlite3_str_appendf((sqlite3_str *)&v30, "index '%q'", *(void *)a3);
LABEL_3:
  if (v31 && (v31[v34] = 0, v33) && (v35 & 0x400) == 0) {
    uint64_t v13 = sub_1812F24E0(&v30);
  }
  else {
    uint64_t v13 = v31;
  }
  if ((*(_WORD *)(v8 + 99) & 3) == 2) {
    uint64_t v14 = 1555LL;
  }
  else {
    uint64_t v14 = 2067LL;
  }
  int v15 = a1[2];
  if (v15)
  {
    if ((_DWORD)a2 != 2) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }

  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  int v15 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a2 == 2)
  {
LABEL_13:
    uint64_t v16 = (uint64_t *)a1[21];
    if (!v16) {
      uint64_t v16 = a1;
    }
    *((_BYTE *)v16 + 33) = 1;
  }

  uint64_t v36 = *((void *)v5 + 2) + 1LL;
  *((void *)v5 + 2) = v36;
  uint64_t v37 = (int)v5[6];
  if ((_DWORD)v37 && v36 > v37 + (int)v37 * (unint64_t)*((unsigned __int8 *)v5 + 36))
  {
    ++*((_BYTE *)v5 + 36);
    if (a1)
    {
      uint64_t v38 = **((void **)v5 + 6) != 0LL;
      uint64_t v39 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v39, v38);
      }

      else
      {
        *(void *)uint64_t v39 = v38;
        *(_WORD *)(v39 + 20) = 4;
      }
    }

    else
    {
      sub_1812CF36C(97431);
    }
  }

  *a3 = v26;
  return v10;
}

    uint64_t v22 = v15 + 3;
    do
    {
      uint64_t v13 = *v22;
      uint64_t v23 = (_DWORD *)*v22;
      uint64_t v24 = *v23;
      uint64_t v22 = (uint64_t *)(v23 + 4);
    }

    while (v24 == v5);
    uint64_t v38 = (void *)v13;
    uint64_t v25 = v15[3];
    *(void *)(v25 + 8) = v15[1];
    uint64_t v26 = v15[1];
    if (v26) {
      *(void *)(v26 + 16) = v25;
    }
    else {
      uint64_t v3 = v25;
    }
    v15[1] = v20;
    uint64_t v14 = v15;
  }

  uint64_t v20 = v38;
LABEL_29:
  if (!v18)
  {
    uint64_t v20 = v14;
    if (!v15) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }

  sub_18136EEAC((uint64_t)v20);
  uint64_t v6 = 18LL;
LABEL_50:
  if ((int)v4 >= 1)
  {
    uint64_t v4 = v4;
    uint64_t v31 = v12;
    do
    {
      uint64_t v32 = *v31++;
      sub_18136EEAC(v32);
      --v4;
    }

    while (v4);
  }

  if (v14)
  {
    while (2)
    {
      uint64_t v33 = (void *)v14[1];
      uint64_t v34 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_55;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
      --qword_18C468B10;
      off_18C4653A8(v14);
      uint64_t v14 = (void *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v34 = &xmmword_18C465410;
LABEL_55:
        (*v34)(v14);
      }

      uint64_t v14 = v33;
      if (!v33) {
        break;
      }
      continue;
    }
  }

  if ((v15 & 0x10) != 0)
  {
    uint64_t v17 = *(unsigned int *)(v12 + 16);
    if ((v15 & 0x400) != 0) {
      uint64_t v17 = (*(_DWORD *)v12 + v17);
    }
    if (sqlite3_initialize()) {
      goto LABEL_40;
    }
    goto LABEL_24;
  }

  if ((v15 & 1) != 0)
  {
LABEL_23:
    uint64_t v17 = 0LL;
    if (!sqlite3_initialize()) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }

  uint64_t v17 = sub_181303970(v12, 1);
  if (sqlite3_initialize()) {
    goto LABEL_40;
  }
LABEL_24:
  uint64_t v18 = (void *)sub_18126F0AC((int)v17 + 1);
  *(void *)(a1 + 8) = v18;
  if (!v18) {
    return 7LL;
  }
  if ((int)v17 >= 1)
  {
    memcpy(v18, v14, v17);
    uint64_t v18 = *(void **)(a1 + 8);
  }

  *((_BYTE *)v18 + (int)v17) = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void *))(*(void *)(v8 + 24) + 24LL))( *(void *)(v8 + 32),  *(void *)(a1 + 8),  v17,  v9);
  if (!(_DWORD)result)
  {
    **(void **)(a1 + 16) = *(void *)(v8 + 32);
    return sub_1813813F8((uint64_t *)a1);
  }

  return result;
}

  int v12 = *(void *)(v1 + 32);
  if (v12)
  {
    uint64_t v13 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
      --qword_18C468B10;
      off_18C4653A8(v12);
      int v12 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_40;
      }
      uint64_t v13 = &xmmword_18C465410;
    }

    (*v13)(v12);
  }

void sub_1812D50CC( uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(_DWORD *)(a1 + 80) = a2;
  if (a2 != 3082 && (a2 & 0xFB) == 0xA)
  {
    int v12 = *(uint64_t (**)(void))(*(void *)a1 + 128LL);
    if (v12) {
      int v13 = v12();
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(a1 + 92) = v13;
  }

  if (a3)
  {
    if (!*(void *)(a1 + 416))
    {
      uint64_t v14 = sub_1812F2264(a1, 0x40uLL);
      if (!v14)
      {
        *(void *)(a1 + 416) = 0LL;
        return;
      }

      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_WORD *)(v14 + 20) = 1;
      *(void *)(v14 + 24) = a1;
      *(void *)(a1 + 416) = v14;
    }

    int v15 = (char *)sub_1812FA130(a1, a3, &a9);
    uint64_t v16 = *(void *)(a1 + 416);
    if (v16) {
      sub_181269368(v16, v15, -1LL, 1u, sub_1812E1FD0);
    }
  }

  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    if (a2 || *(void *)(a1 + 416)) {
      sub_1812FA264(a1, a2);
    }
    else {
      *(_DWORD *)(a1 + 84) = -1;
    }
  }

uint64_t sub_1812D51F0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    goto LABEL_29;
  }
  int v10 = *(_DWORD *)(a2 + 40);
  uint64_t v11 = (v10 - 1);
  if (v10 < 1) {
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  int v13 = (_BYTE **)(v12 + 32 * v11);
  while (1)
  {
    uint64_t v14 = *v13;
    if (*v13) {
      break;
    }
LABEL_11:
    if (!(_DWORD)v11)
    {
      uint64_t v19 = (unsigned __int8 *)a3;
      for (uint64_t i = "main"; ; ++i)
      {
        uint64_t v21 = *(unsigned __int8 *)i;
        uint64_t v22 = *v19;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*i)
          {
            LODWORD(v11) = 0;
            return *(void *)(v12 + 32LL * v11 + 8);
          }
        }

        else if (byte_1813C6343[v21] != byte_1813C6343[v22])
        {
          break;
        }

        ++v19;
      }
    }

    v13 -= 4;
    BOOL v18 = (int)v11 <= 0;
    LODWORD(v11) = v11 - 1;
    if (v18) {
      goto LABEL_29;
    }
  }

  for (uint64_t j = (unsigned __int8 *)a3; ; ++j)
  {
    uint64_t v16 = *v14;
    uint64_t v17 = *j;
    if ((_DWORD)v16 == (_DWORD)v17) {
      break;
    }
    if (byte_1813C6343[v16] != byte_1813C6343[v17]) {
      goto LABEL_11;
    }
LABEL_7:
    ++v14;
  }

  if (*v14) {
    goto LABEL_7;
  }
  if ((_DWORD)v11 != 1)
  {
    if ((v11 & 0x80000000) == 0) {
      return *(void *)(v12 + 32LL * v11 + 8);
    }
LABEL_29:
    sub_1812D50CC((uint64_t)a1, 1, "unknown database %s", a4, a5, a6, a7, a8, a3);
    return 0LL;
  }

  __int128 v44 = 0u;
  __int128 v43 = 0u;
  __int128 v42 = 0u;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  __int128 v39 = 0u;
  __int128 v38 = 0u;
  __int128 v37 = 0u;
  __int128 v36 = 0u;
  __int128 v35 = 0u;
  __int128 v34 = 0u;
  __int128 v33 = 0u;
  __int128 v32 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  uint64_t v55 = 0LL;
  uint64_t v23 = *(void *)(a2 + 344);
  uint64_t v45 = 0LL;
  uint64_t v46 = v23;
  *(void *)(a2 + 344) = &v31;
  uint64_t v31 = a2;
  if (*(_BYTE *)(a2 + 103)) {
    sub_1812DC47C((uint64_t)&v31, "out of memory", a3, a4, a5, a6, a7, a8, v30);
  }
  if (!sub_1812FA2F0((uint64_t)&v31))
  {
    if ((void)v32) {
      sub_1812F20DC(a1, (void *)v32);
    }
    sub_1812DCA44(&v31);
    uint64_t v12 = *(void *)(a2 + 32);
    LODWORD(v11) = 1;
    return *(void *)(v12 + 32LL * v11 + 8);
  }

  sub_1812D50CC((uint64_t)a1, v33, "%s", v24, v25, v26, v27, v28, v32);
  if ((void)v32) {
    sub_1812F20DC(a1, (void *)v32);
  }
  sub_1812DCA44(&v31);
  return 0LL;
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  if (!p) {
    return sub_1812CF36C(88602);
  }
  uint64_t v5 = *(void *)(*((void *)p + 4) + 24LL);
  if (v5) {
    xmmword_18C465400(v5);
  }
  uint64_t v6 = *((void *)p + 5);
  if (*(_BYTE *)(v6 + 17))
  {
    ++*(_DWORD *)(v6 + 20);
    if (!*(_BYTE *)(v6 + 18)) {
      sub_1812FDE20(v6);
    }
  }

  if (*(void *)p)
  {
    uint64_t v7 = *(void *)(*(void *)p + 24LL);
    if (v7) {
      xmmword_18C465400(v7);
    }
  }

  unsigned int v8 = *((_DWORD *)p + 12);
  if (v8 > 6 || ((1 << v8) & 0x61) == 0) {
    goto LABEL_123;
  }
  uint64_t v9 = *((void *)p + 5);
  int v10 = *(uint64_t **)(v9 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = **(void **)(*((void *)p + 1) + 8LL);
  if (*(void *)p && *((_BYTE *)v10 + 36) == 2)
  {
    int v13 = 5;
    BOOL v61 = 1;
    goto LABEL_34;
  }

  BOOL v61 = *(_BYTE *)(v9 + 16) != 0;
  if (*(_BYTE *)(v9 + 16)) {
    int v13 = 0;
  }
  else {
    int v13 = sub_1812FDF34(v9, 0, 0LL);
  }
  int v15 = *((_DWORD *)p + 5);
  if (!(v15 | v13))
  {
    if (sub_1812C72E0( *((void *)p + 1),  *(_DWORD *)(*(void *)(*((void *)p + 5) + 8LL) + 52LL),  0,  0,  *(int8x8_t *)&v2) == 7)
    {
      int v13 = 7;
      goto LABEL_34;
    }

    if (!*((_DWORD *)p + 5)) {
      goto LABEL_26;
    }
LABEL_24:
    int v13 = 0;
    goto LABEL_34;
  }

  if (v13) {
    goto LABEL_34;
  }
  if (v15) {
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v16 = *((void *)p + 1);
  uint64_t v17 = (_DWORD *)((char *)p + 16);
  if (*(_BYTE *)(v16 + 17) || *(unsigned __int8 *)(v16 + 16) <= 1u)
  {
    int v13 = sub_1812FDF34(v16, 2, v17);
    if (v13) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  BOOL v18 = *(uint64_t **)(v16 + 8);
  _DWORD *v17 = bswap32(*(_DWORD *)(*(void *)(v18[3] + 80) + 40LL));
  uint64_t v19 = *v18;
  int v20 = *(_DWORD *)(*(void *)v16 + 788LL);
  if (*(_DWORD *)(v19 + 128) >= v20 || !*(_BYTE *)(v19 + 10) || (int v13 = sub_1812FEBEC(v19, v20)) == 0)
  {
LABEL_33:
    int v13 = 0;
    *((_DWORD *)p + 5) = 1;
  }

uint64_t sub_1812D5C44(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v9 = *(_DWORD *)(v6 + 52);
  int v10 = *(_DWORD *)(v8 + 52);
  int v11 = *(_DWORD *)(v8 + 56);
  if (v10 >= v9) {
    int v12 = *(_DWORD *)(v6 + 52);
  }
  else {
    int v12 = *(_DWORD *)(v8 + 52);
  }
  if (!*(_BYTE *)(v5 + 17))
  {
    int v14 = *(unsigned __int8 *)(v6 + 38);
    int v15 = *(_DWORD *)(v6 + 56);
    int v16 = *(_DWORD *)(v6 + 52);
    goto LABEL_12;
  }

  int v13 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = v13 + 1;
  if (*(_BYTE *)(v5 + 18))
  {
    int v14 = *(unsigned __int8 *)(v6 + 38);
    int v15 = *(_DWORD *)(v6 + 56);
    int v16 = v9;
    *(_DWORD *)(v5 + 20) = v13;
    if (v13) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  sub_1812FDE20(v5);
  uint64_t v17 = *(void *)(v5 + 8);
  int v14 = *(unsigned __int8 *)(v17 + 38);
  int v16 = *(_DWORD *)(v17 + 52);
  int v15 = *(_DWORD *)(v17 + 56);
  if (*(_BYTE *)(v5 + 17))
  {
    int v18 = *(_DWORD *)(v5 + 20);
    *(_DWORD *)(v5 + 20) = v18 - 1;
    if (v18 == 1) {
LABEL_11:
    }
      sub_1812FDEFC(v5);
  }

uint64_t sub_1812D5F54(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 112);
  int v10 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v10[8] >= *(_DWORD *)(v9 + 48))
  {
    if (v10[32])
    {
      uint64_t v11 = sub_1812FAFE4(v9);
      if ((_DWORD)v11)
      {
LABEL_16:
        if (!*(_BYTE *)(a1 + 17)) {
          return v11;
        }
        goto LABEL_17;
      }
    }
  }

  else
  {
    uint64_t v11 = v10[12];
    if ((_DWORD)v11) {
      goto LABEL_16;
    }
    if (v10[46] <= v10[50])
    {
      uint64_t v11 = sub_1812ABE24(v9);
      if ((_DWORD)v11) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v11 = sub_1812FED50(v9);
      if ((_DWORD)v11) {
        goto LABEL_16;
      }
    }
  }

  *(_DWORD *)(v8 + 4 * a2 + 36) = bswap32(a3);
  if (a2 == 7)
  {
    uint64_t v11 = 0LL;
    *(_BYTE *)(v6 + 34) = a3;
    goto LABEL_16;
  }

  uint64_t v11 = 0LL;
  if (!*(_BYTE *)(a1 + 17)) {
    return v11;
  }
LABEL_17:
  int v12 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v12;
  if (!v12) {
    sub_1812FDEFC(a1);
  }
  return v11;
}

void *sub_1812D6078(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 111)) {
    sub_1812FA020(a1);
  }
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 24LL;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + v4);
      if (v5)
      {
        if (*(_DWORD *)(a1 + 72))
        {
          *(_WORD *)(v5 + 114) |= 8u;
        }

        else
        {
          sub_1813070A0(v5);
          int v2 = *(_DWORD *)(a1 + 40);
        }
      }

      ++v3;
      v4 += 32LL;
    }

    while (v3 < v2);
  }

  *(_DWORD *)(a1 + 44) &= 0xFFFFFFEE;
  uint64_t result = sub_18130D9D8((void *)a1);
  if (*(_BYTE *)(a1 + 111))
  {
    if (*(_DWORD *)(a1 + 72)) {
      return result;
    }
    return sub_181311990((void *)a1);
  }

  uint64_t result = (void *)sub_1812FA0B4(a1);
  if (!*(_DWORD *)(a1 + 72)) {
    return sub_181311990((void *)a1);
  }
  return result;
}

uint64_t sub_1812D614C(uint64_t a1, int a2)
{
  unsigned __int8 v2 = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(_WORD *)(v4 + 40) = *(_WORD *)(v4 + 40) & 0xFFDF | (32 * (a2 == 1));
  if (!*(_BYTE *)(a1 + 17) && *(_BYTE *)(a1 + 16) || (uint64_t result = sub_1812FDF34(a1, 0, 0LL), !(_DWORD)result))
  {
    uint64_t v6 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v6 + 80);
    int v8 = *(unsigned __int8 *)(v7 + 18);
    if (v8 == v2 && *(unsigned __int8 *)(v7 + 19) == v8)
    {
      uint64_t result = 0LL;
      goto LABEL_26;
    }

    if (*(_BYTE *)(a1 + 17) || *(unsigned __int8 *)(a1 + 16) <= 1u)
    {
      uint64_t result = sub_1812FDF34(a1, 2, 0LL);
      if ((_DWORD)result) {
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v9 = **(void **)(a1 + 8);
      int v10 = *(_DWORD *)(*(void *)a1 + 788LL);
      if (*(_DWORD *)(v9 + 128) >= v10 || !*(_BYTE *)(v9 + 10))
      {
LABEL_16:
        uint64_t v11 = *(void *)(v6 + 112);
        int v12 = *(_DWORD **)(v11 + 40);
        if ((*(_WORD *)(v11 + 52) & 4) != 0 && v12[8] >= *(_DWORD *)(v11 + 48))
        {
          if (!v12[32]) {
            goto LABEL_25;
          }
          uint64_t result = sub_1812FAFE4(v11);
        }

        else
        {
          uint64_t result = v12[12];
          if ((_DWORD)result) {
            goto LABEL_26;
          }
          if (v12[46] <= v12[50]) {
            uint64_t result = sub_1812ABE24(v11);
          }
          else {
            uint64_t result = sub_1812FED50(v11);
          }
        }

        if ((_DWORD)result) {
          goto LABEL_26;
        }
LABEL_25:
        uint64_t result = 0LL;
        *(_BYTE *)(v7 + 18) = v2;
        *(_BYTE *)(v7 + 19) = v2;
        goto LABEL_26;
      }

      uint64_t result = sub_1812FEBEC(v9, v10);
      if ((_DWORD)result) {
        goto LABEL_26;
      }
    }

    uint64_t v6 = *(void *)(v4 + 24);
    goto LABEL_16;
  }

uint64_t sub_1812D62B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (!*(void *)v3
    || ((uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 80LL))(v3, 21LL, a2),
         (_DWORD)result != 12)
      ? (BOOL v5 = (_DWORD)result == 0)
      : (BOOL v5 = 1),
        v5))
  {
    if (*(_BYTE *)(a1 + 11) || !*(_BYTE *)(a1 + 14)) {
      return 0LL;
    }
    else {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40LL))(*(void *)(a1 + 72));
    }
  }

  return result;
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  if (!p) {
    return 0;
  }
  unsigned __int8 v2 = p;
  uint64_t v3 = *((void *)p + 4);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)v2 + 5);
  if (*(_BYTE *)(v5 + 17))
  {
    ++*(_DWORD *)(v5 + 20);
    if (!*(_BYTE *)(v5 + 18)) {
      sub_1812FDE20(v5);
    }
  }

  if (*(void *)v2)
  {
    uint64_t v6 = *(void *)(*(void *)v2 + 24LL);
    if (!v6 || (xmmword_18C465400(v6), *(void *)v2)) {
      --*(_DWORD *)(*((void *)v2 + 5) + 24LL);
    }
  }

  if (*((_DWORD *)v2 + 15))
  {
    uint64_t v7 = (void *)(**(void **)(*((void *)v2 + 5) + 8LL) + 112LL);
    do
    {
      int v8 = v7;
      uint64_t v9 = (sqlite3_backup *)*v7;
      uint64_t v7 = (void *)(*v7 + 64LL);
    }

    while (v9 != v2);
    *int v8 = *((void *)v2 + 8);
  }

  sub_1812B57D4(*((void *)v2 + 1), 0, 0, v1);
  if (*((_DWORD *)v2 + 12) == 101) {
    int v11 = 0;
  }
  else {
    int v11 = *((_DWORD *)v2 + 12);
  }
  uint64_t v12 = *(void *)v2;
  if (*(void *)v2)
  {
    *(_DWORD *)(v12 + 80) = v11;
    if (v11 || *(void *)(v12 + 416))
    {
      sub_1812FA264(v12, v11);
      uint64_t v12 = *(void *)v2;
    }

    else
    {
      *(_DWORD *)(v12 + 84) = -1;
    }

    sub_1812D6500(v12, v10);
  }

  uint64_t v13 = *((void *)v2 + 5);
  if (*(_BYTE *)(v13 + 17))
  {
    int v14 = *(_DWORD *)(v13 + 20) - 1;
    *(_DWORD *)(v13 + 20) = v14;
    if (!v14) {
      sub_1812FDEFC(v13);
    }
  }

  if (*(void *)v2)
  {
    int v15 = (double (**)(sqlite3_backup *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      off_18C4653A8(v2);
      unsigned __int8 v2 = (sqlite3_backup *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_33;
      }
      int v15 = (double (**)(sqlite3_backup *))&xmmword_18C465410;
    }

    double v10 = (*v15)(v2);
  }

uint64_t sub_1812D6500(uint64_t result, double a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 113) != 167 || *(void *)(result + 8))
  {
LABEL_3:
    uint64_t v2 = *(void *)(result + 24);
    if (!v2) {
      return result;
    }
    uint64_t v3 = &xmmword_18C465410;
    return (*v3)(v2);
  }

  uint64_t v4 = *(unsigned int *)(result + 40);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(void *)(result + 32) + 8LL;
    while (!*(void *)v5 || !*(_DWORD *)(*(void *)v5 + 24LL))
    {
      v5 += 32LL;
      if (!--v4) {
        goto LABEL_12;
      }
    }

    goto LABEL_3;
  }

int sqlite3_backup_remaining(sqlite3_backup *p)
{
  if (p) {
    return *((_DWORD *)p + 13);
  }
  sub_1812CF36C(88909);
  return 0;
}

int sqlite3_backup_pagecount(sqlite3_backup *p)
{
  if (p) {
    return *((_DWORD *)p + 14);
  }
  sub_1812CF36C(88923);
  return 0;
}

void sub_1812D6A08(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  if (*(void *)(a2 + 192))
  {
    if (qword_18C468CB8 != -1) {
      dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
    }
    uint64_t v4 = (os_log_s *)qword_18C468CA0;
    uint64_t v5 = (os_log_s *)qword_18C468C98;
    double v6 = *(const char **)(a2 + 320);
    int v7 = *(_DWORD *)(a2 + 224);
    int v9 = *(_DWORD *)(a2 + 204);
    int v8 = *(_DWORD *)(a2 + 208);
    int v10 = *(_DWORD *)(a2 + 236);
    int v11 = *(_DWORD *)(a2 + 212);
    int v12 = *(_DWORD *)(a2 + 216);
    if (qword_18C468CF8 != -1)
    {
      int v56 = *(_DWORD *)(a2 + 212);
      int v49 = *(_DWORD *)(a2 + 224);
      dispatch_once(&qword_18C468CF8, &unk_189B6D520);
      int v11 = v56;
      int v7 = v49;
    }

    if ((dword_18C465544 & 1) != 0)
    {
      int v53 = v7;
      int v54 = v8;
      uint64_t v13 = *(unsigned int *)(a1 + 40);
      int v58 = v9;
      int v55 = v11;
      if ((int)v13 <= 0)
      {
        int v24 = 0;
        int v52 = -*(_DWORD *)(a2 + 240);
        int v51 = -*(_DWORD *)(a2 + 244);
        int v26 = -*(_DWORD *)(a2 + 248);
      }

      else
      {
        int v14 = 0;
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = v15 + 8;
        uint64_t v17 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v16) {
            v14 += *(_DWORD *)(**(void **)(*(void *)v16 + 8LL) + 248LL);
          }
          v16 += 32LL;
          --v17;
        }

        while (v17);
        int v18 = 0;
        uint64_t v19 = v15 + 8;
        uint64_t v20 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v19) {
            v18 += *(_DWORD *)(**(void **)(*(void *)v19 + 8LL) + 252LL);
          }
          v19 += 32LL;
          --v20;
        }

        while (v20);
        int v21 = 0;
        uint64_t v22 = v15 + 8;
        uint64_t v23 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v22) {
            v21 += *(_DWORD *)(**(void **)(*(void *)v22 + 8LL) + 256LL);
          }
          v22 += 32LL;
          --v23;
        }

        while (v23);
        int v24 = 0;
        uint64_t v25 = v15 + 8;
        do
        {
          if (*(void *)v25) {
            v24 += *(_DWORD *)(**(void **)(*(void *)v25 + 8LL) + 260LL);
          }
          v25 += 32LL;
          --v13;
        }

        while (v13);
        int v52 = v14 - *(_DWORD *)(a2 + 240);
        int v51 = v18 - *(_DWORD *)(a2 + 244);
        int v26 = v21 - *(_DWORD *)(a2 + 248);
      }

      int v50 = v26;
      int v27 = *(_DWORD *)(a2 + 252);
      int v57 = v24 - v27;
      int v59 = v12;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 0LL;
        goto LABEL_34;
      }

      if (*(_DWORD *)(a2 + 52)) {
        goto LABEL_28;
      }
      int v28 = 0LL;
      if ((*(_WORD *)(a2 + 268) & 0x40) != 0 && v10 >= 1)
      {
        if (v58 <= 4 * v10 || strstr(v6, "/*scan*/") || v58 < 101)
        {
          if (v55 < 101)
          {
            if (v54 < 101 || strstr(v6, "/*sort*/") || strstr(v6, "/*scan*/"))
            {
LABEL_28:
              int v28 = 0LL;
              goto LABEL_29;
            }

            if (strlen(v6) >= 0x81)
            {
              uint64_t v48 = strndup(v6, 0x80uLL);
              int v28 = v48;
              if (v48)
              {
                *(_WORD *)(v48 + 125) = 11822;
                v48[127] = 46;
                double v6 = v48;
              }
            }

            else
            {
              int v28 = 0LL;
            }

            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)BOOL v61 = v6;
              uint64_t v44 = "sort without index in [%s]";
              uint64_t v45 = v4;
              uint32_t v46 = 12;
              goto LABEL_113;
            }
          }

          else
          {
            if (strlen(v6) >= 0x81)
            {
              int v43 = strndup(v6, 0x80uLL);
              int v28 = v43;
              if (v43)
              {
                *(_WORD *)(v43 + 125) = 11822;
                v43[127] = 46;
                double v6 = v43;
              }
            }

            else
            {
              int v28 = 0LL;
            }

            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)BOOL v61 = v55;
              *(_WORD *)&v61[4] = 2080;
              *(void *)&v61[6] = v6;
              uint64_t v44 = "%d automatic index rows in [%s]";
              uint64_t v45 = v4;
              uint32_t v46 = 18;
LABEL_113:
              _os_log_impl(&dword_181266000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
            }
          }
        }

        else
        {
          if (strlen(v6) >= 0x81)
          {
            int v47 = strndup(v6, 0x80uLL);
            int v28 = v47;
            if (v47)
            {
              *(_WORD *)(v47 + 125) = 11822;
              v47[127] = 46;
              double v6 = v47;
            }
          }

          else
          {
            int v28 = 0LL;
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)BOOL v61 = v58;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = v10;
            *(_WORD *)&v61[10] = 2080;
            *(void *)&v61[12] = v6;
            uint64_t v44 = "%d scan steps for %d row steps in [%s]";
            uint64_t v45 = v4;
            uint32_t v46 = 24;
            goto LABEL_113;
          }
        }
      }

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(97074);
    return 0LL;
  }

  int v2 = *((unsigned __int16 *)a1 + 10);
  if ((v2 & 0x12) != 0)
  {
    int v3 = *((_DWORD *)a1 + 4);
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    signed int v4 = *(_DWORD *)a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*(_DWORD *)a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_10;
      }
      signed int v4 = 1;
    }

    if (!sub_18128FAF0((uint64_t)a1, v4, 1))
    {
      bzero((void *)(*((void *)a1 + 1) + *((int *)a1 + 4)), *(int *)a1);
      int v3 = *((_DWORD *)a1 + 4) + *(_DWORD *)a1;
      *((_DWORD *)a1 + 4) = v3;
      LOWORD(v2) = *((_WORD *)a1 + 10) & 0xF9FF;
LABEL_10:
      *((_WORD *)a1 + 10) = v2 | 0x10;
      if (!v3) {
        return 0LL;
      }
      return (const void *)*((void *)a1 + 1);
    }

    return 0LL;
  }

  if ((~v2 & 0x202) == 0 && *((_BYTE *)a1 + 22) == 1) {
    return (const void *)*((void *)a1 + 1);
  }
  if ((v2 & 1) != 0) {
    return 0LL;
  }
  return (const void *)sub_181303998((int *)a1, 1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(91138);
    return 0;
  }

  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) == 0 || *((_BYTE *)a1 + 22) != 1)
  {
    if ((v1 & 0x10) != 0)
    {
      int v2 = *((_DWORD *)a1 + 4);
      if ((*((_WORD *)a1 + 10) & 0x400) != 0) {
        v2 += *(_DWORD *)a1;
      }
      return v2;
    }

    if ((v1 & 1) == 0) {
      return sub_181303970((uint64_t)a1, 1);
    }
    return 0;
  }

  return *((_DWORD *)a1 + 4);
}

int sqlite3_value_bytes16(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(91138);
    return 0;
  }

  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) == 0 || *((_BYTE *)a1 + 22) == 1)
  {
    if ((v1 & 0x10) != 0)
    {
      int v2 = *((_DWORD *)a1 + 4);
      if ((*((_WORD *)a1 + 10) & 0x400) != 0) {
        v2 += *(_DWORD *)a1;
      }
      return v2;
    }

    if ((v1 & 1) == 0) {
      return sub_181303970((uint64_t)a1, 2);
    }
    return 0;
  }

  return *((_DWORD *)a1 + 4);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(89752);
    return 0.0;
  }

  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 8) != 0) {
    return *(double *)a1;
  }
  if ((v1 & 0x24) != 0) {
    return (double)*(uint64_t *)a1;
  }
  if ((v1 & 0x12) == 0) {
    return 0.0;
  }
  return sub_181303DB8((uint64_t)a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(89717);
    return 0LL;
  }

  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0) {
    return *(void *)a1;
  }
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *((void *)a1 + 1)) {
      return sub_181303DF0((uint64_t)a1);
    }
    return 0LL;
  }

  double v3 = *(double *)a1;
  if (v3 <= 9.22337204e18) {
    return (uint64_t)v3;
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

unsigned int sqlite3_value_subtype(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x800) != 0) {
      return *((unsigned __int8 *)a1 + 23);
    }
  }

  else
  {
    sub_1812CF36C(97108);
  }

  return 0;
}

void *__cdecl sqlite3_value_pointer(sqlite3_value *a1, const char *a2)
{
  if (!a1)
  {
    sub_1812CF36C(97118);
    return 0LL;
  }

  uint64_t result = 0LL;
  if (a2 && (*((_WORD *)a1 + 10) & 0xFBF) == 0xA01)
  {
    return 0LL;
  }

  return result;
}

const void *__cdecl sqlite3_value_text16(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 2)
    {
      if ((v1 & 1) != 0) {
        return 0LL;
      }
      else {
        return (const void *)sub_181303998((int *)result, 2);
      }
    }

    else
    {
      return (const void *)*((void *)result + 1);
    }
  }

  return result;
}

const void *__cdecl sqlite3_value_text16be(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 3)
    {
      if ((v1 & 1) != 0) {
        return 0LL;
      }
      else {
        return (const void *)sub_181303998((int *)result, 3);
      }
    }

    else
    {
      return (const void *)*((void *)result + 1);
    }
  }

  return result;
}

const void *__cdecl sqlite3_value_text16le(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 2)
    {
      if ((v1 & 1) != 0) {
        return 0LL;
      }
      else {
        return (const void *)sub_181303998((int *)result, 2);
      }
    }

    else
    {
      return (const void *)*((void *)result + 1);
    }
  }

  return result;
}

int sqlite3_value_type(sqlite3_value *a1)
{
  if (a1) {
    return byte_1813C6455[*((_WORD *)a1 + 10) & 0x3F];
  }
  sub_1812CF36C(97220);
  return 0;
}

uint64_t sqlite3_value_encoding(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 22);
  }
  sub_1812CF36C(97244);
  return 0LL;
}

int sqlite3_value_nochange(sqlite3_value *a1)
{
  if (a1) {
    return (~*((unsigned __int16 *)a1 + 10) & 0x401) == 0;
  }
  sub_1812CF36C(97255);
  return 0;
}

int sqlite3_value_frombind(sqlite3_value *a1)
{
  if (a1) {
    return (*((unsigned __int16 *)a1 + 10) >> 6) & 1;
  }
  sub_1812CF36C(97266);
  return 0;
}

sqlite3_value *__cdecl sqlite3_value_dup(const sqlite3_value *a1)
{
  if (!a1 || sqlite3_initialize()) {
    return 0LL;
  }
  uint64_t v4 = sub_18126F0AC(64LL);
  uint64_t v2 = v4;
  if (!v4) {
    return (sqlite3_value *)v2;
  }
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  uint64_t v5 = *((void *)a1 + 2);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = 0LL;
  *(_WORD *)(v4 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000LL) != 0)
  {
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0x8FFF | 0x4000;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0 || *(_DWORD *)(v2 + 32)) {
      sub_181303838(v2);
    }
    sub_1812F20DC(*(void **)(v2 + 24), (void *)v2);
    return 0LL;
  }

  if ((v5 & 0x100000000LL) != 0) {
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0xE5FF;
  }
  return (sqlite3_value *)v2;
}

uint64_t sub_1812D7910(int *a1)
{
  __int16 v2 = *((_WORD *)a1 + 10);
  if ((v2 & 0x12) == 0) {
    goto LABEL_14;
  }
  if ((a1[5] & 0x400) != 0)
  {
    int v3 = a1[4];
    signed int v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_10;
      }
      signed int v4 = 1;
    }

    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    __int16 v2 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v2;
  }

void *sub_1812D79D4(void *result)
{
  if (result)
  {
    int v1 = result;
    if ((*((_WORD *)result + 10) & 0x9000) != 0 || *((_DWORD *)result + 8)) {
      sub_181303838((uint64_t)result);
    }
    return sub_1812F20DC((void *)v1[3], v1);
  }

  return result;
}

void sqlite3_value_free(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x9000) != 0 || *((_DWORD *)a1 + 8)) {
      sub_181303838((uint64_t)a1);
    }
    sub_1812F20DC(*((void **)a1 + 3), a1);
  }

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (!a1 || a3 < 0) {
    sub_1812CF36C(97366);
  }
  else {
    sub_1812D7A8C((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
  }
}

void sub_1812D7A8C(uint64_t a1, char *a2, int a3, unsigned int a4, uint64_t (*a5)(uint64_t result))
{
  uint64_t v6 = *(void *)a1;
  int v7 = sub_181269368(*(void *)a1, a2, a3, a4, a5);
  if (v7)
  {
    if (v7 != 18)
    {
      sqlite3_result_error_nomem((sqlite3_context *)a1);
      return;
    }

    goto LABEL_12;
  }

  int v8 = *(unsigned __int8 *)(a1 + 40);
  __int16 v9 = *(_WORD *)(v6 + 20);
  if ((v9 & 2) != 0)
  {
    if (*(unsigned __int8 *)(v6 + 22) != v8)
    {
      sub_1812C23E8((int *)v6, v8);
      __int16 v9 = *(_WORD *)(v6 + 20);
    }
  }

  else
  {
    *(_BYTE *)(v6 + 22) = v8;
  }

  if ((v9 & 0x12) != 0)
  {
    int v10 = *(_DWORD *)(v6 + 16);
    if ((v9 & 0x400) != 0) {
      v10 += *(_DWORD *)v6;
    }
    if (v10 > *(_DWORD *)(*(void *)(v6 + 24) + 136LL))
    {
LABEL_12:
      *(_DWORD *)(a1 + 36) = 18;
      sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
    }
  }

void sqlite3_result_blob64(sqlite3_context *a1, const void *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    if (a3 >> 31)
    {
      *((_DWORD *)a1 + 9) = 18;
      sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
    }

    else
    {
      sub_1812D7A8C((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
    }
  }

  else
  {
    sub_1812CF36C(97382);
  }

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  if (a1)
  {
    int v3 = *(int **)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0) {
      sub_181303888(*(int **)a1);
    }
    else {
      *((_WORD *)v3 + 10) = 1;
    }
    *(double *)int v3 = a2;
    *((_WORD *)v3 + 10) = 8;
  }

  else
  {
    sub_1812CF36C(97397);
  }

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_181269368(*(void *)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  else
  {
    sub_1812CF36C(97407);
  }

void sqlite3_result_error16(sqlite3_context *a1, const void *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_181269368(*(void *)a1, (char *)a2, a3, 2u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  else
  {
    sub_1812CF36C(97419);
  }

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v2, a2);
    }

    else
    {
      *(void *)uint64_t v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }

  else
  {
    sub_1812CF36C(97441);
  }

void sqlite3_result_null(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)a1;
    if ((*(_WORD *)(v1 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v1);
    }
    else {
      *(_WORD *)(v1 + 20) = 1;
    }
  }

  else
  {
    sub_1812CF36C(97451);
  }

void sqlite3_result_pointer(sqlite3_context *a1, void *a2, const char *a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    uint64_t v7 = *(void *)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0 || *(_DWORD *)(v7 + 32)) {
      sub_181303838(*(void *)a1);
    }
    *(_WORD *)(v7 + 20) = 1;
    sub_181303838(v7);
    int v8 = &byte_1813CEAEE;
    if (a3) {
      int v8 = a3;
    }
    *(void *)uint64_t v7 = v8;
    *(void *)(v7 + 8) = a2;
    *(_WORD *)(v7 + 20) = 6657;
    *(_BYTE *)(v7 + 23) = 112;
    *(_BYTE *)(v7 + 56) = 0;
    __int16 v9 = (void (__cdecl *)(void *))nullsub_7;
    if (a4) {
      __int16 v9 = a4;
    }
    *(void *)(v7 + 48) = v9;
  }

  else
  {
    sub_1812CF36C(97467);
  }

void sqlite3_result_subtype(sqlite3_context *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    *(_BYTE *)(v2 + 23) = a2;
    *(_WORD *)(v2 + 20) |= 0x800u;
  }

  else
  {
    sub_1812CF36C(97481);
  }

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1812D7A8C((uint64_t)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1812CF36C(97498);
  }
}

void sqlite3_result_text64( sqlite3_context *a1, const char *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *), unsigned __int8 encoding)
{
  if (!a1)
  {
    sub_1812CF36C(97514);
    return;
  }

  if (encoding != 1) {
    a3 &= ~1uLL;
  }
  if (a3 >> 31)
  {
    *((_DWORD *)a1 + 9) = 18;
    sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
    return;
  }

  if (encoding == 4) {
    unsigned int v7 = 2;
  }
  else {
    unsigned int v7 = encoding;
  }
  sub_1812D7A8C((uint64_t)a1, (char *)a2, a3, v7, (uint64_t (*)(uint64_t))a4);
  uint64_t v8 = *(void *)a1;
  if ((*(_WORD *)(v8 + 20) & 0x6202) == 2 && *(_BYTE *)(v8 + 22) == 1)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      if ((*(_WORD *)(v8 + 20) & 0x1000) == 0)
      {
        int v10 = *(_DWORD *)(v8 + 16);
        if (*(_DWORD *)(v8 + 32) <= v10) {
          return;
        }
        goto LABEL_24;
      }

      int v11 = *(void (__cdecl **)(void *))(v8 + 48);
      if (v11 == sqlite3_free)
      {
        unsigned int v12 = off_18C4653B8(v9);
        int v10 = *(_DWORD *)(v8 + 16);
        if (v12 >= v10 + 1)
        {
          uint64_t v9 = *(void *)(v8 + 8);
LABEL_24:
          *(_BYTE *)(v9 + v10) = 0;
LABEL_25:
          *(_WORD *)(v8 + 20) |= 0x200u;
          return;
        }

        int v11 = *(void (__cdecl **)(void *))(v8 + 48);
      }

      goto LABEL_25;
    }
  }

void sqlite3_result_text16(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1812D7A8C((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1812CF36C(97540);
  }
}

void sqlite3_result_text16be(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1812D7A8C((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 3u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1812CF36C(97555);
  }
}

void sqlite3_result_text16le(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1812D7A8C((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1812CF36C(97570);
  }
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
  if (a1)
  {
    signed int v4 = *(int **)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0) {
      sub_181303888(*(int **)a1);
    }
    __int128 v5 = *(_OWORD *)a2;
    uint64_t v6 = *((void *)a2 + 2);
    *((void *)v4 + 2) = v6;
    *(_OWORD *)signed int v4 = v5;
    LOWORD(v6) = WORD2(v6) & 0xEFFF;
    *((_WORD *)v4 + 10) = WORD2(v6) & 0xEFFF;
    if ((v6 & 0x1200000000LL) != 0 && (*((_WORD *)a2 + 10) & 0x2000) == 0)
    {
      *((_WORD *)v4 + 10) = WORD2(v6) & 0xAFFF | 0x4000;
      sub_1812D7910(v4);
      LOWORD(v6) = *((_WORD *)v4 + 10);
    }

    int v7 = *((unsigned __int8 *)a1 + 40);
    if ((v6 & 2) != 0)
    {
      if (*((unsigned __int8 *)v4 + 22) != v7)
      {
        sub_1812C23E8(v4, v7);
        LOWORD(v6) = *((_WORD *)v4 + 10);
      }
    }

    else
    {
      *((_BYTE *)v4 + 22) = v7;
    }

    if ((v6 & 0x12) != 0)
    {
      int v8 = v4[4];
      if ((v6 & 0x400) != 0) {
        v8 += *v4;
      }
      if (v8 > *(_DWORD *)(*((void *)v4 + 3) + 136LL))
      {
        *((_DWORD *)a1 + 9) = 18;
        sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
      }
    }
  }

  else
  {
    sub_1812CF36C(97582);
  }

uint64_t sub_1812D80D8(uint64_t a1, __int128 *a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_181303888((int *)a1);
  }
  __int128 v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)a1 = v4;
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000LL) == 0 || (*((_WORD *)a2 + 10) & 0x2000) != 0) {
    return 0LL;
  }
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xAFFF | 0x4000;
  return sub_1812D7910((int *)a1);
}

void sqlite3_result_error_toobig(sqlite3_context *a1)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 18;
    sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
  }

  else
  {
    sub_1812CF36C(97638);
  }

void sqlite3_result_zeroblob(sqlite3_context *a1, int n)
{
  if (a1)
  {
    unsigned int v2 = n & ~(n >> 31);
    uint64_t v3 = *(void *)a1;
    if (*(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 136LL) >= v2)
    {
      if ((*(_WORD *)(v3 + 20) & 0x9000) != 0 || *(_DWORD *)(v3 + 32)) {
        sub_181303838(*(void *)a1);
      }
      *(_WORD *)(v3 + 20) = 1040;
      *(_DWORD *)(v3 + 16) = 0;
      *(_DWORD *)uint64_t v3 = v2;
      *(_BYTE *)(v3 + 22) = 1;
      *(void *)(v3 + 8) = 0LL;
    }

    else
    {
      *((_DWORD *)a1 + 9) = 18;
      sub_181269368(v3, "string or blob too big", -1LL, 1u, 0LL);
    }
  }

  else
  {
    sub_1812CF36C(97601);
  }

int sqlite3_result_zeroblob64(sqlite3_context *a1, sqlite3_uint64 n)
{
  if (!a1) {
    return sub_1812CF36C(97601);
  }
  int v2 = n;
  uint64_t v3 = *(void *)a1;
  if (*(int *)(*(void *)(*(void *)a1 + 24LL) + 136LL) >= n)
  {
    if ((*(_WORD *)(v3 + 20) & 0x9000) != 0 || *(_DWORD *)(v3 + 32)) {
      sub_181303838(*(void *)a1);
    }
    int v4 = 0;
    *(_WORD *)(v3 + 20) = 1040;
    *(_DWORD *)(v3 + 16) = 0;
    *(_DWORD *)uint64_t v3 = v2 & ~(v2 >> 31);
    *(_BYTE *)(v3 + 22) = 1;
    *(void *)(v3 + 8) = 0LL;
  }

  else
  {
    int v4 = 18;
    *((_DWORD *)a1 + 9) = 18;
    sub_181269368(v3, "string or blob too big", -1LL, 1u, 0LL);
  }

  return v4;
}

void sub_1812D82F8(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32)) {
    sub_181303838(a1);
  }
  *(_WORD *)(a1 + 20) = 1040;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2 & ~(a2 >> 31);
  *(_BYTE *)(a1 + 22) = 1;
  *(void *)(a1 + 8) = 0LL;
}

void sqlite3_result_error_code(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    if (a2) {
      int v2 = a2;
    }
    else {
      int v2 = -1;
    }
    *((_DWORD *)a1 + 9) = v2;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
    {
      switch(a2)
      {
        case 516:
          uint64_t v3 = "abort due to ROLLBACK";
          break;
        case 101:
          uint64_t v3 = "no more rows available";
          break;
        case 100:
          uint64_t v3 = "another row available";
          break;
        default:
          else {
            uint64_t v3 = off_189B6EC30[a2];
          }
          break;
      }

      sub_1812D7A8C((uint64_t)a1, v3, -1, 1u, 0LL);
    }
  }

  else
  {
    sub_1812CF36C(97620);
  }

void sqlite3_result_error_nomem(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v8 = *(void *)a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
    {
      sub_181303888((int *)v8);
      uint64_t v8 = *(void *)a1;
    }

    else
    {
      *(_WORD *)(v8 + 20) = 1;
    }

    *((_DWORD *)a1 + 9) = 7;
    uint64_t v9 = *(void *)(v8 + 24);
    if (!*(_BYTE *)(v9 + 103) && !*(_BYTE *)(v9 + 104))
    {
      *(_BYTE *)(v9 + 103) = 1;
      ++*(_DWORD *)(v9 + 432);
      *(_WORD *)(v9 + 436) = 0;
      uint64_t v10 = *(void *)(v9 + 344);
      if (v10)
      {
        sub_1812DC47C(v10, "out of memory", v1, v2, v3, v4, v5, v6, v12);
        for (uint64_t i = *(void *)(v9 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
  }

  else
  {
    sub_1812CF36C(97652);
  }

void sub_1812D84D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v9 = *(void *)(a1 + 344);
    if (v9)
    {
      sub_1812DC47C(v9, "out of memory", a3, a4, a5, a6, a7, a8, v11);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

uint64_t sub_1812D8564( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
  if (v10)
  {
    xmmword_18C465400(v10);
    uint64_t v9 = *(void *)a1;
    uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
    char v12 = *(unsigned __int8 **)(a1 + 320);
    if (v11)
    {
      xmmword_18C465410(v11);
      uint64_t v9 = *(void *)a1;
    }
  }

  else
  {
    char v12 = *(unsigned __int8 **)(a1 + 320);
  }

  uint64_t v13 = sub_18126DFE0(v9, v12, 0xFFFFFFFFLL, *(unsigned __int8 *)(a1 + 266), (unsigned __int16 *)a1, &__src, 0LL, a8);
  if ((_DWORD)v13)
  {
    uint64_t v20 = v13;
    if ((_DWORD)v13 == 7)
    {
      if (*(_BYTE *)(v9 + 103) || *(_BYTE *)(v9 + 104))
      {
        return 7LL;
      }

      else
      {
        *(_BYTE *)(v9 + 103) = 1;
        ++*(_DWORD *)(v9 + 432);
        *(_WORD *)(v9 + 436) = 0;
        uint64_t v30 = *(void *)(v9 + 344);
        uint64_t v20 = 7LL;
        if (v30)
        {
          sub_1812DC47C(v30, "out of memory", v14, v15, v16, v17, v18, v19, (char)__src);
          for (uint64_t i = *(void *)(v9 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
    }
  }

  else
  {
    int v21 = __src;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(__src, (const void *)a1, 0x198uLL);
    memcpy((void *)a1, __dst, 0x198uLL);
    __int128 v22 = *(_OWORD *)((char *)v21 + 8);
    *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v22;
    __int128 v23 = v21[20];
    v21[20] = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 320) = v23;
    *(_DWORD *)(a1 + 372) = *((_DWORD *)v21 + 93);
    *(_BYTE *)(a1 + 266) = *((_BYTE *)v21 + 266);
    __int128 v25 = *(_OWORD *)((char *)v21 + 280);
    __int128 v24 = *(_OWORD *)((char *)v21 + 296);
    *(_DWORD *)(a1 + 312) = *((_DWORD *)v21 + 78);
    *(_OWORD *)(a1 + 280) = v25;
    *(_OWORD *)(a1 + 296) = v24;
    ++*(_DWORD *)(a1 + 300);
    __int128 v26 = *(_OWORD *)((char *)v21 + 200);
    __int128 v27 = *(_OWORD *)((char *)v21 + 216);
    *(void *)(a1 + 232) = *((void *)v21 + 29);
    *(_OWORD *)(a1 + 216) = v27;
    *(_OWORD *)(a1 + 200) = v26;
    ++*(_DWORD *)(a1 + 220);
    sub_1812D9644((uint64_t)v21, (void *)a1);
    int v28 = (void **)__src;
    *((_DWORD *)__src + 13) = 0;
    if (*((_BYTE *)v28 + 267)) {
      sub_18127A3A0(v28);
    }
    sub_1812CFA64((uint64_t)v28);
    return 0LL;
  }

  return v20;
}

sqlite3 *__cdecl sqlite3_context_db_handle(sqlite3_context *a1)
{
  if (a1 && *(void *)a1) {
    return *(sqlite3 **)(*(void *)a1 + 24LL);
  }
  sub_1812CF36C(97953);
  return 0LL;
}

int sqlite3_vtab_nochange(sqlite3_context *a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      return (~*(unsigned __int16 *)(*(void *)a1 + 20LL) & 0x401) == 0;
    }
    int v2 = 97255;
  }

  else
  {
    int v2 = 97978;
  }

  sub_1812CF36C(v2);
  return 0;
}

int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1812D87EC((uint64_t)pVal, (uint64_t *)ppOut, 0);
}

uint64_t sub_1812D87EC(uint64_t a1, uint64_t *a2, int a3)
{
  if (!a2) {
    return sub_1812CF36C(98010);
  }
  *a2 = 0LL;
  if (!a1) {
    return 21LL;
  }
  if ((*(_WORD *)(a1 + 20) & 0x1000) != 0 && *(uint64_t (**)(uint64_t))(a1 + 48) == sub_1813086A8)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *v6;
    if (a3)
    {
      uint64_t v4 = sub_18129CF68(*v6);
      goto LABEL_11;
    }

    uint64_t v14 = sub_18129B700((unsigned __int8 *)*v6);
    if ((_DWORD)v14 != 16)
    {
      uint64_t v4 = v14;
      if ((_DWORD)v14) {
        goto LABEL_23;
      }
      while (1)
      {
        uint64_t v15 = *(void *)(v7 + 136);
        if (*(_BYTE *)(v15 + 8)) {
          break;
        }
        uint64_t v16 = sub_18129BA78( v7,  bswap32(*(_DWORD *)(*(void *)(v15 + 80)
        if ((_DWORD)v16)
        {
          uint64_t v4 = v16;
          goto LABEL_23;
        }
      }
    }

    uint64_t v4 = 0LL;
LABEL_23:
    if (*(_BYTE *)*v6) {
      return 101LL;
    }
LABEL_11:
    if ((_DWORD)v4) {
      return v4;
    }
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v8 = *v6;
    sub_1812FFFE4(*v6);
    unsigned int v9 = *(_DWORD *)(v8 + 64);
    uint64_t v10 = *v6;
    int v11 = *(unsigned __int16 *)(*v6 + 68);
    uint64_t v12 = *(void *)(*v6 + 56);
    int v13 = *(_DWORD *)(*(void *)(*v6 + 136) + 88LL) - v12;
    if (v11 > v13) {
      int v11 = v13 & ~(v13 >> 31);
    }
    *((void *)&v21 + 1) = *(void *)(*v6 + 56);
    if (v11 >= v9)
    {
      WORD2(v22) = 16400;
      LODWORD(v22) = v9;
    }

    else
    {
      uint64_t v4 = sub_1812A4B24(v10, 0, v9, (uint64_t)&v21);
      if ((_DWORD)v4)
      {
LABEL_33:
        return v4;
      }

      uint64_t v12 = *((void *)&v21 + 1);
    }

    uint64_t v17 = v6[1];
    if (*(char *)(v12 + 1) < 0)
    {
      uint64_t v19 = (sub_181304D90((char *)(v12 + 1), &v20) + 1);
      int v18 = v20;
    }

    else
    {
      int v18 = *(unsigned __int8 *)(v12 + 1);
      int v20 = v18;
      uint64_t v19 = 2LL;
    }

    sub_18129BF0C((char *)(v12 + v19), v18, v17);
    *(_BYTE *)(v17 + 22) = *(_BYTE *)(*(void *)(v17 + 24) + 100LL);
    if ((*(_BYTE *)(v17 + 21) & 0x40) != 0 && sub_1812D7910((int *)v17))
    {
      uint64_t v4 = 7LL;
    }

    else
    {
      uint64_t v4 = 0LL;
      *a2 = v17;
    }

    goto LABEL_33;
  }

  return 1LL;
}

int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1812D87EC((uint64_t)pVal, (uint64_t *)ppOut, 1);
}

void *sub_1812D8A04(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2 <= 0)
  {
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0) {
      sub_181303888(*(int **)(a1 + 16));
    }
    else {
      *(_WORD *)(v2 + 20) = 1;
    }
    uint64_t result = 0LL;
    *(void *)(v2 + 8) = 0LL;
  }

  else
  {
    if (*(_DWORD *)(v2 + 32) >= a2)
    {
      uint64_t result = *(void **)(v2 + 40);
      *(void *)(v2 + 8) = result;
    }

    else
    {
      sub_18128FAF0(*(void *)(a1 + 16), a2, 0);
      uint64_t result = *(void **)(v2 + 8);
    }

    *(_WORD *)(v2 + 20) = 0x8000;
    *(void *)uint64_t v2 = *(void *)(a1 + 8);
    if (result)
    {
      bzero(result, a2);
      return *(void **)(v2 + 8);
    }
  }

  return result;
}

void *__cdecl sqlite3_get_auxdata(sqlite3_context *a1, int N)
{
  if (!a1)
  {
    sub_1812CF36C(98151);
    return 0LL;
  }

  uint64_t v2 = *(void *)(*((void *)a1 + 3) + 384LL);
  if (!v2) {
    return 0LL;
  }
  while (*(_DWORD *)(v2 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v2 != *((_DWORD *)a1 + 8))
  {
    uint64_t v2 = *(void *)(v2 + 24);
    if (!v2) {
      return 0LL;
    }
  }

  return *(void **)(v2 + 8);
}

void sqlite3_set_auxdata(sqlite3_context *a1, int N, void *a3, void (__cdecl *a4)(void *))
{
  if (!a1)
  {
    sub_1812CF36C(98190);
    return;
  }

  uint64_t v7 = (uint64_t *)*((void *)a1 + 3);
  uint64_t v8 = v7[48];
  uint64_t v12 = a4;
  if (v8)
  {
    while (*(_DWORD *)(v8 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v8 != *((_DWORD *)a1 + 8))
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8) {
        goto LABEL_3;
      }
    }

    uint64_t v10 = *(void (**)(void))(v8 + 16);
    if (v10)
    {
      v10(*(void *)(v8 + 8));
      a4 = v12;
    }

    goto LABEL_16;
  }

LABEL_3:
  if (*v7) {
    uint64_t v9 = sub_1812F2264(*v7, 0x20uLL);
  }
  else {
    uint64_t v9 = sub_18126F0AC(32LL);
  }
  uint64_t v8 = v9;
  a4 = v12;
  if (v9)
  {
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    int v11 = *((_DWORD *)a1 + 9);
    *(_DWORD *)uint64_t v9 = *((_DWORD *)a1 + 8);
    *(_DWORD *)(v9 + 4) = N;
    *(void *)(v9 + 24) = v7[48];
    v7[48] = v9;
    if (!v11) {
      *((_DWORD *)a1 + 9) = -1;
    }
LABEL_16:
    *(void *)(v8 + 8) = a3;
    *(void *)(v8 + 16) = a4;
    return;
  }

  if (v12) {
    ((void (*)(void *))v12)(a3);
  }
}

    if (!v10) {
      continue;
    }
    break;
  }

  unint64_t v191 = v203;
  if (v203)
  {
    int v192 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_370;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v191);
    --qword_18C468B10;
    off_18C4653A8(v191);
    unint64_t v191 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v192 = &xmmword_18C465410;
LABEL_370:
      (*v192)(v191);
    }
  }

  return v207;
}
  }

    uint64_t v4 = v8 + v7 + 1;
  }

  while (v11[v7]);
}

  int v11 = *(void *)(a1 + 336);
  uint64_t v12 = v10[1];
  if (*(void *)v12)
  {
    ++*(void *)(v11 + 24);
    ++*(void *)(v12 + 56);
    *a3 = v12;
    if ((a4 & 1) != 0)
    {
LABEL_28:
      if (*(_DWORD *)(a1 + 192) == (_DWORD)a2)
      {
        __int128 v24 = sub_1812FBF50(69479);
        goto LABEL_30;
      }

      *(void *)(v12 + 40) = a1;
      if (!**(void **)(a1 + 72) || (a4 & 1) != 0 || *(_DWORD *)(a1 + 32) < a2)
      {
        if (*(_DWORD *)(a1 + 188) >= a2)
        {
          if ((a4 & 1) != 0)
          {
            if (off_18C550648) {
              ((void (*)(void))off_18C550648)();
            }
            __int128 v21 = sub_1812FBD40(a1, a2);
            if (off_18C550650) {
              off_18C550650(v21);
            }
          }

          bzero(*(void **)(v12 + 8), *(void *)(a1 + 200));
          return 0LL;
        }

        if (*(_DWORD *)(a1 + 32) >= a2)
        {
          uint64_t v8 = sub_1812F9F44(v12);
          __int128 v24 = 13LL;
          goto LABEL_55;
        }

        __int128 v24 = 13LL;
      }

      else
      {
        ++*(_DWORD *)(a1 + 252);
        ++*(_DWORD *)(a1 + 268);
        __int128 v24 = sub_18127F460(v12);
        if (!(_DWORD)v24) {
          return v24;
        }
      }

  *(_DWORD *)(a1 + 52) = 787;
  *(_BYTE *)(a1 + 264) = 2;
  sub_181302AB0((uint64_t *)a1, "FOREIGN KEY constraint failed", a3, a4, a5, a6, a7, a8, v10);
  else {
    return 787LL;
  }
}

  uint64_t v12 = (_BYTE *)a2[2];
  int v13 = *(_DWORD *)(v9 + 40);
  if (v13 < 1)
  {
LABEL_38:
    if (v10)
    {
      int v33 = *a1;
      BOOL v34 = *(_DWORD *)(*a1 + 40);
      if (v34 >= 1)
      {
        for (uint64_t i = 0LL; i < v34; ++i)
        {
          uint64_t v38 = *(void *)(v33 + 32) + 32 * i;
          if (*(void *)(v38 + 8))
          {
            if (v12)
            {
              uint64_t v39 = *(unsigned __int8 **)v38;
              for (uint64_t j = v12; ; ++j)
              {
                int v41 = *j;
                __int128 v42 = *v39;
                if ((_DWORD)v41 == (_DWORD)v42)
                {
                  if (!*j) {
                    break;
                  }
                }

                else if (byte_1813C6343[v41] != byte_1813C6343[v42])
                {
                  goto LABEL_45;
                }

                ++v39;
              }
            }

            if (a1[21]) {
              os_signpost_id_t v36 = a1[21];
            }
            else {
              os_signpost_id_t v36 = (uint64_t)a1;
            }
            uint64_t v37 = *(_DWORD *)(v36 + 124);
            if ((v37 & (1 << i)) == 0)
            {
              *(_DWORD *)(v36 + 124) = v37 | (1 << i);
              if (i == 1)
              {
                sub_1812FA2F0(v36);
                BOOL v34 = *(_DWORD *)(v33 + 40);
              }
            }
          }

      *(_BYTE *)(a3 + v5) = 65;
LABEL_4:
      ++v5;
    }

    while (v5 != v7);
  }

  return result;
}

      int v13 = *(void *)(v13 + 64);
    }

    while (v13);
  }

  *a1 = v17;
  return v11;
}

  *a2 = v5 + 1;
  return result;
}

int sqlite3_aggregate_count(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *((void *)a1 + 2);
    if (v1)
    {
      uint64_t v2 = *((void *)a1 + 1);
      if (v2)
      {
        if (*(void *)(v2 + 32)) {
          return *(_DWORD *)(v1 + 16);
        }
      }
    }
  }

  sub_1812CF36C(98243);
  return 0;
}

int sqlite3_column_bytes16(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v8 = *(void *)a1;
    *(_DWORD *)(v8 + 80) = 25;
    sub_1812FA264(v8, 25);
LABEL_9:
    uint64_t v6 = &qword_1813C6E90;
    __int16 v7 = 1;
    goto LABEL_13;
  }

  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) != 1)
  {
    int v9 = *((_DWORD *)v6 + 4);
    if (!a1) {
      return v9;
    }
    goto LABEL_20;
  }

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
LABEL_9:
    uint64_t v6 = &qword_1813C6E90;
    goto LABEL_11;
  }

  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  if ((*((_WORD *)v6 + 10) & 0x2000) != 0) {
    *((_WORD *)v6 + 10) = *((_WORD *)v6 + 10) & 0x9FFF | 0x4000;
  }
LABEL_11:
  if (a1)
  {
    uint64_t v8 = *(void *)a1;
    unsigned int v9 = *((_DWORD *)a1 + 13);
    if (v9 || (int v10 = *(unsigned __int8 *)(v8 + 103), *(_BYTE *)(v8 + 103)))
    {
      int v10 = sub_1813037C4(v8, v9);
      uint64_t v8 = *(void *)a1;
    }

    *((_DWORD *)a1 + 13) = v10;
    uint64_t v11 = *(void *)(v8 + 24);
    if (v11) {
      xmmword_18C465410(v11);
    }
  }

  return (sqlite3_value *)v6;
}

char *sub_1812D8E78(uint64_t *a1, unsigned int a2, int a3, int a4)
{
  if (!a1)
  {
    sub_1812CF36C(98497);
    return 0LL;
  }

  if ((a2 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 24);
  if (v9) {
    xmmword_18C465400(v9);
  }
  int v10 = (*((unsigned __int16 *)a1 + 134) >> 2) & 3;
  if (v10)
  {
    if (a4 <= 0)
    {
      unsigned int v11 = v10 == 1 ? 8 : 4;
      if (v11 > a2)
      {
        uint64_t v12 = a2 + 8 * v10 - 8;
        if (a3)
        {
          uint64_t v13 = (char *)&unk_1813C6E16 + 2 * byte_1813C6E0A[v12];
          uint64_t v14 = *(void *)(v8 + 24);
          if (!v14) {
            return v13;
          }
        }

        else
        {
          uint64_t v13 = off_189B6DBC8[v12];
          uint64_t v14 = *(void *)(v8 + 24);
          if (!v14) {
            return v13;
          }
        }

        goto LABEL_37;
      }
    }

    goto LABEL_35;
  }

  unsigned int v15 = *((unsigned __int16 *)a1 + 130);
  if (v15 > a2)
  {
    unsigned int v16 = *(unsigned __int8 *)(v8 + 103);
    uint64_t v17 = a2 + v15 * a4;
    uint64_t v18 = a1[19];
    if (a3)
    {
      if (!v18) {
        goto LABEL_32;
      }
      uint64_t v19 = v18 + (v17 << 6);
      int v20 = *(unsigned __int16 *)(v19 + 20);
      if ((~v20 & 0x202) != 0 || *(_BYTE *)(v19 + 22) != 2)
      {
        if ((v20 & 1) == 0)
        {
          int v21 = 2;
LABEL_31:
          uint64_t v13 = (char *)sub_181303998((int *)(v18 + (v17 << 6)), v21);
          goto LABEL_33;
        }

        goto LABEL_32;
      }
    }

    else
    {
      if (!v18) {
        goto LABEL_32;
      }
      uint64_t v22 = v18 + (v17 << 6);
      int v23 = *(unsigned __int16 *)(v22 + 20);
      if ((~v23 & 0x202) != 0 || *(_BYTE *)(v22 + 22) != 1)
      {
        if ((v23 & 1) == 0)
        {
          int v21 = 1;
          goto LABEL_31;
        }

LABEL_32:
        uint64_t v13 = 0LL;
        goto LABEL_33;
      }
    }

    uint64_t v13 = *(char **)(v18 + (v17 << 6) + 8);
LABEL_33:
    int v24 = *(_DWORD *)(v8 + 220);
    if (!v24)
    {
      *(_BYTE *)(v8 + 103) = 0;
      *(_DWORD *)(v8 + 424) = 0;
      int v26 = *(_DWORD *)(v8 + 432) - 1;
      *(_DWORD *)(v8 + 432) = v26;
      if (!v26) {
        LOWORD(v24) = *(_WORD *)(v8 + 438);
      }
      uint64_t v13 = 0LL;
      *(_WORD *)(v8 + 436) = v24;
      uint64_t v14 = *(void *)(v8 + 24);
      if (v14) {
        goto LABEL_37;
      }
      return v13;
    }
  }

  uint64_t v18 = sub_1813037C4(v10, v12);
  uint64_t v19 = *(void *)(v10 + 24);
  if (v19) {
LABEL_33:
  }
    xmmword_18C465410(v19);
  return v18;
}

  uint64_t v4 = "unknown error";
LABEL_9:
  uint64_t v5 = *((void *)a1 + 3);
  if (v5) {
    xmmword_18C465410(v5);
  }
  return v4;
}

                  uint64_t v6 = sqlite3_exec(*(sqlite3 **)v8, "BEGIN EXCLUSIVE", 0LL, 0LL, 0LL);
                  if ((_DWORD)v6) {
                    goto LABEL_5;
                  }
                  uint64_t v22 = sub_18126DFE0( *(void *)v8,  "PRAGMA main.journal_mode",  0xFFFFFFFFLL,  0LL,  0LL,  &pStmt,  0LL,  v21);
                  if ((_DWORD)v22)
                  {
                    uint64_t v6 = v22;
                    goto LABEL_5;
                  }

                  *(_DWORD *)(v8 + 8) = 0;
                  if (sqlite3_step(pStmt) != 100
                    || (int v23 = sqlite3_column_text(pStmt, 0)) == 0LL
                    || (int v24 = v23, strlen((const char *)v23) != 3))
                  {
LABEL_48:
                    uint64_t v6 = sqlite3_finalize(pStmt);
                    if (!(_DWORD)v6)
                    {
                      if (!*(_DWORD *)(v8 + 8))
                      {
                        uint64_t v6 = 0LL;
                        goto LABEL_6;
                      }

                      uint64_t v6 = sqlite3_exec(*(sqlite3 **)v8, "COMMIT", 0LL, 0LL, 0LL);
                      if (!(_DWORD)v6)
                      {
                        __int128 v27 = *(sqlite3 **)v8;
                        uint64_t v38 = 0LL;
                        pStmt = 0LL;
                        uint64_t v6 = sqlite3_file_control(v27, "main", 7, &pStmt);
                        if (!(_DWORD)v6)
                        {
                          int v28 = pStmt;
                          uint64_t v29 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(void *)pStmt + 112LL);
                          while (1)
                          {
                            uint64_t v30 = v29(v28, 2LL, 1LL, 10LL);
                            if ((_DWORD)v30 != 5) {
                              break;
                            }
                            if (v35)
                            {
                              LODWORD(v37) = v37 + 1;
                              if (v35(v36)) {
                                continue;
                              }
                            }

  if (qword_18C468CE0 != -1) {
    dispatch_once(&qword_18C468CE0, &unk_189B6D4E0);
  }
  if (v8 <= dword_18C468CD8) {
    int v10 = dword_18C468CD8;
  }
  else {
    int v10 = v8;
  }
  if ((_DWORD)v10 != (_DWORD)v6 && (int)v6 >= 1 && (int)v10 > (int)v6)
  {
    if (dword_18C468CD8 && dword_18C468CD8 >= v8) {
      sqlite3_log(28, "Environment override of cache_size %d -> %d");
    }
    else {
      sqlite3_log(27, "Overriding cache_size %d -> %d");
    }
    uint64_t v6 = v10;
  }

  *(_DWORD *)(v5 + 32) = v6;
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v13 = *(int *)(v5 + 44);
    else {
      uint64_t v6 = -1024LL * (int)v6 / (v13 + *(int *)(v5 + 40));
    }
  }

  uint64_t result = ((uint64_t (*)(void, uint64_t))*(&xmmword_18C465448 + 1))(*(void *)(v5 + 72), v6);
  *a2 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(a1 + 17))
  {
    unsigned int v15 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v15;
    if (!v15) {
      return sub_1812FDEFC(a1);
    }
  }

  return result;
}

    if (!sqlite3_initialize())
    {
      int v26 = sub_18126F0AC(v15 + 12);
      if (v26)
      {
        *(void *)int v26 = 1LL;
        int v20 = (char *)(v26 + 8);
        *(void *)uint64_t v19 = v26 + 8;
        uint64_t result = sub_1812BFD8C(*(void *)(a1 + 40), a4, v15, (char *)(v26 + 8), 0);
        if ((_DWORD)result) {
          return result;
        }
        __int128 v27 = &v20[v15];
        *(_WORD *)__int128 v27 = 0;
        v27[2] = 0;
        *((_DWORD *)v19 + 4) = a2;
        *((_DWORD *)v19 + 5) = a5;
        *((_DWORD *)v19 + 6) = a6;
        *((void *)v19 + 1) = sub_181308DBC(*(void **)(a1 + 40));
LABEL_37:
        ++*((void *)v20 - 1);
        if ((a3 & 1) == 0)
        {
          uint64_t result = sub_181269368(a7, v20, v15, 0, sub_181301F94);
          goto LABEL_13;
        }

        uint64_t result = sub_181269368(a7, v20, v15, v29, sub_181301F94);
LABEL_12:
        *(_WORD *)(a7 + 20) |= 0x200u;
LABEL_13:
        *(_WORD *)(a7 + 20) &= ~0x4000u;
        return result;
      }
    }

    *(void *)uint64_t v19 = 0LL;
    return 7LL;
  }

  uint64_t result = sub_1812A4B24(*(void *)(a1 + 40), a4, v15, a7);
  if (!(_DWORD)result)
  {
    sub_18129BF0C(*(char **)(a7 + 8), a3, a7);
    uint64_t result = 0LL;
    if ((a3 & 1) == 0 || v17 != 1) {
      goto LABEL_13;
    }
    uint64_t result = 0LL;
    *(_BYTE *)(*(void *)(a7 + 8) + v15) = 0;
    goto LABEL_12;
  }

  return result;
}

    v15 -= v19;
    int v23 = (_WORD)v15 - v6;
    *(_WORD *)int v10 = bswap32((_DWORD)v15 - v6) >> 16;
    v10 += 2;
    if (v15 < v10)
    {
      int v26 = 84391;
      return sub_1812FBF50(v26);
    }

    memmove(v15, v18, v19);
    if (++v14 >= v9)
    {
      *(_WORD *)(a4 + 24) = v27;
      *(_BYTE *)(a4 + 12) = 0;
      int v24 = v28 + v6;
      *(_WORD *)(v24 + 1) = 0;
      *(_BYTE *)(v24 + 3) = *(_BYTE *)(a4 + 25);
      *(_BYTE *)(v24 + 4) = *(_BYTE *)(a4 + 24);
      *(_BYTE *)(v28 + v6 + 5) = HIBYTE(v23);
      *(_WORD *)(v28 + v6 + 6) = v23;
      return 0LL;
    }

    if (v14 >= *v17)
    {
      uint64_t v13 = v30 + 1;
      goto LABEL_18;
    }
  }

  if (v20 <= v8)
  {
    uint64_t v18 = &v18[v31 - v6];
    goto LABEL_32;
  }

  int v26 = 84380;
  return sub_1812FBF50(v26);
}

  if (v8)
  {
LABEL_33:
    int v28 = *(void *)(v11 + 656);
    if (v28)
    {
      uint64_t v29 = *v8;
      if (*v8)
      {
        uint64_t v30 = 0;
        int v31 = (unsigned __int8 *)(v8 + 1);
        do
        {
          uint64_t v30 = -1640531535 * (v30 + byte_1813C6343[v29]);
          int v32 = *v31++;
          uint64_t v29 = v32;
        }

        while (v32);
      }

      else
      {
        uint64_t v30 = 0;
      }

      int v50 = (_DWORD *)(v28 + 16LL * (v30 % *(_DWORD *)(v11 + 640)));
      int v33 = (uint64_t *)(v50 + 2);
      BOOL v34 = *v50;
      if (v34)
      {
        while (1)
        {
LABEL_73:
          int v33 = (uint64_t *)*v33;
          int v51 = (_BYTE *)v33[3];
          for (uint64_t j = v8; ; ++j)
          {
            int v53 = *v51;
            int v54 = *j;
            if ((_DWORD)v53 != (_DWORD)v54) {
              break;
            }
            if (!*v51) {
              goto LABEL_42;
            }
LABEL_75:
            ++v51;
          }

          if (byte_1813C6343[v53] == byte_1813C6343[v54]) {
            goto LABEL_75;
          }
          if (!--v34)
          {
            int v33 = &qword_18C550660;
            goto LABEL_42;
          }
        }
      }
    }

    else
    {
      int v33 = (uint64_t *)(v11 + 648);
      BOOL v34 = *(_DWORD *)(v11 + 644);
      if (v34) {
        goto LABEL_73;
      }
    }

    int v33 = &qword_18C550660;
LABEL_42:
    int v35 = v33[2];
    if (v35)
    {
      os_signpost_id_t v36 = v35 + 40LL * a2;
      a3 = v36 - 40;
      if (v36 != 40) {
        goto LABEL_44;
      }
    }

  sub_1812F20DC((void *)a1, v6);
  return v13;
}

      if (++v22 >= v21) {
        goto LABEL_20;
      }
    }

    uint64_t v29 = (_BYTE **)sub_181289D04(a1, v25, v15, v16, v17, v18, v19, v20);
    if (!v29) {
      uint64_t v29 = *(_BYTE ***)(*(void *)a1 + 16LL);
    }
    uint64_t v30 = *v29;
    for (uint64_t j = v23; ; ++j)
    {
      int v32 = *v30;
      int v33 = *j;
      if ((_DWORD)v32 == (_DWORD)v33) {
        break;
      }
      if (byte_1813C6343[v32] != byte_1813C6343[v33])
      {
        int v21 = *a4;
        goto LABEL_32;
      }

      uint64_t i = v31;
      if (!*((void *)v8 + 7)) {
        break;
      }
    }

    uint64_t v8 = (unsigned __int8 *)*((void *)v8 + 4);
    if (!v8) {
      return 0LL;
    }
  }

  if (v31 || *((void *)v8 + 4)) {
    sqlite3_snprintf(16, v37, "%r ", (v31 + 1));
  }
  else {
    v37[0] = 0;
  }
  sub_1812DC47C( a1,  "%sON CONFLICT clause does not match any PRIMARY KEY or UNIQUE constraint",  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  (char)v37);
  return 1LL;
}

      ;
    }

    if (byte_1813C6343[v22] == byte_1813C6343[v23]) {
      goto LABEL_32;
    }
    if (!j)
    {
      int v24 = v17;
      for (m = "main"; ; ++m)
      {
        int v26 = *(unsigned __int8 *)m;
        __int128 v27 = *v24;
        if ((_DWORD)v26 == (_DWORD)v27)
        {
          if (!*m) {
            goto LABEL_44;
          }
        }

        else if (byte_1813C6343[v26] != byte_1813C6343[v27])
        {
          break;
        }

        ++v24;
      }
    }
  }

    if (*(_DWORD *)(v21 + 76) > v14) {
      uint64_t v14 = *(_DWORD *)(v21 + 76);
    }
    if (++v16 == 4) {
      goto LABEL_48;
    }
  }

  uint64_t v22 = *(void *)(a1 + 120);
  if (!v22) {
    goto LABEL_39;
  }
  int v23 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_38;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v22);
  --qword_18C468B10;
  off_18C4653A8(v22);
  uint64_t v22 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v23 = &xmmword_18C465410;
LABEL_38:
    (*v23)(v22);
  }

        a2[28] = 0;
        return result;
      }

      uint64_t v13 = &byte_1813CEAEE;
    }

    else
    {
      uint64_t v13 = (char *)*((void *)a2 + 12);
      uint64_t v14 = (uint64_t *)(v3 + 88);
    }

    unsigned int v15 = (uint64_t *)*v14;
    if (!sub_1812B2390(*v14, 1u))
    {
      if (v13)
      {
        unsigned int v16 = sub_181269368(v15[16] + 64, v13, v12, 0, 0LL);
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *v15;
          *(_DWORD *)(v18 + 80) = v17;
          sub_1812FA264(v18, v17);
          sub_1813037C4(*v15, v17);
        }
      }

      uint64_t v19 = *(void *)(*v15 + 24);
      if (v19) {
        xmmword_18C465410(v19);
      }
    }

    goto LABEL_23;
  }

  return result;
}

      sub_1812CF36C(97498);
      break;
    case 4:
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(int *)(a1 + 2108);
      goto LABEL_36;
    case 5:
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void *)(a1 + 2128);
      goto LABEL_36;
    case 6:
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void *)(a1 + 2120);
      goto LABEL_36;
    case 7:
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(int *)(a1 + 2112);
      goto LABEL_36;
    case 8:
      if (*(_BYTE *)(a1 + 17)) {
        return 0LL;
      }
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void *)(a1 + 2136);
      goto LABEL_36;
    case 9:
      if (!a2) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void *)(a1 + 2144);
      goto LABEL_36;
    case 10:
      if (a2)
      {
        if (*a2)
        {
          uint64_t v9 = *(void *)(*a2 + 24) + 32LL;
        }

        else
        {
          sub_1812CF36C(97953);
          uint64_t v9 = 32LL;
        }

        uint64_t v5 = *(char **)(*(void *)v9 + 32LL * *(int *)(a1 + 20));
LABEL_43:
        uint64_t v7 = (uint64_t)a2;
        uint64_t v8 = 0LL;
LABEL_44:
        sub_1812D7A8C(v7, v5, -1, 1u, (uint64_t (*)(uint64_t))v8);
      }

      else
      {
        sub_1812CF36C(97953);
        sub_1812CF36C(97498);
      }

      break;
    default:
      if (a2)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 17);
LABEL_36:
        int v10 = *a2;
        if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v10, v6);
        }

        else
        {
          *(void *)int v10 = v6;
          *(_WORD *)(v10 + 20) = 4;
        }
      }

      else
      {
        sub_1812CF36C(97431);
      }

      return 0LL;
  }

  return 0LL;
}

const void *__cdecl sqlite3_column_name16(sqlite3_stmt *a1, int N)
{
  return sub_1812D8E78((uint64_t *)a1, N, 1, 0);
}

const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 0, 1);
}

const void *__cdecl sqlite3_column_decltype16(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 1, 1);
}

const char *__cdecl sqlite3_column_database_name(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 0, 2);
}

const void *__cdecl sqlite3_column_database_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 1, 2);
}

const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 0, 3);
}

const void *__cdecl sqlite3_column_table_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 1, 3);
}

const char *__cdecl sqlite3_column_origin_name(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 0, 4);
}

const void *__cdecl sqlite3_column_origin_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1812D8E78((uint64_t *)a1, a2, 1, 4);
}

int sqlite3_bind_blob64( sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return sub_1812B2220((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, 0);
}

int sqlite3_bind_pointer(sqlite3_stmt *a1, int a2, void *a3, const char *a4, void (__cdecl *a5)(void *))
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v12 = *(void *)a1;
      if (*(void *)a1)
      {
        int v11 = 25;
        *(_DWORD *)(v12 + 80) = 25;
        sub_1812FA264(v12, 25);
        return v11;
      }

      sqlite3_log(21, "API called with finalized prepared statement", a3, a4, a5);
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3, a4, a5);
    }

    return 25;
  }

  uint64_t v9 = (a2 - 1);
  int v10 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if (v10)
  {
    int v11 = v10;
    if (a5) {
      ((void (*)(void *))a5)(a3);
    }
  }

  else
  {
    uint64_t v13 = *((void *)a1 + 16) + (v9 << 6);
    sub_181303838(v13);
    uint64_t v14 = &byte_1813CEAEE;
    if (a4) {
      uint64_t v14 = a4;
    }
    *(void *)uint64_t v13 = v14;
    *(void *)(v13 + 8) = a3;
    *(_WORD *)(v13 + 20) = 6657;
    *(_BYTE *)(v13 + 23) = 112;
    unsigned int v15 = (void (__cdecl *)(void *))nullsub_7;
    *(_BYTE *)(v13 + 56) = 0;
    if (a5) {
      unsigned int v15 = a5;
    }
    *(void *)(v13 + 48) = v15;
    uint64_t v16 = *(void *)(*(void *)a1 + 24LL);
    if (v16) {
      xmmword_18C465410(v16);
    }
    return 0;
  }

  return v11;
}

int sqlite3_bind_text64( sqlite3_stmt *a1, int a2, const char *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *), unsigned __int8 encoding)
{
  if (encoding == 4) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = encoding;
  }
  if (encoding != 1) {
    a4 &= ~1uLL;
  }
  return sub_1812B2220((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, v6);
}

int sqlite3_bind_value(sqlite3_stmt *a1, int a2, const sqlite3_value *a3)
{
  if (!a3)
  {
    sub_1812CF36C(97220);
LABEL_5:
    if (a2 > 0)
    {
      int v7 = sub_1812B2390((uint64_t)a1, a2 - 1);
      if (!v7)
      {
        uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
        if (v8) {
          xmmword_18C465410(v8);
        }
        return 0;
      }

      return v7;
    }

    if (a1)
    {
      uint64_t v9 = *(void *)a1;
      if (*(void *)a1)
      {
        int v7 = 25;
        *(_DWORD *)(v9 + 80) = 25;
        sub_1812FA264(v9, 25);
        return v7;
      }

      sqlite3_log(21, "API called with finalized prepared statement");
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }

    return 25;
  }

  __int16 v5 = *((_WORD *)a3 + 10);
  switch(byte_1813C6455[v5 & 0x3F])
  {
    case 1u:
      return sqlite3_bind_int64(a1, a2, *(void *)a3);
    case 2u:
      if ((v5 & 8) != 0) {
        double v10 = *(double *)a3;
      }
      else {
        double v10 = (double)*(uint64_t *)a3;
      }
      return sqlite3_bind_double(a1, a2, v10);
    case 3u:
      uint64_t v11 = *((int *)a3 + 4);
      unsigned int v12 = *((unsigned __int8 *)a3 + 22);
      uint64_t v13 = (char *)*((void *)a3 + 1);
      goto LABEL_19;
    case 4u:
      if ((*((_WORD *)a3 + 10) & 0x400) != 0)
      {
        int result = sqlite3_bind_zeroblob(a1, a2, *(_DWORD *)a3);
      }

      else
      {
        uint64_t v11 = *((unsigned int *)a3 + 4);
        if ((v11 & 0x80000000) != 0)
        {
          int result = sub_1812CF36C(98740);
        }

        else
        {
          uint64_t v13 = (char *)*((void *)a3 + 1);
          unsigned int v12 = 0;
LABEL_19:
          int result = sub_1812B2220( (uint64_t *)a1,  a2,  v13,  v11,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL,  v12);
        }
      }

      break;
    default:
      goto LABEL_5;
  }

  return result;
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1)
      {
        int v6 = 25;
        *(_DWORD *)(v11 + 80) = 25;
        sub_1812FA264(v11, 25);
        return v6;
      }

      sqlite3_log(21, "API called with finalized prepared statement", *(void *)&n);
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", *(void *)&n);
    }

    return 25;
  }

  uint64_t v5 = (a2 - 1);
  int v6 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    uint64_t v7 = *((void *)a1 + 16);
    uint64_t v8 = v7 + (v5 << 6);
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
      sub_181303838(v7 + (v5 << 6));
    }
    *(_WORD *)(v8 + 20) = 1040;
    uint64_t v9 = v7 + (v5 << 6);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)uint64_t v8 = n & ~(n >> 31);
    *(_BYTE *)(v9 + 22) = 1;
    *(void *)(v9 + 8) = 0LL;
    uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
    if (v10) {
      xmmword_18C465410(v10);
    }
    return 0;
  }

  return v6;
}

int sqlite3_bind_zeroblob64(sqlite3_stmt *a1, int a2, sqlite3_uint64 a3)
{
  if (!a1) {
    return sub_1812CF36C(98955);
  }
  uint64_t v6 = *(void *)a1;
  if (*(void *)(v6 + 24))
  {
    xmmword_18C465400(*(void *)(v6 + 24));
    uint64_t v6 = *(void *)a1;
  }

  if (*(int *)(v6 + 136) >= a3)
  {
    unsigned int v7 = sqlite3_bind_zeroblob(a1, a2, a3);
    uint64_t v6 = *(void *)a1;
    if (!v7 && !*(_BYTE *)(v6 + 103))
    {
      int v9 = 0;
      uint64_t v10 = *(void *)(v6 + 24);
      if (!v10) {
        return v9;
      }
      goto LABEL_12;
    }
  }

  else
  {
    unsigned int v7 = 18;
  }

  int v9 = sub_1813037C4(v6, v7);
  uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
  if (v10) {
LABEL_12:
  }
    xmmword_18C465410(v10);
  return v9;
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
    if (v2)
    {
      xmmword_18C465400(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
      LODWORD(v1) = *((_DWORD *)v1 + 8);
      if (v3) {
        xmmword_18C465410(v3);
      }
    }

    else
    {
      LODWORD(v1) = *((_DWORD *)v1 + 8);
    }
  }

  return (int)v1;
}

int sqlite3_transfer_bindings(sqlite3_stmt *a1, sqlite3_stmt *a2)
{
  if (!a1 || !a2) {
    return sub_1812CF36C(99049);
  }
  if (*((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8)) {
    return 1;
  }
  if (*((_DWORD *)a2 + 93)) {
    *((_WORD *)a2 + 134) = *((_WORD *)a2 + 134) & 0xFFFC | 1;
  }
  if (*((_DWORD *)a1 + 93)) {
    *((_WORD *)a1 + 134) = *((_WORD *)a1 + 134) & 0xFFFC | 1;
  }
  sub_1812D9644((uint64_t)a1, a2);
  return 0;
}

uint64_t sub_1812D9644(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*a2 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (*(int *)(a1 + 32) >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v11 = a2[16] + v5;
      uint64_t v12 = *(void *)(a1 + 128);
      if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32)) {
        sub_181303838(a2[16] + v5);
      }
      __int128 v7 = *(_OWORD *)(v12 + v5);
      __int128 v8 = *(_OWORD *)(v12 + v5 + 16);
      __int128 v9 = *(_OWORD *)(v12 + v5 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + v5 + 32);
      *(_OWORD *)(v11 + 48) = v9;
      *(_OWORD *)uint64_t v11 = v7;
      *(_OWORD *)(v11 + 16) = v8;
      uint64_t v10 = v12 + v5;
      *(_WORD *)(v10 + 20) = 1;
      *(_DWORD *)(v10 + 32) = 0;
      ++v6;
      v5 += 64LL;
    }

    while (v6 < *(int *)(a1 + 32));
  }

  uint64_t result = *(void *)(*a2 + 24LL);
  if (result) {
    return xmmword_18C465410(result);
  }
  return result;
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(sqlite3 **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  if (v3)
  {
    xmmword_18C465400(v3);
    uint64_t v2 = *(sqlite3 **)a1;
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    if (v4) {
      xmmword_18C465410(v4);
    }
  }

  return v2;
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 1;
  }
  uint64_t v2 = *(void *)(*(void *)pStmt + 24LL);
  if (!v2) {
    return (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  }
  xmmword_18C465400(v2);
  uint64_t v3 = *(void *)(*(void *)pStmt + 24LL);
  int v4 = (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  if (v3) {
    xmmword_18C465410(v3);
  }
  return v4;
}

int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
{
  uint64_t v1 = (unsigned __int16 *)pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)(*(void *)pStmt + 24LL);
    if (v2)
    {
      xmmword_18C465400(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
      LODWORD(v1) = (v1[134] >> 2) & 3;
      if (v3) {
        xmmword_18C465410(v3);
      }
    }

    else
    {
      LODWORD(v1) = (v1[134] >> 2) & 3;
    }
  }

  return (int)v1;
}

uint64_t sqlite3_stmt_explain( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return sub_1812CF36C(99111);
  }
  unsigned int v8 = a2;
  uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
  if (v10) {
    xmmword_18C465400(v10);
  }
  unsigned int v11 = *(unsigned __int16 *)(a1 + 268);
  if (((v11 >> 2) & 3) != v8)
  {
    if (v8 <= 2 && *(char *)(a1 + 266) < 0)
    {
      if (*(_BYTE *)(a1 + 267) == 1)
      {
        if (*(int *)(a1 + 36) >= 10 && (v8 != 2 || (v11 & 0x100) != 0))
        {
          uint64_t v12 = 0LL;
          unsigned int v17 = v11 & 0xFFFFFFF3 | (4 * (v8 & 3));
        }

        else
        {
          *(_WORD *)(a1 + 268) = v11 & 0xFFF3 | (4 * (v8 & 3));
          uint64_t v12 = sub_1812D8564(a1, a2, a3, a4, a5, a6, a7, a8);
          unsigned int v17 = *(_WORD *)(a1 + 268) & 0xFEFF | ((v8 == 2) << 8);
        }

        *(_WORD *)(a1 + 268) = v17;
        int v13 = (v17 >> 2) & 3;
        if (v13) {
          goto LABEL_6;
        }
      }

      else
      {
        uint64_t v12 = 5LL;
        int v13 = (v11 >> 2) & 3;
        if (v13) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      uint64_t v12 = 1LL;
      int v13 = (v11 >> 2) & 3;
      if (v13) {
        goto LABEL_6;
      }
    }

int sqlite3_stmt_busy(sqlite3_stmt *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1;
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
    if (v2)
    {
      xmmword_18C465400(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
      LODWORD(v1) = v1[267] == 2;
      if (v3) {
        xmmword_18C465410(v3);
      }
    }

    else
    {
      LODWORD(v1) = v1[267] == 2;
    }
  }

  return (int)v1;
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  if (!a1 || op != 99 && op >= 9)
  {
    sub_1812CF36C(99192);
    return 0;
  }

  __int128 v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
  if (op == 99)
  {
    if (v8) {
      xmmword_18C465400(v8);
    }
    int v11 = 0;
    v7[102] = &v11;
    v7[64] = v7[63];
    sub_1812CFA64((uint64_t)a1);
    v7[102] = 0LL;
    v7[64] = v7[65];
    uint64_t v9 = v7[3];
    if (!v9) {
      return v11;
    }
  }

  else
  {
    if (v8) {
      xmmword_18C465400(v8);
    }
    uint64_t v10 = (char *)a1 + 4 * op;
    int v11 = *((_DWORD *)v10 + 70);
    if (resetFlg) {
      *((_DWORD *)v10 + 70) = 0;
    }
    uint64_t v9 = *(void *)(*(void *)a1 + 24LL);
    if (!v9) {
      return v11;
    }
  }

  xmmword_18C465410(v9);
  return v11;
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  uint64_t v1 = (const char **)pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)(*(void *)pStmt + 24LL);
    if (v2)
    {
      xmmword_18C465400(v2);
      uint64_t v3 = *((void *)*v1 + 3);
      uint64_t v1 = (const char **)v1[40];
      if (v3) {
        xmmword_18C465410(v3);
      }
    }

    else
    {
      return v1[40];
    }
  }

  return (const char *)v1;
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0LL;
  }
  uint64_t v2 = *(void *)pStmt;
  uint64_t v3 = *(void *)(*(void *)pStmt + 24LL);
  if (v3 && (xmmword_18C465400(v3), v2 = *(void *)pStmt, (uint64_t v4 = *(void *)(*(void *)pStmt + 24LL)) != 0))
  {
    xmmword_18C465400(v4);
    uint64_t v2 = *(void *)pStmt;
    uint64_t v5 = *(void *)(*(void *)pStmt + 24LL);
    uint64_t v6 = (char *)*((void *)pStmt + 40);
    if (v5)
    {
      xmmword_18C465410(v5);
      uint64_t v2 = *(void *)pStmt;
    }
  }

  else
  {
    uint64_t v6 = (char *)*((void *)pStmt + 40);
  }

  if (v6)
  {
    uint64_t v7 = *(void *)(v2 + 24);
    if (v7) {
      xmmword_18C465400(v7);
    }
    uint64_t v6 = (char *)sub_1812D9C50(pStmt, v6);
    uint64_t v2 = *(void *)pStmt;
    uint64_t v8 = *(void *)(*(void *)pStmt + 24LL);
    if (v8)
    {
      xmmword_18C465410(v8);
      uint64_t v2 = *(void *)pStmt;
    }
  }

  uint64_t v9 = *(void *)(v2 + 24);
  if (v9) {
    xmmword_18C465410(v9);
  }
  return v6;
}

void *sub_1812D9C50(void *a1, char *__s)
{
  uint64_t v2 = __s;
  int v63 = 0;
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 136LL);
  int v57 = 0LL;
  int v58 = 0LL;
  unsigned int v59 = 0;
  int v60 = v4;
  unsigned int v61 = 0;
  __int16 v62 = 0;
  if (*(int *)(v3 + 220) < 2)
  {
    if (!*((_DWORD *)a1 + 8))
    {
      if (__s)
      {
        unsigned int v49 = strlen(__s) & 0x3FFFFFFF;
        if (v49) {
          sub_1812D3A10((uint64_t)&v57, v2, v49);
        }
      }

      goto LABEL_97;
    }

    if (!*__s) {
      goto LABEL_97;
    }
    int v12 = 1;
    while (1)
    {
      signed int v13 = 0;
      __int16 v14 = (unsigned __int8 *)v2;
      while (1)
      {
        int v15 = sub_18126F280(v14, &v64);
        int v16 = v15;
        if (v64 == 156) {
          break;
        }
        v13 += v15;
        v14 += v15;
        if (!*v14)
        {
          int v16 = 0;
          break;
        }
      }

      if (v13 <= 0)
      {
        if (v13) {
          sub_1812CF36C(32737);
        }
      }

      else
      {
        uint64_t v17 = v61;
        if (v61 + v13 >= v59)
        {
          sub_1812D3A10((uint64_t)&v57, v2, v13);
        }

        else
        {
          v61 += v13;
          memcpy((char *)v58 + v17, v2, v13);
        }
      }

      if (!v16) {
        goto LABEL_97;
      }
      uint64_t v18 = &v2[v13];
      if (*v18 == 63)
      {
        if (v16 < 2)
        {
          int v63 = v12;
          LODWORD(v19) = v12;
        }

        else
        {
          sub_18130DE18((unsigned __int8 *)v18 + 1, &v63);
          LODWORD(v19) = v63;
        }
      }

      else
      {
        uint64_t v20 = *(void *)(*a1 + 24LL);
        if (v20) {
          xmmword_18C465400(v20);
        }
        uint64_t v19 = a1[22];
        if (v19)
        {
          int v21 = *(_DWORD *)(v19 + 4);
          int v22 = 2;
          do
          {
            uint64_t v23 = v22;
            int v24 = (const char *)(v19 + 4LL * v22 + 8);
            if (!strncmp(v24, v18, v16) && !v24[v16])
            {
              LODWORD(v19) = *(_DWORD *)(v19 + 4 * v23);
              goto LABEL_45;
            }

            int v22 = *(_DWORD *)(v19 + 4 * v23 + 4) + v23;
          }

          while (v22 < v21);
          LODWORD(v19) = 0;
        }

const char *__cdecl sqlite3_normalized_sql(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0LL;
  }
  uint64_t v2 = (const char *)*((void *)pStmt + 41);
  if (v2) {
    return v2;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)pStmt + 40);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)pStmt;
  uint64_t v5 = *(void *)(*(void *)pStmt + 24LL);
  if (v5)
  {
    xmmword_18C465400(v5);
    uint64_t v4 = *(void *)pStmt;
    uint64_t v3 = (unsigned __int8 *)*((void *)pStmt + 40);
  }

  int v60 = -1;
  uint64_t v6 = (unsigned int *)&unk_18C54FA08;
  if (!sqlite3_initialize())
  {
    uint64_t v7 = sub_18126F0AC(32LL);
    if (v7)
    {
      uint64_t v6 = (unsigned int *)v7;
      if (v4) {
        int v8 = *(_DWORD *)(v4 + 136);
      }
      else {
        int v8 = 2147483645;
      }
      *(void *)uint64_t v7 = 0LL;
      *(void *)(v7 + 8) = 0LL;
      *(_DWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 20) = v8;
      *(_DWORD *)(v7 + 24) = 0;
      *(_WORD *)(v7 + 28) = 0;
    }

    else
    {
      uint64_t v6 = (unsigned int *)&unk_18C54FA08;
    }
  }

  int v10 = *v3;
  if (!*v3)
  {
LABEL_113:
    uint64_t v51 = v6[6];
    if ((int)v51 + 1 < v6[4])
    {
      v6[6] = v51 + 1;
      *(_BYTE *)(*((void *)v6 + 1) + v51) = 59;
      goto LABEL_115;
    }

    sub_1812D3A10((uint64_t)v6, ";", 1u);
LABEL_116:
    uint64_t v52 = *((void *)v6 + 1);
    if (v52 && (*(_BYTE *)(v52 + v6[6]) = 0, v6[5]) && (*((_BYTE *)v6 + 29) & 4) == 0) {
      uint64_t v2 = (const char *)sub_1812F24E0((uint64_t *)v6);
    }
    else {
      uint64_t v2 = (const char *)*((void *)v6 + 1);
    }
    uint64_t v53 = (void (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
      --qword_18C468B10;
      off_18C4653A8(v6);
      uint64_t v6 = (unsigned int *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_129;
      }
      uint64_t v53 = (void (**)(void *))&xmmword_18C465410;
    }

    (*v53)(v6);
    goto LABEL_129;
  }

  __int128 v55 = (void *)v4;
  int v11 = 0;
  int v12 = 0;
  int v58 = 0;
  int v56 = 0;
  int v13 = 0;
  int v14 = -1;
  int v15 = v3;
  int v57 = v3;
  do
  {
    if (*((_BYTE *)v6 + 28)) {
      break;
    }
    if (v14 != 183) {
      int v12 = v14;
    }
    int v16 = sub_18126F280(v15, &v60);
    int v14 = v60;
    if (v16 < 1) {
      break;
    }
    unsigned int v17 = v16;
    if (v60 > 116)
    {
      switch(v60)
      {
        case 117:
        case 153:
        case 154:
        case 155:
        case 156:
          goto LABEL_26;
        case 121:
          if (v12 == 45 || v12 == 19)
          {
            uint64_t v25 = v6[6];
            if ((int)v25 + 5 >= v6[4])
            {
              sub_1812D3A10((uint64_t)v6, " NULL", 5u);
            }

            else
            {
              v6[6] = v25 + 5;
              uint64_t v26 = *((void *)v6 + 1) + v25;
              *(_BYTE *)(v26 + 4) = 76;
              *(_DWORD *)uint64_t v26 = 1280658976;
            }

            goto LABEL_19;
          }

uint64_t sqlite3_preupdate_old(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 368);
  if (!v4 || *(_DWORD *)(v4 + 16) == 18)
  {
    unsigned int v5 = sub_1812CF36C(99305);
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }

  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(v4 + 128);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)(v9 + 96);
    if (!*(_WORD *)(v9 + 96))
    {
LABEL_12:
      unsigned int v5 = 25;
      *(_DWORD *)(a1 + 80) = 25;
      goto LABEL_4;
    }

    uint64_t v11 = 0LL;
    int v12 = *(unsigned __int16 **)(v9 + 8);
    uint64_t v13 = v10 << 16;
    while (1)
    {
      int v14 = *v12++;
      v11 += 0x10000LL;
      if (v13 == v11) {
        goto LABEL_12;
      }
    }

    unsigned int v8 = (int)v11 >> 16;
  }

  unsigned int v5 = 25;
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(v4 + 8);
  uint64_t v16 = *(void *)(v4 + 72);
  if (v16) {
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(v15 + 40);
  sub_1812FFFE4(v21);
  unsigned int v22 = *(_DWORD *)(v21 + 64);
  if (a1) {
    uint64_t v23 = (char *)sub_1812F2264(a1, *(unsigned int *)(v21 + 64));
  }
  else {
    uint64_t v23 = (char *)sub_18126F0AC(*(unsigned int *)(v21 + 64));
  }
  int v24 = v23;
  if (v23)
  {
    unsigned int v5 = sub_1812BFD8C(*(void *)(*(void *)(v4 + 8) + 40LL), 0, v22, v23, 0);
    if (!v5)
    {
      uint64_t v16 = sub_1812DAD3C(v4 + 32, v22, v24);
      *(void *)(v4 + 72) = v16;
      if (v16)
      {
        *(void *)(v4 + 24) = v24;
LABEL_17:
        uint64_t v17 = *(void *)(v16 + 8);
        uint64_t v18 = v17 + ((unint64_t)v8 << 6);
        *a3 = v18;
        uint64_t v19 = *(void *)(v4 + 120);
        if (v8 == *(__int16 *)(v19 + 52))
        {
          uint64_t v20 = *(void *)(v4 + 96);
          if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v18, v20);
          }

          else
          {
            *(void *)uint64_t v18 = v20;
            *(_WORD *)(v18 + 20) = 4;
          }
        }

        else if (v8 >= *(unsigned __int16 *)(*(void *)(v4 + 72) + 28LL))
        {
          *a3 = (uint64_t)&qword_1813C6E90;
        }

        else if (*(_BYTE *)(*(void *)(v19 + 8) + 16LL * v8 + 9) == 69 {
               && (*(_WORD *)(v17 + ((unint64_t)v8 << 6) + 20) & 0x24) != 0)
        }
        {
          sub_1812DADD4(v18);
        }

        goto LABEL_33;
      }

      unsigned int v5 = 7;
    }

    sub_1812F20DC((void *)a1, v24);
LABEL_31:
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }

uint64_t sub_1812DAD3C(uint64_t a1, unsigned int a2, char *a3)
{
  unint64_t v6 = (unint64_t)*(unsigned __int16 *)(a1 + 6) << 6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    uint64_t v8 = sub_18126F0AC(v6 + 104);
    if (!v8) {
      return v8;
    }
    goto LABEL_3;
  }

  uint64_t v8 = sub_1812F2264(v7, v6 + 104);
  if (v8)
  {
LABEL_3:
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 8) = v8 + 40;
    uint64_t v9 = *(unsigned __int16 *)(a1 + 6);
    *(_WORD *)(v8 + 28) = v9 + 1;
    bzero((void *)(v8 + 40), (v9 << 6) + 64);
    sub_1812AF9EC(a1, a2, a3, v8);
  }

  return v8;
}

void sub_1812DADD4(uint64_t a1)
{
  if (a1)
  {
    __int16 v2 = *(_WORD *)(a1 + 20);
    if ((v2 & 8) != 0)
    {
      double v3 = *(double *)a1;
    }

    else if ((v2 & 0x24) != 0)
    {
      double v3 = (double)*(uint64_t *)a1;
    }

    else if ((v2 & 0x12) != 0)
    {
      double v3 = sub_181303DB8(a1);
    }

    else
    {
      double v3 = 0.0;
    }
  }

  else
  {
    sub_1812CF36C(89752);
    double v3 = 0.0;
  }

  *(double *)a1 = v3;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 8;
}

uint64_t sqlite3_preupdate_count(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned __int16 *)(v1 + 38);
  }
  else {
    return 0LL;
  }
}

uint64_t sqlite3_preupdate_depth(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned int *)(*(void *)v1 + 368LL);
  }
  else {
    return 0LL;
  }
}

uint64_t sqlite3_preupdate_blobwrite(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned int *)(v1 + 92);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sqlite3_preupdate_new(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v4 = *(void *)(a1 + 368);
  if (!v4 || (int v5 = *(_DWORD *)(v4 + 16), v5 == 9))
  {
    unsigned int v6 = sub_1812CF36C(99407);
    *(_DWORD *)(a1 + 80) = v6;
    goto LABEL_47;
  }

  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(v4 + 128);
  if (v5 != 23 && v9 != 0)
  {
    uint64_t v11 = *(unsigned __int16 *)(v9 + 96);
    if (*(_WORD *)(v9 + 96))
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = *(unsigned __int16 **)(v9 + 8);
      uint64_t v14 = v11 << 16;
      while (1)
      {
        int v15 = *v13++;
        v12 += 0x10000LL;
        if (v14 == v12) {
          goto LABEL_12;
        }
      }

      unsigned int v8 = (int)v12 >> 16;
      unsigned int v6 = 25;
      goto LABEL_14;
    }

uint64_t sqlite3_stmt_scanstatus_v2(uint64_t a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v5 = 1LL;
  if (!a1 || !a5) {
    return v5;
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
  if (v11) {
    xmmword_18C465400(v11);
  }
  uint64_t v12 = *(void *)(a1 + 352);
  if (v12)
  {
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 8);
    }

    while (v12);
    uint64_t v14 = (unsigned __int8 **)(v13 + 16);
    int v15 = (unsigned int *)(v13 + 80);
  }

  else
  {
    uint64_t v14 = (unsigned __int8 **)(a1 + 136);
    int v15 = (unsigned int *)(a1 + 144);
  }

  uint64_t v16 = *v14;
  uint64_t v17 = *v15;
  if (a2 < 0)
  {
    if (a3 != 7) {
      goto LABEL_28;
    }
    if ((int)v17 < 1)
    {
      uint64_t v23 = 0LL;
    }

    else
    {
      if ((_DWORD)v17 == 1)
      {
        uint64_t v22 = 0LL;
        uint64_t v23 = 0LL;
      }

      else
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = 0LL;
        uint64_t v22 = v17 & 0xFFFFFFFE;
        int v30 = (uint64_t *)(v16 + 72);
        uint64_t v31 = v22;
        do
        {
          uint64_t v32 = *(v30 - 5);
          uint64_t v33 = *v30;
          v30 += 10;
          v28 += v32;
          v29 += v33;
          v31 -= 2LL;
        }

        while (v31);
        uint64_t v23 = v29 + v28;
        if (v22 == v17) {
          goto LABEL_37;
        }
      }

      uint64_t v34 = &v16[40 * v22 + 32];
      uint64_t v35 = v17 - v22;
      do
      {
        uint64_t v36 = *(void *)v34;
        v34 += 40;
        v23 += v36;
        --v35;
      }

      while (v35);
    }

LABEL_107:
            *a5 = v44;
LABEL_108:
            uint64_t v26 = 0LL;
            uint64_t v5 = 0LL;
LABEL_109:
            uint64_t v25 = *(void *)(*(void *)a1 + 24LL);
            if (!v25) {
              return v5;
            }
            goto LABEL_29;
          }

          uint64_t v44 = 0LL;
          goto LABEL_75;
        default:
          break;
      }
    }
  }

            int v68 = 0LL;
            uint64_t v66 = 0u;
            uint64_t v67 = 0u;
            memset(v65, 0, sizeof(v65));
            DWORD2(v66) = 1;
            else {
              uint64_t v16 = 0LL;
            }
            goto LABEL_23;
          case 109:
LABEL_98:
            uint64_t v45 = "unopened";
            break;
          default:
            uint64_t v45 = "invalid";
            break;
        }
      }

      else
      {
        uint64_t v45 = "NULL";
      }

      sqlite3_log(21, "API call with %s database connection pointer", v45);
      sub_1812CF36C(24492);
      goto LABEL_107;
    }

    BOOL v21 = *(_DWORD *)(a2 + 120);
    uint64_t v22 = *(char **)(a2 + 112);
    if (v77)
    {
      if (v20 <= -2)
      {
        sub_1812CF36C(35844);
        if (v19) {
          goto LABEL_74;
        }
        goto LABEL_27;
      }

      if (v22)
      {
        if (v20 == -1)
        {
          uint64_t v20 = -1;
          if (v19) {
            goto LABEL_74;
          }
          goto LABEL_27;
        }

        uint64_t v23 = v20 + 2;
        int v24 = v77;
        uint64_t v25 = *(_BYTE **)(a2 + 112);
        while (1)
        {
          uint64_t v26 = *v25;
          if (!*v25) {
            break;
          }
          LODWORD(v26) = byte_1813C6343[v26];
          uint64_t v27 = byte_1813C6343[*v24];
          if ((_DWORD)v26 != v27) {
            goto LABEL_44;
          }
          ++v25;
          ++v24;
        }

        uint64_t v27 = byte_1813C6343[*v24];
LABEL_44:
        if ((_DWORD)v26 == v27) {
          goto LABEL_73;
        }
      }
    }

    uint64_t v28 = sub_1813BC5F8(a1, *(_DWORD *)(a2 + 88), (uint64_t)v77, (uint64_t)&v69, a4, a5);
    if ((_DWORD)v28) {
      goto LABEL_91;
    }
    sub_1813BC898((uint64_t)&v69);
    uint64_t v29 = *((void *)&v71 + 1);
    if (*((void *)&v71 + 1))
    {
      int v30 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_52;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v29);
      --qword_18C468B10;
      off_18C4653A8(v29);
      uint64_t v29 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v30 = &xmmword_18C465410;
LABEL_52:
        (*v30)(v29);
      }
    }

    sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
    sqlite3_finalize((sqlite3_stmt *)v70);
    sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
    uint64_t v69 = (unint64_t)a1;
    uint64_t v70 = 0uLL;
    LODWORD(v71) = 0;
    *((void *)&v71 + 1) = 0LL;
    *(void *)&int v72 = 0LL;
    *((void *)&v73 + 1) = 0x100000000LL;
    BYTE8(v76) = 0;
    HIDWORD(v76) = 0;
    *((void *)&v74 + 1) = 0LL;
    *(void *)&uint64_t v75 = 0LL;
    if (!a3 || a3(a5, v22)) {
      break;
    }
    uint64_t v35 = (unsigned __int8 *)sqlite3_mprintf("%s", v22);
    uint64_t v77 = v35;
    if (!v35)
    {
      uint64_t v16 = 7LL;
      goto LABEL_21;
    }

    uint64_t v36 = v35;
    uint64_t v20 = strlen((const char *)v35);
    uint64_t v16 = 0LL;
    *((void *)&v71 + 1) = v36;
    uint64_t v19 = 1;
LABEL_28:
    if ((_DWORD)v16) {
      goto LABEL_21;
    }
  }

  uint64_t v31 = *(const void **)(a2 + 136);
  uint64_t v28 = sub_1812E8C64(0LL, a1, "main", v22, &v71, &v77, (void *)&v71 + 1, &v72, (BOOL *)&v76 + 3);
  if ((_DWORD)v28) {
    goto LABEL_91;
  }
  if ((int)v71 < 1)
  {
    uint64_t v33 = 0;
    if ((_DWORD)v71) {
      goto LABEL_61;
    }
    sqlite3_log(17, "sqlite3changeset_apply(): no such table: %s");
LABEL_70:
    uint64_t v19 = 1;
    goto LABEL_71;
  }

  uint64_t v32 = 0LL;
  uint64_t v33 = 0;
  do
  {
  }

  while (v71 != v32);
LABEL_61:
  if ((int)v71 < v21)
  {
    sqlite3_log(17, "sqlite3changeset_apply(): table %s has %d columns, expected %d or more");
    goto LABEL_70;
  }

  if (v21 < v33 || (uint64_t v37 = v72, memcmp((const void *)v72, v31, v21)))
  {
    sqlite3_log(17, "sqlite3changeset_apply(): primary key mismatch for table %s");
    goto LABEL_70;
  }

  LODWORD(v71) = v21;
  if (!v77)
  {
LABEL_85:
    uint64_t v28 = sub_1813BA5F4( (uint64_t)a1,  BYTE10(v76),  (uint64_t)"main",  v77,  SHIDWORD(v76),  v21,  *((uint64_t *)&v71 + 1),  v37,  (void *)&v70 + 1);
    if ((_DWORD)v28) {
      goto LABEL_91;
    }
    uint64_t v28 = sub_1813BCA98((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if ((_DWORD)v28) {
      goto LABEL_91;
    }
    uint64_t v28 = sub_1813BCDF4((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if ((_DWORD)v28) {
      goto LABEL_91;
    }
    uint64_t v19 = 0;
    DWORD2(v73) = 0;
LABEL_71:
    if (v77)
    {
      uint64_t v20 = strlen((const char *)v77) & 0x3FFFFFFF;
LABEL_73:
      if (v19) {
        goto LABEL_74;
      }
    }

    else
    {
      uint64_t v20 = 0;
      if (v19)
      {
LABEL_74:
        uint64_t v16 = 0LL;
        uint64_t v19 = 1;
        goto LABEL_28;
      }
    }

            sub_1812F20DC((void *)a1, (void *)v27);
            goto LABEL_108;
          }

          uint64_t v44 = *v34;
          if (!*v34) {
            goto LABEL_105;
          }
          *uint64_t v44 = 0LL;
          v44[1] = 0LL;
          v44[2] = 0LL;
          **(void **)(v27 + 16) = *(void *)a3;
          ++*(_DWORD *)(a3 + 16);
          *(_DWORD *)(v27 + 24) = 1;
          if (!v87)
          {
            *a5 = sub_18127F588( a1,  "vtable constructor did not declare schema: %s",  v35,  v36,  v37,  v38,  v39,  v40,  *(void *)a2);
            sub_18130163C((void *)v27);
            uint64_t v33 = 1LL;
            goto LABEL_108;
          }

          *(void *)(v27 + 40) = *(void *)(a2 + 80);
          *(void *)(a2 + 80) = v27;
          uint64_t v45 = *(__int16 *)(a2 + 54);
          if (v45 < 1)
          {
LABEL_105:
            uint64_t v33 = 0LL;
LABEL_108:
            sub_1812F20DC((void *)a1, v19);
            return v33;
          }

          uint64_t v46 = 0LL;
          uint64_t v47 = 0;
          uint64_t v48 = *(void *)(a2 + 8);
LABEL_40:
          uint64_t v49 = v48 + 16 * v46;
          if ((*(_WORD *)(v49 + 14) & 4) != 0)
          {
            uint64_t v51 = (char *)(*(void *)(v48 + 16 * v46) + strlen(*(const char **)(v48 + 16 * v46)) + 1);
          }

          else
          {
            uint64_t v50 = *(unsigned __int8 *)(v49 + 8);
            uint64_t v51 = &byte_1813CEAEE;
            if (v50 >= 0x10)
            {
              uint64_t v51 = off_18C54FFA0[(v50 >> 4) - 1];
              if (!v51)
              {
LABEL_38:
                *(_DWORD *)(a2 + 48) |= v47;
                goto LABEL_39;
              }
            }
          }

          uint64_t v52 = strlen(v51);
          uint64_t v53 = v52 & 0x3FFFFFFF;
          if ((v52 & 0x3FFFFFFF) == 0) {
            goto LABEL_38;
          }
          uint64_t v54 = v52 & 0x3FFFFFFF;
          if (!v51) {
            goto LABEL_60;
          }
          if ((*v51 & 0xDF) == 0x48)
          {
            uint64_t v55 = v51 + 1;
            if ((v51[1] & 0xDF) == 0x49)
            {
              uint64_t v55 = v51 + 2;
              if ((v51[2] & 0xDF) == 0x44 && (uint64_t v55 = v51 + 3, (v51[3] & 0xDF) == 0x44))
              {
                uint64_t v55 = v51 + 4;
                if ((v51[4] & 0xDF) == 0x45)
                {
                  uint64_t v55 = v51 + 5;
                  if ((v51[5] & 0xDF) == 0x4E) {
                    goto LABEL_58;
                  }
                  int v56 = 110;
                }

                else
                {
                  int v56 = 101;
                }
              }

              else
              {
                int v56 = 100;
              }
            }

            else
            {
              int v56 = 105;
            }
          }

          else
          {
            int v56 = 104;
            uint64_t v55 = v51;
          }

          if (v56 != byte_1813C6343[*v55])
          {
LABEL_60:
            if (v53 == 1) {
              goto LABEL_38;
            }
            int v60 = 0LL;
            uint64_t v61 = 1LL;
            while (1)
            {
              if (!v51) {
                goto LABEL_62;
              }
              uint64_t v62 = &v51[v61];
              if ((v51[v60 + 1] & 0xDF) != 0x48)
              {
                int v63 = 104;
                goto LABEL_76;
              }

              if ((v51[v60 + 2] & 0xDF) != 0x49)
              {
                ++v62;
                int v63 = 105;
                goto LABEL_76;
              }

              if ((v51[v60 + 3] & 0xDF) != 0x44)
              {
                v62 += 2;
                int v63 = 100;
                goto LABEL_76;
              }

              if ((v51[v60 + 4] & 0xDF) != 0x44) {
                break;
              }
              if ((v51[v60 + 5] & 0xDF) != 0x45)
              {
                v62 += 4;
                int v63 = 101;
LABEL_76:
                goto LABEL_77;
              }

              uint64_t v62 = &v51[v60 + 6];
              if ((*v62 & 0xDF) != 0x4E)
              {
                int v63 = 110;
                goto LABEL_76;
              }

uint64_t sub_1812DB6EC(int a1)
{
  if (a1 > 609) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v2 = ((26215 * a1) >> 18) + ((26215 * a1) >> 31);
  uint64_t v3 = (__int16)a1 % 10;
  uint64_t v4 = v3 - 2;
  uint64_t v5 = v3 - 1;
  else {
    uint64_t v6 = v4;
  }
  unint64_t v7 = v6 + 8;
  if (a1 < 30) {
    return v7 >> (3 - v2);
  }
  else {
    return v7 << (v2 - 3);
  }
}

int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
{
  return sqlite3_stmt_scanstatus_v2((uint64_t)pStmt, idx, iScanStatusOp, 0, (uint64_t *)pOut);
}

void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
    if (v2) {
      xmmword_18C465400(v2);
    }
    uint64_t v3 = *((unsigned int *)a1 + 36);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = (void *)(*((void *)a1 + 17) + 24LL);
      do
      {
        *uint64_t v4 = 0LL;
        v4[1] = 0LL;
        v4 += 5;
        --v3;
      }

      while (v3);
    }

    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
    if (v5) {
      xmmword_18C465410(v5);
    }
  }

  else
  {
    sub_1812CF36C(99659);
  }

uint64_t sqlite3_bind_blob_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  if ((a4 & 0x80000000) == 0) {
    return sub_1812DB830(a1, a2, a3, a4, a5, 0);
  }
  return sub_1812CF36C(99764);
}

uint64_t sub_1812DB830(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5, unsigned int a6)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v13 = *a1;
      if (*a1)
      {
        uint64_t v12 = 25LL;
        *(_DWORD *)(v13 + 80) = 25;
        sub_1812FA264(v13, 25);
        goto LABEL_12;
      }

      sqlite3_log(21, "API called with finalized prepared statement");
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }

    uint64_t v12 = 25LL;
LABEL_12:
    return v12;
  }

  uint64_t v11 = (a2 - 1);
  uint64_t v12 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if ((_DWORD)v12) {
    goto LABEL_12;
  }
  if ((uint64_t (*)(uint64_t))a5 == sub_1812E1FD0 || (unint64_t)(a5 + 1) <= 1)
  {
    uint64_t v12 = sub_1812CF36C(99727);
    goto LABEL_12;
  }

  if (!a3)
  {
    (*(void (**)(uint64_t, void))(a5 + 16))(a5, 0LL);
LABEL_21:
    uint64_t v12 = 0LL;
    goto LABEL_24;
  }

  uint64_t v15 = a1[16];
  uint64_t v16 = (uint64_t (*)(uint64_t))_Block_copy((const void *)a5);
  if (v16)
  {
    unsigned int v17 = sub_181269368(v15 + (v11 << 6), a3, a4, a6, v16);
    *(_BYTE *)(v15 + (v11 << 6) + 56) = 1;
    if (!v17)
    {
      int v18 = *(unsigned __int8 *)(*a1 + 100);
      uint64_t v19 = v15 + (v11 << 6);
      __int16 v20 = *(_WORD *)(v19 + 20);
      BOOL v21 = (_BYTE *)(v19 + 22);
      if ((v20 & 2) == 0)
      {
        uint64_t v12 = 0LL;
        _BYTE *v21 = v18;
        goto LABEL_24;
      }

      unsigned int v17 = sub_1812C23E8((int *)(v15 + (v11 << 6)), v18);
      if (!v17) {
        goto LABEL_21;
      }
    }
  }

  else
  {
    unsigned int v17 = 7;
  }

  uint64_t v22 = *a1;
  *(_DWORD *)(v22 + 80) = v17;
  sub_1812FA264(v22, v17);
  uint64_t v12 = sub_1813037C4(*a1, v17);
LABEL_24:
  uint64_t v23 = *(void *)(*a1 + 24);
  if (v23) {
    xmmword_18C465410(v23);
  }
  return v12;
}

uint64_t sqlite3_bind_text_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  return sub_1812DB830(a1, a2, a3, a4, a5, 1u);
}

int sqlite3_value_numeric_type(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(97220);
    return 0;
  }

  __int16 v2 = *((_WORD *)a1 + 10);
  uint64_t v3 = v2 & 0x3F;
  if (((0x4000000040004uLL >> v2) & 1) != 0)
  {
    int v4 = *((unsigned __int8 *)a1 + 22);
    uint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
    int v6 = *((_DWORD *)a1 + 4);
    int v7 = sub_1812B8054(v5, &v14, v6, v4);
    if (v7 >= 1)
    {
      double v8 = v14;
      if (v7 == 1)
      {
        uint64_t v9 = 0x8000000000000000LL;
        uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        if (v14 <= 9.22337204e18) {
          uint64_t v10 = (uint64_t)v14;
        }
        if (v14 >= -9.22337204e18) {
          uint64_t v9 = v10;
        }
        if (v14 == 0.0
          || (unint64_t)(v9 - 0x8000000000000LL) >> 52 == 4095 && *(void *)&v14 == COERCE__INT64((double)v9))
        {
          *(void *)a1 = v9;
          __int16 v11 = v2 | 4;
LABEL_16:
          *((_WORD *)a1 + 10) = v11 & 0xFFFD;
          uint64_t v3 = v11 & 0x3D;
          return byte_1813C6455[v3];
        }

        int v13 = sub_181303E28(v5, a1, v6, v4);
        __int16 v2 = *((_WORD *)a1 + 10);
        if (!v13)
        {
          __int16 v11 = v2 | 4;
          goto LABEL_16;
        }
      }

      *(double *)a1 = v8;
      __int16 v11 = v2 | 8;
      goto LABEL_16;
    }
  }

  return byte_1813C6455[v3];
}

uint64_t sub_1812DBB5C(uint64_t a1, int a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t result = sub_1812B8054(v5, &v17, v6, v4);
  if ((int)result >= 1)
  {
    double v8 = v17;
    if ((_DWORD)result == 1)
    {
      uint64_t v9 = 0x8000000000000000LL;
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v17 <= 9.22337204e18) {
        uint64_t v10 = (uint64_t)v17;
      }
      if (v17 >= -9.22337204e18) {
        uint64_t v9 = v10;
      }
      if (v17 == 0.0
        || (unint64_t)(v9 - 0x8000000000000LL) >> 52 == 4095 && *(void *)&v17 == COERCE__INT64((double)v9))
      {
        *(void *)a1 = v9;
        __int16 v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }

      uint64_t result = sub_181303E28(v5, (void *)a1, v6, v4);
      if (!(_DWORD)result)
      {
        __int16 v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }
    }

    *(double *)a1 = v8;
    __int16 v12 = *(_WORD *)(a1 + 20);
    __int16 v13 = v12 | 8;
    if (!a2)
    {
LABEL_27:
      *(_WORD *)(a1 + 20) = v13 & 0xFFFD;
      return result;
    }

    if ((v12 & 0x20) == 0)
    {
      if (v8 < -9.22337204e18
        || v8 > 9.22337204e18
        || v8 != (double)(uint64_t)v8
        || (unint64_t)((uint64_t)v8 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      {
        goto LABEL_27;
      }

      *(void *)a1 = (uint64_t)v8;
    }

    __int16 v11 = v12 & 0xF240;
LABEL_26:
    __int16 v13 = v11 | 4;
    goto LABEL_27;
  }

  return result;
}

int sqlite3_blob_open( sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  char v118 = 0LL;
  if (!ppBlob)
  {
    int v10 = 109157;
    return sub_1812CF36C(v10);
  }

  *ppBlob = 0LL;
  if (!a1)
  {
    uint64_t v9 = "NULL";
    goto LABEL_99;
  }

  int v8 = *((unsigned __int8 *)a1 + 113);
  if (v8 == 186)
  {
LABEL_6:
    uint64_t v9 = "unopened";
LABEL_99:
    sqlite3_log(21, "API call with %s database connection pointer", v9);
    goto LABEL_100;
  }

  if (v8 != 118)
  {
    if (v8 != 109)
    {
      uint64_t v9 = "invalid";
      goto LABEL_99;
    }

    goto LABEL_6;
  }

  __int16 v11 = (char *)zTable;
  if (!zTable)
  {
LABEL_100:
    int v10 = 109163;
    return sub_1812CF36C(v10);
  }

  BOOL v86 = flags != 0;
  uint64_t v15 = *((void *)a1 + 3);
  if (v15) {
    xmmword_18C465400(v15);
  }
  uint64_t v16 = sub_1812F2264((uint64_t)a1, 0x38uLL);
  uint64_t v23 = (sqlite3_blob *)v16;
  if (v16)
  {
    *(void *)(v16 + 48) = 0LL;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
  }

  int v24 = 0;
  unsigned int v93 = 0;
  uint64_t v87 = zDb;
  sqlite3_int64 v88 = iRow;
  int v89 = v11;
  uint64_t v90 = v16;
  while (1)
  {
    uint64_t v107 = 0LL;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    __int128 v103 = 0u;
    __int128 v104 = 0u;
    __int128 v101 = 0u;
    __int128 v102 = 0u;
    __int128 v99 = 0u;
    __int128 v100 = 0u;
    __int128 v98 = 0u;
    __int128 v96 = 0u;
    memset(v97, 0, sizeof(v97));
    __int128 v95 = 0u;
    __int128 v109 = 0u;
    __int128 v110 = 0u;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    __int128 v116 = 0u;
    uint64_t v117 = 0LL;
    uint64_t v25 = *((void *)a1 + 43);
    *((void *)a1 + 43) = &v94;
    uint64_t v108 = v25;
    uint64_t v94 = a1;
    if (*((_BYTE *)a1 + 103)) {
      sub_1812DC47C((uint64_t)&v94, "out of memory", v17, (uint64_t)v18, v19, v20, v21, v22, v84);
    }
    if (!v23) {
      goto LABEL_103;
    }
    if (v118) {
      sub_1812F20DC(a1, v118);
    }
    char v118 = 0LL;
    if (!*((_BYTE *)a1 + 111)) {
      sub_1812FA020((uint64_t)a1);
    }
    uint64_t v26 = sub_18129EAF4((uint64_t)&v94, 0, v11, zDb, v19, v20, v21, v22);
    if (!v26) {
      goto LABEL_111;
    }
    uint64_t v34 = v26;
    int v35 = *(unsigned __int8 *)(v26 + 63);
    if (v35 == 1)
    {
      uint64_t v78 = "cannot open virtual table: %s";
      goto LABEL_110;
    }

    if ((*(_BYTE *)(v26 + 48) & 0x80) != 0)
    {
      uint64_t v78 = "cannot open table without rowid: %s";
      goto LABEL_110;
    }

    if (v35 == 2)
    {
      uint64_t v78 = "cannot open view: %s";
LABEL_110:
      sub_1812DC47C((uint64_t)&v94, v78, v28, v29, v30, v31, v32, v33, (char)v11);
LABEL_111:
      if ((void)v95)
      {
        char v118 = (void *)v95;
        *(void *)&__int128 v95 = 0LL;
      }

      if (!*((_BYTE *)a1 + 111)) {
        sub_1812FA0B4((uint64_t)a1);
      }
      unsigned int v74 = 1;
      goto LABEL_121;
    }

    *((void *)v23 + 6) = v26;
    uint64_t v36 = *((void *)a1 + 4);
    uint64_t v37 = *(void *)(v26 + 96);
    if (v37)
    {
      int v38 = (uint64_t *)(v36 + 24);
      int v39 = -1;
      __int16 v40 = zColumn;
      do
      {
        uint64_t v41 = *v38;
        v38 += 4;
        ++v39;
      }

      while (v41 != v37);
    }

    else
    {
      int v39 = -32768;
      __int16 v40 = zColumn;
    }

    *((void *)v23 + 5) = *(void *)(v36 + 32LL * v39);
    uint64_t v42 = *(__int16 *)(v26 + 54);
    if ((int)v42 >= 1)
    {
      uint64_t v43 = 0LL;
      while (1)
      {
        uint64_t v44 = *(_BYTE **)(*(void *)(v26 + 8) + 16 * v43);
        for (int i = v40; ; ++i)
        {
          uint64_t v46 = *v44;
          uint64_t v47 = *(unsigned __int8 *)i;
          if ((_DWORD)v46 != (_DWORD)v47) {
            break;
          }
          if (!*v44) {
            goto LABEL_42;
          }
LABEL_35:
          ++v44;
        }

        if (byte_1813C6343[v46] == byte_1813C6343[v47]) {
          goto LABEL_35;
        }
        if (++v43 == v42) {
          goto LABEL_106;
        }
      }
    }

    LODWORD(v43) = 0;
LABEL_42:
    if ((_DWORD)v43 == (_DWORD)v42)
    {
LABEL_106:
      uint64_t v77 = sub_18127F588((uint64_t)a1, "no such column: %s", v28, v29, v30, v31, v32, v33, (char)v40);
      goto LABEL_118;
    }

    unsigned int v92 = v24;
    if (flags)
    {
      if ((*((_BYTE *)a1 + 49) & 0x40) != 0 && (uint64_t v48 = *(void *)(v26 + 72)) != 0)
      {
        uint64_t v49 = 0LL;
        do
        {
          uint64_t v50 = *(unsigned int *)(v48 + 40);
          if ((int)v50 >= 1)
          {
            uint64_t v51 = (int *)(v48 + 64);
            do
            {
              int v52 = *v51;
              v51 += 4;
              if (v52 == (_DWORD)v43) {
                uint64_t v49 = "foreign key";
              }
              --v50;
            }

            while (v50);
          }

          uint64_t v48 = *(void *)(v48 + 8);
        }

        while (v48);
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      for (uint64_t j = *(void *)(v26 + 16); j; uint64_t j = *(void *)(j + 40))
      {
        uint64_t v65 = *(unsigned __int16 *)(j + 94);
        if (*(_WORD *)(j + 94))
        {
          uint64_t v66 = *(__int16 **)(j + 8);
          do
          {
            int v68 = *v66++;
            int v67 = v68;
            if ((_DWORD)v43 == v68 || v67 == -2) {
              uint64_t v49 = "indexed";
            }
            --v65;
          }

          while (v65);
        }
      }

      if (v49) {
        break;
      }
    }

    uint64_t v54 = sub_1812DC63C((uint64_t *)&v94, v27, v28, v29, v30, v31, v32, v33);
    *((void *)v23 + 3) = v54;
    if (!v54) {
      goto LABEL_92;
    }
    int v60 = (uint64_t *)v54;
    uint64_t v61 = *(unsigned int **)(v34 + 96);
    if (v61)
    {
      uint64_t v62 = (unsigned int **)(*((void *)a1 + 4) + 24LL);
      LODWORD(v63) = -1;
      do
      {
        uint64_t v64 = *v62;
        v62 += 4;
        uint64_t v63 = (v63 + 1);
      }

      while (v64 != v61);
    }

    else
    {
      uint64_t v63 = 4294934528LL;
    }

    uint64_t v19 = *v61;
    uint64_t v20 = v61[1];
    int v70 = *(_DWORD *)(v54 + 144);
    if (*(_DWORD *)(v54 + 148) <= v70)
    {
      sub_181310690(v54, 2LL, v63, v86, v19, v20, v21, v22);
    }

    else
    {
      *(_DWORD *)(v54 + 144) = v70 + 1;
      uint64_t v71 = *(void *)(v54 + 136) + 40LL * v70;
      *(_DWORD *)uint64_t v71 = 64770;
      *(_DWORD *)(v71 + 4) = v63;
      *(_DWORD *)(v71 + 8) = v86;
      *(_DWORD *)(v71 + 12) = v19;
      *(_DWORD *)(v71 + 16) = v20;
      *(void *)(v71 + 24) = 0LL;
      *(void *)(v71 + 32) = 0LL;
    }

    int v72 = *((_DWORD *)v60 + 36);
    if (v72 >= 1) {
      *(_WORD *)(v60[17] + 40LL * (v72 - 1) + 2) = 1;
    }
    if (v72 + 6 > *((_DWORD *)v60 + 37))
    {
      if (sub_1813104DC((uint64_t)v60, v55, v56, (uint64_t)v18, v19, v20, v21, v22))
      {
        uint64_t v73 = 0LL;
        goto LABEL_83;
      }

      int v72 = *((_DWORD *)v60 + 36);
    }

    uint64_t v73 = v60[17] + 40LL * v72;
    *(_BYTE *)uint64_t v73 = -87;
    *(void *)(v73 + 9) = 0LL;
    *(void *)(v73 + 1) = 0LL;
    *(void *)(v73 + 16) = 0LL;
    *(_BYTE *)(v73 + 40) = 112;
    *(void *)(v73 + 49) = 0LL;
    *(void *)(v73 + 41) = 0LL;
    *(void *)(v73 + 56) = 0LL;
    *(void *)(v73 + 80) = 31LL;
    *(_DWORD *)(v73 + 88) = *((_DWORD *)v60 + 36) + 5;
    *(_DWORD *)(v73 + 92) = 1;
    *(void *)(v73 + 96) = 0LL;
    *(_BYTE *)(v73 + 120) = 94;
    *(_DWORD *)(v73 + 124) = 0;
    *(_DWORD *)(v73 + 128) = 0;
    *(_DWORD *)(v73 + 132) = 1;
    *(_BYTE *)(v73 + 121) = 0;
    *(void *)(v73 + 136) = 0LL;
    *(_WORD *)(v73 + 122) = 0;
    *(_BYTE *)(v73 + 160) = 84;
    *(_DWORD *)(v73 + 164) = 1;
    *(_BYTE *)(v73 + 161) = 0;
    *(_WORD *)(v73 + 162) = 0;
    *(void *)(v73 + 168) = 0LL;
    *(void *)(v73 + 176) = 0LL;
    *(_BYTE *)(v73 + 200) = 70;
    *(void *)(v73 + 216) = 0LL;
    *(void *)(v73 + 201) = 0LL;
    *(void *)(v73 + 209) = 0LL;
    *((_DWORD *)v60 + 36) += 6;
LABEL_83:
    *((_DWORD *)v60 + 68) |= 1 << v63;
    if (!*((_BYTE *)a1 + 103))
    {
      *(_DWORD *)(v73 + 4) = v63;
      *(_DWORD *)(v73 + 8) = *(_DWORD *)(v34 + 40);
      *(_DWORD *)(v73 + 12) = v86;
      if (*(_BYTE *)(*v60 + 103) || (sub_181310724(v60, v60[17] + 80, *(char **)v34, 0), !*((_BYTE *)a1 + 103)))
      {
        if (flags) {
          *(_BYTE *)(v73 + 40) = 113;
        }
        *(_DWORD *)(v73 + 48) = *(_DWORD *)(v34 + 40);
        *(_DWORD *)(v73 + 52) = v63;
        *(_BYTE *)(v73 + 41) = -3;
        *(_DWORD *)(v73 + 56) = *(__int16 *)(v34 + 54) + 1;
        *(_DWORD *)(v73 + 128) = *(__int16 *)(v34 + 54);
        LODWORD(v110) = 0;
        *(void *)&v97[3] = 0x100000001LL;
        *(double *)v57.i64 = sub_181279C8C((uint64_t)v60, (uint64_t)&v94);
      }
    }

void sub_1812DC47C( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)a1;
  *(_DWORD *)(v10 + 84) = -2;
  uint64_t v16 = v10;
  int v11 = *(_DWORD *)(v10 + 136);
  uint64_t v17 = &v22;
  int v18 = 512;
  int v19 = v11;
  int v20 = 0;
  __int16 v21 = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, &a9);
  if (v17 && (v17[v20] = 0, v19) && (v21 & 0x400) == 0) {
    __int16 v12 = sub_1812F24E0(&v16);
  }
  else {
    __int16 v12 = v17;
  }
  if (v21 == 7 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    uint64_t v14 = *(void *)(v10 + 344);
    if (v14)
    {
      sub_1812DC47C(v14, "out of memory");
      for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

  if (*(_BYTE *)(v10 + 107))
  {
    if (v12) {
      sub_1812F20DC((void *)v10, v12);
    }
    if (*(_BYTE *)(v10 + 103))
    {
      ++*(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = 7;
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 48);
    __int16 v13 = *(void **)(a1 + 8);
    if (v13) {
      sub_1812F20DC((void *)v10, v13);
    }
    *(void *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 24) = 1;
    *(void *)(a1 + 400) = 0LL;
  }

uint64_t sub_1812DC63C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(unsigned __int16 *)(*a1 + 436) <= 0x197u)
  {
    if (*(_DWORD *)(v9 + 432))
    {
      if (*(_BYTE *)(v9 + 103)) {
        return 0LL;
      }
    }

    else
    {
      ++*(_DWORD *)(v9 + 452);
    }

    goto LABEL_12;
  }

  uint64_t v10 = *(void *)(v9 + 472);
  if (v10)
  {
    int v11 = (void *)(v9 + 472);
  }

  else
  {
    uint64_t v10 = *(void *)(v9 + 464);
    if (!v10)
    {
      ++*(_DWORD *)(v9 + 456);
LABEL_12:
      uint64_t v10 = sub_1812F2440(v9, 408LL);
      if (!v10) {
        return v10;
      }
      goto LABEL_13;
    }

    int v11 = (void *)(v9 + 464);
  }

  *int v11 = *(void *)v10;
  ++*(_DWORD *)(v9 + 448);
LABEL_13:
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(void *)uint64_t v10 = v9;
  uint64_t v14 = *(void *)(v9 + 8);
  __int16 v13 = (uint64_t *)(v9 + 8);
  uint64_t v12 = v14;
  if (v14) {
    *(void *)(v12 + 8) = v10 + 16;
  }
  *(void *)(v10 + 8) = v13;
  *(void *)(v10 + 16) = v12;
  *__int16 v13 = v10;
  *(void *)(v10 + 24) = a1;
  a1[2] = v10;
  int v15 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v15)
  {
    sub_18131044C(v10, 8LL, 0LL, 1LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v10 + 136) + 40LL * v15;
    *(_DWORD *)uint64_t v16 = 8;
    *(void *)(v16 + 4) = 0x100000000LL;
    *(void *)(v16 + 12) = 0LL;
    *(void *)(v16 + 28) = 0LL;
    *(void *)(v16 + 20) = 0LL;
    *(_DWORD *)(v16 + 36) = 0;
  }

  return v10;
}

uint64_t sub_1812DC7B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40LL * (int)result;
  *(_BYTE *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 12) = a5;
  *(_DWORD *)(v10 + 16) = a6;
  *(_BYTE *)(v10 + 1) = -3;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  return result;
}

_DWORD *sub_1812DC804(_DWORD *result, int a2)
{
  result[68] |= 1 << a2;
  if (a2 != 1)
  {
    if (*(_BYTE *)(*(void *)(*(void *)(*(void *)result + 32LL) + 32LL * a2 + 8) + 17LL)) {
      result[69] |= 1 << a2;
    }
  }

  return result;
}

uint64_t sub_1812DC84C( uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int64x2_t a9, double a10, int64x2_t a11)
{
  char v12 = a2;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(v14 + 104);
  if ((*(_WORD *)(v15 + 84) & 0x9000) != 0)
  {
    sub_1813040AC(v15 + 64, a2);
  }

  else
  {
    *(void *)(v15 + 64) = a2;
    *(_WORD *)(v15 + 84) = 4;
  }

  if (*(int *)(v14 + 48) < 5)
  {
    uint64_t v16 = sqlite3_step(*(sqlite3_stmt **)(a1 + 24));
  }

  else
  {
    *(_DWORD *)(v14 + 48) = 4;
    uint64_t v16 = sub_181290D34((uint64_t *)v14, a9, a10, a11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }

  uint64_t v23 = v16;
  if ((_DWORD)v16 == 100)
  {
    uint64_t v24 = **(void **)(v14 + 120);
    uint64_t v25 = *(unsigned __int16 *)(a1 + 8);
    if (*(unsigned __int16 *)(v24 + 66) <= v25)
    {
      uint64_t v27 = *(void *)(a1 + 32);
      goto LABEL_17;
    }

    unsigned int v26 = *(_DWORD *)(v24 + 4 * v25 + 112);
    if (v26 <= 0xB)
    {
      uint64_t v27 = *(void *)(a1 + 32);
      if (v26 == 7)
      {
        uint64_t v28 = "real";
        goto LABEL_18;
      }

      if (v26)
      {
        uint64_t v28 = "integer";
LABEL_18:
        uint64_t v45 = sub_18127F588(v27, "cannot open value of type %s", v17, v18, v19, v20, v21, v22, (char)v28);
        sqlite3_finalize(*(sqlite3_stmt **)(a1 + 24));
        *(void *)(a1 + 24) = 0LL;
        uint64_t v23 = 1LL;
        goto LABEL_25;
      }

void *sub_1812DCA44(void *result)
{
  uint64_t v1 = result;
  __int16 v2 = (void *)*result;
  uint64_t v3 = (void *)result[19];
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = (void *)*result;
  while (1)
  {
    uint64_t result = sub_1813014B0(v4, v3);
LABEL_5:
    uint64_t v6 = v1[24];
    if (!v6) {
      break;
    }
    uint64_t v5 = *(void *)(v6 + 8);
    v1[24] = *(void *)v6;
    (*(void (**)(void *, uint64_t))(v6 + 16))(v2, v5);
    int v4 = v2;
    uint64_t v3 = (void *)v6;
  }

  int v7 = (void *)v1[10];
  if (v7) {
    uint64_t result = sub_1813014B0(v2, v7);
  }
  int v8 = (void *)v1[11];
  if (v8) {
    uint64_t result = sub_181311F48(v2, v8);
  }
  int v9 = *((_DWORD *)v2 + 108) - *((unsigned __int8 *)v1 + 36);
  *((_DWORD *)v2 + 108) = v9;
  if (v9) {
    __int16 v10 = 0;
  }
  else {
    __int16 v10 = *((_WORD *)v2 + 219);
  }
  *((_WORD *)v2 + 218) = v10;
  v2[43] = v1[32];
  void *v1 = 0LL;
  *((_BYTE *)v1 + 36) = 0;
  return result;
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    __int16 v2 = (sqlite3_stmt *)*((void *)a1 + 3);
    uint64_t v3 = (void *)*((void *)a1 + 4);
    uint64_t v4 = v3[3];
    if (v4) {
      xmmword_18C465400(v4);
    }
    sub_1812F20DC(v3, v1);
    uint64_t v5 = v3[3];
    if (v5) {
      xmmword_18C465410(v5);
    }
    LODWORD(a1) = sqlite3_finalize(v2);
  }

  return (int)a1;
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return sub_1812DCB6C((int *)a1, (char *)Z, *(uint64_t *)&N, iOffset, sub_1812DCD5C);
}

uint64_t sub_1812DCB6C( int *a1, char *a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4))
{
  if (!a1) {
    return sub_1812CF36C(109406);
  }
  uint64_t v10 = *((void *)a1 + 4);
  uint64_t v11 = *(void *)(v10 + 24);
  if (v11) {
    xmmword_18C465400(v11);
  }
  unsigned int v12 = 1;
  uint64_t v13 = *((void *)a1 + 3);
  if (!v13)
  {
LABEL_21:
    unsigned int v12 = 4;
LABEL_22:
    *(_DWORD *)(v10 + 80) = v12;
    goto LABEL_23;
  }

  uint64_t v14 = *(void *)(*((void *)a1 + 2) + 8LL);
  if (*(_BYTE *)(v14 + 17))
  {
    ++*(_DWORD *)(v14 + 20);
    if (!*(_BYTE *)(v14 + 18)) {
      sub_1812FDE20(v14);
    }
  }

  if (a5 == sub_1812DCD7C && *(void *)(v10 + 360))
  {
    uint64_t v15 = *((void *)a1 + 2);
    sub_1812FFFE4(v15);
    sub_18130667C( (uint64_t *)v13,  **(void **)(v13 + 120),  9,  *((void *)a1 + 5),  *((void *)a1 + 6),  *(void *)(v15 + 48),  0xFFFFFFFF,  *((unsigned __int16 *)a1 + 4));
  }

  unsigned int v12 = a5(*((unsigned __int8 **)a1 + 2), a1[1] + a4, a3, a2);
  uint64_t v16 = *(void *)(*((void *)a1 + 2) + 8LL);
  if (*(_BYTE *)(v16 + 17))
  {
    int v17 = *(_DWORD *)(v16 + 20) - 1;
    *(_DWORD *)(v16 + 20) = v17;
    if (!v17) {
      sub_1812FDEFC(v16);
    }
  }

  if (v12 == 4)
  {
    if (*(_BYTE *)(v13 + 267)) {
      sub_18127A3A0((void **)v13);
    }
    sub_1812CFA64(v13);
    *((void *)a1 + 3) = 0LL;
    goto LABEL_21;
  }

  *(_DWORD *)(v13 + 52) = v12;
  *(_DWORD *)(v10 + 80) = v12;
  if (v12)
  {
LABEL_23:
    sub_1812FA264(v10, v12);
    if (v12) {
      goto LABEL_32;
    }
    goto LABEL_24;
  }

  if (*(void *)(v10 + 416))
  {
    unsigned int v12 = 0;
    goto LABEL_23;
  }

  unsigned int v12 = 0;
  *(_DWORD *)(v10 + 84) = -1;
LABEL_24:
  if (!*(_BYTE *)(v10 + 103))
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void *)(v10 + 24);
    if (!v19) {
      return v18;
    }
    goto LABEL_33;
  }

uint64_t sub_1812DCD5C(_BYTE *a1, unsigned int a2, unsigned int a3, char *a4)
{
  if (*a1) {
    return sub_1813109B8(a1, a2, a3, a4);
  }
  else {
    return sub_1812BFD8C((uint64_t)a1, a2, a3, a4, 0);
  }
}

int sqlite3_blob_write(sqlite3_blob *a1, const void *z, int n, int iOffset)
{
  return sub_1812DCB6C((int *)a1, (char *)z, *(uint64_t *)&n, iOffset, sub_1812DCD7C);
}

uint64_t sub_1812DCD7C(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4)
{
  unsigned int v8 = *a1;
  if (v8 >= 3)
  {
    uint64_t result = sub_181308C74((uint64_t)a1);
    if ((_DWORD)result) {
      return result;
    }
    unsigned int v8 = *a1;
  }

  if (v8) {
    return 4LL;
  }
  uint64_t v10 = *(void *)(*((void *)a1 + 4) + 16LL);
  if (v10)
  {
    int v11 = *((_DWORD *)a1 + 20);
    while ((unsigned __int8 *)v10 == a1 || v11 && *(_DWORD *)(v10 + 80) != v11)
    {
      uint64_t v10 = *(void *)(v10 + 40);
      if (!v10) {
        goto LABEL_14;
      }
    }

    sub_1812FFCF0((unsigned __int8 *)v10, v11, a1);
    if ((a1[1] & 1) != 0) {
      return sub_1812BFD8C((uint64_t)a1, a2, a3, a4, 1);
    }
  }

  else
  {
LABEL_14:
    unsigned __int8 v12 = a1[1] & 0xDF;
    a1[1] = v12;
    if ((v12 & 1) != 0) {
      return sub_1812BFD8C((uint64_t)a1, a2, a3, a4, 1);
    }
  }

  return 8LL;
}

int sqlite3_blob_bytes(sqlite3_blob *a1)
{
  if (a1)
  {
    if (*((void *)a1 + 3)) {
      LODWORD(a1) = *(_DWORD *)a1;
    }
    else {
      LODWORD(a1) = 0;
    }
  }

  return (int)a1;
}

int sqlite3_blob_reopen(sqlite3_blob *a1, sqlite3_int64 a2)
{
  if (!a1) {
    return sub_1812CF36C(109506);
  }
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v13 = *(void *)(v12 + 24);
  if (v13) {
    xmmword_18C465400(v13);
  }
  uint64_t v14 = *((void *)a1 + 3);
  if (!v14)
  {
    unsigned int v20 = 4;
    goto LABEL_14;
  }

  *(_DWORD *)(v14 + 52) = 0;
  unsigned int v20 = sub_1812DC84C((uint64_t)a1, a2, &v26, v2, v3, v4, v5, v6, v7, v8, v9);
  if (v20)
  {
    uint64_t v21 = v26;
    if (v26) {
      uint64_t v22 = "%s";
    }
    else {
      uint64_t v22 = 0LL;
    }
    sub_1812D50CC(v12, v20, v22, v15, v16, v17, v18, v19, (char)v26);
    if (v21) {
      sub_1812F20DC((void *)v12, v21);
    }
    goto LABEL_14;
  }

  int v24 = 0;
  if (*(_BYTE *)(v12 + 103)) {
LABEL_14:
  }
    int v24 = sub_1813037C4(v12, v20);
  uint64_t v25 = *(void *)(v12 + 24);
  if (v25) {
    xmmword_18C465410(v25);
  }
  return v24;
}

int sqlite3_strglob(const char *zGlob, const char *zStr)
{
  if (!zStr) {
    return zGlob != 0LL;
  }
  if (zGlob) {
    return sub_1812BF304((unsigned __int8 *)zGlob, zStr, byte_1813C6550, 91LL);
  }
  return 1;
}

int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
{
  if (!zStr) {
    return zGlob != 0LL;
  }
  if (zGlob) {
    return sub_1812BF304((unsigned __int8 *)zGlob, zStr, byte_1813C6554, *(uint64_t *)&cEsc);
  }
  return 1;
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  if (!a1) {
    return "out of memory";
  }
  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return "bad parameter or other API misuse";
  }

  uint64_t v3 = *((void *)a1 + 3);
  if (v3) {
    xmmword_18C465400(v3);
  }
  if (*((_BYTE *)a1 + 103))
  {
    uint64_t v4 = "out of memory";
    goto LABEL_9;
  }

  int v6 = *((_DWORD *)a1 + 20);
  if (v6)
  {
    uint64_t v7 = *((void *)a1 + 52);
    if (!v7) {
      goto LABEL_23;
    }
    int v8 = *(unsigned __int16 *)(v7 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
    {
      if ((v8 & 1) != 0) {
        goto LABEL_23;
      }
      uint64_t v4 = (const char *)sub_181303998((int *)v7, 1);
    }

    else
    {
      uint64_t v4 = *(const char **)(v7 + 8);
    }

    if (v4) {
      goto LABEL_9;
    }
    int v6 = *((_DWORD *)a1 + 20);
LABEL_23:
    switch(v6)
    {
      case 516:
        uint64_t v4 = "abort due to ROLLBACK";
        goto LABEL_9;
      case 101:
        uint64_t v4 = "no more rows available";
        goto LABEL_9;
      case 100:
        uint64_t v4 = "another row available";
        goto LABEL_9;
    }

    int v6 = v6;
  }

  if (((0x1410004uLL >> v6) & 1) == 0)
  {
    uint64_t v4 = off_189B6EC30[v6];
    goto LABEL_9;
  }

uint64_t sqlite3_exec_b( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = 0LL;
  if (!a1)
  {
    uint64_t v10 = "NULL";
    goto LABEL_15;
  }

  int v9 = *(unsigned __int8 *)(a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    uint64_t v10 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(142415);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  if (a2) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = (unsigned __int8 *)&byte_1813CEAEE;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13) {
    xmmword_18C465400(v13);
  }
  *(_DWORD *)(a1 + 80) = 0;
  if (*(void *)(a1 + 416)) {
    sub_1812FA264(a1, 0);
  }
  else {
    *(_DWORD *)(a1 + 84) = -1;
  }
  while (1)
  {
    if (!*v12)
    {
      unsigned int v16 = 0;
      goto LABEL_37;
    }

    uint64_t v25 = 0LL;
    unsigned int v15 = sub_18126DFE0(a1, v12, 0xFFFFFFFFLL, 128LL, 0LL, &v25, &v26, a8);
    if (v15)
    {
      unsigned int v16 = v15;
      goto LABEL_37;
    }

    if (v25) {
      break;
    }
    unsigned int v16 = 0;
    uint64_t v12 = v26;
LABEL_17:
    if (v16) {
      goto LABEL_37;
    }
  }

  while (1)
  {
    int v17 = sqlite3_step(v25);
    int v18 = v17;
    if (a3)
    {
      if (v17 != 100 && (v17 != 101 || (*(_BYTE *)(a1 + 49) & 1) == 0))
      {
LABEL_28:
        uint64_t v19 = v25;
        if (*((_BYTE *)v25 + 267)) {
          unsigned int v16 = sub_18127A3A0((void **)v25);
        }
        else {
          unsigned int v16 = 0;
        }
        sub_1812CFA64((uint64_t)v19);
        uint64_t v25 = 0LL;
        uint64_t v12 = v26 - 1;
        do
          int v20 = *++v12;
        while ((byte_1813C6558[v20] & 1) != 0);
        goto LABEL_17;
      }
    }

    if (v18 != 100) {
      goto LABEL_28;
    }
  }

  uint64_t v21 = v25;
  if (*((_BYTE *)v25 + 267)) {
    sub_18127A3A0((void **)v25);
  }
  sub_1812CFA64((uint64_t)v21);
  uint64_t v25 = 0LL;
  unsigned int v16 = 4;
  *(_DWORD *)(a1 + 80) = 4;
  sub_1812FA264(a1, 4);
LABEL_37:
  uint64_t v22 = v25;
  if (v25)
  {
    if (*((_BYTE *)v25 + 267)) {
      sub_18127A3A0((void **)v25);
    }
    sub_1812CFA64((uint64_t)v22);
  }

  if (!v16 && !*(_BYTE *)(a1 + 103))
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = *(void *)(a1 + 24);
    if (!v24) {
      return v23;
    }
    goto LABEL_46;
  }

  uint64_t v23 = sub_1813037C4(a1, v16);
  uint64_t v24 = *(void *)(a1 + 24);
  if (v24) {
LABEL_46:
  }
    xmmword_18C465410(v24);
  return v23;
}

int sqlite3_auto_extension(void (*xEntryPoint)(void))
{
  return 21;
}

int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
{
  if ((_BYTE)word_18C465384)
  {
    uint64_t v1 = qword_18C4653F0(2LL);
    if (v1)
    {
      uint64_t v2 = v1;
      xmmword_18C465400(v1);
      xmmword_18C465410(v2);
    }
  }

  return 0;
}

void sqlite3_reset_auto_extension(void)
{
  if (!sqlite3_initialize() && (_BYTE)word_18C465384)
  {
    uint64_t v0 = qword_18C4653F0(2LL);
    if (v0)
    {
      uint64_t v1 = v0;
      xmmword_18C465400(v0);
      xmmword_18C465410(v1);
    }
  }

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return sub_18126DFE0((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, 0LL, 0LL, ppStmt, pzTail, v5);
}

int sqlite3_prepare_v3( sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return sub_18126DFE0( (uint64_t)db,  (unsigned __int8 *)zSql,  *(uint64_t *)&nByte,  prepFlags & 0xF | 0x80,  0LL,  ppStmt,  pzTail,  v6);
}

int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1812C2AC8((uint64_t)db, (char *)zSql, nByte, 0LL, ppStmt, pzTail);
}

int sqlite3_prepare16_v3( sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1812C2AC8((uint64_t)db, (char *)zSql, nByte, prepFlags & 0xF | 0x80, ppStmt, pzTail);
}

int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
{
  if (!db)
  {
    uint64_t v5 = "NULL";
    goto LABEL_10;
  }

  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(161256);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_10;
    }

    goto LABEL_5;
  }

  if (zName) {
    return sub_18126D760((uint64_t)db, (char *)zName, (uint64_t)p, (uint64_t)pClientData, 0LL);
  }
  return sub_1812CF36C(161256);
}

int sqlite3_create_module_v2( sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  if (!db)
  {
    uint64_t v6 = "NULL";
    goto LABEL_10;
  }

  int v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1812CF36C(161272);
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_10;
    }

    goto LABEL_5;
  }

  if (zName) {
    return sub_18126D760( (uint64_t)db,  (char *)zName,  (uint64_t)p,  (uint64_t)pClientData,  (void (*)(uint64_t))xDestroy);
  }
  return sub_1812CF36C(161272);
}

int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
{
  if (!db)
  {
    int v4 = "NULL";
    goto LABEL_18;
  }

  int v3 = *((unsigned __int8 *)db + 113);
  if (v3 == 186)
  {
LABEL_5:
    int v4 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(161284);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      int v4 = "invalid";
      goto LABEL_18;
    }

    goto LABEL_5;
  }

  int v5 = (void *)*((void *)db + 72);
  if (v5)
  {
    uint64_t v7 = azKeep + 1;
    do
    {
      uint64_t v8 = v5[2];
      int v5 = (void *)*v5;
      if (azKeep && (int v9 = *azKeep) != 0LL)
      {
        uint64_t v10 = *(const char **)(v8 + 8);
        int v11 = v7;
        while (strcmp(v9, v10))
        {
          uint64_t v12 = *v11++;
          int v9 = v12;
          if (!v12) {
            goto LABEL_9;
          }
        }
      }

      else
      {
LABEL_9:
        sub_18126D760((uint64_t)db, *(char **)(v8 + 8), 0LL, 0LL, 0LL);
      }
    }

    while (v5);
  }

  return 0;
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  if (!a1)
  {
    uint64_t v10 = "NULL";
    goto LABEL_16;
  }

  int v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    uint64_t v10 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(161961);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_16;
    }

    goto LABEL_5;
  }

  if (!zSQL) {
    return sub_1812CF36C(161961);
  }
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_18C465400(v12);
  }
  uint64_t v13 = *((void *)a1 + 74);
  if (v13 && !*(_DWORD *)(v13 + 24))
  {
    uint64_t v16 = *(void *)(v13 + 8);
    __int128 v53 = 0u;
    __int128 v52 = 0u;
    __int128 v51 = 0u;
    __int128 v50 = 0u;
    __int128 v49 = 0u;
    __int128 v48 = 0u;
    __int128 v47 = 0u;
    __int128 v46 = 0u;
    __int128 v45 = 0u;
    __int128 v44 = 0u;
    __int128 v43 = 0u;
    __int128 v42 = 0u;
    __int128 v41 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    uint64_t v64 = 0LL;
    uint64_t v17 = *((void *)a1 + 43);
    uint64_t v54 = 0LL;
    uint64_t v55 = v17;
    *((void *)a1 + 43) = &v40;
    uint64_t v40 = a1;
    if (*((_BYTE *)a1 + 103)) {
      sub_1812DC47C((uint64_t)&v40, "out of memory", v2, v3, v4, v5, v6, v7, v39);
    }
    BYTE6(v57) = 1;
    BYTE5(v54) = 1;
    char v18 = *((_BYTE *)a1 + 197);
    *((_BYTE *)a1 + 197) = 0;
    LOWORD(v54) = 1;
    if (sub_18126E93C((uint64_t)&v40, (unsigned __int8 *)zSQL)
      || (uint64_t v24 = v60) == 0
      || *((_BYTE *)a1 + 103)
      || *(_BYTE *)(v60 + 63))
    {
      if ((void)v41) {
        uint64_t v25 = "%s";
      }
      else {
        uint64_t v25 = 0LL;
      }
      unsigned int v26 = 1;
      sub_1812D50CC((uint64_t)a1, 1, v25, v19, v20, v21, v22, v23, v41);
      if ((void)v41) {
        sub_1812F20DC(a1, (void *)v41);
      }
    }

    else
    {
      if (*(void *)(v16 + 8))
      {
        unsigned int v26 = 0;
      }

      else
      {
        *(void *)(v16 + 8) = *(void *)(v60 + 8);
        uint64_t v33 = *(void **)(v24 + 80);
        if (v33) {
          sub_181311F48(a1, v33);
        }
        unsigned int v26 = 0;
        __int16 v34 = *(_WORD *)(v24 + 54);
        *(_WORD *)(v16 + 54) = v34;
        *(_WORD *)(v16 + 56) = v34;
        *(_DWORD *)(v16 + 48) |= *(_DWORD *)(v24 + 48) & 0x280;
        *(_WORD *)(v24 + 54) = 0;
        *(void *)(v24 + 8) = 0LL;
        if ((*(_BYTE *)(v24 + 48) & 0x80) != 0)
        {
          if (*(void *)(**(void **)(*(void *)v13 + 8LL) + 104LL))
          {
            uint64_t v35 = v24 + 16;
            do
            {
              uint64_t v36 = *(void *)v35;
              int v37 = *(_WORD *)(*(void *)v35 + 99LL) & 3;
              uint64_t v35 = *(void *)v35 + 40LL;
            }

            while (v37 != 2);
            unsigned int v26 = *(unsigned __int16 *)(v36 + 94) != 1;
          }

          else
          {
            unsigned int v26 = 0;
          }
        }

        uint64_t v38 = *(void *)(v24 + 16);
        if (v38)
        {
          *(void *)(v16 + 16) = v38;
          *(void *)(v24 + 16) = 0LL;
          *(void *)(v38 + 24) = v16;
        }
      }

      *(_DWORD *)(v13 + 24) = 1;
    }

    BYTE6(v57) = 0;
    uint64_t v27 = *((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      if (*(_BYTE *)(*((void *)&v41 + 1) + 267LL)) {
        sub_18127A3A0(*((void ***)&v41 + 1));
      }
      sub_1812CFA64(v27);
    }

    uint64_t v28 = (void *)v60;
    if ((void)v60)
    {
      if (*((void *)a1 + 102) || (int v29 = *(_DWORD *)(v60 + 44) - 1, (*(_DWORD *)(v60 + 44) = v29) == 0)) {
        sub_181311A80(a1, v28);
      }
    }

    sub_1812DCA44(&v40);
    *((_BYTE *)a1 + 197) = v18;
    if (v26) {
      BOOL v30 = 0;
    }
    else {
      BOOL v30 = *((_BYTE *)a1 + 103) == 0;
    }
    if (v30) {
      int v31 = 0;
    }
    else {
      int v31 = sub_1813037C4((uint64_t)a1, v26);
    }
    uint64_t v32 = *((void *)a1 + 3);
    if (v32) {
      xmmword_18C465410(v32);
    }
    return v31;
  }

  else
  {
    *((_DWORD *)a1 + 20) = 21;
    sub_1812FA264((uint64_t)a1, 21);
    uint64_t v14 = *((void *)a1 + 3);
    if (v14) {
      xmmword_18C465410(v14);
    }
    return sub_1812CF36C(161969);
  }

int sqlite3_vtab_on_conflict(sqlite3 *a1)
{
  if (!a1)
  {
    uint64_t v2 = "NULL";
    goto LABEL_10;
  }

  int v1 = *((unsigned __int8 *)a1 + 113);
  if (v1 == 186)
  {
LABEL_5:
    uint64_t v2 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v2);
    goto LABEL_11;
  }

  if (v1 != 118)
  {
    if (v1 != 109)
    {
      uint64_t v2 = "invalid";
      goto LABEL_10;
    }

    goto LABEL_5;
  }

  int v3 = *((unsigned __int8 *)a1 + 108);
LABEL_11:
  sub_1812CF36C(162440);
  return 0;
}

int sqlite3_vtab_config(sqlite3 *a1, int op, ...)
{
  uint64_t v12 = va_arg(va, void);
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_13;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(162461);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_13;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (v6) {
    xmmword_18C465400(v6);
  }
  uint64_t v7 = *((void *)a1 + 74);
  if (v7)
  {
    switch(op)
    {
      case 1:
        *(_BYTE *)(*(void *)v7 + 28LL) = v12;
        break;
      case 2:
        *(_BYTE *)(*(void *)v7 + 3gettimeofday(&v4, 0LL) = 0;
        break;
      case 3:
        *(_BYTE *)(*(void *)v7 + 3gettimeofday(&v4, 0LL) = 2;
        break;
      case 4:
        *(_BYTE *)(*(void *)v7 + 29LL) = 1;
        break;
      default:
        int v9 = 162488;
        goto LABEL_16;
    }

    int v10 = 0;
    uint64_t v11 = *((void *)a1 + 3);
    if (!v11) {
      return v10;
    }
  }

  else
  {
    int v9 = 162466;
LABEL_16:
    int v10 = sub_1812CF36C(v9);
    *((_DWORD *)a1 + 20) = v10;
    sub_1812FA264((uint64_t)a1, v10);
    uint64_t v11 = *((void *)a1 + 3);
    if (!v11) {
      return v10;
    }
  }

  xmmword_18C465410(v11);
  return v10;
}

const char *sqlite3_vtab_collation( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1812CF36C(171867);
    return 0LL;
  }

  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32LL) + 56LL * *(int *)(*(void *)(a1 + 8) + 12LL * a2 + 8));
  if (*(void *)(v8 + 16) && (uint64_t v9 = sub_1812DDD08(*(void *)(a1 + 104), v8, a3, a4, a5, a6, a7, a8)) != 0) {
    return *(const char **)v9;
  }
  else {
    return "BINARY";
  }
}

uint64_t sub_1812DDD08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  if ((*(_BYTE *)(a2 + 5) & 4) != 0)
  {
    int v10 = *(unsigned __int8 **)(a2 + 24);
    if ((v10[5] & 2) != 0) {
      return sub_181289D04(a1, v10, a3, a4, a5, a6, a7, a8);
    }
    uint64_t v11 = *(unsigned __int8 **)(a2 + 16);
    if (!v11) {
      goto LABEL_8;
    }
  }

  else
  {
    int v10 = *(unsigned __int8 **)(a2 + 16);
    if ((v10[5] & 2) != 0) {
      return sub_181289D04(a1, v10, a3, a4, a5, a6, a7, a8);
    }
    uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
    if (!v11) {
      goto LABEL_8;
    }
  }

  if ((v11[5] & 2) != 0)
  {
LABEL_11:
    a1 = v9;
    int v10 = v11;
    return sub_181289D04(a1, v10, a3, a4, a5, a6, a7, a8);
  }

int sqlite3_vtab_in(sqlite3_index_info *a1, int iCons, int bHandle)
{
  if (!a1 || iCons < 0)
  {
    sub_1812CF36C(171894);
    return 0;
  }

  int v3 = 1 << iCons;
  if ((*(&a1[1].nOrderBy + 1) & v3) == 0) {
    return 0;
  }
  if (!bHandle)
  {
    int v4 = (uint64_t)a1[1].aOrderBy & ~v3;
    goto LABEL_12;
  }

  if (bHandle >= 1)
  {
    int v4 = LODWORD(a1[1].aOrderBy) | v3;
LABEL_12:
    LODWORD(a1[1].aOrderBy) = v4;
  }

  return 1;
}

int sqlite3_vtab_rhs_value(sqlite3_index_info *a1, int a2, sqlite3_value **ppVal)
{
  if (!a1) {
    return sub_1812CF36C(171927);
  }
  if (a2 < 0 || a1->nConstraint <= a2)
  {
    uint64_t v5 = 0LL;
    int result = 21;
  }

  else
  {
    int v4 = (char *)a1 + 8 * a2;
    uint64_t v7 = (sqlite3_value *)*((void *)v4 + 16);
    uint64_t v6 = (uint64_t *)(v4 + 128);
    uint64_t v5 = v7;
    if (v7)
    {
      int result = 0;
    }

    else
    {
      int v10 = *(unsigned __int8 **)(*(void *)(*(void *)(*(void *)&a1[1].nConstraint + 32LL)
      if (v10)
      {
        int result = sub_181312474( *(void *)a1[1].aConstraint,  v10,  *(unsigned __int8 *)(*(void *)a1[1].aConstraint + 100LL),  65LL,  v6);
        uint64_t v5 = (sqlite3_value *)*v6;
      }

      else
      {
        int result = 0;
        uint64_t v5 = 0LL;
      }
    }
  }

  *ppVal = v5;
  if (v5) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = result == 0;
  }
  if (v9) {
    return 12;
  }
  return result;
}

int sqlite3_vtab_distinct(sqlite3_index_info *a1)
{
  if (!a1 || (int result = a1[1].nOrderBy, result >= 4))
  {
    sub_1812CF36C(171963);
    return 0;
  }

  return result;
}

int sqlite3_keyword_name(int a1, const char **a2, int *a3)
{
  if (!a2) {
    return sub_1812CF36C(183888);
  }
  *a2 = 0LL;
  if (!a3) {
    return sub_1812CF36C(183888);
  }
  int result = 0;
  uint64_t v5 = a1 + 1LL;
  *a2 = &aReindexedescap[word_1813C68F8[v5]];
  *a3 = byte_1813C6A20[v5];
  return result;
}

int sqlite3_keyword_count(void)
{
  return 147;
}

int sqlite3_keyword_check(const char *a1, int a2)
{
  if (!a1 || a2 < 0)
  {
    sub_1812CF36C(183900);
  }

  else if (a2 >= 2)
  {
    int v3 = byte_1813C6FD0[v2];
    if (byte_1813C6FD0[v2])
    {
      do
      {
        if (byte_1813C6A20[v3] == a2)
        {
          uint64_t v4 = word_1813C68F8[v3];
          if ((*a1 & 0xDF) == aReindexedescap[v4]
            && (a1[1] & 0xDF) == aReindexedescap[v4 + 1])
          {
            uint64_t v5 = &aReindexedescap[v4 + 2];
            uint64_t v6 = a1 + 2;
            uint64_t v7 = a2 - 2LL;
            while (1)
            {
              int v8 = *(unsigned __int8 *)v6++;
              unsigned int v9 = v8 & 0xFFFFFFDF;
              int v10 = *v5++;
              if (v9 != v10) {
                break;
              }
              if (!--v7) {
                return 1;
              }
            }
          }
        }

        int v3 = byte_1813C70E3[v3];
      }

      while (v3);
    }
  }

  return 0;
}

int sqlite3_complete(const char *sql)
{
  if (!sql)
  {
    sub_1812CF36C(184756);
    return 0;
  }

  unsigned __int8 v1 = *sql;
  if (!*sql) {
    return 0;
  }
  unsigned int v2 = 0;
  while (2)
  {
    uint64_t v3 = 0LL;
    switch(v1)
    {
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
      case 0x20u:
        goto LABEL_4;
      case 0x22u:
      case 0x27u:
      case 0x60u:
        do
        {
          int v6 = *(unsigned __int8 *)++sql;
          int v5 = v6;
        }

        while (v6 && v5 != v1);
        if (!v5) {
          return 0;
        }
        goto LABEL_10;
      case 0x2Du:
        if (sql[1] != 45) {
          goto LABEL_10;
        }
        int v21 = v1;
        if (!v1) {
          return v2 == 1;
        }
        while (v21 != 10)
        {
          unsigned __int8 v22 = *++sql;
          int v21 = v22;
          if (!v22) {
            return v2 == 1;
          }
        }

        goto LABEL_4;
      case 0x2Fu:
        if (sql[1] != 42) {
          goto LABEL_10;
        }
        sql += 3;
LABEL_48:
        if (*(sql - 1) == 42)
        {
          if (*sql != 47) {
            goto LABEL_47;
          }
LABEL_4:
          uint64_t v3 = 1LL;
LABEL_5:
          unsigned int v2 = byte_1813C6AB4[8 * v2 + v3];
          int v4 = *(unsigned __int8 *)++sql;
          unsigned __int8 v1 = v4;
          if (!v4) {
            return v2 == 1;
          }
          continue;
        }

        if (*(sql - 1))
        {
LABEL_47:
          ++sql;
          goto LABEL_48;
        }

        return 0;
      case 0x3Bu:
        goto LABEL_5;
      case 0x5Bu:
        do
        {
          int v8 = *(unsigned __int8 *)++sql;
          int v7 = v8;
          if (!v8) {
            return 0;
          }
        }

        while (v7 != 93);
LABEL_10:
        uint64_t v3 = 2LL;
        goto LABEL_5;
      default:
        if ((byte_1813C6558[v1] & 0x46) == 0) {
          goto LABEL_10;
        }
        uint64_t v9 = 0LL;
        uint64_t v10 = 0xFFFFFFFF00000000LL;
        do
        {
          char v11 = byte_1813C6558[sql[v9 + 1]];
          v10 += 0x100000000LL;
          ++v9;
        }

        while ((v11 & 0x46) != 0);
        unsigned int v12 = (char)v1 - 67;
        if (v12 > 0x31) {
          goto LABEL_200;
        }
        if (((1LL << v12) & 0x100000001LL) == 0)
        {
          if (((1LL << v12) & 0x400000004LL) == 0)
          {
            uint64_t v3 = 2LL;
            if (((1LL << v12) & 0x2000000020000LL) == 0) {
              goto LABEL_201;
            }
            if ((_DWORD)v9 != 4)
            {
              if ((_DWORD)v9 != 9)
              {
                if ((_DWORD)v9 != 7) {
                  goto LABEL_200;
                }
                if (!v1)
                {
                  int v54 = 0;
                  uint64_t v20 = "trigger";
                  goto LABEL_188;
                }

                if ((v1 & 0xDF) == 0x54)
                {
                  uint64_t v13 = *((unsigned __int8 *)sql + 1);
                  if (!sql[1])
                  {
                    int v54 = 0;
                    uint64_t v20 = "rigger";
                    goto LABEL_188;
                  }

                  if ((v13 & 0xFFFFFFDF) == 0x52)
                  {
                    uint64_t v14 = *((unsigned __int8 *)sql + 2);
                    if (!sql[2])
                    {
                      int v54 = 0;
                      uint64_t v20 = "igger";
                      goto LABEL_188;
                    }

                    if ((v14 & 0xFFFFFFDF) == 0x49)
                    {
                      uint64_t v15 = *((unsigned __int8 *)sql + 3);
                      if (!sql[3])
                      {
                        int v54 = 0;
                        uint64_t v20 = "gger";
                        goto LABEL_188;
                      }

                      if ((v15 & 0xFFFFFFDF) == 0x47)
                      {
                        uint64_t v16 = *((unsigned __int8 *)sql + 4);
                        if (!sql[4])
                        {
                          int v54 = 0;
                          uint64_t v20 = "ger";
                          goto LABEL_188;
                        }

                        if ((v16 & 0xFFFFFFDF) == 0x47)
                        {
                          uint64_t v17 = *((unsigned __int8 *)sql + 5);
                          if (!sql[5])
                          {
                            int v54 = 0;
                            uint64_t v20 = "er";
                            goto LABEL_188;
                          }

                          if ((v17 & 0xFFFFFFDF) == 0x45)
                          {
                            uint64_t v18 = *((unsigned __int8 *)sql + 6);
                            if (!sql[6])
                            {
                              int v54 = 0;
                              uint64_t v20 = "r";
LABEL_188:
                              if (v54 == byte_1813C6343[*v20])
                              {
LABEL_189:
                                uint64_t v3 = 6LL;
                                goto LABEL_201;
                              }

int sqlite3_complete16(const void *sql)
{
  int v2 = sqlite3_initialize();
  if (v2) {
    return v2;
  }
  uint64_t v3 = sub_18126F0AC(64LL);
  if (!v3) {
    return 7;
  }
  uint64_t v4 = v3;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)(v3 + 20) = 1;
  *(void *)(v3 + 24) = 0LL;
  sub_181269368(v3, (char *)sql, -1LL, 2u, 0LL);
  int v5 = *(unsigned __int16 *)(v4 + 20);
  if ((~v5 & 0x202) != 0 || *(_BYTE *)(v4 + 22) != 1)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_11;
    }
    int v6 = (const char *)sub_181303998((int *)v4, 1);
    if (!v6) {
      goto LABEL_11;
    }
LABEL_9:
    int v2 = sqlite3_complete(v6);
    goto LABEL_12;
  }

  int v6 = *(const char **)(v4 + 8);
  if (v6) {
    goto LABEL_9;
  }
LABEL_11:
  int v2 = 7;
LABEL_12:
  if ((*(_WORD *)(v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v4 + 32)) {
    sub_181303838(v4);
  }
  sub_1812F20DC(*(void **)(v4 + 24), (void *)v4);
  return v2;
}

uint64_t sub_1812DEB68(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = sub_1812F2264(a1, 0x40uLL);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_18126F0AC(64LL);
    if (!result) {
      return result;
    }
  }

  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_WORD *)(result + 20) = 1;
  *(void *)(result + 24) = a1;
  return result;
}

const char *sqlite3_libversion(void)
{
  return sqlite3_version;
}

int sqlite3_libversion_number(void)
{
  return 3043002;
}

int sqlite3_threadsafe(void)
{
  return 2;
}

void sub_1812DEBE0()
{
  for (uint64_t i = 0LL; i != 5; ++i)
  {
    int v2 = (char *)&qword_18C467CB8[9 * i];
    uint64_t v3 = (char *)*((void *)v2 + 7);
    if (v3) {
      int v4 = strlen(*((const char **)v2 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v4 = 0;
    }
    int v5 = (void *)&xmmword_18C468BD0 + (v4 + *v3) % 23;
    int v6 = (void *)*v5;
    if (!*v5)
    {
LABEL_2:
      unsigned __int8 v1 = (char *)&qword_18C467CB8[9 * i];
      *((void *)v1 + 2) = 0LL;
      *((void *)v1 + 8) = v6;
      goto LABEL_3;
    }

    int v7 = (void *)*v5;
LABEL_9:
    int v8 = (_BYTE *)v7[7];
    for (uint64_t j = (unsigned __int8 *)*((void *)v2 + 7); ; ++j)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = *j;
      if ((_DWORD)v10 == (_DWORD)v11) {
        break;
      }
      if (byte_1813C6343[v10] != byte_1813C6343[v11])
      {
        int v7 = (void *)v7[8];
        if (v7) {
          goto LABEL_9;
        }
        goto LABEL_2;
      }

uint64_t sub_1812DF0C4()
{
  uint64_t v0 = (uint64_t (*)(void))xmmword_18C465438;
  if (!(void)xmmword_18C465438)
  {
    if (dword_18C4654C4) {
      BOOL v1 = dword_18C4654C0 == 0;
    }
    else {
      BOOL v1 = 1;
    }
    BOOL v2 = v1 || qword_18C4654B8 == 0;
    uint64_t v3 = &unk_189B6EB60;
    if (v2) {
      uint64_t v3 = &unk_189B6EBC8;
    }
    sqlite3_config(18, v3);
    uint64_t v0 = (uint64_t (*)(void))xmmword_18C465438;
  }

  return v0(*((void *)&xmmword_18C465428 + 1));
}

uint64_t sub_1812DF138()
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v1 = sub_18126F0AC(10LL);
  if (!v1) {
    return 7LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_10;
    }
    uint64_t v3 = &xmmword_18C465410;
  }

  (*v3)(v2);
LABEL_10:
  sqlite3_os_init();
  return 0LL;
}

uint64_t sub_1812DF200()
{
  if (sqlite3_initialize()) {
    return 1LL;
  }
  if ((_BYTE)word_18C465384 && (uint64_t v1 = qword_18C4653F0(2LL)) != 0)
  {
    uint64_t v2 = v1;
    xmmword_18C465400(v1);
    uint64_t v3 = qword_18C468B68;
    xmmword_18C465410(v2);
    if (!v3) {
      return 1LL;
    }
  }

  else
  {
    uint64_t v3 = qword_18C468B68;
    if (!qword_18C468B68) {
      return 1LL;
    }
  }

  unsigned int v4 = *(_DWORD *)(v3 + 4);
  *(void *)algn_18C465F98 = v3;
  if (v4 <= 0x18) {
    unsigned int v4 = 24;
  }
  dword_18C465F7C = v4;
  uint64_t result = sqlite3_initialize();
  if (!(_DWORD)result)
  {
    if ((_BYTE)word_18C465384)
    {
      uint64_t v5 = qword_18C4653F0(2LL);
      uint64_t v6 = v5;
      if (v5)
      {
        xmmword_18C465400(v5);
        char v7 = 0;
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    char v7 = 1;
LABEL_17:
    int v8 = &qword_18C468B68;
    uint64_t v9 = qword_18C468B68;
    if ((_UNKNOWN *)qword_18C468B68 != &unk_18C465F78)
    {
      if (!qword_18C468B68) {
        goto LABEL_30;
      }
      uint64_t v10 = (void *)qword_18C468B68;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (void *)v10[2];
        if (v10) {
          BOOL v12 = v10 == (void *)&unk_18C465F78;
        }
        else {
          BOOL v12 = 1;
        }
      }

      while (!v12);
      if (v10 != (void *)&unk_18C465F78)
      {
LABEL_28:
        if (v9)
        {
          uint64_t v15 = *(void *)(v9 + 16);
          uint64_t v13 = (uint64_t *)(v9 + 16);
          uint64_t v14 = v15;
LABEL_31:
          qword_18C465F88 = v14;
          *uint64_t v13 = (uint64_t)&unk_18C465F78;
          if ((v7 & 1) == 0) {
            xmmword_18C465410(v6);
          }
          return 0LL;
        }

void *sub_1812DF384(void *result, int a2, int a3)
{
  if ((_DWORD)xmmword_18C550600)
  {
    if (result) {
      int v3 = a3;
    }
    else {
      int v3 = 0;
    }
    if (v3) {
      BOOL v4 = result == 0LL;
    }
    else {
      BOOL v4 = 1;
    }
    signed int v5 = a2 & 0xFFFFFFF8;
    dword_18C550638 = v3;
    if (v4) {
      signed int v5 = 0;
    }
    HIDWORD(xmmword_18C550600) = v5;
    dword_18C550610 = v3;
    if (v3 < 91)
    {
      dword_18C550614 = v3 / 10 + 1;
      qword_18C550618 = (uint64_t)result;
      qword_18C550630 = 0LL;
      dword_18C55063C = 0;
      if (!v3)
      {
LABEL_16:
        *(void *)&xmmword_18C550620 = result;
        return result;
      }
    }

    else
    {
      dword_18C550614 = 10;
      qword_18C550618 = (uint64_t)result;
      dword_18C55063C = 0;
    }

    uint64_t v6 = 0LL;
    do
    {
      void *result = v6;
      uint64_t v6 = result;
      uint64_t result = (void *)((char *)result + v5);
      --v3;
    }

    while (v3);
    qword_18C550630 = (uint64_t)result - v5;
    goto LABEL_16;
  }

  return result;
}

int sqlite3_shutdown(void)
{
  if ((_DWORD)qword_18C4654D4)
  {
    os_unfair_recursive_lock_lock_with_options();
    HIDWORD(qword_18C4654D4) = 1;
    if (!(_DWORD)qword_18C4654D4)
    {
      qword_18C4654D4 = 0LL;
      os_unfair_recursive_lock_unlock();
      return 0;
    }

    qword_18C468B90 = 0LL;
    if (!sqlite3_initialize())
    {
      if ((_BYTE)word_18C465384)
      {
        uint64_t v0 = qword_18C4653F0(2LL);
        if (v0)
        {
          uint64_t v1 = v0;
          xmmword_18C465400(v0);
          xmmword_18C465410(v1);
        }
      }
    }

    qword_18C4654D4 = 0LL;
    os_unfair_recursive_lock_unlock();
  }

  if (dword_18C4654E4)
  {
    if (*((void *)&xmmword_18C465438 + 1)) {
      (*((void (**)(void))&xmmword_18C465438 + 1))(*((void *)&xmmword_18C465428 + 1));
    }
    dword_18C4654E4 = 0;
  }

  if (dword_18C4654E0)
  {
    if (off_18C4653D0) {
      off_18C4653D0(qword_18C4653D8);
    }
    xmmword_18C468B70 = 0u;
    *(_OWORD *)&qword_18C468B80 = 0u;
    dword_18C4654E0 = 0;
    sqlite3_data_directory = 0LL;
    sqlite3_temp_directory = 0LL;
  }

  if (dword_18C4654DC)
  {
    if (*(&xmmword_18C4653E0 + 1)) {
      ((void (*)(void))*(&xmmword_18C4653E0 + 1))();
    }
    dword_18C4654DC = 0;
  }

  return 0;
}

uint64_t sub_1812DF5A8()
{
  if (dword_18C4654C4) {
    BOOL v0 = dword_18C4654C0 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  BOOL v1 = v0 || qword_18C4654B8 == 0;
  uint64_t v2 = &unk_189B6EB60;
  if (v1) {
    uint64_t v2 = &unk_189B6EBC8;
  }
  return sqlite3_config(18, v2);
}

sqlite3_mutex *__cdecl sqlite3_db_mutex(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return (sqlite3_mutex *)*((void *)a1 + 3);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186024);
  return 0LL;
}

int sqlite3_db_release_memory(sqlite3 *a1)
{
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_18;
  }

  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    int v3 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1812CF36C(186039);
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      int v3 = "invalid";
      goto LABEL_18;
    }

    goto LABEL_5;
  }

  uint64_t v4 = *((void *)a1 + 3);
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA020((uint64_t)a1);
  }
  int v5 = *((_DWORD *)a1 + 10);
  if (v5 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 8LL;
    do
    {
      uint64_t v8 = *(void *)(*((void *)a1 + 4) + v7);
      if (v8 && off_18C465488)
      {
        ((void (*)(void))off_18C465488)(*(void *)(*(void *)(**(void **)(v8 + 8) + 336LL) + 72LL));
        int v5 = *((_DWORD *)a1 + 10);
      }

      ++v6;
      v7 += 32LL;
    }

    while (v6 < v5);
  }

  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA0B4((uint64_t)a1);
  }
  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_18C465410(v10);
  }
  return 0;
}

int sqlite3_db_cacheflush(sqlite3 *a1)
{
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_34;
  }

  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    int v3 = "unopened";
LABEL_34:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1812CF36C(186065);
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      int v3 = "invalid";
      goto LABEL_34;
    }

    goto LABEL_5;
  }

  uint64_t v4 = *((void *)a1 + 3);
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA020((uint64_t)a1);
  }
  uint64_t v5 = 0LL;
  int v6 = 0;
  while (1)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *((int *)a1 + 10);
    if (v5 >= v8) {
      break;
    }
    uint64_t v9 = *(void *)(*((void *)a1 + 4) + 32 * v5 + 8);
    if (v9 && *(_BYTE *)(v9 + 16) == 2)
    {
      uint64_t v10 = **(void **)(v9 + 8);
      int v11 = *(_DWORD *)(v10 + 48);
      if (!*(_BYTE *)(v10 + 19))
      {
        BOOL v12 = sub_1812FF3A4(*(uint64_t **)(v10 + 336));
        if (!v11 && v12 != 0LL)
        {
          uint64_t v14 = (uint64_t)v12;
          do
          {
            uint64_t v15 = *(void *)(v14 + 32);
            if (*(void *)(v14 + 56))
            {
              int v11 = 0;
            }

            else
            {
              int v11 = sub_1812FADB0(v10, v14);
              if (v11) {
                break;
              }
            }

            uint64_t v14 = v15;
          }

          while (v15);
        }
      }

      if (v11 == 5) {
        int v16 = 0;
      }
      else {
        int v16 = v11;
      }
      if (v11 == 5) {
        int v6 = 1;
      }
      uint64_t v5 = v7 + 1;
      if (v16) {
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v5 = v7 + 1;
    }
  }

  int v16 = 0;
LABEL_36:
  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA0B4((uint64_t)a1);
  }
  uint64_t v18 = *((void *)a1 + 3);
  if (v18) {
    xmmword_18C465410(v18);
  }
  if (v6) {
    BOOL v19 = v7 < v8;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    return v16;
  }
  else {
    return 5;
  }
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  uint64_t v14 = va_arg(va, void *);
  uint64_t v15 = va_arg(va, int *);
  uint64_t v16 = va_arg(va, void);
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_12;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(186093);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_12;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (v6) {
    xmmword_18C465400(v6);
  }
  uint64_t v7 = 0LL;
  switch(op)
  {
    case 1000:
      int v8 = 0;
      **((void **)a1 + 4) = v14;
      goto LABEL_43;
    case 1001:
      int v8 = sub_1812DFC58((uint64_t)a1, v14, (int)v15, v16);
      goto LABEL_43;
    case 1002:
      goto LABEL_34;
    case 1003:
      uint64_t v7 = 1LL;
      goto LABEL_34;
    case 1004:
      if ((dword_18C465544 & 0x80) == 0)
      {
        uint64_t v7 = 3LL;
LABEL_34:
        uint64_t v10 = *((void *)a1 + 6);
        if ((int)v14 < 1)
        {
          if ((_DWORD)v14)
          {
LABEL_41:
            int v8 = 0;
            if (v15) {
              int *v15 = (*((void *)a1 + 6) & *((unsigned int *)&unk_1813C6AF4 + 2 * v7 + 1)) != 0LL;
            }
            goto LABEL_43;
          }

          unint64_t v11 = v10 & ~(unint64_t)*((unsigned int *)&unk_1813C6AF4 + 2 * v7 + 1);
        }

        else
        {
          unint64_t v11 = v10 | *((unsigned int *)&unk_1813C6AF4 + 2 * v7 + 1);
        }

        *((void *)a1 + 6) = v11;
        if (v10 != v11)
        {
          for (uint64_t i = *((void *)a1 + 1); i; uint64_t i = *(void *)(i + 16))
            *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
        }

        goto LABEL_41;
      }

      int v8 = 0;
      if (v15) {
        int *v15 = (*((_DWORD *)a1 + 12) >> 22) & 1;
      }
LABEL_43:
      uint64_t v13 = *((void *)a1 + 3);
      if (v13) {
        xmmword_18C465410(v13);
      }
      return v8;
    case 1005:
      int v8 = sub_1812CF36C(186113);
      goto LABEL_43;
    case 1006:
      uint64_t v7 = 5LL;
      goto LABEL_34;
    case 1007:
      uint64_t v7 = 6LL;
      goto LABEL_34;
    case 1008:
      uint64_t v7 = 7LL;
      goto LABEL_34;
    case 1009:
      uint64_t v7 = 8LL;
      goto LABEL_34;
    case 1010:
      uint64_t v7 = 9LL;
      goto LABEL_34;
    case 1011:
      uint64_t v7 = 10LL;
      goto LABEL_34;
    case 1012:
      uint64_t v7 = 11LL;
      goto LABEL_34;
    case 1013:
      uint64_t v7 = 13LL;
      goto LABEL_34;
    case 1014:
      uint64_t v7 = 12LL;
      goto LABEL_34;
    case 1015:
      uint64_t v7 = 2LL;
      goto LABEL_34;
    case 1016:
      uint64_t v7 = 14LL;
      goto LABEL_34;
    case 1017:
      uint64_t v7 = 15LL;
      goto LABEL_34;
    case 1018:
      uint64_t v7 = 16LL;
      goto LABEL_34;
    case 1019:
      uint64_t v7 = 17LL;
      goto LABEL_34;
    default:
      int v8 = 1;
      goto LABEL_43;
  }

uint64_t sub_1812DFC58(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7 = a1;
  int v8 = *(void **)(a1 + 464);
  if (!v8)
  {
    int v9 = 0;
    uint64_t v10 = *(void **)(a1 + 472);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    int v11 = 0;
    BOOL v12 = *(void **)(a1 + 480);
    if (v12) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  int v9 = 0;
  do
  {
    int v8 = (void *)*v8;
    --v9;
  }

  while (v8);
  uint64_t v10 = *(void **)(a1 + 472);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  int v11 = 0;
  do
  {
    uint64_t v10 = (void *)*v10;
    --v11;
  }

  while (v10);
  BOOL v12 = *(void **)(a1 + 480);
  if (v12)
  {
LABEL_8:
    int v13 = 0;
    do
    {
      BOOL v12 = (void *)*v12;
      --v13;
    }

    while (v12);
    uint64_t v14 = *(void **)(a1 + 488);
    if (v14) {
      goto LABEL_11;
    }
LABEL_17:
    int v15 = 0;
    goto LABEL_18;
  }

void sqlite3_set_last_insert_rowid(sqlite3 *a1, sqlite3_int64 a2)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_11;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1812CF36C(186276);
    return;
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (v6)
  {
    xmmword_18C465400(v6);
    uint64_t v7 = *((void *)a1 + 3);
    *((void *)a1 + 7) = a2;
    if (v7) {
      xmmword_18C465410(v7);
    }
  }

  else
  {
    *((void *)a1 + 7) = a2;
  }

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 15);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186291);
  return 0LL;
}

sqlite3_int64 sqlite3_total_changes64(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 16);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186307);
  return 0LL;
}

int sqlite3_total_changes(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_DWORD *)a1 + 32);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186307);
  return 0;
}

int sqlite3_txn_state(sqlite3 *a1, const char *zSchema)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_30;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1812CF36C(186522);
    return -1;
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_30;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (v6) {
    xmmword_18C465400(v6);
  }
  int v7 = *((_DWORD *)a1 + 10);
  if (!zSchema)
  {
    int v21 = v7 - 1;
    if (v7 >= 1)
    {
      LODWORD(v9) = 0;
      goto LABEL_35;
    }

    goto LABEL_41;
  }

  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = (v7 - 1);
  if ((int)v9 < 0 != v8)
  {
LABEL_41:
    int v11 = -1;
    goto LABEL_42;
  }

  uint64_t v10 = (_BYTE **)(*((void *)a1 + 4) + 32 * v9);
  int v11 = -1;
  while (1)
  {
    BOOL v12 = *v10;
    if (*v10)
    {
      for (uint64_t i = zSchema; ; ++i)
      {
        uint64_t v14 = *v12;
        uint64_t v15 = *(unsigned __int8 *)i;
        if ((_DWORD)v14 == (_DWORD)v15)
        {
          if (!*v12)
          {
            int v21 = v9;
            if ((v9 & 0x80000000) == 0) {
              goto LABEL_35;
            }
            goto LABEL_41;
          }
        }

        else if (byte_1813C6343[v14] != byte_1813C6343[v15])
        {
          break;
        }

        ++v12;
      }
    }

    if (!(_DWORD)v9) {
      break;
    }
LABEL_20:
    v10 -= 4;
    BOOL v16 = (int)v9 <= 0;
    LODWORD(v9) = v9 - 1;
    if (v16) {
      goto LABEL_42;
    }
  }

  uint64_t v17 = zSchema;
  for (uint64_t j = "main"; ; ++j)
  {
    uint64_t v19 = *(unsigned __int8 *)j;
    uint64_t v20 = *(unsigned __int8 *)v17;
    if ((_DWORD)v19 == (_DWORD)v20) {
      break;
    }
    if (byte_1813C6343[v19] != byte_1813C6343[v20]) {
      goto LABEL_20;
    }
LABEL_25:
    ++v17;
  }

  if (*j) {
    goto LABEL_25;
  }
  LODWORD(v9) = 0;
  int v21 = 0;
LABEL_35:
  uint64_t v23 = (uint64_t *)(*((void *)a1 + 4) + 32LL * v9 + 8);
  int v24 = v21 - v9 + 1;
  int v11 = -1;
  do
  {
    uint64_t v25 = *v23;
    if (*v23) {
      LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
    }
    v23 += 4;
    --v24;
  }

  while (v24);
LABEL_42:
  uint64_t v26 = *((void *)a1 + 3);
  if (v26) {
    xmmword_18C465410(v26);
  }
  return v11;
}

uint64_t sub_1812E03C8(uint64_t a1, int a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v4 = mach_continuous_time();
  if (a1)
  {
    uint64_t v5 = v4;
    int v6 = *(unsigned __int8 *)(a1 + 113);
    if (v6 != 109 && v6 != 118 && v6 != 186)
    {
      sqlite3_log(21, "API call with %s database connection pointer", "invalid");
      return sub_1812CF36C(186411);
    }

    uint64_t v7 = *(void *)(a1 + 24);
    if (v7) {
      xmmword_18C465400(v7);
    }
    if ((*(_BYTE *)(a1 + 110) & 8) != 0) {
      (*(void (**)(uint64_t, void, uint64_t, void))(a1 + 240))(8LL, *(void *)(a1 + 248), a1, 0LL);
    }
    if (!*(_BYTE *)(a1 + 111)) {
      sub_1812FA020(a1);
    }
    int v8 = *(_DWORD *)(a1 + 40);
    if (v8 >= 1)
    {
      for (uint64_t i = 0LL; i < v8; ++i)
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32 * i + 24);
        if (v10)
        {
          int v11 = *(void **)(v10 + 16);
          if (v11)
          {
            do
            {
              uint64_t v12 = v11[2];
              if (*(_BYTE *)(v12 + 63) == 1) {
                sub_18135F1D4((void *)a1, v12);
              }
              int v11 = (void *)*v11;
            }

            while (v11);
            int v8 = *(_DWORD *)(a1 + 40);
          }
        }
      }
    }

    for (uint64_t j = *(void **)(a1 + 576); j; uint64_t j = (void *)*j)
    {
      uint64_t v25 = *(void *)(j[2] + 40LL);
      if (v25) {
        sub_18135F1D4((void *)a1, v25);
      }
    }

    sub_18130D9D8((void *)a1);
    if (!*(_BYTE *)(a1 + 111)) {
      sub_1812FA0B4(a1);
    }
    sub_1812A1B68((int *)a1, 0x88u);
    uint64_t v20 = *(void **)(a1 + 8);
    if (!v20)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 40);
      if ((int)v26 < 1)
      {
LABEL_52:
        if (off_18C465508) {
          off_18C465508(qword_18C465510, a1, 0LL, 2LL);
        }
        *(_BYTE *)(a1 + 113) = -89;
        sub_1812D6500(a1, v19);
        if (v5)
        {
          if (qword_18C468CB8 != -1) {
            dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
          }
          int v31 = (os_log_s *)qword_18C468CB0;
          os_signpost_id_t v32 = os_signpost_id_make_with_pointer((os_log_t)qword_18C468CB0, (const void *)a1);
          if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            os_signpost_id_t v33 = v32;
            if (os_signpost_enabled(v31))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v46 = v5;
              __int16 v47 = 2048;
              uint64_t v48 = a1;
              _os_signpost_emit_with_name_impl( &dword_181266000,  v31,  OS_SIGNPOST_INTERVAL_BEGIN,  v33,  "close",  "startTime=%{signpost.description:begin_time}llu db=%p",  buf,  0x16u);
            }

            if (os_signpost_enabled(v31))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl( &dword_181266000,  v31,  OS_SIGNPOST_INTERVAL_END,  v33,  "close",  (const char *)&unk_1813DA246,  buf,  2u);
            }
          }
        }

        return 0LL;
      }

      uint64_t v27 = *(void *)(a1 + 32) + 8LL;
      while (!*(void *)v27 || !*(_DWORD *)(*(void *)v27 + 24LL))
      {
        v27 += 32LL;
        if (!--v26) {
          goto LABEL_52;
        }
      }
    }

    if (a2)
    {
      uint64_t v21 = 28LL;
      if (v20)
      {
LABEL_27:
        uint64_t v22 = *(void *)(*v20 + 24LL);
        if (v22)
        {
          xmmword_18C465400(v22);
          uint64_t v23 = *(void *)(*v20 + 24LL);
          uint64_t v24 = v20[40];
          if (v23) {
            xmmword_18C465410(v23);
          }
          if (v24) {
            goto LABEL_31;
          }
        }

        else if (v20[40])
        {
LABEL_31:
          sqlite3_log(v21, "%s unfinalized statement: %s");
          goto LABEL_51;
        }

        sqlite3_log(v21, "%s unfinalized statement");
LABEL_51:
        if (!a2)
        {
          if ((dword_18C465544 & 0x100) != 0
            && (uint64_t v34 = getprogname(), strcmp(v34, "xctest"))
            && (BOOL v35 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)))
          {
            sub_1813C3D90(v35, v36, v37, v38, v39, v40, v41, v42);
            uint64_t v43 = *(void *)(a1 + 24);
            if (!v43) {
              return v21;
            }
          }

          else
          {
            uint64_t v43 = *(void *)(a1 + 24);
            if (!v43) {
              return v21;
            }
          }

          xmmword_18C465410(v43);
          return v21;
        }

        goto LABEL_52;
      }
    }

    else
    {
      uint64_t v21 = 5LL;
      sub_1812D50CC( a1,  5,  "unable to close due to unfinalized statements or unfinished backups",  v14,  v15,  v16,  v17,  v18,  v44);
      uint64_t v20 = *(void **)(a1 + 8);
      if (v20) {
        goto LABEL_27;
      }
    }

    uint64_t v29 = *(unsigned int *)(a1 + 40);
    if ((int)v29 >= 1)
    {
      uint64_t v30 = *(void *)(a1 + 32) + 8LL;
      while (!*(void *)v30 || !*(_DWORD *)(*(void *)v30 + 24LL))
      {
        v30 += 32LL;
        if (!--v29) {
          goto LABEL_51;
        }
      }

      sqlite3_log(v21, "%s unfinished backup");
    }

    goto LABEL_51;
  }

  return 0LL;
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return sub_1812E03C8((uint64_t)a1, 1);
}

uint64_t sub_1812E0848(void *a1, int a2)
{
  int v4 = *((_DWORD *)a1 + 193);
  uint64_t v5 = *a1;
  if (*(int *)v5 >= 2 && (int v6 = *(void (**)(void))(v5 + 136)) != 0LL)
  {
    v6();
    uint64_t v7 = v13;
    if (!a2)
    {
LABEL_4:
      a1[97] = v7;
      goto LABEL_9;
    }
  }

  else
  {
    (*(void (**)(uint64_t, double *))(v5 + 120))(v5, &v14);
    uint64_t v7 = (uint64_t)(v14 * 86400000.0);
    if (!a2) {
      goto LABEL_4;
    }
  }

  int v8 = v7 - *((_DWORD *)a1 + 194);
  if (v8 < 0) {
    return 0LL;
  }
  if (*((_DWORD *)a1 + 193) > v8)
  {
LABEL_12:
    (*(void (**)(void))(*a1 + 112LL))(*a1);
    return 1LL;
  }

  if (a2 > 46)
  {
    int v10 = 1000;
    int v11 = 1000 * a2 - 38773;
    goto LABEL_10;
  }

LABEL_9:
  uint64_t v9 = 2LL * a2;
  int v10 = *(unsigned __int16 *)((char *)&unk_1813CAA54 + v9);
  int v11 = *(unsigned __int16 *)((char *)&unk_1813CAAB2 + v9);
LABEL_10:
  if (v10 + v11 <= v4 || v4 - v11 >= 1) {
    goto LABEL_12;
  }
  return 0LL;
}

  int v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_18C465410(v10);
  }
  return v9;
}

  int v11 = sub_1812A4978;
LABEL_10:
  *((_BYTE *)a2 + 31) = 0;
  if (*(_BYTE *)a1) {
    goto LABEL_11;
  }
  uint64_t v41 = *(void *)(a1 + 136);
  if (!*(_BYTE *)(v41 + 8)) {
    goto LABEL_11;
  }
  if (*(char *)(a1 + 84) >= 1)
  {
    uint64_t v42 = 0LL;
    while (*(unsigned __int16 *)(a1 + 144 + 2 * v42 - 56) >= *(unsigned __int16 *)(*(void *)(a1 + 144 + 8 * v42)
                                                                                                + 24LL))
    {
    }

    goto LABEL_11;
  }

  int v6 = sub_1812B8054(*((unsigned __int8 **)a1 + 1), (double *)a1, v3, *((unsigned __int8 *)a1 + 22));
  if (v6 <= 0)
  {
  }

  else if (v6 == 1 {
         && !sub_181303E28(*((unsigned __int8 **)a1 + 1), &v8, a1[4], *((unsigned __int8 *)a1 + 22)))
  }
  {
LABEL_15:
    uint64_t v5 = v8;
    goto LABEL_16;
  }

  return 8LL;
}

  uint64_t result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

        ;
      }
    }
  }

  int v11 = *(int **)(a2 + 40);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11 >= 1)
    {
      uint64_t v13 = 0LL;
      do
      {
        double v14 = *(void **)(v2 + 408);
        if (v14)
        {
          while (*v14 != *(void *)&v11[26 * v13 + 6])
          {
            double v14 = (void *)v14[3];
            if (!v14) {
              goto LABEL_25;
            }
          }

          void *v14 = 0LL;
        }

    ++v16;
    uint64_t v20 = *v7;
    v18 += 6;
    v15 += 64LL;
  }

  while (v16 < v20);
  uint64_t v29 = *((void *)v36 + 2);
  v41[0] = v36;
  v41[1] = v35;
  v41[3] = 0LL;
  if ((int)v20 >= 1)
  {
    uint64_t v30 = 0LL;
    int v31 = 0LL;
    os_signpost_id_t v32 = 2LL;
    do
    {
      os_signpost_id_t v33 = *(unsigned __int8 **)&v7[v32];
      uint64_t v39 = 0LL;
      __s = 0LL;
      uint64_t v38 = 0LL;
      uint64_t result = sub_181322C20(v41, v33, &__s, &v39, (const char **)&v38);
      if (!*(_BYTE *)(*(void *)v29 + 103LL))
      {
        uint64_t v34 = result;
        uint64_t result = (_BYTE *)sub_181269368( *(void *)(v29 + 152) + ((unint64_t)*(unsigned __int16 *)(v29 + 262) << 7) + v30,  __s,  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if (!*(_BYTE *)(*(void *)v29 + 103LL))
        {
          uint64_t result = (_BYTE *)sub_181269368( *(void *)(v29 + 152) + 192LL * *(unsigned __int16 *)(v29 + 262) + v30,  v39,  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          if (!*(_BYTE *)(*(void *)v29 + 103LL))
          {
            uint64_t result = (_BYTE *)sub_181269368( *(void *)(v29 + 152) + ((unint64_t)*(unsigned __int16 *)(v29 + 262) << 8) + v30,  v38,  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            if (!*(_BYTE *)(*(void *)v29 + 103LL)) {
              uint64_t result = (_BYTE *)sub_181269368( *(void *)(v29 + 152) + ((v31 + *(unsigned __int16 *)(v29 + 262)) << 6),  v34,  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            }
          }
        }
      }

      ++v31;
      v30 += 64LL;
      v32 += 6LL;
    }

    while (v31 < *v7);
  }

  return result;
}

      uint64_t v13 = *(void *)(v13 + 64);
    }

    while (v13);
  }

  return result;
}

    if (a1)
    {
      int v8 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_181303888((int *)v8);
        return;
      }

      double v14 = 1;
      goto LABEL_55;
    }

    uint64_t v12 = 97451;
LABEL_36:
    sub_1812CF36C(v12);
    return;
  }

  uint64_t v13 = *(unsigned __int8 *)(v4 + 22);
  if (v13 <= 1)
  {
    if ((v5 & 2) == 0 || v13 != 1)
    {
      if ((v5 & 0x10) == 0)
      {
        if ((v5 & 1) == 0)
        {
LABEL_30:
          uint64_t v15 = 1;
LABEL_46:
          uint64_t v7 = sub_181303970(v4, v15);
          goto LABEL_51;
        }

        goto LABEL_56;
      }

      goto LABEL_47;
    }

    int v10 = a2[3];
    uint64_t result = strlen((const char *)(a2[1] + v10));
    a2[3] = v10 + (int)result;
  }

  return result;
}

  int v10 = (void *)(*(void *)(v7 + 40) + 8LL * (a3 % v8));
  do
  {
    int v11 = v10;
    uint64_t v12 = *v10;
    int v10 = (void *)(*v10 + 24LL);
  }

  while (v12 != a2);
  *int v11 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v7 + 40);
  double v14 = 8LL * (a4 % v8);
  uint64_t v15 = *(void *)(v13 + v14);
  *(_DWORD *)(a2 + 16) = a4;
  *(void *)(a2 + 24) = v15;
  *(void *)(v13 + v14) = a2;
  if (*(_DWORD *)(v7 + 120) < a4) {
    *(_DWORD *)(v7 + 120) = a4;
  }
  return result;
}

        int v4 = "unopened";
LABEL_16:
        sqlite3_log(21, "API call with %s database connection pointer", v4);
        return sub_1812CF36C(161272);
      }
    }
  }

  return result;
}

  int v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_14:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v4 = &xmmword_18C465410;
    goto LABEL_14;
  }

  return 0LL;
}

  if (!*(_BYTE *)(v1 + 5))
  {
    int v4 = *(void *)(v1 + 40);
    if (v4)
    {
      uint64_t v5 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
        --qword_18C468B10;
        off_18C4653A8(v4);
        int v4 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_17;
        }
        uint64_t v5 = &xmmword_18C465410;
      }

      (*v5)(v4);
    }
  }

  int v4 = *(void **)(v1 + 56);
  if (v4)
  {
    uint64_t v5 = (sqlite3_stmt *)v4[3];
    int v6 = (void *)v4[4];
    uint64_t v7 = v6[3];
    if (v7) {
      xmmword_18C465400(v7);
    }
    sub_1812F20DC(v6, v4);
    int v8 = v6[3];
    if (v8) {
      xmmword_18C465410(v8);
    }
    uint64_t result = sqlite3_finalize(v5);
  }

  *(void *)(v1 + 56) = 0LL;
LABEL_16:
  *(void *)(v1 + 40) = 0LL;
  return result;
}

  *(void *)(v1 + 40) = 0LL;
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

  sub_181377688(a1);
  if (!*(_BYTE *)(a1 + 461) || *(_DWORD *)(a1 + 96) != 255 || !*(_DWORD *)(a1 + 100)) {
    return 0LL;
  }
  int v11 = 0LL;
  uint64_t v9 = sub_1813636A8((uint64_t *)a1, 22, &v11, 0LL);
  if (!(_DWORD)v9)
  {
    uint64_t v5 = v11;
    sqlite3_bind_int64(v11, 1, 2LL);
    int v6 = sqlite3_step(v5);
    if (v6 == 101)
    {
      int v8 = 0;
    }

    else
    {
      if (v6 != 100) {
        return sqlite3_reset(v5);
      }
      uint64_t v7 = sqlite3_column_int(v5, 0);
      if (v7 == 1) {
        int v8 = 8;
      }
      else {
        int v8 = v7;
      }
    }

    *(_DWORD *)(a1 + 96) = v8;
    return sqlite3_reset(v5);
  }

  return v9;
}

        (*(void (**)(char *))(v10 + 32))(v12);
        *a5 += v17;
        if (v16 == 101) {
          return 0LL;
        }
        else {
          return v16;
        }
      }
    }
  }

  else
  {
    int v11 = 0LL;
    *a5 = 0;
  }

  return v11;
}

  int v4 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v4)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v4 = &xmmword_18C465410;
    return (*v4)(v1);
  }

  return result;
}

  uint64_t v13 = a5[1];
  unsigned int v75 = v9;
  if (v13)
  {
    double v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
    {
      if ((v14 & 1) != 0) {
        uint64_t v13 = 0LL;
      }
      else {
        uint64_t v13 = sub_181303998((int *)v13, 1);
      }
    }

    else
    {
      uint64_t v13 = *(void *)(v13 + 8);
    }
  }

  if (v13) {
    uint64_t v15 = (char *)v13;
  }
  else {
    uint64_t v15 = &byte_1813CEAEE;
  }
  *((void *)&v94 + 1) = v15;
  uint64_t v16 = a5[2];
  if (v16)
  {
    uint64_t v17 = *(unsigned __int16 *)(v16 + 20);
    if ((~v17 & 0x202) != 0 || *(_BYTE *)(v16 + 22) != 1)
    {
      if ((v17 & 1) != 0) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = sub_181303998((int *)v16, 1);
      }
    }

    else
    {
      uint64_t v16 = *(void *)(v16 + 8);
    }
  }

  if (v16) {
    uint64_t v18 = (char *)v16;
  }
  else {
    uint64_t v18 = &byte_1813CEAEE;
  }
  *(void *)&__int128 v95 = v18;
  LODWORD(v94) = -1;
  double v19 = a5[3];
  if (v19)
  {
    uint64_t v20 = *(unsigned __int16 *)(v19 + 20);
    if ((~v20 & 0x202) != 0 || *(_BYTE *)(v19 + 22) != 1)
    {
      if ((v20 & 1) != 0) {
        double v19 = 0LL;
      }
      else {
        double v19 = sub_181303998((int *)v19, 1);
      }
    }

    else
    {
      double v19 = *(void *)(v19 + 8);
    }
  }

  if (v19) {
    uint64_t v21 = (char *)v19;
  }
  else {
    uint64_t v21 = &byte_1813CEAEE;
  }
  __s = v21;
  uint64_t v22 = a5[4];
  if (v22)
  {
    uint64_t v23 = *(_WORD *)(v22 + 20);
    if ((v23 & 0x24) != 0)
    {
      uint64_t v77 = *(double *)v22;
    }

    else if ((v23 & 8) != 0)
    {
      uint64_t v66 = *(double *)v22;
      if (*(double *)v22 >= -9.22337204e18)
      {
        if (v66 <= 9.22337204e18) {
          *(void *)&uint64_t v77 = (uint64_t)v66;
        }
        else {
          LODWORD(v77) = -1;
        }
      }

      else
      {
        LODWORD(v77) = 0;
      }
    }

    else if ((v23 & 0x12) != 0 && *(void *)(v22 + 8))
    {
      LODWORD(v77) = sub_181303DF0(v22);
    }

    else
    {
      LODWORD(v77) = 0;
    }
  }

  else
  {
    sub_1812CF36C(89717);
    LODWORD(v77) = 0;
  }

  uint64_t v24 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  uint64_t v25 = sqlite3_initialize();
  uint64_t v26 = 0LL;
  uint64_t v27 = 7;
  int v28 = 1;
  if (v24 >= 1 && !v25)
  {
    uint64_t v26 = (_BYTE *)sub_18126F0AC(v24);
    if (v26)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, char *))(a1 + 64))(a2, (char *)&v92 + 4);
      int v28 = 0;
    }

    else
    {
      int v28 = 1;
    }
  }

  uint64_t v90 = 0u;
  unsigned int v91 = 0u;
  unsigned int v74 = (_DWORD *)a3;
  uint64_t v73 = v28;
  uint64_t v79 = LODWORD(v12) & ~(SLODWORD(v12) >> 31);
  if (v9 >= 1)
  {
    uint64_t v29 = 0LL;
    int v82 = 0;
    uint64_t v78 = 0;
    int v76 = LODWORD(v12);
    uint64_t v80 = v26;
    uint64_t v81 = v24;
    uint64_t v30 = LODWORD(v77);
    while ((LODWORD(v12) & 0x80000000) == 0 && (_DWORD)v29 != LODWORD(v12))
    {
LABEL_60:
      uint64_t v29 = (v29 + 1);
      if ((_DWORD)v29 == v9) {
        goto LABEL_124;
      }
    }

    LODWORD(v90) = 0;
    DWORD2(v90) = 0;
    int v31 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned int *))(a1 + 88))( a2,  v29,  (char *)&v91 + 8,  &v89);
    if (!v31)
    {
      int v31 = (*(uint64_t (**)(uint64_t, void, void, __int128 *, void))(a1 + 40))( a2,  *((void *)&v91 + 1),  v89,  &v90,  sub_1813A4F50);
      if (!v31)
      {
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(a1 + 96))(a2, v29, &v88);
        if (!v31)
        {
          if (SHIDWORD(v92) < 1)
          {
            uint64_t v27 = 0;
            goto LABEL_60;
          }

          os_signpost_id_t v32 = 0LL;
          while (1)
          {
            uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, char *, int *, int *))(a1 + 72))( a2,  v32,  v87,  &v86,  &v85);
            uint64_t v27 = v34;
            if (v86 == (_DWORD)v29)
            {
              if (v85 > v88)
              {
                uint64_t v27 = 267;
                goto LABEL_60;
              }

              if (v34) {
                goto LABEL_60;
              }
              bzero(v26, v81);
              BOOL v35 = sub_1813A50C4(a1, a2, v88, (uint64_t)v26, v29, v85, v30, &v83, &v84);
              if (v35)
              {
                uint64_t v27 = v35;
                goto LABEL_60;
              }

              if (v83 > v82)
              {
                uint64_t v78 = v84;
                uint64_t v79 = v29;
                LODWORD(v92) = v88;
                int v82 = v83;
              }

              uint64_t v27 = 0;
              uint64_t v36 = DWORD2(v90);
              if (DWORD2(v90) && v88 > v30)
              {
                uint64_t v37 = 0LL;
                if (SDWORD2(v90) <= 1) {
                  uint64_t v36 = 1;
                }
                uint64_t v38 = (v36 - 1);
                while (v38 != v37)
                {
                  uint64_t v39 = v37 + 1;
                  uint64_t v40 = *(_DWORD *)(v91 + 4 + 4 * v37++);
                  if (v40 > v85)
                  {
                    uint64_t v38 = v39 - 1;
                    break;
                  }
                }

                if (*(_DWORD *)(v91 + 4 * v38) >= v85)
                {
                  uint64_t v27 = 0;
                }

                else
                {
                  bzero(v26, v81);
                  uint64_t v41 = *(int *)(v91 + 4 * v38);
                  v99[0] = 0LL;
                  __int128 v98 = 0;
                  uint64_t v42 = (*(uint64_t (**)(uint64_t, int *))(a1 + 64))(a2, &v97);
                  if (v97 >= 1 && v42 == 0)
                  {
                    char v44 = 0;
                    uint64_t v45 = 1;
                    do
                    {
                      uint64_t v27 = (*(uint64_t (**)(uint64_t, void, char *, void *, int *))(a1 + 72))( a2,  (v45 - 1),  (char *)v99 + 4,  v99,  &v98);
                      if (v27) {
                        __int16 v47 = 0;
                      }
                      else {
                        __int16 v47 = LODWORD(v99[0]) == (_DWORD)v29;
                      }
                      if (v47 && v98 >= (int)v41 && SLODWORD(v77) + v41 > v98)
                      {
                        if (v80[SHIDWORD(v99[0])]) {
                          ++v44;
                        }
                        else {
                          v44 += 1000;
                        }
                        v80[SHIDWORD(v99[0])] = 1;
                        (*(void (**)(uint64_t))(a1 + 56))(a2);
                      }

                      if (v27) {
                        uint64_t v46 = 0;
                      }
                      else {
                        uint64_t v46 = v45 < v97;
                      }
                      ++v45;
                    }

                    while (v46);
                    uint64_t v26 = v80;
                    uint64_t v9 = v75;
                  }

                  else
                  {
                    uint64_t v27 = v42;
                    char v44 = 0;
                  }

                  uint64_t v30 = LODWORD(v77);
                  uint64_t v49 = *(_DWORD *)(v91 + 4 * v38);
                  if (v49) {
                    __int128 v50 = 100;
                  }
                  else {
                    __int128 v50 = 120;
                  }
                  if (v27)
                  {
                    LODWORD(v12) = v76;
                  }

                  else
                  {
                    __int128 v51 = v50 + v44;
                    LODWORD(v12) = v76;
                    if (v51 > v82)
                    {
                      uint64_t v27 = 0;
                      LODWORD(v92) = v88;
                      uint64_t v78 = v49;
                      uint64_t v79 = v29;
                      int v82 = v51;
                    }
                  }
                }
              }
            }

            os_signpost_id_t v32 = (v32 + 1);
            if (v27) {
              os_signpost_id_t v33 = 0;
            }
            else {
              os_signpost_id_t v33 = (int)v32 < SHIDWORD(v92);
            }
            if (!v33) {
              goto LABEL_60;
            }
          }
        }
      }
    }

    uint64_t v27 = v31;
    goto LABEL_125;
  }

  uint64_t v78 = 0;
  uint64_t v30 = LODWORD(v77);
LABEL_124:
  if (v27)
  {
LABEL_125:
    int v52 = v74;
    int v53 = v73;
    int v54 = v78;
    int v55 = v79;
    if (!*((void *)&v95 + 1)) {
      goto LABEL_162;
    }
    goto LABEL_130;
  }

  int v55 = v79;
  __int128 v56 = (*(uint64_t (**)(uint64_t, void, char *, __int128 *))(a1 + 88))(a2, v79, (char *)&v95 + 8, &v96);
  int v52 = v74;
  int v53 = v73;
  int v54 = v78;
  uint64_t v27 = v56;
  if (!*((void *)&v95 + 1)) {
    goto LABEL_162;
  }
LABEL_130:
  if (!v27) {
    uint64_t v27 = sub_1813A527C(a1, a2, v55, (uint64_t)v93);
  }
  HIDWORD(v93[2]) = v54;
  LODWORD(v94) = v30 + v54 - 1;
  if (v54 >= 1 && !v27)
  {
    __int128 v57 = strlen(__s);
    *((void *)&v96 + 1) = sqlite3_mprintf("%z%.*s", *((void *)&v96 + 1), v57, __s);
    if (*((void *)&v96 + 1)) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = 7;
    }
  }

  uint64_t v26 = 0u;
  uint64_t v27 = 0u;
  uint64_t v25 = 0u;
  memset(v24, 0, sizeof(v24));
  uint64_t v12 = a5[1];
  if (v12)
  {
    uint64_t v13 = *(unsigned __int16 *)(v12 + 20);
    if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
    {
      if ((v13 & 1) != 0) {
        uint64_t v12 = 0LL;
      }
      else {
        uint64_t v12 = sub_181303998((int *)v12, 1);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(v12 + 8);
    }
  }

  *((void *)&v25 + 1) = v12;
  double v14 = a5[2];
  if (v14)
  {
    uint64_t v15 = *(unsigned __int16 *)(v14 + 20);
    if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
    {
      if ((v15 & 1) != 0) {
        double v14 = 0LL;
      }
      else {
        double v14 = sub_181303998((int *)v14, 1);
      }
    }

    else
    {
      double v14 = *(void *)(v14 + 8);
    }
  }

  *(void *)&uint64_t v26 = v14;
  LODWORD(v25) = -1;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, char *, __int128 *))(a1 + 88))(a2, v11, (char *)&v26 + 8, &v27);
  uint64_t v17 = v16;
  if (!*((void *)&v26 + 1)) {
    goto LABEL_54;
  }
  if (!v16)
  {
    uint64_t v17 = sub_1813A527C(a1, a2, v11, (uint64_t)v24);
    if (!v17)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void, void, _OWORD *, uint64_t (*)(uint64_t, char, uint64_t, uint64_t, int, int)))(a1 + 40))( a2,  *((void *)&v26 + 1),  v27,  v24,  sub_1813A536C);
      uint64_t v17 = v18;
      if (v18 || !*((void *)&v26 + 1))
      {
        if (v18) {
          goto LABEL_47;
        }
      }

      else
      {
        double v19 = (v27 - DWORD1(v27));
        *((void *)&v27 + 1) = sqlite3_mprintf( "%z%.*s",  *((void *)&v27 + 1),  v19,  *((void *)&v26 + 1) + SDWORD1(v27));
        if (!*((void *)&v27 + 1))
        {
          uint64_t v17 = 7;
          goto LABEL_47;
        }
      }

      if (a3) {
        sub_1812D7A8C(a3, *((char **)&v27 + 1), -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
      else {
        sub_1812CF36C(97498);
      }
      uint64_t v17 = 0;
    }
  }

  int v4 = *(void *)(v1 + 128);
  if (v4)
  {
    uint64_t v5 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      int v4 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_16;
      }
      uint64_t v5 = &xmmword_18C465410;
    }

    (*v5)(v4);
  }

  int v10 = *(unsigned __int8 *)(a1 + 39);
  int v11 = (*(_DWORD *)(a1 + 32) - 4) / v10;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = __rev16(*(unsigned __int16 *)(v12 + 2));
  if (v13 < v11)
  {
    double v14 = (v13 * v10) + v12;
    *(void *)(v14 + 4) = bswap64(*(void *)v5);
    uint64_t v15 = v14 + 4;
    if (*(_BYTE *)(a1 + 37))
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = (_DWORD *)(v15 + 8);
      do
        *v17++ = bswap32(*(_DWORD *)(v5 + 8 + 4 * v16++));
      while (v16 < *(unsigned __int8 *)(a1 + 37));
    }

    *(_WORD *)(*(void *)(a2 + 24) + 2LL) = bswap32(v13 + 1) >> 16;
    *(_DWORD *)(a2 + 20) = 1;
  }

  if (v13 == v11)
  {
    if (*(_DWORD *)(a1 + 104) >= a4)
    {
      uint64_t v18 = *(void *)(a2 + 24);
    }

    else
    {
      uint64_t v18 = *(void *)(a2 + 24);
      if (*(void *)(a2 + 8) != 1LL)
      {
        *(_DWORD *)(a1 + 104) = a4;
        *(void *)&__int128 v323 = 0LL;
        v321 = 0u;
        unint64_t v322 = 0u;
        double v19 = *(unsigned __int16 *)(v18 + 2);
        if (sqlite3_initialize()) {
          return 7LL;
        }
        uint64_t v34 = __rev16(v19);
        BOOL v35 = ((_DWORD)v34 + 2) & 0x1FFFE;
        uint64_t v36 = sub_18126F0AC(v35 << 6);
        if (!v36) {
          return 7LL;
        }
        uint64_t v25 = v36;
        int v310 = (__int128 *)v5;
        uint64_t v37 = 0LL;
        uint64_t v38 = (v34 + 1);
        uint64_t v39 = (char *)(v36 + 48LL * v35);
        v316 = &v39[4 * v35];
        uint64_t v40 = (_OWORD *)(v36 + 48LL * v34);
        uint64_t v41 = v36 + 12;
        do
        {
          while (1)
          {
            if (v37 == v34)
            {
              uint64_t v42 = *v310;
              uint64_t v43 = v310[2];
              v40[1] = v310[1];
              v40[2] = v43;
              *uint64_t v40 = v42;
            }

            else
            {
              sub_1813AC7C8(a1, a2, v37, (void *)(v25 + 48 * v37));
            }

            *(_DWORD *)&v39[4 * v37] = v37;
            char v44 = *(unsigned __int8 *)(a1 + 36);
            if (*(_BYTE *)(a1 + 36)) {
              break;
            }
            if (++v37 == v38) {
              goto LABEL_95;
            }
          }

          uint64_t v45 = *(unsigned __int8 *)(a1 + 38);
          uint64_t v46 = (float *)(v41 + 48 * v37);
          __int16 v47 = (double *)&v321;
          uint64_t v48 = *(unsigned __int8 *)(a1 + 36);
          do
          {
            __int128 v51 = *v47;
            if (v45)
            {
              uint64_t v49 = v51 + (double)*((int *)v46 - 1);
              char *v47 = v49;
              __int128 v50 = (double)*(int *)v46;
            }

            else
            {
              uint64_t v49 = v51 + *(v46 - 1);
              char *v47 = v49;
              __int128 v50 = *v46;
            }

            *v47++ = v49 + v50;
            v46 += 2;
            --v48;
          }

          while (v48);
          ++v37;
        }

        while (v37 != v38);
        __int128 v60 = (double)(int)v38 + (double)(int)v38;
        if (v44 >= 4)
        {
          __int128 v61 = v44 & 0xFC;
          sqlite3_int64 v88 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
          int v89 = (float64x2_t *)&v322;
          uint64_t v90 = v61;
          do
          {
            unsigned int v91 = vdivq_f64(*v89, v88);
            v89[-1] = vdivq_f64(v89[-1], v88);
            *int v89 = v91;
            v89 += 2;
            v90 -= 4LL;
          }

          while (v90);
          if (v61 == v44) {
            goto LABEL_95;
          }
        }

        else
        {
          __int128 v61 = 0LL;
        }

        unsigned int v92 = (double *)&v321 + v61;
        unsigned int v93 = v44 - v61;
        do
        {
          unsigned int *v92 = *v92 / v60;
          ++v92;
          --v93;
        }

        while (v93);
LABEL_95:
        uint64_t v94 = 0LL;
        __int128 v95 = (uint64_t)&v316[4 * (((_DWORD)v34 + 2) & 0x1FFFE)];
        __int128 v96 = (float *)(v25 + 12);
        do
        {
          *(void *)(v95 + 8 * v94) = 0LL;
          if ((_DWORD)v44)
          {
            int v97 = *(unsigned __int8 *)(a1 + 38);
            __int128 v98 = 0.0;
            __int128 v99 = (double *)&v321;
            __int128 v100 = v44;
            __int128 v101 = v96;
            do
            {
              if (v97)
              {
                __int128 v102 = (double)*(int *)v101;
                __int128 v103 = (double)*((int *)v101 - 1);
              }

              else
              {
                __int128 v102 = *v101;
                __int128 v103 = *(v101 - 1);
              }

              __int128 v104 = *v99++;
              __int128 v98 = v98 + (v102 - v103 - v104) * (v102 - v103 - v104);
              *(double *)(v95 + 8 * v94) = v98;
              v101 += 2;
              --v100;
            }

            while (v100);
          }

          ++v94;
          v96 += 12;
        }

        while (v94 != v38);
        sub_1813B4A1C(v39, v34 + 1, v95, v316);
        bzero((void *)(*(void *)(a2 + 24) + 2LL), *(int *)(a1 + 32) - 2LL);
        __int128 v105 = 0LL;
        *(_DWORD *)(a2 + 20) = 1;
        while (1)
        {
          __int128 v106 = *(unsigned __int8 *)(a1 + 39);
          uint64_t v107 = (*(_DWORD *)(a1 + 32) - 4) / v106;
          if (v105 >= (int)(((int)(((unint64_t)(1431655765LL * v107) >> 32) - v107) >> 1)
                           + ((((unint64_t)(1431655765LL * v107) >> 32) - v107) >> 31)
                           + v34))
            break;
          uint64_t v108 = *(_DWORD *)&v39[4 * v105];
          __int128 v109 = (unint64_t *)(v25 + 48LL * v108);
          __int128 v110 = *(void *)(a2 + 24);
          __int128 v111 = __rev16(*(unsigned __int16 *)(v110 + 2));
          if (v111 < v107)
          {
            __int128 v112 = (v111 * v106) + v110;
            *(void *)(v112 + 4) = bswap64(*v109);
            __int128 v113 = v112 + 4;
            if (*(_BYTE *)(a1 + 37))
            {
              __int128 v114 = 0LL;
              __int128 v115 = (_DWORD *)(v113 + 8);
              __int128 v116 = v25 + 8 + 48LL * v108;
              do
                *v115++ = bswap32(*(_DWORD *)(v116 + 4 * v114++));
              while (v114 < *(unsigned __int8 *)(a1 + 37));
            }

            *(_WORD *)(*(void *)(a2 + 24) + 2LL) = bswap32(v111 + 1) >> 16;
            *(_DWORD *)(a2 + 20) = 1;
          }

          uint64_t v117 = *v109;
          if (*v109 == *(void *)v310)
          {
            char v118 = *(void *)(a2 + 8);
            if (a4) {
              v119 = sub_1813B4678(a1, v117, v118);
            }
            else {
              v119 = sub_1813B458C(a1, v117, v118);
            }
            uint64_t v20 = v119;
            ++v105;
            if ((_DWORD)v119) {
              goto LABEL_27;
            }
          }

          else
          {
            ++v105;
          }
        }

        uint64_t v20 = sub_1813B3DCC((unsigned __int8 *)a1, (uint64_t *)a2);
        if (!(_DWORD)v20 && v34 >= v105)
        {
          uint64_t v120 = v105;
          while (1)
          {
            uint64_t v121 = v25 + 48LL * *(int *)&v39[4 * v120];
            uint64_t v122 = sub_1813B1AF4(a1, v121, a4, (uint64_t *)&v318);
            if ((_DWORD)v122) {
              break;
            }
            __int16 v123 = v318;
            uint64_t v124 = sub_1813B208C(a1, v318, v121, a4);
            uint64_t v125 = sub_1813AFFD4(a1, v123);
            if (v124) {
              uint64_t v20 = v124;
            }
            else {
              uint64_t v20 = v125;
            }
            if ((_DWORD)v20) {
              uint64_t v126 = 1;
            }
            else {
              uint64_t v126 = v120 >= v34;
            }
            ++v120;
            if (v126) {
              goto LABEL_27;
            }
          }

          uint64_t v20 = v122;
        }

        goto LABEL_27;
      }
    }

    uint64_t v24 = *(unsigned __int16 *)(v18 + 2);
    if (sqlite3_initialize())
    {
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
LABEL_25:
      uint64_t v27 = 0LL;
      uint64_t v20 = 7LL;
      int v28 = 1;
      goto LABEL_26;
    }

    uint64_t v30 = __rev16(v24);
    int v31 = (v30 + 1);
    os_signpost_id_t v32 = sub_18126F0AC(52LL * v31);
    uint64_t v26 = v32;
    if (!v32)
    {
      uint64_t v25 = 0LL;
      goto LABEL_25;
    }

    int v313 = 4 * v31;
    bzero((void *)(v32 + 48LL * v31), 4 * v31);
    BOOL v309 = v26;
    unint64_t v315 = v30;
    if ((_DWORD)v30)
    {
      for (uint64_t i = 0LL; i != v30; ++i)
      {
        sub_1813AC7C8(a1, a2, i, (void *)v26);
        v26 += 48LL;
      }
    }

    else
    {
      uint64_t v30 = 0LL;
    }

    bzero((void *)(*(void *)(a2 + 24) + 2LL), *(int *)(a1 + 32) - 2LL);
    *(_DWORD *)(a2 + 20) = 1;
    int v52 = (_OWORD *)(v309 + 48LL * v30);
    int v53 = *(_OWORD *)v5;
    int v54 = *(_OWORD *)(v5 + 32);
    v52[1] = *(_OWORD *)(v5 + 16);
    v52[2] = v54;
    unsigned __int8 *v52 = v53;
    if (*(void *)(a2 + 8) == 1LL)
    {
      int v55 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (__int128 v62 = (uint64_t *)sub_18126F0AC(v55 + 40)) == 0LL)
      {
        __int128 v56 = 0LL;
      }

      else
      {
        __int128 v63 = v62;
        bzero(v62, *(int *)(a1 + 32) + 40LL);
        v63[3] = (uint64_t)(v63 + 5);
        ++*(_DWORD *)(a1 + 84);
        *__int128 v63 = a2;
        __int128 v56 = v63;
        v63[2] = 0x100000001LL;
        ++*(_DWORD *)(a2 + 16);
      }

      uint64_t v64 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (int v67 = (void *)sub_18126F0AC(v64 + 40)) == 0LL)
      {
        uint64_t v26 = 0LL;
      }

      else
      {
        uint64_t v26 = (uint64_t)v67;
        bzero(v67, *(int *)(a1 + 32) + 40LL);
        *(void *)(v26 + 24) = v26 + 40;
        ++*(_DWORD *)(a1 + 84);
        *(void *)uint64_t v26 = a2;
        *(void *)(v26 + 16) = 0x100000001LL;
        ++*(_DWORD *)(a2 + 16);
      }

      int v68 = *(_DWORD *)(a1 + 44) + 1;
      *(_DWORD *)(a1 + 44) = v68;
      *(_DWORD *)(a2 + 20) = 1;
      **(_WORD **)(a2 + 24) = bswap32(v68) >> 16;
      uint64_t v27 = (uint64_t)v56;
    }

    else
    {
      __int128 v57 = v5;
      uint64_t v58 = *(void *)a2;
      uint64_t v59 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (uint64_t v65 = (uint64_t *)sub_18126F0AC(v59 + 40)) == 0LL)
      {
        uint64_t v27 = 0LL;
        uint64_t v5 = v57;
      }

      else
      {
        uint64_t v66 = v65;
        bzero(v65, *(int *)(a1 + 32) + 40LL);
        uint64_t v27 = (uint64_t)v66;
        v66[3] = (uint64_t)(v66 + 5);
        ++*(_DWORD *)(a1 + 84);
        *uint64_t v66 = v58;
        v66[2] = 0x100000001LL;
        uint64_t v5 = v57;
        if (v58) {
          ++*(_DWORD *)(v58 + 16);
        }
      }

      ++*(_DWORD *)(a2 + 16);
      uint64_t v26 = a2;
    }

    int v28 = 0;
    uint64_t v20 = 7LL;
    if (!v26 || !v27)
    {
      uint64_t v25 = v309;
      goto LABEL_26;
    }

    int v302 = v26;
    uint64_t v69 = v27;
    bzero(*(void **)(v26 + 24), *(int *)(a1 + 32));
    __int32 v307 = v69;
    bzero(*(void **)(v69 + 24), *(int *)(a1 + 32));
    int v70 = *(unsigned __int8 *)(a1 + 36);
    if (sqlite3_initialize()
      || (v71 = v313 + 8 + (v313 + 8) * (unint64_t)v70, (int v72 = (void *)sub_18126F0AC(v71)) == 0LL))
    {
      int v28 = 0;
      uint64_t v25 = v309;
      goto LABEL_314;
    }

    uint64_t v73 = v72;
    unsigned int v74 = *(unsigned __int8 *)(a1 + 36);
    bzero(v72, v71);
    LODWORD(v75) = *(unsigned __int8 *)(a1 + 36);
    if (!*(_BYTE *)(a1 + 36))
    {
      uint64_t v234 = 0LL;
      v233 = 0LL;
LABEL_261:
      uint64_t v81 = v307;
      goto LABEL_264;
    }

    char v311 = v5;
    int v76 = v73;
    uint64_t v77 = 0LL;
    uint64_t v78 = (char *)&v76[v74] + 4 * (v31 * v74);
    v79.i64[0] = 0x400000004LL;
    v79.i64[1] = 0x400000004LL;
    v80.i64[0] = 0x800000008LL;
    v80.i64[1] = 0x800000008LL;
    int v308 = v76;
    uint64_t v81 = v307;
    while (1)
    {
      int v82 = (char *)&v308[v75] + 4 * v77 * v31;
      v308[v77] = v82;
      if (v315 >= 7)
      {
        char v84 = v75;
        uint64_t v85 = v31 & 0x1FFF8;
        BOOL v86 = (int32x4_t)xmmword_1813CDDF0;
        do
        {
          uint64_t v87 = (int32x4_t *)&v76[v84];
          *uint64_t v87 = v86;
          v87[1] = vaddq_s32(v86, v79);
          BOOL v86 = vaddq_s32(v86, v80);
          v84 += 4LL;
          v85 -= 8LL;
        }

        while (v85);
        uint64_t v83 = v31 & 0x1FFF8;
        if ((v31 & 0x1FFF8) == v31) {
          goto LABEL_82;
        }
      }

      else
      {
        uint64_t v83 = 0LL;
      }

      do
      {
        *((_DWORD *)&v76[v75] + v83) = v83;
        ++v83;
      }

      while (v31 != v83);
LABEL_82:
      sub_1813B4884((float *)a1, v82, v31, v77++, v309, v78);
      unsigned int v75 = *(unsigned __int8 *)(a1 + 36);
      int v76 = (void *)((char *)v76 + v313);
      v79.i64[0] = 0x400000004LL;
      v79.i64[1] = 0x400000004LL;
      v80.i64[0] = 0x800000008LL;
      v80.i64[1] = 0x800000008LL;
      if (v77 >= v75)
      {
        if (*(_BYTE *)(a1 + 36))
        {
          __int16 v127 = 0LL;
          uint64_t v128 = 0;
          uint64_t v129 = 0;
          uint64_t v130 = (*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39);
          int v303 = ((int)(((unint64_t)(1431655765LL * v130) >> 32) - v130) >> 1)
          uint64_t v73 = v308;
          int v131 = v309 + 8;
          v132 = v309 + 12;
          double v133 = 0.0;
          while (1)
          {
            char v305 = v128;
            int v306 = v129;
            uint64_t v314 = v75;
            unsigned int v304 = v127;
            if (v130 / 3 <= v303) {
              break;
            }
            v312 = 0;
            size_t v134 = 0.0;
LABEL_133:
            v135 = v134 < v133 || v304 == 0;
            if (v135)
            {
              double v133 = v134;
              uint64_t v129 = v312;
            }

            else
            {
              uint64_t v129 = v306;
            }

            if (v135) {
              uint64_t v128 = v304;
            }
            else {
              uint64_t v128 = v305;
            }
            __int16 v127 = v304 + 1;
            unsigned int v75 = v314;
            uint64_t v73 = v308;
            if (v304 + 1 == v314)
            {
              v233 = v128;
              uint64_t v234 = v129;
              uint64_t v5 = v311;
              goto LABEL_261;
            }
          }

          v312 = 0;
          v136 = (int *)v73[v127];
          char v137 = (__int128 *)(v309 + 48LL * *v136);
          int v138 = (__int128 *)(v309 + 48LL * v136[v30]);
          unsigned int v139 = *(unsigned __int8 *)(a1 + 37);
          if (v139 <= 2) {
            v140 = 2LL;
          }
          else {
            v140 = *(unsigned __int8 *)(a1 + 37);
          }
          v141 = ((v140 - 1) >> 1) + 1;
          uint64_t v142 = *(unsigned __int8 *)(a1 + 38);
          uint64_t v143 = v141 & 0x7FFFFFFFFFFFFFFCLL;
          uint64_t v144 = 0.0;
          uint64_t v145 = v142;
          unsigned int v146 = v130 / 3;
          int v147 = 0.0;
          size_t v134 = 0.0;
          while (1)
          {
            v148 = *v137;
            BOOL v149 = v137[2];
            unint64_t v322 = v137[1];
            __int128 v323 = v149;
            v321 = v148;
            uint64_t v150 = *v138;
            unint64_t v151 = v138[2];
            unint64_t v319 = v138[1];
            uint64_t v320 = v151;
            uint64_t v318 = v150;
            if (v315 >= 2) {
              break;
            }
LABEL_205:
            int v200 = 0.0;
            int v201 = (float *)&v321 + v139 + 1;
            v202 = v139 + 2;
            do
            {
              if (v142)
              {
                int v203 = (double)*(int *)v201;
                int v204 = (double)*((int *)v201 - 1);
              }

              else
              {
                int v203 = *v201;
                int v204 = *(v201 - 1);
              }

              int v200 = v200 + v203 - v204;
              v202 -= 2LL;
              v201 -= 2;
            }

            while (v202 > 3);
            int v205 = 0.0;
            v206 = (float *)&v318 + v139 + 1;
            int v207 = v139 + 2;
            do
            {
              if (v142)
              {
                uint64_t v208 = (double)*(int *)v206;
                int v209 = (double)*((int *)v206 - 1);
              }

              else
              {
                uint64_t v208 = *v206;
                int v209 = *(v206 - 1);
              }

              int v205 = v205 + v208 - v209;
              v207 -= 2LL;
              v206 -= 2;
            }

            while (v207 > 3);
            if (!(_DWORD)v139)
            {
              int v211 = 1.0;
              uint64_t v221 = 1.0;
              if (!v142) {
                goto LABEL_241;
              }
LABEL_229:
              int v222 = 1.0;
              int v223 = 1.0;
              unsigned int v224 = 1.0;
              switch((int)v314)
              {
                case 2:
                  goto LABEL_233;
                case 3:
                  goto LABEL_232;
                case 4:
                  goto LABEL_231;
                case 5:
                  int v222 = (double)(SHIDWORD(v323) - (uint64_t)SDWORD2(v323));
LABEL_231:
                  int v223 = v222 * (double)(SDWORD1(v323) - (uint64_t)(int)v323);
LABEL_232:
                  unsigned int v224 = v223 * (double)(SHIDWORD(v322) - (uint64_t)SDWORD2(v322));
LABEL_233:
                  int v222 = v224 * (double)(SDWORD1(v322) - (uint64_t)(int)v322);
                  break;
                default:
                  break;
              }

              switch((int)v314)
              {
                case 2:
                  goto LABEL_238;
                case 3:
                  goto LABEL_237;
                case 4:
                  goto LABEL_236;
                case 5:
                  uint64_t v221 = (double)(SHIDWORD(v320) - (uint64_t)SDWORD2(v320));
LABEL_236:
                  uint64_t v221 = v221 * (double)(SDWORD1(v320) - (uint64_t)(int)v320);
LABEL_237:
                  uint64_t v221 = v221 * (double)(SHIDWORD(v319) - (uint64_t)SDWORD2(v319));
LABEL_238:
                  uint64_t v221 = v221 * (double)(SDWORD1(v319) - (uint64_t)(int)v319);
                  break;
                default:
                  break;
              }

              uint64_t v225 = v222 * (double)(SHIDWORD(v321) - (uint64_t)SDWORD2(v321));
              uint64_t v226 = v221 * (double)(SHIDWORD(v318) - (uint64_t)SDWORD2(v318));
              int v227 = v130 / 3;
              goto LABEL_252;
            }

            int v210 = 0LL;
            int v211 = 1.0;
            char v212 = (float *)&v321 + 3;
            int v213 = (float *)&v318 + 3;
            do
            {
              if (v142)
              {
                int v214 = *((_DWORD *)v212 - 1);
                if (v214 <= *((_DWORD *)v213 - 1)) {
                  int v214 = *((_DWORD *)v213 - 1);
                }
                int v215 = (double)v214;
                char v216 = (double)*(int *)v212;
                int v217 = (double)*(int *)v213;
                uint64_t v218 = v216 < v217;
              }

              else
              {
                int v219 = *(v212 - 1);
                int v220 = *v213;
                if (v219 <= *(v213 - 1)) {
                  int v219 = *(v213 - 1);
                }
                int v215 = v219;
                uint64_t v218 = *v212 < v220;
                char v216 = *v212;
                int v217 = v220;
              }

              if (!v218) {
                char v216 = v217;
              }
              if (v216 < v215)
              {
                int v211 = 0.0;
                uint64_t v221 = 1.0;
                if (!v142) {
                  goto LABEL_241;
                }
                goto LABEL_229;
              }

              int v211 = v211 * (v216 - v215);
              v210 += 2LL;
              v213 += 2;
              v212 += 2;
            }

            while (v210 < v139);
            uint64_t v221 = 1.0;
            if (v142) {
              goto LABEL_229;
            }
LABEL_241:
            uint64_t v228 = 1.0;
            uint64_t v229 = 1.0;
            uint64_t v230 = 1.0;
            switch((int)v314)
            {
              case 2:
                goto LABEL_245;
              case 3:
                goto LABEL_244;
              case 4:
                goto LABEL_243;
              case 5:
                uint64_t v228 = (float)(*((float *)&v323 + 3) - *((float *)&v323 + 2));
LABEL_243:
                uint64_t v229 = v228 * (float)(*((float *)&v323 + 1) - *(float *)&v323);
LABEL_244:
                uint64_t v230 = v229 * (float)(*((float *)&v322 + 3) - *((float *)&v322 + 2));
LABEL_245:
                uint64_t v228 = v230 * (float)(*((float *)&v322 + 1) - *(float *)&v322);
                break;
              default:
                break;
            }

            switch((int)v314)
            {
              case 2:
                goto LABEL_250;
              case 3:
                goto LABEL_249;
              case 4:
                goto LABEL_248;
              case 5:
                uint64_t v221 = (float)(*((float *)&v320 + 3) - *((float *)&v320 + 2));
LABEL_248:
                uint64_t v221 = v221 * (float)(*((float *)&v320 + 1) - *(float *)&v320);
LABEL_249:
                uint64_t v221 = v221 * (float)(*((float *)&v319 + 3) - *((float *)&v319 + 2));
LABEL_250:
                uint64_t v221 = v221 * (float)(*((float *)&v319 + 1) - *(float *)&v319);
                break;
              default:
                break;
            }

            int v227 = v130 / 3;
            uint64_t v225 = v228 * (float)(*((float *)&v321 + 3) - *((float *)&v321 + 2));
            uint64_t v226 = v221 * (float)(*((float *)&v318 + 3) - *((float *)&v318 + 2));
LABEL_252:
            uint64_t v231 = v211 + 0.0;
            uint64_t v232 = v225 + v226;
            if (v146 == v227 || v231 < v147 || v231 == v147 && v232 < v144)
            {
              int v147 = v231;
              uint64_t v144 = v232;
              v312 = v146;
            }

            size_t v134 = v134 + v200 + v205;
            if (v303 + 1 == (_DWORD)++v146) {
              goto LABEL_133;
            }
          }

          char v152 = 1LL;
          while (2)
          {
            uint64_t v153 = v136[v152];
            if (v152 < v146)
            {
              if (v142)
              {
                if (v140 >= 7)
                {
                  v158 = (int32x4_t *)(v131 + 48LL * v153);
                  unint64_t v159 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                  int v160 = (int32x4_t *)((char *)&v321 + 8);
                  do
                  {
                    uint64_t v161 = v160[1];
                    v162 = *v158;
                    v163 = v158[1];
                    v158 += 2;
                    v333.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v160, v162), vminq_s32(v161, v163));
                    v333.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v160, v162), vmaxq_s32(v161, v163));
                    vst2q_f32((float *)v160->i32, v333);
                    v160 += 2;
                    v159 -= 4LL;
                  }

                  while (v159);
                  uint64_t v154 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                  uint64_t v145 = v142;
                  if (v141 != v143) {
                    goto LABEL_168;
                  }
                }

                else
                {
                  uint64_t v154 = 0LL;
LABEL_168:
                  BOOL v164 = (int *)(v132 + 4 * v154 + 48LL * v153);
                  unsigned int v165 = (int *)&v321 + v154 + 3;
                  do
                  {
                    uint64_t v166 = *(v165 - 1);
                    if (v166 >= *(v164 - 1)) {
                      uint64_t v166 = *(v164 - 1);
                    }
                    *(v165 - 1) = v166;
                    char v167 = *v165;
                    v169 = *v164;
                    v164 += 2;
                    uint64_t v168 = v169;
                    if (*v165 <= v169) {
                      char v167 = v168;
                    }
                    *unsigned int v165 = v167;
                    v165 += 2;
                    v154 += 2LL;
                  }

                  while (v154 < v139);
                  uint64_t v145 = v142;
                }

                goto LABEL_153;
              }

              if (v140 >= 7)
              {
                int v182 = (const float *)(v131 + 48LL * v153);
                unsigned int v183 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                uint64_t v184 = (float *)&v321 + 2;
                do
                {
                  unsigned int v329 = vld2q_f32(v184);
                  double v331 = vld2q_f32(v182);
                  v182 += 8;
                  v335.val[0] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v331.val[0], v329.val[0]),  (int8x16_t)v329.val[0],  (int8x16_t)v331.val[0]);
                  v335.val[1] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v329.val[1], v331.val[1]),  (int8x16_t)v329.val[1],  (int8x16_t)v331.val[1]);
                  vst2q_f32(v184, v335);
                  v184 += 8;
                  v183 -= 4LL;
                }

                while (v183);
                int v156 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                if (v141 != v143) {
                  goto LABEL_188;
                }
              }

              else
              {
                int v156 = 0LL;
LABEL_188:
                v185 = (float *)(v132 + 4 * v156 + 48LL * v153);
                v186 = (float *)&v321 + v156 + 3;
                do
                {
                  char v187 = *(v186 - 1);
                  if (v187 >= *(v185 - 1)) {
                    char v187 = *(v185 - 1);
                  }
                  *(v186 - 1) = v187;
                  char v188 = *v186;
                  int v189 = *v185;
                  v185 += 2;
                  v190 = v189;
                  if (*v186 <= v189) {
                    char v188 = v190;
                  }
                  unsigned __int8 *v186 = v188;
                  v186 += 2;
                  v156 += 2LL;
                }

                while (v156 < v139);
              }

  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    int v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_15:
      (*v6)(v5);
      goto LABEL_16;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    uint64_t v5 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v6 = &xmmword_18C465410;
      goto LABEL_15;
    }
  }

void sqlite3_interrupt(sqlite3 *a1)
{
  if (a1)
  {
    int v2 = *((unsigned __int8 *)a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
LABEL_9:
        *((_DWORD *)a1 + 106) = 1;
        return;
      case 109:
LABEL_5:
        int v3 = "unopened";
        break;
      default:
        int v3 = "invalid";
        break;
    }

    sqlite3_log(21, "API call with %s database connection pointer", v3);
  }

  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }

  sub_1812CF36C(187130);
}

BOOL sqlite3_is_interrupted(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *(_DWORD *)(a1 + 424) != 0;
      case 109:
LABEL_5:
        int v3 = "unopened";
        break;
      default:
        int v3 = "invalid";
        break;
    }

    sqlite3_log(21, "API call with %s database connection pointer", v3);
  }

  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }

  sub_1812CF36C(187146);
  return 0LL;
}

uint64_t sub_1812E0AEC( uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t))
{
  if (!a1)
  {
    uint64_t v13 = "NULL";
    goto LABEL_19;
  }

  int v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 == 186)
  {
LABEL_5:
    uint64_t v13 = "unopened";
LABEL_19:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1812CF36C(187311);
  }

  if (v12 != 118)
  {
    if (v12 != 109)
    {
      uint64_t v13 = "invalid";
      goto LABEL_19;
    }

    goto LABEL_5;
  }

  uint64_t v21 = *(void *)(a1 + 24);
  if (v21) {
    xmmword_18C465400(v21);
  }
  if (!a11)
  {
    unsigned int v30 = sub_18126D03C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0LL);
    goto LABEL_21;
  }

  uint64_t v22 = sub_18126F0AC(24LL);
  if (!v22)
  {
    if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      uint64_t v35 = *(void *)(a1 + 344);
      if (v35)
      {
        sub_1812DC47C(v35, "out of memory", v23, v24, v25, v26, v27, v28, v37);
        for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }

    a11(a5);
    unsigned int v30 = 1;
    goto LABEL_28;
  }

  uint64_t v29 = (_DWORD *)v22;
  *(_DWORD *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = a11;
  *(void *)(v22 + 16) = a5;
  unsigned int v30 = sub_18126D03C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (_DWORD *)v22);
  if (!*v29)
  {
    a11(a5);
    int v31 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_17:
      (*v31)(v29);
      goto LABEL_21;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v29);
    --qword_18C468B10;
    off_18C4653A8(v29);
    uint64_t v29 = (_DWORD *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v31 = &xmmword_18C465410;
      goto LABEL_17;
    }
  }

int sqlite3_create_window_function( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xValue)(sqlite3_context *), void (__cdecl *xInverse)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xDestroy)(void *))
{
  return sub_1812E0AEC( (uint64_t)db,  (char *)zFunctionName,  *(uint64_t *)&nArg,  eTextRep,  (uint64_t)pApp,  0LL,  (uint64_t)xStep,  (uint64_t)xFinal,  (uint64_t)xValue,  (uint64_t)xInverse,  (void (*)(uint64_t))xDestroy);
}

int sqlite3_create_function16( sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  if (!db)
  {
    int v10 = "NULL";
    goto LABEL_13;
  }

  int v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    int v10 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(187402);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      int v10 = "invalid";
      goto LABEL_13;
    }

    goto LABEL_5;
  }

  if (!zFunctionName) {
    return sub_1812CF36C(187402);
  }
  uint64_t v17 = *(void *)&nArg;
  uint64_t v18 = *((void *)db + 3);
  if (v18) {
    xmmword_18C465400(v18);
  }
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v24 = 0u;
  uint64_t v25 = 0LL;
  uint64_t v26 = db;
  sub_181269368((uint64_t)&v24, (char *)zFunctionName, -1LL, 2u, 0LL);
  if ((v25 & 0x200000000LL) != 0)
  {
    if (BYTE6(v25) != 1) {
      sub_1812C23E8((int *)&v24, 1);
    }
  }

  else
  {
    BYTE6(v25) = 1;
  }

  if (*((_BYTE *)db + 103))
  {
    unsigned int v20 = sub_18126D03C( (uint64_t)db,  0LL,  v17,  eTextRep,  (uint64_t)pApp,  (uint64_t)xFunc,  (uint64_t)xStep,  (uint64_t)xFinal,  0LL,  0LL,  0LL);
  }

  else
  {
    uint64_t v21 = (void *)*((void *)&v24 + 1);
    unsigned int v20 = sub_18126D03C( (uint64_t)db,  *((char **)&v24 + 1),  v17,  eTextRep,  (uint64_t)pApp,  (uint64_t)xFunc,  (uint64_t)xStep,  (uint64_t)xFinal,  0LL,  0LL,  0LL);
    if (v21) {
      sub_1812F20DC(db, v21);
    }
  }

  if (v20 || *((_BYTE *)db + 103)) {
    int v22 = sub_1813037C4((uint64_t)db, v20);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = *((void *)db + 3);
  if (v23) {
    xmmword_18C465410(v23);
  }
  return v22;
}

uint64_t sub_1812E101C(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(void *)(a1 + 8)) != 0)
  {
    int v3 = sqlite3_mprintf("unable to use function %s in the requested context", *(const char **)(v2 + 8));
  }

  else
  {
    sub_1812CF36C(97932);
    int v3 = sqlite3_mprintf("unable to use function %s in the requested context", 0LL);
    if (!a1)
    {
      uint64_t result = sub_1812CF36C(97407);
      if (!v3) {
        return result;
      }
      goto LABEL_8;
    }
  }

  *(_DWORD *)(a1 + 36) = 1;
  uint64_t result = sub_181269368(*(void *)a1, v3, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  if (!v3) {
    return result;
  }
LABEL_8:
  uint64_t v5 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v5)(v3);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v3);
  int v3 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v5 = (uint64_t (**)(char *))&xmmword_18C465410;
    return (*v5)(v3);
  }

  return result;
}

void *__cdecl sqlite3_trace(sqlite3 *a1, void (__cdecl *xTrace)(void *, const char *), void *a3)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_12;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187488);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_12;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v8 = *((void *)a1 + 3);
  }

  int v9 = (void *)*((void *)a1 + 31);
  *((_BYTE *)a1 + 110) = (xTrace != 0LL) << 6;
  *((void *)a1 + 30) = xTrace;
  *((void *)a1 + 31) = a3;
  if (v8) {
    xmmword_18C465410(v8);
  }
  return v9;
}

int sqlite3_trace_v2( sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  if (!a1)
  {
    int v6 = "NULL";
    goto LABEL_19;
  }

  int v5 = *((unsigned __int8 *)a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    int v6 = "unopened";
LABEL_19:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1812CF36C(187512);
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      int v6 = "invalid";
      goto LABEL_19;
    }

    goto LABEL_5;
  }

  uint64_t v10 = *((void *)a1 + 3);
  if (v10)
  {
    xmmword_18C465400(v10);
    uint64_t v10 = *((void *)a1 + 3);
  }

  if (uMask) {
    int v11 = xCallback;
  }
  else {
    int v11 = 0LL;
  }
  if (v11) {
    char v12 = uMask;
  }
  else {
    char v12 = 0;
  }
  *((_BYTE *)a1 + 110) = v12;
  *((void *)a1 + 30) = v11;
  *((void *)a1 + 31) = pCtx;
  if (v10) {
    xmmword_18C465410(v10);
  }
  return 0;
}

void *__cdecl sqlite3_profile(sqlite3 *a1, void (__cdecl *xProfile)(void *, const char *, sqlite3_uint64), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_15;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187543);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v8 = *((void *)a1 + 3);
  }

  int v9 = (void *)*((void *)a1 + 33);
  *((void *)a1 + 32) = xProfile;
  *((void *)a1 + 33) = a3;
  if (xProfile) {
    char v10 = *((_BYTE *)a1 + 110) & 0xF | 0x80;
  }
  else {
    char v10 = *((_BYTE *)a1 + 110) & 0xF;
  }
  *((_BYTE *)a1 + 110) = v10;
  if (v8) {
    xmmword_18C465410(v8);
  }
  return v9;
}

void *__cdecl sqlite3_commit_hook(sqlite3 *a1, int (__cdecl *a2)(void *), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187573);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 34);
    *((void *)a1 + 34) = a3;
    *((void *)a1 + 35) = a2;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    char v10 = (void *)*((void *)a1 + 34);
    *((void *)a1 + 34) = a3;
    *((void *)a1 + 35) = a2;
  }

  return v10;
}

void *__cdecl sqlite3_update_hook( sqlite3 *a1, void (__cdecl *a2)(void *, int, const char *, const char *, sqlite3_int64), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187598);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 38);
    *((void *)a1 + 38) = a3;
    *((void *)a1 + 39) = a2;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    char v10 = (void *)*((void *)a1 + 38);
    *((void *)a1 + 38) = a3;
    *((void *)a1 + 39) = a2;
  }

  return v10;
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187623);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 36);
    *((void *)a1 + 36) = a3;
    *((void *)a1 + 37) = a2;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    char v10 = (void *)*((void *)a1 + 36);
    *((void *)a1 + 36) = a3;
    *((void *)a1 + 37) = a2;
  }

  return v10;
}

uint64_t sqlite3_preupdate_hook(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[3];
  if (v6)
  {
    xmmword_18C465400(v6);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
    if (v7) {
      xmmword_18C465410(v7);
    }
  }

  else
  {
    uint64_t v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
  }

  return v8;
}

int sqlite3_autovacuum_pages( sqlite3 *db, unsigned int (__cdecl *a2)(void *, const char *, unsigned int, unsigned int, unsigned int), void *a3, void (__cdecl *a4)(void *))
{
  if (!db)
  {
    uint64_t v8 = "NULL";
    goto LABEL_15;
  }

  int v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    uint64_t v8 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    if (a4) {
      ((void (*)(void *))a4)(a3);
    }
    return sub_1812CF36C(187669);
  }

  if (v7 != 118)
  {
    if (v7 != 109)
    {
      uint64_t v8 = "invalid";
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  uint64_t v10 = *((void *)db + 3);
  if (v10) {
    xmmword_18C465400(v10);
  }
  int v11 = (void (*)(void))*((void *)db + 41);
  if (v11) {
    v11(*((void *)db + 40));
  }
  *((void *)db + 41) = a4;
  *((void *)db + 42) = a2;
  *((void *)db + 40) = a3;
  uint64_t v12 = *((void *)db + 3);
  if (v12) {
    xmmword_18C465410(v12);
  }
  return 0;
}

int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
{
  if (!db)
  {
    int v4 = "NULL";
    goto LABEL_12;
  }

  int v3 = *((unsigned __int8 *)db + 113);
  if (v3 == 186)
  {
LABEL_5:
    int v4 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(187723);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      int v4 = "invalid";
      goto LABEL_12;
    }

    goto LABEL_5;
  }

  if (N >= 1)
  {
    uint64_t v5 = N;
    uint64_t v6 = *((void *)db + 3);
    if (!v6)
    {
      *((void *)db + 47) = sub_1812B06B0;
      *((void *)db + 48) = N;
      return 0;
    }

    xmmword_18C465400(v6);
    uint64_t v7 = *((void *)db + 3);
    *((void *)db + 47) = sub_1812B06B0;
    *((void *)db + 48) = v5;
    if (!v7) {
      return 0;
    }
    goto LABEL_15;
  }

  uint64_t v9 = *((void *)db + 3);
  if (!v9)
  {
    *((void *)db + 47) = 0LL;
    *((void *)db + 48) = 0LL;
    return 0;
  }

  xmmword_18C465400(v9);
  uint64_t v7 = *((void *)db + 3);
  *((void *)db + 47) = 0LL;
  *((void *)db + 48) = 0LL;
  if (v7) {
LABEL_15:
  }
    xmmword_18C465410(v7);
  return 0;
}

void *__cdecl sqlite3_wal_hook(sqlite3 *a1, int (__cdecl *a2)(void *, sqlite3 *, const char *, int), void *a3)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1812CF36C(187747);
    return 0LL;
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    uint64_t v10 = (void *)*((void *)a1 + 48);
    *((void *)a1 + 47) = a2;
    *((void *)a1 + 48) = a3;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    uint64_t v10 = (void *)*((void *)a1 + 48);
    *((void *)a1 + 47) = a2;
    *((void *)a1 + 48) = a3;
  }

  return v10;
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  if (!db)
  {
    uint64_t v10 = "NULL";
    goto LABEL_14;
  }

  int v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    uint64_t v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(187779);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_14;
    }

    goto LABEL_5;
  }

  int v11 = pnCkpt;
  uint64_t v12 = pnLog;
  if (pnLog) {
    *pnLog = -1;
  }
  if (pnCkpt) {
    *pnCkpt = -1;
  }
  uint64_t v17 = *((void *)db + 3);
  if (v17) {
    xmmword_18C465400(v17);
  }
  if (!zDb || !*zDb)
  {
    LODWORD(v19) = 12;
    goto LABEL_39;
  }

  int v18 = *((_DWORD *)db + 10);
  uint64_t v19 = (v18 - 1);
  if (v18 < 1) {
    goto LABEL_63;
  }
  unsigned int v20 = (_BYTE **)(*((void *)db + 4) + 32 * v19);
  while (1)
  {
    uint64_t v21 = *v20;
    if (*v20) {
      break;
    }
LABEL_28:
    if (!(_DWORD)v19)
    {
      uint64_t v26 = zDb;
      for (uint64_t i = "main"; ; ++i)
      {
        uint64_t v28 = *(unsigned __int8 *)i;
        uint64_t v29 = *(unsigned __int8 *)v26;
        if ((_DWORD)v28 == (_DWORD)v29)
        {
          if (!*i)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }

        else if (byte_1813C6343[v28] != byte_1813C6343[v29])
        {
          break;
        }

        ++v26;
      }
    }

    v20 -= 4;
    BOOL v25 = (int)v19 <= 0;
    LODWORD(v19) = v19 - 1;
    if (v25)
    {
LABEL_63:
      unsigned int v37 = 1;
      sub_1812D50CC((uint64_t)db, 1, "unknown database: %s", (uint64_t)pnLog, (uint64_t)pnCkpt, v5, v6, v7, (char)zDb);
      goto LABEL_64;
    }
  }

  for (uint64_t j = zDb; ; ++j)
  {
    uint64_t v23 = *v21;
    uint64_t v24 = *(unsigned __int8 *)j;
    if ((_DWORD)v23 == (_DWORD)v24) {
      break;
    }
    if (byte_1813C6343[v23] != byte_1813C6343[v24]) {
      goto LABEL_28;
    }
LABEL_24:
    ++v21;
  }

  if (*v21) {
    goto LABEL_24;
  }
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_63;
  }
LABEL_39:
  *((_DWORD *)db + 172) = 0;
  int v30 = *((_DWORD *)db + 10);
  if (v30 < 1)
  {
    unsigned int v34 = 0;
    int v32 = 0;
    BOOL v36 = 1;
  }

  else
  {
    uint64_t v31 = 0LL;
    int v32 = 0;
    uint64_t v33 = 8LL;
    do
    {
      if ((_DWORD)v19 == 12 || v19 == v31)
      {
        unsigned int v35 = sub_18135F2F4(*(void *)(*((void *)db + 4) + v33), eMode, v12, v11);
        uint64_t v12 = 0LL;
        int v11 = 0LL;
        if (v35 == 5) {
          unsigned int v34 = 0;
        }
        else {
          unsigned int v34 = v35;
        }
        if (v35 == 5) {
          int v32 = 1;
        }
        int v30 = *((_DWORD *)db + 10);
      }

      else
      {
        unsigned int v34 = 0;
      }

      ++v31;
      BOOL v36 = v34 == 0;
      if (v31 >= v30) {
        break;
      }
      v33 += 32LL;
    }

    while (!v34);
  }

  if (v36 && v32 != 0) {
    unsigned int v37 = 5;
  }
  else {
    unsigned int v37 = v34;
  }
  *((_DWORD *)db + 20) = v37;
  if (v37 || *((void *)db + 52))
  {
    sub_1812FA264((uint64_t)db, v37);
    if (!v37) {
      goto LABEL_60;
    }
    goto LABEL_64;
  }

  *((_DWORD *)db + 21) = -1;
LABEL_60:
  if (*((_BYTE *)db + 103)) {
LABEL_64:
  }
    int v15 = sub_1813037C4((uint64_t)db, v37);
  else {
    int v15 = 0;
  }
  if (!*((_DWORD *)db + 52)) {
    *((_DWORD *)db + 106) = 0;
  }
  uint64_t v38 = *((void *)db + 3);
  if (v38) {
    xmmword_18C465410(v38);
  }
  return v15;
}

int sqlite3_error_offset(sqlite3 *db)
{
  if (!db) {
    return -1;
  }
  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return -1;
  }

  if (!*((_DWORD *)db + 20)) {
    return -1;
  }
  uint64_t v3 = *((void *)db + 3);
  if (!v3) {
    return *((_DWORD *)db + 21);
  }
  xmmword_18C465400(v3);
  uint64_t v4 = *((void *)db + 3);
  int v5 = *((_DWORD *)db + 21);
  if (v4) {
    xmmword_18C465410(v4);
  }
  return v5;
}

const void *__cdecl sqlite3_errmsg16(sqlite3 *a1)
{
  if (!a1) {
    return L"out of memory";
  }
  int v7 = *((unsigned __int8 *)a1 + 113);
  if (v7 != 109 && v7 != 118 && v7 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return L"bad parameter or other API misuse";
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (*((_BYTE *)a1 + 103))
  {
    int v9 = L"out of memory";
    goto LABEL_9;
  }

  uint64_t v11 = *((void *)a1 + 52);
  if (v11)
  {
    int v12 = *(unsigned __int16 *)(v11 + 20);
    if ((~v12 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 2)
    {
      if ((v12 & 1) == 0)
      {
        int v9 = (const __int16 *)sub_181303998((int *)v11, 2);
        if (v9)
        {
LABEL_40:
          if (!*((_BYTE *)a1 + 103)) {
            goto LABEL_9;
          }
          goto LABEL_41;
        }
      }
    }

    else
    {
      int v9 = *(const __int16 **)(v11 + 8);
      if (v9) {
        goto LABEL_40;
      }
    }
  }

  int v14 = *((_DWORD *)a1 + 20);
  switch(v14)
  {
    case 516:
      int v15 = "abort due to ROLLBACK";
      break;
    case 101:
      int v15 = "no more rows available";
      break;
    case 100:
      int v15 = "another row available";
      break;
    default:
      else {
        int v15 = off_189B6EC30[*((_DWORD *)a1 + 20)];
      }
      break;
  }

  sub_1812D50CC((uint64_t)a1, v14, v15, v1, v2, v3, v4, v5, v20);
  uint64_t v16 = *((void *)a1 + 52);
  if (!v16)
  {
    int v9 = 0LL;
    goto LABEL_40;
  }

  int v17 = *(unsigned __int16 *)(v16 + 20);
  if ((~v17 & 0x202) == 0 && *(_BYTE *)(v16 + 22) == 2)
  {
    int v9 = *(const __int16 **)(v16 + 8);
    if (!*((_BYTE *)a1 + 103)) {
      goto LABEL_9;
    }
LABEL_41:
    int v18 = *((_DWORD *)a1 + 55);
    if (!v18)
    {
      *((_BYTE *)a1 + 103) = 0;
      *((_DWORD *)a1 + 106) = 0;
      int v19 = *((_DWORD *)a1 + 108) - 1;
      *((_DWORD *)a1 + 108) = v19;
      if (!v19) {
        LOWORD(v18) = *((_WORD *)a1 + 219);
      }
      *((_WORD *)a1 + 218) = v18;
    }

    goto LABEL_9;
  }

  if ((v17 & 1) != 0)
  {
    int v9 = 0LL;
    if (*((_BYTE *)a1 + 103)) {
      goto LABEL_41;
    }
  }

  else
  {
    int v9 = (const __int16 *)sub_181303998((int *)v16, 2);
    if (*((_BYTE *)a1 + 103)) {
      goto LABEL_41;
    }
  }

uint64_t sub_1812E1FD0(uint64_t result)
{
  if (*(_BYTE *)(result + 103) && !*(_DWORD *)(result + 220))
  {
    *(_BYTE *)(result + 103) = 0;
    *(_DWORD *)(result + 424) = 0;
    int v1 = *(_DWORD *)(result + 432) - 1;
    *(_DWORD *)(result + 432) = v1;
    if (v1) {
      *(_WORD *)(result + 436) = 0;
    }
    else {
      *(_WORD *)(result + 436) = *(_WORD *)(result + 438);
    }
  }

  return result;
}

int sqlite3_errcode(sqlite3 *db)
{
  if (!db) {
    return 7;
  }
  int v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((_BYTE *)db + 103)) {
      return 7;
    }
    return *((_DWORD *)db + 22) & *((_DWORD *)db + 20);
  }

  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1812CF36C(188008);
  }

int sqlite3_extended_errcode(sqlite3 *db)
{
  if (!db) {
    return 7;
  }
  int v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((_BYTE *)db + 103)) {
      return 7;
    }
    return *((_DWORD *)db + 20);
  }

  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1812CF36C(188017);
  }

int sqlite3_system_errno(sqlite3 *a1)
{
  if (a1) {
    LODWORD(a1) = *((_DWORD *)a1 + 23);
  }
  return (int)a1;
}

const char *__cdecl sqlite3_errstr(int a1)
{
  switch(a1)
  {
    case 516:
      return "abort due to ROLLBACK";
    case 101:
      return "no more rows available";
    case 100:
      return "another row available";
  }

  return off_189B6EC30[a1];
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_16;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1812CF36C(188186);
    return -1;
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_16;
    }

    goto LABEL_5;
  }

  uint64_t v5 = (char *)a1 + 4 * id;
  int v8 = *((_DWORD *)v5 + 34);
  int v7 = (int *)(v5 + 136);
  int result = v8;
  if ((newVal & 0x80000000) == 0)
  {
    int v9 = *((_DWORD *)&xmmword_1813C6BE4 + id);
    if (newVal | id) {
      int v10 = newVal;
    }
    else {
      int v10 = 1;
    }
    if (v9 >= newVal) {
      int v9 = v10;
    }
    int *v7 = v9;
  }

  return result;
}

uint64_t _sqlite_auto_profile(uint64_t a1, const char *a2, unint64_t a3)
{
  return fprintf((FILE *)*MEMORY[0x1895F89D0], "Query: %s\n Execution Time: %llu ms\n", a2, a3 / 0xF4240);
}

uint64_t _sqlite_auto_trace(const void *a1, const char *a2)
{
  return fprintf((FILE *)*MEMORY[0x1895F89D0], "TraceSQL(%p): %s\n", a1, a2);
}

int sqlite3_create_collation_v2( sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *), void (__cdecl *xDestroy)(void *))
{
  if (!a1)
  {
    int v10 = "NULL";
    goto LABEL_14;
  }

  int v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    int v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(189176);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      int v10 = "invalid";
      goto LABEL_14;
    }

    goto LABEL_5;
  }

  if (!zName) {
    return sub_1812CF36C(189176);
  }
  unsigned __int8 v15 = eTextRep;
  uint64_t v16 = *((void *)a1 + 3);
  if (v16) {
    xmmword_18C465400(v16);
  }
  unsigned int v17 = sub_181268AAC((uint64_t)a1, (char *)zName, v15, (uint64_t)pArg, (uint64_t)xCompare, (uint64_t)xDestroy, v6, v7);
  if (v17 || *((_BYTE *)a1 + 103)) {
    int v18 = sub_1813037C4((uint64_t)a1, v17);
  }
  else {
    int v18 = 0;
  }
  uint64_t v20 = *((void *)a1 + 3);
  if (v20) {
    xmmword_18C465410(v20);
  }
  return v18;
}

int sqlite3_create_collation16( sqlite3 *a1, const void *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_13;
  }

  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    uint64_t v7 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1812CF36C(189201);
  }

  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_13;
    }

    goto LABEL_5;
  }

  if (!zName) {
    return sub_1812CF36C(189201);
  }
  unsigned __int8 v11 = eTextRep;
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_18C465400(v12);
  }
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v20 = 0u;
  uint64_t v21 = 0LL;
  int v22 = a1;
  sub_181269368((uint64_t)&v20, (char *)zName, -1LL, 2u, 0LL);
  if ((v21 & 0x200000000LL) != 0)
  {
    if (BYTE6(v21) != 1) {
      sub_1812C23E8((int *)&v20, 1);
    }
  }

  else
  {
    BYTE6(v21) = 1;
  }

  if (*((_BYTE *)a1 + 103))
  {
  }

  else
  {
    uint64_t v16 = (void *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1))
    {
      unsigned int v17 = sub_181268AAC((uint64_t)a1, *((char **)&v20 + 1), v11, (uint64_t)pArg, (uint64_t)xCompare, 0LL, v13, v14);
      sub_1812F20DC(a1, v16);
      goto LABEL_23;
    }
  }

  unsigned int v17 = 0;
LABEL_23:
  if (v17 || *((_BYTE *)a1 + 103)) {
    int v18 = sub_1813037C4((uint64_t)a1, v17);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = *((void *)a1 + 3);
  if (v19) {
    xmmword_18C465410(v19);
  }
  return v18;
}

int sqlite3_collation_needed(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const char *))
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(189226);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    *((void *)a1 + 49) = a3;
    *((void *)a1 + 50) = 0LL;
    *((void *)a1 + 51) = a2;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    *((void *)a1 + 49) = a3;
    *((void *)a1 + 50) = 0LL;
    *((void *)a1 + 51) = a2;
  }

  return 0;
}

int sqlite3_collation_needed16(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const void *))
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(189247);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    *((void *)a1 + 49) = 0LL;
    *((void *)a1 + 50) = a3;
    *((void *)a1 + 51) = a2;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    *((void *)a1 + 49) = 0LL;
    *((void *)a1 + 50) = a3;
    *((void *)a1 + 51) = a2;
  }

  return 0;
}

int sqlite3_global_recover(void)
{
  return 0;
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((unsigned __int8 *)a1 + 101);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(189277);
  return 0;
}

int sqlite3_table_column_metadata( sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
{
  uint64_t v9 = pPrimaryKey;
  int v10 = pNotNull;
  uint64_t v14 = (char *)zTableName;
  unsigned int v17 = pAutoinc;
  uint64_t v65 = 0LL;
  if (pzDataType) {
    *pzDataType = 0LL;
  }
  if (pzCollSeq) {
    *pzCollSeq = 0LL;
  }
  if (!db)
  {
    uint64_t v19 = "NULL";
    goto LABEL_44;
  }

  int v18 = *((unsigned __int8 *)db + 113);
  if (v18 == 186)
  {
LABEL_9:
    uint64_t v19 = "unopened";
LABEL_44:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    return sub_1812CF36C(189398);
  }

  if (v18 != 118)
  {
    if (v18 != 109)
    {
      uint64_t v19 = "invalid";
      goto LABEL_44;
    }

    goto LABEL_9;
  }

  if (!zTableName) {
    return sub_1812CF36C(189398);
  }
  uint64_t v20 = *((void *)db + 3);
  if (v20) {
    xmmword_18C465400(v20);
  }
  if (!*((_BYTE *)db + 111)) {
    sub_1812FA020((uint64_t)db);
  }
  unsigned int v27 = sub_181276C70( (uint64_t)db,  &v65,  (uint64_t)zTableName,  (uint64_t)zColumnName,  (uint64_t)pzDataType,  (uint64_t)pzCollSeq,  (uint64_t)pNotNull,  (uint64_t)pPrimaryKey);
  if (v27) {
    goto LABEL_17;
  }
  uint64_t v28 = sub_1812E2C64((uint64_t)db, v14, zDbName);
  if (v28)
  {
    if (*(_BYTE *)(v28 + 63) != 2)
    {
      if (!zColumnName) {
        goto LABEL_73;
      }
      uint64_t v43 = *(__int16 *)(v28 + 54);
      if ((int)v43 >= 1)
      {
        uint64_t v44 = 0LL;
        uint64_t v45 = *(void *)(v28 + 8);
        while (1)
        {
          uint64_t v46 = *(_BYTE **)(v45 + 16 * v44);
          for (uint64_t i = zColumnName; ; ++i)
          {
            uint64_t v48 = *v46;
            uint64_t v49 = *(unsigned __int8 *)i;
            if ((_DWORD)v48 != (_DWORD)v49) {
              break;
            }
            if (!*v46)
            {
              uint64_t v33 = v45 + 16 * v44;
              goto LABEL_64;
            }

LABEL_57:
            ++v46;
          }

          if (byte_1813C6343[v48] == byte_1813C6343[v49]) {
            goto LABEL_57;
          }
          if (++v44 == v43) {
            goto LABEL_65;
          }
        }
      }

      LODWORD(v44) = 0;
      uint64_t v33 = 0LL;
LABEL_64:
      if ((_DWORD)v44 != (_DWORD)v43) {
        goto LABEL_69;
      }
LABEL_65:
      if ((*(_BYTE *)(v28 + 48) & 0x80) == 0)
      {
        uint64_t v50 = v28;
        if (sub_1812E34DC(zColumnName))
        {
          uint64_t v28 = v50;
          if ((*(__int16 *)(v50 + 52) & 0x80000000) == 0)
          {
            LODWORD(v44) = *(unsigned __int16 *)(v50 + 52);
            uint64_t v33 = *(void *)(v50 + 8) + 16LL * *(unsigned __int16 *)(v50 + 52);
LABEL_69:
            if (v33)
            {
              __int16 v51 = *(_WORD *)(v33 + 14);
              if ((v51 & 4) != 0)
              {
                int v62 = v44;
                uint64_t v64 = v28;
                size_t v54 = strlen(*(const char **)v33);
                __int16 v51 = *(_WORD *)(v33 + 14);
                size_t v55 = *(void *)v33 + v54;
                LODWORD(v44) = v62;
                uint64_t v28 = v64;
                uint64_t v29 = (const char *)(v55 + 1);
              }

              else
              {
                unint64_t v52 = *(unsigned __int8 *)(v33 + 8);
                else {
                  uint64_t v29 = 0LL;
                }
              }

              if ((v51 & 0x200) != 0)
              {
                uint64_t v56 = *(void *)v33 - 1LL;
                if ((v51 & 4) != 0)
                {
                }

                int v53 = (const char *)(v56 + 1);
              }

              else
              {
                int v53 = 0LL;
              }

              BOOL v31 = (*(_BYTE *)(v33 + 8) & 0xF) != 0;
              int v32 = v51 & 1;
              else {
                LODWORD(v33) = 0;
              }
LABEL_76:
              int v30 = "BINARY";
              if (v53) {
                int v30 = v53;
              }
              if (*((_BYTE *)db + 111)) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }

            int v53 = 0LL;
            BOOL v31 = 0;
LABEL_75:
            int v32 = 1;
            uint64_t v29 = "INTEGER";
            goto LABEL_76;
          }

        uint64_t v8 = 256;
        goto LABEL_32;
      }
    }

    uint64_t v8 = 512;
  }

  int v18 = (uint64_t (**)(uint64_t **))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_62:
    (*v18)(v6);
    goto LABEL_63;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v6);
  --qword_18C468B10;
  off_18C4653A8(v6);
  int v6 = (uint64_t **)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v18 = (uint64_t (**)(uint64_t **))&xmmword_18C465410;
    goto LABEL_62;
  }

    if ((v13 & 0x82) == 0) {
      break;
    }
    int v32 = *(unsigned __int8 **)(*(void *)v8 + 24LL);
    if (!v32
      || *v32 != 167
      || *((_DWORD *)v32 + 11) != *((_DWORD *)a1 + 11)
      || *((_DWORD *)v32 + 12) != *((__int16 *)a1 + 44))
    {
      break;
    }

        goto LABEL_59;
      }

      if ((v13 & 0x12) != 0 && *((void *)v12 + 1))
      {
        uint64_t v14 = sub_181303DF0((uint64_t)v12);
        goto LABEL_18;
      }
    }

    else
    {
      sub_1812CF36C(89717);
    }

    uint64_t v14 = 0LL;
    goto LABEL_74;
  }

    uint64_t v125 = v8;
    if ((_DWORD)v8 == 1 && (v120 & 2) == 0 && (v120 & 0x20) == 0)
    {
      uint64_t v33 = *v6;
      unsigned int v34 = *(void *)(*v6 + 64);
      if (*(_BYTE *)(a1 + 463))
      {
        if (v34) {
          goto LABEL_62;
        }
        *(_DWORD *)(a2 + 80) = *(_DWORD *)(v33 + 104);
LABEL_170:
        uint64_t v107 = *(void *)(v33 + 96);
      }

      else
      {
        __int128 v104 = *(int *)(v33 + 104);
        *(_DWORD *)(a2 + 80) = v104;
        if (!v34) {
          goto LABEL_170;
        }
        __int128 v105 = *(const void **)(v33 + 96);
        if ((int64_t)(v104 + 20) <= *(void *)(a2 + 32))
        {
          __int128 v111 = *(void **)(a2 + 24);
        }

        else
        {
          __int128 v106 = *(void *)(a2 + 24);
          if (sqlite3_initialize() || (uint64_t v8 = 2 * (int)v104 + 20, (v111 = (void *)sub_18127D33C(v106, v8)) == 0LL))
          {
            *(void *)(a2 + 72) = *(void *)(a2 + 24);
            int result = 7LL;
            *(_DWORD *)(a2 + 12) = v125;
            return result;
          }

          *(void *)(a2 + 24) = v111;
          *(void *)(a2 + 32) = v8;
          LODWORD(v8) = v125;
        }

        memcpy(v111, v105, v104);
        __int128 v112 = *(void *)(a2 + 24) + v104;
        *(_DWORD *)(v112 + 16) = 0;
        *(void *)__int128 v112 = 0LL;
        *(void *)(v112 + 8) = 0LL;
        uint64_t v107 = *(void *)(a2 + 24);
      }

      *(void *)(a2 + 72) = v107;
      goto LABEL_178;
    }

  uint64_t v28 = *(_WORD *)(v14 + 20);
  if ((v28 & 0x24) != 0)
  {
    uint64_t v29 = *(double *)v14;
  }

  else if ((v28 & 8) != 0)
  {
    __int16 v51 = *(double *)v14;
    if (*(double *)v14 >= -9.22337204e18)
    {
      if (v51 <= 9.22337204e18) {
        *(void *)&uint64_t v29 = (uint64_t)v51;
      }
      else {
        LODWORD(v29) = -1;
      }
    }

    else
    {
      LODWORD(v29) = 0;
    }
  }

  else if ((v28 & 0x12) != 0 && *(void *)(v14 + 8))
  {
    LODWORD(v29) = sub_181303DF0(v14);
  }

  else
  {
    LODWORD(v29) = 0;
  }

  *(_DWORD *)(a1 + 32) = LODWORD(v29);
LABEL_63:
  int v30 = *(uint64_t **)(v5 + 72);
  BOOL v31 = *(uint64_t **)(v5 + 56);
  int v32 = *(unsigned __int8 *)(v5 + 460);
  uint64_t v33 = *(_DWORD *)(v5 + 48);
  unsigned int v34 = (uint64_t *)(a1 + 24);
  uint64_t v69 = 0u;
  v65[0] = v30;
  v65[1] = (uint64_t *)LODWORD(v29);
  v65[2] = v31;
  int v67 = v33;
  int v68 = v24;
  uint64_t v66 = v32;
  if (!v27)
  {
    __int16 v47 = strlen(v26);
    uint64_t v48 = sub_18136F840(v65, (unsigned __int8 *)v26, v47, (uint64_t *)(a1 + 24), &v70);
    int v6 = v48;
    char v35 = *v34;
    if ((_DWORD)v48 || !DWORD2(v69))
    {
      if (!(_DWORD)v48)
      {
        if (!v35) {
          goto LABEL_65;
        }
        unint64_t v52 = sub_18136F3EC((uint64_t *)(a1 + 24), 12);
        char v35 = *v34;
        if ((_DWORD)v52)
        {
          int v6 = v52;
        }

        else
        {
          int v6 = sub_18136F7F0(*v34, 12);
          if (!(_DWORD)v6) {
            goto LABEL_65;
          }
        }
      }

      sub_18136EEAC(v35);
      const char *v34 = 0LL;
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v6 != 18) {
          return v6;
        }
        sub_181362330((char **)(v5 + 16), "FTS expression tree is too large (maximum depth %d)");
        return 1LL;
      }
    }

    else
    {
      sub_18136EEAC(*v34);
      const char *v34 = 0LL;
    }

    sub_181362330((char **)(v5 + 16), "malformed MATCH expression: [%s]");
    return 1LL;
  }

  char v35 = 0LL;
  const char *v34 = 0LL;
LABEL_65:
  int v36 = *(void *)a1;
  int v72 = 0LL;
  uint64_t v71 = 0;
  sub_1813707A8(a1, v35, &v72, &v71, (_DWORD *)&v72 + 1);
  uint64_t v12 = v64;
  if (!HIDWORD(v72))
  {
    unsigned int v37 = v72;
    if ((int)v72 >= 2)
    {
      if (*(_BYTE *)(v36 + 460))
      {
        uint64_t v38 = v71;
        if (sqlite3_initialize() || (int v53 = (uint64_t *)sub_18126F0AC(16 * v38 + 40LL * v37)) == 0LL)
        {
          HIDWORD(v72) = 7;
          goto LABEL_70;
        }

        size_t v54 = (char ***)v53;
        size_t v55 = &v53[5 * v37];
        v65[0] = v53;
        int v70 = v55;
        sub_181370A2C((sqlite3_blob *)a1, 0LL, *(int **)(a1 + 24), (uint64_t *)v65, &v70, (int *)&v72 + 1);
        if (!HIDWORD(v72))
        {
          uint64_t v56 = -858993459 * ((unint64_t)((char *)v65[0] - (char *)v54) >> 3);
          __int128 v57 = (char *)v70;
          uint64_t v58 = sub_181370CC4(a1, 0LL, v54, v56);
          if (!v58)
          {
            unsigned int v59 = v57 - (char *)v55;
            if ((int)((unint64_t)(v57 - (char *)v55) >> 3) >= 1)
            {
              __int128 v60 = 0LL;
              __int128 v61 = (int)(v59 >> 3);
              do
              {
                uint64_t v58 = sub_181370CC4(a1, (char **)v55[v60++], v54, v56);
                if (v58) {
                  int v62 = 0;
                }
                else {
                  int v62 = v60 < v61;
                }
              }

              while (v62);
              uint64_t v12 = v64;
            }
          }

          HIDWORD(v72) = v58;
        }

        uint64_t v63 = (void (**)(char ***))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_130;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v54);
        --qword_18C468B10;
        off_18C4653A8(v54);
        size_t v54 = (char ***)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v63 = (void (**)(char ***))&xmmword_18C465410;
LABEL_130:
          (*v63)(v54);
        }
      }
    }
  }

          v35 |= *(void *)&v269[6 * v230 + 3];
          unsigned int v34 = v230 + 1;
        }

        while (v230 + 1 != v229);
        if (*(void *)&v36 != v35 && v229 != 4)
        {
          int v32 = v229 + 1;
          BOOL v31 = v225;
          uint64_t v237 = v226;
          if (v227 < 0) {
            continue;
          }
LABEL_55:
          uint64_t v237 = (v31 + (int)v32) / (int)v32;
          continue;
        }

        break;
      }

      v141 = 0LL;
      int32x4_t v243 = 0;
      uint16x8_t v254 = 0;
      int v131 = 0LL;
      v132 = v228;
      uint64_t v142 = v241;
      while (2)
      {
        uint64_t v143 = &v269[6 * v141 + 1];
        uint64_t v144 = *v142;
        int v266 = 0;
        uint64_t v145 = *((void *)v143 + 2);
        int32x4_t v249 = v143[1];
        unsigned int v146 = *v143 + 1;
        int v147 = sqlite3_column_text((sqlite3_stmt *)v142[2], v146);
        v148 = (sqlite3_stmt *)v142[2];
        if (!v147)
        {
          if (sqlite3_column_type(v148, v146) == 5) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = 7;
          }
          goto LABEL_370;
        }

        int32x4_t v240 = v141;
        BOOL v149 = sqlite3_column_bytes(v148, v146);
        uint64_t v234 = v144;
        uint64_t v150 = *(uint64_t **)(v144 + 72);
        unint64_t v151 = *v150;
        char v152 = *((unsigned int *)v142 + 8);
        uint8x16_t v256 = 0LL;
        uint64_t v238 = v149;
        uint64_t v153 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *))(v151 + 24))(v150, v147);
        if (v153)
        {
          uint64_t v221 = v153;
LABEL_385:
          v132 = v228;
          uint64_t v28 = v236;
          uint64_t v43 = v221;
          break;
        }

        __sa = (char *)v147;
        *uint8x16_t v256 = v150;
        uint64_t v154 = v256;
        if (*(int *)v151 >= 1)
        {
          uint64_t v155 = (*(uint64_t (**)(uint64_t **, uint64_t))(v151 + 48))(v256, v152);
          uint64_t v154 = v256;
          if (v155)
          {
            uint64_t v221 = v155;
            (*(void (**)(uint64_t **))(v151 + 32))(v256);
            goto LABEL_385;
          }
        }

        uint64_t v28 = v236;
        int v156 = v243;
        v157 = v249;
        int32x4_t v244 = 0;
        v158 = 0;
        int32x4_t v247 = v154;
        v250 = v151;
        while (1)
        {
          int v265 = -1;
          uint64_t v264 = 0LL;
          int v160 = (*(uint64_t (**)(uint64_t **, void **, int *, char *, uint64_t *, int *))(v151 + 40))( v154,  &v262,  &v265,  (char *)&v264 + 4,  &v264,  &v266);
          if (v160)
          {
            unint64_t v159 = v160;
            if (v160 != 101) {
              goto LABEL_367;
            }
            int v209 = strlen(&__sa[v244]);
            int v210 = v156;
            if (v254 + v209 + 1 >= (int)v156)
            {
              if (sqlite3_initialize()) {
                goto LABEL_361;
              }
              int v217 = v209 + (uint64_t)(int)v156 + 100;
              uint64_t v218 = sub_18127D33C(v131, v217);
              if (!v218) {
                goto LABEL_361;
              }
              int v131 = v218;
              int v210 = v217;
            }

            memcpy((void *)(v131 + v254), &__sa[v244], v209);
            int v211 = v254 + v209;
            goto LABEL_359;
          }

          uint64_t v161 = v266;
          if (v266 >= v157) {
            break;
          }
          unint64_t v159 = 0;
LABEL_270:
          if (v159) {
            goto LABEL_369;
          }
        }

        if (v158) {
          goto LABEL_315;
        }
        if (!v145) {
          goto LABEL_291;
        }
        v162 = 0LL;
        v163 = *((unsigned int *)v142 + 8);
        BOOL v164 = 1;
        do
        {
          unsigned int v165 = v164;
          uint64_t v166 = v145 >> v162++;
          ++v164;
        }

        while ((v166 & 1) == 0);
        char v167 = v237 - 1;
        do
        {
          --v165;
          uint64_t v168 = v145 >> v167--;
        }

        while ((v168 & 1) == 0);
        v169 = v165 >= 0 ? v165 : v165 + 1;
        if (v165 >= 2)
        {
          LODWORD(v170) = v156;
          v269[0] = 0;
          unint64_t v171 = *(uint64_t **)(v234 + 72);
          int v172 = *v171;
          uint8x16_t v256 = 0LL;
          unsigned int v173 = (*(uint64_t (**)(uint64_t *, char *, void, uint64_t ***))(v172 + 24))( v171,  &__sa[SHIDWORD(v264)],  (v238 - HIDWORD(v264)),  &v256);
          if (v173)
          {
            int v220 = v173;
            goto LABEL_382;
          }

          *uint8x16_t v256 = v171;
          int v174 = v256;
          if (*(int *)v172 >= 1)
          {
            int v175 = (*(uint64_t (**)(uint64_t **, uint64_t))(v172 + 48))(v256, v163);
            int v174 = v256;
            if (v175)
            {
              int v220 = v175;
              (*(void (**)(uint64_t **))(v172 + 32))(v256);
              goto LABEL_382;
            }
          }

          unsigned int v176 = (v169 >> 1) + v237;
          do
          {
            uint64_t v177 = v269[0];
            if (v269[0] >= v176)
            {
              (*(void (**)(uint64_t **))(v172 + 32))(v174);
              goto LABEL_293;
            }

            uint64_t v268 = 0LL;
            __int32 v267 = 0;
            v178 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, _DWORD *))(v172 + 40))( v174,  &v256,  (char *)&v268 + 4,  &v268,  &v267,  v269);
          }

          while (!v178);
          int v179 = *(void (**)(uint64_t **))(v172 + 32);
          int v180 = v178;
          v179(v174);
          if (v180 != 101)
          {
            int v220 = v180;
            goto LABEL_382;
          }

          if (v30 != *(void *)&v28) {
            goto LABEL_19;
          }
LABEL_104:
          uint64_t v19 = *(_DWORD *)(a4 + 16);
LABEL_28:
          if (++v20 >= v19) {
            goto LABEL_116;
          }
        }

        sub_1812CF36C(89717);
LABEL_56:
        int v30 = 0LL;
        goto LABEL_57;
      }

    ;
  }

  if (byte_1813C6343[v31] == byte_1813C6343[v32]) {
    goto LABEL_57;
  }
  for (uint64_t n = 0LL; ; ++n)
  {
    char v35 = *(unsigned __int8 *)(v18 + n);
    int v36 = aStructIovec[n];
    if ((_DWORD)v35 == (_DWORD)v36) {
      break;
    }
    if (byte_1813C6343[v35] != byte_1813C6343[v36]) {
      goto LABEL_36;
    }
LABEL_67:
    ;
  }

  if (*(_BYTE *)(v18 + n)) {
    goto LABEL_67;
  }
  unsigned int v17 = 4;
LABEL_71:
  *(_BYTE *)(a1 + 32) = v17;
LABEL_72:
  int result = 0LL;
  *(void *)(a1 + 8) = 1LL;
  return result;
}

uint64_t sub_1812E2C64(uint64_t a1, char *a2, _BYTE *a3)
{
  if (!a3)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(v15 + 56);
    uint64_t v17 = *(void *)(v16 + 24);
    if (v17)
    {
      int v18 = *a2;
      if (*a2)
      {
        unsigned int v19 = 0;
        uint64_t v20 = a2 + 1;
        do
        {
          unsigned int v19 = -1640531535 * (v19 + byte_1813C6343[v18]);
          int v21 = *v20++;
          int v18 = v21;
        }

        while (v21);
      }

      else
      {
        unsigned int v19 = 0;
      }

      size_t v54 = (_DWORD *)(v17 + 16LL * (v19 % *(_DWORD *)(v16 + 8)));
      uint64_t v22 = (uint64_t *)(v54 + 2);
      int v23 = *v54;
      if (v23)
      {
        do
        {
LABEL_67:
          uint64_t v22 = (uint64_t *)*v22;
          size_t v55 = (_BYTE *)v22[3];
          for (uint64_t i = a2; ; ++i)
          {
            uint64_t v57 = *v55;
            uint64_t v58 = *i;
            if ((_DWORD)v57 != (_DWORD)v58) {
              break;
            }
            if (!*v55) {
              goto LABEL_24;
            }
LABEL_69:
            ++v55;
          }

          if (byte_1813C6343[v57] == byte_1813C6343[v58]) {
            goto LABEL_69;
          }
          --v23;
        }

        while (v23);
        uint64_t v22 = &qword_18C550660;
LABEL_24:
        uint64_t v24 = v22[2];
        if (v24) {
          return v24;
        }
        uint64_t v25 = *(void *)(v15 + 24);
        uint64_t v26 = *(void *)(v25 + 24);
        if (v26)
        {
          int v27 = *a2;
          if (*a2)
          {
            unsigned int v28 = 0;
            uint64_t v29 = a2 + 1;
            do
            {
              unsigned int v28 = -1640531535 * (v28 + byte_1813C6343[v27]);
              int v30 = *v29++;
              int v27 = v30;
            }

            while (v30);
          }

          else
          {
            unsigned int v28 = 0;
          }

          uint64_t v85 = (_DWORD *)(v26 + 16LL * (v28 % *(_DWORD *)(v25 + 8)));
          unsigned int v59 = (uint64_t *)(v85 + 2);
          int v60 = *v85;
          if (v60)
          {
            while (1)
            {
LABEL_116:
              unsigned int v59 = (uint64_t *)*v59;
              BOOL v86 = (_BYTE *)v59[3];
              for (uint64_t j = a2; ; ++j)
              {
                uint64_t v88 = *v86;
                uint64_t v89 = *j;
                if ((_DWORD)v88 != (_DWORD)v89) {
                  break;
                }
                if (!*v86) {
                  goto LABEL_77;
                }
LABEL_118:
                ++v86;
              }

              if (byte_1813C6343[v88] == byte_1813C6343[v89]) {
                goto LABEL_118;
              }
              if (!--v60)
              {
                unsigned int v59 = &qword_18C550660;
LABEL_77:
                uint64_t v24 = v59[2];
                if (v24) {
                  return v24;
                }
                uint64_t v61 = *(unsigned int *)(a1 + 40);
                if ((int)v61 >= 3)
                {
                  uint64_t v62 = 2LL;
                  while (1)
                  {
                    uint64_t v63 = *(void *)(v15 + 32 * v62 + 24);
                    uint64_t v64 = *(void *)(v63 + 24);
                    if (v64) {
                      break;
                    }
                    uint64_t v69 = (uint64_t *)(v63 + 16);
                    int v70 = *(_DWORD *)(v63 + 12);
                    if (v70) {
                      goto LABEL_92;
                    }
LABEL_86:
                    uint64_t v69 = &qword_18C550660;
LABEL_87:
                    uint64_t v24 = v69[2];
                    if (v24) {
                      return v24;
                    }
                    if (++v62 == v61) {
                      goto LABEL_101;
                    }
                  }

                  int v65 = *a2;
                  if (*a2)
                  {
                    unsigned int v66 = 0;
                    int v67 = a2 + 1;
                    do
                    {
                      unsigned int v66 = -1640531535 * (v66 + byte_1813C6343[v65]);
                      int v68 = *v67++;
                      int v65 = v68;
                    }

                    while (v68);
                  }

                  else
                  {
                    unsigned int v66 = 0;
                  }

                  uint64_t v71 = (_DWORD *)(v64 + 16LL * (v66 % *(_DWORD *)(v63 + 8)));
                  uint64_t v69 = (uint64_t *)(v71 + 2);
                  int v70 = *v71;
                  if (!v70) {
                    goto LABEL_86;
                  }
LABEL_92:
                  uint64_t v69 = (uint64_t *)*v69;
                  int v72 = (_BYTE *)v69[3];
                  for (uint64_t k = a2; ; ++k)
                  {
                    uint64_t v74 = *v72;
                    uint64_t v75 = *k;
                    if ((_DWORD)v74 == (_DWORD)v75)
                    {
                      if (!*v72) {
                        goto LABEL_87;
                      }
                    }

                    else if (byte_1813C6343[v74] != byte_1813C6343[v75])
                    {
                      if (!--v70) {
                        goto LABEL_86;
                      }
                      goto LABEL_92;
                    }

                    ++v72;
                  }
                }

LABEL_140:
  unsigned int v92 = a2 + 7;
  if ((_DWORD)v6 != 1)
  {
    for (uint64_t mm = "schema"; ; ++mm)
    {
      uint64_t v105 = *v92;
      uint64_t v106 = *mm;
      if ((_DWORD)v105 == (_DWORD)v106)
      {
        if (!*v92) {
          goto LABEL_127;
        }
      }

      else if (byte_1813C6343[v105] != byte_1813C6343[v106])
      {
        return 0LL;
      }

      ++v92;
    }
  }

  unsigned int v93 = "temp_schema";
  uint64_t v94 = a2 + 7;
  while (2)
  {
    uint64_t v95 = *v94;
    uint64_t v96 = *v93;
    if ((_DWORD)v95 != (_DWORD)v96)
    {
      if (byte_1813C6343[v95] != byte_1813C6343[v96])
      {
        int v97 = "schema";
        for (nuint64_t n = a2 + 7; ; ++nn)
        {
          uint64_t v99 = *nn;
          uint64_t v100 = *v97;
          if ((_DWORD)v99 == (_DWORD)v100)
          {
            if (!*nn) {
              goto LABEL_164;
            }
          }

          else if (byte_1813C6343[v99] != byte_1813C6343[v100])
          {
            for (i1 = "master"; ; ++i1)
            {
              uint64_t v102 = *v92;
              uint64_t v103 = *i1;
              if ((_DWORD)v102 == (_DWORD)v103)
              {
                if (!*v92) {
                  goto LABEL_164;
                }
              }

              else if (byte_1813C6343[v102] != byte_1813C6343[v103])
              {
                return 0LL;
              }

              ++v92;
            }
          }

          ++v97;
        }
      }

      goto LABEL_143;
    }

    if (*v94)
    {
LABEL_143:
      ++v94;
      ++v93;
      continue;
    }

    break;
  }

uint64_t sub_1812E34DC(_BYTE *a1)
{
  int v1 = "_ROWID_";
  for (uint64_t i = a1; ; ++i)
  {
    uint64_t v3 = *i;
    uint64_t v4 = *(unsigned __int8 *)v1;
    if ((_DWORD)v3 != (_DWORD)v4) {
      break;
    }
    if (!*i) {
      return 1LL;
    }
LABEL_3:
    ++v1;
  }

  if (byte_1813C6343[v3] == byte_1813C6343[v4]) {
    goto LABEL_3;
  }
  uint64_t v6 = "ROWID";
  for (uint64_t j = a1; ; ++j)
  {
    uint64_t v8 = *j;
    uint64_t v9 = *(unsigned __int8 *)v6;
    if ((_DWORD)v8 != (_DWORD)v9) {
      break;
    }
    if (!*j) {
      return 1LL;
    }
LABEL_9:
    ++v6;
  }

  if (byte_1813C6343[v8] == byte_1813C6343[v9]) {
    goto LABEL_9;
  }
  for (uint64_t k = "OID"; ; ++k)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *(unsigned __int8 *)k;
    if ((_DWORD)v11 != (_DWORD)v12) {
      break;
    }
    if (!*a1) {
      return 1LL;
    }
LABEL_15:
    ++a1;
  }

  if (byte_1813C6343[v11] == byte_1813C6343[v12]) {
    goto LABEL_15;
  }
  return 0LL;
}

char *sub_1812E35B4(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 14) & 4) != 0) {
    return (char *)(*(void *)a1 + strlen(*(const char **)a1) + 1);
  }
  unint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  return (char *)a2;
}

int sqlite3_sleep(int a1)
{
  if (sqlite3_initialize()) {
    return 0;
  }
  if ((_BYTE)word_18C465384 && (uint64_t v3 = qword_18C4653F0(2LL)) != 0)
  {
    uint64_t v4 = v3;
    xmmword_18C465400(v3);
    uint64_t v5 = qword_18C468B68;
    xmmword_18C465410(v4);
    if (!v5) {
      return 0;
    }
  }

  else
  {
    uint64_t v5 = qword_18C468B68;
    if (!qword_18C468B68) {
      return 0;
    }
  }

  if (a1 >= 0) {
    uint64_t v6 = (1000 * a1);
  }
  else {
    uint64_t v6 = 0LL;
  }
  return (*(int (**)(uint64_t, uint64_t))(v5 + 112))(v5, v6) / 1000;
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_30;
  }

  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    uint64_t v7 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1812CF36C(189525);
  }

  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_30;
    }

    goto LABEL_5;
  }

  uint64_t v9 = *(void *)&op;
  uint64_t v11 = *((void *)a1 + 3);
  if (v11) {
    xmmword_18C465400(v11);
  }
  if (!zDbName)
  {
    LODWORD(v13) = 0;
    uint64_t v14 = *((void *)a1 + 4);
    goto LABEL_33;
  }

  int v12 = *((_DWORD *)a1 + 10);
  uint64_t v13 = (v12 - 1);
  if (v12 < 1) {
    goto LABEL_40;
  }
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v15 = (_BYTE **)(v14 + 32 * v13);
  while (1)
  {
    uint64_t v16 = *v15;
    if (*v15) {
      break;
    }
LABEL_19:
    if (!(_DWORD)v13)
    {
      int v21 = zDbName;
      for (uint64_t i = "main"; ; ++i)
      {
        uint64_t v23 = *(unsigned __int8 *)i;
        uint64_t v24 = *(unsigned __int8 *)v21;
        if ((_DWORD)v23 == (_DWORD)v24)
        {
          if (!*i)
          {
            LODWORD(v13) = 0;
            goto LABEL_33;
          }
        }

        else if (byte_1813C6343[v23] != byte_1813C6343[v24])
        {
          break;
        }

        ++v21;
      }
    }

    v15 -= 4;
    BOOL v20 = (int)v13 <= 0;
    LODWORD(v13) = v13 - 1;
    if (v20) {
      goto LABEL_40;
    }
  }

  for (uint64_t j = zDbName; ; ++j)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = *(unsigned __int8 *)j;
    if ((_DWORD)v18 == (_DWORD)v19) {
      break;
    }
    if (byte_1813C6343[v18] != byte_1813C6343[v19]) {
      goto LABEL_19;
    }
LABEL_15:
    ++v16;
  }

  if (*v16) {
    goto LABEL_15;
  }
  if ((v13 & 0x80000000) == 0)
  {
LABEL_33:
    uint64_t v26 = *(void *)(v14 + 32LL * v13 + 8);
    if (v26)
    {
      if (*(_BYTE *)(v26 + 17))
      {
        ++*(_DWORD *)(v26 + 20);
        if (!*(_BYTE *)(v26 + 18)) {
          sub_1812FDE20(v26);
        }
      }

      int v27 = *(uint64_t **)(v26 + 8);
      uint64_t v28 = *v27;
      uint64_t v29 = *(uint64_t **)(*v27 + 72);
      switch((int)v9)
      {
        case 7:
          int v30 = 0;
          *(void *)a4 = v29;
          if (*(_BYTE *)(v26 + 17)) {
            goto LABEL_82;
          }
          goto LABEL_84;
        case 27:
          int v30 = 0;
          goto LABEL_48;
        case 28:
          int v30 = 0;
          uint64_t v37 = *(void *)(v28 + 344);
          v28 += 80LL;
          if (v37) {
            uint64_t v28 = v37 + 16;
          }
LABEL_48:
          *(void *)a4 = *(void *)v28;
          if (!*(_BYTE *)(v26 + 17)) {
            goto LABEL_84;
          }
          goto LABEL_82;
        case 35:
          int v30 = 0;
          *(_DWORD *)a4 = *(_DWORD *)(v28 + 132);
          if (!*(_BYTE *)(v26 + 17)) {
            goto LABEL_84;
          }
          goto LABEL_82;
        case 38:
          unsigned int v38 = *(_DWORD *)a4;
          if (!*(_BYTE *)(v26 + 17))
          {
            int v40 = *((unsigned __int8 *)v27 + 38);
            int v41 = *((_DWORD *)v27 + 13);
            int v42 = *((_DWORD *)v27 + 14);
            goto LABEL_65;
          }

          int v39 = *(_DWORD *)(v26 + 20);
          *(_DWORD *)(v26 + 20) = v39 + 1;
          if (*(_BYTE *)(v26 + 18))
          {
            int v40 = *((unsigned __int8 *)v27 + 38);
            int v41 = *((_DWORD *)v27 + 13);
            int v42 = *((_DWORD *)v27 + 14);
          }

          else
          {
            sub_1812FDE20(v26);
            uint64_t v44 = *(void *)(v26 + 8);
            int v40 = *(unsigned __int8 *)(v44 + 38);
            int v41 = *(_DWORD *)(v44 + 52);
            int v42 = *(_DWORD *)(v44 + 56);
            if (!*(_BYTE *)(v26 + 17)) {
              goto LABEL_65;
            }
            int v39 = *(_DWORD *)(v26 + 20) - 1;
          }

          *(_DWORD *)(v26 + 20) = v39;
          if (!v39) {
            sub_1812FDEFC(v26);
          }
LABEL_65:
          int v45 = v41 - v42;
          if (v41 - v42 <= v40) {
            int v45 = v40;
          }
          *(_DWORD *)a4 = v45;
          if (v38 <= 0xFF) {
            sub_1812C72E0(v26, 0, v38, 0, v4);
          }
          goto LABEL_80;
        case 42:
          if (!*((_BYTE *)v27 + 36) && !*(_BYTE *)(v28 + 16))
          {
            ++*(_DWORD *)(v28 + 132);
            for (uint64_t k = *(void *)(v28 + 112); k; uint64_t k = *(void *)(k + 64))
              *(_DWORD *)(k + 24) = 1;
            sub_18126C6E4(*(void **)(v28 + 336), 0);
          }

          goto LABEL_80;
        default:
          int v31 = *((_DWORD *)a1 + 172);
          uint64_t v32 = *v29;
          unsigned int v33 = v9 - 101;
          if ((v9 - 101) <= 1 && v32)
          {
            int v34 = *(unsigned __int8 **)(**(void **)(*(void *)(*((void *)a1 + 4) + 8LL) + 8LL) + 320LL);
            if (v34)
            {
              int v36 = *v34;
              v34 += 2;
              int v35 = v36;
            }

            else
            {
              int v35 = 0;
            }

            int v51 = v35;
            (*(void (**)(uint64_t *, uint64_t, int *))(v32 + 80))(v29, 107LL, &v51);
            uint64_t v32 = *v29;
            if (*v29)
            {
              (*(void (**)(uint64_t *, uint64_t, unsigned __int8 *))(v32 + 80))(v29, 108LL, v34);
              uint64_t v32 = *v29;
            }
          }

          if (!v32)
          {
            *((_DWORD *)a1 + 172) = v31;
            int v30 = 12;
            if (!*(_BYTE *)(v26 + 17)) {
              goto LABEL_84;
            }
            goto LABEL_82;
          }

          int v46 = (*(uint64_t (**)(uint64_t *, uint64_t, void *))(v32 + 80))(v29, v9, a4);
          int v30 = v46;
          uint64_t v47 = *v29;
          *((_DWORD *)a1 + 172) = v31;
          if (v33 <= 1 && v47 && v46 == 0)
          {
            sub_1812D6078((uint64_t)a1);
LABEL_80:
            int v30 = 0;
          }

          if (*(_BYTE *)(v26 + 17))
          {
LABEL_82:
            int v49 = *(_DWORD *)(v26 + 20) - 1;
            *(_DWORD *)(v26 + 20) = v49;
            if (!v49) {
              sub_1812FDEFC(v26);
            }
          }

uint64_t sub_1812E3B68(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 17))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v6 + 38);
    int v4 = *(_DWORD *)(v6 + 52);
    int v5 = *(_DWORD *)(v6 + 56);
    goto LABEL_8;
  }

  ++*(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(a1 + 18))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 38);
    int v4 = *(_DWORD *)(v2 + 52);
    int v5 = *(_DWORD *)(v2 + 56);
  }

  else
  {
    sub_1812FDE20(a1);
    uint64_t v7 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v7 + 38);
    int v4 = *(_DWORD *)(v7 + 52);
    int v5 = *(_DWORD *)(v7 + 56);
    if (!*(_BYTE *)(a1 + 17)) {
      goto LABEL_8;
    }
  }

  int v8 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v8;
  if (!v8) {
    sub_1812FDEFC(a1);
  }
LABEL_8:
  else {
    return (v4 - v5);
  }
}

int sqlite3_test_control(int op, ...)
{
  *(double *)&unint64_t v93 = va_arg(va, double);
  uint64_t v94 = va_arg(va, uint64_t (*)(void));
  uint64_t v95 = va_arg(va, unint64_t *);
  uint64_t v96 = va_arg(va, _DWORD *);
  int v1 = 0;
  switch(op)
  {
    case 5:
      int v1 = 0;
      uint64_t v2 = &xmmword_18C468D14;
      unsigned int v3 = &xmmword_18C5506C0;
      goto LABEL_4;
    case 6:
      int v1 = 0;
      uint64_t v2 = &xmmword_18C5506C0;
      unsigned int v3 = &xmmword_18C468D14;
LABEL_4:
      *((_DWORD *)v3 + 32) = *((_DWORD *)v2 + 32);
      __int128 v4 = v2[7];
      v3[6] = v2[6];
      v3[7] = v4;
      __int128 v5 = v2[3];
      v3[2] = v2[2];
      v3[3] = v5;
      __int128 v6 = v2[5];
      v3[4] = v2[4];
      v3[5] = v6;
      __int128 v7 = v2[1];
      *unsigned int v3 = *v2;
      v3[1] = v7;
      return v1;
    case 8:
      int v8 = (_OWORD *)sub_18126F0AC(512LL);
      uint64_t v9 = v8;
      if (v8)
      {
        v8[30] = 0u;
        v8[31] = 0u;
        v8[28] = 0u;
        v8[29] = 0u;
        v8[26] = 0u;
        v8[27] = 0u;
        v8[24] = 0u;
        v8[25] = 0u;
        v8[22] = 0u;
        v8[23] = 0u;
        v8[20] = 0u;
        v8[21] = 0u;
        v8[18] = 0u;
        v8[19] = 0u;
        v8[16] = 0u;
        v8[17] = 0u;
        v8[14] = 0u;
        v8[15] = 0u;
        v8[12] = 0u;
        v8[13] = 0u;
        v8[10] = 0u;
        v8[11] = 0u;
        v8[8] = 0u;
        v8[9] = 0u;
        v8[6] = 0u;
        v8[7] = 0u;
        v8[4] = 0u;
        v8[5] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        *int v8 = 0u;
        v8[1] = 0u;
        *(_DWORD *)int v8 = v93;
      }

      int v10 = v93 + 7;
      size_t v11 = (v10 >> 3) + 1;
      int v12 = (_BYTE *)sub_18126F0AC(v11);
      uint64_t v13 = v12;
      if (v12) {
        bzero(v12, v11);
      }
      if (sqlite3_initialize())
      {
        int v1 = -1;
        goto LABEL_173;
      }

      uint64_t v31 = sub_18126F0AC(512LL);
      uint64_t v32 = (void *)v31;
      int v1 = -1;
      if (!v9) {
        goto LABEL_166;
      }
      BOOL v33 = !v13 || v31 == 0;
      if (v33) {
        goto LABEL_166;
      }
      uint64_t v34 = 0LL;
      int __buf = 0;
      while (2)
      {
        int v35 = *((_DWORD *)v94 + v34);
        if ((v35 - 1) < 2 || v35 == 5)
        {
          uint64_t v37 = (char *)v94 + 4 * v34;
          int v38 = *((_DWORD *)v37 + 2);
          int v39 = v38 - 1;
          *((_DWORD *)v37 + 2) = *((_DWORD *)v37 + 3) + v38;
          uint64_t v40 = 4LL;
          goto LABEL_81;
        }

        if (v35)
        {
          sqlite3_initialize();
          arc4random_buf(&__buf, 4uLL);
          int v39 = __buf;
          uint64_t v40 = 2LL;
LABEL_81:
          uint64_t v41 = (4 * v34) | 4;
          int v42 = *(_DWORD *)((char *)v94 + v41);
          BOOL v16 = __OFSUB__(v42, 1);
          int v43 = v42 - 1;
          if (!((v43 < 0) ^ v16 | (v43 == 0))) {
            uint64_t v40 = 0LL;
          }
          *(_DWORD *)((char *)v94 + v41) = v43;
          v34 += v40;
          int __buf = (v39 & 0x7FFFFFFF) % (int)v93;
          int v44 = 1 << ((__buf + 1) & 7);
          unint64_t v45 = (unint64_t)(__buf + 1) >> 3;
          char v46 = v13[v45];
          if ((v35 & 1) == 0)
          {
            v13[v45] = v46 & ~(_BYTE)v44;
            sub_181300F30(v9, __buf + 1, v32);
            continue;
          }

          v13[v45] = v46 | v44;
          if (v35 != 5 && sub_1812B8E48(v9, __buf + 1))
          {
            int v1 = -1;
            goto LABEL_166;
          }

          continue;
        }

        break;
      }

      unsigned int v55 = *v9;
      uint64_t v56 = v9;
      unsigned int v57 = v93;
      while (1)
      {
        unsigned int v58 = v56[2];
        if (!v58) {
          break;
        }
        unsigned int v59 = v57 / v58;
        v57 %= v58;
        uint64_t v56 = *(_DWORD **)&v56[2 * v59 + 4];
        if (!v56) {
          goto LABEL_113;
        }
      }

      if (*v56 > 0xF80u)
      {
        unsigned int v88 = v57 % 0x7C;
        uint64_t v89 = v56 + 4;
        int v90 = v89[v57 % 0x7C];
        if (v90)
        {
          unsigned int v91 = v57 + 1;
          while (v90 != v91)
          {
            if (v88 == 123) {
              unsigned int v88 = 0;
            }
            else {
              ++v88;
            }
            int v90 = v89[v88];
            if (!v90) {
              goto LABEL_113;
            }
          }

          int v60 = 1;
        }

        else
        {
LABEL_113:
          int v60 = 0;
        }
      }

      else
      {
        int v60 = (*((unsigned __int8 *)v56 + ((unint64_t)v57 >> 3) + 16) >> (v57 & 7)) & 1;
      }

      int v1 = v60 - v93 + v55;
      unsigned int v61 = 1;
      int __buf = 1;
      while (2)
      {
        unsigned int v62 = v61 - 1;
        if (v61 - 1 >= v55) {
          goto LABEL_119;
        }
        uint64_t v63 = v9;
        while (1)
        {
          unsigned int v64 = v63[2];
          if (!v64) {
            break;
          }
          unsigned int v65 = v62 / v64;
          v62 %= v64;
          uint64_t v63 = *(_DWORD **)&v63[2 * v65 + 4];
          if (!v63) {
            goto LABEL_119;
          }
        }

        if (*v63 > 0xF80u)
        {
          unsigned int v67 = v62 % 0x7C;
          int v68 = v63 + 4;
          int v69 = v68[v62 % 0x7C];
          if (v69)
          {
            unsigned int v70 = v62 + 1;
            while (v69 != v70)
            {
              if (v67 == 123) {
                unsigned int v67 = 0;
              }
              else {
                ++v67;
              }
              int v69 = v68[v67];
              if (!v69) {
                goto LABEL_119;
              }
            }

            int v66 = 1;
          }

          else
          {
LABEL_119:
            int v66 = 0;
          }
        }

        else
        {
          int v66 = (*((unsigned __int8 *)v63 + ((unint64_t)v62 >> 3) + 16) >> (v62 & 7)) & 1;
        }

        if (((v13[(unint64_t)v61 >> 3] >> (v61 & 7)) & 1) == v66)
        {
          int __buf = v61 + 1;
          BOOL v33 = v61++ == (_DWORD)v93;
          if (v33) {
            goto LABEL_166;
          }
          continue;
        }

        break;
      }

      int v1 = v61;
LABEL_166:
      if (v32)
      {
        uint64_t v85 = (void (**)(void *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_172;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v32);
        --qword_18C468B10;
        off_18C4653A8(v32);
        uint64_t v32 = (void *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v85 = (void (**)(void *))&xmmword_18C465410;
LABEL_172:
          (*v85)(v32);
        }
      }

uint64_t sub_1812E4820(unint64_t a1)
{
  if (a1 >= 8)
  {
    __int16 v2 = 40;
    if (a1 >= 0x100)
    {
      unint64_t v3 = a1;
      do
      {
        v2 += 40;
        a1 = v3 >> 4;
        BOOL v4 = v3 > 0xFFF;
        v3 >>= 4;
      }

      while (v4);
    }

    if (a1 < 0x10)
    {
      LOBYTE(v5) = a1;
    }

    else
    {
      do
      {
        v2 += 10;
        unint64_t v5 = a1 >> 1;
        BOOL v4 = a1 > 0x1F;
        a1 >>= 1;
      }

      while (v4);
    }
  }

  else
  {
    if (a1 < 2) {
      return 0LL;
    }
    __int16 v2 = 40;
    do
    {
      v2 -= 10;
      LOBYTE(v5) = 2 * a1;
      BOOL v6 = a1 >= 4;
      a1 *= 2LL;
    }

    while (!v6);
  }

  return (__int16)(v2 + word_1813CD842[v5 & 7] - 10);
}

char *__cdecl sqlite3_create_filename( const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
{
  if (nParam < 0 || !zDatabase || !zJournal || !zWal || (int v8 = azParam, nParam) && !azParam)
  {
    sub_1812CF36C(190176);
    return 0LL;
  }

  size_t v12 = strlen(zDatabase);
  size_t v13 = strlen(zJournal);
  uint64_t v14 = v12 + v13 + strlen(zWal) + 10;
  LODWORD(v15) = 2 * nParam;
  if (nParam)
  {
    else {
      uint64_t v16 = v15;
    }
    uint64_t v17 = v8;
    do
    {
      uint64_t v18 = *v17++;
      v14 += strlen(v18) + 1;
      --v16;
    }

    while (v16);
  }

  if (sqlite3_initialize()) {
    return 0LL;
  }
  uint64_t v19 = (char *)sub_18126F0AC(v14);
  int v10 = v19;
  if (v19)
  {
    *(_DWORD *)uint64_t v19 = 0;
    int v10 = v19 + 4;
    size_t v20 = strlen(zDatabase);
    memcpy(v10, zDatabase, v20 + 1);
    uint64_t v21 = &v10[v20];
    if (nParam)
    {
      uint64_t v22 = v21 + 1;
      else {
        uint64_t v15 = v15;
      }
      do
      {
        BOOL v23 = *v8++;
        size_t v24 = strlen(v23);
        memcpy(v22, v23, v24 + 1);
        uint64_t v21 = &v22[v24];
        v22 += v24 + 1;
        --v15;
      }

      while (v15);
    }

    uint64_t v25 = v21 + 2;
    v21[1] = 0;
    size_t v26 = strlen(zJournal) + 1;
    memcpy(v25, zJournal, v26);
    uint64_t v27 = &v25[v26];
    size_t v28 = strlen(zWal);
    memcpy(v27, zWal, v28 + 1);
    *(_WORD *)&v27[v28 + 1] = 0;
  }

  return v10;
}

void sqlite3_free_filename(char *a1)
{
  if (a1)
  {
    for (uint64_t i = a1 - 4; i[3] || i[2] || i[1] || *i; --i)
      ;
    __int16 v2 = (void (**)(char *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_13;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(i);
    --qword_18C468B10;
    off_18C4653A8(i);
    uint64_t i = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int16 v2 = (void (**)(char *))&xmmword_18C465410;
LABEL_13:
      (*v2)(i);
    }
  }

const char *__cdecl sqlite3_uri_parameter(const char *zFilename, const char *zParam)
{
  __int16 v2 = 0LL;
  if (zFilename && zParam)
  {
    for (uint64_t i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    unint64_t v5 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v5)
    {
      while (1)
      {
        int v6 = strcmp(v5, zParam);
        __int128 v7 = &v5[strlen(v5) & 0x3FFFFFFF];
        __int16 v2 = v7 + 1;
        if (!v6) {
          break;
        }
        int v8 = &v2[strlen(v7 + 1) & 0x3FFFFFFF];
        int v9 = *((unsigned __int8 *)v8 + 1);
        unint64_t v5 = v8 + 1;
        if (!v9) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

const char *__cdecl sqlite3_uri_key(const char *zFilename, int N)
{
  int result = 0LL;
  if (zFilename)
  {
    int v4 = N;
    if ((N & 0x80000000) == 0)
    {
      for (uint64_t i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
        ;
      int v6 = &i[strlen(i - 1) & 0x3FFFFFFF];
      int v7 = *(unsigned __int8 *)v6;
      if (*v6) {
        BOOL v8 = v4 < 1;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        do
        {
          int v9 = &v6[(strlen(v6) & 0x3FFFFFFF) + 1];
          int v10 = &v9[strlen(v9) & 0x3FFFFFFF];
          int v11 = *((unsigned __int8 *)v10 + 1);
          int v6 = v10 + 1;
          int v7 = v11;
          if (v11) {
            BOOL v12 = v4 > 1;
          }
          else {
            BOOL v12 = 0;
          }
          --v4;
        }

        while (v12);
      }

      if (v7) {
        return v6;
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

int sqlite3_uri_BOOLean(const char *zFile, const char *zParam, int bDefault)
{
  int v4 = (char *)sqlite3_uri_parameter(zFile, zParam);
  int result = bDefault != 0;
  if (v4) {
    return sub_181345AA0(v4, 1, bDefault != 0) != 0;
  }
  return result;
}

sqlite3_int64 sqlite3_uri_int64(const char *a1, const char *a2, sqlite3_int64 a3)
{
  int v4 = (char *)sqlite3_uri_parameter(a1, a2);
  return a3;
}

uint64_t sub_1812E4D40(char *__s, unint64_t *a2)
{
  if (*__s == 48 && (__s[1] | 0x20) == 0x78)
  {
    uint64_t v4 = 1LL;
    do
      int v5 = __s[++v4];
    while (v5 == 48);
    uint64_t v6 = v4;
    uint64_t v7 = __s[v4];
    if ((byte_1813C6558[v7] & 8) != 0)
    {
      unint64_t v8 = 0LL;
      uint64_t v13 = v4 + 1;
      do
      {
        unint64_t v8 = ((((char)(2 * v7) >> 7) & 0xF9) + (_BYTE)v7) & 0xF | (16 * v8);
        uint64_t v7 = __s[v13++];
      }

      while ((byte_1813C6558[v7] & 8) != 0);
      uint64_t v6 = v13 - 1;
      int v9 = v6;
    }

    else
    {
      unint64_t v8 = 0LL;
      int v9 = v4;
    }

    *a2 = v8;
    else {
      return 2LL;
    }
  }

  else
  {
    int v10 = strspn(__s, "+- \n\t0123456789");
    if (__s[v10 & 0x3FFFFFFF]) {
      int v11 = (v10 & 0x3FFFFFFF) + 1;
    }
    else {
      int v11 = v10 & 0x3FFFFFFF;
    }
    return sub_181303E28((unsigned __int8 *)__s, a2, v11, 1);
  }

const char *__cdecl sqlite3_filename_database(const char *a1)
{
  if (!a1) {
    return 0LL;
  }
  do
  {
    do
      int v1 = a1;
    while (*(unsigned __int8 *)--a1);
  }

  while (*(v1 - 2) || *(v1 - 3) || *(v1 - 4));
  return v1;
}

const char *__cdecl sqlite3_filename_journal(const char *result)
{
  if (result)
  {
    for (uint64_t i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    __int16 v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        unint64_t v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        uint64_t v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        int v5 = *((unsigned __int8 *)v4 + 1);
        __int16 v2 = v4 + 1;
      }

      while (v5);
    }

    return v2 + 1;
  }

  return result;
}

const char *__cdecl sqlite3_filename_wal(const char *result)
{
  if (result)
  {
    for (uint64_t i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    __int16 v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        unint64_t v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        uint64_t v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        int v5 = *((unsigned __int8 *)v4 + 1);
        __int16 v2 = v4 + 1;
      }

      while (v5);
    }

    return &v2[(strlen(v2 + 1) & 0x3FFFFFFF) + 2];
  }

  return result;
}

const char *__cdecl sqlite3_db_name(sqlite3 *db, int N)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_11;
  }

  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1812CF36C(190318);
    return 0LL;
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  if ((N & 0x80000000) == 0 && *((_DWORD *)db + 10) > N) {
    return *(const char **)(*((void *)db + 4) + 32LL * N);
  }
  return 0LL;
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_28;
  }

  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1812CF36C(190337);
    return 0LL;
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_28;
    }

    goto LABEL_5;
  }

  if (!zDbName)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = *((void *)db + 4);
    goto LABEL_32;
  }

  int v4 = *((_DWORD *)db + 10);
  uint64_t v5 = (v4 - 1);
  if (v4 < 1) {
    return 0LL;
  }
  uint64_t v6 = *((void *)db + 4);
  uint64_t v7 = (_BYTE **)(v6 + 32 * v5);
  do
  {
    unint64_t v8 = *v7;
    if (*v7)
    {
      for (uint64_t i = zDbName; ; ++i)
      {
        uint64_t v10 = *v8;
        uint64_t v11 = *(unsigned __int8 *)i;
        if ((_DWORD)v10 == (_DWORD)v11)
        {
          if (!*v8)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              uint64_t v18 = *(void *)(v6 + 32LL * v5 + 8);
              if (v18)
              {
                uint64_t v19 = **(void **)(v18 + 8);
                if (*(_BYTE *)(v19 + 19) || *(_UNKNOWN **)v19 == &unk_18C465F78) {
                  return (const char *)&unk_1813C6CDD;
                }
                else {
                  return *(const char **)(v19 + 216);
                }
              }
            }

            return 0LL;
          }
        }

        else if (byte_1813C6343[v10] != byte_1813C6343[v11])
        {
          break;
        }

        ++v8;
      }
    }

    if (!(_DWORD)v5)
    {
      uint64_t v14 = zDbName;
      for (uint64_t j = "main"; ; ++j)
      {
        uint64_t v16 = *(unsigned __int8 *)j;
        uint64_t v17 = *(unsigned __int8 *)v14;
        if ((_DWORD)v16 == (_DWORD)v17)
        {
          if (!*j)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }

        else if (byte_1813C6343[v16] != byte_1813C6343[v17])
        {
          break;
        }

        ++v14;
      }
    }

    int result = 0LL;
    v7 -= 4;
    BOOL v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }

  while (!v13);
  return result;
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_28;
  }

  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1812CF36C(190353);
    return -1;
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_28;
    }

    goto LABEL_5;
  }

  if (!zDbName)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = *((void *)db + 4);
    goto LABEL_32;
  }

  int v4 = *((_DWORD *)db + 10);
  uint64_t v5 = (v4 - 1);
  if (v4 < 1) {
    return -1;
  }
  uint64_t v6 = *((void *)db + 4);
  uint64_t v7 = (_BYTE **)(v6 + 32 * v5);
  int result = -1;
  do
  {
    int v9 = *v7;
    if (*v7)
    {
      for (uint64_t i = zDbName; ; ++i)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = *(unsigned __int8 *)i;
        if ((_DWORD)v11 == (_DWORD)v12)
        {
          if (!*v9)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              uint64_t v18 = *(void *)(v6 + 32LL * v5 + 8);
              if (v18) {
                return *(_WORD *)(*(void *)(v18 + 8) + 40LL) & 1;
              }
            }

            return -1;
          }
        }

        else if (byte_1813C6343[v11] != byte_1813C6343[v12])
        {
          break;
        }

        ++v9;
      }
    }

    if (!(_DWORD)v5)
    {
      uint64_t v14 = zDbName;
      for (uint64_t j = "main"; ; ++j)
      {
        uint64_t v16 = *(unsigned __int8 *)j;
        uint64_t v17 = *(unsigned __int8 *)v14;
        if ((_DWORD)v16 == (_DWORD)v17)
        {
          if (!*j)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }

        else if (byte_1813C6343[v16] != byte_1813C6343[v17])
        {
          break;
        }

        ++v14;
      }
    }

    v7 -= 4;
    BOOL v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }

  while (!v13);
  return result;
}

uint64_t _sqlite3_lockstate(char *a1, int a2)
{
  uint64_t v6 = 0LL;
  if (sub_181266F84(a1, (uint64_t *)&v6, 1u, 0LL))
  {
    if (v6) {
      sub_1812E03C8((uint64_t)v6, 0);
    }
    return 0xFFFFFFFFLL;
  }

  else
  {
    sqlite3_db_config(v6, 1006, 1LL, 0LL);
    int v4 = a2;
    unsigned int v5 = -1;
    sqlite3_file_control(v6, 0LL, 103, &v4);
    sub_1812E03C8((uint64_t)v6, 0);
    return v5;
  }

uint64_t (*_sqlite3_system_busy_handler())(uint64_t *a1, int a2)
{
  return sub_1812E5414;
}

uint64_t sub_1812E5414(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  if (*(int *)v4 >= 2 && (unsigned int v5 = *(void (**)(void))(v4 + 136)) != 0LL)
  {
    v5();
  }

  else
  {
    (*(void (**)(uint64_t, double *))(v4 + 120))(v4, &v9);
    uint64_t v8 = (uint64_t)(v9 * 86400000.0);
  }

  ++*((_BYTE *)a1 + 784);
  if (!a2) {
    return 109LL;
  }
  uint64_t result = 0LL;
  int v7 = v8 - *((_DWORD *)a1 + 194);
  if (*((_DWORD *)a1 + 193) >= v7 && (v7 & 0x80000000) == 0) {
    return 109LL;
  }
  return result;
}

uint64_t _sqlite3_db_clone(uint64_t a1, const char *a2, const char *a3, int a4)
{
  if (!a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_32;
  }

  int v5 = *(unsigned __int8 *)(a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_32:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1812CF36C(190418);
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_32;
    }

    goto LABEL_5;
  }

  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    xmmword_18C465400(v10);
  }
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "main";
  }
  int v12 = *(_DWORD *)(a1 + 40);
  uint64_t v13 = (v12 - 1);
  if (v12 < 1) {
    goto LABEL_40;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = (_BYTE **)(v14 + 32 * v13);
  while (1)
  {
    uint64_t v16 = *v15;
    if (*v15) {
      break;
    }
LABEL_21:
    if (!(_DWORD)v13)
    {
      uint64_t v21 = v11;
      for (uint64_t i = "main"; ; ++i)
      {
        uint64_t v23 = *(unsigned __int8 *)i;
        uint64_t v24 = *(unsigned __int8 *)v21;
        if ((_DWORD)v23 == (_DWORD)v24)
        {
          if (!*i)
          {
            LODWORD(v13) = 0;
            goto LABEL_34;
          }
        }

        else if (byte_1813C6343[v23] != byte_1813C6343[v24])
        {
          break;
        }

        ++v21;
      }
    }

    v15 -= 4;
    BOOL v20 = (int)v13 <= 0;
    LODWORD(v13) = v13 - 1;
    if (v20) {
      goto LABEL_40;
    }
  }

  for (uint64_t j = v11; ; ++j)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = *(unsigned __int8 *)j;
    if ((_DWORD)v18 == (_DWORD)v19) {
      break;
    }
    if (byte_1813C6343[v18] != byte_1813C6343[v19]) {
      goto LABEL_21;
    }
LABEL_17:
    ++v16;
  }

  if (*v16) {
    goto LABEL_17;
  }
  if ((v13 & 0x80000000) != 0)
  {
LABEL_40:
    uint64_t v29 = 1LL;
    goto LABEL_41;
  }

uint64_t _sqlite3_integrity_check(char *a1)
{
  int v2 = sub_181266F84(a1, &v10, 6u, 0LL);
  pStmt = 0LL;
  if (!v2)
  {
    int v2 = sub_18126DFE0(v10, "PRAGMA integrity_check", 0xFFFFFFFFLL, 0LL, 0LL, &pStmt, 0LL, v1);
    if (!v2)
    {
      int v2 = sqlite3_step(pStmt);
      if (v2 == 100)
      {
        while (2)
        {
          unint64_t v3 = sqlite3_column_text(pStmt, 0);
          uint64_t v4 = (const char *)v3;
          do
          {
            int v5 = strchr(v4, 10);
            if (!v5) {
              int v5 = (char *)&v4[strlen(v4)];
            }
            if (!strncmp("ok", v4, v5 - v4))
            {
              int v2 = 0;
              goto LABEL_20;
            }

            if (strncmp("*** ", v4, 4uLL) && (v5 - v4 < 14 || strncmp(" is never used", v5 - 14, 0xEuLL)))
            {
              uint64_t v8 = (const char *)v3;
              int v2 = 11;
              sqlite3_log(11, "Integrity check failed: %s", v8);
              goto LABEL_20;
            }

            if (*v5) {
              uint64_t v4 = v5 + 1;
            }
            else {
              uint64_t v4 = v5;
            }
          }

          while (*v4);
          int v2 = sqlite3_step(pStmt);
          if (v2 == 100) {
            continue;
          }
          break;
        }
      }
    }

uint64_t _sqlite3_db_truncate(sqlite3 *a1, const char *a2)
{
  if (a2)
  {
    if (sqlite3_initialize() || (uint64_t v6 = sub_18126F0AC(32LL)) == 0)
    {
      uint64_t v4 = (sqlite3_str *)&unk_18C54FA08;
    }

    else
    {
      uint64_t v4 = (sqlite3_str *)v6;
      if (a1) {
        int v7 = *((_DWORD *)a1 + 34);
      }
      else {
        int v7 = 2147483645;
      }
      *(void *)uint64_t v6 = 0LL;
      *(void *)(v6 + 8) = 0LL;
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 20) = v7;
      *(_DWORD *)(v6 + 24) = 0;
      *(_WORD *)(v6 + 28) = 0;
    }

    sqlite3_str_appendf(v4, "VACUUM %s", a2);
    int v5 = sqlite3_str_finish(v4);
    if (!v5) {
      return 7LL;
    }
  }

  else
  {
    int v5 = 0LL;
  }

  sqlite3_exec(a1, "SELECT 1 FROM sqlite_master LIMIT 1", 0LL, 0LL, 0LL);
  uint64_t v8 = sqlite3_db_config(a1, 1009, 1LL, 0LL);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
    if (v5)
    {
      uint64_t v10 = (void (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        off_18C4653A8(v5);
        int v5 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return v9;
        }
        uint64_t v10 = (void (**)(char *))&xmmword_18C465410;
      }

      (*v10)(v5);
    }

    return v9;
  }

  if (v5) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = "VACUUM";
  }
  uint64_t v9 = sqlite3_exec(a1, v11, 0LL, 0LL, 0LL);
  if (v5)
  {
    int v12 = (void (**)(char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_28:
      (*v12)(v5);
      goto LABEL_29;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    int v5 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v12 = (void (**)(char *))&xmmword_18C465410;
      goto LABEL_28;
    }
  }

uint64_t _sqlite3_db_copy(char *a1, sqlite3 *a2, const char *a3)
{
  uint64_t v6 = _sqlite3_db_clone((uint64_t)a2, a3, a1, 0x2000000);
  uint64_t v7 = v6;
  if ((_DWORD)v6 && v6 != 5)
  {
    uint64_t v7 = sub_181266F84(a1, (uint64_t *)&pDest, 6u, 0LL);
    uint64_t v8 = pDest;
    if ((_DWORD)v7)
    {
LABEL_16:
      sub_1812E03C8((uint64_t)v8, 0);
      return v7;
    }

    if (a3) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = "main";
    }
    uint64_t v10 = sqlite3_backup_init(pDest, "main", a2, v9);
    if (v10)
    {
      uint64_t v11 = v10;
      sqlite3_backup_step(v10, -1);
      sqlite3_backup_finish(v11);
    }

    if (!pDest) {
      goto LABEL_14;
    }
    int v12 = *((unsigned __int8 *)pDest + 113);
    if (v12 == 109 || v12 == 118 || v12 == 186)
    {
      if (*((_BYTE *)pDest + 103))
      {
LABEL_14:
        uint64_t v7 = 7LL;
LABEL_15:
        uint64_t v8 = pDest;
        goto LABEL_16;
      }

      uint64_t v7 = (*((_DWORD *)pDest + 22) & *((_DWORD *)pDest + 20));
      if ((_DWORD)v7 == 26)
      {
LABEL_22:
        if (!a3 || !strcasecmp("main", a3)) {
          uint64_t v7 = sqlite3_file_control(pDest, "main", 102, a2);
        }
        else {
          uint64_t v7 = 1LL;
        }
        goto LABEL_15;
      }
    }

    else
    {
      sqlite3_log(21, "API call with %s database connection pointer", "invalid");
      uint64_t v7 = sub_1812CF36C(188008);
      if ((_DWORD)v7 == 26) {
        goto LABEL_22;
      }
    }

    if ((_DWORD)v7 != 2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

  return v7;
}

uint64_t _sqlite3_db_copy_compact( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = 0LL;
  uint64_t v12 = *(void *)(a2 + 24);
  if (v12) {
    xmmword_18C465400(v12);
  }
  uint64_t v13 = "main";
  if (a3) {
    uint64_t v13 = (const char *)a3;
  }
  int v14 = *(_DWORD *)(a2 + 40);
  uint64_t v15 = (v14 - 1);
  if (v14 < 1) {
    goto LABEL_30;
  }
  uint64_t v16 = (_BYTE **)(*(void *)(a2 + 32) + 32 * v15);
  while (1)
  {
    uint64_t v17 = *v16;
    if (*v16) {
      break;
    }
LABEL_14:
    if (!(_DWORD)v15)
    {
      uint64_t v22 = v13;
      for (uint64_t i = "main"; ; ++i)
      {
        uint64_t v24 = *(unsigned __int8 *)i;
        uint64_t v25 = *(unsigned __int8 *)v22;
        if ((_DWORD)v24 == (_DWORD)v25)
        {
          if (!*i)
          {
            LODWORD(v15) = 0;
            goto LABEL_25;
          }
        }

        else if (byte_1813C6343[v24] != byte_1813C6343[v25])
        {
          break;
        }

        ++v22;
      }
    }

    v16 -= 4;
    BOOL v21 = (int)v15 <= 0;
    LODWORD(v15) = v15 - 1;
    if (v21) {
      goto LABEL_30;
    }
  }

  for (uint64_t j = v13; ; ++j)
  {
    uint64_t v19 = *v17;
    uint64_t v20 = *(unsigned __int8 *)j;
    if ((_DWORD)v19 == (_DWORD)v20) {
      break;
    }
    if (byte_1813C6343[v19] != byte_1813C6343[v20]) {
      goto LABEL_14;
    }
LABEL_10:
    ++v17;
  }

  if (*v17) {
    goto LABEL_10;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_30:
    char v31 = a3;
    uint64_t v26 = 1LL;
    sub_1812D50CC(a2, 1, "invalid database name %s", a4, a5, a6, a7, a8, v31);
    goto LABEL_31;
  }

uint64_t _sqlite3_maintain_load_factor(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = 0LL;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2000000000LL;
  int v4 = *(_DWORD *)(a1 + 140);
  uint64_t v30 = 0LL;
  char v31 = 0LL;
  unsigned int v32 = 0;
  int v33 = v4;
  unsigned int v34 = 0;
  __int16 v35 = 0;
  sub_1812D3A10((uint64_t)&v30, "PRAGMA ", 7u);
  if (a2) {
    sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
  }
  uint64_t v10 = v34;
  if (v34 + 11 >= v32)
  {
    sub_1812D3A10((uint64_t)&v30, "auto_vacuum", 0xBu);
    uint64_t v12 = v31;
    if (!v31) {
      goto LABEL_10;
    }
  }

  else
  {
    v34 += 11;
    uint64_t v11 = &v31[v10];
    *(void *)uint64_t v11 = *(void *)"auto_vacuum";
    *(_DWORD *)(v11 + 7) = 1836414307;
    uint64_t v12 = v31;
    if (!v31) {
      goto LABEL_10;
    }
  }

  v12[v34] = 0;
  if (v33 && (v35 & 0x400) == 0)
  {
    uint64_t v13 = (unsigned __int8 *)sub_1812F24E0(&v30);
    goto LABEL_11;
  }

uint64_t sub_1812E6908(uint64_t a1, sqlite3_stmt *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sqlite3_column_int(a2, 0);
  return 0LL;
}

uint64_t sub_1812E6940(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (!a4) {
    return 0LL;
  }
  double v5 = (double)(a3 - a4) / (double)a3;
  if (!((a5 * a4) >> 21) && v5 > 0.85) {
    return 0LL;
  }
  if (v5 <= 0.4) {
    return a4 - (a3 - a4);
  }
  return ((double)a4 * 0.2);
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  if (ppSnapshot) {
    *ppSnapshot = 0LL;
  }
  if (!db)
  {
    uint64_t v7 = "NULL";
    goto LABEL_33;
  }

  int v6 = *((unsigned __int8 *)db + 113);
  if (v6 == 186)
  {
LABEL_7:
    uint64_t v7 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1812CF36C(190738);
  }

  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_33;
    }

    goto LABEL_7;
  }

  uint64_t v8 = *((void *)db + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (*((_BYTE *)db + 101)) {
    goto LABEL_55;
  }
  if (!zSchema)
  {
    int v17 = -1;
    goto LABEL_36;
  }

  int v9 = *((_DWORD *)db + 10);
  uint64_t v10 = (v9 - 1);
  if (v9 < 1)
  {
LABEL_34:
    int v17 = v10;
LABEL_36:
    if (!v17 || v17 >= 2)
    {
      uint64_t v11 = *((void *)db + 4);
      goto LABEL_39;
    }

    goto LABEL_55;
  }

  uint64_t v11 = *((void *)db + 4);
  uint64_t v12 = (_BYTE **)(v11 + 32 * v10);
  while (1)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      for (uint64_t i = zSchema; ; ++i)
      {
        uint64_t v15 = *v13;
        uint64_t v16 = *(unsigned __int8 *)i;
        if ((_DWORD)v15 == (_DWORD)v16)
        {
          if (!*v13) {
            goto LABEL_34;
          }
        }

        else if (byte_1813C6343[v15] != byte_1813C6343[v16])
        {
          break;
        }

        ++v13;
      }
    }

    if (!(_DWORD)v10) {
      break;
    }
LABEL_23:
    v12 -= 4;
    int v17 = -1;
    BOOL v18 = (int)v10 <= 0;
    LODWORD(v10) = v10 - 1;
    if (v18) {
      goto LABEL_36;
    }
  }

  uint64_t v19 = zSchema;
  for (uint64_t j = "main"; ; ++j)
  {
    uint64_t v21 = *(unsigned __int8 *)j;
    uint64_t v22 = *(unsigned __int8 *)v19;
    if ((_DWORD)v21 == (_DWORD)v22) {
      break;
    }
    if (byte_1813C6343[v21] != byte_1813C6343[v22]) {
      goto LABEL_23;
    }
LABEL_28:
    ++v19;
  }

  if (*j) {
    goto LABEL_28;
  }
  int v17 = 0;
LABEL_39:
  uint64_t v24 = *(void *)(v11 + 32LL * v17 + 8);
  if (v24 && *(_BYTE *)(v24 + 16) == 2) {
    goto LABEL_55;
  }
  uint64_t v25 = **(void **)(v24 + 8);
  uint64_t v26 = *(void *)(v25 + 344);
  if (v26) {
    *(_DWORD *)(v26 + 152) = 1;
  }
  if (*(_BYTE *)(v24 + 17) || !*(_BYTE *)(v24 + 16))
  {
    int v27 = sub_1812FDF34(v24, 0, 0LL);
    uint64_t v26 = *(void *)(v25 + 344);
  }

  else
  {
    int v27 = 0;
  }

  if (v26)
  {
    *(void *)(v26 + 144) = 0LL;
    *(_DWORD *)(v26 + 152) = 0;
  }

  if (v27)
  {
LABEL_56:
    uint64_t v29 = *((void *)db + 3);
    if (!v29) {
      return v27;
    }
    goto LABEL_57;
  }

  uint64_t v28 = *(_OWORD **)(**(void **)(v24 + 8) + 344LL);
  if (!v28)
  {
LABEL_55:
    int v27 = 1;
    goto LABEL_56;
  }

  if (v28[6] == 0LL)
  {
    uint64_t v30 = 0LL;
    int v27 = 1;
    goto LABEL_62;
  }

  if (sqlite3_initialize() || (uint64_t v30 = sub_18126F0AC(48LL)) == 0)
  {
    int v27 = 7;
    uint64_t v29 = *((void *)db + 3);
    if (!v29) {
      return v27;
    }
LABEL_57:
    xmmword_18C465410(v29);
    return v27;
  }

  int v27 = 0;
  __int128 v31 = *(_OWORD *)((char *)v28 + 72);
  __int128 v32 = *(_OWORD *)((char *)v28 + 104);
  *(_OWORD *)(v30 + 16) = *(_OWORD *)((char *)v28 + 88);
  *(_OWORD *)(v30 + 32) = v32;
  *(_OWORD *)uint64_t v30 = v31;
LABEL_62:
  *ppSnapshot = (sqlite3_snapshot *)v30;
  uint64_t v29 = *((void *)db + 3);
  if (v29) {
    goto LABEL_57;
  }
  return v27;
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  if (!db)
  {
    double v5 = "NULL";
    goto LABEL_31;
  }

  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    double v5 = "unopened";
LABEL_31:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(190778);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      double v5 = "invalid";
      goto LABEL_31;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)db + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (*((_BYTE *)db + 101)) {
    goto LABEL_50;
  }
  if (zSchema)
  {
    int v9 = *((_DWORD *)db + 10);
    uint64_t v10 = (v9 - 1);
    if (v9 < 1)
    {
LABEL_32:
      int v17 = v10;
    }

    else
    {
      uint64_t v11 = *((void *)db + 4);
      uint64_t v12 = (_BYTE **)(v11 + 32 * v10);
      do
      {
        uint64_t v13 = *v12;
        if (*v12)
        {
          for (uint64_t i = zSchema; ; ++i)
          {
            uint64_t v15 = *v13;
            uint64_t v16 = *(unsigned __int8 *)i;
            if ((_DWORD)v15 == (_DWORD)v16)
            {
              if (!*v13) {
                goto LABEL_32;
              }
            }

            else if (byte_1813C6343[v15] != byte_1813C6343[v16])
            {
              break;
            }

            ++v13;
          }
        }

        if (!(_DWORD)v10)
        {
          uint64_t v19 = zSchema;
          for (uint64_t j = "main"; ; ++j)
          {
            uint64_t v21 = *(unsigned __int8 *)j;
            uint64_t v22 = *(unsigned __int8 *)v19;
            if ((_DWORD)v21 == (_DWORD)v22)
            {
              if (!*j)
              {
                int v17 = 0;
                goto LABEL_37;
              }
            }

            else if (byte_1813C6343[v21] != byte_1813C6343[v22])
            {
              break;
            }

            ++v19;
          }
        }

        v12 -= 4;
        int v17 = -1;
        BOOL v18 = (int)v10 <= 0;
        LODWORD(v10) = v10 - 1;
      }

      while (!v18);
    }
  }

  else
  {
    int v17 = -1;
  }

  if (v17 && v17 < 2) {
    goto LABEL_50;
  }
  uint64_t v11 = *((void *)db + 4);
LABEL_37:
  uint64_t v24 = *(void *)(v11 + 32LL * v17 + 8);
  if (v24)
  {
    int v25 = *(unsigned __int8 *)(v24 + 16);
    if (v25 == 2) {
      goto LABEL_50;
    }
  }

  else
  {
    int v25 = MEMORY[0x10];
  }

  uint64_t v26 = **(void **)(v24 + 8);
  if (!v25)
  {
    uint64_t v30 = *(void *)(v26 + 344);
    if (v30) {
      goto LABEL_47;
    }
LABEL_50:
    int v27 = 1;
    goto LABEL_51;
  }

  if (*((_DWORD *)db + 52)) {
    goto LABEL_50;
  }
  int v27 = sub_1812E6F30(v26, (uint64_t)pSnapshot);
  if (v27) {
    goto LABEL_51;
  }
  int v29 = sub_1812E6FE0(v24, v28);
  uint64_t v30 = *(void *)(v26 + 344);
  if (v29)
  {
    int v27 = v29;
    goto LABEL_61;
  }

uint64_t sub_1812E6F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 344);
  if (!v2) {
    return 1LL;
  }
  if (*(_BYTE *)(v2 + 63)
    || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112LL))( *(void *)(v2 + 8),  1LL,  1LL,  6LL),  !(_DWORD)result))
  {
    if (*(void *)(a2 + 32) == *(void *)(v2 + 104)
      && *(_DWORD *)(a2 + 16) >= *(_DWORD *)(**(void **)(v2 + 48) + 128LL))
    {
      return 0LL;
    }

    else
    {
      if (!*(_BYTE *)(v2 + 63)) {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112LL))( *(void *)(v2 + 8),  1LL,  1LL,  5LL);
      }
      return 769LL;
    }
  }

  return result;
}

uint64_t sub_1812E6FE0(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v3 = sub_1812A0BC0(a1, 0LL, a2);
  if ((_DWORD)v3)
  {
    if (!*(_BYTE *)(a1 + 17)) {
      return v3;
    }
  }

  else
  {
    uint64_t v3 = sub_1812A1010(a1, 0);
    if (!*(_BYTE *)(a1 + 17)) {
      return v3;
    }
  }

  int v4 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v4;
  if (!v4) {
    sub_1812FDEFC(a1);
  }
  return v3;
}

int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
{
  if (!db)
  {
    double v5 = "NULL";
    goto LABEL_30;
  }

  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    double v5 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(190831);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      double v5 = "invalid";
      goto LABEL_30;
    }

    goto LABEL_5;
  }

  uint64_t v7 = *((void *)db + 3);
  if (v7) {
    xmmword_18C465400(v7);
  }
  if (!zDb)
  {
    int v22 = -1;
    goto LABEL_35;
  }

  int v8 = *((_DWORD *)db + 10);
  uint64_t v9 = (v8 - 1);
  if (v8 < 1)
  {
    int v22 = v8 - 1;
LABEL_35:
    if (v22 < 2) {
      goto LABEL_39;
    }
LABEL_36:
    uint64_t v10 = *((void *)db + 4);
    goto LABEL_37;
  }

  uint64_t v10 = *((void *)db + 4);
  uint64_t v11 = (_BYTE **)(v10 + 32 * v9);
  while (1)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      for (uint64_t i = zDb; ; ++i)
      {
        uint64_t v14 = *v12;
        uint64_t v15 = *(unsigned __int8 *)i;
        if ((_DWORD)v14 == (_DWORD)v15)
        {
          if (!*v12)
          {
            int v22 = v9;
            goto LABEL_32;
          }
        }

        else if (byte_1813C6343[v14] != byte_1813C6343[v15])
        {
          break;
        }

        ++v12;
      }
    }

    if (!(_DWORD)v9) {
      break;
    }
LABEL_20:
    v11 -= 4;
    int v22 = -1;
    BOOL v16 = (int)v9 <= 0;
    LODWORD(v9) = v9 - 1;
    if (v16)
    {
LABEL_32:
      if (!v22) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
  }

  int v17 = zDb;
  for (uint64_t j = "main"; ; ++j)
  {
    uint64_t v19 = *(unsigned __int8 *)j;
    uint64_t v20 = *(unsigned __int8 *)v17;
    if ((_DWORD)v19 == (_DWORD)v20) {
      break;
    }
    if (byte_1813C6343[v19] != byte_1813C6343[v20]) {
      goto LABEL_20;
    }
LABEL_25:
    ++v17;
  }

  if (*j) {
    goto LABEL_25;
  }
  int v22 = 0;
LABEL_37:
  uint64_t v23 = *(void *)(v10 + 32LL * v22 + 8);
  if (v23 && *(_BYTE *)(v23 + 16))
  {
LABEL_39:
    int v24 = 1;
    goto LABEL_40;
  }

  if (!*(_BYTE *)(v23 + 17) && *(_BYTE *)(v23 + 16) || (int v24 = sub_1812FDF34(v23, 0, 0LL)) == 0)
  {
    uint64_t v26 = *(void *)(**(void **)(v23 + 8) + 344LL);
    if (!v26)
    {
      int v24 = 1;
      goto LABEL_105;
    }

    if (*(_BYTE *)(v26 + 63)
      || (int v24 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v26 + 8) + 112LL))( *(void *)(v26 + 8),  1LL,  1LL,  10LL)) == 0)
    {
      uint64_t v27 = *(unsigned int *)(v26 + 56);
      int v28 = sqlite3_initialize();
      else {
        uint64_t v30 = 0LL;
      }
      uint64_t v31 = *(unsigned int *)(v26 + 56);
      int v32 = sqlite3_initialize();
      if ((int)v31 < 1 || v32 != 0)
      {
        int v24 = 7;
        if (v30)
        {
          unsigned int v34 = 0LL;
          BOOL v35 = 1;
          goto LABEL_90;
        }

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    double v2 = (void (**)(sqlite3_snapshot *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = (sqlite3_snapshot *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      double v2 = (void (**)(sqlite3_snapshot *))&xmmword_18C465410;
      goto LABEL_7;
    }
  }

int sqlite3_compileoption_used(const char *zOptName)
{
  if (zOptName)
  {
    uint64_t v1 = zOptName;
    uint64_t v2 = *(unsigned __int8 *)zOptName;
    if (!*zOptName)
    {
      int v12 = 0;
      uint64_t v10 = "SQLITE_";
      goto LABEL_32;
    }

    if ((v2 & 0xFFFFFFDF) == 0x53)
    {
      uint64_t v3 = *((unsigned __int8 *)zOptName + 1);
      if (!zOptName[1])
      {
        int v12 = 0;
        uint64_t v10 = "QLITE_";
        goto LABEL_32;
      }

      if ((v3 & 0xFFFFFFDF) == 0x51)
      {
        uint64_t v4 = *((unsigned __int8 *)zOptName + 2);
        if (!zOptName[2])
        {
          int v12 = 0;
          uint64_t v10 = "LITE_";
          goto LABEL_32;
        }

        if ((v4 & 0xFFFFFFDF) == 0x4C)
        {
          uint64_t v5 = *((unsigned __int8 *)zOptName + 3);
          if (!zOptName[3])
          {
            int v12 = 0;
            uint64_t v10 = "ITE_";
            goto LABEL_32;
          }

          if ((v5 & 0xFFFFFFDF) == 0x49)
          {
            uint64_t v6 = *((unsigned __int8 *)zOptName + 4);
            if (!zOptName[4])
            {
              int v12 = 0;
              uint64_t v10 = "TE_";
              goto LABEL_32;
            }

            if ((v6 & 0xFFFFFFDF) == 0x54)
            {
              uint64_t v7 = *((unsigned __int8 *)zOptName + 5);
              if (!zOptName[5])
              {
                int v12 = 0;
                uint64_t v10 = "E_";
                goto LABEL_32;
              }

              if ((v7 & 0xFFFFFFDF) == 0x45)
              {
                uint64_t v8 = *((unsigned __int8 *)zOptName + 6);
                if (!zOptName[6])
                {
                  int v12 = 0;
                  uint64_t v10 = "_";
LABEL_32:
                  if (v12 != byte_1813C6343[*v10])
                  {
LABEL_34:
                    int v13 = strlen(v1);
                    uint64_t v14 = 0LL;
                    int v15 = v13 & 0x3FFFFFFF;
                    uint64_t v16 = v13 & 0x3FFFFFFF;
                    while (1)
                    {
                      int v17 = off_189B6F640[v14];
                      if (v17)
                      {
                        if (!v15) {
                          goto LABEL_35;
                        }
                        int v18 = v15 + 1;
                        uint64_t v19 = off_189B6F640[v14];
                        uint64_t v20 = v1;
                        while (1)
                        {
                          uint64_t v21 = *(unsigned __int8 *)v20;
                          if (!*v20) {
                            break;
                          }
                          LODWORD(v21) = byte_1813C6343[v21];
                          int v22 = byte_1813C6343[*v19];
                          if ((_DWORD)v21 != v22) {
                            goto LABEL_45;
                          }
                          ++v20;
                          ++v19;
                        }

                        int v22 = byte_1813C6343[*v19];
LABEL_45:
                        if ((_DWORD)v21 == v22)
                        {
LABEL_35:
                        }
                      }

                      if (++v14 == 69) {
                        return 0;
                      }
                    }
                  }

const char *__cdecl sqlite3_compileoption_get(int N)
{
  else {
    return off_189B6F640[N];
  }
}

int sqlite3_rtree_geometry_callback( sqlite3 *db, const char *zGeom, int (__cdecl *xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v9 = (void *)sub_18126F0AC(32LL);
  if (!v9) {
    return 7;
  }
  *uint64_t v9 = xGeom;
  v9[1] = 0LL;
  v9[2] = 0LL;
  v9[3] = pContext;
  return sub_1812E0AEC( (uint64_t)db,  (char *)zGeom,  0xFFFFFFFFLL,  5,  (uint64_t)v9,  (uint64_t)sub_1812E7A50,  0LL,  0LL,  0LL,  0LL,  (void (*)(uint64_t))sub_1812E7C70);
}

void sub_1812E7A50(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (!a1 || (uint64_t v6 = *((void *)a1 + 1)) == 0)
  {
    sub_1812CF36C(97932);
    uint64_t v7 = 0LL;
    if (!sqlite3_initialize()) {
      goto LABEL_6;
    }
LABEL_21:
    sqlite3_result_error_nomem(a1);
    return;
  }

  uint64_t v7 = *(__int128 **)(v6 + 8);
  if (sqlite3_initialize()) {
    goto LABEL_21;
  }
LABEL_6:
  uint64_t v8 = sub_18126F0AC(8 * (a2 + (uint64_t)(a2 - 1)) + 64);
  if (!v8) {
    goto LABEL_21;
  }
  uint64_t v9 = v8;
  *(_DWORD *)uint64_t v8 = 8 * (a2 + a2 - 1) + 64;
  __int128 v10 = *v7;
  *(_OWORD *)(v8 + 24) = v7[1];
  *(_OWORD *)(v8 + 8) = v10;
  *(void *)(v8 + 48) = v8 + 8LL * a2 + 56;
  *(_DWORD *)(v8 + 40) = a2;
  if (a2 < 1) {
    goto LABEL_24;
  }
  uint64_t v11 = 0LL;
  int v12 = 0;
  uint64_t v13 = 8LL * a2;
  do
  {
    *(void *)(*(void *)(v9 + 48) + v11) = sqlite3_value_dup(*(const sqlite3_value **)(a3 + v11));
    if (!*(void *)(*(void *)(v9 + 48) + v11)) {
      int v12 = 1;
    }
    uint64_t v15 = *(void *)(a3 + v11);
    if (!v15)
    {
      sub_1812CF36C(89752);
LABEL_18:
      double v14 = 0.0;
      goto LABEL_10;
    }

    __int16 v16 = *(_WORD *)(v15 + 20);
    if ((v16 & 8) != 0)
    {
      double v14 = *(double *)v15;
      goto LABEL_10;
    }

    if ((v16 & 0x24) != 0)
    {
      double v14 = (double)*(uint64_t *)v15;
      goto LABEL_10;
    }

    if ((v16 & 0x12) == 0) {
      goto LABEL_18;
    }
    double v14 = sub_181303DB8(v15);
LABEL_10:
    *(double *)(v9 + v11 + 56) = v14;
    v11 += 8LL;
  }

  while (v13 != v11);
  if (v12)
  {
    sqlite3_result_error_nomem(a1);
    sub_1813B8844(v9);
    return;
  }

uint64_t sub_1812E7C70(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void (**)(void))(a1 + 16);
  if (v2) {
    v2(*(void *)(a1 + 24));
  }
  uint64_t v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v3 = &xmmword_18C465410;
    return (*v3)(v1);
  }

  return result;
}

int sqlite3_rtree_query_callback( sqlite3 *db, const char *zQueryFunc, int (__cdecl *xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (__cdecl *xDestructor)(void *))
{
  if (sqlite3_initialize() || (uint64_t v11 = (void *)sub_18126F0AC(32LL)) == 0LL)
  {
    return 7;
  }

  else
  {
    *uint64_t v11 = 0LL;
    v11[1] = xQueryFunc;
    v11[2] = xDestructor;
    v11[3] = pContext;
    return sub_1812E0AEC( (uint64_t)db,  (char *)zQueryFunc,  0xFFFFFFFFLL,  5,  (uint64_t)v11,  (uint64_t)sub_1812E7A50,  0LL,  0LL,  0LL,  0LL,  (void (*)(uint64_t))sub_1812E7C70);
  }

uint64_t sqlite3_intarray_create(unsigned __int8 *a1, char *a2, void *a3)
{
  if (sqlite3_initialize())
  {
    *a3 = 0LL;
    return 7LL;
  }

  uint64_t v8 = (void *)sub_18126F0AC(24LL);
  *a3 = v8;
  if (!v8) {
    return 7LL;
  }
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  v8[2] = 0LL;
  if (!a1)
  {
    __int128 v10 = "NULL";
    goto LABEL_22;
  }

  int v9 = a1[113];
  if (v9 == 186)
  {
LABEL_10:
    __int128 v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1812CF36C(161272);
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      __int128 v10 = "invalid";
      goto LABEL_22;
    }

    goto LABEL_10;
  }

  if (a2)
  {
    uint64_t v6 = sub_18126D760( (uint64_t)a1,  a2,  (uint64_t)&unk_18C54FA58,  (uint64_t)v8,  (void (*)(uint64_t))sub_1812E7F90);
    if (!(_DWORD)v6)
    {
      uint64_t v11 = sqlite3_mprintf("CREATE VIRTUAL TABLE temp.%Q USING %Q", a2, a2);
      uint64_t v6 = sqlite3_exec((sqlite3 *)a1, v11, 0LL, 0LL, 0LL);
      if (v11)
      {
        int v12 = (void (**)(char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
          --qword_18C468B10;
          off_18C4653A8(v11);
          uint64_t v11 = (char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            return v6;
          }
          int v12 = (void (**)(char *))&xmmword_18C465410;
        }

        (*v12)(v11);
      }
    }

    return v6;
  }

  return sub_1812CF36C(161272);
}

uint64_t sub_1812E7F90(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void (**)(void))(a1 + 16);
  if (v2) {
    v2(*(void *)(a1 + 8));
  }
  uint64_t v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v3 = &xmmword_18C465410;
    return (*v3)(v1);
  }

  return result;
}

uint64_t sqlite3_intarray_bind(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(void))(a1 + 16);
  if (v8) {
    v8(*(void *)(a1 + 8));
  }
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  return 0LL;
}

uint64_t sqlite3session_diff(uint64_t a1, const char *a2, char *__s, char **a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  v79[0] = 0LL;
  v79[1] = 0LL;
  *(void *)(a1 + 96) = v79;
  *(void *)(a1 + 104) = sub_1813B8C30;
  *(void *)(a1 + 112) = sub_1813B8C6C;
  *(void *)(a1 + 120) = sub_1813B8CA4;
  *(void *)(a1 + 128) = sub_1813B8D18;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!*(void *)a1)
  {
    int v12 = "NULL";
    goto LABEL_10;
  }

  int v11 = *(unsigned __int8 *)(v9 + 113);
  if (v11 == 186)
  {
LABEL_5:
    int v12 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1812CF36C(186024);
    goto LABEL_11;
  }

  if (v11 != 118)
  {
    if (v11 != 109)
    {
      int v12 = "invalid";
      goto LABEL_10;
    }

    goto LABEL_5;
  }

  uint64_t v13 = *(void *)(v9 + 24);
  if (v13) {
    xmmword_18C465400(v13);
  }
LABEL_11:
  if (a4) {
    *a4 = 0LL;
  }
  double v14 = *(unsigned __int8 **)a1;
  if (!(_DWORD)v8)
  {
    uint64_t v8 = sub_1812E89CC(a1, __s, &v78);
    uint64_t v15 = v78;
    if (!v78) {
      goto LABEL_55;
    }
    if (sub_1812E8AFC(a1, v78))
    {
      uint64_t v8 = *(unsigned int *)(a1 + 36);
      goto LABEL_55;
    }

    if ((_DWORD)v8)
    {
LABEL_55:
      double v14 = *(unsigned __int8 **)a1;
      goto LABEL_56;
    }

    int v76 = 0;
    uint64_t v75 = 0LL;
    __int16 v16 = (BOOL *)&v76;
    if (!*(_DWORD *)(a1 + 32)) {
      __int16 v16 = 0LL;
    }
    LODWORD(v8) = sub_1812E8C64(0LL, (sqlite3 *)v14, a2, __s, &v77, 0LL, &v75, &v80, v16);
    int v17 = 0;
    int v18 = 0;
    if (!(_DWORD)v8)
    {
      uint64_t v19 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v19 == v77)
      {
        if ((int)v19 >= 1)
        {
          uint64_t v20 = 0LL;
          int v18 = 0;
          int v17 = 0;
          while (1)
          {
            uint64_t v21 = *(_BYTE **)(v75 + 8 * v20);
            int v22 = *(unsigned __int8 **)(*(void *)(v15 + 32) + 8 * v20);
            if (v21)
            {
              if (v22)
              {
                while (1)
                {
                  uint64_t v24 = *v21;
                  uint64_t v25 = *v22;
                  if ((_DWORD)v24 == (_DWORD)v25)
                  {
                    if (!*v21) {
                      goto LABEL_25;
                    }
                  }

                  else
                  {
                    int v23 = byte_1813C6343[v24] - byte_1813C6343[v25];
                    if (v23) {
                      goto LABEL_41;
                    }
                  }

                  ++v21;
                  ++v22;
                }
              }
            }

            else
            {
              if (v22) {
                int v23 = -1;
              }
              else {
                int v23 = 0;
              }
LABEL_41:
              if (!v23) {
                goto LABEL_25;
              }
            }

            int v18 = 1;
LABEL_25:
            if (*((_BYTE *)v80 + v20)) {
              int v17 = 1;
            }
            if (++v20 == v19) {
              goto LABEL_45;
            }
          }
        }

        int v17 = 0;
        int v18 = 0;
      }

      else
      {
        int v17 = 0;
        int v18 = 1;
      }
    }

uint64_t sub_1812E89CC(uint64_t a1, char *__s, void *a3)
{
  if (__s) {
    int v6 = (strlen(__s) & 0x3FFFFFFF) + 1;
  }
  else {
    int v6 = 1;
  }
  if (__s) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = v6 + 1;
  uint64_t v9 = (void *)(a1 + 88);
  while (1)
  {
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      break;
    }
    int v12 = (_BYTE *)v9[1];
    if (v12) {
      int v11 = 1;
    }
    else {
      int v11 = v7;
    }
    if (v12) {
      BOOL v13 = __s == 0LL;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      int v14 = v8;
      uint64_t v15 = __s;
      while (1)
      {
        uint64_t v16 = *v12;
        if (!*v12) {
          break;
        }
        LODWORD(v16) = byte_1813C6343[v16];
        int v10 = byte_1813C6343[*v15];
        if ((_DWORD)v16 != v10) {
          goto LABEL_9;
        }
        ++v12;
        ++v15;
      }

      int v10 = byte_1813C6343[*v15];
LABEL_9:
      int v11 = v16 - v10;
    }

    if (!v11) {
      goto LABEL_23;
    }
  }

  if (*(_DWORD *)(a1 + 28))
  {
    int v18 = *(uint64_t (**)(void, char *))(a1 + 48);
    if (!v18 || (uint64_t result = v18(*(void *)(a1 + 40), __s), (_DWORD)result))
    {
      uint64_t result = sqlite3session_attach((uint64_t *)a1, (uint64_t)__s);
      if (!(_DWORD)result)
      {
        uint64_t v19 = *(void **)(a1 + 88);
        while (1)
        {
          uint64_t v9 = v19;
          if (!v19) {
            break;
          }
          uint64_t v19 = (void *)*v19;
          if (!*v9) {
            goto LABEL_24;
          }
        }

BOOL sub_1812E8AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v6 = (BOOL *)(a2 + 24);
    }
    else {
      int v6 = 0LL;
    }
    int v5 = sub_1812E8C64( a1,  *(sqlite3 **)a1,  *(const char **)(a1 + 8),  *(char **)(a2 + 8),  v4,  0LL,  (void *)(a2 + 32),  &v18,  v6);
    *(_DWORD *)(a1 + 36) = v5;
    if (!v5)
    {
      uint64_t v7 = *v4;
      if ((int)v7 >= 1)
      {
        uint64_t v8 = 0LL;
        while (!*(_BYTE *)(v18 + v8))
        {
          if (v7 == ++v8) {
            goto LABEL_13;
          }
        }

        *(void *)(a2 + 40) = v18;
      }

uint64_t sub_1812E8C64( uint64_t a1, sqlite3 *a2, const char *a3, char *__s, _DWORD *a5, void *a6, void *a7, void *a8, BOOL *a9)
{
  if (!__s)
  {
    int v17 = 0;
LABEL_10:
    int v22 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA '%q'.table_info('%q')", a3, __s);
    if (!v22)
    {
LABEL_37:
      *a7 = 0LL;
      *a8 = 0LL;
      *a5 = 0;
      if (a6) {
        *a6 = 0LL;
      }
      return 7LL;
    }

uint64_t sub_1812E919C(int a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a3 + 24)) {
    uint64_t v9 = "_rowid_, *";
  }
  else {
    uint64_t v9 = "*";
  }
  int v10 = (unsigned __int8 *)sqlite3_mprintf( "SELECT %s FROM %w.%w WHERE NOT EXISTS( SELECT 1 FROM %w.%w WHERE %s)",  v9,  a4,  *(void *)(a3 + 8),  a5,  *(void *)(a3 + 8),  a6);
  if (!v10) {
    return 7LL;
  }
  uint64_t v12 = v10;
  uint64_t v13 = sub_18126DFE0(*a2, v10, 0xFFFFFFFFLL, 0LL, 0LL, &pStmt, 0LL, v11);
  if (!(_DWORD)v13)
  {
    unint64_t v14 = (sqlite3_stmt **)a2[12];
    unsigned __int8 *v14 = pStmt;
    v14[1] = (sqlite3_stmt *)*(unsigned int *)(a3 + 24);
    while (sqlite3_step(pStmt) == 100)
    {
      if (*(_DWORD *)(a3 + 24)) {
        sqlite3_int64 v15 = sqlite3_column_int64(pStmt, 0);
      }
      else {
        sqlite3_int64 v15 = 0LL;
      }
      sub_1813B8D20(a1, v15, (uint64_t)a2, a3);
    }

    uint64_t v13 = sqlite3_finalize(pStmt);
  }

  unint64_t v16 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_19;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
  --qword_18C468B10;
  off_18C4653A8(v12);
  uint64_t v12 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unint64_t v16 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_19:
    (*v16)(v12);
  }

  return v13;
}

uint64_t sqlite3session_create(uint64_t a1, char *__s, uint64_t *a3)
{
  if (__s) {
    int v6 = strlen(__s) & 0x3FFFFFFF;
  }
  else {
    int v6 = 0;
  }
  *a3 = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = sub_18126F0AC((v6 + 137));
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 128) = 0LL;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  int v10 = (void *)(v8 + 136);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = v10;
  *(_DWORD *)(v9 + 20) = 1;
  memcpy(v10, __s, (v6 + 1));
  *(void *)(v9 + 96) = a1;
  *(void *)(v9 + 104) = j__sqlite3_preupdate_old;
  *(void *)(v9 + 112) = j__sqlite3_preupdate_new;
  *(void *)(v9 + 120) = sub_1813BA494;
  *(void *)(v9 + 128) = sub_1813BA4AC;
  if (a1)
  {
    int v11 = *(unsigned __int8 *)(a1 + 113);
    switch(v11)
    {
      case 186:
        goto LABEL_11;
      case 118:
        uint64_t v13 = *(void *)(a1 + 24);
        if (v13) {
          xmmword_18C465400(v13);
        }
        goto LABEL_17;
      case 109:
LABEL_11:
        uint64_t v12 = "unopened";
        break;
      default:
        uint64_t v12 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v12 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v12);
  sub_1812CF36C(186024);
LABEL_17:
  uint64_t v14 = *(void *)(a1 + 24);
  if (v14)
  {
    xmmword_18C465400(v14);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 352);
    *(void *)(a1 + 352) = v9;
    *(void *)(a1 + 360) = sub_1812E9540;
    if (v15) {
      xmmword_18C465410(v15);
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 352);
    *(void *)(a1 + 352) = v9;
    *(void *)(a1 + 360) = sub_1812E9540;
  }

  *(void *)(v9 + 80) = v16;
  int v17 = *(unsigned __int8 *)(a1 + 113);
  switch(v17)
  {
    case 186:
      goto LABEL_24;
    case 118:
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19) {
        xmmword_18C465410(v19);
      }
      goto LABEL_29;
    case 109:
LABEL_24:
      uint64_t v18 = "unopened";
      break;
    default:
      uint64_t v18 = "invalid";
      break;
  }

  sqlite3_log(21, "API call with %s database connection pointer", v18);
  sub_1812CF36C(186024);
LABEL_29:
  uint64_t result = 0LL;
  *a3 = v9;
  return result;
}

void sub_1812E9540(uint64_t a1, int a2, int a3, char *__s, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a1;
  if (!__s)
  {
    int v13 = 1;
    if (!a1) {
      return;
    }
    goto LABEL_5;
  }

  int v13 = (strlen(__s) & 0x3FFFFFFF) + 1;
  if (v12)
  {
LABEL_5:
    unsigned int v14 = v13 + 1;
    do
    {
      if (*(_DWORD *)(v12 + 20) && !*(_DWORD *)(v12 + 36))
      {
        uint64_t v15 = *(unsigned __int8 **)(v12 + 8);
        if (__s)
        {
          if (!v15) {
            goto LABEL_6;
          }
          unsigned int v16 = v14;
          int v17 = __s;
          do
          {
            uint64_t v18 = *v17;
            if (!*v17) {
              break;
            }
            LODWORD(v18) = byte_1813C6343[v18];
            int v19 = byte_1813C6343[*v15];
            if ((_DWORD)v18 != v19) {
              goto LABEL_22;
            }
            ++v17;
            ++v15;
            --v16;
          }

          while (v16 > 1);
          int v19 = byte_1813C6343[*v15];
LABEL_22:
          if ((_DWORD)v18 != v19) {
            goto LABEL_6;
          }
        }

        else
        {
          if (v15) {
            int v20 = -1;
          }
          else {
            int v20 = 0;
          }
          if (v20) {
            goto LABEL_6;
          }
        }

        *(_DWORD *)(v12 + 36) = sub_1812E89CC(v12, a5, &v22);
        uint64_t v21 = v22;
        if (v22)
        {
          sub_1813B8D20(a3, a6, v12, v22);
          if (a3 == 23) {
            sub_1813B8D20(18, a7, v12, v21);
          }
        }
      }

uint64_t sqlite3session_delete(uint64_t *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_15;
  }

  int v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
    goto LABEL_15;
  }

  if (v3 != 118)
  {
    if (v3 == 109) {
      goto LABEL_5;
    }
    uint64_t v4 = "invalid";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1812CF36C(186024);
    uint64_t v6 = *(void *)(v2 + 24);
    if (!v6) {
      goto LABEL_16;
    }
LABEL_10:
    xmmword_18C465400(v6);
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)(v2 + 352);
    *(void *)(v2 + 352) = 0LL;
    *(void *)(v2 + 360) = 0LL;
    if (v7) {
      xmmword_18C465410(v7);
    }
    uint64_t v20 = v8;
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_17;
  }

  uint64_t v5 = *(void *)(v2 + 24);
  if (v5) {
    xmmword_18C465400(v5);
  }
  uint64_t v6 = *(void *)(v2 + 24);
  if (v6) {
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v8 = *(void *)(v2 + 352);
  *(void *)(v2 + 352) = 0LL;
  *(void *)(v2 + 360) = 0LL;
  uint64_t v20 = v8;
  if (!v8) {
    goto LABEL_29;
  }
LABEL_17:
  if (v8 == v1)
  {
    int v10 = &v20;
LABEL_22:
    uint64_t *v10 = *(void *)(v1 + 80);
    uint64_t v11 = v20;
    if (v20)
    {
      uint64_t v12 = *(void *)(v2 + 24);
      if (v12)
      {
        xmmword_18C465400(v12);
        uint64_t v13 = *(void *)(v2 + 24);
        *(void *)(v2 + 352) = v11;
        *(void *)(v2 + 360) = sub_1812E9540;
        if (v13) {
          xmmword_18C465410(v13);
        }
      }

      else
      {
        *(void *)(v2 + 352) = v20;
        *(void *)(v2 + 360) = sub_1812E9540;
      }

      goto LABEL_29;
    }
  }

  else
  {
    while (1)
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 80);
      if (!v8) {
        break;
      }
      if (v8 == v1)
      {
        int v10 = (uint64_t *)(v9 + 80);
        goto LABEL_22;
      }
    }
  }

  if (!v2)
  {
    unsigned int v14 = "NULL";
LABEL_36:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1812CF36C(186024);
    goto LABEL_37;
  }

uint64_t sub_1812E9958(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v16 = (uint64_t *)*v2;
      int v4 = *((_DWORD *)v2 + 13);
      if (v4 >= 1)
      {
        uint64_t v5 = 0LL;
        while (1)
        {
          uint64_t v6 = *(void *)(v2[7] + 8 * v5);
          if (v6) {
            break;
          }
LABEL_8:
          if (++v5 >= v4) {
            goto LABEL_20;
          }
        }

        while (2)
        {
          uint64_t v7 = *(void *)(v6 + 24);
          if (v3) {
            *(void *)(v3 + 56) -= (int)off_18C4653B8(v6);
          }
          uint64_t v8 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v6);
            --qword_18C468B10;
            off_18C4653A8(v6);
            uint64_t v6 = xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v8 = &xmmword_18C465410;
              goto LABEL_11;
            }
          }

          else
          {
LABEL_11:
            (*v8)(v6);
          }

          uint64_t v6 = v7;
          if (!v7)
          {
            int v4 = *((_DWORD *)v2 + 13);
            goto LABEL_8;
          }

          continue;
        }
      }

uint64_t sqlite3session_table_filter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 28) = 1;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t sqlite3session_attach(uint64_t *a1, uint64_t __s)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(unsigned __int8 *)(v4 + 113);
    switch(v5)
    {
      case 186:
        goto LABEL_5;
      case 118:
        uint64_t v7 = *(void *)(v4 + 24);
        if (v7) {
          xmmword_18C465400(v7);
        }
        if (!__s) {
          goto LABEL_23;
        }
        goto LABEL_10;
      case 109:
LABEL_5:
        uint64_t v6 = "unopened";
        break;
      default:
        uint64_t v6 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v6 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v6);
  sub_1812CF36C(186024);
  if (!__s)
  {
LABEL_23:
    *((_DWORD *)a1 + 7) = 1;
    goto LABEL_24;
  }

uint64_t sub_1812E9EB8(uint64_t a1, uint64_t a2)
{
  if (sqlite3_initialize())
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    if (!a1) {
      return v4;
    }
    goto LABEL_8;
  }

  uint64_t v6 = sub_18126F0AC(a2);
  uint64_t v4 = v6;
  if (a1)
  {
    if (v6) {
      uint64_t v5 = (int)off_18C4653B8(v6);
    }
    else {
      uint64_t v5 = 0LL;
    }
LABEL_8:
    *(void *)(a1 + 56) += v5;
  }

  return v4;
}

uint64_t sqlite3session_changeset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3) {
    return sub_1813C23E0(a1, 0, a2, a3);
  }
  else {
    return 21LL;
  }
}

uint64_t sub_1812E9F50( uint64_t a1, int a2, uint64_t (*a3)(void, void), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  int v8 = a3;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)a1;
  uint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  if (a3)
  {
    uint64_t result = *(unsigned int *)(a1 + 36);
    if ((_DWORD)result) {
      return result;
    }
  }

  else
  {
    *a5 = 0;
    *a6 = 0LL;
    uint64_t result = *(unsigned int *)(a1 + 36);
    if ((_DWORD)result) {
      return result;
    }
  }

  uint64_t result = sqlite3_exec(*(sqlite3 **)v9, "SAVEPOINT changeset", 0LL, 0LL, 0LL);
  unsigned int v71 = result;
  if (!(_DWORD)result)
  {
    if (v10)
    {
      int v12 = *(unsigned __int8 *)(v10 + 113);
      switch(v12)
      {
        case 186:
          goto LABEL_10;
        case 118:
          uint64_t v14 = *(void *)(v10 + 24);
          if (v14) {
            xmmword_18C465400(v14);
          }
          goto LABEL_16;
        case 109:
LABEL_10:
          int v13 = "unopened";
          break;
        default:
          int v13 = "invalid";
          break;
      }
    }

    else
    {
      int v13 = "NULL";
    }

    sqlite3_log(21, "API call with %s database connection pointer", v13);
    sub_1812CF36C(186024);
LABEL_16:
    uint64_t v15 = *(void *)(v9 + 88);
    if (!v15)
    {
      if (!v8)
      {
        LODWORD(v16) = 0;
        goto LABEL_114;
      }

LABEL_104:
      uint64_t v52 = v72;
      goto LABEL_105;
    }

    unsigned int v57 = v6;
    uint64_t v58 = v9;
    uint64_t v16 = 0LL;
    uint64_t v62 = v8;
    unsigned int v59 = v7;
    uint64_t v60 = v10;
    while (1)
    {
      if (*(_DWORD *)(v15 + 48))
      {
        uint64_t v17 = *(char **)(v15 + 8);
        int v70 = 0;
        uint64_t v68 = 0LL;
        __s1 = 0LL;
        pStmt = 0LL;
        int v66 = 0;
        int v18 = (BOOL *)&v66;
        if (!*(_DWORD *)(v9 + 32)) {
          int v18 = 0LL;
        }
        unsigned int v71 = sub_1812E8C64(0LL, (sqlite3 *)v10, *(const char **)(v9 + 8), v17, &v70, 0LL, &v68, &__s1, v18);
        if (!v71)
        {
          size_t v19 = *(int *)(v15 + 16);
        }

        sub_1813BA4C8((uint64_t)&v72, a2, v15, &v71);
        unsigned int v20 = v71;
        if (v71)
        {
          unsigned int v21 = v73;
          int v22 = v73;
          goto LABEL_87;
        }

        unsigned int v23 = sub_1813BA5F4(v10, 0, *(void *)(v9 + 8), (unsigned __int8 *)v17, v66, v70, v68, (uint64_t)__s1, &pStmt);
        unsigned int v20 = v23;
        unsigned int v71 = v23;
        int v22 = v73;
        int v24 = *(_DWORD *)(v15 + 52);
        if (v24 >= 1 && !v23)
        {
          uint64_t v64 = v15;
          int v61 = v16;
          uint64_t v25 = 0LL;
          int v26 = v70;
          int v27 = __s1;
          int v28 = a2;
          while (1)
          {
            size_t v29 = *(unsigned __int8 **)(*(void *)(v64 + 56) + 8 * v25);
            if (!v29)
            {
              unsigned int v49 = 0;
              goto LABEL_83;
            }

            while (1)
            {
              unsigned int v30 = sub_1813BAA70(pStmt, v26, (uint64_t)v27, (uint64_t)v29);
              unsigned int v71 = v30;
              if (v30) {
                break;
              }
              int v31 = sqlite3_step(pStmt);
              int v32 = *v29;
              if (v31 == 100)
              {
                if (v32 == 18)
                {
                  LODWORD(v33) = HIDWORD(v73);
                  uint64_t v34 = (int)v73;
                  if ((int)v73 < SHIDWORD(v73))
                  {
                    uint64_t v35 = v72;
                    goto LABEL_38;
                  }

                  if (HIDWORD(v73)) {
                    int v39 = HIDWORD(v73);
                  }
                  else {
                    int v39 = 128;
                  }
                  uint64_t v33 = v39;
                  do
                  {
                    uint64_t v40 = v33;
                    v33 *= 2LL;
                  }

                  while (v33 <= (int)v73);
                  if (v40 > 1073741695 && (uint64_t v33 = 2147483391LL, (int)v73 > 2147483390)
                    || (uint64_t v41 = v72, sqlite3_initialize())
                    || (uint64_t v47 = sub_18127D33C(v41, v33)) == 0)
                  {
                    unsigned int v71 = 7;
                    if (v26 >= 1) {
                      goto LABEL_65;
                    }
                  }

                  else
                  {
                    uint64_t v35 = v47;
                    uint64_t v72 = v47;
                    HIDWORD(v73) = v33;
LABEL_38:
                    uint64_t v36 = v34 + 1;
                    LODWORD(v73) = v34 + 1;
                    *(_BYTE *)(v35 + v34) = 18;
                    unsigned __int8 v37 = v29[1];
                    if ((int)v34 + 1 >= (int)v33)
                    {
                      if ((_DWORD)v33) {
                        int v42 = v33;
                      }
                      else {
                        int v42 = 128;
                      }
                      uint64_t v43 = v42;
                      do
                      {
                        uint64_t v44 = v43;
                        v43 *= 2LL;
                      }

                      while (v43 <= v36);
                      if (v44 <= 1073741695 || (uint64_t v43 = 2147483391LL, (int)v34 <= 2147483389))
                      {
                        if (!sqlite3_initialize())
                        {
                          uint64_t v48 = sub_18127D33C(v35, v43);
                          if (v48)
                          {
                            uint64_t v35 = v48;
                            uint64_t v72 = v48;
                            HIDWORD(v73) = v43;
                            goto LABEL_39;
                          }
                        }
                      }

                      unsigned int v71 = 7;
                    }

                    else
                    {
LABEL_39:
                      LODWORD(v73) = v34 + 2;
                      *(_BYTE *)(v35 + v36) = v37;
                    }

                    int v8 = v62;
                    int v28 = a2;
                    if (v26 >= 1)
                    {
LABEL_65:
                      for (int i = 0; i != v26; ++i)
                        sub_1813BACD4((uint64_t)&v72, pStmt, i, &v71);
                    }
                  }

              uint64_t v52 = *(_DWORD *)(v10 + 80);
            }

            if (++v53 >= v52) {
              goto LABEL_159;
            }
            continue;
          }
        }
      }

      uint64_t result = sub_181374204(v40, v10, &v106);
      int v13 = 0;
      uint64_t v48 = *(void *)(v10 + 40);
      *int v46 = *(_DWORD *)(v10 + 48);
      *((void *)v46 - 2) = *(void *)(v10 + 24);
      *((void *)v46 - 1) = v48;
LABEL_87:
      if (!*(v46 - 6))
      {
        uint64_t v50 = *((void *)v46 - 2);
        if (!v44) {
          goto LABEL_98;
        }
        if (v42 == v50) {
          int v51 = 0;
        }
        else {
          int v51 = -1;
        }
        if (v42 > v50) {
          int v51 = 1;
        }
        if (v100) {
          int v51 = -v51;
        }
        if (v51 < 0)
        {
LABEL_98:
          uint64_t v44 = 1;
          int v42 = *((void *)v46 - 2);
        }

        else
        {
          uint64_t v44 = 1;
        }
      }

      goto LABEL_76;
    }
  }

  return result;
}

LABEL_115:
          sqlite3_exec((sqlite3 *)v10, "RELEASE changeset", 0LL, 0LL, 0LL);
          if (!v10)
          {
            BOOL v55 = "NULL";
            goto LABEL_124;
          }

          int v54 = *(unsigned __int8 *)(v10 + 113);
          if (v54 == 186) {
            goto LABEL_119;
          }
          if (v54 == 118)
          {
            uint64_t v56 = *(void *)(v10 + 24);
            if (v56) {
              xmmword_18C465410(v56);
            }
          }

          else
          {
            if (v54 == 109) {
LABEL_119:
            }
              BOOL v55 = "unopened";
            else {
              BOOL v55 = "invalid";
            }
LABEL_124:
            sqlite3_log(21, "API call with %s database connection pointer", v55);
            sub_1812CF36C(186024);
          }

          return v71;
        }

        uint64_t v6 = v57;
LABEL_114:
        _DWORD *v7 = v16;
        *uint64_t v6 = v72;
        goto LABEL_115;
      }

      goto LABEL_104;
    }
  }

  return result;
}

    uint64_t v16 = sqlite3_exec(a1, "RELEASE changeset_apply", 0LL, 0LL, 0LL);
  }

    if ((_DWORD)v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }

  int v22 = *v26;
  if ((v21 & 0x10) == 0)
  {
    if (*v26) {
      int v27 = v22 == 10;
    }
    else {
      int v27 = 1;
    }
    size_t v19 = !v27;
    if ((_DWORD)v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }

  if ((v22 & 0x80) != 0)
  {
    unsigned __int8 v37 = v26[1];
    if (v26[1] < 0)
    {
      int v39 = v26[2];
      if (v39 < 0)
      {
        sub_18129BD74(v26, &v64);
        if (HIDWORD(v64)) {
          int v22 = -1;
        }
        else {
          int v22 = v64;
        }
      }

      else
      {
        int v22 = v39 & 0x7F | (v22 << 14) & 0x1FC07F | ((v37 & 0x7F) << 7);
      }
    }

    else
    {
      int v22 = ((v22 & 0x7F) << 7) | v37;
    }
  }

  int v46 = v22 - 12;
  if (v22 < 0xC || (v22 & 1) != 0)
  {
LABEL_134:
    size_t v19 = 0xFFFFFFFFLL;
    goto LABEL_142;
  }

  uint64_t v40 = v46 >> 1;
  if (v40 + v18 > a1)
  {
    uint64_t v56 = 95985;
    goto LABEL_141;
  }

  if ((*(_WORD *)(v7 + 20) & 0x400) == 0)
  {
    uint64_t v48 = *(_DWORD *)(v7 + 16);
    size_t v19 = (v40 - v48);
    goto LABEL_114;
  }

  if (v46 < 2)
  {
LABEL_129:
    size_t v19 = (v40 - *(_DWORD *)v7);
    if ((_DWORD)v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }

  uint64_t v53 = (unsigned __int8 *)&a2[v18];
  int v54 = v40;
  while (!*v53++)
  {
    if (!--v54) {
      goto LABEL_129;
    }
  }

uint64_t sqlite3session_changeset_strm(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  if (a2) {
    return sub_1812E9F50(a1, 0, a2, a3, 0LL, 0LL);
  }
  else {
    return 21LL;
  }
}

uint64_t sqlite3session_patchset_strm(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  if (a2) {
    return sub_1812E9F50(a1, 1, a2, a3, 0LL, 0LL);
  }
  else {
    return 21LL;
  }
}

uint64_t sqlite3session_patchset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3) {
    return sub_1813C23E0(a1, 1, a2, a3);
  }
  else {
    return 21LL;
  }
}

uint64_t sqlite3session_enable(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_16;
  }

  int v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
    goto LABEL_16;
  }

  if (v5 != 118)
  {
    if (v5 == 109) {
      goto LABEL_5;
    }
    uint64_t v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1812CF36C(186024);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }

  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    xmmword_18C465400(v7);
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 5);
    uint64_t v8 = *a1;
    if (!*a1) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }

uint64_t sqlite3session_indirect(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_16;
  }

  int v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
    goto LABEL_16;
  }

  if (v5 != 118)
  {
    if (v5 == 109) {
      goto LABEL_5;
    }
    uint64_t v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1812CF36C(186024);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }

  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    xmmword_18C465400(v7);
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 6);
    uint64_t v8 = *a1;
    if (!*a1) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }

BOOL sqlite3session_isempty(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_12;
  }

  int v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
    goto LABEL_12;
  }

  if (v3 != 118)
  {
    if (v3 == 109) {
      goto LABEL_5;
    }
    uint64_t v4 = "invalid";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1812CF36C(186024);
    uint64_t v6 = (uint64_t *)a1[11];
    if (v6) {
      goto LABEL_13;
    }
LABEL_22:
    BOOL v9 = 1LL;
    uint64_t v10 = *a1;
    if (*a1) {
      goto LABEL_18;
    }
LABEL_23:
    int v12 = "NULL";
    goto LABEL_27;
  }

  uint64_t v5 = *(void *)(v2 + 24);
  if (v5) {
    xmmword_18C465400(v5);
  }
  uint64_t v6 = (uint64_t *)a1[11];
  if (!v6) {
    goto LABEL_22;
  }
  do
  {
LABEL_13:
    int v7 = *((_DWORD *)v6 + 12);
    uint64_t v6 = (uint64_t *)*v6;
    if (v6) {
      BOOL v8 = v7 < 1;
    }
    else {
      BOOL v8 = 0;
    }
  }

  while (v8);
  BOOL v9 = v7 < 1;
  uint64_t v10 = *a1;
  if (!*a1) {
    goto LABEL_23;
  }
LABEL_18:
  int v11 = *(unsigned __int8 *)(v10 + 113);
  if (v11 == 186)
  {
LABEL_21:
    int v12 = "unopened";
LABEL_27:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1812CF36C(186024);
    return v9;
  }

  if (v11 != 118)
  {
    if (v11 != 109)
    {
      int v12 = "invalid";
      goto LABEL_27;
    }

    goto LABEL_21;
  }

  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_18C465410(v13);
  }
  return v9;
}

uint64_t sqlite3session_memory_used(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sqlite3session_object_config(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 == 2)
  {
    if ((*a3 & 0x80000000) != 0)
    {
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = *(void *)(a1 + 88);
      if (v3) {
        uint64_t v3 = 21LL;
      }
      else {
        *(_DWORD *)(a1 + 32) = *a3 != 0;
      }
    }

    uint64_t v4 = (_DWORD *)(a1 + 32);
  }

  else
  {
    if (a2 != 1) {
      return 21LL;
    }
    if ((*a3 & 0x80000000) != 0)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = (_DWORD *)(a1 + 16);
    }

    else
    {
      uint64_t v3 = *(void *)(a1 + 88);
      if (v3) {
        uint64_t v3 = 21LL;
      }
      else {
        *(_DWORD *)(a1 + 16) = *a3 != 0;
      }
      uint64_t v4 = (_DWORD *)(a1 + 16);
    }
  }

  *a3 = *v4;
  return v3;
}

uint64_t sqlite3session_changeset_size(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double sqlite3changeset_start(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0LL;
  if (!sqlite3_initialize())
  {
    uint64_t v7 = sub_18126F0AC(152LL);
    if (v7)
    {
      double result = 0.0;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(void *)(v7 + 16) = a3;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(void *)(v7 + 144) = 0LL;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      *(_DWORD *)(v7 + 24) = a2;
      *(void *)(v7 + 48) = 0LL;
      *(void *)(v7 + 56) = 0LL;
      *(_DWORD *)(v7 + 64) = 1;
      *(_DWORD *)(v7 + 92) = 0;
      *(_DWORD *)(v7 + 96) = 0;
      *a1 = v7;
    }
  }

  return result;
}

double sqlite3changeset_start_v2(uint64_t *a1, int a2, uint64_t a3, unsigned int a4)
{
  *a1 = 0LL;
  if (!sqlite3_initialize())
  {
    uint64_t v9 = sub_18126F0AC(152LL);
    if (v9)
    {
      double result = 0.0;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(void *)(v9 + 16) = a3;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(void *)(v9 + 144) = 0LL;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)uint64_t v9 = 0u;
      *(_DWORD *)(v9 + 24) = a2;
      *(void *)(v9 + 48) = 0LL;
      *(void *)(v9 + 56) = 0LL;
      *(_DWORD *)(v9 + 64) = 1;
      *(void *)(v9 + 92) = (a4 >> 1) & 1;
      *a1 = v9;
    }
  }

  return result;
}

uint64_t sqlite3changeset_start_strm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v7 = sub_18126F0AC(152LL);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  uint64_t result = 0LL;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 56) = a3;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(void *)(v8 + 144) = 0LL;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)(v8 + 16) = 0LL;
  *(_DWORD *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 64) = a2 == 0;
  *(_DWORD *)(v8 + 92) = 0;
  *(_DWORD *)(v8 + 96) = 0;
  *a1 = v8;
  return result;
}

uint64_t sqlite3changeset_start_v2_strm(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *a1 = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v9 = sub_18126F0AC(152LL);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  uint64_t result = 0LL;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(void *)(v10 + 144) = 0LL;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(void *)(v10 + 16) = 0LL;
  *(_DWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 64) = a2 == 0;
  *(_DWORD *)(v10 + 92) = (a4 >> 1) & 1;
  *(_DWORD *)(v10 + 96) = 0;
  *a1 = v10;
  return result;
}

uint64_t sqlite3changeset_next(uint64_t a1)
{
  return sub_1812EADB4(a1, 0LL, 0LL, 0LL);
}

uint64_t sub_1812EADB4(uint64_t a1, void *a2, int *a3, _DWORD *a4)
{
  while (2)
  {
    int v94 = 0;
    uint64_t result = *(unsigned int *)(a1 + 100);
    if ((_DWORD)result) {
      break;
    }
    uint64_t v7 = *(void **)(a1 + 144);
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 120);
      if (v8 >= 1)
      {
        uint64_t v9 = 0LL;
        do
        {
          uint64_t v10 = *(void *)(a1 + 144);
          uint64_t v11 = *(void *)(v10 + 8 * v9);
          if (v11)
          {
            if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32)) {
              sub_181303838(*(void *)(v10 + 8 * v9));
            }
            sub_1812F20DC(*(void **)(v11 + 24), (void *)v11);
            int v8 = *(_DWORD *)(a1 + 120);
          }

          ++v9;
        }

        while (v9 < 2 * v8);
        uint64_t v7 = *(void **)(a1 + 144);
      }

      bzero(v7, 16LL * v8);
    }

    uint64_t result = sub_1813BBD3C(a1, 2);
    *(_DWORD *)(a1 + 100) = result;
    if ((_DWORD)result) {
      break;
    }
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (*(void *)(a1 + 48) && (int)v13 >= dword_18C54FB18)
    {
      size_t v14 = (*(_DWORD *)(a1 + 40) - v13);
      if ((int)v14 >= 1)
      {
        memmove(*(void **)(a1 + 32), (const void *)(*(void *)(a1 + 32) + v13), v14);
        LODWORD(v14) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8);
      }

      LODWORD(v13) = 0;
      *(_DWORD *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 24) = v14;
    }

    *(_DWORD *)(a1 + 4) = v13;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = (int)v13 + 1LL;
      *(_DWORD *)(a1 + 8) = v16;
      unsigned int v17 = *(unsigned __int8 *)(v15 + (int)v13);
      if ((v17 | 4) != 0x54) {
        break;
      }
      if (a4) {
        *a4 = 1;
      }
      *(_DWORD *)(a1 + 88) = v17 == 80;
      uint64_t result = sub_1813BC3CC(a1, &v95);
      if (!(_DWORD)result)
      {
        uint64_t v21 = *(int *)(a1 + 8);
        int v22 = (char *)(*(void *)(a1 + 16) + v21);
        int v23 = *v22;
        if (*v22 < 0)
        {
          int v33 = v22[1];
          if (v22[1] < 0)
          {
            int v36 = v22[2];
            if (v36 < 0)
            {
              unsigned int v24 = sub_18129BD74(v22, &v96);
              if (HIDWORD(v96)) {
                int v23 = -1;
              }
              else {
                int v23 = v96;
              }
              *(_DWORD *)(a1 + 120) = v23;
              if (v23 < 1)
              {
LABEL_55:
                uint64_t result = sub_1812FBF50(233868);
                goto LABEL_33;
              }
            }

            else
            {
              int v23 = v36 & 0x7F | (v23 << 14) & 0x1FC07F | ((v33 & 0x7F) << 7);
              *(_DWORD *)(a1 + 120) = v23;
              unsigned int v24 = 3;
              if (v23 < 1) {
                goto LABEL_55;
              }
            }
          }

          else
          {
            int v23 = ((v23 & 0x7F) << 7) | v33;
            *(_DWORD *)(a1 + 120) = v23;
            unsigned int v24 = 2;
            if (v23 < 1) {
              goto LABEL_55;
            }
          }
        }

        else
        {
          *(_DWORD *)(a1 + 120) = v23;
          unsigned int v24 = 1;
          if (v23 < 1) {
            goto LABEL_55;
          }
        }

        size_t v25 = v95 - (unint64_t)v24;
        *(_DWORD *)(a1 + 8) = v24 + v21;
        int v26 = v25 + 16 * v23;
        *(_DWORD *)(a1 + 80) = 0;
        int v27 = *(_DWORD *)(a1 + 84);
        if (v26 <= v27)
        {
          uint64_t v34 = *(void **)(a1 + 72);
        }

        else
        {
          uint64_t v28 = v26;
          if (v27) {
            int v29 = *(_DWORD *)(a1 + 84);
          }
          else {
            int v29 = 128;
          }
          uint64_t v30 = v29;
          do
          {
            uint64_t v31 = v30;
            v30 *= 2LL;
          }

          while (v30 < v28);
          if (v31 >= 1073741696)
          {
            uint64_t v30 = 2147483391LL;
          }

          uint64_t v32 = *(void *)(a1 + 72);
          if (sqlite3_initialize() || (uint64_t v34 = (void *)sub_18127D33C(v32, v30)) == 0LL)
          {
LABEL_47:
            uint64_t result = 7LL;
            goto LABEL_33;
          }

          *(void *)(a1 + 72) = v34;
          *(_DWORD *)(a1 + 84) = v30;
          int v23 = *(_DWORD *)(a1 + 120);
        }

        size_t v35 = 16LL * v23;
        bzero(v34, v35);
        memcpy((void *)(*(void *)(a1 + 72) + v35), (const void *)(*(void *)(a1 + 16) + *(int *)(a1 + 8)), v25);
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 8) += v25;
      }

uint64_t sqlite3changeset_op(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = *(_DWORD *)(a1 + 124);
  *a3 = *(_DWORD *)(a1 + 120);
  *a2 = *(void *)(a1 + 112);
  if (a5) {
    *a5 = *(_DWORD *)(a1 + 128);
  }
  return 0LL;
}

uint64_t sqlite3changeset_pk(uint64_t a1, void *a2, _DWORD *a3)
{
  *a2 = *(void *)(a1 + 136);
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 120);
  }
  return 0LL;
}

uint64_t sqlite3changeset_old(uint64_t a1, unsigned int a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 9) {
    return 21LL;
  }
  uint64_t result = 0LL;
  *a3 = *(void *)(*(void *)(a1 + 144) + 8LL * a2);
  return result;
}

uint64_t sqlite3changeset_new(uint64_t a1, int a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 18) {
    return 21LL;
  }
  if (a2 < 0) {
    return 25LL;
  }
  int v6 = *(_DWORD *)(a1 + 120);
  if (v6 <= a2) {
    return 25LL;
  }
  uint64_t result = 0LL;
  *a3 = *(void *)(*(void *)(a1 + 144) + 8LL * (v6 + a2));
  return result;
}

uint64_t sqlite3changeset_conflict(uint64_t a1, int a2, sqlite3_value **a3)
{
  uint64_t v4 = *(sqlite3_stmt **)(a1 + 104);
  if (!v4) {
    return 21LL;
  }
  if (a2 < 0 || *(_DWORD *)(a1 + 120) <= a2) {
    return 25LL;
  }
  int v6 = sqlite3_column_value(v4, a2);
  uint64_t result = 0LL;
  *a3 = v6;
  return result;
}

uint64_t sqlite3changeset_fk_conflicts(uint64_t a1, _DWORD *a2)
{
  if (*(void *)(a1 + 104)) {
    return 21LL;
  }
  if (*(void *)(a1 + 144)) {
    return 21LL;
  }
  uint64_t result = 0LL;
  *a2 = *(_DWORD *)(a1 + 120);
  return result;
}

uint64_t sqlite3changeset_finalize(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(unsigned int *)(a1 + 100);
  if (*(void *)(a1 + 144))
  {
    int v3 = *(_DWORD *)(a1 + 120);
    if (v3 >= 1)
    {
      uint64_t v4 = 0LL;
      do
      {
        uint64_t v5 = *(void *)(v1 + 144);
        uint64_t v6 = *(void *)(v5 + 8 * v4);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32)) {
            sub_181303838(*(void *)(v5 + 8 * v4));
          }
          sub_1812F20DC(*(void **)(v6 + 24), (void *)v6);
          int v3 = *(_DWORD *)(v1 + 120);
        }

        ++v4;
      }

      while (v4 < 2 * v3);
    }
  }

  uint64_t v7 = *(void *)(v1 + 72);
  if (v7)
  {
    int v8 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v8)(v7);
      goto LABEL_19;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
    --qword_18C468B10;
    off_18C4653A8(v7);
    uint64_t v7 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v8 = &xmmword_18C465410;
      goto LABEL_18;
    }
  }

uint64_t sqlite3changeset_invert(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v5 = 0u;
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  return sub_1812EB95C((uint64_t)&v5, 0LL, 0LL, a3, a4);
}

uint64_t sub_1812EB95C( uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  unsigned int v108 = 0;
  uint64_t v106 = 0LL;
  uint64_t v107 = 0LL;
  if (a5)
  {
    *a5 = 0LL;
    *a4 = 0;
  }

  uint64_t v9 = sub_1813BBD3C(a1, 2);
  if (!(_DWORD)v9)
  {
    __int128 v98 = a4;
    uint64_t v99 = a5;
    BOOL v12 = 0LL;
    uint64_t v11 = 0LL;
    int v100 = 0;
    int v18 = 0;
    uint64_t v102 = a2;
    while (1)
    {
      uint64_t v20 = *(int *)(a1 + 8);
      if ((int)v20 >= *(_DWORD *)(a1 + 24))
      {
        if (v98 && v99)
        {
          uint64_t v10 = 0LL;
          _DWORD *v98 = v107;
          *uint64_t v99 = v106;
          goto LABEL_12;
        }

        uint64_t v10 = 0LL;
        uint64_t v13 = v106;
        uint64_t v10 = a2(a3, v106);
        if (v13) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }

      uint64_t v21 = *(void *)(a1 + 16);
      unsigned int v22 = *(unsigned __int8 *)(v21 + v20);
      if (v22 > 0x16)
      {
        if (v22 != 23)
        {
          if (v22 != 84) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 8) = v20 + 1;
          uint64_t v19 = sub_1813BC3CC(a1, &v105);
          if ((_DWORD)v19) {
            goto LABEL_210;
          }
          uint64_t v36 = *(void *)(a1 + 16);
          uint64_t v37 = *(int *)(a1 + 8);
          uint64_t v38 = v36 + v37;
          int v18 = *(unsigned __int8 *)(v36 + v37);
          if ((v18 & 0x80) != 0)
          {
            int v59 = *(unsigned __int8 *)(v38 + 1);
            if ((*(char *)(v38 + 1) & 0x80000000) == 0)
            {
              int v18 = ((v18 & 0x7F) << 7) | v59;
              unsigned int v39 = 2;
              goto LABEL_151;
            }

            int v77 = *(char *)(v38 + 2);
            if ((v77 & 0x80000000) == 0)
            {
              int v18 = v77 & 0x7F | (v18 << 14) & 0x1FC07F | ((v59 & 0x7F) << 7);
              unsigned int v39 = 3;
              goto LABEL_151;
            }

            unsigned int v78 = sub_18129BD74((char *)v38, &v109);
            int v18 = v109;
            if (!HIDWORD(v109))
            {
              unsigned int v39 = v78;
              goto LABEL_151;
            }

            int v18 = -1;
          }

          else
          {
            unsigned int v39 = 1;
LABEL_151:
            if (v18 >= 1)
            {
              if (v18 > (uint64_t)v100)
              {
                if (v100) {
                  uint64_t v79 = v100;
                }
                else {
                  uint64_t v79 = 128LL;
                }
                do
                {
                  uint64_t v80 = v79;
                  v79 *= 2LL;
                }

                while (v79 < v18);
                if (v80 > 1073741695 && (uint64_t v79 = 2147483391LL, v18 > 0x7FFFFEFF)
                  || sqlite3_initialize()
                  || (uint64_t v81 = sub_18127D33C((uint64_t)v12, v79)) == 0)
                {
                  uint64_t v10 = 7LL;
                  goto LABEL_5;
                }

                BOOL v12 = (unsigned __int8 *)v81;
                int v100 = v79;
              }

              memcpy(v12, (const void *)(v36 + v37 + v39), v18);
            }
          }

          int v82 = HIDWORD(v107);
          uint64_t v83 = (int)v107;
          if ((int)v107 >= SHIDWORD(v107))
          {
            if (!HIDWORD(v107)) {
              int v82 = 128;
            }
            uint64_t v85 = v82;
            do
            {
              uint64_t v86 = v85;
              v85 *= 2LL;
            }

            while (v85 <= (int)v107);
            if (v86 > 1073741695)
            {
              uint64_t v85 = 2147483391LL;
            }

            uint64_t v87 = v106;
            if (sqlite3_initialize()) {
              goto LABEL_213;
            }
            uint64_t v84 = sub_18127D33C(v87, v85);
            if (!v84) {
              goto LABEL_213;
            }
            uint64_t v106 = v84;
            HIDWORD(v107) = v85;
          }

          else
          {
            uint64_t v84 = v106;
          }

          LODWORD(v107) = v83 + 1;
          *(_BYTE *)(v84 + v83) = 84;
          size_t v88 = v105;
          if (v105 >= 1)
          {
            uint64_t v89 = *(void *)(a1 + 16);
            uint64_t v90 = *(int *)(a1 + 8);
            uint64_t v91 = (int)v107;
            int64_t v92 = (int)v107 + (unint64_t)v105;
            if (v92 <= SHIDWORD(v107))
            {
              uint64_t v96 = v106;
            }

            else
            {
              if (HIDWORD(v107)) {
                uint64_t v93 = SHIDWORD(v107);
              }
              else {
                uint64_t v93 = 128LL;
              }
              do
              {
                uint64_t v94 = v93;
                v93 *= 2LL;
              }

              while (v93 < v92);
              if (v94 > 1073741695)
              {
                uint64_t v93 = 2147483391LL;
                if (v92 > 2147483391) {
                  goto LABEL_213;
                }
              }

              uint64_t v95 = v106;
              if (sqlite3_initialize()) {
                goto LABEL_213;
              }
              uint64_t v96 = sub_18127D33C(v95, v93);
              if (!v96) {
                goto LABEL_213;
              }
              uint64_t v106 = v96;
              HIDWORD(v107) = v93;
            }

            memcpy((void *)(v96 + v91), (const void *)(v89 + v90), v88);
            LODWORD(v107) = v91 + v88;
          }

          *(_DWORD *)(a1 + 8) += v88;
          a2 = v102;
          if (v11)
          {
            int v97 = (void (**)(void *))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_193;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
            --qword_18C468B10;
            off_18C4653A8(v11);
            uint64_t v11 = (sqlite3_value **)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              int v97 = (void (**)(void *))&xmmword_18C465410;
LABEL_193:
              (*v97)(v11);
            }
          }

          uint64_t v11 = 0LL;
          if (!v102) {
            goto LABEL_28;
          }
LABEL_195:
          if ((int)v107 >= dword_18C54FB18)
          {
            uint64_t v19 = a2(a3, v106);
            LODWORD(v107) = 0;
            if ((_DWORD)v19) {
              goto LABEL_210;
            }
          }

          goto LABEL_28;
        }

        if (!v11)
        {
          if (sqlite3_initialize())
          {
            uint64_t v11 = 0LL;
LABEL_213:
            uint64_t v10 = 7LL;
            goto LABEL_5;
          }

          uint64_t v40 = (sqlite3_value **)sub_18126F0AC(16LL * v18);
          uint64_t v11 = v40;
          if (!v40) {
            goto LABEL_213;
          }
          bzero(v40, 16LL * v18);
        }

        LODWORD(v41) = HIDWORD(v107);
        uint64_t v42 = (int)v107;
        unsigned int v43 = v12;
        if ((int)v107 < SHIDWORD(v107))
        {
          uint64_t v44 = v106;
          goto LABEL_64;
        }

        if (HIDWORD(v107)) {
          int v53 = HIDWORD(v107);
        }
        else {
          int v53 = 128;
        }
        uint64_t v41 = v53;
        do
        {
          uint64_t v54 = v41;
          v41 *= 2LL;
        }

        while (v41 <= (int)v107);
        if (v54 <= 1073741695 || (uint64_t v41 = 2147483391LL, (int)v107 <= 2147483390))
        {
          uint64_t v55 = v106;
          if (!sqlite3_initialize())
          {
            uint64_t v44 = sub_18127D33C(v55, v41);
            if (v44)
            {
              uint64_t v106 = v44;
              HIDWORD(v107) = v41;
LABEL_64:
              uint64_t v45 = v42 + 1;
              *(_BYTE *)(v44 + v42) = 23;
              LODWORD(v107) = v42 + 1;
              char v46 = *(_BYTE *)(*(int *)(a1 + 8) + *(void *)(a1 + 16) + 1LL);
              if ((int)v42 + 1 < (int)v41)
              {
                uint64_t v47 = v106;
                goto LABEL_66;
              }

              if ((_DWORD)v41) {
                int v60 = v41;
              }
              else {
                int v60 = 128;
              }
              uint64_t v61 = v60;
              do
              {
                uint64_t v62 = v61;
                v61 *= 2LL;
              }

              while (v61 <= v45);
              if (v62 <= 1073741695 || (uint64_t v61 = 2147483391LL, (int)v42 <= 2147483389))
              {
                uint64_t v63 = v106;
                if (!sqlite3_initialize())
                {
                  uint64_t v47 = sub_18127D33C(v63, v61);
                  if (v47)
                  {
                    uint64_t v106 = v47;
                    HIDWORD(v107) = v61;
LABEL_66:
                    LODWORD(v107) = v42 + 2;
                    *(_BYTE *)(v47 + v45) = v46;
                  }
                }
              }
            }
          }
        }

        *(_DWORD *)(a1 + 8) += 2;
        unsigned int v108 = sub_1813BC054(a1, v18, 0LL, (uint64_t)v11, 0LL);
        if (!v108) {
          unsigned int v108 = sub_1813BC054(a1, v18, 0LL, (uint64_t)&v11[v18], 0LL);
        }
        BOOL v12 = v43;
        if (v18 >= 1)
        {
          uint64_t v64 = 0LL;
          uint64_t v65 = v18;
          do
          {
            if (v12[v64]) {
              int v66 = 0;
            }
            else {
              int v66 = v18;
            }
            sub_1813BC4F4((uint64_t)&v106, *(&v11[v64++] + v66), &v108);
          }

          while (v18 != v64);
          int32x4_t v67 = v12;
          int32x4_t v68 = v11;
          do
          {
            if (*v67++) {
              int32x4_t v69 = 0LL;
            }
            else {
              int32x4_t v69 = *v68;
            }
            sub_1813BC4F4((uint64_t)&v106, v69, &v108);
            ++v68;
            --v65;
          }

          while (v65);
          if (2 * v18 <= 1) {
            uint64_t v71 = 1LL;
          }
          else {
            uint64_t v71 = (2 * v18);
          }
          uint16x8_t v72 = (uint64_t *)v11;
          do
          {
            uint64_t v73 = *v72;
            if (*v72)
            {
              if ((*(_WORD *)(v73 + 20) & 0x9000) != 0 || *(_DWORD *)(v73 + 32)) {
                sub_181303838(*v72);
              }
              sub_1812F20DC(*(void **)(v73 + 24), (void *)v73);
            }

            ++v72;
            --v71;
          }

          while (v71);
        }

        bzero(v11, 16LL * v18);
        uint64_t v10 = v108;
        if (v108) {
          goto LABEL_5;
        }
        a2 = v102;
        if (!v102) {
          goto LABEL_28;
        }
        goto LABEL_195;
      }

      if (v22 != 9 && v22 != 18)
      {
LABEL_209:
        uint64_t v19 = sub_1812FBF50(234369);
LABEL_210:
        uint64_t v10 = v19;
        goto LABEL_5;
      }

      uint64_t v103 = v11;
      char v24 = *(_BYTE *)(v20 + v21 + 1);
      *(_DWORD *)(a1 + 8) = v20 + 2;
      uint64_t v25 = sub_1813BBF04(a1, v18, (int *)&v109);
      if (v22 == 9) {
        char v26 = 18;
      }
      else {
        char v26 = 9;
      }
      int v27 = v107;
      __int128 v104 = v12;
      if ((_DWORD)v25)
      {
        uint64_t v10 = v25;
        goto LABEL_41;
      }

      int v48 = HIDWORD(v107);
      if ((int)v107 >= SHIDWORD(v107))
      {
        if (!HIDWORD(v107)) {
          int v48 = 128;
        }
        uint64_t v56 = v48;
        do
        {
          uint64_t v57 = v56;
          v56 *= 2LL;
        }

        while (v56 <= (int)v107);
        if (v57 > 1073741695 && (uint64_t v56 = 2147483391LL, (int)v107 > 2147483390)
          || (uint64_t v58 = v106, sqlite3_initialize())
          || (uint64_t v49 = sub_18127D33C(v58, v56)) == 0)
        {
          uint64_t v10 = 7LL;
          unsigned int v108 = 7;
          goto LABEL_41;
        }

        uint64_t v106 = v49;
        HIDWORD(v107) = v56;
      }

      else
      {
        uint64_t v49 = v106;
      }

      uint64_t v50 = v27 + 1LL;
      LODWORD(v107) = v27 + 1;
      *(_BYTE *)(v49 + v27) = v26;
      int v51 = HIDWORD(v107);
      if (v27 + 1 < SHIDWORD(v107))
      {
        uint64_t v52 = v106;
LABEL_71:
        uint64_t v10 = 0LL;
        v27 += 2;
        LODWORD(v107) = v27;
        *(_BYTE *)(v52 + v50) = v24;
        goto LABEL_41;
      }

      if (!HIDWORD(v107)) {
        int v51 = 128;
      }
      uint64_t v74 = v51;
      do
      {
        uint64_t v75 = v74;
        v74 *= 2LL;
      }

      while (v74 <= v50);
      if (v75 <= 1073741695 || (uint64_t v74 = 2147483391LL, v27 <= 2147483389))
      {
        uint64_t v76 = v106;
        if (!sqlite3_initialize())
        {
          uint64_t v52 = sub_18127D33C(v76, v74);
          if (v52)
          {
            uint64_t v106 = v52;
            HIDWORD(v107) = v74;
            goto LABEL_71;
          }
        }

        uint64_t v10 = 7LL;
        unsigned int v108 = 7;
        ++v27;
      }

      else
      {
        uint64_t v10 = 7LL;
        ++v27;
      }

uint64_t sqlite3changeset_invert_strm( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  __int128 v9 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v12 = 0LL;
  uint64_t v4 = sub_1812EB95C((uint64_t)v8, a3, a4, 0LL, 0LL);
  uint64_t v5 = v9;
  if ((void)v9)
  {
    uint64_t v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v6)(v5);
      return v4;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    uint64_t v5 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return v4;
}

uint64_t sqlite3changeset_apply_v2( sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, _DWORD *a8, unsigned int a9)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v18 = sub_18126F0AC(152LL);
  if (!v18) {
    return 7LL;
  }
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 144) = 0LL;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 16) = a3;
  *(_DWORD *)(v18 + 24) = a2;
  *(void *)(v18 + 48) = 0LL;
  *(void *)(v18 + 56) = 0LL;
  *(_DWORD *)(v18 + 64) = 1;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;
  return sub_1812EC6A0(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1812EC6A0( sqlite3 *a1, uint64_t a2, unsigned int (*a3)(uint64_t, char *), uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, void *a6, _DWORD *a7, unsigned int a8)
{
  char v8 = a8;
  int v77 = 0LL;
  *(_DWORD *)a2 = 1;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  if (a6) {
    BOOL v11 = a7 == 0LL;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = !v11;
  BYTE9(v76) = v12;
  LODWORD(v74) = (a8 >> 1) & 1;
  BYTE10(v76) = (a8 & 4) != 0;
  if (!a1)
  {
    size_t v14 = "NULL";
    goto LABEL_18;
  }

  int v13 = *((unsigned __int8 *)a1 + 113);
  if (v13 == 186)
  {
LABEL_11:
    size_t v14 = "unopened";
    goto LABEL_18;
  }

  if (v13 != 118)
  {
    if (v13 == 109) {
      goto LABEL_11;
    }
    size_t v14 = "invalid";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1812CF36C(186024);
    char v61 = v8;
    if ((v8 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }

  uint64_t v15 = *((void *)a1 + 3);
  if (v15) {
    xmmword_18C465400(v15);
  }
  char v61 = v8;
  if ((v8 & 1) == 0)
  {
LABEL_19:
    uint64_t v16 = sqlite3_exec(a1, "SAVEPOINT changeset_apply", 0LL, 0LL, 0LL);
    if ((_DWORD)v16) {
      goto LABEL_21;
    }
  }

uint64_t sqlite3changeset_apply( sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v13 = sub_18126F0AC(152LL);
  if (!v13) {
    return 7LL;
  }
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(void *)(v13 + 144) = 0LL;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(void *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 24) = a2;
  *(void *)(v13 + 48) = 0LL;
  *(void *)(v13 + 56) = 0LL;
  *(_DWORD *)(v13 + 64) = 1;
  *(void *)(v13 + 92) = 0x100000000LL;
  return sub_1812EC6A0(a1, v13, a4, a5, a6, 0LL, 0LL, 0);
}

uint64_t sqlite3changeset_apply_v2_strm( sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, _DWORD *a8, unsigned int a9)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v18 = sub_18126F0AC(152LL);
  if (!v18) {
    return 7LL;
  }
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 144) = 0LL;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 48) = a2;
  *(void *)(v18 + 56) = a3;
  *(void *)(v18 + 16) = 0LL;
  *(_DWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 64) = a2 == 0;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;
  return sub_1812EC6A0(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sqlite3changeset_apply_strm( sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v13 = sub_18126F0AC(152LL);
  if (!v13) {
    return 7LL;
  }
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(void *)(v13 + 144) = 0LL;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(void *)(v13 + 16) = 0LL;
  *(_DWORD *)(v13 + 24) = 0;
  *(void *)(v13 + 48) = a2;
  *(void *)(v13 + 56) = a3;
  *(_DWORD *)(v13 + 64) = a2 == 0;
  *(void *)(v13 + 92) = 0x100000000LL;
  return sub_1812EC6A0(a1, v13, a4, a5, a6, 0LL, 0LL, 0);
}

uint64_t sqlite3changegroup_new(void *a1)
{
  if (sqlite3_initialize())
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v2 = (void *)sub_18126F0AC(16LL);
    if (v2)
    {
      uint64_t v3 = 0LL;
      *uint64_t v2 = 0LL;
      v2[1] = 0LL;
      goto LABEL_6;
    }
  }

  uint64_t v3 = 7LL;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3changegroup_add(uint64_t a1, int a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_18126F0AC(152LL);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0LL;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(void *)(v8 + 48) = 0LL;
      *(void *)(v8 + 56) = 0LL;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1812ED414(v8, a1, 0);
      goto LABEL_6;
    }
  }

  uint64_t v7 = 7LL;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sub_1812ED414(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = 0LL;
  uint64_t v144 = (uint64_t *)(a2 + 8);
  uint64_t v140 = a2;
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 88);
    if (!*v144)
    {
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_7;
    }

    if (v6 != *(_DWORD *)(a2 + 4)) {
      return 1LL;
    }
LABEL_7:
    int v8 = *(_DWORD *)(a1 + 120);
    int v7 = *(_DWORD *)(a1 + 124);
    __int128 v9 = *(const char **)(a1 + 112);
    int v143 = *(_DWORD *)(a1 + 128);
    if (v5)
    {
      uint64_t v10 = *(unsigned __int8 **)(v5 + 8);
      if (v9)
      {
        if (v10)
        {
          for (uint64_t i = *(_BYTE **)(a1 + 112); ; ++i)
          {
            uint64_t v12 = *i;
            uint64_t v13 = *v10;
            if ((_DWORD)v12 == (_DWORD)v13)
            {
              if (!*i) {
                goto LABEL_40;
              }
            }

            else if (byte_1813C6343[v12] != byte_1813C6343[v13])
            {
              break;
            }

            ++v10;
          }
        }
      }

      else if (!v10)
      {
        goto LABEL_40;
      }
    }

    size_t v14 = strlen(v9);
    size_t v15 = v14;
    uint64_t v16 = *(const void **)(a1 + 136);
    if (v9) {
      int v17 = -1;
    }
    else {
      int v17 = 0;
    }
    uint64_t v5 = (uint64_t)v144;
    while (1)
    {
      uint64_t v5 = *(void *)v5;
      if (!v5)
      {
        if (!sqlite3_initialize())
        {
          size_t v57 = v15 << 32;
          uint64_t v58 = sub_18126F0AC(v8 + (uint64_t)(int)v15 + 65);
          if (v58)
          {
            uint64_t v5 = v58;
            *(_OWORD *)(v58 + 32) = 0u;
            *(_OWORD *)(v58 + 48) = 0u;
            *(_OWORD *)uint64_t v58 = 0u;
            *(_OWORD *)(v58 + 16) = 0u;
            *(_DWORD *)(v58 + 16) = v8;
            uint64_t v59 = v58 + 64;
            *(void *)(v58 + 40) = v58 + 64;
            memcpy((void *)(v58 + 64), v16, v8);
            *(void *)(v5 + 8) = v59 + v8;
            memcpy((void *)(v59 + v8), v9, (uint64_t)(v57 + 0x100000000LL) >> 32);
            int v60 = v144;
            do
            {
              char v61 = v60;
              int v60 = (uint64_t *)*v60;
            }

            while (v60);
            *char v61 = v5;
            a2 = v140;
            goto LABEL_40;
          }
        }

        return 7LL;
      }

      int v20 = *(_BYTE **)(v5 + 8);
      if (v20) {
        int v19 = 1;
      }
      else {
        int v19 = v17;
      }
      if (v20) {
        BOOL v21 = v9 == 0LL;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        if ((_DWORD)v14 == -1) {
          goto LABEL_38;
        }
        int v22 = v14 + 2;
        int v23 = *(unsigned __int8 **)(a1 + 112);
        while (1)
        {
          uint64_t v24 = *v20;
          if (!*v20) {
            break;
          }
          LODWORD(v24) = byte_1813C6343[v24];
          int v18 = byte_1813C6343[*v23];
          if ((_DWORD)v24 != v18) {
            goto LABEL_22;
          }
          ++v20;
          ++v23;
        }

        int v18 = byte_1813C6343[*v23];
LABEL_22:
        int v19 = v24 - v18;
      }

      if (!v19) {
        goto LABEL_38;
      }
    }

    sub_1812CF36C(35844);
LABEL_38:
LABEL_40:
    if (sub_1813B97A8(0LL, *(_DWORD *)(a1 + 88), v5)) {
      return 7LL;
    }
    if (*(_DWORD *)(a1 + 88)) {
      BOOL v25 = v7 == 9;
    }
    else {
      BOOL v25 = 0;
    }
    int v26 = v25;
    int v27 = sub_1813BA254(v5, v26, (unsigned __int8 *)__s2, *(_DWORD *)(v5 + 52));
    uint64_t v28 = *(void *)(v5 + 56) + 8LL * v27;
    uint64_t v29 = *(char ***)v28;
    int v142 = v27;
    if (!*(void *)v28)
    {
LABEL_53:
      uint64_t v34 = (char *)__s2;
      int v35 = v145;
      if (sqlite3_initialize()) {
        return 7LL;
      }
      uint64_t v36 = sub_18126F0AC(v35 + 32LL);
      if (!v36) {
        return 7LL;
      }
      int v33 = (char **)v36;
      *(_OWORD *)uint64_t v36 = 0u;
      *(_OWORD *)(v36 + 16) = 0u;
      *(_BYTE *)uint64_t v36 = v7;
      *(_BYTE *)(v36 + 1) = v143;
      uint64_t v37 = (_BYTE *)(v36 + 32);
      *(void *)(v36 + 16) = v36 + 32;
      if (a3 && v143)
      {
        if (*(int *)(v5 + 16) < 1)
        {
          LODWORD(v52) = v36 + 32;
        }

        else
        {
          uint64_t v38 = 0LL;
          do
          {
            int v40 = *v34;
            if (*v34)
            {
              int v39 = 1;
              if (v40 != 5 && v40 != 255)
              {
                if ((v40 - 1) < 2)
                {
                  int v39 = 9;
                }

                else
                {
                  int v41 = v34[1];
                  if ((v41 & 0x80) != 0)
                  {
                    int v43 = v34[2];
                    if (v34[2] < 0)
                    {
                      int v44 = v34[3];
                      if (v44 < 0)
                      {
                        char v45 = sub_18129BD74(v34 + 1, &v148);
                        if (HIDWORD(v148)) {
                          int v41 = -1;
                        }
                        else {
                          int v41 = v148;
                        }
                        int v42 = (v45 + 1);
                      }

                      else
                      {
                        int v41 = v44 & 0x7F | (v41 << 14) & 0x1FC07F | ((v43 & 0x7F) << 7);
                        int v42 = 4;
                      }
                    }

                    else
                    {
                      int v41 = ((v41 & 0x7F) << 7) | v43;
                      int v42 = 3;
                    }
                  }

                  else
                  {
                    int v42 = 2;
                  }

                  int v39 = v42 + v41;
                }
              }

              if (*(_BYTE *)(*(void *)(v5 + 40) + v38))
              {
                memcpy(v37, v34, v39);
                v37 += v39;
              }

              else
              {
                *v37++ = -1;
              }
            }

            else
            {
              *v37++ = 0;
              int v39 = 1;
            }

            v34 += v39;
            ++v38;
          }

          while (v38 < *(int *)(v5 + 16));
          uint64_t v52 = v33[2];
        }

        *((_DWORD *)v33 + 2) = (_DWORD)v37 - (_DWORD)v52;
      }

      else
      {
        *(_DWORD *)(v36 + 8) = v35;
        memcpy((void *)(v36 + 32), v34, v35);
      }

      goto LABEL_189;
    }

    while (1)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        BOOL v30 = *(unsigned __int8 *)v29 == 9;
        BOOL v31 = v7 == 9;
      }

      else
      {
        BOOL v30 = 0;
        BOOL v31 = 0;
      }

      int v32 = sub_1813BE67C(v5, v30, v29[2], v31, (char *)__s2);
      int v33 = *(char ***)v28;
      uint64_t v29 = *(char ***)(*(void *)v28 + 24LL);
      if (v32) {
        break;
      }
      uint64_t v28 = *(void *)v28 + 24LL;
      if (!v29) {
        goto LABEL_53;
      }
    }

    *(void *)uint64_t v28 = v29;
    --*(_DWORD *)(v5 + 48);
    uint64_t v46 = (char *)__s2;
    size_t v47 = v145;
    int v48 = *(unsigned __int8 *)v33;
    if (a3)
    {
      if (v48 != 9 || !*((_BYTE *)v33 + 1))
      {
        uint64_t v49 = *((int *)v33 + 2);
        if (sqlite3_initialize())
        {
          uint64_t v50 = 0LL;
          int v51 = 0;
          uint64_t v132 = 7LL;
          goto LABEL_181;
        }

        uint64_t v62 = v49 + v47 + 32;
        uint64_t v63 = (_DWORD *)sub_18126F0AC(v62);
        uint64_t v50 = v63;
        if (v63)
        {
          uint64_t v64 = v33[2];
          bzero(v63, v62);
          int v65 = v143;
          if (v143) {
            BOOL v66 = 1;
          }
          else {
            BOOL v66 = *((_BYTE *)v33 + 1) != 0;
          }
          a2 = v140;
          __int128 v73 = v46;
          *((_BYTE *)v50 + 1) = v66;
          *(_BYTE *)uint64_t v50 = v7;
          __int128 v74 = v50 + 8;
          *((void *)v50 + 2) = v50 + 8;
          if (*(int *)(v5 + 16) >= 1)
          {
            __srca = v50;
            uint64_t v75 = 0LL;
            while (1)
            {
              int v76 = *v64;
              int v77 = 1;
              if (*v64) {
                BOOL v78 = v76 == 5;
              }
              else {
                BOOL v78 = 1;
              }
              if (!v78 && v76 != 255)
              {
                if ((v76 - 1) >= 2)
                {
                  int v79 = v64[1];
                  if ((v79 & 0x80) != 0)
                  {
                    int v81 = v64[2];
                    if (v64[2] < 0)
                    {
                      int v82 = v64[3];
                      if (v82 < 0)
                      {
                        uint64_t v83 = v73;
                        uint64_t v84 = v74;
                        char v85 = sub_18129BD74(v64 + 1, &v148);
                        __int128 v74 = v84;
                        __int128 v73 = v83;
                        int v65 = v143;
                        if (HIDWORD(v148)) {
                          int v79 = -1;
                        }
                        else {
                          int v79 = v148;
                        }
                        int v80 = (v85 + 1);
                      }

                      else
                      {
                        int v79 = v82 & 0x7F | (v79 << 14) & 0x1FC07F | ((v81 & 0x7F) << 7);
                        int v80 = 4;
                      }
                    }

                    else
                    {
                      int v79 = ((v79 & 0x7F) << 7) | v81;
                      int v80 = 3;
                    }
                  }

                  else
                  {
                    int v80 = 2;
                  }

                  int v77 = v80 + v79;
                }

                else
                {
                  int v77 = 9;
                }
              }

              int v86 = *v73;
              int v87 = 1;
              if (*v73) {
                BOOL v88 = v86 == 5;
              }
              else {
                BOOL v88 = 1;
              }
              if (v88 || v86 == 255) {
                goto LABEL_159;
              }
              int v92 = v73[1];
              if ((v92 & 0x80) != 0)
              {
                int v95 = v73[2];
                if (v73[2] < 0)
                {
                  int v96 = v73[3];
                  if (v96 < 0)
                  {
                    unsigned int v139 = v73;
                    int v97 = v74;
                    char v98 = sub_18129BD74(v73 + 1, &v148);
                    __int128 v74 = v97;
                    __int128 v73 = v139;
                    int v65 = v143;
                    if (HIDWORD(v148)) {
                      int v92 = -1;
                    }
                    else {
                      int v92 = v148;
                    }
                    int v93 = (v98 + 1);
                  }

                  else
                  {
                    int v92 = v96 & 0x7F | (v92 << 14) & 0x1FC07F | ((v95 & 0x7F) << 7);
                    int v93 = 4;
                  }
                }

                else
                {
                  int v92 = ((v92 & 0x7F) << 7) | v95;
                  int v93 = 3;
                }
              }

              else
              {
                int v93 = 2;
              }

              int v87 = v93 + v92;
              if (v76 == 255) {
                goto LABEL_132;
              }
LABEL_160:
              if (!v65 || *(_BYTE *)(*(void *)(v5 + 40) + v75))
              {
                int v138 = v73;
                if (v86)
                {
                  size_t v89 = v87;
                  uint64_t v90 = v74;
                  uint64_t v91 = v73;
                }

                else
                {
                  size_t v89 = v77;
                  uint64_t v90 = v74;
                  uint64_t v91 = v64;
                }

                uint64_t v94 = v74;
                memcpy(v90, v91, v89);
                __int128 v73 = v138;
                __int128 v74 = &v94[v89];
                int v65 = v143;
                goto LABEL_133;
              }

LABEL_128:
            sub_1813BE9E0((void **)&v147, *(_DWORD *)(v5 + 16), __src, v71);
            goto LABEL_264;
          }

          if (v48 == 9)
          {
            *(_BYTE *)uint64_t v68 = 23;
            if (!v137)
            {
              a2 = v140;
LABEL_236:
              uint64_t v122 = &off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v50);
                --qword_18C468B10;
                off_18C4653A8(v50);
                uint64_t v50 = (_DWORD *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v122 = &xmmword_18C465410;
                  goto LABEL_241;
                }
              }

              else
              {
LABEL_241:
                (*v122)(v50);
                uint64_t v50 = 0LL;
              }

      LODWORD(v58) = v44 - (v26 != 0LL) - (v19 != 0LL);
      char v45 = (__int16)v45;
      goto LABEL_209;
    }

    int v40 = v91 | 0x22;
    *(_DWORD *)(v10 + 48) = v91 | 0x22;
    *(_WORD *)(v10 + 26) = v90;
    if ((v19[9] & 0x100) != 0)
    {
      if (!sub_1813355D4((void *)v127, v10, *(unsigned __int16 *)(v10 + 52) + 1))
      {
        LOWORD(v43) = 0;
        int v92 = *(void *)(v10 + 64);
        int v93 = *(unsigned __int16 *)(v10 + 52);
        *(_WORD *)(v10 + 52) = v93 + 1;
        int v129 = v19 + 28;
        *(void *)(v92 + 8 * v93) = v19 + 28;
        int v40 = *(_DWORD *)(v10 + 48) | 0x10;
        *(_DWORD *)(v10 + 48) = v40;
        *(_WORD *)(v10 + 28) = 1;
        int v26 = v19;
        if ((v40 & 2) == 0) {
          goto LABEL_203;
        }
        goto LABEL_69;
      }

                  int v65 = (void *)v65[10];
                  if (!v65) {
                    goto LABEL_157;
                  }
                  goto LABEL_129;
                }
              }

              else if (byte_1813C6343[v70] != byte_1813C6343[v71])
              {
                goto LABEL_141;
              }
            }
          }
        }

        else if (byte_1813C6343[v58] != byte_1813C6343[v59])
        {
          goto LABEL_124;
        }
      }
    }

    BOOL v31 = *((unsigned __int8 *)v98 + 63);
    if (v31 != 2)
    {
      if (v31 == 1) {
        goto LABEL_85;
      }
      uint64_t v38 = v98[9];
      if (!v38) {
        goto LABEL_85;
      }
      int v39 = DWORD2(v93);
      int v40 = (void *)v93;
LABEL_72:
      int v41 = *(void *)(v38 + 16);
      if (!v41) {
        goto LABEL_71;
      }
      for (uint64_t k = 0LL; ; ++k)
      {
        int v43 = *(unsigned __int8 *)(v41 + k);
        int v44 = v14[k];
        if ((_DWORD)v43 == (_DWORD)v44)
        {
          if (!*(_BYTE *)(v41 + k))
          {
            char v45 = v101;
            if (v101)
            {
              uint64_t v46 = &v101;
              if (*v101 != v41)
              {
                do
                {
                  size_t v47 = v45;
                  char v45 = (void *)v45[3];
                  if (!v45) {
                    goto LABEL_71;
                  }
                }

                while (*v45 != v41);
                uint64_t v46 = v47 + 3;
              }

              *uint64_t v46 = v45[3];
              v45[3] = v40;
              *(void *)&int v93 = v45;
              DWORD2(v93) = ++v39;
              int v40 = v45;
            }

uint64_t sqlite3changegroup_output(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v36 = 0;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    if (a3)
    {
      uint64_t v28 = 0LL;
      goto LABEL_55;
    }

    return 0LL;
  }

  BOOL v31 = a2;
  int v32 = a3;
  do
  {
    if (*(_DWORD *)(v3 + 48))
    {
      sub_1813BA4C8((uint64_t)&v34, *(_DWORD *)(a1 + 4), v3, &v36);
      int v4 = *(_DWORD *)(v3 + 52);
      uint64_t v5 = v36;
      if (v4 >= 1)
      {
        uint64_t v6 = 0LL;
        uint64_t v7 = v34;
        while (1)
        {
          int v8 = *(char **)(*(void *)(v3 + 56) + 8 * v6);
          if (v8) {
            break;
          }
LABEL_7:
          unsigned int v36 = v5;
          uint64_t v34 = v7;
          if (++v6 >= v4) {
            goto LABEL_48;
          }
        }

        while (1)
        {
          if ((_DWORD)v5) {
            goto LABEL_12;
          }
          char v9 = *v8;
          int v10 = HIDWORD(v35);
          uint64_t v11 = (int)v35;
          if ((int)v35 >= SHIDWORD(v35))
          {
            if (!HIDWORD(v35)) {
              int v10 = 128;
            }
            uint64_t v22 = v10;
            do
            {
              uint64_t v23 = v22;
              v22 *= 2LL;
            }

            while (v22 <= (int)v35);
            if (v23 > 1073741695)
            {
              uint64_t v22 = 2147483391LL;
            }

            if (sqlite3_initialize()) {
              goto LABEL_11;
            }
            uint64_t v27 = sub_18127D33C(v7, v22);
            if (!v27) {
              goto LABEL_11;
            }
            HIDWORD(v35) = v22;
            uint64_t v7 = v27;
          }

          uint64_t v12 = v11 + 1;
          LODWORD(v35) = v11 + 1;
          *(_BYTE *)(v7 + v11) = v9;
          char v13 = v8[1];
          int v14 = HIDWORD(v35);
          if (!HIDWORD(v35)) {
            int v14 = 128;
          }
          uint64_t v24 = v14;
          do
          {
            uint64_t v25 = v24;
            v24 *= 2LL;
          }

          while (v24 <= v12);
          if (v25 <= 1073741695 || (uint64_t v24 = 2147483391LL, (int)v11 <= 2147483389))
          {
            if (!sqlite3_initialize())
            {
              uint64_t v26 = sub_18127D33C(v7, v24);
              if (v26)
              {
                HIDWORD(v35) = v24;
                uint64_t v7 = v26;
LABEL_16:
                LODWORD(v35) = v11 + 2;
                *(_BYTE *)(v7 + v12) = v13;
                size_t v15 = *((unsigned int *)v8 + 2);
                if ((int)v15 < 1)
                {
                  uint64_t v5 = 0LL;
                  goto LABEL_12;
                }

                uint64_t v16 = (int)v35;
                uint64_t v17 = (int)v35 + v15;
                int v18 = (const void *)*((void *)v8 + 2);
                if (v17 <= SHIDWORD(v35)) {
                  goto LABEL_27;
                }
                if (HIDWORD(v35)) {
                  uint64_t v19 = SHIDWORD(v35);
                }
                else {
                  uint64_t v19 = 128LL;
                }
                do
                {
                  uint64_t v20 = v19;
                  v19 *= 2LL;
                }

                while (v19 < v17);
                if (v20 <= 1073741695 || (uint64_t v19 = 2147483391LL, v17 <= 2147483391))
                {
                  if (!sqlite3_initialize())
                  {
                    uint64_t v21 = sub_18127D33C(v7, v19);
                    if (v21)
                    {
                      HIDWORD(v35) = v19;
                      uint64_t v7 = v21;
LABEL_27:
                      memcpy((void *)(v7 + v16), v18, v15);
                      uint64_t v5 = 0LL;
                      LODWORD(v35) = v16 + v15;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
          }

uint64_t sqlite3changegroup_add_strm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_18126F0AC(152LL);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0LL;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = 0LL;
      *(_DWORD *)(v8 + 24) = 0;
      *(void *)(v8 + 48) = a2;
      *(void *)(v8 + 56) = a3;
      *(_DWORD *)(v8 + 64) = a2 == 0;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1812ED414(v8, a1, 0);
      goto LABEL_6;
    }
  }

  uint64_t v7 = 7LL;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3changegroup_output_strm(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unsigned int v37 = 0;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = 0LL;
    while (1)
    {
      if (*(_DWORD *)(v3 + 48))
      {
        sub_1813BA4C8((uint64_t)&v35, *(_DWORD *)(a1 + 4), v3, &v37);
        int v5 = *(_DWORD *)(v3 + 52);
        uint64_t v4 = v37;
        if (v5 >= 1)
        {
          uint64_t v6 = 0LL;
          uint64_t v7 = v35;
          while (1)
          {
            char v9 = *(char **)(*(void *)(v3 + 56) + 8 * v6);
            if (v9) {
              break;
            }
LABEL_7:
            unsigned int v37 = v4;
            uint64_t v35 = v7;
            ++v6;
            int v8 = v4;
            if (v6 >= v5) {
              goto LABEL_51;
            }
          }

          while (2)
          {
            if ((_DWORD)v4) {
              goto LABEL_12;
            }
            char v10 = *v9;
            int v11 = HIDWORD(v36);
            uint64_t v12 = (int)v36;
            if (!HIDWORD(v36)) {
              int v11 = 128;
            }
            uint64_t v23 = v11;
            do
            {
              uint64_t v24 = v23;
              v23 *= 2LL;
            }

            while (v23 <= (int)v36);
            if (v24 <= 1073741695 || (uint64_t v23 = 2147483391LL, (int)v36 <= 2147483390))
            {
              if (!sqlite3_initialize())
              {
                uint64_t v28 = sub_18127D33C(v7, v23);
                if (v28)
                {
                  HIDWORD(v36) = v23;
                  uint64_t v7 = v28;
LABEL_15:
                  uint64_t v13 = v12 + 1;
                  LODWORD(v36) = v12 + 1;
                  *(_BYTE *)(v7 + v12) = v10;
                  char v14 = v9[1];
                  int v15 = HIDWORD(v36);
                  if ((int)v12 + 1 >= SHIDWORD(v36))
                  {
                    if (!HIDWORD(v36)) {
                      int v15 = 128;
                    }
                    uint64_t v25 = v15;
                    do
                    {
                      uint64_t v26 = v25;
                      v25 *= 2LL;
                    }

                    while (v25 <= v13);
                    if (v26 <= 1073741695 || (uint64_t v25 = 2147483391LL, (int)v12 <= 2147483389))
                    {
                      if (!sqlite3_initialize())
                      {
                        uint64_t v27 = sub_18127D33C(v7, v25);
                        if (v27)
                        {
                          HIDWORD(v36) = v25;
                          uint64_t v7 = v27;
                          goto LABEL_16;
                        }
                      }
                    }
                  }

                  else
                  {
LABEL_16:
                    LODWORD(v36) = v12 + 2;
                    *(_BYTE *)(v7 + v13) = v14;
                    size_t v16 = *((unsigned int *)v9 + 2);
                    uint64_t v17 = (int)v36;
                    uint64_t v18 = (int)v36 + v16;
                    uint64_t v19 = (const void *)*((void *)v9 + 2);
                    if (v18 <= SHIDWORD(v36)) {
                      goto LABEL_27;
                    }
                    if (HIDWORD(v36)) {
                      uint64_t v20 = SHIDWORD(v36);
                    }
                    else {
                      uint64_t v20 = 128LL;
                    }
                    do
                    {
                      uint64_t v21 = v20;
                      v20 *= 2LL;
                    }

                    while (v20 < v18);
                    if (v21 <= 1073741695 || (uint64_t v20 = 2147483391LL, v18 <= 2147483391))
                    {
                      if (!sqlite3_initialize())
                      {
                        uint64_t v22 = sub_18127D33C(v7, v20);
                        if (v22)
                        {
                          HIDWORD(v36) = v20;
                          uint64_t v7 = v22;
LABEL_27:
                          memcpy((void *)(v7 + v17), v19, v16);
                          LODWORD(v36) = v17 + v16;
LABEL_28:
                          if (a2 && (int)v36 >= dword_18C54FB18)
                          {
                            uint64_t v4 = a2(a3, v7);
                            LODWORD(v36) = 0;
                          }

                          else
                          {
                            uint64_t v4 = 0LL;
                          }

uint64_t sqlite3changegroup_delete(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1812E9958(0LL, *(uint64_t **)(result + 8));
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sqlite3changeset_concat(int a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  char v14 = (void *)sub_18126F0AC(16LL);
  if (!v14) {
    return 7LL;
  }
  uint64_t v15 = (uint64_t)v14;
  void *v14 = 0LL;
  v14[1] = 0LL;
  if (!sqlite3_initialize())
  {
    uint64_t v17 = sub_18126F0AC(152LL);
    if (v17)
    {
      uint64_t v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(void *)(v17 + 144) = 0LL;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(void *)(v17 + 16) = a2;
      *(_DWORD *)(v17 + 24) = a1;
      *(void *)(v17 + 48) = 0LL;
      *(void *)(v17 + 56) = 0LL;
      *(_DWORD *)(v17 + 64) = 1;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      uint64_t v12 = sub_1812ED414(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if ((_DWORD)v12) {
        goto LABEL_7;
      }
      if (!sqlite3_initialize())
      {
        uint64_t v19 = sub_18126F0AC(152LL);
        if (v19)
        {
          uint64_t v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(void *)(v19 + 144) = 0LL;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(void *)(v19 + 16) = a4;
          *(_DWORD *)(v19 + 24) = a3;
          *(void *)(v19 + 48) = 0LL;
          *(void *)(v19 + 56) = 0LL;
          *(_DWORD *)(v19 + 64) = 1;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          uint64_t v12 = sub_1812ED414(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!(_DWORD)v12) {
            uint64_t v12 = sqlite3changegroup_output(v15, a5, a6);
          }
          goto LABEL_7;
        }
      }
    }
  }

  sqlite3changeset_finalize(0LL);
  uint64_t v12 = 7LL;
LABEL_7:
  sub_1812E9958(0LL, *(uint64_t **)(v15 + 8));
  size_t v16 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
  --qword_18C468B10;
  off_18C4653A8(v15);
  uint64_t v15 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    size_t v16 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_12;
  }

  return v12;
}

uint64_t sqlite3changeset_concat_strm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  char v14 = (void *)sub_18126F0AC(16LL);
  if (!v14) {
    return 7LL;
  }
  uint64_t v15 = (uint64_t)v14;
  void *v14 = 0LL;
  v14[1] = 0LL;
  if (!sqlite3_initialize())
  {
    uint64_t v17 = sub_18126F0AC(152LL);
    if (v17)
    {
      uint64_t v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(void *)(v17 + 144) = 0LL;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(void *)(v17 + 16) = 0LL;
      *(_DWORD *)(v17 + 24) = 0;
      *(void *)(v17 + 48) = a1;
      *(void *)(v17 + 56) = a2;
      *(_DWORD *)(v17 + 64) = a1 == 0;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      uint64_t v12 = sub_1812ED414(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if ((_DWORD)v12) {
        goto LABEL_7;
      }
      if (!sqlite3_initialize())
      {
        uint64_t v19 = sub_18126F0AC(152LL);
        if (v19)
        {
          uint64_t v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(void *)(v19 + 144) = 0LL;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(void *)(v19 + 16) = 0LL;
          *(_DWORD *)(v19 + 24) = 0;
          *(void *)(v19 + 48) = a3;
          *(void *)(v19 + 56) = a4;
          *(_DWORD *)(v19 + 64) = a3 == 0;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          uint64_t v12 = sub_1812ED414(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!(_DWORD)v12) {
            uint64_t v12 = sqlite3changegroup_output_strm(v15, a5, a6);
          }
          goto LABEL_7;
        }
      }
    }
  }

  sqlite3changeset_finalize(0LL);
  uint64_t v12 = 7LL;
LABEL_7:
  sub_1812E9958(0LL, *(uint64_t **)(v15 + 8));
  size_t v16 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
  --qword_18C468B10;
  off_18C4653A8(v15);
  uint64_t v15 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    size_t v16 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_12;
  }

  return v12;
}

uint64_t sqlite3rebaser_create(void *a1)
{
  if (sqlite3_initialize())
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v2 = (void *)sub_18126F0AC(16LL);
    if (v2)
    {
      uint64_t v3 = 0LL;
      *uint64_t v2 = 0LL;
      v2[1] = 0LL;
      goto LABEL_6;
    }
  }

  uint64_t v3 = 7LL;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3rebaser_configure(uint64_t a1, int a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_18126F0AC(152LL);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0LL;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(void *)(v8 + 48) = 0LL;
      *(void *)(v8 + 56) = 0LL;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1812ED414(v8, a1, 1);
      goto LABEL_6;
    }
  }

  uint64_t v7 = 7LL;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3rebaser_rebase(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v11 = sub_18126F0AC(152LL);
  if (!v11) {
    return 7LL;
  }
  uint64_t v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(void *)(v11 + 144) = 0LL;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 16) = a3;
  *(_DWORD *)(v11 + 24) = a2;
  *(void *)(v11 + 48) = 0LL;
  *(void *)(v11 + 56) = 0LL;
  *(_DWORD *)(v11 + 64) = 1;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  uint64_t v13 = sub_1812EF09C(a1, v11, 0LL, 0LL, a4, a5);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sub_1812EF09C( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v8 = 0LL;
  unsigned int v207 = 0;
  uint64_t v205 = 0LL;
  __s1 = 0LL;
  uint64_t v9 = a1 + 8;
  uint64_t v203 = 0LL;
  uint64_t v204 = 0LL;
  uint64_t v201 = a1 + 8;
  while (2)
  {
    if (sub_1812EADB4(a2, &__s1, (int *)&v205 + 1, &v205) != 100)
    {
      if (a3)
      {
        uint64_t v190 = v203;
        if ((int)v204 >= 1)
        {
          unsigned int v207 = a3(a4, v203);
          uint64_t v190 = v203;
        }
      }

      else
      {
        uint64_t v190 = v203;
        if (a6)
        {
          *a6 = v203;
          *a5 = v204;
          return v207;
        }
      }

      if (!v190) {
        return v207;
      }
      int v193 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v190);
        --qword_18C468B10;
        off_18C4653A8(v190);
        uint64_t v190 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return v207;
        }
        int v193 = &xmmword_18C465410;
      }

      (*v193)(v190);
      return v207;
    }

    if ((_DWORD)v205)
    {
      uint64_t v11 = *(void *)(a2 + 112);
      if (v11) {
        int v12 = -1;
      }
      else {
        int v12 = 0;
      }
      uint64_t v8 = v9;
      do
      {
        uint64_t v8 = *(void *)v8;
        if (!v8) {
          break;
        }
        uint64_t v13 = *(_BYTE **)(v8 + 8);
        if (v13) {
          int v14 = 1;
        }
        else {
          int v14 = v12;
        }
        if (v13) {
          BOOL v15 = v11 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          for (uint64_t i = *(unsigned __int8 **)(a2 + 112); ; ++i)
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *i;
            if ((_DWORD)v17 == (_DWORD)v18)
            {
              if (!*v13) {
                goto LABEL_25;
              }
            }

            else if (byte_1813C6343[v17] != byte_1813C6343[v18])
            {
              int v14 = 1;
              break;
            }

            ++v13;
          }
        }
      }

      while (v14);
LABEL_25:
      LODWORD(v205) = 0;
      if (*(_DWORD *)(a2 + 88))
      {
        unsigned int v207 = 1;
      }

      else
      {
        int v20 = v204;
        int v21 = HIDWORD(v204);
        uint64_t v22 = (int)v204;
        if ((int)v204 >= SHIDWORD(v204))
        {
          if (!HIDWORD(v204)) {
            int v21 = 128;
          }
          uint64_t v24 = v21;
          do
          {
            uint64_t v25 = v24;
            v24 *= 2LL;
          }

          while (v24 <= (int)v204);
          if (v25 > 1073741695 && (uint64_t v24 = 2147483391LL, (int)v204 > 2147483390)
            || (uint64_t v26 = v203, sqlite3_initialize())
            || (uint64_t v23 = sub_18127D33C(v26, v24)) == 0)
          {
            unsigned int v207 = 7;
            goto LABEL_39;
          }

          uint64_t v203 = v23;
          HIDWORD(v204) = v24;
          int v20 = v204;
          uint64_t v22 = (int)v204;
        }

        else
        {
          uint64_t v23 = v203;
        }

        LODWORD(v204) = v20 + 1;
        *(_BYTE *)(v23 + v22) = 84;
      }

LABEL_297:
          int v180 = 0;
          unsigned int v207 = 7;
LABEL_337:
          size_t v55 = HIDWORD(v205);
          if (SHIDWORD(v205) >= 1 && v180)
          {
            int v82 = __s1;
            uint64_t v56 = (int)v204;
            int64_t v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204)) {
                uint64_t v83 = SHIDWORD(v204);
              }
              else {
                uint64_t v83 = 128LL;
              }
              do
              {
                uint64_t v84 = v83;
                v83 *= 2LL;
              }

              while (v83 < v57);
LABEL_119:
              if (v84 <= 1073741695 || (uint64_t v83 = 2147483391LL, v57 <= 2147483391))
              {
                uint64_t v85 = v203;
                if (!sqlite3_initialize())
                {
                  uint64_t v113 = sub_18127D33C(v85, v83);
                  if (v113)
                  {
                    uint64_t v203 = v113;
                    HIDWORD(v204) = v83;
                    uint64_t v56 = (int)v204;
LABEL_346:
                    memcpy((void *)(v113 + v56), v82, v55);
                    LODWORD(v204) = v204 + v55;
                    goto LABEL_347;
                  }
                }
              }

LABEL_347:
          int v10 = v207;
          if (!a3) {
            goto LABEL_3;
          }
          goto LABEL_348;
        }

        goto LABEL_70;
      }

      if (*(_BYTE *)v44 != 18) {
        goto LABEL_347;
      }
      int v104 = v204;
      int v105 = HIDWORD(v204);
      uint64_t v106 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v105 = 128;
        }
        uint64_t v122 = v105;
        do
        {
          uint64_t v123 = v122;
          v122 *= 2LL;
        }

        while (v122 <= (int)v204);
        if (v123 > 1073741695 && (uint64_t v122 = 2147483391LL, (int)v204 > 2147483390)
          || (uint64_t v124 = v203, sqlite3_initialize())
          || (uint64_t v107 = sub_18127D33C(v124, v122)) == 0)
        {
          unsigned int v207 = 7;
LABEL_287:
          int v172 = *(_DWORD *)(a2 + 120);
          unsigned int v173 = *(char **)(v44 + 16);
          int v174 = *(_DWORD *)(v44 + 8);
          int v175 = (char *)__s1;
          int v176 = HIDWORD(v205);
          goto LABEL_326;
        }

        uint64_t v203 = v107;
        HIDWORD(v204) = v122;
        int v104 = v204;
        uint64_t v106 = (int)v204;
      }

      else
      {
        uint64_t v107 = v203;
      }

      LODWORD(v204) = v104 + 1;
      *(_BYTE *)(v107 + v106) = 9;
      int v108 = *(_DWORD *)(a2 + 128);
      int v109 = v204;
      int v110 = HIDWORD(v204);
      uint64_t v111 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v110 = 128;
        }
        uint64_t v169 = v110;
        do
        {
          uint64_t v170 = v169;
          v169 *= 2LL;
        }

        while (v169 <= (int)v204);
        if (v170 > 1073741695 && (uint64_t v169 = 2147483391LL, (int)v204 > 2147483390)
          || (uint64_t v171 = v203, sqlite3_initialize())
          || (uint64_t v112 = sub_18127D33C(v171, v169)) == 0)
        {
          unsigned int v207 = 7;
          goto LABEL_286;
        }

        uint64_t v203 = v112;
        HIDWORD(v204) = v169;
        int v109 = v204;
        uint64_t v111 = (int)v204;
      }

      else
      {
        uint64_t v112 = v203;
      }

      LODWORD(v204) = v109 + 1;
      *(_BYTE *)(v112 + v111) = v108;
LABEL_286:
      uint64_t v9 = v201;
      goto LABEL_287;
    }

    if (*(_BYTE *)v44 == 9)
    {
      if (*(_BYTE *)(v44 + 1)) {
        goto LABEL_347;
      }
      int v86 = (unsigned __int8 *)__s1;
      int v87 = *(_DWORD *)(a2 + 120);
      if (v87 >= 1)
      {
        do
        {
          while (1)
          {
            size_t v89 = v86 + 1;
            int v88 = *v86;
            else {
              v86 += 9;
            }
            if (!--v87) {
              goto LABEL_144;
            }
          }

          int v90 = *v89;
          if ((v90 & 0x80) != 0)
          {
            int v92 = v86[2];
            if ((char)v86[2] < 0)
            {
              int v93 = (char)v86[3];
              if (v93 < 0)
              {
                unsigned int v94 = sub_18129BD74((char *)v86 + 1, &v208);
                if (HIDWORD(v208)) {
                  int v90 = -1;
                }
                else {
                  int v90 = v208;
                }
                uint64_t v91 = v94;
              }

              else
              {
                int v90 = v93 & 0x7F | (v90 << 14) & 0x1FC07F | ((v92 & 0x7F) << 7);
                uint64_t v91 = 3LL;
              }
            }

            else
            {
              int v90 = ((v90 & 0x7F) << 7) | v92;
              uint64_t v91 = 2LL;
            }
          }

          else
          {
            uint64_t v91 = 1LL;
          }

          int v86 = &v89[v91 + v90];
          --v87;
        }

        while (v87);
      }

LABEL_277:
              uint64_t v151 = v154;
              memcpy(v150, v114, v154);
              v150 += v154;
            }

            v114 += v151;
            v149 += v152;
            continue;
          }
        }

        int v199 = 1;
        j += v137;
      }

      *__dst++ = 0;
      uint64_t v144 = v129;
LABEL_222:
      v114 += v144;
      ++v126;
      uint64_t v145 = *(int *)(a2 + 120);
      if (v126 >= v145) {
        break;
      }
    }

    if (v199)
    {
LABEL_356:
      LODWORD(v150) = (_DWORD)__dst;
LABEL_357:
      LODWORD(v204) = (_DWORD)v150 - v203;
    }

    a3 = v195;
LABEL_359:
    uint64_t v9 = v201;
    int v10 = v207;
    if (a3)
    {
LABEL_348:
      if (!v10)
      {
        if ((int)v204 > dword_18C54FB18)
        {
          int v10 = a3(a4, v203);
          unsigned int v207 = v10;
          LODWORD(v204) = 0;
        }

        else
        {
          int v10 = 0;
        }
      }
    }

uint64_t sqlite3rebaser_rebase_strm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v11 = sub_18126F0AC(152LL);
  if (!v11) {
    return 7LL;
  }
  uint64_t v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(void *)(v11 + 144) = 0LL;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 16) = 0LL;
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 48) = a2;
  *(void *)(v11 + 56) = a3;
  *(_DWORD *)(v11 + 64) = a2 == 0;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  uint64_t v13 = sub_1812EF09C(a1, v11, a4, a5, 0LL, 0LL);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sqlite3rebaser_delete(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1812E9958(0LL, *(uint64_t **)(result + 8));
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sqlite3session_config(int a1, int *a2)
{
  if (a1 != 1) {
    return 21LL;
  }
  int v2 = *a2;
  if (*a2 <= 0) {
    int v2 = dword_18C54FB18;
  }
  else {
    dword_18C54FB18 = *a2;
  }
  uint64_t result = 0LL;
  *a2 = v2;
  return result;
}

uint64_t sqlite3_carray_bind( sqlite3_stmt *a1, int a2, void *a3, int a4, int a5, void (__cdecl *a6)(void *))
{
  LODWORD(v8) = a4;
  if (sqlite3_initialize() || (uint64_t v13 = sub_18126F0AC(24LL)) == 0)
  {
    return 7LL;
  }

  int v14 = (void *)v13;
  *(_DWORD *)(v13 + 8) = v8;
  *(_DWORD *)(v13 + 12) = a5;
  if (a6 != (void (__cdecl *)(void *))-1LL)
  {
    *(void *)uint64_t v13 = a3;
    goto LABEL_8;
  }

  int v15 = a5 & 7;
  switch(a5 & 7)
  {
    case 0:
      int v16 = 0;
      uint64_t v17 = 4LL * (int)v8;
      break;
    case 1:
    case 2:
      int v16 = 0;
      uint64_t v17 = 8LL * (int)v8;
      break;
    case 3:
      uint64_t v17 = 8LL * (int)v8;
      if ((int)v8 >= 1)
      {
        uint64_t v18 = v8;
        int v19 = (const char **)a3;
        do
        {
          if (*v19) {
            v17 += strlen(*v19) + 1;
          }
          ++v19;
          --v18;
        }

        while (v18);
      }

      int v16 = 1;
      break;
    case 4:
      uint64_t v17 = 16LL * (int)v8;
      if ((int)v8 >= 1)
      {
        if (v8 >= 5)
        {
          uint64_t v21 = v8 & 3;
          if ((v8 & 3) == 0) {
            uint64_t v21 = 4LL;
          }
          uint64_t v20 = v8 - v21;
          int64x2_t v22 = 0uLL;
          int64x2_t v23 = (int64x2_t)(unint64_t)(16LL * (int)v8);
          uint64_t v24 = (const double *)(a3 + 5);
          uint64_t v25 = v20;
          do
          {
            uint64_t v26 = v24 - 4;
            unsigned __int128 v27 = (unsigned __int128)vld2q_f64(v26);
            unsigned __int128 v28 = (unsigned __int128)vld2q_f64(v24);
            int64x2_t v23 = vaddq_s64((int64x2_t)v27, v23);
            int64x2_t v22 = vaddq_s64((int64x2_t)v28, v22);
            v24 += 8;
            v25 -= 4LL;
          }

          while (v25);
          uint64_t v17 = vaddvq_s64(vaddq_s64(v22, v23));
        }

        else
        {
          uint64_t v20 = 0LL;
        }

        uint64_t v29 = &a3[2 * v20 + 1];
        uint64_t v30 = v8 - v20;
        do
        {
          uint64_t v31 = *v29;
          v29 += 2;
          v17 += v31;
          --v30;
        }

        while (v30);
      }

      int v16 = 0;
      break;
    default:
      int v16 = 0;
      uint64_t v17 = (int)v8;
      break;
  }

  if (sqlite3_initialize())
  {
    void *v14 = 0LL;
LABEL_32:
    uint64_t v32 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
      --qword_18C468B10;
      off_18C4653A8(v14);
      int v14 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return 7LL;
      }
      uint64_t v32 = &xmmword_18C465410;
    }

    (*v32)(v14);
    return 7LL;
  }

  uint64_t v33 = (void *)sub_18126F0AC(v17);
  void *v14 = v33;
  if (!v33) {
    goto LABEL_32;
  }
  uint64_t v34 = v33;
  if (v16)
  {
    if ((int)v8 >= 1)
    {
      uint64_t v35 = (char *)&v33[(int)v8];
      a6 = sqlite3_free;
      uint64_t v36 = v8;
      do
      {
        uint64_t v38 = (const char *)*a3;
        if (*a3)
        {
          void *v34 = v35;
          size_t v37 = strlen(v38) + 1;
          memcpy(v35, v38, v37);
          v35 += v37;
        }

        else
        {
          void *v34 = 0LL;
        }

        ++v34;
        ++a3;
        --v36;
      }

      while (v36);
      goto LABEL_8;
    }
  }

  else if (v15 == 4)
  {
    if ((int)v8 >= 1)
    {
      uint64_t v39 = (char *)&v33[2 * (int)v8];
      uint64_t v40 = v34 + 1;
      uint64_t v41 = a3 + 1;
      uint64_t v8 = v8;
      a6 = sqlite3_free;
      do
      {
        size_t v42 = *v41;
        *(v40 - 1) = (size_t)v39;
        *uint64_t v40 = v42;
        uint64_t v43 = &v39[v42];
        memcpy(v39, (const void *)*(v41 - 1), v42);
        v40 += 2;
        v41 += 2;
        uint64_t v39 = v43;
        --v8;
      }

      while (v8);
      goto LABEL_8;
    }
  }

  else
  {
    memcpy(v33, a3, v17);
  }

  a6 = sqlite3_free;
LABEL_8:
  v14[2] = a6;
  return sqlite3_bind_pointer(a1, a2, v14, "carray-bind", (void (__cdecl *)(void *))sub_1812F08C4);
}

uint64_t sub_1812F08C4(void *a1)
{
  uint64_t v1 = a1;
  int v2 = (void (*)(void))a1[2];
  if (v2) {
    v2(*a1);
  }
  uint64_t v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v3 = &xmmword_18C465410;
    return (*v3)(v1);
  }

  return result;
}

uint64_t sqlite3_carray_init(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_18126D760(a1, "carray", (uint64_t)&unk_18C54FB20, 0LL, 0LL);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1812CF36C(161256);
}

uint64_t sqlite3_csv_init(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_18126D760(a1, "csv", (uint64_t)&unk_18C54FBE0, 0LL, 0LL);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1812CF36C(161256);
}

void sqlite3_activate_see(uint64_t a1)
{
  if (!sqlite3_initialize())
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1812F0B34;
    block[3] = &unk_189B6CE08;
    block[4] = a1;
    if (qword_18C5504B8 != -1) {
      dispatch_once(&qword_18C5504B8, block);
    }
  }

void sub_1812F0B34(uint64_t a1)
{
  if (dword_18C5504C0)
  {
    if (*(void *)(a1 + 32))
    {
LABEL_3:
      sqlite3_log(28, "This version of the encryption extension does not support an activation passphrase");
      return;
    }
  }

  else
  {
    int v2 = (void *)xpc_copy_entitlement_for_self();
    if (v2)
    {
      xpc_release(v2);
      int v3 = 1;
    }

    else
    {
      int v3 = 0;
    }

    dword_18C5504C0 = v3;
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }

  if (os_variant_allows_internal_security_policies())
  {
    uint64_t v4 = getenv("SQLITE_ENABLE_SEE");
    if (v4)
    {
      dword_18C5504C0 = strcmp(v4, "0") != 0;
    }

    else if (!dword_18C5504C0)
    {
      int v5 = getprogname();
      if (!strcmp("xctest", v5)) {
        dword_18C5504C0 = 1;
      }
      else {
        sqlite3_log(1, "entitlement %s or environment variable SQLITE_ENABLE_SEE=1 required to activate SEE");
      }
    }
  }

  else
  {
    sqlite3_log(1, "entitlement %s required to activate SEE");
  }

uint64_t sqlite3_key_v2(uint64_t a1, _BYTE *a2, _BYTE *a3, int a4)
{
  if (!dword_18C5504C0)
  {
    if (sqlite3_initialize()
      || (block[0] = MEMORY[0x1895F87A8],
          block[1] = 0x40000000LL,
          block[2] = sub_1812F0B34,
          block[3] = &unk_189B6CE08,
          block[4] = 0LL,
          qword_18C5504B8 == -1))
    {
      if (dword_18C5504C0) {
        goto LABEL_5;
      }
      return 21LL;
    }

    dispatch_once(&qword_18C5504B8, block);
    if (!dword_18C5504C0) {
      return 21LL;
    }
  }

uint64_t sub_1812F0E00(uint64_t a1, int a2, _BYTE *a3, int a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32) + 32LL * a2;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v6 = (uint64_t *)(v4 + 8);
  uint64_t v5 = v7;
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = **(void **)(v5 + 8);
  if (!v8) {
    return 0LL;
  }
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v12 = (_OWORD *)sub_18126F0AC(112LL);
  if (!v12) {
    return 7LL;
  }
  uint64_t v13 = v12;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  *uint64_t v12 = 0u;
  sub_1812C72E0(*v6, 0, 12, 0, 0LL);
  LOBYTE(v14) = 0;
  char v15 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      v36[0] = xmmword_1813CDB50;
      v36[1] = xmmword_1813CDB60;
      v37[5] = xmmword_1813CDBC0;
      v37[6] = xmmword_1813CDBD0;
      v37[7] = xmmword_1813CDBE0;
      v37[8] = xmmword_1813CDBF0;
      v37[9] = xmmword_1813CDC00;
      v37[10] = xmmword_1813CDC10;
      v37[11] = xmmword_1813CDC20;
      v37[12] = xmmword_1813CDC30;
      v37[13] = xmmword_1813CDC40;
      if (*a3)
      {
        uint64_t v17 = 0LL;
        int v18 = 0;
        unsigned __int8 v19 = 0;
        do
        {
          char v20 = *((_BYTE *)v36 + v17);
          int v21 = a3[v18];
          v19 += v20 + v21;
          char v22 = *((_BYTE *)v36 + v19);
          *((_BYTE *)v36 + v19) = v20;
          *((_BYTE *)v36 + v17++) = v22;
          if (v21) {
            ++v18;
          }
          else {
            int v18 = 0;
          }
        }

        while (v17 != 256);
      }

      uint64_t v23 = 0LL;
      unsigned __int8 v24 = 0;
      do
      {
        char v25 = *((_BYTE *)v36 + v23 + 1);
        v24 += v25;
        *((_BYTE *)v36 + v23 + 1) = *((_BYTE *)v36 + v24);
        *((_BYTE *)v36 + v24) = v25;
        *((_BYTE *)v13 + v23 + 2) = *((_BYTE *)v36 + v23 + 1) + v25;
        ++v23;
      }

      while (v23 != 32);
      char v15 = 0;
      LOBYTE(v14) = 32;
    }

    else
    {
      uint64_t v16 = 0LL;
      if (a4 >= 32) {
        int v14 = 32;
      }
      else {
        int v14 = a4;
      }
      do
      {
        *((_BYTE *)v13 + v16 + 2) = a3[(int)v16 % v14];
        ++v16;
      }

      while (v16 != 32);
      char v15 = 0;
    }
  }

  *(_BYTE *)uint64_t v13 = v14;
  *((_BYTE *)v13 + 1) = v15;
  __int128 v26 = *v13;
  *(_OWORD *)((char *)v13 + 50) = v13[1];
  *((_WORD *)v13 + 33) = *((_WORD *)v13 + 16);
  *(_OWORD *)((char *)v13 + 34) = v26;
  unsigned __int128 v27 = *(void (**)(void))(v8 + 312);
  if (v27)
  {
    v27(*(void *)(v8 + 320));
  }

  else
  {
    ++*(_DWORD *)(v8 + 132);
    for (uint64_t i = *(void *)(v8 + 112); i; uint64_t i = *(void *)(i + 64))
      *(_DWORD *)(i + 24) = 1;
    sub_18126C6E4(*(void **)(v8 + 336), 0);
  }

  uint64_t v29 = sub_1813C1880;
  int v30 = *(unsigned __int8 *)(v8 + 19);
  if (*(_BYTE *)(v8 + 19)) {
    uint64_t v29 = 0LL;
  }
  *(void *)(v8 + 296) = v29;
  *(void *)(v8 + 304) = sub_1813C1E7C;
  *(void *)(v8 + 312) = sub_1813C1EA0;
  *(void *)(v8 + 320) = v13;
  if (*(_DWORD *)(v8 + 48))
  {
    uint64_t v31 = sub_1812FCAFC;
  }

  else
  {
    if (v30) {
      BOOL v32 = *(_BYTE *)(v8 + 27) == 0;
    }
    else {
      BOOL v32 = 1;
    }
    uint64_t v31 = sub_1812FCD58;
    if (!v32) {
      uint64_t v31 = sub_1812FCB08;
    }
  }

  uint64_t result = 0LL;
  *(void *)(v8 + 288) = v31;
  int v33 = *(_DWORD *)(v8 + 200);
  int v34 = *(__int16 *)(v8 + 178);
  if (v34 >= 12) {
    unsigned __int8 v35 = 12;
  }
  else {
    unsigned __int8 v35 = *(_WORD *)(v8 + 178);
  }
  *((_BYTE *)v13 + 69) = v35;
  *((_DWORD *)v13 + 19) = v33;
  *((_DWORD *)v13 + 20) = v33 - v34;
  *((_DWORD *)v13 + 18) = 12 - v35;
  return result;
}

uint64_t sqlite3_key(uint64_t a1, _BYTE *a2, int a3)
{
  return sqlite3_key_v2(a1, 0LL, a2, a3);
}

uint64_t sqlite3_rekey_v2(sqlite3 *a1, _BYTE *a2, _BYTE *a3, int a4)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  uint64_t v48 = 0LL;
  if (!dword_18C5504C0)
  {
    if (sqlite3_initialize())
    {
      if (dword_18C5504C0) {
        goto LABEL_4;
      }
LABEL_42:
      uint64_t v16 = 21LL;
LABEL_43:
      *((_DWORD *)a1 + 20) = v16;
      return v16;
    }

    *(void *)&__int128 block = MEMORY[0x1895F87A8];
    *((void *)&block + 1) = 0x40000000LL;
    *(void *)&__int128 v50 = sub_1812F0B34;
    *((void *)&v50 + 1) = &unk_189B6CE08;
    *(void *)&v51[0] = 0LL;
    if (qword_18C5504B8 == -1)
    {
      if (!dword_18C5504C0) {
        goto LABEL_42;
      }
    }

    else
    {
      dispatch_once(&qword_18C5504B8, &block);
      if (!dword_18C5504C0) {
        goto LABEL_42;
      }
    }
  }

uint64_t sub_1812F177C(uint64_t a1, int a2, char a3)
{
  uint64_t result = *(unsigned int *)(a1 + 48);
  if ((_DWORD)result) {
    return result;
  }
  *(_BYTE *)(a1 + 26) = a3;
  if (*(_BYTE *)(a1 + 21) != 1) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 344);
  if (!v5)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 22);
    if (v9 <= 5 && ((1 << v9) & 0x23) != 0)
    {
      if (*(_BYTE *)(a1 + 17))
      {
        if (v9 == 5) {
          goto LABEL_17;
        }
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 2LL);
        if ((_DWORD)result) {
          return result;
        }
        if (*(_BYTE *)(a1 + 22) == 5) {
          goto LABEL_17;
        }
      }

      *(_BYTE *)(a1 + 22) = 2;
    }

uint64_t sub_1812F19FC(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)result)
  {
    ++*(_DWORD *)(a1 + 132);
    if (*(_BYTE *)(a1 + 21) == 2 && *(_BYTE *)(a1 + 8) && *(_BYTE *)(a1 + 9) == 1)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a1 + 21) = 1;
    }

    else
    {
      uint64_t result = sub_1812A1380(a1, *(unsigned __int8 *)(a1 + 24), 1);
      if (result == 13 || result == 10)
      {
        *(_DWORD *)(a1 + 48) = result;
        *(_BYTE *)(a1 + 21) = 6;
        if ((_DWORD)result)
        {
          uint64_t v4 = sub_1812FCAFC;
        }

        else if (*(_BYTE *)(a1 + 27) && !*(void *)(a1 + 296))
        {
          uint64_t v4 = sub_1812FCB08;
        }

        else
        {
          uint64_t v4 = sub_1812FCD58;
        }

        *(void *)(a1 + 288) = v4;
      }
    }
  }

  return result;
}

uint64_t sub_1812F1ABC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = sub_1812F9F44(a1);
  if (!*(void *)(*(void *)(v1 + 336) + 24LL))
  {
    int v4 = *(unsigned __int8 *)(v1 + 21);
    if (*(_BYTE *)(v1 + 21))
    {
      if (v4 == 1)
      {
        if (!*(_BYTE *)(v1 + 8)) {
          sub_1812A1380(v1, 0, 0);
        }
      }

      else if (v4 != 6)
      {
        if (off_18C550648) {
          double v3 = off_18C550648(result);
        }
        uint64_t v5 = sub_1812B5930(v1, v3);
        if (off_18C550650) {
          off_18C550650(v5);
        }
      }
    }

    return sub_1812A1948(v1);
  }

  return result;
}

uint64_t sqlite3_rekey(sqlite3 *a1, _BYTE *a2, int a3)
{
  return sqlite3_rekey_v2(a1, 0LL, a2, a3);
}

const char *sqlite3_sourceid(void)
{
  return "2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl";
}

uint64_t sub_1812F1B70()
{
  return 0LL;
}

uint64_t sub_1812F1B78()
{
  return 0LL;
}

char *sub_1812F1B80(signed int a1)
{
  if (a1 <= 1)
  {
    uint64_t result = (char *)sub_18126F0AC(16LL);
    if (!result) {
      return result;
    }
    double v3 = result;
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = 0LL;
    *(_DWORD *)uint64_t result = a1;
    if (!*((void *)result + 1)) {
      goto LABEL_8;
    }
    return v3;
  }

  if (a1 >= 0xE)
  {
    sub_1812CF36C(29127);
    return 0LL;
  }

  double v3 = (char *)&unk_18C465E80 + 16 * (a1 - 2);
  if (*((void *)v3 + 1)) {
    return v3;
  }
LABEL_8:
  int v4 = sub_1812F1EF4(a1);
  *((void *)v3 + 1) = v4;
  if (v4) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = 0LL;
  }
  if (a1 <= 1 && !v4)
  {
    uint64_t v5 = (void (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      double v3 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return 0LL;
      }
      uint64_t v5 = (void (**)(char *))&xmmword_18C465410;
    }

    (*v5)(v3);
    return 0LL;
  }

  return result;
}

uint64_t sub_1812F1CA8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 8) <= 1u)
  {
    double v3 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_9:
        int v4 = &off_18C4653A8;
        if (!dword_18C465380) {
          return (*v4)(v1);
        }
        goto LABEL_13;
      }

      double v3 = &xmmword_18C465410;
    }

    (*v3)(v2);
    goto LABEL_9;
  }

  sub_1812CF36C(29571);
  int v4 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v4)(v1);
  }
LABEL_13:
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v4 = &xmmword_18C465410;
    return (*v4)(v1);
  }

  return result;
}

uint64_t sub_1812F1E28(uint64_t a1)
{
  if (*(_DWORD *)a1 == -1)
  {
    uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
    if (v2[2]._os_unfair_lock_opaque == 1)
    {
      uint64_t result = os_unfair_recursive_lock_trylock();
      if ((result & 1) != 0) {
        return result;
      }
    }

    else
    {
      uint64_t result = os_unfair_lock_trylock(v2);
      if ((result & 1) != 0) {
        return result;
      }
    }

    sub_1812F1F88();
  }

  if (*(_DWORD *)(*(void *)(a1 + 8) + 8LL) == 1) {
    return os_unfair_recursive_lock_lock_with_options();
  }
  else {
    return os_unfair_lock_lock_with_options();
  }
}

uint64_t sub_1812F1EA4(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1) {
    int v2 = os_unfair_recursive_lock_trylock();
  }
  else {
    int v2 = os_unfair_lock_trylock(v1);
  }
  if (v2) {
    return 0LL;
  }
  else {
    return 5LL;
  }
}

void sub_1812F1EDC(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1) {
    os_unfair_recursive_lock_unlock();
  }
  else {
    os_unfair_lock_unlock(v1);
  }
}

char *sub_1812F1EF4(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0)
  {
    int v2 = 29522;
    goto LABEL_11;
  }

  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t result = (char *)sub_18126F0AC(12LL);
      if (result)
      {
        *(void *)uint64_t result = 0LL;
        *((_DWORD *)result + 2) = 1;
      }

      return result;
    }

    if (a1 < 0xE) {
      return (char *)&unk_18C465B80 + 64 * (unint64_t)(a1 - 2);
    }
    int v2 = 29550;
LABEL_11:
    sub_1812CF36C(v2);
    return 0LL;
  }

  uint64_t result = (char *)sub_18126F0AC(12LL);
  if (result)
  {
    *(void *)uint64_t result = 0LL;
    *((_DWORD *)result + 2) = 0;
    *(_DWORD *)uint64_t result = 0;
  }

  return result;
}

void sub_1812F1F88()
{
  if (qword_18C5504C8 != -1) {
    dispatch_once(&qword_18C5504C8, &unk_189B6CE48);
  }
  if (byte_18C5504C4 != 1 || (dword_18C465544 & 0x10) != 0)
  {
    qword_18C550450 = (uint64_t)"BUG IN CLIENT OF libsqlite3.dylib: illegal multi-threaded access to database connection";
    __break(1u);
  }

uint64_t sub_1812F2014()
{
  BOOL v0 = getprogname();
  if (!strcmp(v0, "Paper")) {
    byte_18C5504C4 = 1;
  }
  if (!strcmp(v0, "GooglePhotos")) {
    byte_18C5504C4 = 1;
  }
  if (!strcmp(v0, "grindrx")) {
    byte_18C5504C4 = 1;
  }
  uint64_t result = strcmp(v0, "AlipayWallet");
  if (!(_DWORD)result) {
    byte_18C5504C4 = 1;
  }
  return result;
}

uint64_t sub_1812F20B0()
{
  return 0LL;
}

uint64_t sub_1812F20B8()
{
  return 0LL;
}

uint64_t sub_1812F20C0()
{
  return 8LL;
}

uint64_t sub_1812F20D0()
{
  return 0LL;
}

void *sub_1812F20DC(void *result, void *a2)
{
  int v2 = a2;
  if (result)
  {
    if (result[64] > (unint64_t)a2)
    {
      if (result[62] <= (unint64_t)a2)
      {
        *a2 = result[61];
        result[61] = a2;
        return result;
      }

      if (result[63] <= (unint64_t)a2)
      {
        *a2 = result[59];
        result[59] = a2;
        return result;
      }
    }

    if (result[102]) {
      return (void *)sub_1812F21F0((uint64_t)result, (unint64_t)a2);
    }
  }

  if (!a2) {
    return result;
  }
  double v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (void *)(*v3)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  uint64_t result = (void *)off_18C4653A8(v2);
  int v2 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    double v3 = &xmmword_18C465410;
    return (void *)(*v3)(v2);
  }

  return result;
}

uint64_t sub_1812F21F0(uint64_t a1, unint64_t a2)
{
  if (a1 && *(void *)(a1 + 520) > a2)
  {
    if (*(void *)(a1 + 496) <= a2)
    {
      uint64_t result = 128LL;
      goto LABEL_6;
    }

    if (*(void *)(a1 + 504) <= a2)
    {
      uint64_t result = *(unsigned __int16 *)(a1 + 438);
      goto LABEL_6;
    }
  }

  uint64_t result = off_18C4653B8(a2);
LABEL_6:
  **(_DWORD **)(a1 + 816) += result;
  return result;
}

uint64_t sub_1812F2264(uint64_t a1, unint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 436) < a2)
  {
    if (*(_DWORD *)(a1 + 432))
    {
      if (*(_BYTE *)(a1 + 103)) {
        return 0LL;
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 452);
    }

    return sub_1812F2440(a1, a2);
  }

  if (a2 <= 0x80)
  {
    double v3 = *(void **)(a1 + 488);
    if (v3)
    {
      *(void *)(a1 + 488) = *v3;
      goto LABEL_16;
    }

    double v3 = *(void **)(a1 + 480);
    if (v3)
    {
      *(void *)(a1 + 480) = *v3;
      goto LABEL_16;
    }
  }

  double v3 = *(void **)(a1 + 472);
  if (v3)
  {
    *(void *)(a1 + 472) = *v3;
  }

  else
  {
    double v3 = *(void **)(a1 + 464);
    if (!v3)
    {
      ++*(_DWORD *)(a1 + 456);
      return sub_1812F2440(a1, a2);
    }

    *(void *)(a1 + 464) = *v3;
  }

uint64_t sub_1812F2310(uint64_t a1, void *a2, unint64_t a3)
{
  if (*(_BYTE *)(a1 + 103)) {
    return 0LL;
  }
  if (*(void *)(a1 + 504) > (unint64_t)a2 || *(void *)(a1 + 520) <= (unint64_t)a2)
  {
    uint64_t v3 = sub_18127D33C((uint64_t)a2, a3);
    if (v3) {
      return v3;
    }
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v15 = *(void *)(a1 + 344);
    if (!v15) {
      return 0LL;
    }
    sub_1812DC47C(v15, "out of memory", v9, v10, v11, v12, v13, v14, v18);
    uint64_t v16 = *(void *)(a1 + 344);
    *(_DWORD *)(v16 + 24) = 7;
    uint64_t v17 = *(void *)(v16 + 256);
    if (!v17) {
      return 0LL;
    }
    uint64_t v3 = 0LL;
    do
    {
      ++*(_DWORD *)(v17 + 48);
      *(_DWORD *)(v17 + 24) = 7;
      uint64_t v17 = *(void *)(v17 + 256);
    }

    while (v17);
  }

  else
  {
    unsigned int v7 = (void *)sub_1812F2264(a1, a3);
    uint64_t v3 = (uint64_t)v7;
    if (v7)
    {
      else {
        size_t v8 = *(unsigned __int16 *)(a1 + 438);
      }
      memcpy(v7, a2, v8);
      if (a2) {
        sub_1812F20DC((void *)a1, a2);
      }
    }
  }

  return v3;
}

uint64_t sub_1812F2440(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = sub_18126F0AC(a2);
  if (!v9 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v11 = *(void *)(a1 + 344);
    if (v11)
    {
      sub_1812DC47C(v11, "out of memory", v3, v4, v5, v6, v7, v8, v13);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

  return v9;
}

void *sub_1812F24E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 6);
  if (v2)
  {
    uint64_t v4 = (void *)sub_1812F2264(v2, (v3 + 1));
    if (v4)
    {
LABEL_3:
      memcpy(v4, (const void *)a1[1], (*((_DWORD *)a1 + 6) + 1));
      *((_BYTE *)a1 + 29) |= 4u;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v4 = (void *)sub_18126F0AC((v3 + 1));
    if (v4) {
      goto LABEL_3;
    }
  }

  *((_BYTE *)a1 + 28) = 7;
  if (*((_DWORD *)a1 + 5))
  {
    char v5 = *((_BYTE *)a1 + 29);
    if ((v5 & 4) != 0)
    {
      uint64_t v6 = (void *)a1[1];
      if (v6)
      {
        sub_1812F20DC((void *)*a1, v6);
        char v5 = *((_BYTE *)a1 + 29);
      }

      *((_BYTE *)a1 + 29) = v5 & 0xFB;
    }

    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
  }

os_log_t sub_1812F2590()
{
  os_log_t v0 = os_log_create("com.apple.libsqlite3", "logging");
  uint64_t v1 = MEMORY[0x1895F8DA0];
  if (v0) {
    uint64_t v2 = (uint64_t)v0;
  }
  else {
    uint64_t v2 = MEMORY[0x1895F8DA0];
  }
  qword_18C468C88 = v2;
  os_log_t v3 = os_log_create("com.apple.libsqlite3", "logging-persist");
  if (v3) {
    uint64_t v4 = (uint64_t)v3;
  }
  else {
    uint64_t v4 = v1;
  }
  qword_18C468C90 = v4;
  os_log_t v5 = os_log_create("com.apple.libsqlite3", "queries");
  if (v5) {
    uint64_t v6 = (uint64_t)v5;
  }
  else {
    uint64_t v6 = v1;
  }
  qword_18C468C98 = v6;
  os_log_t v7 = os_log_create("com.apple.libsqlite3", "queries_performance");
  if (v7) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = v1;
  }
  qword_18C468CA0 = v8;
  os_log_t v9 = os_log_create("com.apple.libsqlite3", "queries_persist");
  if (v9) {
    uint64_t v10 = (uint64_t)v9;
  }
  else {
    uint64_t v10 = v1;
  }
  qword_18C468CA8 = v10;
  os_log_t result = os_log_create("com.apple.libsqlite3", "connections");
  if (result) {
    uint64_t v12 = (uint64_t)result;
  }
  else {
    uint64_t v12 = v1;
  }
  qword_18C468CB0 = v12;
  return result;
}

uint64_t sub_1812F2678(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    xmmword_18C465400(v5);
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (*(unsigned __int8 *)(v4 + 32) <= 1u)
  {
    if (*(_BYTE *)(v4 + 33))
    {
      int v6 = 0;
      uint64_t v7 = 0LL;
      uint64_t v8 = *(void *)(v4 + 16);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    uint64_t v10 = *(unsigned int *)(a1 + 24);
    int v11 = off_18C54FD70(v10, 92LL);
    if (v11 == -1)
    {
    }

    else if (!v11)
    {
LABEL_17:
      uint64_t v7 = 0LL;
      int v6 = 1;
LABEL_18:
      uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 16LL);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    int v6 = 0;
    *(_DWORD *)(a1 + 32) = *__error();
    uint64_t v7 = 3594LL;
    goto LABEL_18;
  }

  uint64_t v7 = 0LL;
  int v6 = 1;
  uint64_t v8 = *(void *)(v4 + 16);
  if (v8) {
LABEL_8:
  }
    xmmword_18C465410(v8);
LABEL_9:
  *a2 = v6;
  return v7;
}

uint64_t sub_1812F27D0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 8LL);
  if (v6) {
    xmmword_18C465400(v6);
  }
  uint64_t v7 = (void *)(v5 + 56);
  do
  {
    uint64_t v8 = v7;
    os_log_t v9 = (void *)*v7;
    uint64_t v7 = (void *)(*v7 + 8LL);
  }

  while (v9 != v2);
  *uint64_t v8 = v2[1];
  uint64_t v10 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = (void *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_12;
    }
    uint64_t v10 = &xmmword_18C465410;
  }

  (*v10)(v2);
LABEL_12:
  *(void *)(a1 + 64) = 0LL;
  uint64_t v11 = *(void *)(v5 + 8);
  if (v11) {
    xmmword_18C465410(v11);
  }
  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  int v12 = *(_DWORD *)(v5 + 48) - 1;
  *(_DWORD *)(v5 + 48) = v12;
  if (!v12)
  {
    if (a2 == 1 && (*(_DWORD *)(v5 + 24) & 0x80000000) == 0) {
      off_18C54FE48(*(void *)(v5 + 16));
    }
    sub_1812F7A58(a1);
  }

  if (qword_18C468B90) {
    xmmword_18C465410(qword_18C468B90);
  }
  return 0LL;
}

uint64_t sub_1812F2940(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 160) || (uint64_t v9 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v9 + 168LL))
  {
    sqlite3_log(27, "denying read from invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    *a4 = 0LL;
    if (*(void *)(a1 + 104) || (uint64_t result = sub_1812F3F64(a1, -1LL), !(_DWORD)result))
    {
      if (*(void *)(a1 + 80) < a2 + a3) {
        return 0LL;
      }
      uint64_t result = 0LL;
      *a4 = *(void *)(a1 + 104) + a2;
      ++*(_DWORD *)(a1 + 76);
    }
  }

  return result;
}

uint64_t sub_1812F2A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    --*(_DWORD *)(a1 + 76);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 104);
    if (v4)
    {
      off_18C54FEF0(v4, *(void *)(a1 + 88));
      *(void *)(a1 + 104) = 0LL;
      *(void *)(a1 + 80) = 0LL;
      *(void *)(a1 + 88) = 0LL;
    }
  }

  return 0LL;
}

void sub_1812F2A64(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 30) & 0x80) == 0)
  {
    if (off_18C54FD40(*(unsigned int *)(a1 + 24), v2))
    {
      sqlite3_log(28, "cannot fstat db file %s");
    }

    else if (v3 == 1)
    {
      if (*(void *)(a1 + 16)
        && (off_18C54FD28(*(void *)(a1 + 56), v4) || v5 != *(void *)(*(void *)(a1 + 16) + 8LL)))
      {
        sqlite3_log(28, "file renamed while open: %s");
      }
    }

    else if (v3)
    {
      sqlite3_log(28, "multiple links to file: %s");
    }

    else if ((*(_WORD *)(a1 + 30) & 0x20) == 0)
    {
      sqlite3_log(28, "file unlinked while open: %s");
    }
  }

uint64_t sub_1812F2B48(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return result;
  }
  int v2 = *(_DWORD *)(v1 + 48) - 1;
  *(_DWORD *)(v1 + 48) = v2;
  if (v2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4) {
    xmmword_18C465400(v4);
  }
  sub_1812F3108(v3);
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5) {
    xmmword_18C465410(v5);
  }
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  if (v6)
  {
    *(void *)(v6 + 64) = v7;
    uint64_t v7 = *(void *)(v1 + 64);
    if (!v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  qword_18C468CC0 = *(void *)(v1 + 64);
  if (v7) {
LABEL_10:
  }
    *(void *)(v7 + 72) = v6;
LABEL_11:
  if (*(void *)(v1 + 16)) {
    off_18C4653F8();
  }
  uint64_t v8 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v8)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v8 = &xmmword_18C465410;
    return (*v8)(v1);
  }

  return result;
}

uint64_t sub_1812F2C78(const char *a1, int a2, uint64_t a3)
{
  if (xmmword_18C468BA0 == 0) {
    return open(a1, a2, a3);
  }
  else {
    return guarded_open_np();
  }
}

uint64_t sub_1812F2CD0(int a1)
{
  if (qword_18C468BB0) {
    return guarded_close_np();
  }
  else {
    return close(a1);
  }
}

ssize_t sub_1812F2CEC(int a1, void *__buf, size_t __nbyte)
{
  if (qword_18C468BC0) {
    return guarded_write_np();
  }
  else {
    return write(a1, __buf, __nbyte);
  }
}

ssize_t sub_1812F2D18(int a1, void *__buf, size_t __nbyte, off_t a4)
{
  if (qword_18C468BB8) {
    return guarded_pwrite_np();
  }
  else {
    return pwrite(a1, __buf, __nbyte, a4);
  }
}

uint64_t sub_1812F2D4C()
{
  return sysconf(29);
}

uint64_t sub_1812F2D64(uint64_t a1, const char *a2, const char *a3, int __errnum, int a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(__errnum, __strerrbuf, 0x4FuLL);
  uint64_t v10 = &byte_1813CEAEE;
  if (a3) {
    uint64_t v10 = a3;
  }
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a5, __errnum, a2, v10, __strerrbuf);
  return a1;
}

uint64_t sub_1812F2E28(int a1)
{
  return sub_1812F30C4(14LL, a1, "cannot open file");
}

uint64_t sub_1812F2E3C(char *a1, int a2, uint64_t a3, int a4)
{
  if ((_DWORD)a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 420LL;
  }
  int v15 = a4 & (a2 << 22 >> 31);
  int v8 = a2 & 0xA00;
  while (1)
  {
    while (off_18C54FCC8 == sub_1812F2C78)
    {
      if (xmmword_18C468BA0 == 0)
      {
        uint64_t v9 = open(a1, a2, v7);
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }

      else
      {
        if (v15 && (void)xmmword_18C468BA0)
        {
          uint64_t v9 = guarded_open_dprotected_np();
          if ((v9 & 0x80000000) != 0) {
            goto LABEL_19;
          }
          goto LABEL_15;
        }

        uint64_t v9 = guarded_open_np();
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }

uint64_t sub_1812F30C4(uint64_t a1, int a2, const char *a3)
{
  return a1;
}

uint64_t sub_1812F3108(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v1 = *(void *)(v8 + 40);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = *(void *)(v1 + 8);
      if ((*(_DWORD *)v1 & 0x80000000) == 0 && off_18C54FCE0(*(_DWORD *)v1))
      {
        uint64_t v4 = *(const char **)(v2 + 56);
        int v5 = *__error();
        __int128 v12 = 0u;
        __int128 v13 = 0u;
        __int128 v10 = 0u;
        __int128 v11 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v5, __strerrbuf, 0x4FuLL);
        uint64_t v6 = &byte_1813CEAEE;
        if (v4) {
          uint64_t v6 = v4;
        }
        sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 41827, v5, "close", v6, __strerrbuf);
      }

      uint64_t v7 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v1);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v1);
        uint64_t v1 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        uint64_t v7 = &xmmword_18C465410;
      }

      uint64_t result = (*v7)(v1);
LABEL_4:
      uint64_t v1 = v3;
    }

    while (v3);
  }

  *(void *)(v8 + 40) = 0LL;
  return result;
}

void sub_1812F32A8(uint64_t a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x80000000) == 0 && off_18C54FCE0(a2))
  {
    if (a1) {
      int v5 = *(const char **)(a1 + 56);
    }
    else {
      int v5 = 0LL;
    }
    int v6 = *__error();
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v6, __strerrbuf, 0x4FuLL);
    uint64_t v7 = &byte_1813CEAEE;
    if (v5) {
      uint64_t v7 = v5;
    }
    sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", a3, v6, "close", v7, __strerrbuf);
  }

uint64_t sub_1812F338C(uint64_t a1, const char *a2, const char *a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int v8 = *__error();
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v8, __strerrbuf, 0x4FuLL);
  __int128 v9 = &byte_1813CEAEE;
  if (a3) {
    __int128 v9 = a3;
  }
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a4, v8, a2, v9, __strerrbuf);
  return a1;
}

uint64_t sub_1812F3454(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unsigned int v8 = off_18C54FDA0(*(unsigned int *)(a1 + 24), a3, (int)a4, a2);
  if (v8 == v4)
  {
    int v9 = 0;
    return v9 + v4;
  }

  int v9 = 0;
  while ((v8 & 0x80000000) == 0)
  {
    if (!v8)
    {
      unsigned int v4 = 0;
      return v9 + v4;
    }

    v4 -= v8;
    v6 += v8;
    v9 += v8;
    v5 += v8;
LABEL_5:
    unsigned int v8 = off_18C54FDA0(*(unsigned int *)(a1 + 24), v5, (int)v4, v6);
    if (v4 == v8) {
      return v9 + v4;
    }
  }

  if (*__error() == 4) {
    goto LABEL_5;
  }
  *(_DWORD *)(a1 + 32) = *__error();
  __int128 v10 = *(const char **)(a1 + 56);
  int v11 = *__error();
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v11, __strerrbuf, 0x4FuLL);
  __int128 v12 = &byte_1813CEAEE;
  if (v10) {
    __int128 v12 = v10;
  }
  sqlite3_log(266, "os_unix.c:%d: (%d) %s(%s) - %s", 44053, v11, "seekAndRead", v12, __strerrbuf);
  int v9 = 0;
  unsigned int v4 = v8;
  return v9 + v4;
}

ssize_t sub_1812F35E0(uint64_t a1, off_t a2, void *__buf, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 < 1)
  {
    if (!v8 && *(void *)(a1 + 56))
    {
      unint64_t v19 = *(void *)(a1 + 144);
      if ((uint64_t)(v19 + 10485760) < a2)
      {
        if (off_18C54FD40(*(unsigned int *)(a1 + 24), __strerrbuf))
        {
          unint64_t v19 = *(void *)(a1 + 144);
        }

        else
        {
          unint64_t v19 = v37;
          *(void *)(a1 + 144) = v37;
        }

        if ((uint64_t)(v19 + 10485760) < a2)
        {
          if ((uint64_t)(v19 + (*(int (**)(uint64_t))(*(void *)a1 + 88LL))(a1)) < a2)
          {
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
              sub_1813C3E7C(a1 + 144, a2, a4, v20, v21, v22, v23, v24);
            }
            goto LABEL_12;
          }

          unint64_t v19 = *(void *)(a1 + 144);
        }
      }

      unint64_t v25 = a2 + (int)a4;
      if (v19 > v25) {
        unint64_t v25 = v19;
      }
      *(void *)(a1 + 144) = v25;
    }
  }

  else
  {
    off_t v9 = v8 + 10485760;
    if (*(void *)(a1 + 56)) {
      BOOL v10 = v9 < a2;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      int v11 = off_18C54FD40(*(unsigned int *)(a1 + 24), __strerrbuf);
      uint64_t v12 = *(void *)(a1 + 136);
      if (!v11)
      {
        sqlite3_log(1, "seekAndWrite: updated file size hint from %lld to actual size %lld", *(void *)(a1 + 136), v37);
        uint64_t v12 = v37;
        *(void *)(a1 + 136) = v37;
      }

      if (v12 + 10485760 < a2)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
          sub_1813C3DF8(a2, a4, v12, v13, v14, v15, v16, v17);
        }
LABEL_12:
        *(_DWORD *)(a1 + 32) = 22;
        return 0xFFFFFFFFLL;
      }
    }
  }

  int v26 = *(_DWORD *)(a1 + 24);
  size_t v27 = a4 & 0x1FFFF;
  while (1)
  {
    ssize_t v18 = off_18C54FDE8(v26, __buf, v27, a2);
    if ((v18 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4)
    {
      int v28 = *__error();
      *(_DWORD *)(a1 + 32) = v28;
      uint64_t v29 = *(const char **)(a1 + 56);
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v28, __strerrbuf, 0x4FuLL);
      int v30 = &byte_1813CEAEE;
      if (v29) {
        int v30 = v29;
      }
      sqlite3_log(778, "os_unix.c:%d: (%d) %s(%s) - %s", 44288, v28, "seekAndWrite", v30, __strerrbuf);
      return v18;
    }
  }

  return v18;
}

uint64_t sub_1812F3848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 132))
  {
    uint64_t result = off_18C54FD70(a1, 93LL);
    if ((_DWORD)result != -1) {
      return result;
    }
    if (*__error() == 45 || *__error() == 25) {
      return off_18C54FD70(a1, 10LL);
    }
    return 0xFFFFFFFFLL;
  }

  uint64_t result = off_18C54FD70(a1, 90LL);
  if ((_DWORD)result != -1) {
    return result;
  }
  if (*__error() != 45 && *__error() != 25) {
    return 0xFFFFFFFFLL;
  }
  return off_18C54FD70(a1, 8LL);
}

uint64_t sub_1812F3970(uint64_t a1, signed int a2, int a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    xmmword_18C465400(v8);
    unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  }

  if (v3 < 2)
  {
LABEL_52:
    if (a2)
    {
      uint64_t v13 = 0LL;
      goto LABEL_68;
    }

    int v30 = *(_DWORD *)(v7 + 24) - 1;
    *(_DWORD *)(v7 + 24) = v30;
    if (v30)
    {
      uint64_t v13 = 0LL;
      goto LABEL_66;
    }

    int v39 = 2;
    uint64_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(unsigned int *)(v31 + 88);
    if ((_DWORD)v32 == -1)
    {
      uint64_t v32 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v31 + 88) = v32;
    }

    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v31 + 33)) {
        goto LABEL_65;
      }
      uint64_t v40 = dword_18C54FA50 + 2LL;
      uint64_t v41 = 510LL;
      int v42 = 3;
      int v33 = sub_1812F3848(v32, (uint64_t)&v40, a1);
      if (v33 < 0)
      {
LABEL_64:
        *(_DWORD *)(a1 + 32) = *__error();
        *(_BYTE *)(v7 + 32) = 0;
        *(_BYTE *)(a1 + 28) = 0;
        uint64_t v13 = 2058LL;
        goto LABEL_66;
      }

      *(_BYTE *)(v31 + 33) = 1;
      ++*(_DWORD *)(v31 + 28);
    }

    else
    {
      int v33 = sub_1812F3848(v32, (uint64_t)&v37, a1);
    }

    if (v33) {
      goto LABEL_64;
    }
LABEL_65:
    uint64_t v13 = 0LL;
    *(_BYTE *)(v7 + 32) = 0;
LABEL_66:
    int v34 = *(_DWORD *)(v7 + 28) - 1;
    *(_DWORD *)(v7 + 28) = v34;
    if (!v34)
    {
      *(_DWORD *)(v7 + 88) = -1;
      sub_1812F3108(a1);
    }

    goto LABEL_68;
  }

  if (a2 != 1) {
    goto LABEL_42;
  }
  if (a3)
  {
    int v39 = 2;
    uint64_t v9 = dword_18C54FA50 + 2LL;
    uint64_t v37 = v9;
    uint64_t v38 = 509LL;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(unsigned int *)(v10 + 88);
    if ((_DWORD)v11 == -1)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v10 + 88) = v11;
    }

    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v10 + 33)) {
        goto LABEL_22;
      }
      uint64_t v40 = v9;
      uint64_t v41 = 510LL;
      int v42 = 3;
      int v12 = sub_1812F3848(v11, (uint64_t)&v40, a1);
      if ((v12 & 0x80000000) == 0)
      {
        *(_BYTE *)(v10 + 33) = 1;
        ++*(_DWORD *)(v10 + 28);
        goto LABEL_22;
      }
    }

    else
    {
      int v12 = sub_1812F3848(v11, (uint64_t)&v37, a1);
    }

    if (v12 == -1) {
      goto LABEL_50;
    }
LABEL_22:
    int v39 = 1;
    uint64_t v18 = dword_18C54FA50 + 2LL;
    uint64_t v37 = v18;
    uint64_t v38 = 509LL;
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *(unsigned int *)(v19 + 88);
    if ((_DWORD)v20 == -1)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v19 + 88) = v20;
    }

    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v19 + 33))
      {
LABEL_30:
        int v39 = 2;
        uint64_t v22 = dword_18C54FA50;
        uint64_t v37 = dword_18C54FA50 + 511LL;
        uint64_t v38 = 1LL;
        uint64_t v23 = *(void *)(a1 + 16);
        uint64_t v24 = *(unsigned int *)(v23 + 88);
        if ((_DWORD)v24 == -1)
        {
          uint64_t v24 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v23 + 88) = v24;
        }

        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          int v25 = sub_1812F3848(v24, (uint64_t)&v37, a1);
          goto LABEL_37;
        }

        if (!*(_BYTE *)(v23 + 33))
        {
          uint64_t v40 = v22 + 2;
          uint64_t v41 = 510LL;
          int v42 = 3;
          int v25 = sub_1812F3848(v24, (uint64_t)&v40, a1);
          if ((v25 & 0x80000000) == 0)
          {
            *(_BYTE *)(v23 + 33) = 1;
            ++*(_DWORD *)(v23 + 28);
            goto LABEL_42;
          }

uint64_t sub_1812F3E24(int a1, char *a2)
{
  *a2 = 0;
  if ((_BYTE)word_18C465384)
  {
    uint64_t v4 = qword_18C4653F0(11LL);
    if (v4) {
      xmmword_18C465400(v4);
    }
  }

  uint64_t v5 = (const char *)sub_1812F42AC();
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = 0;
    uint64_t v8 = a1 - 2LL;
    while (1)
    {
      sqlite3_initialize();
      arc4random_buf(&__buf, 8uLL);
      a2[v8] = 0;
      sqlite3_snprintf(a1, a2, "%s/etilqs_%llx%c", v6, __buf, 0LL);
      if (a2[v8] || v7 > 0xA) {
        break;
      }
      ++v7;
      if (off_18C54FCF8(a2, 0LL))
      {
        uint64_t v10 = 0LL;
        if ((_BYTE)word_18C465384) {
          goto LABEL_16;
        }
        return v10;
      }
    }

    uint64_t v10 = 1LL;
    if (!(_BYTE)word_18C465384) {
      return v10;
    }
  }

  else
  {
    uint64_t v10 = 6410LL;
    if (!(_BYTE)word_18C465384) {
      return v10;
    }
  }

uint64_t sub_1812F3F64(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a2 < 0)
  {
    a2 = v18;
  }

  uint64_t v4 = a2 >= *(void *)(a1 + 96) ? *(void *)(a1 + 96) : a2;
  if (v4 == *(void *)(a1 + 80)) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 80) & (int)-off_18C54FF20();
  if (v6 != v7) {
    off_18C54FEF0(v5 + v7, v6 - v7);
  }
  uint64_t v8 = off_18C54FED8(v5 + v7, v4 - v7, 1LL, 1LL);
  if (v8 == -1)
  {
    uint64_t v9 = -1LL;
  }

  else
  {
    uint64_t v9 = v5;
    if (v8 != v5 + v7)
    {
      off_18C54FEF0(v8, v4 - v7);
      uint64_t v9 = 0LL;
    }
  }

  if ((unint64_t)(v9 + 1) <= 1)
  {
    off_18C54FEF0(v5, v7);
    if (!v9) {
LABEL_21:
    }
      uint64_t v9 = off_18C54FED8(0LL, v4, 1LL, 1LL);
  }

  if (v9 == -1)
  {
    uint64_t v10 = *(const char **)(a1 + 56);
    int v11 = *__error();
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v11, __strerrbuf, 0x4FuLL);
    int v12 = &byte_1813CEAEE;
    if (v10) {
      int v12 = v10;
    }
    sqlite3_log(0, "os_unix.c:%d: (%d) %s(%s) - %s", 47830, v11, "mmap", v12, __strerrbuf);
    uint64_t v9 = 0LL;
    uint64_t v4 = 0LL;
    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t result = 0LL;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = v4;
  return result;
}

void sub_1812F4194()
{
  os_log_t v0 = sqlite3_temp_directory;
  BOOL v1 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT);
  if (v1) {
    sub_1813C3F04(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  uint64_t v9 = 0LL;
  if (v0)
  {
LABEL_4:
    *__error() = 0;
    off_18C54FD28(v0, v14);
    int v10 = *__error();
    if ((v15 & 0xF000) == 0x4000) {
      int v11 = &byte_1813CEAEE;
    }
    else {
      int v11 = " is not a directory";
    }
    if (v10) {
      int v12 = &byte_1813CEAEE;
    }
    else {
      int v12 = v11;
    }
    *__error() = 0;
    off_18C54FCF8(v0, 3LL);
    uint64_t v13 = __error();
    sqlite3_log( 1,  "\t Attempted temporary directory at path '%s' with stat() errno %d and access errno %d%s\n",  v0,  v10,  *v13,  v12);
  }

  while (v9 != 7)
  {
    os_log_t v0 = (char *)qword_18C465F40[v9++];
    if (v0) {
      goto LABEL_4;
    }
  }

void *sub_1812F42AC()
{
  uint64_t v0 = 0LL;
  BOOL v1 = sqlite3_temp_directory;
  if (!sqlite3_temp_directory)
  {
LABEL_5:
    while (v0 != 7)
    {
      uint64_t v2 = (void **)&qword_18C465F40[v0++];
      BOOL v1 = *v2;
      if (*v2) {
        goto LABEL_2;
      }
    }

    if (qword_18C465F48)
    {
      BOOL v1 = calloc(1uLL, 0x400uLL);
      if (confstr(65537, (char *)v1, 0x400uLL))
      {
        if (v1)
        {
          qword_18C465F48 = (uint64_t)v1;
          memset(v12, 0, sizeof(v12));
          if (!off_18C54FD28(v1, v12)
            && (WORD2(v12[0]) & 0xF000) == 0x4000
            && !off_18C54FCF8(v1, 3LL))
          {
            BOOL v3 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT);
            if (v3) {
              sub_1813C3F38(v3, v4, v5, v6, v7, v8, v9, v10);
            }
            return v1;
          }
        }
      }

      else
      {
        free(v1);
      }
    }

    sub_1812F4194();
    return 0LL;
  }

uint64_t sub_1812F440C(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v1 + 40)) {
    return 0LL;
  }
  uint64_t v4 = *(void *)v1;
  __int128 v62 = 0uLL;
  uint64_t v5 = sub_1812F5664(a1, (uint64_t)&v62, 1LL);
  if ((_DWORD)v5)
  {
    uint64_t v2 = v5;
    char v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0LL;
    goto LABEL_68;
  }

  unsigned int v10 = sub_1812F3454(v4, 0LL, (uint64_t)&v58, 0x411u);
  if ((v10 & 0x80000000) != 0)
  {
    char v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0LL;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v4 + 32);
    uint64_t v2 = 266LL;
    goto LABEL_68;
  }

  if (v10 < 0x12 || v58 != 2)
  {
    uint64_t v9 = 0LL;
    int v7 = 0;
    BOOL v12 = 1;
    int v8 = 1;
    goto LABEL_28;
  }

  BOOL v14 = v59 != (void)v62 || v60 != *((void *)&v62 + 1);
  if (!*(void *)(v1 + 24))
  {
    if (!v14)
    {
      if (v10 - 17 >= 0x3FF) {
        uint64_t v15 = 1023LL;
      }
      else {
        uint64_t v15 = v10 - 17;
      }
      uint64_t v9 = v57;
      __memcpy_chk();
      int v8 = 0;
      uint64_t v2 = 0LL;
      v57[v15] = 0;
      char v6 = 1;
      int v7 = 1;
      goto LABEL_68;
    }

uint64_t sub_1812F4AF0(uint64_t a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 28)) {
    return 5LL;
  }
  if (*(_UNKNOWN **)a1 != &unk_189B6CFC0 && *(_UNKNOWN **)a1 == &unk_189B6D188)
  {
    strlen(*(const char **)(a1 + 40));
    __memcpy_chk();
    if (!a2) {
      goto LABEL_14;
    }
  }

  else
  {
    __strlcpy_chk();
    if (!a2) {
      goto LABEL_14;
    }
  }

  if (*a2)
  {
    if (!strcmp(a2, ":auto:")) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = a2;
    }
    if (sqlite3_initialize()) {
      return 7LL;
    }
    goto LABEL_15;
  }

LABEL_85:
      if ((_DWORD)v2) {
        goto LABEL_19;
      }
      goto LABEL_86;
    }

    unint64_t v28 = (int)v9 - (uint64_t)v22;
    if (v28 >= 8 && (unint64_t)(v21 - __s + 1) >= 0x20)
    {
      if (v28 < 0x20)
      {
        unint64_t v29 = 0LL;
        goto LABEL_63;
      }

      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFE0LL;
      uint8x16_t v30 = &v21[v22 + 17];
      int8x16_t v31 = &__s[v22 + 16];
      unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFE0LL;
      do
      {
        __int128 v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        _OWORD *v30 = v33;
        v30 += 2;
        v31 += 32;
        v32 -= 32LL;
      }

      while (v32);
      if (v28 == v29) {
        goto LABEL_70;
      }
      if ((v28 & 0x18) != 0)
      {
LABEL_63:
        unint64_t v34 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8LL);
        unint64_t v35 = v29 + v22;
        char v36 = &__s[v35];
        uint64_t v37 = &v21[v35 + 1];
        do
        {
          uint64_t v38 = *(void *)v36;
          v36 += 8;
          *v37++ = v38;
          v34 += 8LL;
        }

        while (v34);
        unint64_t v27 = (v28 & 0xFFFFFFFFFFFFFFF8LL) + v22;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8LL)) {
          goto LABEL_70;
        }
        goto LABEL_68;
      }

      unint64_t v27 = v29 + v22;
    }

    int v41 = 0LL;
    goto LABEL_86;
  }

  return 0LL;
}

  if (*v11)
  {
    uint64_t v53 = v9;
    if (v34) {
      goto LABEL_87;
    }
    goto LABEL_93;
  }

uint64_t sub_1812F5130(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(uint64_t **)(result + 40);
  uint64_t v3 = v2[2];
  uint64_t v4 = *v2;
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 64LL))(v2[2], 0LL);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v5 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      uint64_t v3 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_11;
      }
      uint64_t v5 = &xmmword_18C465410;
    }

    (*v5)(v3);
LABEL_11:
    v2[2] = 0LL;
  }

  if (!v4) {
    goto LABEL_26;
  }
  if (*((_DWORD *)v2 + 10))
  {
    char v6 = (_DWORD *)v1[5];
    if ((int)v6[10] <= 0)
    {
      v6[10] = 0;
    }

    else
    {
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)v6 + 64LL))(*(void *)v6, 0LL);
      v6[10] = 0;
      if ((_DWORD)result) {
        return result;
      }
    }
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  if (!(_DWORD)result)
  {
    int v7 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      uint64_t v4 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_26:
        uint64_t v8 = v2[3];
        if (!v8) {
          goto LABEL_33;
        }
        size_t v9 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v8);
          --qword_18C468B10;
          off_18C4653A8(v8);
          uint64_t v8 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70)
          {
LABEL_33:
            uint64_t v10 = v2[1];
            if (!v10) {
              goto LABEL_40;
            }
            int v11 = &off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8 -= (int)off_18C4653B8(v10);
              --qword_18C468B10;
              off_18C4653A8(v10);
              uint64_t v10 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70)
              {
LABEL_40:
                uint64_t v12 = v2[4];
                if (!v12) {
                  goto LABEL_47;
                }
                uint64_t v13 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8 -= (int)off_18C4653B8(v12);
                  --qword_18C468B10;
                  off_18C4653A8(v12);
                  uint64_t v12 = xmmword_18C468B70;
                  if (!(void)xmmword_18C468B70)
                  {
LABEL_47:
                    uint64_t v14 = v2[7];
                    v1[5] = v2[6];
                    void *v1 = v14;
                    uint64_t v15 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
                    if (dword_18C465380)
                    {
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8 -= (int)off_18C4653B8(v2);
                      --qword_18C468B10;
                      off_18C4653A8(v2);
                      uint64_t v2 = (uint64_t *)xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70) {
                        return (*(uint64_t (**)(void *))(*v1 + 8LL))(v1);
                      }
                      uint64_t v15 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
                    }

                    (*v15)(v2);
                    return (*(uint64_t (**)(void *))(*v1 + 8LL))(v1);
                  }

                  uint64_t v13 = &xmmword_18C465410;
                }

                (*v13)(v12);
                goto LABEL_47;
              }

              int v11 = &xmmword_18C465410;
            }

            (*v11)(v10);
            goto LABEL_40;
          }

          size_t v9 = &xmmword_18C465410;
        }

        (*v9)(v8);
        goto LABEL_33;
      }

      int v7 = &xmmword_18C465410;
    }

    (*v7)(v4);
    goto LABEL_26;
  }

  return result;
}

uint64_t sub_1812F5538(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1812F440C(a1);
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0LL;
    }

    else
    {
      char v6 = *(_BYTE **)(v5 + 16);
      uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)v6 + 56LL))(v6, a2);
      *(_BYTE *)(a1 + 28) = v6[28];
    }
  }

  return result;
}

uint64_t sub_1812F55A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1812F440C(a1);
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0LL;
    }

    else
    {
      char v6 = *(_BYTE **)(v5 + 16);
      uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)v6 + 64LL))(v6, a2);
      *(_BYTE *)(a1 + 28) = v6[28];
    }
  }

  return result;
}

uint64_t sub_1812F5608(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1812F440C(a1);
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    else {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 72LL))(*(void *)(v5 + 16), a2);
    }
  }

  return result;
}

uint64_t sub_1812F5664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = 0x18C54F000uLL;
  uint64_t v10 = *(unsigned int **)v8;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56LL))(v10, a3);
    if ((_DWORD)result != 5) {
      return result;
    }
    ++*(_DWORD *)(v8 + 44);
    int v12 = *(_DWORD *)(v8 + 44);
    uint64_t v13 = v35;
    if (v12 == 1)
    {
      uint64_t v7 = v36;
      *(_OWORD *)__rqtp = xmmword_1813CDC80;
      nanosleep((const timespec *)__rqtp, 0LL);
      uint64_t v6 = v13;
    }

    else
    {
      uint64_t result = 5LL;
      if (v6 != v35 || v7 != v36) {
        return result;
      }
      if (v12 == 3)
      {
        uint64_t v16 = *(uint64_t **)(v5 + 40);
        uint64_t v17 = *v16;
        int v18 = (const char *)v16[1];
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        __int128 v38 = 0u;
        uint64_t v19 = __strlcpy_chk();
        if ((unint64_t)(v19 - 1025) >= 0xFFFFFFFFFFFFFC05LL)
        {
          strcpy((char *)&v42 + v19 - 5, "break");
          unint64_t v20 = off_18C54FDA0(*(unsigned int *)(v17 + 24), __rqtp, 1041LL, 0LL);
          size_t v21 = v20;
          if (v20 >= 0x11)
          {
            uint64_t v33 = a2;
            int v22 = sub_1812F2E3C((char *)&v42, 536873474, 0LL, 0);
            if (v22 < 0)
            {
              uint8x16_t v30 = __error();
              sqlite3_snprintf(64, v37, "create failed (%d)", *v30);
            }

            else
            {
              int v23 = v22;
              uint64_t v32 = v5;
              int v24 = "write failed (%d)";
              if (off_18C54FDE8(v22, __rqtp, v21, 0LL) == v21)
              {
                int v24 = "rename failed (%d)";
                if (!rename((const char *)&v42, v18))
                {
                  sqlite3_log(28, "broke stale lock on %s\n", v18);
                  uint64_t v5 = v32;
                  sub_1812F32A8(v32, *(_DWORD *)(v17 + 24), 50697);
                  *(_DWORD *)(v17 + 24) = v23;
                  *(_DWORD *)(v17 + 120) = 514;
                  if ((_DWORD)a3 != 4
                    || (uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56LL))(v10, 1LL),
                        !(_DWORD)result))
                  {
                    uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56LL))(v10, a3);
                  }

                  a2 = v33;
                  unint64_t v9 = 0x18C54F000LL;
                  if ((_DWORD)result != 5) {
                    return result;
                  }
                  goto LABEL_3;
                }
              }

              BOOL v25 = __error();
              sqlite3_snprintf(64, v37, v24, *v25);
              off_18C54FE48(&v42);
              int v26 = off_18C54FCE0(v23);
              uint64_t v5 = v32;
              a2 = v33;
              if (v26)
              {
                unint64_t v27 = *(const char **)(v32 + 56);
                int v28 = *__error();
                __int128 v46 = 0u;
                __int128 v47 = 0u;
                __int128 v44 = 0u;
                __int128 v45 = 0u;
                *(_OWORD *)__strerrbuf = 0u;
                strerror_r(v28, __strerrbuf, 0x4FuLL);
                unint64_t v29 = &byte_1813CEAEE;
                if (v27) {
                  unint64_t v29 = v27;
                }
                int v31 = v28;
                uint64_t v5 = v32;
                sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50705, v31, "close", v29, __strerrbuf);
              }
            }
          }

          else
          {
            sqlite3_snprintf(64, v37, "read error (len %d)", v20);
          }
        }

        else
        {
          sqlite3_snprintf(64, v37, "path error (len %d)", v19);
        }

        sqlite3_log(1, "failed to break stale lock on %s, %s\n", v18, v37);
        unint64_t v9 = 0x18C54F000LL;
      }

      else if (v12 == 2)
      {
        unsigned int v14 = off_18C54FDA0(v10[6], __rqtp, 1041LL, 0LL);
        if ((v14 & 0x80000000) != 0)
        {
LABEL_38:
          *(_DWORD *)(v5 + 32) = *__error();
          return 3850LL;
        }

        uint64_t result = 5LL;
        if (v14 < 0x12 || __rqtp[0] != 2) {
          return result;
        }
        if (*(void *)&__rqtp[1] != *(void *)a2 || *(void *)&__rqtp[9] != *(void *)(a2 + 8))
        {
          *(_OWORD *)uint64_t v37 = *(_OWORD *)&__rqtp[1];
          uuid_unparse((const unsigned __int8 *)v37, (char *)&v42);
          uuid_unparse((const unsigned __int8 *)a2, __strerrbuf);
          sqlite3_log( 1,  "ERROR: sqlite database is locked because it is in use by another host that holds a host-exclusive lock on %s ; this host (UUID %s) cannot override the host-exclusive lock until the other host (UUID %s) releases its locks on %s\n",
            *(const char **)(v5 + 56),
            __strerrbuf,
            (const char *)&v42,
            *((const char **)v10 + 7));
          return 5LL;
        }

        timespec v42 = (timespec)xmmword_1813CDC70;
        nanosleep(&v42, 0LL);
      }
    }

uint64_t sub_1812F5B20(char *a1, uint64_t *a2, int a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  uint64_t v6 = (_DWORD *)sub_1812F60AC((uint64_t)a1, 6);
  if (v6)
  {
    uint64_t v7 = v6;
    if ((*v6 & 0x80000000) == 0)
    {
      HIDWORD(v8) = 6;
      LODWORD(v8) = *v6;
      goto LABEL_4;
    }
  }

  else
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v7 = (void *)sub_18126F0AC(16LL);
    if (!v7) {
      return 7LL;
    }
  }

  int v9 = 770;
  unsigned int v11 = sub_1812F2E3C(a1, 770, 0LL, 0);
  __error();
  if ((v11 & 0x80000000) == 0)
  {
    HIDWORD(v12) = 6;
    goto LABEL_37;
  }

  uint64_t v13 = __error();
  if (!a3 || *v13 != 2)
  {
LABEL_35:
    int v9 = 0x20000000;
    unsigned int v11 = sub_1812F2E3C(a1, 0x20000000, 0LL, 0);
    size_t v21 = __error();
    if ((v11 & 0x80000000) == 0)
    {
      HIDWORD(v12) = 1;
LABEL_37:
      LODWORD(v12) = v11;
      uint64_t v33 = v12;
      if (!sqlite3_initialize()) {
        goto LABEL_38;
      }
      goto LABEL_42;
    }

    int v31 = *v21;
    uint64_t v32 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_67;
      }
      uint64_t v32 = &xmmword_18C465410;
    }

    (*v32)(v7);
LABEL_67:
    if (a3) {
      return 5LL;
    }
    if (v31 == 13) {
      return 3LL;
    }
    if (v31 == 5) {
      return 3850LL;
    }
    return sub_1812F2E28(50570);
  }

  int v14 = strlen(a1);
  LOBYTE(v34) = *a1;
  if (v14 < 2) {
    goto LABEL_32;
  }
  uint64_t v15 = 0LL;
  int v16 = 0;
  uint64_t v17 = v14 - 1LL;
  int v18 = a1 + 1;
  while (1)
  {
    int v19 = v18[v15];
    if (v19 != 47) {
      goto LABEL_16;
    }
    if ((int)v15 - v16 + 1 < 1)
    {
      LOBYTE(v19) = 47;
      goto LABEL_16;
    }

    if ((v15 - v16 + 1) <= 2)
    {
      if ((_DWORD)v15 - v16 == 1)
      {
        if (*((_BYTE *)&v34 + v16) == 46 || *((_BYTE *)&v34 + v16 + 1) == 46) {
          goto LABEL_15;
        }
      }

      else if ((_DWORD)v15 != v16 || (*((_BYTE *)&v34 + v16) & 0xFE) == 0x2E)
      {
        goto LABEL_15;
      }
    }

    *((_BYTE *)&v34 + v15 + 1) = 0;
    if (off_18C54FE78(&v34, 493LL))
    {
      int v20 = *__error();
      if (v20 != 17) {
        break;
      }
    }

uint64_t sub_1812F60AC(uint64_t a1, char a2)
{
  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  if (qword_18C468CC0 && !off_18C54FD28(a1, &v12) && (uint64_t v6 = qword_18C468CC0) != 0)
  {
    while (*(_DWORD *)v6 != v12 || *(void *)(v6 + 8) != v13)
    {
      uint64_t v6 = *(void *)(v6 + 64);
      if (!v6)
      {
        uint64_t v4 = 0LL;
        goto LABEL_24;
      }
    }

    uint64_t v7 = *(void *)(v6 + 16);
    if (v7) {
      xmmword_18C465400(v7);
    }
    uint64_t v8 = (void *)(v6 + 40);
    uint64_t v4 = *(void *)(v6 + 40);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 4) == (a2 & 3))
      {
LABEL_19:
        *uint64_t v8 = *(void *)(v4 + 8);
      }

      else
      {
        while (1)
        {
          uint64_t v9 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            break;
          }
          if (*(_DWORD *)(v4 + 4) == (a2 & 3))
          {
            uint64_t v8 = (void *)(v9 + 8);
            goto LABEL_19;
          }
        }
      }
    }

    uint64_t v10 = *(void *)(v6 + 16);
    if (v10)
    {
      xmmword_18C465410(v10);
      uint64_t v5 = qword_18C468B90;
      if (qword_18C468B90) {
        goto LABEL_25;
      }
      return v4;
    }

void sub_1812F61EC(unsigned int a1, dispatch_source_s **a2, uint64_t a3)
{
  if ((a1 & 0x80000000) == 0
    && _dispatch_is_multithreaded()
    && (_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 2uLL);
    dispatch_source_t v7 = dispatch_source_create(MEMORY[0x1895F8B88], a1, a3 ^ 0x71, global_queue);
    if (v7)
    {
      uint64_t v8 = v7;
      dispatch_set_context(v7, a2);
      dispatch_source_set_event_handler_f(v8, (dispatch_function_t)sub_1812F628C);
      *a2 = v8;
      dispatch_resume(v8);
    }
  }

void sub_1812F628C(dispatch_source_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unint64_t data = dispatch_source_get_data(*a1);
    if (data)
    {
      uint64_t v4 = data;
      uintptr_t handle = dispatch_source_get_handle(v1);
      int v6 = handle;
      if ((v4 & 8) == 0 || off_18C54FD40(handle, v9) || !v10)
      {
        dispatch_source_t v7 = (unsigned int *)(a1 + 1);
        do
          unsigned int v8 = __ldxr(v7);
        while (__stxr(v8 | 1, v7));
        sub_1812F6338(v6, v4);
        sqlite3_log(1, "invalidated open fd: %d (0x%02lx)", v6, v4);
      }
    }
  }

void sub_1812F6338(int a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v3 = v15;
  if (fcntl(a1, 50, v15)) {
    uint64_t v3 = "<unresolvable path>";
  }
  uint64_t v4 = "truncated";
  switch(a2)
  {
    case 1LL:
    case 17LL:
      uint64_t v4 = "unlinked";
      break;
    case 2LL:
    case 3LL:
    case 4LL:
    case 5LL:
    case 6LL:
    case 7LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 12LL:
    case 13LL:
    case 14LL:
    case 15LL:
    case 18LL:
    case 19LL:
    case 20LL:
    case 21LL:
    case 22LL:
    case 23LL:
    case 24LL:
    case 25LL:
    case 26LL:
    case 27LL:
    case 28LL:
    case 29LL:
    case 30LL:
    case 31LL:
      goto LABEL_7;
    case 8LL:
      break;
    case 16LL:
      uint64_t v4 = "linked";
      break;
    case 32LL:
      uint64_t v4 = "renamed";
      break;
    default:
      if (a2 == 64)
      {
        uint64_t v4 = "revoked";
      }

      else
      {
LABEL_7:
        if ((a2 & (a2 - 1)) != 0) {
          uint64_t v4 = "affected by unexpected operations";
        }
        else {
          uint64_t v4 = "affected by unexpected operation";
        }
      }

      break;
  }

  sqlite3_log( 1,  "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use: %s",  v4,  v3);
  if ((dword_18C465544 & 4) != 0
    || (dword_18C465544 & 2) != 0
    && (strstr(v3, "/iTunes/MediaLibrary.sqlitedb")
     || strstr(v3, "/PhotoData/Photos.sqlite")
     || strstr(v3, "/Notes/notes.sqlite")
     || strstr(v3, "/Accounts/Accounts3.sqlite")
     || strstr(v3, "/Calendar/Calendar.sqlitedb")
     || strstr(v3, "/AddressBook/AddressBook.sqlitedb")
     || strstr(v3, "/NoteStore.sqlite")))
  {
    int v12 = v4;
    uint64_t v5 = strrchr(v3, 47);
    if (v5) {
      int v6 = v5;
    }
    else {
      int v6 = (char *)v3;
    }
    if (!*v6)
    {
      unint64_t v7 = 0LL;
LABEL_37:
      qword_18C550480 = (v7 | a2) ^ 0x1B0A00000000LL;
      asprintf( &v13,  "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use",  v12);
      if ((dword_18C465544 & 0x20) != 0)
      {
        asprintf(&v14, "%s: %s");
      }

      else if ((dword_18C465544 & 1) != 0)
      {
        asprintf(&v14, "%s. See syslog for more information");
      }

      else
      {
        int v14 = v13;
      }

      qword_18C550450 = (uint64_t)v14;
      __break(1u);
      return;
    }

    size_t v8 = strlen(v6);
    int v9 = v8;
    unint64_t v10 = v8 << 32;
    if (v8 << 32 < 0x400000001LL) {
      goto LABEL_35;
    }
    uint64_t v11 = (int)v8 - 4LL;
    if (!strcmp(&v6[v11], "-shm") || !strcmp(&v6[v11], "-wal")) {
      goto LABEL_36;
    }
    if (v10 < 0x800000001LL)
    {
      if (v10 < 0x600000001LL) {
        goto LABEL_35;
      }
    }

    else
    {
      LODWORD(v11) = v9 - 8;
      if (!strcmp(&v6[v9 - 8], "-journal")) {
        goto LABEL_36;
      }
    }

    LODWORD(v11) = v9 - 6;
    if (!strcmp(&v6[v9 - 6], "-conch"))
    {
LABEL_36:
      unint64_t v7 = (unint64_t)sub_1812F6658((unsigned __int8 *)v6, v11) << 16;
      goto LABEL_37;
    }

uint64_t sub_1812F6658(unsigned __int8 *a1, int a2)
{
  int v2 = 0xFFFF;
  if (a1 && a2 >= 1)
  {
    do
    {
      int v3 = *a1++;
      int v4 = (char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4));
      int v2 = (v2 << 8) ^ ((v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4)) << 12) ^ (32 * v4) ^ v4;
      --a2;
    }

    while (a2);
  }

  return (unsigned __int16)v2;
}

uint64_t sub_1812F66A0(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  if (!sqlite3_initialize())
  {
    unint64_t v7 = (uint64_t *)sub_18126F0AC(16LL);
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      uint64_t *v7 = 0LL;
      v7[1] = 0LL;
      uint64_t v6 = sub_181266F84(*(char **)(a1 + 56), v7, a2 | 6u, *(const char **)(*(void *)(a1 + 8) + 24LL));
      if ((_DWORD)v6) {
        goto LABEL_5;
      }
      int v10 = *(_DWORD *)(a1 + 168);
      if (v10 >= 1)
      {
        uint64_t v6 = sqlite3_key_v2(*(void *)v8, 0LL, *(_BYTE **)(a1 + 176), v10);
        if ((_DWORD)v6) {
          goto LABEL_5;
        }
      }

      uint64_t v11 = *(void *)v8;
      if (*(void *)v8)
      {
        int v12 = *(unsigned __int8 *)(v11 + 113);
        switch(v12)
        {
          case 186:
            goto LABEL_14;
          case 118:
            uint64_t v14 = *(void *)(v11 + 24);
            if (v14)
            {
              xmmword_18C465400(v14);
              uint64_t v15 = *(void *)(v11 + 24);
              *(_DWORD *)(v11 + 88) = -1;
              if (v15) {
                xmmword_18C465410(v15);
              }
            }

            else
            {
              *(_DWORD *)(v11 + 88) = -1;
            }

uint64_t sub_1812F6B0C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!a1
    || (*(unsigned int (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 16LL))(a1, v4, 20LL, 0LL))
  {
    return 0xFFFFFFFFLL;
  }

  return v5 == 2 && v6 == 2;
}

uint64_t sub_1812F6BC0(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  bzero(&v22, 0x878uLL);
  memset(&v21, 0, sizeof(v21));
  if (fstat(a1, &v21)) {
    unint64_t st_size = 0LL;
  }
  else {
    unint64_t st_size = v21.st_size;
  }
  int v5 = fstatfs(a1, &v22);
  unint64_t p_f_iosize = (unint64_t)&v22.f_iosize;
  if (v5 == -1) {
    unint64_t p_f_iosize = (unint64_t)&v21.st_blksize;
  }
  LODWORD(p_f_iosize) = *(_DWORD *)p_f_iosize;
  else {
    unint64_t p_f_iosize = p_f_iosize;
  }
  if (st_size >= p_f_iosize || st_size == 0) {
    size_t v8 = p_f_iosize;
  }
  else {
    size_t v8 = st_size;
  }
  int v9 = (char *)malloc(v8);
  if (v9)
  {
    int v10 = v9;
    uint64_t v11 = off_18C54FD88(a1, v9, v8);
    unint64_t v12 = v11;
    if (v11 < 1)
    {
      off_t v14 = 0LL;
      if ((v11 & 0x8000000000000000LL) == 0)
      {
LABEL_34:
        if ((ftruncate(a2, v14) & 0x80000000) == 0)
        {
          uint64_t v19 = 0LL;
LABEL_38:
          free(v10);
          return v19;
        }
      }
    }

    else
    {
      int v13 = 0;
      off_t v14 = 0LL;
      uint64_t v15 = v10;
      while (1)
      {
        if (v12 >= v8) {
          size_t v16 = v8;
        }
        else {
          size_t v16 = v12;
        }
        ssize_t v17 = off_18C54FDD0(a2, v15, v16);
        if (v17)
        {
          if (v17 == -1) {
            goto LABEL_36;
          }
          int v13 = 0;
          v12 -= v17;
          v15 += v17;
        }

        else
        {
          if (v13 > 4)
          {
            uint64_t v19 = 35LL;
            *__error() = 35;
            goto LABEL_38;
          }

          ++v13;
        }

        v14 += v17;
        if (!v12)
        {
          uint64_t v18 = off_18C54FD88(a1, v10, v8);
          unint64_t v12 = v18;
          int v13 = 0;
          uint64_t v15 = v10;
          if (v18 < 1) {
            break;
          }
        }
      }

      if ((v18 & 0x8000000000000000LL) == 0) {
        goto LABEL_34;
      }
    }

void sub_1812F6DC4(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = __strlcpy_chk();
  if (v4 > 1023) {
    return;
  }
  *(_OWORD *)statfs v22 = *(_OWORD *)"-wal";
  unint64_t v5 = a2 != 0;
  *(_OWORD *)&v22[11] = unk_1813C6CC9;
  char v6 = &v23[v4];
  uint64_t v7 = (const char *)((unint64_t)v22 | v5 | (8 * v5));
  while (v5 != 2)
  {
LABEL_12:
    if (strlcpy(v6, v7, 9uLL) <= 8)
    {
      if (v5 >= 2) {
        int v9 = 2;
      }
      else {
        int v9 = 1024;
      }
      uint64_t v10 = sub_1812F2E3C(v23, v9, 0LL, 0);
      if ((_DWORD)v10 == -1)
      {
        if (*__error() != 2) {
          perror(v23);
        }
      }

      else
      {
        int v11 = v10;
        if (v5 == 2 && !off_18C54FD40(v10, v20))
        {
          if (v21 >= 4) {
            size_t v12 = 4LL;
          }
          else {
            size_t v12 = v21;
          }
          if (v12)
          {
            int __buf = 0;
            pwrite(v11, &__buf, v12, 0LL);
          }
        }

        fsync(v11);
        off_18C54FCE0(v11);
      }
    }

    ++v5;
    v7 += 9;
    if (v5 == 3) {
      return;
    }
  }

  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 56LL);
  if (!v8 || *(_BYTE *)(v8 + 34) || (int v13 = *(void **)(v8 + 40)) == 0LL || !*v13)
  {
LABEL_10:
    if (qword_18C468B90) {
      xmmword_18C465410(qword_18C468B90);
    }
    goto LABEL_12;
  }

  uint64_t v14 = *(void *)(v8 + 8);
  if (v14) {
    xmmword_18C465400(v14);
  }
  uint64_t v15 = *(unsigned int *)(v8 + 24);
  if ((v15 & 0x80000000) != 0 || off_18C54FD40(v15, v20) || (v21 >= 4 ? (size_t v16 = 4LL) : (size_t v16 = v21), !v16))
  {
    uint64_t v17 = *(void *)(v8 + 8);
    if (v17) {
      xmmword_18C465410(v17);
    }
    goto LABEL_10;
  }

  if (!*(_DWORD *)(v8 + 168)) {
    bzero(**(void ***)(v8 + 40), v16);
  }
  uint64_t v18 = *(void *)(v8 + 8);
  if (v18) {
    xmmword_18C465410(v18);
  }
  if (qword_18C468B90) {
    xmmword_18C465410(qword_18C468B90);
  }
}

unsigned __int8 *sub_1812F705C(unsigned __int8 *result, int a2)
{
  int v3 = result;
  int v4 = result[28];
  if (v4 > a2)
  {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 64LL))( result,  1LL);
    int v4 = v3[28];
  }

  if (v4 > a2) {
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void))(*(void *)v3 + 64LL))(v3, 0LL);
  }
  return result;
}

uint64_t sub_1812F70C4(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = 0LL;
    if (!sqlite3_file_control(*(sqlite3 **)a1, "main", 7, &v4))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 112LL))(v4, 2LL, 1LL, 9LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 112LL))(v4, 3LL, 5LL, 9LL);
    }
  }

  sub_1812E03C8(*v1, 0);
  int v2 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v2)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v2 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
    return (*v2)(v1);
  }

  return result;
}

uint64_t sub_1812F71DC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))a1;
  if (!*(void *)a1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  ++*(_DWORD *)(a1 + 16);
  return v1(v2);
}

uint64_t sub_1812F7204(char *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    int v6 = strlen(a1);
    int v7 = v6;
    int v8 = v6 >= 5 && strncmp("-shm", &a1[v6 - 4], 4uLL) == 0;
    uint64_t v9 = v7 & 0x3FFFFFFF;
  }

  else
  {
    int v8 = 0;
    uint64_t v9 = 0LL;
  }

  do
  {
    if (v9 >= 2)
    {
      uint64_t v10 = --v9;
      int v11 = a1[v9];
      if (v11 != 46) {
        continue;
      }
    }

    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = (a2 >> 20) & 7;
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  while (v11 != 45);
  __memcpy_chk();
  __strerrbuf[v10] = 0;
  uint64_t v15 = v27 & 0x1FF;
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  uint64_t v16 = (a2 >> 20) & 7;
  if (v8)
  {
LABEL_13:
    uint64_t v17 = &dword_1813CD89C[v16];
LABEL_17:
    int v19 = *v17;
    goto LABEL_18;
  }

uint64_t sub_1812F7548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = geteuid();
  if (!(_DWORD)result)
  {
    uint64_t result = off_18C54FD40(a1, v9);
    if ((_DWORD)result) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v9[4] == (_DWORD)a2;
    }
    if (!v7 || v9[5] != (_DWORD)a3)
    {
      uint64_t result = off_18C54FEC0();
      if (!(_DWORD)result)
      {
        uint64_t result = off_18C54FEA8(a1, a2, a3);
        if ((_DWORD)result) {
          return sub_1812F2E28(41169);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1812F75E0(int a1, unsigned int a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  int v4 = (a2 >> 20) & 7;
  if (a3)
  {
    char v5 = 0;
    uint64_t v6 = (a2 >> 20) & 7;
    switch(v4)
    {
      case 0:
        break;
      case 1:
      case 3:
      case 7:
        char v5 = 0;
        uint64_t v6 = 3LL;
        break;
      case 2:
        char v5 = 0;
        uint64_t v6 = 2LL;
        break;
      default:
        uint64_t v6 = 4LL;
        char v5 = 1;
        break;
    }
  }

  else
  {
    char v5 = 0;
    uint64_t v6 = 0LL;
    switch(v4)
    {
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
        char v5 = 0;
        uint64_t v6 = (a2 >> 20) & 7;
        break;
      case 4:
        char v5 = 1;
        uint64_t v6 = (a2 >> 20) & 7;
        break;
      case 5:
        break;
      default:
        uint64_t v6 = 0LL;
        break;
    }
  }

  int v8 = fcntl(a1, 63);
  uint64_t result = 0LL;
  if (v8 < 1) {
    char v9 = v5;
  }
  else {
    char v9 = 0;
  }
  if ((_DWORD)v6 != v8 && (v9 & 1) == 0)
  {
    uint64_t result = fcntl(a1, 64, v6);
    if ((_DWORD)result)
    {
      if (*__error() == 1) {
        return 23LL;
      }
      else {
        return 10LL;
      }
    }
  }

  return result;
}

uint64_t sub_1812F7708(int a1, uint64_t a2, __int16 a3, unsigned int a4, unsigned int a5)
{
  uint64_t v12 = 0LL;
  WORD2(v12) = a3;
  v11[0] = a4;
  v11[1] = a5;
  if (a1 == -1)
  {
    int v8 = (unsigned int (*)(uint64_t, uint64_t))off_18C54FD70;
  }

  else
  {
    LODWORD(v12) = a1;
    int v7 = off_18C54FD70(a2, 94LL);
    if (v7 == -1)
    {
      if ((*__error() == 45 || *__error() == 25) && (off_18C54FD70(a2, 66LL) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }

    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }

    sqlite3_log(28, "F_GETLKPID undefined or not supported, _sqlite3_lockstate falling back to F_GETLK", v11);
    LODWORD(v12) = 0;
    int v8 = (unsigned int (*)(uint64_t, uint64_t))off_18C54FD70;
  }

  if (v8(a2, 92LL) == -1 && (*__error() != 45 && *__error() != 25 || off_18C54FD70(a2, 7LL) == -1))
  {
    uint64_t v10 = __error();
    sqlite3_log(28, "fcntl(%d) failed: errno=%d\n", a2, *v10);
    return 0xFFFFFFFFLL;
  }

uint64_t sub_1812F7890(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  int v3 = off_18C54FD70(v2, 92LL);
  if (v3 == -1)
  {
  }

  else if (!v3)
  {
    return 5LL;
  }

  return 3850LL;
}

uint64_t sub_1812F7A58(uint64_t result)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 56LL);
  if (!v1 || *(_DWORD *)(v1 + 48)) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = off_18C54FF20();
  if (v3 < 0x8000) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = v3 >> 15;
  }
  if (*(void *)(v1 + 8)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 64)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 72)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 80)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 88)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 96)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 104)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 112)) {
    off_18C4653F8();
  }
  if (*(void *)(v1 + 120)) {
    off_18C4653F8();
  }
  if (*(_WORD *)(v1 + 32))
  {
    unint64_t v5 = 0LL;
    do
    {
      if ((*(_DWORD *)(v1 + 24) & 0x80000000) != 0)
      {
        uint64_t v6 = *(void *)(*(void *)(v1 + 40) + 8 * v5);
        if (v6)
        {
          int v7 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v6);
            --qword_18C468B10;
            off_18C4653A8(v6);
            uint64_t v6 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_27;
            }
            int v7 = &xmmword_18C465410;
          }

          (*v7)(v6);
        }
      }

      else
      {
        off_18C54FEF0(*(void *)(*(void *)(v1 + 40) + 8 * v5), *(int *)(v1 + 28));
      }

uint64_t sub_1812F7DF8(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 56LL) + 24LL);
  if ((v5 & 0x80000000) != 0) {
    return 0LL;
  }
  __int16 v9 = a2;
  __int16 v10 = 0;
  v8[0] = a3;
  v8[1] = a4;
  int v6 = sub_1812F3848(v5, (uint64_t)v8, a1);
  uint64_t result = 0LL;
  if (v6 == -1)
  {
    if (*(_DWORD *)(a1 + 132)) {
      return 773LL;
    }
    else {
      return 5LL;
    }
  }

  return result;
}

uint64_t sub_1812F7E78(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 152) = 0LL;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }

  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      xmmword_18C465400(v4);
    }
    if (*(_DWORD *)(v3 + 28))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 48);
      *(void *)(v6 + 8) = *(void *)(v5 + 40);
      *(void *)(v5 + 40) = v6;
      *(_DWORD *)(a1 + 24) = -1;
      *(void *)(a1 + 48) = 0LL;
    }

    uint64_t v7 = *(void *)(v3 + 16);
    if (v7) {
      xmmword_18C465410(v7);
    }
  }

  sub_1812F2B48(a1);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    __int16 v9 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_19:
      (*v9)(v8);
      goto LABEL_20;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int16 v9 = &xmmword_18C465410;
      goto LABEL_19;
    }
  }

uint64_t sub_1812F7FE4(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(int32x2_t **)(a1 + 16);
  int32x2_t v7 = v6[2];
  if (v7)
  {
    xmmword_18C465400(*(void *)&v7);
    unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  }

  unsigned int v8 = v6[4].u8[0];
  if (v2 != v8)
  {
    uint64_t v9 = 5LL;
    if (a2 > 1 || v8 > 2) {
      goto LABEL_68;
    }
  }

  if (a2 == 1)
  {
    if (v8 - 1 <= 1)
    {
      uint64_t v9 = 0LL;
      *(_BYTE *)(a1 + 28) = 1;
      v6[3] = vadd_s32(v6[3], (int32x2_t)0x100000001LL);
      goto LABEL_68;
    }
  }

  else
  {
    if (a2 != 4)
    {
      int v19 = 0;
      goto LABEL_32;
    }

    if (v2 > 2)
    {
LABEL_28:
      if (v6[3].i32[0] > 1)
      {
        uint64_t v9 = 5LL;
LABEL_57:
        *(_BYTE *)(a1 + 28) = 3;
        v6[4].i8[0] = 3;
        goto LABEL_68;
      }

      int v19 = 1;
LABEL_32:
      if (*(unsigned __int8 *)(a1 + 28) <= 1u)
      {
        __int128 v20 = *(const char **)(v5 + 8);
        __int16 v31 = 0;
        uint64_t v29 = dword_18C54FA50 + 1LL;
        uint64_t v30 = 1LL;
        int v32 = *(_DWORD *)(a1 + 24);
        if (fsctl(v20, 0xC0207A17uLL, &v29, 0) == -1)
        {
          uint64_t v25 = *__error();
          uint64_t v9 = 5LL;
          if (((1LL << v25) & 0x1000000800012010LL) != 0) {
            goto LABEL_56;
          }
          if (v25 != 1)
          {
LABEL_45:
            if ((_DWORD)v25 == 77) {
              goto LABEL_56;
            }
            uint64_t v9 = 3850LL;
            goto LABEL_55;
          }

          goto LABEL_50;
        }

        *(_DWORD *)uint64_t v5 = 1;
      }

      if (!v19) {
        goto LABEL_67;
      }
      uint64_t v21 = *(const char **)(v5 + 8);
      uint64_t v22 = dword_18C54FA50 + *(void *)&v6[10] + 2LL;
      __int16 v31 = 1;
      uint64_t v29 = v22;
      uint64_t v30 = 1LL;
      int v32 = *(_DWORD *)(a1 + 24);
      if (fsctl(v21, 0xC0207A17uLL, &v29, 0) != -1)
      {
        uint64_t v23 = sub_1812F8B88(*(const char **)(v5 + 8), a1, dword_18C54FA50 + 2LL, 510LL, 1);
        if ((_DWORD)v23)
        {
          uint64_t v9 = v23;
          unsigned int v24 = sub_1812F8B88(*(const char **)(v5 + 8), a1, dword_18C54FA50 + *(void *)&v6[10] + 2LL, 1LL, 1);
          if (v24)
          {
            else {
              uint64_t v9 = 3850LL;
            }
            goto LABEL_68;
          }

          goto LABEL_56;
        }

uint64_t sub_1812F8504(uint64_t a1, signed int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    xmmword_18C465400(v7);
    unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  }

  if (v2 < 2)
  {
    int v11 = 0;
    uint64_t v12 = 0LL;
    if (a2) {
      goto LABEL_62;
    }
    goto LABEL_55;
  }

  if (v2 != 4)
  {
    int v11 = 0;
    if (v2 < 3) {
      goto LABEL_32;
    }
    goto LABEL_15;
  }

  unsigned int v8 = *(const char **)(v5 + 8);
  __int16 v28 = 1;
  uint64_t v26 = dword_18C54FA50 + 2LL;
  uint64_t v27 = 510LL;
  int v29 = *(_DWORD *)(a1 + 24);
  if (fsctl(v8, 0xC0207A17uLL, &v26, 0) == -1)
  {
    uint64_t v14 = *__error();
    uint64_t v12 = 5LL;
    if (v14 <= 0x3C)
    {
      if (((1LL << v14) & 0x1000000800012010LL) != 0) {
        goto LABEL_53;
      }
      if (v14 == 1)
      {
        uint64_t v12 = 3LL;
LABEL_52:
        *(_DWORD *)(a1 + 32) = v14;
        goto LABEL_53;
      }
    }

    if ((_DWORD)v14 != 77)
    {
      uint64_t v12 = 2058LL;
      goto LABEL_52;
    }

uint64_t sub_1812F89A0(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)v3)
  {
    uint64_t v4 = 0LL;
    int v5 = 1;
    goto LABEL_29;
  }

  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v7 = *(void *)(a1 + 16);
  }

  if (*(unsigned __int8 *)(v7 + 32) > 1u)
  {
    uint64_t v4 = 0LL;
    int v5 = 1;
    goto LABEL_27;
  }

  uint64_t v9 = *(const char **)(v3 + 8);
  __int16 v17 = 0;
  uint64_t v15 = dword_18C54FA50 + 1LL;
  uint64_t v16 = 1LL;
  int v18 = *(_DWORD *)(a1 + 24);
  if (fsctl(v9, 0xC0207A17uLL, &v15, 0) == -1)
  {
    uint64_t v12 = *__error();
    uint64_t v4 = 5LL;
    if (v12 <= 0x3C)
    {
      if (((1LL << v12) & 0x1000000800012010LL) != 0) {
        goto LABEL_20;
      }
      if (v12 == 1)
      {
        uint64_t v4 = 3LL;
LABEL_19:
        *(_DWORD *)(a1 + 32) = v12;
        goto LABEL_20;
      }
    }

    if ((_DWORD)v12 != 77)
    {
      uint64_t v4 = 3850LL;
      goto LABEL_19;
    }

uint64_t sub_1812F8B88(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v11 = a5 == 0;
  char v12 = 0;
  v10[0] = a3;
  v10[1] = a4;
  int v13 = *(_DWORD *)(a2 + 24);
  int v7 = fsctl(a1, 0xC0207A17uLL, v10, 0);
  uint64_t result = 0LL;
  if (v7 == -1)
  {
    uint64_t v9 = *__error();
    uint64_t result = 5LL;
    if (((1LL << v9) & 0x1000000800012010LL) != 0) {
      return result;
    }
    if (v9 == 1)
    {
      uint64_t result = 3LL;
    }

    else
    {
LABEL_6:
      if ((_DWORD)v9 == 77) {
        return result;
      }
      if (a5) {
        uint64_t result = 3850LL;
      }
      else {
        uint64_t result = 2058LL;
      }
    }

    *(_DWORD *)(a2 + 32) = v9;
  }

  return result;
}

uint64_t sub_1812F8C50(uint64_t a1, signed int a2)
{
  return sub_1812F3970(a1, a2, 1);
}

uint64_t sub_1812F8C58()
{
  return 0LL;
}

uint64_t sub_1812F8C60()
{
  return 0LL;
}

uint64_t sub_1812F8C68(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0LL;
}

uint64_t sub_1812F8C74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_BYTE *)(a1 + 28))
  {
    if ((off_18C54FE90(*(void *)(a1 + 40)) & 0x80000000) != 0)
    {
      int v3 = *__error();
      if (v3 != 2) {
        *(_DWORD *)(a1 + 32) = v3;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 28) = 0;
    }

    uint64_t v2 = *(void *)(a1 + 40);
  }

  if (v2)
  {
    uint64_t v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_13:
      (*v4)(v2);
      goto LABEL_14;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v4 = &xmmword_18C465410;
      goto LABEL_13;
    }
  }

uint64_t sub_1812F8D68(uint64_t a1, char a2)
{
  uint64_t v4 = *(const char **)(a1 + 40);
  if (*(_BYTE *)(a1 + 28))
  {
    *(_BYTE *)(a1 + 28) = a2;
    utime(v4, 0LL);
    return 0LL;
  }

  else
  {
    uint64_t result = off_18C54FE78(v4, 511LL);
    if ((result & 0x80000000) != 0)
    {
      int v6 = *__error();
      uint64_t v7 = 3LL;
      uint64_t result = 5LL;
      switch(v6)
      {
        case 1:
          goto LABEL_7;
        case 4:
        case 13:
        case 16:
        case 17:
        case 35:
        case 60:
        case 77:
          return result;
        default:
          uint64_t v7 = 3850LL;
LABEL_7:
          *(_DWORD *)(a1 + 32) = v6;
          uint64_t result = v7;
          break;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 28) = a2;
    }
  }

  return result;
}

uint64_t sub_1812F8E04(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 28) = 1;
  }

  else if ((off_18C54FE90(*(void *)(a1 + 40)) & 0x80000000) != 0)
  {
    int v4 = *__error();
    if (v4 == 2) {
      return 0LL;
    }
    *(_DWORD *)(a1 + 32) = v4;
    return 2058LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 28) = 0;
  }

  return result;
}

uint64_t sub_1812F8E84(uint64_t a1, _DWORD *a2)
{
  *a2 = off_18C54FCF8(*(void *)(a1 + 40), 0LL) == 0;
  return 0LL;
}

char *sub_1812F8EC4()
{
  uint64_t result = getenv("SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS");
  if (result)
  {
    uint64_t v1 = strdup(result);
    int v2 = strlen(v1);
    if (v2)
    {
      qword_18C5504D0[0] = (uint64_t)v1;
      if (v2 >= 1)
      {
        LODWORD(v3) = 0;
        uint64_t v4 = v2;
        int v5 = v1 + 1;
        do
        {
          if (*(v5 - 1) == 58)
          {
            *(v5 - 1) = 0;
            if ((int)v3 > 23)
            {
              sqlite3_log( 28,  "Too many entries in SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS, truncating list to first %d entries",  26);
              return (char *)sub_1812F42AC();
            }

            uint64_t v3 = (int)v3 + 1LL;
            if (*v5) {
              qword_18C5504D0[v3] = (uint64_t)v5;
            }
          }

          ++v5;
          --v4;
        }

        while (v4);
      }
    }

    return (char *)sub_1812F42AC();
  }

  return result;
}

void sub_1812F8F90(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v42 = *MEMORY[0x1895F89C0];
  unint64_t v5 = 0x18C54F000LL;
  unint64_t v6 = 0x18C54F000LL;
  do
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = v4;
    uint64_t v9 = (_BYTE *)(a2 + v4);
    int v10 = *v9;
    if (*v9)
    {
      do
      {
        if (v10 == 47) {
          break;
        }
        int v10 = v9[++v7];
      }

      while (v9[v7]);
    }

    BOOL v11 = (_BYTE *)(a2 + v8);
    if ((int)v8 < (int)v8 + (int)v7)
    {
      if (*v11 == 46)
      {
        if ((_DWORD)v7 == 1) {
          goto LABEL_3;
        }
        uint64_t v12 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v7 == 2 && v11[1] == 46)
        {
          if ((int)v12 >= 2)
          {
            int v13 = (unsigned __int8 *)(*(void *)(a1 + 8) + v12 - 1);
            int v14 = v12 - 1;
            do
            {
              *(_DWORD *)(a1 + 20) = v14;
              int v15 = *v13--;
              --v14;
            }

            while (v15 != 47);
          }

          goto LABEL_3;
        }
      }

      else
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 20);
      }

      if ((int)v12 + (int)v7 + 2 >= *(_DWORD *)(a1 + 16))
      {
        *(_DWORD *)a1 = 1;
        goto LABEL_3;
      }

      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v12 + 1;
      *(_BYTE *)(v16 + (int)v12) = 47;
      memcpy((void *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)), (const void *)(a2 + v8), (int)v7);
      int v17 = *(_DWORD *)(a1 + 20) + v7;
      *(_DWORD *)(a1 + 20) = v17;
      if (!*(_DWORD *)a1)
      {
        *(_BYTE *)(*(void *)(a1 + 8) + v17) = 0;
        int v18 = *(const char **)(a1 + 8);
        if ((*(unsigned int (**)(const char *, _BYTE *))(v5 + 3920))(v18, v30))
        {
          if (*__error() != 2 && *__error() != 1)
          {
            unint64_t v19 = v6;
            int v20 = *__error();
            __int128 v35 = 0u;
            __int128 v36 = 0u;
            __int128 v33 = 0u;
            __int128 v34 = 0u;
            *(_OWORD *)__strerrbuf = 0u;
            strerror_r(v20, __strerrbuf, 0x4FuLL);
            uint64_t v21 = &byte_1813CEAEE;
            if (v18) {
              uint64_t v21 = v18;
            }
            int v28 = v20;
            unint64_t v6 = v19;
            sqlite3_log(14, "os_unix.c:%d: (%d) %s(%s) - %s", 49868, v28, "lstat", v21, __strerrbuf);
          }
        }

        else
        {
          if ((v31 & 0xF000) != 0xA000) {
            goto LABEL_3;
          }
          int v22 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v22 + 1;
          if (v22 >= 201)
          {
            int v23 = sub_1812F2E28(49874);
LABEL_32:
            *(_DWORD *)a1 = v23;
            unint64_t v6 = 0x18C54F000uLL;
            goto LABEL_3;
          }

          uint64_t v24 = (*(uint64_t (**)(const char *, char *, uint64_t))(v6 + 3896))(v18, __strerrbuf, 1024LL);
          if ((unint64_t)(v24 - 1024) <= 0xFFFFFFFFFFFFFC00LL)
          {
            int v23 = sub_1812F2E28(49879);
            int v25 = *__error();
            __int128 v40 = 0u;
            __int128 v41 = 0u;
            __int128 v38 = 0u;
            __int128 v39 = 0u;
            *(_OWORD *)uint64_t v37 = 0u;
            strerror_r(v25, v37, 0x4FuLL);
            uint64_t v26 = &byte_1813CEAEE;
            if (v18) {
              uint64_t v26 = v18;
            }
            int v29 = v25;
            unint64_t v5 = 0x18C54F000uLL;
            sqlite3_log(v23, "os_unix.c:%d: (%d) %s(%s) - %s", 49879, v29, "readlink", v26, v37);
            goto LABEL_32;
          }

          int v27 = 0;
          __strerrbuf[v24] = 0;
          if (__strerrbuf[0] != 47) {
            int v27 = ~(_DWORD)v7 + *(_DWORD *)(a1 + 20);
          }
          *(_DWORD *)(a1 + 20) = v27;
          sub_1812F8F90(a1, __strerrbuf);
        }
      }
    }

void *sub_1812F92D8()
{
  return &unk_189B6D0F0;
}

void *sub_1812F92E4()
{
  return &unk_189B6D188;
}

void *sub_1812F92F0()
{
  return &unk_189B6CF28;
}

void *sub_1812F92FC()
{
  return &unk_189B6D2F8;
}

uint64_t sub_1812F9308(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 28))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v3 = flock(v2, 8);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_8;
      }
    }

    if (!v3) {
      *(_BYTE *)(a1 + 28) = 0;
    }
  }

uint64_t sub_1812F9368(uint64_t a1, char a2)
{
  if (*(_BYTE *)(a1 + 28))
  {
    uint64_t result = 0LL;
LABEL_3:
    *(_BYTE *)(a1 + 28) = a2;
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      uint64_t result = flock(v5, 6);
      if ((result & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_9;
      }
    }

    if (!(_DWORD)result) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = *__error();
    uint64_t result = 5LL;
    if (((1LL << v6) & 0x1000000800012010LL) != 0) {
      return result;
    }
    if (v6 == 1)
    {
      uint64_t result = 3LL;
    }

    else
    {
LABEL_13:
      if ((_DWORD)v6 == 77) {
        return result;
      }
      uint64_t result = 3850LL;
    }

    *(_DWORD *)(a1 + 32) = v6;
  }

  return result;
}

uint64_t sub_1812F9424(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    char v4 = 1;
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v6 = flock(v5, 8);
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        return 2058LL;
      }
    }

    if (v6) {
      return 2058LL;
    }
    char v4 = 0;
  }

  uint64_t result = 0LL;
  *(_BYTE *)(a1 + 28) = v4;
  return result;
}

uint64_t sub_1812F94A4(uint64_t a1, int *a2)
{
  if (*(unsigned __int8 *)(a1 + 28) > 1u)
  {
    uint64_t result = 0LL;
    int v7 = 1;
  }

  else
  {
    int v4 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v5 = flock(v4, 6);
      if ((v5 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_8;
      }
    }

    if (!v5)
    {
      int v10 = *(_DWORD *)(a1 + 24);
      while (1)
      {
        uint64_t result = flock(v10, 8);
        if ((result & 0x80000000) == 0) {
          break;
        }
        if (*__error() != 4) {
          goto LABEL_19;
        }
      }

      if ((_DWORD)result)
      {
LABEL_19:
        BOOL v11 = __error();
        int v7 = 0;
        LODWORD(v9) = *v11;
        uint64_t result = 2058LL;
        goto LABEL_20;
      }

      int v7 = 0;
      goto LABEL_21;
    }

void *sub_1812F95BC()
{
  return &unk_189B6CFC0;
}

void *sub_1812F95C8()
{
  return &unk_189B6D058;
}

void *sub_1812F95D4()
{
  return &unk_189B6D220;
}

uint64_t sub_1812F95E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(void *)(v1 + 64))
  {
    uint64_t v3 = *(void *)(v1 + 32);
    if (!v3) {
      goto LABEL_28;
    }
    int v5 = &xmmword_18C465400;
    goto LABEL_27;
  }

  if (!(_BYTE)word_18C465384)
  {
    uint64_t v3 = 0LL;
    goto LABEL_8;
  }

  uint64_t v2 = qword_18C4653F0(11LL);
  uint64_t v3 = v2;
  if (!v2)
  {
LABEL_8:
    char v4 = 1;
    goto LABEL_9;
  }

  xmmword_18C465400(v2);
  char v4 = 0;
LABEL_9:
  if (dword_18C5505A0 < 1) {
    goto LABEL_25;
  }
  uint64_t v6 = 0LL;
  while (*(void *)(qword_18C5505A8 + v6) != v1)
  {
    v6 += 8LL;
  }

  uint64_t v7 = *(void *)(v1 + 32);
  if (v7) {
    xmmword_18C465400(v7);
  }
  if (*(_DWORD *)(v1 + 56) != 1) {
    goto LABEL_25;
  }
  uint64_t v8 = qword_18C5505A8;
  uint64_t v9 = --dword_18C5505A0;
  *(void *)(qword_18C5505A8 + v6) = *(void *)(qword_18C5505A8 + 8 * v9);
  if ((_DWORD)v9) {
    goto LABEL_25;
  }
  int v10 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_24;
    }
    int v10 = (void (**)(uint64_t))&xmmword_18C465410;
  }

  (*v10)(v8);
LABEL_24:
  qword_18C5505A8 = 0LL;
LABEL_25:
  if ((v4 & 1) != 0) {
    goto LABEL_28;
  }
  int v5 = &xmmword_18C465410;
LABEL_27:
  (*v5)(v3);
LABEL_28:
  int v11 = *(_DWORD *)(v1 + 56);
  BOOL v12 = __OFSUB__(v11--, 1);
  *(_DWORD *)(v1 + 56) = v11;
  if (!((v11 < 0) ^ v12 | (v11 == 0)))
  {
    uint64_t v1 = *(void *)(v1 + 32);
    if (v1)
    {
      uint64_t v16 = &xmmword_18C465410;
      goto LABEL_48;
    }

    return 0LL;
  }

  if ((*(_BYTE *)(v1 + 44) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v1 + 24);
    if (v13)
    {
      int v14 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_37:
        (*v14)(v13);
        goto LABEL_38;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v13);
      --qword_18C468B10;
      off_18C4653A8(v13);
      uint64_t v13 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v14 = &xmmword_18C465410;
        goto LABEL_37;
      }
    }
  }

uint64_t sub_1812F98E8(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = v7[4];
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (a3 + a4 <= *v7)
  {
    memcpy(__dst, (const void *)(v7[3] + a4), a3);
    uint64_t v10 = 0LL;
    uint64_t v9 = v7[4];
    if (!v9) {
      return v10;
    }
LABEL_9:
    xmmword_18C465410(v9);
    return v10;
  }

  bzero(__dst, a3);
  if (*v7 > a4) {
    memcpy(__dst, (const void *)(v7[3] + a4), *v7 - a4);
  }
  uint64_t v9 = v7[4];
  uint64_t v10 = 522LL;
  if (v9) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t sub_1812F99A4(uint64_t a1, void *__src, int a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = v7[4];
  if (v8) {
    xmmword_18C465400(v8);
  }
  int v9 = *((_DWORD *)v7 + 11);
  if ((v9 & 4) == 0)
  {
    uint64_t v10 = a3 + a4;
    uint64_t v11 = *v7;
    if (v10 <= *v7) {
      goto LABEL_22;
    }
    if (v10 <= v7[1])
    {
LABEL_19:
      if (a4 > v11) {
        bzero((void *)(v7[3] + v11), a4 - v11);
      }
      uint64_t *v7 = v10;
LABEL_22:
      memcpy((void *)(v7[3] + a4), __src, a3);
      uint64_t v13 = 0LL;
      uint64_t v14 = v7[4];
      if (!v14) {
        return v13;
      }
      goto LABEL_12;
    }

    if ((v9 & 2) == 0 || *((int *)v7 + 10) > 0 || (uint64_t v12 = v7[2], v12 < v10))
    {
      uint64_t v13 = 13LL;
      uint64_t v14 = v7[4];
      if (!v14) {
        return v13;
      }
      goto LABEL_12;
    }

    if (2 * v10 >= v12) {
      uint64_t v16 = v7[2];
    }
    else {
      uint64_t v16 = 2 * v10;
    }
    uint64_t v17 = sub_18127D33C(v7[3], v16);
    if (v17)
    {
      v7[3] = v17;
      v7[1] = v16;
      uint64_t v11 = *v7;
      goto LABEL_19;
    }

    uint64_t v13 = 3082LL;
    uint64_t v14 = v7[4];
    if (!v14) {
      return v13;
    }
LABEL_12:
    xmmword_18C465410(v14);
    return v13;
  }

  uint64_t v14 = v7[4];
  uint64_t v13 = 778LL;
  if (v14) {
    goto LABEL_12;
  }
  return v13;
}

uint64_t sub_1812F9AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[4];
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (*v3 < a2)
  {
    uint64_t v5 = 11LL;
    uint64_t v6 = v3[4];
    if (!v6) {
      return v5;
    }
    goto LABEL_7;
  }

  uint64_t v5 = 0LL;
  *uint64_t v3 = a2;
  uint64_t v6 = v3[4];
  if (v6) {
LABEL_7:
  }
    xmmword_18C465410(v6);
  return v5;
}

uint64_t sub_1812F9B4C()
{
  return 0LL;
}

uint64_t sub_1812F9B54(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[4];
  if (v4)
  {
    xmmword_18C465400(v4);
    uint64_t v5 = v3[4];
    *a2 = *v3;
    if (v5) {
      xmmword_18C465410(v5);
    }
  }

  else
  {
    *a2 = *v3;
  }

  return 0LL;
}

uint64_t sub_1812F9BB4(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) >= a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    xmmword_18C465400(v5);
  }
  if (a2 >= 2 && (*(_BYTE *)(v4 + 44) & 4) != 0)
  {
    uint64_t v6 = 8LL;
    uint64_t v7 = *(void *)(v4 + 32);
    if (!v7) {
      return v6;
    }
    goto LABEL_22;
  }

  if ((a2 - 2) >= 2)
  {
    if (a2 == 1)
    {
      if (*(int *)(v4 + 52) <= 0)
      {
        ++*(_DWORD *)(v4 + 48);
        goto LABEL_21;
      }
    }

    else if (*(int *)(v4 + 48) <= 1)
    {
      if (*(_DWORD *)(a1 + 16) != 1) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }

uint64_t sub_1812F9CC0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) > a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5) {
      xmmword_18C465400(v5);
    }
    int v6 = *(_DWORD *)(a1 + 16);
    if (a2 == 1)
    {
      if (v6 >= 2) {
        --*(_DWORD *)(v4 + 52);
      }
    }

    else
    {
      if (v6 >= 2) {
        --*(_DWORD *)(v4 + 52);
      }
      --*(_DWORD *)(v4 + 48);
    }

    *(_DWORD *)(a1 + 16) = a2;
    uint64_t v7 = *(void *)(v4 + 32);
    if (v7) {
      xmmword_18C465410(v7);
    }
  }

  return 0LL;
}

uint64_t sub_1812F9D6C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = v5[4];
  if (v6) {
    xmmword_18C465400(v6);
  }
  if (a2 != 36)
  {
    if (a2 == 12)
    {
      uint64_t v7 = 0LL;
      *a3 = (uint64_t)sqlite3_mprintf("memdb(%p,%lld)", (const void *)v5[3], *v5);
      uint64_t v8 = v5[4];
      if (!v8) {
        return v7;
      }
    }

    else
    {
      uint64_t v7 = 12LL;
      uint64_t v8 = v5[4];
      if (!v8) {
        return v7;
      }
    }

    goto LABEL_14;
  }

  uint64_t v9 = *v5;
  if (*a3 >= *v5)
  {
    uint64_t v9 = *a3;
  }

  else if (*a3 < 0)
  {
    uint64_t v9 = v5[2];
  }

  uint64_t v7 = 0LL;
  void v5[2] = v9;
  *a3 = v9;
  uint64_t v8 = v5[4];
  if (v8) {
LABEL_14:
  }
    xmmword_18C465410(v8);
  return v7;
}

uint64_t sub_1812F9E44()
{
  return 5633LL;
}

uint64_t sub_1812F9E4C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (a2 + a3 > *(void *)v7 || (*(_BYTE *)(v7 + 44) & 2) != 0)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    ++*(_DWORD *)(v7 + 40);
    uint64_t v9 = *(void *)(v7 + 24) + a2;
  }

  *a4 = v9;
  uint64_t v10 = *(void *)(v7 + 32);
  if (v10) {
    xmmword_18C465410(v10);
  }
  return 0LL;
}

uint64_t sub_1812F9EE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    xmmword_18C465400(v2);
    uint64_t v3 = *(void *)(v1 + 32);
    --*(_DWORD *)(v1 + 40);
    if (v3) {
      xmmword_18C465410(v3);
    }
  }

  else
  {
    --*(_DWORD *)(v1 + 40);
  }

  return 0LL;
}

uint64_t sub_1812F9F44(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 24);
  --v1[3];
  uint64_t v2 = *(void *)(result + 56) - 1LL;
  *(void *)(result + 56) = v2;
  if (v2) {
    return result;
  }
  uint64_t v3 = *(unsigned __int16 *)(result + 52);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = v1[2];
    uint64_t v5 = *(void *)(result + 72);
    if (v4 == result)
    {
      v1[2] = v5;
      uint64_t v4 = v5;
    }

    uint64_t v6 = *(void *)(result + 64);
    if (v6)
    {
      *(void *)(v6 + 72) = v5;
      uint64_t v5 = *(void *)(result + 72);
      if (!v5)
      {
        *(void *)(result + 64) = v6;
        *(void *)(result + 72) = 0LL;
LABEL_13:
        *(void *)(v6 + 72) = result;
LABEL_17:
        uint64_t *v1 = result;
        if ((v3 & 8) == 0 && !v4) {
          v1[2] = result;
        }
        return result;
      }
    }

    else
    {
      v1[1] = v5;
      if (!v5)
      {
        *((_BYTE *)v1 + 49) = 2;
        *(void *)(result + 64) = 0LL;
        *(void *)(result + 72) = 0LL;
        goto LABEL_15;
      }
    }

    *(void *)(v5 + 64) = v6;
    uint64_t v6 = *v1;
    *(void *)(result + 64) = *v1;
    *(void *)(result + 72) = 0LL;
    if (v6) {
      goto LABEL_13;
    }
LABEL_15:
    v1[1] = result;
    if (*((_BYTE *)v1 + 48)) {
      *((_BYTE *)v1 + 49) = 1;
    }
    goto LABEL_17;
  }

  if (*((_BYTE *)v1 + 48)) {
    return xmmword_18C465468(v1[9], *(void *)result, 0LL);
  }
  return result;
}

uint64_t sub_1812FA020(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 40);
  if (v2 < 1)
  {
    char v4 = 1;
  }

  else
  {
    uint64_t v3 = 0LL;
    char v4 = 1;
    uint64_t v5 = 8LL;
    do
    {
      uint64_t result = *(void *)(*(void *)(v1 + 32) + v5);
      if (result && *(_BYTE *)(result + 17))
      {
        ++*(_DWORD *)(result + 20);
        if (*(_BYTE *)(result + 18))
        {
          char v4 = 0;
        }

        else
        {
          uint64_t result = sub_1812FDE20(result);
          char v4 = 0;
          int v2 = *(_DWORD *)(v1 + 40);
        }
      }

      ++v3;
      v5 += 32LL;
    }

    while (v3 < v2);
  }

  *(_BYTE *)(v1 + 111) = v4;
  return result;
}

uint64_t sub_1812FA0B4(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    uint64_t v4 = 8LL;
    do
    {
      uint64_t result = *(void *)(*(void *)(v2 + 32) + v4);
      if (result && *(_BYTE *)(result + 17))
      {
        int v5 = *(_DWORD *)(result + 20) - 1;
        *(_DWORD *)(result + 20) = v5;
        if (!v5)
        {
          uint64_t result = sub_1812FDEFC(result);
          int v1 = *(_DWORD *)(v2 + 40);
        }
      }

      ++v3;
      v4 += 32LL;
    }

    while (v3 < v1);
  }

  return result;
}

void *sub_1812FA130(uint64_t a1, const char *a2, va_list a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *(_DWORD *)(a1 + 136);
  uint64_t v16 = a1;
  uint64_t v17 = &v22;
  int v18 = 512;
  int v19 = v4;
  int v20 = 0;
  __int16 v21 = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, a3);
  if (v17 && (v17[v20] = 0, v19) && (v21 & 0x400) == 0) {
    uint64_t v11 = sub_1812F24E0(&v16);
  }
  else {
    uint64_t v11 = v17;
  }
  if (v21 == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v13 = *(void *)(a1 + 344);
    if (v13)
    {
      sub_1812DC47C(v13, "out of memory", v5, v6, v7, v8, v9, v10, v15);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

  return v11;
}

void sub_1812FA264(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 416);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 20) & 0x9000) == 0)
    {
      *(_WORD *)(v4 + 20) = 1;
      if (a2 == 3082) {
        return;
      }
      goto LABEL_5;
    }

    sub_181303888((int *)v4);
  }

  if (a2 == 3082) {
    return;
  }
LABEL_5:
  if ((a2 & 0xFB) == 0xA)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 128LL);
    if (v5) {
      int v6 = v5();
    }
    else {
      int v6 = 0;
    }
    *(_DWORD *)(a1 + 92) = v6;
  }

uint64_t sub_1812FA2F0(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(void *)(*(void *)(*(void *)a1 + 32LL) + 40LL) || *(_BYTE *)(a1 + 301)) {
    return 0LL;
  }
  int v4 = sub_1812696E8(*(void *)v1, 0LL, v1, &v23, 0, 0x21Eu);
  if (v4)
  {
    int v12 = v4;
    sub_1812DC47C( a1,  "unable to open a temporary database file for storing temporary tables",  v5,  v6,  v7,  v8,  v9,  v10,  v22);
    *(_DWORD *)(a1 + 24) = v12;
    return 1LL;
  }

  uint64_t v13 = v23;
  *(void *)(*(void *)(v1 + 32) + 4gettimeofday(&v4, 0LL) = v23;
  if (sub_1812C72E0(v13, *(_DWORD *)(v1 + 116), 0, 0, v11) == 7)
  {
    if (!*(_BYTE *)(v1 + 103) && !*(_BYTE *)(v1 + 104))
    {
      *(_BYTE *)(v1 + 103) = 1;
      ++*(_DWORD *)(v1 + 432);
      *(_WORD *)(v1 + 436) = 0;
      uint64_t v20 = *(void *)(v1 + 344);
      if (v20)
      {
        sub_1812DC47C(v20, "out of memory", v14, v15, v16, v17, v18, v19, v22);
        for (uint64_t i = *(void *)(v1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }

    return 1LL;
  }

  return 0LL;
}

uint64_t sub_1812FA40C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 664);
  if (!v2 || (*(_DWORD *)(v1 + 688) & 0x80000000) != 0) {
    return 0LL;
  }
  *(_BYTE *)(*(void *)(v1 + 680) + 784LL) = 0;
  uint64_t v3 = v2(*(void *)(v1 + 672));
  if (*(uint64_t (**)(void *, int))(v1 + 664) != sub_1812E0848)
  {
    uint64_t v4 = *(void *)(v1 + 680);
    if (*(_BYTE *)(v4 + 784))
    {
      unsigned int v5 = sub_1812E0848((void *)v4, *(_DWORD *)(v1 + 688));
      if ((_DWORD)v3 == 109) {
        uint64_t v3 = v5;
      }
      else {
        uint64_t v3 = v3;
      }
    }
  }

  if ((_DWORD)v3) {
    int v6 = *(_DWORD *)(v1 + 688) + 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v1 + 688) = v6;
  return v3;
}

void *sub_1812FA4A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v7 = *(void **)(v6 + 72);
  if (a2 && !v7)
  {
    uint64_t v8 = (void *)sub_18126F0AC(a2);
    uint64_t v7 = v8;
    if (v8) {
      bzero(v8, a2);
    }
    *(void *)(v6 + 72) = v7;
    *(void *)(v6 + 80) = a3;
  }

  if (*(_BYTE *)(a1 + 17))
  {
    int v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9)
    {
      sub_1812FDEFC(a1);
      return *(void **)(v6 + 72);
    }
  }

  return v7;
}

uint64_t sub_1812FA554(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v5 = *(void *)(*(void *)v4 + 336LL);
  uint64_t v6 = *a2;
  uint64_t v7 = getprogname();
  unsigned int v8 = v6;
  if (v7)
  {
    int v9 = v7;
    if (strncmp("assetsd", v7, 7uLL) && strncmp("backupd", v9, 7uLL) && strncmp("bird", v9, 4uLL))
    {
      if (!strncmp("callservicesd", v9, 0xDuLL)) {
        goto LABEL_57;
      }
      if (strncmp("cloudd", v9, 6uLL) && strncmp("dataaccessd", v9, 0xBuLL))
      {
        if (strncmp("duetexpert", v9, 0xAuLL)
          && strncmp("healthd", v9, 7uLL)
          && strncmp("IMDPersistence", v9, 0xEuLL)
          && strncmp("IMDPersistenceAgent", v9, 0x13uLL))
        {
          if (!strncmp("itunesstored", v9, 0xCuLL))
          {
            unsigned int v8 = 128;
            goto LABEL_32;
          }

          if (strncmp("keybagd", v9, 7uLL)
            && strncmp("mediaanalysisd", v9, 0xEuLL)
            && strncmp("medialibraryd", v9, 0xDuLL))
          {
            if (!strncmp("MobileMail", v9, 0xAuLL)
              || !strncmp("MobileNotes", v9, 0xBuLL)
              || !strncmp("MobileSafari", v9, 0xCuLL)
              || !strncmp("nsurlstoraged", v9, 0xDuLL))
            {
              unsigned int v8 = 1024;
              goto LABEL_32;
            }

            if (strncmp("pipelined", v9, 9uLL)
              && strncmp("resentsd", v9, 8uLL)
              && strncmp("searchd", v9, 7uLL)
              && strncmp("securityd", v9, 9uLL)
              && strncmp("SpringBoard", v9, 0xBuLL))
            {
              if (!strncmp("suggestd", v9, 8uLL)) {
                unsigned int v8 = 512;
              }
              else {
                unsigned int v8 = v6;
              }
              goto LABEL_32;
            }
          }
        }

uint64_t sub_1812FA934(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v5 = *(_DWORD **)(*(void *)v4 + 336LL);
  if ((_DWORD)v2)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v2 = -1024LL * (int)v2 / ((int)v5[11] + (uint64_t)(int)v5[10]);
    }
    v5[9] = v2;
  }

  LODWORD(v6) = v5[8];
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (int)v5[11];
    else {
      uint64_t v6 = -1024LL * (int)v6 / (v7 + (int)v5[10]);
    }
  }

  int v8 = v5[9];
  if (*(_BYTE *)(a1 + 17))
  {
    int v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9) {
      sub_1812FDEFC(a1);
    }
  }

  else {
    return v6;
  }
}

uint64_t sub_1812FAA04(int a1, char *__s, void *a3, int a4, int *a5)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  if (!__s || (unsigned int v9 = strlen(__s) & 0x3FFFFFFF, v9 < 2) || (v10 = *__s, v10 != 92) && v10 != 47)
  {
    uint64_t v13 = sub_18126F0AC(72LL);
    if (!v13) {
      return 7LL;
    }
    uint64_t v14 = v13;
    *(void *)(v13 + 64) = 0LL;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_DWORD *)(v13 + 44) = 3;
    *(void *)(v13 + 16) = qword_18C465518;
    goto LABEL_10;
  }

  if ((_BYTE)word_18C465384)
  {
    uint64_t v11 = qword_18C4653F0(11LL);
    uint64_t v12 = v11;
    if (v11)
    {
      xmmword_18C465400(v11);
      char v26 = 0;
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  char v26 = 1;
LABEL_18:
  uint64_t v17 = dword_18C5505A0;
  if (dword_18C5505A0 >= 1)
  {
    uint64_t v18 = qword_18C5505A8;
    while (1)
    {
      uint64_t v14 = *(void *)v18;
      v18 += 8LL;
      if (!--v17) {
        goto LABEL_22;
      }
    }

    uint64_t v24 = *(void *)(v14 + 32);
    if (v24) {
      xmmword_18C465400(v24);
    }
    ++*(_DWORD *)(v14 + 56);
    if ((v26 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_10;
  }

uint64_t sub_1812FAD10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0LL;
}

uint64_t sub_1812FAD1C(int a1, const char *a2, int a3, char *a4)
{
  return 0LL;
}

uint64_t sub_1812FAD50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 72LL))();
}

uint64_t sub_1812FAD5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 80LL))();
}

uint64_t sub_1812FAD68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 88LL))();
}

uint64_t sub_1812FAD74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 96LL))();
}

uint64_t sub_1812FAD80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104LL))();
}

uint64_t sub_1812FAD8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 112LL))();
}

uint64_t sub_1812FAD98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 128LL))();
}

uint64_t sub_1812FADA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 136LL))();
}

uint64_t sub_1812FADB0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 48) || *(_BYTE *)(a1 + 25) && ((*(_BYTE *)(a1 + 25) & 3) != 0 || (*(_WORD *)(a2 + 52) & 8) != 0)) {
    return 0LL;
  }
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 276);
  *(void *)(a2 + 32) = 0LL;
  if (*(void *)(a1 + 344))
  {
    uint64_t result = sub_1812FAFE4(a2);
    if (!(_DWORD)result)
    {
      uint64_t result = sub_1812FB334(a1, a2, 0, 0);
      if (!(_DWORD)result)
      {
LABEL_18:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v6 = *(void *)(a2 + 72);
        if (*(void *)(v5 + 16) == a2) {
          *(void *)(v5 + 16) = v6;
        }
        uint64_t v7 = *(void *)(a2 + 64);
        if (v7)
        {
          *(void *)(v7 + 72) = v6;
          uint64_t v6 = *(void *)(a2 + 72);
          if (!v6)
          {
            *(void *)uint64_t v5 = v7;
            goto LABEL_25;
          }
        }

        else
        {
          *(void *)(v5 + 8) = v6;
          if (!v6)
          {
            *(void *)uint64_t v5 = 0LL;
            *(_BYTE *)(v5 + 49) = 2;
LABEL_25:
            *(_WORD *)(a2 + 52) = *(_WORD *)(a2 + 52) & 0xFFF0 | 1;
            if (!*(void *)(a2 + 56))
            {
              if (*(_BYTE *)(v5 + 48)) {
                xmmword_18C465468(*(void *)(v5 + 72), *(void *)a2, 0LL);
              }
            }

            return 0LL;
          }
        }

        *(void *)(v6 + 64) = v7;
        goto LABEL_25;
      }
    }
  }

  else if ((*(_WORD *)(a2 + 52) & 8) == 0 && *(_BYTE *)(a1 + 21) != 3 {
         || (uint64_t result = sub_1812B9104(a1, 1), !(_DWORD)result))
  }
  {
    uint64_t result = sub_1812B9394((void *)a1, a2);
    if (!(_DWORD)result) {
      goto LABEL_18;
    }
  }

  if (result == 13 || result == 10)
  {
    *(_DWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 21) = 6;
    *(void *)(a1 + 288) = sub_1812FCAFC;
  }

  return result;
}

uint64_t sub_1812FAF30(uint64_t result, char a2)
{
  if (*(_BYTE *)(result + 16))
  {
    BOOL v2 = 0;
    *(_WORD *)(result + 11) = 1;
    *(_BYTE *)(result + 13) = 0;
LABEL_4:
    char v3 = 0;
    *(_BYTE *)(result + 14) = 0;
    int v4 = 1;
    goto LABEL_5;
  }

  BOOL v2 = (a2 & 7u) > 2;
  *(_BYTE *)(result + 12) = v2;
  *(_BYTE *)(result + 13) = (a2 & 7) == 4;
  *(_BYTE *)(result + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1) {
    goto LABEL_4;
  }
  int v4 = 0;
  if ((a2 & 8) != 0) {
    char v3 = 3;
  }
  else {
    char v3 = 2;
  }
  *(_BYTE *)(result + 14) = v3;
LABEL_5:
  char v5 = 4 * v3;
  if (v2) {
    char v6 = v3;
  }
  else {
    char v6 = 0;
  }
  if ((a2 & 0x10) != 0) {
    int v7 = v4;
  }
  else {
    int v7 = 1;
  }
  if (v7) {
    char v8 = v5;
  }
  else {
    char v8 = 12;
  }
  *(_BYTE *)(result + 15) = v8 | v6;
  *(_BYTE *)(result + 25) = *(_BYTE *)(result + 25) & 0xFE | ((a2 & 0x20) == 0);
  return result;
}

uint64_t sub_1812FAFE4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *((unsigned int *)v1 + 32);
  uint64_t v4 = 0LL;
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  uint64_t v6 = v2 - 1;
  uint64_t v7 = v1[15];
  char v8 = (_DWORD *)(v7 + 88);
  uint64_t v9 = 1LL;
  while (1)
  {
    if (*(_DWORD *)(v7 + 56 * v4 + 24) < v5) {
      goto LABEL_4;
    }
    int v10 = *(_DWORD **)(v7 + 56 * v4 + 16);
    if (v5 - 1 >= *v10) {
      goto LABEL_19;
    }
    unsigned int v11 = v5 - 1;
    while (1)
    {
      unsigned int v12 = v10[2];
      if (!v12) {
        break;
      }
      unsigned int v13 = v11 / v12;
      v11 %= v12;
      int v10 = *(_DWORD **)&v10[2 * v13 + 4];
      if (!v10) {
        goto LABEL_19;
      }
    }

    if (*v10 >= 0xF81u) {
      break;
    }
LABEL_4:
    ++v4;
    ++v9;
    --v6;
    v8 += 14;
    if (v4 == v2) {
      return 0LL;
    }
  }

  unsigned int v14 = v11 % 0x7C;
  uint64_t v15 = v10 + 4;
  int v16 = v15[v11 % 0x7C];
  if (v16)
  {
    unsigned int v17 = v11 + 1;
    while (v16 != v17)
    {
      if (v14 == 123) {
        unsigned int v14 = 0;
      }
      else {
        ++v14;
      }
      int v16 = v15[v14];
      if (!v16) {
        goto LABEL_19;
      }
    }

    goto LABEL_4;
  }

uint64_t sub_1812FB334(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v113 = *MEMORY[0x1895F89C0];
  uint64_t v95 = a2;
  if (a4)
  {
    int v7 = 0;
    if (a2)
    {
      char v8 = &v95;
      do
      {
        uint64_t v11 = *(void *)(v5 + 32);
        uint64_t v10 = v5 + 32;
        uint64_t v9 = v11;
        if (*(_DWORD *)(v10 + 16) <= a3)
        {
          ++v7;
          char v8 = (uint64_t *)v10;
        }

        *char v8 = v9;
        uint64_t v5 = v9;
      }

      while (v9);
      uint64_t v5 = v95;
    }
  }

  else
  {
    int v7 = 1;
  }

  *(_DWORD *)(a1 + 256) += v7;
  *(_DWORD *)(a1 + 272) += v7;
  if (*(_DWORD *)(v5 + 48) == 1)
  {
    unsigned int v12 = bswap32(bswap32(*(_DWORD *)(*(void *)(v5 + 40) + 136LL)) + 1);
    *(_DWORD *)(*(void *)(v5 + 8) + 24LL) = v12;
    *(_DWORD *)(*(void *)(v5 + 8) + 92LL) = v12;
    *(_DWORD *)(*(void *)(v5 + 8) + 96LL) = -1167184384;
  }

  uint64_t v13 = *(void *)(a1 + 344);
  uint64_t v14 = *(void *)(a1 + 200);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 15);
  uint64_t v16 = **(void **)(v13 + 48);
  if (*(void *)(v13 + 72) == *(void *)v16
    && *(void *)(v13 + 80) == *(void *)(v16 + 8)
    && *(void *)(v13 + 88) == *(void *)(v16 + 16)
    && *(void *)(v13 + 96) == *(void *)(v16 + 24)
    && *(void *)(v13 + 104) == *(void *)(v16 + 32)
    && *(void *)(v13 + 112) == *(void *)(v16 + 40))
  {
    unsigned int v22 = 0;
    if (*(_WORD *)(v13 + 60)) {
      goto LABEL_43;
    }
  }

  else
  {
    unsigned int v22 = *(_DWORD *)(v16 + 16) + 1;
    if (*(_WORD *)(v13 + 60)) {
      goto LABEL_43;
    }
  }

  if (!*(_DWORD *)(v16 + 96)) {
    goto LABEL_37;
  }
  sqlite3_initialize();
  arc4random_buf(&__buf, 4uLL);
  if (*(_BYTE *)(v13 + 63)) {
    goto LABEL_32;
  }
  uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8) + 112LL))( *(void *)(v13 + 8),  4LL,  4LL,  10LL);
  if ((_DWORD)v27 != 5)
  {
    uint64_t v28 = v27;
    if ((_DWORD)v27) {
      goto LABEL_42;
    }
LABEL_32:
    int v23 = __buf;
    uint64_t v24 = **(_DWORD ***)(v13 + 48);
    ++*(_DWORD *)(v13 + 136);
    *(_DWORD *)(v13 + 88) = 0;
    unsigned int v25 = bswap32(*(_DWORD *)(v13 + 104)) + 1;
    *(_BYTE *)(v13 + 104) = HIBYTE(v25);
    *(_BYTE *)(v13 + 105) = BYTE2(v25);
    *(_BYTE *)(v13 + 106) = BYTE1(v25);
    *(_BYTE *)(v13 + 107) = v25;
    *(_DWORD *)(v13 + 108) = v23;
    __n128 v26 = sub_18127E700(v13);
    v24[24] = 0;
    v24[32] = 0;
    v24[26] = 0;
    v24[27] = -1;
    v24[28] = -1;
    v24[29] = -1;
    if (!*(_BYTE *)(v13 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(v13 + 8) + 112LL))( *(void *)(v13 + 8),  4LL,  4LL,  9LL,  v26);
    }
  }

uint64_t sub_1812FBD40(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 128);
  if (v2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    int v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v4 + 120) + v5;
      if (*(_DWORD *)(v8 + 24) >= a2)
      {
        uint64_t result = sub_1812B8E48(*(unsigned int **)(v8 + 16), a2);
        v7 |= result;
        int v2 = *(_DWORD *)(v4 + 128);
      }

      ++v6;
      v5 += 56LL;
    }

    while (v6 < v2);
  }

  return result;
}

uint64_t sub_1812FBDC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (!a5) {
    return (*(uint64_t (**)(void))(a1 + 40))();
  }
  *(void *)a3 = &unk_189B6D428;
  if (a5 <= 0) {
    int v5 = 1016;
  }
  else {
    int v5 = a5;
  }
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = a5;
  *(_DWORD *)(a3 + 56) = a4;
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  return 0LL;
}

uint64_t sub_1812FBE20()
{
  return 0LL;
}

uint64_t sub_1812FBE28(uint64_t result, unsigned int *a2, int a3, int *a4, _DWORD *a5)
{
  if (a4)
  {
    int v6 = *a4;
    int v5 = a4[1];
    int v7 = (unsigned int *)((char *)a2 + a3);
    if (!(_DWORD)result)
    {
      do
      {
LABEL_8:
        unsigned int v10 = *a2;
        unsigned int v11 = a2[1];
        a2 += 2;
        v6 += v5 + bswap32(v10);
        v5 += bswap32(v11) + v6;
      }

      while (a2 < v7);
      goto LABEL_11;
    }
  }

  else
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = (unsigned int *)((char *)a2 + a3);
    if (!(_DWORD)result) {
      goto LABEL_8;
    }
  }

  if ((a3 & 0x3F) != 0)
  {
    do
    {
      unsigned int v8 = *a2;
      unsigned int v9 = a2[1];
      a2 += 2;
      v6 += v5 + v8;
      v5 += v9 + v6;
    }

    while (a2 < v7);
  }

  else
  {
    do
    {
      int v12 = v6 + v5 + *a2;
      unsigned int v13 = a2[1] + v5 + v12;
      unsigned int v14 = v12 + a2[2] + v13;
      unsigned int v15 = v13 + a2[3] + v14;
      unsigned int v16 = v14 + a2[4] + v15;
      unsigned int v17 = v15 + a2[5] + v16;
      unsigned int v18 = v16 + a2[6] + v17;
      unsigned int v19 = v17 + a2[7] + v18;
      unsigned int v20 = v18 + a2[8] + v19;
      unsigned int v21 = v19 + a2[9] + v20;
      int v22 = v20 + a2[10] + v21;
      int v23 = v21 + a2[11] + v22;
      int v24 = v22 + a2[12] + v23;
      int v25 = v23 + a2[13] + v24;
      int v6 = v24 + a2[14] + v25;
      int v5 = v25 + a2[15] + v6;
      a2 += 16;
    }

    while (a2 < v7);
  }

uint64_t sub_1812FBF50(int a1)
{
  return sub_1812F30C4(11LL, a1, "database corruption");
}

uint64_t sub_1812FBF64(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 88);
  if (v4 && (*(_WORD *)(a1 + 60) || *(_BYTE *)(a1 + 70)))
  {
    unint64_t v7 = ((unint64_t)(*(_DWORD *)(a1 + 120) + 4096) + 0xFFFFFFFF021LL) >> 12;
    unint64_t v8 = ((unint64_t)(v4 + 4096) + 0xFFFFFFFF021LL) >> 12;
    if ((int)v8 >= (int)v7)
    {
      uint64_t v11 = (383 * a2) & 0x1FFF;
      uint64_t v12 = (int)v8;
      uint64_t v13 = (int)v7;
      while (1)
      {
        if (v12 < *(int *)(a1 + 40) && (v15 = *(void *)(*(void *)(a1 + 48) + 8 * v12), (uint64_t v22 = v15) != 0))
        {
          uint64_t result = 0LL;
        }

        else
        {
          uint64_t result = sub_1812FC4E0(a1, v12, &v22);
          uint64_t v15 = v22;
          if (!v22)
          {
            else {
              return result;
            }
          }
        }

        uint64_t v16 = v15 + 0x4000;
        if (v12)
        {
          int v17 = ((_DWORD)v12 << 12) - 34;
          int v23 = v17;
          if ((_DWORD)result) {
            return result;
          }
        }

        else
        {
          int v17 = 0;
          v15 += 136LL;
          uint64_t v22 = v15;
          int v23 = 0;
          if ((_DWORD)result) {
            return result;
          }
        }

        int v18 = *(unsigned __int16 *)(v16 + 2 * v11);
        if (*(_WORD *)(v16 + 2 * v11)) {
          break;
        }
LABEL_9:
        if (v12-- <= v13) {
          goto LABEL_5;
        }
      }

      int v9 = 0;
      int v19 = -8193;
      LOWORD(v20) = v11;
      do
      {
        if (v17 + v18 <= v4
          && (v17 + v18) >= *(_DWORD *)(a1 + 120)
          && *(_DWORD *)(v15 + 4LL * (v18 - 1)) == a2)
        {
          int v9 = v17 + v18;
        }

        if (__CFADD__(v19++, 1)) {
          return sub_1812FBF50(75373);
        }
        unsigned int v20 = ((_WORD)v20 + 1) & 0x1FFF;
        int v18 = *(unsigned __int16 *)(v16 + 2LL * v20);
      }

      while (*(_WORD *)(v16 + 2LL * v20));
      if (!v9) {
        goto LABEL_9;
      }
    }

    else
    {
LABEL_5:
      int v9 = 0;
    }

    uint64_t result = 0LL;
    *a3 = v9;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 0;
  }

  return result;
}

uint64_t sub_1812FC11C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unsigned int v10 = *(uint64_t (**)(void, void, void, uint64_t))(v9 + 296);
  if (v10)
  {
    uint64_t v11 = (unsigned int *)v10(*(void *)(v9 + 320), *(void *)(a2 + 8), *(unsigned int *)(a2 + 48), 6LL);
    if (v11) {
      goto LABEL_3;
    }
    return 7LL;
  }

  uint64_t v11 = *(unsigned int **)(a2 + 8);
  if (!v11) {
    return 7LL;
  }
LABEL_3:
  sub_1812B0188(*(void *)a1, *(_DWORD *)(a2 + 48), a3, v11, v8);
  memcpy((void *)(v8 + 24), v11, *(int *)(a1 + 28));
  uint64_t v12 = *(int *)(a1 + 28) + 24LL;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 - a4;
  if (v13 <= a4 || v12 + a4 < v13) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  v8,  v12,  a4);
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  v8,  v14,  a4);
  if (!(_DWORD)result)
  {
    uint64_t v12 = (v12 - v14);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t result = (v16 & 3) != 0
    if ((_DWORD)v12 && !(_DWORD)result)
    {
      a4 += (int)v14;
      v8 += (int)v14;
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  v8,  v12,  a4);
    }
  }

  return result;
}

void sub_1812FC264(uint64_t a1, uint64_t a2)
{
  if (off_18C550648) {
    off_18C550648(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), &v6);
  int v5 = v4;
  if (!(_DWORD)v4)
  {
    if (v6 <= a2)
    {
      int v5 = 0;
    }

    else
    {
      uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), a2);
      int v5 = v4;
    }
  }

  if (off_18C550650) {
    off_18C550650(v4);
  }
  if (v5) {
    sqlite3_log(v5, "cannot limit WAL size: %s", *(const char **)(a1 + 128));
  }
}

void sub_1812FC318(uint64_t a1, int a2)
{
  int v2 = **(_DWORD ***)(a1 + 48);
  ++*(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 88) = 0;
  unsigned int v3 = bswap32(*(_DWORD *)(a1 + 104)) + 1;
  *(_BYTE *)(a1 + 104) = HIBYTE(v3);
  *(_BYTE *)(a1 + 105) = BYTE2(v3);
  *(_BYTE *)(a1 + 106) = BYTE1(v3);
  *(_BYTE *)(a1 + 107) = v3;
  *(_DWORD *)(a1 + 108) = a2;
  sub_18127E700(a1);
  v2[24] = 0;
  v2[32] = 0;
  v2[26] = 0;
  v2[27] = -1;
  v2[28] = -1;
  v2[29] = -1;
}

uint64_t sub_1812FC394(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(unsigned __int8 *)(result + 63);
  if (v4 != 2 && !*(_BYTE *)(result + 70)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 128LL))(*(void *)(v3 + 8), a2);
  }
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v7 = *(void *)(*(void *)(v3 + 48) + 8 * v5);
    if (v7)
    {
      uint64_t v6 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_6;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v7);
      uint64_t v7 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v6 = &xmmword_18C465410;
LABEL_6:
        uint64_t result = (*v6)(v7);
      }
    }

    *(void *)(*(void *)(v3 + 48) + 8 * v5++) = 0LL;
  }

  while (v5 < *(int *)(v3 + 40));
  int v4 = *(unsigned __int8 *)(v3 + 63);
LABEL_15:
  if (v4 != 2) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 128LL))(*(void *)(v3 + 8), a2);
  }
  return result;
}

uint64_t sub_1812FC4E0(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 40) <= (int)a2)
  {
    int v6 = a2 + 1;
    uint64_t v7 = sub_18127D33C(*(void *)(a1 + 48), 8LL * ((int)a2 + 1));
    if (!v7)
    {
      uint64_t v14 = 0LL;
      uint64_t result = 7LL;
      goto LABEL_22;
    }

    uint64_t v8 = v7;
    bzero((void *)(v7 + 8LL * *(int *)(a1 + 40)), 8LL * (v6 - *(_DWORD *)(a1 + 40)));
    *(void *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 40) = v6;
  }

  if (*(_BYTE *)(a1 + 63) == 2)
  {
    uint64_t v9 = (void *)sub_18126F0AC(0x8000LL);
    unsigned int v10 = v9;
    if (v9) {
      bzero(v9, 0x8000uLL);
    }
    uint64_t v11 = (int)a2;
    uint64_t v12 = 8LL * (int)a2;
    *(void *)(*(void *)(a1 + 48) + v12) = v10;
    if (*(void *)(*(void *)(a1 + 48) + v12)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = 7LL;
    }
  }

  else
  {
    uint64_t v11 = (int)a2;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 104LL))( *(void *)(a1 + 8),  a2,  0x8000LL,  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 48) + 8LL * (int)a2);
    if ((_DWORD)result)
    {
      if (result == 8)
      {
        *(_BYTE *)(a1 + 66) |= 2u;
        if ((_DWORD)result == 8) {
          uint64_t result = 0LL;
        }
        else {
          uint64_t result = result;
        }
      }
    }

    else if ((int)a2 >= 1 && off_18C465520 && off_18C465520(600LL))
    {
      uint64_t result = 7LL;
    }

    else
    {
      uint64_t result = 0LL;
    }
  }

  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8 * v11);
LABEL_22:
  *a3 = v14;
  return result;
}

uint64_t sub_1812FC63C(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 104) != *(void *)(a5 + 8)) {
    return 0LL;
  }
  unsigned int v7 = bswap32(*(_DWORD *)a5);
  if (!v7) {
    return 0LL;
  }
  uint64_t v11 = (int *)(a1 + 96);
  int v12 = *(unsigned __int8 *)(a1 + 85);
  BOOL v13 = *(_BYTE *)(a1 + 85) == 0;
  int v14 = *(_DWORD *)(a1 + 100);
  if (v12)
  {
    unsigned int v15 = bswap32(*(_DWORD *)a5);
    unsigned int v16 = bswap32(*(_DWORD *)(a5 + 4));
  }

  else
  {
    unsigned int v15 = *(_DWORD *)a5;
    unsigned int v16 = *(_DWORD *)(a5 + 4);
  }

  unsigned int v17 = *(_DWORD *)(a1 + 96) + v14 + v15;
  *(_DWORD *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 100) = v16 + v14 + v17;
  sub_1812FBE28(v13, a4, *(_DWORD *)(a1 + 56), v11, v11);
  if (*(_DWORD *)(a1 + 96) != bswap32(*(_DWORD *)(a5 + 16)) || *(_DWORD *)(a1 + 100) != bswap32(*(_DWORD *)(a5 + 20))) {
    return 0LL;
  }
  *a2 = v7;
  *a3 = bswap32(*(_DWORD *)(a5 + 4));
  return 1LL;
}

void sub_1812FC724(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if (v1)
  {
    unint64_t v3 = ((unint64_t)(v1 + 4096) + 0xFFFFFFFF021LL) >> 12;
    if (*(_DWORD *)(a1 + 40) > (int)v3 && (v4 = *(void *)(*(void *)(a1 + 48) + 8LL * (int)v3), (uint64_t v12 = v4) != 0))
    {
      int v5 = 0;
    }

    else
    {
      int v5 = sub_1812FC4E0(a1, v3, &v12);
      uint64_t v4 = v12;
      if (!v12) {
        return;
      }
    }

    if ((_DWORD)v3) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = 136LL;
    }
    if (!v5)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = v4 + 0x4000;
      uint64_t v9 = v4 + v6;
      int v10 = ((_DWORD)v3 << 12) - 34;
      if (!(_DWORD)v3) {
        int v10 = 0;
      }
      int v11 = *(_DWORD *)(a1 + 88) - v10;
      do
      {
        v7 += 2LL;
      }

      while (v7 != 0x4000);
      bzero((void *)(v9 + 4LL * v11), (int)v8 - ((int)v9 + 4 * v11));
    }
  }

uint64_t sub_1812FC81C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  do
  {
    unsigned int v6 = *(_DWORD *)(v5 + 48);
    BOOL v7 = v6 > 6;
    int v8 = (1 << v6) & 0x61;
    BOOL v9 = v7 || v8 == 0;
    if (!v9 && *(_DWORD *)(v5 + 24) > a2)
    {
      uint64_t v10 = *(void *)(*(void *)v5 + 24LL);
      if (v10) {
        xmmword_18C465400(v10);
      }
      int v11 = sub_1812D5C44(v5, a2, a3, 1);
      uint64_t result = *(void *)(*(void *)v5 + 24LL);
      if (result) {
        uint64_t result = xmmword_18C465410(result);
      }
      if (v11) {
        *(_DWORD *)(v5 + 48) = v11;
      }
    }

    uint64_t v5 = *(void *)(v5 + 64);
  }

  while (v5);
  return result;
}

uint64_t sub_1812FC8E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 22);
  int v4 = a2;
  if (*(_BYTE *)(a1 + 17))
  {
    if ((_DWORD)a2 != 4)
    {
LABEL_8:
      if (v2 == 5) {
        return 0LL;
      }
    }
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), a2);
    if ((_DWORD)result) {
      return result;
    }
    int v2 = *(unsigned __int8 *)(a1 + 22);
    if (v4 != 4) {
      goto LABEL_8;
    }
  }

  uint64_t result = 0LL;
  *(_BYTE *)(a1 + 22) = v4;
  return result;
}

unint64_t sub_1812FC960(unint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    if (qword_18C550618 <= result && (unint64_t)xmmword_18C550620 > result)
    {
      uint64_t result = *((void *)&xmmword_18C550620 + 1);
      if (*((void *)&xmmword_18C550620 + 1))
      {
        xmmword_18C465400(*((void *)&xmmword_18C550620 + 1));
        uint64_t result = *((void *)&xmmword_18C550620 + 1);
      }

      --qword_18C468AD0;
      void *v1 = qword_18C550630;
      qword_18C550630 = (uint64_t)v1;
      BOOL v4 = ++dword_18C550638 < dword_18C550614;
      dword_18C55063C = v4;
      if (result)
      {
        uint64_t v5 = &xmmword_18C465410;
        return (*v5)(result);
      }
    }

    else
    {
      int v3 = off_18C4653B8(result);
      if (*((void *)&xmmword_18C550620 + 1))
      {
        xmmword_18C465400(*((void *)&xmmword_18C550620 + 1));
        qword_18C468AD8 -= v3;
        if (*((void *)&xmmword_18C550620 + 1)) {
          xmmword_18C465410(*((void *)&xmmword_18C550620 + 1));
        }
      }

      else
      {
        qword_18C468AD8 -= v3;
      }

      uint64_t v5 = &off_18C4653A8;
      if (!dword_18C465380)
      {
        uint64_t result = (unint64_t)v1;
        return (*v5)(result);
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v1);
      --qword_18C468B10;
      off_18C4653A8(v1);
      uint64_t result = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v5 = &xmmword_18C465410;
        return (*v5)(result);
      }
    }
  }

  return result;
}

uint64_t sub_1812FCAFC(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1812FCB08(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v21 = 0;
  uint64_t v8 = (a2 - 1);
  if (a2 <= 1)
  {
    if (!(_DWORD)a2) {
      return sub_1812FBF50(69568);
    }
    return sub_1812FCD58(a1, a2, a3, a4);
  }

  if ((a4 & 2) == 0 && *(_BYTE *)(a1 + 21) != 1) {
    return sub_1812FCD58(a1, a2, a3, a4);
  }
  uint64_t v9 = *(void *)(a1 + 344);
  if (v9)
  {
    uint64_t result = sub_1812FBF64(v9, a2, &v21);
    if ((_DWORD)result)
    {
      *a3 = 0LL;
      return result;
    }

    if (v21) {
      return sub_1812FCD58(a1, a2, a3, a4);
    }
  }

  uint64_t v20 = 0LL;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 72) + 136LL))( *(void *)(a1 + 72),  *(void *)(a1 + 200) * v8,  *(void *)(a1 + 200),  &v20);
  if ((_DWORD)result) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v20 == 0;
  }
  if (v11)
  {
    if ((_DWORD)result)
    {
      *a3 = 0LL;
      return result;
    }

    return sub_1812FCD58(a1, a2, a3, a4);
  }

  if (*(unsigned __int8 *)(a1 + 21) > 1u || *(_BYTE *)(a1 + 16))
  {
    uint64_t v12 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(a1 + 336) + 72LL),  a2,  0LL);
    if (v12)
    {
      BOOL v13 = (uint64_t *)v12;
      uint64_t v14 = *(void *)(a1 + 336);
      unsigned int v15 = (void *)v13[1];
      if (*v15)
      {
        ++*(void *)(v14 + 24);
        ++v15[7];
LABEL_25:
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 144LL))( *(void *)(a1 + 72),  *(void *)(a1 + 200) * v8,  v20);
        uint64_t result = 0LL;
        *a3 = (uint64_t)v15;
        return result;
      }

      unsigned int v15 = (void *)sub_1812FD158(v14, a2, v13);
      if (v15) {
        goto LABEL_25;
      }
    }
  }

  uint64_t v16 = v20;
  unsigned int v17 = *(void **)(a1 + 168);
  if (v17)
  {
    *(void *)(a1 + 168) = v17[4];
    v17[4] = 0LL;
    *(void *)v17[2] = 0LL;
LABEL_30:
    uint64_t result = 0LL;
    *((_DWORD *)v17 + 12) = a2;
    v17[1] = v16;
    ++*(_DWORD *)(a1 + 152);
    *a3 = (uint64_t)v17;
    return result;
  }

  uint64_t v18 = *(unsigned __int16 *)(a1 + 176) + 80LL;
  int v19 = (void *)sub_18126F0AC(v18);
  unsigned int v17 = v19;
  if (v19)
  {
    bzero(v19, v18);
    v17[2] = v17 + 10;
    *((_WORD *)v17 + 26) = 32;
    v17[7] = 1LL;
    v17[5] = a1;
    goto LABEL_30;
  }

  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 144LL))( *(void *)(a1 + 72),  *(void *)(a1 + 200) * v8,  v16);
  uint64_t result = 7LL;
  *a3 = 0LL;
  return result;
}

uint64_t sub_1812FCD58(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (!(_DWORD)a2) {
    return sub_1812FBF50(69444);
  }
  uint64_t v8 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(a1 + 336) + 72LL),  a2,  *(_BYTE *)(*(void *)(a1 + 336) + 49LL) & 3);
  uint64_t v10 = (uint64_t *)v8;
  if (!v8)
  {
    uint64_t v14 = *(void *)(a1 + 336);
    if (*(_BYTE *)(v14 + 49) == 2)
    {
LABEL_24:
      uint64_t v24 = 7LL;
      goto LABEL_55;
    }

    if ((int)xmmword_18C465458(*(void *)(v14 + 72)) > *(_DWORD *)(v14 + 36))
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        while (*(void *)(v15 + 56) || (*(_WORD *)(v15 + 52) & 8) != 0)
        {
          uint64_t v15 = *(void *)(v15 + 72);
          if (!v15) {
            goto LABEL_10;
          }
        }

        *(void *)(v14 + 16) = v15;
LABEL_18:
        uint64_t v8 = (*(uint64_t (**)(void))(v14 + 56))(*(void *)(v14 + 64));
        if ((_DWORD)v8 != 5 && (_DWORD)v8 != 0)
        {
          uint64_t v24 = v8;
LABEL_55:
          if (!*(void *)(*(void *)(a1 + 336) + 24LL))
          {
            int v22 = *(unsigned __int8 *)(a1 + 21);
            if (*(_BYTE *)(a1 + 21))
            {
              if (v22 == 1)
              {
                if (!*(_BYTE *)(a1 + 8)) {
                  sub_1812A1380(a1, 0, 0);
                }
              }

              else if (v22 != 6)
              {
                if (off_18C550648) {
                  double v9 = off_18C550648(v8);
                }
                uint64_t v23 = sub_1812B5930(a1, v9);
                if (off_18C550650) {
                  off_18C550650(v23);
                }
              }
            }

            sub_1812A1948(a1);
          }

          *a3 = 0LL;
          return v24;
        }

        goto LABEL_23;
      }

uint64_t *sub_1812FD0DC(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = (uint64_t *)(*((uint64_t (**)(void, uint64_t, void))&xmmword_18C465458 + 1))( *(void *)(*(void *)(a1 + 336) + 72LL),  a2,  0LL);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (uint64_t *)result[1];
    if (*result)
    {
      ++*(void *)(*(void *)(a1 + 336) + 24LL);
      ++result[7];
    }

    else
    {
      return (uint64_t *)sub_1812FD158(*(void *)(a1 + 336), v2, v5);
    }
  }

  return result;
}

uint64_t sub_1812FD158(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result = a3[1];
  do
  {
    *(_OWORD *)(result + 48) = 0uLL;
    *(_OWORD *)(result + 64) = 0uLL;
    *(_OWORD *)(result + 32) = 0uLL;
    uint64_t v5 = *a3;
    *(void *)uint64_t result = a3;
    *(void *)(result + 8) = v5;
    *(void *)(result + 80) = 0LL;
    *(void *)(result + 16) = result + 80;
    *(void *)(result + 24) = a1;
    *(_DWORD *)(result + 48) = a2;
    *(_WORD *)(result + 52) = 1;
    uint64_t result = a3[1];
  }

  while (!*(void *)result);
  ++*(void *)(a1 + 24);
  ++*(void *)(result + 56);
  return result;
}

uint64_t sub_1812FD1B4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 128) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 16LL;
    do
    {
      uint64_t result = sub_1812C08E0(*(void *)(*(void *)(v1 + 120) + v3));
      ++v2;
      v3 += 56LL;
    }

    while (v2 < *(int *)(v1 + 128));
  }

  BOOL v4 = *(void ***)(v1 + 88);
  uint64_t v5 = (uint64_t (**)(void))*v4;
  if (*(_BYTE *)(v1 + 8))
  {
    uint64_t v5 = (uint64_t (**)(void))&unk_189B6D428;
  }

  else if (!v5)
  {
    goto LABEL_9;
  }

  uint64_t result = v5[1](*(void *)(v1 + 88));
  *BOOL v4 = 0LL;
LABEL_9:
  uint64_t v6 = *(void *)(v1 + 120);
  if (v6)
  {
    BOOL v7 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_15:
      uint64_t result = (*v7)(v6);
      goto LABEL_16;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v6);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v6);
    uint64_t v6 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v7 = &xmmword_18C465410;
      goto LABEL_15;
    }
  }

uint64_t *sub_1812FD2DC(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t v4 = *(void *)(v1 + 72);
      if (*(void *)(v3 + 16) == v1)
      {
        *(void *)(v3 + 16) = v4;
        uint64_t v5 = *(void *)(v1 + 64);
        if (!v5)
        {
LABEL_9:
          *(void *)(v3 + 8) = v4;
          if (!v4)
          {
            *(void *)uint64_t v3 = 0LL;
            *(_BYTE *)(v3 + 49) = 2;
            goto LABEL_11;
          }

uint64_t sub_1812FD3A8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 72);
  if (*(void *)result)
  {
    char v4 = a2;
    if (!*(_BYTE *)(a1 + 17)) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 64LL))(result, a2);
    }
    if (*(_BYTE *)(a1 + 22) != 5) {
      *(_BYTE *)(a1 + 22) = v4;
    }
  }

  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  return result;
}

void *sub_1812FD400(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return sub_18126C6E4(*(void **)(a1 + 336), 0);
}

uint64_t sub_1812FD430(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(v2 + 37);
  if (a2 < 10)
  {
    *(_BYTE *)(a1 + 10) = 4;
    *(_BYTE *)(a1 + 8) = 0;
    if (a2 == 5)
    {
      *(void *)(a1 + 120) = sub_1812FDB08;
      *(void *)(a1 + 128) = sub_1812FDB2C;
      __int16 v3 = 1;
      goto LABEL_13;
    }

    if (a2 != 2)
    {
      *(_WORD *)(a1 + 1) = 0;
      *(void *)(a1 + 120) = sub_1812AC150;
      *(void *)(a1 + 128) = sub_1812FDA00;
      return sub_1812FD54C(78893LL, a1);
    }

    *(_WORD *)(a1 + 1) = 0;
    char v4 = sub_1812AC150;
LABEL_9:
    *(void *)(a1 + 120) = v4;
    *(void *)(a1 + 128) = sub_1812FDA00;
    int v5 = *(_DWORD *)(v2 + 42);
LABEL_14:
    *(_DWORD *)(a1 + 14) = v5;
    return 0LL;
  }

  *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  if (a2 == 10)
  {
    *(_WORD *)(a1 + 1) = 0;
    char v4 = sub_1812FD8E4;
    goto LABEL_9;
  }

  if (a2 == 13)
  {
    *(void *)(a1 + 120) = sub_1812FD748;
    *(void *)(a1 + 128) = sub_18129BBA4;
    __int16 v3 = 257;
LABEL_13:
    *(_WORD *)(a1 + 1) = v3;
    int v5 = *(_DWORD *)(v2 + 46);
    goto LABEL_14;
  }

  *(_WORD *)(a1 + 1) = 0;
  *(void *)(a1 + 120) = sub_1812FD8E4;
  *(void *)(a1 + 128) = sub_1812FDA00;
  return sub_1812FD54C(78869LL, a1);
}

uint64_t sub_1812FD54C(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  if (off_18C550648) {
    off_18C550648(a1);
  }
  char v4 = sqlite3_mprintf( "database corruption page %u of %s",  *(_DWORD *)(a2 + 4),  *(const char **)(**(void **)(a2 + 72) + 216LL));
  int v5 = v4;
  if (off_18C550650) {
    off_18C550650(v4);
  }
  if (v5)
  {
    sub_1812F30C4(11LL, v3, v5);
    uint64_t v6 = (void (**)(const char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_11:
      (*v6)(v5);
      return sub_1812FBF50(76991);
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    int v5 = (const char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = (void (**)(const char *))&xmmword_18C465410;
      goto LABEL_11;
    }
  }

  return sub_1812FBF50(76991);
}

uint64_t sub_1812FD65C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    int v1 = -4;
  }
  else {
    int v1 = -5;
  }
  if (!*(_WORD *)(a1 + 24)) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = *(unsigned __int16 *)(a1 + 18);
  unsigned int v5 = v4 + 2 * *(unsigned __int16 *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 80);
  signed int v7 = *(_DWORD *)(*(void *)(a1 + 72) + 56LL);
  int v8 = v1 + v7;
  uint64_t v9 = 79006LL;
  for (uint64_t i = v4 + v6 + 1; ; i += 2LL)
  {
    unsigned int v11 = __rev16(*(unsigned __int16 *)(i - 1));
    if ((int)(v11 + (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 120))(a1, v6 + v11)) > v7)
    {
      uint64_t v9 = 79011LL;
      return sub_1812FD54C(v9, a1);
    }
  }

  return sub_1812FD54C(v9, a1);
}

uint64_t sub_1812FD748(uint64_t a1, char *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = a2;
  if (*a2 < 0)
  {
    uint64_t v3 = a2 + 1;
    int v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v2 = v4;
      goto LABEL_6;
    }

    uint64_t v3 = a2 + 2;
    unsigned int v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      uint64_t v3 = a2 + 3;
      unsigned int v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        uint64_t v3 = a2 + 4;
        int v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0) {
          goto LABEL_3;
        }
        uint64_t v3 = a2 + 5;
        unsigned int v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          uint64_t v3 = a2 + 6;
          int v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0) {
            goto LABEL_3;
          }
          uint64_t v3 = a2 + 7;
          unsigned int v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            uint64_t v3 = a2 + 8;
            int v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }

uint64_t sub_1812FD8E4(uint64_t a1, char *a2)
{
  unsigned int v2 = *a2;
  int v3 = (int)a2;
  if (*a2 < 0)
  {
    int v3 = (_DWORD)a2 + 1;
    int v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v2 = v4;
      goto LABEL_6;
    }

    int v3 = (_DWORD)a2 + 2;
    unsigned int v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      int v3 = (_DWORD)a2 + 3;
      unsigned int v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        int v3 = (_DWORD)a2 + 4;
        int v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0) {
          goto LABEL_3;
        }
        int v3 = (_DWORD)a2 + 5;
        unsigned int v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          int v3 = (_DWORD)a2 + 6;
          int v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0) {
            goto LABEL_3;
          }
          int v3 = (_DWORD)a2 + 7;
          unsigned int v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            int v3 = (_DWORD)a2 + 8;
            int v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }

uint64_t sub_1812FDA00(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = (char *)(a2 + *(unsigned __int8 *)(result + 10));
  unsigned int v4 = *v3;
  if (*v3 < 0)
  {
    int v5 = (unsigned __int8 *)(v3 + 1);
    int v6 = v3[1] & 0x7F | ((v4 & 0x7F) << 7);
    if ((v3[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v4 = v6;
      int v3 = (char *)v5;
      goto LABEL_8;
    }

    unsigned int v7 = (unsigned __int8 *)(v3 + 2);
    unsigned int v4 = v3[2] & 0x7F | (v6 << 7);
    if ((v3[2] & 0x80) == 0) {
      goto LABEL_5;
    }
    unsigned int v4 = v3[3] & 0x7F | (v4 << 7);
    if (v3[3] < 0)
    {
      int v5 = (unsigned __int8 *)(v3 + 4);
      int v6 = v3[4] & 0x7F | (v4 << 7);
      if ((v3[4] & 0x80) == 0) {
        goto LABEL_3;
      }
      unsigned int v7 = (unsigned __int8 *)(v3 + 5);
      unsigned int v4 = v3[5] & 0x7F | (v6 << 7);
      if ((v3[5] & 0x80) == 0) {
        goto LABEL_5;
      }
      int v5 = (unsigned __int8 *)(v3 + 6);
      int v6 = v3[6] & 0x7F | (v4 << 7);
      if ((v3[6] & 0x80) == 0) {
        goto LABEL_3;
      }
      unsigned int v7 = (unsigned __int8 *)(v3 + 7);
      unsigned int v4 = v3[7] & 0x7F | (v6 << 7);
      if ((v3[7] & 0x80) == 0)
      {
LABEL_5:
        int v3 = (char *)v7;
        goto LABEL_8;
      }

      unsigned __int8 v10 = v3[8];
      v3 += 8;
      unsigned int v4 = v10 & 0x7F | (v4 << 7);
    }

    else
    {
      v3 += 3;
    }
  }

uint64_t sub_1812FDB08(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 4LL;
  do
  {
    unsigned __int16 v3 = v2 + 1;
    if (v2 > 0xB) {
      break;
    }
    int v4 = *(char *)(a2 + v2++);
  }

  while (v4 < 0);
  return v3;
}

uint64_t sub_1812FDB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_18129BD74((char *)(a2 + 4), (unint64_t *)a3);
  *(_WORD *)(a3 + 22) = (result + 4);
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 20) = 0;
  *(void *)(a3 + 8) = 0LL;
  return result;
}

uint64_t sub_1812FDB6C(uint64_t result, __int16 a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(result + 16);
  *(_WORD *)(a3 + 20) = v3;
  *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 8) + v3 - a2 + 4;
  return result;
}

uint64_t sub_1812FDBB8(int a1)
{
  if (SHIDWORD(xmmword_18C550600) < a1) {
    goto LABEL_12;
  }
  if (*((void *)&xmmword_18C550620 + 1)) {
    xmmword_18C465400(*((void *)&xmmword_18C550620 + 1));
  }
  uint64_t v2 = qword_18C550630;
  if (qword_18C550630)
  {
    qword_18C550630 = *(void *)qword_18C550630;
    BOOL v3 = dword_18C550638-- <= dword_18C550614;
    dword_18C55063C = v3;
    if (qword_18C468B50 < a1) {
      qword_18C468B50 = a1;
    }
    uint64_t v4 = qword_18C468AD0;
    uint64_t v5 = ++qword_18C468AD0;
    if (v4 >= qword_18C468B20) {
      qword_18C468B20 = v5;
    }
  }

  if (*((void *)&xmmword_18C550620 + 1)) {
    xmmword_18C465410(*((void *)&xmmword_18C550620 + 1));
  }
  if (!v2)
  {
LABEL_12:
    uint64_t v6 = sub_18126F0AC(a1);
    uint64_t v2 = v6;
    if (v6)
    {
      int v7 = off_18C4653B8(v6);
      if (*((void *)&xmmword_18C550620 + 1)) {
        xmmword_18C465400(*((void *)&xmmword_18C550620 + 1));
      }
      if (qword_18C468B50 < a1) {
        qword_18C468B50 = a1;
      }
      uint64_t v8 = qword_18C468AD8 + v7;
      qword_18C468AD8 = v8;
      if (v8 > qword_18C468B28) {
        qword_18C468B28 = v8;
      }
      if (*((void *)&xmmword_18C550620 + 1)) {
        xmmword_18C465410(*((void *)&xmmword_18C550620 + 1));
      }
    }
  }

  return v2;
}

uint64_t sub_1812FDD28(uint64_t a1)
{
  uint64_t result = 0LL;
  int v5 = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 32)
      && (uint64_t v3 = *(void *)(a1 + 72), *(void *)v3)
      && (LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 80LL))(v3, 20LL, &v5),
          (_DWORD)result != 12))
    {
      if (v5) {
        BOOL v4 = (_DWORD)result == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        return 1032LL;
      }
      else {
        return result;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1812FDD9C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 11)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 48LL))(*(void *)(a1 + 80), a1 + 104);
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80), 2LL);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 48LL))(*(void *)(a1 + 80), a1 + 104);
  }
  return result;
}

const char *sub_1812FDDF4()
{
  uint64_t result = getenv("SQLITE_MIN_CACHE_SIZE");
  if (result) {
    uint64_t result = (const char *)atoi(result);
  }
  dword_18C468CD8 = (int)result;
  return result;
}

uint64_t sub_1812FDE20(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 88);
  if (!result) {
    goto LABEL_17;
  }
  uint64_t result = ((uint64_t (*)(void))*(&xmmword_18C465400 + 1))();
  if (!(_DWORD)result)
  {
    uint64_t v2 = *(void *)(v1 + 8);
LABEL_17:
    *(void *)(v2 + 8) = *(void *)v1;
    *(_BYTE *)(v1 + 18) = 1;
    return result;
  }

  for (uint64_t i = *(void *)(v1 + 32); i; uint64_t i = *(void *)(i + 32))
  {
    if (*(_BYTE *)(i + 18)) {
      sub_1812FDEFC(i);
    }
  }

  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t result = *(void *)(v5 + 88);
  if (result)
  {
    uint64_t result = xmmword_18C465400(result);
    uint64_t v5 = *(void *)(v1 + 8);
  }

  *(void *)(v5 + 8) = *(void *)v1;
LABEL_11:
  *(_BYTE *)(v1 + 18) = 1;
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return result;
    }
    if (*(_DWORD *)(v1 + 20))
    {
      uint64_t v6 = *(void *)(v1 + 8);
      uint64_t result = *(void *)(v6 + 88);
      if (result)
      {
        uint64_t result = xmmword_18C465400(result);
        uint64_t v6 = *(void *)(v1 + 8);
      }

      *(void *)(v6 + 8) = *(void *)v1;
      goto LABEL_11;
    }
  }

uint64_t sub_1812FDEFC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 88LL);
  if (result) {
    uint64_t result = xmmword_18C465410(result);
  }
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t sub_1812FDF34(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)v6;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 2 || !a2 && v8 == 1) {
    goto LABEL_7;
  }
  if ((*(_BYTE *)(*(void *)a1 + 51LL) & 2) != 0 && !*(_BYTE *)(v7 + 18)) {
    *(_WORD *)(v6 + 40) &= ~1u;
  }
  __int16 v13 = *(_WORD *)(v6 + 40);
  if (a2 && (v13 & 1) != 0)
  {
    uint64_t v10 = 8LL;
    goto LABEL_14;
  }

  if (!a2)
  {
    if ((v13 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }

  if ((v13 & 0x80) != 0 || *(_BYTE *)(v6 + 36) == 2)
  {
LABEL_33:
    uint64_t v15 = *(void **)(v6 + 128);
    goto LABEL_34;
  }

  if (a2 < 2) {
    goto LABEL_35;
  }
  uint64_t v14 = *(void *)(v6 + 120);
  if (!v14) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v15 = *(void **)v14;
    if (*(void *)v14 != a1) {
      break;
    }
    uint64_t v14 = *(void *)(v14 + 16);
    if (!v14) {
      goto LABEL_35;
    }
  }

uint64_t sub_1812FE760(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
  if (!(_DWORD)result)
  {
    uint64_t v7 = *(void *)(v10 + 16);
    if (*(_DWORD *)(v7 + 4) != a2)
    {
      uint64_t v8 = *(void *)(v10 + 8);
      *(void *)(v7 + 112) = v10;
      *(void *)(v7 + 72) = a1;
      *(void *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1) {
        char v9 = 100;
      }
      else {
        char v9 = 0;
      }
      *(_BYTE *)(v7 + 9) = v9;
    }

    *a3 = v7;
  }

  return result;
}

void *sub_1812FE7E0(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3)
    {
      for (uint64_t i = 0LL; ; i += 32LL)
      {
        uint64_t v5 = *(void *)(v3 + i + 8);
        if (v5)
        {
          if (*(void **)(v5 + 8) == result) {
            break;
          }
        }
      }

      uint64_t v6 = v3 + i;
      if (!*(_BYTE *)(v6 + 17) && i != 32 && *(unsigned __int8 *)(v6 + 16) != a2)
      {
        *(_BYTE *)(v6 + 16) = a2;
        uint64_t v7 = *result;
        int v8 = *(_DWORD *)(v2 + 48) & 0x38 | a2;
        if (*(_BYTE *)(*result + 16LL))
        {
          BOOL v9 = 0;
          *(_WORD *)(v7 + 11) = 1;
          *(_BYTE *)(v7 + 13) = 0;
        }

        else
        {
          BOOL v9 = (v8 & 7u) > 2;
          *(_BYTE *)(v7 + 12) = v9;
          *(_BYTE *)(v7 + 13) = (v8 & 7) == 4;
          *(_BYTE *)(v7 + 11) = (v8 & 7) == 1;
          if ((v8 & 7) != 1)
          {
            int v11 = 0;
            if ((v8 & 8) != 0) {
              char v10 = 3;
            }
            else {
              char v10 = 2;
            }
            *(_BYTE *)(v7 + 14) = v10;
            goto LABEL_15;
          }
        }

        char v10 = 0;
        *(_BYTE *)(v7 + 14) = 0;
        int v11 = 1;
LABEL_15:
        char v12 = 4 * v10;
        if (v9) {
          char v13 = v10;
        }
        else {
          char v13 = 0;
        }
        if ((v8 & 0x10) != 0) {
          int v14 = v11;
        }
        else {
          int v14 = 1;
        }
        if (v14) {
          char v15 = v12;
        }
        else {
          char v15 = 12;
        }
        *(_BYTE *)(v7 + 15) = v15 | v13;
        *(_BYTE *)(v7 + 25) = *(_BYTE *)(v7 + 25) & 0xFE | ((v8 & 0x20) == 0);
      }
    }
  }

  return result;
}

uint64_t sub_1812FE900(uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    uint64_t v3 = *((unsigned __int8 *)a1 + 22);
    if (v3 < 4 || (_DWORD)v3 == 5)
    {
      if (!*((_BYTE *)a1 + 17))
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[9] + 56LL))(a1[9], 4LL);
        if ((_DWORD)v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = a1[9];
          if (*(void *)v7)
          {
            if (!*((_BYTE *)a1 + 17)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 64LL))(v7, v3);
            }
            if (*((_BYTE *)a1 + 22) != 5) {
              *((_BYTE *)a1 + 22) = v3;
            }
          }

          *((_BYTE *)a1 + 23) = *((_BYTE *)a1 + 16);
          goto LABEL_38;
        }

        int v2 = *((unsigned __int8 *)a1 + 8);
      }

      *((_BYTE *)a1 + 22) = 4;
    }

    else
    {
      int v2 = 1;
    }
  }

  uint64_t v8 = *a1;
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[44];
  uint64_t v11 = a1[26];
  int v12 = *((_DWORD *)a1 + 45);
  a1[43] = 0LL;
  uint64_t v13 = *(int *)(v8 + 4) + 168LL;
  int v14 = (void *)sub_18126F0AC(v13);
  if (!v14)
  {
    uint64_t v6 = 7LL;
    goto LABEL_38;
  }

  uint64_t v15 = (uint64_t)v14;
  bzero(v14, v13);
  *(void *)(v15 + 8) = v9;
  *(void *)(v15 + 16) = v15 + 168;
  *(void *)uint64_t v15 = v8;
  *(_WORD *)(v15 + 60) = -1;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 128) = v10;
  *(_WORD *)(v15 + 68) = 257;
  *(_BYTE *)(v15 + 63) = 2 * (v2 != 0);
  if ((v12 & 1) != 0) {
    char v16 = 0;
  }
  else {
    char v16 = 6;
  }
  char v25 = v16 | v12 & 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v8, v10);
  if ((_DWORD)v17)
  {
    uint64_t v6 = v17;
    sub_1812FC394(v15, 0LL);
    uint64_t v18 = *(void *)(v15 + 16);
    if (*(void *)v18)
    {
      (*(void (**)(void))(*(void *)v18 + 8LL))(*(void *)(v15 + 16));
      *(void *)uint64_t v18 = 0LL;
    }

    uint64_t v19 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_28;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    off_18C4653A8(v15);
    uint64_t v15 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v19 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_28:
      (*v19)(v15);
    }
  }

  else
  {
    if ((v25 & 1) != 0) {
      *(_BYTE *)(v15 + 66) = 1;
    }
    if (*(void *)v9)
    {
      __int16 v20 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96LL))(v9);
      if ((v20 & 0x400) != 0) {
        *(_BYTE *)(v15 + 68) = 0;
      }
      if ((v20 & 0x1000) != 0) {
        *(_BYTE *)(v15 + 69) = 0;
      }
    }

    uint64_t v6 = 0LL;
    a1[43] = v15;
  }

uint64_t sub_1812FEBEC(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 128);
  uint64_t v5 = sub_18127D33C(*(void *)(a1 + 120), 56LL * a2);
  if (v5)
  {
    uint64_t v6 = v5;
    bzero((void *)(v5 + 56LL * v4), 56LL * (a2 - v4));
    *(void *)(a1 + 120) = v6;
    if (a2 <= v4) {
      return 0LL;
    }
    for (uint64_t i = (_DWORD *)(v6 + 56LL * v4 + 24); ; i += 14)
    {
      int v8 = *(_DWORD *)(a1 + 32);
      *uint64_t i = v8;
      if (!**(void **)(a1 + 80) || (uint64_t v9 = *(void *)(a1 + 96), v9 <= 0)) {
        uint64_t v9 = *(unsigned int *)(a1 + 184);
      }
      *((void *)i - 3) = v9;
      i[1] = *(_DWORD *)(a1 + 60);
      uint64_t v10 = (_OWORD *)sub_18126F0AC(512LL);
      if (!v10) {
        break;
      }
      v10[30] = 0u;
      v10[31] = 0u;
      v10[28] = 0u;
      v10[29] = 0u;
      v10[26] = 0u;
      v10[27] = 0u;
      v10[24] = 0u;
      v10[25] = 0u;
      v10[22] = 0u;
      v10[23] = 0u;
      v10[20] = 0u;
      v10[21] = 0u;
      v10[18] = 0u;
      v10[19] = 0u;
      v10[16] = 0u;
      v10[17] = 0u;
      v10[14] = 0u;
      v10[15] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[6] = 0u;
      v10[7] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[2] = 0u;
      void v10[3] = 0u;
      _OWORD *v10 = 0u;
      v10[1] = 0u;
      *(_DWORD *)uint64_t v10 = v8;
      *((void *)i - 1) = v10;
      i[2] = 1;
      uint64_t v11 = *(_DWORD **)(a1 + 344);
      if (v11)
      {
        i[3] = v11[22];
        i[4] = v11[24];
        i[5] = v11[25];
        i[6] = v11[34];
      }

      *(_DWORD *)(a1 + 128) = ++v4;
      if (a2 == v4) {
        return 0LL;
      }
    }

    *((void *)i - 1) = 0LL;
    i[2] = 1;
  }

  return 7LL;
}

uint64_t sub_1812FED50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(unsigned int *)(v1 + 184) / *(uint64_t *)(v1 + 200);
  *(_BYTE *)(v1 + 25) |= 4u;
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  int v4 = (v3 - 1) & -(int)v2;
  unsigned int v5 = *(_DWORD *)(v1 + 32);
  if (v3 > v5) {
    int v6 = v3 - v4;
  }
  else {
    int v6 = v2;
  }
  if (v6 < 1)
  {
    uint64_t v15 = 0LL;
    goto LABEL_56;
  }

  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = (v4 + 1);
  do
  {
    if (v8 + (_DWORD)v10 == *(_DWORD *)(a1 + 48)) {
      goto LABEL_13;
    }
    uint64_t v11 = *(_DWORD **)(v1 + 64);
    if (!v11) {
      goto LABEL_13;
    }
    unsigned int v12 = v8 + v4;
    while (1)
    {
      unsigned int v13 = v11[2];
      if (!v13) {
        break;
      }
      unsigned int v14 = v12 / v13;
      v12 %= v13;
      uint64_t v11 = *(_DWORD **)&v11[2 * v14 + 4];
      if (!v11) {
        goto LABEL_13;
      }
    }

    if (*v11 >= 0xF81u)
    {
      unsigned int v23 = v12 % 0x7C;
      uint64_t v24 = v11 + 4;
      int v25 = v24[v12 % 0x7C];
      if (!v25) {
        goto LABEL_13;
      }
      unsigned int v26 = v12 + 1;
      while (v25 != v26)
      {
        if (v23 == 123) {
          unsigned int v23 = 0;
        }
        else {
          ++v23;
        }
        int v25 = v24[v23];
        if (!v25) {
          goto LABEL_13;
        }
      }

uint64_t sub_1812FF10C(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 52);
  if ((v1 & 0x11) != 0)
  {
    *(_WORD *)(result + 52) = v1 & 0xFFEF;
    if ((v1 & 1) != 0)
    {
      *(_WORD *)(result + 52) = v1 & 0xFFEF ^ 3;
      uint64_t v2 = *(uint64_t **)(result + 24);
      uint64_t v3 = *v2;
      *(void *)(result + 64) = *v2;
      *(void *)(result + 72) = 0LL;
      if (v3)
      {
        *(void *)(v3 + 72) = result;
      }

      else
      {
        v2[1] = result;
        if (*((_BYTE *)v2 + 48)) {
          *((_BYTE *)v2 + 49) = 1;
        }
      }

      *uint64_t v2 = result;
      if ((v1 & 8) == 0 && !v2[2]) {
        v2[2] = result;
      }
    }
  }

  return result;
}

uint64_t sub_1812FF174(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 96);
  int v4 = *(uint64_t (**)(void, void, void, uint64_t))(v2 + 296);
  if (v4)
  {
    uint64_t v5 = 7LL;
    uint64_t v6 = v4(*(void *)(v2 + 320), *(void *)(a1 + 8), *(unsigned int *)(a1 + 48), 7LL);
    if (!v6) {
      return v5;
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
  }

  unsigned int v7 = *(_DWORD *)(v2 + 56);
  unint64_t v8 = (*(_DWORD *)(v2 + 200) - 200);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = v8 - 200;
    if (v8 < 0xC8) {
      unint64_t v9 = 0LL;
    }
    if (v8 < 0xC9)
    {
      unint64_t v10 = (*(_DWORD *)(v2 + 200) - 200);
      do
      {
LABEL_13:
        v7 += *(unsigned __int8 *)(v6 + v10);
        BOOL v15 = v10 > 0xC8;
        v10 -= 200LL;
      }

      while (v15);
      goto LABEL_14;
    }

    int v11 = 0;
    uint64_t v12 = (((v9 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
    unint64_t v10 = v8 - 200 * (v12 & 0x7FFFFFE);
    unsigned int v13 = (unsigned __int8 *)(v6 + v8);
    uint64_t v14 = v12 & 0x7FFFFFE;
    do
    {
      v7 += *v13;
      v11 += *(v13 - 200);
      v13 -= 400;
      v14 -= 2LL;
    }

    while (v14);
    v7 += v11;
    if (v12 != (v12 & 0x7FFFFFE)) {
      goto LABEL_13;
    }
  }

_BYTE *sub_1812FF3A4(uint64_t *a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = *a1;
    do
    {
      uint64_t v3 = *(void *)(v2 + 64);
      *(void *)(v2 + 32) = v3;
      uint64_t v2 = v3;
    }

    while (v3);
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    if (v1)
    {
      do
      {
LABEL_7:
        uint64_t v4 = 0LL;
        uint64_t v5 = (_BYTE *)v1;
        uint64_t v1 = *(void *)(v1 + 32);
        *((void *)v5 + 4) = 0LL;
        do
        {
          uint64_t v6 = *((void *)&v28 + v4);
          if (!v6)
          {
            *((void *)&v28 + v4) = v5;
            if (!v1) {
              goto LABEL_23;
            }
            goto LABEL_7;
          }

          unsigned int v7 = v26;
          do
          {
            unint64_t v8 = v7;
            unsigned int v7 = (_BYTE *)v6;
            unsigned int v9 = *(_DWORD *)(v6 + 48);
            unint64_t v10 = v5;
            while (1)
            {
              uint64_t v5 = v10;
              if (v9 < *((_DWORD *)v10 + 12)) {
                break;
              }
              *((void *)v8 + 4) = v10;
              unint64_t v10 = (_BYTE *)*((void *)v10 + 4);
              unint64_t v8 = v5;
              if (!v10)
              {
                int v11 = v5;
                uint64_t v5 = v7;
                goto LABEL_15;
              }
            }

            *((void *)v8 + 4) = v7;
            uint64_t v6 = *((void *)v7 + 4);
            int v11 = v7;
          }

          while (v6);
LABEL_15:
          *((void *)v11 + 4) = v5;
          uint64_t v5 = v27;
          *((void *)&v28 + v4++) = 0LL;
        }

        while (v4 != 31);
        uint64_t v12 = *((void *)&v43 + 1);
        unsigned int v13 = v26;
        do
        {
          uint64_t v14 = v13;
          unsigned int v13 = (_BYTE *)v12;
          unsigned int v15 = *(_DWORD *)(v12 + 48);
          uint64_t v16 = v5;
          while (1)
          {
            uint64_t v5 = v16;
            if (v15 < *((_DWORD *)v16 + 12)) {
              break;
            }
            *((void *)v14 + 4) = v16;
            uint64_t v16 = (_BYTE *)*((void *)v16 + 4);
            uint64_t v14 = v5;
            if (!v16)
            {
              uint64_t v17 = v5;
              uint64_t v5 = v13;
              goto LABEL_22;
            }
          }

          *((void *)v14 + 4) = v13;
          uint64_t v12 = *((void *)v13 + 4);
          uint64_t v17 = v13;
        }

        while (v12);
LABEL_22:
        *((void *)v17 + 4) = v5;
        *((void *)&v43 + 1) = v27;
      }

      while (v1);
LABEL_23:
      uint64_t result = (_BYTE *)v28;
    }

    else
    {
      uint64_t result = 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
  }

  for (uint64_t i = 1LL; i != 32; ++i)
  {
    unsigned int v20 = (_BYTE *)*((void *)&v28 + i);
    if (v20)
    {
      if (result)
      {
        int v21 = v26;
        do
        {
          uint64_t v22 = v21;
          int v21 = result;
          unsigned int v23 = *((_DWORD *)result + 12);
          int v24 = v20;
          while (1)
          {
            unsigned int v20 = v24;
            if (v23 < *((_DWORD *)v24 + 12)) {
              break;
            }
            *((void *)v22 + 4) = v24;
            int v24 = (_BYTE *)*((void *)v24 + 4);
            uint64_t v22 = v20;
            if (!v24)
            {
              unsigned int v25 = v20;
              unsigned int v20 = result;
              goto LABEL_37;
            }
          }

          *((void *)v22 + 4) = result;
          uint64_t result = (_BYTE *)*((void *)result + 4);
          unsigned int v25 = v21;
        }

        while (result);
LABEL_37:
        *((void *)v25 + 4) = v20;
        uint64_t result = v27;
      }

      else
      {
        uint64_t result = (_BYTE *)*((void *)&v28 + i);
      }
    }
  }

  return result;
}

uint64_t sub_1812FF5F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 23) || !*(_DWORD *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(a1 + 288))(a1, 1LL, &v9, 0LL);
  uint64_t v4 = v9;
  if ((_DWORD)v1) {
    goto LABEL_6;
  }
  uint64_t v5 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v5[8] >= *(_DWORD *)(v9 + 48))
  {
    if (!v5[32]) {
      goto LABEL_21;
    }
    uint64_t v7 = sub_1812FAFE4(v9);
LABEL_19:
    uint64_t v1 = v7;
    uint64_t v4 = v9;
    if ((_DWORD)v1) {
      goto LABEL_6;
    }
    if (!v9)
    {
LABEL_22:
      uint64_t v1 = 0LL;
      *(_BYTE *)(a1 + 23) = 1;
LABEL_6:
      if (!v4) {
        return v1;
      }
      goto LABEL_11;
    }

uint64_t sub_1812FF754(uint64_t a1, _BYTE *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 9) == 4) {
    return 0LL;
  }
  uint64_t v3 = **(void **)(a1 + 80);
  if (!v3) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 24) = 1;
  LOBYTE(v5) = *a2;
  if (*a2)
  {
    uint64_t v6 = 0LL;
    unsigned int v7 = 0;
    do
    {
      v7 += (char)v5;
      int v5 = a2[++v6];
    }

    while (v5);
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = 0LL;
    unsigned int v7 = 0;
    uint64_t v6 = 0LL;
  }

  uint64_t v10 = *(void *)(a1 + 96);
  if (*(_BYTE *)(a1 + 12))
  {
    if (v10) {
      uint64_t v10 = *(unsigned int *)(a1 + 184) + *(unsigned int *)(a1 + 184) * ((v10 - 1) / *(unsigned int *)(a1 + 184));
    }
    *(void *)(a1 + 96) = v10;
  }

  LODWORD(v15) = bswap32(*(_DWORD *)(a1 + 192));
  uint64_t result = (*(uint64_t (**)(void))(v3 + 24))();
  if (!(_DWORD)result)
  {
    uint64_t v11 = v10 + 4;
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  a2,  v8,  v11);
    if (!(_DWORD)result)
    {
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v13 = v11 + v6;
      LODWORD(v15) = bswap32(v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v12 + 24LL))( v12,  &v15,  4LL,  v11 + v6);
      if (!(_DWORD)result)
      {
        uint64_t v14 = *(void *)(a1 + 80);
        LODWORD(v15) = bswap32(v7);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v14 + 24LL))( v14,  &v15,  4LL,  v13 + 4);
        if (!(_DWORD)result)
        {
          uint64_t result = (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  &unk_1813C6CE1,  8LL,  v13 + 8);
          if (!(_DWORD)result)
          {
            *(void *)(a1 + 96) += (v8 + 20);
            uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 48LL))( *(void *)(a1 + 80),  &v15);
            if (!(_DWORD)result)
            {
              if (v15 > *(void *)(a1 + 96)) {
                return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 32LL))(*(void *)(a1 + 80));
              }
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1812FF924(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v5 = a3;
  if (a3 >= 2)
  {
    unsigned int v8 = (a3 - 2) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
    else {
      int v9 = 2;
    }
    if (v9 + v8 == a3)
    {
LABEL_9:
      if (a4) {
        return 0LL;
      }
      unsigned int v11 = dword_18C54FA50 / *(_DWORD *)(a1 + 52);
      do
      {
        while (1)
        {
          do
            unsigned int v14 = v5--;
          while (v11 + 2 == v14);
          if (v5 >= 2) {
            break;
          }
          if (v5) {
            goto LABEL_19;
          }
        }

        unsigned int v12 = (v14 - 3) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
        if (v12 + 1 == v11) {
          int v13 = 3;
        }
        else {
          int v13 = 2;
        }
      }

      while (v5 == v13 + v12);
LABEL_19:
      uint64_t v10 = 0LL;
      *(_BYTE *)(a1 + 35) = 1;
      *(_DWORD *)(a1 + 64) = v5;
      return v10;
    }
  }

  else if (!a3)
  {
    goto LABEL_9;
  }

  if (!bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 80LL) + 36LL))) {
    return 101LL;
  }
  uint64_t v10 = sub_18130008C((_DWORD *)a1, a3, &v32, &v31);
  if (!(_DWORD)v10)
  {
    int v15 = v32;
    if (v32 == 2)
    {
      if (a4) {
        goto LABEL_9;
      }
      uint64_t v16 = sub_1812B48CC(a1, &v30, (int *)&v28, v5, 1);
      if (!(_DWORD)v16)
      {
        sub_18130023C(v30);
        goto LABEL_9;
      }
    }

    else
    {
      if (v32 != 1)
      {
        uint64_t v10 = sub_1812FE760(a1, v5, &v30);
        if ((_DWORD)v10) {
          return v10;
        }
        if (a4) {
          unsigned int v18 = 0;
        }
        else {
          unsigned int v18 = a2;
        }
        do
        {
          unsigned int v19 = *(_DWORD *)(a1 + 64);
          uint64_t v20 = sub_1812B48CC(a1, &v28, (int *)&v29, v18, 2 * (a4 == 0));
          if ((_DWORD)v20)
          {
            uint64_t v10 = v20;
            if (v30)
            {
              uint64_t v24 = *(void *)(v30 + 112);
              if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
              {
                uint64_t v26 = *(void *)(v24 + 40);
                --*(_DWORD *)(v26 + 152);
                *(void *)(v24 + 32) = *(void *)(v26 + 168);
                *(void *)(v26 + 168) = v24;
                (*(void (**)(void, void, void))(**(void **)(v26 + 72) + 144LL))( *(void *)(v26 + 72),  *(void *)(v26 + 200) * (*(_DWORD *)(v24 + 48) - 1),  *(void *)(v24 + 8));
              }

              else
              {
                sub_1812F9F44(v24);
              }
            }

            return v10;
          }

          if (v28)
          {
            uint64_t v21 = *(void *)(v28 + 112);
            if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
            {
              uint64_t v22 = *(void *)(v21 + 40);
              --*(_DWORD *)(v22 + 152);
              *(void *)(v21 + 32) = *(void *)(v22 + 168);
              *(void *)(v22 + 168) = v21;
              (*(void (**)(void, void, void))(**(void **)(v22 + 72) + 144LL))( *(void *)(v22 + 72),  *(void *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1),  *(void *)(v21 + 8));
            }

            else
            {
              sub_1812F9F44(v21);
            }
          }

          if (v29 > v19)
          {
            if (v30)
            {
              uint64_t v25 = *(void *)(v30 + 112);
              if ((*(_WORD *)(v25 + 52) & 0x20) != 0)
              {
                uint64_t v27 = *(void *)(v25 + 40);
                --*(_DWORD *)(v27 + 152);
                *(void *)(v25 + 32) = *(void *)(v27 + 168);
                *(void *)(v27 + 168) = v25;
                (*(void (**)(void, void, void))(**(void **)(v27 + 72) + 144LL))( *(void *)(v27 + 72),  *(void *)(v27 + 200) * (*(_DWORD *)(v25 + 48) - 1),  *(void *)(v25 + 8));
              }

              else
              {
                sub_1812F9F44(v25);
              }
            }

            return sub_1812FBF50(80887);
          }
        }

        while (a4 && v29 > a2);
        uint64_t v23 = v30;
        uint64_t v10 = sub_181300298((_DWORD *)a1, v30, v15, v31, v29, a4);
        sub_18130023C(v23);
        if ((_DWORD)v10) {
          return v10;
        }
        goto LABEL_9;
      }

      return sub_1812FBF50(80835);
    }

    return v16;
  }

  return v10;
}

uint64_t sub_1812FFCF0(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  while (1)
  {
    if (a1 == a3 || a2 && *((_DWORD *)a1 + 20) != a2) {
      goto LABEL_3;
    }
    int v6 = *a1;
    if ((v6 | 2) == 2) {
      break;
    }
    sub_1812FFDBC((uint64_t)a1);
LABEL_3:
    a1 = (unsigned __int8 *)*((void *)a1 + 5);
    if (!a1) {
      return 0LL;
    }
  }

  if ((a1[1] & 0x40) != 0) {
    return 2835LL;
  }
  if (v6 == 2) {
    *a1 = 0;
  }
  else {
    *((_DWORD *)a1 + 1) = 0;
  }
  uint64_t result = sub_1812FFEC8((uint64_t)a1);
  if (!(_DWORD)result)
  {
    sub_1812FFDBC((uint64_t)a1);
    *a1 = 3;
    a1[1] &= 0xF1u;
    goto LABEL_3;
  }

  a1[1] &= 0xF1u;
  return result;
}

uint64_t sub_1812FFDBC(uint64_t result)
{
  if ((*(char *)(result + 84) & 0x80000000) == 0)
  {
    uint64_t v1 = result;
    if (*(_BYTE *)(result + 84))
    {
      uint64_t v2 = 0LL;
      do
      {
        uint64_t v3 = *(void *)(*(void *)(v1 + 144 + 8 * v2) + 112LL);
        if ((*(_WORD *)(v3 + 52) & 0x20) != 0)
        {
          uint64_t v4 = *(void *)(v3 + 40);
          --*(_DWORD *)(v4 + 152);
          *(void *)(v3 + 32) = *(void *)(v4 + 168);
          *(void *)(v4 + 168) = v3;
          (*(void (**)(void, void, void))(**(void **)(v4 + 72) + 144LL))( *(void *)(v4 + 72),  *(void *)(v4 + 200) * (*(_DWORD *)(v3 + 48) - 1),  *(void *)(v3 + 8));
        }

        else
        {
          sub_1812F9F44(v3);
        }

        ++v2;
      }

      while (v2 < *(char *)(v1 + 84));
    }

    uint64_t v5 = *(void *)(*(void *)(v1 + 136) + 112LL);
    if ((*(_WORD *)(v5 + 52) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(v5 + 40);
      --*(_DWORD *)(v6 + 152);
      *(void *)(v5 + 32) = *(void *)(v6 + 168);
      *(void *)(v6 + 168) = v5;
      uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v6 + 72) + 144LL))( *(void *)(v6 + 72),  *(void *)(v6 + 200) * (*(_DWORD *)(v5 + 48) - 1),  *(void *)(v5 + 8));
    }

    else
    {
      uint64_t result = sub_1812F9F44(v5);
    }

    *(_BYTE *)(v1 + 84) = -1;
  }

  return result;
}

uint64_t sub_1812FFEC8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 85);
  sub_1812FFFE4(a1);
  if (v2)
  {
    uint64_t v3 = 0LL;
    *(void *)(a1 + 72) = *(void *)(a1 + 48);
    return v3;
  }

  uint64_t v5 = *(unsigned int *)(a1 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = (char *)sub_18126F0AC(v5 + 17);
  if (!v6) {
    return 7LL;
  }
  unsigned int v7 = v6;
  uint64_t v3 = sub_1812BFD8C(a1, 0, *(_DWORD *)(a1 + 72), v6, 0);
  if (!(_DWORD)v3)
  {
    int v9 = &v7[*(void *)(a1 + 72)];
    *(void *)int v9 = 0LL;
    *((void *)v9 + 1) = 0LL;
    v9[16] = 0;
    *(void *)(a1 + 24) = v7;
    return v3;
  }

  unsigned int v8 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_11:
    (*v8)(v7);
    return v3;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  unsigned int v7 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v8 = (uint64_t (**)(char *))&xmmword_18C465410;
    goto LABEL_11;
  }

  return v3;
}

uint64_t sub_1812FFFE4(uint64_t result)
{
  if (!*(_WORD *)(result + 70))
  {
    *(_BYTE *)(result + 1) |= 2u;
    uint64_t v1 = *(void *)(result + 136);
    int v2 = (unsigned __int8 *)(*(void *)(v1 + 96) + 2LL * *(unsigned __int16 *)(result + 86));
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 128))( v1,  *(void *)(v1 + 80) + ((v2[1] | (*v2 << 8)) & (unint64_t)*(unsigned __int16 *)(v1 + 26)),  result + 48);
  }

  return result;
}

uint64_t sub_181300038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if ((*(_WORD *)(v1 + 52) & 0x20) == 0) {
    return sub_1812F9F44(v1);
  }
  uint64_t v3 = *(void *)(v1 + 40);
  --*(_DWORD *)(v3 + 152);
  *(void *)(v1 + 32) = *(void *)(v3 + 168);
  *(void *)(v3 + 168) = v1;
  return (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 72) + 144LL))( *(void *)(v3 + 72),  *(void *)(v3 + 200) * (*(_DWORD *)(v1 + 48) - 1),  *(void *)(v1 + 8));
}

uint64_t sub_18130008C(_DWORD *a1, unsigned int a2, _BYTE *a3, _DWORD *a4)
{
  if (a2 >= 2)
  {
    unsigned int v8 = (a2 - 2) / (a1[14] / 5u + 1) * (a1[14] / 5u + 1);
    else {
      int v9 = 2;
    }
    unsigned int v7 = v9 + v8;
  }

  else
  {
    unsigned int v7 = 0;
  }

  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
  if (!(_DWORD)result)
  {
    uint64_t v11 = *(void *)(v16 + 8);
    int v12 = 5 * (~v7 + a2);
    if (v12 < 0)
    {
      int v13 = 77956;
      if ((*(_WORD *)(v16 + 52) & 0x20) != 0)
      {
        uint64_t v15 = *(void *)(v16 + 40);
        --*(_DWORD *)(v15 + 152);
        *(void *)(v16 + 32) = *(void *)(v15 + 168);
        *(void *)(v15 + 168) = v16;
        (*(void (**)(void, void, uint64_t))(**(void **)(v15 + 72) + 144LL))( *(void *)(v15 + 72),  *(void *)(v15 + 200) * (*(_DWORD *)(v16 + 48) - 1),  v11);
      }

      else
      {
        sub_1812F9F44(v16);
      }
    }

    else
    {
      *a3 = *(_BYTE *)(v11 + v12);
      if (a4) {
        *a4 = bswap32(*(_DWORD *)(v11 + v12 + 1));
      }
      if ((*(_WORD *)(v16 + 52) & 0x20) != 0)
      {
        uint64_t v14 = *(void *)(v16 + 40);
        --*(_DWORD *)(v14 + 152);
        *(void *)(v16 + 32) = *(void *)(v14 + 168);
        *(void *)(v14 + 168) = v16;
        (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144LL))( *(void *)(v14 + 72),  *(void *)(v14 + 200) * (*(_DWORD *)(v16 + 48) - 1),  *(void *)(v16 + 8));
      }

      else
      {
        sub_1812F9F44(v16);
      }

      int v13 = 77964;
    }

    return sub_1812FBF50(v13);
  }

  return result;
}

uint64_t sub_18130023C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 112);
    if ((*(_WORD *)(v1 + 52) & 0x20) != 0)
    {
      uint64_t v2 = *(void *)(v1 + 40);
      --*(_DWORD *)(v2 + 152);
      *(void *)(v1 + 32) = *(void *)(v2 + 168);
      *(void *)(v2 + 168) = v1;
      return (*(uint64_t (**)(void, void, void))(**(void **)(v2 + 72) + 144LL))( *(void *)(v2 + 72),  *(void *)(v2 + 200) * (*(_DWORD *)(v1 + 48) - 1),  *(void *)(v1 + 8));
    }

    else
    {
      return sub_1812F9F44(v1);
    }
  }

  return result;
}

uint64_t sub_181300298(_DWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a2 + 4);
  if (v6 <= 2)
  {
    unsigned __int16 v7 = 15201;
    return sub_1812FBF50(v7 | 0x10000u);
  }

  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a2 + 112);
  if (*(_BYTE *)(*(void *)a1 + 16LL))
  {
    uint64_t v17 = *(_DWORD **)(v16 + 40);
    if ((*(_WORD *)(v16 + 52) & 4) != 0 && v17[8] >= *(_DWORD *)(v16 + 48))
    {
      if (v17[32])
      {
        uint64_t v18 = sub_1812FAFE4(*(void *)(a2 + 112));
        if ((_DWORD)v18) {
          return v18;
        }
      }
    }

    else
    {
      uint64_t v18 = v17[12];
      if ((_DWORD)v18) {
        return v18;
      }
      uint64_t v19 = *(void *)(a2 + 112);
      if (v17[46] <= v17[50])
      {
        uint64_t v18 = sub_1812ABE24(v19);
        if ((_DWORD)v18) {
          return v18;
        }
      }

      else
      {
        uint64_t v18 = sub_1812FED50(v19);
        if ((_DWORD)v18) {
          return v18;
        }
      }
    }
  }

  __int16 v20 = *(_WORD *)(v16 + 52);
  if ((v20 & 2) != 0)
  {
    uint64_t v18 = sub_1812FAFE4(v16);
    if ((_DWORD)v18) {
      return v18;
    }
    __int16 v20 = *(_WORD *)(v16 + 52);
  }

  unsigned int v54 = 0;
  if (!a6 && (v20 & 8) != 0) {
    unsigned int v54 = *(_DWORD *)(v16 + 48);
  }
  *(_WORD *)(v16 + 52) = v20 & 0xFFF7;
  uint64_t v21 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(v15 + 336) + 72LL),  a5,  0LL);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)v21;
    uint64_t v23 = *(void *)(v15 + 336);
    uint64_t v24 = v22[1];
    if (*(void *)v24)
    {
      ++*(void *)(v23 + 24);
      uint64_t v25 = *(void *)(v24 + 56) + 1LL;
      *(void *)(v24 + 56) = v25;
    }

    else
    {
      uint64_t v28 = sub_1812FD158(v23, a5, v22);
      uint64_t v24 = v28;
      if (!v28)
      {
        int v53 = a3;
        int v26 = a4;
        char v27 = 0;
        goto LABEL_44;
      }

      uint64_t v25 = *(void *)(v28 + 56);
    }

    if (v25 >= 2)
    {
      if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
      {
        uint64_t v29 = *(void *)(v24 + 40);
        --*(_DWORD *)(v29 + 152);
        *(void *)(v24 + 32) = *(void *)(v29 + 168);
        *(void *)(v29 + 168) = v24;
        (*(void (**)(void, void, void))(**(void **)(v29 + 72) + 144LL))( *(void *)(v29 + 72),  *(void *)(v29 + 200) * (*(_DWORD *)(v24 + 48) - 1),  *(void *)(v24 + 8));
      }

      else
      {
        sub_1812F9F44(v24);
      }

      unsigned __int16 v7 = 5657;
      return sub_1812FBF50(v7 | 0x10000u);
    }

    *(_WORD *)(v16 + 52) |= *(_WORD *)(v24 + 52) & 8;
    int v53 = a3;
    if (*(_BYTE *)(v15 + 16))
    {
      int v26 = a4;
      sub_181300D34(v24, (*(_DWORD *)(v15 + 32) + 1));
      char v27 = 1;
      goto LABEL_44;
    }

    uint64_t v30 = *(void *)(v24 + 24);
    if ((*(_WORD *)(v24 + 52) & 2) != 0)
    {
      uint64_t v31 = *(void *)(v24 + 72);
      if (*(void *)(v30 + 16) == v24) {
        *(void *)(v30 + 16) = v31;
      }
      uint64_t v32 = *(void *)(v24 + 64);
      if (v32)
      {
        *(void *)(v32 + 72) = v31;
        uint64_t v31 = *(void *)(v24 + 72);
        if (!v31)
        {
          *(void *)uint64_t v30 = v32;
          goto LABEL_43;
        }
      }

      else
      {
        *(void *)(v30 + 8) = v31;
        if (!v31)
        {
          *(void *)uint64_t v30 = 0LL;
          *(_BYTE *)(v30 + 49) = 2;
          goto LABEL_43;
        }
      }

      *(void *)(v31 + 64) = v32;
    }

uint64_t sub_1813008A0(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
  if ((_DWORD)result)
  {
    *a3 = 0LL;
  }

  else
  {
    uint64_t v7 = *(void *)(v12 + 16);
    if (*(_DWORD *)(v7 + 4) != a2)
    {
      uint64_t v8 = *(void *)(v12 + 8);
      *(void *)(v7 + 112) = v12;
      *(void *)(v7 + 72) = a1;
      *(void *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1) {
        char v9 = 100;
      }
      else {
        char v9 = 0;
      }
      *(_BYTE *)(v7 + 9) = v9;
    }

    *a3 = v7;
    uint64_t v10 = *(void *)(v7 + 112);
    if (*(int *)(v10 + 56) < 2)
    {
      uint64_t result = 0LL;
      *(_BYTE *)uint64_t v7 = 0;
    }

    else
    {
      if ((*(_WORD *)(v10 + 52) & 0x20) != 0)
      {
        uint64_t v11 = *(void *)(v10 + 40);
        --*(_DWORD *)(v11 + 152);
        *(void *)(v10 + 32) = *(void *)(v11 + 168);
        *(void *)(v11 + 168) = v10;
        (*(void (**)(void, void, void))(**(void **)(v11 + 72) + 144LL))( *(void *)(v11 + 72),  *(void *)(v11 + 200) * (*(_DWORD *)(v10 + 48) - 1),  *(void *)(v10 + 8));
      }

      else
      {
        sub_1812F9F44(v10);
      }

      *a3 = 0LL;
      return sub_1812FBF50(79272);
    }
  }

  return result;
}

uint64_t sub_1813009A8(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 4);
  if (*(_BYTE *)a1)
  {
    unsigned int v10 = 0;
  }

  else
  {
    uint64_t result = sub_18129B974(a1);
    unsigned int v10 = result;
    if ((_DWORD)result) {
      return result;
    }
  }

  if (*(_WORD *)(a1 + 24))
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 2LL * *(unsigned __int16 *)(a1 + 24);
    do
    {
      if (!v10)
      {
        (*(void (**)(uint64_t, unsigned int *, _BYTE *))(a1 + 128))(a1, v6, v11);
        if (v12 > v13)
        {
          unint64_t v7 = *(void *)(a1 + 88);
          if (v7 > (unint64_t)v6 && (unint64_t)v6 + v13 > v7)
          {
            unsigned int v10 = sub_1812FBF50(78404);
            if (*(_BYTE *)(a1 + 8)) {
              goto LABEL_5;
            }
LABEL_14:
            sub_1812C0570(v2, bswap32(*v6), 5, v3, &v10);
            goto LABEL_5;
          }

          sub_1812C0570( *(_DWORD **)(a1 + 72),  bswap32(*(unsigned int *)((char *)v6 + v14 - 4)),  3,  *(_DWORD *)(a1 + 4),  &v10);
        }
      }

      if (!*(_BYTE *)(a1 + 8)) {
        goto LABEL_14;
      }
LABEL_5:
      v4 += 2LL;
    }

    while (v5 != v4);
  }

  if (!*(_BYTE *)(a1 + 8)) {
    sub_1812C0570(v2, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 9) + *(void *)(a1 + 80) + 8LL)), 5, v3, &v10);
  }
  return v10;
}

uint64_t sub_181300B24(uint64_t a1, int a2, unsigned int a3, int a4)
{
  if (a4 == 4)
  {
    unint64_t v7 = *(unsigned int **)(a1 + 80);
    if (bswap32(*v7) != a2) {
      return sub_1812FD54C(80662LL, a1);
    }
LABEL_3:
    uint64_t result = 0LL;
    unsigned int *v7 = bswap32(a3);
    return result;
  }

  if (!*(_BYTE *)a1)
  {
    uint64_t result = sub_18129B974(a1);
    if ((_DWORD)result) {
      return result;
    }
  }

  uint64_t v10 = *(unsigned __int16 *)(a1 + 24);
  if (!*(_WORD *)(a1 + 24))
  {
    LODWORD(v12) = 0;
LABEL_20:
    if ((_DWORD)v12 == (_DWORD)v10)
    {
LABEL_21:
      if (a4 != 5) {
        goto LABEL_27;
      }
      uint64_t v16 = *(unsigned __int8 *)(a1 + 9) + *(void *)(a1 + 80);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      unint64_t v7 = (unsigned int *)(v16 + 8);
      if (bswap32(v17) != a2) {
        goto LABEL_27;
      }
      goto LABEL_3;
    }

    return 0LL;
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 80);
    unsigned __int16 v14 = (unsigned int *)(v13
                         + ((*(unsigned __int8 *)(*(void *)(a1 + 96) + v11 + 1) | (*(unsigned __int8 *)(*(void *)(a1 + 96) + v11) << 8)) & (unint64_t)*(unsigned __int16 *)(a1 + 26)));
    if (a4 != 3)
    {
      if ((unint64_t)(v14 + 1) > v13 + (unint64_t)*(unsigned int *)(*(void *)(a1 + 72) + 56LL))
      {
        uint64_t v18 = 80690LL;
        return sub_1812FD54C(v18, a1);
      }

      if (bswap32(*v14) == a2)
      {
        unsigned int *v14 = bswap32(a3);
        goto LABEL_20;
      }

      goto LABEL_7;
    }

    (*(void (**)(uint64_t, unsigned int *, _BYTE *))(a1 + 128))(a1, v14, v19);
    if (v20 > v21)
    {
      unint64_t v15 = (unint64_t)v14 + v22;
      if (v15 > *(void *)(a1 + 80) + (unint64_t)*(unsigned int *)(*(void *)(a1 + 72) + 56LL))
      {
        uint64_t v18 = 80681LL;
        return sub_1812FD54C(v18, a1);
      }

      if (bswap32(*(_DWORD *)(v15 - 4)) == a2) {
        break;
      }
    }

uint64_t sub_181300D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))(*(void *)(v4 + 72), a2, 0LL);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v6 + 56);
    if (v7 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v17 = 0;
      _os_log_fault_impl( &dword_181266000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "pcache replacing page with non-zero refcount",  v17,  2u);
      uint64_t v7 = *(void *)(v6 + 56);
    }

    *(void *)(v6 + 56) = v7 + 1;
    ++*(void *)(v4 + 24);
    uint64_t v8 = *(void *)(v6 + 24);
    if ((*(_BYTE *)(v6 + 52) & 2) == 0) {
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(v6 + 72);
    if (*(void *)(v8 + 16) == v6)
    {
      *(void *)(v8 + 16) = v9;
      uint64_t v10 = *(void *)(v6 + 64);
      if (v10)
      {
LABEL_8:
        *(void *)(v10 + 72) = v9;
        uint64_t v9 = *(void *)(v6 + 72);
        if (!v9)
        {
          *(void *)uint64_t v8 = v10;
LABEL_13:
          --*(void *)(v8 + 24);
          xmmword_18C465468(*(void *)(v8 + 72), *(void *)v6, 1LL);
          goto LABEL_14;
        }

void *sub_181300F30(void *result, int a2, void *__dst)
{
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    unsigned int v5 = a2 - 1;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(v4 + 8);
      if (!v6) {
        break;
      }
      unsigned int v7 = v5 / v6;
      v5 %= v6;
      uint64_t v4 = *(void *)(v4 + 8LL * v7 + 16);
      if (!v4) {
        return result;
      }
    }

    if (*(_DWORD *)v4 > 0xF80u)
    {
      uint64_t v8 = v4 + 16;
      uint64_t result = memcpy(__dst, (const void *)(v4 + 16), 0x1F0uLL);
      uint64_t v9 = 0LL;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 352) = 0u;
      *(_OWORD *)(v4 + 368) = 0u;
      *(_OWORD *)(v4 + 384) = 0u;
      *(_OWORD *)(v4 + 400) = 0u;
      *(_OWORD *)(v4 + 416) = 0u;
      *(_OWORD *)(v4 + 432) = 0u;
      *(_OWORD *)(v4 + 448) = 0u;
      *(_OWORD *)(v4 + 464) = 0u;
      *(_OWORD *)(v4 + 480) = 0u;
      *(_OWORD *)(v4 + 496) = 0u;
      *(_DWORD *)(v4 + 4) = 0;
      do
      {
        int v10 = *((_DWORD *)__dst + v9);
        if (v10) {
          BOOL v11 = v10 == v5 + 1;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          uint64_t v12 = (v10 - 1) % 0x7Cu;
          ++*(_DWORD *)(v4 + 4);
          while (*(_DWORD *)(v8 + 4LL * v12))
          {
            else {
              uint64_t v12 = 0LL;
            }
          }

          *(_DWORD *)(v8 + 4 * v12) = *((_DWORD *)__dst + v9);
        }

        ++v9;
      }

      while (v9 != 124);
    }

    else
    {
      *(_BYTE *)(v4 + ((unint64_t)v5 >> 3) + 16) &= ~(1 << (v5 & 7));
    }
  }

  return result;
}

_DWORD *sub_181301084(_DWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (!*a4)
  {
    unsigned int v7 = result;
    uint64_t result = (_DWORD *)(*((uint64_t (**)(_DWORD *, unint64_t, _BYTE *))result + 16))(result, a3, v10);
    if (v11 > v12)
    {
      unint64_t v8 = *(void *)(a2 + 88);
      if (v8 > a3 && a3 + v12 > v8)
      {
        uint64_t result = (_DWORD *)sub_1812FBF50(78404);
        *a4 = (_DWORD)result;
      }

      else
      {
        return sub_1812C0570(*((_DWORD **)v7 + 9), bswap32(*(_DWORD *)(v13 + a3 - 4)), 3, v7[1], a4);
      }
    }
  }

  return result;
}

uint64_t sub_181301130(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  unsigned int v6 = *(unsigned __int8 **)(*(void *)(a1 + 8) + 16LL);
  if (!v6)
  {
LABEL_25:
    uint64_t v11 = 0LL;
    goto LABEL_26;
  }

  while (!a3 || (v6[1] & 1) != 0)
  {
    uint64_t v8 = *((void *)v6 + 3);
    if (v8)
    {
      uint64_t v9 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v8);
        --qword_18C468B10;
        off_18C4653A8(v8);
        uint64_t v8 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_8;
        }
        uint64_t v9 = &xmmword_18C465410;
      }

      (*v9)(v8);
    }

uint64_t sub_1813013F8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    int v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

void *sub_1813014B0(void *result, void *a2)
{
  uint64_t v2 = a2;
  if (result[62] <= (unint64_t)a2)
  {
    *a2 = result[61];
    result[61] = a2;
    return result;
  }

  if (result[63] <= (unint64_t)a2)
  {
    *a2 = result[59];
    result[59] = a2;
  }

  else
  {
LABEL_17:
    if (result[102]) {
      return (void *)sub_1812F21F0((uint64_t)result, (unint64_t)a2);
    }
    if (a2)
    {
      int v3 = &off_18C4653A8;
      if (!dword_18C465380) {
        return (void *)(*v3)(v2);
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      uint64_t result = (void *)off_18C4653A8(v2);
      uint64_t v2 = (void *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v3 = &xmmword_18C465410;
        return (void *)(*v3)(v2);
      }
    }
  }

  return result;
}

void *sub_1813015C0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if ((*(_BYTE *)(v4 + 4) & 0x10) != 0) {
    sub_1813014B0(a1, (void *)v4);
  }
  return sub_1813014B0(a1, a2);
}

void *sub_1813015FC(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v4 = *(void **)(a2 + 40);
    if (v4) {
      sub_1812F20DC(a1, v4);
    }
  }

  return sub_1813014B0(a1, (void *)a2);
}

void *sub_18130163C(void *result)
{
  uint64_t v1 = (void *)*result;
  int v2 = *((_DWORD *)result + 6) - 1;
  *((_DWORD *)result + 6) = v2;
  if (!v2)
  {
    int v3 = result;
    uint64_t v4 = result[2];
    unsigned int v5 = v1;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
      unsigned int v5 = (void *)*v3;
    }

    uint64_t v6 = v3[1];
    int v7 = *(_DWORD *)(v6 + 16) - 1;
    *(_DWORD *)(v6 + 16) = v7;
    if (!v7)
    {
      uint64_t v8 = *(void (**)(void))(v6 + 32);
      if (v8) {
        v8(*(void *)(v6 + 24));
      }
      sub_1812F20DC(v5, (void *)v6);
    }

    return sub_1812F20DC(v1, v3);
  }

  return result;
}

uint64_t sub_1813016D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*(int *)v4 >= 2 && (unsigned int v5 = *(uint64_t (**)(void))(v4 + 136)) != 0LL)
  {
    uint64_t result = v5();
    uint64_t v7 = v9;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, double *))(v4 + 120))(v4, &v10);
    uint64_t v7 = (uint64_t)(v10 * 86400000.0);
  }

  *(void *)&double v10 = 1000000 * (v7 - *(void *)(a2 + 184));
  uint64_t v8 = (uint64_t (*)(uint64_t, void))a1[32];
  if (v8) {
    uint64_t result = v8(a1[33], *(void *)(a2 + 320));
  }
  if ((*((_BYTE *)a1 + 110) & 2) != 0) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, double *))a1[30])(2LL, a1[31], a2, &v10);
  }
  *(void *)(a2 + 184) = 0LL;
  return result;
}

uint64_t sub_18130179C()
{
  uint64_t v0 = getenv("SQLITE_ACCEPTABLE_RATIO_VM_STEP_TO_STEP");
  if (!v0) {
    uint64_t v0 = "10000.0";
  }
  qword_18C468CE8 = atof(v0);
  uint64_t v1 = getenv("SQLITE_ACCEPTABLE_OVERALL_VM_STEP");
  if (!v1) {
    uint64_t v1 = "50000";
  }
  uint64_t result = atoll(v1);
  qword_18C468CF0 = result;
  return result;
}

uint64_t sub_1813017FC(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 52);
  if (*(void *)(a1 + 168))
  {
    ++*(_BYTE *)(v1 + 104);
    if (off_18C550648) {
      off_18C550648(a1);
    }
    uint64_t v4 = *(void *)(v1 + 416);
    if (!v4)
    {
      uint64_t v4 = sub_1812F2264(v1, 0x40uLL);
      if (!v4)
      {
        *(void *)(v1 + 416) = 0LL;
        goto LABEL_8;
      }

      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_WORD *)(v4 + 20) = 1;
      *(void *)(v4 + 24) = v1;
      *(void *)(v1 + 416) = v4;
    }

    uint64_t v4 = sub_181269368(v4, *(char **)(a1 + 168), -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
LABEL_8:
    if (off_18C550650) {
      off_18C550650(v4);
    }
    --*(_BYTE *)(v1 + 104);
    goto LABEL_11;
  }

  uint64_t v6 = *(void *)(v1 + 416);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v6);
    }
    else {
      *(_WORD *)(v6 + 20) = 1;
    }
  }

_DWORD *sub_1813018F0(_DWORD *result)
{
  int v1 = result[69];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(*(void *)result + 40LL);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = *(void *)(*(void *)result + 32LL);
      if ((v1 & 1) != 0)
      {
        uint64_t result = *(_DWORD **)(v4 + 8);
        if (result)
        {
          if (*((_BYTE *)result + 17))
          {
            ++result[5];
            if (!*((_BYTE *)result + 18)) {
              uint64_t result = (_DWORD *)sub_1812FDE20((uint64_t)result);
            }
          }
        }
      }

      if (v3 >= 3)
      {
        unsigned int v5 = (_DWORD **)(v4 + 72);
        for (uint64_t i = 2LL; i != v3; ++i)
        {
          if (((v2[69] >> i) & 1) != 0)
          {
            uint64_t result = *v5;
            if (*v5)
            {
              if (*((_BYTE *)result + 17))
              {
                ++result[5];
                if (!*((_BYTE *)result + 18)) {
                  uint64_t result = (_DWORD *)sub_1812FDE20((uint64_t)result);
                }
              }
            }
          }

          v5 += 4;
        }
      }
    }
  }

  return result;
}

void *sub_1813019B8(void *result)
{
  int v1 = result;
  for (uint64_t i = (void *)result[95]; i; uint64_t i = (void *)v1[95])
  {
    v1[95] = i[3];
    uint64_t result = sub_1812F20DC(v1, i);
  }

  *(void *)((char *)v1 + 788) = 0LL;
  *((_BYTE *)v1 + 109) = 0;
  return result;
}

uint64_t sub_181301A00( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    return 0LL;
  }

uint64_t sub_181301A74(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 40);
  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      unsigned int v5 = *(unsigned __int8 **)(*(void *)(v2 + 120) + 8 * i);
      if (v5)
      {
        sub_181301B60((void **)v2, v5);
        *(void *)(*(void *)(v2 + 120) + 8 * i) = 0LL;
        int v3 = *(_DWORD *)(v2 + 40);
      }
    }
  }

  uint64_t v6 = a1[3];
  *(void *)(v2 + 136) = a1[2];
  int v7 = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v2 + 144) = *((_DWORD *)a1 + 20);
  *(void *)(v2 + 104) = v6;
  *(void *)(v2 + 120) = a1[4];
  int v8 = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v2 + 36) = v7;
  *(_DWORD *)(v2 + 40) = v8;
  uint64_t v9 = *(void **)v2;
  v9[7] = a1[7];
  uint64_t v10 = a1[13];
  *(void *)(v2 + 56) = a1[12];
  v9[15] = v10;
  while (1)
  {
    uint64_t v11 = *(void **)(v2 + 384);
    if (!v11) {
      break;
    }
    int v12 = (void (*)(void))v11[2];
    if (v12) {
      v12(v11[1]);
    }
    *(void *)(v2 + 384) = v11[3];
    sub_1812F20DC(v9, v11);
  }

  *(void *)(v2 + 384) = a1[8];
  a1[8] = 0LL;
  return *((unsigned int *)a1 + 19);
}

void **sub_181301B60(void **result, unsigned __int8 *a2)
{
  if ((a2[5] & 0x10) != 0) {
    return (void **)sub_181301E98(result, (uint64_t)a2);
  }
  int v3 = *a2;
  if (!*a2)
  {
    int v8 = (void *)*((void *)a2 + 5);
    uint64_t v9 = v8[1];
    if (!v9) {
      return result;
    }
    uint64_t v10 = v8[4];
    if (*(_BYTE *)(v9 + 17))
    {
      ++*(_DWORD *)(v9 + 20);
      if (!*(_BYTE *)(v9 + 18)) {
        sub_1812FDE20(v9);
      }
    }

    uint64_t v11 = *(void **)(v10 + 16);
    int v12 = (void *)(v10 + 16);
    if (v11 != v8)
    {
      while (1)
      {
        unsigned __int16 v13 = (void *)v11[5];
        if (v13 == v8) {
          break;
        }
        uint64_t v11 = (void *)v11[5];
        if (!v13) {
          goto LABEL_26;
        }
      }

      int v12 = v11 + 5;
    }

    *int v12 = v8[5];
LABEL_26:
    uint64_t result = (void **)sub_1812FFDBC((uint64_t)v8);
    if (!*(_BYTE *)(v10 + 36))
    {
      uint64_t v17 = *(void *)(v10 + 24);
      if (v17)
      {
        *(void *)(v10 + 24) = 0LL;
        uint64_t result = (void **)sub_1812F1ABC(*(void *)(v17 + 112));
      }
    }

    uint64_t v18 = v8[2];
    if (v18)
    {
      uint64_t v19 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_35:
        uint64_t result = (void **)(*v19)(v18);
        goto LABEL_36;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v18);
      --qword_18C468B10;
      uint64_t result = (void **)off_18C4653A8(v18);
      uint64_t v18 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v19 = &xmmword_18C465410;
        goto LABEL_35;
      }
    }

uint64_t sub_181301E98(void **a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 104);
  *(_BYTE *)(a2 + 5) &= ~0x10u;
  *(void *)(a2 + 104) = 0LL;
  uint64_t v5 = *v4;
  if (*v4)
  {
    unint64_t v8 = *(void *)(v5 - 8);
    int v7 = (void *)(v5 - 8);
    unint64_t v6 = v8;
    if (v8 < 2)
    {
      uint64_t v9 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v7);
        --qword_18C468B10;
        off_18C4653A8(v7);
        int v7 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_10;
        }
        uint64_t v9 = &xmmword_18C465410;
      }

      (*v9)(v7);
    }

    else
    {
      void *v7 = v6 - 1;
    }

uint64_t sub_181301F94(uint64_t result)
{
  uint64_t v2 = (void *)(result - 8);
  unint64_t v1 = *(void *)(result - 8);
  if (v1 >= 2)
  {
    *uint64_t v2 = v1 - 1;
    return result;
  }

  int v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v2);
  uint64_t v2 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v3 = &xmmword_18C465410;
    return (*v3)(v2);
  }

  return result;
}

void sub_181302058(void *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 91))
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 91) + 1LL;
    uint64_t v4 = a2 + 104LL * *(unsigned __int8 *)(a2 + 91) - 8;
    do
    {
      uint64_t v5 = *(void *)v4;
      if (!*(void *)v4) {
        goto LABEL_5;
      }
      if (*(void *)v5) {
        (*(void (**)(void))v5)(*(void *)(v5 + 8));
      }
      unint64_t v6 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        off_18C4653A8(v5);
        uint64_t v5 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        unint64_t v6 = &xmmword_18C465410;
      }

      (*v6)(v5);
LABEL_4:
      *(_DWORD *)(v4 + 8) = 0;
      *(void *)uint64_t v4 = 0LL;
LABEL_5:
      --v3;
      v4 -= 104LL;
    }

    while (v3 > 1);
  }

  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    sub_181302560(v7);
    unint64_t v8 = *(void **)(a2 + 16);
    if (v8) {
      sub_1812F20DC(a1, v8);
    }
    *(void *)(a2 + 16) = 0LL;
  }

  uint64_t v9 = *(int **)(a2 + 24);
  if (v9)
  {
    if (*v9 >= 1)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      do
      {
        sub_181302560(*((void *)v9 + 3) + v10);
        ++v11;
        v10 += 80LL;
      }

      while (v11 < *v9);
    }

    int v12 = (void (**)(int *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_27;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    off_18C4653A8(v9);
    uint64_t v9 = (int *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v12 = (void (**)(int *))&xmmword_18C465410;
LABEL_27:
      (*v12)(v9);
    }
  }

  *(void *)(a2 + 24) = 0LL;
  if (*(_BYTE *)(a2 + 91))
  {
    unint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v14 = a2 + 104 * v13;
      uint64_t v15 = *(void **)(v14 + 120);
      if (v15) {
        sub_1812F20DC(a1, v15);
      }
      uint64_t v16 = *(void *)(a2 + 104 * v13 + 136);
      if (!v16) {
        break;
      }
      uint64_t v17 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_40;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v16);
      --qword_18C468B10;
      off_18C4653A8(v16);
      uint64_t v16 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v17 = &xmmword_18C465410;
LABEL_40:
        (*v17)(v16);
      }

double sub_181302560(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unint64_t v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_1813029E8(void *a1)
{
  unint64_t v1 = a1;
  if (*a1)
  {
    (*(void (**)(void *))(*a1 + 8LL))(a1);
    void *v1 = 0LL;
  }

  uint64_t v2 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v2)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  unint64_t v1 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v2 = &xmmword_18C465410;
    return (*v2)(v1);
  }

  return result;
}

void *sub_181302AB0( uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = (void *)a1[21];
  if (v11) {
    sub_1812F20DC((void *)*a1, v11);
  }
  uint64_t result = sub_1812FA130(*a1, a2, &a9);
  a1[21] = (uint64_t)result;
  return result;
}

uint64_t sub_181302B04(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(*(void *)result + 40LL);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(*(void *)result + 32LL);
    if ((*(_BYTE *)(result + 276) & 1) != 0)
    {
      uint64_t result = *(void *)(v3 + 8);
      if (result)
      {
        if (*(_BYTE *)(result + 17))
        {
          int v4 = *(_DWORD *)(result + 20) - 1;
          *(_DWORD *)(result + 20) = v4;
          if (!v4) {
            uint64_t result = sub_1812FDEFC(result);
          }
        }
      }
    }

    if (v1 >= 3)
    {
      uint64_t v5 = (uint64_t *)(v3 + 72);
      for (uint64_t i = 2LL; i != v1; ++i)
      {
        if (((*(_DWORD *)(v2 + 276) >> i) & 1) != 0)
        {
          uint64_t result = *v5;
          if (*v5)
          {
            if (*(_BYTE *)(result + 17))
            {
              int v7 = *(_DWORD *)(result + 20) - 1;
              *(_DWORD *)(result + 20) = v7;
              if (!v7) {
                uint64_t result = sub_1812FDEFC(result);
              }
            }
          }
        }

        v5 += 4;
      }
    }
  }

  return result;
}

uint64_t sub_181302BC0(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  size_t v10 = *(int *)(a1 + 4);
  uint64_t v11 = (void *)sub_18126F0AC(v10);
  int v12 = v11;
  if (!v11)
  {
    uint64_t v13 = 7LL;
    goto LABEL_10;
  }

  bzero(v11, v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void, uint64_t))(a1 + 40))( a1,  a2,  v12,  a4 & 0x1787F7F,  a5);
  if ((_DWORD)v13)
  {
    uint64_t v14 = (uint64_t (**)(void *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_8:
      (*v14)(v12);
      int v12 = 0LL;
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v12);
    --qword_18C468B10;
    off_18C4653A8(v12);
    int v12 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v14 = (uint64_t (**)(void *))&xmmword_18C465410;
      goto LABEL_8;
    }
  }

uint64_t sub_181302CE4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(const char **)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    unint64_t v6 = *(void **)(result + 168);
    if (v6)
    {
      uint64_t result = (uint64_t)sub_1812F20DC(*(void **)result, v6);
      uint64_t v2 = *(const char **)(a2 + 16);
      if (!v2)
      {
        *(void *)(v4 + 168) = 0LL;
        goto LABEL_17;
      }
    }

    size_t v7 = strlen(v2);
    unint64_t v8 = v7 + 1;
    if (v5)
    {
      uint64_t result = sub_1812F2264(v5, v8);
      uint64_t v9 = (void *)result;
      if (!result) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t result = sub_18126F0AC(v7 + 1);
      uint64_t v9 = (void *)result;
      if (!result)
      {
LABEL_7:
        uint64_t v10 = *(void *)(a2 + 16);
        *(void *)(v4 + 168) = v9;
        if (v10)
        {
          uint64_t v11 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v10);
            --qword_18C468B10;
            uint64_t result = off_18C4653A8(v10);
            uint64_t v10 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_17;
            }
            uint64_t v11 = &xmmword_18C465410;
          }

          uint64_t result = (*v11)(v10);
        }

uint64_t sub_181302E18(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 64) - 1;
  int v7 = *(_DWORD *)(*(void *)a1 + 40LL);
  if (v7 <= 0)
  {
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 8LL;
    do
    {
      uint64_t v12 = *(void *)(v5 + 32);
      uint64_t v13 = *(void *)(v12 + v10);
      if (v13)
      {
        if (a2 != 2 || (unsigned int v11 = sub_1812C07C4(*(void *)(v12 + v10), 2, v6, a3)) == 0) {
          unsigned int v11 = sub_1812C07C4(v13, 1, v6, a3);
        }
        if ((_DWORD)v9) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v11;
        }
        int v7 = *(_DWORD *)(v5 + 40);
      }

      ++v8;
      v10 += 32LL;
    }

    while (v8 < v7);
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
    if ((_DWORD)v9)
    {
      if (a2 != 2) {
        return v9;
      }
      goto LABEL_20;
    }
  }

  if (a2 == 2 && (uint64_t v9 = sub_181302F48(v5, 2, v6), (_DWORD)v9) || (uint64_t v9 = sub_181302F48(v5, 1, v6), a2 == 2)) {
LABEL_20:
  }
    *(_OWORD *)(v5 + 800) = *(_OWORD *)(a1 + 88);
  return v9;
}

uint64_t sub_181302F48(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 600))
  {
    uint64_t v6 = 0LL;
    int v7 = a3 + 1;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 600) + 8 * v6);
      if (*(void *)(v9 + 16))
      {
        uint64_t v10 = **(void **)(v9 + 8);
      }

      uint64_t v8 = 0LL;
LABEL_4:
      ++v6;
      if ((_DWORD)v8) {
        return v8;
      }
    }

    int v11 = *(_DWORD *)(v9 + 24) + 1;
    *(_DWORD *)(v9 + 24) = v11;
    if (a2 == 2)
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 176);
      if (!v12) {
        goto LABEL_17;
      }
    }

    else if (a2)
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 168);
      if (!v12) {
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 160);
      *(_DWORD *)(v9 + 32) = v7;
      if (!v12) {
        goto LABEL_17;
      }
    }

    if (*(_DWORD *)(v9 + 32) > a3)
    {
      uint64_t v13 = *(void *)(a1 + 48) & 0x10000000LL;
      *(void *)(a1 + 48) &= ~0x10000000uLL;
      uint64_t v8 = v12();
      *(void *)(a1 + 48) |= v13;
      int v11 = *(_DWORD *)(v9 + 24);
      goto LABEL_18;
    }

uint64_t sub_1813030CC(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4) {
    return v4;
  }
  int v6 = *(_DWORD *)(a1 + 128);
  if (v6 <= a3) {
    return 0LL;
  }
  if (a2 == 1) {
    int v8 = a3;
  }
  else {
    int v8 = a3 + 1;
  }
  if (v8 < v6)
  {
    if (a2 == 1) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = a3 + 1LL;
    }
    uint64_t v10 = 56 * v9 + 16;
    do
    {
      sub_1812C08E0(*(void *)(*(void *)(a1 + 120) + v10));
      ++v9;
      v10 += 56LL;
    }

    while (v9 < *(int *)(a1 + 128));
  }

  *(_DWORD *)(a1 + 128) = v8;
  if (a2 == 1)
  {
    uint64_t v24 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v24 + 56LL * v8 + 32))
    {
      uint64_t v25 = *(void ***)(a1 + 88);
      if (*v25)
      {
        if (*v25 == &unk_189B6D428) {
          uint64_t v4 = sub_1812C32AC((uint64_t)v25, (*(void *)(a1 + 200) + 4LL) * *(unsigned int *)(v24 + 56LL * v8 + 28));
        }
        else {
          uint64_t v4 = 0LL;
        }
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(v24 + 56LL * v8 + 28);
        return v4;
      }
    }

    return 0LL;
  }

  uint64_t v11 = *(void *)(a1 + 344);
  if (!v11 && !**(void **)(a1 + 80)) {
    return 0LL;
  }
  if (!v8 || (uint64_t v12 = *(void *)(a1 + 120)) == 0)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 36);
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    if (!v11)
    {
      uint64_t v19 = 0LL;
      uint64_t v21 = (uint64_t *)(a1 + 96);
      uint64_t v22 = *(void *)(a1 + 96);
      char v23 = 1;
      *(void *)(a1 + 96) = 0LL;
      goto LABEL_65;
    }

    if (*(_BYTE *)(v11 + 64))
    {
      unsigned int v27 = *(_DWORD *)(v11 + 88);
      uint64_t v28 = **(__int128 ***)(v11 + 48);
      __int128 v29 = v28[2];
      __int128 v30 = *v28;
      *(_OWORD *)(v11 + 88) = v28[1];
      *(_OWORD *)(v11 + 72) = v30;
      *(_OWORD *)(v11 + 104) = v29;
      int v31 = *(_DWORD *)(v11 + 88);
      if (v31 + 1 <= v27)
      {
        unsigned int v32 = v31 + 4097;
        do
        {
          unint64_t v37 = v32 + 0xFFFFFFFF021LL;
          uint64_t v38 = *(void **)(v11 + 48);
          if ((v37 & 0xFFFFFFFF000LL) != 0) {
            uint64_t v33 = (unsigned int *)(v38[(int)(v37 >> 12)] + 4LL * (((_WORD)v32 - 4063) & 0xFFF));
          }
          else {
            uint64_t v33 = (unsigned int *)(*v38 + 4LL * (v32 - 4096) + 132);
          }
          uint64_t v34 = sub_1813035C4(a1, *v33);
          unsigned int v35 = v32 - 4095;
          ++v32;
          if ((_DWORD)v34) {
            BOOL v36 = 1;
          }
          else {
            BOOL v36 = v35 > v27;
          }
        }

        while (!v36);
        uint64_t v4 = v34;
        int v31 = *(_DWORD *)(v11 + 88);
      }

      else
      {
        uint64_t v4 = 0LL;
      }

      if (v27 != v31) {
        sub_1812FC724(v11);
      }
    }

    else
    {
      uint64_t v4 = 0LL;
    }

    uint64_t v39 = sub_1812FF3A4(*(uint64_t **)(a1 + 336));
    if ((_DWORD)v4) {
      BOOL v40 = 1;
    }
    else {
      BOOL v40 = v39 == 0LL;
    }
    if (!v40)
    {
      do
      {
        __int16 v41 = (_BYTE *)*((void *)v39 + 4);
        uint64_t v42 = sub_1813035C4(a1, *((unsigned int *)v39 + 12));
        uint64_t v4 = v42;
        if (v41) {
          BOOL v43 = (_DWORD)v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        uint64_t v39 = v41;
      }

      while (v43);
    }

    return v4;
  }

  uint64_t v13 = v8 - 1LL;
  uint64_t v14 = v12 + 56 * v13;
  int v17 = *(_DWORD *)(v14 + 24);
  int v15 = (int *)(v14 + 24);
  int v16 = v17;
  uint64_t v18 = (_OWORD *)sub_18126F0AC(512LL);
  if (!v18) {
    return 7LL;
  }
  uint64_t v11 = (uint64_t)v18;
  a4 = 0.0;
  v18[30] = 0u;
  v18[31] = 0u;
  uint64_t v19 = v12 + 56 * v13;
  v18[28] = 0u;
  v18[29] = 0u;
  v18[26] = 0u;
  v18[27] = 0u;
  v18[24] = 0u;
  v18[25] = 0u;
  v18[22] = 0u;
  v18[23] = 0u;
  v18[20] = 0u;
  v18[21] = 0u;
  v18[18] = 0u;
  v18[19] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  _OWORD *v18 = 0u;
  v18[1] = 0u;
  *(_DWORD *)uint64_t v18 = v16;
  int v20 = *v15;
  uint64_t v21 = (uint64_t *)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 96);
  *(_DWORD *)(a1 + 32) = v20;
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  if (*(void *)(a1 + 344))
  {
    char v23 = 0;
    uint64_t *v21 = 0LL;
    goto LABEL_65;
  }

  if (*(void *)(v12 + 56 * v13 + 8)) {
    uint64_t v44 = *(void *)(v12 + 56 * v13 + 8);
  }
  else {
    uint64_t v44 = v22;
  }
  uint64_t *v21 = *(void *)v19;
  while (*v21 < v44)
  {
    uint64_t v45 = sub_1812C8EA0(a1, (void *)(a1 + 96), (unsigned int *)v11, 1, 1);
    if ((_DWORD)v45)
    {
      uint64_t v4 = v45;
      goto LABEL_80;
    }
  }

  char v23 = 0;
LABEL_65:
  while (*v21 < v22)
  {
    LODWORD(v56) = 0;
    *(float *)&a4 = sub_1812C8B74(a1, 0, v22, &v56, &v57, a4);
    uint64_t v4 = v46;
    LODWORD(v47) = v56;
    if ((_DWORD)v56)
    {
      if (!(_DWORD)v46) {
        goto LABEL_68;
      }
    }

    else
    {
      uint64_t v50 = *(void *)(a1 + 104) + *(unsigned int *)(a1 + 184);
      if (v50 == *(void *)(a1 + 96))
      {
        uint64_t v47 = (v22 - v50) / (*(void *)(a1 + 200) + 8LL);
        if (!(_DWORD)v46)
        {
LABEL_68:
          if ((_DWORD)v47)
          {
            unsigned int v48 = 1;
            while (*v21 < v22)
            {
              uint64_t v4 = sub_1812C8EA0(a1, v21, (unsigned int *)v11, 1, 1);
              goto LABEL_64;
            }

            uint64_t v4 = 0LL;
          }
        }
      }
    }

LABEL_93:
  sub_1812C08E0(v11);
  if (!(_DWORD)v4) {
    uint64_t *v21 = v22;
  }
  return v4;
}

  unint64_t v37 = result[10];
  if ((v37 & 2) != 0 && *((_BYTE *)result + 22) == 1)
  {
    unsigned int v35 = *((_DWORD *)result + 4);
    goto LABEL_88;
  }

  if ((v37 & 0x10) == 0)
  {
    if ((v37 & 1) == 0)
    {
      uint64_t result = (unsigned __int16 *)sub_181303970((uint64_t)result, 1);
      unsigned int v35 = (int)result;
      goto LABEL_88;
    }

        sub_1812CF36C(97441);
        return;
      }

      if (v8 != 45 || v11 != 3)
      {
LABEL_39:
        uint64_t v18 = *(char **)(a2 + 8);
        if (v18) {
          uint64_t v19 = strlen(v18) & 0x3FFFFFFF;
        }
        else {
          uint64_t v19 = 0;
        }
        sub_1812B8054((unsigned __int8 *)v18, (double *)&v42, v19, 1);
        if (a3)
        {
          int v20 = v42;
          uint64_t v21 = *(void *)a3;
          if ((*(_WORD *)(v21 + 20) & 0x9000) != 0) {
            sub_181303888((int *)v21);
          }
          else {
            *(_WORD *)(v21 + 20) = 1;
          }
          *(void *)uint64_t v21 = v20;
          *(_WORD *)(v21 + 20) = 8;
        }

        else
        {
          sub_1812CF36C(97397);
        }

        return;
      }

      if (!a3) {
        goto LABEL_93;
      }
      uint64_t v5 = *(void *)a3;
      if ((*(_WORD *)(*(void *)a3 + 20LL) & 0x9000) != 0)
      {
        sub_1813040AC(v5, 0x8000000000000000LL);
        return;
      }

      BOOL v40 = 0x8000000000000000LL;
LABEL_96:
      *(void *)uint64_t v5 = v40;
LABEL_100:
      uint64_t v39 = 4;
LABEL_101:
      *(_WORD *)(v5 + 20) = v39;
      return;
    case 5:
      goto LABEL_39;
    case 6:
      if ((*(_BYTE *)(a2 + 1) & 1) != 0)
      {
        if (a3)
        {
          uint64_t v13 = *(_DWORD *)(a2 + 4);
          uint64_t v14 = *(char **)(a2 + 8);
          goto LABEL_43;
        }
      }

      else
      {
        if ((*(_BYTE *)(a2 + 1) & 2) != 0)
        {
          uint64_t v22 = *(unsigned int *)(a2 + 4);
          char v23 = *(void *)(a2 + 8);
          uint64_t v24 = sqlite3_initialize();
          if (v22 > 0x7FFFFFFE || v24 || (uint64_t v25 = sub_18126F0AC(v22 + 1)) == 0)
          {
            sqlite3_result_error_nomem(a3);
          }

          else
          {
            uint64_t v26 = (const char *)v25;
            unsigned int v27 = v22 - 1;
            if ((v22 - 1) < 2)
            {
              uint64_t v28 = 0;
            }

            else
            {
              uint64_t v28 = 0;
              __int128 v29 = v22 - 6;
              __int128 v30 = 1;
              do
              {
                unsigned int v32 = *(unsigned __int8 *)(v23 + v30);
                if (v32 == 92)
                {
                  int v31 = v30 + 1LL;
                  LOBYTE(v32) = 8;
                  switch(*(_BYTE *)(v23 + v31))
                  {
                    case 0xD:
                      if (*(_BYTE *)(v23 + v30 + 2) == 10) {
                        LODWORD(v31) = v30 + 2;
                      }
                      break;
                    case 0xE:
                    case 0xF:
                    case 0x10:
                    case 0x11:
                    case 0x12:
                    case 0x13:
                    case 0x14:
                    case 0x15:
                    case 0x16:
                    case 0x17:
                    case 0x18:
                    case 0x19:
                    case 0x1A:
                    case 0x1B:
                    case 0x1C:
                    case 0x1D:
                    case 0x1E:
                    case 0x1F:
                    case 0x20:
                    case 0x21:
                    case 0x23:
                    case 0x24:
                    case 0x25:
                    case 0x26:
                    case 0x28:
                    case 0x29:
                    case 0x2A:
                    case 0x2B:
                    case 0x2C:
                    case 0x2D:
                    case 0x2E:
                    case 0x31:
                    case 0x32:
                    case 0x33:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    case 0x37:
                    case 0x38:
                    case 0x39:
                    case 0x3A:
                    case 0x3B:
                    case 0x3C:
                    case 0x3D:
                    case 0x3E:
                    case 0x3F:
                    case 0x40:
                    case 0x41:
                    case 0x42:
                    case 0x43:
                    case 0x44:
                    case 0x45:
                    case 0x46:
                    case 0x47:
                    case 0x48:
                    case 0x49:
                    case 0x4A:
                    case 0x4B:
                    case 0x4C:
                    case 0x4D:
                    case 0x4E:
                    case 0x4F:
                    case 0x50:
                    case 0x51:
                    case 0x52:
                    case 0x53:
                    case 0x54:
                    case 0x55:
                    case 0x56:
                    case 0x57:
                    case 0x58:
                    case 0x59:
                    case 0x5A:
                    case 0x5B:
                    case 0x5D:
                    case 0x5E:
                    case 0x5F:
                    case 0x60:
                    case 0x61:
                    case 0x63:
                    case 0x64:
                    case 0x65:
                    case 0x67:
                    case 0x68:
                    case 0x69:
                    case 0x6A:
                    case 0x6B:
                    case 0x6C:
                    case 0x6D:
                    case 0x6F:
                    case 0x70:
                    case 0x71:
                    case 0x73:
                    case 0x77:
                      break;
                    case 0x22:
                    case 0x27:
                    case 0x2F:
                    case 0x5C:
                      LOBYTE(v32) = *(_BYTE *)(v23 + v31);
                      goto LABEL_60;
                    case 0x30:
                      LOBYTE(v32) = 0;
                      goto LABEL_60;
                    case 0x62:
                      goto LABEL_60;
                    case 0x66:
                      LOBYTE(v32) = 12;
                      goto LABEL_60;
                    case 0x6E:
                      LOBYTE(v32) = 10;
                      goto LABEL_60;
                    case 0x72:
                      LOBYTE(v32) = 13;
                      goto LABEL_60;
                    case 0x74:
                      LOBYTE(v32) = 9;
                      goto LABEL_60;
                    case 0x75:
                      uint64_t v33 = sub_18135C824((unsigned __int8 *)(v23 + v31 + 1));
                      if (!v33) {
                        goto LABEL_106;
                      }
                      LODWORD(v31) = v30 + 5;
                      if (v33 <= 0x7F)
                      {
                        v26[v28++] = v33;
                        break;
                      }

                      if (v33 > 0x7FF)
                      {
                        if (v31 < v29
                          && (v33 & 0xFC00) == 0xD800
                          && *(_BYTE *)(v23 + v30 + 6) == 92
                          && *(_BYTE *)(v23 + v30 + 7) == 117)
                        {
                          __int16 v41 = v33;
                          BOOL v36 = sub_18135C824((unsigned __int8 *)(v23 + 3 + v31));
                          uint64_t v33 = v41;
                          if ((v36 & 0xFC00) == 0xDC00)
                          {
                            unint64_t v37 = v36 & 0x3FF | ((v41 & 0x3FF) << 10);
                            LODWORD(v31) = v30 + 11;
                            v26[v28] = ((v37 + 0x10000) >> 18) | 0xF0;
                            v26[v28 + 1] = ((v37 + 0x10000) >> 12) & 0x3F | 0x80;
                            v26[v28 + 2] = (v37 >> 6) & 0x3F | 0x80;
                            uint64_t v38 = v28 + 3;
                            v28 += 4;
                            v26[v38] = v36 & 0x3F | 0x80;
                            break;
                          }
                        }

                        v26[v28] = (v33 >> 12) | 0xE0;
                        v26[v28 + 1] = (v33 >> 6) & 0x3F | 0x80;
                        uint64_t v34 = v28 + 2;
                        unsigned int v35 = v33 & 0x3F | 0x80;
                        v28 += 3;
                      }

                      else
                      {
                        v26[v28] = (v33 >> 6) | 0xC0;
                        uint64_t v34 = v28 + 1;
                        unsigned int v35 = v33 & 0x3F | 0x80;
                        v28 += 2;
                      }

                      v26[v34] = v35;
                      break;
                    case 0x76:
                      LOBYTE(v32) = 11;
                      goto LABEL_60;
                    case 0x78:
                      LODWORD(v31) = v30 + 3;
                      LOBYTE(v32) = ((((char)(2 * *(_BYTE *)(v23 + v30 + 3)) >> 7) & 0xF9)
                                   + *(_BYTE *)(v23 + v30 + 3)) & 0xF | (16
                                                                       * ((((char)(2
                                                                                               * *(_BYTE *)(v23 + v30 + 2)) >> 7) & 9)
                                                                        + *(_BYTE *)(v23 + v30 + 2)));
                      goto LABEL_60;
                    default:
                      break;
                  }
                }

                else
                {
                  LODWORD(v31) = v30;
LABEL_60:
                  v26[v28++] = v32;
                }

                __int128 v30 = v31 + 1;
              }

              while ((int)v31 + 1 < v27);
            }

        v51 += (_DWORD)v57 - (_DWORD)v54;
        if (v51 < 1) {
          break;
        }
        uint64_t v52 = v54[1];
        if ((char)v54[1] < 0)
        {
          uint64_t v52 = v52 & 0x7F | (v54[2] << 7);
          if ((char)v54[2] < 0)
          {
            uint64_t v52 = v52 & 0x3FFF | (v54[3] << 14);
            if ((char)v54[3] < 0)
            {
              uint64_t v52 = v52 & 0x1FFFFF | (v54[4] << 21);
              if ((char)v54[4] < 0)
              {
                uint64_t v52 = v52 & 0xFFFFFFF | ((v54[5] & 7) << 28);
                uint64_t v56 = (char *)(v54 + 6);
              }

              else
              {
                uint64_t v56 = (char *)(v54 + 5);
              }
            }

            else
            {
              uint64_t v56 = (char *)(v54 + 4);
            }
          }

          else
          {
            uint64_t v56 = (char *)(v54 + 3);
          }
        }

        else
        {
          uint64_t v56 = (char *)(v54 + 2);
        }
      }

      int v57 = (char *)v54;
LABEL_104:
      uint64_t v127 = v57;
      uint64_t v126 = v51;
    }

    if ((v47 & 2) == 0 || v51 >= 1)
    {
      if (*(_BYTE *)(v5 + 463) && v48 >= 1)
      {
        uint64_t v61 = v119 - v124;
        if (v119 <= v124) {
          return 267LL;
        }
      }

      else
      {
        if (v48 >= 1 && v119 >= v124) {
          return 267LL;
        }
        uint64_t v61 = v124 - v119;
      }

      uint64_t v62 = v48 + 20LL;
      int v63 = v61;
      do
      {
        ++v62;
        uint8x16_t v64 = v63 > 0x7F;
        v63 >>= 7;
      }

      while (v64);
      uint64_t v65 = v62 + ((v47 << 31 >> 31) & (v51 + 1));
      int8x16x2_t v66 = v47;
      if (*(void *)(v4 + 32) < v65)
      {
        int v67 = 2 * v65;
        *(void *)(v4 + 32) = 2 * v65;
        uint64_t v68 = *(void *)(v4 + 24);
        if (sqlite3_initialize()) {
          return 7LL;
        }
        uint64_t v69 = sub_18127D33C(v68, v67);
        if (!v69) {
          return 7LL;
        }
        *(void *)(v4 + 24) = v69;
        int8x16x2_t v66 = v120;
      }

      uint64_t v70 = (_BYTE *)(*(void *)(v4 + 24) + v48);
      if ((v66 & 0x20) != 0)
      {
        uint64_t v71 = 0;
        uint64_t v72 = v127;
        __n128 v73 = *v127;
        uint64_t v122 = 0;
        if (v73 == 1)
        {
          uint64_t v79 = v127;
        }

        else
        {
          if (v73 == 2)
          {
            uint64_t v74 = 0LL;
            uint64_t v75 = v61;
            do
            {
              uint64_t v76 = v75;
              v70[v74++] = v75 | 0x80;
              uint8x16_t v64 = v75 > 0x7F;
              v75 >>= 7;
            }

            while (v64);
            int v77 = v76 & 0x7F;
            int v78 = &v70[v74];
            *(v78 - 1) = v77;
            uint64_t v71 = v74 + 1;
            char *v78 = 2;
            __n128 v73 = *v72;
            uint64_t v122 = 1;
          }

          uint64_t v79 = v72;
          if (v73 >= 2)
          {
            do
            {
              BOOL v80 = v73 & 0x80;
              BOOL v81 = *++v79;
              LOBYTE(v73) = v81;
            }

            while (v81 & 0xFE | v80);
          }
        }

        uint64_t v85 = &v72[v51];
        while (v79 < v85)
        {
          v79 += (int)sub_181363B00(v79 + 1, &v128) + 1;
          uint64_t v86 = *v79;
          if (v86 == 2)
          {
            if (!v122)
            {
              uint64_t v87 = &v70[v71];
              int v88 = v61;
              do
              {
                char v89 = v88;
                *v87++ = v88 | 0x80;
                ++v71;
                uint8x16_t v64 = v88 > 0x7F;
                v88 >>= 7;
              }

              while (v64);
              *(v87 - 1) = v89 & 0x7F;
            }

            unsigned int v90 = &v70[v71];
            *unsigned int v90 = 1;
            uint64_t v91 = v90 + 1;
            uint64_t v92 = v128;
            v71 += 2;
            do
            {
              uint64_t v93 = v92;
              *v91++ = v92 | 0x80;
              ++v71;
              uint8x16_t v64 = v92 > 0x7F;
              v92 >>= 7;
            }

            while (v64);
            *(v91 - 1) = v93 & 0x7F;
            v70[v71 - 1] = 2;
            uint64_t v86 = *v79;
            uint64_t v122 = 1;
          }

          if (v86 >= 2)
          {
            do
            {
              unsigned int v94 = v86 & 0x80;
              uint64_t v95 = *++v79;
              LOBYTE(v86) = v95;
            }

            while (v95 & 0xFE | v94);
          }
        }

        if (v122) {
          v70[v71++] = 0;
        }
        LODWORD(v8) = v125;
        v48 += v71;
        uint64_t v84 = v119;
        if (v71) {
          uint64_t v84 = v124;
        }
      }

      else
      {
        do
        {
          uint64_t v82 = v61;
          *v70++ = v61 | 0x80;
          ++v48;
          uint8x16_t v64 = v61 > 0x7F;
          v61 >>= 7;
        }

        while (v64);
        *(v70 - 1) = v82 & 0x7F;
        if ((v120 & 1) != 0)
        {
          memcpy((void *)(*(void *)(v4 + 24) + v48), v127, v51);
          BOOL v83 = v51 + v48;
          v48 += v51 + 1;
          *(_BYTE *)(*(void *)(v4 + 24) + v83) = 0;
        }

        uint64_t v84 = v124;
        LODWORD(v8) = v125;
      }

      int v119 = v84;
    }

    if ((_DWORD)v49 == (_DWORD)v8) {
      int v96 = -1;
    }
    else {
      int v96 = 0;
    }
    uint64_t v97 = v49 - ((_DWORD)v49 == (_DWORD)v8);
    if (v97 >= 1)
    {
      unsigned int v98 = v49 + v96 - 1;
      do
      {
        int v99 = v97--;
        if ((int)v8 > v99)
        {
          int v100 = v97;
          int v101 = v6[v97];
          int v102 = (int8x16_t *)&v6[v98];
          do
          {
            if ((v3(v101, v102->i64[1]) & 0x80000000) != 0) {
              break;
            }
            ++v100;
            unsigned int v103 = *v102;
            void *v102 = vextq_s8(*v102, *v102, 8uLL);
            int v102 = (int8x16_t *)((char *)v102 + 8);
            int v101 = v103.i64[0];
          }

          while (v100 < (int)v36);
        }

        --v98;
        LODWORD(v8) = v125;
      }

      while (v99 > 1);
    }

    uint64_t v46 = *v6;
    uint64_t v5 = a1;
    uint64_t v4 = a2;
    uint64_t v47 = v120;
  }

  while (*(void *)(*v6 + 112));
  int v7 = v123;
  if (v48 < 1) {
    goto LABEL_7;
  }
  char v108 = v48 + 20LL;
  char v109 = *(void *)(a2 + 24);
  if (*(void *)(a2 + 32) < v108)
  {
    char v110 = 2 * v108;
    *(void *)(a2 + 32) = 2 * v108;
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v113 = sub_18127D33C(v109, v110);
    if (!v113) {
      return 7LL;
    }
    char v109 = v113;
    *(void *)(a2 + 24) = v113;
  }

  int v114 = v109 + v48;
  *(void *)int v114 = 0LL;
  *(void *)(v114 + 8) = 0LL;
  *(_DWORD *)(v114 + 16) = 0;
  *(void *)(a2 + 72) = *(void *)(a2 + 24);
  *(_DWORD *)(a2 + 80) = v48;
LABEL_178:
  uint64_t result = 100LL;
  *(_DWORD *)(v4 + 12) = v8;
  return result;
}

      char v110 = 0LL;
      unsigned int v60 = (void *)*((void *)a1 + 8);
      if (v60)
      {
        *((void *)a1 + 8) = 0LL;
        uint64_t v61 = (sqlite3_stmt *)v60[3];
        uint64_t v62 = (void *)v60[4];
        int v63 = v62[3];
        if (v63) {
          xmmword_18C465400(v63);
        }
        sub_1812F20DC(v62, v60);
        uint8x16_t v64 = v62[3];
        if (v64) {
          xmmword_18C465410(v64);
        }
        sqlite3_finalize(v61);
      }

      uint64_t v34 = 0LL;
      uint64_t v9 = v53;
      goto LABEL_100;
    }

    if (*(void *)(v110 + 136LL * *(unsigned __int16 *)(*(void *)(v110 + 88) + 4LL) + 112)) {
      (*(void (**)(uint64_t, uint64_t))(v110 + 56))( v110,  v110 + 136LL * *(unsigned __int16 *)(*(void *)(v110 + 88) + 4LL) + 96);
    }
  }

uint64_t sub_1813035C4(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = (*((uint64_t (**)(void, uint64_t, void))&xmmword_18C465458 + 1))( *(void *)(*(void *)(a1 + 336) + 72LL),  a2,  0LL);
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t *)v4;
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v7 = v5[1];
  if (*(void *)v7)
  {
    ++*(void *)(v6 + 24);
    uint64_t v8 = *(void *)(v7 + 56) + 1LL;
    *(void *)(v7 + 56) = v8;
    if (v8 == 1) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }

  uint64_t v12 = sub_1812FD158(v6, v2, v5);
  if (v12)
  {
    uint64_t v7 = v12;
    if (*(void *)(v12 + 56) == 1LL)
    {
LABEL_4:
      uint64_t v9 = *(void *)(v7 + 24);
      if ((*(_WORD *)(v7 + 52) & 2) == 0)
      {
LABEL_19:
        --*(void *)(v9 + 24);
        xmmword_18C465468(*(void *)(v9 + 72), *(void *)v7, 1LL);
        goto LABEL_20;
      }

      uint64_t v10 = *(void *)(v7 + 72);
      if (*(void *)(v9 + 16) == v7)
      {
        *(void *)(v9 + 16) = v10;
        uint64_t v11 = *(void *)(v7 + 64);
        if (v11)
        {
LABEL_7:
          *(void *)(v11 + 72) = v10;
          uint64_t v10 = *(void *)(v7 + 72);
          if (!v10)
          {
            *(void *)uint64_t v9 = v11;
            goto LABEL_19;
          }

uint64_t sub_181303778(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)a1 + 16LL))( a1,  &v5,  4LL,  a2);
  if (!(_DWORD)result) {
    *a3 = bswap32(v5);
  }
  return result;
}

uint64_t sub_1813037C4(uint64_t a1, unsigned int a2)
{
  if (a2 != 3082 && !*(_BYTE *)(a1 + 103)) {
    return *(_DWORD *)(a1 + 88) & a2;
  }
  if (*(_BYTE *)(a1 + 103))
  {
    int v3 = *(_DWORD *)(a1 + 220);
    if (!v3)
    {
      *(_BYTE *)(a1 + 103) = 0;
      *(_DWORD *)(a1 + 424) = 0;
      int v4 = *(_DWORD *)(a1 + 432) - 1;
      *(_DWORD *)(a1 + 432) = v4;
      if (!v4) {
        LOWORD(v3) = *(_WORD *)(a1 + 438);
      }
      *(_WORD *)(a1 + 436) = v3;
    }
  }

  uint64_t v2 = 7LL;
  *(_DWORD *)(a1 + 80) = 7;
  sub_1812FA264(a1, 7);
  return v2;
}

void sub_181303838(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_181303888((int *)a1);
  }
  if (*(_DWORD *)(a1 + 32))
  {
    sub_1812F20DC(*(void **)(a1 + 24), *(void **)(a1 + 40));
    *(_DWORD *)(a1 + 32) = 0;
  }

  *(void *)(a1 + 8) = 0LL;
}

void sub_181303888(int *a1)
{
  int v2 = *((__int16 *)a1 + 10);
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }

  uint64_t v3 = *(void *)a1;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  WORD2(v8) = 1;
  *((void *)&v8 + 1) = *((void *)a1 + 3);
  v11[1] = v3;
  void v11[2] = a1;
  v11[0] = &v7;
  LOBYTE(v13) = *(_BYTE *)(*((void *)&v8 + 1) + 100LL);
  (*(void (**)(void *))(v3 + 32))(v11);
  if (a1[8] >= 1) {
    sub_1812F20DC(*((void **)a1 + 3), *((void **)a1 + 5));
  }
  __int128 v4 = v8;
  *(_OWORD *)a1 = v7;
  *((_OWORD *)a1 + 1) = v4;
  __int128 v5 = v10;
  *((_OWORD *)a1 + 2) = v9;
  *((_OWORD *)a1 + 3) = v5;
  if ((a1[5] & 0x1000) != 0)
  {
LABEL_7:
    uint64_t v6 = *((void *)a1 + 6);
    if (*((_BYTE *)a1 + 56))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(*((void *)a1 + 6), *((void *)a1 + 1));
      _Block_release(*((const void **)a1 + 6));
      *((void *)a1 + 6) = 0LL;
    }

    else
    {
      ((void (*)(void))v6)(*((void *)a1 + 1));
    }
  }

uint64_t sub_181303970(uint64_t a1, int a2)
{
  uint64_t result = sub_181303998((int *)a1, a2);
  if (result) {
    return *(unsigned int *)(a1 + 16);
  }
  return result;
}

uint64_t sub_181303998(int *a1, int a2)
{
  __int16 v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) != 0)
  {
    if ((a1[5] & 0x400) == 0) {
      goto LABEL_9;
    }
    int v5 = a1[4];
    signed int v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      signed int v6 = 1;
    }

    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    __int16 v4 = a1[5] & 0xF9FF;
LABEL_9:
    *((_WORD *)a1 + 10) = v4 | 2;
    if ((a2 & 8) == 0)
    {
      int v7 = *((unsigned __int16 *)a1 + 10);
      goto LABEL_30;
    }

    int v7 = *((unsigned __int16 *)a1 + 10);
    if ((a1[2] & 1) == 0)
    {
LABEL_30:
      if ((v7 & 0x2020202) == 2) {
        sub_181303BA0((uint64_t)a1);
      }
      goto LABEL_36;
    }

    if ((v7 & 0x12) == 0)
    {
LABEL_29:
      v7 &= 0xBFFFu;
      *((_WORD *)a1 + 10) = v7;
      goto LABEL_30;
    }

    if ((v7 & 0x400) != 0)
    {
      int v8 = a1[4];
      signed int v9 = *a1 + v8;
      if (!((v9 < 0) ^ __OFADD__(*a1, v8) | (v9 == 0))) {
        goto LABEL_23;
      }
      if ((v7 & 0x10) != 0)
      {
        signed int v9 = 1;
LABEL_23:
        bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
        a1[4] += *a1;
        LOWORD(v7) = a1[5] & 0xF9FF;
        *((_WORD *)a1 + 10) = v7;
      }
    }

    if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
    {
      LOWORD(v7) = *((_WORD *)a1 + 10);
    }

    goto LABEL_29;
  }

  if (a1[8] >= 32)
  {
    __int128 v10 = (void *)*((void *)a1 + 5);
    *((void *)a1 + 1) = v10;
    *((_WORD *)a1 + 10) = v4 & 0x2D;
  }

  else
  {
    if (sub_18128FAF0((uint64_t)a1, 32, 0))
    {
      *((_BYTE *)a1 + 22) = 0;
      goto LABEL_36;
    }

    __int128 v10 = (void *)*((void *)a1 + 1);
  }

  sub_181303C44(v10, (uint64_t)a1);
  *((_BYTE *)a1 + 22) = 1;
  *((_WORD *)a1 + 10) |= 0x202u;
  if (a2 != 1) {
    sub_1812C23E8(a1, a2);
  }
LABEL_36:
  return 0LL;
}

uint64_t sub_181303BA0(uint64_t a1)
{
  uint64_t result = sub_18128FAF0(a1, *(_DWORD *)(a1 + 16) + 3, 1);
  if ((_DWORD)result) {
    return 7LL;
  }
  *(_BYTE *)(*(void *)(a1 + 8) + *(int *)(a1 + 16)) = 0;
  *(_BYTE *)(*(int *)(a1 + 16) + *(void *)(a1 + 8) + 1LL) = 0;
  *(_BYTE *)(*(int *)(a1 + 16) + *(void *)(a1 + 8) + 2LL) = 0;
  *(_WORD *)(a1 + 20) |= 0x200u;
  return result;
}

uint64_t sub_181303C10(uint64_t a1, signed int a2)
{
  if (*(_DWORD *)(a1 + 32) < a2) {
    return sub_18128FAF0(a1, a2, 0);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 40);
  *(_WORD *)(a1 + 20) &= 0x2Du;
  return 0LL;
}

void sub_181303C44(void *__dst, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int16 v4 = *(_WORD *)(a2 + 20);
  if ((v4 & 4) != 0)
  {
    uint64_t v6 = *(void *)a2;
    else {
      unint64_t v7 = -v6;
    }
    LOWORD(v15) = (v7 % 0xA) | 0x30;
    if (v7 >= 0xA)
    {
      uint64_t v11 = 19LL;
      do
      {
        *((_BYTE *)v13 + v11--) = (v7 / 0xA - 10 * ((v7 / 0xA * (unsigned __int128)0x199999999999999AuLL) >> 64)) | 0x30;
        BOOL v12 = v7 > 0x63;
        v7 /= 0xAuLL;
      }

      while (v12);
      int v8 = v11 + 1;
      if ((v6 & 0x8000000000000000LL) == 0) {
        goto LABEL_9;
      }
    }

    else
    {
      int v8 = 20;
      if ((v6 & 0x8000000000000000LL) == 0)
      {
LABEL_9:
        uint64_t v9 = v8;
LABEL_16:
        memcpy(__dst, (char *)v13 + v9, 22 - v9);
        int v10 = 21 - v8;
        goto LABEL_17;
      }
    }

    uint64_t v9 = v8 - 1LL;
    *((_BYTE *)v13 + v9) = 45;
    --v8;
    goto LABEL_16;
  }

  v13[0] = 0LL;
  v13[1] = __dst;
  int v14 = 32;
  uint64_t v15 = 0LL;
  __int16 v16 = 0;
  if ((v4 & 0x20) != 0) {
    double v5 = (double)*(uint64_t *)a2;
  }
  else {
    double v5 = *(double *)a2;
  }
  sqlite3_str_appendf((sqlite3_str *)v13, "%!.15g", *(void *)&v5);
  int v10 = HIDWORD(v15);
  *((_BYTE *)__dst + HIDWORD(v15)) = 0;
LABEL_17:
  *(_DWORD *)(a2 + 16) = v10;
}

double sub_181303DB8(uint64_t a1)
{
  double v2 = 0.0;
  sub_1812B8054(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_181303DF0(uint64_t a1)
{
  uint64_t v2 = 0LL;
  sub_181303E28(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_181303E28(unsigned __int8 *a1, void *a2, int a3, int a4)
{
  if (a4 == 1)
  {
    uint64_t result = 0LL;
    unsigned int v6 = 1;
    unint64_t v7 = a1;
  }

  else
  {
    LODWORD(v8) = 3 - a4;
    if (3 - a4 >= (int)(a3 & 0xFFFFFFFE))
    {
      uint64_t result = 0LL;
    }

    else
    {
      uint64_t v8 = (int)v8;
      while (!a1[v8])
      {
        v8 += 2LL;
        if (v8 >= (int)(a3 & 0xFFFFFFFE))
        {
          uint64_t result = 0LL;
          goto LABEL_10;
        }
      }

      uint64_t result = 1LL;
    }

void sub_1813040AC(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_181303888((int *)a1);
  }
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 20) = 4;
}

uint64_t sub_1813040F4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, void *a6)
{
  int v8 = *(_DWORD *)(a1 + 144);
  if (!a2 || (*(_WORD *)(a2 + 20) & 0x10) == 0)
  {
    uint64_t v9 = 0LL;
    LODWORD(v10) = 0;
    goto LABEL_4;
  }

  int v30 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = (v30 >> 3);
  uint64_t v9 = *(void **)(a2 + 8);
  if (v30 >= 8)
  {
    if (v30 < 0x10)
    {
      uint64_t v31 = 0LL;
      do
LABEL_43:
        v8 += *(_DWORD *)(v9[v31++] + 8LL);
      while (v10 != v31);
      goto LABEL_4;
    }

    uint64_t v32 = 0LL;
    int v33 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE;
    do
    {
      uint64_t v34 = &v9[v32];
      v8 += *(_DWORD *)(*v34 + 8LL);
      v33 += *(_DWORD *)(v34[1] + 8LL);
      v32 += 2LL;
    }

    while (v31 != v32);
    v8 += v33;
    if (v31 != v10) {
      goto LABEL_43;
    }
  }

void *sub_1813043CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  unsigned int v34 = 0;
  uint64_t v35 = 2147483645LL;
  __int16 v36 = 0;
  uint64_t v9 = "program";
  switch(*(_BYTE *)(a2 + 1))
  {
    case 0xF1:
    case 0xF9:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%s(%d)");
      goto LABEL_52;
    case 0xF2:
      uint64_t v10 = *(unsigned int **)(a2 + 16);
      unsigned int v11 = *v10;
      if (!*v10) {
        goto LABEL_41;
      }
      unsigned int v12 = 1;
      do
      {
        if (v12 == 1) {
          uint64_t v13 = 91LL;
        }
        else {
          uint64_t v13 = 44LL;
        }
        sqlite3_str_appendf((sqlite3_str *)&v32, "%c%u", v13, v10[v12++]);
      }

      while (v12 <= v11);
      uint64_t v14 = HIDWORD(v35);
      if (HIDWORD(v35) + 1 >= v34)
      {
LABEL_41:
        int v25 = "]";
        LODWORD(a3) = 1;
        goto LABEL_51;
      }

      ++HIDWORD(v35);
      *(_BYTE *)(v33 + v14) = 93;
      goto LABEL_52;
    case 0xF3:
      goto LABEL_14;
    case 0xF4:
      goto LABEL_10;
    case 0xF5:
      sqlite3_str_appendf((sqlite3_str *)&v32, "vtab:%p");
      goto LABEL_52;
    case 0xF6:
      uint64_t v15 = *(void *)(a2 + 16);
      __int16 v16 = *(_WORD *)(v15 + 20);
      if ((v16 & 2) != 0)
      {
        uint64_t v9 = *(const char **)(v15 + 8);
        if (!v9) {
          goto LABEL_52;
        }
      }

      else
      {
        if ((v16 & 0x24) != 0)
        {
LABEL_14:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%lld");
          goto LABEL_52;
        }

        if ((v16 & 8) != 0)
        {
LABEL_10:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%.16g");
          goto LABEL_52;
        }

        if ((v16 & 1) != 0) {
          uint64_t v9 = "NULL";
        }
        else {
          uint64_t v9 = "(blob)";
        }
      }

uint64_t sub_1813047D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 != 0x8000000000000000LL)
  {
    if (a2 <= 0)
    {
      if (v2 >= 1 && (v2 ^ 0x7FFFFFFFFFFFFFFFuLL) < -a2) {
        return 1LL;
      }
    }

    else if (v2 < 0 && (uint64_t)(0x8000000000000001LL - v2) > 1 - a2)
    {
      return 1LL;
    }

    unint64_t v3 = v2 - a2;
    goto LABEL_14;
  }

  if (v2 < 0)
  {
    unint64_t v3 = v2 ^ 0x8000000000000000LL;
LABEL_14:
    *a1 = v3;
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_18130484C(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if ((uint64_t)a2 >= 1)
  {
    goto LABEL_11;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    goto LABEL_11;
  }
  if (v2 >= 1)
  {
    goto LABEL_11;
  }

  if ((v2 & 0x8000000000000000LL) == 0) {
    goto LABEL_11;
  }
  uint64_t v4 = 1LL;
  if (a2 == 0x8000000000000000LL || v2 == 0x8000000000000000LL) {
    return v4;
  }
  if (0x7FFFFFFFFFFFFFFFuLL / -(uint64_t)a2 >= -v2)
  {
LABEL_11:
    uint64_t v4 = 0LL;
    *a1 = v2 * a2;
    return v4;
  }

  return 1LL;
}

uint64_t sub_181304904(uint64_t a1)
{
  if (!a1)
  {
    sub_1812CF36C(89717);
LABEL_5:
    uint64_t result = 0LL;
    goto LABEL_15;
  }

  __int16 v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    uint64_t result = *(void *)a1;
    goto LABEL_15;
  }

  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x12) != 0 && *(void *)(a1 + 8))
    {
      uint64_t result = sub_181303DF0(a1);
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  else {
    uint64_t result = 0x8000000000000000LL;
  }
LABEL_15:
  *(void *)a1 = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 4;
  return result;
}

uint64_t sub_1813049BC(uint64_t a1, int a2, int a3)
{
  __int16 v3 = *(_WORD *)(a1 + 20);
  if ((v3 & 1) != 0) {
    return 0LL;
  }
  switch(a2)
  {
    case 'A':
      if ((v3 & 0x10) != 0)
      {
        uint64_t result = 0LL;
        *(_WORD *)(a1 + 20) = v3 & 0xF250;
      }

      else
      {
        sub_1812AB614(a1, 66, a3);
        __int16 v6 = *(_WORD *)(a1 + 20);
        if ((v6 & 2) == 0) {
          return 0LL;
        }
        uint64_t result = 0LL;
        *(_WORD *)(a1 + 20) = v6 & 0xF240 | 0x10;
      }

      return result;
    case 'C':
      sub_181308904(a1);
      return 0LL;
    case 'D':
      if ((v3 & 0x24) != 0)
      {
        double v10 = *(double *)a1;
      }

      else if ((v3 & 8) != 0)
      {
        double v10 = -0.0;
        uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }

      else if ((v3 & 0x12) != 0)
      {
        double v10 = *(double *)(a1 + 8);
        if (v10 != 0.0)
        {
          double v10 = COERCE_DOUBLE(sub_181303DF0(a1));
          __int16 v3 = *(_WORD *)(a1 + 20);
        }
      }

      else
      {
        double v10 = 0.0;
      }

      uint64_t result = 0LL;
      *(double *)a1 = v10;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 4;
      return result;
    case 'E':
      if ((v3 & 8) != 0)
      {
        double v11 = *(double *)a1;
      }

      else if ((v3 & 0x24) != 0)
      {
        double v11 = (double)*(uint64_t *)a1;
      }

      else if ((v3 & 0x12) != 0)
      {
        double v11 = sub_181303DB8(a1);
        __int16 v3 = *(_WORD *)(a1 + 20);
      }

      else
      {
        double v11 = 0.0;
      }

      uint64_t result = 0LL;
      *(double *)a1 = v11;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 8;
      return result;
    default:
      *(_WORD *)(a1 + 20) |= (*(_WORD *)(a1 + 20) >> 3) & 2;
      sub_1812AB614(a1, 66, a3);
      __int16 v8 = *(_WORD *)(a1 + 20);
      __int16 v9 = v8 & 0xFBC3;
      *(_WORD *)(a1 + 20) = v8 & 0xFBC3;
      if (a3 != 1) {
        *(_DWORD *)(a1 + 16) &= ~1u;
      }
      if ((v8 & 2) != 0)
      {
        if (*(unsigned __int8 *)(a1 + 22) != a3)
        {
          uint64_t result = sub_1812C23E8((int *)a1, a3);
          if ((_DWORD)result) {
            return result;
          }
          __int16 v9 = *(_WORD *)(a1 + 20);
        }
      }

      else
      {
        *(_BYTE *)(a1 + 22) = a3;
      }

      if ((v9 & 0x6202) != 2 || *(_BYTE *)(a1 + 22) != 1) {
        return 0LL;
      }
      uint64_t result = *(void *)(a1 + 8);
      if (!result) {
        return result;
      }
      if ((v9 & 0x1000) == 0)
      {
        int v12 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 32) <= v12) {
          return 0LL;
        }
        goto LABEL_49;
      }

      uint64_t v14 = *(void (__cdecl **)(void *))(a1 + 48);
      if (v14 == sqlite3_free)
      {
        unsigned int v15 = off_18C4653B8(result);
        int v12 = *(_DWORD *)(a1 + 16);
        if (v15 >= v12 + 1)
        {
          uint64_t result = *(void *)(a1 + 8);
LABEL_49:
          *(_BYTE *)(result + v12) = 0;
          goto LABEL_50;
        }

        uint64_t v14 = *(void (__cdecl **)(void *))(a1 + 48);
      }

BOOL sub_181304C60(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    BOOL v3 = *(void *)a1 == 0LL;
  }

  else
  {
    if ((v2 & 1) != 0) {
      return a2;
    }
    if ((v2 & 8) != 0)
    {
      double v4 = *(double *)a1;
    }

    else if ((v2 & 0x12) != 0)
    {
      double v4 = sub_181303DB8(a1);
    }

    else
    {
      double v4 = 0.0;
    }

    BOOL v3 = v4 == 0.0;
  }

  return !v3;
}

uint64_t sub_181304CC0(uint64_t a1)
{
  uint64_t result = sub_181305CF8(*(void *)(a1 + 40), *(void *)(a1 + 72), 0, &v3);
  if (!(_DWORD)result)
  {
    if (v3)
    {
      return sub_1812FBF50(94942);
    }

    else
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a1 + 3) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
  }

  return result;
}

uint64_t sub_181304D2C(uint64_t a1)
{
  __int16 v2 = *(unsigned __int8 **)(a1 + 40);
  unsigned int v3 = *v2;
  if (v3 >= 3)
  {
    uint64_t v4 = sub_181308C74(*(void *)(a1 + 40));
    if ((_DWORD)v4)
    {
      *(_DWORD *)(a1 + 24) = 0;
LABEL_6:
      *(_BYTE *)(a1 + 2) = 1;
      return v4;
    }

    unsigned int v3 = *v2;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  if (v3) {
    goto LABEL_6;
  }
  return v5;
}

uint64_t sub_181304D90(char *a1, int *a2)
{
  int v3 = *a1;
  int v4 = a1[1];
  if (a1[1] < 0)
  {
    int v6 = a1[2];
    if (v6 < 0)
    {
      uint64_t result = sub_18129BD74(a1, &v8);
      if (HIDWORD(v8)) {
        int v7 = -1;
      }
      else {
        int v7 = v8;
      }
      *a2 = v7;
    }

    else
    {
      *a2 = v6 & 0x7F | (v3 << 14) & 0x1FC07F | ((v4 & 0x7F) << 7);
      return 3LL;
    }
  }

  else
  {
    *a2 = ((v3 & 0x7F) << 7) | v4;
    return 2LL;
  }

  return result;
}

uint64_t sub_181304E1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(*(void *)(a1 + 136) + 88LL) - v4;
  if (v3 > v5) {
    int v3 = v5 & ~(v5 >> 31);
  }
  *(void *)(a3 + 8) = v4;
  if (v3 < a2) {
    return sub_1812A4B24(a1, 0, a2, a3);
  }
  *(_WORD *)(a3 + 20) = 16400;
  *(_DWORD *)(a3 + 16) = a2;
  return 0LL;
}

uint64_t sub_181304E6C(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a7 + 24);
  if (a3 < 0x80) {
    unsigned int v15 = byte_1813C6D70[a3];
  }
  else {
    unsigned int v15 = (a3 - 12) >> 1;
  }
  unsigned int v17 = *(unsigned __int8 *)(a7 + 22);
  if (v15 >= 0xFA1 && !*(void *)(a1 + 48))
  {
    if ((*(_BYTE *)(a1 + 5) & 0x10) != 0)
    {
      unsigned int v29 = *(unsigned __int8 *)(a7 + 22);
      int v19 = *(_OWORD **)(a1 + 104);
      int v20 = *(char **)v19;
      if (!*(void *)v19) {
        goto LABEL_32;
      }
    }

    else
    {
      unint64_t v18 = (_OWORD *)sub_1812F2264(v14, 0x20uLL);
      if (!v18)
      {
        *(void *)(a1 + 104) = 0LL;
        return 7LL;
      }

      int v19 = v18;
      unsigned int v29 = v17;
      _OWORD *v18 = 0u;
      v18[1] = 0u;
      *(void *)(a1 + 104) = v18;
      *(_BYTE *)(a1 + 5) |= 0x10u;
      int v20 = *(char **)v18;
      if (!*(void *)v18) {
        goto LABEL_32;
      }
    }

    if (*((_DWORD *)v19 + 4) != a2 || *((_DWORD *)v19 + 5) != a5 || *((_DWORD *)v19 + 6) != a6) {
      goto LABEL_24;
    }
    uint64_t v28 = *((void *)v19 + 1);
    uint64_t v21 = sub_181308DBC(*(void **)(a1 + 40));
    int v20 = *(char **)v19;
    if (v28 == v21) {
      goto LABEL_37;
    }
    if (v20)
    {
LABEL_24:
      unint64_t v24 = *((void *)v20 - 1);
      uint64_t v23 = v20 - 8;
      unint64_t v22 = v24;
      if (v24 < 2)
      {
        int v25 = (uint64_t (**)(char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v23);
          --qword_18C468B10;
          off_18C4653A8(v23);
          uint64_t v23 = (char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_32;
          }
          int v25 = (uint64_t (**)(char *))&xmmword_18C465410;
        }

        (*v25)(v23);
      }

      else
      {
        *(void *)uint64_t v23 = v22 - 1;
      }
    }

uint64_t sub_181305164(int8x8_t *a1, unint64_t a2)
{
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      return sub_181308E00(a1, a2);
    }

    else
    {
      a1->i8[0] = (a2 >> 7) | 0x80;
      a1->i8[1] = a2 & 0x7F;
      return 2LL;
    }
  }

  else
  {
    a1->i8[0] = a2;
    return 1LL;
  }

uint64_t sub_1813051A0(uint64_t a1)
{
  if (*(_BYTE *)a1) {
    return -1LL;
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (!*(_BYTE *)(v3 + 8)) {
    return -1LL;
  }
  uint64_t result = *(unsigned __int16 *)(v3 + 24);
  if (*(char *)(a1 + 84) >= 1)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 84);
    if ((_DWORD)v4 == 1)
    {
      uint64_t v5 = 0LL;
LABEL_10:
      __int16 v9 = (uint64_t *)(a1 + 8 * v5 + 144);
      uint64_t v10 = v4 - v5;
      do
      {
        uint64_t v11 = *v9++;
        result *= *(unsigned __int16 *)(v11 + 24);
        --v10;
      }

      while (v10);
      return result;
    }

    uint64_t v5 = v4 & 0xFE;
    uint64_t v6 = a1 + 152;
    uint64_t v7 = 1LL;
    uint64_t v8 = v5;
    do
    {
      result *= *(unsigned __int16 *)(*(void *)(v6 - 8) + 24LL);
      v7 *= *(unsigned __int16 *)(*(void *)v6 + 24LL);
      v6 += 16LL;
      v8 -= 2LL;
    }

    while (v8);
    result *= v7;
    if (v5 != v4) {
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_181305244(uint64_t a1, int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v5 = *v4;
  if (*(_DWORD *)(*v4 + 128) < a2 && *(_BYTE *)(v5 + 10))
  {
    uint64_t v6 = sub_1812FEBEC(v5, a2);
    if (!*(_BYTE *)(a1 + 17)) {
      return v6;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    if (!*(_BYTE *)(a1 + 17)) {
      return v6;
    }
  }

  int v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7) {
    sub_1812FDEFC(a1);
  }
  return v6;
}

uint64_t sub_1813052EC(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = *(void *)(v3 + 32LL * a2 + 24);
    *(_WORD *)(v4 + 114) |= 8u;
    *(_WORD *)(*(void *)(v3 + 56) + 114LL) |= 8u;
    *(_DWORD *)(result + 44) &= ~0x10u;
  }

  if (!*(_DWORD *)(result + 72))
  {
    int v5 = *(_DWORD *)(result + 40);
    if (v5 >= 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 24LL;
      do
      {
        uint64_t result = *(void *)(*(void *)(v2 + 32) + v7);
        if ((*(_WORD *)(result + 114) & 8) != 0)
        {
          uint64_t result = sub_1813070A0(result);
          int v5 = *(_DWORD *)(v2 + 40);
        }

        ++v6;
        v7 += 32LL;
      }

      while (v6 < v5);
    }
  }

  return result;
}

uint64_t sub_181305398(uint64_t result, int a2, int *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 8);
  if (*(_BYTE *)(result + 17) && (++*(_DWORD *)(result + 20), !*(_BYTE *)(result + 18)))
  {
    uint64_t result = sub_1812FDE20(result);
    if (a2 == 15) {
      goto LABEL_4;
    }
  }

  else if (a2 == 15)
  {
LABEL_4:
    int v7 = *(_DWORD *)(v5 + 28) + *(_DWORD *)(*v6 + 132LL);
    goto LABEL_7;
  }

  int v7 = bswap32(*(_DWORD *)(*(void *)(v6[3] + 80LL) + 4 * a2 + 36LL));
LABEL_7:
  *a3 = v7;
  if (*(_BYTE *)(v5 + 17))
  {
    int v8 = *(_DWORD *)(v5 + 20) - 1;
    *(_DWORD *)(v5 + 20) = v8;
    if (!v8) {
      return sub_1812FDEFC(v5);
    }
  }

  return result;
}

void *sub_181305458(void *result, int a2)
{
  uint64_t v2 = *(void **)(*(void *)(result[4] + 32LL * a2 + 24) + 16LL);
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v2[2];
      if (!*(_BYTE *)(v4 + 63))
      {
        for (uint64_t i = *(void *)(v4 + 72); i; uint64_t i = *(void *)(i + 8))
        {
          sub_1812C221C(v3, *(void **)(i + 48));
          *(void *)(i + 48) = 0LL;
          uint64_t result = sub_1812C221C(v3, *(void **)(i + 56));
          *(void *)(i + 56) = 0LL;
        }
      }

      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_1813054E0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  unsigned int v8 = a2;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
    uint64_t v10 = *(void *)(a1 + 8);
    if (v8 <= 1)
    {
      if (!v8)
      {
        uint64_t v18 = sub_1812FBF50(81497);
LABEL_28:
        uint64_t v7 = v18;
        if (*(_BYTE *)(a1 + 17))
        {
LABEL_29:
          int v19 = *(_DWORD *)(a1 + 20) - 1;
          *(_DWORD *)(a1 + 20) = v19;
          if (!v19) {
            sub_1812FDEFC(a1);
          }
        }

        return v7;
      }

      unsigned int v8 = *(_DWORD *)(v10 + 64) != 0;
    }

    *(_DWORD *)(a5 + 80) = v8;
    *(_BYTE *)(a5 + 84) = -1;
    *(void *)(a5 + 128) = a4;
    *(void *)(a5 + 8) = a1;
    *(void *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 1) = 0;
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      char v12 = 0;
      uint64_t v13 = *(void *)(v10 + 16);
      do
      {
        if (*(_DWORD *)(v13 + 80) == v8)
        {
          *(_BYTE *)(v13 + 1) |= 0x20u;
          char v12 = 32;
          *(_BYTE *)(a5 + 1) = 32;
        }

        uint64_t v13 = *(void *)(v13 + 40);
      }

      while (v13);
    }

    else
    {
      char v12 = 0;
    }

    *(_BYTE *)a5 = 1;
    *(void *)(a5 + 40) = v11;
    *(void *)(v10 + 16) = a5;
    if ((_DWORD)v7)
    {
      uint64_t v7 = 0LL;
      *(_BYTE *)(a5 + 1) = v12 | 1;
      *(_BYTE *)(a5 + 2) = 0;
      if (!*(void *)(v10 + 136))
      {
        uint64_t v18 = sub_1813093A0(v10);
        goto LABEL_28;
      }
    }

    else
    {
      *(_BYTE *)(a5 + 2) = 2;
    }

    if (*(_BYTE *)(a1 + 17)) {
      goto LABEL_29;
    }
    return v7;
  }

  uint64_t v14 = *(void *)(a1 + 8);
  if (a2 > 1)
  {
LABEL_15:
    *(_DWORD *)(a5 + 80) = v8;
    *(_BYTE *)(a5 + 84) = -1;
    *(void *)(a5 + 128) = a4;
    *(void *)(a5 + 8) = a1;
    *(void *)(a5 + 32) = v14;
    *(_BYTE *)(a5 + 1) = 0;
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      char v16 = 0;
      uint64_t v17 = *(void *)(v14 + 16);
      do
      {
        if (*(_DWORD *)(v17 + 80) == v8)
        {
          *(_BYTE *)(v17 + 1) |= 0x20u;
          char v16 = 32;
          *(_BYTE *)(a5 + 1) = 32;
        }

        uint64_t v17 = *(void *)(v17 + 40);
      }

      while (v17);
    }

    else
    {
      char v16 = 0;
    }

    *(_BYTE *)a5 = 1;
    *(void *)(a5 + 40) = v15;
    *(void *)(v14 + 16) = a5;
    if ((_DWORD)a3)
    {
      uint64_t v7 = 0LL;
      *(_BYTE *)(a5 + 1) = v16 | 1;
      *(_BYTE *)(a5 + 2) = 0;
      if (!*(void *)(v14 + 136)) {
        return sub_1813093A0(v14);
      }
    }

    else
    {
      *(_BYTE *)(a5 + 2) = 2;
    }

    return v7;
  }

  if (a2)
  {
    unsigned int v8 = *(_DWORD *)(v14 + 64) != 0;
    goto LABEL_15;
  }

  return sub_1812FBF50(81497);
}

uint64_t sub_18130571C(uint64_t a1, unsigned int *a2, char a3)
{
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if (!*((_BYTE *)v6 + 33))
  {
    uint64_t v9 = sub_1812B48CC(*(void *)(a1 + 8), &v48, (int *)&v47, 1u, 0);
    unsigned int v46 = v9;
    if ((_DWORD)v9) {
      goto LABEL_46;
    }
    uint64_t v10 = v48;
    goto LABEL_12;
  }

  for (uint64_t i = *((void *)v6 + 2); i; uint64_t i = *(void *)(i + 40))
    *(_BYTE *)(i + 1) &= ~4u;
  int v8 = *(unsigned __int8 *)(a1 + 17);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (*(_BYTE *)(a1 + 18))
    {
      int v8 = 1;
    }

    else
    {
      sub_1812FDE20(a1);
      int v8 = *(unsigned __int8 *)(a1 + 17);
    }
  }

  unsigned int v13 = bswap32(*(_DWORD *)(*(void *)(*((void *)v6 + 3) + 80LL) + 52LL));
  if (v8)
  {
    int v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14) {
      sub_1812FDEFC(a1);
    }
  }

  if (v13 > v6[16])
  {
    uint64_t v15 = sub_1812FBF50(86771);
    goto LABEL_24;
  }

  do
  {
    do
    {
      while (1)
      {
        unsigned int v16 = v13++;
        if (v13 >= 2) {
          break;
        }
        if (v13) {
          goto LABEL_26;
        }
      }

      unsigned int v17 = (v16 - 1) / (v6[14] / 5u + 1) * (v6[14] / 5u + 1);
      else {
        int v18 = 2;
      }
    }

    while (v13 == v18 + v17);
LABEL_26:
    ;
  }

  while (v16 == dword_18C54FA50 / v6[13]);
  unsigned int v19 = v16 + 1;
  unsigned int v47 = v16 + 1;
  uint64_t v9 = sub_1812B48CC((uint64_t)v6, &v44, (int *)&v45, v16 + 1, 1);
  unsigned int v46 = v9;
  if ((_DWORD)v9) {
    goto LABEL_46;
  }
  uint64_t v20 = v45;
  if (v45 - 1 == v16)
  {
    uint64_t v10 = v44;
    uint64_t v48 = v44;
    goto LABEL_38;
  }

  unsigned __int8 v43 = 0;
  int v42 = 0;
  uint64_t v21 = (unsigned __int8 *)*((void *)v6 + 2);
  if (v21)
  {
    uint64_t v9 = sub_1812FFCF0(v21, 0, 0LL);
    uint64_t v22 = v44;
    if (!v44) {
      goto LABEL_58;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v22 = v44;
    if (!v44) {
      goto LABEL_58;
    }
  }

  uint64_t v28 = *(void *)(v22 + 112);
  if ((*(_WORD *)(v28 + 52) & 0x20) != 0)
  {
    uint64_t v29 = *(void *)(v28 + 40);
    --*(_DWORD *)(v29 + 152);
    *(void *)(v28 + 32) = *(void *)(v29 + 168);
    *(void *)(v29 + 168) = v28;
    (*(void (**)(void, void, void))(**(void **)(v29 + 72) + 144LL))( *(void *)(v29 + 72),  *(void *)(v29 + 200) * (*(_DWORD *)(v28 + 48) - 1),  *(void *)(v28 + 8));
  }

  else
  {
    sub_1812F9F44(v28);
  }

uint64_t sub_181305CF8(uint64_t a1, int64_t a2, char a3, int *a4)
{
  if (!*(_BYTE *)a1 && (*(_BYTE *)(a1 + 1) & 2) != 0)
  {
    int64_t v8 = *(void *)(a1 + 48);
    if (v8 == a2)
    {
      uint64_t result = 0LL;
      *a4 = 0;
      return result;
    }

    if (v8 < a2)
    {
      if ((*(_BYTE *)(a1 + 1) & 8) != 0)
      {
LABEL_38:
        uint64_t result = 0LL;
        *a4 = -1;
        return result;
      }

      if (v8 + 1 == a2)
      {
        *a4 = 0;
        uint64_t result = sub_18129CF68(a1);
        if ((_DWORD)result != 101)
        {
          if ((_DWORD)result) {
            return result;
          }
          sub_1812FFFE4(a1);
          if (*(void *)(a1 + 48) == a2) {
            return 0LL;
          }
        }
      }
    }
  }

  uint64_t result = sub_18129B700((unsigned __int8 *)a1);
  if ((_DWORD)result == 16) {
    goto LABEL_38;
  }
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v27 = a4;
  char v10 = 1 - a3;
  char v28 = 1 - a3;
LABEL_15:
  int v11 = 0;
  uint64_t v12 = *(void *)(a1 + 136);
  int v29 = *(unsigned __int16 *)(v12 + 24);
  int v13 = v29 - 1;
  int v14 = (v29 - 1) >> v10;
  __int16 v15 = *(_WORD *)(v12 + 26);
  uint64_t v17 = *(void *)(v12 + 96);
  uint64_t v16 = *(void *)(v12 + 104);
  int v18 = *(unsigned __int8 *)(v12 + 2);
  while (1)
  {
    uint64_t v19 = (*(unsigned __int8 *)(v17 + 2LL * v14 + 1) | (*(unsigned __int8 *)(v17 + 2LL * v14) << 8)) & *(void *)&v15;
    uint64_t v20 = (char *)(v16 + v19);
    if (v18)
    {
      uint64_t v21 = (char *)(v16 + v19);
      while (1)
      {
        int v22 = *v21++;
        if ((v22 & 0x80000000) == 0) {
          break;
        }
        uint64_t v20 = v21;
      }

      ++v20;
    }

    sub_18129BD74(v20, (unint64_t *)&v30);
    int64_t v23 = v30;
    if (v30 < a2)
    {
      int v11 = v14 + 1;
      if (v14 >= v13)
      {
        int v24 = -1;
        goto LABEL_32;
      }

      goto LABEL_28;
    }

    if (v30 <= a2) {
      break;
    }
    if (v11 >= v14)
    {
      int v24 = 1;
LABEL_32:
      if (*(_BYTE *)(v12 + 8))
      {
        uint64_t result = 0LL;
        *(_WORD *)(a1 + 86) = v14;
        *uint64_t v27 = v24;
LABEL_41:
        *(_WORD *)(a1 + 70) = 0;
        return result;
      }

uint64_t sub_181305F54(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  __int16 v8 = *(_WORD *)(v7 + 20);
  if (**(_BYTE **)(v6 + 24))
  {
    if ((**(_BYTE **)(v6 + 24) & 2) != 0) {
      goto LABEL_9;
    }
    char v9 = -1;
    char v10 = 1;
  }

  else
  {
    char v9 = 1;
    char v10 = -1;
  }

  *((_BYTE *)a2 + 32) = v10;
  *((_BYTE *)a2 + 33) = v9;
  if ((v8 & 4) != 0)
  {
    a2[2] = *(void *)v7;
    int v11 = (uint64_t (*)(unsigned int, char *, uint64_t *))sub_181309A24;
    goto LABEL_10;
  }

  if ((v8 & 0x39) == 0 && !*(void *)(v6 + 32))
  {
    a2[2] = *(void *)(v7 + 8);
    *((_DWORD *)a2 + 6) = *(_DWORD *)(v7 + 16);
    int v11 = (uint64_t (*)(unsigned int, char *, uint64_t *))sub_181309B2C;
    goto LABEL_10;
  }

void *sub_18130667C( uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v9 = *a1;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  uint64_t v34 = 0LL;
  if ((*(_BYTE *)(a5 + 48) & 0x80) != 0)
  {
    for (uint64_t i = *(void *)(a5 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }

    uint64_t v10 = 0LL;
    a6 = 0LL;
    uint64_t v34 = i;
  }

  else if (a3 == 23)
  {
    uint64_t v10 = *(void *)(a1[13] + ((uint64_t)(int)a7 << 6));
  }

  else
  {
    uint64_t v10 = a6;
  }

  v26[0] = a1;
  v26[1] = a2;
  BYTE4(v28) = *(_BYTE *)(v9 + 100);
  WORD3(v28) = *(_WORD *)(a5 + 54);
  LODWORD(v27) = a3;
  *(void *)&__int128 v29 = v9;
  *((void *)&v29 + 1) = &unk_1813C6DF4;
  *(void *)&__int128 v32 = a6;
  *((void *)&v32 + 1) = v10;
  *((void *)&v33 + 1) = a5;
  *((void *)&v31 + 1) = __PAIR64__(a8, a7);
  *(void *)(v9 + 368) = v26;
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(v9 + 360))(*(void *)(v9 + 352), v9);
  *(void *)(v9 + 368) = 0LL;
  if (*((void *)&v27 + 1)) {
    uint64_t result = sub_1812F20DC((void *)v9, *((void **)&v27 + 1));
  }
  uint64_t v13 = (void *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    uint64_t v14 = 0LL;
    unint64_t v15 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      uint64_t v16 = v13[1];
      if (*(void *)(v16 + v14 + 40) && *(_DWORD *)(v16 + v14 + 32)) {
        sub_181303838(v16 + v14);
      }
      v14 += 64LL;
    }

    while (v15 != v14);
    uint64_t result = sub_1813014B0((void *)v9, v13);
  }

  int v17 = (void *)v31;
  if ((void)v31)
  {
    uint64_t v18 = 0LL;
    unint64_t v19 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      uint64_t v20 = v17[1];
      if (*(void *)(v20 + v18 + 40) && *(_DWORD *)(v20 + v18 + 32)) {
        sub_181303838(v20 + v18);
      }
      v18 += 64LL;
    }

    while (v19 != v18);
    uint64_t result = sub_1813014B0((void *)v9, v17);
  }

  unsigned int v21 = (void *)v33;
  if ((void)v33)
  {
    int v22 = *(__int16 *)(a2 + 64);
    if (v22 >= 1)
    {
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      do
      {
        uint64_t v25 = v33 + v23;
        if ((*(_WORD *)(v33 + v23 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32))
        {
          sub_181303838(v25);
          LOWORD(v22) = *(_WORD *)(a2 + 64);
        }

        ++v24;
        v23 += 64LL;
      }

      while (v24 < (__int16)v22);
      unsigned int v21 = (void *)v33;
    }

    return sub_1813014B0((void *)v9, v21);
  }

  return result;
}

uint64_t sub_1813068A8(unsigned int a1, char *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a3[1];
  if (a4)
  {
    unsigned int v8 = a2[1];
    if (a2[1] < 0)
    {
      int v12 = a2[2];
      if (a2[2] < 0)
      {
        int v14 = a2[3];
        if (v14 < 0)
        {
          char v16 = sub_18129BD74(a2 + 1, (unint64_t *)&v59);
          unsigned int v8 = v59;
          unsigned int v9 = (v16 + 1);
          if (DWORD1(v59))
          {
            unsigned int v10 = *a2;
            unsigned int v8 = -1;
            goto LABEL_16;
          }
        }

        else
        {
          unsigned int v8 = v14 & 0x7F | (v8 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
          unsigned int v9 = 4;
        }
      }

      else
      {
        unsigned int v8 = ((v8 & 0x7F) << 7) | v12;
        unsigned int v9 = 3;
      }
    }

    else
    {
      unsigned int v9 = 2;
    }

    unsigned int v10 = *a2;
    if (v8 < 0x80)
    {
      unsigned int v17 = byte_1813C6D70[v8];
LABEL_18:
      unsigned int v18 = v17 + v10;
      v7 += 64LL;
      unint64_t v11 = 1LL;
      if (v17 + v10 > a1)
      {
LABEL_19:
        uint64_t v19 = 0LL;
        *((_BYTE *)a3 + 31) = sub_1812FBF50(95878);
        return v19;
      }

      goto LABEL_24;
    }

uint64_t sub_18130703C(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(*(void *)(result + 32) + 32LL * a2 + 24);
  for (uint64_t i = *(void **)(v4 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v7 = i[2];
    if (*(_DWORD *)(v7 + 40) == a3) {
      *(_DWORD *)(v7 + 40) = a4;
    }
  }

  for (uint64_t j = *(void **)(v4 + 40); j; uint64_t j = (void *)*j)
  {
    uint64_t v8 = j[2];
    if (*(_DWORD *)(v8 + 88) == a3) {
      *(_DWORD *)(v8 + 88) = a4;
    }
  }

  return result;
}

uint64_t sub_1813070A0(uint64_t a1)
{
  __int128 v11 = *(_OWORD *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  __int128 v9 = *(_OWORD *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_18130D1AC(a1 + 32);
  uint64_t v2 = (void *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    do
    {
      sub_18127A200(v8, v2[2]);
      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  sub_18130D1AC((uint64_t)&v9);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v3 = (void *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    do
    {
      uint64_t v6 = v3[2];
      if (v6)
      {
        if (v8[102] || (int v7 = *(_DWORD *)(v6 + 44) - 1, (*(_DWORD *)(v6 + 44) = v7) == 0)) {
          sub_181311A80(v8, (void *)v6);
        }
      }

      uint64_t v3 = (void *)*v3;
    }

    while (v3);
  }

  sub_18130D1AC((uint64_t)&v11);
  uint64_t result = sub_18130D1AC(a1 + 80);
  *(void *)(a1 + 104) = 0LL;
  __int16 v5 = *(_WORD *)(a1 + 114);
  if ((v5 & 1) != 0) {
    ++*(_DWORD *)(a1 + 4);
  }
  *(_WORD *)(a1 + 114) = v5 & 0xFFF6;
  return result;
}

uint64_t sub_1813071AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32)) {
    sub_181303838(a1);
  }
  unint64_t v3 = sub_1812F2264(v2, 0x38uLL);
  if (v3)
  {
    unint64_t v4 = v3;
    if (v2 && *(void *)(v2 + 520) > v3)
    {
      if (*(void *)(v2 + 496) <= v3)
      {
        int v5 = 128;
        goto LABEL_10;
      }

      if (*(void *)(v2 + 504) <= v3)
      {
        int v5 = *(unsigned __int16 *)(v2 + 438);
        goto LABEL_10;
      }
    }

    int v5 = off_18C4653B8(v3);
LABEL_10:
    uint64_t result = 0LL;
    *(void *)unint64_t v4 = 0LL;
    *(void *)(v4 + 8) = v2;
    *(void *)(v4 + 32) = v4 + 56;
    *(void *)(v4 + 40) = 0LL;
    *(void *)(v4 + 16) = 0LL;
    *(void *)(v4 + 24) = 0LL;
    *(_WORD *)(v4 + 48) = (v5 - 56LL) / 0x18uLL;
    *(_WORD *)(v4 + 50) = 1;
    *(_DWORD *)(v4 + 52) = 0;
    *(void *)(a1 + 8) = v4;
    *(_WORD *)(a1 + 20) = 4112;
    *(_BYTE *)(a1 + 56) = 0;
    *(void *)(a1 + 48) = sub_18130F0F4;
    return result;
  }

  return 7LL;
}

uint64_t sub_1813072B4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_WORD *)(result + 48))
  {
    unint64_t v4 = *(void **)(result + 32);
    --*(_WORD *)(result + 48);
    *(void *)(result + 32) = v4 + 3;
    if (!v4) {
      return result;
    }
    goto LABEL_17;
  }

  uint64_t result = *(void *)(result + 8);
  if (*(unsigned __int16 *)(result + 436) <= 0x3F7u)
  {
    if (*(_DWORD *)(result + 432))
    {
      if (*(_BYTE *)(result + 103)) {
        return result;
      }
    }

    else
    {
      ++*(_DWORD *)(result + 452);
    }

uint64_t sub_1813073D4(uint64_t a1, void *a2)
{
  __int16 v4 = *(_WORD *)(a1 + 50);
  if ((v4 & 2) == 0)
  {
    if ((v4 & 1) == 0)
    {
      *(void *)(a1 + 16) = sub_18130F148(*(void **)(a1 + 16));
      __int16 v4 = *(_WORD *)(a1 + 50);
    }

    *(_WORD *)(a1 + 50) = v4 | 3;
  }

  uint64_t v6 = (void *)(a1 + 16);
  int v5 = *(uint64_t **)(a1 + 16);
  if (!v5) {
    return 0LL;
  }
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  *a2 = v8;
  *uint64_t v6 = v7;
  if (v7) {
    return 1LL;
  }
  uint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      __int128 v11 = (void *)*v10;
      sub_1812F20DC(*(void **)(a1 + 8), v10);
      uint64_t v10 = v11;
    }

    while (v11);
  }

  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 40) = 0LL;
  uint64_t result = 1LL;
  *uint64_t v6 = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

uint64_t sub_181307480(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 52) == a2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      goto LABEL_49;
    }
    return 0LL;
  }

  uint64_t v8 = (void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    __int128 v9 = (void **)(a1 + 40);
    if ((*(_WORD *)(a1 + 50) & 1) == 0) {
      uint64_t v7 = sub_18130F148(*(void **)(a1 + 16));
    }
    while (1)
    {
      char v16 = *v9;
      if (!*v9) {
        break;
      }
      uint64_t v10 = v16[2];
      if (!v10)
      {
        uint64_t v17 = v7[1];
        v7[1] = 0LL;
        void v7[2] = 0LL;
        if (!v17)
        {
          v16[2] = v7;
          goto LABEL_45;
        }

        int v18 = 1;
        do
        {
          uint64_t v19 = (void *)v17;
          v29[0] = *(void *)(v17 + 8);
          *(void *)(v17 + 16) = v7;
          *(void *)(v17 + 8) = sub_18130F34C(v29, v18++);
          uint64_t v17 = v29[0];
          uint64_t v7 = v19;
        }

        while (v29[0]);
        goto LABEL_44;
      }

      __int128 v9 = (void **)(v16 + 1);
      sub_18130F2F0(v10, &v28, &v27);
      v16[2] = 0LL;
      __int128 v11 = v28;
      uint64_t v12 = v29;
      do
      {
        uint64_t v13 = *v11;
        int v14 = v7;
        while (1)
        {
          uint64_t v7 = v14;
          uint64_t v15 = *v14;
          if (v13 <= v15) {
            break;
          }
          v12[1] = (uint64_t)v7;
          int v14 = (void *)v7[1];
          uint64_t v12 = v7;
          if (!v14)
          {
            uint64_t v12 = v7;
            uint64_t v7 = v11;
            goto LABEL_16;
          }
        }

        if (v13 < v15)
        {
          v12[1] = (uint64_t)v11;
          uint64_t v12 = v11;
        }

        __int128 v11 = (void *)v11[1];
      }

      while (v11);
LABEL_16:
      v12[1] = (uint64_t)v7;
      uint64_t v7 = (void *)v29[1];
    }

    if (*(_WORD *)(a1 + 48))
    {
      char v16 = *(void **)(a1 + 32);
      --*(_WORD *)(a1 + 48);
      *(void *)(a1 + 32) = v16 + 3;
      *__int128 v9 = v16;
      if (!v16) {
        goto LABEL_45;
      }
      goto LABEL_39;
    }

    uint64_t v20 = *(void *)(a1 + 8);
    if (*(unsigned __int16 *)(v20 + 436) <= 0x3F7u)
    {
      if (*(_DWORD *)(v20 + 432))
      {
        if (*(_BYTE *)(v20 + 103))
        {
LABEL_57:
          *__int128 v9 = 0LL;
LABEL_45:
          *uint64_t v8 = 0LL;
          *(void *)(a1 + 24) = 0LL;
          *(_WORD *)(a1 + 50) |= 1u;
          goto LABEL_46;
        }
      }

      else
      {
        ++*(_DWORD *)(v20 + 452);
      }

void *sub_181307760(void *result)
{
  uint64_t v1 = *result;
  result[1] = *(void *)(*result + 360LL);
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_181307774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  if (v4) {
    goto LABEL_2;
  }
  int v11 = *(unsigned __int8 *)(a1 + 22);
  if (v11 == 5 || v11 == 0)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      if (v11 == 5) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 1LL);
      if ((_DWORD)v15) {
        return v15;
      }
      if (*(_BYTE *)(a1 + 22) == 5) {
        goto LABEL_21;
      }
    }

    *(_BYTE *)(a1 + 22) = 1;
  }

uint64_t sub_1813079EC(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 19)) {
    BOOL v4 = a2 == 4;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && a2 != 2 || v3 == a2) {
    return *(unsigned __int8 *)(a1 + 9);
  }
  *(_BYTE *)(a1 + 9) = a2;
  if ((a2 & 1) != 0 || ((v3 & 5) == 1 ? (BOOL v8 = *(_BYTE *)(a1 + 8) == 0) : (BOOL v8 = 0), !v8))
  {
    if (a2 == 2)
    {
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(void *)v11)
      {
        (*(void (**)(void))(*(void *)v11 + 8LL))(*(void *)(a1 + 80));
        *(void *)uint64_t v11 = 0LL;
      }
    }

    return *(unsigned __int8 *)(a1 + 9);
  }

  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)v9)
  {
    (*(void (**)(void))(*(void *)v9 + 8LL))(*(void *)(a1 + 80));
    *(void *)uint64_t v9 = 0LL;
  }

  if (*(unsigned __int8 *)(a1 + 22) >= 2u)
  {
    uint64_t v10 = *(void (**)(void))(*(void *)a1 + 48LL);
    if (v10) {
      v10();
    }
    return *(unsigned __int8 *)(a1 + 9);
  }

  int v12 = *(unsigned __int8 *)(a1 + 21);
  if (*(_BYTE *)(a1 + 21))
  {
    if (v12 != 1) {
      goto LABEL_40;
    }
  }

  else
  {
    int v13 = sub_18127ADD8((void *)a1);
    if (*(_BYTE *)(a1 + 21) != 1)
    {
      if (v13) {
        goto LABEL_50;
      }
      goto LABEL_40;
    }
  }

  unsigned int v14 = *(unsigned __int8 *)(a1 + 22);
  if (v14 <= 5 && ((1 << v14) & 0x23) != 0)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      if (v14 == 5) {
        goto LABEL_40;
      }
    }

    else
    {
      if (*(_BYTE *)(a1 + 22) == 5) {
        goto LABEL_40;
      }
    }

    *(_BYTE *)(a1 + 22) = 2;
  }

uint64_t sub_181307BB4(char **a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!*(_BYTE *)(a2 + 101))
  {
    BOOL v8 = (char *)sub_1812F2264(a2, 0x28uLL);
    uint64_t v7 = v8;
    if (v8) {
      strcpy(v8, "cannot VACUUM from within a transaction");
    }
    goto LABEL_11;
  }

  if (*(int *)(a2 + 208) >= 2)
  {
    uint64_t v6 = (char *)sub_1812F2264(a2, 0x2BuLL);
    uint64_t v7 = v6;
    if (v6) {
      strcpy(v6, "cannot VACUUM - SQL statements in progress");
    }
LABEL_11:
    if (*a1) {
      sub_1812F20DC((void *)a2, *a1);
    }
    *a1 = v7;
    return 1LL;
  }

  int v11 = *(_DWORD *)(a2 + 76);
  if (!a4)
  {
    uint64_t v15 = &byte_1813CEAEE;
    goto LABEL_23;
  }

  int v12 = *(unsigned __int16 *)(a4 + 20);
  if (((0x4000000040004uLL >> v12) & 1) == 0)
  {
    int v13 = (char *)sub_1812F2264(a2, 0x12uLL);
    uint64_t v7 = v13;
    if (v13) {
      strcpy(v13, "non-text filename");
    }
    goto LABEL_11;
  }

  if ((~v12 & 0x202) == 0 && *(_BYTE *)(a4 + 22) == 1)
  {
    uint64_t v15 = *(const char **)(a4 + 8);
LABEL_21:
    int v16 = *(_DWORD *)(a2 + 76);
    goto LABEL_22;
  }

  if ((v12 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    goto LABEL_21;
  }

  uint64_t v15 = (const char *)sub_181303998((int *)a4, 1);
  int v16 = *(_DWORD *)(a2 + 76);
LABEL_22:
  *(_DWORD *)(a2 + 76) = v16 & 0xFFFFFFF8 | 6;
LABEL_23:
  uint64_t v17 = *(void *)(a2 + 48);
  int v18 = *(_DWORD *)(a2 + 44);
  __int128 v102 = *(_OWORD *)(a2 + 120);
  char v101 = *(_BYTE *)(a2 + 110);
  *(_DWORD *)(a2 + 44) = v18 | 6;
  *(void *)(a2 + 48) = v17 & 0xFFFFFFFEEFFFADFELL | 0x201;
  *(_BYTE *)(a2 + 110) = 0;
  uint64_t v19 = a3;
  uint64_t v20 = (uint64_t *)(*(void *)(a2 + 32) + 32LL * a3);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(v21 + 8);
  uint64_t v100 = v17;
  if (*(_BYTE *)(v22 + 16)) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = *(unsigned __int8 *)(v22 + 20) != 0;
  }
  BOOL v99 = v23;
  uint64_t v24 = *v20;
  uint64_t v25 = *(int *)(a2 + 40);
  if (access(v15, 0) != -1)
  {
    __int128 v31 = (char *)sub_1812F2264(a2, 0x1BuLL);
    __int16 v32 = v31;
    if (v31) {
      strcpy(v31, "output file already exists");
    }
    if (*a1) {
      sub_1812F20DC((void *)a2, *a1);
    }
    uint64_t v33 = 0LL;
    *a1 = v32;
    uint64_t v14 = 1LL;
    goto LABEL_75;
  }

  char v97 = v24;
  char v98 = v25;
  uint64_t v34 = sub_18130F3C8((sqlite3 *)a2, (void **)a1, "ATTACH %Q AS vacuum_db", v26, v27, v28, v29, v30, (char)v15);
  *(_DWORD *)(a2 + 76) = v11;
  if ((_DWORD)v34)
  {
    uint64_t v14 = v34;
    uint64_t v33 = 0LL;
    goto LABEL_75;
  }

  uint64_t v35 = *(void *)(a2 + 32);
  uint64_t v33 = v35 + 32 * v25;
  uint64_t v96 = *(void *)(v33 + 8);
  if (a4)
  {
    uint64_t v36 = *(void *)(**(void **)(*(void *)(v33 + 8) + 8LL) + 72LL);
    uint64_t v104 = 0LL;
    if (*(void *)v36)
    {
      else {
        BOOL v37 = v104 <= 0;
      }
      if (!v37)
      {
        sub_1812C70E8((void **)a1, (void *)a2, "output file already exists");
        uint64_t v14 = 1LL;
        goto LABEL_75;
      }

      uint64_t v35 = *(void *)(a2 + 32);
    }

    int v39 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 44) |= 8u;
    char v38 = v39 & 0x38 | *(_BYTE *)(v35 + 32 * v19 + 16);
  }

  else
  {
    char v38 = 1;
  }

  char v95 = v38;
  if (*(_BYTE *)(v21 + 17))
  {
    int v40 = *(_DWORD *)(v21 + 20) + 1;
    *(_DWORD *)(v21 + 20) = v40;
    if (*(_BYTE *)(v21 + 18))
    {
      uint64_t v41 = *(void *)(v21 + 8);
      int v42 = *(unsigned __int8 *)(v41 + 38);
      int v43 = *(_DWORD *)(v41 + 52);
      int v44 = *(_DWORD *)(v41 + 56);
      goto LABEL_50;
    }

    sub_1812FDE20(v21);
    uint64_t v46 = *(void *)(v21 + 8);
    int v42 = *(unsigned __int8 *)(v46 + 38);
    int v43 = *(_DWORD *)(v46 + 52);
    int v44 = *(_DWORD *)(v46 + 56);
    if (*(_BYTE *)(v21 + 17))
    {
      int v40 = *(_DWORD *)(v21 + 20);
LABEL_50:
      int v47 = v40 - 1;
      *(_DWORD *)(v21 + 20) = v47;
      if (!v47)
      {
        int v48 = v43;
        sub_1812FDEFC(v21);
        int v43 = v48;
      }
    }
  }

  else
  {
    uint64_t v45 = *(void *)(v21 + 8);
    int v42 = *(unsigned __int8 *)(v45 + 38);
    int v43 = *(_DWORD *)(v45 + 52);
    int v44 = *(_DWORD *)(v45 + 56);
  }

  if (v43 - v44 <= v42) {
    int v49 = v42;
  }
  else {
    int v49 = v43 - v44;
  }
  uint64_t v50 = *(void *)(a2 + 32);
  if (*(_DWORD *)(a2 + 116))
  {
    unint64_t v51 = *(_BYTE **)(**(void **)(*(void *)(v50 + 32 * v19 + 8) + 8LL) + 320LL);
    if (v51)
    {
      if (*v51) {
        *(_DWORD *)(a2 + 116) = 0;
      }
    }
  }

  sub_1812FA554(v96, (_DWORD *)(*(void *)(v50 + 32 * v19 + 24) + 116LL));
  uint64_t v52 = *(void *)(v21 + 8);
  if (*(_BYTE *)(v21 + 17))
  {
    ++*(_DWORD *)(v21 + 20);
    if (!*(_BYTE *)(v21 + 18)) {
      sub_1812FDE20(v21);
    }
  }

  unsigned int v53 = *(_DWORD **)(*(void *)v52 + 336LL);
  LODWORD(v52) = v53[8];
  if ((v52 & 0x80000000) != 0)
  {
    uint64_t v54 = (int)v53[11];
    else {
      uint64_t v52 = -1024LL * (int)v52 / (v54 + (int)v53[10]);
    }
  }

  int v55 = v53[9];
  if (*(_BYTE *)(v21 + 17))
  {
    int v56 = *(_DWORD *)(v21 + 20) - 1;
    *(_DWORD *)(v21 + 20) = v56;
    if (!v56) {
      sub_1812FDEFC(v21);
    }
  }

  else {
    int v57 = v52;
  }
  sub_1812FA934(v96, v57);
  sub_18130F444(v96, v95 | 0x20);
  uint64_t v63 = sub_18130F574((sqlite3 *)a2, (void **)a1, "BEGIN", v58, v59, v60, v61, v62);
  if (!(_DWORD)v63)
  {
    uint64_t v63 = sub_18127AD68(v21, 2 * (a4 == 0), 0LL);
    if (!(_DWORD)v63)
    {
      int v67 = *(int **)(v21 + 8);
      if (!a4 && *(_BYTE *)(*(void *)v67 + 9LL) == 5) {
        *(_DWORD *)(a2 + 116) = 0;
      }
      if (sub_1812C72E0(v96, v67[13], v49, 0, v64)
        || !v99 && sub_1812C72E0(v96, *(_DWORD *)(a2 + 116), v49, 0, v68)
        || *(_BYTE *)(a2 + 103))
      {
        uint64_t v14 = 7LL;
        goto LABEL_75;
      }

      else {
        unsigned __int8 v69 = *(_BYTE *)(a2 + 106);
      }
      sub_18130F6DC(v96, v69);
      *(_BYTE *)(a2 + 196) = v98;
      uint64_t v63 = sub_18130F3C8( (sqlite3 *)a2,  (void **)a1,  "SELECT sql FROM %w.sqlite_schema WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0",  v70,  v71,  v72,  v73,  v74,  v97);
      if (!(_DWORD)v63)
      {
        uint64_t v63 = sub_18130F3C8( (sqlite3 *)a2,  (void **)a1,  "SELECT sql FROM %w.sqlite_schema WHERE type='index'",  v75,  v76,  v77,  v78,  v79,  v97);
        if (!(_DWORD)v63)
        {
          *(_BYTE *)(a2 + 196) = 0;
          uint64_t v63 = sub_18130F3C8( (sqlite3 *)a2,  (void **)a1,  "SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM%w.'||quote(name)FROM vacuum_db.sqlite_s chema WHERE type='table'AND coalesce(rootpage,1)>0",  v80,  v81,  v82,  v83,  v84,  v97);
          *(_DWORD *)(a2 + 44) &= ~4u;
          if (!(_DWORD)v63)
          {
            uint64_t v63 = sub_18130F3C8( (sqlite3 *)a2,  (void **)a1,  "INSERT INTO vacuum_db.sqlite_schema SELECT*FROM %w.sqlite_schema WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)",  v85,  v86,  v87,  v88,  v89,  v97);
            if (!(_DWORD)v63)
            {
              sub_181305398(v21, 1, (int *)&v103);
              uint64_t v14 = sub_1812D5F54(v96, 1, v103 + 1);
              if ((_DWORD)v14) {
                goto LABEL_75;
              }
              sub_181305398(v21, 3, (int *)&v103);
              uint64_t v14 = sub_1812D5F54(v96, 3, v103);
              if ((_DWORD)v14) {
                goto LABEL_75;
              }
              sub_181305398(v21, 5, (int *)&v103);
              uint64_t v14 = sub_1812D5F54(v96, 5, v103);
              if ((_DWORD)v14) {
                goto LABEL_75;
              }
              sub_181305398(v21, 6, (int *)&v103);
              uint64_t v14 = sub_1812D5F54(v96, 6, v103);
              if ((_DWORD)v14) {
                goto LABEL_75;
              }
              sub_181305398(v21, 8, (int *)&v103);
              uint64_t v14 = sub_1812D5F54(v96, 8, v103);
              if ((_DWORD)v14) {
                goto LABEL_75;
              }
              if (a4)
              {
                uint64_t v63 = sub_1812E6FE0(v96, v90);
              }

              else
              {
                uint64_t v14 = sub_18130F82C(v21, v96);
                if ((_DWORD)v14) {
                  goto LABEL_75;
                }
                uint64_t v63 = sub_1812E6FE0(v96, v91);
                if (!(_DWORD)v63)
                {
                  unsigned __int8 v92 = sub_18130F79C(v96);
                  sub_18130F6DC(v21, v92);
                  int v93 = sub_1812E3B68(v96);
                  uint64_t v63 = sub_1812C72E0(v21, *(_DWORD *)(*(void *)(v96 + 8) + 52LL), v93, 1, v94);
                }
              }
            }
          }
        }
      }
    }
  }

  uint64_t v14 = v63;
LABEL_75:
  *(_BYTE *)(a2 + 196) = 0;
  *(_DWORD *)(a2 + 44) = v18;
  *(void *)(a2 + 48) = v100;
  *(_OWORD *)(a2 + 120) = v102;
  *(_BYTE *)(a2 + 110) = v101;
  sub_1812C72E0(v21, -1, 0, 1, *(int8x8_t *)&v102);
  *(_BYTE *)(a2 + 101) = 1;
  if (v33)
  {
    sub_1812B54BC(*(void *)(v33 + 8), v65);
    *(void *)(v33 + 8) = 0LL;
    *(void *)(v33 + 24) = 0LL;
  }

  sub_1812D6078(a2);
  return v14;
}

uint64_t sub_18130832C(uint64_t a1, int a2, char a3)
{
  if (!*(_BYTE *)(a1 + 17)) {
    return 0LL;
  }
  unsigned __int8 v5 = a3 + 1;
  ++*(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(a1 + 18))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    goto LABEL_6;
  }

  sub_1812FDE20(a1);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_6:
    if (*(void *)(v6 + 128) != a1 && (*(_WORD *)(v6 + 40) & 0x40) != 0) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint64_t *)(v6 + 120);
    uint64_t v8 = *(void *)(v6 + 120);
    if (v8)
    {
      uint64_t v10 = *(void *)(v6 + 120);
      while (*(void *)v10 == a1 || *(_DWORD *)(v10 + 8) != a2 || *(unsigned __int8 *)(v10 + 12) == v5)
      {
        uint64_t v10 = *(void *)(v10 + 16);
        if (!v10) {
          goto LABEL_19;
        }
      }

      if (v5 == 2) {
        *(_WORD *)(v6 + 40) |= 0x80u;
      }
LABEL_16:
      uint64_t v7 = 262LL;
      if (!*(_BYTE *)(a1 + 17)) {
        return v7;
      }
      goto LABEL_31;
    }

    goto LABEL_20;
  }

  uint64_t v8 = *(void *)(v6 + 120);
LABEL_19:
  uint64_t v9 = (uint64_t *)(v6 + 120);
  if (!v8)
  {
LABEL_20:
    uint64_t v8 = sub_18126F0AC(24LL);
    if (!v8)
    {
      uint64_t v7 = 7LL;
      if (!*(_BYTE *)(a1 + 17)) {
        return v7;
      }
      goto LABEL_31;
    }

    *(void *)uint64_t v8 = 0LL;
    *(void *)(v8 + 8) = 0LL;
    *(void *)(v8 + 16) = 0LL;
    *(_DWORD *)(v8 + 8) = a2;
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 16) = *v9;
    *uint64_t v9 = v8;
    goto LABEL_25;
  }

  while (*(_DWORD *)(v8 + 8) != a2 || *(void *)v8 != a1)
  {
    uint64_t v8 = *(void *)(v8 + 16);
    if (!v8) {
      goto LABEL_20;
    }
  }

void sub_1813084C4(uint64_t a1, int a2, char *a3, void **a4)
{
  uint64_t v6 = sub_1812E2C64(a1, a3, *(_BYTE **)(*(void *)(a1 + 32) + 32LL * a2));
  uint64_t v12 = v6;
  int v13 = **(_BYTE ***)(v6 + 72);
  uint64_t v14 = *(void *)(a1 + 584);
  if (v14)
  {
    int v15 = *v13;
    if (*v13)
    {
      unsigned int v16 = 0;
      uint64_t v17 = v13 + 1;
      do
      {
        unsigned int v16 = -1640531535 * (v16 + byte_1813C6343[v15]);
        int v18 = *v17++;
        int v15 = v18;
      }

      while (v18);
    }

    else
    {
      unsigned int v16 = 0;
    }

    uint64_t v25 = (_DWORD *)(v14 + 16LL * (v16 % *(_DWORD *)(a1 + 568)));
    uint64_t v19 = (uint64_t *)(v25 + 2);
    int v20 = *v25;
    if (v20)
    {
      while (1)
      {
LABEL_20:
        uint64_t v19 = (uint64_t *)*v19;
        uint64_t v26 = (_BYTE *)v19[3];
        for (uint64_t i = **(unsigned __int8 ***)(v6 + 72); ; ++i)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *i;
          if ((_DWORD)v28 != (_DWORD)v29) {
            break;
          }
          if (!*v26) {
            goto LABEL_8;
          }
LABEL_22:
          ++v26;
        }

        if (byte_1813C6343[v28] == byte_1813C6343[v29]) {
          goto LABEL_22;
        }
        if (!--v20)
        {
          uint64_t v19 = &qword_18C550660;
          goto LABEL_8;
        }
      }
    }
  }

  else
  {
    uint64_t v19 = (uint64_t *)(a1 + 576);
    int v20 = *(_DWORD *)(a1 + 572);
    if (v20) {
      goto LABEL_20;
    }
  }

  uint64_t v19 = &qword_18C550660;
LABEL_8:
  uint64_t v21 = v19[2];
  if (v21
    && (uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v21 + 8LL)) != 0LL
    && *(void *)(*(void *)v21 + 40LL))
  {
    if (!sub_18130FAF8(a1, v6, v21, v7, a4, v9, v10, v11))
    {
      uint64_t v24 = *(void **)(v12 + 80);
      BOOL v23 = (uint64_t **)(v12 + 80);
      uint64_t v22 = v24;
      if (v24)
      {
        while (*v22 != a1)
        {
          uint64_t v22 = (void *)v22[5];
          if (!v22) {
            return;
          }
        }

        sub_18130FA18(a1);
        if (!v30)
        {
          do
          {
            __int128 v31 = *v23;
            __int16 v32 = *v23;
            uint64_t v33 = *v32;
            BOOL v23 = (uint64_t **)(v32 + 5);
          }

          while (v33 != a1);
          uint64_t v34 = *(void *)(a1 + 600);
          uint64_t v35 = *(int *)(a1 + 564);
          *(_DWORD *)(a1 + 564) = v35 + 1;
          *(void *)(v34 + 8 * v35) = v31;
          ++*((_DWORD *)v31 + 6);
        }
      }
    }
  }

  else
  {
    *a4 = sub_18127F588(a1, "no such module: %s", v21, (uint64_t)v7, v8, v9, v10, v11, **(void **)(v6 + 72));
  }

uint64_t sub_1813086A8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sub_18130875C(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_181303888((int *)a1);
  }
  *(_WORD *)(a1 + 20) = 4;
  return a1;
}

void sub_18130879C(uint64_t a1, __int128 *a2, __int16 a3)
{
  do
    sub_181303888((int *)a1);
  while ((*(_WORD *)(a1 + 20) & 0x9000) != 0);
  __int128 v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  if ((*((_BYTE *)a2 + 21) & 0x20) == 0) {
    *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0x8FFF | a3;
  }
}

uint64_t sub_181308808(int *a1)
{
  __int16 v2 = *((_WORD *)a1 + 10);
  int v3 = a1[4];
  if ((v2 & 0x400) != 0)
  {
    signed int v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      signed int v4 = 1;
    }

    if (sub_18128FAF0((uint64_t)a1, v4, 1))
    {
      uint64_t v5 = 0LL;
LABEL_16:
      *(void *)a1 = v5;
      return 4LL;
    }

    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    int v3 = a1[4] + *a1;
    a1[4] = v3;
    *((_WORD *)a1 + 10) &= 0xF9FFu;
  }

uint64_t sub_181308904(uint64_t result)
{
  uint64_t v1 = result;
  __int16 v2 = *(_WORD *)(result + 20);
  if ((v2 & 0x2D) == 0)
  {
    uint64_t result = sub_1812B8054( *(unsigned __int8 **)(result + 8),  (double *)result,  *(_DWORD *)(result + 16),  *(unsigned __int8 *)(result + 22));
    if (result > 1
      || (uint64_t result = sub_181303E28( *(unsigned __int8 **)(v1 + 8),  &v7,  *(_DWORD *)(v1 + 16),  *(unsigned __int8 *)(v1 + 22)),  (int)result > 1))
    {
      double v4 = *(double *)v1;
      uint64_t v3 = 0x8000000000000000LL;
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      if (v4 >= -9.22337204e18) {
        uint64_t v3 = v5;
      }
      if (v4 != 0.0)
      {
        __int16 v6 = 8;
      }
    }

    else
    {
      uint64_t v3 = v7;
    }

    *(void *)uint64_t v1 = v3;
    __int16 v6 = 4;
LABEL_13:
    __int16 v2 = *(_WORD *)(v1 + 20) & 0xF240 | v6;
  }

  *(_WORD *)(v1 + 20) = v2 & 0xFBED;
  return result;
}

uint64_t sub_181308A00(__int128 *a1, __int128 *a2, uint64_t a3, _BYTE *a4)
{
  int v6 = *(unsigned __int8 *)(a3 + 8);
  if (*((unsigned __int8 *)a1 + 22) == v6) {
    return (*(uint64_t (**)(void, void, void, void, void))(a3 + 24))( *(void *)(a3 + 16),  *((unsigned int *)a1 + 4),  *((void *)a1 + 1),  *((unsigned int *)a2 + 4),  *((void *)a2 + 1));
  }
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v9 = *((void *)a1 + 3);
  int v21 = 0;
  uint64_t v16 = v9;
  int v17 = 0;
  __int128 v18 = *a1;
  uint64_t v19 = v10;
  uint64_t v20 = v9;
  if ((*((_BYTE *)a1 + 21) & 0x20) == 0) {
    WORD2(v19) = WORD2(v19) & 0x8FFF | 0x4000;
  }
  __int128 v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  if ((*((_BYTE *)a2 + 21) & 0x20) == 0) {
    WORD2(v15) = WORD2(v15) & 0x8FFF | 0x4000;
  }
  if ((~WORD2(v19) & 0x202) != 0 || BYTE6(v19) != v6)
  {
    if ((v19 & 0x100000000LL) != 0)
    {
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = sub_181303998((int *)&v18, v6);
      int v6 = *(unsigned __int8 *)(a3 + 8);
    }
  }

  else
  {
    uint64_t v11 = *((void *)&v18 + 1);
  }

  if ((~WORD2(v15) & 0x202) != 0 || BYTE6(v15) != v6)
  {
    if ((v15 & 0x100000000LL) != 0 || (uint64_t v12 = sub_181303998((int *)&v14, v6), !v11))
    {
LABEL_21:
      uint64_t v13 = 0LL;
      if (a4) {
        *a4 = 7;
      }
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v12 = *((void *)&v14 + 1);
    if (!v11) {
      goto LABEL_21;
    }
  }

  if (!v12) {
    goto LABEL_21;
  }
  uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, void))(a3 + 24))( *(void *)(a3 + 16),  v19,  v11,  v15);
LABEL_23:
  if (v21) {
    sub_181303838((uint64_t)&v18);
  }
  if (v17) {
    sub_181303838((uint64_t)&v14);
  }
  return v13;
}

uint64_t sub_181308B9C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = *(unsigned __int16 *)(a1 + 20);
  int v5 = *(unsigned __int16 *)(a2 + 20);
  if (((v5 | v4) & 0x400) != 0)
  {
    int v10 = v4 & 0x400;
    if ((v10 & v5) != 0)
    {
      return (*(_DWORD *)a1 - *(_DWORD *)a2);
    }

    else if (v10)
    {
      if (v3 < 1)
      {
        return (*(_DWORD *)a1 - v3);
      }

      else
      {
        __int128 v14 = *(unsigned __int8 **)(a2 + 8);
        uint64_t v15 = *(unsigned int *)(a2 + 16);
        while (!*v14++)
        {
          if (!--v15) {
            return (*(_DWORD *)a1 - v3);
          }
        }

        return 0xFFFFFFFFLL;
      }
    }

    else if (v2 < 1)
    {
      return (v2 - *(_DWORD *)a2);
    }

    else
    {
      uint64_t v11 = *(unsigned __int8 **)(a1 + 8);
      uint64_t v12 = *(unsigned int *)(a1 + 16);
      while (!*v11++)
      {
        if (!--v12) {
          return (v2 - *(_DWORD *)a2);
        }
      }

      return 1LL;
    }
  }

  else
  {
    int v6 = *(const void **)(a1 + 8);
    uint64_t v7 = *(const void **)(a2 + 8);
    unsigned int v8 = v2 - v3;
    if (v2 >= v3) {
      int v2 = v3;
    }
    LODWORD(result) = memcmp(v6, v7, v2);
    if ((_DWORD)result) {
      return result;
    }
    else {
      return v8;
    }
  }

uint64_t sub_181308C74(uint64_t a1)
{
  int v5 = 0;
  if (*(_BYTE *)a1 == 4) {
    return *(unsigned int *)(a1 + 4);
  }
  *(_BYTE *)a1 = 1;
  uint64_t result = sub_1812AF8DC(a1, *(char **)(a1 + 24), *(void *)(a1 + 72), 0, &v5);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int v4 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      uint64_t v3 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_14;
      }
      int v4 = &xmmword_18C465410;
    }

    (*v4)(v3);
  }

uint64_t sub_181308DBC(void *a1)
{
  return a1[7] - *(void *)(a1[17] + 80LL) + (*(unsigned int *)(a1[17] + 4LL) - 1LL) * *(unsigned int *)(a1[4] + 52LL);
}

uint64_t sub_181308E00(int8x8_t *a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unint64_t v2 = HIBYTE(a2);
  if (HIBYTE(a2))
  {
    a1[1].i8[0] = a2;
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a2);
    *a1 = vorr_s8( vmovn_s16( vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1813CDD10),  (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1813CDD00)),  (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1813CDD30),  (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1813CDD20)))),  (int8x8_t)0x8080808080808080LL);
    return 9LL;
  }

  do
  {
    v20[v2++] = a2 | 0x80;
    BOOL v3 = a2 > 0x7F;
    a2 >>= 7;
  }

  while (v3);
  v20[0] &= ~0x80u;
  if (v2 < 8)
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = v2 - 1;
    goto LABEL_17;
  }

  if (v2 >= 0x20)
  {
    uint64_t v7 = (int8x16_t *)&v20[v2 - 16];
    unint64_t v4 = v2 & 0x7FFFFFE0;
    unsigned int v8 = (int8x16_t *)&a1[2];
    unint64_t v9 = v2 & 0xFFFFFFFFFFFFFFE0LL;
    do
    {
      int8x16_t v10 = vrev64q_s8(*v7);
      int8x16_t v11 = vrev64q_s8(v7[-1]);
      v8[-1] = vextq_s8(v10, v10, 8uLL);
      *unsigned int v8 = vextq_s8(v11, v11, 8uLL);
      v8 += 2;
      v7 -= 2;
      v9 -= 32LL;
    }

    while (v9);
    if (v2 == v4) {
      return v2;
    }
    if ((v2 & 0x18) == 0)
    {
      unint64_t v5 = (~v2 | 0x1F) + v2;
LABEL_17:
      int v17 = &v20[v5];
      do
      {
        __int8 v18 = *v17--;
        a1->i8[v4++] = v18;
      }

      while (v2 != v4);
      return v2;
    }
  }

  else
  {
    unint64_t v4 = 0LL;
  }

  uint64_t v12 = (int8x8_t *)((char *)a1 + v4);
  unint64_t v13 = v4 - (v2 & 0xFFFFFFFFFFFFFFF8LL);
  __int128 v14 = &v20[-v4];
  unint64_t v4 = v2 & 0x7FFFFFF8;
  unint64_t v5 = ~(v2 & 0xFFFFFFFFFFFFFFF8LL) + v2;
  uint64_t v15 = (int8x8_t *)&v14[v2 - 8];
  do
  {
    int8x8_t v16 = *v15--;
    *v12++ = vrev64_s8(v16);
    v13 += 8LL;
  }

  while (v13);
  if (v2 != v4) {
    goto LABEL_17;
  }
  return v2;
}

uint64_t sub_181308FB8(_DWORD *a1, unsigned int a2, uint64_t *a3)
{
  if (a1[16] >= a2)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
    if ((_DWORD)v7)
    {
      uint64_t v8 = v7;
      *a3 = 0LL;
    }

    else
    {
      uint64_t v9 = *(void *)(v15 + 16);
      if (*(_BYTE *)v9) {
        goto LABEL_6;
      }
      if (*(_DWORD *)(v9 + 4) != a2)
      {
        uint64_t v10 = *(void *)(v15 + 8);
        *(void *)(v9 + 112) = v15;
        *(void *)(v9 + 72) = a1;
        *(void *)(v9 + 80) = v10;
        *(_DWORD *)(v9 + 4) = a2;
        if (a2 == 1) {
          char v11 = 100;
        }
        else {
          char v11 = 0;
        }
        *(_BYTE *)(v9 + 9) = v11;
      }

      uint64_t v12 = sub_18129B974(v9);
      if (!(_DWORD)v12)
      {
LABEL_6:
        uint64_t v8 = 0LL;
        *a3 = v9;
      }

      else
      {
        uint64_t v8 = v12;
        uint64_t v13 = *(void *)(v9 + 112);
        if ((*(_WORD *)(v13 + 52) & 0x20) != 0)
        {
          uint64_t v14 = *(void *)(v13 + 40);
          --*(_DWORD *)(v14 + 152);
          *(void *)(v13 + 32) = *(void *)(v14 + 168);
          *(void *)(v14 + 168) = v13;
          (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144LL))( *(void *)(v14 + 72),  *(void *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1),  *(void *)(v13 + 8));
        }

        else
        {
          sub_1812F9F44(v13);
        }

        *a3 = 0LL;
      }
    }

    return v8;
  }

  else
  {
    *a3 = 0LL;
    return sub_1812FBF50(79200);
  }

void *sub_181309100(void *result, uint64_t a2)
{
  if (a2) {
    return sub_18128FDA0(result, a2, 1);
  }
  return result;
}

void *sub_181309110(void *result, unsigned __int8 *a2)
{
  BOOL v3 = result;
  if ((a2[6] & 0x81) == 0)
  {
    if (*((void *)a2 + 2) && *a2 != 178) {
      uint64_t result = (void *)sub_181309110(result);
    }
    if (*((void *)a2 + 3))
    {
      uint64_t result = (void *)sub_181309110(v3);
    }

    else
    {
      int v4 = *((_DWORD *)a2 + 1);
      unint64_t v5 = (void *)*((void *)a2 + 4);
      if ((v4 & 0x1000) != 0)
      {
        if (v5) {
          uint64_t result = (void *)sub_18128FDA0(v3, v5, 1LL);
        }
      }

      else
      {
        if (v5)
        {
          uint64_t result = sub_181311F48(v3, v5);
          int v4 = *((_DWORD *)a2 + 1);
        }

        if ((v4 & 0x1000000) != 0) {
          uint64_t result = sub_1813091C8(v3, *((void **)a2 + 9));
        }
      }
    }
  }

  if ((a2[7] & 8) == 0) {
    return sub_1813014B0(v3, a2);
  }
  return result;
}

void *sub_1813091C8(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    int v4 = (void *)a2[7];
    if (v4)
    {
      *int v4 = a2[8];
      uint64_t v5 = a2[8];
      if (v5) {
        *(void *)(v5 + 56) = a2[7];
      }
      a2[7] = 0LL;
    }

    if (a2[9]) {
      sub_181309110(result);
    }
    uint64x2_t v6 = (void *)a2[2];
    if (v6) {
      sub_181311F48(v3, v6);
    }
    uint64_t v7 = (void *)a2[3];
    if (v7) {
      sub_181311F48(v3, v7);
    }
    if (a2[6]) {
      sub_181309110(v3);
    }
    if (a2[5]) {
      sub_181309110(v3);
    }
    if (*a2) {
      sub_1812F20DC(v3, (void *)*a2);
    }
    uint64_t v8 = (void *)a2[1];
    if (v8) {
      sub_1812F20DC(v3, v8);
    }
    return sub_1812F20DC(v3, a2);
  }

  return result;
}

void *sub_18130928C(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    if (*(int *)a2 >= 1)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = a2 + 4;
      do
      {
        uint64x2_t v6 = (void *)*(v5 - 1);
        if (v6) {
          sub_181311F48(v3, v6);
        }
        if (*v5) {
          sub_18128FDA0(v3, *v5, 1);
        }
        uint64_t v7 = (void *)*(v5 - 2);
        if (v7) {
          sub_1812F20DC(v3, v7);
        }
        ++v4;
        v5 += 6;
      }

      while (v4 < *(int *)a2);
    }

    return sub_1812F20DC(v3, a2);
  }

  return result;
}

void *sub_181309328(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    int v4 = *(_DWORD *)a2;
    if (*(int *)a2 >= 1)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 1LL;
      do
      {
        uint64_t v7 = (void *)a2[v6];
        if (v7)
        {
          sub_1812F20DC(v3, v7);
          int v4 = *(_DWORD *)a2;
        }

        ++v5;
        v6 += 2LL;
      }

      while (v5 < v4);
    }

    return sub_1813014B0(v3, a2);
  }

  return result;
}

uint64_t sub_1813093A0(uint64_t a1)
{
  uint64_t v2 = sub_1812FDBB8(*(_DWORD *)(a1 + 52));
  *(void *)(a1 + 136) = v2;
  if (v2)
  {
    BOOL v3 = (void *)v2;
    uint64_t result = 0LL;
    *BOOL v3 = 0LL;
    *(void *)(a1 + 136) += 4LL;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(v5 + 40);
    *(void *)(v5 + 288) = 0LL;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    uint64_t result = 7LL;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
  }

  return result;
}

uint64_t sub_181309424(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_BYTE *)(result + 19) = 0;
  for (uint64_t i = *(void *)(*(void *)(result + 8) + 16LL); i; uint64_t i = *(void *)(i + 40))
  {
    if ((*(_BYTE *)(i + 1) & 0x10) != 0)
    {
      *(_BYTE *)(result + 19) = 1;
      if (*(_DWORD *)(i + 80) == a2 && (a4 || *(void *)(i + 48) == a3)) {
        *(_BYTE *)uint64_t i = 1;
      }
    }
  }

  return result;
}

uint64_t sub_181309478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 + *(unsigned __int16 *)(a3 + 22);
  if (v3 > *(void *)(a1 + 88)) {
    return sub_1812FD54C(83701LL, a1);
  }
  uint64_t v5 = *(_DWORD **)(a1 + 72);
  unsigned int v6 = v5[14] - 4;
  unsigned int v7 = ~*(unsigned __int16 *)(a3 + 20) + *(_DWORD *)(a3 + 16) + v6;
  if (v6 > v7) {
    return 0LL;
  }
  uint64_t v9 = bswap32(*(_DWORD *)(v3 - 4));
  int v10 = v7 / v6;
  while (1)
  {
    unsigned int v22 = 0;
    uint64_t v21 = 0LL;
    if (!--v10) {
      goto LABEL_11;
    }
    uint64_t v11 = sub_1813096B0((uint64_t)v5, v9, &v21, &v22);
    if ((_DWORD)v11) {
      return v11;
    }
    uint64_t v12 = v21;
    if (!v21)
    {
LABEL_11:
      uint64_t v13 = *(void *)v5;
      uint64_t v14 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(*(void *)v5 + 336LL) + 72LL),  v9,  0LL);
      if (!v14) {
        goto LABEL_20;
      }
      uint64_t v15 = (uint64_t *)v14;
      int8x8_t v16 = *(void **)(v14 + 8);
      if (*v16)
      {
        ++*(void *)(*(void *)(v13 + 336) + 24LL);
        ++v16[7];
      }

      else
      {
        int8x8_t v16 = (void *)sub_1812FD158(*(void *)(v13 + 336), v9, v15);
        if (!v16)
        {
LABEL_20:
          uint64_t v12 = 0LL;
          uint64_t v21 = 0LL;
LABEL_21:
          uint64_t v18 = sub_1812C1B04((uint64_t)v5, v12, v9);
          goto LABEL_22;
        }
      }

      uint64_t v12 = v16[2];
      if (*(_DWORD *)(v12 + 4) != (_DWORD)v9)
      {
        uint64_t v17 = v16[1];
        *(void *)(v12 + 112) = v16;
        *(void *)(v12 + 72) = v5;
        *(void *)(v12 + 80) = v17;
        *(_DWORD *)(v12 + 4) = v9;
        *(_BYTE *)(v12 + 9) = 0;
      }

      uint64_t v21 = v12;
    }

    if (*(_DWORD *)(*(void *)(v12 + 112) + 56LL) == 1) {
      goto LABEL_21;
    }
    uint64_t v18 = sub_1812FBF50(83738);
LABEL_22:
    uint64_t v8 = v18;
    if (v21)
    {
      uint64_t v19 = *(void *)(v21 + 112);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 52) & 0x20) != 0)
        {
          uint64_t v20 = *(void *)(v19 + 40);
          --*(_DWORD *)(v20 + 152);
          *(void *)(v19 + 32) = *(void *)(v20 + 168);
          *(void *)(v20 + 168) = v19;
          (*(void (**)(void, void, void))(**(void **)(v20 + 72) + 144LL))( *(void *)(v20 + 72),  *(void *)(v20 + 200) * (*(_DWORD *)(v19 + 48) - 1),  *(void *)(v19 + 8));
        }

        else
        {
          sub_1812F9F44(v19);
        }
      }
    }

    if ((_DWORD)v8) {
      return v8;
    }
    uint64_t v9 = v22;
    if (!v10) {
      return 0LL;
    }
  }

uint64_t sub_1813096B0(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4)
{
  if (!*(_BYTE *)(a1 + 33)) {
    goto LABEL_12;
  }
  unsigned int v8 = a2;
  do
  {
    do
    {
      while (1)
      {
        unsigned int v9 = v8++;
        if (v8 >= 2) {
          break;
        }
        if (v8) {
          goto LABEL_10;
        }
      }

      unsigned int v10 = (v9 - 1) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
      else {
        int v11 = 2;
      }
    }

    while (v8 == v11 + v10);
LABEL_10:
    ;
  }

  while (v9 == dword_18C54FA50 / *(_DWORD *)(a1 + 52));
  unsigned int v12 = v9 + 1;
  if (v9 + 1 > *(_DWORD *)(a1 + 64)) {
    goto LABEL_12;
  }
  unsigned int v16 = sub_18130008C((_DWORD *)a1, v9 + 1, &v22, &v23);
  unsigned int v14 = v16;
  if (v16 || v22 != 4)
  {
    if (v16)
    {
LABEL_14:
      uint64_t v15 = 0LL;
      unsigned int v12 = 0;
      goto LABEL_28;
    }

uint64_t sub_1813098C0(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    if (*(_DWORD *)v4 < a2) {
      return 0LL;
    }
    return sub_1812B8E48((unsigned int *)v4, a2);
  }

  unsigned int v6 = *(_DWORD *)(a1 + 64);
  uint64_t v4 = sub_18126F0AC(512LL);
  if (v4)
  {
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)uint64_t v4 = v6;
    *(void *)(a1 + 96) = v4;
    if (v6 < a2) {
      return 0LL;
    }
    return sub_1812B8E48((unsigned int *)v4, a2);
  }

  *(void *)(a1 + 96) = 0LL;
  return 7LL;
}

uint64_t sub_181309984(uint64_t a1, _DWORD *a2)
{
  uint64_t result = sub_18129B700((unsigned __int8 *)a1);
  if ((_DWORD)result == 16)
  {
    uint64_t result = 0LL;
    *a2 = 1;
  }

  else if (!(_DWORD)result)
  {
    *a2 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 136);
      if (*(_BYTE *)(v5 + 8)) {
        break;
      }
      unsigned int v6 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v5 + 9) + *(void *)(v5 + 80) + 8LL));
      *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24);
      uint64_t result = sub_18129BA78(a1, v6);
      if ((_DWORD)result)
      {
        char v7 = *(_BYTE *)(a1 + 1) & 0xF7;
        goto LABEL_9;
      }
    }

    uint64_t result = 0LL;
    *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24) - 1;
    char v7 = *(_BYTE *)(a1 + 1) | 8;
LABEL_9:
    *(_BYTE *)(a1 + 1) = v7;
  }

  return result;
}

uint64_t sub_181309A24(unsigned int a1, char *a2, uint64_t a3)
{
  int64_t v3 = 0LL;
  uint64_t v4 = &a2[*a2 & 0x3F];
  switch(a2[1])
  {
    case 1:
      int64_t v3 = *v4;
      goto LABEL_11;
    case 2:
      int64_t v3 = v4[1] | (unint64_t)((uint64_t)*v4 << 8);
      goto LABEL_11;
    case 3:
      int64_t v3 = ((uint64_t)*v4 << 16) | ((unint64_t)v4[1] << 8) | v4[2];
      goto LABEL_11;
    case 4:
      int64_t v3 = (*v4 << 24) | ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
      goto LABEL_11;
    case 5:
      int64_t v3 = bswap32(*(_DWORD *)(v4 + 2)) | ((unint64_t)(v4[1] | (*v4 << 8)) << 32);
      goto LABEL_11;
    case 6:
      int64_t v3 = bswap64(*(void *)v4);
      goto LABEL_11;
    case 8:
      goto LABEL_11;
    case 9:
      int64_t v3 = 1LL;
LABEL_11:
      int64_t v6 = *(void *)(a3 + 16);
      if (v6 > v3) {
        return *(char *)(a3 + 32);
      }
      if (v6 < v3) {
        return *(char *)(a3 + 33);
      }
      if (*(unsigned __int16 *)(a3 + 28) < 2u)
      {
        uint64_t result = *(char *)(a3 + 30);
        *(_BYTE *)(a3 + 34) = 1;
      }

      else
      {
        int v5 = 1;
        return sub_1813068A8(a1, a2, (uint64_t *)a3, v5);
      }

      return result;
    default:
      int v5 = 0;
      return sub_1813068A8(a1, a2, (uint64_t *)a3, v5);
  }

uint64_t sub_181309B2C(signed int a1, char *a2, uint64_t a3)
{
  char v7 = a2 + 1;
  int v6 = a2[1];
  int v8 = (char)v6;
  int v9 = v6 << 14;
  int v10 = (v6 & 0x7F) << 7;
  while (v8 <= 11)
  {
    if ((v8 & 0x80000000) == 0) {
      return *(char *)(a3 + 32);
    }
    int v11 = a2[2];
    if (a2[2] < 0)
    {
      int v12 = a2[3];
      if (v12 < 0)
      {
        sub_18129BD74(v7, &v20);
        int v8 = v20;
        if (HIDWORD(v20)) {
          return *(char *)(a3 + 32);
        }
      }

      else
      {
        int v8 = v9 & 0x1FC07F | v12 & 0x7F | ((v11 & 0x7F) << 7);
      }
    }

    else
    {
      int v8 = v10 | v11;
    }

    if (v8 <= 11) {
      return *(char *)(a3 + 32);
    }
  }

  if ((v8 & 1) == 0) {
    return *(char *)(a3 + 33);
  }
  uint64_t v13 = *a2;
  signed int v14 = (v8 - 12) >> 1;
  if (v14 + (int)v13 > a1)
  {
    char v15 = sub_1812FBF50(96192);
    uint64_t result = 0LL;
    *(_BYTE *)(a3 + 31) = v15;
    return result;
  }

  signed int v17 = *(_DWORD *)(a3 + 24);
  signed int v18 = v17 >= v14 ? (v8 - 12) >> 1 : *(_DWORD *)(a3 + 24);
  int v19 = memcmp(&a2[v13], *(const void **)(a3 + 16), v18);
  if (v19 >= 1) {
    return *(char *)(a3 + 33);
  }
  if (v19 < 0) {
    return *(char *)(a3 + 32);
  }
  if (v14 != v17)
  {
    if (v17 < v14) {
      return *(char *)(a3 + 33);
    }
    return *(char *)(a3 + 32);
  }

  uint64_t result = *(char *)(a3 + 30);
  *(_BYTE *)(a3 + 34) = 1;
  return result;
}

uint64_t sub_181309CB0(unsigned __int8 *a1)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
    if (v2 < 3) {
      goto LABEL_22;
    }
    int v20 = 0;
    if (v2 == 4)
    {
      uint64_t result = *((unsigned int *)a1 + 1);
      if ((_DWORD)result) {
        return result;
      }
      goto LABEL_25;
    }

    *a1 = 1;
    uint64_t result = sub_1812AF8DC((uint64_t)a1, *((char **)a1 + 3), *((void *)a1 + 9), 0, &v20);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v4 = *((void *)a1 + 3);
    if (v4)
    {
      int v5 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_16:
        (*v5)(v4);
        goto LABEL_17;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      uint64_t v4 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v5 = &xmmword_18C465410;
        goto LABEL_16;
      }
    }

uint64_t sub_18130A018(unsigned __int8 *a1)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
LABEL_2:
    if (v2 >= 3)
    {
      uint64_t result = sub_181308C74((uint64_t)a1);
      if ((_DWORD)result) {
        return result;
      }
      unsigned int v2 = *a1;
    }

    if (v2 == 2)
    {
      *a1 = 0;
      if ((*((_DWORD *)a1 + 1) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      return 0LL;
    }

    else
    {
      if (v2 != 1) {
        goto LABEL_9;
      }
      return 101LL;
    }
  }

  else
  {
LABEL_9:
    while (1)
    {
      uint64_t v4 = *((void *)a1 + 17);
      uint64_t v5 = *((unsigned __int16 *)a1 + 43);
      if (!*(_BYTE *)(v4 + 8)) {
        break;
      }
      if (!*((_WORD *)a1 + 43))
      {
        while (1)
        {
          uint64_t v6 = (char)a1[84];
          if (!a1[84]) {
            break;
          }
          *((_WORD *)a1 + 35) = 0;
          a1[1] &= 0xF9u;
          *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v6 + 86];
          uint64_t v7 = *((void *)a1 + 17);
          signed __int8 v8 = v6 - 1;
          a1[84] = v8;
          *((void *)a1 + 17) = *(void *)&a1[8 * v8 + 144];
          uint64_t v9 = *(void *)(v7 + 112);
          if ((*(_BYTE *)(v9 + 52) & 0x20) != 0)
          {
            uint64_t v10 = *(void *)(v9 + 40);
            --*(_DWORD *)(v10 + 152);
            *(void *)(v9 + 32) = *(void *)(v10 + 168);
            *(void *)(v10 + 168) = v9;
            (*(void (**)(void, void, void))(**(void **)(v10 + 72) + 144LL))( *(void *)(v10 + 72),  *(void *)(v10 + 200) * (*(_DWORD *)(v9 + 48) - 1),  *(void *)(v9 + 8));
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5)
            {
LABEL_16:
              uint64_t v4 = *((void *)a1 + 17);
              goto LABEL_17;
            }
          }

          else
          {
            sub_1812F9F44(v9);
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5) {
              goto LABEL_16;
            }
          }
        }

        *a1 = 1;
        return 101LL;
      }

uint64_t sub_18130A1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(_BYTE **)(a1 + 56);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 68);
  if ((unint64_t)&v5[v6] > *(void *)(v4 + 88)
    || (unint64_t)v5 < *(void *)(v4 + 80) + (unint64_t)*(unsigned __int16 *)(v4 + 18))
  {
    return sub_1812FBF50(86052);
  }

  int v8 = *(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 36);
  if (v8 == (_DWORD)v6) {
    return sub_18130A35C(v4, v5, a2, 0, v8);
  }
  else {
    return sub_18130A500(a1, a2);
  }
}

uint64_t sub_18130A254(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(*(void *)(a1 + 72) + 56LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v5 = (unsigned __int16)(_byteswap_ushort(*(_WORD *)(v4 + v2 + 5)) - 1);
  unsigned int v6 = __rev16(*(unsigned __int16 *)(v4 + v2 + 1));
  int v7 = v5 + *(unsigned __int8 *)(v4 + v2 + 7) + 1;
  if (v6)
  {
    if (v6 <= v5)
    {
      uint64_t v11 = 78944LL;
      return sub_1812FD54C(v11, a1);
    }

    do
    {
      if ((int)v6 > v3 - 4)
      {
        int v13 = 5;
LABEL_10:
        uint64_t v11 = v13 | 0x13460u;
        return sub_1812FD54C(v11, a1);
      }

      int v8 = (unsigned __int16 *)(v2 + v6);
      unsigned int v9 = __rev16(*v8);
      LODWORD(v8) = __rev16(v8[1]);
      v7 += (int)v8;
      unsigned int v10 = (_DWORD)v8 + v6;
      unsigned int v6 = v9;
    }

    while (v9 > v10 + 3);
    if (v9)
    {
      uint64_t v11 = 78959LL;
      return sub_1812FD54C(v11, a1);
    }

    if (v10 > v3)
    {
      int v13 = 19;
      goto LABEL_10;
    }
  }

  int v14 = v4 + *(unsigned __int8 *)(a1 + 10) + 2 * *(unsigned __int16 *)(a1 + 24) + 8;
  if (v7 > v3 || v7 < v14)
  {
    uint64_t v11 = 78975LL;
    return sub_1812FD54C(v11, a1);
  }

  *(_DWORD *)(a1 + 20) = (unsigned __int16)(v7 - v14);
  return 0LL;
}

uint64_t sub_18130A35C(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v6 = a2;
  int v8 = *(_DWORD *)(a3 + 36);
  int v9 = v8 - a4;
  if (v8 <= a4)
  {
    if (a5 < 1) {
      return 0LL;
    }
    uint64_t v19 = a5;
    size_t v20 = a5;
    while (!*v6)
    {
      --v20;
      ++v6;
      if (!--v19) {
        return 0LL;
      }
    }

    uint64_t v21 = *(void *)(a1 + 112);
    char v22 = *(_DWORD **)(v21 + 40);
    if ((*(_WORD *)(v21 + 52) & 4) != 0 && v22[8] >= *(_DWORD *)(v21 + 48))
    {
      if (!v22[32])
      {
LABEL_32:
        bzero(v6, v20);
        return 0LL;
      }

      uint64_t result = sub_1812FAFE4(*(void *)(a1 + 112));
    }

    else
    {
      uint64_t result = v22[12];
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v23 = *(void *)(a1 + 112);
      if (v22[46] <= v22[50]) {
        uint64_t result = sub_1812ABE24(v23);
      }
      else {
        uint64_t result = sub_1812FED50(v23);
      }
    }

    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_32;
  }

  if (a5 > v9)
  {
    uint64_t result = sub_18130A35C(a1, &a2[v9], a3);
    if ((_DWORD)result) {
      return result;
    }
    a5 = v9;
  }

  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = a4;
  int v14 = (const void *)(v12 + a4);
  size_t v15 = a5;
  uint64_t result = memcmp(v6, v14, a5);
  if ((_DWORD)result)
  {
    uint64_t v16 = *(void *)(a1 + 112);
    signed __int8 v17 = *(_DWORD **)(v16 + 40);
    if ((*(_WORD *)(v16 + 52) & 4) != 0 && v17[8] >= *(_DWORD *)(v16 + 48))
    {
      if (!v17[32])
      {
LABEL_27:
        memmove(v6, (const void *)(v12 + v13), v15);
        return 0LL;
      }

      uint64_t result = sub_1812FAFE4(*(void *)(a1 + 112));
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
      uint64_t result = v17[12];
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v18 = *(void *)(a1 + 112);
      if (v17[46] <= v17[50])
      {
        uint64_t result = sub_1812ABE24(v18);
        if ((_DWORD)result) {
          return result;
        }
      }

      else
      {
        uint64_t result = sub_1812FED50(v18);
        if ((_DWORD)result) {
          return result;
        }
      }
    }

    uint64_t v12 = *(void *)(a3 + 16);
    goto LABEL_27;
  }

  return result;
}

uint64_t sub_18130A500(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 36);
  int v5 = *(_DWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = sub_18130A35C(v6, *(_BYTE **)(a1 + 56), a2, 0, *(unsigned __int16 *)(a1 + 68));
  if (!(_DWORD)v7)
  {
    uint64_t v9 = *(unsigned __int16 *)(a1 + 68);
    int v10 = v5 + v4;
    unsigned int v11 = bswap32(*(_DWORD *)(*(void *)(a1 + 56) + v9));
    uint64_t v12 = *(_DWORD **)(v6 + 72);
    int v13 = v12[14] - 4;
    while (1)
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v12 + 288LL))();
      if ((_DWORD)v14) {
        return v14;
      }
      uint64_t v15 = v23;
      uint64_t v16 = *(void *)(v23 + 16);
      if (*(_DWORD *)(v16 + 4) == v11)
      {
        uint64_t v15 = *(void *)(v16 + 112);
      }

      else
      {
        uint64_t v17 = *(void *)(v23 + 8);
        *(void *)(v16 + 112) = v23;
        *(void *)(v16 + 72) = v12;
        *(void *)(v16 + 80) = v17;
        *(_DWORD *)(v16 + 4) = v11;
        if (v11 == 1) {
          char v18 = 100;
        }
        else {
          char v18 = 0;
        }
        *(_BYTE *)(v16 + 9) = v18;
      }

      if (*(_DWORD *)(v15 + 56) == 1 && !*(_BYTE *)v16)
      {
        if (v13 + (int)v9 >= v10)
        {
          int v13 = v10 - v9;
          uint64_t v22 = *(void *)(v16 + 80);
        }

        else
        {
          uint64_t v22 = *(void *)(v16 + 80);
          unsigned int v11 = bswap32(*(_DWORD *)v22);
        }

        uint64_t v19 = sub_18130A35C(v16, (_BYTE *)(v22 + 4), a2, v9, v13);
      }

      else
      {
        uint64_t v19 = sub_1812FBF50(86024);
      }

      uint64_t v7 = v19;
      uint64_t v20 = *(void *)(v16 + 112);
      if (v20)
      {
        if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
        {
          uint64_t v21 = *(void *)(v20 + 40);
          --*(_DWORD *)(v21 + 152);
          *(void *)(v20 + 32) = *(void *)(v21 + 168);
          *(void *)(v21 + 168) = v20;
          (*(void (**)(void, void, void))(**(void **)(v21 + 72) + 144LL))( *(void *)(v21 + 72),  *(void *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1),  *(void *)(v20 + 8));
          if ((_DWORD)v7) {
            return v7;
          }
          goto LABEL_20;
        }

        sub_1812F9F44(v20);
      }

      if ((_DWORD)v7) {
        return v7;
      }
LABEL_20:
      LODWORD(v9) = v13 + v9;
    }
  }

  return v7;
}

uint64_t sub_18130A6D4(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  unsigned int v5 = a3 + a2;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 9);
  uint64_t v8 = v7 + 1;
  if (!*(_BYTE *)(v7 + v6 + 2) && !*(_BYTE *)(v6 + v8))
  {
    __int16 v29 = a3 + a2;
    LOBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    LOWORD(v10) = v7 + 1;
    unsigned __int16 v18 = a3;
    goto LABEL_29;
  }

  unsigned int v9 = v7 + 1;
  while (1)
  {
    unsigned int v10 = v9;
    unsigned int v11 = (unsigned __int8 *)(v6 + (unsigned __int16)v9);
    int v12 = *v11;
    int v13 = v11[1];
    unsigned int v9 = v13 | (v12 << 8);
    if (v9 >= a2) {
      break;
    }
    if (v9 <= (unsigned __int16)v10)
    {
      if (v9)
      {
        uint64_t v14 = 78761LL;
        return sub_1812FD54C(v14, a1);
      }

      break;
    }
  }

  unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 72) + 56LL);
  if (v15 - 4 >= v9)
  {
    if (v9) {
      BOOL v16 = v5 + 3 >= v9;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      unsigned __int8 v17 = v13 - v5;
      if (v9 < v5)
      {
        uint64_t v14 = 78778LL;
        return sub_1812FD54C(v14, a1);
      }

      unsigned int v5 = v9 + (bswap32(*(unsigned __int16 *)(v6 + v9 + 2)) >> 16);
      if (v5 > v15)
      {
        uint64_t v14 = 78781LL;
        return sub_1812FD54C(v14, a1);
      }

      unsigned __int16 v18 = v5 - a2;
      uint64_t v21 = (_BYTE *)(v6 + v9);
      LOBYTE(v12) = *v21;
      LOBYTE(v13) = v21[1];
    }

    else
    {
      unsigned __int8 v17 = 0;
      unsigned __int16 v18 = a3;
    }

    if (v8 < (unsigned __int16)v10)
    {
      unsigned int v19 = (unsigned __int16)v10 + (bswap32(*(unsigned __int16 *)(v6 + (unsigned __int16)v10 + 2)) >> 16);
      if (v19 + 3 >= a2)
      {
        BOOL v16 = a2 >= v19;
        char v20 = a2 - v19;
        if (!v16)
        {
          uint64_t v14 = 78794LL;
          return sub_1812FD54C(v14, a1);
        }

        v17 += v20;
        unsigned __int16 v18 = v5 - v10;
        unsigned int v3 = v10;
      }
    }

    unsigned int v22 = *(unsigned __int8 *)(v6 + v7 + 7);
    if (v22 < v17)
    {
      uint64_t v14 = 78800LL;
      return sub_1812FD54C(v14, a1);
    }

    __int16 v29 = v5;
    *(_BYTE *)(v6 + v7 + 7) = v22 - v17;
LABEL_29:
    uint64_t v23 = (_BYTE *)(v7 + v6 + 5);
    unsigned int v24 = __rev16(*(unsigned __int16 *)v23);
    if ((*(_WORD *)(*(void *)(a1 + 72) + 40LL) & 0xC) != 0)
    {
      int v25 = a3;
      unsigned int v30 = v24;
      bzero((void *)(v6 + (unsigned __int16)v3), v18);
      unsigned int v24 = v30;
      a3 = v25;
    }

    if (v24 >= (unsigned __int16)v3)
    {
      if (v24 > (unsigned __int16)v3)
      {
        uint64_t v14 = 78814LL;
        return sub_1812FD54C(v14, a1);
      }

      if ((_DWORD)v8 != (unsigned __int16)v10)
      {
        uint64_t v14 = 78815LL;
        return sub_1812FD54C(v14, a1);
      }

      uint64_t v27 = (_BYTE *)(v6 + v8);
      *uint64_t v27 = v12;
      v27[1] = v13;
      _BYTE *v23 = HIBYTE(v29);
      v23[1] = v29;
    }

    else
    {
      *(_WORD *)(v6 + (unsigned __int16)v10) = bswap32(v3) >> 16;
      uint64_t v26 = (_BYTE *)(v6 + (unsigned __int16)v3);
      *uint64_t v26 = v12;
      v26[1] = v13;
      void v26[2] = HIBYTE(v18);
      v26[3] = v18;
    }

    *(_DWORD *)(a1 + 20) += a3;
    return 0LL;
  }

  uint64_t v14 = 78766LL;
  return sub_1812FD54C(v14, a1);
}

_WORD *sub_18130A988(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v6 = v5 + 1;
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = __rev16(*(unsigned __int16 *)(v7 + v5 + 1));
  int v9 = *(_DWORD *)(*(void *)(a1 + 72) + 56LL);
  signed int v10 = v9 - a2;
  while (1)
  {
    unsigned int v11 = v8;
    if ((int)v8 > v10)
    {
      uint64_t v14 = 78614LL;
      goto LABEL_14;
    }

    uint64_t result = (_WORD *)(v7 + v8);
    signed int v13 = __rev16((unsigned __int16)result[1]) - a2;
    if (v13 >= 0) {
      break;
    }
    unsigned int v8 = __rev16(*(unsigned __int16 *)(v7 + v11));
    unsigned int v6 = v11;
    if (v8 <= v11)
    {
      if (v8)
      {
        uint64_t v14 = 78607LL;
        goto LABEL_14;
      }

      return 0LL;
    }
  }

  if (v13 > 3)
  {
    if ((int)(v13 + v11) <= v10)
    {
      result[1] = bswap32(v13) >> 16;
      return (_WORD *)(v7 + v13 + v11);
    }

    uint64_t v14 = 78592LL;
LABEL_14:
    int v15 = sub_1812FD54C(v14, a1);
    uint64_t result = 0LL;
    *a3 = v15;
    return result;
  }

  *(_WORD *)(v7 + v6) = *result;
  *(_BYTE *)(v7 + v5 + 7) += v13;
  return result;
}

uint64_t sub_18130AAA4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v12 = *(void *)(a4 + 72);
  uint64_t v6 = *(void *)(a4 + 80);
  uint64_t v7 = *(int *)(v12 + 56);
  unsigned int v8 = (char *)(v6 + v7);
  __int16 v27 = a3;
  int v9 = a3 + a2;
  uint64_t v28 = *(unsigned __int8 *)(a4 + 9);
  signed int v10 = *(char **)(a4 + 96);
  uint64_t v11 = *(void *)(*(void *)v12 + 328LL);
  LODWORD(v12) = __rev16(*(unsigned __int16 *)(v28 + v6 + 5));
  else {
    unint64_t v12 = 0LL;
  }
  uint64_t v31 = v11;
  __int16 v32 = (char *)(v6 + v12);
  memcpy((void *)(v11 + v12), (const void *)(v6 + v12), (v7 - v12));
  if (*(_DWORD *)(a1 + 80) <= a2)
  {
    if (*(_DWORD *)(a1 + 84) <= a2)
    {
      if (*(_DWORD *)(a1 + 88) <= a2)
      {
        if (*(_DWORD *)(a1 + 92) <= a2)
        {
          if (*(_DWORD *)(a1 + 96) <= a2)
          {
            if (*(_DWORD *)(a1 + 100) > a2) {
              uint64_t v13 = 5LL;
            }
            else {
              uint64_t v13 = 6LL;
            }
          }

          else
          {
            uint64_t v13 = 4LL;
          }
        }

        else
        {
          uint64_t v13 = 3LL;
        }
      }

      else
      {
        uint64_t v13 = 2LL;
      }
    }

    else
    {
      uint64_t v13 = 1LL;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = a2;
  int v15 = v8;
LABEL_18:
  unint64_t v16 = *(void *)(a1 + 8 * v13 + 32);
  uint64_t v30 = v13;
  unsigned __int8 v17 = (int *)(a1 + 4 * v13 + 80);
  while (1)
  {
    unsigned __int16 v18 = *(char **)(*(void *)(a1 + 16) + 8 * v14);
    size_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 2 * v14);
    char v20 = &v18[v19];
    if (v18 >= v32 && v18 < v8) {
      break;
    }
    if ((unint64_t)v18 < v16 && (unint64_t)v20 > v16)
    {
      int v26 = 84385;
      return sub_1812FBF50(v26);
    }

uint64_t sub_18130ACEC(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 120LL))();
  *(_WORD *)(*(void *)(a1 + 24) + 2LL * a2) = result;
  return result;
}

uint64_t sub_18130AD28(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 72) + 56LL);
  unint64_t v10 = v8 + v9;
  unint64_t v11 = *(unsigned __int8 *)(a1 + 9) + (unint64_t)*(unsigned __int8 *)(a1 + 10) + v8 + 8;
  uint64_t v12 = a2;
  uint64_t v13 = a3 + a2;
  int v36 = *(_DWORD *)(*(void *)(a1 + 72) + 56LL);
  __int16 v37 = v8;
  unint64_t v35 = v8 + v9;
  do
  {
    unint64_t v14 = *(void *)(*(void *)(a4 + 16) + 8 * v12);
    if (v14 >= v11 && v14 < v10)
    {
      int v16 = (unsigned __int16)(v14 - v8);
      unsigned int v17 = v16 + *(unsigned __int16 *)(*(void *)(a4 + 24) + 2 * v12);
      if (v7 >= 1)
      {
        uint64_t v18 = v7;
        size_t v19 = (unsigned int *)v39;
        char v20 = v40;
        uint64_t v21 = v7;
        do
        {
          if (*v20 == v17)
          {
            _DWORD *v20 = v16;
            goto LABEL_4;
          }

          if (*v19 == v16)
          {
            unsigned int *v19 = v17;
            goto LABEL_4;
          }

          ++v19;
          ++v20;
          --v21;
        }

        while (v21);
        if (v7 >= 10)
        {
          int v38 = v6;
          unsigned int v22 = (int *)v39;
          __int16 v23 = (int *)v40;
          do
          {
            int v25 = *v23++;
            unsigned __int16 v24 = v25;
            int v26 = *v22++;
            sub_18130A6D4(a1, v24, (unsigned __int16)(v26 - v24));
            --v18;
          }

          while (v18);
          int v7 = 0;
          LODWORD(v6) = v38;
          LODWORD(v9) = v36;
          LOWORD(v8) = v37;
          unint64_t v10 = v35;
        }
      }

      uint64_t v27 = 4LL * v7;
      *(_DWORD *)&v40[v27] = v16;
      *(_DWORD *)&v39[v27] = v17;
      ++v7;
LABEL_4:
      uint64_t v6 = (v6 + 1);
    }

    ++v12;
  }

  while (v12 < v13);
  if (v7 >= 1)
  {
    uint64_t v28 = v7;
    __int16 v29 = (int *)v39;
    uint64_t v30 = (int *)v40;
    do
    {
      int v32 = *v30++;
      unsigned __int16 v31 = v32;
      int v33 = *v29++;
      sub_18130A6D4(a1, v31, (unsigned __int16)(v33 - v31));
      --v28;
    }

    while (v28);
  }

  return v6;
}

uint64_t sub_18130AF20(uint64_t a1, uint64_t a2, void **a3, _WORD *a4, int a5, int a6, uint64_t a7)
{
  if (a6 < 1) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = (char *)*a3;
  if (*(_DWORD *)(a7 + 80) <= a5)
  {
    if (*(_DWORD *)(a7 + 84) <= a5)
    {
      if (*(_DWORD *)(a7 + 88) <= a5)
      {
        if (*(_DWORD *)(a7 + 92) <= a5)
        {
          if (*(_DWORD *)(a7 + 96) <= a5)
          {
            if (*(_DWORD *)(a7 + 100) > a5) {
              LODWORD(v11) = 5;
            }
            else {
              LODWORD(v11) = 6;
            }
          }

          else
          {
            LODWORD(v11) = 4;
          }
        }

        else
        {
          LODWORD(v11) = 3;
        }
      }

      else
      {
        LODWORD(v11) = 2;
      }
    }

    else
    {
      LODWORD(v11) = 1;
    }
  }

  else
  {
    LODWORD(v11) = 0;
  }

  unint64_t v13 = *(void *)(a7 + 8LL * v11 + 32);
  uint64_t v14 = a5;
  uint64_t v15 = a6 + a5;
  while (1)
  {
    if (((int64_t v16 = *(unsigned __int16 *)(*(void *)(a7 + 24) + 2 * v14), *(_BYTE *)(v9 + 1)) || *(_BYTE *)(v9 + 2))
      && (unsigned int v17 = sub_18130A988(a1, *(unsigned __int16 *)(*(void *)(a7 + 24) + 2 * v14), &v24)) != 0LL)
    {
      uint64_t v18 = v17;
    }

    else
    {
      v10 -= v16;
      uint64_t v18 = v10;
    }

    size_t v19 = *(const void **)(*(void *)(a7 + 16) + 8 * v14);
    if ((unint64_t)v19 < v13 && (unint64_t)v19 + v16 > v13)
    {
      sub_1812FBF50(84476);
      return 1LL;
    }

    memmove(v18, v19, v16);
    *a4 = bswap32((_DWORD)v18 - v9) >> 16;
    if (v14 + 1 >= v15) {
      break;
    }
    if (v14 + 1 >= *(int *)(a7 + 4LL * (int)v11 + 80))
    {
      uint64_t v11 = (int)v11 + 1LL;
      unint64_t v13 = *(void *)(a7 + 8 * v11 + 32);
    }

    ++a4;
    ++v14;
  }

  uint64_t result = 0LL;
  *a3 = v10;
  return result;
}

uint64_t sub_18130B0F0(void *a1, unsigned int **a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1[2];
  if (a1[3]) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  unint64_t v6 = (unint64_t)*(unsigned __int16 *)(v5 + 6) << 6;
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    uint64_t v8 = sub_18126F0AC(v6 + 104);
    if (v8) {
      goto LABEL_4;
    }
LABEL_43:
    a1[3] = 0LL;
    return 7LL;
  }

  uint64_t v8 = sub_1812F2264(v7, v6 + 104);
  if (!v8) {
    goto LABEL_43;
  }
LABEL_4:
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + 8) = v8 + 40;
  a1[3] = v8;
  uint64_t v4 = a1[2];
  *(_WORD *)(v8 + 28) = *(_WORD *)(*(void *)(v4 + 40) + 6LL);
  *(_BYTE *)(v8 + 31) = 0;
LABEL_5:
  uint64_t v9 = *a2;
  unint64_t v10 = sub_18130B970;
  int v11 = *(unsigned __int8 *)(v4 + 92);
  if (v11 == 2) {
    unint64_t v10 = sub_18130B798;
  }
  if (v11 == 1) {
    uint64_t v12 = sub_18130B628;
  }
  else {
    uint64_t v12 = v10;
  }
  a1[8] = v12;
  memset(v26, 0, sizeof(v26));
  if (v9)
  {
    do
    {
      uint64_t v14 = a2[1];
      if (v14)
      {
        if (v9 == v14) {
          uint64_t v15 = 0LL;
        }
        else {
          uint64_t v15 = (unsigned int *)((char *)v14 + (int)v9[2]);
        }
      }

      else
      {
        uint64_t v15 = (unsigned int *)*((void *)v9 + 1);
      }

      *((void *)v9 + 1) = 0LL;
      int64_t v16 = *(unsigned int **)&v26[0];
      if (*(void *)&v26[0])
      {
        uint64_t v17 = 0LL;
        do
        {
          int v25 = 0LL;
          int v24 = 0;
          uint64_t v18 = &v25;
          do
          {
            while (((int (*)(void *, int *, unsigned int *, void, unsigned int *, void))a1[8])( a1,  &v24,  v9 + 4,  *v9,  v16 + 4,  *v16) <= 0)
            {
              void *v18 = v9;
              uint64_t v18 = (unsigned int **)(v9 + 2);
              uint64_t v9 = (unsigned int *)*((void *)v9 + 1);
              if (!v9)
              {
                void *v18 = v16;
                goto LABEL_27;
              }
            }

            void *v18 = v16;
            uint64_t v18 = (unsigned int **)(v16 + 2);
            int64_t v16 = (unsigned int *)*((void *)v16 + 1);
            int v24 = 0;
          }

          while (v16);
          void *v18 = v9;
LABEL_27:
          uint64_t v9 = v25;
          *((void *)v26 + v17++) = 0LL;
          unint64_t v13 = (unsigned int **)v26 + v17;
          int64_t v16 = *v13;
        }

        while (*v13);
      }

      else
      {
        unint64_t v13 = (unsigned int **)v26;
      }

      *unint64_t v13 = v9;
      uint64_t v9 = v15;
    }

    while (v15);
  }

  uint64_t v19 = 0LL;
  char v20 = 0LL;
  do
  {
    uint64_t v21 = (unsigned int *)*((void *)v26 + v19);
    if (v21)
    {
      if (v20)
      {
        int v25 = 0LL;
        int v24 = 0;
        unsigned int v22 = &v25;
        do
        {
          while (((int (*)(void *, int *, unsigned int *, void, unsigned int *, void))a1[8])( a1,  &v24,  v20 + 4,  *v20,  v21 + 4,  *v21) <= 0)
          {
            *unsigned int v22 = v20;
            unsigned int v22 = (unsigned int **)(v20 + 2);
            char v20 = (unsigned int *)*((void *)v20 + 1);
            if (!v20)
            {
              *unsigned int v22 = v21;
              goto LABEL_40;
            }
          }

          *unsigned int v22 = v21;
          unsigned int v22 = (unsigned int **)(v21 + 2);
          uint64_t v21 = (unsigned int *)*((void *)v21 + 1);
          int v24 = 0;
        }

        while (v21);
        *unsigned int v22 = v20;
LABEL_40:
        char v20 = v25;
      }

      else
      {
        char v20 = (unsigned int *)*((void *)v26 + v19);
      }
    }

    ++v19;
  }

  while (v19 != 64);
  *a2 = v20;
  return *(unsigned __int8 *)(a1[3] + 31LL);
}

void sub_18130B3C8(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 91);
  signed int v3 = v2 - 1;
  *(_BYTE *)(a1 + 88) = 1;
  if (v2 < 2)
  {
    int v4 = 0;
    uint64_t v6 = 0LL;
    goto LABEL_8;
  }

  int v4 = 0;
  while (1)
  {
    uint64_t v5 = a1 + 104LL * ((*(unsigned __int8 *)(a1 + 90) + 1 + v4) % v3);
    uint64_t v8 = *(void *)(v5 + 96);
    uint64_t v6 = v5 + 96;
    uint64_t v7 = v8;
    if (*(_DWORD *)(v6 + 8)) {
      break;
    }
    if (!v7) {
      goto LABEL_8;
    }
    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }

  if (v7)
  {
    if (*(void *)v7) {
      LODWORD(v14) = (*(uint64_t (**)(void))v7)(*(void *)(v7 + 8));
    }
    else {
      uint64_t v14 = *(void *)(v7 + 16);
    }
    int64_t v16 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_30:
        *(_DWORD *)(v6 + 8) = 0;
        *(void *)uint64_t v6 = 0LL;
        if ((_DWORD)v14) {
          return;
        }
        goto LABEL_8;
      }

      int64_t v16 = &xmmword_18C465410;
    }

    (*v16)(v7);
    goto LABEL_30;
  }

uint64_t sub_18130B628(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v9 = a3[1];
  unsigned int v10 = a5[1];
  int v11 = (unsigned __int8 *)&a3[*a3];
  uint64_t v12 = &a5[*a5];
  unsigned int v13 = v9 - v10;
  if ((_DWORD)v9 == v10)
  {
    if (byte_1813C6DF5[v9] <= 1u) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = byte_1813C6DF5[v9];
    }
    uint64_t v15 = (unsigned __int8 *)&a3[*a3];
    int64_t v16 = (unsigned __int8 *)&a5[*a5];
    while (1)
    {
      int v18 = *v15++;
      int v17 = v18;
      int v19 = *v16++;
      unsigned int v13 = v17 - v19;
      if (v13) {
        break;
      }
      if (!--v14) {
        goto LABEL_30;
      }
    }

    int v22 = (char)*v11;
    if (((*v12 ^ v22) & 0x80) != 0)
    {
      unsigned int v13 = (v22 >> 31) | 1;
      goto LABEL_27;
    }
  }

  else if (v9 < 8 || v10 <= 7)
  {
    if (v10 > 7) {
      int v21 = 1;
    }
    else {
      int v21 = v13;
    }
    if (v21 < 1)
    {
      if (*v12 < 0)
      {
        unsigned int v13 = 1;
LABEL_27:
        if (**(_BYTE **)(*(void *)(*(void *)(a1 + 16) + 40LL) + 24LL)) {
          return -v13;
        }
        else {
          return v13;
        }
      }
    }

    else if ((*v11 & 0x80u) != 0)
    {
      unsigned int v13 = -1;
    }

    else
    {
      unsigned int v13 = v21;
    }
  }

  if (v13) {
    goto LABEL_27;
  }
LABEL_30:
  int v24 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1812AF9EC(*(void *)(*(void *)(a1 + 16) + 40LL), a6, a5, (uint64_t)v24);
    *a2 = 1;
  }

  return sub_1813068A8(a4, a3, v24, 1);
}

uint64_t sub_18130B798(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v12 = (unsigned __int8 *)&a3[*a3];
  unsigned int v13 = (unsigned __int8 *)&a5[*a5];
  int v14 = a3[1];
  if (a3[1] < 0)
  {
    int v15 = a3[2];
    if (a3[2] < 0)
    {
      int v16 = a3[3];
      if (v16 < 0)
      {
        sub_18129BD74(a3 + 1, &v29);
        if (HIDWORD(v29)) {
          int v14 = -1;
        }
        else {
          int v14 = v29;
        }
      }

      else
      {
        int v14 = v16 & 0x7F | (v14 << 14) & 0x1FC07F | ((v15 & 0x7F) << 7);
      }
    }

    else
    {
      int v14 = ((v14 & 0x7F) << 7) | v15;
    }
  }

  int v17 = a5[1];
  if (a5[1] < 0)
  {
    int v18 = a5[2];
    if (a5[2] < 0)
    {
      int v19 = a5[3];
      if (v19 < 0)
      {
        sub_18129BD74(a5 + 1, &v29);
        if (HIDWORD(v29)) {
          int v17 = -1;
        }
        else {
          int v17 = v29;
        }
      }

      else
      {
        int v17 = v19 & 0x7F | (v17 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
      }
    }

    else
    {
      int v17 = ((v17 & 0x7F) << 7) | v18;
    }
  }

  int v20 = v14 - v17;
  if (v14 < v17) {
    int v17 = v14;
  }
  int v22 = v17 - 13;
  BOOL v21 = v17 < 13;
  int v23 = v17 - 12;
  if (!v21) {
    int v23 = v22;
  }
  int v24 = memcmp(v12, v13, (uint64_t)v23 >> 1);
  if (v24) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = v20;
  }
  uint64_t v26 = *(void *)(*(void *)(a1 + 16) + 40LL);
  if (v25)
  {
    if (**(_BYTE **)(v26 + 24)) {
      return -v25;
    }
    else {
      return v25;
    }
  }

  else if (*(unsigned __int16 *)(v26 + 6) < 2u)
  {
    return 0LL;
  }

  else
  {
    uint64_t v28 = *(uint64_t **)(a1 + 24);
    if (!*a2)
    {
      sub_1812AF9EC(v26, a6, a5, (uint64_t)v28);
      *a2 = 1;
    }

    return sub_1813068A8(a4, a3, v28, 1);
  }

uint64_t sub_18130B970(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v8 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1812AF9EC(*(void *)(*(void *)(a1 + 16) + 40LL), a6, a5, (uint64_t)v8);
    *a2 = 1;
  }

  return sub_1813068A8(a4, a3, v8, 0);
}

double sub_18130B9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 32LL);
  uint64_t v5 = (uint64_t **)(a1 + 72);
  uint64_t v6 = *(uint64_t **)(a1 + 72);
  if (!v6)
  {
    LODWORD(v31) = sub_181302BC0(*(void *)v4, 0LL, v5, 4126, (uint64_t)&v31);
    if ((_DWORD)v31) {
      return result;
    }
    *(void *)&__int128 v27 = 20971520LL;
    uint64_t v12 = **v5;
    if (v12)
    {
      (*(void (**)(void))(v12 + 80))();
      if ((_DWORD)v31) {
        return result;
      }
    }

    uint64_t v6 = *v5;
  }

  uint64_t v26 = (void *)(a1 + 80);
  *(void *)&__int128 v27 = *(void *)(a1 + 80) + *(int *)(a2 + 16) + 9LL;
  if ((uint64_t)v27 <= *(int *)(v4 + 184))
  {
    uint64_t v7 = *v6;
    if (*(int *)*v6 >= 3)
    {
      uint64_t v31 = 0LL;
      int v30 = 4096;
      (*(void (**)(uint64_t *, uint64_t, int *))(v7 + 80))(v6, 6LL, &v30);
      (*(void (**)(uint64_t *, uint64_t, __int128 *))(*v6 + 80))(v6, 5LL, &v27);
      (*(void (**)(uint64_t *, void, void, uint64_t *))(*v6 + 136))(v6, 0LL, v27, &v31);
      if (v31) {
        (*(void (**)(uint64_t *, void))(*v6 + 144))(v6, 0LL);
      }
    }
  }

  if (!sub_18130B0F0((void *)a1, (unsigned int **)a2))
  {
    int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 12LL);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    *((void *)&v27 + 1) = sub_18126F0AC(v9);
    if (*((void *)&v27 + 1))
    {
      DWORD1(v28) = v11 % v9;
      DWORD2(v28) = DWORD1(v28);
      LODWORD(v28) = v9;
      *(void *)&__int128 v29 = v11 / v9 * v9;
      *((void *)&v29 + 1) = v10;
    }

    else
    {
      LODWORD(v27) = 7;
    }

    ++*(_DWORD *)(a1 + 56);
    sub_18130BE9C((uint64_t)&v27, *(int *)(a2 + 16));
    unsigned int v13 = *(unsigned int **)a2;
    if (!*(void *)a2)
    {
LABEL_17:
      *(void *)a2 = 0LL;
      return sub_18130BFE8((uint64_t)&v27, v26);
    }

    while (1)
    {
      int v14 = (int *)v13;
      unsigned int v13 = (unsigned int *)*((void *)v13 + 1);
      sub_18130BE9C((uint64_t)&v27, *v14);
      int v15 = *v14;
      if (*v14 >= 1)
      {
        int v16 = v27;
        int v17 = *v14;
        while (!v16)
        {
          uint64_t v21 = (int)v28;
          int v22 = DWORD2(v28);
          else {
            int v23 = v17;
          }
          uint64_t v24 = *((void *)&v27 + 1);
          memcpy((void *)(*((void *)&v27 + 1) + SDWORD2(v28)), (char *)v14 + v15 - v17 + 16, v23);
          DWORD2(v28) = v22 + v23;
          if (v22 + v23 == (_DWORD)v21)
          {
            uint64_t v18 = v24 + SDWORD1(v28);
            uint64_t v19 = v29;
            int v16 = (*(uint64_t (**)(void, uint64_t, void, void))(**((void **)&v29 + 1) + 24LL))( *((void *)&v29 + 1),  v18,  (v21 - DWORD1(v28)),  v29 + SDWORD1(v28));
            *(void *)((char *)&v28 + 4) = 0LL;
            LODWORD(v27) = v16;
            *(void *)&__int128 v29 = v19 + v21;
            BOOL v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0)) {
              break;
            }
          }

          else
          {
            int v16 = 0;
            BOOL v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0)) {
              break;
            }
          }
        }
      }

      if (*(void *)(a2 + 8)) {
        goto LABEL_20;
      }
      unsigned int v25 = (void (**)(int *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v14);
        --qword_18C468B10;
        off_18C4653A8(v14);
        int v14 = (int *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_20;
        }
        unsigned int v25 = (void (**)(int *))&xmmword_18C465410;
      }

      (*v25)(v14);
LABEL_20:
      if (!v13) {
        goto LABEL_17;
      }
    }
  }

  return result;
}

uint64_t sub_18130BD34(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 1;
  return (int)result;
}

uint64_t sub_18130BD64(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result = sub_181302BC0(*(void *)a1, 0LL, a3, 4126, (uint64_t)&v10);
  unsigned int v10 = result;
  if (!(_DWORD)result)
  {
    uint64_t v7 = **a3;
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 80))(*a3);
    }
    if (a2 >= 1)
    {
      uint64_t v8 = *a3;
      uint64_t v13 = a2;
      if (*(int *)(a1 + 184) >= a2)
      {
        uint64_t v9 = *v8;
        if (*(int *)*v8 >= 3)
        {
          uint64_t v12 = 0LL;
          int v11 = 4096;
          (*(void (**)(uint64_t *, uint64_t, int *))(v9 + 80))(v8, 6LL, &v11);
          (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v8 + 80))(v8, 5LL, &v13);
          (*(void (**)(uint64_t *, void, void, uint64_t *))(*v8 + 136))(v8, 0LL, v13, &v12);
          if (v12) {
            (*(void (**)(uint64_t *, void))(*v8 + 144))(v8, 0LL);
          }
        }
      }
    }

    return v10;
  }

  return result;
}

uint64_t sub_18130BE9C(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  *(void *)&v9[5] = *MEMORY[0x1895F89C0];
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      uint64_t result = sub_181308E00((int8x8_t *)v9, a2);
      int v3 = result;
    }

    else
    {
      LOBYTE(v9[0]) = (a2 >> 7) | 0x80;
      HIBYTE(v9[0]) = a2 & 0x7F;
      int v3 = 2;
    }
  }

  else
  {
    LOBYTE(v9[0]) = a2;
    int v3 = 1;
  }

  int v4 = v3;
  do
  {
    if (*(_DWORD *)v2) {
      break;
    }
    uint64_t v6 = *(int *)(v2 + 24);
    int v7 = v4 >= *(_DWORD *)(v2 + 16) - (int)v6 ? *(_DWORD *)(v2 + 16) - v6 : v4;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v2 + 8) + v6), (char *)v9 + v3 - v4, v7);
    int v8 = *(_DWORD *)(v2 + 24) + v7;
    *(_DWORD *)(v2 + 24) = v8;
    if (v8 == *(_DWORD *)(v2 + 16))
    {
      uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(v2 + 40) + 24LL))( *(void *)(v2 + 40),  *(void *)(v2 + 8) + *(int *)(v2 + 20),  (v8 - *(_DWORD *)(v2 + 20)),  *(void *)(v2 + 32) + *(int *)(v2 + 20));
      *(_DWORD *)uint64_t v2 = result;
      *(_DWORD *)(v2 + 20) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      *(void *)(v2 + 32) += *(int *)(v2 + 16);
    }

    BOOL v5 = __OFSUB__(v4, v7);
    v4 -= v7;
  }

  while (!((v4 < 0) ^ v5 | (v4 == 0)));
  return result;
}

double sub_18130BFE8(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 24);
      uint64_t v9 = *(int *)(a1 + 20);
      if (v8 > (int)v9) {
        *(_DWORD *)a1 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 40) + 24LL))( *(void *)(a1 + 40),  v7 + v9,  (v8 - v9),  *(void *)(a1 + 32) + v9);
      }
    }
  }

  *a2 = *(void *)(a1 + 32) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    BOOL v5 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_8:
      (*v5)(v4);
      goto LABEL_9;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v4);
    --qword_18C468B10;
    off_18C4653A8(v4);
    uint64_t v4 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v5 = &xmmword_18C465410;
      goto LABEL_8;
    }
  }

uint64_t sub_18130C0FC(uint64_t a1, int *a2, uint64_t *a3)
{
  if (off_18C465520 && off_18C465520(100LL) || (uint64_t v6 = sub_18126F0AC(72LL)) == 0)
  {
    *a3 = 0LL;
    if (a2)
    {
      if (*a2 >= 1)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = 0LL;
        do
        {
          sub_181302560(*((void *)a2 + 3) + v10);
          ++v11;
          v10 += 80LL;
        }

        while (v11 < *a2);
      }

      uint64_t v12 = (void (**)(int *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(a2);
        --qword_18C468B10;
        off_18C4653A8(a2);
        a2 = (int *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return 7LL;
        }
        uint64_t v12 = (void (**)(int *))&xmmword_18C465410;
      }

      (*v12)(a2);
    }

    return 7LL;
  }

  uint64_t v7 = v6;
  uint64_t result = 0LL;
  *(void *)(v7 + 64) = 0LL;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *a3 = v7;
  int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 4LL) / 2;
  if (*(_DWORD *)(*(void *)(a1 + 16) + 8LL) + 9 > v9) {
    int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 8LL) + 9;
  }
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 24) = v9;
  *(void *)(a1 + 96) += v9;
  return result;
}

uint64_t sub_18130C260(uint64_t a1, int a2)
{
  int v3 = *(uint64_t ***)(a1 + 72);
  uint64_t v4 = *v3;
  BOOL v5 = (unsigned int *)v3[1];
  int v33 = v3;
  uint64_t v32 = *(void *)((*v3)[2] + 32);
  *((void *)v5 + 1) = *v3;
  uint64_t v6 = *v5;
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0LL;
    int v8 = v6 - 1;
    uint64_t v9 = 80 * v6;
    do
    {
      uint64_t v11 = *((void *)v5 + 3);
      if (a2 == 2)
      {
        uint64_t result = sub_18130C9D8(v11 + 80LL * v8);
        if ((_DWORD)result) {
          return result;
        }
      }

      else
      {
        uint64_t v12 = v11 + v7;
        uint64_t v13 = *(void *)(v11 + v7 + 72);
        if (v13)
        {
          if (*(_DWORD *)(v13 + 32))
          {
            int v14 = *(void **)v13;
            **(void **)uint64_t v13 = 0LL;
            int v15 = (void *)sub_18126F0AC(24LL);
            if (!v15) {
              return 7LL;
            }
            int v16 = v15;
            if ((((int)v15 / 17) & 1) != 0)
            {
              void *v15 = sub_18130D174;
              v15[1] = v12;
            }

            else
            {
              void *v15 = 0LL;
              int v17 = sub_18130C260(v12, 1LL);
              *(_DWORD *)(**(void **)(v12 + 72) + 8LL) = 1;
              v16[2] = v17;
            }

            void *v14 = v16;
          }

          else
          {
            uint64_t result = sub_18130C260(v12, 0LL);
            if ((_DWORD)result) {
              return result;
            }
          }
        }
      }

      --v8;
      v7 += 80LL;
    }

    while (v9 != v7);
    uint64_t v18 = *v5;
    if ((int)v18 >= 2)
    {
      unsigned int v19 = 2 * v18 - 2;
      do
      {
        int v22 = (int)*v5 / 2;
        if (v18 <= v22)
        {
          uint64_t v24 = *((void *)v5 + 2);
          unsigned int v23 = *(_DWORD *)(v24 + 4LL * v19);
          unsigned int v21 = *(_DWORD *)(v24 + 4LL * (v19 + 1));
        }

        else
        {
          unsigned int v23 = v19 - 2 * v22;
          unsigned int v21 = v23 + 1;
        }

        uint64_t v25 = *((void *)v5 + 3);
        if (*(void *)(v25 + 80LL * (int)v23 + 24))
        {
          if (*(void *)(v25 + 80LL * (int)v21 + 24))
          {
            uint64_t v20 = *((void *)v5 + 1);
            int v34 = 0;
          }

          else
          {
            unsigned int v21 = v23;
          }
        }

        *(_DWORD *)(*((void *)v5 + 2) + 4LL * --v18) = v21;
        v19 -= 2;
      }

      while ((unint64_t)(v18 + 1) > 2);
    }
  }

  uint64_t v26 = v4[3];
  uint64_t result = *(unsigned __int8 *)(v26 + 31);
  if (!*(_BYTE *)(v26 + 31))
  {
    __int128 v27 = v33;
    uint64_t v28 = *((int *)v33 + 6);
    if (*((_DWORD *)v33 + 8))
    {
      uint64_t result = sub_18130BD64(v32, *((int *)v33 + 6), v33 + 5);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t result = sub_18130BD64(v32, v28, v33 + 7);
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
      int v30 = (uint64_t *)v4[11];
      uint64_t v29 = v4[12];
      if (!v30)
      {
        uint64_t result = sub_18130BD64(v32, v29, (uint64_t **)v4 + 11);
        v4[12] = 0LL;
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v29 = 0LL;
        int v30 = (uint64_t *)v4[11];
        __int128 v27 = v33;
      }

      v27[7] = v30;
      v27[2] = (uint64_t *)v29;
      v4[12] = v29 + v28;
    }

    if (*((_DWORD *)v33 + 8))
    {
      uint64_t result = sub_18130CDD4(v33);
      if (a2 == 1) {
        return result;
      }
    }

    else
    {
      uint64_t result = 0LL;
      if (a2 == 1) {
        return result;
      }
    }

    if (!(_DWORD)result) {
      return sub_18130C9D8(a1);
    }
  }

  return result;
}

uint64_t sub_18130C53C(uint64_t a1, int a2, uint64_t *a3, int **a4)
{
  uint64_t v8 = *a3;
  int v9 = 2;
  do
  {
    int v10 = v9;
    v9 *= 2;
  }

  while (v10 < a2);
  if (off_18C465520 && off_18C465520(100LL)
    || (size_t v11 = 84 * v10 + 32, (v12 = (int *)sub_18126F0AC(v11)) == 0LL))
  {
    uint64_t v20 = 7LL;
    goto LABEL_26;
  }

  uint64_t v13 = v12;
  bzero(v12, v11);
  *uint64_t v13 = v10;
  *((void *)v13 + 3) = v13 + 8;
  *((void *)v13 + 1) = 0LL;
  *((void *)v13 + 2) = &v13[20 * v10 + 8];
  *a4 = v13;
  uint64_t v26 = a4;
  if (a2 >= 1)
  {
    uint64_t v14 = 0LL;
    unint64_t v15 = 1LL;
    unint64_t v16 = a2;
    while (1)
    {
      int v17 = (uint64_t *)(*((void *)v13 + 3) + v14);
      uint64_t v18 = sub_18130C77C(a1, v17, (uint64_t *)(a1 + 72), v8);
      if ((_DWORD)v18) {
        break;
      }
      unint64_t v27 = 0LL;
      uint64_t v18 = sub_18130C8E4((uint64_t)v17, &v27);
      v17[1] = v27 + *v17;
      if ((_DWORD)v18) {
        break;
      }
      uint64_t v19 = sub_18130C9D8((uint64_t)v17);
      uint64_t v20 = v19;
      uint64_t v8 = v17[1];
      BOOL v21 = (_DWORD)v19 == 0;
      if (v15 < v16)
      {
        v14 += 80LL;
        ++v15;
        if (!(_DWORD)v19) {
          continue;
        }
      }

      goto LABEL_16;
    }

    uint64_t v20 = v18;
    uint64_t v8 = v17[1];
    a4 = v26;
LABEL_17:
    if (*v13 >= 1)
    {
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      do
      {
        sub_181302560(*((void *)v13 + 3) + v22);
        ++v23;
        v22 += 80LL;
      }

      while (v23 < *v13);
    }

    uint64_t v24 = (void (**)(int *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v13);
      --qword_18C468B10;
      off_18C4653A8(v13);
      uint64_t v13 = (int *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_26;
      }
      uint64_t v24 = (void (**)(int *))&xmmword_18C465410;
    }

    (*v24)(v13);
LABEL_26:
    *a4 = 0LL;
    goto LABEL_27;
  }

  uint64_t v20 = 0LL;
  BOOL v21 = 1;
LABEL_16:
  a4 = v26;
  if (!v21) {
    goto LABEL_17;
  }
LABEL_27:
  *a3 = v8;
  return v20;
}

uint64_t sub_18130C77C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2[8])
  {
    (*(void (**)(uint64_t, void))(*(void *)a2[3] + 144LL))(a2[3], 0LL);
    a2[8] = 0LL;
  }

  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  *a2 = a4;
  a2[1] = v10;
  a2[3] = v9;
  if (v10 <= *(int *)(*(void *)(*(void *)(a1 + 16) + 32LL) + 184LL) && **(int **)v9 >= 3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 136LL))(v9, 0LL);
    if ((_DWORD)v8) {
      return v8;
    }
    if (a2[8]) {
      return 0LL;
    }
  }

  int v11 = *(_DWORD *)(*(void *)(a1 + 16) + 12LL);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[6];
  if (v13)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v13 = sub_18126F0AC(v11);
    a2[6] = v13;
    if (v13) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = 7LL;
    }
    *((_DWORD *)a2 + 14) = v11;
    if ((_DWORD)v8) {
      return v8;
    }
  }

  uint64_t v14 = v12 % v11;
  if (!(_DWORD)v14) {
    return v8;
  }
  uint64_t v15 = a2[1];
  else {
    uint64_t v16 = v15 - *a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16LL))(a2[3], v13 + v14, v16);
}

uint64_t sub_18130C8E4(uint64_t a1, unint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)a1;
  if (v4) {
    goto LABEL_11;
  }
  uint64_t v6 = *(int *)(a1 + 56);
  v5 %= v6;
  int v7 = v6 - v5;
  if ((_DWORD)v5) {
    BOOL v8 = v7 < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v4 = *(void *)(a1 + 48);
LABEL_11:
    unsigned int v12 = sub_18129BD74((char *)(v4 + v5), a2);
    uint64_t result = 0LL;
    *(void *)a1 += v12;
    return result;
  }

  int v9 = 0;
  while (1)
  {
    uint64_t result = sub_18130CC34((uint64_t *)a1, 1, &v13);
    if ((_DWORD)result) {
      break;
    }
    int v11 = *v13;
    v14[v9++ & 0xF] = *v13;
    if ((v11 & 0x80000000) == 0)
    {
      sub_18129BD74(v14, a2);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18130C9D8(uint64_t a1)
{
  v15[0] = 0LL;
  if (*(void *)a1 >= *(void *)(a1 + 8))
  {
    uint64_t v5 = *(uint64_t ***)(a1 + 72);
    if (!v5)
    {
LABEL_24:
      uint64_t v2 = 0LL;
      goto LABEL_25;
    }

    if (!*((_DWORD *)v5 + 8))
    {
      uint64_t v8 = sub_18130CDD4(*(void **)(a1 + 72));
      uint64_t v2 = v8;
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
      if (v5[6] == v5[2]) {
        *((_DWORD *)v5 + 7) = 1;
      }
      if ((_DWORD)v8) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }

    uint64_t v6 = *v5;
    uint64_t v7 = **v5;
    if (!v7)
    {
LABEL_21:
      __int128 v10 = *(_OWORD *)(v5 + 5);
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
      *(_OWORD *)(v5 + 7) = v10;
      if (v5[6] != v5[2])
      {
        int v11 = *v5;
        **uint64_t v5 = 0LL;
        unsigned int v12 = (void *)sub_18126F0AC(24LL);
        if (!v12)
        {
          uint64_t v2 = 7LL;
          goto LABEL_25;
        }

        uint64_t v13 = v12;
        if ((((int)v12 / 17) & 1) != 0)
        {
          *unsigned int v12 = sub_18130CFD8;
          v12[1] = v5;
        }

        else
        {
          *unsigned int v12 = 0LL;
          int v14 = sub_18130CDD4(v5);
          *((_DWORD *)*v5 + 2) = 1;
          void v13[2] = v14;
        }

        *int v11 = (uint64_t)v13;
        if (*((_DWORD *)v5 + 7)) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }

      *((_DWORD *)v5 + 7) = 1;
LABEL_23:
      if (*((_DWORD *)v5 + 7)) {
        goto LABEL_24;
      }
LABEL_33:
      uint64_t v2 = sub_18130C77C((uint64_t)*v5, (uint64_t *)a1, (uint64_t *)v5 + 5, (uint64_t)v5[2]);
      if ((_DWORD)v2) {
        return v2;
      }
      goto LABEL_2;
    }

    if (*(void *)v7) {
      uint64_t v2 = (*(uint64_t (**)(void))v7)(*(void *)(v7 + 8));
    }
    else {
      uint64_t v2 = *(void *)(v7 + 16);
    }
    int v9 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_20:
        *((_DWORD *)v6 + 2) = 0;
        *uint64_t v6 = 0LL;
        if ((_DWORD)v2)
        {
LABEL_25:
          sub_181302560(a1);
          return v2;
        }

        goto LABEL_21;
      }

      int v9 = &xmmword_18C465410;
    }

    (*v9)(v7);
    goto LABEL_20;
  }

uint64_t sub_18130CC34(uint64_t *a1, int a2, void *a3)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = *a1;
  if (v6)
  {
    uint64_t result = 0LL;
    *a3 = v6 + v7;
    uint64_t v9 = v7 + a2;
LABEL_3:
    *a1 = v9;
    return result;
  }

  unsigned int v10 = *((_DWORD *)a1 + 14);
  uint64_t v11 = v7 % (int)v10;
  if (!(_DWORD)v11)
  {
    uint64_t v20 = a1[1] - v7;
    else {
      uint64_t v21 = v10;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16LL))(a1[3], a1[6], v21);
    if ((_DWORD)result) {
      return result;
    }
    unsigned int v10 = *((_DWORD *)a1 + 14);
  }

  int v12 = v10 - v11;
  int v13 = a2 - (v10 - v11);
  if (a2 <= (int)(v10 - v11))
  {
    uint64_t result = 0LL;
    *a3 = a1[6] + v11;
    uint64_t v9 = *a1 + a2;
    goto LABEL_3;
  }

  uint64_t v14 = *((int *)a1 + 4);
  if ((int)v14 >= a2)
  {
    uint64_t v19 = (void *)a1[4];
  }

  else
  {
    uint64_t v15 = 2 * v14;
    BOOL v16 = (int)v14 < 64;
    uint64_t v17 = 128LL;
    if (!v16) {
      uint64_t v17 = v15;
    }
    do
    {
      uint64_t v18 = v17;
      v17 *= 2LL;
    }

    while (v18 < a2);
    uint64_t v19 = (void *)sub_18127D33C(a1[4], v18);
    if (!v19) {
      return 7LL;
    }
    *((_DWORD *)a1 + 4) = v18;
    a1[4] = (uint64_t)v19;
  }

  memcpy(v19, (const void *)(a1[6] + v11), v12);
  *a1 += v12;
  if (v13 < 1)
  {
LABEL_27:
    uint64_t result = 0LL;
    *a3 = a1[4];
  }

  else
  {
    while (1)
    {
      int v22 = *((_DWORD *)a1 + 14);
      uint64_t v23 = v13 >= v22 ? v22 : v13;
      uint64_t result = sub_18130CC34(a1, v23, &__src);
      if ((_DWORD)result) {
        break;
      }
      memcpy((void *)(a1[4] + a2 - v13), __src, (int)v23);
      BOOL v24 = __OFSUB__(v13, (_DWORD)v23);
      v13 -= v23;
      if ((v13 < 0) ^ v24 | (v13 == 0)) {
        goto LABEL_27;
      }
    }
  }

  return result;
}

uint64_t sub_18130CDD4(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1[2];
  uint64_t v29 = a1[1];
  uint64_t v3 = a1[7];
  int v4 = *(_DWORD *)(*(void *)(*a1 + 16LL) + 12LL);
  uint64_t v31 = 0LL;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = sub_18126F0AC(v4);
  if (v32)
  {
    DWORD1(v33) = v2 % v4;
    DWORD2(v33) = DWORD1(v33);
    LODWORD(v33) = v4;
    *(void *)&__int128 v34 = v2 / v4 * v4;
    *((void *)&v34 + 1) = v3;
  }

  else
  {
    LODWORD(v31) = 7;
  }

  uint64_t v27 = v2;
  uint64_t v28 = v1;
  do
  {
    uint64_t v6 = *(void *)(v29 + 24);
    int v7 = *(_DWORD *)(*(void *)(v29 + 16) + 4LL);
    uint64_t v8 = v6 + 80LL * v7;
    if (!*(void *)(v8 + 24)) {
      goto LABEL_23;
    }
    int v9 = *(_DWORD *)(v8 + 20);
    int v10 = 1;
    if (v9 >= 0x80)
    {
      unint64_t v11 = v9;
      do
      {
        unint64_t v12 = v11 >> 14;
        v11 >>= 7;
        ++v10;
      }

      while (v12);
    }

    if ((uint64_t)v34 + v9 + SDWORD2(v33) + v10 > v2 + *((int *)v1 + 6))
    {
LABEL_23:
      sub_18130BFE8((uint64_t)&v31, v1 + 8);
      return v24;
    }

    sub_18130BE9C((uint64_t)&v31, v9);
    if (v9 >= 1)
    {
      uint64_t v13 = *(void *)(v6 + 80LL * v7 + 40);
      int v14 = v31;
      unsigned int v15 = DWORD1(v33);
      unsigned int v16 = DWORD2(v33);
      uint64_t v17 = (int)v33;
      uint64_t v18 = v32;
      uint64_t v19 = *((void *)&v34 + 1);
      uint64_t v20 = v34;
      int v21 = v9;
      while (!v14)
      {
        else {
          int v23 = v21;
        }
        memcpy((void *)(v18 + (int)v16), (const void *)(v13 + v9 - v21), v23);
        v16 += v23;
        if (v16 == (_DWORD)v17)
        {
          int v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v19 + 24LL))( v19,  v18 + (int)v15,  v17 - v15,  v20 + (int)v15);
          unsigned int v15 = 0;
          unsigned int v16 = 0;
          v20 += v17;
          BOOL v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0)) {
            break;
          }
        }

        else
        {
          int v14 = 0;
          BOOL v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0)) {
            break;
          }
        }
      }

      *(void *)((char *)&v33 + 4) = __PAIR64__(v16, v15);
      LODWORD(v31) = v14;
      *(void *)&__int128 v34 = v20;
      uint64_t v2 = v27;
      uint64_t v1 = v28;
    }

    uint64_t v5 = sub_18130D008(v1[1], &v30);
  }

  while (!(_DWORD)v5);
  uint64_t v25 = v5;
  sub_18130BFE8((uint64_t)&v31, v1 + 8);
  return v25;
}

uint64_t sub_18130CFD8(void *a1)
{
  uint64_t result = (int)sub_18130CDD4(a1);
  *(_DWORD *)(*a1 + 8LL) = 1;
  return result;
}

uint64_t sub_18130D008(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(*(void *)(a1 + 16) + 4LL);
  uint64_t result = sub_18130C9D8(*(void *)(a1 + 24) + 80LL * v5);
  if (!(_DWORD)result)
  {
    int v7 = v5;
    int v16 = 0;
    unsigned int v8 = *(_DWORD *)a1 + v5;
    uint64_t v9 = *(void *)(a1 + 24);
    if ((int)v8 > 1)
    {
      unint64_t v10 = v9 + 80LL * (v7 | 1);
      unint64_t v11 = v9 + 80LL * ((unsigned __int16)v7 & 0xFFFE);
      while (1)
      {
        unsigned int v14 = v8 >> 1;
        if (!*(void *)(v11 + 24)) {
          goto LABEL_14;
        }
        if (*(void *)(v10 + 24))
        {
          int v15 = (*(uint64_t (**)(uint64_t, int *, void, void, void, void))(v4 + 64))( v4,  &v16,  *(void *)(v11 + 40),  *(unsigned int *)(v11 + 20),  *(void *)(v10 + 40),  *(unsigned int *)(v10 + 20));
          if ((v15 & 0x80000000) == 0 && (v15 || v11 >= v10)) {
            break;
          }
        }

        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 24);
        *(_DWORD *)(v12 + 4LL * v14) = -858993459 * ((v11 - v9) >> 4);
        unint64_t v10 = v9 + 80LL * *(int *)(v12 + 4LL * (v14 ^ 1));
        int v16 = 0;
LABEL_5:
        BOOL v13 = v8 > 3;
        v8 >>= 1;
        if (!v13) {
          goto LABEL_16;
        }
      }

      if (*(void *)(v11 + 24)) {
        int v16 = 0;
      }
LABEL_14:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      *(_DWORD *)(v12 + 4LL * v14) = -858993459 * ((v10 - v9) >> 4);
      unint64_t v11 = v9 + 80LL * *(int *)(v12 + 4LL * (v14 ^ 1));
      goto LABEL_5;
    }

    uint64_t v12 = *(void *)(a1 + 16);
LABEL_16:
    *a2 = *(void *)(v9 + 80LL * *(int *)(v12 + 4) + 24) == 0LL;
    return *(unsigned __int8 *)(*(void *)(v4 + 24) + 31LL);
  }

  return result;
}

uint64_t sub_18130D174(uint64_t a1)
{
  uint64_t result = (int)sub_18130C260(a1, 1LL);
  *(_DWORD *)(**(void **)(a1 + 72) + 8LL) = 1;
  return result;
}

uint64_t sub_18130D1AC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  *(void *)(result + 8) = 0LL;
  if (v3)
  {
    uint64_t v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (*v4)(v3);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v3);
    uint64_t v3 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v4 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_18130D2FC(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + 100) = a2;
  uint64_t v2 = *(void *)(result + 656);
  if (!v2)
  {
    uint64_t v4 = (uint64_t *)(result + 648);
    int v5 = *(_DWORD *)(result + 644);
    if (!v5) {
      goto LABEL_12;
    }
LABEL_3:
    uint64_t v4 = (uint64_t *)*v4;
    uint64_t v6 = (_BYTE *)v4[3];
    for (unsigned int i = "BINARY"; ; ++i)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(unsigned __int8 *)i;
      if ((_DWORD)v8 == (_DWORD)v9)
      {
        if (!*v6) {
          goto LABEL_13;
        }
      }

      else if (byte_1813C6343[v8] != byte_1813C6343[v9])
      {
        if (!--v5)
        {
          uint64_t v4 = &qword_18C550660;
          goto LABEL_13;
        }

        goto LABEL_3;
      }

      ++v6;
    }
  }

  uint64_t v3 = (_DWORD *)(v2 + 16LL * (0x2EB35835u % *(_DWORD *)(result + 640)));
  uint64_t v4 = (uint64_t *)(v3 + 2);
  int v5 = *v3;
  if (v5) {
    goto LABEL_3;
  }
LABEL_12:
  uint64_t v4 = &qword_18C550660;
LABEL_13:
  uint64_t v10 = v4[2];
  if (v10) {
    uint64_t v11 = v10 + 40LL * a2 - 40;
  }
  else {
    uint64_t v11 = 0LL;
  }
  *(void *)(result + 16) = v11;
  for (uint64_t j = *(void *)(result + 8); j; uint64_t j = *(void *)(j + 16))
    *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 2;
  return result;
}

void *sub_18130D3EC(uint64_t a1, unsigned int a2, char *__s, int a4)
{
  if (!__s) {
    return *(void **)(a1 + 16);
  }
  uint64_t v7 = *(void *)(a1 + 656);
  if (v7)
  {
    int v8 = *__s;
    if (*__s)
    {
      unsigned int v9 = 0;
      uint64_t v10 = __s + 1;
      do
      {
        unsigned int v9 = -1640531535 * (v9 + byte_1813C6343[v8]);
        int v11 = *v10++;
        int v8 = v11;
      }

      while (v11);
    }

    else
    {
      unsigned int v9 = 0;
    }

    uint64_t v19 = (_DWORD *)(v7 + 16LL * (v9 % *(_DWORD *)(a1 + 640)));
    BOOL v13 = (uint64_t *)(v19 + 2);
    int v14 = *v19;
    if (v14)
    {
      while (1)
      {
LABEL_19:
        BOOL v13 = (uint64_t *)*v13;
        uint64_t v20 = (_BYTE *)v13[3];
        for (unsigned int i = __s; ; ++i)
        {
          uint64_t v22 = *v20;
          uint64_t v23 = *i;
          if ((_DWORD)v22 != (_DWORD)v23) {
            break;
          }
          if (!*v20) {
            goto LABEL_10;
          }
LABEL_21:
          ++v20;
        }

        if (byte_1813C6343[v22] == byte_1813C6343[v23]) {
          goto LABEL_21;
        }
        if (!--v14)
        {
          BOOL v13 = &qword_18C550660;
          goto LABEL_10;
        }
      }
    }
  }

  else
  {
    BOOL v13 = (uint64_t *)(a1 + 648);
    int v14 = *(_DWORD *)(a1 + 644);
    if (v14) {
      goto LABEL_19;
    }
  }

  BOOL v13 = &qword_18C550660;
LABEL_10:
  int v15 = (void *)v13[2];
  if (!a4 || v15)
  {
    if (!v15) {
      return 0LL;
    }
  }

  else
  {
    int v16 = strlen(__s);
    uint64_t v17 = v16 & 0x3FFFFFFF;
    unint64_t v18 = v17 + 121;
    if (a1)
    {
      int v15 = (void *)sub_1812F2264(a1, v18);
      if (!v15) {
        return 0LL;
      }
    }

    else
    {
      int v15 = (void *)sub_18126F0AC((v16 & 0x3FFFFFFF) + 121LL);
      if (!v15) {
        return 0LL;
      }
    }

    bzero(v15, v18);
    void *v15 = v15 + 15;
    *((_BYTE *)v15 + 8) = 1;
    v15[5] = v15 + 15;
    *((_BYTE *)v15 + 48) = 2;
    v15[10] = v15 + 15;
    *((_BYTE *)v15 + 88) = 3;
    memcpy(v15 + 15, __s, v17 + 1);
    uint64_t v24 = sub_181268E88(a1 + 640, (unsigned __int8 *)v15 + 120, (uint64_t)v15);
    if (v24)
    {
      uint64_t v31 = (void *)v24;
      if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 103) = 1;
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        uint64_t v32 = *(void *)(a1 + 344);
        if (v32)
        {
          sub_1812DC47C(v32, "out of memory", v25, v26, v27, v28, v29, v30, v34);
          for (uint64_t j = *(void *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
          {
            *(_DWORD *)(j + 24) = 7;
            uint64_t j = *(void *)(j + 256);
            if (!j) {
              break;
            }
          }
        }
      }

      sub_1812F20DC((void *)a1, v31);
      return 0LL;
    }
  }

  return &v15[5 * a2 - 5];
}

uint64_t sub_18130D648(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 4);
    if (v8) {
      goto LABEL_10;
    }
    return qword_18C550670;
  }

  int v3 = *a2;
  if (*a2)
  {
    unsigned int v4 = 0;
    int v5 = a2 + 1;
    do
    {
      unsigned int v4 = -1640531535 * (v4 + byte_1813C6343[v3]);
      int v6 = *v5++;
      int v3 = v6;
    }

    while (v6);
  }

  else
  {
    unsigned int v4 = 0;
  }

  uint64_t v10 = (_DWORD *)(v2 + 16LL * (v4 % *(_DWORD *)a1));
  uint64_t v7 = (uint64_t *)(v10 + 2);
  int v8 = *v10;
  if (!v8) {
    return qword_18C550670;
  }
  do
  {
LABEL_10:
    uint64_t v7 = (uint64_t *)*v7;
    int v11 = (_BYTE *)v7[3];
    for (unsigned int i = a2; ; ++i)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = *i;
      if ((_DWORD)v13 != (_DWORD)v14) {
        break;
      }
      if (!*v11) {
        return v7[2];
      }
LABEL_12:
      ++v11;
    }

    if (byte_1813C6343[v13] == byte_1813C6343[v14]) {
      goto LABEL_12;
    }
    --v8;
  }

  while (v8);
  uint64_t v7 = &qword_18C550660;
  return v7[2];
}

uint64_t sub_18130D724( uint64_t result, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)result;
  if (*(_BYTE *)(*(void *)result + 103LL))
  {
    uint64_t result = 7LL;
LABEL_3:
    *(_DWORD *)(v8 + 20) = result;
    return result;
  }

  if (!**(void **)(result + 8))
  {
    if ((*(_DWORD *)(result + 24) & 3) != 0)
    {
      **(void **)(result + 8) = sub_18127F588(v9, "error in %s %s after %s: %s", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
      uint64_t result = 1LL;
    }

    else
    {
      if ((*(_BYTE *)(v9 + 48) & 1) != 0)
      {
        int v19 = 147860;
      }

      else
      {
        int v11 = (const char *)a2[1];
        if (!v11) {
          int v11 = "?";
        }
        uint64_t v12 = sub_18127F588(v9, "malformed database schema (%s)", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v11);
        if (a3)
        {
          if (*a3) {
            uint64_t v12 = sub_18127F588(v9, "%z - %s", v13, v14, v15, v16, v17, v18, (char)v12);
          }
        }

        **(void **)(v8 + 8) = v12;
        int v19 = 147867;
      }

      uint64_t result = sub_1812FBF50(v19);
    }

    goto LABEL_3;
  }

  return result;
}

uint64_t sub_18130D838(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 < 1) {
    return 0LL;
  }
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  while (1)
  {
    uint64_t v8 = v4 ^ (v4 < 2);
    uint64_t v9 = *(void *)(v5 + 32 * v8 + 24);
    if (!a3) {
      break;
    }
    uint64_t v10 = *(_BYTE **)(v5 + 32 * v8);
    for (unsigned int i = a3; ; ++i)
    {
      uint64_t v12 = *v10;
      uint64_t v13 = *i;
      if ((_DWORD)v12 != (_DWORD)v13) {
        break;
      }
      if (!*v10) {
        goto LABEL_12;
      }
LABEL_9:
      ++v10;
    }

    if (byte_1813C6343[v12] == byte_1813C6343[v13]) {
      goto LABEL_9;
    }
    if (!(_DWORD)v8)
    {
      int v19 = a3;
      for (uint64_t j = "main"; ; ++j)
      {
        uint64_t v21 = *(unsigned __int8 *)j;
        uint64_t v22 = *v19;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*j) {
            goto LABEL_12;
          }
        }

        else if (byte_1813C6343[v21] != byte_1813C6343[v22])
        {
          break;
        }

        ++v19;
      }
    }

void *sub_18130D9D8(void *result)
{
  uint64_t v1 = result[76];
  if (v1)
  {
    result[76] = 0LL;
    for (uint64_t i = result[1]; i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    do
    {
      uint64_t v3 = *(void *)(v1 + 40);
      unsigned int v4 = *(void **)v1;
      int v5 = *(_DWORD *)(v1 + 24) - 1;
      *(_DWORD *)(v1 + 24) = v5;
      if (!v5)
      {
        uint64_t v6 = *(void *)(v1 + 16);
        uint64_t v7 = v4;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
          uint64_t v7 = *(void **)v1;
        }

        uint64_t v8 = *(void *)(v1 + 8);
        int v9 = *(_DWORD *)(v8 + 16) - 1;
        *(_DWORD *)(v8 + 16) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (**)(void))(v8 + 32);
          if (v10) {
            v10(*(void *)(v8 + 24));
          }
          sub_1812F20DC(v7, (void *)v8);
        }

        uint64_t result = sub_1812F20DC(v4, (void *)v1);
      }

      uint64_t v1 = v3;
    }

    while (v3);
  }

  return result;
}

void *sub_18130DAAC(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 94);
  if (v2 >= 5) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 94);
  }
  int v5 = *(_WORD **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v6 = *(__int16 *)(v4 + 58);
  if (v6 <= 98)
  {
    LOWORD(v6) = 99;
    *(_WORD *)(v4 + 58) = 99;
  }

  if (*(void *)(a1 + 72)) {
    LOWORD(v6) = v6 - 10;
  }
  *int v5 = v6;
  uint64_t result = memcpy(v5 + 1, &unk_1813C6E00, 2LL * (v3 & 0x7FFF));
  LODWORD(v8) = *(unsigned __int16 *)(a1 + 94);
  if (v3 < v8)
  {
    if (v2 >= 5) {
      unint64_t v9 = 5LL;
    }
    else {
      unint64_t v9 = v2;
    }
    do
    {
      v5[v9 + 1] = 23;
      unint64_t v8 = *(unsigned __int16 *)(a1 + 94);
      ++v9;
    }

    while (v9 < v8);
  }

  if (*(_BYTE *)(a1 + 98)) {
    v5[v8] = 0;
  }
  return result;
}

unsigned __int8 *sub_18130DB64(unsigned __int8 *result, int a2, uint64_t a3, uint64_t a4)
{
  int v5 = result;
  unsigned int v6 = *result;
  if (*result) {
    BOOL v7 = a2 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unint64_t v16 = 0LL;
    do
    {
      if (v6 - 48 <= 9)
      {
        unint64_t v19 = 0LL;
        do
        {
          unint64_t v19 = 10 * v19 + v6 - 48;
          unsigned int v20 = *++v5;
          unsigned int v6 = v20;
        }

        while (v20 - 48 < 0xA);
        if (v19 >= 8)
        {
          __int16 v21 = 40;
          if (v19 >= 0x100)
          {
            unint64_t v23 = v19;
            do
            {
              v21 += 40;
              unint64_t v19 = v23 >> 4;
              BOOL v7 = v23 > 0xFFF;
              v23 >>= 4;
            }

            while (v7);
          }

          LOBYTE(v22) = v19;
          if (v19 >= 0x10)
          {
            do
            {
              v21 += 10;
              unint64_t v22 = v19 >> 1;
              BOOL v7 = v19 > 0x1F;
              v19 >>= 1;
            }

            while (v7);
          }

          goto LABEL_54;
        }

        if (v19 >= 2)
        {
          __int16 v21 = 40;
          do
          {
            v21 -= 10;
            LOBYTE(v22) = 2 * v19;
            BOOL v18 = v19 >= 4;
            v19 *= 2LL;
          }

          while (!v18);
LABEL_54:
          __int16 v17 = v21 + word_1813CD842[v22 & 7] - 10;
          goto LABEL_34;
        }
      }

      __int16 v17 = 0;
LABEL_34:
      *(_WORD *)(a3 + 2 * v16) = v17;
      if (*v5 == 32) {
        ++v5;
      }
      ++v16;
      unsigned int v6 = *v5;
      if (*v5) {
        BOOL v18 = v16 >= a2;
      }
      else {
        BOOL v18 = 1;
      }
    }

    while (!v18);
  }

  *(_WORD *)(a4 + 99) &= 0xFFBBu;
  if (*v5)
  {
    while (1)
    {
      uint64_t result = (unsigned __int8 *)sub_1812BF304("unordered*", (const char *)v5, byte_1813C6550, 91LL);
      if (!(_DWORD)result) {
        break;
      }
      if (!sub_1812BF304("sz=[0-9]*", (const char *)v5, byte_1813C6550, 91LL))
      {
        int v24 = 0;
        uint64_t result = (unsigned __int8 *)sub_18130DE18(v5 + 3, &v24);
        if (v24 <= 2) {
          unint64_t v9 = 2LL;
        }
        else {
          unint64_t v9 = v24;
        }
        __int16 v10 = 40;
        if (v9 > 7)
        {
          if (v9 >= 0x100)
          {
            unint64_t v12 = v9;
            do
            {
              v10 += 40;
              unint64_t v9 = v12 >> 4;
              BOOL v7 = v12 > 0xFFF;
              v12 >>= 4;
            }

            while (v7);
          }

          LOBYTE(v11) = v9;
          if (v9 >= 0x10)
          {
            do
            {
              v10 += 10;
              unint64_t v11 = v9 >> 1;
              BOOL v7 = v9 > 0x1F;
              v9 >>= 1;
            }

            while (v7);
          }
        }

        else
        {
          do
          {
            v10 -= 10;
            LOBYTE(v11) = 2 * v9;
            BOOL v18 = v9 >= 4;
            v9 *= 2LL;
          }

          while (!v18);
        }

        *(_WORD *)(a4 + 92) = v10 + word_1813CD842[v11 & 7] - 10;
        goto LABEL_26;
      }

      uint64_t result = (unsigned __int8 *)sub_1812BF304("noskipscan*", (const char *)v5, byte_1813C6550, 91LL);
      if (!(_DWORD)result)
      {
        __int16 v8 = *(_WORD *)(a4 + 99) | 0x40;
LABEL_12:
        *(_WORD *)(a4 + 99) = v8;
      }

uint64_t sub_18130DE18(unsigned __int8 *a1, _DWORD *a2)
{
  int v2 = *a1;
  switch(v2)
  {
    case '-':
      ++a1;
      uint64_t v3 = -1LL;
      break;
    case '0':
      if ((a1[1] | 0x20) == 0x78 && (byte_1813C6558[a1[2]] & 8) != 0)
      {
        do
        {
          uint64_t v16 = a1[2];
          ++a1;
        }

        while (v16 == 48);
        if ((byte_1813C6558[v16] & 8) != 0)
        {
          unsigned int v17 = ((((char)(2 * v16) >> 7) & 0xF9) + (_BYTE)v16) & 0xF;
          uint64_t v21 = a1[2];
          if ((byte_1813C6558[v21] & 8) != 0)
          {
            unsigned int v17 = ((((char)(2 * v21) >> 7) & 0xF9) + (_BYTE)v21) & 0xF | (16 * v17);
            uint64_t v22 = a1[3];
            if ((byte_1813C6558[v22] & 8) != 0)
            {
              unsigned int v17 = ((((char)(2 * v22) >> 7) & 0xF9) + (_BYTE)v22) & 0xF | (16 * v17);
              uint64_t v23 = a1[4];
              if ((byte_1813C6558[v23] & 8) != 0)
              {
                unsigned int v17 = ((((char)(2 * v23) >> 7) & 0xF9) + (_BYTE)v23) & 0xF | (16 * v17);
                uint64_t v24 = a1[5];
                if ((byte_1813C6558[v24] & 8) != 0)
                {
                  unsigned int v17 = ((((char)(2 * v24) >> 7) & 0xF9) + (_BYTE)v24) & 0xF | (16 * v17);
                  uint64_t v25 = a1[6];
                  if ((byte_1813C6558[v25] & 8) != 0)
                  {
                    unsigned int v17 = ((((char)(2 * v25) >> 7) & 0xF9) + (_BYTE)v25) & 0xF | (16 * v17);
                    uint64_t v26 = a1[7];
                    if ((byte_1813C6558[v26] & 8) != 0)
                    {
                      unsigned int v17 = ((((char)(2 * v26) >> 7) & 0xF9) + (_BYTE)v26) & 0xF | (16 * v17);
                      uint64_t v27 = a1[8];
                      if ((byte_1813C6558[v27] & 8) != 0)
                      {
                        unsigned int v28 = ((((char)(2 * v27) >> 7) & 0xF9) + (_BYTE)v27) & 0xF | (16 * v17);
                        if (((16 * v17) & 0x80000000) != 0) {
                          return 0LL;
                        }
                        uint64_t v18 = 8LL;
                        unsigned int v17 = v28;
                      }

                      else
                      {
                        uint64_t v18 = 7LL;
                      }
                    }

                    else
                    {
                      uint64_t v18 = 6LL;
                    }
                  }

                  else
                  {
                    uint64_t v18 = 5LL;
                  }
                }

                else
                {
                  uint64_t v18 = 4LL;
                }
              }

              else
              {
                uint64_t v18 = 3LL;
              }
            }

            else
            {
              uint64_t v18 = 2LL;
            }
          }

          else
          {
            uint64_t v18 = 1LL;
          }
        }

        else
        {
          unsigned int v17 = 0;
          uint64_t v18 = 0LL;
        }

        if ((byte_1813C6558[a1[v18 + 1]] & 8) != 0) {
          return 0LL;
        }
        *a2 = v17;
        return 1LL;
      }

      uint64_t v3 = 0LL;
      break;
    case '+':
      uint64_t v3 = 0LL;
      ++a1;
      break;
    default:
      uint64_t v3 = 0LL;
      unsigned int v4 = *a1;
      goto LABEL_10;
  }

  unsigned int v4 = *a1;
LABEL_10:
  if (v4 == 48)
  {
    do
    {
      unsigned int v5 = *++a1;
      unsigned int v4 = v5;
    }

    while (v5 == 48);
  }

  if (v4 - 48 >= 0xA)
  {
    uint64_t v6 = 0LL;
    goto LABEL_29;
  }

  uint64_t v6 = v4 - 48;
  int v7 = a1[1];
  uint64_t v6 = (v7 - 48) + 10LL * v6;
  int v8 = a1[2];
  uint64_t v6 = (v8 - 48) + 10 * v6;
  int v9 = a1[3];
  uint64_t v6 = (v9 - 48) + 10 * v6;
  int v10 = a1[4];
  uint64_t v6 = (v10 - 48) + 10 * v6;
  int v11 = a1[5];
  uint64_t v6 = (v11 - 48) + 10 * v6;
  int v12 = a1[6];
  uint64_t v6 = (v12 - 48) + 10 * v6;
  int v13 = a1[7];
  uint64_t v6 = (v13 - 48) + 10 * v6;
  int v14 = a1[8];
  uint64_t v6 = (v14 - 48) + 10 * v6;
  int v15 = a1[9];
  uint64_t v6 = (v15 - 48) + 10 * v6;
LABEL_29:
  if (v6 + v3 > 0x7FFFFFFF) {
    return 0LL;
  }
  if (v2 == 45) {
    int v20 = -(int)v6;
  }
  else {
    int v20 = v6;
  }
  *a2 = v20;
  return 1LL;
}

void *sub_18130E1B0(void *a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 **)(a2 + 72);
  if (v4) {
    sub_181309110(a1, v4);
  }
  unsigned int v5 = *(void **)(a2 + 80);
  if (v5) {
    sub_181311F48(a1, v5);
  }
  uint64_t v6 = *(void **)(a2 + 32);
  if (v6) {
    sub_1812F20DC(a1, v6);
  }
  if ((*(_WORD *)(a2 + 99) & 0x10) != 0)
  {
    int v7 = *(void **)(a2 + 64);
    if (v7) {
      sub_1812F20DC(a1, v7);
    }
  }

  return sub_1812F20DC(a1, (void *)a2);
}

void sub_18130E220(_DWORD **a1, int a2, uint64_t a3, int a4)
{
  int v4 = a2;
  int v35 = *((_DWORD *)a1 + 8);
  int v6 = a4;
  if ((_DWORD)a3)
  {
    uint64_t v7 = a3;
    int v8 = "invalid page number %u";
    int v6 = a4;
    while (*((_DWORD *)a1 + 7))
    {
      int v9 = a1[2];
      unint64_t v10 = (unint64_t)v7 >> 3;
      int v11 = *((unsigned __int8 *)v9 + v10);
      int v12 = 1 << (v7 & 7);
      if ((v12 & v11) != 0)
      {
        sub_18130E688((uint64_t)a1, "2nd reference to page %u");
        break;
      }

      *((_BYTE *)v9 + v10) = v11 | v12;
      int v13 = v6 - 1;
      if ((*((unsigned int (**)(void))a1[1] + 36))())
      {
        int v8 = "failed to get page %u";
        --v6;
LABEL_68:
        sub_18130E688((uint64_t)a1, v8, v7);
        break;
      }

      int v14 = *(unsigned int **)(v38 + 8);
      if (v4)
      {
        unsigned int v15 = v14[1];
        uint64_t v16 = *a1;
        if (*((_BYTE *)*a1 + 33))
        {
          int v17 = sub_18130008C(v16, v7, &v40, &v39);
          if (v17)
          {
            if (v17 == 3082 || v17 == 7)
            {
              *((_DWORD *)a1 + 9) = 7;
              *((_DWORD *)a1 + 7) = 0;
              if (!*((_DWORD *)a1 + 8)) {
                *((_DWORD *)a1 + 8) = 1;
              }
            }

            sub_18130E688((uint64_t)a1, "Failed to read ptrmap key=%u");
          }

          else if (v40 != 2 || v39)
          {
            sub_18130E688((uint64_t)a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
          }

          uint64_t v16 = *a1;
        }

        uint64_t v18 = bswap32(v15);
        if (v18 <= (v16[14] >> 2) - 2)
        {
          if ((int)v18 >= 1)
          {
            uint64_t v21 = (unsigned __int8 *)v14 + 11;
            uint64_t v22 = v18;
            do
            {
              int v23 = *(v21 - 1);
              unsigned int v24 = *v21;
              unint64_t v25 = (*(v21 - 3) << 24) | (*(v21 - 2) << 16) | (v23 << 8) | v24;
              if (*((_BYTE *)*a1 + 33))
              {
                int v26 = sub_18130008C(*a1, (*(v21 - 3) << 24) | (*(v21 - 2) << 16) | (v23 << 8) | v24, &v40, &v39);
                if (v26)
                {
                  if (v26 == 3082 || v26 == 7)
                  {
                    *((_DWORD *)a1 + 9) = 7;
                    *((_DWORD *)a1 + 7) = 0;
                    if (!*((_DWORD *)a1 + 8)) {
                      *((_DWORD *)a1 + 8) = 1;
                    }
                  }

                  sub_18130E688((uint64_t)a1, "Failed to read ptrmap key=%u");
                }

                else if (v40 != 2 || v39 != 0)
                {
                  sub_18130E688((uint64_t)a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
                }
              }

              if ((v25 - 1) >= *((_DWORD *)a1 + 6))
              {
                sub_18130E688((uint64_t)a1, "invalid page number %u");
              }

              else
              {
                unsigned int v28 = a1[2];
                int v29 = *((unsigned __int8 *)v28 + (v25 >> 3));
                int v30 = 1 << (v24 & 7);
                if ((v30 & v29) != 0) {
                  sub_18130E688((uint64_t)a1, "2nd reference to page %u");
                }
                else {
                  *((_BYTE *)v28 + (v25 >> 3)) = v29 | v30;
                }
              }

              v21 += 4;
              --v22;
            }

            while (v22);
          }

          int v6 = v13 - v18;
        }

        else
        {
          sub_18130E688((uint64_t)a1, "freelist leaf count too big on page %u", v7);
          v6 -= 2;
        }

        int v4 = a2;
      }

      else
      {
        if (*((_BYTE *)*a1 + 33) && v6 != 1)
        {
          int v19 = sub_18130008C(*a1, bswap32(*v14), &v40, &v39);
          if (v19)
          {
            if (v19 == 3082 || v19 == 7)
            {
              *((_DWORD *)a1 + 9) = 7;
              *((_DWORD *)a1 + 7) = 0;
              if (!*((_DWORD *)a1 + 8)) {
                *((_DWORD *)a1 + 8) = 1;
              }
            }

            sub_18130E688((uint64_t)a1, "Failed to read ptrmap key=%u");
          }

          else if (v40 != 4 || v39 != (_DWORD)v7)
          {
            sub_18130E688((uint64_t)a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
          }
        }

        --v6;
      }

      unsigned int v32 = *v14;
      if (v38)
      {
        if ((*(_WORD *)(v38 + 52) & 0x20) != 0)
        {
          uint64_t v33 = *(void *)(v38 + 40);
          --*(_DWORD *)(v33 + 152);
          *(void *)(v38 + 32) = *(void *)(v33 + 168);
          *(void *)(v33 + 168) = v38;
          (*(void (**)(void, void, void))(**(void **)(v33 + 72) + 144LL))( *(void *)(v33 + 72),  *(void *)(v33 + 200) * (*(_DWORD *)(v38 + 48) - 1),  *(void *)(v38 + 8));
        }

        else
        {
          sub_1812F9F44(v38);
        }
      }

      uint64_t v7 = bswap32(v32);
      if (!(_DWORD)v7) {
        break;
      }
    }
  }

  if (v6 && v35 == *((_DWORD *)a1 + 8))
  {
    char v34 = "size";
    if (!v4) {
      char v34 = "overflow list length";
    }
    sub_18130E688((uint64_t)a1, "%s is %u but should be %u", v34, a4 - v6, a4);
  }

void sub_18130E688(uint64_t a1, char *zFormat, ...)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (*(_DWORD *)(v4 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }

  unsigned int v5 = *(unsigned int (**)(void))(v4 + 544);
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v6;
    if (!(v6 % *(_DWORD *)(v4 + 560)))
    {
      if (v5(*(void *)(v4 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }

  int v7 = *(_DWORD *)(a1 + 28);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 28) = v7 - 1;
    *(_DWORD *)(a1 + 32) = v8;
    va_copy(v11, va);
    uint64_t v9 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v9)
    {
      if ((v9 + 1) >= *(_DWORD *)(a1 + 88))
      {
        sub_1812D3A10(a1 + 72, "\n", 1u);
        unint64_t v10 = *(const char **)(a1 + 48);
        if (!v10)
        {
LABEL_13:
          sqlite3_str_vappendf((sqlite3_str *)(a1 + 72), zFormat, v11);
          if (*(_BYTE *)(a1 + 100) == 7)
          {
            *(_DWORD *)(a1 + 36) = 7;
            *(_DWORD *)(a1 + 28) = 0;
            if (!*(_DWORD *)(a1 + 32)) {
              *(_DWORD *)(a1 + 32) = 1;
            }
          }

          return;
        }

void sub_18130E7DC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v7 = sub_18130008C(*(_DWORD **)a1, a2, &v11, &v10);
  if (v7)
  {
    if (v7 == 3082 || v7 == 7)
    {
      *(_DWORD *)(a1 + 36) = 7;
      *(_DWORD *)(a1 + 28) = 0;
      if (!*(_DWORD *)(a1 + 32)) {
        *(_DWORD *)(a1 + 32) = 1;
      }
    }

    sub_18130E688(a1, "Failed to read ptrmap key=%u");
  }

  else if (v11 != a3 || v10 != a4)
  {
    sub_18130E688(a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
  }

uint64_t sub_18130E894(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  v96[0] = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 60);
  uint64_t v10 = *(void *)(a1 + 112);
  if (*(_DWORD *)(v10 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }

  unsigned __int8 v11 = *(unsigned int (**)(void))(v10 + 544);
  if (v11)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v12;
    if (!(v12 % *(_DWORD *)(v10 + 560)))
    {
      if (v11(*(void *)(v10 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }

  if (!*(_DWORD *)(a1 + 28)) {
    goto LABEL_16;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 - 1 >= *(_DWORD *)(a1 + 24))
  {
    sub_18130E688(a1, "invalid page number %u");
    return 0LL;
  }

  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (unint64_t)a2 >> 3;
  int v15 = *(unsigned __int8 *)(v13 + v14);
  int v16 = 1 << (a2 & 7);
  if ((v16 & v15) != 0)
  {
    sub_18130E688(a1, "2nd reference to page %u");
    return 0LL;
  }

  uint64_t v18 = *(_BYTE **)a1;
  unsigned int v19 = *(_DWORD *)(*(void *)a1 + 56LL);
  *(_BYTE *)(v13 + v14) = v15 | v16;
  *(void *)(a1 + 48) = "Tree %u page %u: ";
  *(_DWORD *)(a1 + 60) = a2;
  int v20 = (*(uint64_t (**)(void))(*(void *)v18 + 288LL))();
  if (!v20)
  {
    uint64_t v22 = *(void *)(v92 + 16);
    if (*(_DWORD *)(v22 + 4) != a2)
    {
      uint64_t v23 = *(void *)(v92 + 8);
      *(void *)(v22 + 112) = v92;
      *(void *)(v22 + 72) = v18;
      *(void *)(v22 + 80) = v23;
      *(_DWORD *)(v22 + 4) = a2;
      if (a2 == 1) {
        char v24 = 100;
      }
      else {
        char v24 = 0;
      }
      *(_BYTE *)(v22 + 9) = v24;
    }

    char v25 = *(_BYTE *)v22;
    *(_BYTE *)uint64_t v22 = 0;
    if (sub_18129B974(v22))
    {
      sub_18130E688(a1, "btreeInitPage() returns error code %d");
LABEL_27:
      int v21 = -1;
      goto LABEL_28;
    }

    if (sub_18130A254(v22))
    {
      sub_18130E688(a1, "free space corruption");
      goto LABEL_27;
    }

    char v78 = v25;
    unsigned int v85 = v19;
    uint64_t v28 = *(void *)(v22 + 80);
    uint64_t v29 = *(unsigned __int8 *)(v22 + 9);
    *(void *)(a1 + 48) = "Tree %u page %u cell %u: ";
    uint64_t v88 = v28;
    unsigned __int16 v30 = _byteswap_ushort(*(_WORD *)(v29 + v28 + 5)) - 1;
    uint64_t v81 = __rev16(*(unsigned __int16 *)(v29 + v28 + 3));
    uint64_t v80 = v29;
    uint64_t v31 = v29 - 4LL * *(unsigned __int8 *)(v22 + 8);
    if (*(_BYTE *)(v22 + 8))
    {
      unsigned int v32 = *(unsigned int **)(a1 + 104);
      unsigned int *v32 = 0;
      int v21 = -1;
      int v82 = 1;
    }

    else
    {
      uint64_t v33 = bswap32(*(_DWORD *)(v29 + v28 + 8));
      if (v18[33])
      {
        *(void *)(a1 + 48) = "Tree %u page %u right child: ";
        sub_18130E7DC(a1, v33, 5, a2);
      }

      int v21 = sub_18130E894(a1, v33, v96, a4);
      unsigned int v32 = 0LL;
      int v82 = 0;
    }

    uint64_t v34 = v31 + 12;
    unsigned int v35 = v30;
    uint64_t v87 = v22;
    unsigned int v90 = v30;
    uint64_t v83 = v31 + 12;
    if (!(_DWORD)v81)
    {
      *a3 = v96[0];
      *(void *)(a1 + 48) = 0LL;
LABEL_74:
      uint64_t v52 = v81;
      if (*(int *)(a1 + 28) >= 1)
      {
        if (!*(_BYTE *)(v22 + 8))
        {
          unsigned int v32 = *(unsigned int **)(a1 + 104);
          unsigned int *v32 = 0;
          if ((_DWORD)v81)
          {
            do
            {
              uint64_t v53 = __rev16(*(unsigned __int16 *)(v88 + v34 + 2LL * ((int)v52 - 1)));
              int v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 120))(v87, v88 + v53);
              unsigned int v55 = *v32 + 1;
              unsigned int *v32 = v55;
              v32[v55] = (v53 + v54 - 1) | ((_DWORD)v53 << 16);
              if (v55 >= 2)
              {
                do
                {
                  uint64_t v56 = v55 >> 1;
                  unsigned int v57 = v32[v56];
                  unsigned int v58 = v32[v55];
                  if (v57 <= v58) {
                    break;
                  }
                  unsigned int v59 = v55;
                  v32[v56] = v58;
                  v32[v55] = v57;
                  v55 >>= 1;
                }

                while (v59 > 3);
              }

              BOOL v40 = v52-- <= 1;
              uint64_t v34 = v83;
            }

            while (!v40);
            uint64_t v22 = v87;
            LOWORD(v35) = v90;
          }
        }

        for (unsigned int i = *(unsigned __int16 *)(v80 + v88 + 1); ; unsigned int i = *(unsigned __int16 *)(v88 + v61))
        {
          unsigned int v61 = __rev16(i);
          if (!v61) {
            break;
          }
          unsigned int v62 = (v61 + (bswap32(*(unsigned __int16 *)(v88 + v61 + 2)) >> 16) - 1) | (v61 << 16);
          unsigned int v63 = *v32 + 1;
          unsigned int *v32 = v63;
          v32[v63] = v62;
          if (v63 >= 2)
          {
            do
            {
              uint64_t v64 = v63 >> 1;
              unsigned int v65 = v32[v64];
              unsigned int v66 = v32[v63];
              if (v65 <= v66) {
                break;
              }
              unsigned int v67 = v63;
              v32[v64] = v66;
              v32[v63] = v65;
              v63 >>= 1;
            }

            while (v67 > 3);
          }
        }

        unsigned int v68 = *v32;
        if (*v32)
        {
          int v69 = 0;
          unsigned __int16 v70 = v35;
          while (1)
          {
            unsigned int v71 = v68;
            unsigned int v35 = v32[1];
            uint64_t v72 = v68;
            v32[1] = v32[v72];
            v32[v72] = -1;
            unsigned int v68 = v71 - 1;
            unsigned int *v32 = v71 - 1;
            if (v71 >= 3)
            {
              unsigned int v73 = v32[1];
              unsigned int v74 = v32[2] <= v32[3] ? 2 : 3;
              uint64_t v75 = &v32[v74];
              unsigned int v76 = *v75;
              if (v73 >= *v75)
              {
                unsigned int v77 = 1;
                do
                {
                  v32[v77] = v76;
                  unsigned int v77 = v74;
                  *uint64_t v75 = v73;
                  v74 *= 2;
                  unsigned int v68 = *v32;
                  if (v74 > *v32) {
                    break;
                  }
                  if (v32[v74] > v32[v74 | 1]) {
                    v74 |= 1u;
                  }
                  uint64_t v75 = &v32[v74];
                  unsigned int v76 = *v75;
                }

                while (v73 >= *v75);
              }
            }

            if (v70 >= HIWORD(v35)) {
              break;
            }
            v69 += ~v70 + HIWORD(v35);
            unsigned __int16 v70 = v35;
            if (!v68) {
              goto LABEL_109;
            }
          }

          sub_18130E688(a1, "Multiple uses for byte %u of page %u", HIWORD(v35), a2);
          LOWORD(v35) = v70;
          if (*v32) {
            goto LABEL_28;
          }
        }

        else
        {
          int v69 = 0;
        }

LABEL_109:
        if (v85 + v69 + (~(_WORD)v35 | 0xFFFF0000) != *(unsigned __int8 *)(v80 + v88 + 7)) {
          sub_18130E688( a1,  "Fragmentation of %u bytes reported as %u on page %u",  v85 + v69 + (~(_WORD)v35 | 0xFFFF0000),  *(unsigned __int8 *)(v80 + v88 + 7),  a2);
        }
      }

    switch((int)v47)
    {
      case 0:
        unsigned __int16 v30 = v227;
        if (strlen(v39) != 4) {
          goto LABEL_206;
        }
        int v54 = *v40;
        if (!*v40)
        {
          unsigned int v55 = "fts3";
          goto LABEL_204;
        }

        if ((v54 & 0xFFFFFFDF) != 0x46)
        {
          v54 += (unint64_t)byte_1813C6343;
          unsigned int v55 = "fts3";
LABEL_203:
          LODWORD(v54) = *(unsigned __int8 *)v54;
          goto LABEL_204;
        }

        int v54 = v40[1];
        if (!v40[1])
        {
          unsigned int v55 = "ts3";
          goto LABEL_204;
        }

        if ((v54 & 0xFFFFFFDF) != 0x54)
        {
          v54 += (unint64_t)byte_1813C6343;
          unsigned int v55 = "ts3";
          goto LABEL_203;
        }

        int v54 = v40[2];
        if (!v40[2])
        {
          unsigned int v55 = "s3";
          goto LABEL_204;
        }

        if ((v54 & 0xFFFFFFDF) != 0x53)
        {
          v54 += (unint64_t)byte_1813C6343;
          unsigned int v55 = "s3";
          goto LABEL_203;
        }

        int v54 = v40[3];
        if (v40[3])
        {
          if ((_DWORD)v54 != 51)
          {
            v54 += (unint64_t)byte_1813C6343;
            unsigned int v55 = "3";
            goto LABEL_203;
          }

      unsigned int v12 = v37;
      int v139 = v37;
      goto LABEL_146;
    }

    uint64_t v123 = v31;
    uint64_t v124 = v30;
    uint64_t v126 = v33;
    BOOL v40 = 0;
    char v101 = 0LL;
    int v128 = 0LL;
    unsigned int v38 = 0LL;
    unsigned int v39 = 0;
    while (1)
    {
      if (sqlite3_initialize() || (uint64_t v104 = sub_18127D33C(v128, v101 + 192)) == 0)
      {
        if (!v128)
        {
          unsigned int v46 = 0LL;
          unsigned int v44 = qword_18C467E20 + 480;
          goto LABEL_123;
        }

        uint64_t v118 = (void (**)(void))&off_18C4653A8;
        unsigned int v44 = &qword_18C467E20[60];
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v128);
          --qword_18C468B10;
          off_18C4653A8(v128);
          unsigned int v46 = 0LL;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_123;
          }
LABEL_220:
          uint64_t v118 = (void (**)(void))&xmmword_18C465410;
        }

        else
        {
          unsigned int v46 = 0LL;
        }

    uint64_t v52 = 0;
    uint64_t v53 = -1;
    int v54 = 162;
    do
    {
      unsigned int v55 = v52 + v54;
      if (v52 + v54 < 0 != __OFADD__(v52, v54)) {
        ++v55;
      }
      uint64_t v56 = v55 >> 1;
      if (v49 < *((unsigned __int16 *)&unk_1813CD2A0 + 2 * v56))
      {
        int v54 = v56 - 1;
      }

      else
      {
        uint64_t v52 = v56 + 1;
        uint64_t v53 = v56;
      }
    }

    while (v54 >= v52);
    unsigned int v57 = (unsigned __int16 *)((char *)&unk_1813CD2A0 + 4 * v53);
    unsigned int v58 = *v57;
    if (*((unsigned __int8 *)v57 + 3) + v58 <= v49
      || (unsigned int v59 = *((unsigned __int8 *)&unk_1813CD2A0 + 4 * v53 + 2), ((v49 ^ v58) & v59 & 1) != 0))
    {
LABEL_118:
      if (v49 <= 0x7F) {
        goto LABEL_2;
      }
      goto LABEL_119;
    }

    uint64_t v49 = (unsigned __int16)(*(_WORD *)((char *)&unk_1813CD52C + (v59 & 0xFE)) + v49);
    if (v49 <= 0x7F) {
      goto LABEL_2;
    }
LABEL_119:
    if (v49 > 0x7FF)
    {
      if (HIWORD(v49)) {
        goto LABEL_125;
      }
LABEL_122:
      *__int16 v37 = (v49 >> 12) | 0xE0;
      v37[1] = (v49 >> 6) & 0x3F | 0x80;
      unsigned __int8 v11 = (_DWORD)v37 + 3;
      v37[2] = v49 & 0x3F | 0x80;
      goto LABEL_3;
    }

    *__int16 v37 = (v49 >> 6) | 0xC0;
    unsigned __int8 v11 = (_DWORD)v37 + 2;
    v37[1] = v49 & 0x3F | 0x80;
LABEL_3:
    uint64_t result = a6(a2, 0LL, &v60, v11 - &v60);
    if ((_DWORD)result) {
      return result;
    }
  }

void *sub_18130F0F4(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1812F20DC(*(void **)(a1 + 8), v2);
      int v2 = v3;
    }

    while (v3);
  }

  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return sub_1812F20DC(*(void **)(a1 + 8), (void *)a1);
}

void *sub_18130F148(void *result)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  memset(v17, 0, sizeof(v17));
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0LL;
    do
    {
      uint64_t v3 = (void *)v1[1];
      v1[1] = 0LL;
      if (result)
      {
        int v4 = 0;
        int v2 = v17;
        do
        {
          unsigned int v5 = &v15;
          do
          {
            uint64_t v6 = *result;
            int v7 = v1;
            while (1)
            {
              uint64_t v1 = v7;
              uint64_t v8 = *v7;
              if (v6 <= v8) {
                break;
              }
              *((void *)v5 + 1) = v1;
              int v7 = (void *)v1[1];
              unsigned int v5 = (char *)v1;
              if (!v7)
              {
                unsigned int v5 = (char *)v1;
                uint64_t v1 = result;
                goto LABEL_15;
              }
            }

            if (v6 < v8)
            {
              *((void *)v5 + 1) = result;
              unsigned int v5 = (char *)result;
            }

            uint64_t result = (void *)result[1];
          }

          while (result);
LABEL_15:
          *((void *)v5 + 1) = v1;
          uint64_t v1 = v16;
          *int v2 = 0LL;
          int v2 = (void *)v17 + ++v4;
          uint64_t result = (void *)*v2;
        }

        while (*v2);
      }

      else
      {
        int v2 = v17;
      }

      *int v2 = v1;
      uint64_t result = *(void **)&v17[0];
      uint64_t v1 = v3;
    }

    while (v3);
  }

  for (uint64_t i = 1LL; i != 40; ++i)
  {
    uint64_t v10 = (void *)*((void *)v17 + i);
    if (v10)
    {
      if (result)
      {
        unsigned __int8 v11 = &v15;
        do
        {
          uint64_t v12 = *result;
          uint64_t v13 = v10;
          while (1)
          {
            uint64_t v10 = v13;
            uint64_t v14 = *v13;
            if (v12 <= v14) {
              break;
            }
            *((void *)v11 + 1) = v10;
            uint64_t v13 = (void *)v10[1];
            unsigned __int8 v11 = (char *)v10;
            if (!v13)
            {
              unsigned __int8 v11 = (char *)v10;
              uint64_t v10 = result;
              goto LABEL_30;
            }
          }

          if (v12 < v14)
          {
            *((void *)v11 + 1) = result;
            unsigned __int8 v11 = (char *)result;
          }

          uint64_t result = (void *)result[1];
        }

        while (result);
LABEL_30:
        *((void *)v11 + 1) = v10;
        uint64_t result = v16;
      }

      else
      {
        uint64_t result = (void *)*((void *)v17 + i);
      }
    }
  }

  return result;
}

uint64_t sub_18130F2F0(uint64_t result, void *a2, void *a3)
{
  do
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5)
    {
      sub_18130F2F0(v5, a2, &v6);
      *(void *)(v6 + 8) = v4;
    }

    else
    {
      *a2 = v4;
    }

    a2 = (void *)(v4 + 8);
    uint64_t result = *(void *)(v4 + 8);
  }

  while (result);
  *a3 = v4;
  return result;
}

uint64_t sub_18130F34C(uint64_t *a1, int a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (a2 < 2)
    {
      *a1 = *(void *)(result + 8);
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
    }

    else
    {
      uint64_t v4 = (a2 - 1);
      uint64_t result = sub_18130F34C(a1, v4);
      uint64_t v5 = *a1;
      if (*a1)
      {
        *(void *)(v5 + 16) = result;
        *a1 = *(void *)(v5 + 8);
        *(void *)(v5 + 8) = sub_18130F34C(a1, v4);
        return v5;
      }
    }
  }

  return result;
}

uint64_t sub_18130F3C8( sqlite3 *a1, void **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 v11 = (unsigned __int8 *)sub_1812FA130((uint64_t)a1, a3, &a9);
  if (!v11) {
    return 7LL;
  }
  int v17 = v11;
  uint64_t v18 = sub_18130F574(a1, a2, v11, v12, v13, v14, v15, v16);
  sub_1812F20DC(a1, v17);
  return v18;
}

uint64_t sub_18130F444(uint64_t result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (*(_BYTE *)(result + 17))
  {
    ++*(_DWORD *)(result + 20);
    if (!*(_BYTE *)(result + 18)) {
      uint64_t result = sub_1812FDE20(result);
    }
  }

  uint64_t v5 = *v4;
  if (*(_BYTE *)(*v4 + 16))
  {
    BOOL v6 = 0;
    *(_WORD *)(v5 + 11) = 1;
    *(_BYTE *)(v5 + 13) = 0;
LABEL_7:
    char v7 = 0;
    *(_BYTE *)(v5 + 14) = 0;
    int v8 = 1;
    goto LABEL_8;
  }

  BOOL v6 = (a2 & 7u) > 2;
  *(_BYTE *)(v5 + 12) = v6;
  *(_BYTE *)(v5 + 13) = (a2 & 7) == 4;
  *(_BYTE *)(v5 + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1) {
    goto LABEL_7;
  }
  int v8 = 0;
  if ((a2 & 8) != 0) {
    char v7 = 3;
  }
  else {
    char v7 = 2;
  }
  *(_BYTE *)(v5 + 14) = v7;
LABEL_8:
  char v9 = 4 * v7;
  if (v6) {
    char v10 = v7;
  }
  else {
    char v10 = 0;
  }
  if ((a2 & 0x10) != 0) {
    int v11 = v8;
  }
  else {
    int v11 = 1;
  }
  if (v11) {
    char v12 = v9;
  }
  else {
    char v12 = 12;
  }
  *(_BYTE *)(v5 + 15) = v12 | v10;
  *(_BYTE *)(v5 + 25) = *(_BYTE *)(v5 + 25) & 0xFE | ((a2 & 0x20) == 0);
  if (*(_BYTE *)(v3 + 17))
  {
    int v13 = *(_DWORD *)(v3 + 20) - 1;
    *(_DWORD *)(v3 + 20) = v13;
    if (!v13) {
      return sub_1812FDEFC(v3);
    }
  }

  return result;
}

uint64_t sub_18130F574( sqlite3 *a1, void **a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_18126DFE0((uint64_t)a1, a3, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, a8);
  if (!(_DWORD)v10)
  {
    for (unsigned int i = sqlite3_step(pStmt); i == 100; unsigned int i = sqlite3_step(pStmt))
    {
      char v12 = sqlite3_column_text(pStmt, 0);
      if (v12)
      {
        int v13 = (const char *)v12;
        if (!strncmp((const char *)v12, "CRE", 3uLL) || !strncmp(v13, "INS", 3uLL))
        {
          unsigned int i = sub_18130F574(a1, a2, v13);
          if (i) {
            break;
          }
        }
      }
    }

    if (i == 101) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = i;
    }
    if (!(_DWORD)v10) {
      goto LABEL_24;
    }
    uint64_t v14 = sqlite3_errmsg(a1);
    if (v14)
    {
      uint64_t v15 = v14;
      size_t v16 = strlen(v14);
      unint64_t v17 = v16 + 1;
      if (a1)
      {
        uint64_t v18 = (void *)sub_1812F2264((uint64_t)a1, v17);
        if (!v18) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }

      uint64_t v18 = (void *)sub_18126F0AC(v16 + 1);
      if (v18) {
LABEL_20:
      }
        memcpy(v18, v15, v17);
    }

    else
    {
      uint64_t v18 = 0LL;
    }

uint64_t sub_18130F6DC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  int v5 = a2;
  if ((*(_WORD *)(v4 + 40) & 2) != 0 && *(_BYTE *)(v4 + 33) != (a2 != 0))
  {
    uint64_t v6 = 8LL;
    if (!*(_BYTE *)(a1 + 17)) {
      return v6;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    *(_BYTE *)(v4 + 33) = v5 != 0;
    *(_BYTE *)(v4 + 34) = v5 == 2;
    if (!*(_BYTE *)(a1 + 17)) {
      return v6;
    }
  }

  int v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7) {
    sub_1812FDEFC(a1);
  }
  return v6;
}

uint64_t sub_18130F79C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 33))
  {
    uint64_t v3 = 0LL;
    if (!*(_BYTE *)(a1 + 17)) {
      return v3;
    }
    goto LABEL_11;
  }

  if (*(_BYTE *)(v2 + 34)) {
    uint64_t v3 = 2LL;
  }
  else {
    uint64_t v3 = 1LL;
  }
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_11:
    int v4 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v4;
    if (!v4) {
      sub_1812FDEFC(a1);
    }
  }

  return v3;
}

uint64_t sub_18130F82C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1812FDE20(a1);
    if (!*(_BYTE *)(a2 + 17)) {
      goto LABEL_7;
    }
  }

  else if (!*(_BYTE *)(a2 + 17))
  {
    goto LABEL_7;
  }

  ++*(_DWORD *)(a2 + 20);
  if (!*(_BYTE *)(a2 + 18)) {
    sub_1812FDE20(a2);
  }
LABEL_7:
  int v4 = *(uint64_t **)(**(void **)(a1 + 8) + 72LL);
  uint64_t v5 = *v4;
  if (!*v4
    || (*(void *)&__int128 v17 = *(unsigned int *)(*(void *)(a2 + 8) + 64LL) * (uint64_t)*(int *)(*(void *)(a2 + 8) + 52LL),
        uint64_t v6 = (*(uint64_t (**)(uint64_t *))(v5 + 80))(v4),
        (_DWORD)v6 == 12)
    || (uint64_t v7 = v6, !(_DWORD)v6))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    uint64_t v21 = 0LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)&__int128 v19 = *(void *)a2;
    *((void *)&v19 + 1) = a2;
    *((void *)&v17 + 1) = a1;
    DWORD2(v18) = 1;
    uint64_t v9 = **(void **)(a1 + 8);
    int v10 = *(unsigned __int16 *)(*(void *)v8 + 178LL);
    if (*(unsigned __int16 *)(v9 + 178) != v10)
    {
      *(_WORD *)(v9 + 178) = v10;
      int v11 = *(void (**)(void, void, void))(v9 + 304);
      if (v11) {
        v11(*(void *)(v9 + 320), *(unsigned int *)(v9 + 200), (__int16)v10);
      }
    }

    sqlite3_backup_step((sqlite3_backup *)&v17, 0x7FFFFFFF);
    uint64_t v7 = sqlite3_backup_finish((sqlite3_backup *)&v17);
    if ((_DWORD)v7)
    {
      uint64_t v12 = **(void **)(*((void *)&v17 + 1) + 8LL);
      if (!*(_BYTE *)(v12 + 16))
      {
        ++*(_DWORD *)(v12 + 132);
        for (uint64_t i = *(void *)(v12 + 112); i; uint64_t i = *(void *)(i + 64))
          *(_DWORD *)(i + 24) = 1;
        sub_18126C6E4(*(void **)(v12 + 336), 0);
      }
    }

    else
    {
      *(_WORD *)(*(void *)(a1 + 8) + 40LL) &= ~2u;
    }
  }

  if (*(_BYTE *)(a2 + 17) && (int v14 = *(_DWORD *)(a2 + 20) - 1, (*(_DWORD *)(a2 + 20) = v14) == 0))
  {
    sub_1812FDEFC(a2);
    if (!*(_BYTE *)(a1 + 17)) {
      return v7;
    }
  }

  else if (!*(_BYTE *)(a1 + 17))
  {
    return v7;
  }

  int v15 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v15;
  if (!v15) {
    sub_1812FDEFC(a1);
  }
  return v7;
}

double sub_18130FA18(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 564);
  if ((-858993459 * v1 + 429496729) <= 0x33333332)
  {
    unint64_t v3 = 8 * v1 + 40;
    int v4 = *(void **)(a1 + 600);
    if (v4)
    {
      if (*(void *)(a1 + 512) > (unint64_t)v4)
      {
        if (*(void *)(a1 + 496) <= (unint64_t)v4)
        {
          if (v3 < 0x81)
          {
LABEL_13:
            uint64_t v6 = &v4[v1];
            v6[4] = 0LL;
            double result = 0.0;
            *(_OWORD *)uint64_t v6 = 0u;
            *((_OWORD *)v6 + 1) = 0u;
            *(void *)(a1 + 600) = v4;
            return result;
          }
        }

        else if (*(void *)(a1 + 504) <= (unint64_t)v4 && v3 <= *(unsigned __int16 *)(a1 + 438))
        {
          goto LABEL_13;
        }
      }

      int v4 = (void *)sub_1812F2310(a1, v4, v3);
      if (v4)
      {
LABEL_12:
        uint64_t v1 = *(int *)(a1 + 564);
        goto LABEL_13;
      }
    }

    else
    {
      int v4 = (void *)sub_1812F2264(a1, 8 * v1 + 40);
      if (v4) {
        goto LABEL_12;
      }
    }
  }

  return result;
}

uint64_t sub_18130FAF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *), void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  uint64_t v84 = 0LL;
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 592);
  if (!v15)
  {
LABEL_4:
    size_t v16 = *(const char **)a2;
    if (*(void *)a2)
    {
      size_t v17 = strlen(*(const char **)a2);
      unint64_t v18 = v17 + 1;
      if (a1)
      {
        __int128 v19 = (void *)sub_1812F2264(a1, v18);
        if (v19) {
          goto LABEL_7;
        }
      }

      else
      {
        __int128 v19 = (void *)sub_18126F0AC(v17 + 1);
        if (v19)
        {
LABEL_7:
          memcpy(v19, v16, v18);
          uint64_t v20 = sub_18126F0AC(48LL);
          if (!v20)
          {
            if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v79 = *(void *)(a1 + 344);
              if (v79)
              {
                sub_1812DC47C(v79, "out of memory", v21, v22, v23, v24, v25, v26, v83);
                for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  uint64_t i = *(void *)(i + 256);
                  if (!i) {
                    break;
                  }
                }
              }
            }

            sub_1812F20DC((void *)a1, v19);
            return 7LL;
          }

          uint64_t v27 = v20;
          *(_OWORD *)uint64_t v20 = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(void *)uint64_t v20 = a1;
          *(void *)(v20 + 8) = a3;
          *(_BYTE *)(v20 + 30) = 1;
          uint64_t v28 = *(void *)(a2 + 96);
          uint64_t v29 = *(void *)(a1 + 32);
          if (v28)
          {
            unsigned __int16 v30 = (uint64_t *)(v29 + 24);
            int v31 = -1;
            do
            {
              uint64_t v32 = *v30;
              v30 += 4;
              ++v31;
            }

            while (v32 != v28);
          }

          else
          {
            int v31 = -32768;
          }

          *(void *)(*(void *)(a2 + 72) + 8LL) = *(void *)(v29 + 32LL * v31);
          v85[0] = v20;
          v85[1] = a2;
          uint64_t v86 = *(void *)(a1 + 592);
          int v87 = 0;
          *(void *)(a1 + 592) = v85;
          ++*(_DWORD *)(a2 + 44);
          uint64_t v34 = (void **)(v20 + 16);
          uint64_t v33 = a4(a1, *(void *)(a3 + 24), v13, v14, v20 + 16, &v84);
          if (*(void *)(a1 + 816) || (int v41 = *(_DWORD *)(a2 + 44) - 1, (*(_DWORD *)(a2 + 44) = v41) == 0)) {
            sub_181311A80((void *)a1, (void *)a2);
          }
          *(void *)(a1 + 592) = v86;
          if ((_DWORD)v33)
          {
            if ((_DWORD)v33 == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v81 = *(void *)(a1 + 344);
              if (v81)
              {
                sub_1812DC47C(v81, "out of memory", v35, v36, v37, v38, v39, v40, v83);
                for (uint64_t j = *(void *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
                {
                  *(_DWORD *)(j + 24) = 7;
                  uint64_t j = *(void *)(j + 256);
                  if (!j) {
                    break;
                  }
                }
              }
            }

            if (v84)
            {
              *a5 = sub_18127F588(a1, "%s", v35, v36, v37, v38, v39, v40, v84);
              uint64_t v42 = v84;
              if (v84)
              {
                uint64_t v43 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8 -= (int)off_18C4653B8(v42);
                  --qword_18C468B10;
                  off_18C4653A8(v42);
                  uint64_t v42 = xmmword_18C468B70;
                  if (!(void)xmmword_18C468B70) {
                    goto LABEL_107;
                  }
                  uint64_t v43 = &xmmword_18C465410;
                }

                (*v43)(v42);
              }
            }

            else
            {
              *a5 = sub_18127F588(a1, "vtable constructor failed: %s", v35, v36, v37, v38, v39, v40, (char)v19);
            }

uint64_t sub_1813102D8(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  int v3 = (int)((3 * byte_1813C6343[a1[(int)a2 - 1]]) ^ (4 * byte_1813C6343[*a1]) ^ a2) % 127;
  int v4 = byte_1813C6FD0[v3];
  if (byte_1813C6FD0[v3])
  {
    do
    {
      if (byte_1813C6A20[v4] == (_DWORD)a2)
      {
        uint64_t v5 = word_1813C68F8[v4];
        if ((*a1 & 0xDF) == aReindexedescap[v5]
          && (a1[1] & 0xDF) == aReindexedescap[v5 + 1])
        {
          if ((int)a2 < 3)
          {
LABEL_11:
            *a3 = byte_1813C704F[v4];
            return a2;
          }

          uint64_t v6 = &aReindexedescap[v5 + 2];
          uint64_t v7 = a2 - 2LL;
          uint64_t v8 = a1 + 2;
          while (1)
          {
            int v9 = *v8++;
            unsigned int v10 = v9 & 0xFFFFFFDF;
            int v11 = *v6++;
            if (v10 != v11) {
              break;
            }
            if (!--v7) {
              goto LABEL_11;
            }
          }
        }
      }

      int v4 = byte_1813C70E3[v4];
    }

    while (v4);
  }

  return a2;
}

uint64_t sub_1813103F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40LL * (int)result;
  *(_BYTE *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_BYTE *)(v10 + 1) = 0;
  *(void *)(v10 + 12) = 0LL;
  *(void *)(v10 + 28) = 0LL;
  *(void *)(v10 + 20) = 0LL;
  *(_DWORD *)(v10 + 36) = 0;
  return result;
}

uint64_t sub_18131044C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  int v10 = a3;
  char v11 = a2;
  while (!sub_1813104DC(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t result = *(unsigned int *)(a1 + 144);
    if (*(_DWORD *)(a1 + 148) > (int)result)
    {
      *(_DWORD *)(a1 + 144) = result + 1;
      uint64_t v14 = *(void *)(a1 + 136) + 40LL * (int)result;
      *(_BYTE *)uint64_t v14 = v11;
      *(_WORD *)(v14 + 2) = 0;
      *(_DWORD *)(v14 + 4) = v10;
      *(_DWORD *)(v14 + 8) = v9;
      *(_DWORD *)(v14 + 12) = v8;
      *(_BYTE *)(v14 + 1) = 0;
      *(void *)(v14 + 24) = 0LL;
      *(void *)(v14 + 32) = 0LL;
      *(void *)(v14 + 16) = 0LL;
      return result;
    }
  }

  return 1LL;
}

uint64_t sub_1813104DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(int *)(a1 + 148);
  uint64_t v10 = 2 * v9;
  BOOL v11 = (_DWORD)v9 == 0;
  uint64_t v12 = 25LL;
  if (!v11) {
    uint64_t v12 = v10;
  }
  uint64_t v13 = *(void *)v8;
  if (v12 <= *(int *)(*(void *)v8 + 156LL))
  {
    unint64_t v18 = *(void **)(a1 + 136);
    uint64_t v19 = 5 * v12;
    unint64_t v20 = 8 * v19;
    if (v18)
    {
      if (*(void *)(v13 + 512) > (unint64_t)v18)
      {
        if (*(void *)(v13 + 496) <= (unint64_t)v18)
        {
          if (v20 < 0x81) {
            goto LABEL_23;
          }
        }

        else if (*(void *)(v13 + 504) <= (unint64_t)v18 && v20 <= *(unsigned __int16 *)(v13 + 438))
        {
LABEL_23:
          if (*(void *)(v13 + 520) > (unint64_t)v18)
          {
            if (*(void *)(v13 + 496) <= (unint64_t)v18)
            {
              int v21 = 128;
              goto LABEL_27;
            }

            if (*(void *)(v13 + 504) <= (unint64_t)v18)
            {
              int v21 = *(unsigned __int16 *)(v13 + 438);
              goto LABEL_27;
            }
          }

uint64_t sub_181310690( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t result = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
  {
    uint64_t result = sub_18131044C(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = result + 1;
    uint64_t v11 = *(void *)(a1 + 136) + 40LL * (int)result;
    *(_BYTE *)uint64_t v11 = a2;
    *(_WORD *)(v11 + 2) = 0;
    *(_DWORD *)(v11 + 4) = a3;
    *(_DWORD *)(v11 + 8) = a4;
    *(_DWORD *)(v11 + 12) = a5;
    *(_BYTE *)(v11 + 1) = 0;
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 0LL;
  }

  if (!*(_BYTE *)(*(void *)a1 + 103LL))
  {
    uint64_t v12 = *(void *)(a1 + 136) + 40LL * (int)result;
    *(_BYTE *)(v12 + 1) = -3;
    *(_DWORD *)(v12 + 16) = v8;
  }

  return result;
}

uint64_t *sub_181310724(uint64_t *result, uint64_t a2, char *__s, unsigned int a4)
{
  uint64_t v7 = result;
  int v8 = (char *)a2;
  int v9 = *(char *)(a2 + 1);
  if (v9)
  {
LABEL_2:
    uint64_t result = sub_18127ABFC((void *)*v7, v9, *((void *)v8 + 2));
    v8[1] = 0;
    *((void *)v8 + 2) = 0LL;
    goto LABEL_3;
  }

  while (1)
  {
LABEL_3:
    if ((a4 & 0x80000000) == 0)
    {
      if (a4)
      {
        if (!__s) {
          goto LABEL_24;
        }
      }

      else
      {
        if (!__s)
        {
LABEL_24:
          unint64_t v18 = 0LL;
LABEL_25:
          *(void *)(a2 + 16) = v18;
          v8[1] = -6;
          return result;
        }

        a4 = strlen(__s) & 0x3FFFFFFF;
      }

      uint64_t v16 = *v7;
      size_t v17 = a4;
      uint64_t result = (uint64_t *)sub_1812F2264(v16, a4 + 1LL);
      unint64_t v18 = result;
      if (result)
      {
        uint64_t result = (uint64_t *)memcpy(result, __s, v17);
        *((_BYTE *)v18 + v17) = 0;
      }

      goto LABEL_25;
    }

    uint64_t result = (uint64_t *)*v7;
    if (*(_BYTE *)(*v7 + 103)) {
      break;
    }
    uint64_t v10 = (char *)v7[17];
    int v11 = -858993459 * ((unint64_t)(v8 - v10) >> 3);
    if (v11 < 0) {
      int v11 = *((_DWORD *)v7 + 36) - 1;
    }
    int v12 = v11;
    uint64_t v13 = &v10[40 * v11];
    int v15 = v13[1];
    uint64_t v14 = v13 + 1;
    if (!v15)
    {
      if (a4 == -3)
      {
        *(_DWORD *)&v10[40 * v12 + 16] = (_DWORD)__s;
        _BYTE *v14 = -3;
      }

      else if (__s)
      {
        *(void *)&v10[40 * v12 + 16] = __s;
        _BYTE *v14 = a4;
        if (a4 == -11) {
          ++*((_DWORD *)__s + 6);
        }
      }

      return result;
    }

    int v8 = &v10[40 * v12];
    int v9 = v8[1];
    if (v8[1]) {
      goto LABEL_2;
    }
  }

  if (a4 != -11) {
    return sub_18127ABFC(result, a4, (uint64_t)__s);
  }
  return result;
}

void *sub_1813108AC(void *result, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = result[3];
  uint64_t v5 = *(void *)(v4 + 80);
  *((_WORD *)result + 134) = *((_WORD *)result + 134) & 0xFF3F | 0x40;
  for (uint64_t i = (_DWORD *)(result[17] + 40LL * *((int *)result + 36) - 32); ; i -= 10)
  {
    while (2)
    {
      if (*((unsigned __int8 *)i - 8) <= 0x40u)
      {
        switch(*((_BYTE *)i - 8))
        {
          case 0:
          case 1:
            goto LABEL_8;
          case 2:
            if (*i) {
              *((_WORD *)result + 134) &= ~0x40u;
            }
LABEL_8:
            __int16 v7 = *((_WORD *)result + 134);
            goto LABEL_9;
          case 3:
          case 4:
          case 5:
            __int16 v7 = *((_WORD *)result + 134) & 0xFF3F;
LABEL_9:
            *((_WORD *)result + 134) = v7 | 0x80;
            i -= 10;
            continue;
          case 6:
            if (*(i - 11) > v3) {
              int v3 = *(i - 11);
            }
            goto LABEL_12;
          case 7:
            int v9 = *i;
            i -= 10;
            int v8 = v9;
            if (v9 > v3) {
              int v3 = v8;
            }
            continue;
          case 8:
            if (v5)
            {
              uint64_t result = sub_1813014B0((void *)*result, *(void **)(v4 + 80));
              *(void *)(v4 + 80) = 0LL;
            }

            *(_DWORD *)(v4 + 68) = 0;
            *a2 = v3;
            return result;
          default:
LABEL_12:
            if ((*i & 0x80000000) != 0) {
              *uint64_t i = *(_DWORD *)(v5 + 4LL * ~*i);
            }
            break;
        }
      }

      break;
    }
  }

uint64_t sub_1813109B8(_BYTE *a1, unsigned int a2, unsigned int a3, char *a4)
{
  if (*a1 == 1) {
    return 4LL;
  }
  uint64_t result = sub_181308C74((uint64_t)a1);
  if (!(_DWORD)result) {
    return sub_1812BFD8C((uint64_t)a1, a2, a3, a4, 0);
  }
  return result;
}

uint64_t sub_181310A28( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  if (*(_BYTE *)(*a1 + 197)) {
    return 0LL;
  }
  uint64_t result = sub_181276C70(*a1, (char **)a1 + 1, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    *((_DWORD *)a1 + 6) = result;
    ++*((_DWORD *)a1 + 12);
  }

  else
  {
    if (!*(_BYTE *)(v8 + 111)) {
      return 0LL;
    }
    uint64_t result = 0LL;
    *(_DWORD *)(v8 + 44) |= 0x10u;
  }

  return result;
}

uint64_t sub_181310A94(uint64_t a1, char *a2)
{
  int v2 = 0;
  int v3 = 73;
  while (1)
  {
    int v4 = v2 + v3;
    if (v2 + v3 < 0 != __OFADD__(v2, v3)) {
      ++v4;
    }
    int v5 = v4 >> 1;
    uint64_t v6 = (uint64_t)v4 >> 1;
    __int16 v7 = &(&off_189B6DCE8)[3 * v5];
    if (*v7) {
      break;
    }
    int v9 = 1;
LABEL_12:
    if (v9 < 0) {
      int v3 = v6 - 1;
    }
    else {
      int v2 = v6 + 1;
    }
    if (v2 > v3) {
      return 0LL;
    }
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v10 = a2[i + 7];
    uint64_t v11 = (*v7)[i];
    if ((_DWORD)v10 == (_DWORD)v11) {
      break;
    }
    int v9 = byte_1813C6343[v10] - byte_1813C6343[v11];
    if (v9) {
      goto LABEL_12;
    }
LABEL_7:
    ;
  }

  if (a2[i + 7]) {
    goto LABEL_7;
  }
  return 0LL;
}

uint64_t sub_181310B50(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = __s;
  if (a3)
  {
    if (__s) {
      int v10 = strlen(__s) & 0x3FFFFFFF;
    }
    else {
      int v10 = 0;
    }
    uint64_t v12 = sub_18126F0AC((v10 + 49));
    if (!v12)
    {
      if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
        return 0LL;
      }
      *(_BYTE *)(a1 + 103) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      uint64_t v33 = *(void *)(a1 + 344);
      if (!v33) {
        return 0LL;
      }
      sub_1812DC47C(v33, "out of memory", v13, v14, v15, v16, v17, v18, v38);
      uint64_t v34 = *(void *)(a1 + 344);
      *(_DWORD *)(v34 + 24) = 7;
      uint64_t v35 = *(void *)(v34 + 256);
      if (!v35) {
        return 0LL;
      }
      uint64_t v11 = 0LL;
      do
      {
        ++*(_DWORD *)(v35 + 48);
        *(_DWORD *)(v35 + 24) = 7;
        uint64_t v35 = *(void *)(v35 + 256);
      }

      while (v35);
      return v11;
    }

    uint64_t v11 = v12;
    uint64_t v19 = (char *)(v12 + 48);
    memcpy((void *)(v12 + 48), v5, (v10 + 1));
    *(void *)uint64_t v11 = a3;
    *(void *)(v11 + 8) = v19;
    *(void *)(v11 + 24) = a4;
    *(void *)(v11 + 32) = a5;
    *(void *)(v11 + 40) = 0LL;
    int v5 = v19;
    *(_DWORD *)(v11 + 16) = 1;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t v20 = sub_181268E88(a1 + 568, (unsigned __int8 *)v5, v11);
  if (v20)
  {
    uint64_t v27 = v20;
    if (v20 == v11)
    {
      if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 103) = 1;
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        uint64_t v36 = *(void *)(a1 + 344);
        if (v36)
        {
          sub_1812DC47C(v36, "out of memory", v21, v22, v23, v24, v25, v26, v38);
          for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }

      uint64_t v27 = v11;
      uint64_t v11 = 0LL;
      goto LABEL_24;
    }

    uint64_t v28 = *(void *)(v20 + 40);
    if (v28)
    {
      *(_DWORD *)(v28 + 48) |= 0x4000u;
      if (*(void *)(a1 + 816) || (int v29 = *(_DWORD *)(v28 + 44) - 1, (*(_DWORD *)(v28 + 44) = v29) == 0)) {
        sub_181311A80((void *)a1, (void *)v28);
      }
      *(void *)(v27 + 40) = 0LL;
    }

    int v30 = *(_DWORD *)(v27 + 16) - 1;
    *(_DWORD *)(v27 + 16) = v30;
    if (!v30)
    {
      int v31 = *(void (**)(void))(v27 + 32);
      if (v31) {
        v31(*(void *)(v27 + 24));
      }
LABEL_24:
      sub_1812F20DC((void *)a1, (void *)v27);
    }
  }

  return v11;
}

uint64_t sub_181310D84(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char **a6)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v24 = 0LL;
  uint64_t v25 = zSQL;
  unsigned int v26 = 200;
  uint64_t v27 = 0xE00000000LL;
  __int16 v28 = 0;
  qmemcpy(zSQL, "CREATE TABLE x", 14);
  if (!*(_BYTE *)(a2 + 11))
  {
    sqlite3_str_appendf((sqlite3_str *)&v24, "(%s", *(const char **)a2);
    goto LABEL_7;
  }

  uint64_t v10 = *(unsigned __int8 *)(a2 + 10);
  sqlite3_str_appendf((sqlite3_str *)&v24, "%c%s", 40LL, off_189B6E3D8[v10]);
  if (*(unsigned __int8 *)(a2 + 11) < 2u)
  {
LABEL_7:
    LOBYTE(v11) = 1;
    goto LABEL_8;
  }

  uint64_t v11 = 1LL;
  do
    sqlite3_str_appendf((sqlite3_str *)&v24, "%c%s", 44LL, (&off_189B6E3D8[v10])[v11++]);
  while (v11 < *(unsigned __int8 *)(a2 + 11));
LABEL_8:
  unsigned int v12 = *(unsigned __int8 *)(a2 + 9);
  uint64_t v13 = HIDWORD(v27);
  unsigned int v14 = v26;
  if ((v12 & 0x20) == 0)
  {
    char v15 = 0;
    if (v12 < 0x40) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }

  if (HIDWORD(v27) + 11 >= v26)
  {
    sub_1812D3A10((uint64_t)&v24, ",arg HIDDEN", 0xBu);
  }

  else
  {
    HIDWORD(v27) += 11;
    uint64_t v16 = &v25[v13];
    *(void *)uint64_t v16 = *(void *)",arg HIDDEN";
    *(_DWORD *)(v16 + 7) = 1313162308;
  }

  char v15 = 1;
  LODWORD(v13) = HIDWORD(v27);
  unsigned int v14 = v26;
  if (*(unsigned __int8 *)(a2 + 9) >= 0x40u)
  {
LABEL_15:
    if ((int)v13 + 14 >= v14)
    {
      sub_1812D3A10((uint64_t)&v24, ",schema HIDDEN", 0xEu);
    }

    else
    {
      HIDWORD(v27) = v13 + 14;
      qmemcpy(&v25[v13], ",schema HIDDEN", 14);
    }

    ++v15;
    LODWORD(v13) = HIDWORD(v27);
    unsigned int v14 = v26;
  }

uint64_t sub_181311088(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1895F89C0];
  *(void *)(a2 + 64) = 0x3FF0000000000000LL;
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    v17[0] = 0LL;
    int v3 = *(_DWORD *)a2;
    int v4 = 0;
    int v5 = (unsigned __int8 *)(v2 + 5);
    uint64_t v6 = (unsigned __int8 *)(v2 + 5);
    do
    {
      int v7 = *v6;
      v6 += 12;
      if (v7)
      {
        if (*(v5 - 1) == 2)
        {
          int v8 = *(_DWORD *)(v5 - 5);
          int v9 = *(unsigned __int8 *)(a1 + 41);
          BOOL v10 = __OFSUB__(v8, v9);
          int v11 = v8 - v9;
          if (v11 < 0 == v10) {
            *((_DWORD *)v17 + v11) = v4 + 1;
          }
        }
      }

      ++v4;
      int v5 = v6;
    }

    while (v3 != v4);
    if (LODWORD(v17[0]))
    {
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v12 + 8LL * (LODWORD(v17[0]) - 1);
      *(_DWORD *)uint64_t v13 = 1;
      *(_BYTE *)(v13 + 4) = 1;
      int v14 = HIDWORD(v17[0]);
      if (HIDWORD(v17[0]))
      {
        *(void *)(a2 + 64) = 0x4034000000000000LL;
        *(void *)(a2 + 72) = 20LL;
        uint64_t v15 = v12 + 8LL * (v14 - 1);
        *(_DWORD *)uint64_t v15 = 2;
        *(_BYTE *)(v15 + 4) = 1;
      }
    }

    else
    {
LABEL_12:
      *(void *)(a2 + 64) = 0x41DFFFFFFFC00000LL;
      *(void *)(a2 + 72) = 0x7FFFFFFFLL;
    }
  }

  return 0LL;
}

uint64_t sub_1813111A4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

double sub_181311250(uint64_t a1, uint64_t *a2)
{
  if (!sqlite3_initialize())
  {
    uint64_t v5 = sub_18126F0AC(40LL);
    if (v5)
    {
      *(void *)(v5 + 32) = 0LL;
      double result = 0.0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(void *)uint64_t v5 = a1;
      *a2 = v5;
    }
  }

  return result;
}

uint64_t sub_1813112A8(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_181311738(a1);
  if (v1)
  {
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_181311358(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v8 = (void *)*a1;
  sub_181311738((uint64_t)a1);
  if (a4 >= 1)
  {
    uint64_t v9 = a4;
    BOOL v10 = (char **)&a1[((*(_BYTE *)(v8[4] + 9LL) & 0x20) == 0) + 3];
    do
    {
      uint64_t v13 = *a5;
      if (*a5)
      {
        int v14 = *(unsigned __int16 *)(v13 + 20);
        if ((~v14 & 0x202) == 0 && *(_BYTE *)(v13 + 22) == 1)
        {
          int v11 = *(const char **)(v13 + 8);
          if (v11) {
            goto LABEL_4;
          }
        }

        else if ((v14 & 1) == 0)
        {
          int v11 = (const char *)sub_181303998((int *)v13, 1);
          if (v11)
          {
LABEL_4:
            uint64_t v12 = sqlite3_mprintf("%s", v11);
            char *v10 = v12;
            if (!v12) {
              return 7LL;
            }
          }
        }
      }

      ++v10;
      ++a5;
      --v9;
    }

    while (v9);
  }

  int v15 = *(_DWORD *)(v8[3] + 140LL);
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  unsigned int v31 = 0;
  int v32 = v15;
  unsigned int v33 = 0;
  __int16 v34 = 0;
  sub_1812D3A10((uint64_t)&v29, "PRAGMA ", 7u);
  if (a1[4]) {
    sqlite3_str_appendf((sqlite3_str *)&v29, "%Q.", a1[4]);
  }
  uint64_t v18 = (const char **)v8[4];
  uint64_t v19 = *v18;
  if (*v18)
  {
    int v20 = strlen(*v18);
    uint64_t v16 = v20 & 0x3FFFFFFF;
    if ((v20 & 0x3FFFFFFF) != 0)
    {
      uint64_t v21 = v33;
      if (v33 + v16 >= v31)
      {
        sub_1812D3A10((uint64_t)&v29, v19, v16);
        uint64_t v22 = a1[3];
        if (!v22) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }

      v33 += v16;
      memcpy(&v30[v21], v19, v20 & 0x3FFFFFFF);
    }
  }

  uint64_t v22 = a1[3];
  if (v22) {
LABEL_19:
  }
    sqlite3_str_appendf((sqlite3_str *)&v29, "=%Q", v16, v22);
LABEL_20:
  if (v30 && (v30[v33] = 0, v32) && (v34 & 0x400) == 0)
  {
    uint64_t v23 = (unsigned __int8 *)sub_1812F24E0(&v29);
    if (!v23) {
      return 7LL;
    }
  }

  else
  {
    uint64_t v23 = v30;
    if (!v30) {
      return 7LL;
    }
  }

  uint64_t v24 = sub_18126DFE0(v8[3], v23, 0xFFFFFFFFLL, 128LL, 0LL, a1 + 1, 0LL, v17);
  uint64_t v25 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v23);
    --qword_18C468B10;
    off_18C4653A8(v23);
    uint64_t v23 = (unsigned __int8 *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_32;
    }
    uint64_t v25 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
  }

  (*v25)(v23);
LABEL_32:
  if ((_DWORD)v24)
  {
    unsigned int v26 = sqlite3_errmsg((sqlite3 *)v8[3]);
    void v8[2] = sqlite3_mprintf("%s", v26);
  }

  else
  {
    uint64_t v27 = (sqlite3_stmt *)a1[1];
    ++a1[2];
    if (sqlite3_step(v27) == 100)
    {
      return 0LL;
    }

    else
    {
      uint64_t v24 = sqlite3_finalize((sqlite3_stmt *)a1[1]);
      a1[1] = 0LL;
      sub_181311738((uint64_t)a1);
    }
  }

  return v24;
}

uint64_t sub_181311644(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(v3 + 8) + 1LL;
  if (sqlite3_step(v2) == 100) {
    return 0LL;
  }
  uint64_t v5 = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(void *)(a1 + 8) = 0LL;
  sub_181311738(a1);
  return v5;
}

BOOL sub_18131169C(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0LL;
}

uint64_t sub_1813116AC(sqlite3_stmt **a1, sqlite3_context *a2, int iCol)
{
  int v4 = *((unsigned __int8 *)*a1 + 41);
  BOOL v5 = __OFSUB__(iCol, v4);
  int v6 = iCol - v4;
  if (v6 < 0 != v5)
  {
    int v7 = sqlite3_column_value(a1[1], iCol);
    sqlite3_result_value(a2, v7);
  }

  else if (a2)
  {
    sub_1812D7A8C((uint64_t)a2, (char *)a1[v6 + 3], -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  else
  {
    sub_1812CF36C(97498);
  }

  return 0LL;
}

uint64_t sub_181311728(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 16);
  return 0LL;
}

uint64_t sub_181311738(uint64_t a1)
{
  uint64_t result = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (*v4)(v3);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v3);
    uint64_t v3 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v4 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

void sub_181311884( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  int v11 = *(_DWORD *)(a2 + 64);
  unint64_t v12 = 8LL * (v11 + 2);
  if (v11 + 3 >= *(_DWORD *)(*(void *)a1 + 144LL)) {
    sub_1812DC47C(a1, "too many columns on %s", (uint64_t)a3, a4, a5, a6, a7, a8, *(void *)a2);
  }
  uint64_t v13 = *(void **)(a2 + 72);
  if (!v13)
  {
    uint64_t v13 = (void *)sub_1812F2264(v10, v12);
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  if (*(void *)(v10 + 496) <= (unint64_t)v13)
  {
    if (v12 >= 0x81) {
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v14 = *(int *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v14 + 1;
    v13[v14] = a3;
    v13[v14 + 1] = 0LL;
    *(void *)(a2 + 72) = v13;
    return;
  }

void *sub_181311990(void *result)
{
  uint64_t v1 = result;
  if (*((int *)result + 10) <= 2)
  {
    *((_DWORD *)result + 10) = 2;
LABEL_13:
    uint64_t v9 = (__int128 *)v1[4];
    uint64_t v10 = v1 + 87;
    if (v9 != (__int128 *)(v1 + 87))
    {
      __int128 v11 = *v9;
      __int128 v12 = v9[1];
      __int128 v13 = v9[3];
      *(_OWORD *)(v1 + 91) = v9[2];
      *(_OWORD *)(v1 + 93) = v13;
      _OWORD *v10 = v11;
      *(_OWORD *)(v1 + 89) = v12;
      if (v9) {
        uint64_t result = sub_1812F20DC(v1, v9);
      }
      v1[4] = v10;
    }

    return result;
  }

  uint64_t v2 = 0LL;
  uint64_t v3 = 2LL;
  int v4 = 2;
  do
  {
    uint64_t v5 = v1[4];
    int v6 = (void **)(v5 + v2 + 64);
    if (*(void *)(v5 + v2 + 72))
    {
      if (v3 > v4)
      {
        __int128 v7 = *(_OWORD *)(v5 + v2 + 80);
        int v8 = (_OWORD *)(v5 + 32LL * v4);
        *int v8 = *(_OWORD *)v6;
        v8[1] = v7;
      }

      ++v4;
    }

    else
    {
      if (*v6) {
        uint64_t result = sub_1812F20DC(v1, *v6);
      }
      *int v6 = 0LL;
    }

    ++v3;
    v2 += 32LL;
  }

  while (v3 < *((int *)v1 + 10));
  *((_DWORD *)v1 + 10) = v4;
  if (v4 <= 2) {
    goto LABEL_13;
  }
  return result;
}

void *sub_181311A80(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  while (v4)
  {
    uint64_t v6 = v4;
    uint64_t v4 = *(void *)(v4 + 40);
    if (!a1[102] && *((_BYTE *)a2 + 63) != 1) {
      sub_181268E88(*(void *)(v6 + 48) + 32LL, *(unsigned __int8 **)v6, 0LL);
    }
    sub_18130E1B0(a1, v6);
  }

  if (*((_BYTE *)a2 + 63) == 1)
  {
    if (!a1[102])
    {
      uint64_t v18 = (uint64_t *)a2[10];
      a2[10] = 0LL;
      if (v18)
      {
        do
        {
          uint64_t v20 = *v18;
          if (*v18)
          {
            uint64_t v19 = (uint64_t **)(v20 + 608);
            uint64_t v20 = *(void *)(v20 + 608);
          }

          else
          {
            uint64_t v19 = (uint64_t **)(a2 + 10);
          }

          uint64_t v21 = (uint64_t *)v18[5];
          const char *v19 = v18;
          v18[5] = v20;
          uint64_t v18 = v21;
        }

        while (v21);
      }
    }

    __int128 v12 = (void *)a2[9];
    if (v12)
    {
      int v13 = *((_DWORD *)a2 + 16);
      if (v13 < 1) {
        goto LABEL_39;
      }
      uint64_t v14 = (void *)*v12;
      if (v14)
      {
        sub_1812F20DC(a1, v14);
        int v13 = *((_DWORD *)a2 + 16);
      }

      if (v13 >= 3)
      {
        for (uint64_t i = 2LL; i < v13; ++i)
        {
          uint64_t v16 = *(void **)(a2[9] + 8 * i);
          if (v16)
          {
            sub_1812F20DC(a1, v16);
            int v13 = *((_DWORD *)a2 + 16);
          }
        }
      }

      __int128 v12 = (void *)a2[9];
      if (v12) {
LABEL_39:
      }
        sub_1812F20DC(a1, v12);
    }
  }

  else
  {
    if (!*((_BYTE *)a2 + 63))
    {
      uint64_t v5 = a2[9];
      if (!v5) {
        goto LABEL_40;
      }
      while (1)
      {
        if (!a1[102])
        {
          uint64_t v8 = *(void *)(v5 + 24);
          uint64_t v9 = *(void *)(v5 + 32);
          if (v9)
          {
            *(void *)(v9 + 24) = v8;
            uint64_t v10 = *(void *)(v5 + 24);
            if (!v10) {
              goto LABEL_10;
            }
          }

          else
          {
            if (v8) {
              uint64_t v11 = *(void *)(v5 + 24);
            }
            else {
              uint64_t v11 = v5;
            }
            sub_181268E88(a2[12] + 80LL, *(unsigned __int8 **)(v11 + 16), v8);
            uint64_t v10 = *(void *)(v5 + 24);
            if (!v10) {
              goto LABEL_10;
            }
          }

          *(void *)(v10 + 32) = *(void *)(v5 + 32);
        }

void *sub_181311D1C(void *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    int v5 = *(__int16 *)(a2 + 54);
    if (v5 >= 1)
    {
      int v6 = 0;
      do
      {
        if (*v2)
        {
          sub_1812F20DC(v4, (void *)*v2);
          LOWORD(v5) = *(_WORD *)(a2 + 54);
        }

        ++v6;
        v2 += 2;
      }

      while (v6 < (__int16)v5);
      uint64_t v2 = *(void **)(a2 + 8);
    }

    uint64_t result = sub_1813014B0(v4, v2);
    if (!*(_BYTE *)(a2 + 63))
    {
      uint64_t v7 = *(void **)(a2 + 80);
      if (v7) {
        uint64_t result = sub_181311F48(v4, v7);
      }
    }

    if (!v4[102])
    {
      *(void *)(a2 + 8) = 0LL;
      *(_WORD *)(a2 + 54) = 0;
      if (!*(_BYTE *)(a2 + 63)) {
        *(void *)(a2 + 80) = 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_181311DCC(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  *a1 = v2;
  uint64_t v3 = *v1;
  if (v3 >= 0xC0)
  {
    int v4 = byte_1813C6D06[(v3 - 192)];
    if ((*v2 & 0xC0) == 0x80)
    {
      int v5 = v1 + 2;
      do
      {
        *a1 = v5;
        LODWORD(v3) = *(v5 - 1) & 0x3F | (v4 << 6);
        char v6 = *v5++;
        int v4 = v3;
      }

      while ((v6 & 0xC0) == 0x80);
    }

    else
    {
      LODWORD(v3) = byte_1813C6D06[(v3 - 192)];
    }

    else {
      return v3;
    }
  }

  return v3;
}

uint64_t sub_181311E58(_BYTE *a1, int a2)
{
  if (a2 < 0) {
    unint64_t v2 = -1LL;
  }
  else {
    unint64_t v2 = (unint64_t)&a1[a2];
  }
  unsigned int v3 = *a1;
  uint64_t v4 = 0LL;
  if (*a1) {
    BOOL v5 = v2 > (unint64_t)a1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    do
    {
      if (v3 < 0xC0)
      {
        unsigned int v7 = *++a1;
        unsigned int v3 = v7;
      }

      else
      {
        do
        {
          unsigned int v9 = *++a1;
          unsigned int v3 = v9;
        }

        while ((v9 & 0xC0) == 0x80);
      }

      uint64_t v4 = (v4 + 1);
      if (v3) {
        BOOL v8 = (unint64_t)a1 >= v2;
      }
      else {
        BOOL v8 = 1;
      }
    }

    while (!v8);
  }

  return v4;
}

void *sub_181311EB0(void *a1, void *a2)
{
  do
  {
    BOOL v5 = (void *)a2[4];
    if (*a2) {
      sub_181311F48(a1, (void *)*a2);
    }
    char v6 = (unsigned __int8 *)a2[1];
    if (v6) {
      sub_181309110(a1, v6);
    }
    unsigned int v7 = (void *)a2[2];
    if (v7) {
      sub_181311F48(a1, v7);
    }
    BOOL v8 = (unsigned __int8 *)a2[3];
    if (v8) {
      sub_181309110(a1, v8);
    }
    unsigned int v9 = (void *)a2[6];
    if (v9) {
      sub_1812F20DC(a1, v9);
    }
    uint64_t result = sub_1812F20DC(a1, a2);
    a2 = v5;
  }

  while (v5);
  return result;
}

void *sub_181311F48(void *a1, void *a2)
{
  int v4 = *(_DWORD *)a2 + 1;
  uint64_t v5 = 1LL;
  do
  {
    if (a2[v5]) {
      sub_181309110(a1);
    }
    char v6 = (void *)a2[v5 + 1];
    if (v6) {
      sub_1813014B0(a1, v6);
    }
    --v4;
    v5 += 3LL;
  }

  while (v4 > 1);
  return sub_1813014B0(a1, a2);
}

uint64_t sub_181311FC8( uint64_t a1, uint64_t a2, uint64_t a3, char *__s, uint64_t k, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8 = __s;
  uint64_t v11 = *(void *)a1;
  if (a3) {
    goto LABEL_14;
  }
  if (!__s)
  {
    a3 = *(void *)(v11 + 16);
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  uint64_t v12 = *(void *)(v11 + 656);
  if (v12)
  {
    int v13 = *__s;
    if (*__s)
    {
      unsigned int v14 = 0;
      int v15 = __s + 1;
      do
      {
        unsigned int v14 = -1640531535 * (v14 + byte_1813C6343[v13]);
        int v16 = *v15++;
        int v13 = v16;
      }

      while (v16);
    }

    else
    {
      unsigned int v14 = 0;
    }

    unsigned int v55 = (_DWORD *)(v12 + 16LL * (v14 % *(_DWORD *)(v11 + 640)));
    uint64_t v17 = (uint64_t *)(v55 + 2);
    int v18 = *v55;
    if (v18)
    {
      while (1)
      {
LABEL_83:
        uint64_t v17 = (uint64_t *)*v17;
        int v56 = (_BYTE *)v17[3];
        for (uint64_t i = __s; ; ++i)
        {
          uint64_t v58 = *v56;
          uint64_t v59 = *i;
          if ((_DWORD)v58 != (_DWORD)v59) {
            break;
          }
          if (!*v56) {
            goto LABEL_12;
          }
LABEL_85:
          ++v56;
        }

        if (byte_1813C6343[v58] == byte_1813C6343[v59]) {
          goto LABEL_85;
        }
        if (!--v18)
        {
          uint64_t v17 = &qword_18C550660;
          goto LABEL_12;
        }
      }
    }
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v11 + 648);
    int v18 = *(_DWORD *)(v11 + 644);
    if (v18) {
      goto LABEL_83;
    }
  }

  uint64_t v17 = &qword_18C550660;
LABEL_12:
  uint64_t v19 = v17[2];
  if (v19)
  {
    uint64_t v20 = v19 + 40LL * a2;
    a3 = v20 - 40;
    if (v20 != 40)
    {
LABEL_14:
      if (*(void *)(a3 + 24)) {
        return a3;
      }
    }
  }

uint64_t sub_181312474(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v6 = a4;
  uint64_t v63 = 0LL;
  while (1)
  {
    int v10 = *a2;
    if (v10 != 174 && v10 != 181) {
      break;
    }
    a2 = (unsigned __int8 *)*((void *)a2 + 2);
  }

  if (v10 == 176) {
    int v10 = a2[2];
  }
  if (v10 == 173)
  {
    a2 = (unsigned __int8 *)*((void *)a2 + 2);
    int v10 = *a2;
    if ((v10 | 2) != 0x9B)
    {
      int v32 = sub_181312474(a1, a2, a3, a4, &v63);
      uint64_t v23 = 0LL;
      uint64_t v24 = v63;
      if (v32 || !v63) {
        goto LABEL_124;
      }
      sub_181308904(v63);
      __int16 v33 = *(_WORD *)(v24 + 20);
      if ((v33 & 8) != 0)
      {
        *(double *)uint64_t v24 = -*(double *)v24;
      }

      else if (*(void *)v24 == 0x8000000000000000LL)
      {
        *(void *)uint64_t v24 = 0x43E0000000000000LL;
        *(_WORD *)(v24 + 20) = v33 & 0xF240 | 8;
      }

      else
      {
        *(void *)uint64_t v24 = -*(void *)v24;
      }

      sub_1812AB614(v24, (char)v6, a3);
      goto LABEL_123;
    }

    unint64_t v21 = "-";
    int v22 = -1;
    goto LABEL_38;
  }

  if (v10 != 36)
  {
    unint64_t v21 = &byte_1813CEAEE;
    int v22 = 1;
LABEL_38:
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    switch(v10)
    {
      case 117:
      case 153:
      case 155:
        if (a1)
        {
          uint64_t v24 = sub_1812F2264(a1, 0x40uLL);
          if (!v24) {
            goto LABEL_100;
          }
        }

        else
        {
          uint64_t v24 = sub_18126F0AC(64LL);
          if (!v24) {
            goto LABEL_100;
          }
        }

        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(void *)(v24 + 24) = a1;
        if ((a2[5] & 8) != 0)
        {
          *(void *)uint64_t v24 = v22 * (uint64_t)*((int *)a2 + 2);
          *(_WORD *)(v24 + 20) = 4;
          if (v6 != 65) {
            goto LABEL_74;
          }
        }

        else
        {
          int v34 = (char *)sub_18127F588(a1, "%s%s", v25, v26, v27, v28, v29, v30, (char)v21);
          if (!v34) {
            goto LABEL_100;
          }
          sub_181269368(v24, v34, -1LL, 1u, sub_1812E1FD0);
          if (v6 != 65) {
            goto LABEL_74;
          }
        }

        if ((v10 & 0xFFFFFFFD) == 0x99)
        {
          __int16 v36 = *(_WORD *)(v24 + 20);
          if ((v36 & 4) != 0) {
            goto LABEL_75;
          }
          if ((v36 & 0x28) != 0)
          {
            if ((v36 & 0x20) != 0)
            {
LABEL_73:
              *(_WORD *)(v24 + 20) = v36 & 0xF240 | 4;
              goto LABEL_75;
            }

            double v37 = *(double *)v24;
            if (*(double *)v24 >= -9.22337204e18
              && v37 <= 9.22337204e18
              && v37 == (double)(uint64_t)v37
              && (unint64_t)((uint64_t)v37 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              *(void *)uint64_t v24 = (uint64_t)v37;
              goto LABEL_73;
            }
          }

          else if ((v36 & 2) != 0)
          {
            sub_1812DBB5C(v24, 1);
          }

uint64_t sub_181312C2C(_BYTE *a1, uint64_t a2)
{
  int v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = 0LL;
    int v6 = 0;
    unsigned int v7 = a1 + 1;
    int v8 = 67;
    while (1)
    {
      while (1)
      {
        int v6 = byte_1813C6343[v3] | (v6 << 8);
        if (v6 <= 1668050785) {
          break;
        }
        if (v6 != 1668050786 && v6 != 1952807028)
        {
LABEL_18:
          BOOL v10 = v6 == 1718382433 || v6 == 1919246700 || v6 == 1685026146;
          if (v10 && v8 == 67)
          {
            int v8 = 69;
          }

          else if ((v6 & 0xFFFFFF) == 0x696E74)
          {
            if (a2)
            {
              int v11 = 0;
              LOBYTE(v8) = 68;
              goto LABEL_44;
            }

            LOBYTE(v8) = 68;
            return (char)v8;
          }

          goto LABEL_4;
        }

        int v8 = 66;
LABEL_4:
        int v3 = *v7++;
        if (!v3) {
          goto LABEL_31;
        }
      }

      if (v6 != 1651273570)
      {
        if (v6 != 1667785074) {
          goto LABEL_18;
        }
        int v8 = 66;
        uint64_t v5 = v7;
        goto LABEL_4;
      }

      if (v8 != 69 && v8 != 67) {
        goto LABEL_18;
      }
      int v3 = *v7;
      if (v3 == 40) {
        uint64_t v5 = v7;
      }
      int v8 = 65;
      ++v7;
      if (!v3)
      {
LABEL_31:
        if (!a2) {
          return (char)v8;
        }
        int v14 = 0;
        if ((char)v8 > 66)
        {
          int v11 = 0;
        }

        else if (v5)
        {
          int v11 = *v5;
          if (*v5)
          {
            while ((unint64_t)v11 - 58 < 0xFFFFFFFFFFFFFFF6LL)
            {
              int v12 = *++v5;
              int v11 = v12;
              if (!v12) {
                goto LABEL_44;
              }
            }

            sub_18130DE18(v5, &v14);
            int v11 = v14 / 4;
          }
        }

        else
        {
          int v11 = 4;
        }

unint64_t sub_181312E18(uint64_t a1, unint64_t a2, int a3)
{
  if (a3 >= 0) {
    int v5 = a3;
  }
  else {
    int v5 = a3 + 1;
  }
  unint64_t result = sub_1812F2264(a1, ((v5 >> 1) + 1));
  if (result)
  {
    if (a3 < 2)
    {
      uint64_t v21 = 0LL;
LABEL_24:
      *(_BYTE *)(result + v21) = 0;
      return result;
    }

    unint64_t v7 = (a3 - 1);
    unint64_t v8 = 2LL;
    if (v7 > 2) {
      unint64_t v8 = (a3 - 1);
    }
    if (v8 < 0x3F) {
      goto LABEL_20;
    }
    uint64_t v9 = 2LL;
    if (v7 > 2) {
      uint64_t v9 = (a3 - 1);
    }
    unint64_t v10 = v9 - 1;
    if (result < (v10 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 && result + (v10 >> 1) + 1 > a2)
    {
LABEL_20:
      unint64_t v15 = 0LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      unint64_t v13 = ((v8 - 1) >> 1) + 1;
      uint64_t v14 = v13 & 0x7FFFFFFFFFFFFFE0LL;
      unint64_t v15 = 2 * (v13 & 0x7FFFFFFFFFFFFFE0LL);
      int v16 = (const char *)(a2 + 32);
      v17.i64[0] = 0x4040404040404040LL;
      v17.i64[1] = 0x4040404040404040LL;
      v18.i64[0] = 0x909090909090909LL;
      v18.i64[1] = 0x909090909090909LL;
      do
      {
        uint64_t v19 = v16 - 32;
        int8x16x2_t v23 = vld2q_s8(v19);
        int8x16x2_t v24 = vld2q_s8(v16);
        BOOL v20 = (int8x16_t *)(result + (v12 & 0x7FFFFFFFFFFFFFE0LL));
        int8x16_t *v20 = vsliq_n_s8( vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[1], v17))), v23.val[1]),  vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[0], v17))), v23.val[0]),  4uLL);
        v20[1] = vsliq_n_s8( vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[1], v17))), v24.val[1]),  vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[0], v17))), v24.val[0]),  4uLL);
        v12 += 32LL;
        v16 += 64;
      }

      while (v14 != v12);
      if (v13 == v14) {
        goto LABEL_23;
      }
    }

    int v22 = (_BYTE *)(result + (v15 >> 1));
    uint64_t v14 = ((v15 + 2) >> 1) - 1;
    do
    {
      *v22++ = ((((char)(2 * *(_BYTE *)(a2 + v15 + 1)) >> 7) & 0xF9) + *(_BYTE *)(a2 + v15 + 1)) & 0xF | (16 * ((((char)(2 * *(_BYTE *)(a2 + v15)) >> 7) & 0xF9) + *(_BYTE *)(a2 + v15)));
      v15 += 2LL;
      LODWORD(v14) = v14 + 1;
    }

    while (v15 < v7);
LABEL_23:
    uint64_t v21 = v14 & 0x7FFFFFFF;
    goto LABEL_24;
  }

  return result;
}

void sub_181312FB0( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = (_DWORD)a2 == 12;
  if ((_DWORD)a2 == 12) {
    unint64_t v10 = "ROLLBACK";
  }
  else {
    unint64_t v10 = "COMMIT";
  }
  uint64_t v11 = *a1;
  uint64_t v12 = *(uint64_t (**)(void, uint64_t, const char *, void, void, uint64_t))(*a1 + 528);
  if (v12 && !*(_BYTE *)(v11 + 197) && !*((_BYTE *)a1 + 302))
  {
    int v16 = v12(*(void *)(v11 + 536), 22LL, v10, 0LL, 0LL, a1[46]);
    if (v16 == 1)
    {
      int v17 = 23;
      int8x16_t v18 = "not authorized";
    }

    else
    {
      if ((v16 & 0xFFFFFFFD) == 0)
      {
        if (v16) {
          return;
        }
        goto LABEL_7;
      }

      int v17 = 1;
      int8x16_t v18 = "authorizer malfunction";
    }

    sub_1812DC47C((uint64_t)a1, v18, (uint64_t)v10, a4, a5, a6, a7, a8, v19);
    *((_DWORD *)a1 + 6) = v17;
    return;
  }

uint64_t *sub_1813130EC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(const void **)a3;
    if (*(void *)a3)
    {
      int v5 = result;
      size_t v6 = *(unsigned int *)(a3 + 8);
      unint64_t result = (uint64_t *)sub_1812F2264(*result, v6 + 1);
      if (result)
      {
        unint64_t v7 = result;
        memcpy(result, v3, v6);
        *((_BYTE *)v7 + v6) = 0;
        if ((char)byte_1813C6558[*(unsigned __int8 *)v7] < 0)
        {
          uint64_t v16 = 0LL;
          if (*(_BYTE *)v7 == 91) {
            int v17 = 93;
          }
          else {
            int v17 = *(unsigned __int8 *)v7;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v19 = i;
            int v20 = *((unsigned __int8 *)v7 + i);
            if (v20 == v17)
            {
              ++i;
              LOBYTE(v20) = v17;
            }

            *((_BYTE *)v7 + v16++) = v20;
          }

          *((_BYTE *)v7 + v16) = 0;
          uint64_t v15 = (uint64_t *)v5[2];
          if (!v15) {
            goto LABEL_16;
          }
        }

        else
        {
          uint64_t v15 = (uint64_t *)v5[2];
          if (!v15)
          {
LABEL_16:
            if (!v5[21] && (*(_BYTE *)(*v5 + 96) & 8) == 0) {
              *((_BYTE *)v5 + 35) = 1;
            }
            uint64_t v15 = (uint64_t *)sub_1812DC63C(v5, v8, v9, v10, v11, v12, v13, v14);
            if (!v15) {
              return sub_1812F20DC((void *)*v5, v7);
            }
          }
        }

        uint64_t v21 = *v5;
        int v22 = *(uint64_t (**)(void, uint64_t, char *, uint64_t *, void, uint64_t))(*v5 + 528);
        if (!v22 || *(_BYTE *)(v21 + 197) || *((_BYTE *)v5 + 302)) {
          return (uint64_t *)sub_1812B9B68(v15, 0LL, a2, 0LL, 0LL, (uint64_t)v7, 4294967290LL, v14);
        }
        int v23 = v22(*(void *)(v21 + 536), 32LL, off_189B6E5D0[a2], v7, 0LL, v5[46]);
        if (v23 == 1)
        {
          int v29 = 23;
          uint64_t v30 = "not authorized";
        }

        else
        {
          if ((v23 & 0xFFFFFFFD) == 0)
          {
            if (!v23) {
              return (uint64_t *)sub_1812B9B68(v15, 0LL, a2, 0LL, 0LL, (uint64_t)v7, 4294967290LL, v14);
            }
            return sub_1812F20DC((void *)*v5, v7);
          }

          int v29 = 1;
          uint64_t v30 = "authorizer malfunction";
        }

        sub_1812DC47C((uint64_t)v5, v30, v24, v25, v26, v27, v28, v14, v31);
        *((_DWORD *)v5 + 6) = v29;
        return sub_1812F20DC((void *)*v5, v7);
      }
    }
  }

  return result;
}

uint64_t sub_1813132BC(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1812F2264(*a1, 0x50uLL);
  uint64_t v15 = v8;
  if (v8)
  {
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_BYTE *)uint64_t v8 = a2;
    *(_WORD *)(v8 + 52) = -1;
    if (a4)
    {
      *(void *)(v8 + 24) = a4;
      *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a4 + 4) & 0x400208;
      int v16 = *(_DWORD *)(a4 + 40) + 1;
      *(_DWORD *)(v8 + 40) = v16;
      if (!a3)
      {
LABEL_12:
        if (*(_DWORD *)(*a1 + 148) < v16) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v9,  v10,  v11,  v12,  v13,  v14,  *(_DWORD *)(*a1 + 148));
        }
        return v15;
      }
    }

    else
    {
      int v16 = 1;
      *(_DWORD *)(v8 + 40) = 1;
      if (!a3) {
        goto LABEL_12;
      }
    }

    *(void *)(v8 + 16) = a3;
    *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a3 + 4) & 0x400208;
    int v17 = *(_DWORD *)(a3 + 40);
    if (v17 >= v16)
    {
      int v16 = v17 + 1;
      *(_DWORD *)(v8 + 40) = v17 + 1;
    }

    goto LABEL_12;
  }

  if (a3) {
    sub_181309110((void *)*a1, (unsigned __int8 *)a3);
  }
  if (a4) {
    sub_181309110((void *)*a1, (unsigned __int8 *)a4);
  }
  return v15;
}

uint64_t sub_1813133E8(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  size_t v8 = a4;
  uint64_t v9 = sub_1812F2264(*(void *)a1, a4 + 81LL);
  uint64_t v10 = v9;
  if (v9)
  {
    *(_BYTE *)uint64_t v9 = a2;
    *(_WORD *)(v9 + 1) = 0;
    *(_DWORD *)(v9 + 4) = 0x800000;
    *(void *)(v9 + 64) = 0LL;
    *(void *)(v9 + 72) = 0LL;
    *(void *)(v9 + 24) = 0LL;
    *(void *)(v9 + 32) = 0LL;
    *(_DWORD *)(v9 + 44) = 0;
    *(_DWORD *)(v9 + 48) = 0;
    uint64_t v11 = v9 + 80;
    *(void *)(v9 + 8) = v9 + 80;
    *(void *)(v9 + 16) = 0LL;
    memcpy((void *)(v9 + 80), a3, v8);
    *(_BYTE *)(v11 + v8) = 0;
    *(_DWORD *)(v10 + 56) = (_DWORD)a3 - *(_DWORD *)(a1 + 336);
    int v12 = *(unsigned __int8 *)(v10 + 80);
    if ((char)byte_1813C6558[*(unsigned __int8 *)(v10 + 80)] < 0)
    {
      uint64_t v13 = 0LL;
      if (v12 == 34) {
        int v14 = 75497600;
      }
      else {
        int v14 = 75497472;
      }
      *(_DWORD *)(v10 + 4) = v14;
      if (v12 == 91) {
        int v12 = 93;
      }
      for (int i = 1; ; ++i)
      {
        uint64_t v16 = i;
        int v17 = *(unsigned __int8 *)(v11 + i);
        if (v17 == v12)
        {
          ++i;
          LOBYTE(v17) = v12;
        }

        *(_BYTE *)(v11 + v13++) = v17;
      }

      *(_BYTE *)(v11 + v13) = 0;
    }

    *(_DWORD *)(v10 + 40) = 1;
    unsigned int v18 = *(unsigned __int8 *)(a1 + 302);
    if (v18 > 3 || v18 == 2)
    {
      if (*(void *)a1)
      {
        uint64_t v20 = sub_1812F2264(*(void *)a1, 0x20uLL);
        if (!v20) {
          return v10;
        }
      }

      else
      {
        uint64_t v20 = sub_18126F0AC(32LL);
        if (!v20) {
          return v10;
        }
      }

      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(void *)uint64_t v20 = v10;
      *(void *)(v20 + 8) = a3;
      *(void *)(v20 + 16) = a4;
      *(void *)(v20 + 24) = *(void *)(a1 + 408);
      *(void *)(a1 + 408) = v20;
    }
  }

  return v10;
}

uint64_t sub_181313558(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 4);
  if ((v1 & 0x4000800) != 0) {
    return result;
  }
  unint64_t v2 = *(_BYTE **)(result + 8);
  int v3 = "true";
  for (int i = v2; ; ++i)
  {
    uint64_t v5 = *i;
    uint64_t v6 = *(unsigned __int8 *)v3;
    if ((_DWORD)v5 != (_DWORD)v6) {
      break;
    }
    if (!*i)
    {
      int v7 = 0x10000000;
      goto LABEL_15;
    }

uint64_t sub_181313610(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 344);
  if (v2)
  {
    if (*(__int16 *)(v2 + 54) >= 1)
    {
      uint64_t v3 = *(void *)(v2 + 8) + 16LL * (*(unsigned __int16 *)(v2 + 54) - 1);
      *(_BYTE *)(v3 + 8) = *(_BYTE *)(v3 + 8) & 0xF0 | a2 & 0xF;
      *(_DWORD *)(v2 + 48) |= 0x800u;
      if ((*(_WORD *)(v3 + 14) & 8) != 0)
      {
        for (uint64_t i = *(void *)(v2 + 16); i; uint64_t i = *(void *)(i + 40))
        {
        }
      }
    }
  }

  return result;
}

void *sub_181313690(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 344);
  unint64_t result = *(void **)a1;
  if (v7
    && *(_BYTE *)(a1 + 302) != 1
    && (*(_WORD *)(*(void *)(*(void *)(result[4] + 32LL * *((unsigned __int8 *)result + 196) + 8) + 8LL) + 40LL) & 1) == 0)
  {
    uint64_t v10 = *(int **)(v7 + 32);
    if (v10)
    {
      int v11 = *v10;
      if (v10[1] > *v10)
      {
        int *v10 = v11 + 1;
        int v12 = &v10[6 * v11];
        *((void *)v12 + 2) = 0LL;
        *((void *)v12 + 3) = 0LL;
        *((void *)v12 + 1) = a2;
        goto LABEL_12;
      }

      uint64_t v13 = sub_18133E1F4((uint64_t)result, v10, a2);
    }

    else
    {
      uint64_t v13 = (int *)sub_18133E190(result, a2);
    }

    uint64_t v10 = v13;
LABEL_12:
    *(void *)(v7 + 32) = v10;
    if (*(_DWORD *)(a1 + 112)) {
      return (void *)sub_181314178(a1, v10, a1 + 104, 1);
    }
    int v14 = a4 - a3 + 1;
    do
    {
      int v15 = *(unsigned __int8 *)++a3;
      --v14;
    }

    while ((byte_1813C6558[v15] & 1) != 0);
    uint64_t v16 = (unsigned __int8 *)(a4 - 1);
    do
    {
      int v17 = *v16--;
      --v14;
    }

    while ((byte_1813C6558[v17] & 1) != 0);
    uint64_t v18 = a3;
    int v19 = v14;
    return (void *)sub_181314178(a1, v10, (uint64_t)&v18, 1);
  }

  if (a2) {
    return sub_181309110(result, a2);
  }
  return result;
}

uint64_t *sub_1813137D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[43];
  if (v2)
  {
    uint64_t v3 = result;
    if (*((unsigned __int8 *)result + 302) <= 1u)
    {
      if (a2)
      {
        int v4 = *(const void **)a2;
        if (*(void *)a2)
        {
          uint64_t v5 = *(__int16 *)(v2 + 54);
          uint64_t v6 = (void *)*result;
          size_t v7 = *(unsigned int *)(a2 + 8);
          unint64_t result = (uint64_t *)sub_1812F2264(*result, v7 + 1);
          if (result)
          {
            size_t v8 = (char *)result;
            memcpy(result, v4, v7);
            v8[v7] = 0;
            int v9 = *v8;
            if ((char)byte_1813C6558[*v8] < 0)
            {
              uint64_t v10 = 0LL;
              if (v9 == 91) {
                int v9 = 93;
              }
              for (int i = 1; ; ++i)
              {
                uint64_t v12 = i;
                int v13 = v8[i];
                if (v13 == v9)
                {
                  ++i;
                  LOBYTE(v13) = v9;
                }

                v8[v10++] = v13;
              }

              v8[v10] = 0;
            }

            uint64_t v14 = *(unsigned __int8 *)(*v3 + 100);
            int v15 = *(unsigned __int8 *)(*v3 + 197);
            uint64_t v16 = sub_18130D3EC(*v3, *(unsigned __int8 *)(*v3 + 100), v8, v15);
            uint64_t v21 = (uint64_t)v16;
            if (!v15)
            {
              if (v16 && v16[3]) {
                goto LABEL_19;
              }
              uint64_t v21 = sub_181311FC8((uint64_t)v3, v14, (uint64_t)v16, v8, v17, v18, v19, v20);
            }

            if (!v21) {
              return sub_1812F20DC(v6, v8);
            }
LABEL_19:
            uint64_t v22 = v5 - 1;
            sub_181322E40((uint64_t)v6, *(void *)(v2 + 8) + 16 * (v5 - 1), v8);
            for (uint64_t j = *(void *)(v2 + 16); j; uint64_t j = *(void *)(j + 40))
            {
              if ((_DWORD)v22 == **(__int16 **)(j + 8))
              {
                uint64_t v25 = *(void *)(v2 + 8);
                __int16 v26 = *(_WORD *)(v25 + 16 * v22 + 14);
                if ((v26 & 0x200) != 0)
                {
                  uint64_t v27 = *(void *)(v25 + 16 * v22) - 1LL;
                  if ((v26 & 4) != 0)
                  {
                  }

                  uint64_t v24 = v27 + 1;
                }

                else
                {
                  uint64_t v24 = 0LL;
                }

                **(void **)(j + 64) = v24;
              }
            }

            return sub_1812F20DC(v6, v8);
          }
        }
      }
    }
  }

  return result;
}

void sub_1813139A4( uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1[43];
  if (!v10) {
    goto LABEL_7;
  }
  if (*((_BYTE *)a1 + 302) != 1)
  {
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = *(__int16 *)(v10 + 54) - 1LL;
    uint64_t v14 = (uint64_t *)(v12 + 16 * v13);
    if (*((_WORD *)v14 + 6))
    {
LABEL_5:
      uint64_t v31 = *v14;
      int v11 = "error in generated column %s";
      goto LABEL_6;
    }

    if (!a3) {
      goto LABEL_46;
    }
    int v15 = *(_DWORD *)(a3 + 8);
    if (v15 != 6)
    {
      if (v15 != 7) {
        goto LABEL_5;
      }
      uint64_t v16 = *(unsigned __int8 **)a3;
      if (!*(void *)a3) {
        goto LABEL_5;
      }
      if ((*v16 & 0xDF) != 0x56)
      {
        int v19 = 118;
        goto LABEL_45;
      }

      uint64_t v17 = v16 + 1;
      if ((v16[1] & 0xDF) == 0x49)
      {
        uint64_t v17 = v16 + 2;
        if ((v16[2] & 0xDF) == 0x52)
        {
          uint64_t v17 = v16 + 3;
          if ((v16[3] & 0xDF) == 0x54)
          {
            uint64_t v17 = v16 + 4;
            if ((v16[4] & 0xDF) == 0x55)
            {
              uint64_t v17 = v16 + 5;
              if ((v16[5] & 0xDF) == 0x41)
              {
                int v18 = v16[6];
                v16 += 6;
                if ((v18 & 0xFFFFFFDF) == 0x4C)
                {
LABEL_46:
                  --*(_WORD *)(v10 + 56);
                  int v24 = 32;
                  goto LABEL_47;
                }

                int v19 = 108;
LABEL_45:
                if (v19 != byte_1813C6343[*v16]) {
                  goto LABEL_5;
                }
                goto LABEL_46;
              }

              int v19 = 97;
            }

            else
            {
              int v19 = 117;
            }
          }

          else
          {
            int v19 = 116;
          }
        }

        else
        {
          int v19 = 114;
        }
      }

      else
      {
        int v19 = 105;
      }

      uint64_t v16 = v17;
      goto LABEL_45;
    }

    uint64_t v20 = *(unsigned __int8 **)a3;
    if (!*(void *)a3) {
      goto LABEL_5;
    }
    if ((*v20 & 0xDF) != 0x53)
    {
      int v23 = 115;
      goto LABEL_41;
    }

    uint64_t v21 = v20 + 1;
    if ((v20[1] & 0xDF) == 0x54)
    {
      uint64_t v21 = v20 + 2;
      if ((v20[2] & 0xDF) == 0x4F)
      {
        uint64_t v21 = v20 + 3;
        if ((v20[3] & 0xDF) == 0x52)
        {
          uint64_t v21 = v20 + 4;
          if ((v20[4] & 0xDF) == 0x45)
          {
            int v22 = v20[5];
            v20 += 5;
            if ((v22 & 0xFFFFFFDF) == 0x44)
            {
LABEL_42:
              int v24 = 64;
LABEL_47:
              uint64_t v25 = v12 + 16 * v13;
              __int16 v27 = *(_WORD *)(v25 + 14);
              __int16 v26 = (_WORD *)(v25 + 14);
              __int16 v28 = v27 | v24;
              *__int16 v26 = v27 | v24;
              *(_DWORD *)(v10 + 48) |= v24;
              if ((v27 & 1) != 0)
              {
                *__int16 v26 = v28 | 1;
                if ((v28 & 0x60) != 0) {
                  sub_1812DC47C( (uint64_t)a1,  "generated columns cannot be part of the PRIMARY KEY",  a3,  a4,  a5,  a6,  a7,  a8,  v31);
                }
              }

              if (!a2) {
                goto LABEL_56;
              }
              int v29 = *a2;
              if (v29 == 59)
              {
                uint64_t v30 = (unsigned __int8 *)sub_1813132BC(a1, 174, (uint64_t)a2, 0LL);
                a2 = v30;
                if (!v30)
                {
LABEL_56:
                  sub_18131F8B4(a1, v10, v12 + 16 * v13, a2);
                  return;
                }

                int v29 = *v30;
              }

              if (v29 != 71) {
                a2[1] = *(_BYTE *)(v12 + 16 * v13 + 9);
              }
              goto LABEL_56;
            }

            int v23 = 100;
LABEL_41:
            if (v23 != byte_1813C6343[*v20]) {
              goto LABEL_5;
            }
            goto LABEL_42;
          }

          int v23 = 101;
        }

        else
        {
          int v23 = 114;
        }
      }

      else
      {
        int v23 = 111;
      }
    }

    else
    {
      int v23 = 116;
    }

    uint64_t v20 = v21;
    goto LABEL_41;
  }

  int v11 = "virtual tables cannot use computed columns";
LABEL_6:
  sub_1812DC47C((uint64_t)a1, v11, a3, a4, a5, a6, a7, a8, v31);
LABEL_7:
  if (a2) {
    sub_181309110((void *)*a1, a2);
  }
}

void sub_181313CC8( uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  uint64_t v11 = *(void *)a1;
  if (*(int *)(a1 + 296) < 1)
  {
    int v19 = (_OWORD *)a4;
    sub_1812778D4(a1, a3, a4, a7, 1LL, 0LL, a8, a8, v49);
    uint64_t v28 = *(void *)(a1 + 344);
    if (v28 && !*(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(v28 + 48) |= 0x200u;
      if (*((_DWORD *)v19 + 2))
      {
        if (*(_BYTE *)(*(void *)a1 + 197LL))
        {
          sub_1812DC47C(a1, "corrupt database", v22, v23, v24, v25, v26, v27, v50);
          int v19 = 0LL;
        }

        else if ((sub_18131EDC8(*(void *)a1, (uint64_t)a3) & 0x80000000) != 0)
        {
          sub_1812DC47C(a1, "unknown database %T", v29, v30, v31, v32, v33, v34, (char)a3);
        }
      }

      else
      {
        int v19 = a3;
      }

      uint64_t v35 = *(void *)(v28 + 96);
      if (v35)
      {
        __int16 v36 = (uint64_t *)(*(void *)(v11 + 32) + 24LL);
        int v37 = -1;
        do
        {
          uint64_t v38 = *v36;
          v36 += 4;
          ++v37;
        }

        while (v38 != v35);
      }

      else
      {
        int v37 = -32768;
      }

      uint64_t v39 = *(void *)a1;
      uint64_t v51 = a1;
      unsigned int v40 = (uint64_t *)(*(void *)(v39 + 32) + 32LL * v37);
      uint64_t v58 = *v40;
      uint64_t v41 = v40[3];
      int8x16_t v59 = "view";
      __int128 v60 = v19;
      BOOL v57 = v37 == 1;
      v52[0] = a1;
      v52[1] = sub_18132467C;
      v52[2] = sub_1813246F8;
      v52[3] = nullsub_8;
      int v53 = 0;
      __int16 v54 = 0;
      uint64_t v55 = &v51;
      uint64_t v56 = v41;
      if (!sub_181285228(v52, (void *)v8))
      {
        *(_DWORD *)(v8 + 4) |= 0x200000u;
        if (*(unsigned __int8 *)(a1 + 302) <= 1u)
        {
          uint64_t v42 = sub_18129F624(v11, v8, 1LL);
        }

        else
        {
          uint64_t v42 = v8;
          uint64_t v8 = 0LL;
        }

        *(void *)(v28 + 64) = v42;
        *(void *)(v28 + 32) = sub_18129CD4C(v11, a5, 1u);
        *(_BYTE *)(v28 + 63) = 2;
        if (!*(_BYTE *)(v11 + 103))
        {
          __int128 v61 = *(_OWORD *)(a1 + 280);
          if (*(_BYTE *)v61 == 59) {
            int v46 = 0;
          }
          else {
            int v46 = DWORD2(v61);
          }
          uint64_t v47 = *a2 + (int)(v61 + v46 - *a2);
          do
            int v48 = *(unsigned __int8 *)--v47;
          while ((byte_1813C6558[v48] & 1) != 0);
          *(void *)&__int128 v61 = v47;
          DWORD2(v61) = 1;
          sub_1812788C8(a1, 0LL, (uint64_t)&v61, 0LL, 0LL, v43, v44, v45, v50);
        }
      }
    }
  }

  else
  {
    sub_1812DC47C(a1, "parameters are not allowed in views", (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, v49);
  }

  if (v8) {
    sub_18128FDA0((void *)v11, v8, 1);
  }
  if (a5)
  {
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    v62[0] = a1;
    v62[1] = sub_181323638;
    int v12 = *(_DWORD *)a5;
    for (uint64_t i = 1LL; ; i += 3LL)
    {
      uint64_t v14 = a5[i];
      if (v14)
      {
        else {
          BOOL v15 = v12 <= 1;
        }
        if (v15)
        {
LABEL_17:
          uint64_t v16 = *(unsigned int *)a5;
          if ((int)v16 >= 1)
          {
            for (uint64_t j = 0LL; j != v16; ++j)
            {
              if ((*(_WORD *)((_BYTE *)&a5[3 * j + 3] + 1) & 3) == 0)
              {
                int v18 = *(void **)(a1 + 408);
                if (v18)
                {
                  while (*v18 != a5[3 * j + 2])
                  {
                    int v18 = (void *)v18[3];
                    if (!v18) {
                      goto LABEL_20;
                    }
                  }

                  void *v18 = 0LL;
                }
              }

uint64_t sub_181314024( void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *(void *)(a2 + 104) = a3;
    sub_181314064((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v10);
  }

  else
  {
    sub_18130928C(*a1, a3);
  }

  return a2;
}

void sub_181314064( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(void *)(a2 + 80))
  {
    uint64_t v11 = 0LL;
    int v12 = 1;
    uint64_t v13 = "ORDER BY";
    uint64_t v14 = a2;
    while (1)
    {
      int v15 = v12;
      uint64_t v16 = v11;
      uint64_t v11 = v14;
      *(void *)(v14 + 88) = v16;
      *(_DWORD *)(v14 + 4) |= 0x100u;
      uint64_t v14 = *(void *)(v14 + 80);
      if (!v14) {
        break;
      }
      if (*(void *)(v14 + 72)) {
        goto LABEL_7;
      }
      int v12 = v15 + 1;
      if (*(void *)(v14 + 96))
      {
        uint64_t v13 = "LIMIT";
LABEL_7:
        ++v15;
        sub_1812DC47C(a1, "%s clause should come after %s not before", a3, a4, a5, a6, a7, a8, (char)v13);
        break;
      }
    }

    if ((*(_BYTE *)(a2 + 5) & 4) == 0)
    {
      int v17 = *(_DWORD *)(*(void *)a1 + 152LL);
      if (v17 >= 1 && v15 > v17) {
        sub_1812DC47C(a1, "too many terms in compound SELECT", a3, a4, a5, a6, a7, a8, a9);
      }
    }
  }

uint64_t sub_181314178(uint64_t result, int *a2, uint64_t a3, int a4)
{
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a2 - 1LL;
    int v9 = *(const void **)a3;
    if (*(void *)a3)
    {
      size_t v10 = *(unsigned int *)(a3 + 8);
      unint64_t result = sub_1812F2264(*(void *)result, v10 + 1);
      uint64_t v11 = (_BYTE *)result;
      if (result)
      {
        unint64_t result = (uint64_t)memcpy((void *)result, v9, v10);
        v11[v10] = 0;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    int v12 = &a2[6 * v8];
    *((void *)v12 + 2) = v11;
    uint64_t v13 = (uint64_t *)(v12 + 4);
    if (a4)
    {
      if (v11 && (char)byte_1813C6558[*v11] < 0)
      {
        uint64_t v14 = 0LL;
        if (*v11 == 91) {
          int v15 = 93;
        }
        else {
          int v15 = *v11;
        }
        for (int i = 1; ; ++i)
        {
          uint64_t v17 = i;
          int v18 = v11[i];
          if (v18 == v15)
          {
            ++i;
            LOBYTE(v18) = v15;
          }

          v11[v14++] = v18;
        }

        v11[v14] = 0;
      }

      unsigned int v19 = *(unsigned __int8 *)(v7 + 302);
      if (v19 >= 2 && v19 != 3)
      {
        uint64_t v20 = *v13;
        if (*(void *)v7)
        {
          unint64_t result = sub_1812F2264(*(void *)v7, 0x20uLL);
          if (!result) {
            return result;
          }
        }

        else
        {
          unint64_t result = sub_18126F0AC(32LL);
          if (!result) {
            return result;
          }
        }

        *(_OWORD *)unint64_t result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        *(void *)unint64_t result = v20;
        *(_OWORD *)(result + 8) = *(_OWORD *)a3;
        *(void *)(result + 24) = *(void *)(v7 + 408);
        *(void *)(v7 + 408) = result;
      }
    }
  }

  return result;
}

uint64_t *sub_1813142D0(uint64_t *result, int *a2, unsigned __int8 *a3, int a4)
{
  if (a2)
  {
    uint64_t v5 = *a2 - 1LL;
    uint64_t v6 = &a2[6 * v5];
    uint64_t v8 = *((void *)v6 + 2);
    uint64_t v7 = (uint64_t **)(v6 + 4);
    if (!v8)
    {
      uint64_t v9 = *result;
      int v10 = a4 - (_DWORD)a3;
      do
      {
        uint64_t v11 = a3;
        int v12 = v10;
        int v13 = *a3++;
        --v10;
      }

      while ((byte_1813C6558[v13] & 1) != 0);
      uint64_t v14 = v12;
      uint64_t v15 = ((uint64_t)v12 << 32) + 0x100000000LL;
      uint64_t v16 = v14 - 2;
      do
      {
        char v17 = byte_1813C6558[a3[v16]];
        v15 -= 0x100000000LL;
        --v16;
      }

      while ((v17 & 1) != 0);
      size_t v18 = v15 >> 32;
      unint64_t result = (uint64_t *)sub_1812F2264(v9, (v15 >> 32) + 1);
      unsigned int v19 = result;
      if (result)
      {
        unint64_t result = (uint64_t *)memcpy(result, v11, v18);
        *((_BYTE *)v19 + v18) = 0;
      }

      uint64_t *v7 = v19;
      *(_WORD *)((char *)&a2[6 * v5 + 6] + 1) = *(_WORD *)((_BYTE *)&a2[6 * v5 + 6] + 1) & 0xFFFC | 1;
    }
  }

  return result;
}

uint64_t sub_1813143AC(uint64_t a1, int a2, char *__s)
{
  uint64_t v7 = __s;
  if (__s) {
    int v5 = strlen(__s) & 0x3FFFFFFF;
  }
  else {
    int v5 = 0;
  }
  int v8 = v5;
  return sub_18127F5B0(a1, a2, (uint64_t)&v7, 0);
}

unsigned int *sub_181314408(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if ((int)v1 >= 2)
    {
      char v2 = 0;
      unint64_t v3 = *result;
      do
      {
        char v4 = result[26 * (v3 - 2) + 17];
        LOBYTE(result[26 * (v3 - 1) + 17]) = v4;
        v2 |= v4;
      }

      while (v3-- > 2);
      *((_BYTE *)result + 68) = 0;
      if ((v2 & 0x10) != 0)
      {
        int v6 = 1;
        while (v1 >= 2)
        {
          if ((result[26 * --v1 + 17] & 0x10) != 0)
          {
            int v6 = v1 + 1;
            break;
          }
        }

        uint64_t v7 = v6 - 2;
        unint64_t v8 = (v7 & ~(v7 >> 63)) + 1;
        if (v8 < 2)
        {
          uint64_t v9 = v7;
LABEL_15:
          uint64_t v13 = v9 + 1;
          uint64_t v14 = &result[26 * v9 + 17];
          do
          {
            *(_BYTE *)v14 |= 0x40u;
            v14 -= 26;
            --v13;
          }

          while (v13 > 0);
          return result;
        }

        uint64_t v9 = v7 - (v8 & 0xFFFFFFFFFFFFFFFELL);
        int v10 = &result[26 * (int)v7 + 17];
        unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          char v12 = *((_BYTE *)v10 - 104) | 0x40;
          *(_BYTE *)v10 |= 0x40u;
          *((_BYTE *)v10 - 104) = v12;
          v10 -= 52;
          v11 -= 2LL;
        }

        while (v11);
        if (v8 != (v8 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_15;
        }
      }
    }
  }

  return result;
}

uint64_t *sub_181314514(uint64_t *result, int *a2, uint64_t a3)
{
  if (a2)
  {
    size_t v3 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v3)
    {
      uint64_t v5 = *a2 - 1LL;
      int v6 = *(const void **)a3;
      if ((_DWORD)v3 == 1)
      {
        size_t v3 = 1LL;
        if (!v6) {
          goto LABEL_19;
        }
      }

      else if (!v6)
      {
        uint64_t v7 = 0LL;
LABEL_18:
        *(void *)&a2[26 * v5 + 24] = v7;
        LOWORD(v3) = 2;
LABEL_19:
        *(_WORD *)((char *)&a2[26 * v5 + 17] + 1) |= v3;
        return result;
      }

      unint64_t result = (uint64_t *)sub_1812F2264(*result, v3 + 1);
      uint64_t v7 = result;
      if (result)
      {
        unint64_t result = (uint64_t *)memcpy(result, v6, v3);
        *((_BYTE *)v7 + v3) = 0;
        if ((char)byte_1813C6558[*(unsigned __int8 *)v7] < 0)
        {
          uint64_t v8 = 0LL;
          if (*(_BYTE *)v7 == 91) {
            int v9 = 93;
          }
          else {
            int v9 = *(unsigned __int8 *)v7;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v11 = i;
            int v12 = *((unsigned __int8 *)v7 + i);
            if (v12 == v9)
            {
              ++i;
              LOBYTE(v12) = v9;
            }

            *((_BYTE *)v7 + v8++) = v12;
          }

          *((_BYTE *)v7 + v8) = 0;
        }
      }

      goto LABEL_18;
    }
  }

  return result;
}

void *sub_181314624(void *result, int *a2, void *a3)
{
  if (a2)
  {
    size_t v3 = &a2[26 * *a2];
    *((void *)v3 - 1) = a3;
    *(_WORD *)((char *)v3 - 35) |= 4u;
  }

  else if (a3)
  {
    return sub_181311F48((void *)*result, a3);
  }

  return result;
}

uint64_t sub_18131465C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (*(_BYTE *)(a1 + 302) != 3)
  {
    uint64_t v6 = *(void *)a1;
    if (!v6)
    {
      uint64_t v7 = sub_18126F0AC(32LL);
      if (!v7) {
        return a2;
      }
      goto LABEL_4;
    }

    uint64_t v7 = sub_1812F2264(v6, 0x20uLL);
    if (v7)
    {
LABEL_4:
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(void *)uint64_t v7 = a2;
      *(_OWORD *)(v7 + 8) = *a3;
      *(void *)(v7 + 24) = *(void *)(a1 + 408);
      *(void *)(a1 + 408) = v7;
    }
  }

  return a2;
}

_BYTE *sub_1813146DC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  char v2 = *(const void **)a2;
  if (!*(void *)a2) {
    return 0LL;
  }
  size_t v3 = *(unsigned int *)(a2 + 8);
  char v4 = (_BYTE *)sub_1812F2264(a1, v3 + 1);
  uint64_t v5 = v4;
  if (v4)
  {
    memcpy(v4, v2, v3);
    v5[v3] = 0;
    if ((char)byte_1813C6558[*v5] < 0)
    {
      uint64_t v6 = 0LL;
      if (*v5 == 91) {
        int v7 = 93;
      }
      else {
        int v7 = *v5;
      }
      for (int i = 1; ; ++i)
      {
        uint64_t v9 = i;
        int v10 = v5[i];
        if (v10 == v7)
        {
          ++i;
          LOBYTE(v10) = v7;
        }

        v5[v6++] = v10;
      }

      v5[v6] = 0;
    }
  }

  return v5;
}

uint64_t sub_18131479C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  v23[3] = *MEMORY[0x1895F89C0];
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  while (2)
  {
    uint64_t v10 = v23[v8];
    if (!v10) {
      break;
    }
    uint64_t v11 = 0LL;
    int v12 = *(_DWORD *)(v10 + 8);
    while (1)
    {
      if (v12 != byte_1813CA3CC[3 * v11 + 1]) {
        goto LABEL_6;
      }
      if (v12 < 0) {
        break;
      }
      uint64_t v14 = *(_BYTE **)v10;
      if (*(void *)v10)
      {
        if (!v12) {
          goto LABEL_15;
        }
        uint64_t v15 = &aNaturaleftoute[byte_1813CA3CC[3 * v11]];
        int v16 = v12 + 1;
        while (1)
        {
          uint64_t v17 = *v14;
          if (!*v14) {
            break;
          }
          LODWORD(v17) = byte_1813C6343[v17];
          int v13 = byte_1813C6343[*v15];
          if ((_DWORD)v17 != v13) {
            goto LABEL_5;
          }
          ++v14;
          ++v15;
        }

        int v13 = byte_1813C6343[*v15];
LABEL_5:
        if ((_DWORD)v17 == v13) {
          goto LABEL_15;
        }
      }

int *sub_181314974(int *result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = *result - 1LL;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    uint64_t v5 = &result[6 * v3];
    *((_BYTE *)v5 + 24) = v4;
    uint64_t v6 = v5 + 6;
    if (a3 != -1)
    {
      *(_WORD *)((char *)&result[6 * v3 + 6] + 1) |= 0x20u;
      if (v4 != a3) {
        *uint64_t v6 = v4 | 2;
      }
    }
  }

  return result;
}

void sub_1813149C4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  if (*(void *)(a1 + 360)) {
    sub_1812DC47C(a1, "cannot use RETURNING in a trigger", a3, a4, a5, a6, a7, a8, v27);
  }
  *(_BYTE *)(a1 + 219) = 1;
  if (v10)
  {
    if (*(unsigned __int16 *)(v10 + 436) <= 0xC7u)
    {
      if (*(_DWORD *)(v10 + 432))
      {
        if (*(_BYTE *)(v10 + 103)) {
          goto LABEL_22;
        }
      }

      else
      {
        ++*(_DWORD *)(v10 + 452);
      }

      goto LABEL_17;
    }

    uint64_t v11 = *(void *)(v10 + 472);
    if (v11)
    {
      int v12 = (void *)(v10 + 472);
    }

    else
    {
      uint64_t v11 = *(void *)(v10 + 464);
      if (!v11)
      {
        ++*(_DWORD *)(v10 + 456);
LABEL_17:
        uint64_t v11 = sub_1812F2440(v10, 200LL);
        if (v11) {
          goto LABEL_18;
        }
LABEL_22:
        if (a2) {
          sub_181311F48((void *)v10, a2);
        }
        return;
      }

      int v12 = (void *)(v10 + 464);
    }

    *int v12 = *(void *)v11;
    ++*(_DWORD *)(v10 + 448);
  }

  else
  {
    uint64_t v11 = sub_18126F0AC(200LL);
    if (!v11) {
      goto LABEL_22;
    }
  }

int *sub_181314C3C( uint64_t *a1, int *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  if (a3)
  {
    uint64_t v11 = sub_18127FE00(a1, a2, *(unsigned int *)a3, 1LL, a5, a6, a7, a8);
    if (v11)
    {
      int v12 = v11;
      memcpy(v11 + 28, a3 + 1, 104LL * *(int *)a3);
      sub_1812F20DC((void *)*a1, a3);
      *((_BYTE *)v12 + 68) |= v12[43] & 0x40;
      return v12;
    }

    else
    {
      sub_18128FF4C((void *)*a1, a3);
    }
  }

  return v8;
}

int *sub_181314CD4( uint64_t *a1, int *a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a2;
  uint64_t v12 = *a1;
  if (a2)
  {
    int v13 = *a2;
    if (!a3) {
      goto LABEL_27;
    }
  }

  else
  {
    int v13 = 0;
    if (!a3) {
      goto LABEL_27;
    }
  }

  if (!a4) {
    goto LABEL_27;
  }
  int v14 = *a4;
  uint64_t v15 = *(unsigned int *)a3;
  if (v14 != 138)
  {
    if (v14 == 176) {
      int v14 = a4[2];
    }
    if (v14 == 138)
    {
      int v16 = (_DWORD **)(*((void *)a4 + 4) + 32LL);
LABEL_13:
      if ((_DWORD)v15 == **v16) {
        goto LABEL_14;
      }
LABEL_35:
      sub_1812DC47C((uint64_t)a1, "%d columns assigned %d values", (uint64_t)a3, v15, a5, a6, a7, a8, *(_DWORD *)a3);
      goto LABEL_36;
    }

    if (v14 == 177)
    {
      int v16 = (_DWORD **)(a4 + 32);
      goto LABEL_13;
    }

    if ((_DWORD)v15 != 1) {
      goto LABEL_35;
    }
  }

uint64_t sub_181314F3C( void *a1, void *a2, unsigned __int8 *a3, void *a4, unsigned __int8 *a5, void *a6)
{
  if (a1)
  {
    uint64_t v12 = sub_1812F2264((uint64_t)a1, 0x58uLL);
    if (v12)
    {
LABEL_3:
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(void *)(v12 + 80) = 0LL;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(void *)uint64_t v12 = a2;
      *(void *)(v12 + 8) = a3;
      *(void *)(v12 + 16) = a4;
      *(void *)(v12 + 24) = a5;
      *(_BYTE *)(v12 + 40) = a4 != 0LL;
      *(void *)(v12 + 32) = a6;
      return v12;
    }
  }

  else
  {
    uint64_t v12 = sub_18126F0AC(88LL);
    if (v12) {
      goto LABEL_3;
    }
  }

  if (a2) {
    sub_181311F48(a1, a2);
  }
  if (a3) {
    sub_181309110(a1, a3);
  }
  if (a4) {
    sub_181311F48(a1, a4);
  }
  if (a5) {
    sub_181309110(a1, a5);
  }
  if (a6) {
    sub_181311EB0(a1, a6);
  }
  return v12;
}

void *sub_181315030(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (!a2)
  {
    if (v5)
    {
      uint64_t v8 = (void *)sub_1812F2264(*(void *)a1, 0x18uLL);
      if (!v8) {
        return v8;
      }
    }

    else
    {
      uint64_t v8 = (void *)sub_18126F0AC(24LL);
      if (!v8) {
        return v8;
      }
    }

    *uint64_t v8 = 0LL;
    v8[1] = 0LL;
    void v8[2] = 0LL;
    goto LABEL_20;
  }

  unint64_t v7 = 16LL * *(int *)a2 + 24;
  if (*(void *)(v5 + 512) > (unint64_t)a2)
  {
    if (*(void *)(v5 + 496) <= (unint64_t)a2)
    {
      if (v7 < 0x81)
      {
LABEL_6:
        uint64_t v8 = a2;
LABEL_20:
        uint64_t v13 = *(int *)v8;
        *(_DWORD *)uint64_t v8 = v13 + 1;
        if (a3
          && (int v14 = *(const void **)a3) != 0LL
          && (size_t v15 = *(unsigned int *)(a3 + 8), (v16 = (_BYTE *)sub_1812F2264(v5, v15 + 1)) != 0LL))
        {
          uint64_t v17 = v16;
          memcpy(v16, v14, v15);
          v17[v15] = 0;
          if ((char)byte_1813C6558[*v17] < 0)
          {
            uint64_t v18 = 0LL;
            if (*v17 == 91) {
              int v19 = 93;
            }
            else {
              int v19 = *v17;
            }
            for (int i = 1; ; ++i)
            {
              uint64_t v21 = i;
              int v22 = v17[i];
              if (v22 == v19)
              {
                ++i;
                LOBYTE(v22) = v19;
              }

              v17[v18++] = v22;
            }

            v17[v18] = 0;
          }

          v8[2 * v13 + 1] = v17;
          unsigned int v23 = *(unsigned __int8 *)(a1 + 302);
          if (v23 > 3 || v23 == 2)
          {
            if (*(void *)a1) {
              uint64_t v25 = sub_1812F2264(*(void *)a1, 0x20uLL);
            }
            else {
              uint64_t v25 = sub_18126F0AC(32LL);
            }
            if (v25)
            {
              *(_OWORD *)uint64_t v25 = 0u;
              *(_OWORD *)(v25 + 16) = 0u;
              *(void *)uint64_t v25 = v17;
              *(_OWORD *)(v25 + 8) = *(_OWORD *)a3;
              *(void *)(v25 + 24) = *(void *)(a1 + 408);
              *(void *)(a1 + 408) = v25;
            }
          }
        }

        else
        {
          v8[2 * v13 + 1] = 0LL;
        }

        return v8;
      }
    }

    else if (*(void *)(v5 + 504) <= (unint64_t)a2 && v7 <= *(unsigned __int16 *)(v5 + 438))
    {
      goto LABEL_6;
    }
  }

  uint64_t v8 = (void *)sub_1812F2310(*(void *)a1, a2, v7);
  if (v8) {
    goto LABEL_20;
  }
  int v9 = *(_DWORD *)a2;
  if (*(int *)a2 >= 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 1LL;
    do
    {
      uint64_t v12 = (void *)a2[v11];
      if (v12)
      {
        sub_1812F20DC((void *)v5, v12);
        int v9 = *(_DWORD *)a2;
      }

      ++v10;
      v11 += 2LL;
    }

    while (v10 < v9);
  }

  sub_1813014B0((void *)v5, a2);
  return 0LL;
}

uint64_t sub_181315264(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v5 = sub_18127F5B0(*a1, 113, a3, a4);
    if (v5)
    {
      *(void *)(v5 + 16) = a2;
      *(_DWORD *)(v5 + 4) |= 0x2200u;
      return v5;
    }
  }

  return a2;
}

void sub_1813152B4( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    *(void *)(a2 + 72) = a3;
    int v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v9 | 0x1000000;
    *(void *)(a3 + 112) = a2;
  }

  else
  {
    sub_1813091C8(*a1, (void *)a3);
  }

uint64_t sub_1813152F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int8 *)a3;
  if (!a2) {
    return (uint64_t)v3;
  }
  if (a3)
  {
    uint64_t v7 = *a1;
    if (*a1) {
      uint64_t v8 = (void *)sub_1812F2264(*a1, 0x18uLL);
    }
    else {
      uint64_t v8 = (void *)sub_18126F0AC(24LL);
    }
    if (v8)
    {
      *uint64_t v8 = a1[24];
      a1[24] = (uint64_t)v8;
      v8[1] = a2;
      void v8[2] = sub_1812899C0;
      uint64_t v9 = *a1;
      if (*a1) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_181309110((void *)*a1, (unsigned __int8 *)a2);
      uint64_t v9 = *a1;
      if (*a1)
      {
LABEL_12:
        uint64_t v10 = (void *)sub_1812F2264(v9, 0x18uLL);
        if (v10)
        {
LABEL_13:
          void *v10 = a1[24];
          a1[24] = (uint64_t)v10;
          v10[1] = v3;
          v10[2] = sub_1812899C0;
LABEL_17:
          uint64_t v11 = "0";
          int v12 = 1;
          return sub_18127F5B0(v7, 155, (uint64_t)&v11, 0);
        }

void *sub_181315458(void *result, _BYTE *a2, uint64_t a3, char a4)
{
  if (a2 && a3 && *a2 == 121 && *((unsigned __int8 *)result + 302) <= 1u)
  {
    unint64_t result = (void *)*result;
    *(_BYTE *)a3 = a4;
    uint64_t v5 = *(unsigned __int8 **)(a3 + 24);
    if (v5) {
      unint64_t result = sub_181309110(result, v5);
    }
    *(void *)(a3 + 24) = 0LL;
  }

  return result;
}

void *sub_1813154AC(void *result, unsigned __int8 *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *((unsigned __int8 *)result + 302);
    if (v4 >= 2)
    {
      v5[0] = result;
      v5[1] = sub_181323638;
      void v5[2] = sub_1813236A4;
      memset(&v5[3], 0, 24);
      *((_BYTE *)result + 302) = 3;
      sub_18131C57C((uint64_t)v5, (uint64_t)a2);
      *((_BYTE *)v3 + 302) = v4;
    }

    return sub_181309110((void *)*v3, a2);
  }

  return result;
}

uint64_t sub_18131552C(uint64_t a1)
{
  uint64_t result = 1LL;
  unsigned __int16 v4 = 1;
  v3[1] = sub_18129C78C;
  v3[2] = sub_18131C570;
  int v5 = 0;
  if (a1)
  {
    sub_18131C57C((uint64_t)v3, a1);
    return v4;
  }

  return result;
}

void sub_181315578( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *(void *)(a2 + 32) = a3;
    *(_DWORD *)(a2 + 4) |= 0x401000u;
    sub_181315710(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  else if (a3)
  {
    sub_18128FDA0(*(void **)a1, a3, 1);
  }

_BYTE *sub_1813155B0( void **a1, int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a3 < 1)
  {
    int v14 = 0LL;
    goto LABEL_17;
  }

  uint64_t v11 = 0LL;
  int v12 = 0LL;
  uint64_t v13 = 2LL;
  while (1)
  {
    size_t v15 = *(unsigned __int8 **)&a3[v13];
    if (*v15 != 177) {
      break;
    }
    int v16 = **((_DWORD **)v15 + 4);
    if (v16 != a2) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v17 = sub_181280000(a1, *((void **)v15 + 4), 0LL, 0LL, 0LL, 0LL, 0LL, 512, 0LL);
    *((void *)v15 + 4) = 0LL;
    if (v17)
    {
      int v14 = v17;
      if (v12)
      {
        _BYTE *v17 = -121;
        *((void *)v17 + 10) = v12;
      }
    }

    else
    {
      int v14 = v12;
    }

    ++v11;
    v13 += 6LL;
    int v12 = v14;
    if (v11 >= *a3) {
      goto LABEL_14;
    }
  }

  LOBYTE(v16) = 1;
  if (a2 == 1) {
    goto LABEL_9;
  }
LABEL_13:
  sub_1812DC47C((uint64_t)a1, "IN(...) element has %d term%s - expected %d", (uint64_t)a3, a4, a5, a6, a7, a8, v16);
  int v14 = v12;
LABEL_14:
  if (v14 && *((void *)v14 + 10)) {
    *((_DWORD *)v14 + 1) |= 0x400u;
  }
LABEL_17:
  sub_181311F48(*a1, a3);
  return v14;
}

void sub_181315710( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1[12])
  {
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 40);
    }
    int v31 = v10;
    uint64_t v11 = *(void *)(a2 + 24);
    if (v11)
    {
      int v12 = *(_DWORD *)(v11 + 40);
      if (v12 > (int)v10)
      {
        int v31 = v12;
        LODWORD(v10) = v12;
      }
    }

    int v13 = *(_DWORD *)(a2 + 4);
    int v14 = *(void **)(a2 + 32);
    if ((v13 & 0x1000) != 0)
    {
      sub_18129F4C4(v14, &v31);
      LODWORD(v10) = v31;
      goto LABEL_27;
    }

    if (!v14) {
      goto LABEL_27;
    }
    uint64_t v15 = *(unsigned int *)v14;
    if ((int)v15 < 1)
    {
      int v21 = 0;
LABEL_26:
      *(_DWORD *)(a2 + 4) = v21 | v13;
LABEL_27:
      *(_DWORD *)(a2 + 40) = v10 + 1;
      if (*(_DWORD *)(*(void *)a1 + 148LL) <= (int)v10) {
        sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)a1 + 148LL));
      }
      return;
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = v14 + 1;
    int v18 = *(_DWORD *)v14;
    do
    {
      if (*v17 && *(_DWORD *)(*v17 + 40LL) > (int)v10)
      {
        LODWORD(v10) = *(_DWORD *)(*v17 + 40LL);
        int v18 = *(_DWORD *)v14;
      }

      ++v16;
      v17 += 3;
    }

    while (v16 < v18);
    if (v15 >= 2)
    {
      int v22 = 0;
      int v23 = 0;
      uint64_t v19 = v15 & 0xFFFFFFFE;
      unsigned int v24 = v14 + 4;
      uint64_t v25 = v19;
      do
      {
        uint64_t v26 = *(v24 - 3);
        uint64_t v27 = *v24;
        v24 += 6;
        v22 |= *(_DWORD *)(v26 + 4);
        v23 |= *(_DWORD *)(v27 + 4);
        v25 -= 2LL;
      }

      while (v25);
      int v20 = v23 | v22;
      if (v19 == v15) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v19 = 0LL;
      int v20 = 0;
    }

    uint64_t v28 = v15 - v19;
    uint64_t v29 = &v14[3 * v19 + 1];
    do
    {
      uint64_t v30 = *v29;
      v29 += 3;
      v20 |= *(_DWORD *)(v30 + 4);
      --v28;
    }

    while (v28);
LABEL_25:
    int v21 = v20 & 0x400208;
    goto LABEL_26;
  }

int *sub_181315894( uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  if (a2)
  {
    int v12 = a2;
    int v13 = *a2;
    if (a2[1] <= *a2)
    {
      int v12 = sub_18133E1F4(*a1, a2, 0LL);
      if (v9) {
        goto LABEL_9;
      }
    }

    else
    {
      *a2 = v13 + 1;
      int v14 = &a2[6 * v13];
      *((void *)v14 + 1) = 0LL;
      *((void *)v14 + 2) = 0LL;
      *((void *)v14 + 3) = 0LL;
      if ((_DWORD)a4) {
        goto LABEL_9;
      }
    }

void *sub_181315980( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  if (*(_BYTE *)(*(void *)a1 + 103LL)) {
    return sub_18128FF4C((void *)v9, (void *)a2);
  }
  if (!*(_BYTE *)(v9 + 197))
  {
    int v23 = *(_DWORD *)(v9 + 44);
    uint64_t v24 = *(void *)(*(void *)(v9 + 32) + 24LL);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v24 + 113);
    if ((*(_BYTE *)(v24 + 114) & 1) != 0 || (int v25 = sub_181276D34(v9, 0LL, (char **)(a1 + 8), 0LL, a5, a6, a7, a8)) == 0)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 40);
      if ((int)v26 < 2)
      {
LABEL_10:
        if ((v23 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(_BYTE *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_4;
      }

      while (1)
      {
        uint64_t v27 = v26 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32LL * (v26 - 1) + 24) + 114LL) & 1) == 0)
        {
          int v25 = sub_181276D34(v9, (v26 - 1), (char **)(a1 + 8), 0LL, a5, a6, a7, a8);
          if (v25) {
            break;
          }
        }

        uint64_t v26 = v27;
      }
    }

    *(_DWORD *)(a1 + 24) = v25;
    ++*(_DWORD *)(a1 + 48);
    return sub_18128FF4C((void *)v9, (void *)a2);
  }

uint64_t sub_181315DC4( uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v10 = (void **)result;
  uint64_t v11 = *(void *)(result + 16);
  if (v11) {
    goto LABEL_31;
  }
  if (!*(void *)(result + 168) && (*(_BYTE *)(*(void *)result + 96LL) & 8) == 0) {
    *(_BYTE *)(result + 35) = 1;
  }
  uint64_t result = sub_1812DC63C((uint64_t *)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v11 = result;
  if (result)
  {
LABEL_31:
    if (!*((_DWORD *)v10 + 12))
    {
      if (!v9
        || (uint64_t result = sub_18131EDC8((uint64_t)*v10, v9), v9 = result & ~((int)result >> 31), (_DWORD)v9 != 1))
      {
        if (!a3) {
          goto LABEL_11;
        }
        uint64_t v25 = 0LL;
        __int128 v24 = 0u;
        __int128 v23 = 0u;
        memset(v26, 0, sizeof(v26));
        v22[0] = v10;
        v22[1] = v26;
        DWORD2(v24) = 0x10000;
        uint64_t result = sub_1813205D4((uint64_t)v22, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)result)
        {
          uint64_t v15 = (*((_DWORD *)v10 + 14) + 1);
          *((_DWORD *)v10 + 14) = v15;
          if (v10[2])
          {
            uint64_t result = sub_18128CF10(v10, a3, v15, v12, v13, a6, a7, a8, v14);
            if ((_DWORD)result != (_DWORD)v15)
            {
              uint64_t v18 = result;
              uint64_t v19 = 80LL;
              if ((a3[6] & 0x40) == 0)
              {
                if (*a3 == 176) {
                  uint64_t v19 = 80LL;
                }
                else {
                  uint64_t v19 = 81LL;
                }
              }

              uint64_t result = (uint64_t)v10[2];
              int v20 = *(_DWORD *)(result + 144);
              if (*(_DWORD *)(result + 148) <= v20)
              {
                uint64_t result = sub_18131044C(result, v19, v18, v15, 0LL, a6, a7, a8);
              }

              else
              {
                *(_DWORD *)(result + 144) = v20 + 1;
                uint64_t v21 = *(void *)(result + 136) + 40LL * v20;
                *(_BYTE *)uint64_t v21 = v19;
                *(_WORD *)(v21 + 2) = 0;
                *(_DWORD *)(v21 + 4) = v18;
                *(_DWORD *)(v21 + 8) = v15;
                *(_BYTE *)(v21 + 1) = 0;
                *(void *)(v21 + 12) = 0LL;
                *(void *)(v21 + 28) = 0LL;
                *(void *)(v21 + 20) = 0LL;
                *(_DWORD *)(v21 + 36) = 0;
              }
            }
          }
        }

        else
        {
LABEL_11:
          uint64_t v15 = 0LL;
        }

        int v16 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v16)
        {
          uint64_t result = sub_18131044C(v11, 5LL, v9, v15, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v11 + 144) = v16 + 1;
          uint64_t v17 = *(void *)(v11 + 136) + 40LL * v16;
          *(_DWORD *)uint64_t v17 = 5;
          *(_DWORD *)(v17 + 4) = v9;
          *(_DWORD *)(v17 + 8) = v15;
          *(void *)(v17 + 12) = 0LL;
          *(void *)(v17 + 28) = 0LL;
          *(void *)(v17 + 20) = 0LL;
          *(_DWORD *)(v17 + 36) = 0;
        }

        *(_DWORD *)(v11 + 272) |= 1 << v9;
      }
    }
  }

  if (a3) {
    return (uint64_t)sub_181309110(*v10, a3);
  }
  return result;
}

void *sub_181315FF0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, unsigned int **a6, unsigned __int8 *a7, int a8)
{
  uint64_t v13 = *(void **)a1;
  int v20 = sub_18129F1C0(a1, 127, a2, a7, a8);
  if (!v20)
  {
    if (a3)
    {
      int v22 = *(_DWORD *)a3;
      if (*(int *)a3 >= 1)
      {
        uint64_t v23 = 0LL;
        uint64_t v24 = 1LL;
        do
        {
          uint64_t v25 = (void *)a3[v24];
          if (v25)
          {
            sub_1812F20DC(v13, v25);
            int v22 = *(_DWORD *)a3;
          }

          ++v23;
          v24 += 2LL;
        }

        while (v23 < v22);
      }

      sub_1813014B0(v13, a3);
    }

    if (a6) {
      sub_181311EB0(v13, a6);
    }
LABEL_21:
    if (!a4) {
      return v20;
    }
LABEL_22:
    sub_18128FDA0(v13, a4, 1);
    return v20;
  }

  if (*(unsigned __int8 *)(a1 + 302) <= 1u)
  {
    uint64_t v21 = sub_18129F624((uint64_t)v13, a4, 1LL);
  }

  else
  {
    uint64_t v21 = a4;
    a4 = 0LL;
  }

  v20[2] = v21;
  v20[7] = a3;
  v20[8] = a6;
  *((_BYTE *)v20 + 1) = a5;
  if (!a6) {
    goto LABEL_21;
  }
  uint64_t v26 = *a6;
  if (!*a6) {
    goto LABEL_21;
  }
  uint64_t v27 = *v26;
  uint64_t v28 = (_WORD *)((char *)v26 + 25);
  while ((*v28 & 0x20) == 0)
  {
    v28 += 12;
    if (!--v27) {
      goto LABEL_21;
    }
  }

  int v30 = *((unsigned __int8 *)v28 - 1);
  BOOL v31 = v30 == 3 || v30 == 0;
  int v32 = "LAST";
  if (v31) {
    int v32 = "FIRST";
  }
  sub_1812DC47C(a1, "unsupported use of NULLS %s", v14, v15, v16, v17, v18, v19, (char)v32);
  if (a4) {
    goto LABEL_22;
  }
  return v20;
}

void *sub_181316178(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v7 = *(void **)a1;
  int v8 = sub_18129F1C0(a1, 128, a2, a4, a5);
  if (v8)
  {
    if (*(unsigned __int8 *)(a1 + 302) <= 1u)
    {
      if (a3) {
        uint64_t v9 = sub_18129C928((uint64_t)v7, a3, 1LL, 0LL);
      }
      else {
        uint64_t v9 = 0LL;
      }
    }

    else
    {
      uint64_t v9 = (unsigned int *)a3;
      a3 = 0LL;
    }

    v8[5] = v9;
    *((_BYTE *)v8 + 1) = 11;
  }

  if (a3) {
    sub_181309110(v7, a3);
  }
  return v8;
}

uint64_t sub_181316210(void *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  if (a1)
  {
    uint64_t v8 = sub_1812F2264((uint64_t)a1, 0x60uLL);
    if (v8) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v8 = sub_18126F0AC(96LL);
    if (v8)
    {
LABEL_3:
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_WORD *)uint64_t v8 = 2954;
      int v9 = a4 - (_DWORD)a3;
      *(void *)(v8 + 16) = a2;
      do
      {
        uint64_t v10 = a3;
        int v11 = v9;
        int v12 = *a3++;
        --v9;
      }

      while ((byte_1813C6558[v12] & 1) != 0);
      uint64_t v13 = v11;
      uint64_t v14 = ((uint64_t)v11 << 32) + 0x100000000LL;
      uint64_t v15 = v13 - 2;
      do
      {
        char v16 = byte_1813C6558[a3[v15]];
        v14 -= 0x100000000LL;
        --v15;
      }

      while ((v16 & 1) != 0);
      size_t v17 = v14 >> 32;
      uint64_t v18 = (_BYTE *)sub_1812F2264((uint64_t)a1, (v14 >> 32) + 1);
      uint64_t v19 = v18;
      if (v18)
      {
        memcpy(v18, v10, v17);
        v19[v17] = 0;
        int v20 = *v19;
        if (*v19)
        {
          uint64_t v21 = v19 + 1;
          do
          {
            if ((byte_1813C6558[v20] & 1) != 0) {
              *(v21 - 1) = 32;
            }
            int v22 = *v21++;
            int v20 = v22;
          }

          while (v22);
        }
      }

      *(void *)(v8 + 72) = v19;
      return v8;
    }
  }

  if (a2) {
    sub_18128FDA0(a1, a2, 1);
  }
  return v8;
}

void *sub_181316350( uint64_t *a1, void *a2, uint64_t n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(_BYTE *)(*a1 + 103)) {
    return sub_18128FF4C((void *)v9, a2);
  }
  int v10 = n;
  if (!*(_BYTE *)(v9 + 197))
  {
    int v43 = *(_DWORD *)(v9 + 44);
    uint64_t v44 = *(void *)(*(void *)(v9 + 32) + 24LL);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v44 + 113);
    if ((*(_BYTE *)(v44 + 114) & 1) != 0 || (int v45 = sub_181276D34(v9, 0LL, (char **)a1 + 1, 0LL, a5, a6, a7, a8)) == 0)
    {
      uint64_t v46 = *(unsigned int *)(v9 + 40);
      if ((int)v46 < 2)
      {
LABEL_59:
        if ((v43 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(_BYTE *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_3;
      }

      while (1)
      {
        uint64_t v47 = v46 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32LL * (v46 - 1) + 24) + 114LL) & 1) == 0)
        {
          int v45 = sub_181276D34(v9, (v46 - 1), (char **)a1 + 1, 0LL, a5, a6, a7, a8);
          if (v45) {
            break;
          }
        }

        uint64_t v46 = v47;
      }
    }

    *((_DWORD *)a1 + 6) = v45;
    ++*((_DWORD *)a1 + 12);
    return sub_18128FF4C((void *)v9, a2);
  }

void sub_1813166FC( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = a3;
  uint64_t v12 = *a1;
  if (*(_BYTE *)(*a1 + 197)) {
    goto LABEL_2;
  }
  int v15 = *(_DWORD *)(v12 + 44);
  uint64_t v16 = *(void *)(*(void *)(v12 + 32) + 24LL);
  *(_BYTE *)(v12 + 100) = *(_BYTE *)(v16 + 113);
  if ((*(_BYTE *)(v16 + 114) & 1) == 0)
  {
    int v17 = sub_181276D34(v12, 0LL, (char **)a1 + 1, 0LL, a5, a6, a7, a8);
    if (v17)
    {
LABEL_19:
      *((_DWORD *)a1 + 6) = v17;
      ++*((_DWORD *)a1 + 12);
      return;
    }
  }

  uint64_t v18 = *(unsigned int *)(v12 + 40);
  if ((int)v18 >= 2)
  {
    do
    {
      uint64_t v19 = v18 - 1;
      if ((*(_WORD *)(*(void *)(*(void *)(v12 + 32) + 32LL * (v18 - 1) + 24) + 114LL) & 1) == 0)
      {
        int v17 = sub_181276D34(v12, (v18 - 1), (char **)a1 + 1, 0LL, a5, a6, a7, a8);
        if (v17) {
          goto LABEL_19;
        }
      }

      uint64_t v18 = v19;
    }

    while ((unint64_t)(v19 + 1) > 2);
  }

  if ((v15 & 1) == 0) {
    *(_DWORD *)(v12 + 44) &= ~1u;
  }
  if (*(_BYTE *)(v12 + 111)) {
    *(_DWORD *)(v12 + 44) |= 0x10u;
  }
LABEL_2:
  if (!a2)
  {
    uint64_t v39 = *a1;
    int v40 = *(_DWORD *)(*a1 + 40);
    if (v40 >= 1)
    {
      int v41 = 0;
      uint64_t v42 = *(void *)(v39 + 32);
      do
      {
        int v43 = *(void **)(*(void *)(v42 + 24) + 16LL);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43[2];
            if (*(_BYTE *)(v44 + 63) != 1)
            {
              for (uint64_t i = *(void *)(v44 + 16); i; uint64_t i = *(void *)(i + 40))
              {
                uint64_t v46 = *(void *)(v44 + 96);
                if (v46)
                {
                  uint64_t v47 = (uint64_t *)(*(void *)(*a1 + 32) + 24LL);
                  int v48 = -1;
                  do
                  {
                    uint64_t v49 = *v47;
                    v47 += 4;
                    ++v48;
                  }

                  while (v49 != v46);
                }

                else
                {
                  int v48 = -32768;
                }

                if (a1[21]) {
                  uint64_t v50 = a1[21];
                }
                else {
                  uint64_t v50 = (uint64_t)a1;
                }
                int v51 = *(_DWORD *)(v50 + 124);
                int v52 = 1 << v48;
                if ((v51 & (1 << v48)) == 0)
                {
                  *(_DWORD *)(v50 + 124) = v51 | v52;
                  if (v48 == 1) {
                    sub_1812FA2F0(v50);
                  }
                }

                *(_DWORD *)(v50 + 120) |= v52;
                sub_181323D98((uint64_t)a1, i, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
              }
            }

            int v43 = (void *)*v43;
          }

          while (v43);
          int v40 = *(_DWORD *)(v39 + 40);
        }

        ++v41;
        v42 += 32LL;
      }

      while (v41 < v40);
    }

    return;
  }

  if (v9 && *(void *)v9)
  {
LABEL_5:
    uint64_t v13 = *a1;
    if (*(_DWORD *)(v9 + 8))
    {
      if (*(_BYTE *)(v13 + 197))
      {
        unsigned int v14 = "corrupt database";
        goto LABEL_8;
      }

      unsigned int v53 = sub_18131EDC8(v13, a2);
      if ((v53 & 0x80000000) != 0)
      {
        sub_1812DC47C((uint64_t)a1, "unknown database %T", v54, v55, v56, v57, v58, v59, a2);
        return;
      }
    }

    else
    {
      unsigned int v53 = *(unsigned __int8 *)(v13 + 196);
      uint64_t v9 = a2;
    }

    uint64_t v60 = *(const void **)v9;
    if (!*(void *)v9) {
      return;
    }
    size_t v61 = *(unsigned int *)(v9 + 8);
    uint64_t v62 = (char *)sub_1812F2264(v12, v61 + 1);
    if (!v62) {
      return;
    }
    uint64_t v23 = v62;
    memcpy(v62, v60, v61);
    v23[v61] = 0;
    int v63 = *v23;
    if ((char)byte_1813C6558[*v23] < 0)
    {
      uint64_t v64 = 0LL;
      if (v63 == 91) {
        int v63 = 93;
      }
      for (int j = 1; ; ++j)
      {
        uint64_t v66 = j;
        int v67 = v23[j];
        if (v67 == v63)
        {
          ++j;
          LOBYTE(v67) = v63;
        }

        v23[v64++] = v67;
      }

      v23[v64] = 0;
    }

    int v68 = *(unsigned __int8 **)(*(void *)(v12 + 32) + 32LL * v53);
    uint64_t v69 = sub_1812E2C64(v12, v23, v68);
    if (v69)
    {
      uint64_t v75 = v69;
      if (*(_BYTE *)(v69 + 63) != 1)
      {
        for (uint64_t k = *(void *)(v69 + 16); k; uint64_t k = *(void *)(k + 40))
        {
          uint64_t v77 = *(void *)(v75 + 96);
          if (v77)
          {
            char v78 = (uint64_t *)(*(void *)(*a1 + 32) + 24LL);
            int v79 = -1;
            do
            {
              uint64_t v80 = *v78;
              v78 += 4;
              ++v79;
            }

            while (v80 != v77);
          }

          else
          {
            int v79 = -32768;
          }

          if (a1[21]) {
            uint64_t v81 = a1[21];
          }
          else {
            uint64_t v81 = (uint64_t)a1;
          }
          int v82 = *(_DWORD *)(v81 + 124);
          int v83 = 1 << v79;
          if ((v82 & (1 << v79)) == 0)
          {
            *(_DWORD *)(v81 + 124) = v82 | v83;
            if (v79 == 1) {
              sub_1812FA2F0(v81);
            }
          }

          *(_DWORD *)(v81 + 120) |= v83;
          sub_181323D98((uint64_t)a1, k, 0xFFFFFFFFLL, v70, v71, v72, v73, v74);
        }
      }

      uint64_t v104 = (void *)v12;
      goto LABEL_123;
    }

    uint64_t v110 = sub_18130D838(v12, (unsigned __int8 *)v23, v68);
    sub_1812F20DC((void *)v12, v23);
    if (v110)
    {
      sub_18131EC34((uint64_t)a1, 0, v53);
      sub_181323D98((uint64_t)a1, v110, 0xFFFFFFFFLL, v111, v112, v113, v114, v115);
      return;
    }

    unsigned int v14 = "unable to identify the object to be reindexed";
LABEL_8:
    sub_1812DC47C((uint64_t)a1, v14, a3, a4, a5, a6, a7, a8, a9);
    return;
  }

  int v20 = *(const void **)a2;
  if (!*(void *)a2) {
    return;
  }
  size_t v21 = *(unsigned int *)(a2 + 8);
  uint64_t v22 = (char *)sub_1812F2264(*a1, v21 + 1);
  if (!v22) {
    return;
  }
  uint64_t v23 = v22;
  memcpy(v22, v20, v21);
  v23[v21] = 0;
  int v29 = *v23;
  if ((char)byte_1813C6558[*v23] < 0)
  {
    uint64_t v30 = 0LL;
    if (v29 == 91) {
      int v29 = 93;
    }
    for (int m = 1; ; ++m)
    {
      uint64_t v32 = m;
      int v33 = v23[m];
      if (v33 == v29)
      {
        ++m;
        LOBYTE(v33) = v29;
      }

      v23[v30++] = v33;
    }

    v23[v30] = 0;
  }

  uint64_t v34 = *(void *)(v12 + 656);
  if (!v34)
  {
    uint64_t v84 = (uint64_t *)(v12 + 648);
    int v85 = *(_DWORD *)(v12 + 644);
    if (v85) {
      goto LABEL_126;
    }
LABEL_86:
    uint64_t v84 = &qword_18C550660;
    goto LABEL_87;
  }

  int v35 = *v23;
  if (*v23)
  {
    unsigned int v36 = 0;
    int v37 = (unsigned __int8 *)(v23 + 1);
    do
    {
      unsigned int v36 = -1640531535 * (v36 + byte_1813C6343[v35]);
      int v38 = *v37++;
      int v35 = v38;
    }

    while (v38);
  }

  else
  {
    unsigned int v36 = 0;
  }

  char v105 = (_DWORD *)(v34 + 16LL * (v36 % *(_DWORD *)(v12 + 640)));
  uint64_t v84 = (uint64_t *)(v105 + 2);
  int v85 = *v105;
  if (!v85) {
    goto LABEL_86;
  }
  do
  {
LABEL_126:
    uint64_t v84 = (uint64_t *)*v84;
    char v106 = (_BYTE *)v84[3];
    for (uint64_t n = v23; ; ++n)
    {
      uint64_t v108 = *v106;
      uint64_t v109 = *n;
      if ((_DWORD)v108 != (_DWORD)v109) {
        break;
      }
      if (!*v106) {
        goto LABEL_87;
      }
LABEL_128:
      ++v106;
    }

    if (byte_1813C6343[v108] == byte_1813C6343[v109]) {
      goto LABEL_128;
    }
    --v85;
  }

  while (v85);
  uint64_t v84 = &qword_18C550660;
LABEL_87:
  if (!v84[2])
  {
    sub_1812F20DC((void *)v12, v23);
    goto LABEL_5;
  }

  uint64_t v116 = (void *)v12;
  uint64_t v117 = *a1;
  int v86 = *(_DWORD *)(*a1 + 40);
  if (v86 < 1) {
    goto LABEL_120;
  }
  int v87 = 0;
  uint64_t v88 = *(void *)(v117 + 32);
  while (2)
  {
    int v89 = *(void **)(*(void *)(v88 + 24) + 16LL);
    if (!v89) {
      goto LABEL_91;
    }
    int v118 = v87;
    while (2)
    {
      uint64_t v90 = v89[2];
      if (*(_BYTE *)(v90 + 63) == 1) {
        goto LABEL_94;
      }
      uint64_t v91 = *(void *)(v90 + 16);
      if (!v91) {
        goto LABEL_94;
      }
      while (2)
      {
        if (!*(_WORD *)(v91 + 96)) {
          goto LABEL_99;
        }
        uint64_t v92 = 0LL;
        while (*(__int16 *)(*(void *)(v91 + 8) + 2 * v92) < 0)
        {
LABEL_102:
        }

        unsigned int v93 = *(_BYTE **)(*(void *)(v91 + 64) + 8 * v92);
        unsigned __int16 v94 = v23;
        while (2)
        {
          uint64_t v95 = *v93;
          uint64_t v96 = *v94;
          if ((_DWORD)v95 != (_DWORD)v96)
          {
            if (byte_1813C6343[v95] != byte_1813C6343[v96]) {
              goto LABEL_102;
            }
            goto LABEL_106;
          }

          if (*v93)
          {
LABEL_106:
            ++v93;
            ++v94;
            continue;
          }

          break;
        }

        uint64_t v97 = *(void *)(v90 + 96);
        if (v97)
        {
          char v98 = (uint64_t *)(*(void *)(*a1 + 32) + 24LL);
          int v99 = -1;
          do
          {
            uint64_t v100 = *v98;
            v98 += 4;
            ++v99;
          }

          while (v100 != v97);
        }

        else
        {
          int v99 = -32768;
        }

        if (a1[21]) {
          uint64_t v101 = a1[21];
        }
        else {
          uint64_t v101 = (uint64_t)a1;
        }
        int v102 = *(_DWORD *)(v101 + 124);
        int v103 = 1 << v99;
        if ((v102 & (1 << v99)) == 0)
        {
          *(_DWORD *)(v101 + 124) = v102 | v103;
          if (v99 == 1) {
            sub_1812FA2F0(v101);
          }
        }

        *(_DWORD *)(v101 + 120) |= v103;
        sub_181323D98((uint64_t)a1, v91, 0xFFFFFFFFLL, v24, v25, v26, v27, v28);
LABEL_99:
        uint64_t v91 = *(void *)(v91 + 40);
        if (v91) {
          continue;
        }
        break;
      }

LABEL_94:
      int v89 = (void *)*v89;
      if (v89) {
        continue;
      }
      break;
    }

    int v86 = *(_DWORD *)(v117 + 40);
    int v87 = v118;
LABEL_91:
    ++v87;
    v88 += 32LL;
    if (v87 < v86) {
      continue;
    }
    break;
  }

void sub_181316E68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v11 = *(void *)a1;
  if (!*(_BYTE *)(*(void *)a1 + 197LL))
  {
    int v12 = *(_DWORD *)(v11 + 44);
    uint64_t v13 = *(void *)(*(void *)(v11 + 32) + 24LL);
    *(_BYTE *)(v11 + 100) = *(_BYTE *)(v13 + 113);
    if ((*(_BYTE *)(v13 + 114) & 1) != 0
      || (int v14 = sub_181276D34(v11, 0LL, (char **)(a1 + 8), 0LL, a5, a6, a7, a8)) == 0)
    {
      uint64_t v15 = *(unsigned int *)(v11 + 40);
      if ((int)v15 < 2)
      {
LABEL_9:
        if ((v12 & 1) == 0) {
          *(_DWORD *)(v11 + 44) &= ~1u;
        }
        if (*(_BYTE *)(v11 + 111)) {
          *(_DWORD *)(v11 + 44) |= 0x10u;
        }
        goto LABEL_2;
      }

      while (1)
      {
        uint64_t v16 = v15 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v11 + 32) + 32LL * (v15 - 1) + 24) + 114LL) & 1) == 0)
        {
          int v14 = sub_181276D34(v11, (v15 - 1), (char **)(a1 + 8), 0LL, a5, a6, a7, a8);
          if (v14) {
            break;
          }
        }

        uint64_t v15 = v16;
      }
    }

    *(_DWORD *)(a1 + 24) = v14;
    ++*(_DWORD *)(a1 + 48);
    return;
  }

void *sub_181317318( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)a1;
  if (*(_BYTE *)(*(void *)a1 + 103LL)) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = v9[4];
    uint64_t v15 = (uint64_t *)(v14 + 24);
    uint64_t v16 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      v16 += 0x100000000LL;
    }

    while (v17 != v13);
    uint64_t v18 = (_BYTE **)(v14 + (v16 >> 27));
  }

  else
  {
    uint64_t v18 = (_BYTE **)(a2 + 16);
  }

  uint64_t v19 = sub_18129EAF4(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  int v20 = (_BYTE **)v19;
  uint64_t v21 = *(void *)(v19 + 96);
  if (v21)
  {
    size_t v22 = (uint64_t *)(*(void *)(*(void *)a1 + 32LL) + 24LL);
    LODWORD(v23) = -1;
    do
    {
      uint64_t v24 = *v22;
      v22 += 4;
      uint64_t v23 = (v23 + 1);
    }

    while (v24 != v21);
    if (!a3) {
      return sub_18128FF4C(v9, (void *)a2);
    }
  }

  else
  {
    uint64_t v23 = 4294934528LL;
    if (!a3) {
      return sub_18128FF4C(v9, (void *)a2);
    }
  }

  int v25 = *(const void **)a3;
  if (!*(void *)a3) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  uint64_t v26 = *(unsigned __int8 **)(v9[4] + 32LL * (int)v23);
  size_t v27 = *(unsigned int *)(a3 + 8);
  uint64_t v28 = (char *)sub_1812F2264((uint64_t)v9, v27 + 1);
  if (!v28) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  int v29 = v28;
  memcpy(v28, v25, v27);
  v29[v27] = 0;
  if ((char)byte_1813C6558[*v29] < 0)
  {
    uint64_t v30 = 0LL;
    if (*v29 == 91) {
      int v31 = 93;
    }
    else {
      int v31 = *v29;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v33 = i;
      int v34 = v29[i];
      if (v34 == v31)
      {
        ++i;
        LOBYTE(v34) = v31;
      }

      v29[v30++] = v34;
    }

    v29[v30] = 0;
  }

  if (sub_1812E2C64((uint64_t)v9, v29, v26)
    || sub_18130D838((uint64_t)v9, (unsigned __int8 *)v29, v26)
    || sub_18131EF58((uint64_t)v9, (uint64_t)v20, v29))
  {
    sub_1812DC47C( a1,  "there is already another table or index with this name: %s",  v35,  v36,  v37,  v38,  v39,  v40,  (char)v29);
  }

  else
  {
    if (sub_18134A054(a1, v20, v35, v36, v37, v38, v39, v40)
      || sub_18131E81C((_BYTE *)a1, v29, "table", v29, v41, v42, v43, v44))
    {
      goto LABEL_30;
    }

    uint64_t v50 = *v20;
    if (*((_BYTE *)v20 + 63) == 2)
    {
      sub_1812DC47C(a1, "view %s may not be altered", v45, (uint64_t)v50, v46, v47, v48, v49, (char)*v20);
    }

    else if (!sub_18131E794(a1, 26LL, (uint64_t)v26, (uint64_t)v50, 0LL))
    {
      if (*((_BYTE *)v20 + 63) == 1)
      {
        uint64_t v58 = v20 + 10;
        do
        {
          uint64_t v59 = (void *)*v58;
          uint64_t v60 = (void *)*v58;
          int v61 = (void *)*v60;
          uint64_t v58 = v60 + 5;
        }

        while (v61 != v9);
        if (!*(void *)(*(void *)v59[2] + 152LL)) {
          uint64_t v59 = 0LL;
        }
        uint64_t v88 = (uint64_t)v59;
      }

      else
      {
LABEL_45:
        uint64_t v88 = 0LL;
      }

      uint64_t v62 = sub_1812B9B34((uint64_t *)a1, v51, v52, v53, v54, v55, v56, v57);
      if (v62)
      {
        uint64_t v63 = (uint64_t *)v62;
        uint64_t v64 = *(void *)(a1 + 168);
        if (!v64) {
          uint64_t v64 = a1;
        }
        *(_BYTE *)(v64 + 33) = 1;
        sub_181311E58(*v20, -1);
        sub_1812C742C( (uint64_t *)a1,  "UPDATE %w.sqlite_master SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, %d) WHERE (type!='index ' OR tbl_name=%Q COLLATE nocase)AND   name NOT LIKE 'sqliteX_%%' ESCAPE 'X'",  v65,  v66,  v67,  v68,  v69,  v70,  (char)v26);
        sub_1812C742C( (uint64_t *)a1,  "UPDATE %Q.sqlite_master SET tbl_name = %Q, name = CASE WHEN type='table' THEN %Q WHEN name LIKE 'sqliteX_autoi ndex%%' ESCAPE 'X'      AND type='index' THEN 'sqlite_autoindex_' || %Q || substr(name,%d+18) ELSE name END WH ERE tbl_name=%Q COLLATE nocase AND (type='table' OR type='index' OR type='trigger');",
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          (char)v26);
        if (sub_1812E2C64((uint64_t)v9, "sqlite_sequence", v26)) {
          sub_1812C742C( (uint64_t *)a1,  "UPDATE %w.sqlite_sequence set name = %Q WHERE name = %Q",  v77,  v78,  v79,  v80,  v81,  v82,  (char)v26);
        }
        if ((_DWORD)v23 != 1) {
          sub_1812C742C( (uint64_t *)a1,  "UPDATE sqlite_temp_schema SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, 1), tbl_name = CASE WHE N tbl_name=%Q COLLATE nocase AND   sqlite_rename_test(%Q, sql, type, name, 1, 'after rename', 0) THEN %Q ELS E tbl_name END WHERE type IN ('view', 'trigger')",  v77,  v78,  v79,  v80,  v81,  v82,  (char)v26);
        }
        if (v88)
        {
          uint64_t v83 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v83;
          sub_1812B9B68(v63, 117LL, 0LL, v83, 0LL, (uint64_t)v29, 0LL, v82);
          sub_1812B9B68(v63, 176LL, v83, 0LL, 0LL, v88, 4294967285LL, v84);
        }

        sub_18134A24C((uint64_t *)a1, v23, 1, v78, v79, v80, v81, v82);
        sub_18134A328(a1, (char)v26, (_DWORD)v23 == 1, (uint64_t)"after rename", 0LL, v85, v86, v87);
      }
    }
  }

void sub_181317748( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_DWORD *)(a1 + 48)) {
    return;
  }
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 344);
  uint64_t v13 = *(void *)(v12 + 96);
  uint64_t v14 = *(void *)(*(void *)a1 + 32LL);
  if (v13)
  {
    uint64_t v15 = (uint64_t *)(v14 + 24);
    LODWORD(v16) = -1;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      uint64_t v16 = (v16 + 1);
    }

    while (v17 != v13);
  }

  else
  {
    uint64_t v16 = 4294934528LL;
  }

  uint64_t v18 = *(_BYTE **)(v14 + 32LL * (int)v16);
  uint64_t v19 = (char *)(*(void *)v12 + 16LL);
  uint64_t v20 = *(__int16 *)(v12 + 54) - 1LL;
  uint64_t v85 = *(void *)(v12 + 8);
  int v21 = *(unsigned __int16 *)(v85 + 16 * v20 + 12);
  if (*(_WORD *)(v85 + 16 * v20 + 12) && !*(_BYTE *)(v12 + 63) && (uint64_t v38 = *(_DWORD **)(v12 + 80)) != 0LL && *v38 >= v21) {
    uint64_t v22 = *(void *)&v38[6 * (v21 - 1) + 2];
  }
  else {
    uint64_t v22 = 0LL;
  }
  uint64_t v23 = (void *)sub_1812E2C64(v11, v19, v18);
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = *(uint64_t (**)(void, uint64_t, _BYTE *, void, void, void))(*(void *)a1 + 528LL);
  if (v32 && !*(_BYTE *)(v31 + 197) && !*(_BYTE *)(a1 + 302))
  {
    int v40 = v32(*(void *)(v31 + 536), 26LL, v18, *v23, 0LL, *(void *)(a1 + 368));
    if (v40 == 1)
    {
      int v41 = 23;
      uint64_t v42 = "not authorized";
    }

    else
    {
      if ((v40 & 0xFFFFFFFD) == 0)
      {
        if (v40) {
          return;
        }
        goto LABEL_14;
      }

      int v41 = 1;
      uint64_t v42 = "authorizer malfunction";
    }

    sub_1812DC47C(a1, v42, v25, v26, v27, v28, v29, v30, v82);
    *(_DWORD *)(a1 + 24) = v41;
    return;
  }

void *sub_181317D2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)a1;
  if (!*(_BYTE *)(*(void *)a1 + 103LL))
  {
    uint64_t v13 = *(void *)(a2 + 8);
    if (v13)
    {
      uint64_t v14 = v9[4];
      uint64_t v15 = (uint64_t *)(v14 + 24);
      uint64_t v16 = 0xFFFFFFFF00000000LL;
      do
      {
        uint64_t v17 = *v15;
        v15 += 4;
        v16 += 0x100000000LL;
      }

      while (v17 != v13);
      uint64_t v18 = (_BYTE **)(v14 + (v16 >> 27));
    }

    else
    {
      uint64_t v18 = (_BYTE **)(a2 + 16);
    }

    uint64_t v19 = (unsigned __int8 **)sub_18129EAF4(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
    if (v19)
    {
      uint64_t v26 = (uint64_t)v19;
      if (!sub_18134A054(a1, v19, v20, v21, v22, v23, v24, v25))
      {
        int v33 = *(unsigned __int8 *)(v26 + 63);
        char v34 = "view";
        if (v33 != 2) {
          char v34 = 0LL;
        }
        if (v33 == 1) {
          uint64_t v35 = "virtual table";
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35)
        {
          sub_1812DC47C(a1, "cannot %s %s %s", v27, v28, v29, v30, v31, v32, (char)"drop column from");
          return sub_18128FF4C(v9, (void *)a2);
        }

        if (a3)
        {
          __int16 v36 = *(const void **)a3;
          if (*(void *)a3)
          {
            size_t v37 = *(unsigned int *)(a3 + 8);
            uint64_t v38 = (void *)sub_1812F2264((uint64_t)v9, v37 + 1);
            if (v38)
            {
              uint64_t v39 = v38;
              memcpy(v38, v36, v37);
              *((_BYTE *)v39 + v37) = 0;
              int v46 = *(unsigned __int8 *)v39;
              if ((char)byte_1813C6558[*(unsigned __int8 *)v39] < 0)
              {
                uint64_t v47 = 0LL;
                if (v46 == 91) {
                  int v48 = 93;
                }
                else {
                  int v48 = *(unsigned __int8 *)v39;
                }
                for (int i = 1; ; ++i)
                {
                  uint64_t v50 = i;
                  int v51 = *((unsigned __int8 *)v39 + i);
                  if (v51 == v48)
                  {
                    ++i;
                    LOBYTE(v51) = v48;
                  }

                  *((_BYTE *)v39 + v47++) = v51;
                }

                *((_BYTE *)v39 + v47) = 0;
                int v46 = *(unsigned __int8 *)v39;
              }

              unsigned __int8 v52 = 0;
              if (v46)
              {
                uint64_t v53 = (unsigned __int8 *)v39 + 1;
                do
                {
                  v52 += byte_1813C6343[v46];
                  int v54 = *v53++;
                  int v46 = v54;
                }

                while (v54);
              }

              int v55 = *(__int16 *)(v26 + 54);
              if (v55 < 1)
              {
LABEL_46:
                sub_1812DC47C(a1, "no such column: %T", v40, v41, v42, v43, v44, v45, a3);
                goto LABEL_47;
              }

              unsigned int v56 = 0;
              uint64_t v57 = *(void *)(v26 + 8);
              while (*(unsigned __int8 *)(v57 + 11) != v52)
              {
LABEL_34:
                v57 += 16LL;
                if (++v56 == v55) {
                  goto LABEL_46;
                }
              }

              for (uint64_t j = 0LL; ; ++j)
              {
                uint64_t v59 = *(unsigned __int8 *)(*(void *)v57 + j);
                uint64_t v60 = *((unsigned __int8 *)v39 + j);
                if ((_DWORD)v59 == (_DWORD)v60)
                {
                  if (!*(_BYTE *)(*(void *)v57 + j))
                  {
                    __int16 v61 = *(_WORD *)(*(void *)(v26 + 8) + 16LL * v56 + 14);
                    if ((v61 & 9) != 0)
                    {
                      if ((v61 & 1) != 0) {
                        uint64_t v62 = "PRIMARY KEY";
                      }
                      else {
                        uint64_t v62 = "UNIQUE";
                      }
                      sub_1812DC47C(a1, "cannot drop %s column: %s", v40, v41, v42, v43, v44, v45, (char)v62);
                      goto LABEL_47;
                    }

                    if (v55 <= 1)
                    {
                      sub_1812DC47C( a1,  "cannot drop column %s: no other columns exist",  v40,  v41,  v42,  v43,  v44,  v45,  (char)v39);
                      goto LABEL_47;
                    }

                    uint64_t v63 = *(void *)(v26 + 96);
                    uint64_t v64 = v9[4];
                    if (v63)
                    {
                      uint64_t v65 = (uint64_t *)(v64 + 24);
                      LODWORD(v66) = -1;
                      do
                      {
                        uint64_t v67 = *v65;
                        v65 += 4;
                        uint64_t v66 = (v66 + 1);
                      }

                      while (v67 != v63);
                    }

                    else
                    {
                      uint64_t v66 = 4294934528LL;
                    }

                    uint64_t v68 = *(void *)(v64 + 32LL * (int)v66);
                    if (!sub_18131E794(a1, 26LL, v68, *(void *)v26, (uint64_t)v39))
                    {
                      sub_18134A328(a1, v68, (_DWORD)v66 == 1, (uint64_t)&byte_1813CEAEE, 0LL, v69, v70, v71);
                      sub_18134A3A8((uint64_t *)a1, v68, (_DWORD)v66 == 1, v72, v73, v74, v75, v76, v142);
                      sub_1812C742C( (uint64_t *)a1,  "UPDATE %w.sqlite_master SET sql = sqlite_drop_column(%d, sql, %d) WHERE (type=='table' AND t bl_name=%Q COLLATE nocase)",  v77,  v78,  v79,  v80,  v81,  v82,  v68);
                      sub_18134A24C((uint64_t *)a1, v66, 2, v83, v84, v85, v86, v87);
                      sub_18134A328(a1, v68, (_DWORD)v66 == 1, (uint64_t)"after drop column", 1LL, v88, v89, v90);
                      if (!*(_DWORD *)(a1 + 48) && (*(_WORD *)(*(void *)(v26 + 8) + 16LL * v56 + 14) & 0x20) == 0)
                      {
                        uint64_t v98 = sub_1812B9B34((uint64_t *)a1, v91, v92, v93, v94, v95, v96, v97);
                        uint64_t v99 = *(unsigned int *)(a1 + 52);
                        *(_DWORD *)(a1 + 52) = v99 + 1;
                        sub_18128BBE0((void *)a1, v99, v66, v26, 113LL, v100, v101, v102);
                        uint64_t v148 = v98;
                        unsigned int v147 = v99;
                        int v144 = sub_181319BA8(v98, 36LL, v99, v103, v104, v105, v106, v107);
                        int v145 = *(_DWORD *)(a1 + 56);
                        unsigned int v143 = v145 + 1;
                        *(_DWORD *)(a1 + 56) = v145 + 1;
                        if ((*(_BYTE *)(v26 + 48) & 0x80) != 0)
                        {
                          uint64_t v117 = v26 + 16;
                          do
                          {
                            uint64_t v114 = *(void *)v117;
                            int v118 = *(_WORD *)(*(void *)v117 + 99LL) & 3;
                            uint64_t v117 = *(void *)v117 + 40LL;
                          }

                          while (v118 != 2);
                          int v116 = v143 + *(unsigned __int16 *)(v114 + 96);
                          *(_DWORD *)(a1 + 56) = v116;
                          if (*(_WORD *)(v114 + 94))
                          {
                            uint64_t v119 = 0LL;
                            do
                            {
                              sub_181279C3C( v148,  94LL,  v99,  v119,  (v145 + 2 + v119),  v109,  v110,  v111);
                              uint64_t v119 = (v119 + 1);
                              uint64_t v113 = *(unsigned __int16 *)(v114 + 94);
                            }

                            while (v119 < v113);
                            int v116 = *(_DWORD *)(a1 + 56);
                          }

                          else
                          {
                            uint64_t v113 = 0LL;
                          }

                          __int16 v115 = *(_WORD *)(v26 + 54);
                        }

                        else
                        {
                          sub_1813103F4(v98, 135LL, v99, v143, v108, v109, v110, v111);
                          uint64_t v113 = 0LL;
                          uint64_t v114 = 0LL;
                          __int16 v115 = *(_WORD *)(v26 + 54);
                          int v116 = *(_DWORD *)(a1 + 56) + v115;
                        }

                        unsigned int v146 = v116 + 1;
                        *(_DWORD *)(a1 + 56) = v116 + 1;
                        if (v115 >= 1)
                        {
                          uint64_t v120 = 0LL;
                          int v149 = v145 + 2;
                          uint64_t v121 = v56;
                          uint64_t v122 = v113;
                          while (1)
                          {
                            if (v120 != v121 && (*(_WORD *)(*(void *)(v26 + 8) + 16 * v120 + 14) & 0x20) == 0)
                            {
                              if (!v114)
                              {
                                LODWORD(v124) = v122;
                                uint64_t v128 = (v149 + v122);
LABEL_89:
                                else {
                                  *(double *)v112.i64 = sub_18131C0EC( v148,  v26,  v147,  v120,  v128,  v109,  v110,  v111,  v112);
                                }
                                uint64_t v122 = (v124 + 1);
                                __int16 v115 = *(_WORD *)(v26 + 54);
                                goto LABEL_72;
                              }

                              uint64_t v123 = *(unsigned __int16 *)(v114 + 96);
                              if (*(_WORD *)(v114 + 96))
                              {
                                uint64_t v124 = v122;
                                uint64_t v125 = 0LL;
                                uint64_t v126 = *(void *)(v114 + 8);
                                while (*(unsigned __int16 *)(v126 + 2 * v125) != (unsigned __int16)v120)
                                {
                                  if (v123 == ++v125)
                                  {
                                    LOWORD(v125) = -1;
                                    break;
                                  }
                                }

                                uint64_t v127 = 0LL;
                                while (*(unsigned __int16 *)(v126 + 2 * v127) != (unsigned __int16)v56)
                                {
                                  if (v123 == ++v127)
                                  {
                                    LOWORD(v127) = -1;
                                    break;
                                  }
                                }

                                if ((__int16)v125 >= (int)*(unsigned __int16 *)(v114 + 94))
                                {
                                  uint64_t v128 = v149 + (__int16)v125 - ((__int16)v125 > (__int16)v127);
                                  uint64_t v121 = v56;
                                  goto LABEL_89;
                                }

                                uint64_t v121 = v56;
                                uint64_t v122 = v124;
                              }
                            }

void *sub_181318428( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)*a1;
  if (*(_BYTE *)(*a1 + 103LL)) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11)
  {
    uint64_t v12 = v9[4];
    uint64_t v13 = (uint64_t *)(v12 + 24);
    uint64_t v14 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v15 = *v13;
      v13 += 4;
      v14 += 0x100000000LL;
    }

    while (v15 != v11);
    uint64_t v16 = (_BYTE **)(v12 + (v14 >> 27));
  }

  else
  {
    uint64_t v16 = (_BYTE **)(a2 + 16);
  }

  uint64_t v17 = sub_18129EAF4((uint64_t)a1, 0, *(char **)(a2 + 24), *v16, a5, a6, a7, a8);
  if (!v17) {
    return sub_18128FF4C(v9, (void *)a2);
  }
  uint64_t v24 = v17;
  int v25 = *(unsigned __int8 *)(v17 + 63);
  if (v25 == 2)
  {
    uint64_t v26 = "Cannot add a column to a view";
    goto LABEL_12;
  }

  if (v25 == 1)
  {
    uint64_t v26 = "virtual tables may not be altered";
LABEL_12:
    sub_1812DC47C((uint64_t)a1, v26, v18, v19, v20, v21, v22, v23, v57);
    return sub_18128FF4C(v9, (void *)a2);
  }

  uint64_t v28 = (void *)a1[21];
  if (!v28) {
    uint64_t v28 = a1;
  }
  *((_BYTE *)v28 + 33) = 1;
  uint64_t v29 = *(void *)(v24 + 96);
  if (!v29)
  {
    int v31 = -32768;
LABEL_23:
    uint64_t v33 = sub_1812F2264((uint64_t)v9, 0x68uLL);
    char v59 = 0;
    goto LABEL_24;
  }

  uint64_t v30 = (uint64_t *)(v9[4] + 24LL);
  int v31 = -1;
  do
  {
    uint64_t v32 = *v30;
    v30 += 4;
    ++v31;
  }

  while (v32 != v29);
  if (v9) {
    goto LABEL_23;
  }
  uint64_t v33 = sub_18126F0AC(104LL);
  char v59 = 1;
LABEL_24:
  if (v33)
  {
    *(void *)(v33 + 96) = 0LL;
    *(_OWORD *)(v33 + 64) = 0u;
    *(_OWORD *)(v33 + 80) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_OWORD *)uint64_t v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    a1[43] = v33;
    *(_DWORD *)(v33 + 44) = 1;
    int v34 = *(__int16 *)(v24 + 54);
    *(_WORD *)(v33 + 54) = v34;
    int v36 = v34 - 1;
    BOOL v35 = v34 < 1;
    int v37 = v34 + 6;
    if (!v35) {
      int v37 = v36;
    }
    *(void *)(v33 + 8) = sub_181268E34((uint64_t)v9, 16LL * (int)((v37 & 0xFFFFFFF8) + 8));
    uint64_t v44 = sub_18127F588((uint64_t)v9, "sqlite_altertab_%s", v38, v39, v40, v41, v42, v43, *(void *)v24);
    *(void *)uint64_t v33 = v44;
    uint64_t v45 = *(void **)(v33 + 8);
    if (v45)
    {
      if (v44)
      {
        uint64_t v58 = v24;
        memcpy(v45, *(const void **)(v24 + 8), 16LL * *(__int16 *)(v33 + 54));
        if (*(__int16 *)(v33 + 54) < 1)
        {
LABEL_44:
          *(void *)(v33 + 80) = sub_18129CD4C((uint64_t)v9, *(void **)(v58 + 80), 0);
          *(void *)(v33 + 96) = *(void *)(v9[4] + 32LL * v31 + 24);
          *(_DWORD *)(v33 + 64) = *(_DWORD *)(v58 + 64);
          return sub_18128FF4C(v9, (void *)a2);
        }

        uint64_t v46 = 0LL;
        uint64_t v60 = v33;
        while (1)
        {
          uint64_t v48 = *(void *)(v33 + 8);
          uint64_t v49 = (const char **)(v48 + 16 * v46);
          uint64_t v50 = *v49;
          if (!*v49) {
            break;
          }
          size_t v51 = strlen(*v49);
          unint64_t v52 = v51 + 1;
          if ((v59 & 1) != 0)
          {
            uint64_t v53 = (unsigned __int8 *)sub_18126F0AC(v51 + 1);
            if (!v53) {
              break;
            }
          }

          else
          {
            uint64_t v53 = (unsigned __int8 *)sub_1812F2264((uint64_t)v9, v52);
            if (!v53) {
              break;
            }
          }

          memcpy(v53, v50, v52);
          *uint64_t v49 = (const char *)v53;
          int v54 = *v53;
          if (*v53)
          {
            char v47 = 0;
            int v55 = v53 + 1;
            uint64_t v33 = v60;
            do
            {
              v47 += byte_1813C6343[v54];
              int v56 = *v55++;
              int v54 = v56;
            }

            while (v56);
            goto LABEL_33;
          }

          char v47 = 0;
LABEL_32:
          uint64_t v33 = v60;
LABEL_33:
          *(_BYTE *)(v48 + 16 * v46++ + 11) = v47;
        }

        char v47 = 0;
        *uint64_t v49 = 0LL;
        goto LABEL_32;
      }
    }
  }

  return sub_18128FF4C(v9, (void *)a2);
}

void *sub_181318720( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (void *)*a1;
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = v12[4];
    uint64_t v15 = (uint64_t *)(v14 + 24);
    uint64_t v16 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      v16 += 0x100000000LL;
    }

    while (v17 != v13);
    uint64_t v18 = (_BYTE **)(v14 + (v16 >> 27));
  }

  else
  {
    uint64_t v18 = (_BYTE **)(a2 + 16);
  }

  uint64_t v19 = (unsigned __int8 **)sub_18129EAF4((uint64_t)a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19) {
    return sub_18128FF4C(v12, (void *)a2);
  }
  uint64_t v26 = v19;
  int v33 = *((unsigned __int8 *)v26 + 63);
  int v34 = "view";
  if (v33 != 2) {
    int v34 = 0LL;
  }
  if (v33 == 1) {
    BOOL v35 = "virtual table";
  }
  else {
    BOOL v35 = v34;
  }
  if (v35)
  {
    sub_1812DC47C((uint64_t)a1, "cannot %s %s %s", v27, v28, v29, v30, v31, v32, (char)"rename columns of");
    return sub_18128FF4C(v12, (void *)a2);
  }

  int v37 = v26[12];
  uint64_t v38 = v12[4];
  if (v37)
  {
    uint64_t v39 = (unsigned __int8 **)(v38 + 24);
    LODWORD(v40) = -1;
    do
    {
      uint64_t v41 = *v39;
      v39 += 4;
      uint64_t v40 = (v40 + 1);
    }

    while (v41 != v37);
  }

  else
  {
    uint64_t v40 = 4294934528LL;
  }

  uint64_t v42 = *(void *)(v38 + 32LL * (int)v40);
  uint64_t v43 = *a1;
  uint64_t v44 = *(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *, void, uint64_t))(*a1 + 528);
  char v103 = v42;
  if (v44 && !*(_BYTE *)(v43 + 197) && !*((_BYTE *)a1 + 302))
  {
    int v66 = v44(*(void *)(v43 + 536), 26LL, v42, *v26, 0LL, a1[46]);
    if (v66 == 1)
    {
      int v73 = 23;
      uint64_t v74 = "not authorized";
    }

    else
    {
      if ((v66 & 0xFFFFFFFD) == 0)
      {
        if (!a3 || v66) {
          return sub_18128FF4C(v12, (void *)a2);
        }
        goto LABEL_25;
      }

      int v73 = 1;
      uint64_t v74 = "authorizer malfunction";
    }

    sub_1812DC47C((uint64_t)a1, v74, v67, v68, v69, v70, v71, v72, v102);
    *((_DWORD *)a1 + 6) = v73;
    return sub_18128FF4C(v12, (void *)a2);
  }

  if (!a3) {
    return sub_18128FF4C(v12, (void *)a2);
  }
LABEL_25:
  uint64_t v45 = *(const void **)a3;
  if (!*(void *)a3) {
    return sub_18128FF4C(v12, (void *)a2);
  }
  size_t v46 = *(unsigned int *)(a3 + 8);
  char v47 = (void *)sub_1812F2264((uint64_t)v12, v46 + 1);
  if (!v47) {
    return sub_18128FF4C(v12, (void *)a2);
  }
  uint64_t v48 = v47;
  memcpy(v47, v45, v46);
  *((_BYTE *)v48 + v46) = 0;
  int v55 = *(unsigned __int8 *)v48;
  if ((char)byte_1813C6558[*(unsigned __int8 *)v48] < 0)
  {
    uint64_t v56 = 0LL;
    if (v55 == 91) {
      int v55 = 93;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v58 = i;
      int v59 = *((unsigned __int8 *)v48 + i);
      if (v59 == v55)
      {
        ++i;
        LOBYTE(v59) = v55;
      }

      *((_BYTE *)v48 + v56++) = v59;
    }

    *((_BYTE *)v48 + v56) = 0;
  }

  uint64_t v60 = *((__int16 *)v26 + 27);
  if ((int)v60 >= 1)
  {
    uint64_t v61 = 0LL;
    while (1)
    {
      uint64_t v62 = *(_BYTE **)&v26[1][16 * v61];
      for (uint64_t j = (unsigned __int8 *)v48; ; ++j)
      {
        uint64_t v64 = *v62;
        uint64_t v65 = *j;
        if ((_DWORD)v64 != (_DWORD)v65) {
          break;
        }
        if (!*v62) {
          goto LABEL_48;
        }
LABEL_39:
        ++v62;
      }

      if (byte_1813C6343[v64] == byte_1813C6343[v65]) {
        goto LABEL_39;
      }
      if (++v61 == v60) {
        goto LABEL_49;
      }
    }
  }

  LODWORD(v61) = 0;
LABEL_48:
  if ((_DWORD)v61 == (_DWORD)v60)
  {
LABEL_49:
    sub_1812DC47C((uint64_t)a1, "no such column: %T", v49, v50, v51, v52, v53, v54, a3);
    uint64_t v75 = 0LL;
  }

  else
  {
    sub_18134A328((uint64_t)a1, v103, (_DWORD)v40 == 1, (uint64_t)&byte_1813CEAEE, 0LL, v52, v53, v54);
    sub_18134A3A8(a1, v103, (_DWORD)v40 == 1, v76, v77, v78, v79, v80, v102);
    uint64_t v81 = (uint64_t *)a1[21];
    if (!v81) {
      uint64_t v81 = a1;
    }
    *((_BYTE *)v81 + 33) = 1;
    uint64_t v75 = sub_1813146DC((uint64_t)v12, a4);
    if (v75)
    {
      sub_1812C742C( a1,  "UPDATE %w.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, %d) WHERE name N OT LIKE 'sqliteX_%%' ESCAPE 'X'  AND (type != 'index' OR tbl_name = %Q)",  v82,  v83,  v84,  v85,  v86,  v87,  v103);
      sub_1812C742C( a1,  "UPDATE temp.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) WHERE type IN('trigger', 'view')",  v88,  v89,  v90,  v91,  v92,  v93,  v103);
      sub_18134A24C(a1, v40, 1, v94, v95, v96, v97, v98);
      sub_18134A328((uint64_t)a1, v103, (_DWORD)v40 == 1, (uint64_t)"after rename", 1LL, v99, v100, v101);
    }
  }

  sub_18128FF4C(v12, (void *)a2);
  uint64_t result = sub_1812F20DC(v12, v48);
  if (v75) {
    return sub_1812F20DC(v12, v75);
  }
  return result;
}

void sub_181318B5C( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 344);
  if (!v8) {
    return;
  }
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(const void **)(a1 + 376);
  if (v12)
  {
    size_t v13 = *(int *)(a1 + 384);
    uint64_t v14 = (void *)sub_1812F2264(*(void *)a1, v13 + 1);
    uint64_t v20 = v14;
    if (v14)
    {
      memcpy(v14, v12, v13);
      *((_BYTE *)v20 + v13) = 0;
    }

    sub_181311884(a1, v8, v20, v15, v16, v17, v18, v19);
  }

  *(void *)(a1 + 376) = 0LL;
  if (!*(_BYTE *)(v11 + 197))
  {
    uint64_t v27 = *(void *)(a1 + 168);
    if (!v27) {
      uint64_t v27 = a1;
    }
    *(_BYTE *)(v27 + 33) = 1;
    if (a2) {
      *(_DWORD *)(a1 + 272) = a2[2] + *a2 - *(_DWORD *)(a1 + 264);
    }
    int v34 = sub_18127F588(v11, "CREATE VIRTUAL TABLE %T", a3, a4, a5, a6, a7, a8, a1 + 8);
    uint64_t v35 = *(void *)(v8 + 96);
    uint64_t v36 = *(void *)(v11 + 32);
    if (v35)
    {
      int v37 = (uint64_t *)(v36 + 24);
      LODWORD(v38) = -1;
      do
      {
        uint64_t v39 = *v37;
        v37 += 4;
        uint64_t v38 = (v38 + 1);
      }

      while (v39 != v35);
    }

    else
    {
      uint64_t v38 = 4294934528LL;
    }

    sub_1812C742C( (uint64_t *)a1,  "UPDATE %Q.sqlite_master SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q WHERE rowid=#%d",  v28,  v29,  v30,  v31,  v32,  v33,  *(void *)(v36 + 32LL * (int)v38));
    uint64_t v59 = *(void *)(a1 + 16);
    uint64_t v60 = v59;
    if (!v59)
    {
      if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
        *(_BYTE *)(a1 + 35) = 1;
      }
      uint64_t v60 = sub_1812DC63C((uint64_t *)a1, v52, v53, v54, v55, v56, v57, v58);
      uint64_t v59 = *(void *)(a1 + 16);
    }

    uint64_t v61 = (**(_DWORD **)(*(void *)(*(void *)a1 + 32LL) + 32LL * (int)v38 + 24) + 1);
    int v62 = *(_DWORD *)(v59 + 144);
    if (*(_DWORD *)(v59 + 148) <= v62)
    {
      sub_18131044C(v59, 100LL, v38, 1LL, v61, v56, v57, v58);
    }

    else
    {
      *(_DWORD *)(v59 + 144) = v62 + 1;
      uint64_t v63 = *(void *)(v59 + 136) + 40LL * v62;
      *(_DWORD *)uint64_t v63 = 100;
      *(_DWORD *)(v63 + 4) = v38;
      *(_DWORD *)(v63 + 8) = 1;
      *(_DWORD *)(v63 + 12) = v61;
      *(void *)(v63 + 24) = 0LL;
      *(void *)(v63 + 32) = 0LL;
      *(void *)(v63 + 16) = 0LL;
    }

    int v64 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v64)
    {
      sub_18131044C(v60, 166LL, 0LL, 0LL, 0LL, v56, v57, v58);
    }

    else
    {
      *(_DWORD *)(v60 + 144) = v64 + 1;
      uint64_t v65 = *(void *)(v60 + 136) + 40LL * v64;
      *(_BYTE *)uint64_t v65 = -90;
      *(_OWORD *)(v65 + 1) = 0u;
      *(_OWORD *)(v65 + 17) = 0u;
      *(void *)(v65 + 32) = 0LL;
    }

    int v66 = sub_18127F588(v11, "name=%Q AND sql=%Q", v53, v54, v61, v56, v57, v58, *(void *)v8);
    sub_1813202C4(v60, v38, (uint64_t)v66, 0, v67, v68, v69, v70);
    if (v34) {
      sub_1812F20DC((void *)v11, v34);
    }
    uint64_t v72 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v72;
    sub_1812B9B68((uint64_t *)v60, 117LL, 0LL, v72, 0LL, *(void *)v8, 0LL, v71);
    int v76 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v76)
    {
      sub_18131044C(v60, 171LL, v38, v72, 0LL, v73, v74, v75);
    }

    else
    {
      *(_DWORD *)(v60 + 144) = v76 + 1;
      uint64_t v77 = *(void *)(v60 + 136) + 40LL * v76;
      *(_DWORD *)uint64_t v77 = 171;
      *(_DWORD *)(v77 + 4) = v38;
      *(_DWORD *)(v77 + 8) = v72;
      *(void *)(v77 + 12) = 0LL;
      *(void *)(v77 + 28) = 0LL;
      *(void *)(v77 + 20) = 0LL;
      *(_DWORD *)(v77 + 36) = 0;
    }

    return;
  }

  uint64_t v21 = **(_BYTE ***)(v8 + 72);
  uint64_t v22 = *(void *)(v11 + 584);
  if (!v22)
  {
    uint64_t v40 = (uint64_t *)(v11 + 576);
    int v41 = *(_DWORD *)(v11 + 572);
    if (v41) {
      goto LABEL_31;
    }
LABEL_22:
    uint64_t v40 = &qword_18C550660;
    goto LABEL_23;
  }

  int v23 = *v21;
  if (*v21)
  {
    unsigned int v24 = 0;
    uint64_t v25 = v21 + 1;
    do
    {
      unsigned int v24 = -1640531535 * (v24 + byte_1813C6343[v23]);
      int v26 = *v25++;
      int v23 = v26;
    }

    while (v26);
  }

  else
  {
    unsigned int v24 = 0;
  }

  char v47 = (_DWORD *)(v22 + 16LL * (v24 % *(_DWORD *)(v11 + 568)));
  uint64_t v40 = (uint64_t *)(v47 + 2);
  int v41 = *v47;
  if (!v41) {
    goto LABEL_22;
  }
  do
  {
LABEL_31:
    uint64_t v40 = (uint64_t *)*v40;
    uint64_t v48 = (_BYTE *)v40[3];
    for (int i = **(unsigned __int8 ***)(v8 + 72); ; ++i)
    {
      uint64_t v50 = *v48;
      uint64_t v51 = *i;
      if ((_DWORD)v50 != (_DWORD)v51) {
        break;
      }
      if (!*v48) {
        goto LABEL_23;
      }
LABEL_33:
      ++v48;
    }

    if (byte_1813C6343[v50] == byte_1813C6343[v51]) {
      goto LABEL_33;
    }
    --v41;
  }

  while (v41);
  uint64_t v40 = &qword_18C550660;
LABEL_23:
  uint64_t v42 = *(void *)(v8 + 96);
  uint64_t v43 = *(unsigned __int8 **)v8;
  uint64_t v44 = v40[2];
  if (v44)
  {
    uint64_t v45 = *(void *)v44;
    if (*(void *)v44)
    {
      if (*(int *)v45 >= 3 && *(void *)(v45 + 184))
      {
        unsigned int v46 = v43 ? strlen(*(const char **)v8) & 0x3FFFFFFF : 0;
        uint64_t v78 = *(void **)(v42 + 16);
        if (v78)
        {
          uint64_t v79 = v46;
          do
          {
            uint64_t v80 = v78[2];
            if (!*(_BYTE *)(v80 + 63) && (*(_BYTE *)(v80 + 49) & 0x10) == 0)
            {
              uint64_t v81 = *(unsigned __int8 **)v8;
              if (*(void *)v80)
              {
                if (!v81) {
                  goto LABEL_59;
                }
                if (v46)
                {
                  unsigned int v82 = v46 + 1;
                  uint64_t v83 = *(_BYTE **)v80;
                  while (1)
                  {
                    uint64_t v84 = *v83;
                    if (!*v83) {
                      break;
                    }
                    LODWORD(v84) = byte_1813C6343[v84];
                    int v85 = byte_1813C6343[*v81];
                    if ((_DWORD)v84 != v85) {
                      goto LABEL_76;
                    }
                    ++v83;
                    ++v81;
                    if (--v82 <= 1) {
                      goto LABEL_77;
                    }
                  }

                  int v85 = byte_1813C6343[*v81];
LABEL_76:
                  if ((_DWORD)v84 != v85) {
                    goto LABEL_59;
                  }
                }

void sub_181319110( uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void **)(a1 + 344);
  if (!v15) {
    return;
  }
  *((_BYTE *)v15 + 63) = 1;
  uint64_t v16 = *(void *)a1;
  if (a4 && (uint64_t v17 = *(const void **)a4) != 0LL)
  {
    size_t v18 = *(unsigned int *)(a4 + 8);
    uint64_t v19 = (void *)sub_1812F2264(*(void *)a1, v18 + 1);
    uint64_t v20 = v19;
    if (v19)
    {
      memcpy(v19, v17, v18);
      *((_BYTE *)v20 + v18) = 0;
      if ((char)byte_1813C6558[*(unsigned __int8 *)v20] < 0)
      {
        uint64_t v21 = 0LL;
        if (*(_BYTE *)v20 == 91) {
          int v22 = 93;
        }
        else {
          int v22 = *(unsigned __int8 *)v20;
        }
        for (int i = 1; ; ++i)
        {
          uint64_t v24 = i;
          int v25 = *((unsigned __int8 *)v20 + i);
          if (v25 == v22)
          {
            ++i;
            LOBYTE(v25) = v22;
          }

          *((_BYTE *)v20 + v21++) = v25;
        }

        *((_BYTE *)v20 + v21) = 0;
      }
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  sub_181311884(a1, (uint64_t)v15, v20, v10, v11, v12, v13, v14);
  sub_181311884(a1, (uint64_t)v15, 0LL, v26, v27, v28, v29, v30);
  uint64_t v36 = (const char *)*v15;
  if (*v15)
  {
    size_t v37 = strlen((const char *)*v15);
    unint64_t v38 = v37 + 1;
    if (v16)
    {
      uint64_t v39 = (void *)sub_1812F2264(v16, v38);
      if (!v39) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }

    uint64_t v39 = (void *)sub_18126F0AC(v37 + 1);
    if (v39) {
LABEL_21:
    }
      memcpy(v39, v36, v38);
  }

  else
  {
    uint64_t v39 = 0LL;
  }

void sub_181319364(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 376);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 344);
    if (v3)
    {
      size_t v4 = *(int *)(a1 + 384);
      int v5 = (void *)sub_1812F2264(*(void *)a1, v4 + 1);
      uint64_t v11 = v5;
      if (v5)
      {
        memcpy(v5, v2, v4);
        *((_BYTE *)v11 + v4) = 0;
      }

      sub_181311884(a1, v3, v11, v6, v7, v8, v9, v10);
    }
  }

  *(void *)(a1 + 376) = 0LL;
  *(_DWORD *)(a1 + 384) = 0;
}

uint64_t *sub_1813193E4(uint64_t *result, void *a2, int a3)
{
  if (a2)
  {
    size_t v4 = result;
    if (!a3) {
      goto LABEL_6;
    }
    uint64_t v5 = *result;
    if (*v4)
    {
      uint64_t result = (uint64_t *)sub_1812F2264(v5, 0x18uLL);
      if (result)
      {
LABEL_5:
        uint64_t v6 = v4[24];
        v4[24] = (uint64_t)result;
        void *result = v6;
        result[1] = (uint64_t)a2;
        result[2] = (uint64_t)sub_18130928C;
LABEL_6:
        if (!*((_DWORD *)v4 + 12))
        {
          a2[1] = v4[50];
          v4[50] = (uint64_t)a2;
        }

        return result;
      }
    }

    else
    {
      uint64_t result = (uint64_t *)sub_18126F0AC(24LL);
      if (result) {
        goto LABEL_5;
      }
    }

    return sub_18130928C((void *)*v4, a2);
  }

  return result;
}

uint64_t sub_18131946C(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v11 = sub_1812F2264(*a1, 0x30uLL);
    if (!v11) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v11 = sub_18126F0AC(48LL);
  if (v11)
  {
LABEL_3:
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
  }

void *sub_1813195CC( uint64_t *a1, _DWORD *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  if (!a3) {
    return v8;
  }
  uint64_t v11 = *a1;
  if (a2 && (uint64_t v12 = (void *)*a3) != 0LL)
  {
    int v13 = *a2;
    if ((int)*a2 >= 1)
    {
      for (uint64_t i = 0LL; i < v13; ++i)
      {
        for (uint64_t j = 0LL; ; ++j)
        {
          uint64_t v16 = *((unsigned __int8 *)v12 + j);
          uint64_t v17 = *(unsigned __int8 *)(v8[6 * i + 2] + j);
          if ((_DWORD)v16 == (_DWORD)v17) {
            break;
          }
          if (byte_1813C6343[v16] != byte_1813C6343[v17]) {
            goto LABEL_6;
          }
LABEL_9:
          ;
        }

        if (*((_BYTE *)v12 + j)) {
          goto LABEL_9;
        }
        sub_1812DC47C((uint64_t)a1, "duplicate WITH table name: %s", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v12);
        int v13 = *(_DWORD *)v8;
LABEL_6:
        ;
      }
    }
  }

  else
  {
    if (!a2)
    {
      if (v11)
      {
        uint64_t v19 = (_OWORD *)sub_1812F2264(*a1, 0x40uLL);
        if (!v19) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v19 = (_OWORD *)sub_18126F0AC(64LL);
        if (!v19) {
          goto LABEL_22;
        }
      }

      v19[2] = 0u;
      v19[3] = 0u;
      _OWORD *v19 = 0u;
      v19[1] = 0u;
      goto LABEL_22;
    }

    int v13 = *a2;
  }

  unint64_t v18 = 48LL * v13 + 64;
  if (*(void *)(v11 + 496) > (unint64_t)v8)
  {
    if (*(void *)(v11 + 504) <= (unint64_t)v8)
    {
      uint64_t v19 = v8;
    }

    goto LABEL_21;
  }

  uint64_t v19 = v8;
  if (v18 >= 0x81) {
LABEL_21:
  }
    uint64_t v19 = (_OWORD *)sub_1812F2310(v11, v8, v18);
LABEL_22:
  if (*(_BYTE *)(v11 + 103))
  {
    int v20 = (void *)a3[1];
    if (v20) {
      sub_181311F48((void *)v11, v20);
    }
    uint64_t v21 = a3[2];
    if (v21) {
      sub_18128FDA0((void *)v11, v21, 1);
    }
    if (*a3) {
      sub_1812F20DC((void *)v11, (void *)*a3);
    }
  }

  else
  {
    int v22 = (*(_DWORD *)v19)++;
    int v23 = &v19[3 * v22];
    __int128 v24 = *(_OWORD *)a3;
    __int128 v25 = *((_OWORD *)a3 + 2);
    v23[2] = *((_OWORD *)a3 + 1);
    v23[3] = v25;
    v23[1] = v24;
    uint64_t v8 = v19;
  }

  sub_1812F20DC((void *)v11, a3);
  return v8;
}

void sub_1813197C0( uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
LABEL_11:
    sub_1812DC47C((uint64_t)a1, "no such window: %s", a3, a4, a5, a6, a7, a8, a2[1]);
    return;
  }

  uint64_t v11 = (void *)*a1;
LABEL_4:
  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v13 = *(unsigned __int8 *)(*(void *)v9 + i);
    uint64_t v14 = *(unsigned __int8 *)(v8 + i);
    if ((_DWORD)v13 == (_DWORD)v14) {
      break;
    }
    if (byte_1813C6343[v13] != byte_1813C6343[v14])
    {
      uint64_t v9 = *(void *)(v9 + 64);
      if (v9) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }

void *sub_1813198EC(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (a2)
  {
    a2[2] = a3;
    a2[3] = a4;
    if (a5)
    {
      uint64_t v8 = *(const void **)a5;
      if (*(void *)a5)
      {
        size_t v9 = *(unsigned int *)(a5 + 8);
        uint64_t v10 = (_BYTE *)sub_1812F2264(*a1, v9 + 1);
        uint64_t v11 = v10;
        if (v10)
        {
          memcpy(v10, v8, v9);
          v11[v9] = 0;
        }

        a2[1] = v11;
      }

      else
      {
        a2[1] = 0LL;
      }
    }
  }

  else
  {
    if (a3) {
      sub_181311F48((void *)*a1, a3);
    }
    if (a4) {
      sub_181311F48((void *)*a1, a4);
    }
  }

  return a2;
}

uint64_t sub_181319990( uint64_t *a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  char v10 = a5;
  char v12 = a3;
  BOOL v15 = a2 == 0;
  if ((_DWORD)a3 == 85 && (_DWORD)a5 == 88 || (_DWORD)a3 == 86 && ((_DWORD)a5 == 88 || (_DWORD)a5 == 85))
  {
    sub_1812DC47C((uint64_t)a1, "unsupported frame specification", a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8, v22);
    goto LABEL_4;
  }

  uint64_t v17 = *a1;
  if (!*a1)
  {
    uint64_t v18 = sub_18126F0AC(144LL);
    goto LABEL_26;
  }

  if (*(unsigned __int16 *)(v17 + 436) <= 0x8Fu)
  {
    if (*(_DWORD *)(v17 + 432))
    {
      if (*(_BYTE *)(v17 + 103)) {
        goto LABEL_4;
      }
    }

    else
    {
      ++*(_DWORD *)(v17 + 452);
    }

    goto LABEL_25;
  }

  uint64_t v16 = *(void *)(v17 + 472);
  if (v16)
  {
    uint64_t v19 = (void *)(v17 + 472);
LABEL_23:
    void *v19 = *(void *)v16;
    ++*(_DWORD *)(v17 + 448);
LABEL_27:
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    if (a2) {
      char v20 = a2;
    }
    else {
      char v20 = 89;
    }
    *(_BYTE *)(v16 + 32) = v20;
    *(_BYTE *)(v16 + 33) = v12;
    *(_BYTE *)(v16 + 34) = v10;
    if (!v8) {
      int v8 = (*(unsigned __int8 *)(*a1 + 96) << 30 >> 31) & 0x42;
    }
    *(_BYTE *)(v16 + 36) = v8;
    *(_BYTE *)(v16 + 35) = v15;
    *(void *)(v16 + 48) = sub_18134A400(a1, (uint64_t)a6);
    *(void *)(v16 + 40) = sub_18134A400(a1, (uint64_t)a4);
    return v16;
  }

  uint64_t v16 = *(void *)(v17 + 464);
  if (v16)
  {
    uint64_t v19 = (void *)(v17 + 464);
    goto LABEL_23;
  }

  ++*(_DWORD *)(v17 + 456);
LABEL_25:
  uint64_t v18 = sub_1812F2440(v17, 144LL);
LABEL_26:
  uint64_t v16 = v18;
  if (v18) {
    goto LABEL_27;
  }
LABEL_4:
  if (a6) {
    sub_181309110((void *)*a1, a6);
  }
  if (a4) {
    sub_181309110((void *)*a1, a4);
  }
  return 0LL;
}

uint64_t sub_181319B54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40LL * (int)result;
  *(_BYTE *)uint64_t v10 = a2;
  *(_OWORD *)(v10 + 1) = 0u;
  *(_OWORD *)(v10 + 17) = 0u;
  *(void *)(v10 + 32) = 0LL;
  return result;
}

uint64_t sub_181319BA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40LL * (int)result;
  *(_BYTE *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_BYTE *)(v10 + 1) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  return result;
}

uint64_t sub_181319C00(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(result + 16))
  {
    uint64_t v5 = result;
    uint64_t result = sub_18128CF10();
    if ((_DWORD)result != (_DWORD)a3)
    {
      uint64_t v9 = result;
      if (a2 && ((a2[6] & 0x40) != 0 || *a2 == 176)) {
        uint64_t v10 = 80LL;
      }
      else {
        uint64_t v10 = 81LL;
      }
      uint64_t result = *(void *)(v5 + 16);
      int v11 = *(_DWORD *)(result + 144);
      if (*(_DWORD *)(result + 148) <= v11)
      {
        return sub_18131044C(result, v10, v9, a3, 0LL, v6, v7, v8);
      }

      else
      {
        *(_DWORD *)(result + 144) = v11 + 1;
        uint64_t v12 = *(void *)(result + 136) + 40LL * v11;
        *(_BYTE *)uint64_t v12 = v10;
        *(_WORD *)(v12 + 2) = 0;
        *(_DWORD *)(v12 + 4) = v9;
        *(_DWORD *)(v12 + 8) = a3;
        *(_BYTE *)(v12 + 1) = 0;
        *(void *)(v12 + 12) = 0LL;
        *(void *)(v12 + 28) = 0LL;
        *(void *)(v12 + 20) = 0LL;
        *(_DWORD *)(v12 + 36) = 0;
      }
    }
  }

  return result;
}

uint64_t sub_181319CC8( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v8) {
    return sub_18131044C(result, 9LL, 0LL, a2, 0LL, a6, a7, a8);
  }
  *(_DWORD *)(result + 144) = v8 + 1;
  uint64_t v9 = *(void *)(result + 136) + 40LL * v8;
  *(void *)uint64_t v9 = 9LL;
  *(_DWORD *)(v9 + 8) = a2;
  *(void *)(v9 + 12) = 0LL;
  *(void *)(v9 + 28) = 0LL;
  *(void *)(v9 + 20) = 0LL;
  *(_DWORD *)(v9 + 36) = 0;
  return result;
}

void sub_181319D20(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  if (a2 != 1)
  {
    if (*(_BYTE *)(*(void *)(*(void *)(*(void *)a1 + 32LL) + 32LL * a2 + 8) + 17LL)) {
      sub_181319DC4(a1, a2, a3, a4, a5);
    }
  }

void *sub_181319D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (void *)sub_181319FB0((_DWORD *)a1, a2);
  if (result)
  {
    if (*(_BYTE *)(*(void *)v2 + 103LL))
    {
      if (!*(void *)(*(void *)v2 + 816LL) && (*(_DWORD *)result)-- == 1) {
        return sub_1813014B0((void *)result[2], result);
      }
    }

    else
    {
      uint64_t v5 = *(void *)(v2 + 136) + 40LL * *(int *)(v2 + 144);
      *(_BYTE *)(v5 - 39) = -8;
      *(void *)(v5 - 24) = result;
    }
  }

  return result;
}

void sub_181319DC4(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  char v6 = a4;
  if (*(void *)(a1 + 168)) {
    uint64_t v9 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v9 = a1;
  }
  int v10 = *(_DWORD *)(v9 + 148);
  int v11 = *(void **)(v9 + 152);
  if (v10 < 1)
  {
    int v14 = 24 * v10 + 24;
    uint64_t v15 = *(void *)v9;
    unint64_t v16 = v14;
    if (!v11)
    {
      uint64_t v17 = sub_1812F2264(*(void *)v9, v14);
      *(void *)(v9 + 152) = v17;
      if (v17) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v12 = (BOOL *)(v11 + 1);
    uint64_t v13 = *(unsigned int *)(v9 + 148);
    do
    {
      if (*((_DWORD *)v12 - 2) == a2 && *((_DWORD *)v12 - 1) == a3)
      {
        *uint64_t v12 = (*v12 | a4) != 0;
        return;
      }

      v12 += 24;
      --v13;
    }

    while (v13);
    int v14 = 24 * v10 + 24;
    uint64_t v15 = *(void *)v9;
    unint64_t v16 = v14;
  }

  if (*(void *)(v15 + 512) > (unint64_t)v11)
  {
    if (*(void *)(v15 + 496) <= (unint64_t)v11)
    {
      if (v14 < 0x81)
      {
LABEL_16:
        uint64_t v17 = *(void *)(v9 + 152);
LABEL_19:
        *(void *)(v9 + 152) = v17;
LABEL_20:
        int v18 = *(_DWORD *)(v9 + 148);
        *(_DWORD *)(v9 + 148) = v18 + 1;
        uint64_t v19 = v17 + 24LL * v18;
        *(_DWORD *)uint64_t v19 = a2;
        *(_DWORD *)(v19 + 4) = a3;
        *(_BYTE *)(v19 + 8) = v6;
        *(void *)(v19 + 16) = a5;
        return;
      }
    }

    else if (*(void *)(v15 + 504) <= (unint64_t)v11 && v16 <= *(unsigned __int16 *)(v15 + 438))
    {
      goto LABEL_16;
    }
  }

  uint64_t v17 = sub_1812F2310(v15, *(void **)(v9 + 152), v16);
  if (v17) {
    goto LABEL_19;
  }
  sub_1812F20DC((void *)v15, v11);
  *(void *)(v9 + 152) = 0LL;
LABEL_23:
  *(_DWORD *)(v9 + 148) = 0;
  uint64_t v26 = *(void *)v9;
  if (!*(_BYTE *)(*(void *)v9 + 103LL) && !*(_BYTE *)(v26 + 104))
  {
    *(_BYTE *)(v26 + 103) = 1;
    ++*(_DWORD *)(v26 + 432);
    *(_WORD *)(v26 + 436) = 0;
    uint64_t v27 = *(void *)(v26 + 344);
    if (v27)
    {
      sub_1812DC47C(v27, "out of memory", v20, v21, v22, v23, v24, v25, v29);
      for (uint64_t i = *(void *)(v26 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

uint64_t sub_181319FB0(_DWORD *a1, uint64_t a2)
{
  if (a1[12]) {
    return 0LL;
  }
  uint64_t v6 = *(unsigned __int16 *)(a2 + 96);
  uint64_t v7 = *(void *)a1;
  if ((*(_WORD *)(a2 + 99) & 8) != 0)
  {
    int v8 = *(unsigned __int16 *)(a2 + 94);
    int v9 = v6 - v8;
  }

  else
  {
    int v8 = *(unsigned __int16 *)(a2 + 96);
    int v9 = 0;
  }

  uint64_t v2 = sub_18131A140(v7, v8, v9);
  if (v2)
  {
    if ((_DWORD)v6)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v12 = *(void *)(a2 + 64);
        uint64_t v13 = *(char **)(v12 + 8 * i);
        if (v13 == "BINARY")
        {
          uint64_t v11 = 0LL;
        }

        else
        {
          uint64_t v14 = *(unsigned __int8 *)(*(void *)a1 + 100LL);
          int v15 = *(unsigned __int8 *)(*(void *)a1 + 197LL);
          unint64_t v16 = sub_18130D3EC(*(void *)a1, *(unsigned __int8 *)(*(void *)a1 + 100LL), *(char **)(v12 + 8 * i), v15);
          uint64_t v11 = (uint64_t)v16;
          if (!v15 && (!v16 || !v16[3])) {
            uint64_t v11 = sub_181311FC8((uint64_t)a1, v14, (uint64_t)v16, v13, v17, v18, v19, v20);
          }
        }

        *(void *)(v2 + 32 + 8 * i) = v11;
        *(_BYTE *)(*(void *)(v2 + 24) + i) = *(_BYTE *)(*(void *)(a2 + 56) + i);
      }
    }

    if (a1[12])
    {
      if ((*(_WORD *)(a2 + 99) & 0x100) == 0)
      {
        *(_WORD *)(a2 + 99) |= 0x100u;
        a1[6] = 513;
      }

      if ((*(_DWORD *)v2)-- == 1) {
        sub_1813014B0(*(void **)(v2 + 16), (void *)v2);
      }
      return 0LL;
    }
  }

  return v2;
}

void *sub_18131A104(void *result, uint64_t a2, char a3)
{
  if (*(_BYTE *)(*result + 103LL)) {
    return sub_18127ABFC((void *)*result, a3, a2);
  }
  uint64_t v3 = result[17] + 40LL * *((int *)result + 36);
  *(_BYTE *)(v3 - 39) = a3;
  *(void *)(v3 - 24) = a2;
  return result;
}

uint64_t sub_18131A140(uint64_t a1, int a2, int a3)
{
  __int16 v3 = a2;
  int v5 = a3 + a2;
  size_t v6 = 9 * (a3 + a2) - 8;
  uint64_t v7 = sub_1812F2264(a1, v6 + 40);
  if (v7)
  {
    uint64_t v14 = v7;
    *(_WORD *)(v7 + 6) = v3;
    *(_WORD *)(v7 + 8) = v5;
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(a1 + 100);
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = v7 + 8LL * v5 + 32;
    *(_DWORD *)uint64_t v7 = 1;
    bzero((void *)(v7 + 40), v6);
  }

  else
  {
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v16 = *(void *)(a1 + 344);
    if (!v16) {
      return 0LL;
    }
    sub_1812DC47C(v16, "out of memory", v8, v9, v10, v11, v12, v13, v19);
    uint64_t v17 = *(void *)(a1 + 344);
    *(_DWORD *)(v17 + 24) = 7;
    uint64_t v18 = *(void *)(v17 + 256);
    if (!v18)
    {
      return 0LL;
    }

    else
    {
      uint64_t v14 = 0LL;
      do
      {
        ++*(_DWORD *)(v18 + 48);
        *(_DWORD *)(v18 + 24) = 7;
        uint64_t v18 = *(void *)(v18 + 256);
      }

      while (v18);
    }
  }

  return v14;
}

uint64_t sub_18131A248(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned int *)(v3 + 8);
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = *(_DWORD *)(a1 + 64);
      if (v8)
      {
        if ((_DWORD)v7 != v8 - 1) {
          goto LABEL_4;
        }
        uint64_t v7 = 0xFFFFFFFFLL;
      }
    }

uint64_t sub_18131A4C0(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0 && (*(_DWORD *)(a1 + 48) & 0x20) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (a2)
    {
      if (a2 >= 0x11)
      {
        uint64_t v5 = a2 & 0xF;
        if ((a2 & 0xF) == 0) {
          uint64_t v5 = 16LL;
        }
        uint64_t v3 = a2 - v5;
        uint64_t v6 = v2 + 142;
        int16x8_t v7 = 0uLL;
        v8.i64[0] = 0x1000100010001LL;
        v8.i64[1] = 0x1000100010001LL;
        uint64_t v9 = v3;
        int16x8_t v10 = 0uLL;
        do
        {
          int8x16_t v11 = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 64), (int8x16_t)xmmword_1813CDDC0);
          v11.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
          v12.i32[0] = vzip1q_s16(*(int16x8_t *)(v6 - 128), *(int16x8_t *)(v6 - 112)).u32[0];
          v12.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
          v12.i64[1] = v11.i64[1];
          uint16x8_t v13 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v6 + 96), (int8x16_t)xmmword_1813CDDB0);
          int8x16x2_t v21 = *(int8x16x2_t *)(v6 + 32);
          int8x16_t v14 = vqtbl2q_s8(*(int8x16x2_t *)(v6 + 64), (int8x16_t)xmmword_1813CDDC0);
          int16x8_t v16 = *(int16x8_t *)v6;
          int16x8_t v15 = *(int16x8_t *)(v6 + 16);
          v6 += 256LL;
          v14.i32[3] = v13.i32[3];
          v13.i32[0] = vzip1q_s16(v16, v15).u32[0];
          v13.i32[1] = vqtbl2q_s8(v21, (int8x16_t)xmmword_1813CDDD0).i32[1];
          v13.i64[1] = v14.i64[1];
          int16x8_t v7 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v12, 5uLL)), v7);
          int16x8_t v10 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v13, 5uLL)), v10);
          v9 -= 16LL;
        }

        while (v9);
        __int16 v4 = vaddvq_s16(vaddq_s16(v10, v7));
      }

      else
      {
        uint64_t v3 = 0LL;
        __int16 v4 = 0;
      }

      uint64_t v17 = (unsigned __int16 *)(v2 + 16 * v3 + 14);
      uint64_t v18 = a2 - v3;
      do
      {
        unsigned int v19 = *v17;
        v17 += 8;
        v4 += ((v19 >> 5) & 1) == 0;
        --v18;
      }

      while (v18);
    }

    else
    {
      __int16 v4 = 0;
    }

    if ((*(_WORD *)(v2 + 16LL * a2 + 14) & 0x20) == 0) {
      return v4;
    }
    LOWORD(a2) = a2 - v4 + *(_WORD *)(a1 + 56);
  }

  return (__int16)a2;
}

uint64_t sub_18131A600( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 16);
  int v13 = *(_DWORD *)(result + 48);
  int v14 = *(_DWORD *)(result + 64);
  uint64_t v15 = (v14 - 1);
  if (v14 < 1)
  {
    int v16 = 0;
    int v18 = *(unsigned __int16 *)(a3 + 12);
    if (!*(_WORD *)(a3 + 12)) {
      goto LABEL_9;
    }
  }

  else
  {
    int v16 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v16)
    {
      uint64_t result = sub_18131044C(*(void *)(result + 16), 20LL, v15, 0LL, a4, a6, a7, a8);
      int v16 = result;
      int v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12))
      {
LABEL_9:
        unsigned int v19 = 0LL;
        uint64_t v20 = *(void *)v11;
        goto LABEL_10;
      }
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v16 + 1;
      uint64_t v17 = *(void *)(v12 + 136) + 40LL * v16;
      *(_DWORD *)uint64_t v17 = 20;
      *(_DWORD *)(v17 + 4) = v15;
      *(_DWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 12) = a4;
      *(void *)(v17 + 24) = 0LL;
      *(void *)(v17 + 32) = 0LL;
      *(void *)(v17 + 16) = 0LL;
      int v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12)) {
        goto LABEL_9;
      }
    }
  }

  if (*(_BYTE *)(a2 + 63)) {
    goto LABEL_9;
  }
  uint64_t v24 = *(_DWORD **)(a2 + 80);
  if (!v24 || *v24 < v18) {
    goto LABEL_9;
  }
  uint64_t v25 = *(unsigned __int8 **)&v24[6 * (v18 - 1) + 2];
  uint64_t v20 = *(void *)v11;
  if (v25)
  {
    uint64_t result = (uint64_t)sub_18129C928(*(void *)v11, v25, 0LL, 0LL);
    unsigned int v19 = (unsigned __int8 *)result;
  }

  else
  {
    unsigned int v19 = 0LL;
  }

BOOL sub_18131A7C0(uint64_t a1)
{
  while (1)
  {
    int v1 = *(_DWORD *)(a1 + 4);
    if ((v1 & 0x82000) == 0) {
      break;
    }
    if ((v1 & 0x80000) != 0) {
      a1 = *(void *)(*(void *)(a1 + 32) + 8LL);
    }
    else {
      a1 = *(void *)(a1 + 16);
    }
  }

  return *(_BYTE *)(*(void *)(a1 + 8) + 4LL) == 0;
}

uint64_t *sub_18131A804(uint64_t *result, char *__s, int a3, uint64_t a4)
{
  if (__s)
  {
    int16x8_t v7 = result;
    int v8 = strlen(__s);
    sub_1812B8054((unsigned __int8 *)__s, &v11, v8 & 0x3FFFFFFF, 1);
    if (a3) {
      double v11 = -v11;
    }
    uint64_t v9 = (double *)sub_1812F2264(*v7, 8uLL);
    if (v9) {
      *uint64_t v9 = v11;
    }
    return (uint64_t *)sub_1812B9B68(v7, 153LL, 0LL, a4, 0LL, (uint64_t)v9, 4294967284LL, v10);
  }

  return result;
}

uint64_t sub_18131A8A4(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  __int16 v4 = a2;
  if (!a2) {
    goto LABEL_12;
  }
  while (1)
  {
    int v6 = *((_DWORD *)v4 + 1);
    if ((v6 & 0x82000) == 0) {
      break;
    }
    if ((v6 & 0x80000) != 0)
    {
      __int16 v4 = *(unsigned __int8 **)(*((void *)v4 + 4) + 8LL);
      if (!v4) {
        goto LABEL_12;
      }
    }

    else
    {
      __int16 v4 = (unsigned __int8 *)*((void *)v4 + 2);
      if (!v4) {
        goto LABEL_12;
      }
    }
  }

  if (*(_BYTE *)(a1 + 35)
    && *v4 != 176
    && (__int16 v12 = 2, v11[1] = sub_18129C78C, v11[2] = sub_18131C570, v13 = 0, sub_18131C57C((uint64_t)v11, (uint64_t)v4), v12))
  {
    *a3 = 0;
    return sub_18131A9E0((void **)a1, v4, 0xFFFFFFFFLL);
  }

  else
  {
LABEL_12:
    if (*(_BYTE *)(a1 + 31))
    {
      unsigned __int8 v8 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v8;
      uint64_t v9 = *(unsigned int *)(a1 + 4LL * v8 + 224);
    }

    else
    {
      uint64_t v9 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v9;
    }

    uint64_t result = sub_18128CF10(a1, v4, v9);
    if ((_DWORD)result != (_DWORD)v9 && (_DWORD)v9)
    {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 31);
      if (v10 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v10 + 1;
        *(_DWORD *)(a1 + 4 * v10 + 224) = v9;
      }

      LODWORD(v9) = 0;
    }

    *a3 = v9;
  }

  return result;
}

uint64_t sub_18131A9E0(void **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v6 = (int *)a1[11];
  if ((a3 & 0x80000000) == 0 || !v6 || *v6 < 1)
  {
LABEL_9:
    if (a2)
    {
      uint64_t v9 = sub_18129C928((uint64_t)*a1, a2, 0LL, 0LL);
      a2 = (unsigned __int8 *)v9;
      if (v9)
      {
        if ((v9[1] & 8) != 0)
        {
          int v18 = a1[2];
          int v19 = *((_DWORD *)v18 + 36);
          if (*((_DWORD *)v18 + 37) <= v19)
          {
            int v19 = sub_18131044C((uint64_t)a1[2], 15LL, 0LL, 0LL, 0LL, v10, v11, v12);
          }

          else
          {
            *((_DWORD *)v18 + 36) = v19 + 1;
            uint64_t v20 = v18[17] + 40LL * v19;
            *(_BYTE *)uint64_t v20 = 15;
            *(_OWORD *)(v20 + 1) = 0u;
            *(_OWORD *)(v20 + 17) = 0u;
            *(void *)(v20 + 32) = 0LL;
          }

          *((_BYTE *)a1 + 35) = 0;
          if (!*((_BYTE *)*a1 + 103))
          {
            if ((v3 & 0x80000000) != 0)
            {
              uint64_t v3 = (*((_DWORD *)a1 + 14) + 1);
              *((_DWORD *)a1 + 14) = v3;
            }

            if (a1[2])
            {
              uint64_t v21 = sub_18128CF10(a1, a2, v3);
              if ((_DWORD)v21 != (_DWORD)v3)
              {
                uint64_t v25 = v21;
                uint64_t v26 = 80LL;
                if ((a2[6] & 0x40) == 0)
                {
                  if (*a2 == 176) {
                    uint64_t v26 = 80LL;
                  }
                  else {
                    uint64_t v26 = 81LL;
                  }
                }

                uint64_t v27 = (uint64_t)a1[2];
                int v28 = *(_DWORD *)(v27 + 144);
                if (*(_DWORD *)(v27 + 148) <= v28)
                {
                  sub_18131044C(v27, v26, v25, v3, 0LL, v22, v23, v24);
                }

                else
                {
                  *(_DWORD *)(v27 + 144) = v28 + 1;
                  uint64_t v29 = *(void *)(v27 + 136) + 40LL * v28;
                  *(_BYTE *)uint64_t v29 = v26;
                  *(_WORD *)(v29 + 2) = 0;
                  *(_DWORD *)(v29 + 4) = v25;
                  *(_DWORD *)(v29 + 8) = v3;
                  *(_BYTE *)(v29 + 1) = 0;
                  *(void *)(v29 + 12) = 0LL;
                  *(void *)(v29 + 28) = 0LL;
                  *(void *)(v29 + 20) = 0LL;
                  *(_DWORD *)(v29 + 36) = 0;
                }
              }
            }
          }

          *((_BYTE *)a1 + 35) = 1;
          sub_181309110(*a1, a2);
          if (*(_BYTE *)(*v18 + 103LL)) {
            dword_18C550688 = *((_DWORD *)v18 + 36);
          }
          else {
            *(_DWORD *)(v18[17] + 40LL * v19 + 8) = *((_DWORD *)v18 + 36);
          }
          return v3;
        }
      }
    }

    if (v6)
    {
      int v13 = *v6;
      if (v6[1] > *v6)
      {
        *int v6 = v13 + 1;
        int v14 = &v6[6 * v13];
        *((void *)v14 + 2) = 0LL;
        *((void *)v14 + 3) = 0LL;
        *((void *)v14 + 1) = a2;
        goto LABEL_18;
      }

      uint64_t v15 = sub_18133E1F4((uint64_t)*a1, v6, a2);
    }

    else
    {
      uint64_t v15 = (int *)sub_18133E190(*a1, a2);
    }

    int v6 = v15;
    if (!v15)
    {
LABEL_21:
      a1[11] = v6;
      return v3;
    }

uint64_t sub_18131AC98( uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(uint64_t **)(a1 + 16);
  switch(a3)
  {
    case 0:
      uint64_t v12 = *(unsigned int *)a2;
      int v13 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v13 - 1;
      sub_181319C00(a1, a2[1], a4);
      if ((int)v12 >= 2)
      {
        uint64_t v17 = a2 + 4;
        uint64_t v18 = v12 - 1;
        do
        {
          int v21 = *((_DWORD *)v11 + 36);
          if (*((_DWORD *)v11 + 37) > v21)
          {
            *((_DWORD *)v11 + 36) = v21 + 1;
            uint64_t v19 = v11[17] + 40LL * v21;
            *(_DWORD *)uint64_t v19 = 51;
            *(_DWORD *)(v19 + 4) = v8;
            *(_DWORD *)(v19 + 8) = v13 - 1;
            *(void *)(v19 + 12) = 0LL;
            *(void *)(v19 + 28) = 0LL;
            *(void *)(v19 + 20) = 0LL;
            *(_DWORD *)(v19 + 36) = 0;
          }

          else
          {
            sub_18131044C((uint64_t)v11, 51LL, v8, (v13 - 1), 0LL, v14, v15, v16);
          }

          uint64_t v20 = *v17;
          v17 += 3;
          sub_181319C00(a1, v20, v8);
          --v18;
        }

        while (v18);
      }

      if (*(_BYTE *)(*v11 + 103)) {
        uint64_t v32 = &byte_18C550680;
      }
      else {
        uint64_t v32 = (char *)(v11[17] + 40LL * *((int *)v11 + 36) - 40);
      }
      if (*v32 == 80)
      {
        int v35 = *((_DWORD *)v11 + 36);
        BOOL v36 = __OFSUB__(v35, 1);
        int v37 = v35 - 1;
        if (v37 < 0 == v36) {
          *(_WORD *)(v11[17] + 40LL * v37 + 2) = 1;
        }
      }

      uint64_t v38 = v11[3];
      int v39 = -v13;
      if (*(_DWORD *)(v38 + 68) + *(_DWORD *)(v38 + 72) < 0) {
        sub_18131E420(v38, (uint64_t)v11, v39);
      }
      else {
        *(_DWORD *)(*(void *)(v38 + 80) + 4LL * v39) = *((_DWORD *)v11 + 36);
      }
      return v8;
    case 1:
      uint64_t v22 = a2[4];
      if (*v22 == 167)
      {
        uint64_t v23 = sub_18131C8FC((uint64_t)a2[1], *((unsigned int *)v22 + 11), 1LL);
LABEL_12:
        uint64_t v24 = v23;
        int v25 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) > v25)
        {
          *((_DWORD *)v11 + 36) = v25 + 1;
          uint64_t v26 = v11[17] + 40LL * v25;
          *(_DWORD *)uint64_t v26 = 71;
          *(_DWORD *)(v26 + 4) = v23;
LABEL_14:
          *(_DWORD *)(v26 + 8) = v8;
          *(void *)(v26 + 12) = 0LL;
          *(void *)(v26 + 28) = 0LL;
          *(void *)(v26 + 20) = 0LL;
          *(_DWORD *)(v26 + 36) = 0;
          return v8;
        }

        uint64_t v27 = (uint64_t)v11;
        uint64_t v28 = 71LL;
      }

      else
      {
        int v34 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) > v34)
        {
          *((_DWORD *)v11 + 36) = v34 + 1;
          uint64_t v26 = v11[17] + 40LL * v34;
          *(void *)uint64_t v26 = 75LL;
          goto LABEL_14;
        }

        uint64_t v27 = *(void *)(a1 + 16);
        uint64_t v28 = 75LL;
        uint64_t v24 = 0LL;
      }

      sub_18131044C(v27, v28, v24, v8, 0LL, a6, a7, a8);
      return v8;
    case 2:
      uint64_t v23 = sub_18131C854(a1, a2[1], a2[4], 0xFFFFFFFFLL);
      goto LABEL_12;
    case 3:
      uint64_t v23 = sub_18131BA10(0LL, a2[1], a2[4], 0xFFFFFFFFLL);
      goto LABEL_12;
    case 4:
      int v29 = sub_1812A3C7C(a2[1]);
      if (v29 >= 65) {
        uint64_t v31 = off_189B6E5A0[v29 - 65];
      }
      else {
        uint64_t v31 = "none";
      }
      sub_1812B9B68(v11, 117LL, 0LL, v8, 0LL, (uint64_t)v31, 0LL, v30);
      return v8;
    case 5:
      memset(&v40[3], 0, 32);
      memset(v40, 0, 32);
      LOBYTE(v40[0]) = -99;
      v40[2] = (unint64_t)a2;
      return sub_18128CF10(a1, v40, a4);
    default:
      return sub_18128CF10(a1, a2[1], a4);
  }

void sub_18131AFDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a2 + 7) & 0x40) != 0
    && ((*(_BYTE *)(a3 + 6) & 8) != 0 || (*(_BYTE *)(*(void *)a1 + 48LL) & 0x80) == 0))
  {
    sub_1812DC47C(a1, "unsafe use of %#T()", a3, a4, a5, a6, a7, a8, a2);
  }

uint64_t sub_18131B020(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    if (*(_BYTE *)(a1 + 31))
    {
      unsigned __int8 v2 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v2;
      return *(unsigned int *)(a1 + 4LL * v2 + 224);
    }

    else
    {
      uint64_t v8 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v8;
      return v8;
    }
  }

  else
  {
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = v4 - a2;
    if (v4 >= a2)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v5;
      *(_DWORD *)(a1 + 44) = v7 + a2;
      return v7;
    }

    else
    {
      int v6 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 56) = v6 + a2;
      return (v6 + 1);
    }
  }

uint64_t sub_18131B090( uint64_t result, _DWORD *a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  if ((int)*a2 >= 1)
  {
    uint64_t v10 = (void **)result;
    int v11 = 0;
    uint64_t v12 = a5 & 1 ^ 0x51u;
    uint64_t v13 = *(void *)(result + 16);
    if (*(_BYTE *)(result + 35)) {
      char v14 = a5;
    }
    else {
      char v14 = a5 & 0xFD;
    }
    int v27 = a4 - 1;
    for (uint64_t i = a2 + 7; ; i += 12)
    {
      uint64_t v16 = *(unsigned __int8 **)(i - 10);
      if ((v14 & 4) != 0)
      {
        if (*i) {
          break;
        }
      }

      if ((v14 & 2) != 0
        && ((__int16 v31 = 2, v29 = sub_18129C78C, v30 = sub_18131C570, v32 = 0, !v16)
         || (sub_18131C57C((uint64_t)v28, (uint64_t)v16), v31)))
      {
        uint64_t result = sub_18131A9E0(v10, v16, (v11 + a3));
      }

      else
      {
        int v21 = v11 + a3;
        uint64_t result = sub_18128CF10(v10, v16, (v11 + a3));
        if ((_DWORD)result != v11 + a3)
        {
          uint64_t v17 = result;
          if ((_DWORD)v12 == 80)
          {
            uint64_t v22 = &byte_18C550680;
            if (!*(_BYTE *)(*(void *)v13 + 103LL)) {
              uint64_t v22 = (char *)(*(void *)(v13 + 136) + 40LL * *(int *)(v13 + 144) - 40);
            }
            if (*v22 == 80)
            {
              int v23 = *((_DWORD *)v22 + 3) + 1;
              if (v23 + *((_DWORD *)v22 + 1) == (_DWORD)result
                && v23 + *((_DWORD *)v22 + 2) == v21
                && !*((_WORD *)v22 + 1))
              {
                *((_DWORD *)v22 + 3) = v23;
                goto LABEL_7;
              }
            }
          }

          int v24 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) <= v24)
          {
            uint64_t v25 = v13;
            uint64_t v26 = v12;
            uint64_t v18 = (v11 + a3);
LABEL_31:
            uint64_t result = sub_18131044C(v25, v26, v17, v18, 0LL, a6, a7, a8);
            goto LABEL_7;
          }

          *(_DWORD *)(v13 + 144) = v24 + 1;
          uint64_t v20 = *(void *)(v13 + 136) + 40LL * v24;
          *(_BYTE *)uint64_t v20 = v12;
          *(_WORD *)(v20 + 2) = 0;
          *(_DWORD *)(v20 + 4) = result;
          *(_DWORD *)(v20 + 8) = v21;
LABEL_24:
          *(_BYTE *)(v20 + 1) = 0;
          *(void *)(v20 + 12) = 0LL;
          *(void *)(v20 + 28) = 0LL;
          *(void *)(v20 + 20) = 0LL;
          *(_DWORD *)(v20 + 36) = 0;
        }
      }

void *sub_18131B2D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  char v9 = a5;
  uint64_t v14 = a1[2];
  uint64_t result = (void *)sub_1812F2264(*a1, 8 * a5 + 48);
  if (result)
  {
    void *result = 0LL;
    result[1] = a6;
    result[3] = 0LL;
    *((_BYTE *)result + 42) = v9;
    *((_DWORD *)result + 8) = *(_DWORD *)(v14 + 144);
    *((_DWORD *)result + 9) = 0;
    if (a7) {
      uint64_t v17 = 65LL;
    }
    else {
      uint64_t v17 = 66LL;
    }
    uint64_t result = (void *)sub_1812B9B68((uint64_t *)v14, v17, a2, a3, a4, (uint64_t)result, 4294967281LL, v16);
    int v18 = *(_DWORD *)(v14 + 144);
    BOOL v19 = __OFSUB__(v18, 1);
    int v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *(_WORD *)(*(void *)(v14 + 136) + 40LL * v20 + 2) = a7 & 0x2E;
    }
    int v21 = (uint64_t *)a1[21];
    if (!v21) {
      int v21 = a1;
    }
    *((_BYTE *)v21 + 33) = 1;
  }

  else if ((*(_BYTE *)(a6 + 4) & 0x10) != 0)
  {
    return sub_1813014B0((void *)*a1, (void *)a6);
  }

  return result;
}

uint64_t sub_18131B3E0(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 24);
  int v4 = ~a2;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
    return sub_18131E420(result, a1, v4);
  }
  *(_DWORD *)(*(void *)(result + 80) + 4LL * v4) = *(_DWORD *)(a1 + 144);
  return result;
}

unsigned int *sub_18131B410( unsigned int *result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __int128 *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (uint64_t)result;
  int v32 = 0;
  uint64_t v13 = *(void *)result;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  uint64_t v14 = *(unsigned __int8 **)(a2 + 16);
  if (v14)
  {
    uint64_t result = sub_18129C928(v13, v14, 0LL, 0LL);
    uint64_t v15 = result;
    if (*(_BYTE *)(v13 + 103)) {
      goto LABEL_26;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    if (*(_BYTE *)(v13 + 103)) {
      goto LABEL_26;
    }
  }

  LOBYTE(v43) = 44;
  *(void *)&__int128 v44 = &v38;
  *((void *)&v44 + 1) = &v33;
  LOBYTE(v38) = 57;
  *(void *)&__int128 v39 = v15;
  uint64_t v16 = *(void *)(a2 + 32);
  *((void *)&v39 + 1) = *(void *)(v16 + 8);
  LOBYTE(v33) = 55;
  uint64_t v17 = *(void *)(v16 + 32);
  *(void *)&__int128 v34 = v15;
  *((void *)&v34 + 1) = v17;
  int v18 = *(unsigned __int8 *)v15;
  int v19 = v18;
  if (v18 == 176) {
    int v19 = *((unsigned __int8 *)v15 + 2);
  }
  if (v19 == 138)
  {
    int v20 = (unsigned int **)(*((void *)v15 + 4) + 32LL);
  }

  else
  {
    if (v19 != 177)
    {
LABEL_12:
      unsigned int v22 = sub_18131A8A4(v12, (unsigned __int8 *)v15, &v32);
LABEL_13:
      unsigned int v23 = v22;
      goto LABEL_14;
    }

    int v20 = (unsigned int **)(v15 + 8);
  }

  uint64_t v21 = **v20;
  if ((_DWORD)v21 == 1) {
    goto LABEL_12;
  }
  int v32 = 0;
  if (v18 == 138)
  {
    unsigned int v22 = sub_1812B3EB0((void **)v12, (unsigned __int8 *)v15, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_13;
  }

  int v28 = *(_DWORD *)(v12 + 56);
  unsigned int v23 = v28 + 1;
  *(_DWORD *)(v12 + 56) = v28 + v21;
  if ((int)v21 >= 1)
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = 24 * v21;
    uint64_t v31 = (v28 + 1);
    do
    {
      sub_18131E5AC((void *)v12, *(void *)(*((void *)v15 + 4) + v29 + 8), v31);
      v29 += 24LL;
      uint64_t v31 = (v31 + 1);
    }

    while (v30 != v29);
  }

uint64_t sub_18131B69C(uint64_t result, int a2)
{
  if (result)
  {
    while (1)
    {
      int v3 = *(_DWORD *)(result + 4);
      if ((v3 & 0x82000) == 0) {
        break;
      }
      if ((v3 & 0x80000) != 0) {
        unsigned __int8 v2 = (uint64_t *)(*(void *)(result + 32) + 8LL);
      }
      else {
        unsigned __int8 v2 = (uint64_t *)(result + 16);
      }
      uint64_t result = *v2;
      if (!*v2) {
        return result;
      }
    }

    *(_BYTE *)(result + 2) = *(_BYTE *)result;
    *(_BYTE *)uint64_t result = -80;
    *(_DWORD *)(result + 44) = a2;
    *(_DWORD *)(result + 4) = v3 & 0xFFFFDFFF;
  }

  return result;
}

uint64_t sub_18131B6F4( uint64_t a1, unsigned __int8 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *a2;
  int v11 = v10;
  if (v10 == 176) {
    int v11 = a2[2];
  }
  if (v11 == 138)
  {
    uint64_t v12 = (unsigned int **)(*((void *)a2 + 4) + 32LL);
  }

  else
  {
    if (v11 != 177) {
      return sub_18131A8A4(a1, a2, a3);
    }
    uint64_t v12 = (unsigned int **)(a2 + 32);
  }

  uint64_t v13 = **v12;
  if ((_DWORD)v13 == 1) {
    return sub_18131A8A4(a1, a2, a3);
  }
  *a3 = 0;
  if (v10 == 138) {
    return sub_1812B3EB0((void **)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  int v15 = *(_DWORD *)(a1 + 56);
  unsigned int v21 = v15 + 1;
  *(_DWORD *)(a1 + 56) = v15 + v13;
  if ((int)v13 >= 1)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 24 * v13;
    uint64_t v18 = v21;
    while (1)
    {
      int v19 = *(unsigned __int8 **)(*((void *)a2 + 4) + v16 + 8);
      if (*(_BYTE *)(a1 + 35)) {
        break;
      }
      int v20 = *(void **)a1;
      if (v19) {
        goto LABEL_20;
      }
LABEL_21:
      if (*((_BYTE *)v20 + 103))
      {
        if (!v19) {
          goto LABEL_14;
        }
LABEL_25:
        sub_181309110(v20, v19);
        goto LABEL_14;
      }

      sub_181319C00(a1, v19, v18);
      if (v19) {
        goto LABEL_25;
      }
LABEL_14:
      uint64_t v18 = (v18 + 1);
      v16 += 24LL;
      if (v17 == v16) {
        return v21;
      }
    }

    __int16 v25 = 2;
    unsigned int v23 = sub_18129C78C;
    int v24 = sub_18131C570;
    int v26 = 0;
    if (!v19 || (sub_18131C57C((uint64_t)v22, (uint64_t)v19), v25))
    {
      sub_18131A9E0((void **)a1, v19, v18);
      goto LABEL_14;
    }

    int v20 = *(void **)a1;
LABEL_20:
    int v19 = (unsigned __int8 *)sub_18129C928((uint64_t)v20, v19, 0LL, 0LL);
    goto LABEL_21;
  }

  return v21;
}

uint64_t sub_18131B8D8(uint64_t result)
{
  if (*(_BYTE *)(*(void *)result + 103LL)) {
    int v1 = &byte_18C550680;
  }
  else {
    int v1 = (char *)(*(void *)(result + 136) + 40LL * *(int *)(result + 144) - 40);
  }
  if (*v1 == 80)
  {
    int v2 = *(_DWORD *)(result + 144);
    BOOL v3 = __OFSUB__(v2, 1);
    int v4 = v2 - 1;
    if (v4 < 0 == v3) {
      *(_WORD *)(*(void *)(result + 136) + 40LL * v4 + 2) = 1;
    }
  }

  return result;
}

uint64_t sub_18131B934( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8 = a6;
  uint64_t v14 = a1[2];
  if (v14)
  {
    if ((_DWORD)a3 != 2) {
      goto LABEL_6;
    }
    goto LABEL_3;
  }

  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t v14 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == 2)
  {
LABEL_3:
    int v15 = (uint64_t *)a1[21];
    if (!v15) {
      int v15 = a1;
    }
    *((_BYTE *)v15 + 33) = 1;
  }

uint64_t sub_18131BA10(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a2 || !a3) {
    return 2 * (a3 != a2);
  }
  if (!a1) {
    goto LABEL_28;
  }
  if (*a2 != 156) {
    goto LABEL_28;
  }
  uint64_t v32 = 0LL;
  sub_181312474(*(void *)a1, a3, 1LL, 65LL, &v32);
  uint64_t v8 = v32;
  if (!v32) {
    goto LABEL_28;
  }
  int v9 = *((_DWORD *)a2 + 12);
  int v10 = 1 << (v9 - 1);
  if (v9 > 31) {
    int v10 = 0x80000000;
  }
  *(_DWORD *)(*(void *)(a1 + 16) + 372LL) |= v10;
  uint64_t v11 = sub_18131C01C(*(uint64_t **)(a1 + 328), v9);
  uint64_t v12 = v11;
  if (v11)
  {
    int v13 = *(unsigned __int16 *)(v11 + 20);
    if (((0x4000000040004uLL >> v13) & 1) != 0)
    {
      if ((~v13 & 0x202) == 0)
      {
        if ((v13 & 1) != 0 || *(_BYTE *)(v11 + 22) == 1) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }

      if ((v13 & 1) == 0) {
LABEL_17:
      }
        sub_181303998((int *)v11, 1);
    }

uint64_t sub_18131BE5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = 1LL;
  if (a2
    && a3
    && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32)
    && *(unsigned __int8 *)(a2 + 33) == *(unsigned __int8 *)(a3 + 33)
    && *(unsigned __int8 *)(a2 + 34) == *(unsigned __int8 *)(a3 + 34)
    && *(unsigned __int8 *)(a2 + 36) == *(unsigned __int8 *)(a3 + 36))
  {
    if (sub_18131BA10(a1, *(void *)(a2 + 40), *(void *)(a3 + 40), 0xFFFFFFFFLL)
      || sub_18131BA10(a1, *(void *)(a2 + 48), *(void *)(a3 + 48), 0xFFFFFFFFLL))
    {
      return 1LL;
    }

    else
    {
      uint64_t result = sub_18131BF58(*(void *)(a2 + 16), *(void *)(a3 + 16), 0xFFFFFFFFLL);
      if (!(_DWORD)result)
      {
        uint64_t result = sub_18131BF58(*(void *)(a2 + 24), *(void *)(a3 + 24), 0xFFFFFFFFLL);
        if (!(_DWORD)result)
        {
          if (!a4) {
            return 0LL;
          }
          uint64_t result = sub_18131BA10(a1, *(void *)(a2 + 72), *(void *)(a3 + 72), 0xFFFFFFFFLL);
          if (!(_DWORD)result) {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_18131BF58(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!(a1 | a2)) {
    return 0LL;
  }
  uint64_t result = 1LL;
  if (a1 && a2 && *(_DWORD *)a1 == *(_DWORD *)a2)
  {
    if (*(int *)a1 < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      while (*(unsigned __int8 *)(a1 + v7 + 24) == *(unsigned __int8 *)(a2 + v7 + 24))
      {
        uint64_t result = sub_18131BA10(0LL, *(void *)(a1 + v7 + 8), *(void *)(a2 + v7 + 8), a3);
        if (!(_DWORD)result)
        {
          ++v8;
          v7 += 24LL;
        }

        return result;
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t sub_18131C01C(uint64_t *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = a1[16] + ((uint64_t)a2 << 6);
  __int16 v4 = *(_WORD *)(v2 - 44);
  BOOL v3 = (_WORD *)(v2 - 44);
  if ((v4 & 1) != 0) {
    return 0LL;
  }
  uint64_t v5 = *a1;
  if (*a1)
  {
    uint64_t v6 = sub_1812F2264(*a1, 0x40uLL);
    if (!v6) {
      return v6;
    }
  }

  else
  {
    uint64_t v6 = sub_18126F0AC(64LL);
    if (!v6) {
      return v6;
    }
  }

  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)(v6 + 20) = 1;
  *(void *)(v6 + 24) = v5;
  __int128 v8 = *(_OWORD *)(v3 - 10);
  uint64_t v9 = *(void *)(v3 - 2);
  *(void *)(v6 + 16) = v9;
  *(_OWORD *)uint64_t v6 = v8;
  *(_WORD *)(v6 + 20) = WORD2(v9) & 0xEFFF;
  if ((v9 & 0x1200000000LL) != 0 && (*v3 & 0x2000) == 0)
  {
    *(_WORD *)(v6 + 20) = WORD2(v9) & 0xAFFF | 0x4000;
    sub_1812D7910((int *)v6);
  }

  return v6;
}

double sub_18131C0EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v10 = a1;
  if ((a4 & 0x80000000) != 0 || (unsigned int v11 = a4, *(__int16 *)(a2 + 52) == (_DWORD)a4))
  {
    int v13 = *(_DWORD *)(a1 + 144);
    if (*(_DWORD *)(a1 + 148) > v13)
    {
      *(_DWORD *)(a1 + 144) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 136) + 40LL * v13;
      *(_DWORD *)uint64_t v14 = 135;
      *(_DWORD *)(v14 + 4) = a3;
      *(_DWORD *)(v14 + 8) = a5;
      *(void *)(v14 + 12) = 0LL;
      *(void *)(v14 + 28) = 0LL;
      *(void *)(v14 + 20) = 0LL;
      *(_DWORD *)(v14 + 36) = 0;
      return *(double *)a9.i64;
    }

    uint64_t v15 = 135LL;
    uint64_t v16 = a5;
LABEL_6:
    sub_18131044C(a1, v15, a3, v16, 0LL, a6, a7, a8);
    return *(double *)a9.i64;
  }

  if (*(_BYTE *)(a2 + 63) == 1)
  {
    uint64_t v17 = 175LL;
    goto LABEL_41;
  }

  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = v18 + 16LL * a4;
  int v20 = (_WORD *)(v19 + 14);
  if ((*(_WORD *)(v19 + 14) & 0x20) != 0)
  {
    uint64_t v25 = *(void *)(a1 + 24);
    if ((*(_WORD *)(v19 + 14) & 0x100) != 0)
    {
      sub_1812DC47C(v25, "generated column loop on %s", a3, a4, a5, a6, a7, a8, *(void *)v19);
    }

    else
    {
      int v26 = *(_DWORD *)(v25 + 64);
      _WORD *v20 = *(_WORD *)(v19 + 14) | 0x100;
      *(_DWORD *)(v25 + 64) = a3 + 1;
      sub_18131A600(v25, a2, v19, a5, a5, a6, a7, a8);
      *(_DWORD *)(v25 + 64) = v26;
      *v20 &= ~0x100u;
    }

    return *(double *)a9.i64;
  }

  int v21 = *(_DWORD *)(a2 + 48);
  if ((v21 & 0x80) != 0)
  {
    for (uint64_t i = *(void *)(a2 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }

    uint64_t v28 = *(unsigned __int16 *)(i + 96);
    if (!*(_WORD *)(i + 96))
    {
LABEL_25:
      uint64_t v17 = 94LL;
      a4 = 0xFFFFFFFFLL;
      goto LABEL_41;
    }

    uint64_t v29 = 0LL;
    int v30 = *(unsigned __int16 **)(i + 8);
    uint64_t v31 = v28 << 16;
    while (1)
    {
      int v32 = *v30++;
      v29 += 0x10000LL;
      if (v31 == v29) {
        goto LABEL_25;
      }
    }

    a4 = ((int)v29 >> 16);
  }

  else
  {
    uint64_t v22 = (__int16)a4;
    if ((a4 & 0x8000) == 0 && (v21 & 0x20) != 0)
    {
      if ((_WORD)a4)
      {
        if ((_DWORD)a4 << 16 >= 0x110000u)
        {
          uint64_t v33 = a4 & 0xF;
          if ((a4 & 0xF) == 0) {
            uint64_t v33 = 16LL;
          }
          uint64_t v23 = v22 - v33;
          uint64_t v34 = v18 + 142;
          int16x8_t v35 = 0uLL;
          v36.i64[0] = 0x1000100010001LL;
          v36.i64[1] = 0x1000100010001LL;
          uint64_t v37 = v23;
          int16x8_t v38 = 0uLL;
          do
          {
            int8x16_t v39 = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 64), (int8x16_t)xmmword_1813CDDC0);
            v39.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
            v40.i32[0] = vzip1q_s16(*(int16x8_t *)(v34 - 128), *(int16x8_t *)(v34 - 112)).u32[0];
            v40.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
            v40.i64[1] = v39.i64[1];
            uint16x8_t v41 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v34 + 96), (int8x16_t)xmmword_1813CDDB0);
            int8x16x2_t v62 = *(int8x16x2_t *)(v34 + 32);
            int8x16_t v42 = vqtbl2q_s8(*(int8x16x2_t *)(v34 + 64), (int8x16_t)xmmword_1813CDDC0);
            int16x8_t v44 = *(int16x8_t *)v34;
            int16x8_t v43 = *(int16x8_t *)(v34 + 16);
            v34 += 256LL;
            v42.i32[3] = v41.i32[3];
            v41.i32[0] = vzip1q_s16(v44, v43).u32[0];
            v41.i32[1] = vqtbl2q_s8(v62, (int8x16_t)xmmword_1813CDDD0).i32[1];
            v41.i64[1] = v42.i64[1];
            int16x8_t v35 = vaddq_s16((int16x8_t)vbicq_s8(v36, (int8x16_t)vshrq_n_u16(v40, 5uLL)), v35);
            int16x8_t v38 = vaddq_s16((int16x8_t)vbicq_s8(v36, (int8x16_t)vshrq_n_u16(v41, 5uLL)), v38);
            v37 -= 16LL;
          }

          while (v37);
          a9 = vaddq_s16(v38, v35);
          a9.i16[0] = vaddvq_s16(a9);
          unsigned __int16 v24 = a9.i16[0];
        }

        else
        {
          uint64_t v23 = 0LL;
          unsigned __int16 v24 = 0;
        }

        uint64_t v45 = v22 - v23;
        __int128 v46 = (unsigned __int16 *)(v18 + 16 * v23 + 14);
        do
        {
          unsigned int v47 = *v46;
          v46 += 8;
          v24 += ((v47 >> 5) & 1) == 0;
          --v45;
        }

        while (v45);
      }

      else
      {
        unsigned __int16 v24 = 0;
      }

      if ((*(_WORD *)(v18 + 16 * v22 + 14) & 0x20) != 0) {
        LOWORD(v22) = a4 - v24 + *(_WORD *)(a2 + 56);
      }
      else {
        LOWORD(v22) = v24;
      }
    }

    a4 = (__int16)v22;
  }

  uint64_t v17 = 94LL;
LABEL_41:
  int v48 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v48)
  {
    sub_18131044C(a1, v17, a3, a4, a5, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v48 + 1;
    uint64_t v49 = *(void *)(a1 + 136) + 40LL * v48;
    *(_BYTE *)uint64_t v49 = v17;
    *(_WORD *)(v49 + 2) = 0;
    *(_DWORD *)(v49 + 4) = a3;
    *(_DWORD *)(v49 + 8) = a4;
    *(_DWORD *)(v49 + 12) = a5;
    *(_BYTE *)(v49 + 1) = 0;
    *(void *)(v49 + 24) = 0LL;
    *(void *)(v49 + 32) = 0LL;
    *(void *)(v49 + 16) = 0LL;
  }

  uint64_t v50 = *(void *)(a2 + 8);
  uint64_t v51 = v11;
  int v52 = *(unsigned __int16 *)(v50 + 16LL * v11 + 12);
  if (*(_WORD *)(v50 + 16LL * v11 + 12))
  {
    uint64_t v61 = 0LL;
    if (!*(_BYTE *)(a2 + 63))
    {
      int v55 = *(_DWORD **)(a2 + 80);
      if (v55)
      {
        if (*v55 >= v52)
        {
          uint64_t v56 = *(unsigned __int8 **)&v55[6 * (v52 - 1) + 2];
          if (v56)
          {
            sub_181312474( *(void *)v10,  v56,  *(unsigned __int8 *)(*(void *)v10 + 100LL),  *(unsigned __int8 *)(v50 + 16LL * v11 + 9),  &v61);
            uint64_t v57 = v61;
            if (v61)
            {
              char v58 = *(void **)v10;
              if (*(_BYTE *)(*(void *)v10 + 103LL))
              {
                if (v58[102])
                {
                  sub_1813015FC(v58, v61);
                }

                else
                {
                  if ((*(_WORD *)(v61 + 20) & 0x9000) != 0 || *(_DWORD *)(v61 + 32)) {
                    sub_181303838(v61);
                  }
                  sub_1812F20DC(*(void **)(v57 + 24), (void *)v57);
                }
              }

              else
              {
                uint64_t v59 = *(void *)(v10 + 136) + 40LL * *(int *)(v10 + 144);
                *(_BYTE *)(v59 - 39) = -10;
                *(void *)(v59 - 24) = v57;
              }
            }
          }
        }
      }
    }
  }

  if (*(_BYTE *)(v50 + 16 * v51 + 9) == 69 && *(_BYTE *)(a2 + 63) != 1)
  {
    int v53 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) > v53)
    {
      *(_DWORD *)(v10 + 144) = v53 + 1;
      uint64_t v54 = *(void *)(v10 + 136) + 40LL * v53;
      *(_DWORD *)uint64_t v54 = 87;
      *(_DWORD *)(v54 + 4) = a5;
      a9.i16[0] = 0;
      a9.i8[2] = 0;
      a9.i8[3] = 0;
      a9.i8[4] = 0;
      a9.i8[5] = 0;
      a9.i8[6] = 0;
      a9.i8[7] = 0;
      *(_OWORD *)(v54 + 8) = 0u;
      *(_OWORD *)(v54 + 24) = 0u;
      return *(double *)a9.i64;
    }

    a1 = v10;
    uint64_t v15 = 87LL;
    a3 = a5;
    uint64_t v16 = 0LL;
    goto LABEL_6;
  }

  return *(double *)a9.i64;
}

uint64_t sub_18131C570(uint64_t a1)
{
  *(_WORD *)(a1 + 36) = 0;
  return 2LL;
}

uint64_t sub_18131C57C(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t v3 = a2;
    int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a1);
    if (v4) {
      return v4 & 2;
    }
    if ((*(_BYTE *)(v3 + 6) & 0x81) != 0) {
      return 0LL;
    }
    a2 = *(void *)(v3 + 24);
  }

  while (a2);
  int v6 = *(_DWORD *)(v3 + 4);
  uint64_t v7 = *(_DWORD **)(v3 + 32);
  if ((v6 & 0x1000) != 0)
  {
  }

  else
  {
    if (v7 && (int)*v7 >= 1)
    {
      __int128 v8 = v7 + 2;
      int v9 = *v7 + 1;
      while (!*v8 || !sub_18131C57C(a1))
      {
        v8 += 3;
        if (--v9 <= 1)
        {
          int v6 = *(_DWORD *)(v3 + 4);
          goto LABEL_20;
        }
      }

      return 2LL;
    }

uint64_t sub_18131C674(uint64_t result, _DWORD *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if ((int)*a2 >= 1)
    {
      uint64_t v3 = result;
      for (uint64_t i = (uint64_t *)(a2 + 2); ; i += 3)
      {
        if (*i)
        {
          uint64_t result = sub_18131C57C(v3, *i);
          if ((_DWORD)result) {
            BOOL v5 = 1;
          }
          else {
            BOOL v5 = v2 <= 1;
          }
          if (v5) {
            return result;
          }
        }

        else if (v2 < 2)
        {
          return result;
        }

        --v2;
      }
    }
  }

  return result;
}

uint64_t sub_18131C6DC(uint64_t a1, void *a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  int v4 = a2;
  while (1)
  {
    int v6 = (int *)v4[3];
    if (v6)
    {
      if (*v6 >= 1) {
        break;
      }
    }

uint64_t sub_18131C81C(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)result + 400LL) && !*(void *)(a2 + 80))
  {
    do
    {
      uint64_t v2 = a2;
      a2 = *(void *)(a2 + 88);
    }

    while (a2);
    uint64_t v3 = *(void *)(v2 + 104);
    if (v3) {
      *(void *)(*(void *)result + 40gettimeofday(&v4, 0LL) = *(void *)(v3 + 8);
    }
  }

  return result;
}

BOOL sub_18131C854(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  int v8 = *a3;
  if (v8 == 43)
  {
    if (sub_18131C854(a1, a2, *((void *)a3 + 2), a4)
      || sub_18131C854(a1, a2, *((void *)a3 + 3), a4))
    {
      return 1LL;
    }

    int v8 = *a3;
  }

  return v8 == 51 && sub_18131C9F8(a1, a2, *((unsigned __int8 **)a3 + 2), a4, 0LL);
}

uint64_t sub_18131C8FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    return result;
  }
  BOOL v5 = (unsigned __int8 *)result;
  while (1)
  {
    int v6 = *((_DWORD *)v5 + 1);
    if ((v6 & 0x82000) == 0) {
      break;
    }
    if ((v6 & 0x80000) != 0)
    {
      BOOL v5 = *(unsigned __int8 **)(*((void *)v5 + 4) + 8LL);
      if (!v5) {
        return 0LL;
      }
    }

    else
    {
      BOOL v5 = (unsigned __int8 *)*((void *)v5 + 2);
      if (!v5) {
        return 0LL;
      }
    }
  }

  int v7 = *v5;
  if (v7 == 51)
  {
    BOOL v5 = (unsigned __int8 *)*((void *)v5 + 2);
LABEL_14:
    unsigned __int16 v9 = 0;
    void v8[2] = 0LL;
    v8[3] = 0LL;
    v8[1] = sub_18131CB44;
    __int16 v10 = (_DWORD)a3 != 0;
    int v11 = a2;
    if (v5)
    {
      sub_18131C57C((uint64_t)v8, (uint64_t)v5);
      return v9;
    }

    return 0LL;
  }

  if (v7 != 44) {
    goto LABEL_14;
  }
  while (!sub_18131C8FC(*((void *)v5 + 2), a2, a3))
  {
    BOOL v5 = (unsigned __int8 *)*((void *)v5 + 3);
    if (*v5 != 44) {
      goto LABEL_14;
    }
  }

  return 1LL;
}

uint64_t sub_18131C9F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  while (2)
  {
    uint64_t v10 = 0LL;
    switch(*v8)
    {
      case 0x13u:
      case 0x72u:
        goto LABEL_3;
      case 0x30u:
        if ((_DWORD)a5) {
          return 0LL;
        }
        uint64_t v11 = *((void *)v8 + 4);
        uint64_t v10 = 1LL;
        uint64_t v12 = *(void *)(v11 + 32);
        a5 = 1LL;
        goto LABEL_4;
      case 0x31u:
        if ((_DWORD)a5 && (v8[5] & 0x10) != 0) {
          return 0LL;
        }
        goto LABEL_3;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Fu:
        a5 = 1LL;
        goto LABEL_7;
      case 0x66u:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
LABEL_7:
        return 1LL;
      case 0x71u:
      case 0xADu:
      case 0xAEu:
      case 0xB5u:
        goto LABEL_4;
      case 0xAFu:
        if (!(_DWORD)a5 && v8[2] == 45)
        {
LABEL_3:
          a5 = 1LL;
LABEL_4:
          int v8 = (unsigned __int8 *)*((void *)v8 + 2);
          continue;
        }

        return 0LL;
      default:
        return v10;
    }
  }

uint64_t sub_18131CB44(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if ((v2 & 1) != 0 || (v2 & 2) != 0 && *(_WORD *)(a1 + 38)) {
    return 1LL;
  }
  uint64_t result = 1LL;
  switch(*(_BYTE *)a2)
  {
    case 0x2B:
    case 0x2C:
      uint64_t v10 = *(void *)(a2 + 16);
      if (v10 && !*(_WORD *)(a1 + 36))
      {
        uint64_t v11 = *(void *)(a2 + 24);
        sub_18131C57C(a1, v10);
        if (*(_WORD *)(a1 + 36))
        {
          *(_WORD *)(a1 + 36) = 0;
          if (v11)
          {
            uint64_t v12 = a1;
            uint64_t v13 = v11;
            goto LABEL_26;
          }
        }

        return 1LL;
      }

      break;
    case 0x2D:
    case 0x32:
    case 0x33:
    case 0x9D:
    case 0xAB:
    case 0xAC:
    case 0xAF:
    case 0xB1:
      return result;
    case 0x30:
      uint64_t v14 = *(void *)(a2 + 16);
      if (v14) {
        sub_18131C57C(a1, v14);
      }
      sub_18131CCA0(a1, *(void *)(*(void *)(a2 + 32) + 8LL), *(void *)(*(void *)(a2 + 32) + 32LL));
      uint64_t result = 1LL;
      break;
    case 0x31:
      if ((v2 & 0x1000) == 0 && **(int **)(a2 + 32) >= 1)
      {
        uint64_t v13 = *(void *)(a2 + 16);
        if (v13)
        {
          uint64_t v12 = a1;
LABEL_26:
          sub_18131C57C(v12, v13);
          uint64_t result = 1LL;
        }
      }

      break;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      int v7 = *(unsigned __int8 **)(a2 + 16);
      int v6 = *(unsigned __int8 **)(a2 + 24);
      if (*v7 != 167 || (uint64_t v8 = *((void *)v7 + 9)) == 0 || *(_BYTE *)(v8 + 63) != 1)
      {
        if (*v6 != 167) {
          goto LABEL_13;
        }
        uint64_t v9 = *((void *)v6 + 9);
        if (!v9 || *(_BYTE *)(v9 + 63) != 1) {
          goto LABEL_13;
        }
      }

      break;
    case 0xA7:
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 44))
      {
        *(_WORD *)(a1 + 36) = 1;
        uint64_t result = 2LL;
      }

      break;
    default:
LABEL_13:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t sub_18131CCA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (!*(_WORD *)(result + 36))
    {
      uint64_t result = sub_18131C57C(result, a2);
      if (*(_WORD *)(v3 + 36))
      {
        *(_WORD *)(v3 + 36) = 0;
        if (a3) {
          return sub_18131C57C(v3, a3);
        }
      }
    }
  }

  return result;
}

uint64_t sub_18131CCF8( uint64_t *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_BYTE *)a1 + 301) != 2 && (*(_BYTE *)(*a1 + 49) & 4) == 0) {
    return 0LL;
  }
  uint64_t v12 = sub_1812FA130(*a1, a3, &a9);
  uint64_t v13 = a1[2];
  unsigned int v14 = *(_DWORD *)(v13 + 144);
  uint64_t v11 = sub_1812B9B68((uint64_t *)v13, 185LL, v14, *((unsigned int *)a1 + 78), 0LL, (uint64_t)v12, 4294967290LL, v15);
  if (a2) {
    *((_DWORD *)a1 + 78) = v14;
  }
  sub_18131CED8(v13, v14, -1, -1, 0, 0LL);
  return v11;
}

void *sub_18131CDC0(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    uint64_t result = (void *)sub_1812F2264(v4, 0x18uLL);
    if (result)
    {
LABEL_3:
      uint64_t v6 = a1[24];
      a1[24] = (uint64_t)result;
      void *result = v6;
      result[1] = a2;
      result[2] = sub_1812899C0;
      return result;
    }
  }

  else
  {
    uint64_t result = (void *)sub_18126F0AC(24LL);
    if (result) {
      goto LABEL_3;
    }
  }

  if (a2) {
    return sub_181309110((void *)*a1, a2);
  }
  return result;
}

uint64_t sub_18131CE30(uint64_t result, int a2, int a3, int a4)
{
  if ((*(_BYTE *)(*(void *)result + 49LL) & 4) != 0)
  {
    unsigned int v4 = *(_DWORD *)(result + 392);
    unsigned int v5 = v4 + 1;
    uint64_t v6 = 56LL * v4 + 20;
    while ((int)--v5 >= 1)
    {
      uint64_t v7 = v6 - 56;
      uint64_t v8 = *(void *)(result + 400);
      int v9 = *(_DWORD *)(v8 + v6 - 76);
      v6 -= 56LL;
      if (v9 == a2)
      {
        if (a4 < 0) {
          a4 = *(_DWORD *)(result + 144) - 1;
        }
        uint64_t v10 = v8 + v7;
        uint64_t v11 = (_DWORD *)(v8 + v7 - 16);
        if (*v11)
        {
          int v13 = *(_DWORD *)(v10 - 8);
          uint64_t v12 = (_DWORD *)(v10 - 8);
          if (v13)
          {
            uint64_t v11 = (_DWORD *)(v8 + v7);
            if (*(_DWORD *)(v8 + v7)) {
              return result;
            }
            uint64_t v14 = 5LL;
          }

          else
          {
            uint64_t v14 = 3LL;
            uint64_t v11 = v12;
          }
        }

        else
        {
          uint64_t v14 = 1LL;
        }

        *uint64_t v11 = a3;
        *(_DWORD *)(v8 + 4 * v14 + v7 - 16) = a4;
        return result;
      }
    }
  }

  return result;
}

uint64_t sub_18131CED8(uint64_t a1, int a2, int a3, int a4, __int16 a5, char *__s)
{
  uint64_t result = *(void *)a1;
  if ((*(_BYTE *)(result + 49) & 4) != 0)
  {
    uint64_t v13 = *(int *)(a1 + 392);
    int v14 = v13 + 1;
    unint64_t v15 = 56 * (v13 + 1);
    unint64_t v16 = *(void *)(a1 + 400);
    if (v16)
    {
      if (*(void *)(result + 512) > v16)
      {
        if (*(void *)(result + 496) <= v16)
        {
          if (v15 < 0x81) {
            goto LABEL_13;
          }
        }

        else if (*(void *)(result + 504) <= v16 && v15 <= *(unsigned __int16 *)(result + 438))
        {
LABEL_13:
          *(_DWORD *)(a1 + 392) = v14;
          int v17 = v13;
          unint64_t v18 = v16 + 56LL * (int)v13;
          *(_OWORD *)unint64_t v18 = 0u;
          *(_OWORD *)(v18 + 16) = 0u;
          *(_OWORD *)(v18 + 32) = 0u;
          *(void *)(v18 + 48) = 0LL;
          *(_DWORD *)unint64_t v18 = a2;
          *(_DWORD *)(v18 + 28) = a3;
          *(_DWORD *)(v18 + 32) = a4;
          *(_WORD *)(v18 + 40) = a5;
          if (__s)
          {
            size_t v19 = strlen(__s);
            unint64_t v20 = v19 + 1;
            if (*(void *)a1)
            {
              uint64_t result = sub_1812F2264(*(void *)a1, v20);
              int v21 = (void *)result;
              if (!result) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }

            uint64_t result = sub_18126F0AC(v19 + 1);
            int v21 = (void *)result;
            if (result) {
LABEL_19:
            }
              uint64_t result = (uint64_t)memcpy(v21, __s, v20);
          }

          else
          {
            int v21 = 0LL;
          }

uint64_t sub_18131D044(uint64_t *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6)
  {
    uint64_t v7 = (void *)sub_18126F0AC(24LL);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    a2(*a1, a3);
    return 0LL;
  }

  uint64_t v7 = (void *)sub_1812F2264(v6, 0x18uLL);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = a1[24];
  a1[24] = (uint64_t)v7;
  void *v7 = v8;
  v7[1] = a3;
  void v7[2] = a2;
  return a3;
}

uint64_t sub_18131D0B8( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int8 **)(a2 + 16);
  int v9 = *v8;
  if (v9 == 176) {
    int v9 = v8[2];
  }
  if (v9 == 138)
  {
    uint64_t v10 = (int **)(*((void *)v8 + 4) + 32LL);
LABEL_7:
    int v11 = **v10;
    if ((*(_BYTE *)(a2 + 5) & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (v9 == 177)
  {
    uint64_t v10 = (int **)(v8 + 32);
    goto LABEL_7;
  }

  int v11 = 1;
  if ((*(_BYTE *)(a2 + 5) & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_10:
  if (!*(_BYTE *)(*(void *)a1 + 103LL))
  {
    if (v11 == **(_DWORD **)(*(void *)(a2 + 32) + 32LL)) {
      return 0LL;
    }
    if (!a1[12]) {
      sub_1812DC47C( (uint64_t)a1,  "sub-select returns %d columns - expected %d",  a3,  a4,  a5,  a6,  a7,  a8,  **(_DWORD **)(*(void *)(a2 + 32) + 32LL));
    }
    return 1LL;
  }

uint64_t sub_18131D1C0(uint64_t *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  int v3 = *v2;
  if (v3 == 176) {
    int v3 = v2[2];
  }
  if (v3 == 138)
  {
    unsigned int v4 = (int **)(*((void *)v2 + 4) + 32LL);
  }

  else
  {
    if (v3 != 177)
    {
      int v5 = 1;
      if ((*(_BYTE *)(a2 + 5) & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_10;
    }

    unsigned int v4 = (int **)(v2 + 32);
  }

  int v5 = **v4;
  if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
  {
LABEL_8:
    uint64_t v6 = 0LL;
    goto LABEL_11;
  }

BOOL sub_18131D384(unsigned __int8 *a1)
{
  while (1)
  {
    int v1 = *a1;
    a1 = (unsigned __int8 *)*((void *)a1 + 2);
  }

  if (v1 == 176) {
    int v1 = a1[2];
  }
  uint64_t v2 = 0LL;
  if (v1 != 167) {
    return 1LL;
  }
  if ((a1[6] & 0x20) != 0) {
    return 1LL;
  }
  uint64_t v3 = *((void *)a1 + 9);
  if (!v3) {
    return 1LL;
  }
  uint64_t v4 = *((unsigned int *)a1 + 12);
  if ((v4 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  return v5 && (*(_BYTE *)(v5 + 16 * v4 + 8) & 0xF) == 0;
}

uint64_t sub_18131D410( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = result;
  int v11 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v11)
  {
    uint64_t result = sub_18131044C(result, 71LL, 0LL, a3, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(result + 144) = v11 + 1;
    uint64_t v12 = *(void *)(result + 136) + 40LL * v11;
    *(void *)uint64_t v12 = 71LL;
    *(_DWORD *)(v12 + 8) = a3;
    *(void *)(v12 + 12) = 0LL;
    *(void *)(v12 + 28) = 0LL;
    *(void *)(v12 + 20) = 0LL;
    *(_DWORD *)(v12 + 36) = 0;
  }

  int v13 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v13)
  {
    uint64_t result = sub_18131044C(v10, 36LL, a2, 0LL, 0LL, a6, a7, a8);
    int v13 = result;
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v13 + 1;
    uint64_t v14 = *(void *)(v10 + 136) + 40LL * v13;
    *(_DWORD *)uint64_t v14 = 36;
    *(_DWORD *)(v14 + 4) = a2;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
  }

  int v15 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v15)
  {
    uint64_t result = sub_18131044C(v10, 94LL, a2, 0LL, a3, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v10 + 136) + 40LL * v15;
    *(_DWORD *)uint64_t v16 = 94;
    *(_DWORD *)(v16 + 4) = a2;
    *(_DWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 12) = a3;
    *(void *)(v16 + 24) = 0LL;
    *(void *)(v16 + 32) = 0LL;
    *(void *)(v16 + 16) = 0LL;
  }

  int v17 = *(_DWORD *)(v10 + 144);
  if (v17 >= 1) {
    *(_WORD *)(*(void *)(v10 + 136) + 40LL * (v17 - 1) + 2) = 128;
  }
  if (*(_BYTE *)(*(void *)v10 + 103LL)) {
    unint64_t v18 = &byte_18C550680;
  }
  else {
    unint64_t v18 = (char *)(*(void *)(v10 + 136) + 40LL * v13);
  }
  *((_DWORD *)v18 + 2) = v17;
  return result;
}

uint64_t *sub_18131D58C( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  int v11 = (void **)result[2];
  int v12 = *(_DWORD *)(a2 + 4);
  if ((v12 & 0x40) != 0 || *((_DWORD *)result + 16))
  {
    int v96 = 0;
    goto LABEL_4;
  }

  if ((v12 & 0x2000000) != 0)
  {
    int v80 = *((_DWORD *)v11 + 36);
    if (*((_DWORD *)v11 + 37) <= v80)
    {
      uint64_t result = (uint64_t *)sub_18131044C(result[2], 15LL, 0LL, 0LL, 0LL, a6, a7, a8);
      int v80 = (int)result;
      if ((*(_BYTE *)(v9 + 5) & 0x10) == 0)
      {
LABEL_120:
        uint64_t v85 = *(unsigned int *)(v9 + 72);
        uint64_t v84 = *(unsigned int *)(v9 + 76);
        int v86 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) <= v86)
        {
          uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v11, 10LL, v84, v85, 0LL, a6, a7, a8);
        }

        else
        {
          *((_DWORD *)v11 + 36) = v86 + 1;
          uint64_t v87 = (uint64_t)&v11[17][5 * v86];
          *(_DWORD *)uint64_t v87 = 10;
          *(_DWORD *)(v87 + 4) = v84;
          *(_DWORD *)(v87 + 8) = v85;
          *(void *)(v87 + 12) = 0LL;
          *(void *)(v87 + 28) = 0LL;
          *(void *)(v87 + 20) = 0LL;
          *(_DWORD *)(v87 + 36) = 0;
        }

        uint64_t v88 = *(unsigned int *)(v9 + 44);
        int v89 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) <= v89)
        {
          uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v11, 115LL, a3, v88, 0LL, a6, a7, a8);
        }

        else
        {
          *((_DWORD *)v11 + 36) = v89 + 1;
          uint64_t v90 = (uint64_t)&v11[17][5 * v89];
          *(_DWORD *)uint64_t v90 = 115;
          *(_DWORD *)(v90 + 4) = a3;
          *(_DWORD *)(v90 + 8) = v88;
          *(void *)(v90 + 12) = 0LL;
          *(void *)(v90 + 28) = 0LL;
          *(void *)(v90 + 20) = 0LL;
          *(_DWORD *)(v90 + 36) = 0;
        }

        if (*((_BYTE *)*v11 + 103)) {
          dword_18C550688 = *((_DWORD *)v11 + 36);
        }
        else {
          LODWORD(v11[17][5 * v80 + 1]) = *((_DWORD *)v11 + 36);
        }
        return result;
      }
    }

    else
    {
      *((_DWORD *)v11 + 36) = v80 + 1;
      uint64_t v81 = (uint64_t)&v11[17][5 * v80];
      *(_BYTE *)uint64_t v81 = 15;
      *(_OWORD *)(v81 + 1) = 0u;
      *(_OWORD *)(v81 + 17) = 0u;
      *(void *)(v81 + 32) = 0LL;
      if ((*(_BYTE *)(a2 + 5) & 0x10) == 0) {
        goto LABEL_120;
      }
    }

    uint64_t result = (uint64_t *)sub_18131CCF8( v10,  0,  "REUSE LIST SUBQUERY %d",  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)(v9 + 32) + 16LL));
    goto LABEL_120;
  }

  *(_DWORD *)(a2 + 4) = v12 | 0x2000000;
  uint64_t v50 = (*((_DWORD *)result + 14) + 1);
  *((_DWORD *)result + 14) = v50;
  *(_DWORD *)(a2 + 76) = v50;
  int v51 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v51)
  {
    int v52 = sub_18131044C((uint64_t)v11, 74LL, 0LL, v50, 0LL, a6, a7, a8) + 1;
  }

  else
  {
    int v52 = v51 + 1;
    *((_DWORD *)v11 + 36) = v51 + 1;
    uint64_t v53 = (uint64_t)&v11[17][5 * v51];
    *(void *)uint64_t v53 = 74LL;
    *(_DWORD *)(v53 + 8) = v50;
    *(void *)(v53 + 12) = 0LL;
    *(void *)(v53 + 28) = 0LL;
    *(void *)(v53 + 20) = 0LL;
    *(_DWORD *)(v53 + 36) = 0;
  }

  *(_DWORD *)(v9 + 72) = v52;
  int v82 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v82)
  {
    int v96 = sub_18131044C((uint64_t)v11, 15LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *((_DWORD *)v11 + 36) = v82 + 1;
    uint64_t v83 = (uint64_t)&v11[17][5 * v82];
    *(_BYTE *)uint64_t v83 = 15;
    *(_OWORD *)(v83 + 1) = 0u;
    *(_OWORD *)(v83 + 17) = 0u;
    *(void *)(v83 + 32) = 0LL;
    int v96 = v82;
  }

_DWORD *sub_18131DEE0(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = 48LL * *a2;
  size_t v5 = v4 + 16;
  if (a1)
  {
    uint64_t v6 = (_DWORD *)sub_1812F2264(a1, v4 + 16);
    if (!v6) {
      return v6;
    }
  }

  else
  {
    uint64_t v6 = (_DWORD *)sub_18126F0AC(v4 + 16);
    if (!v6) {
      return v6;
    }
  }

  bzero(v6, v5);
  *uint64_t v6 = *a2;
  if (*a2 >= 1)
  {
    uint64_t v7 = 0LL;
    for (uint64_t i = 0LL; i < *a2; ++i)
    {
      uint64_t v10 = &a2[v7];
      int v11 = &v6[v7];
      *(void *)&v6[v7 + 8] = sub_18129F624(a1, *(void *)&a2[v7 + 8], 0LL);
      *(void *)&v6[v7 + 6] = sub_18129CD4C(a1, *(void **)&a2[v7 + 6], 0);
      int v12 = *(const void **)&a2[v7 + 4];
      if (v12)
      {
        size_t v13 = strlen(*((const char **)v10 + 2));
        unint64_t v14 = v13 + 1;
        if (a1)
        {
          uint64_t v9 = (void *)sub_1812F2264(a1, v14);
          if (!v9) {
            goto LABEL_10;
          }
LABEL_16:
          memcpy(v9, v12, v14);
          goto LABEL_10;
        }

        uint64_t v9 = (void *)sub_18126F0AC(v13 + 1);
        if (v9) {
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v9 = 0LL;
      }

uint64_t sub_18131E040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  if (!a1)
  {
    uint64_t v6 = sub_18126F0AC(144LL);
    if (!v6) {
      return v6;
    }
    goto LABEL_17;
  }

  if (*(unsigned __int16 *)(a1 + 436) <= 0x8Fu)
  {
    if (*(_DWORD *)(a1 + 432))
    {
      if (*(_BYTE *)(a1 + 103)) {
        return 0LL;
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 452);
    }

    goto LABEL_16;
  }

  uint64_t v6 = *(void *)(a1 + 472);
  if (v6)
  {
    uint64_t v7 = (void *)(a1 + 472);
LABEL_14:
    void *v7 = *(void *)v6;
    ++*(_DWORD *)(a1 + 448);
    goto LABEL_17;
  }

  uint64_t v6 = *(void *)(a1 + 464);
  if (v6)
  {
    uint64_t v7 = (void *)(a1 + 464);
    goto LABEL_14;
  }

  ++*(_DWORD *)(a1 + 456);
LABEL_16:
  uint64_t v6 = sub_1812F2440(a1, 144LL);
  if (!v6) {
    return v6;
  }
LABEL_17:
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  uint64_t v8 = *(const char **)a3;
  if (!*(void *)a3)
  {
    int v11 = 0LL;
    goto LABEL_24;
  }

  size_t v9 = strlen(*(const char **)a3);
  unint64_t v10 = v9 + 1;
  if (!a1)
  {
    int v11 = (void *)sub_18126F0AC(v9 + 1);
    if (!v11) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  int v11 = (void *)sub_1812F2264(a1, v10);
  if (v11) {
LABEL_23:
  }
    memcpy(v11, v8, v10);
LABEL_24:
  *(void *)uint64_t v6 = v11;
  int v12 = *(const void **)(a3 + 8);
  if (v12)
  {
    size_t v13 = strlen(*(const char **)(a3 + 8));
    unint64_t v14 = v13 + 1;
    if (a1)
    {
      int v15 = (void *)sub_1812F2264(a1, v14);
      if (!v15) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }

    int v15 = (void *)sub_18126F0AC(v13 + 1);
    if (v15) {
LABEL_30:
    }
      memcpy(v15, v12, v14);
  }

  else
  {
    int v15 = 0LL;
  }

uint64_t sub_18131E2D0(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 172 && (a2[7] & 1) != 0) {
    sub_18131E314(*(void *)(a1 + 40), *((void **)a2 + 9));
  }
  return 0LL;
}

BOOL sub_18131E304(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 40) != a2;
}

uint64_t sub_18131E314(uint64_t result, void *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v5 = result + 112;
  uint64_t v4 = *(void *)(result + 112);
  if (!v4)
  {
    a2[8] = 0LL;
LABEL_17:
    *(void *)uint64_t v5 = a2;
    a2[7] = v5;
    return result;
  }

  uint64_t result = sub_18131BE5C(0LL, v4, (uint64_t)a2, 0);
  if (!(_DWORD)result)
  {
    uint64_t v10 = *(void *)v5;
    a2[8] = *(void *)v5;
    if (v10) {
      *(void *)(v10 + 56) = a2 + 8;
    }
    goto LABEL_17;
  }

  unint64_t v6 = a2[2];
  unint64_t v7 = *(void *)(*(void *)v5 + 16LL);
  if (!(v6 | v7)) {
    return result;
  }
  if (v6 && v7 && *(_DWORD *)v6 == *(_DWORD *)v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    while (*(unsigned __int8 *)(v6 + v8 + 24) == *(unsigned __int8 *)(v7 + v8 + 24))
    {
      uint64_t result = sub_18131BA10(0LL, *(unsigned __int8 **)(v6 + v8 + 8), *(unsigned __int8 **)(v7 + v8 + 8), 0xFFFFFFFFLL);
      if ((_DWORD)result) {
        break;
      }
      ++v9;
      v8 += 24LL;
    }
  }

  *(_DWORD *)(v3 + 4) |= 0x2000000u;
  return result;
}

uint64_t sub_18131E420(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 68);
  int v7 = 10 - v6;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void **)(a1 + 80);
  unint64_t v10 = 4LL * (10 - v6);
  if (v9)
  {
    if (*(void *)(v8 + 512) > (unint64_t)v9)
    {
      if (*(void *)(v8 + 496) <= (unint64_t)v9)
      {
        if (v10 < 0x81)
        {
LABEL_6:
          uint64_t result = *(void *)(a1 + 80);
          goto LABEL_12;
        }
      }

      else if (*(void *)(v8 + 504) <= (unint64_t)v9 && v10 <= *(unsigned __int16 *)(v8 + 438))
      {
        goto LABEL_6;
      }
    }

    uint64_t result = sub_1812F2310(*(void *)a1, v9, v10);
    if (result)
    {
LABEL_12:
      *(void *)(a1 + 80) = result;
      if (v6 <= -90)
      {
LABEL_13:
        if ((int)(v7 / 0x64u) > *(_DWORD *)(a1 + 72) / 100)
        {
          uint64_t v12 = *(void *)a1;
          if (*(_DWORD *)(*(void *)a1 + 424LL))
          {
            ++*(_DWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 24) = 9;
          }

          size_t v13 = *(unsigned int (**)(void))(v12 + 544);
          if (v13)
          {
            unsigned int v14 = *(_DWORD *)(a1 + 144) + 1;
            *(_DWORD *)(a1 + 144) = v14;
            if (v14 >= *(_DWORD *)(v12 + 560))
            {
              if (v13(*(void *)(v12 + 552)))
              {
                ++*(_DWORD *)(a1 + 48);
                *(_DWORD *)(a1 + 24) = 9;
              }

              *(_DWORD *)(a1 + 144) = 0;
              uint64_t result = *(void *)(a1 + 80);
            }
          }
        }
      }

void *sub_18131E5AC(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  uint64_t v5 = (void **)result;
  if (*((_BYTE *)result + 35))
  {
    __int16 v8 = 2;
    v7[1] = sub_18129C78C;
    void v7[2] = sub_18131C570;
    int v9 = 0;
    if (!a2) {
      return (void *)sub_18131A9E0(v5, v4, a3);
    }
    sub_18131C57C((uint64_t)v7, a2);
    if (v8) {
      return (void *)sub_18131A9E0(v5, v4, a3);
    }
    int v6 = *v5;
  }

  else
  {
    int v6 = (void *)*result;
    if (!a2)
    {
      if (!*((_BYTE *)v6 + 103)) {
        goto LABEL_12;
      }
LABEL_7:
      if (!v4) {
        return result;
      }
      return sub_181309110(v6, v4);
    }
  }

  uint64_t result = sub_18129C928((uint64_t)v6, v4, 0LL, 0LL);
  uint64_t v4 = (unsigned __int8 *)result;
  if (*((_BYTE *)v6 + 103)) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t result = (void *)sub_181319C00((uint64_t)v5, v4, a3);
  if (!v4) {
    return result;
  }
  return sub_181309110(v6, v4);
}

uint64_t sub_18131E690(unsigned __int8 *a1)
{
  int v1 = a1;
  int v2 = *a1;
  if ((v2 - 43) <= 1)
  {
    uint64_t v3 = sub_18131E690(*((void *)a1 + 3));
    uint64_t v4 = sub_18131E690(*((void *)v1 + 2));
    int v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 0x10000001) == 0x10000000 || (int v6 = *(_DWORD *)(v3 + 4), (v6 & 0x20000001) == 0x20000000))
    {
      if (v2 == 44) {
        return v3;
      }
      else {
        return v4;
      }
    }

    else
    {
      int v8 = v6 & 0x10000001;
      if ((v5 & 0x20000001) == 0x20000000 || v8 == 0x10000000)
      {
        if (v2 == 44) {
          return v4;
        }
        else {
          return v3;
        }
      }
    }
  }

  return (uint64_t)v1;
}

uint64_t sub_18131E740(uint64_t result, int a2)
{
  if (*(_BYTE *)(*(void *)result + 103LL)) {
    int v2 = &byte_18C550680;
  }
  else {
    int v2 = (char *)(*(void *)(result + 136) + 40LL * *(int *)(result + 144) - 40);
  }
  if (*((_DWORD *)v2 + 3) == a2 && *v2 == 94) {
    *((_WORD *)v2 + 1) |= 0x80u;
  }
  return result;
}

uint64_t sub_18131E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)a1;
  int v6 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 528LL);
  if (!v6 || *(_BYTE *)(v5 + 197) || *(_BYTE *)(a1 + 302)) {
    return 0LL;
  }
  uint64_t result = v6(*(void *)(v5 + 536), a2, a3, a4, a5, *(void *)(a1 + 368));
  if ((_DWORD)result == 1)
  {
    int v15 = 23;
    uint64_t v16 = "not authorized";
LABEL_10:
    sub_1812DC47C(a1, v16, v9, v10, v11, v12, v13, v14, v17);
    *(_DWORD *)(a1 + 24) = v15;
    return 1LL;
  }

  if ((result & 0xFFFFFFFD) != 0)
  {
    int v15 = 1;
    uint64_t v16 = "authorizer malfunction";
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_18131E81C( _BYTE *a1, char *__s, _BYTE *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 48LL);
  if ((v9 & 0x10000001) == 1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if ((*(_BYTE *)(v8 + 198) & 2) != 0 || !byte_18C465389) {
    return result;
  }
  uint64_t v12 = __s;
  if (*(_BYTE *)(v8 + 197))
  {
    uint64_t v13 = *(unsigned __int8 ***)(v8 + 200);
    uint64_t v14 = *v13;
    if (a3)
    {
      if (v14)
      {
        while (1)
        {
          uint64_t v15 = *a3;
          uint64_t v16 = *v14;
          if ((_DWORD)v15 == (_DWORD)v16)
          {
            if (!*a3) {
              goto LABEL_32;
            }
          }

          else if (byte_1813C6343[v15] != byte_1813C6343[v16])
          {
            break;
          }

          ++a3;
          ++v14;
        }
      }
    }

    else if (!v14)
    {
LABEL_32:
      uint64_t v19 = v13[1];
      if (__s)
      {
        if (v19)
        {
          while (1)
          {
            uint64_t v20 = *v12;
            uint64_t v21 = *v19;
            if ((_DWORD)v20 == (_DWORD)v21)
            {
              if (!*v12) {
                goto LABEL_41;
              }
            }

            else if (byte_1813C6343[v20] != byte_1813C6343[v21])
            {
              break;
            }

            ++v12;
            ++v19;
          }
        }
      }

      else if (!v19)
      {
LABEL_41:
        uint64_t result = sqlite3_stricmp(a4, (const char *)v13[2]);
        if (!(_DWORD)result) {
          return result;
        }
      }
    }

    sub_1812DC47C((uint64_t)a1, &byte_1813CEAEE, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v23);
    return 1LL;
  }

  if (__s && !a1[30])
  {
    unint64_t v17 = *__s;
    if (!*__s)
    {
      uint64_t v18 = "sqlite_";
      goto LABEL_58;
    }

    if ((v17 & 0xFFFFFFDF) == 0x53)
    {
      unint64_t v17 = __s[1];
      if (!__s[1])
      {
        uint64_t v18 = "qlite_";
        goto LABEL_58;
      }

      if ((v17 & 0xFFFFFFDF) == 0x51)
      {
        unint64_t v17 = __s[2];
        if (!__s[2])
        {
          uint64_t v18 = "lite_";
          goto LABEL_58;
        }

        if ((v17 & 0xFFFFFFDF) == 0x4C)
        {
          unint64_t v17 = __s[3];
          if (!__s[3])
          {
            uint64_t v18 = "ite_";
            goto LABEL_58;
          }

          if ((v17 & 0xFFFFFFDF) == 0x49)
          {
            unint64_t v17 = __s[4];
            if (!__s[4])
            {
              uint64_t v18 = "te_";
              goto LABEL_58;
            }

            if ((v17 & 0xFFFFFFDF) == 0x54)
            {
              unint64_t v17 = __s[5];
              if (!__s[5])
              {
                uint64_t v18 = "e_";
                goto LABEL_58;
              }

              if ((v17 & 0xFFFFFFDF) == 0x45)
              {
                unint64_t v17 = __s[6];
                if (!__s[6])
                {
                  uint64_t v18 = "_";
LABEL_58:
                  goto LABEL_60;
                }

                if ((_DWORD)v17 == 95)
                {
LABEL_59:
                  sub_1812DC47C( (uint64_t)a1,  "object name reserved for internal use: %s",  (uint64_t)a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  (char)v12);
                  return 1LL;
                }

                v17 += (unint64_t)byte_1813C6343;
                uint64_t v18 = "_";
              }

              else
              {
                v17 += (unint64_t)byte_1813C6343;
                uint64_t v18 = "e_";
              }
            }

            else
            {
              v17 += (unint64_t)byte_1813C6343;
              uint64_t v18 = "te_";
            }
          }

          else
          {
            v17 += (unint64_t)byte_1813C6343;
            uint64_t v18 = "ite_";
          }
        }

        else
        {
          v17 += (unint64_t)byte_1813C6343;
          uint64_t v18 = "lite_";
        }
      }

      else
      {
        v17 += (unint64_t)byte_1813C6343;
        uint64_t v18 = "qlite_";
      }
    }

    else
    {
      v17 += (unint64_t)byte_1813C6343;
      uint64_t v18 = "sqlite_";
    }

    LODWORD(v17) = *(unsigned __int8 *)v17;
    goto LABEL_58;
  }

uint64_t *sub_18131EB5C( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (*((_DWORD *)result + 14) + 1);
  *((_DWORD *)result + 14) = v8;
  uint64_t v9 = result[2];
  if (v9) {
    goto LABEL_6;
  }
  if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
    *((_BYTE *)result + 35) = 1;
  }
  uint64_t result = (uint64_t *)sub_1812DC63C(result, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = (uint64_t)result;
  if (result)
  {
LABEL_6:
    int v10 = *(_DWORD *)(v9 + 144);
    if (*(_DWORD *)(v9 + 148) <= v10)
    {
      uint64_t result = (uint64_t *)sub_18131044C(v9, 4LL, 0LL, v8, 0xFFFFFFFFLL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v9 + 144) = v10 + 1;
      uint64_t v11 = *(void *)(v9 + 136) + 40LL * v10;
      *(void *)uint64_t v11 = 4LL;
      *(_DWORD *)(v11 + 8) = v8;
      *(_DWORD *)(v11 + 12) = -1;
      *(void *)(v11 + 24) = 0LL;
      *(void *)(v11 + 32) = 0LL;
      *(void *)(v11 + 16) = 0LL;
    }

    *(_DWORD *)(v9 + 272) |= 1u;
    if (*(_BYTE *)(*(void *)(*(void *)(*(void *)v9 + 32LL) + 8LL) + 17LL)) {
      *(_DWORD *)(v9 + 276) |= 1u;
    }
  }

  return result;
}

uint64_t sub_18131EC34(uint64_t result, char a2, int a3)
{
  if (*(void *)(result + 168)) {
    uint64_t v4 = *(void *)(result + 168);
  }
  else {
    uint64_t v4 = result;
  }
  int v5 = *(_DWORD *)(v4 + 124);
  int v6 = 1 << a3;
  if ((v5 & (1 << a3)) == 0)
  {
    *(_DWORD *)(v4 + 124) = v5 | v6;
    if (a3 == 1) {
      uint64_t result = sub_1812FA2F0(v4);
    }
  }

  *(_DWORD *)(v4 + 120) |= v6;
  *(_BYTE *)(v4 + 32) |= a2;
  return result;
}

void sub_18131ECA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    if ((_DWORD)a2 == 1) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

  if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  uint64_t v10 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a2 != 1)
  {
LABEL_8:
  }

uint64_t sub_18131EDC8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *(const void **)a2;
  if (!*(void *)a2) {
    return 0xFFFFFFFFLL;
  }
  size_t v4 = *(unsigned int *)(a2 + 8);
  int v5 = (void *)sub_1812F2264(a1, v4 + 1);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  int v6 = v5;
  memcpy(v5, v2, v4);
  *((_BYTE *)v6 + v4) = 0;
  if ((char)byte_1813C6558[*(unsigned __int8 *)v6] < 0)
  {
    uint64_t v7 = 0LL;
    if (*(_BYTE *)v6 == 91) {
      int v8 = 93;
    }
    else {
      int v8 = *(unsigned __int8 *)v6;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v10 = i;
      int v11 = *((unsigned __int8 *)v6 + i);
      if (v11 == v8)
      {
        ++i;
        LOBYTE(v11) = v8;
      }

      *((_BYTE *)v6 + v7++) = v11;
    }

    *((_BYTE *)v6 + v7) = 0;
  }

  int v12 = *(_DWORD *)(a1 + 40);
  uint64_t v13 = (v12 - 1);
  if (v12 >= 1)
  {
    uint64_t v14 = (_BYTE **)(*(void *)(a1 + 32) + 32 * v13);
    while (1)
    {
      uint64_t v15 = *v14;
      if (*v14) {
        break;
      }
LABEL_22:
      if (!(_DWORD)v13)
      {
        uint64_t v20 = (unsigned __int8 *)v6;
        for (uint64_t j = "main"; ; ++j)
        {
          uint64_t v22 = *(unsigned __int8 *)j;
          uint64_t v23 = *v20;
          if ((_DWORD)v22 == (_DWORD)v23)
          {
            if (!*j)
            {
              uint64_t v13 = 0LL;
              goto LABEL_32;
            }
          }

          else if (byte_1813C6343[v22] != byte_1813C6343[v23])
          {
            break;
          }

          ++v20;
        }
      }

      v14 -= 4;
      BOOL v19 = (int)v13 <= 0;
      uint64_t v13 = (v13 - 1);
      if (v19)
      {
        uint64_t v13 = 0xFFFFFFFFLL;
        goto LABEL_32;
      }
    }

    for (uint64_t k = (unsigned __int8 *)v6; ; ++k)
    {
      uint64_t v17 = *v15;
      uint64_t v18 = *k;
      if ((_DWORD)v17 == (_DWORD)v18)
      {
        if (!*v15) {
          break;
        }
      }

      else if (byte_1813C6343[v17] != byte_1813C6343[v18])
      {
        goto LABEL_22;
      }

      ++v15;
    }
  }

uint64_t sub_18131EF58(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*(_BYTE *)(a2 + 63) != 1) {
    return 0LL;
  }
  int v6 = *(const char **)a2;
  if (!*(void *)a2)
  {
    if (a3) {
      return 0LL;
    }
    int v7 = 0;
    goto LABEL_12;
  }

  int v7 = strlen(*(const char **)a2) & 0x3FFFFFFF;
  if (!a3)
  {
LABEL_12:
    if (v6) {
      int v12 = -1;
    }
    else {
      int v12 = 0;
    }
    if (v12) {
      return 0LL;
    }
    goto LABEL_19;
  }

  if (v7)
  {
    int v8 = v7 + 1;
    uint64_t v9 = a3;
    while (1)
    {
      uint64_t v10 = *v9;
      if (!*v9) {
        break;
      }
      LODWORD(v10) = byte_1813C6343[v10];
      int v11 = byte_1813C6343[*(unsigned __int8 *)v6];
      if ((_DWORD)v10 != v11) {
        goto LABEL_18;
      }
      ++v9;
      ++v6;
    }

    int v11 = byte_1813C6343[*(unsigned __int8 *)v6];
LABEL_18:
    if ((_DWORD)v10 != v11) {
      return 0LL;
    }
  }

uint64_t sub_18131F140(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = (void *)a1[2];
  if ((*(_BYTE *)(*a1 + 198) & 2) == 0)
  {
    int v6 = *(__int16 *)(a2 + 54);
    if (v6 >= 1)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = *(void *)(a2 + 8) + v7;
        if ((*(_WORD *)(v9 + 14) & 1) != 0 && (*(_BYTE *)(v9 + 8) & 0xF) == 0)
        {
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(v9 + 8) & 0xF0 | 2;
          LOWORD(v6) = *(_WORD *)(a2 + 54);
        }

        ++v8;
        v7 += 16LL;
      }

      while (v8 < (__int16)v6);
    }

    *(_DWORD *)(a2 + 48) |= 0x800u;
  }

  int v10 = *((_DWORD *)a1 + 50);
  if (v10)
  {
    if (*(_BYTE *)(*v5 + 103LL)) {
      int v11 = &byte_18C550680;
    }
    else {
      int v11 = (char *)(v5[17] + 40LL * v10);
    }
    *((_DWORD *)v11 + 3) = 2;
  }

  uint64_t v12 = a2 + 52;
  if (*(__int16 *)(a2 + 52) < 0)
  {
    for (uint64_t i = *(void *)(a2 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }

    unsigned int v17 = *(unsigned __int16 *)(i + 94);
    if (v17 < 2)
    {
      LOWORD(v20) = 1;
LABEL_39:
      *(_WORD *)(i + 94) = v20;
      goto LABEL_40;
    }

    uint64_t v18 = *(void *)(i + 8);
    uint64_t v19 = 1LL;
    int v20 = 1;
LABEL_24:
    if (v20 < 1)
    {
LABEL_22:
      *(void *)(*(void *)(i + 64) + 8LL * v20) = *(void *)(*(void *)(i + 64) + 8 * v19);
      *(_BYTE *)(*(void *)(i + 56) + v20) = *(_BYTE *)(*(void *)(i + 56) + v19);
      uint64_t v18 = *(void *)(i + 8);
      *(_WORD *)(v18 + 2LL * v20++) = *(_WORD *)(v18 + 2 * v19);
      unsigned int v17 = *(unsigned __int16 *)(i + 94);
      goto LABEL_23;
    }

    uint64_t v21 = 0LL;
    while (*(unsigned __int16 *)(v18 + 2 * v21) != *(unsigned __int16 *)(v18 + 2 * v19))
    {
LABEL_26:
      if (++v21 == v20) {
        goto LABEL_22;
      }
    }

    uint64_t v22 = *(void *)(i + 64);
    uint64_t v23 = *(_BYTE **)(v22 + 8 * v21);
    for (uint64_t j = *(unsigned __int8 **)(v22 + 8 * v19); ; ++j)
    {
      uint64_t v25 = *v23;
      uint64_t v26 = *j;
      if ((_DWORD)v25 == (_DWORD)v26)
      {
        if (!*v23)
        {
          --*(_WORD *)(i + 96);
LABEL_23:
          goto LABEL_24;
        }
      }

      else if (byte_1813C6343[v25] != byte_1813C6343[v26])
      {
        goto LABEL_26;
      }

      ++v23;
    }
  }

  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(const void **)(v13 + 16LL * *(unsigned __int16 *)(a2 + 52));
  if (v14) {
    LODWORD(v15) = strlen(*(const char **)(v13 + 16LL * *(unsigned __int16 *)(a2 + 52))) & 0x3FFFFFFF;
  }
  else {
    LODWORD(v15) = 0;
  }
  uint64_t v27 = sub_1812F2264(v4, (v15 + 81));
  uint64_t v28 = v27;
  if (v27)
  {
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    *(_BYTE *)uint64_t v27 = 59;
    *(_WORD *)(v27 + 52) = -1;
    uint64_t v29 = v27 + 80;
    *(void *)(v27 + 8) = v27 + 80;
    if ((_DWORD)v15)
    {
      uint64_t v15 = v15;
      memcpy((void *)(v27 + 80), v14, v15);
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    *(_BYTE *)(v29 + v15) = 0;
    *(_DWORD *)(v28 + 40) = 1;
  }

  uint64_t result = (uint64_t)sub_18133E190((void *)*a1, (unsigned __int8 *)v28);
  if (!result) {
    goto LABEL_125;
  }
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    uint64_t v35 = (void *)a1[51];
    if (v35)
    {
      while (*v35 != v12)
      {
        uint64_t v35 = (void *)v35[3];
        if (!v35) {
          goto LABEL_124;
        }
      }

      void *v35 = *(void *)(result + 8);
    }
  }

uint64_t sub_18131F804( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = 0LL;
  __int128 v18 = 0u;
  __int128 v17 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  if (a2)
  {
    LODWORD(v20) = 1;
    *((void *)&v21 + 1) = *a2;
    *((void *)&v22 + 1) = a2;
    DWORD2(v24) = -1;
    if (a2[12] == *(void *)(*(void *)(*(void *)a1 + 32LL) + 56LL)) {
      a3 = a3;
    }
    else {
      a3 = a3 | 0x40000;
    }
  }

  v16[0] = a1;
  v16[1] = &v20;
  DWORD2(v18) = a3 | 0x10000;
  uint64_t result = sub_1813205D4((uint64_t)v16, a4, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a5) {
      return sub_1813206F0((uint64_t)v16, a5, v10, v11, v12, v13, v14, v15);
    }
  }

  return result;
}

uint64_t *sub_18131F8B4(uint64_t *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = *(int **)(a2 + 80);
  int v8 = *(unsigned __int16 *)(a3 + 12);
  if (*(_WORD *)(a3 + 12)) {
    BOOL v9 = v7 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (!v7)
    {
      *(_WORD *)(a3 + 12) = 1;
      uint64_t result = sub_18133E190((void *)*result, a4);
LABEL_16:
      *(void *)(a2 + 80) = result;
      return result;
    }

    int v10 = *v7;
LABEL_9:
    *(_WORD *)(a3 + 12) = v10 + 1;
    if (v7[1] > v10)
    {
      int *v7 = v10 + 1;
      uint64_t v11 = &v7[6 * v10];
      *((void *)v11 + 2) = 0LL;
      *((void *)v11 + 3) = 0LL;
      *((void *)v11 + 1) = a4;
      *(void *)(a2 + 80) = v7;
      return result;
    }

    uint64_t result = (uint64_t *)sub_18133E1F4(*result, v7, a4);
    goto LABEL_16;
  }

  int v10 = *v7;
  if (*v7 < v8) {
    goto LABEL_9;
  }
  uint64_t v12 = *(unsigned __int8 **)&v7[6 * (v8 - 1) + 2];
  if (v12)
  {
    uint64_t result = sub_181309110((void *)*result, v12);
    int v8 = *(unsigned __int16 *)(a3 + 12);
  }

  *(void *)&v7[6 * v8 - 4] = a4;
  return result;
}

uint64_t sub_18131F994(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 96);
  if (!*(_WORD *)(result + 96)) {
    goto LABEL_18;
  }
  int v2 = 0;
  uint64_t v3 = *(__int16 **)(result + 8);
  do
  {
    int v6 = *v3++;
    unsigned __int16 v5 = v6;
    if (v6 < 0) {
      int v4 = 1;
    }
    else {
      int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(result + 24) + 8LL) + 16LL * v5 + 10);
    }
    v2 += v4;
    --v1;
  }

  while (v1);
  unint64_t v7 = (4 * v2);
  if (v7 >= 8)
  {
    __int16 v9 = 40;
    if (v7 >= 0x100)
    {
      unint64_t v10 = v7;
      do
      {
        v9 += 40;
        unint64_t v7 = v10 >> 4;
        BOOL v11 = v10 > 0xFFF;
        v10 >>= 4;
      }

      while (v11);
    }

    if (v7 < 0x10)
    {
      LOBYTE(v8) = v7;
    }

    else
    {
      do
      {
        v9 += 10;
        unint64_t v8 = v7 >> 1;
        BOOL v11 = v7 > 0x1F;
        v7 >>= 1;
      }

      while (v11);
    }

    goto LABEL_17;
  }

  if ((_DWORD)v7)
  {
    LOBYTE(v8) = 2 * v7;
    __int16 v9 = 30;
LABEL_17:
    LOWORD(v1) = v9 + word_1813CD842[v8 & 7] - 10;
LABEL_18:
    *(_WORD *)(result + 92) = v1;
    return result;
  }

  *(_WORD *)(result + 92) = 0;
  return result;
}

uint64_t sub_18131FA64(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 48LL);
  *(void *)(*(void *)a1 + 48LL) = v7 & 0xFFFFFFFFFFFFFFBBLL | 0x40;
  sub_181321444((_BYTE *)a1, a2, 0LL);
  uint64_t v8 = 0LL;
  *(void *)(v6 + 48) = v7;
  if (!*(_DWORD *)(a1 + 48))
  {
    do
    {
      uint64_t v10 = v4;
      uint64_t v4 = *(void *)(v4 + 80);
    }

    while (v4);
    if (v6)
    {
      uint64_t v8 = sub_1812F2264(v6, 0x68uLL);
      if (!v8) {
        return v8;
      }
    }

    else
    {
      uint64_t v8 = sub_18126F0AC(104LL);
      if (!v8) {
        return v8;
      }
    }

    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(void *)(v8 + 96) = 0LL;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 44) = 1;
    *(void *)uint64_t v8 = 0LL;
    *(_WORD *)(v8 + 58) = 200;
    sub_181321CF4((_DWORD *)a1, *(int **)(v10 + 32), (_WORD *)(v8 + 54), (void *)(v8 + 8));
    sub_1813226D0(a1, v8, (void *)v10, a3);
    *(_WORD *)(v8 + 52) = -1;
    if (*(_BYTE *)(v6 + 103))
    {
      if (*(void *)(v6 + 816) || (int v11 = *(_DWORD *)(v8 + 44) - 1, (*(_DWORD *)(v8 + 44) = v11) == 0)) {
        sub_181311A80((void *)v6, (void *)v8);
      }
      return 0LL;
    }
  }

  return v8;
}

uint64_t sub_18131FB8C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  int v9 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v9)
  {
    uint64_t result = sub_18131044C(result, 68LL, a2, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(result + 144) = v9 + 1;
    uint64_t v10 = *(void *)(result + 136) + 40LL * v9;
    *(_DWORD *)uint64_t v10 = 68;
    *(_DWORD *)(v10 + 4) = a2;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
  }

  uint64_t v11 = *(void *)(v8 + 24);
  *(_BYTE *)(v11 + 31) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  return result;
}

void sub_18131FC08( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a2 + 50) & 1) != 0)
  {
    if ((_DWORD)a3)
    {
      uint64_t v24 = *(__int16 *)(a2 + 56);
      int v25 = *((_DWORD *)a1 + 36);
      if (*((_DWORD *)a1 + 37) <= v25)
      {
        sub_18131044C((uint64_t)a1, 95LL, a3, v24, 0LL, a6, a7, a8);
      }

      else
      {
        *((_DWORD *)a1 + 36) = v25 + 1;
        uint64_t v26 = (uint64_t)&a1[17][5 * v25];
        *(_DWORD *)uint64_t v26 = 95;
        *(_DWORD *)(v26 + 4) = a3;
        *(_DWORD *)(v26 + 8) = v24;
        *(void *)(v26 + 12) = 0LL;
        *(void *)(v26 + 28) = 0LL;
        *(void *)(v26 + 20) = 0LL;
        *(_DWORD *)(v26 + 36) = 0;
      }

      if (!*((_BYTE *)*a1 + 103))
      {
        uint64_t v34 = (uint64_t)&a1[17][5 * *((int *)a1 + 36)];
        *(_BYTE *)(v34 - 39) = -5;
        *(void *)(v34 - 24) = a2;
      }
    }

    else
    {
      if (*((_BYTE *)*a1 + 103)
        || (uint64_t v27 = (uint64_t)&a1[17][5 * *((int *)a1 + 36)],
            *(_BYTE *)(v27 - 39) = -5,
            *(void *)(v27 - 24) = a2,
            *((_BYTE *)*a1 + 103)))
      {
        int v28 = *((_DWORD *)a1 + 36);
        uint64_t v29 = &byte_18C550680;
      }

      else
      {
        int v28 = *((_DWORD *)a1 + 36);
        uint64_t v29 = (char *)&a1[17][5 * v28 - 5];
      }

      char *v29 = 95;
      uint64_t v30 = *((unsigned int *)v29 + 1);
      uint64_t v31 = *((unsigned int *)v29 + 2);
      uint64_t v32 = *((unsigned int *)v29 + 3);
      if (*((_DWORD *)a1 + 37) <= v28)
      {
        sub_18131044C((uint64_t)a1, 97LL, v30, v31, v32, a6, a7, a8);
      }

      else
      {
        *((_DWORD *)a1 + 36) = v28 + 1;
        uint64_t v33 = (uint64_t)&a1[17][5 * v28];
        *(_DWORD *)uint64_t v33 = 97;
        *(_DWORD *)(v33 + 4) = v30;
        *(_DWORD *)(v33 + 8) = v31;
        *(_DWORD *)(v33 + 12) = v32;
        *(void *)(v33 + 24) = 0LL;
        *(void *)(v33 + 32) = 0LL;
        *(void *)(v33 + 16) = 0LL;
      }
    }
  }

  else
  {
    uint64_t v11 = *(char **)(a2 + 24);
    if (v11)
    {
LABEL_34:
      int v40 = strlen(v11);
      uint64_t v42 = v40 & 0x3FFFFFFF;
      if ((v40 & 0x3FFFFFFF) != 0)
      {
        if ((_DWORD)a3)
        {
          sub_1812B9B68((uint64_t *)a1, 96LL, a3, v42, 0LL, (uint64_t)v11, v42, v41);
        }

        else if (*((_BYTE *)*a1 + 103))
        {
          sub_18127ABFC(*a1, v42, (uint64_t)v11);
        }

        else
        {
          sub_181310724((uint64_t *)a1, (uint64_t)&a1[17][5 * *((int *)a1 + 36) - 5], v11, v42);
        }
      }

      return;
    }

    uint64_t v12 = sub_18126F0AC(*(__int16 *)(a2 + 54) + 1LL);
    if (v12)
    {
      uint64_t v11 = (char *)v12;
      int v19 = *(__int16 *)(a2 + 54);
      if (v19 < 1)
      {
        int v22 = 0;
      }

      else
      {
        uint64_t v20 = 0LL;
        uint64_t v21 = 0LL;
        int v22 = 0;
        do
        {
          uint64_t v23 = *(void *)(a2 + 8) + v20;
          if ((*(_WORD *)(v23 + 14) & 0x20) == 0)
          {
            *(_BYTE *)(v12 + v22++) = *(_BYTE *)(v23 + 9);
            LOWORD(v19) = *(_WORD *)(a2 + 54);
          }

          ++v21;
          v20 += 16LL;
        }

        while (v21 < (__int16)v19);
      }

      uint64_t v38 = v22;
      do
      {
        *(_BYTE *)(v12 + v38) = 0;
        BOOL v39 = v38-- < 1;
      }

      while (!v39 && *(char *)(v12 + v38) < 66);
      *(void *)(a2 + 24) = v12;
      goto LABEL_34;
    }

    uint64_t v35 = (uint64_t)*a1;
    if (!*(_BYTE *)(v35 + 103) && !*(_BYTE *)(v35 + 104))
    {
      *(_BYTE *)(v35 + 103) = 1;
      ++*(_DWORD *)(v35 + 432);
      *(_WORD *)(v35 + 436) = 0;
      uint64_t v36 = *(void *)(v35 + 344);
      if (v36)
      {
        sub_1812DC47C(v36, "out of memory", v13, v14, v15, v16, v17, v18, v43);
        for (uint64_t i = *(void *)(v35 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
  }

const char *sub_18131FF0C(uint64_t a1, uint64_t a2)
{
  int v4 = *(__int16 *)(a2 + 54);
  if (v4 >= 1)
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(_BYTE ***)(a2 + 8);
    while (1)
    {
      int v8 = 0;
      for (uint64_t i = *v7; ; ++i)
      {
        if (*i == 34)
        {
          ++v8;
          goto LABEL_5;
        }

        if (!*i) {
          break;
        }
LABEL_5:
        ++v8;
      }

      v6 += v8 + 7;
      ++v5;
      v7 += 2;
      if (v5 == v4)
      {
        int v10 = v6 + 2;
        goto LABEL_11;
      }
    }
  }

  int v10 = 2;
LABEL_11:
  int v11 = 0;
  for (uint64_t j = *(unsigned __int8 **)a2; ; ++j)
  {
    if (*j == 34)
    {
      ++v11;
      goto LABEL_13;
    }

    if (!*j) {
      break;
    }
LABEL_13:
    ++v11;
  }

  int v13 = v10 + v11;
  if (v10 + v11 >= 50) {
    uint64_t v14 = ",\n  ";
  }
  else {
    uint64_t v14 = ",";
  }
  if (v13 >= 50) {
    uint64_t v15 = "\n)";
  }
  else {
    uint64_t v15 = ")";
  }
  int v16 = v13 + 6 * v4 + 35;
  uint64_t v17 = (char *)sub_18126F0AC(v16);
  if (v17)
  {
    uint64_t v24 = v17;
    sqlite3_snprintf(v16, v17, "CREATE TABLE ");
    int v39 = strlen(v24) & 0x3FFFFFFF;
    sub_181323430((uint64_t)v24, &v39, *(unsigned __int8 **)a2);
    uint64_t v25 = v39 + 1LL;
    v24[v39] = 40;
    uint64_t v38 = v15;
    if (*(__int16 *)(a2 + 54) >= 1)
    {
      uint64_t v26 = *(void *)(a2 + 8);
      if (v13 >= 50) {
        sqlite3_snprintf(v16 - v25, (char *)&v24[v25], "\n  ");
      }
      else {
        sqlite3_snprintf(v16 - v25, (char *)&v24[v25], &byte_1813CEAEE);
      }
      int v39 = (strlen(&v24[v25]) & 0x3FFFFFFF) + v25;
      sub_181323430((uint64_t)v24, &v39, *(unsigned __int8 **)v26);
      unsigned int v27 = strlen(*((const char **)&off_189B6E6B8 + *(char *)(v26 + 9) - 65)) & 0x3FFFFFFF;
      int v28 = v39;
      memcpy((void *)&v24[v39], *((const void **)&off_189B6E6B8 + *(char *)(v26 + 9) - 65), v27);
      LODWORD(v25) = v27 + v28;
      if (*(__int16 *)(a2 + 54) >= 2)
      {
        uint64_t v29 = (char *)(v26 + 25);
        int v30 = 1;
        do
        {
          sqlite3_snprintf(v16 - v25, (char *)&v24[(int)v25], v14);
          int v39 = (strlen(&v24[(int)v25]) & 0x3FFFFFFF) + v25;
          sub_181323430((uint64_t)v24, &v39, *(unsigned __int8 **)(v29 - 9));
          unsigned int v31 = strlen(*((const char **)&off_189B6E6B8 + *v29 - 65)) & 0x3FFFFFFF;
          int v32 = v39;
          memcpy((void *)&v24[v39], *((const void **)&off_189B6E6B8 + *v29 - 65), v31);
          LODWORD(v25) = v31 + v32;
          int v39 = v25;
          ++v30;
          v29 += 16;
        }

        while (v30 < *(__int16 *)(a2 + 54));
      }
    }

    sqlite3_snprintf(v16 - v25, (char *)&v24[(int)v25], "%s", v38);
  }

  else
  {
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v34 = *(void *)(a1 + 344);
    if (!v34) {
      return 0LL;
    }
    sub_1812DC47C(v34, "out of memory", v18, v19, v20, v21, v22, v23, v37);
    uint64_t v35 = *(void *)(a1 + 344);
    *(_DWORD *)(v35 + 24) = 7;
    uint64_t v36 = *(void *)(v35 + 256);
    if (!v36)
    {
      return 0LL;
    }

    else
    {
      uint64_t v24 = 0LL;
      do
      {
        ++*(_DWORD *)(v36 + 48);
        *(_DWORD *)(v36 + 24) = 7;
        uint64_t v36 = *(void *)(v36 + 256);
      }

      while (v36);
    }
  }

  return v24;
}

uint64_t sub_181320254( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  uint64_t result = a1[2];
  uint64_t v10 = (**(_DWORD **)(*(void *)(v8 + 32) + 32LL * (int)a2 + 24) + 1);
  int v11 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v11) {
    return sub_18131044C(result, 100LL, a2, 1LL, v10, a6, a7, a8);
  }
  *(_DWORD *)(result + 144) = v11 + 1;
  uint64_t v12 = *(void *)(result + 136) + 40LL * v11;
  *(_DWORD *)uint64_t v12 = 100;
  *(_DWORD *)(v12 + 4) = a2;
  *(_DWORD *)(v12 + 8) = 1;
  *(_DWORD *)(v12 + 12) = v10;
  *(void *)(v12 + 24) = 0LL;
  *(void *)(v12 + 32) = 0LL;
  *(void *)(v12 + 16) = 0LL;
  return result;
}

uint64_t sub_1813202C4( uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1812B9B68((uint64_t *)a1, 149LL, a2, 0LL, 0LL, a3, 4294967290LL, a8);
  int v11 = *(_DWORD *)(a1 + 144);
  BOOL v12 = __OFSUB__(v11, 1);
  int v13 = v11 - 1;
  if (v13 < 0 == v12) {
    *(_WORD *)(*(void *)(a1 + 136) + 40LL * v13 + 2) = a4;
  }
  uint64_t v14 = *(void *)a1;
  uint64_t v15 = *(unsigned int *)(*(void *)a1 + 40LL);
  if ((int)v15 >= 1)
  {
    int v16 = *(_DWORD *)(a1 + 272);
    int v17 = v16 | 1;
    if (*(_BYTE *)(*(void *)(*(void *)(v14 + 32) + 8LL) + 17LL)) {
      *(_DWORD *)(a1 + 276) |= 1u;
    }
    if ((_DWORD)v15 != 1)
    {
      int v17 = v16 | 3;
      if ((_DWORD)v15 != 2)
      {
        uint64_t v19 = *(void *)(v14 + 32) + 72LL;
        for (uint64_t i = 2LL; i != v15; ++i)
        {
          int v21 = 1 << i;
          if (*(_BYTE *)(*(void *)v19 + 17LL)) {
            *(_DWORD *)(a1 + 276) |= v21;
          }
          v17 |= v21;
          v19 += 32LL;
        }
      }
    }

    *(_DWORD *)(a1 + 272) = v17;
  }

  uint64_t v18 = *(void *)(a1 + 24);
  if (*(void *)(v18 + 168)) {
    uint64_t v18 = *(void *)(v18 + 168);
  }
  *(_BYTE *)(v18 + 33) = 1;
  return result;
}

uint64_t sub_1813203C8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a2 >= 1)
  {
    for (uint64_t i = 0LL; i != a2; ++i)
    {
      if (*(unsigned __int16 *)(*(void *)(a1 + 8) + 2 * i) == *(unsigned __int16 *)(*(void *)(a3 + 8) + 2LL * a4))
      {
        int v5 = *(_BYTE **)(*(void *)(a1 + 64) + 8 * i);
        for (uint64_t j = *(unsigned __int8 **)(*(void *)(a3 + 64) + 8LL * a4); ; ++j)
        {
          uint64_t v7 = *v5;
          uint64_t v8 = *j;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*v5) {
              return 1LL;
            }
          }

          else if (byte_1813C6343[v7] != byte_1813C6343[v8])
          {
            break;
          }

          ++v5;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_18132045C(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = 13 * a3;
  size_t v6 = 13 * a3;
  if (a1)
  {
    uint64_t v7 = (char *)sub_1812F2264(a1, v5);
    if (v7)
    {
LABEL_4:
      bzero(v7, v6);
      memcpy(v7, *(const void **)(a2 + 64), 8LL * *(unsigned __int16 *)(a2 + 96));
      *(void *)(a2 + 64) = v7;
      uint64_t v8 = &v7[8 * a3];
      memcpy(v8, *(const void **)(a2 + 16), 2LL * *(unsigned __int16 *)(a2 + 94) + 2);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = 2LL * a3;
      uint64_t v10 = &v8[v9];
      memcpy(v10, *(const void **)(a2 + 8), 2LL * *(unsigned __int16 *)(a2 + 96));
      *(void *)(a2 + 8) = v10;
      int v11 = &v10[v9];
      memcpy(v11, *(const void **)(a2 + 56), *(unsigned __int16 *)(a2 + 96));
      uint64_t result = 0LL;
      *(void *)(a2 + 56) = v11;
      *(_WORD *)(a2 + 96) = a3;
      *(_WORD *)(a2 + 99) |= 0x10u;
      return result;
    }
  }

  else
  {
    uint64_t v7 = (char *)sub_18126F0AC(v5);
    if (v7) {
      goto LABEL_4;
    }
  }

  return 7LL;
}

uint64_t sub_181320560(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 96);
  if (*(_WORD *)(result + 96))
  {
    uint64_t v2 = 0LL;
    do
    {
      if ((*(__int16 *)(*(void *)(result + 8) - 2LL + 2 * v1) & 0x80000000) == 0)
      {
        uint64_t v3 = *(unsigned __int16 *)(*(void *)(result + 8) - 2LL + 2 * v1);
        if (v3 <= 0x3E
          && (*(_WORD *)(*(void *)(*(void *)(result + 24) + 8LL) + 16 * v3 + 14) & 0x20) == 0)
        {
          v2 |= 1LL << v3;
        }
      }

      --v1;
    }

    while ((unint64_t)(v1 + 1) > 1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  *(void *)(result + 104) = ~v2;
  return result;
}

BOOL sub_1813205D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0LL;
  }
  int v10 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v10 & 0xF7FF6FEF;
  int v11 = *(_DWORD **)a1;
  v18[0] = v11;
  v18[1] = sub_1812876D8;
  BOOL v12 = sub_1812871E4;
  if ((v10 & 0x80000) != 0) {
    BOOL v12 = 0LL;
  }
  v18[2] = v12;
  v18[3] = 0LL;
  v18[5] = a1;
  int v13 = v11[77] + *(_DWORD *)(a2 + 40);
  v11[77] = v13;
  if (*(_DWORD *)(*(void *)v11 + 148LL) >= v13)
  {
    int v15 = v10 & 0x8009010;
    sub_18131C57C((uint64_t)v18, a2);
    uint64_t v16 = v18[0];
    *(_DWORD *)(v18[0] + 308LL) -= *(_DWORD *)(a2 + 40);
    int v17 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 4) |= v17 & 0x8010;
    *(_DWORD *)(a1 + 40) = v17 | v15;
    return *(int *)(a1 + 36) > 0 || *(_DWORD *)(v16 + 48) > 0;
  }

  else
  {
    sub_1812DC47C( (uint64_t)v11,  "Expression tree is too large (maximum depth %d)",  a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)v11 + 148LL));
    return 1LL;
  }

uint64_t sub_1813206F0( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0LL;
  }
  int v10 = *(int **)a1;
  v20[0] = v10;
  v20[1] = sub_1812876D8;
  v20[2] = sub_1812871E4;
  v20[3] = 0LL;
  v20[5] = a1;
  int v11 = *(_DWORD *)(a1 + 40);
  int v12 = v11 & 0x8009010;
  unsigned int v13 = v11 & 0xF7FF6FEF;
  *(_DWORD *)(a1 + 40) = v13;
  int v14 = *a2;
  if (*a2 < 1)
  {
LABEL_11:
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 40) = v13 | v12;
    return result;
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 2LL;
  while (1)
  {
    uint64_t v17 = *(void *)&a2[v16];
    if (!v17) {
      goto LABEL_4;
    }
    int v18 = v10[77] + *(_DWORD *)(v17 + 40);
    v10[77] = v18;
    if (*(_DWORD *)(*(void *)v10 + 148LL) < v18) {
      break;
    }
    sub_18131C57C((uint64_t)v20, v17);
    int v10 = (int *)v20[0];
    *(_DWORD *)(v20[0] + 308LL) -= *(_DWORD *)(v17 + 40);
    unsigned int v13 = *(_DWORD *)(a1 + 40);
    if ((v13 & 0x8009010) != 0)
    {
      *(_DWORD *)(v17 + 4) |= *(_DWORD *)(a1 + 40) & 0x8010;
      v12 |= v13 & 0x8009010;
      v13 &= 0xF7FF6FEF;
      *(_DWORD *)(a1 + 40) = v13;
    }

    if (v10[12] > 0) {
      return 2LL;
    }
    int v14 = *a2;
LABEL_4:
    ++v15;
    v16 += 6LL;
    if (v15 >= v14) {
      goto LABEL_11;
    }
  }

  sub_1812DC47C( (uint64_t)v10,  "Expression tree is too large (maximum depth %d)",  a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)v10 + 148LL));
  return 2LL;
}

void sub_181320858( uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a5;
  sub_1812DC47C(a1, "%s prohibited in %s", a3, (uint64_t)a4, a5, a6, a7, a8, a3);
  if (a4) {
    *a4 = 121;
  }
  if (v8)
  {
    while (1)
    {
      if ((*(_BYTE *)(v8 + 4) & 3) == 0)
      {
        int v11 = *(_DWORD *)(v8 + 56);
        if (v11 > 0) {
          break;
        }
      }

      uint64_t v8 = *(void *)(v8 + 16);
      if (!v8) {
        return;
      }
    }

    *(_DWORD *)(*(void *)a1 + 84LL) = v11;
  }

unsigned int sub_181320914(unsigned __int8 *a1)
{
  double v4 = -1.0;
  if (*a1 == 153
    && ((uint64_t v1 = (unsigned __int8 *)*((void *)a1 + 1)) == 0LL
      ? (int v2 = 0)
      : (int v2 = strlen(*((const char **)a1 + 1)) & 0x3FFFFFFF),
        sub_1812B8054(v1, &v4, v2, 1),
        v4 <= 1.0))
  {
    return vcvtd_n_s64_f64(v4, 0x1BuLL);
  }

  else
  {
    return -1;
  }

void sub_181320990( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a2;
  if (!*(void *)a3 || *(_BYTE *)(a3 + 32))
  {
    sub_1813197C0(a1, (void *)a3, a2, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a3 + 32) != 89) {
      goto LABEL_25;
    }
LABEL_4:
    if (!*(void *)(a3 + 40) && !*(void *)(a3 + 48) || (int v18 = *(_DWORD **)(a3 + 24)) != 0LL && *v18 == 1)
    {
LABEL_25:
      if ((*(_BYTE *)(a4 + 6) & 1) == 0)
      {
LABEL_29:
        *(void *)(a3 + 80) = a4;
        return;
      }

      if (!*(void *)(a3 + 72))
      {
        int v30 = (void *)*a1;
        unsigned int v31 = *(char **)(a4 + 56);
        if (v31 == "row_number")
        {
          unsigned int v32 = 0;
        }

        else if (v31 == "dense_rank")
        {
          unsigned int v32 = 1;
        }

        else if (v31 == "rank")
        {
          unsigned int v32 = 2;
        }

        else if (v31 == "percent_rank")
        {
          unsigned int v32 = 3;
        }

        else if (v31 == "cume_dist")
        {
          unsigned int v32 = 4;
        }

        else if (v31 == "ntile")
        {
          unsigned int v32 = 5;
        }

        else if (v31 == "lead")
        {
          unsigned int v32 = 6;
        }

        else
        {
          if (v31 != "lag") {
            goto LABEL_29;
          }
          unsigned int v32 = 7;
        }

        uint64_t v34 = (uint64_t *)(a3 + 40);
        uint64_t v33 = *(unsigned __int8 **)(a3 + 40);
        if (v33) {
          sub_181309110(v30, v33);
        }
        uint64_t v35 = *(unsigned __int8 **)(a3 + 48);
        if (v35) {
          sub_181309110(v30, v35);
        }
        uint64_t v36 = &(&off_189B6E5E8)[3 * v32];
        uint64_t *v34 = 0LL;
        *(void *)(a3 + 48) = 0LL;
        *(_BYTE *)(a3 + 32) = *((_DWORD *)v36 + 2);
        int v37 = *((unsigned __int8 *)v36 + 12);
        *(_BYTE *)(a3 + 33) = v37;
        *(_BYTE *)(a3 + 34) = *((_DWORD *)v36 + 4);
        *(_BYTE *)(a3 + 36) = 0;
        if (v37 == 86)
        {
          int v39 = "1";
          int v40 = 1;
          uint64_t *v34 = sub_18127F5B0((uint64_t)v30, 155, (uint64_t)&v39, 0);
        }

        goto LABEL_29;
      }

      uint64_t v19 = "FILTER clause may only be used with aggregate window functions";
    }

    else
    {
      uint64_t v19 = "RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression";
    }

    sub_1812DC47C((uint64_t)a1, v19, v12, v13, v14, v15, v16, v17, v38);
    goto LABEL_29;
  }

  if (a2)
  {
LABEL_10:
    uint64_t v20 = *(_BYTE **)v10;
    for (uint64_t i = *(unsigned __int8 **)a3; ; ++i)
    {
      uint64_t v22 = *v20;
      uint64_t v23 = *i;
      if ((_DWORD)v22 == (_DWORD)v23)
      {
        if (!*v20)
        {
          *(void *)(a3 + 16) = sub_18129CD4C(*a1, *(void **)(v10 + 16), 0);
          uint64_t v24 = sub_18129CD4C(*a1, *(void **)(v10 + 24), 0);
          *(void *)(a3 + 24) = v24;
          uint64_t v25 = *(unsigned __int8 **)(v10 + 40);
          if (v25) {
            uint64_t v26 = sub_18129C928(*a1, v25, 0LL, 0LL);
          }
          else {
            uint64_t v26 = 0LL;
          }
          *(void *)(a3 + 40) = v26;
          unsigned int v27 = *(unsigned __int8 **)(v10 + 48);
          if (v27) {
            int v28 = sub_18129C928(*a1, v27, 0LL, 0LL);
          }
          else {
            int v28 = 0LL;
          }
          *(void *)(a3 + 48) = v28;
          *(_WORD *)(a3 + 33) = *(_WORD *)(v10 + 33);
          int v29 = *(unsigned __int8 *)(v10 + 32);
          *(_BYTE *)(a3 + 32) = v29;
          *(_BYTE *)(a3 + 36) = *(_BYTE *)(v10 + 36);
          if (v29 == 89) {
            goto LABEL_4;
          }
          goto LABEL_25;
        }
      }

      else if (byte_1813C6343[v22] != byte_1813C6343[v23])
      {
        uint64_t v10 = *(void *)(v10 + 64);
        if (v10) {
          goto LABEL_10;
        }
        break;
      }

      ++v20;
    }
  }

  sub_1812DC47C((uint64_t)a1, "no such window: %s", a3, a4, a5, a6, a7, a8, *(void *)a3);
}

uint64_t sub_181320C98(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if ((*(_WORD *)(a1 + 17) & 3) != 2) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  int v5 = *(_BYTE **)(a1 + 8);
  int v6 = *v5;
  if (*v5)
  {
    do
    {
      if (v6 == 46) {
        break;
      }
      int v6 = v5[++v4];
    }

    while (v5[v4]);
  }

  int v7 = v4 + 1;
  if (a4)
  {
    if ((_DWORD)v4)
    {
      int v8 = v4 + 1;
      uint64_t v9 = a4;
      uint64_t v10 = *(_BYTE **)(a1 + 8);
      while (1)
      {
        uint64_t v11 = *v10;
        if (!*v10) {
          break;
        }
        LODWORD(v11) = byte_1813C6343[v11];
        int v12 = byte_1813C6343[*v9];
        if ((_DWORD)v11 != v12) {
          goto LABEL_13;
        }
        ++v10;
        ++v9;
      }

      int v12 = byte_1813C6343[*v9];
LABEL_13:
      if ((_DWORD)v11 != v12) {
        return 0LL;
      }
    }

uint64_t sub_181320E20(uint64_t *a1, _DWORD **a2, uint64_t a3, int a4)
{
  uint64_t result = sub_1812F2264(*a1, 0x50uLL);
  if (result)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_BYTE *)uint64_t result = -89;
    *(_WORD *)(result + 52) = -1;
    int v9 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(result + 40) = 1;
    *(_DWORD *)(result + 44) = v9;
    *(_DWORD *)(result + 48) = a4;
    *(void *)(result + 72) = *(void *)(a3 + 32);
    *(_DWORD *)(result + 4) |= 0x200000u;
    uint64_t v10 = *a2;
    if (*a2)
    {
      int v11 = *v10;
      if (v10[1] > *v10)
      {
        _DWORD *v10 = v11 + 1;
        int v12 = &v10[6 * v11];
        v12[2] = 0LL;
        v12[3] = 0LL;
        v12[1] = result;
LABEL_8:
        *a2 = v10;
        return result;
      }

      uint64_t result = (uint64_t)sub_18133E1F4(*a1, v10, (unsigned __int8 *)result);
    }

    else
    {
      uint64_t result = (uint64_t)sub_18133E190((void *)*a1, (unsigned __int8 *)result);
    }

    uint64_t v10 = (_DWORD *)result;
    goto LABEL_8;
  }

  return result;
}

uint64_t sub_181320EFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned __int8 *)result;
  if (!*(_BYTE *)result)
  {
    int v14 = 0;
    uint64_t v13 = "sqlite_";
    goto LABEL_30;
  }

  if ((v5 & 0xFFFFFFDF) != 0x53)
  {
    int v12 = &byte_1813C6343[v5];
    uint64_t v13 = "sqlite_";
    goto LABEL_29;
  }

  uint64_t v6 = *(unsigned __int8 *)(result + 1);
  if (!*(_BYTE *)(result + 1))
  {
    int v14 = 0;
    uint64_t v13 = "qlite_";
    goto LABEL_30;
  }

  if ((v6 & 0xFFFFFFDF) != 0x51)
  {
    int v12 = &byte_1813C6343[v6];
    uint64_t v13 = "qlite_";
    goto LABEL_29;
  }

  uint64_t v7 = *(unsigned __int8 *)(result + 2);
  if (!*(_BYTE *)(result + 2))
  {
    int v14 = 0;
    uint64_t v13 = "lite_";
    goto LABEL_30;
  }

  if ((v7 & 0xFFFFFFDF) != 0x4C)
  {
    int v12 = &byte_1813C6343[v7];
    uint64_t v13 = "lite_";
    goto LABEL_29;
  }

  uint64_t v8 = *(unsigned __int8 *)(result + 3);
  if (!*(_BYTE *)(result + 3))
  {
    int v14 = 0;
    uint64_t v13 = "ite_";
    goto LABEL_30;
  }

  if ((v8 & 0xFFFFFFDF) != 0x49)
  {
    int v12 = &byte_1813C6343[v8];
    uint64_t v13 = "ite_";
    goto LABEL_29;
  }

  uint64_t v9 = *(unsigned __int8 *)(result + 4);
  if (!*(_BYTE *)(result + 4))
  {
    int v14 = 0;
    uint64_t v13 = "te_";
    goto LABEL_30;
  }

  if ((v9 & 0xFFFFFFDF) != 0x54)
  {
    int v12 = &byte_1813C6343[v9];
    uint64_t v13 = "te_";
    goto LABEL_29;
  }

  uint64_t v10 = *(unsigned __int8 *)(result + 5);
  if (!*(_BYTE *)(result + 5))
  {
    int v14 = 0;
    uint64_t v13 = "e_";
    goto LABEL_30;
  }

  if ((v10 & 0xFFFFFFDF) != 0x45)
  {
    int v12 = &byte_1813C6343[v10];
    uint64_t v13 = "e_";
    goto LABEL_29;
  }

  uint64_t v11 = *(unsigned __int8 *)(result + 6);
  if (!*(_BYTE *)(result + 6))
  {
    int v14 = 0;
    uint64_t v13 = "_";
LABEL_30:
    goto LABEL_31;
  }

  if ((_DWORD)v11 != 95)
  {
    int v12 = &byte_1813C6343[v11];
    uint64_t v13 = "_";
LABEL_29:
    int v14 = *v12;
    goto LABEL_30;
  }

uint64_t sub_1813211C8(uint64_t *a1, uint64_t a2, char *__s)
{
  if (__s)
  {
    size_t v6 = strlen(__s) & 0x3FFFFFFF;
    if (v6)
    {
      uint64_t v7 = sub_1812F2264(*a1, v6 + 81);
      if (v7)
      {
        uint64_t v8 = v7;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_BYTE *)uint64_t v7 = 113;
        *(_WORD *)(v7 + 52) = -1;
        uint64_t v9 = v7 + 80;
        *(void *)(v7 + 8) = v7 + 80;
        memcpy((void *)(v7 + 80), __s, v6);
        *(_BYTE *)(v9 + v6) = 0;
        *(_DWORD *)(v8 + 40) = 1;
        *(void *)(v8 + 16) = a2;
        *(_DWORD *)(v8 + 4) |= 0x2200u;
        return v8;
      }
    }
  }

  return a2;
}

uint64_t sub_181321284(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 168) {
    a2[2] += *(_BYTE *)(a1 + 40);
  }
  return 0LL;
}

uint64_t sub_1813212A8(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 169 || v2 == 167)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    uint64_t v4 = (unsigned int *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v4;
      if ((int)v5 >= 1)
      {
        size_t v6 = (int *)(v4 + 18);
        while (1)
        {
          int v7 = *v6;
          v6 += 26;
          if (*((_DWORD *)a2 + 11) == v7) {
            break;
          }
          if (!--v5) {
            goto LABEL_8;
          }
        }

        __int16 v11 = 1;
        goto LABEL_14;
      }
    }

uint64_t sub_181321338(uint64_t a1, uint64_t a2)
{
  int v2 = *(int **)(a2 + 40);
  int v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 40);
    uint64_t v6 = v4[2];
    uint64_t v5 = (void *)v4[3];
    uint64_t v7 = v6 + v3;
    void v4[2] = v7;
    uint64_t v8 = *v4;
    unint64_t v9 = 4 * v7;
    if (v5)
    {
      if (*(void *)(v8 + 512) > (unint64_t)v5)
      {
        if (*(void *)(v8 + 496) <= (unint64_t)v5)
        {
          if (v9 < 0x81) {
            goto LABEL_13;
          }
        }

        else if (*(void *)(v8 + 504) <= (unint64_t)v5 && v9 <= *(unsigned __int16 *)(v8 + 438))
        {
LABEL_13:
          v4[3] = (uint64_t)v5;
          if (v3 >= 1)
          {
            uint64_t v11 = 0LL;
            uint64_t v12 = 18LL;
            do
            {
              *((_DWORD *)v5 + v6 + v11++) = v2[v12];
              v12 += 26LL;
            }

            while (v11 < *v2);
          }

          return 0LL;
        }
      }

      uint64_t v5 = (void *)sub_1812F2310(v8, v5, v9);
      if (v5)
      {
LABEL_12:
        int v3 = *v2;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v5 = (void *)sub_1812F2264(v8, 4 * v7);
      if (v5) {
        goto LABEL_12;
      }
    }

    void v4[2] = 0LL;
    return 2LL;
  }

  return 0LL;
}

uint64_t sub_181321424(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3) {
    *(void *)(v2 + 16) = v3 - **(int **)(a2 + 40);
  }
  return result;
}

_BYTE *sub_181321444(_BYTE *result, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(*(void *)result + 103LL) && (*(_BYTE *)(a2 + 4) & 0x80) == 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = result;
    uint64_t v7 = sub_181321B20;
    if (result[34])
    {
      uint64_t v8 = sub_181321B28;
      unint64_t v9 = 0LL;
      sub_181285228(&v6, (void *)a2);
    }

    uint64_t v8 = sub_1812854BC;
    unint64_t v9 = sub_18131C81C;
    __int16 v10 = 0;
    uint64_t result = (_BYTE *)sub_181285228(&v6, (void *)a2);
    if (!*((_DWORD *)v5 + 12))
    {
      uint64_t v8 = sub_1812871E4;
      unint64_t v9 = 0LL;
      uint64_t v6 = v5;
      uint64_t v7 = sub_1812876D8;
      uint64_t v11 = a3;
      uint64_t result = (_BYTE *)sub_181285228(&v6, (void *)a2);
      if (!*((_DWORD *)v5 + 12))
      {
        uint64_t v8 = sub_181323260;
        unint64_t v9 = sub_181289C7C;
        uint64_t v6 = v5;
        uint64_t v7 = sub_181321B20;
        return (_BYTE *)sub_181285228(&v6, (void *)a2);
      }
    }
  }

  return result;
}

void sub_181321538( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a2[5] & 2) != 0)
  {
    sub_1812DC47C(a1, "all VALUES must have the same number of terms", a3, a4, a5, a6, a7, a8, a9);
  }

  else
  {
    else {
      unint64_t v9 = off_189B6F8B0[(char)(*a2 + 121)];
    }
    sub_1812DC47C( a1,  "SELECTs to the left and right of %s do not have the same number of result columns",  a3,  a4,  a5,  a6,  a7,  a8,  (char)v9);
  }

uint64_t sub_1813215AC( unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unsigned int *)a2[9];
  if (!v8) {
    return 0LL;
  }
  unint64_t v9 = a1;
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *v8;
  if ((int)v11 > *(_DWORD *)(*(void *)a1 + 144LL))
  {
    sub_1812DC47C((uint64_t)a1, "too many terms in ORDER BY clause", a3, a4, a5, a6, a7, a8, v60);
    return 1LL;
  }

  if ((int)v11 >= 1)
  {
    if ((_DWORD)v11 == 1)
    {
      uint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v13 = v11 & 0xFFFFFFFE;
      int v14 = (_WORD *)((char *)v8 + 49);
      uint64_t v15 = v13;
      do
      {
        __int16 v16 = *v14 & 0xFFFB;
        *(v14 - 12) &= ~4u;
        _WORD *v14 = v16;
        v14 += 24;
        v15 -= 2LL;
      }

      while (v15);
      if (v13 == v11) {
        goto LABEL_13;
      }
    }

    int v17 = (_WORD *)((char *)&v8[6 * v13 + 6] + 1);
    uint64_t v18 = v11 - v13;
    do
    {
      *v17 &= ~4u;
      v17 += 12;
      --v18;
    }

    while (v18);
  }

uint64_t sub_181321B20()
{
  return 0LL;
}

uint64_t sub_181321B28(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2 + 80;
  if (*((void *)a2 + 10))
  {
    uint64_t v4 = (unsigned int *)*((void *)a2 + 9);
    if (v4)
    {
      uint64_t v5 = a2;
      while (1)
      {
        int v6 = *v5;
        if (v6 != 138 && v6 != 135) {
          break;
        }
        uint64_t v5 = (unsigned __int8 *)*((void *)v5 + 10);
        if (!v5) {
          return 0LL;
        }
      }

      if (!*((_WORD *)v4 + 14))
      {
        int v8 = *v4 + 1;
        unint64_t v9 = &v4[6 * *v4 - 4];
        while (--v8 >= 1)
        {
          uint64_t v10 = *(void *)v9;
          v9 -= 6;
          if ((*(_BYTE *)(v10 + 5) & 2) != 0)
          {
            uint64_t v11 = *a1;
            uint64_t v12 = **a1;
            uint64_t v13 = sub_181268E34(v12, 0x80uLL);
            if (!v13) {
              return 2LL;
            }
            uint64_t v15 = v13;
            v25[0] = 0LL;
            v25[1] = 0LL;
            __int16 v16 = sub_18127F854((uint64_t)v11, 0LL, 0LL, 0LL, (uint64_t)v25, (uint64_t)v13, 0LL, v14);
            if (!v16) {
              return 2LL;
            }
            __int128 v17 = *(_OWORD *)a2;
            __int128 v18 = *((_OWORD *)a2 + 1);
            __int128 v19 = *((_OWORD *)a2 + 3);
            v15[2] = *((_OWORD *)a2 + 2);
            unint64_t v15[3] = v19;
            _OWORD *v15 = v17;
            v15[1] = v18;
            __int128 v20 = *((_OWORD *)a2 + 4);
            __int128 v21 = *((_OWORD *)a2 + 5);
            __int128 v22 = *((_OWORD *)a2 + 7);
            v15[6] = *((_OWORD *)a2 + 6);
            v15[7] = v22;
            v15[4] = v20;
            v15[5] = v21;
            *((void *)a2 + 5) = v16;
            uint64_t v26 = 0LL;
            int v27 = 0;
            uint64_t v23 = (unsigned __int8 *)sub_18127F5B0(v12, 180, (uint64_t)&v26, 0);
            uint64_t v24 = sub_18133E190((void *)*v11, v23);
            uint64_t result = 0LL;
            *((void *)a2 + 4) = v24;
            *a2 = -118;
            *((void *)a2 + 6) = 0LL;
            *((void *)v15 + 7) = 0LL;
            *((void *)v15 + 8) = 0LL;
            *((void *)v15 + 9) = 0LL;
            *((void *)a2 + 13) = 0LL;
            *((void *)a2 + 15) = 0LL;
            *uint64_t v2 = 0LL;
            v2[1] = 0LL;
            *((_DWORD *)a2 + 1) = *((_DWORD *)a2 + 1) & 0xFFFEFEFF | 0x10000;
            *(void *)(*((void *)v15 + 10) + 88LL) = v15;
            *((void *)v15 + 12) = 0LL;
            return result;
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_181321CB0( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)a3)
  {
    uint64_t v8 = *(void *)(*(void *)a1 + 32LL);
    unint64_t v9 = (uint64_t *)(v8 + 24);
    uint64_t v10 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v11 = *v9;
      v9 += 4;
      v10 += 0x100000000LL;
    }

    while (v11 != *(void *)a3);
    uint64_t v12 = (_BYTE **)(v8 + (v10 >> 27));
  }

  else
  {
    uint64_t v12 = (_BYTE **)(a3 + 8);
  }

  return sub_18129EAF4(a1, a2, *(char **)(a3 + 16), *v12, a5, a6, a7, a8);
}

uint64_t sub_181321CF4(_DWORD *a1, int *a2, _WORD *a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v80 = 0LL;
  uint64_t v81 = 0LL;
  uint64_t v82 = 0LL;
  if (!a2)
  {
    uint64_t v15 = 0LL;
    LODWORD(v37) = 0;
    *a3 = 0;
    *a4 = 0LL;
    __int128 v17 = a1 + 12;
    goto LABEL_111;
  }

  uint64_t v8 = *a2;
  if (!v7)
  {
    uint64_t v15 = (void *)sub_18126F0AC(16 * v8);
    if (!v15) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  uint64_t v15 = (void *)sub_1812F2264(v7, 16 * v8);
  if (v15) {
LABEL_4:
  }
    bzero(v15, 16 * v8);
LABEL_5:
  else {
    uint64_t v16 = v8;
  }
  *uint64_t v5 = v16;
  *a4 = v15;
  __int128 v17 = a1 + 12;
  if ((int)v8 < 1)
  {
    LODWORD(v37) = 0;
    goto LABEL_111;
  }

  int v75 = v5;
  __int128 v18 = (unsigned __int8 **)v15;
  uint64_t v19 = 0LL;
  uint64_t v74 = v18;
  __int128 v20 = a2;
  uint64_t v77 = v16;
LABEL_11:
  if (!*v17)
  {
    __int128 v21 = &v20[6 * v19];
    __int128 v22 = (unsigned __int8 **)(v21 + 2);
    uint64_t v23 = (const char *)*((void *)v21 + 2);
    uint64_t v78 = (uint64_t)(v21 + 2);
    if (!v23 || (*(_WORD *)((_BYTE *)&v20[6 * v19 + 6] + 1) & 3) != 0)
    {
      uint64_t v24 = *v22;
      if (*v22)
      {
        while (1)
        {
          int v25 = *((_DWORD *)v24 + 1);
          if ((v25 & 0x82000) == 0) {
            break;
          }
          if ((v25 & 0x80000) != 0)
          {
            uint64_t v24 = *(unsigned __int8 **)(*((void *)v24 + 4) + 8LL);
            if (!v24) {
              break;
            }
          }

          else
          {
            uint64_t v24 = (unsigned __int8 *)*((void *)v24 + 2);
            if (!v24) {
              break;
            }
          }
        }
      }

      while (1)
      {
        int v26 = *v24;
        if (v26 != 141) {
          break;
        }
        uint64_t v24 = (unsigned __int8 *)*((void *)v24 + 3);
      }

      if (v26 == 59)
      {
        uint64_t v29 = (const char **)(v24 + 8);
        goto LABEL_32;
      }

      if (v26 != 167 || (v24[7] & 3) != 0 || (uint64_t v27 = *((void *)v24 + 9)) == 0)
      {
LABEL_33:
        if (!v23)
        {
LABEL_44:
          uint64_t v36 = (unsigned __int8 *)sub_18127F588(v7, "column%d", v9, v10, v11, v12, v13, v14, v19 + 1);
          unsigned int __buf = 0;
          uint64_t v37 = v77;
          if (!v36) {
            goto LABEL_45;
          }
          goto LABEL_50;
        }

        goto LABEL_34;
      }

      unsigned int v28 = *((_DWORD *)v24 + 12);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_30:
        uint64_t v29 = (const char **)(*(void *)(v27 + 8) + 16LL * v28);
LABEL_32:
        uint64_t v23 = *v29;
        goto LABEL_33;
      }

      if ((*(__int16 *)(v27 + 52) & 0x80000000) == 0)
      {
        unsigned int v28 = *(unsigned __int16 *)(v27 + 52);
        goto LABEL_30;
      }

      uint64_t v23 = "rowid";
    }

uint64_t sub_181322320( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    ++*(_DWORD *)(v10 + 72);
    uint64_t v11 = *(void **)(a2 + 80);
    if (v11)
    {
      while (*v11 != v10)
      {
        uint64_t v11 = (void *)v11[5];
        if (!v11) {
          goto LABEL_5;
        }
      }

      uint64_t v28 = 0LL;
      goto LABEL_28;
    }

uint64_t sub_1813226D0(uint64_t result, uint64_t a2, void *a3, int a4)
{
  if (!*(_BYTE *)(*(void *)result + 103LL))
  {
    uint64_t v4 = result;
    if (*(unsigned __int8 *)(result + 302) <= 1u)
    {
      uint64_t v5 = a2;
      int v45 = *(char **)result;
      do
      {
        int v6 = a3;
        a3 = (void *)a3[10];
      }

      while (a3);
      uint64_t v7 = v6[4];
      uint64_t v48 = 0LL;
      memset(v47, 0, sizeof(v47));
      *((void *)&v47[0] + 1) = v6[5];
      if (*(__int16 *)(a2 + 54) >= 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v42 = result;
        uint64_t v43 = v7 + 8;
        uint64_t v9 = *(void *)(a2 + 8);
        do
        {
          *(_DWORD *)(v5 + 48) |= *(_WORD *)(v9 + 14) & 0x62;
          __int16 v46 = *(unsigned __int8 **)(v43 + 24 * v8);
          int v10 = sub_1812A3C7C(v46);
          if (v10 >= 65) {
            int v11 = v10;
          }
          else {
            int v11 = a4;
          }
          *(_BYTE *)(v9 + 9) = v11;
          if (v11 < 66) {
            goto LABEL_21;
          }
          uint64_t v12 = v6[11];
          if (!v12) {
            goto LABEL_21;
          }
          int v13 = 0;
          do
          {
            v13 |= sub_181322B10(*(void *)(*(void *)(v12 + 32) + 24 * v8 + 8));
            uint64_t v12 = *(void *)(v12 + 88);
          }

          while (v12);
          if (v11 == 66 && (v13 & 1) != 0 || (char)v11 >= 67 && (v13 & 2) != 0)
          {
            char v14 = 65;
            uint64_t v4 = v42;
          }

          else
          {
            uint64_t v4 = v42;
            char v14 = 70;
          }

          *(_BYTE *)(v9 + 9) = v14;
LABEL_21:
          unsigned int v15 = sub_181322C20(v47, v46, 0LL, 0LL, 0LL);
          int v22 = *(unsigned __int8 *)(v9 + 9);
          if (!v15) {
            goto LABEL_51;
          }
          int v23 = v15;
          int v24 = *(unsigned __int8 *)v15;
          if (!*v15)
          {
            if (v22 == 67) {
              goto LABEL_56;
            }
LABEL_51:
            int v34 = v22 - 65;
            uint64_t v33 = 1LL;
            int v23 = "NUM";
            switch(v34)
            {
              case 0:
                goto LABEL_55;
              case 1:
                uint64_t v33 = 5LL;
                goto LABEL_55;
              case 2:
              case 5:
                goto LABEL_56;
              case 3:
                uint64_t v33 = 2LL;
                goto LABEL_55;
              case 4:
                uint64_t v33 = 4LL;
LABEL_55:
                int v23 = off_18C54FFA0[v33];
                if (v23) {
                  goto LABEL_56;
                }
                goto LABEL_70;
              default:
                goto LABEL_70;
            }
          }

          int v25 = 0;
          uint64_t v26 = (unsigned __int8 *)(v15 + 1);
          uint64_t v27 = 67LL;
          uint64_t v16 = 1668050786LL;
          uint64_t v17 = 1952807028LL;
          while (1)
          {
            int v25 = byte_1813C6343[v24] | (v25 << 8);
            uint64_t v30 = 66LL;
            if (v25 > 1668050785)
            {
              if (v25 == 1668050786 || v25 == 1952807028) {
                goto LABEL_29;
              }
              goto LABEL_36;
            }

            if (v25 == 1651273570) {
              break;
            }
            if (v25 != 1667785074) {
              goto LABEL_36;
            }
LABEL_29:
            int v29 = *v26++;
            int v24 = v29;
            uint64_t v27 = v30;
            if (!v29) {
              goto LABEL_48;
            }
          }

          uint64_t v30 = 65LL;
          if ((_DWORD)v27 == 67 || (_DWORD)v27 == 69) {
            goto LABEL_29;
          }
LABEL_36:
          BOOL v32 = v25 == 1718382433 || v25 == 1919246700 || v25 == 1685026146;
          if (v32 && (_DWORD)v27 == 67)
          {
            uint64_t v30 = 69LL;
            goto LABEL_29;
          }

          uint64_t v30 = v27;
          if ((v25 & 0xFFFFFF) != 0x696E74) {
            goto LABEL_29;
          }
          LODWORD(v30) = 68;
LABEL_48:
          if (v22 != (_DWORD)v30) {
            goto LABEL_51;
          }
LABEL_56:
          size_t v35 = strlen(v23) & 0x3FFFFFFF;
          uint64_t v36 = *(char **)v9;
          if (*(void *)v9)
          {
            size_t v37 = strlen(*(const char **)v9) & 0x3FFFFFFF;
            unint64_t v38 = v37 + v35 + 2;
            if (*((void *)v45 + 64) > (unint64_t)v36)
            {
              if (*((void *)v45 + 62) <= (unint64_t)v36)
              {
                if (v37 + v35 < 0x7F) {
                  goto LABEL_61;
                }
              }

              else if (*((void *)v45 + 63) <= (unint64_t)v36 && v38 <= *((unsigned __int16 *)v45 + 219))
              {
LABEL_61:
                uint64_t v39 = *(void *)v9;
                goto LABEL_66;
              }
            }

            uint64_t v39 = sub_1812F2310((uint64_t)v45, v36, v38);
            if (v39)
            {
LABEL_66:
              *(void *)uint64_t v9 = v39;
              *(_WORD *)(v9 + 14) &= 0xFDFBu;
              uint64_t v5 = a2;
LABEL_67:
              memcpy((void *)(v37 + v39 + 1), v23, v35 + 1);
              __int16 v40 = *(_WORD *)(v9 + 14) | 4;
            }

            else
            {
              sub_1812F20DC(v45, v36);
              *(void *)uint64_t v9 = 0LL;
              __int16 v40 = *(_WORD *)(v9 + 14) & 0xFDFB;
              uint64_t v5 = a2;
            }

            uint64_t v4 = v42;
            *(_WORD *)(v9 + 14) = v40;
          }

          else
          {
            uint64_t v39 = sub_1812F2264((uint64_t)v45, v35 + 2);
            *(void *)uint64_t v9 = v39;
            *(_WORD *)(v9 + 14) &= 0xFDFBu;
            uint64_t v5 = a2;
            if (v39)
            {
              size_t v37 = 0LL;
              goto LABEL_67;
            }
          }

uint64_t sub_181322B10(uint64_t a1)
{
  unsigned int v1 = 0;
  if (a1)
  {
    while (2)
    {
      int v2 = 2;
      switch(*(_BYTE *)a1)
      {
        case 0x24:
        case 0x8A:
        case 0xA7:
        case 0xA9:
        case 0xB1:
        case 0xB2:
          int v8 = sub_1812A3C7C((unsigned __int8 *)a1);
          if (v8 == 66) {
            int v9 = 6;
          }
          else {
            int v9 = 7;
          }
          if (v8 <= 66) {
            int v2 = v9;
          }
          else {
            int v2 = 5;
          }
          break;
        case 0x6F:
          int v2 = 6;
          break;
        case 0x71:
        case 0xAE:
        case 0xB3:
          a1 = *(void *)(a1 + 16);
          if (!a1) {
            goto LABEL_13;
          }
          continue;
        case 0x75:
          return v2 | v1;
        case 0x79:
          goto LABEL_13;
        case 0x9A:
          int v2 = 4;
          break;
        case 0x9C:
        case 0xA8:
        case 0xAC:
          int v2 = 7;
          break;
        case 0x9D:
          uint64_t v3 = *(unsigned int **)(a1 + 32);
          unint64_t v4 = *v3;
          if ((int)v4 < 2)
          {
            int v2 = 0;
          }

          else
          {
            int v2 = 0;
            uint64_t v5 = (uint64_t *)(v3 + 8);
            for (unint64_t i = 1LL; i < v4; i += 2LL)
            {
              uint64_t v7 = *v5;
              v5 += 6;
              v2 |= sub_181322B10(v7);
            }
          }

          if ((v4 & 1) != 0)
          {
            a1 = *(void *)&v3[6 * (int)v4 - 4];
            v1 |= v2;
            int v2 = 0;
            if (a1) {
              continue;
            }
          }

          break;
        default:
          int v2 = 1;
          break;
      }

      break;
    }
  }

  else
  {
LABEL_13:
    int v2 = 0;
  }

  return v2 | v1;
}

const char *sub_181322C20(void *a1, unsigned __int8 *a2, void *a3, void *a4, const char **a5)
{
  int v8 = a1;
  uint64_t v36 = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  int v9 = *a2;
  if (v9 == 138)
  {
    uint64_t v19 = *((void *)a2 + 4);
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v20 = *(void *)(v19 + 40);
    uint64_t v18 = *(void *)(v21 + 8);
    uint64_t v33 = a1;
    uint64_t v31 = *a1;
    uint64_t v32 = v20;
LABEL_19:
    uint64_t result = (const char *)sub_181322C20(&v31, v18, &v36, &v35, &v34);
    goto LABEL_21;
  }

  uint64_t result = 0LL;
  if (v9 != 167) {
    goto LABEL_21;
  }
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v11 = 0LL;
  unsigned int v12 = *((_DWORD *)a2 + 12);
  do
  {
    char v14 = (unsigned int *)v8[1];
    uint64_t v15 = *v14;
    if ((int)v15 < 1)
    {
LABEL_5:
      int v13 = 0LL;
      int v8 = (void *)v8[3];
      if (!v8) {
        break;
      }
    }

    else
    {
      uint64_t v16 = v14 + 10;
      while (v16[8] != *((_DWORD *)a2 + 11))
      {
        v16 += 26;
        if (!--v15) {
          goto LABEL_5;
        }
      }

      int v13 = *(uint64_t **)v16;
      uint64_t v11 = *((void *)v16 + 1);
    }
  }

  while (!v13);
  if (!v13)
  {
LABEL_20:
    uint64_t result = 0LL;
    goto LABEL_21;
  }

  if (v11)
  {
    uint64_t result = 0LL;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    uint64_t v17 = *(_DWORD **)(v11 + 32);
    uint64_t v18 = *(void *)&v17[6 * v12 + 2];
    uint64_t v32 = *(void *)(v11 + 40);
    uint64_t v33 = v8;
    uint64_t v31 = *v8;
    goto LABEL_19;
  }

  if ((v12 & 0x80000000) != 0)
  {
    if (*((__int16 *)v13 + 26) < 0)
    {
      int v34 = "rowid";
      uint64_t result = "INTEGER";
      goto LABEL_33;
    }

    unsigned int v12 = *((unsigned __int16 *)v13 + 26);
  }

  uint64_t v22 = v13[1];
  uint64_t v23 = v22 + 16LL * v12;
  int v24 = *(const char **)v23;
  int v34 = *(const char **)v23;
  if ((*(_BYTE *)(v23 + 14) & 4) != 0)
  {
    uint64_t result = &v24[strlen(v24) + 1];
  }

  else
  {
    unint64_t v25 = *(unsigned __int8 *)(v22 + 16LL * v12 + 8);
    else {
      uint64_t result = 0LL;
    }
  }

uint64_t sub_181322E40(uint64_t a1, uint64_t a2, const char *a3)
{
  int v6 = *(char **)a2;
  if (*(void *)a2) {
    unsigned int v7 = (strlen(*(const char **)a2) & 0x3FFFFFFF) + 1;
  }
  else {
    unsigned int v7 = 1;
  }
  size_t v8 = v7;
  if ((*(_WORD *)(a2 + 14) & 4) != 0) {
    size_t v8 = v7 + (strlen(&v6[v7]) & 0x3FFFFFFF) + 1;
  }
  if (a3)
  {
    size_t v9 = (strlen(a3) & 0x3FFFFFFF) + 1;
    unint64_t v10 = v9 + v8;
    if (v6)
    {
LABEL_8:
      if (*(void *)(a1 + 496) > (unint64_t)v6)
      {
LABEL_17:
        uint64_t result = sub_1812F2310(a1, v6, v10);
        int v6 = (char *)result;
        if (!result) {
          return result;
        }
        goto LABEL_18;
      }

      if (v10 >= 0x81) {
        goto LABEL_17;
      }
LABEL_18:
      *(void *)a2 = v6;
      uint64_t result = (uint64_t)memcpy(&v6[v8], a3, v9);
      *(_WORD *)(a2 + 14) |= 0x200u;
      return result;
    }
  }

  else
  {
    size_t v9 = 1LL;
    unint64_t v10 = v8 + 1;
    if (v6) {
      goto LABEL_8;
    }
  }

  uint64_t result = sub_1812F2264(a1, v10);
  int v6 = (char *)result;
  if (result) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_181322F64(uint64_t a1, int a2, int a3, unsigned __int8 *a4, _DWORD *a5, unsigned int *a6, int a7)
{
  if (a2 > a3) {
    return 0LL;
  }
  uint64_t v8 = a2;
  int v9 = a3 + 1;
  while (2)
  {
    if (a4 && (int v10 = *a4) != 0)
    {
      unsigned __int8 v11 = 0;
      unsigned int v12 = a4 + 1;
      do
      {
        v11 += byte_1813C6343[v10];
        int v13 = *v12++;
        int v10 = v13;
      }

      while (v13);
    }

    else
    {
      unsigned __int8 v11 = 0;
    }

    uint64_t v14 = *(void *)(a1 + 104 * v8 + 40);
    int v15 = *(__int16 *)(v14 + 54);
    if (v15 < 1) {
      goto LABEL_4;
    }
    unsigned int v16 = 0;
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v18 = v17;
    while (*(unsigned __int8 *)(v18 + 11) != v11)
    {
LABEL_13:
      v18 += 16LL;
      if (++v16 == v15) {
        goto LABEL_4;
      }
    }

    uint64_t v19 = *(_BYTE **)v18;
    for (unint64_t i = a4; ; ++i)
    {
      uint64_t v21 = *v19;
      uint64_t v22 = *i;
      if ((_DWORD)v21 == (_DWORD)v22) {
        break;
      }
      if (byte_1813C6343[v21] != byte_1813C6343[v22]) {
        goto LABEL_13;
      }
LABEL_17:
      ++v19;
    }

    if (*v19) {
      goto LABEL_17;
    }
    if (a7 && (*(_WORD *)(v17 + 16LL * v16 + 14) & 2) != 0)
    {
LABEL_4:
      if (v9 == (_DWORD)++v8) {
        return 0LL;
      }
      continue;
    }

    break;
  }

  if (a5)
  {
    if ((*(_WORD *)(a1 + 104 * v8 + 69) & 0x2000) != 0)
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 104 * v8 + 48) + 32LL) + 24LL * v16;
      *(_WORD *)(v23 + 25) |= 0x40u;
    }

    *a5 = v8;
    *a6 = v16;
  }

  return 1LL;
}

uint64_t sub_1813230AC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result = sub_1812F2264(a1, 0x50uLL);
  if (result)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_BYTE *)uint64_t result = -89;
    *(_WORD *)(result + 52) = -1;
    uint64_t v8 = a2 + 104LL * a3;
    uint64_t v9 = *(void *)(v8 + 40);
    *(void *)(result + 72) = v9;
    LODWORD(v8) = *(_DWORD *)(v8 + 72);
    *(_DWORD *)(result + 40) = 1;
    *(_DWORD *)(result + 44) = v8;
    if (*(__int16 *)(v9 + 52) == a4)
    {
      *(_DWORD *)(result + 48) = -1;
    }

    else
    {
      *(_DWORD *)(result + 48) = a4;
      if ((*(_BYTE *)(v9 + 48) & 0x60) != 0 && (*(_WORD *)(*(void *)(v9 + 8) + 16LL * a4 + 14) & 0x60) != 0)
      {
        int v10 = *(__int16 *)(v9 + 54);
        if (v10 <= 63) {
          uint64_t v11 = ~(-1LL << v10);
        }
        else {
          uint64_t v11 = -1LL;
        }
        uint64_t v12 = a2 + 104LL * a3;
      }

      else
      {
        if (a4 >= 63) {
          char v13 = 63;
        }
        else {
          char v13 = a4;
        }
        uint64_t v12 = a2 + 104LL * a3;
        uint64_t v11 = *(void *)(v12 + 88) | (1LL << v13);
      }

      *(void *)(v12 + 88) = v11;
    }
  }

  return result;
}

uint64_t sub_1813231A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (unsigned __int8 *)result;
    do
    {
      *((_DWORD *)v5 + 1) |= a3;
      *((_DWORD *)v5 + 14) = a2;
      if (*v5 == 172)
      {
        int v6 = (int *)*((void *)v5 + 4);
        if (v6)
        {
          if (*v6 >= 1)
          {
            uint64_t v7 = 0LL;
            uint64_t v8 = 2LL;
            do
            {
              sub_1813231A8(*(void *)&v6[v8], a2, a3);
              ++v7;
              int v6 = (int *)*((void *)v5 + 4);
              v8 += 6LL;
            }

            while (v7 < *v6);
          }
        }
      }

      uint64_t result = sub_1813231A8(*((void *)v5 + 2), a2, a3);
      uint64_t v5 = (unsigned __int8 *)*((void *)v5 + 3);
    }

    while (v5);
  }

  return result;
}

uint64_t sub_181323260()
{
  return 0LL;
}

uint64_t sub_181323268(uint64_t result, int *a2)
{
  if (result)
  {
    while (1)
    {
      if ((*(_BYTE *)(result + 5) & 8) != 0)
      {
        int v4 = *(_DWORD *)(result + 8);
LABEL_10:
        *a2 = v4;
        return 1LL;
      }

      int v3 = *(unsigned __int8 *)result;
      if (v3 != 174) {
        break;
      }
      uint64_t result = *(void *)(result + 16);
      if (!result) {
        return result;
      }
    }

    if (v3 == 173)
    {
      int v5 = 0;
      uint64_t result = sub_181323268(*(void *)(result + 16), &v5);
      if (!(_DWORD)result) {
        return result;
      }
      int v4 = -v5;
      goto LABEL_10;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1813232EC( unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0LL;
  }
  if (*(_BYTE *)(*(void *)a1 + 103LL) || a1[302] > 1u) {
    return 0LL;
  }
  int v11 = *a3;
  if (*a3 > *(_DWORD *)(*(void *)a1 + 144LL))
  {
    sub_1812DC47C((uint64_t)a1, "too many terms in %s BY clause", (uint64_t)a3, a4, a5, a6, a7, a8, a4);
    return 1LL;
  }

  if (v11 < 1) {
    return 0LL;
  }
  uint64_t v12 = *(_DWORD **)(a2 + 32);
  char v13 = a3 + 7;
  int v14 = 1;
  int v15 = (unsigned __int16 *)(a3 + 7);
  while (1)
  {
    int v18 = *v15;
    v15 += 12;
    int v17 = v18;
    if (v18) {
      break;
    }
LABEL_10:
    uint64_t result = 0LL;
    char v13 = v15;
    if (v14++ >= v11) {
      return result;
    }
  }

  if (*v12 >= v17)
  {
    sub_1812BD714((uint64_t *)a1, (uint64_t)v12, v17 - 1, *(void *)(v13 - 5), 0);
    int v11 = *a3;
    goto LABEL_10;
  }

  sub_1812DC47C( (uint64_t)a1,  "%r %s BY term out of range - should be between 1 and %d",  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  v14);
  return 1LL;
}

uint64_t sub_1813233F8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 7) & 1) != 0)
  {
    uint64_t v2 = *(void *)(a2 + 72);
    int v3 = *(void **)(v2 + 56);
    if (v3)
    {
      *int v3 = *(void *)(v2 + 64);
      uint64_t v4 = *(void *)(v2 + 64);
      if (v4) {
        *(void *)(v4 + 56) = *(void *)(v2 + 56);
      }
      *(void *)(v2 + 56) = 0LL;
    }
  }

  return 0LL;
}

uint64_t sub_181323430(uint64_t result, _DWORD *a2, unsigned __int8 *a3)
{
  LODWORD(v3) = *a2;
  uint64_t v4 = *a3;
  if (!*a3) {
    goto LABEL_29;
  }
  uint64_t v5 = 0LL;
  int v6 = *a3;
  do
  {
    BOOL v7 = (byte_1813C6558[v6] & 6) != 0 || v6 == 95;
    char v8 = !v7;
    if (!v7)
    {
      LODWORD(v9) = v5;
      goto LABEL_13;
    }

    uint64_t v9 = v5 + 1;
    int v6 = a3[++v5];
  }

  while (v6);
  uint64_t v5 = v9;
LABEL_13:
  if (v9 >= 2)
  {
    unsigned int v10 = ((3 * byte_1813C6343[a3[(v9 - 1)]]) ^ (4 * byte_1813C6343[v4]) ^ v9) % 0x7F;
    int v11 = byte_1813C6FD0[v10];
    if (byte_1813C6FD0[v10])
    {
      uint64_t v12 = v5 - 2;
      do
      {
        if ((_DWORD)v9 == byte_1813C6A20[v11])
        {
          uint64_t v13 = word_1813C68F8[v11];
          if ((v4 & 0xFFFFFFDF) == aReindexedescap[v13]
            && (a3[1] & 0xDF) == aReindexedescap[v13 + 1])
          {
            int v14 = &aReindexedescap[v13 + 2];
            int v15 = a3 + 2;
            uint64_t v16 = v12;
            while (1)
            {
              int v17 = *v15++;
              unsigned int v18 = v17 & 0xFFFFFFDF;
              int v19 = *v14++;
              if (v18 != v19) {
                break;
              }
              if (!--v16) {
                goto LABEL_29;
              }
            }
          }
        }

        int v11 = byte_1813C70E3[v11];
      }

      while (v11);
    }
  }

  char v20 = v8 ^ 1;
  if (!(_DWORD)v9) {
    char v20 = 0;
  }
  if ((v20 & 1) != 0)
  {
    int v21 = 0;
    if (!*a3) {
      goto LABEL_35;
    }
  }

  else
  {
LABEL_29:
    uint64_t v4 = (int)v3;
    LODWORD(v3) = v3 + 1;
    *(_BYTE *)(result + v4) = 34;
    LOBYTE(v4) = *a3;
    int v21 = 1;
    if (!*a3) {
      goto LABEL_35;
    }
  }

  uint64_t v22 = a3 + 1;
  int v23 = v3;
  do
  {
    uint64_t v3 = v23 + 1LL;
    *(_BYTE *)(result + v23) = v4;
    if (*(v22 - 1) == 34)
    {
      *(_BYTE *)(result + v3) = 34;
      LODWORD(v3) = v23 + 2;
    }

    int v24 = *v22++;
    LOBYTE(v4) = v24;
    int v23 = v3;
  }

  while (v24);
LABEL_35:
  if (v21)
  {
    *(_BYTE *)(result + (int)v3) = 34;
    LODWORD(v3) = v3 + 1;
  }

  *(_BYTE *)(result + (int)v3) = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_181323638(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 408);
  if (v3)
  {
    while (*v3 != a2)
    {
      uint64_t v3 = (void *)v3[3];
      if (!v3) {
        goto LABEL_6;
      }
    }

    *uint64_t v3 = 0LL;
  }

uint64_t sub_1813236A4(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)(*a1 + 48LL)) {
    return 2LL;
  }
  if ((*(_WORD *)(a2 + 6) & 0x420) != 0) {
    return 1LL;
  }
  int v6 = *(unsigned int **)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *v6;
    if ((int)v7 >= 1)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        uint64_t v9 = *(void *)&v6[6 * i + 4];
        if (v9)
        {
          if ((*(_WORD *)((_BYTE *)&v6[6 * i + 6] + 1) & 3) == 0)
          {
            unsigned int v10 = *(void **)(v2 + 408);
            if (v10)
            {
              while (*v10 != v9)
              {
                unsigned int v10 = (void *)v10[3];
                if (!v10) {
                  goto LABEL_9;
                }
              }

              void *v10 = 0LL;
            }
          }
        }

void *sub_181323844(void *result, uint64_t a2)
{
  uint64_t v2 = *(int **)(a2 + 104);
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *result;
  if ((*(_BYTE *)(*((void *)v2 + 4) + 4LL) & 0x40) != 0)
  {
LABEL_19:
    uint64_t v5 = 0LL;
    goto LABEL_20;
  }

  uint64_t result = sub_18131DEE0(*(void *)v4, *(int **)(a2 + 104));
  uint64_t v5 = result;
  if (result)
  {
    if (*(void *)v4)
    {
      uint64_t result = (void *)sub_1812F2264(*(void *)v4, 0x18uLL);
      if (result) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t result = (void *)sub_18126F0AC(24LL);
      if (result)
      {
LABEL_6:
        const char *result = *(void *)(v4 + 192);
        *(void *)(v4 + 192) = result;
        result[1] = v5;
        result[2] = sub_18130928C;
        if (!*(_DWORD *)(v4 + 48))
        {
          v5[1] = *(void *)(v4 + 400);
          *(void *)(v4 + 400) = v5;
        }

        goto LABEL_20;
      }
    }

    int v6 = *(void **)v4;
    if (*(int *)v5 >= 1)
    {
      uint64_t v7 = 0LL;
      char v8 = v5 + 4;
      do
      {
        uint64_t v9 = (void *)*(v8 - 1);
        if (v9) {
          sub_181311F48(v6, v9);
        }
        if (*v8) {
          sub_18128FDA0(v6, *v8, 1);
        }
        unsigned int v10 = (void *)*(v8 - 2);
        if (v10) {
          sub_1812F20DC(v6, v10);
        }
        ++v7;
        v8 += 6;
      }

      while (v7 < *(int *)v5);
    }

    uint64_t result = sub_1812F20DC(v6, v5);
    goto LABEL_19;
  }

uint64_t sub_181323AF4( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *a2;
  for (uint64_t i = (_WORD *)((char *)a2 + 25); (*i & 0x20) == 0; i += 12)
  {
    if (!--v8) {
      return 0LL;
    }
  }

  int v11 = *((unsigned __int8 *)i - 1);
  BOOL v12 = v11 == 3 || v11 == 0;
  uint64_t v13 = "LAST";
  if (v12) {
    uint64_t v13 = "FIRST";
  }
  sub_1812DC47C(a1, "unsupported use of NULLS %s", a3, a4, a5, a6, a7, a8, (char)v13);
  return 1LL;
}

uint64_t sub_181323B78( _BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(*(void *)a1 + 32LL);
    BOOL v12 = (uint64_t *)(v11 + 24);
    uint64_t v13 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v14 = *v12;
      v12 += 4;
      v13 += 0x100000000LL;
    }

    while (v14 != v10);
    int v15 = (_BYTE **)(v11 + (v13 >> 27));
  }

  else
  {
    int v15 = (_BYTE **)(a2 + 16);
  }

  uint64_t v22 = sub_18129EAF4((uint64_t)a1, 0, *(char **)(a2 + 24), *v15, a5, a6, a7, a8);
  uint64_t v23 = *(void *)(a2 + 40);
  if (v23)
  {
    uint64_t v24 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 816LL) || (int v25 = *(_DWORD *)(v23 + 44) - 1, (*(_DWORD *)(v23 + 44) = v25) == 0)) {
      sub_181311A80(v24, (void *)v23);
    }
  }

  *(void *)(a2 + 40) = v22;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (v22)
  {
    ++*(_DWORD *)(v22 + 44);
    if ((*(_WORD *)(a2 + 69) & 2) != 0)
    {
      uint64_t v26 = *(void *)(v22 + 16);
      if (!v26) {
        goto LABEL_20;
      }
      while (1)
      {
        __int128 v27 = *(_BYTE **)v26;
        for (uint64_t i = *(unsigned __int8 **)(a2 + 96); ; ++i)
        {
          uint64_t v29 = *v27;
          uint64_t v30 = *i;
          if ((_DWORD)v29 != (_DWORD)v30) {
            break;
          }
          if (!*v27)
          {
            *(void *)(a2 + 104) = v26;
            return v22;
          }

uint64_t sub_181323CD0(uint64_t a1, int a2, int a3, void *a4)
{
  __int16 v5 = a2;
  uint64_t v6 = 8LL * a2;
  uint64_t v7 = 2LL * a2;
  uint64_t v8 = v7 + 2;
  int v9 = v6 + ((3 * a2 + v7 + 2 + 7) & 0xFFFFFFF8) + 112;
  int v10 = v9 + a3;
  size_t v11 = v9 + a3;
  if (!a1)
  {
    uint64_t v12 = sub_18126F0AC(v10);
    if (!v12) {
      return v12;
    }
    goto LABEL_3;
  }

  uint64_t v12 = sub_1812F2264(a1, v10);
  if (v12)
  {
LABEL_3:
    bzero((void *)v12, v11);
    uint64_t v13 = v12 + 112 + v6;
    *(void *)(v12 + 8) = v13 + v8;
    *(void *)(v12 + 16) = v13;
    *(void *)(v12 + 56) = v13 + v8 + v7;
    *(void *)(v12 + 64) = v12 + 112;
    *(_WORD *)(v12 + 96) = v5;
    *(_WORD *)(v12 + 94) = v5 - 1;
    *a4 = v12 + v9;
  }

  return v12;
}

void sub_181323D98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v12 + 2;
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(*(void *)a1 + 32LL);
  if (v14)
  {
    uint64_t v16 = (uint64_t *)(v15 + 24);
    LODWORD(v17) = -1;
    do
    {
      uint64_t v18 = *v16;
      v16 += 4;
      uint64_t v17 = (v17 + 1);
    }

    while (v18 != v14);
    uint64_t v19 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(v13 + 528);
    if (!v19) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v17 = 4294934528LL;
    uint64_t v19 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(v13 + 528);
    if (!v19) {
      goto LABEL_9;
    }
  }

  if (*(_BYTE *)(v13 + 197) || *(_BYTE *)(a1 + 302)) {
    goto LABEL_9;
  }
  int v86 = v19(*(void *)(v13 + 536), 27LL, *(void *)a2, 0LL, *(void *)(v15 + 32LL * (int)v17), *(void *)(a1 + 368));
  if (v86 == 1)
  {
    int v87 = 23;
    uint64_t v88 = "not authorized";
LABEL_98:
    sub_1812DC47C(a1, v88, a3, a4, a5, a6, a7, a8, v89);
    *(_DWORD *)(a1 + 24) = v87;
    return;
  }

  if ((v86 & 0xFFFFFFFD) != 0)
  {
    int v87 = 1;
    uint64_t v88 = "authorizer malfunction";
    goto LABEL_98;
  }

  if (v86) {
    return;
  }
LABEL_9:
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20) {
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  uint64_t v20 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v20)
  {
LABEL_17:
    unsigned int v21 = v8;
    if ((v8 & 0x80000000) != 0) {
      unsigned int v21 = *(_DWORD *)(a2 + 88);
    }
    unsigned int v91 = v21;
    uint64_t v22 = (_DWORD *)sub_181319FB0((_DWORD *)a1, a2);
    uint64_t v24 = (uint64_t)v22;
    uint64_t v25 = *(unsigned int *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v25 + 1;
    uint64_t v26 = *(unsigned __int16 *)(a2 + 94);
    if (v22) {
      ++*v22;
    }
    sub_1812B9B68((uint64_t *)v20, 119LL, v25, 0LL, v26, (uint64_t)v22, 4294967288LL, v23);
    sub_18128BBE0((void *)a1, v12, v17, v11, 112LL, v27, v28, v29);
    int v33 = *(_DWORD *)(v20 + 144);
    if (*(_DWORD *)(v20 + 148) <= v33)
    {
      int v33 = sub_18131044C(v20, 36LL, v12, 0LL, 0LL, v30, v31, v32);
      char v36 = *(_BYTE *)(a1 + 31);
      if (v36) {
        goto LABEL_23;
      }
    }

    else
    {
      *(_DWORD *)(v20 + 144) = v33 + 1;
      uint64_t v34 = *(void *)(v20 + 136) + 40LL * v33;
      *(_DWORD *)uint64_t v34 = 36;
      *(_DWORD *)(v34 + 4) = v12;
      int16x8_t v35 = 0uLL;
      *(_OWORD *)(v34 + 8) = 0u;
      *(_OWORD *)(v34 + 24) = 0u;
      char v36 = *(_BYTE *)(a1 + 31);
      if (v36)
      {
LABEL_23:
        unsigned __int8 v37 = v36 - 1;
        *(_BYTE *)(a1 + 31) = v37;
        uint64_t v38 = *(unsigned int *)(a1 + 4LL * v37 + 224);
        goto LABEL_26;
      }
    }

    uint64_t v38 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v38;
LABEL_26:
    uint64_t v39 = *(void *)(a1 + 168);
    if (!v39) {
      uint64_t v39 = a1;
    }
    *(_BYTE *)(v39 + 32) = 1;
    sub_1812AA5E4(a1, a2, v12, v38, 0, &v92, 0LL, 0LL, v35);
    int v43 = *(_DWORD *)(v20 + 144);
    if (*(_DWORD *)(v20 + 148) <= v43)
    {
      sub_18131044C(v20, 139LL, v25, v38, 0LL, v40, v41, v42);
      int v45 = v92;
      if (!v92) {
        goto LABEL_35;
      }
    }

    else
    {
      *(_DWORD *)(v20 + 144) = v43 + 1;
      uint64_t v44 = *(void *)(v20 + 136) + 40LL * v43;
      *(_DWORD *)uint64_t v44 = 139;
      *(_DWORD *)(v44 + 4) = v25;
      *(_DWORD *)(v44 + 8) = v38;
      *(void *)(v44 + 12) = 0LL;
      *(void *)(v44 + 28) = 0LL;
      *(void *)(v44 + 20) = 0LL;
      *(_DWORD *)(v44 + 36) = 0;
      int v45 = v92;
      if (!v92)
      {
LABEL_35:
        uint64_t v49 = (v33 + 1);
        int v50 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v50)
        {
          sub_18131044C(v20, 39LL, v12, v49, 0LL, v40, v41, v42);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v50 + 1;
          uint64_t v51 = *(void *)(v20 + 136) + 40LL * v50;
          *(_DWORD *)uint64_t v51 = 39;
          *(_DWORD *)(v51 + 4) = v12;
          *(_DWORD *)(v51 + 8) = v49;
          *(void *)(v51 + 12) = 0LL;
          *(void *)(v51 + 28) = 0LL;
          *(void *)(v51 + 20) = 0LL;
          *(_DWORD *)(v51 + 36) = 0;
        }

        uint64_t v52 = v91;
        unsigned int v90 = v12;
        uint64_t v53 = (v12 + 1);
        int v54 = *(_DWORD *)(v20 + 144);
        if (*(_BYTE *)(*(void *)v20 + 103LL))
        {
          dword_18C550688 = *(_DWORD *)(v20 + 144);
          if ((v8 & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }

        else
        {
          *(_DWORD *)(*(void *)(v20 + 136) + 40LL * v33 + 8) = v54;
          if ((v8 & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }

        if (*(_DWORD *)(v20 + 148) <= v54)
        {
          sub_18131044C(v20, 145LL, v91, v17, 0LL, v40, v41, v42);
          uint64_t v52 = v91;
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v54 + 1;
          uint64_t v55 = *(void *)(v20 + 136) + 40LL * v54;
          *(_DWORD *)uint64_t v55 = 145;
          *(_DWORD *)(v55 + 4) = v91;
          *(_DWORD *)(v55 + 8) = v17;
          *(void *)(v55 + 12) = 0LL;
          *(void *)(v55 + 28) = 0LL;
          *(void *)(v55 + 20) = 0LL;
          *(_DWORD *)(v55 + 36) = 0;
        }

uint64_t sub_18132467C( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(v8 + 64)) {
    *((_DWORD *)a2 + 1) |= 0x40000000u;
  }
  if (*a2 != 156) {
    return 0LL;
  }
  if (*(_BYTE *)(**(void **)v8 + 197LL))
  {
    uint64_t result = 0LL;
    *a2 = 121;
  }

  else
  {
    sub_1812DC47C(*(void *)v8, "%s cannot use variables", a3, a4, a5, a6, a7, a8, *(void *)(v8 + 80));
    return 2LL;
  }

  return result;
}

uint64_t sub_1813246F8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = (uint64_t *)a1[5];
  uint64_t v10 = *(void *)*v9;
  if (v9[9])
  {
    int v11 = *(_DWORD *)(v10 + 40);
    BOOL v12 = __OFSUB__(v11, 1);
    uint64_t v13 = (v11 - 1);
    if ((int)v13 < 0 != v12)
    {
      int v15 = v13;
      uint64_t v25 = *(int **)(a2 + 40);
      if (!v25) {
        return 0LL;
      }
      goto LABEL_25;
    }

    uint64_t v14 = (_BYTE **)(*(void *)(v10 + 32) + 32 * v13);
    int v15 = -1;
    while (1)
    {
      uint64_t v16 = *v14;
      if (*v14) {
        break;
      }
LABEL_11:
      if (!(_DWORD)v13)
      {
        unsigned int v21 = (unsigned __int8 *)v9[9];
        for (uint64_t i = "main"; ; ++i)
        {
          uint64_t v23 = *(unsigned __int8 *)i;
          uint64_t v24 = *v21;
          if ((_DWORD)v23 == (_DWORD)v24)
          {
            if (!*i)
            {
              int v15 = 0;
              uint64_t v25 = *(int **)(a2 + 40);
              if (!v25) {
                return 0LL;
              }
              goto LABEL_25;
            }
          }

          else if (byte_1813C6343[v23] != byte_1813C6343[v24])
          {
            break;
          }

          ++v21;
        }
      }

      v14 -= 4;
      BOOL v20 = (int)v13 <= 0;
      LODWORD(v13) = v13 - 1;
      if (v20)
      {
LABEL_24:
        uint64_t v25 = *(int **)(a2 + 40);
        if (!v25) {
          return 0LL;
        }
        goto LABEL_25;
      }
    }

    for (uint64_t j = (unsigned __int8 *)v9[9]; ; ++j)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *j;
      if ((_DWORD)v18 == (_DWORD)v19)
      {
        if (!*v16)
        {
          int v15 = v13;
          goto LABEL_24;
        }
      }

      else if (byte_1813C6343[v18] != byte_1813C6343[v19])
      {
        goto LABEL_11;
      }

      ++v16;
    }
  }

  int v15 = -1;
  uint64_t v25 = *(int **)(a2 + 40);
  if (!v25) {
    return 0LL;
  }
LABEL_25:
  if (*v25 < 1) {
    goto LABEL_60;
  }
  uint64_t v26 = 0LL;
  uint64_t v27 = v25 + 2;
LABEL_28:
  if (*((_BYTE *)v9 + 64)) {
    goto LABEL_53;
  }
  uint64_t v28 = (void *)*((void *)v27 + 1);
  if (!v28)
  {
    __int16 v40 = *(_WORD *)((char *)v27 + 61);
    goto LABEL_52;
  }

  int v29 = *(_DWORD *)(v10 + 40);
  BOOL v12 = __OFSUB__(v29, 1);
  uint64_t v30 = (v29 - 1);
  uint64_t v31 = (_BYTE **)(*(void *)(v10 + 32) + 32 * v30);
  while (1)
  {
    uint64_t v32 = *v31;
    if (*v31) {
      break;
    }
LABEL_39:
    if (!(_DWORD)v30)
    {
      char v36 = (unsigned __int8 *)*((void *)v27 + 1);
      for (uint64_t k = "main"; ; ++k)
      {
        uint64_t v38 = *(unsigned __int8 *)k;
        uint64_t v39 = *v36;
        if ((_DWORD)v38 == (_DWORD)v39)
        {
          if (!*k)
          {
            LODWORD(v30) = 0;
            goto LABEL_49;
          }
        }

        else if (byte_1813C6343[v38] != byte_1813C6343[v39])
        {
          break;
        }

        ++v36;
      }
    }

    v31 -= 4;
    BOOL v20 = (int)v30 <= 0;
    LODWORD(v30) = v30 - 1;
    if (v20)
    {
      if (v15 != -1) {
        goto LABEL_58;
      }
LABEL_50:
      sub_1812F20DC((void *)v10, v28);
      *((void *)v27 + 1) = 0LL;
      __int16 v40 = *(_WORD *)((char *)v27 + 61) | 0x200;
      *(_WORD *)((char *)v27 + 61) = v40;
LABEL_52:
      *(void *)uint64_t v27 = v9[7];
      *(_WORD *)((char *)v27 + 61) = v40 | 0x80;
LABEL_53:
      if ((*(_WORD *)((_BYTE *)&v25[26 * v26 + 17] + 1) & 0x400) == 0)
      {
        uint64_t v41 = *(void *)&v25[26 * v26 + 20];
        if (v41)
        {
        }
      }

      ++v26;
      v27 += 26;
      if (v26 < *v25) {
        goto LABEL_28;
      }
LABEL_60:
      int v43 = *(int **)(a2 + 104);
      if (v43 && *v43 >= 1)
      {
        uint64_t v44 = 0LL;
        for (uint64_t m = 8LL; !sub_181285228(a1, *(void **)&v43[m]); m += 12LL)
        {
          ++v44;
          int v43 = *(int **)(a2 + 104);
          if (v44 >= *v43) {
            return 0LL;
          }
        }

        return 2LL;
      }

      return 0LL;
    }
  }

  for (uint64_t n = (unsigned __int8 *)*((void *)v27 + 1); ; ++n)
  {
    uint64_t v34 = *v32;
    uint64_t v35 = *n;
    if ((_DWORD)v34 == (_DWORD)v35) {
      break;
    }
    if (byte_1813C6343[v34] != byte_1813C6343[v35]) {
      goto LABEL_39;
    }
LABEL_35:
    ++v32;
  }

  if (*v32) {
    goto LABEL_35;
  }
LABEL_49:
  if (v15 == (_DWORD)v30) {
    goto LABEL_50;
  }
LABEL_58:
  sub_1812DC47C(*v9, "%s %T cannot reference objects in database %s", a3, a4, a5, a6, a7, a8, v9[10]);
  return 2LL;
}

uint64_t sub_181324A24( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v11 = *(void *)(a3 + 24);
  int v12 = *(_DWORD *)(*a1 + 136);
  uint64_t v30 = *a1;
  uint64_t v31 = 0LL;
  unsigned int v32 = 0;
  int v33 = v12;
  unsigned int v34 = 0;
  __int16 v35 = 0;
  if (!*(void *)(a3 + 80))
  {
    if (!*(_WORD *)(a3 + 94)) {
      goto LABEL_3;
    }
    uint64_t v21 = 0LL;
    while (1)
    {
      uint64_t v22 = *(const char **)(*(void *)(v11 + 8) + 16LL * *(__int16 *)(*(void *)(v8 + 8) + 2 * v21));
      if (!v21) {
        goto LABEL_26;
      }
      uint64_t v23 = v34;
      if (v34 + 2 < v32) {
        break;
      }
      sub_1812D3A10((uint64_t)&v30, ", ", 2u);
      uint64_t v24 = *(const char **)v11;
      if (!*(void *)v11) {
        goto LABEL_33;
      }
LABEL_29:
      int v25 = strlen(v24);
      a3 = v25 & 0x3FFFFFFF;
      if ((v25 & 0x3FFFFFFF) != 0)
      {
        uint64_t v26 = v34;
        if (v34 + a3 >= v32)
        {
          sub_1812D3A10((uint64_t)&v30, v24, a3);
        }

        else
        {
          v34 += a3;
          memcpy(&v31[v26], v24, v25 & 0x3FFFFFFF);
        }
      }

_DWORD *sub_181324D00(_DWORD *result, _BYTE *a2)
{
  uint64_t v2 = *(void *)result;
  int v3 = *(_DWORD *)(*(void *)result + 40LL);
  if (v3 >= 1)
  {
    __int16 v5 = result;
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v8 = *(void *)(v2 + 32) + 32 * i;
      if (*(void *)(v8 + 8))
      {
        if (a2)
        {
          int v9 = *(unsigned __int8 **)v8;
          for (uint64_t j = a2; ; ++j)
          {
            uint64_t v11 = *j;
            uint64_t v12 = *v9;
            if ((_DWORD)v11 == (_DWORD)v12)
            {
              if (!*j) {
                break;
              }
            }

            else if (byte_1813C6343[v11] != byte_1813C6343[v12])
            {
              goto LABEL_7;
            }

            ++v9;
          }
        }

        if (*((void *)v5 + 21)) {
          uint64_t result = (_DWORD *)*((void *)v5 + 21);
        }
        else {
          uint64_t result = v5;
        }
        int v7 = result[31];
        if ((v7 & (1 << i)) == 0)
        {
          result[31] = v7 | (1 << i);
          if (i == 1)
          {
            uint64_t result = (_DWORD *)sub_1812FA2F0((uint64_t)result);
            int v3 = *(_DWORD *)(v2 + 40);
          }
        }
      }

uint64_t *sub_181324DE8(uint64_t *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v3 = *(_BYTE **)(*(void *)(*a1 + 32) + 32LL * a2);
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 1);
  if (sub_1812E2C64(*a1, v29, v3)) {
    sub_1812C742C(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v4, v5, v6, v7, v8, v9, (char)v3);
  }
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 2);
  if (sub_1812E2C64(*a1, v29, v3)) {
    sub_1812C742C(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v10, v11, v12, v13, v14, v15, (char)v3);
  }
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 3);
  if (sub_1812E2C64(*a1, v29, v3)) {
    sub_1812C742C(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v16, v17, v18, v19, v20, v21, (char)v3);
  }
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 4);
  uint64_t result = (uint64_t *)sub_1812E2C64(*a1, v29, v3);
  if (result) {
    return sub_1812C742C(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v23, v24, v25, v26, v27, v28, (char)v3);
  }
  return result;
}

uint64_t sub_181324F90( uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)result;
  if ((*(_BYTE *)(*(void *)result + 49LL) & 0x40) == 0 || *(_BYTE *)(a3 + 63)) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 16);
  if (!v12)
  {
    if (!*(void *)(result + 168) && (*(_BYTE *)(v8 + 96) & 8) == 0) {
      *(_BYTE *)(result + 35) = 1;
    }
    uint64_t result = sub_1812DC63C((uint64_t *)result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v12 = result;
  }

  uint64_t v13 = *(void *)(a3 + 96);
  uint64_t v14 = *(unsigned __int8 **)a3;
  uint64_t v15 = *(void *)(v13 + 96);
  if (!v15)
  {
    uint64_t v20 = (uint64_t *)(v13 + 88);
    int v21 = *(_DWORD *)(v13 + 84);
    if (v21) {
      goto LABEL_29;
    }
LABEL_15:
    uint64_t v20 = &qword_18C550660;
    goto LABEL_16;
  }

  int v16 = *v14;
  if (*v14)
  {
    unsigned int v17 = 0;
    uint64_t v18 = v14 + 1;
    do
    {
      unsigned int v17 = -1640531535 * (v17 + byte_1813C6343[v16]);
      int v19 = *v18++;
      int v16 = v19;
    }

    while (v19);
  }

  else
  {
    unsigned int v17 = 0;
  }

  uint64_t v38 = (_DWORD *)(v15 + 16LL * (v17 % *(_DWORD *)(v13 + 80)));
  uint64_t v20 = (uint64_t *)(v38 + 2);
  int v21 = *v38;
  if (!v21) {
    goto LABEL_15;
  }
  do
  {
LABEL_29:
    uint64_t v20 = (uint64_t *)*v20;
    uint64_t v39 = (_BYTE *)v20[3];
    for (uint64_t i = *(unsigned __int8 **)a3; ; ++i)
    {
      uint64_t v41 = *v39;
      uint64_t v42 = *i;
      if ((_DWORD)v41 != (_DWORD)v42) {
        break;
      }
      if (!*v39) {
        goto LABEL_16;
      }
LABEL_31:
      ++v39;
    }

    if (byte_1813C6343[v41] == byte_1813C6343[v42]) {
      goto LABEL_31;
    }
    --v21;
  }

  while (v21);
  uint64_t v20 = &qword_18C550660;
LABEL_16:
  if (v20[2])
  {
    LODWORD(v22) = 0;
    goto LABEL_18;
  }

  uint64_t v37 = *(void *)(a3 + 72);
  if (v37)
  {
    while (!*(_BYTE *)(v37 + 44) && (*(_BYTE *)(v8 + 50) & 8) == 0)
    {
      uint64_t v37 = *(void *)(v37 + 8);
      if (!v37) {
        return result;
      }
    }

    uint64_t v22 = (*(_DWORD *)(v11 + 68) - 1);
    *(_DWORD *)(v11 + 68) = v22;
    int v48 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v48)
    {
      sub_18131044C(v12, 49LL, 1LL, v22, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v48 + 1;
      uint64_t v49 = *(void *)(v12 + 136) + 40LL * v48;
      *(void *)uint64_t v49 = 0x100000031LL;
      *(_DWORD *)(v49 + 8) = v22;
      *(void *)(v49 + 12) = 0LL;
      *(void *)(v49 + 28) = 0LL;
      *(void *)(v49 + 20) = 0LL;
      *(_DWORD *)(v49 + 36) = 0;
    }

uint64_t sub_1813252E0( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(*a1 + 32);
  uint64_t v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(v12 + 96) & 8) == 0) {
      *((_BYTE *)a1 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  if (a1[21]) {
    uint64_t v15 = a1[21];
  }
  else {
    uint64_t v15 = (uint64_t)a1;
  }
  int v16 = *(_DWORD *)(v15 + 124);
  int v17 = 1 << a3;
  if ((v16 & (1 << a3)) == 0)
  {
    *(_DWORD *)(v15 + 124) = v16 | v17;
    if ((_DWORD)a3 == 1) {
      sub_1812FA2F0(v15);
    }
  }

  *(_DWORD *)(v15 + 120) |= v17;
  *(_BYTE *)(v15 + 32) |= 1u;
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    int v18 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v18)
    {
      sub_18131044C(v14, 170LL, 0LL, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v18 + 1;
      uint64_t v19 = *(void *)(v14 + 136) + 40LL * v18;
      *(_BYTE *)uint64_t v19 = -86;
      *(_OWORD *)(v19 + 1) = 0u;
      *(_OWORD *)(v19 + 17) = 0u;
      *(void *)(v19 + 32) = 0LL;
    }
  }

  uint64_t v20 = (int)a3;
  uint64_t v21 = *(void *)(*(void *)(*a1 + 32) + 56LL);
  uint64_t v22 = *(void *)(a2 + 88);
  uint64_t v23 = *(void **)(v21 + 64);
  if (!v23)
  {
    uint64_t v25 = *(void *)(a2 + 88);
    goto LABEL_34;
  }

  uint64_t v24 = *(void *)(a2 + 96);
  while (2)
  {
    while (1)
    {
      uint64_t v25 = v23[2];
      if (*(void *)(v25 + 48) != v24) {
        break;
      }
      uint64_t v26 = *(_BYTE **)(v25 + 8);
      if (!v26) {
        break;
      }
      for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
      {
        uint64_t v28 = *v26;
        uint64_t v29 = *i;
        if ((_DWORD)v28 == (_DWORD)v29) {
          break;
        }
        if (byte_1813C6343[v28] != byte_1813C6343[v29]) {
          goto LABEL_20;
        }
LABEL_27:
        ++v26;
      }

      if (*v26) {
        goto LABEL_27;
      }
      if (v24 == v21 && !*(_BYTE *)(v25 + 18)) {
        break;
      }
LABEL_22:
      *(void *)(v25 + 64) = v22;
      uint64_t v22 = v25;
      uint64_t v23 = (void *)*v23;
      if (!v23) {
        goto LABEL_34;
      }
    }

void sub_1813256F8( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  uint64_t v10 = *a1;
  uint64_t v11 = a2[5];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v10 + 32) + 24LL);
    LODWORD(v13) = -1;
    do
    {
      uint64_t v14 = *v12;
      v12 += 4;
      uint64_t v13 = (v13 + 1);
    }

    while (v14 != v11);
  }

  else
  {
    uint64_t v13 = 4294934528LL;
  }

  uint64_t v15 = a2[6];
  int v16 = (_BYTE *)a2[1];
  uint64_t v17 = *(void *)(v15 + 24);
  if (v17)
  {
    int v18 = *v16;
    if (*v16)
    {
      unsigned int v19 = 0;
      uint64_t v20 = v16 + 1;
      do
      {
        unsigned int v19 = -1640531535 * (v19 + byte_1813C6343[v18]);
        int v21 = *v20++;
        int v18 = v21;
      }

      while (v21);
    }

    else
    {
      unsigned int v19 = 0;
    }

    unsigned int v38 = (_DWORD *)(v17 + 16LL * (v19 % *(_DWORD *)(v15 + 8)));
    uint64_t v22 = (uint64_t *)(v38 + 2);
    int v23 = *v38;
    if (v23)
    {
      while (1)
      {
LABEL_37:
        uint64_t v22 = (uint64_t *)*v22;
        uint64_t v39 = (_BYTE *)v22[3];
        for (uint64_t i = (unsigned __int8 *)a2[1]; ; ++i)
        {
          uint64_t v41 = *v39;
          uint64_t v42 = *i;
          if ((_DWORD)v41 != (_DWORD)v42) {
            break;
          }
          if (!*v39) {
            goto LABEL_13;
          }
LABEL_39:
          ++v39;
        }

        if (byte_1813C6343[v41] == byte_1813C6343[v42]) {
          goto LABEL_39;
        }
        if (!--v23)
        {
          uint64_t v22 = &qword_18C550660;
          goto LABEL_13;
        }
      }
    }
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v15 + 16);
    int v23 = *(_DWORD *)(v15 + 12);
    if (v23) {
      goto LABEL_37;
    }
  }

  uint64_t v22 = &qword_18C550660;
LABEL_13:
  uint64_t v24 = (void *)v22[2];
  if (!v24) {
    goto LABEL_26;
  }
  uint64_t v25 = (_DWORD)v13 == 1 ? "sqlite_temp_master" : "sqlite_master";
  a2 = (uint64_t *)((_DWORD)v13 == 1 ? 14LL : 16LL);
  uint64_t v26 = *(uint64_t (**)(void, uint64_t *, uint64_t, void, uint64_t, uint64_t))(v10 + 528);
  if (!v26) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(*(void *)(v10 + 32) + 32LL * (int)v13);
  if (*(_BYTE *)(v10 + 197) || *((_BYTE *)a1 + 302))
  {
    uint64_t v28 = *a1;
  }

  else
  {
    int v43 = v26(*(void *)(v10 + 536), a2, *v8, *v24, *(void *)(*(void *)(v10 + 32) + 32LL * (int)v13), a1[46]);
    if (v43 == 1)
    {
LABEL_51:
      int v45 = 23;
      uint64_t v46 = "not authorized";
LABEL_54:
      sub_1812DC47C((uint64_t)a1, v46, a3, a4, a5, a6, a7, a8, v47);
      *((_DWORD *)a1 + 6) = v45;
      return;
    }

    if ((v43 & 0xFFFFFFFD) != 0)
    {
LABEL_53:
      int v45 = 1;
      uint64_t v46 = "authorizer malfunction";
      goto LABEL_54;
    }

    if (v43) {
      return;
    }
    uint64_t v28 = *a1;
    uint64_t v26 = *(uint64_t (**)(void, uint64_t *, uint64_t, void, uint64_t, uint64_t))(*a1 + 528);
    if (!v26) {
      goto LABEL_26;
    }
  }

  if (!*(_BYTE *)(v28 + 197) && !*((_BYTE *)a1 + 302))
  {
    int v44 = v26(*(void *)(v28 + 536), (uint64_t *)9, (uint64_t)v25, 0LL, v27, a1[46]);
    if (v44 == 1) {
      goto LABEL_51;
    }
    if ((v44 & 0xFFFFFFFD) == 0)
    {
      if (v44) {
        return;
      }
      goto LABEL_26;
    }

    goto LABEL_53;
  }

uint64_t *sub_181325A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    char v12 = *(_BYTE *)(a1 + 31);
    if (v12) {
      goto LABEL_3;
    }
  }

  else
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v11 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    char v12 = *(_BYTE *)(a1 + 31);
    if (v12)
    {
LABEL_3:
      unsigned __int8 v13 = v12 - 1;
      *(_BYTE *)(a1 + 31) = v13;
      uint64_t v14 = *(unsigned int *)(a1 + 4LL * v13 + 224);
      goto LABEL_4;
    }
  }

  uint64_t v14 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v14;
  if ((int)a2 <= 1) {
LABEL_4:
  }
    sub_1812DC47C(a1, "corrupt schema", a3, a4, a5, a6, a7, a8, v20);
LABEL_5:
  int v15 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v15)
  {
    sub_18131044C(v11, 144LL, a2, v14, a3, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v11 + 136) + 40LL * v15;
    *(_DWORD *)uint64_t v16 = 144;
    *(_DWORD *)(v16 + 4) = a2;
    *(_DWORD *)(v16 + 8) = v14;
    *(_DWORD *)(v16 + 12) = a3;
    *(void *)(v16 + 24) = 0LL;
    *(void *)(v16 + 32) = 0LL;
    *(void *)(v16 + 16) = 0LL;
  }

  uint64_t v17 = *(void *)(a1 + 168);
  if (!v17) {
    uint64_t v17 = a1;
  }
  *(_BYTE *)(v17 + 33) = 1;
  uint64_t result = sub_1812C742C( (uint64_t *)a1,  "UPDATE %Q.sqlite_master SET rootpage=%d WHERE #%d AND rootpage=#%d",  a3,  a4,  a5,  a6,  a7,  a8,  *(void *)(*(void *)(*(void *)a1 + 32LL) + 32LL * (int)a3));
  if ((_DWORD)v14)
  {
    uint64_t v19 = *(unsigned __int8 *)(a1 + 31);
    if (v19 <= 7)
    {
      *(_BYTE *)(a1 + 31) = v19 + 1;
      *(_DWORD *)(a1 + 4 * v19 + 224) = v14;
    }
  }

  return result;
}

uint64_t sub_181325B9C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = 0LL;
  while (1)
  {
    if (&a2[26 * v5 + 2] != (unsigned int *)a1)
    {
      if (*(void *)(a1 + 32) == *(void *)&a2[26 * v5 + 10])
      {
        uint64_t v7 = *(_BYTE **)(a1 + 24);
        int v8 = *(unsigned __int8 **)&a2[26 * v5 + 8];
        if (v7)
        {
          if (v8)
          {
            while (1)
            {
              uint64_t v9 = *v7;
              uint64_t v10 = *v8;
              if ((_DWORD)v9 == (_DWORD)v10)
              {
                if (!*v7) {
                  return 1LL;
                }
              }

              else if (byte_1813C6343[v9] != byte_1813C6343[v10])
              {
                break;
              }

              ++v7;
              ++v8;
            }
          }
        }

        else if (!v8)
        {
          return 1LL;
        }
      }

      uint64_t v6 = *(void *)&a2[26 * v5 + 12];
      if (v6)
      {
      }
    }

    if (++v5 == v2) {
      return 0LL;
    }
  }

_BYTE *sub_181325C9C(_BYTE *result, uint64_t a2)
{
  if (result[28]) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = (void *)*((void *)result + 2);
  uint64_t v4 = *(void *)result;
  do
  {
    uint64_t v5 = a2;
    a2 = *(void *)(a2 + 80);
  }

  while (a2);
  uint64_t v7 = *(int **)(v5 + 32);
  uint64_t v6 = *(void *)(v5 + 40);
  result[28] = 1;
  uint64_t v8 = *(void *)(v4 + 48);
  uint64_t result = (_BYTE *)sub_18128F970((uint64_t)v3, *v7);
  if (*v7 <= 0) {
    return result;
  }
  uint64_t v35 = v6;
  int v36 = v2;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  char v37 = v8;
  uint64_t v17 = v8 & 0x44;
  int v18 = v7 + 4;
  do
  {
    int v21 = (unsigned __int8 *)*((void *)v18 - 1);
    uint64_t v22 = *(const char **)v18;
    if (!*(void *)v18 || (*(_WORD *)((_BYTE *)v18 + 9) & 3) != 0)
    {
      if (!v17 || *v21 != 167)
      {
        if (v22)
        {
          unint64_t v27 = strlen(*(const char **)v18) + 1;
          uint64_t result = (_BYTE *)sub_1812F2264(v4, v27);
          uint64_t v28 = result;
          if (result) {
            uint64_t result = memcpy(result, v22, v27);
          }
        }

        else
        {
          uint64_t result = sub_18127F588(v4, "column%d", v9, v10, v11, v12, v13, v14, v16 + 1);
          uint64_t v28 = result;
        }

        if (!*(_BYTE *)(*v3 + 103LL))
        {
          uint64_t v26 = v3[19] + v15;
          uint64_t v25 = v28;
          goto LABEL_7;
        }

        goto LABEL_9;
      }

      unsigned int v23 = *((_DWORD *)v21 + 12);
      uint64_t v24 = *((void *)v21 + 9);
      if ((v23 & 0x80000000) != 0)
      {
        if (*(__int16 *)(v24 + 52) < 0)
        {
          uint64_t v25 = "rowid";
          if ((v37 & 4) != 0)
          {
LABEL_30:
            uint64_t result = sub_18127F588(v4, "%s.%s", v9, v10, v11, v12, v13, v14, *(void *)v24);
            if (!*(_BYTE *)(*v3 + 103LL))
            {
              uint64_t v25 = result;
              uint64_t v26 = v3[19] + v15;
LABEL_7:
              uint64_t v19 = sub_1812E1FD0;
LABEL_8:
              uint64_t result = (_BYTE *)sub_181269368(v26, v25, -1LL, 1u, v19);
              goto LABEL_9;
            }

            goto LABEL_9;
          }

          goto LABEL_18;
        }

        unsigned int v23 = *(unsigned __int16 *)(v24 + 52);
      }

      uint64_t v25 = *(char **)(*(void *)(v24 + 8) + 16LL * v23);
      if ((v37 & 4) != 0) {
        goto LABEL_30;
      }
LABEL_18:
      if (!*(_BYTE *)(*v3 + 103LL))
      {
        uint64_t v26 = v3[19] + v15;
LABEL_25:
        uint64_t v19 = (uint64_t (*)(uint64_t))-1LL;
        goto LABEL_8;
      }

      goto LABEL_9;
    }

    if (!*(_BYTE *)(*v3 + 103LL))
    {
      uint64_t v26 = v3[19] + v15;
      uint64_t v25 = *(char **)v18;
      goto LABEL_25;
    }

uint64_t sub_181325FE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (unsigned __int8 *)result;
    do
    {
      unsigned int v6 = *((_DWORD *)v5 + 1);
      if ((a2 & 0x80000000) != 0)
      {
        v6 &= 0xFFFFFFFC;
      }

      else
      {
        if ((v6 & 1) == 0 || *((_DWORD *)v5 + 14) != (_DWORD)a2) {
          goto LABEL_10;
        }
        unsigned int v6 = v6 & 0xFFFFFFFC | 2;
      }

      *((_DWORD *)v5 + 1) = v6;
LABEL_10:
      int v7 = *v5;
      if (v7 == 172)
      {
        uint64_t v8 = (int *)*((void *)v5 + 4);
        if (v8 && *v8 >= 1)
        {
          uint64_t v9 = 0LL;
          uint64_t v10 = 2LL;
          do
          {
            sub_181325FE0(*(void *)&v8[v10], a2, a3);
            ++v9;
            uint64_t v8 = (int *)*((void *)v5 + 4);
            v10 += 6LL;
          }

          while (v9 < *v8);
        }
      }

      else if (v7 == 167 && !(_DWORD)a3 && *((_DWORD *)v5 + 11) == (_DWORD)a2)
      {
        *((_DWORD *)v5 + 1) = v6 & 0xFFDFFFFF;
      }

      uint64_t result = sub_181325FE0(*((void *)v5 + 2), a2, a3);
      uint64_t v5 = (unsigned __int8 *)*((void *)v5 + 3);
    }

    while (v5);
  }

  return result;
}

uint64_t sub_1813260D8(void *a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v5 = *a1 + 103LL;
  v11[0] = a1;
  v11[1] = v5;
  do
  {
    while (1)
    {
      uint64_t v12 = 0LL;
      uint64_t v15 = 0LL;
      int v13 = 0;
      uint64_t v6 = *(void *)(a2 + 40);
      else {
        int v7 = 1;
      }
      int v14 = v7;
      uint64_t result = sub_18132A740((uint64_t)v11, *(unsigned __int8 **)(a2 + 48));
      if ((_DWORD)v12) {
        break;
      }
      if (!HIDWORD(v12)) {
        return result;
      }
    }

    v10[0] = a1;
    v10[1] = sub_18132A858;
    v10[2] = sub_181323260;
    void v10[3] = 0LL;
    v10[4] = 0LL;
    v10[5] = v11;
    uint64_t v9 = *(void *)(a2 + 48);
    if (v9) {
      uint64_t result = sub_18131C57C((uint64_t)v10, v9);
    }
    if (v15) {
      uint64_t result = (uint64_t)sub_1812F20DC(*(void **)v11[0], v15);
    }
    v4 += HIDWORD(v12);
  }

  while (HIDWORD(v12));
  return result;
}

uint64_t sub_1813261CC(uint64_t *a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 4) & 8) == 0) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a2 + 32);
  if (*(_DWORD *)v2 != 1) {
    return 0LL;
  }
  if (*(void *)(a2 + 48)) {
    return 0LL;
  }
  if (*(void *)(a2 + 64)) {
    return 0LL;
  }
  if (*(void *)(a2 + 56)) {
    return 0LL;
  }
  if (*(void *)(a2 + 72)) {
    return 0LL;
  }
  int v3 = *(unsigned __int8 **)(v2 + 8);
  if (*v3 != 168) {
    return 0LL;
  }
  int v4 = (_BYTE *)*((void *)v3 + 1);
  if (!v4) {
    return 0LL;
  }
  for (uint64_t i = "count"; ; ++i)
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *(unsigned __int8 *)i;
    if ((_DWORD)v7 == (_DWORD)v8) {
      break;
    }
    if (byte_1813C6343[v7] != byte_1813C6343[v8]) {
      return 0LL;
    }
LABEL_11:
    ++v4;
  }

  if (*v4) {
    goto LABEL_11;
  }
  if (!*((void *)v3 + 4))
  {
    uint64_t v9 = *(void **)(a2 + 40);
    if (*(_DWORD *)v9 == 1 && (v3[7] & 1) == 0)
    {
      uint64_t v10 = v9[6];
      if (v10)
      {
        if (*(void *)(v10 + 80) && (*(_BYTE *)(v10 + 7) & 4) == 0)
        {
          uint64_t v11 = (unsigned __int8 *)v9[6];
          while ((*v11 == 135 || !*((void *)v11 + 10))
               && !*((void *)v11 + 6)
               && !*((void *)v11 + 12)
               && (v11[4] & 8) == 0)
          {
            uint64_t v11 = (unsigned __int8 *)*((void *)v11 + 10);
            if (!v11)
            {
              uint64_t v12 = (void *)*a1;
              v9[6] = 0LL;
              sub_18128FF4C(v12, v9);
              uint64_t v13 = 0LL;
              *(void *)(a2 + 40) = sub_181268E34(*a1, 0x70uLL);
              do
              {
                while (1)
                {
                  uint64_t v15 = *(void *)(v10 + 80);
                  *(void *)(v10 + 80) = 0LL;
                  *(void *)(v10 + 88) = 0LL;
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v10 + 4) & 0xFFFFFEF7 | 8;
                  *(_WORD *)(v10 + 2) = 0;
                  uint64_t v16 = *(void **)(v10 + 32);
                  if (v16) {
                    sub_181311F48(v12, v16);
                  }
                  uint64_t v17 = v3;
                  uint64_t v18 = v15;
                  if (v15) {
                    uint64_t v17 = (unsigned __int8 *)sub_18129C928((uint64_t)v12, v3, 0LL, 0LL);
                  }
                  *(void *)(v10 + 32) = sub_18133E190((void *)*a1, v17);
                  uint64_t v19 = sub_1813132BC(a1, 138, 0LL, 0LL);
                  sub_181315578(a1, v19, v10, v20, v21, v22, v23, v24);
                  if (v13) {
                    break;
                  }
                  uint64_t v13 = v19;
                  uint64_t v10 = v18;
                  if (!v18) {
                    goto LABEL_37;
                  }
                }

                uint64_t v13 = sub_1813132BC(a1, 106, v19, v13);
                uint64_t v10 = v18;
              }

              while (v18);
LABEL_37:
              *(void *)(*(void *)(a2 + 32) + 8LL) = v13;
              *(_DWORD *)(a2 + 4) &= ~8u;
              return 1LL;
            }
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_181326418( uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v8 = a2;
  uint64_t v13 = a3;
  if (*((void *)a2 + 10))
  {
    int v15 = 0;
    uint64_t v16 = a2;
    while (1)
    {
      int v17 = *v16;
      if (v17 == 138) {
        int v18 = v15;
      }
      else {
        int v18 = 1;
      }
      if (v17 != 135) {
        int v15 = v18;
      }
      if (*((void *)v16 + 14)) {
        return 0LL;
      }
      uint64_t v16 = (unsigned __int8 *)*((void *)v16 + 10);
      if (!v16)
      {
        int v40 = a5;
        if (!v15) {
          goto LABEL_26;
        }
        uint64_t v19 = a2;
        while (1)
        {
          uint64_t v20 = (int *)*((void *)v19 + 4);
          if (*v20 >= 1) {
            break;
          }
LABEL_17:
          uint64_t v19 = (unsigned __int8 *)*((void *)v19 + 10);
          if (!v19) {
            goto LABEL_26;
          }
        }

        uint64_t v21 = 0LL;
        uint64_t v22 = 2LL;
        while (1)
        {
          uint64_t v23 = sub_181289D04((uint64_t)a1, *(unsigned __int8 **)&v20[v22], a3, a4, a5, a6, a7, a8);
          if (v23)
          {
          }

          ++v21;
          v22 += 6LL;
          if (v21 >= *v20) {
            goto LABEL_17;
          }
        }
      }
    }
  }

  int v40 = a5;
  uint64_t v24 = *((void *)a2 + 14);
  if (v24)
  {
    if (!*(void *)(v24 + 16)) {
      return 0LL;
    }
  }

uint64_t sub_1813266D8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2[5];
  if ((*(_BYTE *)(v4 + 7) & 1) == 0)
  {
    while (1)
    {
      a3 = (int)a3;
      while (1)
      {
        uint64_t v5 = a3++;
        uint64_t v6 = *(void *)(a1 + 104 * v5 + 48);
        if (!v6) {
          goto LABEL_4;
        }
        if ((*(_WORD *)(a1 + 104 * v5 + 69) & 0x20) != 0) {
          goto LABEL_4;
        }
        uint64_t v7 = *(_BYTE **)(a1 + 104 * v5 + 24);
        if (!v7) {
          goto LABEL_4;
        }
        uint64_t v8 = *(void *)(*(void *)(a1 + 104 * v5 + 40) + 96LL);
        if (v8 != *(void *)(a2[4] + 96LL)) {
          goto LABEL_4;
        }
        uint64_t v9 = (unsigned __int8 *)a2[2];
        if (!v9) {
          goto LABEL_4;
        }
        while (1)
        {
          uint64_t v10 = *v7;
          uint64_t v11 = *v9;
          if ((_DWORD)v10 == (_DWORD)v11) {
            break;
          }
          if (byte_1813C6343[v10] != byte_1813C6343[v11]) {
            goto LABEL_4;
          }
LABEL_12:
          ++v7;
          ++v9;
        }

        if (*v7) {
          goto LABEL_12;
        }
        if (v8 || *(_DWORD *)(v4 + 16) == *(_DWORD *)(v6 + 16)) {
          break;
        }
LABEL_4:
        if ((_DWORD)a3 == a4) {
          return 0LL;
        }
      }

      if ((*(_BYTE *)(v6 + 7) & 1) == 0) {
        return a1 + 104 * v5 + 8;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1813267BC(uint64_t *a1, int *a2, int a3, int a4)
{
  int v7 = *a2;
  int v8 = *a2 - a3;
  uint64_t v15 = sub_18131A140(*a1, v8, a4 + 1);
  if (v15) {
    BOOL v16 = v7 <= a3;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = (uint64_t)&a2[6 * a3 + 2];
    do
    {
      uint64_t v20 = sub_181289D04((uint64_t)a1, *(unsigned __int8 **)v19, v9, v10, v11, v12, v13, v14);
      if (!v20) {
        uint64_t v20 = *(void *)(*a1 + 16);
      }
      *(void *)(v15 + 32 + 8 * v18) = v20;
      *(_BYTE *)(*(void *)(v15 + 24) + v18++) = *(_BYTE *)(v19 + 16);
      v19 += 24LL;
    }

    while (v8 != (_DWORD)v18);
  }

  return v15;
}

uint64_t *sub_181326870( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)result;
  uint64_t v9 = **(unsigned int **)(*(void *)(*(void *)(a2 + 40) + 48LL) + 32LL);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = result[2];
  if (!v11)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
      *((_BYTE *)result + 35) = 1;
    }
    uint64_t result = (uint64_t *)sub_1812DC63C(result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = (uint64_t)result;
  }

  uint64_t v12 = *(unsigned int *)(v10 + 88);
  int v13 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v13)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 118LL, v12, v9, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v13 + 1;
    uint64_t v14 = *(void *)(v11 + 136) + 40LL * v13;
    *(_DWORD *)uint64_t v14 = 118;
    *(_DWORD *)(v14 + 4) = v12;
    *(_DWORD *)(v14 + 8) = v9;
    *(void *)(v14 + 12) = 0LL;
    *(void *)(v14 + 28) = 0LL;
    *(void *)(v14 + 20) = 0LL;
    *(_DWORD *)(v14 + 36) = 0;
  }

  uint64_t v15 = *(unsigned int *)(v10 + 88);
  uint64_t v16 = (v15 + 1);
  int v17 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v17)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 115LL, v16, v15, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v17 + 1;
    uint64_t v18 = *(void *)(v11 + 136) + 40LL * v17;
    *(_DWORD *)uint64_t v18 = 115;
    *(_DWORD *)(v18 + 4) = v16;
    *(_DWORD *)(v18 + 8) = v15;
    *(void *)(v18 + 12) = 0LL;
    *(void *)(v18 + 28) = 0LL;
    *(void *)(v18 + 20) = 0LL;
    *(_DWORD *)(v18 + 36) = 0;
  }

  uint64_t v19 = *(unsigned int *)(v10 + 88);
  uint64_t v20 = (v19 + 2);
  int v21 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v21)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 115LL, v20, v19, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v21 + 1;
    uint64_t v22 = *(void *)(v11 + 136) + 40LL * v21;
    *(_DWORD *)uint64_t v22 = 115;
    *(_DWORD *)(v22 + 4) = v20;
    *(_DWORD *)(v22 + 8) = v19;
    *(void *)(v22 + 12) = 0LL;
    *(void *)(v22 + 28) = 0LL;
    *(void *)(v22 + 20) = 0LL;
    *(_DWORD *)(v22 + 36) = 0;
  }

  uint64_t v23 = *(unsigned int *)(v10 + 88);
  uint64_t v24 = (v23 + 3);
  int v25 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v25)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 115LL, v24, v23, 0LL, a6, a7, a8);
    unint64_t v27 = *(int **)(v10 + 16);
    if (!v27) {
      goto LABEL_22;
    }
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v25 + 1;
    uint64_t v26 = *(void *)(v11 + 136) + 40LL * v25;
    *(_DWORD *)uint64_t v26 = 115;
    *(_DWORD *)(v26 + 4) = v24;
    *(_DWORD *)(v26 + 8) = v23;
    *(void *)(v26 + 12) = 0LL;
    *(void *)(v26 + 28) = 0LL;
    *(void *)(v26 + 20) = 0LL;
    *(_DWORD *)(v26 + 36) = 0;
    unint64_t v27 = *(int **)(v10 + 16);
    if (!v27) {
      goto LABEL_22;
    }
  }

  int v28 = *v27;
  int v29 = *(_DWORD *)(v8 + 56);
  uint64_t v30 = (v29 + 1);
  *(_DWORD *)(v10 + 108) = v30;
  uint64_t v31 = (v29 + v28);
  *(_DWORD *)(v8 + 56) = v31;
  int v32 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v32)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 75LL, 0LL, v30, v31, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v32 + 1;
    uint64_t v33 = *(void *)(v11 + 136) + 40LL * v32;
    *(void *)uint64_t v33 = 75LL;
    *(_DWORD *)(v33 + 8) = v30;
    *(_DWORD *)(v33 + 12) = v31;
    *(void *)(v33 + 24) = 0LL;
    *(void *)(v33 + 32) = 0LL;
    *(void *)(v33 + 16) = 0LL;
  }

uint64_t sub_181326F40( uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  uint64_t v11 = (uint64_t)a1;
  uint64_t v12 = *(void *)(a2 + 112);
  int v13 = *(int **)(v12 + 24);
  uint64_t v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
      *((_BYTE *)a1 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }

  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(unsigned int *)(v15 + 72);
  uint64_t v17 = *(__int16 *)(*(void *)(v15 + 40) + 54LL);
  int v18 = *(_DWORD *)(v11 + 68);
  unsigned int v301 = v18 - 1;
  *(_DWORD *)(v11 + 68) = v18 - 1;
  __int128 v308 = 0u;
  memset(v309, 0, 24);
  v305[0] = v11;
  v305[1] = v12;
  v305[2] = v14;
  int v306 = v8;
  int v307 = v9;
  DWORD1(v309[0]) = *(_DWORD *)(v12 + 88);
  unsigned int v19 = DWORD1(v309[0]);
  HIDWORD(v308) = DWORD1(v309[0]) + 2;
  int v20 = DWORD1(v309[0]) + 3;
  *(void *)((char *)v309 + 12) = (DWORD1(v309[0]) + 3);
  int v21 = *(unsigned __int8 *)(v12 + 33);
  int v294 = v18;
  unsigned int v289 = DWORD1(v309[0]) + 2;
  if (v21 != 90)
  {
    if (v21 == 86)
    {
LABEL_29:
      int v27 = 1;
    }

    else
    {
      int v27 = 2;
    }

LABEL_194:
  int v154 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v154)
  {
    sub_18131044C(v14, 9LL, 0LL, v301, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v154 + 1;
    uint64_t v155 = *(void *)(v14 + 136) + 40LL * v154;
    *(void *)uint64_t v155 = 9LL;
    *(_DWORD *)(v155 + 8) = v301;
    *(void *)(v155 + 12) = 0LL;
    *(void *)(v155 + 28) = 0LL;
    *(void *)(v155 + 20) = 0LL;
    *(_DWORD *)(v155 + 36) = 0;
  }

  if (*(_BYTE *)(*(void *)v14 + 103LL))
  {
    dword_18C550688 = *(_DWORD *)(v14 + 144);
    if ((_DWORD)v109) {
      goto LABEL_199;
    }
  }

  else
  {
    *(_DWORD *)(*(void *)(v14 + 136) + 40LL * v287 + 8) = *(_DWORD *)(v14 + 144);
    if ((_DWORD)v109) {
LABEL_199:
    }
      sub_18133B924(v304, v291, v298, v109, v301, a6, a7, a8);
  }

  int v156 = *(unsigned __int8 *)(v12 + 33);
  if (v156 == 86)
  {
    sub_18133BBE8((uint64_t)v305, 3LL, 0LL, 0LL, a5, a6, a7, a8, v142);
    if (*(_BYTE *)(v12 + 34) != 90)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        int v164 = *((_DWORD *)v304 + 17);
        uint64_t v165 = (v164 - 1);
        *((_DWORD *)v304 + 17) = v165;
        uint64_t v166 = *(unsigned int *)(v14 + 144);
        sub_18133C488(v305, 57LL, v293, v295, v292, v165, v161, v162);
        sub_18133BBE8((uint64_t)v305, 2LL, v297, 0LL, v167, v168, v169, v170, v171);
        sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 0LL, v172, v173, v174, v175, v176);
        int v177 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v177)
        {
          sub_18131044C(v14, 9LL, 0LL, v166, 0LL, v160, v161, v162);
        }

        else
        {
          *(_DWORD *)(v14 + 144) = v177 + 1;
          uint64_t v178 = *(void *)(v14 + 136) + 40LL * v177;
          *(void *)uint64_t v178 = 9LL;
          *(_DWORD *)(v178 + 8) = v166;
          *(void *)(v178 + 12) = 0LL;
          *(void *)(v178 + 28) = 0LL;
          *(void *)(v178 + 20) = 0LL;
          *(_DWORD *)(v178 + 36) = 0;
        }

        uint64_t v191 = *(void *)(v14 + 24);
        int v192 = -v164;
        goto LABEL_236;
      }

      uint64_t v190 = v295;
LABEL_218:
      sub_18133BBE8((uint64_t)v305, 1LL, v190, 0LL, v159, v160, v161, v162, v163);
      uint64_t v185 = 2LL;
      uint64_t v186 = v297;
LABEL_219:
      sub_18133BBE8((uint64_t)v305, v185, v186, 0LL, v180, v181, v182, v183, v184);
    }
  }

  else
  {
    if (*(_BYTE *)(v12 + 34) == 88)
    {
      if (v156 == 88)
      {
        int v179 = *(unsigned __int8 *)(v12 + 32);
        sub_18133BBE8((uint64_t)v305, 3LL, v295, 0LL, a5, a6, a7, a8, v142);
        if (v179 == 89)
        {
          sub_18133BBE8((uint64_t)v305, 2LL, v297, 0LL, v159, v160, v161, v162, v163);
          uint64_t v185 = 1LL;
          uint64_t v186 = 0LL;
          goto LABEL_219;
        }
      }

      else
      {
        sub_18133BBE8((uint64_t)v305, 3LL, v295, 0LL, a5, a6, a7, a8, v142);
      }

      uint64_t v190 = 0LL;
      goto LABEL_218;
    }

    sub_18133BBE8((uint64_t)v305, 3LL, 0LL, 0LL, a5, a6, a7, a8, v142);
    if (*(_BYTE *)(v12 + 34) != 90)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        uint64_t v188 = *(unsigned int *)(v14 + 144);
        if (v295)
        {
          uint64_t v189 = (*((_DWORD *)v304 + 17) - 1);
          *((_DWORD *)v304 + 17) = v189;
          sub_18133C488(v305, 57LL, v293, v295, v292, v189, v161, v162);
        }

        else
        {
          LODWORD(v189) = 0;
        }

        sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 0LL, v159, v160, v161, v162, v187);
        sub_18133BBE8((uint64_t)v305, 2LL, v297, 0LL, v195, v196, v197, v198, v199);
        if (v295)
        {
          int v200 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v200)
          {
            sub_18131044C(v14, 9LL, 0LL, v188, 0LL, v160, v161, v162);
          }

          else
          {
            *(_DWORD *)(v14 + 144) = v200 + 1;
            uint64_t v201 = *(void *)(v14 + 136) + 40LL * v200;
            *(void *)uint64_t v201 = 9LL;
            *(_DWORD *)(v201 + 8) = v188;
            *(void *)(v201 + 12) = 0LL;
            *(void *)(v201 + 28) = 0LL;
            *(void *)(v201 + 20) = 0LL;
            *(_DWORD *)(v201 + 36) = 0;
          }

          uint64_t v191 = *(void *)(v14 + 24);
          int v192 = ~(_DWORD)v189;
LABEL_236:
          if (*(_DWORD *)(v191 + 68) + *(_DWORD *)(v191 + 72) < 0) {
            sub_18131E420(v191, v14, v192);
          }
          else {
            *(_DWORD *)(*(void *)(v191 + 80) + 4LL * v192) = *(_DWORD *)(v14 + 144);
          }
        }
      }

      else
      {
        if (v295)
        {
          int v193 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v193)
          {
            int v193 = sub_18131044C(v14, 59LL, v295, 0LL, 1LL, v160, v161, v162);
          }

          else
          {
            *(_DWORD *)(v14 + 144) = v193 + 1;
            uint64_t v194 = *(void *)(v14 + 136) + 40LL * v193;
            *(_DWORD *)uint64_t v194 = 59;
            *(_DWORD *)(v194 + 4) = v295;
            v187.i64[0] = 0x100000000LL;
            *(void *)(v194 + 8) = 0x100000000LL;
            *(void *)(v194 + 24) = 0LL;
            *(void *)(v194 + 32) = 0LL;
            *(void *)(v194 + 16) = 0LL;
          }
        }

        else
        {
          int v193 = 0;
        }

        sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 0LL, v159, v160, v161, v162, v187);
        sub_18133BBE8((uint64_t)v305, 2LL, v297, 0LL, v202, v203, v204, v205, v206);
        if (v295)
        {
          if (*(_BYTE *)(*(void *)v14 + 103LL)) {
            unsigned int v207 = &byte_18C550680;
          }
          else {
            unsigned int v207 = (char *)(*(void *)(v14 + 136) + 40LL * v193);
          }
          *((_DWORD *)v207 + 2) = *(_DWORD *)(v14 + 144);
        }
      }
    }
  }

  uint64_t v208 = *(void *)(v14 + 24);
  uint64_t v209 = -v294;
  if (*(_DWORD *)(v208 + 68) + *(_DWORD *)(v208 + 72) < 0) {
    sub_18131E420(v208, v14, v209);
  }
  else {
    *(_DWORD *)(*(void *)(v208 + 80) + 4LL * (int)v209) = *(_DWORD *)(v14 + 144);
  }
  sub_18128E90C(a3, v157, v209, v158, v159, v160, v161, v162);
  int v214 = *(_DWORD *)(v14 + 144);
  if (*(void *)(v12 + 16))
  {
    if (*(_DWORD *)(v14 + 148) <= v214)
    {
      int v216 = sub_18131044C(v14, 71LL, 0LL, v303, 0LL, v211, v212, v213);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v214 + 1;
      uint64_t v215 = *(void *)(v14 + 136) + 40LL * v214;
      *(void *)uint64_t v215 = 71LL;
      *(_DWORD *)(v215 + 8) = v108;
      *(void *)(v215 + 12) = 0LL;
      *(void *)(v215 + 28) = 0LL;
      *(void *)(v215 + 20) = 0LL;
      *(_DWORD *)(v215 + 36) = 0;
      int v216 = v214;
    }

    int v214 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(void *)v14 + 103LL)) {
      int v217 = &byte_18C550680;
    }
    else {
      int v217 = (char *)(*(void *)(v14 + 136) + 40LL * v285);
    }
    *((_DWORD *)v217 + 2) = v214;
  }

  else
  {
    int v216 = 0;
  }

  DWORD2(v308) = 0;
  if (*(_DWORD *)(v14 + 148) <= v214)
  {
    int v214 = sub_18131044C(v14, 36LL, v300, 0LL, 0LL, v211, v212, v213);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v214 + 1;
    uint64_t v218 = *(void *)(v14 + 136) + 40LL * v214;
    *(_DWORD *)uint64_t v218 = 36;
    *(_DWORD *)(v218 + 4) = v300;
    int16x8_t v219 = 0uLL;
    *(_OWORD *)(v218 + 8) = 0u;
    *(_OWORD *)(v218 + 24) = 0u;
  }

  int v220 = *(unsigned __int8 *)(v12 + 33);
  if (*(_BYTE *)(v12 + 34) == 88)
  {
    if (v220 == 88)
    {
      int v221 = *(unsigned __int8 *)(v12 + 32);
      sub_18133BBE8((uint64_t)v305, 3LL, v295, 0LL, v210, v211, v212, v213, v219);
      if (v221 == 89)
      {
        uint64_t v222 = 2LL;
        uint64_t v223 = v297;
        goto LABEL_264;
      }
    }

    else
    {
      uint64_t v222 = 3LL;
      uint64_t v223 = v295;
LABEL_264:
      sub_18133BBE8((uint64_t)v305, v222, v223, 0LL, v210, v211, v212, v213, v219);
    }

    uint64_t result = sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 0LL, v210, v211, v212, v213, v219);
    int v246 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(void *)v14 + 103LL))
    {
LABEL_266:
      int32x4_t v247 = &byte_18C550680;
      goto LABEL_277;
    }
  }

  else
  {
    sub_18133BBE8((uint64_t)v305, 3LL, 0LL, 0LL, v210, v211, v212, v213, v219);
    if (v220 == 86)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        uint64_t v229 = *(unsigned int *)(v14 + 144);
        int v230 = sub_18133BBE8((uint64_t)v305, 2LL, v297, 1LL, v224, v225, v226, v227, v228);
        int v240 = sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 1LL, v231, v232, v233, v234, v235);
      }

      else
      {
        uint64_t v229 = *(unsigned int *)(v14 + 144);
        if (*(_BYTE *)(v12 + 34) == 90)
        {
          int v240 = sub_18133BBE8((uint64_t)v305, 1LL, v297, 1LL, v224, v225, v226, v227, v228);
          uint64_t v262 = 0LL;
        }

        else
        {
          int v240 = sub_18133BBE8((uint64_t)v305, 1LL, v295, 1LL, v224, v225, v226, v227, v228);
          uint64_t v262 = v297;
        }

        int v230 = sub_18133BBE8((uint64_t)v305, 2LL, v262, 1LL, v257, v258, v259, v260, v261);
      }

      int v276 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v276)
      {
        sub_18131044C(v14, 9LL, 0LL, v229, 0LL, v237, v238, v239);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v276 + 1;
        uint64_t v277 = *(void *)(v14 + 136) + 40LL * v276;
        *(void *)uint64_t v277 = 9LL;
        *(_DWORD *)(v277 + 8) = v229;
        *(void *)(v277 + 12) = 0LL;
        *(void *)(v277 + 28) = 0LL;
        *(void *)(v277 + 20) = 0LL;
        *(_DWORD *)(v277 + 36) = 0;
      }

      uint64_t v278 = *(unsigned int *)(v14 + 144);
      int v279 = &byte_18C550680;
      if (!*(_BYTE *)(*(void *)v14 + 103LL)) {
        int v279 = (char *)(*(void *)(v14 + 136) + 40LL * v230);
      }
      *((_DWORD *)v279 + 2) = v278;
      uint64_t result = sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 1LL, v236, v237, v238, v239, v241);
      int v280 = result;
      int v281 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v281)
      {
        uint64_t result = sub_18131044C(v14, 9LL, 0LL, v278, 0LL, v243, v244, v245);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v281 + 1;
        uint64_t v282 = *(void *)(v14 + 136) + 40LL * v281;
        *(void *)uint64_t v282 = 9LL;
        *(_DWORD *)(v282 + 8) = v278;
        *(void *)(v282 + 12) = 0LL;
        *(void *)(v282 + 28) = 0LL;
        *(void *)(v282 + 20) = 0LL;
        *(_DWORD *)(v282 + 36) = 0;
      }

      int v246 = *(_DWORD *)(v14 + 144);
      int v283 = *(unsigned __int8 *)(*(void *)v14 + 103LL);
      if (*(_BYTE *)(*(void *)v14 + 103LL))
      {
        dword_18C550688 = *(_DWORD *)(v14 + 144);
        uint64_t v108 = v303;
        if (v283) {
          goto LABEL_266;
        }
      }

      else
      {
        uint64_t v284 = *(void *)(v14 + 136);
        *(_DWORD *)(v284 + 40LL * v240 + 8) = v246;
        *(_DWORD *)(v284 + 40LL * v280 + 8) = v246;
        uint64_t v108 = v303;
        if (v283) {
          goto LABEL_266;
        }
      }
    }

    else
    {
      uint64_t v248 = *(unsigned int *)(v14 + 144);
      int v249 = sub_18133BBE8((uint64_t)v305, 1LL, 0LL, 1LL, v224, v225, v226, v227, v228);
      uint64_t result = sub_18133BBE8((uint64_t)v305, 2LL, v297, 0LL, v250, v251, v252, v253, v254);
      int v255 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v255)
      {
        uint64_t result = sub_18131044C(v14, 9LL, 0LL, v248, 0LL, v243, v244, v245);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v255 + 1;
        uint64_t v256 = *(void *)(v14 + 136) + 40LL * v255;
        *(void *)uint64_t v256 = 9LL;
        *(_DWORD *)(v256 + 8) = v248;
        *(void *)(v256 + 12) = 0LL;
        *(void *)(v256 + 28) = 0LL;
        *(void *)(v256 + 20) = 0LL;
        *(_DWORD *)(v256 + 36) = 0;
      }

      int v246 = *(_DWORD *)(v14 + 144);
      int v263 = *(unsigned __int8 *)(*(void *)v14 + 103LL);
      if (*(_BYTE *)(*(void *)v14 + 103LL)) {
        uint64_t v264 = &byte_18C550680;
      }
      else {
        uint64_t v264 = (char *)(*(void *)(v14 + 136) + 40LL * v249);
      }
      *((_DWORD *)v264 + 2) = v246;
      if (v263) {
        goto LABEL_266;
      }
    }
  }

  int32x4_t v247 = (char *)(*(void *)(v14 + 136) + 40LL * v214);
LABEL_277:
  *((_DWORD *)v247 + 2) = v246;
  int v265 = DWORD1(v309[0]);
  if (*(_DWORD *)(v14 + 148) <= v246)
  {
    uint64_t result = sub_18131044C(v14, 146LL, DWORD1(v309[0]), 0LL, 0LL, v243, v244, v245);
    if (*(void *)(v12 + 16)) {
      goto LABEL_281;
    }
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v246 + 1;
    uint64_t v266 = *(void *)(v14 + 136) + 40LL * v246;
    *(_DWORD *)uint64_t v266 = 146;
    *(_DWORD *)(v266 + 4) = v265;
    *(_OWORD *)(v266 + 8) = 0u;
    *(_OWORD *)(v266 + 24) = 0u;
    if (!*(void *)(v12 + 16)) {
      return result;
    }
LABEL_281:
    uint64_t v267 = *(unsigned int *)(v12 + 132);
    if ((_DWORD)v267)
    {
      int v268 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v268)
      {
        uint64_t result = sub_18131044C(v14, 71LL, 1LL, v267, 0LL, v243, v244, v245);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v268 + 1;
        uint64_t v269 = *(void *)(v14 + 136) + 40LL * v268;
        *(void *)uint64_t v269 = 0x100000047LL;
        *(_DWORD *)(v269 + 8) = v267;
        *(void *)(v269 + 12) = 0LL;
        *(void *)(v269 + 28) = 0LL;
        *(void *)(v269 + 20) = 0LL;
        *(_DWORD *)(v269 + 36) = 0;
      }

      uint64_t v270 = *(unsigned int *)(v12 + 136);
      int v271 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v271)
      {
        uint64_t result = sub_18131044C(v14, 71LL, 0LL, v270, 0LL, v243, v244, v245);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v271 + 1;
        uint64_t v272 = *(void *)(v14 + 136) + 40LL * v271;
        *(void *)uint64_t v272 = 71LL;
        *(_DWORD *)(v272 + 8) = v270;
        *(void *)(v272 + 12) = 0LL;
        *(void *)(v272 + 28) = 0LL;
        *(void *)(v272 + 20) = 0LL;
        *(_DWORD *)(v272 + 36) = 0;
      }
    }

    int v273 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(void *)v14 + 103LL)) {
      int v274 = &byte_18C550680;
    }
    else {
      int v274 = (char *)(*(void *)(v14 + 136) + 40LL * v216);
    }
    *((_DWORD *)v274 + 1) = v273;
    if (*(_DWORD *)(v14 + 148) <= v273)
    {
      return sub_18131044C(v14, 67LL, v108, 0LL, 0LL, v243, v244, v245);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v273 + 1;
      uint64_t v275 = *(void *)(v14 + 136) + 40LL * v273;
      *(_DWORD *)uint64_t v275 = 67;
      *(_DWORD *)(v275 + 4) = v108;
      *(_OWORD *)(v275 + 8) = 0u;
      *(_OWORD *)(v275 + 24) = 0u;
    }
  }

  return result;
}

void *sub_18132888C(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[3];
  if (v4) {
    sub_1812F20DC(a1, v4);
  }
  uint64_t v5 = (void *)a2[5];
  if (v5) {
    sub_1812F20DC(a1, v5);
  }
  return sub_1812F20DC(a1, a2);
}

uint64_t sub_1813288D4(uint64_t result, int *a2)
{
  if (a2)
  {
    int v3 = *a2;
    if (*a2 >= 1)
    {
      uint64_t v4 = result;
      int v5 = 0;
      uint64_t v6 = 2LL;
      do
      {
        uint64_t v7 = *(void *)&a2[v6];
        void v8[2] = sub_181329418;
        v8[3] = sub_18132942C;
        int v9 = 0;
        uint64_t v10 = v4;
        v8[0] = 0LL;
        v8[1] = sub_1812BCAB8;
        if (v7)
        {
          uint64_t result = sub_18131C57C((uint64_t)v8, v7);
          int v3 = *a2;
        }

        ++v5;
        v6 += 6LL;
      }

      while (v5 < v3);
    }
  }

  return result;
}

uint64_t sub_181328980(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (!v4 || *(_DWORD *)v4 != 1 || (*(_BYTE *)(a2 + 7) & 1) != 0 || (*(_BYTE *)(a1 + 98) & 1) != 0) {
    return 0LL;
  }
  uint64_t v6 = *(_BYTE **)(a2 + 8);
  uint64_t v7 = "min";
  for (uint64_t i = v6; ; ++i)
  {
    uint64_t v9 = *i;
    uint64_t v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 == (_DWORD)v10) {
      break;
    }
    if (byte_1813C6343[v9] != byte_1813C6343[v10])
    {
      for (uint64_t j = "max"; ; ++j)
      {
        uint64_t v12 = *v6;
        uint64_t v13 = *(unsigned __int8 *)j;
        if ((_DWORD)v12 == (_DWORD)v13)
        {
          if (!*v6)
          {
            char v14 = 1;
            uint64_t v15 = 2LL;
            goto LABEL_34;
          }
        }

        else if (byte_1813C6343[v12] != byte_1813C6343[v13])
        {
          return 0LL;
        }

        ++v6;
      }
    }

uint64_t sub_181328B00(uint64_t result, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 40) | 0x20000;
  *(_DWORD *)(a2 + 40) = v3;
  if (*(int *)(result + 48) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v4 + 40) + 24 * v5);
      uint64_t v7 = *(int **)(v6 + 32);
      if (v7)
      {
        int v8 = *v7;
        if (*v7 >= 1)
        {
          int v9 = 0;
          uint64_t v10 = 2LL;
          do
          {
            uint64_t v11 = *(void *)&v7[v10];
            uint64_t v15 = sub_181329418;
            uint64_t v16 = sub_18132942C;
            int v17 = 0;
            uint64_t v18 = a2;
            uint64_t v13 = 0LL;
            char v14 = sub_1812BCAB8;
            if (v11)
            {
              uint64_t result = sub_18131C57C((uint64_t)&v13, v11);
              int v8 = *v7;
            }

            ++v9;
            v10 += 6LL;
          }

          while (v9 < v8);
        }
      }

      if ((*(_BYTE *)(v6 + 7) & 1) != 0)
      {
        uint64_t v12 = *(void *)(*(void *)(v6 + 72) + 72LL);
        uint64_t v15 = sub_181329418;
        uint64_t v16 = sub_18132942C;
        int v17 = 0;
        uint64_t v18 = a2;
        uint64_t v13 = 0LL;
        char v14 = sub_1812BCAB8;
        if (v12) {
          uint64_t result = sub_18131C57C((uint64_t)&v13, v12);
        }
      }

      ++v5;
    }

    while (v5 < *(int *)(v4 + 48));
    int v3 = *(_DWORD *)(a2 + 40);
  }

  *(_DWORD *)(a2 + 40) = v3 & 0xFFFDFFFF;
  return result;
}

uint64_t sub_181328C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 36);
  *(_DWORD *)(a2 + 32) = v3;
  if (*(_WORD *)(a2 + 2))
  {
    signed int v4 = **(_DWORD **)(a1 + 56) - 1;
    if ((int)v3 >= 1)
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (v3 < 8)
      {
        uint64_t v6 = 0LL;
        goto LABEL_8;
      }

      uint64_t v6 = v3 & 0x7FFFFFF8;
      int32x4_t v7 = vdupq_n_s32(v4);
      int v8 = (__int16 *)(v5 + 118);
      uint64_t v9 = v3 & 0xFFFFFFF8;
      int32x4_t v10 = v7;
      do
      {
        v11.i16[0] = *(v8 - 48);
        v11.i16[1] = *(v8 - 36);
        v11.i16[2] = *(v8 - 24);
        v11.i16[3] = *(v8 - 12);
        v12.i16[0] = *v8;
        v12.i16[1] = v8[12];
        v12.i16[2] = v8[24];
        v12.i16[3] = v8[36];
        int32x4_t v7 = vmaxq_s32(v7, vmovl_s16(v11));
        int32x4_t v10 = vmaxq_s32(v10, vmovl_s16(v12));
        v8 += 96;
        v9 -= 8LL;
      }

      while (v9);
      signed int v4 = vmaxvq_s32(vmaxq_s32(v7, v10));
      if (v6 != v3)
      {
LABEL_8:
        uint64_t v13 = (__int16 *)(v5 + 24LL * v6 + 22);
        uint64_t v14 = v3 - v6;
        do
        {
          signed int v16 = *v13;
          v13 += 12;
          signed int v15 = v16;
          if (v4 <= v16) {
            signed int v4 = v15;
          }
          --v14;
        }

        while (v14);
      }
    }

    *(_WORD *)(a2 + 2) = v4 + 1;
  }

  return sub_181328B00(a2, a3);
}

uint64_t sub_181328D24(uint64_t result)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  v6[0] = 0LL;
  v6[1] = sub_18133E10C;
  int v1 = *(_DWORD *)(result + 48);
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    for (uint64_t i = 0LL; i < v1; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 40) + v3);
      if (v5)
      {
        uint64_t result = sub_18131C57C((uint64_t)v6, v5);
        int v1 = *(_DWORD *)(v2 + 48);
      }

      v3 += 24LL;
    }
  }

  return result;
}

uint64_t sub_181328DAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(void *)(a1 + 16);
  int v9 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v9) {
    return sub_18131044C(result, 79LL, a2, a3, a4, a6, a7, a8);
  }
  *(_DWORD *)(result + 144) = v9 + 1;
  uint64_t v10 = *(void *)(result + 136) + 40LL * v9;
  *(_DWORD *)uint64_t v10 = 79;
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  *(_DWORD *)(v10 + 12) = a4;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + 16) = 0LL;
  return result;
}

void *sub_181328E00( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(int *)(a2 + 48) >= 1)
  {
    int v9 = 0;
    uint64_t v10 = result[2];
    int16x4_t v11 = *(void **)(a2 + 40);
    do
    {
      uint64_t v13 = *(unsigned int **)(*v11 + 32LL);
      if (v13) {
        uint64_t v14 = *v13;
      }
      else {
        uint64_t v14 = 0LL;
      }
      uint64_t v15 = (v9 + *(_DWORD *)(a2 + 12) + *(_DWORD *)(a2 + 32));
      int v16 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v16)
      {
        sub_18131044C(v10, 165LL, v15, v14, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v16 + 1;
        uint64_t v17 = *(void *)(v10 + 136) + 40LL * v16;
        *(_DWORD *)uint64_t v17 = 165;
        *(_DWORD *)(v17 + 4) = v15;
        *(_DWORD *)(v17 + 8) = v14;
        *(void *)(v17 + 12) = 0LL;
        *(void *)(v17 + 28) = 0LL;
        *(void *)(v17 + 20) = 0LL;
        *(_DWORD *)(v17 + 36) = 0;
      }

      uint64_t v18 = v11[1];
      uint64_t result = *(void **)v10;
      if (*(_BYTE *)(*(void *)v10 + 103LL))
      {
        if ((*(_BYTE *)(v18 + 4) & 0x10) != 0) {
          uint64_t result = sub_1813014B0(result, (void *)v18);
        }
      }

      else
      {
        uint64_t v12 = *(void *)(v10 + 136) + 40LL * *(int *)(v10 + 144);
        *(_BYTE *)(v12 - 39) = -7;
        *(void *)(v12 - 24) = v18;
      }

      ++v9;
      v11 += 3;
    }

    while (v9 < *(_DWORD *)(a2 + 48));
  }

  return result;
}

void *sub_181328F18(void *result, int a2, int a3, int a4)
{
  if (!*((_DWORD *)result + 12) && (a2 - 1) <= 1)
  {
    __int128 v7 = (void *)result[2];
    uint64_t result = (void *)*v7;
    if (!*(_BYTE *)(*v7 + 103LL))
    {
      uint64_t v8 = v7[17] + 40LL * a4;
      sub_18127ABFC(result, *(char *)(v8 + 1), *(void *)(v8 + 16));
      *(void *)(v8 + 16) = 0LL;
      *(_WORD *)uint64_t v8 = 184;
      uint64_t result = (void *)*v7;
      if (!*(_BYTE *)(*v7 + 103LL))
      {
        uint64_t v9 = a4 + 1LL;
        uint64_t v10 = v7[17];
        int16x4_t v11 = (_BYTE *)(v10 + 40 * v9);
        if (*v11 == 185)
        {
          uint64_t v12 = v10 + 40 * v9;
          uint64_t result = sub_18127ABFC(result, *(char *)(v12 + 1), *(void *)(v12 + 16));
          *(_BYTE *)(v12 + 1) = 0;
          *(void *)(v12 + 16) = 0LL;
          *int16x4_t v11 = -72;
        }
      }
    }

    if (a2 == 2)
    {
      if (*(_BYTE *)(*v7 + 103LL)) {
        uint64_t v13 = &byte_18C550680;
      }
      else {
        uint64_t v13 = (char *)(v7[17] + 40LL * a4);
      }
      *uint64_t v13 = 75;
      *((_DWORD *)v13 + 1) = 1;
      *((_DWORD *)v13 + 2) = a3;
    }
  }

  return result;
}

uint64_t sub_181329020(void *a1, uint64_t a2)
{
  if (a1[6]) {
    return 0LL;
  }
  uint64_t v2 = a1[4];
  if (*(_DWORD *)v2 != 1) {
    return 0LL;
  }
  uint64_t v3 = a1[5];
  if (*(_DWORD *)v3 != 1) {
    return 0LL;
  }
  if (*(void *)(v3 + 48)) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 48) != 1) {
    return 0LL;
  }
  if (a1[8]) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (*(_BYTE *)(v4 + 63)) {
    return 0LL;
  }
  uint64_t v5 = *(unsigned __int8 **)(v2 + 8);
  if (*v5 != 168 || *((void *)v5 + 8) != a2 || (*(_BYTE *)(*(void *)(*(void *)(a2 + 40) + 8LL) + 5LL) & 1) == 0) {
    return 0LL;
  }
  if ((*((_DWORD *)v5 + 1) & 0x1000004) != 0) {
    return 0LL;
  }
  return v4;
}

uint64_t sub_1813290BC( uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(result + 301) == 2) {
    return sub_18131CCF8((uint64_t *)result, 0, "SCAN %s%s%s", a4, a5, a6, a7, a8, *a2);
  }
  return result;
}

uint64_t sub_181329144( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a2 + 68) & 4) != 0 && *(_BYTE *)(a2 + 65))
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 64);
    while (v8-- >= 1)
    {
      if ((*(_BYTE *)(*(void *)(a2 + 120LL * v8 + 952) + 48LL) & 4) != 0)
      {
        uint64_t v10 = *(unsigned int *)(a2 + 120LL * v8 + 872);
        goto LABEL_9;
      }
    }

    uint64_t v10 = *(unsigned int *)(a2 + 52);
LABEL_9:
    int v11 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v11)
    {
      return sub_18131044C(result, 9LL, 0LL, v10, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(result + 144) = v11 + 1;
      uint64_t v12 = *(void *)(result + 136) + 40LL * v11;
      *(void *)uint64_t v12 = 9LL;
      *(_DWORD *)(v12 + 8) = v10;
      *(void *)(v12 + 12) = 0LL;
      *(void *)(v12 + 28) = 0LL;
      *(void *)(v12 + 20) = 0LL;
      *(_DWORD *)(v12 + 36) = 0;
    }
  }

  return result;
}

uint64_t sub_1813291E4( uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a2 == 168 && !*((void *)a2 + 8)) {
    sub_1812DC47C(*a1, "misuse of aggregate: %s()", a3, a4, a5, a6, a7, a8, *((void *)a2 + 1));
  }
  return 0LL;
}

int *sub_18132922C(uint64_t *a1, int *a2, int *a3, int a4)
{
  uint64_t v4 = a2;
  if (!a3) {
    return v4;
  }
  uint64_t v8 = a2 ? *a2 : 0LL;
  if (*a3 < 1) {
    return v4;
  }
  uint64_t v9 = 0LL;
  while (1)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *(unsigned __int8 **)&a3[6 * v9 + 2];
    if (v12) {
      break;
    }
    if (*(_BYTE *)(v11 + 103)) {
      return v4;
    }
    uint64_t v14 = 0LL;
    if (a4) {
      goto LABEL_22;
    }
LABEL_25:
    if (!v4)
    {
      uint64_t v18 = (int *)sub_18133E190((void *)*a1, v14);
LABEL_29:
      uint64_t v4 = v18;
      if (!v18) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    int v17 = *v4;
    if (v4[1] <= *v4)
    {
      uint64_t v18 = sub_18133E1F4(*a1, v4, v14);
      goto LABEL_29;
    }

    *uint64_t v4 = v17 + 1;
    uint64_t v10 = &v4[6 * v17];
    *((void *)v10 + 2) = 0LL;
    *((void *)v10 + 3) = 0LL;
    *((void *)v10 + 1) = v14;
LABEL_8:
    LOBYTE(v4[6 * v9 + 6 + 6 * v8]) = a3[6 * v9 + 6];
LABEL_9:
    if (++v9 >= *a3) {
      return v4;
    }
  }

  uint64_t v13 = (unsigned __int8 *)sub_18129C928(*a1, v12, 0LL, 0LL);
  uint64_t v14 = v13;
  if (!*(_BYTE *)(v11 + 103))
  {
    if (!a4) {
      goto LABEL_25;
    }
    if (v13)
    {
      uint64_t v15 = (uint64_t)v13;
      while (1)
      {
        int v16 = *(_DWORD *)(v15 + 4);
        if ((v16 & 0x82000) == 0) {
          break;
        }
        if ((v16 & 0x80000) != 0)
        {
          uint64_t v15 = *(void *)(*(void *)(v15 + 32) + 8LL);
          if (!v15) {
            break;
          }
        }

        else
        {
          uint64_t v15 = *(void *)(v15 + 16);
          if (!v15) {
            break;
          }
        }
      }
    }

    else
    {
LABEL_22:
      uint64_t v15 = 0LL;
    }

    if (sub_181323268(v15, &v20))
    {
      *(_BYTE *)uint64_t v15 = 121;
      *(_DWORD *)(v15 + 4) &= 0xCFFFF7FF;
      *(void *)(v15 + 8) = 0LL;
    }

    goto LABEL_25;
  }

  if (v13) {
    sub_181309110((void *)v11, v13);
  }
  return v4;
}

uint64_t sub_1813293EC(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 168)
  {
    int v2 = a2[2];
    if (*(_DWORD *)(a1 + 32) <= v2) {
      a2[2] = v2 + 1;
    }
  }

  return 0LL;
}

uint64_t sub_181329418(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_18132942C(uint64_t result)
{
  return result;
}

uint64_t sub_18132943C(uint64_t **a1, unsigned __int8 *a2)
{
  if ((*((_DWORD *)a2 + 1) & 0x14000) == 0)
  {
    uint64_t v3 = *((void *)a2 + 8);
    if (v3)
    {
      int v4 = *((__int16 *)a2 + 26);
      uint64_t v5 = *a1;
      uint64_t v6 = **a1;
      if (*a2 == 168)
      {
        if (*(_DWORD *)(v3 + 48) > v4
          && *(unsigned __int8 **)(*(void *)(v3 + 40) + 24LL * *((__int16 *)a2 + 26)) == a2)
        {
          __int128 v7 = sub_18129C928(v6, a2, 0LL, 0LL);
          if (v7)
          {
            uint64_t v8 = (unsigned __int8 *)v7;
            *(void *)(*(void *)(v3 + 40) + 24LL * v4) = v7;
LABEL_13:
            sub_18131CDC0(v5, v8);
          }
        }
      }

      else if (*(_DWORD *)(v3 + 32) > v4 {
             && *(unsigned __int8 **)(*(void *)(v3 + 24) + 24LL * *((__int16 *)a2 + 26) + 8) == a2)
      }
      {
        uint64_t v9 = sub_18129C928(v6, a2, 0LL, 0LL);
        if (v9)
        {
          uint64_t v8 = (unsigned __int8 *)v9;
          *(void *)(*(void *)(v3 + 24) + 24LL * v4 + 8) = v9;
          goto LABEL_13;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_18132953C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  int v4 = *(uint64_t **)a1;
  int v5 = *a2;
  if (v3[4])
  {
    if (v5 != 167) {
      return 0LL;
    }
    uint64_t v6 = (unsigned int *)v3[1];
    uint64_t v7 = *v6;
    if ((int)v7 < 1)
    {
      LODWORD(v8) = 0;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = (int *)(v6 + 18);
      while (1)
      {
        int v10 = *v9;
        v9 += 26;
        if (*((_DWORD *)a2 + 11) == v10) {
          break;
        }
        if (v7 == ++v8) {
          return 0LL;
        }
      }
    }

    if ((_DWORD)v8 == (_DWORD)v7) {
      return 0LL;
    }
  }

  if (v5 != 172 || (a2[7] & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = *v3;
  if (!*v3)
  {
LABEL_17:
    uint64_t v12 = *v4;
    if (*(_BYTE *)(*v4 + 103)) {
      return 2LL;
    }
    uint64_t v13 = (int *)v3[2];
    if (v13 && *v13 >= 1)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 2LL;
      while (1)
      {
        int v16 = sub_18131BA10(0LL, *(unsigned __int8 **)&v13[v15], a2, 0xFFFFFFFFLL);
        uint64_t v13 = (int *)v3[2];
        if (!v16) {
          break;
        }
        ++v14;
        v15 += 6LL;
        if (v14 >= *v13)
        {
          uint64_t v12 = *v4;
          goto LABEL_24;
        }
      }

      int v22 = 0;
      if (!v13)
      {
LABEL_37:
        if (*(_BYTE *)(*v4 + 103)) {
          return 2LL;
        }
        return 0LL;
      }

uint64_t sub_181329778(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3 == a2) {
    return 0LL;
  }
  *(void *)(v2 + --*(_DWORD *)(result + 32) = a2;
  sub_181285228(a1, a2);
  *(void *)(v2 + --*(_DWORD *)(result + 32) = v3;
  return 1LL;
}

uint64_t sub_1813297B8(uint64_t a1)
{
  int v1 = *(unsigned int **)(a1 + 32);
  uint64_t v2 = *v1;
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      int v5 = sub_1812A3C7C(*(unsigned __int8 **)&v1[6 * i + 2]);
      uint64_t v6 = a1;
      while (1)
      {
        uint64_t v6 = *(void *)(v6 + 80);
        if (!v6) {
          break;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_181329854(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v7[0] = 0LL;
  v7[3] = 0LL;
  void v7[4] = 0LL;
  v7[5] = a4;
  v7[1] = sub_181329B8C;
  void v7[2] = sub_181323260;
  return sub_181285228(v7, (void *)a2);
}

uint64_t sub_1813298B8(uint64_t result, void *a2, int a3)
{
  if (a2)
  {
    int v4 = a2;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = (int *)v4[4];
      if (v6 && *v6 >= 1)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 2LL;
        do
        {
          *(void *)&v6[v8] = sub_1812BD930(v5, *(void *)&v6[v8]);
          ++v7;
          v8 += 6LL;
        }

        while (v7 < *v6);
      }

      uint64_t v9 = (int *)v4[7];
      if (v9 && *v9 >= 1)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = 2LL;
        do
        {
          *(void *)&v9[v11] = sub_1812BD930(v5, *(void *)&v9[v11]);
          ++v10;
          v11 += 6LL;
        }

        while (v10 < *v9);
      }

      uint64_t v12 = (int *)v4[9];
      if (v12 && *v12 >= 1)
      {
        uint64_t v13 = 0LL;
        uint64_t v14 = 2LL;
        do
        {
          *(void *)&v12[v14] = sub_1812BD930(v5, *(void *)&v12[v14]);
          ++v13;
          v14 += 6LL;
        }

        while (v13 < *v12);
      }

      _BYTE v4[8] = sub_1812BD930(v5, v4[8]);
      uint64_t result = sub_1812BD930(v5, v4[6]);
      v4[6] = result;
      uint64_t v15 = (int *)v4[5];
      int v16 = *v15;
      if (*v15 >= 1)
      {
        int v17 = v15 + 2;
        do
        {
          uint64_t result = sub_1813298B8(v5, *((void *)v17 + 5), 1LL);
          if ((*(_WORD *)((_BYTE *)v17 + 61) & 4) != 0)
          {
            int v19 = (int *)*((void *)v17 + 11);
            if (v19)
            {
              if (*v19 >= 1)
              {
                uint64_t v20 = 0LL;
                uint64_t v21 = 2LL;
                do
                {
                  uint64_t result = sub_1812BD930(v5, *(void *)&v19[v21]);
                  *(void *)&v19[v21] = result;
                  ++v20;
                  v21 += 6LL;
                }

                while (v20 < *v19);
              }
            }
          }

          v17 += 26;
          BOOL v18 = __OFSUB__(v16--, 1);
        }

        while (!((v16 < 0) ^ v18 | (v16 == 0)));
      }

      if (!a3) {
        break;
      }
      int v4 = (void *)v4[10];
    }

    while (v4);
  }

  return result;
}

void *sub_181329A64(void *result, uint64_t a2)
{
  if (*(void *)(a2 + 32))
  {
    v2[0] = 0LL;
    v2[3] = 0LL;
    v2[1] = sub_181329C00;
    v2[2] = sub_181323260;
    v2[4] = 0LL;
    v2[5] = a2;
    *(void *)(a2 + 80) = 0LL;
    return (void *)sub_181285228(v2, result);
  }

  return result;
}

uint64_t sub_181329AB8(uint64_t result, uint64_t a2, int *a3, int a4)
{
  if (*a3 >= 1)
  {
    uint64_t v7 = result;
    int v8 = 0;
    uint64_t v9 = a3 + 2;
    do
    {
      if (v8 != a4)
      {
        uint64_t v10 = (int)v9[16] + 1LL;
        if ((*(_WORD *)((_BYTE *)v9 + 61) & 0x40) == 0 || !*(_DWORD *)(a2 + 4 * v10))
        {
          int v11 = *(_DWORD *)(v7 + 52);
          *(_DWORD *)(v7 + 52) = v11 + 1;
          *(_DWORD *)(a2 + 4 * v10) = v11;
          uint64_t v10 = (int)v9[16] + 1LL;
        }

        v9[16] = *(_DWORD *)(a2 + 4 * v10);
        for (uint64_t i = *((void *)v9 + 5); i; uint64_t i = *(void *)(i + 80))
          uint64_t result = sub_181329AB8(v7, a2, *(void *)(i + 40), 0xFFFFFFFFLL);
      }

      ++v8;
      v9 += 26;
    }

    while (v8 < *a3);
  }

  return result;
}

uint64_t sub_181329B8C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 179 || v2 == 167)
  {
    uint64_t v3 = *(_DWORD **)(a1 + 40);
    int v4 = *((_DWORD *)a2 + 11);
    if (v4 < *v3)
    {
      int v5 = v3[v4 + 1];
      if (v5 >= 1) {
        *((_DWORD *)a2 + 11) = v5;
      }
    }
  }

  if ((a2[4] & 1) != 0)
  {
    uint64_t v6 = *(_DWORD **)(a1 + 40);
    int v7 = *((_DWORD *)a2 + 14);
    if (v7 < *v6)
    {
      int v8 = v6[v7 + 1];
      if (v8 >= 1) {
        *((_DWORD *)a2 + 14) = v8;
      }
    }
  }

  return 0LL;
}

uint64_t sub_181329C00(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 167)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v2 + 64) == *((_DWORD *)a2 + 11))
    {
      uint64_t v3 = *((unsigned int *)a2 + 12);
      if ((v3 & 0x80000000) == 0)
      {
        uint64_t v4 = *((void *)a2 + 9);
        if ((*(_BYTE *)(v4 + 48) & 0x60) != 0 && (*(_WORD *)(*(void *)(v4 + 8) + 16 * v3 + 14) & 0x60) != 0)
        {
          int v5 = *(__int16 *)(v4 + 54);
          if (v5 <= 63) {
            uint64_t v6 = ~(-1LL << v5);
          }
          else {
            uint64_t v6 = -1LL;
          }
        }

        else
        {
          uint64_t v6 = 1LL << v3;
        }

        *(void *)(v2 + 80) |= v6;
      }
    }
  }

  return 0LL;
}

uint64_t sub_181329C8C(int a1, int a2)
{
  if (a1 < a2)
  {
    if (a1 + 49 < a2) {
      return (__int16)a2;
    }
    if (a1 + 31 < a2) {
      return (__int16)(a2 + 1);
    }
    LOWORD(a1) = byte_1813CA370[a2 - a1] + (_WORD)a2;
    return (__int16)a1;
  }

  if (a2 + 49 < a1) {
    return (__int16)a1;
  }
  if (a2 + 31 >= a1) {
    return (__int16)(byte_1813CA370[a1 - a2] + (_WORD)a1);
  }
  else {
    return (__int16)(a1 + 1);
  }
}

uint64_t sub_181329D1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(_DWORD **)(a2 + 72);
  if (v4) {
    LODWORD(v5) = *v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  uint64_t v32 = *a1;
  uint64_t v6 = sub_18131A140(*a1, (int)v5 + 1, 1);
  uint64_t v13 = v6;
  if (v6) {
    BOOL v14 = (int)v5 < 1;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v16 = 0LL;
    int v17 = v4 + 6;
    uint64_t v18 = v6 + 32;
    uint64_t v5 = v5;
    uint64_t v30 = v2;
    int v31 = v3;
    uint64_t v33 = v6;
    while (1)
    {
      uint64_t v21 = *((void *)v17 - 2);
      if ((*(_BYTE *)(v21 + 5) & 2) == 0) {
        break;
      }
      int v19 = (const char **)sub_181289D04((uint64_t)v3, *((unsigned __int8 **)v17 - 2), v7, v8, v9, v10, v11, v12);
LABEL_11:
      *(void *)(v18 + 8 * v16) = v19;
      char v20 = *(_BYTE *)v17;
      v17 += 6;
      *(_BYTE *)(*(void *)(v13 + 24) + v16++) = v20;
      if (v5 == v16) {
        return v13;
      }
    }

    int v22 = (const char **)sub_1812B63B8( (uint64_t)v3,  v2,  *((unsigned __int16 *)v17 + 2) - 1,  v8,  v9,  v10,  v11,  v12);
    int v19 = v22;
    if (v22)
    {
      int v23 = *v22;
      if (!*v22) {
        goto LABEL_22;
      }
    }

    else
    {
      int v19 = *(const char ***)(v32 + 16);
      int v23 = *v19;
      if (!*v19)
      {
LABEL_22:
        *((void *)v17 - 2) = v21;
        goto LABEL_11;
      }
    }

    uint64_t v24 = v5;
    uint64_t v25 = v18;
    size_t v26 = strlen(v23) & 0x3FFFFFFF;
    if (v26)
    {
      uint64_t v27 = sub_1812F2264(*v3, v26 + 81);
      if (v27)
      {
        uint64_t v28 = v27;
        *(_OWORD *)(v27 + 48) = 0u;
        *(_OWORD *)(v27 + 64) = 0u;
        *(_OWORD *)(v27 + 16) = 0u;
        *(_OWORD *)(v27 + --*(_DWORD *)(result + 32) = 0u;
        *(_OWORD *)uint64_t v27 = 0u;
        *(_BYTE *)uint64_t v27 = 113;
        *(_WORD *)(v27 + 52) = -1;
        uint64_t v29 = v27 + 80;
        *(void *)(v27 + 8) = v27 + 80;
        memcpy((void *)(v27 + 80), v23, v26);
        *(_BYTE *)(v29 + v26) = 0;
        uint64_t v2 = v30;
        *(_DWORD *)(v28 + 40) = 1;
        *(void *)(v28 + 16) = v21;
        *(_DWORD *)(v28 + 4) |= 0x2200u;
        uint64_t v21 = v28;
      }

      uint64_t v3 = v31;
    }

    uint64_t v18 = v25;
    uint64_t v5 = v24;
    uint64_t v13 = v33;
    goto LABEL_22;
  }

  return v13;
}

uint64_t sub_181329ED0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((int)a2 >= 1)
  {
    int v8 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v8)
    {
      return sub_18131044C(result, 59LL, a2, a3, 1LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(result + 144) = v8 + 1;
      uint64_t v9 = *(void *)(result + 136) + 40LL * v8;
      *(_DWORD *)uint64_t v9 = 59;
      *(_DWORD *)(v9 + 4) = a2;
      *(_DWORD *)(v9 + 8) = a3;
      *(_DWORD *)(v9 + 12) = 1;
      *(void *)(v9 + 24) = 0LL;
      *(void *)(v9 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v9 + 16) = 0LL;
    }
  }

  return result;
}

uint64_t sub_181329F2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  unsigned int v95 = a8;
  uint64_t v8 = a5;
  uint64_t v9 = a4;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned int *)(v12 + 144);
  int v14 = *(_DWORD *)(a1 + 68);
  uint64_t v15 = (v14 - 1);
  *(_DWORD *)(a1 + 68) = v15;
  if ((_DWORD)a6)
  {
    uint64_t v17 = a6;
    unsigned int v96 = a5;
    if (*(_DWORD *)(v12 + 148) <= (int)v13)
    {
      uint64_t v20 = v13;
      LODWORD(v13) = sub_18131044C(v12, 17LL, a6, 0LL, 0LL, a6, (uint64_t)a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v13 + 1;
      uint64_t v19 = *(void *)(v12 + 136) + 40LL * (int)v13;
      *(_DWORD *)uint64_t v19 = 17;
      *(_DWORD *)(v19 + 4) = a6;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      uint64_t v20 = v13;
    }

    uint64_t v21 = *(unsigned int *)(a3 + 12);
    uint64_t v22 = *(unsigned int *)(a3 + 16);
    if (a7) {
      ++*a7;
    }
    uint64_t v23 = sub_1812B9B68( (uint64_t *)v12,  90LL,  v21,  (v17 + 1),  v22,  (uint64_t)a7,  4294967288LL,  a8)
        + 2;
    int v24 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v24)
    {
      sub_18131044C(v12, 14LL, v23, v15, v23, a6, (uint64_t)a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v24 + 1;
      uint64_t v25 = *(void *)(v12 + 136) + 40LL * v24;
      *(_DWORD *)uint64_t v25 = 14;
      *(_DWORD *)(v25 + 4) = v23;
      *(_DWORD *)(v25 + 8) = v15;
      *(_DWORD *)(v25 + 12) = v23;
      *(void *)(v25 + 24) = 0LL;
      *(void *)(v25 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v25 + 16) = 0LL;
    }

    int v26 = *(_DWORD *)(v12 + 144);
    if (*(_BYTE *)(*(void *)v12 + 103LL)) {
      uint64_t v27 = &byte_18C550680;
    }
    else {
      uint64_t v27 = (char *)(*(void *)(v12 + 136) + 40LL * (int)v13);
    }
    uint64_t v13 = v20;
    uint64_t v9 = a4;
    *((_DWORD *)v27 + 2) = v26;
    uint64_t v28 = *(unsigned int *)(a3 + 12);
    uint64_t v29 = (*(_DWORD *)(a3 + 16) - 1);
    if (*(_DWORD *)(v12 + 148) <= v26)
    {
      sub_18131044C(v12, 80LL, v28, (v17 + 1), v29, a6, (uint64_t)a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v26 + 1;
      uint64_t v30 = *(void *)(v12 + 136) + 40LL * v26;
      *(_DWORD *)uint64_t v30 = 80;
      *(_DWORD *)(v30 + 4) = v28;
      *(_DWORD *)(v30 + 8) = v17 + 1;
      *(_DWORD *)(v30 + 12) = v29;
      *(void *)(v30 + 24) = 0LL;
      *(void *)(v30 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v30 + 16) = 0LL;
    }

    int v31 = *(_DWORD *)(v12 + 144);
    uint64_t v8 = v96;
    if (*(_DWORD *)(v12 + 148) <= v31)
    {
      sub_18131044C(v12, 71LL, 1LL, v17, 0LL, a6, (uint64_t)a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v31 + 1;
      uint64_t v32 = *(void *)(v12 + 136) + 40LL * v31;
      *(void *)uint64_t v32 = 0x100000047LL;
      *(_DWORD *)(v32 + 8) = v17;
      *(void *)(v32 + 12) = 0LL;
      *(void *)(v32 + 28) = 0LL;
      *(void *)(v32 + 20) = 0LL;
      *(_DWORD *)(v32 + 36) = 0;
    }
  }

  if (*(_BYTE *)(*(void *)a1 + 103LL)) {
    return 0LL;
  }
  uint64_t v33 = *(unsigned int *)(a2 + 12);
  if ((int)v33 >= 1)
  {
    int v34 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v34)
    {
      sub_18131044C(v12, 59LL, v33, v15, 1LL, a6, (uint64_t)a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v34 + 1;
      uint64_t v35 = *(void *)(v12 + 136) + 40LL * v34;
      *(_DWORD *)uint64_t v35 = 59;
      *(_DWORD *)(v35 + 4) = v33;
      *(_DWORD *)(v35 + 8) = v15;
      *(_DWORD *)(v35 + 12) = 1;
      *(void *)(v35 + 24) = 0LL;
      *(void *)(v35 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v35 + 16) = 0LL;
    }
  }

  switch(*(_BYTE *)v9)
  {
    case 0xA:
      uint64_t v36 = *(unsigned int *)(v9 + 4);
      uint64_t v37 = *(unsigned int *)(a3 + 12);
      uint64_t v38 = *(unsigned int *)(a3 + 16);
      uint64_t v39 = *(void *)(a1 + 16);
      int v40 = *(_DWORD *)(v39 + 144);
      if (*(_DWORD *)(v39 + 148) <= v40)
      {
        uint64_t v55 = 79LL;
        goto LABEL_79;
      }

      *(_DWORD *)(v39 + 144) = v40 + 1;
      uint64_t v41 = *(void *)(v39 + 136) + 40LL * v40;
      *(_DWORD *)uint64_t v41 = 79;
      *(_DWORD *)(v41 + 4) = v37;
      *(_DWORD *)(v41 + 8) = v36;
      *(_DWORD *)(v41 + 12) = v38;
      *(void *)(v41 + 24) = 0LL;
      *(void *)(v41 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v41 + 16) = 0LL;
      goto LABEL_80;
    case 0xB:
      uint64_t v44 = v9;
      uint64_t v45 = v8;
      if (*(_BYTE *)(a1 + 31))
      {
        unsigned __int8 v46 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v46;
        uint64_t v47 = *(unsigned int *)(a1 + 4LL * v46 + 224);
      }

      else
      {
        uint64_t v47 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v47;
      }

      uint64_t v56 = v44;
      sub_1812B9B68( (uint64_t *)v12,  97LL,  *(unsigned int *)(a3 + 12),  *(unsigned int *)(a3 + 16),  v47,  *(void *)(v44 + 24),  *(unsigned int *)(a3 + 16),  a8);
      uint64_t v57 = *(unsigned int *)(v56 + 4);
      uint64_t v58 = *(unsigned int *)(a3 + 12);
      a6 = *(unsigned int *)(a3 + 16);
      int v59 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v59)
      {
        sub_181310690(v12, 138LL, v57, v47, v58, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v59 + 1;
        uint64_t v60 = *(void *)(v12 + 136) + 40LL * v59;
        *(_DWORD *)uint64_t v60 = 64906;
        *(_DWORD *)(v60 + 4) = v57;
        *(_DWORD *)(v60 + 8) = v47;
        *(_DWORD *)(v60 + 12) = v58;
        *(_DWORD *)(v60 + 16) = a6;
        *(void *)(v60 + 24) = 0LL;
        *(void *)(v60 + --*(_DWORD *)(result + 32) = 0LL;
      }

      uint64_t v8 = v45;
      if ((_DWORD)v47)
      {
        uint64_t v61 = *(unsigned __int8 *)(a1 + 31);
        if (v61 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v61 + 1;
          *(_DWORD *)(a1 + 4 * v61 + 224) = v47;
        }
      }

      goto LABEL_80;
    case 0xC:
      char v48 = *(_BYTE *)(a1 + 31);
      if (v48)
      {
        *(_BYTE *)(a1 + 31) = v48 - 1;
        uint64_t v49 = *(unsigned int *)(a1 + 4LL * (v48 - 1) + 224);
        if (v48 != 1)
        {
          unsigned __int8 v50 = v48 - 2;
          *(_BYTE *)(a1 + 31) = v50;
          uint64_t v51 = *(unsigned int *)(a1 + 4LL * v50 + 224);
          goto LABEL_50;
        }
      }

      else
      {
        uint64_t v49 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v49;
      }

      uint64_t v51 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v51;
LABEL_50:
      uint64_t v62 = *(unsigned int *)(a3 + 12);
      uint64_t v63 = *(unsigned int *)(a3 + 16);
      int v64 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v64)
      {
        sub_18131044C(v12, 97LL, v62, v63, v49, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v64 + 1;
        uint64_t v65 = *(void *)(v12 + 136) + 40LL * v64;
        *(_DWORD *)uint64_t v65 = 97;
        *(_DWORD *)(v65 + 4) = v62;
        *(_DWORD *)(v65 + 8) = v63;
        *(_DWORD *)(v65 + 12) = v49;
        *(void *)(v65 + 24) = 0LL;
        *(void *)(v65 + --*(_DWORD *)(result + 32) = 0LL;
        *(void *)(v65 + 16) = 0LL;
      }

      uint64_t v66 = *(unsigned int *)(v9 + 4);
      int v67 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v67)
      {
        sub_18131044C(v12, 127LL, v66, v51, 0LL, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v67 + 1;
        uint64_t v68 = *(void *)(v12 + 136) + 40LL * v67;
        *(_DWORD *)uint64_t v68 = 127;
        *(_DWORD *)(v68 + 4) = v66;
        *(_DWORD *)(v68 + 8) = v51;
        *(void *)(v68 + 12) = 0LL;
        *(void *)(v68 + 28) = 0LL;
        *(void *)(v68 + 20) = 0LL;
        *(_DWORD *)(v68 + 36) = 0;
      }

      uint64_t v69 = *(unsigned int *)(v9 + 4);
      int v70 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v70)
      {
        sub_18131044C(v12, 128LL, v69, v49, v51, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v70 + 1;
        uint64_t v71 = *(void *)(v12 + 136) + 40LL * v70;
        *(_DWORD *)uint64_t v71 = 128;
        *(_DWORD *)(v71 + 4) = v69;
        *(_DWORD *)(v71 + 8) = v49;
        *(_DWORD *)(v71 + 12) = v51;
        *(void *)(v71 + 24) = 0LL;
        *(void *)(v71 + --*(_DWORD *)(result + 32) = 0LL;
        *(void *)(v71 + 16) = 0LL;
      }

      int v72 = *(_DWORD *)(v12 + 144);
      BOOL v73 = __OFSUB__(v72, 1);
      int v74 = v72 - 1;
      if (v74 < 0 == v73) {
        *(_WORD *)(*(void *)(v12 + 136) + 40LL * v74 + 2) = 8;
      }
      if ((_DWORD)v51)
      {
        uint64_t v75 = *(unsigned __int8 *)(a1 + 31);
        if (v75 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v75 + 1;
          *(_DWORD *)(a1 + 4 * v75 + 224) = v51;
        }
      }

      if ((_DWORD)v49)
      {
        uint64_t v76 = *(unsigned __int8 *)(a1 + 31);
        if (v76 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v76 + 1;
          *(_DWORD *)(a1 + 4 * v76 + 224) = v49;
        }
      }

LABEL_80:
      uint64_t v87 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v87)
      {
        int v88 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v88)
        {
          sub_18131044C(v12, 61LL, v87, v95, 0LL, a6, (uint64_t)a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v88 + 1;
          uint64_t v89 = *(void *)(v12 + 136) + 40LL * v88;
          *(_DWORD *)uint64_t v89 = 61;
          *(_DWORD *)(v89 + 4) = v87;
          *(_DWORD *)(v89 + 8) = v95;
          *(void *)(v89 + 12) = 0LL;
          *(void *)(v89 + 28) = 0LL;
          *(void *)(v89 + 20) = 0LL;
          *(_DWORD *)(v89 + 36) = 0;
        }
      }

      uint64_t v90 = *(void *)(v12 + 24);
      int v91 = -v14;
      if (*(_DWORD *)(v90 + 68) + *(_DWORD *)(v90 + 72) < 0) {
        sub_18131E420(v90, v12, v91);
      }
      else {
        *(_DWORD *)(*(void *)(v90 + 80) + 4LL * v91) = *(_DWORD *)(v12 + 144);
      }
      int v92 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v92)
      {
        sub_18131044C(v12, 67LL, v8, 0LL, 0LL, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v92 + 1;
        uint64_t v93 = *(void *)(v12 + 136) + 40LL * v92;
        *(_DWORD *)uint64_t v93 = 67;
        *(_DWORD *)(v93 + 4) = v8;
        *(_OWORD *)(v93 + 8) = 0u;
        *(_OWORD *)(v93 + 24) = 0u;
      }

      return v13;
    case 0xD:
      uint64_t v52 = *(unsigned int *)(v9 + 12);
      if (!(_DWORD)v52)
      {
        int v53 = *(_DWORD *)(a3 + 16);
        if (v53 == 1)
        {
          if (*(_BYTE *)(a1 + 31))
          {
            unsigned __int8 v54 = *(_BYTE *)(a1 + 31) - 1;
            *(_BYTE *)(a1 + 31) = v54;
            uint64_t v52 = *(unsigned int *)(a1 + 4LL * v54 + 224);
          }

          else
          {
            uint64_t v52 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v52;
          }
        }

        else
        {
          int v77 = *(_DWORD *)(a1 + 40);
          BOOL v73 = __OFSUB__(v77, v53);
          int v78 = v77 - v53;
          if (v78 < 0 != v73)
          {
            int v79 = *(_DWORD *)(a1 + 56);
            uint64_t v52 = (v79 + 1);
            *(_DWORD *)(a1 + 56) = v79 + v53;
          }

          else
          {
            uint64_t v52 = *(unsigned int *)(a1 + 44);
            *(_DWORD *)(a1 + 40) = v78;
            *(_DWORD *)(a1 + 44) = v52 + v53;
          }
        }

        *(_DWORD *)(v9 + 12) = v52;
        *(_DWORD *)(v9 + 16) = v53;
      }

      uint64_t v80 = *(unsigned int *)(a3 + 12);
      uint64_t v81 = *(unsigned int *)(a3 + 16);
      uint64_t v82 = *(void *)(a1 + 16);
      int v83 = *(_DWORD *)(v82 + 144);
      if (*(_DWORD *)(v82 + 148) <= v83)
      {
        sub_18131044C(v82, 79LL, v80, v52, v81, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v82 + 144) = v83 + 1;
        uint64_t v84 = *(void *)(v82 + 136) + 40LL * v83;
        *(_DWORD *)uint64_t v84 = 79;
        *(_DWORD *)(v84 + 4) = v80;
        *(_DWORD *)(v84 + 8) = v52;
        *(_DWORD *)(v84 + 12) = v81;
        *(void *)(v84 + 24) = 0LL;
        *(void *)(v84 + --*(_DWORD *)(result + 32) = 0LL;
        *(void *)(v84 + 16) = 0LL;
      }

      uint64_t v37 = *(unsigned int *)(v9 + 4);
      int v85 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v85)
      {
        uint64_t v39 = v12;
        uint64_t v55 = 12LL;
        uint64_t v36 = 0LL;
        goto LABEL_78;
      }

      *(_DWORD *)(v12 + 144) = v85 + 1;
      uint64_t v86 = *(void *)(v12 + 136) + 40LL * v85;
      *(_DWORD *)uint64_t v86 = 12;
      *(_DWORD *)(v86 + 4) = v37;
      *(_OWORD *)(v86 + 8) = 0u;
      *(_OWORD *)(v86 + 24) = 0u;
      goto LABEL_80;
    default:
      uint64_t v37 = *(unsigned int *)(a3 + 12);
      uint64_t v36 = *(unsigned int *)(a3 + 16);
      int v42 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v42)
      {
        uint64_t v39 = v12;
        uint64_t v55 = 84LL;
LABEL_78:
        uint64_t v38 = 0LL;
LABEL_79:
        sub_18131044C(v39, v55, v37, v36, v38, a6, (uint64_t)a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v42 + 1;
        uint64_t v43 = *(void *)(v12 + 136) + 40LL * v42;
        *(_DWORD *)uint64_t v43 = 84;
        *(_DWORD *)(v43 + 4) = v37;
        *(_DWORD *)(v43 + 8) = v36;
        *(void *)(v43 + 12) = 0LL;
        *(void *)(v43 + 28) = 0LL;
        *(void *)(v43 + 20) = 0LL;
        *(_DWORD *)(v43 + 36) = 0;
      }

      goto LABEL_80;
  }

  int v59 = 1;
LABEL_81:
  int v116 = v55;
  uint64_t v110 = v56;
  if (v50)
  {
    uint64_t v60 = *(unsigned __int16 *)(*(void *)(v50 + 8) + 2 * v54);
    uint64_t v61 = *(void *)(v50 + 24);
    uint64_t v62 = (__int16)v60;
    uint64_t v108 = *(_BYTE *)(*(void *)(v50 + 56) + v54) & 1;
    if (v53)
    {
      if ((__int16)v60 < 0)
      {
        int v67 = (__int16)v60 == -2;
      }

      else
      {
        if (v54 < v57)
        {
          uint64_t v63 = 1;
LABEL_100:
          uint64_t v114 = v63;
          goto LABEL_101;
        }

        int v67 = (*(_BYTE *)(*(void *)(v61 + 8) + 16LL * (__int16)v60 + 8) & 0xF) == 0;
      }

      uint64_t v63 = !v67;
      goto LABEL_100;
    }

    uint64_t v114 = 0;
  }

  else
  {
    uint64_t v62 = -1;
    if (v53)
    {
      uint64_t v108 = 0;
      uint64_t v63 = 1;
      goto LABEL_100;
    }

    uint64_t v108 = 0;
    uint64_t v114 = 0;
  }

                  v27 |= 0x42u;
                  *((_BYTE *)a1 + 53) = 1;
                  break;
              }

              continue;
            }

            if ((char)v28 >= 32)
            {
LABEL_58:
              uint64_t v12 = (v12 + 1);
              goto LABEL_59;
            }

            a1[17] = v12 - 1;
            return 0xFFFFFFFFLL;
          }

          break;
        }

        int v31 = v12 - v2;
        uint64_t v32 = *a1;
        if (v32 < a1[1])
        {
          uint64_t v33 = *((void *)a1 + 1) + 16 * v32;
          *(_BYTE *)uint64_t v33 = 6;
          *(_BYTE *)(v33 + 1) = v27;
          *(_DWORD *)(v33 + 4) = v31;
          *(void *)(v33 + 8) = v5;
          goto LABEL_186;
        }

        unsigned __int8 v50 = (v27 << 8) | 6;
        goto LABEL_188;
      case 0x2B:
        *((_BYTE *)a1 + 53) = 1;
        uint64_t v6 = *v5;
        uint64_t v8 = 64;
        goto LABEL_8;
      case 0x2C:
        a1[17] = v2;
        return 4294967292LL;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        uint64_t v8 = 0;
LABEL_8:
        uint64_t v9 = (v2 + 1);
        uint64_t v10 = v4 + v9;
        uint64_t v11 = *(unsigned __int8 *)(v4 + v9);
        if (v6 == 48)
        {
          if ((v11 | 0x20) != 0x78
            || (LODWORD(v12) = v2 + 2, (byte_1813C6558[*(unsigned __int8 *)(v4 + (v2 + 2))] & 8) == 0))
          {
LABEL_52:
            a1[17] = v9;
            return 0xFFFFFFFFLL;
          }

          *((_BYTE *)a1 + 53) = 1;
          do
            uint64_t v12 = (v12 + 1);
          while ((byte_1813C6558[*(unsigned __int8 *)(v4 + v12)] & 8) != 0);
LABEL_117:
          uint64_t v8 = 64;
          LOWORD(v18) = 4;
          goto LABEL_184;
        }

        if ((unint64_t)(v11 - 58) <= 0xFFFFFFFFFFFFFFF5LL)
        {
          if ((_DWORD)v11 == 46)
          {
            uint64_t v18 = 4;
LABEL_173:
            *((_BYTE *)a1 + 53) = 1;
            uint64_t v8 = 64;
            goto LABEL_28;
          }

          if ((_DWORD)v11 != 105 && (_DWORD)v11 != 73) {
            goto LABEL_215;
          }
          uint64_t v13 = *(unsigned __int8 *)(v10 + 1);
          if (!*(_BYTE *)(v10 + 1))
          {
            int v78 = 0;
            uint64_t v16 = "nf";
            goto LABEL_197;
          }

          if ((v13 & 0xFFFFFFDF) == 0x4E)
          {
            int v14 = *(unsigned __int8 *)(v10 + 2);
            if (!*(_BYTE *)(v10 + 2))
            {
              int v78 = 0;
              uint64_t v16 = "f";
LABEL_197:
LABEL_215:
              a1[17] = v2;
              return 0xFFFFFFFFLL;
            }

            if ((v14 & 0xFFFFFFDF) == 0x46)
            {
LABEL_198:
              *((_BYTE *)a1 + 53) = 1;
              if (*v5 == 45)
              {
                int v79 = "-9.0e999";
                uint64_t v80 = a1;
                uint64_t v81 = 8;
              }

              else
              {
                int v79 = "9.0e999";
                uint64_t v80 = a1;
                uint64_t v81 = 7;
              }

              sub_18135A0F0(v80, 5, v81, (uint64_t)v79);
              else {
                uint64_t v82 = 9;
              }
              return (v82 + v2);
            }

            uint64_t v15 = &byte_1813C6343[v14];
            uint64_t v16 = "f";
          }

          else
          {
            uint64_t v15 = &byte_1813C6343[v13];
            uint64_t v16 = "nf";
          }

          int v78 = *v15;
          goto LABEL_197;
        }

        if ((_DWORD)v11 == 48)
        {
          uint64_t v17 = *(unsigned __int8 *)(v4 + (v2 + 2));
          LODWORD(v12) = v2 + 3;
          *((_BYTE *)a1 + 53) = 1;
          do
            uint64_t v12 = (v12 + 1);
          while ((byte_1813C6558[*(unsigned __int8 *)(v4 + v12)] & 8) != 0);
          goto LABEL_117;
        }

  int v34 = v110;
  if (v110)
  {
    sub_181395B94((uint64_t)v11, v110);
    if (*v11)
    {
      int v53 = v9;
LABEL_87:
      unsigned __int8 v54 = *(void *)(v34 + 24);
      sub_18138D5A4(v34);
      uint64_t v55 = *(void **)(v54 + 64);
      if (v55)
      {
        *(void *)(v54 + 64) = 0LL;
        uint64_t v56 = (sqlite3_stmt *)v55[3];
        uint64_t v57 = (void *)v55[4];
        uint64_t v58 = v57[3];
        if (v58) {
          xmmword_18C465400(v58);
        }
        sub_1812F20DC(v57, v55);
        int v59 = v57[3];
        if (v59) {
          xmmword_18C465410(v59);
        }
        sqlite3_finalize(v56);
      }

uint64_t sub_18132A740(uint64_t result, unsigned __int8 *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    while ((*(_DWORD *)(v3 + 28) & *((_DWORD *)v2 + 1)) == 0)
    {
      int v4 = *v2;
      if (v4 != 44)
      {
        if (v4 == 53)
        {
          uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 2);
          uint64_t v5 = (unsigned __int8 *)*((void *)v2 + 3);
          if (*v5 == 167)
          {
            __int16 v10 = 1;
            uint64_t v8 = sub_18129C78C;
            uint64_t v9 = sub_18131C570;
            int v11 = 0;
          }

          if (*v6 == 167)
          {
            __int16 v10 = 1;
            uint64_t v8 = sub_18129C78C;
            uint64_t v9 = sub_18131C570;
            int v11 = 0;
            uint64_t result = sub_18131C57C((uint64_t)&v7, (uint64_t)v5);
            if (v10) {
              return sub_18132A8F4(v3, (uint64_t)v6, v5, (uint64_t)v2);
            }
          }
        }

        return result;
      }

      uint64_t result = sub_18132A740(v3, *((void *)v2 + 3));
      uint64_t v2 = (unsigned __int8 *)*((void *)v2 + 2);
      if (!v2) {
        return result;
      }
    }
  }

  return result;
}

uint64_t sub_18132A858(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v3 + 24))
  {
    int v4 = *(unsigned __int8 *)a2;
    if ((v4 - 53) < 5 || v4 == 45)
    {
      sub_18132AA8C(*(void *)(a1 + 40), a2[2], 0);
      if (**(_BYTE **)(v3 + 8)) {
        return 1LL;
      }
    }
  }

  return sub_18132AA8C(v3, (unsigned __int8 *)a2, *(_DWORD *)(v3 + 24));
}

uint64_t sub_18132A8F4(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if ((*(_BYTE *)(a2 + 4) & 0x20) != 0) {
    return result;
  }
  uint64_t v7 = (uint64_t **)result;
  uint64_t result = sub_1812A3C7C(a3);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1812DDD08((uint64_t)*v7, a4, v8, v9, v10, v11, v12, v13);
  if (result)
  {
  }

  int v14 = *((_DWORD *)v7 + 4);
  if (v14 < 1)
  {
LABEL_12:
    int v17 = v14 + 1;
    *((_DWORD *)v7 + 4) = v14 + 1;
    uint64_t v18 = **v7;
    uint64_t v19 = v7[4];
    int v20 = 2 * v17;
    unint64_t v21 = 8LL * v20;
    if (v19)
    {
      if (*(void *)(v18 + 512) > (unint64_t)v19)
      {
        if (*(void *)(v18 + 496) <= (unint64_t)v19)
        {
          if (v21 < 0x81)
          {
LABEL_19:
            uint64_t result = (uint64_t)v7[4];
LABEL_24:
            void v7[4] = (uint64_t *)result;
            goto LABEL_25;
          }
        }

        else if (*(void *)(v18 + 504) <= (unint64_t)v19 && v21 <= *(unsigned __int16 *)(v18 + 438))
        {
          goto LABEL_19;
        }
      }

      uint64_t result = sub_1812F2310(**v7, v7[4], v21);
      if (result) {
        goto LABEL_24;
      }
      uint64_t result = (uint64_t)sub_1812F20DC((void *)v18, v19);
      void v7[4] = 0LL;
    }

    else
    {
      uint64_t result = sub_1812F2264(**v7, 8LL * v20);
      void v7[4] = (uint64_t *)result;
      if (result)
      {
LABEL_25:
        uint64_t v22 = *((int *)v7 + 4);
        *(void *)(result + 16 * v22 - 16) = a2;
        v7[4][2 * (int)v22 - 1] = (uint64_t)a3;
        return result;
      }
    }

    *((_DWORD *)v7 + 4) = 0;
    return result;
  }

  uint64_t v15 = v7[4];
  uint64_t v16 = *((unsigned int *)v7 + 4);
  while (*(_DWORD *)(*v15 + 44) != *(_DWORD *)(a2 + 44) || *(_DWORD *)(*v15 + 48) != *(_DWORD *)(a2 + 48))
  {
    v15 += 2;
    if (!--v16) {
      goto LABEL_12;
    }
  }

  return result;
}

uint64_t sub_18132AA8C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (**(_BYTE **)(a1 + 8)) {
    return 1LL;
  }
  if (*a2 == 167)
  {
    int v6 = *((_DWORD *)a2 + 1);
    if (((*(_DWORD *)(a1 + 28) | 0x20) & v6) == 0)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 16);
      if ((int)v7 >= 1)
      {
        for (uint64_t i = (unsigned __int8 **)(*(void *)(a1 + 32) + 8LL); ; i += 2)
        {
          uint64_t v9 = (uint64_t)*(i - 1);
          if ((unsigned __int8 *)v9 != a2
            && *(_DWORD *)(v9 + 44) == *((_DWORD *)a2 + 11)
            && *(_DWORD *)(v9 + 48) == *((_DWORD *)a2 + 12))
          {
            break;
          }

          if (!--v7) {
            return 1LL;
          }
        }

        if (!a3 || sub_1812A3C7C((unsigned __int8 *)v9) != 65)
        {
          ++*(_DWORD *)(a1 + 20);
          *((_DWORD *)a2 + 1) = v6 & 0xFF7FFFDF | 0x20;
          if (*i) {
            *((void *)a2 + 2) = sub_18129C928(**(void **)a1, *i, 0LL, 0LL);
          }
          else {
            *((void *)a2 + 2) = 0LL;
          }
        }
      }

      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_18132AB94(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(_BYTE *)(a2 + 104LL * a3 + 68) & 0x40) != 0) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  if ((*(_BYTE *)(a2 + 104LL * a3 + 68) & 8) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 104LL * a3 + 72)) {
      return 0LL;
    }
  }

  else if ((v3 & 1) != 0)
  {
    return 0LL;
  }

  if ((v3 & 3) == 0 || (*(_BYTE *)(a2 + 68) & 0x40) == 0 || a3 < 1) {
    goto LABEL_15;
  }
  uint64_t v4 = a3;
  uint64_t v5 = (_DWORD *)(a2 + 72);
  while (*(_DWORD *)(a1 + 56) != *v5)
  {
    v5 += 26;
    if (!--v4) {
      goto LABEL_15;
    }
  }

  if ((*(_BYTE *)(v5 - 1) & 0x40) == 0)
  {
LABEL_15:
    int v6 = *(_DWORD *)(a2 + 104LL * a3 + 72);
    unsigned __int16 v9 = 3;
    v8[1] = sub_18129C78C;
    void v8[2] = sub_18131C570;
    int v10 = v6;
    sub_18131C57C((uint64_t)v8, a1);
    return v9;
  }

  return 0LL;
}

uint64_t sub_18132AC7C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(int **)(a1 + 40);
  if (*v4 < 1)
  {
LABEL_9:
    if ((a2[5] & 0x10) != 0)
    {
      *(_WORD *)(a1 + 36) = 0;
      return 2LL;
    }

    else
    {
      return sub_18129C78C(a1, (uint64_t)a2);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 2LL;
    while (1)
    {
      uint64_t v7 = *(unsigned __int8 **)&v4[v6];
      if (sub_18131BA10(0LL, a2, v7, 0xFFFFFFFFLL) <= 1)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = sub_181289D04(*(void *)a1, v7, v8, v9, v10, v11, v12, v13);
        if (!v15)
        {
          uint64_t v15 = *(void *)(*(void *)v14 + 16LL);
          if (!v15) {
            return 1LL;
          }
        }
      }

      ++v5;
      v6 += 6LL;
      if (v5 >= *v4) {
        goto LABEL_9;
      }
    }
  }

uint64_t sub_18132AD70(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    while (1)
    {
      uint64_t v5 = (unsigned __int8 *)a2;
      while (1)
      {
        int v6 = *((_DWORD *)v5 + 1);
        if ((v6 & 0x82000) == 0) {
          break;
        }
        if ((v6 & 0x80000) != 0)
        {
          uint64_t v5 = *(unsigned __int8 **)(*((void *)v5 + 4) + 8LL);
          if (!v5) {
            goto LABEL_10;
          }
        }

        else
        {
          uint64_t v5 = (unsigned __int8 *)*((void *)v5 + 2);
          if (!v5) {
            goto LABEL_10;
          }
        }
      }

      *(_BYTE *)(v4 + 16) = a3;
      if (*v5 != (_DWORD)a3) {
        return sub_1812A2264(v4, a2, 0);
      }
      uint64_t result = sub_18132AD70(v4, *((void *)v5 + 2), a3);
      a2 = *((void *)v5 + 3);
      if (!a2) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    *(_BYTE *)(v4 + 16) = a3;
  }

  return result;
}

unsigned __int8 *sub_18132AE20(unsigned __int8 *result, uint64_t a2)
{
  if (!*(void *)(a2 + 56) && (*(_BYTE *)(a2 + 4) & 9) == 0)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (*(_DWORD *)v3 == 1 && *(_BYTE *)(*(void *)(v3 + 40) + 63LL) == 1)
    {
      uint64_t v4 = (uint64_t)result;
      uint64_t v5 = *(unsigned int **)(a2 + 72);
      int v6 = *(_DWORD *)(v3 + 72);
      uint64_t v7 = *((unsigned int *)result + 5);
      if ((int)v7 < 1)
      {
LABEL_12:
        if (v5 && (uint64_t v11 = *v5, (int)v11 >= 1))
        {
          uint64_t v12 = v5 + 6;
          while (1)
          {
            uint64_t v13 = (unsigned __int8 *)*((void *)v12 - 2);
            if (*v13 != 167 || *((_DWORD *)v13 + 11) != v6 || (*v12 & 2) != 0) {
              break;
            }
            v12 += 24;
            if (!--v11) {
              goto LABEL_19;
            }
          }
        }

        else
        {
LABEL_19:
          uint64_t result = sub_1813335A4((uint64_t)result, *(_DWORD *)(a2 + 8), *(void *)(*(void *)(a2 + 96) + 16LL), v6, 73);
          int v14 = *(_DWORD *)(a2 + 12);
          if (v14 >= 1) {
            return sub_1813335A4(v4, v14, *(void *)(*(void *)(a2 + 96) + 24LL), v6, 74);
          }
        }
      }

      else
      {
        uint64_t v8 = *((void *)result + 4) + 18LL;
        uint64_t v9 = (__int16 *)v8;
        while (1)
        {
          __int16 v10 = *v9;
          v9 += 28;
          if ((v10 & 4) == 0 && !*(_BYTE *)(v8 + 4) && *(_DWORD *)(v8 + 10) != v6) {
            break;
          }
          uint64_t v8 = (uint64_t)v9;
          if (!--v7) {
            goto LABEL_12;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_18132AF60(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*(_DWORD *)a2 != 1) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *a4;
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      uint64_t v9 = *(unsigned __int8 **)&a4[6 * i + 2];
      if (v9)
      {
        while (1)
        {
          int v10 = *((_DWORD *)v9 + 1);
          if ((v10 & 0x82000) == 0) {
            break;
          }
          if ((v10 & 0x80000) != 0)
          {
            uint64_t v9 = *(unsigned __int8 **)(*((void *)v9 + 4) + 8LL);
            if (!v9) {
              goto LABEL_4;
            }
          }

          else
          {
            uint64_t v9 = (unsigned __int8 *)*((void *)v9 + 2);
            if (!v9) {
              goto LABEL_4;
            }
          }
        }

        int v11 = *v9;
        if ((v11 == 169 || v11 == 167) && *((_DWORD *)v9 + 11) == v6 && (*((_DWORD *)v9 + 12) & 0x80000000) != 0) {
          return 1LL;
        }
      }

void *sub_18132B214(uint64_t a1, int a2)
{
  int v2 = 0;
  uint64_t v3 = *(void ***)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v4 == 2) {
    unsigned int v5 = 5;
  }
  else {
    unsigned int v5 = 10;
  }
  unsigned int v6 = v4 - 1;
  else {
    uint64_t v7 = v5;
  }
  if (a2)
  {
    uint64_t v8 = *(int **)(a1 + 16);
    if (v8) {
      int v2 = *v8;
    }
  }

  int v9 = 2 * v7;
  uint64_t v10 = v7;
  uint64_t result = (void *)sub_1812F2264((uint64_t)*v3, 2 * v2 + 2 * (int)v7 * (8 * (int)v4 + 32));
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  uint64_t v19 = 4LL * v10;
  uint64_t v20 = (uint64_t)&result[v19];
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  int v21 = (char *)&result[v19 + v19];
  unsigned int v22 = v9 + 1;
  uint64_t v23 = 3LL;
  uint64_t v24 = v10;
  do
  {
    v18[v23] = v21;
    --v22;
    v21 += 8 * v4;
    v23 += 4LL;
  }

  while (v22 > 1);
  int v118 = v10;
  if (v2)
  {
    uint64_t v112 = v21;
    bzero(v21, 2LL * v2);
    uint64_t v24 = v10;
    int v25 = *((__int16 *)v3 + 108);
    if (v25 >= 48) {
      LOWORD(v25) = 48;
    }
    if ((_DWORD)v4) {
      char v26 = -1;
    }
    else {
      char v26 = v2;
    }
    BYTE6(v18[4 * v10 + 2]) = v26;
  }

  else
  {
    uint64_t v112 = 0LL;
    int v25 = *((__int16 *)v3 + 108);
    if (v25 >= 48) {
      LOWORD(v25) = 48;
    }
  }

  uint64_t v27 = a1;
  LOWORD(v18[4 * v24 + 2]) = v25;
  if (!(_DWORD)v4)
  {
LABEL_171:
    if ((*(_WORD *)(v27 + 60) & 0x180) == 0x100)
    {
      if (a2)
      {
        if (!*(_BYTE *)(v27 + 67))
        {
          int v93 = sub_181337B64( (uint64_t *)v27,  *(_WORD **)(v27 + 24),  v20,  128LL,  (unsigned __int16)(v4 - 1),  *(void *)(*(void *)(v20 + 24) + 8 * (v4 - 1)),  v123,  v17);
          uint64_t v27 = a1;
          if (**(_DWORD **)(a1 + 24) == v93) {
            *(_BYTE *)(a1 + 67) = 2;
          }
        }
      }
    }

    char v94 = *(_BYTE *)(v27 + 68);
    *(_BYTE *)(v27 + 68) = v94 & 0xFB;
    unsigned int v95 = *(_WORD **)(v27 + 16);
    if (v95)
    {
      int v96 = *(char *)(v20 + 22);
      *(_BYTE *)(v27 + 65) = *(_BYTE *)(v20 + 22);
      __int16 v97 = *(_WORD *)(v27 + 60);
      if ((v97 & 0x80) != 0)
      {
        if (*(_DWORD *)v95 == v96) {
          *(_BYTE *)(v27 + 67) = 2;
        }
        int v98 = *(int **)(*(void *)(v27 + 32) + 72LL);
        if (v98)
        {
          int v99 = *v98;
          if (v99 < v96) {
            *(_BYTE *)(v27 + 65) = v99;
          }
        }
      }

      else
      {
        *(void *)(v27 + 96) = *(void *)(v20 + 8);
        if (v96 <= 0)
        {
          *(_BYTE *)(v27 + 65) = 0;
          if ((_DWORD)v4)
          {
            uint64_t v100 = *(void *)(*(void *)(v20 + 24) + 8LL * v6);
            if ((*(_DWORD *)(v100 + 48) & 0x1000) == 0 && (*(_DWORD *)(v100 + 48) & 0x104) != 0x104)
            {
              v123[0] = 0LL;
              int v101 = sub_181337B64((uint64_t *)v27, v95, v20, 2048LL, (unsigned __int16)v6, v100, v123, v17);
              uint64_t v27 = a1;
              unsigned int v95 = *(_WORD **)(a1 + 16);
              if (*(_DWORD *)v95 == v101)
              {
                *(_BYTE *)(a1 + 68) |= 4u;
                *(void *)(a1 + 96) = v123[0];
              }

              __int16 v97 = *(_WORD *)(a1 + 60);
            }
          }
        }

        else if (v96 == 1 && (v97 & 3) != 0 && (_DWORD)v4)
        {
          *(_BYTE *)(v27 + 68) = v94 | 4;
        }
      }

      if ((v97 & 0x200) != 0 && (_DWORD)v4 && *(_DWORD *)v95 == *(char *)(v27 + 65))
      {
        v123[0] = 0LL;
        int v102 = sub_181337B64( (uint64_t *)v27,  v95,  v20,  0LL,  (unsigned __int16)v6,  *(void *)(*(void *)(v20 + 24) + 8LL * v6),  v123,  v17);
        uint64_t v27 = a1;
        if (**(_DWORD **)(a1 + 16) == v102)
        {
          *(_BYTE *)(a1 + 68) |= 8u;
          *(void *)(a1 + 96) = v123[0];
        }
      }
    }

    *(_WORD *)(v27 + 70) = *(_WORD *)(v20 + 16);
    return sub_1812F20DC(*v3, v18);
  }

  int v117 = v2;
  uint64_t v106 = (uint64_t)v3;
  uint64_t v107 = v4;
  unsigned int v104 = v4 - 1;
  uint64_t v122 = 0LL;
  unsigned __int16 v111 = 0;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  else {
    uint64_t v31 = v24;
  }
  uint64_t v32 = 1LL;
  uint64_t v105 = v18;
  uint64_t v113 = v4;
  do
  {
    uint64_t v34 = v18;
    uint64_t v108 = (void *)v20;
    if ((int)v32 >= 1)
    {
      int v35 = 0;
      uint64_t v33 = 0LL;
      uint64_t v109 = (__int16 *)v18 + 26;
      uint64_t v36 = v20;
      uint64_t v120 = v18;
      while (1)
      {
        int v121 = v35;
        uint64_t v37 = *(void *)(v27 + 80);
        if (v37) {
          break;
        }
LABEL_32:
        int v35 = v121 + 1;
        v36 += 32LL;
        if (v121 + 1 == (_DWORD)v32) {
          goto LABEL_29;
        }
      }

      while (1)
      {
        uint64_t v38 = *(void *)v36;
        if ((*(void *)v37 & ~*(void *)v36) != 0LL) {
          goto LABEL_36;
        }
        uint64_t v39 = *(void *)(v37 + 8);
        if ((v39 & v38) != 0) {
          goto LABEL_36;
        }
        uint64_t v13 = *(__int16 *)(v36 + 16);
        int v40 = *(__int16 *)(v37 + 18);
        uint64_t v41 = *(__int16 *)(v37 + 18);
        int v42 = (__int16)(*(_WORD *)(v36 + 16) + *(_WORD *)(v37 + 20));
        if (v40 >= v42)
        {
          if (v42 + 49 >= v40)
          {
            if (v42 + 31 >= v40) {
              LOWORD(v40) = v40 + byte_1813CA370[v41 - (__int16)(*(_WORD *)(v36 + 16) + *(_WORD *)(v37 + 20))];
            }
            else {
              LOWORD(v40) = v40 + 1;
            }
          }
        }

        else if (v40 + 49 >= v42)
        {
          LOWORD(v40) = v40 + 31 >= v42
                      ? *(_WORD *)(v36 + 16)
                      + *(_WORD *)(v37 + 20)
                      + byte_1813CA370[(__int16)(*(_WORD *)(v36 + 16) + *(_WORD *)(v37 + 20)) - v41]
                      : v42 + 1;
        }

        else
        {
          LOWORD(v40) = *(_WORD *)(v36 + 16) + *(_WORD *)(v37 + 20);
        }

        int v43 = *(__int16 *)(v36 + 20);
        uint64_t v44 = *(__int16 *)(v36 + 20);
        if ((__int16)v40 >= v43)
        {
          else {
            LOWORD(v43) = v40;
          }
        }

        else if ((__int16)v40 + 49 >= v43)
        {
          else {
            LOWORD(v43) = v43 + 1;
          }
        }

        uint64_t v14 = *(unsigned __int16 *)(v37 + 22);
        int v45 = *(char *)(v36 + 22);
        if (v45 < 0)
        {
          v123[0] = 0LL;
          __int16 v116 = v43;
          unsigned int v114 = v14;
          unsigned int v115 = v13;
          uint64_t v46 = v32;
          uint64_t v47 = v28;
          uint64_t v48 = v31;
          uint64_t v49 = v30;
          uint64_t v50 = v29;
          uint64_t v51 = v33;
          int v45 = sub_181337B64( (uint64_t *)v27,  *(_WORD **)(v27 + 16),  v36,  *(unsigned __int16 *)(v27 + 60),  v111,  v37,  v123,  v17);
          uint64_t v14 = v114;
          uint64_t v13 = v115;
          LOWORD(v43) = v116;
          uint64_t v33 = v51;
          uint64_t v29 = v50;
          uint64_t v30 = v49;
          uint64_t v31 = v48;
          uint64_t v28 = v47;
          uint64_t v32 = v46;
          uint64_t v34 = v120;
          LODWORD(v24) = v118;
          uint64_t v27 = a1;
          if (v45 < 0) {
            goto LABEL_69;
          }
        }

        else
        {
          v123[0] = *(void *)(v36 + 8);
        }

        if (v117 <= v45)
        {
LABEL_69:
          __int16 v56 = v43;
          LOWORD(v43) = v43 - 2;
          goto LABEL_123;
        }

        __int16 v52 = *(_WORD *)&v112[2 * v45];
        if (!v52) {
          break;
        }
LABEL_112:
        if ((__int16)v43 >= v52)
        {
          __int16 v75 = v43;
          if (v52 + 49 >= (__int16)v43)
          {
            else {
              __int16 v75 = v43 + 1;
            }
          }

          goto LABEL_122;
        }

        if ((__int16)v43 + 49 >= v52)
        {
          else {
            __int16 v75 = v52 + 1;
          }
LABEL_122:
          __int16 v56 = v75 + 3;
          goto LABEL_123;
        }

        __int16 v56 = v52 + 3;
LABEL_123:
        unsigned __int16 v76 = v14 + v13;
        if (!v122 && (_DWORD)v113 != 1 && (*(_DWORD *)(v37 + 48) & 0x2000000) != 0)
        {
          v56 -= 10;
          v76 -= 30;
        }

        if ((int)v33 < 1)
        {
LABEL_138:
          int v79 = v33;
          if ((int)v33 >= (int)v24)
          {
            int v79 = v28;
            if ((unsigned __int16)v56 == (unsigned __int16)v29)
            {
              int v79 = v28;
            }
          }

          else {
            uint64_t v33 = (v33 + 1);
          }
          int v78 = &v34[4 * v79];
        }

        else
        {
          int v77 = v33;
          int v78 = v34;
          while (*v78 != (v39 | v38) || ((*((unsigned __int8 *)v78 + 22) ^ v45) & 0x80) != 0)
          {
            v78 += 4;
            if (!--v77) {
              goto LABEL_138;
            }
          }

          if (*((__int16 *)v78 + 9) < v56
            || *((unsigned __int16 *)v78 + 9) == (unsigned __int16)v56
            && (*((__int16 *)v78 + 8) < (__int16)v76
             || *((unsigned __int16 *)v78 + 8) == v76 && *((__int16 *)v78 + 10) <= (__int16)v43))
          {
            goto LABEL_36;
          }
        }

        uint64_t v80 = v30;
        void *v78 = *(void *)(v37 + 8) | *(void *)v36;
        v78[1] = v123[0];
        *((_WORD *)v78 + 8) = v76;
        *((_WORD *)v78 + 9) = v56;
        *((_WORD *)v78 + 10) = v43;
        *((_BYTE *)v78 + 22) = v45;
        uint64_t v81 = v33;
        memcpy((void *)v78[3], *(const void **)(v36 + 24), 8 * v122);
        uint64_t v33 = v81;
        LODWORD(v24) = v118;
        *(void *)(v78[3] + 8 * v122) = v37;
        if ((int)v81 < v118)
        {
          uint64_t v27 = a1;
          uint64_t v34 = v120;
          uint64_t v30 = v80;
        }

        else
        {
          uint64_t v34 = v120;
          uint64_t v29 = *((unsigned __int16 *)v120 + 9);
          uint64_t v30 = *((unsigned __int16 *)v120 + 8);
          uint64_t v27 = a1;
          uint64_t v28 = 0LL;
          if (v113 >= 2)
          {
            uint64_t v82 = 1LL;
            int v83 = v109;
            do
            {
              if (*(v83 - 1) > (__int16)v29)
              {
                uint64_t v84 = (unsigned __int16)*v83;
              }

              else
              {
                uint64_t v84 = *v83;
              }

              uint64_t v30 = v84;
              uint64_t v29 = *(v83 - 1);
              uint64_t v28 = v82;
LABEL_148:
              uint64_t v82 = (v82 + 1);
              v83 += 16;
            }

            while ((_DWORD)v31 != (_DWORD)v82);
          }
        }

uint64_t sub_18132BD98(uint64_t result)
{
  int v1 = *(unsigned int **)(result + 8);
  uint64_t v2 = *v1;
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = (char *)v1 + 69;
    unsigned int v5 = (char *)v1 + 69;
    do
    {
      __int16 v6 = *(_WORD *)v5;
      v5 += 104;
      if ((v6 & 0x100) == 0
        || *(_BYTE *)(*(void *)(v4 + 35) + 18LL)
        || (uint64_t v7 = *(void *)(v4 - 21)) == 0
        || !*(void *)(v7 + 72))
      {
        *(void *)(result + 96) |= 1LL << v3;
      }

      ++v3;
      uint64_t v4 = v5;
    }

    while (v2 != v3);
  }

  return result;
}

uint64_t sub_18132BE08(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 592);
  uint64_t v3 = *(int **)(a1 + 24);
  if (!v3)
  {
    uint64_t v6 = 0LL;
LABEL_23:
    uint64_t v14 = *(int **)(a1 + 16);
    if (!v14) {
      goto LABEL_48;
    }
    goto LABEL_24;
  }

  int v4 = *v3;
  if (*v3 >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v8 = *(unsigned __int8 **)&v3[6 * v5 + 2];
      if (v8)
      {
        if (*v8 == 167 && (*((_DWORD *)v8 + 1) & 0x20) == 0)
        {
          int v10 = *((_DWORD *)v8 + 11);
          if (*(_DWORD *)(a1 + 600) == v10)
          {
            uint64_t v7 = 1LL;
            goto LABEL_6;
          }

          uint64_t v11 = *(unsigned int *)(a1 + 596);
          if ((int)v11 >= 2)
          {
            uint64_t v12 = 0LL;
            uint64_t v13 = v11 - 1;
            while (*(_DWORD *)(a1 + 604 + 4 * v12) != v10)
            {
              if (v13 == ++v12) {
                goto LABEL_5;
              }
            }

            uint64_t v7 = 1LL << (v12 + 1);
            goto LABEL_6;
          }
        }

        else if ((*((_DWORD *)v8 + 1) & 0x810000) == 0)
        {
          uint64_t v7 = sub_181332EB0(v2, v8);
          int v4 = *v3;
          goto LABEL_6;
        }
      }

uint64_t sub_18132C174(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(result + 64))
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void *)(result + 952);
    uint64_t v4 = *(void *)(v2 + 104LL * *(unsigned __int8 *)(v3 + 16) + 40);
    int v5 = *(_DWORD *)(v4 + 48);
    if ((v5 & 0x10) != 0)
    {
      *(_DWORD *)(v4 + 48) = v5 | 0x100;
      if ((_DWORD)v1 != 1)
      {
        __int16 v6 = *(_WORD *)(v3 + 22);
        uint64_t v7 = (uint64_t *)(result + 1072);
        uint64_t v8 = v1 - 1;
        do
        {
          uint64_t v9 = *v7;
          uint64_t v10 = *(void *)(v2 + 104LL * *(unsigned __int8 *)(*v7 + 16) + 40);
          int v11 = *(_DWORD *)(v10 + 48);
          if ((v11 & 0x10) == 0) {
            break;
          }
          *(_DWORD *)(v10 + 48) = v11 | 0x100;
          int v12 = *(_DWORD *)(v9 + 48);
          uint64_t result = v12 & 0x300;
          BOOL v13 = (~v12 & 0x800001) != 0 || (_DWORD)result == 0;
          v6 += *(_WORD *)(v9 + 22);
          v7 += 15;
          --v8;
        }

        while (v8);
      }
    }
  }

  return result;
}

uint64_t *sub_18132C234(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_WORD *)(a2 + 96))
  {
    __int16 v6 = result;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(a2 + 24);
    while (1)
    {
      uint64_t v9 = *(__int16 *)(*(void *)(a2 + 8) + 2 * v7);
      if (v9 == -2)
      {
        uint64_t v10 = (unsigned __int8 **)(*(void *)(a2 + 80) + 24 * v7 + 8);
        BOOL v11 = (*(_BYTE *)(a4 + 60) & 0x58) != 0;
      }

      else
      {
        if ((v9 & 0x80000000) != 0) {
          goto LABEL_4;
        }
        uint64_t v14 = *(void *)(v8 + 8);
        int v15 = *(unsigned __int16 *)(v14 + 16LL * v9 + 12);
        if (!v15) {
          goto LABEL_4;
        }
        if (*(_BYTE *)(v8 + 63)) {
          goto LABEL_4;
        }
        uint64_t v16 = *(_DWORD **)(v8 + 80);
        if (!v16 || *v16 < v15) {
          goto LABEL_4;
        }
        BOOL v11 = 0;
        uint64_t v10 = (unsigned __int8 **)&v16[6 * (v15 - 1) + 2];
      }

      int v12 = *v10;
      __int16 v24 = 1;
      uint64_t v22 = sub_18129C78C;
      uint64_t v23 = sub_18131C570;
      int v25 = 0;
      if (v12)
      {
        uint64_t result = (uint64_t *)sub_18131C57C((uint64_t)v21, (uint64_t)v12);
        if (!v24) {
          break;
        }
      }

void *sub_18132C478( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  uint64_t v10 = a1[2];
  int v11 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v11)
  {
    int v196 = sub_18131044C(a1[2], 15LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    int v196 = *(_DWORD *)(v10 + 144);
    *(_DWORD *)(v10 + 144) = v11 + 1;
    uint64_t v12 = *(void *)(v10 + 136) + 40LL * v11;
    *(_BYTE *)uint64_t v12 = 15;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 17) = 0u;
    *(void *)(v12 + --*(_DWORD *)(result + 32) = 0LL;
  }

  uint64_t v13 = *(void *)(*a2 + 8);
  uint64_t v205 = v13 + 104LL * *(unsigned __int8 *)(a4 + 64) + 40;
  uint64_t v208 = *(void *)v205;
  unint64_t v14 = a2[4];
  int v15 = *((_DWORD *)a2 + 5);
  unint64_t v16 = v14 + 56LL * v15;
  uint64_t v211 = (uint64_t)v9;
  uint64_t v214 = v13;
  uint64_t v209 = *(void *)(a4 + 96);
  unsigned int v210 = *(unsigned __int8 *)(a4 + 64);
  uint64_t v204 = a2;
  if (v15 >= 1)
  {
    int v17 = 0;
    uint64_t v206 = 0LL;
    int v201 = 0;
    uint64_t v215 = 0LL;
    uint64_t v18 = v13 + 104LL * *(unsigned __int8 *)(a4 + 64);
    uint64_t v19 = (_DWORD *)(v18 + 72);
    uint64_t v20 = (_BYTE *)(v18 + 68);
    uint64_t v199 = *(void *)(a4 + 96) + 80LL;
    while (1)
    {
      if ((*(_WORD *)(v14 + 18) & 2) == 0)
      {
        int v21 = *(unsigned __int8 **)v14;
        if (sub_18132AB94(*(void *)v14, v214, *(unsigned __int8 *)(a4 + 64)))
        {
          if (v21) {
            uint64_t v22 = sub_18129C928(*v9, v21, 0LL, 0LL);
          }
          else {
            uint64_t v22 = 0LL;
          }
          uint64_t v215 = sub_1813152F8(v9, v215, (uint64_t)v22);
        }
      }

      int v23 = *(_DWORD *)(v14 + 28);
      if (v23 == *v19 && (*(_WORD *)(v14 + 20) & 0x82) != 0)
      {
        if ((*v20 & 0x58) == 0
          || (int v24 = *(_DWORD *)(*(void *)v14 + 4LL), (v24 & 3) != 0)
          && *(_DWORD *)(*(void *)v14 + 56LL) == v23
          && ((*v20 & 0x18) == 0 || (v24 & 2) == 0))
        {
          if ((*(void *)(v14 + 40) & a3) == 0)
          {
            uint64_t v25 = *(unsigned int *)(v14 + 32);
            if ((v25 & 0x80000000) == 0
              && sub_181333C94(*(void *)v14, *(char *)(*(void *)(*(void *)v205 + 8LL) + 16 * v25 + 9)))
            {
              else {
                uint64_t v26 = 0x8000000000000000LL;
              }
              if (!v201) {
                sqlite3_log( 284,  "automatic index on %s(%s)",  *(const char **)v208,  *(const char **)(*(void *)(v208 + 8) + 16 * v25));
              }
              if ((v26 & v206) == 0)
              {
                if (v17 >= *(unsigned __int16 *)(v209 + 56))
                {
                  signed int v202 = (v17 & 0xFFFFFFF8) + 8;
                  uint64_t v197 = *(void **)v211;
                  uint64_t result = (void *)sub_1812F2264(*(void *)v211, 8LL * v202);
                  if (!result) {
                    goto LABEL_83;
                  }
                  char v27 = result;
                  memcpy(result, *(const void **)(v209 + 64), 8LL * *(unsigned __int16 *)(v209 + 56));
                  uint64_t v29 = *(void **)(v209 + 64);
                  if (v29 != (void *)v199) {
                    sub_1812F20DC(v197, v29);
                  }
                  *(void *)(v209 + 64) = v27;
                  *(_WORD *)(v209 + 56) = v202;
                }

                else
                {
                  char v27 = *(void **)(v209 + 64);
                }

                v27[v17++] = v14;
                v206 |= v26;
              }

              int v201 = 1;
              uint64_t v9 = (uint64_t *)v211;
            }
          }
        }
      }

      v14 += 56LL;
      if (v14 >= v16) {
        goto LABEL_39;
      }
    }
  }

  uint64_t v215 = 0LL;
  uint64_t v206 = 0LL;
  int v17 = 0;
LABEL_39:
  *(_WORD *)(v209 + 52) = v17;
  *(_WORD *)(v209 + 24) = v17;
  *(_DWORD *)(v209 + 48) = 16961;
  if (*(_BYTE *)(v208 + 63) == 2)
  {
    unint64_t v30 = -1LL;
    uint64_t v31 = v214;
    unsigned int v32 = v210;
  }

  else
  {
    uint64_t v31 = v214;
    unsigned int v32 = v210;
    unint64_t v30 = *(void *)(v214 + 104LL * v210 + 88) & (~v206 | 0x8000000000000000LL);
  }

  int v33 = *(__int16 *)(v208 + 54);
  int v34 = v33 - 63;
  if (v33 >= 63) {
    LODWORD(v35) = 63;
  }
  else {
    LODWORD(v35) = *(__int16 *)(v208 + 54);
  }
  int v198 = v35;
  int v203 = *(__int16 *)(v208 + 54);
  if (v33 >= 1)
  {
    else {
      uint64_t v35 = v35;
    }
    if (v35 < 8)
    {
      for (uint64_t i = 0LL; i != v35; ++i)
LABEL_54:
        v17 += (v30 >> i) & 1;
      goto LABEL_55;
    }

    uint64_t i = v35 & 0x38;
    int32x4_t v37 = 0uLL;
    int32x4_t v38 = (int32x4_t)v17;
    int8x16_t v39 = (int8x16_t)vdupq_n_s64(v30);
    int64x2_t v40 = (int64x2_t)xmmword_1813CDDA0;
    int64x2_t v41 = (int64x2_t)xmmword_1813CDC50;
    int64x2_t v42 = vdupq_n_s64(4uLL);
    uint64x2_t v43 = (uint64x2_t)vdupq_n_s64(1uLL);
    int64x2_t v44 = vdupq_n_s64(8uLL);
    uint64_t v45 = v35 & 0x7FFFFFF8;
    do
    {
      int32x4_t v38 = vsubq_s32( v38,  (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32( (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8( (int8x16_t)vshlq_u64( v43,  (uint64x2_t)v41),  v39)),  (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8( (int8x16_t)vshlq_u64( v43,  (uint64x2_t)v40),  v39)))));
      int32x4_t v37 = vsubq_s32( v37,  (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32( (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8( (int8x16_t)vshlq_u64( v43,  (uint64x2_t)vaddq_s64(v41, v42)),  v39)),  (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8( (int8x16_t)vshlq_u64( v43,  (uint64x2_t)vaddq_s64(v40, v42)),  v39)))));
      int64x2_t v40 = vaddq_s64(v40, v44);
      int64x2_t v41 = vaddq_s64(v41, v44);
      v45 -= 8LL;
    }

    while (v45);
    int v17 = vaddvq_s32(vaddq_s32(v37, v38));
    if (i != v35) {
      goto LABEL_54;
    }
  }

LABEL_167:
  if (*(_BYTE *)(*(void *)v10 + 103LL)) {
    int v150 = &byte_18C550680;
  }
  else {
    int v150 = (char *)(*(void *)(v10 + 136) + 40LL * v213);
  }
  *((_DWORD *)v150 + 2) = v129 + v60;
  uint64_t v151 = *(void *)(v211 + 16);
  if (*(_BYTE *)(*(void *)v151 + 103LL)) {
    int v152 = &byte_18C550680;
  }
  else {
    int v152 = (char *)(*(void *)(v151 + 136) + 40LL * (int)v111);
  }
  if (!*(_BYTE *)(*(void *)v211 + 103LL))
  {
    int v153 = *(_DWORD *)(v151 + 144);
    BOOL v154 = __OFSUB__(v153, (_DWORD)v111);
    int v155 = v153 - v111;
    if (!((v155 < 0) ^ v154 | (v155 == 0)))
    {
      int v156 = *(_DWORD *)(v214 + 104LL * v210 + 64);
      int v157 = *(_DWORD *)(a4 + 4);
      int v158 = *(_DWORD *)(a4 + 8);
      uint64_t v159 = v152 + 8;
      do
      {
        if (*(v159 - 1) == v157)
        {
          int v160 = *((unsigned __int8 *)v159 - 8);
          if (v160 == 135)
          {
            *((_BYTE *)v159 - 8) = 126;
            *(v159 - 1) = v158;
          }

          else if (v160 == 94)
          {
            *((_BYTE *)v159 - 8) = 80;
            unsigned int v161 = v159[1];
            *(v159 - 1) = *v159 + v156;
            *(void *)uint64_t v159 = v161;
            *((_WORD *)v159 - 3) = 2;
          }
        }

        v159 += 10;
        --v155;
      }

      while (v155);
    }
  }

  int v162 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v162)
  {
    uint64_t result = (void *)sub_18131044C(v10, 9LL, 0LL, v111, 0LL, v126, v127, v128);
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v162 + 1;
    uint64_t v163 = *(void *)(v10 + 136) + 40LL * v162;
    *(void *)uint64_t v163 = 9LL;
    *(_DWORD *)(v163 + 8) = v111;
    *(void *)(v163 + 12) = 0LL;
    *(void *)(v163 + 28) = 0LL;
    *(void *)(v163 + 20) = 0LL;
    *(_DWORD *)(v163 + 36) = 0;
  }

  unsigned int v148 = v216;
  *v108 &= ~0x20u;
  int v149 = *(_DWORD *)(v10 + 144);
LABEL_186:
  uint64_t v164 = *(void *)v10;
  int v165 = *(unsigned __int8 *)(*(void *)v10 + 103LL);
  if (*(_BYTE *)(*(void *)v10 + 103LL))
  {
    dword_18C550688 = v149;
    if (!v148) {
      goto LABEL_192;
    }
  }

  else
  {
    *(_DWORD *)(*(void *)(v10 + 136) + 40LL * (int)v111 + 8) = v149;
    if (!v148) {
      goto LABEL_192;
    }
  }

  uint64_t v166 = *(unsigned __int8 *)(v211 + 31);
  if (v166 <= 7)
  {
    *(_BYTE *)(v211 + 31) = v166 + 1;
    *(_DWORD *)(v211 + 4 * v166 + 224) = v148;
    int v149 = *(_DWORD *)(v10 + 144);
  }

    uint64_t v95 = __s;
LABEL_168:
    if (!v95) {
      goto LABEL_181;
    }
    for (uint64_t n = v95 - 4; n[3] || n[2] || n[1] || *n; --n)
      ;
    uint64_t v104 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(n);
      --qword_18C468B10;
      off_18C4653A8(n);
      uint64_t n = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_181:
        if (v33) {
          goto LABEL_190;
        }
        if (!*v120) {
          sub_1812FA020(v10);
        }
        int v33 = 0;
        *(_BYTE *)(v10 + 196) = 0;
        *(_DWORD *)(v10 + 44) &= ~0x10u;
        if ((*(_BYTE *)(v10 + 198) & 4) != 0)
        {
          if (!*v120)
          {
LABEL_186:
            sub_1812FA0B4(v10);
            if (!v33) {
              return;
            }
            goto LABEL_190;
          }
        }

        else
        {
          int v33 = sub_181276C70(v10, &v125, v60, v61, v62, v63, v64, v65);
          if (!*v120) {
            goto LABEL_186;
          }
        }

        if (!v33) {
          return;
        }
LABEL_190:
        if ((*(_BYTE *)(v10 + 198) & 4) == 0)
        {
          int v105 = *(int *)(v10 + 40) - 1LL;
          uint64_t v106 = *(void *)(*(void *)(v10 + 32) + 32 * v105 + 8);
          if (v106)
          {
            sub_1812B54BC(v106, v66);
            uint64_t v107 = *(void *)(v10 + 32) + 32 * v105;
            *(void *)(v107 + 8) = 0LL;
            *(void *)(v107 + 24) = 0LL;
          }

          sub_1812D6078(v10);
          *(_DWORD *)(v10 + 40) = v105;
          if (v33 == 3082 || v33 == 7)
          {
            if (!*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
            {
              *(_BYTE *)(v10 + 103) = 1;
              ++*(_DWORD *)(v10 + 432);
              *(_WORD *)(v10 + 436) = 0;
              int v117 = *(void *)(v10 + 344);
              if (v117)
              {
                sub_1812DC47C(v117, "out of memory", v108, v109, v110, v111, v112, v113, v119);
                for (iuint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(ii + 48))
                {
                  *(_DWORD *)(ii + 24) = 7;
                  iuint64_t i = *(void *)(ii + 256);
                  if (!ii) {
                    break;
                  }
                }
              }
            }

            if (v125) {
              sub_1812F20DC((void *)v10, v125);
            }
            uint64_t v114 = (char *)sub_18127F588(v10, "out of memory", v108, v109, v110, v111, v112, v113, v119);
          }

          else
          {
            unsigned int v32 = v125;
            if (v125) {
              goto LABEL_203;
            }
            uint64_t v114 = (char *)sub_18127F588(v10, "unable to open database: %s", v108, v109, v110, v111, v112, v113, v68);
          }

          unsigned int v32 = v114;
          uint64_t v125 = v114;
LABEL_202:
          if (!v32) {
            goto LABEL_206;
          }
LABEL_203:
          if (a1)
          {
            a1[9] = 1;
            sub_181269368(*(void *)a1, v32, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            uint64_t v115 = v125;
            if (!v125) {
              goto LABEL_206;
            }
          }

          else
          {
            sub_1812CF36C(97407);
            uint64_t v115 = v125;
            if (!v125)
            {
LABEL_206:
              if (v33)
              {
                if (a1)
                {
                  a1[9] = v33;
                  if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
                  {
                    switch(v33)
                    {
                      case 516:
                        uint64_t v116 = "abort due to ROLLBACK";
                        break;
                      case 101:
                        uint64_t v116 = "no more rows available";
                        break;
                      case 100:
                        uint64_t v116 = "another row available";
                        break;
                      default:
                        else {
                          uint64_t v116 = off_189B6EC30[v33];
                        }
                        break;
                    }

                    sub_1812D7A8C((uint64_t)a1, v116, -1, 1u, 0LL);
                  }
                }

                else
                {
                  sub_1812CF36C(97620);
                }
              }

              return;
            }
          }

          sub_1812F20DC((void *)v10, v115);
          goto LABEL_206;
        }

LABEL_206:
  if (v77) {
    return sub_181309110(*v76, v77);
  }
  return result;
}

uint64_t sub_18132D78C( uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a3;
  uint64_t v11 = (uint64_t)a1;
  uint64_t v12 = *a1;
  uint64_t v13 = *(void **)(*a1 + 16);
  uint64_t v14 = *(void *)(a3 + 96);
  uint64_t v93 = *(void *)(*a1 + 96);
  *(void *)(*a1 + 96) = 0LL;
  int v15 = *((_DWORD *)v13 + 36);
  if (*((_DWORD *)v13 + 37) <= v15)
  {
    int v90 = sub_18131044C((uint64_t)v13, 15LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    int v90 = *((_DWORD *)v13 + 36);
    *((_DWORD *)v13 + 36) = v15 + 1;
    uint64_t v16 = v13[17] + 40LL * v15;
    *(_BYTE *)uint64_t v16 = 15;
    *(_OWORD *)(v16 + 1) = 0u;
    *(_OWORD *)(v16 + 17) = 0u;
    *(void *)(v16 + --*(_DWORD *)(result + 32) = 0LL;
  }

  uint64_t v89 = (_DWORD *)(v12 + 44);
  uint64_t v92 = v11 + 856;
  uint64_t v94 = (uint64_t)v13;
  uint64_t v95 = a4;
  uint64_t v98 = v11;
  do
  {
    int v97 = a2;
    sub_1813386F0(v12, v11, v9);
    int v20 = *(_DWORD *)(v12 + 68);
    *(_DWORD *)(v12 + 68) = v20 - 1;
    unsigned int v100 = *(_DWORD *)(v9 + 4);
    uint64_t v21 = (*(_DWORD *)(v12 + 56) + 1);
    *(_DWORD *)(v12 + 56) = v21;
    *(_DWORD *)(v9 + 52) = v21;
    uint64_t v22 = *(void *)(v11 + 8);
    int v23 = *(unsigned __int8 *)(v9 + 64);
    int v24 = *(__int16 *)(*(void *)(v22 + 104LL * *(unsigned __int8 *)(v9 + 64) + 40) + 58LL);
    int v96 = v20;
    if (v24 <= 609)
    {
      unsigned int v26 = ((26215 * (__int16)v24) >> 18) + ((26215 * (__int16)v24) >> 31);
      uint64_t v27 = (__int16)v24 % 10;
      uint64_t v28 = v27 - 2;
      uint64_t v29 = v27 - 1;
      else {
        uint64_t v30 = v28;
      }
      unint64_t v31 = v30 + 8;
      unint64_t v32 = v31 << (v26 - 3);
      unint64_t v33 = v31 >> (3 - v26);
      if (v24 <= 29) {
        unint64_t v34 = v33;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34 >= 0x989680) {
        unint64_t v34 = 10000000LL;
      }
      if (v34 <= 0x2710) {
        uint64_t v25 = 10000LL;
      }
      else {
        uint64_t v25 = v34;
      }
    }

    else
    {
      uint64_t v25 = 10000000LL;
    }

    int v35 = *((_DWORD *)v13 + 36);
    if (*((_DWORD *)v13 + 37) <= v35)
    {
      sub_18131044C((uint64_t)v13, 77LL, v25, v21, 0LL, v17, v18, v19);
    }

    else
    {
      *((_DWORD *)v13 + 36) = v35 + 1;
      uint64_t v36 = v13[17] + 40LL * v35;
      *(_DWORD *)uint64_t v36 = 77;
      *(_DWORD *)(v36 + 4) = v25;
      *(_DWORD *)(v36 + 8) = v21;
      *(void *)(v36 + 12) = 0LL;
      *(void *)(v36 + 28) = 0LL;
      *(void *)(v36 + 20) = 0LL;
      *(_DWORD *)(v36 + 36) = 0;
    }

    int v37 = *((_DWORD *)v13 + 36);
    uint64_t v38 = v14;
    if (*((_DWORD *)v13 + 37) <= v37)
    {
      int v99 = sub_18131044C((uint64_t)v13, 36LL, v100, 0LL, 0LL, v17, v18, v19);
    }

    else
    {
      int v99 = *((_DWORD *)v13 + 36);
      *((_DWORD *)v13 + 36) = v37 + 1;
      uint64_t v39 = v13[17] + 40LL * v37;
      *(_DWORD *)uint64_t v39 = 36;
      *(_DWORD *)(v39 + 4) = v100;
      int16x8_t v40 = 0uLL;
      *(_OWORD *)(v39 + 8) = 0u;
      *(_OWORD *)(v39 + 24) = 0u;
    }

    int v41 = *(_DWORD *)(v11 + 124);
    if (v41 >= 1)
    {
      int64x2_t v42 = *(uint64_t **)(v98 + 136);
      uint64x2_t v43 = &v42[7 * v41];
      do
      {
        v42 += 7;
      }

      while (v42 < v43);
    }

    uint64_t v14 = v38;
    if ((*(_BYTE *)(v38 + 49) & 1) != 0)
    {
      if (*(_BYTE *)(v12 + 31))
      {
        unsigned __int8 v48 = *(_BYTE *)(v12 + 31) - 1;
        *(_BYTE *)(v12 + 31) = v48;
        uint64_t v49 = *(unsigned int *)(v12 + 4LL * v48 + 224);
      }

      else
      {
        uint64_t v49 = (*(_DWORD *)(v12 + 56) + 1);
        *(_DWORD *)(v12 + 56) = v49;
      }

      uint64_t v11 = v98;
      int v54 = *((_DWORD *)v13 + 36);
      if (*((_DWORD *)v13 + 37) <= v54)
      {
        sub_18131044C((uint64_t)v13, 135LL, v100, v49, 0LL, v17, v18, v19);
      }

      else
      {
        *((_DWORD *)v13 + 36) = v54 + 1;
        uint64_t v55 = v13[17] + 40LL * v54;
        *(_DWORD *)uint64_t v55 = 135;
        *(_DWORD *)(v55 + 4) = v100;
        *(_DWORD *)(v55 + 8) = v49;
        *(void *)(v55 + 12) = 0LL;
        *(void *)(v55 + 28) = 0LL;
        *(void *)(v55 + 20) = 0LL;
        *(_DWORD *)(v55 + 36) = 0;
      }

      uint64_t v56 = v95;
      uint64_t v57 = *(unsigned int *)(v9 + 52);
      int v58 = *((_DWORD *)v13 + 36);
      if (*((_DWORD *)v13 + 37) <= v58)
      {
        sub_181310690((uint64_t)v13, 180LL, v57, 0LL, v49, 1LL, v18, v19);
        int v60 = v96;
        if ((_DWORD)v49)
        {
LABEL_50:
          uint64_t v61 = *(unsigned __int8 *)(v12 + 31);
          if (v61 <= 7)
          {
            *(_BYTE *)(v12 + 31) = v61 + 1;
            *(_DWORD *)(v12 + 4 * v61 + 224) = v49;
          }
        }
      }

      else
      {
        *((_DWORD *)v13 + 36) = v58 + 1;
        uint64_t v59 = v13[17] + 40LL * v58;
        *(_DWORD *)uint64_t v59 = 64948;
        *(_DWORD *)(v59 + 4) = v57;
        *(_DWORD *)(v59 + 8) = 0;
        *(_DWORD *)(v59 + 12) = v49;
        *(_DWORD *)(v59 + 16) = 1;
        *(void *)(v59 + 24) = 0LL;
        *(void *)(v59 + --*(_DWORD *)(result + 32) = 0LL;
        int v60 = v96;
        if ((_DWORD)v49) {
          goto LABEL_50;
        }
      }
    }

    else
    {
      int64x2_t v44 = *(void **)(v38 + 32);
      uint64_t v45 = *(unsigned __int16 *)(v38 + 24);
      if ((_DWORD)v45 == 1)
      {
        if (*(_BYTE *)(v12 + 31))
        {
          unsigned __int8 v46 = *(_BYTE *)(v12 + 31) - 1;
          *(_BYTE *)(v12 + 31) = v46;
          LODWORD(v47) = *(_DWORD *)(v12 + 4LL * v46 + 224);
        }

        else
        {
          LODWORD(v47) = *(_DWORD *)(v12 + 56) + 1;
          *(_DWORD *)(v12 + 56) = v47;
        }

uint64_t sub_18132DF04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void *)(a1 + 168);
  if (!v6) {
    uint64_t v6 = a1;
  }
  if (*(_BYTE *)(v6 + 301) != 2 && (*(_BYTE *)(*(void *)a1 + 49LL) & 4) == 0) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a3 + 96);
  int v8 = *(_DWORD *)(v7 + 48);
  if ((v8 & 0x2000) != 0 || (a4 & 0x20) != 0) {
    return 0LL;
  }
  unsigned int v9 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v10 = (const void *)(a2 + 104LL * *(unsigned __int8 *)(a3 + 64) + 8);
  BOOL v11 = (v8 & 0x30) != 0 || (v8 & 0x400) == 0 && *(_WORD *)(v7 + 24) || (a4 & 3) != 0;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v32 = *(void *)a1;
  unint64_t v33 = &v37;
  uint64_t v34 = 0x7FFFFFFD00000064LL;
  unsigned int v35 = 0;
  __int16 v36 = 256;
  uint64_t v14 = "SCAN";
  if (v11) {
    uint64_t v14 = "SEARCH";
  }
  sqlite3_str_appendf((sqlite3_str *)&v32, "%s %S", v14, v10);
  if ((v8 & 0x500) != 0)
  {
    if ((v8 & 0x100) != 0 && (v8 & 0xF) != 0)
    {
      sqlite3_str_appendf((sqlite3_str *)&v32, " USING INTEGER PRIMARY KEY (%s", "rowid");
      if ((v8 & 5) == 0 && (v8 & 0x30) == 0x30) {
        sqlite3_str_appendf((sqlite3_str *)&v32, ">? AND %s", "rowid");
      }
      sqlite3_str_appendf((sqlite3_str *)&v32, "%c?)");
    }

    else if ((v8 & 0x400) != 0)
    {
      sqlite3_str_appendf((sqlite3_str *)&v32, " VIRTUAL TABLE INDEX %d:%s");
    }

    goto LABEL_66;
  }

  uint64_t v16 = *(void *)(v7 + 32);
  if ((*(_BYTE *)(*(void *)(a2 + 104LL * v9 + 40) + 48LL) & 0x80) == 0 || (*(_WORD *)(v16 + 99) & 3) != 2)
  {
    if ((v8 & 0x20000) != 0)
    {
      uint64_t v17 = "AUTOMATIC PARTIAL COVERING INDEX";
    }

    else if ((v8 & 0x4000) != 0)
    {
      uint64_t v17 = "AUTOMATIC COVERING INDEX";
    }

    else if ((v8 & 0x40) != 0)
    {
      uint64_t v17 = "COVERING INDEX %s";
    }

    else
    {
      uint64_t v17 = "INDEX %s";
    }

    goto LABEL_35;
  }

  if (v11)
  {
    uint64_t v17 = "PRIMARY KEY";
LABEL_35:
    uint64_t v18 = v35;
    if (v35 + 7 >= v34)
    {
      sub_1812D3A10((uint64_t)&v32, " USING ", 7u);
    }

    else
    {
      v35 += 7;
      uint64_t v19 = &v33[v18];
      *(_DWORD *)(v19 + 3) = 541544009;
      *(_DWORD *)uint64_t v19 = 1230198048;
    }

    sqlite3_str_appendf((sqlite3_str *)&v32, v17, *(void *)v16);
    uint64_t v20 = *(void *)(v7 + 32);
    uint64_t v21 = *(unsigned __int16 *)(v7 + 24);
    unint64_t v22 = *(unsigned __int16 *)(v7 + 54);
    if (*(_WORD *)(v7 + 24) || (*(_BYTE *)(v7 + 48) & 0x30) != 0)
    {
      uint64_t v23 = v35;
      if (v35 + 2 >= v34)
      {
        sub_1812D3A10((uint64_t)&v32, " (", 2u);
      }

      else
      {
        v35 += 2;
        *(_WORD *)&v33[v23] = 10272;
      }

      if ((_DWORD)v21)
      {
        if ((_DWORD)v22) {
          sqlite3_str_appendf((sqlite3_str *)&v32, "ANY(%s)");
        }
        else {
          sqlite3_str_appendf((sqlite3_str *)&v32, "%s=?");
        }
        if ((_DWORD)v21 == 1)
        {
          LODWORD(v21) = 1;
        }

        else
        {
          unsigned int v31 = v9;
          for (unint64_t i = 1LL; i != v21; ++i)
          {
            uint64_t v26 = v35;
            if (v35 + 5 < v34)
            {
              v35 += 5;
              uint64_t v25 = &v33[v26];
              v25[4] = 32;
              *(_DWORD *)uint64_t v25 = 1145979168;
            }

            else
            {
              sub_1812D3A10((uint64_t)&v32, " AND ", 5u);
            }

            if (i >= v22) {
              sqlite3_str_appendf((sqlite3_str *)&v32, "%s=?");
            }
            else {
              sqlite3_str_appendf((sqlite3_str *)&v32, "ANY(%s)");
            }
          }

          unsigned int v9 = v31;
        }
      }

      int v27 = *(_DWORD *)(v7 + 48);
      int v28 = v21;
      if ((v27 & 0x20) != 0)
      {
        sub_1813389A4((sqlite3_str *)&v32, v20, *(unsigned __int16 *)(v7 + 26), v21, v21, ">");
        int v27 = *(_DWORD *)(v7 + 48);
        int v28 = 1;
      }

      if ((v27 & 0x10) != 0) {
        sub_1813389A4((sqlite3_str *)&v32, v20, *(unsigned __int16 *)(v7 + 28), v21, v28, "<");
      }
      uint64_t v29 = v35;
      if (v35 + 1 >= v34)
      {
        sub_1812D3A10((uint64_t)&v32, ")", 1u);
      }

      else
      {
        ++v35;
        v33[v29] = 41;
      }
    }
  }

uint64_t sub_18132E468( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v489 = *(void *)a1;
  uint64_t v11 = *((void *)a5 + 12);
  uint64_t v12 = *(void *)(a3 + 8);
  unsigned int v13 = *((unsigned __int8 *)a5 + 64);
  uint64_t v14 = v12 + 104LL * *((unsigned __int8 *)a5 + 64);
  unsigned int v15 = *(_DWORD *)(v14 + 72);
  unsigned int v486 = v15;
  if (*(_DWORD *)(a3 + 600) == v15)
  {
    uint64_t v16 = 1LL;
  }

  else
  {
    uint64_t v17 = *(unsigned int *)(a3 + 596);
    if ((int)v17 < 2)
    {
LABEL_7:
      uint64_t v16 = 0LL;
    }

    else
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = v17 - 1;
      while (1)
      {
        int v20 = *(_DWORD *)(a3 + 604 + 4 * v18++);
        if (v20 == v15) {
          break;
        }
        if (v19 == v18) {
          goto LABEL_7;
        }
      }

      uint64_t v16 = 1LL << v18;
    }
  }

  uint64_t v487 = a6;
  *((void *)a5 + 13) = a6 & ~v16;
  unint64_t v21 = *(void *)(a3 + 96);
  unsigned int v22 = *(_DWORD *)(a1 + 68);
  uint64_t v23 = v22 - 1;
  a5[3] = v23;
  a5[4] = v23;
  v22 -= 2;
  *(_DWORD *)(a1 + 68) = v22;
  unsigned int v492 = v22;
  a5[6] = v22;
  if (v13 && (*(_BYTE *)(v12 + 104LL * v13 + 68) & 8) != 0)
  {
    uint64_t v24 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v24;
    *a5 = v24;
    int v25 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v25)
    {
      sub_18131044C(a2, 71LL, 0LL, v24, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v25 + 1;
      uint64_t v26 = *(void *)(a2 + 136) + 40LL * v25;
      *(void *)uint64_t v26 = 71LL;
      *(_DWORD *)(v26 + 8) = v24;
      *(void *)(v26 + 12) = 0LL;
      *(void *)(v26 + 28) = 0LL;
      *(void *)(v26 + 20) = 0LL;
      *(_DWORD *)(v26 + 36) = 0;
    }
  }

  int v27 = a4;
  if (a4 >= 1)
  {
    int v27 = a4;
    while (!*(_DWORD *)(a3 + 120LL * v27 + 856) && !*(void *)(a3 + 120LL * v27 + 912))
    {
      BOOL v28 = __OFSUB__(v27--, 1);
      if ((v27 < 0) ^ v28 | (v27 == 0))
      {
        int v27 = 0;
        break;
      }
    }
  }

  uint64_t v485 = v12 + 104LL * v13;
  __int16 v29 = *(_WORD *)(v485 + 69);
  if ((v29 & 0x20) != 0)
  {
    uint64_t v45 = v12 + 104LL * v13;
    uint64_t v46 = *(unsigned int *)(v45 + 56);
    uint64_t v47 = *(unsigned int *)(v45 + 60);
    uint64_t v42 = a2;
    int v48 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v48)
    {
      sub_18131044C(a2, 11LL, v47, 0LL, v46, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v48 + 1;
      uint64_t v49 = *(void *)(a2 + 136) + 40LL * v48;
      *(_DWORD *)uint64_t v49 = 11;
      *(_DWORD *)(v49 + 4) = v47;
      *(_DWORD *)(v49 + 8) = 0;
      *(_DWORD *)(v49 + 12) = v46;
      *(void *)(v49 + 24) = 0LL;
      *(void *)(v49 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v49 + 16) = 0LL;
    }

    uint64_t v56 = a5;
    signed int v57 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v57)
    {
      signed int v57 = sub_18131044C(a2, 12LL, v47, v23, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v57 + 1;
      uint64_t v58 = *(void *)(a2 + 136) + 40LL * v57;
      *(_DWORD *)uint64_t v58 = 12;
      *(_DWORD *)(v58 + 4) = v47;
      *(_DWORD *)(v58 + 8) = v23;
      *(void *)(v58 + 12) = 0LL;
      *(void *)(v58 + 28) = 0LL;
      *(void *)(v58 + 20) = 0LL;
      *(_DWORD *)(v58 + 36) = 0;
    }

    uint64_t v59 = 0LL;
    a5[18] = v57;
    char v60 = 9;
LABEL_42:
    *((_BYTE *)v56 + 65) = v60;
    goto LABEL_136;
  }

  unint64_t v30 = v21 >> a4;
  unsigned int v31 = v30 & 1;
  int v32 = *(_DWORD *)(v11 + 48);
  if ((v32 & 0x400) != 0)
  {
    uint64_t v50 = *(unsigned __int16 *)(v11 + 52);
    int v51 = v50 + 2;
    uint64_t v52 = a1;
    int v53 = *(_DWORD *)(a1 + 40);
    BOOL v28 = __OFSUB__(v53, v50 + 2);
    int v54 = v53 - (v50 + 2);
    if (v54 < 0 != v28)
    {
      int v55 = *(_DWORD *)(a1 + 56);
      unsigned int v475 = v55 + 1;
      *(_DWORD *)(a1 + 56) = v55 + v51;
    }

    else
    {
      unsigned int v475 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v54;
      *(_DWORD *)(a1 + 44) = v475 + v51;
    }

    unsigned int v481 = a5[3];
    if ((_DWORD)v50)
    {
      unsigned int v478 = v30 & 1;
      unint64_t v64 = 0LL;
      uint64_t v65 = v475 + 2;
      do
      {
        uint64_t v66 = *(void *)(*(void *)(v11 + 64) + 8 * v64);
        if (v66)
        {
          if ((*(_WORD *)(v66 + 20) & 1) != 0)
          {
            int v70 = 1 << v64;
            if (v64 >= 0x20) {
              int v70 = 0;
            }
            if ((*(_DWORD *)(v11 + 40) & v70) != 0)
            {
              uint64_t v71 = *(unsigned int *)(v52 + 52);
              uint64_t v72 = v52;
              uint64_t v73 = (*(_DWORD *)(v52 + 56) + 1);
              *(_DWORD *)(v72 + 52) = v71 + 1;
              *(_DWORD *)(v72 + 56) = v73;
              sub_18131D58C();
              int v74 = *(_DWORD *)(a2 + 144);
              if (*(_DWORD *)(a2 + 148) <= v74)
              {
                sub_18131044C(a2, 174LL, v71, v65 + v64, v73, a6, a7, a8);
              }

              else
              {
                *(_DWORD *)(a2 + 144) = v74 + 1;
                uint64_t v75 = *(void *)(a2 + 136) + 40LL * v74;
                *(_DWORD *)uint64_t v75 = 174;
                *(_DWORD *)(v75 + 4) = v71;
                *(_DWORD *)(v75 + 8) = v65 + v64;
                *(_DWORD *)(v75 + 12) = v73;
                *(void *)(v75 + 24) = 0LL;
                *(void *)(v75 + --*(_DWORD *)(result + 32) = 0LL;
                *(void *)(v75 + 16) = 0LL;
              }

              uint64_t v52 = a1;
            }

            else
            {
              sub_1812A3E6C((uint64_t *)v52, (unsigned __int8 **)v66, (int *)a5, v64, v478, v65 + v64, a7, a8, a9);
              unsigned int v481 = a5[4];
            }
          }

          else
          {
            sub_181338F40(v52, *(unsigned __int8 **)(*(void *)v66 + 24LL), v65 + v64, 1LL, (uint64_t)a5, a6, a7, a8);
            if (*(_BYTE *)(v66 + 23) == 74 && (*(_BYTE *)(v11 + 28) & 2) != 0)
            {
              uint64_t v67 = *(unsigned int *)(*(void *)(a3 + 32) + 12LL);
              int v68 = *(_DWORD *)(a2 + 144);
              if (*(_DWORD *)(a2 + 148) <= v68)
              {
                sub_18131044C(a2, 71LL, 0LL, v67, 0LL, a6, a7, a8);
              }

              else
              {
                *(_DWORD *)(a2 + 144) = v68 + 1;
                uint64_t v69 = *(void *)(a2 + 136) + 40LL * v68;
                *(void *)uint64_t v69 = 71LL;
                *(_DWORD *)(v69 + 8) = v67;
                *(void *)(v69 + 12) = 0LL;
                *(void *)(v69 + 28) = 0LL;
                *(void *)(v69 + 20) = 0LL;
                *(_DWORD *)(v69 + 36) = 0;
              }
            }
          }
        }

        ++v64;
      }

      while (v50 != v64);
    }

    uint64_t v76 = *(unsigned int *)(v11 + 24);
    uint64_t v42 = a2;
    int v77 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v77)
    {
      uint64_t v79 = v475;
      sub_18131044C(a2, 71LL, v76, v475, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v77 + 1;
      uint64_t v78 = *(void *)(a2 + 136) + 40LL * v77;
      *(_DWORD *)uint64_t v78 = 71;
      *(_DWORD *)(v78 + 4) = v76;
      uint64_t v79 = v475;
      *(_DWORD *)(v78 + 8) = v475;
      *(void *)(v78 + 12) = 0LL;
      *(void *)(v78 + 28) = 0LL;
      *(void *)(v78 + 20) = 0LL;
      *(_DWORD *)(v78 + 36) = 0;
    }

    uint64_t v80 = (v79 + 1);
    int v81 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v81)
    {
      sub_18131044C(a2, 71LL, v50, v80, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v81 + 1;
      uint64_t v82 = *(void *)(a2 + 136) + 40LL * v81;
      *(_DWORD *)uint64_t v82 = 71;
      *(_DWORD *)(v82 + 4) = v50;
      *(_DWORD *)(v82 + 8) = v80;
      *(void *)(v82 + 12) = 0LL;
      *(void *)(v82 + 28) = 0LL;
      *(void *)(v82 + 20) = 0LL;
      *(_DWORD *)(v82 + 36) = 0;
    }

    if ((*(_BYTE *)(v11 + 28) & 1) != 0) {
      uint64_t v83 = 4294967290LL;
    }
    else {
      uint64_t v83 = 0xFFFFFFFFLL;
    }
    sub_1812B9B68((uint64_t *)a2, 6LL, v486, v481, v79, *(void *)(v11 + 32), v83, a8);
    *(_BYTE *)(v11 + 28) &= ~1u;
    if (*(_BYTE *)(v489 + 103)) {
      *(void *)(v11 + --*(_DWORD *)(result + 32) = 0LL;
    }
    a5[17] = v486;
    if (*(_BYTE *)(a3 + 66)) {
      char v84 = -72;
    }
    else {
      char v84 = 63;
    }
    *((_BYTE *)a5 + 65) = v84;
    a5[18] = *(_DWORD *)(a2 + 144);
    if ((_DWORD)v50)
    {
      unint64_t v85 = 0LL;
      int v482 = v79 + 2;
      do
      {
        uint64_t v89 = *(void *)(*(void *)(v11 + 64) + 8 * v85);
        if (v85 <= 0xF && ((*(unsigned __int16 *)(v11 + 30) >> v85) & 1) != 0)
        {
          int v90 = (_WORD *)(v89 + 18);
          __int16 v91 = *(_WORD *)(v89 + 18);
          if ((v91 & 4) == 0)
          {
            int v92 = 0;
            int v93 = *a5;
            do
            {
              if (v93 && (*(_BYTE *)(*(void *)v89 + 4LL) & 1) == 0) {
                break;
              }
              if ((*(void *)(v89 + 48) & *((void *)a5 + 13)) != 0LL) {
                break;
              }
              BOOL v94 = !v92 || (v91 & 0x400) == 0;
              __int16 v95 = v94 ? 4 : 512;
              *int v90 = v95 | v91;
              unsigned int v96 = *(_DWORD *)(v89 + 24);
              if ((v96 & 0x80000000) != 0) {
                break;
              }
              uint64_t v97 = *(void *)(*(void *)(v89 + 8) + 32LL);
              uint64_t v98 = v97 + 56LL * v96;
              char v99 = *(_BYTE *)(v98 + 22) - 1;
              *(_BYTE *)(v98 + 22) = v99;
              if (v99) {
                break;
              }
              uint64_t v89 = v97 + 56LL * v96;
              int v90 = (_WORD *)(v89 + 18);
              __int16 v91 = *(_WORD *)(v89 + 18);
              --v92;
            }

            while ((v91 & 4) == 0);
          }

          goto LABEL_88;
        }

        if ((*(_WORD *)(v89 + 20) & 1) != 0)
        {
          int v100 = 1 << v85;
          if (v85 >= 0x20) {
            int v100 = 0;
          }
          if ((*(_DWORD *)(v11 + 40) & v100) == 0 && !*(_BYTE *)(v489 + 103))
          {
            uint64_t v101 = a5[20];
            uint64_t v102 = 0LL;
            uint64_t v103 = (v482 + v85);
            uint64_t v104 = 20 * v101;
            while (1)
            {
              int v105 = (unsigned int *)&byte_18C550680;
              if (!*(_BYTE *)(*(void *)v42 + 103LL)) {
                int v105 = (unsigned int *)(*(void *)(v42 + 136) + 40LL * *(int *)(*((void *)a5 + 11) + v102 + 4));
              }
              uint64_t v106 = *(unsigned __int8 *)v105;
              if ((_DWORD)v106 == 135)
              {
                if (v105[2] == (_DWORD)v103)
                {
                  uint64_t v107 = v105[3];
LABEL_122:
                  uint64_t v108 = v105[1];
                  int v109 = *(_DWORD *)(v42 + 144);
                  if (*(_DWORD *)(v42 + 148) <= v109)
                  {
                    sub_18131044C(v42, v106, v108, v103, v107, a6, a7, a8);
                  }

                  else
                  {
                    *(_DWORD *)(v42 + 144) = v109 + 1;
                    uint64_t v110 = *(void *)(v42 + 136) + 40LL * v109;
                    *(_BYTE *)uint64_t v110 = v106;
                    *(_WORD *)(v110 + 2) = 0;
                    *(_DWORD *)(v110 + 4) = v108;
                    *(_DWORD *)(v110 + 8) = v103;
                    *(_DWORD *)(v110 + 12) = v107;
                    *(_BYTE *)(v110 + 1) = 0;
                    *(void *)(v110 + 24) = 0LL;
                    *(void *)(v110 + --*(_DWORD *)(result + 32) = 0LL;
                    *(void *)(v110 + 16) = 0LL;
                  }

LABEL_160:
            if (v121 != 1)
            {
              if (v121 <= 2)
              {
LABEL_165:
                __int16 v125 = *(_WORD *)(v124 + 18);
                if ((v125 & 0x1000) != 0)
                {
                  if (!v123) {
                    int v123 = 3;
                  }
                  goto LABEL_144;
                }
              }

              if ((v125 & 0x200) != 0 && (unsigned int v134 = v56[11]) != 0)
              {
                uint64_t v135 = v56[11] & 1 | 0x10;
                uint64_t v136 = v134 >> 1;
                int v137 = *(_DWORD *)(a2 + 144);
                if (*(_DWORD *)(a2 + 148) <= v137)
                {
                  int v137 = sub_18131044C(a2, v135, v136, 0LL, 0LL, a6, a7, a8);
                }

                else
                {
                  *(_DWORD *)(a2 + 144) = v137 + 1;
                  uint64_t v138 = *(void *)(a2 + 136) + 40LL * v137;
                  *(_BYTE *)uint64_t v138 = v135;
                  *(_WORD *)(v138 + 2) = 0;
                  *(_DWORD *)(v138 + 4) = v136;
                  *(_BYTE *)(v138 + 1) = 0;
                  *(_OWORD *)(v138 + 8) = 0u;
                  *(_OWORD *)(v138 + 24) = 0u;
                }

                sub_1812B0714(a1, v127);
                if (v137)
                {
                  int v139 = &byte_18C550680;
                  if (!*(_BYTE *)(*(void *)a2 + 103LL)) {
                    int v139 = (char *)(*(void *)(a2 + 136) + 40LL * v137);
                  }
                  *((_DWORD *)v139 + 2) = *(_DWORD *)(a2 + 144);
                }
              }

              else
              {
                sub_1812B0714(a1, v127);
              }

              *(_WORD *)(v124 + 18) |= 4u;
              uint64_t v56 = a5;
              goto LABEL_144;
            }

            unsigned int v133 = v56[1];
            a9 = 0uLL;
            *(void *)&__int128 v497 = 0LL;
            __int128 v498 = 0u;
            unsigned int v496 = v133;
            uint64_t v495 = *(void *)v490;
            *((void *)&v497 + 1) = sub_181337AF4;
            *(void *)&__int128 v499 = 0LL;
            *((void *)&v499 + 1) = &v495;
            if (!v127) {
              goto LABEL_165;
            }
            sub_18131C57C((uint64_t)&v497, v127);
            if (!WORD2(v499)) {
              goto LABEL_165;
            }
            int v123 = 2;
          }
        }

LABEL_183:
        v141 += 7;
        BOOL v28 = __OFSUB__(v140--, 1);
      }

      while (!((v140 < 0) ^ v28 | (v140 == 0)));
    }

    uint64_t v152 = a1;
    int v153 = (unsigned int *)*((void *)a5 + 7);
    uint64_t v154 = a2;
    if (v153)
    {
      uint64_t v155 = *(void *)(*(void *)(a3 + 8) + 104LL * *((unsigned __int8 *)a5 + 64) + 40);
      if ((*(_BYTE *)(v155 + 48) & 0x80) != 0)
      {
        for (uint64_t i = *(void *)(v155 + 16); i; uint64_t i = *(void *)(i + 40))
        {
          if ((*(_WORD *)(i + 99) & 3) == 2) {
            break;
          }
        }

        uint64_t v160 = *(unsigned __int16 *)(i + 94);
        if (*(_WORD *)(i + 94))
        {
          int v161 = v160 + 1;
          int v162 = *(_DWORD *)(a1 + 40);
          *(void *)v491 = *((void *)a5 + 7);
          if (v162 <= (int)v160)
          {
            int v170 = *(_DWORD *)(a1 + 56);
            unsigned int v163 = v170 + 1;
            *(_DWORD *)(a1 + 56) = v170 + v161;
          }

          else
          {
            unsigned int v163 = *(_DWORD *)(a1 + 44);
            *(_DWORD *)(a1 + 40) = v162 - v161;
            *(_DWORD *)(a1 + 44) = v163 + v161;
          }

          uint64_t v171 = 0LL;
          uint64_t v164 = v163;
          uint64_t v166 = v163 + 1;
          do
          {
            *(double *)a9.i64 = sub_18131C0EC( a2,  v155,  v486,  *(__int16 *)(*(void *)(i + 8) + 2 * v171),  (v164 + v171 + 1),  a6,  a7,  a8,  a9);
            ++v171;
          }

          while (v160 != v171);
          uint64_t v152 = a1;
          uint64_t v154 = a2;
          int v153 = *(unsigned int **)v491;
        }

        else
        {
          uint64_t v152 = a1;
          if (*(_BYTE *)(a1 + 31))
          {
            unsigned __int8 v169 = *(_BYTE *)(a1 + 31) - 1;
            *(_BYTE *)(a1 + 31) = v169;
            uint64_t v164 = *(unsigned int *)(a1 + 4LL * v169 + 224);
          }

          else
          {
            uint64_t v164 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v164;
          }

          uint64_t v160 = 0LL;
          uint64_t v166 = (v164 + 1);
        }
      }

      else
      {
        uint64_t v152 = a1;
        int v156 = *(_DWORD *)(a1 + 40);
        BOOL v28 = __OFSUB__(v156, 2);
        int v157 = v156 - 2;
        if (v157 < 0 != v28)
        {
          int v158 = *(_DWORD *)(a1 + 56);
          uint64_t v164 = (v158 + 1);
          *(_DWORD *)(a1 + 56) = v158 + 2;
        }

        else
        {
          uint64_t v164 = *(unsigned int *)(a1 + 44);
          *(_DWORD *)(a1 + 40) = v157;
          *(_DWORD *)(a1 + 44) = v164 + 2;
        }

        uint64_t v165 = a5[1];
        uint64_t v166 = (v164 + 1);
        int v167 = *(_DWORD *)(a2 + 144);
        if (*(_DWORD *)(a2 + 148) <= v167)
        {
          sub_18131044C(a2, 135LL, v165, (v164 + 1), 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(a2 + 144) = v167 + 1;
          uint64_t v168 = *(void *)(a2 + 136) + 40LL * v167;
          *(_DWORD *)uint64_t v168 = 135;
          *(_DWORD *)(v168 + 4) = v165;
          *(_DWORD *)(v168 + 8) = v166;
          *(void *)(v168 + 12) = 0LL;
          *(void *)(v168 + 28) = 0LL;
          *(void *)(v168 + 20) = 0LL;
          *(_DWORD *)(v168 + 36) = 0;
        }

        uint64_t v160 = 1LL;
      }

      uint64_t v172 = *v153;
      int v173 = *(_DWORD *)(v154 + 144);
      if (*(_DWORD *)(v154 + 148) <= v173)
      {
        int v173 = sub_181310690(v154, 29LL, v172, 0LL, v166, v160, a7, a8);
      }

      else
      {
        *(_DWORD *)(v154 + 144) = v173 + 1;
        uint64_t v174 = *(void *)(v154 + 136) + 40LL * v173;
        *(_DWORD *)uint64_t v174 = 64797;
        *(_DWORD *)(v174 + 4) = v172;
        *(_DWORD *)(v174 + 8) = 0;
        *(_DWORD *)(v174 + 12) = v166;
        *(_DWORD *)(v174 + 16) = v160;
        *(void *)(v174 + 24) = 0LL;
        *(void *)(v174 + --*(_DWORD *)(result + 32) = 0LL;
      }

      int v175 = *(_DWORD *)(v154 + 144);
      if (*(_DWORD *)(v154 + 148) <= v175)
      {
        sub_18131044C(v154, 97LL, v166, v160, v164, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v154 + 144) = v175 + 1;
        uint64_t v176 = *(void *)(v154 + 136) + 40LL * v175;
        *(_DWORD *)uint64_t v176 = 97;
        *(_DWORD *)(v176 + 4) = v166;
        *(_DWORD *)(v176 + 8) = v160;
        *(_DWORD *)(v176 + 12) = v164;
        *(void *)(v176 + 24) = 0LL;
        *(void *)(v176 + --*(_DWORD *)(result + 32) = 0LL;
        *(void *)(v176 + 16) = 0LL;
      }

      uint64_t v177 = *v153;
      int v178 = *(_DWORD *)(v154 + 144);
      if (*(_DWORD *)(v154 + 148) <= v178)
      {
        sub_181310690(v154, 138LL, v177, v164, v166, v160, a7, a8);
      }

      else
      {
        *(_DWORD *)(v154 + 144) = v178 + 1;
        uint64_t v179 = *(void *)(v154 + 136) + 40LL * v178;
        *(_DWORD *)uint64_t v179 = 64906;
        *(_DWORD *)(v179 + 4) = v177;
        *(_DWORD *)(v179 + 8) = v164;
        *(_DWORD *)(v179 + 12) = v166;
        *(_DWORD *)(v179 + 16) = v160;
        *(void *)(v179 + 24) = 0LL;
        *(void *)(v179 + --*(_DWORD *)(result + 32) = 0LL;
      }

      uint64_t v180 = v153[1];
      int v181 = *(_DWORD *)(v154 + 144);
      if (*(_DWORD *)(v154 + 148) <= v181)
      {
        sub_181310690(v154, 180LL, v180, 0LL, v166, v160, a7, a8);
      }

      else
      {
        *(_DWORD *)(v154 + 144) = v181 + 1;
        uint64_t v182 = *(void *)(v154 + 136) + 40LL * v181;
        *(_DWORD *)uint64_t v182 = 64948;
        *(_DWORD *)(v182 + 4) = v180;
        *(_DWORD *)(v182 + 8) = 0;
        *(_DWORD *)(v182 + 12) = v166;
        *(_DWORD *)(v182 + 16) = v160;
        *(void *)(v182 + 24) = 0LL;
        *(void *)(v182 + --*(_DWORD *)(result + 32) = 0LL;
      }

      int v183 = *(_DWORD *)(v154 + 144);
      if (v183 >= 1) {
        *(_WORD *)(*(void *)(v154 + 136) + 40LL * (v183 - 1) + 2) = 16;
      }
      if (*(_BYTE *)(*(void *)v154 + 103LL))
      {
        dword_18C550688 = v183;
        if ((_DWORD)v160)
        {
LABEL_246:
          *(_DWORD *)(v152 + 40) = v160 + 1;
          int16x8_t v184 = (_DWORD *)(v152 + 44);
          goto LABEL_252;
        }
      }

      else
      {
        *(_DWORD *)(*(void *)(v154 + 136) + 40LL * v173 + 8) = v183;
        if ((_DWORD)v160) {
          goto LABEL_246;
        }
      }

      if ((_DWORD)v164)
      {
        uint64_t v185 = *(unsigned __int8 *)(v152 + 31);
        if (v185 <= 7)
        {
          *(_BYTE *)(v152 + 31) = v185 + 1;
          int16x8_t v184 = (_DWORD *)(v152 + 4 * v185 + 224);
LABEL_252:
          *int16x8_t v184 = v164;
        }
      }
    }

      sub_181389C04((unsigned __int8 *)v79, (uint64_t)v82);
      uint64_t v86 = v82;
      goto LABEL_232;
    }

      int v120 = v13[v119 + 1];
      unsigned int v121 = (((v120 - 97) >> 1) | (((_BYTE)v120 - 97) << 7));
      uint64_t v23 = v121 > 0xA;
      int v122 = (1 << v121) & 0x495;
      if (!v23 && v122 != 0) {
        goto LABEL_188;
      }
      if (v120 != 121) {
        int v118 = 1;
      }
      if ((v118 & 1) == 0)
      {
LABEL_188:
        uint64_t v124 = v119 + 2LL;
        __int16 v125 = &v13[v124];
        while (1)
        {
          uint64_t v126 = *v125++;
          uint64_t v127 = (((v126 - 97) >> 1) | ((v126 - 97) << 7));
          uint64_t v23 = v127 > 0xA;
          int v128 = (1 << v127) & 0x495;
          if (v23 || v128 == 0) {
            break;
          }
          LODWORD(v124) = v124 + 1;
        }
      }

      v27[2] = 101;
      uint64_t v223 = 31337;
LABEL_420:
      *(_WORD *)int v27 = v223;
      int v8 = (v8 - 4);
      goto LABEL_439;
    case 's':
      uint64_t v130 = (v8 - 5);
      if (*(_DWORD *)&v13[v130] != 1936288865 || v13[v130 + 4] != 109)
      {
        uint64_t v132 = (v8 - 7);
        unsigned int v133 = &v13[v132];
        if (*(_DWORD *)&v13[v132] == 1852143209 && *(_DWORD *)&v13[v132 + 3] == 1936942446)
        {
          v133[2] = 101;
          int v137 = 30313;
        }

        else if (*(_DWORD *)v133 == 1852601702 && *(_DWORD *)(v133 + 3) == 1936942446)
        {
          v133[2] = 108;
          int v137 = 30054;
        }

        else
        {
          uint64_t v136 = *(_DWORD *)v133 == 1853060463 && *(_DWORD *)(v133 + 3) == 1936942446;
          v133[2] = 115;
          int v137 = 30063;
        }

        *(_WORD *)unsigned int v133 = v137;
        int v8 = (v8 - 4);
        goto LABEL_439;
      }

      uint64_t v192 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v192 <= 0xA && (int v193 = 1, ((1 << v192) & 0x495) != 0))
      {
        int v194 = 0;
      }

      else
      {
        int v194 = 1;
        if ((_DWORD)v8 == 6)
        {
          int v193 = 0;
        }

        else
        {
          int v409 = 1LL;
          while (1)
          {
            v410 = v13[v409];
            v411 = (((v410 - 97) >> 1) | (((_BYTE)v410 - 97) << 7));
            uint64_t v23 = v411 > 0xA;
            uint64_t v412 = (1 << v411) & 0x495;
            uint64_t v413 = v23 || v412 == 0;
            if (!v413 || v410 == 121) {
              break;
            }
            if (v130 == ++v409)
            {
              int v193 = 0;
              int v194 = v8 - 5;
              goto LABEL_323;
            }
          }

          int v193 = 1;
          int v194 = v409;
        }
      }

    ++*(_DWORD *)(a4 + 48);
    char v60 = 32LL;
    uint64_t v78 = (sqlite3_value *)32;
    LODWORD(v61) = *(_DWORD *)(a4 + 24);
    uint64_t v10 = a3 + 96;
    if (*(_DWORD *)(a4 + 16) > (int)v61)
    {
      uint64_t v62 = 0LL;
      while (1)
      {
        int v77 = 0LL;
        uint64_t v63 = (void (**)(void, uint64_t, sqlite3_value **))(a3 + 104);
        if (a1 != 18
          || (uint64_t v63 = (void (**)(void, uint64_t, sqlite3_value **))(a3 + 112),
              *(_BYTE *)(*(void *)(a4 + 40) + v62)))
        {
          (*v63)(*v72, v62, &v77);
        }

        uint64_t v11 = sub_1813B9AF8(0LL, v77, &v78);
        if (v11) {
          goto LABEL_216;
        }
        ++v62;
        uint64_t v61 = *(int *)(a4 + 24);
        if (v62 >= *(int *)(a4 + 16) - v61)
        {
          char v60 = (uint64_t)v78;
          break;
        }
      }
    }

    if ((_DWORD)v61)
    {
      v60 += 9LL;
      uint64_t v78 = (sqlite3_value *)v60;
    }

    unint64_t v64 = sub_1812E9EB8(a3, v60);
    if (v64)
    {
      uint64_t v16 = v64;
      *(void *)&uint64_t v4 = 0LL;
      *(_OWORD *)unint64_t v64 = 0u;
      *(_OWORD *)(v64 + 16) = 0u;
      *(void *)(v64 + 16) = v64 + 32;
      uint64_t v78 = 0LL;
      uint64_t v65 = *(_DWORD *)(a4 + 24);
      if (v65)
      {
        *(_BYTE *)(v64 + --*(_DWORD *)(result + 32) = 1;
        *(_BYTE *)(v64 + 33) = HIBYTE(a2);
        *(_BYTE *)(v64 + 34) = BYTE6(a2);
        *(_BYTE *)(v64 + 35) = BYTE5(a2);
        *(_BYTE *)(v64 + 36) = BYTE4(a2);
        *(_BYTE *)(v64 + 37) = BYTE3(a2);
        *(_BYTE *)(v64 + 38) = BYTE2(a2);
        *(_BYTE *)(v64 + 39) = BYTE1(a2);
        *(_BYTE *)(v64 + 40) = a2;
        uint64_t v78 = (sqlite3_value *)9;
        uint64_t v65 = *(_DWORD *)(a4 + 24);
      }

      if (*(_DWORD *)(a4 + 16) > v65)
      {
        uint64_t v66 = 0LL;
        do
        {
          int v77 = 0LL;
          uint64_t v67 = (void (**)(void, uint64_t, sqlite3_value **))(a3 + 104);
          if (a1 != 18
            || (uint64_t v67 = (void (**)(void, uint64_t, sqlite3_value **))(a3 + 112),
                *(_BYTE *)(*(void *)(a4 + 40) + v66)))
          {
            (*v67)(*v72, v66, &v77);
          }

          sub_1813B9AF8((uint64_t)v78 + *(void *)(v16 + 16), v77, &v78);
          ++v66;
        }

        while (v66 < *(int *)(a4 + 16) - (uint64_t)*(int *)(a4 + 24));
      }

      *(_DWORD *)(v16 + 8) = (_DWORD)v78;
      *(_BYTE *)uint64_t v16 = a1;
      int v68 = *(void *)(a4 + 56);
      *(void *)(v16 + 24) = *(void *)(v68 + 8LL * v71);
      *(void *)(v68 + 8LL * v71) = v16;
      goto LABEL_209;
    }

LABEL_253:
    uint64_t v186 = *a5;
    if ((_DWORD)v186)
    {
      signed int v187 = *(_DWORD *)(v154 + 144);
      a5[7] = v187;
      if (*(_DWORD *)(v154 + 148) <= v187)
      {
        sub_18131044C(v154, 71LL, 1LL, v186, 0LL, a6, a7, a8);
        uint64_t v189 = *((void *)a5 + 7);
        if (!v189) {
          goto LABEL_264;
        }
      }

      else
      {
        *(_DWORD *)(v154 + 144) = v187 + 1;
        uint64_t v188 = *(void *)(v154 + 136) + 40LL * v187;
        *(void *)uint64_t v188 = 0x100000047LL;
        *(_DWORD *)(v188 + 8) = v186;
        *(void *)(v188 + 12) = 0LL;
        *(void *)(v188 + 28) = 0LL;
        *(void *)(v188 + 20) = 0LL;
        *(_DWORD *)(v188 + 36) = 0;
        uint64_t v189 = *((void *)a5 + 7);
        if (!v189) {
          goto LABEL_264;
        }
      }
    }

    else
    {
      uint64_t v189 = *((void *)a5 + 7);
      if (!v189) {
        return *((void *)a5 + 13);
      }
    }

    uint64_t v190 = *(unsigned int *)(v189 + 8);
    int v191 = *(_DWORD *)(v154 + 144);
    if (*(_DWORD *)(v154 + 148) <= v191)
    {
      sub_18131044C(v154, 74LL, 0LL, v190, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v154 + 144) = v191 + 1;
      uint64_t v192 = *(void *)(v154 + 136) + 40LL * v191;
      *(void *)uint64_t v192 = 74LL;
      *(_DWORD *)(v192 + 8) = v190;
      *(void *)(v192 + 12) = 0LL;
      *(void *)(v192 + 28) = 0LL;
      *(void *)(v192 + 20) = 0LL;
      *(_DWORD *)(v192 + 36) = 0;
    }

    *(_DWORD *)(v189 + 12) = *(_DWORD *)(v154 + 144);
    ++*(_BYTE *)(v152 + 38);
LABEL_264:
    int v193 = *(_DWORD *)(a3 + 132);
    if (v193 >= 1)
    {
      int v194 = 0;
      uint64_t v195 = *(void *)(a3 + 136);
      do
      {
        if ((*(_WORD *)(v195 + 18) & 6) == 0
          && (*((void *)a5 + 13) & *(void *)(v195 + 48)) == 0LL
          && (*v120 & 0x40) == 0)
        {
          sub_1812B0714(v152, *(void *)v195);
          *(_WORD *)(v195 + 18) |= 4u;
          int v193 = *(_DWORD *)(a3 + 132);
        }

        ++v194;
        v195 += 56LL;
      }

      while (v194 < v193);
    }

    return *((void *)a5 + 13);
  }

  uint64_t v33 = *(unsigned int *)(a3 + 120LL * v27 + 868);
  if ((v32 & 0x100) != 0 && (v32 & 5) != 0)
  {
    uint64_t v34 = **(unsigned __int8 ****)(v11 + 64);
    int v35 = *(_DWORD *)(a1 + 56);
    int v36 = v35 + 1;
    BOOL v37 = v35 == -1;
    *(_DWORD *)(a1 + 56) = v35 + 1;
    uint64_t v38 = sub_1812A3E6C((uint64_t *)a1, v34, (int *)a5, 0LL, v30 & 1, (v35 + 1), a7, a8, a9);
    uint64_t v39 = v38;
    if (!v37 && (_DWORD)v38 != v36)
    {
      uint64_t v40 = *(unsigned __int8 *)(a1 + 31);
      if (v40 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v40 + 1;
        *(_DWORD *)(a1 + 4 * v40 + 224) = v36;
      }
    }

    uint64_t v41 = a5[4];
    uint64_t v42 = a2;
    if (a5[13])
    {
      int v43 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v43)
      {
        sub_18131044C(a2, 13LL, v38, a5[4], 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(a2 + 144) = v43 + 1;
        uint64_t v44 = *(void *)(a2 + 136) + 40LL * v43;
        *(_DWORD *)uint64_t v44 = 13;
        *(_DWORD *)(v44 + 4) = v38;
        *(_DWORD *)(v44 + 8) = v41;
        *(void *)(v44 + 12) = 0LL;
        *(void *)(v44 + 28) = 0LL;
        *(void *)(v44 + 20) = 0LL;
        *(_DWORD *)(v44 + 36) = 0;
      }

      uint64_t v197 = a5[13];
      int v198 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v198)
      {
        sub_181310690(a2, 64LL, v197, v41, v39, 1LL, a7, a8);
      }

      else
      {
        *(_DWORD *)(a2 + 144) = v198 + 1;
        uint64_t v199 = *(void *)(a2 + 136) + 40LL * v198;
        *(_DWORD *)uint64_t v199 = 64832;
        *(_DWORD *)(v199 + 4) = v197;
        *(_DWORD *)(v199 + 8) = v41;
        *(_DWORD *)(v199 + 12) = v39;
        *(_DWORD *)(v199 + 16) = 1;
        *(void *)(v199 + 24) = 0LL;
        *(void *)(v199 + --*(_DWORD *)(result + 32) = 0LL;
      }

      sub_18133906C(a1, a3, a4, v41, v487, a9, a6, a7, a8);
    }

    int v200 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v200)
    {
      sub_18131044C(a2, 30LL, v486, v41, v39, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(a2 + 144) = v200 + 1;
      uint64_t v201 = *(void *)(a2 + 136) + 40LL * v200;
      *(_DWORD *)uint64_t v201 = 30;
      *(_DWORD *)(v201 + 4) = v486;
      *(_DWORD *)(v201 + 8) = v41;
      *(_DWORD *)(v201 + 12) = v39;
      *(void *)(v201 + 24) = 0LL;
      *(void *)(v201 + --*(_DWORD *)(result + 32) = 0LL;
      *(void *)(v201 + 16) = 0LL;
    }

    uint64_t v56 = a5;
    uint64_t v59 = 0LL;
    char v60 = -72;
    goto LABEL_42;
  }

  if ((~v32 & 0x102) == 0)
  {
    if ((v32 & 0x20) != 0)
    {
      uint64_t v61 = **(unsigned __int8 *****)(v11 + 64);
      uint64_t v62 = 1LL;
      uint64_t v56 = a5;
      if ((v32 & 0x10) != 0) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
      uint64_t v56 = a5;
      if ((v32 & 0x10) != 0)
      {
LABEL_46:
        uint64_t v63 = *(unsigned __int8 ****)(*(void *)(v11 + 64) + 8 * v62);
        goto LABEL_283;
      }
    }

    uint64_t v63 = 0LL;
LABEL_283:
    if ((v30 & 1) != 0) {
      signed int v202 = v61;
    }
    else {
      signed int v202 = v63;
    }
    if ((v30 & 1) != 0) {
      int v203 = v63;
    }
    else {
      int v203 = v61;
    }
    if (!v203)
    {
      if ((v30 & 1) != 0) {
        uint64_t v214 = 32LL;
      }
      else {
        uint64_t v214 = 36LL;
      }
      uint64_t v42 = a2;
      int v215 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v215)
      {
        sub_18131044C(a2, v214, v486, v33, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(a2 + 144) = v215 + 1;
        uint64_t v216 = *(void *)(a2 + 136) + 40LL * v215;
        *(_BYTE *)uint64_t v216 = v214;
        *(_WORD *)(v216 + 2) = 0;
        *(_DWORD *)(v216 + 4) = v486;
        *(_DWORD *)(v216 + 8) = v33;
        *(_BYTE *)(v216 + 1) = 0;
        *(void *)(v216 + 12) = 0LL;
        *(void *)(v216 + 28) = 0LL;
        *(void *)(v216 + 20) = 0LL;
        *(_DWORD *)(v216 + 36) = 0;
      }

      goto LABEL_396;
    }

    uint64_t v204 = *v203;
    uint64_t v205 = (*v203)[3];
    int v206 = *v205;
    if (v206 == 176) {
      int v206 = v205[2];
    }
    if (v206 == 138)
    {
      uint64_t v207 = (int **)(*((void *)v205 + 4) + 32LL);
    }

    else
    {
      if (v206 != 177) {
        goto LABEL_338;
      }
      uint64_t v207 = (int **)(v205 + 32);
    }

    if (**v207 >= 2)
    {
      unsigned int v256 = v30 & 1;
      if (*(_BYTE *)(a1 + 31))
      {
        unsigned __int8 v269 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v269;
        uint64_t v257 = *(unsigned int *)(a1 + 4LL * v269 + 224);
      }

      else
      {
        uint64_t v257 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v257;
      }

      uint64_t v42 = a2;
      LODWORD(v497) = v257;
      sub_181338F40(a1, v205, v257, 1LL, (uint64_t)a5, a6, a7, a8);
      uint64_t v268 = (*(_BYTE *)v204 + 1) & 2 | 1u;
LABEL_390:
      uint64_t v285 = byte_1813CDE70[v268];
      int v286 = *(_DWORD *)(v42 + 144);
      if (*(_DWORD *)(v42 + 148) <= v286)
      {
        sub_18131044C(v42, v285, v486, v23, v257, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v42 + 144) = v286 + 1;
        uint64_t v287 = *(void *)(v42 + 136) + 40LL * v286;
        *(_BYTE *)uint64_t v287 = v285;
        *(_WORD *)(v287 + 2) = 0;
        *(_DWORD *)(v287 + 4) = v486;
        *(_DWORD *)(v287 + 8) = v23;
        *(_DWORD *)(v287 + 12) = v257;
        *(_BYTE *)(v287 + 1) = 0;
        *(void *)(v287 + 24) = 0LL;
        *(void *)(v287 + --*(_DWORD *)(result + 32) = 0LL;
        *(void *)(v287 + 16) = 0LL;
      }

      int v288 = v497;
      unsigned int v31 = v256;
      if ((_DWORD)v497)
      {
        uint64_t v289 = *(unsigned __int8 *)(a1 + 31);
        if (v289 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v289 + 1;
          *(_DWORD *)(a1 + 4 * v289 + 224) = v288;
        }
      }

LABEL_408:
          BOOL v298 = v31 == 0;
          unsigned int v299 = 56;
          unsigned int v300 = 54;
LABEL_409:
          if (v298) {
            uint64_t v301 = v300;
          }
          else {
            uint64_t v301 = v299;
          }
          if (v293 == 176) {
            int v293 = v292[2];
          }
          if (v293 == 138)
          {
            unsigned int v292 = (unsigned __int8 *)*((void *)v292 + 4);
          }

          else if (v293 != 177)
          {
LABEL_419:
            unsigned int v302 = (_WORD *)v202 + 9;
            __int16 v303 = *((_WORD *)v202 + 9);
            if ((v303 & 4) == 0)
            {
              int v304 = 0;
              int v305 = *a5;
              do
              {
                if (v305 && (*((_BYTE *)*v202 + 4) & 1) == 0) {
                  break;
                }
                BOOL v306 = !v304 || (v303 & 0x400) == 0;
                __int16 v307 = v306 ? 4 : 512;
                *unsigned int v302 = v307 | v303;
                int v308 = *((_DWORD *)v202 + 6);
                if (v308 < 0) {
                  break;
                }
                BOOL v309 = v202[1][4];
                int v310 = &v309[56 * v308];
                unsigned __int8 v311 = v310[22] - 1;
                v310[22] = v311;
                if (v311) {
                  break;
                }
                signed int v202 = (unsigned __int8 ***)&v309[56 * v308];
                unsigned int v302 = (_WORD *)v202 + 9;
                __int16 v303 = *((_WORD *)v202 + 9);
                --v304;
              }

              while ((v303 & 4) == 0);
            }

LABEL_433:
            signed int v312 = *(_DWORD *)(v42 + 144);
            *((_BYTE *)a5 + 65) = v31 ^ 0x27;
            a5[17] = v486;
            a5[18] = v312;
            uint64_t v313 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v313;
            if (*(_DWORD *)(v42 + 148) <= v312)
            {
              sub_18131044C(v42, 135LL, v486, v313, 0LL, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v42 + 144) = v312 + 1;
              uint64_t v314 = *(void *)(v42 + 136) + 40LL * v312;
              *(_DWORD *)uint64_t v314 = 135;
              *(_DWORD *)(v314 + 4) = v486;
              *(_DWORD *)(v314 + 8) = v313;
              *(void *)(v314 + 12) = 0LL;
              *(void *)(v314 + 28) = 0LL;
              *(void *)(v314 + 20) = 0LL;
              *(_DWORD *)(v314 + 36) = 0;
            }

            int v315 = *(_DWORD *)(v42 + 144);
            if (*(_DWORD *)(v42 + 148) <= v315)
            {
              sub_18131044C(v42, v301, v291, v23, v313, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v42 + 144) = v315 + 1;
              uint64_t v316 = *(void *)(v42 + 136) + 40LL * v315;
              *(_BYTE *)uint64_t v316 = v301;
              *(_WORD *)(v316 + 2) = 0;
              *(_DWORD *)(v316 + 4) = v291;
              *(_DWORD *)(v316 + 8) = v23;
              *(_DWORD *)(v316 + 12) = v313;
              *(_BYTE *)(v316 + 1) = 0;
              *(void *)(v316 + 24) = 0LL;
              *(void *)(v316 + --*(_DWORD *)(result + 32) = 0LL;
              *(void *)(v316 + 16) = 0LL;
            }

            int v317 = *(_DWORD *)(v42 + 144);
            BOOL v28 = __OFSUB__(v317, 1);
            int v318 = v317 - 1;
            uint64_t v56 = a5;
            if (v318 < 0 == v28)
            {
              uint64_t v59 = 0LL;
              *(_WORD *)(*(void *)(v42 + 136) + 40LL * v318 + 2) = 83;
              goto LABEL_136;
            }

LABEL_552:
            uint64_t v59 = 0LL;
            goto LABEL_136;
          }

          goto LABEL_419;
        }

        unsigned int v295 = (int **)(v292 + 32);
      }

      if (**v295 > 1) {
        goto LABEL_408;
      }
      goto LABEL_405;
    }

LABEL_338:
    unsigned int v256 = v30 & 1;
    uint64_t v257 = sub_18131A8A4(a1, v205, &v497);
    uint64_t v258 = (_WORD *)v203 + 9;
    __int16 v259 = *((_WORD *)v203 + 9);
    if ((v259 & 4) == 0)
    {
      int v260 = 0;
      int v261 = *v56;
      do
      {
        if (v261 && (*((_BYTE *)*v203 + 4) & 1) == 0) {
          break;
        }
        BOOL v262 = !v260 || (v259 & 0x400) == 0;
        __int16 v263 = v262 ? 4 : 512;
        *uint64_t v258 = v263 | v259;
        unsigned int v264 = *((_DWORD *)v203 + 6);
        if ((v264 & 0x80000000) != 0) {
          break;
        }
        int v265 = v203[1][4];
        uint64_t v266 = &v265[56 * v264];
        unsigned __int8 v267 = v266[22] - 1;
        v266[22] = v267;
        if (v267) {
          break;
        }
        int v203 = (unsigned __int8 ***)&v265[56 * v264];
        uint64_t v258 = (_WORD *)v203 + 9;
        __int16 v259 = *((_WORD *)v203 + 9);
        --v260;
      }

      while ((v259 & 4) == 0);
    }

    uint64_t v268 = *(unsigned __int8 *)v204 - 54LL;
    uint64_t v42 = a2;
    goto LABEL_390;
  }

  if ((v32 & 0x200) != 0)
  {
    uint64_t v208 = *(unsigned __int16 *)(v11 + 24);
    unsigned int v209 = *(unsigned __int16 *)(v11 + 28);
    uint64_t v210 = *(void *)(v11 + 32);
    unsigned int v483 = a5[2];
    if ((v32 & 0x20) != 0)
    {
      unsigned int v213 = v208 + 1;
      uint64_t v212 = *(void *)(*(void *)(v11 + 64) + 8 * v208);
      unsigned int v211 = *(unsigned __int16 *)(v11 + 26);
    }

    else
    {
      unsigned int v211 = 0;
      uint64_t v212 = 0LL;
      unsigned int v213 = *(unsigned __int16 *)(v11 + 24);
    }

    unsigned int v460 = *(unsigned __int16 *)(v11 + 26);
    uint64_t v471 = *(void *)(v11 + 32);
    uint64_t v479 = *(unsigned __int16 *)(v11 + 24);
    uint64_t v466 = v212;
    if ((v32 & 0x10) == 0)
    {
      int v241 = 0;
      uint64_t v242 = 0LL;
      goto LABEL_317;
    }

    uint64_t v242 = *(void *)(*(void *)(v11 + 64) + 8LL * v213);
    if (v211 <= v209) {
      unsigned int v211 = *(unsigned __int16 *)(v11 + 28);
    }
    if ((*(_WORD *)(v242 + 18) & 0x100) != 0)
    {
      uint64_t v243 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v243;
      a5[11] = v243;
      sub_1813103F4(a2, 71LL, 1LL, v243, (uint64_t)a5, a6, a7, a8);
      uint64_t v212 = v466;
      uint64_t v208 = v479;
      unsigned int v244 = *(_DWORD *)(a2 + 144);
      unsigned int v31 = v30 & 1;
      unsigned int v245 = a5[11];
      a5[11] = 2 * v245;
      a5[12] = v244;
      a5[11] = v30 & 1 ^ (*(_BYTE *)(*(void *)(v210 + 56) + v479) == 1) | (2 * v245);
    }

    if (v212) {
      goto LABEL_316;
    }
    uint64_t v284 = *(unsigned __int16 *)(*(void *)(v210 + 8) + 2 * v208);
    if (*(__int16 *)(*(void *)(v210 + 8) + 2 * v208) < 0)
    {
      if ((_DWORD)v284 == 65534)
      {
LABEL_555:
        int v241 = 1;
LABEL_317:
        if ((*(_DWORD *)(v11 + 48) & 0x80030) == 0x80000)
        {
          uint64_t v246 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v246;
          a5[9] = v246;
          if (*a5)
          {
            sub_1813103F4(a2, 71LL, 0LL, v246, (uint64_t)a5, a6, a7, a8);
            uint64_t v212 = v466;
            uint64_t v208 = v479;
          }

          unsigned int v474 = v246;
          int v247 = *(_DWORD *)(a1 + 68) - 1;
          *(_DWORD *)(a1 + 68) = v247;
          a5[10] = v247;
          int v241 = 1;
          unsigned int v211 = 1;
        }

        else
        {
          unsigned int v474 = 0;
        }

        if (v208 >= *(unsigned __int16 *)(v210 + 96)
          || (v30 & 1) == (*(_BYTE *)(*(void *)(v210 + 56) + v208) != 0))
        {
          int v452 = 0;
          uint64_t v470 = v242;
          unsigned int v463 = v209;
        }

        else
        {
          unsigned int v248 = v460;
          unsigned int v460 = v209;
          unsigned int v463 = v248;
          int v452 = v241;
          uint64_t v470 = v212;
          uint64_t v466 = v242;
          int v241 = 0;
        }

        if (a4 >= 1 && (*(_BYTE *)(v11 + 50) & 0x10) != 0) {
          sub_181319BA8(a2, 136LL, v483, v33, (uint64_t)a5, a6, a7, a8);
        }
        unsigned int v251 = sub_181339364(a1, (uint64_t)a5, v31, v211, &v497);
        v458 = 0LL;
        uint64_t v252 = (char *)v497;
        if ((void)v497 && v463) {
          v458 = (char *)sub_18129E1F8(v489, (char *)(v497 + v479));
        }
        v468 = v252;
        uint64_t v253 = 4LL;
        if (v474) {
          uint64_t v253 = 10LL;
        }
        uint64_t v254 = a5[v253];
        if (v466) {
          BOOL v255 = (*(_WORD *)(v466 + 20) & 0x28) != 0;
        }
        else {
          BOOL v255 = 1;
        }
        if (v470) {
          BOOL v270 = (*(_WORD *)(v470 + 20) & 0x28) != 0;
        }
        else {
          BOOL v270 = 1;
        }
        BOOL v271 = v479 != 0;
        unsigned int v476 = v251;
        int v453 = v270;
        if (!v466)
        {
          if (v241)
          {
            uint64_t v275 = a2;
            sub_1813103F4(a2, 75LL, 0LL, v251 + v479, v250, a6, a7, a8);
            int v455 = 0;
            uint64_t v276 = (v479 + 1);
            int v461 = 1;
            BOOL v271 = 1;
            uint64_t v281 = v474;
          }

          else
          {
            uint64_t v281 = v474;
            int v455 = v255;
            if (v474)
            {
              uint64_t v275 = a2;
              sub_1813103F4(a2, 75LL, 0LL, v251 + v479, v250, a6, a7, a8);
              int v461 = 0;
              uint64_t v276 = (v479 + 1);
              BOOL v271 = 1;
            }

            else
            {
              int v461 = 0;
              uint64_t v276 = v479;
              uint64_t v275 = a2;
            }
          }

          uint64_t v278 = v254;
          int v279 = v468;
LABEL_558:
          uint64_t v386 = v276;
          if (v279)
          {
            int v387 = v276 - v461;
            if ((int)v276 - v461 < 1)
            {
              a6 = (uint64_t)v279;
              uint64_t v389 = v476;
            }

            else
            {
              uint64_t v388 = v476;
              uint64_t v389 = v387 + v476;
              double v390 = v279;
              a6 = (uint64_t)&v279[v387];
              while (*v390 <= 65)
              {
                uint64_t v388 = (v388 + 1);
                ++v390;
                BOOL v28 = __OFSUB__(v387--, 1);
                if ((v387 < 0) ^ v28 | (v387 == 0))
                {
                  int v387 = 0;
                  goto LABEL_567;
                }
              }

              a6 = (uint64_t)v390;
              uint64_t v389 = v388;
            }

LABEL_567:
            uint64_t v391 = v387 - 1LL;
            int v392 = v387;
            while (1)
            {
              BOOL v28 = __OFSUB__(v392--, 1);
              if ((v392 < 0) ^ v28 | (v392 == 0)) {
                break;
              }
              int v393 = *(char *)(a6 + v391--);
              if (v393 >= 66)
              {
                uint64_t v394 = (v392 + 1);
                goto LABEL_573;
              }
            }

            if (v387 < 1) {
              goto LABEL_574;
            }
            uint64_t v394 = 1LL;
LABEL_573:
            sub_1812B9B68(*(uint64_t **)(a1 + 16), 96LL, v389, v394, 0LL, a6, v394, a8);
            LODWORD(v276) = v386;
          }

LABEL_574:
          if (*(_WORD *)(v11 + 54)) {
            BOOL v395 = (_DWORD)v276 == *(unsigned __int16 *)(v11 + 54);
          }
          else {
            BOOL v395 = 0;
          }
          if (v395)
          {
            int v457 = 0;
            v411 = (uint64_t *)a1;
            uint64_t v412 = v483;
            uint64_t v413 = v479;
          }

          else
          {
            if ((_DWORD)v281) {
              sub_1813103F4(v275, 71LL, 1LL, v281, v250, a6, a7, a8);
            }
            int v396 = v455 << 31 >> 31;
            uint64_t v397 = a5[13];
            if ((_DWORD)v397)
            {
              sub_1812DC7B4(a2, 64LL, v397, v278, v476, v479, a7, a8);
              sub_18133906C(a1, a3, a4, v278, v487, v401, v398, v399, v400);
            }

            int v457 = 0;
            if (v271) {
              int v402 = 4;
            }
            else {
              int v402 = 0;
            }
            if ((v396 & 1) != 0) {
              int v403 = 2;
            }
            else {
              int v403 = 0;
            }
            unsigned int v404 = v31;
            unsigned int v405 = v402 | v403 | v31;
            uint64_t v406 = byte_1813CA3A6[v405];
            uint64_t v407 = v386;
            if (v405 == 6 && (*(_DWORD *)(v11 + 48) & 0x100000) != 0)
            {
              uint64_t v407 = v386;
              int v457 = sub_181319BA8( a2,  124LL,  ((**(__int16 **)(v471 + 16) + 9) / 10),  v249,  v250,  a6,  a7,  a8);
              if (v470 | v466)
              {
                int v408 = *(_DWORD *)(a2 + 144);
                if (v408 >= 1) {
                  *(_WORD *)(*(void *)(a2 + 136) + 40LL * (v408 - 1) + 2) = 1;
                }
                int v409 = v408 + 1;
                if (*(_BYTE *)(*(void *)a2 + 103LL)) {
                  v410 = &byte_18C550680;
                }
                else {
                  v410 = (char *)(*(void *)(a2 + 136) + 40LL * v457);
                }
                int v457 = 0;
                *((_DWORD *)v410 + 2) = v409;
              }
            }

            sub_1812DC7B4(a2, v406, v483, v278, v476, v407, a7, a8);
            if (v474)
            {
              sub_1813103F4(a2, 9LL, 0LL, (*(_DWORD *)(a2 + 144) + 2), v250, a6, a7, a8);
              else {
                int v416 = 2;
              }
              unsigned int v31 = v404;
              sub_1812DC7B4(a2, byte_1813CA3A6[v416 | v404], v483, v278, v476, (v407 + v396), v414, v415);
              v411 = (uint64_t *)a1;
            }

            else
            {
              v411 = (uint64_t *)a1;
              unsigned int v31 = v404;
            }

            uint64_t v412 = v483;
            uint64_t v413 = v479;
            uint64_t v281 = v474;
          }

          if (v470)
          {
            unsigned int v417 = v31;
            v418 = *(unsigned __int8 **)(*(void *)v470 + 24LL);
            uint64_t v419 = v476 + v413;
            sub_181338F40((uint64_t)v411, v418, v419, v463, v250, a6, a7, a8);
            sub_1813399A4(a2, (uint64_t)a5, v470);
            if ((*(_WORD *)(v470 + 18) & 0x80) == 0 && sub_18131D384(v418)) {
              sub_1813103F4(a2, 50LL, v419, v278, v250, a6, a7, a8);
            }
            if (v458)
            {
              sub_1813399F0((uint64_t)v418, v463, (uint64_t)v458);
              sub_181339BD4(v411, v419, v463, v458, v420, v421, v422, v423);
            }

            uint64_t v424 = v463 + v479;
            int v425 = *v418;
            if (v425 == 176) {
              int v425 = v418[2];
            }
            if (v425 == 138)
            {
              v426 = (int **)(*((void *)v418 + 4) + 32LL);
            }

            else
            {
              if (v425 != 177)
              {
LABEL_622:
                sub_1812B4678((int *)a5, v470);
                uint64_t v412 = v483;
                goto LABEL_625;
              }

              v426 = (int **)(v418 + 32);
            }

            if (**v426 <= 1) {
              goto LABEL_622;
            }
            int v453 = 1;
            uint64_t v412 = v483;
          }

          else if (v452)
          {
            unsigned int v417 = v31;
            if (!(_DWORD)v281)
            {
              sub_1813103F4(a2, 75LL, 0LL, v476 + v413, v250, a6, a7, a8);
              LODWORD(v413) = v479;
              int v453 = 0;
            }

            uint64_t v424 = (v413 + 1);
          }

          else
          {
            unsigned int v417 = v31;
            uint64_t v424 = v413;
          }

LABEL_625:
          if (v468) {
            sub_1813014B0((void *)v489, v468);
          }
          if (v458) {
            sub_1813014B0((void *)v489, v458);
          }
          unsigned int v427 = *(_DWORD *)(a2 + 144);
          a5[18] = v427;
          if ((_DWORD)v424)
          {
            if ((_DWORD)v281) {
              sub_1813103F4(a2, 17LL, v281, v427 + 3, v250, a6, a7, a8);
            }
            uint64_t v412 = v483;
            sub_1812DC7B4(a2, asc_1813CA3AE[v453 | (2 * v417)], v483, v278, v476, v424, a7, a8);
            if (v457)
            {
              if (*(_BYTE *)(*(void *)a2 + 103LL)) {
                v428 = &byte_18C550680;
              }
              else {
                v428 = (char *)(*(void *)(a2 + 136) + 40LL * v457);
              }
              *((_DWORD *)v428 + 2) = *(_DWORD *)(a2 + 144);
            }
          }

          uint64_t v429 = (uint64_t)v411;
          if ((_DWORD)v281)
          {
            sub_1813103F4(a2, 16LL, v281, (*(_DWORD *)(a2 + 144) + 2), v250, a6, a7, a8);
            sub_1812DC7B4( a2,  asc_1813CA3AE[v461 | (2 * v417)],  v412,  v278,  v476,  (v424 + v461),  v430,  v431);
          }

          int v432 = *(_DWORD *)(v11 + 48);
          uint64_t v56 = a5;
          if ((v432 & 0x40000) != 0)
          {
            sub_181279C3C(a2, 125LL, v412, v479, v479, a6, a7, a8);
            int v432 = *(_DWORD *)(v11 + 48);
          }

          if ((v432 & 0x40) != 0 && (*(_WORD *)(a3 + 60) & 0x1020) == 0)
          {
            int v434 = 1;
            uint64_t v42 = a2;
          }

          else
          {
            uint64_t v433 = *(void *)(v471 + 24);
            if ((*(_BYTE *)(v433 + 48) & 0x80) != 0)
            {
              if (v486 != (_DWORD)v412)
              {
                for (uint64_t j = *(void *)(v433 + 16); j; uint64_t j = *(void *)(j + 40))
                {
                  if ((*(_WORD *)(j + 99) & 3) == 2) {
                    break;
                  }
                }

                uint64_t v439 = sub_18131B020(v429, *(unsigned __int16 *)(j + 94));
                if (*(_WORD *)(j + 94))
                {
                  unint64_t v440 = 0LL;
                  do
                  {
                    if (*(_WORD *)(v471 + 96))
                    {
                      uint64_t v442 = 0LL;
                      while (*(unsigned __int16 *)(*(void *)(v471 + 8) + 2 * v442) != *(unsigned __int16 *)(*(void *)(j + 8) + 2 * v440))
                      {
                      }
                    }

                    else
                    {
LABEL_658:
                      LOWORD(v442) = -1;
                    }

                    uint64_t v443 = (__int16)v442;
                    uint64_t v444 = (v439 + v440);
                    int v445 = *(_DWORD *)(a2 + 144);
                    if (*(_DWORD *)(a2 + 148) > v445)
                    {
                      *(_DWORD *)(a2 + 144) = v445 + 1;
                      uint64_t v441 = *(void *)(a2 + 136) + 40LL * v445;
                      *(_DWORD *)uint64_t v441 = 94;
                      *(_DWORD *)(v441 + 4) = v483;
                      *(_DWORD *)(v441 + 8) = v443;
                      *(_DWORD *)(v441 + 12) = v444;
                      *(void *)(v441 + 24) = 0LL;
                      *(void *)(v441 + --*(_DWORD *)(result + 32) = 0LL;
                      *(void *)(v441 + 16) = 0LL;
                    }

                    else
                    {
                      sub_18131044C(a2, 94LL, v483, v443, v444, v436, v437, v438);
                    }

                    ++v440;
                    unint64_t v436 = *(unsigned __int16 *)(j + 94);
                  }

                  while (v440 < v436);
                }

                else
                {
                  unint64_t v436 = 0LL;
                }

                uint64_t v42 = a2;
                sub_1812DC7B4(a2, 28LL, v486, v492, v439, v436, v437, v438);
                int v434 = 0;
                LODWORD(v412) = v483;
                goto LABEL_664;
              }
            }

            else
            {
              sub_181339C60((uint64_t *)a3, v471, v486, v412, v250, a6, a7, a8);
            }

            int v434 = 0;
            uint64_t v42 = a2;
          }

LABEL_664:
          if (!*a5)
          {
            uint64_t v446 = *(void *)(v471 + 72);
            if (v446) {
              sub_181339F64(v446, v486, a3 + 104);
            }
          }

          int v447 = *(_DWORD *)(v11 + 48);
          if ((v447 & 0x1000) != 0)
          {
            char v448 = -72;
          }

          else if (v417)
          {
            char v448 = 38;
          }

          else
          {
            char v448 = 39;
          }

          *((_BYTE *)a5 + 65) = v448;
          a5[17] = v412;
          *((_BYTE *)a5 + 66) = BYTE2(v447) & 1;
          if ((v447 & 0xF) == 0) {
            *((_BYTE *)a5 + 67) = 1;
          }
          if (v434) {
            uint64_t v59 = 0LL;
          }
          else {
            uint64_t v59 = v471;
          }
          goto LABEL_136;
        }

        int v455 = v255;
        unsigned int v272 = v31;
        int v273 = *(unsigned __int8 **)(*(void *)v466 + 24LL);
        uint64_t v274 = v251 + v479;
        sub_181338F40(a1, v273, v274, v460, v250, a6, a7, a8);
        uint64_t v275 = a2;
        sub_1813399A4(a2, (uint64_t)a5, v466);
        if ((*(_WORD *)(v466 + 18) & 0x80) == 0 && sub_18131D384(v273)) {
          sub_1813103F4(a2, 50LL, v274, v254, v250, a6, a7, a8);
        }
        if (v468) {
          sub_1813399F0((uint64_t)v273, v460, (uint64_t)&v468[v479]);
        }
        uint64_t v276 = v460 + v479;
        int v277 = *v273;
        uint64_t v278 = v254;
        if (v277 == 176) {
          int v277 = v273[2];
        }
        int v279 = v468;
        if (v277 == 138)
        {
          int v280 = (int **)(*((void *)v273 + 4) + 32LL);
        }

        else
        {
          if (v277 != 177) {
            goto LABEL_381;
          }
          int v280 = (int **)(v273 + 32);
        }

        if (**v280 > 1)
        {
          int v461 = 0;
          BOOL v271 = 1;
          int v455 = 1;
          goto LABEL_383;
        }

LABEL_381:
        sub_1812B4678((int *)a5, v466);
        uint64_t v276 = v460 + v479;
        int v461 = 0;
        BOOL v271 = 1;
LABEL_383:
        unsigned int v31 = v272;
        uint64_t v281 = v474;
        goto LABEL_558;
      }
    }

    else if ((*(_BYTE *)(*(void *)(*(void *)(v210 + 24) + 8LL) + 16 * v284 + 8) & 0xF) == 0)
    {
      goto LABEL_555;
    }

LABEL_316:
    int v241 = 0;
    goto LABEL_317;
  }

  uint64_t v86 = a1;
  unsigned int v87 = v486;
  if ((v32 & 0x2000) == 0)
  {
    if ((v29 & 0x40) != 0)
    {
      uint64_t v59 = 0LL;
      uint64_t v56 = a5;
      *((_BYTE *)a5 + 65) = -72;
      uint64_t v42 = a2;
    }

    else
    {
      uint64_t v56 = a5;
      *((_BYTE *)a5 + 65) = asc_1813CA3AE[(v30 & 1) + 4];
      a5[17] = v486;
      uint64_t v42 = a2;
      int v88 = sub_1813103F4(a2, asc_1813CA3AE[(v30 & 1) + 6], v486, v33, (uint64_t)a5, a6, a7, a8);
      uint64_t v59 = 0LL;
      a5[18] = v88 + 1;
      *((_BYTE *)a5 + 67) = 1;
    }

    goto LABEL_136;
  }

  unsigned int v473 = *(_DWORD *)(a1 + 52);
  int v217 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 52) = v473 + 1;
  *(_DWORD *)(a1 + 56) = v217;
  unsigned int v467 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v467;
  uint64_t v465 = *(void *)(v12 + 104LL * v13 + 40);
  uint64_t v218 = **(void **)(v11 + 64);
  uint64_t v219 = *(void *)(v218 + 32);
  *((_BYTE *)a5 + 65) = 67;
  unsigned int v469 = v217;
  a5[17] = v217;
  unsigned int v220 = *(unsigned __int8 *)(a3 + 64);
  if (v220 < 2)
  {
    uint64_t v223 = *(void **)(a3 + 8);
    goto LABEL_375;
  }

  uint64_t v221 = v220 - a4;
  uint64_t v222 = sub_1812F2264(v489, 104LL * ((int)v221 - 1) + 112);
  if (v222)
  {
    uint64_t v223 = (void *)v222;
    *(_DWORD *)uint64_t v222 = v221;
    *(_DWORD *)(v222 + 4) = v221;
    __int128 v224 = *(_OWORD *)(v14 + 8);
    __int128 v225 = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v222 + 40) = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v222 + 24) = v225;
    *(_OWORD *)(v222 + 8) = v224;
    __int128 v226 = *(_OWORD *)(v14 + 56);
    __int128 v227 = *(_OWORD *)(v14 + 72);
    __int128 v228 = *(_OWORD *)(v14 + 88);
    *(void *)(v222 + 104) = *(void *)(v14 + 104);
    *(_OWORD *)(v222 + 88) = v228;
    *(_OWORD *)(v222 + 72) = v227;
    *(_OWORD *)(v222 + 56) = v226;
    if ((int)v221 >= 2)
    {
      uint64_t v229 = *(void *)(a3 + 8) + 8LL;
      uint64_t v56 = a5;
      int v230 = (unsigned __int8 *)(a5 + 46);
      uint64_t v231 = v221 - 1;
      uint64_t v232 = 112LL;
      do
      {
        unsigned int v233 = *v230;
        v230 += 120;
        uint64_t v234 = v222 + v232;
        uint64_t v235 = v229 + 104LL * v233;
        __int128 v236 = *(_OWORD *)v235;
        __int128 v237 = *(_OWORD *)(v235 + 32);
        *(_OWORD *)(v234 + 16) = *(_OWORD *)(v235 + 16);
        *(_OWORD *)(v234 + --*(_DWORD *)(result + 32) = v237;
        *(_OWORD *)uint64_t v234 = v236;
        __int128 v238 = *(_OWORD *)(v235 + 48);
        __int128 v239 = *(_OWORD *)(v235 + 64);
        __int128 v240 = *(_OWORD *)(v235 + 80);
        *(void *)(v234 + 96) = *(void *)(v235 + 96);
        *(_OWORD *)(v234 + 64) = v239;
        *(_OWORD *)(v234 + 80) = v240;
        *(_OWORD *)(v234 + 48) = v238;
        v232 += 104LL;
        --v231;
      }

      while (v231);
      goto LABEL_376;
    }

LABEL_375:
    uint64_t v56 = a5;
LABEL_376:
    uint64_t v42 = a2;
    if ((*(_WORD *)(a3 + 60) & 0x10) != 0)
    {
      unsigned int v456 = 0;
      unsigned int v459 = 0;
    }

    else
    {
      if ((*(_BYTE *)(v465 + 48) & 0x80) != 0)
      {
        for (uint64_t k = *(void *)(v465 + 16); k; uint64_t k = *(void *)(k + 40))
        {
          if ((*(_WORD *)(k + 99) & 3) == 2) {
            break;
          }
        }

        uint64_t v320 = *(unsigned int *)(a1 + 52);
        *(_DWORD *)(a1 + 52) = v320 + 1;
        unsigned int v459 = v320;
        sub_1813103F4(a2, 118LL, v320, *(unsigned __int16 *)(k + 94), (uint64_t)a5, a6, a7, a8);
        sub_181319D4C(a1, k);
      }

      else
      {
        int v282 = *(_DWORD *)(a1 + 56);
        uint64_t v283 = (v282 + 1);
        *(_DWORD *)(a1 + 56) = v283;
        unsigned int v459 = v282 + 1;
        sub_1813103F4(a2, 75LL, 0LL, v283, (uint64_t)a5, a6, a7, a8);
      }

      unsigned int v456 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v456;
    }

    int v450 = sub_1813103F4(a2, 71LL, 0LL, v469, (uint64_t)a5, a6, a7, a8);
    int v326 = *(_DWORD *)(a3 + 124);
    uint64_t v480 = v219;
    if (v326 <= 1)
    {
      uint64_t v477 = 0LL;
    }

    else
    {
      uint64_t v327 = v223;
      uint64_t v328 = 0LL;
      uint64_t v329 = 0LL;
      uint64_t v330 = 0LL;
      do
      {
        uint64_t v331 = *(void *)(a3 + 136);
        uint64_t v332 = v331 + v328;
        if (v331 + v328 != v218
          && (*(_WORD *)(v332 + 18) & 0x8006) == 0
          && (*(_WORD *)(v331 + v328 + 20) & 0x3FFF) != 0
          && (*(_BYTE *)(*(void *)v332 + 6LL) & 0x40) == 0)
        {
          int v333 = sub_18129C928(v489, *(unsigned __int8 **)v332, 0LL, 0LL);
          uint64_t v330 = sub_1813152F8((uint64_t *)a1, v330, (uint64_t)v333);
          int v326 = *(_DWORD *)(a3 + 124);
        }

        ++v329;
        v328 += 56LL;
      }

      while (v329 < v326);
      if (v330) {
        uint64_t v477 = sub_1813132BC((uint64_t *)a1, 44, 0LL, v330);
      }
      else {
        uint64_t v477 = 0LL;
      }
      uint64_t v42 = a2;
      uint64_t v223 = v327;
    }

    sub_18131CCF8((uint64_t *)a1, 1, "MULTI-INDEX OR", v321, v322, v323, v324, v325, v449);
    if (*(int *)(v219 + 20) < 1)
    {
      uint64_t v472 = 0LL;
      int v484 = 0;
LABEL_536:
      int v381 = *(_DWORD *)(v86 + 312);
      if (v381)
      {
        uint64_t v382 = *(void **)(v86 + 16);
        if (*(_BYTE *)(*v382 + 103LL)) {
          char v383 = &byte_18C550680;
        }
        else {
          char v383 = (char *)(v382[17] + 40LL * v381);
        }
        int v384 = v484;
        int v381 = *((_DWORD *)v383 + 2);
      }

      else
      {
        int v384 = v484;
      }

      *(_DWORD *)(v86 + 312) = v381;
      *((void *)v56 + 10) = v472;
      if (v472) {
        v56[2] = v473;
      }
      if (v477)
      {
        *(void *)(v477 + 16) = 0LL;
        sub_181309110((void *)v489, (unsigned __int8 *)v477);
      }

      if (*(_BYTE *)(*(void *)v42 + 103LL)) {
        BOOL v385 = &byte_18C550680;
      }
      else {
        BOOL v385 = (char *)(*(void *)(v42 + 136) + 40LL * v450);
      }
      *((_DWORD *)v385 + 1) = *(_DWORD *)(v42 + 144);
      sub_181319CC8(v42, v56[3], v334, v335, v336, v337, v338, v339);
      sub_18131B3E0(v42, v467);
      v56[18] = *(_DWORD *)(v42 + 144);
      if (!v384)
      {
        sub_1812B4678((int *)v56, v218);
        uint64_t v59 = 0LL;
        goto LABEL_136;
      }

      goto LABEL_552;
    }

    uint64_t v340 = 0LL;
    int v484 = 0;
    uint64_t v472 = 0LL;
    uint64_t v451 = v218;
    v464 = v223;
    while (1)
    {
      uint64_t v341 = *(void *)(v219 + 32);
      uint64_t v342 = v341 + 56 * v340;
      if (*(_DWORD *)(v342 + 28) == v87 || (*(_WORD *)(v341 + 56 * v340 + 20) & 0x400) != 0)
      {
        if (*(void *)v342)
        {
          uint64_t v343 = (unsigned __int8 *)sub_18129C928(v489, *(unsigned __int8 **)v342, 0LL, 0LL);
          int v344 = v343;
          if (!*(_BYTE *)(v489 + 103))
          {
            uint64_t v345 = v477;
LABEL_475:
            uint64_t v346 = v344;
            if (v345)
            {
              *(void *)(v345 + 16) = v344;
              uint64_t v346 = (unsigned __int8 *)v345;
            }

            sub_18131CCF8((uint64_t *)v86, 1, "INDEX %d", v335, v336, v337, v338, v339, v340 + 1);
            uint64_t v347 = sub_18128A51C(v86, v223, v346, 0LL, 0LL, 0LL, 32LL, v473);
            if (v347)
            {
              uint64_t v348 = v347;
              uint64_t v349 = v347 + 856;
              int v350 = sub_18132DF04(v86, (uint64_t)v223, v347 + 856, 0);
              sub_181331228(v42, (uint64_t)v223, v349, v350);
              int v358 = 0;
              uint64_t v219 = v480;
              if ((*(_WORD *)(a3 + 60) & 0x10) != 0) {
                goto LABEL_506;
              }
              if (v340 == *(_DWORD *)(v480 + 20) - 1) {
                uint64_t v359 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v359 = v340;
              }
              if ((*(_BYTE *)(v465 + 48) & 0x80) == 0)
              {
                sub_1813103F4(v42, 135LL, v486, v456, v354, v355, v356, v357);
                int v358 = sub_1812DC7B4(v42, 47LL, v459, 0LL, v456, v359, v360, v361);
                goto LABEL_506;
              }

              uint64_t v362 = *(void *)(v465 + 16);
              for (m = v359; v362; uint64_t v362 = *(void *)(v362 + 40))
              {
                if ((*(_WORD *)(v362 + 99) & 3) == 2) {
                  break;
                }
              }

              uint64_t v363 = *(unsigned __int16 *)(v362 + 94);
              unsigned int v462 = sub_18131B020(a1, *(unsigned __int16 *)(v362 + 94));
              if ((_DWORD)v363)
              {
                for (uint64_t n = 0LL; n != v363; ++n)
                  *(double *)v364.i64 = sub_18131C0EC( a2,  v465,  v486,  *(__int16 *)(*(void *)(v362 + 8) + 2 * n),  v462 + n,  v355,  v356,  v357,  v364);
              }

              if ((_DWORD)v359)
              {
                uint64_t v42 = a2;
                int v358 = sub_1812DC7B4(a2, 29LL, v459, 0LL, v462, v363, v356, v357);
                uint64_t v219 = v480;
                if (m < 0) {
                  goto LABEL_498;
                }
              }

              else
              {
                int v358 = 0;
                uint64_t v42 = a2;
                uint64_t v219 = v480;
              }

              sub_181279C3C(v42, 97LL, v462, v363, v456, v355, v356, v357);
              sub_1812DC7B4(v42, 138LL, v459, v456, v462, v363, v366, v367);
              if (m)
              {
                int v368 = *(_DWORD *)(v42 + 144);
                BOOL v28 = __OFSUB__(v368, 1);
                int v369 = v368 - 1;
                if (v369 < 0 == v28) {
                  *(_WORD *)(*(void *)(v42 + 136) + 40LL * v369 + 2) = 16;
                }
              }

                      if (*(_BYTE *)(a1 + 460)) {
                        sub_181376150((int *)v220, a1, v144, v145, v146);
                      }
                      if (!v141) {
                        goto LABEL_384;
                      }
                      unsigned int v148 = (void (**)(unsigned __int8 *))&off_18C4653A8;
                      if (dword_18C465380)
                      {
                        if ((void)xmmword_18C468B70) {
                          xmmword_18C465400(xmmword_18C468B70);
                        }
                        qword_18C468AC8[0] -= (int)off_18C4653B8(v141);
                        --qword_18C468B10;
                        off_18C4653A8(v141);
                        uint64_t v141 = (unsigned __int8 *)xmmword_18C468B70;
                        if (!(void)xmmword_18C468B70) {
                          goto LABEL_384;
                        }
                        unsigned int v148 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
                      }

                      (*v148)(v141);
LABEL_384:
                      if (v214[0])
                      {
                        int v149 = sqlite3_finalize(v214[0]);
                        if (LODWORD(v220[0])) {
                          uint64_t v150 = v220[0];
                        }
                        else {
                          uint64_t v150 = v149;
                        }
                        uint64_t v208 = v150;
                      }

                      else
                      {
                        uint64_t v208 = v220[0];
                      }

                      goto LABEL_17;
                    }
                  }

                  uint64_t v141 = 0LL;
LABEL_374:
                  __int128 v144 = 0LL;
                  uint64_t v145 = 0LL;
                  uint64_t v146 = 0;
                  LODWORD(v220[0]) = 7;
                  goto LABEL_375;
                }

                if ((v58 & 0xFFFFFFDF) == 0x44) {
                  goto LABEL_362;
                }
                v58 += (unint64_t)byte_1813C6343;
                uint64_t v59 = "d";
              }

              else
              {
                v58 += (unint64_t)byte_1813C6343;
                uint64_t v59 = "ld";
              }
            }

            else
            {
              v58 += (unint64_t)byte_1813C6343;
              uint64_t v59 = "ild";
            }
          }

          else
          {
            v58 += (unint64_t)byte_1813C6343;
            uint64_t v59 = "uild";
          }
        }

        else
        {
          v58 += (unint64_t)byte_1813C6343;
          uint64_t v59 = "build";
        }
      }

      else
      {
        v58 += (unint64_t)byte_1813C6343;
        uint64_t v59 = "ebuild";
      }
    }

    else
    {
      uint64_t v58 = (unint64_t)&byte_1813C6343[v57];
      uint64_t v59 = "rebuild";
    }

    LODWORD(v58) = *(unsigned __int8 *)v58;
    goto LABEL_361;
  }

  if (v34 == 8)
  {
    signed int v57 = *v29;
    if (!*v29)
    {
      LODWORD(v60) = 0;
      uint64_t v61 = "optimize";
      goto LABEL_425;
    }

    if ((v57 & 0xFFFFFFDF) == 0x4F)
    {
      char v60 = v29[1];
      if (!v29[1])
      {
        uint64_t v61 = "ptimize";
        goto LABEL_425;
      }

      if ((v60 & 0xFFFFFFDF) == 0x50)
      {
        char v60 = v29[2];
        if (!v29[2])
        {
          uint64_t v61 = "timize";
          goto LABEL_425;
        }

        if ((v60 & 0xFFFFFFDF) == 0x54)
        {
          char v60 = v29[3];
          if (!v29[3])
          {
            uint64_t v61 = "imize";
            goto LABEL_425;
          }

          if ((v60 & 0xFFFFFFDF) == 0x49)
          {
            char v60 = v29[4];
            if (!v29[4])
            {
              uint64_t v61 = "mize";
              goto LABEL_425;
            }

            if ((v60 & 0xFFFFFFDF) == 0x4D)
            {
              char v60 = v29[5];
              if (!v29[5])
              {
                uint64_t v61 = "ize";
                goto LABEL_425;
              }

              if ((v60 & 0xFFFFFFDF) == 0x49)
              {
                char v60 = v29[6];
                if (!v29[6])
                {
                  uint64_t v61 = "ze";
                  goto LABEL_425;
                }

                if ((v60 & 0xFFFFFFDF) == 0x5A)
                {
                  char v60 = v29[7];
                  if (!v29[7])
                  {
                    uint64_t v61 = "e";
LABEL_425:
LABEL_426:
                    unsigned int v163 = sub_181376594(a1, 0);
LABEL_427:
                    int v139 = v163;
                    goto LABEL_428;
                  }

                  if ((v60 & 0xFFFFFFDF) == 0x45) {
                    goto LABEL_426;
                  }
                  v60 += (unint64_t)byte_1813C6343;
                  uint64_t v61 = "e";
                }

                else
                {
                  v60 += (unint64_t)byte_1813C6343;
                  uint64_t v61 = "ze";
                }
              }

              else
              {
                v60 += (unint64_t)byte_1813C6343;
                uint64_t v61 = "ize";
              }
            }

            else
            {
              v60 += (unint64_t)byte_1813C6343;
              uint64_t v61 = "mize";
            }
          }

          else
          {
            v60 += (unint64_t)byte_1813C6343;
            uint64_t v61 = "imize";
          }
        }

        else
        {
          v60 += (unint64_t)byte_1813C6343;
          uint64_t v61 = "timize";
        }
      }

      else
      {
        v60 += (unint64_t)byte_1813C6343;
        uint64_t v61 = "ptimize";
      }
    }

    else
    {
      char v60 = (unint64_t)&byte_1813C6343[v57];
      uint64_t v61 = "optimize";
    }

    LODWORD(v60) = *(unsigned __int8 *)v60;
    goto LABEL_425;
  }

  if (v34 != 15) {
    goto LABEL_190;
  }
  uint64_t v46 = 0LL;
  while (1)
  {
    uint64_t v47 = v29[v46];
    if (!v29[v46]) {
      break;
    }
    LODWORD(v47) = byte_1813C6343[v47];
    int v48 = byte_1813C6343[aIntegrityCheck_1[v46]];
    if ((_DWORD)v47 != v48) {
      goto LABEL_187;
    }
    if (++v46 == 15) {
      goto LABEL_188;
    }
  }

  int v48 = byte_1813C6343[aIntegrityCheck_1[v46]];
LABEL_187:
  if ((_DWORD)v47 != v48)
  {
LABEL_190:
    if (v34 < 7) {
      goto LABEL_541;
    }
    LODWORD(v57) = *v29;
LABEL_429:
    if (!(_DWORD)v57)
    {
      LODWORD(v164) = 0;
      uint64_t v165 = "merge=";
      goto LABEL_453;
    }

    if ((v57 & 0xFFFFFFDF) == 0x4D)
    {
      uint64_t v164 = v29[1];
      if (!v29[1])
      {
        uint64_t v165 = "erge=";
        goto LABEL_453;
      }

      if ((v164 & 0xFFFFFFDF) == 0x45)
      {
        uint64_t v164 = v29[2];
        if (!v29[2])
        {
          uint64_t v165 = "rge=";
          goto LABEL_453;
        }

        if ((v164 & 0xFFFFFFDF) == 0x52)
        {
          uint64_t v164 = v29[3];
          if (!v29[3])
          {
            uint64_t v165 = "ge=";
            goto LABEL_453;
          }

          if ((v164 & 0xFFFFFFDF) == 0x47)
          {
            uint64_t v164 = v29[4];
            if (!v29[4])
            {
              uint64_t v165 = "e=";
              goto LABEL_453;
            }

            if ((v164 & 0xFFFFFFDF) == 0x45)
            {
              uint64_t v164 = v29[5];
              if (!v29[5])
              {
                uint64_t v165 = "=";
LABEL_453:
                if ((_DWORD)v164 == byte_1813C6343[*v165])
                {
LABEL_454:
                  int v167 = (char)v29[6];
                  uint64_t v166 = v29 + 6;
                  uint64_t v168 = v167;
                  if (v167 >= 48)
                  {
                    unsigned __int8 v169 = 0;
                    int v139 = 1;
                    while (v168 <= 0x39 && v169 < 214748363)
                    {
                      int v170 = (char)*++v166;
                      unsigned __int8 v169 = v168 + 10 * v169 - 48;
                      uint64_t v168 = v170;
                      if (v170 <= 47) {
                        goto LABEL_483;
                      }
                    }

                    goto LABEL_428;
                  }

                  unsigned __int8 v169 = 0;
LABEL_483:
                  if (v168 == 44)
                  {
                    if ((char)v166[1] >= 48)
                    {
                      uint64_t v182 = 0;
                      uint64_t v168 = v166[1];
                      int v183 = (char *)(v166 + 2);
                      int v139 = 1;
                      while (v168 <= 0x39 && v182 < 214748363)
                      {
                        uint64_t v182 = v168 + 10 * v182 - 48;
                        int16x8_t v184 = *v183++;
                        uint64_t v168 = v184;
                        if (v184 <= 47) {
                          goto LABEL_491;
                        }
                      }

                      goto LABEL_428;
                    }

        unsigned int v220 = 7;
LABEL_382:
        BOOL v28 = v236;
        __int128 v142 = v241;
        uint64_t v159 = v220;
        LODWORD(v156) = v170;
LABEL_368:
        uint64_t v154 = v247;
        uint64_t v151 = v250;
LABEL_369:
        uint64_t v243 = v156;
        int v215 = *(void (**)(uint64_t **))(v151 + 32);
        uint64_t v216 = v159;
        v215(v154);
        int v43 = v216;
        uint64_t v132 = v228;
        uint64_t v141 = v240;
LABEL_370:
        break;
      }

LABEL_498:
              if ((_DWORD)v363 == 1)
              {
                if (v462)
                {
                  uint64_t v370 = *(unsigned __int8 *)(a1 + 31);
                  uint64_t v218 = v451;
                  if (v370 <= 7)
                  {
                    *(_BYTE *)(a1 + 31) = v370 + 1;
                    BOOL v371 = (unsigned int *)(a1 + 4 * v370 + 224);
                    goto LABEL_504;
                  }

                  goto LABEL_506;
                }

LABEL_505:
                uint64_t v218 = v451;
                goto LABEL_506;
              }

              *(_DWORD *)(a1 + 40) = v363;
              BOOL v371 = (unsigned int *)(a1 + 44);
              uint64_t v218 = v451;
LABEL_504:
              *BOOL v371 = v462;
LABEL_506:
              int v372 = *(_DWORD *)(v42 + 144);
              if (*(_DWORD *)(v42 + 148) <= v372)
              {
                sub_18131044C(v42, 10LL, v469, v467, 0LL, v355, v356, v357);
              }

              else
              {
                *(_DWORD *)(v42 + 144) = v372 + 1;
                uint64_t v373 = *(void *)(v42 + 136) + 40LL * v372;
                *(_DWORD *)uint64_t v373 = 10;
                *(_DWORD *)(v373 + 4) = v469;
                *(_DWORD *)(v373 + 8) = v467;
                *(void *)(v373 + 12) = 0LL;
                *(void *)(v373 + 28) = 0LL;
                *(void *)(v373 + 20) = 0LL;
                *(_DWORD *)(v373 + 36) = 0;
              }

              if (v358)
              {
                int v374 = &byte_18C550680;
                if (!*(_BYTE *)(*(void *)v42 + 103LL)) {
                  int v374 = (char *)(*(void *)(v42 + 136) + 40LL * v358);
                }
                *((_DWORD *)v374 + 2) = *(_DWORD *)(v42 + 144);
              }

              int v375 = v484;
              if ((*(_BYTE *)(v348 + 68) & 2) != 0) {
                int v375 = 1;
              }
              int v484 = v375;
              uint64_t v376 = *(void *)(v348 + 952);
              if ((*(_BYTE *)(v376 + 49) & 2) == 0)
              {
                uint64_t v472 = 0LL;
                uint64_t v223 = v464;
                goto LABEL_524;
              }

              uint64_t v377 = *(void *)(v376 + 32);
              if (v340)
              {
                uint64_t v223 = v464;
                if (v377 == v472) {
                  goto LABEL_521;
                }
                goto LABEL_523;
              }

              uint64_t v472 = v377;
              uint64_t v223 = v464;
LABEL_521:
              if ((*(_BYTE *)(v465 + 48) & 0x80) != 0 && (*(_WORD *)(v472 + 99) & 3) == 2) {
LABEL_523:
              }
                uint64_t v472 = 0LL;
LABEL_524:
              if ((*(_BYTE *)(v348 + 68) & 1) != 0) {
                *(_BYTE *)(a3 + 68) |= 1u;
              }
              sub_18128E90C((uint64_t **)v348, v351, v352, v353, v354, v355, v356, v357);
              uint64_t v86 = a1;
              int v378 = *(_DWORD *)(a1 + 312);
              if (v378)
              {
                char v379 = *(void **)(a1 + 16);
                char v380 = &byte_18C550680;
                unsigned int v87 = v486;
                if (!*(_BYTE *)(*v379 + 103LL)) {
                  char v380 = (char *)(v379[17] + 40LL * v378);
                }
                int v378 = *((_DWORD *)v380 + 2);
              }

              else
              {
                unsigned int v87 = v486;
              }

              *(_DWORD *)(a1 + 312) = v378;
            }

            else
            {
              unsigned int v87 = v486;
              uint64_t v219 = v480;
            }

            if (v344) {
              sub_181309110((void *)v489, v344);
            }
            uint64_t v56 = a5;
            goto LABEL_465;
          }

          if (v343) {
            sub_181309110((void *)v489, v343);
          }
          uint64_t v56 = a5;
        }

        else if (!*(_BYTE *)(v489 + 103))
        {
          int v344 = 0LL;
          uint64_t v345 = v477;
          goto LABEL_475;
        }
      }

            uint64_t v242 = &off_18C4653A8;
            if (dword_18C465380)
            {
              unsigned int v163 = v317;
              uint64_t v243 = v312;
              if ((void)xmmword_18C468B70)
              {
                xmmword_18C465400(xmmword_18C468B70);
                unsigned __int8 v169 = v323;
              }

              unsigned int v244 = v169;
              qword_18C468AC8[0] -= (int)off_18C4653B8(v169);
              --qword_18C468B10;
              off_18C4653A8(v244);
              unsigned __int8 v169 = (_DWORD *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v242 = &xmmword_18C465410;
                goto LABEL_511;
              }
            }

            else
            {
              unsigned int v163 = v317;
              uint64_t v243 = v312;
LABEL_511:
              (*v242)(v169);
            }

            if (v148[15]) {
              goto LABEL_337;
            }
            if (v243 >= v163 - 1) {
              goto LABEL_530;
            }
            unsigned int v245 = v243 + 1;
            uint64_t v246 = v163 - 1;
            while (2)
            {
              int v247 = sub_18138BCF4((uint64_t)v148, v245 + ((unint64_t)*v316 << 37));
              if (v247)
              {
                unsigned int v248 = v247;
                if (v247[3] < v247[2]) {
                  v148[15] = 267;
                }
                uint64_t v249 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v248);
                  --qword_18C468B10;
                  off_18C4653A8(v248);
                  unsigned int v248 = (_DWORD *)xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    uint64_t v249 = &xmmword_18C465410;
                    goto LABEL_526;
                  }
                }

                else
                {
LABEL_526:
                  (*v249)(v248);
                }
              }

              uint64_t v250 = v148[15];
              if (v245 < v246)
              {
                ++v245;
                if (!v250) {
                  continue;
                }
              }

              break;
            }

            unsigned int v163 = v317;
            if (v250) {
              goto LABEL_337;
            }
LABEL_530:
            if (v311)
            {
              unsigned int v251 = *v316;
              uint64_t v252 = sub_181397248((uint64_t)v148, 0, v251, v163);
              uint64_t v253 = v252;
              unint64_t v319 = 0;
              if (v148[15]) {
                goto LABEL_355;
              }
              if (v252[5])
              {
                unint64_t v319 = 0;
                goto LABEL_355;
              }

              uint64_t v254 = v251 << 37;
              BOOL v255 = v163;
              while (1)
              {
                unsigned int v256 = v255 + 1;
                BOOL v255 = v253[7];
                if (v256 >= v255)
                {
                  unint64_t v319 = v256;
                  int v260 = v255;
                  uint64_t v258 = qword_18C467E20 + 480;
                  goto LABEL_549;
                }

                uint64_t v257 = v256;
                uint64_t v258 = &qword_18C467E20[60];
                do
                {
                  int v261 = sub_18138BCF4((uint64_t)v148, v254 + v257);
                  if (v261)
                  {
                    BOOL v262 = v261;
                    __int16 v259 = &off_18C4653A8;
                    if (!dword_18C465380) {
                      goto LABEL_537;
                    }
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v262);
                    --qword_18C468B10;
                    off_18C4653A8(v262);
                    BOOL v262 = (_DWORD *)xmmword_18C468B70;
                    if ((void)xmmword_18C468B70)
                    {
                      __int16 v259 = &xmmword_18C465410;
LABEL_537:
                      (*v259)(v262);
                    }
                  }

                  ++v257;
                  int v260 = v253[7];
                }

                while (v257 < v260);
                unint64_t v319 = v257;
                BOOL v255 = v253[7];
LABEL_549:
                __int16 v263 = sub_18138BCF4((uint64_t)v148, v260 + v254);
                if (v263)
                {
                  unsigned int v264 = v263;
                  int v265 = __rev16(**(unsigned __int16 **)v263);
                  if (v263[3] <= (signed int)v265
                    || (v307 != 5 || v265)
                    && ((uint64_t v266 = (sqlite3_stmt *)*((void *)v253 + 4),
                         sub_18138BFCC((char *)(*(void *)v263 + v265), (unint64_t *)v335),
                         v335[0] != v266)
                      ? (unsigned __int8 v267 = v307 != 5)
                      : (unsigned __int8 v267 = 0),
                        (uint64_t)v335[0] < (uint64_t)v266 || v267))
                  {
                    v148[15] = 267;
                  }

                  uint64_t v268 = &off_18C4653A8;
                  if (dword_18C465380)
                  {
                    unsigned __int8 v269 = v258[366];
                    if (v269) {
                      xmmword_18C465400(v269);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v264);
                    --qword_18C468B10;
                    off_18C4653A8(v264);
                    unsigned int v264 = (_DWORD *)v258[366];
                    if (v264)
                    {
                      uint64_t v268 = &xmmword_18C465410;
                      goto LABEL_564;
                    }
                  }

                  else
                  {
LABEL_564:
                    (*v268)(v264);
                  }
                }

                sub_181390D2C((uint64_t)v148, v253, 0);
                if (v148[15])
                {
                  unsigned int v163 = v317;
                  goto LABEL_355;
                }

                unsigned int v163 = v317;
                if (v253[5])
                {
LABEL_355:
                  sub_18138DA78(v253);
                  goto LABEL_356;
                }
              }
            }

            unint64_t v319 = *v306;
LABEL_356:
            if (v148[15]) {
              goto LABEL_337;
            }
          }

          v148[15] = 267;
          BOOL v270 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_575;
          }
          if ((void)xmmword_18C468B70)
          {
            xmmword_18C465400(xmmword_18C468B70);
            unsigned __int8 v169 = v323;
          }

          BOOL v271 = v169;
          qword_18C468AC8[0] -= (int)off_18C4653B8(v169);
          --qword_18C468B10;
          off_18C4653A8(v271);
          unsigned __int8 v169 = (_DWORD *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            BOOL v270 = &xmmword_18C465410;
LABEL_575:
            (*v270)(v169);
          }

LABEL_465:
    }
  }

  return v487;
}

uint64_t sub_181331228(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if ((*(_BYTE *)(*(void *)result + 49LL) & 4) == 0) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(a3 + 96);
  int v9 = *(_DWORD *)(v8 + 48);
  if ((v9 & 0x400) == 0)
  {
    uint64_t v10 = *(char ***)(v8 + 32);
    if (v10)
    {
      uint64_t result = sub_18131CED8(result, a4, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 112), *(_WORD *)(v8 + 22), *v10);
      goto LABEL_6;
    }
  }

  uint64_t v11 = a2 + 104LL * *(unsigned __int8 *)(a3 + 64);
  __int16 v12 = *(_WORD *)(v11 + 69);
  uint64_t result = sub_18131CED8( result,  a4,  *(_DWORD *)(a3 + 32),  *(_DWORD *)(a3 + 112),  *(_WORD *)(v8 + 22),  *(char **)(v11 + 24));
  if ((v12 & 0x20) == 0)
  {
LABEL_6:
    if ((v9 & 0x6000) == 0 && (*(_BYTE *)(*(void *)v7 + 49LL) & 4) != 0)
    {
      int v13 = *(_DWORD *)(a3 + 4);
      unsigned int v14 = *(_DWORD *)(v7 + 392);
      uint64_t v15 = 56LL * v14 + 20;
      unsigned int v16 = v14 + 1;
      while ((int)--v16 >= 1)
      {
        uint64_t v17 = v15 - 56;
        uint64_t v18 = *(void *)(v7 + 400);
        int v19 = *(_DWORD *)(v18 + v15 - 76);
        v15 -= 56LL;
        if (v19 == a4)
        {
          if (v13 < 0) {
            int v13 = *(_DWORD *)(v7 + 144) - 1;
          }
          uint64_t v20 = v18 + v17;
          unint64_t v21 = (_DWORD *)(v18 + v17 - 16);
          if (*v21)
          {
            int v23 = *(_DWORD *)(v20 - 8);
            unsigned int v22 = (_DWORD *)(v20 - 8);
            if (v23)
            {
              unint64_t v21 = (_DWORD *)(v18 + v17);
              if (*(_DWORD *)(v18 + v17)) {
                break;
              }
              uint64_t v24 = 5LL;
            }

            else
            {
              uint64_t v24 = 3LL;
              unint64_t v21 = v22;
            }
          }

          else
          {
            uint64_t v24 = 1LL;
          }

          _DWORD *v21 = -1;
          *(_DWORD *)(v18 + 4 * v24 + v17 - 16) = v13;
          break;
        }
      }
    }

    if ((v9 & 0x200) != 0 && (*(_BYTE *)(*(void *)v7 + 49LL) & 4) != 0)
    {
      int v40 = *(_DWORD *)(a3 + 8);
      unsigned int v41 = *(_DWORD *)(v7 + 392);
      uint64_t v42 = 56LL * v41 + 20;
      unsigned int v43 = v41 + 1;
      while ((int)--v43 >= 1)
      {
        uint64_t v44 = v42 - 56;
        uint64_t v45 = *(void *)(v7 + 400);
        int v46 = *(_DWORD *)(v45 + v42 - 76);
        v42 -= 56LL;
        if (v46 == a4)
        {
          if (v40 < 0) {
            int v40 = *(_DWORD *)(v7 + 144) - 1;
          }
          uint64_t v47 = v45 + v44;
          int v48 = (_DWORD *)(v45 + v44 - 16);
          if (*v48)
          {
            int v50 = *(_DWORD *)(v47 - 8);
            uint64_t v49 = (_DWORD *)(v47 - 8);
            if (v50)
            {
              int v48 = (_DWORD *)(v45 + v44);
              if (*(_DWORD *)(v45 + v44)) {
                return result;
              }
              uint64_t v51 = 5LL;
            }

            else
            {
              uint64_t v51 = 3LL;
              int v48 = v49;
            }
          }

          else
          {
            uint64_t v51 = 1LL;
          }

          _DWORD *v48 = -1;
          *(_DWORD *)(v45 + 4 * v51 + v44 - 16) = v40;
          return result;
        }
      }
    }

    return result;
  }

  int v25 = *(_DWORD *)(a2 + 104LL * *(unsigned __int8 *)(a3 + 64) + 56);
  uint64_t v26 = *(void *)v7;
  if (*(_BYTE *)(*(void *)v7 + 103LL))
  {
    int v27 = &byte_18C550680;
    if ((*(_BYTE *)(v26 + 49) & 4) == 0) {
      return result;
    }
  }

  else
  {
    int v27 = (char *)(*(void *)(v7 + 136) + 40LL * (v25 - 1));
    if ((*(_BYTE *)(v26 + 49) & 4) == 0) {
      return result;
    }
  }

  int v28 = *((_DWORD *)v27 + 2);
  unsigned int v29 = *(_DWORD *)(v7 + 392);
  uint64_t v30 = 56LL * v29 + 20;
  unsigned int v31 = v29 + 1;
  while ((int)--v31 >= 1)
  {
    uint64_t v32 = v30 - 56;
    uint64_t v33 = *(void *)(v7 + 400);
    int v34 = *(_DWORD *)(v33 + v30 - 76);
    v30 -= 56LL;
    if (v34 == a4)
    {
      if (v28 <= 0) {
        int v28 = *(_DWORD *)(v7 + 144);
      }
      uint64_t v35 = v33 + v32;
      int v36 = (_DWORD *)(v33 + v32 - 16);
      if (*v36)
      {
        int v38 = *(_DWORD *)(v35 - 8);
        BOOL v37 = (_DWORD *)(v35 - 8);
        if (v38)
        {
          int v36 = (_DWORD *)(v33 + v32);
          if (*(_DWORD *)(v33 + v32)) {
            return result;
          }
          uint64_t v39 = 5LL;
        }

        else
        {
          uint64_t v39 = 3LL;
          int v36 = v37;
        }
      }

      else
      {
        uint64_t v39 = 1LL;
      }

      *int v36 = v25;
      *(_DWORD *)(v33 + 4 * v39 + v32 - 16) = v28 - 1;
      return result;
    }
  }

  return result;
}

uint64_t sub_181331514(_DWORD *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 3;
    while (1)
    {
      int v77 = (void *)a2;
      int v5 = *(int **)(a2 + 32);
      uint64_t v6 = *(int **)(a2 + 40);
      if (v5)
      {
        int v7 = *v5;
        if (*v5 >= 1)
        {
          uint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          while (1)
          {
            uint64_t v11 = *(unsigned __int8 **)&v5[6 * v8 + 2];
            if (v11)
            {
              if (*v11 == 167 && (*((_DWORD *)v11 + 1) & 0x20) == 0)
              {
                int v13 = *((_DWORD *)v11 + 11);
                if (a1[2] == v13)
                {
                  uint64_t v10 = 1LL;
                  goto LABEL_9;
                }

                uint64_t v14 = a1[1];
                if ((int)v14 >= 2)
                {
                  uint64_t v15 = 0LL;
                  uint64_t v16 = v14 - 1;
                  while (v4[v15] != v13)
                  {
                    if (v16 == ++v15) {
                      goto LABEL_8;
                    }
                  }

                  uint64_t v10 = 1LL << (v15 + 1);
                  goto LABEL_9;
                }
              }

              else if ((*((_DWORD *)v11 + 1) & 0x810000) == 0)
              {
                uint64_t v10 = sub_181332EB0(a1, v11);
                int v7 = *v5;
                goto LABEL_9;
              }
            }

LABEL_100:
      v3 |= v9 | v20 | v31 | v41 | v48;
      if (v6 && *v6 >= 1)
      {
        uint64_t v53 = 0LL;
        while (2)
        {
          int v55 = &v6[26 * v53];
          v3 |= sub_181331514(a1, *((void *)v55 + 6));
          __int16 v58 = *(_WORD *)((char *)v55 + 69);
          signed int v57 = (__int16 *)((char *)v55 + 69);
          LOBYTE(v56) = v58;
          if ((v58 & 0x400) != 0) {
            goto LABEL_122;
          }
          uint64_t v59 = *(unsigned __int8 **)&v6[26 * v53 + 20];
          if (!v59) {
            goto LABEL_120;
          }
          if (*v59 == 167 && (*((_DWORD *)v59 + 1) & 0x20) == 0)
          {
            int v62 = *((_DWORD *)v59 + 11);
            if (a1[2] == v62)
            {
              uint64_t v61 = 1LL;
            }

            else
            {
              uint64_t v63 = a1[1];
              uint64_t v64 = 0LL;
              uint64_t v65 = v63 - 1;
              while (v4[v64] != v62)
              {
                if (v65 == ++v64) {
                  goto LABEL_120;
                }
              }

              uint64_t v61 = 1LL << (v64 + 1);
            }
          }

          else
          {
            if ((*((_DWORD *)v59 + 1) & 0x810000) == 0)
            {
              uint64_t v61 = sub_181332EB0(a1, v59);
              __int16 v56 = *v57;
              goto LABEL_121;
            }

    uint64_t result = (uint64_t)sub_18135379C(v57);
  }

  *(void *)(v10 + 528) = v27;
  return result;
}

  unsigned __int8 *v35 = v34;
  if (v9)
  {
    uint64_t v65 = (void (**)(unsigned __int8 *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_106;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    off_18C4653A8(v9);
    uint64_t v9 = (unsigned __int8 *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v65 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_106:
      (*v65)(v9);
    }
  }

  uint64_t result = *v11;
LABEL_108:
  *uint64_t v11 = 0;
  return result;
}

LABEL_121:
          v3 |= v61;
LABEL_122:
          if ((v56 & 4) != 0)
          {
            uint64_t v66 = *(int **)&v6[26 * v53 + 24];
            if (v66)
            {
              int v67 = *v66;
              if (*v66 >= 1)
              {
                uint64_t v68 = 0LL;
                uint64_t v54 = 0LL;
                while (1)
                {
                  int v70 = *(unsigned __int8 **)&v66[6 * v68 + 2];
                  if (v70)
                  {
                    if (*v70 == 167 && (*((_DWORD *)v70 + 1) & 0x20) == 0)
                    {
                      int v72 = *((_DWORD *)v70 + 11);
                      if (a1[2] == v72)
                      {
                        uint64_t v69 = 1LL;
                        goto LABEL_128;
                      }

                      uint64_t v73 = a1[1];
                      if ((int)v73 >= 2)
                      {
                        uint64_t v74 = 0LL;
                        uint64_t v75 = v73 - 1;
                        while (v4[v74] != v72)
                        {
                          if (v75 == ++v74) {
                            goto LABEL_127;
                          }
                        }

                        uint64_t v69 = 1LL << (v74 + 1);
                        goto LABEL_128;
                      }
                    }

                    else if ((*((_DWORD *)v70 + 1) & 0x810000) == 0)
                    {
                      uint64_t v69 = sub_181332EB0(a1, v70);
                      int v67 = *v66;
                      goto LABEL_128;
                    }
                  }

                  __int16 v95 = v80;
                  unsigned int v96 = v79;
                  uint64_t v97 = v80 + (unint64_t)v79;
                  if (v79) {
                    uint64_t v98 = v97 > v67;
                  }
                  else {
                    uint64_t v98 = 1;
                  }
                  if (v98)
                  {
                    uint64_t v50 = v237;
                    *__int128 v237 = 267;
                    char v60 = (uint64_t)v235;
                    int v62 = v227;
                    goto LABEL_203;
                  }

                  unsigned int v213 = v95;
                  uint64_t v214 = v79;
                  int v105 = v95 + v79;
                  uint64_t v106 = v229;
                  uint64_t v107 = v229 + 136 * v25;
                  *(void *)(v107 + 128) = v105;
                  uint64_t v108 = v107 + 128;
                  *(_DWORD *)(v108 + --*(_DWORD *)(result + 32) = *v226;
                  *(_DWORD *)(v108 + 36) = v105;
                  int v109 = (uint64_t *)(v108 + 72);
                  *(_DWORD *)(v108 + 80) = 0;
                  uint64_t v216 = (signed int *)(v108 + 80);
                  int v215 = (uint64_t *)(v108 + 72);
                  if (v72)
                  {
                    uint64_t v110 = v229 + 136 * v25;
                    uint64_t v113 = *(_DWORD *)(v110 + 212);
                    uint64_t v112 = (_DWORD *)(v110 + 212);
                    LODWORD(v111) = v113;
                    if (v113 >= v72)
                    {
                      int v116 = 0LL;
                      uint64_t v117 = *v109;
                      int v118 = v72;
                      goto LABEL_158;
                    }

                    if (!(_DWORD)v111) {
                      LODWORD(v111) = 64;
                    }
                    uint64_t v111 = (int)v111;
                    do
                    {
                      uint64_t v114 = v111;
                      v111 *= 2LL;
                    }

                    while (v114 < v72);
                    uint64_t v212 = *v109;
                    if (sqlite3_initialize() || (uint64_t v117 = sub_18127D33C(v212, v114)) == 0)
                    {
                      *__int128 v237 = 7;
                      uint64_t v115 = *v216;
                      uint64_t v33 = v228;
                      uint64_t v106 = v229;
                    }

                    else
                    {
                      char *v112 = v114;
                      *int v215 = v117;
                      int v116 = *v216;
                      uint64_t v33 = v228;
                      int v118 = v72;
LABEL_158:
                      memcpy((void *)(v117 + v116), a5, v118);
                      uint64_t v115 = *v216 + v72;
                      *uint64_t v216 = v115;
                      uint64_t v106 = v229;
                    }

                    unsigned int v96 = v214;
                    int v109 = (uint64_t *)(v108 + 72);
                  }

                  else
                  {
                    uint64_t v115 = 0;
                  }

                  uint64_t v119 = (v115 + v96);
                  int v120 = v106 + 136 * v25;
                  int v123 = *(_DWORD *)(v120 + 212);
                  int v122 = (_DWORD *)(v120 + 212);
                  unsigned int v121 = v123;
                  int v62 = v227;
                  if (v119 > v123)
                  {
                    if (v121) {
                      LODWORD(v124) = v121;
                    }
                    else {
                      LODWORD(v124) = 64;
                    }
                    uint64_t v124 = (int)v124;
                    do
                    {
                      __int16 v125 = v124;
                      v124 *= 2LL;
                    }

                    while (v125 < v119);
                    uint64_t v126 = *v109;
                    if (sqlite3_initialize() || (int v128 = sub_18127D33C(v126, v125)) == 0)
                    {
                      *__int128 v237 = 7;
                      uint64_t v33 = v228;
                      uint64_t v127 = v229;
                      int v62 = v227;
                    }

                    else
                    {
                      *int v122 = v125;
                      unsigned int v96 = v214;
                      *int v215 = v128;
                      uint64_t v115 = *v216;
                      int v62 = v227;
                      uint64_t v33 = v228;
LABEL_169:
                      int v129 = v96;
                      memcpy((void *)(v128 + v115), (const void *)(v65 + v213), v96);
                      *v216 += v129;
                      uint64_t v127 = v229;
                    }

                    if (v74 >= v67)
                    {
                      unsigned int v133 = *v62;
                      *(_DWORD *)(v127 + 136 * v25 + 172) = *(_DWORD *)(*v62 + 8LL) + 1;
                    }

                    else
                    {
                      uint64_t v130 = (char *)(v65 + v74);
                      uint64_t v131 = *v130;
                      if (*v130 < 0)
                      {
                        uint64_t v135 = v130[1];
                        if (v130[1] < 0)
                        {
                          int v137 = v130[2];
                          if (v137 < 0)
                          {
                            uint64_t v132 = sub_18138BFCC(v130, v238);
                            uint64_t v131 = v238[0] & 0x7FFFFFFF;
                          }

                          else
                          {
                            uint64_t v131 = v137 & 0x7F | (v131 << 14) & 0x1FC07F | ((v135 & 0x7F) << 7);
                            uint64_t v132 = 3;
                          }
                        }

                        else
                        {
                          uint64_t v131 = ((v131 & 0x7F) << 7) | v135;
                          uint64_t v132 = 2;
                        }
                      }

                      else
                      {
                        uint64_t v132 = 1;
                      }

                      v74 += v132;
                      *(_DWORD *)(v127 + 136 * v25 + 172) = v131 + v75;
                      unsigned int v133 = *v62;
                    }

                    *(_DWORD *)(v127 + 136 * v25 + 168) = v74;
                    uint64_t v141 = *(void *)v108;
                    if (*(void *)v108 < *(int *)(v133 + 12))
                    {
LABEL_201:
                      *(void *)uint64_t v108 = v141
                                      + sub_18138BFCC( (char *)(*(void *)v133 + v141),  (unint64_t *)(v127 + 136 * v25 + 216));
                      uint64_t v50 = v237;
                    }

                    else
                    {
                      while (1)
                      {
                        sub_181390FF0((uint64_t)v235, v38);
                        unsigned int v133 = *v62;
                        if (!*v62) {
                          break;
                        }
                        if (*(int *)(v133 + 12) > 4)
                        {
                          uint64_t v141 = 4LL;
                          goto LABEL_201;
                        }
                      }

                      uint64_t v50 = v237;
                      if (!*v237) {
                        *__int128 v237 = 267;
                      }
                    }

                    char v60 = (uint64_t)v235;
                    sub_181391240((uint64_t)v235, (uint64_t)v38);
                    goto LABEL_203;
                  }

                  int v128 = *v109;
                  goto LABEL_169;
                }

                if (v86 < v79
                  && *(unsigned __int8 *)(v65 + v86 + v80) > v76[v73])
                {
                  goto LABEL_120;
                }
              }

              if (v74 >= v67) {
                break;
              }
              int v88 = (char *)(v65 + v74);
              uint64_t v89 = *v88;
              if (*v88 < 0)
              {
                __int16 v91 = v88[1];
                if (v88[1] < 0)
                {
                  int v92 = v88[2];
                  if (v92 < 0)
                  {
                    int v90 = sub_18138BFCC(v88, v238);
                    uint64_t v76 = a5;
                    uint64_t v89 = v238[0] & 0x7FFFFFFF;
                  }

                  else
                  {
                    uint64_t v89 = v92 & 0x7F | (v89 << 14) & 0x1FC07F | ((v91 & 0x7F) << 7);
                    int v90 = 3;
                  }
                }

                else
                {
                  uint64_t v89 = ((v89 & 0x7F) << 7) | v91;
                  int v90 = 2;
                }
              }

              else
              {
                int v90 = 1;
              }

              v75 += v89;
              if (v75 >= v67)
              {
                uint64_t v50 = v237;
                *__int128 v237 = 267;
                char v60 = (uint64_t)v235;
                int v62 = v227;
                uint64_t v33 = v228;
                goto LABEL_203;
              }

              v74 += v90;
              uint64_t v69 = v75 + 1;
              int v93 = (char *)(v65 + v75);
              int v72 = *v93;
              if (*v93 < 0)
              {
                int v77 = v93[1];
                if (v93[1] < 0)
                {
                  unint64_t v85 = v93[2];
                  if (v85 < 0)
                  {
                    BOOL v94 = sub_18138BFCC(v93, v238);
                    uint64_t v76 = a5;
                    int v72 = v238[0] & 0x7FFFFFFF;
                    uint64_t v69 = v94 + v75;
                  }

                  else
                  {
                    int v72 = v85 & 0x7F | (v72 << 14) & 0x1FC07F | ((v77 & 0x7F) << 7);
                    uint64_t v69 = v75 + 3;
                  }
                }

                else
                {
                  int v72 = ((v72 & 0x7F) << 7) | v77;
                  uint64_t v69 = v75 + 2;
                }
              }
            }

            uint64_t v33 = v228;
            if (!v225) {
              goto LABEL_138;
            }
            while (1)
            {
              char v60 = (uint64_t)v235;
              sub_181390FF0((uint64_t)v235, v38);
              int v62 = v227;
              int v100 = (uint64_t *)*v227;
              uint64_t v50 = v237;
              if (!*v227) {
                break;
              }
              int v67 = *((_DWORD *)v100 + 2);
              uint64_t v101 = *((unsigned int *)v100 + 3);
              if ((int)v101 < (int)v67)
              {
                uint64_t v65 = *v100;
                uint64_t v102 = (char *)(*v100 + v101);
                uint64_t v75 = *v102;
                if (*v102 < 0)
                {
                  unsigned int v134 = v102[1];
                  if (v102[1] < 0)
                  {
                    uint64_t v136 = v102[2];
                    if (v136 < 0)
                    {
                      uint64_t v103 = sub_18138BFCC(v102, v238);
                      uint64_t v75 = v238[0] & 0x7FFFFFFF;
                    }

                    else
                    {
                      uint64_t v75 = v136 & 0x7F | (v75 << 14) & 0x1FC07F | ((v134 & 0x7F) << 7);
                      uint64_t v103 = 3;
                    }
                  }

                  else
                  {
                    uint64_t v75 = ((v75 & 0x7F) << 7) | v134;
                    uint64_t v103 = 2;
                  }
                }

                else
                {
                  uint64_t v103 = 1;
                }

                int v62 = v227;
                if (v75 < 4 || v75 >= (uint64_t)(int)v101)
                {
                  uint64_t v50 = v237;
                  *__int128 v237 = 267;
                  char v60 = (uint64_t)v235;
                  break;
                }

                uint64_t v138 = (char *)(v65 + v75);
                uint64_t v79 = *v138;
                if (*v138 < 0)
                {
                  int v140 = v138[1];
                  if (v138[1] < 0)
                  {
                    int v194 = v138[2];
                    if (v194 < 0)
                    {
                      int v139 = sub_18138BFCC(v138, v238);
                      uint64_t v79 = v238[0] & 0x7FFFFFFF;
                    }

                    else
                    {
                      uint64_t v79 = v194 & 0x7F | (v79 << 14) & 0x1FC07F | ((v140 & 0x7F) << 7);
                      int v139 = 3;
                    }
                  }

                  else
                  {
                    uint64_t v79 = ((v79 & 0x7F) << 7) | v140;
                    int v139 = 2;
                  }
                }

                else
                {
                  int v139 = 1;
                }

                int v72 = 0;
                uint64_t v74 = v103 + v101;
                uint64_t v80 = v139 + v75;
                goto LABEL_121;
              }
            }
          }
        }

uint64_t sub_181331B0C(uint64_t a1, unsigned __int8 **a2)
{
  if ((*(_BYTE *)(*(void *)a1 + 96LL) & 0x80) != 0) {
    return 0LL;
  }
  int v4 = *(unsigned __int8 *)a2;
  if (v4 != 53 && v4 != 45) {
    return 0LL;
  }
  if ((*((_BYTE *)a2 + 4) & 1) != 0) {
    return 0LL;
  }
  int v5 = sub_1812A3C7C(a2[2]);
  int v6 = sub_1812A3C7C(a2[3]);
  if (v5 == v6 || (v13 = v6, uint64_t result = 0LL, v5 >= 67) && v13 >= 67)
  {
    uint64_t v15 = sub_1812DDD08(a1, (uint64_t)a2, v7, v8, v9, v10, v11, v12);
    if (v15 && *(uint64_t (**)(int, int, void *, int, void *))(v15 + 24) != sub_1812A4AEC)
    {
      unsigned int v22 = a2[3];
      int v29 = (_BYTE **)sub_181289D04(a1, a2[2], v16, v17, v18, v19, v20, v21);
      if (!v29) {
        int v29 = *(_BYTE ***)(*(void *)a1 + 16LL);
      }
      uint64_t v30 = (unsigned __int8 **)sub_181289D04(a1, v22, v23, v24, v25, v26, v27, v28);
      if (!v30) {
        uint64_t v30 = *(unsigned __int8 ***)(*(void *)a1 + 16LL);
      }
      uint64_t v31 = *v29;
      for (uint64_t i = *v30; ; ++i)
      {
        uint64_t v33 = *v31;
        uint64_t v34 = *i;
        if ((_DWORD)v33 == (_DWORD)v34)
        {
          if (!*v31) {
            return (_DWORD)v33 == 0;
          }
        }

        else
        {
          LODWORD(v33) = byte_1813C6343[v33] - byte_1813C6343[v34];
          if ((_DWORD)v33) {
            return (_DWORD)v33 == 0;
          }
        }

        ++v31;
      }
    }

    return 1LL;
  }

  return result;
}

void *sub_181331C40(void *result, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  int v5 = result;
  int v6 = *(uint64_t ***)a2;
  uint64_t v7 = **(uint64_t ***)a2;
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(v9 + 56LL * a3);
  if (*v7)
  {
    if (*(unsigned __int16 *)(v8 + 436) <= 0x1EFu)
    {
      if (*(_DWORD *)(v8 + 432))
      {
        if (*(_BYTE *)(v8 + 103)) {
          goto LABEL_123;
        }
      }

      else
      {
        ++*(_DWORD *)(v8 + 452);
      }

LABEL_165:
  int v96 = v121;
  if (!v78) {
    return result;
  }
  int v97 = *(_DWORD *)(v12 + 20);
  if (v97 >= 1)
  {
    uint64_t v98 = 0LL;
    char v99 = 0LL;
    int v100 = *(_WORD **)(v12 + 32);
    int v101 = v97 + 1;
    while (2)
    {
      if ((v100[9] & 0x40) == 0) {
        goto LABEL_171;
      }
      uint64_t v103 = *(unsigned __int8 **)(*(void *)v100 + 24LL);
      if (v103) {
        uint64_t v104 = (unsigned __int8 *)sub_18129C928(v131, v103, 0LL, 0LL);
      }
      else {
        uint64_t v104 = 0LL;
      }
      int v105 = *v132;
      if (v99)
      {
        int v106 = *v99;
        if (v99[1] > *v99)
        {
          *char v99 = v106 + 1;
          uint64_t v107 = &v99[6 * v106];
          *((void *)v107 + 2) = 0LL;
          *((void *)v107 + 3) = 0LL;
          *((void *)v107 + 1) = v104;
LABEL_170:
          uint64_t v98 = *(unsigned __int8 **)(*(void *)v100 + 16LL);
LABEL_171:
          v100 += 28;
          if (--v101 <= 1)
          {
            if (v98) {
              uint64_t v108 = sub_18129C928(v131, v98, 0LL, 0LL);
            }
            else {
              uint64_t v108 = 0LL;
            }
            int v96 = v121;
            uint64_t result = (void *)sub_1813132BC(v7, 49, (uint64_t)v108, 0LL);
            if (result)
            {
              uint64_t v115 = (uint64_t)result;
              goto LABEL_189;
            }

            if (v99) {
              return sub_181311F48((void *)v131, v99);
            }
            return result;
          }

          continue;
        }

        uint64_t v102 = sub_18133E1F4(*v105, v99, v104);
      }

      else
      {
        uint64_t v102 = (int *)sub_18133E190((void *)*v105, v104);
      }

      break;
    }

    char v99 = v102;
    goto LABEL_170;
  }

  uint64_t result = (void *)sub_1812F2264(*v7, 0x50uLL);
  if (result)
  {
    uint64_t v115 = (uint64_t)result;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *(_BYTE *)uint64_t result = 49;
    *((_WORD *)result + 26) = -1;
    *((_DWORD *)result + 10) = 1;
    if (*(int *)(*v7 + 148) <= 0) {
      sub_1812DC47C( (uint64_t)v7,  "Expression tree is too large (maximum depth %d)",  v109,  v110,  v111,  v112,  v113,  v114,  *(_DWORD *)(*v7 + 148));
    }
    char v99 = 0LL;
LABEL_189:
    if ((*(_DWORD *)(v11 + 4) & 3) != 0)
    {
      *(_DWORD *)(v115 + 4) |= *(_DWORD *)(v11 + 4) & 3;
      *(_DWORD *)(v115 + 56) = *(_DWORD *)(v11 + 56);
    }

    *(void *)(v115 + --*(_DWORD *)(result + 32) = v99;
    uint64_t v116 = sub_1812A2264(v4, v115, 3);
    uint64_t result = (void *)sub_1812A2470(v5, v4, v116);
    uint64_t v117 = *(void *)(v4 + 32);
    uint64_t v118 = v117 + 56LL * (int)v116;
    *(_DWORD *)(v118 + 24) = v125;
    uint64_t v119 = v117 + 56LL * v96;
    *(_WORD *)(v118 + 16) = *(_WORD *)(v119 + 16);
    ++*(_BYTE *)(v119 + 22);
  }

  return result;
}

        uint64_t v38 = a3[3];
        goto LABEL_166;
      }

      if ((v5 & 0x20) == 0) {
        return sub_18135B6B0((uint64_t)a3, *(unsigned __int8 **)(v6 + 8), *(_DWORD *)(v6 + 4));
      }
      int v49 = a3[3];
      if (v49 >= a3[2])
      {
        uint64_t result = sub_18135BB8C((uint64_t)a3, 34);
      }

      else
      {
        uint64_t v50 = a3[1];
        a3[3] = v49 + 1;
        *(_BYTE *)(v50 + v49) = 34;
      }

      int v70 = *(unsigned int *)(v6 + 4);
      uint64_t v38 = a3[3];
      if ((_DWORD)v70)
      {
        int v71 = *(const void **)(v6 + 8);
        if (v38 + v70 < a3[2])
        {
          uint64_t result = (uint64_t)memcpy((void *)(a3[1] + v38), v71, *(unsigned int *)(v6 + 4));
          uint64_t v38 = a3[3] + v70;
          a3[3] = v38;
          goto LABEL_166;
        }

        uint64_t result = sub_18135B8EC((uint64_t)a3, v71, *(_DWORD *)(v6 + 4));
        goto LABEL_165;
      }

  *int v72 = v90;
  return DWORD2(v90);
}

uint64_t sub_181332800(uint64_t a1, uint64_t a2, uint64_t *a3, BOOL *a4, _DWORD *a5)
{
  int v5 = *(int **)(a2 + 32);
  if (!v5) {
    return 0LL;
  }
  uint64_t v11 = *(void *)a1;
  int v12 = *v5;
  int v13 = sub_18126CC00(*(void *)a1, *(char **)(a2 + 8), *v5, 1u, 0);
  if (!v13) {
    return 0LL;
  }
  unsigned int v14 = *((_DWORD *)v13 + 1);
  if ((v14 & 4) == 0) {
    return 0LL;
  }
  int v17 = (unsigned __int8 *)*((void *)v13 + 1);
  int v18 = *v17;
  int v19 = v17[1];
  int v20 = v17[2];
  if (v12 >= 3)
  {
    uint64_t v30 = *(void *)(*(void *)(a2 + 32) + 56LL);
    if (*(_BYTE *)v30 != 117) {
      return 0LL;
    }
    uint64_t v31 = *(unsigned __int8 **)(v30 + 8);
    int v21 = *v31;
    if (!*v31) {
      return 0LL;
    }
    BOOL v32 = v31[1] || v21 == v18;
    if (v32 || v21 == v19) {
      return 0LL;
    }
  }

  else
  {
    int v21 = 0;
  }

  *a5 = ((v14 >> 3) & 1) == 0;
  uint64_t v22 = *(void *)(a2 + 32);
  for (uint64_t i = *(unsigned __int8 **)(v22 + 8); i; uint64_t i = (unsigned __int8 *)*((void *)i + 2))
  {
    if ((i[5] & 0x20) == 0) {
      break;
    }
  }

  int v24 = *i;
  if (v24 == 156)
  {
    if ((*(_BYTE *)(v11 + 50) & 0x80) == 0)
    {
      uint64_t v82 = *(unsigned __int8 **)(v22 + 32);
      int v80 = 156;
      int v25 = *((_DWORD *)i + 12);
      uint64_t v26 = sub_18131C01C(*(uint64_t **)(a1 + 328), v25);
      uint64_t v27 = v26;
      int v81 = a3;
      if (!v26) {
        goto LABEL_33;
      }
      int v28 = *(unsigned __int16 *)(v26 + 20);
      if (((0x4000000040004uLL >> v28) & 1) == 0) {
        goto LABEL_33;
      }
      if ((~v28 & 0x202) == 0 && *(_BYTE *)(v26 + 22) == 1)
      {
        uint64_t v29 = *(const char **)(v26 + 8);
        goto LABEL_34;
      }

      if ((v28 & 1) == 0)
      {
        uint64_t v34 = a4;
        uint64_t v35 = v26;
        uint64_t v36 = sub_181303998((int *)v26, 1);
        uint64_t v27 = v35;
        a4 = v34;
        uint64_t v29 = (const char *)v36;
      }

      else
      {
LABEL_33:
        uint64_t v29 = 0LL;
      }

unsigned int *sub_181332D98(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  int v7 = *a2;
  if (v7 != 177)
  {
    if (v7 == 138)
    {
      uint64_t v9 = sub_1812F2264(*(void *)a1, 0x50uLL);
      unsigned int v16 = (unsigned __int8 *)v9;
      if (v9)
      {
        *(_OWORD *)(v9 + --*(_DWORD *)(result + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)uint64_t v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_BYTE *)uint64_t v9 = -78;
        *(_WORD *)(v9 + 52) = -1;
        *(_DWORD *)(v9 + 40) = 1;
        if (*(int *)(*(void *)a1 + 148LL) <= 0) {
          sub_1812DC47C( a1,  "Expression tree is too large (maximum depth %d)",  v10,  v11,  v12,  v13,  v14,  v15,  *(_DWORD *)(*(void *)a1 + 148LL));
        }
        *((_DWORD *)v16 + 11) = a4;
        *((_DWORD *)v16 + 12) = a3;
        *((void *)v16 + 2) = a2;
      }

      return (unsigned int *)v16;
    }

    unsigned int v16 = a2;
    return sub_18129C928(*(void *)a1, v16, 0LL, 0LL);
  }

  uint64_t v17 = *((void *)a2 + 4) + 24LL * a3;
  int v19 = *(unsigned __int8 **)(v17 + 8);
  int v18 = (void *)(v17 + 8);
  unsigned int v16 = v19;
  if (*(unsigned __int8 *)(a1 + 302) >= 2u)
  {
    void *v18 = 0LL;
  }

  else if (v16)
  {
    return sub_18129C928(*(void *)a1, v16, 0LL, 0LL);
  }

  return (unsigned int *)v16;
}

uint64_t sub_181332EB0(_DWORD *a1, unsigned __int8 *a2)
{
  if (*a2 != 179) {
    goto LABEL_9;
  }
  int v4 = *((_DWORD *)a2 + 11);
  if (a1[2] == v4)
  {
    uint64_t v5 = 1LL;
    int v6 = (unsigned __int8 *)*((void *)a2 + 2);
    if (!v6) {
      goto LABEL_24;
    }
LABEL_10:
    if (*v6 == 167 && (*((_DWORD *)v6 + 1) & 0x20) == 0)
    {
      int v12 = *((_DWORD *)v6 + 11);
      if (a1[2] == v12)
      {
        uint64_t v11 = 1LL;
        goto LABEL_23;
      }

      uint64_t v13 = a1[1];
      if ((int)v13 >= 2)
      {
        uint64_t v14 = 0LL;
        uint64_t v15 = v13 - 1;
        while (a1[v14 + 3] != v12)
        {
          if (v15 == ++v14) {
            goto LABEL_22;
          }
        }

        uint64_t v11 = 1LL << (v14 + 1);
        goto LABEL_23;
      }
    }

    else if ((*((_DWORD *)v6 + 1) & 0x810000) == 0)
    {
      uint64_t v11 = sub_181332EB0(a1);
LABEL_23:
      v5 |= v11;
      goto LABEL_24;
    }

uint64_t sub_181333430(int *a1, _DWORD *a2, _BYTE *a3, int a4)
{
  uint64_t v7 = a4;
  while (1)
  {
    uint64_t v8 = &a1[26 * v7];
    uint64_t v9 = *(void *)(*((void *)v8 + 5) + 16LL);
    if (v9) {
      break;
    }
LABEL_2:
    if (++v7 >= *a1) {
      return 0LL;
    }
  }

  uint64_t v10 = v8[18];
  while (!*(void *)(v9 + 80) || !*(_WORD *)(v9 + 94))
  {
LABEL_5:
    uint64_t v9 = *(void *)(v9 + 40);
    if (!v9) {
      goto LABEL_2;
    }
  }

  uint64_t v11 = 0LL;
  while (1)
  {
    if (*(__int16 *)(*(void *)(v9 + 8) + 2 * v11) == -2)
    {
      if (a3)
      {
        int v12 = a3;
        while (1)
        {
          int v13 = *((_DWORD *)v12 + 1);
          if ((v13 & 0x82000) == 0) {
            break;
          }
          if ((v13 & 0x80000) != 0)
          {
            int v12 = *(_BYTE **)(*((void *)v12 + 4) + 8LL);
            if (!v12) {
              break;
            }
          }

          else
          {
            int v12 = (_BYTE *)*((void *)v12 + 2);
            if (!v12) {
              break;
            }
          }
        }
      }

      else
      {
        int v12 = 0LL;
      }

      uint64_t v14 = *(void *)(*(void *)(v9 + 80) + 24 * v11 + 8);
      if (v14)
      {
        while (1)
        {
          int v15 = *(_DWORD *)(v14 + 4);
          if ((v15 & 0x82000) == 0) {
            break;
          }
          if ((v15 & 0x80000) != 0)
          {
            uint64_t v14 = *(void *)(*(void *)(v14 + 32) + 8LL);
            if (!v14) {
              break;
            }
          }

          else
          {
            uint64_t v14 = *(void *)(v14 + 16);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
  }

  *a2 = v10;
  a2[1] = -2;
  return 1LL;
}