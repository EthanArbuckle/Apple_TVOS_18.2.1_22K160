unsigned __int8 *sub_1813335A4(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *result;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  v9 = **(uint64_t ***)a1;
  v10 = *v9;
  v24 = 0;
  if (!sub_181323268(a3, &v24) || (v11 = v24, v24 < 0))
  {
    result = (unsigned __int8 *)sub_1812F2264(v10, 0x51uLL);
    if (!result) {
      return result;
    }
    v13 = result;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *result = -80;
    result[80] = 0;
    *((_WORD *)result + 26) = -1;
    *((void *)result + 1) = result + 80;
    *((_DWORD *)result + 10) = 1;
    *((_DWORD *)result + 11) = a2;
    v14 = sub_1812F2264(*v9, 0x50uLL);
    if (!v14) {
      return (unsigned __int8 *)sub_181309110((void *)*v9, v13);
    }
  }

  else
  {
    v25 = 0LL;
    v26 = 0;
    result = (unsigned __int8 *)sub_18127F5B0(v10, 155, (uint64_t)&v25, 0);
    if (!result) {
      return result;
    }
    v13 = result;
    *((_DWORD *)result + 1) |= 0x800u;
    *((_DWORD *)result + 2) = v11;
    v14 = sub_1812F2264(*v9, 0x50uLL);
    if (!v14) {
      return (unsigned __int8 *)sub_181309110((void *)*v9, v13);
    }
  }

  v21 = v14;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)v14 = 46;
  *(_WORD *)(v14 + 52) = -1;
  *(void *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 4) |= *((_DWORD *)v13 + 1) & 0x400208;
  v22 = *((_DWORD *)v13 + 10);
  *(_DWORD *)(v14 + 40) = v22 + 1;
  if (*(_DWORD *)(*v9 + 148) <= v22) {
    sub_1812DC47C( (uint64_t)v9,  "Expression tree is too large (maximum depth %d)",  v15,  v16,  v17,  v18,  v19,  v20,  *(_DWORD *)(*v9 + 148));
  }
  result = (unsigned __int8 *)sub_1812A2264(a1, v21, 3);
  v23 = *(void *)(a1 + 32) + 56LL * (int)result;
  *(_DWORD *)(v23 + 28) = a4;
  *(_WORD *)(v23 + 20) = 64;
  *(_BYTE *)(v23 + 23) = a5;
  return result;
}

uint64_t sub_1813337A4(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 != 172 || (a2[6] & 0x10) != 0) {
    return 0LL;
  }
  *(_WORD *)(a1 + 36) = 0;
  return 2LL;
}

unsigned __int16 *sub_1813337CC(uint64_t a1, int a2, int a3, uint64_t a4, int a5, void *a6)
{
  char v6 = a5;
  v17[0] = a1;
  v17[1] = a1;
  char v22 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  int v20 = 0;
  int v21 = a5;
  int v24 = a2;
  __int16 v23 = 257;
  if (a6)
  {
    int v8 = *(unsigned __int16 *)(a6[1] + 2LL * a3);
    uint64_t v9 = a6[3];
    if (v8 == *(unsigned __int16 *)(v9 + 52))
    {
      LOWORD(a3) = -1;
    }

    else
    {
      uint64_t v11 = a3;
      LOWORD(a3) = *(_WORD *)(a6[1] + 2LL * a3);
      if ((__int16)v8 < 0)
      {
        if ((__int16)v8 == -2)
        {
          uint64_t v12 = *(void *)(a6[10] + 24LL * (int)v11 + 8);
          uint64_t v18 = *(void *)(a6[8] + 8 * v11);
          uint64_t v19 = v12;
          __int16 v25 = -2;
          v13 = sub_181333C68((uint64_t)v17);
          v10 = 0LL;
          if (!v13) {
            return v10;
          }
          goto LABEL_12;
        }
      }

      else
      {
        char v22 = *(_BYTE *)(*(void *)(v9 + 8) + 16LL * (__int16)v8 + 9);
        uint64_t v18 = *(void *)(a6[8] + 8 * v11);
      }
    }
  }

  else if (a3 == -2)
  {
    return 0LL;
  }

  __int16 v25 = a3;
  v13 = sub_181333910(v17);
  v10 = 0LL;
  if (v13)
  {
LABEL_12:
    unsigned __int16 v14 = v6 & 0x82;
    do
    {
      uint64_t v15 = *((void *)v13 + 5);
      if ((v15 & a4) == 0)
      {
        if (!v15 && (v14 & v13[10]) != 0) {
          return v13;
        }
        if (!v10) {
          v10 = v13;
        }
      }

      v13 = sub_181333910(v17);
    }

    while (v13);
  }

  return v10;
}

unsigned __int16 *sub_181333910(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 8);
  uint64_t v3 = a1[1];
  unint64_t v4 = *((unsigned __int8 *)a1 + 41);
  v35 = a1 + 11;
LABEL_2:
  unint64_t v5 = v4 - 1;
  int v6 = *((__int16 *)a1 + v5 + 44);
  uint64_t v7 = *((unsigned int *)a1 + v5 + 11);
  while (v2 >= *(_DWORD *)(v3 + 20))
  {
LABEL_3:
    int v2 = 0;
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3)
    {
      unint64_t v33 = *((unsigned __int8 *)a1 + 41);
      int v2 = 0;
      uint64_t v3 = *a1;
      unint64_t v4 = v33 + 1;
      *((_BYTE *)a1 + 41) = v4;
      goto LABEL_2;
    }
  }

  int v8 = (unsigned __int16 *)(*(void *)(v3 + 32) + 56LL * v2);
  while (1)
  {
    if (*((_DWORD *)v8 + 7) != (_DWORD)v7 || *((_DWORD *)v8 + 8) != v6) {
      goto LABEL_6;
    }
    if (v6 == -2)
    {
      uint64_t v9 = *(void *)(*(void *)v8 + 16LL);
      if (v9)
      {
        while (1)
        {
          int v10 = *(_DWORD *)(v9 + 4);
          if ((v10 & 0x82000) == 0) {
            break;
          }
          if ((v10 & 0x80000) != 0)
          {
            uint64_t v9 = *(void *)(*(void *)(v9 + 32) + 8LL);
            if (!v9) {
              break;
            }
          }

          else
          {
            uint64_t v9 = *(void *)(v9 + 16);
            if (!v9) {
              break;
            }
          }
        }
      }

      uint64_t v11 = a1[3];
      if (v11)
      {
        while (1)
        {
          int v12 = *(_DWORD *)(v11 + 4);
          if ((v12 & 0x82000) == 0) {
            break;
          }
          if ((v12 & 0x80000) != 0)
          {
            uint64_t v11 = *(void *)(*(void *)(v11 + 32) + 8LL);
            if (!v11) {
              break;
            }
          }

          else
          {
            uint64_t v11 = *(void *)(v11 + 16);
            if (!v11) {
              break;
            }
          }
        }
      }
    }

    int v13 = v8[10];
    if ((v13 & 0x800) != 0)
    {
      uint64_t v14 = *((unsigned __int8 *)a1 + 42);
      if (v14 <= 0xA)
      {
        uint64_t v15 = *(unsigned __int8 **)(*(void *)v8 + 24LL);
        if (v15)
        {
          while (1)
          {
            int v17 = *((_DWORD *)v15 + 1);
            if ((v17 & 0x82000) == 0) {
              break;
            }
            if ((v17 & 0x80000) != 0) {
              v16 = (unsigned __int8 **)(*((void *)v15 + 4) + 8LL);
            }
            else {
              v16 = (unsigned __int8 **)(v15 + 16);
            }
            uint64_t v15 = *v16;
            if (!v15) {
              goto LABEL_45;
            }
          }

          if ((v17 & 0x20) == 0 && *v15 == 167)
          {
            if (*((_BYTE *)a1 + 42))
            {
              uint64_t v18 = 0LL;
              while (*((_DWORD *)v35 + v18 - 11) != *((_DWORD *)v15 + 11)
                   || *((_DWORD *)v15 + 12) != *((__int16 *)v35 + v18))
              {
                if (v14 == ++v18) {
                  goto LABEL_44;
                }
              }
            }

            else
            {
              LODWORD(v18) = 0;
            }

            if ((_DWORD)v18 == (_DWORD)v14)
            {
LABEL_44:
              *((_DWORD *)a1 + *((unsigned __int8 *)a1 + 42) + 11) = *((_DWORD *)v15 + 11);
              *((_WORD *)a1 + v14 + 44) = *((_DWORD *)v15 + 12);
              *((_BYTE *)a1 + 42) = v14 + 1;
              int v13 = v8[10];
            }
          }
        }
      }
    }

unsigned __int16 *sub_181333C68(uint64_t a1)
{
  *(_BYTE *)(a1 + 40) = sub_1812A3C7C(*(unsigned __int8 **)(a1 + 24));
  return sub_181333910((uint64_t *)a1);
}

BOOL sub_181333C94(uint64_t a1, int a2)
{
  int v4 = sub_1812A3C7C(*(unsigned __int8 **)(a1 + 16));
  unint64_t v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    int v6 = sub_1812A3C7C(v5);
    if (v4 >= 65 && v6 >= 65)
    {
      return 1LL;
    }

uint64_t sub_181333D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v109 = 0;
  uint64_t v3 = *(uint64_t ***)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v6 = **(uint64_t ***)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 8LL);
  uint64_t v108 = *(void *)(a1 + 16);
  unsigned int v7 = *(unsigned __int8 *)(v108 + 16);
  int v8 = *(unsigned int **)(*(void *)a1 + 16LL);
  uint64_t v9 = *(void *)(v5 + 104LL * *(unsigned __int8 *)(v108 + 16) + 40);
  int v10 = *(_DWORD *)(v4 + 20);
  if (v10 < 1)
  {
    int v11 = 0;
  }

  else
  {
    int v11 = 0;
    uint64_t v12 = v5 + 104LL * *(unsigned __int8 *)(v108 + 16);
    int v13 = *(_DWORD *)(v12 + 72);
    uint64_t v14 = (_BYTE *)(v12 + 68);
    uint64_t v15 = *(void *)(v4 + 32) + 20LL;
    do
    {
      __int16 v16 = *(_WORD *)(v15 - 2);
      *(_WORD *)(v15 - 2) = v16 & 0xFFBF;
      if (*(_DWORD *)(v15 + 8) == v13
        && (*(void *)(v15 + 20) & a3) == 0
        && (*(_WORD *)v15 & 0xF7FF) != 0
        && (v16 & 0x80) == 0)
      {
        if ((*v14 & 0x58) == 0
          || (uint64_t v18 = *(void *)(v15 - 20), v19 = *(_DWORD *)(v18 + 4), (v19 & 3) != 0)
          && *(_DWORD *)(v18 + 56) == v13
          && ((*v14 & 0x18) == 0 || (v19 & 2) == 0))
        {
          ++v11;
          *(_WORD *)(v15 - 2) = v16 | 0x40;
        }
      }

      v15 += 56LL;
      --v10;
    }

    while (v10);
  }

  uint64_t v107 = v4;
  if (v8)
  {
    uint64_t v20 = *v8;
    if ((int)v20 >= 1)
    {
      uint64_t v101 = v9;
      uint64_t v21 = 0LL;
      v103 = (_DWORD *)(v5 + 104LL * v7 + 72);
      while (1)
      {
        uint64_t v22 = *(unsigned __int8 **)&v8[6 * v21 + 2];
        __int16 v113 = 1;
        v111 = sub_18129C78C;
        v112 = sub_18131C570;
        int v114 = 0;
        if (v22)
        {
          sub_18131C57C((uint64_t)&v110, (uint64_t)v22);
          if (!v113)
          {
            if ((v8[6 * v21 + 6] & 2) != 0) {
              goto LABEL_51;
            }
            int v23 = *v22;
            if (v23 == 113)
            {
              uint64_t v24 = (unsigned __int8 *)*((void *)v22 + 2);
              if (*v24 != 167 || *((_DWORD *)v24 + 11) != *v103) {
                goto LABEL_51;
              }
              *((_DWORD *)v22 + 12) = *((_DWORD *)v24 + 12);
              uint64_t v25 = *((unsigned int *)v24 + 12);
              if ((v25 & 0x80000000) == 0)
              {
                uint64_t v26 = *(void *)(v101 + 8);
                __int16 v27 = *(_WORD *)(v26 + 16 * v25 + 14);
                if ((v27 & 0x200) != 0)
                {
                  uint64_t v29 = *(void *)(v26 + 16 * v25) - 1LL;
                  if ((v27 & 4) != 0)
                  {
                  }

                  v28 = (const char *)(v29 + 1);
                }

                else
                {
                  v28 = 0LL;
                }

                v32 = (_BYTE *)*((void *)v22 + 1);
                if (v32)
                {
                  if (!v28) {
                    v28 = "BINARY";
                  }
                  while (1)
                  {
                    uint64_t v33 = *v32;
                    uint64_t v34 = *(unsigned __int8 *)v28;
                    if ((_DWORD)v33 == (_DWORD)v34)
                    {
                      if (!*v32) {
                        goto LABEL_22;
                      }
                    }

                    else if (byte_1813C6343[v33] != byte_1813C6343[v34])
                    {
                      goto LABEL_51;
                    }

                    ++v32;
                    ++v28;
                  }
                }

                goto LABEL_51;
              }
            }

            else if (v23 != 167 || *((_DWORD *)v22 + 11) != *v103)
            {
              goto LABEL_51;
            }
          }
        }

LABEL_158:
    v94 = (void *)*v6;
    int v95 = *v45;
    if (*v45 >= 1)
    {
      uint64_t v96 = 0LL;
      do
      {
        v97 = &v45[2 * v96];
        uint64_t v98 = *((void *)v97 + 16);
        if (v98)
        {
          if ((*(_WORD *)(v98 + 20) & 0x9000) != 0 || *(_DWORD *)(v98 + 32)) {
            sub_181303838(*((void *)v97 + 16));
          }
          sub_1812F20DC(*(void **)(v98 + 24), (void *)v98);
          int v95 = *v45;
        }

        *((void *)v97 + 16) = 0LL;
        ++v96;
      }

      while (v96 < v95);
    }

    sub_1812F20DC(v94, v45);
    return v62;
  }

  v68 = (void *)*v6;
  int v69 = (v67 + 7) & 0xFFFFFFF8;
  v70 = (void *)sub_1812F2264(*v6, 8LL * v69);
  if (v70)
  {
    v71 = v70;
    memcpy(v70, *(const void **)(v108 + 64), 8LL * *(unsigned __int16 *)(v108 + 56));
    v72 = *(void **)(v108 + 64);
    if (v72 != (void *)(v108 + 80)) {
      sub_1812F20DC(v68, v72);
    }
    *(void *)(v108 + 64) = v71;
    *(_WORD *)(v108 + 56) = v69;
    goto LABEL_104;
  }

  v75 = (void *)*v6;
  int v76 = *v45;
  if (*v45 >= 1)
  {
    uint64_t v77 = 0LL;
    do
    {
      v78 = &v45[2 * v77];
      uint64_t v79 = *((void *)v78 + 16);
      if (v79)
      {
        if ((*(_WORD *)(v79 + 20) & 0x9000) != 0 || *(_DWORD *)(v79 + 32)) {
          sub_181303838(*((void *)v78 + 16));
        }
        sub_1812F20DC(*(void **)(v79 + 24), (void *)v79);
        int v76 = *v45;
      }

      *((void *)v78 + 16) = 0LL;
      ++v77;
    }

    while (v77 < v76);
  }

  sub_1812F20DC(v75, v45);
  return 7LL;
}

  if (v25)
  {
    if (v25 == 1 && (*(void *)(v5 + 48) & 0x10000001LL) == 1)
    {
      sqlite3_result_value(a1, (sqlite3_value *)a3[3]);
    }

    else if (v95[1])
    {
      sub_181353638((uint64_t)a1, (uint64_t)&byte_1813CEAEE, a3[1], a3[2], v95, v26, v27, v28);
    }

    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v25;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
      {
        switch(v25)
        {
          case 516:
            int v87 = "abort due to ROLLBACK";
            break;
          case 101:
            int v87 = "no more rows available";
            break;
          case 100:
            int v87 = "another row available";
            break;
          default:
            else {
              int v87 = off_189B6EC30[v25];
            }
            break;
        }

        sub_1812D7A8C((uint64_t)a1, v87, -1, 1u, 0LL);
      }
    }

    else
    {
      sub_1812CF36C(97620);
    }
  }

  result = (uint64_t)sub_18135379C(v95);
  v85 = (void *)v93;
  if ((void)v93)
  {
    do
    {
      uint64_t v86 = (void *)v85[3];
      result = (uint64_t)sub_1812F20DC((void *)v5, v85);
      v85 = v86;
    }

    while (v86);
  }

  if (!*(_BYTE *)(v5 + 111)) {
    result = sub_1812FA0B4(v5);
  }
  *(void *)(v5 + 528) = v21;
  return result;
}

  uint64_t v31 = v36;
LABEL_159:
  v99 = *v103;
  if (*v103)
  {
    char v100 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_165;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v99);
    --qword_18C468B10;
    result = off_18C4653A8(v99);
    v99 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      char v100 = &xmmword_18C465410;
LABEL_165:
      result = (*v100)(v99);
    }
  }

  _DWORD *v103 = 0LL;
  v103[1] = 0LL;
  if (__src)
  {
    uint64_t v101 = (uint64_t (**)(void *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_172;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(__src);
    --qword_18C468B10;
    result = off_18C4653A8(__src);
    __src = (_BYTE *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v101 = (uint64_t (**)(void *))&xmmword_18C465410;
LABEL_172:
      result = (*v101)(__src);
    }
  }

  *(void *)(v104 + v31) = 0LL;
  _DWORD *v103 = v104;
  *((_DWORD *)v103 + 2) = v31;
  *((_DWORD *)v103 + 3) = v102;
  return result;
}

              unint64_t v84 = sqlite3_errmsg(v33);
              v45 = sqlite3_mprintf("%s", v84);
LABEL_47:
              *unsigned int v7 = v45;
            }

            goto LABEL_48;
          }

uint64_t sub_18133472C(void *a1, uint64_t a2)
{
  __int16 v91 = -1;
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = (_WORD *)*a1;
  uint64_t v5 = *(void *)(*a1 + 8LL) + 8LL;
  unsigned int v6 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v7 = v5 + 104LL * *(unsigned __int8 *)(v2 + 16);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t v9 = v7 + 32;
  uint64_t v8 = v10;
  uint64_t v82 = v5 + 104LL * *(unsigned __int8 *)(v2 + 16);
  __int16 v11 = *(_WORD *)(v82 + 61);
  v89 = (_WORD *)(v82 + 61);
  if ((v11 & 2) != 0)
  {
    uint64_t v12 = *(void **)(v5 + 104LL * *(unsigned __int8 *)(v2 + 16) + 96);
  }

  else if ((*(_BYTE *)(v8 + 48) & 0x80) != 0)
  {
    uint64_t v12 = *(void **)(v8 + 16);
  }

  else
  {
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    v93[0] = 0LL;
    __int128 v95 = 0u;
    __int128 v96 = 0u;
    __int128 v94 = 0u;
    LOWORD(v98) = 1;
    v93[1] = &v91;
    v93[2] = v92;
    BYTE2(v98) = 5;
    v93[3] = v8;
    HIDWORD(v97) = 65539;
    *(_WORD *)((char *)&v98 + 3) = 3;
    v92[0] = *(_WORD *)(v8 + 58);
    v92[1] = 0;
    if ((v11 & 1) == 0) {
      *((void *)&v94 + 1) = *(void *)(v8 + 16);
    }
    uint64_t v12 = v93;
  }

  uint64_t v85 = v8;
  uint64_t v86 = (_BYTE *)(v82 + 60);
  v90 = v4;
  uint64_t v81 = v3;
  if (a1[3] || (v4[30] & 0x1020) != 0) {
    goto LABEL_10;
  }
  uint64_t result = 0LL;
  if ((*(_BYTE *)(**(void **)v4 + 49LL) & 0x80) == 0 || (v11 & 3) != 0) {
    goto LABEL_11;
  }
  if (v11 & 0x48 | *(_BYTE *)(v8 + 48) & 0x80 || (*v86 & 0x10) != 0)
  {
LABEL_10:
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t v54 = v3;
    __int16 v55 = *(_WORD *)(v8 + 58);
    int v56 = *(uint64_t **)(v54 + 32);
    int v57 = *(_DWORD *)(v54 + 20);
    int v58 = sub_1813366C0(v55);
    if (v57 >= 1)
    {
      int v59 = v58;
      int v60 = &v56[7 * v57];
      __int16 v84 = v58 + v55 + 28;
      __int16 v88 = v58 + v55 - 25;
      uint64_t v71 = 43LL - v58;
      uint64_t v72 = v58 - 43LL;
      if (v58 >= 93) {
        __int16 v61 = v58;
      }
      else {
        __int16 v61 = v58 + 1;
      }
      __int16 v78 = v61;
      BOOL v62 = v58 < -6;
      if (v58 < -6) {
        __int16 v63 = 43;
      }
      else {
        __int16 v63 = 44;
      }
      BOOL v73 = v62;
      __int16 v75 = v63;
      uint64_t v3 = v81;
      while (1)
      {
        if ((*(void *)(v2 + 8) & v56[5]) != 0
          || (int v64 = *((_DWORD *)v56 + 7), v64 != *(_DWORD *)(v5 + 104LL * v6 + 64))
          || (*((_WORD *)v56 + 10) & 0x82) == 0
          || (*v86 & 0x58) != 0
          && ((int v65 = *(_DWORD *)(*v56 + 4), (v65 & 3) == 0)
           || *(_DWORD *)(*v56 + 56) != v64
           || (*v86 & 0x18) != 0 && (v65 & 2) != 0)
          || (uint64_t v66 = *((unsigned int *)v56 + 8), (v66 & 0x80000000) != 0))
        {
          uint64_t result = 0LL;
          goto LABEL_157;
        }

        uint64_t result = sub_181333C94(*v56, *(char *)(*(void *)(*(void *)v9 + 8LL) + 16 * v66 + 9));
        if ((_DWORD)result) {
          break;
        }
LABEL_163:
        if ((_DWORD)result) {
          goto LABEL_11;
        }
LABEL_157:
        v56 += 7;
        if (v56 >= v60) {
          goto LABEL_11;
        }
      }

      *(_WORD *)(v2 + 24) = 1;
      *(void *)(v2 + 32) = 0LL;
      *(_DWORD *)(v2 + 52) = 1;
      **(void **)(v2 + 64) = v56;
      if (*(_BYTE *)(v85 + 63) == 2 || (__int16 v67 = v84, (*(_BYTE *)(v85 + 49) & 0x40) != 0)) {
        __int16 v67 = v88;
      }
      *(_WORD *)(v2 + 18) = v67 & ~(v67 >> 15);
      *(_WORD *)(v2 + 22) = 43;
      if (v59 >= 43)
      {
        __int16 v68 = v78;
        if (v59 <= 74)
        {
          __int16 v70 = byte_1813CA370[v72];
          __int16 v69 = v59;
          goto LABEL_161;
        }
      }

      else
      {
        __int16 v68 = v75;
        if (!v73)
        {
          __int16 v69 = byte_1813CA370[v71];
          __int16 v70 = 43;
LABEL_161:
          __int16 v68 = v69 + v70;
        }
      }

      *(_WORD *)(v2 + 20) = v68;
      *(_DWORD *)(v2 + 48) = 0x4000;
      *(void *)uint64_t v2 = v56[5] | a2;
      uint64_t result = sub_181335FD4((uint64_t)a1, v2);
      goto LABEL_163;
    }

    uint64_t result = 0LL;
    uint64_t v3 = v81;
  }

uint64_t sub_18133509C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v51 = (void *)v4;
  int v7 = *(_DWORD *)(v4 + 20);
  uint64_t v8 = a1[2];
  uint64_t v63 = 0LL;
  memset(v62, 0, sizeof(v62));
  uint64_t v9 = *(void *)(v5 + 8) + 8LL;
  uint64_t v10 = v9 + 104LL * *(unsigned __int8 *)(v8 + 16);
  if ((*(_BYTE *)(v10 + 60) & 0x10) != 0 || v7 < 1) {
    return v3;
  }
  uint64_t v11 = (uint64_t)a1;
  unint64_t v52 = v6 + 56LL * v7;
  uint64_t v56 = v9 + 104LL * *(unsigned __int8 *)(v8 + 16) + 32;
  int v53 = *(_DWORD *)(v10 + 64);
  do
  {
    uint64_t v57 = v6;
    if ((*(_WORD *)(v6 + 20) & 0x200) == 0
      || (uint64_t v12 = *(void *)(v6 + 32), (*(void *)(v8 + 8) & *(void *)(v12 + 488)) == 0LL))
    {
      uint64_t v3 = 0LL;
      goto LABEL_66;
    }

    unint64_t v13 = *(void *)(v12 + 32) + 56LL * *(int *)(v12 + 20);
    uint64_t v14 = *(void *)(v11 + 32);
    __int128 v15 = *(_OWORD *)(v11 + 16);
    __int128 v64 = *(_OWORD *)v11;
    uint64_t v65 = v15;
    uint64_t v66 = v61;
    uint64_t v67 = v14;
    unint64_t v16 = *(void *)(v12 + 32);
    unint64_t v59 = v13;
    if (v16 >= v13)
    {
      uint64_t v3 = 0LL;
      goto LABEL_71;
    }

    uint64_t v3 = 0LL;
    int v17 = 1;
    while ((*(_WORD *)(v16 + 20) & 0x400) == 0)
    {
      if (*(_DWORD *)(v16 + 28) == v53)
      {
        v68[0] = *v51;
        v68[1] = v51;
        char v69 = 44;
        int v70 = 1;
        int v71 = 1;
        unint64_t v72 = v16;
        uint64_t v18 = v68;
        goto LABEL_15;
      }

uint64_t sub_1813355D4(void *a1, uint64_t a2, int a3)
{
  signed int v5 = (a3 + 7) & 0xFFFFFFF8;
  uint64_t v6 = (void *)sub_1812F2264((uint64_t)a1, 8LL * v5);
  if (!v6) {
    return 7LL;
  }
  int v7 = v6;
  memcpy(v6, *(const void **)(a2 + 64), 8LL * *(unsigned __int16 *)(a2 + 56));
  uint64_t v8 = *(void **)(a2 + 64);
  if (v8 != (void *)(a2 + 80)) {
    sub_1812F20DC(a1, v8);
  }
  uint64_t result = 0LL;
  *(void *)(a2 + 64) = v7;
  *(_WORD *)(a2 + 56) = v5;
  return result;
}

uint64_t sub_181335664( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, unsigned int *a5, unsigned int a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v9 = (char *)*((void *)a5 + 4);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = **(void **)a1;
  uint64_t v13 = *(void *)(*(void *)a1 + 8LL);
  unsigned int v14 = *(unsigned __int8 *)(v10 + 16);
  uint64_t v15 = *a5;
  *a7 = 0;
  *(void *)uint64_t v10 = a2;
  if ((int)v15 >= 1)
  {
    uint64_t v16 = *(void *)(v11 + 32);
    uint64_t v17 = *((void *)a5 + 1) + 5LL;
    int v18 = v15;
    do
    {
      int v19 = *(_DWORD *)(v17 + 3);
      *(_BYTE *)uint64_t v17 = 0;
      if ((*(void *)(v16 + 56LL * v19 + 40) & ~a3) == 0
        && (*(_WORD *)(v16 + 56LL * v19 + 20) & a4) == 0
        && (a8 || *(unsigned __int8 *)(v16 + 56LL * v19 + 23) - 75 <= 0xFFFFFFFD))
      {
        *(_BYTE *)uint64_t v17 = 1;
      }

      v17 += 12LL;
      --v18;
    }

    while (v18);
  }

  v99 = v9;
  bzero(v9, 8LL * (int)v15);
  *((void *)a5 + 6) = 0LL;
  a5[10] = 0;
  a5[15] = 0;
  *((void *)a5 + 8) = 0x546D42AEA2879F2ELL;
  *((void *)a5 + 9) = 25LL;
  a5[20] = 0;
  uint64_t v20 = v13 + 104LL * v14;
  uint64_t v21 = *(void *)(v20 + 40);
  __int128 v97 = (void **)(v20 + 40);
  *((void *)a5 + 11) = *(void *)(v20 + 88);
  a5[30] = 0;
  uint64_t v22 = *(void *)v12;
  uint64_t v23 = v21 + 80;
  uint64_t v24 = (uint64_t **)(v21 + 80);
  do
  {
    int v25 = *v24;
    int v26 = *v24;
    uint64_t v27 = *v26;
    uint64_t v24 = (uint64_t **)(v26 + 5);
  }

  while (v27 != v22);
  int v28 = (void *)v25[2];
  ++*(_DWORD *)(v22 + 72);
  unsigned int v29 = (*(uint64_t (**)(void *, unsigned int *))(*v28 + 24LL))(v28, a5);
  unsigned int v36 = v29;
  uint64_t v37 = *(void *)v12;
  --*(_DWORD *)(*(void *)v12 + 72LL);
  if (v29) {
    BOOL v38 = v29 == 19;
  }
  else {
    BOOL v38 = 1;
  }
  if (!v38)
  {
    if (v29 == 7)
    {
      if (!*(_BYTE *)(v37 + 103) && !*(_BYTE *)(v37 + 104))
      {
        *(_BYTE *)(v37 + 103) = 1;
        ++*(_DWORD *)(v37 + 432);
        *(_WORD *)(v37 + 436) = 0;
        uint64_t v39 = *(void *)(v37 + 344);
        if (v39)
        {
          sub_1812DC47C(v39, "out of memory", v30, v31, v32, v33, v34, v35, v95);
          for (uint64_t i = *(void *)(v37 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
    }

    else
    {
      uint64_t v41 = (const char *)v28[2];
      if (!v41)
      {
        switch(v29)
        {
          case 0x204u:
            uint64_t v41 = "abort due to ROLLBACK";
            break;
          case 0x65u:
            uint64_t v41 = "no more rows available";
            break;
          case 0x64u:
            uint64_t v41 = "another row available";
            break;
          default:
            else {
              uint64_t v41 = off_189B6EC30[v29];
            }
            break;
        }
      }

      sub_1812DC47C(v12, "%s", v30, v31, v32, v33, v34, v35, (char)v41);
    }
  }

  if (*(_BYTE *)(*(void *)v23 + 29LL))
  {
    int v42 = *(_DWORD *)(*(void *)v12 + 40LL);
    if (v42 >= 1)
    {
      if (*(void *)(v12 + 168)) {
        uint64_t v43 = *(void *)(v12 + 168);
      }
      else {
        uint64_t v43 = v12;
      }
      int v44 = *(_DWORD *)(v43 + 124);
      if ((v44 & 1) == 0)
      {
        v44 |= 1u;
        *(_DWORD *)(v43 + 124) = v44;
      }

      if (v42 != 1)
      {
        if ((v44 & 2) == 0)
        {
          *(_DWORD *)(v43 + 124) = v44 | 2;
          sub_1812FA2F0(v43);
        }

        if (v42 != 2)
        {
          uint64_t v53 = *(void *)(v12 + 168);
          if (!v53) {
            uint64_t v53 = v12;
          }
          int v54 = *(_DWORD *)(v53 + 124);
          for (int j = 2; j != v42; ++j)
          {
            if (((1 << j) & v54) == 0)
            {
              v54 |= 1 << j;
              *(_DWORD *)(v53 + 124) = v54;
            }
          }
        }
      }

      if (*(_DWORD *)(v12 + 120))
      {
        if (*(void *)(v12 + 168)) {
          uint64_t v45 = *(void *)(v12 + 168);
        }
        else {
          uint64_t v45 = v12;
        }
        int v46 = *(_DWORD *)(v45 + 124);
        if ((v46 & 1) == 0)
        {
          v46 |= 1u;
          *(_DWORD *)(v45 + 124) = v46;
        }

        int v47 = *(_DWORD *)(v45 + 120) | 1;
        *(_DWORD *)(v45 + 120) = v47;
        if (v42 != 1)
        {
          if ((v46 & 2) == 0)
          {
            *(_DWORD *)(v45 + 124) = v46 | 2;
            sub_1812FA2F0(v45);
            int v47 = *(_DWORD *)(v45 + 120);
          }

          *(_DWORD *)(v45 + 120) = v47 | 2;
          if (v42 != 2)
          {
            uint64_t v48 = *(void *)(v12 + 168);
            if (!v48) {
              uint64_t v48 = v12;
            }
            int v50 = *(_DWORD *)(v48 + 120);
            int v49 = *(_DWORD *)(v48 + 124);
            for (int k = 2; k != v42; ++k)
            {
              int v52 = 1 << k;
              if (((1 << k) & v49) == 0)
              {
                v49 |= v52;
                *(_DWORD *)(v48 + 124) = v49;
              }

              v50 |= v52;
            }

            *(_DWORD *)(v48 + 120) = v50;
          }
        }
      }
    }
  }

  uint64_t v56 = v28[2];
  if (v56)
  {
    uint64_t v57 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_71:
      (*v57)(v56);
      goto LABEL_72;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v56);
    --qword_18C468B10;
    off_18C4653A8(v56);
    uint64_t v56 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v57 = &xmmword_18C465410;
      goto LABEL_71;
    }
  }

LABEL_169:
    *(_BYTE *)(v10 + 28) &= ~1u;
    return v58;
  }

  uint64_t v81 = *(void **)(v10 + 64);
  while (*v81)
  {
    ++v81;
    if (!--v80) {
      goto LABEL_113;
    }
  }

        v215 = v40;
        unsigned int v29 = v221;
        goto LABEL_26;
      case 6:
        uint64_t v30 = v227;
        if (!v208) {
          goto LABEL_177;
        }
        uint64_t v65 = (uint64_t (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_176;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v208);
        --qword_18C468B10;
        off_18C4653A8(v208);
        v208 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v65 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_176:
          (*v65)(v208);
        }

uint64_t sub_181335FD4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2)
  {
    uint64_t v4 = *(void ****)a1;
    signed int v5 = ***(void ****)a1;
    *(_DWORD *)(a1 + 36) = v2 - 1;
    uint64_t v8 = v4[10];
    uint64_t v6 = (uint64_t *)(v4 + 10);
    int v7 = v8;
    int v9 = *(_DWORD *)(a2 + 48);
    if (v8) {
      BOOL v10 = (*(_DWORD *)(a2 + 48) & 0x200) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      int v22 = *(unsigned __int8 *)(a2 + 16);
      do
      {
        int v32 = *((_DWORD *)v7 + 12);
        if ((v32 & 0x200) == 0) {
          goto LABEL_37;
        }
        int v33 = *((unsigned __int16 *)v7 + 26);
        unsigned int v34 = *((unsigned __int16 *)v7 + 27);
        uint64_t v35 = *(unsigned __int16 *)(a2 + 52);
        unsigned int v36 = *(unsigned __int16 *)(a2 + 54);
        int v37 = *((__int16 *)v7 + 10);
        int v38 = *(__int16 *)(a2 + 20);
        if (v37 <= v38)
        {
          if (v36 > v34) {
            goto LABEL_56;
          }
        }

        else if (v36 > v34 || *((__int16 *)v7 + 11) > *(__int16 *)(a2 + 22))
        {
          goto LABEL_56;
        }

        if (*((_WORD *)v7 + 26))
        {
          uint64_t v39 = *((unsigned __int16 *)v7 + 26);
          while (1)
          {
            uint64_t v41 = v7[8][v39 - 1];
            if (v41) {
              break;
            }
LABEL_48:
            BOOL v40 = v39-- <= 1;
            if (v40) {
              goto LABEL_54;
            }
          }

          uint64_t v42 = *(unsigned __int16 *)(a2 + 52);
          while (1)
          {
            BOOL v40 = v42-- < 1;
            if (v40) {
              break;
            }
          }
        }

        else
        {
LABEL_54:
          if ((v9 & 0x40) != 0 || (v32 & 0x40) == 0)
          {
            if (v37 >= v38) {
              __int16 v29 = *(_WORD *)(a2 + 20);
            }
            else {
              __int16 v29 = *((_WORD *)v7 + 10);
            }
            *(_WORD *)(a2 + 20) = v29;
            int v30 = *((__int16 *)v7 + 11);
            else {
              __int16 v31 = *(_WORD *)(a2 + 22);
            }
            goto LABEL_36;
          }
        }

uint64_t *sub_1813364C0(uint64_t *result, uint64_t a2)
{
  for (uint64_t i = *result; i; uint64_t i = *(void *)(i + 72))
  {
    if (*(unsigned __int8 *)(i + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(i + 17) == *(unsigned __int8 *)(a2 + 17))
    {
      if ((*(_BYTE *)(i + 49) & 0x40) != 0
        && !*(_WORD *)(a2 + 54)
        && (~*(_DWORD *)(a2 + 48) & 0x201) == 0
        && (*(void *)a2 & ~*(void *)i) == 0LL)
      {
        return result;
      }

      uint64_t v3 = *(void *)a2 & *(void *)i;
      if (v3 == *(void *)i
        && *(__int16 *)(i + 18) <= *(__int16 *)(a2 + 18)
        && *(__int16 *)(i + 20) <= *(__int16 *)(a2 + 20)
        && *(__int16 *)(i + 22) <= *(__int16 *)(a2 + 22))
      {
        return 0LL;
      }

      if (v3 == *(void *)a2
        && *(__int16 *)(i + 20) >= *(__int16 *)(a2 + 20)
        && *(__int16 *)(i + 22) >= *(__int16 *)(a2 + 22))
      {
        return result;
      }
    }

    uint64_t result = (uint64_t *)(i + 72);
  }

  return result;
}

void *sub_1813365A4(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  if ((v2 & 0x4400) == 0) {
    return result;
  }
  uint64_t v4 = result;
  if ((v2 & 0x400) != 0 && (*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7)
    {
      uint64_t v8 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v7);
        --qword_18C468B10;
        uint64_t result = (void *)off_18C4653A8(v7);
        uint64_t v7 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_16;
        }
        uint64_t v8 = &xmmword_18C465410;
      }

      uint64_t result = (void *)(*v8)(v7);
    }

uint64_t sub_1813366C0(int a1)
{
  if (a1 < 11) {
    return 0LL;
  }
  unint64_t v2 = (unsigned __int16)a1;
  __int16 v3 = 40;
  if (a1 >= 0x100)
  {
    unint64_t v4 = (unsigned __int16)a1;
    do
    {
      v3 += 40;
      unint64_t v2 = v4 >> 4;
      BOOL v5 = v4 > 0xFFF;
      v4 >>= 4;
    }

    while (v5);
  }

  if (v2 < 0x10)
  {
    LOBYTE(v6) = v2;
  }

  else
  {
    do
    {
      v3 += 10;
      unint64_t v6 = v2 >> 1;
      BOOL v5 = v2 > 0x1F;
      v2 >>= 1;
    }

    while (v5);
  }

  return (__int16)(v3 + word_1813CD842[v6 & 7] - 43);
}

uint64_t sub_18133673C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0x40) != 0) {
    return 0LL;
  }
  uint64_t v8 = **(void **)a3;
  while (*(_BYTE *)a4 == 44)
  {
    uint64_t result = sub_18133673C(a1, a2, a3, *(void *)(a4 + 16));
    if (!(_DWORD)result) {
      return result;
    }
    a4 = *(void *)(a4 + 24);
  }

  if ((*(_BYTE *)(*(void *)v8 + 50LL) & 0x80) != 0) {
    uint64_t v8 = 0LL;
  }
  if (*(int *)(a3 + 20) >= 1)
  {
    int v10 = 0;
    uint64_t v11 = *(_WORD **)(a3 + 32);
    do
    {
      uint64_t v12 = *(void *)v11;
      if ((*(_BYTE *)(*(void *)v11 + 4LL) & 1) != 0)
      {
        if (*(_DWORD *)(v12 + 56) != (_DWORD)a1) {
          goto LABEL_11;
        }
      }

      else if ((a2 & 0x20) != 0)
      {
        goto LABEL_11;
      }

uint64_t sub_181336840(uint64_t result, uint64_t a2, int a3)
{
  int v5 = *(_DWORD *)(result + 28);
  if (v5 < 1)
  {
    unsigned int v7 = 0;
  }

  else
  {
    uint64_t v6 = result;
    unsigned int v7 = 0;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = ~(v8 | *(void *)a2);
    uint64_t v10 = *(void *)(result + 32);
    do
    {
      uint64_t v12 = *(void *)(v10 + 48);
      BOOL v13 = (v12 & v9) != 0 || (v8 & v12) == 0;
      if (!v13 && (*(_WORD *)(v10 + 18) & 2) == 0)
      {
        if (*(_WORD *)(a2 + 52))
        {
          unsigned int v14 = *(unsigned __int16 *)(a2 + 52) - 1;
          while (1)
          {
            uint64_t v16 = *(void *)(*(void *)(a2 + 64) + 8LL * v14);
            if (v16)
            {
              if (v16 == v10) {
                break;
              }
              unsigned int v17 = *(_DWORD *)(v16 + 24);
              if ((v17 & 0x80000000) == 0 && *(void *)(v6 + 32) + 56LL * v17 == v10) {
                break;
              }
            }
          }
        }

        else
        {
LABEL_18:
          int v18 = **(_DWORD ***)v6;
          uint64_t v19 = *(void *)v18;
          if (*(_DWORD *)(*(void *)v18 + 424LL))
          {
            ++v18[12];
            v18[6] = 9;
          }

          uint64_t v20 = *(uint64_t (**)(void))(v19 + 544);
          if (v20)
          {
            unsigned int v21 = v18[36] + 1;
            v18[36] = v21;
            if (v21 >= *(_DWORD *)(v19 + 560))
            {
              uint64_t result = v20(*(void *)(v19 + 552));
              if ((_DWORD)result)
              {
                ++v18[12];
                v18[6] = 9;
              }

              v18[36] = 0;
              uint64_t v8 = *(void *)(a2 + 8);
              uint64_t v12 = *(void *)(v10 + 48);
            }
          }

          if (v8 == v12
            && ((*(_WORD *)(v10 + 20) & 0x3F) != 0
             || (*(_BYTE *)(*(void *)(*(void *)v6 + 8LL) + 104LL * *(unsigned __int8 *)(a2 + 16) + 68) & 0x48) == 0))
          {
            *(_DWORD *)(a2 + 48) |= 0x800000u;
          }

          int v22 = *(__int16 *)(v10 + 16);
          __int16 v23 = *(_WORD *)(a2 + 22);
          if (v22 <= 0)
          {
            *(_WORD *)(a2 + 22) = v23 + v22;
          }

          else
          {
            *(_WORD *)(a2 + 22) = v23 - 1;
            if ((*(_WORD *)(v10 + 20) & 0x82) != 0)
            {
              uint64_t v24 = *(void *)(*(void *)v10 + 24LL);
              int v28 = 0;
              uint64_t result = sub_181323268(v24, &v28);
              BOOL v25 = v28 >= 2 || v28 <= -2;
              BOOL v26 = v25 || (_DWORD)result == 0;
              unsigned int v27 = v26 ? 20 : 10;
              if (v27 > v7)
              {
                *(_WORD *)(v10 + 18) |= 0x2000u;
                unsigned int v7 = v27;
              }
            }
          }
        }
      }

      v10 += 56LL;
      BOOL v11 = __OFSUB__(v5--, 1);
    }

    while (!((v5 < 0) ^ v11 | (v5 == 0)));
  }

  return result;
}

uint64_t sub_181336A80(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4 = *(void **)(a1 + 32);
  if (!v4) {
    return 0LL;
  }
  if ((*(_WORD *)(a2 + 99) & 0x800) == 0)
  {
    uint64_t v5 = *(unsigned __int16 *)(a2 + 96);
    if (*(_WORD *)(a2 + 96))
    {
      uint64_t v6 = *(__int16 **)(a2 + 8);
      while (1)
      {
        int v7 = *v6++;
        if (v7 >= 63) {
          break;
        }
        if (!--v5) {
          return 0LL;
        }
      }

      goto LABEL_8;
    }

    return 0LL;
  }

uint64_t sub_181336B2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = **(unsigned int ***)a1;
  if (v4[12]) {
    return v4[6];
  }
  uint64_t v7 = a2;
  uint64_t v127 = *(void *)v4;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  int v137 = *(_DWORD *)(v10 + 48);
  if ((v137 & 0x20) != 0) {
    int v11 = 24;
  }
  else {
    int v11 = 447;
  }
  if ((*(_WORD *)(a3 + 99) & 4) != 0) {
    v11 &= 0x183u;
  }
  uint64_t v12 = *(unsigned __int16 *)(v10 + 24);
  __int16 v135 = *(_WORD *)(v10 + 26);
  __int16 v136 = *(_WORD *)(v10 + 28);
  int v128 = *(unsigned __int16 *)(v10 + 54);
  unsigned int v138 = *(unsigned __int16 *)(v10 + 52);
  uint64_t v134 = *(void *)v10;
  __int16 v133 = *(_WORD *)(v10 + 22);
  int v13 = *(_DWORD *)(a2 + 64);
  v139[0] = *(void *)(a1 + 8);
  v139[1] = v9;
  char v144 = 0;
  uint64_t v140 = 0LL;
  uint64_t v141 = 0LL;
  int v142 = 0;
  int v143 = v11;
  int v146 = v13;
  __int16 v145 = 257;
  int v14 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 2 * v12);
  uint64_t v15 = *(void *)(a3 + 24);
  if (v14 == *(unsigned __int16 *)(v15 + 52))
  {
    __int16 v16 = -1;
  }

  else
  {
    __int16 v16 = *(_WORD *)(*(void *)(a3 + 8) + 2 * v12);
    if ((__int16)v14 < 0)
    {
      if ((__int16)v14 == -2)
      {
        uint64_t v17 = *(void *)(*(void *)(a3 + 80) + 24LL * v12 + 8);
        uint64_t v140 = *(void *)(*(void *)(a3 + 64) + 8 * v12);
        uint64_t v141 = v17;
        __int16 v147 = -2;
        int v18 = sub_181333C68((uint64_t)v139);
        goto LABEL_15;
      }
    }

    else
    {
      char v144 = *(_BYTE *)(*(void *)(v15 + 8) + 16LL * (__int16)v14 + 9);
      uint64_t v140 = *(void *)(*(void *)(a3 + 64) + 8 * v12);
    }
  }

  __int16 v147 = v16;
  int v18 = sub_181333910(v139);
LABEL_15:
  uint64_t v19 = v18;
  unsigned __int16 v20 = 0;
  *(_WORD *)(v10 + 18) = 0;
  unint64_t v21 = **(unsigned __int16 **)(a3 + 16);
  if (**(__int16 **)(a3 + 16) >= 11)
  {
    __int16 v22 = 40;
    if (v21 < 0x100)
    {
      unint64_t v24 = **(unsigned __int16 **)(a3 + 16);
      if (v21 < 0x10)
      {
LABEL_24:
        LOBYTE(v25) = v24;
LABEL_25:
        unsigned __int16 v20 = v22 + word_1813CD842[v25 & 7] - 43;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v23 = **(unsigned __int16 **)(a3 + 16);
      do
      {
        v22 += 40;
        unint64_t v24 = v23 >> 4;
        BOOL v78 = v23 > 0xFFF;
        v23 >>= 4;
      }

      while (v78);
      if (v24 < 0x10) {
        goto LABEL_24;
      }
    }

    do
    {
      v22 += 10;
      unint64_t v25 = v24 >> 1;
      BOOL v78 = v24 > 0x1F;
      v24 >>= 1;
    }

    while (v78);
    goto LABEL_25;
  }

LABEL_178:
      unint64_t v86 = *v84;
      for (uint64_t i = *(unsigned __int8 **)(*(void *)(a3 + 64) + 8 * v114); ; ++i)
      {
        uint64_t v88 = *v86;
        uint64_t v89 = *i;
        if ((_DWORD)v88 == (_DWORD)v89) {
          break;
        }
        if (byte_1813C6343[v88] != byte_1813C6343[v89]) {
          goto LABEL_186;
        }
LABEL_180:
        ++v86;
      }

      if (*v86) {
        goto LABEL_180;
      }
      uint64_t v65 = v115 + 1;
      __int16 v90 = v112;
      int v64 = v111;
    }

    while (v115 + 1 != v112);
LABEL_187:
    int v91 = *(_DWORD *)(v10 + 48);
    if ((v27 & 0x24) == 0)
    {
      int v40 = v91 | 0x12;
      *(_DWORD *)(v10 + 48) = v91 | 0x12;
      *(_WORD *)(v10 + 28) = v90;
      if ((v91 & 0x20) == 0)
      {
        LOWORD(v43) = 0;
        BOOL v26 = 0LL;
        __int16 v44 = *(_WORD *)(v10 + 22);
        LOWORD(v45) = v44;
        if (!v19) {
          goto LABEL_121;
        }
        goto LABEL_118;
      }

      LOWORD(v43) = 0;
      BOOL v26 = *(unsigned __int16 **)(*(void *)(v10 + 64) + 8LL * *(unsigned __int16 *)(v10 + 52) - 16);
      v129 = v19;
      if ((v40 & 2) == 0) {
        goto LABEL_203;
      }
LABEL_69:
      __int16 v44 = *(_WORD *)(v10 + 22);
      if (v26)
      {
        int v45 = (__int16)v26[8];
        if (v45 <= 0)
        {
          LOWORD(v45) = v45 + v44;
        }

        else if ((v26[9] & 0x80) != 0)
        {
          LOWORD(v45) = *(_WORD *)(v10 + 22);
        }

        else
        {
          LOWORD(v45) = v44 - 20;
        }

        uint64_t v19 = v129;
        if (!v129) {
          goto LABEL_121;
        }
      }

      else
      {
        uint64_t v19 = v129;
        LOWORD(v45) = *(_WORD *)(v10 + 22);
        if (!v129) {
          goto LABEL_121;
        }
      }

              unint64_t v86 = strlen(v49);
              BOOL v87 = v86 + 1;
              uint64_t v88 = 8 * (v86 + 1);
              if (sqlite3_initialize() || (uint64_t v92 = (const char **)sub_18126F0AC(v88)) == 0LL)
              {
                if (v88 > 0)
                {
                  uint64_t v15 = 7LL;
                  goto LABEL_299;
                }

                uint64_t v93 = 0LL;
              }

              else
              {
                uint64_t v93 = v92;
                bzero(v92, v88);
              }

              if (sqlite3_initialize() || (v204 = (void *)sub_18126F0AC(2 * v87)) == 0LL)
              {
                v204 = 0LL;
                if (v86 >= 0x7FFFFFFFFFFFFFFFLL) {
                  uint64_t v15 = 0LL;
                }
                else {
                  uint64_t v15 = 7LL;
                }
              }

              else
              {
                bzero(v204, 2 * v87);
                if (!v93)
                {
                  uint64_t v15 = 0LL;
                  goto LABEL_211;
                }

                if (*v205)
                {
                  *v208 = sqlite3_mprintf("multiple tokenize=... directives");
                  uint64_t v15 = 1LL;
                  goto LABEL_204;
                }

                v203 = 0LL;
                int v96 = *v49;
                __int16 v97 = (unsigned __int8 *)v204;
                if (v96 == 32)
                {
                  do
                  {
                    int v98 = *++v49;
                    int v96 = v98;
                  }

                  while (v98 == 32);
                  goto LABEL_229;
                }

                while (v96)
                {
LABEL_229:
                  if (v96 == 39)
                  {
                    __int16 v99 = sub_181388F7C((unsigned __int8 *)v49);
                    if (!v99) {
                      goto LABEL_256;
                    }
                  }

                  else
                  {
                    int v100 = 0LL;
                    while ((v96 & 0x80) != 0 || byte_1813CB4F3[v96])
                      int v96 = v49[++v100];
                    if (!v100)
                    {
LABEL_256:
                      *v208 = sqlite3_mprintf("parse error in tokenize directive");
                      uint64_t v15 = 1LL;
                      goto LABEL_203;
                    }

                    __int16 v99 = &v49[v100];
                  }

                  __int16 v101 = v99 - v49;
                  memcpy(v97, v49, v99 - v49);
                  v93[v203] = (const char *)v97;
                  unsigned int v102 = *v97;
                  if ((v102 - 34) <= 0x3E
                    && ((1LL << (v102 - 34)) & 0x4200000000000021LL) != 0)
                  {
                    if (v102 == 91) {
                      unsigned int v102 = 93;
                    }
                    unsigned __int16 v104 = v97[1];
                    if (v97[1])
                    {
                      unsigned int v105 = 0LL;
                      int v106 = 1;
                      while (1)
                      {
                        uint64_t v107 = v106 + 1LL;
                        if (v104 == v102)
                        {
                          if (v97[v107] != v102)
                          {
LABEL_250:
                            uint64_t v108 = v105;
                            goto LABEL_252;
                          }

                          LODWORD(v107) = v106 + 2;
                          LOBYTE(v104) = v102;
                        }

                        v97[v105++] = v104;
                        unsigned __int16 v104 = v97[(int)v107];
                        int v106 = v107;
                      }
                    }

                    uint64_t v108 = 0LL;
LABEL_252:
                    v97[v108] = 0;
                  }

                  int v49 = v99 - 1;
                  do
                  {
                    uint64_t v109 = *++v49;
                    int v96 = v109;
                  }

                  while (v109 == 32);
                  v97 += v101 + 1;
                  ++v203;
                }

                if ((_DWORD)v203)
                {
                  int v110 = *v93;
                  if (*v93)
                  {
                    for (m = *(unsigned __int8 **)(a3 + 56); m; m = (unsigned __int8 *)*((void *)m + 6))
                    {
                      uint64_t v112 = *(unsigned __int8 **)m;
                      if (*(void *)m)
                      {
                        for (n = *v93; ; ++n)
                        {
                          uint64_t v114 = *(unsigned __int8 *)n;
                          uint64_t v115 = *v112;
                          if ((_DWORD)v114 == (_DWORD)v115)
                          {
                            if (!*n) {
                              goto LABEL_270;
                            }
                          }

                          else if (byte_1813C6343[v114] != byte_1813C6343[v115])
                          {
                            break;
                          }

                          ++v112;
                        }
                      }
                    }

                    goto LABEL_278;
                  }
                }

                m = *(unsigned __int8 **)(a3 + 64);
LABEL_270:
                if (!m)
                {
                  int v110 = *v93;
LABEL_278:
                  int v121 = sqlite3_mprintf("no such tokenizer: %s", v110);
                  uint64_t v15 = 1LL;
                  goto LABEL_279;
                }

                int v118 = (unsigned __int8 *)*((void *)m + 2);
                uint64_t v117 = (uint64_t (**)(uint64_t, uint64_t, int, void *))(m + 16);
                v116 = v118;
                if ((_DWORD)v203) {
                  __int16 v119 = (v203 - 1);
                }
                else {
                  __int16 v119 = 0LL;
                }
                int v120 = ((uint64_t (*)(void, const char **, uint64_t, void *))v116)( *(v117 - 1),  v93 + 1,  v119,  v205);
                *(void *)(v19 + 112) = v117;
                if ((_DWORD)v120)
                {
                  uint64_t v15 = v120;
                  if (!v208)
                  {
LABEL_280:
                    *v205 = 0LL;
                    *(void *)(v19 + 112) = 0LL;
                    goto LABEL_203;
                  }

                  int v121 = sqlite3_mprintf("error in tokenizer constructor");
LABEL_279:
                  *v208 = v121;
                  goto LABEL_280;
                }

                if (*v117 == sub_181389144)
                {
                  if (*(_DWORD *)*v205) {
                    __int16 v135 = 65;
                  }
                  else {
                    __int16 v135 = 66;
                  }
                }

                else
                {
                  __int16 v135 = 0;
                }

                uint64_t v15 = 0LL;
                *(_DWORD *)(v19 + 124) = v135;
              }

LABEL_254:
      uint64_t v5 = 0LL;
      break;
    }

    LOWORD(v43) = 0;
    v129 = 0LL;
    BOOL v26 = v19;
    if ((v40 & 2) != 0) {
      goto LABEL_69;
    }
LABEL_203:
    unsigned __int16 v95 = *(_WORD *)(v10 + 24) + 1;
    *(_WORD *)(v10 + 24) = v95;
    int v96 = (__int16)v19[8];
    if (v96 > 0 || *(__int16 *)(*(void *)(a3 + 8) + 2 * v12) < 0)
    {
      uint64_t v58 = *(void *)(a3 + 16) + 2LL * v95;
      LOWORD(v58) = *(_WORD *)v58 - *(_WORD *)(v58 - 2) + *(_WORD *)(v10 + 22);
      *(_WORD *)(v10 + 22) = v58;
      if ((v27 & 0x100) != 0)
      {
        LOWORD(v58) = v58 + 10;
        goto LABEL_208;
      }
    }

    else
    {
      LOWORD(v58) = v96 - v43 + *(_WORD *)(v10 + 22);
LABEL_208:
      uint64_t v19 = v129;
LABEL_209:
      *(_WORD *)(v10 + 22) = v58;
      v129 = v19;
    }

    __int16 v97 = v58;
    else {
      LOWORD(v58) = v58 + 16;
    }
    int v98 = (__int16)v58;
    if ((__int16)v58 <= v126)
    {
      LOWORD(v58) = v126;
      if (v98 >= v124)
      {
        LOWORD(v58) = v119;
        if (v98 >= v120) {
          LOWORD(v58) = v126 + byte_1813CA370[v117 - v98];
        }
      }
    }

    else if (v123 >= (__int16)v58)
    {
      else {
        LOWORD(v58) = v58 + 1;
      }
    }

    if ((v40 & 0x4000140) == 0)
    {
      int v106 = (__int16)(v97 + 16);
      if ((__int16)v58 >= v106)
      {
        if (v106 + 49 >= (__int16)v58)
        {
          else {
            LOWORD(v58) = v58 + 1;
          }
        }
      }

      else if ((__int16)v58 + 49 >= v106)
      {
        else {
          LOWORD(v58) = v97 + 17;
        }
      }

      else
      {
        LOWORD(v58) = v97 + 16;
      }
    }

    __int16 v99 = v43 + a4;
    *(_WORD *)(v10 + 20) = v58 + v43 + a4;
    *(_WORD *)(v10 + 22) = v97 + v43 + a4;
    sub_181336840(*(void *)(a1 + 8), v10, v125);
    uint64_t v5 = sub_181335FD4(a1, v10);
    int v100 = *(_DWORD *)(v10 + 48);
    if ((v100 & 2) != 0) {
      __int16 v101 = v133;
    }
    else {
      __int16 v101 = v97;
    }
    *(_WORD *)(v10 + 22) = v101;
    if ((v100 & 0x10) == 0)
    {
      unsigned int v102 = *(unsigned __int16 *)(v10 + 24);
      if (v102 < *(unsigned __int16 *)(a3 + 96)
        && (v102 < *(unsigned __int16 *)(a3 + 94) || (*(_WORD *)(a3 + 99) & 3) != 2))
      {
        if (v102 >= 4)
        {
          uint64_t v103 = *(void *)v4;
          if (*(_DWORD *)(*(void *)v4 + 424LL))
          {
            ++v4[12];
            v4[6] = 9;
          }

          unsigned __int16 v104 = *(unsigned int (**)(void))(v103 + 544);
          if (v104)
          {
            unsigned int v105 = v4[36] + 1;
            v4[36] = v105;
            if (v105 >= *(_DWORD *)(v103 + 560))
            {
              if (v104(*(void *)(v103 + 552)))
              {
                ++v4[12];
                v4[6] = 9;
              }

              v4[36] = 0;
            }
          }
        }

        sub_181336B2C(a1, v132, a3, v99);
      }
    }

    *(_WORD *)(v10 + 22) = v133;
    uint64_t v7 = v132;
LABEL_113:
    __int128 v56 = sub_181333910(v139);
    if ((_DWORD)v5) {
      break;
    }
    uint64_t v19 = v56;
  }

  while (v56);
  *(void *)uint64_t v10 = v134;
  *(_WORD *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 26) = v135;
  *(_WORD *)(v10 + 28) = v136;
  *(_WORD *)(v10 + 54) = v128;
  *(_DWORD *)(v10 + 48) = v137;
  *(_WORD *)(v10 + 22) = v133;
  *(_WORD *)(v10 + 52) = v138;
  if ((_DWORD)v12 == v128)
  {
    uint64_t v107 = v12 + 1;
    if ((int)v12 + 1 < *(unsigned __int16 *)(a3 + 94)
      && (_DWORD)v12 == v138
      && (*(_WORD *)(a3 + 99) & 0xC0) == 0x80
      && (*(_BYTE *)(v127 + 97) & 0x40) == 0
      && *(__int16 *)(*(void *)(a3 + 16) + 2 * v107) >= 42)
    {
      uint64_t v5 = sub_1813355D4((void *)v127, v10, v138 + 1);
      if (!(_DWORD)v5)
      {
        ++*(_WORD *)(v10 + 24);
        ++*(_WORD *)(v10 + 54);
        uint64_t v108 = *(void *)(v10 + 64);
        uint64_t v109 = *(unsigned __int16 *)(v10 + 52);
        *(_WORD *)(v10 + 52) = v109 + 1;
        *(void *)(v108 + 8 * v109) = 0LL;
        *(_DWORD *)(v10 + 48) |= 0x8000u;
        LOWORD(v108) = *(_WORD *)(*(void *)(a3 + 16) + 2 * v12) - *(_WORD *)(*(void *)(a3 + 16) + 2 * v107);
        *(_WORD *)(v10 + 22) -= v108;
        sub_181336B2C(a1, v7, a3, (__int16)(a4 + v108 + 5));
        *(_WORD *)(v10 + 22) = v133;
        *(_WORD *)(v10 + 24) = v12;
        *(_WORD *)(v10 + 54) = v12;
        *(_DWORD *)(v10 + 48) = v137;
      }
    }
  }

  return v5;
}

uint64_t sub_1813379F4(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  int v5 = *a2;
  if (v5 == 169 || v5 == 167)
  {
    if (*((_DWORD *)a2 + 11) == *((_DWORD *)v3 + 2))
    {
      uint64_t v6 = *(unsigned __int16 *)(v4 + 96);
      if (!*(_WORD *)(v4 + 96))
      {
LABEL_8:
        *((_BYTE *)v3 + 13) = 1;
        return 2LL;
      }

      uint64_t v7 = *(__int16 **)(v4 + 8);
      while (1)
      {
        int v8 = *v7++;
        if (*((_DWORD *)a2 + 12) == v8) {
          break;
        }
        if (!--v6) {
          goto LABEL_8;
        }
      }
    }

    return 0LL;
  }

  if ((*(_WORD *)(v4 + 99) & 0x800) == 0) {
    return 0LL;
  }
  unsigned int v10 = *(unsigned __int16 *)(v4 + 96);
  if (!*(_WORD *)(v4 + 96)) {
    return 0LL;
  }
  unint64_t v11 = 0LL;
  uint64_t v12 = *((unsigned int *)v3 + 2);
  uint64_t v13 = 8LL;
  while (*(__int16 *)(*(void *)(v4 + 8) + 2 * v11) != -2)
  {
LABEL_12:
    ++v11;
    v13 += 24LL;
    if (v11 >= v10) {
      return 0LL;
    }
  }

  if (sub_18131BA10(0LL, a2, *(unsigned __int8 **)(*(void *)(v4 + 80) + v13), v12))
  {
    unsigned int v10 = *(unsigned __int16 *)(v4 + 96);
    goto LABEL_12;
  }

  uint64_t result = 1LL;
  *((_BYTE *)v3 + 12) = 1;
  return result;
}

uint64_t sub_181337AF4(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 != 167) {
    return 0LL;
  }
  unint64_t v2 = *(_DWORD **)(a1 + 40);
  if (*((_DWORD *)a2 + 11) != v2[2]) {
    return 0LL;
  }
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v2 + 96LL);
  if (v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)(v3 + 8);
    while (*(unsigned __int16 *)(v6 + 2 * v5) != *((unsigned __int16 *)a2 + 24))
    {
      if (v4 == ++v5) {
        goto LABEL_10;
      }
    }

    if ((v5 & 0x8000) == 0) {
      return 0LL;
    }
  }

uint64_t sub_181337B64( uint64_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  __int16 v8 = a4;
  uint64_t v9 = a2;
  if ((_DWORD)a5 && (*(_BYTE *)(*(void *)*a1 + 96LL) & 0x40) != 0) {
    goto LABEL_4;
  }
  uint64_t v10 = (unsigned __int16)*a2;
  if ((a4 & 0x803) != 0) {
    int v12 = 387;
  }
  else {
    int v12 = 386;
  }
  int v122 = v12;
  if (!*a2) {
    return (char)v10;
  }
  unint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v126 = 0LL;
  unint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  unint64_t v121 = ~(-1LL << v10);
  uint64_t v118 = (uint64_t)(a1 + 13);
  int v120 = a4 & 0xC0;
  __int16 v119 = a1 + 74;
  unint64_t v17 = a5;
  uint64_t v132 = (char *)a1 + 604;
  __int16 v117 = a4;
  unint64_t v112 = a5;
  while (1)
  {
    if (v13) {
      v14 |= *(void *)(v16 + 8);
    }
    uint64_t v16 = a6;
    if (v13 >= v17) {
      break;
    }
    uint64_t v16 = *(void *)(*(void *)(a3 + 24) + 8 * v13);
    if ((v8 & 0x800) == 0) {
      break;
    }
LABEL_201:
    int v102 = 0;
    if (v15 < v121 && v13++ < v17) {
      continue;
    }
    goto LABEL_213;
  }

  if ((*(_BYTE *)(v16 + 49) & 4) != 0)
  {
    int v102 = 0;
    if (*(_BYTE *)(v16 + 29)) {
      BOOL v104 = (v8 & 0x280) == 128;
    }
    else {
      BOOL v104 = 1;
    }
    if (!v104) {
      unint64_t v15 = ~(-1LL << v10);
    }
    goto LABEL_213;
  }

  unint64_t v127 = v13;
  if ((v8 & 0x80) != 0) {
    *(_WORD *)(v16 + 30) = 0;
  }
  uint64_t v18 = 0LL;
  uint64_t v128 = v16;
  int v19 = *(_DWORD *)(a1[1] + 104LL * *(unsigned __int8 *)(v16 + 16) + 72);
  uint64_t v125 = v14;
  uint64_t v20 = ~v14;
  unsigned int v130 = v19;
  do
  {
    if (((1LL << v18) & v15) == 0)
    {
      unint64_t v21 = &v9[12 * v18];
      unint64_t v24 = (unsigned __int8 *)*((void *)v21 + 1);
      unint64_t v23 = (unsigned __int8 **)(v21 + 4);
      __int16 v22 = v24;
      if (v24)
      {
        while (1)
        {
          int v25 = *((_DWORD *)v22 + 1);
          if ((v25 & 0x82000) == 0) {
            break;
          }
          if ((v25 & 0x80000) != 0)
          {
            __int16 v22 = *(unsigned __int8 **)(*((void *)v22 + 4) + 8LL);
            if (!v22) {
              goto LABEL_20;
            }
          }

          else
          {
            __int16 v22 = (unsigned __int8 *)*((void *)v22 + 2);
            if (!v22) {
              goto LABEL_20;
            }
          }
        }

        int v26 = *v22;
        if ((v26 == 169 || v26 == 167) && *((_DWORD *)v22 + 11) == v19)
        {
          int v27 = *((_DWORD *)v22 + 12);
          uint64_t v133 = v118;
          uint64_t v134 = (uint64_t (*)(uint64_t, uint64_t))v118;
          LOBYTE(v139) = 0;
          __int16 v135 = 0LL;
          uint64_t v136 = 0LL;
          int v137 = 0;
          int v138 = v122;
          int v140 = v19;
          *(_WORD *)((char *)&v139 + 1) = 257;
          if (v27 != -2)
          {
            __int16 v141 = v27;
            uint64_t v28 = sub_181333910(&v133);
            if (v28)
            {
              uint64_t v29 = v28;
              int v30 = 0LL;
              do
              {
                uint64_t v31 = *((void *)v29 + 5);
                if ((v31 & v20) == 0)
                {
                  if (!v31)
                  {
                    uint64_t v32 = v29[10];
                    if ((v32 & 0x82) != 0) {
                      goto LABEL_50;
                    }
                  }

                  if (!v30) {
                    int v30 = v29;
                  }
                }

                uint64_t v29 = sub_181333910(&v133);
              }

              while (v29);
              uint64_t v9 = a2;
              int v19 = v130;
              if (!v30)
              {
                __int16 v8 = v117;
                goto LABEL_20;
              }

              LODWORD(v32) = v30[10];
              if ((_DWORD)v32 == 1)
              {
                uint64_t v33 = *(unsigned __int16 *)(v128 + 52);
                if (!*(_WORD *)(v128 + 52))
                {
LABEL_48:
                  __int16 v8 = v117;
                  goto LABEL_62;
                }

                unsigned int v34 = *(unsigned __int16 ***)(v128 + 64);
                while (v30 != *v34)
                {
                  ++v34;
                  if (!--v33) {
                    goto LABEL_48;
                  }
                }
              }

              uint64_t v29 = v30;
LABEL_50:
              __int16 v8 = v117;
              if ((v32 & 0x82) == 0 || (*((_DWORD *)v22 + 12) & 0x80000000) != 0)
              {
LABEL_60:
                v15 |= 1LL << v18;
              }

              else
              {
                uint64_t v35 = *a1;
                int v42 = (_BYTE **)sub_181289D04(*a1, *v23, a3, a4, a5, a6, (uint64_t)a7, a8);
                if (!v42) {
                  int v42 = *(_BYTE ***)(*(void *)v35 + 16LL);
                }
                unint64_t v43 = (unsigned __int8 **)sub_1812DDD08(v35, *(void *)v29, v36, v37, v38, v39, v40, v41);
                if (v43)
                {
                  __int16 v44 = *v42;
                  for (uint64_t i = *v43; ; ++i)
                  {
                    uint64_t v46 = *v44;
                    uint64_t v47 = *i;
                    if ((_DWORD)v46 == (_DWORD)v47)
                    {
                      if (!*v44) {
                        goto LABEL_60;
                      }
                    }

                    else if (byte_1813C6343[v46] != byte_1813C6343[v47])
                    {
                      break;
                    }

                    ++v44;
                  }
                }
              }
            }
          }

          uint64_t v9 = a2;
LABEL_62:
          int v19 = v130;
        }
      }
    }

void *sub_181338514(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(a2 + 96) = *(void *)(v2 + 24);
      if (*(void *)v2) {
        sub_181309110(v4, *(unsigned __int8 **)v2);
      }
      uint64_t result = sub_1812F20DC(v4, (void *)v2);
      uint64_t v2 = *(void *)(a2 + 96);
    }

    while (v2);
  }

  return result;
}

uint64_t sub_181338578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = sub_18126F0AC(*(unsigned __int16 *)(a2 + 96) + 1LL);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    if (*(_WORD *)(a2 + 96))
    {
      unint64_t v12 = 0LL;
      uint64_t v13 = 8LL;
      do
      {
        uint64_t v16 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 2 * v12);
        if (*(__int16 *)(*(void *)(a2 + 8) + 2 * v12) < 0)
        {
          if ((_DWORD)v16 == 0xFFFF) {
            char v14 = 68;
          }
          else {
            char v14 = sub_1812A3C7C(*(unsigned __int8 **)(*(void *)(a2 + 80) + v13));
          }
        }

        else
        {
          char v14 = *(_BYTE *)(*(void *)(v4 + 8) + 16 * v16 + 9);
        }

        unsigned int v15 = v14;
        if (v14 <= 65) {
          unsigned int v15 = 65;
        }
        if (v15 >= 0x43) {
          LOBYTE(v15) = 67;
        }
        *(_BYTE *)(*(void *)(a2 + 32) + v12++) = v15;
        v13 += 24LL;
      }

      while (v12 < *(unsigned __int16 *)(a2 + 96));
      uint64_t v5 = *(void *)(a2 + 32);
    }

    else
    {
      unint64_t v12 = 0LL;
    }

    *(_BYTE *)(v5 + v12) = 0;
    return *(void *)(a2 + 32);
  }

  if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 103) = 1;
  ++*(_DWORD *)(a1 + 432);
  *(_WORD *)(a1 + 436) = 0;
  uint64_t result = *(void *)(a1 + 344);
  if (result)
  {
    sub_1812DC47C(result, "out of memory", v6, v7, v8, v9, v10, v11, v20);
    uint64_t v18 = *(void *)(a1 + 344);
    *(_DWORD *)(v18 + 24) = 7;
    uint64_t v19 = *(void *)(v18 + 256);
    if (v19)
    {
      uint64_t result = 0LL;
      do
      {
        ++*(_DWORD *)(v19 + 48);
        *(_DWORD *)(v19 + 24) = 7;
        uint64_t v19 = *(void *)(v19 + 256);
      }

      while (v19);
      return result;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1813386F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned int v6 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v7 = (const void *)(v5 + 104LL * *(unsigned __int8 *)(a3 + 64) + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)a1;
  __int16 v22 = &v26;
  uint64_t v23 = 0x7FFFFFFD00000064LL;
  unsigned int v24 = 0;
  __int16 v25 = 256;
  sqlite3_str_appendf((sqlite3_str *)&v21, "BLOOM FILTER ON %S (", v7);
  uint64_t v10 = *(void *)(a3 + 96);
  if ((*(_BYTE *)(v10 + 49) & 1) != 0)
  {
    else {
      sqlite3_str_appendf((sqlite3_str *)&v21, "%s=?");
    }
  }

  else
  {
    unint64_t v11 = *(unsigned __int16 *)(v10 + 54);
    if (v11 < *(unsigned __int16 *)(v10 + 24))
    {
      do
      {
        uint64_t v13 = *(void *)(v10 + 32);
        int v14 = *(unsigned __int16 *)(*(void *)(v13 + 8) + 2 * v11);
        if (v14 == 65534)
        {
          unsigned int v15 = "<expr>";
        }

        else if (v14 == 0xFFFF)
        {
          unsigned int v15 = "rowid";
        }

        else
        {
          unsigned int v15 = *(const char **)(*(void *)(*(void *)(v13 + 24) + 8LL) + 16LL * (__int16)v14);
        }

        if (v11 > *(unsigned __int16 *)(v10 + 54))
        {
          uint64_t v16 = v24;
          if (v24 + 5 < v23)
          {
            v24 += 5;
            unint64_t v12 = &v22[v16];
            v12[4] = 32;
            *(_DWORD *)unint64_t v12 = 1145979168;
          }

          else
          {
            sub_1812D3A10((uint64_t)&v21, " AND ", 5u);
          }
        }

        sqlite3_str_appendf((sqlite3_str *)&v21, "%s=?", v15);
        ++v11;
      }

      while (v11 < *(unsigned __int16 *)(v10 + 24));
    }
  }

  uint64_t v17 = v24;
  if (v24 + 1 >= v23)
  {
    sub_1812D3A10((uint64_t)&v21, ")", 1u);
    uint64_t v18 = v22;
    if (!v22)
    {
LABEL_24:
      uint64_t v19 = v22;
      goto LABEL_25;
    }
  }

  else
  {
    ++v24;
    v22[v17] = 41;
    uint64_t v18 = v22;
    if (!v22) {
      goto LABEL_24;
    }
  }

  v18[v24] = 0;
  if (!HIDWORD(v23) || (v25 & 0x400) != 0) {
    goto LABEL_24;
  }
  uint64_t v19 = sub_1812F24E0(&v21);
LABEL_25:
  sub_1812B9B68( (uint64_t *)v8,  185LL,  *(unsigned int *)(v8 + 144),  *(unsigned int *)(a1 + 312),  0LL,  (uint64_t)v19,  4294967290LL,  v9);
  return sub_18131CED8(v8, *(_DWORD *)(v8 + 144) - 1, 0, 0, 0, 0LL);
}

void sub_1813389A4(sqlite3_str *a1, uint64_t a2, int a3, int a4, int a5, _BYTE *a6)
{
  if (a5)
  {
    if (!a1)
    {
      sub_1812CF36C(32733);
      if (a3 <= 1) {
        goto LABEL_13;
      }
LABEL_19:
      sub_1812CF36C(32733);
      int v13 = 1;
      goto LABEL_23;
    }

    uint64_t v10 = *((unsigned int *)a1 + 6);
    if ((v10 + 5) >= *((_DWORD *)a1 + 4))
    {
      sub_1812D3A10((uint64_t)a1, " AND ", 5u);
      if (a3 <= 1) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }

    *((_DWORD *)a1 + 6) = v10 + 5;
    uint64_t v11 = *((void *)a1 + 1) + v10;
    *(_BYTE *)(v11 + 4) = 32;
    *(_DWORD *)uint64_t v11 = 1145979168;
  }

  if (a3 > 1)
  {
LABEL_10:
    if (a1)
    {
      uint64_t v12 = *((unsigned int *)a1 + 6);
      if ((v12 + 1) >= *((_DWORD *)a1 + 4))
      {
        int v13 = 1;
        sub_1812D3A10((uint64_t)a1, "(", 1u);
      }

      else
      {
        *((_DWORD *)a1 + 6) = v12 + 1;
        *(_BYTE *)(*((void *)a1 + 1) + v12) = 40;
        int v13 = 1;
      }

uint64_t sub_181338F40( uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = result;
  if (!a2) {
    return sub_181319C00(result, a2, a3);
  }
  int v10 = a4;
  int v11 = *a2;
  if (v11 == 176) {
    int v11 = a2[2];
  }
  if (v11 == 138)
  {
    uint64_t v12 = (int **)(*((void *)a2 + 4) + 32LL);
  }

  else
  {
    if (v11 != 177) {
      return sub_181319C00(result, a2, a3);
    }
    uint64_t v12 = (int **)(a2 + 32);
  }

  if (**v12 < 2) {
    return sub_181319C00(result, a2, a3);
  }
  if ((a2[5] & 0x10) != 0)
  {
    uint64_t v16 = *(void *)(result + 16);
    uint64_t result = sub_1812B3EB0((void **)result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = (v10 - 1);
    int v21 = *(_DWORD *)(v16 + 144);
    if (*(_DWORD *)(v16 + 148) <= v21)
    {
      return sub_18131044C(v16, 80LL, result, v8, v20, v17, v18, v19);
    }

    else
    {
      *(_DWORD *)(v16 + 144) = v21 + 1;
      uint64_t v22 = *(void *)(v16 + 136) + 40LL * v21;
      *(_DWORD *)uint64_t v22 = 80;
      *(_DWORD *)(v22 + 4) = result;
      *(_DWORD *)(v22 + 8) = v8;
      *(_DWORD *)(v22 + 12) = v20;
      *(void *)(v22 + 24) = 0LL;
      *(void *)(v22 + 32) = 0LL;
      *(void *)(v22 + 16) = 0LL;
    }
  }

  else if ((int)a4 >= 1)
  {
    uint64_t v13 = a4;
    char v14 = (unsigned __int8 **)(*((void *)a2 + 4) + 8LL);
    do
    {
      uint64_t v15 = *v14;
      v14 += 3;
      uint64_t result = sub_181319C00(v9, v15, v8);
      uint64_t v8 = (v8 + 1);
      --v13;
    }

    while (v13);
  }

  return result;
}

uint64_t sub_18133906C( uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int16x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(unsigned __int8 *)(a2 + 64);
  if (a3 + 1 < (int)v9)
  {
    uint64_t v11 = a4;
    uint64_t v13 = (void **)result;
    uint64_t v14 = a3 + 1LL;
    unsigned int v45 = a4;
    do
    {
      uint64_t v16 = a2 + 120 * v14;
      if (!*(_DWORD *)(v16 + 908)) {
        goto LABEL_6;
      }
      uint64_t v17 = *(void *)(v16 + 952);
      if (*(_WORD *)(v17 + 54) || (*(void *)v17 & a5) != 0) {
        goto LABEL_6;
      }
      uint64_t v18 = (_DWORD *)(v16 + 908);
      uint64_t v19 = a2 + 120 * v14;
      *(_DWORD *)(v19 + 868) = v11;
      if ((*(_BYTE *)(v17 + 49) & 1) != 0)
      {
        uint64_t v29 = **(unsigned __int8 ****)(v17 + 64);
        if (*((_BYTE *)v13 + 31))
        {
          unsigned __int8 v30 = *((_BYTE *)v13 + 31) - 1;
          *((_BYTE *)v13 + 31) = v30;
          uint64_t v31 = *((unsigned int *)v13 + v30 + 56);
        }

        else
        {
          uint64_t v31 = (*((_DWORD *)v13 + 14) + 1);
          *((_DWORD *)v13 + 14) = v31;
        }

        uint64_t v33 = sub_1812A3E6C((uint64_t *)v13, v29, (int *)(v16 + 856), 0LL, 0LL, v31, a8, a9, a6);
        uint64_t v34 = (uint64_t)v13[2];
        int v35 = *(_DWORD *)(v34 + 144);
        if (*(_DWORD *)(v34 + 148) <= v35)
        {
          sub_18131044C(v34, 13LL, v33, v11, 0LL, v32, a8, a9);
        }

        else
        {
          *(_DWORD *)(v34 + 144) = v35 + 1;
          uint64_t v36 = *(void *)(v34 + 136) + 40LL * v35;
          *(_DWORD *)uint64_t v36 = 13;
          *(_DWORD *)(v36 + 4) = v33;
          *(_DWORD *)(v36 + 8) = v11;
          *(void *)(v36 + 12) = 0LL;
          *(void *)(v36 + 28) = 0LL;
          *(void *)(v36 + 20) = 0LL;
          *(_DWORD *)(v36 + 36) = 0;
        }

        uint64_t result = (uint64_t)v13[2];
        uint64_t v37 = *v18;
        int v38 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v38)
        {
          uint64_t result = sub_181310690(result, 64LL, v37, v11, v33, 1LL, a8, a9);
          goto LABEL_5;
        }

        *(_DWORD *)(result + 144) = v38 + 1;
        uint64_t v15 = *(void *)(result + 136) + 40LL * v38;
        *(_DWORD *)uint64_t v15 = 64832;
        *(_DWORD *)(v15 + 4) = v37;
        *(_DWORD *)(v15 + 8) = v11;
        *(_DWORD *)(v15 + 12) = v33;
        *(_DWORD *)(v15 + 16) = 1;
      }

      else
      {
        uint64_t v20 = *(unsigned __int16 *)(v17 + 24);
        uint64_t v21 = sub_181339364((uint64_t)v13, v16 + 856, 0, 0, &v46);
        uint64_t v22 = v46;
        uint64_t result = (uint64_t)v13[2];
        if (v46)
        {
          if ((_DWORD)v20)
          {
            uint64_t v23 = (v21 + v20);
            uint64_t v24 = v21;
            __int16 v25 = (char *)v46;
            int v26 = v20;
            uint64_t v27 = (uint64_t)v46 + v20;
            while (*v25 <= 65)
            {
              uint64_t v24 = (v24 + 1);
              ++v25;
              BOOL v28 = __OFSUB__(v26--, 1);
              if ((v26 < 0) ^ v28 | (v26 == 0))
              {
                int v26 = 0;
                goto LABEL_29;
              }
            }

            uint64_t v27 = (uint64_t)v25;
            uint64_t v23 = v24;
          }

          else
          {
            int v26 = 0;
            uint64_t v27 = (uint64_t)v46;
            uint64_t v23 = v21;
          }

uint64_t sub_181339364(uint64_t a1, uint64_t a2, unsigned int a3, int a4, void *a5)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a2 + 96);
  uint64_t v9 = *(unsigned __int16 *)(v8 + 54);
  uint64_t v10 = *(void *)(v8 + 32);
  int v11 = *(_DWORD *)(a1 + 56);
  uint64_t v12 = (v11 + 1);
  uint64_t v70 = *(unsigned __int16 *)(v8 + 24);
  int v68 = v70 + a4;
  *(_DWORD *)(a1 + 56) = v11 + v70 + a4;
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(const char **)(v10 + 32);
  if (v14 || (uint64_t v14 = (const char *)sub_181338578(v13, v10)) != 0LL)
  {
    size_t v19 = strlen(v14);
    unint64_t v20 = v19 + 1;
    if (v13)
    {
      uint64_t v21 = (char *)sub_1812F2264(v13, v20);
      if (v21) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v21 = (char *)sub_18126F0AC(v19 + 1);
      if (v21)
      {
LABEL_5:
        int v69 = v21;
        memcpy(v21, v14, v20);
        if (!(_DWORD)v9) {
          goto LABEL_35;
        }
        goto LABEL_9;
      }
    }
  }

  int v69 = 0LL;
  if (!(_DWORD)v9) {
    goto LABEL_35;
  }
LABEL_9:
  uint64_t v22 = *(unsigned int *)(a2 + 8);
  uint64_t v23 = (v11 + v9);
  int v24 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v24)
  {
    sub_18131044C(v7, 75LL, 0LL, (v11 + 1), v23, v15, v16, v17);
  }

  else
  {
    *(_DWORD *)(v7 + 144) = v24 + 1;
    uint64_t v25 = *(void *)(v7 + 136) + 40LL * v24;
    *(void *)uint64_t v25 = 75LL;
    *(_DWORD *)(v25 + 8) = v12;
    *(_DWORD *)(v25 + 12) = v23;
    *(void *)(v25 + 24) = 0LL;
    *(void *)(v25 + 32) = 0LL;
    *(void *)(v25 + 16) = 0LL;
  }

  if (a3) {
    uint64_t v26 = 32LL;
  }
  else {
    uint64_t v26 = 36LL;
  }
  int v27 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v27)
  {
    sub_18131044C(v7, v26, v22, 0LL, 0LL, v15, v16, v17);
  }

  else
  {
    *(_DWORD *)(v7 + 144) = v27 + 1;
    uint64_t v28 = *(void *)(v7 + 136) + 40LL * v27;
    *(_BYTE *)uint64_t v28 = v26;
    *(_WORD *)(v28 + 2) = 0;
    *(_DWORD *)(v28 + 4) = v22;
    *(_BYTE *)(v28 + 1) = 0;
    *(_OWORD *)(v28 + 8) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
  }

  int v29 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v29)
  {
    int v29 = sub_18131044C(v7, 9LL, 0LL, 0LL, 0LL, v15, v16, v17);
  }

  else
  {
    *(_DWORD *)(v7 + 144) = v29 + 1;
    uint64_t v30 = *(void *)(v7 + 136) + 40LL * v29;
    *(_BYTE *)uint64_t v30 = 9;
    int16x8_t v18 = 0uLL;
    *(_OWORD *)(v30 + 1) = 0u;
    *(_OWORD *)(v30 + 17) = 0u;
    *(void *)(v30 + 32) = 0LL;
  }

  if (a3) {
    uint64_t v31 = 21LL;
  }
  else {
    uint64_t v31 = 24LL;
  }
  int v32 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v32)
  {
    int v32 = sub_181310690(v7, v31, v22, 0LL, v12, v9, v16, v17);
  }

  else
  {
    *(_DWORD *)(v7 + 144) = v32 + 1;
    uint64_t v33 = *(void *)(v7 + 136) + 40LL * v32;
    *(_BYTE *)uint64_t v33 = v31;
    *(_WORD *)(v33 + 2) = 0;
    *(_DWORD *)(v33 + 4) = v22;
    *(_DWORD *)(v33 + 8) = 0;
    *(_DWORD *)(v33 + 12) = v12;
    *(_DWORD *)(v33 + 16) = v9;
    *(_BYTE *)(v33 + 1) = -3;
    *(void *)(v33 + 24) = 0LL;
    *(void *)(v33 + 32) = 0LL;
  }

  *(_DWORD *)(a2 + 20) = v32;
  if (*(_BYTE *)(*(void *)v7 + 103LL)) {
    uint64_t v34 = &byte_18C550680;
  }
  else {
    uint64_t v34 = (char *)(*(void *)(v7 + 136) + 40LL * v29);
  }
  uint64_t v35 = 0LL;
  *((_DWORD *)v34 + 2) = *(_DWORD *)(v7 + 144);
  do
  {
    uint64_t v37 = (v12 + v35);
    int v38 = *(_DWORD *)(v7 + 144);
    if (*(_DWORD *)(v7 + 148) > v38)
    {
      *(_DWORD *)(v7 + 144) = v38 + 1;
      uint64_t v36 = *(void *)(v7 + 136) + 40LL * v38;
      *(_DWORD *)uint64_t v36 = 94;
      *(_DWORD *)(v36 + 4) = v22;
      *(_DWORD *)(v36 + 8) = v35;
      *(_DWORD *)(v36 + 12) = v37;
      *(void *)(v36 + 24) = 0LL;
      *(void *)(v36 + 32) = 0LL;
      *(void *)(v36 + 16) = 0LL;
    }

    else
    {
      sub_18131044C(v7, 94LL, v22, v35, v37, v15, v16, v17);
    }

    uint64_t v35 = (v35 + 1);
  }

  while ((_DWORD)v9 != (_DWORD)v35);
LABEL_35:
  if (v9 < v70)
  {
    do
    {
      uint64_t v40 = *(void *)(*(void *)(v8 + 64) + 8 * v9);
      uint64_t v41 = sub_1812A3E6C( (uint64_t *)a1,  (unsigned __int8 **)v40,  (int *)a2,  v9,  a3,  (v12 + v9),  v16,  v17,  v18);
      if ((_DWORD)v41 == (_DWORD)v12 + (_DWORD)v9)
      {
        __int16 v43 = *(_WORD *)(v40 + 20);
        if ((v43 & 1) != 0) {
          goto LABEL_52;
        }
      }

      else if (v68 == 1)
      {
        if ((_DWORD)v12)
        {
          uint64_t v47 = *(unsigned __int8 *)(a1 + 31);
          if (v47 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v47 + 1;
            *(_DWORD *)(a1 + 4 * v47 + 224) = v12;
          }

          uint64_t v12 = v41;
          __int16 v43 = *(_WORD *)(v40 + 20);
          if ((v43 & 1) != 0)
          {
LABEL_52:
            if (!v69 || (*(_DWORD *)(*(void *)v40 + 4LL) & 0x1000) == 0) {
              goto LABEL_39;
            }
            uint64_t v48 = &v69[v9];
            goto LABEL_38;
          }
        }

        else
        {
          uint64_t v12 = v41;
          __int16 v43 = *(_WORD *)(v40 + 20);
          if ((v43 & 1) != 0) {
            goto LABEL_52;
          }
        }
      }

      else
      {
        int v49 = *(_DWORD *)(v7 + 144);
        if (*(_DWORD *)(v7 + 148) <= v49)
        {
          sub_18131044C(v7, 80LL, v41, (v12 + v9), 0LL, v42, v16, v17);
          __int16 v43 = *(_WORD *)(v40 + 20);
          if ((v43 & 1) != 0) {
            goto LABEL_52;
          }
        }

        else
        {
          *(_DWORD *)(v7 + 144) = v49 + 1;
          uint64_t v50 = *(void *)(v7 + 136) + 40LL * v49;
          *(_DWORD *)uint64_t v50 = 80;
          *(_DWORD *)(v50 + 4) = v41;
          *(_DWORD *)(v50 + 8) = v12 + v9;
          *(void *)(v50 + 12) = 0LL;
          *(void *)(v50 + 28) = 0LL;
          *(void *)(v50 + 20) = 0LL;
          *(_DWORD *)(v50 + 36) = 0;
          __int16 v43 = *(_WORD *)(v40 + 20);
          if ((v43 & 1) != 0) {
            goto LABEL_52;
          }
        }
      }

      if ((v43 & 0x100) != 0) {
        goto LABEL_39;
      }
      int v44 = *(unsigned __int8 **)(*(void *)v40 + 24LL);
      if ((*(_WORD *)(v40 + 18) & 0x800) == 0)
      {
        for (uint64_t i = *(unsigned __int8 **)(*(void *)v40 + 24LL); ; uint64_t i = (unsigned __int8 *)*((void *)i + 2))
        {
          int v46 = *i;
        }

        if (v46 == 176) {
          int v46 = i[2];
        }
        if ((v46 - 153) >= 3 && v46 != 117)
        {
          if (v46 != 167
            || (i[6] & 0x20) != 0
            || (uint64_t v51 = *((void *)i + 9)) == 0
            || (uint64_t v52 = *((unsigned int *)i + 12), (v52 & 0x80000000) == 0)
            && (uint64_t v53 = *(void *)(v51 + 8)) != 0
            && (*(_BYTE *)(v53 + 16 * v52 + 8) & 0xF) == 0)
          {
            uint64_t v54 = (v12 + v9);
            uint64_t v55 = *(unsigned int *)(a2 + 12);
            int v56 = *(_DWORD *)(v7 + 144);
            if (*(_DWORD *)(v7 + 148) <= v56)
            {
              sub_18131044C(v7, 50LL, v54, v55, 0LL, v42, v16, v17);
              if (*(_DWORD *)(a1 + 48)) {
                goto LABEL_39;
              }
              goto LABEL_71;
            }

            *(_DWORD *)(v7 + 144) = v56 + 1;
            uint64_t v57 = *(void *)(v7 + 136) + 40LL * v56;
            *(_DWORD *)uint64_t v57 = 50;
            *(_DWORD *)(v57 + 4) = v54;
            *(_DWORD *)(v57 + 8) = v55;
            *(void *)(v57 + 12) = 0LL;
            *(void *)(v57 + 28) = 0LL;
            *(void *)(v57 + 20) = 0LL;
            *(_DWORD *)(v57 + 36) = 0;
          }
        }
      }

      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_39;
      }
LABEL_71:
      uint64_t v48 = &v69[v9];
      int v58 = v69[v9];
      int v59 = sub_1812A3C7C(v44);
      if (v58 < 65 || v59 < 65)
      {
        if (v59 >= 65) {
          int v61 = v59;
        }
        else {
          int v61 = v58;
        }
        if ((v61 & 0xFFFFFFBF) != 1)
        {
LABEL_86:
          if (v58 != 65)
          {
            int v62 = 0;
            while (1)
            {
              int v63 = *v44;
              if (v63 == 173) {
                int v62 = 1;
              }
              int v44 = (unsigned __int8 *)*((void *)v44 + 2);
            }

            if (v63 == 176) {
              int v63 = v44[2];
            }
            switch(v63)
            {
              case 153:
              case 155:
                if (v58 > 66) {
                  goto LABEL_38;
                }
                break;
              case 154:
                if (!v62) {
                  goto LABEL_38;
                }
                break;
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
                goto LABEL_39;
              case 167:
                break;
              default:
                if (v63 == 117 && v58 == 66 && v62 == 0) {
                  goto LABEL_38;
                }
                break;
            }

            goto LABEL_39;
          }
        }
      }

      else if (v59 >= 0x43 || v58 >= 0x43)
      {
        goto LABEL_86;
      }

uint64_t sub_1813399A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 18) & 0x100) != 0)
  {
    if (*(_BYTE *)(*(void *)result + 103LL)) {
      uint64_t v3 = &byte_18C550680;
    }
    else {
      uint64_t v3 = (char *)(*(void *)(result + 136) + 40LL * *(int *)(result + 144) - 40);
    }
    unsigned int v4 = *(_DWORD *)(a2 + 44);
    *((_DWORD *)v3 + 3) = v4 >> 1;
    *((_WORD *)v3 + 1) = v4 & 1;
  }

  return result;
}

uint64_t sub_1813399F0(uint64_t result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    unsigned int v4 = (unsigned __int8 *)result;
    uint64_t v5 = 0LL;
    unsigned int v6 = (int **)(result + 32);
    uint64_t v7 = a2;
    do
    {
      int v8 = *v4;
      int v9 = v8;
      if (v8 == 176) {
        int v9 = v4[2];
      }
      uint64_t v10 = v6;
      if (v9 != 177)
      {
        int v11 = v4;
        if (v9 != 138) {
          goto LABEL_15;
        }
        uint64_t v10 = (int **)(*v6 + 8);
      }

      int v11 = v4;
      if (**v10 >= 2)
      {
        if (v8 == 138 || (uint64_t v12 = v6, v4[2] == 138)) {
          uint64_t v12 = (int **)(*v6 + 8);
        }
        int v11 = *(unsigned __int8 **)&(*v12)[6 * v5 + 2];
      }

uint64_t *sub_181339BD4( uint64_t *result, uint64_t a2, int a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    LODWORD(i) = a3;
    uint64_t result = (uint64_t *)result[2];
    if (a3 >= 1)
    {
      uint64_t v9 = (uint64_t)&a4[a3];
      uint64_t v10 = (a3 + a2);
      while (*a4 <= 65)
      {
        a2 = (a2 + 1);
        ++a4;
        BOOL v11 = __OFSUB__((_DWORD)i, 1);
        LODWORD(i) = i - 1;
        if (((int)i < 0) ^ v11 | ((_DWORD)i == 0))
        {
          LODWORD(i) = 0;
          goto LABEL_9;
        }
      }
    }

    uint64_t v9 = (uint64_t)a4;
    uint64_t v10 = a2;
LABEL_9:
    for (uint64_t i = i; ; --i)
    {
      uint64_t v12 = i;
    }

    if ((_DWORD)i != 1) {
      return result;
    }
    return (uint64_t *)sub_1812B9B68(result, 96LL, v10, v12, 0LL, v9, v12, a8);
  }

  return result;
}

uint64_t *sub_181339C60( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  uint64_t v10 = (uint64_t *)*result;
  uint64_t v11 = *(void *)(*result + 16);
  *((_BYTE *)result + 68) |= 1u;
  int v12 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v12)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 141LL, a4, 0LL, a3, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v12 + 1;
    uint64_t v13 = *(void *)(v11 + 136) + 40LL * v12;
    *(_DWORD *)uint64_t v13 = 141;
    *(_DWORD *)(v13 + 4) = a4;
    *(_DWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 12) = a3;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(v13 + 32) = 0LL;
    *(void *)(v13 + 16) = 0LL;
  }

  if ((*((_WORD *)v9 + 30) & 0x1020) != 0)
  {
    uint64_t v14 = (uint64_t *)v10[21];
    if (!v14) {
      uint64_t v14 = v10;
    }
    if (!*((_DWORD *)v14 + 30))
    {
      uint64_t v15 = *(void *)(a2 + 24);
      uint64_t v16 = *v10;
      uint64_t v17 = 4LL * *(__int16 *)(v15 + 54);
      size_t v18 = v17 + 4;
      if (v16)
      {
        uint64_t result = (uint64_t *)sub_1812F2264(v16, v17 + 4);
        size_t v19 = result;
        if (!result) {
          return result;
        }
      }

      else
      {
        uint64_t result = (uint64_t *)sub_18126F0AC(v17 + 4);
        size_t v19 = result;
        if (!result) {
          return result;
        }
      }

      bzero(v19, v18);
      *(_DWORD *)size_t v19 = *(__int16 *)(v15 + 54);
      unint64_t v20 = *(unsigned __int16 *)(a2 + 96);
      if (v20 >= 2)
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = (v20 - 1);
        uint64_t v23 = *(void *)(a2 + 8);
        v24.i64[0] = 0x1000100010001LL;
        v24.i64[1] = 0x1000100010001LL;
        do
        {
          uint64_t v25 = *(__int16 *)(v23 + 2 * v21);
          __int16 v26 = *(_WORD *)(v23 + 2 * v21);
          if ((v25 & 0x8000000000000000LL) == 0)
          {
            __int16 v26 = *(_WORD *)(v23 + 2 * v21);
            if ((*(_DWORD *)(v15 + 48) & 0x20) != 0)
            {
              uint64_t v27 = *(void *)(v15 + 8);
              if (*(_WORD *)(v23 + 2 * v21))
              {
                uint64_t v28 = v25;
                if (v25 >= 0x11uLL)
                {
                  uint64_t v30 = v25 & 0xF;
                  if ((v25 & 0xF) == 0) {
                    uint64_t v30 = 16LL;
                  }
                  uint64_t v29 = v25 - v30;
                  uint64_t v31 = v27 + 142;
                  int16x8_t v32 = 0uLL;
                  uint64_t v33 = v29;
                  int16x8_t v34 = 0uLL;
                  do
                  {
                    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 64), (int8x16_t)xmmword_1813CDDC0);
                    v35.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
                    v36.i32[0] = vzip1q_s16(*(int16x8_t *)(v31 - 128), *(int16x8_t *)(v31 - 112)).u32[0];
                    v36.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
                    v36.i64[1] = v35.i64[1];
                    uint16x8_t v37 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v31 + 96), (int8x16_t)xmmword_1813CDDB0);
                    int8x16x2_t v49 = *(int8x16x2_t *)(v31 + 32);
                    int8x16_t v38 = vqtbl2q_s8(*(int8x16x2_t *)(v31 + 64), (int8x16_t)xmmword_1813CDDC0);
                    int16x8_t v40 = *(int16x8_t *)v31;
                    int16x8_t v39 = *(int16x8_t *)(v31 + 16);
                    v31 += 256LL;
                    v38.i32[3] = v37.i32[3];
                    v37.i32[0] = vzip1q_s16(v40, v39).u32[0];
                    v37.i32[1] = vqtbl2q_s8(v49, (int8x16_t)xmmword_1813CDDD0).i32[1];
                    v37.i64[1] = v38.i64[1];
                    int16x8_t v32 = vaddq_s16((int16x8_t)vbicq_s8(v24, (int8x16_t)vshrq_n_u16(v36, 5uLL)), v32);
                    int16x8_t v34 = vaddq_s16((int16x8_t)vbicq_s8(v24, (int8x16_t)vshrq_n_u16(v37, 5uLL)), v34);
                    v33 -= 16LL;
                  }

                  while (v33);
                  __int16 v26 = vaddvq_s16(vaddq_s16(v34, v32));
                }

                else
                {
                  uint64_t v29 = 0LL;
                  __int16 v26 = 0;
                }

                uint64_t v41 = v25 - v29;
                uint64_t v42 = (unsigned __int16 *)(v27 + 16 * v29 + 14);
                do
                {
                  unsigned int v43 = *v42;
                  v42 += 8;
                  v26 += ((v43 >> 5) & 1) == 0;
                  --v41;
                }

                while (v41);
              }

              else
              {
                uint64_t v28 = 0LL;
                __int16 v26 = 0;
              }

              if ((*(_WORD *)(v27 + 16 * v28 + 14) & 0x20) != 0) {
                __int16 v26 = v25 - v26 + *(_WORD *)(v15 + 56);
              }
            }
          }

          ++v21;
          if ((v25 & 0x80000000) == 0) {
            *((_DWORD *)v19 + v26 + 1) = v21;
          }
        }

        while (v21 != v22);
      }

      uint64_t result = *(uint64_t **)v11;
      if (*(_BYTE *)(*(void *)v11 + 103LL))
      {
        return sub_1813014B0(result, v19);
      }

      else
      {
        uint64_t v44 = *(int *)(v11 + 144) - 1LL;
        uint64_t v45 = *(void *)(v11 + 136);
        uint64_t v46 = v45 + 40 * v44;
        int v48 = *(unsigned __int8 *)(v46 + 1);
        uint64_t v47 = (_BYTE *)(v46 + 1);
        if (v48)
        {
          return sub_181310724((uint64_t *)v11, v45 + 40 * v44, (char *)v19, 0xFFFFFFF2);
        }

        else
        {
          *(void *)(v45 + 40 * v44 + 16) = v19;
          *uint64_t v47 = -14;
        }
      }
    }
  }

  return result;
}

uint64_t sub_181339F64(uint64_t result, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = result; *(_BYTE *)i == 44; uint64_t i = *(void *)(i + 24))
    uint64_t result = sub_181339F64(*(void *)(i + 16), a2, a3);
  if (*(int *)(a3 + 20) >= 1)
  {
    int v6 = 0;
    uint64_t v7 = (_WORD *)(*(void *)(a3 + 32) + 18LL);
    do
    {
      if ((*v7 & 4) == 0)
      {
        uint64_t result = sub_18131BA10(0LL, *(unsigned __int8 **)(v7 - 9), (unsigned __int8 *)i, a2);
        if (!(_DWORD)result) {
          *v7 |= 4u;
        }
      }

      ++v6;
      v7 += 28;
    }

    while (v6 < *(_DWORD *)(a3 + 20));
  }

  return result;
}

void *sub_18133A024(void *result)
{
  int v1 = *((_DWORD *)result + 5);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 == v2)
  {
    unsigned int v4 = **(void ***)*result;
    uint64_t v5 = result[4] + 18LL;
    uint64_t v6 = 56LL * v3 + 56;
    do
    {
      __int16 v7 = *(_WORD *)v5;
      if ((*(_WORD *)v5 & 1) != 0)
      {
        int v8 = *(unsigned __int8 **)(v5 - 18);
        if (v8)
        {
          uint64_t result = sub_181309110(v4, v8);
          __int16 v7 = *(_WORD *)v5;
        }
      }

      if ((v7 & 0x30) != 0)
      {
        uint64_t v9 = *(void **)(v5 + 14);
        uint64_t result = (void *)sub_18133A024(v9);
        if (v9) {
          uint64_t result = sub_1812F20DC(v4, v9);
        }
      }

      v5 += 56LL;
      v6 -= 56LL;
    }

    while (v6);
  }

  return result;
}

BOOL sub_18133A0C4(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v9 = 0LL;
  if (!a2) {
    return 0LL;
  }
  sub_181312474(v2, a2, *(unsigned __int8 *)(v2 + 100), 67LL, &v9);
  uint64_t v3 = v9;
  if (!v9) {
    return 0LL;
  }
  __int16 v4 = *(_WORD *)(v9 + 20);
  if ((v4 & 0x24) != 0)
  {
    double v5 = *(double *)v9;
  }

  else if ((v4 & 8) != 0)
  {
    double v8 = *(double *)v9;
    if (*(double *)v9 >= -9.22337204e18)
    {
      if (v8 <= 9.22337204e18) {
        *(void *)&double v5 = (uint64_t)v8;
      }
      else {
        LODWORD(v5) = -1;
      }
    }

    else
    {
      LODWORD(v5) = 0;
    }
  }

  else if ((v4 & 0x12) != 0 && *(void *)(v9 + 8))
  {
    LODWORD(v5) = sub_181303DF0(v9);
    __int16 v4 = *(_WORD *)(v3 + 20);
  }

  else
  {
    LODWORD(v5) = 0;
  }

  BOOL v6 = SLODWORD(v5) > 0;
  if ((v4 & 0x9000) != 0 || *(_DWORD *)(v3 + 32)) {
    sub_181303838(v3);
  }
  sub_1812F20DC(*(void **)(v3 + 24), (void *)v3);
  return v6;
}

uint64_t *sub_18133A1C0( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v10 = result;
  uint64_t v11 = result[2];
  if (v11)
  {
    char v12 = *((_BYTE *)result + 31);
    if (v12)
    {
LABEL_3:
      unsigned __int8 v13 = v12 - 1;
      *((_BYTE *)v10 + 31) = v13;
      uint64_t v14 = *((unsigned int *)v10 + v13 + 56);
      goto LABEL_9;
    }
  }

  else
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
      *((_BYTE *)result + 35) = 1;
    }
    uint64_t result = (uint64_t *)sub_1812DC63C(result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = (uint64_t)result;
    char v12 = *((_BYTE *)v10 + 31);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v14 = (*((_DWORD *)v10 + 14) + 1);
  *((_DWORD *)v10 + 14) = v14;
LABEL_9:
  int v15 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v15)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 71LL, 0LL, v14, 0LL, a6, a7, a8);
    if (v8 < 3)
    {
LABEL_11:
      int v17 = *(_DWORD *)(v11 + 144);
      uint64_t v18 = (v17 + 2);
      if (*(_DWORD *)(v11 + 148) <= v17)
      {
        uint64_t result = (uint64_t *)sub_18131044C(v11, 13LL, a2, v18, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v17 + 1;
        uint64_t v19 = *(void *)(v11 + 136) + 40LL * v17;
        *(_DWORD *)uint64_t v19 = 13;
        *(_DWORD *)(v19 + 4) = a2;
        *(_DWORD *)(v19 + 8) = v18;
        *(void *)(v19 + 12) = 0LL;
        *(void *)(v19 + 28) = 0LL;
        *(void *)(v19 + 20) = 0LL;
        *(_DWORD *)(v19 + 36) = 0;
      }

      goto LABEL_23;
    }
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v11 + 136) + 40LL * v15;
    *(void *)uint64_t v16 = 71LL;
    *(_DWORD *)(v16 + 8) = v14;
    *(void *)(v16 + 12) = 0LL;
    *(void *)(v16 + 28) = 0LL;
    *(void *)(v16 + 20) = 0LL;
    *(_DWORD *)(v16 + 36) = 0;
    if (v8 < 3) {
      goto LABEL_11;
    }
  }

  if (*((_BYTE *)v10 + 31))
  {
    unsigned __int8 v20 = *((_BYTE *)v10 + 31) - 1;
    *((_BYTE *)v10 + 31) = v20;
    uint64_t v21 = *((unsigned int *)v10 + v20 + 56);
  }

  else
  {
    uint64_t v21 = (*((_DWORD *)v10 + 14) + 1);
    *((_DWORD *)v10 + 14) = v21;
  }

  uint64_t result = (uint64_t *)sub_1812B9B68((uint64_t *)v11, 117LL, 0LL, v21, 0LL, (uint64_t)&byte_1813CEAEE, 0xFFFFFFFFLL, a8);
  int v22 = *(_DWORD *)(v11 + 144);
  uint64_t v23 = (v22 + 2);
  if (*(_DWORD *)(v11 + 148) <= v22)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 57LL, v21, v23, a2, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v22 + 1;
    uint64_t v24 = *(void *)(v11 + 136) + 40LL * v22;
    *(_DWORD *)uint64_t v24 = 57;
    *(_DWORD *)(v24 + 4) = v21;
    *(_DWORD *)(v24 + 8) = v23;
    *(_DWORD *)(v24 + 12) = a2;
    *(void *)(v24 + 24) = 0LL;
    *(void *)(v24 + 32) = 0LL;
    *(void *)(v24 + 16) = 0LL;
  }

  int v25 = *(_DWORD *)(v11 + 144);
  BOOL v26 = __OFSUB__(v25, 1);
  int v27 = v25 - 1;
  if (v27 < 0 == v26) {
    *(_WORD *)(*(void *)(v11 + 136) + 40LL * v27 + 2) = 83;
  }
LABEL_23:
  uint64_t v28 = *(unsigned int *)&a9[4 * v8];
  int v29 = *(_DWORD *)(v11 + 144);
  uint64_t v30 = (v29 + 2);
  if (*(_DWORD *)(v11 + 148) <= v29)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, v28, v14, v30, a2, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v29 + 1;
    uint64_t v31 = *(void *)(v11 + 136) + 40LL * v29;
    *(_BYTE *)uint64_t v31 = v28;
    *(_WORD *)(v31 + 2) = 0;
    *(_DWORD *)(v31 + 4) = v14;
    *(_DWORD *)(v31 + 8) = v30;
    *(_DWORD *)(v31 + 12) = a2;
    *(_BYTE *)(v31 + 1) = 0;
    *(void *)(v31 + 24) = 0LL;
    *(void *)(v31 + 32) = 0LL;
    *(void *)(v31 + 16) = 0LL;
  }

  int v32 = *(_DWORD *)(v11 + 144);
  if (v32 >= 1) {
    *(_WORD *)(*(void *)(v11 + 136) + 40LL * (v32 - 1) + 2) = 67;
  }
  uint64_t v33 = (uint64_t *)v10[21];
  if (!v33) {
    uint64_t v33 = v10;
  }
  *((_BYTE *)v33 + 33) = 1;
  if (*(_DWORD *)(v11 + 148) <= v32)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 70LL, 1LL, 2LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v32 + 1;
    uint64_t v34 = *(void *)(v11 + 136) + 40LL * v32;
    *(_DWORD *)uint64_t v34 = 70;
    *(void *)(v34 + 4) = 0x200000001LL;
    *(void *)(v34 + 12) = 0LL;
    *(void *)(v34 + 28) = 0LL;
    *(void *)(v34 + 20) = 0LL;
    *(_DWORD *)(v34 + 36) = 0;
  }

  if (!*(_BYTE *)(*(void *)v11 + 103LL))
  {
    int8x16_t v35 = off_189B6E728[v8];
    uint64_t v36 = *(void *)(v11 + 136) + 40LL * *(int *)(v11 + 144);
    *(_BYTE *)(v36 - 39) = -1;
    *(void *)(v36 - 24) = v35;
  }

  if ((_DWORD)v14)
  {
    uint64_t v37 = *((unsigned __int8 *)v10 + 31);
    if (v37 <= 7)
    {
      *((_BYTE *)v10 + 31) = v37 + 1;
      *((_DWORD *)v10 + v37 + 56) = v14;
    }
  }

  return result;
}

uint64_t *sub_18133A530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  uint64_t result = *(uint64_t **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = result[2];
  if (!v12)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
      *((_BYTE *)result + 35) = 1;
    }
    uint64_t result = (uint64_t *)sub_1812DC63C(result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v12 = (uint64_t)result;
  }

  if (v11)
  {
    uint64_t v13 = v11;
    do
    {
      if (!*(_DWORD *)(v11 + 132)
        && (*(_BYTE *)(*(void *)(v13 + 80) + 5LL) & 0x10) != 0
        && *(_BYTE *)(v13 + 33) != 90)
      {
        uint64_t v23 = *(unsigned int *)(v13 + 96);
        int v24 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v24)
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 75LL, 0LL, v23, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v24 + 1;
          uint64_t v25 = *(void *)(v12 + 136) + 40LL * v24;
          *(void *)uint64_t v25 = 75LL;
          *(_DWORD *)(v25 + 8) = v23;
          *(void *)(v25 + 12) = 0LL;
          *(void *)(v25 + 28) = 0LL;
          *(void *)(v25 + 20) = 0LL;
          *(_DWORD *)(v25 + 36) = 0;
        }

        uint64_t v36 = *(unsigned int *)(v13 + 100);
        int v37 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v37)
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 32LL, v36, 0LL, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v37 + 1;
          uint64_t v38 = *(void *)(v12 + 136) + 40LL * v37;
          *(_DWORD *)uint64_t v38 = 32;
          *(_DWORD *)(v38 + 4) = v36;
          *(_OWORD *)(v38 + 8) = 0u;
          *(_OWORD *)(v38 + 24) = 0u;
        }

        uint64_t v40 = *(unsigned int *)(v13 + 96);
        uint64_t v39 = *(unsigned int *)(v13 + 100);
        int v41 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v41)
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 94LL, v39, 0LL, v40, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v41 + 1;
          uint64_t v42 = *(void *)(v12 + 136) + 40LL * v41;
          *(_DWORD *)uint64_t v42 = 94;
          *(_DWORD *)(v42 + 4) = v39;
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v42 + 12) = v40;
          *(void *)(v42 + 24) = 0LL;
          *(void *)(v42 + 32) = 0LL;
          *(void *)(v42 + 16) = 0LL;
        }

        int v43 = *(_DWORD *)(v12 + 144);
        uint64_t v44 = &byte_18C550680;
        if (!*(_BYTE *)(*(void *)v12 + 103LL)) {
          uint64_t v44 = (char *)(*(void *)(v12 + 136) + 40LL * (v43 - 2));
        }
        *((_DWORD *)v44 + 2) = v43;
        goto LABEL_9;
      }

      if (!*(_DWORD *)(v13 + 104))
      {
        uint64_t v14 = *(unsigned int **)(*(void *)(v13 + 112) + 32LL);
        if (v14)
        {
          uint64_t v15 = *v14;
          uint64_t v16 = *(unsigned int *)(v13 + 92);
          if (!v8) {
            goto LABEL_19;
          }
        }

        else
        {
          uint64_t v15 = 0LL;
          uint64_t v16 = *(unsigned int *)(v13 + 92);
          if (!v8)
          {
LABEL_19:
            uint64_t v19 = *(unsigned int *)(v13 + 96);
            int v20 = *(_DWORD *)(v12 + 144);
            if (*(_DWORD *)(v12 + 148) <= v20)
            {
              sub_18131044C(v12, 164LL, v16, v15, v19, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v12 + 144) = v20 + 1;
              uint64_t v21 = *(void *)(v12 + 136) + 40LL * v20;
              *(_DWORD *)uint64_t v21 = 164;
              *(_DWORD *)(v21 + 4) = v16;
              *(_DWORD *)(v21 + 8) = v15;
              *(_DWORD *)(v21 + 12) = v19;
              *(void *)(v21 + 24) = 0LL;
              *(void *)(v21 + 32) = 0LL;
              *(void *)(v21 + 16) = 0LL;
            }

            uint64_t v34 = *(void *)(v13 + 80);
            uint64_t result = *(uint64_t **)v12;
            if (*(_BYTE *)(*(void *)v12 + 103LL))
            {
              if ((*(_BYTE *)(v34 + 4) & 0x10) != 0) {
                uint64_t result = sub_1813014B0(result, (void *)v34);
              }
            }

            else
            {
              uint64_t v35 = *(void *)(v12 + 136) + 40LL * *(int *)(v12 + 144);
              *(_BYTE *)(v35 - 39) = -7;
              *(void *)(v35 - 24) = v34;
            }

            goto LABEL_9;
          }
        }

        int v17 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v17)
        {
          sub_18131044C(v12, 165LL, v16, v15, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v17 + 1;
          uint64_t v18 = *(void *)(v12 + 136) + 40LL * v17;
          *(_DWORD *)uint64_t v18 = 165;
          *(_DWORD *)(v18 + 4) = v16;
          *(_DWORD *)(v18 + 8) = v15;
          *(void *)(v18 + 12) = 0LL;
          *(void *)(v18 + 28) = 0LL;
          *(void *)(v18 + 20) = 0LL;
          *(_DWORD *)(v18 + 36) = 0;
        }

        uint64_t v22 = *(void *)(v13 + 80);
        uint64_t result = *(uint64_t **)v12;
        if (*(_BYTE *)(*(void *)v12 + 103LL))
        {
          if ((*(_BYTE *)(v22 + 4) & 0x10) != 0) {
            uint64_t result = sub_1813014B0(result, (void *)v22);
          }
        }

        else
        {
          uint64_t v26 = *(void *)(v12 + 136) + 40LL * *(int *)(v12 + 144);
          *(_BYTE *)(v26 - 39) = -7;
          *(void *)(v26 - 24) = v22;
        }

        uint64_t v27 = *(unsigned int *)(v13 + 92);
        uint64_t v28 = *(unsigned int *)(v13 + 96);
        int v29 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v29)
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 80LL, v27, v28, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v29 + 1;
          uint64_t v30 = *(void *)(v12 + 136) + 40LL * v29;
          *(_DWORD *)uint64_t v30 = 80;
          *(_DWORD *)(v30 + 4) = v27;
          *(_DWORD *)(v30 + 8) = v28;
          *(void *)(v30 + 12) = 0LL;
          *(void *)(v30 + 28) = 0LL;
          *(void *)(v30 + 20) = 0LL;
          *(_DWORD *)(v30 + 36) = 0;
        }

        uint64_t v31 = *(unsigned int *)(v13 + 92);
        int v32 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v32)
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 75LL, 0LL, v31, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v32 + 1;
          uint64_t v33 = *(void *)(v12 + 136) + 40LL * v32;
          *(void *)uint64_t v33 = 75LL;
          *(_DWORD *)(v33 + 8) = v31;
          *(void *)(v33 + 12) = 0LL;
          *(void *)(v33 + 28) = 0LL;
          *(void *)(v33 + 20) = 0LL;
          *(_DWORD *)(v33 + 36) = 0;
        }
      }

uint64_t sub_18133A8DC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v10 = *(void *)result;
  uint64_t v169 = result;
  if (!*(_DWORD *)(v9 + 132))
  {
    uint64_t v170 = *(void *)(result + 8);
    while (1)
    {
      uint64_t v14 = *(void *)(v9 + 80);
      uint64_t v15 = *(char **)(v14 + 56);
      BOOL v16 = v15 == "nth_value" || v15 == "first_value";
      if (!v16) {
        break;
      }
      uint64_t v17 = *(unsigned int *)(v9 + 100);
      int v18 = *(_DWORD *)(v10 + 68);
      *(_DWORD *)(v10 + 68) = v18 - 1;
      if (*(_BYTE *)(v10 + 31))
      {
        unsigned __int8 v19 = *(_BYTE *)(v10 + 31) - 1;
        *(_BYTE *)(v10 + 31) = v19;
        uint64_t v20 = *(unsigned int *)(v10 + 4LL * v19 + 224);
      }

      else
      {
        uint64_t v20 = (*(_DWORD *)(v10 + 56) + 1);
        *(_DWORD *)(v10 + 56) = v20;
      }

      uint64_t v26 = *(unsigned int *)(v9 + 96);
      int v27 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v27)
      {
        sub_18131044C(v8, 75LL, 0LL, v26, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v27 + 1;
        uint64_t v28 = *(void *)(v8 + 136) + 40LL * v27;
        *(void *)uint64_t v28 = 75LL;
        *(_DWORD *)(v28 + 8) = v26;
        *(void *)(v28 + 12) = 0LL;
        *(void *)(v28 + 28) = 0LL;
        *(void *)(v28 + 20) = 0LL;
        *(_DWORD *)(v28 + 36) = 0;
      }

      if (*(char **)(v14 + 56) == "nth_value")
      {
        uint64_t v31 = *(unsigned int *)(v170 + 88);
        uint64_t v32 = (*(_DWORD *)(v9 + 124) + 1);
        int v33 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v33)
        {
          sub_18131044C(v8, 94LL, v31, v32, v20, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v8 + 144) = v33 + 1;
          uint64_t v34 = *(void *)(v8 + 136) + 40LL * v33;
          *(_DWORD *)uint64_t v34 = 94;
          *(_DWORD *)(v34 + 4) = v31;
          *(_DWORD *)(v34 + 8) = v32;
          *(_DWORD *)(v34 + 12) = v20;
          *(void *)(v34 + 24) = 0LL;
          *(void *)(v34 + 32) = 0LL;
          *(void *)(v34 + 16) = 0LL;
        }

        sub_18133A1C0((uint64_t *)v10, v20, 2LL, v32, a5, a6, a7, a8);
      }

      else
      {
        int v29 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v29)
        {
          sub_18131044C(v8, 71LL, 1LL, v20, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v8 + 144) = v29 + 1;
          uint64_t v30 = *(void *)(v8 + 136) + 40LL * v29;
          *(void *)uint64_t v30 = 0x100000047LL;
          *(_DWORD *)(v30 + 8) = v20;
          *(void *)(v30 + 12) = 0LL;
          *(void *)(v30 + 28) = 0LL;
          *(void *)(v30 + 20) = 0LL;
          *(_DWORD *)(v30 + 36) = 0;
        }
      }

      uint64_t v42 = *(unsigned int *)(v9 + 104);
      int v43 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v43)
      {
        sub_18131044C(v8, 106LL, v20, v42, v20, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v43 + 1;
        uint64_t v44 = *(void *)(v8 + 136) + 40LL * v43;
        *(_DWORD *)uint64_t v44 = 106;
        *(_DWORD *)(v44 + 4) = v20;
        *(_DWORD *)(v44 + 8) = v42;
        *(_DWORD *)(v44 + 12) = v20;
        *(void *)(v44 + 24) = 0LL;
        *(void *)(v44 + 32) = 0LL;
        *(void *)(v44 + 16) = 0LL;
      }

      uint64_t v45 = (*(_DWORD *)(v9 + 104) + 1);
      int v46 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v46)
      {
        sub_18131044C(v8, 54LL, v45, (v18 - 1), v20, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v46 + 1;
        uint64_t v47 = *(void *)(v8 + 136) + 40LL * v46;
        *(_DWORD *)uint64_t v47 = 54;
        *(_DWORD *)(v47 + 4) = v45;
        *(_DWORD *)(v47 + 8) = v18 - 1;
        *(_DWORD *)(v47 + 12) = v20;
        *(void *)(v47 + 24) = 0LL;
        *(void *)(v47 + 32) = 0LL;
        *(void *)(v47 + 16) = 0LL;
      }

      int v48 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v48)
      {
        sub_18131044C(v8, 30LL, v17, 0LL, v20, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v48 + 1;
        uint64_t v49 = *(void *)(v8 + 136) + 40LL * v48;
        *(_DWORD *)uint64_t v49 = 30;
        *(_DWORD *)(v49 + 4) = v17;
        *(_DWORD *)(v49 + 8) = 0;
        *(_DWORD *)(v49 + 12) = v20;
        *(void *)(v49 + 24) = 0LL;
        *(void *)(v49 + 32) = 0LL;
        *(void *)(v49 + 16) = 0LL;
      }

      uint64_t v50 = *(unsigned int *)(v9 + 124);
      a5 = *(unsigned int *)(v9 + 96);
      int v51 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v51)
      {
        sub_18131044C(v8, 94LL, v17, v50, a5, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v51 + 1;
        uint64_t v52 = *(void *)(v8 + 136) + 40LL * v51;
        *(_DWORD *)uint64_t v52 = 94;
        *(_DWORD *)(v52 + 4) = v17;
        *(_DWORD *)(v52 + 8) = v50;
        *(_DWORD *)(v52 + 12) = a5;
        *(void *)(v52 + 24) = 0LL;
        *(void *)(v52 + 32) = 0LL;
        *(void *)(v52 + 16) = 0LL;
      }

      uint64_t result = *(void *)(v8 + 24);
      int v53 = -v18;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
      {
        uint64_t result = sub_18131E420(result, v8, v53);
        if (!(_DWORD)v20) {
          goto LABEL_6;
        }
      }

      else
      {
        *(_DWORD *)(*(void *)(result + 80) + 4LL * v53) = *(_DWORD *)(v8 + 144);
        if (!(_DWORD)v20) {
          goto LABEL_6;
        }
      }

      unsigned int v54 = *(unsigned __int8 *)(v10 + 31);
      if (v54 >= 8) {
        goto LABEL_6;
      }
LABEL_5:
      *(_BYTE *)(v10 + 31) = v54 + 1;
      *(_DWORD *)(v10 + 4LL * v54 + 224) = v20;
LABEL_6:
      uint64_t v9 = *(void *)(v9 + 64);
      if (!v9) {
        goto LABEL_199;
      }
    }

    if (v15 != "lead" && v15 != "lag") {
      goto LABEL_6;
    }
    int v22 = **(_DWORD **)(*(void *)(v9 + 112) + 32LL);
    uint64_t v23 = *(unsigned int *)(v9 + 100);
    int v24 = *(_DWORD *)(v10 + 68);
    *(_DWORD *)(v10 + 68) = v24 - 1;
    if (*(_BYTE *)(v10 + 31))
    {
      unsigned __int8 v25 = *(_BYTE *)(v10 + 31) - 1;
      *(_BYTE *)(v10 + 31) = v25;
      uint64_t v20 = *(unsigned int *)(v10 + 4LL * v25 + 224);
    }

    else
    {
      uint64_t v20 = (*(_DWORD *)(v10 + 56) + 1);
      *(_DWORD *)(v10 + 56) = v20;
    }

    uint64_t v35 = *(unsigned int *)(v170 + 88);
    if (v22 > 2)
    {
      uint64_t v36 = (*(_DWORD *)(v9 + 124) + 2);
      uint64_t v39 = *(unsigned int *)(v9 + 96);
      int v40 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v40)
      {
        *(_DWORD *)(v8 + 144) = v40 + 1;
        uint64_t v41 = *(void *)(v8 + 136) + 40LL * v40;
        *(_DWORD *)uint64_t v41 = 94;
        *(_DWORD *)(v41 + 4) = v35;
        *(_DWORD *)(v41 + 8) = v36;
        *(_DWORD *)(v41 + 12) = v39;
        *(void *)(v41 + 24) = 0LL;
        *(void *)(v41 + 32) = 0LL;
        *(void *)(v41 + 16) = 0LL;
        goto LABEL_60;
      }

      uint64_t v55 = v8;
      uint64_t v56 = 94LL;
      uint64_t v57 = *(unsigned int *)(v170 + 88);
    }

    else
    {
      uint64_t v36 = *(unsigned int *)(v9 + 96);
      int v37 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v37)
      {
        *(_DWORD *)(v8 + 144) = v37 + 1;
        uint64_t v38 = *(void *)(v8 + 136) + 40LL * v37;
        *(void *)uint64_t v38 = 75LL;
        *(_DWORD *)(v38 + 8) = v36;
        *(void *)(v38 + 12) = 0LL;
        *(void *)(v38 + 28) = 0LL;
        *(void *)(v38 + 20) = 0LL;
        *(_DWORD *)(v38 + 36) = 0;
LABEL_60:
        int v58 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v58)
        {
          sub_18131044C(v8, 135LL, v35, v20, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v8 + 144) = v58 + 1;
          uint64_t v59 = *(void *)(v8 + 136) + 40LL * v58;
          *(_DWORD *)uint64_t v59 = 135;
          *(_DWORD *)(v59 + 4) = v35;
          *(_DWORD *)(v59 + 8) = v20;
          *(void *)(v59 + 12) = 0LL;
          *(void *)(v59 + 28) = 0LL;
          *(void *)(v59 + 20) = 0LL;
          *(_DWORD *)(v59 + 36) = 0;
        }

        int v60 = *(char **)(v14 + 56);
        if (v22 > 1)
        {
          if (v60 == "lead") {
            uint64_t v64 = 106LL;
          }
          else {
            uint64_t v64 = 107LL;
          }
          if (*(_BYTE *)(v10 + 31))
          {
            unsigned __int8 v65 = *(_BYTE *)(v10 + 31) - 1;
            *(_BYTE *)(v10 + 31) = v65;
            uint64_t v66 = *(unsigned int *)(v10 + 4LL * v65 + 224);
          }

          else
          {
            uint64_t v66 = (*(_DWORD *)(v10 + 56) + 1);
            *(_DWORD *)(v10 + 56) = v66;
          }

          uint64_t v67 = (*(_DWORD *)(v9 + 124) + 1);
          int v68 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v68)
          {
            sub_18131044C(v8, 94LL, v35, v67, v66, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v8 + 144) = v68 + 1;
            uint64_t v69 = *(void *)(v8 + 136) + 40LL * v68;
            *(_DWORD *)uint64_t v69 = 94;
            *(_DWORD *)(v69 + 4) = v35;
            *(_DWORD *)(v69 + 8) = v67;
            *(_DWORD *)(v69 + 12) = v66;
            *(void *)(v69 + 24) = 0LL;
            *(void *)(v69 + 32) = 0LL;
            *(void *)(v69 + 16) = 0LL;
          }

          int v70 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v70)
          {
            sub_18131044C(v8, v64, v66, v20, v20, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v8 + 144) = v70 + 1;
            int v71 = (int32x2_t *)(*(void *)(v8 + 136) + 40LL * v70);
            v71->i8[0] = v64;
            v71->i16[1] = 0;
            v71->i32[1] = v66;
            v71[1] = vdup_n_s32(v20);
            v71->i8[1] = 0;
            v71[3] = 0LL;
            v71[4] = 0LL;
            v71[2] = 0LL;
          }

          if ((_DWORD)v66)
          {
            uint64_t v72 = *(unsigned __int8 *)(v10 + 31);
            if (v72 <= 7)
            {
              *(_BYTE *)(v10 + 31) = v72 + 1;
              *(_DWORD *)(v10 + 4 * v72 + 224) = v66;
            }
          }
        }

        else
        {
          if (v60 == "lead") {
            uint64_t v61 = 1LL;
          }
          else {
            uint64_t v61 = 0xFFFFFFFFLL;
          }
          int v62 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v62)
          {
            sub_18131044C(v8, 86LL, v20, v61, 0LL, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v8 + 144) = v62 + 1;
            uint64_t v63 = *(void *)(v8 + 136) + 40LL * v62;
            *(_DWORD *)uint64_t v63 = 86;
            *(_DWORD *)(v63 + 4) = v20;
            *(_DWORD *)(v63 + 8) = v61;
            *(void *)(v63 + 12) = 0LL;
            *(void *)(v63 + 28) = 0LL;
            *(void *)(v63 + 20) = 0LL;
            *(_DWORD *)(v63 + 36) = 0;
          }
        }

        int v73 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v73)
        {
          sub_18131044C(v8, 30LL, v23, (v24 - 1), v20, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v8 + 144) = v73 + 1;
          uint64_t v74 = *(void *)(v8 + 136) + 40LL * v73;
          *(_DWORD *)uint64_t v74 = 30;
          *(_DWORD *)(v74 + 4) = v23;
          *(_DWORD *)(v74 + 8) = v24 - 1;
          *(_DWORD *)(v74 + 12) = v20;
          *(void *)(v74 + 24) = 0LL;
          *(void *)(v74 + 32) = 0LL;
          *(void *)(v74 + 16) = 0LL;
        }

        uint64_t v75 = *(unsigned int *)(v9 + 124);
        a5 = *(unsigned int *)(v9 + 96);
        int v76 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v76)
        {
          sub_18131044C(v8, 94LL, v23, v75, a5, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v8 + 144) = v76 + 1;
          uint64_t v77 = *(void *)(v8 + 136) + 40LL * v76;
          *(_DWORD *)uint64_t v77 = 94;
          *(_DWORD *)(v77 + 4) = v23;
          *(_DWORD *)(v77 + 8) = v75;
          *(_DWORD *)(v77 + 12) = a5;
          *(void *)(v77 + 24) = 0LL;
          *(void *)(v77 + 32) = 0LL;
          *(void *)(v77 + 16) = 0LL;
        }

        uint64_t result = *(void *)(v8 + 24);
        int v78 = -v24;
        if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
        {
          uint64_t result = sub_18131E420(result, v8, v78);
          if (!(_DWORD)v20) {
            goto LABEL_6;
          }
        }

        else
        {
          *(_DWORD *)(*(void *)(result + 80) + 4LL * v78) = *(_DWORD *)(v8 + 144);
          if (!(_DWORD)v20) {
            goto LABEL_6;
          }
        }

        unsigned int v54 = *(unsigned __int8 *)(v10 + 31);
        if (v54 > 7) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }

      uint64_t v55 = v8;
      uint64_t v56 = 75LL;
      uint64_t v57 = 0LL;
      uint64_t v39 = 0LL;
    }

    sub_18131044C(v55, v56, v57, v36, v39, a6, a7, a8);
    goto LABEL_60;
  }

  uint64_t v11 = result;
  uint64_t v12 = *(unsigned int **)(v9 + 24);
  if (v12) {
    uint64_t v13 = *v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  unsigned int v79 = *(_DWORD *)(v9 + 100);
  int v80 = *(_DWORD *)(v10 + 68);
  uint64_t v81 = (v80 - 2);
  *(_DWORD *)(v10 + 68) = v81;
  char v82 = *(_BYTE *)(v10 + 31);
  if (!v82)
  {
    uint64_t v83 = (*(_DWORD *)(v10 + 56) + 1);
    *(_DWORD *)(v10 + 56) = v83;
LABEL_103:
    unsigned __int8 v84 = 0;
    uint64_t v85 = (*(_DWORD *)(v10 + 56) + 1);
    *(_DWORD *)(v10 + 56) = v85;
    if (!(_DWORD)v13) {
      goto LABEL_101;
    }
LABEL_104:
    if ((_DWORD)v13 == 1)
    {
      if (v84)
      {
        *(_BYTE *)(v10 + 31) = v84 - 1;
        uint64_t v86 = *(unsigned int *)(v10 + 4LL * (v84 - 1) + 224);
        if (v84 != 1)
        {
          unsigned __int8 v87 = v84 - 2;
          *(_BYTE *)(v10 + 31) = v87;
          unsigned int v165 = *(_DWORD *)(v10 + 4LL * v87 + 224);
          goto LABEL_116;
        }
      }

      else
      {
        uint64_t v86 = (*(_DWORD *)(v10 + 56) + 1);
        *(_DWORD *)(v10 + 56) = v86;
      }

      int v94 = *(_DWORD *)(v10 + 56) + 1;
      unsigned int v165 = v94;
    }

    else
    {
      int v88 = *(_DWORD *)(v10 + 40);
      int v89 = v88 - v13;
      if (v88 >= (int)v13)
      {
        uint64_t v86 = *(unsigned int *)(v10 + 44);
        *(_DWORD *)(v10 + 40) = v89;
        *(_DWORD *)(v10 + 44) = v86 + v13;
        BOOL v91 = __OFSUB__(v89, (_DWORD)v13);
        int v92 = v89 - v13;
        if (v92 < 0 == v91)
        {
          unsigned int v165 = *(_DWORD *)(v10 + 44);
          *(_DWORD *)(v10 + 40) = v92;
          *(_DWORD *)(v10 + 44) = v165 + v13;
          goto LABEL_116;
        }
      }

      else
      {
        int v90 = *(_DWORD *)(v10 + 56);
        uint64_t v86 = (v90 + 1);
        *(_DWORD *)(v10 + 56) = v90 + v13;
      }

      int v93 = *(_DWORD *)(v10 + 56);
      unsigned int v165 = v93 + 1;
      int v94 = v93 + v13;
    }

    *(_DWORD *)(v10 + 56) = v94;
    goto LABEL_116;
  }

  *(_BYTE *)(v10 + 31) = v82 - 1;
  uint64_t v83 = *(unsigned int *)(v10 + 4LL * (v82 - 1) + 224);
  if (v82 == 1) {
    goto LABEL_103;
  }
  unsigned __int8 v84 = v82 - 2;
  *(_BYTE *)(v10 + 31) = v84;
  uint64_t v85 = *(unsigned int *)(v10 + 4LL * v84 + 224);
  if ((_DWORD)v13) {
    goto LABEL_104;
  }
LABEL_101:
  unsigned int v165 = 0;
  uint64_t v86 = 0LL;
LABEL_116:
  uint64_t v95 = *(unsigned int *)(v9 + 88);
  int v96 = *(_DWORD *)(v8 + 144);
  unsigned int v171 = v79;
  unsigned int v168 = v83;
  if (*(_DWORD *)(v8 + 148) <= v96)
  {
    sub_18131044C(v8, 135LL, v95, v83, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v96 + 1;
    uint64_t v97 = *(void *)(v8 + 136) + 40LL * v96;
    *(_DWORD *)uint64_t v97 = 135;
    *(_DWORD *)(v97 + 4) = v95;
    *(_DWORD *)(v97 + 8) = v83;
    *(void *)(v97 + 12) = 0LL;
    *(void *)(v97 + 28) = 0LL;
    *(void *)(v97 + 20) = 0LL;
    *(_DWORD *)(v97 + 36) = 0;
  }

  int v166 = v80;
  unsigned int v167 = v86;
  unsigned int v164 = v80 - 1;
  sub_18133CAD4((uint64_t *)v11, *(unsigned int *)(v9 + 88), v86, v83, a5, a6, a7, a8);
  uint64_t v102 = v9;
  do
  {
    while (1)
    {
      uint64_t v104 = *(unsigned int *)(v102 + 92);
      int v105 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v105) {
        break;
      }
      *(_DWORD *)(v8 + 144) = v105 + 1;
      uint64_t v103 = *(void *)(v8 + 136) + 40LL * v105;
      *(void *)uint64_t v103 = 75LL;
      *(_DWORD *)(v103 + 8) = v104;
      *(void *)(v103 + 12) = 0LL;
      *(void *)(v103 + 28) = 0LL;
      *(void *)(v103 + 20) = 0LL;
      *(_DWORD *)(v103 + 36) = 0;
      uint64_t v102 = *(void *)(v102 + 64);
      if (!v102) {
        goto LABEL_123;
      }
    }

    sub_18131044C(v8, 75LL, 0LL, v104, 0LL, v98, v99, v100);
    uint64_t v102 = *(void *)(v102 + 64);
  }

  while (v102);
LABEL_123:
  uint64_t v106 = *(unsigned int *)(v9 + 132);
  int v107 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v107)
  {
    uint64_t v109 = v171;
    sub_18131044C(v8, 23LL, v171, v81, v106, v98, v99, v100);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v107 + 1;
    uint64_t v108 = *(void *)(v8 + 136) + 40LL * v107;
    uint64_t v109 = v171;
    *(_DWORD *)uint64_t v108 = 23;
    *(_DWORD *)(v108 + 4) = v171;
    *(_DWORD *)(v108 + 8) = v81;
    *(_DWORD *)(v108 + 12) = v106;
    *(void *)(v108 + 24) = 0LL;
    *(void *)(v108 + 32) = 0LL;
    *(void *)(v108 + 16) = 0LL;
  }

  uint64_t v110 = v85;
  uint64_t v111 = *(unsigned int *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= (int)v111)
  {
    sub_18131044C(v8, 135LL, v109, v85, 0LL, v98, v99, v100);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v111 + 1;
    uint64_t v112 = *(void *)(v8 + 136) + 40LL * (int)v111;
    *(_DWORD *)uint64_t v112 = 135;
    *(_DWORD *)(v112 + 4) = v109;
    *(_DWORD *)(v112 + 8) = v85;
    *(void *)(v112 + 12) = 0LL;
    *(void *)(v112 + 28) = 0LL;
    *(void *)(v112 + 20) = 0LL;
    *(_DWORD *)(v112 + 36) = 0;
  }

  uint64_t v113 = *(unsigned int *)(v9 + 136);
  int v114 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v114)
  {
    sub_18131044C(v8, 54LL, v113, v81, v85, v98, v99, v100);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v114 + 1;
    uint64_t v115 = *(void *)(v8 + 136) + 40LL * v114;
    *(_DWORD *)uint64_t v115 = 54;
    *(_DWORD *)(v115 + 4) = v113;
    *(_DWORD *)(v115 + 8) = v81;
    *(_DWORD *)(v115 + 12) = v85;
    *(void *)(v115 + 24) = 0LL;
    *(void *)(v115 + 32) = 0LL;
    *(void *)(v115 + 16) = 0LL;
  }

  int v116 = *(unsigned __int8 *)(v9 + 36);
  if (v116 == 66) {
    goto LABEL_173;
  }
  if (v116 != 85)
  {
    uint64_t v119 = v9;
    int v120 = *(int **)(v9 + 24);
    if (v120)
    {
      unsigned int v163 = v110;
      uint64_t v121 = *v120;
      uint64_t v122 = sub_18131A140(*(void *)v10, *v120, 1);
      uint64_t v124 = v122;
      if ((int)v121 >= 1 && v122)
      {
        uint64_t v125 = 0LL;
        uint64_t v126 = v120 + 2;
        do
        {
          uint64_t v127 = sub_181289D04(v10, *(unsigned __int8 **)v126, v123, v104, v106, v98, v99, v100);
          if (!v127) {
            uint64_t v127 = *(void *)(*(void *)v10 + 16LL);
          }
          *(void *)(v124 + 32 + 8 * v125) = v127;
          *(_BYTE *)(*(void *)(v124 + 24) + v125++) = *((_BYTE *)v126 + 16);
          v126 += 6;
        }

        while (v121 != v125);
      }

      uint64_t v9 = v119;
      uint64_t v11 = v169;
      uint64_t v110 = v163;
      if (*(_BYTE *)(v119 + 36) == 94) {
        goto LABEL_144;
      }
    }

    else
    {
      uint64_t v124 = 0LL;
      uint64_t v9 = v119;
      if (v116 == 94)
      {
LABEL_144:
        int v128 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v128)
        {
          *(_DWORD *)(v8 + 144) = v128 + 1;
          uint64_t v129 = *(void *)(v8 + 136) + 40LL * v128;
          *(_DWORD *)uint64_t v129 = 53;
          *(void *)(v129 + 4) = v168;
          *(_DWORD *)(v129 + 12) = v110;
          *(void *)(v129 + 24) = 0LL;
          *(void *)(v129 + 32) = 0LL;
          *(void *)(v129 + 16) = 0LL;
          if (!v124) {
            goto LABEL_159;
          }
LABEL_150:
          sub_18133CAD4((uint64_t *)v11, v171, v165, v104, v106, v98, v99, v100);
          int v130 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v130)
          {
            sub_18131044C(v8, 90LL, v165, v167, v13, v98, v99, v100);
          }

          else
          {
            *(_DWORD *)(v8 + 144) = v130 + 1;
            uint64_t v131 = *(void *)(v8 + 136) + 40LL * v130;
            *(_DWORD *)uint64_t v131 = 90;
            *(_DWORD *)(v131 + 4) = v165;
            *(_DWORD *)(v131 + 8) = v167;
            *(_DWORD *)(v131 + 12) = v13;
            *(void *)(v131 + 24) = 0LL;
            *(void *)(v131 + 32) = 0LL;
            *(void *)(v131 + 16) = 0LL;
          }

          if (*(_BYTE *)(*(void *)v8 + 103LL))
          {
            if (!*(void *)(*(void *)v8 + 816LL))
            {
              BOOL v16 = (*(_DWORD *)v124)-- == 1;
              if (v16) {
                sub_1813014B0(*(void **)(v124 + 16), (void *)v124);
              }
            }
          }

          else
          {
            uint64_t v134 = *(void *)(v8 + 136) + 40LL * *(int *)(v8 + 144);
            *(_BYTE *)(v134 - 39) = -8;
            *(void *)(v134 - 24) = v124;
          }

          int v135 = *(_DWORD *)(v8 + 144);
          uint64_t v136 = (v135 + 1);
          if (*(_DWORD *)(v8 + 148) > v135)
          {
            *(_DWORD *)(v8 + 144) = v136;
            uint64_t v137 = *(void *)(v8 + 136) + 40LL * v135;
            *(_DWORD *)uint64_t v137 = 14;
            *(_DWORD *)(v137 + 4) = v136;
            *(_DWORD *)(v137 + 8) = v164;
            *(_DWORD *)(v137 + 12) = v136;
            *(void *)(v137 + 24) = 0LL;
            *(void *)(v137 + 32) = 0LL;
            *(void *)(v137 + 16) = 0LL;
            uint64_t v109 = v171;
            if (!v128) {
              goto LABEL_173;
            }
            goto LABEL_169;
          }

          uint64_t v138 = v8;
          uint64_t v139 = 14LL;
          uint64_t v140 = v164;
          uint64_t v141 = (v135 + 1);
          goto LABEL_168;
        }

        int v128 = sub_18131044C(v8, 53LL, v168, 0LL, v110, v98, v99, v100);
        if (v124) {
          goto LABEL_150;
        }
LABEL_159:
        int v132 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v132)
        {
          *(_DWORD *)(v8 + 144) = v132 + 1;
          uint64_t v133 = *(void *)(v8 + 136) + 40LL * v132;
          *(void *)uint64_t v133 = 9LL;
          *(_DWORD *)(v133 + 8) = v164;
          *(void *)(v133 + 12) = 0LL;
          *(void *)(v133 + 28) = 0LL;
          *(void *)(v133 + 20) = 0LL;
          *(_DWORD *)(v133 + 36) = 0;
          uint64_t v109 = v171;
          if (!v128) {
            goto LABEL_173;
          }
          goto LABEL_169;
        }

        uint64_t v138 = v8;
        uint64_t v139 = 9LL;
        uint64_t v136 = 0LL;
        uint64_t v140 = v164;
        uint64_t v141 = 0LL;
LABEL_168:
        sub_18131044C(v138, v139, v136, v140, v141, v98, v99, v100);
        uint64_t v109 = v171;
        if (!v128) {
          goto LABEL_173;
        }
LABEL_169:
        if (*(_BYTE *)(*(void *)v8 + 103LL)) {
          int v142 = &byte_18C550680;
        }
        else {
          int v142 = (char *)(*(void *)(v8 + 136) + 40LL * v128);
        }
        *((_DWORD *)v142 + 2) = *(_DWORD *)(v8 + 144);
        goto LABEL_173;
      }
    }

    int v128 = 0;
    if (v124) {
      goto LABEL_150;
    }
    goto LABEL_159;
  }

  int v117 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v117)
  {
    sub_18131044C(v8, 53LL, v168, v164, v85, v98, v99, v100);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v117 + 1;
    uint64_t v118 = *(void *)(v8 + 136) + 40LL * v117;
    *(_DWORD *)uint64_t v118 = 53;
    *(_DWORD *)(v118 + 4) = v168;
    *(_DWORD *)(v118 + 8) = v164;
    *(_DWORD *)(v118 + 12) = v85;
    *(void *)(v118 + 24) = 0LL;
    *(void *)(v118 + 32) = 0LL;
    *(void *)(v118 + 16) = 0LL;
  }

uint64_t *sub_18133B924( uint64_t *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = result;
  uint64_t v13 = result[2];
  if (!v13)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
      *((_BYTE *)result + 35) = 1;
    }
    uint64_t result = (uint64_t *)sub_1812DC63C(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v13 = (uint64_t)result;
    if (a2) {
      goto LABEL_3;
    }
LABEL_14:
    int v22 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) > v22)
    {
      *(_DWORD *)(v13 + 144) = v22 + 1;
      uint64_t v23 = *(void *)(v13 + 136) + 40LL * v22;
      *(void *)uint64_t v23 = 9LL;
      *(_DWORD *)(v23 + 8) = a5;
      *(void *)(v23 + 12) = 0LL;
      *(void *)(v23 + 28) = 0LL;
      *(void *)(v23 + 20) = 0LL;
      *(_DWORD *)(v23 + 36) = 0;
      return result;
    }

    uint64_t v32 = v13;
    uint64_t v33 = 9LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = a5;
    uint64_t v36 = 0LL;
    return (uint64_t *)sub_18131044C(v32, v33, v34, v35, v36, a6, a7, a8);
  }

  if (!a2) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v14 = *a2;
  uint64_t result = (uint64_t *)sub_18131A140(*v12, *a2, 1);
  int v18 = result;
  unsigned int v37 = v14 - 1;
  BOOL v19 = (int)v14 < 1 || result == 0LL;
  if (!v19)
  {
    uint64_t v24 = 0LL;
    unsigned __int8 v25 = a2 + 2;
    do
    {
      uint64_t result = (uint64_t *)sub_181289D04((uint64_t)v12, *(unsigned __int8 **)v25, v15, v16, v17, a6, a7, a8);
      if (!result) {
        uint64_t result = *(uint64_t **)(*v12 + 16);
      }
      v18[v24 + 4] = (uint64_t)result;
      *(_BYTE *)(v18[3] + v24++) = *((_BYTE *)v25 + 16);
      v25 += 6;
    }

    while (v14 != v24);
  }

  int v20 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) <= v20)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v13, 90LL, a4, a3, v14, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v13 + 144) = v20 + 1;
    uint64_t v21 = *(void *)(v13 + 136) + 40LL * v20;
    *(_DWORD *)uint64_t v21 = 90;
    *(_DWORD *)(v21 + 4) = a4;
    *(_DWORD *)(v21 + 8) = a3;
    *(_DWORD *)(v21 + 12) = v14;
    *(void *)(v21 + 24) = 0LL;
    *(void *)(v21 + 32) = 0LL;
    *(void *)(v21 + 16) = 0LL;
  }

  if (*(_BYTE *)(*(void *)v13 + 103LL))
  {
    if (v18)
    {
      if (!*(void *)(*(void *)v13 + 816LL))
      {
        BOOL v19 = (*(_DWORD *)v18)-- == 1;
        if (v19) {
          uint64_t result = sub_1813014B0((void *)v18[2], v18);
        }
      }
    }
  }

  else
  {
    uint64_t v26 = *(void *)(v13 + 136) + 40LL * *(int *)(v13 + 144);
    *(_BYTE *)(v26 - 39) = -8;
    *(void *)(v26 - 24) = v18;
  }

  int v27 = *(_DWORD *)(v13 + 144);
  uint64_t v28 = (v27 + 1);
  if (*(_DWORD *)(v13 + 148) <= v27)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v13, 14LL, v28, a5, (v27 + 1), a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v13 + 144) = v28;
    uint64_t v29 = *(void *)(v13 + 136) + 40LL * v27;
    *(_DWORD *)uint64_t v29 = 14;
    *(_DWORD *)(v29 + 4) = v28;
    *(_DWORD *)(v29 + 8) = a5;
    *(_DWORD *)(v29 + 12) = v28;
    *(void *)(v29 + 24) = 0LL;
    *(void *)(v29 + 32) = 0LL;
    *(void *)(v29 + 16) = 0LL;
  }

  int v30 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) > v30)
  {
    *(_DWORD *)(v13 + 144) = v30 + 1;
    uint64_t v31 = *(void *)(v13 + 136) + 40LL * v30;
    *(_DWORD *)uint64_t v31 = 80;
    *(_DWORD *)(v31 + 4) = a3;
    *(_DWORD *)(v31 + 8) = a4;
    *(_DWORD *)(v31 + 12) = v37;
    *(void *)(v31 + 24) = 0LL;
    *(void *)(v31 + 32) = 0LL;
    *(void *)(v31 + 16) = 0LL;
    return result;
  }

  uint64_t v32 = v13;
  uint64_t v33 = 80LL;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = v37;
  return (uint64_t *)sub_18131044C(v32, v33, v34, v35, v36, a6, a7, a8);
}

uint64_t sub_18133BBE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v9 = a3;
  int v10 = a2;
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  int v15 = *(unsigned __int8 *)(v13 + 32);
  int v16 = *(_DWORD *)(*(void *)a1 + 68LL);
  uint64_t v17 = (v16 - 1);
  *(_DWORD *)(*(void *)a1 + 68LL) = v17;
  if ((_DWORD)a2 == 2 && *(_BYTE *)(v13 + 33) == 90) {
    return 0LL;
  }
  int v79 = a4;
  int v80 = v16;
  if ((int)a3 < 1)
  {
LABEL_14:
    uint64_t v19 = 0LL;
    if (v10 != 1) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }

  uint64_t v19 = *(unsigned int *)(v14 + 144);
  if (v15 != 89)
  {
    if (*(_DWORD *)(v14 + 148) <= (int)v19)
    {
      sub_18131044C(v14, 59LL, a3, (v16 - 1), 1LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v19 + 1;
      uint64_t v23 = *(void *)(v14 + 136) + 40LL * (int)v19;
      *(_DWORD *)uint64_t v23 = 59;
      *(_DWORD *)(v23 + 4) = a3;
      *(_DWORD *)(v23 + 8) = v17;
      *(_DWORD *)(v23 + 12) = 1;
      *(void *)(v23 + 24) = 0LL;
      *(void *)(v23 + 32) = 0LL;
      *(void *)(v23 + 16) = 0LL;
    }

    goto LABEL_14;
  }

  if ((_DWORD)a2 == 2)
  {
    if (*(_BYTE *)(v13 + 33) == 86)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 52);
      uint64_t v21 = *(unsigned int *)(a1 + 44);
      uint64_t v22 = 55LL;
    }

    else
    {
      uint64_t v20 = *(unsigned int *)(a1 + 44);
      uint64_t v21 = *(unsigned int *)(a1 + 52);
      uint64_t v22 = 57LL;
    }

    sub_18133C488((uint64_t *)a1, v22, v20, v9, v21, (v16 - 1), a7, a8);
    goto LABEL_19;
  }

  sub_18133C488( (uint64_t *)a1,  54LL,  *(unsigned int *)(a1 + 60),  a3,  *(unsigned int *)(a1 + 52),  (v16 - 1),  a7,  a8);
  if (v10 != 1) {
    goto LABEL_19;
  }
LABEL_15:
  if (!*(_DWORD *)(v13 + 132)) {
    sub_18133A530(a1, 0LL, a3, a4, a5, a6, a7, a8);
  }
LABEL_19:
  uint64_t v77 = *(int *)(v14 + 144);
  char v24 = *(_BYTE *)(v12 + 31);
  if (!v24)
  {
    unsigned int v30 = *(_DWORD *)(v12 + 56) + 1;
    uint64_t v25 = v30;
    goto LABEL_30;
  }

  *(_BYTE *)(v12 + 31) = v24 - 1;
  uint64_t v25 = *(unsigned int *)(v12 + 4LL * (v24 - 1) + 224);
  if (v24 == 1)
  {
    unsigned int v30 = *(_DWORD *)(v12 + 56);
LABEL_30:
    uint64_t v27 = v30 + 1;
    *(_DWORD *)(v12 + 56) = v27;
    if (v10 != 2) {
      goto LABEL_25;
    }
    goto LABEL_31;
  }

  unsigned __int8 v26 = v24 - 2;
  *(_BYTE *)(v12 + 31) = v26;
  uint64_t v27 = *(unsigned int *)(v12 + 4LL * v26 + 224);
  if (v10 != 2)
  {
LABEL_25:
    if (!*(_DWORD *)(a1 + 40)) {
      goto LABEL_44;
    }
    uint64_t v28 = *(unsigned int *)(a1 + 60);
    if (*(_DWORD *)(v14 + 148) <= (int)v77)
    {
      sub_18131044C(v14, 135LL, v28, v25, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v77 + 1;
      uint64_t v29 = *(void *)(v14 + 136) + 40LL * (int)v77;
      *(_DWORD *)uint64_t v29 = 135;
      *(_DWORD *)(v29 + 4) = v28;
      *(_DWORD *)(v29 + 8) = v25;
      *(void *)(v29 + 12) = 0LL;
      *(void *)(v29 + 28) = 0LL;
      *(void *)(v29 + 20) = 0LL;
      *(_DWORD *)(v29 + 36) = 0;
    }

    a3 = *(unsigned int *)(a1 + 40);
    int v38 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v38)
    {
      *(_DWORD *)(v14 + 144) = v38 + 1;
      uint64_t v36 = *(void *)(v14 + 136) + 40LL * v38;
      *(_DWORD *)uint64_t v36 = 57;
      *(_DWORD *)(v36 + 4) = a3;
      goto LABEL_43;
    }

    uint64_t v37 = v14;
    goto LABEL_47;
  }

uint64_t sub_18133C488( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int32 v74 = a4;
  unsigned int v11 = a2;
  uint64_t v13 = *a1;
  uint64_t v14 = *(void *)(*a1 + 16);
  if (!v14)
  {
    if (!*(void *)(v13 + 168) && (*(_BYTE *)(*(void *)v13 + 96LL) & 8) == 0) {
      *(_BYTE *)(v13 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C((uint64_t *)v13, a2, a3, a4, a5, a6, a7, a8);
  }

  uint64_t v76 = *(void *)(a1[1] + 24);
  char v15 = *(_BYTE *)(v13 + 31);
  if (v15)
  {
    *(_BYTE *)(v13 + 31) = v15 - 1;
    uint64_t v16 = *(unsigned int *)(v13 + 4LL * (v15 - 1) + 224);
    if (v15 != 1)
    {
      unsigned __int8 v17 = v15 - 2;
      *(_BYTE *)(v13 + 31) = v17;
      uint64_t v18 = *(unsigned int *)(v13 + 4LL * v17 + 224);
      unsigned int v19 = *(_DWORD *)(v13 + 56);
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v16 = (*(_DWORD *)(v13 + 56) + 1);
    *(_DWORD *)(v13 + 56) = v16;
  }

  unsigned int v19 = *(_DWORD *)(v13 + 56) + 1;
  uint64_t v18 = v19;
LABEL_11:
  uint64_t v20 = v19 + 1;
  *(_DWORD *)(v13 + 56) = v20;
  int v75 = *(_DWORD *)(v13 + 68);
  unsigned int v73 = v75 - 1;
  *(_DWORD *)(v13 + 68) = v75 - 1;
  sub_18133CAD4(a1, a3, v16, a4, a5, a6, a7, a8);
  sub_18133CAD4(a1, a5, v18, v21, v22, v23, v24, v25);
  if (v11 == 54) {
    unsigned int v29 = 56;
  }
  else {
    unsigned int v29 = 57;
  }
  if (v11 == 57) {
    unsigned int v29 = 55;
  }
  if ((*(_BYTE *)(v76 + 24) & 1) != 0) {
    uint64_t v30 = 107LL;
  }
  else {
    uint64_t v30 = 106LL;
  }
  if ((*(_BYTE *)(v76 + 24) & 1) != 0) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v11;
  }
  uint64_t v32 = a6;
  if ((*(_BYTE *)(v76 + 24) & 2) != 0)
  {
    uint64_t v33 = v30;
    int v34 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v34)
    {
      int v34 = sub_18131044C(v14, 51LL, v16, 0LL, 0LL, v26, v27, v28);
      if ((_DWORD)v31 != 54) {
        goto LABEL_25;
      }
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v34 + 1;
      uint64_t v35 = *(void *)(v14 + 136) + 40LL * v34;
      *(_DWORD *)uint64_t v35 = 51;
      *(_DWORD *)(v35 + 4) = v16;
      *(_OWORD *)(v35 + 8) = 0u;
      *(_OWORD *)(v35 + 24) = 0u;
      if ((_DWORD)v31 != 54)
      {
LABEL_25:
        if ((_DWORD)v31 != 55)
        {
          if ((_DWORD)v31 != 57)
          {
LABEL_41:
            int v44 = *(_DWORD *)(v14 + 144);
            if (*(_DWORD *)(v14 + 148) <= v44)
            {
              sub_18131044C(v14, 9LL, 0LL, v73, 0LL, v26, v27, v28);
            }

            else
            {
              *(_DWORD *)(v14 + 144) = v44 + 1;
              uint64_t v45 = *(void *)(v14 + 136) + 40LL * v44;
              *(void *)uint64_t v45 = 9LL;
              *(_DWORD *)(v45 + 8) = v73;
              *(void *)(v45 + 12) = 0LL;
              *(void *)(v45 + 28) = 0LL;
              *(void *)(v45 + 20) = 0LL;
              *(_DWORD *)(v45 + 36) = 0;
            }

            int v46 = *(_DWORD *)(v14 + 144);
            if (*(_BYTE *)(*(void *)v14 + 103LL)) {
              uint64_t v47 = &byte_18C550680;
            }
            else {
              uint64_t v47 = (char *)(*(void *)(v14 + 136) + 40LL * v34);
            }
            uint64_t v30 = v33;
            *((_DWORD *)v47 + 2) = v46;
            if ((_DWORD)v31 == 57 || (_DWORD)v31 == 54) {
              uint64_t v49 = v73;
            }
            else {
              uint64_t v49 = v32;
            }
            if (*(_DWORD *)(v14 + 148) <= v46)
            {
              sub_18131044C(v14, 50LL, v18, v49, 0LL, v26, v27, v28);
            }

            else
            {
              *(_DWORD *)(v14 + 144) = v46 + 1;
              uint64_t v50 = *(void *)(v14 + 136) + 40LL * v46;
              *(_DWORD *)uint64_t v50 = 50;
              *(_DWORD *)(v50 + 4) = v18;
              *(_DWORD *)(v50 + 8) = v49;
              *(void *)(v50 + 12) = 0LL;
              *(void *)(v50 + 28) = 0LL;
              *(void *)(v50 + 20) = 0LL;
              *(_DWORD *)(v50 + 36) = 0;
            }

            goto LABEL_56;
          }

          int v36 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) > v36)
          {
            *(_DWORD *)(v14 + 144) = v36 + 1;
            uint64_t v37 = *(void *)(v14 + 136) + 40LL * v36;
            *(void *)uint64_t v37 = 9LL;
LABEL_35:
            *(_DWORD *)(v37 + 8) = v32;
            *(void *)(v37 + 12) = 0LL;
            *(void *)(v37 + 28) = 0LL;
            *(void *)(v37 + 20) = 0LL;
            *(_DWORD *)(v37 + 36) = 0;
            goto LABEL_41;
          }

          uint64_t v41 = v14;
          uint64_t v42 = 9LL;
          uint64_t v43 = 0LL;
LABEL_40:
          sub_18131044C(v41, v42, v43, v32, 0LL, v26, v27, v28);
          goto LABEL_41;
        }

        int v40 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) > v40)
        {
          *(_DWORD *)(v14 + 144) = v40 + 1;
          uint64_t v37 = *(void *)(v14 + 136) + 40LL * v40;
          int v39 = 50;
          goto LABEL_34;
        }

        uint64_t v41 = v14;
        uint64_t v42 = 50LL;
        goto LABEL_39;
      }
    }

    int v38 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v38)
    {
      *(_DWORD *)(v14 + 144) = v38 + 1;
      uint64_t v37 = *(void *)(v14 + 136) + 40LL * v38;
      int v39 = 51;
LABEL_34:
      *(_DWORD *)uint64_t v37 = v39;
      *(_DWORD *)(v37 + 4) = v18;
      goto LABEL_35;
    }

    uint64_t v41 = v14;
    uint64_t v42 = 51LL;
LABEL_39:
    uint64_t v43 = v18;
    goto LABEL_40;
  }

uint64_t *sub_18133CAD4( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result[1];
  uint64_t v9 = *(int **)(v8 + 24);
  if (v9)
  {
    int v10 = a3;
    uint64_t result = (uint64_t *)*result;
    uint64_t v12 = result[2];
    if (!v12)
    {
      if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0) {
        *((_BYTE *)result + 35) = 1;
      }
      uint64_t result = (uint64_t *)sub_1812DC63C(result, a2, a3, a4, a5, a6, a7, a8);
      uint64_t v12 = (uint64_t)result;
    }

    uint64_t v13 = *(_DWORD **)(v8 + 16);
    if (v13) {
      LODWORD(v13) = *v13;
    }
    if (*v9 >= 1)
    {
      int v14 = 0;
      int v15 = (_DWORD)v13 + *(_DWORD *)(v8 + 120);
      do
      {
        uint64_t v17 = (v15 + v14);
        uint64_t v18 = (v10 + v14);
        int v19 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) > v19)
        {
          *(_DWORD *)(v12 + 144) = v19 + 1;
          uint64_t v16 = *(void *)(v12 + 136) + 40LL * v19;
          *(_DWORD *)uint64_t v16 = 94;
          *(_DWORD *)(v16 + 4) = a2;
          *(_DWORD *)(v16 + 8) = v17;
          *(_DWORD *)(v16 + 12) = v18;
          *(void *)(v16 + 24) = 0LL;
          *(void *)(v16 + 32) = 0LL;
          *(void *)(v16 + 16) = 0LL;
        }

        else
        {
          uint64_t result = (uint64_t *)sub_18131044C(v12, 94LL, a2, v17, v18, a6, a7, a8);
        }

        ++v14;
      }

      while (v14 < *v9);
    }
  }

  return result;
}

uint64_t *sub_18133CBD4( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = *result;
  int v14 = *(uint64_t **)(*result + 16);
  if (!v14)
  {
    if (!*(void *)(v13 + 168) && (*(_BYTE *)(*(void *)v13 + 96LL) & 8) == 0) {
      *(_BYTE *)(v13 + 35) = 1;
    }
    uint64_t result = (uint64_t *)sub_1812DC63C((uint64_t *)v13, a2, a3, a4, a5, a6, a7, a8);
    int v14 = result;
  }

  if (v12)
  {
    uint64_t v15 = (v9 + 1);
    int v89 = (_DWORD *)(v13 + 44);
    if ((_DWORD)v10) {
      int v16 = 161;
    }
    else {
      int v16 = 162;
    }
    unsigned int v96 = v16;
    uint64_t v17 = v12;
    unsigned int v93 = v11;
    unsigned int v94 = v10;
    uint64_t v92 = v12;
    unsigned int v90 = v9;
    unsigned int v91 = v9 + 1;
    do
    {
      uint64_t v18 = *(void *)(v17 + 80);
      uint64_t v98 = v18;
      if (*(_BYTE *)(v17 + 140) || (uint64_t v23 = *(int **)(*(void *)(v17 + 112) + 32LL)) == 0LL)
      {
        int v19 = 0;
      }

      else
      {
        int v19 = *v23;
        if (*v23 >= 1)
        {
          for (int i = 0; v19 != i; ++i)
          {
            if (i == 1)
            {
              int v26 = *((_DWORD *)v14 + 36);
              if (*(char **)(v18 + 56) == "nth_value")
              {
                a3 = *(unsigned int *)(v12 + 88);
                a4 = (*(_DWORD *)(v17 + 124) + 1);
                if (*((_DWORD *)v14 + 37) <= v26)
                {
                  uint64_t v27 = (uint64_t)v14;
                  a5 = v15;
                  goto LABEL_34;
                }

                *((_DWORD *)v14 + 36) = v26 + 1;
                uint64_t v25 = v14[17] + 40LL * v26;
                *(_DWORD *)uint64_t v25 = 94;
                *(_DWORD *)(v25 + 4) = a3;
                *(_DWORD *)(v25 + 8) = a4;
                *(_DWORD *)(v25 + 12) = v15;
                goto LABEL_25;
              }
            }

            else
            {
              int v26 = *((_DWORD *)v14 + 36);
            }

            a4 = (i + *(_DWORD *)(v17 + 124));
            a5 = (v9 + i);
            if (*((_DWORD *)v14 + 37) <= v26)
            {
              uint64_t v27 = (uint64_t)v14;
              a3 = v11;
LABEL_34:
              uint64_t result = (uint64_t *)sub_18131044C(v27, 94LL, a3, a4, a5, a6, a7, a8);
              uint64_t v18 = v98;
              continue;
            }

            *((_DWORD *)v14 + 36) = v26 + 1;
            uint64_t v25 = v14[17] + 40LL * v26;
            *(_DWORD *)uint64_t v25 = 94;
            *(_DWORD *)(v25 + 4) = v11;
            *(_DWORD *)(v25 + 8) = a4;
            *(_DWORD *)(v25 + 12) = a5;
LABEL_25:
            *(void *)(v25 + 24) = 0LL;
            *(void *)(v25 + 32) = 0LL;
            *(void *)(v25 + 16) = 0LL;
          }
        }
      }

      if (!*(_DWORD *)(v12 + 132) && (*(_BYTE *)(v18 + 5) & 0x10) != 0 && *(_BYTE *)(v17 + 33) != 90)
      {
        int v30 = *((_DWORD *)v14 + 36);
        if (*((_DWORD *)v14 + 37) <= v30)
        {
          uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 50LL, v9, 0LL, 0LL, a6, a7, a8);
          int v30 = (int)result;
          if (!(_DWORD)v10) {
            goto LABEL_63;
          }
LABEL_42:
          uint64_t v32 = *(unsigned int *)(v17 + 100);
          int v33 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v33)
          {
            uint64_t result = (uint64_t *)sub_181310690((uint64_t)v14, 23LL, v32, 0LL, v9, 1LL, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v33 + 1;
            uint64_t v34 = v14[17] + 40LL * v33;
            *(_DWORD *)uint64_t v34 = 64791;
            *(_DWORD *)(v34 + 4) = v32;
            *(_DWORD *)(v34 + 8) = 0;
            *(_DWORD *)(v34 + 12) = v9;
            *(_DWORD *)(v34 + 16) = 1;
            *(void *)(v34 + 24) = 0LL;
            *(void *)(v34 + 32) = 0LL;
          }

          a3 = *(unsigned int *)(v17 + 100);
          int v51 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v51)
          {
            uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 130LL, a3, 0LL, 0LL, a6, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v51 + 1;
            uint64_t v52 = v14[17] + 40LL * v51;
            *(_DWORD *)uint64_t v52 = 130;
            *(_DWORD *)(v52 + 4) = a3;
            a9 = 0uLL;
            *(_OWORD *)(v52 + 8) = 0u;
            *(_OWORD *)(v52 + 24) = 0u;
          }

          int v53 = *((_DWORD *)v14 + 36);
          uint64_t v54 = &byte_18C550680;
          if (!*(_BYTE *)(*v14 + 103)) {
            uint64_t v54 = (char *)(v14[17] + 40LL * (v53 - 2));
          }
          *((_DWORD *)v54 + 2) = v53;
        }

        else
        {
          *((_DWORD *)v14 + 36) = v30 + 1;
          uint64_t v31 = v14[17] + 40LL * v30;
          *(_DWORD *)uint64_t v31 = 50;
          *(_DWORD *)(v31 + 4) = v9;
          a9 = 0uLL;
          *(_OWORD *)(v31 + 8) = 0u;
          *(_OWORD *)(v31 + 24) = 0u;
          if ((_DWORD)v10) {
            goto LABEL_42;
          }
LABEL_63:
          uint64_t v48 = (*(_DWORD *)(v17 + 104) + 1);
          int v49 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v49)
          {
            uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 86LL, v48, 1LL, 0LL, a6, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v49 + 1;
            uint64_t v50 = v14[17] + 40LL * v49;
            *(_DWORD *)uint64_t v50 = 86;
            *(_DWORD *)(v50 + 4) = v48;
            *(_DWORD *)(v50 + 8) = 1;
            *(void *)(v50 + 12) = 0LL;
            *(void *)(v50 + 28) = 0LL;
            *(void *)(v50 + 20) = 0LL;
            *(_DWORD *)(v50 + 36) = 0;
          }

          uint64_t v80 = *(unsigned int *)(v17 + 104);
          int v81 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v81)
          {
            uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 81LL, v9, v80, 0LL, a6, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v81 + 1;
            uint64_t v82 = v14[17] + 40LL * v81;
            *(_DWORD *)uint64_t v82 = 81;
            *(_DWORD *)(v82 + 4) = v9;
            *(_DWORD *)(v82 + 8) = v80;
            *(void *)(v82 + 12) = 0LL;
            *(void *)(v82 + 28) = 0LL;
            *(void *)(v82 + 20) = 0LL;
            *(_DWORD *)(v82 + 36) = 0;
          }

          uint64_t v83 = *(unsigned int *)(v17 + 104);
          a5 = (v83 + 2);
          int v84 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v84)
          {
            uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 97LL, v83, 2LL, a5, a6, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v84 + 1;
            uint64_t v85 = v14[17] + 40LL * v84;
            *(_DWORD *)uint64_t v85 = 97;
            *(_DWORD *)(v85 + 4) = v83;
            *(_DWORD *)(v85 + 8) = 2;
            *(_DWORD *)(v85 + 12) = a5;
            *(void *)(v85 + 24) = 0LL;
            *(void *)(v85 + 32) = 0LL;
            *(void *)(v85 + 16) = 0LL;
          }

          a3 = *(unsigned int *)(v17 + 100);
          a4 = (*(_DWORD *)(v17 + 104) + 2);
          int v86 = *((_DWORD *)v14 + 36);
          if (*((_DWORD *)v14 + 37) <= v86)
          {
            uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 138LL, a3, a4, 0LL, a6, a7, a8);
          }

          else
          {
            *((_DWORD *)v14 + 36) = v86 + 1;
            uint64_t v87 = v14[17] + 40LL * v86;
            *(_DWORD *)uint64_t v87 = 138;
            *(_DWORD *)(v87 + 4) = a3;
            *(_DWORD *)(v87 + 8) = a4;
            *(void *)(v87 + 12) = 0LL;
            *(void *)(v87 + 28) = 0LL;
            *(void *)(v87 + 20) = 0LL;
            *(_DWORD *)(v87 + 36) = 0;
          }
        }

        int v88 = &byte_18C550680;
        if (!*(_BYTE *)(*v14 + 103)) {
          int v88 = (char *)(v14[17] + 40LL * v30);
        }
        *((_DWORD *)v88 + 2) = *((_DWORD *)v14 + 36);
        goto LABEL_12;
      }

      int v20 = *(_DWORD *)(v17 + 104);
      if (v20)
      {
        a3 = (v20 - v10 + 1);
        int v21 = *((_DWORD *)v14 + 36);
        if (*((_DWORD *)v14 + 37) <= v21)
        {
          uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v14, 86LL, a3, 1LL, 0LL, a6, a7, a8);
        }

        else
        {
          *((_DWORD *)v14 + 36) = v21 + 1;
          uint64_t v22 = v14[17] + 40LL * v21;
          *(_DWORD *)uint64_t v22 = 86;
          *(_DWORD *)(v22 + 4) = a3;
          *(_DWORD *)(v22 + 8) = 1;
          *(void *)(v22 + 12) = 0LL;
          *(void *)(v22 + 28) = 0LL;
          *(void *)(v22 + 20) = 0LL;
          *(_DWORD *)(v22 + 36) = 0;
        }
      }

      else if (*(uint64_t (**)())(v18 + 24) != nullsub_9)
      {
        if (!*(void *)(v17 + 72))
        {
          int v97 = 0;
          goto LABEL_55;
        }

        if (*(_BYTE *)(v13 + 31))
        {
          unsigned __int8 v28 = *(_BYTE *)(v13 + 31) - 1;
          *(_BYTE *)(v13 + 31) = v28;
          uint64_t v29 = *(unsigned int *)(v13 + 4LL * v28 + 224);
        }

        else
        {
          uint64_t v29 = (*(_DWORD *)(v13 + 56) + 1);
          *(_DWORD *)(v13 + 56) = v29;
        }

        a4 = (*(_DWORD *)(v17 + 124) + v19);
        int v35 = *((_DWORD *)v14 + 36);
        if (*((_DWORD *)v14 + 37) <= v35)
        {
          sub_18131044C((uint64_t)v14, 94LL, v11, a4, v29, a6, a7, a8);
        }

        else
        {
          *((_DWORD *)v14 + 36) = v35 + 1;
          uint64_t v36 = v14[17] + 40LL * v35;
          *(_DWORD *)uint64_t v36 = 94;
          *(_DWORD *)(v36 + 4) = v11;
          *(_DWORD *)(v36 + 8) = a4;
          *(_DWORD *)(v36 + 12) = v29;
          *(void *)(v36 + 24) = 0LL;
          *(void *)(v36 + 32) = 0LL;
          *(void *)(v36 + 16) = 0LL;
        }

        int v37 = *((_DWORD *)v14 + 36);
        if (*((_DWORD *)v14 + 37) <= v37)
        {
          int v97 = sub_18131044C((uint64_t)v14, 17LL, v29, 0LL, 1LL, a6, a7, a8);
          uint64_t v18 = v98;
          if (!(_DWORD)v29) {
            goto LABEL_55;
          }
        }

        else
        {
          int v97 = *((_DWORD *)v14 + 36);
          *((_DWORD *)v14 + 36) = v37 + 1;
          uint64_t v38 = v14[17] + 40LL * v37;
          *(_DWORD *)uint64_t v38 = 17;
          *(_DWORD *)(v38 + 4) = v29;
          *(void *)(v38 + 8) = 0x100000000LL;
          *(void *)(v38 + 24) = 0LL;
          *(void *)(v38 + 32) = 0LL;
          *(void *)(v38 + 16) = 0LL;
          uint64_t v18 = v98;
          if (!(_DWORD)v29) {
            goto LABEL_55;
          }
        }

        uint64_t v39 = *(unsigned __int8 *)(v13 + 31);
        if (v39 <= 7)
        {
          *(_BYTE *)(v13 + 31) = v39 + 1;
          *(_DWORD *)(v13 + 4 * v39 + 224) = v29;
        }

uint64_t sub_18133D5A8( uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v48 = a4;
  if (a2 == 1) {
    return 0LL;
  }
  uint64_t v8 = a6;
  uint64_t v10 = *a5;
  uint64_t v11 = *(void *)(a1 + 16);
  if (a2 == 2)
  {
    int v12 = *(_DWORD *)(a1 + 56);
    uint64_t v13 = (v12 + 1);
    *(_DWORD *)(a1 + 56) = v12 + v10;
    int v14 = *(_DWORD *)(v11 + 144);
    unint64_t v15 = (v10 - 1);
    if ((int)v10 >= 1)
    {
      unint64_t v16 = 0LL;
      unsigned int v46 = a6;
      unsigned int v47 = v14 + v10;
      uint64_t v17 = (unsigned __int8 **)(a5 + 2);
      unsigned int v18 = a6;
      while (1)
      {
        int v19 = (char *)sub_181289D04(a1, *v17, a3, a4, (uint64_t)a5, a6, a7, a8);
        a3 = v18 + v16;
        a5 = (unsigned int *)(v13 + v16);
        int v20 = *(_DWORD *)(v11 + 148);
        int v21 = *(_DWORD *)(v11 + 144);
        if (v16 >= v15)
        {
          if (v20 <= v21)
          {
            uint64_t v24 = v11;
            uint64_t v25 = 53LL;
            uint64_t v26 = v48;
            goto LABEL_14;
          }

          *(_DWORD *)(v11 + 144) = v21 + 1;
          uint64_t v22 = *(void *)(v11 + 136) + 40LL * v21;
          *(_DWORD *)uint64_t v22 = 53;
          *(_DWORD *)(v22 + 4) = a3;
          unsigned int v23 = v48;
        }

        else
        {
          if (v20 <= v21)
          {
            uint64_t v24 = v11;
            uint64_t v25 = 52LL;
            uint64_t v26 = v47;
LABEL_14:
            sub_18131044C(v24, v25, a3, v26, (uint64_t)a5, a6, a7, a8);
            goto LABEL_15;
          }

          *(_DWORD *)(v11 + 144) = v21 + 1;
          uint64_t v22 = *(void *)(v11 + 136) + 40LL * v21;
          *(_DWORD *)uint64_t v22 = 52;
          *(_DWORD *)(v22 + 4) = a3;
          unsigned int v23 = v47;
        }

        *(_DWORD *)(v22 + 8) = v23;
        *(_DWORD *)(v22 + 12) = (_DWORD)a5;
        *(void *)(v22 + 24) = 0LL;
        *(void *)(v22 + 32) = 0LL;
        *(void *)(v22 + 16) = 0LL;
LABEL_15:
        if (!*(_BYTE *)(*(void *)v11 + 103LL))
        {
          uint64_t v27 = *(int *)(v11 + 144) - 1LL;
          uint64_t v28 = *(void *)(v11 + 136);
          uint64_t v29 = v28 + 40 * v27;
          int v31 = *(unsigned __int8 *)(v29 + 1);
          int v30 = (_BYTE *)(v29 + 1);
          if (v31)
          {
            sub_181310724((uint64_t *)v11, v28 + 40 * v27, v19, 0xFFFFFFFE);
          }

          else if (v19)
          {
            *(void *)(v28 + 40 * v27 + 16) = v19;
            *int v30 = -2;
          }
        }

        int v14 = *(_DWORD *)(v11 + 144);
        if (v14 >= 1) {
          *(_WORD *)(*(void *)(v11 + 136) + 40LL * (v14 - 1) + 2) = 128;
        }
        ++v16;
        v17 += 3;
        if (v10 == v16)
        {
          uint64_t v8 = v46;
          break;
        }
      }
    }

    if (*(_DWORD *)(v11 + 148) <= v14)
    {
      sub_18131044C(v11, 80LL, v8, v13, (v10 - 1), a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v14 + 1;
      uint64_t v34 = *(void *)(v11 + 136) + 40LL * v14;
      *(_DWORD *)uint64_t v34 = 80;
      *(_DWORD *)(v34 + 4) = v8;
      *(_DWORD *)(v34 + 8) = v13;
      *(_DWORD *)(v34 + 12) = v15;
      *(void *)(v34 + 24) = 0LL;
      *(void *)(v34 + 32) = 0LL;
      *(void *)(v34 + 16) = 0LL;
    }
  }

  else
  {
    uint64_t v13 = a3;
    if (*(_BYTE *)(a1 + 31))
    {
      unsigned __int8 v32 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v32;
      uint64_t v33 = *(unsigned int *)(a1 + 4LL * v32 + 224);
    }

    else
    {
      uint64_t v33 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v33;
    }

    int v35 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v35)
    {
      sub_181310690(v11, 29LL, a3, a4, a6, v10, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v35 + 1;
      uint64_t v36 = *(void *)(v11 + 136) + 40LL * v35;
      *(_DWORD *)uint64_t v36 = 64797;
      *(_DWORD *)(v36 + 4) = a3;
      *(_DWORD *)(v36 + 8) = a4;
      *(_DWORD *)(v36 + 12) = a6;
      *(_DWORD *)(v36 + 16) = v10;
      *(void *)(v36 + 24) = 0LL;
      *(void *)(v36 + 32) = 0LL;
    }

    int v37 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v37)
    {
      sub_18131044C(v11, 97LL, v8, v10, v33, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v37 + 1;
      uint64_t v38 = *(void *)(v11 + 136) + 40LL * v37;
      *(_DWORD *)uint64_t v38 = 97;
      *(_DWORD *)(v38 + 4) = v8;
      *(_DWORD *)(v38 + 8) = v10;
      *(_DWORD *)(v38 + 12) = v33;
      *(void *)(v38 + 24) = 0LL;
      *(void *)(v38 + 32) = 0LL;
      *(void *)(v38 + 16) = 0LL;
    }

    int v39 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v39)
    {
      sub_181310690(v11, 138LL, v13, v33, v8, v10, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v39 + 1;
      uint64_t v40 = *(void *)(v11 + 136) + 40LL * v39;
      *(_DWORD *)uint64_t v40 = 64906;
      *(_DWORD *)(v40 + 4) = v13;
      *(_DWORD *)(v40 + 8) = v33;
      *(_DWORD *)(v40 + 12) = v8;
      *(_DWORD *)(v40 + 16) = v10;
      *(void *)(v40 + 24) = 0LL;
      *(void *)(v40 + 32) = 0LL;
    }

    int v41 = *(_DWORD *)(v11 + 144);
    BOOL v42 = __OFSUB__(v41, 1);
    int v43 = v41 - 1;
    if (v43 < 0 == v42) {
      *(_WORD *)(*(void *)(v11 + 136) + 40LL * v43 + 2) = 16;
    }
    if ((_DWORD)v33)
    {
      uint64_t v44 = *(unsigned __int8 *)(a1 + 31);
      if (v44 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v44 + 1;
        *(_DWORD *)(a1 + 4 * v44 + 224) = v33;
      }
    }
  }

  return v13;
}

void *sub_18133D940( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v8) = a2;
  uint64_t v10 = (uint64_t *)*a1;
  uint64_t v11 = *(void *)(*a1 + 16LL);
  uint64_t v69 = *(void *)(a3 + 96);
  uint64_t v70 = *(unsigned int **)(a3 + 56);
  uint64_t v74 = a1[1];
  unsigned int v73 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v12 = v74 + 104LL * *(unsigned __int8 *)(a3 + 64);
  uint64_t v71 = (uint64_t *)(v12 + 40);
  uint64_t v13 = (__int128 *)(v12 + 8);
  sub_18131CCF8((uint64_t *)*a1, 1, "RIGHT-JOIN %s", a4, a5, a6, a7, a8, **(void **)(v12 + 40));
  if ((int)v8 >= 1)
  {
    uint64_t v17 = 0LL;
    unsigned int v18 = (unsigned int *)a1 + 215;
    uint64_t v8 = v8;
    while (1)
    {
      uint64_t v20 = *(void *)(*(void *)(v18 + 23) + 8LL);
      uint64_t v21 = *v18;
      int v22 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v22)
      {
        sub_18131044C(v11, 136LL, v21, 0LL, 0LL, v14, v15, v16);
        uint64_t v24 = v18[1];
        if ((_DWORD)v24)
        {
LABEL_9:
          int v25 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) > v25)
          {
            *(_DWORD *)(v11 + 144) = v25 + 1;
            uint64_t v19 = *(void *)(v11 + 136) + 40LL * v25;
            *(_DWORD *)uint64_t v19 = 136;
            *(_DWORD *)(v19 + 4) = v24;
            *(_OWORD *)(v19 + 8) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
          }

          else
          {
            sub_18131044C(v11, 136LL, v24, 0LL, 0LL, v14, v15, v16);
          }
        }
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v22 + 1;
        uint64_t v23 = *(void *)(v11 + 136) + 40LL * v22;
        *(_DWORD *)uint64_t v23 = 136;
        *(_DWORD *)(v23 + 4) = v21;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        uint64_t v24 = v18[1];
        if ((_DWORD)v24) {
          goto LABEL_9;
        }
      }

      v17 |= v20;
      v18 += 30;
      if (!--v8) {
        goto LABEL_12;
      }
    }
  }

  uint64_t v17 = 0LL;
LABEL_12:
  if ((*(_BYTE *)(v74 + 104LL * v73 + 68) & 0x40) != 0 || (int v26 = *((_DWORD *)a1 + 31), v26 < 1))
  {
    uint64_t v29 = 0LL;
  }

  else
  {
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = ~(*(void *)(v69 + 8) | v17);
    do
    {
      uint64_t v31 = a1[17] + v27;
      if ((*(_WORD *)(v31 + 18) & 0x8002) != 0 && *(_WORD *)(v31 + 20) != 0x2000) {
        break;
      }
      if ((*(void *)(v31 + 48) & v30) == 0 && (*(_BYTE *)(*(void *)v31 + 4LL) & 3) == 0)
      {
        unsigned __int8 v32 = sub_18129C928(*v10, *(unsigned __int8 **)v31, 0LL, 0LL);
        uint64_t v29 = (unsigned __int8 *)sub_1813152F8(v10, (uint64_t)v29, (uint64_t)v32);
        int v26 = *((_DWORD *)a1 + 31);
      }

      ++v28;
      v27 += 56LL;
    }

    while (v28 < v26);
  }

  uint64_t v76 = 0x100000001LL;
  __int128 v34 = v13[4];
  __int128 v33 = v13[5];
  uint64_t v35 = *((void *)v13 + 12);
  __int128 v80 = v13[3];
  __int128 v36 = *v13;
  __int128 v37 = v13[2];
  __int128 v78 = v13[1];
  __int128 v79 = v37;
  uint64_t v83 = v35;
  __int128 v81 = v34;
  __int128 v82 = v33;
  __int128 v77 = v36;
  BYTE12(v80) = 0;
  ++*((_BYTE *)v10 + 38);
  uint64_t result = (void *)sub_18128A51C(v10, &v76, v29, 0LL, 0LL, 0LL, 4096LL, 0LL);
  if (result)
  {
    int v43 = result;
    uint64_t v44 = *(unsigned int *)(a3 + 4);
    int v45 = *((_DWORD *)v10 + 14);
    uint64_t v46 = (v45 + 1);
    *((_DWORD *)v10 + 14) = v46;
    uint64_t v47 = *((unsigned int *)result + 12);
    uint64_t v48 = *v71;
    if ((*(_BYTE *)(*v71 + 48) & 0x80) != 0)
    {
      unsigned int v75 = *((_DWORD *)result + 12);
      for (uint64_t i = *(void *)(v48 + 16); i; uint64_t i = *(void *)(i + 40))
      {
        if ((*(_WORD *)(i + 99) & 3) == 2) {
          break;
        }
      }

      uint64_t v52 = *(unsigned __int16 *)(i + 94);
      *((_DWORD *)v10 + 14) = v45 + v52;
      if ((_DWORD)v52)
      {
        for (uint64_t j = 0LL; j != v52; ++j)
          *(double *)v42.i64 = sub_18131C0EC( v11,  v48,  v44,  *(__int16 *)(*(void *)(i + 8) + 2 * j),  (v46 + j),  v39,  v40,  v41,  v42);
      }

      uint64_t v54 = v70;
      uint64_t v47 = v75;
    }

    else
    {
      int v49 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v49)
      {
        sub_18131044C(v11, 135LL, v44, v46, 0LL, v39, v40, v41);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v49 + 1;
        uint64_t v50 = *(void *)(v11 + 136) + 40LL * v49;
        *(_DWORD *)uint64_t v50 = 135;
        *(_DWORD *)(v50 + 4) = v44;
        *(_DWORD *)(v50 + 8) = v46;
        *(void *)(v50 + 12) = 0LL;
        *(void *)(v50 + 28) = 0LL;
        *(void *)(v50 + 20) = 0LL;
        *(_DWORD *)(v50 + 36) = 0;
      }

      uint64_t v52 = 1LL;
      uint64_t v54 = v70;
    }

    uint64_t v55 = v54[1];
    int v56 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v56)
    {
      int v56 = sub_181310690(v11, 64LL, v55, 0LL, v46, v52, v40, v41);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v56 + 1;
      uint64_t v57 = *(void *)(v11 + 136) + 40LL * v56;
      *(_DWORD *)uint64_t v57 = 64832;
      *(_DWORD *)(v57 + 4) = v55;
      *(_DWORD *)(v57 + 8) = 0;
      *(_DWORD *)(v57 + 12) = v46;
      *(_DWORD *)(v57 + 16) = v52;
      *(void *)(v57 + 24) = 0LL;
      *(void *)(v57 + 32) = 0LL;
    }

    uint64_t v58 = *v54;
    int v59 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v59)
    {
      sub_181310690(v11, 29LL, v58, v47, v46, v52, v40, v41);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v59 + 1;
      uint64_t v60 = *(void *)(v11 + 136) + 40LL * v59;
      *(_DWORD *)uint64_t v60 = 64797;
      *(_DWORD *)(v60 + 4) = v58;
      *(_DWORD *)(v60 + 8) = v47;
      *(_DWORD *)(v60 + 12) = v46;
      *(_DWORD *)(v60 + 16) = v52;
      *(void *)(v60 + 24) = 0LL;
      *(void *)(v60 + 32) = 0LL;
    }

    int v61 = *(_DWORD *)(v11 + 144);
    if (*(_BYTE *)(*(void *)v11 + 103LL)) {
      uint64_t v62 = &byte_18C550680;
    }
    else {
      uint64_t v62 = (char *)(*(void *)(v11 + 136) + 40LL * v56);
    }
    *((_DWORD *)v62 + 2) = v61;
    uint64_t v63 = v54[2];
    uint64_t v64 = v54[3];
    if (*(_DWORD *)(v11 + 148) <= v61)
    {
      sub_18131044C(v11, 10LL, v63, v64, 0LL, v39, v40, v41);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v61 + 1;
      uint64_t v65 = *(void *)(v11 + 136) + 40LL * v61;
      *(_DWORD *)uint64_t v65 = 10;
      *(_DWORD *)(v65 + 4) = v63;
      *(_DWORD *)(v65 + 8) = v64;
      *(void *)(v65 + 12) = 0LL;
      *(void *)(v65 + 28) = 0LL;
      *(void *)(v65 + 20) = 0LL;
      *(_DWORD *)(v65 + 36) = 0;
    }

    uint64_t result = (void *)sub_18128E90C(v43);
  }

  if (v29) {
    uint64_t result = sub_181309110((void *)*v10, v29);
  }
  int v66 = *((_DWORD *)v10 + 78);
  if (v66)
  {
    uint64_t v67 = (void *)v10[2];
    if (*(_BYTE *)(*v67 + 103LL)) {
      uint64_t v68 = &byte_18C550680;
    }
    else {
      uint64_t v68 = (char *)(v67[17] + 40LL * v66);
    }
    int v66 = *((_DWORD *)v68 + 2);
  }

  *((_DWORD *)v10 + 78) = v66;
  --*((_BYTE *)v10 + 38);
  return result;
}

uint64_t sub_18133DE6C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a2 == 44) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = *(uint64_t **)a1;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v2 = 1LL;
  WORD2(v20) = 1;
  *((void *)&v18 + 1) = sub_18132AC7C;
  *(void *)&__int128 v19 = 0LL;
  *((void *)&v20 + 1) = v7;
  *(void *)&__int128 v18 = v6;
  sub_18131C57C((uint64_t)&v18, a2);
  if (WORD2(v20))
  {
    if ((*(_DWORD *)(a2 + 4) & 0x20000001) != 0x20000000 && !*(void *)(a2 + 64))
    {
      uint64_t v8 = **(void **)a1;
      *(void *)&__int128 v18 = "1";
      DWORD2(v18) = 1;
      uint64_t v9 = (__int128 *)sub_18127F5B0(v8, 155, (uint64_t)&v18, 0);
      if (v9)
      {
        uint64_t v10 = *(void *)(v5 + 48);
        __int128 v19 = v9[1];
        __int128 v20 = v9[2];
        __int128 v21 = v9[3];
        __int128 v22 = v9[4];
        __int128 v18 = *v9;
        *uint64_t v9 = *(_OWORD *)a2;
        __int128 v11 = *(_OWORD *)(a2 + 64);
        __int128 v13 = *(_OWORD *)(a2 + 16);
        __int128 v12 = *(_OWORD *)(a2 + 32);
        v9[3] = *(_OWORD *)(a2 + 48);
        v9[4] = v11;
        v9[1] = v13;
        v9[2] = v12;
        __int128 v14 = v22;
        __int128 v15 = v20;
        *(_OWORD *)(a2 + 48) = v21;
        *(_OWORD *)(a2 + 64) = v14;
        __int128 v16 = v19;
        *(_OWORD *)a2 = v18;
        *(_OWORD *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 32) = v15;
        *(void *)(v5 + 48) = sub_1813152F8(*(uint64_t **)a1, v10, (uint64_t)v9);
        *(_WORD *)(a1 + 36) = 1;
      }
    }
  }

  return v2;
}

uint64_t *sub_18133DFA8(uint64_t *result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = (int *)(a2 + 32);
  int v6 = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 24);
  if (v6 < 1)
  {
LABEL_9:
    uint64_t result = (uint64_t *)sub_1812A02FC(*result, v7, v5, &v22);
    *(void *)(a2 + 24) = result;
    LOWORD(v8) = v22;
    if ((v22 & 0x80000000) == 0)
    {
      __int128 v11 = &result[3 * v22];
      uint64_t v12 = *((void *)a3 + 9);
      int v13 = *((_DWORD *)a3 + 11);
      int v14 = *((_DWORD *)a3 + 12);
      *((_DWORD *)v11 + 4) = v13;
      *((_WORD *)v11 + 10) = v14;
      __int128 v15 = (_WORD *)v11 + 11;
      *__int128 v11 = v12;
      v11[1] = (uint64_t)a3;
      __int128 v16 = *(_DWORD **)(a2 + 16);
      if (!v16) {
        goto LABEL_19;
      }
      if (*a3 == 179) {
        goto LABEL_19;
      }
      int v17 = *v16;
      int v18 = 0;
      __int128 v19 = (unsigned __int8 **)(v16 + 2);
      while (1)
      {
        uint64_t v20 = (uint64_t)*v19;
        if (**v19 == 167 && *(_DWORD *)(v20 + 44) == v13 && *(_DWORD *)(v20 + 48) == v14) {
          break;
        }
        ++v18;
        v19 += 3;
        if (v17 == v18) {
          goto LABEL_19;
        }
      }

      *__int128 v15 = v18;
      if ((v18 & 0x8000) != 0)
      {
LABEL_19:
        __int16 v21 = *(_WORD *)(a2 + 2);
        *(_WORD *)(a2 + 2) = v21 + 1;
        *__int128 v15 = v21;
      }

      int v10 = *a3;
LABEL_21:
      *((void *)a3 + 8) = a2;
      if (v10 == 167) {
        *a3 = -87;
      }
      *((_WORD *)a3 + 26) = v8;
    }
  }

  else
  {
    int v8 = 0;
    uint64_t v9 = (__int16 *)v7 + 10;
    while (*(unsigned __int8 **)(v9 - 6) != a3)
    {
      if (*((_DWORD *)v9 - 1) == *((_DWORD *)a3 + 11) && *((_DWORD *)a3 + 12) == *v9)
      {
        int v10 = *a3;
        if (v10 != 179) {
          goto LABEL_21;
        }
      }

      ++v8;
      v9 += 12;
      if (v6 == v8) {
        goto LABEL_9;
      }
    }
  }

  return result;
}

uint64_t sub_18133E10C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  if (!v2) {
    return 0LL;
  }
  int v5 = *((__int16 *)a2 + 26);
  if (*(_DWORD *)(v2 + 32) <= v5) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(v2 + 24);
  *a2 = -87;
  uint64_t v7 = v6 + 24LL * v5;
  int v8 = *(_DWORD *)(v7 + 16);
  LODWORD(v7) = *(__int16 *)(v7 + 20);
  *((_DWORD *)a2 + 11) = v8;
  *((_DWORD *)a2 + 12) = v7;
  *((_DWORD *)a2 + 1) &= 0xFFF7DDFF;
  return 1LL;
}

void *sub_18133E190(void *a1, unsigned __int8 *a2)
{
  __int16 v4 = (void *)sub_1812F2264((uint64_t)a1, 0x80uLL);
  int v5 = v4;
  if (v4)
  {
    *__int16 v4 = 0x400000001LL;
    v4[2] = 0LL;
    v4[3] = 0LL;
    v4[1] = a2;
  }

  else if (a2)
  {
    sub_181309110(a1, a2);
  }

  return v5;
}

_DWORD *sub_18133E1F4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  uint64_t v6 = (int)a2[1];
  a2[1] = 2 * v6;
  unint64_t v7 = (48 * v6) | 8;
  if (*(void *)(a1 + 512) > (unint64_t)a2)
  {
    if (*(void *)(a1 + 496) <= (unint64_t)a2)
    {
      if (v7 < 0x81)
      {
LABEL_5:
        uint64_t result = a2;
LABEL_8:
        int v9 = (*result)++;
        int v10 = &result[6 * v9];
        v10[2] = 0LL;
        v10[3] = 0LL;
        v10[1] = a3;
        return result;
      }
    }

    else if (*(void *)(a1 + 504) <= (unint64_t)a2 && v7 <= *(unsigned __int16 *)(a1 + 438))
    {
      goto LABEL_5;
    }
  }

  uint64_t result = (_DWORD *)sub_1812F2310(a1, a2, v7);
  if (result) {
    goto LABEL_8;
  }
  sub_181311F48((void *)a1, a2);
  if (a3) {
    sub_181309110((void *)a1, a3);
  }
  return 0LL;
}

unsigned __int8 *sub_18133E2C8( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a5;
  int v9 = (void *)a4;
  int v10 = (unsigned __int8 *)a3;
  uint64_t v12 = (void *)*a1;
  if (!a4 || a5)
  {
    if (!a5) {
      return v10;
    }
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v76 = v13;
    if ((*(_BYTE *)(v13 + 48) & 0x80) == 0)
    {
      uint64_t v14 = sub_1812F2264((uint64_t)v12, 0x50uLL);
      uint64_t v21 = v14;
      if (v14)
      {
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)uint64_t v14 = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_BYTE *)uint64_t v14 = 75;
        *(_WORD *)(v14 + 52) = -1;
        *(_DWORD *)(v14 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v15,  v16,  v17,  v18,  v19,  v20,  *(_DWORD *)(*a1 + 148));
        }
      }

      uint64_t v22 = sub_1812F2264(*a1, 0x50uLL);
      uint64_t v29 = (unsigned __int8 *)v22;
      if (v22)
      {
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_BYTE *)uint64_t v22 = 75;
        *(_WORD *)(v22 + 52) = -1;
        *(_DWORD *)(v22 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v23,  v24,  v25,  v26,  v27,  v28,  *(_DWORD *)(*a1 + 148));
        }
      }

      uint64_t v30 = sub_18133E190((void *)*a1, v29);
LABEL_59:
      *(void *)(a2 + 40) = 0LL;
      int v61 = sub_18129F858((uint64_t)v12, (int *)a2, 0);
      *(void *)(a2 + 40) = v76;
      __int16 v62 = *(_WORD *)(a2 + 69);
      if ((v62 & 2) != 0)
      {
        *(void *)(a2 + 104) = 0LL;
        *(_WORD *)(a2 + 69) = v62 & 0xFFFD;
        uint64_t v63 = *(void **)(a2 + 96);
        if (v63) {
          sub_1812F20DC(v12, v63);
        }
      }

      else if ((*(_WORD *)(a2 + 69) & 0x100) != 0)
      {
        ++**(_DWORD **)(a2 + 104);
      }

      uint64_t v64 = sub_181280000((void **)a1, v30, v61, (uint64_t)v10, 0LL, 0LL, (uint64_t)v9, 0, v8);
      uint64_t v65 = sub_1813132BC(a1, 49, v21, 0LL);
      if (v65)
      {
        int v10 = (unsigned __int8 *)v65;
        *(void *)(v65 + 32) = v64;
        *(_DWORD *)(v65 + 4) |= 0x401000u;
        sub_181315710(a1, v65, v66, v67, v68, v69, v70, v71);
        return v10;
      }

      if (v64) {
        sub_18128FDA0((void *)*a1, (uint64_t)v64, 1);
      }
      return 0LL;
    }

    for (uint64_t i = *(void *)(v13 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }

    if (!*(_WORD *)(i + 94))
    {
      uint64_t v30 = 0LL;
      uint64_t v35 = *a1;
LABEL_40:
      uint64_t v46 = sub_1812F2264(v35, 0x50uLL);
      uint64_t v21 = v46;
      uint64_t v8 = a5;
      if (v46)
      {
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)uint64_t v46 = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
        *(_BYTE *)uint64_t v46 = -79;
        *(_WORD *)(v46 + 52) = -1;
        *(_DWORD *)(v46 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v47,  v48,  v49,  v50,  v51,  v52,  *(_DWORD *)(*a1 + 148));
        }
        *(void *)(v21 + 32) = sub_18129CD4C((uint64_t)v12, v30, 0);
      }

      goto LABEL_59;
    }

    if (*(_WORD *)(i + 94) == 1)
    {
      uint64_t v32 = *(void *)(v13 + 8);
      __int128 v33 = *(const void **)(v32 + 16LL * **(__int16 **)(i + 8));
      if (v33) {
        unsigned int v34 = strlen(*(const char **)(v32 + 16LL * **(__int16 **)(i + 8))) & 0x3FFFFFFF;
      }
      else {
        unsigned int v34 = 0;
      }
      uint64_t v53 = sub_1812F2264((uint64_t)v12, v34 + 81);
      uint64_t v21 = v53;
      if (v53)
      {
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_OWORD *)(v53 + 32) = 0u;
        *(_OWORD *)uint64_t v53 = 0u;
        *(_BYTE *)uint64_t v53 = 59;
        *(_WORD *)(v53 + 52) = -1;
        uint64_t v54 = v53 + 80;
        *(void *)(v53 + 8) = v53 + 80;
        if (v34)
        {
          uint64_t v55 = v34;
          memcpy((void *)(v53 + 80), v33, v34);
        }

        else
        {
          uint64_t v55 = 0LL;
        }

        *(_BYTE *)(v54 + v55) = 0;
        *(_DWORD *)(v21 + 40) = 1;
      }

      if (v33) {
        unsigned int v56 = strlen((const char *)v33) & 0x3FFFFFFF;
      }
      else {
        unsigned int v56 = 0;
      }
      uint64_t v57 = sub_1812F2264((uint64_t)v12, v56 + 81);
      uint64_t v58 = v57;
      if (v57)
      {
        *(_OWORD *)(v57 + 48) = 0u;
        *(_OWORD *)(v57 + 64) = 0u;
        *(_OWORD *)(v57 + 16) = 0u;
        *(_OWORD *)(v57 + 32) = 0u;
        *(_OWORD *)uint64_t v57 = 0u;
        *(_BYTE *)uint64_t v57 = 59;
        *(_WORD *)(v57 + 52) = -1;
        uint64_t v59 = v57 + 80;
        *(void *)(v57 + 8) = v57 + 80;
        if (v56)
        {
          uint64_t v60 = v56;
          memcpy((void *)(v57 + 80), v33, v56);
        }

        else
        {
          uint64_t v60 = 0LL;
        }

        *(_BYTE *)(v59 + v60) = 0;
        *(_DWORD *)(v58 + 40) = 1;
      }

      uint64_t v30 = sub_18133E190((void *)*a1, (unsigned __int8 *)v58);
      uint64_t v8 = a5;
      goto LABEL_59;
    }

    uint64_t v36 = 0LL;
    uint64_t v30 = 0LL;
    while (1)
    {
      uint64_t v38 = *(void *)(v13 + 8);
      uint64_t v39 = *(const void **)(v38 + 16LL * *(__int16 *)(*(void *)(i + 8) + 2 * v36));
      if (v39) {
        size_t v40 = strlen(*(const char **)(v38 + 16LL * *(__int16 *)(*(void *)(i + 8) + 2 * v36))) & 0x3FFFFFFF;
      }
      else {
        size_t v40 = 0LL;
      }
      uint64_t v41 = sub_1812F2264((uint64_t)v12, v40 + 81);
      uint64_t v42 = v41;
      if (v41)
      {
        *(_OWORD *)(v41 + 48) = 0u;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)uint64_t v41 = 0u;
        *(_BYTE *)uint64_t v41 = 59;
        *(_WORD *)(v41 + 52) = -1;
        uint64_t v43 = v41 + 80;
        *(void *)(v41 + 8) = v41 + 80;
        if (v40) {
          memcpy((void *)(v41 + 80), v39, v40);
        }
        *(_BYTE *)(v43 + v40) = 0;
        *(_DWORD *)(v42 + 40) = 1;
        uint64_t v13 = v76;
      }

      if (v30)
      {
        int v44 = *(_DWORD *)v30;
        if (*((_DWORD *)v30 + 1) > *(_DWORD *)v30)
        {
          *(_DWORD *)uint64_t v30 = v44 + 1;
          int v45 = &v30[3 * v44];
          v45[2] = 0LL;
          v45[3] = 0LL;
          v45[1] = v42;
          goto LABEL_27;
        }

        __int128 v37 = sub_18133E1F4(*a1, v30, (unsigned __int8 *)v42);
      }

      else
      {
        __int128 v37 = sub_18133E190((void *)*a1, (unsigned __int8 *)v42);
      }

      uint64_t v30 = v37;
LABEL_27:
      if (++v36 >= (unint64_t)*(unsigned __int16 *)(i + 94))
      {
        uint64_t v35 = *a1;
        int v9 = (void *)a4;
        goto LABEL_40;
      }
    }
  }

  sub_1812DC47C((uint64_t)a1, "ORDER BY without LIMIT on %s", a3, a4, 0LL, a6, a7, a8, a6);
  if (v10) {
    sub_181309110((void *)*a1, v10);
  }
  sub_181311F48((void *)*a1, v9);
  return 0LL;
}

uint64_t sub_18133E818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(unsigned __int8 *)(a2 + 63);
  if (v11 == 1)
  {
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = *(void *)(a2 + 80);
    uint64_t v14 = v13;
    if (*(void *)v13 != *(void *)a1)
    {
      uint64_t v14 = *(void *)(a2 + 80);
      do
        uint64_t v14 = *(void *)(v14 + 40);
      while (*(void *)v14 != v12);
    }

    if (*(void *)(**(void **)(v14 + 8) + 104LL))
    {
      sub_1812DC47C(a1, "unsafe use of virtual table %s", a3, a4, a5, a6, a7, a8, *(void *)a2);
      int v11 = *(unsigned __int8 *)(a2 + 63);
      goto LABEL_19;
    }

void *sub_18133E97C(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = (void *)*a1;
  uint64_t v12 = *(void *)(a2 + 96);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(v11[4] + 24LL);
    uint64_t v14 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v15 = *v13;
      v13 += 4;
      v14 += 0x100000000LL;
    }

    while (v15 != v12);
    uint64_t v16 = v14 >> 32;
    if (a3) {
      goto LABEL_5;
    }
  }

  else
  {
    uint64_t v16 = -32768LL;
    if (a3)
    {
LABEL_5:
      uint64_t v17 = sub_18129C928(*a1, a3, 0LL, 0LL);
      uint64_t v18 = *a1;
      goto LABEL_8;
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = *a1;
LABEL_8:
  uint64_t v19 = sub_1812F2264(v18, 0x70uLL);
  uint64_t v20 = v19;
  if (!v19) {
    goto LABEL_21;
  }
  uint64_t v38 = a4;
  *(void *)uint64_t v19 = 0x100000001LL;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(void *)(v19 + 104) = 0LL;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_DWORD *)(v19 + 72) = -1;
  *(void *)(v19 + 16) = 0LL;
  *(void *)(v19 + 24) = 0LL;
  uint64_t v21 = *(const char **)a2;
  int v22 = a6;
  if (v21)
  {
    size_t v23 = strlen(v21);
    unint64_t v24 = v23 + 1;
    if (v11)
    {
      uint64_t v25 = (void *)sub_1812F2264((uint64_t)v11, v24);
      if (!v25) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }

    uint64_t v25 = (void *)sub_18126F0AC(v23 + 1);
    if (v25) {
LABEL_15:
    }
      memcpy(v25, v21, v24);
  }

  else
  {
    uint64_t v25 = 0LL;
  }

void sub_18133EBBC(uint64_t *a1, uint64_t a2)
{
  if (a1[21]) {
    uint64_t v3 = (uint64_t *)a1[21];
  }
  else {
    uint64_t v3 = a1;
  }
  int v4 = *((_DWORD *)v3 + 76);
  if (v4 < 1)
  {
LABEL_8:
    uint64_t v7 = sub_18127D33C(v3[49], 8 * v4 + 8);
    if (v7)
    {
      v3[49] = v7;
      uint64_t v14 = *((int *)v3 + 76);
      *((_DWORD *)v3 + 76) = v14 + 1;
      *(void *)(v7 + 8 * v14) = a2;
    }

    else
    {
      uint64_t v15 = *v3;
      if (!*(_BYTE *)(*v3 + 103) && !*(_BYTE *)(v15 + 104))
      {
        *(_BYTE *)(v15 + 103) = 1;
        ++*(_DWORD *)(v15 + 432);
        *(_WORD *)(v15 + 436) = 0;
        uint64_t v16 = *(void *)(v15 + 344);
        if (v16)
        {
          sub_1812DC47C(v16, "out of memory", v8, v9, v10, v11, v12, v13, v18);
          for (uint64_t i = *(void *)(v15 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
    }
  }

  else
  {
    uint64_t v5 = *((unsigned int *)v3 + 76);
    uint64_t v6 = (void *)v3[49];
    while (*v6 != a2)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_8;
      }
    }
  }

uint64_t sub_18133ECB4( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v11)
  {
    sub_18131044C(a1, 83LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 136) + 40LL * v11;
    *(_BYTE *)uint64_t v12 = 83;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 17) = 0u;
    *(void *)(v12 + 32) = 0LL;
  }

  int v13 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v13)
  {
    sub_18131044C(a1, 84LL, a2, 1LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v13 + 1;
    uint64_t v14 = *(void *)(a1 + 136) + 40LL * v13;
    *(_DWORD *)uint64_t v14 = 84;
    *(_DWORD *)(v14 + 4) = a2;
    *(_DWORD *)(v14 + 8) = 1;
    *(void *)(v14 + 12) = 0LL;
    *(void *)(v14 + 28) = 0LL;
    *(void *)(v14 + 20) = 0LL;
    *(_DWORD *)(v14 + 36) = 0;
  }

  uint64_t result = sub_18128F970(a1, 1);
  if (!*(_BYTE *)(*(void *)a1 + 103LL)) {
    return sub_181269368(*(void *)(a1 + 152), a3, -1LL, 1u, 0LL);
  }
  return result;
}

unsigned __int8 *sub_18133EDD4( void *a1, unsigned __int8 **a2, uint64_t a3, unsigned int *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(*(void *)(*a1 + 32LL) + 56LL);
  uint64_t v14 = a2[11];
  uint64_t v15 = *(void **)(v13 + 64);
  uint64_t v16 = v14;
  if (!v15) {
    goto LABEL_18;
  }
  uint64_t v17 = a2[12];
  char v18 = a2[11];
  while (2)
  {
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)v15[2];
      uint64_t v19 = (_BYTE *)*((void *)v16 + 1);
      if (!v19) {
        break;
      }
      for (uint64_t i = *a2; ; ++i)
      {
        uint64_t v21 = *v19;
        uint64_t v22 = *i;
        if ((_DWORD)v21 == (_DWORD)v22) {
          break;
        }
        if (byte_1813C6343[v21] != byte_1813C6343[v22]) {
          goto LABEL_5;
        }
LABEL_12:
        ++v19;
      }

      if (*v19) {
        goto LABEL_12;
      }
LABEL_7:
      *((void *)v16 + 8) = v18;
      char v18 = v16;
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_18;
      }
    }

uint64_t sub_18133F0A0( void *a1, uint64_t a2, unsigned int *a3, unsigned int a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  if (a3) {
    int v7 = 129;
  }
  else {
    int v7 = 128;
  }
  if (*(_BYTE *)(a6 + 63) == 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a2;
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = 0LL;
  uint64_t v27 = a4;
  while (2)
  {
    if (!a3 || (uint64_t v15 = *(unsigned int **)(v9 + 32)) == 0LL)
    {
LABEL_8:
      if (*(_BYTE *)(v9 + 18))
      {
        uint64_t v8 = 0xFFFFFFFFLL;
        goto LABEL_10;
      }

      unint64_t v24 = (void *)a1[21];
      if (!v24) {
        unint64_t v24 = a1;
      }
      uint64_t v25 = v24[23];
      if (v25)
      {
        while (*(void *)v25 != v9 || *(_DWORD *)(v25 + 24) != (_DWORD)a7)
        {
          uint64_t v25 = *(void *)(v25 + 8);
          if (!v25) {
            goto LABEL_32;
          }
        }
      }

      else
      {
LABEL_32:
        uint64_t v25 = sub_1812BE6C4(a1, v9, a6, a7);
        *(_DWORD *)(*a1 + 84LL) = -1;
        if (!v25) {
          goto LABEL_10;
        }
      }

      uint64_t v8 = *(_DWORD *)(v25 + 4 * v27 + 28) | v8;
      goto LABEL_10;
    }

    uint64_t v16 = *a3;
    uint64_t v17 = 0LL;
    uint64_t v18 = *v15;
    while (2)
    {
      uint64_t v19 = 0LL;
      while (2)
      {
        uint64_t v20 = *(_BYTE **)&v15[4 * v19 + 2];
        for (uint64_t i = *(unsigned __int8 **)&a3[6 * v17 + 4]; ; ++i)
        {
          uint64_t v22 = *v20;
          uint64_t v23 = *i;
          if ((_DWORD)v22 != (_DWORD)v23) {
            break;
          }
          if (!*v20)
          {
            if ((v19 & 0x80000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_18;
          }

uint64_t sub_18133F274( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*((_BYTE *)*a1 + 49) & 0x40) == 0 || *(_BYTE *)(a2 + 63)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  if (v12)
  {
    uint64_t v9 = 0LL;
    v13.i64[0] = 0x1F0000001FLL;
    v13.i64[1] = 0x1F0000001FLL;
    v14.i64[0] = 0x100000001LL;
    v14.i64[1] = 0x100000001LL;
    do
    {
      uint64_t v15 = *(unsigned int *)(v12 + 40);
      if ((int)v15 >= 1)
      {
        if (v15 >= 9)
        {
          uint64_t v17 = v15 & 7;
          if ((v15 & 7) == 0) {
            uint64_t v17 = 8LL;
          }
          uint64_t v16 = v15 - v17;
          int8x16_t v18 = 0uLL;
          int8x16_t v19 = (int8x16_t)v9;
          uint64_t v20 = (const float *)(v12 + 128);
          uint64_t v21 = v16;
          do
          {
            uint64_t v22 = v20 - 16;
            unsigned __int128 v23 = (unsigned __int128)vld4q_f32(v22);
            unsigned __int128 v24 = (unsigned __int128)vld4q_f32(v20);
            int8x16_t v19 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)v23), v19),  (int8x16_t)vcgtq_s32((int32x4_t)v23, v13));
            int8x16_t v18 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)v24), v18),  (int8x16_t)vcgtq_s32((int32x4_t)v24, v13));
            v20 += 32;
            v21 -= 8LL;
          }

          while (v21);
          int8x16_t v25 = vorrq_s8(v18, v19);
          int8x8_t v26 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          LODWORD(v9) = v26.i32[0] | v26.i32[1];
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        uint64_t v27 = (int *)(v12 + 16 * v16 + 64);
        uint64_t v28 = v15 - v16;
        do
        {
          int v29 = *v27;
          v27 += 4;
          int v30 = 1 << v29;
          if (v29 > 31) {
            int v31 = -1;
          }
          else {
            int v31 = v30;
          }
          uint64_t v9 = v31 | v9;
          --v28;
        }

        while (v28);
      }

      uint64_t v12 = *(void *)(v12 + 8);
    }

    while (v12);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  uint64_t v32 = *(void *)(a2 + 96);
  uint64_t v33 = *(unsigned __int8 **)a2;
  uint64_t v34 = *(void *)(v32 + 96);
  if (!v34)
  {
    uint64_t v39 = (uint64_t *)(v32 + 88);
    int v40 = *(_DWORD *)(v32 + 84);
    if (v40) {
      goto LABEL_47;
    }
LABEL_29:
    uint64_t v39 = &qword_18C550660;
    goto LABEL_30;
  }

  int v35 = *v33;
  if (*v33)
  {
    unsigned int v36 = 0;
    __int128 v37 = v33 + 1;
    do
    {
      unsigned int v36 = -1640531535 * (v36 + byte_1813C6343[v35]);
      int v38 = *v37++;
      int v35 = v38;
    }

    while (v38);
  }

  else
  {
    unsigned int v36 = 0;
  }

  int v61 = (_DWORD *)(v34 + 16LL * (v36 % *(_DWORD *)(v32 + 80)));
  uint64_t v39 = (uint64_t *)(v61 + 2);
  int v40 = *v61;
  if (!v40) {
    goto LABEL_29;
  }
  do
  {
LABEL_47:
    uint64_t v39 = (uint64_t *)*v39;
    __int16 v62 = (_BYTE *)v39[3];
    for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
    {
      uint64_t v64 = *v62;
      uint64_t v65 = *i;
      if ((_DWORD)v64 != (_DWORD)v65) {
        break;
      }
      if (!*v62) {
        goto LABEL_30;
      }
LABEL_49:
      ++v62;
    }

    if (byte_1813C6343[v64] == byte_1813C6343[v65]) {
      goto LABEL_49;
    }
    --v40;
  }

  while (v40);
  uint64_t v39 = &qword_18C550660;
LABEL_30:
  uint64_t v41 = v39[2];
  if (v41)
  {
    while (2)
    {
      uint64_t v66 = 0LL;
      sub_18133FFAC(a1, a2, v41, &v66, 0LL, a6, a7, a8);
      if (v66)
      {
        uint64_t v42 = *(unsigned __int16 *)(v66 + 94);
        if (*(_WORD *)(v66 + 94))
        {
          uint64_t v43 = *(int16x8_t **)(v66 + 8);
          v44.i64[0] = 0x1F001F001F001FLL;
          v44.i64[1] = 0x1F001F001F001FLL;
          v45.i64[0] = 0x100000001LL;
          v45.i64[1] = 0x100000001LL;
          if (v42 >= 0x10)
          {
            uint64_t v46 = (unsigned __int16)v42 & 0xFFF0;
            int8x16_t v47 = 0uLL;
            int8x16_t v48 = (int8x16_t)v9;
            uint64_t v49 = v43 + 1;
            uint64_t v50 = v46;
            int8x16_t v51 = 0uLL;
            int8x16_t v52 = 0uLL;
            do
            {
              int16x8_t v53 = v49[-1];
              int16x8_t v54 = vcgtq_s16(v53, v44);
              int16x8_t v55 = vcgtq_s16(*v49, v44);
              int8x16_t v47 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_high_u16((uint16x8_t)v53)), v47),  (int8x16_t)vmovl_high_s16(v54));
              int8x16_t v48 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_u16(*(uint16x4_t *)v53.i8)), v48),  (int8x16_t)vmovl_s16(*(int16x4_t *)v54.i8));
              int8x16_t v52 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_high_u16(*(uint16x8_t *)v49)), v52),  (int8x16_t)vmovl_high_s16(v55));
              int8x16_t v51 = vorrq_s8( vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_u16(*(uint16x4_t *)v49->i8)), v51),  (int8x16_t)vmovl_s16(*(int16x4_t *)v55.i8));
              v49 += 2;
              v50 -= 16LL;
            }

            while (v50);
            int8x16_t v56 = vorrq_s8(vorrq_s8(v51, v48), vorrq_s8(v52, v47));
            *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
            uint64_t v9 = (v56.i32[0] | v56.i32[1]);
            if (v46 != v42) {
              goto LABEL_40;
            }
          }

          else
          {
            uint64_t v46 = 0LL;
LABEL_40:
            uint64_t v57 = &v43->i16[v46];
            uint64_t v58 = v42 - v46;
            do
            {
              __int16 v59 = *v57++;
              int v60 = 1 << v59;
              if (v59 > 31) {
                int v60 = -1;
              }
              uint64_t v9 = v60 | v9;
              --v58;
            }

            while (v58);
          }
        }
      }

      uint64_t v41 = *(void *)(v41 + 24);
      if (!v41) {
        return v9;
      }
      continue;
    }
  }

  return v9;
}

void sub_18133F5C0( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v32 = a8;
  unsigned int v33 = a7;
  if (a2)
  {
    int v10 = a5;
    int v12 = a3;
    uint64_t v13 = a2;
    do
    {
      int v15 = *(unsigned __int8 *)(v13 + 16);
      if (!a4 || (uint64_t v16 = *(unsigned int **)(v13 + 32)) == 0LL)
      {
LABEL_25:
        if (*(_BYTE *)(v13 + 18))
        {
          if (!*(void *)(a1 + 168)) {
            sub_1813402F0(a1, v13, a6, v33);
          }
        }

        else
        {
          uint64_t v25 = *(void *)(a1 + 16);
          if (!v25)
          {
            if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
              *(_BYTE *)(a1 + 35) = 1;
            }
            uint64_t v25 = sub_1812DC63C((uint64_t *)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }

          uint64_t v26 = sub_18133FC68((void *)a1, v13, a6, v32);
          if (v26)
          {
            if (*(void *)v13) {
              __int16 v27 = (*(_BYTE *)(*(void *)a1 + 49LL) & 0x20) == 0;
            }
            else {
              __int16 v27 = 0;
            }
            uint64_t v28 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v28;
            sub_1812B9B68((uint64_t *)v25, 48LL, v33, a9, v28, *(void *)(v26 + 16), 4294967292LL, a8);
            int v29 = *(_DWORD *)(v25 + 144);
            BOOL v30 = __OFSUB__(v29, 1);
            int v31 = v29 - 1;
            if (v31 < 0 == v30) {
              *(_WORD *)(*(void *)(v25 + 136) + 40LL * v31 + 2) = v27;
            }
          }
        }

        goto LABEL_3;
      }

      uint64_t v17 = *a4;
      uint64_t v18 = 0LL;
      uint64_t v19 = *v16;
      while (2)
      {
        uint64_t v20 = 0LL;
        while (2)
        {
          uint64_t v21 = *(_BYTE **)&v16[4 * v20 + 2];
          for (uint64_t i = *(unsigned __int8 **)&a4[6 * v18 + 4]; ; ++i)
          {
            uint64_t v23 = *v21;
            uint64_t v24 = *i;
            if ((_DWORD)v23 != (_DWORD)v24) {
              break;
            }
            if (!*v21)
            {
              if ((v20 & 0x80000000) == 0) {
                goto LABEL_25;
              }
              goto LABEL_14;
            }

uint64_t sub_18133F7E0( uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, int a6, int16x8_t a7)
{
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 16);
  uint64_t v13 = *(void *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0)
  {
    if (!v13) {
      return result;
    }
    uint64_t v14 = *(void *)(a2 + 16);
    do
    {
      if ((*(_WORD *)(v14 + 99) & 3) == 2) {
        break;
      }
      uint64_t v14 = *(void *)(v14 + 40);
    }

    while (v14);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  if (v13)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 0xFFFFFFFFLL;
    uint64_t v17 = a5;
    do
    {
      if (a5)
      {
        if (v13 != v14 && *v17)
        {
LABEL_17:
          if (a6 != (_DWORD)a4)
          {
            uint64_t result = sub_1812AA5E4(v11, v13, a3, 0, 1, &v30, v15, v16, a7);
            uint64_t v16 = result;
            uint64_t v21 = 94LL;
            if ((*(_WORD *)(v13 + 99) & 8) == 0) {
              uint64_t v21 = 96LL;
            }
            uint64_t v22 = *(unsigned __int16 *)(v13 + v21);
            int v23 = *(_DWORD *)(v12 + 144);
            if (*(_DWORD *)(v12 + 148) <= v23)
            {
              uint64_t result = sub_18131044C(v12, 140LL, a4, result, v22, v18, v19, v20);
            }

            else
            {
              *(_DWORD *)(v12 + 144) = v23 + 1;
              uint64_t v24 = *(void *)(v12 + 136) + 40LL * v23;
              *(_DWORD *)uint64_t v24 = 140;
              *(_DWORD *)(v24 + 4) = a4;
              *(_DWORD *)(v24 + 8) = result;
              *(_DWORD *)(v24 + 12) = v22;
              *(void *)(v24 + 24) = 0LL;
              *(void *)(v24 + 32) = 0LL;
              *(void *)(v24 + 16) = 0LL;
            }

            int v25 = *(_DWORD *)(v12 + 144);
            BOOL v26 = __OFSUB__(v25, 1);
            int v27 = v25 - 1;
            if (v27 < 0 == v26) {
              *(_WORD *)(*(void *)(v12 + 136) + 40LL * v27 + 2) = 1;
            }
            if (v30)
            {
              uint64_t v28 = *(void *)(v11 + 16);
              uint64_t result = *(void *)(v28 + 24);
              int v29 = ~v30;
              if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) >= 0) {
                *(_DWORD *)(*(void *)(result + 80) + 4LL * v29) = *(_DWORD *)(v28 + 144);
              }
              else {
                uint64_t result = sub_18131E420(result, v28, v29);
              }
            }

            uint64_t v15 = v13;
          }
        }
      }

      else if (v13 != v14)
      {
        goto LABEL_17;
      }

      uint64_t v13 = *(void *)(v13 + 40);
      a4 = (a4 + 1);
      ++v17;
    }

    while (v13);
  }

  return result;
}

uint64_t *sub_18133F998( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(*result + 49) & 0x40) == 0) {
    return result;
  }
  int v8 = a6;
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(unsigned __int8 **)a2;
  uint64_t v16 = *(void *)(v14 + 96);
  if (!v16)
  {
    uint64_t v21 = (uint64_t *)(v14 + 88);
    int v22 = *(_DWORD *)(v14 + 84);
    if (v22) {
      goto LABEL_45;
    }
LABEL_8:
    uint64_t v21 = &qword_18C550660;
    goto LABEL_9;
  }

  int v17 = *v15;
  if (*v15)
  {
    unsigned int v18 = 0;
    uint64_t v19 = v15 + 1;
    do
    {
      unsigned int v18 = -1640531535 * (v18 + byte_1813C6343[v17]);
      int v20 = *v19++;
      int v17 = v20;
    }

    while (v20);
  }

  else
  {
    unsigned int v18 = 0;
  }

  uint64_t v42 = (_DWORD *)(v16 + 16LL * (v18 % *(_DWORD *)(v14 + 80)));
  uint64_t v21 = (uint64_t *)(v42 + 2);
  int v22 = *v42;
  if (!v22) {
    goto LABEL_8;
  }
  do
  {
LABEL_45:
    uint64_t v21 = (uint64_t *)*v21;
    uint64_t v43 = (_BYTE *)v21[3];
    for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
    {
      uint64_t v45 = *v43;
      uint64_t v46 = *i;
      if ((_DWORD)v45 != (_DWORD)v46) {
        break;
      }
      if (!*v43) {
        goto LABEL_9;
      }
LABEL_47:
      ++v43;
    }

    if (byte_1813C6343[v45] == byte_1813C6343[v46]) {
      goto LABEL_47;
    }
    --v22;
  }

  while (v22);
  uint64_t v21 = &qword_18C550660;
LABEL_9:
  uint64_t v23 = v21[2];
  if (v23)
  {
    while (1)
    {
      if (!a5) {
        goto LABEL_31;
      }
      uint64_t v24 = *(unsigned int *)(v23 + 40);
LABEL_11:
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        return result;
      }
    }

    uint64_t v25 = 0LL;
    while (*(__int16 *)(a2 + 54) < 1)
    {
LABEL_29:
      if (++v25 == v24) {
        goto LABEL_11;
      }
    }

    uint64_t v26 = 0LL;
    while (1)
    {
      if ((*(_DWORD *)(a5 + 4 * v26) & 0x80000000) == 0 || v8 && v26 == *(__int16 *)(a2 + 52))
      {
        uint64_t v27 = *(void *)(a2 + 8);
        if (*(void *)(v23 + 16 * v25 + 72))
        {
          uint64_t v28 = *(_BYTE **)(v27 + 16 * v26);
          for (uint64_t j = *(unsigned __int8 **)(v23 + 16 * v25 + 72); ; ++j)
          {
            uint64_t v30 = *v28;
            uint64_t v31 = *j;
            if ((_DWORD)v30 == (_DWORD)v31)
            {
              if (!*v28) {
                goto LABEL_31;
              }
            }

            else if (byte_1813C6343[v30] != byte_1813C6343[v31])
            {
              goto LABEL_18;
            }

            ++v28;
          }
        }

        if ((*(_WORD *)(v27 + 16 * v26 + 14) & 1) != 0) {
          break;
        }
      }

uint64_t sub_18133FC68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)a1[21];
  if (!v5) {
    uint64_t v5 = a1;
  }
  uint64_t result = v5[23];
  if (result)
  {
    while (*(void *)result != a2 || *(_DWORD *)(result + 24) != (_DWORD)a4)
    {
      uint64_t result = *(void *)(result + 8);
      if (!result) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t result = sub_1812BE6C4(a1, a2, a3, a4);
    *(_DWORD *)(*a1 + 84LL) = -1;
  }

  return result;
}

int *sub_18133FCD0(uint64_t *a1, uint64_t a2)
{
  int v4 = (void *)*a1;
  uint64_t v5 = *(const void **)(a2 + 24);
  if (!v5)
  {
    int v8 = 0LL;
    goto LABEL_8;
  }

  size_t v6 = strlen(*(const char **)(a2 + 24));
  unint64_t v7 = v6 + 1;
  if (!v4)
  {
    int v8 = (void *)sub_18126F0AC(v6 + 1);
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int v8 = (void *)sub_1812F2264((uint64_t)v4, v7);
  if (v8) {
LABEL_7:
  }
    memcpy(v8, v5, v7);
LABEL_8:
  uint64_t v9 = sub_1812F2264(*a1, 0x70uLL);
  if (v9)
  {
    int v10 = (int *)v9;
    *(void *)uint64_t v9 = 0x100000001LL;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(void *)(v9 + 104) = 0LL;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_DWORD *)(v9 + 72) = -1;
    *(void *)(v9 + 16) = 0LL;
    *(void *)(v9 + 24) = 0LL;
    uint64_t v11 = *(void *)(*(void *)(a2 + 8) + 40LL);
    *(void *)(v9 + 24) = v8;
    if (v11 != *(void *)(v4[4] + 56LL)) {
      *(void *)(v9 + 8) = v11;
    }
    uint64_t v12 = *(int **)(a2 + 32);
    if (v12)
    {
      uint64_t v13 = sub_18129F858((uint64_t)v4, v12, 0);
      if (v13)
      {
        unsigned int v18 = v13;
        uint64_t v19 = *v13;
        if ((int)v19 >= 2 && *((unsigned __int8 *)a1 + 302) <= 1u)
        {
          int v20 = sub_181280000((void **)a1, 0LL, v13, 0LL, 0LL, 0LL, 0LL, 2048, 0LL);
          int v27 = 0;
          uint64_t v26 = 0LL;
          int v22 = sub_18127F854((uint64_t)a1, 0LL, 0LL, 0LL, (uint64_t)&v26, (uint64_t)v20, 0LL, v21);
          if (!v22) {
            return v10;
          }
          unsigned int v18 = v22;
          uint64_t v19 = *v22;
        }

        uint64_t v23 = sub_18127FE00(a1, v10, v19, 1LL, v14, v15, v16, v17);
        if (v23)
        {
          uint64_t v24 = v23;
          memcpy(v23 + 28, v18 + 2, 104LL * *v18);
          sub_1812F20DC((void *)*a1, v18);
          *((_BYTE *)v24 + 68) |= v24[43] & 0x40;
          return v24;
        }

        else
        {
          sub_18128FF4C((void *)*a1, v18);
        }
      }
    }
  }

  else
  {
    if (v8) {
      sub_1812F20DC(v4, v8);
    }
    return 0LL;
  }

  return v10;
}

uint64_t sub_18133FEE0(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  int v4 = sub_18129CD4C((uint64_t)a1, *(void **)a2, 0);
  uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
  if (v5) {
    size_t v6 = (unsigned __int8 *)sub_18129C928((uint64_t)a1, v5, 0LL, 0LL);
  }
  else {
    size_t v6 = 0LL;
  }
  int v8 = sub_18129CD4C((uint64_t)a1, *(void **)(a2 + 16), 0);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 24);
  if (v9) {
    int v10 = (unsigned __int8 *)sub_18129C928((uint64_t)a1, v9, 0LL, 0LL);
  }
  else {
    int v10 = 0LL;
  }
  uint64_t v11 = (void *)sub_18133FEE0(a1, *(void *)(a2 + 32));
  return sub_181314F3C(a1, v4, v6, v8, v10, v11);
}

uint64_t sub_18133FFAC( void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = *(void *)(a3 + 72);
  if ((_DWORD)v12 == 1)
  {
    if ((*(__int16 *)(a2 + 52) & 0x80000000) == 0)
    {
      if (v13)
      {
        uint64_t v14 = *(_BYTE **)(*(void *)(a2 + 8) + 16LL * *(unsigned __int16 *)(a2 + 52));
        for (uint64_t i = *(unsigned __int8 **)(a3 + 72); ; ++i)
        {
          uint64_t v16 = *v14;
          uint64_t v17 = *i;
          if ((_DWORD)v16 == (_DWORD)v17)
          {
            if (!*v14) {
              return 0LL;
            }
          }

          else if (byte_1813C6343[v16] != byte_1813C6343[v17])
          {
            goto LABEL_14;
          }

          ++v14;
        }
      }

      return 0LL;
    }

    goto LABEL_14;
  }

  if (!a5)
  {
LABEL_14:
    uint64_t v21 = 0LL;
    uint64_t v22 = *(void *)(a2 + 16);
    if (v22) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }

  uint64_t v20 = sub_1812F2264((uint64_t)*a1, 4 * v12);
  if (!v20) {
    return 1LL;
  }
  uint64_t v21 = (void *)v20;
  *a5 = v20;
  uint64_t v22 = *(void *)(a2 + 16);
  if (!v22)
  {
LABEL_56:
    if (!*((_BYTE *)a1 + 221)) {
      sub_1812DC47C( (uint64_t)a1,  "foreign key mismatch - %w referencing %w",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  **(void **)a3);
    }
    if (v21) {
      sub_1812F20DC(*a1, v21);
    }
    return 1LL;
  }

void sub_1813402F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 200);
  memset(v96, 0, sizeof(v96));
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  memset(v90, 0, sizeof(v90));
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  *(void *)&__int128 v97 = sub_18129CD4C((uint64_t)v9, *(void **)(v10 + 8), 0);
  *((void *)&v97 + 1) = v90;
  LODWORD(v90[0]) = 1;
  *((void *)&v91 + 1) = a3;
  DWORD2(v93) = -1;
  sub_181321444((_BYTE *)a1, (uint64_t)v96, 0LL);
  uint64_t v85 = (void **)a1;
  if (!*(_DWORD *)(a1 + 48)) {
    sub_181325C9C((_BYTE *)a1, (uint64_t)v96);
  }
  if ((void)v97) {
    sub_181311F48(v9, (void *)v97);
  }
  uint64_t v83 = v9;
  int v84 = *(int **)(v10 + 8);
  __int128 v81 = (_DWORD *)v10;
  uint64_t v82 = v8;
  int v80 = a4;
  uint64_t v79 = a2;
  if (*v84 >= 1)
  {
    uint64_t v17 = 0LL;
    unsigned int v18 = 0LL;
    uint64_t v19 = v84;
    uint64_t v20 = *(void *)a1;
    while (1)
    {
      uint64_t v22 = *(unsigned __int8 **)&v19[6 * v17 + 2];
      if (!v22) {
        goto LABEL_8;
      }
      int v23 = *v22;
      if (v23 == 180) {
        goto LABEL_14;
      }
      if (v23 == 141 && **((unsigned __int8 **)v22 + 3) == 180)
      {
        sub_1812DC47C((uint64_t)v85, "RETURNING may not use TABLE.* wildcards", v11, v12, v13, v14, v15, v16, v78);
LABEL_14:
        if (*(__int16 *)(a3 + 54) >= 1)
        {
          uint64_t v24 = 0LL;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v28 = *(void *)(a3 + 8);
            if ((*(_WORD *)(v28 + v24 + 14) & 2) != 0) {
              goto LABEL_18;
            }
            int v29 = *(const void **)(v28 + v24);
            if (v29) {
              size_t v30 = strlen(*(const char **)(v28 + v24)) & 0x3FFFFFFF;
            }
            else {
              size_t v30 = 0LL;
            }
            uint64_t v31 = sub_1812F2264(v20, v30 + 81);
            uint64_t v32 = v31;
            if (v31)
            {
              *(_OWORD *)(v31 + 48) = 0u;
              *(_OWORD *)(v31 + 64) = 0u;
              *(_OWORD *)(v31 + 16) = 0u;
              *(_OWORD *)(v31 + 32) = 0u;
              *(_OWORD *)uint64_t v31 = 0u;
              *(_BYTE *)uint64_t v31 = 59;
              *(_WORD *)(v31 + 52) = -1;
              uint64_t v33 = v31 + 80;
              *(void *)(v31 + 8) = v31 + 80;
              if (v30) {
                memcpy((void *)(v31 + 80), v29, v30);
              }
              *(_BYTE *)(v33 + v30) = 0;
              *(_DWORD *)(v32 + 40) = 1;
            }

            if (v18)
            {
              unsigned int v34 = *v18;
              if (v18[1] > *v18)
              {
                *unsigned int v18 = v34 + 1;
                int v35 = &v18[6 * v34];
                *((void *)v35 + 2) = 0LL;
                *((void *)v35 + 3) = 0LL;
                *((void *)v35 + 1) = v32;
                if (!*(_BYTE *)(v20 + 103)) {
                  goto LABEL_34;
                }
                goto LABEL_18;
              }

              uint64_t v36 = sub_18133E1F4((uint64_t)*v85, v18, (unsigned __int8 *)v32);
            }

            else
            {
              uint64_t v36 = (int *)sub_18133E190(*v85, (unsigned __int8 *)v32);
            }

            unsigned int v18 = v36;
            if (!*(_BYTE *)(v20 + 103))
            {
LABEL_34:
              uint64_t v37 = *v18;
              uint64_t v38 = *(void *)(a3 + 8);
              uint64_t v39 = *(const void **)(v38 + v24);
              if (v39)
              {
                unint64_t v40 = strlen(*(const char **)(v38 + v24)) + 1;
                uint64_t v41 = (void *)sub_1812F2264(v20, v40);
                __int16 v26 = v41;
                if (v41) {
                  memcpy(v41, v39, v40);
                }
              }

              else
              {
                __int16 v26 = 0LL;
              }

              int v27 = &v18[6 * v37 - 6];
              *((void *)v27 + 2) = v26;
              *(_WORD *)((char *)v27 + 25) &= 0xFFFCu;
            }

uint64_t sub_181340950( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = a8;
  unsigned int v217 = a7;
  uint64_t v10 = (_DWORD *)a6;
  uint64_t v11 = a5;
  unsigned int v12 = a2;
  uint64_t v13 = a1;
  uint64_t v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
      *((_BYTE *)a1 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  int v15 = *((_DWORD *)v13 + 13);
  int v16 = *((_DWORD *)v13 + 17);
  uint64_t v17 = (v16 - 1);
  *((_DWORD *)v13 + 17) = v17;
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v18 = *(unsigned __int8 *)(v11 + 44);
    int v19 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v19)
    {
      sub_18131044C(v14, 49LL, v18, (v16 - 1), 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v19 + 1;
      uint64_t v20 = *(void *)(v14 + 136) + 40LL * v19;
      *(_DWORD *)uint64_t v20 = 49;
      *(_DWORD *)(v20 + 4) = v18;
      *(_DWORD *)(v20 + 8) = v17;
      *(void *)(v20 + 12) = 0LL;
      *(void *)(v20 + 28) = 0LL;
      *(void *)(v20 + 20) = 0LL;
      *(_DWORD *)(v20 + 36) = 0;
    }
  }

  uint64_t v21 = *(unsigned int *)(v11 + 40);
  unsigned int v211 = v12;
  if ((int)v21 < 1)
  {
    uint64_t v50 = (v15 - 1);
    if (a9) {
      goto LABEL_177;
    }
  }

  else
  {
    unsigned int v213 = v9;
    uint64_t v22 = 0LL;
    int8x16_t v23 = (int8x16_t)xmmword_1813CDDB0;
    int8x16_t v24 = (int8x16_t)xmmword_1813CDDC0;
    int8x16_t v25 = (int8x16_t)xmmword_1813CDDD0;
    v26.i64[0] = 0x1000100010001LL;
    v26.i64[1] = 0x1000100010001LL;
    do
    {
      int v28 = v10[v22];
      uint64_t v29 = (__int16)v28;
      if ((v28 & 0x8000) == 0)
      {
        uint64_t v30 = *(void *)v11;
        if ((*(_DWORD *)(*(void *)v11 + 48LL) & 0x20) != 0)
        {
          uint64_t v31 = *(void *)(v30 + 8);
          if ((unsigned __int16)v10[v22])
          {
            if ((v28 << 16) >= 0x110000)
            {
              uint64_t v34 = v28 & 0xF;
              if ((v28 & 0xF) == 0) {
                uint64_t v34 = 16LL;
              }
              uint64_t v32 = v29 - v34;
              uint64_t v35 = v31 + 142;
              int16x8_t v36 = 0uLL;
              uint64_t v37 = v32;
              int16x8_t v38 = 0uLL;
              do
              {
                int8x16_t v39 = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 64), v24);
                v39.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 32), v23).i32[3];
                v40.i32[0] = vzip1q_s16(*(int16x8_t *)(v35 - 128), *(int16x8_t *)(v35 - 112)).u32[0];
                v40.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 96), v25).i32[1];
                v40.i64[1] = v39.i64[1];
                uint16x8_t v41 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v35 + 96), v23);
                int8x16x2_t v219 = *(int8x16x2_t *)(v35 + 32);
                int8x16_t v42 = vqtbl2q_s8(*(int8x16x2_t *)(v35 + 64), v24);
                int16x8_t v44 = *(int16x8_t *)v35;
                int16x8_t v43 = *(int16x8_t *)(v35 + 16);
                v35 += 256LL;
                v42.i32[3] = v41.i32[3];
                v41.i32[0] = vzip1q_s16(v44, v43).u32[0];
                v41.i32[1] = vqtbl2q_s8(v219, v25).i32[1];
                v41.i64[1] = v42.i64[1];
                int16x8_t v36 = vaddq_s16((int16x8_t)vbicq_s8(v26, (int8x16_t)vshrq_n_u16(v40, 5uLL)), v36);
                int16x8_t v38 = vaddq_s16((int16x8_t)vbicq_s8(v26, (int8x16_t)vshrq_n_u16(v41, 5uLL)), v38);
                v37 -= 16LL;
              }

              while (v37);
              __int16 v33 = vaddvq_s16(vaddq_s16(v38, v36));
            }

            else
            {
              uint64_t v32 = 0LL;
              __int16 v33 = 0;
            }

            uint64_t v45 = v29 - v32;
            unsigned __int128 v46 = (unsigned __int16 *)(v31 + 16 * v32 + 14);
            do
            {
              unsigned int v47 = *v46;
              v46 += 8;
              v33 += ((v47 >> 5) & 1) == 0;
              --v45;
            }

            while (v45);
          }

          else
          {
            __int16 v33 = 0;
          }

          if ((*(_WORD *)(v31 + 16 * v29 + 14) & 0x20) != 0) {
            LOWORD(v29) = v28 - v33 + *(_WORD *)(v30 + 56);
          }
          else {
            LOWORD(v29) = v33;
          }
        }
      }

      uint64_t v48 = v217 + 1 + (__int16)v29;
      int v49 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) > v49)
      {
        *(_DWORD *)(v14 + 144) = v49 + 1;
        uint64_t v27 = *(void *)(v14 + 136) + 40LL * v49;
        *(_DWORD *)uint64_t v27 = 50;
        *(_DWORD *)(v27 + 4) = v48;
        *(_DWORD *)(v27 + 8) = v17;
        *(void *)(v27 + 12) = 0LL;
        *(void *)(v27 + 28) = 0LL;
        *(void *)(v27 + 20) = 0LL;
        *(_DWORD *)(v27 + 36) = 0;
      }

      else
      {
        sub_18131044C(v14, 50LL, v48, v17, 0LL, a6, a7, a8);
        v26.i64[0] = 0x1000100010001LL;
        v26.i64[1] = 0x1000100010001LL;
        int8x16_t v25 = (int8x16_t)xmmword_1813CDDD0;
        int8x16_t v24 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v23 = (int8x16_t)xmmword_1813CDDB0;
      }

      ++v22;
      uint64_t v21 = *(int *)(v11 + 40);
    }

    while (v22 < v21);
    uint64_t v9 = v213;
    uint64_t v50 = (v15 - 1);
    if (a9) {
      goto LABEL_177;
    }
  }

  if (a4)
  {
    if ((_DWORD)v21 == 1)
    {
      if (*((_BYTE *)v13 + 31))
      {
        unsigned __int8 v51 = *((_BYTE *)v13 + 31) - 1;
        *((_BYTE *)v13 + 31) = v51;
        uint64_t v52 = *((unsigned int *)v13 + v51 + 56);
      }

      else
      {
        uint64_t v52 = (*((_DWORD *)v13 + 14) + 1);
        *((_DWORD *)v13 + 14) = v52;
      }
    }

    else
    {
      int v55 = *((_DWORD *)v13 + 10);
      BOOL v56 = __OFSUB__(v55, (_DWORD)v21);
      int v57 = v55 - v21;
      if (v57 < 0 != v56)
      {
        int v58 = *((_DWORD *)v13 + 14);
        uint64_t v52 = (v58 + 1);
        *((_DWORD *)v13 + 14) = v58 + v21;
      }

      else
      {
        uint64_t v52 = *((unsigned int *)v13 + 11);
        *((_DWORD *)v13 + 10) = v57;
        *((_DWORD *)v13 + 11) = v52 + v21;
      }
    }

    uint64_t v65 = *(unsigned int *)(a4 + 88);
    int v66 = *(_DWORD *)(v14 + 144);
    int v214 = v16;
    if (*(_DWORD *)(v14 + 148) <= v66)
    {
      sub_18131044C(v14, 112LL, v50, v65, v211, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v66 + 1;
      uint64_t v67 = *(void *)(v14 + 136) + 40LL * v66;
      *(_DWORD *)uint64_t v67 = 112;
      *(_DWORD *)(v67 + 4) = v50;
      *(_DWORD *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = v211;
      *(void *)(v67 + 24) = 0LL;
      *(void *)(v67 + 32) = 0LL;
      *(void *)(v67 + 16) = 0LL;
    }

    uint64_t v68 = v13[2];
    uint64_t v69 = sub_181319FB0(v13, a4);
    if (v69)
    {
      if (*(_BYTE *)(*(void *)v68 + 103LL))
      {
        if (!*(void *)(*(void *)v68 + 816LL) && (*(_DWORD *)v69)-- == 1) {
          sub_1813014B0(*(void **)(v69 + 16), (void *)v69);
        }
      }

      else
      {
        uint64_t v74 = *(void *)(v68 + 136) + 40LL * *(int *)(v68 + 144);
        *(_BYTE *)(v74 - 39) = -8;
        *(void *)(v74 - 24) = v69;
      }
    }

    unsigned int v215 = v50;
    v212 = v13;
    if ((int)v21 >= 1)
    {
      uint64_t v75 = 0LL;
      int8x16_t v76 = (int8x16_t)xmmword_1813CDDB0;
      int8x16_t v77 = (int8x16_t)xmmword_1813CDDC0;
      int8x16_t v78 = (int8x16_t)xmmword_1813CDDD0;
      v79.i64[0] = 0x1000100010001LL;
      v79.i64[1] = 0x1000100010001LL;
      do
      {
        int v81 = v10[v75];
        uint64_t v82 = (__int16)v81;
        if ((v81 & 0x8000) == 0)
        {
          uint64_t v83 = *(void *)v11;
          if ((*(_DWORD *)(*(void *)v11 + 48LL) & 0x20) != 0)
          {
            uint64_t v84 = *(void *)(v83 + 8);
            if ((unsigned __int16)v10[v75])
            {
              if ((v81 << 16) >= 0x110000)
              {
                uint64_t v87 = v81 & 0xF;
                if ((v81 & 0xF) == 0) {
                  uint64_t v87 = 16LL;
                }
                uint64_t v85 = v82 - v87;
                uint64_t v88 = v84 + 142;
                int16x8_t v89 = 0uLL;
                uint64_t v90 = v85;
                int16x8_t v91 = 0uLL;
                do
                {
                  int8x16_t v92 = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 64), v77);
                  v92.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 32), v76).i32[3];
                  v93.i32[0] = vzip1q_s16(*(int16x8_t *)(v88 - 128), *(int16x8_t *)(v88 - 112)).u32[0];
                  v93.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 96), v78).i32[1];
                  v93.i64[1] = v92.i64[1];
                  uint16x8_t v94 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v88 + 96), v76);
                  int8x16x2_t v220 = *(int8x16x2_t *)(v88 + 32);
                  int8x16_t v95 = vqtbl2q_s8(*(int8x16x2_t *)(v88 + 64), v77);
                  int16x8_t v97 = *(int16x8_t *)v88;
                  int16x8_t v96 = *(int16x8_t *)(v88 + 16);
                  v88 += 256LL;
                  v95.i32[3] = v94.i32[3];
                  v94.i32[0] = vzip1q_s16(v97, v96).u32[0];
                  v94.i32[1] = vqtbl2q_s8(v220, v78).i32[1];
                  v94.i64[1] = v95.i64[1];
                  int16x8_t v89 = vaddq_s16((int16x8_t)vbicq_s8(v79, (int8x16_t)vshrq_n_u16(v93, 5uLL)), v89);
                  int16x8_t v91 = vaddq_s16((int16x8_t)vbicq_s8(v79, (int8x16_t)vshrq_n_u16(v94, 5uLL)), v91);
                  v90 -= 16LL;
                }

                while (v90);
                __int16 v86 = vaddvq_s16(vaddq_s16(v91, v89));
              }

              else
              {
                uint64_t v85 = 0LL;
                __int16 v86 = 0;
              }

              uint64_t v98 = v82 - v85;
              __int128 v99 = (unsigned __int16 *)(v84 + 16 * v85 + 14);
              do
              {
                unsigned int v100 = *v99;
                v99 += 8;
                v86 += ((v100 >> 5) & 1) == 0;
                --v98;
              }

              while (v98);
            }

            else
            {
              __int16 v86 = 0;
            }

            if ((*(_WORD *)(v84 + 16 * v82 + 14) & 0x20) != 0) {
              LOWORD(v82) = v81 - v86 + *(_WORD *)(v83 + 56);
            }
            else {
              LOWORD(v82) = v86;
            }
          }
        }

        uint64_t v101 = v217 + 1 + (__int16)v82;
        uint64_t v102 = (v52 + v75);
        int v103 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) > v103)
        {
          *(_DWORD *)(v14 + 144) = v103 + 1;
          uint64_t v80 = *(void *)(v14 + 136) + 40LL * v103;
          *(_DWORD *)uint64_t v80 = 80;
          *(_DWORD *)(v80 + 4) = v101;
          *(_DWORD *)(v80 + 8) = v102;
          *(void *)(v80 + 12) = 0LL;
          *(void *)(v80 + 28) = 0LL;
          *(void *)(v80 + 20) = 0LL;
          *(_DWORD *)(v80 + 36) = 0;
        }

        else
        {
          sub_18131044C(v14, 80LL, v101, v102, 0LL, v70, v71, v72);
          v79.i64[0] = 0x1000100010001LL;
          v79.i64[1] = 0x1000100010001LL;
          int8x16_t v78 = (int8x16_t)xmmword_1813CDDD0;
          int8x16_t v77 = (int8x16_t)xmmword_1813CDDC0;
          int8x16_t v76 = (int8x16_t)xmmword_1813CDDB0;
        }

        ++v75;
      }

      while (v75 != v21);
    }

    uint64_t v9 = v9;
    int v16 = v214;
    uint64_t v50 = v50;
    if ((_DWORD)v9 == 1 && *(void *)v11 == a3)
    {
      int v104 = *(_DWORD *)(v14 + 144);
      if ((int)v21 >= 1)
      {
        uint64_t v105 = 0LL;
        uint64_t v106 = (v21 + v104 + 1);
        uint64_t v107 = v217 + 1;
        int8x16_t v108 = (int8x16_t)xmmword_1813CDDB0;
        int8x16_t v109 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v110 = (int8x16_t)xmmword_1813CDDD0;
        v111.i64[0] = 0x1000100010001LL;
        v111.i64[1] = 0x1000100010001LL;
        uint64_t v71 = 1LL;
        uint64_t v112 = v21;
        do
        {
          int v113 = v10[v105];
          uint64_t v114 = (__int16)v113;
          if ((v113 & 0x8000) == 0)
          {
            uint64_t v115 = *(void *)v11;
            if ((*(_DWORD *)(*(void *)v11 + 48LL) & 0x20) != 0)
            {
              uint64_t v116 = *(void *)(v115 + 8);
              if ((unsigned __int16)v10[v105])
              {
                if ((v113 << 16) >= 0x110000)
                {
                  uint64_t v119 = v113 & 0xF;
                  if ((v113 & 0xF) == 0) {
                    uint64_t v119 = 16LL;
                  }
                  uint64_t v117 = v114 - v119;
                  uint64_t v120 = v116 + 142;
                  int16x8_t v121 = 0uLL;
                  uint64_t v122 = v117;
                  int16x8_t v123 = 0uLL;
                  do
                  {
                    int8x16_t v124 = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 64), v109);
                    v124.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 32), v108).i32[3];
                    v125.i32[0] = vzip1q_s16(*(int16x8_t *)(v120 - 128), *(int16x8_t *)(v120 - 112)).u32[0];
                    v125.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 96), v110).i32[1];
                    v125.i64[1] = v124.i64[1];
                    uint16x8_t v126 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v120 + 96), v108);
                    int8x16x2_t v221 = *(int8x16x2_t *)(v120 + 32);
                    int8x16_t v127 = vqtbl2q_s8(*(int8x16x2_t *)(v120 + 64), v109);
                    int16x8_t v129 = *(int16x8_t *)v120;
                    int16x8_t v128 = *(int16x8_t *)(v120 + 16);
                    v120 += 256LL;
                    v127.i32[3] = v126.i32[3];
                    v126.i32[0] = vzip1q_s16(v129, v128).u32[0];
                    v126.i32[1] = vqtbl2q_s8(v221, v110).i32[1];
                    v126.i64[1] = v127.i64[1];
                    int16x8_t v121 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v125, 5uLL)), v121);
                    int16x8_t v123 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v126, 5uLL)), v123);
                    v122 -= 16LL;
                  }

                  while (v122);
                  __int16 v118 = vaddvq_s16(vaddq_s16(v123, v121));
                }

                else
                {
                  uint64_t v117 = 0LL;
                  __int16 v118 = 0;
                }

                uint64_t v130 = v114 - v117;
                uint64_t v131 = (unsigned __int16 *)(v116 + 16 * v117 + 14);
                do
                {
                  unsigned int v132 = *v131;
                  v131 += 8;
                  v118 += ((v132 >> 5) & 1) == 0;
                  --v130;
                }

                while (v130);
              }

              else
              {
                __int16 v118 = 0;
              }

              if ((*(_WORD *)(v116 + 16 * v114 + 14) & 0x20) != 0) {
                LOWORD(v114) = v113 - v118 + *(_WORD *)(v115 + 56);
              }
              else {
                LOWORD(v114) = v118;
              }
            }
          }

          uint64_t v133 = *(__int16 *)(*(void *)(a4 + 8) + 2 * v105);
          __int16 v134 = *(_WORD *)(*(void *)(a4 + 8) + 2 * v105);
          if ((v133 & 0x8000000000000000LL) == 0)
          {
            uint64_t v135 = *(void *)(a4 + 24);
            __int16 v134 = *(_WORD *)(*(void *)(a4 + 8) + 2 * v105);
            if ((*(_DWORD *)(v135 + 48) & 0x20) != 0)
            {
              uint64_t v136 = *(void *)(v135 + 8);
              if (*(_WORD *)(*(void *)(a4 + 8) + 2 * v105))
              {
                uint64_t v137 = v133;
                if (v133 >= 0x11uLL)
                {
                  uint64_t v139 = v133 & 0xF;
                  if ((v133 & 0xF) == 0) {
                    uint64_t v139 = 16LL;
                  }
                  uint64_t v138 = v133 - v139;
                  uint64_t v140 = v136 + 142;
                  int16x8_t v141 = 0uLL;
                  uint64_t v142 = v138;
                  int16x8_t v143 = 0uLL;
                  do
                  {
                    int8x16_t v144 = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 64), v109);
                    v144.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 32), v108).i32[3];
                    v145.i32[0] = vzip1q_s16(*(int16x8_t *)(v140 - 128), *(int16x8_t *)(v140 - 112)).u32[0];
                    v145.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 96), v110).i32[1];
                    v145.i64[1] = v144.i64[1];
                    uint16x8_t v146 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v140 + 96), v108);
                    int8x16x2_t v222 = *(int8x16x2_t *)(v140 + 32);
                    int8x16_t v147 = vqtbl2q_s8(*(int8x16x2_t *)(v140 + 64), v109);
                    int16x8_t v149 = *(int16x8_t *)v140;
                    int16x8_t v148 = *(int16x8_t *)(v140 + 16);
                    v140 += 256LL;
                    v147.i32[3] = v146.i32[3];
                    v146.i32[0] = vzip1q_s16(v149, v148).u32[0];
                    v146.i32[1] = vqtbl2q_s8(v222, v110).i32[1];
                    v146.i64[1] = v147.i64[1];
                    int16x8_t v141 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v145, 5uLL)), v141);
                    int16x8_t v143 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v146, 5uLL)), v143);
                    v142 -= 16LL;
                  }

                  while (v142);
                  __int16 v134 = vaddvq_s16(vaddq_s16(v143, v141));
                }

                else
                {
                  uint64_t v138 = 0LL;
                  __int16 v134 = 0;
                }

                uint64_t v150 = v133 - v138;
                uint64_t v151 = (unsigned __int16 *)(v136 + 16 * v138 + 14);
                do
                {
                  unsigned int v152 = *v151;
                  v151 += 8;
                  v134 += ((v152 >> 5) & 1) == 0;
                  --v150;
                }

                while (v150);
              }

              else
              {
                uint64_t v137 = 0LL;
                __int16 v134 = 0;
              }

              if ((*(_WORD *)(v136 + 16 * v137 + 14) & 0x20) != 0) {
                __int16 v134 = v133 - v134 + *(_WORD *)(v135 + 56);
              }
            }
          }

          uint64_t v153 = (v107 + (__int16)v114);
          else {
            uint64_t v154 = (v107 + v134);
          }
          if (*(_DWORD *)(v14 + 148) <= v104)
          {
            uint64_t v156 = v52;
            uint64_t v157 = v112;
            uint64_t v158 = v11;
            uint64_t v159 = v10;
            uint64_t v160 = v17;
            uint64_t v161 = v107;
            sub_18131044C(v14, 52LL, v153, v106, v154, v70, 1LL, v72);
            uint64_t v71 = 1LL;
            uint64_t v107 = v161;
            uint64_t v17 = v160;
            uint64_t v10 = v159;
            uint64_t v11 = v158;
            uint64_t v112 = v157;
            uint64_t v52 = v156;
            v111.i64[0] = 0x1000100010001LL;
            v111.i64[1] = 0x1000100010001LL;
            int8x16_t v110 = (int8x16_t)xmmword_1813CDDD0;
            int8x16_t v109 = (int8x16_t)xmmword_1813CDDC0;
            int8x16_t v108 = (int8x16_t)xmmword_1813CDDB0;
          }

          else
          {
            *(_DWORD *)(v14 + 144) = v104 + 1;
            uint64_t v155 = *(void *)(v14 + 136) + 40LL * v104;
            *(_DWORD *)uint64_t v155 = 52;
            *(_DWORD *)(v155 + 4) = v153;
            *(_DWORD *)(v155 + 8) = v106;
            *(_DWORD *)(v155 + 12) = v154;
            *(void *)(v155 + 24) = 0LL;
            *(void *)(v155 + 32) = 0LL;
            *(void *)(v155 + 16) = 0LL;
          }

          int v104 = *(_DWORD *)(v14 + 144);
          if (v104 >= 1) {
            *(_WORD *)(*(void *)(v14 + 136) + 40LL * (v104 - 1) + 2) = 16;
          }
          ++v105;
        }

        while (v105 != v112);
      }

      uint64_t v9 = 1LL;
      int v16 = v214;
      uint64_t v13 = v212;
      uint64_t v50 = v215;
      if (*(_DWORD *)(v14 + 148) <= v104)
      {
        sub_18131044C(v14, 9LL, 0LL, v17, 0LL, v70, v71, v72);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v104 + 1;
        uint64_t v162 = *(void *)(v14 + 136) + 40LL * v104;
        *(void *)uint64_t v162 = 9LL;
        *(_DWORD *)(v162 + 8) = v17;
        *(void *)(v162 + 12) = 0LL;
        *(void *)(v162 + 28) = 0LL;
        *(void *)(v162 + 20) = 0LL;
        *(_DWORD *)(v162 + 36) = 0;
      }
    }

    uint64_t v163 = *(void *)(a4 + 32);
    if (!v163) {
      uint64_t v163 = sub_181338578(*v13, a4);
    }
    sub_1812B9B68((uint64_t *)v14, 96LL, v52, v21, 0LL, v163, v21, v72);
    int v164 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v164)
    {
      sub_181310690(v14, 29LL, v50, v17, v52, v21, a7, a8);
      if ((_DWORD)v21 != 1) {
        goto LABEL_134;
      }
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v164 + 1;
      uint64_t v165 = *(void *)(v14 + 136) + 40LL * v164;
      *(_DWORD *)uint64_t v165 = 64797;
      *(_DWORD *)(v165 + 4) = v50;
      *(_DWORD *)(v165 + 8) = v17;
      *(_DWORD *)(v165 + 12) = v52;
      *(_DWORD *)(v165 + 16) = v21;
      *(void *)(v165 + 24) = 0LL;
      *(void *)(v165 + 32) = 0LL;
      if ((_DWORD)v21 != 1)
      {
LABEL_134:
        *((_DWORD *)v13 + 10) = v21;
        int v166 = (_DWORD *)v13 + 11;
        goto LABEL_140;
      }
    }

    if ((_DWORD)v52)
    {
      uint64_t v167 = *((unsigned __int8 *)v13 + 31);
      if (v167 <= 7)
      {
        *((_BYTE *)v13 + 31) = v167 + 1;
        int v166 = (_DWORD *)v13 + v167 + 56;
LABEL_140:
        *int v166 = v52;
      }
    }
  }

  else
  {
    if (*((_BYTE *)v13 + 31))
    {
      unsigned __int8 v53 = *((_BYTE *)v13 + 31) - 1;
      *((_BYTE *)v13 + 31) = v53;
      uint64_t v54 = *((unsigned int *)v13 + v53 + 56);
    }

    else
    {
      uint64_t v54 = (*((_DWORD *)v13 + 14) + 1);
      *((_DWORD *)v13 + 14) = v54;
    }

    int v59 = *v10;
    uint64_t v60 = (__int16)*v10;
    if ((*v10 & 0x8000) == 0)
    {
      uint64_t v61 = *(void *)v11;
      if ((*(_DWORD *)(*(void *)v11 + 48LL) & 0x20) != 0)
      {
        uint64_t v62 = *(void *)(v61 + 8);
        if ((unsigned __int16)*v10)
        {
          if ((v59 << 16) >= 0x110000)
          {
            uint64_t v168 = *v10 & 0xF;
            if ((*v10 & 0xF) == 0) {
              uint64_t v168 = 16LL;
            }
            uint64_t v63 = v60 - v168;
            uint64_t v169 = v62 + 142;
            int16x8_t v170 = 0uLL;
            v171.i64[0] = 0x1000100010001LL;
            v171.i64[1] = 0x1000100010001LL;
            uint64_t v172 = v63;
            int16x8_t v173 = 0uLL;
            do
            {
              int8x16_t v174 = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 64), (int8x16_t)xmmword_1813CDDC0);
              v174.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
              v175.i32[0] = vzip1q_s16(*(int16x8_t *)(v169 - 128), *(int16x8_t *)(v169 - 112)).u32[0];
              v175.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
              v175.i64[1] = v174.i64[1];
              uint16x8_t v176 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v169 + 96), (int8x16_t)xmmword_1813CDDB0);
              int8x16x2_t v223 = *(int8x16x2_t *)(v169 + 32);
              int8x16_t v177 = vqtbl2q_s8(*(int8x16x2_t *)(v169 + 64), (int8x16_t)xmmword_1813CDDC0);
              int16x8_t v179 = *(int16x8_t *)v169;
              int16x8_t v178 = *(int16x8_t *)(v169 + 16);
              v169 += 256LL;
              v177.i32[3] = v176.i32[3];
              v176.i32[0] = vzip1q_s16(v179, v178).u32[0];
              v176.i32[1] = vqtbl2q_s8(v223, (int8x16_t)xmmword_1813CDDD0).i32[1];
              v176.i64[1] = v177.i64[1];
              int16x8_t v170 = vaddq_s16((int16x8_t)vbicq_s8(v171, (int8x16_t)vshrq_n_u16(v175, 5uLL)), v170);
              int16x8_t v173 = vaddq_s16((int16x8_t)vbicq_s8(v171, (int8x16_t)vshrq_n_u16(v176, 5uLL)), v173);
              v172 -= 16LL;
            }

            while (v172);
            __int16 v64 = vaddvq_s16(vaddq_s16(v173, v170));
          }

          else
          {
            uint64_t v63 = 0LL;
            __int16 v64 = 0;
          }

          uint64_t v180 = v60 - v63;
          v181 = (unsigned __int16 *)(v62 + 16 * v63 + 14);
          do
          {
            unsigned int v182 = *v181;
            v181 += 8;
            v64 += ((v182 >> 5) & 1) == 0;
            --v180;
          }

          while (v180);
        }

        else
        {
          __int16 v64 = 0;
        }

        if ((*(_WORD *)(v62 + 16 * v60 + 14) & 0x20) != 0) {
          LOWORD(v60) = v59 - v64 + *(_WORD *)(v61 + 56);
        }
        else {
          LOWORD(v60) = v64;
        }
      }
    }

    uint64_t v183 = v217 + (__int16)v60 + 1;
    int v184 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v184)
    {
      sub_18131044C(v14, 81LL, v183, v54, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v184 + 1;
      uint64_t v185 = *(void *)(v14 + 136) + 40LL * v184;
      *(_DWORD *)uint64_t v185 = 81;
      *(_DWORD *)(v185 + 4) = v183;
      *(_DWORD *)(v185 + 8) = v54;
      *(void *)(v185 + 12) = 0LL;
      *(void *)(v185 + 28) = 0LL;
      *(void *)(v185 + 20) = 0LL;
      *(_DWORD *)(v185 + 36) = 0;
    }

    int v186 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v186)
    {
      int v186 = sub_18131044C(v14, 13LL, v54, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v186 + 1;
      uint64_t v187 = *(void *)(v14 + 136) + 40LL * v186;
      *(_DWORD *)uint64_t v187 = 13;
      *(_DWORD *)(v187 + 4) = v54;
      *(_OWORD *)(v187 + 8) = 0u;
      *(_OWORD *)(v187 + 24) = 0u;
    }

    if ((_DWORD)v9 == 1 && *(void *)v11 == a3)
    {
      int v188 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v188)
      {
        sub_18131044C(v14, 53LL, v217, v17, v54, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v188 + 1;
        uint64_t v189 = *(void *)(v14 + 136) + 40LL * v188;
        *(_DWORD *)uint64_t v189 = 53;
        *(_DWORD *)(v189 + 4) = v217;
        *(_DWORD *)(v189 + 8) = v17;
        *(_DWORD *)(v189 + 12) = v54;
        *(void *)(v189 + 24) = 0LL;
        *(void *)(v189 + 32) = 0LL;
        *(void *)(v189 + 16) = 0LL;
      }

      int v190 = *(_DWORD *)(v14 + 144);
      BOOL v56 = __OFSUB__(v190, 1);
      int v191 = v190 - 1;
      if (v191 < 0 == v56) {
        *(_WORD *)(*(void *)(v14 + 136) + 40LL * v191 + 2) = 144;
      }
    }

    sub_18128BBE0(v13, v50, v211, a3, 112LL, a6, a7, a8);
    int v192 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v192)
    {
      sub_18131044C(v14, 31LL, v50, 0LL, v54, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v192 + 1;
      uint64_t v193 = *(void *)(v14 + 136) + 40LL * v192;
      *(_DWORD *)uint64_t v193 = 31;
      *(_DWORD *)(v193 + 4) = v50;
      *(_DWORD *)(v193 + 8) = 0;
      *(_DWORD *)(v193 + 12) = v54;
      *(void *)(v193 + 24) = 0LL;
      *(void *)(v193 + 32) = 0LL;
      *(void *)(v193 + 16) = 0LL;
    }

    int v194 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v194)
    {
      sub_18131044C(v14, 9LL, 0LL, v17, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v194 + 1;
      uint64_t v195 = *(void *)(v14 + 136) + 40LL * v194;
      *(void *)uint64_t v195 = 9LL;
      *(_DWORD *)(v195 + 8) = v17;
      *(void *)(v195 + 12) = 0LL;
      *(void *)(v195 + 28) = 0LL;
      *(void *)(v195 + 20) = 0LL;
      *(_DWORD *)(v195 + 36) = 0;
    }

    int v196 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(void *)v14 + 103LL))
    {
      dword_18C550688 = *(_DWORD *)(v14 + 144);
      if (!(_DWORD)v54) {
        goto LABEL_177;
      }
    }

    else
    {
      uint64_t v197 = *(void *)(v14 + 136);
      *(_DWORD *)(v197 + 40LL * (v196 - 2) + 8) = v196;
      *(_DWORD *)(v197 + 40LL * v186 + 8) = v196;
      if (!(_DWORD)v54) {
        goto LABEL_177;
      }
    }

    uint64_t v198 = *((unsigned __int8 *)v13 + 31);
    if (v198 <= 7)
    {
      *((_BYTE *)v13 + 31) = v198 + 1;
      *((_DWORD *)v13 + v198 + 56) = v54;
    }
  }

uint64_t sub_181341A00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a8;
  int v69 = a7;
  uint64_t v9 = a5;
  uint64_t v10 = a3;
  uint64_t v70 = a4;
  uint64_t v71 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    if ((a8 & 0x80000000) == 0)
    {
LABEL_3:
      int v14 = 0;
      goto LABEL_11;
    }
  }

  else
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(v71 + 96) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v13 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    a4 = v70;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }

  a3 = *(unsigned __int8 *)(v9 + 44);
  int v14 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) <= v14)
  {
    int v14 = sub_18131044C(v13, 49LL, a3, 0LL, 0LL, a6, a7, a8);
    a4 = v70;
  }

  else
  {
    *(_DWORD *)(v13 + 144) = v14 + 1;
    uint64_t v15 = *(void *)(v13 + 136) + 40LL * v14;
    *(_DWORD *)uint64_t v15 = 49;
    *(_DWORD *)(v15 + 4) = a3;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
  }

uint64_t sub_181341F78(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = sub_1812F2264(*a1, 0x51uLL);
  uint64_t v10 = v9;
  if (v9)
  {
    int16x8_t v11 = 0uLL;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_BYTE *)uint64_t v9 = -80;
    *(_WORD *)(v9 + 52) = -1;
    *(_BYTE *)(v9 + 80) = 0;
    *(void *)(v9 + 8) = v9 + 80;
    *(_DWORD *)(v9 + 40) = 1;
    if ((a4 & 0x80000000) != 0 || *(unsigned __int16 *)(a2 + 52) == (unsigned __int16)a4)
    {
      *(_DWORD *)(v9 + 44) = a3;
      *(_BYTE *)(v9 + 1) = 68;
    }

    else
    {
      uint64_t v13 = *(void *)(a2 + 8);
      if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
      {
        if (a4)
        {
          if (a4 >= 0x11)
          {
            uint64_t v17 = a4 & 0xF;
            if ((a4 & 0xF) == 0) {
              uint64_t v17 = 16LL;
            }
            uint64_t v16 = (unsigned __int16)a4 - v17;
            uint64_t v18 = v13 + 142;
            v19.i64[0] = 0x1000100010001LL;
            v19.i64[1] = 0x1000100010001LL;
            uint64_t v20 = v16;
            int16x8_t v21 = 0uLL;
            do
            {
              int8x16_t v22 = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 64), (int8x16_t)xmmword_1813CDDC0);
              v22.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
              v23.i32[0] = vzip1q_s16(*(int16x8_t *)(v18 - 128), *(int16x8_t *)(v18 - 112)).u32[0];
              v23.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
              v23.i64[1] = v22.i64[1];
              uint16x8_t v24 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v18 + 96), (int8x16_t)xmmword_1813CDDB0);
              int8x16x2_t v39 = *(int8x16x2_t *)(v18 + 32);
              int8x16_t v25 = vqtbl2q_s8(*(int8x16x2_t *)(v18 + 64), (int8x16_t)xmmword_1813CDDC0);
              int16x8_t v27 = *(int16x8_t *)v18;
              int16x8_t v26 = *(int16x8_t *)(v18 + 16);
              v18 += 256LL;
              v25.i32[3] = v24.i32[3];
              v24.i32[0] = vzip1q_s16(v27, v26).u32[0];
              v24.i32[1] = vqtbl2q_s8(v39, (int8x16_t)xmmword_1813CDDD0).i32[1];
              v24.i64[1] = v25.i64[1];
              int16x8_t v11 = vaddq_s16((int16x8_t)vbicq_s8(v19, (int8x16_t)vshrq_n_u16(v23, 5uLL)), v11);
              int16x8_t v21 = vaddq_s16((int16x8_t)vbicq_s8(v19, (int8x16_t)vshrq_n_u16(v24, 5uLL)), v21);
              v20 -= 16LL;
            }

            while (v20);
            __int16 v15 = vaddvq_s16(vaddq_s16(v21, v11));
          }

          else
          {
            uint64_t v16 = 0LL;
            __int16 v15 = 0;
          }

          uint64_t v28 = (unsigned __int16)a4 - v16;
          uint64_t v29 = (unsigned __int16 *)(v13 + 16 * v16 + 14);
          do
          {
            unsigned int v30 = *v29;
            v29 += 8;
            v15 += ((v30 >> 5) & 1) == 0;
            --v28;
          }

          while (v28);
        }

        else
        {
          __int16 v15 = 0;
        }

        __int16 v14 = *(_WORD *)(v13 + 16LL * (unsigned __int16)a4 + 14);
        if ((v14 & 0x20) != 0) {
          __int16 v15 = a4 - v15 + *(_WORD *)(a2 + 56);
        }
      }

      else
      {
        __int16 v14 = *(_WORD *)(v13 + 16LL * (unsigned __int16)a4 + 14);
        __int16 v15 = a4;
      }

      *(_DWORD *)(v9 + 44) = a3 + v15 + 1;
      *(_BYTE *)(v9 + 1) = *(_BYTE *)(v13 + 16LL * (unsigned __int16)a4 + 9);
      if ((v14 & 0x200) != 0)
      {
        uint64_t v32 = *(void *)(v13 + 16LL * (unsigned __int16)a4) - 1LL;
        if ((v14 & 4) != 0)
        {
        }

        uint64_t v31 = (const char *)(v32 + 1);
      }

      else
      {
        uint64_t v31 = **(const char ***)(v8 + 16);
        if (!v31) {
          return v10;
        }
      }

      size_t v35 = strlen(v31) & 0x3FFFFFFF;
      if (v35)
      {
        uint64_t v36 = sub_1812F2264(*a1, v35 + 81);
        if (v36)
        {
          uint64_t v37 = v36;
          *(_OWORD *)(v36 + 48) = 0u;
          *(_OWORD *)(v36 + 64) = 0u;
          *(_OWORD *)(v36 + 16) = 0u;
          *(_OWORD *)(v36 + 32) = 0u;
          *(_OWORD *)uint64_t v36 = 0u;
          *(_BYTE *)uint64_t v36 = 113;
          *(_WORD *)(v36 + 52) = -1;
          uint64_t v38 = v36 + 80;
          *(void *)(v36 + 8) = v36 + 80;
          memcpy((void *)(v36 + 80), v31, v35);
          *(_BYTE *)(v38 + v35) = 0;
          *(_DWORD *)(v37 + 40) = 1;
          *(void *)(v37 + 16) = v10;
          *(_DWORD *)(v37 + 4) |= 0x2200u;
          return v37;
        }
      }
    }
  }

  return v10;
}

void *sub_181342228( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  uint64_t v9 = (int *)a3;
  int16x8_t v11 = (void *)*a1;
  if (a4) {
    uint64_t v12 = a3 + 1;
  }
  else {
    uint64_t v12 = a3;
  }
  int v13 = *(unsigned __int8 *)(v12 + 45);
  if (v13 == 7 && (*((_BYTE *)v11 + 50) & 8) != 0) {
    return 0LL;
  }
  uint64_t v14 = a3 + 8LL * (a4 != 0);
  uint64_t v17 = *(void **)(v14 + 48);
  __int16 v15 = (void *)(v14 + 48);
  uint64_t v16 = v17;
  if (*(_BYTE *)(v12 + 45)) {
    BOOL v18 = v16 == 0LL;
  }
  else {
    BOOL v18 = 0;
  }
  if (!v18) {
    return v16;
  }
  __int16 v134 = 0LL;
  uint64_t v135 = 0LL;
  uint64_t v133 = a1;
  int v119 = v13;
  uint64_t v117 = v15;
  uint64_t v125 = a2;
  uint64_t v132 = (uint64_t)v11;
  if (v9[10] >= 1)
  {
    uint64_t v20 = a2;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v130 = 0LL;
    uint64_t v123 = 0LL;
    int8x16_t v124 = v9;
    uint16x8_t v24 = 0LL;
    int16x8_t v121 = (__int16 *)(a2 + 52);
    uint64_t v122 = v9 + 16;
    if (v8) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v119 == 10;
    }
    int v27 = !v25 && v119 != 7;
    int v120 = v27;
    uint64_t v118 = v8;
    while (1)
    {
      uint64_t v29 = v122;
      if (v134) {
        uint64_t v29 = (int *)((char *)v134 + v22);
      }
      unsigned int v30 = v121;
      if (v135) {
        unsigned int v30 = (__int16 *)(*(void *)(v135 + 8) + v21);
      }
      uint64_t v31 = *v29;
      uint64_t v32 = *(const char **)(*(void *)(v20 + 8) + 16LL * *v30);
      __src = v32;
      if (v32) {
        size_t v33 = strlen(v32) & 0x3FFFFFFF;
      }
      else {
        size_t v33 = 0LL;
      }
      uint64_t v34 = *(const char **)(*(void *)(*(void *)v9 + 8LL) + 16 * v31);
      int16x8_t v128 = v24;
      uint16x8_t v126 = v34;
      if (v34) {
        size_t v131 = strlen(v34) & 0x3FFFFFFF;
      }
      else {
        size_t v131 = 0LL;
      }
      uint64_t v35 = sub_1812F2264((uint64_t)v11, 0x54uLL);
      uint64_t v36 = v35;
      if (v35)
      {
        *(_OWORD *)(v35 + 32) = 0u;
        *(_OWORD *)(v35 + 48) = 0u;
        *(_OWORD *)(v35 + 64) = 0u;
        *(_OWORD *)uint64_t v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_BYTE *)uint64_t v35 = 59;
        *(_WORD *)(v35 + 52) = -1;
        *(_DWORD *)(v35 + 80) = 6581359;
        *(void *)(v35 + 8) = v35 + 80;
        *(_DWORD *)(v35 + 40) = 1;
      }

      uint64_t v37 = sub_1812F2264((uint64_t)v11, v33 + 81);
      uint64_t v38 = v37;
      if (v37)
      {
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)(v37 + 64) = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        *(_BYTE *)uint64_t v37 = 59;
        *(_WORD *)(v37 + 52) = -1;
        uint64_t v39 = v37 + 80;
        *(void *)(v37 + 8) = v37 + 80;
        if (v33)
        {
          memcpy((void *)(v37 + 80), __src, v33);
          size_t v40 = v33;
        }

        else
        {
          size_t v40 = 0LL;
        }

        *(_BYTE *)(v39 + v40) = 0;
        *(_DWORD *)(v38 + 40) = 1;
        int16x8_t v11 = (void *)v132;
      }

      uint64_t v41 = v8;
      uint64_t v42 = sub_1813132BC(v133, 141, v36, v38);
      uint64_t v43 = sub_1812F2264((uint64_t)v11, v131 + 81);
      uint64_t v44 = v43;
      if (v43)
      {
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)(v43 + 64) = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)uint64_t v43 = 0u;
        *(_BYTE *)uint64_t v43 = 59;
        *(_WORD *)(v43 + 52) = -1;
        uint64_t v45 = v43 + 80;
        *(void *)(v43 + 8) = v43 + 80;
        if (v131) {
          memcpy((void *)(v43 + 80), v126, v131);
        }
        *(_BYTE *)(v45 + v131) = 0;
        *(_DWORD *)(v44 + 40) = 1;
        int16x8_t v11 = (void *)v132;
      }

      uint64_t v46 = sub_1813132BC(v133, 53, v42, v44);
      uint64_t v130 = (unsigned __int8 *)sub_1813152F8(v133, (uint64_t)v130, v46);
      if (v8)
      {
        uint64_t v47 = sub_1812F2264((uint64_t)v11, 0x54uLL);
        uint64_t v48 = v47;
        if (v47)
        {
          *(_OWORD *)(v47 + 32) = 0u;
          *(_OWORD *)(v47 + 48) = 0u;
          *(_OWORD *)(v47 + 64) = 0u;
          *(_OWORD *)uint64_t v47 = 0u;
          *(_OWORD *)(v47 + 16) = 0u;
          *(_BYTE *)uint64_t v47 = 59;
          *(_WORD *)(v47 + 52) = -1;
          *(_DWORD *)(v47 + 80) = 6581359;
          *(void *)(v47 + 8) = v47 + 80;
          *(_DWORD *)(v47 + 40) = 1;
        }

        uint64_t v49 = sub_1812F2264((uint64_t)v11, v33 + 81);
        uint64_t v50 = v49;
        if (v49)
        {
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)uint64_t v49 = 0u;
          *(_BYTE *)uint64_t v49 = 59;
          *(_WORD *)(v49 + 52) = -1;
          uint64_t v51 = v49 + 80;
          *(void *)(v49 + 8) = v49 + 80;
          if (v33)
          {
            memcpy((void *)(v49 + 80), __src, v33);
            size_t v52 = v33;
          }

          else
          {
            size_t v52 = 0LL;
          }

          *(_BYTE *)(v51 + v52) = 0;
          *(_DWORD *)(v50 + 40) = 1;
          int16x8_t v11 = (void *)v132;
        }

        uint64_t v53 = sub_1813132BC(v133, 141, v48, v50);
        uint64_t v54 = sub_1812F2264((uint64_t)v11, 0x54uLL);
        uint64_t v55 = v54;
        if (v54)
        {
          *(_OWORD *)(v54 + 32) = 0u;
          *(_OWORD *)(v54 + 48) = 0u;
          *(_OWORD *)(v54 + 64) = 0u;
          *(_OWORD *)uint64_t v54 = 0u;
          *(_OWORD *)(v54 + 16) = 0u;
          *(_BYTE *)uint64_t v54 = 59;
          *(_WORD *)(v54 + 52) = -1;
          *(_DWORD *)(v54 + 80) = 7824750;
          *(void *)(v54 + 8) = v54 + 80;
          *(_DWORD *)(v54 + 40) = 1;
        }

        uint64_t v56 = sub_1812F2264((uint64_t)v11, v33 + 81);
        uint64_t v57 = v56;
        if (v56)
        {
          *(_OWORD *)(v56 + 48) = 0u;
          *(_OWORD *)(v56 + 64) = 0u;
          *(_OWORD *)(v56 + 16) = 0u;
          *(_OWORD *)(v56 + 32) = 0u;
          *(_OWORD *)uint64_t v56 = 0u;
          *(_BYTE *)uint64_t v56 = 59;
          *(_WORD *)(v56 + 52) = -1;
          uint64_t v58 = v56 + 80;
          *(void *)(v56 + 8) = v56 + 80;
          if (v33)
          {
            memcpy((void *)(v56 + 80), __src, v33);
            size_t v59 = v33;
          }

          else
          {
            size_t v59 = 0LL;
          }

          *(_BYTE *)(v58 + v59) = 0;
          *(_DWORD *)(v57 + 40) = 1;
          uint64_t v8 = v41;
        }

        uint64_t v60 = sub_1813132BC(v133, 141, v55, v57);
        uint64_t v61 = sub_1813132BC(v133, 45, v53, v60);
        uint64_t v123 = sub_1813152F8(v133, v123, v61);
        uint64_t v9 = v124;
        uint64_t v20 = v125;
        int16x8_t v11 = (void *)v132;
        uint16x8_t v24 = v128;
        if (!v120) {
          goto LABEL_25;
        }
      }

      else
      {
        uint16x8_t v24 = v128;
        uint64_t v9 = v124;
        uint64_t v20 = v125;
        if (!v120) {
          goto LABEL_25;
        }
      }

      if (v119 == 9)
      {
        uint64_t v71 = *(void *)v9;
        uint64_t v72 = *(void *)(*(void *)v9 + 8LL) + 16 * v31;
        if ((*(_WORD *)(v72 + 14) & 0x60) == 0)
        {
          int v79 = *(unsigned __int16 *)(v72 + 12);
          if (v79)
          {
            if (!*(_BYTE *)(v71 + 63))
            {
              uint64_t v80 = *(_DWORD **)(v71 + 80);
              if (v80)
              {
                if (*v80 >= v79)
                {
                  int v81 = *(unsigned __int8 **)&v80[6 * (v79 - 1) + 2];
                  if (v81)
                  {
                    int v69 = (unsigned __int8 *)sub_18129C928((uint64_t)v11, v81, 0LL, 0LL);
                    if (v24) {
                      goto LABEL_80;
                    }
                    goto LABEL_74;
                  }
                }
              }
            }
          }
        }

        uint64_t v62 = (uint64_t)v11;
      }

      else
      {
        uint64_t v62 = (uint64_t)v11;
        if (v119 == 10)
        {
          uint64_t v63 = sub_1812F2264((uint64_t)v11, 0x54uLL);
          uint64_t v64 = v63;
          if (v63)
          {
            *(_OWORD *)(v63 + 32) = 0u;
            *(_OWORD *)(v63 + 48) = 0u;
            *(_OWORD *)(v63 + 64) = 0u;
            *(_OWORD *)uint64_t v63 = 0u;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_BYTE *)uint64_t v63 = 59;
            *(_WORD *)(v63 + 52) = -1;
            *(_DWORD *)(v63 + 80) = 7824750;
            *(void *)(v63 + 8) = v63 + 80;
            *(_DWORD *)(v63 + 40) = 1;
          }

          uint64_t v65 = sub_1812F2264((uint64_t)v11, v33 + 81);
          uint64_t v66 = v65;
          if (v65)
          {
            uint64_t v67 = v24;
            *(_OWORD *)(v65 + 48) = 0u;
            *(_OWORD *)(v65 + 64) = 0u;
            *(_OWORD *)(v65 + 16) = 0u;
            *(_OWORD *)(v65 + 32) = 0u;
            *(_OWORD *)uint64_t v65 = 0u;
            *(_BYTE *)uint64_t v65 = 59;
            *(_WORD *)(v65 + 52) = -1;
            uint64_t v68 = v65 + 80;
            *(void *)(v65 + 8) = v65 + 80;
            if (v33) {
              memcpy((void *)(v65 + 80), __src, v33);
            }
            *(_BYTE *)(v68 + v33) = 0;
            *(_DWORD *)(v66 + 40) = 1;
            uint16x8_t v24 = v67;
            uint64_t v8 = v118;
          }

          int v69 = (unsigned __int8 *)sub_1813132BC(v133, 141, v64, v66);
          if (v24) {
            goto LABEL_80;
          }
          goto LABEL_74;
        }
      }

      uint64_t v73 = sub_1812F2264(v62, 0x50uLL);
      int v69 = (unsigned __int8 *)v73;
      if (v73)
      {
        *(_OWORD *)(v73 + 32) = 0u;
        *(_OWORD *)(v73 + 48) = 0u;
        *(_OWORD *)(v73 + 64) = 0u;
        *(_OWORD *)uint64_t v73 = 0u;
        *(_OWORD *)(v73 + 16) = 0u;
        *(_BYTE *)uint64_t v73 = 121;
        *(_WORD *)(v73 + 52) = -1;
        *(_DWORD *)(v73 + 40) = 1;
      }

      if (v24)
      {
LABEL_80:
        int v74 = *v24;
        if (v24[1] > *v24)
        {
          *uint16x8_t v24 = v74 + 1;
          uint64_t v75 = &v24[6 * v74];
          *((void *)v75 + 2) = 0LL;
          *((void *)v75 + 3) = 0LL;
          *((void *)v75 + 1) = v69;
          int8x16_t v76 = v126;
LABEL_84:
          uint64_t v77 = *v24;
          if (v76)
          {
            int8x16_t v78 = (_BYTE *)sub_1812F2264(*v133, v131 + 1);
            uint64_t v28 = v78;
            if (v78)
            {
              memcpy(v78, v76, v131);
              v28[v131] = 0;
            }
          }

          else
          {
            uint64_t v28 = 0LL;
          }

          *(void *)&v24[6 * v77 - 2] = v28;
          uint64_t v9 = v124;
          uint64_t v20 = v125;
          goto LABEL_25;
        }

        uint64_t v70 = sub_18133E1F4(*v133, v24, v69);
        goto LABEL_83;
      }

void sub_181342D84( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t **)a1[20];
  if (v8)
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *a1;
    do
    {
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *((unsigned int *)v8 + 5);
      uint64_t v14 = *((int *)v8 + 4);
      if (*((_BYTE *)a1 + 31))
      {
        unsigned __int8 v15 = *((_BYTE *)a1 + 31) - 1;
        *((_BYTE *)a1 + 31) = v15;
        int v16 = *((_DWORD *)a1 + v15 + 56);
      }

      else
      {
        int v16 = *((_DWORD *)a1 + 14) + 1;
        *((_DWORD *)a1 + 14) = v16;
      }

      uint64_t v17 = (v13 + 2);
      int v18 = *(_DWORD *)(v10 + 144);
      uint64_t v19 = (v18 + 7);
      if (*(_DWORD *)(v10 + 148) <= v18)
      {
        sub_18131044C(v10, 55LL, v17, v19, v13, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v18 + 1;
        uint64_t v20 = *(void *)(v10 + 136) + 40LL * v18;
        *(_DWORD *)uint64_t v20 = 55;
        *(_DWORD *)(v20 + 4) = v17;
        *(_DWORD *)(v20 + 8) = v19;
        *(_DWORD *)(v20 + 12) = v13;
        *(void *)(v20 + 24) = 0LL;
        *(void *)(v20 + 32) = 0LL;
        *(void *)(v20 + 16) = 0LL;
      }

      sub_18128BBE0( a1,  0LL,  *((unsigned int *)v8 + 4),  *(void *)(*(void *)(v12 + 32 * v14 + 24) + 104LL),  113LL,  a6,  a7,  a8);
      int v25 = *(_DWORD *)(v10 + 144);
      if (v25 + 5 > *(_DWORD *)(v10 + 148))
      {
        int v25 = *(_DWORD *)(v10 + 144);
      }

      uint64_t v26 = *(void *)(v10 + 136) + 40LL * v25;
      *(_DWORD *)uint64_t v26 = 51;
      *(void *)(v26 + 16) = 0LL;
      *(void *)(v26 + 49) = 0LL;
      *(void *)(v26 + 41) = 0LL;
      *(void *)(v26 + 56) = 0LL;
      *(_DWORD *)(v26 + 80) = 97;
      *(void *)(v26 + 96) = 0LL;
      *(void *)(v26 + 129) = 0LL;
      *(void *)(v26 + 121) = 0LL;
      *(void *)(v26 + 136) = 0LL;
      *(void *)(v26 + 169) = 0LL;
      *(void *)(v26 + 161) = 0LL;
      *(void *)(v26 + 176) = 0LL;
      *(_DWORD *)(v10 + 144) += 5;
      *(_DWORD *)(v26 + 8) = v25 + 2;
      *(_DWORD *)(v26 + 12) = 0;
      *(_BYTE *)(v26 + 40) = 127;
      *(_BYTE *)(v26 + 120) = 0x80;
      *(_BYTE *)(v26 + 160) = 122;
      *(_DWORD *)(v26 + 4) = v13 + 1;
      *(_DWORD *)(v26 + 48) = v13 + 1;
      *(_DWORD *)(v26 + 84) = v13 - 1;
      *(_DWORD *)(v26 + 88) = 2;
      *(_DWORD *)(v26 + 92) = v16;
      *(_DWORD *)(v26 + 128) = v16;
      *(_DWORD *)(v26 + 132) = v13 + 1;
      *(_WORD *)(v26 + 122) = 8;
      if (v16)
      {
        uint64_t v27 = *((unsigned __int8 *)a1 + 31);
        if (v27 <= 7)
        {
          *((_BYTE *)a1 + 31) = v27 + 1;
          *((_DWORD *)a1 + v27 + 56) = v16;
        }
      }

      uint64_t v8 = (uint64_t **)*v8;
    }

    while (v8);
  }

void *sub_181342F60(void *a1, void *a2)
{
  sub_181268E88(*(void *)(a1[4] + 56LL) + 56LL, "sqlite_returning", 0LL);
  int v4 = (void *)a2[1];
  if (v4) {
    sub_181311F48(a1, v4);
  }
  return sub_1812F20DC(a1, a2);
}

void *sub_181342FB4( void **a1, int *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8)
{
  int v8 = a8;
  uint64_t v11 = (uint64_t)a1[2];
  uint64_t v12 = *a1;
  for (uint64_t i = *(void **)(a3 + 80); i; uint64_t i = (void *)i[5])
  {
    if ((void *)*i == v12) {
      break;
    }
  }

  int v14 = *(__int16 *)(a3 + 54);
  int v15 = v14 + 2;
  unsigned int v144 = a2[18];
  uint64_t v16 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v16 + 1;
  int v17 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v17)
  {
    uint64_t v19 = a2;
    int v20 = sub_18131044C(v11, 118LL, v16, (v14 + 2), 0LL, a6, (uint64_t)a7, a8);
    a2 = v19;
    int v141 = v20;
  }

  else
  {
    int v141 = *(_DWORD *)(v11 + 144);
    *(_DWORD *)(v11 + 144) = v17 + 1;
    uint64_t v18 = *(void *)(v11 + 136) + 40LL * v17;
    *(_DWORD *)uint64_t v18 = 118;
    *(_DWORD *)(v18 + 4) = v16;
    *(_DWORD *)(v18 + 8) = v15;
    *(void *)(v18 + 12) = 0LL;
    *(void *)(v18 + 28) = 0LL;
    *(void *)(v18 + 20) = 0LL;
    *(_DWORD *)(v18 + 36) = 0;
  }

  int v21 = *((_DWORD *)a1 + 14);
  unsigned int v137 = v21 + 1;
  int v22 = v21 + v15;
  *((_DWORD *)a1 + 14) = v21 + v15;
  uint64_t v142 = a2;
  if (*a2 < 2)
  {
    unsigned int v132 = v22 + 2;
    int v133 = v21 + v15;
    *((_DWORD *)a1 + 14) = v22 + 2;
    uint64_t result = (void *)sub_18128A51C((uint64_t)a1, a2, (uint64_t)a7, 0LL, 0LL, 0LL, 4LL, 0LL);
    uint64_t v139 = result;
    if (!result) {
      return result;
    }
    int v136 = v14;
    int v140 = v14 + 2;
    int v134 = v8;
    unsigned int v143 = v16;
    if (*(__int16 *)(a3 + 54) >= 1)
    {
      uint64_t v35 = 0LL;
      uint64_t v36 = (v21 + 3);
      do
      {
        unsigned int v37 = *(_DWORD *)(a6 + 4 * v35);
        if ((v37 & 0x80000000) != 0)
        {
          uint64_t v30 = v36 + v35;
          int v38 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v38)
          {
            sub_18131044C(v11, 175LL, v144, v35, v30, v31, v32, v33);
          }

          else
          {
            *(_DWORD *)(v11 + 144) = v38 + 1;
            uint64_t v39 = *(void *)(v11 + 136) + 40LL * v38;
            *(_DWORD *)uint64_t v39 = 175;
            *(_DWORD *)(v39 + 4) = v144;
            *(_DWORD *)(v39 + 8) = v35;
            *(_DWORD *)(v39 + 12) = v30;
            *(void *)(v39 + 24) = 0LL;
            *(void *)(v39 + 32) = 0LL;
            *(void *)(v39 + 16) = 0LL;
          }

          int v40 = *(_DWORD *)(v11 + 144);
          BOOL v41 = __OFSUB__(v40, 1);
          int v42 = v40 - 1;
          if (v42 < 0 == v41) {
            *(_WORD *)(*(void *)(v11 + 136) + 40LL * v42 + 2) = 1;
          }
        }

        else
        {
          sub_181319C00((uint64_t)a1, *(unsigned __int8 **)(a4 + 24LL * v37 + 8), (v36 + v35));
        }

        ++v35;
      }

      while (v35 < *(__int16 *)(a3 + 54));
    }

    if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
    {
      uint64_t v49 = a3 + 16;
      do
      {
        uint64_t v50 = *(void *)v49;
        int v51 = *(_WORD *)(*(void *)v49 + 99LL) & 3;
        uint64_t v49 = *(void *)v49 + 40LL;
      }

      while (v51 != 2);
      uint64_t v52 = **(__int16 **)(v50 + 8);
      int v53 = *(_DWORD *)(v11 + 144);
      uint64_t v45 = v137;
      uint64_t v54 = v139;
      if (*(_DWORD *)(v11 + 148) <= v53)
      {
        sub_18131044C(v11, 175LL, v144, v52, v137, v31, v32, v33);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v53 + 1;
        uint64_t v55 = *(void *)(v11 + 136) + 40LL * v53;
        *(_DWORD *)uint64_t v55 = 175;
        *(_DWORD *)(v55 + 4) = v144;
        *(_DWORD *)(v55 + 8) = v52;
        *(_DWORD *)(v55 + 12) = v137;
        *(void *)(v55 + 24) = 0LL;
        *(void *)(v55 + 32) = 0LL;
        *(void *)(v55 + 16) = 0LL;
      }

      uint64_t v70 = v143;
      uint64_t v28 = (v21 + v52 + 3);
      uint64_t v29 = (v21 + 2);
      int v76 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) > v76)
      {
        *(_DWORD *)(v11 + 144) = v76 + 1;
        uint64_t v75 = *(void *)(v11 + 136) + 40LL * v76;
        *(_DWORD *)uint64_t v75 = 81;
        *(_DWORD *)(v75 + 4) = v28;
        *(_DWORD *)(v75 + 8) = v29;
        goto LABEL_120;
      }

      uint64_t v73 = v11;
      uint64_t v27 = 81LL;
    }

    else
    {
      int v43 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v43)
      {
        uint64_t v45 = v137;
        sub_18131044C(v11, 135LL, v144, v137, 0LL, v31, v32, v33);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v43 + 1;
        uint64_t v44 = *(void *)(v11 + 136) + 40LL * v43;
        *(_DWORD *)uint64_t v44 = 135;
        *(_DWORD *)(v44 + 4) = v144;
        uint64_t v45 = v137;
        *(_DWORD *)(v44 + 8) = v137;
        *(void *)(v44 + 12) = 0LL;
        *(void *)(v44 + 28) = 0LL;
        *(void *)(v44 + 20) = 0LL;
        *(_DWORD *)(v44 + 36) = 0;
      }

      uint64_t v70 = v143;
      uint64_t v54 = v139;
      uint64_t v27 = (uint64_t)a5;
      int v71 = v21 + 2;
      if (a5)
      {
        if (!a1[2]
          || (uint64_t v72 = sub_18128CF10(a1, a5, (v21 + 2), v29, v30, v31, v32, v33, v34), (_DWORD)v72 == v71))
        {
LABEL_121:
          if (*((_BYTE *)v54 + 66))
          {
LABEL_122:
            if (!*(_BYTE *)(*(void *)v11 + 103LL))
            {
              uint64_t v120 = *(void *)(v11 + 136) + 40LL * v141;
              sub_18127ABFC(*(void **)v11, *(char *)(v120 + 1), *(void *)(v120 + 16));
              *(void *)(v120 + 16) = 0LL;
              *(_WORD *)uint64_t v120 = 184;
            }

            int v121 = *(_DWORD *)(v11 + 144);
            if (*(_DWORD *)(v11 + 148) <= v121)
            {
              sub_18131044C(v11, 122LL, v144, 0LL, 0LL, v31, v32, v33);
              int v102 = 0;
            }

            else
            {
              int v102 = 0;
              *(_DWORD *)(v11 + 144) = v121 + 1;
              uint64_t v122 = *(void *)(v11 + 136) + 40LL * v121;
              *(_DWORD *)uint64_t v122 = 122;
              *(_DWORD *)(v122 + 4) = v144;
              *(_OWORD *)(v122 + 8) = 0u;
              *(_OWORD *)(v122 + 24) = 0u;
            }

            goto LABEL_99;
          }

void sub_181343BC4( uint64_t *a1, int a2, uint64_t a3, int *a4, uint64_t a5, unsigned __int8 *a6, void *a7, unsigned __int8 *a8, char a9)
{
  uint64_t v16 = (void *)*a1;
  if (a7 && !a8)
  {
    sub_1812DC47C( (uint64_t)a1,  "ORDER BY without LIMIT on UPDATE",  a3,  (uint64_t)a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  0LL,  a9);
    return;
  }

  uint64_t v89 = *(void *)(a5 + 40);
  int v17 = sub_18129CD4C((uint64_t)v16, a7, 0);
  if (a8) {
    uint64_t v18 = sub_18129C928((uint64_t)v16, a8, 0LL, 0LL);
  }
  else {
    uint64_t v18 = 0LL;
  }
  uint64_t v19 = sub_18129F858((uint64_t)v16, (int *)a5, 0);
  if (a6)
  {
    int v20 = sub_18129C928((uint64_t)v16, a6, 0LL, 0LL);
    if (!v19) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  int v20 = 0LL;
  if (v19)
  {
LABEL_9:
    v19[18] = -1;
    --*(_DWORD *)(*((void *)v19 + 5) + 44LL);
    *((void *)v19 + 5) = 0LL;
  }

void sub_1813441E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  sub_18131FC08(*(void ***)(a1 + 16), a3, a2, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)(a3 + 48) & 0x40) != 0)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    if (*(_BYTE *)(*(void *)v17 + 103LL)) {
      uint64_t v18 = &byte_18C550680;
    }
    else {
      uint64_t v18 = (char *)(*(void *)(v17 + 136) + 40LL * *(int *)(v17 + 144) - 40);
    }
    int v19 = *v18;
    if (v19 == 95)
    {
      *((_DWORD *)v18 + 3) = 1;
    }

    else if (v19 == 96)
    {
      int v20 = (_BYTE *)*((void *)v18 + 2);
      if (*v20)
      {
        int v21 = 0;
        uint64_t v22 = 14LL;
        uint64_t v23 = v20;
        do
        {
          __int16 v24 = *(_WORD *)(*(void *)(a3 + 8) + v22);
          if ((v24 & 0x20) == 0)
          {
            if ((v24 & 0x40) != 0) {
              *uint64_t v23 = 64;
            }
            ++v21;
          }

          uint64_t v23 = &v20[v21];
          v22 += 16LL;
        }

        while (*v23);
      }
    }
  }

  LODWORD(v25) = *(__int16 *)(a3 + 54);
  if ((int)v25 >= 1)
  {
    uint64_t v26 = *(unsigned __int16 *)(a3 + 54);
    uint64_t v27 = (_WORD *)(*(void *)(a3 + 8) + 14LL);
    do
    {
      if ((*v27 & 0x60) != 0) {
        *v27 |= 0x80u;
      }
      v27 += 8;
      --v26;
    }

    while (v26);
  }

  uint64_t v62 = a3;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  *(_DWORD *)(a1 + 64) = -v9;
  int8x16_t v28 = (int8x16_t)xmmword_1813CDDB0;
  int8x16_t v29 = (int8x16_t)xmmword_1813CDDC0;
  int8x16_t v30 = (int8x16_t)xmmword_1813CDDD0;
  v31.i64[0] = 0x1000100010001LL;
  v31.i64[1] = 0x1000100010001LL;
  int v58 = sub_1813445DC;
  do
  {
    unint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    int v34 = 0;
    do
    {
      uint64_t v36 = *(void *)(a3 + 8) + 16 * v32;
      int v38 = (_WORD *)(v36 + 14);
      __int16 v37 = *(_WORD *)(v36 + 14);
      if ((v37 & 0x80) == 0) {
        goto LABEL_25;
      }
      *int v38 = v37 | 0x100;
      __int16 v61 = 0;
      int v39 = *(unsigned __int16 *)(v36 + 12);
      if (*(_WORD *)(v36 + 12)
        && !*(_BYTE *)(a3 + 63)
        && (uint64_t v43 = *(_DWORD **)(a3 + 80)) != 0LL
        && *v43 >= v39
        && (uint64_t v44 = *(void *)&v43[6 * (v39 - 1) + 2]) != 0)
      {
        sub_18131C57C((uint64_t)v57, v44);
        v31.i64[0] = 0x1000100010001LL;
        v31.i64[1] = 0x1000100010001LL;
        int8x16_t v30 = (int8x16_t)xmmword_1813CDDD0;
        int8x16_t v29 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v28 = (int8x16_t)xmmword_1813CDDB0;
        char v45 = v61;
        *v38 &= ~0x100u;
        if (v45 < 0)
        {
          uint64_t v33 = (void *)v36;
          goto LABEL_25;
        }
      }

      else
      {
        *int v38 = v37 & 0xFEFF;
      }

      __int16 v35 = v32;
      if ((v32 & 0x8000) == 0 && (*(_DWORD *)(a3 + 48) & 0x20) != 0)
      {
        uint64_t v40 = *(void *)(a3 + 8);
        if ((_WORD)v32)
        {
          if (v32 >= 0x11)
          {
            if ((v32 & 0xF) != 0) {
              uint64_t v46 = v32 & 0xF;
            }
            else {
              uint64_t v46 = 16LL;
            }
            unint64_t v41 = v32 - v46;
            uint64_t v47 = v40 + 142;
            int16x8_t v48 = 0uLL;
            int16x8_t v49 = 0uLL;
            do
            {
              int8x16_t v50 = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 64), v29);
              v50.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 32), v28).i32[3];
              v51.i32[0] = vzip1q_s16(*(int16x8_t *)(v47 - 128), *(int16x8_t *)(v47 - 112)).u32[0];
              v51.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 96), v30).i32[1];
              v51.i64[1] = v50.i64[1];
              int8x16x2_t v63 = *(int8x16x2_t *)(v47 + 32);
              int8x16_t v52 = vqtbl2q_s8(*(int8x16x2_t *)(v47 + 64), v29);
              v52.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v47 + 96), v28).i32[3];
              int16x8_t v54 = *(int16x8_t *)v47;
              int16x8_t v53 = *(int16x8_t *)(v47 + 16);
              v47 += 256LL;
              v53.i32[0] = vzip1q_s16(v54, v53).u32[0];
              v53.i32[1] = vqtbl2q_s8(v63, v30).i32[1];
              v53.i64[1] = v52.i64[1];
              int16x8_t v48 = vaddq_s16((int16x8_t)vbicq_s8(v31, (int8x16_t)vshrq_n_u16(v51, 5uLL)), v48);
              int16x8_t v49 = vaddq_s16((int16x8_t)vbicq_s8(v31, (int8x16_t)vshrq_n_u16((uint16x8_t)v53, 5uLL)), v49);
              v46 += 16LL;
            }

            while (v32 != v46);
            __int16 v42 = vaddvq_s16(vaddq_s16(v49, v48));
          }

          else
          {
            unint64_t v41 = 0LL;
            __int16 v42 = 0;
          }

          uint64_t v55 = (unsigned __int16 *)(v40 + 16 * v41 + 14);
          do
          {
            unsigned int v56 = *v55;
            v55 += 8;
            v42 += ((v56 >> 5) & 1) == 0;
            ++v41;
          }

          while (v32 != v41);
        }

        else
        {
          __int16 v42 = 0;
        }

        else {
          __int16 v35 = v42;
        }
      }

      sub_18131A600(a1, a3, v36, (v9 + v35), v13, v14, v15, v16);
      *v38 &= ~0x80u;
      int v34 = 1;
      int8x16_t v29 = (int8x16_t)xmmword_1813CDDC0;
      int8x16_t v28 = (int8x16_t)xmmword_1813CDDB0;
      int8x16_t v30 = (int8x16_t)xmmword_1813CDDD0;
      v31.i64[0] = 0x1000100010001LL;
      v31.i64[1] = 0x1000100010001LL;
LABEL_25:
      ++v32;
      int64_t v25 = *(__int16 *)(a3 + 54);
    }

    while ((uint64_t)v32 < v25);
  }

  while (v33 && v34);
  if (v33) {
    sub_1812DC47C(a1, "generated column loop on %s", v11, v12, v13, v14, v15, v16, *v33);
  }
LABEL_55:
  *(_DWORD *)(a1 + 64) = 0;
}

uint64_t sub_18134459C(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 167)
  {
    uint64_t v2 = *((unsigned int *)a2 + 12);
    if ((v2 & 0x80000000) != 0)
    {
      __int16 v3 = 2;
      goto LABEL_6;
    }

    if ((*(_DWORD *)(*(void *)(a1 + 40) + 4 * v2) & 0x80000000) == 0)
    {
      __int16 v3 = 1;
LABEL_6:
      *(_WORD *)(a1 + 36) |= v3;
    }
  }

  return 0LL;
}

uint64_t sub_1813445DC(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 167)
  {
    uint64_t v2 = *((unsigned int *)a2 + 12);
    if ((v2 & 0x80000000) == 0) {
      *(_WORD *)(a1 + 36) |= *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 16 * v2 + 14);
    }
  }

  return 0LL;
}

uint64_t sub_181344614( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a1;
  if (*(__int16 *)(a3 + 52) < 0)
  {
    uint64_t v18 = sub_18127F588(v10, "%s.rowid", a3, a4, a5, a6, a7, a8, *(void *)a3);
    uint64_t v19 = 2579LL;
    uint64_t v20 = a1[2];
    if (v20)
    {
LABEL_3:
      if ((_DWORD)a2 != 2) {
        goto LABEL_7;
      }
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v18 = sub_18127F588(v10, "%s.%s", a3, a4, a5, a6, a7, a8, *(void *)a3);
    uint64_t v19 = 1555LL;
    uint64_t v20 = a1[2];
    if (v20) {
      goto LABEL_3;
    }
  }

  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t v20 = sub_1812DC63C(a1, v11, v12, v13, v14, v15, v16, v17);
  if ((_DWORD)a2 == 2)
  {
LABEL_4:
    int v21 = (uint64_t *)a1[21];
    if (!v21) {
      int v21 = a1;
    }
    *((_BYTE *)v21 + 33) = 1;
  }

void *sub_18134473C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)a1;
  uint64_t v15 = *(unsigned int *)(a2 + 76);
  uint64_t v16 = a2;
  do
  {
    if (!*(void *)v16) {
      break;
    }
    if (*(void *)(v16 + 56) == a4) {
      break;
    }
    uint64_t v16 = *(void *)(v16 + 32);
  }

  while (v16);
  if (a4 && (_DWORD)v15 != (_DWORD)a5)
  {
    if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
    {
      unsigned int v51 = *(_DWORD *)(a2 + 76);
      uint64_t v19 = *(void *)(a3 + 16);
      for (i = *(void *)a1; v19; uint64_t v19 = *(void *)(v19 + 40))
      {
        if ((*(_WORD *)(v19 + 99) & 3) == 2) {
          break;
        }
      }

      uint64_t v20 = *(unsigned __int16 *)(v19 + 94);
      int v21 = *(_DWORD *)(a1 + 56);
      uint64_t v22 = (v21 + 1);
      *(_DWORD *)(a1 + 56) = v21 + v20;
      if ((_DWORD)v20)
      {
        for (uint64_t j = 0LL; j != v20; ++j)
        {
          if (*(_WORD *)(a4 + 96))
          {
            uint64_t v25 = 0LL;
            while (*(unsigned __int16 *)(*(void *)(a4 + 8) + 2 * v25) != *(unsigned __int16 *)(*(void *)(v19 + 8)
                                                                                                + 2 * j))
            {
            }
          }

          else
          {
LABEL_21:
            LOWORD(v25) = -1;
          }

          uint64_t v26 = (__int16)v25;
          uint64_t v27 = (v22 + j);
          int v28 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) > v28)
          {
            *(_DWORD *)(v13 + 144) = v28 + 1;
            uint64_t v24 = *(void *)(v13 + 136) + 40LL * v28;
            *(_DWORD *)uint64_t v24 = 94;
            *(_DWORD *)(v24 + 4) = a5;
            *(_DWORD *)(v24 + 8) = v26;
            *(_DWORD *)(v24 + 12) = v27;
            *(void *)(v24 + 24) = 0LL;
            *(void *)(v24 + 32) = 0LL;
            *(void *)(v24 + 16) = 0LL;
          }

          else
          {
            sub_18131044C(v13, 94LL, a5, v26, v27, a6, a7, a8);
          }
        }
      }

      int v29 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v29)
      {
        int v29 = sub_181310690(v13, 29LL, v51, 0LL, v22, v20, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v29 + 1;
        uint64_t v30 = *(void *)(v13 + 136) + 40LL * v29;
        *(_DWORD *)uint64_t v30 = 64797;
        *(void *)(v30 + 4) = v51;
        *(_DWORD *)(v30 + 12) = v22;
        *(_DWORD *)(v30 + 16) = v20;
        *(void *)(v30 + 24) = 0LL;
        *(void *)(v30 + 32) = 0LL;
      }

      uint64_t v14 = i;
      sub_1812B9B68((uint64_t *)v13, 70LL, 11LL, 2LL, 0LL, (uint64_t)"corrupt database", 0xFFFFFFFFLL, a8);
      uint64_t v12 = a1;
      uint64_t v31 = *(void *)(a1 + 168);
      if (!v31) {
        uint64_t v31 = a1;
      }
      *(_BYTE *)(v31 + 33) = 1;
      if (*(_BYTE *)(*(void *)v13 + 103LL)) {
        unint64_t v32 = &byte_18C550680;
      }
      else {
        unint64_t v32 = (char *)(*(void *)(v13 + 136) + 40LL * v29);
      }
      *((_DWORD *)v32 + 2) = *(_DWORD *)(v13 + 144);
    }

    else
    {
      if (*(_BYTE *)(a1 + 31))
      {
        unsigned __int8 v17 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v17;
        uint64_t v18 = *(unsigned int *)(a1 + 4LL * v17 + 224);
      }

      else
      {
        uint64_t v18 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v18;
      }

      int v33 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v33)
      {
        sub_18131044C(v13, 142LL, a5, v18, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v33 + 1;
        uint64_t v34 = *(void *)(v13 + 136) + 40LL * v33;
        *(_DWORD *)uint64_t v34 = 142;
        *(_DWORD *)(v34 + 4) = a5;
        *(_DWORD *)(v34 + 8) = v18;
        *(void *)(v34 + 12) = 0LL;
        *(void *)(v34 + 28) = 0LL;
        *(void *)(v34 + 20) = 0LL;
        *(_DWORD *)(v34 + 36) = 0;
      }

      int v35 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v35)
      {
        sub_18131044C(v13, 30LL, v15, 0LL, v18, a6, a7, a8);
        if (!(_DWORD)v18) {
          goto LABEL_43;
        }
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v35 + 1;
        uint64_t v36 = *(void *)(v13 + 136) + 40LL * v35;
        *(_DWORD *)uint64_t v36 = 30;
        *(_DWORD *)(v36 + 4) = v15;
        *(_DWORD *)(v36 + 8) = 0;
        *(_DWORD *)(v36 + 12) = v18;
        *(void *)(v36 + 24) = 0LL;
        *(void *)(v36 + 32) = 0LL;
        *(void *)(v36 + 16) = 0LL;
        if (!(_DWORD)v18) {
          goto LABEL_43;
        }
      }

      uint64_t v37 = *(unsigned __int8 *)(v12 + 31);
      if (v37 <= 7)
      {
        *(_BYTE *)(v12 + 31) = v37 + 1;
        *(_DWORD *)(v12 + 4 * v37 + 224) = v18;
      }
    }
  }

uint64_t sub_181344B84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a1 + 16);
  if (*(_BYTE *)(a1 + 31))
  {
    unsigned __int8 v13 = *(_BYTE *)(a1 + 31) - 1;
    *(_BYTE *)(a1 + 31) = v13;
    uint64_t v14 = *(unsigned int *)(a1 + 4LL * v13 + 224);
  }

  else
  {
    uint64_t v14 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v14;
  }

  int v15 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v15)
  {
    sub_18131044C(v12, 71LL, 0LL, v14, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v12 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v12 + 136) + 40LL * v15;
    *(void *)uint64_t v16 = 71LL;
    *(_DWORD *)(v16 + 8) = v14;
    *(void *)(v16 + 12) = 0LL;
    *(void *)(v16 + 28) = 0LL;
    *(void *)(v16 + 20) = 0LL;
    *(_DWORD *)(v16 + 36) = 0;
  }

  uint64_t result = sub_1812B9B68((uint64_t *)v12, 128LL, a3, a4, v14, a2, 4294967291LL, a8);
  int v18 = *(_DWORD *)(v12 + 144);
  BOOL v19 = __OFSUB__(v18, 1);
  int v20 = v18 - 1;
  if (v20 < 0 == v19) {
    *(_WORD *)(*(void *)(v12 + 136) + 40LL * v20 + 2) = 64;
  }
  if ((_DWORD)v14)
  {
    uint64_t v21 = *(unsigned __int8 *)(a1 + 31);
    if (v21 <= 7)
    {
      *(_BYTE *)(a1 + 31) = v21 + 1;
      *(_DWORD *)(a1 + 4 * v21 + 224) = v14;
    }
  }

  return result;
}

uint64_t sub_181344CA4(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 48) & 8) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)a1;
  if ((*(_BYTE *)(v4 + 44) & 4) != 0) {
    return 0LL;
  }
  if (*(void *)(a1 + 168)) {
    uint64_t v6 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v6 = a1;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v4 + 32) + 32LL * a2 + 24) + 104LL);
  if (!v7 || (*(_BYTE *)(v7 + 48) & 0x80) != 0 || *(_BYTE *)(v7 + 63) == 1 || *(_WORD *)(v7 + 54) != 2)
  {
    uint64_t result = 0LL;
    ++*(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 24) = 523;
    return result;
  }

  int v9 = (uint64_t **)(v6 + 160);
  while (1)
  {
    int v9 = (uint64_t **)*v9;
    if (!v9) {
      break;
    }
  }

  uint64_t v11 = sub_1812F2264(v4, 0x18uLL);
  sub_18131D044((uint64_t *)v6, (void (*)(uint64_t, uint64_t))sub_1812900D0, v11);
  if (*(_BYTE *)(*(void *)a1 + 103LL)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(v6 + 160);
  *(void *)(v6 + 160) = v11;
  *(void *)uint64_t v11 = v12;
  *(void *)(v11 + 8) = a3;
  LODWORD(v12) = *(_DWORD *)(v6 + 56);
  uint64_t result = (v12 + 2);
  *(_DWORD *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 20) = result;
  *(_DWORD *)(v6 + 56) = v12 + 4;
  return result;
}

uint64_t sub_181344DC0( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  uint64_t v11 = a1[2];
  if (!v11)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
      *((_BYTE *)a1 + 35) = 1;
    }
    uint64_t v11 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  uint64_t v12 = *(unsigned int *)(v11 + 144);
  if (*(_BYTE *)(a3 + 63) == 1)
  {
    for (uint64_t i = *(void **)(a3 + 80); i; uint64_t i = (void *)i[5])
    {
      if (*i == *a1) {
        break;
      }
    }
  }

  else
  {
    uint64_t i = 0LL;
  }

  uint64_t v14 = 1LL;
  while (1)
  {
    int v15 = &byte_18C550680;
    if (!*(_BYTE *)(*(void *)v11 + 103LL)) {
      int v15 = (char *)(*(void *)(v11 + 136) + 40 * v14);
    }
    int v16 = *v15;
    if (v16 == 173)
    {
      if (*((void **)v15 + 2) == i) {
        return 1LL;
      }
      goto LABEL_15;
    }

    if (v16 == 112 && *((_DWORD *)v15 + 3) == v9)
    {
      int v17 = *((_DWORD *)v15 + 2);
      if (v17 == *(_DWORD *)(a3 + 40)) {
        return 1LL;
      }
      uint64_t v18 = *(void *)(a3 + 16);
      if (v18) {
        break;
      }
    }

uint64_t sub_181344F00( uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  uint64_t v36 = 0LL;
  v33[0] = a1;
  v33[1] = a2;
  if (!a3) {
    return 0LL;
  }
  int v8 = a3;
  for (int i = 0; ; ++i)
  {
    if (!*(void *)v8) {
      return 0LL;
    }
    uint64_t result = sub_1813206F0((uint64_t)v33, *(int **)v8, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = *(int **)v8;
    uint64_t v19 = *(unsigned int *)(a2 + 72);
    if ((*(_BYTE *)(v17 + 48) & 0x80) != 0
      || *v18 != 1
      || (int v20 = (unsigned __int8 *)*((void *)v18 + 1), *v20 != 167)
      || *((_DWORD *)v20 + 12) != -1)
    {
      int v31 = i;
      __int128 v38 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v44 = 0u;
      __int128 v42 = 0u;
      memset(v43, 0, sizeof(v43));
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      LOBYTE(v38) = 113;
      __int128 v39 = (unint64_t)v43;
      v43[0] = -89;
      HIDWORD(v44) = v19;
      uint64_t v21 = *(void *)(v17 + 16);
      if (v21)
      {
        while (1)
        {
          if (*(_BYTE *)(v21 + 98))
          {
            unsigned int v22 = *(unsigned __int16 *)(v21 + 94);
            if (*v18 == v22)
            {
              a3 = *(unsigned __int8 **)(v21 + 72);
              if (!a3) {
                goto LABEL_19;
              }
              int v23 = (unsigned __int8 *)*((void *)v8 + 1);
              if (v23)
              {
              }
            }
          }

uint64_t sub_1813451A8( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((int)a2 >= 1)
  {
    uint64_t result = *(void *)(result + 16);
    int v8 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v8)
    {
      return sub_18131044C(result, 159LL, a2, a3, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(result + 144) = v8 + 1;
      uint64_t v9 = *(void *)(result + 136) + 40LL * v8;
      *(_DWORD *)uint64_t v9 = 159;
      *(_DWORD *)(v9 + 4) = a2;
      *(_DWORD *)(v9 + 8) = a3;
      *(void *)(v9 + 12) = 0LL;
      *(void *)(v9 + 28) = 0LL;
      *(void *)(v9 + 20) = 0LL;
      *(_DWORD *)(v9 + 36) = 0;
    }
  }

  return result;
}

BOOL sub_18134520C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 94) == *(unsigned __int16 *)(a2 + 94)
    && *(unsigned __int16 *)(a1 + 96) == *(unsigned __int16 *)(a2 + 96)
    && *(unsigned __int8 *)(a1 + 98) == *(unsigned __int8 *)(a2 + 98))
  {
    if (!*(_WORD *)(a1 + 94)) {
      return sub_18131BA10( 0LL,  *(unsigned __int8 **)(a2 + 72),  *(unsigned __int8 **)(a1 + 72),  0xFFFFFFFFLL) == 0;
    }
    uint64_t v4 = 0LL;
    while (1)
    {
      int v5 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 2 * v4);
      if (v5 != *(unsigned __int16 *)(*(void *)(a1 + 8) + 2 * v4)
        || v5 == 65534
        && sub_18131BA10( 0LL,  *(unsigned __int8 **)(*(void *)(a2 + 80) + 24 * v4 + 8),  *(unsigned __int8 **)(*(void *)(a1 + 80) + 24 * v4 + 8),  0xFFFFFFFFLL))
      {
        break;
      }

      uint64_t v6 = *(_BYTE **)(*(void *)(a2 + 64) + 8 * v4);
      uint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 + 64) + 8 * v4);
      if (v6)
      {
        if (v7)
        {
          while (1)
          {
            uint64_t v8 = *v6;
            uint64_t v9 = *v7;
            if ((_DWORD)v8 == (_DWORD)v9)
            {
              if (!*v6) {
                goto LABEL_19;
              }
            }

            else if (byte_1813C6343[v8] != byte_1813C6343[v9])
            {
              return 0LL;
            }

            ++v6;
            ++v7;
          }
        }

        return 0LL;
      }

      if (v7) {
        return 0LL;
      }
LABEL_19:
      if (++v4 >= (unint64_t)*(unsigned __int16 *)(a2 + 94)) {
        return sub_18131BA10( 0LL,  *(unsigned __int8 **)(a2 + 72),  *(unsigned __int8 **)(a1 + 72),  0xFFFFFFFFLL) == 0;
      }
    }
  }

  return 0LL;
}

uint64_t *sub_181345374( uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t result = (uint64_t *)sub_1812B9B68(result, 117LL, 0LL, 1LL, 0LL, a2, 0LL, a8);
    int v12 = *(_DWORD *)(v8 + 144);
    if (*(_DWORD *)(v8 + 148) <= v12)
    {
      return (uint64_t *)sub_18131044C(v8, 84LL, 1LL, 1LL, 0LL, v9, v10, v11);
    }

    else
    {
      *(_DWORD *)(v8 + 144) = v12 + 1;
      uint64_t v13 = *(void *)(v8 + 136) + 40LL * v12;
      *(_DWORD *)uint64_t v13 = 84;
      *(void *)(v13 + 4) = 0x100000001LL;
      *(void *)(v13 + 12) = 0LL;
      *(void *)(v13 + 28) = 0LL;
      *(void *)(v13 + 20) = 0LL;
      *(_DWORD *)(v13 + 36) = 0;
    }
  }

  return result;
}

uint64_t sub_181345414(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 11);
  else {
    int v5 = *(unsigned __int8 *)(a2 + 11);
  }
  uint64_t result = sub_18128F970((uint64_t)a1, v5);
  if (v4)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = *(unsigned __int8 *)(a2 + 10);
    uint64_t v9 = v4 << 6;
    uint64_t v10 = &off_189B6E3D8[v8];
    do
    {
      if (!*(_BYTE *)(*a1 + 103)) {
        uint64_t result = sub_181269368(a1[19] + v7, *v10, -1LL, 1u, 0LL);
      }
      v7 += 64LL;
      ++v10;
    }

    while (v9 != v7);
  }

  else if (!*(_BYTE *)(*a1 + 103))
  {
    return sub_181269368(a1[19], *(char **)a2, -1LL, 1u, 0LL);
  }

  return result;
}

uint64_t sub_1813454D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1812F2264(*(void *)a1, 8uLL);
  if (v4) {
    *uint64_t v4 = a2;
  }
  uint64_t result = sub_1812B9B68((uint64_t *)a1, 72LL, 0LL, 1LL, 0LL, (uint64_t)v4, 4294967283LL, v5);
  int v10 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v10) {
    return sub_18131044C(a1, 84LL, 1LL, 1LL, 0LL, v7, v8, v9);
  }
  *(_DWORD *)(a1 + 144) = v10 + 1;
  uint64_t v11 = *(void *)(a1 + 136) + 40LL * v10;
  *(_DWORD *)uint64_t v11 = 84;
  *(void *)(v11 + 4) = 0x100000001LL;
  *(void *)(v11 + 12) = 0LL;
  *(void *)(v11 + 28) = 0LL;
  *(void *)(v11 + 20) = 0LL;
  *(_DWORD *)(v11 + 36) = 0;
  return result;
}

uint64_t sub_181345590(uint64_t a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = *(unsigned __int16 *)(v4 + 40);
  if ((a2 & 0x80000000) == 0)
  {
    unsigned int v5 = v5 & 0xFFFFFFF3 | (4 * a2);
    *(_WORD *)(v4 + 40) = v5;
  }

  uint64_t v6 = (v5 >> 2) & 3;
  if (*(_BYTE *)(a1 + 17))
  {
    int v7 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (!v7) {
      sub_1812FDEFC(a1);
    }
  }

  return v6;
}

uint64_t sub_181345620(_BYTE *a1)
{
  if (a1)
  {
    int v1 = "exclusive";
    for (int i = a1; ; ++i)
    {
      uint64_t v3 = *i;
      uint64_t v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v3] != byte_1813C6343[v4])
      {
        for (uint64_t j = "normal"; ; ++j)
        {
          uint64_t v7 = *a1;
          uint64_t v8 = *(unsigned __int8 *)j;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*a1) {
              return 0LL;
            }
          }

          else if (byte_1813C6343[v7] != byte_1813C6343[v8])
          {
            return 0xFFFFFFFFLL;
          }

          ++a1;
        }
      }

      ++v1;
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1813456B8(unsigned __int8 *a1)
{
  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v2 = a1[i];
    uint64_t v3 = aNone[i];
    if ((_DWORD)v2 != (_DWORD)v3) {
      break;
    }
    if (!a1[i]) {
      return 0LL;
    }
LABEL_3:
    ;
  }

  if (byte_1813C6343[v2] == byte_1813C6343[v3]) {
    goto LABEL_3;
  }
  for (uint64_t j = 0LL; ; ++j)
  {
    uint64_t v6 = a1[j];
    uint64_t v7 = aFull[j];
    if ((_DWORD)v6 != (_DWORD)v7) {
      break;
    }
    if (!a1[j]) {
      return 1LL;
    }
LABEL_9:
    ;
  }

  if (byte_1813C6343[v6] == byte_1813C6343[v7]) {
    goto LABEL_9;
  }
  for (uint64_t k = 0LL; ; ++k)
  {
    uint64_t v9 = a1[k];
    uint64_t v10 = aIncremental[k];
    if ((_DWORD)v9 != (_DWORD)v10) {
      break;
    }
    if (!a1[k]) {
      return 2LL;
    }
LABEL_15:
    ;
  }

  if (byte_1813C6343[v9] == byte_1813C6343[v10]) {
    goto LABEL_15;
  }
  unsigned int v11 = 0;
  sub_18130DE18(a1, &v11);
  if (v11 >= 3) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t sub_1813457B4(uint64_t result)
{
  if (*(_BYTE *)(result + 101))
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 40);
    if (v2 >= 1)
    {
      unsigned int v3 = v2 + 1;
      uint64_t v4 = (_BYTE *)(*(void *)(result + 32) + 16LL);
      do
      {
        uint64_t result = *((void *)v4 - 1);
        if (result) {
          uint64_t result = sub_18130F444(result, *(_DWORD *)(v1 + 48) & 0x38 | *v4 & 7u);
        }
        --v3;
        v4 += 32;
      }

      while (v3 > 1);
    }
  }

  return result;
}

uint64_t *sub_18134582C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  uint64_t v5 = *v4;
  *(void *)(v5 + 160) = a2;
  uint64_t result = *(uint64_t **)(v5 + 72);
  uint64_t v7 = *result;
  if (*result && *(int *)v7 >= 3)
  {
    uint64_t v10 = a2;
    *(_BYTE *)(v5 + 27) = a2 > 0;
    if (*(_DWORD *)(v5 + 48))
    {
      uint64_t v8 = sub_1812FCAFC;
    }

    else if (a2 < 1 || *(void *)(v5 + 296))
    {
      uint64_t v8 = sub_1812FCD58;
    }

    else
    {
      uint64_t v8 = sub_1812FCB08;
    }

    *(void *)(v5 + 288) = v8;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(v7 + 80))();
  }

  if (*(_BYTE *)(a1 + 17))
  {
    int v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9) {
      return (uint64_t *)sub_1812FDEFC(a1);
    }
  }

  return result;
}

void sub_181345920( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, char a10)
{
  int v10 = *a2;
  int v11 = v10 - 48;
  if ((v10 - 48) >= 3)
  {
    int v12 = a2 + 1;
    uint64_t v13 = "file";
    for (int i = *a2; ; int i = v15)
    {
      uint64_t v16 = *(unsigned __int8 *)v13;
      if (i == (_DWORD)v16)
      {
        if (!i)
        {
          int v11 = 1;
          break;
        }
      }

      else if (byte_1813C6343[i] != byte_1813C6343[v16])
      {
        uint64_t v17 = a2 + 1;
        for (uint64_t j = "memory"; ; ++j)
        {
          uint64_t v20 = *(unsigned __int8 *)j;
          if (v10 == (_DWORD)v20)
          {
            if (!v10)
            {
              int v11 = 2;
              goto LABEL_15;
            }
          }

          else if (byte_1813C6343[v10] != byte_1813C6343[v20])
          {
            int v11 = 0;
            goto LABEL_15;
          }

          int v19 = *v17++;
          int v10 = v19;
        }
      }

      ++v13;
      int v15 = *v12++;
    }
  }

void sub_181345A34( uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(*(void *)(*(void *)a1 + 32LL) + 40LL);
  if (v11)
  {
    if (*(_BYTE *)(v10 + 101) && !*(_BYTE *)(v11 + 16))
    {
      sub_1812B54BC(*(void *)(*(void *)(*(void *)a1 + 32LL) + 40LL), a2);
      *(void *)(*(void *)(v10 + 32) + 40LL) = 0LL;
      sub_1812D6078(v10);
    }

    else
    {
      sub_1812DC47C(a1, "temporary storage cannot be changed from within a transaction", a4, a5, a6, a7, a8, a9, a10);
    }
  }

uint64_t sub_181345AA0(char *__s, int a2, unsigned __int8 a3)
{
  if ((unint64_t)*__s - 58 >= 0xFFFFFFFFFFFFFFF6LL)
  {
    int v17 = 0;
    sub_18130DE18((unsigned __int8 *)__s, &v17);
    return v17;
  }

  int v6 = strlen(__s);
  unint64_t v7 = 0LL;
  int v8 = v6 & 0x3FFFFFFF;
  while (1)
  {
    if (v8) {
      break;
    }
LABEL_10:
    if (!a2 || v7 <= 5) {
      return byte_1813CA45F[v7];
    }
LABEL_3:
    if (++v7 == 8) {
      return a3;
    }
  }

  int v9 = &aOnoffalseyestr[byte_1813CA44F[v7]];
  int v10 = v8 + 1;
  uint64_t v11 = __s;
  while (1)
  {
    uint64_t v12 = *v9;
    if (!*v9) {
      break;
    }
    LODWORD(v12) = byte_1813C6343[v12];
    int v13 = byte_1813C6343[*v11];
    if ((_DWORD)v12 != v13) {
      goto LABEL_14;
    }
    ++v9;
    ++v11;
  }

  int v13 = byte_1813C6343[*v11];
LABEL_14:
  if (a2) {
    BOOL v14 = v7 >= 6;
  }
  else {
    BOOL v14 = 0;
  }
  char v15 = !v14;
  if ((_DWORD)v12 != v13 || (v15 & 1) == 0) {
    goto LABEL_3;
  }
  return byte_1813CA45F[v7];
}

uint64_t sub_181345BD0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = result;
  uint64_t v12 = 0LL;
  uint64_t v24 = &a9;
  for (uint64_t i = a2;
        ;
        uint64_t result = sub_1812B9B68((uint64_t *)v11, v16, 0LL, (i + v12++), 0LL, *v15, 0LL, a8))
  {
    while (1)
    {
      int v14 = *(unsigned __int8 *)(a3 + v12);
      if (v14 != 105) {
        break;
      }
      int v17 = v24++;
      uint64_t v18 = *(unsigned int *)v17;
      uint64_t v19 = i + v12;
      int v20 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v20)
      {
        uint64_t result = sub_18131044C(v11, 71LL, v18, v19, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v20 + 1;
        uint64_t v21 = *(void *)(v11 + 136) + 40LL * v20;
        *(_DWORD *)uint64_t v21 = 71;
        *(_DWORD *)(v21 + 4) = v18;
        *(_DWORD *)(v21 + 8) = v19;
        *(void *)(v21 + 12) = 0LL;
        *(void *)(v21 + 28) = 0LL;
        *(void *)(v21 + 20) = 0LL;
        *(_DWORD *)(v21 + 36) = 0;
      }

      ++v12;
    }

    if (v14 != 115) {
      break;
    }
    char v15 = v24++;
    if (*v15) {
      uint64_t v16 = 117LL;
    }
    else {
      uint64_t v16 = 75LL;
    }
  }

  if (!*(_BYTE *)(a3 + v12))
  {
    int v22 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v22)
    {
      return sub_18131044C(v11, 84LL, a2, v12, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v22 + 1;
      uint64_t v23 = *(void *)(v11 + 136) + 40LL * v22;
      *(_DWORD *)uint64_t v23 = 84;
      *(_DWORD *)(v23 + 4) = i;
      *(_DWORD *)(v23 + 8) = v12;
      *(void *)(v23 + 12) = 0LL;
      *(void *)(v23 + 28) = 0LL;
      *(void *)(v23 + 20) = 0LL;
      *(_DWORD *)(v23 + 36) = 0;
    }
  }

  return result;
}

uint64_t sub_181345D54( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    int v8 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = result;
    do
    {
      if (*(void *)(v9 + 24) && (v8 || (*(_DWORD *)(v9 + 4) & 0x40000) == 0)) {
        uint64_t result = sub_181345BD0(v10, 1LL, (uint64_t)"sissii", a4, a5, a6, a7, a8, *(void *)(v9 + 56));
      }
      uint64_t v9 = *(void *)(v9 + 16);
    }

    while (v9);
  }

  return result;
}

_BYTE *sub_181345E54(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v3 = &unk_1813CA467;
  }
  else {
    unsigned int v3 = &unk_1813C6554;
  }
  if (a2) {
    int v4 = 12;
  }
  else {
    int v4 = 4;
  }
  sub_18126D03C(a1, "like", 2LL, 1, (uint64_t)v3, (uint64_t)sub_1812BEF54, 0LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v5 = sub_18126CC00(a1, "like", 2, 1u, 0);
  *((_DWORD *)v5 + 1) = *((_DWORD *)v5 + 1) & 0xFFDFFFFF | v4;
  sub_18126D03C(a1, "like", 3LL, 1, (uint64_t)v3, (uint64_t)sub_1812BEF54, 0LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t result = sub_18126CC00(a1, "like", 3, 1u, 0);
  *((_DWORD *)result + 1) = *((_DWORD *)result + 1) & 0xFFDFFFFF | v4;
  return result;
}

uint64_t sub_181345F60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v9)
  {
    sub_18131044C(a1, 84LL, 3LL, 1LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 136) + 40LL * v9;
    *(_DWORD *)uint64_t v10 = 84;
    *(void *)(v10 + 4) = 0x100000003LL;
    *(void *)(v10 + 12) = 0LL;
    *(void *)(v10 + 28) = 0LL;
    *(void *)(v10 + 20) = 0LL;
    *(_DWORD *)(v10 + 36) = 0;
  }

  uint64_t v11 = *(unsigned int *)(a1 + 144);
  uint64_t v12 = (v11 + 2);
  if (*(_DWORD *)(a1 + 148) <= (int)v11)
  {
    uint64_t v11 = sub_18131044C(a1, 59LL, 1LL, v12, 1LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v11 + 1;
    uint64_t v13 = *(void *)(a1 + 136) + 40LL * (int)v11;
    *(void *)uint64_t v13 = 0x10000003BLL;
    *(_DWORD *)(v13 + 8) = v12;
    *(_DWORD *)(v13 + 12) = 1;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(v13 + 32) = 0LL;
    *(void *)(v13 + 16) = 0LL;
  }

  int v14 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v14)
  {
    sub_18131044C(a1, 70LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(a1 + 144) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 136) + 40LL * v14;
    *(_BYTE *)uint64_t v15 = 70;
    *(_OWORD *)(v15 + 1) = 0u;
    *(_OWORD *)(v15 + 17) = 0u;
    *(void *)(v15 + 32) = 0LL;
  }

  return v11;
}

void sub_18134609C( _DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v10 = 0LL;
  }

  uint64_t v126 = 0LL;
  __s = 0LL;
  int v125 = 0LL;
  uint64_t v11 = *a3;
  if (*a3)
  {
    int v12 = *(unsigned __int16 *)(v11 + 20);
    if ((~v12 & 0x202) == 0 && *(_BYTE *)(v11 + 22) == 1)
    {
      uint64_t v13 = *(void *)(v11 + 8);
      uint64_t v14 = a3[1];
      if (!v14) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }

    if ((v12 & 1) == 0)
    {
      uint64_t v13 = sub_181303998((int *)v11, 1);
      uint64_t v14 = a3[1];
      if (!v14) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = a3[1];
  if (!v14) {
    goto LABEL_20;
  }
LABEL_14:
  int v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) != 0) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = sub_181303998((int *)v14, 1);
    }
  }

  else
  {
    uint64_t v14 = *(void *)(v14 + 8);
  }

void sub_181346D48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a4;
  int v12 = (char *)a3;
  uint64_t v13 = a2;
  uint64_t v15 = *(void *)a1;
  if (*(_BYTE *)(*(void *)a1 + 197LL)) {
    goto LABEL_2;
  }
  int v17 = *(_DWORD *)(v15 + 44);
  uint64_t v18 = *(void *)(*(void *)(v15 + 32) + 24LL);
  *(_BYTE *)(v15 + 100) = *(_BYTE *)(v18 + 113);
  if ((*(_BYTE *)(v18 + 114) & 1) == 0)
  {
    int v19 = sub_181276D34(v15, 0LL, (char **)(a1 + 8), 0LL, a5, a6, a7, a8);
    if (v19)
    {
LABEL_16:
      *(_DWORD *)(a1 + 24) = v19;
      ++*(_DWORD *)(a1 + 48);
      goto LABEL_67;
    }
  }

  uint64_t v65 = v11;
  int v20 = v12;
  uint64_t v21 = v13;
  uint64_t v22 = *(unsigned int *)(v15 + 40);
  if ((int)v22 >= 2)
  {
    do
    {
      uint64_t v23 = v22 - 1;
      if ((*(_WORD *)(*(void *)(*(void *)(v15 + 32) + 32LL * (v22 - 1) + 24) + 114LL) & 1) == 0)
      {
        int v19 = sub_181276D34(v15, (v22 - 1), (char **)(a1 + 8), 0LL, a5, a6, a7, a8);
        if (v19) {
          goto LABEL_16;
        }
      }

      uint64_t v22 = v23;
    }

    while ((unint64_t)(v23 + 1) > 2);
  }

  if ((v17 & 1) == 0) {
    *(_DWORD *)(v15 + 44) &= ~1u;
  }
  uint64_t v13 = v21;
  int v12 = v20;
  uint64_t v11 = v65;
  if (*(_BYTE *)(v15 + 111)) {
    *(_DWORD *)(v15 + 44) |= 0x10u;
  }
LABEL_2:
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_67;
  }
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v67 = 0u;
  uint64_t v66 = a1;
  if (!a5)
  {
    int v16 = 0;
    goto LABEL_18;
  }

  if (*(_BYTE *)a5 == 59)
  {
    int v16 = 0;
    *(_BYTE *)a5 = 117;
    goto LABEL_18;
  }

  LODWORD(v69) = 0;
  uint64_t v70 = a1;
  uint64_t v71 = sub_1812876D8;
  uint64_t v72 = sub_1812871E4;
  uint64_t v73 = 0LL;
  uint64_t v74 = &v66;
  int v24 = *(_DWORD *)(a1 + 308) + *(_DWORD *)(a5 + 40);
  *(_DWORD *)(a1 + 308) = v24;
  if (*(_DWORD *)(*(void *)a1 + 148LL) >= v24)
  {
    sub_18131C57C((uint64_t)&v70, a5);
    uint64_t v38 = v70;
    *(_DWORD *)(v70 + 308) -= *(_DWORD *)(a5 + 40);
    int v39 = HIDWORD(v68);
    int v16 = v69;
    *(_DWORD *)(a5 + 4) |= v69 & 0x8010;
LABEL_18:
    if (a6)
    {
      if (*(_BYTE *)a6 != 59)
      {
        LODWORD(v69) = v16 & 0xF7FF6FEF;
        uint64_t v25 = v66;
        uint64_t v70 = v66;
        uint64_t v71 = sub_1812876D8;
        uint64_t v26 = sub_1812871E4;
        if ((v16 & 0x80000) != 0) {
          uint64_t v26 = 0LL;
        }
        uint64_t v72 = v26;
        uint64_t v73 = 0LL;
        uint64_t v74 = &v66;
        int v27 = *(_DWORD *)(v66 + 308) + *(_DWORD *)(a6 + 40);
        *(_DWORD *)(v66 + 308) = v27;
        int v28 = *(_DWORD *)(*(void *)v25 + 148LL);
        if (v28 < v27) {
          goto LABEL_39;
        }
        uint64_t v29 = v11;
        uint64_t v30 = v12;
        uint64_t v31 = v13;
        int v32 = v16 & 0x8009010;
        sub_18131C57C((uint64_t)&v70, a6);
        uint64_t v33 = v70;
        *(_DWORD *)(v70 + 308) -= *(_DWORD *)(a6 + 40);
        int v35 = HIDWORD(v68);
        int v34 = v69;
        *(_DWORD *)(a6 + 4) |= v69 & 0x8010;
        int v16 = v34 | v32;
        LODWORD(v69) = v34 | v32;
        uint64_t v13 = v31;
        int v12 = v30;
        uint64_t v11 = v29;
        if (!a7) {
          goto LABEL_24;
        }
        goto LABEL_22;
      }

      *(_BYTE *)a6 = 117;
    }

    if (!a7) {
      goto LABEL_24;
    }
LABEL_22:
    if (*(_BYTE *)a7 == 59)
    {
      *(_BYTE *)a7 = 117;
      goto LABEL_24;
    }

    LODWORD(v69) = v16 & 0xF7FF6FEF;
    uint64_t v25 = v66;
    uint64_t v70 = v66;
    uint64_t v71 = sub_1812876D8;
    uint64_t v36 = sub_1812871E4;
    if ((v16 & 0x80000) != 0) {
      uint64_t v36 = 0LL;
    }
    uint64_t v72 = v36;
    uint64_t v73 = 0LL;
    uint64_t v74 = &v66;
    int v37 = *(_DWORD *)(v66 + 308) + *(_DWORD *)(a7 + 40);
    *(_DWORD *)(v66 + 308) = v37;
    int v28 = *(_DWORD *)(*(void *)v25 + 148LL);
    if (v28 < v37)
    {
LABEL_39:
      sub_1812DC47C(v25, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, v28);
      goto LABEL_67;
    }

    uint64_t v54 = v11;
    uint64_t v55 = v12;
    uint64_t v56 = v13;
    int v57 = v16 & 0x8009010;
    sub_18131C57C((uint64_t)&v70, a7);
    uint64_t v58 = v70;
    *(_DWORD *)(v70 + 308) -= *(_DWORD *)(a7 + 40);
    int v60 = HIDWORD(v68);
    int v59 = v69;
    *(_DWORD *)(a7 + 4) |= v69 & 0x8010;
    LODWORD(v69) = v59 | v57;
    if (v60 >= 1) {
      goto LABEL_67;
    }
    uint64_t v13 = v56;
    int v12 = v55;
    uint64_t v11 = v54;
LABEL_24:
    if (!v11
      || (*(_BYTE *)v11 != 117 ? (a3 = 0LL) : (a3 = *(void *)(v11 + 8)),
          (uint64_t v40 = *(void *)a1,
           (uint64_t v41 = *(uint64_t (**)(void, uint64_t, uint64_t, void, void, void))(*(void *)a1 + 528LL)) == 0LL)
       || *(_BYTE *)(v40 + 197)
       || *(_BYTE *)(a1 + 302)))
    {
LABEL_47:
      uint64_t v42 = *(void *)(a1 + 16);
      if (!v42)
      {
        if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
          *(_BYTE *)(a1 + 35) = 1;
        }
        uint64_t v42 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
      }

      int v43 = *(_DWORD *)(a1 + 40);
      BOOL v44 = __OFSUB__(v43, 4);
      int v45 = v43 - 4;
      if (v45 < 0 != v44)
      {
        int v46 = *(_DWORD *)(a1 + 56);
        uint64_t v47 = (v46 + 1);
        *(_DWORD *)(a1 + 56) = v46 + 4;
      }

      else
      {
        uint64_t v47 = *(unsigned int *)(a1 + 44);
        *(_DWORD *)(a1 + 40) = v45;
        *(_DWORD *)(a1 + 44) = v47 + 4;
      }

      sub_181319C00(a1, (unsigned __int8 *)a5, v47);
      sub_181319C00(a1, (unsigned __int8 *)a6, (v47 + 1));
      sub_181319C00(a1, (unsigned __int8 *)a7, (v47 + 2));
      if (v42)
      {
        sub_18131B2D8( (uint64_t *)a1,  0LL,  (v47 + 3 - *v12),  (v47 + 3),  *v12,  (uint64_t)v12,  0);
        BOOL v51 = (_DWORD)v13 == 24;
        int v52 = *(_DWORD *)(v42 + 144);
        if (*(_DWORD *)(v42 + 148) <= v52)
        {
          sub_18131044C(v42, 166LL, v51, 0LL, 0LL, v48, v49, v50);
        }

        else
        {
          *(_DWORD *)(v42 + 144) = v52 + 1;
          uint64_t v53 = *(void *)(v42 + 136) + 40LL * v52;
          *(_DWORD *)uint64_t v53 = 166;
          *(_DWORD *)(v53 + 4) = v51;
          *(_OWORD *)(v53 + 8) = 0u;
          *(_OWORD *)(v53 + 24) = 0u;
        }
      }

uint64_t sub_181347338(const char *a1, char *__s, unsigned int *a3, uint64_t *a4, const char **a5, char **a6)
{
  unsigned int v12 = *a3;
  if (!__s)
  {
    LODWORD(v14) = 0;
    goto LABEL_14;
  }

  int v13 = strlen(__s);
  LODWORD(v14) = v13 & 0x3FFFFFFF;
  if ((v12 & 0x40) != 0)
  {
LABEL_10:
    if (*(_DWORD *)__s != 1701603686 || __s[4] != 58) {
      goto LABEL_14;
    }
    uint64_t v20 = (v14 + 8);
    unint64_t v21 = v13 & 0x3FFFFFFF;
    if (v21 < 8)
    {
      unint64_t v22 = 0LL;
      goto LABEL_64;
    }

    if (v21 >= 0x10)
    {
      int64x2_t v33 = 0uLL;
      int64x2_t v34 = (int64x2_t)(v14 + 8);
      v35.i64[0] = 0x2626262626262626LL;
      v35.i64[1] = 0x2626262626262626LL;
      int8x16_t v36 = (int8x16_t)vdupq_n_s64(1uLL);
      unint64_t v22 = v21 - (v13 & 0xF);
      unint64_t v37 = v22;
      uint64_t v38 = __s;
      int64x2_t v39 = 0uLL;
      int64x2_t v40 = 0uLL;
      int64x2_t v41 = 0uLL;
      int64x2_t v42 = 0uLL;
      int64x2_t v43 = 0uLL;
      int64x2_t v44 = 0uLL;
      do
      {
        int8x16_t v45 = *(int8x16_t *)v38;
        v38 += 16;
        uint8x16_t v46 = (uint8x16_t)vceqq_s8(v45, v35);
        uint16x8_t v47 = vmovl_u8(*(uint8x8_t *)v46.i8);
        uint32x4_t v48 = vmovl_u16(*(uint16x4_t *)v47.i8);
        v49.i64[0] = v48.u32[0];
        v49.i64[1] = v48.u32[1];
        int64x2_t v50 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v48.u32[2];
        v49.i64[1] = v48.u32[3];
        int64x2_t v51 = (int64x2_t)vandq_s8(v49, v36);
        uint32x4_t v52 = vmovl_high_u16(v47);
        v49.i64[0] = v52.u32[0];
        v49.i64[1] = v52.u32[1];
        int64x2_t v53 = (int64x2_t)vandq_s8(v49, v36);
        uint16x8_t v54 = vmovl_high_u8(v46);
        uint32x4_t v55 = vmovl_u16(*(uint16x4_t *)v54.i8);
        v49.i64[0] = v55.u32[0];
        v49.i64[1] = v55.u32[1];
        int64x2_t v56 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v52.u32[2];
        v49.i64[1] = v52.u32[3];
        int64x2_t v57 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v55.u32[2];
        v49.i64[1] = v55.u32[3];
        int64x2_t v58 = (int64x2_t)vandq_s8(v49, v36);
        uint32x4_t v59 = vmovl_high_u16(v54);
        v49.i64[0] = v59.u32[0];
        v49.i64[1] = v59.u32[1];
        int64x2_t v60 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v59.u32[2];
        v49.i64[1] = v59.u32[3];
        int64x2_t v44 = vaddq_s64(v44, (int64x2_t)vandq_s8(v49, v36));
        int64x2_t v43 = vaddq_s64(v43, v60);
        int64x2_t v42 = vaddq_s64(v42, v58);
        int64x2_t v40 = vaddq_s64(v40, v57);
        int64x2_t v41 = vaddq_s64(v41, v56);
        int64x2_t v39 = vaddq_s64(v39, v53);
        int64x2_t v33 = vaddq_s64(v33, v51);
        int64x2_t v34 = vaddq_s64(v34, v50);
        v37 -= 16LL;
      }

      while (v37);
      uint64_t v20 = vaddvq_s64( vaddq_s64( vaddq_s64(vaddq_s64(v34, v41), vaddq_s64(v39, v43)),  vaddq_s64(vaddq_s64(v33, v42), vaddq_s64(v40, v44))));
      if ((v13 & 0xF) == 0) {
        goto LABEL_68;
      }
      if ((v13 & 0xFu) < 8uLL)
      {
LABEL_64:
        int v77 = &__s[v22];
        unint64_t v78 = v21 - v22;
        do
        {
          int v79 = *v77++;
          if (v79 == 38) {
            ++v20;
          }
          --v78;
        }

        while (v78);
LABEL_68:
        if (sqlite3_initialize()) {
          return 7LL;
        }
        uint64_t v80 = (_DWORD *)sub_18126F0AC(v20);
        if (!v80) {
          return 7LL;
        }
        unsigned int v23 = v12 | 0x40;
        *uint64_t v80 = 0;
        int v19 = (const char *)(v80 + 1);
        if (__s[5] == 47 && __s[6] == 47)
        {
          uint64_t v81 = 0LL;
          int v82 = __s + 7;
          int v83 = __s[7];
          if (__s[7])
          {
            do
            {
              if (v83 == 47) {
                break;
              }
              int v83 = v82[++v81];
            }

            while (v82[v81]);
          }

          LODWORD(v84) = v81 + 7;
          if ((_DWORD)v81 != 9)
          {
            if (!(_DWORD)v81) {
              goto LABEL_79;
            }
LABEL_161:
            int v24 = sqlite3_mprintf("invalid uri authority: %.*s");
            goto LABEL_26;
          }

          if (*(void *)(__s + 7) != 0x736F686C61636F6CLL || __s[15] != 116) {
            goto LABEL_161;
          }
          LODWORD(v84) = 16;
        }

        else
        {
          LODWORD(v84) = 5;
        }

uint64_t sub_181347BEC(uint64_t a1, _BYTE *a2, char *__s)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (!__s) {
    return 0LL;
  }
  int v6 = &__s[strlen(__s) & 0x3FFFFFFF];
  int v8 = v6[1];
  unint64_t v7 = v6 + 1;
  if (!v8) {
    goto LABEL_12;
  }
  while (1)
  {
    int v9 = strcmp(v7, "hexkey");
    int v10 = strlen(v7);
    uint64_t v11 = &v7[v10 & 0x3FFFFFFF];
    unsigned int v12 = v11 + 1;
    if (!v9) {
      break;
    }
    int v13 = &v12[strlen(v11 + 1) & 0x3FFFFFFF];
    int v14 = v13[1];
    unint64_t v7 = v13 + 1;
    if (!v14) {
      goto LABEL_12;
    }
  }

  if (!*v12)
  {
LABEL_12:
    int v19 = &__s[strlen(__s) & 0x3FFFFFFF];
    int v21 = v19[1];
    uint64_t v20 = v19 + 1;
    if (v21)
    {
      while (1)
      {
        int v22 = strcmp(v20, "key");
        unsigned int v23 = &v20[(strlen(v20) & 0x3FFFFFFF) + 1];
        int v24 = strlen(v23);
        if (!v22) {
          break;
        }
        uint64_t v25 = &v23[v24 & 0x3FFFFFFF];
        int v26 = *((unsigned __int8 *)v25 + 1);
        uint64_t v20 = v25 + 1;
        if (!v26) {
          goto LABEL_15;
        }
      }

      int v35 = v24 & 0x3FFFFFFF;
      uint64_t v36 = a1;
      unint64_t v37 = a2;
      uint64_t v38 = (char *)v23;
      goto LABEL_22;
    }

void *sub_181347E40(uint64_t *a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *a4;
  if (*a4)
  {
    int v6 = *(unsigned __int16 *)(v5 + 20);
    if ((~v6 & 0x202) == 0 && *(_BYTE *)(v5 + 22) == 1)
    {
      uint64_t v7 = *(void *)(v5 + 8);
      if (!a1) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }

    if ((v6 & 1) == 0)
    {
      uint64_t v7 = sub_181303998((int *)v5, 1);
      if (!a1) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }

  uint64_t v7 = 0LL;
  if (!a1)
  {
LABEL_12:
    sub_1812CF36C(97953);
    uint64_t v8 = 0LL;
    goto LABEL_13;
  }

uint64_t sub_181348100( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(*(void *)(*a1 + 32) + 32LL * (int)a2 + 24);
  if (a1[21]) {
    uint64_t v11 = a1[21];
  }
  else {
    uint64_t v11 = (uint64_t)a1;
  }
  int v12 = *(_DWORD *)(v11 + 124);
  int v13 = 1 << a2;
  if ((v12 & (1 << a2)) == 0)
  {
    *(_DWORD *)(v11 + 124) = v12 | v13;
    if ((_DWORD)a2 == 1) {
      sub_1812FA2F0(v11);
    }
  }

  *(_DWORD *)(v11 + 120) |= v13;
  uint64_t v14 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v14 + 3;
  sub_1813483F8((uint64_t)a1, a2, v14, 0LL, 0LL, a6, a7, a8);
  uint64_t v22 = *(void **)(v10 + 16);
  if (v22)
  {
    uint64_t v23 = *((unsigned int *)a1 + 13);
    uint64_t v24 = (*((_DWORD *)a1 + 14) + 1);
    do
    {
      sub_1813486B0((uint64_t)a1, v22[2], 0LL, v14, v24, v23, v20, v21);
      uint64_t v22 = (void *)*v22;
    }

    while (v22);
  }

  uint64_t result = a1[2];
  if (result) {
    goto LABEL_15;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t result = sub_1812DC63C(a1, v15, v16, v17, v18, v19, v20, v21);
  if (result)
  {
LABEL_15:
    int v26 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v26)
    {
      return sub_18131044C(result, 150LL, a2, 0LL, 0LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(result + 144) = v26 + 1;
      uint64_t v27 = *(void *)(result + 136) + 40LL * v26;
      *(_DWORD *)uint64_t v27 = 150;
      *(_DWORD *)(v27 + 4) = a2;
      *(_OWORD *)(v27 + 8) = 0u;
      *(_OWORD *)(v27 + 24) = 0u;
    }
  }

  return result;
}

uint64_t sub_18134826C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 96);
  if (v11)
  {
    int v12 = (uint64_t *)(*(void *)(*a1 + 32) + 24LL);
    LODWORD(v13) = -1;
    do
    {
      uint64_t v14 = *v12;
      v12 += 4;
      uint64_t v13 = (v13 + 1);
    }

    while (v14 != v11);
  }

  else
  {
    uint64_t v13 = 4294934528LL;
  }

  if (a1[21]) {
    uint64_t v15 = a1[21];
  }
  else {
    uint64_t v15 = (uint64_t)a1;
  }
  int v16 = *(_DWORD *)(v15 + 124);
  int v17 = 1 << v13;
  if ((v16 & (1 << v13)) == 0)
  {
    *(_DWORD *)(v15 + 124) = v16 | v17;
    if ((_DWORD)v13 == 1) {
      sub_1812FA2F0(v15);
    }
  }

  *(_DWORD *)(v15 + 120) |= v17;
  uint64_t v18 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v18 + 3;
  if (a3) {
    uint64_t v19 = (uint64_t *)a3;
  }
  else {
    uint64_t v19 = (uint64_t *)a2;
  }
  if (a3) {
    uint64_t v20 = "idx";
  }
  else {
    uint64_t v20 = "tbl";
  }
  sub_1813483F8((uint64_t)a1, v13, v18, *v19, (uint64_t)v20, a6, a7, a8);
  sub_1813486B0( (uint64_t)a1,  a2,  a3,  v18,  (*((_DWORD *)a1 + 14) + 1),  *((unsigned int *)a1 + 13),  v21,  v22);
  uint64_t result = a1[2];
  if (result) {
    goto LABEL_23;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t result = sub_1812DC63C(a1, v23, v24, v25, v26, v27, v28, v29);
  if (result)
  {
LABEL_23:
    int v31 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v31)
    {
      return sub_18131044C(result, 150LL, v13, 0LL, 0LL, v27, v28, v29);
    }

    else
    {
      *(_DWORD *)(result + 144) = v31 + 1;
      uint64_t v32 = *(void *)(result + 136) + 40LL * v31;
      *(_DWORD *)uint64_t v32 = 150;
      *(_DWORD *)(v32 + 4) = v13;
      *(_OWORD *)(v32 + 8) = 0u;
      *(_OWORD *)(v32 + 24) = 0u;
    }
  }

  return result;
}

uint64_t sub_1813483F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a3;
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *(void *)a1;
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 168) && (*(_BYTE *)(v12 + 96) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  uint64_t result = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
LABEL_6:
    unsigned int v34 = v9;
    uint64_t v14 = 0LL;
    uint64_t v35 = result;
    uint64_t v15 = (_BYTE **)(*(void *)(v12 + 32) + 32LL * (int)a2);
    int v16 = off_189B6E928;
    do
    {
      uint64_t v19 = *v16;
      v36[v14] = 0;
      uint64_t result = sub_1812E2C64(v12, v19, *v15);
      if (result)
      {
        uint64_t v24 = *(unsigned int *)(result + 40);
        v37[v14] = v24;
        if (a4)
        {
          uint64_t result = (uint64_t)sub_1812C742C( (uint64_t *)a1,  "DELETE FROM %Q.%s WHERE %s=%Q",  v20,  v21,  v22,  v23,  v17,  v18,  (char)*v15);
        }

        else if (*(void *)(v12 + 360))
        {
          uint64_t result = (uint64_t)sub_1812C742C((uint64_t *)a1, "DELETE FROM %Q.%s", v20, v21, v22, v23, v17, v18, (char)*v15);
        }

        else
        {
          uint64_t result = v35;
          int v25 = *(_DWORD *)(v35 + 144);
          if (*(_DWORD *)(v35 + 148) <= v25)
          {
            uint64_t result = sub_18131044C(v35, 145LL, v24, a2, 0LL, v23, v17, v18);
          }

          else
          {
            *(_DWORD *)(v35 + 144) = v25 + 1;
            uint64_t v26 = *(void *)(v35 + 136) + 40LL * v25;
            *(_DWORD *)uint64_t v26 = 145;
            *(_DWORD *)(v26 + 4) = v24;
            *(_DWORD *)(v26 + 8) = a2;
            *(void *)(v26 + 12) = 0LL;
            *(void *)(v26 + 28) = 0LL;
            *(void *)(v26 + 20) = 0LL;
            *(_DWORD *)(v26 + 36) = 0;
          }
        }
      }

      else if (!v14)
      {
        uint64_t result = (uint64_t)sub_1812C742C( (uint64_t *)a1,  "CREATE TABLE %Q.%s(%s)",  v20,  v21,  v22,  v23,  v17,  v18,  (char)*v15);
        v37[0] = *(_DWORD *)(a1 + 132);
        v36[0] = 16;
      }

      ++v14;
      v16 += 2;
    }

    while (v14 != 3);
    int v27 = v37[0];
    uint64_t v28 = v35;
    int v29 = *(_DWORD *)(v35 + 144);
    if (*(_DWORD *)(v35 + 148) <= v29)
    {
      uint64_t result = sub_181310690(v35, 113LL, v34, v37[0], a2, 3LL, v17, v18);
      uint64_t v28 = v35;
    }

    else
    {
      *(_DWORD *)(v35 + 144) = v29 + 1;
      uint64_t v30 = *(void *)(v35 + 136) + 40LL * v29;
      *(_DWORD *)uint64_t v30 = 64881;
      *(_DWORD *)(v30 + 4) = v34;
      *(_DWORD *)(v30 + 8) = v27;
      *(_DWORD *)(v30 + 12) = a2;
      *(_DWORD *)(v30 + 16) = 3;
      *(void *)(v30 + 24) = 0LL;
      *(void *)(v30 + 32) = 0LL;
    }

    int v31 = *(_DWORD *)(v28 + 144);
    BOOL v32 = __OFSUB__(v31, 1);
    int v33 = v31 - 1;
    if (v33 < 0 == v32) {
      *(_WORD *)(*(void *)(v28 + 136) + 40LL * v33 + 2) = v36[0];
    }
  }

  return result;
}

void sub_1813486B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = (void *)a2;
  uint64_t v14 = *(void *)a1;
  unsigned int v203 = a5 + 9;
  if (*(_DWORD *)(a1 + 56) < (int)a5 + 9)
  {
    *(_DWORD *)(a1 + 56) = v203;
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15)
    {
LABEL_3:
      if (!a2) {
        return;
      }
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  if (!*(void *)(a1 + 168) && (*(_BYTE *)(v14 + 96) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  uint64_t v15 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v12) {
    return;
  }
LABEL_10:
  if (!v15
    || *((_BYTE *)v12 + 63)
    || *v12 && !sub_1812BF304("sqlite\\_%", (const char *)*v12, byte_1813C6554, 92LL))
  {
    return;
  }

  uint64_t v16 = v12[12];
  uint64_t v17 = *(void *)(v14 + 32);
  if (v16)
  {
    uint64_t v18 = (uint64_t *)(v17 + 24);
    LODWORD(v19) = -1;
    do
    {
      uint64_t v20 = *v18;
      v18 += 4;
      uint64_t v19 = (v19 + 1);
    }

    while (v20 != v16);
  }

  else
  {
    uint64_t v19 = 4294934528LL;
  }

  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)a1 + 528LL);
  uint64_t v193 = v19;
  if (!v22 || *(_BYTE *)(v21 + 197) || *(_BYTE *)(a1 + 302)) {
    goto LABEL_23;
  }
  int v173 = v22(*(void *)(v21 + 536), 28LL, *v12, 0LL, *(void *)(v17 + 32LL * (int)v19), *(void *)(a1 + 368));
  if (v173 == 1)
  {
    int v177 = 23;
    int16x8_t v178 = "not authorized";
LABEL_190:
    sub_1812DC47C(a1, v178, v174, v175, v176, a6, a7, a8, v179);
    *(_DWORD *)(a1 + 24) = v177;
    return;
  }

  if ((v173 & 0xFFFFFFFD) != 0)
  {
    int v177 = 1;
    int16x8_t v178 = "authorizer malfunction";
    goto LABEL_190;
  }

  uint64_t v19 = v193;
  if (v173) {
    return;
  }
LABEL_23:
  if (*(void *)(v14 + 360))
  {
    __s = (char *)sub_1812F2264(v14, 0x75uLL);
    if (!__s) {
      return;
    }
    *(void *)(__s + 109) = 0LL;
    *((_OWORD *)__s + 5) = 0u;
    *((_OWORD *)__s + 6) = 0u;
    *((_OWORD *)__s + 3) = 0u;
    *((_OWORD *)__s + 4) = 0u;
    *((_OWORD *)__s + 1) = 0u;
    *((_OWORD *)__s + 2) = 0u;
    *(_OWORD *)__s = 0u;
    strcpy(__s + 104, "sqlite_stat1");
    *(void *)__s = __s + 104;
    *((_DWORD *)__s + 13) = 0x3FFFF;
    sub_1812B9B68(*(uint64_t **)(a1 + 16), 184LL, 0LL, 0LL, 0LL, (uint64_t)__s, 4294967290LL, v23);
    uint64_t v19 = v193;
  }

  else
  {
    __s = 0LL;
  }

  uint64_t v198 = v14;
  unsigned int v200 = v9 + 4;
  unsigned int v189 = v9 + 6;
  unsigned int v192 = v9 + 7;
  unsigned int v185 = v9 + 8;
  if ((_DWORD)v19 != 1 && *(_BYTE *)(*(void *)(*(void *)(*(void *)a1 + 32LL) + 32LL * (int)v19 + 8) + 17LL))
  {
    sub_181319DC4(a1, v19, *((_DWORD *)v12 + 10), 0, *v12);
    uint64_t v19 = v193;
  }

  int v24 = a6 + 2;
  *(_DWORD *)(a1 + 52) = v24;
  sub_18128BBE0((void *)a1, a6, v19, (uint64_t)v12, 112LL, a6, a7, a8);
  sub_1812B9B68((uint64_t *)v15, 117LL, 0LL, v189, 0LL, *v12, 0LL, v25);
  uint64_t v30 = v12[2];
  unsigned int v180 = a6;
  if (v30)
  {
    unsigned int v195 = v9 + 1;
    unsigned int v202 = v9 + 2;
    unsigned int v190 = v9 + 5;
    unsigned int v191 = v9 + 3;
    unsigned int v201 = a6 + 1;
    uint64_t v199 = (int)v9 + 9LL;
    int v31 = 1;
    unsigned int v186 = v10;
    uint64_t v187 = v12;
    uint64_t v32 = v200;
    uint64_t v188 = v9;
    uint64_t v181 = v11;
    while (1)
    {
      if (!v11 || v30 == v11)
      {
        if (!*(void *)(v30 + 72)) {
          int v31 = 0;
        }
        __int16 v33 = *(_WORD *)(v30 + 99);
        int v197 = v31;
        if ((v12[6] & 0x80) != 0 && (v33 & 3) == 2)
        {
          uint64_t v34 = *(unsigned __int16 *)(v30 + 94);
          uint64_t v35 = (const char *)*v12;
          unsigned int v36 = *(unsigned __int16 *)(v30 + 94);
        }

        else
        {
          uint64_t v34 = *(unsigned __int16 *)(v30 + 96);
          uint64_t v35 = *(const char **)v30;
          if ((v33 & 8) != 0) {
            unsigned int v36 = *(unsigned __int16 *)(v30 + 94);
          }
          else {
            unsigned int v36 = *(unsigned __int16 *)(v30 + 96);
          }
        }

        uint64_t v37 = v36 - 1;
        sub_1812B9B68((uint64_t *)v15, 117LL, 0LL, v192, 0LL, (uint64_t)v35, 0LL, v29);
        uint64_t v41 = *(unsigned int *)(v30 + 88);
        int v42 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v42)
        {
          sub_18131044C(v15, 112LL, v201, v41, v193, v38, v39, v40);
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v42 + 1;
          uint64_t v43 = *(void *)(v15 + 136) + 40LL * v42;
          *(_DWORD *)uint64_t v43 = 112;
          *(_DWORD *)(v43 + 4) = v201;
          *(_DWORD *)(v43 + 8) = v41;
          *(_DWORD *)(v43 + 12) = v193;
          *(void *)(v43 + 24) = 0LL;
          *(void *)(v43 + 32) = 0LL;
          *(void *)(v43 + 16) = 0LL;
        }

        uint64_t v44 = *(void *)(a1 + 16);
        uint64_t v45 = sub_181319FB0((_DWORD *)a1, v30);
        if (v45)
        {
          if (*(_BYTE *)(*(void *)v44 + 103LL))
          {
            if (!*(void *)(*(void *)v44 + 816LL) && (*(_DWORD *)v45)-- == 1) {
              sub_1813014B0(*(void **)(v45 + 16), (void *)v45);
            }
          }

          else
          {
            uint64_t v50 = *(void *)(v44 + 136) + 40LL * *(int *)(v44 + 144);
            *(_BYTE *)(v50 - 39) = -8;
            *(void *)(v50 - 24) = v45;
          }
        }

        int v51 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v51)
        {
          sub_18131044C(v15, 71LL, v34, v202, 0LL, v46, v47, v48);
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v51 + 1;
          uint64_t v52 = *(void *)(v15 + 136) + 40LL * v51;
          *(_DWORD *)uint64_t v52 = 71;
          *(_DWORD *)(v52 + 4) = v34;
          *(_DWORD *)(v52 + 8) = v202;
          *(void *)(v52 + 12) = 0LL;
          *(void *)(v52 + 28) = 0LL;
          *(void *)(v52 + 20) = 0LL;
          *(_DWORD *)(v52 + 36) = 0;
        }

        uint64_t v53 = v201;
        uint64_t v54 = *(unsigned __int16 *)(v30 + 94);
        int v55 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v55)
        {
          sub_18131044C(v15, 71LL, v54, v191, 0LL, v46, v47, v48);
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v55 + 1;
          uint64_t v56 = *(void *)(v15 + 136) + 40LL * v55;
          *(_DWORD *)uint64_t v56 = 71;
          *(_DWORD *)(v56 + 4) = v54;
          *(_DWORD *)(v56 + 8) = v191;
          *(void *)(v56 + 12) = 0LL;
          *(void *)(v56 + 28) = 0LL;
          *(void *)(v56 + 20) = 0LL;
          *(_DWORD *)(v56 + 36) = 0;
        }

        int v57 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v57)
        {
          int v194 = sub_18131044C(v15, 36LL, v201, 0LL, 0LL, v46, v47, v48);
        }

        else
        {
          int v194 = *(_DWORD *)(v15 + 144);
          *(_DWORD *)(v15 + 144) = v57 + 1;
          uint64_t v58 = *(void *)(v15 + 136) + 40LL * v57;
          *(_DWORD *)uint64_t v58 = 36;
          *(_DWORD *)(v58 + 4) = v201;
          *(_OWORD *)(v58 + 8) = 0u;
          *(_OWORD *)(v58 + 24) = 0u;
        }

        int v59 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v59)
        {
          sub_18131044C(v15, 98LL, v201, v200, 1LL, v46, v47, v48);
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v59 + 1;
          uint64_t v60 = *(void *)(v15 + 136) + 40LL * v59;
          *(_DWORD *)uint64_t v60 = 98;
          *(_DWORD *)(v60 + 4) = v201;
          *(_DWORD *)(v60 + 8) = v200;
          *(_DWORD *)(v60 + 12) = 1;
          *(void *)(v60 + 24) = 0LL;
          *(void *)(v60 + 32) = 0LL;
          *(void *)(v60 + 16) = 0LL;
        }

        uint64_t v61 = *(unsigned int *)(v198 + 768);
        int v62 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v62)
        {
          sub_18131044C(v15, 71LL, v61, v190, 0LL, v46, v47, v48);
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v62 + 1;
          uint64_t v63 = *(void *)(v15 + 136) + 40LL * v62;
          *(_DWORD *)uint64_t v63 = 71;
          *(_DWORD *)(v63 + 4) = v61;
          *(_DWORD *)(v63 + 8) = v190;
          *(void *)(v63 + 12) = 0LL;
          *(void *)(v63 + 28) = 0LL;
          *(void *)(v63 + 20) = 0LL;
          *(_DWORD *)(v63 + 36) = 0;
        }

        uint64_t v64 = *(void *)(a1 + 16);
        uint64_t v65 = sub_1812F2264(*(void *)a1, 0x50uLL);
        if (v65)
        {
          *(void *)uint64_t v65 = 0LL;
          *(void *)(v65 + 8) = &unk_189B6E958;
          *(void *)(v65 + 24) = 0LL;
          *(_BYTE *)(v65 + 42) = 4;
          *(void *)(v65 + 32) = *(unsigned int *)(v64 + 144);
          sub_1812B9B68((uint64_t *)v64, 66LL, 0LL, v202, v195, v65, 4294967281LL, v68);
          int v69 = *(_DWORD *)(v64 + 144);
          BOOL v70 = __OFSUB__(v69, 1);
          int v71 = v69 - 1;
          if (v71 < 0 == v70) {
            *(_WORD *)(*(void *)(v64 + 136) + 40LL * v71 + 2) = 0;
          }
          uint64_t v72 = *(void *)(a1 + 168);
          if (!v72) {
            uint64_t v72 = a1;
          }
          *(_BYTE *)(v72 + 33) = 1;
        }

        int v73 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v73)
        {
          sub_18131044C(v15, 71LL, 0LL, v202, 0LL, v66, v67, v68);
          if (v36 < 2)
          {
LABEL_81:
            uint64_t v196 = *(unsigned int *)(v15 + 144);
            uint64_t v32 = v200;
LABEL_127:
            uint64_t v112 = *(void *)(a1 + 16);
            uint64_t v113 = sub_1812F2264(*(void *)a1, 0x40uLL);
            if (v113)
            {
              *(void *)uint64_t v113 = 0LL;
              *(void *)(v113 + 8) = &unk_189B6E9A0;
              *(void *)(v113 + 24) = 0LL;
              *(_BYTE *)(v113 + 42) = 2;
              *(void *)(v113 + 32) = *(unsigned int *)(v112 + 144);
              sub_1812B9B68((uint64_t *)v112, 66LL, 1LL, v195, v32, v113, 4294967281LL, v116);
              int v117 = *(_DWORD *)(v112 + 144);
              BOOL v70 = __OFSUB__(v117, 1);
              int v118 = v117 - 1;
              if (v118 < 0 == v70) {
                *(_WORD *)(*(void *)(v112 + 136) + 40LL * v118 + 2) = 0;
              }
              uint64_t v119 = *(void *)(a1 + 168);
              if (!v119) {
                uint64_t v119 = a1;
              }
              *(_BYTE *)(v119 + 33) = 1;
            }

            int v121 = *(_DWORD *)(v15 + 144);
            int v120 = *(_DWORD *)(v15 + 148);
            if (*(_DWORD *)(v198 + 768))
            {
              if (v120 <= v121)
              {
                int v121 = sub_18131044C(v15, 50LL, v32, 0LL, 0LL, v114, v115, v116);
              }

              else
              {
                *(_DWORD *)(v15 + 144) = v121 + 1;
                uint64_t v122 = *(void *)(v15 + 136) + 40LL * v121;
                *(_DWORD *)uint64_t v122 = 50;
                *(_DWORD *)(v122 + 4) = v32;
                *(_OWORD *)(v122 + 8) = 0u;
                *(_OWORD *)(v122 + 24) = 0u;
              }

              int v124 = *(_DWORD *)(v15 + 144);
              if (*(_DWORD *)(v15 + 148) <= v124)
              {
                int v124 = sub_18131044C(v15, 16LL, v32, 0LL, 0LL, v114, v115, v116);
              }

              else
              {
                *(_DWORD *)(v15 + 144) = v124 + 1;
                uint64_t v125 = *(void *)(v15 + 136) + 40LL * v124;
                *(_DWORD *)uint64_t v125 = 16;
                *(_DWORD *)(v125 + 4) = v32;
                *(_OWORD *)(v125 + 8) = 0u;
                *(_OWORD *)(v125 + 24) = 0u;
              }

              int v126 = *(_DWORD *)(v15 + 144);
              if (*(_DWORD *)(v15 + 148) <= v126)
              {
                int v126 = sub_181310690(v15, 24LL, v53, 0LL, v203, 1LL, v115, v116);
              }

              else
              {
                *(_DWORD *)(v15 + 144) = v126 + 1;
                uint64_t v127 = *(void *)(v15 + 136) + 40LL * v126;
                *(_DWORD *)uint64_t v127 = 64792;
                *(_DWORD *)(v127 + 4) = v53;
                *(_DWORD *)(v127 + 8) = 0;
                *(_DWORD *)(v127 + 12) = v203;
                *(_DWORD *)(v127 + 16) = 1;
                *(void *)(v127 + 24) = 0LL;
                *(void *)(v127 + 32) = 0LL;
              }

              int v128 = *(_DWORD *)(v15 + 144);
              int v129 = &byte_18C550680;
              if (!*(_BYTE *)(*(void *)v15 + 103LL)) {
                int v129 = (char *)(*(void *)(v15 + 136) + 40LL * v121);
              }
              *((_DWORD *)v129 + 2) = v128;
              if (*(_DWORD *)(v15 + 148) <= v128)
              {
                sub_18131044C(v15, 39LL, v53, v196, 0LL, v114, v115, v116);
              }

              else
              {
                *(_DWORD *)(v15 + 144) = v128 + 1;
                uint64_t v130 = *(void *)(v15 + 136) + 40LL * v128;
                *(_DWORD *)uint64_t v130 = 39;
                *(_DWORD *)(v130 + 4) = v53;
                *(_DWORD *)(v130 + 8) = v196;
                *(void *)(v130 + 12) = 0LL;
                *(void *)(v130 + 28) = 0LL;
                *(void *)(v130 + 20) = 0LL;
                *(_DWORD *)(v130 + 36) = 0;
              }

              uint64_t v12 = v187;
              uint64_t v9 = v188;
              int v131 = *(_DWORD *)(v15 + 144);
              if (*(_BYTE *)(*(void *)v15 + 103LL))
              {
                unsigned int v132 = &byte_18C550680;
                dword_18C550688 = *(_DWORD *)(v15 + 144);
              }

              else
              {
                uint64_t v133 = *(void *)(v15 + 136);
                *(_DWORD *)(v133 + 40LL * v124 + 8) = v131;
                unsigned int v132 = (char *)(v133 + 40LL * v126);
              }

              *((_DWORD *)v132 + 2) = v131;
              uint64_t v10 = v186;
            }

            else
            {
              if (v120 <= v121)
              {
                sub_18131044C(v15, 39LL, v53, v196, 0LL, v114, v115, v116);
              }

              else
              {
                *(_DWORD *)(v15 + 144) = v121 + 1;
                uint64_t v123 = *(void *)(v15 + 136) + 40LL * v121;
                *(_DWORD *)uint64_t v123 = 39;
                *(_DWORD *)(v123 + 4) = v53;
                *(_DWORD *)(v123 + 8) = v196;
                *(void *)(v123 + 12) = 0LL;
                *(void *)(v123 + 28) = 0LL;
                *(void *)(v123 + 20) = 0LL;
                *(_DWORD *)(v123 + 36) = 0;
              }

              uint64_t v12 = v187;
              uint64_t v9 = v188;
            }

            uint64_t v134 = *(void *)(a1 + 16);
            uint64_t v135 = sub_1812F2264(*(void *)a1, 0x38uLL);
            if (v135)
            {
              *(void *)uint64_t v135 = 0LL;
              *(void *)(v135 + 8) = &unk_189B6E9E8;
              *(void *)(v135 + 24) = 0LL;
              *(_BYTE *)(v135 + 42) = 1;
              *(void *)(v135 + 32) = *(unsigned int *)(v134 + 144);
              sub_1812B9B68((uint64_t *)v134, 66LL, 0LL, v195, v185, v135, 4294967281LL, v136);
              int v137 = *(_DWORD *)(v134 + 144);
              BOOL v70 = __OFSUB__(v137, 1);
              int v138 = v137 - 1;
              if (v138 < 0 == v70) {
                *(_WORD *)(*(void *)(v134 + 136) + 40LL * v138 + 2) = 0;
              }
              uint64_t v139 = *(void *)(a1 + 168);
              if (!v139) {
                uint64_t v139 = a1;
              }
              *(_BYTE *)(v139 + 33) = 1;
            }

            sub_1812B9B68((uint64_t *)v15, 97LL, v189, 3LL, v32, (uint64_t)"BBB", 0LL, v136);
            int v140 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v140)
            {
              sub_18131044C(v15, 127LL, v10, v9, 0LL, v27, v28, v29);
            }

            else
            {
              *(_DWORD *)(v15 + 144) = v140 + 1;
              uint64_t v141 = *(void *)(v15 + 136) + 40LL * v140;
              *(_DWORD *)uint64_t v141 = 127;
              *(_DWORD *)(v141 + 4) = v10;
              *(_DWORD *)(v141 + 8) = v9;
              *(void *)(v141 + 12) = 0LL;
              *(void *)(v141 + 28) = 0LL;
              *(void *)(v141 + 20) = 0LL;
              *(_DWORD *)(v141 + 36) = 0;
            }

            int v31 = v197;
            int v142 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v142)
            {
              sub_18131044C(v15, 128LL, v10, v32, v9, v27, v28, v29);
            }

            else
            {
              *(_DWORD *)(v15 + 144) = v142 + 1;
              uint64_t v143 = *(void *)(v15 + 136) + 40LL * v142;
              *(_DWORD *)uint64_t v143 = 128;
              *(_DWORD *)(v143 + 4) = v10;
              *(_DWORD *)(v143 + 8) = v32;
              *(_DWORD *)(v143 + 12) = v9;
              *(void *)(v143 + 24) = 0LL;
              *(void *)(v143 + 32) = 0LL;
              *(void *)(v143 + 16) = 0LL;
            }

            if (!*(_BYTE *)(*(void *)v15 + 103LL))
            {
              uint64_t v144 = *(int *)(v15 + 144) - 1LL;
              uint64_t v145 = *(void *)(v15 + 136);
              uint64_t v146 = v145 + 40 * v144;
              int v148 = *(unsigned __int8 *)(v146 + 1);
              int8x16_t v147 = (_BYTE *)(v146 + 1);
              if (v148)
              {
                sub_181310724((uint64_t *)v15, v145 + 40 * v144, __s, 0xFFFFFFFB);
              }

              else if (__s)
              {
                *(void *)(v145 + 40 * v144 + 16) = __s;
                *int8x16_t v147 = -5;
              }
            }

            int v149 = *(_DWORD *)(v15 + 144);
            if (v149 >= 1) {
              *(_WORD *)(*(void *)(v15 + 136) + 40LL * (v149 - 1) + 2) = 8;
            }
            uint64_t v150 = &byte_18C550680;
            if (!*(_BYTE *)(*(void *)v15 + 103LL)) {
              uint64_t v150 = (char *)(*(void *)(v15 + 136) + 40LL * v194);
            }
            *((_DWORD *)v150 + 2) = v149;
            goto LABEL_35;
          }
        }

        else
        {
          *(_DWORD *)(v15 + 144) = v73 + 1;
          uint64_t v74 = *(void *)(v15 + 136) + 40LL * v73;
          *(void *)uint64_t v74 = 71LL;
          *(_DWORD *)(v74 + 8) = v202;
          *(void *)(v74 + 12) = 0LL;
          *(void *)(v74 + 28) = 0LL;
          *(void *)(v74 + 20) = 0LL;
          *(_DWORD *)(v74 + 36) = 0;
          if (v36 < 2) {
            goto LABEL_81;
          }
        }

        int v75 = *(_DWORD *)(a1 + 68);
        uint64_t v76 = (v75 - 1);
        *(_DWORD *)(a1 + 68) = v76;
        uint64_t v77 = sub_1812F2264(v198, 4LL * v37);
        if (v77)
        {
          unint64_t v78 = (void *)v77;
          int v79 = *(_DWORD *)(v15 + 144);
          int v184 = v75;
          if (*(_DWORD *)(v15 + 148) <= v79)
          {
            sub_18131044C(v15, 9LL, 0LL, 0LL, 0LL, v27, v28, v29);
          }

          else
          {
            *(_DWORD *)(v15 + 144) = v79 + 1;
            uint64_t v80 = *(void *)(v15 + 136) + 40LL * v79;
            *(_BYTE *)uint64_t v80 = 9;
            *(_OWORD *)(v80 + 1) = 0u;
            *(_OWORD *)(v80 + 17) = 0u;
            *(void *)(v80 + 32) = 0LL;
          }

          uint64_t v81 = *(unsigned int *)(v15 + 144);
          if ((_DWORD)v37 == 1 && *(_WORD *)(v30 + 94) == 1 && *(_BYTE *)(v30 + 98))
          {
            if (*(_DWORD *)(v15 + 148) <= (int)v81)
            {
              sub_18131044C(v15, 51LL, v203, v76, 0LL, v27, v28, v29);
            }

            else
            {
              *(_DWORD *)(v15 + 144) = v81 + 1;
              uint64_t v82 = *(void *)(v15 + 136) + 40LL * (int)v81;
              *(_DWORD *)uint64_t v82 = 51;
              *(_DWORD *)(v82 + 4) = v203;
              *(_DWORD *)(v82 + 8) = v76;
              *(void *)(v82 + 12) = 0LL;
              *(void *)(v82 + 28) = 0LL;
              *(void *)(v82 + 20) = 0LL;
              *(_DWORD *)(v82 + 36) = 0;
            }
          }

          unsigned int v183 = v76;
          uint64_t v196 = v81;
          uint64_t v83 = 0LL;
          do
          {
            uint64_t v84 = *(char **)(*(void *)(v30 + 64) + 8 * v83);
            uint64_t v85 = *(unsigned __int8 *)(*(void *)a1 + 100LL);
            int v86 = *(unsigned __int8 *)(*(void *)a1 + 197LL);
            uint64_t v87 = sub_18130D3EC(*(void *)a1, *(unsigned __int8 *)(*(void *)a1 + 100LL), v84, v86);
            uint64_t v92 = (uint64_t)v87;
            if (!v86 && (!v87 || !v87[3])) {
              uint64_t v92 = sub_181311FC8(a1, v85, (uint64_t)v87, v84, v88, v89, v90, v91);
            }
            uint64_t v32 = v200;
            uint64_t v53 = v201;
            int v93 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v93)
            {
              sub_18131044C(v15, 71LL, v83, v202, 0LL, v89, v90, v91);
            }

            else
            {
              *(_DWORD *)(v15 + 144) = v93 + 1;
              uint64_t v94 = *(void *)(v15 + 136) + 40LL * v93;
              *(_DWORD *)uint64_t v94 = 71;
              *(_DWORD *)(v94 + 4) = v83;
              *(_DWORD *)(v94 + 8) = v202;
              *(void *)(v94 + 12) = 0LL;
              *(void *)(v94 + 28) = 0LL;
              *(void *)(v94 + 20) = 0LL;
              *(_DWORD *)(v94 + 36) = 0;
            }

            int v95 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v95)
            {
              sub_18131044C(v15, 94LL, v201, v83, v200, v89, v90, v91);
            }

            else
            {
              *(_DWORD *)(v15 + 144) = v95 + 1;
              uint64_t v96 = *(void *)(v15 + 136) + 40LL * v95;
              *(_DWORD *)uint64_t v96 = 94;
              *(_DWORD *)(v96 + 4) = v201;
              *(_DWORD *)(v96 + 8) = v83;
              *(_DWORD *)(v96 + 12) = v200;
              *(void *)(v96 + 24) = 0LL;
              *(void *)(v96 + 32) = 0LL;
              *(void *)(v96 + 16) = 0LL;
            }

            *((_DWORD *)v78 + v83) = sub_1812B9B68( (uint64_t *)v15,  52LL,  v200,  0LL,  v83 + v203,  v92,  4294967294LL,  v91);
            int v100 = *(_DWORD *)(v15 + 144);
            if (v100 >= 1) {
              *(_WORD *)(*(void *)(v15 + 136) + 40LL * (v100 - 1) + 2) = 128;
            }
            ++v83;
          }

          while (v37 != v83);
          if (*(_DWORD *)(v15 + 148) <= v100)
          {
            sub_18131044C(v15, 71LL, v37, v202, 0LL, v97, v98, v99);
          }

          else
          {
            *(_DWORD *)(v15 + 144) = v100 + 1;
            uint64_t v101 = *(void *)(v15 + 136) + 40LL * v100;
            *(_DWORD *)uint64_t v101 = 71;
            *(_DWORD *)(v101 + 4) = v37;
            *(_DWORD *)(v101 + 8) = v202;
            *(void *)(v101 + 12) = 0LL;
            *(void *)(v101 + 28) = 0LL;
            *(void *)(v101 + 20) = 0LL;
            *(_DWORD *)(v101 + 36) = 0;
          }

          int v102 = *(_DWORD *)(v15 + 144);
          if (*(_DWORD *)(v15 + 148) <= v102)
          {
            sub_18131044C(v15, 9LL, 0LL, v183, 0LL, v97, v98, v99);
          }

          else
          {
            *(_DWORD *)(v15 + 144) = v102 + 1;
            uint64_t v103 = *(void *)(v15 + 136) + 40LL * v102;
            *(void *)uint64_t v103 = 9LL;
            *(_DWORD *)(v103 + 8) = v183;
            *(void *)(v103 + 12) = 0LL;
            *(void *)(v103 + 28) = 0LL;
            *(void *)(v103 + 20) = 0LL;
            *(_DWORD *)(v103 + 36) = 0;
          }

          uint64_t v11 = v181;
          int v104 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v15 + 103LL)) {
            int v104 = (char *)(*(void *)(v15 + 136) + 40LL * ((int)v196 - 1));
          }
          uint64_t v105 = 0LL;
          *((_DWORD *)v104 + 2) = *(_DWORD *)(v15 + 144);
          do
          {
            int v107 = *(_DWORD *)(v15 + 144);
            uint64_t v108 = &byte_18C550680;
            if (!*(_BYTE *)(*(void *)v15 + 103LL)) {
              uint64_t v108 = (char *)(*(void *)(v15 + 136) + 40LL * *((int *)v78 + v105));
            }
            *((_DWORD *)v108 + 2) = v107;
            uint64_t v109 = v199 + v105;
            if (*(_DWORD *)(v15 + 148) > v107)
            {
              *(_DWORD *)(v15 + 144) = v107 + 1;
              uint64_t v106 = *(void *)(v15 + 136) + 40LL * v107;
              *(_DWORD *)uint64_t v106 = 94;
              *(_DWORD *)(v106 + 4) = v201;
              *(_DWORD *)(v106 + 8) = v105;
              *(_DWORD *)(v106 + 12) = v109;
              *(void *)(v106 + 24) = 0LL;
              *(void *)(v106 + 32) = 0LL;
              *(void *)(v106 + 16) = 0LL;
            }

            else
            {
              sub_18131044C(v15, 94LL, v201, v105, v109, v97, v98, v99);
            }

            ++v105;
          }

          while (v37 != v105);
          uint64_t v110 = *(void *)(v15 + 24);
          int v111 = -v184;
          if (*(_DWORD *)(v110 + 68) + *(_DWORD *)(v110 + 72) < 0) {
            sub_18131E420(v110, v15, v111);
          }
          else {
            *(_DWORD *)(*(void *)(v110 + 80) + 4LL * v111) = *(_DWORD *)(v15 + 144);
          }
          uint64_t v10 = v186;
          sub_1812F20DC((void *)v198, v78);
          goto LABEL_127;
        }

        uint64_t v12 = v187;
        uint64_t v9 = v188;
        uint64_t v32 = v200;
        int v31 = v197;
      }

void sub_1813497D8(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v6 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1812CF36C(89717);
      LODWORD(v7) = 0;
      goto LABEL_8;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v5 = 0LL;
    uint64_t v6 = *a3;
    if (!*a3) {
      goto LABEL_4;
    }
  }

  __int16 v8 = *(_WORD *)(v6 + 20);
  if ((v8 & 0x24) != 0)
  {
    double v7 = *(double *)v6;
  }

  else if ((v8 & 8) != 0)
  {
    double v21 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v21 <= 9.22337204e18) {
        *(void *)&double v7 = (uint64_t)v21;
      }
      else {
        LODWORD(v7) = -1;
      }
    }

    else
    {
      LODWORD(v7) = 0;
    }
  }

  else if ((v8 & 0x12) != 0 && *(void *)(v6 + 8))
  {
    LODWORD(v7) = sub_181303DF0(v6);
  }

  else
  {
    LODWORD(v7) = 0;
  }

void *sub_181349B38(void *a1)
{
  return sub_1812F20DC((void *)*a1, a1);
}

void sub_181349B44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned int *)sqlite3_value_blob(*(sqlite3_value **)a3);
  uint64_t v6 = *(void *)(a3 + 8);
  if (!v6)
  {
    sub_1812CF36C(89717);
    goto LABEL_7;
  }

  __int16 v7 = *(_WORD *)(v6 + 20);
  if ((v7 & 0x24) == 0)
  {
    if ((v7 & 8) != 0)
    {
      LODWORD(v40) = -1;
      else {
        int v8 = 0;
      }
      if (!*((void *)v5 + 2)) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }

    if ((v7 & 0x12) != 0 && *(void *)(v6 + 8))
    {
      int v8 = sub_181303DF0(v6);
      if (*((void *)v5 + 2)) {
        goto LABEL_8;
      }
LABEL_4:
      uint64_t v9 = v5[7];
      goto LABEL_33;
    }

void sub_181349E00(_DWORD *a1, uint64_t a2, sqlite3_value **a3)
{
  int v4 = sqlite3_value_blob(*a3);
  uint64_t v5 = v4;
  int v6 = 100 * v4[8] + 100;
  v14[0] = 0LL;
  v14[1] = 0LL;
  int v15 = 0;
  int v16 = v6;
  int v17 = 0;
  __int16 v18 = 0;
  uint64_t v7 = 2LL;
  if (!*((_BYTE *)v4 + 36)) {
    uint64_t v7 = 4LL;
  }
  sqlite3_str_appendf((sqlite3_str *)v14, "%llu", *(void *)&v4[v7]);
  if ((int)v5[8] >= 1)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *(void *)(*((void *)v5 + 6) + 8 * v8);
      uint64_t v10 = v9 + 1;
      uint64_t v11 = *((void *)v5 + 2);
      unint64_t v12 = (v11 + v9) / (unint64_t)(v9 + 1);
      else {
        uint64_t v13 = 2LL;
      }
      if (v12 == 2) {
        unint64_t v12 = v13;
      }
      sqlite3_str_appendf((sqlite3_str *)v14, " %llu", v12);
      ++v8;
    }

    while (v8 < (int)v5[8]);
  }

  sub_181349F0C(a1, (uint64_t)v14);
}

void sub_181349F0C(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 28);
  if (*(_BYTE *)(a2 + 28))
  {
    if (a1)
    {
      a1[9] = v3;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
      {
        if ((_DWORD)v3 == 100)
        {
          int v4 = "another row available";
        }

        else if ((_DWORD)v3 == 101)
        {
          int v4 = "no more rows available";
        }

        else if (v3 > 0x1C || ((0x1410004uLL >> v3) & 1) != 0)
        {
          int v4 = "unknown error";
        }

        else
        {
          int v4 = off_189B6EC30[v3];
        }

        int v5 = -1;
        goto LABEL_21;
      }
    }

    else
    {
      sub_1812CF36C(97620);
    }
  }

  else
  {
    if ((*(_BYTE *)(a2 + 29) & 4) != 0)
    {
      if (a1) {
        sub_1812D7A8C((uint64_t)a1, *(char **)(a2 + 8), *(_DWORD *)(a2 + 24), 1u, sub_1812E1FD0);
      }
      else {
        sub_1812CF36C(97498);
      }
      return;
    }

    if (a1)
    {
      int v4 = &byte_1813CEAEE;
      int v5 = 0;
LABEL_21:
      sub_1812D7A8C((uint64_t)a1, v4, v5, 1u, 0LL);
      goto LABEL_22;
    }

    sub_1812CF36C(97498);
  }

uint64_t sub_18134A054( uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*a2)
  {
    uint64_t v9 = *v8;
    if (!*v8)
    {
      int v18 = 0;
      int v17 = "sqlite_";
      goto LABEL_30;
    }

    if ((v9 & 0xFFFFFFDF) == 0x53)
    {
      uint64_t v10 = v8[1];
      if (!v8[1])
      {
        int v18 = 0;
        int v17 = "qlite_";
        goto LABEL_30;
      }

      if ((v10 & 0xFFFFFFDF) == 0x51)
      {
        uint64_t v11 = v8[2];
        if (!v8[2])
        {
          int v18 = 0;
          int v17 = "lite_";
          goto LABEL_30;
        }

        if ((v11 & 0xFFFFFFDF) == 0x4C)
        {
          uint64_t v12 = v8[3];
          if (!v8[3])
          {
            int v18 = 0;
            int v17 = "ite_";
            goto LABEL_30;
          }

          if ((v12 & 0xFFFFFFDF) == 0x49)
          {
            uint64_t v13 = v8[4];
            if (!v8[4])
            {
              int v18 = 0;
              int v17 = "te_";
              goto LABEL_30;
            }

            if ((v13 & 0xFFFFFFDF) == 0x54)
            {
              uint64_t v14 = v8[5];
              if (!v8[5])
              {
                int v18 = 0;
                int v17 = "e_";
                goto LABEL_30;
              }

              if ((v14 & 0xFFFFFFDF) == 0x45)
              {
                uint64_t v15 = v8[6];
                if (!v8[6])
                {
                  int v18 = 0;
                  int v17 = "_";
LABEL_30:
                  goto LABEL_31;
                }

                if ((_DWORD)v15 == 95) {
                  goto LABEL_39;
                }
                int v16 = &byte_1813C6343[v15];
                int v17 = "_";
              }

              else
              {
                int v16 = &byte_1813C6343[v14];
                int v17 = "e_";
              }
            }

            else
            {
              int v16 = &byte_1813C6343[v13];
              int v17 = "te_";
            }
          }

          else
          {
            int v16 = &byte_1813C6343[v12];
            int v17 = "ite_";
          }
        }

        else
        {
          int v16 = &byte_1813C6343[v11];
          int v17 = "lite_";
        }
      }

      else
      {
        int v16 = &byte_1813C6343[v10];
        int v17 = "qlite_";
      }
    }

    else
    {
      int v16 = &byte_1813C6343[v9];
      int v17 = "sqlite_";
    }

    int v18 = *v16;
    goto LABEL_30;
  }

uint64_t sub_18134A24C( uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = a1[2];
  if (result)
  {
    uint64_t v12 = (**(_DWORD **)(*(void *)(*a1 + 32) + 32LL * (int)a2 + 24) + 1);
    int v13 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v13)
    {
      sub_18131044C(result, 100LL, a2, 1LL, v12, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(result + 144) = v13 + 1;
      uint64_t v14 = *(void *)(result + 136) + 40LL * v13;
      *(_DWORD *)uint64_t v14 = 100;
      *(_DWORD *)(v14 + 4) = a2;
      *(_DWORD *)(v14 + 8) = 1;
      *(_DWORD *)(v14 + 12) = v12;
      *(void *)(v14 + 24) = 0LL;
      *(void *)(v14 + 32) = 0LL;
      *(void *)(v14 + 16) = 0LL;
    }

    uint64_t result = sub_1813202C4(a1[2], a2, 0LL, a3, v12, a6, a7, a8);
    if ((_DWORD)a2 != 1) {
      return sub_1813202C4(a1[2], 1LL, 0LL, a3, v15, v16, v17, v18);
    }
  }

  return result;
}

uint64_t *sub_18134A328( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  *(_BYTE *)(a1 + 28) = 1;
  uint64_t result = sub_1812C742C( (uint64_t *)a1,  "SELECT 1 FROM %w.sqlite_master WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create vir tual%%' AND sqlite_rename_test(%Q, sql, type, name, %d, %Q, %d)=NULL ",  a3,  a4,  a5,  a6,  a7,  a8,  a2);
  if (!v8) {
    return sub_1812C742C( (uint64_t *)a1,  "SELECT 1 FROM temp.sqlite_master WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create virtu al%%' AND sqlite_rename_test(%Q, sql, type, name, 1, %Q, %d)=NULL ",  v12,  v13,  v14,  v15,  v16,  v17,  a2);
  }
  return result;
}

uint64_t *sub_18134A3A8( uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = a3;
  uint64_t result = sub_1812C742C( a1,  "UPDATE %w.sqlite_master SET sql = sqlite_rename_quotefix(%Q, sql)WHERE name NOT LIKE 'sqliteX_%%' ESCAP E 'X' AND sql NOT LIKE 'create virtual%%'",  a3,  a4,  a5,  a6,  a7,  a8,  a2);
  if (!v9) {
    return sub_1812C742C( a1,  "UPDATE temp.sqlite_master SET sql = sqlite_rename_quotefix('temp', sql)WHERE name NOT LIKE 'sqliteX_%%' ESC APE 'X' AND sql NOT LIKE 'create virtual%%'",  v12,  v13,  v14,  v15,  v16,  v17,  a9);
  }
  return result;
}

unsigned __int8 *sub_18134A400(uint64_t *a1, uint64_t a2)
{
  int v2 = (unsigned __int8 *)a2;
  WORD2(v11) = 1;
  int v8 = sub_18129C78C;
  int v9 = sub_18131C570;
  LODWORD(v12) = 0;
  if (a2)
  {
    sub_18131C57C((uint64_t)&v7, a2);
    if (!WORD2(v11))
    {
      unsigned int v4 = *((unsigned __int8 *)a1 + 302);
      if (v4 >= 2)
      {
        uint64_t v11 = 0LL;
        uint64_t v12 = 0LL;
        uint64_t v7 = a1;
        int v8 = sub_181323638;
        int v9 = sub_1813236A4;
        uint64_t v10 = 0LL;
        *((_BYTE *)a1 + 302) = 3;
        sub_18131C57C((uint64_t)&v7, (uint64_t)v2);
        *((_BYTE *)a1 + 302) = v4;
      }

      sub_181309110((void *)*a1, v2);
      uint64_t v5 = sub_1812F2264(*a1, 0x50uLL);
      int v2 = (unsigned __int8 *)v5;
      if (v5)
      {
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_BYTE *)uint64_t v5 = 121;
        *(_WORD *)(v5 + 52) = -1;
        *(_DWORD *)(v5 + 40) = 1;
      }
    }
  }

  return v2;
}

uint64_t sub_18134A4F4()
{
  dword_18C465544 = 0;
  int has_internal_content = os_variant_has_internal_content();
  else {
    int v1 = dword_18C465544;
  }
  int v2 = v1 | 1;
  dword_18C465544 = v1 | 1;
  uint64_t v3 = getenv("SQLITE_ENABLE_LOGGING");
  if (!v3 || strcmp(v3, "0"))
  {
    goto LABEL_7;
  }

  int v2 = v1 & 0xFFFFFFFE;
  dword_18C465544 = v1 & 0xFFFFFFFE;
  if (has_internal_content)
  {
LABEL_7:
    v2 |= 2u;
    dword_18C465544 = v2;
  }

void sub_18134A6AC(uint64_t a1)
{
  if (a1) {
    sub_1812D7A8C(a1, (char *)sqlite3_version, -1, 1u, 0LL);
  }
  else {
    sub_1812CF36C(97498);
  }
}

void sub_18134A6D4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    int v5 = *(unsigned __int16 *)(v4 + 20);
    if ((~v5 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      char v6 = *(const char **)(v4 + 8);
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }

    if ((v5 & 1) == 0)
    {
      char v6 = (const char *)sub_181303998((int *)v4, 1);
      if (v6)
      {
LABEL_8:
        int v7 = sqlite3_compileoption_used(v6);
        if (a1)
        {
          unsigned int v8 = v7;
          uint64_t v9 = *a1;
          if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v9, v8);
          }

          else
          {
            *(void *)uint64_t v9 = v8;
            *(_WORD *)(v9 + 20) = 4;
          }
        }

        else
        {
          sub_1812CF36C(97431);
        }
      }
    }
  }

void sub_18134A780(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89717);
    goto LABEL_8;
  }

  __int16 v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    LODWORD(v4) = *(_DWORD *)v4;
    goto LABEL_4;
  }

  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(void *)(v4 + 8))
    {
      LODWORD(v4) = sub_181303DF0(v4);
      goto LABEL_4;
    }

void sub_18134A860(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v6 + 20)) & 1) != 0) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v6 = *a3;
    if (!*a3) {
      return;
    }
  }

  int v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0) {
      return;
    }
    unsigned int v8 = (char *)sub_181303998((int *)v6, 1);
    if (!v8) {
      return;
    }
  }

  else
  {
    unsigned int v8 = *(char **)(v6 + 8);
    if (!v8) {
      return;
    }
  }

  uint64_t v9 = *a3;
  if (*a3)
  {
    __int16 v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
    {
      int v11 = *(_DWORD *)(v9 + 16);
      if (a2 != 1) {
        goto LABEL_22;
      }
LABEL_29:
      uint64_t v14 = 0LL;
      uint64_t v15 = &dword_1813CA7A8;
      LODWORD(v16) = 1;
      uint64_t v17 = off_189B6EA30;
LABEL_30:
      if (a1 && (uint64_t v18 = *((void *)a1 + 1)) != 0)
      {
        int v19 = *(_DWORD *)(v18 + 8);
        uint64_t v45 = v15;
        uint64_t v46 = v14;
        if ((v19 & 1) != 0 && v11)
        {
          uint64_t v20 = v16;
          unsigned int v21 = v11;
          while (2)
          {
            uint64_t v22 = v20;
            uint64_t v23 = v15;
            unint64_t v24 = (const void **)v17;
            while (1)
            {
              unsigned int v26 = *v23++;
              size_t v25 = v26;
              if (v21 >= v26 && !memcmp(v8, *v24, v25)) {
                break;
              }
              ++v24;
              if (!--v22)
              {
                int v11 = v21;
                uint64_t v15 = v45;
                uint64_t v14 = v46;
                goto LABEL_53;
              }
            }

            int v11 = 0;
            v8 += v25;
            v21 -= v25;
            uint64_t v15 = v45;
            uint64_t v14 = v46;
            uint64_t v20 = v16;
            if (v21) {
              continue;
            }
            break;
          }
        }

        else
        {
LABEL_53:
          if ((v19 & 2) != 0 && v11)
          {
            unsigned int v32 = v11;
            while (2)
            {
              uint64_t v33 = v16;
              uint64_t v34 = v15;
              uint64_t v35 = (const void **)v17;
              while (1)
              {
                unsigned int v37 = *v34++;
                size_t v36 = v37;
                if (v32 >= v37)
                {
                  uint64_t v38 = v32 - v36;
                  if (!memcmp(&v8[v38], *v35, v36)) {
                    break;
                  }
                }

                ++v35;
                if (!--v33)
                {
                  int v11 = v32;
                  goto LABEL_63;
                }
              }

              unsigned int v32 = v38;
              uint64_t v15 = v45;
              if ((_DWORD)v38) {
                continue;
              }
              break;
            }

            int v11 = 0;
LABEL_63:
            uint64_t v14 = v46;
          }
        }
      }

      else
      {
        sub_1812CF36C(97932);
      }

      if (!v14) {
        goto LABEL_71;
      }
      uint64_t v39 = (void (**)(char **))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
        --qword_18C468B10;
        off_18C4653A8(v17);
        uint64_t v17 = (char **)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_71;
        }
        uint64_t v39 = (void (**)(char **))&xmmword_18C465410;
      }

      (*v39)(v17);
LABEL_71:
      if (a1) {
        sub_1812D7A8C((uint64_t)a1, v8, v11, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
      else {
        sub_1812CF36C(97498);
      }
      return;
    }

    if ((v10 & 0x10) != 0)
    {
      int v11 = *(_DWORD *)(v9 + 16);
      if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
        v11 += *(_DWORD *)v9;
      }
      if (a2 != 1) {
        goto LABEL_22;
      }
      goto LABEL_29;
    }

    if ((v10 & 1) == 0)
    {
      int v11 = sub_181303970(v9, 1);
      if (a2 != 1) {
        goto LABEL_22;
      }
      goto LABEL_29;
    }
  }

  else
  {
    sub_1812CF36C(91138);
  }

  int v11 = 0;
  if (a2 == 1) {
    goto LABEL_29;
  }
LABEL_22:
  uint64_t v12 = a3[1];
  if (!v12) {
    return;
  }
  int v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0) {
      return;
    }
    uint64_t v14 = (_BYTE *)sub_181303998((int *)v12, 1);
  }

  else
  {
    uint64_t v14 = *(_BYTE **)(v12 + 8);
  }

  if (v14)
  {
    unsigned int v27 = *v14;
    if (!*v14) {
      goto LABEL_71;
    }
    LODWORD(v28) = 0;
    uint64_t v29 = v14;
    do
    {
      if (v27 < 0xC0)
      {
        unsigned int v30 = *++v29;
        unsigned int v27 = v30;
      }

      else
      {
        do
        {
          unsigned int v31 = *++v29;
          unsigned int v27 = v31;
        }

        while ((v31 & 0xC0) == 0x80);
      }

      uint64_t v28 = (v28 + 1);
    }

    while (v27);
    uint64_t v40 = sub_18134FED0(a1, 4 * (v28 + 2LL * v28));
    if (v40)
    {
      if (!*v14) {
        goto LABEL_71;
      }
      uint64_t v17 = (char **)v40;
      uint64_t v16 = 0LL;
      uint64_t v15 = (int *)(v40 + 8 * v28);
      uint64_t v41 = v14;
      int v42 = v14;
      do
      {
        *(void *)(v40 + 8 * v16) = v41;
        unsigned int v43 = *v42++;
        if (v43 >= 0xC0)
        {
          int v42 = v41;
          do
            char v44 = *++v42;
          while ((v44 & 0xC0) == 0x80);
        }

        v15[v16++] = (_DWORD)v42 - (_DWORD)v41;
        uint64_t v41 = v42;
      }

      while (*v42);
      if (!(_DWORD)v16) {
        goto LABEL_71;
      }
      goto LABEL_30;
    }
  }

void sub_18134ACA0(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (a1 && (uint64_t v6 = *((void *)a1 + 1)) != 0)
  {
    if (*(void *)(v6 + 8)) {
      int v7 = -1;
    }
    else {
      int v7 = 0;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    int v7 = 0;
  }

  uint64_t v8 = *(void *)(*(void *)(*((void *)a1 + 3) + 136LL) + 40LL * *((int *)a1 + 8) - 24);
  if (!*(void *)a3)
  {
    sub_1812CF36C(97220);
    if (a2 >= 2)
    {
LABEL_10:
      int v9 = 0;
      uint64_t v10 = 1LL;
      do
      {
        uint64_t v11 = *(void *)(a3 + 8 * v10);
        if (v11)
        {
          if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v11 + 20)) & 1) != 0) {
            return;
          }
        }

        else
        {
          sub_1812CF36C(97220);
          uint64_t v11 = *(void *)(a3 + 8 * v10);
        }

        ++v10;
      }

      while (a2 != v10);
      uint64_t v12 = v9;
      goto LABEL_21;
    }

void sub_18134ADE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1 || (uint64_t v4 = *(void *)(a1 + 8)) == 0 || !*(void *)(v4 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    int v7 = *(_WORD **)(v6 + 8);
    if (!v7) {
      return;
    }
  }

  else
  {
    int v7 = sub_1812D8A04(a1, 64);
    if (!v7) {
      return;
    }
  }

  if (v5)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0)
    {
      if (!v7[10]) {
        return;
      }
LABEL_18:
      *(_DWORD *)(a1 + 36) = -1;
      *(_BYTE *)(a1 + 41) = 1;
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
  }

  if (v7[10])
  {
    int v8 = *(_DWORD *)(a1 + 32);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 24) + 136LL) + 40LL * v8 - 24);
    uint64_t v10 = *(void *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      int v12 = sub_1812A4980((uint64_t)v7, v5, *(void *)(*(void *)(*(void *)(a1 + 24) + 136LL) + 40LL * v8 - 24));
      if (v11)
      {
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_18;
        }
LABEL_23:
        if ((v7[10] & 0x9000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }

    else
    {
      sub_1812CF36C(97932);
      int v12 = sub_1812A4980((uint64_t)v7, v5, v9);
    }

    if (v12 < 1) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }

  if (*(void *)a1)
  {
    *((void *)v7 + 3) = *(void *)(*(void *)a1 + 24LL);
    goto LABEL_25;
  }

  sub_1812CF36C(97953);
  __int16 v15 = v7[10];
  *((void *)v7 + 3) = 0LL;
  if ((v15 & 0x9000) != 0) {
LABEL_24:
  }
    sub_181303888((int *)v7);
LABEL_25:
  __int128 v13 = *(_OWORD *)v5;
  uint64_t v14 = *(void *)(v5 + 16);
  *((void *)v7 + 2) = v14;
  *(_OWORD *)int v7 = v13;
  v7[10] = WORD2(v14) & 0xEFFF;
  if ((v14 & 0x1200000000LL) != 0 && (*(_WORD *)(v5 + 20) & 0x2000) == 0)
  {
    v7[10] = WORD2(v14) & 0xAFFF | 0x4000;
    sub_1812D7910((int *)v7);
  }

void sub_18134AFC0(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(sqlite3_value **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (sqlite3_value *)sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  if (*((_WORD *)v4 + 10) && (sqlite3_result_value(a1, v4), (*((_WORD *)v4 + 10) & 0x9000) != 0) || *((_DWORD *)v4 + 8)) {
    sub_181303838((uint64_t)v4);
  }
}

void sub_18134B06C(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(sqlite3_value **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (sqlite3_value *)sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  if (*((_WORD *)v4 + 10)) {
    sqlite3_result_value(a1, v4);
  }
}

void sub_18134B0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3)
  {
    uint64_t v4 = byte_1813C6455[*(_WORD *)(*(void *)a3 + 20LL) & 0x3F] - 1LL;
    if (a1)
    {
LABEL_3:
      sub_1812D7A8C(a1, off_189B6EA38[v4], -1, 1u, 0LL);
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v4 = -1LL;
    if (a1) {
      goto LABEL_3;
    }
  }

  sub_1812CF36C(97498);
}

void sub_18134B17C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(97108);
    uint64_t v5 = 0LL;
    if (a1) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }

  if ((*(_WORD *)(v4 + 20) & 0x800) != 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    if (a1) {
      goto LABEL_8;
    }
LABEL_6:
    sub_1812CF36C(97431);
    return;
  }

  uint64_t v5 = 0LL;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v6, v5);
  }

  else
  {
    *(void *)uint64_t v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }

void sub_18134B214(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(97220);
    goto LABEL_10;
  }

  int v5 = *(unsigned __int16 *)(v4 + 20);
  int v6 = byte_1813C6455[v5 & 0x3F];
  if ((v6 - 1) < 2)
  {
LABEL_5:
    if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      int v7 = *(_DWORD *)(v4 + 16);
      if (!a1)
      {
LABEL_44:
        sub_1812CF36C(97431);
        return;
      }
    }

    else if ((v5 & 0x10) != 0)
    {
      int v7 = *(_DWORD *)(v4 + 16);
      if ((v5 & 0x400) != 0) {
        v7 += *(_DWORD *)v4;
      }
      if (!a1) {
        goto LABEL_44;
      }
    }

    else if ((v5 & 1) != 0)
    {
      int v7 = 0;
      if (!a1) {
        goto LABEL_44;
      }
    }

    else
    {
      int v7 = sub_181303970(v4, 1);
      if (!a1) {
        goto LABEL_44;
      }
    }

    goto LABEL_21;
  }

  if (v6 != 3)
  {
    if (v6 == 4) {
      goto LABEL_5;
    }
LABEL_10:
    if (!a1)
    {
      sub_1812CF36C(97451);
      return;
    }

    uint64_t v8 = *a1;
    if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
    {
      sub_181303888((int *)v8);
      return;
    }

    __int16 v10 = 1;
LABEL_29:
    *(_WORD *)(v8 + 20) = v10;
    return;
  }

  if ((~v5 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    uint64_t v9 = *(_BYTE **)(v4 + 8);
    if (!v9) {
      return;
    }
    goto LABEL_33;
  }

  if ((v5 & 1) == 0)
  {
    uint64_t v9 = (_BYTE *)sub_181303998((int *)v4, 1);
    if (v9)
    {
LABEL_33:
      unsigned int v11 = *v9;
      if (*v9)
      {
        int v12 = (int)v9;
        do
        {
          unsigned int v13 = v11;
          unsigned int v14 = *++v9;
          unsigned int v11 = v14;
          if (v13 >= 0xC0)
          {
            while ((v11 & 0xC0) == 0x80)
            {
              unsigned int v15 = *++v9;
              unsigned int v11 = v15;
              ++v12;
            }
          }
        }

        while (v11);
      }

      else
      {
        int v12 = (int)v9;
      }

      if (!a1) {
        goto LABEL_44;
      }
      int v7 = (_DWORD)v9 - v12;
LABEL_21:
      uint64_t v8 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v8, v7);
        return;
      }

      *(void *)uint64_t v8 = v7;
      __int16 v10 = 4;
      goto LABEL_29;
    }
  }

void sub_18134B3D0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(97220);
    goto LABEL_9;
  }

  __int16 v5 = *(_WORD *)(v4 + 20);
  int v6 = byte_1813C6455[v5 & 0x3F];
  if ((v6 - 1) < 2)
  {
    if (!a1 || (uint64_t v9 = *a1) == 0) {
      sub_1813C4034();
    }
    unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 24) + 100LL);
    if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      int v11 = *(_DWORD *)(v4 + 16);
    }

    else if ((v5 & 0x10) != 0)
    {
      int v11 = *(_DWORD *)(v4 + 16);
      if ((*(_WORD *)(v4 + 20) & 0x400) != 0) {
        v11 += *(_DWORD *)v4;
      }
    }

    else if ((v5 & 1) != 0)
    {
      int v11 = 0;
    }

    else
    {
      int v11 = sub_181303970(v4, 1);
      uint64_t v9 = *a1;
    }

    uint64_t v16 = (uint64_t)v11 << (v10 > 1);
    if ((*(_WORD *)(v9 + 20) & 0x9000) == 0)
    {
      *(void *)uint64_t v9 = v16;
      *(_WORD *)(v9 + 20) = 4;
      return;
    }

    uint64_t v8 = v9;
    goto LABEL_53;
  }

  if (v6 != 3)
  {
    if (v6 == 4)
    {
      if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
      {
        int v7 = *(_DWORD *)(v4 + 16);
        goto LABEL_51;
      }

      if ((v5 & 0x10) != 0)
      {
        int v7 = *(_DWORD *)(v4 + 16);
        if ((*(_WORD *)(v4 + 20) & 0x400) != 0) {
          v7 += *(_DWORD *)v4;
        }
      }

      else
      {
        if ((v5 & 1) == 0) {
          goto LABEL_30;
        }
        int v7 = 0;
      }

void sub_18134B600(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (*a3)
  {
    int v5 = byte_1813C6455[*((_WORD *)*a3 + 10) & 0x3F];
    int v6 = a3[1];
    if (v6)
    {
LABEL_3:
      int v7 = byte_1813C6455[*((_WORD *)v6 + 10) & 0x3F];
      goto LABEL_6;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    int v5 = 0;
    int v6 = a3[1];
    if (v6) {
      goto LABEL_3;
    }
  }

  sub_1812CF36C(97220);
  int v7 = 0;
LABEL_6:
  if (v5 == 5 || v7 == 5) {
    return;
  }
  uint64_t v9 = (uint64_t)*a3;
  if (*a3)
  {
    __int16 v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
    {
      int v11 = *(_DWORD *)(v9 + 16);
      uint64_t v12 = (uint64_t)a3[1];
      if (!v12) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }

    if ((v10 & 0x10) != 0)
    {
      int v11 = *(_DWORD *)(v9 + 16);
      if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
        v11 += *(_DWORD *)v9;
      }
      uint64_t v12 = (uint64_t)a3[1];
      if (!v12) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }

    if ((v10 & 1) == 0)
    {
      int v11 = sub_181303970(v9, 1);
      uint64_t v12 = (uint64_t)a3[1];
      if (!v12) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }

  else
  {
    sub_1812CF36C(91138);
  }

  int v11 = 0;
  uint64_t v12 = (uint64_t)a3[1];
  if (!v12)
  {
LABEL_21:
    sub_1812CF36C(91138);
    goto LABEL_49;
  }

void sub_18134BAE8(uint64_t a1, int a2, uint64_t *a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
    int v7 = a2 - 1;
    if (a2 < 1) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v6 = 0LL;
    BOOL v8 = __OFSUB__(a2, 1);
    int v7 = a2 - 1;
    if (v7 < 0 != v8) {
      return;
    }
  }

  uint64_t v9 = *a3;
  if (!*a3) {
    return;
  }
  int v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) == 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    int v11 = *(const char **)(v9 + 8);
    if (!v11) {
      return;
    }
LABEL_13:
    v21[0] = v7;
    v21[1] = 0;
    uint64_t v22 = a3 + 1;
    int v12 = *(_DWORD *)(v6 + 136);
    uint64_t v15 = v6;
    char v16 = 0LL;
    int v17 = 0;
    int v18 = v12;
    unsigned int v19 = 0;
    __int16 v20 = 512;
    sqlite3_str_appendf((sqlite3_str *)&v15, v11, v21);
    int v13 = v19;
    if (v16 && (v16[v19] = 0, v18) && (v20 & 0x400) == 0)
    {
      int v14 = (char *)sub_1812F24E0(&v15);
      if (!a1)
      {
LABEL_17:
        sub_1812CF36C(97498);
        return;
      }
    }

    else
    {
      int v14 = v16;
      if (!a1) {
        goto LABEL_17;
      }
    }

    sub_1812D7A8C(a1, v14, v13, 1u, sub_1812E1FD0);
    return;
  }

  if ((v10 & 1) == 0)
  {
    int v11 = (const char *)sub_181303998((int *)v9, 1);
    if (v11) {
      goto LABEL_13;
    }
  }

void sub_18134BC2C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    int v5 = *(unsigned __int16 *)(v4 + 20);
    if ((~v5 & 0x202) != 0 || *(_BYTE *)(v4 + 22) != 1)
    {
      if ((v5 & 1) != 0) {
        return;
      }
      uint64_t v6 = (unsigned __int8 *)sub_181303998((int *)v4, 1);
      if (!v6) {
        return;
      }
    }

    else
    {
      uint64_t v6 = *(unsigned __int8 **)(v4 + 8);
      if (!v6) {
        return;
      }
    }

    unsigned int v7 = *v6;
    if (*v6)
    {
      if (v7 >= 0xC0)
      {
        unsigned int v7 = byte_1813C6D06[v7 - 192];
        unsigned __int8 v8 = v6[1];
        if ((v8 & 0xC0) == 0x80)
        {
          uint64_t v9 = v6 + 2;
          do
          {
            unsigned int v7 = v8 & 0x3F | (v7 << 6);
            unsigned __int8 v10 = *v9++;
            unsigned __int8 v8 = v10;
          }

          while ((v10 & 0xC0) == 0x80);
        }

        if (v7 >> 11 == 27 || v7 < 0x80 || v7 >> 1 == 0x7FFF) {
          unsigned int v7 = 65533;
        }
      }

      if (a1)
      {
        uint64_t v13 = *a1;
        if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v13, (int)v7);
        }

        else
        {
          *(void *)uint64_t v13 = (int)v7;
          *(_WORD *)(v13 + 20) = 4;
        }
      }

      else
      {
        sub_1812CF36C(97431);
      }
    }
  }

void sub_18134BD40(sqlite3_context *a1, int a2, uint64_t *a3)
{
  LODWORD(i) = a2;
  if (sqlite3_initialize() || (uint64_t v6 = sub_18126F0AC((int)((4 * i) | 1))) == 0)
  {
    sqlite3_result_error_nomem(a1);
  }

  else
  {
    unsigned int v7 = (const char *)v6;
    unsigned __int8 v8 = (_BYTE *)v6;
    if ((int)i >= 1)
    {
      unsigned __int8 v8 = (_BYTE *)v6;
      for (uint64_t i = i; i; --i)
      {
        uint64_t v9 = *a3;
        if (!*a3)
        {
          sub_1812CF36C(89717);
LABEL_15:
          *v8++ = 0;
          goto LABEL_7;
        }

        __int16 v10 = *(_WORD *)(v9 + 20);
        if ((v10 & 0x24) != 0)
        {
          unint64_t v11 = *(void *)v9;
        }

        else if ((v10 & 8) != 0)
        {
          double v13 = *(double *)v9;
          if (*(double *)v9 < -9.22337204e18 || v13 > 9.22337204e18)
          {
LABEL_12:
            LODWORD(v12) = 65533;
LABEL_13:
            *unsigned __int8 v8 = (v12 >> 12) | 0xE0;
            v8[1] = (v12 >> 6) & 0x3F | 0x80;
            v8[2] = v12 & 0x3F | 0x80;
            v8 += 3;
            goto LABEL_7;
          }

          unint64_t v11 = (uint64_t)v13;
        }

        else
        {
          if ((v10 & 0x12) == 0) {
            goto LABEL_15;
          }
          uint64_t v12 = *(void *)(v9 + 8);
          if (!v12) {
            goto LABEL_6;
          }
          unint64_t v11 = sub_181303DF0(v9);
        }

        if (v11 >> 16 > 0x10) {
          goto LABEL_12;
        }
        LODWORD(v12) = v11 & 0x1FFFFF;
        if ((v11 & 0x1FFFFF) > 0x7F)
        {
          if (v12 <= 0x7FF)
          {
            *unsigned __int8 v8 = (v11 >> 6) | 0xC0;
            v8[1] = v11 & 0x3F | 0x80;
            v8 += 2;
            goto LABEL_7;
          }

          if (WORD1(v12))
          {
            *unsigned __int8 v8 = (v12 >> 18) | 0xF0;
            v8[1] = (v11 >> 12) & 0x3F | 0x80;
            v8[2] = (v11 >> 6) & 0x3F | 0x80;
            v8[3] = v11 & 0x3F | 0x80;
            v8 += 4;
            goto LABEL_7;
          }

          goto LABEL_13;
        }

void sub_18134BF34(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    __int16 v5 = *(_WORD *)(v4 + 20);
    int v6 = byte_1813C6455[v5 & 0x3F];
    if (v6 == 5)
    {
      if (a1)
      {
        uint64_t v11 = *a1;
        if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0) {
          sub_181303888((int *)v11);
        }
        else {
          *(_WORD *)(v11 + 20) = 1;
        }
        return;
      }

      int v14 = 97451;
LABEL_49:
      sub_1812CF36C(v14);
      return;
    }

    if (v6 == 1)
    {
      if ((v5 & 0x24) != 0)
      {
        uint64_t v7 = *(void *)v4;
      }

      else if ((v5 & 8) != 0)
      {
        double v15 = *(double *)v4;
        if (v15 > 9.22337204e18)
        {
          uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
          if (a1)
          {
LABEL_42:
            uint64_t v16 = *a1;
            if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
            {
              sub_1813040AC(v16, v7);
            }

            else
            {
              *(void *)uint64_t v16 = v7;
              *(_WORD *)(v16 + 20) = 4;
            }

            return;
          }

void sub_18134C1B0(sqlite3_context *a1, int a2, uint64_t *a3)
{
  if (a2 != 2)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *a3;
    if (!*a3) {
      goto LABEL_26;
    }
LABEL_6:
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v7 + 20)) & 1) != 0) {
      return;
    }
    goto LABEL_27;
  }

  uint64_t v5 = a3[1];
  if (v5)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v5 = a3[1];
    if (!v5)
    {
      sub_1812CF36C(89717);
      LODWORD(v9) = 0;
      goto LABEL_22;
    }
  }

  __int16 v8 = *(_WORD *)(v5 + 20);
  if ((v8 & 0x24) != 0)
  {
    double v9 = *(double *)v5;
  }

  else if ((v8 & 8) != 0)
  {
    double v10 = *(double *)v5;
    if (*(double *)v5 >= -9.22337204e18)
    {
      if (v10 <= 9.22337204e18) {
        *(void *)&double v9 = (uint64_t)v10;
      }
      else {
        LODWORD(v9) = -1;
      }
    }

    else
    {
      LODWORD(v9) = 0;
    }
  }

  else if ((v8 & 0x12) != 0 && *(void *)(v5 + 8))
  {
    LODWORD(v9) = sub_181303DF0(v5);
  }

  else
  {
    LODWORD(v9) = 0;
  }

void sub_18134C4D8(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  int v6 = *(unsigned __int16 *)(v4 + 20);
  if ((~v6 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    uint64_t v7 = *(unsigned __int8 **)(v4 + 8);
    __int16 v8 = *(_WORD *)(v4 + 20);
    if ((v8 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = (unsigned __int8 *)sub_181303998((int *)v4, 1);
    uint64_t v4 = *a3;
    if (*a3)
    {
      __int16 v8 = *(_WORD *)(v4 + 20);
      if ((v8 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }

void sub_18134C660(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  int v6 = *(unsigned __int16 *)(v4 + 20);
  if ((~v6 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    uint64_t v7 = *(unsigned __int8 **)(v4 + 8);
    __int16 v8 = *(_WORD *)(v4 + 20);
    if ((v8 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = (unsigned __int8 *)sub_181303998((int *)v4, 1);
    uint64_t v4 = *a3;
    if (*a3)
    {
      __int16 v8 = *(_WORD *)(v4 + 20);
      if ((v8 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }

void sub_18134C7DC(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = (unsigned __int8 *)sqlite3_value_blob(*a3);
  int v6 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(91138);
LABEL_9:
    int v8 = 0;
    goto LABEL_12;
  }

  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) == 1)
  {
    int v8 = *((_DWORD *)v6 + 4);
    goto LABEL_12;
  }

  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) == 0)
    {
      int v8 = sub_181303970((uint64_t)v6, 1);
      goto LABEL_12;
    }

    goto LABEL_9;
  }

  int v8 = *((_DWORD *)v6 + 4);
  if ((*((_WORD *)v6 + 10) & 0x400) != 0) {
    v8 += *(_DWORD *)v6;
  }
LABEL_12:
  int v9 = (char *)sub_18134FED0(a1, (2LL * v8) | 1);
  if (v9)
  {
    double v10 = v9;
    if (v8 >= 1)
    {
      int v11 = v8;
      __int16 v12 = v9;
      do
      {
        unsigned int v13 = *v5++;
        *__int16 v12 = a0123456789abcd_2[(unint64_t)v13 >> 4];
        double v10 = v12 + 2;
        v12[1] = a0123456789abcd_2[v13 & 0xF];
        v12 += 2;
        --v11;
      }

      while (v11);
    }

    char *v10 = 0;
    if (a1) {
      sub_1812D7A8C((uint64_t)a1, v9, 2 * v8, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
    }
    else {
      sub_1812CF36C(97498);
    }
  }

void sub_18134C918(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (!*a3)
  {
    int v8 = 0LL;
    goto LABEL_11;
  }

  int v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0)
    {
      int v8 = 0LL;
      __int16 v9 = *(_WORD *)(v6 + 20);
      if ((v9 & 2) == 0) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

    int v8 = (_BYTE *)sub_181303998((int *)v6, 1);
    uint64_t v6 = *a3;
    if (*a3)
    {
      __int16 v9 = *(_WORD *)(v6 + 20);
      if ((v9 & 2) == 0) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }

void sub_18134CD6C(uint64_t *a1)
{
  uint64_t v2 = __buf;
  if ((__buf & 0x8000000000000000LL) == 0)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v2 = -(__buf & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t __buf = v2;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v3 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v3, v2);
  }

  else
  {
    *(void *)uint64_t v3 = v2;
    *(_WORD *)(v3 + 20) = 4;
  }

void sub_18134CDF4(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89717);
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  __int16 v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    uint64_t v6 = *(void *)v4;
    goto LABEL_6;
  }

  if ((v5 & 8) != 0)
  {
    double v10 = *(double *)v4;
    if (*(double *)v4 >= -9.22337204e18)
    {
      if (v10 <= 9.22337204e18) {
        uint64_t v6 = (uint64_t)v10;
      }
      else {
        uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v6 = 0x8000000000000000LL;
    }

    goto LABEL_6;
  }

  if ((v5 & 0x12) == 0 || !*(void *)(v4 + 8)) {
    goto LABEL_5;
  }
  uint64_t v6 = sub_181303DF0(v4);
LABEL_6:
  if (v6 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = sub_18134FED0(a1, v7);
  if (v8)
  {
    __int16 v9 = (void *)v8;
    sqlite3_initialize();
    if (!a1 || (v7 & 0x80000000) != 0) {
      sub_1812CF36C(97366);
    }
    else {
      sub_1812D7A8C((uint64_t)a1, (char *)v9, v7, 0, (uint64_t (*)(uint64_t))sqlite3_free);
    }
  }

void sub_18134CF20(uint64_t a1)
{
  if (a1) {
    sub_1812D7A8C( a1,  "2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl",  -1,  1u,  0LL);
  }
  else {
    sub_1812CF36C(97498);
  }
}

void sub_18134CF48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89717);
    goto LABEL_5;
  }

  __int16 v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    double v6 = *(double *)v4;
    goto LABEL_6;
  }

  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(void *)(v4 + 8))
    {
      LODWORD(v6) = sub_181303DF0(v4);
      goto LABEL_6;
    }

void sub_18134D050(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v5 = 0LL;
  }

  int v6 = *(_DWORD *)(v5 + 136);
  unsigned int v26 = (void *)v5;
  int v27 = 0LL;
  int v28 = 0;
  int v29 = v6;
  int v30 = 0;
  __int16 v31 = 0;
  uint64_t v7 = *a3;
  if (v7)
  {
    int v8 = *(unsigned __int16 *)(v7 + 20);
    switch(byte_1813C6455[v8 & 0x3F])
    {
      case 1u:
        if ((v8 & 0x24) == 0 && (v8 & 8) == 0 && (v8 & 0x12) != 0 && *(void *)(v7 + 8)) {
          sub_181303DF0(v7);
        }
        sqlite3_str_appendf((sqlite3_str *)&v26, "%lld");
        break;
      case 2u:
        if ((v8 & 8) != 0)
        {
          double v9 = *(double *)v7;
        }

        else if ((v8 & 0x24) != 0)
        {
          double v9 = (double)*(uint64_t *)v7;
        }

        else if ((v8 & 0x12) != 0)
        {
          double v9 = sub_181303DB8(v7);
        }

        else
        {
          double v9 = 0.0;
        }

        sqlite3_str_appendf((sqlite3_str *)&v26, "%!.15g", *(void *)&v9);
        if (v30)
        {
          v27[v30] = 0;
          int v14 = v27;
          if (v27)
          {
            sub_1812B8054(v27, &v32, v30, 1);
            if (v9 != v32)
            {
              if ((v31 & 0x400) != 0)
              {
                sub_1812F20DC(v26, v14);
                HIBYTE(v31) &= ~4u;
              }

              int v28 = 0;
              int v30 = 0;
              int v27 = 0LL;
              sqlite3_str_appendf((sqlite3_str *)&v26, "%!.20e", *(void *)&v9);
            }
          }
        }

        break;
      case 3u:
        if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
        {
          if ((v8 & 1) != 0) {
            uint64_t v10 = 0LL;
          }
          else {
            uint64_t v10 = sub_181303998((int *)v7, 1);
          }
        }

        else
        {
          uint64_t v10 = *(void *)(v7 + 8);
        }

        sqlite3_str_appendf((sqlite3_str *)&v26, "%Q", v10);
        break;
      case 4u:
        int v11 = (char *)sqlite3_value_blob((sqlite3_value *)v7);
        __int16 v12 = *(_WORD *)(v7 + 20);
        if ((v12 & 2) != 0 && *(_BYTE *)(v7 + 22) == 1)
        {
          int v13 = *(_DWORD *)(v7 + 16);
        }

        else if ((v12 & 0x10) != 0)
        {
          int v13 = *(_DWORD *)(v7 + 16);
          if ((*(_WORD *)(v7 + 20) & 0x400) != 0) {
            v13 += *(_DWORD *)v7;
          }
        }

        else if ((v12 & 1) != 0)
        {
          int v13 = 0;
        }

        else
        {
          int v13 = sub_181303970(v7, 1);
        }

        uint64_t v15 = 2LL * v13;
        sub_1812D3698(&v26, v15 + 4);
        if (!(_BYTE)v31)
        {
          int v16 = v27;
          if (v13 >= 1)
          {
            uint64_t v17 = v13;
            uint64_t v18 = v27 + 3;
            do
            {
              *(v18 - 1) = a0123456789abcd_2[(unint64_t)*v11 >> 4];
              char v19 = *v11++;
              *uint64_t v18 = a0123456789abcd_2[v19 & 0xF];
              v18 += 2;
              --v17;
            }

            while (v17);
          }

          *(_WORD *)&v16[v15 + 2] = 39;
          *(_WORD *)int v16 = 10072;
          int v30 = v15 + 3;
        }

        break;
      default:
        goto LABEL_10;
    }
  }

  else
  {
    sub_1812CF36C(97220);
LABEL_10:
    sub_1812D3A10((uint64_t)&v26, "NULL", 4u);
  }

  if (v27 && (v27[v30] = 0, v29) && (v31 & 0x400) == 0)
  {
    double v20 = (char *)sub_1812F24E0((uint64_t *)&v26);
    if (!a1) {
      goto LABEL_52;
    }
  }

  else
  {
    double v20 = (char *)v27;
    if (!a1)
    {
LABEL_52:
      sub_1812CF36C(97498);
      if ((_BYTE)v31)
      {
        sub_1812CF36C(97451);
        sub_1812CF36C(97620);
      }

      return;
    }
  }

  sub_1812D7A8C((uint64_t)a1, v20, v30, 1u, sub_1812E1FD0);
  unsigned int v21 = v31;
  if (!(_BYTE)v31) {
    return;
  }
  uint64_t v22 = *(void *)a1;
  if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) == 0)
  {
    *(_WORD *)(v22 + 20) = 1;
    a1[9] = v21;
    if (v21 != 100)
    {
LABEL_62:
      if (v21 == 101)
      {
        size_t v25 = "no more rows available";
      }

      else if (v21 > 0x1C || ((0x1410004uLL >> v21) & 1) != 0)
      {
        size_t v25 = "unknown error";
      }

      else
      {
        size_t v25 = off_189B6EC30[v21];
      }

      goto LABEL_70;
    }

void sub_18134D4D8(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = *a1) == 0)
  {
    sub_1812CF36C(97953);
    goto LABEL_9;
  }

  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    uint64_t v5 = "NULL";
    goto LABEL_10;
  }

  int v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      uint64_t v6 = *(void *)(v3 + 56);
      goto LABEL_12;
    case 109:
LABEL_7:
      uint64_t v5 = "unopened";
      break;
    default:
      uint64_t v5 = "invalid";
      break;
  }

void sub_18134D5D4(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = *a1) == 0)
  {
    sub_1812CF36C(97953);
    goto LABEL_9;
  }

  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    uint64_t v5 = "NULL";
    goto LABEL_10;
  }

  int v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      uint64_t v6 = *(void *)(v3 + 120);
      goto LABEL_12;
    case 109:
LABEL_7:
      uint64_t v5 = "unopened";
      break;
    default:
      uint64_t v5 = "invalid";
      break;
  }

void sub_18134D6D0(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = *a1) == 0)
  {
    sub_1812CF36C(97953);
    goto LABEL_9;
  }

  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    uint64_t v5 = "NULL";
    goto LABEL_10;
  }

  int v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      uint64_t v6 = *(void *)(v3 + 128);
      goto LABEL_12;
    case 109:
LABEL_7:
      uint64_t v5 = "unopened";
      break;
    default:
      uint64_t v5 = "invalid";
      break;
  }

void sub_18134D7CC(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v6 = *(sqlite3_value **)a3;
    if (!*(void *)a3) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v5 = 0LL;
    uint64_t v6 = *(sqlite3_value **)a3;
    if (!*(void *)a3) {
      return;
    }
  }

  int v7 = *((unsigned __int16 *)v6 + 10);
  if ((~v7 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 1)
  {
    if ((v7 & 1) != 0) {
      return;
    }
    uint64_t v8 = sub_181303998((int *)v6, 1);
    if (!v8) {
      return;
    }
  }

  else
  {
    uint64_t v8 = *((void *)v6 + 1);
    if (!v8) {
      return;
    }
  }

  uint64_t v9 = *(void *)a3;
  if (!*(void *)a3)
  {
    sub_1812CF36C(91138);
LABEL_22:
    int v11 = 0;
    uint64_t v12 = *(void *)(a3 + 8);
    if (!v12) {
      return;
    }
    goto LABEL_27;
  }

  __int16 v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    int v11 = *(_DWORD *)(v9 + 16);
    uint64_t v12 = *(void *)(a3 + 8);
    if (!v12) {
      return;
    }
    goto LABEL_27;
  }

  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 1) == 0)
    {
      int v11 = sub_181303970(v9, 1);
      uint64_t v12 = *(void *)(a3 + 8);
      if (!v12) {
        return;
      }
      goto LABEL_27;
    }

    goto LABEL_22;
  }

  int v11 = *(_DWORD *)(v9 + 16);
  if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
    v11 += *(_DWORD *)v9;
  }
  uint64_t v12 = *(void *)(a3 + 8);
  if (!v12) {
    return;
  }
LABEL_27:
  int v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0) {
      return;
    }
    int v14 = (_BYTE *)sub_181303998((int *)v12, 1);
    if (!v14) {
      return;
    }
  }

  else
  {
    int v14 = *(_BYTE **)(v12 + 8);
    if (!v14) {
      return;
    }
  }

  if (!*v14)
  {
    sqlite3_result_value(a1, *(sqlite3_value **)a3);
    return;
  }

  uint64_t v15 = *(void *)(a3 + 8);
  if (!v15)
  {
    sub_1812CF36C(91138);
LABEL_43:
    int v17 = 0;
    goto LABEL_44;
  }

  __int16 v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 2) != 0 && *(_BYTE *)(v15 + 22) == 1)
  {
    int v17 = *(_DWORD *)(v15 + 16);
    goto LABEL_44;
  }

  if ((v16 & 0x10) == 0)
  {
    if ((v16 & 1) == 0)
    {
      int v17 = sub_181303970(v15, 1);
      goto LABEL_44;
    }

    goto LABEL_43;
  }

  int v17 = *(_DWORD *)(v15 + 16);
  if ((*(_WORD *)(v15 + 20) & 0x400) != 0) {
    v17 += *(_DWORD *)v15;
  }
LABEL_44:
  uint64_t v18 = *(void *)(a3 + 16);
  if (!v18) {
    return;
  }
  int v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) != 0 || *(_BYTE *)(v18 + 22) != 1)
  {
    if ((v19 & 1) != 0) {
      return;
    }
    uint64_t v20 = sub_181303998((int *)v18, 1);
  }

  else
  {
    uint64_t v20 = *(void *)(v18 + 8);
  }

  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 16);
    if (v21)
    {
      __int16 v22 = *(_WORD *)(v21 + 20);
      if ((v22 & 2) != 0 && *(_BYTE *)(v21 + 22) == 1)
      {
        int v42 = *(_DWORD *)(v21 + 16);
LABEL_62:
        uint64_t v40 = v11 + 1;
        uint64_t v23 = sub_18134FED0(a1, v40);
        if (!v23) {
          return;
        }
        int v24 = (char *)v23;
        int v44 = v11 - v17;
        if (v11 - v17 < 0)
        {
          int v27 = 0;
          int v25 = 0;
LABEL_82:
          uint64_t v34 = (const void *)(v8 + v27);
          size_t v35 = v11 - v27;
          memcpy(&v24[v25], v34, v35);
          v24[v25 + v35] = 0;
          if (a1) {
            sub_1812D7A8C((uint64_t)a1, v24, v25 + v35, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
          }
          else {
            sub_1812CF36C(97498);
          }
          return;
        }

        int v41 = 0;
        int v25 = 0;
        int v26 = 0;
        size_t __n = v17;
        uint64_t v36 = v42 - v17;
        __int16 v38 = (const void *)v20;
        int v37 = v17 - 1;
        int v39 = v17;
        while (1)
        {
          int v29 = (unsigned __int8 *)(v8 + v26);
          int v30 = *v29;
          v24[v25++] = v30;
LABEL_67:
          int v27 = v26 + 1;
          if (v26++ >= v44) {
            goto LABEL_82;
          }
        }

        if (v42 <= v17)
        {
          int v32 = v41;
        }

        else
        {
          uint64_t v31 = v40 + v36;
          if (v40 + v36 - 1 > *(int *)(v5 + 136))
          {
            sqlite3_result_error_toobig(a1);
LABEL_86:
            sqlite3_free(v24);
            return;
          }

          int v32 = v41 + 1;
          v40 += v36;
          if (((v41 + 1) & v41) == 0)
          {
            uint64_t v33 = sub_18127D33C((uint64_t)v24, v31 + ~v11 + (int)v31);
            if (!v33)
            {
              sqlite3_result_error_nomem(a1);
              goto LABEL_86;
            }

            goto LABEL_78;
          }
        }

        uint64_t v33 = (uint64_t)v24;
LABEL_78:
        memcpy((void *)(v33 + v25), v38, v42);
        v25 += v42;
        v26 += v37;
        int v41 = v32;
        int v24 = (char *)v33;
        int v17 = v39;
        goto LABEL_67;
      }

      if ((v22 & 0x10) != 0)
      {
        int v42 = *(_DWORD *)(v21 + 16);
        if ((*(_WORD *)(v21 + 20) & 0x400) != 0) {
          v42 += *(_DWORD *)v21;
        }
        goto LABEL_62;
      }

      if ((v22 & 1) == 0)
      {
        int v42 = sub_181303970(v21, 1);
        goto LABEL_62;
      }
    }

    else
    {
      sub_1812CF36C(91138);
    }

    int v42 = 0;
    goto LABEL_62;
  }

void sub_18134DC88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89717);
    goto LABEL_5;
  }

  __int16 v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    uint64_t v6 = *(void *)v4;
    goto LABEL_6;
  }

  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(void *)(v4 + 8))
    {
      uint64_t v6 = sub_181303DF0(v4);
      goto LABEL_6;
    }

void sub_18134DE18(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v6 + 20)) & 1) != 0) {
      return;
    }
    if (a2 != 3) {
      goto LABEL_8;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    if (a2 != 3) {
      goto LABEL_8;
    }
  }

  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v7 + 20)) & 1) != 0) {
      return;
    }
LABEL_8:
    uint64_t v8 = *(sqlite3_value **)a3;
    if (*(void *)a3) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }

  sub_1812CF36C(97220);
  uint64_t v8 = *(sqlite3_value **)a3;
  if (*(void *)a3)
  {
LABEL_9:
    int v9 = byte_1813C6455[*((_WORD *)v8 + 10) & 0x3F];
    uint64_t v10 = *(void *)(a3 + 8);
    if (v10) {
      goto LABEL_10;
    }
LABEL_18:
    sub_1812CF36C(89717);
LABEL_19:
    LODWORD(v12) = 0;
    goto LABEL_25;
  }

void sub_18134E2E4(uint64_t a1, uint64_t a2, sqlite3_value **a3)
{
  if (a1 && (uint64_t v4 = *(void *)(a1 + 8)) != 0 && *(void *)(v4 + 32))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    else {
      uint64_t v6 = (double *)sub_1812D8A04(a1, 40);
    }
  }

  else
  {
    sub_1812CF36C(98123);
    uint64_t v6 = 0LL;
  }

  int v7 = sqlite3_value_numeric_type(*a3);
  if (v6 && v7 != 5)
  {
    ++*((void *)v6 + 3);
    if (*((_BYTE *)v6 + 32))
    {
      if (v7 == 1)
      {
        uint64_t v8 = *a3;
        if (*a3)
        {
LABEL_12:
          __int16 v9 = *((_WORD *)v8 + 10);
          if ((v9 & 0x24) != 0)
          {
            uint64_t v10 = *(void *)v8;
LABEL_71:
            sub_18134FFA4(v6, v10);
            return;
          }

          if ((v9 & 8) != 0)
          {
            double v22 = *(double *)v8;
            if (*(double *)v8 >= -9.22337204e18)
            {
              if (v22 <= 9.22337204e18) {
                uint64_t v10 = (uint64_t)v22;
              }
              else {
                uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              uint64_t v10 = 0x8000000000000000LL;
            }

            goto LABEL_71;
          }

          if ((v9 & 0x12) != 0 && *((void *)v8 + 1))
          {
            uint64_t v10 = sub_181303DF0((uint64_t)v8);
            goto LABEL_71;
          }

void sub_18134E6A0(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *(void *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04(a1, 0);
    if (!v4) {
      return;
    }
  }

  if (*((uint64_t *)v4 + 3) >= 1)
  {
    if (*((_BYTE *)v4 + 32))
    {
      if (*((_BYTE *)v4 + 33))
      {
        *(_DWORD *)(a1 + 36) = 1;
        sub_181269368( *(void *)a1,  "integer overflow",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }

      else
      {
        double v7 = *((double *)v4 + 1) + *(double *)v4;
        uint64_t v8 = *(void *)a1;
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0) {
          sub_181303888((int *)v8);
        }
        else {
          *(_WORD *)(v8 + 20) = 1;
        }
        *(double *)uint64_t v8 = v7;
        *(_WORD *)(v8 + 20) = 8;
      }
    }

    else
    {
      uint64_t v5 = *((void *)v4 + 2);
      uint64_t v6 = *(void *)a1;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
      {
        sub_1813040AC(v6, v5);
      }

      else
      {
        *(void *)uint64_t v6 = v5;
        *(_WORD *)(v6 + 20) = 4;
      }
    }
  }

double sub_18134E7E8(uint64_t a1, uint64_t a2, sqlite3_value **a3)
{
  if (a1 && (uint64_t v4 = *(void *)(a1 + 8)) != 0 && *(void *)(v4 + 32))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    else {
      uint64_t v6 = (double *)sub_1812D8A04(a1, 40);
    }
  }

  else
  {
    sub_1812CF36C(98123);
    uint64_t v6 = 0LL;
  }

  int v7 = sqlite3_value_numeric_type(*a3);
  if (v6)
  {
    int v9 = v7;
    if (v7 != 5)
    {
      --*((void *)v6 + 3);
      if (*((_BYTE *)v6 + 32))
      {
        uint64_t v10 = *a3;
        if (v9 != 1)
        {
          if (v10)
          {
            __int16 v16 = *((_WORD *)v10 + 10);
            if ((v16 & 8) != 0)
            {
              double v17 = *(double *)v10;
            }

            else if ((v16 & 0x24) != 0)
            {
              double v17 = (double)*(uint64_t *)v10;
            }

            else if ((v16 & 0x12) != 0)
            {
              double v17 = sub_181303DB8((uint64_t)v10);
            }

            else
            {
              double v17 = 0.0;
            }
          }

          else
          {
            sub_1812CF36C(89752);
            double v17 = 0.0;
          }

          double v22 = -v17;
          goto LABEL_33;
        }

        if (v10)
        {
          __int16 v11 = *((_WORD *)v10 + 10);
          if ((v11 & 0x24) != 0)
          {
            uint64_t v12 = *(void *)v10;
            goto LABEL_14;
          }

          if ((v11 & 8) != 0)
          {
            double v20 = *(double *)v10;
            if (v20 > 9.22337204e18)
            {
              uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
              return sub_18134FFA4(v6, -v12);
            }

            uint64_t v12 = (uint64_t)v20;
            goto LABEL_14;
          }

          if ((v11 & 0x12) != 0 && *((void *)v10 + 1))
          {
            uint64_t v12 = sub_181303DF0((uint64_t)v10);
LABEL_14:
            if (v12 == 0x8000000000000000LL)
            {
LABEL_15:
              sub_18134FFA4(v6, 0x7FFFFFFFFFFFFFFFLL);
              double v22 = 1.0;
LABEL_33:
              double v21 = *v6 + v22;
              if (fabs(*v6) <= fabs(v22))
              {
                double v18 = v22 - v21;
                double v19 = *v6;
              }

              else
              {
                double v18 = *v6 - v21;
                double v19 = v22;
              }

              v6[1] = v18 + v19 + v6[1];
              double result = v21;
              *uint64_t v6 = v21;
              return result;
            }

            return sub_18134FFA4(v6, -v12);
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        uint64_t v12 = 0LL;
        return sub_18134FFA4(v6, -v12);
      }

      __int16 v13 = *a3;
      if (*a3)
      {
        __int16 v14 = *((_WORD *)v13 + 10);
        if ((v14 & 0x24) != 0)
        {
          double v15 = *(double *)v13;
LABEL_26:
          *((void *)v6 + 2) -= *(void *)&v15;
          return result;
        }

        if ((v14 & 8) != 0)
        {
          double result = *(double *)v13;
          if (*(double *)v13 >= -9.22337204e18)
          {
            if (result <= 9.22337204e18) {
              *(void *)&double v15 = (uint64_t)result;
            }
            else {
              double v15 = NAN;
            }
          }

          else
          {
            double v15 = -0.0;
          }

          goto LABEL_26;
        }

        if ((v14 & 0x12) != 0 && *((void *)v13 + 1))
        {
          double v15 = COERCE_DOUBLE(sub_181303DF0((uint64_t)v13));
          goto LABEL_26;
        }
      }

      else
      {
        sub_1812CF36C(89717);
      }

      double v15 = 0.0;
      goto LABEL_26;
    }
  }

  return result;
}

void sub_18134EAB0(uint64_t *a1)
{
  if (!a1)
  {
    sub_1812CF36C(98123);
    sub_1812CF36C(97397);
    return;
  }

  uint64_t v2 = a1[1];
  if (!v2 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    goto LABEL_8;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(double **)(v3 + 8);
    if (v4) {
      goto LABEL_15;
    }
LABEL_8:
    double v5 = 0.0;
    goto LABEL_9;
  }

  uint64_t v4 = (double *)sub_1812D8A04((uint64_t)a1, 0);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_15:
  if (*((_BYTE *)v4 + 32)) {
    double v5 = *v4 + v4[1];
  }
  else {
    double v5 = (double)*((uint64_t *)v4 + 2);
  }
LABEL_9:
  uint64_t v6 = *a1;
  if ((*(_WORD *)(v6 + 20) & 0x9000) != 0) {
    sub_181303888((int *)v6);
  }
  else {
    *(_WORD *)(v6 + 20) = 1;
  }
  *(double *)uint64_t v6 = v5;
  *(_WORD *)(v6 + 20) = 8;
}

void sub_18134EBBC(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(double **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (double *)sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = *((void *)v4 + 3);
  if (v5 >= 1)
  {
    if (*((_BYTE *)v4 + 32)) {
      double v6 = *v4 + v4[1];
    }
    else {
      double v6 = (double)*((uint64_t *)v4 + 2);
    }
    double v7 = v6 / (double)v5;
    uint64_t v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v8);
    }
    else {
      *(_WORD *)(v8 + 20) = 1;
    }
    *(double *)uint64_t v8 = v7;
    *(_WORD *)(v8 + 20) = 8;
  }

uint64_t sub_18134ECB8(uint64_t result, int a2, uint64_t *a3)
{
  if (!result || (uint64_t v5 = *(void *)(result + 8)) == 0 || !*(void *)(v5 + 32))
  {
    double result = sub_1812CF36C(98123);
    if (!a2) {
      return result;
    }
    double v7 = 0LL;
    uint64_t v8 = *a3;
    if (*a3) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }

  uint64_t v6 = *(void *)(result + 16);
  if ((*(__int16 *)(v6 + 20) & 0x80000000) == 0)
  {
    double result = (uint64_t)sub_1812D8A04(result, 8);
    double v7 = (void *)result;
    if (a2) {
      goto LABEL_6;
    }
LABEL_18:
    if (!v7) {
      return result;
    }
    goto LABEL_15;
  }

  double v7 = *(void **)(v6 + 8);
  if (!a2) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v8 = *a3;
  if (*a3)
  {
LABEL_7:
    unint64_t v9 = (0x5555555555555555uLL >> *(_WORD *)(v8 + 20)) & 1;
    goto LABEL_11;
  }

unsigned __int16 *sub_18134ED84(unsigned __int16 *result, int a2, void *a3)
{
  uint64_t v5 = result;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20LL)) & 1) != 0) {
      return result;
    }
  }

  else
  {
    double result = (unsigned __int16 *)sub_1812CF36C(97220);
  }

  if (!v5 || (uint64_t v6 = v5[1]) == 0 || !*(void *)(v6 + 32))
  {
    int v9 = 98123;
    return (unsigned __int16 *)sub_1812CF36C(v9);
  }

  uint64_t v7 = v5[2];
  if (*(__int16 *)(v7 + 20) < 0)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (!v8) {
      return result;
    }
  }

  else
  {
    double result = (unsigned __int16 *)sub_1812D8A04((uint64_t)v5, 48);
    uint64_t v8 = (uint64_t)result;
    if (!result) {
      return result;
    }
  }

  if (!*v5) {
    sub_1813C4034();
  }
  int v10 = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(*(void *)(*v5 + 24LL) + 136LL);
  if (a2 != 1)
  {
    uint64_t v12 = a3[1];
    if (!v10)
    {
      if (v12)
      {
        __int16 v16 = *(_WORD *)(v12 + 20);
        if ((v16 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
        {
          int v15 = *(_DWORD *)(v12 + 16);
          goto LABEL_58;
        }

        if ((v16 & 0x10) != 0)
        {
          int v15 = *(_DWORD *)(v12 + 16);
          if ((*(_WORD *)(v12 + 20) & 0x400) != 0) {
            v15 += *(_DWORD *)v12;
          }
          goto LABEL_58;
        }

        if ((v16 & 1) == 0)
        {
          int v15 = sub_181303970(v12, 1);
          goto LABEL_58;
        }
      }

      else
      {
        sub_1812CF36C(91138);
      }

      int v15 = 0;
      goto LABEL_58;
    }

    if (v12)
    {
      int v13 = *(unsigned __int16 *)(v12 + 20);
      if ((~v13 & 0x202) == 0 && *(_BYTE *)(v12 + 22) == 1)
      {
        __int16 v14 = *(const void **)(v12 + 8);
        goto LABEL_48;
      }

      if ((v13 & 1) != 0)
      {
        __int16 v14 = 0LL;
      }

      else
      {
        __int16 v14 = (const void *)sub_181303998((int *)v12, 1);
        uint64_t v12 = a3[1];
        if (!v12) {
          goto LABEL_37;
        }
      }

void sub_18134F298(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *(void *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04(a1, 0);
    if (!v4) {
      return;
    }
  }

  sub_181349F0C((_DWORD *)a1, (uint64_t)v4);
  uint64_t v5 = v4[5];
  if (!v5) {
    return;
  }
  uint64_t v6 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_15:
    (*v6)(v5);
    return;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  off_18C4653A8(v5);
  uint64_t v5 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = &xmmword_18C465410;
    goto LABEL_15;
  }

void sub_18134F3B4(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *(void *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (unsigned __int8 *)sub_1812D8A04(a1, 0);
    if (!v4) {
      return;
    }
  }

  int v5 = v4[28];
  if (v5 == 7)
  {
    sqlite3_result_error_nomem((sqlite3_context *)a1);
  }

  else if (v5 == 18)
  {
    *(_DWORD *)(a1 + 36) = 18;
    sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
  }

  else
  {
    uint64_t v6 = *((unsigned int *)v4 + 6);
    if ((_DWORD)v6)
    {
      *(_BYTE *)(*((void *)v4 + 1) + v6) = 0;
      uint64_t v7 = (char *)*((void *)v4 + 1);
      int v8 = *((_DWORD *)v4 + 6);
    }

    else
    {
      int v8 = 0;
      uint64_t v7 = 0LL;
    }

    sub_1812D7A8C(a1, v7, v8, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

_DWORD *sub_18134F4A4(_DWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t)result;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20)) & 1) != 0) {
      return result;
    }
  }

  else
  {
    double result = (_DWORD *)sub_1812CF36C(97220);
  }

  if (!v4) {
    return (_DWORD *)sub_1812CF36C(98123);
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5 || !*(void *)(v5 + 32)) {
    return (_DWORD *)sub_1812CF36C(98123);
  }
  uint64_t v6 = *(void *)(v4 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(_DWORD **)(v6 + 8);
    if (!v7) {
      return result;
    }
LABEL_13:
    uint64_t v8 = *a3;
    if (*a3)
    {
      int v9 = *(unsigned __int16 *)(v8 + 20);
      if ((~v9 & 0x202) != 0)
      {
        if ((v9 & 1) != 0) {
          goto LABEL_20;
        }
      }

      else if ((v9 & 1) != 0 || *(_BYTE *)(v8 + 22) == 1)
      {
        goto LABEL_20;
      }

      sub_181303998((int *)v8, 1);
      uint64_t v8 = *a3;
      if (*a3)
      {
LABEL_20:
        __int16 v10 = *(_WORD *)(v8 + 20);
        if ((v10 & 2) != 0 && *(_BYTE *)(v8 + 22) == 1)
        {
          int v11 = *(_DWORD *)(v8 + 16);
          goto LABEL_25;
        }

        if ((v10 & 0x10) != 0)
        {
          int v11 = *(_DWORD *)(v8 + 16);
          if ((*(_WORD *)(v8 + 20) & 0x400) != 0) {
            v11 += *(_DWORD *)v8;
          }
LABEL_25:
          int v12 = v7[8];
          v7[8] = v12 - 1;
          double result = (_DWORD *)*((void *)v7 + 5);
          if (result)
          {
            BOOL v13 = __OFSUB__(v12, 2);
            int v14 = v12 - 2;
            if (v14 < 0 == v13)
            {
              v11 += *result;
              double result = memmove(result, result + 1, 4LL * v14);
            }
          }

          else
          {
            v11 += v7[9];
          }

          int v15 = v7[6];
          size_t v16 = (v15 - v11);
          if (v15 <= v11)
          {
            v7[6] = 0;
          }

          else
          {
            v7[6] = v16;
            double result = memmove(*((void **)v7 + 1), (const void *)(*((void *)v7 + 1) + v11), v16);
            if (v7[6]) {
              return result;
            }
          }

          v7[5] = 0;
          uint64_t v17 = *((void *)v7 + 5);
          if (v17)
          {
            uint64_t v18 = &off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
              --qword_18C468B10;
              double result = (_DWORD *)off_18C4653A8(v17);
              uint64_t v17 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_43;
              }
              uint64_t v18 = &xmmword_18C465410;
            }

            double result = (_DWORD *)(*v18)(v17);
          }

double sub_18134F6E4(double a1)
{
  return ceil(a1);
}

void sub_18134F6EC(uint64_t *a1, uint64_t a2, sqlite3_value **a3)
{
  int v5 = sqlite3_value_numeric_type(*a3);
  if (v5 != 2)
  {
    if (v5 != 1) {
      return;
    }
    uint64_t v7 = *a3;
    if (*a3)
    {
      __int16 v8 = *((_WORD *)v7 + 10);
      if ((v8 & 0x24) != 0)
      {
        uint64_t v9 = *(void *)v7;
LABEL_16:
        if (a1)
        {
          uint64_t v14 = *a1;
          if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v14, v9);
          }

          else
          {
            *(void *)uint64_t v14 = v9;
            *(_WORD *)(v14 + 20) = 4;
          }

          return;
        }

        int v15 = 97441;
LABEL_25:
        sub_1812CF36C(v15);
        return;
      }

      if ((v8 & 8) != 0)
      {
        double v19 = *(double *)v7;
        if (*(double *)v7 >= -9.22337204e18)
        {
          if (v19 <= 9.22337204e18) {
            uint64_t v9 = (uint64_t)v19;
          }
          else {
            uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v9 = 0x8000000000000000LL;
        }

        goto LABEL_16;
      }

      if ((v8 & 0x12) != 0 && *((void *)v7 + 1))
      {
        uint64_t v9 = sub_181303DF0((uint64_t)v7);
        goto LABEL_16;
      }
    }

    else
    {
      sub_1812CF36C(89717);
    }

    uint64_t v9 = 0LL;
    goto LABEL_16;
  }

  if (a1 && (uint64_t v10 = a1[1]) != 0)
  {
    int v11 = *(void (**)(sqlite3_value *, __n128))(v10 + 8);
    int v12 = *a3;
    if (!*a3)
    {
LABEL_9:
      int v12 = (sqlite3_value *)sub_1812CF36C(89752);
      v6.n128_u64[0] = 0LL;
      goto LABEL_21;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    int v11 = 0LL;
    int v12 = *a3;
    if (!*a3) {
      goto LABEL_9;
    }
  }

  __int16 v13 = *((_WORD *)v12 + 10);
  if ((v13 & 8) != 0)
  {
    v6.n128_u64[0] = *(void *)v12;
  }

  else if ((v13 & 0x24) != 0)
  {
    v6.n128_f64[0] = (double)*(uint64_t *)v12;
  }

  else if ((v13 & 0x12) != 0)
  {
    v6.n128_f64[0] = sub_181303DB8((uint64_t)v12);
  }

  else
  {
    v6.n128_u64[0] = 0LL;
  }

double sub_18134F90C(double a1)
{
  return floor(a1);
}

void sub_18134F914(uint64_t *a1, int a2, uint64_t a3)
{
  __n128 v6 = *(sqlite3_value **)a3;
  if (!*(void *)a3)
  {
LABEL_15:
    unsigned __int16 v14 = 24216;
LABEL_16:
    sub_1812CF36C(v14 | 0x10000);
    return;
  }

  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 8) != 0)
  {
    double v8 = *(double *)v6;
  }

  else if ((v7 & 0x24) != 0)
  {
    double v8 = (double)*(uint64_t *)v6;
    if (v8 <= 0.0) {
      return;
    }
  }

  else
  {
    if ((v7 & 0x12) == 0) {
      return;
    }
    double v8 = sub_181303DB8((uint64_t)v6);
    if (v8 <= 0.0) {
      return;
    }
  }

  if (a2 != 2)
  {
    if (a1 && (uint64_t v15 = a1[1]) != 0)
    {
      int v16 = *(_DWORD *)(v15 + 8);
      if (v16 == 2)
      {
        double v17 = log2(v8);
        goto LABEL_29;
      }

      if (v16 == 1)
      {
        double v17 = log10(v8);
LABEL_29:
        double v18 = v17;
LABEL_30:
        uint64_t v19 = *a1;
        if ((*(_WORD *)(v19 + 20) & 0x9000) != 0) {
          sub_181303888((int *)v19);
        }
        else {
          *(_WORD *)(v19 + 20) = 1;
        }
        *(double *)uint64_t v19 = v18;
        *(_WORD *)(v19 + 20) = 8;
        return;
      }
    }

    else
    {
      sub_1812CF36C(97932);
    }

    double v18 = log(v8);
    if (!a1)
    {
LABEL_27:
      unsigned __int16 v14 = 31861;
      goto LABEL_16;
    }

    goto LABEL_30;
  }

  double v9 = log(v8);
  if (v9 <= 0.0) {
    return;
  }
  uint64_t v10 = *(void *)(a3 + 8);
  if (!v10) {
    goto LABEL_15;
  }
  double v11 = v9;
  __int16 v12 = *(_WORD *)(v10 + 20);
  if ((v12 & 8) != 0)
  {
    double v13 = *(double *)v10;
  }

  else if ((v12 & 0x24) != 0)
  {
    double v13 = (double)*(uint64_t *)v10;
  }

  else
  {
    if ((v12 & 0x12) == 0) {
      return;
    }
    double v13 = sub_181303DB8(v10);
  }

  if (v13 > 0.0)
  {
    double v18 = log(v13) / v11;
    if (!a1) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }

void sub_18134FB00(uint64_t *a1, uint64_t a2, sqlite3_value **a3)
{
  if ((sqlite3_value_numeric_type(*a3) - 3) >= 0xFFFFFFFE)
  {
    __n128 v6 = *a3;
    if (*a3)
    {
      __int16 v7 = *((_WORD *)v6 + 10);
      if ((v7 & 8) != 0)
      {
        v5.n128_u64[0] = *(void *)v6;
      }

      else if ((v7 & 0x24) != 0)
      {
        v5.n128_f64[0] = (double)*(uint64_t *)v6;
      }

      else if ((v7 & 0x12) != 0)
      {
        v5.n128_f64[0] = sub_181303DB8((uint64_t)v6);
      }

      else
      {
        v5.n128_u64[0] = 0LL;
      }
    }

    else
    {
      sub_1812CF36C(89752);
      v5.n128_u64[0] = 0LL;
    }

    if (!a1 || (uint64_t v8 = a1[1]) == 0) {
      sub_1813C404C();
    }
    double v9 = (*(double (**)(__n128))(v8 + 8))(v5);
    uint64_t v10 = *a1;
    if ((*(_WORD *)(v10 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v10);
    }
    else {
      *(_WORD *)(v10 + 20) = 1;
    }
    *(double *)uint64_t v10 = v9;
    *(_WORD *)(v10 + 20) = 8;
  }

void sub_18134FBF8(uint64_t *a1, uint64_t a2, sqlite3_value **a3)
{
  if ((sqlite3_value_numeric_type(*a3) - 3) >= 0xFFFFFFFE
    && (sqlite3_value_numeric_type(a3[1]) - 3) >= 0xFFFFFFFE)
  {
    __n128 v6 = *a3;
    if (*a3)
    {
      __int16 v7 = *((_WORD *)v6 + 10);
      if ((v7 & 8) != 0)
      {
        double v8 = *(double *)v6;
      }

      else if ((v7 & 0x24) != 0)
      {
        double v8 = (double)*(uint64_t *)v6;
      }

      else if ((v7 & 0x12) != 0)
      {
        double v8 = sub_181303DB8((uint64_t)v6);
      }

      else
      {
        double v8 = 0.0;
      }
    }

    else
    {
      sub_1812CF36C(89752);
      double v8 = 0.0;
    }

    uint64_t v9 = (uint64_t)a3[1];
    if (v9)
    {
      __int16 v10 = *(_WORD *)(v9 + 20);
      if ((v10 & 8) != 0)
      {
        v5.n128_u64[0] = *(void *)v9;
      }

      else if ((v10 & 0x24) != 0)
      {
        v5.n128_f64[0] = (double)*(uint64_t *)v9;
      }

      else if ((v10 & 0x12) != 0)
      {
        v5.n128_u64[0] = sub_181303DB8(v9);
      }

      else
      {
        v5.n128_u64[0] = 0LL;
      }
    }

    else
    {
      sub_1812CF36C(89752);
      v5.n128_u64[0] = 0LL;
    }

    if (!a1 || (uint64_t v11 = a1[1]) == 0) {
      sub_1813C404C();
    }
    double v12 = (*(double (**)(double, __n128))(v11 + 8))(v8, v5);
    uint64_t v13 = *a1;
    if ((*(_WORD *)(v13 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v13);
    }
    else {
      *(_WORD *)(v13 + 20) = 1;
    }
    *(double *)uint64_t v13 = v12;
    *(_WORD *)(v13 + 20) = 8;
  }

double sub_18134FD6C(double a1)
{
  return a1 * 0.0174532925;
}

double sub_18134FD7C(double a1)
{
  return a1 * 57.2957795;
}

void sub_18134FD8C(int **a1)
{
  if (a1)
  {
    int v1 = *a1;
    if (((*a1)[5] & 0x9000) != 0) {
      sub_181303888(*a1);
    }
    *(void *)int v1 = 0x400921FB54442D18LL;
    *((_WORD *)v1 + 10) = 8;
  }

  else
  {
    sub_1812CF36C(97397);
  }

void sub_18134FDEC(uint64_t *a1, uint64_t a2, sqlite3_value **a3)
{
  if ((sqlite3_value_numeric_type(*a3) - 3) >= 0xFFFFFFFE)
  {
    __n128 v5 = *a3;
    if (*a3)
    {
      __int16 v6 = *((_WORD *)v5 + 10);
      if ((v6 & 8) != 0)
      {
        double v7 = *(double *)v5;
      }

      else if ((v6 & 0x24) != 0)
      {
        double v7 = (double)*(uint64_t *)v5;
      }

      else if ((v6 & 0x12) != 0)
      {
        double v7 = sub_181303DB8((uint64_t)v5);
      }

      else
      {
        double v7 = 0.0;
      }
    }

    else
    {
      sub_1812CF36C(89752);
      double v7 = 0.0;
    }

    if (a1)
    {
      uint64_t v8 = *a1;
      if (v7 < 0.0) {
        uint64_t v9 = -1LL;
      }
      else {
        uint64_t v9 = v7 > 0.0;
      }
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v8, v9);
      }

      else
      {
        *(void *)uint64_t v8 = v9;
        *(_WORD *)(v8 + 20) = 4;
      }
    }

    else
    {
      sub_1812CF36C(97431);
    }
  }

uint64_t sub_18134FED0(sqlite3_context *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1)
    {
LABEL_9:
      *((_DWORD *)a1 + 9) = 18;
      sub_181269368(v4, "string or blob too big", -1LL, 1u, 0LL);
      return 0LL;
    }

    sub_1812CF36C(97953);
    if (MEMORY[0x88] < a2)
    {
      uint64_t v4 = *(void *)a1;
      goto LABEL_9;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    if (MEMORY[0x88] < a2)
    {
      sub_1812CF36C(97638);
      return 0LL;
    }
  }

double sub_18134FFA4(double *a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 0x10000000000000LL) > 0xFFE0000000000000LL)
  {
    double v5 = (double)a2;
  }

  else
  {
    if (a2 <= 0) {
      uint64_t v2 = -(-a2 & 0x3FFF);
    }
    else {
      uint64_t v2 = a2 & 0x3FFF;
    }
    double v9 = *a1 + (double)(a2 - v2);
    if (fabs(*a1) <= fabs((double)(a2 - v2)))
    {
      double v3 = (double)(a2 - v2) - v9;
      double v4 = *a1;
    }

    else
    {
      double v3 = *a1 - v9;
      double v4 = (double)(a2 - v2);
    }

    a1[1] = v3 + v4 + a1[1];
    *a1 = v9;
    double v5 = (double)v2;
  }

  double v11 = v5;
  double v10 = *a1 + v5;
  if (fabs(*a1) <= fabs(v5))
  {
    double v6 = v5 - v10;
    double v7 = *a1;
  }

  else
  {
    double v6 = *a1 - v10;
    double v7 = v11;
  }

  a1[1] = v6 + v7 + a1[1];
  double result = v10;
  *a1 = v10;
  return result;
}

uint64_t sub_1813500C8(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
    double v6 = *(sqlite3_value **)a3;
    if (!*(void *)a3)
    {
LABEL_13:
      uint64_t v8 = 0LL;
      uint64_t v9 = *(void *)(a3 + 24);
      if (!v9) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v5 = 0LL;
    double v6 = *(sqlite3_value **)a3;
    if (!*(void *)a3) {
      goto LABEL_13;
    }
  }

  int v7 = *((unsigned __int16 *)v6 + 10);
  if ((~v7 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 1)
  {
    if ((v7 & 1) != 0) {
      goto LABEL_13;
    }
    uint64_t v8 = sub_181303998((int *)v6, 1);
    uint64_t v9 = *(void *)(a3 + 24);
    if (!v9) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v9 = *(void *)(a3 + 24);
    if (!v9) {
      goto LABEL_21;
    }
  }

LABEL_147:
                if (++v76 != v75) {
                  goto LABEL_148;
                }
LABEL_121:
                int v59 = (void *)v59[10];
                if (v59) {
                  goto LABEL_122;
                }
                uint64_t v58 = v143;
LABEL_164:
                uint64_t v41 = (char *)v20;
                if (v140 == v31)
                {
                  sub_181352F2C((uint64_t)v138, (uint64_t)&v145, *(unsigned int **)(v58 + 32), v33);
                  uint64_t v58 = v143;
                }

                uint64_t v40 = v135;
                sub_181353000((uint64_t)v137, v58);
                goto LABEL_252;
              }
            }

            else if (byte_1813C6343[v83] != byte_1813C6343[v84])
            {
              goto LABEL_147;
            }
          }
        }
      }

      else if (byte_1813C6343[v69] != byte_1813C6343[v70])
      {
        goto LABEL_130;
      }
    }
  }

  uint64_t v40 = v135;
  if (*((_BYTE *)v141 + 63))
  {
    uint64_t v41 = (char *)v20;
    if (*((_BYTE *)v141 + 63) != 2) {
      goto LABEL_252;
    }
    uint64_t v42 = (uint64_t)v141[8];
    *(_DWORD *)(v42 + 4) &= ~0x200000u;
    int v139 = 0;
    sub_181321444(v138, v42, 0LL);
    if (*(_BYTE *)(v136 + 103)) {
      int v35 = 7;
    }
    else {
      int v35 = v139;
    }
    if (!v35)
    {
      sub_181285228(v137, (void *)v42);
      uint64_t v41 = (char *)v20;
      uint64_t v40 = v135;
      goto LABEL_252;
    }

    goto LABEL_253;
  }

  uint64_t v47 = *v141;
  if (!*v141)
  {
LABEL_117:
    int v56 = 0;
    *(void *)&__int128 v146 = v141;
    goto LABEL_215;
  }

  for (uint64_t k = v14; ; ++k)
  {
    uint64_t v49 = *k;
    uint64_t v50 = *v47;
    if ((_DWORD)v49 == (_DWORD)v50) {
      break;
    }
    if (byte_1813C6343[v49] != byte_1813C6343[v50]) {
      goto LABEL_117;
    }
LABEL_105:
    ++v47;
  }

  if (*k) {
    goto LABEL_105;
  }
  *(void *)&__int128 v146 = v141;
  if ((int)v16 < *((__int16 *)v141 + 27))
  {
    uint64_t v51 = *(void *)&v141[1][16 * v16];
    uint64_t v52 = v144;
    if (v51 && v144 != 0LL)
    {
      if (*v144 == v51)
      {
        int v55 = &v144;
LABEL_168:
        *int v55 = v52[3];
        v52[3] = v145;
        *(void *)&__int128 v145 = v52;
        ++DWORD2(v145);
        uint64_t v39 = v141;
      }

      else
      {
        while (1)
        {
          uint64_t v54 = v52;
          uint64_t v52 = (void *)v52[3];
          if (!v52) {
            break;
          }
          if (*v52 == v51)
          {
            int v55 = v54 + 3;
            goto LABEL_168;
          }
        }
      }
    }
  }

  if ((HIDWORD(v145) & 0x80000000) != 0)
  {
    uint64_t v88 = v144;
    if (v144)
    {
      if ((unsigned __int8 **)*v144 == (unsigned __int8 **)((char *)v39 + 52))
      {
        uint64_t v90 = &v144;
LABEL_176:
        void *v90 = v88[3];
        v88[3] = v145;
        *(void *)&__int128 v145 = v88;
        ++DWORD2(v145);
        uint64_t v39 = v141;
      }

      else
      {
        while (1)
        {
          uint64_t v89 = v88;
          uint64_t v88 = (void *)v88[3];
          if (!v88) {
            break;
          }
          if ((unsigned __int8 **)*v88 == (unsigned __int8 **)((char *)v39 + 52))
          {
            uint64_t v90 = v89 + 3;
            goto LABEL_176;
          }
        }
      }
    }
  }

  sub_18131C674((uint64_t)v137, v39[4]);
  for (m = v141[2]; m; m = (unsigned __int8 *)*((void *)m + 5))
  {
    int v95 = (_DWORD *)*((void *)m + 10);
    if (v95)
    {
      int v96 = *v95;
      if ((int)*v95 >= 1)
      {
        for (n = (uint64_t *)(v95 + 2); ; n += 3)
        {
          if (*n)
          {
            else {
              BOOL v98 = v96 <= 1;
            }
            if (v98) {
              break;
            }
          }

          else if (v96 < 2)
          {
            break;
          }

          --v96;
        }
      }
    }
  }

  for (iuint64_t i = v142; ii; iuint64_t i = *(void *)(ii + 40))
  {
    uint64_t v99 = *(_DWORD **)(ii + 80);
    if (v99)
    {
      int v100 = *v99;
      if ((int)*v99 >= 1)
      {
        for (juint64_t j = (uint64_t *)(v99 + 2); ; jj += 3)
        {
          if (*jj)
          {
            else {
              BOOL v102 = v100 <= 1;
            }
            if (v102) {
              break;
            }
          }

          else if (v100 < 2)
          {
            break;
          }

          --v100;
        }
      }
    }
  }

  uint64_t v39 = v141;
  if (*((__int16 *)v141 + 27) >= 1)
  {
    uint64_t v93 = 0LL;
    uint64_t v94 = 12LL;
    do
    {
      int v103 = *(unsigned __int16 *)&v39[1][v94];
      if (*(_WORD *)&v39[1][v94])
      {
        if (!*((_BYTE *)v39 + 63))
        {
          int v104 = v39[10];
          if (v104)
          {
            if (*(_DWORD *)v104 >= v103)
            {
              uint64_t v105 = *(void *)&v104[24 * (v103 - 1) + 8];
              if (v105)
              {
                sub_18131C57C((uint64_t)v137, v105);
                uint64_t v39 = v141;
              }
            }
          }
        }
      }

      ++v93;
      v94 += 16LL;
    }

    while (v93 < *((__int16 *)v39 + 27));
  }

  int v56 = 1;
  uint64_t v40 = v135;
LABEL_215:
  uint64_t v106 = v39[9];
  uint64_t v41 = (char *)v20;
  if (v106)
  {
    int v107 = DWORD2(v145);
    uint64_t v108 = (void *)v145;
    while (1)
    {
      uint64_t v109 = *((unsigned int *)v106 + 10);
LABEL_217:
      uint64_t v106 = (unsigned __int8 *)*((void *)v106 + 1);
      if (!v106) {
        goto LABEL_252;
      }
    }

    uint64_t v110 = 0LL;
LABEL_222:
    if (v56)
    {
      int v111 = &v106[16 * v110];
      int v113 = *((_DWORD *)v111 + 16);
      uint64_t v112 = v111 + 64;
      uint64_t v114 = v144;
      if (v113 == (_DWORD)v16 && v144 != 0LL)
      {
        uint64_t v116 = &v144;
        if ((unsigned __int8 *)*v144 == v112)
        {
LABEL_231:
          void *v116 = v114[3];
          v114[3] = v108;
          *(void *)&__int128 v145 = v114;
          DWORD2(v145) = ++v107;
          uint64_t v108 = v114;
        }

        else
        {
          while (1)
          {
            int v117 = v114;
            uint64_t v114 = (void *)v114[3];
            if (!v114) {
              break;
            }
            if ((unsigned __int8 *)*v114 == v112)
            {
              uint64_t v116 = v117 + 3;
              goto LABEL_231;
            }
          }
        }
      }
    }

    int v118 = (_BYTE *)*((void *)v106 + 2);
    if (!v118) {
      goto LABEL_221;
    }
    for (kuint64_t k = v14; ; ++kk)
    {
      uint64_t v120 = *v118;
      uint64_t v121 = *kk;
      if ((_DWORD)v120 == (_DWORD)v121)
      {
        if (!*v118)
        {
          uint64_t v122 = *(void *)&v106[16 * v110 + 72];
          if (v122) {
            BOOL v123 = v33 == 0;
          }
          else {
            BOOL v123 = 1;
          }
          if (v123) {
            goto LABEL_221;
          }
          uint64_t v124 = 0LL;
          while (2)
          {
            uint64_t v125 = *(unsigned __int8 *)(v122 + v124);
            uint64_t v126 = *(unsigned __int8 *)(v33 + v124);
            if ((_DWORD)v125 != (_DWORD)v126)
            {
              if (byte_1813C6343[v125] != byte_1813C6343[v126]) {
                goto LABEL_221;
              }
LABEL_244:
              ++v124;
              continue;
            }

            break;
          }

          if (*(_BYTE *)(v122 + v124)) {
            goto LABEL_244;
          }
          uint64_t v127 = v144;
          if (v144)
          {
            int v128 = &v144;
            if (*v144 == v122)
            {
LABEL_220:
              *int v128 = v127[3];
              v127[3] = v108;
              *(void *)&__int128 v145 = v127;
              DWORD2(v145) = ++v107;
              uint64_t v108 = v127;
            }

            else
            {
              while (1)
              {
                int v129 = v127;
                uint64_t v127 = (void *)v127[3];
                if (!v127) {
                  break;
                }
                if (*v127 == v122)
                {
                  int v128 = v129 + 3;
                  goto LABEL_220;
                }
              }
            }
          }

LABEL_252:
  int v35 = sub_1813531B0((uint64_t)a1, (uint64_t *)&v145, v133, v41, v40, v36, v37, v38);
LABEL_253:
  if (v35)
  {
    if (v35 == 1 && (*(void *)(v136 + 48) & 0x10000001LL) == 1)
    {
      sqlite3_result_value(a1, *(sqlite3_value **)a3);
    }

    else if (v138[1])
    {
      sub_181353638( (uint64_t)a1,  (uint64_t)&byte_1813CEAEE,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  v138,  v36,  v37,  v38);
    }

    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v35;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
      {
        switch(v35)
        {
          case 516:
            unsigned int v132 = "abort due to ROLLBACK";
            break;
          case 101:
            unsigned int v132 = "no more rows available";
            break;
          case 100:
            unsigned int v132 = "another row available";
            break;
          default:
            else {
              unsigned int v132 = off_189B6EC30[v35];
            }
            break;
        }

        sub_1812D7A8C((uint64_t)a1, v132, -1, 1u, 0LL);
      }
    }

    else
    {
      sub_1812CF36C(97620);
    }
  }

  uint64_t result = (uint64_t)sub_18135379C(v138);
  uint64_t v130 = (void *)v145;
  if ((void)v145)
  {
    do
    {
      int v131 = (void *)v130[3];
      uint64_t result = (uint64_t)sub_1812F20DC((void *)v136, v130);
      uint64_t v130 = v131;
    }

    while (v131);
  }

  *(void *)(v136 + 528) = v134;
  if (!*(_BYTE *)(v136 + 111)) {
    return sub_1812FA0B4(v136);
  }
  return result;
}

uint64_t sub_181350D7C(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v6 = *a3;
    if (!*a3)
    {
LABEL_13:
      uint64_t v8 = 0LL;
      uint64_t v9 = a3[3];
      if (!v9) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v5 = 0LL;
    uint64_t v6 = *a3;
    if (!*a3) {
      goto LABEL_13;
    }
  }

  int v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0) {
      goto LABEL_13;
    }
    uint64_t v8 = (unsigned __int8 *)sub_181303998((int *)v6, 1);
    uint64_t v9 = a3[3];
    if (!v9) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v8 = *(unsigned __int8 **)(v6 + 8);
    uint64_t v9 = a3[3];
    if (!v9) {
      goto LABEL_21;
    }
  }

LABEL_141:
                  uint64_t v75 = (int *)v65[4];
                  if (!v75) {
                    goto LABEL_128;
                  }
                  int v76 = *v75;
                  if (*v75 < 1) {
                    goto LABEL_128;
                  }
                  uint64_t v77 = 0LL;
                  while (2)
                  {
                    uint64_t v78 = *(void *)&v75[26 * v77 + 6];
                    if (!v78) {
                      goto LABEL_145;
                    }
                    uint64_t v79 = 0LL;
                    while (2)
                    {
                      uint64_t v80 = *(unsigned __int8 *)(v78 + v79);
                      uint64_t v81 = v14[v79];
                      if ((_DWORD)v80 != (_DWORD)v81)
                      {
                        if (byte_1813C6343[v80] != byte_1813C6343[v81]) {
                          goto LABEL_145;
                        }
LABEL_149:
                        ++v79;
                        continue;
                      }

                      break;
                    }

                    if (*(_BYTE *)(v78 + v79)) {
                      goto LABEL_149;
                    }
                    uint64_t v82 = v101;
                    if (v101)
                    {
                      uint64_t v83 = &v101;
                      if (*v101 != v78)
                      {
                        do
                        {
                          uint64_t v84 = v82;
                          uint64_t v82 = (void *)v82[3];
                          if (!v82) {
                            goto LABEL_145;
                          }
                        }

                        while (*v82 != v78);
                        uint64_t v83 = v84 + 3;
                      }

                      *uint64_t v83 = v82[3];
                      v82[3] = v67;
                      *(void *)&__int128 v93 = v82;
                      DWORD2(v93) = ++v66;
                      uint64_t v75 = (int *)v65[4];
                      int v76 = *v75;
                      uint64_t v67 = v82;
                    }

LABEL_145:
                    if (++v77 < v76) {
                      continue;
                    }
                    break;
                  }

uint64_t sub_181351670( sqlite3_context *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v11 = *a3;
    if (!*a3)
    {
LABEL_13:
      int v13 = 0LL;
      uint64_t v14 = a3[1];
      if (!v14) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v10 = 0LL;
    uint64_t v11 = *a3;
    if (!*a3) {
      goto LABEL_13;
    }
  }

  int v12 = *(unsigned __int16 *)(v11 + 20);
  if ((~v12 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 1)
  {
    if ((v12 & 1) != 0) {
      goto LABEL_13;
    }
    int v13 = (unsigned __int8 *)sub_181303998((int *)v11, 1);
    uint64_t v14 = a3[1];
    if (!v14) {
      goto LABEL_22;
    }
  }

  else
  {
    int v13 = *(unsigned __int8 **)(v11 + 8);
    uint64_t v14 = a3[1];
    if (!v14) {
      goto LABEL_22;
    }
  }

void sub_181351B00( _DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v11 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1812CF36C(89717);
      LODWORD(v12) = 0;
      goto LABEL_8;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v10 = 0LL;
    uint64_t v11 = *a3;
    if (!*a3) {
      goto LABEL_4;
    }
  }

  __int16 v13 = *(_WORD *)(v11 + 20);
  if ((v13 & 0x24) != 0)
  {
    LODWORD(v12) = *(_DWORD *)v11;
  }

  else if ((v13 & 8) != 0)
  {
    double v20 = *(double *)v11;
    if (*(double *)v11 >= -9.22337204e18)
    {
      if (v20 <= 9.22337204e18) {
        uint64_t v12 = (uint64_t)v20;
      }
      else {
        LODWORD(v12) = -1;
      }
    }

    else
    {
      LODWORD(v12) = 0;
    }
  }

  else if ((v13 & 0x12) != 0 && *(void *)(v11 + 8))
  {
    LODWORD(v12) = sub_181303DF0(v11);
  }

  else
  {
    LODWORD(v12) = 0;
  }

uint64_t sub_181351F78( sqlite3_context *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(void *)a1)
  {
    uint64_t v10 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v11 = *a3;
    if (!*a3) {
      goto LABEL_13;
    }
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v10 = 0LL;
    uint64_t v11 = *a3;
    if (!*a3) {
      goto LABEL_13;
    }
  }

  int v12 = *(unsigned __int16 *)(v11 + 20);
  if ((~v12 & 0x202) == 0 && *(_BYTE *)(v11 + 22) == 1)
  {
    __int16 v13 = *(unsigned __int8 **)(v11 + 8);
    uint64_t result = a3[1];
    if (!result) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  if ((v12 & 1) == 0)
  {
    __int16 v13 = (unsigned __int8 *)sub_181303998((int *)v11, 1);
    uint64_t result = a3[1];
    if (!result) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

uint64_t sub_1813523CC( uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  *(void *)(a1 + 216) = 0LL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 408) = 0LL;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 256) = *(void *)(a3 + 344);
  *(void *)(a3 + 344) = a1;
  *(void *)a1 = a3;
  if (*(_BYTE *)(a3 + 103)) {
    sub_1812DC47C(a1, "out of memory", a3, (uint64_t)a4, a5, a6, a7, a8, v38);
  }
  if (!a4) {
    return 7LL;
  }
  uint64_t v13 = *a4;
  if (!*a4)
  {
    int v23 = 0;
    int v21 = "CREATE ";
    goto LABEL_33;
  }

  if ((v13 & 0xFFFFFFDF) != 0x43)
  {
    uint64_t v20 = &byte_1813C6343[v13];
    int v21 = "CREATE ";
LABEL_32:
    int v23 = *v20;
    goto LABEL_33;
  }

  uint64_t v14 = a4[1];
  if (!a4[1])
  {
    int v23 = 0;
    int v21 = "REATE ";
    goto LABEL_33;
  }

  if ((v14 & 0xFFFFFFDF) != 0x52)
  {
    uint64_t v20 = &byte_1813C6343[v14];
    int v21 = "REATE ";
    goto LABEL_32;
  }

  uint64_t v15 = a4[2];
  if (!a4[2])
  {
    int v23 = 0;
    int v21 = "EATE ";
    goto LABEL_33;
  }

  if ((v15 & 0xFFFFFFDF) != 0x45)
  {
    uint64_t v20 = &byte_1813C6343[v15];
    int v21 = "EATE ";
    goto LABEL_32;
  }

  uint64_t v16 = a4[3];
  if (!a4[3])
  {
    int v23 = 0;
    int v21 = "ATE ";
    goto LABEL_33;
  }

  if ((v16 & 0xFFFFFFDF) != 0x41)
  {
    uint64_t v20 = &byte_1813C6343[v16];
    int v21 = "ATE ";
    goto LABEL_32;
  }

  uint64_t v17 = a4[4];
  if (!a4[4])
  {
    int v23 = 0;
    int v21 = "TE ";
    goto LABEL_33;
  }

  if ((v17 & 0xFFFFFFDF) != 0x54)
  {
    uint64_t v20 = &byte_1813C6343[v17];
    int v21 = "TE ";
    goto LABEL_32;
  }

  uint64_t v18 = a4[5];
  if (!a4[5])
  {
    int v23 = 0;
    int v21 = "E ";
    goto LABEL_33;
  }

  if ((v18 & 0xFFFFFFDF) != 0x45)
  {
    uint64_t v20 = &byte_1813C6343[v18];
    int v21 = "E ";
    goto LABEL_32;
  }

  uint64_t v19 = a4[6];
  if (a4[6])
  {
    if ((_DWORD)v19 == 32) {
      goto LABEL_34;
    }
    uint64_t v20 = &byte_1813C6343[v19];
    int v21 = " ";
    goto LABEL_32;
  }

  int v23 = 0;
  int v21 = " ";
LABEL_33:
LABEL_34:
  char v24 = 1;
  if (v8) {
    goto LABEL_58;
  }
  if (a2)
  {
    int v25 = *(_DWORD *)(a3 + 40);
    BOOL v26 = __OFSUB__(v25, 1);
    uint64_t v27 = (v25 - 1);
    if ((int)v27 < 0 != v26)
    {
LABEL_56:
      char v24 = v27;
    }

    else
    {
      BOOL v28 = (_BYTE **)(*(void *)(a3 + 32) + 32 * v27);
      do
      {
        uint64_t v29 = *v28;
        if (*v28)
        {
          for (int i = a2; ; ++i)
          {
            uint64_t v31 = *v29;
            uint64_t v32 = *i;
            if ((_DWORD)v31 == (_DWORD)v32)
            {
              if (!*v29) {
                goto LABEL_56;
              }
            }

            else if (byte_1813C6343[v31] != byte_1813C6343[v32])
            {
              break;
            }

            ++v29;
          }
        }

        if (!(_DWORD)v27)
        {
          uint64_t v34 = a2;
          for (uint64_t j = "main"; ; ++j)
          {
            uint64_t v36 = *(unsigned __int8 *)j;
            uint64_t v37 = *v34;
            if ((_DWORD)v36 == (_DWORD)v37)
            {
              if (!*j)
              {
                char v24 = 0;
                goto LABEL_58;
              }
            }

            else if (byte_1813C6343[v36] != byte_1813C6343[v37])
            {
              break;
            }

            ++v34;
          }
        }

        v28 -= 4;
        char v24 = -1;
        BOOL v33 = (int)v27 <= 0;
        LODWORD(v27) = v27 - 1;
      }

      while (!v33);
    }
  }

  else
  {
    char v24 = -1;
  }

uint64_t sub_18135276C(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[5];
  int v3 = *a2;
  if (v3 == 167)
  {
    if (*((_DWORD *)a2 + 12) == *(_DWORD *)(v2 + 12) && (a2[7] & 3) == 0 && *(void *)(v2 + 16) == *((void *)a2 + 9))
    {
      uint64_t v4 = *a1;
      uint64_t v5 = *(unsigned __int8 ***)(*a1 + 408LL);
      if (v5)
      {
        if (*v5 != a2)
        {
          while (1)
          {
            uint64_t v6 = v5;
            uint64_t v5 = (unsigned __int8 **)v5[3];
            if (!v5) {
              return 0LL;
            }
            if (*v5 == a2)
            {
LABEL_18:
              if (!v2) {
                return 0LL;
              }
              int v8 = v6 + 3;
              goto LABEL_21;
            }
          }
        }

        goto LABEL_20;
      }
    }

    return 0LL;
  }

  if (v3 != 77) {
    return 0LL;
  }
  if (*((_DWORD *)a2 + 12) != *(_DWORD *)(v2 + 12)) {
    return 0LL;
  }
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 176LL) != *(void *)(v2 + 16)) {
    return 0LL;
  }
  uint64_t v5 = *(unsigned __int8 ***)(v4 + 408);
  if (!v5) {
    return 0LL;
  }
  if (*v5 != a2)
  {
    while (1)
    {
      uint64_t v6 = v5;
      uint64_t v5 = (unsigned __int8 **)v5[3];
      if (!v5) {
        return 0LL;
      }
      if (*v5 == a2) {
        goto LABEL_18;
      }
    }
  }

uint64_t sub_181352874(void *a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 6) & 0x420) != 0) {
    return 1LL;
  }
  sub_181323844(a1, a2);
  return 0LL;
}

uint64_t sub_1813528A8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 360);
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v91 = 0u;
  uint64_t v90 = a1;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v3 + 48);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 24);
    int v7 = -1;
    do
    {
      uint64_t v8 = *v6;
      v6 += 4;
      ++v7;
    }

    while (v8 != v5);
  }

  else
  {
    int v7 = -32768;
  }

  uint64_t v9 = sub_1812E2C64(v2, *(char **)(v3 + 8), *(_BYTE **)(v4 + 32LL * v7));
  *(void *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(v3 + 16);
  if (!v9
    || *(_BYTE *)(v9 + 63) != 1 && *(__int16 *)(v9 + 54) > 0
    || (uint64_t v16 = sub_181322320(a1, v9, v10, v11, v12, v13, v14, v15), !(_DWORD)v16))
  {
    uint64_t v17 = *(void *)(v3 + 24);
    if (v17)
    {
      LODWORD(v93) = 0;
      uint64_t v94 = a1;
      int v95 = sub_1812876D8;
      int v96 = sub_1812871E4;
      uint64_t v97 = 0LL;
      BOOL v98 = &v90;
      int v18 = *(_DWORD *)(a1 + 308) + *(_DWORD *)(v17 + 40);
      *(_DWORD *)(a1 + 308) = v18;
      if (*(_DWORD *)(*(void *)a1 + 148LL) < v18)
      {
        sub_1812DC47C( a1,  "Expression tree is too large (maximum depth %d)",  v10,  v11,  v12,  v13,  v14,  v15,  *(_DWORD *)(*(void *)a1 + 148LL));
        return 1LL;
      }

      sub_18131C57C((uint64_t)&v94, v17);
      uint64_t v19 = v94;
      *(_DWORD *)(v94 + 308) -= *(_DWORD *)(v17 + 40);
      *(_DWORD *)(v17 + 4) |= v93 & 0x8010;
      if (SHIDWORD(v92) > 0) {
        return 1LL;
      }
      uint64_t v16 = *(_DWORD *)(v19 + 48) > 0;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    uint64_t v20 = *(void *)(v3 + 56);
    if (!v20) {
      return v16;
    }
    while (1)
    {
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        sub_181321444((_BYTE *)a1, v21, (uint64_t)&v90);
        if (*(_DWORD *)(a1 + 48))
        {
          uint64_t v16 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v16) {
            return v16;
          }
        }
      }

      if (*(void *)(v20 + 24)) {
        break;
      }
      uint64_t v16 = 0LL;
LABEL_24:
      uint64_t v20 = *(void *)(v20 + 80);
      if (!v20) {
        return v16;
      }
    }

    uint64_t v22 = sub_18133FCD0((uint64_t *)a1, v20);
    if (!v22) {
      return 7LL;
    }
    int v23 = v22;
    char v24 = sub_181280000((void **)a1, *(void **)(v20 + 48), v22, 0LL, 0LL, 0LL, 0LL, 0, 0LL);
    if (!v24)
    {
      int v23 = 0LL;
      *(void *)(v20 + 48) = 0LL;
      unsigned int v40 = 7;
      BOOL v41 = *(int **)(v20 + 32);
      if (!v41) {
        goto LABEL_19;
      }
      goto LABEL_63;
    }

    uint64_t v31 = (uint64_t)v24;
    uint64_t v32 = *(unsigned int **)(v20 + 48);
    if (v32)
    {
      uint64_t v33 = *v32;
      if ((int)v33 >= 1)
      {
        if ((_DWORD)v33 == 1)
        {
          uint64_t v34 = 0LL;
LABEL_47:
          uint64_t v45 = v33 - v34;
          uint64_t v46 = (_WORD *)((char *)&v32[6 * v34 + 6] + 1);
          do
          {
            *uint64_t v46 = *v46 & 0xFFFC | 1;
            v46 += 12;
            --v45;
          }

          while (v45);
          goto LABEL_49;
        }

        uint64_t v34 = v33 & 0xFFFFFFFE;
        uint64_t v42 = (_WORD *)((char *)v32 + 49);
        uint64_t v43 = v34;
        do
        {
          __int16 v44 = *v42 & 0xFFFC | 1;
          *(v42 - 12) = *(v42 - 12) & 0xFFFC | 1;
          *uint64_t v42 = v44;
          v42 += 24;
          v43 -= 2LL;
        }

        while (v43);
        if (v34 != v33) {
          goto LABEL_47;
        }
      }
    }

uint64_t sub_181352E48(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = 0LL;
  uint64_t v6 = (void **)(result + 408);
  while (2)
  {
    if (!a4) {
      goto LABEL_4;
    }
    int v7 = &a3[6 * v5];
    uint64_t v8 = *((void *)v7 + 2);
    if ((*(_WORD *)((_BYTE *)v7 + 25) & 3) != 0 || v8 == 0) {
      goto LABEL_4;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v11 = *(unsigned __int8 *)(v8 + i);
      uint64_t v12 = *(unsigned __int8 *)(a4 + i);
      if ((_DWORD)v11 == (_DWORD)v12) {
        break;
      }
      if (byte_1813C6343[v11] != byte_1813C6343[v12]) {
        goto LABEL_4;
      }
LABEL_12:
      ;
    }

    if (*(_BYTE *)(v8 + i)) {
      goto LABEL_12;
    }
    uint64_t v13 = *v6;
    if (*v6)
    {
      uint64_t v14 = (void *)(result + 408);
      if (*v13 == v8)
      {
LABEL_20:
        if (a2)
        {
          *uint64_t v14 = v13[3];
          v13[3] = *(void *)a2;
          *(void *)a2 = v13;
          ++*(_DWORD *)(a2 + 8);
        }
      }

      else
      {
        while (1)
        {
          uint64_t v15 = v13;
          uint64_t v13 = (void *)v13[3];
          if (!v13) {
            break;
          }
          if (*v13 == v8)
          {
            uint64_t v14 = v15 + 3;
            goto LABEL_20;
          }
        }
      }
    }

uint64_t sub_181352F2C(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = *a3;
  uint64_t v5 = 0LL;
  uint64_t v6 = (void **)(result + 408);
  while (2)
  {
    uint64_t v7 = *(void *)&a3[4 * v5 + 2];
    if (v7) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_4;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v10 = *(unsigned __int8 *)(v7 + i);
      uint64_t v11 = *(unsigned __int8 *)(a4 + i);
      if ((_DWORD)v10 == (_DWORD)v11) {
        break;
      }
      if (byte_1813C6343[v10] != byte_1813C6343[v11]) {
        goto LABEL_4;
      }
LABEL_11:
      ;
    }

    if (*(_BYTE *)(v7 + i)) {
      goto LABEL_11;
    }
    uint64_t v12 = *v6;
    if (*v6)
    {
      uint64_t v13 = (void *)(result + 408);
      if (*v12 == v7)
      {
LABEL_19:
        if (a2)
        {
          void *v13 = v12[3];
          v12[3] = *(void *)a2;
          *(void *)a2 = v12;
          ++*(_DWORD *)(a2 + 8);
        }
      }

      else
      {
        while (1)
        {
          uint64_t v14 = v12;
          uint64_t v12 = (void *)v12[3];
          if (!v12) {
            break;
          }
          if (*v12 == v7)
          {
            uint64_t v13 = v14 + 3;
            goto LABEL_19;
          }
        }
      }
    }

uint64_t sub_181353000(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    uint64_t result = sub_18131C57C(result, v4);
  }
  for (uint64_t i = *(void *)(a2 + 56); i; uint64_t i = *(void *)(i + 80))
  {
    uint64_t result = sub_181285228(v3, *(void **)(i + 16));
    uint64_t v6 = *(void *)(i + 40);
    if (v6) {
      uint64_t result = sub_18131C57C((uint64_t)v3, v6);
    }
    uint64_t v7 = *(_DWORD **)(i + 48);
    if (v7)
    {
      int v8 = *v7;
      if ((int)*v7 >= 1)
      {
        for (uint64_t j = (uint64_t *)(v7 + 2); ; j += 3)
        {
          if (*j)
          {
            uint64_t result = sub_18131C57C((uint64_t)v3, *j);
            if ((_DWORD)result) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = v8 <= 1;
            }
            if (v10) {
              break;
            }
          }

          else if (v8 < 2)
          {
            break;
          }

          --v8;
        }
      }
    }

    uint64_t v11 = *(void **)(i + 64);
    if (v11)
    {
      uint64_t v12 = (_DWORD *)*v11;
      if (*v11)
      {
        int v13 = *v12;
        if ((int)*v12 >= 1)
        {
          for (uint64_t k = (uint64_t *)(v12 + 2); ; k += 3)
          {
            if (*k)
            {
              uint64_t result = sub_18131C57C((uint64_t)v3, *k);
              if ((_DWORD)result) {
                BOOL v15 = 1;
              }
              else {
                BOOL v15 = v13 <= 1;
              }
              if (v15) {
                break;
              }
            }

            else if (v13 < 2)
            {
              break;
            }

            --v13;
          }
        }
      }

      uint64_t v16 = (_DWORD *)v11[2];
      if (v16)
      {
        int v17 = *v16;
        if ((int)*v16 >= 1)
        {
          for (uint64_t m = (uint64_t *)(v16 + 2); ; m += 3)
          {
            if (*m)
            {
              uint64_t result = sub_18131C57C((uint64_t)v3, *m);
              if ((_DWORD)result) {
                BOOL v19 = 1;
              }
              else {
                BOOL v19 = v17 <= 1;
              }
              if (v19) {
                break;
              }
            }

            else if (v17 < 2)
            {
              break;
            }

            --v17;
          }
        }
      }

      uint64_t v20 = v11[3];
      if (v20) {
        uint64_t result = sub_18131C57C((uint64_t)v3, v20);
      }
      uint64_t v21 = v11[1];
      if (v21) {
        uint64_t result = sub_18131C57C((uint64_t)v3, v21);
      }
    }

    uint64_t v22 = *(int **)(i + 32);
    if (v22 && *v22 >= 1)
    {
      uint64_t v23 = 0LL;
      uint64_t v24 = 12LL;
      do
      {
        uint64_t result = sub_181285228(v3, *(void **)&v22[v24]);
        ++v23;
        uint64_t v22 = *(int **)(i + 32);
        v24 += 26LL;
      }

      while (v23 < *v22);
    }
  }

  return result;
}

uint64_t sub_1813531B0( uint64_t a1, uint64_t *a2, uint64_t a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v50 = a5;
  int v8 = __s;
  uint64_t v9 = (const char *)a3;
  if (__s)
  {
    unsigned int v45 = strlen(__s) & 0x3FFFFFFF;
    if (v9) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned int v45 = 0;
    if (a3)
    {
LABEL_3:
      unsigned int v12 = strlen(v9) & 0x3FFFFFFF;
      size_t v13 = v12;
      if (!a1) {
        goto LABEL_12;
      }
      goto LABEL_7;
    }
  }

  unsigned int v12 = 0;
  size_t v13 = 0LL;
  if (!a1)
  {
LABEL_12:
    sub_1812CF36C(97953);
    if (v8)
    {
      uint64_t v14 = 0LL;
LABEL_14:
      int v18 = (const char *)sub_18127F588(v14, "%w ", a3, (uint64_t)__s, a5, a6, a7, a8, (char)v8);
      if (v18)
      {
        BOOL v19 = v18;
        unsigned int v48 = (strlen(v18) & 0x3FFFFFFF) - 1;
        size_t v20 = v13 + *((int *)a2 + 2) * (uint64_t)(int)v48;
        size_t v21 = v20 + 1;
        if (v14)
        {
          int v17 = (char *)sub_1812F2264(v14, v20 + 1);
          if (v17)
          {
LABEL_17:
            uint64_t v51 = (void *)v14;
            __src = (char *)v19;
            uint64_t v44 = a1;
            bzero(v17, v21);
            uint64_t v22 = 0LL;
            uint64_t v47 = 0LL;
            goto LABEL_21;
          }
        }

        else
        {
          int v17 = (char *)sub_18126F0AC(v20 + 1);
          if (v17) {
            goto LABEL_17;
          }
        }

        uint64_t v41 = 7LL;
        goto LABEL_61;
      }

      return 7LL;
    }

    uint64_t v15 = (2 * v13) | 1;
    uint64_t v16 = 3 * v15;
    goto LABEL_19;
  }

void *sub_181353638( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    int v11 = *(unsigned __int16 *)(a3 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(a3 + 22) == 1)
    {
      uint64_t v12 = *(void *)(a3 + 8);
      if (!a4) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }

    if ((v11 & 1) == 0)
    {
      LOBYTE(v12) = sub_181303998((int *)a3, 1);
      if (!a4) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }

  LOBYTE(v12) = 0;
  if (!a4) {
    goto LABEL_14;
  }
LABEL_10:
  int v13 = *(unsigned __int16 *)(a4 + 20);
  if (((~v13 & 0x202) != 0 || *(_BYTE *)(a4 + 22) != 1) && (v13 & 1) == 0) {
    sub_181303998((int *)a4, 1);
  }
LABEL_14:
  uint64_t v14 = (char *)sub_18127F588(*a5, "error in %s %s%s%s: %s", a3, a4, (uint64_t)a5, a6, a7, a8, v12);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    uint64_t result = (void *)sub_181269368( *(void *)a1,  v14,  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v14) {
      return result;
    }
    return sub_1812F20DC((void *)*a5, v14);
  }

  uint64_t result = (void *)sub_1812CF36C(97407);
  if (v14) {
    return sub_1812F20DC((void *)*a5, v14);
  }
  return result;
}

void *sub_18135379C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = a1[2];
  if (v3)
  {
    if (*(_BYTE *)(v3 + 267)) {
      sub_18127A3A0((void **)a1[2]);
    }
    sub_1812CFA64(v3);
  }

  uint64_t v4 = a1[43];
  if (v4)
  {
    if (v2[102] || (int v5 = *(_DWORD *)(v4 + 44) - 1, (*(_DWORD *)(v4 + 44) = v5) == 0)) {
      sub_181311A80(v2, (void *)v4);
    }
  }

  while (1)
  {
    uint64_t v6 = a1[44];
    if (!v6) {
      break;
    }
    a1[44] = *(void *)(v6 + 40);
    sub_18130E1B0(v2, v6);
  }

  sub_18127A200(v2, a1[45]);
  uint64_t v7 = (void *)a1[1];
  if (v7) {
    sub_1812F20DC(v2, v7);
  }
  int v8 = (void *)a1[51];
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)v8[3];
      sub_1812F20DC(v2, v8);
      int v8 = v9;
    }

    while (v9);
  }

  return sub_1812DCA44(a1);
}

uint64_t sub_181353864(void *a1, unsigned __int8 *a2)
{
  if (*a2 != 167) {
    return 0LL;
  }
  if ((a2[7] & 3) != 0) {
    return 0LL;
  }
  uint64_t v2 = a1[5];
  uint64_t v4 = *((void *)a2 + 9);
  uint64_t v3 = a2 + 72;
  if (*(void *)(v2 + 16) != v4) {
    return 0LL;
  }
  uint64_t v6 = *(void **)(*a1 + 408LL);
  if (!v6) {
    return 0LL;
  }
  if ((unsigned __int8 *)*v6 != v3)
  {
    while (1)
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)v6[3];
      if (!v6) {
        return 0LL;
      }
      if ((unsigned __int8 *)*v6 == v3)
      {
        if (!v2) {
          return 0LL;
        }
        int v8 = v7 + 3;
        goto LABEL_12;
      }
    }
  }

  int v8 = (void *)(*a1 + 408LL);
LABEL_12:
  *int v8 = v6[3];
  v6[3] = *(void *)v2;
  *(void *)uint64_t v2 = v6;
  ++*(_DWORD *)(v2 + 8);
  return 0LL;
}

uint64_t sub_181353900(void *a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 6) & 0x420) != 0) {
    return 1LL;
  }
  uint64_t v3 = *(unsigned int **)(a2 + 40);
  if (!v3) {
    return 2LL;
  }
  uint64_t v4 = *v3;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = a1[5];
    do
    {
      if (*(void *)&v3[26 * v5 + 10] == *(void *)(v6 + 16))
      {
        uint64_t v8 = *(void *)&v3[26 * v5 + 6];
        if (v8)
        {
          uint64_t v9 = *(void **)(*a1 + 408LL);
          if (v9)
          {
            if (*v9 == v8)
            {
              uint64_t v7 = (void *)(*a1 + 408LL);
LABEL_7:
              *uint64_t v7 = v9[3];
              v9[3] = *(void *)v6;
              *(void *)uint64_t v6 = v9;
              ++*(_DWORD *)(v6 + 8);
            }

            else
            {
              while (1)
              {
                BOOL v10 = v9;
                uint64_t v9 = (void *)v9[3];
                if (!v9) {
                  break;
                }
                if (*v9 == v8)
                {
                  if (!v6) {
                    break;
                  }
                  uint64_t v7 = v10 + 3;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }

      ++v5;
    }

    while (v5 != v4);
  }

  sub_181323844(a1, a2);
  return 0LL;
}

uint64_t sub_1813539F0(void *a1, _BYTE *a2)
{
  if (*a2 == 117 && (a2[4] & 0x80) != 0)
  {
    uint64_t v2 = *(void **)(*a1 + 408LL);
    if (v2)
    {
      uint64_t v3 = a1[5];
      if ((_BYTE *)*v2 == a2)
      {
        uint64_t v5 = (void *)(*a1 + 408LL);
        if (v3)
        {
LABEL_8:
          *uint64_t v5 = v2[3];
          v2[3] = *(void *)v3;
          *(void *)uint64_t v3 = v2;
          ++*(_DWORD *)(v3 + 8);
          return 0LL;
        }
      }

      else
      {
        while (1)
        {
          uint64_t v4 = v2;
          uint64_t v2 = (void *)v2[3];
          if (!v2) {
            break;
          }
          if ((_BYTE *)*v2 == a2)
          {
            uint64_t v5 = v4 + 3;
            if (!v3) {
              return 0LL;
            }
            goto LABEL_8;
          }
        }
      }
    }
  }

  return 0LL;
}

void *sub_181353A78(uint64_t a1)
{
  if (!a1) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t result = *(void **)(v2 + 8);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04(a1, 8);
    if (!result) {
      return result;
    }
  }

  ++*result;
  return result;
}

void sub_181353ADC(uint64_t *a1)
{
  if (!a1)
  {
    sub_1812CF36C(98123);
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v2 = a1[1];
  if (!v2 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    goto LABEL_8;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    if (v4) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v5 = 0LL;
    goto LABEL_12;
  }

  uint64_t v4 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 8);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v5 = *v4;
LABEL_12:
  uint64_t v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v6, v5);
  }

  else
  {
    *(void *)uint64_t v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }

void *sub_181353B9C(uint64_t a1)
{
  if (!a1) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t result = *(void **)(v2 + 8);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04(a1, 24);
    if (!result) {
      return result;
    }
  }

  result[1] = 1LL;
  return result;
}

void sub_181353BFC(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 24);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = *v4;
  if (v4[1])
  {
    *uint64_t v4 = ++v5;
    v4[1] = 0LL;
  }

  uint64_t v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v6, v5);
  }

  else
  {
    *(void *)uint64_t v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }

uint64_t *sub_181353CA4(uint64_t a1)
{
  if (!a1) {
    return (uint64_t *)sub_1812CF36C(98123);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1 || !*(void *)(v1 + 32)) {
    return (uint64_t *)sub_1812CF36C(98123);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t result = *(uint64_t **)(v2 + 8);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = (uint64_t *)sub_1812D8A04(a1, 24);
    if (!result) {
      return result;
    }
  }

  uint64_t v4 = *result;
  uint64_t v5 = result[1] + 1;
  result[1] = v5;
  if (!v4) {
    *uint64_t result = v5;
  }
  return result;
}

void sub_181353D14(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 24);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = *v4;
  uint64_t v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v6, v5);
  }

  else
  {
    *(void *)uint64_t v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }

  *uint64_t v4 = 0LL;
}

void *sub_181353DB4(uint64_t a1)
{
  if (!a1) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t result = *(void **)(v2 + 8);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04(a1, 24);
    if (!result) {
      return result;
    }
  }

  ++result[2];
  return result;
}

void sub_181353E18(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04((uint64_t)a1, 24);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = v4[1];
  uint64_t v6 = v4[2];
  *uint64_t v4 = v5;
  if (v6 < 2)
  {
    uint64_t v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v8);
    }
    *(void *)uint64_t v8 = 0LL;
  }

  else
  {
    double v7 = (double)v5 / (double)(v6 - 1);
    uint64_t v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v8);
    }
    else {
      *(_WORD *)(v8 + 20) = 1;
    }
    *(double *)uint64_t v8 = v7;
  }

  *(_WORD *)(v8 + 20) = 8;
}

void *sub_181353F10(uint64_t a1)
{
  if (!a1 || (uint64_t v1 = *(void *)(a1 + 8)) == 0 || !*(void *)(v1 + 32)) {
    sub_1813C4064();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  else {
    uint64_t result = sub_1812D8A04(a1, 24);
  }
  ++result[1];
  return result;
}

void *sub_181353F60(uint64_t a1)
{
  if (!a1) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t result = *(void **)(v2 + 8);
    if (!result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04(a1, 24);
    if (!result) {
      return result;
    }
  }

  ++result[2];
  return result;
}

void sub_181353FC4(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  double v5 = (double)v4[1] / (double)v4[2];
  uint64_t v6 = *a1;
  if ((*(_WORD *)(v6 + 20) & 0x9000) != 0) {
    sub_181303888((int *)v6);
  }
  else {
    *(_WORD *)(v6 + 20) = 1;
  }
  *(double *)uint64_t v6 = v5;
  *(_WORD *)(v6 + 20) = 8;
}

void *sub_181354090(uint64_t a1)
{
  if (!a1 || (uint64_t v1 = *(void *)(a1 + 8)) == 0 || !*(void *)(v1 + 32)) {
    sub_1813C4064();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  else {
    uint64_t result = sub_1812D8A04(a1, 24);
  }
  ++result[1];
  return result;
}

uint64_t sub_1813540E0(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (!result) {
    return sub_1812CF36C(98123);
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (!v4 || !*(void *)(v4 + 32)) {
    return sub_1812CF36C(98123);
  }
  uint64_t v6 = *(void *)(result + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    double v7 = *(void **)(v6 + 8);
    if (!v7) {
      return result;
    }
  }

  else
  {
    uint64_t result = (uint64_t)sub_1812D8A04(result, 24);
    double v7 = (void *)result;
    if (!result) {
      return result;
    }
  }

  if (*v7) {
    goto LABEL_19;
  }
  uint64_t result = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89717);
    goto LABEL_16;
  }

  __int16 v8 = *(_WORD *)(result + 20);
  if ((v8 & 0x24) != 0)
  {
    uint64_t result = *(void *)result;
    goto LABEL_13;
  }

  if ((v8 & 8) == 0)
  {
    if ((v8 & 0x12) != 0)
    {
      unint64_t v9 = *(void *)(result + 8);
      if (v9)
      {
        uint64_t result = sub_181303DF0(result);
        goto LABEL_13;
      }

void sub_181354238(uint64_t *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04((uint64_t)a1, 24);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = v4[1];
  if (v5 >= 1)
  {
    uint64_t v6 = *v4 / v5;
    if ((_DWORD)v6)
    {
      uint64_t v7 = (int)v6;
      uint64_t v8 = *v4 - (int)v6 * v5;
      uint64_t v9 = (int)v6 + 1;
      uint64_t v10 = v4[2];
      if (v10 >= v8 * v9) {
        uint64_t v11 = v8 + (v10 - v8 * v9) / v7;
      }
      else {
        uint64_t v11 = v10 / v9;
      }
    }

    else
    {
      uint64_t v11 = v4[2];
    }

    uint64_t v12 = v11 + 1;
    uint64_t v13 = *a1;
    if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v13, v12);
    }

    else
    {
      *(void *)uint64_t v13 = v12;
      *(_WORD *)(v13 + 20) = 4;
    }
  }

void *sub_181354324(uint64_t a1)
{
  if (!a1 || (uint64_t v1 = *(void *)(a1 + 8)) == 0 || !*(void *)(v1 + 32)) {
    sub_1813C4064();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  else {
    uint64_t result = sub_1812D8A04(a1, 24);
  }
  ++result[2];
  return result;
}

void sub_181354374(sqlite3_context *a1, uint64_t a2, const sqlite3_value **a3)
{
  if (!a1 || (uint64_t v4 = *((void *)a1 + 1)) == 0 || !*(void *)(v4 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v6 = *((void *)a1 + 2);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(uint64_t **)(v6 + 8);
    if (!v7) {
      return;
    }
  }

  else
  {
    uint64_t v7 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 16);
    if (!v7) {
      return;
    }
  }

  uint64_t v8 = *v7;
  if (*v7)
  {
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
      sub_181303838(*v7);
    }
    sub_1812F20DC(*(void **)(v8 + 24), (void *)v8);
  }

  uint64_t v9 = sqlite3_value_dup(*a3);
  *uint64_t v7 = (uint64_t)v9;
  if (v9) {
    ++*((_DWORD *)v7 + 2);
  }
  else {
    sqlite3_result_error_nomem(a1);
  }
}

void sub_181354458(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(sqlite3_value ***)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (sqlite3_value **)sub_1812D8A04((uint64_t)a1, 16);
    if (!v4) {
      return;
    }
  }

  if (*v4)
  {
    sqlite3_result_value(a1, *v4);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if ((*((_WORD *)v5 + 10) & 0x9000) != 0 || *((_DWORD *)v5 + 8)) {
        sub_181303838((uint64_t)*v4);
      }
      sub_1812F20DC(*((void **)v5 + 3), v5);
    }

    *uint64_t v4 = 0LL;
  }

void sub_181354510(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(sqlite3_value ***)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = (sqlite3_value **)sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  if (*v4) {
    sqlite3_result_value(a1, *v4);
  }
}

void *sub_181354594(void *result)
{
  if (!result) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = result[1];
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = result[2];
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (!v3) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04((uint64_t)result, 16);
    uint64_t v3 = result;
    if (!result) {
      return result;
    }
  }

  int v4 = *((_DWORD *)v3 + 2) - 1;
  *((_DWORD *)v3 + 2) = v4;
  if (!v4)
  {
    uint64_t v5 = *v3;
    if (*v3)
    {
      if ((*(_WORD *)(v5 + 20) & 0x9000) != 0 || *(_DWORD *)(v5 + 32)) {
        sub_181303838(*v3);
      }
      uint64_t result = sub_1812F20DC(*(void **)(v5 + 24), (void *)v5);
    }

    *uint64_t v3 = 0LL;
  }

  return result;
}

void sub_181354644(uint64_t a1, uint64_t a2, const sqlite3_value **a3)
{
  if (!a1 || (uint64_t v4 = *(void *)(a1 + 8)) == 0 || !*(void *)(v4 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v6 = *(void *)(a1 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(void **)(v6 + 8);
    if (!v7) {
      return;
    }
  }

  else
  {
    uint64_t v7 = sub_1812D8A04(a1, 16);
    if (!v7) {
      return;
    }
  }

  int v8 = sqlite3_value_numeric_type(a3[1]);
  if (v8 == 2)
  {
    uint64_t v12 = (uint64_t)a3[1];
    if (v12)
    {
      __int16 v13 = *(_WORD *)(v12 + 20);
      if ((v13 & 8) != 0)
      {
        double v14 = *(double *)v12;
      }

      else if ((v13 & 0x24) != 0)
      {
        double v14 = (double)*(uint64_t *)v12;
      }

      else if ((v13 & 0x12) != 0)
      {
        double v14 = sub_181303DB8(v12);
      }

      else
      {
        double v14 = 0.0;
      }
    }

    else
    {
      sub_1812CF36C(89752);
      double v14 = 0.0;
    }
  }

  else
  {
    if (v8 != 1) {
      goto LABEL_36;
    }
    uint64_t v9 = (uint64_t)a3[1];
    if (!v9)
    {
      sub_1812CF36C(89717);
      goto LABEL_36;
    }

    __int16 v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 0x24) != 0)
    {
      uint64_t v11 = *(void *)v9;
      if (v11 < 1) {
        goto LABEL_36;
      }
      goto LABEL_24;
    }

    if ((v10 & 8) == 0)
    {
      if ((v10 & 0x12) == 0) {
        goto LABEL_36;
      }
      if (!*(void *)(v9 + 8)) {
        goto LABEL_36;
      }
      uint64_t v11 = sub_181303DF0(v9);
      if (v11 < 1) {
        goto LABEL_36;
      }
      goto LABEL_24;
    }

    double v14 = *(double *)v9;
    if (*(double *)v9 < -9.22337204e18)
    {
LABEL_36:
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368( *(void *)a1,  "second argument to nth_value must be a positive integer",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

    if (v14 > 9.22337204e18)
    {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_24;
    }
  }

  uint64_t v11 = (uint64_t)v14;
LABEL_24:
  uint64_t v15 = *v7 + 1LL;
  *uint64_t v7 = v15;
  if (v11 == v15)
  {
    uint64_t v16 = sqlite3_value_dup(*a3);
    v7[1] = v16;
    if (!v16) {
      sqlite3_result_error_nomem((sqlite3_context *)a1);
    }
  }

void sub_181354850(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04((uint64_t)a1, 0);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = (sqlite3_value *)*((void *)v4 + 1);
  if (v5)
  {
    sqlite3_result_value(a1, v5);
    uint64_t v6 = *((void *)v4 + 1);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32)) {
        sub_181303838(*((void *)v4 + 1));
      }
      sub_1812F20DC(*(void **)(v6 + 24), (void *)v6);
    }

    *((void *)v4 + 1) = 0LL;
  }

void sub_18135490C(sqlite3_context *a1, uint64_t a2, const sqlite3_value **a3)
{
  if (!a1 || (uint64_t v4 = *((void *)a1 + 1)) == 0 || !*(void *)(v4 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v6 = *((void *)a1 + 2);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(void **)(v6 + 8);
    if (!v7) {
      return;
    }
  }

  else
  {
    uint64_t v7 = sub_1812D8A04((uint64_t)a1, 16);
    if (!v7) {
      return;
    }
  }

  if (!v7[1])
  {
    int v8 = sqlite3_value_dup(*a3);
    v7[1] = v8;
    if (!v8) {
      sqlite3_result_error_nomem(a1);
    }
  }

void sub_1813549B8(sqlite3_context *a1)
{
  if (!a1 || (uint64_t v2 = *((void *)a1 + 1)) == 0 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    return;
  }

  uint64_t v3 = *((void *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4) {
      return;
    }
  }

  else
  {
    uint64_t v4 = sub_1812D8A04((uint64_t)a1, 16);
    if (!v4) {
      return;
    }
  }

  uint64_t v5 = (sqlite3_value *)*((void *)v4 + 1);
  if (v5)
  {
    sqlite3_result_value(a1, v5);
    uint64_t v6 = *((void *)v4 + 1);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32)) {
        sub_181303838(*((void *)v4 + 1));
      }
      sub_1812F20DC(*(void **)(v6 + 24), (void *)v6);
    }

    *((void *)v4 + 1) = 0LL;
  }

void sub_181354A70( uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!sub_1812C5898(a1, a2, a3, (uint64_t)v11, a5, a6, a7, a8))
  {
    sub_181355F7C((uint64_t)v11);
    if (a1)
    {
      double v9 = (double)v11[0] / 86400000.0;
      uint64_t v10 = *a1;
      if ((*(_WORD *)(v10 + 20) & 0x9000) != 0) {
        sub_181303888((int *)v10);
      }
      *(double *)uint64_t v10 = v9;
      *(_WORD *)(v10 + 20) = 8;
    }

    else
    {
      sub_1812CF36C(97397);
    }
  }

void sub_181354B04( uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!sub_1812C5898(a1, a2, a3, (uint64_t)v13, a5, a6, a7, a8))
  {
    sub_181355F7C((uint64_t)v13);
    if (v14)
    {
      if (a1)
      {
        double v9 = (double)(v13[0] - 210866760000000LL) / 1000.0;
        uint64_t v10 = *a1;
        if ((*(_WORD *)(v10 + 20) & 0x9000) != 0) {
          sub_181303888((int *)v10);
        }
        *(double *)uint64_t v10 = v9;
        *(_WORD *)(v10 + 20) = 8;
      }

      else
      {
        sub_1812CF36C(97397);
      }
    }

    else if (a1)
    {
      uint64_t v11 = v13[0] / 1000LL - 210866760000LL;
      uint64_t v12 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v12, v11);
      }

      else
      {
        *(void *)uint64_t v12 = v11;
        *(_WORD *)(v12 + 20) = 4;
      }
    }

    else
    {
      sub_1812CF36C(97441);
    }
  }

void sub_181354C24( void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!sub_1812C5898(a1, a2, a3, (uint64_t)v13, a5, a6, a7, a8))
  {
    sub_1812C6F8C((uint64_t)v13);
    if (v14 >= 0) {
      unsigned int v9 = v14;
    }
    else {
      unsigned int v9 = -v14;
    }
    v18[0] = (v9 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v9 / 0x3E8)) >> 32)) | 0x30;
    v18[1] = (v9 / 0x64 - 10 * ((429496730 * (unint64_t)(v9 / 0x64)) >> 32)) | 0x30;
    v18[2] = (v9 / 0xA - 10 * ((429496730 * (unint64_t)(v9 / 0xA)) >> 32)) | 0x30;
    v18[3] = (v9 % 0xA) | 0x30;
    v18[4] = 45;
    v18[5] = v15 / 10
    v18[6] = v15 % 10 + 48;
    v18[7] = 45;
    v18[8] = v16 / 10 % 10 + 48;
    __int16 v19 = (v16 % 10 + 48);
    if (v14 < 0)
    {
      char v17 = 45;
      if (a1)
      {
        uint64_t v10 = &v17;
        uint64_t v11 = (uint64_t)a1;
        int v12 = 11;
        goto LABEL_10;
      }
    }

    else if (a1)
    {
      uint64_t v10 = v18;
      uint64_t v11 = (uint64_t)a1;
      int v12 = 10;
LABEL_10:
      sub_1812D7A8C(v11, v10, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

    sub_1812CF36C(97498);
  }

void sub_181354DF0( void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!sub_1812C5898(a1, a2, a3, (uint64_t)v18, a5, a6, a7, a8))
  {
    if (v23)
    {
      int v10 = v19;
      int v9 = v20;
    }

    else
    {
      sub_181355F7C((uint64_t)v18);
      int v11 = (v18[0] + 43200000) % 86400000;
      double v21 = (double)(v11 % 60000) / 1000.0;
      __int16 v12 = (34953 * (__int16)(v11 / 60000)) >> 16;
      int v9 = (__int16)(v11 / 60000 - 60 * ((v12 >> 5) + ((unsigned __int16)(v12 & 0x8000) >> 15)));
      int v10 = v11 / 3600000;
      int v19 = v11 / 3600000;
      int v20 = v9;
      char v22 = 0;
      char v23 = 1;
    }

    v25[0] = v10 / 10
    v25[1] = v10 % 10 + 48;
    v25[2] = 58;
    v25[3] = v9 / 10 % 10 + 48;
    v25[4] = v9 % 10 + 48;
    v25[5] = 58;
    if (v24)
    {
      int v13 = (int)(v21 * 1000.0 + 0.5);
      int v14 = v13 / 10000;
      int v15 = v13 / 1000;
      v25[9] = v13 / 100
      v25[10] = v13 / 10
      v25[11] = v13 % 10 + 48;
      v25[12] = 0;
      int v16 = 12;
      char v17 = 46;
    }

    else
    {
      char v17 = 0;
      int v15 = (int)v21;
      int v14 = (int)v21 / 10;
      int v16 = 8;
    }

    v25[6] = v14 - 10 * (((unint64_t)(1717986919LL * v14) >> 34) + (1717986919LL * v14 < 0)) + 48;
    v25[7] = v15 % 10 + 48;
    v25[8] = v17;
    if (a1) {
      sub_1812D7A8C((uint64_t)a1, v25, v16, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sub_1812CF36C(97498);
    }
  }

void sub_18135510C( void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!sub_1812C5898(a1, a2, a3, (uint64_t)&v20, a5, a6, a7, a8))
  {
    sub_1812C6F8C((uint64_t)&v20);
    if (v28)
    {
      int v10 = v24;
      int v9 = v25;
    }

    else
    {
      sub_181355F7C((uint64_t)&v20);
      int v11 = ((int)v20 + 43200000) % 86400000;
      double v26 = (double)(v11 % 60000) / 1000.0;
      __int16 v12 = (34953 * (__int16)(v11 / 60000)) >> 16;
      int v9 = (__int16)(v11 / 60000 - 60 * ((v12 >> 5) + ((unsigned __int16)(v12 & 0x8000) >> 15)));
      int v10 = v11 / 3600000;
      int v24 = v11 / 3600000;
      int v25 = v9;
      char v27 = 0;
      char v28 = 1;
    }

    if (v21 >= 0) {
      unsigned int v13 = v21;
    }
    else {
      unsigned int v13 = -v21;
    }
    v31[0] = (v13 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v13 / 0x3E8)) >> 32)) | 0x30;
    v31[1] = (v13 / 0x64 - 10 * ((429496730 * (unint64_t)(v13 / 0x64)) >> 32)) | 0x30;
    v31[2] = (v13 / 0xA - 10 * ((429496730 * (unint64_t)(v13 / 0xA)) >> 32)) | 0x30;
    v31[3] = (v13 % 0xA) | 0x30;
    v31[4] = 45;
    v31[5] = v22 / 10
    v31[6] = v22 % 10 + 48;
    v31[7] = 45;
    v31[8] = v23 / 10
    v31[9] = v23 % 10 + 48;
    v31[10] = 32;
    v31[11] = v10 / 10
    v31[12] = v10 % 10 + 48;
    v31[13] = 58;
    v31[14] = v9 / 10 % 10 + 48;
    v31[15] = v9 % 10 + 48;
    v31[16] = 58;
    if (v29)
    {
      int v14 = (int)(v26 * 1000.0 + 0.5);
      int v15 = v14 / 10000;
      int v16 = v14 / 1000;
      v31[20] = v14 / 100
      v31[21] = v14 / 10 % 10 + 48;
      v31[22] = v14 % 10 + 48;
      v31[23] = 0;
      int v17 = 24;
      char v18 = 46;
    }

    else
    {
      char v18 = 0;
      int v16 = (int)v26;
      int v15 = (int)v26 / 10;
      int v17 = 20;
    }

    v31[17] = v15 % 10 + 48;
    v31[18] = v16 % 10 + 48;
    v31[19] = v18;
    if (v21 < 0)
    {
      char v30 = 45;
      if (a1)
      {
        int v19 = &v30;
        goto LABEL_16;
      }
    }

    else if (a1)
    {
      int v19 = v31;
      --v17;
LABEL_16:
      sub_1812D7A8C((uint64_t)a1, v19, v17, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

    sub_1812CF36C(97498);
  }

void sub_181355554( _DWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v10 = *a3;
    if (*a3)
    {
      int v12 = *(unsigned __int16 *)(v10 + 20);
      if ((~v12 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
      {
        if ((v12 & 1) != 0) {
          return;
        }
        uint64_t v13 = sub_181303998((int *)v10, 1);
        if (!v13) {
          return;
        }
      }

      else
      {
        uint64_t v13 = *(void *)(v10 + 8);
        if (!v13) {
          return;
        }
      }

      if (!sub_1812C5898(a1, a2 - 1, a3 + 1, (uint64_t)&v41, a5, a6, a7, a8))
      {
        if (!a1 || !*(void *)a1) {
          sub_1813C4034();
        }
        int v14 = *(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 136LL);
        int v35 = 0LL;
        int v36 = 0LL;
        unsigned int v37 = 0;
        int v38 = v14;
        unsigned int v39 = 0;
        __int16 v40 = 0;
        sub_181355F7C((uint64_t)&v41);
        sub_1812C6F8C((uint64_t)&v41);
        if (!BYTE11(v43))
        {
          sub_181355F7C((uint64_t)&v41);
          int v15 = ((uint64_t)v41 + 43200000) % 86400000;
          *(double *)&__int128 v43 = (double)(v15 % 60000) / 1000.0;
          __int16 v16 = (34953 * (__int16)(v15 / 60000)) >> 16;
          DWORD1(v42) = v15 / 3600000;
          DWORD2(v42) = (__int16)(v15 / 60000
                                - 60 * ((v16 >> 5) + ((unsigned __int16)(v16 & 0x8000) >> 15)));
          BYTE9(v43) = 0;
          BYTE11(v43) = 1;
        }

        unint64_t v17 = 0LL;
        for (unint64_t i = 0LL; ; ++i)
        {
          while (*(_BYTE *)(v13 + i) == 37)
          {
            signed int v19 = i - v17;
            if (i > v17)
            {
              if (v19 <= 0)
              {
                if (v19) {
                  sub_1812CF36C(32737);
                }
              }

              else
              {
                uint64_t v20 = (const void *)(v13 + v17);
                uint64_t v21 = v39;
                if (v39 + v19 >= v37)
                {
                  sub_1812D3A10((uint64_t)&v35, v20, v19);
                }

                else
                {
                  v39 += v19;
                  memcpy((char *)v36 + v21, v20, (i - v17));
                }
              }
            }

            unint64_t v22 = i + 1;
            unint64_t v17 = i + 2;
            switch(*(_BYTE *)(v13 + i + 1))
            {
              case '%':
                if ((unint64_t)v39 + 1 >= v37)
                {
                  int v23 = sub_1812D3698(&v35, 1LL);
                  if (v23 < 1) {
                    goto LABEL_16;
                  }
                }

                else
                {
                  int v23 = 1;
                }

                unsigned int v26 = v23 + 1;
                do
                {
                  uint64_t v27 = v39++;
                  *((_BYTE *)v36 + v27) = 37;
                  --v26;
                }

                while (v26 > 1);
                goto LABEL_16;
              case 'H':
              case 'M':
              case 'S':
              case 'd':
              case 'm':
                goto LABEL_15;
              case 'J':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%.16g");
                goto LABEL_16;
              case 'W':
              case 'j':
                *(_OWORD *)uint64_t v33 = v41;
                *(_OWORD *)&v33[16] = v42;
                __int128 v34 = v43;
                BYTE8(v34) = 0;
                *(void *)&v33[12] = 0x100000001LL;
                sub_181355F7C((uint64_t)v33);
                if (*(_BYTE *)(v13 + v22) == 87) {
LABEL_15:
                }
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%02d");
                else {
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%03d");
                }
                goto LABEL_16;
              case 'Y':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%04d");
                goto LABEL_16;
              case 'f':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%06.3f");
                goto LABEL_16;
              case 's':
                if (HIBYTE(v43)) {
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%.3f");
                }
                else {
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%lld");
                }
                goto LABEL_16;
              case 'w':
                uint64_t v24 = v41;
                if ((unint64_t)v39 + 1 >= v37)
                {
                  int v25 = sub_1812D3698(&v35, 1LL);
                  if (v25 < 1) {
                    goto LABEL_16;
                  }
                }

                else
                {
                  int v25 = 1;
                }

                unsigned int v28 = v25 + 1;
                do
                {
                  uint64_t v29 = v39++;
                  *((_BYTE *)v36 + v29) = (int)((v24 + 129600000) / 86400000) % 7 + 48;
                  --v28;
                }

                while (v28 > 1);
LABEL_16:
                unint64_t i = v22 + 1;
                break;
              default:
                if ((v40 & 0x400) != 0 && v36) {
                  sub_1812F20DC(v35, v36);
                }
                return;
            }
          }

          if (!*(_BYTE *)(v13 + i)) {
            break;
          }
        }

        signed int v30 = i - v17;
        if (i > v17)
        {
          if (v30 <= 0)
          {
            if (v30) {
              sub_1812CF36C(32737);
            }
          }

          else
          {
            int v31 = (const void *)(v13 + v17);
            uint64_t v32 = v39;
            if (v39 + v30 >= v37)
            {
              sub_1812D3A10((uint64_t)&v35, v31, v30);
            }

            else
            {
              v39 += v30;
              memcpy((char *)v36 + v32, v31, (i - v17));
            }
          }
        }

        sub_181349F0C(a1, (uint64_t)&v35);
      }
    }
  }

void sub_181355B04( _DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!sub_1812C5898(a1, 1, a3, (uint64_t)&v50, a5, a6, a7, a8)
    && !sub_1812C5898(a1, 1, a3 + 1, (uint64_t)&v41, v10, v11, v12, v13))
  {
    sub_1812C6F8C((uint64_t)&v50);
    if (!HIBYTE(v58))
    {
      sub_181355F7C((uint64_t)&v50);
      int v14 = (v50 + 43200000) % 86400000;
      double v56 = (double)(v14 % 60000) / 1000.0;
      __int16 v15 = (34953 * (__int16)(v14 / 60000)) >> 16;
      int v54 = v14 / 3600000;
      int v55 = (__int16)(v14 / 60000 - 60 * ((v15 >> 5) + ((unsigned __int16)(v15 & 0x8000) >> 15)));
      char v57 = 0;
      HIBYTE(v58) = 1;
    }

    sub_1812C6F8C((uint64_t)&v41);
    if (v49)
    {
      uint64_t v16 = v41;
    }

    else
    {
      sub_181355F7C((uint64_t)&v41);
      uint64_t v16 = v41;
      int v17 = (v41 + 43200000) % 86400000;
      double v46 = (double)(v17 % 60000) / 1000.0;
      __int16 v18 = (34953 * (__int16)(v17 / 60000)) >> 16;
      int v44 = v17 / 3600000;
      int v45 = (__int16)(v17 / 60000 - 60 * ((v18 >> 5) + ((unsigned __int16)(v18 & 0x8000) >> 15)));
      char v48 = 0;
      char v49 = 1;
    }

    uint64_t v19 = v50;
    if (v50 >= v16)
    {
      int v26 = v51 - v42;
      if (v51 != v42)
      {
        int v42 = v51;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      int v21 = v26 + ((v52 - v43) >> 31);
      if (v52 >= v43) {
        int v22 = v52 - v43;
      }
      else {
        int v22 = v52 - v43 + 12;
      }
      if (v22)
      {
        int v43 = v52;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      for (uint64_t i = v41; v19 < v41; uint64_t i = v41)
      {
        int v28 = v22 < 1;
        if (v22 >= 1) {
          --v22;
        }
        else {
          int v22 = 11;
        }
        if (v43-- <= 1)
        {
          --v42;
          int v43 = 12;
        }

        v21 -= v28;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      uint64_t v30 = v19 - i;
      uint64_t v31 = 43LL;
    }

    else
    {
      int v20 = v42 - v51;
      if (v42 != v51)
      {
        int v42 = v51;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      int v21 = v20 + ((v43 - v52) >> 31);
      if (v43 >= v52) {
        int v22 = v43 - v52;
      }
      else {
        int v22 = v43 - v52 + 12;
      }
      if (v22)
      {
        int v43 = v52;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      for (uint64_t j = v41; v19 > v41; uint64_t j = v41)
      {
        int v24 = v22 < 1;
        if (v22 >= 1) {
          --v22;
        }
        else {
          int v22 = 11;
        }
        int v25 = v43++;
        if (v25 >= 12)
        {
          ++v42;
          int v43 = 1;
        }

        v21 -= v24;
        char v47 = 0;
        sub_181355F7C((uint64_t)&v41);
      }

      uint64_t v30 = j - v19;
      uint64_t v31 = 45LL;
    }

    uint64_t v50 = v30 + 148699540800000LL;
    __int16 v58 = 0;
    char v59 = 0;
    sub_1812C6F8C((uint64_t)&v50);
    if (HIBYTE(v58))
    {
      int v32 = v54;
      int v33 = v55;
      double v34 = v56;
    }

    else
    {
      sub_181355F7C((uint64_t)&v50);
      int v35 = (v50 + 43200000) % 86400000;
      double v34 = (double)(v35 % 60000) / 1000.0;
      double v56 = v34;
      __int16 v36 = (34953 * (__int16)(v35 / 60000)) >> 16;
      int v33 = (__int16)(v35 / 60000 - 60 * ((v36 >> 5) + ((unsigned __int16)(v36 & 0x8000) >> 15)));
      int v32 = v35 / 3600000;
      int v54 = v32;
      int v55 = v33;
      char v57 = 0;
      HIBYTE(v58) = 1;
    }

    v37[0] = 0LL;
    v37[1] = 0LL;
    int v38 = 0;
    uint64_t v39 = 100LL;
    __int16 v40 = 0;
    sqlite3_str_appendf((sqlite3_str *)v37, "%c%04d-%02d-%02d %02d:%02d:%06.3f", v31, v21, v22, v53 - 1, v32, v33, v34);
    sub_181349F0C(a1, (uint64_t)v37);
  }

void sub_181355F64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_181355F70( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

double sub_181355F7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40)) {
    return result;
  }
  if (*(_BYTE *)(a1 + 42))
  {
    int v1 = *(_DWORD *)(a1 + 8);
    if ((v1 - 10000) >= 0xFFFFC687)
    {
      int v3 = *(_DWORD *)(a1 + 12);
      int v2 = *(_DWORD *)(a1 + 16);
      if (!*(_BYTE *)(a1 + 41)) {
        goto LABEL_6;
      }
    }

uint64_t sub_181356110(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 136LL);
  int v2 = *(_DWORD *)(a1 + 32);
  uint64_t v3 = 1LL;
  if (*(_BYTE *)(v1 + 40LL * v2) == 65)
  {
    __int16 v5 = *(_WORD *)(v1 + 40LL * v2 + 2);
    uint64_t v6 = "a generated column";
    if ((v5 & 8) == 0) {
      uint64_t v6 = "an index";
    }
    if ((v5 & 4) != 0) {
      uint64_t v7 = "a CHECK constraint";
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v8 = sqlite3_mprintf("non-deterministic use of %s() in %s", *(const char **)(*(void *)(a1 + 8) + 56LL), v7);
    *(_DWORD *)(a1 + 36) = 1;
    sub_181269368(*(void *)a1, v8, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v8) {
      return 0LL;
    }
    int v9 = (void (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v8);
      --qword_18C468B10;
      off_18C4653A8(v8);
      uint64_t v8 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return 0LL;
      }
      int v9 = (void (**)(char *))&xmmword_18C465410;
    }

    (*v9)(v8);
    return 0LL;
  }

  return v3;
}

uint64_t sub_181356258( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a1 + 5;
  if (a1[5] == 58)
  {
    uint64_t v16 = a1 + 8;
    double v17 = 0.0;
    if (a1[8] == 46)
    {
      unsigned int v20 = a1[9];
      uint64_t v19 = a1 + 9;
      char v18 = v20;
      if ((unint64_t)v20 - 58 >= 0xFFFFFFFFFFFFFFF6LL)
      {
        double v21 = 0.0;
        double v22 = 1.0;
        uint64_t v16 = v19;
        do
        {
          double v21 = (double)v18 + v21 * 10.0 + -48.0;
          double v22 = v22 * 10.0;
          unsigned int v23 = *++v16;
          char v18 = v23;
        }

        while ((unint64_t)v23 - 58 > 0xFFFFFFFFFFFFFFF5LL);
        double v17 = v21 / v22;
      }
    }
  }

  else
  {
    v31[0] = 0;
    double v17 = 0.0;
  }

  *(_WORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 43) = 1;
  int v24 = v31[1];
  *(_DWORD *)(a2 + 20) = v32[0];
  *(_DWORD *)(a2 + 24) = v24;
  *(double *)(a2 + 32) = v17 + (double)v31[0];
  do
    int v25 = *v16++;
  while ((byte_1813C6558[v25] & 1) != 0);
  *(_DWORD *)(a2 + 28) = 0;
  int v26 = *(v16 - 1);
  if (v26 == 45)
  {
    int v27 = -1;
  }

  else
  {
    if (v26 != 43)
    {
      int v28 = 0;
      if ((v26 & 0xFFFFFFDF) != 0x5A) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }

    int v27 = 1;
  }

  v16 += 5;
  int v28 = (v32[1] + 60 * v33) * v27;
  *(_DWORD *)(a2 + 28) = v28;
  do
LABEL_19:
    int v29 = *v16++;
  while ((byte_1813C6558[v29] & 1) != 0);
  *(_BYTE *)(a2 + 45) = 1;
  int v26 = *(v16 - 1);
LABEL_21:
  if (!v26)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a2 + 44) = v28 != 0;
    return result;
  }

  return 1LL;
}

uint64_t sub_181356430( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = 0LL;
  uint64_t v19 = (int **)&a9;
  while (1)
  {
    int v11 = *a2;
    if (v11 != 48) {
      break;
    }
    int v12 = 0;
LABEL_9:
    if (!a2[3])
    {
      **uint64_t v19 = v12;
      return (result + 1);
    }

    if (a2[3] != *a1) {
      return result;
    }
    char v18 = v19++;
    **char v18 = v12;
    ++a1;
    uint64_t result = (result + 1);
    a2 += 4;
  }

  int v12 = 0;
  int v13 = v11 - 49;
  uint64_t v14 = (uint64_t)&a1[v13 + 1];
  while (1)
  {
    uint64_t v15 = *a1;
    int v12 = (char)v15 + 10 * v12 - 48;
    ++a1;
    if (v13-- == 0)
    {
      a1 = (unsigned __int8 *)v14;
      goto LABEL_9;
    }
  }

uint64_t sub_181356520(uint64_t a1, uint64_t a2)
{
  v4.n128_f64[0] = sub_181355F7C(a1);
  if ((unint64_t)(*(void *)a1 - 0xC1BC387B0A01LL) > 0xFFFFFE0C05D817FELL)
  {
    time_t v20 = *(void *)a1 / 0x3E8uLL - 210866760000LL;
    int v11 = 1900;
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a1 + 16);
    __int128 v16 = *(_OWORD *)a1;
    __int128 v17 = v5;
    __int128 v18 = *(_OWORD *)(a1 + 32);
    sub_1812C6F8C((uint64_t)&v16);
    if (!BYTE11(v18))
    {
      sub_181355F7C((uint64_t)&v16);
      int v6 = ((int)v16 + 43200000) % 86400000;
      *(double *)&__int128 v18 = (double)(v6 % 60000) / 1000.0;
      __int16 v7 = (34953 * (__int16)(v6 / 60000)) >> 16;
      DWORD1(v17) = v6 / 3600000;
      DWORD2(v17) = (__int16)(v6 / 60000 - 60 * ((v7 >> 5) + ((unsigned __int16)(v7 & 0x8000) >> 15)));
      BYTE9(v18) = 0;
      BYTE11(v18) = 1;
    }

    if (SDWORD2(v16) <= 0) {
      int v8 = -(-DWORD2(v16) & 3);
    }
    else {
      int v8 = BYTE8(v16) & 3;
    }
    int v9 = v8 + 2000;
    int v10 = DWORD2(v16) - v9;
    DWORD2(v16) = v9;
    BYTE8(v18) = 0;
    v4.n128_f64[0] = sub_181355F7C((uint64_t)&v16);
    time_t v20 = (uint64_t)v16 / 1000 - 210866760000LL;
    int v11 = v10 + 1900;
  }

  if (dword_18C465528)
  {
  }

  else if (localtime_r(&v20, &v19))
  {
LABEL_12:
    uint64_t v12 = 0LL;
    uint64_t v13 = *(void *)a1 % 1000LL;
    int v14 = v19.tm_mon + 1;
    *(_DWORD *)(a1 + 8) = v11 + v19.tm_year;
    *(_DWORD *)(a1 + 12) = v14;
    *(int32x2_t *)(a1 + 16) = vrev64_s32(*(int32x2_t *)&v19.tm_hour);
    *(_DWORD *)(a1 + 24) = v19.tm_min;
    *(double *)(a1 + 32) = (double)v19.tm_sec + (double)v13 * 0.001;
    *(_DWORD *)(a1 + 40) = 16842752;
    *(_BYTE *)(a1 + 44) = 0;
    *(_BYTE *)(a1 + 46) = 0;
    return v12;
  }

  if (a2)
  {
    uint64_t v12 = 1LL;
    *(_DWORD *)(a2 + 36) = 1;
    sub_181269368( *(void *)a2,  "local time unavailable",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  else
  {
    sub_1812CF36C(97407);
    return 1LL;
  }

  return v12;
}

void sub_18135680C(sqlite3_context *a1, int a2, uint64_t *a3)
{
  if (a2 >= 1)
  {
    uint64_t v6 = sub_181358628((uint64_t)a1, *a3, a1, a2 != 1);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a2 < 2)
      {
LABEL_16:
        uint64_t v14 = *(void *)(v7 + 8);
        if ((*(_BYTE *)(v14 + 1) & 4) == 0) {
          sub_181358CC8(v7, v14, a1, 1);
        }
      }

      else
      {
        int v8 = a3 + 1;
        uint64_t v9 = a2 - 1LL;
        while (1)
        {
          uint64_t v10 = *v8;
          if (!*v8) {
            break;
          }
          int v11 = *(unsigned __int16 *)(v10 + 20);
          if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
          {
            if ((v11 & 1) != 0) {
              return;
            }
            uint64_t v12 = (char *)sub_181303998((int *)v10, 1);
          }

          else
          {
            uint64_t v12 = *(char **)(v10 + 8);
          }

          if (!v12) {
            break;
          }
          uint64_t v13 = sub_181358B7C(v7, v12, 0LL, (uint64_t)a1);
          if (*(_BYTE *)(v7 + 50)) {
            break;
          }
          if (v13)
          {
            *(_BYTE *)(v13 + 1) |= 4u;
            *(_WORD *)(v7 + 54) = 257;
          }

          ++v8;
          if (!--v9) {
            goto LABEL_16;
          }
        }
      }
    }
  }

void sub_181356924(void *a1, int a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v9 = a1;
  uint64_t v10 = &v13;
  unint64_t v4 = 1LL;
  __int16 v12 = 1;
  __int128 v11 = xmmword_1813CDE00;
  char v13 = 91;
  if (a2 < 1) {
    goto LABEL_10;
  }
  uint64_t v6 = a2;
  unint64_t v4 = 1LL;
  do
  {
    if (v4 && (v10[v4 - 1] & 0xDF) != 0x5B)
    {
      if (v4 < (unint64_t)v11)
      {
        *((void *)&v11 + 1) = v4 + 1;
        v10[v4] = 44;
      }

      else
      {
        sub_18135BB8C((uint64_t)&v9, 44);
      }
    }

    uint64_t v7 = *a3++;
    sub_18135BCA0(&v9, v7);
    unint64_t v4 = *((void *)&v11 + 1);
    --v6;
  }

  while (v6);
  if (*((void *)&v11 + 1) >= (unint64_t)v11)
  {
    sub_18135BB8C((uint64_t)&v9, 93);
  }

  else
  {
LABEL_10:
    *((void *)&v11 + 1) = v4 + 1;
    v10[v4] = 93;
  }

  sub_18135B44C((uint64_t)&v9);
  if (a1)
  {
    uint64_t v8 = *a1;
    *(_BYTE *)(v8 + 23) = 74;
    *(_WORD *)(v8 + 20) |= 0x800u;
  }

  else
  {
    sub_1812CF36C(97481);
  }

void sub_181356A80(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = sub_181358628((uint64_t)a1, *a3, a1, 0);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (a2 != 2)
  {
    uint64_t v11 = *(void *)(v6 + 8);
    if (!v11) {
      return;
    }
    goto LABEL_13;
  }

  uint64_t v8 = a3[1];
  if (!v8) {
    goto LABEL_11;
  }
  int v9 = *(unsigned __int16 *)(v8 + 20);
  if ((~v9 & 0x202) == 0 && *(_BYTE *)(v8 + 22) == 1)
  {
    uint64_t v10 = *(char **)(v8 + 8);
    goto LABEL_12;
  }

  if ((v9 & 1) != 0) {
LABEL_11:
  }
    uint64_t v10 = 0LL;
  else {
    uint64_t v10 = (char *)sub_181303998((int *)v8, 1);
  }
LABEL_12:
  uint64_t v11 = sub_181358B7C(v7, v10, 0LL, (uint64_t)a1);
  if (!v11) {
    return;
  }
LABEL_13:
  if (*(_BYTE *)v11 == 7)
  {
    uint64_t v12 = 0LL;
    unsigned int v13 = *(_DWORD *)(v11 + 4);
    if (!v13) {
      goto LABEL_22;
    }
LABEL_15:
    for (unsigned int i = 1; i <= v13; unsigned int i = v15 + v16)
    {
      uint64_t v16 = i;
      __int128 v17 = (unsigned __int8 *)(v11 + 16LL * i);
      if ((v17[1] & 4) == 0) {
        ++v12;
      }
      if (*v17 >= 7u) {
        int v15 = *(_DWORD *)(v11 + 16 * v16 + 4) + 1;
      }
      else {
        int v15 = 1;
      }
    }

void sub_181356C08(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v5 = *a3;
  }

  uint64_t v6 = sub_181358628((uint64_t)a1, v5, 0LL, 0);
  if (!v6)
  {
    sqlite3_result_error_nomem(a1);
    return;
  }

  uint64_t v7 = v6;
  if (!*(_BYTE *)(v6 + 51))
  {
    if (!*(_BYTE *)(v6 + 50))
    {
      if (a1)
      {
        uint64_t v11 = *(void *)a1;
        if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
        {
          sub_1813040AC(v11, 0LL);
        }

        else
        {
          *(void *)uint64_t v11 = 0LL;
          *(_WORD *)(v11 + 20) = 4;
        }
      }

      else
      {
        sub_1812CF36C(97431);
      }

      return;
    }

    int v9 = (int *)*a3;
    if (*a3)
    {
      int v10 = *((unsigned __int16 *)v9 + 10);
      if ((~v10 & 0x202) != 0 || *((_BYTE *)v9 + 22) != 1)
      {
        if ((v10 & 1) != 0) {
          int v9 = 0LL;
        }
        else {
          int v9 = (int *)sub_181303998(v9, 1);
        }
      }

      else
      {
        int v9 = (int *)*((void *)v9 + 1);
      }
    }

    uint64_t v12 = *(unsigned int *)(v7 + 68);
    if ((_DWORD)v12)
    {
      unsigned int v13 = 1;
      do
      {
        int v15 = *(unsigned __int8 *)v9;
        int v9 = (int *)((char *)v9 + 1);
        char v14 = v15;
        if (!v15) {
          break;
        }
        if ((v14 & 0xC0) != 0x80) {
          ++v13;
        }
        --v12;
      }

      while (v12);
      if (a1) {
        goto LABEL_33;
      }
    }

    else
    {
      unsigned int v13 = 1;
      if (a1)
      {
LABEL_33:
        uint64_t v16 = *(void *)a1;
        if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
        {
          sub_1813040AC(v16, v13);
        }

        else
        {
          *(void *)uint64_t v16 = v13;
          *(_WORD *)(v16 + 20) = 4;
        }

        goto LABEL_38;
      }
    }

    sub_1812CF36C(97431);
LABEL_38:
    unsigned int v17 = *(_DWORD *)(v7 + 56);
    if (v17 >= 2)
    {
      *(_DWORD *)(v7 + 56) = v17 - 1;
      return;
    }

    sub_181359E08(v7);
    goto LABEL_8;
  }

  sqlite3_result_error_nomem(a1);
LABEL_8:
  uint64_t v8 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v8)(v7);
    return;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v8 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_13;
  }

void sub_181356E54(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (a1 && (uint64_t v6 = *((void *)a1 + 1)) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (a2 < 2) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    LOBYTE(v7) = 0;
    if (a2 < 2) {
      return;
    }
  }

  uint64_t v8 = sub_181358628((uint64_t)a1, *a3, a1, 0);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a2 == 2)
  {
    uint64_t v10 = a3[1];
    if (!v10) {
      return;
    }
    int v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
    {
      if ((v11 & 1) != 0) {
        return;
      }
      uint64_t v12 = (char *)sub_181303998((int *)v10, 1);
    }

    else
    {
      uint64_t v12 = *(char **)(v10 + 8);
    }

    if (!v12) {
      return;
    }
    if ((v7 & 3) == 0)
    {
      uint64_t v32 = sub_181358B7C(v9, v12, 0LL, (uint64_t)a1);
      if (!*(_BYTE *)(v9 + 50) && v32) {
        sub_18135C07C(v9, v32, a1);
      }
      return;
    }

    if (*v12 == 36)
    {
      int v22 = v12[1];
      if (!v12[1] || v22 == 46 || v22 == 91)
      {
        uint64_t v23 = sub_181358B7C(v9, v12, 0LL, (uint64_t)a1);
        goto LABEL_82;
      }
    }

    int v38 = a1;
    uint64_t v39 = v42;
    __int128 v40 = xmmword_1813CDE10;
    __int16 v41 = 1;
    uint64_t v28 = *v12;
    if ((unint64_t)(v28 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
    {
      sub_18135B5F4(&v38, "$[", 2uLL);
      size_t v33 = strlen(v12);
      sub_18135B650(&v38, v12, v33);
      sub_18135B5F4(&v38, "]", 2uLL);
    }

    else
    {
      if ((_DWORD)v28 == 91) {
        size_t v29 = 1LL;
      }
      else {
        size_t v29 = 2LL;
      }
      sub_18135B5F4(&v38, "$.", v29);
      size_t v30 = strlen(v12);
      sub_18135B650(&v38, v12, v30);
      uint64_t v31 = *((void *)&v40 + 1);
      if (*((void *)&v40 + 1) >= (unint64_t)v40)
      {
        sub_18135BB8C((uint64_t)&v38, 0);
      }

      else
      {
        ++*((void *)&v40 + 1);
        v39[v31] = 0;
      }
    }

    if (HIBYTE(v41)) {
      uint64_t v23 = 0LL;
    }
    else {
      uint64_t v23 = sub_181358B7C(v9, v39, 0LL, (uint64_t)a1);
    }
    if (!(_BYTE)v41)
    {
      int v35 = v39 - 8;
      unint64_t v34 = *((void *)v39 - 1);
      if (v34 < 2)
      {
        __int16 v36 = (void (**)(char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v35);
          --qword_18C468B10;
          off_18C4653A8(v35);
          int v35 = (char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_81;
          }
          __int16 v36 = (void (**)(char *))&xmmword_18C465410;
        }

        (*v36)(v35);
      }

      else
      {
        *(void *)int v35 = v34 - 1;
      }
    }

void sub_181357480(sqlite3_context *a1, int a2, uint64_t *a3)
{
  if (a1 && (uint64_t v6 = *((void *)a1 + 1)) != 0)
  {
    BOOL v7 = *(void *)(v6 + 8) != 0LL;
    if (a2 < 1) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    BOOL v7 = 0;
    if (a2 < 1) {
      return;
    }
  }

  if ((a2 & 1) == 0)
  {
    if (v7) {
      uint64_t v8 = "set";
    }
    else {
      uint64_t v8 = "insert";
    }
    sub_18135C8B0((uint64_t)a1, v8);
    return;
  }

  uint64_t v9 = sub_181358628((uint64_t)a1, *a3, a1, a2 > 1);
  if (!v9) {
    return;
  }
  uint64_t v10 = v9;
  ++*(_DWORD *)(v9 + 56);
  if (a2 < 2)
  {
LABEL_30:
    sub_181358CC8(v10, *(void *)(v10 + 8), a1, 1);
    goto LABEL_32;
  }

  uint64_t v11 = 0LL;
  while (1)
  {
    uint64_t v13 = a3[v11 + 1];
    if (!v13) {
      goto LABEL_21;
    }
    int v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) == 0 && *(_BYTE *)(v13 + 22) == 1)
    {
      uint64_t v15 = *(char **)(v13 + 8);
      goto LABEL_22;
    }

    if ((v14 & 1) != 0) {
LABEL_21:
    }
      uint64_t v15 = 0LL;
    else {
      uint64_t v15 = (char *)sub_181303998((int *)v13, 1);
    }
LABEL_22:
    int v20 = 0;
    *(_BYTE *)(v10 + 54) = 1;
    uint64_t v16 = sub_181358B7C(v10, v15, &v20, (uint64_t)a1);
    if (*(_BYTE *)(v10 + 51)) {
      break;
    }
    if (*(_BYTE *)(v10 + 50)) {
      goto LABEL_32;
    }
    if (v16)
    {
      int v17 = v20 || v7;
      if (v17 == 1) {
        sub_18135C9BC( (uint64_t)a1,  (unsigned int *)v10,  (unint64_t)(v16 - *(void *)(v10 + 8)) >> 4,  a3[v11 + 2]);
      }
    }

    unint64_t v12 = v11 + 3;
    v11 += 2LL;
  }

  sqlite3_result_error_nomem(a1);
LABEL_32:
  unsigned int v18 = *(_DWORD *)(v10 + 56);
  if (v18 >= 2)
  {
    *(_DWORD *)(v10 + 56) = v18 - 1;
    return;
  }

  sub_181359E08(v10);
  uint64_t v19 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
    --qword_18C468B10;
    off_18C4653A8(v10);
    uint64_t v10 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v19 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_39;
    }
  }

  else
  {
LABEL_39:
    (*v19)(v10);
  }

void sub_1813576FC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368( *(void *)a1,  "json_object() requires an even number of arguments",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      sub_1812CF36C(97407);
    }

    return;
  }

  uint64_t v20 = a1;
  uint64_t v21 = &v24;
  uint64_t v5 = 1LL;
  __int16 v23 = 1;
  __int128 v22 = xmmword_1813CDE00;
  char v24 = 123;
  if (a2 < 1)
  {
LABEL_43:
    *((void *)&v22 + 1) = v5 + 1;
    v21[v5] = 125;
    goto LABEL_44;
  }

  uint64_t v7 = 0LL;
  do
  {
    uint64_t v8 = *(void *)(a3 + 8 * v7);
    if (!v8)
    {
      sub_1812CF36C(97220);
LABEL_39:
      if (a1)
      {
        *(_DWORD *)(a1 + 36) = 1;
        sub_181269368( *(void *)a1,  "json_object() labels must be TEXT",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if ((_BYTE)v23) {
          return;
        }
      }

      else
      {
        sub_1812CF36C(97407);
        if ((_BYTE)v23) {
          return;
        }
      }

      unsigned int v18 = v21 - 8;
      unint64_t v17 = *((void *)v21 - 1);
      if (v17 >= 2)
      {
        *(void *)unsigned int v18 = v17 - 1;
        return;
      }

      uint64_t v19 = (uint64_t (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
        --qword_18C468B10;
        off_18C4653A8(v18);
        unsigned int v18 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return;
        }
        uint64_t v19 = (uint64_t (**)(char *))&xmmword_18C465410;
      }

      (*v19)(v18);
      return;
    }

    if (((0x4000000040004uLL >> *(_WORD *)(v8 + 20)) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v9 = *((void *)&v22 + 1);
    if (!*((void *)&v22 + 1) || (v21[*((void *)&v22 + 1) - 1] & 0xDF) == 0x5B) {
      goto LABEL_12;
    }
    if (*((void *)&v22 + 1) < (unint64_t)v22)
    {
      ++*((void *)&v22 + 1);
      v21[v9] = 44;
LABEL_12:
      uint64_t v10 = *(void *)(a3 + 8 * v7);
      if (!v10) {
        goto LABEL_30;
      }
      goto LABEL_13;
    }

    sub_18135BB8C((uint64_t)&v20, 44);
    uint64_t v10 = *(void *)(a3 + 8 * v7);
    if (!v10)
    {
LABEL_30:
      unint64_t v12 = 0LL;
LABEL_31:
      sub_1812CF36C(91138);
LABEL_32:
      unsigned int v14 = 0;
      goto LABEL_33;
    }

void sub_181357B28(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&v13[102] = *MEMORY[0x1895F89C0];
  uint64_t v5 = sub_181358628((uint64_t)a1, *a3, a1, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    *(_BYTE *)(v5 + 55) = 1;
    uint64_t v7 = sub_181358628((uint64_t)a1, a3[1], a1, 1);
    if (v7)
    {
      *(_BYTE *)(v6 + 54) = 1;
      *(_BYTE *)(v7 + 54) = 1;
      uint64_t v8 = sub_18135D080((unsigned int *)v6, 0, *(void *)(v7 + 8));
      if (v8 && !*(_BYTE *)(v6 + 51))
      {
        if (!*(_BYTE *)(v6 + 50))
        {
          v10[0] = a1;
          v10[1] = v13;
          __int128 v11 = xmmword_1813CDE10;
          __int16 v12 = 1;
          sub_18135A944(v6, (uint64_t)v8, v10);
          sub_18135B44C((uint64_t)v10);
          if (a1)
          {
            uint64_t v9 = *(void *)a1;
            *(_BYTE *)(v9 + 23) = 74;
            *(_WORD *)(v9 + 20) |= 0x800u;
          }

          else
          {
            sub_1812CF36C(97481);
          }
        }
      }

      else
      {
        sqlite3_result_error_nomem(a1);
      }
    }
  }

void sub_181357C80(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&v8[102] = *MEMORY[0x1895F89C0];
  v5[0] = a1;
  v5[1] = v8;
  __int128 v6 = xmmword_1813CDE10;
  __int16 v7 = 1;
  sub_18135BCA0(v5, *a3);
  sub_18135B44C((uint64_t)v5);
  if (a1)
  {
    uint64_t v4 = *a1;
    *(_BYTE *)(v4 + 23) = 74;
    *(_WORD *)(v4 + 20) |= 0x800u;
  }

  else
  {
    sub_1812CF36C(97481);
  }

void sub_181357D30(sqlite3_context *a1, unsigned int a2, uint64_t *a3)
{
  if ((int)a2 >= 1)
  {
    if ((a2 & 1) == 0)
    {
      sub_18135C8B0((uint64_t)a1, "replace");
      return;
    }

    uint64_t v6 = sub_181358628((uint64_t)a1, *a3, a1, a2 > 1);
    if (v6)
    {
      uint64_t v7 = v6;
      ++*(_DWORD *)(v6 + 56);
      if (a2 >= 2)
      {
        uint64_t v8 = 0LL;
        while (1)
        {
          uint64_t v10 = a3[v8 + 1];
          if (!v10) {
            break;
          }
          int v11 = *(unsigned __int16 *)(v10 + 20);
          if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
          {
            if ((v11 & 1) != 0) {
              break;
            }
            __int16 v12 = (char *)sub_181303998((int *)v10, 1);
          }

          else
          {
            __int16 v12 = *(char **)(v10 + 8);
          }

void sub_181357F40(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = sub_181358628((uint64_t)a1, *a3, a1, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2 != 2)
    {
      int v11 = *(unsigned __int8 **)(v6 + 8);
      if (!v11) {
        return;
      }
LABEL_8:
      if (a1) {
        sub_1812D7A8C((uint64_t)a1, off_189B6EAD8[*v11], -1, 1u, 0LL);
      }
      else {
        sub_1812CF36C(97498);
      }
      return;
    }

    uint64_t v8 = a3[1];
    if (!v8) {
      goto LABEL_12;
    }
    int v9 = *(unsigned __int16 *)(v8 + 20);
    if ((~v9 & 0x202) == 0 && *(_BYTE *)(v8 + 22) == 1)
    {
      uint64_t v10 = *(char **)(v8 + 8);
      goto LABEL_13;
    }

    if ((v9 & 1) != 0) {
LABEL_12:
    }
      uint64_t v10 = 0LL;
    else {
      uint64_t v10 = (char *)sub_181303998((int *)v8, 1);
    }
LABEL_13:
    int v11 = (unsigned __int8 *)sub_181358B7C(v7, v10, 0LL, (uint64_t)a1);
    if (!v11) {
      return;
    }
    goto LABEL_8;
  }

void sub_181358038(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v4 + 20)) & 1) != 0) {
      return;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v4 = *a3;
  }

  uint64_t v6 = (_BYTE *)sub_181358628((uint64_t)a1, v4, 0LL, 0);
  if (!v6)
  {
    sqlite3_result_error_nomem(a1);
    return;
  }

  uint64_t v7 = (uint64_t)v6;
  if (v6[51])
  {
    sqlite3_result_error_nomem(a1);
    goto LABEL_8;
  }

  if (v6[50])
  {
    BOOL v9 = 0LL;
    if (!a1) {
      goto LABEL_24;
    }
LABEL_20:
    uint64_t v10 = *(void *)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
    {
      sub_1813040AC(v10, v9);
    }

    else
    {
      *(void *)uint64_t v10 = v9;
      *(_WORD *)(v10 + 20) = 4;
    }

    goto LABEL_25;
  }

  if (v6[53])
  {
    BOOL v9 = v6[54] != 0;
    if (a1) {
      goto LABEL_20;
    }
  }

  else
  {
    BOOL v9 = 1LL;
    if (a1) {
      goto LABEL_20;
    }
  }

void *sub_1813581EC(void *result, uint64_t a2, uint64_t *a3)
{
  if (!result) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (!v4 || !*(void *)(v4 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v6 = result[2];
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (!v7) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04((uint64_t)result, 136);
    uint64_t v7 = (uint64_t)result;
    if (!result) {
      return result;
    }
  }

  uint64_t v8 = *(void *)(v7 + 8);
  if (v8)
  {
    unint64_t v9 = *(void *)(v7 + 24);
    if (v9 >= 2)
    {
      if (v9 >= *(void *)(v7 + 16))
      {
        sub_18135BB8C(v7, 44);
      }

      else
      {
        *(void *)(v7 + 24) = v9 + 1;
        *(_BYTE *)(v8 + v9) = 44;
      }
    }
  }

  else
  {
    *(_WORD *)(v7 + 33) = 23296;
    *(void *)(v7 + 8) = v7 + 34;
    *(_BYTE *)(v7 + 32) = 1;
    *(_OWORD *)(v7 + 16) = xmmword_1813CDE00;
  }

  *(void *)uint64_t v7 = v3;
  return sub_18135BCA0((void *)v7, *a3);
}

void sub_1813582EC(sqlite3_context *a1)
{
}

void sub_1813582F4(sqlite3_context *a1)
{
}

void *sub_1813582FC(void *result)
{
  if (!result) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v1 = result[1];
  if (!v1 || !*(void *)(v1 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v2 = result[2];
  if (*(__int16 *)(v2 + 20) < 0)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (!v3) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04((uint64_t)result, 0);
    uint64_t v3 = result;
    if (!result) {
      return result;
    }
  }

  unint64_t v4 = v3[3];
  if (v4 < 2)
  {
LABEL_29:
    v3[3] = 1LL;
  }

  else
  {
    BOOL v5 = 0;
    int v6 = 0;
    uint64_t v7 = v3[1];
    uint64_t v8 = 1LL;
    unsigned int v9 = 1;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v7 + v8);
      BOOL v11 = v10 == 44 && !v5;
      if (v11 && v6 == 0) {
        break;
      }
      if ((v10 & 0xFFFFFFDF) == 0x5B) {
        int v13 = v6 + 1;
      }
      else {
        int v13 = v6;
      }
      int v14 = v13 - ((v10 & 0xFFFFFFDF) == 93);
      if (v5) {
        int v14 = v6;
      }
      BOOL v15 = v5;
      if (v10 == 34)
      {
        int v14 = v6;
        BOOL v15 = !v5;
      }

      if (v10 == 92)
      {
        ++v9;
      }

      else
      {
        int v6 = v14;
        BOOL v5 = v15;
      }

      uint64_t v8 = ++v9;
      if (v4 <= v9) {
        goto LABEL_29;
      }
    }

    unint64_t v16 = v4 - v8;
    v3[3] = v16;
    uint64_t result = memmove((void *)(v7 + 1), (const void *)(v7 + v9 + 1), v16 - 1);
    *(_BYTE *)(v7 + v3[3]) = 0;
  }

  return result;
}

void *sub_181358424(void *result, uint64_t a2, uint64_t *a3)
{
  if (!result) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (!v4 || !*(void *)(v4 + 32)) {
    return (void *)sub_1812CF36C(98123);
  }
  uint64_t v6 = result[2];
  if (*(__int16 *)(v6 + 20) < 0)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (!v7) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812D8A04((uint64_t)result, 136);
    uint64_t v7 = (uint64_t)result;
    if (!result) {
      return result;
    }
  }

  uint64_t v8 = *(void *)(v7 + 8);
  if (v8)
  {
    unint64_t v9 = *(void *)(v7 + 24);
    if (v9 >= 2)
    {
      if (v9 >= *(void *)(v7 + 16))
      {
        sub_18135BB8C(v7, 44);
      }

      else
      {
        *(void *)(v7 + 24) = v9 + 1;
        *(_BYTE *)(v8 + v9) = 44;
      }
    }
  }

  else
  {
    *(_WORD *)(v7 + 33) = 31488;
    *(void *)(v7 + 8) = v7 + 34;
    *(_BYTE *)(v7 + 32) = 1;
    *(_OWORD *)(v7 + 16) = xmmword_1813CDE00;
  }

  *(void *)uint64_t v7 = v3;
  uint64_t v10 = *a3;
  if (*a3)
  {
    int v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(v10 + 22) == 1)
    {
      __int16 v12 = *(unsigned __int8 **)(v10 + 8);
      __int16 v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0)
      {
LABEL_32:
        if (*(_BYTE *)(v10 + 22) == 1)
        {
          unsigned int v14 = *(_DWORD *)(v10 + 16);
          goto LABEL_27;
        }
      }

void sub_181358618(sqlite3_context *a1)
{
}

void sub_181358620(sqlite3_context *a1)
{
}

uint64_t sub_181358628(uint64_t a1, uint64_t a2, sqlite3_context *a3, int a4)
{
  if (!a2)
  {
    unsigned __int16 v10 = 25602;
    goto LABEL_10;
  }

  int v8 = *(unsigned __int16 *)(a2 + 20);
  if ((~v8 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
  {
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = 0LL;
      if ((v8 & 2) == 0) {
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v9 = (const void *)sub_181303998((int *)a2, 1);
      LOWORD(v8) = *(_WORD *)(a2 + 20);
      if ((v8 & 2) == 0) {
        goto LABEL_15;
      }
    }
  }

  else
  {
    unint64_t v9 = *(const void **)(a2 + 8);
    if ((v8 & 2) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) != 0)
      {
        int v11 = *(_DWORD *)(a2 + 16);
        if ((v8 & 0x400) != 0) {
          v11 += *(_DWORD *)a2;
        }
        if (!v9) {
          return 0LL;
        }
      }

      else if ((v8 & 1) != 0)
      {
        int v11 = 0;
        if (!v9) {
          return 0LL;
        }
      }

      else
      {
        __int16 v12 = v9;
        int v13 = sub_181303970(a2, 1);
        unint64_t v9 = v12;
        int v11 = v13;
        if (!v12) {
          return 0LL;
        }
      }

      goto LABEL_22;
    }
  }

  if (*(_BYTE *)(a2 + 22) != 1) {
    goto LABEL_15;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if (!v9) {
    return 0LL;
  }
LABEL_22:
  char v49 = a3;
  unsigned int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0LL;
  size_t v18 = v11;
  unsigned int v19 = -1;
  while (1)
  {
    if (!a1)
    {
      int v26 = v9;
      size_t v27 = v18;
      sub_1812CF36C(98151);
      size_t v18 = v27;
      unint64_t v9 = v26;
      int v15 = 0;
      unsigned int v14 = 0;
      goto LABEL_53;
    }

    uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 384LL);
    if (!v20) {
      break;
    }
    while (*(_DWORD *)(v20 + 4) != v16 - 429938)
    {
      uint64_t v20 = *(void *)(v20 + 24);
      if (!v20) {
        goto LABEL_47;
      }
    }

    uint64_t v21 = *(void *)(v20 + 8);
    if (!v21) {
      break;
    }
    if (v17) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(v21 + 60) != v11) {
      goto LABEL_106;
    }
    if (a4 && *(_BYTE *)(v21 + 55))
    {
LABEL_30:
      if (*(_DWORD *)(v21 + 76) < v19)
      {
        int v15 = v16;
        unsigned int v19 = *(_DWORD *)(v21 + 76);
      }

      goto LABEL_32;
    }

    __int128 v22 = *(const void **)(v21 + 16);
    if (v22 == v9 || (v45 = v18, v47 = v9, v23 = memcmp(v22, v9, v18), v18 = v45, unint64_t v9 = v47, !v23))
    {
      *(_BYTE *)(v21 + 50) = 0;
      *(_BYTE *)(v21 + 54) = 0;
      uint64_t v17 = v21;
    }

    else
    {
LABEL_106:
      if (a4) {
        goto LABEL_30;
      }
      char v24 = *(const void **)(v21 + 24);
      if (!v24) {
        goto LABEL_30;
      }
      if (*(_DWORD *)(v21 + 64) != v11) {
        goto LABEL_30;
      }
      size_t v46 = v18;
      char v48 = v9;
      int v25 = memcmp(v24, v9, v18);
      size_t v18 = v46;
      unint64_t v9 = v48;
      if (v25) {
        goto LABEL_30;
      }
      *(_BYTE *)(v21 + 50) = 0;
      *(_BYTE *)(v21 + 54) = 1;
      uint64_t v17 = v21;
    }

uint64_t sub_181358B7C(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int16 v10 = 0LL;
  if (!a2) {
    return 0LL;
  }
  if (*a2 != 36 || (uint64_t result = sub_18135A250(a1, 0, a2 + 1, a3, &v10), (a2 = v10) != 0LL))
  {
    ++*(_BYTE *)(a1 + 50);
    uint64_t v7 = sqlite3_mprintf("JSON path error near '%q'", a2);
    if (v7)
    {
      int v8 = v7;
      if (a4)
      {
        *(_DWORD *)(a4 + 36) = 1;
        sub_181269368(*(void *)a4, v7, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }

      else
      {
        sub_1812CF36C(97407);
      }

      unint64_t v9 = (uint64_t (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
        --qword_18C468B10;
        off_18C4653A8(v8);
        int v8 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return 0LL;
        }
        unint64_t v9 = (uint64_t (**)(char *))&xmmword_18C465410;
      }

      (*v9)(v8);
    }

    else
    {
      sqlite3_result_error_nomem((sqlite3_context *)a4);
    }

    return 0LL;
  }

  return result;
}

void sub_181358CC8(uint64_t a1, uint64_t a2, sqlite3_context *a3, int a4)
{
  *(void *)&v16[102] = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 51))
  {
    sqlite3_result_error_nomem(a3);
  }

  else if (!*(_BYTE *)(a1 + 50))
  {
    __int16 v12 = a3;
    int v13 = v16;
    __int128 v14 = xmmword_1813CDE10;
    __int16 v15 = 1;
    sub_18135A944(a1, a2, &v12);
    if (a4 && !*(void *)(a1 + 24))
    {
      uint64_t v7 = *((void *)&v14 + 1);
      if (*((void *)&v14 + 1) >= (unint64_t)v14)
      {
        sub_18135BB8C((uint64_t)&v12, 0);
      }

      else
      {
        ++*((void *)&v14 + 1);
        v13[v7] = 0;
      }

      if (!HIBYTE(v15))
      {
        uint64_t v8 = *((void *)&v14 + 1);
        int v9 = DWORD2(v14) - 1;
        --*((void *)&v14 + 1);
        if (!(_BYTE)v15
          || (*(void *)&__int128 v14 = 0LL,
              *((void *)&v14 + 1) = v8,
              sub_18135B94C((uint64_t)&v12, v8),
              int v9 = DWORD2(v14) - 1,
              --*((void *)&v14 + 1),
              !(_BYTE)v15))
        {
          unsigned __int16 v10 = v13;
          ++*((void *)v13 - 1);
          *(void *)(a1 + 24) = v10;
          *(_DWORD *)(a1 + 64) = v9;
        }
      }
    }

    sub_18135B44C((uint64_t)&v12);
    if (a3)
    {
      uint64_t v11 = *(void *)a3;
      *(_BYTE *)(v11 + 23) = 74;
      *(_WORD *)(v11 + 20) |= 0x800u;
    }

    else
    {
      sub_1812CF36C(97481);
    }
  }

uint64_t sub_181358E54(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)(result + 56);
  if (v2 >= 2)
  {
    *(_DWORD *)(result + 56) = v2 - 1;
    return result;
  }

  sub_181359E08(result);
  uint64_t v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v3 = &xmmword_18C465410;
    return (*v3)(v1);
  }

  return result;
}

uint64_t sub_181358F20(unsigned int *a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *((void *)a1 + 2);
  while (2)
  {
    BOOL v5 = (_BYTE *)(v4 + v2);
    int v6 = *v5;
    switch(*v5)
    {
      case 0:
        return 0LL;
      case 9:
      case 0xA:
      case 0xD:
      case 0x20:
        do
          LODWORD(v2) = v2 + 1;
        while (byte_1813CA934[*(unsigned __int8 *)(v4 + v2)]);
        continue;
      case 0xB:
      case 0xC:
      case 0x2F:
      case 0xC2:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xEF:
        int v7 = sub_181359BE4(v4 + v2);
        if (!v7) {
          goto LABEL_215;
        }
        LODWORD(v2) = v7 + v2;
        *((_BYTE *)a1 + 53) = 1;
        continue;
      case 0x22:
        int v27 = 0;
        goto LABEL_56;
      case 0x27:
        *((_BYTE *)a1 + 53) = 1;
        int v6 = *v5;
        int v27 = 64;
LABEL_56:
        LODWORD(v12) = v2;
        while (2)
        {
          uint64_t v12 = (v12 + 2);
LABEL_59:
          int v28 = *(unsigned __int8 *)(v4 + (v12 - 1));
          if (v28 != v6)
          {
            if (v28 == 92)
            {
              switch(*(_BYTE *)(v4 + v12))
              {
                case 0xA:
                case 0x27:
                case 0x30:
                case 0x76:
                  goto LABEL_80;
                case 0xB:
                case 0xC:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x28:
                case 0x29:
                case 0x2A:
                case 0x2B:
                case 0x2C:
                case 0x2D:
                case 0x2E:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x37:
                case 0x38:
                case 0x39:
                case 0x3A:
                case 0x3B:
                case 0x3C:
                case 0x3D:
                case 0x3E:
                case 0x3F:
                case 0x40:
                case 0x41:
                case 0x42:
                case 0x43:
                case 0x44:
                case 0x45:
                case 0x46:
                case 0x47:
                case 0x48:
                case 0x49:
                case 0x4A:
                case 0x4B:
                case 0x4C:
                case 0x4D:
                case 0x4E:
                case 0x4F:
                case 0x50:
                case 0x51:
                case 0x52:
                case 0x53:
                case 0x54:
                case 0x55:
                case 0x56:
                case 0x57:
                case 0x58:
                case 0x59:
                case 0x5A:
                case 0x5B:
                case 0x5D:
                case 0x5E:
                case 0x5F:
                case 0x60:
                case 0x61:
                case 0x63:
                case 0x64:
                case 0x65:
                case 0x67:
                case 0x68:
                case 0x69:
                case 0x6A:
                case 0x6B:
                case 0x6C:
                case 0x6D:
                case 0x6F:
                case 0x70:
                case 0x71:
                case 0x73:
                case 0x77:
                  goto LABEL_33;
                case 0xD:
                  goto LABEL_80;
                case 0x22:
                case 0x2F:
                case 0x5C:
                case 0x62:
                case 0x66:
                case 0x6E:
                case 0x72:
                case 0x74:
                  goto LABEL_65;
                case 0x75:
                  size_t v29 = (unsigned __int8 *)(v4 + (v12 + 1));
                  if ((byte_1813C6558[*v29] & 8) == 0
                    || (byte_1813C6558[v29[1]] & 8) == 0
                    || (byte_1813C6558[v29[2]] & 8) == 0
                    || (byte_1813C6558[v29[3]] & 8) == 0)
                  {
                    goto LABEL_33;
                  }

uint64_t sub_181359BE4(uint64_t a1)
{
  int v1 = 0;
LABEL_4:
  while (2)
  {
    while (1)
    {
      uint64_t v2 = v1;
      int v3 = *(unsigned __int8 *)(a1 + v1);
      if (v3 > 46) {
        break;
      }
      int v1 = v2 + 1;
    }

    switch(v3)
    {
      case 194:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 160)
        {
          int v1 = v2 + 2;
          continue;
        }

        return v2;
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
        return v2;
      case 225:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 154 && *(unsigned __int8 *)(v2 + a1 + 2) == 128)
        {
          int v1 = v2 + 3;
          continue;
        }

        return v2;
      case 226:
        int v6 = *(unsigned __int8 *)(v2 + a1 + 1);
        if (v6 == 129)
        {
          if (*(unsigned __int8 *)(v2 + a1 + 2) == 159)
          {
            int v1 = v2 + 3;
            continue;
          }
        }

        else if (v6 == 128 && (*(_BYTE *)(v2 + a1 + 2) & 0x80) != 0)
        {
          unsigned int v7 = *(unsigned __int8 *)(v2 + a1 + 2);
          if (v7 < 0x8B || (unsigned int v8 = v7 - 168, v8 <= 7) && ((1 << v8) & 0x83) != 0)
          {
            int v1 = v2 + 3;
            continue;
          }
        }

        return v2;
      case 227:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 128 && *(unsigned __int8 *)(v2 + a1 + 2) == 128)
        {
          int v1 = v2 + 3;
          continue;
        }

        return v2;
      case 239:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 187 && *(unsigned __int8 *)(v2 + a1 + 2) == 191)
        {
          int v1 = v2 + 3;
          continue;
        }

        return v2;
      default:
        if (v3 != 47) {
          return v2;
        }
        int v4 = *(unsigned __int8 *)(v2 + a1 + 1);
        if (v4 == 47)
        {
          uint64_t v9 = (int)v2 + 2;
          while (1)
          {
            while (1)
            {
              uint64_t v10 = v9;
              unsigned int v11 = *(unsigned __int8 *)(a1 + v9);
              if (v11 == 226) {
                break;
              }
              BOOL v12 = v11 > 0xD;
              int v13 = (1 << v11) & 0x2401;
              if (!v12 && v13 != 0) {
                goto LABEL_49;
              }
              uint64_t v9 = v10 + 1;
            }

            uint64_t v9 = v10 + 1;
            if (*(unsigned __int8 *)(a1 + v10 + 1) == 128 && (*(_BYTE *)(v10 + a1 + 2) & 0xFE) == 0xA8)
            {
              LODWORD(v10) = v10 + 2;
LABEL_49:
              else {
                int v1 = v10;
              }
              goto LABEL_4;
            }
          }
        }

        if (v4 == 42 && *(_BYTE *)(v2 + a1 + 2))
        {
          int v1 = v2 + 4;
          for (unsigned int i = (_BYTE *)(a1 + (int)v2 + 3); ; ++i)
          {
            if (*i == 47)
            {
              if (*(i - 1) == 42) {
                goto LABEL_4;
              }
            }

            else if (!*i)
            {
              return v2;
            }

            ++v1;
          }
        }

        break;
    }

    return v2;
  }

uint64_t sub_181359E08(uint64_t result)
{
  uint64_t v1 = result;
  for (unsigned int i = *(void **)(result + 40); i; unsigned int i = *(void **)(v1 + 40))
  {
    int v3 = (void (*)(void))i[1];
    *(void *)(v1 + 40) = *i;
    v3(i[2]);
    int v4 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(i);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(i);
      unsigned int i = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        continue;
      }
      int v4 = &xmmword_18C465410;
    }

    uint64_t result = (*v4)(i);
  }

  uint64_t v5 = *(void *)(v1 + 8);
  if (v5)
  {
    int v6 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v5);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v5);
      uint64_t v5 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_17;
      }
      int v6 = &xmmword_18C465410;
    }

    uint64_t result = (*v6)(v5);
LABEL_17:
    *(void *)(v1 + 8) = 0LL;
  }

  *(void *)uint64_t v1 = 0LL;
  uint64_t v7 = *(void *)(v1 + 32);
  if (!v7) {
    goto LABEL_26;
  }
  unsigned int v8 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v7);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v7);
    uint64_t v7 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_25;
    }
    unsigned int v8 = &xmmword_18C465410;
  }

  uint64_t result = (*v8)(v7);
LABEL_25:
  *(void *)(v1 + 32) = 0LL;
LABEL_26:
  if (!*(_BYTE *)(v1 + 52)) {
    goto LABEL_36;
  }
  uint64_t v9 = *(void *)(v1 + 16);
  unint64_t v12 = *(void *)(v9 - 8);
  unsigned int v11 = (void *)(v9 - 8);
  unint64_t v10 = v12;
  if (v12 < 2)
  {
    int v13 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v11);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v11);
      unsigned int v11 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_35;
      }
      int v13 = &xmmword_18C465410;
    }

    uint64_t result = (*v13)(v11);
  }

  else
  {
    *unsigned int v11 = v10 - 1;
  }

uint64_t sub_18135A0F0(unsigned int *a1, __int16 a2, int a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1) + 16 * v4;
  *(_WORD *)uint64_t v5 = a2;
  *(_DWORD *)(v5 + 4) = a3;
  *(void *)(v5 + 8) = a4;
  uint64_t v6 = *a1;
  *a1 = v6 + 1;
  return v6;
}

uint64_t sub_18135A130(unsigned __int8 *a1)
{
  if ((byte_1813C6558[*a1] & 8) == 0) {
    return 0LL;
  }
  if ((byte_1813C6558[a1[1]] & 8) == 0) {
    return 0LL;
  }
  if ((byte_1813C6558[a1[2]] & 8) != 0) {
    return (byte_1813C6558[a1[3]] >> 3) & 1;
  }
  return 0LL;
}

uint64_t sub_18135A184(unsigned int *a1, __int16 a2, int a3, uint64_t a4)
{
  while (!*((_BYTE *)a1 + 51))
  {
    unsigned int v8 = a1[1];
    uint64_t v9 = *((void *)a1 + 1);
    if (sqlite3_initialize() || (uint64_t v10 = sub_18127D33C(v9, 16LL * (2 * v8 + 10))) == 0)
    {
      *((_BYTE *)a1 + 51) = 1;
      return 0xFFFFFFFFLL;
    }

    uint64_t v11 = v10;
    int v12 = off_18C4653B8(v10);
    a1[1] = v12 >> 4;
    *((void *)a1 + 1) = v11;
    uint64_t v13 = *a1;
    if (v13 < v12 >> 4)
    {
      uint64_t v14 = v11 + 16 * v13;
      *(_WORD *)uint64_t v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(void *)(v14 + 8) = a4;
      uint64_t result = *a1;
      *a1 = result + 1;
      return result;
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_18135A250(uint64_t a1, int a2, char *__s2, _DWORD *a4, char **a5)
{
  if (*(_BYTE *)(a1 + 51)) {
    return 0LL;
  }
  LODWORD(v8) = a2;
  uint64_t v10 = *(void *)(a1 + 8);
LABEL_5:
  uint64_t v5 = v10 + 16LL * v8;
  char v11 = *(_BYTE *)(v5 + 1);
  if ((v11 & 0xC) != 0 && *(_BYTE *)(a1 + 54))
  {
    if ((*(_BYTE *)(v5 + 1) & 8) != 0)
    {
      do
      {
        unint64_t v23 = (unint64_t)(v5 - v10) >> 4;
        unsigned int v24 = *(_DWORD *)(a1 + 72);
        if (*(_DWORD *)(v10 + 16LL * v24 + 4) != (_DWORD)v23)
        {
          unsigned int v24 = *(_DWORD *)(v10 + 16LL * *(unsigned int *)(a1 + 72) + 8);
        }

        LODWORD(v8) = v24 + 1;
        uint64_t v5 = v10 + 16LL * (v24 + 1);
        char v11 = *(_BYTE *)(v5 + 1);
      }

      while ((v11 & 8) != 0);
    }

    if ((v11 & 4) != 0) {
      return 0LL;
    }
  }

  int v12 = *__s2;
  if (v12 != 46)
  {
    if (v12 != 91)
    {
      if (*__s2)
      {
LABEL_106:
        uint64_t v5 = 0LL;
        *a5 = __s2;
      }

      return v5;
    }

    uint64_t v13 = __s2[1];
    if ((unint64_t)(v13 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
    {
      unsigned int v14 = 0;
      unsigned int v15 = 1;
      LOBYTE(v22) = __s2[1];
      do
      {
        unsigned int v14 = 10 * v14 + (char)v22 - 48;
        uint64_t v22 = __s2[++v15];
      }

      while ((unint64_t)(v22 - 58) > 0xFFFFFFFFFFFFFFF5LL);
      if (v15 >= 2 && (_DWORD)v22 == 93)
      {
        if (*(_BYTE *)v5 != 7) {
          return 0LL;
        }
        goto LABEL_46;
      }
    }

    else
    {
      unsigned int v14 = 0;
      unsigned int v15 = 1;
    }

    if ((_DWORD)v13 != 35) {
      goto LABEL_106;
    }
    if (*(_BYTE *)v5 != 7) {
      return 0LL;
    }
    uint64_t v16 = v5;
    while (1)
    {
      for (unsigned int i = *(_DWORD *)(v16 + 4); v15 <= i; v15 += *(_DWORD *)(v16 + 16LL * v15 + 4) + 1)
      {
        while (1)
        {
          int v18 = (unsigned __int8 *)(v16 + 16LL * v15);
          if ((v18[1] & 4) == 0 || !*(_BYTE *)(a1 + 54)) {
            ++v14;
          }
          if (*v18 >= 7u) {
            break;
          }
          if (++v15 > i) {
            goto LABEL_24;
          }
        }
      }

uint64_t sub_18135A7CC(unsigned int *a1, char *__s2, _DWORD *a3)
{
  uint64_t v4 = a1;
  *a3 = 1;
  if (*__s2 == 46)
  {
    uint64_t v7 = *a1;
    if (v7 < a1[1])
    {
      uint64_t v8 = *((void *)a1 + 1) + 16 * v7;
      __int16 v9 = 8;
      goto LABEL_11;
    }

    __int16 v12 = 8;
  }

  else
  {
    if (!*__s2)
    {
      uint64_t v5 = *a1;
      if (v5 >= a1[1])
      {
        sub_18135A184(a1, 1, 0, 0LL);
        if (!*((_BYTE *)v4 + 51)) {
          return *((void *)v4 + 1) + 16LL * (*v4 - 1);
        }
      }

      else
      {
        uint64_t v6 = *((void *)a1 + 1) + 16 * v5;
        *(_WORD *)uint64_t v6 = 1;
        *(_DWORD *)(v6 + 4) = 0;
        *(void *)(v6 + 8) = 0LL;
        ++*a1;
        if (!*((_BYTE *)a1 + 51)) {
          return *((void *)v4 + 1) + 16LL * (*v4 - 1);
        }
      }

      return 0LL;
    }

    if (strncmp(__s2, "[0]", 3uLL)) {
      return 0LL;
    }
    uint64_t v10 = *v4;
    if (v10 < v4[1])
    {
      uint64_t v8 = *((void *)v4 + 1) + 16 * v10;
      __int16 v9 = 7;
LABEL_11:
      *(_WORD *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + 4) = 0;
      *(void *)(v8 + 8) = 0LL;
      ++*v4;
      if (!*((_BYTE *)v4 + 51)) {
        return sub_18135A250((int)v4, *v4 - 1, __s2);
      }
      return 0LL;
    }

    a1 = v4;
    __int16 v12 = 7;
  }

  sub_18135A184(a1, v12, 0, 0LL);
  if (*((_BYTE *)v4 + 51)) {
    return 0LL;
  }
  return sub_18135A250((int)v4, *v4 - 1, __s2);
}

uint64_t sub_18135A944(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = result;
  char v5 = *(_BYTE *)(a2 + 1);
  if ((v5 & 8) != 0)
  {
    uint64_t v6 = a2;
    while (*(_BYTE *)(result + 54))
    {
      uint64_t v7 = *(void *)(result + 8);
      for (uint64_t i = *(unsigned int *)(result + 72);
            *(_DWORD *)(v7 + 16LL * i + 4) != ((unint64_t)(v6 - v7) >> 4);
        ;
      }

      uint64_t v6 = v7 + 16LL * (i + 1);
      if ((*(_BYTE *)(v6 + 1) & 8) == 0)
      {
        char v5 = *(_BYTE *)(v6 + 1);
        goto LABEL_10;
      }
    }
  }

  uint64_t v6 = a2;
LABEL_10:
  switch(*(_BYTE *)v6)
  {
    case 2:
      uint64_t v9 = a3[3];
      if ((unint64_t)(v9 + 4) < a3[2])
      {
        uint64_t v10 = a3[1];
        int v11 = 1702195828;
        goto LABEL_24;
      }

      unsigned int v26 = "true";
      goto LABEL_38;
    case 3:
      uint64_t v19 = a3[3];
      uint64_t v20 = a3[1] + v19;
      *(_BYTE *)(v20 + 4) = 101;
      *(_DWORD *)uint64_t v20 = 1936482662;
      a3[3] += 5LL;
      return result;
    case 4:
      __int16 v12 = *(unsigned __int8 **)(v6 + 8);
      size_t v13 = *(unsigned int *)(v6 + 4);
      if ((v5 & 0x40) == 0) {
        goto LABEL_28;
      }
      int v14 = *v12;
      if (v14 == 43) {
        goto LABEL_144;
      }
      if (v14 == 45)
      {
        unint64_t v15 = a3[3];
        if (v15 >= a3[2])
        {
          sub_18135BB8C((uint64_t)a3, 45);
        }

        else
        {
          uint64_t v16 = a3[1];
          a3[3] = v15 + 1;
          *(_BYTE *)(v16 + v15) = 45;
        }

double sub_18135B44C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 33);
  if (!*(_BYTE *)(a1 + 33))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      int v3 = *(sqlite3_context **)a1;
      uint64_t v4 = *(const char **)(a1 + 8);
      sqlite3_uint64 v5 = *(void *)(a1 + 24);
      uint64_t v6 = -1LL;
      goto LABEL_4;
    }

    unint64_t v7 = *(void *)(a1 + 24);
    if (v7 < *(void *)(a1 + 16))
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 24) = v7 + 1;
      *(_BYTE *)(v8 + v7) = 0;
      int v2 = *(unsigned __int8 *)(a1 + 33);
      if (*(_BYTE *)(a1 + 33)) {
        goto LABEL_8;
      }
LABEL_21:
      uint64_t v15 = *(void *)(a1 + 24);
      sqlite3_uint64 v5 = v15 - 1;
      *(void *)(a1 + 24) = v15 - 1;
      if (*(_BYTE *)(a1 + 32))
      {
        *(void *)(a1 + 16) = 0LL;
        *(void *)(a1 + 24) = v15;
        sub_18135B94C(a1, v15);
        sqlite3_uint64 v5 = *(void *)(a1 + 24) - 1LL;
        *(void *)(a1 + 24) = v5;
        if (*(_BYTE *)(a1 + 32)) {
          goto LABEL_5;
        }
      }

      int v3 = *(sqlite3_context **)a1;
      uint64_t v4 = *(const char **)(a1 + 8);
      ++*((void *)v4 - 1);
      uint64_t v6 = (uint64_t)sub_181301F94;
LABEL_4:
      sqlite3_result_text64(v3, v4, v5, (void (__cdecl *)(void *))v6, 1u);
LABEL_5:
      int v2 = *(unsigned __int8 *)(a1 + 33);
      goto LABEL_8;
    }

    sub_18135BB8C(a1, 0);
    int v2 = *(unsigned __int8 *)(a1 + 33);
    if (!*(_BYTE *)(a1 + 33)) {
      goto LABEL_21;
    }
  }

void *sub_18135B5F4(void *a1, const void *a2, size_t __n)
{
  uint64_t v4 = __n;
  uint64_t v5 = a1[3];
  double result = memcpy((void *)(a1[1] + v5), a2, __n);
  a1[3] += v4;
  return result;
}

void *sub_18135B650(void *result, const void *a2, size_t __n)
{
  if ((_DWORD)__n)
  {
    int v3 = result;
    uint64_t v4 = __n;
    uint64_t v5 = result[3];
    if (v5 + (unint64_t)__n >= result[2])
    {
      return (void *)sub_18135B8EC((uint64_t)result, a2, __n);
    }

    else
    {
      double result = memcpy((void *)(result[1] + v5), a2, __n);
      v3[3] += v4;
    }
  }

  return result;
}

uint64_t sub_18135B6B0(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (void *)result;
    uint64_t v6 = a3;
    uint64_t v7 = *(void *)(result + 24);
    if ((unint64_t)a3 + v7 + 2 >= *(void *)(result + 16))
    {
      double result = sub_18135B94C(result, a3 + 2);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v7 = v5[3];
    }

    uint64_t v8 = v5[1];
    v5[3] = v7 + 1;
    *(_BYTE *)(v8 + v7) = 34;
    if (a3)
    {
      uint64_t v9 = v6 + 7;
      while (1)
      {
        unsigned int v13 = *v4++;
        uint64_t v12 = v13;
        if (byte_1813CA834[v13])
        {
          uint64_t v10 = v5[1];
          uint64_t v11 = v5[3];
          v5[3] = v11 + 1;
          *(_BYTE *)(v10 + v11) = v12;
          goto LABEL_8;
        }

        if ((_DWORD)v12 == 92) {
          break;
        }
        if ((_DWORD)v12 == 39)
        {
          uint64_t v15 = v5[1];
          uint64_t v16 = v5[3];
          v5[3] = v16 + 1;
          *(_BYTE *)(v15 + v16) = 39;
          goto LABEL_8;
        }

        if ((_DWORD)v12 == 34) {
          break;
        }
        char v14 = byte_1813CAA34[v12];
        if (v14) {
          goto LABEL_16;
        }
        uint64_t v21 = v5[3];
        if ((unint64_t)(v9 + v21) > v5[2])
        {
          double result = sub_18135B94C((uint64_t)v5, (int)v6 + 7);
          if ((_DWORD)result) {
            return result;
          }
          uint64_t v21 = v5[3];
        }

        uint64_t v22 = v5[1];
        v5[3] = v21 + 1;
        *(_BYTE *)(v22 + v21) = 92;
        uint64_t v23 = v5[1];
        uint64_t v24 = v5[3];
        v5[3] = v24 + 1;
        *(_BYTE *)(v23 + v24) = 117;
        uint64_t v25 = v5[1];
        uint64_t v26 = v5[3];
        v5[3] = v26 + 1;
        *(_BYTE *)(v25 + v26) = 48;
        uint64_t v27 = v5[1];
        uint64_t v28 = v5[3];
        v5[3] = v28 + 1;
        *(_BYTE *)(v27 + v28) = 48;
        LOBYTE(v28) = a0123456789abcd[(unint64_t)v12 >> 4];
        uint64_t v29 = v5[1];
        uint64_t v30 = v5[3];
        v5[3] = v30 + 1;
        *(_BYTE *)(v29 + v30) = v28;
        LOBYTE(v27) = a0123456789abcd[v12 & 0xF];
        uint64_t v31 = v5[1];
        uint64_t v32 = v5[3];
        v5[3] = v32 + 1;
        *(_BYTE *)(v31 + v32) = v27;
LABEL_8:
        ++v9;
        if (!--v6) {
          goto LABEL_24;
        }
      }

      char v14 = v12;
LABEL_16:
      uint64_t v17 = v5[3];
      if ((unint64_t)(v6 + v17 + 3) > v5[2])
      {
        double result = sub_18135B94C((uint64_t)v5, (int)v6 + 3);
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v17 = v5[3];
      }

      uint64_t v18 = v5[1];
      v5[3] = v17 + 1;
      *(_BYTE *)(v18 + v17) = 92;
      uint64_t v19 = v5[1];
      uint64_t v20 = v5[3];
      v5[3] = v20 + 1;
      *(_BYTE *)(v19 + v20) = v14;
      goto LABEL_8;
    }

uint64_t sub_18135B8EC(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result = sub_18135B94C(a1, a3);
  if (!(_DWORD)result)
  {
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(a1 + 8) + *(void *)(a1 + 24)), a2, a3);
    *(void *)(a1 + 24) += a3;
  }

  return result;
}

uint64_t sub_18135B94C(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 <= a2) {
    uint64_t v4 = a2 + v3 + 10;
  }
  else {
    uint64_t v4 = 2 * v3;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 33)) {
      return 1LL;
    }
    if (!sqlite3_initialize())
    {
      unsigned int v13 = (void *)sub_18126F0AC(v4 + 9);
      if (v13)
      {
        void *v13 = 1LL;
        char v14 = v13 + 1;
        memcpy(v13 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 24));
        *(void *)(a1 + 8) = v14;
        *(_BYTE *)(a1 + 32) = 0;
        goto LABEL_23;
      }
    }

    *(_BYTE *)(a1 + 33) = 1;
    sqlite3_result_error_nomem(*(sqlite3_context **)a1);
    if (*(_BYTE *)(a1 + 32)) {
      goto LABEL_30;
    }
    uint64_t v8 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(v8 - 8);
    uint64_t v10 = (void *)(v8 - 8);
    unint64_t v9 = v11;
    if (v11 < 2)
    {
      uint64_t v15 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
        --qword_18C468B10;
        off_18C4653A8(v10);
        uint64_t v10 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_30;
        }
        uint64_t v15 = &xmmword_18C465410;
      }

      (*v15)(v10);
    }

    else
    {
      void *v10 = v9 - 1;
    }

uint64_t sub_18135BB8C(uint64_t a1, char a2)
{
  uint64_t result = sub_18135B94C(a1, 1u);
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v6 + 1;
    *(_BYTE *)(v5 + v6) = a2;
  }

  return result;
}

uint64_t sub_18135BBCC(signed int a1, void *a2, char *zFormat, ...)
{
  if ((unint64_t)(a2[3] + a1) < a2[2] || (uint64_t result = sub_18135B94C((uint64_t)a2, a1), !(_DWORD)result))
  {
    if (a1 >= 1)
    {
      uint64_t v7 = a2[1];
      uint64_t v8 = a2[3];
      unint64_t v9 = (_BYTE *)(v7 + v8);
      if (zFormat && v7)
      {
        v11[0] = 0LL;
        v11[1] = v7 + v8;
        signed int v12 = a1;
        uint64_t v13 = 0LL;
        __int16 v14 = 0;
        sqlite3_str_vappendf((sqlite3_str *)v11, zFormat, va);
        v9 += HIDWORD(v13);
LABEL_8:
        *unint64_t v9 = 0;
        goto LABEL_9;
      }

      sub_1812CF36C(32992);
      if (v7) {
        goto LABEL_8;
      }
    }

void *sub_18135BCA0(void *result, uint64_t a2)
{
  int v2 = result;
  if (!a2)
  {
    uint64_t result = (void *)sub_1812CF36C(97220);
LABEL_8:
    if (*((_BYTE *)v2 + 33)) {
      return result;
    }
    uint64_t v6 = *v2;
    if (*v2)
    {
      *(_DWORD *)(v6 + 36) = 1;
      uint64_t result = (void *)sub_181269368( *(void *)v6,  "JSON cannot hold BLOB values",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      uint64_t result = (void *)sub_1812CF36C(97407);
    }

    *((_BYTE *)v2 + 33) = 2;
    if (!*((_BYTE *)v2 + 32))
    {
      uint64_t v9 = v2[1];
      unint64_t v12 = *(void *)(v9 - 8);
      unint64_t v11 = (void *)(v9 - 8);
      unint64_t v10 = v12;
      if (v12 < 2)
      {
        uint64_t v17 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
          --qword_18C468B10;
          uint64_t result = (void *)off_18C4653A8(v11);
          unint64_t v11 = (void *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_64;
          }
          uint64_t v17 = &xmmword_18C465410;
        }

        uint64_t result = (void *)(*v17)(v11);
      }

      else
      {
        *unint64_t v11 = v10 - 1;
      }
    }

void sub_18135C07C(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  *(void *)&v46[102] = *MEMORY[0x1895F89C0];
  switch(*(_BYTE *)a2)
  {
    case 2:
      if (!a3) {
        goto LABEL_34;
      }
      uint64_t v5 = *(void *)a3;
      if ((*(_WORD *)(*(void *)a3 + 20LL) & 0x9000) != 0)
      {
        uint64_t v6 = 1LL;
        goto LABEL_13;
      }

      unint64_t v40 = 1LL;
      goto LABEL_96;
    case 3:
      if (!a3)
      {
LABEL_34:
        int v16 = 97431;
        goto LABEL_53;
      }

      uint64_t v5 = *(void *)a3;
      if ((*(_WORD *)(*(void *)a3 + 20LL) & 0x9000) == 0)
      {
        *(void *)uint64_t v5 = 0LL;
        goto LABEL_100;
      }

      uint64_t v6 = 0LL;
LABEL_13:
      sub_1813040AC(v5, v6);
      return;
    case 4:
      v43[0] = 0LL;
      double v7 = *(unsigned __int8 **)(a2 + 8);
      int v8 = *v7;
      if (v8 == 45 || v8 == 43) {
        unint64_t v10 = (char *)(v7 + 1);
      }
      else {
        unint64_t v10 = *(char **)(a2 + 8);
      }
      int v11 = sub_1812E4D40(v10, v43);
      if (v11 <= 1)
      {
        if (v8 == 45) {
          uint64_t v12 = -v43[0];
        }
        else {
          uint64_t v12 = v43[0];
        }
        if (a3)
        {
          uint64_t v5 = *(void *)a3;
          if ((*(_WORD *)(*(void *)a3 + 20LL) & 0x9000) != 0)
          {
            sub_1813040AC(v5, v12);
            return;
          }

          *(void *)uint64_t v5 = v12;
          goto LABEL_100;
        }

uint64_t sub_18135C824(unsigned __int8 *a1)
{
  v1.i32[0] = *a1;
  v1.i32[1] = a1[1];
  int32x2_t v2 = (int32x2_t)vshl_u32( (uint32x2_t)vand_s8( (int8x8_t)vadd_s32( (int32x2_t)vbic_s8( (int8x8_t)0x900000009LL,  (int8x8_t)vceqz_s32((int32x2_t)(*(void *)&v1 & 0xFFFFFF40FFFFFF40LL))),  v1),  (int8x8_t)0xF0000000FLL),  (uint32x2_t)0x80000000CLL);
  return vorr_s8((int8x8_t)vdup_lane_s32(v2, 1), (int8x8_t)v2).u32[0] | (16
                                                                       * (((((char)(2 * a1[2]) >> 7) & 0xF9)
}

uint64_t sub_18135C8B0(uint64_t a1, const char *a2)
{
  unint64_t v3 = sqlite3_mprintf("json_%s() needs an odd number of arguments", a2);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    uint64_t result = sub_181269368(*(void *)a1, v3, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v3) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812CF36C(97407);
    if (!v3) {
      return result;
    }
  }

  uint64_t v5 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v5)(v3);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v3);
  unint64_t v3 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v5 = (uint64_t (**)(char *))&xmmword_18C465410;
    return (*v5)(v3);
  }

  return result;
}

uint64_t sub_18135C9BC(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (v8 >= a2[1])
  {
    uint64_t result = sub_18135A184(a2, 0, a3, 0LL);
    if (*((_BYTE *)a2 + 51)) {
      return result;
    }
  }

  else
  {
    uint64_t v9 = *((void *)a2 + 1) + 16 * v8;
    *(_WORD *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 4) = a3;
    *(void *)(v9 + 8) = 0LL;
    uint64_t result = *a2;
    *a2 = result + 1;
    if (*((_BYTE *)a2 + 51)) {
      return result;
    }
  }

  uint64_t v11 = *((void *)a2 + 1);
  *(_BYTE *)(v11 + 16LL * a3 + 1) |= 8u;
  uint64_t v12 = v11 + 16LL * (int)result;
  *(_BYTE *)(v12 + 2) = 4;
  *(_DWORD *)(v12 + 8) = a2[18];
  a2[18] = result;
  *((_WORD *)a2 + 27) = 257;
  if (!a4)
  {
    sub_1812CF36C(97220);
LABEL_14:
    uint64_t v20 = *a2;
    if (v20 >= a2[1])
    {
      sub_18135A184(a2, 1, 0, 0LL);
      if (a1) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v21 = *((void *)a2 + 1) + 16 * v20;
      *(_WORD *)uint64_t v21 = 1;
      *(_DWORD *)(v21 + 4) = 0;
      *(void *)(v21 + 8) = 0LL;
      ++*a2;
      if (a1)
      {
LABEL_16:
        *(_DWORD *)(a1 + 36) = 1;
        uint64_t result = sub_181269368( *(void *)a1,  "JSON cannot hold BLOB values",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
LABEL_19:
        ++*((_BYTE *)a2 + 50);
        return result;
      }
    }

    uint64_t result = sub_1812CF36C(97407);
    goto LABEL_19;
  }

  int v13 = *(unsigned __int16 *)(a4 + 20);
  switch(v13 & 0x3F)
  {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
    case 0xB:
    case 0xD:
    case 0xF:
    case 0x11:
    case 0x13:
    case 0x15:
    case 0x17:
    case 0x19:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x37:
    case 0x39:
    case 0x3B:
    case 0x3D:
    case 0x3F:
      uint64_t v24 = *a2;
      uint64_t v25 = *((void *)a2 + 1) + 16 * v24;
      *(_WORD *)uint64_t v25 = 1;
      *(_DWORD *)(v25 + 4) = 0;
      *(void *)(v25 + 8) = 0LL;
      ++*a2;
      return result;
    case 2:
    case 0x12:
    case 0x32:
      if ((~v13 & 0x202) != 0 || *(_BYTE *)(a4 + 22) != 1)
      {
        if ((v13 & 1) != 0)
        {
          uint64_t v23 = 0LL;
        }

        else
        {
          uint64_t result = sub_181303998((int *)a4, 1);
          uint64_t v23 = (const char *)result;
          LOWORD(v13) = *(_WORD *)(a4 + 20);
        }
      }

      else
      {
        uint64_t v23 = *(const char **)(a4 + 8);
      }

      if ((v13 & 2) != 0 && *(_BYTE *)(a4 + 22) == 1)
      {
        int v27 = *(_DWORD *)(a4 + 16);
      }

      else if ((v13 & 0x10) != 0)
      {
        int v27 = *(_DWORD *)(a4 + 16);
        if ((v13 & 0x400) != 0) {
          v27 += *(_DWORD *)a4;
        }
      }

      else if ((v13 & 1) != 0)
      {
        int v27 = 0;
      }

      else
      {
        uint64_t result = sub_181303970(a4, 1);
        int v27 = result;
      }

      if (!v23) {
        goto LABEL_74;
      }
      if ((*(_WORD *)(a4 + 20) & 0x800) == 0 || *(_BYTE *)(a4 + 23) != 74)
      {
        size_t v39 = strlen(v23) + 1;
        unint64_t v40 = (void *)sub_18126F0AC(v39);
        unsigned int v41 = v40;
        if (v40)
        {
          memcpy(v40, v23, v39);
          if (sqlite3_initialize() || (uint64_t v42 = (void *)sub_18126F0AC(24LL)) == 0LL)
          {
            *((_BYTE *)a2 + 51) = 1;
            sqlite3_free(v41);
          }

          else
          {
            uint64_t v43 = *((void *)a2 + 5);
            *((void *)a2 + 5) = v42;
            *uint64_t v42 = v43;
            v42[1] = sqlite3_free;
            v42[2] = v41;
          }
        }

        else
        {
          *((_BYTE *)a2 + 51) = 1;
          sqlite3_result_error_nomem((sqlite3_context *)a1);
        }

        uint64_t v44 = *a2;
        if (v44 >= a2[1])
        {
          uint64_t result = sub_18135A184(a2, 6, v27, (uint64_t)v41);
        }

        else
        {
          uint64_t v45 = *((void *)a2 + 1) + 16 * v44;
          *(_WORD *)uint64_t v45 = 6;
          *(_DWORD *)(v45 + 4) = v27;
          *(void *)(v45 + 8) = v41;
          uint64_t result = *a2;
          *a2 = result + 1;
        }

        if (!*((_BYTE *)a2 + 51))
        {
          uint64_t v46 = *((void *)a2 + 1) + 16LL * (int)result;
          *(_BYTE *)(v46 + 1) |= 1u;
        }

        return result;
      }

      uint64_t result = sub_181358628(a1, a4, (sqlite3_context *)a1, 1);
      if (!result)
      {
        *((_BYTE *)a2 + 51) = 1;
        return result;
      }

      uint64_t v15 = result;
      unsigned int v34 = *(const void **)(result + 8);
      uint64_t v35 = *(unsigned int *)result;
      unsigned int v36 = *a2;
      unsigned int v37 = *a2 + v35;
      uint64_t v38 = *((void *)a2 + 1);
      if (v37 <= a2[1]) {
        goto LABEL_95;
      }
      if (sqlite3_initialize() || (uint64_t v47 = sub_18127D33C(v38, 16LL * v37)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
      }

      else
      {
        uint64_t v38 = v47;
        a2[1] = (int)off_18C4653B8(v47) >> 4;
        *((void *)a2 + 1) = v38;
        unsigned int v36 = *a2;
LABEL_95:
        memcpy((void *)(v38 + 16LL * v36), v34, 16 * v35);
        *a2 += v35;
      }

      ++*(_DWORD *)(v15 + 56);
      if (sqlite3_initialize() || (uint64_t result = sub_18126F0AC(24LL)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
        return sub_181358E54(v15);
      }

      uint64_t v31 = *((void *)a2 + 5);
      *((void *)a2 + 5) = result;
      int v32 = sub_181358E54;
      goto LABEL_61;
    case 4:
    case 6:
    case 0xC:
    case 0xE:
    case 0x14:
    case 0x16:
    case 0x1C:
    case 0x1E:
      if ((v13 & 0x24) != 0)
      {
        uint64_t v14 = *(void *)a4;
      }

      else if ((v13 & 8) != 0)
      {
        double v33 = *(double *)a4;
        if (*(double *)a4 >= -9.22337204e18)
        {
          if (v33 <= 9.22337204e18) {
            uint64_t v14 = (uint64_t)v33;
          }
          else {
            uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v14 = 0x8000000000000000LL;
        }
      }

      else if ((v13 & 0x12) != 0 && *(void *)(a4 + 8))
      {
        uint64_t v14 = sub_181303DF0(a4);
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      uint64_t result = (uint64_t)sqlite3_mprintf("%lld", v14);
      if (!result) {
        goto LABEL_74;
      }
      uint64_t v15 = result;
      int v16 = strlen((const char *)result) & 0x3FFFFFFF;
      uint64_t v17 = *a2;
      if (v17 < a2[1])
      {
        uint64_t v18 = *((void *)a2 + 1) + 16 * v17;
        __int16 v19 = 4;
        goto LABEL_34;
      }

      unsigned int v28 = a2;
      __int16 v29 = 4;
      goto LABEL_51;
    case 8:
    case 0xA:
    case 0x18:
    case 0x1A:
    case 0x20:
    case 0x22:
    case 0x24:
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x34:
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3C:
    case 0x3E:
      if ((v13 & 8) != 0)
      {
        double v22 = *(double *)a4;
      }

      else if ((v13 & 0x24) != 0)
      {
        double v22 = (double)*(uint64_t *)a4;
      }

      else if ((v13 & 0x12) != 0)
      {
        double v22 = sub_181303DB8(a4);
      }

      else
      {
        double v22 = 0.0;
      }

      uint64_t result = (uint64_t)sqlite3_mprintf("%!0.15g", *(void *)&v22);
      if (!result)
      {
LABEL_74:
        *((_BYTE *)a2 + 51) = 1;
        return result;
      }

      uint64_t v15 = result;
      int v16 = strlen((const char *)result) & 0x3FFFFFFF;
      uint64_t v26 = *a2;
      if (v26 >= a2[1])
      {
        unsigned int v28 = a2;
        __int16 v29 = 5;
LABEL_51:
        sub_18135A184(v28, v29, v16, v15);
      }

      else
      {
        uint64_t v18 = *((void *)a2 + 1) + 16 * v26;
        __int16 v19 = 5;
LABEL_34:
        *(_WORD *)uint64_t v18 = v19;
        *(_DWORD *)(v18 + 4) = v16;
        *(void *)(v18 + 8) = v15;
        ++*a2;
      }

      if (sqlite3_initialize() || (uint64_t result = sub_18126F0AC(24LL)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
        unsigned int v30 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
          --qword_18C468B10;
          uint64_t result = off_18C4653A8(v15);
          uint64_t v15 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            return result;
          }
          unsigned int v30 = &xmmword_18C465410;
        }

        return (*v30)(v15);
      }

      uint64_t v31 = *((void *)a2 + 5);
      *((void *)a2 + 5) = result;
      int v32 = sqlite3_free;
LABEL_61:
      *(void *)uint64_t result = v31;
      *(void *)(result + 8) = v32;
      *(void *)(result + 16) = v15;
      break;
    default:
      goto LABEL_14;
  }

  return result;
}

_DWORD *sub_18135D080(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  if (*(_BYTE *)a3 != 8) {
    return (_DWORD *)a3;
  }
  uint64_t v5 = (_DWORD *)(*((void *)a1 + 1) + 16LL * a2);
  if (*(_BYTE *)v5 != 8)
  {
    sub_18135D598(a3);
    return (_DWORD *)a3;
  }

  if (*(_DWORD *)(a3 + 4) < 2u) {
    return v5;
  }
  uint64_t v56 = *((void *)a1 + 1);
  unsigned int v54 = a2 + 1;
  unsigned int v6 = 1;
  unsigned int v57 = a2;
  uint64_t v55 = a2;
  do
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3 + 16LL * v6;
    size_t v10 = *(unsigned int *)(v9 + 4);
    uint64_t v11 = *(void *)(v9 + 8);
    unsigned int v12 = v5[1];
    if (v12 >= 2)
    {
      int v58 = v8;
      char v13 = *(_BYTE *)(a3 + 16 * v8 + 1);
      unsigned int v14 = 1;
      while (1)
      {
        int v16 = &v5[4 * v14];
        size_t v17 = v16[1];
        if ((v13 & 1) != 0)
        {
          if ((*((_BYTE *)v16 + 1) & 1) != 0)
          {
            if ((_DWORD)v17 == (_DWORD)v10)
            {
              __int16 v19 = *(const char **)&v5[4 * v14 + 2];
LABEL_23:
              uint64_t v18 = (const char *)v11;
LABEL_24:
              if (!strncmp(v19, v18, v10)) {
                goto LABEL_28;
              }
            }
          }

          else if ((_DWORD)v17 == (_DWORD)v10 + 2)
          {
            __int16 v19 = (const char *)(*(void *)&v5[4 * v14 + 2] + 1LL);
            goto LABEL_23;
          }
        }

        else if ((*((_BYTE *)v16 + 1) & 1) != 0)
        {
          if ((_DWORD)v10 == (_DWORD)v17 + 2
            && !strncmp((const char *)(v11 + 1), *(const char **)&v5[4 * v14 + 2], v17))
          {
LABEL_28:
            uint64_t v21 = &v5[4 * v14 + 4];
            char v24 = *((_BYTE *)v21 + 1);
            double v22 = (char *)v21 + 1;
            char v23 = v24;
            if ((v24 & 0xC) != 0)
            {
LABEL_29:
              LODWORD(v8) = v58;
              goto LABEL_30;
            }

            LODWORD(v8) = v58;
            if (*(_BYTE *)(a3 + 16LL * (v58 + 1)) == 1)
            {
              *double v22 = v23 | 4;
              goto LABEL_30;
            }

            uint64_t v40 = v54 + v14;
            uint64_t v41 = sub_18135D080(a1, v40);
            uint64_t v5 = (_DWORD *)v41;
            if (v41)
            {
              uint64_t v42 = *((void *)a1 + 1);
              if (v41 != v42 + 16LL * v40)
              {
                uint64_t v43 = *a1;
                if (v43 >= a1[1])
                {
                  signed int v45 = sub_18135A184(a1, 0, v40, 0LL);
                }

                else
                {
                  uint64_t v44 = v42 + 16 * v43;
                  *(_WORD *)uint64_t v44 = 0;
                  *(_DWORD *)(v44 + 4) = v40;
                  *(void *)(v44 + 8) = 0LL;
                  signed int v45 = (*a1)++;
                }

                if (!*((_BYTE *)a1 + 51))
                {
                  uint64_t v46 = *((void *)a1 + 1);
                  *(_BYTE *)(v46 + 16 * v40 + 1) |= 8u;
                  uint64_t v47 = v46 + 16LL * v45;
                  *(_BYTE *)(v47 + 2) = 4;
                  *(_DWORD *)(v47 + 8) = a1[18];
                  a1[18] = v45;
                  *((_WORD *)a1 + 27) = 257;
                }

                else {
                  unsigned int v48 = v5[1] + 1;
                }
                unsigned int v49 = *a1;
                unsigned int v50 = *a1 + v48;
                uint64_t v51 = *((void *)a1 + 1);
                if (v50 <= a1[1])
                {
LABEL_68:
                  memcpy((void *)(v51 + 16LL * v49), v5, 16LL * v48);
                  *a1 += v48;
                }

                else
                {
                  if (!sqlite3_initialize())
                  {
                    uint64_t v52 = sub_18127D33C(v51, 16LL * v50);
                    if (v52)
                    {
                      uint64_t v51 = v52;
                      a1[1] = (int)off_18C4653B8(v52) >> 4;
                      *((void *)a1 + 1) = v51;
                      unsigned int v49 = *a1;
                      goto LABEL_68;
                    }
                  }

                  *((_BYTE *)a1 + 51) = 1;
                }

                LODWORD(v8) = v58;
              }

              uint64_t v56 = *((void *)a1 + 1);
              uint64_t v5 = (_DWORD *)(v56 + 16 * v55);
              unsigned int v12 = v5[1];
              goto LABEL_30;
            }

            return v5;
          }
        }

        else if ((_DWORD)v10 == (_DWORD)v17)
        {
          uint64_t v18 = *(const char **)&v5[4 * v14 + 2];
          __int16 v19 = (const char *)v11;
          goto LABEL_24;
        }

        uint64_t v20 = v14 + 1;
        if (LOBYTE(v5[4 * v20]) >= 7u) {
          int v15 = v5[4 * v20 + 1] + 1;
        }
        else {
          int v15 = 1;
        }
        unsigned int v14 = v20 + v15;
      }
    }

    unsigned int v14 = 1;
LABEL_30:
    uint64_t v25 = (v8 + 1);
    if (v14 >= v12)
    {
      uint64_t v26 = (_BYTE *)(a3 + 16 * v25);
      if (*v26 != 1)
      {
        uint64_t v27 = *a1;
        if (v27 >= a1[1])
        {
          signed int v29 = sub_18135A184(a1, 8, 0, 0LL);
          unsigned int v30 = *a1;
        }

        else
        {
          uint64_t v28 = v56 + 16 * v27;
          *(_WORD *)uint64_t v28 = 8;
          *(_DWORD *)(v28 + 4) = 0;
          *(void *)(v28 + 8) = 0LL;
          signed int v29 = *a1;
          unsigned int v30 = *a1 + 1;
          *a1 = v30;
        }

        if (v30 >= a1[1])
        {
          sub_18135A184(a1, 6, v10, v11);
        }

        else
        {
          uint64_t v31 = *((void *)a1 + 1) + 16LL * v30;
          *(_WORD *)uint64_t v31 = 6;
          *(_DWORD *)(v31 + 4) = v10;
          *(void *)(v31 + 8) = v11;
          ++*a1;
        }

        unsigned int v32 = *v26;
        if (v32 == 8)
        {
          sub_18135D598(a3 + 16 * v25);
          unsigned int v32 = *v26;
        }

        if (v32 < 7) {
          unsigned int v33 = 1;
        }
        else {
          unsigned int v33 = *(_DWORD *)(a3 + 16 * v25 + 4) + 1;
        }
        unsigned int v34 = *a1;
        unsigned int v35 = *a1 + v33;
        uint64_t v36 = *((void *)a1 + 1);
        if (v35 > a1[1])
        {
          if (sqlite3_initialize() || (uint64_t v37 = sub_18127D33C(v36, 16LL * v35)) == 0)
          {
            uint64_t v5 = 0LL;
            *((_BYTE *)a1 + 51) = 1;
            return v5;
          }

          uint64_t v36 = v37;
          a1[1] = (int)off_18C4653B8(v37) >> 4;
          *((void *)a1 + 1) = v36;
          unsigned int v34 = *a1;
        }

        memcpy((void *)(v36 + 16LL * v34), (const void *)(a3 + 16 * v25), 16LL * v33);
        *a1 += v33;
        if (*((_BYTE *)a1 + 51)) {
          return 0LL;
        }
        uint64_t v38 = *((void *)a1 + 1);
        *(_DWORD *)(v38 + 16LL * v29 + 4) = v33 + 1;
        uint64_t v39 = v38 + 16LL * v57;
        *(_BYTE *)(v39 + 1) |= 0x10u;
        *(_DWORD *)(v39 + 8) = v29;
        uint64_t v56 = *((void *)a1 + 1);
        uint64_t v5 = (_DWORD *)(v56 + 16 * v55);
        unsigned int v57 = v29;
      }
    }

    else {
      int v7 = 1;
    }
    unsigned int v6 = v25 + v7;
  }

  while (v6 < *(_DWORD *)(a3 + 4));
  return v5;
}

uint64_t sub_18135D598(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 4);
  if (v1 >= 2)
  {
    uint64_t v2 = result;
    int v3 = 2;
    while (1)
    {
      uint64_t v5 = v3;
      unsigned int v6 = (unsigned __int8 *)(v2 + 16LL * v3);
      unsigned int v7 = *v6;
      if (v7 == 8) {
        break;
      }
      if (v7 != 1) {
        goto LABEL_10;
      }
      *(_BYTE *)(v2 + 16 * v5 + 1) |= 4u;
      int v4 = 1;
LABEL_5:
      int v3 = v5 + v4 + 1;
      if (v3 > v1) {
        return result;
      }
    }

    uint64_t result = sub_18135D598(v6);
    unsigned int v7 = *v6;
LABEL_10:
    if (v7 >= 7) {
      int v4 = *(_DWORD *)(v2 + 16 * v5 + 4) + 1;
    }
    else {
      int v4 = 1;
    }
    goto LABEL_5;
  }

  return result;
}

void sub_18135D63C(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3 && *(void *)(v3 + 32))
    {
      uint64_t v5 = *((void *)a1 + 2);
      if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
      {
        unsigned int v6 = (unsigned __int8 *)sub_1812D8A04((uint64_t)a1, 0);
        if (!v6) {
          goto LABEL_8;
        }
LABEL_12:
        *(void *)unsigned int v6 = a1;
        unint64_t v8 = *((void *)v6 + 3);
        if (v8 >= *((void *)v6 + 2))
        {
          sub_18135BB8C((uint64_t)v6, 93);
          int v10 = v6[33];
          if (v6[33])
          {
LABEL_14:
            if (v10 == 1) {
              sqlite3_result_error_nomem(a1);
            }
            goto LABEL_9;
          }
        }

        else
        {
          uint64_t v9 = *((void *)v6 + 1);
          *((void *)v6 + 3) = v8 + 1;
          *(_BYTE *)(v9 + v8) = 93;
          int v10 = v6[33];
          if (v6[33]) {
            goto LABEL_14;
          }
        }

        uint64_t v11 = (char *)*((void *)v6 + 1);
        int v12 = *((_DWORD *)v6 + 6);
        if (a2)
        {
          if (v6[32]) {
            char v13 = (uint64_t (*)(uint64_t))-1LL;
          }
          else {
            char v13 = sub_181301F94;
          }
          sub_1812D7A8C((uint64_t)a1, v11, v12, 1u, v13);
          v6[32] = 1;
        }

        else
        {
          sub_1812D7A8C((uint64_t)a1, v11, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          --*((void *)v6 + 3);
        }

        goto LABEL_9;
      }

      unsigned int v6 = *(unsigned __int8 **)(v5 + 8);
      if (v6) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_1812CF36C(98123);
    }

void sub_18135D7C0(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3 && *(void *)(v3 + 32))
    {
      uint64_t v5 = *((void *)a1 + 2);
      if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
      {
        unsigned int v6 = (unsigned __int8 *)sub_1812D8A04((uint64_t)a1, 0);
        if (!v6) {
          goto LABEL_8;
        }
LABEL_12:
        unint64_t v8 = *((void *)v6 + 3);
        if (v8 >= *((void *)v6 + 2))
        {
          sub_18135BB8C((uint64_t)v6, 125);
          int v10 = v6[33];
          if (v6[33])
          {
LABEL_14:
            if (v10 == 1) {
              sqlite3_result_error_nomem(a1);
            }
            goto LABEL_9;
          }
        }

        else
        {
          uint64_t v9 = *((void *)v6 + 1);
          *((void *)v6 + 3) = v8 + 1;
          *(_BYTE *)(v9 + v8) = 125;
          int v10 = v6[33];
          if (v6[33]) {
            goto LABEL_14;
          }
        }

        uint64_t v11 = (char *)*((void *)v6 + 1);
        int v12 = *((_DWORD *)v6 + 6);
        if (a2)
        {
          if (v6[32]) {
            char v13 = (uint64_t (*)(uint64_t))-1LL;
          }
          else {
            char v13 = sub_181301F94;
          }
          sub_1812D7A8C((uint64_t)a1, v11, v12, 1u, v13);
          v6[32] = 1;
        }

        else
        {
          sub_1812D7A8C((uint64_t)a1, v11, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          --*((void *)v6 + 3);
        }

        goto LABEL_9;
      }

      unsigned int v6 = *(unsigned __int8 **)(v5 + 8);
      if (v6) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_1812CF36C(98123);
    }

uint64_t sub_18135D944()
{
  xmmword_18C550620 = 0u;
  *(_OWORD *)&qword_18C550630 = 0u;
  xmmword_18C550600 = 0u;
  *(_OWORD *)&dword_18C550610 = 0u;
  xmmword_18C5505E0 = 0u;
  *(_OWORD *)&qword_18C5505F0 = 0u;
  xmmword_18C5505C0 = 0u;
  unk_18C5505D0 = 0u;
  xmmword_18C5505B0 = 0u;
  uint64_t v0 = qword_18C4654B8;
  if (qword_18C4654B8) {
    BOOL v1 = word_18C465384 == 0;
  }
  else {
    BOOL v1 = 0;
  }
  int v2 = !v1;
  DWORD1(xmmword_18C550600) = v2;
  if ((_BYTE)word_18C465384)
  {
    *(void *)&xmmword_18C5505B0 = qword_18C4653F0(6LL);
    if ((_BYTE)word_18C465384) {
      uint64_t v3 = qword_18C4653F0(7LL);
    }
    else {
      uint64_t v3 = 0LL;
    }
    *((void *)&xmmword_18C550620 + 1) = v3;
    uint64_t v0 = qword_18C4654B8;
    LOBYTE(v2) = DWORD1(xmmword_18C550600) != 0;
  }

  if (!dword_18C4654C4) {
    LOBYTE(v2) = 0;
  }
  else {
    int v4 = 0;
  }
  DWORD2(xmmword_18C550600) = v4;
  LODWORD(xmmword_18C5505C0) = 10;
  LODWORD(xmmword_18C550600) = 1;
  return 0LL;
}

double sub_18135DA38()
{
  double result = 0.0;
  xmmword_18C550620 = 0u;
  *(_OWORD *)&qword_18C550630 = 0u;
  xmmword_18C550600 = 0u;
  *(_OWORD *)&dword_18C550610 = 0u;
  xmmword_18C5505E0 = 0u;
  *(_OWORD *)&qword_18C5505F0 = 0u;
  xmmword_18C5505C0 = 0u;
  unk_18C5505D0 = 0u;
  xmmword_18C5505B0 = 0u;
  return result;
}

unint64_t sub_18135DA5C(int a1, int a2, int a3)
{
  size_t v6 = 80 * DWORD1(xmmword_18C550600) + 88;
  uint64_t v7 = (void *)sub_18126F0AC(v6);
  unint64_t v8 = (unint64_t)v7;
  if (v7)
  {
    bzero(v7, v6);
    uint64_t v9 = &xmmword_18C5505B0;
    if (DWORD1(xmmword_18C550600))
    {
      uint64_t v9 = (__int128 *)(v8 + 88);
      *(_DWORD *)(v8 + 104) = 10;
    }

    if (!*((_WORD *)v9 + 23))
    {
      *((_WORD *)v9 + 23) = 1;
      *((void *)v9 + 8) = (char *)v9 + 24;
      *((void *)v9 + 9) = (char *)v9 + 24;
    }

    *(void *)unint64_t v8 = v9;
    *(_DWORD *)(v8 + 16) = a1;
    *(_DWORD *)(v8 + 20) = a2;
    *(_DWORD *)(v8 + 24) = ((a1 + 7) & 0xFFFFFFF8) + ((a2 + 7) & 0xFFFFFFF8) + 56;
    *(_DWORD *)(v8 + 28) = a3 != 0;
    sub_18135EA10(v8);
    if (a3)
    {
      *(_DWORD *)(v8 + 32) = 10;
      int v11 = *((_DWORD *)v9 + 2);
      int v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = v10 + 10;
      *((_DWORD *)v9 + 4) = v11 - v10;
      int v12 = (char *)v9 + 20;
    }

    else
    {
      int v12 = (char *)(v8 + 48);
    }

    *(void *)(v8 + 8) = v12;
    if (!*(_DWORD *)(v8 + 60))
    {
      sub_18135DDB4(v8);
      return 0LL;
    }
  }

  return v8;
}

void *sub_18135DB70(void *result, unsigned int a2)
{
  if (*((_DWORD *)result + 7))
  {
    uint64_t v2 = *result;
    int v3 = *((_DWORD *)result + 9);
    int v4 = *(_DWORD *)(*result + 8LL);
    int v5 = *(_DWORD *)(*result + 12LL);
    unsigned int v6 = v3 - v4 + 2147418112;
    if (v6 >= a2) {
      unsigned int v6 = a2;
    }
    int v7 = v6 - v3 + v4;
    *(_DWORD *)(v2 + 8) = v7;
    *(_DWORD *)(v2 + 16) = v7 - v5 + 10;
    *((_DWORD *)result + 9) = v6;
    *((_DWORD *)result + 10) = 9 * v6 / 0xA;
    return sub_18135EB84(result);
  }

  return result;
}

uint64_t sub_18135DBD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_18135DBD8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 64) + 8LL * (a2 % *(_DWORD *)(a1 + 60)));
  if (result)
  {
    while (*(_DWORD *)(result + 16) != a2)
    {
      uint64_t result = *(void *)(result + 24);
      if (!result) {
        goto LABEL_4;
      }
    }

    uint64_t v5 = *(void *)(result + 40);
    if (v5)
    {
      uint64_t v6 = *(void *)(result + 48);
      *(void *)(v6 + 40) = v5;
      uint64_t v7 = *(void *)(result + 32);
      *(void *)(*(void *)(result + 40) + 48LL) = v6;
      *(void *)(result + 40) = 0LL;
      --*(_DWORD *)(v7 + 52);
    }
  }

  else
  {
LABEL_4:
    if (a3) {
      return sub_18135ECF8(a1, a2, a3);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_18135DC48(unint64_t result, uint64_t a2, int a3)
{
  if (a3 || (uint64_t v3 = *(void *)result, *(_DWORD *)(*(void *)result + 20LL) > *(_DWORD *)(*(void *)result + 8LL)))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = (void *)(*(void *)(v4 + 64) + 8LL * (*(_DWORD *)(a2 + 16) % *(_DWORD *)(v4 + 60)));
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = *v5;
      uint64_t v5 = (void *)(*v5 + 24LL);
    }

    while (v7 != a2);
    *uint64_t v6 = *(void *)(a2 + 24);
    --*(_DWORD *)(v4 + 56);
    uint64_t v8 = *(void *)(a2 + 32);
    if (*(_WORD *)(a2 + 20))
    {
      *(void *)(a2 + 24) = *(void *)(v8 + 72);
      *(void *)(v8 + 72) = a2;
    }

    else
    {
      uint64_t result = sub_1812FC960(*(void *)a2);
    }

    uint64_t v9 = *(_DWORD **)(v8 + 8);
    int v10 = -1;
  }

  else
  {
    *(void *)(a2 + 48) = v3 + 24;
    uint64_t v11 = *(void *)(v3 + 64);
    *(void *)(a2 + 40) = v11;
    *(void *)(v11 + 48) = a2;
    *(void *)(v3 + 64) = a2;
    uint64_t v9 = (_DWORD *)(result + 52);
    int v10 = 1;
  }

  *v9 += v10;
  return result;
}

uint64_t sub_18135DD18(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = *(_DWORD *)(result + 60);
  uint64_t v5 = (void *)(*(void *)(result + 64) + 8LL * (a3 % v4));
  do
  {
    uint64_t v6 = v5;
    uint64_t v7 = *v5;
    uint64_t v5 = (void *)(*v5 + 24LL);
  }

  while (v7 != a2);
  *uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(result + 64);
  uint64_t v9 = 8LL * (a4 % v4);
  uint64_t v10 = *(void *)(v8 + v9);
  *(_DWORD *)(a2 + 16) = a4;
  *(void *)(a2 + 24) = v10;
  *(void *)(v8 + v9) = a2;
  if (*(_DWORD *)(result + 44) < a4) {
    *(_DWORD *)(result + 44) = a4;
  }
  return result;
}

unint64_t sub_18135DD7C(unint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 44) >= a2)
  {
    unint64_t v3 = result;
    uint64_t result = sub_18135F0AC(result, a2);
    *(_DWORD *)(v3 + 44) = a2 - 1;
  }

  return result;
}

uint64_t sub_18135DDB4(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = *(_DWORD **)a1;
  if (*(_DWORD *)(a1 + 56)) {
    sub_18135F0AC(a1, 0);
  }
  int v3 = v2[2] - *(_DWORD *)(v1 + 36);
  int v4 = v2[3] - *(_DWORD *)(v1 + 32);
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v3 - v4 + 10;
  sub_18135EB84((void *)v1);
  uint64_t v5 = *(void *)(v1 + 80);
  if (v5)
  {
    uint64_t v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_9:
      (*v6)(v5);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    uint64_t v5 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
      goto LABEL_9;
    }
  }

void *sub_18135DF90(void *result)
{
  if (*((_DWORD *)result + 7))
  {
    uint64_t v1 = *result;
    int v2 = *(_DWORD *)(*result + 8LL);
    *(_DWORD *)(*result + 8LL) = 0;
    uint64_t result = sub_18135EB84(result);
    *(_DWORD *)(v1 + 8) = v2;
  }

  return result;
}

unint64_t sub_18135DFC8(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(result + 40) + 8LL * (a4 % v8));
    if (v9)
    {
      while (*(_DWORD *)(v9 + 16) != a4)
      {
        uint64_t v9 = *(void *)(v9 + 24);
        if (!v9) {
          goto LABEL_9;
        }
      }

      uint64_t v16 = v9;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
        sub_1813C407C(v9, v7, a4);
      }
      uint64_t result = sub_18135E590((int *)v7, (unint64_t *)&v16);
      unsigned int v8 = *(_DWORD *)(v7 + 32);
    }
  }

void *sub_18135E0D4(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[18];
    if (v2)
    {
      int v3 = result + 19;
      int v4 = result + 20;
      uint64_t v5 = (unsigned int *)MEMORY[0x1895FBBE0];
      do
      {
        int v9 = 1;
        uint64_t result = (void *)MEMORY[0x186E0A734](*v5, *(void *)(v2 + 24), 0LL, &v9);
        if ((_DWORD)result) {
          break;
        }
        uint64_t result = sub_18135E470(v1, (uint64_t *)v2);
        if (*(unsigned __int8 *)(v2 + 33) + *(unsigned __int8 *)(v2 + 34) < *((_DWORD *)v1 + 31))
        {
          uint64_t v6 = *v3;
          if (*v3)
          {
            *(void *)(v6 + 8) = v2;
            *(void *)uint64_t v2 = v6;
          }

          else
          {
            *int v4 = v2;
          }

          uint64_t v7 = v1 + 19;
        }

        else
        {
          unsigned int v8 = (void *)*v4;
          if (*v4)
          {
            *unsigned int v8 = v2;
            *(void *)(v2 + 8) = v8;
          }

          else
          {
            *int v3 = v2;
          }

          uint64_t v7 = v1 + 20;
        }

        *uint64_t v7 = v2;
        *(_BYTE *)(v2 + 32) = 1;
        uint64_t v2 = v1[18];
      }

      while (v2);
    }
  }

  return result;
}

uint64_t sub_18135E1B8(uint64_t result)
{
  if (*(_DWORD *)(result + 132) > *(_DWORD *)(result + 128))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 152);
    if (v2)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128)) {
          break;
        }
        uint64_t v8 = *(void *)v2;
        uint64_t v2 = v8;
      }

      while (v8);
    }

    uint64_t v3 = *(void *)(v1 + 136);
    if (v3)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128)) {
          break;
        }
        uint64_t v9 = *(void *)v3;
        uint64_t v3 = v9;
      }

      while (v9);
    }

    int v4 = *(void **)(v1 + 152);
    if (v4)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128)) {
          break;
        }
        uint64_t v5 = (void *)*v4;
        uint64_t result = sub_18135E2A8(v1, (uint64_t)v4);
        int v4 = v5;
      }

      while (v5);
    }

    uint64_t v6 = *(void **)(v1 + 136);
    if (v6)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128)) {
          break;
        }
        uint64_t v7 = (void *)*v6;
        uint64_t result = sub_18135E2A8(v1, (uint64_t)v6);
        uint64_t v6 = v7;
      }

      while (v7);
    }
  }

  return result;
}

uint64_t sub_18135E2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  if (*(_BYTE *)(a2 + 34))
  {
    int v4 = *(_DWORD *)(a1 + 124);
    if (v4 >= 1)
    {
      for (uint64_t i = 0LL; i < v4; ++i)
      {
        unint64_t v11 = *(void *)(v2[2] + 8 * i);
        if (v11)
        {
          sub_18135E590((int *)a1, &v11);
          int v4 = *(_DWORD *)(a1 + 124);
        }
      }
    }
  }

  sub_18135E470((void *)a1, v2);
  --*(_DWORD *)(a1 + 132);
  uint64_t v6 = v2[2];
  if (v6)
  {
    uint64_t v7 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_13:
      (*v7)(v6);
      goto LABEL_14;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v6);
    --qword_18C468B10;
    off_18C4653A8(v6);
    uint64_t v6 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v7 = &xmmword_18C465410;
      goto LABEL_13;
    }
  }

void *sub_18135E470(void *result, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 32);
  if (v2 == 2)
  {
    uint64_t v7 = *a2;
    int v4 = a2 + 1;
    uint64_t v8 = (void *)a2[1];
    if (v8)
    {
      *uint64_t v8 = v7;
      uint64_t v7 = *a2;
    }

    if (v7) {
      *(void *)(v7 + 8) = v8;
    }
    uint64_t v9 = (uint64_t *)result[18];
    result += 18;
    if (v9 != a2) {
      goto LABEL_31;
    }
LABEL_30:
    *uint64_t result = *v4;
LABEL_31:
    *a2 = 0LL;
    a2[1] = 0LL;
    return result;
  }

  if (v2 == 1)
  {
    uint64_t v10 = *a2;
    int v4 = a2 + 1;
    unint64_t v11 = (void *)a2[1];
    if (v11)
    {
      *unint64_t v11 = v10;
      uint64_t v10 = *a2;
    }

    if (v10) {
      *(void *)(v10 + 8) = v11;
    }
    uint64_t v12 = (uint64_t *)result[20];
    result += 20;
    if (v12 != a2) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  if (!*((_BYTE *)a2 + 32))
  {
    uint64_t v3 = *a2;
    if (*a2 || (uint64_t *)result[22] == a2)
    {
      int v4 = a2 + 1;
      uint64_t v5 = (void *)a2[1];
      if (v5)
      {
        *uint64_t v5 = v3;
        uint64_t v3 = *a2;
      }

      if (v3) {
        *(void *)(v3 + 8) = v5;
      }
      uint64_t v6 = (uint64_t *)result[22];
      result += 22;
      if (v6 != a2) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }

  return result;
}

unint64_t sub_18135E590(int *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 56);
  *a2 = 0LL;
  if (v5) {
    *(void *)(*(void *)(v5 + 16) + 8 * ((*(void *)v4 - *(void *)(v5 + 24)) / (a1[1] + (uint64_t)*a1))) = 0LL;
  }
  uint64_t v6 = (uint64_t *)(*((void *)a1 + 5) + 8LL * (*(_DWORD *)(v4 + 16) % a1[8]));
  uint64_t v7 = *v6;
  if (*v6 != v4)
  {
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 24);
    }

    while (v7 != v4);
    uint64_t v6 = (uint64_t *)(v8 + 24);
  }

  *uint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = 0LL;
  --a1[7];
  unint64_t v9 = *(unsigned __int8 *)(v4 + 33);
  if (v9 <= 3
    && ((v10 = (uint64_t *)(v4 + 40), (uint64_t v11 = *(void *)(v4 + 40)) != 0) || *(uint64_t **)&a1[4 * v9 + 16] == v10))
  {
    uint64_t v12 = *(void **)(v4 + 48);
    if (v12)
    {
      *uint64_t v12 = v11;
      uint64_t v11 = *v10;
    }

    uint64_t v13 = &a1[4 * v9 + 14];
    if (v11) {
      *(void *)(v11 + 8) = v12;
    }
    uint64_t v14 = &a1[4 * v9];
    uint64_t v16 = (uint64_t *)*((void *)v14 + 8);
    uint64_t v15 = v14 + 16;
    if (v16 == v10) {
      *uint64_t v15 = *(void *)(v4 + 48);
    }
    uint64_t *v10 = 0LL;
    *(void *)(v4 + 48) = 0LL;
    *(_BYTE *)(v4 + 33) = 4;
    --a1[6];
    if (v5) {
      --*(_BYTE *)(v5 + 34);
    }
  }

  else
  {
    sub_18135E744(a1, v5, 3);
  }

  if (dword_18C465380)
  {
    uint64_t v17 = a1[1] + (uint64_t)*a1;
    uint64_t v18 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      xmmword_18C465400(xmmword_18C468B70);
      uint64_t v18 = xmmword_18C468B70;
    }

    qword_18C468AC8 -= v17;
    --qword_18C468B10;
    if (v18) {
      xmmword_18C465410(v18);
    }
  }

  return sub_1812FC960(v4);
}

void *sub_18135E744(void *result, uint64_t a2, int a3)
{
  if (!a2) {
    return result;
  }
  if (a3 == 4)
  {
    --*(_BYTE *)(a2 + 34);
    return result;
  }

  unint64_t v4 = result;
  unsigned __int8 v5 = *(_BYTE *)(a2 + 33) - 1;
  *(_BYTE *)(a2 + 33) = v5;
  if (a3 == 2)
  {
    ++*(_BYTE *)(a2 + 34);
    if (v5) {
      return result;
    }
    goto LABEL_13;
  }

  if (!v5)
  {
LABEL_13:
    uint64_t result = sub_18135E470(result, (uint64_t *)a2);
    uint64_t v8 = v4 + 17;
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *((_DWORD *)v4 + 31))
    {
      uint64_t v12 = (void *)v4[18];
      uint64_t v11 = v4 + 18;
      uint64_t v10 = v12;
      if (v12)
      {
        void *v10 = a2;
        *(void *)(a2 + 8) = v10;
      }

      else
      {
        *uint64_t v8 = a2;
      }

      uint64_t v8 = v11;
    }

    else
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        *(void *)(v9 + 8) = a2;
        *(void *)a2 = v9;
      }

      else
      {
        v4[18] = a2;
      }
    }

    *uint64_t v8 = a2;
    *(_BYTE *)(a2 + 32) = 2;
    return result;
  }

  if (a3 == 3 && *(unsigned __int8 *)(a2 + 34) + v5 == *((_DWORD *)result + 31) - 1)
  {
    uint64_t result = sub_18135E470(result, (uint64_t *)a2);
    uint64_t v6 = v4 + 21;
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *((_DWORD *)v4 + 31))
    {
      uint64_t v15 = (void *)v4[22];
      uint64_t v14 = v4 + 22;
      uint64_t v13 = v15;
      if (v15)
      {
        void *v13 = a2;
        *(void *)(a2 + 8) = v13;
      }

      else
      {
        *uint64_t v6 = a2;
      }

      uint64_t v6 = v14;
    }

    else
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        *(void *)(v7 + 8) = a2;
        *(void *)a2 = v7;
      }

      else
      {
        v4[22] = a2;
      }
    }

    *uint64_t v6 = a2;
    *(_BYTE *)(a2 + 32) = 0;
  }

  return result;
}

uint64_t sub_18135E8AC(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    uint64_t v6 = 0LL;
    if (!a3) {
      return v6;
    }
    goto LABEL_6;
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL * (a2 % v4));
  if (!v6)
  {
LABEL_5:
    unsigned int v4 = 0;
    if (!a3) {
      return v6;
    }
LABEL_6:
    *a3 = v4;
    return v6;
  }

  while (*(_DWORD *)(v6 + 16) != a2)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6) {
      goto LABEL_5;
    }
  }

  unint64_t v8 = *(unsigned __int8 *)(v6 + 33);
  if (v8 <= 3)
  {
    uint64_t v9 = (uint64_t *)(v6 + 40);
    if (*(void *)(v6 + 40) || *(uint64_t **)(a1 + 16 * v8 + 64) == v9)
    {
      int v10 = sub_18127F1E4(a1, *(void *)(v6 + 56), 1, &v18);
      if (v10 | v18)
      {
        uint64_t v6 = 0LL;
      }

      else
      {
        unint64_t v11 = *(unsigned __int8 *)(v6 + 33);
        if (v11 <= 3)
        {
          uint64_t v12 = (uint64_t *)*v9;
          if (*v9 || *(uint64_t **)(a1 + 16 * v11 + 64) == v9)
          {
            uint64_t v13 = *(uint64_t ***)(v6 + 48);
            if (v13)
            {
              void *v13 = v12;
              uint64_t v12 = (uint64_t *)*v9;
            }

            uint64_t v14 = (uint64_t **)(a1 + 16 * v11 + 56);
            if (v12) {
              v12[1] = (uint64_t)v13;
            }
            if (*v14 == v9) {
              *uint64_t v14 = v12;
            }
            unint64_t v15 = a1 + 16 * v11;
            uint64_t v17 = *(uint64_t **)(v15 + 64);
            uint64_t v16 = (void *)(v15 + 64);
            if (v17 == v9) {
              *uint64_t v16 = *(void *)(v6 + 48);
            }
            *uint64_t v9 = 0LL;
            *(void *)(v6 + 48) = 0LL;
            *(_BYTE *)(v6 + 33) = 4;
            --*(_DWORD *)(a1 + 24);
          }
        }
      }
    }
  }

  unsigned int v4 = 1;
  if (a3) {
    goto LABEL_6;
  }
  return v6;
}

void sub_18135EA10(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 60);
  else {
    unsigned int v3 = 2 * v2;
  }
  if (v2 && off_18C550648) {
    off_18C550648(a1);
  }
  unsigned int v4 = (char *)sub_18126F0AC(8LL * v3);
  unsigned __int8 v5 = v4;
  if (v4) {
    bzero(v4, 8LL * v3);
  }
  if (*(_DWORD *)(a1 + 60) && off_18C550650) {
    off_18C550650(v4);
  }
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v6)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8 * i);
        if (v8)
        {
          do
          {
            uint64_t v9 = *(void *)(v8 + 24);
            uint64_t v10 = 8LL * (*(_DWORD *)(v8 + 16) % v3);
            *(void *)(v8 + 24) = *(void *)&v5[v10];
            *(void *)&v5[v10] = v8;
            uint64_t v8 = v9;
          }

          while (v9);
        }
      }
    }

    uint64_t v11 = *(void *)(a1 + 64);
    if (!v11) {
      goto LABEL_26;
    }
    uint64_t v12 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
      --qword_18C468B10;
      off_18C4653A8(v11);
      uint64_t v11 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_26;
      }
      uint64_t v12 = &xmmword_18C465410;
    }

    (*v12)(v11);
LABEL_26:
    *(void *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 60) = v3;
  }

void *sub_18135EB84(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  while (*(_DWORD *)(v2 + 20) > *(_DWORD *)(v2 + 8))
  {
    uint64_t v3 = *(void *)(v2 + 72);
    if (*(_WORD *)(v3 + 22)) {
      break;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = *(void *)(v3 + 32);
    *(void *)(v4 + 40) = *(void *)(v3 + 40);
    *(void *)(*(void *)(v3 + 40) + 48LL) = v4;
    *(void *)(v3 + 40) = 0LL;
    --*(_DWORD *)(v5 + 52);
    uint64_t v6 = (void *)(*(void *)(v5 + 64) + 8LL * (*(_DWORD *)(v3 + 16) % *(_DWORD *)(v5 + 60)));
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *v6;
      uint64_t v6 = (void *)(*v6 + 24LL);
    }

    while (v8 != v3);
    *uint64_t v7 = *(void *)(v3 + 24);
    --*(_DWORD *)(v5 + 56);
    uint64_t v9 = *(void *)(v3 + 32);
    if (*(_WORD *)(v3 + 20))
    {
      *(void *)(v3 + 24) = *(void *)(v9 + 72);
      *(void *)(v9 + 72) = v3;
    }

    else
    {
      uint64_t result = (void *)sub_1812FC960(*(void *)v3);
    }

    --**(_DWORD **)(v9 + 8);
  }

  if (!*((_DWORD *)v1 + 14))
  {
    uint64_t v10 = v1[10];
    if (v10)
    {
      uint64_t v11 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
        --qword_18C468B10;
        uint64_t result = (void *)off_18C4653A8(v10);
        uint64_t v10 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_18;
        }
        uint64_t v11 = &xmmword_18C465410;
      }

      uint64_t result = (void *)(*v11)(v10);
LABEL_18:
      v1[9] = 0LL;
      v1[10] = 0LL;
    }
  }

  return result;
}

uint64_t sub_18135ECF8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)a1;
  unsigned int v7 = *(_DWORD *)(a1 + 56);
  if (a3 == 1)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 52);
    unsigned int v9 = v7 - v8;
    if (v7 - v8 >= *(_DWORD *)(v6 + 16) || v9 >= *(_DWORD *)(a1 + 40)) {
      return 0LL;
    }
    if (dword_18C550610 && *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) <= SHIDWORD(xmmword_18C550600))
    {
      if (!dword_18C55063C) {
        goto LABEL_10;
      }
    }

    else if (!dword_18C468B88)
    {
      goto LABEL_10;
    }

    if (v8 < v9) {
      return 0LL;
    }
  }

unint64_t sub_18135F0AC(unint64_t result, unsigned int a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 44);
  unsigned int v5 = *(_DWORD *)(result + 60);
  if (v4 - a2 >= v5)
  {
    unsigned int v6 = v5 >> 1;
    int v7 = (v5 >> 1) - 1;
  }

  else
  {
    unsigned int v6 = a2 % v5;
    int v7 = v4 % v5;
  }

  while (1)
  {
    unsigned int v8 = (uint64_t *)(*(void *)(v3 + 64) + 8LL * v6);
    for (uint64_t i = *v8; *v8; uint64_t i = *v8)
    {
      while (*(_DWORD *)(i + 16) < a2)
      {
        unsigned int v8 = (uint64_t *)(i + 24);
        uint64_t i = *(void *)(i + 24);
        if (!i) {
          goto LABEL_15;
        }
      }

      --*(_DWORD *)(v3 + 56);
      *unsigned int v8 = *(void *)(i + 24);
      uint64_t v10 = *(void *)(i + 40);
      if (v10)
      {
        uint64_t v11 = *(void *)(i + 48);
        *(void *)(v11 + 40) = v10;
        uint64_t v12 = *(void *)(i + 32);
        *(void *)(*(void *)(i + 40) + 48LL) = v11;
        *(void *)(i + 40) = 0LL;
        --*(_DWORD *)(v12 + 52);
        if (!*(_WORD *)(i + 20)) {
          goto LABEL_13;
        }
      }

      else
      {
        uint64_t v12 = *(void *)(i + 32);
        if (!*(_WORD *)(i + 20))
        {
LABEL_13:
          uint64_t result = sub_1812FC960(*(void *)i);
          goto LABEL_14;
        }
      }

      *(void *)(i + 24) = *(void *)(v12 + 72);
      *(void *)(v12 + 72) = i;
LABEL_14:
      --**(_DWORD **)(v12 + 8);
    }

void *sub_18135F1D4(void *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v2 = (void *)(a2 + 80);
  uint64_t v3 = v4;
  if (v4)
  {
    if (*(void **)v3 == result)
    {
LABEL_6:
      *uint64_t v2 = *(void *)(v3 + 40);
      unsigned int v6 = *(void **)v3;
      int v7 = *(_DWORD *)(v3 + 24) - 1;
      *(_DWORD *)(v3 + 24) = v7;
      if (!v7)
      {
        uint64_t v8 = *(void *)(v3 + 16);
        unsigned int v9 = v6;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
          unsigned int v9 = *(void **)v3;
        }

        uint64_t v10 = *(void *)(v3 + 8);
        int v11 = *(_DWORD *)(v10 + 16) - 1;
        *(_DWORD *)(v10 + 16) = v11;
        if (!v11)
        {
          uint64_t v12 = *(void (**)(void))(v10 + 32);
          if (v12) {
            v12(*(void *)(v10 + 24));
          }
          sub_1812F20DC(v9, (void *)v10);
        }

        return sub_1812F20DC(v6, (void *)v3);
      }
    }

    else
    {
      while (1)
      {
        uint64_t v5 = v3;
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          break;
        }
        if (*(void **)v3 == result)
        {
          uint64_t v2 = (void *)(v5 + 40);
          goto LABEL_6;
        }
      }
    }
  }

  return result;
}

void *sub_18135F2A4(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    if ((*(_DWORD *)v2)-- == 1)
    {
      uint64_t v4 = result;
      (*(void (**)(void))(v2 + 8))(*(void *)(v2 + 16));
      return sub_1812F20DC(v4, (void *)v2);
    }
  }

  return result;
}

uint64_t sub_18135F2F4(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1812FDE20(a1);
    if (*((_BYTE *)v8 + 36))
    {
LABEL_5:
      uint64_t v9 = 6LL;
      if (!*(_BYTE *)(a1 + 17)) {
        return v9;
      }
      goto LABEL_18;
    }
  }

  else if (*((_BYTE *)v8 + 36))
  {
    goto LABEL_5;
  }

  uint64_t v10 = *v8;
  int v11 = *(sqlite3 **)a1;
  uint64_t v12 = *(void *)(v10 + 344);
  if (!v12)
  {
    if (*(_BYTE *)(v10 + 9) != 5
      || (sqlite3_exec(*(sqlite3 **)a1, "PRAGMA table_list", 0LL, 0LL, 0LL), (uint64_t v12 = *(void *)(v10 + 344)) == 0))
    {
      uint64_t v9 = 0LL;
      if (!*(_BYTE *)(a1 + 17)) {
        return v9;
      }
      goto LABEL_18;
    }
  }

  if (a2) {
    uint64_t v13 = *(unsigned int (**)(uint64_t))(v10 + 232);
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v9 = sub_1812C09C4( v12,  (uint64_t)v11,  a2,  v13,  *(void *)(v10 + 240),  *(unsigned __int8 *)(v10 + 15),  *(_DWORD *)(v10 + 200),  *(void *)(v10 + 328),  a3,  a4);
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_18:
    int v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14) {
      sub_1812FDEFC(a1);
    }
  }

  return v9;
}

uint64_t sub_18135F430(int a1, int a2, char *__s1, int a4, char *__s2)
{
  uint64_t v5 = a2;
  int v6 = a2 + 1;
  while (v5)
  {
    int v7 = &__s1[v5--];
    --v6;
    if (*(v7 - 1) != 32) {
      goto LABEL_6;
    }
  }

  int v6 = 0;
LABEL_6:
  uint64_t v8 = a4;
  int v9 = a4 + 1;
  while (v8)
  {
    uint64_t v10 = &__s2[v8--];
    --v9;
    if (*(v10 - 1) != 32) {
      goto LABEL_11;
    }
  }

  int v9 = 0;
LABEL_11:
  unsigned int v11 = v6 - v9;
  if (v6 >= v9) {
    int v6 = v9;
  }
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v11;
  }
}

void sub_18135F4C0(uint64_t a1)
{
  if (sqlite3_overload_function((sqlite3 *)a1, "MATCH", 2) == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v8 = *(void *)(a1 + 344);
    if (v8)
    {
      sub_1812DC47C(v8, "out of memory", v2, v3, v4, v5, v6, v7, v10);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

uint64_t sub_18135F564(unsigned __int8 *a1)
{
  if (!a1)
  {
    uint64_t v3 = "NULL";
    goto LABEL_12;
  }

  int v2 = a1[113];
  if (v2 == 186)
  {
LABEL_5:
    uint64_t v3 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1812CF36C(161256);
  }

  if (v2 != 118)
  {
    if (v2 != 109)
    {
      uint64_t v3 = "invalid";
      goto LABEL_12;
    }

    goto LABEL_5;
  }

  module_int v2 = sub_18126D760((uint64_t)a1, "fts4aux", (uint64_t)&unk_189B6EE10, 0LL, 0LL);
  if ((_DWORD)module_v2) {
    return module_v2;
  }
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v6 = sub_18126F0AC(40LL);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = (_DWORD *)v6;
  *(_WORD *)uint64_t v6 = 257;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 12) = 0LL;
  *(void *)(v6 + 4) = 0LL;
  *(_DWORD *)(v6 + 32) = 0;
  module_int v2 = 7LL;
  if (sub_18126D2EC(v6, "simple", 7LL, (uint64_t)&unk_189B6F010)
    || sub_18126D2EC((uint64_t)v7, "porter", 7LL, (uint64_t)&unk_189B6F048)
    || sub_18126D2EC((uint64_t)v7, "unicode61", 10LL, (uint64_t)&unk_189B6EDD8)
    || (module_int v2 = sub_1812E0AEC( (uint64_t)a1,  "fts3_tokenizer",  1LL,  524289,  (uint64_t)v7,  (uint64_t)sub_181367E48,  0LL,  0LL,  0LL,  0LL,  0LL),  (_DWORD)module_v2)
    || (module_int v2 = sub_1812E0AEC( (uint64_t)a1,  "fts3_tokenizer",  2LL,  524289,  (uint64_t)v7,  (uint64_t)sub_181367E48,  0LL,  0LL,  0LL,  0LL,  0LL),  (_DWORD)module_v2)
    || (module_int v2 = sqlite3_overload_function((sqlite3 *)a1, "snippet", -1), (_DWORD)module_v2)
    || (module_int v2 = sqlite3_overload_function((sqlite3 *)a1, "offsets", 1), (_DWORD)module_v2)
    || (module_int v2 = sqlite3_overload_function((sqlite3 *)a1, "matchinfo", 1), (_DWORD)module_v2)
    || (module_int v2 = sqlite3_overload_function((sqlite3 *)a1, "matchinfo", 2), (_DWORD)module_v2)
    || (module_int v2 = sqlite3_overload_function((sqlite3 *)a1, "optimize", 1), (_DWORD)module_v2))
  {
    sub_18136017C((uint64_t)v7);
    uint64_t v8 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = (_DWORD *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return module_v2;
      }
      uint64_t v8 = &xmmword_18C465410;
    }

    (*v8)(v7);
    return module_v2;
  }

  ++v7[8];
  module_int v2 = sqlite3_create_module_v2( (sqlite3 *)a1,  "fts3",  &stru_189B6ED18,  v7,  (void (__cdecl *)(void *))sub_1812BFCC8);
  if ((_DWORD)module_v2) {
    return module_v2;
  }
  ++v7[8];
  module_int v2 = sqlite3_create_module_v2( (sqlite3 *)a1,  "fts4",  &stru_189B6ED18,  v7,  (void (__cdecl *)(void *))sub_1812BFCC8);
  if ((_DWORD)module_v2) {
    return module_v2;
  }
  ++v7[8];
  return sub_1813600E0((uint64_t)a1, (uint64_t)v7);
}

uint64_t sub_18135F8F0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v3 = sub_18126F0AC(80LL);
  if (!v3) {
    return 7LL;
  }
  uint64_t v4 = v3;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)uint64_t v3 = 2;
  *(void *)(v3 + 24) = sub_1813860D4;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 8) = sub_181386190;
  *(void *)(v3 + 16) = sub_181386250;
  if (!a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_26;
  }

  int v5 = *(unsigned __int8 *)(a1 + 113);
  if (v5 == 186)
  {
LABEL_9:
    uint64_t v6 = "unopened";
LABEL_26:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1812CF36C(161272);
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_26;
    }

    goto LABEL_9;
  }

  uint64_t result = sub_18126D760(a1, "fts5", (uint64_t)&unk_189B6F240, v3, (void (*)(uint64_t))sub_1813862E8);
  if (!(_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void, void, void))(v4 + 24))( v4,  "snippet",  0LL,  sub_1813A3A40,  0LL);
    BOOL v7 = result == 0;
    if (!(_DWORD)result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void, void, void))(v4 + 24))( v4,  "highlight",  0LL,  sub_1813A45C4,  0LL);
      BOOL v7 = result == 0;
      if (!(_DWORD)result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void, void, void))(v4 + 24))( v4,  "bm25",  0LL,  sub_1813A49C8,  0LL);
        BOOL v7 = result == 0;
      }
    }

    if (v7)
    {
      v13[0] = xmmword_189B6F438;
      v13[1] = *(_OWORD *)&off_189B6F448;
      v14[0] = xmmword_189B6F458;
      v14[1] = *(_OWORD *)off_189B6F468;
      v12[0] = xmmword_189B6F418;
      v12[1] = *(_OWORD *)&off_189B6F428;
      *((void *)&v11[0] + 1) = 0x1813A56F4LL;
      v11[1] = *(_OWORD *)&off_189B6F408;
      uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, char *, void))(v4 + 8))( v4,  "unicode61",  v4,  (char *)v11 + 8,  0LL);
      BOOL v8 = result == 0;
      if (!(_DWORD)result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *, void))(v4 + 8))( v4,  *(void *)&v12[0],  v4,  (char *)v12 + 8,  0LL);
        BOOL v8 = result == 0;
        if (!(_DWORD)result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *, void))(v4 + 8))( v4,  *(void *)&v13[0],  v4,  (char *)v13 + 8,  0LL);
          BOOL v8 = result == 0;
          if (!(_DWORD)result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *, void))(v4 + 8))( v4,  *(void *)&v14[0],  v4,  (char *)v14 + 8,  0LL);
            BOOL v8 = result == 0;
          }
        }
      }

      if (v8)
      {
        int v9 = *(unsigned __int8 *)(a1 + 113);
        if (v9 == 186) {
          goto LABEL_24;
        }
        if (v9 != 118)
        {
          if (v9 != 109)
          {
            char v10 = "invalid";
            goto LABEL_31;
          }

uint64_t sub_18135FC98(uint64_t a1)
{
  uint64_t result = sub_1812E0AEC(a1, "rtreenode", 2LL, 1, 0LL, (uint64_t)sub_1813ABC04, 0LL, 0LL, 0LL, 0LL, 0LL);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_1812E0AEC(a1, "rtreedepth", 1LL, 1, 0LL, (uint64_t)sub_1813AC030, 0LL, 0LL, 0LL, 0LL, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = sub_1812E0AEC(a1, "rtreecheck", 0xFFFFFFFFLL, 1, 0LL, (uint64_t)sub_1813AC170, 0LL, 0LL, 0LL, 0LL, 0LL);
      if (!(_DWORD)result)
      {
        if (!a1)
        {
          uint64_t v4 = "NULL";
          goto LABEL_16;
        }

        int v3 = *(unsigned __int8 *)(a1 + 113);
        if (v3 != 186)
        {
          if (v3 == 118)
          {
            uint64_t result = sub_18126D760(a1, "rtree", (uint64_t)&unk_18C550088, 0LL, 0LL);
            if ((_DWORD)result) {
              return result;
            }
            int v5 = *(unsigned __int8 *)(a1 + 113);
            switch(v5)
            {
              case 186:
                goto LABEL_9;
              case 118:
                return sub_18126D760(a1, "rtree_i32", (uint64_t)&unk_18C550088, 1LL, 0LL);
              case 109:
                goto LABEL_9;
            }
          }

          else if (v3 == 109)
          {
            goto LABEL_9;
          }

          uint64_t v4 = "invalid";
          goto LABEL_16;
        }

uint64_t sub_18135FE38(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_18126D760(a1, "dbstat", (uint64_t)&unk_18C550148, 0LL, 0LL);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }

  else
  {
    int v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1812CF36C(161256);
}

uint64_t sub_18135FED0()
{
  if (off_18C465520) {
    return off_18C465520(500LL);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18135FEEC(uint64_t a1)
{
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_12;
  }

  int v2 = *(unsigned __int8 *)(a1 + 113);
  int v3 = "unopened";
  if (v2 != 109)
  {
    if (v2 == 118)
    {
      uint64_t result = sub_18126D760(a1, "json_each", (uint64_t)&unk_18C550208, 0LL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
      int v5 = *(unsigned __int8 *)(a1 + 113);
      int v3 = "unopened";
      if (v5 == 109 || v5 == 186) {
        goto LABEL_12;
      }
      if (v5 == 118) {
        return sub_18126D760(a1, "json_tree", (uint64_t)&unk_18C5502C8, 0LL, 0LL);
      }
      goto LABEL_5;
    }

    if (v2 != 186) {
LABEL_5:
    }
      int v3 = "invalid";
  }

uint64_t sub_18135FFF0(uint64_t a1)
{
  uint64_t v5 = a1;
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_8;
  }

  int v2 = *(unsigned __int8 *)(a1 + 113);
  if (v2 == 186) {
    goto LABEL_5;
  }
  if (v2 != 118) {
    goto LABEL_4;
  }
  uint64_t result = sub_18126D760(a1, "bytecode", (uint64_t)&unk_18C550388, 0LL, 0LL);
  if ((_DWORD)result) {
    return result;
  }
  int v2 = *(unsigned __int8 *)(a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    int v3 = "unopened";
LABEL_8:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1812CF36C(161256);
  }

  if (v2 != 118)
  {
LABEL_4:
    if (v2 != 109)
    {
      int v3 = "invalid";
      goto LABEL_8;
    }

    goto LABEL_5;
  }

  return sub_18126D760(a1, "tables_used", (uint64_t)&unk_18C550388, (uint64_t)&v5, 0LL);
}

uint64_t sub_1813600E0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_18126D760( a1,  "fts3tokenize",  (uint64_t)&unk_189B6F180,  a2,  (void (*)(uint64_t))sub_1812BFCC8);
      case 109:
LABEL_5:
        int v3 = "unopened";
        break;
      default:
        int v3 = "invalid";
        break;
    }
  }

  else
  {
    int v3 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v3);
  return sub_1812CF36C(161272);
}

uint64_t sub_18136017C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(void **)(result + 8);
  *(void *)(result + 8) = 0LL;
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    uint64_t v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (*v4)(v3);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v3);
    uint64_t v3 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v4 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_18136034C(int a1, uint64_t a2, uint64_t *a3)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  BOOL v7 = (void *)sub_18126F0AC(24LL);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = (uint64_t)v7;
  *BOOL v7 = 0LL;
  v7[1] = 0LL;
  v7[2] = 0LL;
  *((_DWORD *)v7 + 2) = 1;
  if (a1 < 1)
  {
    uint64_t v6 = 0LL;
    goto LABEL_51;
  }

  unint64_t v9 = 0LL;
  unint64_t v10 = a1;
  do
  {
    uint64_t v15 = *(void *)(a2 + 8 * v9);
    int v16 = strlen((const char *)v15);
    if (v16 == 19)
    {
      if (*(void *)v15 == 0x645F65766F6D6572LL
        && *(void *)(v15 + 8) == 0x6369746972636169LL
        && *(void *)(v15 + 11) == 0x313D736369746972LL)
      {
        uint64_t v6 = 0LL;
        *(_DWORD *)(v8 + 8) = 1;
        goto LABEL_8;
      }

      if (*(void *)v15 == 0x645F65766F6D6572LL
        && *(void *)(v15 + 8) == 0x6369746972636169LL
        && *(void *)(v15 + 11) == 0x303D736369746972LL)
      {
        uint64_t v6 = 0LL;
        *(_DWORD *)(v8 + 8) = 0;
        goto LABEL_8;
      }

      if (*(void *)v15 == 0x645F65766F6D6572LL
        && *(void *)(v15 + 8) == 0x6369746972636169LL
        && *(void *)(v15 + 11) == 0x323D736369746972LL)
      {
        uint64_t v6 = 0LL;
        *(_DWORD *)(v8 + 8) = 2;
        goto LABEL_8;
      }
    }

    else if (v16 < 11)
    {
      goto LABEL_49;
    }

    if (*(void *)v15 == 0x6168636E656B6F74LL && *(void *)(v15 + 3) == 0x3D73726168636E65LL)
    {
      unsigned int v11 = (char *)(v15 + 11);
      int v12 = v16 - 11;
      uint64_t v13 = v8;
      int v14 = 1;
    }

    else
    {
      if (*(void *)v15 != 0x6F74617261706573LL || *(void *)(v15 + 3) != 0x3D73726F74617261LL)
      {
LABEL_49:
        uint64_t v6 = 1LL;
        goto LABEL_50;
      }

      unsigned int v11 = (char *)(v15 + 11);
      int v12 = v16 - 11;
      uint64_t v13 = v8;
      int v14 = 0;
    }

    uint64_t v6 = sub_181360EA8(v13, v14, v11, v12);
    if ((_DWORD)v6) {
      break;
    }
LABEL_8:
    ++v9;
  }

  while (v9 < v10);
  if (!(_DWORD)v6) {
    goto LABEL_51;
  }
LABEL_50:
  sub_181360588(v8);
  uint64_t v8 = 0LL;
LABEL_51:
  *a3 = v8;
  return v6;
}

uint64_t sub_181360588(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_9;
      }
      uint64_t v3 = &xmmword_18C465410;
    }

    (*v3)(v2);
  }

uint64_t sub_1813606AC(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = sub_18126F0AC(48LL);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0) {
      *(_DWORD *)(v8 + 16) = strlen(a2);
    }
    else {
      *(_DWORD *)(v8 + 16) = a3;
    }
  }

  else
  {
    *(_DWORD *)(v8 + 16) = 0;
    *(void *)(v8 + 8) = &byte_1813CEAEE;
  }

  uint64_t result = 0LL;
  *a4 = v9;
  return result;
}

uint64_t sub_181360740(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_181360860(uint64_t *a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = (unsigned __int8 *)(v7 + *((int *)a1 + 5));
  unint64_t v10 = (unsigned __int8 *)(v7 + *((int *)a1 + 4));
  do
  {
    while (1)
    {
      if (v9 >= v10) {
        return 101LL;
      }
      int v11 = (int)v9;
      unsigned int v13 = *v9++;
      unint64_t v12 = v13;
      unsigned int v14 = v13 - 192;
      if (v13 < 0xC0)
      {
        if ((v12 & 0x80) == 0)
        {
          BOOL v16 = ((*(_DWORD *)((char *)&unk_1813CB168 + ((v12 >> 3) & 0x1C)) >> v12) & 1) == 0;
          goto LABEL_27;
        }
      }

      else
      {
        LODWORD(v12) = byte_1813C6D06[v14];
        if (v9 == v10)
        {
LABEL_8:
          uint64_t v9 = (unsigned __int8 *)(v7 + *((int *)a1 + 4));
        }

        else
        {
          while (1)
          {
            unsigned __int8 v15 = *v9;
            if ((*v9 & 0xC0) != 0x80) {
              break;
            }
            ++v9;
            LODWORD(v12) = v15 & 0x3F | ((_DWORD)v12 << 6);
            if (v9 == v10) {
              goto LABEL_8;
            }
          }
        }

        if (v12 >> 1 == 0x7FFF || v12 < 0x80 || (v12 & 0xFFFFF800) == 0xD800)
        {
          LODWORD(v12) = 65533;
        }

        else if (v12 >> 22)
        {
          BOOL v16 = 1;
          goto LABEL_27;
        }
      }

      int v17 = 0;
      int v18 = 0;
      int v19 = 405;
      unsigned int v20 = ((_DWORD)v12 << 10) | 0x3FF;
      do
      {
        int v21 = v19 + v17;
        if (v19 + v17 < 0 != __OFADD__(v19, v17)) {
          ++v21;
        }
        int v22 = v21 >> 1;
        unsigned int v23 = dword_1813CAB10[v22];
        if (v20 < v23) {
          int v19 = v22 - 1;
        }
        else {
          int v18 = v22;
        }
        if (v20 >= v23) {
          int v17 = v22 + 1;
        }
      }

      while (v19 >= v17);
      BOOL v16 = (dword_1813CAB10[v18] & 0x3FFu) + (dword_1813CAB10[v18] >> 10) <= v12;
LABEL_27:
      int v24 = *(_DWORD *)(v8 + 12);
      BOOL v25 = __OFSUB__(v24, 1);
      int v26 = v24 - 1;
      if (v26 < 0 == v25) {
        break;
      }
LABEL_2:
      if (v16) {
        goto LABEL_38;
      }
    }

    int v27 = 0;
    while (1)
    {
      int v28 = v27 + v26;
      if (v27 + v26 < 0 != __OFADD__(v27, v26)) {
        ++v28;
      }
      int v29 = v28 >> 1;
      int v30 = *(_DWORD *)(*(void *)(v8 + 16) + 4LL * v29);
      if (v30 == (_DWORD)v12) {
        break;
      }
      else {
        int v27 = v29 + 1;
      }
      if (v26 < v27) {
        goto LABEL_2;
      }
    }
  }

  while (v16);
LABEL_38:
  int v74 = v11;
  uint64_t v31 = a1[4];
  uint64_t v32 = (_BYTE *)v31;
  while (1)
  {
    uint64_t v33 = *((int *)a1 + 10);
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v34 = sub_18127D33C(v31, v33 + 64);
    if (!v34) {
      return 7LL;
    }
    uint64_t v32 = &v32[v34 - a1[4]];
    a1[4] = v34;
    *((_DWORD *)a1 + 10) += 64;
LABEL_44:
    if ((int)v12 > 127)
    {
      if (WORD1(v12))
      {
LABEL_77:
        _BYTE *v32 = (v12 >> 18) & 7 | 0xF0;
        v32[1] = (v12 >> 12) & 0x3F | 0x80;
        _DWORD v32[2] = (v12 >> 6) & 0x3F | 0x80;
        v32[3] = v12 & 0x3F | 0x80;
        v32 += 4;
        goto LABEL_82;
      }

      int v35 = 0;
      int v36 = *(_DWORD *)(v8 + 8);
      int v37 = -1;
      int v38 = 162;
      do
      {
        int v39 = v35 + v38;
        if (v35 + v38 < 0 != __OFADD__(v35, v38)) {
          ++v39;
        }
        int v40 = v39 >> 1;
        if ((int)v12 < *((unsigned __int16 *)&unk_1813CB178 + 2 * v40))
        {
          int v38 = v40 - 1;
        }

        else
        {
          int v35 = v40 + 1;
          int v37 = v40;
        }
      }

      while (v38 >= v35);
      uint64_t v41 = (unsigned __int16 *)((char *)&unk_1813CB178 + 4 * v37);
      int v42 = *v41;
      if (*((unsigned __int8 *)v41 + 3) + v42 > (int)v12)
      {
        int v43 = *((unsigned __int8 *)&unk_1813CB178 + 4 * v37 + 2);
      }

      if (v36)
      {
        int v44 = 0;
        int v45 = 0;
        int v46 = 125;
        unsigned int v47 = (8 * v12) | 7;
        do
        {
          int v48 = v46 + v44;
          if (v46 + v44 < 0 != __OFADD__(v46, v44)) {
            ++v48;
          }
          int v49 = v48 >> 1;
          unsigned int v50 = word_1813CD5C6[v49];
          if (v47 < v50) {
            int v46 = v49 - 1;
          }
          else {
            int v45 = v49;
          }
          if (v47 >= v50) {
            int v44 = v49 + 1;
          }
        }

        while (v46 >= v44);
        if ((v36 == 2 || (byte_1813CD6C2[v45] & 0x80000000) == 0)
          && (word_1813CD5C6[v45] & 7) + (word_1813CD5C6[v45] >> 3) >= (int)v12)
        {
          LODWORD(v12) = byte_1813CD6C2[v45] & 0x7F;
        }
      }
    }

    else if ((v12 - 65) < 0x1A)
    {
      LODWORD(v12) = v12 + 32;
    }

    if (!(_DWORD)v12) {
      goto LABEL_82;
    }
    if ((int)v12 <= 127)
    {
      *v32++ = v12;
      goto LABEL_82;
    }

    if (v12 > 0x7FF)
    {
      if (WORD1(v12)) {
        goto LABEL_77;
      }
      _BYTE *v32 = (v12 >> 12) | 0xE0;
      v32[1] = (v12 >> 6) & 0x3F | 0x80;
      _DWORD v32[2] = v12 & 0x3F | 0x80;
      v32 += 3;
    }

    else
    {
      _BYTE *v32 = (v12 >> 6) | 0xC0;
      v32[1] = v12 & 0x3F | 0x80;
      v32 += 2;
    }

uint64_t sub_181360EA8(uint64_t a1, int a2, char *a3, int a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a3;
  int v6 = 0;
  uint64_t v7 = &a3[a4];
  uint64_t v8 = a3;
  do
  {
    unsigned int v10 = *v8++;
    unint64_t v9 = v10;
    unsigned int v11 = v10 - 192;
    if (v10 < 0xC0)
    {
      if ((v9 & 0x80) == 0)
      {
        goto LABEL_30;
      }
    }

    else
    {
      LODWORD(v9) = byte_1813C6D06[v11];
      if (v8 == v7)
      {
LABEL_9:
        uint64_t v8 = v7;
      }

      else
      {
        while (1)
        {
          char v12 = *v8;
          if ((*v8 & 0xC0) != 0x80) {
            break;
          }
          ++v8;
          LODWORD(v9) = v12 & 0x3F | ((_DWORD)v9 << 6);
          if (v8 == v7) {
            goto LABEL_9;
          }
        }
      }

      if (v9 >> 1 == 0x7FFF || v9 < 0x80 || (v9 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v9) = 65533;
      }

      else if (v9 >> 22)
      {
        if (a2 == 1) {
          continue;
        }
LABEL_30:
        if ((v9 - 818) < 0xFFFFFFCE
          || (v9 >= 0x320 ? (char v20 = -32) : (char v20 = 0),
              v9 >= 0x320 ? (unsigned int v21 = 221688) : (unsigned int v21 = 134389727),
              ((v21 >> (v9 + v20)) & 1) == 0))
        {
          ++v6;
        }

        continue;
      }
    }

    int v13 = 0;
    int v14 = 0;
    int v15 = 405;
    unsigned int v16 = ((_DWORD)v9 << 10) | 0x3FF;
    do
    {
      int v17 = v15 + v13;
      if (v15 + v13 < 0 != __OFADD__(v15, v13)) {
        ++v17;
      }
      int v18 = v17 >> 1;
      unsigned int v19 = dword_1813CAB10[v18];
      if (v16 < v19) {
        int v15 = v18 - 1;
      }
      else {
        int v14 = v18;
      }
      if (v16 >= v19) {
        int v13 = v18 + 1;
      }
    }

    while (v15 >= v13);
  }

  while (v8 < v7);
  if (!v6) {
    return 0LL;
  }
  uint64_t v22 = *(void *)(a1 + 16);
  int v23 = *(_DWORD *)(a1 + 12);
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v27 = sub_18127D33C(v22, 4LL * (v23 + v6));
  if (!v27) {
    return 7LL;
  }
  int v28 = *(_DWORD *)(a1 + 12);
  while (2)
  {
    unsigned int v30 = *v4++;
    unint64_t v29 = v30;
    unsigned int v31 = v30 - 192;
    if (v30 >= 0xC0)
    {
      LODWORD(v29) = byte_1813C6D06[v31];
      if (v4 == v7)
      {
LABEL_52:
        uint64_t v4 = v7;
      }

      else
      {
        while (1)
        {
          char v32 = *v4;
          if ((*v4 & 0xC0) != 0x80) {
            break;
          }
          ++v4;
          LODWORD(v29) = v32 & 0x3F | ((_DWORD)v29 << 6);
          if (v4 == v7) {
            goto LABEL_52;
          }
        }
      }

      if (v29 >> 1 == 0x7FFF || v29 < 0x80 || (v29 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v29) = 65533;
      }

      else if (v29 >> 22)
      {
        if (a2 != 1) {
          goto LABEL_73;
        }
        goto LABEL_47;
      }

uint64_t sub_181361294(sqlite3 *a1, int a2, int a3, uint64_t a4, void *a5, char **a6)
{
  char v12 = *(const char **)(a4 + 8);
  int v13 = strlen(v12);
  int v14 = v13;
  if (a3 != 5)
  {
    uint64_t v18 = 3LL;
    goto LABEL_18;
  }

  if (!v12 || v13 != 4) {
    goto LABEL_2;
  }
  if ((*v12 & 0xDF) != 0x54)
  {
    int v17 = 116;
    goto LABEL_16;
  }

  int v15 = (unsigned __int8 *)(v12 + 1);
  if ((v12[1] & 0xDF) != 0x45)
  {
    int v17 = 101;
LABEL_15:
    char v12 = (const char *)v15;
LABEL_16:
LABEL_2:
    sub_181362330(a6, "invalid arguments to fts4aux constructor");
    return 1LL;
  }

  int v15 = (unsigned __int8 *)(v12 + 2);
  if ((v12[2] & 0xDF) != 0x4D)
  {
    int v17 = 109;
    goto LABEL_15;
  }

  int v16 = *((unsigned __int8 *)v12 + 3);
  v12 += 3;
  if ((v16 & 0xFFFFFFDF) != 0x50)
  {
    int v17 = 112;
    goto LABEL_16;
  }

uint64_t sub_181361500(uint64_t a1, unsigned int *a2)
{
  if (a2[4] == 1)
  {
    uint64_t v2 = *((void *)a2 + 3);
    if (!*(_DWORD *)v2 && !*(_BYTE *)(v2 + 4)) {
      a2[15] = 1;
    }
  }

  uint64_t v3 = *a2;
  if ((int)v3 <= 0)
  {
    a2[10] = 0;
    *((void *)a2 + 8) = 0x40D3880000000000LL;
    return 0LL;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = (_BYTE *)(*((void *)a2 + 1) + 5LL);
  unsigned int v6 = -1;
  unsigned int v7 = -1;
  unsigned int v8 = -1;
  unsigned int v9 = -1;
  do
  {
    if (*v5)
    {
      int v10 = *(v5 - 1);
      int v11 = *(_DWORD *)(v5 - 5);
      if (v10 == 2) {
        unsigned int v12 = v4;
      }
      else {
        unsigned int v12 = v6;
      }
      if (v10 == 16 || v10 == 8) {
        unsigned int v14 = v4;
      }
      else {
        unsigned int v14 = v8;
      }
      if (v10 == 4 || v10 == 32) {
        unsigned int v16 = v4;
      }
      else {
        unsigned int v16 = v9;
      }
      if (!v11)
      {
        unsigned int v9 = v16;
        unsigned int v8 = v14;
        unsigned int v6 = v12;
      }

      if (v10 == 2 && v11 == 4) {
        unsigned int v7 = v4;
      }
    }

    ++v4;
    v5 += 12;
  }

  while (v3 != v4);
  if ((v6 & 0x80000000) != 0)
  {
    a2[10] = 0;
    *((void *)a2 + 8) = 0x40D3880000000000LL;
    int v18 = 1;
    if ((v9 & 0x80000000) != 0)
    {
      int v21 = 4;
      double v19 = 20000.0;
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_38;
      }
    }

    else
    {
      *(_DWORD *)(*((void *)a2 + 4) + 8LL * v9) = 1;
      a2[10] = 2;
      *((void *)a2 + 8) = 0x40C3880000000000LL;
      int v21 = 6;
      double v19 = 10000.0;
      int v18 = 2;
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_38;
      }
    }

    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v8) = v18;
    a2[10] = v21;
    ++v18;
    double v19 = v19 * 0.5;
    *((double *)a2 + 8) = v19;
    goto LABEL_38;
  }

  a2[10] = 1;
  *(_DWORD *)(*((void *)a2 + 4) + 8LL * v6) = 1;
  *((void *)a2 + 8) = 0x4014000000000000LL;
  int v18 = 2;
  double v19 = 5.0;
LABEL_38:
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v7) = v18;
    *((double *)a2 + 8) = v19 + -1.0;
  }

  return 0LL;
}

uint64_t sub_181361698(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = 112LL; i != 432; i += 8LL)
    sqlite3_finalize(*(sqlite3_stmt **)(v2 + i));
  uint64_t v4 = *(void *)(v2 + 472);
  if (v4)
  {
    uint64_t v5 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_9:
      (*v5)(v4);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
    --qword_18C468B10;
    off_18C4653A8(v4);
    uint64_t v4 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v5 = &xmmword_18C465410;
      goto LABEL_9;
    }
  }

double sub_1813617EC(uint64_t a1, uint64_t *a2)
{
  if (!sqlite3_initialize())
  {
    uint64_t v4 = sub_18126F0AC(168LL);
    if (v4)
    {
      *(void *)(v4 + 160) = 0LL;
      double result = 0.0;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *a2 = v4;
    }
  }

  return result;
}

uint64_t sub_18136184C(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(*a1 + 24LL);
  uint64_t v3 = *(void **)(v2 + 480);
  if (v3)
  {
    uint64_t v4 = (sqlite3_stmt *)v3[3];
    uint64_t v5 = (void *)v3[4];
    uint64_t v6 = v5[3];
    if (v6) {
      xmmword_18C465400(v6);
    }
    sub_1812F20DC(v5, v3);
    uint64_t v7 = v5[3];
    if (v7) {
      xmmword_18C465410(v7);
    }
    sqlite3_finalize(v4);
  }

  *(void *)(v2 + 480) = 0LL;
  sub_181362408((uint64_t)(v1 + 1));
  uint64_t v8 = v1[12];
  if (v8)
  {
    unsigned int v9 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_13:
      (*v9)(v8);
      goto LABEL_14;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v9 = &xmmword_18C465410;
      goto LABEL_13;
    }
  }

uint64_t sub_181361AA8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v9 = *(void *)(*(void *)a1 + 24LL);
  int v10 = (a2 & 2) >> 1;
  if ((a2 & 2) != 0) {
    int v11 = 0;
  }
  else {
    int v11 = -1;
  }
  if ((a2 & 2) != 0) {
    int v12 = 2;
  }
  else {
    int v12 = 1;
  }
  if ((a2 & 4) != 0) {
    int v13 = (a2 & 2) >> 1;
  }
  else {
    int v13 = -1;
  }
  if ((a2 & 4) != 0) {
    int v10 = v12;
  }
  BOOL v14 = a2 != 1;
  if (a2 == 1)
  {
    int v11 = -1;
    int v15 = -1;
  }

  else
  {
    int v15 = v13;
  }

  int v42 = v11;
  int v43 = v15;
  if (a2 == 1) {
    int v16 = 1;
  }
  else {
    int v16 = v10;
  }
  int v41 = v16;
  uint64_t v17 = a1 + 8;
  sub_181362408(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 96);
  char v40 = (char **)(a1 + 96);
  if (v18)
  {
    double v19 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_24:
      (*v19)(v18);
      goto LABEL_25;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
    --qword_18C468B10;
    off_18C4653A8(v18);
    uint64_t v18 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      double v19 = &xmmword_18C465410;
      goto LABEL_24;
    }
  }

uint64_t sub_181361F20(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
  ++*(void *)(a1 + 144);
  uint64_t v3 = *(int *)(a1 + 152);
  uint64_t v4 = v3 + 1;
  uint64_t v5 = 16 * v3 + 16;
  do
  {
    if (v4 >= *(int *)(a1 + 156))
    {
      *(_DWORD *)(a1 + 152) = v3 + 1;
      uint64_t v8 = sub_1813644CC(v2, a1 + 8);
      if ((_DWORD)v8 != 100)
      {
        uint64_t v7 = v8;
        goto LABEL_15;
      }

      int v9 = *(_DWORD *)(a1 + 88);
      uint64_t v10 = *(void *)(a1 + 80);
      int v11 = *(const void **)(a1 + 120);
      if (v11)
      {
        int v12 = *(_DWORD *)(a1 + 128);
        int v13 = *(_DWORD *)(a1 + 72);
        int v14 = v12 >= v13 ? *(_DWORD *)(a1 + 72) : *(_DWORD *)(a1 + 128);
        int v15 = memcmp(v11, *(const void **)(a1 + 64), v14);
        if (v15 < 0 || v12 < v13 && !v15)
        {
          uint64_t v7 = 0LL;
LABEL_15:
          *(_DWORD *)(a1 + 136) = 1;
          return v7;
        }
      }

      int v17 = *(_DWORD *)(a1 + 156);
      uint64_t v18 = *(void **)(a1 + 160);
      if (v17 <= 1)
      {
        if (sqlite3_initialize()) {
          return 7LL;
        }
        uint64_t v19 = sub_18127D33C((uint64_t)v18, 32LL);
        if (!v19) {
          return 7LL;
        }
        uint64_t v18 = (void *)v19;
        bzero((void *)(v19 + 16LL * *(int *)(a1 + 156)), 16 * (2LL - *(int *)(a1 + 156)));
        *(void *)(a1 + 160) = v18;
        *(_DWORD *)(a1 + 156) = 2;
        int v17 = 2;
      }

      bzero(v18, 16LL * v17);
      if (v9 < 1)
      {
        uint64_t v7 = 0LL;
        *(_DWORD *)(a1 + 152) = 0;
        return v7;
      }

      uint64_t v7 = 0LL;
      int v20 = 0;
      LODWORD(v21) = 0;
      int v22 = 0;
      while (1)
      {
        uint64_t v29 = 0LL;
        int v23 = sub_181363B00((char *)(v10 + v22), (unint64_t *)&v29);
        if (v20)
        {
          if (v20 == 1)
          {
            uint64_t v24 = v29;
            if (v29 >= 2) {
              ++*(void *)(*(void *)(a1 + 160) + 16LL);
            }
          }

          else
          {
            if (v20 != 2)
            {
              uint64_t v21 = v29;
              if ((int)v29 < 1)
              {
                uint64_t v7 = 267LL;
              }

              else
              {
                unsigned int v25 = v29 + 2;
                uint64_t v26 = *(void *)(a1 + 160);
                if (*(_DWORD *)(a1 + 156) < (int)v29 + 2)
                {
                  if (sqlite3_initialize()) {
                    return 7LL;
                  }
                  uint64_t v27 = sub_18127D33C(v26, 16LL * v25);
                  if (!v27) {
                    return 7LL;
                  }
                  uint64_t v26 = v27;
                  bzero((void *)(v27 + 16LL * *(int *)(a1 + 156)), 16LL * (int)(v25 - *(_DWORD *)(a1 + 156)));
                  *(void *)(a1 + 160) = v26;
                  *(_DWORD *)(a1 + 156) = v25;
                }

                ++*(void *)(v26 + (((v21 << 32) + 0x100000000LL) >> 28));
                int v20 = 2;
              }

              goto LABEL_25;
            }

            uint64_t v24 = v29;
          }

          if (v24)
          {
            if (v24 == 1)
            {
              int v20 = 3;
            }

            else
            {
              uint64_t v28 = *(void *)(a1 + 160);
              ++*(void *)(v28 + 16LL * (int)v21 + 24);
              ++*(void *)(v28 + 8);
              int v20 = 2;
            }
          }

          else
          {
            int v20 = 0;
          }
        }

        else
        {
          LODWORD(v21) = 0;
          ++**(void **)(a1 + 160);
          int v20 = 1;
        }

uint64_t sub_1813621EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1813621F4(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      if (!a2) {
        goto LABEL_20;
      }
      sub_1812D7A8C( a2,  *(char **)(a1 + 64),  *(_DWORD *)(a1 + 72),  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return 0LL;
    case 1:
      uint64_t v4 = *(int *)(a1 + 152);
      if ((_DWORD)v4)
      {
        if (!a2) {
          goto LABEL_17;
        }
        uint64_t v3 = v4 - 1;
        goto LABEL_13;
      }

      if (!a2)
      {
LABEL_20:
        int v6 = 97498;
        goto LABEL_21;
      }

      sub_1812D7A8C(a2, "*", -1, 1u, 0LL);
      return 0LL;
    case 2:
      if (!a2) {
        goto LABEL_16;
      }
      uint64_t v3 = *(void *)(*(void *)(a1 + 160) + 16LL * *(int *)(a1 + 152));
      goto LABEL_13;
    case 3:
      if (a2)
      {
        uint64_t v3 = *(void *)(*(void *)(a1 + 160) + 16LL * *(int *)(a1 + 152) + 8);
        goto LABEL_13;
      }

uint64_t sub_181362320(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 144);
  return 0LL;
}

char *sub_181362330(char **a1, char *a2, ...)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t (**)(char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v5)(v4);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
    --qword_18C468B10;
    off_18C4653A8(v4);
    uint64_t v4 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v5 = (uint64_t (**)(char *))&xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_181362408(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 8) >= 1)
    {
      uint64_t v2 = 0LL;
      do
        uint64_t result = sub_18136257C(*(void *)(*(void *)v1 + 8 * v2++));
      while (v2 < *(int *)(v1 + 8));
    }

    uint64_t v3 = *(void *)v1;
    if (*(void *)v1)
    {
      uint64_t v4 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_11:
        uint64_t result = (*v4)(v3);
        goto LABEL_12;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v3);
      uint64_t v3 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v4 = &xmmword_18C465410;
        goto LABEL_11;
      }
    }

uint64_t sub_18136257C(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 80);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_8:
      (*v3)(v2);
      goto LABEL_9;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_8;
    }
  }

uint64_t sub_181362778( uint64_t a1, int a2, int a3, unsigned int a4, char *__s2, uint64_t a6, int a7, int a8, uint64_t a9)
{
  int v9 = a8;
  int v10 = a7;
  int v11 = __s2;
  if ((a4 & 0x80000000) == 0)
  {
    pStmt = 0LL;
    uint64_t v19 = a1;
    int v20 = sub_1813636A8((uint64_t *)a1, 12, &pStmt, 0LL);
    uint64_t v21 = pStmt;
    if (!v20)
    {
      int v22 = *(_DWORD *)(v19 + 488);
      uint64_t v83 = v19;
      if (sub_1812B2390((uint64_t)pStmt, 0))
      {
        int v10 = a7;
        int v11 = __s2;
        int v23 = a8;
        goto LABEL_62;
      }

      uint64_t v36 = ((a3 + v22 * (uint64_t)a2) << 10) + a4;
      uint64_t v37 = *((void *)v21 + 16);
      if ((*(_WORD *)(v37 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v37, v36);
      }

      else
      {
        *(void *)uint64_t v37 = v36;
        *(_WORD *)(v37 + 20) = 4;
      }

      int v10 = a7;
      int v11 = __s2;
      int v23 = a8;
      goto LABEL_47;
    }

    goto LABEL_14;
  }

  uint64_t v24 = *(void *)(a1 + 496);
  if (!v24 || *(_DWORD *)(a1 + 520) != a2)
  {
    uint64_t v30 = 0LL;
    goto LABEL_11;
  }

  uint64_t v84 = a1;
  int v80 = a8 | a7;
  if (!(a8 | a7))
  {
    uint64_t v41 = v24 + 40LL * a3;
    uint64_t v43 = *(void *)(v41 + 32);
    int v42 = (void *)(v41 + 32);
    if (v43)
    {
      int v44 = *((_BYTE *)v42 - 24) == 1 ? sub_18126D6B4(__s2, a6) : sub_181363650(__s2, a6);
      if (*v42)
      {
        int v45 = (int *)(*v42 + 16LL * ((*(_DWORD *)(v24 + 40LL * a3 + 24) - 1) & v44));
        int v48 = *v45;
        int v46 = (sqlite3_stmt *)(v45 + 2);
        int v47 = v48;
        if (*((_BYTE *)v42 - 24) == 1) {
          int v49 = sub_18126D718;
        }
        else {
          int v49 = sub_181363688;
        }
        while (v47)
        {
          int v46 = *(sqlite3_stmt **)v46;
          if (!v46) {
            break;
          }
          --v47;
          if (!((unsigned int (*)(void, void, char *, uint64_t))v49)( *((void *)v46 + 3),  *((unsigned int *)v46 + 8),  v11,  a6))
          {
            pStmt = v46;
            int v28 = 1;
            p_pStmt = &pStmt;
LABEL_53:
            if (sqlite3_initialize() || (uint64_t v51 = (void *)sub_18126F0AC(8LL * (v28 + 1) + 136)) == 0LL)
            {
              char v34 = 0;
              uint64_t v35 = 0LL;
              uint64_t v30 = 7LL;
            }

            else
            {
              unsigned int v52 = v51;
              bzero(v51, 8LL * (v28 + 1) + 136);
              *(_DWORD *)unsigned int v52 = 0x7FFFFFFF;
              v52[8] = v52 + 17;
              memcpy(v52 + 17, p_pStmt, 8LL * v28);
              uint64_t v35 = (uint64_t)v52;
              uint64_t v30 = 0LL;
              char v34 = 1;
            }

            int v53 = v80;
            a1 = v84;
            goto LABEL_88;
          }
        }
      }
    }

    goto LABEL_44;
  }

  uint64_t v26 = *(sqlite3_stmt **)(v24 + 40LL * a3 + 16);
  pStmt = v26;
  if (!v26)
  {
LABEL_44:
    uint64_t v30 = 0LL;
    a1 = v84;
    int v9 = a8;
    goto LABEL_11;
  }

  p_pStmt = 0LL;
  int v28 = 0;
  int v29 = 0;
  do
  {
    if (!(_DWORD)a6 || *((_DWORD *)v26 + 8) >= (int)a6 && !memcmp(*((const void **)v26 + 3), v11, (int)a6))
    {
      if (v28 == v29)
      {
        if (sqlite3_initialize() || (v29 = v28 + 16, (uint64_t v33 = sub_18127D33C((uint64_t)p_pStmt, 8LL * (v28 + 16))) == 0))
        {
          char v34 = 0;
          uint64_t v35 = 0LL;
          uint64_t v30 = 7LL;
          goto LABEL_87;
        }

        p_pStmt = (sqlite3_stmt **)v33;
      }

      p_pStmt[v28] = v26;
      uint64_t v26 = pStmt;
      ++v28;
    }

    uint64_t v26 = *(sqlite3_stmt **)v26;
    pStmt = v26;
  }

  while (v26);
  if (v28 >= 2)
  {
    qsort(p_pStmt, v28, 8uLL, (int (__cdecl *)(const void *, const void *))sub_181363608);
    goto LABEL_53;
  }

  char v34 = 1;
  if (v28 == 1)
  {
    int v28 = 1;
    goto LABEL_53;
  }

  uint64_t v30 = 0LL;
  uint64_t v35 = 0LL;
LABEL_87:
  a1 = v84;
  int v53 = v80;
LABEL_88:
  if (v53 && p_pStmt)
  {
    unsigned int v70 = (void (**)(sqlite3_stmt **))&off_18C4653A8;
    uint64_t v79 = v35;
    char v71 = v34;
    uint64_t v72 = a1;
    if (!dword_18C465380)
    {
LABEL_95:
      (*v70)(p_pStmt);
      a1 = v72;
      uint64_t v35 = v79;
      char v34 = v71;
      goto LABEL_96;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(p_pStmt);
    --qword_18C468B10;
    off_18C4653A8(p_pStmt);
    p_pStmt = (sqlite3_stmt **)xmmword_18C468B70;
    a1 = v72;
    uint64_t v35 = v79;
    char v34 = v71;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v70 = (void (**)(sqlite3_stmt **))&xmmword_18C465410;
      goto LABEL_95;
    }
  }

uint64_t sub_181362E90( uint64_t a1, const void *a2, uint64_t a3, char *a4, int a5, sqlite3_int64 *a6, sqlite3_int64 *a7)
{
  int v9 = (unsigned __int8 *)a4;
  int v12 = *a4;
  if (*a4 < 0)
  {
    int v12 = v12 & 0x7F | (a4[1] << 7);
    if (a4[1] < 0)
    {
      int v12 = v12 & 0x3FFF | (a4[2] << 14);
      if (a4[2] < 0)
      {
        int v12 = v12 & 0x1FFFFF | (a4[3] << 21);
        if (a4[3] < 0) {
          int v12 = v12 & 0xFFFFFFF | ((a4[4] & 7) << 28);
        }
      }
    }
  }

  int v13 = (unsigned __int8 *)&a4[a5];
  int v14 = &a4[(int)sub_181363B00(a4, (unint64_t *)&v64)];
  int v15 = (unsigned __int8 *)&v14[(int)sub_181363B00(v14, (unint64_t *)&v64)];
  if (v15 > v13) {
    return 267LL;
  }
  int v55 = a6;
  int v56 = a7;
  uint64_t v54 = a1;
  int v57 = v12;
  if (v15 >= v13)
  {
    uint64_t v62 = 0LL;
    int v22 = (char **)a7;
    unint64_t v21 = (unint64_t)a6;
LABEL_62:
    if (v21) {
      *(void *)unint64_t v21 = v64;
    }
    uint64_t v38 = v62;
    uint64_t v16 = 0LL;
    if (v22) {
      *int v22 = v64;
    }
    int v39 = 1;
    uint64_t v40 = v56;
    if (v62) {
      goto LABEL_72;
    }
    goto LABEL_78;
  }

  unint64_t v17 = (unint64_t)v13;
  unsigned int v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0LL;
  uint64_t v62 = 0LL;
  unint64_t v21 = (unint64_t)a6;
  int v22 = (char **)a7;
  signed int v60 = a3;
  unint64_t v58 = v17;
  int v59 = v9;
  while (1)
  {
    BOOL v23 = (v21 | (unint64_t)v22) != 0;
    if (!(v21 | (unint64_t)v22))
    {
      uint64_t v16 = 0LL;
      goto LABEL_71;
    }

    if ((v19 & 1) == 0)
    {
      unsigned int v24 = 0;
      goto LABEL_26;
    }

    unsigned int v24 = *v15;
    if ((char)*v15 < 0)
    {
      unsigned int v24 = v24 & 0x7F | (v15[1] << 7);
      if ((char)v15[1] < 0)
      {
        unsigned int v24 = v24 & 0x3FFF | (v15[2] << 14);
        if ((char)v15[2] < 0)
        {
          unsigned int v24 = v24 & 0x1FFFFF | (v15[3] << 21);
          if ((char)v15[3] < 0)
          {
            unsigned int v24 = v24 & 0xFFFFFFF | ((v15[4] & 7) << 28);
            uint64_t v25 = 5LL;
          }

          else
          {
            uint64_t v25 = 4LL;
          }
        }

        else
        {
          uint64_t v25 = 3LL;
        }
      }

      else
      {
        uint64_t v25 = 2LL;
      }
    }

    else
    {
      uint64_t v25 = 1LL;
    }

    if (v24 > v18) {
      break;
    }
    v15 += v25;
LABEL_26:
    unsigned int v26 = *v15;
    if ((char)*v15 < 0)
    {
      unsigned int v26 = v26 & 0x7F | (v15[1] << 7);
      if ((char)v15[1] < 0)
      {
        unsigned int v26 = v26 & 0x3FFF | (v15[2] << 14);
        if ((char)v15[2] < 0)
        {
          unsigned int v26 = v26 & 0x1FFFFF | (v15[3] << 21);
          if ((char)v15[3] < 0)
          {
            unsigned int v26 = v26 & 0xFFFFFFF | ((v15[4] & 7) << 28);
            uint64_t v27 = 5LL;
          }

          else
          {
            uint64_t v27 = 4LL;
          }
        }

        else
        {
          uint64_t v27 = 3LL;
        }
      }

      else
      {
        uint64_t v27 = 2LL;
      }
    }

    else
    {
      uint64_t v27 = 1LL;
    }

    int v28 = &v15[v27];
    uint64_t v16 = 267LL;
    int64_t v29 = v26 + (unint64_t)v24;
    uint64_t v30 = v22;
    if (v29 <= v20)
    {
      unsigned int v32 = (char *)v62;
    }

    else
    {
      if (sqlite3_initialize() || (uint64_t v20 = 2 * v29, (v31 = sub_18127D33C(v62, 2 * v29)) == 0))
      {
        uint64_t v16 = 7LL;
        goto LABEL_71;
      }

      unsigned int v32 = (char *)v31;
    }

    memcpy(&v32[v24], v28, v26);
    unsigned int v18 = v26 + v24;
    a3 = v60;
    else {
      signed int v33 = v26 + v24;
    }
    int v34 = memcmp(a2, v32, v33);
    uint64_t v35 = v64;
    uint64_t v62 = (uint64_t)v32;
    if (!v21)
    {
      int v22 = v30;
      goto LABEL_58;
    }

    if (v34) {
      BOOL v36 = 1;
    }
    else {
      BOOL v36 = (int)v18 <= v60;
    }
    char v37 = v36;
    int v22 = v30;
    if (v34 < 0 || (v37 & 1) == 0)
    {
      *(void *)unint64_t v21 = v64;
      uint64_t v35 = v64;
LABEL_58:
      int v9 = v59;
      unint64_t v21 = 0LL;
      if (v22 && v34 < 0)
      {
        unint64_t v21 = 0LL;
        *int v22 = v35;
        uint64_t v35 = v64;
        int v22 = 0LL;
      }

      unint64_t v17 = v58;
      goto LABEL_11;
    }

    unint64_t v17 = v58;
    int v9 = v59;
LABEL_11:
    int v15 = &v28[v26];
    int v64 = v35 + 1;
    char v19 = 1;
  }

  uint64_t v16 = 267LL;
LABEL_71:
  int v39 = !v23;
  uint64_t v40 = v56;
  a3 = v60;
  uint64_t v38 = v62;
  if (v62)
  {
LABEL_72:
    uint64_t v41 = (void (**)(void))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_77;
    }
    uint64_t v42 = v38;
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v42);
    --qword_18C468B10;
    off_18C4653A8(v42);
    if ((void)xmmword_18C468B70)
    {
      uint64_t v41 = (void (**)(void))&xmmword_18C465410;
LABEL_77:
      (*v41)();
    }
  }

uint64_t sub_1813634E4( int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t *a8)
{
  LODWORD(v9) = a7;
  if (a3)
  {
    int v16 = 0;
    if (sqlite3_initialize()) {
      return 7LL;
    }
  }

  else
  {
    if (a4) {
      return 267LL;
    }
    int v16 = a7 + 20;
    if (sqlite3_initialize()) {
      return 7LL;
    }
  }

  uint64_t v17 = sub_18126F0AC(v16 + 136LL);
  if (!v17) {
    return 7LL;
  }
  uint64_t v18 = v17;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(void *)(v17 + 128) = 0LL;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_DWORD *)uint64_t v17 = a1;
  *(_BYTE *)(v17 + 4) = a2 != 0;
  *(void *)(v17 + 8) = a3;
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  if (v16)
  {
    uint64_t v19 = v17 + 136;
    *(void *)(v17 + 40) = v17 + 136;
    *(_BYTE *)(v17 + 5) = 1;
    *(_DWORD *)(v17 + 48) = v9;
    if ((_DWORD)v9)
    {
      uint64_t v9 = (int)v9;
      memcpy((void *)(v17 + 136), a6, (int)v9);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    uint64_t v21 = v19 + v9;
    *(void *)uint64_t v21 = 0LL;
    *(void *)(v21 + 8) = 0LL;
    *(_DWORD *)(v21 + 16) = 0;
  }

  else
  {
    *(void *)(v17 + 32) = a3 - 1;
  }

  uint64_t result = 0LL;
  *a8 = v18;
  return result;
}

uint64_t sub_181363608(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(const void **)(*a1 + 24);
  uint64_t v4 = *a2;
  uint64_t v5 = *(const void **)(*a2 + 24);
  int v6 = *(_DWORD *)(v2 + 32);
  int v7 = *(_DWORD *)(v4 + 32);
  unsigned int v8 = v6 - v7;
  if (v6 >= v7) {
    int v6 = v7;
  }
  LODWORD(result) = memcmp(v3, v5, v6);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t sub_181363650(char *a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  int v2 = 0;
  unsigned int v3 = a2 + 1;
  do
  {
    int v4 = *a1++;
    v2 ^= v4 ^ (8 * v2);
    --v3;
  }

  while (v3 > 1);
  return v2 & 0x7FFFFFFF;
}

uint64_t sub_181363688(const void *a1, int a2, void *__s2, int a4)
{
  if (a2 == a4) {
    return memcmp(a1, __s2, a2);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1813636A8(uint64_t *a1, int a2, sqlite3_stmt **a3, uint64_t a4)
{
  int v6 = &a1[a2];
  uint64_t v9 = (sqlite3_stmt *)v6[14];
  unsigned int v8 = (sqlite3_stmt **)(v6 + 14);
  int v7 = v9;
  unsigned int v26 = v9;
  if (v9)
  {
    uint64_t v10 = 0LL;
    if (!a4) {
      goto LABEL_33;
    }
    goto LABEL_18;
  }

  if (a2 == 7)
  {
    int v14 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid=?", a1[55]);
    uint64_t v15 = 129LL;
    if (v14) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v10 = 7LL;
    goto LABEL_33;
  }

  if (a2 == 18) {
    int v12 = sqlite3_mprintf("INSERT INTO %Q.'%q_content' VALUES(%s)", a1[4], a1[5], a1[56]);
  }
  else {
    int v12 = sqlite3_mprintf(off_189B6EED0[a2], a1[4], a1[5]);
  }
  int v14 = (unsigned __int8 *)v12;
  uint64_t v15 = 133LL;
  if (!v12) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v10 = sub_18126DFE0(a1[3], v14, 0xFFFFFFFFLL, v15, 0LL, &v26, 0LL, v13);
  int v16 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_16:
    (*v16)(v14);
    goto LABEL_17;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
  --qword_18C468B10;
  off_18C4653A8(v14);
  int v14 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v16 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    goto LABEL_16;
  }

uint64_t sub_1813638B4(_BYTE *a1, int *a2)
{
  int v2 = *a1 & 0x7F | (a1[1] << 7);
  if ((char)a1[1] < 0)
  {
    int v4 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14);
    if ((char)a1[2] < 0)
    {
      int v5 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14) & 0x1FFFFF | (a1[3] << 21);
      if ((char)a1[3] < 0)
      {
        int v5 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14) & 0x1FFFFF | (a1[3] << 21) & 0xFFFFFFF | ((a1[4] & 7) << 28);
        uint64_t result = 5LL;
      }

      else
      {
        uint64_t result = 4LL;
      }

      *a2 = v5;
    }

    else
    {
      uint64_t result = 3LL;
      *a2 = v4;
    }
  }

  else
  {
    uint64_t result = 2LL;
    *a2 = v2;
  }

  return result;
}

uint64_t sub_181363924(uint64_t a1, sqlite3_int64 iRow, char **a3, _DWORD *a4)
{
  unsigned int v8 = (sqlite3_blob **)(a1 + 480);
  uint64_t v9 = *(sqlite3_blob **)(a1 + 480);
  if (!v9)
  {
    uint64_t v13 = *(char **)(a1 + 472);
    if (!v13)
    {
      uint64_t v13 = sqlite3_mprintf("%s_segments", *(const char **)(a1 + 40));
      *(void *)(a1 + 472) = v13;
      if (!v13) {
        return 7LL;
      }
    }

    unsigned int v10 = sqlite3_blob_open(*(sqlite3 **)(a1 + 24), *(const char **)(a1 + 32), v13, "block", iRow, 0, v8);
    if (v10) {
      goto LABEL_3;
    }
LABEL_10:
    int v14 = *v8;
    if (*v8 && *((void *)v14 + 3))
    {
      uint64_t v15 = *(unsigned int *)v14;
      *a4 = v15;
      if (!a3) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v15 = 0LL;
      *a4 = 0;
      if (!a3) {
        return 0LL;
      }
    }

    if (sqlite3_initialize())
    {
      uint64_t v11 = 7LL;
      *a3 = 0LL;
      return v11;
    }

    int v16 = (char *)sub_18126F0AC((int)v15 + 20LL);
    if (!v16)
    {
      uint64_t v11 = 7LL;
      *a3 = 0LL;
      return v11;
    }

    uint64_t v11 = sub_1812DCB6C((int *)*v8, v16, v15, 0, sub_1812DCD5C);
    uint64_t v17 = &v16[(int)v15];
    *(void *)uint64_t v17 = 0LL;
    *((void *)v17 + 1) = 0LL;
    *((_DWORD *)v17 + 4) = 0;
    if ((_DWORD)v11)
    {
      uint64_t v18 = (void (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v16);
        --qword_18C468B10;
        off_18C4653A8(v16);
        int v16 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_25;
        }
        uint64_t v18 = (void (**)(char *))&xmmword_18C465410;
      }

      (*v18)(v16);
      int v16 = 0LL;
    }

uint64_t sub_181363B00(char *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 < 0)
  {
    unint64_t v4 = v2 & 0x7F | (a1[1] << 7);
    if (a1[1] < 0)
    {
      unint64_t v5 = v4 & 0x3FFF | (a1[2] << 14);
      if (a1[2] < 0)
      {
        unint64_t v6 = v5 & 0x1FFFFF | (a1[3] << 21);
        if (a1[3] < 0)
        {
          int v7 = a1[4];
          unint64_t v8 = v6 & 0xFFFFFFF | ((unint64_t)(v7 & 0x7F) << 28);
          if (v7 < 0)
          {
            int v10 = a1[5];
            v8 |= (unint64_t)(v10 & 0x7F) << 35;
            if (v10 < 0)
            {
              int v11 = a1[6];
              v8 |= (unint64_t)(v11 & 0x7F) << 42;
              if (v11 < 0)
              {
                int v12 = a1[7];
                v8 |= (unint64_t)(v12 & 0x7F) << 49;
                if (v12 < 0)
                {
                  int v13 = a1[8];
                  v8 |= (unint64_t)(v13 & 0x7F) << 56;
                  if (v13 < 0)
                  {
                    v8 |= (unint64_t)a1[9] << 63;
                    int v9 = (_DWORD)a1 + 10;
                  }

                  else
                  {
                    int v9 = (_DWORD)a1 + 9;
                  }
                }

                else
                {
                  int v9 = (_DWORD)a1 + 8;
                }
              }

              else
              {
                int v9 = (_DWORD)a1 + 7;
              }
            }

            else
            {
              int v9 = (_DWORD)a1 + 6;
            }
          }

          else
          {
            int v9 = (_DWORD)a1 + 5;
          }

          *a2 = v8;
          return (v9 - (_DWORD)a1);
        }

        else
        {
          *a2 = v6;
          return 4LL;
        }
      }

      else
      {
        *a2 = v5;
        return 3LL;
      }
    }

    else
    {
      *a2 = v4;
      return 2LL;
    }
  }

  else
  {
    *a2 = v2;
    return 1LL;
  }

uint64_t sub_181363C00(uint64_t a1, uint64_t *a2, const void *a3, int a4)
{
  int v5 = *((_DWORD *)a2 + 2);
  if (!*((_DWORD *)a2 + 11))
  {
    uint64_t v27 = 0LL;
    do
    {
      uint64_t v28 = *(void *)(*a2 + 8 * v27);
      do
      {
        uint64_t result = sub_181363DA4(a1, v28);
        if ((_DWORD)result) {
          return result;
        }
        if (!a3 || !*(void *)(v28 + 40)) {
          goto LABEL_31;
        }
        int v29 = *(_DWORD *)(v28 + 72);
        int v30 = v29 - a4;
        if (v29 >= a4) {
          int v29 = a4;
        }
        int v31 = memcmp(*(const void **)(v28 + 80), a3, v29);
        if (v31) {
          int v32 = v31;
        }
        else {
          int v32 = v30;
        }
      }

      while (v32 < 0);
      if (v32) {
        BOOL v33 = *(_BYTE *)(v28 + 4) == 0;
      }
      else {
        BOOL v33 = 1;
      }
      if (!v33) {
        sub_181364288(v28);
      }
LABEL_31:
      ++v27;
    }

    while (!*((_DWORD *)a2 + 11));
  }

  uint64_t v6 = (v5 - 1);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (v5 - 1);
    while (1)
    {
      uint64_t v9 = v8--;
LABEL_4:
    }

    uint64_t v10 = *(void *)(v7 + 8 * v8);
    uint64_t v11 = v9;
    while (1)
    {
      uint64_t v12 = *(void *)(v7 + 8 * v11);
      uint64_t v13 = *(void *)(v10 + 40);
      uint64_t v14 = *(void *)(v12 + 40);
      if (!v13) {
        break;
      }
      if (!v14)
      {
        int v20 = -1;
LABEL_20:
        if (v13) {
          int v19 = v20;
        }
        else {
          int v19 = v20 + 1;
        }
        if (v19) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }

      int v15 = *(_DWORD *)(v10 + 72);
      int v16 = *(_DWORD *)(v12 + 72);
      int v17 = v15 - v16;
      if (v15 >= v16) {
        int v15 = *(_DWORD *)(v12 + 72);
      }
      int v18 = memcmp(*(const void **)(v10 + 80), *(const void **)(v12 + 80), v15);
      if (v18) {
        int v19 = v18;
      }
      else {
        int v19 = v17;
      }
      if (v19) {
        goto LABEL_25;
      }
LABEL_24:
      int v19 = *(_DWORD *)v12 - *(_DWORD *)v10;
LABEL_25:
      if ((v19 & 0x80000000) == 0)
      {
        unint64_t v21 = (void *)(v7 + 8 * v11);
        *(v21 - 1) = v12;
        *unint64_t v21 = v10;
        if (v11++ < v6) {
          continue;
        }
      }

      goto LABEL_4;
    }

    if (v14) {
      int v20 = 0;
    }
    else {
      int v20 = -1;
    }
    goto LABEL_20;
  }

  return 0LL;
}

uint64_t sub_181363DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 96);
  if (v4)
  {
    int v5 = (unsigned __int8 *)(v4 + *(int *)(a2 + 104));
    if (!v5) {
      goto LABEL_14;
    }
  }

  else
  {
    int v5 = *(unsigned __int8 **)(a2 + 40);
    if (!v5) {
      goto LABEL_14;
    }
  }

  if ((unint64_t)v5 < *(void *)(a2 + 40) + *(int *)(a2 + 48))
  {
    if (*(void *)(a2 + 56)) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

uint64_t sub_181364288(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 5)) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unsigned int v3 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_9;
      }
      unsigned int v3 = &xmmword_18C465410;
    }

    uint64_t result = (*v3)(v2);
  }

uint64_t sub_18136438C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v4 = a2 + a3;
    while (v4 - *(void *)(a1 + 40) > *(int *)(a1 + 52))
    {
      uint64_t result = sub_1813643E8(a1);
      if (*(void *)(a1 + 56)) {
        BOOL v6 = (_DWORD)result == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        return result;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1813643E8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 52);
  int v3 = *(_DWORD *)(a1 + 48) - v2;
  if (v3 >= 4096) {
    uint64_t v4 = 4096LL;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = sub_1812DCB6C(*(int **)(a1 + 56), (char *)(*(void *)(a1 + 40) + v2), v4, v2, sub_1812DCD5C);
  if (!(_DWORD)v5)
  {
    uint64_t v6 = *(int *)(a1 + 52) + (uint64_t)(int)v4;
    *(_DWORD *)(a1 + 52) = v6;
    uint64_t v7 = *(void *)(a1 + 40) + v6;
    *(void *)uint64_t v7 = 0LL;
    *(void *)(v7 + 8) = 0LL;
    *(_DWORD *)(v7 + 16) = 0;
    if (*(_DWORD *)(a1 + 52) == *(_DWORD *)(a1 + 48))
    {
      uint64_t v8 = *(void **)(a1 + 56);
      if (v8)
      {
        uint64_t v9 = (sqlite3_stmt *)v8[3];
        uint64_t v10 = (void *)v8[4];
        uint64_t v11 = v10[3];
        if (v11) {
          xmmword_18C465400(v11);
        }
        sub_1812F20DC(v10, v8);
        uint64_t v12 = v10[3];
        if (v12) {
          xmmword_18C465410(v12);
        }
        sqlite3_finalize(v9);
      }

      *(void *)(a1 + 56) = 0LL;
      *(_DWORD *)(a1 + 52) = 0;
    }
  }

  return v5;
}

uint64_t sub_1813644CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(a1 + 463)) {
    int v3 = sub_181364E58;
  }
  else {
    int v3 = sub_181364EB0;
  }
  if (!(_DWORD)v2) {
    return 0LL;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v116 = *(void *)(a2 + 16);
  int v121 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = (int)v2 - 1LL;
  LODWORD(v8) = *(_DWORD *)(a2 + 12);
  uint64_t v123 = v7;
  int v120 = *(_DWORD *)(v116 + 16);
  while (1)
  {
    if ((int)v8 >= 1)
    {
      for (uint64_t i = 0LL; i < v8; ++i)
      {
        uint64_t v10 = v6[i];
        if (*(_BYTE *)(v10 + 4))
        {
          sub_181364288(v6[i]);
        }

        else
        {
          uint64_t result = sub_181363DA4(v5, v10);
          if ((_DWORD)result) {
            return result;
          }
        }

        uint64_t v8 = *(int *)(v4 + 12);
      }
    }

    int v12 = v8 - ((_DWORD)v8 == (_DWORD)v2);
    if (v12 >= 1)
    {
      while (1)
      {
        int v20 = v12--;
        if (v121 > v20) {
          break;
        }
LABEL_31:
        if (v20 <= 1) {
          goto LABEL_16;
        }
      }

      uint64_t v21 = v12;
      uint64_t v22 = v6[v12];
      while (1)
      {
        uint64_t v23 = &v6[v21];
        uint64_t v24 = v23[1];
        uint64_t v25 = *(void *)(v22 + 40);
        uint64_t v26 = *(void *)(v24 + 40);
        if (!v25) {
          break;
        }
        if (!v26)
        {
          int v32 = -1;
LABEL_47:
          if (v25) {
            int v31 = v32;
          }
          else {
            int v31 = v32 + 1;
          }
          if (v31) {
            goto LABEL_52;
          }
          goto LABEL_51;
        }

        int v27 = *(_DWORD *)(v22 + 72);
        int v28 = *(_DWORD *)(v24 + 72);
        int v29 = v27 - v28;
        if (v27 >= v28) {
          int v27 = *(_DWORD *)(v24 + 72);
        }
        int v30 = memcmp(*(const void **)(v22 + 80), *(const void **)(v24 + 80), v27);
        if (v30) {
          int v31 = v30;
        }
        else {
          int v31 = v29;
        }
        uint64_t v7 = v123;
        if (v31) {
          goto LABEL_52;
        }
LABEL_51:
        int v31 = *(_DWORD *)v24 - *(_DWORD *)v22;
LABEL_52:
        if ((v31 & 0x80000000) == 0)
        {
          v6[v21] = v24;
          v23[1] = v22;
          if (++v21 < v7) {
            continue;
          }
        }

        goto LABEL_31;
      }

      if (v26) {
        int v32 = 0;
      }
      else {
        int v32 = -1;
      }
      goto LABEL_47;
    }

uint64_t sub_181364E58(uint64_t a1, uint64_t a2)
{
  if ((*(void *)(a1 + 112) == 0LL) != (*(void *)(a2 + 112) == 0LL)) {
    return (*(void *)(a1 + 112) == 0LL) - (*(void *)(a2 + 112) == 0LL);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a2 + 128);
  if (v3 == v4) {
    return (*(_DWORD *)a2 - *(_DWORD *)a1);
  }
  if (v3 < v4) {
    return 1LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_181364EB0(uint64_t a1, uint64_t a2)
{
  if ((*(void *)(a1 + 112) == 0LL) != (*(void *)(a2 + 112) == 0LL)) {
    return (*(void *)(a1 + 112) == 0LL) - (*(void *)(a2 + 112) == 0LL);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a2 + 128);
  if (v3 == v4) {
    return (*(_DWORD *)a2 - *(_DWORD *)a1);
  }
  if (v3 > v4) {
    return 1LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_181364F08(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 463) && *(void *)(a2 + 64))
  {
    *(void *)(a2 + 128) = 0LL;
    *(_DWORD *)(a2 + 120) = 0;
    sub_1813651BC( 0LL,  *(char **)(a2 + 96),  *(_DWORD *)(a2 + 104),  (char **)(a2 + 112),  (void *)(a2 + 128),  (int *)(a2 + 120),  &v7);
    return 0LL;
  }

  else
  {
    if (*(void *)(a2 + 56))
    {
      uint64_t v4 = *(void *)(a2 + 96) + 10LL;
      while (v4 - *(void *)(a2 + 40) > *(int *)(a2 + 52))
      {
        uint64_t result = sub_1813643E8(a2);
        if (*(void *)(a2 + 56)) {
          BOOL v5 = (_DWORD)result == 0;
        }
        else {
          BOOL v5 = 0;
        }
        if (!v5)
        {
          if ((_DWORD)result) {
            return result;
          }
          break;
        }
      }
    }

    int v6 = sub_181363B00(*(char **)(a2 + 96), (unint64_t *)(a2 + 128));
    uint64_t result = 0LL;
    *(void *)(a2 + 112) = *(void *)(a2 + 96) + v6;
  }

  return result;
}

uint64_t sub_181364FCC(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4)
{
  uint64_t v8 = *(char **)(a2 + 112);
  uint64_t v24 = v8;
  if (*(_BYTE *)(a1 + 463) && *(void *)(a2 + 64))
  {
    LOBYTE(v23) = 0;
    if (a3)
    {
      *a3 = v8;
      *a4 = *(_DWORD *)(a2 + 120) - 1;
    }

    sub_1813651BC(0LL, *(char **)(a2 + 96), *(_DWORD *)(a2 + 104), &v24, (void *)(a2 + 128), (int *)(a2 + 120), &v23);
    uint64_t result = 0LL;
    if ((_BYTE)v23) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = v24;
    }
    *(void *)(a2 + 112) = v10;
  }

  else
  {
    int v11 = 0;
    uint64_t v12 = *(void *)(a2 + 96);
    uint64_t v13 = *(int *)(a2 + 104);
    while (1)
    {
      int v14 = *v8;
      if (v14 | v11)
      {
        do
        {
          int v11 = v14 & 0x80;
          int v15 = *++v8;
          LOBYTE(v14) = v15;
        }

        while (v15 | v11);
      }

      uint64_t result = sub_1813643E8(a2);
      if ((_DWORD)result) {
        return result;
      }
    }

    BOOL v16 = v8 + 1;
    uint64_t v24 = v8 + 1;
    if (a3)
    {
      *a3 = *(char **)(a2 + 112);
      *a4 = ~*(_DWORD *)(a2 + 112) + (_DWORD)v16;
    }

    if ((unint64_t)v16 >= v12 + v13)
    {
LABEL_22:
      uint64_t result = 0LL;
      *(void *)(a2 + 112) = 0LL;
    }

    else
    {
      uint64_t v17 = v12 + v13 - (void)v16;
      uint64_t v18 = -11LL - (void)v8;
      while (!*v16)
      {
        ++v16;
        --v18;
        if (!--v17) {
          goto LABEL_22;
        }
      }

      uint64_t v24 = v16;
      if (*(void *)(a2 + 56))
      {
        uint64_t v19 = -v18;
        while (v19 - *(void *)(a2 + 40) > *(int *)(a2 + 52))
        {
          uint64_t result = sub_1813643E8(a2);
          if (*(void *)(a2 + 56)) {
            BOOL v20 = (_DWORD)result == 0;
          }
          else {
            BOOL v20 = 0;
          }
          if (!v20)
          {
            if ((_DWORD)result) {
              return result;
            }
            break;
          }
        }
      }

      int v21 = sub_181363B00(v16, (unint64_t *)&v23);
      uint64_t result = 0LL;
      *(void *)(a2 + 112) = &v16[v21];
      if (*(_BYTE *)(a1 + 463)) {
        uint64_t v22 = -v23;
      }
      else {
        uint64_t v22 = v23;
      }
      *(void *)(a2 + 128) += v22;
    }
  }

  return result;
}

uint64_t sub_1813651BC(uint64_t result, char *a2, int a3, char **a4, void *a5, int *a6, _BYTE *a7)
{
  uint64_t v10 = a2;
  int v11 = result;
  uint64_t v12 = *a4;
  if (*a4)
  {
    for (uint64_t i = v12 - 2; i >= a2; --i)
    {
      if ((*i & 0x80000000) == 0) {
        break;
      }
    }

    unint64_t v15 = (unint64_t)(i + 1);
    uint64_t result = sub_181363B00(i + 1, (unint64_t *)&v34);
    uint64_t v16 = v34;
    if (!v11) {
      uint64_t v16 = -v34;
    }
    *a5 += v16;
    if ((char *)v15 == v10)
    {
      *a7 = 1;
    }

    else
    {
      uint64_t v17 = i - 1;
      while (v17 > v10)
      {
        int v19 = *v17--;
        int v18 = v19;
        if (v19)
        {
          if (v17 <= v10) {
            goto LABEL_12;
          }
          while (1)
          {
            int v31 = (char)v18;
            int v18 = *v17;
            if (!(v18 & 0x80 | v31)) {
              goto LABEL_31;
            }
            if (--v17 <= v10)
            {
              uint64_t v17 = v10;
              if (v18) {
                goto LABEL_32;
              }
              goto LABEL_30;
            }
          }
        }
      }

      int v18 = 0;
LABEL_12:
      if (v18) {
        goto LABEL_32;
      }
LABEL_30:
      if (v15 > (unint64_t)(v17 + 2)) {
LABEL_31:
      }
        v17 += 2;
LABEL_32:
      int v32 = (_DWORD)i - (_DWORD)v17 + 1;
      uint64_t v10 = v17;
      do
      {
        int v33 = *v10++;
        --v32;
      }

      while (v33 < 0);
      *a6 = v32;
    }

    *a4 = v10;
  }

  else
  {
    unint64_t v20 = (unint64_t)&a2[a3];
    if (a3 < 1)
    {
      uint64_t v24 = 0LL;
      uint64_t v21 = 0LL;
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = 1LL;
      if ((_DWORD)result) {
        uint64_t v23 = -1LL;
      }
      else {
        uint64_t v23 = 1LL;
      }
LABEL_18:
      uint64_t result = sub_181363B00(v10, (unint64_t *)&v34);
      uint64_t v24 = &v10[(int)result];
      int v25 = *v24;
      uint64_t v26 = v24;
      if (*v24)
      {
        uint64_t v26 = &v10[(int)result];
        do
        {
          unsigned int v27 = v25 & 0xFFFFFF80;
          int v28 = *++v26;
          int v25 = v28;
        }

        while (v27 | v28);
      }

      v21 += v34 * v22;
      int v29 = (unsigned __int8 *)(v26 + 1);
      while ((unint64_t)v29 < v20)
      {
        if (*v29++)
        {
          uint64_t v10 = (char *)(v29 - 1);
          uint64_t v22 = v23;
          goto LABEL_18;
        }
      }
    }

    *a6 = v20 - (_DWORD)v24;
    *a4 = v24;
    *a5 = v21;
  }

  return result;
}

uint64_t sub_18136538C(int a1, uint64_t a2, uint64_t *a3)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v7 = sub_18126F0AC(136LL);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  *(void *)(v7 + 128) = 0LL;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  if (a1 <= 1)
  {
    uint64_t v11 = 0LL;
    *(void *)(v7 + 9) = -1LL;
    *(void *)(v7 + 17) = -1LL;
    *(void *)(v7 + 25) = -1LL;
    *(void *)(v7 + 33) = -1LL;
    *(void *)(v7 + 41) = -1LL;
    *(void *)(v7 + 49) = 0xFFFFFFFFFFFFFFLL;
    *(void *)(v7 + 57) = 0LL;
    *(void *)(v7 + 65) = -256LL;
    *(void *)(v7 + 73) = 0LL;
    *(void *)(v7 + 81) = 0LL;
    *(void *)(v7 + 89) = 0LL;
    *(void *)(v7 + 97) = -65536LL;
    *(void *)(v7 + 105) = 0LL;
    *(void *)(v7 + 113) = 0LL;
    do
    {
      int v13 = (v11 + 55) < 0xFFFFFFF6 && (((_DWORD)v11 + 113) & 0x7FFFFFDFu) - 91 < 0xFFFFFFE6;
      *(_BYTE *)(v7 + 121 + v11++) = v13 << 31 >> 31;
    }

    while (v11 != 15);
    goto LABEL_18;
  }

  int v9 = strlen(*(const char **)(a2 + 8));
  if (v9 < 1)
  {
LABEL_18:
    uint64_t result = 0LL;
    *a3 = v8;
    return result;
  }

  uint64_t v10 = 0LL;
  while ((*(char *)(*(void *)(a2 + 8) + v10) & 0x80000000) == 0)
  {
    *(_BYTE *)(v8 + *(unsigned __int8 *)(*(void *)(a2 + 8) + v10++) + 8) = 1;
    if (v9 == v10) {
      goto LABEL_18;
    }
  }

  int v14 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      return 1LL;
    }
    int v14 = &xmmword_18C465410;
  }

  (*v14)(v8);
  return 1LL;
}

uint64_t sub_181365558(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_181365604(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = sub_18126F0AC(48LL);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  *(void *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0) {
      a3 = strlen(a2);
    }
  }

  else
  {
    a3 = 0;
  }

  uint64_t result = 0LL;
  *(_DWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 16) = a3;
  *(void *)(v9 + 32) = 0LL;
  *(_DWORD *)(v9 + 40) = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_181365688(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_1813657A8(uint64_t *a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v6 = *((_DWORD *)a1 + 4);
  int v7 = *((_DWORD *)a1 + 5);
  if (v7 >= v6) {
    return 101LL;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  uint64_t v16 = v15 + 1;
  while (1)
  {
    uint64_t v19 = v7;
    if ((*(char *)(v15 + v7) & 0x80000000) == 0)
    {
      uint64_t v20 = *(unsigned __int8 *)(v15 + v7);
      while (*(_BYTE *)(v14 + v20 + 8))
      {
        int v17 = v7 + 1;
        *((_DWORD *)a1 + 5) = v7 + 1;
        if (v6 - 1 == v7) {
          goto LABEL_5;
        }
        int v21 = *(char *)(v16 + v19);
        uint64_t v20 = *(unsigned __int8 *)(v16 + v19++);
        ++v7;
        if (v21 < 0)
        {
          if (v17 >= v6) {
            goto LABEL_4;
          }
          goto LABEL_14;
        }
      }
    }

    int v17 = v7;
    if (v7 < v6)
    {
LABEL_14:
      uint64_t v22 = (char *)(v15 + v17);
      while (1)
      {
        int v24 = *v22++;
        unsigned __int8 v23 = v24;
        if ((v24 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(v14 + v23 + 8)) {
            break;
          }
        }

        *((_DWORD *)a1 + 5) = ++v17;
        if (v6 == v17)
        {
          int v17 = v6;
          break;
        }
      }
    }

uint64_t sub_18136596C(uint64_t a1, uint64_t a2, void *a3)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v5 = sub_18126F0AC(8LL);
  if (!v5) {
    return 7LL;
  }
  int v6 = (void *)v5;
  uint64_t result = 0LL;
  *int v6 = 0LL;
  *a3 = v6;
  return result;
}

uint64_t sub_1813659B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_181365A60(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = sub_18126F0AC(48LL);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  *(void *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0) {
      a3 = strlen(a2);
    }
  }

  else
  {
    a3 = 0;
  }

  uint64_t result = 0LL;
  *(_DWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 16) = a3;
  *(void *)(v9 + 32) = 0LL;
  *(_DWORD *)(v9 + 40) = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_181365AE4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_181365C04(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v329 = *MEMORY[0x1895F89C0];
  int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= v6) {
    return 101LL;
  }
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = v14 + 1;
  while (1)
  {
    uint64_t v18 = v7;
    int v19 = *(char *)(v14 + v7);
    if ((v19 & 0x80) == 0)
    {
      char v20 = *(_BYTE *)(v14 + v7);
      while (v20 < 48 || !byte_1813CB404[v19 - 48])
      {
        int v16 = v7 + 1;
        *(_DWORD *)(a1 + 20) = v7 + 1;
        if (v6 - 1 == v7) {
          goto LABEL_5;
        }
        int v19 = *(char *)(v15 + v18);
        char v20 = *(_BYTE *)(v15 + v18++);
        ++v7;
        if ((v19 & 0x80) != 0)
        {
          if (v16 >= v6) {
            goto LABEL_4;
          }
          goto LABEL_15;
        }
      }
    }

    int v16 = v7;
    if (v7 < v6)
    {
LABEL_15:
      int v21 = (char *)(v14 + v16);
      while (1)
      {
        int v23 = *v21++;
        int v22 = v23;
        if ((v23 & 0x80) == 0)
        {
          BOOL v24 = __OFSUB__(v22, 48);
          int v25 = v22 - 48;
          if (v25 < 0 != v24 || !byte_1813CB404[v25]) {
            break;
          }
        }

        *(_DWORD *)(a1 + 20) = ++v16;
        if (v6 == v16)
        {
          int v16 = v6;
          break;
        }
      }
    }

LABEL_549:
                    int v274 = v68[1];
                    uint64_t v8 = v321;
                    switch(v68[1])
                    {
                      case 'a':
                        int v275 = *v68;
                        if (v275 == 108) {
                          goto LABEL_571;
                        }
                        goto LABEL_585;
                      case 'b':
                      case 'd':
                      case 'f':
                      case 'g':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'm':
                      case 'p':
                      case 'q':
                      case 'r':
                      case 'w':
                      case 'x':
                      case 'y':
                        goto LABEL_584;
                      case 'c':
                        if (*v68 != 101) {
                          goto LABEL_588;
                        }
                        goto LABEL_565;
                      case 'e':
                        int v275 = *v68;
                        if (v275 != 114) {
                          goto LABEL_585;
                        }
                        goto LABEL_571;
                      case 'i':
                        int v275 = *v68;
                        if (v275 != 99) {
                          goto LABEL_585;
                        }
                        goto LABEL_571;
                      case 'l':
                        if (*v68 != 101) {
                          goto LABEL_588;
                        }
                        goto LABEL_584;
                      case 'n':
                        int v275 = *v68;
                        if (v275 != 116) {
                          goto LABEL_585;
                        }
                        int v277 = v68[2];
                        if (v277 == 101)
                        {
                          if (v274 != 110) {
                            goto LABEL_584;
                          }
                          v276 = v68 + 3;
                          if (v68[3] == 109 && v68[4] == 101)
                          {
                            v276 = v68 + 5;
                          }

                          else if (*v276 == 109)
                          {
LABEL_565:
                            v276 = v68 + 4;
                          }
                        }

                        else
                        {
                          if (v277 != 97) {
                            goto LABEL_588;
                          }
LABEL_581:
                          v276 = v68 + 3;
                        }

                        goto LABEL_582;
                      case 'o':
                        int v278 = *v68;
                        if (v278 == 117)
                        {
LABEL_571:
                          v276 = v68 + 2;
                          goto LABEL_582;
                        }

                        v276 = v68 + 3;
                        goto LABEL_609;
                      case 's':
                        int v275 = *v68;
                        if (v275 == 109) {
                          goto LABEL_573;
                        }
                        goto LABEL_585;
                      case 't':
                        v276 = v68 + 3;
                        int v279 = *v68;
                        if (v274 == 116 && v279 == 101)
                        {
                          if (v68[2] != 97) {
                            goto LABEL_584;
                          }
                        }

                        else
                        {
                          if (v279 != 105 || v274 != 116) {
                            goto LABEL_584;
                          }
LABEL_609:
                          if (v68[2] != 105) {
                            goto LABEL_584;
                          }
                        }

LABEL_582:
                        if (sub_181367A84(v276)) {
                          uint64_t v68 = v276;
                        }
LABEL_584:
                        int v275 = *v68;
LABEL_585:
                        if (v275 == 101)
                        {
                          if (sub_181367A84(v68 + 1)
                            || sub_181367994(v68 + 1)
                            && (!sub_181367B70(v68 + 1)
                             || v68[1] - 119 < 3
                             || !v68[2]
                             || (v68[2] != 121LL
                               ? (int v286 = 1 - byte_1813CB454[v68[2] - 97])
                               : (int v286 = sub_181367B70(v68 + 3)),
                                 !v286 || !sub_181367B70(v68 + 3))))
                          {
                            ++v68;
                          }
                        }

LABEL_588:
                        if (sub_181367A84(v68) && *v68 == 108 && v68[1] == 108) {
                          ++v68;
                        }
                        int v280 = strlen(v68);
                        *uint64_t v11 = v280;
                        *(_BYTE *)(v326 + v280) = 0;
                        char v281 = *v68;
                        if (*v68)
                        {
                          v282 = (char *)(v280 + v326 - 1);
                          v283 = (unsigned __int8 *)(v68 + 1);
                          do
                          {
                            *v282-- = v281;
                            int v284 = *v283++;
                            char v281 = v284;
                          }

                          while (v284);
                        }

                        break;
                      case 'u':
                        int v275 = *v68;
                        if (v275 != 115) {
                          goto LABEL_585;
                        }
                        if (v68[2] == 111) {
                          goto LABEL_581;
                        }
                        goto LABEL_584;
                      case 'v':
                      case 'z':
                        if (*v68 != 101) {
                          goto LABEL_588;
                        }
LABEL_573:
                        if (v68[2] != 105) {
                          goto LABEL_584;
                        }
                        goto LABEL_581;
                      default:
                        uint64_t v8 = v321;
                        goto LABEL_584;
                    }

                    goto LABEL_595;
                  }
                }

                else
                {
                  if (v69 != 110)
                  {
                    if (v69 != 114) {
                      goto LABEL_368;
                    }
                    if (v103 == 111 && v68[2] == 116 && v68[3] == 97)
                    {
                      v322 = v68 + 1;
                      signed __int8 v186 = v68[4];
                      if (v186)
                      {
                        uint64_t v187 = v68 + 5;
                        while (1)
                        {
                          uint64_t v188 = v186 - 97LL;
                          if (!(v188 == 24 ? sub_181367B70(v187) : 1 - byte_1813CB454[v188])) {
                            break;
                          }
                          int v190 = *v187++;
                          signed __int8 v186 = v190;
                          if (!v190) {
                            goto LABEL_549;
                          }
                        }

                        v312 = v187 - 1;
                        if (*(v312 - 1))
                        {
                          *((_WORD *)v68 + 1) = 24948;
                          goto LABEL_496;
                        }
                      }
                    }

                    goto LABEL_549;
                  }

                  if (v103 != 111) {
                    goto LABEL_549;
                  }
                }

                if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97)
                {
                  signed __int8 v161 = v68[5];
                  if (v161)
                  {
                    v322 = v68 + 2;
                    uint64_t v162 = v68 + 6;
                    while (1)
                    {
                      uint64_t v163 = v161 - 97LL;
                      if (!(v163 == 24 ? sub_181367B70(v162) : 1 - byte_1813CB454[v163])) {
                        break;
                      }
                      int v165 = *v162++;
                      signed __int8 v161 = v165;
                      if (!v165) {
                        goto LABEL_549;
                      }
                    }

                    v271 = v162 - 1;
                    if (*(v271 - 1))
                    {
                      *(_WORD *)(v68 + 3) = 24948;
                      goto LABEL_496;
                    }
                  }
                }

                goto LABEL_549;
              case 's':
                uint64_t v135 = v68 + 5;
                if (v103 != 115 || v69 != 109)
                {
                  if (v69 != 115) {
                    goto LABEL_368;
                  }
                  if (v103 == 115)
                  {
                    if (v68[2] == 101 && v68[3] == 110 && v68[4] == 101 && *v135 == 118 && v68[6] == 105)
                    {
                      v322 = v68 + 4;
                      signed __int8 v166 = v68[7];
                      if (v166)
                      {
                        uint64_t v167 = v68 + 8;
                        while (1)
                        {
                          uint64_t v168 = v166 - 97LL;
                          if (!(v168 == 24 ? sub_181367B70(v167) : 1 - byte_1813CB454[v168])) {
                            break;
                          }
                          int v170 = *v167++;
                          signed __int8 v166 = v170;
                          if (!v170) {
                            goto LABEL_397;
                          }
                        }

                        v314 = v167 - 1;
                        if (*(v314 - 1))
                        {
                          *(_WORD *)(v68 + 5) = 26998;
                          goto LABEL_496;
                        }
                      }
                    }

                    else if (v68[2] == 101 && v68[3] == 110 && v68[4] == 108 && *v135 == 117 && v68[6] == 102)
                    {
                      v322 = v68 + 4;
                      signed __int8 v217 = v68[7];
                      if (v217)
                      {
                        v218 = v68 + 8;
                        while (1)
                        {
                          uint64_t v219 = v217 - 97LL;
                          if (!(v219 == 24 ? sub_181367B70(v218) : 1 - byte_1813CB454[v219])) {
                            break;
                          }
                          int v221 = *v218++;
                          signed __int8 v217 = v221;
                          if (!v221) {
                            goto LABEL_397;
                          }
                        }

                        v316 = v218 - 1;
                        if (*(v316 - 1))
                        {
                          *(_WORD *)(v68 + 5) = 26229;
                          goto LABEL_633;
                        }
                      }
                    }

                    else if (v68[2] == 101 && v68[3] == 110 && v68[4] == 115)
                    {
                      v322 = v68 + 4;
                      v320 = v68 + 5;
                      if (*v135 == 117)
                      {
                        uint64_t v155 = v68 + 6;
                        if (v68[6] == 111)
                        {
                          signed __int8 v222 = v68[7];
                          if (v222)
                          {
                            int8x16x2_t v223 = v68 + 8;
                            while (1)
                            {
                              uint64_t v224 = v222 - 97LL;
                              if (!(v224 == 24 ? sub_181367B70(v223) : 1 - byte_1813CB454[v224])) {
                                break;
                              }
                              int v226 = *v223++;
                              signed __int8 v222 = v226;
                              if (!v226) {
                                goto LABEL_397;
                              }
                            }

                            v318 = v223 - 1;
                            if (*(v318 - 1))
                            {
LABEL_663:
                              *uint64_t v155 = 111;
                              char *v320 = 117;
                              uint64_t v68 = v322;
                              char *v322 = 115;
                            }
                          }
                        }
                      }
                    }
                  }

LABEL_397:
                  if (v68[1] != 115) {
                    goto LABEL_549;
                  }
                  if (v68[2] != 101) {
                    goto LABEL_549;
                  }
                  if (v68[3] != 110) {
                    goto LABEL_549;
                  }
                  signed __int8 v203 = v68[4];
                  if (!v203) {
                    goto LABEL_549;
                  }
                  v323 = (unsigned __int8 *)(v68 + 4);
                  int v204 = v68 + 5;
                  while (1)
                  {
                    uint64_t v205 = v203 - 97LL;
                    if (!(v205 == 24 ? sub_181367B70(v204) : 1 - byte_1813CB454[v205])) {
                      break;
                    }
                    int v207 = *v204++;
                    signed __int8 v203 = v207;
                    if (!v207) {
                      goto LABEL_549;
                    }
                  }

                  v239 = v204 - 1;
                  goto LABEL_547;
                }

                if (v68[2] == 105 && v68[3] == 108 && v68[4] == 97)
                {
                  v322 = v68 + 3;
                  char v136 = *v135;
                  if (*v135)
                  {
                    int v137 = v68 + 6;
                    while (1)
                    {
                      uint64_t v138 = v136 - 97LL;
                      if (!(v138 == 24 ? sub_181367B70(v137) : 1 - byte_1813CB454[v138])) {
                        break;
                      }
                      int v140 = *v137++;
                      char v136 = v140;
                      if (!v140) {
                        goto LABEL_549;
                      }
                    }

                    v289 = v137 - 1;
                    if (*(v289 - 1)) {
                      goto LABEL_632;
                    }
                  }
                }

                goto LABEL_549;
              case 't':
                if (v103 == 116 && v69 == 105)
                {
                  if (v68[2] == 105)
                  {
                    v322 = v68 + 3;
                    if (v68[3] == 108 && v68[4] == 97)
                    {
                      signed __int8 v141 = v68[5];
                      if (!v141) {
                        goto LABEL_372;
                      }
                      uint64_t v142 = v68 + 6;
                      while (1)
                      {
                        uint64_t v143 = v141 - 97LL;
                        if (!(v143 == 24 ? sub_181367B70(v142) : 1 - byte_1813CB454[v143])) {
                          break;
                        }
                        int v145 = *v142++;
                        signed __int8 v141 = v145;
                        if (!v145) {
                          goto LABEL_372;
                        }
                      }

                      v291 = v142 - 1;
                      if (!*(v291 - 1)) {
                        goto LABEL_372;
                      }
LABEL_632:
                      v68[4] = 97;
LABEL_633:
                      uint64_t v68 = v322;
                      char *v322 = 108;
LABEL_385:
                      uint64_t v196 = v68 + 4;
                      int v197 = v68[1];
                      if (v197 == 97)
                      {
                        if (v68[2] == 99 && v68[3] == 105)
                        {
                          char v198 = *v196;
                          if (*v196)
                          {
                            uint64_t v199 = v68 + 5;
                            while (1)
                            {
                              uint64_t v200 = v198 - 97LL;
                              if (!(v200 == 24 ? sub_181367B70(v199) : 1 - byte_1813CB454[v200])) {
                                break;
                              }
                              int v202 = *v199++;
                              char v198 = v202;
                              if (!v202) {
                                goto LABEL_549;
                              }
                            }

                            v237 = v199 - 1;
                            if (*(v237 - 1))
                            {
                              *((_WORD *)v68 + 1) = 26979;
                              v68 += 2;
                            }
                          }
                        }
                      }

                      else if (v197 == 117 && v68[2] == 102)
                      {
                        signed __int8 v208 = v68[3];
                        if (v208)
                        {
                          v323 = (unsigned __int8 *)(v68 + 3);
                          while (1)
                          {
                            uint64_t v209 = v208 - 97LL;
                            if (!(v209 == 24 ? sub_181367B70(v196) : 1 - byte_1813CB454[v209])) {
                              break;
                            }
                            int v211 = *v196++;
                            signed __int8 v208 = v211;
                            if (!v211) {
                              goto LABEL_549;
                            }
                          }

                          v239 = v196 - 1;
LABEL_547:
                          if (*(v239 - 1)) {
                            uint64_t v68 = (char *)v323;
                          }
                        }
                      }

                      goto LABEL_549;
                    }
                  }
                }

                else
                {
                  if (v69 != 105)
                  {
LABEL_368:
                    switch((char)v69)
                    {
                      case 'e':
                        if (v69 == 101) {
                          goto LABEL_497;
                        }
                        break;
                      case 'i':
                        if (v69 == 105) {
                          goto LABEL_372;
                        }
                        break;
                      case 'l':
                        if (v69 == 108) {
                          goto LABEL_385;
                        }
                        break;
                      case 's':
                        if (v69 == 115) {
                          goto LABEL_397;
                        }
                        break;
                      default:
                        goto LABEL_549;
                    }

                    goto LABEL_549;
                  }

                  if (v103 != 116) {
                    goto LABEL_372;
                  }
                }

                if (v68[2] == 105 && v68[3] == 118 && v68[4] == 105)
                {
                  v322 = v68 + 2;
                  signed __int8 v171 = v68[5];
                  if (!v171) {
                    goto LABEL_372;
                  }
                  uint64_t v172 = v68 + 6;
                  while (1)
                  {
                    uint64_t v173 = v171 - 97LL;
                    if (!(v173 == 24 ? sub_181367B70(v172) : 1 - byte_1813CB454[v173])) {
                      break;
                    }
                    int v175 = *v172++;
                    signed __int8 v171 = v175;
                    if (!v175) {
                      goto LABEL_372;
                    }
                  }

                  v287 = v172 - 1;
                  if (*(v287 - 1))
                  {
                    *(_WORD *)(v68 + 3) = 26998;
                    goto LABEL_496;
                  }
                }

                else if (v68[2] == 105)
                {
                  v322 = v68 + 3;
                  if (v68[3] == 108 && v68[4] == 105 && v68[5] == 98)
                  {
                    signed __int8 v176 = v68[6];
                    if (v176)
                    {
                      int v177 = v68 + 7;
                      while (1)
                      {
                        uint64_t v178 = v176 - 97LL;
                        if (!(v178 == 24 ? sub_181367B70(v177) : 1 - byte_1813CB454[v178])) {
                          break;
                        }
                        int v180 = *v177++;
                        signed __int8 v176 = v180;
                        if (!v180) {
                          goto LABEL_372;
                        }
                      }

                      v297 = v177 - 1;
                      if (*(v297 - 1))
                      {
                        *((_WORD *)v68 + 2) = 25196;
                        goto LABEL_496;
                      }
                    }
                  }
                }

                goto LABEL_372;
              default:
                goto LABEL_368;
            }
          }

          goto LABEL_143;
        }
      }

      else
      {
        char v66 = v64;
      }

      unsigned int v70 = v66 + 3;
      if (v65 == 100)
      {
        uint64_t v68 = v66 + 1;
        if (v66[1] != 101) {
          goto LABEL_143;
        }
        int v69 = v66[2];
        if (v69 == 101)
        {
          char v78 = *v70;
          if (*v70)
          {
            uint64_t v79 = v66 + 4;
            while (1)
            {
              uint64_t v80 = v78 - 97LL;
              if (!(v80 == 24 ? sub_181367B70(v79) : 1 - byte_1813CB454[v80])) {
                break;
              }
              int v82 = *v79++;
              char v78 = v82;
              if (!v82) {
                goto LABEL_143;
              }
            }

            int v96 = v79 - 1;
            if (*(v96 - 1))
            {
              int v69 = 101;
              v66[2] = 101;
LABEL_149:
              char *v68 = v69;
              goto LABEL_151;
            }
          }

          goto LABEL_143;
        }

        unsigned int v70 = v66 + 2;
        unint64_t v92 = v66 + 2;
        if (!*(v92 - 1))
        {
LABEL_143:
          int v69 = *v66;
          uint64_t v68 = v66;
LABEL_144:
          if (v69 != 121) {
            goto LABEL_151;
          }
          uint64_t v101 = v68 + 1;
          if (!*(v101 - 1))
          {
            int v69 = 121;
            goto LABEL_151;
          }

          goto LABEL_148;
        }
      }

      else
      {
        if (v65 != 103) {
          goto LABEL_143;
        }
        if (v66[1] != 110) {
          goto LABEL_143;
        }
        if (v66[2] != 105) {
          goto LABEL_143;
        }
        int v71 = v66 + 3;
        if (!*(v71 - 1)) {
          goto LABEL_143;
        }
        int v69 = *v70;
      }

      if (v69 == 108)
      {
        char v66 = v70;
        if (v70[1] == 98)
        {
          *(_WORD *)(v70 - 1) = 27749;
          int v94 = (unsigned __int8 *)(v70 - 1);
          char v95 = 98;
          goto LABEL_128;
        }
      }

      else
      {
        char v66 = v70;
        if (v69 == 122)
        {
          if (v70[1] == 105)
          {
            *(_WORD *)(v70 - 1) = 31333;
            int v94 = (unsigned __int8 *)(v70 - 1);
            char v95 = 105;
            goto LABEL_128;
          }
        }

        else if (v69 == 116 && v70[1] == 97)
        {
          *(_WORD *)(v70 - 1) = 29797;
          int v94 = (unsigned __int8 *)(v70 - 1);
          char v95 = 97;
LABEL_128:
          v94[2] = v95;
          int v69 = 101;
          uint64_t v68 = (char *)v94;
          goto LABEL_151;
        }
      }

      unsigned int v98 = v69 - 108;
      if (sub_181367B70(v66))
      {
        uint64_t v68 = v66 + 1;
      }

      if (sub_181367994(v66))
      {
        int v99 = sub_181367B70(v66);
        if ((v69 - 119) >= 3 && v99 && v66[1])
        {
          int v100 = v66[1] == 121LL ? sub_181367B70(v66 + 2) : 1 - byte_1813CB454[v66[1] - 97];
          if (v100 && sub_181367B70(v66 + 2))
          {
            int v69 = 101;
            *(v66 - 1) = 101;
            uint64_t v68 = v66 - 1;
            goto LABEL_151;
          }
        }
      }

      goto LABEL_143;
    }
  }

  int v50 = 0;
  int v51 = (_BYTE *)v27;
  uint64_t v52 = v17;
  do
  {
    int v54 = *v33++;
    char v53 = v54;
    unsigned int v55 = v54 - 65;
    char v56 = v54 + 32;
    else {
      int v57 = v50;
    }
    if (v55 >= 0x1A) {
      int v50 = v57;
    }
    else {
      char v53 = v56;
    }
    *v51++ = v53;
    --v52;
  }

  while (v52);
  if (v50) {
    uint64_t v58 = 3LL;
  }
  else {
    uint64_t v58 = 10LL;
  }
  LODWORD(v43) = v17;
  if ((int)v17 > 2 * (int)v58)
  {
    uint64_t v59 = (int)v17 - (int)v58;
    else {
      uint64_t v60 = (int)v17;
    }
    uint64_t v61 = v60 - v59;
    if ((unint64_t)(v60 - v59) < 0x20)
    {
      unint64_t v62 = v58;
      goto LABEL_109;
    }

    uint64_t v87 = v27 + v59;
    if ((unint64_t)(v58 - v59) < 0x20)
    {
      unint64_t v62 = v58;
      goto LABEL_109;
    }

    unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFE0LL | v58;
    v59 += v61 & 0xFFFFFFFFFFFFFFE0LL;
    unint64_t v88 = (_OWORD *)(v58 + v27 + 16);
    char v89 = (__int128 *)(v87 + 16);
    unint64_t v90 = v61 & 0xFFFFFFFFFFFFFFE0LL;
    do
    {
      __int128 v91 = *v89;
      *(v88 - 1) = *(v89 - 1);
      *unint64_t v88 = v91;
      v88 += 2;
      v89 += 2;
      v90 -= 32LL;
    }

    while (v90);
    if (v61 != (v61 & 0xFFFFFFFFFFFFFFE0LL))
    {
      do
LABEL_109:
        *(_BYTE *)(v27 + v62++) = *(_BYTE *)(v27 + v59++);
      while (v59 < (int)v17);
    }

    LODWORD(v43) = v62;
  }

BOOL sub_181367994(char *a1)
{
  char v1 = *a1;
  if (!*a1) {
    return 0LL;
  }
  uint64_t v2 = a1 + 1;
  while (1)
  {
    uint64_t v4 = v1 - 97LL;
    if (v4 != 24)
    {
      if (1 == byte_1813CB454[v4]) {
        break;
      }
      goto LABEL_4;
    }

BOOL sub_181367A84(char *a1)
{
  char v1 = *a1;
  if (!*a1) {
    return 0LL;
  }
  uint64_t v2 = a1 + 1;
  while (1)
  {
    uint64_t v3 = v1 - 97LL;
    if (v3 == 24)
    {
      goto LABEL_7;
    }

    if (1 == byte_1813CB454[v3]) {
      break;
    }
LABEL_7:
    int v4 = *v2++;
    char v1 = v4;
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v5 = v2 - 1;
  char v7 = *(v5 - 1);
  if (!v7) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v8 = v7 - 97LL;
    if (v8 != 24) {
      break;
    }
LABEL_16:
    int v9 = *v5++;
    char v7 = v9;
    if (!v9) {
      return 0LL;
    }
  }

  if (1 != byte_1813CB454[v8]) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v11 = v5 - 1;
  return *(v11 - 1) != 0;
}

uint64_t sub_181367B70(char *a1)
{
  if (!*a1) {
    return 0LL;
  }
  if (*a1 != 121LL) {
    return byte_1813CB454[*a1 - 97];
  }
  if (!a1[1]) {
    return 1LL;
  }
  if (a1[1] == 121LL) {
    int v1 = sub_181367B70(a1 + 2);
  }
  else {
    int v1 = 1 - byte_1813CB454[a1[1] - 97];
  }
  return v1 != 0;
}

uint64_t sub_181367BFC(uint64_t a1, int a2)
{
  if (sqlite3_initialize()) {
    return 1LL;
  }
  uint64_t v5 = (_DWORD *)sub_18126F0AC(16LL * a2);
  if (!v5) {
    return 1LL;
  }
  int v6 = v5;
  bzero(v5, 16LL * a2);
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_11;
      }
      uint64_t v8 = &xmmword_18C465410;
    }

    (*v8)(v7);
  }

uint64_t sub_181367D94(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

void sub_181367E48(uint64_t a1, int a2, sqlite3_value **a3)
{
  if (a1 && (uint64_t v6 = *(void *)(a1 + 8)) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = (uint64_t)*a3;
    if (!*a3)
    {
LABEL_4:
      int v9 = 0LL;
LABEL_5:
      sub_1812CF36C(91138);
LABEL_6:
      int v10 = 0;
      goto LABEL_7;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    uint64_t v7 = 0LL;
    uint64_t v8 = (uint64_t)*a3;
    if (!*a3) {
      goto LABEL_4;
    }
  }

  int v13 = *(unsigned __int16 *)(v8 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v8 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      int v9 = 0LL;
      __int16 v14 = *(_WORD *)(v8 + 20);
      if ((v14 & 2) == 0) {
        goto LABEL_44;
      }
    }

    else
    {
      int v9 = (char *)sub_181303998((int *)v8, 1);
      uint64_t v8 = (uint64_t)*a3;
      if (!*a3) {
        goto LABEL_5;
      }
      __int16 v14 = *(_WORD *)(v8 + 20);
      if ((v14 & 2) == 0) {
        goto LABEL_44;
      }
    }
  }

  else
  {
    int v9 = *(char **)(v8 + 8);
    __int16 v14 = *(_WORD *)(v8 + 20);
    if ((v14 & 2) == 0) {
      goto LABEL_44;
    }
  }

  if (*(_BYTE *)(v8 + 22) == 1)
  {
    int v10 = *(_DWORD *)(v8 + 16);
    goto LABEL_7;
  }

uint64_t sub_1813683B8(sqlite3 *a1, size_t a2, int a3, const char **a4, uint64_t *a5, char **a6)
{
  return sub_18136BA10(1, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1813683D8(sqlite3 *a1, size_t a2, int a3, const char **a4, uint64_t *a5, char **a6)
{
  return sub_18136BA10(0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1813683F8(uint64_t a1, unsigned int *a2)
{
  if (*(_DWORD *)(a1 + 104)) {
    return 1LL;
  }
  a2[10] = 0;
  *((void *)a2 + 8) = 0x415312D000000000LL;
  uint64_t v3 = *a2;
  int v4 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = (unsigned __int8 *)(*((void *)a2 + 1) + 4LL);
  unsigned int v7 = -1;
  unsigned int v8 = -1;
  unsigned int v9 = -1;
  unsigned int v10 = -1;
  do
  {
    if (v6[1])
    {
      int v11 = *((_DWORD *)v6 - 1);
      if (v11 < 0)
      {
        BOOL v12 = 1;
        int v13 = *v6;
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_17;
        }
      }

      else
      {
        BOOL v12 = v11 == *(_DWORD *)(a1 + 48) + 1;
        int v13 = *v6;
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_17;
        }
      }

      if (v13 == 2 && v12)
      {
        int v4 = 1;
        a2[10] = 1;
        *((void *)a2 + 8) = 0x3FF0000000000000LL;
        unsigned int v7 = v5;
        goto LABEL_23;
      }

uint64_t sub_181368664(uint64_t a1)
{
  uint64_t v1 = a1;
  sqlite3_finalize(*(sqlite3_stmt **)(a1 + 432));
  for (uint64_t i = 112LL; i != 432; i += 8LL)
    sqlite3_finalize(*(sqlite3_stmt **)(v1 + i));
  uint64_t v3 = *(void *)(v1 + 472);
  if (v3)
  {
    int v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_9:
      (*v4)(v3);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    off_18C4653A8(v3);
    uint64_t v3 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v4 = &xmmword_18C465410;
      goto LABEL_9;
    }
  }

uint64_t sub_181368974(uint64_t a1)
{
  unsigned int v5 = 0;
  if (*(void *)(a1 + 80)) {
    uint64_t v2 = "--";
  }
  else {
    uint64_t v2 = &byte_1813CEAEE;
  }
  sub_18136EB1C( (char *)&v5,  *(sqlite3 **)(a1 + 24),  "DROP TABLE IF EXISTS %Q.'%q_segments';DROP TABLE IF EXISTS %Q.'%q_segdir';DROP TABLE IF EXISTS %Q.'%q_docsize';DROP "
    "TABLE IF EXISTS %Q.'%q_stat';%s DROP TABLE IF EXISTS %Q.'%q_content';",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    v2,
    *(void *)(a1 + 32),
    *(void *)(a1 + 40));
  uint64_t v3 = v5;
  if (!v5) {
    sub_181368664(a1);
  }
  return v3;
}

double sub_1813689FC(uint64_t a1, void *a2)
{
  if (sqlite3_initialize())
  {
    *a2 = 0LL;
  }

  else
  {
    int v4 = (_OWORD *)sub_18126F0AC(128LL);
    *a2 = v4;
    if (v4)
    {
      double result = 0.0;
      v4[6] = 0u;
      v4[7] = 0u;
      v4[4] = 0u;
      v4[5] = 0u;
      v4[2] = 0u;
      v4[3] = 0u;
      *int v4 = 0u;
      v4[1] = 0u;
    }
  }

  return result;
}

uint64_t sub_181368A58(uint64_t *a1)
{
  uint64_t v1 = a1;
  v2.n128_f64[0] = sub_18136EC18(a1);
  if (v1)
  {
    uint64_t v3 = (void (**)(uint64_t *, __n128))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v1, v2);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = (void (**)(uint64_t *, __n128))&xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_181368B08(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 104LL)) {
    return 1LL;
  }
  __int16 v9 = a2;
  unsigned int v11 = (unsigned __int16)a2;
  if ((_WORD)a2)
  {
    uint64_t v12 = *a5;
    unsigned int v13 = 1;
    if ((a2 & 0x10000) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    unsigned int v13 = 0;
    if ((a2 & 0x10000) == 0)
    {
LABEL_6:
      uint64_t v14 = 0LL;
      if ((a2 & 0x20000) != 0) {
        goto LABEL_7;
      }
LABEL_11:
      uint64_t v15 = 0LL;
      if ((a2 & 0x40000) != 0) {
        goto LABEL_8;
      }
LABEL_12:
      uint64_t v16 = 0LL;
      goto LABEL_13;
    }
  }

  uint64_t v14 = a5[v13++];
  if ((a2 & 0x20000) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v15 = a5[v13++];
  if ((a2 & 0x40000) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v16 = a5[v13];
LABEL_13:
  sub_18136EC18((uint64_t *)a1);
  if (v15 && sqlite3_value_numeric_type((sqlite3_value *)v15) == 1)
  {
    __int16 v17 = *(_WORD *)(v15 + 20);
    if ((v17 & 0x24) != 0)
    {
      uint64_t v18 = *(void *)v15;
      goto LABEL_23;
    }

    if ((v17 & 8) == 0)
    {
      if ((v17 & 0x12) != 0 && *(void *)(v15 + 8)) {
        uint64_t v18 = sub_181303DF0(v15);
      }
      else {
        uint64_t v18 = 0LL;
      }
      goto LABEL_23;
    }

    double v19 = *(double *)v15;
    if (*(double *)v15 >= -9.22337204e18)
    {
      if (v19 <= 9.22337204e18) {
        uint64_t v18 = (uint64_t)v19;
      }
      else {
        uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
      }
      goto LABEL_23;
    }
  }

  uint64_t v18 = 0x8000000000000000LL;
LABEL_23:
  *(void *)(a1 + 96) = v18;
  if (!v16 || sqlite3_value_numeric_type((sqlite3_value *)v16) != 1) {
    goto LABEL_42;
  }
  __int16 v20 = *(_WORD *)(v16 + 20);
  if ((v20 & 0x24) != 0)
  {
    *(void *)(a1 + 104) = *(void *)v16;
    if (!a3) {
      goto LABEL_46;
    }
LABEL_43:
    char v22 = *a3 == 68;
    goto LABEL_47;
  }

  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x12) != 0 && *(void *)(v16 + 8))
    {
      *(void *)(a1 + 104) = sub_181303DF0(v16);
      if (!a3) {
        goto LABEL_46;
      }
    }

    else
    {
      *(void *)(a1 + 104) = 0LL;
      if (!a3) {
        goto LABEL_46;
      }
    }

    goto LABEL_43;
  }

  double v21 = *(double *)v16;
  if (*(double *)v16 < -9.22337204e18)
  {
    *(void *)(a1 + 104) = 0x8000000000000000LL;
    if (!a3) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }

  if (v21 <= 9.22337204e18)
  {
    *(void *)(a1 + 104) = (uint64_t)v21;
    if (a3) {
      goto LABEL_43;
    }
  }

  else
  {
LABEL_42:
    *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
    if (a3) {
      goto LABEL_43;
    }
  }

uint64_t sub_1813692F0(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 1u)
  {
    uint64_t v2 = *(void *)a1;
    ++*(_DWORD *)(*(void *)a1 + 104LL);
    if (sqlite3_step(*(sqlite3_stmt **)(a1 + 16)) == 100)
    {
      sqlite3_int64 v3 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 0);
      uint64_t result = 0LL;
      *(void *)(a1 + 48) = v3;
    }

    else
    {
      *(_BYTE *)(a1 + 10) = 1;
      uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
    }

    --*(_DWORD *)(v2 + 104);
    return result;
  }

  unsigned int v8 = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5)
  {
    *(_BYTE *)(a1 + 10) = 1;
    goto LABEL_14;
  }

  do
  {
    if (!*(_BYTE *)(a1 + 11)) {
      sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
    }
    sub_1813733EC(a1, v5, (int *)&v8);
    int v6 = *(unsigned __int8 *)(v5 + 48);
    *(_BYTE *)(a1 + 10) = v6;
    *(_BYTE *)(a1 + 11) = 1;
    *(_DWORD *)(a1 + 112) = 1;
    *(void *)(a1 + 48) = *(void *)(v5 + 40);
  }

  while (!v6 && sub_181373E80(a1, (int *)&v8));
  uint64_t result = v8;
  if (!v8)
  {
LABEL_14:
    uint64_t v7 = *(void *)(a1 + 48);
    if (*(_BYTE *)(a1 + 76))
    {
      if (v7 < *(void *)(a1 + 96))
      {
LABEL_16:
        uint64_t result = 0LL;
        *(_BYTE *)(a1 + 10) = 1;
        return result;
      }
    }

    else if (v7 > *(void *)(a1 + 104))
    {
      goto LABEL_16;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_18136942C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 10)) {
    return 0LL;
  }
  sub_18136EC18((uint64_t *)a1);
  uint64_t result = 1LL;
  *(_BYTE *)(a1 + 10) = 1;
  return result;
}

uint64_t sub_181369464(uint64_t a1, uint64_t *a2, int a3)
{
  int v5 = a3 - *(_DWORD *)(*(void *)a1 + 48LL);
  if (v5 == 2)
  {
    if (!*(void *)(a1 + 24))
    {
      int v6 = *(_DWORD *)(*(void *)a1 + 48LL);
      if (*(void *)(*(void *)a1 + 88LL)) {
        goto LABEL_21;
      }
      if (!a2)
      {
        sub_1812CF36C(97431);
        return 0LL;
      }

      uint64_t v10 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(*a2, 0LL);
        return 0LL;
      }

      uint64_t result = 0LL;
      *(void *)uint64_t v10 = 0LL;
      goto LABEL_18;
    }

    if (a2)
    {
      uint64_t v9 = *(int *)(a1 + 32);
LABEL_14:
      uint64_t v10 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(*a2, v9);
        return 0LL;
      }

      uint64_t result = 0LL;
      *(void *)uint64_t v10 = v9;
LABEL_18:
      *(_WORD *)(v10 + 20) = 4;
      return result;
    }

uint64_t sub_18136967C(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 48);
  return 0LL;
}

uint64_t sub_18136968C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v207 = 0;
  unsigned int v208 = 0;
  if (a2 < 2) {
    goto LABEL_14;
  }
  if (!*a3)
  {
    sub_1812CF36C(97220);
    goto LABEL_8;
  }

  if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20)) & 1) == 0)
  {
LABEL_8:
    uint64_t v9 = a3[*(int *)(a1 + 48) + 4];
    if (!v9)
    {
      sub_1812CF36C(89717);
      goto LABEL_14;
    }

    __int16 v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 0x24) != 0)
    {
      double v11 = *(double *)v9;
    }

    else if ((v10 & 8) != 0)
    {
      double v30 = *(double *)v9;
      if (v30 > 9.22337204e18) {
        goto LABEL_12;
      }
      *(void *)&double v11 = (uint64_t)v30;
    }

    else
    {
      if ((v10 & 0x12) == 0 || !*(void *)(v9 + 8)) {
        goto LABEL_14;
      }
      LODWORD(v11) = sub_181303DF0(v9);
    }

    if ((LODWORD(v11) & 0x80000000) != 0)
    {
LABEL_12:
      unsigned int v12 = 19;
LABEL_16:
      unsigned int v208 = v12;
      goto LABEL_17;
    }

LABEL_236:
                  sub_1812CF36C(162440);
                  goto LABEL_237;
                case 109:
LABEL_225:
                  char v78 = "unopened";
                  break;
                default:
                  char v78 = "invalid";
                  break;
              }
            }

            else
            {
              char v78 = "NULL";
            }

            sqlite3_log(21, "API call with %s database connection pointer", v78);
            goto LABEL_236;
          }
        }

        else
        {
          sub_1812CF36C(97220);
          uint64_t v62 = *a3;
          if (!*a3)
          {
            sub_1812CF36C(89717);
            goto LABEL_204;
          }

          __int16 v63 = *(_WORD *)(v62 + 20);
        }

        if ((v63 & 0x24) != 0)
        {
          uint64_t v64 = *(void *)v62;
          goto LABEL_215;
        }

        if ((v63 & 8) != 0)
        {
          double v73 = *(double *)v62;
          if (*(double *)v62 >= -9.22337204e18)
          {
            if (v73 <= 9.22337204e18) {
              uint64_t v64 = (uint64_t)v73;
            }
            else {
              uint64_t v64 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          else
          {
            uint64_t v64 = 0x8000000000000000LL;
          }

LABEL_220:
              if (v64 != v75) {
                goto LABEL_221;
              }
LABEL_29:
              int v23 = 1;
              goto LABEL_30;
            }

            if ((v74 & 0x12) != 0 && *(void *)(v37 + 8))
            {
              uint64_t v75 = sub_181303DF0(v37);
              goto LABEL_220;
            }
          }

          else
          {
            sub_1812CF36C(89717);
          }

          uint64_t v75 = 0LL;
          goto LABEL_220;
        }

        if ((v63 & 0x12) != 0 && *(void *)(v62 + 8))
        {
          uint64_t v64 = sub_181303DF0(v62);
          goto LABEL_215;
        }

LABEL_428:
                                    unsigned int v208 = v139;
                                    goto LABEL_17;
                                  }

                                  if ((_DWORD)v179 == 61) {
                                    goto LABEL_526;
                                  }
                                  int v180 = &byte_1813C6343[v179];
                                  signed __int8 v181 = "=";
                                }

                                else
                                {
                                  int v180 = &byte_1813C6343[v178];
                                  signed __int8 v181 = "e=";
                                }
                              }

                              else
                              {
                                int v180 = &byte_1813C6343[v177];
                                signed __int8 v181 = "ge=";
                              }
                            }

                            else
                            {
                              int v180 = &byte_1813C6343[v176];
                              signed __int8 v181 = "rge=";
                            }
                          }

                          else
                          {
                            int v180 = &byte_1813C6343[v175];
                            signed __int8 v181 = "erge=";
                          }
                        }

                        else
                        {
                          int v180 = &byte_1813C6343[v174];
                          signed __int8 v181 = "merge=";
                        }
                      }

                      else
                      {
                        int v180 = &byte_1813C6343[v173];
                        signed __int8 v181 = "omerge=";
                      }
                    }

                    else
                    {
                      int v180 = &byte_1813C6343[v172];
                      signed __int8 v181 = "tomerge=";
                    }
                  }

                  else
                  {
                    int v180 = &byte_1813C6343[v171];
                    signed __int8 v181 = "utomerge=";
                  }
                }

                else
                {
                  int v180 = &byte_1813C6343[v57];
                  signed __int8 v181 = "automerge=";
                }

                int v186 = *v180;
                goto LABEL_525;
              }

              if ((_DWORD)v164 == 61) {
                goto LABEL_454;
              }
              v164 += (unint64_t)byte_1813C6343;
              int v165 = "=";
            }

            else
            {
              v164 += (unint64_t)byte_1813C6343;
              int v165 = "e=";
            }
          }

          else
          {
            v164 += (unint64_t)byte_1813C6343;
            int v165 = "ge=";
          }
        }

        else
        {
          v164 += (unint64_t)byte_1813C6343;
          int v165 = "rge=";
        }
      }

      else
      {
        v164 += (unint64_t)byte_1813C6343;
        int v165 = "erge=";
      }
    }

    else
    {
      unint64_t v164 = (unint64_t)&byte_1813C6343[v57];
      int v165 = "merge=";
    }

    LODWORD(v164) = *(unsigned __int8 *)v164;
    goto LABEL_453;
  }

uint64_t sub_18136B42C(uint64_t a1)
{
  *(_DWORD *)(a1 + 100) = 0;
  return sub_18137C5F4(a1);
}

uint64_t sub_18136B434(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 113);
    switch(v3)
    {
      case 186:
        goto LABEL_5;
      case 118:
        uint64_t v5 = *(void *)(v2 + 56);
        goto LABEL_10;
      case 109:
LABEL_5:
        int v4 = "unopened";
        break;
      default:
        int v4 = "invalid";
        break;
    }
  }

  else
  {
    int v4 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v4);
  sub_1812CF36C(186263);
  uint64_t v5 = 0LL;
LABEL_10:
  uint64_t v6 = sub_1813767BC(a1);
  if (!(_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 100) < 5u)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      uint64_t v6 = 0LL;
      int v7 = *(_DWORD *)(a1 + 96);
      if (v7 && v7 != 255)
      {
        int v25 = 0LL;
        uint64_t v8 = sub_1813636A8((uint64_t *)a1, 36, &v25, 0LL);
        if ((_DWORD)v8)
        {
          uint64_t v6 = v8;
          int v9 = 0;
        }

        else
        {
          double v21 = v25;
          int v9 = sqlite3_step(v25) == 100 ? sqlite3_column_int(v21, 0) : 0;
          uint64_t v6 = sqlite3_reset(v21);
        }

        int v22 = *(_DWORD *)(a1 + 100) * v9;
        int v23 = v22 >= 0 ? *(_DWORD *)(a1 + 100) * v9 : v22 + 1;
        int v24 = v22 + (v23 >> 1);
        if (v24 >= 65) {
          uint64_t v6 = sub_181378BE0(a1, v24, *(_DWORD *)(a1 + 96));
        }
      }
    }
  }

  __int16 v10 = *(void **)(a1 + 480);
  if (v10)
  {
    double v11 = (sqlite3_stmt *)v10[3];
    unsigned int v12 = (void *)v10[4];
    uint64_t v13 = v12[3];
    if (v13) {
      xmmword_18C465400(v13);
    }
    sub_1812F20DC(v12, v10);
    uint64_t v14 = v12[3];
    if (v14) {
      xmmword_18C465410(v14);
    }
    sqlite3_finalize(v11);
  }

  *(void *)(a1 + 480) = 0LL;
  uint64_t v15 = *(void *)(a1 + 24);
  if (!v15)
  {
    uint64_t v17 = "NULL";
    goto LABEL_33;
  }

  int v16 = *(unsigned __int8 *)(v15 + 113);
  if (v16 == 186)
  {
LABEL_27:
    uint64_t v17 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v17);
    sub_1812CF36C(186276);
    return v6;
  }

  if (v16 != 118)
  {
    if (v16 != 109)
    {
      uint64_t v17 = "invalid";
      goto LABEL_33;
    }

    goto LABEL_27;
  }

  uint64_t v18 = *(void *)(v15 + 24);
  if (v18)
  {
    xmmword_18C465400(v18);
    uint64_t v19 = *(void *)(v15 + 24);
    *(void *)(v15 + 56) = v5;
    if (v19) {
      xmmword_18C465410(v19);
    }
  }

  else
  {
    *(void *)(v15 + 56) = v5;
  }

  return v6;
}

uint64_t sub_18136B694()
{
  return 0LL;
}

uint64_t sub_18136B69C(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_18136B6B4(int a1, int a2, char *__s1, void *a4)
{
  if (!strcmp(__s1, "snippet"))
  {
    uint64_t v7 = 0LL;
  }

  else if (!strcmp(__s1, "offsets"))
  {
    uint64_t v7 = 1LL;
  }

  else if (!strcmp(__s1, "optimize"))
  {
    uint64_t v7 = 2LL;
  }

  else
  {
    if (strcmp(__s1, "matchinfo")) {
      return 0LL;
    }
    uint64_t v7 = 3LL;
  }

  *a4 = (&off_189B6F140)[2 * v7 + 1];
  return 1LL;
}

uint64_t sub_18136B760(uint64_t a1, uint64_t a2)
{
  int v4 = *(sqlite3 **)(a1 + 24);
  unsigned int v6 = sub_18137C5F4(a1);
  if (v6)
  {
    if (*(void *)(a1 + 80)) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned int v6 = sub_1813767BC(a1);
    if (*(void *)(a1 + 80))
    {
LABEL_3:
      if (!*(_BYTE *)(a1 + 462)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  sub_18136EB1C( (char *)&v6,  v4,  "ALTER TABLE %Q.'%q_content'  RENAME TO '%q_content';",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    a2);
  if (*(_BYTE *)(a1 + 462)) {
LABEL_4:
  }
    sub_18136EB1C( (char *)&v6,  v4,  "ALTER TABLE %Q.'%q_docsize'  RENAME TO '%q_docsize';",
      *(void *)(a1 + 32),
      *(void *)(a1 + 40),
      a2);
LABEL_5:
  if (*(_BYTE *)(a1 + 461)) {
    sub_18136EB1C( (char *)&v6,  v4,  "ALTER TABLE %Q.'%q_stat'  RENAME TO '%q_stat';",
  }
      *(void *)(a1 + 32),
      *(void *)(a1 + 40),
      a2);
  sub_18136EB1C( (char *)&v6,  v4,  "ALTER TABLE %Q.'%q_segments' RENAME TO '%q_segments';",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    a2);
  sub_18136EB1C( (char *)&v6,  v4,  "ALTER TABLE %Q.'%q_segdir'   RENAME TO '%q_segdir';",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    a2);
  return v6;
}

uint64_t sub_18136B87C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 464)) {
    return 0LL;
  }
  else {
    return sub_18136B434(a1);
  }
}

uint64_t sub_18136B890()
{
  return 0LL;
}

uint64_t sub_18136B898(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_18136B8B0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = "content";
    for (int i = (_BYTE *)result; ; ++i)
    {
      uint64_t v3 = *i;
      uint64_t v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v3] != byte_1813C6343[v4])
      {
        uint64_t v5 = "docsize";
        for (uint64_t j = (_BYTE *)result; ; ++j)
        {
          uint64_t v7 = *j;
          uint64_t v8 = *(unsigned __int8 *)v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j) {
              return 1LL;
            }
          }

          else if (byte_1813C6343[v7] != byte_1813C6343[v8])
          {
            int v9 = "segdir";
            for (uint64_t k = (_BYTE *)result; ; ++k)
            {
              uint64_t v11 = *k;
              uint64_t v12 = *(unsigned __int8 *)v9;
              if ((_DWORD)v11 == (_DWORD)v12)
              {
                if (!*k) {
                  return 1LL;
                }
              }

              else if (byte_1813C6343[v11] != byte_1813C6343[v12])
              {
                uint64_t v13 = "segments";
                for (uint64_t m = (_BYTE *)result; ; ++m)
                {
                  uint64_t v15 = *m;
                  uint64_t v16 = *(unsigned __int8 *)v13;
                  if ((_DWORD)v15 == (_DWORD)v16)
                  {
                    if (!*m) {
                      return 1LL;
                    }
                  }

                  else if (byte_1813C6343[v15] != byte_1813C6343[v16])
                  {
                    for (n = "stat"; ; ++n)
                    {
                      uint64_t v18 = *(unsigned __int8 *)result;
                      uint64_t v19 = *(unsigned __int8 *)n;
                      if ((_DWORD)v18 == (_DWORD)v19)
                      {
                        if (!*(_BYTE *)result) {
                          return 1LL;
                        }
                      }

                      else if (byte_1813C6343[v18] != byte_1813C6343[v19])
                      {
                        return 0LL;
                      }

                      ++result;
                    }
                  }

                  ++v13;
                }
              }

              ++v9;
            }
          }

          ++v5;
        }
      }

      ++v1;
    }
  }

  return result;
}

uint64_t sub_18136BA10(int a1, sqlite3 *a2, size_t a3, int a4, const char **a5, uint64_t *a6, char **a7)
{
  unsigned int v231 = 0;
  uint64_t v13 = a5[1];
  int v14 = *((unsigned __int8 *)*a5 + 3);
  v230 = 0LL;
  int v15 = strlen(v13);
  int v16 = strlen(a5[2]);
  uint64_t v17 = 0LL;
  if (sqlite3_initialize()) {
    goto LABEL_2;
  }
  int v226 = a5;
  size_t __n = a3;
  int v227 = v16;
  __int128 v218 = a2;
  int v221 = v14;
  uint64_t v23 = 8LL * (a4 - 2);
  int v24 = (void *)sub_18126F0AC(v23);
  uint64_t v17 = v24;
  if (!v24 || (bzero(v24, v23), sqlite3_initialize()) || (int v25 = (const char **)sub_18126F0AC(v23)) == 0LL)
  {
LABEL_2:
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    unsigned int v231 = 7;
    if (!v17) {
      goto LABEL_9;
    }
LABEL_3:
    __int16 v20 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
      --qword_18C468B10;
      off_18C4653A8(v17);
      uint64_t v17 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_9;
      }
      __int16 v20 = &xmmword_18C465410;
    }

    (*v20)(v17);
    goto LABEL_9;
  }

  uint64_t v19 = v25;
  __int128 v217 = a7;
  int v206 = a1;
  int v222 = v17;
  bzero(v25, v23);
  if (a4 < 4)
  {
    uint64_t v207 = 0LL;
    __int128 v215 = 0LL;
    int v216 = 0;
    int v67 = 0LL;
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    unsigned int v70 = 0LL;
    int v30 = v227;
LABEL_222:
    uint64_t v71 = __n;
    goto LABEL_223;
  }

  uint64_t v207 = 0LL;
  unsigned int v208 = 0LL;
  __int128 v215 = 0LL;
  int v216 = 0;
  unint64_t v211 = 0LL;
  unint64_t v213 = 0LL;
  int v209 = 0LL;
  int v26 = 0;
  LODWORD(v27) = 0;
  unint64_t __src = a4;
  unint64_t v28 = 3LL;
  int v29 = v221;
  int v30 = v16;
  while (2)
  {
    __int16 v32 = v226[v28];
    if (v230) {
      goto LABEL_70;
    }
    if (strlen(v226[v28]) < 9 || v32 == 0LL) {
      goto LABEL_70;
    }
    unint64_t v34 = *(unsigned __int8 *)v32;
    if (!*v32)
    {
      uint64_t v35 = "tokenize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x54)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "tokenize";
LABEL_66:
      LODWORD(v34) = *(unsigned __int8 *)v34;
      goto LABEL_67;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 1);
    if (!v32[1])
    {
      uint64_t v35 = "okenize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x4F)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "okenize";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 2);
    if (!v32[2])
    {
      uint64_t v35 = "kenize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x4B)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "kenize";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 3);
    if (!v32[3])
    {
      uint64_t v35 = "enize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x45)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "enize";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 4);
    if (!v32[4])
    {
      uint64_t v35 = "nize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x4E)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "nize";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 5);
    if (!v32[5])
    {
      uint64_t v35 = "ize";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x49)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "ize";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 6);
    if (!v32[6])
    {
      uint64_t v35 = "ze";
      goto LABEL_67;
    }

    if ((v34 & 0xFFFFFFDF) != 0x5A)
    {
      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "ze";
      goto LABEL_66;
    }

    unint64_t v34 = *((unsigned __int8 *)v32 + 7);
    if (v32[7])
    {
      int v29 = v221;
      int v30 = v227;
      if ((v34 & 0xFFFFFFDF) == 0x45)
      {
LABEL_68:
        if ((v32[8] & 0x80000000) == 0 && !byte_1813CB46E[*((unsigned __int8 *)v32 + 8)])
        {
          unsigned int v231 = sub_18136DCD8(__n, v32 + 9, &v230, a7);
          goto LABEL_26;
        }

        goto LABEL_70;
      }

      v34 += (unint64_t)byte_1813C6343;
      uint64_t v35 = "e";
      goto LABEL_66;
    }

    uint64_t v35 = "e";
    int v29 = v221;
    int v30 = v227;
LABEL_67:
LABEL_70:
    if (v29 != 52 || (uint64_t v36 = 0LL, v37 = 1, v38 = *(unsigned __int8 *)v32, !*v32))
    {
LABEL_24:
      LODWORD(v27) = v27 + strlen(v32) + 1;
      v222[v26++] = v32;
LABEL_25:
      int v30 = v227;
      goto LABEL_26;
    }

    while (v38 != 61)
    {
      ++v36;
      ++v37;
      int v38 = v32[v36];
      if (!v32[v36]) {
        goto LABEL_24;
      }
    }

    uint64_t v39 = sqlite3_mprintf("%s", &v32[v36 + 1]);
    if (!v39)
    {
      unsigned int v231 = 7;
      int v29 = v221;
      goto LABEL_25;
    }

    uint64_t v40 = v39;
    int v41 = *v39;
    if ((v41 - 34) <= 0x3E && ((1LL << (v41 - 34)) & 0x4200000000000021LL) != 0)
    {
      if (v41 == 91) {
        int v41 = 93;
      }
      int v43 = v39[1];
      if (v39[1])
      {
        uint64_t v44 = 0LL;
        int v45 = 1;
        while (1)
        {
          if (v43 == v41)
          {
            if (v39[v45 + 1] != v41)
            {
LABEL_90:
              uint64_t v46 = v44;
              goto LABEL_92;
            }

            v39[v44] = v41;
            v45 += 2;
          }

          else
          {
            v39[v44] = v43;
            ++v45;
          }

          ++v44;
          int v43 = v39[v45];
          if (!v39[v45]) {
            goto LABEL_90;
          }
        }
      }

      uint64_t v46 = 0LL;
LABEL_92:
      v39[v46] = 0;
    }

    uint64_t v47 = 0LL;
    while (1)
    {
      if (LODWORD((&off_189B6F080)[2 * v47 + 1]) == (_DWORD)v36)
      {
        int v49 = (&off_189B6F080)[2 * v47];
        if (!v32)
        {
          if (v49) {
            int v48 = -1;
          }
          else {
            int v48 = 0;
          }
          if (!v48) {
            break;
          }
          goto LABEL_98;
        }

        if (v49)
        {
          int v50 = v37;
          uint64_t v51 = v32;
          while (1)
          {
            uint64_t v52 = *(unsigned __int8 *)v51;
            if (!*v51) {
              break;
            }
            LODWORD(v52) = byte_1813C6343[v52];
            int v53 = byte_1813C6343[*v49];
            if ((_DWORD)v52 != v53) {
              goto LABEL_108;
            }
            ++v51;
            ++v49;
          }

          int v53 = byte_1813C6343[*v49];
LABEL_108:
          if ((_DWORD)v52 == v53) {
            break;
          }
        }
      }

LABEL_205:
          HIDWORD(v207) = 1;
          goto LABEL_121;
        }

        __int16 v55 = "3";
LABEL_204:
LABEL_206:
        sub_181362330(a7, "unrecognized matchinfo: %s", v40);
        HIDWORD(v207) = 1;
        unsigned int v231 = 1;
LABEL_121:
        unsigned int v56 = (void (**)(unsigned __int8 *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v40);
          --qword_18C468B10;
          off_18C4653A8(v40);
          uint64_t v40 = (char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            unsigned int v56 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
            goto LABEL_126;
          }

          int v29 = v221;
        }

        else
        {
LABEL_126:
          (*v56)((unsigned __int8 *)v40);
          int v29 = v221;
        }

LABEL_278:
          int v79 = 0LL;
          uint64_t v18 = 0LL;
LABEL_361:
          int v67 = v208;
          goto LABEL_362;
        }

        int v89 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v222);
          --qword_18C468B10;
          off_18C4653A8(v222);
          int v222 = (void *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v89 = &xmmword_18C465410;
            goto LABEL_284;
          }
        }

        else
        {
LABEL_284:
          (*v89)(v222);
        }

        uint64_t v90 = v226[1];
        v232[0] = 0LL;
        uint64_t v91 = (unsigned __int8 *)sqlite3_mprintf("SELECT * FROM %Q.%Q", v90, v215);
        if (!v91)
        {
          int v94 = 7;
          goto LABEL_360;
        }

        int v93 = v91;
        int v94 = sub_18126DFE0((uint64_t)v218, v91, 0xFFFFFFFFLL, 0LL, 0LL, v232, 0LL, v92);
        if (v94)
        {
          uint64_t v95 = sqlite3_errmsg(v218);
          sub_181362330(a7, "%s", v95);
        }

        uint64_t v96 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v93);
          --qword_18C468B10;
          off_18C4653A8(v93);
          int v93 = (unsigned __int8 *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v96 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
            goto LABEL_293;
          }
        }

        else
        {
LABEL_293:
          (*v96)(v93);
        }

        if (v94)
        {
LABEL_360:
          int v222 = 0LL;
          int v79 = 0LL;
          unsigned int v70 = 0LL;
          uint64_t v18 = 0LL;
          unsigned int v231 = v94;
          uint64_t v69 = 0LL;
          uint64_t v68 = v209;
          goto LABEL_361;
        }

        int v97 = (unsigned __int16 *)v232[0];
        if (!v232[0])
        {
          int v26 = 0;
LABEL_472:
          uint64_t v27 = 0LL;
          char v169 = 1;
          goto LABEL_473;
        }

        uint64_t v98 = *(void *)(*(void *)v232[0] + 24LL);
        if (v98)
        {
          xmmword_18C465400(v98);
          uint64_t v99 = *(void *)(*(void *)v97 + 24LL);
          int v26 = v97[130];
          if (v99) {
            xmmword_18C465410(v99);
          }
        }

        else
        {
          int v26 = *((unsigned __int16 *)v232[0] + 130);
        }

        if (!v26) {
          goto LABEL_472;
        }
        uint64_t v27 = 0LL;
        for (unsigned int i = 0; i != v26; ++i)
        {
          unsigned int v168 = sub_1812D8E78((uint64_t *)v232[0], i, 0, 0);
          v27 += strlen(v168) + 1;
        }

        char v169 = 0;
LABEL_473:
        int v170 = 7;
        if (sqlite3_initialize())
        {
          int v222 = 0LL;
        }

        else
        {
          int __srcb = v15;
          uint64_t v171 = sub_18126F0AC(v27 + 8LL * v26);
          if (v171) {
            char v172 = v169;
          }
          else {
            char v172 = 1;
          }
          if (v171) {
            int v170 = 0;
          }
          else {
            int v170 = 7;
          }
          int v222 = (void *)v171;
          if ((v172 & 1) == 0)
          {
            uint64_t v173 = v171;
            uint64_t v174 = 0LL;
            uint64_t v175 = (char *)(v171 + 8LL * v26);
            do
            {
              uint64_t v176 = sub_1812D8E78((uint64_t *)v232[0], v174, 0, 0);
              size_t v177 = (int)(strlen(v176) + 1);
              memcpy(v175, v176, v177);
              *(void *)(v173 + 8 * v174) = v175;
              v175 += v177;
              ++v174;
            }

            while (v26 != v174);
            int v170 = 0;
          }

          int v15 = __srcb;
          int v30 = v227;
        }

        sqlite3_finalize((sqlite3_stmt *)v232[0]);
        uint64_t v69 = 0LL;
        unsigned int v231 = v170;
        if (v170 || !v208)
        {
          unsigned int v70 = 0LL;
          uint64_t v68 = v209;
          if (!v170) {
            goto LABEL_507;
          }
          goto LABEL_278;
        }

        if (!v26)
        {
          uint64_t v69 = 0LL;
          unsigned int v70 = 0LL;
          int v67 = v208;
          uint64_t v68 = v209;
          goto LABEL_222;
        }

        uint64_t v178 = 0LL;
        uint64_t v179 = v222 + 2;
        uint64_t v180 = v26;
        uint64_t v71 = __n;
        while (1)
        {
          signed __int8 v181 = (unsigned __int8 *)v222[v178];
          if (v181) {
            break;
          }
LABEL_490:
          ++v178;
          --v180;
          uint64_t v179 = (_OWORD *)((char *)v179 + 8);
          if (v178 == v26)
          {
            unsigned int v70 = 0LL;
            uint64_t v69 = 0LL;
            int v67 = v208;
            uint64_t v68 = v209;
            goto LABEL_224;
          }
        }

        int v182 = v208;
        while (2)
        {
          uint64_t v183 = *v182;
          uint64_t v184 = *v181;
          if ((_DWORD)v183 != (_DWORD)v184)
          {
            if (byte_1813C6343[v183] != byte_1813C6343[v184]) {
              goto LABEL_490;
            }
            goto LABEL_494;
          }

          if (*v182)
          {
LABEL_494:
            ++v182;
            ++v181;
            continue;
          }

          break;
        }

        int v67 = v208;
        uint64_t v68 = v209;
        if (v26 > v178)
        {
          unint64_t v185 = v26 - v178;
          if (v185 < 4) {
            goto LABEL_502;
          }
          v178 += v185 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v186 = v180 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            __int128 v187 = *(_OWORD *)((char *)v179 + 8);
            *(v179 - 1) = *(_OWORD *)((char *)v179 - 8);
            *uint64_t v179 = v187;
            v179 += 2;
            v186 -= 4LL;
          }

          while (v186);
          if (v185 != (v185 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_502:
            uint64_t v188 = &v222[v178 + 1];
            uint64_t v189 = v26 - v178;
            do
            {
              *(v188 - 1) = *v188;
              ++v188;
              --v189;
            }

            while (v189);
          }
        }

        unsigned int v70 = 0LL;
        uint64_t v69 = 0LL;
        if (!--v26)
        {
LABEL_223:
          *int v222 = "content";
          int v26 = 1;
          LODWORD(v27) = 8;
        }

        uint64_t v163 = (v8 - 4);
        int v164 = &v13[v163];
        if (*(_DWORD *)&v13[v163] == 1919906913 && sub_1813AA198(v13, v163))
        {
          v164[2] = 101;
          *(_WORD *)int v164 = 29793;
          uint64_t v8 = (int)v8 - 1LL;
        }

        goto LABEL_439;
      }

      uint64_t v115 = (v8 - 7);
      uint64_t v27 = &v13[v115];
      if (*(_DWORD *)&v13[v115] != 1952545385 || *(_DWORD *)&v13[v115 + 3] != 1852795252) {
        goto LABEL_244;
      }
      uint64_t v117 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v117 <= 0xA && (int v118 = 1, ((1 << v117) & 0x495) != 0))
      {
        int v119 = 0;
      }

      else
      {
        int v119 = 1;
        if ((_DWORD)v8 == 8)
        {
          int v118 = 0;
        }

        else
        {
          v394 = 1LL;
          while (1)
          {
            v395 = v13[v394];
            v396 = (((v395 - 97) >> 1) | (((_BYTE)v395 - 97) << 7));
            uint64_t v23 = v396 > 0xA;
            v397 = (1 << v396) & 0x495;
            v398 = v23 || v397 == 0;
            if (!v398 || v395 == 121) {
              break;
            }
            if (v115 == ++v394)
            {
              int v118 = 0;
              int v119 = v8 - 7;
              goto LABEL_183;
            }
          }

          int v118 = 1;
          int v119 = v394;
        }
      }

LABEL_224:
        if (!v230)
        {
          unsigned int v231 = sub_18136DCD8(v71, "simple", &v230, v217);
          if (v231)
          {
            int v79 = 0LL;
            uint64_t v18 = 0LL;
            goto LABEL_362;
          }
        }

        unint64_t v212 = v70;
        uint64_t v214 = v69;
        if (v68)
        {
          int v72 = *(unsigned __int8 *)v68;
          if (*v68)
          {
            double v73 = (unsigned __int8 *)(v68 + 1);
            int v74 = 2;
            while (1)
            {
              if (v72 == 44)
              {
                ++v74;
              }

              else if (!v72)
              {
                goto LABEL_253;
              }

              int v75 = *v73++;
              int v72 = v75;
            }
          }
        }

        int v74 = 1;
LABEL_253:
        if (sqlite3_initialize() || (unsigned int v80 = (_DWORD *)sub_18126F0AC(40LL * v74)) == 0LL)
        {
          int v74 = 0;
          __srca = 0LL;
          int v78 = 7;
          goto LABEL_255;
        }

        __srca = v80;
        bzero(v80, 40LL * v74);
        int v78 = 0;
        if (!v68 || v74 < 2)
        {
LABEL_255:
          unsigned int v231 = v78;
          if (!v78) {
            goto LABEL_300;
          }
LABEL_256:
          uint64_t v18 = 0LL;
          uint64_t v69 = v214;
          int v79 = __srca;
          goto LABEL_362;
        }

        int v81 = 1;
        uint64_t v82 = v68;
        while (1)
        {
          int v83 = *(unsigned __int8 *)v82;
          uint64_t v84 = 0LL;
          uint64_t v85 = 0LL;
          unint64_t v86 = 0LL;
          do
          {
            unint64_t v86 = (v83 - 48) + 10 * v86;
            if (v86 >> 31)
            {
              int v88 = (unsigned __int8 *)(v82 - 1);
              goto LABEL_275;
            }

            int v87 = v85 + 1;
            int v83 = v82[v85 + 1];
            v84 += 0x100000000LL;
            ++v85;
          }

          while ((v83 - 48) < 0xA);
          if (!v87) {
            break;
          }
          int v88 = (unsigned __int8 *)&v82[v84 >> 32];
          if ((_DWORD)v86)
          {
            __srca[10 * v81] = v86;
          }

          else
          {
LABEL_275:
            --v74;
            --v81;
          }

          uint64_t v82 = (const char *)(v88 + 1);
          if (++v81 >= v74)
          {
            int v78 = 0;
            goto LABEL_255;
          }
        }

        unsigned int v231 = 1;
        sub_181362330(v217, "error parsing prefix parameter: %s", v68);
        int v74 = 0;
        if (v231) {
          goto LABEL_256;
        }
LABEL_300:
        int v210 = v68;
        if (sqlite3_initialize()
          || (uint64_t v100 = v30 + 1,
              size_t v101 = v15 + 1,
              uint64_t v102 = v101 + v100 + (int)v27 + v26 + 8LL * v26 + 40LL * v74 + 528,
              (uint64_t v103 = (void *)sub_18126F0AC(v102)) == 0LL))
        {
          uint64_t v18 = 0LL;
          unsigned int v231 = 7;
          uint64_t v68 = v210;
          unsigned int v70 = v212;
          uint64_t v69 = v214;
          int v79 = __srca;
          goto LABEL_362;
        }

        uint64_t v18 = (uint64_t)v103;
        size_t __na = v100;
        BOOL v104 = v221 == 52;
        bzero(v103, v102);
        *(void *)(v18 + 24) = v218;
        *(_DWORD *)(v18 + 48) = v26;
        *(void *)(v18 + 56) = v18 + 528;
        uint64_t v105 = v230;
        *(void *)(v18 + 504) = 0x100000LL;
        if (HIDWORD(v207)) {
          BOOL v106 = 0;
        }
        else {
          BOOL v106 = v221 == 52;
        }
        *(_BYTE *)(v18 + 462) = v106;
        *(_BYTE *)(v18 + 461) = v104;
        *(_BYTE *)(v18 + 460) = v104;
        *(_BYTE *)(v18 + 463) = v207;
        *(_DWORD *)(v18 + 96) = 255;
        *(void *)(v18 + 72) = v105;
        *(void *)(v18 + 80) = v215;
        *(void *)(v18 + 88) = v67;
        int v107 = (void *)(v18 + 528 + 8LL * v26);
        *(void *)(v18 + 496) = v107;
        memcpy(v107, __srca, 40LL * v74);
        *(_DWORD *)(v18 + 488) = v74;
        if (v74 >= 1)
        {
          uint64_t v108 = 0LL;
          do
          {
            uint64_t v109 = *(void *)(v18 + 496) + v108;
            *(_WORD *)(v109 + 8) = 257;
            *(void *)(v109 + 32) = 0LL;
            *(void *)(v109 + 20) = 0LL;
            *(void *)(v109 + 12) = 0LL;
            v108 += 40LL;
          }

          while (40LL * v74 != v108);
        }

        uint64_t v110 = *(void *)(v18 + 496) + 40LL * v74;
        *(void *)(v18 + 64) = v110;
        int v111 = (char *)(v110 + v26);
        *(void *)(v18 + 40) = v111;
        memcpy(v111, v226[2], __na);
        uint64_t v112 = &v111[__na];
        *(void *)(v18 + 32) = v112;
        memcpy(v112, v226[1], v101);
        LODWORD(v113) = v216;
        if (v26 >= 1)
        {
          uint64_t v114 = 0LL;
          uint64_t v115 = (unsigned __int8 *)&v112[v101];
          do
          {
            uint64_t v117 = (unsigned __int8 *)v222[v114];
            int v118 = v117 + 1;
            for (uint64_t j = v117; ; ++j)
            {
              int v120 = (char)*j;
              uint64_t v121 = *j;
              if (v120 <= 38)
              {
                if (!*j) {
                  goto LABEL_345;
                }
                if (v120 == 34)
                {
LABEL_333:
                  int v118 = j + 1;
                  unsigned __int8 v125 = j[1];
                  if (v125)
                  {
                    uint64_t v126 = j;
                    do
                    {
                      if ((_DWORD)v121 == v125)
                      {
                        int v118 = v126 + 2;
                      }

                      uint64_t v126 = v118;
                      int v127 = *++v118;
                      unsigned __int8 v125 = v127;
                    }

                    while (v127);
                  }

                  goto LABEL_342;
                }
              }

              else
              {
                if (v120 == 39 || v120 == 96) {
                  goto LABEL_333;
                }
                if (v120 == 91)
                {
                  do
                  {
                    int v123 = *v118++;
                    int v122 = v123;
                  }

                  while (v123 != 93 && v122 != 0);
                  if (!v122) {
                    LODWORD(v118) = (_DWORD)v118 - 1;
                  }
                  goto LABEL_342;
                }
              }

              if ((v121 & 0x80) != 0 || byte_1813CB46E[v121]) {
                break;
              }
              LODWORD(v117) = (_DWORD)v117 + 1;
              ++v118;
            }

            int v118 = j;
            do
            {
              do
              {
                int v129 = (char)*++v118;
                unsigned __int8 v128 = v129;
              }

              while (v129 < 0);
            }

            while (byte_1813CB46E[v128]);
LABEL_342:
            int v130 = (_DWORD)v118 - (_DWORD)v117;
            int v120 = v130;
LABEL_345:
            uint64_t v131 = v120;
            v115[v120] = 0;
            int v132 = *v115;
            if ((v132 - 34) <= 0x3E
              && ((1LL << (v132 - 34)) & 0x4200000000000021LL) != 0)
            {
              if (v132 == 91) {
                int v132 = 93;
              }
              int v134 = v115[1];
              if (v115[1])
              {
                uint64_t v135 = 0LL;
                int v136 = 1;
                while (1)
                {
                  if (v134 == v132)
                  {
                    if (v115[v136 + 1] != v132)
                    {
LABEL_311:
                      uint64_t v116 = v135;
                      goto LABEL_312;
                    }

                    v115[v135] = v132;
                    v136 += 2;
                  }

                  else
                  {
                    v115[v135] = v134;
                    ++v136;
                  }

                  ++v135;
                  int v134 = v115[v136];
                  if (!v115[v136]) {
                    goto LABEL_311;
                  }
                }
              }

              uint64_t v116 = 0LL;
LABEL_312:
              v115[v116] = 0;
            }

            *(void *)(*(void *)(v18 + 56) + 8 * v114) = v115;
            v115 += v131 + 1;
            ++v114;
          }

          while (v114 != v26);
          uint64_t v147 = 0LL;
          LODWORD(v113) = v216;
          while (1)
          {
            int v148 = strlen(*(const char **)(*(void *)(v18 + 56) + 8 * v147));
LABEL_417:
            ++v147;
            LODWORD(v113) = v216;
            if (v147 == v26) {
              goto LABEL_442;
            }
          }

          int v149 = v148;
          uint64_t v150 = 0LL;
          int v228 = v148 + 1;
          while (2)
          {
            uint64_t v151 = v19[v150];
            if (v151 && v149 == strlen(v19[v150]))
            {
              if (v149 < 0)
              {
                sub_1812CF36C(35844);
                goto LABEL_434;
              }

              uint64_t v152 = *(_BYTE **)(*(void *)(v18 + 56) + 8 * v147);
              if (v152)
              {
                if (!v149) {
                  goto LABEL_434;
                }
                int v153 = v228;
                uint64_t v154 = v19[v150];
                while (1)
                {
                  uint64_t v155 = *v152;
                  if (!*v152) {
                    break;
                  }
                  LODWORD(v155) = byte_1813C6343[v155];
                  int v156 = byte_1813C6343[*(unsigned __int8 *)v154];
                  if ((_DWORD)v155 != v156) {
                    goto LABEL_440;
                  }
                  ++v152;
                  ++v154;
                }

                int v156 = byte_1813C6343[*(unsigned __int8 *)v154];
LABEL_440:
                if ((_DWORD)v155 == v156)
                {
LABEL_434:
                  *(_BYTE *)(*(void *)(v18 + 64) + v147) = 1;
                  sqlite3_int64 v157 = (uint64_t (**)(const char *))&off_18C4653A8;
                  if (!dword_18C465380) {
                    goto LABEL_420;
                  }
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v151);
                  --qword_18C468B10;
                  off_18C4653A8(v151);
                  uint64_t v151 = (const char *)xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    sqlite3_int64 v157 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_420:
                    (*v157)(v151);
                  }

                  v19[v150] = 0LL;
                }
              }
            }

            if (++v150 == v216) {
              goto LABEL_417;
            }
            continue;
          }
        }

LABEL_442:
        if ((int)v113 <= 0)
        {
          unsigned int v231 = 0;
          uint64_t v68 = v210;
          uint64_t v161 = v212;
          int v160 = v214;
          goto LABEL_451;
        }

        int v158 = 0;
        uint64_t v113 = v113;
        uint64_t v159 = v19;
        uint64_t v68 = v210;
        do
        {
          if (*v159)
          {
            sub_181362330(v217, "no such column: %s", *v159);
            int v158 = 1;
          }

          ++v159;
          --v113;
        }

        while (v113);
        unsigned int v231 = v158;
        uint64_t v161 = v212;
        int v160 = v214;
        if (!v158)
        {
LABEL_451:
          if ((v160 == 0LL) == (v161 != 0LL))
          {
            uint64_t v162 = "uncompress";
            if (!v160) {
              uint64_t v162 = "compress";
            }
            unsigned int v231 = 1;
            sub_181362330(v217, "missing %s parameter in fts4 constructor", v162);
          }
        }

        v232[0] = 0LL;
        if (*(void *)(v18 + 80))
        {
          sub_18136E980((char *)&v231, v232, "rowid");
          if (*(int *)(v18 + 48) >= 1)
          {
            uint64_t v163 = 0LL;
            do
              sub_18136E980((char *)&v231, v232, ", x.'%q'", *(void *)(*(void *)(v18 + 56) + 8 * v163++));
            while (v163 < *(int *)(v18 + 48));
          }

          if (*(void *)(v18 + 88)) {
            sub_18136E980((char *)&v231, v232, ", x.%Q", *(void *)(v18 + 88));
          }
          goto LABEL_530;
        }

        if (!v161)
        {
          int v165 = 0LL;
          signed __int8 v166 = &byte_1813CEAEE;
          goto LABEL_518;
        }

        int v164 = strlen(v161);
        if (sqlite3_initialize())
        {
          int v165 = 0LL;
LABEL_464:
          signed __int8 v166 = 0LL;
          goto LABEL_518;
        }

        uint64_t v190 = (_BYTE *)sub_18126F0AC(2 * v164 + 3);
        int v165 = v190;
        if (!v190) {
          goto LABEL_464;
        }
        *uint64_t v190 = 34;
        uint64_t v191 = v190;
        while (2)
        {
          int v192 = *(unsigned __int8 *)v161;
          if (v192 == 34)
          {
            v191[1] = 34;
            v191 += 2;
            LOBYTE(v192) = *v161;
LABEL_513:
            *uint64_t v191 = v192;
            ++v161;
            continue;
          }

          break;
        }

        if (*v161)
        {
          ++v191;
          goto LABEL_513;
        }

        *(_WORD *)(v191 + 1) = 34;
        signed __int8 v166 = v190;
LABEL_518:
        sub_18136E980((char *)&v231, v232, "docid");
        if (*(int *)(v18 + 48) >= 1)
        {
          uint64_t v193 = 0LL;
          do
          {
            sub_18136E980( (char *)&v231,  v232,  ",%s(x.'c%d%q')",  v166,  v193,  *(void *)(*(void *)(v18 + 56) + 8 * v193));
            ++v193;
          }

          while (v193 < *(int *)(v18 + 48));
        }

        if (*(void *)(v18 + 88)) {
          sub_18136E980((char *)&v231, v232, ", x.%Q", "langid");
        }
        if (v165)
        {
          int v194 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_529;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v165);
          --qword_18C468B10;
          off_18C4653A8(v165);
          int v165 = (_BYTE *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v194 = &xmmword_18C465410;
LABEL_529:
            (*v194)(v165);
          }
        }

LABEL_530:
        uint64_t v195 = *(void *)(v18 + 80);
        if (v195)
        {
          uint64_t v196 = &byte_1813CEAEE;
        }

        else
        {
          uint64_t v195 = *(void *)(v18 + 40);
          uint64_t v196 = "_content";
        }

        sub_18136E980((char *)&v231, v232, " FROM '%q'.'%q%s' AS x", *(void *)(v18 + 32), v195, v196);
        *(const char **)(v18 + 440) = v232[0];
        v232[0] = 0LL;
        if (!v214)
        {
          uint64_t v198 = 0LL;
          uint64_t v199 = &byte_1813CEAEE;
          int v79 = __srca;
          goto LABEL_546;
        }

        int v197 = strlen(v214);
        if (sqlite3_initialize())
        {
          uint64_t v198 = 0LL;
LABEL_536:
          uint64_t v199 = 0LL;
          int v79 = __srca;
          goto LABEL_546;
        }

        uint64_t v200 = (_BYTE *)sub_18126F0AC(2 * v197 + 3);
        uint64_t v198 = v200;
        if (!v200) {
          goto LABEL_536;
        }
        _BYTE *v200 = 34;
        uint64_t v201 = v214;
        uint64_t v202 = v200;
        int v79 = __srca;
        while (2)
        {
          int v203 = *(unsigned __int8 *)v201;
          if (v203 == 34)
          {
            v202[1] = 34;
            v202 += 2;
            LOBYTE(v203) = *v201;
LABEL_541:
            *uint64_t v202 = v203;
            ++v201;
            continue;
          }

          break;
        }

        if (*v201)
        {
          ++v202;
          goto LABEL_541;
        }

        *(_WORD *)(v202 + 1) = 34;
        uint64_t v199 = v200;
LABEL_546:
        sub_18136E980((char *)&v231, v232, "?");
        if (*(int *)(v18 + 48) >= 1)
        {
          int v204 = 0;
          do
          {
            sub_18136E980((char *)&v231, v232, ",%s(?)", v199);
            ++v204;
          }

          while (v204 < *(_DWORD *)(v18 + 48));
        }

        if (*(void *)(v18 + 88)) {
          sub_18136E980((char *)&v231, v232, ", ?");
        }
        if (v198)
        {
          uint64_t v205 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_557;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v198);
          --qword_18C468B10;
          off_18C4653A8(v198);
          uint64_t v198 = (_BYTE *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v205 = &xmmword_18C465410;
LABEL_557:
            (*v205)(v198);
          }
        }

        *(const char **)(v18 + 448) = v232[0];
        if (v231)
        {
          __int128 v215 = 0LL;
          int v67 = 0LL;
          unsigned int v70 = v212;
          uint64_t v69 = v214;
        }

        else
        {
          unsigned int v70 = v212;
          uint64_t v69 = v214;
          if (v206)
          {
            unsigned int v231 = sub_18136E400(v18);
          }

          else if (v221 != 52)
          {
            *(_BYTE *)(v18 + 461) = 2;
          }

          sub_18136E618((unsigned __int8 *)&v231, v18);
          *(_DWORD *)(v18 + 456) = *(_DWORD *)(v18 + 468) - 35;
          sub_18136E764((char *)&v231, v18);
          __int128 v215 = 0LL;
          int v67 = 0LL;
        }

LABEL_362:
        if (v68)
        {
          int v137 = (void (**)(const char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_368;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v68);
          --qword_18C468B10;
          off_18C4653A8(v68);
          uint64_t v68 = (const char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v137 = (void (**)(const char *))&xmmword_18C465410;
LABEL_368:
            (*v137)(v68);
          }
        }

        unsigned int v138 = v215;
        if (v79)
        {
          unsigned int v139 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_375;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v79);
          --qword_18C468B10;
          off_18C4653A8(v79);
          int v79 = (_DWORD *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            unsigned int v139 = &xmmword_18C465410;
LABEL_375:
            (*v139)(v79);
          }
        }

        if (v69)
        {
          uint64_t v140 = (uint64_t (**)(const char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_382;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v69);
          --qword_18C468B10;
          off_18C4653A8(v69);
          uint64_t v69 = (const char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v140 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_382:
            (*v140)(v69);
          }
        }

        if (v70)
        {
          signed __int8 v141 = (uint64_t (**)(const char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_389;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v70);
          --qword_18C468B10;
          off_18C4653A8(v70);
          unsigned int v70 = (const char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            signed __int8 v141 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_389:
            (*v141)(v70);
          }
        }

        if (v215)
        {
          int v142 = (uint64_t (**)(char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_396;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v215);
          --qword_18C468B10;
          off_18C4653A8(v215);
          unsigned int v138 = (char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v142 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_396:
            (*v142)(v138);
          }
        }

        if (v67)
        {
          uint64_t v143 = (uint64_t (**)(char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_403;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v67);
          --qword_18C468B10;
          off_18C4653A8(v67);
          int v67 = (char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v143 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_403:
            (*v143)(v67);
          }
        }

        if (v216 >= 1)
        {
          for (uint64_t k = 0LL; v216 != k; ++k)
          {
            uint64_t v145 = v19[k];
            if (v145)
            {
              int v146 = (uint64_t (**)(const char *))&off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v145);
                --qword_18C468B10;
                off_18C4653A8(v145);
                uint64_t v145 = (const char *)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  continue;
                }
                int v146 = (uint64_t (**)(const char *))&xmmword_18C465410;
              }

              (*v146)(v145);
            }
          }
        }

        uint64_t v17 = v222;
        if (v222) {
          goto LABEL_3;
        }
LABEL_9:
        if (v19)
        {
          double v21 = (uint64_t (**)(const char **))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_15;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
          --qword_18C468B10;
          off_18C4653A8(v19);
          uint64_t v19 = (const char **)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            double v21 = (uint64_t (**)(const char **))&xmmword_18C465410;
LABEL_15:
            (*v21)(v19);
          }
        }

        uint64_t v22 = v231;
        if (v231)
        {
          if (v18)
          {
            sub_181368664(v18);
            return v231;
          }

          else if (v230)
          {
            (*((void (**)(const char **))*v230 + 2))(v230);
          }
        }

        else
        {
          *a6 = v18;
        }

        return v22;
      case 1:
        int v30 = v227;
        if (!v209) {
          goto LABEL_136;
        }
        uint64_t v57 = (uint64_t (**)(const char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_135;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v209);
        --qword_18C468B10;
        off_18C4653A8(v209);
        int v209 = (const char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v57 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_135:
          (*v57)(v209);
LABEL_136:
          int v209 = v40;
          int v29 = v221;
        }

        else
        {
          int v209 = v40;
          int v29 = v221;
        }

        goto LABEL_26;
      case 2:
        int v30 = v227;
        if (!v213) {
          goto LABEL_144;
        }
        unint64_t v58 = (uint64_t (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_143;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v213);
        --qword_18C468B10;
        off_18C4653A8(v213);
        unint64_t v213 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          unint64_t v58 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_143:
          (*v58)(v213);
        }

LABEL_152:
        unint64_t v211 = v40;
        int v29 = v221;
        goto LABEL_26;
      case 4:
        size_t v60 = strlen(v39);
        int v30 = v227;
        if (v60 == 4)
        {
          uint64_t v61 = *v40;
          if (!*v40)
          {
            LODWORD(v62) = 0;
            __int16 v63 = "desc";
            goto LABEL_211;
          }

          if ((v61 & 0xFFFFFFDF) == 0x44)
          {
            unint64_t v62 = v40[1];
            if (!v40[1])
            {
              __int16 v63 = "esc";
              goto LABEL_211;
            }

            if ((v62 & 0xFFFFFFDF) == 0x45)
            {
              unint64_t v62 = v40[2];
              if (!v40[2])
              {
                __int16 v63 = "sc";
                goto LABEL_211;
              }

              if ((v62 & 0xFFFFFFDF) == 0x53)
              {
                unint64_t v62 = v40[3];
                if (!v40[3])
                {
                  __int16 v63 = "c";
LABEL_211:
LABEL_212:
                  sub_181362330(a7, "unrecognized order: %s", v40);
                  unsigned int v231 = 1;
                  LODWORD(v61) = *v40;
LABEL_213:
                  LOBYTE(v207) = (v61 & 0xFFFFFFDF) == 68;
                  goto LABEL_121;
                }

                if ((v62 & 0xFFFFFFDF) == 0x43) {
                  goto LABEL_213;
                }
                v62 += (unint64_t)byte_1813C6343;
                __int16 v63 = "c";
              }

              else
              {
                v62 += (unint64_t)byte_1813C6343;
                __int16 v63 = "sc";
              }
            }

            else
            {
              v62 += (unint64_t)byte_1813C6343;
              __int16 v63 = "esc";
            }
          }

          else
          {
            unint64_t v62 = (unint64_t)&byte_1813C6343[v61];
            __int16 v63 = "desc";
          }
        }

        else
        {
          if (v60 != 3) {
            goto LABEL_212;
          }
          uint64_t v61 = *v40;
          if (!*v40)
          {
            LODWORD(v62) = 0;
            __int16 v63 = "asc";
            goto LABEL_211;
          }

          if ((v61 & 0xFFFFFFDF) == 0x41)
          {
            unint64_t v62 = v40[1];
            if (!v40[1])
            {
              __int16 v63 = "sc";
              goto LABEL_211;
            }

            if ((v62 & 0xFFFFFFDF) == 0x53)
            {
              unint64_t v62 = v40[2];
              if (!v40[2])
              {
                __int16 v63 = "c";
                goto LABEL_211;
              }

              if ((v62 & 0xFFFFFFDF) == 0x43) {
                goto LABEL_213;
              }
              v62 += (unint64_t)byte_1813C6343;
              __int16 v63 = "c";
            }

            else
            {
              v62 += (unint64_t)byte_1813C6343;
              __int16 v63 = "sc";
            }
          }

          else
          {
            unint64_t v62 = (unint64_t)&byte_1813C6343[v61];
            __int16 v63 = "asc";
          }
        }

        LODWORD(v62) = *(unsigned __int8 *)v62;
        goto LABEL_211;
      case 5:
        int v30 = v227;
        if (!v215) {
          goto LABEL_169;
        }
        uint64_t v64 = (uint64_t (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_168;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v215);
        --qword_18C468B10;
        off_18C4653A8(v215);
        __int128 v215 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v64 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_168:
          (*v64)(v215);
        }

                    if (++v101 == v70) {
                      goto LABEL_86;
                    }
                  }

                  int v107 = *(unsigned int *)v103;
                  uint64_t v108 = v66 | (1LL << v101);
                  while (2)
                  {
                    if (((v66 | v35) & (1LL << v101)) != 0) {
                      uint64_t v69 = (v69 + 1);
                    }
                    else {
                      uint64_t v69 = (v69 + 1000);
                    }
                    if ((int)v107 >= 1)
                    {
                      int v111 = 1LL << (v105 - v65);
                      if (v107 < 4)
                      {
                        uint64_t j = 0LL;
                        goto LABEL_173;
                      }

                      uint64_t v113 = 0uLL;
                      uint64_t v114 = (int8x16_t)(unint64_t)v67;
                      uint64_t v115 = (uint64x2_t)vdupq_n_s64(v111);
                      uint64_t v116 = v107 & 0xFFFFFFFC;
                      uint64_t v117 = (int64x2_t)xmmword_1813CDC50;
                      do
                      {
                        uint64_t v114 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vnegq_s64(v117)), v114);
                        uint64_t v113 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vsubq_s64(v231, v117)), v113);
                        uint64_t v117 = vaddq_s64(v117, vdupq_n_s64(4uLL));
                        v116 -= 4LL;
                      }

                      while (v116);
                      int v118 = vorrq_s8(v113, v114);
                      int v67 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
                      for (uint64_t j = v107 & 0xFFFFFFFC; v107 != j; ++j)
LABEL_173:
                        *(void *)&v67 |= v111 >> j;
                    }

                    int v119 = *v104;
                    if (v119 < 2) {
                      goto LABEL_151;
                    }
                    if ((v119 & 0x80) != 0)
                    {
                      int v119 = v119 & 0x7F | (v104[1] << 7);
                      if ((char)v104[1] < 0)
                      {
                        int v119 = v119 & 0x3FFF | (v104[2] << 14);
                        if ((char)v104[2] < 0)
                        {
                          int v119 = v119 & 0x1FFFFF | (v104[3] << 21);
                          if ((char)v104[3] < 0)
                          {
                            int v119 = v119 & 0xFFFFFFF | ((v104[4] & 7) << 28);
                            uint64_t v109 = 5LL;
                          }

                          else
                          {
                            uint64_t v109 = 4LL;
                          }
                        }

                        else
                        {
                          uint64_t v109 = 3LL;
                        }
                      }

                      else
                      {
                        uint64_t v109 = 2LL;
                      }
                    }

                    else
                    {
                      uint64_t v109 = 1LL;
                    }

                    v104 += v109;
                    v105 += (int)(v119 - 2);
                    uint64_t v110 = v105 >= v102 || v105 < (int)v65;
                    int v66 = v108;
                    if (v110)
                    {
LABEL_151:
                      int v66 = v108;
                      goto LABEL_152;
                    }

                    continue;
                  }
                }

                LODWORD(v65) = 0;
                int v67 = 0LL;
                int v66 = 0LL;
                uint64_t v69 = 0LL;
LABEL_86:
                uint64_t v68 = v65;
              }

              if ((int)v70 >= 1)
              {
                int v72 = v260 + 24;
                double v73 = 0x7FFFFFFF;
                int v74 = v70;
                do
                {
                  if (*v72 && *(v72 - 1) < v73) {
                    double v73 = *(v72 - 1);
                  }
                  v72 += 6;
                  --v74;
                }

                while (v74);
                if (v73 != 0x7FFFFFFF)
                {
                  int v75 = 0LL;
                  double v65 = v73 - v71 + 1;
                  LODWORD(v261) = v73 - v71 + 1;
                  uint64_t v76 = v73 + 1;
                  do
                  {
                    int v79 = v260;
                    unsigned int v80 = &v260[48 * v75];
                    int v83 = (unsigned __int8 *)*((void *)v80 + 3);
                    int v81 = (unsigned __int8 **)(v80 + 24);
                    uint64_t v82 = v83;
                    if (v83)
                    {
                      for (uint64_t k = (uint64_t)*(v81 - 1); ; k += (int)(v86 - 2))
                      {
                        if (k >= v76) {
                          goto LABEL_115;
                        }
                        unint64_t v86 = *v82;
                        if (v86 < 2) {
                          break;
                        }
                        if ((v86 & 0x80) != 0)
                        {
                          unint64_t v86 = v86 & 0x7F | (v82[1] << 7);
                          if ((char)v82[1] < 0)
                          {
                            unint64_t v86 = v86 & 0x3FFF | (v82[2] << 14);
                            if ((char)v82[2] < 0)
                            {
                              unint64_t v86 = v86 & 0x1FFFFF | (v82[3] << 21);
                              if ((char)v82[3] < 0)
                              {
                                unint64_t v86 = v86 & 0xFFFFFFF | ((v82[4] & 7) << 28);
                                uint64_t v85 = 5LL;
                              }

                              else
                              {
                                uint64_t v85 = 4LL;
                              }
                            }

                            else
                            {
                              uint64_t v85 = 3LL;
                            }
                          }

                          else
                          {
                            uint64_t v85 = 2LL;
                          }
                        }

                        else
                        {
                          uint64_t v85 = 1LL;
                        }

                        v82 += v85;
                      }

                      uint64_t v82 = 0LL;
                      uint64_t k = -1LL;
LABEL_115:
                      *(v81 - 1) = (unsigned __int8 *)k;
                      *int v81 = v82;
                    }

                    int v87 = &v79[48 * v75];
                    int v89 = (unsigned __int8 *)*((void *)v87 + 5);
                    int v88 = (unsigned __int8 **)(v87 + 40);
                    int v77 = v89;
                    if (v89)
                    {
                      for (uint64_t m = (uint64_t)*(v88 - 1); ; m += (int)(v91 - 2))
                      {
                        if (m >= v65) {
                          goto LABEL_98;
                        }
                        uint64_t v91 = *v77;
                        if (v91 < 2) {
                          break;
                        }
                        if ((v91 & 0x80) != 0)
                        {
                          uint64_t v91 = v91 & 0x7F | (v77[1] << 7);
                          if ((char)v77[1] < 0)
                          {
                            uint64_t v91 = v91 & 0x3FFF | (v77[2] << 14);
                            if ((char)v77[2] < 0)
                            {
                              uint64_t v91 = v91 & 0x1FFFFF | (v77[3] << 21);
                              if ((char)v77[3] < 0)
                              {
                                uint64_t v91 = v91 & 0xFFFFFFF | ((v77[4] & 7) << 28);
                                uint64_t v90 = 5LL;
                              }

                              else
                              {
                                uint64_t v90 = 4LL;
                              }
                            }

                            else
                            {
                              uint64_t v90 = 3LL;
                            }
                          }

                          else
                          {
                            uint64_t v90 = 2LL;
                          }
                        }

                        else
                        {
                          uint64_t v90 = 1LL;
                        }

                        v77 += v90;
                      }

                      int v77 = 0LL;
                      uint64_t m = -1LL;
LABEL_98:
                      *(v88 - 1) = (unsigned __int8 *)m;
                      *int v88 = v77;
                    }

                    ++v75;
                  }

                  while (v75 != v70);
                  goto LABEL_150;
                }
              }

              v239 = v39;
            }

            uint64_t v33 = v253;
            int v120 = v260;
            if (v260)
            {
              uint64_t v121 = (uint64_t (**)(char *))&off_18C4653A8;
              if (dword_18C465380)
              {
                int v122 = v48;
                int v123 = v43;
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v120);
                --qword_18C468B10;
                off_18C4653A8(v120);
                int v120 = (char *)xmmword_18C468B70;
                int v37 = v241;
                uint64_t v33 = v253;
                int v43 = v123;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_192;
                }
                uint64_t v121 = (uint64_t (**)(char *))&xmmword_18C465410;
              }

              else
              {
                int v122 = v48;
                int v123 = v43;
              }

              (*v121)(v120);
              uint64_t v33 = v253;
              int v43 = v123;
              int v48 = v122;
            }

      if (a2 && (v37 & 0x80000000) == 0)
      {
        sub_1812D7A8C((uint64_t)a2, v38, v37, 0, (uint64_t (*)(uint64_t))sqlite3_free);
        return 0LL;
      }

      uint64_t v17 = 97366;
      goto LABEL_19;
    }

    unint64_t __src = v22;
    uint64_t v52 = (v22 - 1);
    if (v22 > 1)
    {
      int v53 = 0LL;
      unint64_t v54 = 0;
      int v37 = 0;
      int v38 = 0LL;
      while (1)
      {
        unsigned int v56 = a1[8];
        uint64_t v57 = *(_DWORD **)(*(void *)(v56 + 32) + 8 * v53);
        if (*(_DWORD *)(*(void *)v57 + 4LL)
          || *(void *)(*(void *)v57 + 24LL) != *(void *)(*(void *)(v56 + 16) + 24LL))
        {
          unint64_t v58 = 0;
        }

        else
        {
          unint64_t v58 = v57[4];
        }

        uint64_t v59 = (v37 + 9);
        if (v59 > v54)
        {
          if (v54) {
            LODWORD(v60) = v54;
          }
          else {
            LODWORD(v60) = 64;
          }
          size_t v60 = (int)v60;
          do
          {
            uint64_t v61 = v60;
            v60 *= 2LL;
          }

          while (v61 < v59);
          if (sqlite3_initialize()) {
            goto LABEL_89;
          }
          unint64_t v62 = sub_18127D33C((uint64_t)v38, v61);
          if (!v62) {
            goto LABEL_89;
          }
          int v38 = (char *)v62;
          unint64_t v54 = v61;
        }

        __int16 v63 = (int8x8_t *)&v38[v37];
        if (v58 <= 0x7F)
        {
          v63->i8[0] = v58;
          __int16 v55 = 1;
        }

        else if (v58 >> 14)
        {
          __int16 v55 = sub_181308E00(v63, (int)v58);
        }

        else
        {
          v63->i8[0] = (v58 >> 7) | 0x80;
          v63->i8[1] = v58 & 0x7F;
          __int16 v55 = 2;
        }

        v37 += v55;
LABEL_89:
        if (++v53 == v52) {
          goto LABEL_136;
        }
      }
    }

    int v38 = 0LL;
    int v37 = 0;
    unint64_t v54 = 0;
LABEL_136:
    if (__src < 1) {
      goto LABEL_152;
    }
    int v79 = 0LL;
    unsigned int v80 = __src;
    while (1)
    {
      int v81 = a1[8];
      uint64_t v82 = *(void *)(*(void *)(v81 + 32) + 8 * v79);
      if (!*(_DWORD *)(*(void *)v82 + 4LL)
        && *(void *)(*(void *)v82 + 24LL) == *(void *)(*(void *)(v81 + 16) + 24LL))
      {
        int v83 = *(unsigned int *)(v82 + 16);
        if ((_DWORD)v83)
        {
          uint64_t v84 = *(const void **)(v82 + 8);
          uint64_t v85 = (v83 + v37);
          if (v85 > v54)
          {
            int __srcb = *(void **)(v82 + 8);
            if (v54) {
              LODWORD(v86) = v54;
            }
            else {
              LODWORD(v86) = 64;
            }
            unint64_t v86 = (int)v86;
            do
            {
              int v87 = v86;
              v86 *= 2LL;
            }

            while (v87 < v85);
            if (sqlite3_initialize()) {
              goto LABEL_139;
            }
            int v88 = sub_18127D33C((uint64_t)v38, v87);
            if (!v88) {
              goto LABEL_139;
            }
            int v38 = (char *)v88;
            unint64_t v54 = v87;
            uint64_t v84 = __srcb;
          }

          memcpy(&v38[v37], v84, v83);
          v37 += v83;
        }
      }

              uint64_t v145 = 0;
              goto LABEL_153;
            }

            if (v145)
            {
              if (v140 >= 7)
              {
                int v170 = (int32x4_t *)(v131 + 48LL * v153);
                uint64_t v171 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                char v172 = (int32x4_t *)((char *)&v318 + 8);
                do
                {
                  uint64_t v173 = v172[1];
                  uint64_t v174 = *v170;
                  uint64_t v175 = v170[1];
                  v170 += 2;
                  v334.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v172, v174), vminq_s32(v173, v175));
                  v334.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v172, v174), vmaxq_s32(v173, v175));
                  vst2q_f32((float *)v172->i32, v334);
                  v172 += 2;
                  v171 -= 4LL;
                }

                while (v171);
                uint64_t v155 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                if (v141 == v143) {
                  goto LABEL_153;
                }
              }

              else
              {
                uint64_t v155 = 0LL;
              }

              uint64_t v176 = (int *)(v132 + 4 * v155 + 48LL * v153);
              size_t v177 = (int *)&v318 + v155 + 3;
              do
              {
                uint64_t v178 = *(v176 - 1);
                if (*(v177 - 1) < v178) {
                  uint64_t v178 = *(v177 - 1);
                }
                *(v177 - 1) = v178;
                uint64_t v179 = *v177;
                signed __int8 v181 = *v176;
                v176 += 2;
                uint64_t v180 = v181;
                if (*v177 <= v181) {
                  uint64_t v179 = v180;
                }
                *size_t v177 = v179;
                v177 += 2;
                v155 += 2LL;
              }

              while (v155 < v139);
LABEL_153:
              if (++v152 == v30) {
                goto LABEL_205;
              }
              continue;
            }

            break;
          }

          if (v140 >= 7)
          {
            uint64_t v191 = (const float *)(v131 + 48LL * v153);
            int v192 = v141 & 0x7FFFFFFFFFFFFFFCLL;
            uint64_t v193 = (float *)&v318 + 2;
            do
            {
              v330 = vld2q_f32(v193);
              v332 = vld2q_f32(v191);
              v191 += 8;
              v336.val[0] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v332.val[0], v330.val[0]),  (int8x16_t)v330.val[0],  (int8x16_t)v332.val[0]);
              v336.val[1] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v330.val[1], v332.val[1]),  (int8x16_t)v330.val[1],  (int8x16_t)v332.val[1]);
              vst2q_f32(v193, v336);
              v193 += 8;
              v192 -= 4LL;
            }

            while (v192);
            sqlite3_int64 v157 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
            if (v141 == v143) {
              goto LABEL_152;
            }
          }

          else
          {
            sqlite3_int64 v157 = 0LL;
          }

          int v194 = (float *)(v132 + 4 * v157 + 48LL * v153);
          uint64_t v195 = (float *)&v318 + v157 + 3;
          do
          {
            uint64_t v196 = *(v195 - 1);
            if (v196 >= *(v194 - 1)) {
              uint64_t v196 = *(v194 - 1);
            }
            *(v195 - 1) = v196;
            int v197 = *v195;
            uint64_t v198 = *v194;
            v194 += 2;
            uint64_t v199 = v198;
            if (*v195 <= v198) {
              int v197 = v199;
            }
            *uint64_t v195 = v197;
            v195 += 2;
            v157 += 2LL;
          }

          while (v157 < v139);
          goto LABEL_152;
        }

        __int16 v234 = 0LL;
        v233 = 0LL;
        uint64_t v5 = v311;
        double v73 = v308;
LABEL_264:
        v235 = 0LL;
        v236 = (int *)v73[v233];
        int v25 = v309;
        v237 = (__int128 *)(v309 + 48LL * *v236);
        v238 = *v237;
        v239 = v237[2];
        v322 = v237[1];
        v323 = v239;
        v321 = v238;
        v240 = (__int128 *)(v309 + 48LL * v236[v234]);
        v241 = *v240;
        v242 = v240[2];
        v319 = v240[1];
        v320 = v242;
        char v243 = v309 + 8;
        v244 = v309 + 12;
        v318 = v241;
        while (2)
        {
          if (v235 >= v234) {
            v245 = v81;
          }
          else {
            v245 = v302;
          }
          if (v235 >= v234) {
            v246 = &v318;
          }
          else {
            v246 = &v321;
          }
          v247 = *(_DWORD *)(v73[v233] + 4 * v235);
          v248 = *(unsigned __int8 *)(a1 + 39);
          v249 = *(void *)(v245 + 24);
          v250 = __rev16(*(unsigned __int16 *)(v249 + 2));
          if (v250 < (*(_DWORD *)(a1 + 32) - 4) / v248)
          {
            int v251 = (v250 * v248) + v249;
            *(void *)(v251 + 4) = bswap64(*(void *)(v309 + 48LL * v247));
            char v252 = v251 + 4;
            if (*(_BYTE *)(a1 + 37))
            {
              v253 = 0LL;
              uint64_t v254 = (_DWORD *)(v252 + 8);
              do
                *v254++ = bswap32(*(_DWORD *)(v243 + 48LL * v247 + 4 * v253++));
              while (v253 < *(unsigned __int8 *)(a1 + 37));
            }

            *(_WORD *)(*(void *)(v245 + 24) + 2LL) = bswap32(v250 + 1) >> 16;
            *(_DWORD *)(v245 + 20) = 1;
          }

          v255 = *(unsigned __int8 *)(a1 + 37);
          if (v255 <= 2) {
            int v256 = 2LL;
          }
          else {
            int v256 = *(unsigned __int8 *)(a1 + 37);
          }
          char v257 = ((v256 - 1) >> 1) + 1;
          if (*(_BYTE *)(a1 + 38))
          {
            if (v256 >= 7)
            {
              v258 = 2 * (v257 & 0x7FFFFFFFFFFFFFFCLL);
              v260 = (int32x4_t *)((char *)v246 + 8);
              int v261 = (int32x4_t *)(v243 + 48LL * v247);
              char v262 = v257 & 0x7FFFFFFFFFFFFFFCLL;
              do
              {
                v263 = v260[1];
                uint64_t v264 = *v261;
                v265 = v261[1];
                v261 += 2;
                v327.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v260, v264), vminq_s32(v263, v265));
                v327.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v260, v264), vmaxq_s32(v263, v265));
                vst2q_f32((float *)v260->i32, v327);
                v260 += 2;
                v262 -= 4LL;
              }

              while (v262);
              if (v257 != (v257 & 0x7FFFFFFFFFFFFFFCLL)) {
                goto LABEL_288;
              }
            }

            else
            {
              v258 = 0LL;
LABEL_288:
              int v266 = (int *)(v244 + 4 * v258 + 48LL * v247);
              v267 = (int *)v246 + v258 + 3;
              do
              {
                v268 = *(v267 - 1);
                if (v268 >= *(v266 - 1)) {
                  v268 = *(v266 - 1);
                }
                *(v267 - 1) = v268;
                v269 = *v267;
                v271 = *v266;
                v266 += 2;
                v270 = v271;
                if (*v267 <= v271) {
                  v269 = v270;
                }
                char *v267 = v269;
                v267 += 2;
                v258 += 2LL;
              }

              while (v258 < v255);
            }
          }

          else
          {
            if (v256 >= 7)
            {
              uint64_t v259 = 2 * (v257 & 0x7FFFFFFFFFFFFFFCLL);
              v272 = (float *)v246 + 2;
              v273 = (const float *)(v243 + 48LL * v247);
              int v274 = v257 & 0x7FFFFFFFFFFFFFFCLL;
              do
              {
                v325 = vld2q_f32(v272);
                uint64_t v326 = vld2q_f32(v273);
                v273 += 8;
                v328.val[0] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v326.val[0], v325.val[0]),  (int8x16_t)v325.val[0],  (int8x16_t)v326.val[0]);
                v328.val[1] = (float32x4_t)vbslq_s8( (int8x16_t)vcgtq_f32(v325.val[1], v326.val[1]),  (int8x16_t)v325.val[1],  (int8x16_t)v326.val[1]);
                vst2q_f32(v272, v328);
                v272 += 8;
                v274 -= 4LL;
              }

              while (v274);
              if (v257 == (v257 & 0x7FFFFFFFFFFFFFFCLL)) {
                goto LABEL_265;
              }
            }

            else
            {
              uint64_t v259 = 0LL;
            }

            int v275 = (float *)(v244 + 4 * v259 + 48LL * v247);
            v276 = (float *)v246 + v259 + 3;
            do
            {
              int v277 = *(v276 - 1);
              if (v277 >= *(v275 - 1)) {
                int v277 = *(v275 - 1);
              }
              *(v276 - 1) = v277;
              int v278 = *v276;
              int v279 = *v275;
              v275 += 2;
              int v280 = v279;
              if (*v276 <= v279) {
                int v278 = v280;
              }
              char *v276 = v278;
              v276 += 2;
              v259 += 2LL;
            }

            while (v259 < v255);
          }

uint64_t sub_18136DCD8(uint64_t a1, const char *a2, const char ***a3, char **a4)
{
  uint64_t v7 = sqlite3_mprintf("%s", a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  size_t v9 = strlen(v7);
  uint64_t v10 = 0LL;
  unint64_t v74 = (unint64_t)&v8[v9];
  while (1)
  {
    int v11 = v8[v10];
    uint64_t v12 = v8[v10];
    if (v11 <= 38) {
      break;
    }
    if (v11 == 39 || v11 == 96)
    {
LABEL_13:
      uint64_t v13 = &v8[v10];
      for (i = &v8[v10]; ; uint64_t v13 = i)
      {
        int v16 = *++i;
        unsigned __int8 v15 = v16;
        if (!v16) {
          break;
        }
        if ((_DWORD)v12 == v15)
        {
          unsigned int i = v13 + 2;
        }
      }

uint64_t sub_18136E400(uint64_t a1)
{
  unsigned int v9 = 0;
  uint64_t v2 = *(sqlite3 **)(a1 + 24);
  if (!*(void *)(a1 + 80))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = sqlite3_mprintf("docid INTEGER PRIMARY KEY");
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = v4;
    uint64_t v6 = 0LL;
    while (v6 < *(int *)(a1 + 48))
    {
      uint64_t v5 = sqlite3_mprintf("%z, 'c%d%q'", v5, v6, *(void *)(*(void *)(a1 + 56) + 8 * v6));
      ++v6;
      if (!v5) {
        goto LABEL_6;
      }
    }

    if (v3)
    {
      uint64_t v5 = sqlite3_mprintf("%z, langid", v5, v3);
      if (!v5)
      {
LABEL_6:
        unsigned int v9 = 7;
        sub_18136EB1C( (char *)&v9,  v2,  "CREATE TABLE %Q.'%q_content'(%s)",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  0LL);
        goto LABEL_7;
      }
    }

    sub_18136EB1C((char *)&v9, v2, "CREATE TABLE %Q.'%q_content'(%s)", *(void *)(a1 + 32), *(void *)(a1 + 40), v5);
    uint64_t v8 = (void (**)(char *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_21;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    uint64_t v5 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v8 = (void (**)(char *))&xmmword_18C465410;
LABEL_21:
      (*v8)(v5);
    }
  }

unsigned __int8 *sub_18136E618(unsigned __int8 *result, uint64_t a2)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.page_size", *(void *)(a2 + 32));
    if (result)
    {
      uint64_t v5 = result;
      int v6 = sub_18126DFE0(*(void *)(a2 + 24), result, 0xFFFFFFFFLL, 0LL, 0LL, &pStmt, 0LL, v4);
      if (v6 == 23)
      {
        int v7 = 0;
        *(_DWORD *)(a2 + 468) = 1024;
      }

      else
      {
        int v7 = v6;
        if (!v6)
        {
          sqlite3_step(pStmt);
          *(_DWORD *)(a2 + 468) = sqlite3_column_int(pStmt, 0);
          int v7 = sqlite3_finalize(pStmt);
        }
      }

      uint64_t v8 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        uint64_t result = (unsigned __int8 *)off_18C4653A8(v5);
        uint64_t v5 = (unsigned __int8 *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_14;
        }
        uint64_t v8 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
      }

      uint64_t result = (unsigned __int8 *)(*v8)(v5);
    }

    else
    {
      int v7 = 7;
    }

char *sub_18136E764(char *result, uint64_t a2)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v3 = result;
    if (*(void *)(a2 + 88)) {
      uint64_t v4 = *(const char **)(a2 + 88);
    }
    else {
      uint64_t v4 = "__langid";
    }
    sqlite3_vtab_config(*(sqlite3 **)(a2 + 24), 1, 1LL);
    uint64_t v5 = sqlite3_mprintf("%Q, ", **(void **)(a2 + 56));
    if (v5)
    {
      uint64_t v6 = 1LL;
      do
      {
        uint64_t v7 = *(int *)(a2 + 48);
        BOOL v8 = v6 >= v7;
        if (v6 >= v7) {
          break;
        }
        uint64_t v5 = sqlite3_mprintf("%z%Q, ", v5, *(void *)(*(void *)(a2 + 56) + 8 * v6++));
      }

      while (v5);
    }

    else
    {
      BOOL v8 = 0;
    }

    uint64_t result = sqlite3_mprintf("CREATE TABLE x(%s %Q HIDDEN, docid HIDDEN, %Q HIDDEN)", v5, *(void *)(a2 + 40), v4);
    unsigned int v9 = result;
    if (!v8 || result == 0LL)
    {
      int v11 = 7;
      if (!result) {
        goto LABEL_23;
      }
    }

    else
    {
      int v11 = sqlite3_declare_vtab(*(sqlite3 **)(a2 + 24), result);
    }

    uint64_t v12 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
      --qword_18C468B10;
      uint64_t result = (char *)off_18C4653A8(v9);
      unsigned int v9 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_23:
        if (v5)
        {
          uint64_t v13 = (uint64_t (**)(char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
            --qword_18C468B10;
            uint64_t result = (char *)off_18C4653A8(v5);
            uint64_t v5 = (char *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_30;
            }
            uint64_t v13 = (uint64_t (**)(char *))&xmmword_18C465410;
          }

          uint64_t result = (char *)(*v13)(v5);
        }

char *sub_18136E980(char *result, const char **a2, char *a3, ...)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    uint64_t result = sqlite3_vmprintf(a3, va);
    if (!result)
    {
LABEL_11:
      uint64_t v6 = 0LL;
      *(_DWORD *)uint64_t v4 = 7;
LABEL_12:
      BOOL v8 = *a2;
      if (*a2)
      {
        unsigned int v9 = (uint64_t (**)(const char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
          --qword_18C468B10;
          uint64_t result = (char *)off_18C4653A8(v8);
          BOOL v8 = (const char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_20;
          }
          unsigned int v9 = (uint64_t (**)(const char *))&xmmword_18C465410;
        }

        uint64_t result = (char *)(*v9)(v8);
      }

char *sub_18136EB1C(char *result, sqlite3 *a2, char *a3, ...)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    uint64_t result = sqlite3_vmprintf(a3, va);
    if (result)
    {
      uint64_t v5 = result;
      *(_DWORD *)uint64_t v4 = sqlite3_exec(a2, result, 0LL, 0LL, 0LL);
      uint64_t v6 = (uint64_t (**)(char *))&off_18C4653A8;
      if (!dword_18C465380) {
        return (char *)(*v6)(v5);
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
      --qword_18C468B10;
      uint64_t result = (char *)off_18C4653A8(v5);
      uint64_t v5 = (char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v6 = (uint64_t (**)(char *))&xmmword_18C465410;
        return (char *)(*v6)(v5);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v4 = 7;
    }
  }

  return result;
}

double sub_18136EC18(uint64_t *a1)
{
  if (*((_BYTE *)a1 + 12))
  {
    uint64_t v2 = *a1;
    if (!*(void *)(*a1 + 432))
    {
      uint64_t v3 = (sqlite3_stmt *)a1[2];
      *(void *)(v2 + 432) = v3;
      sqlite3_reset(v3);
      a1[2] = 0LL;
    }

    *((_BYTE *)a1 + 12) = 0;
  }

  sqlite3_finalize((sqlite3_stmt *)a1[2]);
  uint64_t v4 = a1[5];
  if (v4)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v5 = *(void *)(v4 + 24);
      if (!v5) {
        goto LABEL_16;
      }
      uint64_t v7 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_15;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
      --qword_18C468B10;
      off_18C4653A8(v5);
      uint64_t v5 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70) {
        break;
      }
LABEL_16:
      BOOL v8 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
        --qword_18C468B10;
        off_18C4653A8(v4);
        uint64_t v4 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_8;
        }
        BOOL v8 = &xmmword_18C465410;
      }

      (*v8)(v4);
LABEL_8:
      uint64_t v4 = v6;
      if (!v6) {
        goto LABEL_21;
      }
    }

    uint64_t v7 = &xmmword_18C465410;
LABEL_15:
    (*v7)(v5);
    goto LABEL_16;
  }

uint64_t sub_18136EEAC(uint64_t result)
{
  if (result)
  {
    do
    {
      do
      {
        unsigned int i = (void *)result;
        double result = *(void *)(result + 16);
      }

      while (result);
      double result = i[3];
    }

    while (result);
    while (1)
    {
      uint64_t v2 = i[1];
      uint64_t v3 = (uint64_t *)i[4];
      if (!v3) {
        goto LABEL_31;
      }
      uint64_t v4 = *v3;
      if (!*v3) {
        goto LABEL_12;
      }
      uint64_t v5 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
        --qword_18C468B10;
        off_18C4653A8(v4);
        uint64_t v4 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_12;
        }
        uint64_t v5 = &xmmword_18C465410;
      }

      (*v5)(v4);
LABEL_12:
      if (*((_DWORD *)v3 + 8))
      {
        uint64_t v6 = v3[5];
        if (v6)
        {
          uint64_t v7 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_19;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
          --qword_18C468B10;
          off_18C4653A8(v6);
          uint64_t v6 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v7 = &xmmword_18C465410;
LABEL_19:
            (*v7)(v6);
          }
        }
      }

      v3[6] = 0LL;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      if (*((int *)v3 + 20) >= 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = v3 + 15;
        do
        {
          uint64_t v11 = *v9;
          sub_181362408(*v9);
          if (v11)
          {
            uint64_t v10 = (void (**)(uint64_t))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
              --qword_18C468B10;
              off_18C4653A8(v11);
              uint64_t v11 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_24;
              }
              uint64_t v10 = (void (**)(uint64_t))&xmmword_18C465410;
            }

            (*v10)(v11);
          }

uint64_t sub_18136F1D8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 32))
  {
    uint64_t v2 = *(void *)(result + 40);
    if (v2)
    {
      uint64_t v3 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_8:
        double result = (*v3)(v2);
        goto LABEL_9;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      double result = off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v3 = &xmmword_18C465410;
        goto LABEL_8;
      }
    }
  }

uint64_t sub_18136F298(uint64_t *a1)
{
  uint64_t v1 = a1 + 2;
  if (!a1[2])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(*a1 + 432);
    if (v5)
    {
      *uint64_t v1 = v5;
      *(void *)(v4 + 432) = 0LL;
LABEL_5:
      uint64_t v2 = 0LL;
      *((_BYTE *)a1 + 12) = 1;
      return v2;
    }

    uint64_t v7 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid = ?", *(const char **)(v4 + 440));
    if (!v7) {
      return 7LL;
    }
    uint64_t v9 = v7;
    ++*(_DWORD *)(v4 + 104);
    uint64_t v2 = sub_18126DFE0(*(void *)(v4 + 24), v7, 0xFFFFFFFFLL, 129LL, 0LL, v1, 0LL, v8);
    --*(_DWORD *)(v4 + 104);
    uint64_t v10 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
      --qword_18C468B10;
      off_18C4653A8(v9);
      uint64_t v9 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_14:
        if ((_DWORD)v2) {
          return v2;
        }
        goto LABEL_5;
      }

      uint64_t v10 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v10)(v9);
    goto LABEL_14;
  }

  return 0LL;
}

uint64_t sub_18136F3EC(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  if (!a2)
  {
    uint64_t v6 = 1LL;
    goto LABEL_71;
  }

  LODWORD(v4) = a2;
  int v5 = *(_DWORD *)v3;
  if ((*(_DWORD *)v3 - 3) > 1)
  {
    if (v5 == 2)
    {
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v37 = *(void *)(v3 + 24);
      uint64_t v8 = v37;
      int v38 = (void *)v7;
      *(void *)(v3 + 16) = 0LL;
      *(void *)(v3 + 24) = 0LL;
      *(void *)(v7 + 8) = 0LL;
      *(void *)(v8 + 8) = 0LL;
      uint64_t v9 = (a2 - 1);
      uint64_t v10 = sub_18136F3EC(&v38, v9);
      if ((_DWORD)v10)
      {
        uint64_t v6 = v10;
      }

      else
      {
        uint64_t v6 = sub_18136F3EC(&v37, v9);
        uint64_t v8 = v37;
        if (!(_DWORD)v6)
        {
          uint64_t v30 = (uint64_t)v38;
          *(void *)(v3 + 16) = v38;
          *(void *)(v30 + 8) = v3;
          *(void *)(v3 + 24) = v8;
          *(void *)(v8 + 8) = v3;
          goto LABEL_70;
        }
      }

      sub_18136EEAC(v8);
      sub_18136EEAC((uint64_t)v38);
      goto LABEL_70;
    }

    uint64_t v6 = 0LL;
    goto LABEL_72;
  }

  if (sqlite3_initialize() || (uint64_t v11 = (uint64_t *)sub_18126F0AC(8LL * (int)v4)) == 0LL)
  {
    uint64_t v6 = 7LL;
    goto LABEL_71;
  }

  uint64_t v12 = v11;
  bzero(v11, 8LL * (int)v4);
  uint64_t v13 = v3;
  if (*(_DWORD *)v3 == v5)
  {
    uint64_t v13 = v3;
    do
      uint64_t v13 = *(void *)(v13 + 16);
    while (*(_DWORD *)v13 == v5);
  }

  int v14 = 0LL;
  int v38 = (void *)v13;
  while (1)
  {
    BOOL v15 = *(void **)(v13 + 8);
    *(void *)(v13 + 8) = 0LL;
    if (v15) {
      v15[2] = 0LL;
    }
    else {
      uint64_t v3 = 0LL;
    }
    uint64_t v16 = sub_18136F3EC(&v38, (v4 - 1));
    if ((_DWORD)v16)
    {
      uint64_t v6 = v16;
      goto LABEL_50;
    }

    uint64_t v17 = (uint64_t)v38;
    BOOL v18 = v38 != 0LL;
    uint64_t v19 = 0LL;
    while (1)
    {
      int v20 = v14;
      uint64_t v21 = v12[v19];
      if (!v21) {
        break;
      }
      _OWORD v14[2] = v21;
      v14[3] = v17;
      *(void *)(v21 + 8) = v14;
      *(void *)(v17 + 8) = v14;
      int v14 = (void *)v14[1];
      BOOL v18 = v20 != 0LL;
      v20[1] = 0LL;
      v12[v19] = 0LL;
      if (v20)
      {
        ++v19;
        uint64_t v17 = (uint64_t)v20;
      }

      goto LABEL_29;
    }

    v12[v19] = v17;
    if (!v15)
    {
LABEL_40:
      if ((int)v4 < 1)
      {
        uint64_t v6 = 0LL;
        uint64_t v3 = 0LL;
      }

      else
      {
        uint64_t v3 = 0LL;
        uint64_t v27 = v4;
        int v28 = v12;
        do
        {
          if (*v28)
          {
            if (v3)
            {
              v20[3] = v3;
              uint64_t v29 = *v28;
              v20[2] = *v28;
              *(void *)(v29 + 8) = v20;
              *(void *)(v3 + 8) = v20;
              uint64_t v3 = (uint64_t)v20;
              int v20 = (void *)v20[1];
            }

            else
            {
              uint64_t v3 = *v28;
            }

            *(void *)(v3 + 8) = 0LL;
          }

          ++v28;
          --v27;
        }

        while (v27);
        uint64_t v6 = 0LL;
      }

      goto LABEL_64;
    }

uint64_t sub_18136F7F0(uint64_t result, int a2)
{
  if (result)
  {
    LODWORD(v2) = a2;
    uint64_t v3 = result;
    while ((v2 & 0x80000000) == 0)
    {
      uint64_t v2 = (v2 - 1);
      double result = sub_18136F7F0(*(void *)(v3 + 16), v2);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v3 = *(void *)(v3 + 24);
      if (!v3) {
        return 0LL;
      }
    }

    return 18LL;
  }

  return result;
}

uint64_t sub_18136F840(uint64_t **a1, unsigned __int8 *a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v7 = 0LL;
  uint64_t v134 = 0LL;
  int v130 = a3;
  int v135 = 1;
  while (1)
  {
    uint64_t v139 = 0LL;
    *((_DWORD *)a1 + 9) = 0;
    int v136 = a3;
    if (a3 < 1)
    {
      int v8 = a3;
      uint64_t v9 = a2;
      if (!a3)
      {
LABEL_227:
        int v137 = 0;
        goto LABEL_228;
      }
    }

    else
    {
      int v8 = a3;
      uint64_t v9 = a2;
      while (1)
      {
        int v11 = *v9;
        ++v9;
        BOOL v10 = __OFSUB__(v8--, 1);
        if ((v8 < 0) ^ v10 | (v8 == 0)) {
          goto LABEL_227;
        }
      }
    }

    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    int v137 = 0;
    uint64_t v133 = a2;
    int v127 = (_DWORD)v9 - (_DWORD)a2;
    int v129 = a1;
    do
    {
      uint64_t v15 = LOBYTE((&off_189B6F100)[2 * v13 + 1]);
      if (v8 >= (int)v15 && !memcmp(v9, (&off_189B6F100)[2 * v13], LOBYTE((&off_189B6F100)[2 * v13 + 1])))
      {
        if (v13 == 3 && v9[4] == 47 && v9[5] - 48 <= 9)
        {
          int v16 = v9[v15 + 1];
          if ((v16 - 48) > 9)
          {
            int v19 = 0;
            int v20 = 0;
          }

          else
          {
            uint64_t v17 = 0LL;
            unint64_t v18 = 0LL;
            while (1)
            {
              int v19 = 10;
              unint64_t v18 = (v16 - 48) + 10 * v18;
              if (v18 >> 31) {
                break;
              }
              int v20 = v17 + 1;
              int v16 = v9[v15 + 2 + v17++];
              if ((v16 - 48) >= 0xA)
              {
                int v19 = v18;
                goto LABEL_37;
              }
            }

            int v20 = -1;
          }

uint64_t sub_1813707A8(uint64_t result, uint64_t a2, _DWORD *a3, int *a4, _DWORD *a5)
{
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = result;
    while (!*a5)
    {
      if (*(_DWORD *)v8 == 5)
      {
        uint64_t v11 = *(void *)(v8 + 32);
        uint64_t v12 = *(unsigned int *)(v11 + 80);
        *a3 += v12;
        uint64_t v32 = v12;
        if ((int)v12 < 1)
        {
LABEL_32:
          *(_DWORD *)(v11 + 60) = -1;
        }

        else
        {
          uint64_t v13 = 0LL;
          while (1)
          {
            uint64_t v14 = *(void *)(v8 + 32) + 40 * v13;
            uint64_t v15 = *(char **)(v14 + 88);
            uint64_t v16 = *(unsigned int *)(v14 + 96);
            int v17 = *(_DWORD *)(v14 + 100);
            unint64_t v18 = (uint64_t *)(v14 + 120);
            if (sqlite3_initialize()) {
              break;
            }
            uint64_t v19 = sub_18126F0AC(88LL);
            if (!v19) {
              goto LABEL_29;
            }
            uint64_t v20 = *(void *)v9;
            if (v17 && (uint64_t v21 = *(int *)(v20 + 488), (int)v21 >= 2))
            {
              unint64_t v22 = (int *)(*(void *)(v20 + 496) + 40LL);
              for (uint64_t i = 1LL; i != v21; ++i)
              {
                int v24 = *v22;
                v22 += 10;
                if (v24 == (_DWORD)v16)
                {
                  int v29 = *(_DWORD *)(v9 + 32);
                  *(void *)(v19 + 80) = 0LL;
                  *(_OWORD *)(v19 + 48) = 0u;
                  *(_OWORD *)(v19 + 64) = 0u;
                  *(_OWORD *)(v19 + 16) = 0u;
                  *(_OWORD *)(v19 + 32) = 0u;
                  *(_OWORD *)uint64_t v19 = 0u;
                  double result = sub_181362778(v20, v29, i, 0xFFFFFFFE, v15, v16, 0, 0, v19);
                  *(_DWORD *)(v19 + 52) = 1;
                  goto LABEL_22;
                }
              }

              uint64_t v25 = (int *)(*(void *)(v20 + 496) + 40LL);
              uint64_t v26 = 1LL;
              while (1)
              {
                int v27 = *v25;
                v25 += 10;
                if (v27 == (_DWORD)v16 + 1) {
                  break;
                }
                if (v21 == ++v26) {
                  goto LABEL_21;
                }
              }

              int v30 = *(_DWORD *)(v9 + 32);
              *(void *)(v19 + 80) = 0LL;
              *(_OWORD *)(v19 + 48) = 0u;
              *(_OWORD *)(v19 + 64) = 0u;
              *(_OWORD *)(v19 + 16) = 0u;
              *(_OWORD *)(v19 + 32) = 0u;
              *(_OWORD *)uint64_t v19 = 0u;
              uint64_t v31 = v20;
              double result = sub_181362778(v20, v30, v26, 0xFFFFFFFE, v15, v16, 1, 0, v19);
              if ((_DWORD)result) {
                goto LABEL_30;
              }
              double result = sub_181362778(v31, *(_DWORD *)(v9 + 32), 0, 0xFFFFFFFE, v15, v16, 0, 0, v19);
            }

            else
            {
LABEL_21:
              int v28 = *(_DWORD *)(v9 + 32);
              *(void *)(v19 + 80) = 0LL;
              *(_OWORD *)(v19 + 48) = 0u;
              *(_OWORD *)(v19 + 64) = 0u;
              *(_OWORD *)(v19 + 16) = 0u;
              *(_OWORD *)(v19 + 32) = 0u;
              *(_OWORD *)uint64_t v19 = 0u;
              double result = sub_181362778(v20, v28, 0, 0xFFFFFFFE, v15, v16, v17, 0, v19);
              *(_DWORD *)(v19 + 52) = v17 == 0;
            }

sqlite3_blob *sub_181370A2C(sqlite3_blob *result, uint64_t a2, int *a3, uint64_t *a4, void **a5, int *a6)
{
  if (*a6) {
    return result;
  }
  uint64_t v11 = result;
  while (1)
  {
    int v12 = *a3;
    if (*a3 != 4) {
      break;
    }
    a2 = *((void *)a3 + 2);
    *(*a5)++ = a2;
LABEL_10:
    double result = (sqlite3_blob *)sub_181370A2C(v11, a2, *((void *)a3 + 2), a4, a5, a6);
    if (*a3 == 4)
    {
      a2 = *((void *)a3 + 3);
      *(*a5)++ = a2;
    }

    a3 = (int *)*((void *)a3 + 3);
    if (*a6) {
      return result;
    }
  }

  if (v12 == 2) {
    return result;
  }
  if (v12 != 5) {
    goto LABEL_10;
  }
  uint64_t v13 = *((void *)a3 + 4);
  uint64_t v14 = 0LL;
  uint64_t v31 = *((void *)a3 + 4);
  while (1)
  {
    uint64_t v15 = *a4;
    *a4 += 40LL;
    *(void *)uint64_t v15 = v13;
    *(_DWORD *)(v15 + 8) = v14;
    uint64_t v16 = v13 + 40 * v14;
    *(void *)(v15 + 16) = v16 + 88;
    *(void *)(v15 + 24) = a2;
    *(_DWORD *)(v15 + 36) = *(_DWORD *)(v13 + 84);
    uint64_t v17 = *(void *)(v16 + 120);
    int v18 = *(_DWORD *)(v17 + 8);
    if (v18 >= 1) {
      break;
    }
    int v19 = 0;
LABEL_17:
    *(_DWORD *)(v15 + 32) = v19;
    *a6 = 0;
  }

  int v19 = 0;
  uint64_t v20 = 0LL;
  uint64_t v21 = *(void *)v11;
  int v22 = *(_DWORD *)(*(void *)v11 + 468LL);
  uint64_t v34 = v15;
  ppBlob = (sqlite3_blob **)(*(void *)v11 + 480LL);
  uint64_t v32 = v17;
  uint64_t v33 = v14;
  while (1)
  {
    uint64_t v23 = *(void *)(*(void *)v17 + 8 * v20);
    if (!*(void *)(v23 + 64) && !*(_BYTE *)(v23 + 5))
    {
      sqlite3_int64 v24 = *(void *)(v23 + 8);
      if (v24 <= *(void *)(v23 + 16)) {
        break;
      }
    }

uint64_t sub_181370CC4(uint64_t a1, char **a2, char ***a3, unsigned int a4)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 80LL)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = (int)a4 < 1;
  }
  if (v5) {
    return 0LL;
  }
  uint64_t v8 = a3;
  int v10 = 0;
  int v11 = 0;
  uint64_t v12 = a4;
  uint64_t v13 = a3 + 4;
  uint64_t v14 = a4;
  do
  {
    if (*((char ***)v13 - 1) == a2)
    {
      v11 += *v13;
      ++v10;
    }

    v13 += 10;
    --v14;
  }

  while (v14);
  uint64_t v6 = 0LL;
  if (v11 && v10 >= 2)
  {
    uint64_t v54 = a4;
    int v56 = *(_DWORD *)(a1 + 84);
    if (v56)
    {
LABEL_14:
      unsigned int v15 = 0;
      int v16 = 0;
      int v17 = 1;
      int v53 = v8;
      while (1)
      {
        int v18 = 0LL;
        uint64_t v19 = v12;
        uint64_t v20 = v8;
        do
        {
          if (v20[2] && v20[3] == a2 && (!v18 || *((_DWORD *)v20 + 8) < *((_DWORD *)v18 + 8))) {
            int v18 = v20;
          }
          v20 += 5;
          --v19;
        }

        while (v19);
        if (!v15)
        {
          v17 *= 4;
LABEL_31:
          uint64_t v21 = (uint64_t)v18[2];
          LODWORD(v58) = 0;
          uint64_t v59 = 0LL;
          uint64_t v22 = sub_1813711F8(v4, v21, *((_DWORD *)v18 + 9), &v58, (char **)&v59);
          if ((_DWORD)v22
            || (uint64_t v22 = sub_181371838(v4, (uint64_t)*v18, *((_DWORD *)v18 + 2), (char *)v59, v58), (_DWORD)v22))
          {
            uint64_t v6 = v22;
          }

          else
          {
            int v29 = **v18;
            if (v29 && (uint64_t v30 = *((int *)*v18 + 2), (int)v30 >= 1))
            {
              int v31 = 0;
              unint64_t v32 = (unint64_t)&v29[v30];
              do
              {
                do
                {
                  uint64_t v33 = v29;
                  int v34 = *v29++;
                }

                while (v34 < 0);
                int v37 = *v29;
                unsigned int v35 = v29 - 1;
                int v36 = v37;
                if (v37)
                {
                  do
                  {
                    unsigned int v38 = v36 & 0xFFFFFF80;
                    int v39 = v33[2];
                    ++v33;
                    int v36 = v39;
                  }

                  while (v38 | v39);
                }

                else
                {
                  uint64_t v33 = v35;
                }

                ++v31;
                int v29 = v33 + 2;
              }

              while ((unint64_t)(v33 + 2) < v32);
            }

            else
            {
              int v31 = 0;
            }

            uint64_t v6 = 0LL;
            if (v31 < v16 || v15 == 0) {
              int v16 = v31;
            }
          }

          goto LABEL_46;
        }

        if (*((_DWORD *)v18 + 8) < (v16 + v17 / 4 - 1) / (v17 / 4) * v56)
        {
          uint64_t v6 = 0LL;
          if (v15 < 0xC) {
            v17 *= 4;
          }
          goto LABEL_31;
        }

        int v55 = v16;
        uint64_t v23 = v4;
        sqlite3_int64 v24 = v18[2];
        int v25 = *((_DWORD *)v18 + 9);
        if (sqlite3_initialize() || (uint64_t v26 = sub_18126F0AC(32LL)) == 0)
        {
          uint64_t v6 = 7LL;
        }

        else
        {
          uint64_t v6 = 0LL;
          *(_OWORD *)uint64_t v26 = 0u;
          *(_OWORD *)(v26 + 16) = 0u;
          *(void *)uint64_t v26 = v24;
          *(void *)(v26 + 16) = *(void *)(a1 + 40);
          *(_DWORD *)(v26 + 8) = v25;
          *(void *)(a1 + 40) = v26;
          v24[3] = (char *)v26;
        }

        uint64_t v27 = (uint64_t)v24[4];
        sub_181362408(v27);
        if (v27)
        {
          int v28 = (void (**)(uint64_t))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v27);
            --qword_18C468B10;
            off_18C4653A8(v27);
            uint64_t v27 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_45;
            }
            int v28 = (void (**)(uint64_t))&xmmword_18C465410;
          }

          (*v28)(v27);
        }

uint64_t sub_181371114(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a2 && !*a3)
  {
    uint64_t v5 = result;
    if (*(_DWORD *)a2 == 5)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      uint64_t v7 = *(unsigned int *)(v6 + 80);
      if ((_DWORD)v7)
      {
        if ((int)v7 < 1)
        {
          LODWORD(v8) = 0;
        }

        else
        {
          uint64_t v8 = 0LL;
          uint64_t v9 = (void *)(v6 + 112);
          while (*v9)
          {
            ++v8;
            v9 += 5;
            if (v7 == v8)
            {
              LODWORD(v8) = *(_DWORD *)(v6 + 80);
              break;
            }
          }
        }

        *(_BYTE *)(a2 + 50) = (_DWORD)v8 == (_DWORD)v7;
      }

      double result = sub_18137308C(result, 1, v6);
      *a3 = result;
    }

    else
    {
      sub_181371114(result, *(void *)(a2 + 16), a3);
      double result = sub_181371114(v5, *(void *)(a2 + 24), a3);
      char v10 = *(_BYTE *)(*(void *)(a2 + 16) + 50LL);
      if (v10) {
        char v10 = *(_BYTE *)(*(void *)(a2 + 24) + 50LL) != 0;
      }
      *(_BYTE *)(a2 + 50) = v10;
    }
  }

  return result;
}

uint64_t sub_1813711F8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char **a5)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a2 + 32);
  memset(v56, 0, sizeof(v56));
  v57[0] = 0u;
  int v9 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12)) {
    int v10 = 11;
  }
  else {
    int v10 = 3;
  }
  int v11 = v10 | (32 * (*(_DWORD *)(a2 + 16) != 0));
  BOOL v12 = *(_DWORD *)(a1 + 48) > a3;
  memset(&v57[1], 0, 48);
  __int128 v58 = 0uLL;
  memset(v59, 0, sizeof(v59));
  int v54 = a3;
  int v55 = v11 | (4 * v12);
  int v52 = *(const void **)a2;
  uint64_t v13 = v52;
  int v53 = v9;
  *(void *)(v8 + 16) = &v52;
  uint64_t v14 = sub_181363C00(a1, (uint64_t *)v8, v13, v9);
  if ((_DWORD)v14) {
    goto LABEL_77;
  }
  uint64_t v48 = v6;
  uint64_t v49 = a4;
  uint64_t v51 = v8;
LABEL_6:
  while (1)
  {
    uint64_t v15 = sub_1813644CC(a1, v8);
    if ((_DWORD)v15 != 100) {
      break;
    }
    int v16 = *(char **)(v8 + 72);
    int v17 = *(_DWORD *)(v8 + 80);
    int v18 = *(char **)&v56[0];
    if (*(void *)&v56[0])
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = v16;
      while (1)
      {
        uint64_t v21 = sub_181371FE0(*(unsigned __int8 *)(a1 + 463), v20, v17, v18, *((_DWORD *)v59 + v19), &v60, v61);
        BOOL v23 = v20 == v16 || v20 == 0LL;
        if ((_DWORD)v21)
        {
          uint64_t v14 = v21;
          uint64_t v8 = v51;
          if (!v23)
          {
            unint64_t v32 = (void (**)(char *))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_44;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
            --qword_18C468B10;
            off_18C4653A8(v20);
            uint64_t v20 = (char *)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              unint64_t v32 = (void (**)(char *))&xmmword_18C465410;
LABEL_44:
              (*v32)(v20);
            }
          }

uint64_t sub_181371838(uint64_t a1, uint64_t a2, int a3, char *a4, int a5)
{
  if (!a4)
  {
    int v18 = *(char **)a2;
    if (*(void *)a2)
    {
      uint64_t v19 = (uint64_t (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
        --qword_18C468B10;
        off_18C4653A8(v18);
        int v18 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_30;
        }
        uint64_t v19 = (uint64_t (**)(char *))&xmmword_18C465410;
      }

      (*v19)(v18);
    }

uint64_t sub_181371DD8(uint64_t *a1, sqlite3_stmt **a2)
{
  uint64_t v7 = 0LL;
  uint64_t result = sub_1813636A8(a1, 22, &v7, 0LL);
  uint64_t v4 = v7;
  if (!(_DWORD)result)
  {
    if (!sub_1812B2390((uint64_t)v7, 0))
    {
      uint64_t v5 = *((void *)v4 + 16);
      if ((*(_WORD *)(v5 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v5, 0LL);
      }

      else
      {
        *(void *)uint64_t v5 = 0LL;
        *(_WORD *)(v5 + 20) = 4;
      }

      uint64_t v6 = *(void *)(*(void *)v4 + 24LL);
      if (v6) {
        xmmword_18C465410(v6);
      }
    }

    if (sqlite3_step(v4) == 100 && sqlite3_column_type(v4, 0) == 4)
    {
      uint64_t result = 0LL;
    }

    else
    {
      LODWORD(result) = sqlite3_reset(v4);
      uint64_t v4 = 0LL;
      if ((_DWORD)result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = 267LL;
      }
    }
  }

  *a2 = v4;
  return result;
}

uint64_t sub_181371EB8(_BYTE *a1, unint64_t a2, void *a3)
{
  if ((unint64_t)a1 >= a2)
  {
    uint64_t v4 = 0LL;
    LODWORD(v3) = (_DWORD)a1;
    goto LABEL_22;
  }

  uint64_t v3 = a1 + 1;
  uint64_t v4 = *a1 & 0x7F;
  if ((*a1 & 0x80) != 0)
  {
    int v5 = (char)a1[1];
    uint64_t v3 = a1 + 2;
    v4 |= (unint64_t)(v5 & 0x7F) << 7;
    if (v5 < 0)
    {
      int v6 = (char)a1[2];
      uint64_t v3 = a1 + 3;
      v4 |= (unint64_t)(v6 & 0x7F) << 14;
      if (v6 < 0)
      {
        int v7 = (char)a1[3];
        uint64_t v3 = a1 + 4;
        v4 |= (unint64_t)(v7 & 0x7F) << 21;
        if (v7 < 0)
        {
          int v8 = (char)a1[4];
          uint64_t v3 = a1 + 5;
          v4 |= (unint64_t)(v8 & 0x7F) << 28;
          if (v8 < 0)
          {
            int v9 = (char)a1[5];
            uint64_t v3 = a1 + 6;
            v4 |= (unint64_t)(v9 & 0x7F) << 35;
            if (v9 < 0)
            {
              int v10 = (char)a1[6];
              uint64_t v3 = a1 + 7;
              v4 |= (unint64_t)(v10 & 0x7F) << 42;
              if (v10 < 0)
              {
                int v11 = (char)a1[7];
                uint64_t v3 = a1 + 8;
                v4 |= (unint64_t)(v11 & 0x7F) << 49;
                if (v11 < 0)
                {
                  int v12 = (char)a1[8];
                  uint64_t v3 = a1 + 9;
                  v4 |= (unint64_t)(v12 & 0x7F) << 56;
                  if (v12 < 0)
                  {
                    if ((unint64_t)v3 < a2)
                    {
                      v4 |= (unint64_t)a1[9] << 63;
                      LODWORD(v3) = (_DWORD)a1 + 10;
                      goto LABEL_23;
                    }

uint64_t sub_181371FE0(int a1, char *a2, int a3, char *a4, int a5, void *a6, _DWORD *a7)
{
  int v7 = a7;
  *a6 = 0LL;
  *a7 = 0;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v15 = a3;
  uint64_t v16 = a5;
  int v17 = (_BYTE *)sub_18126F0AC(a3 + (uint64_t)a5 + 17);
  if (!v17) {
    return 7LL;
  }
  int v75 = v17;
  uint64_t v76 = v17;
  if (a3 < 1)
  {
    int v18 = 0LL;
    uint64_t v19 = 0LL;
  }

  else
  {
    int v18 = &a2[(int)sub_181363B00(a2, (unint64_t *)&v79)];
    uint64_t v19 = v79;
  }

  size_t v74 = a6;
  int v78 = v18;
  if (a5 < 1)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v20 = &a4[(int)sub_181363B00(a4, (unint64_t *)&v79)];
    uint64_t v21 = v79;
  }

  uint64_t v77 = v20;
  BOOL v22 = v18 != 0LL;
  BOOL v23 = v20 != 0LL;
  sqlite3_int64 v24 = v75;
  uint64_t v25 = v75;
  if (!((unint64_t)v18 | (unint64_t)v20))
  {
LABEL_76:
    uint64_t v14 = 0LL;
    *uint64_t v25 = 0LL;
    goto LABEL_77;
  }

  uint64_t v73 = v7;
  uint64_t v26 = 0LL;
  unint64_t v27 = (unint64_t)&a2[v15];
  unint64_t v28 = (unint64_t)&a4[v16];
  char v29 = 1;
  while (1)
  {
    if (v19 == v21) {
      int v31 = 0;
    }
    else {
      int v31 = -1;
    }
    if (v19 > v21) {
      int v31 = 1;
    }
    if (a1) {
      int v31 = -v31;
    }
    if (!v22 || !v23 || v31)
    {
      BOOL v41 = v31 < 0;
      char v42 = (a1 == 0) | v29;
      uint64_t v43 = v76;
      if (v23 && (!v22 || !v41))
      {
        if ((v42 & 1) != 0) {
          uint64_t v44 = v26;
        }
        else {
          uint64_t v44 = v21;
        }
        if ((v42 & 1) != 0) {
          uint64_t v26 = v21;
        }
        unint64_t v45 = v26 - v44;
        do
        {
          char v46 = v45;
          *v43++ = v45 | 0x80;
          BOOL v36 = v45 > 0x7F;
          v45 >>= 7;
        }

        while (v36);
        *(v43 - 1) = v46 & 0x7F;
        uint64_t v76 = v43;
        int v47 = *v20;
        unsigned int v48 = v20;
        if (*v20)
        {
          unsigned int v48 = v20;
          do
          {
            unsigned int v49 = v47 & 0xFFFFFF80;
            int v50 = *++v48;
            int v47 = v50;
          }

          while (v49 | v50);
        }

        uint64_t v51 = v48 + 1;
        size_t v52 = (int)v48 + 1 - (int)v20;
        memcpy(v43, v20, v52);
        uint64_t v76 = &v43[v52];
        uint64_t v77 = v51;
        if ((unint64_t)v51 >= v28)
        {
          uint64_t v20 = 0LL;
          uint64_t v77 = 0LL;
          uint64_t v40 = v19;
          uint64_t v30 = v21;
        }

        else
        {
          int v53 = sub_181363B00(v51, (unint64_t *)&v79);
          int v18 = v78;
          uint64_t v20 = &v77[v53];
          uint64_t v77 = v20;
          uint64_t v54 = v79;
          if (a1) {
            uint64_t v54 = -v79;
          }
          uint64_t v30 = v54 + v21;
          uint64_t v40 = v19;
        }

        uint64_t v19 = v21;
        goto LABEL_14;
      }

      if ((v42 & 1) != 0) {
        uint64_t v55 = v26;
      }
      else {
        uint64_t v55 = v19;
      }
      if ((v42 & 1) != 0) {
        uint64_t v26 = v19;
      }
      unint64_t v56 = v26 - v55;
      do
      {
        char v57 = v56;
        *v43++ = v56 | 0x80;
        BOOL v36 = v56 > 0x7F;
        v56 >>= 7;
      }

      while (v36);
      *(v43 - 1) = v57 & 0x7F;
      uint64_t v76 = v43;
      int v58 = *v18;
      unint64_t v59 = v18;
      if (*v18)
      {
        unint64_t v59 = v18;
        do
        {
          unsigned int v60 = v58 & 0xFFFFFF80;
          int v61 = *++v59;
          int v58 = v61;
        }

        while (v60 | v61);
      }

      unint64_t v62 = (unsigned __int8 *)(v59 + 1);
      size_t v63 = (int)v59 + 1 - (int)v18;
      memcpy(v43, v18, v63);
      uint64_t v76 = &v43[v63];
      int v78 = (char *)v62;
      if ((unint64_t)v62 >= v27)
      {
        int v18 = 0LL;
        int v78 = 0LL;
        uint64_t v40 = v19;
      }

      else
      {
        int v64 = sub_181363B00((char *)v62, (unint64_t *)&v79);
        uint64_t v20 = v77;
        int v18 = &v78[v64];
        int v78 = v18;
        uint64_t v65 = v79;
        if (a1) {
          uint64_t v65 = -v79;
        }
        uint64_t v40 = v65 + v19;
      }

      goto LABEL_13;
    }

    if ((a1 == 0) | v29 & 1) {
      uint64_t v32 = v26;
    }
    else {
      uint64_t v32 = v19;
    }
    if ((a1 == 0) | v29 & 1) {
      uint64_t v26 = v19;
    }
    unint64_t v33 = v26 - v32;
    uint64_t v34 = v76;
    do
    {
      char v35 = v33;
      *v34++ = v33 | 0x80;
      BOOL v36 = v33 > 0x7F;
      v33 >>= 7;
    }

    while (v36);
    *(v34 - 1) = v35 & 0x7F;
    uint64_t v76 = v34;
    uint64_t v37 = sub_1813724BC(&v76, (unsigned __int8 **)&v78, &v77);
    if ((_DWORD)v37) {
      break;
    }
    uint64_t v38 = v78;
    if ((unint64_t)v78 >= v27)
    {
      int v18 = 0LL;
      uint64_t v40 = v19;
    }

    else
    {
      int v18 = &v38[(int)sub_181363B00(v78, (unint64_t *)&v79)];
      uint64_t v39 = v79;
      if (a1) {
        uint64_t v39 = -v79;
      }
      uint64_t v40 = v39 + v19;
    }

    int v78 = v18;
    uint64_t v66 = v77;
    if ((unint64_t)v77 < v28)
    {
      uint64_t v20 = &v66[(int)sub_181363B00(v77, (unint64_t *)&v79)];
      uint64_t v77 = v20;
      uint64_t v67 = v79;
      if (a1) {
        uint64_t v67 = -v79;
      }
      uint64_t v30 = v67 + v21;
      goto LABEL_14;
    }

    uint64_t v20 = 0LL;
    uint64_t v77 = 0LL;
LABEL_13:
    uint64_t v30 = v21;
LABEL_14:
    char v29 = 0;
    BOOL v22 = v18 != 0LL;
    BOOL v23 = v20 != 0LL;
    uint64_t v26 = v19;
    uint64_t v21 = v30;
    uint64_t v19 = v40;
    if (!((unint64_t)v18 | (unint64_t)v20))
    {
      sqlite3_int64 v24 = v75;
      uint64_t v25 = v76;
      int v7 = v73;
      goto LABEL_76;
    }
  }

  uint64_t v14 = v37;
  uint64_t v70 = &off_18C4653A8;
  unsigned int v71 = v75;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70)
    {
      xmmword_18C465400(xmmword_18C468B70);
      unsigned int v71 = v75;
    }

    int v72 = v71;
    qword_18C468AC8[0] -= (int)off_18C4653B8(v71);
    --qword_18C468B10;
    off_18C4653A8(v72);
    unsigned int v71 = (void *)xmmword_18C468B70;
    int v7 = v73;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v70 = &xmmword_18C465410;
      goto LABEL_86;
    }

    LODWORD(v25) = 0;
    sqlite3_int64 v24 = 0LL;
LABEL_77:
    unsigned int v68 = v74;
  }

  else
  {
    int v7 = v73;
LABEL_86:
    unsigned int v68 = v74;
    (*v70)(v71);
    LODWORD(v25) = 0;
    sqlite3_int64 v24 = 0LL;
  }

  void *v68 = v24;
  *int v7 = (_DWORD)v25 - (_DWORD)v24;
  return v14;
}

uint64_t sub_1813724BC(_BYTE **a1, unsigned __int8 **a2, char **a3)
{
  int v6 = *a1;
  int v7 = *a2;
  int v8 = *a3;
LABEL_2:
  while (2)
  {
    int v9 = (char *)(v7 + 1);
    while (1)
    {
      unsigned int v11 = *v7;
      if (v11 == 1)
      {
        LODWORD(v13) = *v9;
        if (*v9 < 0)
        {
          LODWORD(v13) = v13 & 0x7F | (v7[2] << 7);
          if ((char)v7[2] < 0)
          {
            LODWORD(v13) = v13 & 0x3FFF | (v7[3] << 14);
            if ((char)v7[3] < 0)
            {
              LODWORD(v13) = v13 & 0x1FFFFF | (v7[4] << 21);
            }
          }
        }

        if (!(_DWORD)v13) {
          return 267LL;
        }
        unsigned int v12 = *v8;
        if (!*v8)
        {
LABEL_8:
          unsigned int v14 = 0x7FFFFFFF;
          goto LABEL_27;
        }
      }

      else if (*v7)
      {
        LODWORD(v13) = 0;
        unsigned int v12 = *v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned int v12 = *v8;
        if (!*v8) {
          goto LABEL_113;
        }
        LODWORD(v13) = 0x7FFFFFFF;
      }

      if (v12 == 1)
      {
        unsigned int v14 = v8[1];
        if (v8[1] < 0)
        {
          unsigned int v14 = v14 & 0x7F | (v8[2] << 7);
          if (v8[2] < 0)
          {
            unsigned int v14 = v14 & 0x3FFF | (v8[3] << 14);
            if (v8[3] < 0)
            {
              unsigned int v14 = v14 & 0x1FFFFF | (v8[4] << 21);
              if (v8[4] < 0) {
                unsigned int v14 = v14 & 0xFFFFFFF | ((v8[5] & 7) << 28);
              }
            }
          }
        }

        if (!v14) {
          return 267LL;
        }
      }

      else
      {
        unsigned int v14 = 0;
      }

uint64_t sub_181372A68(_BYTE **a1, int a2, int a3, int a4, unsigned __int8 **a5, unsigned __int8 **a6)
{
  int v6 = a6;
  int v9 = a1;
  size_t v10 = *a1;
  unsigned int v11 = *a5;
  unsigned int v12 = (char *)*a6;
  if (**a5 == 1)
  {
    LODWORD(v13) = v11[1];
    if ((char)v11[1] < 0)
    {
      LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
      if ((char)v11[2] < 0)
      {
        LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
        if ((char)v11[3] < 0)
        {
          LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
          if ((char)v11[4] < 0)
          {
            LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
            uint64_t v14 = 5LL;
          }

          else
          {
            uint64_t v14 = 4LL;
          }
        }

        else
        {
          uint64_t v14 = 3LL;
        }
      }

      else
      {
        uint64_t v14 = 2LL;
      }
    }

    else
    {
      uint64_t v14 = 1LL;
    }

    v11 += v14 + 1;
  }

  else
  {
    LODWORD(v13) = 0;
  }

  if (*v12 == 1)
  {
    int v15 = v12[1];
    if (v12[1] < 0)
    {
      int v15 = v15 & 0x7F | (v12[2] << 7);
      if (v12[2] < 0)
      {
        int v15 = v15 & 0x3FFF | (v12[3] << 14);
        if (v12[3] < 0)
        {
          int v15 = v15 & 0x1FFFFF | (v12[4] << 21);
          if (v12[4] < 0)
          {
            int v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
            uint64_t v16 = 5LL;
          }

          else
          {
            uint64_t v16 = 4LL;
          }
        }

        else
        {
          uint64_t v16 = 3LL;
        }
      }

      else
      {
        uint64_t v16 = 2LL;
      }
    }

    else
    {
      uint64_t v16 = 1LL;
    }

    v12 += v16 + 1;
  }

  else
  {
    int v15 = 0;
  }

  uint64_t v58 = a2;
  while (1)
  {
    while ((_DWORD)v13 != v15)
    {
      if ((int)v13 < v15)
      {
        unsigned int v35 = *v11;
        if (v35 >= 2)
        {
          do
          {
            unsigned int v37 = *++v11;
            unsigned int v36 = v37;
            int v38 = v35 & 0x80;
            LOBYTE(v35) = v37;
          }

          while (v37 & 0xFE | v38);
          unsigned int v35 = v36;
        }

        if (!v35) {
          goto LABEL_121;
        }
        LODWORD(v13) = v11[1];
        if ((char)v11[1] < 0)
        {
          LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
          if ((char)v11[2] < 0)
          {
            LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
            if ((char)v11[3] < 0)
            {
              LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
              if ((char)v11[4] < 0)
              {
                LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
                v11 += 6;
              }

              else
              {
                v11 += 5;
              }
            }

            else
            {
              v11 += 4;
            }
          }

          else
          {
            v11 += 3;
          }
        }

        else
        {
          v11 += 2;
        }
      }

      else
      {
        unsigned int v17 = *v12;
        if (v17 >= 2)
        {
          do
          {
            unsigned int v19 = *++v12;
            unsigned int v18 = v19;
            int v20 = v17 & 0x80;
            LOBYTE(v17) = v19;
          }

          while (v19 & 0xFE | v20);
          unsigned int v17 = v18;
        }

        if (!v17) {
          goto LABEL_121;
        }
        int v15 = v12[1];
        if (v12[1] < 0)
        {
          int v15 = v15 & 0x7F | (v12[2] << 7);
          if (v12[2] < 0)
          {
            int v15 = v15 & 0x3FFF | (v12[3] << 14);
            if (v12[3] < 0)
            {
              int v15 = v15 & 0x1FFFFF | (v12[4] << 21);
              if (v12[4] < 0)
              {
                int v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
                v12 += 6;
              }

              else
              {
                v12 += 5;
              }
            }

            else
            {
              v12 += 4;
            }
          }

          else
          {
            v12 += 3;
          }
        }

        else
        {
          v12 += 2;
        }
      }
    }

    char v57 = a5;
    uint64_t v21 = v10;
    if ((_DWORD)v13)
    {
      _BYTE *v10 = 1;
      uint64_t v21 = v10 + 1;
      unint64_t v13 = v13;
      do
      {
        char v22 = v13;
        *v21++ = v13 | 0x80;
        BOOL v25 = v13 > 0x7F;
        v13 >>= 7;
      }

      while (v25);
      *(v21 - 1) = v22 & 0x7F;
    }

    v11 += (int)sub_181363B00((char *)v11, (unint64_t *)&v59);
    uint64_t v23 = v59;
    v12 += (int)sub_181363B00(v12, (unint64_t *)&v59);
    int64_t v24 = v23 - 2;
    BOOL v25 = v23 < 2 || v59 < 2;
    if (v25) {
      break;
    }
    uint64_t v55 = v6;
    unint64_t v56 = v9;
    int64_t v26 = 0LL;
    int64_t v27 = v59 - 2;
LABEL_49:
    int64_t v28 = v24 + v58;
    while (1)
    {
      int64_t v29 = v26;
      if (v27 == v28 || v27 <= v28 && !a4 && v27 > v24)
      {
        if (a3) {
          int64_t v26 = v24;
        }
        else {
          int64_t v26 = v27;
        }
        unint64_t v30 = v26 - v29 + 2;
        do
        {
          char v31 = v30;
          *v21++ = v30 | 0x80;
          BOOL v25 = v30 > 0x7F;
          v30 >>= 7;
        }

        while (v25);
        size_t v10 = 0LL;
        *(v21 - 1) = v31 & 0x7F;
      }

      if (a3) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v27 <= v28;
      }
      char v33 = !v32;
      if (v27 > v24 && (v33 & 1) != 0)
      {
        unsigned int v34 = *v11;
        if (v34 > 1)
        {
          v11 += (int)sub_181363B00((char *)v11, (unint64_t *)&v59);
          int64_t v24 = v24 + v59 - 2;
          goto LABEL_49;
        }

        if (!v10) {
          size_t v10 = v21;
        }
        goto LABEL_81;
      }

      v12 += (int)sub_181363B00(v12, (unint64_t *)&v59);
      int64_t v27 = v27 + v59 - 2;
    }

    unsigned int v34 = *v11;
    if (!v10) {
      size_t v10 = v21;
    }
    if (v34 < 2)
    {
LABEL_81:
      int v6 = v55;
      int v9 = v56;
      a5 = v57;
      goto LABEL_86;
    }

    int v6 = v55;
    int v9 = v56;
    a5 = v57;
    do
    {
      unsigned int v40 = *++v11;
      unsigned int v39 = v40;
      int v41 = v34 & 0x80;
      LOBYTE(v34) = v40;
    }

    while (v40 & 0xFE | v41);
    unsigned int v34 = v39;
LABEL_86:
    unsigned int v42 = *v12;
    if (v42 >= 2)
    {
      do
      {
        unsigned int v44 = *++v12;
        unsigned int v43 = v44;
        int v45 = v42 & 0x80;
        LOBYTE(v42) = v44;
      }

      while (v44 & 0xFE | v45);
      unsigned int v42 = v43;
    }

    if (!v34) {
      goto LABEL_121;
    }
    if (!v42)
    {
      uint64_t v51 = (unsigned __int8 *)(v12 + 1);
      goto LABEL_124;
    }

    LODWORD(v13) = v11[1];
    if ((char)v11[1] < 0)
    {
      LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
      if ((char)v11[2] < 0)
      {
        LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
        if ((char)v11[3] < 0)
        {
          LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
          if ((char)v11[4] < 0)
          {
            LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
            uint64_t v46 = 5LL;
          }

          else
          {
            uint64_t v46 = 4LL;
          }
        }

        else
        {
          uint64_t v46 = 3LL;
        }
      }

      else
      {
        uint64_t v46 = 2LL;
      }
    }

    else
    {
      uint64_t v46 = 1LL;
    }

    int v15 = v12[1];
    if (v12[1] < 0)
    {
      int v15 = v15 & 0x7F | (v12[2] << 7);
      if (v12[2] < 0)
      {
        int v15 = v15 & 0x3FFF | (v12[3] << 14);
        if (v12[3] < 0)
        {
          int v15 = v15 & 0x1FFFFF | (v12[4] << 21);
          if (v12[4] < 0)
          {
            int v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
            uint64_t v47 = 5LL;
          }

          else
          {
            uint64_t v47 = 4LL;
          }
        }

        else
        {
          uint64_t v47 = 3LL;
        }
      }

      else
      {
        uint64_t v47 = 2LL;
      }
    }

    else
    {
      uint64_t v47 = 1LL;
    }

    v11 += v46 + 1;
    v12 += v47 + 1;
  }

  size_t v10 = v21;
  a5 = v57;
LABEL_121:
  int v48 = *v12;
  if (*v12)
  {
    do
    {
      unsigned int v49 = v48 & 0xFFFFFF80;
      int v50 = *++v12;
      int v48 = v50;
    }

    while (v49 | v50);
  }

  LOBYTE(v34) = *v11;
  uint64_t v51 = (unsigned __int8 *)(v12 + 1);
  if (*v11)
  {
LABEL_124:
    unsigned int v34 = (char)v34;
    do
    {
      unsigned int v52 = v34 & 0xFFFFFF80;
      unsigned int v53 = (char)*++v11;
      unsigned int v34 = v53;
    }

    while (v52 | v53);
  }

  *a5 = v11 + 1;
  *int v6 = v51;
  if ((_BYTE *)*v9 == v10) {
    return 0LL;
  }
  _BYTE *v10 = 0;
  *int v9 = v10 + 1;
  return 1LL;
}

uint64_t sub_18137308C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a1;
  if (a2)
  {
    if (*(unsigned __int8 *)(a1 + 76) == *(unsigned __int8 *)(v4 + 463))
    {
      int v5 = *(_DWORD *)(a3 + 80);
      if ((v5 - 5) >= 0xFFFFFFFC)
      {
        if (v5 < 1)
        {
          LODWORD(v6) = 0;
        }

        else
        {
          if (*(_DWORD *)(a3 + 104)) {
            goto LABEL_31;
          }
          uint64_t v6 = *(void *)(a3 + 120);
          if (v6)
          {
            if (!*(_DWORD *)(v6 + 52)) {
              goto LABEL_31;
            }
            LODWORD(v6) = 1;
          }

          int v7 = v5 & ~(v5 >> 31);
          if (v7 != 1)
          {
            if (*(_DWORD *)(a3 + 144)) {
              goto LABEL_31;
            }
            uint64_t v8 = *(void *)(a3 + 160);
            if (v8)
            {
              if (!*(_DWORD *)(v8 + 52)) {
                goto LABEL_31;
              }
              LODWORD(v6) = 1;
            }

            if (v7 != 2)
            {
              if (*(_DWORD *)(a3 + 184)) {
                goto LABEL_31;
              }
              uint64_t v9 = *(void *)(a3 + 200);
              if (v9)
              {
                if (!*(_DWORD *)(v9 + 52)) {
                  goto LABEL_31;
                }
                LODWORD(v6) = 1;
              }

              if (v7 != 3)
              {
                if (*(_DWORD *)(a3 + 224)) {
                  goto LABEL_31;
                }
                uint64_t v10 = *(void *)(a3 + 240);
                if (v10)
                {
                  if (!*(_DWORD *)(v10 + 52)) {
                    goto LABEL_31;
                  }
                  LODWORD(v6) = 1;
                }
              }
            }
          }
        }

        if ((_DWORD)v6)
        {
          if (*(_DWORD *)(a3 + 84) >= *(_DWORD *)(v4 + 48)) {
            int v11 = -1;
          }
          else {
            int v11 = *(_DWORD *)(a3 + 84);
          }
          int v40 = v11;
          if (*(int *)(a3 + 80) < 1)
          {
            uint64_t result = 0LL;
            goto LABEL_75;
          }

          uint64_t v12 = 0LL;
          while (1)
          {
            unsigned int v17 = *(uint64_t **)(a3 + 40 * v12 + 120);
            if (v17)
            {
              uint64_t v18 = a3 + 40 * v12;
              unsigned int v19 = *(const void **)(v18 + 88);
              int v20 = *(_DWORD *)(v18 + 96);
              uint64_t v21 = *((unsigned int *)v17 + 2);
              if (*(_BYTE *)(v4 + 463)) {
                char v22 = sub_181364E58;
              }
              else {
                char v22 = sub_181364EB0;
              }
              uint64_t result = sub_181363C00(v4, v17, v19, v20);
              if ((_DWORD)result) {
                goto LABEL_75;
              }
              uint64_t v41 = v12;
              unsigned int v43 = v17;
              if ((int)v21 <= 0)
              {
                *((_DWORD *)v17 + 3) = 0;
              }

              else
              {
                uint64_t v23 = 0LL;
                uint64_t v24 = *v17;
                while (1)
                {
                  uint64_t v25 = *(void *)(v24 + 8 * v23);
                  if (!*(void *)(v25 + 40)) {
                    break;
                  }
                  int v26 = *(_DWORD *)(v25 + 72);
                  int64_t v27 = *(const void **)(v25 + 80);
                  int v28 = v26 >= v20 ? v20 : *(_DWORD *)(v25 + 72);
                  if (memcmp(v27, v19, v28) || v26 != v20) {
                    break;
                  }
                  if (v21 == ++v23)
                  {
                    LODWORD(v23) = v21;
                    break;
                  }
                }

                *((_DWORD *)v43 + 3) = v23;
                if ((int)v23 >= 1)
                {
                  uint64_t v30 = 0LL;
                  uint64_t v31 = 0LL;
                  while (1)
                  {
                    uint64_t result = sub_181364F08(v4, *(void *)(*v43 + 8 * v31));
                    if ((_DWORD)result) {
                      break;
                    }
                    ++v31;
                    v30 += 8LL;
                    if (v31 >= *((int *)v43 + 3))
                    {
                      if ((v31 & 0xFFFFFFFE) != 0)
                      {
                        uint64_t v32 = 0LL;
                        uint64_t v33 = v31 - 1;
                        uint64_t v42 = *v43;
                        uint64_t v34 = *v43 + v30;
                        do
                        {
                          uint64_t v35 = v33--;
                          if (v35 < v31)
                          {
                            uint64_t v36 = *(void *)(v42 + 8 * v33);
                            uint64_t v37 = v32;
                            do
                            {
                              uint64_t v38 = v34 + v37;
                              if ((v22(v36, *(void *)(v34 + v37 - 8)) & 0x80000000) != 0) {
                                break;
                              }
                              int8x16_t v39 = *(int8x16_t *)(v38 - 16);
                              *(int8x16_t *)(v38 - 16) = vextq_s8(v39, v39, 8uLL);
                              uint64_t v36 = v39.i64[0];
                              v37 += 8LL;
                            }

                            while (v37 != 8);
                          }

                          v32 -= 8LL;
                        }

                        while (v35 > 1);
                      }

                      goto LABEL_42;
                    }
                  }

uint64_t sub_1813733EC(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v109 = *MEMORY[0x1895F89C0];
  if (!*a3)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (BOOL *)(a2 + 48);
    if (!*(_BYTE *)(a2 + 48))
    {
      uint64_t v6 = (unsigned __int8 *)result;
      int v7 = *(unsigned __int8 *)(result + 76);
      *(_BYTE *)(a2 + 49) = 1;
      switch(*(_DWORD *)a2)
      {
        case 1:
        case 3:
          uint64_t v9 = *(void *)(a2 + 16);
          uint64_t v8 = *(void *)(a2 + 24);
          if (*(_BYTE *)(v9 + 50))
          {
            uint64_t result = sub_1813733EC(result, *(void *)(a2 + 24), a3);
            *(void *)(v3 + 40) = *(void *)(v8 + 40);
            *(_BYTE *)(v3 + 48) = *(_BYTE *)(v8 + 48);
          }

          else
          {
            int v35 = *(unsigned __int8 *)(v8 + 50);
            uint64_t result = sub_1813733EC(result, *(void *)(a2 + 16), a3);
            if (v35)
            {
              *(void *)(v3 + 40) = *(void *)(v9 + 40);
              *(_BYTE *)(v3 + 48) = *(_BYTE *)(v9 + 48);
            }

            else
            {
              int v88 = v6;
              uint64_t v89 = v8;
              while (1)
              {
                uint64_t result = sub_1813733EC(v88, v89, a3);
                if (*(_BYTE *)(v9 + 48) || *(_BYTE *)(v8 + 48))
                {
                  uint64_t v90 = *(void *)(v9 + 40);
                  BOOL v94 = 1;
                  goto LABEL_194;
                }

                uint64_t v90 = *(void *)(v9 + 40);
                if (*a3) {
                  break;
                }
                uint64_t v91 = *(void *)(v8 + 40);
                BOOL v92 = v90 <= v91;
                if (v90 == v91) {
                  int v93 = 0;
                }
                else {
                  int v93 = -1;
                }
                if (!v92) {
                  int v93 = 1;
                }
                if (v7) {
                  int v93 = -v93;
                }
                if (!v93) {
                  break;
                }
                if (v93 >= 0) {
                  uint64_t v89 = v8;
                }
                else {
                  uint64_t v89 = v9;
                }
                int v88 = v6;
              }

              BOOL v94 = *(unsigned __int8 *)(v8 + 48) != 0;
LABEL_194:
              *(void *)(v3 + 40) = v90;
              *(_BYTE *)(v3 + 48) = v94;
              if (*(_DWORD *)v3 == 1 && v94)
              {
                uint64_t v96 = *(void *)(v8 + 32);
                if (*(void *)v96 && !*a3)
                {
                  do
                  {
                    if (*(_BYTE *)(v8 + 48)) {
                      break;
                    }
                    bzero(*(void **)(v96 + 40), *(int *)(v96 + 48));
                    uint64_t result = sub_1813733EC(v6, v8, a3);
                  }

                  while (!*a3);
                }

                uint64_t v97 = *(void *)(v9 + 32);
                if (v97 && *(void *)v97 && !*a3)
                {
                  do
                  {
                    if (*(_BYTE *)(v9 + 48)) {
                      break;
                    }
                    bzero(*(void **)(v97 + 40), *(int *)(v97 + 48));
                    uint64_t result = sub_1813733EC(v6, v9, a3);
                  }

                  while (!*a3);
                }

                *(_BYTE *)(v9 + 48) = 1;
                *(_BYTE *)(v8 + 48) = 1;
              }
            }
          }

          return result;
        case 2:
          uint64_t v14 = *(void *)(a2 + 16);
          uint64_t v15 = *(void *)(a2 + 24);
          if (!*(_BYTE *)(v15 + 49)) {
            sub_1813733EC(result, *(void *)(a2 + 24), a3);
          }
          uint64_t result = sub_1813733EC(v6, v14, a3);
          char v16 = *(_BYTE *)(v14 + 48);
          if (!v16)
          {
            if (*a3)
            {
              char v16 = 0;
            }

            else
            {
              do
              {
                if (*(_BYTE *)(v15 + 48)) {
                  break;
                }
                uint64_t v17 = *(void *)(v14 + 40);
                uint64_t v18 = *(void *)(v15 + 40);
                BOOL v26 = v17 < v18;
                BOOL v19 = v17 > v18;
                int v20 = v26;
                if (v7) {
                  BOOL v19 = v20;
                }
                if (!v19) {
                  break;
                }
                uint64_t result = sub_1813733EC(v6, v15, a3);
              }

              while (!*a3);
              char v16 = *(_BYTE *)(v14 + 48);
            }
          }

          *(void *)(v3 + 40) = *(void *)(v14 + 40);
          *(_BYTE *)(v3 + 48) = v16;
          return result;
        case 4:
          uint64_t v22 = *(void *)(a2 + 16);
          uint64_t v21 = *(void *)(a2 + 24);
          if (v7) {
            int v23 = -1;
          }
          else {
            int v23 = 1;
          }
          uint64_t v24 = *(void *)(v22 + 40);
          uint64_t v25 = *(void *)(v21 + 40);
          BOOL v26 = v24 <= v25;
          if (v24 == v25) {
            int v27 = 0;
          }
          else {
            int v27 = -1;
          }
          if (!v26) {
            int v27 = 1;
          }
          uint64_t v28 = *(void *)(a2 + 16);
          if (!*(_BYTE *)(v21 + 48))
          {
            int v29 = v27 * v23;
            if (*(_BYTE *)(v22 + 48) || (uint64_t v28 = *(void *)(v3 + 16), (v29 & 0x80000000) == 0))
            {
              BOOL v30 = !*(_BYTE *)(v22 + 48) && v29 <= 0;
              uint64_t v28 = *(void *)(v3 + 24);
              if (v30)
              {
                sub_1813733EC(result, *(void *)(v3 + 16), a3);
                uint64_t v28 = v21;
              }
            }
          }

          uint64_t result = sub_1813733EC(v6, v28, a3);
          char v31 = *(_BYTE *)(v22 + 48);
          if (v31) {
            char v31 = *(_BYTE *)(v21 + 48) != 0;
          }
          *uint64_t v4 = v31;
          uint64_t v32 = *(void *)(v22 + 40);
          if (*(_BYTE *)(v21 + 48)) {
            goto LABEL_60;
          }
          uint64_t v33 = *(void *)(v21 + 40);
          if (v32 == v33) {
            int v34 = 0;
          }
          else {
            int v34 = -1;
          }
          if (v32 > v33) {
            int v34 = 1;
          }
          if (!*(_BYTE *)(v22 + 48) && v34 * v23 < 0) {
LABEL_60:
          }
            *(void *)(v3 + 40) = v32;
          else {
            *(void *)(v3 + 40) = v33;
          }
          return result;
        default:
          uint64_t v10 = *(void *)(a2 + 32);
          if (!*(_DWORD *)(v10 + 32)) {
            goto LABEL_15;
          }
          uint64_t v11 = *(void *)(v10 + 40);
          if (!v11) {
            goto LABEL_15;
          }
          uint64_t v12 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_14;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
          --qword_18C468B10;
          uint64_t result = off_18C4653A8(v11);
          uint64_t v11 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v12 = &xmmword_18C465410;
LABEL_14:
            uint64_t result = (*v12)(v11);
          }

BOOL sub_181373E80(uint64_t a1, int *a2)
{
  int v2 = *a2;
  int v41 = v2;
  if (v2)
  {
    BOOL v3 = 0;
    return !v2 && v3;
  }

  if (*(void *)(a1 + 40))
  {
    int v41 = sub_1813746B0(0LL, a1);
    if (!v41)
    {
      int v45 = 0;
      if (!*(void *)(a1 + 40)) {
        goto LABEL_50;
      }
      uint64_t v6 = *(void *)a1;
      int v7 = *(void **)(*(void *)a1 + 72LL);
      uint64_t v8 = *v7;
      sqlite3_int64 v9 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 0);
      int v10 = *(_DWORD *)(v6 + 48);
      if (v10 >= 1)
      {
        unint64_t v11 = v9;
        int64_t v12 = 0LL;
        int v39 = v7;
        do
        {
          while (*(_BYTE *)(*(void *)(v6 + 64) + v12))
          {
            if (++v12 >= v10) {
              goto LABEL_49;
            }
          }

          int64_t v40 = v12 + 1;
          int v13 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), (int)v12 + 1);
          uint64_t v14 = *(unsigned int *)(a1 + 32);
          uint64_t v15 = *v7;
          __s1 = 0LL;
          int v16 = (*(uint64_t (**)(void *, const unsigned __int8 *, uint64_t, void **))(v15 + 24))( v7,  v13,  0xFFFFFFFFLL,  &__s1);
          uint64_t v17 = v7;
          uint64_t v18 = __s1;
          if (v16)
          {
            int v19 = v16;
            int v45 = v16;
          }

          else
          {
            *(void *)__s1 = v17;
            uint64_t v18 = __s1;
            if (*(int *)v15 >= 1
              && (v20 = (*(uint64_t (**)(void *, uint64_t))(v15 + 48))(__s1, v14), uint64_t v18 = __s1, v20))
            {
              int v19 = v20;
              (*(void (**)(void *))(v15 + 32))(__s1);
              uint64_t v18 = 0LL;
              int v45 = v19;
            }

            else
            {
              do
              {
                int v44 = 0;
                uint64_t v43 = 0LL;
                int v42 = 0;
                int v21 = (*(uint64_t (**)(void *, void **, int *, char *, uint64_t *, int *))(v8 + 40))( v18,  &__s1,  &v44,  (char *)&v43 + 4,  &v43,  &v42);
                int v19 = v21;
                int v45 = v21;
                uint64_t v22 = *(int ***)(a1 + 40);
                if (v22) {
                  BOOL v23 = v21 == 0;
                }
                else {
                  BOOL v23 = 0;
                }
                if (v23)
                {
                  int v19 = 0;
                  do
                  {
                    uint64_t v24 = *((unsigned int *)v22 + 2);
                    BOOL v25 = v12 != v24 && (int)v24 < *(_DWORD *)(v6 + 48);
                    if (!v25
                      && ((BOOL v26 = *v22, v27 = v42, (*v22)[4]) ? (v28 = v42 == 0) : (v28 = 1),
                          v28
                       && ((v29 = v26[2], (_DWORD)v29 == v44) || ((int)v29 < v44 ? (BOOL v30 = v26[3] == 0) : (BOOL v30 = 1), !v30)))
                      && !memcmp(__s1, *(const void **)v26, v29))
                    {
                      sub_18137549C(v22 + 3, v11, v12, v27, &v45);
                      int v19 = v45;
                      int v31 = v45;
                    }

                    else
                    {
                      int v31 = 0;
                    }

                    uint64_t v22 = (int **)v22[2];
                    if (v22) {
                      BOOL v32 = v31 == 0;
                    }
                    else {
                      BOOL v32 = 0;
                    }
                  }

                  while (v32);
                }
              }

              while (!v19);
            }
          }

          if (v18) {
            (*(void (**)(void *))(v8 + 32))(v18);
          }
          if (v19 != 101) {
            goto LABEL_51;
          }
          int v45 = 0;
          int v10 = *(_DWORD *)(v6 + 48);
          int v7 = v39;
          ++v12;
        }

        while (v40 < v10);
      }

uint64_t sub_181374204(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(char **)(a2 + 16);
  int v7 = *(char **)a2;
  if ((v6 || (uint64_t v6 = *(char **)a2, v7)) && (v8 = *(int *)(a2 + 8), v6 < &v7[v8]))
  {
    uint64_t result = sub_181363B00(v6, &v17);
    sqlite3_int64 v9 = &v6[(int)result];
    if (*(_BYTE *)(v5 + 463) && *(void *)(a2 + 16)) {
      uint64_t v10 = *(void *)(a2 + 24) - v17;
    }
    else {
      uint64_t v10 = *(void *)(a2 + 24) + v17;
    }
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 40) = v9;
    int v11 = *v9;
    unint64_t v12 = (unint64_t)&v6[(int)result];
    if (*v9)
    {
      unint64_t v12 = (unint64_t)&v6[(int)result];
      do
      {
        unsigned int v13 = v11 & 0xFFFFFF80;
        int v14 = *(char *)++v12;
        int v11 = v14;
      }

      while (v13 | v14);
    }

    uint64_t v15 = (char *)(v12 + 1);
    *(_DWORD *)(a2 + 48) = v12 + 1 - (_DWORD)v9;
    if (v12 + 1 < (unint64_t)&v7[v8])
    {
      int v16 = &v7[v8 + ~v12];
      while (!*v15)
      {
        ++v15;
        if (!--v16)
        {
          uint64_t v15 = &v7[v8];
          break;
        }
      }
    }

    *(void *)(a2 + 16) = v15;
    *a3 = 0;
  }

  else
  {
    *a3 = 1;
  }

  return result;
}

uint64_t sub_181374320(uint64_t a1, uint64_t a2, void *a3, void *a4, _DWORD *a5)
{
  uint64_t v5 = *(int *)(a2 + 12);
  if (*(_BYTE *)(a1 + 463)) {
    uint64_t v6 = sub_181364E58;
  }
  else {
    uint64_t v6 = sub_181364EB0;
  }
  if (!(_DWORD)v5)
  {
    uint64_t result = 0LL;
    *a4 = 0LL;
    return result;
  }

  int v7 = *(uint64_t **)a2;
  if (!*(void *)(**(void **)a2 + 112LL))
  {
LABEL_63:
    uint64_t result = 0LL;
    *a4 = 0LL;
    return result;
  }

  uint64_t v8 = a1;
  while (1)
  {
    uint64_t v9 = *(void *)(*v7 + 128);
    uint64_t result = sub_181364FCC(v8, *v7, &v47, &v46);
    BOOL v11 = (_DWORD)result || (int)v5 < 2;
    uint64_t v45 = v9;
    if (v11)
    {
      if ((_DWORD)result) {
        return result;
      }
      LODWORD(v12) = 1;
    }

    else
    {
      uint64_t v12 = 1LL;
      while (1)
      {
        uint64_t v13 = v7[v12];
        if (!*(void *)(v13 + 112) || *(void *)(v13 + 128) != v9) {
          break;
        }
        uint64_t result = sub_181364FCC(v8, v13, 0LL, 0LL);
        ++v12;
        if ((_DWORD)result) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v12 < v5;
        }
        if (!v14)
        {
          if ((_DWORD)result) {
            return result;
          }
          break;
        }
      }
    }

    uint64_t v15 = v12 - ((_DWORD)v12 == (_DWORD)v5);
    if ((int)v15 >= 1)
    {
      int v16 = *(uint64_t **)a2;
      uint64_t v17 = *(void *)a2 + 8LL * v15 - 8;
      do
      {
        int v18 = v15--;
        if ((int)v5 > v18)
        {
          uint64_t v19 = v16[v15];
          int v20 = (int8x16_t *)v17;
          uint64_t v21 = v15;
          do
          {
            if ((v6(v19, v20->i64[1]) & 0x80000000) != 0) {
              break;
            }
            ++v21;
            int8x16_t v22 = *v20;
            *int v20 = vextq_s8(*v20, *v20, 8uLL);
            int v20 = (int8x16_t *)((char *)v20 + 8);
            uint64_t v19 = v22.i64[0];
          }

          while (v21 < v5 - 1);
        }

        v17 -= 8LL;
      }

      while (v18 > 1);
    }

    uint64_t v23 = v46;
    if ((int)v46 >= 1)
    {
      if (*(void *)(*v7 + 64)) {
        break;
      }
    }

uint64_t sub_1813746B0(_DWORD *a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 11)) {
    return 0LL;
  }
  uint64_t v4 = sub_18136F298((uint64_t *)a2);
  if ((_DWORD)v4)
  {
LABEL_3:
    if (a1)
    {
      a1[9] = v4;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
      {
        switch((_DWORD)v4)
        {
          case 0x204:
            uint64_t v5 = "abort due to ROLLBACK";
            break;
          case 0x65:
            uint64_t v5 = "no more rows available";
            break;
          case 0x64:
            uint64_t v5 = "another row available";
            break;
          default:
            else {
              uint64_t v5 = off_189B6EC30[v4];
            }
            break;
        }

        sub_1812D7A8C((uint64_t)a1, v5, -1, 1u, 0LL);
      }
    }

    return v4;
  }

  uint64_t v6 = *(void *)a2;
  ++*(_DWORD *)(*(void *)a2 + 104LL);
  int v7 = *(void **)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 48);
  if (!sub_1812B2390((uint64_t)v7, 0))
  {
    uint64_t v9 = v7[16];
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v9, v8);
    }

    else
    {
      *(void *)uint64_t v9 = v8;
      *(_WORD *)(v9 + 20) = 4;
    }

    uint64_t v10 = *(void *)(*v7 + 24LL);
    if (v10) {
      xmmword_18C465410(v10);
    }
  }

  *(_BYTE *)(a2 + 11) = 0;
  int v11 = sqlite3_step(*(sqlite3_stmt **)(a2 + 16));
  uint64_t v4 = 0LL;
  --*(_DWORD *)(v6 + 104);
  if (v11 != 100)
  {
    uint64_t v4 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 16));
    if ((_DWORD)v4) {
      goto LABEL_3;
    }
    if (!*(void *)(*(void *)a2 + 80LL))
    {
      *(_BYTE *)(a2 + 10) = 1;
      uint64_t v4 = 267LL;
      goto LABEL_3;
    }

    return 0LL;
  }

  return v4;
}

uint64_t sub_18137485C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3) {
    return 1LL;
  }
  uint64_t v5 = a2;
  switch(*(_DWORD *)a2)
  {
    case 1:
    case 3:
      if (!sub_18137485C(a1, *(void *)(a2 + 16), a3)
        || !sub_18137485C(a1, *(void *)(v5 + 24), a3))
      {
        goto LABEL_88;
      }

      if (*a3) {
        return 1LL;
      }
      if (*(_DWORD *)v5 != 1) {
        return 1LL;
      }
      int v7 = *(_DWORD **)(v5 + 8);
      if (v7)
      {
        if (*v7 == 1) {
          return 1LL;
        }
      }

      uint64_t v8 = *(void *)(v5 + 16);
      if (v8)
      {
        uint64_t v9 = 0LL;
        uint64_t v10 = v5;
        do
        {
          uint64_t v11 = v8;
          v9 += *(int *)(*(void *)(*(void *)(v10 + 24) + 32LL) + 48LL);
          uint64_t v8 = *(void *)(v8 + 16);
          uint64_t v10 = v11;
        }

        while (v8);
      }

      else
      {
        uint64_t v9 = 0LL;
        uint64_t v11 = v5;
      }

      uint64_t v43 = *(int *)(*(void *)(v11 + 32) + 48LL);
      if (sqlite3_initialize() || (uint64_t v50 = sub_18126F0AC(2 * (v9 + v43))) == 0)
      {
        *a3 = 7;
        goto LABEL_88;
      }

      int v51 = (char *)v50;
      uint64_t v52 = *(void *)(v11 + 32);
      int v79 = *(unsigned __int8 **)(v52 + 40);
      LODWORD(v78) = *(_DWORD *)(v52 + 80);
      uint64_t v53 = *(void *)(v11 + 8);
      if (!v53) {
        goto LABEL_132;
      }
      while (*(_DWORD *)v53 == 1)
      {
        int v54 = sub_181375764(*(_DWORD *)(v53 + 4), v51, &v79, &v78, *(void *)(*(void *)(v53 + 24) + 32LL));
        uint64_t v53 = *(void *)(v53 + 8);
        if (v54) {
          BOOL v55 = v53 == 0;
        }
        else {
          BOOL v55 = 1;
        }
        if (v55)
        {
          int v56 = v54;
          goto LABEL_133;
        }
      }

uint64_t sub_18137549C(int **a1, unint64_t a2, int64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v8 = a2;
  uint64_t v10 = *a1;
  BOOL v14 = v10;
  if (v10)
  {
    uint64_t v11 = *((void *)v10 + 3);
    a2 -= v11;
    if (v8 == v11) {
      goto LABEL_6;
    }
    ++*v10;
  }

  int v12 = sub_1813755BC(&v14, a2);
  uint64_t v10 = v14;
  if (v12) {
    goto LABEL_15;
  }
  *((_OWORD *)v14 + 2) = xmmword_1813CDE20;
  *((void *)v10 + 3) = v8;
LABEL_6:
  if (a3 < 1)
  {
    if (a3 < 0)
    {
      int v12 = 0;
      goto LABEL_15;
    }

    goto LABEL_11;
  }

  if (*((void *)v10 + 4) == a3)
  {
LABEL_11:
    int v12 = sub_1813755BC(&v14, a4 - *((void *)v10 + 5) + 2);
    uint64_t v10 = v14;
    if (!v12) {
      *((void *)v14 + 5) = a4;
    }
    goto LABEL_15;
  }

  int v12 = sub_1813755BC(&v14, 1uLL);
  if (v12)
  {
    uint64_t v10 = v14;
    goto LABEL_15;
  }

  int v12 = sub_1813755BC(&v14, a3);
  uint64_t v10 = v14;
  if (!v12)
  {
    *((void *)v14 + 4) = a3;
    *((void *)v10 + 5) = 0LL;
    goto LABEL_11;
  }

uint64_t sub_1813755BC(int **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v10 = sub_18126F0AC(148LL);
    if (!v10) {
      return 7LL;
    }
    uint64_t v4 = (int *)v10;
    int v5 = 0;
    *(_DWORD *)(v10 + 16) = 100;
    uint64_t v9 = v10 + 48;
    *(void *)(v10 + 8) = v10 + 48;
    *(_DWORD *)uint64_t v10 = 0;
    goto LABEL_19;
  }

  int v5 = *v4;
  uint64_t v6 = v4[4];
  if (*v4 + 11 <= (int)v6)
  {
    uint64_t v9 = *((void *)v4 + 1);
    goto LABEL_19;
  }

  if (!sqlite3_initialize())
  {
    uint64_t v11 = 2 * v6;
    uint64_t v12 = sub_18127D33C((uint64_t)v4, v11 + 48);
    if (v12)
    {
      uint64_t v4 = (int *)v12;
      *(_DWORD *)(v12 + 16) = v11;
      uint64_t v9 = v12 + 48;
      *(void *)(v12 + 8) = v12 + 48;
      int v5 = *(_DWORD *)v12;
LABEL_19:
      uint64_t v13 = 0LL;
      uint64_t v14 = v9 + v5;
      do
      {
        char v15 = a2;
        *(_BYTE *)(v14 + v13++) = a2 | 0x80;
        BOOL v16 = a2 > 0x7F;
        a2 >>= 7;
      }

      while (v16);
      uint64_t result = 0LL;
      *(_BYTE *)(v14 + v13 - 1) = v15 & 0x7F;
      uint64_t v17 = *v4;
      *uint64_t v4 = v17 + v13;
      *(_BYTE *)(*((void *)v4 + 1) + v17 + v13) = 0;
      goto LABEL_22;
    }
  }

  uint64_t v4 = *a1;
  if (!*a1) {
    goto LABEL_16;
  }
  int v7 = (void (**)(int *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
    --qword_18C468B10;
    off_18C4653A8(v4);
    uint64_t v4 = (int *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v7 = (void (**)(int *))&xmmword_18C465410;
      goto LABEL_10;
    }

uint64_t sub_181375764(int a1, char *a2, unsigned __int8 **a3, _DWORD *a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(a5 + 80) + a1;
  int v10 = *a4 + a1;
  uint64_t v11 = *(_BYTE **)(a5 + 40);
  int v30 = v11;
  unsigned int v31 = v11;
  BOOL v34 = a2;
  int v35 = a2;
  uint64_t v12 = *a3;
  sub_181372A68(&v34, v9, 0, 0, a3, &v31);
  uint64_t v13 = v34;
  BOOL v32 = v34;
  int v33 = v34;
  *a3 = v12;
  unsigned int v31 = v11;
  sub_181372A68(&v33, v10, 1, 0, &v31, a3);
  if (v13 == a2)
  {
    if (v33 == a2) {
      return 0LL;
    }
    int v15 = *a2;
    LODWORD(v16) = (_DWORD)a2;
    if (*a2)
    {
      BOOL v16 = a2;
      do
      {
        unsigned int v17 = v15 & 0xFFFFFF80;
        int v18 = *++v16;
        int v15 = v18;
      }

      while (v17 | v18);
    }

    goto LABEL_12;
  }

  if (v33 == v13)
  {
    int v19 = *a2;
    LODWORD(v16) = (_DWORD)a2;
    if (*a2)
    {
      BOOL v16 = a2;
      do
      {
        unsigned int v20 = v19 & 0xFFFFFF80;
        int v21 = *++v16;
        int v19 = v21;
      }

      while (v20 | v21);
    }

uint64_t sub_1813758F8(uint64_t a1, sqlite3_stmt *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v25 = a2;
  BOOL v27 = a2;
  uint64_t v8 = sub_1813636A8((uint64_t *)a1, 7, &pStmt, (uint64_t)&v27);
  int v9 = pStmt;
  if ((_DWORD)v8)
  {
LABEL_2:
    sqlite3_reset(v9);
    return v8;
  }

  if (sqlite3_step(pStmt) != 100)
  {
    uint64_t v12 = v9;
    return sqlite3_reset(v12);
  }

  if (*(void *)(a1 + 88)) {
    uint64_t v11 = sqlite3_column_int(v9, *(_DWORD *)(a1 + 48) + 1);
  }
  else {
    uint64_t v11 = 0LL;
  }
  sqlite3_int64 v13 = sqlite3_column_int64(v9, 0);
  sqlite3_int64 v14 = v13;
  sqlite3_int64 v15 = *(void *)(a1 + 512);
  if (v15 > v13
    || v15 == v13 && !*(_DWORD *)(a1 + 524)
    || *(_DWORD *)(a1 + 520) != (_DWORD)v11
    || *(_DWORD *)(a1 + 508) > *(_DWORD *)(a1 + 504))
  {
    uint64_t v8 = sub_1813767BC(a1);
    if ((_DWORD)v8) {
      goto LABEL_2;
    }
  }

  uint64_t v16 = 0LL;
  *(void *)(a1 + 512) = v14;
  *(_DWORD *)(a1 + 520) = v11;
  *(_DWORD *)(a1 + 524) = 1;
  unsigned int v17 = a4;
  while (v16 + 1 <= *(int *)(a1 + 48))
  {
    if (*(_BYTE *)(*(void *)(a1 + 64) + v16))
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      int v18 = sqlite3_column_text(v9, (int)v16 + 1);
      uint64_t v8 = sub_1813787D8(a1, v11, (uint64_t)v18, -1, v17);
      a4[*(int *)(a1 + 48)] += sqlite3_column_bytes(v9, v16 + 1);
    }

    ++v16;
    ++v17;
    if ((_DWORD)v8) {
      goto LABEL_2;
    }
  }

  uint64_t v8 = sqlite3_reset(v9);
  if (!(_DWORD)v8)
  {
    BOOL v27 = a2;
    if (*(void *)(a1 + 80))
    {
      --*a3;
LABEL_25:
      if (!*(_BYTE *)(a1 + 462)) {
        return 0LL;
      }
      goto LABEL_26;
    }

    uint64_t v20 = sub_1813636A8((uint64_t *)a1, 1, &pStmt, (uint64_t)&v27);
    if ((_DWORD)v20) {
      return v20;
    }
    int v21 = pStmt;
    if (sqlite3_step(pStmt) == 100)
    {
      int v22 = sqlite3_column_int(v21, 0);
      uint64_t v8 = sqlite3_reset(v21);
      if ((_DWORD)v8) {
        return v8;
      }
      if (v22)
      {
        uint64_t v8 = sub_1813786AC(a1, 1);
        *a3 = 0;
        bzero(a4, 8LL * *(int *)(a1 + 48) + 8);
        return v8;
      }
    }

    else
    {
      uint64_t v8 = sqlite3_reset(v21);
      if ((_DWORD)v8) {
        return v8;
      }
    }

    uint64_t v23 = *(void *)(a1 + 80);
    --*a3;
    if (v23) {
      goto LABEL_25;
    }
    uint64_t v8 = sub_1813636A8((uint64_t *)a1, 0, &v27, (uint64_t)&v25);
    if (!(_DWORD)v8)
    {
      int v24 = v27;
      sqlite3_step(v27);
      uint64_t v8 = sqlite3_reset(v24);
    }

    if (*(_BYTE *)(a1 + 462) && !(_DWORD)v8)
    {
LABEL_26:
      uint64_t v8 = sub_1813636A8((uint64_t *)a1, 19, &v27, (uint64_t)&v25);
      if ((_DWORD)v8) {
        return v8;
      }
      int v19 = v27;
      sqlite3_step(v27);
      uint64_t v12 = v19;
      return sqlite3_reset(v12);
    }
  }

  return v8;
}

uint64_t sub_181375BFC(uint64_t a1, void *a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 80))
  {
    int v9 = a2 + 1;
    uint64_t v10 = sub_1813636A8((uint64_t *)a1, 18, &v27, (uint64_t)(a2 + 1));
    if ((_DWORD)v10) {
      return v10;
    }
    if (!*(void *)(a1 + 88))
    {
LABEL_26:
      uint64_t v18 = a2[*(int *)(a1 + 48) + 3];
      if (v18)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v18 + 20)) & 1) != 0)
        {
          int v19 = v27;
          goto LABEL_39;
        }
      }

      else
      {
        sub_1812CF36C(97220);
      }

      if (*a2)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a2 + 20LL)) & 1) != 0)
        {
          if (!*v9)
          {
            sub_1812CF36C(97220);
            return 1LL;
          }

          if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*v9 + 20LL)) & 1) == 0) {
            return 1LL;
          }
        }
      }

      else
      {
        sub_1812CF36C(97220);
      }

      int v19 = v27;
      uint64_t v10 = sqlite3_bind_value(v27, 1, (const sqlite3_value *)a2[*(int *)(a1 + 48) + 3]);
      if ((_DWORD)v10) {
        return v10;
      }
LABEL_39:
      sqlite3_step(v19);
      uint64_t v10 = sqlite3_reset(v19);
      uint64_t v21 = *(void *)(a1 + 24);
      if (v21)
      {
        int v22 = *(unsigned __int8 *)(v21 + 113);
        switch(v22)
        {
          case 186:
            goto LABEL_43;
          case 118:
            uint64_t v25 = *(void *)(v21 + 56);
LABEL_59:
            *a3 = v25;
            return v10;
          case 109:
LABEL_43:
            uint64_t v23 = "unopened";
            break;
          default:
            uint64_t v23 = "invalid";
            break;
        }
      }

      else
      {
        uint64_t v23 = "NULL";
      }

      sqlite3_log(21, "API call with %s database connection pointer", v23);
      sub_1812CF36C(186263);
      uint64_t v25 = 0LL;
      goto LABEL_59;
    }

    uint64_t v11 = v27;
    int v12 = *(_DWORD *)(a1 + 48);
    int v13 = v12 + 2;
    uint64_t v14 = a2[v12 + 4];
    if (v14)
    {
      __int16 v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 0x24) != 0)
      {
        double v16 = *(double *)v14;
        goto LABEL_25;
      }

      if ((v15 & 8) != 0)
      {
        double v24 = *(double *)v14;
        if (*(double *)v14 >= -9.22337204e18)
        {
          if (v24 <= 9.22337204e18) {
            *(void *)&double v16 = (uint64_t)v24;
          }
          else {
            LODWORD(v16) = -1;
          }
        }

        else
        {
          LODWORD(v16) = 0;
        }

uint64_t sub_181375F44(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)result)
  {
    int v5 = (_DWORD *)result;
    uint64_t v6 = *(int *)(a2 + 48);
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18126F0AC(10 * v6)) == 0)
    {
      int v7 = 7;
    }

    else
    {
      char v8 = (char *)result;
      uint64_t v9 = *(unsigned int *)(a2 + 48);
      if ((int)v9 < 1)
      {
        unsigned int v11 = 0;
      }

      else
      {
        uint64_t v10 = 0LL;
        unsigned int v11 = 0;
        do
        {
          unint64_t v12 = *(unsigned int *)(a3 + 4 * v10);
          int v13 = (_BYTE *)(result + (int)v11);
          do
          {
            char v14 = v12;
            *v13++ = v12 | 0x80;
            ++v11;
            BOOL v15 = v12 > 0x7F;
            v12 >>= 7;
          }

          while (v15);
          *(v13 - 1) = v14 & 0x7F;
          ++v10;
        }

        while (v10 != v9);
      }

      int v16 = sub_1813636A8((uint64_t *)a2, 20, &v22, 0LL);
      if (!v16)
      {
        uint64_t v18 = (uint64_t *)v22;
        uint64_t v19 = *(void *)(a2 + 512);
        if (!sub_1812B2390((uint64_t)v22, 0))
        {
          uint64_t v20 = v18[16];
          if ((*(_WORD *)(v20 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v20, v19);
          }

          else
          {
            *(void *)uint64_t v20 = v19;
            *(_WORD *)(v20 + 20) = 4;
          }

          uint64_t v21 = *(void *)(*v18 + 24);
          if (v21) {
            xmmword_18C465410(v21);
          }
        }

        if ((v11 & 0x80000000) != 0) {
          sub_1812CF36C(98740);
        }
        else {
          sub_1812B2220(v18, 2, v8, v11, (uint64_t (*)(uint64_t))sqlite3_free, 0);
        }
        sqlite3_step((sqlite3_stmt *)v18);
        uint64_t result = sqlite3_reset((sqlite3_stmt *)v18);
        int v7 = result;
        goto LABEL_4;
      }

      int v7 = v16;
      uint64_t v17 = (uint64_t (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v8);
        char v8 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        uint64_t v17 = (uint64_t (**)(char *))&xmmword_18C465410;
      }

      uint64_t result = (*v17)(v8);
    }

void sub_181376150(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!*a1)
  {
    uint64_t v10 = *(int *)(a2 + 48);
    if (sqlite3_initialize() || (uint64_t v11 = v10 + 2, (v12 = sub_18126F0AC(14 * (v10 + 2))) == 0))
    {
      *a1 = 7;
      return;
    }

    int v13 = (_DWORD *)v12;
    int v14 = sub_1813636A8((uint64_t *)a2, 22, &v48, 0LL);
    if (v14)
    {
LABEL_27:
      int v25 = v14;
      int v26 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
        --qword_18C468B10;
        off_18C4653A8(v13);
        int v13 = (_DWORD *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_33;
        }
        int v26 = &xmmword_18C465410;
      }

      (*v26)(v13);
LABEL_33:
      *a1 = v25;
      return;
    }

    BOOL v15 = v48;
    if (!sub_1812B2390((uint64_t)v48, 0))
    {
      uint64_t v16 = *((void *)v15 + 16);
      if ((*(_WORD *)(v16 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v16, 0LL);
      }

      else
      {
        *(void *)uint64_t v16 = 0LL;
        *(_WORD *)(v16 + 20) = 4;
      }

      uint64_t v17 = *(void *)(*(void *)v15 + 24LL);
      if (v17) {
        xmmword_18C465410(v17);
      }
    }

    if (sqlite3_step(v15) == 100)
    {
      uint64_t v47 = v13;
      unint64_t v18 = (unint64_t)sqlite3_column_blob(v15, 0);
      int v19 = sqlite3_column_bytes(v15, 0);
      if (!v19 || (int v20 = v19, *(char *)(v18 + v19 - 1) < 0))
      {
        LODWORD(v18) = 0;
      }

      else
      {
        unint64_t v46 = v18;
        LODWORD(v18) = 0;
        if ((int)v10 >= -1 && v19 >= 1)
        {
          uint64_t v45 = v15;
          unint64_t v18 = 0LL;
          int v21 = 0;
          do
          {
            int v22 = sub_181363B00((char *)(v46 + v21), &v49);
            v47[v18++] = v49;
            v21 += v22;
          }

          while (v21 < v20);
          BOOL v15 = v45;
        }
      }

      int v13 = v47;
      if ((int)v18 >= (int)v11)
      {
LABEL_26:
        int v14 = sqlite3_reset(v15);
        if (v14) {
          goto LABEL_27;
        }
        BOOL v27 = *v13 < -a5 && a5 < 0;
        int v28 = *v13 + a5;
        if (v27) {
          int v28 = 0;
        }
        _DWORD *v13 = v28;
        if ((*(_DWORD *)(a2 + 48) & 0x80000000) == 0)
        {
          uint64_t v29 = 0LL;
          int v30 = v13 + 1;
          do
          {
            unsigned int v31 = *(_DWORD *)(a3 + 4 * v29) + v30[v29];
            unsigned int v32 = *(_DWORD *)(a4 + 4 * v29);
            BOOL v33 = v31 >= v32;
            unsigned int v34 = v31 - v32;
            if (!v33) {
              unsigned int v34 = 0;
            }
            v30[v29] = v34;
            BOOL v35 = v29++ < *(int *)(a2 + 48);
          }

          while (v35);
        }

        if ((int)v10 < -1)
        {
          int v37 = 0;
        }

        else
        {
          uint64_t v36 = 0LL;
          int v37 = 0;
          do
          {
            unint64_t v38 = v13[v36];
            int v39 = (char *)&v13[v11] + v37;
            do
            {
              char v40 = v38;
              *v39++ = v38 | 0x80;
              ++v37;
              BOOL v35 = v38 > 0x7F;
              v38 >>= 7;
            }

            while (v35);
            *(v39 - 1) = v40 & 0x7F;
            ++v36;
          }

          while (v36 != v11);
        }

        int v41 = sub_1813636A8((uint64_t *)a2, 23, &v48, 0LL);
        if (!v41)
        {
          int v44 = v48;
          sqlite3_bind_int64(v48, 1, 0LL);
          sqlite3_bind_blob(v44, 2, &v13[v11], v37, 0LL);
          sqlite3_step(v44);
          *a1 = sqlite3_reset(v44);
          sqlite3_bind_null(v44, 2);
          sqlite3_free(v13);
          return;
        }

        int v42 = v41;
        uint64_t v43 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
          --qword_18C468B10;
          off_18C4653A8(v13);
          int v13 = (_DWORD *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_59;
          }
          uint64_t v43 = &xmmword_18C465410;
        }

        (*v43)(v13);
LABEL_59:
        *a1 = v42;
        return;
      }

      double v24 = &v47[v18];
      size_t v23 = 4LL * (v11 + ~(_DWORD)v18) + 4;
    }

    else
    {
      size_t v23 = 4 * v11;
      double v24 = v13;
    }

    bzero(v24, v23);
    goto LABEL_26;
  }

uint64_t sub_181376594(uint64_t a1, int a2)
{
  BOOL v27 = 0LL;
  unsigned int v4 = sub_1813767BC(a1);
  if (v4) {
    goto LABEL_28;
  }
  unsigned int v4 = sub_1813636A8((uint64_t *)a1, 27, &v27, 0LL);
  if (v4) {
    goto LABEL_28;
  }
  int v5 = v27;
  uint64_t v6 = *(int *)(a1 + 520);
  if (!sub_1812B2390((uint64_t)v27, 0))
  {
    uint64_t v7 = *((void *)v5 + 16);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v7, v6);
    }

    else
    {
      *(void *)uint64_t v7 = v6;
      *(_WORD *)(v7 + 20) = 4;
    }

    uint64_t v8 = *(void *)(*(void *)v5 + 24LL);
    if (v8) {
      xmmword_18C465410(v8);
    }
  }

  uint64_t v9 = *(int *)(a1 + 488);
  if (!sub_1812B2390((uint64_t)v5, 1u))
  {
    uint64_t v10 = *((void *)v5 + 16);
    if ((*(_WORD *)(v10 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v10 + 64, v9);
    }

    else
    {
      *(void *)(v10 + 64) = v9;
      *(_WORD *)(v10 + 84) = 4;
    }

    uint64_t v11 = *(void *)(*(void *)v5 + 24LL);
    if (v11) {
      xmmword_18C465410(v11);
    }
  }

  if (sqlite3_step(v5) != 100)
  {
    unsigned int v4 = sqlite3_reset(v5);
LABEL_28:
    unsigned int v13 = v4;
    int v12 = 0;
    goto LABEL_29;
  }

  int v12 = 0;
  unsigned int v13 = 0;
  do
  {
    uint64_t v14 = sqlite3_column_int(v5, 0);
    if (!v13)
    {
      uint64_t v15 = v14;
      for (uint64_t i = 0LL; (int)i < *(_DWORD *)(a1 + 488); uint64_t i = (i + 1))
      {
        unsigned int v17 = sub_1813768E4(a1, v15, i, -2);
        if (v17 == 101)
        {
          int v12 = 1;
        }

        else
        {
          unsigned int v13 = v17;
          if (v17) {
            goto LABEL_18;
          }
        }
      }

      unsigned int v13 = 0;
    }

uint64_t sub_1813767BC(uint64_t a1)
{
  if (*(int *)(a1 + 488) >= 1)
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      uint64_t v3 = sub_1813768E4(a1, *(unsigned int *)(a1 + 520), v2, -1);
      if ((_DWORD)v3 != 101 && (_DWORD)v3 != 0) {
        break;
      }
      uint64_t v2 = (v2 + 1);
    }

    uint64_t v9 = v3;
    sub_181377688(a1);
    return v9;
  }

uint64_t sub_1813768E4(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v161 = 0LL;
  __int128 v159 = 0u;
  __int128 v160 = 0u;
  __int128 v157 = 0u;
  __int128 v158 = 0u;
  __int128 v156 = 0u;
  uint64_t v8 = sub_181362778(a1, a2, a3, a4, 0LL, 0LL, 1, 0, (uint64_t)&v156);
  if ((_DWORD)v8) {
    goto LABEL_157;
  }
  int v9 = DWORD2(v156);
  if (!DWORD2(v156)) {
    goto LABEL_157;
  }
  if (a4 == -1)
  {
    sqlite3_int64 v11 = 0LL;
    int v12 = a2;
    uint64_t v13 = (int)a3;
    goto LABEL_7;
  }

  uint64_t v10 = sub_1813636A8((uint64_t *)a1, 15, &v162, 0LL);
  if ((_DWORD)v10)
  {
    uint64_t v8 = v10;
    goto LABEL_157;
  }

  uint64_t v21 = v162;
  int v12 = a2;
  int v22 = *(_DWORD *)(a1 + 488);
  uint64_t v13 = (int)a3;
  if (!sub_1812B2390((uint64_t)v162, 0))
  {
    uint64_t v23 = ((int)a3 + v22 * (uint64_t)(int)a2) << 10;
    uint64_t v24 = *((void *)v21 + 16);
    if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v24, v23);
    }

    else
    {
      *(void *)uint64_t v24 = v23;
      *(_WORD *)(v24 + 20) = 4;
    }

    uint64_t v25 = *(void *)(*(void *)v21 + 24LL);
    if (v25) {
      xmmword_18C465410(v25);
    }
  }

  int v26 = *(_DWORD *)(a1 + 488);
  if (!sub_1812B2390((uint64_t)v21, 1u))
  {
    uint64_t v27 = (((int)a3 + v26 * (uint64_t)(int)a2) << 10) | 0x3FF;
    uint64_t v28 = *((void *)v21 + 16);
    if ((*(_WORD *)(v28 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v28 + 64, v27);
    }

    else
    {
      *(void *)(v28 + 64) = v27;
      *(_WORD *)(v28 + 84) = 4;
    }

    uint64_t v29 = *(void *)(*(void *)v21 + 24LL);
    if (v29) {
      xmmword_18C465410(v29);
    }
  }

  if (sqlite3_step(v21) == 100) {
    sqlite3_int64 v11 = sqlite3_column_int64(v21, 0);
  }
  else {
    sqlite3_int64 v11 = 0LL;
  }
  uint64_t v8 = sqlite3_reset(v21);
  if ((_DWORD)v8) {
    goto LABEL_157;
  }
  if (a4 != -2)
  {
LABEL_7:
    int v14 = *(_DWORD *)(a1 + 488);
    uint64_t v8 = sub_1813636A8((uint64_t *)a1, 8, &v162, 0LL);
    if ((_DWORD)v8) {
      goto LABEL_157;
    }
    sqlite3_int64 v154 = v11;
    uint64_t v15 = v13 + v12 * (uint64_t)v14;
    uint64_t v16 = a4 + 1;
    unsigned int v17 = v162;
    int v18 = *(_DWORD *)(a1 + 488);
    if (!sub_1812B2390((uint64_t)v162, 0))
    {
      uint64_t v19 = v16 + ((v13 + v12 * (uint64_t)v18) << 10);
      uint64_t v20 = *((void *)v17 + 16);
      if ((*(_WORD *)(v20 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v20, v19);
      }

      else
      {
        *(void *)uint64_t v20 = v19;
        *(_WORD *)(v20 + 20) = 4;
      }

      uint64_t v34 = *(void *)(*(void *)v17 + 24LL);
      if (v34) {
        xmmword_18C465410(v34);
      }
    }

    sqlite3_int64 v33 = v16 + (v15 << 10);
    if (sqlite3_step(v17) == 100)
    {
      int v30 = sqlite3_column_int(v17, 0);
      uint64_t v8 = sqlite3_reset(v17);
      sqlite3_int64 v11 = v154;
      if ((_DWORD)v8) {
        goto LABEL_157;
      }
      if (v30 > 15)
      {
        uint64_t v35 = sub_1813768E4(a1, a2, a3, v16);
        uint64_t v8 = v35;
        BOOL v36 = a4 == -1 || v33 <= v154;
        BOOL v37 = !v36;
        if ((_DWORD)v35) {
          goto LABEL_157;
        }
        int v30 = 0;
        goto LABEL_53;
      }
    }

    else
    {
      uint64_t v8 = sqlite3_reset(v17);
      sqlite3_int64 v11 = v154;
      if ((_DWORD)v8) {
        goto LABEL_157;
      }
      int v30 = 0;
    }

    BOOL v37 = a4 != -1 && v33 > v11;
LABEL_53:
    int v32 = 0;
    uint64_t v162 = 0LL;
    uint64_t v163 = 0LL;
    uint64_t v164 = 0LL;
    if (v37) {
      int v31 = 3;
    }
    else {
      int v31 = 1;
    }
    goto LABEL_56;
  }

  if (v9 == 1 && !*(void *)(*(void *)v156 + 64LL))
  {
    uint64_t v8 = 101LL;
    goto LABEL_157;
  }

  int v30 = 0;
  uint64_t v162 = 0LL;
  uint64_t v163 = 0LL;
  int v31 = 3;
  int v32 = 1;
  sqlite3_int64 v33 = v11;
  uint64_t v164 = 0LL;
LABEL_56:
  LODWORD(v164) = v31;
  *(void *)&__int128 v157 = &v162;
  uint64_t v8 = sub_181363C00(a1, (uint64_t *)&v156, 0LL, 0);
  if ((_DWORD)v8) {
    goto LABEL_157;
  }
  int v146 = v32;
  int v144 = v30;
  uint64_t v145 = v33;
  int v39 = 0LL;
  sqlite3_int64 v155 = v11;
  while (1)
  {
    uint64_t v41 = sub_1813644CC(a1, (uint64_t)&v156);
    if ((_DWORD)v41 != 100) {
      break;
    }
    int v42 = (unsigned __int8 *)*((void *)&v159 + 1);
    unsigned int v43 = v160;
    int v44 = (void *)*((void *)&v160 + 1);
    size_t v45 = (int)v161;
    int v151 = v160;
    size_t v152 = (int)v161;
    if (!v39)
    {
      if (sqlite3_initialize())
      {
        int v39 = 0LL;
LABEL_135:
        uint64_t v8 = 7LL;
        goto LABEL_136;
      }

      uint64_t v46 = sub_18126F0AC(72LL);
      int v39 = (uint64_t *)v46;
      if (!v46) {
        goto LABEL_135;
      }
      *(void *)(v46 + 64) = 0LL;
      *(_OWORD *)(v46 + 32) = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      *(_OWORD *)uint64_t v46 = 0u;
      *(_OWORD *)(v46 + 16) = 0u;
      uint64_t v47 = *(int *)(a1 + 456);
      if (sqlite3_initialize())
      {
        v39[7] = 0LL;
        goto LABEL_135;
      }

      uint64_t v48 = sub_18126F0AC(v47);
      v39[7] = v48;
      if (!v48) {
        goto LABEL_135;
      }
      *((_DWORD *)v39 + 12) = *(_DWORD *)(a1 + 456);
      uint64_t v49 = sub_1813636A8((uint64_t *)a1, 10, v165, 0LL);
      if ((_DWORD)v49)
      {
        uint64_t v8 = v49;
        goto LABEL_136;
      }

      uint64_t v50 = v165[0];
      if (sqlite3_step(v165[0]) == 100)
      {
        sqlite3_int64 v51 = sqlite3_column_int64(v50, 0);
        v39[1] = v51;
        v39[2] = v51;
      }

      uint64_t v52 = sqlite3_reset(v50);
      if ((_DWORD)v52)
      {
        uint64_t v8 = v52;
        goto LABEL_137;
      }

      unsigned int v43 = v151;
      size_t v45 = v152;
    }

    unsigned int v53 = *((_DWORD *)v39 + 8);
    else {
      uint64_t v54 = v53;
    }
    uint64_t v147 = v44;
    if ((int)v54 < 1)
    {
      LODWORD(v54) = 0;
    }

    else
    {
      uint64_t v55 = 0LL;
      while (*(unsigned __int8 *)(v39[3] + v55) == v42[v55])
      {
        if (v54 == ++v55) {
          goto LABEL_81;
        }
      }

      LODWORD(v54) = v55;
    }

LABEL_136:
  if (!v39) {
    goto LABEL_157;
  }
LABEL_137:
  uint64_t v110 = v39[7];
  if (v110)
  {
    BOOL v111 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_143:
      (*v111)(v110);
      goto LABEL_144;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v110);
    --qword_18C468B10;
    off_18C4653A8(v110);
    uint64_t v110 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v111 = &xmmword_18C465410;
      goto LABEL_143;
    }
  }

uint64_t sub_181377688(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 488) >= 1)
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      uint64_t v3 = *(void *)(v1 + 496) + 40 * v2;
      unsigned int v4 = *(void **)(v3 + 16);
      if (v4) {
        break;
      }
LABEL_3:
      uint64_t result = sub_18136017C(v3 + 8);
    }

    while (1)
    {
      uint64_t v5 = v4[2];
      if (v5)
      {
        int v6 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
          --qword_18C468B10;
          off_18C4653A8(v5);
          uint64_t v5 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_7;
          }
          int v6 = &xmmword_18C465410;
        }

        (*v6)(v5);
      }

uint64_t sub_1813777A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1813636A8(a1, 37, &v52, 0LL);
  if ((_DWORD)v6) {
    return v6;
  }
  if (a2 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = a2 + 1023;
  }
  if (3 * a3 >= 0) {
    uint64_t v9 = 3 * a3;
  }
  else {
    uint64_t v9 = 3 * a3 + 1;
  }
  uint64_t v10 = v52;
  if (!sub_1812B2390((uint64_t)v52, 0))
  {
    uint64_t v11 = a2 + 1;
    uint64_t v12 = *((void *)v10 + 16);
    if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v12, v11);
    }

    else
    {
      *(void *)uint64_t v12 = v11;
      *(_WORD *)(v12 + 20) = 4;
    }

    uint64_t v13 = *(void *)(*(void *)v10 + 24LL);
    if (v13) {
      xmmword_18C465410(v13);
    }
  }

  if (!sub_1812B2390((uint64_t)v10, 1u))
  {
    uint64_t v14 = v8 | 0x3FF;
    uint64_t v15 = *((void *)v10 + 16);
    if ((*(_WORD *)(v15 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v15 + 64, v14);
    }

    else
    {
      *(void *)(v15 + 64) = v14;
      *(_WORD *)(v15 + 84) = 4;
    }

    uint64_t v16 = *(void *)(*(void *)v10 + 24LL);
    if (v16) {
      xmmword_18C465410(v16);
    }
  }

  if (sqlite3_step(v10) == 100)
  {
    uint64_t v17 = v9 >> 1;
    while (1)
    {
      int v18 = sqlite3_column_text(v10, 2);
      if (!v18) {
        break;
      }
      if (*v18 - 48 > 9)
      {
        uint64_t v22 = 0LL;
      }

      else
      {
        uint64_t v19 = 0LL;
        do
        {
          unsigned int v20 = v19 + 1;
          unsigned int v21 = v18[++v19] - 48;
        }

        while (v21 < 0xA);
        uint64_t v22 = v20;
      }

      while (1)
      {
        int v23 = v18[v22];
        if (v23 != 32) {
          break;
        }
        ++v22;
      }

      BOOL v24 = v23 == 45;
      int v25 = v23 == 45 ? v22 + 1 : v22;
      uint64_t v26 = v24 ? -1LL : 1LL;
      uint64_t v27 = v25;
      int v28 = v18[v25];
      if ((v28 - 48) > 9)
      {
        uint64_t v29 = 0LL;
      }

      else
      {
        uint64_t v29 = 0LL;
        int v30 = &v18[v27 + 1];
        do
        {
          uint64_t v29 = (v28 - 48) + 10 * v29;
          int v31 = *v30++;
          int v28 = v31;
        }

        while ((v31 - 48) < 0xA);
      }

      uint64_t v32 = v29 * v26;
      if (v32 < 1 || v32 > v17) {
        break;
      }
      if (sqlite3_step(v10) != 100)
      {
        uint64_t v6 = sqlite3_reset(v10);
        uint64_t v50 = 0LL;
        sqlite3_int64 v51 = 0LL;
        if (!(_DWORD)v6)
        {
          uint64_t v6 = sub_1813636A8(a1, 38, &v51, 0LL);
          if (!(_DWORD)v6)
          {
            uint64_t v6 = sub_1813636A8(a1, 39, &v50, 0LL);
            if (!(_DWORD)v6)
            {
              if (!sub_1812B2390((uint64_t)v10, 0))
              {
                uint64_t v34 = *((void *)v10 + 16);
                if ((*(_WORD *)(v34 + 20) & 0x9000) != 0)
                {
                  sub_1813040AC(v34, a2);
                }

                else
                {
                  *(void *)uint64_t v34 = a2;
                  *(_WORD *)(v34 + 20) = 4;
                }

                uint64_t v35 = *(void *)(*(void *)v10 + 24LL);
                if (v35) {
                  xmmword_18C465410(v35);
                }
              }

              uint64_t v36 = 0LL;
              BOOL v37 = v51;
              while (sqlite3_step(v10) == 100)
              {
                if (!sub_1812B2390((uint64_t)v37, 0))
                {
                  uint64_t v39 = *((void *)v37 + 16);
                  if ((*(_WORD *)(v39 + 20) & 0x9000) != 0)
                  {
                    sub_1813040AC(v39, v36);
                  }

                  else
                  {
                    *(void *)uint64_t v39 = v36;
                    *(_WORD *)(v39 + 20) = 4;
                  }

                  uint64_t v40 = *(void *)(*(void *)v37 + 24LL);
                  if (v40) {
                    xmmword_18C465410(v40);
                  }
                }

                int v41 = sqlite3_column_int(v10, 0);
                if (!sub_1812B2390((uint64_t)v37, 1u))
                {
                  uint64_t v42 = *((void *)v37 + 16);
                  if ((*(_WORD *)(v42 + 84) & 0x9000) != 0)
                  {
                    sub_1813040AC(v42 + 64, v41);
                  }

                  else
                  {
                    *(void *)(v42 + 64) = v41;
                    *(_WORD *)(v42 + 84) = 4;
                  }

                  uint64_t v43 = *(void *)(*(void *)v37 + 24LL);
                  if (v43) {
                    xmmword_18C465410(v43);
                  }
                }

                int v44 = sqlite3_column_int(v10, 1);
                if (!sub_1812B2390((uint64_t)v37, 2u))
                {
                  uint64_t v45 = *((void *)v37 + 16);
                  if ((*(_WORD *)(v45 + 148) & 0x9000) != 0)
                  {
                    sub_1813040AC(v45 + 128, v44);
                  }

                  else
                  {
                    *(void *)(v45 + 128) = v44;
                    *(_WORD *)(v45 + 148) = 4;
                  }

                  uint64_t v46 = *(void *)(*(void *)v37 + 24LL);
                  if (v46) {
                    xmmword_18C465410(v46);
                  }
                }

                sqlite3_step(v37);
                uint64_t v38 = sqlite3_reset(v37);
                ++v36;
                if ((_DWORD)v38)
                {
                  uint64_t v6 = v38;
                  sqlite3_reset(v10);
                  return v6;
                }
              }

              uint64_t v6 = sqlite3_reset(v10);
              if (!(_DWORD)v6)
              {
                uint64_t v47 = v50;
                if (!sub_1812B2390((uint64_t)v50, 0))
                {
                  uint64_t v48 = *((void *)v47 + 16);
                  if ((*(_WORD *)(v48 + 20) & 0x9000) != 0)
                  {
                    sub_1813040AC(v48, a2);
                  }

                  else
                  {
                    *(void *)uint64_t v48 = a2;
                    *(_WORD *)(v48 + 20) = 4;
                  }

                  uint64_t v49 = *(void *)(*(void *)v47 + 24LL);
                  if (v49) {
                    xmmword_18C465410(v49);
                  }
                }

                sqlite3_step(v47);
                return sqlite3_reset(v47);
              }
            }
          }
        }

        return v6;
      }
    }
  }

  return sqlite3_reset(v10);
}

uint64_t sub_181377C44(uint64_t *a1, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v7 = sub_1813636A8(a1, 9, &v17, 0LL);
  if (!(_DWORD)v7)
  {
    uint64_t v8 = (uint64_t *)v17;
    if (!sub_1812B2390((uint64_t)v17, 0))
    {
      uint64_t v9 = v8[16];
      if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v9, a2);
      }

      else
      {
        *(void *)uint64_t v9 = a2;
        *(_WORD *)(v9 + 20) = 4;
      }

      uint64_t v10 = *(void *)(*v8 + 24);
      if (v10) {
        xmmword_18C465410(v10);
      }
    }

    if ((a4 & 0x80000000) != 0)
    {
      sub_1812CF36C(98740);
    }

    else if (!sub_1812B2390((uint64_t)v8, 1u))
    {
      if (a3)
      {
        unsigned int v11 = sub_181269368(v8[16] + 64, a3, a4, 0, 0LL);
        if (v11)
        {
          unsigned int v12 = v11;
          uint64_t v13 = *v8;
          *(_DWORD *)(v13 + 80) = v12;
          sub_1812FA264(v13, v12);
          sub_1813037C4(*v8, v12);
        }
      }

      uint64_t v14 = *(void *)(*v8 + 24);
      if (v14) {
        xmmword_18C465410(v14);
      }
    }

    sqlite3_step((sqlite3_stmt *)v8);
    uint64_t v7 = sqlite3_reset((sqlite3_stmt *)v8);
    if (!sub_1812B2390((uint64_t)v8, 1u))
    {
      uint64_t v15 = *(void *)(*v8 + 24);
      if (v15) {
        xmmword_18C465410(v15);
      }
    }
  }

  return v7;
}

uint64_t sub_181377DB0(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)*a2;
  if (*a2)
  {
    uint64_t v9 = v8[4];
    LODWORD(v10) = *((_DWORD *)v8 + 10);
    else {
      unint64_t v10 = v10;
    }
    if ((int)v10 < 1)
    {
      LODWORD(v10) = 0;
    }

    else
    {
      uint64_t v11 = 0LL;
      while (*(unsigned __int8 *)(v9 + v11) == a3[v11])
      {
        if (v10 == ++v11) {
          goto LABEL_13;
        }
      }

      LODWORD(v10) = v11;
    }

uint64_t sub_1813780A4(uint64_t *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8)) {
    return 0LL;
  }
  uint64_t result = sub_1813636A8(a1, 17, &v11, 0LL);
  if (!(_DWORD)result)
  {
    unsigned int v4 = v11;
    uint64_t v5 = *(void *)(a2 + 8);
    if (!sub_1812B2390((uint64_t)v11, 0))
    {
      uint64_t v6 = *((void *)v4 + 16);
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v6, v5);
      }

      else
      {
        *(void *)uint64_t v6 = v5;
        *(_WORD *)(v6 + 20) = 4;
      }

      uint64_t v7 = *(void *)(*(void *)v4 + 24LL);
      if (v7) {
        xmmword_18C465410(v7);
      }
    }

    uint64_t v8 = *(void *)(a2 + 24);
    if (!sub_1812B2390((uint64_t)v4, 1u))
    {
      uint64_t v9 = *((void *)v4 + 16);
      if ((*(_WORD *)(v9 + 84) & 0x9000) != 0)
      {
        sub_1813040AC(v9 + 64, v8);
      }

      else
      {
        *(void *)(v9 + 64) = v8;
        *(_WORD *)(v9 + 84) = 4;
      }

      uint64_t v10 = *(void *)(*(void *)v4 + 24LL);
      if (v10) {
        xmmword_18C465410(v10);
      }
    }

    sqlite3_step(v4);
    return sqlite3_reset(v4);
  }

  return result;
}

uint64_t sub_1813781BC( uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, unsigned int a9)
{
  uint64_t v16 = sub_1813636A8(a1, 11, &v35, 0LL);
  if (!(_DWORD)v16)
  {
    int v17 = (uint64_t *)v35;
    if (!sub_1812B2390((uint64_t)v35, 0))
    {
      uint64_t v18 = v17[16];
      if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v18, a2);
      }

      else
      {
        *(void *)uint64_t v18 = a2;
        *(_WORD *)(v18 + 20) = 4;
      }

      uint64_t v19 = *(void *)(*v17 + 24);
      if (v19) {
        xmmword_18C465410(v19);
      }
    }

    if (!sub_1812B2390((uint64_t)v17, 1u))
    {
      uint64_t v20 = v17[16];
      if ((*(_WORD *)(v20 + 84) & 0x9000) != 0)
      {
        sub_1813040AC(v20 + 64, a3);
      }

      else
      {
        *(void *)(v20 + 64) = a3;
        *(_WORD *)(v20 + 84) = 4;
      }

      uint64_t v21 = *(void *)(*v17 + 24);
      if (v21) {
        xmmword_18C465410(v21);
      }
    }

    if (!sub_1812B2390((uint64_t)v17, 2u))
    {
      uint64_t v22 = v17[16];
      if ((*(_WORD *)(v22 + 148) & 0x9000) != 0)
      {
        sub_1813040AC(v22 + 128, a4);
      }

      else
      {
        *(void *)(v22 + 128) = a4;
        *(_WORD *)(v22 + 148) = 4;
      }

      uint64_t v23 = *(void *)(*v17 + 24);
      if (v23) {
        xmmword_18C465410(v23);
      }
    }

    if (!sub_1812B2390((uint64_t)v17, 3u))
    {
      uint64_t v24 = v17[16];
      if ((*(_WORD *)(v24 + 212) & 0x9000) != 0)
      {
        sub_1813040AC(v24 + 192, a5);
      }

      else
      {
        *(void *)(v24 + 192) = a5;
        *(_WORD *)(v24 + 212) = 4;
      }

      uint64_t v25 = *(void *)(*v17 + 24);
      if (v25) {
        xmmword_18C465410(v25);
      }
    }

    if (a7)
    {
      unint64_t v26 = sqlite3_mprintf("%lld %lld", a6, a7);
      if (!v26) {
        return 7LL;
      }
      sub_1812B2220(v17, 5, v26, -1LL, (uint64_t (*)(uint64_t))sqlite3_free, 1u);
    }

    else if (!sub_1812B2390((uint64_t)v17, 4u))
    {
      uint64_t v27 = v17[16];
      if ((*(_WORD *)(v27 + 276) & 0x9000) != 0)
      {
        sub_1813040AC(v27 + 256, a6);
      }

      else
      {
        *(void *)(v27 + 256) = a6;
        *(_WORD *)(v27 + 276) = 4;
      }

      uint64_t v28 = *(void *)(*v17 + 24);
      if (v28) {
        xmmword_18C465410(v28);
      }
    }

    if ((a9 & 0x80000000) != 0)
    {
      sub_1812CF36C(98740);
    }

    else if (!sub_1812B2390((uint64_t)v17, 5u))
    {
      if (a8)
      {
        unsigned int v29 = sub_181269368(v17[16] + 320, a8, a9, 0, 0LL);
        if (v29)
        {
          unsigned int v30 = v29;
          uint64_t v31 = *v17;
          *(_DWORD *)(v31 + 80) = v30;
          sub_1812FA264(v31, v30);
          sub_1813037C4(*v17, v30);
        }
      }

      uint64_t v32 = *(void *)(*v17 + 24);
      if (v32) {
        xmmword_18C465410(v32);
      }
    }

    sqlite3_step((sqlite3_stmt *)v17);
    uint64_t v16 = sqlite3_reset((sqlite3_stmt *)v17);
    if (!sub_1812B2390((uint64_t)v17, 5u))
    {
      uint64_t v33 = *(void *)(*v17 + 24);
      if (v33) {
        xmmword_18C465410(v33);
      }
    }
  }

  return v16;
}

uint64_t sub_1813784F0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void **)(result + 16);
    sub_1813784F0(*v1);
    while (1)
    {
      uint64_t v2 = (void *)v1[1];
      uint64_t v3 = (void *)v1[8];
      if (v3 != v1 + 9 && v3 != 0LL)
      {
        uint64_t v5 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_14;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v3);
        --qword_18C468B10;
        off_18C4653A8(v3);
        uint64_t v3 = (void *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70) {
          break;
        }
      }

uint64_t sub_1813786AC(uint64_t a1, int a2)
{
  if (!a2
    || (uint64_t result = sub_1813636A8((uint64_t *)a1, 2, &v10, 0LL), !(_DWORD)result)
    && (uint64_t v5 = v10, sqlite3_step(v10), result = sqlite3_reset(v5), !(_DWORD)result))
  {
    uint64_t result = sub_1813636A8((uint64_t *)a1, 3, &v10, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t v6 = v10;
      sqlite3_step(v10);
      uint64_t result = sqlite3_reset(v6);
      if (!(_DWORD)result)
      {
        uint64_t result = sub_1813636A8((uint64_t *)a1, 4, &v10, 0LL);
        if (!(_DWORD)result)
        {
          uint64_t v7 = v10;
          sqlite3_step(v10);
          uint64_t result = sqlite3_reset(v7);
        }
      }
    }
  }

  if (*(_BYTE *)(a1 + 462))
  {
    if (!(_DWORD)result)
    {
      uint64_t result = sub_1813636A8((uint64_t *)a1, 5, &v10, 0LL);
      if (!(_DWORD)result)
      {
        uint64_t v8 = v10;
        sqlite3_step(v10);
        uint64_t result = sqlite3_reset(v8);
      }
    }
  }

  if (*(_BYTE *)(a1 + 461) && !(_DWORD)result)
  {
    uint64_t result = sub_1813636A8((uint64_t *)a1, 6, &v10, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t v9 = v10;
      sqlite3_step(v10);
      return sqlite3_reset(v9);
    }
  }

  return result;
}

uint64_t sub_1813787D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  if (a3)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 72);
    uint64_t v10 = *v9;
    uint64_t v27 = 0LL;
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, char **))(v10 + 24))(v9, a3, 0xFFFFFFFFLL, &v27);
    if (!(_DWORD)v11)
    {
      *(void *)uint64_t v27 = v9;
      int v12 = v27;
      if (*(int *)v10 >= 1
        && (v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 48))(v27, a2), int v12 = v27, (_DWORD)v13))
      {
        uint64_t v11 = v13;
        (*(void (**)(char *))(v10 + 32))(v27);
      }

      else
      {
        int v14 = *(uint64_t (**)(char *, char **, uint64_t *, char *, uint64_t *, char *))(v10 + 40);
        unsigned int v15 = v14(v12, &v27, &v25, (char *)&v26 + 4, &v26, (char *)&v25 + 4);
        if (v15)
        {
          unsigned int v16 = v15;
          int v17 = 0;
        }

        else
        {
          int v17 = 0;
          do
          {
            if (SHIDWORD(v25) >= v17) {
              int v17 = HIDWORD(v25) + 1;
            }
            unsigned int v16 = 1;
            if (v25 < 0) {
              break;
            }
            unsigned int v20 = sub_1813789D8(a1, a4, SHIDWORD(v25), *(void *)(a1 + 496) + 8LL, v27, v25);
            if (v20)
            {
              unsigned int v16 = v20;
              break;
            }

            uint64_t v21 = 0LL;
            uint64_t v22 = 40LL;
            while (++v21 < *(int *)(a1 + 488))
            {
              uint64_t v23 = *(void *)(a1 + 496);
              uint64_t v24 = *(unsigned int *)(v23 + v22);
              if ((int)v25 >= (int)v24)
              {
                unsigned int v16 = sub_1813789D8(a1, a4, SHIDWORD(v25), v23 + v22 + 8, v27, v24);
                v22 += 40LL;
                if (v16) {
                  goto LABEL_9;
                }
              }

              else
              {
                v22 += 40LL;
              }
            }

            unsigned int v16 = v14(v12, &v27, &v25, (char *)&v26 + 4, &v26, (char *)&v25 + 4);
          }

          while (!v16);
        }

uint64_t sub_1813789D8(uint64_t a1, int a2, int a3, uint64_t a4, char *a5, uint64_t a6)
{
  unsigned int v23 = 0;
  if (a4 && *(void *)(a4 + 24))
  {
    int v12 = *(_BYTE *)a4 == 1 ? sub_18126D6B4(a5, a6) : sub_181363650(a5, a6);
    uint64_t v13 = *(void *)(a4 + 24);
    if (v13)
    {
      int v14 = (int *)(v13 + 16LL * ((*(_DWORD *)(a4 + 16) - 1) & v12));
      int v17 = *v14;
      unsigned int v15 = v14 + 2;
      int v16 = v17;
      if (*(_BYTE *)a4 == 1) {
        uint64_t v18 = sub_18126D718;
      }
      else {
        uint64_t v18 = sub_181363688;
      }
      while (v16)
      {
        unsigned int v15 = *(_DWORD **)v15;
        if (!v15) {
          break;
        }
        --v16;
        if (!((unsigned int (*)(void, void, char *, uint64_t))v18)( *((void *)v15 + 3),  v15[8],  a5,  a6))
        {
          uint64_t v19 = (int *)*((void *)v15 + 2);
          uint64_t v24 = v19;
          if (v19) {
            *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) - a6 - *v19 - 40;
          }
          goto LABEL_16;
        }
      }
    }
  }

  uint64_t v24 = 0LL;
LABEL_16:
  if (sub_18137549C(&v24, *(void *)(a1 + 512), a2, a3, &v23))
  {
    unsigned int v20 = v24;
    if (v20 == (int *)sub_18126D2EC(a4, a5, a6, (uint64_t)v24))
    {
      if (v20)
      {
        uint64_t v22 = (void (**)(int *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
          --qword_18C468B10;
          off_18C4653A8(v20);
          unsigned int v20 = (int *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            return 7LL;
          }
          uint64_t v22 = (void (**)(int *))&xmmword_18C465410;
        }

        (*v22)(v20);
      }

      return 7LL;
    }
  }

  uint64_t result = v23;
  if (!v23) {
    *(_DWORD *)(a1 + 508) += a6 + *v24 + 40;
  }
  return result;
}

uint64_t sub_181378BE0(uint64_t a1, int a2, int a3)
{
  v345 = 0LL;
  uint64_t v346 = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = sub_18126F0AC(808LL);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  int v340 = a3;
  *(void *)&v349[0] = 0LL;
  LODWORD(v346) = 0;
  uint64_t v6 = sub_1813636A8((uint64_t *)a1, 22, (sqlite3_stmt **)v349, 0LL);
  uint64_t v10 = &qword_18C467E20[60];
  if (!(_DWORD)v6)
  {
    int v16 = *(sqlite3_stmt **)&v349[0];
    if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
    {
      uint64_t v17 = *((void *)v16 + 16);
      if ((*(_WORD *)(v17 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v17, 1LL);
      }

      else
      {
        *(void *)uint64_t v17 = 1LL;
        *(_WORD *)(v17 + 20) = 4;
      }

      uint64_t v18 = *(void *)(*(void *)v16 + 24LL);
      if (v18) {
        xmmword_18C465410(v18);
      }
    }

    if (sqlite3_step(v16) == 100)
    {
      uint64_t v19 = sqlite3_column_blob(v16, 0);
      int v20 = sqlite3_column_bytes(v16, 0);
      if (v19)
      {
        unsigned int v21 = v20;
        if (v20 >= 1)
        {
          if (sqlite3_initialize() || (uint64_t v22 = (char *)sub_18127D33C(0LL, v21)) == 0LL)
          {
            sqlite3_reset(v16);
            uint64_t v6 = 7LL;
            goto LABEL_6;
          }

          HIDWORD(v346) = v21;
          v345 = v22;
          memcpy(v22, v19, v21);
        }

        LODWORD(v346) = v21;
      }
    }

    uint64_t v6 = sqlite3_reset(v16);
    unsigned int v348 = v6;
    if (!(_DWORD)v6 && a2 >= 1)
    {
      sqlite3_int64 v343 = 0LL;
      int v338 = 0;
      if (a3 <= 2) {
        uint64_t v23 = 2LL;
      }
      else {
        uint64_t v23 = a3;
      }
      uint64_t v333 = v23;
      v330 = (uint64_t *)(v9 + 80);
      uint64_t v331 = v9 + 696;
      uint64_t v327 = v9 + 96;
      v328 = (unsigned int *)(v9 + 88);
      uint64_t v329 = (uint64_t *)(v9 + 64);
      uint64_t v334 = v9;
      uint64_t v339 = a1;
      uint64_t v341 = v9 + 720;
      while (1)
      {
        uint64_t v26 = *(int *)(a1 + 488);
        v344 = 0LL;
        sub_1813636A8((uint64_t *)a1, 28, &v344, 0LL);
        uint64_t v27 = v344;
        if (!sub_1812B2390((uint64_t)v344, 0))
        {
          uint64_t v28 = *((void *)v27 + 16);
          if ((*(_WORD *)(v28 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v28, v333);
          }

          else
          {
            *(void *)uint64_t v28 = v333;
            *(_WORD *)(v28 + 20) = 4;
          }

          uint64_t v29 = *(void *)(*(void *)v27 + 24LL);
          if (v29) {
            xmmword_18C465410(v29);
          }
        }

        if (sqlite3_step(v27) == 100)
        {
          sqlite3_int64 v343 = sqlite3_column_int64(v27, 0);
          int v30 = sqlite3_column_int(v27, 1);
        }

        else
        {
          int v30 = -1;
        }

        uint64_t v31 = v26 << 10;
        int v347 = v30;
        uint64_t v6 = sqlite3_reset(v27);
        int v32 = 0;
        unsigned int v348 = v6;
        if ((_DWORD)v6) {
          goto LABEL_89;
        }
        int v33 = v346;
        if (!(_DWORD)v346) {
          goto LABEL_88;
        }
        *(void *)&v349[0] = 0LL;
        uint64_t v34 = (int)v346 - 1LL;
        uint64_t v35 = v345;
        if (v345[v34] < 0) {
          goto LABEL_63;
        }
        int v36 = v34 & ((int)v34 >> 31);
        BOOL v37 = &v345[v34 - 1];
        int v38 = v346;
        while (--v38 >= 1)
        {
          int v39 = *v37--;
          if ((v39 & 0x80000000) == 0) {
            goto LABEL_65;
          }
        }

        int v38 = v36;
        if ((int)v346 > 0)
        {
LABEL_63:
          uint64_t v40 = 0LL;
          int v41 = 0;
          uint64_t v6 = 267LL;
          unsigned int v348 = 267;
          if (v30 < 0) {
            goto LABEL_91;
          }
        }

        else
        {
LABEL_65:
          if (v38 >= 1) {
            int v42 = 1;
          }
          else {
            int v42 = v38;
          }
          int v43 = v42 - 1;
          uint64_t v44 = v38 + 4294967294LL;
          while (v38 >= 2)
          {
            int v45 = v345[v44--];
            --v38;
            if ((v45 & 0x80000000) == 0) {
              goto LABEL_73;
            }
          }

          int v38 = v43;
LABEL_73:
          LODWORD(v346) = v38;
          uint64_t v46 = v38 + (uint64_t)(int)sub_181363B00(&v345[v38], (unint64_t *)v349);
          uint64_t v47 = (unsigned __int8 *)&v35[v46];
          int v41 = v35[v46];
          if ((v41 & 0x80) != 0)
          {
            int v41 = v41 & 0x7F | (v47[1] << 7);
            uint64_t v9 = v334;
            if ((char)v47[1] < 0)
            {
              int v41 = v41 & 0x3FFF | (v47[2] << 14);
              if ((char)v47[2] < 0)
              {
                int v41 = v41 & 0x1FFFFF | (v47[3] << 21);
                if ((char)v47[3] < 0)
                {
                  int v41 = v41 & 0xFFFFFFF | ((v47[4] & 7) << 28);
                  int v48 = 5;
                }

                else
                {
                  int v48 = 4;
                }
              }

              else
              {
                int v48 = 3;
              }
            }

            else
            {
              int v48 = 2;
            }
          }

          else
          {
            int v48 = 1;
            uint64_t v9 = v334;
          }

          if (v48 + (_DWORD)v46 == v33) {
            uint64_t v6 = 0LL;
          }
          else {
            uint64_t v6 = 267LL;
          }
          uint64_t v40 = *(void *)&v349[0];
          unsigned int v348 = v6;
          if (v30 < 0) {
            goto LABEL_91;
          }
        }

        if (v343 % v31 < v40 % v31)
        {
          int v32 = 0;
          LODWORD(v346) = v33;
LABEL_88:
          a1 = v339;
LABEL_89:
          uint64_t v40 = v343;
          if (v30 < 1) {
            goto LABEL_540;
          }
          goto LABEL_97;
        }

LABEL_134:
        if ((_DWORD)v6) {
          goto LABEL_42;
        }
        *(void *)&v349[0] = 0LL;
        *(_OWORD *)uint64_t v341 = 0u;
        *(_OWORD *)(v341 + 16) = 0u;
        *(_OWORD *)(v341 + 32) = 0u;
        *(_OWORD *)(v341 + 48) = 0u;
        *(_OWORD *)(v341 + 64) = 0u;
        *(void *)(v341 + 80) = 0LL;
        if (sqlite3_initialize())
        {
          *(void *)uint64_t v341 = 0LL;
          uint64_t v6 = 7LL;
          goto LABEL_104;
        }

        int v66 = (void *)sub_18126F0AC(8LL * v30);
        *(void *)uint64_t v341 = v66;
        if (!v66)
        {
          uint64_t v6 = 7LL;
          goto LABEL_104;
        }

        bzero(v66, 8LL * v30);
        uint64_t v6 = sub_1813636A8((uint64_t *)a1, 12, (sqlite3_stmt **)v349, 0LL);
        if ((_DWORD)v6) {
          goto LABEL_104;
        }
        unint64_t v67 = *(sqlite3_stmt **)&v349[0];
        if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
        {
          uint64_t v68 = *((void *)v67 + 16);
          if ((*(_WORD *)(v68 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v68, v343);
          }

          else
          {
            *(void *)uint64_t v68 = v343;
            *(_WORD *)(v68 + 20) = 4;
          }

          uint64_t v69 = *(void *)(*(void *)v67 + 24LL);
          if (v69) {
            xmmword_18C465410(v69);
          }
        }

        uint64_t v70 = 0LL;
        unint64_t v71 = 0LL;
        while (1)
        {
          BOOL v72 = sqlite3_step(v67) != 100 || v71 >= v30;
          BOOL v73 = v72;
          BOOL __src = v73;
          if (v72) {
            break;
          }
          sqlite3_int64 v74 = sqlite3_column_int64(v67, 1);
          sqlite3_int64 v75 = sqlite3_column_int64(v67, 2);
          sqlite3_int64 v76 = sqlite3_column_int64(v67, 3);
          uint64_t v77 = v10;
          uint64_t v78 = sqlite3_column_blob(v67, 4);
          int v79 = sqlite3_column_bytes(v67, 4);
          int v80 = v78;
          uint64_t v10 = v77;
          uint64_t v9 = v334;
          unsigned int v81 = sub_1813634E4(v71, 0, v74, v75, v76, v80, v79, (uint64_t *)(*(void *)(v334 + 720) + v70));
          ++*(_DWORD *)(v334 + 728);
          ++v71;
          v70 += 8LL;
          if (v81)
          {
            unsigned int v82 = v81;
            goto LABEL_157;
          }
        }

        unsigned int v82 = 0;
LABEL_157:
        a1 = v339;
        uint64_t v24 = v341;
        unsigned int v83 = sqlite3_reset(v67);
        if (__src) {
          uint64_t v6 = v83;
        }
        else {
          uint64_t v6 = v82;
        }
        unsigned int v348 = v6;
        a2 = v342;
        if ((_DWORD)v6) {
          goto LABEL_42;
        }
        if (*(_DWORD *)(v9 + 728) != v30)
        {
          uint64_t v6 = 0LL;
          goto LABEL_42;
        }

        *(void *)(v9 + 736) = v331;
        uint64_t v84 = sub_181363C00(v339, (uint64_t *)v341, *(const void **)(v9 + 696), *(_DWORD *)(v9 + 704));
        unsigned int v348 = v84;
        if ((_DWORD)v84)
        {
          uint64_t v6 = v84;
          goto LABEL_42;
        }

        uint64_t v85 = sub_1813644CC(v339, v341);
        uint64_t v50 = v85;
        unsigned int v348 = v85;
        if ((_DWORD)v85 != 100 && (_DWORD)v85)
        {
          sub_181362408(v341);
          goto LABEL_541;
        }

        if (!v32 || (uint64_t v86 = (__s1 - 1), __s1 < 1))
        {
          *(void *)&v349[0] = 0LL;
          v352[0] = 0LL;
          uint64_t v6 = sub_1813636A8((uint64_t *)v339, 29, (sqlite3_stmt **)v349, 0LL);
          if (!(_DWORD)v6)
          {
            unint64_t v90 = *(sqlite3_stmt **)&v349[0];
            if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
            {
              uint64_t v91 = *((void *)v90 + 16);
              if ((*(_WORD *)(v91 + 20) & 0x9000) != 0)
              {
                sub_1813040AC(v91, v343);
              }

              else
              {
                *(void *)uint64_t v91 = v343;
                *(_WORD *)(v91 + 20) = 4;
              }

              uint64_t v94 = *(void *)(*(void *)v90 + 24LL);
              if (v94) {
                xmmword_18C465410(v94);
              }
            }

            uint64_t v95 = *(int *)(v334 + 728);
            if (!sub_1812B2390((uint64_t)v90, 1u))
            {
              uint64_t v96 = *((void *)v90 + 16);
              if ((*(_WORD *)(v96 + 84) & 0x9000) != 0)
              {
                sub_1813040AC(v96 + 64, v95);
              }

              else
              {
                *(void *)(v96 + 64) = v95;
                *(_WORD *)(v96 + 84) = 4;
              }

              uint64_t v119 = *(void *)(*(void *)v90 + 24LL);
              if (v119) {
                xmmword_18C465410(v119);
              }
            }

            if (sqlite3_step(v90) == 100) {
              int v120 = sqlite3_column_int(v90, 0);
            }
            else {
              int v120 = 0;
            }
            uint64_t v6 = sqlite3_reset(v90);
            if (!(_DWORD)v6)
            {
              uint64_t v6 = sub_1813636A8((uint64_t *)v339, 10, v352, 0LL);
              if (!(_DWORD)v6)
              {
                uint64_t v121 = v352[0];
                if (sqlite3_step(v352[0]) == 100)
                {
                  sqlite3_int64 v122 = sqlite3_column_int64(v121, 0);
                  *(void *)(v334 + 24) = v122;
                  *(void *)(v334 + 32) = v122 + 16 * v120 - 1;
                }

                uint64_t v6 = sqlite3_reset(v121);
                if (!(_DWORD)v6)
                {
                  uint64_t v6 = sub_181377C44((uint64_t *)v339, *(void *)(v334 + 32), 0LL, 0);
                  if (!(_DWORD)v6)
                  {
                    *(_DWORD *)(v334 + 16) = __s1;
                    uint64_t v123 = *(void *)(v334 + 24);
                    *(void *)(v334 + 96) = v123 + v120;
                    *(void *)(v334 + 136) = v123 + 2LL * v120;
                    *(void *)(v334 + 176) = v123 + 3LL * v120;
                    *(void *)(v334 + 216) = v123 + 4LL * v120;
                    *(void *)(v334 + 256) = v123 + 5LL * v120;
                    *(void *)(v334 + 296) = v123 + 6LL * v120;
                    *(void *)(v334 + 336) = v123 + 7LL * v120;
                    *(void *)(v334 + 376) = v123 + 8LL * v120;
                    *(void *)(v334 + 8) = v343;
                    *(_DWORD *)uint64_t v334 = v120;
                    *(void *)(v334 + 56) = v123;
                    *(void *)(v334 + 416) = v123 + 9LL * v120;
                    *(void *)(v334 + 456) = v123 + 10LL * v120;
                    *(void *)(v334 + 496) = v123 + 11LL * v120;
                    *(void *)(v334 + 536) = v123 + 12LL * v120;
                    *(void *)(v334 + 576) = v123 + 13LL * v120;
                    *(void *)(v334 + 616) = v123 + 14LL * v120;
                    *(void *)(v334 + 656) = v123 - v120 + 16LL * v120;
                  }
                }
              }
            }
          }

          goto LABEL_360;
        }

        __s1a = *(void **)(v9 + 776);
        int v87 = *(_DWORD *)(v9 + 784);
        v352[0] = 0LL;
        uint64_t v6 = sub_1813636A8((uint64_t *)v339, 32, v352, 0LL);
        if (!(_DWORD)v6)
        {
          int v88 = v352[0];
          if (!sub_1812B2390((uint64_t)v352[0], 0))
          {
            uint64_t v89 = *((void *)v88 + 16);
            if ((*(_WORD *)(v89 + 20) & 0x9000) != 0)
            {
              sub_1813040AC(v89, v332);
            }

            else
            {
              *(void *)uint64_t v89 = v332;
              *(_WORD *)(v89 + 20) = 4;
            }

            uint64_t v92 = *(void *)(*(void *)v88 + 24LL);
            if (v92) {
              xmmword_18C465410(v92);
            }
          }

          if (!sub_1812B2390((uint64_t)v88, 1u))
          {
            uint64_t v93 = *((void *)v88 + 16);
            if ((*(_WORD *)(v93 + 84) & 0x9000) != 0)
            {
              sub_1813040AC(v93 + 64, v86);
            }

            else
            {
              *(void *)(v93 + 64) = v86;
              *(_WORD *)(v93 + 84) = 4;
            }

            uint64_t v97 = *(void *)(*(void *)v88 + 24LL);
            if (v97) {
              xmmword_18C465410(v97);
            }
          }

          if (sqlite3_step(v88) == 100)
          {
            sqlite3_int64 v322 = sqlite3_column_int64(v88, 1);
            sqlite3_int64 v98 = sqlite3_column_int64(v88, 2);
            int v99 = sqlite3_column_text(v88, 3);
            if (v99)
            {
              int v100 = *v99;
              if ((v100 - 48) > 9)
              {
                uint64_t v104 = 0LL;
                uint64_t v102 = 0LL;
              }

              else
              {
                uint64_t v101 = 0LL;
                uint64_t v102 = 0LL;
                do
                {
                  uint64_t v102 = (v100 - 48) + 10 * v102;
                  unsigned int v103 = v101 + 1;
                  int v100 = v99[++v101];
                }

                while ((v100 - 48) < 0xA);
                uint64_t v104 = v103;
              }

              while (1)
              {
                int v108 = v99[v104];
                if (v108 != 32) {
                  break;
                }
                ++v104;
              }

              BOOL v109 = v108 == 45;
              if (v108 == 45) {
                int v110 = v104 + 1;
              }
              else {
                int v110 = v104;
              }
              uint64_t v111 = 1LL;
              if (v109) {
                uint64_t v111 = -1LL;
              }
              uint64_t v112 = v110;
              int v113 = v99[v110];
              if ((v113 - 48) > 9)
              {
                uint64_t v114 = 0LL;
              }

              else
              {
                uint64_t v114 = 0LL;
                int v115 = &v99[v112 + 1];
                do
                {
                  uint64_t v114 = (v113 - 48) + 10 * v114;
                  int v116 = *v115++;
                  int v113 = v116;
                }

                while ((v116 - 48) < 0xA);
              }

              uint64_t v107 = v114 * v111;
              *(void *)(v334 + 40) = v107;
            }

            else
            {
              uint64_t v102 = 0LL;
              uint64_t v107 = *(void *)(v334 + 40);
            }

            if (v107 < 0)
            {
              *(void *)(v334 + 40) = -v107;
              uint64_t v107 = 1LL;
            }

            *(_BYTE *)(v334 + 48) = v107 == 0;
            int v117 = sqlite3_column_bytes(v88, 4);
            __srca = (char *)sqlite3_column_blob(v88, 4);
            if (!__srca)
            {
              sqlite3_reset(v88);
              if (v117) {
                uint64_t v6 = 7LL;
              }
              else {
                uint64_t v6 = 267LL;
              }
              goto LABEL_360;
            }

            *(void *)&v349[0] = 0LL;
            uint64_t v118 = sub_1813636A8((uint64_t *)v339, 34, (sqlite3_stmt **)v349, 0LL);
            if ((_DWORD)v118)
            {
              uint64_t v6 = v118;
              sqlite3_reset(v88);
              goto LABEL_360;
            }

            uint64_t v124 = *(sqlite3_stmt **)&v349[0];
            if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
            {
              uint64_t v125 = *((void *)v124 + 16);
              if ((*(_WORD *)(v125 + 20) & 0x9000) != 0)
              {
                sub_1813040AC(v125, v102);
              }

              else
              {
                *(void *)uint64_t v125 = v102;
                *(_WORD *)(v125 + 20) = 4;
              }

              uint64_t v126 = *(void *)(*(void *)v124 + 24LL);
              if (v126) {
                xmmword_18C465410(v126);
              }
            }

            int v127 = sqlite3_step(v124);
            BOOL v128 = v127 == 100;
            uint64_t v6 = sqlite3_reset(v124);
            if (!(_DWORD)v6 && v127 == 100)
            {
              v351 = 0LL;
              int v350 = 0;
              uint64_t v129 = sub_181363924(v339, v98, &v351, &v350);
              char v130 = v351;
              if ((_DWORD)v129)
              {
                uint64_t v6 = v129;
                BOOL v128 = 1;
                goto LABEL_282;
              }

              memset((char *)v349 + 8, 0, 48);
              *(void *)&v349[0] = v351;
              DWORD2(v349[0]) = v350;
              if (v351)
              {
                if (*v351) {
                  int v131 = sub_181363B00(v351 + 1, (unint64_t *)&v349[1]) + 1;
                }
                else {
                  int v131 = 1;
                }
                HIDWORD(v349[0]) = v131;
                do
                  uint64_t v6 = sub_18137BDEC((uint64_t *)v349);
                while (!(_DWORD)v6 && *(void *)&v349[0]);
              }

              else
              {
                uint64_t v6 = 0LL;
              }

              uint64_t v132 = *((void *)&v349[1] + 1);
              int v133 = v349[2];
              if (v87 >= SLODWORD(v349[2])) {
                int v134 = v349[2];
              }
              else {
                int v134 = v87;
              }
              if (*((void *)&v349[1] + 1)) {
                BOOL v135 = __s1a == 0LL;
              }
              else {
                BOOL v135 = 1;
              }
              if (!v135 && v134 != 0)
              {
                int v137 = memcmp(__s1a, *((const void **)&v349[1] + 1), v134);
                if (v137)
                {
                  if (v137 <= 0) {
                    BOOL v128 = 0;
                  }
                }

                else if (v133 >= v87)
                {
                  BOOL v128 = 0;
                }

                goto LABEL_275;
              }

              if (SLODWORD(v349[2]) >= v87) {
                BOOL v128 = 0;
              }
              if (*((void *)&v349[1] + 1))
              {
LABEL_275:
                char v138 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v132);
                  --qword_18C468B10;
                  off_18C4653A8(v132);
                  uint64_t v132 = xmmword_18C468B70;
                  if (!(void)xmmword_18C468B70) {
                    goto LABEL_281;
                  }
                  char v138 = &xmmword_18C465410;
                }

                (*v138)(v132);
              }

LABEL_281:
              char v130 = v351;
LABEL_282:
              if (v130)
              {
                uint64_t v139 = (void (**)(char *))&off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_288;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v130);
                --qword_18C468B10;
                off_18C4653A8(v130);
                char v130 = (char *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v139 = (void (**)(char *))&xmmword_18C465410;
LABEL_288:
                  (*v139)(v130);
                }
              }
            }

            if ((_DWORD)v6 || !v128)
            {
LABEL_359:
              uint64_t v106 = sqlite3_reset(v352[0]);
              if ((_DWORD)v6) {
                goto LABEL_360;
              }
            }

            else
            {
              uint64_t v140 = *__srca;
              if ((v140 - 1) >= 0xF)
              {
                sqlite3_reset(v352[0]);
                uint64_t v6 = 267LL;
                goto LABEL_360;
              }

              else {
                int v141 = v102 - v322 + 16;
              }
              int v142 = v141 >> 4;
              *(_DWORD *)uint64_t v334 = v142;
              *(void *)(v334 + 24) = v322;
              *(void *)(v334 + 32) = v102;
              *(void *)(v334 + 8) = v343;
              *(_DWORD *)(v334 + 16) = v86;
              if (v140 <= 0xE)
              {
                unint64_t v143 = 0LL;
                uint64x2_t v144 = (uint64x2_t)vdupq_n_s64(14 - (unint64_t)v140);
                uint64_t v145 = (void *)(v327 + 40LL * v140);
                sqlite3_int64 v146 = v322;
                do
                {
                  int32x2_t v147 = vmovn_s64((int64x2_t)vcgeq_u64( v144,  (uint64x2_t)vorrq_s8( (int8x16_t)vdupq_n_s64(v143),  (int8x16_t)xmmword_1813CDC50)));
                  if ((v147.i8[0] & 1) != 0) {
                    *uint64_t v145 = v142 + v140 * (uint64_t)v142 + v146;
                  }
                  if ((v147.i8[4] & 1) != 0) {
                    v145[5] = (v140 + 2) * (uint64_t)v142 + v146;
                  }
                  v143 += 2LL;
                  v145 += 10;
                  v146 += 2LL * v142;
                }

                while (((16LL - v140) & 0xFFFFFFFFFFFFFFFELL) != v143);
              }

              uint64_t v148 = v334 + 40LL * v140;
              int v151 = *(_DWORD *)(v148 + 92);
              uint64_t v150 = (int *)(v148 + 92);
              int v149 = v151;
              size_t v152 = (uint64_t *)(v150 - 3);
              int v153 = *(void **)(v150 - 3);
              *(void *)(v150 - 9) = v322 + v142 * (int)v140;
              int v154 = *(_DWORD *)(v339 + 456);
              if (v117 > v154) {
                int v154 = v117;
              }
              int v155 = v154 + 20;
              if (v149 < v154 + 20)
              {
                if (sqlite3_initialize() || (uint64_t v156 = sub_18127D33C((uint64_t)v153, v155)) == 0)
                {
                  sqlite3_reset(v352[0]);
                  uint64_t v6 = 7LL;
                  goto LABEL_360;
                }

                int v153 = (void *)v156;
                *uint64_t v150 = v155;
                *size_t v152 = v156;
              }

              memcpy(v153, __srca, v117);
              *(_DWORD *)(v334 + 40LL * v140 + 88) = v117;
              uint64_t v157 = *v152 + v117;
              *(void *)uint64_t v157 = 0LL;
              *(void *)(v157 + 8) = 0LL;
              *(_DWORD *)(v157 + 16) = 0;
              if ((v140 & 0x80000000) == 0)
              {
                while (1)
                {
                  memset(v349, 0, 56);
                  __int128 v158 = *(_BYTE **)(v334 + 40 * v140 + 80);
                  if (!v158)
                  {
LABEL_338:
                    uint64_t v6 = 0LL;
                    goto LABEL_339;
                  }

                  int v159 = *(_DWORD *)(v334 + 40 * v140 + 88);
                  memset(&v349[1], 0, 40);
                  *(void *)&v349[0] = v158;
                  DWORD2(v349[0]) = v159;
                  if (*v158) {
                    int v160 = sub_181363B00(v158 + 1, (unint64_t *)&v349[1]) + 1;
                  }
                  else {
                    int v160 = 1;
                  }
                  HIDWORD(v349[0]) = v160;
                  uint64_t v161 = sub_18137BDEC((uint64_t *)v349);
                  uint64_t v6 = v161;
                  BOOL v162 = v161 == 0;
                  if (*(void *)&v349[0] && !(_DWORD)v161)
                  {
                    do
                    {
                      uint64_t v163 = sub_18137BDEC((uint64_t *)v349);
                      BOOL v162 = v163 == 0;
                      if (*(void *)&v349[0]) {
                        BOOL v164 = (_DWORD)v163 == 0;
                      }
                      else {
                        BOOL v164 = 0;
                      }
                    }

                    while (v164);
                    uint64_t v6 = v163;
                  }

                  if (!v162) {
                    goto LABEL_339;
                  }
                  int v165 = (void **)(v334 + 40 * v140 + 64);
                  size_t v166 = LODWORD(v349[2]);
                  uint64_t v167 = v334 + 40 * v140;
                  int v169 = *(_DWORD *)(v167 + 76);
                  unsigned int v168 = (_DWORD *)(v167 + 76);
                  if (v169 < SLODWORD(v349[2]))
                  {
                    int v170 = *v165;
                    if (sqlite3_initialize() || (uint64_t v171 = sub_18127D33C((uint64_t)v170, (int)v166)) == 0)
                    {
                      uint64_t v6 = 7LL;
                      goto LABEL_339;
                    }

                    *unsigned int v168 = v166;
                    *int v165 = (void *)v171;
                  }

                  *(_DWORD *)(v334 + 40 * v140 + 72) = v166;
                  if (v140 < 1) {
                    goto LABEL_338;
                  }
                  v351 = 0LL;
                  int v350 = 0;
                  unsigned int v172 = v140 - 1;
                  uint64_t v173 = v334 + 40LL * (v140 - 1);
                  sqlite3_int64 v174 = *(void *)&v349[1];
                  *(void *)(v173 + 56) = *(void *)&v349[1];
                  uint64_t v175 = sub_181363924(v339, v174, &v351, &v350);
                  uint64_t v6 = v175;
                  int v176 = v350;
                  int v177 = *(_DWORD *)(v339 + 456);
                  if (v350 > v177) {
                    int v177 = v350;
                  }
                  if (!(_DWORD)v175)
                  {
                    uint64_t v178 = (void **)(v173 + 80);
                    int v179 = v177 + 20;
                    uint64_t v180 = v334 + 40LL * v172;
                    int v182 = *(_DWORD *)(v180 + 92);
                    signed __int8 v181 = (_DWORD *)(v180 + 92);
                    uint64_t v183 = *v178;
                    if (v182 < v177 + 20)
                    {
                      if (sqlite3_initialize() || (uint64_t v187 = sub_18127D33C((uint64_t)v183, v179)) == 0)
                      {
                        uint64_t v6 = 7LL;
                        uint64_t v184 = v351;
                        if (!v351) {
                          goto LABEL_339;
                        }
                        goto LABEL_353;
                      }

                      uint64_t v183 = (void *)v187;
                      _DWORD *v181 = v179;
                      *uint64_t v178 = (void *)v187;
                    }

                    memcpy(v183, v351, v176);
                    uint64_t v6 = 0LL;
                    *(_DWORD *)(v334 + 40LL * v172 + 88) = v176;
                    uint64_t v188 = (char *)*v178 + v176;
                    *(void *)uint64_t v188 = 0LL;
                    *((void *)v188 + 1) = 0LL;
                    *((_DWORD *)v188 + 4) = 0;
                  }

                  uint64_t v184 = v351;
                  if (!v351) {
                    goto LABEL_339;
                  }
LABEL_353:
                  uint64_t v189 = (void (**)(char *))&off_18C4653A8;
                  if (!dword_18C465380) {
                    goto LABEL_358;
                  }
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v184);
                  --qword_18C468B10;
                  off_18C4653A8(v184);
                  uint64_t v184 = (char *)xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    uint64_t v189 = (void (**)(char *))&xmmword_18C465410;
LABEL_358:
                    (*v189)(v184);
                  }

LABEL_339:
                  uint64_t v185 = *((void *)&v349[1] + 1);
                  if (*((void *)&v349[1] + 1))
                  {
                    unint64_t v186 = &off_18C4653A8;
                    if (dword_18C465380)
                    {
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8[0] -= (int)off_18C4653B8(v185);
                      --qword_18C468B10;
                      off_18C4653A8(v185);
                      uint64_t v185 = xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70) {
                        goto LABEL_346;
                      }
                      unint64_t v186 = &xmmword_18C465410;
                    }

                    (*v186)(v185);
                  }

LABEL_346:
                  BOOL v25 = v140-- < 1;
                  if (v25 || (_DWORD)v6) {
                    goto LABEL_359;
                  }
                }
              }

              BOOL v105 = v352[0];
LABEL_199:
              uint64_t v106 = sqlite3_reset(v105);
            }

            uint64_t v6 = v106;
            goto LABEL_360;
          }

          BOOL v105 = v88;
          goto LABEL_199;
        }

LABEL_360:
        unsigned int v348 = v6;
        if ((_DWORD)v6) {
          goto LABEL_361;
        }
        if (!*(_DWORD *)v334)
        {
          uint64_t v6 = 0LL;
          goto LABEL_361;
        }

        if (!(_DWORD)v50)
        {
LABEL_460:
          int v219 = *(_DWORD *)(v334 + 4);
LABEL_461:
          v342 += ~v219;
          uint64_t v279 = sub_18137B0CC(v339, v343, v341, &v347);
          unsigned int v348 = v279;
          if (v347)
          {
            sub_18137BCC8((uint64_t)&v345, v343, v347, &v348);
            int v338 = 1;
            uint64_t v6 = v348;
            goto LABEL_362;
          }

          uint64_t v6 = v279;
          goto LABEL_464;
        }

        uint64_t v191 = v334;
        do
        {
          int v192 = *(unsigned __int8 **)(v191 + 776);
          signed int v193 = *(_DWORD *)(v191 + 784);
          signed int v194 = *(_DWORD *)(v191 + 72);
          if (v194 >= v193) {
            uint64_t v195 = v193;
          }
          else {
            uint64_t v195 = v194;
          }
          if ((int)v195 < 1)
          {
            LODWORD(v195) = 0;
          }

          else
          {
            uint64_t v196 = 0LL;
            while (*(unsigned __int8 *)(*(void *)(v191 + 64) + v196) == v192[v196])
            {
              if (v195 == ++v196) {
                goto LABEL_377;
              }
            }

            LODWORD(v195) = v196;
          }

LABEL_377:
          unint64_t v197 = (v193 - v195);
          if ((int)v197 < 1)
          {
            uint64_t v6 = 267LL;
            goto LABEL_397;
          }

          int v198 = 0;
          uint64_t v199 = *(const void **)(v191 + 792);
          int v200 = *(_DWORD *)(v191 + 800);
          unint64_t v201 = (int)v195;
          int v202 = v193 + v200 + 1;
          int v203 = v202 - v195;
          int v204 = v193 + v200 + 2;
          int v205 = v204 - v195;
          do
          {
            int v206 = v203;
            int v207 = v205;
            ++v198;
            ++v203;
            ++v205;
            BOOL v25 = v201 > 0x7F;
            v201 >>= 7;
          }

          while (v25);
          do
          {
            int v208 = v207;
            ++v206;
            ++v207;
            BOOL v25 = v197 > 0x7F;
            v197 >>= 7;
          }

          while (v25);
          unint64_t v209 = *(int *)(v191 + 800);
          do
          {
            ++v208;
            BOOL v25 = v209 > 0x7F;
            v209 >>= 7;
          }

          while (v25);
          signed int v210 = *(_DWORD *)(v191 + 88);
          int v211 = v210 + v208;
          if (v210 < 1 || v211 <= *(_DWORD *)(v339 + 456))
          {
            *(void *)(v191 + 40) += v208;
          }

          else
          {
            v318 = *(const void **)(v191 + 792);
            unint64_t v319 = *(int *)(v191 + 800);
            unint64_t v320 = *(int *)(v191 + 784);
            uint64_t v6 = sub_181377C44((uint64_t *)v339, *(void *)(v191 + 56), *(char **)(v191 + 80), v210);
            ++*(_DWORD *)(v191 + 4);
            if (!(_DWORD)v6)
            {
              unsigned int v220 = v195 + 1;
              unint64_t v221 = *(void *)(v191 + 56);
              uint64_t v222 = 1LL;
              int v323 = v195 + 1;
              while (1)
              {
                uint64_t v223 = v191 + 40 * v222;
                int v226 = *(_DWORD *)(v223 + 72);
                v225 = (_DWORD *)(v223 + 72);
                unsigned int v224 = v226;
                v321 = (void **)(v225 - 2);
                else {
                  uint64_t v227 = v224;
                }
                if ((int)v227 < 1)
                {
                  LODWORD(v227) = 0;
                }

                else
                {
                  uint64_t v228 = 0LL;
                  while (*(unsigned __int8 *)(*((void *)v225 - 1) + v228) == v192[v228])
                  {
                    if (v227 == ++v228) {
                      goto LABEL_418;
                    }
                  }

                  LODWORD(v227) = v228;
                }

LABEL_418:
                unint64_t v229 = v220 - v227;
                if ((int)v229 < 1)
                {
                  uint64_t v6 = 267LL;
                  goto LABEL_386;
                }

                v230 = (uint64_t *)(v225 - 4);
                unint64_t v231 = (int)v227;
                int v232 = v195 + 2 - v227;
                int v233 = v220 - v227;
                unint64_t v234 = v231;
                do
                {
                  int v235 = v232;
                  ++v233;
                  ++v232;
                  BOOL v25 = v234 > 0x7F;
                  v234 >>= 7;
                }

                while (v25);
                unint64_t v236 = v229;
                do
                {
                  ++v235;
                  BOOL v25 = v236 > 0x7F;
                  v236 >>= 7;
                }

                while (v25);
                __s1b = v225;
                uint64_t v237 = v191 + 40 * v222;
                unsigned int v240 = *(_DWORD *)(v237 + 88);
                v239 = (_DWORD *)(v237 + 88);
                unsigned int v238 = v240;
                uint64_t v241 = v334 + 40 * v222;
                uint64_t v242 = sub_181377C44((uint64_t *)v339, *v230, *(char **)(v241 + 80), v238);
                uint64_t v6 = v242;
                uint64_t v243 = 0LL;
                **(_BYTE **)(v241 + 80) = v222;
                uint64_t v244 = *(void *)(v241 + 80);
                unint64_t v245 = v221 + 1;
                do
                {
                  char v246 = v245;
                  *(_BYTE *)(v244 + v243++ + 1) = v245 | 0x80;
                  BOOL v25 = v245 > 0x7F;
                  v245 >>= 7;
                }

                while (v25);
                *(_BYTE *)(v244 + v243) = v246 & 0x7F;
                _DWORD *v239 = v243 + 1;
                unint64_t v221 = (*v230)++;
                _DWORD *__s1b = 0;
                unsigned int v220 = v195 + 1;
                if ((_DWORD)v242) {
                  goto LABEL_455;
                }
                uint64_t v191 = v334;
                if (!v221) {
                  goto LABEL_386;
                }
                if (++v222 == 16)
                {
                  uint64_t v6 = 0LL;
                  goto LABEL_386;
                }
              }

              unint64_t v315 = v231;
              size_t v316 = v229;
              uint64_t v247 = v334 + 40 * v222;
              int __srcb = (uint64_t *)(v247 + 80);
              v317 = (int *)(v247 + 88);
              if (!v238)
              {
                int v248 = *(_DWORD *)(v339 + 456);
                uint64_t v249 = v334 + 40 * v222;
                int v251 = *(_DWORD *)(v249 + 92);
                v250 = (_DWORD *)(v249 + 92);
                char v252 = (_BYTE *)*__srcb;
                if (v251 < v248)
                {
                  if (sqlite3_initialize() || (uint64_t v253 = sub_18127D33C((uint64_t)v252, v248)) == 0)
                  {
LABEL_454:
                    uint64_t v6 = 7LL;
LABEL_455:
                    uint64_t v191 = v334;
                    goto LABEL_386;
                  }

                  char v252 = (_BYTE *)v253;
                  _DWORD *v250 = v248;
                  *int __srcb = v253;
                }

                uint64_t v254 = 0LL;
                *char v252 = v222;
                v255 = (_BYTE *)*__srcb;
                do
                {
                  char v256 = v221;
                  v255[++v254] = v221 | 0x80;
                  BOOL v25 = v221 > 0x7F;
                  v221 >>= 7;
                }

                while (v25);
                v255[v254] = v256 & 0x7F;
                unsigned int v238 = v254 + 1;
                int *v317 = v254 + 1;
              }

              int v257 = v238 + v235;
              uint64_t v258 = v334 + 40 * v222;
              signed int v260 = *(_DWORD *)(v258 + 92);
              uint64_t v259 = (_DWORD *)(v258 + 92);
              if (v260 < (int)(v238 + v235))
              {
                uint64_t v261 = *__srcb;
                if (sqlite3_initialize()) {
                  goto LABEL_454;
                }
                uint64_t v262 = sub_18127D33C(v261, v257);
                if (!v262) {
                  goto LABEL_454;
                }
                *uint64_t v259 = v257;
                *int __srcb = v262;
              }

              uint64_t v263 = v334 + 40 * v222;
              int v265 = *(_DWORD *)(v263 + 76);
              uint64_t v264 = (_DWORD *)(v263 + 76);
              if (v265 <= (int)v195)
              {
                int v277 = *v321;
                if (sqlite3_initialize()) {
                  goto LABEL_454;
                }
                uint64_t v278 = sub_18127D33C((uint64_t)v277, v323);
                if (!v278) {
                  goto LABEL_454;
                }
                *uint64_t v264 = v323;
                _DWORD *v321 = (void *)v278;
              }

              uint64_t v266 = *__srcb;
              int v267 = *v317;
              if (*__s1b)
              {
                uint64_t v268 = 0LL;
                uint64_t v269 = v266 + v267;
                unint64_t v270 = v315;
                do
                {
                  char v271 = v270;
                  *(_BYTE *)(v269 + v268++) = v270 | 0x80;
                  BOOL v25 = v270 > 0x7F;
                  v270 >>= 7;
                }

                while (v25);
                *(_BYTE *)(v269 + v268 - 1) = v271 & 0x7F;
                int v267 = *v317 + v268;
                int *v317 = v267;
                uint64_t v266 = *__srcb;
              }

              uint64_t v272 = 0LL;
              uint64_t v273 = v266 + v267;
              unint64_t v274 = v316;
              do
              {
                char v275 = v274;
                *(_BYTE *)(v273 + v272++) = v274 | 0x80;
                BOOL v25 = v274 > 0x7F;
                v274 >>= 7;
              }

              while (v25);
              *(_BYTE *)(v273 + v272 - 1) = v275 & 0x7F;
              uint64_t v276 = *v317;
              int *v317 = v276 + v272;
              memcpy((void *)(*__srcb + v276 + v272), &v192[v315], v316);
              *v317 += v316;
              memcpy(*v321, v192, v323);
              uint64_t v6 = 0LL;
              _DWORD *__s1b = v323;
              uint64_t v191 = v334;
            }

LABEL_386:
            ++*(void *)(v191 + 56);
            *(_DWORD *)(v191 + 72) = 0;
            *(_DWORD *)(v191 + 88) = 0;
            unint64_t v212 = v320;
            do
            {
              int v211 = v204;
              ++v202;
              ++v204;
              BOOL v25 = v212 > 0x7F;
              v212 >>= 7;
            }

            while (v25);
            unint64_t v213 = v319;
            do
            {
              ++v211;
              BOOL v72 = v213 >= 0x80;
              v213 >>= 7;
            }

            while (v72);
            uint64_t v191 = v334;
            *(void *)(v334 + 40) += v211;
            if ((_DWORD)v6) {
              goto LABEL_397;
            }
            signed int v210 = 0;
            int v200 = v319;
            signed int v193 = v320;
            uint64_t v199 = v318;
          }

          if (*(_DWORD *)(v191 + 92) < v211)
          {
            int v214 = v200;
            __int128 v215 = v199;
            signed int v216 = v193;
            uint64_t v217 = *v330;
            if (sqlite3_initialize())
            {
              uint64_t v6 = 7LL;
LABEL_397:
              unsigned int v348 = v6;
              goto LABEL_404;
            }

            uint64_t v218 = sub_18127D33C(v217, v211);
            if (!v218)
            {
              uint64_t v6 = 7LL;
              uint64_t v191 = v334;
              goto LABEL_397;
            }

            uint64_t v191 = v334;
            *(_DWORD *)(v334 + 92) = v211;
            *(void *)(v334 + 80) = v218;
            signed int v210 = *(_DWORD *)(v334 + 88);
            signed int v193 = v216;
            uint64_t v199 = v215;
            int v200 = v214;
          }

          if (!v210)
          {
            *(_DWORD *)(v191 + 88) = 1;
            **(_BYTE **)(v191 + 80) = 0;
          }

          uint64_t v6 = sub_18137C054((uint64_t)v330, v329, v192, v193, v199, v200);
          unsigned int v348 = v6;
          if (!(_DWORD)v6)
          {
            uint64_t v6 = sub_1813644CC(v339, v341);
            unsigned int v348 = v6;
          }

LABEL_404:
          int v219 = *(_DWORD *)(v191 + 4);
          if (v219 >= v342 && (_DWORD)v6 == 100) {
            goto LABEL_461;
          }
        }

        while ((_DWORD)v6 == 100);
        if (!(_DWORD)v6) {
          goto LABEL_460;
        }
LABEL_361:
        if (v347)
        {
LABEL_362:
          int v190 = 0;
          *(void *)(v334 + 40) = -*(void *)(v334 + 40);
          goto LABEL_465;
        }

LABEL_464:
        int v190 = 1;
LABEL_465:
        uint64_t v10 = &qword_18C467E20[60];
        unsigned int v280 = 15;
        while (2)
        {
          uint64_t v281 = v280;
          if (*(int *)(v334 + 40LL * v280 + 88) <= 0)
          {
            uint64_t v282 = *(void *)(v334 + 40LL * v280 + 80);
            if (v282)
            {
              v283 = &off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_475;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v282);
              --qword_18C468B10;
              off_18C4653A8(v282);
              uint64_t v282 = xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                v283 = &xmmword_18C465410;
LABEL_475:
                (*v283)(v282);
              }
            }

            uint64_t v284 = *(void *)(v334 + 40LL * v281 + 64);
            if (v284)
            {
              int v285 = &off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_466;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v284);
              --qword_18C468B10;
              off_18C4653A8(v284);
              uint64_t v284 = xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                int v285 = &xmmword_18C465410;
LABEL_466:
                (*v285)(v284);
              }
            }

            unsigned int v280 = v281 - 1;
            if (!(_DWORD)v281) {
              goto LABEL_508;
            }
            continue;
          }

          break;
        }

        if (!v280)
        {
          if (!(_DWORD)v6)
          {
            v288 = *(_BYTE **)(v334 + 120);
            if (!sqlite3_initialize())
            {
              uint64_t v293 = sub_18127D33C((uint64_t)v288, 11LL);
              if (v293)
              {
                v288 = (_BYTE *)v293;
                *(_DWORD *)(v334 + 132) = 11;
                *(void *)(v334 + 120) = v293;
LABEL_513:
                uint64_t v294 = 0LL;
                _BYTE *v288 = 1;
                uint64_t v295 = *(void *)(v334 + 120);
                unint64_t v296 = *(void *)(v334 + 56);
                do
                {
                  char v297 = v296;
                  *(_BYTE *)(v295 + v294++ + 1) = v296 | 0x80;
                  BOOL v25 = v296 > 0x7F;
                  v296 >>= 7;
                }

                while (v25);
                uint64_t v6 = 0LL;
                *(_BYTE *)(v295 + v294) = v297 & 0x7F;
                *(_DWORD *)(v334 + 128) = v294 + 1;
                goto LABEL_516;
              }
            }

            uint64_t v6 = 7LL;
          }

LABEL_516:
          uint64_t v281 = 1LL;
          goto LABEL_517;
        }

        if ((int)v280 >= 1)
        {
LABEL_517:
          uint64_t v298 = v281;
          v299 = v328;
          while (1)
          {
            uint64_t v301 = *((void *)v299 - 1);
            if (v301)
            {
              v302 = &off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_532;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v301);
              --qword_18C468B10;
              off_18C4653A8(v301);
              uint64_t v301 = xmmword_18C468B70;
              if ((void)xmmword_18C468B70) {
                break;
              }
            }

LABEL_533:
            uint64_t v303 = *((void *)v299 - 3);
            if (v303)
            {
              v304 = &off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v303);
                --qword_18C468B10;
                off_18C4653A8(v303);
                uint64_t v303 = xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_519;
                }
                v304 = &xmmword_18C465410;
              }

              (*v304)(v303);
            }

LABEL_519:
            v299 += 10;
            if (!--v298) {
              goto LABEL_484;
            }
          }

          v302 = &xmmword_18C465410;
LABEL_532:
          (*v302)(v301);
          goto LABEL_533;
        }

uint64_t sub_18137B0CC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 < 1)
  {
    int v7 = 0;
    goto LABEL_127;
  }

  int v7 = 0;
  for (int i = *(_DWORD *)(a3 + 8); ; --i)
  {
    if (v6 < 1)
    {
      uint64_t v10 = 0LL;
      if (!MEMORY[0x28]) {
        break;
      }
      goto LABEL_11;
    }

    unint64_t v9 = 0LL;
    do
      uint64_t v10 = *(int **)(*(void *)a3 + 8 * v9++);
    while (*v10 != i - 1 && v9 < v6);
    if (!*((void *)v10 + 5)) {
      break;
    }
LABEL_11:
    int v12 = v7;
    uint64_t v13 = (const void *)*((void *)v10 + 10);
    int v14 = v10[18];
    uint64_t v15 = *v10;
    pStmt = 0LL;
    uint64_t v95 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    unint64_t v90 = 0LL;
    sqlite3_int64 iRow = 0LL;
    uint64_t v16 = sub_1813636A8((uint64_t *)v5, 32, &v90, 0LL);
    if (!(_DWORD)v16)
    {
      uint64_t v24 = v90;
      if (!sub_1812B2390((uint64_t)v90, 0))
      {
        uint64_t v25 = *((void *)v24 + 16);
        if ((*(_WORD *)(v25 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v25, a2);
        }

        else
        {
          *(void *)uint64_t v25 = a2;
          *(_WORD *)(v25 + 20) = 4;
        }

        uint64_t v26 = *(void *)(*(void *)v24 + 24LL);
        if (v26) {
          xmmword_18C465410(v26);
        }
      }

      if (!sub_1812B2390((uint64_t)v24, 1u))
      {
        uint64_t v27 = *((void *)v24 + 16);
        if ((*(_WORD *)(v27 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v27 + 64, v15);
        }

        else
        {
          *(void *)(v27 + 64) = v15;
          *(_WORD *)(v27 + 84) = 4;
        }

        uint64_t v28 = *(void *)(*(void *)v24 + 24LL);
        if (v28) {
          xmmword_18C465410(v28);
        }
      }

      if (sqlite3_step(v24) != 100)
      {
        uint64_t v32 = sqlite3_reset(v24);
        uint64_t v33 = 0LL;
        goto LABEL_65;
      }

      uint64_t v85 = v15;
      uint64_t v29 = (char *)sqlite3_column_blob(v24, 4);
      int v30 = sqlite3_column_bytes(v24, 4);
      sqlite3_int64 v83 = sqlite3_column_int64(v24, 1);
      uint64_t v31 = v29;
      uint64_t v15 = v85;
      uint64_t v16 = sub_18137C29C(v31, v30, (uint64_t)&pStmt, v13, v14, &iRow);
      uint64_t v32 = sqlite3_reset(v24);
      if (!(_DWORD)v16)
      {
        uint64_t v33 = 0LL;
        if ((_DWORD)v32) {
          goto LABEL_65;
        }
        sqlite3_int64 v34 = iRow;
        if (!iRow) {
          goto LABEL_65;
        }
        while (1)
        {
          uint64_t v33 = v34;
          uint64_t v89 = 0LL;
          int v88 = 0;
          uint64_t v16 = sub_181363924(v5, v34, &v89, &v88);
          if ((_DWORD)v16 || (uint64_t v16 = sub_18137C29C(v89, v88, (uint64_t)&v92, v13, v14, &iRow), (_DWORD)v16))
          {
            uint64_t v35 = v89;
            if (!v89) {
              goto LABEL_59;
            }
          }

          else
          {
            uint64_t v16 = sub_181377C44((uint64_t *)v5, v33, (char *)v92, v93);
            uint64_t v35 = v89;
            if (!v89) {
              goto LABEL_59;
            }
          }

          int v36 = (void (**)(char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v35);
            --qword_18C468B10;
            off_18C4653A8(v35);
            uint64_t v35 = (char *)xmmword_18C468B70;
            uint64_t v5 = a1;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_59;
            }
            int v36 = (void (**)(char *))&xmmword_18C465410;
          }

          (*v36)(v35);
LABEL_59:
          if (!(_DWORD)v16)
          {
            sqlite3_int64 v34 = iRow;
            if (iRow) {
              continue;
            }
          }

          uint64_t v15 = v85;
          if (!(_DWORD)v16)
          {
            uint64_t v89 = 0LL;
            uint64_t v32 = sub_1813636A8((uint64_t *)v5, 17, (sqlite3_stmt **)&v89, 0LL);
            if (!(_DWORD)v32)
            {
              int v39 = (sqlite3_stmt *)v89;
              if (!sub_1812B2390((uint64_t)v89, 0))
              {
                uint64_t v40 = *((void *)v39 + 16);
                if ((*(_WORD *)(v40 + 20) & 0x9000) != 0)
                {
                  sub_1813040AC(v40, v83);
                }

                else
                {
                  *(void *)uint64_t v40 = v83;
                  *(_WORD *)(v40 + 20) = 4;
                }

                uint64_t v57 = *(void *)(*(void *)v39 + 24LL);
                if (v57) {
                  xmmword_18C465410(v57);
                }
              }

              if (!sub_1812B2390((uint64_t)v39, 1u))
              {
                uint64_t v58 = v33 - 1;
                uint64_t v59 = *((void *)v39 + 16);
                if ((*(_WORD *)(v59 + 84) & 0x9000) != 0)
                {
                  sub_1813040AC(v59 + 64, v58);
                }

                else
                {
                  *(void *)(v59 + 64) = v58;
                  *(_WORD *)(v59 + 84) = 4;
                }

                uint64_t v60 = *(void *)(*(void *)v39 + 24LL);
                if (v60) {
                  xmmword_18C465410(v60);
                }
              }

              sqlite3_step(v39);
              uint64_t v32 = sqlite3_reset(v39);
            }

uint64_t sub_18137BCC8(uint64_t result, unint64_t a2, int a3, _DWORD *a4)
{
  if (!*a4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(int *)(result + 8);
    uint64_t v8 = v7 + 20;
    uint64_t v10 = *(void *)result;
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C(v10, v8)) == 0)
    {
      *a4 = 7;
      return result;
    }

    *(_DWORD *)(v6 + 12) = v8;
    *(void *)uint64_t v6 = result;
    if (!*a4)
    {
LABEL_7:
      uint64_t v11 = 0LL;
      uint64_t v12 = *(void *)v6 + *(int *)(v6 + 8);
      do
      {
        char v13 = a2;
        *(_BYTE *)(v12 + v11++) = a2 | 0x80;
        BOOL v14 = a2 > 0x7F;
        a2 >>= 7;
      }

      while (v14);
      uint64_t v15 = 0LL;
      *(_BYTE *)(v12 + v11 - 1) = v13 & 0x7F;
      int v16 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = v16 + v11;
      uint64_t v17 = *(void *)v6;
      unint64_t v18 = a3;
      uint64_t v19 = *(void *)v6 + v16 + (int)v11;
      do
      {
        char v20 = v18;
        *(_BYTE *)(v19 + v15++) = v18 | 0x80;
        BOOL v14 = v18 > 0x7F;
        v18 >>= 7;
      }

      while (v14);
      *(_BYTE *)(v17 + v16 + (int)v11 + v15 - 1) = v20 & 0x7F;
      *(_DWORD *)(v6 + 8) += v15;
    }
  }

  return result;
}

uint64_t sub_18137BDEC(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 8);
  uint64_t v3 = a1[2];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    a1[2] = v3 + 1;
  }
  int v5 = *((_DWORD *)a1 + 2);
  int v6 = *((_DWORD *)a1 + 3);
  if (v6 >= v5)
  {
    uint64_t result = 0LL;
    *a1 = 0LL;
    return result;
  }

  uint64_t v7 = *a1;
  if (v2)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 + v6);
    int v9 = *v8;
    if ((char)*v8 < 0)
    {
      int v9 = v9 & 0x7F | (v8[1] << 7);
      if ((char)v8[1] < 0)
      {
        int v9 = v9 & 0x3FFF | (v8[2] << 14);
        if ((char)v8[2] < 0)
        {
          int v9 = v9 & 0x1FFFFF | (v8[3] << 21);
          if ((char)v8[3] < 0)
          {
            int v9 = v9 & 0xFFFFFFF | ((v8[4] & 7) << 28);
            int v10 = 5;
          }

          else
          {
            int v10 = 4;
          }
        }

        else
        {
          int v10 = 3;
        }
      }

      else
      {
        int v10 = 2;
      }
    }

    else
    {
      int v10 = 1;
    }

    v6 += v10;
    *((_DWORD *)a1 + 3) = v6;
  }

  else
  {
    int v9 = 0;
  }

  uint64_t v12 = (unsigned __int8 *)(v7 + v6);
  unsigned int v13 = *v12;
  if ((char)*v12 < 0)
  {
    unsigned int v13 = v13 & 0x7F | (v12[1] << 7);
    if ((char)v12[1] < 0)
    {
      unsigned int v13 = v13 & 0x3FFF | (v12[2] << 14);
      if ((char)v12[2] < 0)
      {
        unsigned int v13 = v13 & 0x1FFFFF | (v12[3] << 21);
        if ((char)v12[3] < 0)
        {
          unsigned int v13 = v13 & 0xFFFFFFF | ((v12[4] & 7) << 28);
          int v14 = 5;
        }

        else
        {
          int v14 = 4;
        }
      }

      else
      {
        int v14 = 3;
      }
    }

    else
    {
      int v14 = 2;
    }
  }

  else
  {
    int v14 = 1;
  }

  int v15 = v14 + v6;
  *((_DWORD *)a1 + 3) = v15;
  if (v9 > v2) {
    return 267LL;
  }
  unsigned int v17 = v13 + v9;
  uint64_t v18 = a1[3];
  if (*((_DWORD *)a1 + 9) >= (signed int)(v13 + v9))
  {
    if (!v18) {
      return 0LL;
    }
  }

  else
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v19 = sub_18127D33C(v18, v13 + v9);
    if (!v19) {
      return 7LL;
    }
    uint64_t v18 = v19;
    *((_DWORD *)a1 + 9) = v17;
    a1[3] = v19;
    uint64_t v7 = *a1;
    int v15 = *((_DWORD *)a1 + 3);
  }

  memcpy((void *)(v18 + v9), (const void *)(v7 + v15), v13);
  *((_DWORD *)a1 + 8) = v17;
  unint64_t v20 = *((int *)a1 + 3) + (unint64_t)v13;
  *((_DWORD *)a1 + 3) = v20;
  if (a1[2]) {
    return 0LL;
  }
  uint64_t v21 = (_BYTE *)(*a1 + v20);
  if ((char)*v21 < 0)
  {
    int v23 = sub_1813638B4(v21, (int *)a1 + 12);
    LODWORD(v20) = *((_DWORD *)a1 + 3);
    int v22 = *((_DWORD *)a1 + 12);
  }

  else
  {
    int v22 = *v21;
    *((_DWORD *)a1 + 12) = v22;
    int v23 = 1;
  }

  int v24 = v20 + v23;
  *((_DWORD *)a1 + 3) = v24;
  if (*((_DWORD *)a1 + 2) - v24 < v22) {
    return 267LL;
  }
  uint64_t result = 0LL;
  a1[5] = *a1 + v24;
  *((_DWORD *)a1 + 3) = v22 + v24;
  return result;
}

uint64_t sub_18137C054( uint64_t a1, uint64_t *a2, unsigned __int8 *__src, signed int a4, const void *a5, int a6)
{
  int v12 = *((_DWORD *)a2 + 2);
  unsigned int v13 = (unsigned __int8 *)*a2;
  if (*((_DWORD *)a2 + 3) >= a4)
  {
    unsigned int v15 = *((_DWORD *)a2 + 2);
  }

  else
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v24 = sub_18127D33C((uint64_t)v13, a4);
    if (!v24) {
      return 7LL;
    }
    unsigned int v13 = (unsigned __int8 *)v24;
    *((_DWORD *)a2 + 3) = a4;
    *a2 = v24;
    unsigned int v15 = *((_DWORD *)a2 + 2);
  }

  else {
    uint64_t v16 = v15;
  }
  if ((int)v16 < 1)
  {
    LODWORD(v16) = 0;
  }

  else
  {
    uint64_t v17 = 0LL;
    while (v13[v17] == __src[v17])
    {
      if (v16 == ++v17) {
        goto LABEL_15;
      }
    }

    LODWORD(v16) = v17;
  }

uint64_t sub_18137C29C(char *a1, int a2, uint64_t a3, const void *a4, int a5, void *a6)
{
  v43[0] = 0LL;
  v43[1] = 0LL;
  if (a2 < 1) {
    return 267LL;
  }
  int v12 = *a1;
  if (*(_DWORD *)(a3 + 12) < a2)
  {
    unsigned int v13 = *(_BYTE **)a3;
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v15 = sub_18127D33C((uint64_t)v13, a2);
    if (!v15) {
      return 7LL;
    }
    *(_DWORD *)(a3 + 12) = a2;
    *(void *)a3 = v15;
  }

  *(_DWORD *)(a3 + 8) = 0;
  *(_OWORD *)int __s1 = 0u;
  __int128 v48 = 0u;
  uint64_t v49 = 0LL;
  uint64_t v44 = a1;
  int v45 = a2;
  if (*a1) {
    int v16 = sub_181363B00(a1 + 1, (unint64_t *)__s1) + 1;
  }
  else {
    int v16 = 1;
  }
  int v46 = v16;
  while (1)
  {
    uint64_t v14 = sub_18137BDEC((uint64_t *)&v44);
    if ((_DWORD)v14 || !v44) {
      break;
    }
    uint64_t v19 = (unsigned __int8 *)__s1[1];
    signed int v20 = v48;
    if (*(_DWORD *)(a3 + 8))
    {
LABEL_14:
      uint64_t v18 = sub_18137C054(a3, v43, v19, v20, *((const void **)&v48 + 1), v49);
      if ((_DWORD)v18)
      {
        uint64_t v14 = v18;
        break;
      }
    }

    else
    {
      else {
        int v21 = v48;
      }
      if (!a4 || (__s1[1] ? (BOOL v22 = v21 == 0) : (BOOL v22 = 1), v22 || (v23 = memcmp(__s1[1], a4, v21)) == 0)) {
        int v23 = v20 - a5;
      }
      if (v12) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 0;
      }
      char v25 = v24;
      if ((v23 & 0x80000000) == 0 && (v25 & 1) == 0)
      {
        uint64_t v26 = __s1[0];
        **(_BYTE **)a3 = *a1;
        if (v26)
        {
          uint64_t v27 = 0LL;
          char v28 = *(_BYTE **)a3;
          unint64_t v29 = (unint64_t)v26;
          do
          {
            char v30 = v29;
            v28[++v27] = v29 | 0x80;
            BOOL v31 = v29 > 0x7F;
            v29 >>= 7;
          }

          while (v31);
          v28[v27] = v30 & 0x7F;
          int v17 = v27 + 1;
        }

        else
        {
          int v17 = 1;
        }

        *(_DWORD *)(a3 + 8) = v17;
        *a6 = v26;
        goto LABEL_14;
      }
    }
  }

  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t v32 = __s1[0];
    **(_BYTE **)a3 = *a1;
    if (v32)
    {
      uint64_t v33 = 0LL;
      char v34 = *(_BYTE **)a3;
      unint64_t v35 = (unint64_t)v32;
      do
      {
        char v36 = v35;
        v34[++v33] = v35 | 0x80;
        BOOL v31 = v35 > 0x7F;
        v35 >>= 7;
      }

      while (v31);
      v34[v33] = v36 & 0x7F;
      int v37 = v33 + 1;
    }

    else
    {
      int v37 = 1;
    }

    *(_DWORD *)(a3 + 8) = v37;
    *a6 = v32;
  }

  uint64_t v38 = __s1[1];
  if (__s1[1])
  {
    int v39 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_54;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v38);
    --qword_18C468B10;
    off_18C4653A8(v38);
    uint64_t v38 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v39 = (void (**)(void *))&xmmword_18C465410;
LABEL_54:
      (*v39)(v38);
    }
  }

  uint64_t v40 = v43[0];
  if (v43[0])
  {
    uint64_t v41 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_61;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v40);
    --qword_18C468B10;
    off_18C4653A8(v40);
    uint64_t v40 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v41 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_61:
      (*v41)(v40);
    }
  }

  return v14;
}

uint64_t sub_18137C5F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 461) != 2) {
    return 0LL;
  }
  int v2 = sqlite3_mprintf("%s_stat", *(const char **)(a1 + 40));
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = sqlite3_table_column_metadata( *(sqlite3 **)(a1 + 24),  *(const char **)(a1 + 32),  v2,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
    int v5 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      uint64_t v3 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_9;
      }
      int v5 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    (*v5)(v3);
LABEL_9:
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 461) = v4 == 0;
    return result;
  }

  return 7LL;
}

void sub_18137C718(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v270 = *MEMORY[0x1895F89C0];
  if (a2 >= 7)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368( *(void *)a1,  "wrong number of arguments to function snippet()",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      sub_1812CF36C(97407);
    }

    return;
  }

  LODWORD(v6) = 15;
  LODWORD(v7) = -1;
  uint64_t v8 = "<b>...</b>";
  int v9 = "</b>";
  switch(a2)
  {
    case 2:
      goto LABEL_36;
    case 3:
      goto LABEL_28;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_14;
    case 6:
      uint64_t v10 = a3[5];
      if (!v10)
      {
        sub_1812CF36C(89717);
        goto LABEL_13;
      }

      __int16 v11 = *(_WORD *)(v10 + 20);
      if ((v11 & 0x24) != 0)
      {
        double v6 = *(double *)v10;
        goto LABEL_14;
      }

      if ((v11 & 8) == 0)
      {
        if ((v11 & 0x12) != 0 && *(void *)(v10 + 8))
        {
          LODWORD(v6) = sub_181303DF0(v10);
          goto LABEL_14;
        }

LABEL_315:
          if (v161 < v157 + v237)
          {
            char v190 = v161 - v157;
            if (v161 <= v157) {
              goto LABEL_322;
            }
            uint64_t v191 = &__sa[v244];
            int v192 = HIDWORD(v264) - v244;
            if (HIDWORD(v264) - v244 < 0) {
              int v192 = strlen(&__sa[v244]);
            }
            if (v254 + v192 + 1 < (int)v156)
            {
              size_t v193 = v192;
              goto LABEL_321;
            }

            if (sqlite3_initialize())
            {
LABEL_340:
              int v159 = 7;
              goto LABEL_345;
            }

            size_t v193 = v192;
            unsigned int v245 = v156;
            uint64_t v207 = sub_18127D33C(v131, v192 + (uint64_t)(int)v156 + 100);
            if (!v207) {
              goto LABEL_349;
            }
            uint64_t v131 = v207;
            uint64_t v156 = v192 + (uint64_t)(int)v156 + 100;
LABEL_321:
            memcpy((void *)(v131 + v254), v191, v193);
            *(_BYTE *)(v131 + v254 + (uint64_t)v192) = 0;
            v254 += v192;
            uint64_t v28 = v236;
LABEL_322:
            uint64_t v194 = (1LL << v190) & v145;
            if (!v194) {
              goto LABEL_325;
            }
            int v195 = strlen(v224);
            int v196 = v254;
            if (sqlite3_initialize()) {
              goto LABEL_340;
            }
            unsigned int v245 = v156;
            uint64_t v206 = sub_18127D33C(v131, v195 + (uint64_t)(int)v156 + 100);
            if (!v206) {
              goto LABEL_349;
            }
            uint64_t v131 = v206;
            uint64_t v156 = v195 + (uint64_t)(int)v156 + 100;
            uint64_t v28 = v236;
            int v196 = v254;
LABEL_324:
            uint64_t v197 = v196;
            memcpy((void *)(v131 + v196), v224, v195);
            *(_BYTE *)(v131 + v197 + v195) = 0;
            int v254 = v197 + v195;
LABEL_325:
            int v198 = &__sa[SHIDWORD(v264)];
            int v199 = v264 - HIDWORD(v264);
            if (v254 + v199 + 1 < (int)v156)
            {
              size_t v200 = v199;
              goto LABEL_329;
            }

            if (sqlite3_initialize()) {
              goto LABEL_340;
            }
            size_t v200 = v199;
            unsigned int v245 = v156;
            uint64_t v205 = sub_18127D33C(v131, v199 + (uint64_t)(int)v156 + 100);
            if (v205)
            {
              uint64_t v131 = v205;
              uint64_t v156 = v199 + (uint64_t)(int)v156 + 100;
LABEL_329:
              memcpy((void *)(v131 + v254), v198, v200);
              uint64_t v201 = v254 + (uint64_t)v199;
              *(_BYTE *)(v131 + v201) = 0;
              if (!v194)
              {
                int v254 = v201;
                int v159 = 0;
                goto LABEL_344;
              }

              int v202 = strlen(v222);
              int v203 = v202;
              if ((int)v201 + v202 + 1 < (int)v156)
              {
                size_t v204 = v202;
                goto LABEL_332;
              }

              int v254 = v201;
              if (sqlite3_initialize())
              {
                int v159 = 7;
                goto LABEL_344;
              }

              size_t v204 = v203;
              uint64_t v208 = sub_18127D33C(v131, v203 + (uint64_t)(int)v156 + 100);
              if (v208)
              {
                uint64_t v131 = v208;
                uint64_t v156 = v203 + (uint64_t)(int)v156 + 100;
LABEL_332:
                memcpy((void *)(v131 + v201), v222, v204);
                int v159 = 0;
                int v254 = v201 + v203;
                *(_BYTE *)(v131 + (int)v201 + v203) = 0;
LABEL_344:
                uint64_t v28 = v236;
LABEL_345:
                int v142 = v241;
              }

              else
              {
                int v159 = 7;
                uint64_t v28 = v236;
                int v142 = v241;
              }
            }

            else
            {
LABEL_349:
              int v159 = 7;
              uint64_t v28 = v236;
              int v142 = v241;
              uint64_t v156 = v245;
            }

            int v154 = v247;
            uint64_t v151 = v250;
            int v158 = 1;
            int v244 = v264;
            goto LABEL_270;
          }

          int v210 = v156;
          if (v240 != (_DWORD)v229 - 1)
          {
            int v159 = 0;
            goto LABEL_366;
          }

          int v212 = strlen(v223);
          int v213 = v212;
          if (v254 + v212 + 1 < (int)v156)
          {
            size_t v214 = v212;
            goto LABEL_379;
          }

          if (!sqlite3_initialize())
          {
            size_t v214 = v213;
            uint64_t v219 = sub_18127D33C(v131, v213 + (uint64_t)(int)v156 + 100);
            if (v219)
            {
              uint64_t v131 = v219;
              int v210 = v213 + v156 + 100;
LABEL_379:
              memcpy((void *)(v131 + v254), v223, v214);
              int v211 = v254 + v213;
LABEL_359:
              int v254 = v211;
              int v159 = 0;
              *(_BYTE *)(v131 + v211) = 0;
LABEL_366:
              LODWORD(v156) = v210;
LABEL_367:
              uint64_t v28 = v236;
              int v142 = v241;
              goto LABEL_368;
            }
          }

LABEL_361:
          int v159 = 7;
          goto LABEL_366;
        }

        int v185 = strlen(v223);
        int v183 = v185;
        if (v254 + v185 + 1 < (int)v156)
        {
          size_t v186 = v185;
LABEL_306:
          int v188 = v254;
          memcpy((void *)(v131 + v254), v223, v186);
          uint64_t v28 = v236;
          goto LABEL_312;
        }

        LODWORD(v170) = v156;
        if (!sqlite3_initialize())
        {
          size_t v186 = v183;
          uint64_t v187 = sub_18127D33C(v131, v183 + (uint64_t)(int)v156 + 100);
          if (v187)
          {
            uint64_t v131 = v187;
            uint64_t v156 = v183 + (uint64_t)(int)v156 + 100;
            goto LABEL_306;
          }
        }

LABEL_227:
      int v133 = *(void **)(v28 + 480);
      if (v133)
      {
        int v134 = v43;
        BOOL v135 = (sqlite3_stmt *)v133[3];
        int v136 = (void *)v133[4];
        uint64_t v137 = v136[3];
        if (v137) {
          xmmword_18C465400(v137);
        }
        sub_1812F20DC(v136, v133);
        uint64_t v138 = v136[3];
        if (v138) {
          xmmword_18C465410(v138);
        }
        sqlite3_finalize(v135);
        int v43 = v134;
      }

      *(void *)(v28 + 480) = 0LL;
      if (!v43)
      {
        if (v132)
        {
          uint64_t v129 = sqlite3_free;
          uint64_t v127 = (uint64_t)v132;
          uint64_t v126 = (char *)v131;
          int v128 = -1;
          goto LABEL_242;
        }

        goto LABEL_217;
      }

      if (v132)
      {
        v132[9] = v43;
        if ((*(_WORD *)(*(void *)v132 + 20LL) & 1) != 0)
        {
          switch(v43)
          {
            case 516:
              uint64_t v139 = "abort due to ROLLBACK";
              break;
            case 101:
              uint64_t v139 = "no more rows available";
              break;
            case 100:
              uint64_t v139 = "another row available";
              break;
            default:
              else {
                uint64_t v139 = off_189B6EC30[v43];
              }
              break;
          }

          sub_1812D7A8C((uint64_t)v132, v139, -1, 1u, 0LL);
        }
      }

      else
      {
        sub_1812CF36C(97620);
      }

      if (v131)
      {
        uint64_t v140 = (void (**)(uint64_t))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_262;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v131);
        --qword_18C468B10;
        off_18C4653A8(v131);
        uint64_t v131 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v140 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_262:
          (*v140)(v131);
        }
      }

      return;
    default:
      int v12 = "<b>";
      goto LABEL_46;
  }

void sub_18137DEF4(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v4 = v65;
  int v5 = *(_DWORD **)(v4 + 24);
  if (!v5)
  {
    if (a1)
    {
      int v12 = &byte_1813CEAEE;
      uint64_t v13 = (uint64_t)a1;
      int v14 = 0;
      uint64_t v15 = 0LL;
LABEL_33:
      sub_1812D7A8C(v13, v12, v14, 1u, (uint64_t (*)(uint64_t))v15);
      return;
    }

void sub_18137E690(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *v15;
  int v5 = sqlite3_exec(*(sqlite3 **)(*v15 + 24), "SAVEPOINT fts3", 0LL, 0LL, 0LL);
  if (v5)
  {
    uint64_t v6 = *(void **)(v4 + 480);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }

  int v12 = sub_181376594(v4, 1);
  int v5 = v12;
  if (v12 != 101 && v12 != 0)
  {
    sqlite3_exec(*(sqlite3 **)(v4 + 24), "ROLLBACK TO fts3", 0LL, 0LL, 0LL);
    sqlite3_exec(*(sqlite3 **)(v4 + 24), "RELEASE fts3", 0LL, 0LL, 0LL);
    uint64_t v6 = *(void **)(v4 + 480);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }

  int v14 = sqlite3_exec(*(sqlite3 **)(v4 + 24), "RELEASE fts3", 0LL, 0LL, 0LL);
  if (v14) {
    int v5 = v14;
  }
  uint64_t v6 = *(void **)(v4 + 480);
  if (v6)
  {
LABEL_5:
    uint64_t v7 = (sqlite3_stmt *)v6[3];
    int v8 = (void *)v6[4];
    uint64_t v9 = v8[3];
    if (v9) {
      xmmword_18C465400(v9);
    }
    sub_1812F20DC(v8, v6);
    uint64_t v10 = v8[3];
    if (v10) {
      xmmword_18C465410(v10);
    }
    sqlite3_finalize(v7);
  }

void sub_18137E8E4(uint64_t a1, int a2, uint64_t *a3)
{
  if (a2 < 2) {
    goto LABEL_9;
  }
  uint64_t v6 = a3[1];
  if (!v6) {
    goto LABEL_10;
  }
  int v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) == 0 && *(_BYTE *)(v6 + 22) == 1)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    goto LABEL_10;
  }

  if ((v7 & 1) != 0) {
LABEL_9:
  }
    uint64_t v6 = 0LL;
  else {
    uint64_t v6 = sub_181303998((int *)v6, 1);
  }
LABEL_10:
  uint64_t v8 = (uint64_t)v118;
  if (v6) {
    uint64_t v9 = (const char *)v6;
  }
  else {
    uint64_t v9 = "pcx";
  }
  uint64_t v10 = (_DWORD *)v118[3];
  if (!v10)
  {
    if (a1) {
      sub_1812D7A8C(a1, &byte_1813CEAEE, 0, 0, 0LL);
    }
    else {
      sub_1812CF36C(97366);
    }
    return;
  }

  uint64_t v11 = *v118;
  __int128 v120 = 0u;
  __int128 v121 = 0u;
  unsigned int v119 = v118;
  LODWORD(v120) = *(_DWORD *)(v11 + 48);
  int v12 = (char *)v118[15];
  if (!v12)
  {
LABEL_25:
    LODWORD(pStmt) = 0;
    LODWORD(v124) = 0;
    sub_18137FA74(v10, &v124, (uint64_t (*)(_DWORD *, void, uint64_t))sub_181380334, (uint64_t)&pStmt);
    int v14 = (int)pStmt;
    *(_DWORD *)(v8 + 36) = (_DWORD)pStmt;
    DWORD1(v120) = v14;
    char v15 = *v9;
    if (*v9)
    {
      uint64_t v16 = 0LL;
      int v17 = v120 + 31;
      uint64_t v18 = (v17 >> 5) * v14;
      int v19 = v120 * v14;
      uint64_t v20 = (int)v120 * v14;
      uint64_t v21 = 3 * v19;
      uint64_t v22 = (unsigned __int8 *)(v9 + 1);
      while (2)
      {
        uint64_t v124 = 0LL;
        uint64_t v23 = 1LL;
        switch(v15)
        {
          case 'a':
            uint64_t v23 = (int)v120;
            if (!*(_BYTE *)(v11 + 460)) {
              goto LABEL_54;
            }
            goto LABEL_30;
          case 'b':
            uint64_t v23 = v18;
            goto LABEL_30;
          case 'c':
          case 'p':
            goto LABEL_30;
          case 'l':
            uint64_t v23 = (int)v120;
            if (!*(_BYTE *)(v11 + 462)) {
              goto LABEL_54;
            }
            goto LABEL_30;
          case 'n':
            if (!*(_BYTE *)(v11 + 460)) {
              goto LABEL_54;
            }
            uint64_t v23 = 1LL;
LABEL_30:
            v16 += v23;
            int v24 = *v22++;
            char v15 = v24;
            if (v24) {
              continue;
            }
            goto LABEL_44;
          case 's':
            uint64_t v23 = (int)v120;
            goto LABEL_30;
          case 'x':
            uint64_t v23 = v21;
            goto LABEL_30;
          case 'y':
            uint64_t v23 = v20;
            goto LABEL_30;
          default:
LABEL_54:
            sub_181362330((char **)&v124, "unrecognized matchinfo request: %c", v15);
            uint64_t v34 = (char *)v124;
            if (a1)
            {
              *(_DWORD *)(a1 + 36) = 1;
              sub_181269368(*(void *)a1, v34, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            }

            else
            {
              sub_1812CF36C(97407);
            }

            if (!v34) {
              goto LABEL_232;
            }
            uint64_t v106 = (void (**)(char *))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_227;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v34);
            --qword_18C468B10;
            off_18C4653A8(v34);
            uint64_t v34 = (char *)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v106 = (void (**)(char *))&xmmword_18C465410;
LABEL_227:
              (*v106)(v34);
            }

            break;
        }

        goto LABEL_232;
      }
    }

    uint64_t v16 = 0LL;
LABEL_44:
    size_t v25 = strlen(v9);
    if (sqlite3_initialize() || (uint64_t v30 = 8 * v16 + 36, v31 = v25 + 1, (v32 = (char *)sub_18126F0AC(v31 + v30)) == 0LL))
    {
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      *(void *)(v8 + 120) = 0LL;
      *(_DWORD *)(v8 + 112) = 1;
      int v28 = 7;
      goto LABEL_199;
    }

    int v12 = v32;
    bzero(v32, v31 + v30);
    *((_DWORD *)v12 + 6) = 28;
    *(_DWORD *)&v12[4 * v16 + 28] = ((unint64_t)((v16 << 32) + 0x100000000LL) >> 30) + 28;
    *((_DWORD *)v12 + 1) = v16;
    *((void *)v12 + 2) = &v12[v30];
    memcpy(&v12[v30], v9, v31);
    char v117 = 0;
    *int v12 = 1;
    *(void *)(v8 + 120) = v12;
    *(_DWORD *)(v8 + 112) = 1;
    if (!v12[1]) {
      goto LABEL_52;
    }
    goto LABEL_47;
  }

  if (strcmp(*((const char **)v12 + 2), v9))
  {
    *int v12 = 0;
    if (!v12[1] && !v12[2])
    {
      uint64_t v13 = (uint64_t (**)(void *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
        --qword_18C468B10;
        off_18C4653A8(v12);
        int v12 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_24;
        }
        uint64_t v13 = (uint64_t (**)(void *))&xmmword_18C465410;
      }

      (*v13)(v12);
    }

LABEL_174:
        sqlite3_reset(v54);
        goto LABEL_175;
      case 'n':
        if ((v117 & 1) != 0) {
          goto LABEL_175;
        }
        int v56 = pStmt;
        if (pStmt) {
          goto LABEL_87;
        }
        int v63 = sub_181371DD8(v116, &pStmt);
        if (v63)
        {
          int v60 = 0;
        }

        else
        {
          int v56 = pStmt;
LABEL_87:
          int v57 = sqlite3_column_bytes(v56, 0);
          int64x2_t v58 = sqlite3_column_blob(v56, 0);
          if (v58)
          {
            int v59 = sub_181371EB8(v58, (unint64_t)&v58[v57], &v124);
            int v60 = v124;
            if (v124 < 1 || v59 > v57)
            {
              int v60 = 0;
              int v63 = 267;
            }

            else
            {
              int v63 = 0;
            }
          }

          else
          {
            int v60 = 0;
            int v63 = 267;
          }
        }

        int v123 = v63;
        **((_DWORD **)&v121 + 1) = v60;
        goto LABEL_175;
      case 'p':
        if ((v117 & 1) == 0) {
          *(_DWORD *)uint64_t v33 = DWORD1(v120);
        }
        goto LABEL_175;
      case 's':
        uint64_t v124 = v8;
        uint64_t v125 = 0LL;
        uint64_t v64 = *(_DWORD **)(v8 + 24);
        int v126 = 0;
        int v123 = sub_18137FA74( v64,  &v126,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_18137FA54,  (uint64_t)&v124);
        if (v123) {
          goto LABEL_175;
        }
        uint64_t v65 = *(int *)(v8 + 36);
        if (sqlite3_initialize() || (size_t v70 = 32 * v65, (v71 = (void *)sub_18126F0AC(32 * v65)) == 0LL))
        {
          int v123 = 7;
          goto LABEL_175;
        }

        uint64_t v72 = (uint64_t)v71;
        bzero(v71, v70);
        uint64_t v73 = *(_DWORD **)(v8 + 24);
        LODWORD(v124) = 0;
        sub_18137FA74(v73, &v124, (uint64_t (*)(_DWORD *, void, uint64_t))sub_18138095C, v72);
        uint64_t v74 = DWORD1(v120);
        uint64_t v75 = v72;
        if (SDWORD1(v120) >= 1)
        {
          int v76 = 0;
          uint64_t v77 = (_DWORD *)(v72 + 8);
          do
          {
            v76 -= *(_DWORD *)(*(void *)(*((void *)v77 - 1) + 32LL) + 80LL);
            *uint64_t v77 = v76;
            v77 += 8;
            --v74;
          }

          while (v74);
        }

        uint64_t v78 = 0LL;
        uint64_t v112 = v72 + 16;
        uint64_t v113 = v72;
        break;
      case 'y':
        int v48 = v120;
        int v50 = DWORD1(v120);
LABEL_103:
        bzero(v33, 4LL * v50 * v48);
        int v123 = sub_181380438(*(void *)(v8 + 24), &v119);
        goto LABEL_175;
      default:
        uint64_t v51 = *(_DWORD **)(v8 + 24);
        uint64_t v124 = v8;
        uint64_t v125 = 0LL;
        int v126 = 0;
        int v123 = sub_18137FA74( v51,  &v126,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_18137FA54,  (uint64_t)&v124);
        if (v123) {
          goto LABEL_175;
        }
        if ((v117 & 1) != 0) {
          goto LABEL_80;
        }
        if (!*(void *)(v8 + 40)) {
          goto LABEL_112;
        }
        uint64_t v66 = pStmt;
        if (pStmt) {
          goto LABEL_108;
        }
        int v45 = sub_181371DD8(v116, &pStmt);
        if (v45) {
          goto LABEL_105;
        }
        uint64_t v66 = pStmt;
LABEL_108:
        int v67 = sqlite3_column_bytes(v66, 0);
        int v68 = sqlite3_column_blob(v66, 0);
        if (v68)
        {
          int v69 = sub_181371EB8(v68, (unint64_t)&v68[v67], &v124);
          int v45 = 267;
          if (v124 < 1 || v69 > v67)
          {
LABEL_105:
            int v123 = v45;
          }

          else
          {
            *((void *)&v120 + 1) = v124;
LABEL_112:
            LODWORD(v124) = 0;
            int v123 = sub_18137FA74( v51,  &v124,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_181380604,  (uint64_t)&v119);
            sub_181373E80(v8, &v123);
            if (!v123)
            {
LABEL_80:
              LODWORD(v124) = 0;
              sub_18137FA74( v51,  &v124,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_181380894,  (uint64_t)&v119);
            }
          }
        }

        else
        {
LABEL_116:
          int v123 = 267;
        }

        goto LABEL_175;
    }

    while (SDWORD1(v120) < 1)
    {
      int v86 = 0;
LABEL_157:
      *(_DWORD *)(*((void *)&v121 + 1) + 4 * v78++) = v86;
      if (v78 >= (int)v120)
      {
LABEL_158:
        int v93 = 0;
        goto LABEL_188;
      }
    }

    uint64_t v79 = 0LL;
    int v80 = 0;
    uint64_t v81 = v112;
    while (1)
    {
      int v83 = sub_18137FB04(v8, *(void *)(v81 - 16), v78, (char **)v81);
      if (v83)
      {
        int v93 = v83;
        goto LABEL_187;
      }

      uint64_t v84 = *(char **)v81;
      if (!*(void *)v81) {
        goto LABEL_127;
      }
      *(_DWORD *)(v81 + 8) = *(_DWORD *)(v81 - 8);
      int v85 = sub_181363B00(v84, (unint64_t *)&v124);
      *(_DWORD *)(v81 + 8) = v124 + *(_DWORD *)(v81 + 8) - 2;
      *(void *)uint64_t v81 = &v84[v85];
      ++v80;
LABEL_127:
      ++v79;
      LODWORD(v82) = DWORD1(v120);
      v81 += 32LL;
      if (v79 >= SDWORD1(v120))
      {
        if (v80 >= 1)
        {
          int v86 = 0;
          uint64_t v75 = v113;
          while (2)
          {
            int v88 = 0;
            uint64_t v89 = 0LL;
            uint64_t v90 = v75;
            uint64_t v82 = v82;
            do
            {
              if (*(void *)(v90 + 16))
              {
                if (!v89 || *(_DWORD *)(v90 + 24) < *(_DWORD *)(v89 + 24)) {
                  uint64_t v89 = v90;
                }
                if (v88 && *(_DWORD *)(v90 + 24) != *(_DWORD *)(v90 - 8)) {
                  int v88 = 1;
                }
                else {
                  ++v88;
                }
                if (v88 > v86) {
                  int v86 = v88;
                }
              }

              else
              {
                int v88 = 0;
              }

              v90 += 32LL;
              --v82;
            }

            while (v82);
            if (v89)
            {
              unsigned int v91 = *(char **)(v89 + 16);
              int v92 = sub_181363B00(v91, (unint64_t *)&v124);
              if ((unint64_t)v124 <= 1)
              {
                *(void *)(v89 + 16) = 0LL;
                uint64_t v75 = v113;
                goto LABEL_135;
              }

              *(_DWORD *)(v89 + 24) = v124 + *(_DWORD *)(v89 + 24) - 2;
              *(void *)(v89 + 16) = &v91[v92];
              uint64_t v75 = v113;
            }

            else
            {
LABEL_135:
              BOOL v87 = __OFSUB__(v80--, 1);
              if ((v80 < 0) ^ v87 | (v80 == 0)) {
                goto LABEL_157;
              }
            }

            LODWORD(v82) = DWORD1(v120);
            continue;
          }
        }

        int v86 = 0;
        uint64_t v75 = v113;
        goto LABEL_157;
      }
    }

    *(void *)uint64_t v81 = 0LL;
    int v93 = 267;
LABEL_187:
    uint64_t v75 = v113;
LABEL_188:
    unsigned int v100 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v75);
      --qword_18C468B10;
      off_18C4653A8(v75);
      uint64_t v75 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        unsigned int v100 = &xmmword_18C465410;
        goto LABEL_193;
      }
    }

    else
    {
LABEL_193:
      (*v100)(v75);
    }

    int v123 = v93;
LABEL_175:
    uint64_t v36 = 1LL;
    switch(v9[v35])
    {
      case 'a':
      case 'l':
      case 's':
        uint64_t v36 = (int)v120;
        break;
      case 'b':
        int v99 = v120 + 62;
        uint64_t v36 = SDWORD1(v120) * (uint64_t)(v99 >> 5);
        break;
      case 'c':
      case 'n':
      case 'p':
        break;
      case 'y':
        uint64_t v36 = SDWORD1(v120) * (uint64_t)(int)v120;
        break;
      default:
        uint64_t v36 = 3 * (int)v120 * DWORD1(v120);
        break;
    }

    uint64_t v33 = (char *)(*((void *)&v121 + 1) + 4 * v36);
    *((void *)&v121 + 1) = v33;
    ++v35;
    int v28 = v123;
    if (v123) {
      goto LABEL_196;
    }
  }

  int v28 = 0;
LABEL_196:
  sqlite3_reset(pStmt);
  uint64_t v27 = v114;
  uint64_t v26 = v115;
  if ((v117 & 1) == 0)
  {
    uint64_t v101 = *(int **)(v8 + 120);
    void v101[2] = 1;
    memcpy(&v101[v101[1] + 8], v101 + 7, 4LL * v101[1]);
  }

  if (!v28)
  {
    if (!a1 || (int v103 = 4 * *(_DWORD *)(*(void *)(v8 + 120) + 4LL), v103 < 0)) {
      sub_1812CF36C(97366);
    }
    else {
      sub_1812D7A8C(a1, v115, v103, 0, v114);
    }
    goto LABEL_232;
  }

                          int v17 = sqlite3_bind_value(v53, v95, (const sqlite3_value *)v93);
                        }

                        if (!(_DWORD)v17 && v94)
                        {
                          if (byte_1813C6455[*(_WORD *)(v94 + 20) & 0x3F] - 3 <= 1
                            && !*(void *)(v94 + 8))
                          {
                            return 7LL;
                          }

                          int v17 = sqlite3_bind_value(v53, v91 - 1, (const sqlite3_value *)v94);
                        }

                        uint64_t v89 = v17 == 0;
                        if (!(_DWORD)v17)
                        {
                          ++v90;
                          v91 += 2;
                          if (v90 < v12) {
                            continue;
                          }
                        }

                        goto LABEL_182;
                      }

                      uint64_t v95 = v91;
                      if (v93) {
                        goto LABEL_172;
                      }
                      sub_1812CF36C(97220);
                      uint64_t v95 = v91;
                      goto LABEL_174;
                    }

uint64_t sub_18137F7D4(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  if (!a3)
  {
    sub_1812CF36C(97118);
LABEL_8:
    *a4 = 0LL;
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(a3 + 8);
  *a4 = v8;
  if (v8) {
    return 0LL;
  }
LABEL_9:
  uint64_t v10 = sqlite3_mprintf("illegal first argument to %s", a2);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    sub_181269368(*(void *)a1, v10, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v10) {
      return 1LL;
    }
  }

  else
  {
    sub_1812CF36C(97407);
    if (!v10) {
      return 1LL;
    }
  }

  uint64_t v11 = (void (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
    --qword_18C468B10;
    off_18C4653A8(v10);
    uint64_t v10 = (char *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      return 1LL;
    }
    uint64_t v11 = (void (**)(char *))&xmmword_18C465410;
  }

  (*v11)(v10);
  return 1LL;
}

uint64_t sub_18137F940(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  *(_DWORD *)(v4 + 48LL * a2) = *(_DWORD *)(*(void *)(a1 + 32) + 80LL);
  uint64_t result = sub_18137FB04(*(void *)a3, a1, *(_DWORD *)(a3 + 8), &v17);
  uint64_t v6 = (unsigned __int8 *)v17;
  if (v17)
  {
    *(void *)(v4 + 48LL * a2 + 8) = v17;
    unsigned int v7 = *v6;
    if ((char)*v6 < 0)
    {
      unsigned int v11 = v7 & 0x7F | (v6[1] << 7);
      if ((char)v6[1] < 0)
      {
        unsigned int v12 = v11 & 0x3FFF | (v6[2] << 14);
        if ((char)v6[2] < 0)
        {
          unsigned int v13 = v12 & 0x1FFFFF | (v6[3] << 21);
          if ((char)v6[3] < 0)
          {
            unsigned int v14 = v13 & 0xFFFFFFF | ((v6[4] & 7) << 28);
            uint64_t v8 = 5LL;
            BOOL v9 = v14 >= 2;
            uint64_t v10 = v14 - 2;
            if (!v9) {
              return 267LL;
            }
          }

          else
          {
            uint64_t v8 = 4LL;
            BOOL v9 = v13 >= 2;
            uint64_t v10 = v13 - 2;
            if (!v9) {
              return 267LL;
            }
          }
        }

        else
        {
          uint64_t v8 = 3LL;
          BOOL v9 = v12 >= 2;
          uint64_t v10 = v12 - 2;
          if (!v9) {
            return 267LL;
          }
        }
      }

      else
      {
        uint64_t v8 = 2LL;
        BOOL v9 = v11 >= 2;
        uint64_t v10 = v11 - 2;
        if (!v9) {
          return 267LL;
        }
      }
    }

    else
    {
      uint64_t v8 = 1LL;
      BOOL v9 = v7 >= 2;
      uint64_t v10 = v7 - 2;
      if (!v9) {
        return 267LL;
      }
    }

    char v15 = &v6[v8];
    uint64_t v16 = (void *)(v4 + 48LL * a2);
    v16[2] = v10;
    v16[3] = v15;
    v16[4] = v10;
    v16[5] = v15;
  }

  return result;
}

uint64_t sub_18137FA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 12) + *(_DWORD *)(*(void *)(a1 + 32) + 80LL);
  ++*(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 12) = v3;
  return 0LL;
}

uint64_t sub_18137FA74( _DWORD *a1, _DWORD *a2, uint64_t (*a3)(_DWORD *, void, uint64_t), uint64_t a4)
{
  unsigned int v7 = a1;
  int v8 = *a1;
  if (*a1 == 5)
  {
LABEL_5:
    uint64_t result = a3(v7, *a2, a4);
    ++*a2;
  }

  else
  {
    while (1)
    {
      uint64_t result = sub_18137FA74(*((void *)v7 + 2), a2, a3, a4);
      if (v8 == 2 || (_DWORD)result) {
        break;
      }
      unsigned int v7 = (_DWORD *)*((void *)v7 + 3);
      int v8 = *v7;
      if (*v7 == 5) {
        goto LABEL_5;
      }
    }
  }

  return result;
}

uint64_t sub_18137FB04(uint64_t a1, uint64_t a2, int a3, char **a4)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  *a4 = 0LL;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6 != a3 && v6 < *(_DWORD *)(v5 + 48)) {
    return 0LL;
  }
  uint64_t v10 = a2;
  unsigned int v12 = *(char **)(v4 + 40);
  uint64_t v51 = *(void *)(a2 + 40);
  uint64_t v52 = v12;
  if (v51 == *(void *)(a1 + 48) && !*(_BYTE *)(a2 + 48))
  {
LABEL_91:
    if (v12)
    {
      if (*v12 == 1) {
        goto LABEL_95;
      }
      int v42 = 0;
      while (v42 < a3)
      {
        unsigned int v45 = *v12;
        if (v45 >= 2)
        {
          do
          {
            unsigned int v47 = *++v12;
            unsigned int v46 = v47;
            int v48 = v45 & 0x80;
            LOBYTE(v45) = v47;
          }

          while (v47 & 0xFE | v48);
          unsigned int v45 = v46;
        }

        if (!v45) {
          return 0LL;
        }
LABEL_95:
        int v43 = (unsigned __int8 *)(v12 + 1);
        uint64_t v52 = v12 + 1;
        int v42 = v12[1];
        if (v12[1] < 0)
        {
          int v42 = v42 & 0x7F | (v12[2] << 7);
          if (v12[2] < 0)
          {
            int v42 = v42 & 0x3FFF | (v12[3] << 14);
            if (v12[3] < 0)
            {
              int v42 = v42 & 0x1FFFFF | (v12[4] << 21);
              if (v12[4] < 0)
              {
                int v42 = v42 & 0xFFFFFFF | ((v12[5] & 7) << 28);
                uint64_t v44 = 5LL;
              }

              else
              {
                uint64_t v44 = 4LL;
              }
            }

            else
            {
              uint64_t v44 = 3LL;
            }
          }

          else
          {
            uint64_t v44 = 2LL;
          }
        }

        else
        {
          uint64_t v44 = 1LL;
        }

        unsigned int v12 = (char *)&v43[v44];
        uint64_t v52 = v12;
      }

      uint64_t result = 0LL;
      if (!*v12) {
        unsigned int v12 = 0LL;
      }
      if (v42 != a3) {
        unsigned int v12 = 0LL;
      }
      *a4 = v12;
      return result;
    }

    return 0LL;
  }

  unsigned int v50 = 0;
  uint64_t v13 = *(void *)(a2 + 8);
  if (!v13) {
    return 0LL;
  }
  char v14 = 0;
  int v15 = 0;
  uint64_t v16 = *(unsigned __int8 *)(v5 + 463);
  do
  {
    if (*(_DWORD *)v13 == 4) {
      int v15 = 1;
    }
    if (*(_DWORD *)v13 == 1) {
      uint64_t v10 = v13;
    }
    if (*(_BYTE *)(v13 + 48)) {
      char v14 = 1;
    }
    uint64_t v13 = *(void *)(v13 + 8);
  }

  while (v13);
  if (!v15) {
    return 0LL;
  }
  uint64_t v17 = v10;
  if (*(_BYTE *)(v10 + 50))
  {
    uint64_t v17 = v10;
    do
      uint64_t v17 = *(void *)(v17 + 8);
    while (*(_BYTE *)(v17 + 50));
  }

  if (!*(_DWORD *)(v4 + 56))
  {
LABEL_29:
    if (v14)
    {
      while (!*(_BYTE *)(v17 + 48))
      {
        sub_1813733EC(a1, v17, (int *)&v50);
        uint64_t result = v50;
        if (v50) {
          return result;
        }
      }
    }

    if (!v10) {
      goto LABEL_88;
    }
    int v21 = 1;
    do
    {
      uint64_t v23 = v10;
      if (*(_DWORD *)v10 == 1) {
        uint64_t v23 = *(void *)(v10 + 24);
      }
      uint64_t v24 = *(void *)(v23 + 32);
      size_t v25 = *(char **)(v24 + 64);
      uint64_t v51 = *(void *)(v24 + 72);
      uint64_t v52 = v25;
      uint64_t v26 = *(int *)(v24 + 8);
      if (*(unsigned __int8 *)(a1 + 76) != (_DWORD)v16)
      {
        if ((_DWORD)v26)
        {
          if (v25) {
            BOOL v28 = (unint64_t)v25 <= *(void *)v24;
          }
          else {
            BOOL v28 = 0;
          }
        }

        else
        {
          BOOL v28 = 1;
        }

        unsigned __int8 v49 = v28;
        while (1)
        {
          if (v25)
          {
            uint64_t v29 = v51;
            uint64_t v30 = *(void *)(a1 + 48);
            BOOL v39 = v51 < v30;
            if (!(_DWORD)v16) {
              BOOL v39 = v51 > v30;
            }
            int v33 = v49;
            if (!v39 || v49 != 0) {
              goto LABEL_81;
            }
          }

          else if (v49)
          {
LABEL_35:
            uint64_t v22 = v51;
            *(void *)(v24 + 64) = 0LL;
            *(void *)(v24 + 72) = v22;
            goto LABEL_36;
          }

          sub_1813651BC(v16, *(char **)v24, *(_DWORD *)(v24 + 8), &v52, &v51, (int *)&v53, &v49);
          size_t v25 = v52;
        }
      }

      if ((_DWORD)v26) {
        BOOL v27 = (unint64_t)v25 >= *(void *)v24 + v26;
      }
      else {
        BOOL v27 = 1;
      }
      unsigned __int8 v49 = v27;
      while (1)
      {
LABEL_49:
        while (!v25)
        {
          if (v49) {
            goto LABEL_35;
          }
          uint64_t v38 = *(char **)v24;
          size_t v25 = &v38[(int)sub_181363B00(*(char **)v24, (unint64_t *)&v51)];
          uint64_t v52 = v25;
        }

        uint64_t v29 = v51;
        uint64_t v30 = *(void *)(a1 + 48);
        if (v51 == v30) {
          int v31 = 0;
        }
        else {
          int v31 = -1;
        }
        if (v51 > v30) {
          int v31 = 1;
        }
        int v32 = (_DWORD)v16 ? -v31 : v31;
        int v33 = v49;
        if ((v32 & 0x80000000) == 0 || v49) {
          break;
        }
        int v34 = *v25;
        if (*v25)
        {
          do
          {
            unsigned int v35 = v34 & 0xFFFFFF80;
            int v36 = *++v25;
            int v34 = v36;
          }

          while (v35 | v36);
        }

        do
        {
          if ((unint64_t)++v25 >= *(void *)v24 + *(int *)(v24 + 8))
          {
            unsigned __int8 v49 = 1;
            uint64_t v52 = v25;
            goto LABEL_49;
          }
        }

        while (!*v25);
        v25 += (int)sub_181363B00(v25, (unint64_t *)&v53);
        uint64_t v37 = v53;
        if ((_DWORD)v16) {
          uint64_t v37 = -v53;
        }
        v51 += v37;
        uint64_t v52 = v25;
      }

uint64_t sub_18137FF60(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t *)result;
    while (1)
    {
      if (*a3) {
        return result;
      }
      uint64_t v7 = *(void *)(v4 + 32);
      if (v7) {
        break;
      }
LABEL_6:
      *(void *)(v4 + 40) = 0LL;
      *(_WORD *)(v4 + 48) = 0;
      uint64_t result = sub_18137FF60(v5, *(void *)(v4 + 16), a3);
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return result;
      }
    }

    if (*(_DWORD *)(v7 + 32))
    {
      uint64_t v8 = *(void *)(v7 + 40);
      if (v8)
      {
        BOOL v9 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
          --qword_18C468B10;
          off_18C4653A8(v8);
          uint64_t v8 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_17;
          }
          BOOL v9 = &xmmword_18C465410;
        }

        (*v9)(v8);
      }
    }

uint64_t sub_181380188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_18137FB04(*(void *)a3, a1, *(_DWORD *)(a3 + 8), &v30);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 32) + 80LL);
  uint64_t v7 = v30;
  if (v30)
  {
    int v8 = *v30;
    if (*v30 < 0)
    {
      int v8 = v8 & 0x7F | (v30[1] << 7);
      if (v30[1] < 0)
      {
        int v8 = v8 & 0x3FFF | (v30[2] << 14);
        if (v30[2] < 0)
        {
          int v8 = v8 & 0x1FFFFF | (v30[3] << 21);
          if (v30[3] < 0)
          {
            int v8 = v8 & 0xFFFFFFF | ((v30[4] & 7) << 28);
            uint64_t v9 = 5LL;
          }

          else
          {
            uint64_t v9 = 4LL;
          }
        }

        else
        {
          uint64_t v9 = 3LL;
        }
      }

      else
      {
        uint64_t v9 = 2LL;
      }
    }

    else
    {
      uint64_t v9 = 1LL;
    }

    uint64_t v7 = &v30[v9];
    unint64_t v10 = v8 - 2;
    if ((int)v6 >= 1)
    {
LABEL_14:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t v12 = *(int *)(a3 + 12);
      if (v6 >= 4)
      {
        uint64_t v13 = v6 & 0x7FFFFFFC;
        int32x2_t v15 = vdup_n_s32(v6);
        uint64_t v14 = (v6 & 0xFFFFFFFC) + v12;
        int64x2_t v16 = vdupq_n_s64((unint64_t)v7);
        int64x2_t v17 = vdupq_n_s64(v10);
        uint64_t v18 = (double *)(v11 + 24LL * (int)v12);
        int32x2_t v19 = (int32x2_t)0x100000000LL;
        uint64_t v20 = v6 & 0xFFFFFFFC;
        do
        {
          int32x2_t v21 = vadd_s32(v15, (int32x2_t)vmvn_s8((int8x8_t)v19));
          *(void *)&v22.f64[0] = v21.i32[0];
          *(void *)&v22.f64[1] = v21.i32[1];
          float64x2_t v23 = v22;
          uint64_t v24 = v18 + 12;
          vst3q_f64(v18, *(float64x2x3_t *)v16.i8);
          size_t v25 = v18 + 6;
          int32x2_t v26 = vadd_s32(vsub_s32(v15, v19), (int32x2_t)0x200000002LL);
          *(void *)&v22.f64[0] = v26.i32[0];
          *(void *)&v22.f64[1] = v26.i32[1];
          v31.val[2] = v22;
          v31.val[0] = (float64x2_t)v16;
          v31.val[1] = (float64x2_t)v17;
          vst3q_f64(v25, v31);
          int32x2_t v19 = vadd_s32(v19, (int32x2_t)0x400000004LL);
          uint64_t v18 = v24;
          v20 -= 4LL;
        }

        while (v20);
        if (v13 == v6) {
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
        uint64_t v14 = *(int *)(a3 + 12);
      }

      int v27 = ~(_DWORD)v13 + v6;
      uint64_t v28 = v6 - v13;
      uint64_t v29 = (void *)(v11 + 24 * v14 + 16);
      LODWORD(v14) = v14 + v6 - v13;
      do
      {
        *(v29 - 1) = v10;
        *uint64_t v29 = v27;
        *(v29 - 2) = v7;
        --v27;
        v29 += 3;
        --v28;
      }

      while (v28);
LABEL_21:
      *(_DWORD *)(a3 + 12) = v14;
    }
  }

  else
  {
    unint64_t v10 = 0LL;
  }

  return result;
}

uint64_t sub_181380334(uint64_t a1, int a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 52) = a2;
  return 0LL;
}

uint64_t sub_18138034C(uint64_t result)
{
  uint64_t v1 = (_BYTE *)(result - *(unsigned int *)(result - 4));
  if (v1 + 28 == (_BYTE *)result)
  {
    v1[1] = 0;
    if (*v1) {
      return result;
    }
  }

  else
  {
    v1[2] = 0;
    if (*v1) {
      return result;
    }
  }

  if (!v1[1] && !v1[2])
  {
    int v2 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v1);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v1);
      uint64_t v1 = (_BYTE *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return result;
      }
      int v2 = &xmmword_18C465410;
    }

    return (*v2)(v1);
  }

  return result;
}

uint64_t sub_181380438(uint64_t a1, uint64_t **a2)
{
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v4 = a1;
    while (*(void *)(v4 + 40) == (*a2)[6])
    {
      uint64_t v5 = *(void *)(v4 + 16);
      if (!v5)
      {
        uint64_t v6 = *(void *)(v4 + 32);
        uint64_t v7 = *(unsigned __int8 **)(v6 + 40);
        int v8 = *((unsigned __int8 *)a2 + 24);
        int v9 = *((_DWORD *)a2 + 2);
        int v10 = v9 + 31;
        if (v9 < -31) {
          int v10 = v9 + 62;
        }
        int v11 = v10 >> 5;
        if (v8 != 121) {
          int v9 = v11;
        }
        if (v7)
        {
          int v12 = 0;
          uint64_t v13 = **a2;
          int v14 = v9 * *(_DWORD *)(v4 + 52);
          while (1)
          {
            unsigned int v16 = *v7;
            if (v16 >= 2)
            {
              int v17 = 0;
              do
              {
                int v18 = v16 & 0x80;
                char v19 = *++v7;
                v17 += v18 == 0;
                LOBYTE(v16) = v19;
              }

              while (v19 & 0xFE | v18);
            }

            else
            {
              int v17 = 0;
            }

            int v20 = *(_DWORD *)(v6 + 84);
            if (v20 == v12 || v20 >= *(_DWORD *)(v13 + 48))
            {
              if (v8 == 121)
              {
                *((_DWORD *)a2[4] + v12 + v14) = v17;
              }

              else if (v17)
              {
                int v22 = 1 << v12;
                if (v12 >= -1) {
                  int v23 = v12 + 1;
                }
                else {
                  int v23 = v12 + 32;
                }
                *((_DWORD *)a2[4] + v14 + (v23 >> 5)) |= v22;
              }
            }

            if (*v7 != 1) {
              break;
            }
            uint64_t v24 = v7 + 1;
            int v12 = v7[1];
            if ((char)v7[1] < 0)
            {
              int v12 = v12 & 0x7F | (v7[2] << 7);
              if ((char)v7[2] < 0)
              {
                int v12 = v12 & 0x3FFF | (v7[3] << 14);
                if ((char)v7[3] < 0)
                {
                  int v12 = v12 & 0x1FFFFF | (v7[4] << 21);
                  if ((char)v7[4] < 0)
                  {
                    int v12 = v12 & 0xFFFFFFF | ((v7[5] & 7) << 28);
                    uint64_t v15 = 5LL;
                  }

                  else
                  {
                    uint64_t v15 = 4LL;
                  }
                }

                else
                {
                  uint64_t v15 = 3LL;
                }
              }

              else
              {
                uint64_t v15 = 2LL;
              }
            }

            else
            {
              uint64_t v15 = 1LL;
            }

            uint64_t v7 = &v24[v15];
            uint64_t result = 267LL;
            if (v12 >= *((_DWORD *)a2 + 2)) {
              return result;
            }
          }
        }

        return 0LL;
      }

      uint64_t result = sub_181380438(v5, a2);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v4 = *(void *)(v4 + 24);
      if (*(_BYTE *)(v4 + 48)) {
        return 0LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_181380604(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)a3;
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = 3 * a2 * *(_DWORD *)(a3 + 8);
  uint64_t v7 = **(void **)a3;
  if (*(_BYTE *)(a1 + 50) && **(_DWORD **)(a1 + 8) != 1)
  {
    if (*(int *)(v7 + 48) >= 1)
    {
      uint64_t v12 = 0LL;
      int v13 = *((_DWORD *)v4 + 22);
      int v14 = (_DWORD *)(v5 + 4 * v6 + 8);
      do
      {
        *(v14 - 1) = v13;
        *int v14 = v13;
        ++v12;
        v14 += 3;
      }

      while (v12 < *(int *)(v7 + 48));
    }

    return 0LL;
  }

  unsigned int v24 = 0;
  if (*(void *)(a1 + 56))
  {
LABEL_4:
    if (*(int *)(v7 + 48) >= 1)
    {
      uint64_t v8 = 0LL;
      int v9 = (_DWORD *)(v5 + 4 * v6 + 8);
      int v10 = (int *)(*(void *)(a1 + 56) + 8LL);
      do
      {
        *(v9 - 1) = *(v10 - 1);
        int v11 = *v10;
        v10 += 3;
        *int v9 = v11;
        v9 += 3;
        ++v8;
      }

      while (v8 < *(int *)(v7 + 48));
    }

    return 0LL;
  }

  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = a1;
  if (v16)
  {
    uint64_t v17 = a1;
    do
    {
      uint64_t v18 = v16;
      if (*(_DWORD *)v16 != 1 && !*(_BYTE *)(v17 + 50)) {
        break;
      }
      uint64_t v16 = *(void *)(v16 + 8);
      uint64_t v17 = v18;
    }

    while (v16);
  }

  uint64_t v19 = v4[6];
  uint64_t v20 = *(void *)(v17 + 40);
  int v21 = *(unsigned __int8 *)(v17 + 48);
  int v25 = 0;
  uint64_t result = sub_18137FA74((_DWORD *)v17, &v25, (uint64_t (*)(_DWORD *, void, uint64_t))sub_18138096C, v7);
  unsigned int v24 = result;
  if (!(_DWORD)result)
  {
    sub_18137FF60((uint64_t)v4, v17, &v24);
    uint64_t result = v24;
    if (!*((_BYTE *)v4 + 10) && !v24)
    {
      while (1)
      {
        if (!*((_BYTE *)v4 + 11)) {
          sqlite3_reset((sqlite3_stmt *)v4[2]);
        }
        sub_1813733EC((uint64_t)v4, v17, (int *)&v24);
        int v22 = *(unsigned __int8 *)(v17 + 48);
        *((_BYTE *)v4 + 10) = v22;
        *((_BYTE *)v4 + 11) = 1;
        *((_DWORD *)v4 + 28) = 1;
        v4[6] = *(void *)(v17 + 40);
        if (v22)
        {
          uint64_t result = v24;
          goto LABEL_35;
        }

        if (*(_DWORD *)v17 != 1) {
          break;
        }
        if (!sub_181373E80((uint64_t)v4, (int *)&v24))
        {
          uint64_t result = v24;
          if (v24) {
            goto LABEL_35;
          }
          if (*((_BYTE *)v4 + 10))
          {
            uint64_t result = 0LL;
            goto LABEL_35;
          }

uint64_t sub_181380894(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  if (v3 < 1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  int v7 = v3 * a2;
  do
  {
    uint64_t result = sub_18137FB04(*(void *)a3, a1, v6, &v15);
    if (v15 && (unsigned int v11 = *v15, v11 >= 2))
    {
      int v8 = 0;
      uint64_t v12 = v15 + 1;
      do
      {
        int v13 = v11 & 0x80;
        v8 += v13 == 0;
        char v14 = *v12++;
        LOBYTE(v11) = v14;
      }

      while (v14 & 0xFE | v13);
    }

    else
    {
      int v8 = 0;
    }

    *(_DWORD *)(*(void *)(a3 + 32) + 12LL * (v7 + (int)v6++)) = v8;
  }

  while (v6 < *(int *)(a3 + 8) && (_DWORD)result == 0);
  return result;
}

uint64_t sub_18138095C(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a3 + 32LL * a2) = a1;
  return 0LL;
}

uint64_t sub_18138096C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 56);
  if (v5) {
    goto LABEL_2;
  }
  uint64_t v7 = *(int *)(a3 + 48);
  if (sqlite3_initialize())
  {
    *(void *)(a1 + 56) = 0LL;
  }

  else
  {
    uint64_t v5 = (void *)sub_18126F0AC(12 * v7);
    *(void *)(a1 + 56) = v5;
    if (v5)
    {
LABEL_2:
      bzero(v5, 12LL * *(int *)(a3 + 48));
      return 0LL;
    }
  }

  return 7LL;
}

uint64_t sub_1813809E0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v3 = (void *)result;
    do
    {
      uint64_t v4 = v3[4];
      if (v4)
      {
        uint64_t v5 = *(unsigned __int8 **)(v4 + 40);
        if (v5)
        {
          int v6 = 0;
          uint64_t v7 = v3[7];
          do
          {
            unsigned int v9 = *v5;
            if (v9 >= 2)
            {
              int v10 = 0;
              int v11 = 0;
              do
              {
                if (!v11) {
                  ++v10;
                }
                int v11 = v9 & 0x80;
                char v12 = *++v5;
                LOBYTE(v9) = v12;
              }

              while (v12 & 0xFE | v11);
            }

            else
            {
              int v10 = 0;
            }

            uint64_t v13 = 3LL * v6;
            *(_DWORD *)(v7 + 4LL * (int)v13 + 4) += v10;
            BOOL v14 = v10 == 0;
            uint64_t v15 = v7 + 4 * v13;
            int v16 = *(_DWORD *)(v15 + 8);
            if (!v14) {
              ++v16;
            }
            *(_DWORD *)(v15 + 8) = v16;
            if (!*v5) {
              break;
            }
            uint64_t v17 = v5 + 1;
            int v6 = v5[1];
            if ((char)v5[1] < 0)
            {
              int v6 = v6 & 0x7F | (v5[2] << 7);
              if ((char)v5[2] < 0)
              {
                int v6 = v6 & 0x3FFF | (v5[3] << 14);
                if ((char)v5[3] < 0)
                {
                  int v6 = v6 & 0x1FFFFF | (v5[4] << 21);
                  if ((char)v5[4] < 0)
                  {
                    int v6 = v6 & 0xFFFFFFF | ((v5[5] & 7) << 28);
                    uint64_t v8 = 5LL;
                  }

                  else
                  {
                    uint64_t v8 = 4LL;
                  }
                }

                else
                {
                  uint64_t v8 = 3LL;
                }
              }

              else
              {
                uint64_t v8 = 2LL;
              }
            }

            else
            {
              uint64_t v8 = 1LL;
            }

            uint64_t v5 = &v17[v8];
          }

          while (v6 < (int)a2);
        }
      }

      uint64_t result = sub_1813809E0(v3[2], a2);
      int v3 = (void *)v3[3];
    }

    while (v3);
  }

  return result;
}

uint64_t sub_181380B20(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  uint64_t v50 = 0LL;
  uint64_t v11 = sqlite3_declare_vtab(a1, "CREATE TABLE x(input, token, start, end, position)");
  if ((_DWORD)v11) {
    return v11;
  }
  uint64_t v12 = (a3 - 3);
  if (a3 == 3)
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = "simple";
  }

  else
  {
    unsigned __int8 v49 = a6;
    uint64_t v13 = (const char **)(a4 + 24);
    if (a3 >= 4)
    {
      LODWORD(v14) = 0;
      uint64_t v18 = v13;
      uint64_t v19 = (a3 - 3);
      do
      {
        uint64_t v20 = *v18++;
        LODWORD(v14) = v14 + strlen(v20) + 1;
        --v19;
      }

      while (v19);
      uint64_t v14 = (int)v14;
      if (sqlite3_initialize()) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      if (sqlite3_initialize())
      {
LABEL_5:
        uint64_t v15 = 0LL;
        goto LABEL_6;
      }
    }

    uint64_t v21 = sub_18126F0AC(v14 + 8LL * (int)v12);
    uint64_t v15 = (char **)v21;
    int v48 = a5;
    if (a3 >= 4 && v21)
    {
      uint64_t v22 = 0LL;
      int v23 = (unsigned __int8 *)(v21 + 8LL * (int)v12);
      do
      {
        int v25 = strlen(v13[v22]);
        v15[v22] = (char *)v23;
        size_t v26 = v25 + 1;
        memcpy(v23, v13[v22], v26);
        int v27 = *v23;
        if ((v27 - 34) <= 0x3E && ((1LL << (v27 - 34)) & 0x4200000000000021LL) != 0)
        {
          if (v27 == 91) {
            int v27 = 93;
          }
          int v29 = v23[1];
          if (v23[1])
          {
            uint64_t v30 = 0LL;
            int v31 = 1;
            while (1)
            {
              if (v29 == v27)
              {
                if (v23[v31 + 1] != v27)
                {
LABEL_15:
                  uint64_t v24 = v30;
                  goto LABEL_16;
                }

                v23[v30] = v27;
                v31 += 2;
              }

              else
              {
                v23[v30] = v29;
                ++v31;
              }

              ++v30;
              int v29 = v23[v31];
              if (!v23[v31]) {
                goto LABEL_15;
              }
            }
          }

          uint64_t v24 = 0LL;
LABEL_16:
          v23[v24] = 0;
        }

        v23 += v26;
        ++v22;
      }

      while (v22 != v12);
    }

    else if (!v21)
    {
LABEL_6:
      uint64_t v16 = 0LL;
LABEL_7:
      uint64_t v11 = 7LL;
      goto LABEL_59;
    }

    if (a3 >= 4) {
      uint64_t v17 = *v15;
    }
    else {
      uint64_t v17 = "simple";
    }
    a5 = v48;
    a6 = v49;
  }

  int v32 = strlen(v17);
  if (a2 && *(void *)(a2 + 24))
  {
    uint64_t v33 = (v32 + 1);
    int v34 = *(_BYTE *)a2 == 1 ? sub_18126D6B4(v17, v33) : sub_181363650(v17, v33);
    uint64_t v35 = *(void *)(a2 + 24);
    if (v35)
    {
      int v36 = (int *)(v35 + 16LL * ((*(_DWORD *)(a2 + 16) - 1) & v34));
      int v39 = *v36;
      uint64_t v37 = v36 + 2;
      int v38 = v39;
      if (*(_BYTE *)a2 == 1) {
        uint64_t v40 = sub_18126D718;
      }
      else {
        uint64_t v40 = sub_181363688;
      }
      while (v38)
      {
        uint64_t v37 = *(_DWORD **)v37;
        if (!v37) {
          break;
        }
        --v38;
        if (!((unsigned int (*)(void, void, char *, uint64_t))v40)( *((void *)v37 + 3),  v37[8],  v17,  v33))
        {
          uint64_t v16 = *((void *)v37 + 2);
          if (!v16) {
            break;
          }
          if (a3 <= 4) {
            BOOL v41 = 0LL;
          }
          else {
            BOOL v41 = v15 + 1;
          }
          if (a3 <= 4) {
            uint64_t v42 = 0LL;
          }
          else {
            uint64_t v42 = (a3 - 4);
          }
          uint64_t v43 = (*(uint64_t (**)(uint64_t, char **, uint64_t *))(v16 + 8))(v42, v41, &v50);
          if ((_DWORD)v43)
          {
            uint64_t v11 = v43;
            goto LABEL_59;
          }

          if (sqlite3_initialize()) {
            goto LABEL_7;
          }
          uint64_t v46 = sub_18126F0AC(40LL);
          if (!v46) {
            goto LABEL_7;
          }
          uint64_t v11 = 0LL;
          *(_OWORD *)uint64_t v46 = 0u;
          *(_OWORD *)(v46 + 16) = 0u;
          uint64_t v47 = v50;
          *(void *)(v46 + 24) = v16;
          *(void *)(v46 + 32) = v47;
          *a5 = v46;
          if (v15) {
            goto LABEL_62;
          }
          return v11;
        }
      }
    }
  }

  sub_181362330(a6, "unknown tokenizer: %s", v17);
  uint64_t v16 = 0LL;
  uint64_t v11 = 1LL;
LABEL_59:
  if (v50) {
    (*(void (**)(void))(v16 + 16))();
  }
  if (v15)
  {
LABEL_62:
    uint64_t v44 = (void (**)(char **))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_67:
      (*v44)(v15);
      return v11;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    off_18C4653A8(v15);
    uint64_t v15 = (char **)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v44 = (void (**)(char **))&xmmword_18C465410;
      goto LABEL_67;
    }
  }

  return v11;
}

uint64_t sub_181380ED0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if ((int)v2 < 1)
  {
LABEL_8:
    a2[10] = 0;
    return 0LL;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = (_BYTE *)(*((void *)a2 + 1) + 5LL);
    uint64_t v5 = 8 * v2;
    while (!*v4 || *(_DWORD *)(v4 - 5) || *(v4 - 1) != 2)
    {
      v3 += 8LL;
      v4 += 12;
      if (v5 == v3) {
        goto LABEL_8;
      }
    }

    a2[10] = 1;
    uint64_t v6 = *((void *)a2 + 4) + v3;
    *(_DWORD *)uint64_t v6 = 1;
    *(_BYTE *)(v6 + 4) = 1;
    *((void *)a2 + 8) = 0x3FF0000000000000LL;
    return 0LL;
  }

uint64_t sub_181380F50(uint64_t a1)
{
  uint64_t v1 = a1;
  (*(void (**)(void))(*(void *)(a1 + 24) + 16LL))(*(void *)(a1 + 32));
  uint64_t v2 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_6;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v2 = &xmmword_18C465410;
LABEL_6:
    (*v2)(v1);
  }

  return 0LL;
}

double sub_181381004(uint64_t a1, uint64_t *a2)
{
  if (!sqlite3_initialize())
  {
    uint64_t v4 = sub_18126F0AC(56LL);
    if (v4)
    {
      *(void *)(v4 + 48) = 0LL;
      double result = 0.0;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      *a2 = v4;
    }
  }

  return result;
}

uint64_t sub_181381058(void *a1)
{
  uint64_t v1 = a1;
  if (a1[2])
  {
    (*(void (**)(void))(*(void *)(*a1 + 24LL) + 32LL))();
    v1[2] = 0LL;
  }

  uint64_t v2 = v1[1];
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_9:
      (*v3)(v2);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_9;
    }
  }

uint64_t sub_1813811A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(void *)a1;
  unsigned int v9 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16))
  {
    (*(void (**)(void))(*(void *)(v8 + 24) + 32LL))();
    *unsigned int v9 = 0LL;
  }

  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint64_t v11 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_9:
      (*v11)(v10);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
    --qword_18C468B10;
    off_18C4653A8(v10);
    uint64_t v10 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v11 = &xmmword_18C465410;
      goto LABEL_9;
    }
  }

uint64_t sub_1813813F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  ++*((_DWORD *)a1 + 6);
  uint64_t v3 = a1 + 4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(void *)(v2 + 24)
                                                                                                 + 40LL))( a1[2],  a1 + 4,  a1 + 5,  (uint64_t)a1 + 44,  a1 + 6,  (uint64_t)a1 + 52);
  if (!(_DWORD)result) {
    return result;
  }
  unsigned int v5 = result;
  if (a1[2])
  {
    (*(void (**)(void))(*(void *)(*a1 + 24) + 32LL))();
    a1[2] = 0LL;
  }

  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v7 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v6);
      --qword_18C468B10;
      off_18C4653A8(v6);
      uint64_t v6 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_11;
      }
      uint64_t v7 = &xmmword_18C465410;
    }

    (*v7)(v6);
  }

BOOL sub_181381520(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0LL;
}

uint64_t sub_181381530(uint64_t a1, uint64_t *a2, int a3)
{
  switch(a3)
  {
    case 0:
      if (!a2) {
        goto LABEL_16;
      }
      uint64_t v3 = *(char **)(a1 + 8);
      uint64_t v4 = (uint64_t)a2;
      unsigned int v5 = v3;
      int v6 = -1;
      goto LABEL_8;
    case 1:
      if (a2)
      {
        int v6 = *(_DWORD *)(a1 + 40);
        uint64_t v8 = *(char **)(a1 + 32);
        uint64_t v4 = (uint64_t)a2;
        unsigned int v5 = v8;
LABEL_8:
        sub_1812D7A8C(v4, v5, v6, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }

      else
      {
LABEL_16:
        sub_1812CF36C(97498);
      }

      return 0LL;
    case 2:
      if (!a2) {
        goto LABEL_15;
      }
      uint64_t v7 = *(int *)(a1 + 44);
      goto LABEL_13;
    case 3:
      if (!a2) {
        goto LABEL_15;
      }
      uint64_t v7 = *(int *)(a1 + 48);
      goto LABEL_13;
    default:
      if (a2)
      {
        uint64_t v7 = *(int *)(a1 + 52);
LABEL_13:
        uint64_t v9 = *a2;
        if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v9, v7);
        }

        else
        {
          *(void *)uint64_t v9 = v7;
          *(_WORD *)(v9 + 20) = 4;
        }
      }

      else
      {
LABEL_15:
        sub_1812CF36C(97431);
      }

      return 0LL;
  }

uint64_t sub_181381614(uint64_t a1, void *a2)
{
  *a2 = *(int *)(a1 + 24);
  return 0LL;
}

uint64_t sub_181381624(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, char **a6)
{
  return sub_181386594(1, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_181381644(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, char **a6)
{
  return sub_181386594(0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_181381664(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v2 + 120))
  {
    *(void *)(a1 + 16) = sqlite3_mprintf("recursively defined fts5 content table");
    return 1LL;
  }

  int v5 = *(_DWORD *)(v2 + 24);
  int v6 = *a2;
  int v7 = sqlite3_initialize();
  uint64_t result = 7LL;
  if ((v6 & 0x80000000) == 0 && !v7)
  {
    char v8 = 1;
    uint64_t v9 = sub_18126F0AC((8 * v6) | 1u);
    if (!v9) {
      return 7LL;
    }
    uint64_t v10 = v9;
    *((void *)a2 + 6) = v9;
    a2[14] = 1;
    if (*a2 < 1)
    {
      LODWORD(v15) = 0;
      int v30 = 0;
      int v31 = 0;
      int v14 = 0;
      goto LABEL_59;
    }

    uint64_t v47 = v2;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    int v14 = 0;
    uint64_t v15 = 0LL;
    int v16 = 0;
    int v17 = 0;
    int v48 = 0;
    while (1)
    {
      uint64_t v19 = *((void *)a2 + 1);
      int v20 = *(_DWORD *)(v19 + v11);
      int v21 = *(unsigned __int8 *)(v19 + v11 + 4);
      if (v21 != 64 && (v21 == 2 ? (BOOL v22 = v20 < v5) : (BOOL v22 = 1), v22))
      {
        if (*(_BYTE *)(v19 + v11 + 5))
        {
          if (v20 < 0 || v20 >= v5)
          {
LABEL_9:
            if (v16)
            {
              int v16 = 1;
            }

            else if (v21 == 2 && v20 < 0)
            {
              *(_BYTE *)(v10 + v14++) = 61;
              *(_DWORD *)(*((void *)a2 + 4) + v12) = ++v17;
              int v16 = 1;
            }

            goto LABEL_11;
          }

          int v23 = *(_DWORD *)(v47 + 124);
          if (v23 == 65)
          {
          }

          else if (v23 != 66 || v21 != 66)
          {
            goto LABEL_9;
          }

          if (v21 == 65) {
            char v26 = 76;
          }
          else {
            char v26 = 71;
          }
          *(_BYTE *)(v10 + v14) = v26;
          int v27 = (char *)(v10 + v14 + 1LL);
          int v46 = v14 + 1;
          uint64_t v28 = v15;
          sqlite3_snprintf(6, v27, "%d", v20);
          size_t v29 = strlen(v27);
          uint64_t v15 = v28;
          v10 += v29;
          *(_DWORD *)(*((void *)a2 + 4) + v12) = ++v17;
          int v14 = v46;
        }
      }

      else
      {
        if (!*(_BYTE *)(v19 + v11 + 5) || v20 < 0)
        {
          uint64_t result = 0LL;
          *((void *)a2 + 8) = 0x4A511B0EC57E649ALL;
          *(_BYTE *)(v10 + v14) = 0;
          return result;
        }

        if (v20 != v5 + 1)
        {
          uint64_t v24 = v14 + 1LL;
          *(_BYTE *)(v10 + v14) = 77;
          sqlite3_snprintf(6, (char *)(v10 + v24), "%d", v20);
          v10 += strlen((const char *)(v10 + v24));
          uint64_t v15 = 1LL;
          int v14 = v24;
LABEL_35:
          ++v17;
          uint64_t v25 = *((void *)a2 + 4) + v12;
          *(_DWORD *)uint64_t v25 = v17;
          *(_BYTE *)(v25 + 4) = 1;
          goto LABEL_11;
        }

        if (!v48)
        {
          *(_BYTE *)(v10 + v14++) = 114;
          int v48 = 1;
          goto LABEL_35;
        }

        int v48 = 1;
      }

uint64_t sub_181381B18(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_181381B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = sub_181389890( *(sqlite3 **)v2,  0LL,  "DROP TABLE IF EXISTS %Q.'%q_data';DROP TABLE IF EXISTS %Q.'%q_idx';DROP TABLE IF EXISTS %Q.'%q_config';",
             *(void *)(v2 + 8),
             *(void *)(v2 + 16),
             *(void *)(v2 + 8),
             *(void *)(v2 + 16),
             *(void *)(v2 + 8),
             *(void *)(v2 + 16));
  if (!(_DWORD)result)
  {
    if (!*(_DWORD *)(v2 + 88)
      || (uint64_t result = sub_181389890( *(sqlite3 **)v2,  0LL,  "DROP TABLE IF EXISTS %Q.'%q_docsize';",
                     *(void *)(v2 + 8),
                     *(void *)(v2 + 16)),
          !(_DWORD)result))
    {
      if (*(_DWORD *)(v2 + 64)
        || (uint64_t result = sub_181389890( *(sqlite3 **)v2,  0LL,  "DROP TABLE IF EXISTS %Q.'%q_content';",
                       *(void *)(v2 + 8),
                       *(void *)(v2 + 16)),
            !(_DWORD)result))
      {
        sub_1813886F0(a1);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_181381BDC(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  int v5 = *(void **)(a1[6] + 72LL);
  if (v5)
  {
    while ((void *)*v5 != a1)
    {
      int v5 = (void *)v5[1];
      if (!v5) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t v6 = *(void *)(a1[5] + 8LL);
    if (sub_18138BB80(v6) != *(void *)(v6 + 136))
    {
      int v7 = *(_DWORD **)(v6 + 144);
      if (v7)
      {
        sub_18138A584(v7);
        *(void *)(v6 + 144) = 0LL;
      }
    }

    uint64_t result = *(unsigned int *)(v6 + 60);
    *(_DWORD *)(v6 + 60) = 0;
    if ((_DWORD)result)
    {
      uint64_t v9 = 0LL;
      goto LABEL_14;
    }
  }

  uint64_t v10 = *(int *)(v4 + 24);
  if (sqlite3_initialize())
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v11 = 4 * v10 + 184;
    uint64_t v12 = (void *)sub_18126F0AC(v11);
    uint64_t v9 = v12;
    if (v12)
    {
      uint64_t v13 = a1[6];
      bzero(v12, v11);
      uint64_t result = 0LL;
      v9[1] = *(void *)(v13 + 72);
      v9[2] = v9 + 23;
      *(void *)(v13 + 72) = v9;
      uint64_t v14 = *(void *)(v13 + 40) + 1LL;
      *(void *)(v13 + 40) = v14;
      v9[3] = v14;
      goto LABEL_14;
    }
  }

  uint64_t result = 7LL;
LABEL_14:
  *a2 = v9;
  return result;
}

uint64_t sub_181381CD0(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = *a1;
    v3.n128_f64[0] = sub_18138C9F0(a1);
    uint64_t v4 = (void *)(*(void *)(v2 + 48) + 72LL);
    do
    {
      int v5 = v4;
      uint64_t v6 = (uint64_t *)*v4;
      uint64_t v4 = (void *)(*v4 + 8LL);
    }

    while (v6 != v1);
    *int v5 = v1[1];
    int v7 = (void (**)(uint64_t *, __n128))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_9;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v7 = (void (**)(uint64_t *, __n128))&xmmword_18C465410;
LABEL_9:
      (*v7)(v1, v3);
    }
  }

  return 0LL;
}

uint64_t sub_181381DA8(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v7 = *(void *)(v6 + 184);
  uint64_t v144 = 0LL;
  if (!*(_DWORD *)(v6 + 120))
  {
    uint64_t v134 = v7;
    uint64_t v14 = a1 + 32;
    if (*(_DWORD *)(a1 + 32))
    {
      sub_18138C9F0((uint64_t *)a1);
      *(void *)(v14 + 144) = 0LL;
      *(_OWORD *)(v14 + 112) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
    }

    int v133 = (int *)v14;
    unsigned int v132 = a2;
    BOOL v135 = (char **)(v5 + 16);
    *(void *)(v6 + 184) = v5 + 16;
    if (a4 >= 1)
    {
      uint64_t v15 = 0LL;
      uint64_t v136 = 0LL;
      uint64_t v137 = 0LL;
      int v16 = 0;
      uint64_t v138 = 0LL;
      uint64_t v139 = 0LL;
      uint64_t v143 = a3 + 1;
      uint64_t v17 = a4;
      uint64_t v140 = a5;
      uint64_t v141 = v6;
      uint64_t v142 = a4;
      while (2)
      {
        int v20 = *(char *)(a3 + v16++);
        switch(v20)
        {
          case '<':
            uint64_t v137 = *(void *)(a5 + 8 * v15);
            goto LABEL_9;
          case '=':
            uint64_t v139 = *(const sqlite3_value **)(a5 + 8 * v15);
            goto LABEL_9;
          case 'G':
          case 'L':
            uint64_t v21 = *(void *)(a5 + 8 * v15);
            if (!v21) {
              goto LABEL_25;
            }
            int v22 = *(unsigned __int16 *)(v21 + 20);
            if ((~v22 & 0x202) != 0 || *(_BYTE *)(v21 + 22) != 1)
            {
              if ((v22 & 1) != 0) {
LABEL_25:
              }
                int v23 = 0LL;
              else {
                int v23 = (const char *)sub_181303998((int *)v21, 1);
              }
            }

            else
            {
              int v23 = *(const char **)(v21 + 8);
            }

            LODWORD(v26) = 0;
            int v27 = v20;
            char v28 = *(_BYTE *)(a3 + v16);
            size_t v29 = (unsigned __int8 *)(v143 + v16);
            do
            {
              unint64_t v26 = (10 * v26 + v28 - 48);
              int v30 = *v29++;
              char v28 = v30;
              ++v16;
            }

            while ((v30 - 48) < 0xA);
            if (!v23)
            {
              uint64_t v18 = v144;
              a5 = v140;
              goto LABEL_8;
            }

            int64_t v31 = strlen(v23);
            if (sqlite3_initialize())
            {
              uint64_t v18 = 0LL;
              uint64_t v8 = 7LL;
              goto LABEL_192;
            }

            uint64_t v32 = sub_18126F0AC((4 * v31) | 1);
            if (!v32)
            {
              uint64_t v18 = 0LL;
              uint64_t v8 = 7LL;
              uint64_t v6 = v141;
              goto LABEL_192;
            }

            uint64_t v33 = (unsigned __int8 *)v32;
            if (v27 == 71) {
              int v34 = 91;
            }
            else {
              int v34 = 0;
            }
            if (v27 == 71) {
              int v35 = 63;
            }
            else {
              int v35 = 37;
            }
            if (v27 == 71) {
              int v36 = 42;
            }
            else {
              int v36 = 95;
            }
            a5 = v140;
            v37.i64[0] = 0x100000001LL;
            v37.i64[1] = 0x100000001LL;
            v38.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
            v38.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            v39.i64[0] = 0x8080808080808080LL;
            v39.i64[1] = 0x8080808080808080LL;
            if (v31 < 0) {
              goto LABEL_90;
            }
            uint64_t v40 = 0LL;
            int v41 = 0;
            int v42 = 0;
            int v43 = 0;
            do
            {
              if (v31 != v40)
              {
                int v44 = v23[v40];
                BOOL v45 = v34 == v44 || v36 == v44;
                if (!v45 && v35 != v44)
                {
                  ++v42;
                  goto LABEL_44;
                }
              }

              uint64_t v47 = (v42 - v41);
              if ((int)v47 >= 1)
              {
                if (v47 >= 8)
                {
                  if (v47 >= 0x20)
                  {
                    int32x4_t v50 = 0uLL;
                    uint64_t v48 = v47 & 0xFFFFFFE0;
                    int32x4_t v51 = 0uLL;
                    uint64_t v52 = (int8x16_t *)&v23[v41 + 16];
                    uint64_t v53 = v48;
                    int32x4_t v54 = 0uLL;
                    int32x4_t v55 = 0uLL;
                    int32x4_t v56 = 0uLL;
                    int32x4_t v57 = 0uLL;
                    int32x4_t v58 = 0uLL;
                    int32x4_t v59 = 0uLL;
                    do
                    {
                      uint8x16_t v60 = (uint8x16_t)vmvnq_s8(vceqq_s8(vandq_s8(v52[-1], v38), v39));
                      uint16x8_t v61 = vmovl_u8(*(uint8x8_t *)v60.i8);
                      uint16x8_t v62 = vmovl_high_u8(v60);
                      uint8x16_t v63 = (uint8x16_t)vmvnq_s8(vceqq_s8(vandq_s8(*v52, v38), v39));
                      uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)v63.i8);
                      uint16x8_t v65 = vmovl_high_u8(v63);
                      int32x4_t v55 = vaddq_s32(v55, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v62), v37));
                      int32x4_t v54 = vaddq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8), v37));
                      int32x4_t v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v61), v37));
                      int32x4_t v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8), v37));
                      int32x4_t v59 = vaddq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v65), v37));
                      int32x4_t v58 = vaddq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v65.i8), v37));
                      int32x4_t v57 = vaddq_s32(v57, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v64), v37));
                      int32x4_t v56 = vaddq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8), v37));
                      v52 += 2;
                      v53 -= 32LL;
                    }

                    while (v53);
                    unsigned int v49 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v56, v50), vaddq_s32(v58, v54)),  vaddq_s32(vaddq_s32(v57, v51), vaddq_s32(v59, v55))));
                    if (v48 == v47) {
                      goto LABEL_70;
                    }
                    if ((((_BYTE)v42 - (_BYTE)v41) & 0x18) == 0) {
                      goto LABEL_66;
                    }
                  }

                  else
                  {
                    unsigned int v49 = 0;
                    uint64_t v48 = 0LL;
                  }

                  uint64_t v66 = v48;
                  uint64_t v48 = v47 & 0xFFFFFFF8;
                  int32x4_t v67 = 0uLL;
                  int32x4_t v68 = (int32x4_t)v49;
                  int v69 = (int8x8_t *)&v23[v66 + v41];
                  uint64_t v70 = v66 - v48;
                  do
                  {
                    int8x8_t v71 = *v69++;
                    uint16x8_t v72 = vmovl_u8((uint8x8_t)vmvn_s8( vceq_s8( vand_s8(v71, (int8x8_t)0xC0C0C0C0C0C0C0C0LL),  (int8x8_t)0x8080808080808080LL)));
                    int32x4_t v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v37));
                    int32x4_t v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v37));
                    v70 += 8LL;
                  }

                  while (v70);
                  unsigned int v49 = vaddvq_s32(vaddq_s32(v68, v67));
                  if (v48 != v47) {
                    goto LABEL_66;
                  }
                }

                else
                {
                  uint64_t v48 = 0LL;
                  unsigned int v49 = 0;
LABEL_66:
                  uint64_t v73 = v47 - v48;
                  uint64_t v74 = &v23[v48 + v41];
                  do
                  {
                    char v75 = *v74++;
                    if ((v75 & 0xC0) != 0x80) {
                      ++v49;
                    }
                    --v73;
                  }

                  while (v73);
                }

LABEL_241:
            uint64_t v18 = 0LL;
            uint64_t v8 = 0LL;
            *(void *)(a1 + 88) = *(void *)(a1 + 24);
            goto LABEL_192;
          case 'r':
            uint64_t v136 = *(void *)(a5 + 8 * v15);
            goto LABEL_9;
          default:
            uint64_t v138 = *(void *)(a5 + 8 * v15);
            goto LABEL_9;
        }
      }
    }

    uint64_t v137 = 0LL;
    uint64_t v138 = 0LL;
    uint64_t v139 = 0LL;
    uint64_t v136 = 0LL;
LABEL_117:
    int v95 = (v132 >> 7) & 1;
    *(_DWORD *)(a1 + 36) = v95;
    if (v139) {
      uint64_t v96 = (uint64_t)v139;
    }
    else {
      uint64_t v96 = v137;
    }
    if (v139) {
      uint64_t v97 = (uint64_t)v139;
    }
    else {
      uint64_t v97 = v138;
    }
    if ((v132 & 0x80) == 0)
    {
      unint64_t v98 = v133;
      if (v96 && sqlite3_value_numeric_type((sqlite3_value *)v96) == 1)
      {
        __int16 v99 = *(_WORD *)(v96 + 20);
        if ((v99 & 0x24) != 0)
        {
          uint64_t v100 = *(void *)v96;
        }

        else if ((v99 & 8) != 0)
        {
          double v109 = *(double *)v96;
          if (*(double *)v96 >= -9.22337204e18)
          {
            if (v109 <= 9.22337204e18) {
              uint64_t v100 = (uint64_t)v109;
            }
            else {
              uint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          else
          {
            uint64_t v100 = 0x8000000000000000LL;
          }
        }

        else if ((v99 & 0x12) != 0 && *(void *)(v96 + 8))
        {
          uint64_t v100 = sub_181303DF0(v96);
        }

        else
        {
          uint64_t v100 = 0LL;
        }
      }

      else
      {
        uint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
      }

      *(void *)(a1 + 48) = v100;
      if (v97 && sqlite3_value_numeric_type((sqlite3_value *)v97) == 1)
      {
        __int16 v103 = *(_WORD *)(v97 + 20);
        if ((v103 & 0x24) != 0)
        {
          uint64_t v104 = *(void *)v97;
LABEL_174:
          *(void *)(a1 + 40) = v104;
          goto LABEL_178;
        }

        if ((v103 & 8) == 0)
        {
          if ((v103 & 0x12) != 0 && *(void *)(v97 + 8)) {
            uint64_t v104 = sub_181303DF0(v97);
          }
          else {
            uint64_t v104 = 0LL;
          }
          goto LABEL_174;
        }

        double v111 = *(double *)v97;
        if (*(double *)v97 >= -9.22337204e18)
        {
          if (v111 <= 9.22337204e18) {
            uint64_t v104 = (uint64_t)v111;
          }
          else {
            uint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
          }
          goto LABEL_174;
        }
      }

      uint64_t v104 = 0x8000000000000000LL;
      goto LABEL_174;
    }

    unint64_t v98 = v133;
    if (v96 && sqlite3_value_numeric_type((sqlite3_value *)v96) == 1)
    {
      __int16 v101 = *(_WORD *)(v96 + 20);
      if ((v101 & 0x24) != 0)
      {
        uint64_t v102 = *(void *)v96;
      }

      else if ((v101 & 8) != 0)
      {
        double v110 = *(double *)v96;
        if (*(double *)v96 >= -9.22337204e18)
        {
          if (v110 <= 9.22337204e18) {
            uint64_t v102 = (uint64_t)v110;
          }
          else {
            uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v102 = 0x8000000000000000LL;
        }
      }

      else if ((v101 & 0x12) != 0 && *(void *)(v96 + 8))
      {
        uint64_t v102 = sub_181303DF0(v96);
      }

      else
      {
        uint64_t v102 = 0LL;
      }
    }

    else
    {
      uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
    }

    *(void *)(a1 + 40) = v102;
    if (v97 && sqlite3_value_numeric_type((sqlite3_value *)v97) == 1)
    {
      __int16 v105 = *(_WORD *)(v97 + 20);
      if ((v105 & 0x24) != 0)
      {
        uint64_t v106 = *(void *)v97;
        goto LABEL_177;
      }

      if ((v105 & 8) == 0)
      {
        if ((v105 & 0x12) == 0 || !*(void *)(v97 + 8))
        {
          *(void *)(a1 + 48) = 0LL;
LABEL_178:
          uint64_t v113 = *(void *)(v5 + 32);
          int8x16_t v114 = sub_18138B020(v113);
          sub_18138A584(v114);
          uint64_t v8 = *(unsigned int *)(v113 + 60);
          *(_DWORD *)(v113 + 60) = 0;
          if ((_DWORD)v8)
          {
LABEL_191:
            uint64_t v18 = 0LL;
            goto LABEL_192;
          }

          uint64_t v115 = *(void *)(v5 + 56);
          if (v115)
          {
            if (*(_DWORD *)(v115 + 36))
            {
              *(void *)(a1 + 48) = *(void *)(v115 + 40);
              uint64_t v116 = (void *)(v115 + 48);
            }

            else
            {
              *(void *)(a1 + 48) = *(void *)(v115 + 48);
              uint64_t v116 = (void *)(v115 + 40);
            }

            *(void *)(a1 + 40) = *v116;
            *(_DWORD *)(a1 + 32) = 2;
            *(void *)(a1 + 64) = *(void *)(v115 + 64);
            goto LABEL_189;
          }

          if (!*(void *)(a1 + 64))
          {
            if (!*(void *)(v6 + 72))
            {
              uint64_t v129 = sqlite3_mprintf("%s: table does not support scanning", *(const char **)(v6 + 16));
              uint64_t v18 = 0LL;
              double v130 = *(char ***)(v6 + 184);
LABEL_252:
              *double v130 = v129;
              uint64_t v8 = 1LL;
              goto LABEL_192;
            }

            if (v139) {
              int v120 = 6;
            }
            else {
              int v120 = 5;
            }
            *unint64_t v98 = v120;
            uint64_t v121 = *(void *)(v5 + 40);
            if (v139) {
              unsigned int v122 = 2;
            }
            else {
              unsigned int v122 = *(_DWORD *)(a1 + 36) != 0;
            }
            uint64_t v19 = sub_18138AC28(*(uint64_t **)(v5 + 40), v122, (sqlite3_stmt **)(a1 + 56), v135);
            if (!(_DWORD)v19)
            {
              *(void *)(v121 + 8LL * v122 + 40) = 0LL;
              uint64_t v131 = *(sqlite3_stmt **)(a1 + 56);
              if (v139)
              {
                sqlite3_bind_value(v131, 1, v139);
              }

              else
              {
                sqlite3_bind_int64(v131, 1, *(void *)(a1 + 40));
                sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 56), 2, *(void *)(a1 + 48));
              }

              uint64_t v19 = sub_181382B38(a1);
            }

            goto LABEL_190;
          }

          if (!v136)
          {
            uint64_t v126 = *(void *)(v6 + 160);
            if (v126)
            {
              *(void *)(a1 + 96) = v126;
              *(void *)(a1 + 104) = *(void *)(v6 + 168);
            }

            else
            {
              *(void *)(a1 + 96) = "bm25";
              *(void *)(a1 + 104) = 0LL;
            }

            goto LABEL_235;
          }

          int v117 = *(unsigned __int16 *)(v136 + 20);
          if ((~v117 & 0x202) != 0 || *(_BYTE *)(v136 + 22) != 1)
          {
            if ((v117 & 1) != 0) {
              goto LABEL_227;
            }
            int8x16_t v118 = (unsigned __int8 *)sub_181303998((int *)v136, 1);
          }

          else
          {
            int8x16_t v118 = *(unsigned __int8 **)(v136 + 8);
          }

          uint64_t v145 = 0LL;
          uint64_t v146 = 0LL;
          if (v118)
          {
            uint64_t v123 = sub_18138C7A4(v118, &v146, &v145);
            if ((_DWORD)v123 != 1)
            {
              uint64_t v8 = v123;
              if ((_DWORD)v123) {
                goto LABEL_191;
              }
              uint64_t v125 = v145;
              uint64_t v124 = v146;
              goto LABEL_228;
            }

            goto LABEL_229;
          }

          LOWORD(v117) = *(_WORD *)(v136 + 20);
LABEL_227:
          int8x16_t v118 = 0LL;
          uint64_t v125 = 0LL;
          uint64_t v124 = 0LL;
          if (((0xAAAAAAAAAAAAAAAALL >> v117) & 1) == 0)
          {
LABEL_228:
            *(void *)(a1 + 96) = v124;
            *(void *)(a1 + 104) = v125;
            *(_DWORD *)(a1 + 80) |= 0x10u;
LABEL_235:
            if ((v132 & 0x20) != 0)
            {
              *(_DWORD *)(a1 + 32) = 4;
              uint64_t v19 = sub_18138EA88(v5, a1);
              goto LABEL_190;
            }

            *(_DWORD *)(a1 + 32) = 1;
LABEL_189:
            uint64_t v19 = sub_18138E9A8(v5, a1, v95);
LABEL_190:
            uint64_t v8 = v19;
            goto LABEL_191;
          }

LABEL_229:
          *(void *)(*(void *)a1 + 16LL) = sqlite3_mprintf("parse error in rank function: %s", (const char *)v118);
          uint64_t v8 = 1LL;
          goto LABEL_191;
        }

        uint64_t v106 = sub_181303DF0(v97);
LABEL_177:
        *(void *)(a1 + 48) = v106;
        goto LABEL_178;
      }

      double v112 = *(double *)v97;
      if (*(double *)v97 >= -9.22337204e18)
      {
        if (v112 <= 9.22337204e18) {
          uint64_t v106 = (uint64_t)v112;
        }
        else {
          uint64_t v106 = 0x7FFFFFFFFFFFFFFFLL;
        }
        goto LABEL_177;
      }
    }

    uint64_t v106 = 0x8000000000000000LL;
    goto LABEL_177;
  }

  *(void *)(v5 + 16) = sqlite3_mprintf("recursively defined fts5 content table");
  return 1LL;
}

uint64_t sub_181382B38(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 > 2)
  {
    if (v2 == 4) {
      return sub_18139959C(a1);
    }
    if (v2 != 3)
    {
      uint64_t v13 = *(void *)(*(void *)a1 + 24LL);
      ++*(_DWORD *)(v13 + 120);
      int v14 = sqlite3_step(*(sqlite3_stmt **)(a1 + 56));
      --*(_DWORD *)(v13 + 120);
      if (v14 == 100) {
        return 0LL;
      }
      *(_DWORD *)(a1 + 80) |= 1u;
      uint64_t v4 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
      if ((_DWORD)v4)
      {
        uint64_t v18 = sqlite3_errmsg(*(sqlite3 **)v13);
        *(void *)(*(void *)a1 + 16LL) = sqlite3_mprintf("%s", v18);
      }

      return v4;
    }

    uint64_t v4 = 0LL;
    int v5 = *(_DWORD *)(a1 + 80) | 1;
    goto LABEL_41;
  }

  if ((*(_BYTE *)(a1 + 80) & 0x20) == 0)
  {
    BOOL v3 = 0;
    uint64_t v4 = 0LL;
    goto LABEL_34;
  }

  int v6 = *(_DWORD *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)uint64_t v7 = *(void *)(*(void *)a1 + 32LL);
  *(_DWORD *)(v7 + 24) = v6;
  uint64_t v10 = sub_1813934A4(v7, v8);
  if ((_DWORD)v10)
  {
    uint64_t v4 = v10;
    BOOL v3 = 0;
    uint64_t v11 = *(void *)(a1 + 64);
    goto LABEL_32;
  }

  if (*(_DWORD *)(v8 + 4)) {
    goto LABEL_13;
  }
  uint64_t v19 = *(void *)(v8 + 24);
  if (*(_DWORD *)(v7 + 24))
  {
    if (v19 <= v9) {
      goto LABEL_13;
    }
LABEL_46:
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v8, 1LL, v9);
    goto LABEL_14;
  }

  if (v19 < v9) {
    goto LABEL_46;
  }
LABEL_13:
  uint64_t v4 = 0LL;
LABEL_14:
  if (*(_DWORD *)(v8 + 8)) {
    BOOL v15 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    do
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v8 + 16))(v7, v8, 0LL, 0LL);
      if (*(_DWORD *)(v8 + 8)) {
        BOOL v17 = (_DWORD)v16 == 0;
      }
      else {
        BOOL v17 = 0;
      }
    }

    while (v17);
    uint64_t v4 = v16;
  }

  uint64_t v11 = *(void *)(a1 + 64);
  if ((_DWORD)v4) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v9 != *(void *)(*(void *)(v11 + 16) + 24LL);
  }
LABEL_32:
  unsigned int v20 = *(_DWORD *)(a1 + 80) & 0xFFFFFF91;
  *(_DWORD *)(a1 + 80) = v20 | 0x4E;
  if (*(_DWORD *)(*(void *)(v11 + 16) + 4LL))
  {
    int v5 = v20 | 0x4F;
LABEL_41:
    *(_DWORD *)(a1 + 80) = v5;
    return v4;
  }

uint64_t sub_181382DDC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) & 1;
}

uint64_t sub_181382DE8(uint64_t *a1, sqlite3_context *a2, int a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 24);
  int v8 = *((_DWORD *)a1 + 8);
  int v9 = *(_DWORD *)(v7 + 24);
  if (v8 == 3)
  {
    if (v9 == a3)
    {
      if (a2)
      {
        uint64_t v10 = a1[11];
LABEL_8:
        uint64_t v11 = *(void *)a2;
        if ((*(_WORD *)(*(void *)a2 + 20LL) & 0x9000) == 0)
        {
          uint64_t v16 = 0LL;
          *(void *)uint64_t v11 = v10;
          *(_WORD *)(v11 + 20) = 4;
          return v16;
        }

        sub_1813040AC(v11, v10);
        return 0LL;
      }

LABEL_171:
  uint64_t v13 = *(void *)(*(void *)(v6 + 48) + 48LL);
  if (!v13)
  {
LABEL_183:
    *(void *)(v6 + 16) = sqlite3_mprintf("no such function: %s", v24);
    uint64_t v16 = 1LL;
    goto LABEL_184;
  }

  while (1)
  {
    int v92 = *(unsigned __int8 **)(v13 + 8);
    if (v24)
    {
      if (v92)
      {
        for (uint64_t i = v24; ; ++i)
        {
          uint64_t v94 = *(unsigned __int8 *)i;
          uint64_t v95 = *v92;
          if ((_DWORD)v94 == (_DWORD)v95)
          {
            if (!*i) {
              goto LABEL_182;
            }
          }

          else if (byte_1813C6343[v94] != byte_1813C6343[v95])
          {
            goto LABEL_174;
          }

          ++v92;
        }
      }

      goto LABEL_174;
    }

    if (!v92) {
      break;
    }
LABEL_174:
    uint64_t v13 = *(void *)(v13 + 40);
    if (!v13) {
      goto LABEL_183;
    }
  }

  sub_18138A584(v84);
LABEL_172:
  uint64_t result = *(unsigned int *)(v30 + 60);
  *(_DWORD *)(v30 + 60) = 0;
LABEL_173:
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(v89 + 88))
    {
      uint64_t result = sub_18138AC28(v8, 7, &v103, 0LL);
      if ((_DWORD)result) {
        return result;
      }
      unint64_t v77 = v103;
      if (!sub_1812B2390((uint64_t)v103, 0))
      {
        uint64_t v78 = *((void *)v77 + 16);
        if ((*(_WORD *)(v78 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v78, a2);
        }

        else
        {
          *(void *)uint64_t v78 = a2;
          *(_WORD *)(v78 + 20) = 4;
        }

        uint64_t v79 = *(void *)(*(void *)v77 + 24LL);
        if (v79) {
          xmmword_18C465410(v79);
        }
      }

      sqlite3_step(v77);
      uint64_t result = sqlite3_reset(v77);
    }

    else if (*(_DWORD *)(v89 + 64))
    {
      return 0LL;
    }

    uint64_t result = sub_18138AC28(v8, 5, &v103, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t v80 = v103;
      if (!sub_1812B2390((uint64_t)v103, 0))
      {
        uint64_t v81 = *((void *)v80 + 16);
        if ((*(_WORD *)(v81 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v81, a2);
        }

        else
        {
          *(void *)uint64_t v81 = a2;
          *(_WORD *)(v81 + 20) = 4;
        }

        size_t v83 = *(void *)(*(void *)v80 + 24LL);
        if (v83) {
          xmmword_18C465410(v83);
        }
      }

      sqlite3_step(v80);
      return sqlite3_reset(v80);
    }
  }

  return result;
}

LABEL_182:
  a1[14] = v13;
LABEL_17:
  uint64_t v14 = *((unsigned int *)a1 + 30);
  uint64_t v15 = a1[16];
  a1[18] = v13;
  (*(void (**)(void *, uint64_t *, sqlite3_context *, uint64_t, uint64_t))(v13 + 24))( &unk_189B6F358,  a1,  a2,  v14,  v15);
  uint64_t v16 = 0LL;
  a1[18] = 0LL;
  return v16;
}

                    if (!v89) {
                      return v17;
                    }
                    sqlite3_step(v53);
                    uint64_t v96 = sqlite3_reset(v53);
                    if ((_DWORD)v96)
                    {
                      int v17 = v96;
                      uint64_t v97 = 3LL;
                      unint64_t v98 = a2;
                      __int16 v99 = a1;
                      unsigned int v100 = v8;
                      __int16 v101 = v112;
                      uint64_t v102 = 0LL;
                      return sub_1813BDEC0(v97, v98, v99, v100, v101, v102);
                    }

                    __int16 v103 = *(void *)a2;
                    if (*(void *)a2)
                    {
                      uint64_t v104 = *(unsigned __int8 *)(v103 + 113);
                      __int16 v105 = v110;
                      if (v104 == 186) {
                        goto LABEL_190;
                      }
                      if (v104 == 118)
                      {
                        if (*(_DWORD *)(v103 + 120)) {
                          return 0LL;
                        }
                      }

                      else
                      {
                        if (v104 == 109) {
LABEL_190:
                        }
                          uint64_t v106 = "unopened";
                        else {
                          uint64_t v106 = "invalid";
                        }
LABEL_203:
                        sqlite3_log(21, "API call with %s database connection pointer", v106);
                        sub_1812CF36C(186291);
                      }

                      uint64_t v97 = 1LL;
                      unint64_t v98 = a2;
                      __int16 v99 = a1;
                      unsigned int v100 = v108;
                      __int16 v101 = v112;
                      uint64_t v102 = v105;
                      return sub_1813BDEC0(v97, v98, v99, v100, v101, v102);
                    }

                    uint64_t v106 = "NULL";
                    __int16 v105 = v110;
                    goto LABEL_203;
                  }
                }

                else
                {
                  unint64_t v59 = byte_1813C6343[v62];
                  unint64_t v60 = byte_1813C6343[v63];
                  unint64_t v61 = v59 - v60;
                  if (v59 != v60) {
                    goto LABEL_125;
                  }
                }

                ++v57;
                ++v58;
                continue;
              }
            }
          }

          int v17 = 0LL;
          uint64_t v44 = 1;
          *(_DWORD *)(*(void *)(a2 + 56) + 4LL * (v43 >> 5)) |= 1 << v43;
          uint64_t v42 = *(_DWORD *)(a1 + 120);
          LODWORD(v43) = v43 + 1;
          if ((int)v43 >= v42)
          {
            uint64_t v116 = 0;
            goto LABEL_68;
          }
        }
      }
    }

    return 7LL;
  }

  if (v11 != 9)
  {
    if (*(_DWORD *)(a2 + 72) && (uint64_t v16 = sub_1813BE3B0(a1, a2), (_DWORD)v16))
    {
      int v17 = v16;
      if ((_DWORD)v16 == 100)
      {
        sqlite3_reset(*(sqlite3_stmt **)(a2 + 24));
        return sub_1813BDEC0(3LL, a2, a1, v8, a4, a5);
      }
    }

    else
    {
      uint64_t v18 = v8;
      uint64_t v19 = *(sqlite3_stmt **)(a2 + 16);
      if ((int)v12 >= 1)
      {
        double v111 = a4;
        unsigned int v20 = 0LL;
        do
        {
          uint64_t v23 = *(_DWORD *)(a1 + 124);
          if (v23 != 23 && v23 != 18 || v20 == 0x80000000) {
            return sub_1812FBF50(234851);
          }
          uint64_t v26 = *(_DWORD *)(a1 + 120);
          int v27 = *(void *)(*(void *)(a1 + 144) + 8LL * ((int)v20 + v26));
          if (!v27) {
            return sub_1812FBF50(234851);
          }
          uint64_t v21 = sqlite3_bind_value(v19, ++v20, (const sqlite3_value *)v27);
          if ((_DWORD)v21) {
            int v22 = 1;
          }
          else {
            int v22 = v20 >= v12;
          }
        }

        while (!v22);
        int v17 = v21;
        a4 = v111;
        if ((_DWORD)v21) {
          return v17;
        }
        uint64_t v19 = *(sqlite3_stmt **)(a2 + 16);
      }

      sqlite3_step(v19);
      int v17 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 16));
      int v8 = v18;
    }

    return sub_1813BDEC0(3LL, a2, a1, v8, a4, a5);
  }

  if (*(_DWORD *)(a1 + 88)) {
    uint64_t v13 = *(void *)(a2 + 48);
  }
  else {
    uint64_t v13 = 0LL;
  }
  char v28 = *(sqlite3_stmt **)(a2 + 8);
  if ((int)v12 < 1)
  {
LABEL_50:
    if (v28)
    {
      int v34 = *(void *)(*(void *)v28 + 24LL);
      if (v34)
      {
        xmmword_18C465400(v34);
        uint64_t v35 = *(void *)(*(void *)v28 + 24LL);
        unint64_t v36 = *((_DWORD *)v28 + 8);
        if (v35) {
          xmmword_18C465410(v35);
        }
      }

      else
      {
        unint64_t v36 = *((_DWORD *)v28 + 8);
      }
    }

    else
    {
      unint64_t v36 = 0;
    }

    unint64_t v65 = *(sqlite3_stmt **)(a2 + 8);
    if (v36 <= (int)v12)
    {
      uint64_t v66 = v6;
    }

    else
    {
      uint64_t v66 = v6;
      if (v6) {
        uint64_t v67 = v13 == 0;
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v68 = !v67;
      int v17 = sqlite3_bind_int64(v65, v12 + 1, v68);
      if ((_DWORD)v17) {
        return v17;
      }
      unint64_t v65 = *(sqlite3_stmt **)(a2 + 8);
    }

    sqlite3_step(v65);
    uint64_t v69 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 8));
    if ((_DWORD)v69)
    {
      int v17 = v69;
      return sub_1813BDEC0(3LL, a2, a1, v8, a4, 0LL);
    }

    uint64_t v70 = *(void *)a2;
    if (*(void *)a2)
    {
      int8x8_t v71 = *(unsigned __int8 *)(v70 + 113);
      int v72 = v66;
      switch(v71)
      {
        case 186:
          goto LABEL_117;
        case 118:
          if (*(_DWORD *)(v70 + 120)) {
            return 0LL;
          }
          goto LABEL_197;
        case 109:
LABEL_117:
          uint64_t v73 = "unopened";
          break;
        default:
          uint64_t v73 = "invalid";
          break;
      }
    }

    else
    {
      uint64_t v73 = "NULL";
      int v72 = v66;
    }

    sqlite3_log(21, "API call with %s database connection pointer", v73);
    sub_1812CF36C(186291);
LABEL_197:
    if (!*(_BYTE *)(a2 + 122)) {
      return sub_1813BDEC0(1LL, a2, a1, v8, a4, v72);
    }
    return 0LL;
  }

  int v30 = 0LL;
  while (v13 && !*(_BYTE *)(v13 + v30))
  {
    int v17 = 0LL;
LABEL_33:
    if (++v30 >= v12) {
      goto LABEL_48;
    }
  }

  uint64_t v31 = *(_DWORD *)(a1 + 124);
  if (v31 != 23 && v31 != 9) {
    return sub_1812FBF50(234851);
  }
  if ((v30 & 0x80000000) != 0) {
    return sub_1812FBF50(234851);
  }
  int v33 = *(void *)(*(void *)(a1 + 144) + 8 * v30);
  if (!v33) {
    return sub_1812FBF50(234851);
  }
  int v17 = sqlite3_bind_value(v28, v30 + 1, (const sqlite3_value *)v33);
  if (!(_DWORD)v17) {
    goto LABEL_33;
  }
LABEL_48:
  if (!(_DWORD)v17)
  {
    int v8 = a3;
    char v28 = *(sqlite3_stmt **)(a2 + 8);
    uint64_t v6 = a6;
    goto LABEL_50;
  }

  return v17;
}

uint64_t sub_181383748(uint64_t a1, sqlite3_int64 *a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if ((v3 - 1) >= 2)
  {
    if (v3 == 3)
    {
      sqlite3_int64 v5 = 0LL;
      goto LABEL_9;
    }

    if (v3 != 4)
    {
      sqlite3_int64 v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 56), 0);
      goto LABEL_9;
    }
  }

  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    sqlite3_int64 v5 = *(void *)(v4 + 8);
  }
  else {
    sqlite3_int64 v5 = *(void *)(*(void *)(*(void *)(a1 + 64) + 16LL) + 24LL);
  }
LABEL_9:
  *a2 = v5;
  return 0LL;
}

uint64_t sub_1813837C0(void *a1, int a2, sqlite3_value **a3, uint64_t *a4)
{
  int v8 = (uint64_t *)a1[3];
  unsigned int v325 = 0;
  int v9 = v8;
  if (!*((_DWORD *)v8 + 34))
  {
    uint64_t v13 = a1[4];
    uint64_t v14 = sub_18138B020(v13);
    sub_18138A584(v14);
    uint64_t v15 = *(unsigned int *)(v13 + 60);
    *(_DWORD *)(v13 + 60) = 0;
    unsigned int v325 = v15;
    if ((_DWORD)v15) {
      return v15;
    }
    int v9 = (uint64_t *)a1[3];
  }

  v9[23] = (uint64_t)(a1 + 2);
  for (uint64_t i = *(void *)(a1[6] + 72LL); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(void **)i == a1) {
      *(_DWORD *)(i + 80) |= 0x20u;
    }
  }

  if (!*a3)
  {
    sub_1812CF36C(97220);
    int v12 = 0;
    if (!*((_DWORD *)v8 + 16)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  __int16 v11 = *((_WORD *)*a3 + 10);
  if (((0xAAAAAAAAAAAAAAAALL >> v11) & 1) == 0)
  {
    int v12 = byte_1813C6455[v11 & 0x3F];
    if (!*((_DWORD *)v8 + 16)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  uint64_t v16 = *((int *)v8 + 6) + 2LL;
  int v17 = a3[v16];
  if (v17)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *((_WORD *)v17 + 10)) & 1) != 0)
    {
      int v12 = 5;
      if (!*((_DWORD *)v8 + 16)) {
        goto LABEL_19;
      }
LABEL_18:
      if (!*((_DWORD *)v8 + 17))
      {
        int v21 = 4;
        if (v12 != 1) {
          goto LABEL_75;
        }
        goto LABEL_73;
      }

LABEL_399:
              int v189 = 0;
LABEL_400:
              v171 += v196;
              uint64_t v190 = v204;
              int v191 = v201;
              if (v171 >= v169[2]) {
                break;
              }
            }

            if (__dst)
            {
              int v239 = (void (**)(void *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_497;
              }
              uint64_t v240 = v192[366];
              if (v240) {
                xmmword_18C465400(v240);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(__dst);
              --qword_18C468B10;
              off_18C4653A8(__dst);
              int v169 = v323;
              __dst = (char *)v192[366];
              if (__dst)
              {
                int v239 = (void (**)(void *))&xmmword_18C465410;
LABEL_497:
                (*v239)(__dst);
                int v169 = v323;
              }
            }

            if (v322)
            {
              uint64_t v241 = (void (**)(void *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_504;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v322);
              --qword_18C468B10;
              off_18C4653A8(v322);
              int v169 = v323;
              sqlite3_int64 v322 = (void *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v241 = (void (**)(void *))&xmmword_18C465410;
LABEL_504:
                (*v241)(v322);
                int v169 = v323;
              }
            }

LABEL_337:
          int v154 = sqlite3_finalize(v334);
          uint64_t v153 = v313;
          if (!v148[15]) {
            v148[15] = v154;
          }
LABEL_339:
          if (++v153 >= *v310)
          {
            uint64_t v150 = v302;
            uint64_t v152 = v303;
            int v151 = v302[7];
LABEL_333:
            if (++v152 >= v151) {
              break;
            }
            goto LABEL_334;
          }
        }
      }

      sub_1813C2A68((uint64_t)v148, (uint64_t)v150, 0x20u, 0, 0xFFFFFFFF, 0, (uint64_t *)v335);
      uint64_t v272 = v335[0];
      v324 = v148 + 15;
      uint64_t v273 = 0LL;
      if (v148[15])
      {
LABEL_577:
        sub_18138D5A4((uint64_t)v272);
        char v274 = v300;
        if (*v324) {
          char v274 = 1;
        }
        if ((v274 & 1) == 0 && v273 != v298) {
          _DWORD *v324 = 267;
        }
        sub_18138A584(v302);
        sqlite3_int64 v275 = v332;
        if (!v332) {
          goto LABEL_589;
        }
        uint64_t v276 = (void (**)(sqlite3_int64))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v275);
          --qword_18C468B10;
          off_18C4653A8(v275);
          sqlite3_int64 v275 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_589;
          }
          uint64_t v276 = (void (**)(sqlite3_int64))&xmmword_18C465410;
        }

        (*v276)(v275);
LABEL_589:
        int v127 = v299;
LABEL_591:
        uint64_t v15 = *v324;
        _DWORD *v324 = 0;
        goto LABEL_624;
      }

      while (1)
      {
        if (*((_BYTE *)v272 + 20)) {
          goto LABEL_577;
        }
        uint64_t v334 = 0LL;
        int v331 = 0;
        unsigned int v277 = *(unsigned __int16 *)(*((void *)v272 + 11) + 4LL);
        uint64_t v278 = (char *)v272 + 136 * *(unsigned __int16 *)(*((void *)v272 + 11) + 4LL);
        uint64_t v279 = *((void *)v278 + 27);
        uint64_t v280 = *((unsigned int *)v278 + 52);
        uint64_t v281 = (char *)*((void *)v278 + 25);
        if (v301 != 1) {
          break;
        }
        if (!*((void *)v272 + 17 * *(unsigned __int16 *)(*((void *)v272 + 11) + 4LL) + 14)
          || *((_DWORD *)v272 + 34 * *(unsigned __int16 *)(*((void *)v272 + 11) + 4LL) + 56))
        {
          uint64_t v282 = 81 * v279;
          if ((int)v280 >= 1)
          {
            do
            {
              uint64_t v283 = *v281++;
              uint64_t v282 = 9 * v282 + v283;
              --v280;
            }

            while (v280);
          }

          v273 ^= v282;
        }

LABEL_594:
        sub_1813903E0((uint64_t)v148, (uint64_t)v272, 0, 0LL);
        if (v148[15]) {
          goto LABEL_577;
        }
      }

      LODWORD(v333) = 0;
      sub_181398B68(v148, (uint64_t)v272 + 136 * v277 + 96, 0LL, (uint64_t)&v332);
      int v284 = v333;
      unint64_t v285 = (v333 + 4);
      if (v285 <= HIDWORD(v333))
      {
        uint64_t v290 = v332;
      }

      else
      {
        if (HIDWORD(v333)) {
          LODWORD(v286) = HIDWORD(v333);
        }
        else {
          LODWORD(v286) = 64;
        }
        unint64_t v286 = (int)v286;
        do
        {
          unint64_t v287 = v286;
          v286 *= 2LL;
        }

        while (v287 < v285);
        uint64_t v288 = v332;
        if (sqlite3_initialize() || (uint64_t v290 = sub_18127D33C(v288, v287)) == 0)
        {
          _DWORD *v324 = 7;
          int v289 = v333;
          goto LABEL_612;
        }

        HIDWORD(v333) = v287;
        sqlite3_int64 v332 = v290;
        int v284 = v333;
      }

      *(_DWORD *)(v290 + v284) = 0;
      int v289 = v333 + 4;
      LODWORD(v333) = v333 + 4;
LABEL_612:
      uint64_t v291 = v332;
      if (!sub_181392B00(v332, v289, &v331, (uint64_t *)&v334))
      {
        uint64_t v292 = 9 * v279;
        do
        {
          uint64_t v293 = v292 + ((uint64_t)v334 >> 32) + (v334 & 0x7FFFFFFF) + 8 * (v292 + ((uint64_t)v334 >> 32));
          if ((int)v280 >= 1)
          {
            uint64_t v294 = v281;
            uint64_t v295 = v280;
            do
            {
              uint64_t v296 = *v294++;
              uint64_t v293 = 9 * v293 + v296;
              --v295;
            }

            while (v295);
          }

          v273 ^= v293;
        }

        while (!sub_181392B00(v291, v289, &v331, (uint64_t *)&v334));
      }

      goto LABEL_594;
    }
  }

  uint64_t v15 = sub_18138AC28(v123, 10, &v327, 0LL);
  if ((_DWORD)v15) {
    goto LABEL_624;
  }
  uint64_t v131 = v327;
  if (sqlite3_step(v327) != 100)
  {
LABEL_306:
    uint64_t v15 = sqlite3_reset(v131);
    if ((_DWORD)v15) {
      goto LABEL_624;
    }
    uint64_t v15 = sub_18139AA30((uint64_t)v123, 0);
    if ((_DWORD)v15) {
      goto LABEL_624;
    }
    uint64_t v142 = 0LL;
    uint64_t v15 = 267LL;
    while ((*(_DWORD *)(v124 + 24) & ~(*(int *)(v124 + 24) >> 31)) != v142)
    {
      uint64_t v143 = *(void *)(v123[4] + v142 * 8);
      uint64_t v144 = v127[v142++];
      if (v143 != v144) {
        goto LABEL_624;
      }
    }

    if (!*(_DWORD *)(v124 + 64))
    {
      sqlite3_int64 v332 = 0LL;
      uint64_t v15 = sub_1813A32B0((uint64_t **)v123, (uint64_t)"content", &v332);
      if ((_DWORD)v15) {
        goto LABEL_624;
      }
      if (v332 != v123[3]) {
        goto LABEL_632;
      }
    }

    if (*(_DWORD *)(v124 + 88))
    {
      sqlite3_int64 v332 = 0LL;
      uint64_t v15 = sub_1813A32B0((uint64_t **)v123, (uint64_t)"docsize", &v332);
      if ((_DWORD)v15) {
        goto LABEL_624;
      }
      if (v332 != v123[3])
      {
LABEL_632:
        uint64_t v15 = 267LL;
        goto LABEL_624;
      }
    }

    char v130 = 0;
    goto LABEL_329;
  }

  unsigned int v132 = (int *)&v127[v128];
  while (1)
  {
    sqlite3_int64 v133 = sqlite3_column_int64(v131, 0);
    *(void *)&__int128 v328 = v133;
    HIDWORD(v328) = 0;
    if (*(_DWORD *)(v124 + 88))
    {
      uint64_t v134 = sub_18139B4F4(v123, v133, v132);
      if ((_DWORD)v134) {
        break;
      }
    }

    if (*(_DWORD *)(v124 + 92) == 1)
    {
      if (sqlite3_initialize() || (BOOL v135 = (void *)sub_18126F0AC(4096LL)) == 0LL)
      {
        *((void *)&v329 + 1) = 0LL;
        uint64_t v15 = 7LL;
        goto LABEL_623;
      }

      uint64_t v136 = v135;
      bzero(v135, 0x1000uLL);
      *((void *)&v329 + 1) = v136;
    }

    uint64_t v137 = 0LL;
    while (v137 < *(int *)(v124 + 24))
    {
      if (!*(_BYTE *)(*(void *)(v124 + 40) + v137))
      {
        *((void *)&v328 + 1) = v137;
        if (*(_DWORD *)(v124 + 92) != 2) {
          goto LABEL_296;
        }
        if (sqlite3_initialize() || (uint64_t v138 = (void *)sub_18126F0AC(4096LL)) == 0LL)
        {
          *((void *)&v329 + 1) = 0LL;
          uint64_t v15 = 7LL;
        }

        else
        {
          uint64_t v139 = v138;
          bzero(v138, 0x1000uLL);
          *((void *)&v329 + 1) = v139;
LABEL_296:
          uint64_t v140 = sqlite3_column_text(v131, (int)v137 + 1);
          uint64_t v141 = sqlite3_column_bytes(v131, v137 + 1);
          if (!v140
            || (uint64_t v15 = (*(uint64_t (**)(void, __int128 *, uint64_t, const unsigned __int8 *, uint64_t, uint64_t (*)(uint64_t, char, char *, int)))(*(void *)(v124 + 112) + 16LL))( *(void *)(v124 + 104),  &v328,  4LL,  v140,  v141,  sub_1813A2EF8),  !(_DWORD)v15))
          {
            if (*(_DWORD *)(v124 + 88))
            {
              if (HIDWORD(v328) == v132[v137]) {
                uint64_t v15 = 0LL;
              }
              else {
                uint64_t v15 = 267LL;
              }
            }

            else
            {
              uint64_t v15 = 0LL;
            }
          }
        }

        v127[v137] += SHIDWORD(v328);
        if (*(_DWORD *)(v124 + 92) == 2)
        {
          sub_1813A3144(*((uint64_t *)&v329 + 1));
          *((void *)&v329 + 1) = 0LL;
        }

        goto LABEL_288;
      }

      uint64_t v15 = 0LL;
LABEL_288:
      ++v137;
      if ((_DWORD)v15) {
        goto LABEL_623;
      }
    }

    sub_1813A3144(*((uint64_t *)&v329 + 1));
    *((void *)&v329 + 1) = 0LL;
    if (sqlite3_step(v131) != 100) {
      goto LABEL_306;
    }
  }

  uint64_t v15 = v134;
LABEL_623:
  sub_1813A3144(*((uint64_t *)&v329 + 1));
  *((void *)&v329 + 1) = 0LL;
  sqlite3_reset(v131);
LABEL_624:
  char v297 = (uint64_t (**)(void *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v127);
    --qword_18C468B10;
    off_18C4653A8(v127);
    int v127 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      char v297 = (uint64_t (**)(void *))&xmmword_18C465410;
      goto LABEL_629;
    }
  }

  else
  {
LABEL_629:
    (*v297)(v127);
  }

uint64_t sub_181385BC0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 48) + 72LL);
  if (v1)
  {
    while (*v1 != a1)
    {
      uint64_t v1 = (void *)v1[1];
      if (!v1) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
    if (sub_18138BB80(v2) != *(void *)(v2 + 136))
    {
      int v3 = *(_DWORD **)(v2 + 144);
      if (v3)
      {
        sub_18138A584(v3);
        *(void *)(v2 + 144) = 0LL;
      }
    }

    *(_DWORD *)(v2 + 60) = 0;
  }

  return 0LL;
}

uint64_t sub_181385C2C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 24) + 184LL) = a1 + 16;
  for (uint64_t i = *(void *)(*(void *)(a1 + 48) + 72LL); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(void *)i == a1) {
      *(_DWORD *)(i + 80) |= 0x20u;
    }
  }

  uint64_t result = sub_1813A363C(*(uint64_t ***)(a1 + 40));
  *(void *)(*(void *)(a1 + 24) + 184LL) = 0LL;
  return result;
}

uint64_t sub_181385CA0()
{
  return 0LL;
}

uint64_t sub_181385CA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(_DWORD *)(v1 + 16) = 0;
  sub_181388658(*(void *)(v1 + 8));
  return 0LL;
}

uint64_t sub_181385CCC( uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t (**a4)(uint64_t a1, int a2, uint64_t *a3), void *a5)
{
  for (uint64_t i = *(void *)(*(void *)(a1 + 48) + 48LL); i; uint64_t i = *(void *)(i + 40))
  {
    uint64_t v6 = *(unsigned __int8 **)(i + 8);
    if (a3)
    {
      if (v6)
      {
        for (uint64_t j = a3; ; ++j)
        {
          uint64_t v8 = *j;
          uint64_t v9 = *v6;
          if ((_DWORD)v8 == (_DWORD)v9)
          {
            if (!*j) {
              goto LABEL_12;
            }
          }

          else if (byte_1813C6343[v8] != byte_1813C6343[v9])
          {
            break;
          }

          ++v6;
        }
      }
    }

    else if (!v6)
    {
LABEL_12:
      *a4 = sub_1813A3818;
      *a5 = i;
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_181385D54(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t ***)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t result = sub_1813A363C(v3);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_181389890( (sqlite3 *)*v4,  0LL,  "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
               v4[1],
               v4[2],
               "data",
               a2,
               "data");
    if (!(_DWORD)result)
    {
      uint64_t result = sub_181389890( (sqlite3 *)*v4,  0LL,  "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                 v4[1],
                 v4[2],
                 "idx",
                 a2,
                 "idx");
      if (!(_DWORD)result)
      {
        uint64_t result = sub_181389890( (sqlite3 *)*v4,  0LL,  "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                   v4[1],
                   v4[2],
                   "config",
                   a2,
                   "config");
        if (*((_DWORD *)v4 + 22) && !(_DWORD)result) {
          uint64_t result = sub_181389890( (sqlite3 *)*v4,  0LL,  "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
        }
                     v4[1],
                     v4[2],
                     "docsize",
                     a2,
                     "docsize");
        if (!(*((_DWORD *)v4 + 16) | result)) {
          return sub_181389890( (sqlite3 *)*v4,  0LL,  "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
        }
                   v4[1],
                   v4[2],
                   "content",
                   a2,
                   "content");
      }
    }
  }

  return result;
}

uint64_t sub_181385E84(uint64_t a1)
{
  for (uint64_t i = *(void *)(*(void *)(a1 + 48) + 72LL); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(void *)i == a1) {
      *(_DWORD *)(i + 80) |= 0x20u;
    }
  }

  return sub_1813A363C(*(uint64_t ***)(a1 + 40));
}

uint64_t sub_181385EC8(uint64_t a1)
{
  for (uint64_t i = *(void *)(*(void *)(a1 + 48) + 72LL); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(void *)i == a1) {
      *(_DWORD *)(i + 80) |= 0x20u;
    }
  }

  return sub_1813A363C(*(uint64_t ***)(a1 + 40));
}

uint64_t sub_181385F0C(void *a1)
{
  for (uint64_t i = *(void *)(a1[6] + 72LL); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(void **)i == a1) {
      *(_DWORD *)(i + 80) |= 0x20u;
    }
  }

  *(_DWORD *)(a1[3] + 136LL) = 0;
  uint64_t v2 = a1[5];
  *(_DWORD *)(v2 + 16) = 0;
  sub_181388658(*(void *)(v2 + 8));
  return 0LL;
}

uint64_t sub_181385F74(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = "config";
    for (uint64_t i = (_BYTE *)result; ; ++i)
    {
      uint64_t v3 = *i;
      uint64_t v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v3] != byte_1813C6343[v4])
      {
        sqlite3_int64 v5 = "content";
        for (uint64_t j = (_BYTE *)result; ; ++j)
        {
          uint64_t v7 = *j;
          uint64_t v8 = *(unsigned __int8 *)v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j) {
              return 1LL;
            }
          }

          else if (byte_1813C6343[v7] != byte_1813C6343[v8])
          {
            uint64_t v9 = "data";
            for (uint64_t k = (_BYTE *)result; ; ++k)
            {
              uint64_t v11 = *k;
              uint64_t v12 = *(unsigned __int8 *)v9;
              if ((_DWORD)v11 == (_DWORD)v12)
              {
                if (!*k) {
                  return 1LL;
                }
              }

              else if (byte_1813C6343[v11] != byte_1813C6343[v12])
              {
                uint64_t v13 = "docsize";
                for (uint64_t m = (_BYTE *)result; ; ++m)
                {
                  uint64_t v15 = *m;
                  uint64_t v16 = *(unsigned __int8 *)v13;
                  if ((_DWORD)v15 == (_DWORD)v16)
                  {
                    if (!*m) {
                      return 1LL;
                    }
                  }

                  else if (byte_1813C6343[v15] != byte_1813C6343[v16])
                  {
                    for (n = "idx"; ; ++n)
                    {
                      uint64_t v18 = *(unsigned __int8 *)result;
                      uint64_t v19 = *(unsigned __int8 *)n;
                      if ((_DWORD)v18 == (_DWORD)v19)
                      {
                        if (!*(_BYTE *)result) {
                          return 1LL;
                        }
                      }

                      else if (byte_1813C6343[v18] != byte_1813C6343[v19])
                      {
                        return 0LL;
                      }

                      ++result;
                    }
                  }

                  ++v13;
                }
              }

              ++v9;
            }
          }

          ++v5;
        }
      }

      ++v1;
    }
  }

  return result;
}

uint64_t sub_1813860D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sqlite3_overload_function(*(sqlite3 **)(a1 + 32), a2, -1);
  if (!(_DWORD)result)
  {
    size_t v11 = strlen(a2);
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v12 = (void *)sub_18126F0AC(v11 + 49);
    if (!v12)
    {
      return 7LL;
    }

    else
    {
      uint64_t v13 = v12;
      bzero(v12, v11 + 49);
      v13[1] = v13 + 6;
      memcpy(v13 + 6, a2, v11 + 1);
      uint64_t result = 0LL;
      void *v13 = a1;
      _OWORD v13[2] = a3;
      v13[3] = a4;
      uint64_t v14 = *(void *)(a1 + 48);
      v13[4] = a5;
      void v13[5] = v14;
      *(void *)(a1 + 48) = v13;
    }
  }

  return result;
}

uint64_t sub_181386190(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v12 = (void *)sub_18126F0AC(v10 + 57);
  if (!v12) {
    return 7LL;
  }
  uint64_t v13 = v12;
  bzero(v12, v10 + 57);
  void *v13 = v13 + 7;
  memcpy(v13 + 7, __s, v10 + 1);
  v13[1] = a3;
  uint64_t v14 = *(void *)(a4 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a4;
  v13[4] = v14;
  void v13[5] = a5;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[6] = v15;
  *(void *)(a1 + 56) = v13;
  uint64_t result = 0LL;
  if (!v15) {
    *(void *)(a1 + 64) = v13;
  }
  return result;
}

uint64_t sub_181386250(uint64_t a1, _BYTE *a2, void *a3, uint64_t a4)
{
  if (a2)
  {
    for (uint64_t i = *(unsigned __int8 **)(a1 + 56); i; uint64_t i = (unsigned __int8 *)*((void *)i + 6))
    {
      sqlite3_int64 v5 = *(unsigned __int8 **)i;
      if (*(void *)i)
      {
        for (uint64_t j = a2; ; ++j)
        {
          uint64_t v7 = *j;
          uint64_t v8 = *v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j) {
              goto LABEL_11;
            }
          }

          else if (byte_1813C6343[v7] != byte_1813C6343[v8])
          {
            break;
          }

          ++v5;
        }
      }
    }
  }

  else
  {
    uint64_t i = *(unsigned __int8 **)(a1 + 64);
    if (i)
    {
LABEL_11:
      uint64_t result = 0LL;
      __int128 v10 = *((_OWORD *)i + 1);
      *(void *)(a4 + 16) = *((void *)i + 4);
      *(_OWORD *)a4 = v10;
      *a3 = *((void *)i + 1);
      return result;
    }
  }

  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  uint64_t result = 1LL;
  *(void *)(a4 + 16) = 0LL;
  return result;
}

uint64_t sub_1813862E8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void (*)(void))v2[4];
      sqlite3_int64 v5 = (void *)v2[5];
      if (v4) {
        v4(v2[2]);
      }
      uint64_t v6 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v2);
        --qword_18C468B10;
        off_18C4653A8(v2);
        uint64_t v2 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_5;
        }
        uint64_t v6 = &xmmword_18C465410;
      }

      (*v6)(v2);
LABEL_5:
      uint64_t v2 = v5;
    }

    while (v5);
  }

  uint64_t v3 = *(void **)(v1 + 56);
  if (!v3)
  {
LABEL_23:
    size_t v11 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v1);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v1);
      uint64_t v1 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return result;
      }
      size_t v11 = &xmmword_18C465410;
    }

    return (*v11)(v1);
  }

  do
  {
    uint64_t v8 = (void (*)(void))v3[5];
    uint64_t v9 = (void *)v3[6];
    if (v8) {
      v8(v3[1]);
    }
    __int128 v10 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_13;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v3);
    uint64_t v3 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int128 v10 = &xmmword_18C465410;
LABEL_13:
      uint64_t result = (*v10)(v3);
    }

    uint64_t v3 = v9;
  }

  while (v9);
  if (v1) {
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_1813864C8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result && (uint64_t v4 = *(void *)(result + 8)) != 0)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *a3;
    if (!*a3) {
      return sub_1812CF36C(97118);
    }
  }

  else
  {
    uint64_t result = sub_1812CF36C(97932);
    uint64_t v5 = 0LL;
    uint64_t v6 = *a3;
    if (!v6) {
      return sub_1812CF36C(97118);
    }
  }

  if ((*(_WORD *)(v6 + 20) & 0xFBF) == 0xA01 && *(_BYTE *)(v6 + 23) == 112)
  {
    uint64_t result = strcmp(*(const char **)v6, "fts5_api_ptr");
    if (!(_DWORD)result)
    {
      uint64_t v7 = *(void **)(v6 + 8);
      if (v7) {
        *uint64_t v7 = v5;
      }
    }
  }

  return result;
}

void sub_18138656C(uint64_t a1)
{
  if (a1) {
    sub_1812D7A8C( a1,  "fts5: 2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709a6b1",  -1,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sub_1812CF36C(97498);
  }
}

uint64_t sub_181386594(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, char **a7)
{
  if (sqlite3_initialize())
  {
    uint64_t v14 = 0LL;
    goto LABEL_3;
  }

  int v17 = (_OWORD *)sub_18126F0AC(64LL);
  uint64_t v14 = v17;
  if (!v17) {
    goto LABEL_3;
  }
  uint64_t v17[2] = 0u;
  v17[3] = 0u;
  *int v17 = 0u;
  v17[1] = 0u;
  unsigned int v213 = 0;
  if (sqlite3_initialize()) {
    goto LABEL_3;
  }
  uint64_t v18 = sub_18126F0AC(192LL);
  if (!v18) {
    goto LABEL_3;
  }
  uint64_t v19 = v18;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)uint64_t v18 = a2;
  *(_DWORD *)(v18 + 132) = -1;
  int __s = (char *)a4;
  if (sqlite3_initialize() || (unsigned int v20 = (char *)sub_18126F0AC(9LL * a4)) == 0LL)
  {
    if (a4 > 0)
    {
      *(void *)(v19 + 32) = 0LL;
      *(void *)(v19 + 40) = 0LL;
LABEL_24:
      *(void *)(v19 + 8) = 0LL;
LABEL_25:
      *(void *)(v19 + 16) = 0LL;
      *(void *)(v19 + 88) = 1LL;
      goto LABEL_26;
    }

    unsigned int v208 = a7;
    int v21 = 0LL;
  }

  else
  {
    int v21 = v20;
    unsigned int v208 = a7;
    bzero(v20, 9LL * a4);
  }

  int v22 = &v21[8 * a4];
  if (!v21) {
    int v22 = 0LL;
  }
  *(void *)(v19 + 32) = v21;
  *(void *)(v19 + 40) = v22;
  int v23 = *(const char **)(a5 + 8);
  unsigned int v24 = strlen(v23);
  int v25 = sqlite3_initialize();
  if ((v24 & 0x80000000) != 0) {
    goto LABEL_24;
  }
  if (v25) {
    goto LABEL_24;
  }
  uint64_t v26 = (_BYTE *)sub_18126F0AC(v24 + 1);
  if (!v26) {
    goto LABEL_24;
  }
  uint64_t v27 = v26;
  memcpy(v26, v23, v24);
  v27[v24] = 0;
  *(void *)(v19 + 8) = v27;
  uint64_t v28 = *(const char **)(a5 + 16);
  unsigned int v29 = strlen(v28);
  int v30 = sqlite3_initialize();
  if ((v29 & 0x80000000) != 0) {
    goto LABEL_25;
  }
  if (v30) {
    goto LABEL_25;
  }
  uint64_t v31 = (_BYTE *)sub_18126F0AC(v29 + 1);
  if (!v31) {
    goto LABEL_25;
  }
  uint64_t v32 = v31;
  memcpy(v31, v28, v29);
  uint64_t v33 = 0LL;
  v32[v29] = 0;
  *(void *)(v19 + 16) = v32;
  *(void *)(v19 + 88) = 1LL;
  uint64_t v34 = v208;
  while (1)
  {
    uint64_t v35 = v32[v33];
    uint64_t v36 = aRank[v33];
    if ((_DWORD)v35 != (_DWORD)v36) {
      break;
    }
    if (!v32[v33])
    {
      uint64_t v37 = sqlite3_mprintf("reserved fts5 table name: %s");
      goto LABEL_33;
    }

LABEL_555:
            sub_18138AB1C((uint64_t)v184);
            v14[5] = 0LL;
            goto LABEL_4;
          }

          int v194 = *(_DWORD *)(v19 + 24);
          if (sqlite3_initialize() || (__sa = (char *)sub_18126F0AC(10LL * v194 + 32)) == 0LL)
          {
            uint64_t v15 = 7LL;
            goto LABEL_555;
          }

          int v197 = 10 * v194 + 32;
          sqlite3_snprintf(v197, __sa, "id INTEGER PRIMARY KEY");
          if (*(int *)(v19 + 24) >= 1)
          {
            int v198 = strlen(__sa);
            int v199 = 0;
            do
            {
              sqlite3_snprintf(v197 - v198, &__sa[v198], ", c%d", v199);
              v198 += strlen(&__sa[v198]);
              ++v199;
            }

            while (v199 < *(_DWORD *)(v19 + 24));
          }

          uint64_t v15 = sub_181389500(v19, (uint64_t)"content", (uint64_t)__sa, 0, v34);
          int v200 = (void (**)(char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(__sa);
            --qword_18C468B10;
            off_18C4653A8(__sa);
            __sa = (char *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70)
            {
LABEL_570:
              if ((_DWORD)v15) {
                goto LABEL_555;
              }
              goto LABEL_525;
            }

            int v200 = (void (**)(char *))&xmmword_18C465410;
          }

          (*v200)(__sa);
          goto LABEL_570;
        }

        if (!sqlite3_initialize())
        {
          unint64_t v168 = (char *)sub_18126F0AC(6LL);
          if (v168)
          {
            strcpy(v168, "rowid");
            *(void *)(v19 + 80) = v168;
            goto LABEL_482;
          }
        }

        *(void *)(v19 + 80) = 0LL;
LABEL_26:
        uint64_t v15 = 7LL;
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v171 = *(void *)(a3 + 64);
      int v173 = *(uint64_t (**)(void, void, void, uint64_t))(v171 + 16);
      uint64_t v172 = (uint64_t (**)(uint64_t, uint64_t, int, void *))(v171 + 16);
      uint64_t v174 = v173(*(v172 - 1), 0LL, 0LL, v19 + 104);
      *(void *)(v19 + 112) = v172;
      if ((_DWORD)v174)
      {
        uint64_t v15 = v174;
        *int v167 = 0LL;
        *(void *)(v19 + 112) = 0LL;
        goto LABEL_27;
      }

      if (*v172 == sub_181389144)
      {
        if (*(_DWORD *)*v167) {
          int v175 = 65;
        }
        else {
          int v175 = 66;
        }
      }

      else
      {
        int v175 = 0;
      }

      *(_DWORD *)(v19 + 124) = v175;
      unsigned int v213 = 0;
      a1 = v206;
      if (*(void *)(v19 + 72)) {
        goto LABEL_481;
      }
    }

    if (*(_DWORD *)(v19 + 64))
    {
      if (!*(_DWORD *)(v19 + 88)) {
        goto LABEL_481;
      }
      unsigned int v179 = "docsize";
    }

    else
    {
      unsigned int v179 = "content";
    }

    *(void *)(v19 + 72) = sub_1813889B8(&v213, "%Q.'%q_%s'", *(void *)(v19 + 8), *(void *)(v19 + 16), v179);
    uint64_t v15 = v213;
    if (v213) {
      goto LABEL_27;
    }
    goto LABEL_481;
  }

  unsigned int v205 = (void *)(v19 + 104);
  uint64_t v38 = 3LL;
  do
  {
    int v39 = *(char **)(a5 + 8 * v38);
    *(void *)&__int128 v215 = 0LL;
    int v212 = 0LL;
    int v211 = 0;
    unint64_t v40 = sub_1813887BC(&v213, v39, (unsigned __int8 **)&v215, &v211);
    uint64_t v207 = v38;
    if (!v40)
    {
LABEL_40:
      uint64_t v15 = v213;
      if (v213) {
        goto LABEL_78;
      }
LABEL_75:
      unint64_t v57 = sqlite3_mprintf("parse error in %s");
LABEL_76:
      char *v208 = v57;
      uint64_t v15 = 1LL;
      goto LABEL_77;
    }

    do
    {
      int v42 = *v40++;
      int v41 = v42;
    }

    while (v42 == 32);
    if (v41 == 61)
    {
      if (v211) {
        goto LABEL_40;
      }
    }

    else
    {
      --v40;
    }

    uint64_t v43 = v40 - 1;
    do
    {
      int v45 = *++v43;
      int v44 = v45;
    }

    while (v45 == 32);
    if (v44)
    {
      uint64_t v46 = sub_1813887BC(&v213, v43, (unsigned __int8 **)&v212, &v214);
      if (v46)
      {
        if (*v46) {
          uint64_t v43 = 0LL;
        }
        else {
          uint64_t v43 = v46;
        }
      }

      else
      {
        uint64_t v43 = 0LL;
      }
    }

    uint64_t v15 = v213;
    if (v213) {
      goto LABEL_78;
    }
    if (!v43) {
      goto LABEL_75;
    }
    uint64_t v47 = v215;
    if (v41 != 61)
    {
      uint64_t v34 = v208;
      if (!(void)v215)
      {
LABEL_98:
        if (!v212)
        {
          uint64_t v15 = 0LL;
          goto LABEL_110;
        }

        for (uint64_t i = 0LL; ; ++i)
        {
          uint64_t v69 = v212[i];
          uint64_t v70 = aUnindexed[i];
          if ((_DWORD)v69 == (_DWORD)v70)
          {
            if (!v212[i])
            {
              uint64_t v15 = 0LL;
              *(_BYTE *)(*(void *)(v19 + 40) + *(int *)(v19 + 24)) = 1;
LABEL_110:
              uint64_t v71 = *(void *)(v19 + 32);
              uint64_t v72 = *(int *)(v19 + 24);
              *(_DWORD *)(v19 + 24) = v72 + 1;
              *(void *)(v71 + 8 * v72) = v47;
              unsigned int v213 = v15;
              goto LABEL_160;
            }
          }

          else if (byte_1813C6343[v69] != byte_1813C6343[v70])
          {
            uint64_t v67 = sqlite3_mprintf("unrecognized column option: %s");
            goto LABEL_109;
          }
        }
      }

      for (uint64_t j = 0LL; ; ++j)
      {
        uint64_t v61 = *(unsigned __int8 *)(v215 + j);
        uint64_t v62 = aRank[j];
        if ((_DWORD)v61 == (_DWORD)v62)
        {
          if (!*(_BYTE *)(v215 + j))
          {
LABEL_97:
            uint64_t v67 = sqlite3_mprintf("reserved fts5 column name: %s");
LABEL_109:
            char *v208 = v67;
            uint64_t v15 = 1LL;
            goto LABEL_110;
          }
        }

        else if (byte_1813C6343[v61] != byte_1813C6343[v62])
        {
          uint64_t v63 = "rowid";
          for (uint64_t k = (_BYTE *)v215; ; ++k)
          {
            uint64_t v65 = *k;
            uint64_t v66 = *(unsigned __int8 *)v63;
            if ((_DWORD)v65 == (_DWORD)v66)
            {
              if (!*k) {
                goto LABEL_97;
              }
            }

            else if (byte_1813C6343[v65] != byte_1813C6343[v66])
            {
              goto LABEL_98;
            }

            ++v63;
          }
        }
      }
    }

    if ((void)v215) {
      unint64_t v48 = (char *)v215;
    }
    else {
      unint64_t v48 = &byte_1813CEAEE;
    }
    if (v212) {
      int v49 = v212;
    }
    else {
      int v49 = &byte_1813CEAEE;
    }
    unsigned int v214 = 0;
    int v50 = strlen(v48);
    if (v50 < 0)
    {
      sub_1812CF36C(35844);
      goto LABEL_118;
    }

    if (!v50) {
      goto LABEL_118;
    }
    uint64_t v51 = (v50 - 1);
    int v52 = *v48;
    unsigned int v53 = v52 & 0xFFFFFFDF;
    if ((v52 & 0xFFFFFFDF) != 0x50)
    {
      int v56 = 112;
      int v54 = *v48;
      goto LABEL_117;
    }

    if (v50 == 1) {
      goto LABEL_118;
    }
    int v54 = v48[1];
    if ((v54 & 0xFFFFFFDF) != 0x52)
    {
      int v56 = 114;
      goto LABEL_117;
    }

    uint64_t v55 = &aPrefix[v51];
    if (&aPrefix[v51] == "refix") {
      goto LABEL_118;
    }
    int v54 = v48[2];
    if ((v54 & 0xFFFFFFDF) != 0x45)
    {
      int v56 = 101;
LABEL_116:
      a1 = v206;
      goto LABEL_117;
    }

    a1 = v206;
    if (v55 == "efix") {
      goto LABEL_118;
    }
    int v54 = v48[3];
    if ((v54 & 0xFFFFFFDF) != 0x46)
    {
      int v56 = 102;
      goto LABEL_116;
    }

    a1 = v206;
    if (v55 == "fix") {
      goto LABEL_118;
    }
    int v54 = v48[4];
    if ((v54 & 0xFFFFFFDF) != 0x49)
    {
      int v56 = 105;
      goto LABEL_116;
    }

    a1 = v206;
    if (v55 == "ix") {
      goto LABEL_118;
    }
    int v54 = v48[5];
    if ((v54 & 0xFFFFFFDF) != 0x58)
    {
      int v56 = 120;
      goto LABEL_116;
    }

    a1 = v206;
    if (v55 == "x") {
      goto LABEL_118;
    }
    int v56 = 0;
    int v54 = v48[6];
LABEL_117:
    if (v56 != byte_1813C6343[v54])
    {
      if (v53 != 84)
      {
        int v83 = 116;
        int v81 = *v48;
        goto LABEL_177;
      }

      if (v50 == 1) {
        goto LABEL_178;
      }
      int v81 = v48[1];
      if ((v81 & 0xFFFFFFDF) != 0x4F)
      {
        int v83 = 111;
        goto LABEL_177;
      }

      uint64_t v82 = &aTokenize[v51];
      if (&aTokenize[v51] == "okenize") {
        goto LABEL_178;
      }
      int v81 = v48[2];
      if ((v81 & 0xFFFFFFDF) != 0x4B)
      {
        int v83 = 107;
        goto LABEL_177;
      }

      if (v82 == "kenize") {
        goto LABEL_178;
      }
      int v81 = v48[3];
      if ((v81 & 0xFFFFFFDF) != 0x45) {
        goto LABEL_173;
      }
      if (v82 == "enize") {
        goto LABEL_178;
      }
      int v81 = v48[4];
      if ((v81 & 0xFFFFFFDF) == 0x4E)
      {
        if (v82 == "nize") {
          goto LABEL_178;
        }
        int v81 = v48[5];
        if ((v81 & 0xFFFFFFDF) == 0x49)
        {
          if (v82 == "ize") {
            goto LABEL_178;
          }
          int v81 = v48[6];
          if ((v81 & 0xFFFFFFDF) == 0x5A)
          {
            if (v82 == "ze") {
              goto LABEL_178;
            }
            int v81 = v48[7];
            if ((v81 & 0xFFFFFFDF) == 0x45)
            {
              if (v82 != "e")
              {
                int v83 = 0;
                int v81 = v48[8];
                goto LABEL_177;
              }

LABEL_365:
                              if (!*(void *)(v19 + 80))
                              {
                                unsigned int v136 = strlen(v49);
                                int v137 = sqlite3_initialize();
                                uint64_t v138 = 0LL;
                                uint64_t v15 = 7LL;
                                if ((v136 & 0x80000000) == 0 && !v137)
                                {
                                  uint64_t v139 = (_BYTE *)sub_18126F0AC(v136 + 1);
                                  uint64_t v138 = v139;
                                  if (v139)
                                  {
                                    memcpy(v139, v49, v136);
                                    uint64_t v15 = 0LL;
                                    v138[v136] = 0;
                                  }
                                }

                                *(void *)(v19 + 80) = v138;
                                goto LABEL_299;
                              }

                              uint64_t v122 = sqlite3_mprintf("multiple content_rowid=... directives", v201, v202);
                              goto LABEL_298;
                            }

                            int v130 = 100;
                          }

                          else
                          {
                            int v130 = 105;
                          }
                        }

                        else
                        {
                          int v130 = 119;
                        }
                      }

                      else
                      {
                        int v130 = 111;
                      }
                    }

                    else
                    {
                      int v130 = 114;
                    }
                  }

                  else
                  {
                    int v130 = 95;
                  }

LABEL_364:
                  if (v130 == byte_1813C6343[v129]) {
                    goto LABEL_365;
                  }
                  if (v51 == 1) {
                    goto LABEL_332;
                  }
                  if ((v127 & 0xFFFFFFDF) == 0x4C)
                  {
                    uint64_t v140 = &aColumnsize[v51];
                    if (&aColumnsize[v51] == "lumnsize") {
                      goto LABEL_332;
                    }
                    int v127 = v48[3];
                    if ((v127 & 0xFFFFFFDF) == 0x55)
                    {
                      if (v140 == "umnsize") {
                        goto LABEL_332;
                      }
                      int v127 = v48[4];
                      if ((v127 & 0xFFFFFFDF) == 0x4D)
                      {
                        if (v140 == "mnsize") {
                          goto LABEL_332;
                        }
                        int v127 = v48[5];
                        if ((v127 & 0xFFFFFFDF) == 0x4E)
                        {
                          if (v140 == "nsize") {
                            goto LABEL_332;
                          }
                          int v127 = v48[6];
                          if ((v127 & 0xFFFFFFDF) == 0x53)
                          {
                            if (v140 == "size") {
                              goto LABEL_332;
                            }
                            int v127 = v48[7];
                            if ((v127 & 0xFFFFFFDF) == 0x49)
                            {
                              if (v140 == "ize") {
                                goto LABEL_332;
                              }
                              int v127 = v48[8];
                              if ((v127 & 0xFFFFFFDF) == 0x5A)
                              {
                                if (v140 == "ze") {
                                  goto LABEL_332;
                                }
                                int v127 = v48[9];
                                if ((v127 & 0xFFFFFFDF) == 0x45)
                                {
                                  if (v140 != "e")
                                  {
                                    int v131 = 0;
                                    int v127 = v48[10];
                                    goto LABEL_331;
                                  }

LABEL_332:
                                  int v132 = *v49;
                                  if ((v132 & 0xFE) == 0x30 && !v49[1])
                                  {
                                    uint64_t v15 = 0LL;
                                    *(_DWORD *)(v19 + 88) = v132 == 49;
                                    goto LABEL_299;
                                  }

                                  uint64_t v122 = sqlite3_mprintf("malformed columnsize=... directive", v201, v202);
                                  goto LABEL_298;
                                }

                                int v131 = 101;
                              }

                              else
                              {
                                int v131 = 122;
                              }
                            }

                            else
                            {
                              int v131 = 105;
                            }
                          }

                          else
                          {
                            int v131 = 115;
                          }
                        }

                        else
                        {
                          int v131 = 110;
                        }
                      }

                      else
                      {
                        int v131 = 109;
                      }
                    }

                    else
                    {
                      int v131 = 117;
                    }
                  }

                  else
                  {
                    int v131 = 108;
                  }

LABEL_331:
                  if (v131 == byte_1813C6343[v127]) {
                    goto LABEL_332;
                  }
                  if (v53 == 68)
                  {
                    if (v50 == 1) {
                      goto LABEL_395;
                    }
                    int v52 = v48[1];
                    if ((v52 & 0xFFFFFFDF) == 0x45)
                    {
                      sqlite3_int64 v133 = &aDetail[v51];
                      if (v133 == "etail") {
                        goto LABEL_395;
                      }
                      int v52 = v48[2];
                      if ((v52 & 0xFFFFFFDF) == 0x54)
                      {
                        if (v133 == "tail") {
                          goto LABEL_395;
                        }
                        int v52 = v48[3];
                        if ((v52 & 0xFFFFFFDF) == 0x41)
                        {
                          if (v133 == "ail") {
                            goto LABEL_395;
                          }
                          int v52 = v48[4];
                          if ((v52 & 0xFFFFFFDF) == 0x49)
                          {
                            if (v133 == "il") {
                              goto LABEL_395;
                            }
                            int v52 = v48[5];
                            if ((v52 & 0xFFFFFFDF) == 0x4C)
                            {
                              if (v133 == "l") {
                                goto LABEL_395;
                              }
                              int v134 = 0;
                              int v52 = v48[6];
                            }

                            else
                            {
                              int v134 = 108;
                            }
                          }

                          else
                          {
                            int v134 = 105;
                          }
                        }

                        else
                        {
                          int v134 = 97;
                        }
                      }

                      else
                      {
                        int v134 = 116;
                      }
                    }

                    else
                    {
                      int v134 = 101;
                    }
                  }

                  else
                  {
                    int v134 = 100;
                  }

                  if (v134 != byte_1813C6343[v52])
                  {
                    uint64_t v122 = sqlite3_mprintf("unrecognized option: %.*s");
LABEL_298:
                    char *v208 = v122;
                    uint64_t v15 = 1LL;
                    goto LABEL_299;
                  }

LABEL_395:
                  int v141 = strlen(v49);
                  if (v141 < 0)
                  {
                    sub_1812CF36C(35844);
                    sub_1812CF36C(35844);
                    goto LABEL_466;
                  }

                  if (!v141)
                  {
LABEL_466:
                    uint64_t v122 = sqlite3_mprintf("malformed detail=... directive", v201, v202);
                    goto LABEL_298;
                  }

                  uint64_t v142 = (v141 - 1);
                  uint64_t v143 = *v49;
                  uint64_t v144 = &byte_1813C6343[v143];
                  int v145 = v143 & 0xFFFFFFDF;
                  if (v145 == 78)
                  {
                    if (v141 == 1) {
                      goto LABEL_413;
                    }
                    uint64_t v146 = v49[1];
                    if ((v146 & 0xFFFFFFDF) == 0x4F)
                    {
                      uint64_t v147 = &aNone[v142];
                      if (&aNone[v142] == "one") {
                        goto LABEL_413;
                      }
                      uint64_t v148 = v49[2];
                      if ((v148 & 0xFFFFFFDF) == 0x4E)
                      {
                        if (v147 == "ne") {
                          goto LABEL_413;
                        }
                        uint64_t v149 = v49[3];
                        if ((v149 & 0xFFFFFFDF) == 0x45)
                        {
                          if (v147 == "e") {
                            goto LABEL_413;
                          }
                          int v150 = 0;
                          int v151 = &byte_1813C6343[v49[4]];
                        }

                        else
                        {
                          int v151 = &byte_1813C6343[v149];
                          int v150 = 101;
                        }
                      }

                      else
                      {
                        int v151 = &byte_1813C6343[v148];
                        int v150 = 110;
                      }
                    }

                    else
                    {
                      int v151 = &byte_1813C6343[v146];
                      int v150 = 111;
                    }
                  }

                  else
                  {
                    int v150 = 110;
                    int v151 = v144;
                  }

                  if (v150 != *v151)
                  {
                    char v153 = 0;
                    int v152 = -1;
LABEL_415:
                    if (v145 == 70)
                    {
                      if (v141 == 1) {
                        goto LABEL_425;
                      }
                      uint64_t v154 = v49[1];
                      if ((v154 & 0xFFFFFFDF) == 0x55)
                      {
                        int v155 = &aFull[v142];
                        if (&aFull[v142] == "ull") {
                          goto LABEL_425;
                        }
                        uint64_t v156 = v49[2];
                        if ((v156 & 0xFFFFFFDF) == 0x4C)
                        {
                          if (v155 == "ll") {
                            goto LABEL_425;
                          }
                          uint64_t v156 = v49[3];
                          if ((v156 & 0xFFFFFFDF) == 0x4C)
                          {
                            if (v155 != "l")
                            {
                              int v157 = 0;
                              unsigned int v158 = &byte_1813C6343[v49[4]];
                              goto LABEL_429;
                            }

LABEL_425:
                            if ((v153 & 1) == 0)
                            {
                              uint64_t v15 = 0LL;
                              *(_DWORD *)(v19 + 92) = 0;
                              goto LABEL_299;
                            }

                            goto LABEL_466;
                          }
                        }

                        unsigned int v158 = &byte_1813C6343[v156];
                        int v157 = 108;
                      }

                      else
                      {
                        unsigned int v158 = &byte_1813C6343[v154];
                        int v157 = 117;
                      }
                    }

                    else
                    {
                      int v157 = 102;
                      unsigned int v158 = v144;
                    }

LABEL_429:
                    if (v157 == *v158) {
                      int v152 = 0;
                    }
                    else {
                      char v153 = 0;
                    }
                    if ((v153 & 1) == 0)
                    {
                      if (v145 == 67)
                      {
                        if (v141 == 1) {
                          goto LABEL_462;
                        }
                        uint64_t v159 = v49[1];
                        if ((v159 & 0xFFFFFFDF) == 0x4F)
                        {
                          uint64_t v160 = &aColumns[v142];
                          if (&aColumns[v142] == "olumns") {
                            goto LABEL_462;
                          }
                          uint64_t v161 = v49[2];
                          if ((v161 & 0xFFFFFFDF) == 0x4C)
                          {
                            if (v160 == "lumns") {
                              goto LABEL_462;
                            }
                            uint64_t v162 = v49[3];
                            if ((v162 & 0xFFFFFFDF) == 0x55)
                            {
                              if (v160 == "umns") {
                                goto LABEL_462;
                              }
                              uint64_t v163 = v49[4];
                              if ((v163 & 0xFFFFFFDF) == 0x4D)
                              {
                                if (v160 == "mns") {
                                  goto LABEL_462;
                                }
                                uint64_t v164 = v49[5];
                                if ((v164 & 0xFFFFFFDF) == 0x4E)
                                {
                                  if (v160 == "ns") {
                                    goto LABEL_462;
                                  }
                                  uint64_t v165 = v49[6];
                                  if ((v165 & 0xFFFFFFDF) == 0x53)
                                  {
                                    if (v160 == "s") {
                                      goto LABEL_462;
                                    }
                                    int v166 = 0;
                                    uint64_t v144 = &byte_1813C6343[v49[7]];
                                  }

                                  else
                                  {
                                    uint64_t v144 = &byte_1813C6343[v165];
                                    int v166 = 115;
                                  }
                                }

                                else
                                {
                                  uint64_t v144 = &byte_1813C6343[v164];
                                  int v166 = 110;
                                }
                              }

                              else
                              {
                                uint64_t v144 = &byte_1813C6343[v163];
                                int v166 = 109;
                              }
                            }

                            else
                            {
                              uint64_t v144 = &byte_1813C6343[v162];
                              int v166 = 117;
                            }
                          }

                          else
                          {
                            uint64_t v144 = &byte_1813C6343[v161];
                            int v166 = 108;
                          }
                        }

                        else
                        {
                          uint64_t v144 = &byte_1813C6343[v159];
                          int v166 = 111;
                        }
                      }

                      else
                      {
                        int v166 = 99;
                      }

                      if (v166 == *v144)
                      {
LABEL_462:
                        if (v152 < 0)
                        {
                          uint64_t v15 = 0LL;
                          *(_DWORD *)(v19 + 92) = 2;
                          goto LABEL_299;
                        }

                        goto LABEL_466;
                      }

                      *(_DWORD *)(v19 + 92) = v152;
                      if ((v152 & 0x80000000) == 0)
                      {
                        uint64_t v15 = 0LL;
                        goto LABEL_299;
                      }
                    }

                    goto LABEL_466;
                  }

LABEL_413:
                  int v152 = 1;
                  char v153 = 1;
                  goto LABEL_415;
                }
              }

              int v130 = 116;
              goto LABEL_364;
            }

            goto LABEL_283;
          }

_DWORD *sub_181388658(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 64) = 0LL;
    uint64_t v3 = (sqlite3_stmt *)v2[3];
    uint64_t v4 = (void *)v2[4];
    uint64_t v5 = v4[3];
    if (v5) {
      xmmword_18C465400(v5);
    }
    sub_1812F20DC(v4, v2);
    uint64_t v6 = v4[3];
    if (v6) {
      xmmword_18C465410(v6);
    }
    sqlite3_finalize(v3);
  }

  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    sub_18138A70C(v7);
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 56) = 0;
  }

  *(_DWORD *)(a1 + 52) = 0;
  uint64_t result = *(_DWORD **)(a1 + 144);
  if (result)
  {
    uint64_t result = sub_18138A584(result);
    *(void *)(a1 + 144) = 0LL;
  }

  return result;
}

uint64_t sub_1813886F0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_181389624(*(void *)(result + 32));
    sub_18138AB1C(*(void *)(v1 + 40));
    sub_181388A10(*(void *)(v1 + 24));
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

char *sub_1813887BC(_DWORD *a1, char *__s, unsigned __int8 **a3, _DWORD *a4)
{
  size_t v8 = strlen(__s);
  if (sqlite3_initialize())
  {
    *a4 = 0;
    *a3 = 0LL;
LABEL_3:
    uint64_t result = 0LL;
    *a1 = 7;
    return result;
  }

  size_t v10 = v8 + 1;
  size_t v11 = (unsigned __int8 *)sub_18126F0AC(v8 + 1);
  *a4 = 0;
  *a3 = 0LL;
  if (!v11) {
    goto LABEL_3;
  }
  uint64_t v12 = v11;
  memcpy(v11, __s, v10);
  int v13 = *v12;
  if ((v13 - 34) > 0x3E || ((1LL << (v13 - 34)) & 0x4200000000000021LL) == 0)
  {
    if (i)
    {
      uint64_t result = &__s[i];
      v12[i] = 0;
      *a3 = v12;
      return result;
    }
  }

  else
  {
    if (v13 == 91) {
      int v15 = 93;
    }
    else {
      int v15 = *v12;
    }
    int v16 = v12[1];
    if (v12[1])
    {
      uint64_t v17 = 0LL;
      int v18 = 1;
      do
      {
        uint64_t v19 = v18 + 1LL;
        if (v16 == v15)
        {
          if (v12[v19] != v15) {
            goto LABEL_21;
          }
          v18 += 2;
          LOBYTE(v16) = v15;
        }

        else
        {
          ++v18;
        }

        v12[v17++] = v16;
        int v16 = v12[v18];
      }

      while (v12[v18]);
      LODWORD(v19) = v18;
    }

    else
    {
      LODWORD(v17) = 0;
      LODWORD(v19) = 1;
    }

char *sub_1813889B8(_DWORD *a1, char *a2, ...)
{
  if (*a1) {
    return 0LL;
  }
  uint64_t result = sqlite3_vmprintf(a2, va);
  if (!result) {
    *a1 = 7;
  }
  return result;
}

uint64_t sub_181388A10(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(void *)(result + 104)) {
    (*(void (**)(void))(*(void *)(result + 112) + 8LL))();
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_10:
      (*v3)(v2);
      goto LABEL_11;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_10;
    }
  }

char *sub_181388F7C(unsigned __int8 *a1)
{
  int v1 = (char)*a1;
  int v2 = *a1;
  if (v1 <= 87)
  {
    if (v1 == 39)
    {
      uint64_t v3 = a1 + 1;
      while (1)
      {
        if (*v3 == 39)
        {
          int v18 = *++v3;
          if (v18 != 39) {
            break;
          }
        }

        if (!*++v3) {
          return 0LL;
        }
      }

      return v3;
    }

    if (v1 == 78)
    {
LABEL_5:
      uint64_t v3 = a1 + 4;
      if ((v2 & 0xFFFFFFDF) == 0x4E)
      {
        uint64_t v4 = (char *)(a1 + 1);
        if ((a1[1] & 0xDF) == 0x55)
        {
          uint64_t v4 = (char *)(a1 + 2);
          if ((a1[2] & 0xDF) == 0x4C)
          {
            int v5 = a1[3];
            a1 += 3;
            if ((v5 & 0xFFFFFFDF) == 0x4C) {
              return v3;
            }
            int v6 = 108;
            goto LABEL_42;
          }

          int v6 = 108;
        }

        else
        {
          int v6 = 117;
        }

        a1 = (unsigned __int8 *)v4;
      }

      else
      {
        int v6 = 110;
      }

uint64_t sub_181389144(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (!sqlite3_initialize())
  {
    int v9 = (_DWORD *)sub_18126F0AC(4LL);
    uint64_t v7 = v9;
    if (!v9) {
      goto LABEL_3;
    }
    *int v9 = 1;
    if (a3 < 1) {
      goto LABEL_17;
    }
    uint64_t v10 = 0LL;
LABEL_8:
    int v11 = *(_BYTE **)(a2 + 8 * v10);
    if (!v11)
    {
LABEL_18:
      uint64_t v17 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_23;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      uint64_t v7 = (_DWORD *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v17 = &xmmword_18C465410;
LABEL_23:
        (*v17)(v7);
        uint64_t v7 = 0LL;
      }

      uint64_t result = 1LL;
      goto LABEL_4;
    }

    uint64_t v12 = *(unsigned __int8 **)(a2 + ((8 * v10) | 8));
    for (uint64_t i = "case_sensitive"; ; ++i)
    {
      uint64_t v14 = *v11;
      uint64_t v15 = *(unsigned __int8 *)i;
      if ((_DWORD)v14 == (_DWORD)v15)
      {
        if (!*v11)
        {
          int v16 = *v12;
          if ((v16 & 0xFE) != 0x30 || v12[1]) {
            goto LABEL_18;
          }
          *int v9 = v16 == 48;
          v10 += 2LL;
          if ((int)v10 >= a3)
          {
LABEL_17:
            uint64_t result = 0LL;
            goto LABEL_4;
          }

          goto LABEL_8;
        }
      }

      else if (byte_1813C6343[v14] != byte_1813C6343[v15])
      {
        goto LABEL_18;
      }

      ++v11;
    }
  }

  uint64_t v7 = 0LL;
LABEL_3:
  uint64_t result = 7LL;
LABEL_4:
  *a4 = v7;
  return result;
}

uint64_t sub_1813892C4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

char *sub_181389378(char *result, uint64_t a2, char *a3, ...)
{
  if (*(_DWORD *)result) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = sqlite3_vmprintf(a3, va);
  if (!result)
  {
    *(_DWORD *)uint64_t v4 = 7;
    return result;
  }

  int v5 = result;
  int v6 = strlen(result);
  size_t v7 = (v6 + 1);
  if (v6 != -1)
  {
    int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    unint64_t v10 = (v8 + v7);
    if (v10 <= v9)
    {
      uint64_t v14 = *(void *)a2;
LABEL_16:
      memcpy((void *)(v14 + v8), v5, v7);
      *(_DWORD *)(a2 + 8) += v7;
      goto LABEL_17;
    }

    if (v9) {
      LODWORD(v11) = *(_DWORD *)(a2 + 12);
    }
    else {
      LODWORD(v11) = 64;
    }
    unint64_t v11 = (int)v11;
    do
    {
      unint64_t v12 = v11;
      v11 *= 2LL;
    }

    while (v12 < v10);
    uint64_t v13 = *(void *)a2;
    if (!sqlite3_initialize())
    {
      uint64_t v14 = sub_18127D33C(v13, v12);
      if (v14)
      {
        *(_DWORD *)(a2 + 12) = v12;
        *(void *)a2 = v14;
        int v8 = *(_DWORD *)(a2 + 8);
        goto LABEL_16;
      }
    }

    *(_DWORD *)uint64_t v4 = 7;
  }

uint64_t sub_181389500(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  int v8 = *(sqlite3 **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = " WITHOUT ROWID";
  if (!a4) {
    unint64_t v11 = &byte_1813CEAEE;
  }
  int v16 = 0LL;
  uint64_t v12 = sub_181389890(v8, &v16, "CREATE TABLE %Q.'%q_%q'(%s)%s", v9, v10, a2, a3, v11);
  if (v16)
  {
    *a5 = sqlite3_mprintf("fts5: error creating shadow table %q_%s: %s", *(void *)(a1 + 16), a2, v16);
    uint64_t v13 = v16;
    if (v16)
    {
      uint64_t v14 = (void (**)(char *))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_10:
        (*v14)(v13);
        return v12;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
      --qword_18C468B10;
      off_18C4653A8(v13);
      uint64_t v13 = (char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v14 = (void (**)(char *))&xmmword_18C465410;
        goto LABEL_10;
      }
    }
  }

  return v12;
}

uint64_t sub_181389624(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  int v2 = *(_DWORD **)(result + 144);
  if (v2)
  {
    sub_18138A584(v2);
    *(void *)(v1 + 144) = 0LL;
  }

  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 72));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 80));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 88));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 96));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 104));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 128));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 120));
  uint64_t v3 = *(void *)(v1 + 24);
  if (!v3) {
    goto LABEL_18;
  }
  sub_18138A70C(*(void *)(v1 + 24));
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    int v5 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      uint64_t v4 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_12;
      }
      int v5 = &xmmword_18C465410;
    }

    (*v5)(v4);
  }

uint64_t sub_181389890(sqlite3 *a1, char **a2, char *a3, ...)
{
  int v5 = sqlite3_vmprintf(a3, va);
  if (!v5) {
    return 7LL;
  }
  int v6 = v5;
  uint64_t v7 = sqlite3_exec(a1, v5, 0LL, 0LL, a2);
  int v8 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_7;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
  --qword_18C468B10;
  off_18C4653A8(v6);
  int v6 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v8 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_7:
    (*v8)(v6);
  }

  return v7;
}

unsigned __int8 *sub_181389984(unsigned __int8 *result, uint64_t a2, char *a3, unsigned int a4)
{
  if (*((_DWORD *)result + 15)) {
    return result;
  }
  uint64_t v7 = result;
  int v8 = (uint64_t **)(result + 72);
  uint64_t v9 = (uint64_t *)*((void *)result + 9);
  if (!v9)
  {
    uint64_t result = (unsigned __int8 *)sqlite3_mprintf( "REPLACE INTO '%q'.'%q_data'(id, block) VALUES(?,?)",  *(void *)(*(void *)result + 8LL),  *(void *)(*(void *)result + 16LL));
    uint64_t v12 = result;
    if (*((_DWORD *)v7 + 15))
    {
      if (!result) {
        return result;
      }
    }

    else
    {
      if (!result)
      {
        *((_DWORD *)v7 + 15) = 7;
        return result;
      }

      *((_DWORD *)v7 + 15) = sub_18126DFE0(**(void **)v7, result, 0xFFFFFFFFLL, 133LL, 0LL, v8, 0LL, v11);
    }

    uint64_t v13 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
      --qword_18C468B10;
      uint64_t result = (unsigned __int8 *)off_18C4653A8(v12);
      uint64_t v12 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_17;
      }
      uint64_t v13 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    uint64_t result = (unsigned __int8 *)(*v13)(v12);
LABEL_17:
    if (*((_DWORD *)v7 + 15)) {
      return result;
    }
    uint64_t v9 = *v8;
  }

  if (!sub_1812B2390((uint64_t)v9, 0))
  {
    uint64_t v10 = v9[16];
    if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v10, a2);
    }

    else
    {
      *(void *)uint64_t v10 = a2;
      *(_WORD *)(v10 + 20) = 4;
    }

    uint64_t v14 = *(void *)(*v9 + 24);
    if (v14) {
      xmmword_18C465410(v14);
    }
  }

  if ((a4 & 0x80000000) != 0)
  {
    sub_1812CF36C(98740);
  }

  else
  {
    uint64_t v15 = *v8;
    if (!sub_1812B2390((uint64_t)v15, 1u))
    {
      if (a3)
      {
        unsigned int v16 = sub_181269368(v15[16] + 64, a3, a4, 0, 0LL);
        if (v16)
        {
          unsigned int v17 = v16;
          uint64_t v18 = *v15;
          *(_DWORD *)(v18 + 80) = v17;
          sub_1812FA264(v18, v17);
          sub_1813037C4(*v15, v17);
        }
      }

      uint64_t v19 = *(void *)(*v15 + 24);
      if (v19) {
        xmmword_18C465410(v19);
      }
    }
  }

  sqlite3_step(*((sqlite3_stmt **)v7 + 9));
  *((_DWORD *)v7 + 15) = sqlite3_reset(*((sqlite3_stmt **)v7 + 9));
  uint64_t v20 = *((void *)v7 + 9);
  uint64_t result = (unsigned __int8 *)sub_1812B2390(v20, 1u);
  if (!(_DWORD)result)
  {
    uint64_t result = *(unsigned __int8 **)(*(void *)v20 + 24LL);
    if (result) {
      return (unsigned __int8 *)xmmword_18C465410(result);
    }
  }

  return result;
}

unsigned __int8 *sub_181389C04(unsigned __int8 *result, uint64_t a2)
{
  if (*((_DWORD *)result + 15)) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(*(void *)result + 132LL);
  if (sqlite3_initialize() || (int v8 = (char *)sub_18127D33C(0LL, 64LL)) == 0LL)
  {
    int v5 = 0LL;
    signed int v6 = 0;
    unsigned int v7 = 0;
    *((_DWORD *)v3 + 15) = 7;
  }

  else
  {
    int v5 = v8;
    *(_DWORD *)int v8 = bswap32(v4 & ~(v4 >> 31));
    if (*(void *)(a2 + 16))
    {
      *((_DWORD *)v8 + 1) = 16777471;
      unsigned int v9 = 8;
    }

    else
    {
      unsigned int v9 = 4;
    }

    uint64_t v10 = (int8x8_t *)&v8[v9];
    unint64_t v11 = *(int *)(a2 + 28);
    if (v11 > 0x7F)
    {
      if (v11 >> 14)
      {
        int v12 = sub_181308E00(v10, v11);
      }

      else
      {
        v10->i8[0] = (v11 >> 7) | 0x80;
        v10->i8[1] = v11 & 0x7F;
        int v12 = 2;
      }
    }

    else
    {
      v10->i8[0] = v11;
      int v12 = 1;
    }

    unsigned int v13 = v9 + v12;
    uint64_t v14 = (int8x8_t *)&v5[v13];
    unint64_t v15 = *(int *)(a2 + 24);
    if (v15 > 0x7F)
    {
      if (v15 >> 14)
      {
        int v16 = sub_181308E00(v14, v15);
      }

      else
      {
        v14->i8[0] = (v15 >> 7) | 0x80;
        v14->i8[1] = v15 & 0x7F;
        int v16 = 2;
      }
    }

    else
    {
      v14->i8[0] = v15;
      int v16 = 1;
    }

    unsigned int v17 = v13 + v16;
    uint64_t v18 = (int8x8_t *)&v5[v17];
    unint64_t v19 = *(void *)(a2 + 8);
    if (v19 > 0x7F)
    {
      if (v19 >> 14)
      {
        int v20 = sub_181308E00(v18, v19);
      }

      else
      {
        v18->i8[0] = (v19 >> 7) | 0x80;
        v18->i8[1] = v19 & 0x7F;
        int v20 = 2;
      }
    }

    else
    {
      v18->i8[0] = v19;
      int v20 = 1;
    }

    signed int v6 = v17 + v20;
    unsigned int v7 = 64;
  }

  if (*(int *)(a2 + 28) >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v92 = a2;
    do
    {
      unint64_t v22 = *(int *)(a2 + 16 * v21 + 32);
      unint64_t v23 = (v6 + 9);
      if (v23 > v7)
      {
        if (v7) {
          LODWORD(v24) = v7;
        }
        else {
          LODWORD(v24) = 64;
        }
        unint64_t v24 = (int)v24;
        do
        {
          unint64_t v25 = v24;
          v24 *= 2LL;
        }

        while (v25 < v23);
        if (sqlite3_initialize() || (uint64_t v26 = sub_18127D33C((uint64_t)v5, v25)) == 0)
        {
          *((_DWORD *)v3 + 15) = 7;
          goto LABEL_44;
        }

        int v5 = (char *)v26;
        unsigned int v7 = v25;
      }

      uint64_t v27 = (int8x8_t *)&v5[v6];
      if (v22 > 0x7F)
      {
        if (v22 >> 14)
        {
          int v28 = sub_181308E00(v27, v22);
        }

        else
        {
          v27->i8[0] = (v22 >> 7) | 0x80;
          v27->i8[1] = v22 & 0x7F;
          int v28 = 2;
        }
      }

      else
      {
        v27->i8[0] = v22;
        int v28 = 1;
      }

      v6 += v28;
      LODWORD(v23) = v6 + 9;
LABEL_44:
      uint64_t v29 = a2 + 16 * v21;
      unint64_t v30 = *(int *)(v29 + 36);
      uint64_t v93 = (int *)(v29 + 36);
      if (v23 > v7)
      {
        if (v7) {
          LODWORD(v31) = v7;
        }
        else {
          LODWORD(v31) = 64;
        }
        unint64_t v31 = (int)v31;
        do
        {
          unint64_t v32 = v31;
          v31 *= 2LL;
        }

        while (v32 < v23);
        if (sqlite3_initialize() || (uint64_t v33 = sub_18127D33C((uint64_t)v5, v32)) == 0)
        {
          *((_DWORD *)v3 + 15) = 7;
          goto LABEL_60;
        }

        int v5 = (char *)v33;
        unsigned int v7 = v32;
      }

      uint64_t v34 = (int8x8_t *)&v5[v6];
      if (v30 > 0x7F)
      {
        if (v30 >> 14)
        {
          int v35 = sub_181308E00(v34, v30);
        }

        else
        {
          v34->i8[0] = (v30 >> 7) | 0x80;
          v34->i8[1] = v30 & 0x7F;
          int v35 = 2;
        }
      }

      else
      {
        v34->i8[0] = v30;
        int v35 = 1;
      }

      v6 += v35;
LABEL_60:
      uint64_t v90 = v21;
      if (*v93 >= 1)
      {
        uint64_t v36 = v21;
        uint64_t v37 = 0LL;
        int v91 = (uint64_t *)(a2 + 16 * v36 + 40);
        do
        {
          uint64_t v39 = *v91;
          unint64_t v40 = *(int *)(*v91 + 56 * v37);
          unint64_t v41 = (v6 + 9);
          if (v41 > v7)
          {
            if (v7) {
              LODWORD(v42) = v7;
            }
            else {
              LODWORD(v42) = 64;
            }
            unint64_t v42 = (int)v42;
            do
            {
              unint64_t v43 = v42;
              v42 *= 2LL;
            }

            while (v43 < v41);
            if (sqlite3_initialize() || (uint64_t v44 = sub_18127D33C((uint64_t)v5, v43)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_81;
            }

            int v5 = (char *)v44;
            unsigned int v7 = v43;
          }

          int v45 = (int8x8_t *)&v5[v6];
          if (v40 > 0x7F)
          {
            if (v40 >> 14)
            {
              int v46 = sub_181308E00(v45, v40);
            }

            else
            {
              v45->i8[0] = (v40 >> 7) | 0x80;
              v45->i8[1] = v40 & 0x7F;
              int v46 = 2;
            }
          }

          else
          {
            v45->i8[0] = v40;
            int v46 = 1;
          }

          v6 += v46;
          LODWORD(v41) = v6 + 9;
LABEL_81:
          unint64_t v47 = *(int *)(v39 + 56 * v37 + 4);
          if (v41 > v7)
          {
            if (v7) {
              LODWORD(v48) = v7;
            }
            else {
              LODWORD(v48) = 64;
            }
            unint64_t v48 = (int)v48;
            do
            {
              unint64_t v49 = v48;
              v48 *= 2LL;
            }

            while (v49 < v41);
            if (sqlite3_initialize() || (uint64_t v50 = sub_18127D33C((uint64_t)v5, v49)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_97;
            }

            int v5 = (char *)v50;
            unsigned int v7 = v49;
          }

          uint64_t v51 = (int8x8_t *)&v5[v6];
          if (v47 > 0x7F)
          {
            if (v47 >> 14)
            {
              int v52 = sub_181308E00(v51, v47);
            }

            else
            {
              v51->i8[0] = (v47 >> 7) | 0x80;
              v51->i8[1] = v47 & 0x7F;
              int v52 = 2;
            }
          }

          else
          {
            v51->i8[0] = v47;
            int v52 = 1;
          }

          v6 += v52;
          LODWORD(v41) = v6 + 9;
LABEL_97:
          unint64_t v53 = *(int *)(v39 + 56 * v37 + 8);
          if (v41 > v7)
          {
            if (v7) {
              LODWORD(v54) = v7;
            }
            else {
              LODWORD(v54) = 64;
            }
            unint64_t v54 = (int)v54;
            do
            {
              unint64_t v55 = v54;
              v54 *= 2LL;
            }

            while (v55 < v41);
            if (sqlite3_initialize() || (uint64_t v56 = sub_18127D33C((uint64_t)v5, v55)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_113;
            }

            int v5 = (char *)v56;
            unsigned int v7 = v55;
          }

          unint64_t v57 = (int8x8_t *)&v5[v6];
          if (v53 > 0x7F)
          {
            if (v53 >> 14)
            {
              int v58 = sub_181308E00(v57, v53);
            }

            else
            {
              v57->i8[0] = (v53 >> 7) | 0x80;
              v57->i8[1] = v53 & 0x7F;
              int v58 = 2;
            }
          }

          else
          {
            v57->i8[0] = v53;
            int v58 = 1;
          }

          v6 += v58;
LABEL_113:
          if (!*(void *)(v92 + 16)) {
            goto LABEL_64;
          }
          unint64_t v59 = *(void *)(v39 + 56 * v37 + 16);
          unint64_t v60 = (v6 + 9);
          if (v60 > v7)
          {
            if (v7) {
              LODWORD(v61) = v7;
            }
            else {
              LODWORD(v61) = 64;
            }
            unint64_t v61 = (int)v61;
            do
            {
              unint64_t v62 = v61;
              v61 *= 2LL;
            }

            while (v62 < v60);
            if (sqlite3_initialize() || (uint64_t v63 = sub_18127D33C((uint64_t)v5, v62)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_130;
            }

            int v5 = (char *)v63;
            unsigned int v7 = v62;
          }

          uint64_t v64 = (int8x8_t *)&v5[v6];
          if (v59 > 0x7F)
          {
            if (v59 >> 14)
            {
              int v65 = sub_181308E00(v64, v59);
            }

            else
            {
              v64->i8[0] = (v59 >> 7) | 0x80;
              v64->i8[1] = v59 & 0x7F;
              int v65 = 2;
            }
          }

          else
          {
            v64->i8[0] = v59;
            int v65 = 1;
          }

          v6 += v65;
          LODWORD(v60) = v6 + 9;
LABEL_130:
          unint64_t v66 = *(void *)(v39 + 56 * v37 + 24);
          if (v60 > v7)
          {
            if (v7) {
              LODWORD(v67) = v7;
            }
            else {
              LODWORD(v67) = 64;
            }
            unint64_t v67 = (int)v67;
            do
            {
              unint64_t v68 = v67;
              v67 *= 2LL;
            }

            while (v68 < v60);
            if (sqlite3_initialize() || (uint64_t v69 = sub_18127D33C((uint64_t)v5, v68)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_146;
            }

            int v5 = (char *)v69;
            unsigned int v7 = v68;
          }

          uint64_t v70 = (int8x8_t *)&v5[v6];
          if (v66 > 0x7F)
          {
            if (v66 >> 14)
            {
              int v71 = sub_181308E00(v70, v66);
            }

            else
            {
              v70->i8[0] = (v66 >> 7) | 0x80;
              v70->i8[1] = v66 & 0x7F;
              int v71 = 2;
            }
          }

          else
          {
            v70->i8[0] = v66;
            int v71 = 1;
          }

          v6 += v71;
          LODWORD(v60) = v6 + 9;
LABEL_146:
          unint64_t v72 = *(int *)(v39 + 56 * v37 + 32);
          if (v60 > v7)
          {
            if (v7) {
              LODWORD(v73) = v7;
            }
            else {
              LODWORD(v73) = 64;
            }
            unint64_t v73 = (int)v73;
            do
            {
              unint64_t v74 = v73;
              v73 *= 2LL;
            }

            while (v74 < v60);
            if (sqlite3_initialize() || (uint64_t v75 = sub_18127D33C((uint64_t)v5, v74)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_162;
            }

            int v5 = (char *)v75;
            unsigned int v7 = v74;
          }

          unsigned int v76 = (int8x8_t *)&v5[v6];
          if (v72 > 0x7F)
          {
            if (v72 >> 14)
            {
              int v77 = sub_181308E00(v76, v72);
            }

            else
            {
              v76->i8[0] = (v72 >> 7) | 0x80;
              v76->i8[1] = v72 & 0x7F;
              int v77 = 2;
            }
          }

          else
          {
            v76->i8[0] = v72;
            int v77 = 1;
          }

          v6 += v77;
          LODWORD(v60) = v6 + 9;
LABEL_162:
          unint64_t v78 = *(void *)(v39 + 56 * v37 + 40);
          if (v7) {
            LODWORD(v79) = v7;
          }
          else {
            LODWORD(v79) = 64;
          }
          unint64_t v79 = (int)v79;
          do
          {
            unint64_t v80 = v79;
            v79 *= 2LL;
          }

          while (v80 < v60);
          if (!sqlite3_initialize())
          {
            uint64_t v81 = sub_18127D33C((uint64_t)v5, v80);
            if (v81)
            {
              int v5 = (char *)v81;
              unsigned int v7 = v80;
LABEL_172:
              uint64_t v82 = (int8x8_t *)&v5[v6];
              if (v78 > 0x7F)
              {
                if (v78 >> 14)
                {
                  int v83 = sub_181308E00(v82, v78);
                }

                else
                {
                  v82->i8[0] = (v78 >> 7) | 0x80;
                  v82->i8[1] = v78 & 0x7F;
                  int v83 = 2;
                }
              }

              else
              {
                v82->i8[0] = v78;
                int v83 = 1;
              }

              v6 += v83;
              LODWORD(v60) = v6 + 9;
              goto LABEL_178;
            }
          }

          *((_DWORD *)v3 + 15) = 7;
LABEL_178:
          unint64_t v84 = *(void *)(v39 + 56 * v37 + 48);
          if (v7) {
            LODWORD(v85) = v7;
          }
          else {
            LODWORD(v85) = 64;
          }
          unint64_t v85 = (int)v85;
          do
          {
            unint64_t v86 = v85;
            v85 *= 2LL;
          }

          while (v86 < v60);
          if (!sqlite3_initialize())
          {
            uint64_t v87 = sub_18127D33C((uint64_t)v5, v86);
            if (v87)
            {
              int v5 = (char *)v87;
              unsigned int v7 = v86;
LABEL_188:
              uint64_t v88 = (int8x8_t *)&v5[v6];
              if (v84 <= 0x7F)
              {
                v88->i8[0] = v84;
                int v38 = 1;
              }

              else if (v84 >> 14)
              {
                int v38 = sub_181308E00(v88, v84);
              }

              else
              {
                v88->i8[0] = (v84 >> 7) | 0x80;
                v88->i8[1] = v84 & 0x7F;
                int v38 = 2;
              }

              v6 += v38;
              goto LABEL_64;
            }
          }

          *((_DWORD *)v3 + 15) = 7;
LABEL_64:
          ++v37;
        }

        while (v37 < *v93);
      }

      uint64_t v21 = v90 + 1;
      a2 = v92;
    }

    while (v90 + 1 < *(int *)(v92 + 28));
  }

  uint64_t result = sub_181389984(v3, 10LL, v5, v6);
  if (!v5) {
    return result;
  }
  int v89 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (unsigned __int8 *)(*v89)(v5);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  uint64_t result = (unsigned __int8 *)off_18C4653A8(v5);
  int v5 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v89 = (uint64_t (**)(char *))&xmmword_18C465410;
    return (unsigned __int8 *)(*v89)(v5);
  }

  return result;
}

_DWORD *sub_18138A584(_DWORD *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if ((*result)-- > 1) {
    return result;
  }
  if ((int)result[7] >= 1)
  {
    uint64_t v3 = 0LL;
    int v4 = (uint64_t *)(result + 10);
    do
    {
      uint64_t v5 = *v4;
      if (*v4)
      {
        signed int v6 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v5);
          --qword_18C468B10;
          off_18C4653A8(v5);
          uint64_t v5 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_7;
          }
          signed int v6 = &xmmword_18C465410;
        }

        (*v6)(v5);
      }

void sub_18138A70C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if (v2 > 0)
  {
    uint64_t v3 = 0LL;
    while (1)
    {
      uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8 * v3);
      if (v5) {
        break;
      }
LABEL_4:
      ++v3;
      uint64_t v4 = v2;
      if (v3 >= v2) {
        goto LABEL_15;
      }
    }

    while (1)
    {
      signed int v6 = (void *)*v5;
      unsigned int v7 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        off_18C4653A8(v5);
        uint64_t v5 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_8;
        }
        unsigned int v7 = &xmmword_18C465410;
      }

      (*v7)(v5);
LABEL_8:
      uint64_t v5 = v6;
      if (!v6)
      {
        int v2 = *(_DWORD *)(a1 + 20);
        goto LABEL_4;
      }
    }
  }

  uint64_t v4 = v2;
LABEL_15:
  bzero(*(void **)(a1 + 32), 8 * v4);
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t sub_18138A828(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  int v5 = *(_DWORD *)(a2 + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  unint64_t v7 = (v5 + 9);
  if (v7 <= v6)
  {
    uint64_t result = *(void *)a2;
  }

  else
  {
    if (v6) {
      LODWORD(v9) = *(_DWORD *)(a2 + 12);
    }
    else {
      LODWORD(v9) = 64;
    }
    unint64_t v9 = (int)v9;
    do
    {
      unint64_t v10 = v9;
      v9 *= 2LL;
    }

    while (v10 < v7);
    uint64_t v11 = *(void *)a2;
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C(v11, v10)) == 0)
    {
      *a1 = 7;
      return result;
    }

    *(_DWORD *)(a2 + 12) = v10;
    *(void *)a2 = result;
    int v5 = *(_DWORD *)(a2 + 8);
  }

  unsigned int v13 = (int8x8_t *)(result + v5);
  if (a3 > 0x7F)
  {
    if (a3 >> 14)
    {
      uint64_t result = sub_181308E00(v13, a3);
    }

    else
    {
      v13->i8[0] = (a3 >> 7) | 0x80;
      v13->i8[1] = a3 & 0x7F;
      uint64_t result = 2LL;
    }
  }

  else
  {
    v13->i8[0] = a3;
    uint64_t result = 1LL;
  }

  *(_DWORD *)(a2 + 8) += result;
  return result;
}

uint64_t sub_18138A918(uint64_t *a1, char *a2, const sqlite3_value *a3, int a4)
{
  unint64_t v24 = 0LL;
  uint64_t v8 = sub_18138AC28(a1, 9, &v24, 0LL);
  if (!(_DWORD)v8)
  {
    unint64_t v10 = v24;
    sub_1812B2220((uint64_t *)v24, 1, a2, -1LL, 0LL, 1u);
    if (a3)
    {
      sqlite3_bind_value(v10, 2, a3);
    }

    else if (!sub_1812B2390((uint64_t)v10, 1u))
    {
      uint64_t v11 = *((void *)v10 + 16);
      if ((*(_WORD *)(v11 + 84) & 0x9000) != 0)
      {
        sub_1813040AC(v11 + 64, a4);
      }

      else
      {
        *(void *)(v11 + 64) = a4;
        *(_WORD *)(v11 + 84) = 4;
      }

      uint64_t v12 = *(void *)(*(void *)v10 + 24LL);
      if (v12) {
        xmmword_18C465410(v12);
      }
    }

    sqlite3_step(v10);
    uint64_t v8 = sqlite3_reset(v10);
    if (!sub_1812B2390((uint64_t)v10, 0))
    {
      uint64_t v13 = *(void *)(*(void *)v10 + 24LL);
      if (v13) {
        xmmword_18C465410(v13);
      }
    }

    if (a3 && !(_DWORD)v8)
    {
      uint64_t v14 = (uint64_t *)a1[1];
      int v15 = *(_DWORD *)(*a1 + 132) + 1;
      uint64_t v17 = *v14;
      int v16 = (const char *)v14[1];
      ppBlob = 0LL;
      v26[0] = HIBYTE(v15);
      v26[1] = BYTE2(v15);
      v26[2] = BYTE1(v15);
      v26[3] = v15;
      uint64_t v18 = sqlite3_blob_open(*(sqlite3 **)v17, *(const char **)(v17 + 8), v16, "block", 10LL, 1, &ppBlob);
      if ((_DWORD)v18)
      {
        return v18;
      }

      else
      {
        sub_1812DCB6C((int *)ppBlob, v26, 4LL, 0, sub_1812DCD7C);
        unint64_t v19 = ppBlob;
        if (!ppBlob) {
          goto LABEL_24;
        }
        int v20 = (sqlite3_stmt *)*((void *)ppBlob + 3);
        uint64_t v21 = (void *)*((void *)ppBlob + 4);
        uint64_t v22 = v21[3];
        if (v22) {
          xmmword_18C465400(v22);
        }
        sub_1812F20DC(v21, v19);
        uint64_t v23 = v21[3];
        if (v23) {
          xmmword_18C465410(v23);
        }
        uint64_t v8 = sqlite3_finalize(v20);
        if (!(_DWORD)v8)
        {
LABEL_24:
          uint64_t v8 = 0LL;
          *(_DWORD *)(*a1 + 132) = v15;
        }
      }
    }
  }

  return v8;
}

uint64_t sub_18138AB1C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (sqlite3_stmt **)result;
    sqlite3_finalize(*(sqlite3_stmt **)(result + 40));
    sqlite3_finalize(v1[6]);
    sqlite3_finalize(v1[7]);
    sqlite3_finalize(v1[8]);
    sqlite3_finalize(v1[9]);
    sqlite3_finalize(v1[10]);
    sqlite3_finalize(v1[11]);
    sqlite3_finalize(v1[12]);
    sqlite3_finalize(v1[13]);
    sqlite3_finalize(v1[14]);
    sqlite3_finalize(v1[15]);
    int v2 = (uint64_t (**)(sqlite3_stmt **))&off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = (sqlite3_stmt **)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v2 = (uint64_t (**)(sqlite3_stmt **))&xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sub_18138AC28(uint64_t *a1, int a2, sqlite3_stmt **a3, char **a4)
{
  int v5 = &a1[a2];
  uint64_t v7 = v5[5];
  unsigned int v6 = (sqlite3_stmt **)(v5 + 5);
  if (v7)
  {
    uint64_t v8 = 0LL;
    goto LABEL_36;
  }

  uint64_t v12 = a2;
  uint64_t v13 = *a1;
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t v14 = sqlite3_mprintf( off_189B6F300[a2],  *(void *)(v13 + 96),  *(void *)(v13 + 72),  *(void *)(v13 + 80),  *(void *)(v13 + 80),  *(void *)(v13 + 80));
      goto LABEL_21;
    case 2:
      uint64_t v14 = sqlite3_mprintf(off_189B6F300[a2], *(void *)(v13 + 96), *(void *)(v13 + 72), *(void *)(v13 + 80));
      goto LABEL_21;
    case 3:
    case 4:
      uint64_t v16 = *(unsigned int *)(v13 + 24);
      if (sqlite3_initialize()) {
        goto LABEL_35;
      }
      uint64_t v17 = sub_18126F0AC(2 * (int)v16 + 3);
      if (!v17) {
        goto LABEL_35;
      }
      uint64_t v18 = v17;
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v29 = -1LL;
        goto LABEL_50;
      }

      uint64_t v19 = v16 + 1;
      if (v16 < 7)
      {
        uint64_t v20 = 0LL;
        goto LABEL_47;
      }

      if (v16 >= 0x1F)
      {
        uint64_t v20 = v19 & 0xFFFFFFE0;
        uint64_t v30 = v17 + 32;
        uint64_t v31 = v20;
        do
        {
          qmemcpy((void *)(v30 - 32), "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,", 64);
          v30 += 64LL;
          v31 -= 32LL;
        }

        while (v31);
        if (v20 == v19) {
          goto LABEL_49;
        }
        if ((v19 & 0x18) == 0)
        {
LABEL_47:
          uint64_t v35 = v17 + 2 * v20 + 1;
          uint64_t v36 = v19 - v20;
          do
          {
            *(_WORD *)(v35 - 1) = 11327;
            v35 += 2LL;
            --v36;
          }

          while (v36);
          goto LABEL_49;
        }
      }

      else
      {
        uint64_t v20 = 0LL;
      }

      uint64_t v32 = v20;
      uint64_t v20 = v19 & 0xFFFFFFF8;
      uint64_t v33 = (_OWORD *)(v17 + 2 * v32);
      uint64_t v34 = v32 - v20;
      do
      {
        *v33++ = xmmword_1813CDE30;
        v34 += 8LL;
      }

      while (v34);
      if (v20 != v19) {
        goto LABEL_47;
      }
LABEL_49:
      uint64_t v29 = 2 * (int)v19 - 1;
LABEL_50:
      *(_BYTE *)(v17 + v29) = 0;
      uint64_t v23 = (unsigned __int8 *)sqlite3_mprintf(off_189B6F300[v12], *(void *)(v13 + 8), *(void *)(v13 + 16), v17);
      uint64_t v37 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_55;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
      --qword_18C468B10;
      off_18C4653A8(v18);
      uint64_t v18 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v37 = &xmmword_18C465410;
LABEL_55:
        (*v37)(v18);
      }

_DWORD *sub_18138B020(uint64_t a1)
{
  if (*(void *)(a1 + 144) || (*(void *)(a1 + 136) = sub_18138BB80(a1), *(_DWORD *)(a1 + 60)))
  {
    if (!*(_DWORD *)(a1 + 60)) {
      goto LABEL_126;
    }
    return 0LL;
  }

  uint64_t v3 = *(void *)a1;
  uint64_t v4 = sub_18138BCF4(a1, 10LL);
  if (*(_DWORD *)(a1 + 60)) {
    goto LABEL_124;
  }
  int v5 = v4;
  uint64_t v6 = *(void *)v4 + (int)v4[2];
  *(void *)uint64_t v6 = 0LL;
  *(void *)(v6 + 8) = 0LL;
  *(_DWORD *)(v6 + 16) = 0;
  uint64_t v7 = *(void *)v4;
  int v115 = v4[2];
  unsigned int v8 = **(_DWORD **)v4;
  LODWORD(v6) = *(_DWORD *)(*(void *)v4 + 4LL);
  BOOL v112 = v6 != 16777471;
  if ((_DWORD)v6 == 16777471) {
    uint64_t v9 = 8LL;
  }
  else {
    uint64_t v9 = 4LL;
  }
  uint64_t v10 = v7 + v9;
  unsigned int v11 = *(unsigned __int8 *)(v7 + v9);
  if (*(char *)(v7 + v9) < 0)
  {
    int v13 = *(unsigned __int8 *)(v10 + 1);
    if (*(char *)(v10 + 1) < 0)
    {
      int v14 = *(char *)(v10 + 2);
      if (v14 < 0)
      {
        unsigned int v12 = sub_18138BFCC((char *)v10, (unint64_t *)&v118);
        unsigned int v11 = v118 & 0x7FFFFFFF;
      }

      else
      {
        unsigned int v11 = v14 & 0x7F | (v11 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
        unsigned int v12 = 3;
      }
    }

    else
    {
      unsigned int v11 = ((v11 & 0x7F) << 7) | v13;
      unsigned int v12 = 2;
    }
  }

  else
  {
    unsigned int v12 = 1;
  }

  unint64_t v15 = v12 + (unint64_t)v9;
  uint64_t v16 = v7 + v15;
  unsigned int v17 = *(unsigned __int8 *)(v7 + v15);
  unsigned int v110 = v8;
  if (*(char *)(v7 + v15) < 0)
  {
    int v19 = *(unsigned __int8 *)(v16 + 1);
    if (*(char *)(v16 + 1) < 0)
    {
      int v20 = *(char *)(v16 + 2);
      if (v20 < 0)
      {
        int v18 = sub_18138BFCC((char *)v16, (unint64_t *)&v118);
        unsigned int v17 = v118 & 0x7FFFFFFF;
      }

      else
      {
        unsigned int v17 = v20 & 0x7F | (v17 << 14) & 0x1FC07F | ((v19 & 0x7F) << 7);
        int v18 = 3;
      }
    }

    else
    {
      unsigned int v17 = ((v17 & 0x7F) << 7) | v19;
      int v18 = 2;
    }
  }

  else
  {
    int v18 = 1;
  }

  uint64_t v21 = 0LL;
  int v22 = 267;
  if (v11 > 0x7D0 || v17 > 0x7D0)
  {
LABEL_116:
    *(_DWORD *)(a1 + 60) = v22;
    unint64_t v86 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_121;
    }
    goto LABEL_117;
  }

  unsigned int v113 = v17;
  if (sqlite3_initialize())
  {
    uint64_t v21 = 0LL;
    int v22 = 7;
    goto LABEL_116;
  }

  uint64_t v106 = v11 - 1;
  uint64_t v23 = (unint64_t *)sub_18126F0AC(16LL * (int)v106 + 48);
  uint64_t v21 = v23;
  if (!v23)
  {
    int v22 = 7;
    goto LABEL_116;
  }

  uint64_t v102 = v3;
  unsigned int v24 = v18 + v15;
  bzero(v23, 16LL * (int)v106 + 48);
  BOOL v25 = 1;
  *(_DWORD *)uint64_t v21 = 1;
  *((_DWORD *)v21 + 6) = v113;
  *((_DWORD *)v21 + 7) = v11;
  int v26 = sub_18138BFCC((char *)(v7 + v24), v21 + 1);
  int64_t v101 = v5;
  if (!v11)
  {
    int v45 = 0;
    unint64_t v107 = 0LL;
    unsigned int v29 = v113;
    goto LABEL_109;
  }

  uint64_t v27 = 0LL;
  unint64_t v107 = 0LL;
  int v28 = v24 + v26;
  unint64_t v105 = v11;
  unsigned int v29 = v113;
  __int16 v103 = v21;
  while (1)
  {
    if (v28 >= v115)
    {
      BOOL v25 = 0;
      int v45 = 267;
      goto LABEL_109;
    }

    uint64_t v30 = (unsigned int *)&v21[2 * v27 + 4];
    uint64_t v31 = (char *)(v7 + v28);
    unsigned int v32 = *v31;
    if (*v31 < 0)
    {
      int v34 = v31[1];
      if (v31[1] < 0)
      {
        int v35 = v31[2];
        if (v35 < 0)
        {
          unsigned int v36 = v29;
          unsigned int v33 = sub_18138BFCC(v31, (unint64_t *)&v118);
          unsigned int v29 = v36;
          unsigned int v32 = v118 & 0x7FFFFFFF;
          *uint64_t v30 = v118 & 0x7FFFFFFF;
        }

        else
        {
          unsigned int v32 = v35 & 0x7F | (v32 << 14) & 0x1FC07F | ((v34 & 0x7F) << 7);
          *uint64_t v30 = v32;
          unsigned int v33 = 3;
        }
      }

      else
      {
        unsigned int v32 = ((v32 & 0x7F) << 7) | v34;
        *uint64_t v30 = v32;
        unsigned int v33 = 2;
      }
    }

    else
    {
      *uint64_t v30 = v32;
      unsigned int v33 = 1;
    }

    unint64_t v37 = v28 + (unint64_t)v33;
    uint64_t v38 = v7 + v37;
    unsigned int v39 = *(unsigned __int8 *)(v7 + v37);
    if (*(char *)(v7 + v37) < 0)
    {
      int v41 = *(unsigned __int8 *)(v38 + 1);
      if (*(char *)(v38 + 1) < 0)
      {
        int v42 = *(char *)(v38 + 2);
        if (v42 < 0)
        {
          unsigned int v43 = v29;
          int v40 = sub_18138BFCC((char *)v38, (unint64_t *)&v118);
          unsigned int v29 = v43;
          unsigned int v39 = v118 & 0x7FFFFFFF;
        }

        else
        {
          unsigned int v39 = v42 & 0x7F | (v39 << 14) & 0x1FC07F | ((v41 & 0x7F) << 7);
          int v40 = 3;
        }
      }

      else
      {
        unsigned int v39 = ((v39 & 0x7F) << 7) | v41;
        int v40 = 2;
      }
    }

    else
    {
      int v40 = 1;
    }

    if (v39 < v32)
    {
      int v45 = 267;
      goto LABEL_108;
    }

    uint64_t v111 = (uint64_t)&v21[2 * v27 + 4];
    unsigned int v114 = v29;
    int v28 = v40 + v37;
    if (!sqlite3_initialize())
    {
      unint64_t v47 = (void *)sub_18126F0AC(56LL * v39);
      if (v47)
      {
        unint64_t v48 = v47;
        bzero(v47, 56LL * v39);
        unint64_t v49 = (char *)&v21[2 * v27];
        *((void *)v49 + 5) = v48;
        uint64_t v50 = v49 + 40;
        *((_DWORD *)v50 - 1) = v39;
        if (v39)
        {
          uint64_t v51 = 0LL;
          uint64_t v108 = 56LL * v39;
          unsigned int v29 = v114;
          int v104 = v50;
          unsigned int v109 = v39;
          while (v28 < v115)
          {
            uint64_t v52 = *v50;
            unint64_t v53 = (char *)(v7 + v28);
            int v54 = *v53;
            if (*v53 < 0)
            {
              int v56 = v53[1];
              if (v53[1] < 0)
              {
                int v57 = v53[2];
                if (v57 < 0)
                {
                  unsigned int v55 = sub_18138BFCC(v53, (unint64_t *)&v118);
                  uint64_t v50 = v104;
                  unsigned int v29 = v114;
                  *(_DWORD *)(v52 + v51) = v118 & 0x7FFFFFFF;
                }

                else
                {
                  *(_DWORD *)(v52 + v51) = v57 & 0x7F | (v54 << 14) & 0x1FC07F | ((v56 & 0x7F) << 7);
                  unsigned int v55 = 3;
                }
              }

              else
              {
                *(_DWORD *)(v52 + v51) = ((v54 & 0x7F) << 7) | v56;
                unsigned int v55 = 2;
              }
            }

            else
            {
              *(_DWORD *)(v52 + v51) = v54;
              unsigned int v55 = 1;
            }

            unint64_t v58 = v28 + (unint64_t)v55;
            uint64_t v59 = v7 + v58;
            uint64_t v60 = v52 + v51;
            signed int v61 = *(unsigned __int8 *)(v7 + v58);
            if (*(char *)(v7 + v58) < 0)
            {
              int v63 = *(unsigned __int8 *)(v59 + 1);
              if (*(char *)(v59 + 1) < 0)
              {
                int v64 = *(char *)(v59 + 2);
                if (v64 < 0)
                {
                  int v62 = sub_18138BFCC((char *)v59, (unint64_t *)&v118);
                  uint64_t v50 = v104;
                  unsigned int v29 = v114;
                  signed int v61 = v118 & 0x7FFFFFFF;
                  *(_DWORD *)(v60 + 4) = v118 & 0x7FFFFFFF;
                }

                else
                {
                  signed int v61 = v64 & 0x7F | (v61 << 14) & 0x1FC07F | ((v63 & 0x7F) << 7);
                  *(_DWORD *)(v60 + 4) = v61;
                  int v62 = 3;
                }
              }

              else
              {
                signed int v61 = ((v61 & 0x7F) << 7) | v63;
                *(_DWORD *)(v60 + 4) = v61;
                int v62 = 2;
              }
            }

            else
            {
              *(_DWORD *)(v60 + 4) = v61;
              int v62 = 1;
            }

            int v65 = v62 + v58;
            unint64_t v66 = (char *)(v7 + v62 + (int)v58);
            uint64_t v67 = v52 + v51;
            signed int v68 = *v66;
            if (*v66 < 0)
            {
              int v70 = v66[1];
              if (v66[1] < 0)
              {
                int v71 = v66[2];
                if (v71 < 0)
                {
                  int v69 = sub_18138BFCC(v66, (unint64_t *)&v118);
                  uint64_t v50 = v104;
                  unsigned int v29 = v114;
                  signed int v68 = v118 & 0x7FFFFFFF;
                  *(_DWORD *)(v67 + 8) = v118 & 0x7FFFFFFF;
                }

                else
                {
                  signed int v68 = v71 & 0x7F | (v68 << 14) & 0x1FC07F | ((v70 & 0x7F) << 7);
                  *(_DWORD *)(v67 + 8) = v68;
                  int v69 = 3;
                }
              }

              else
              {
                signed int v68 = ((v68 & 0x7F) << 7) | v70;
                *(_DWORD *)(v67 + 8) = v68;
                int v69 = 2;
              }
            }

            else
            {
              *(_DWORD *)(v67 + 8) = v68;
              int v69 = 1;
            }

            int v28 = v69 + v65;
            if (!v112)
            {
              uint64_t v72 = v52 + v51;
              int v73 = v28 + sub_18138BFCC((char *)(v7 + v28), (unint64_t *)(v52 + v51 + 16));
              unint64_t v74 = (unint64_t *)(v52 + v51 + 24);
              int v75 = v73 + sub_18138BFCC((char *)(v7 + v73), v74);
              unsigned int v76 = (char *)(v7 + v75);
              int v77 = *v76;
              if ((v77 & 0x80) != 0)
              {
                int v79 = v76[1];
                if (v76[1] < 0)
                {
                  int v80 = v76[2];
                  if (v80 < 0)
                  {
                    int v78 = sub_18138BFCC(v76, (unint64_t *)&v118);
                    *(_DWORD *)(v72 + 32) = v118 & 0x7FFFFFFF;
                  }

                  else
                  {
                    *(_DWORD *)(v72 + 32) = v80 & 0x7F | (v77 << 14) & 0x1FC07F | ((v79 & 0x7F) << 7);
                    int v78 = 3;
                  }
                }

                else
                {
                  *(_DWORD *)(v72 + 32) = ((v77 & 0x7F) << 7) | v79;
                  int v78 = 2;
                }
              }

              else
              {
                *(_DWORD *)(v72 + 32) = v77;
                int v78 = 1;
              }

              uint64_t v81 = v52 + v51;
              int v82 = v78 + v75 + sub_18138BFCC((char *)(v7 + v78 + v75), (unint64_t *)(v81 + 40));
              int v28 = v82 + sub_18138BFCC((char *)(v7 + v82), (unint64_t *)(v81 + 48));
              unint64_t v83 = v107;
              if (v107 <= *v74) {
                unint64_t v83 = *v74;
              }
              unint64_t v107 = v83;
              signed int v68 = *(_DWORD *)(v67 + 8);
              signed int v61 = *(_DWORD *)(v60 + 4);
              uint64_t v21 = v103;
              uint64_t v50 = v104;
              unsigned int v29 = v114;
            }

            unsigned int v39 = v109;
            if (v68 < v61) {
              break;
            }
            v51 += 56LL;
            if (v108 == v51)
            {
              int v45 = 0;
              goto LABEL_90;
            }
          }

          int v45 = 267;
        }

        else
        {
          int v45 = 0;
          unsigned int v29 = v114;
        }

sqlite3_int64 sub_18138BB80(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 60)) {
    return 0LL;
  }
  uint64_t v4 = (sqlite3_stmt **)(a1 + 128);
  uint64_t v3 = *(sqlite3_stmt **)(a1 + 128);
  if (v3) {
    goto LABEL_4;
  }
  int v5 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.data_version", *(void *)(*(void *)a1 + 8LL));
  sqlite3_int64 v1 = (sqlite3_int64)v5;
  if (*(_DWORD *)(a1 + 60))
  {
    if (!v5) {
      return v1;
    }
  }

  else
  {
    if (!v5)
    {
      int v7 = 7;
LABEL_11:
      *(_DWORD *)(a1 + 60) = v7;
      return v1;
    }

    *(_DWORD *)(a1 + 60) = sub_18126DFE0(**(void **)a1, v5, 0xFFFFFFFFLL, 133LL, 0LL, v4, 0LL, v6);
  }

  uint64_t v9 = (void (**)(sqlite3_int64))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_20;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  sqlite3_int64 v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v9 = (void (**)(sqlite3_int64))&xmmword_18C465410;
LABEL_20:
    (*v9)(v1);
  }

  if (!*(_DWORD *)(a1 + 60))
  {
    uint64_t v3 = *v4;
LABEL_4:
    if (sqlite3_step(v3) == 100) {
      sqlite3_int64 v1 = sqlite3_column_int64(*v4, 0);
    }
    else {
      sqlite3_int64 v1 = 0LL;
    }
    int v7 = sqlite3_reset(*v4);
    goto LABEL_11;
  }

  return 0LL;
}

_DWORD *sub_18138BCF4(uint64_t a1, sqlite3_int64 a2)
{
  if (!*(_DWORD *)(a1 + 60))
  {
    int v5 = (int **)(a1 + 64);
    uint64_t v6 = *(int **)(a1 + 64);
    if (v6)
    {
      *int v5 = 0LL;
      int v7 = sqlite3_blob_reopen((sqlite3_blob *)v6, a2);
      *int v5 = v6;
      if (v7)
      {
        *int v5 = 0LL;
        unsigned int v8 = (sqlite3_stmt *)*((void *)v6 + 3);
        uint64_t v9 = (void *)*((void *)v6 + 4);
        uint64_t v10 = v9[3];
        if (v10) {
          xmmword_18C465400(v10);
        }
        sub_1812F20DC(v9, v6);
        uint64_t v11 = v9[3];
        if (v11) {
          xmmword_18C465410(v11);
        }
        sqlite3_finalize(v8);
        uint64_t v6 = *v5;
      }

      if (v7 == 4) {
        int v12 = 0;
      }
      else {
        int v12 = v7;
      }
      if (v12)
      {
LABEL_18:
        if (v12 == 1) {
          int v13 = 267;
        }
        else {
          int v13 = v12;
        }
        if (v13)
        {
          int v2 = 0LL;
          goto LABEL_37;
        }

        int v14 = *v5;
        if (*v5 && *((void *)v14 + 3))
        {
          uint64_t v15 = *v14;
          if (!sqlite3_initialize()) {
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v15 = 0LL;
          if (!sqlite3_initialize())
          {
LABEL_26:
            uint64_t v16 = (int)v15;
            uint64_t v17 = sub_18126F0AC((int)v15 + 36LL);
            int v2 = (_DWORD *)v17;
            if (v17)
            {
              *(_DWORD *)(v17 + 8) = v15;
              *(void *)uint64_t v17 = v17 + 16;
              int v13 = sub_1812DCB6C(*v5, (char *)(v17 + 16), v15, 0, sub_1812DCD5C);
              if (v13)
              {
                int v18 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
                  --qword_18C468B10;
                  off_18C4653A8(v2);
                  int v2 = (_DWORD *)xmmword_18C468B70;
                  if (!(void)xmmword_18C468B70) {
                    goto LABEL_37;
                  }
                  int v18 = &xmmword_18C465410;
                }

                (*v18)(v2);
                int v2 = 0LL;
              }

              else
              {
                *(_BYTE *)(*(void *)v2 + v16) = 0;
                *(_BYTE *)(v16 + *(void *)v2 + 1) = 0;
                v2[3] = __rev16(*(unsigned __int16 *)(*(void *)v2 + 2LL));
              }

uint64_t sub_18138BF34(char *a1, int *a2)
{
  int v3 = *a1;
  if (*a1 < 0)
  {
    int v5 = a1[1];
    if (a1[1] < 0)
    {
      int v6 = a1[2];
      if (v6 < 0)
      {
        uint64_t result = sub_18138BFCC(a1, &v7);
        *a2 = v7 & 0x7FFFFFFF;
      }

      else
      {
        *a2 = v6 & 0x7F | (v3 << 14) & 0x1FC07F | ((v5 & 0x7F) << 7);
        return 3LL;
      }
    }

    else
    {
      *a2 = ((v3 & 0x7F) << 7) | v5;
      return 2LL;
    }
  }

  else
  {
    *a2 = v3;
    return 1LL;
  }

  return result;
}

uint64_t sub_18138BFCC(char *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 < 0)
  {
    unsigned int v4 = a1[1];
    if (a1[1] < 0)
    {
      int v5 = a1[2];
      unsigned int v6 = v5 & 0x7F | ((_DWORD)v2 << 14) & 0x1FFFFF;
      if (v5 < 0)
      {
        int v7 = (a1[3] | (v4 << 14)) & 0x1FC07F;
        if (a1[3] < 0)
        {
          unsigned int v8 = a1[4];
          int v9 = v8 | (v6 << 14);
          if (a1[4] < 0)
          {
            unsigned int v10 = v7 | (v6 << 7);
            int v11 = a1[5] | (v7 << 14);
            if (a1[5] < 0)
            {
              int v12 = a1[6] | (v9 << 14);
              if (a1[6] < 0)
              {
                int v13 = v12 & 0x1FC07F;
                int v14 = a1[7] | (v11 << 14);
                if (a1[7] < 0)
                {
                  unint64_t v15 = a1[8] | (v13 << 15) | (v14 << 8) & 0x1FC07F00u | ((unint64_t)((v8 >> 3) & 0xF | (16 * v10)) << 32);
                  uint64_t result = 9LL;
                }

                else
                {
                  unint64_t v15 = v14 & 0xF01FC07F | (v13 << 7) | ((unint64_t)(v10 >> 4) << 32);
                  uint64_t result = 8LL;
                }

                *a2 = v15;
              }

              else
              {
                uint64_t result = 7LL;
                *a2 = v12 & 0xF01FC07F | (v11 << 7) & 0xFE03F80 | ((unint64_t)(v10 >> 11) << 32);
              }
            }

            else
            {
              uint64_t result = 6LL;
              *a2 = v11 | (v9 << 7) & 0xFE03F80u | ((unint64_t)(v10 >> 18) << 32);
            }
          }

          else
          {
            uint64_t result = 5LL;
            *a2 = v9 | (v7 << 7) | ((unint64_t)(v6 >> 18) << 32);
          }
        }

        else
        {
          uint64_t result = 4LL;
          *a2 = v7 | (v6 << 7);
        }
      }

      else
      {
        uint64_t result = 3LL;
        *a2 = v6 | ((v4 & 0x7F) << 7);
      }
    }

    else
    {
      uint64_t result = 2LL;
      *a2 = ((v2 & 0x7F) << 7) | v4;
    }
  }

  else
  {
    uint64_t result = 1LL;
    *a2 = v2;
  }

  return result;
}

uint64_t sub_18138C160(uint64_t a1, _BYTE *a2, unsigned __int8 **a3, _DWORD *a4)
{
  if (!a2) {
    goto LABEL_72;
  }
  int v7 = "pgsz";
  for (uint64_t i = a2; ; ++i)
  {
    uint64_t v9 = *i;
    uint64_t v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 != (_DWORD)v10) {
      break;
    }
    if (!*i)
    {
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) != 1) {
        goto LABEL_72;
      }
      if (!a3) {
        goto LABEL_71;
      }
      __int16 v29 = *((_WORD *)a3 + 10);
      if ((v29 & 0x24) != 0)
      {
        uint64_t v30 = (uint64_t)*a3;
      }

      else if ((v29 & 8) != 0)
      {
        double v53 = *(double *)a3;
        uint64_t v30 = (uint64_t)v53;
      }

      else
      {
        if ((v29 & 0x12) == 0 || !a3[1]) {
          goto LABEL_72;
        }
        LODWORD(v30) = sub_181303DF0((uint64_t)a3);
      }

      if ((v30 - 65537) > 0xFFFF001E)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 136) = v30;
        return result;
      }

      goto LABEL_72;
    }

uint64_t sub_18138C7A4(unsigned __int8 *a1, void *a2, void *a3)
{
  *a2 = 0LL;
  *a3 = 0LL;
  if (!a1) {
    return 1LL;
  }
  int v5 = a1;
  unsigned int v6 = a1 - 1;
  do
  {
    int v8 = *v5++;
    unsigned __int8 v7 = v8;
    ++v6;
  }

  while (v8 == 32);
  size_t v9 = 0LL;
  while ((v7 & 0x80) != 0 || byte_1813CB4F3[v7])
    unsigned __int8 v7 = v5[v9++];
  if (!v9) {
    return 1LL;
  }
  if (sqlite3_initialize() || (int v12 = (void *)sub_18126F0AC(v9 + 1)) == 0LL)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = v12;
    bzero(v12, v9 + 1);
    memcpy(v13, v5 - 1, v9);
  }

  uint64_t v14 = (char *)&v5[v9 - 2];
  uint64_t v15 = (uint64_t)&v6[v9];
  do
  {
    int v17 = *++v14;
    int v16 = v17;
    ++v15;
  }

  while (v17 == 32);
  if (v16 == 40)
  {
    do
    {
      int v19 = *++v14;
      int v18 = v19;
      ++v15;
    }

    while (v19 == 32);
    if (v18 == 41)
    {
LABEL_22:
      int v20 = 0LL;
LABEL_23:
      uint64_t v10 = 0LL;
      *a2 = v13;
      *a3 = v20;
      return v10;
    }

    uint64_t v21 = -v15;
    uint64_t v22 = v14;
    while (1)
    {
      do
      {
        uint64_t v23 = (unsigned __int8 *)v22;
        int v24 = *v22++;
      }

      while (v24 == 32);
      uint64_t v22 = sub_181388F7C(v23);
      if (!v22) {
        break;
      }
      size_t v25 = (size_t)&v22[v21];
      do
      {
        int v27 = *v22++;
        int v26 = v27;
        ++v25;
      }

      while (v27 == 32);
      if (v26 != 44)
      {
        if (v26 != 41) {
          break;
        }
        if (!sqlite3_initialize())
        {
          __int16 v29 = (void *)sub_18126F0AC(v25 + 1);
          if (v29)
          {
            int v20 = v29;
            bzero(v29, v25 + 1);
            memcpy(v20, v14, v25);
            goto LABEL_23;
          }
        }

        uint64_t v10 = 7LL;
        goto LABEL_35;
      }
    }
  }

  uint64_t v10 = 1LL;
LABEL_35:
  if (v13)
  {
    int v28 = (void (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
      --qword_18C468B10;
      off_18C4653A8(v13);
      uint64_t v13 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return v10;
      }
      int v28 = (void (**)(void *))&xmmword_18C465410;
    }

    (*v28)(v13);
  }

  return v10;
}

double sub_18138C9F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[20];
  if (v3)
  {
    unsigned int v4 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v4)(v3);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    off_18C4653A8(v3);
    uint64_t v3 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v4 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_18138CE6C(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  sub_18138CFA4(*(void *)(result + 16));
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_9;
      }
      uint64_t v3 = &xmmword_18C465410;
    }

    (*v3)(v2);
  }

uint64_t sub_18138CFA4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 40) >= 1)
    {
      uint64_t v2 = 0LL;
      do
        sub_18138CFA4(*(void *)(v1 + 48 + 8 * v2++));
      while (v2 < *(int *)(v1 + 40));
    }

    sub_18138D08C(*(void *)(v1 + 32));
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v3)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    double result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      return (*v3)(v1);
    }
  }

  return result;
}

uint64_t sub_18138D08C(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
      sub_18138D1E8(*(void *)(v1 + 24 + 8 * v2++));
    while (v2 < *(int *)(v1 + 16));
  }

  uint64_t v3 = *(void *)(v1 + 8);
  if (v3)
  {
    unsigned int v4 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      uint64_t v3 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_12;
      }
      unsigned int v4 = &xmmword_18C465410;
    }

    (*v4)(v3);
  }

uint64_t sub_18138D1E8(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(int *)(result + 24) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v28 = result;
    while (1)
    {
      uint64_t v3 = v1 + 32 * v2;
      uint64_t v4 = *(void *)(v3 + 40);
      if (v4)
      {
        uint64_t v5 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_11;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
        --qword_18C468B10;
        off_18C4653A8(v4);
        uint64_t v4 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70) {
          break;
        }
      }

uint64_t sub_18138D5A4(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(int *)(result + 64) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (void *)(result + 200);
    while (1)
    {
      uint64_t v4 = *v3;
      if (!*v3) {
        goto LABEL_13;
      }
      uint64_t v5 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_12;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      uint64_t v4 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70) {
        break;
      }
LABEL_13:
      *uint64_t v3 = 0LL;
      v3[1] = 0LL;
      uint64_t v6 = *(v3 - 11);
      if (!v6) {
        goto LABEL_20;
      }
      uint64_t v7 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_19;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
      --qword_18C468B10;
      off_18C4653A8(v6);
      uint64_t v6 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v7 = &xmmword_18C465410;
LABEL_19:
        (*v7)(v6);
      }

uint64_t sub_18138D90C(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (a2 >= 1)
    {
      uint64_t v3 = a2;
      uint64_t v4 = (uint64_t *)result;
      do
      {
        uint64_t v5 = *v4;
        if (*v4)
        {
          uint64_t v6 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v5);
            --qword_18C468B10;
            off_18C4653A8(v5);
            uint64_t v5 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_5;
            }
            uint64_t v6 = &xmmword_18C465410;
          }

          (*v6)(v5);
        }

int *sub_18138DA78(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result >= 1)
    {
      uint64_t v2 = 0LL;
      uint64_t v3 = 2LL;
      do
      {
        uint64_t v4 = *(void *)&v1[v3];
        if (v4)
        {
          uint64_t v5 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v4);
            --qword_18C468B10;
            off_18C4653A8(v4);
            uint64_t v4 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_5;
            }
            uint64_t v5 = &xmmword_18C465410;
          }

          (*v5)(v4);
        }

uint64_t sub_18138DBF0( uint64_t a1, unsigned int a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5, void *a6)
{
  *a5 = 0LL;
  *a6 = 0LL;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  uint64_t v92 = a2;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  int v84 = a3;
  uint64_t v12 = sub_18126F0AC(2424LL);
  if (!v12) {
    return 7LL;
  }
  uint64_t v13 = (unsigned __int8 **)v12;
  int v82 = a6;
  *(_WORD *)(v12 + 16) = 0;
  unint64_t v86 = v12 + 16;
  *(void *)uint64_t v12 = v12 + 16;
  *(void *)(v12 + 2416) = v12 + 2392;
  uint64_t v83 = a1;
  uint64_t v89 = a1;
  do
  {
    uint64_t v14 = (uint64_t)a4;
    for (uint64_t i = a4; ; ++i)
    {
      unsigned int v16 = (char)*i;
      uint64_t v17 = *i;
      if (v16 > 0x20 || ((1LL << v17) & 0x100002600LL) == 0) {
        break;
      }
      ++v14;
    }

    unint64_t v19 = a3 & 0xFFFFFFFF00000000LL;
    unint64_t v20 = a3 & 0xFFFFFFFF00000000LL | 1;
    unsigned int v21 = 10;
    LODWORD(v22) = 1;
    switch(*i)
    {
      case '""':
        uint64_t v23 = i;
        do
        {
          uint64_t v25 = v23 + 1;
          int v24 = v23[1];
          if (v24 == 34)
          {
            uint64_t v25 = v23 + 2;
            if (v23[2] != 34)
            {
              LODWORD(v22) = (_DWORD)v23 - v14 + 2;
              unint64_t v20 = v22 | v19;
              goto LABEL_43;
            }
          }

          uint64_t v23 = v25;
        }

        while (v24);
        unsigned int v87 = (char *)a4;
        unint64_t v88 = a3 & 0xFFFFFFFF00000000LL | 1;
        sub_18138ED28((char *)&v89, "unterminated string");
        goto LABEL_136;
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '|':
        goto LABEL_19;
      case '(':
        goto LABEL_47;
      case ')':
        unsigned int v21 = 11;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '*':
        unsigned int v21 = 15;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '+':
        unsigned int v21 = 14;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case ',':
        unsigned int v21 = 13;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '-':
        unsigned int v21 = 6;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case ':':
        unsigned int v21 = 5;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '^':
        unsigned int v21 = 12;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '{':
        unsigned int v21 = 7;
        LODWORD(v22) = 1;
        goto LABEL_47;
      case '}':
        unsigned int v21 = 8;
        LODWORD(v22) = 1;
        goto LABEL_47;
      default:
        if (!*i)
        {
          unsigned int v21 = 0;
          LODWORD(v22) = 1;
LABEL_47:
          unsigned int v87 = (char *)&i[(int)v22];
          unint64_t v88 = v20;
          goto LABEL_48;
        }

uint64_t sub_18138E7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  if (!a2 || (uint64_t v3 = *a1) == 0)
  {
    uint64_t v6 = 0LL;
    if (a2) {
      *a1 = a2;
    }
    return v6;
  }

  int v4 = *(_DWORD *)(v3 + 28);
  int v5 = *(_DWORD *)(a2 + 28);
  *(void *)(v3 + 16) = sub_18138F394((uint64_t)&v18, 2, *(_DWORD **)(v3 + 16), *(_DWORD **)(a2 + 16), 0LL);
  *(void *)(v2 + 16) = 0LL;
  uint64_t v6 = v19;
  if (!(_DWORD)v19)
  {
    uint64_t v7 = *(void *)(v3 + 32);
    if (sqlite3_initialize()
      || (int v8 = v5 + v4, (v9 = (char *)sub_18127D33C(v7, (8 * v8) & ~((8 * v8) >> 31))) == 0LL))
    {
      uint64_t v6 = 7LL;
    }

    else
    {
      uint64_t v10 = v9;
      memmove(&v9[8 * *(int *)(v2 + 28)], v9, 8LL * *(int *)(v3 + 28));
      uint64_t v11 = *(unsigned int *)(v2 + 28);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * v11;
        do
        {
          *(void *)&v10[v12] = *(void *)(*(void *)(v2 + 32) + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
      }

      uint64_t v6 = 0LL;
      *(_DWORD *)(v3 + 28) = v8;
      *(void *)(v3 + 32) = v10;
    }
  }

  uint64_t v14 = *(void *)(v2 + 32);
  if (v14)
  {
    uint64_t v15 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
      --qword_18C468B10;
      off_18C4653A8(v14);
      uint64_t v14 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_20;
      }
      uint64_t v15 = &xmmword_18C465410;
    }

    (*v15)(v14);
  }

uint64_t sub_18138E9A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(v4 + 24) = a3;
  uint64_t result = sub_1813934A4(v4, v6);
  if ((_DWORD)result) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(v6 + 4)) {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  if (*(_DWORD *)(v4 + 24))
  {
    if (v8 > v5) {
      goto LABEL_8;
    }
LABEL_3:
    uint64_t result = 0LL;
    goto LABEL_10;
  }

  if (v8 >= v5) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v6, 1LL, v5);
LABEL_10:
  while (*(_DWORD *)(v6 + 8) && (_DWORD)result == 0)
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v6 + 16))(v4, v6, 0LL, 0LL);
LABEL_14:
  *(_DWORD *)(a2 + 80) |= 0x4E | (*(_DWORD *)(*(void *)(v4 + 16) + 4LL) != 0);
  return result;
}

uint64_t sub_18138EA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 28);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = (sqlite3_stmt **)sub_18126F0AC(4LL * (v5 - 1) + 32);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  bzero(v8, 4LL * (v5 - 1) + 32);
  *((_DWORD *)v9 + 6) = v5;
  uint64_t v7 = sub_1813993E0(v9, v6, v10, v11, v12, v13, v14, v15, *(void *)(v6 + 8));
  *(void *)(a2 + 72) = v9;
  if ((_DWORD)v7 || (*(void *)(a1 + 56) = a2, uint64_t v7 = sub_18139959C(a2), *(void *)(a1 + 56) = 0LL, (_DWORD)v7))
  {
    sqlite3_finalize(*v9);
    unsigned int v16 = (uint64_t (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
      --qword_18C468B10;
      off_18C4653A8(v9);
      uint64_t v9 = (sqlite3_stmt **)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_15;
      }
      unsigned int v16 = (uint64_t (**)(void *))&xmmword_18C465410;
    }

    (*v16)(v9);
LABEL_15:
    *(void *)(a2 + 72) = 0LL;
  }

  return v7;
}

uint64_t sub_18138EC30(char *a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a3;
  if (*(_DWORD *)(*(void *)a1 + 92LL) == 1)
  {
    uint64_t result = (uint64_t)sub_18138ED28(a1, "fts5: column queries are not supported (detail=none)");
    if (!v3) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_181393304((uint64_t)a1, a2, a3, &v6);
    uint64_t v3 = v6;
    if (!v6) {
      return result;
    }
  }

  int v5 = (uint64_t (**)(int *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v5)(v3);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v3);
  uint64_t v3 = (int *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v5 = (uint64_t (**)(int *))&xmmword_18C465410;
    return (*v5)(v3);
  }

  return result;
}

char *sub_18138ED28(char *result, char *a2, ...)
{
  if (!*((_DWORD *)result + 4))
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t result = sqlite3_vmprintf(a2, va);
    *(void *)(v2 + 8) = result;
    *(_DWORD *)(v2 + 16) = 1;
  }

  return result;
}

uint64_t sub_18138ED78(uint64_t result, uint64_t *a2)
{
  switch((int)result)
  {
    case 17:
    case 18:
    case 19:
      return sub_18138CFA4(*a2);
    case 20:
    case 21:
      uint64_t v2 = *a2;
      if (!*a2) {
        return result;
      }
      uint64_t v3 = &off_18C4653A8;
      if (!dword_18C465380) {
        return (*v3)(v2);
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v2);
      uint64_t v2 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v3 = &xmmword_18C465410;
        return (*v3)(v2);
      }

      return result;
    case 22:
    case 23:
      return sub_18138D08C(*a2);
    case 24:
      return sub_18138D1E8(*a2);
    default:
      return result;
  }

int *sub_18138EE8C(_DWORD *a1, _DWORD *a2)
{
  if (a1[4]) {
    goto LABEL_2;
  }
  uint64_t v7 = *(int *)(*(void *)a1 + 24LL);
  if (sqlite3_initialize() || (uint64_t v8 = (int *)sub_18126F0AC(4 * v7 + 8)) == 0LL)
  {
    if ((int)v7 < -1)
    {
LABEL_2:
      uint64_t v3 = 0LL;
      goto LABEL_3;
    }

    uint64_t v3 = 0LL;
    a1[4] = 7;
LABEL_3:
    if (!a2) {
      return v3;
    }
    goto LABEL_4;
  }

  uint64_t v3 = v8;
  bzero(v8, 4 * v7 + 8);
  int v9 = 0;
  int v10 = 0;
  do
  {
    if (v9 < *a2 && v10 == a2[v9 + 1])
    {
      ++v9;
    }

    else
    {
      uint64_t v11 = *v3;
      *uint64_t v3 = v11 + 1;
      v3[v11 + 1] = v10;
    }

    ++v10;
  }

  while ((_DWORD)v7 != v10);
LABEL_4:
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_9:
    (*v4)(a2);
    return v3;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(a2);
  --qword_18C468B10;
  off_18C4653A8(a2);
  a2 = (_DWORD *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_9;
  }

  return v3;
}

_DWORD *sub_18138EFF0(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  if (*((_DWORD *)a1 + 4)) {
    goto LABEL_18;
  }
  int v5 = *(const char **)a3;
  unsigned int v6 = *(_DWORD *)(a3 + 8);
  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v6 = strlen(*(const char **)a3);
    int v7 = sqlite3_initialize();
    if ((v6 & 0x80000000) != 0)
    {
LABEL_17:
      *((_DWORD *)a1 + 4) = 7;
      goto LABEL_18;
    }
  }

  else
  {
    int v7 = sqlite3_initialize();
  }

  if (v7) {
    goto LABEL_17;
  }
  uint64_t v8 = (char *)sub_18126F0AC(v6 + 1);
  if (!v8) {
    goto LABEL_17;
  }
  int v9 = v8;
  memcpy(v8, v5, v6);
  v9[v6] = 0;
  if (*((_DWORD *)a1 + 4)) {
    goto LABEL_18;
  }
  uint64_t v10 = *a1;
  int v11 = *(unsigned __int8 *)v9;
  if ((v11 - 34) <= 0x3E && ((1LL << (v11 - 34)) & 0x4200000000000021LL) != 0)
  {
    if (v11 == 91) {
      int v13 = 93;
    }
    else {
      int v13 = *(unsigned __int8 *)v9;
    }
    int v14 = *((unsigned __int8 *)v9 + 1);
    if (v9[1])
    {
      uint64_t v15 = 0LL;
      int v16 = 1;
      while (1)
      {
        uint64_t v20 = v16 + 1LL;
        if (v14 == v13)
        {
          LODWORD(v20) = v16 + 2;
          LOBYTE(v14) = v13;
        }

        v9[v15++] = v14;
        int v14 = v9[(int)v20];
        int v16 = v20;
      }
    }

    LODWORD(v15) = 0;
LABEL_33:
    v9[v15] = 0;
  }

  uint64_t v21 = *(unsigned int *)(v10 + 24);
  if ((int)v21 >= 1)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = *(void *)(v10 + 32);
    while (1)
    {
      int v24 = *(_BYTE **)(v23 + 8 * v22);
      if (v24) {
        break;
      }
LABEL_36:
      if (++v22 == v21) {
        goto LABEL_44;
      }
    }

    for (uint64_t i = v9; ; ++i)
    {
      uint64_t v26 = *v24;
      uint64_t v27 = *(unsigned __int8 *)i;
      if ((_DWORD)v26 == (_DWORD)v27)
      {
        if (!*v24)
        {
          if ((_DWORD)v22 == (_DWORD)v21) {
            goto LABEL_44;
          }
LABEL_46:
          if (a2) {
            unsigned int v28 = *a2;
          }
          else {
            unsigned int v28 = 0;
          }
          if (sqlite3_initialize()
            || (uint64_t v30 = v28, v31 = (int)v28, (v32 = (_DWORD *)sub_18127D33C((uint64_t)a2, 4LL * (int)v28 + 8)) == 0LL))
          {
            __int128 v18 = 0LL;
            *((_DWORD *)a1 + 4) = 7;
          }

          else
          {
            __int128 v18 = v32;
            if ((int)v30 < 1)
            {
              LODWORD(v33) = 0;
LABEL_67:
              if ((int)v30 > (int)v33)
              {
                do
                {
                  v32[v31 + 1] = v32[v31];
                  --v31;
                }

                while (v31 > (int)v33);
              }

              v32[v33 + 1] = v22;
              _DWORD *v32 = v30 + 1;
            }

            else
            {
              uint64_t v33 = 0LL;
              while (1)
              {
                int v34 = v32[v33 + 1];
                if (v34 == (_DWORD)v22) {
                  break;
                }
                if (v30 == ++v33)
                {
                  LODWORD(v33) = v30;
                  goto LABEL_67;
                }
              }
            }
          }

          goto LABEL_51;
        }
      }

      else if (byte_1813C6343[v26] != byte_1813C6343[v27])
      {
        goto LABEL_36;
      }

      ++v24;
    }
  }

  LODWORD(v22) = 0;
  if ((_DWORD)v21) {
    goto LABEL_46;
  }
LABEL_44:
  sub_18138ED28((char *)a1, "no such column: %s", v9);
  __int128 v18 = 0LL;
LABEL_51:
  int v29 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_56;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
  --qword_18C468B10;
  off_18C4653A8(v9);
  int v9 = (const char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v29 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_56:
    (*v29)((unsigned __int8 *)v9);
  }

  if (v18) {
    return v18;
  }
LABEL_18:
  if (a2)
  {
    uint64_t v17 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(a2);
      --qword_18C468B10;
      off_18C4653A8(a2);
      a2 = (unsigned int *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return 0LL;
      }
      uint64_t v17 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
    }

    (*v17)(a2);
  }

  return 0LL;
}

_DWORD *sub_18138F394(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 16)) {
    goto LABEL_2;
  }
  if (a2 == 9 && !a5) {
    return 0LL;
  }
  if (a2 != 9 && !a3) {
    return a4;
  }
  if (a2 != 9 && !a4) {
    return a3;
  }
  if (a2 == 9)
  {
    if (*(_DWORD *)(a1 + 40) && *(int *)(*(void *)(a5 + 24) + 24LL) >= 2)
    {
      uint64_t v10 = sub_18138FAA0(a1, a5);
      goto LABEL_17;
    }

    goto LABEL_24;
  }

  if (a2 == 3)
  {
    int v12 = 2;
  }

  else
  {
    if ((a2 - 1) > 1)
    {
LABEL_24:
      int v12 = 0;
      goto LABEL_25;
    }

    if (*a3 == a2) {
      int v12 = a3[10] + 1;
    }
    else {
      int v12 = 2;
    }
    if (*a4 == a2) {
      int v12 = v12 + a4[10] - 1;
    }
  }

uint64_t sub_18138F688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 16)) {
    goto LABEL_2;
  }
  if (!a3) {
    return a2;
  }
  if (!a2)
  {
    if (sqlite3_initialize()) {
      goto LABEL_19;
    }
    int v12 = (_OWORD *)sub_18126F0AC(96LL);
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v5 = (uint64_t)v12;
    v12[4] = 0u;
    v12[5] = 0u;
    _OWORD v12[2] = 0u;
    v12[3] = 0u;
    *int v12 = 0u;
    v12[1] = 0u;
LABEL_8:
    int v9 = *(_DWORD *)(v5 + 16);
    if (v9 >= 1)
    {
      uint64_t v10 = *(void *)(v5 + 8LL * (v9 - 1) + 24);
      if (!*(_DWORD *)(a3 + 24))
      {
        sub_18138D1E8(a3);
        int v9 = *(_DWORD *)(v5 + 16) - 1;
        --*(_DWORD *)(a1 + 20);
        goto LABEL_21;
      }

      if (!*(_DWORD *)(v10 + 24))
      {
        sub_18138D1E8(v10);
        int v11 = *(_DWORD *)(a1 + 20);
        *(void *)(*(void *)(a1 + 24) + 8LL * (v11 - 2)) = a3;
        *(_DWORD *)(a1 + 20) = v11 - 1;
        int v9 = *(_DWORD *)(v5 + 16) - 1;
      }
    }

    uint64_t v10 = a3;
LABEL_21:
    *(_DWORD *)(v5 + 16) = v9 + 1;
    *(void *)(v5 + 8LL * v9 + 24) = v10;
    return v5;
  }

  int v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 7) != 0)
  {
    uint64_t v5 = a2;
    goto LABEL_8;
  }

  if (!sqlite3_initialize())
  {
    uint64_t v5 = sub_18127D33C(a2, 8LL * (v8 + 8) + 32);
    if (v5) {
      goto LABEL_8;
    }
  }

uint64_t sub_18138F7D4(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = *a1;
  uint64_t v30 = (_OWORD *)a2;
  uint64_t v31 = 0LL;
  int v8 = *(const char **)a3;
  unsigned int v9 = *(_DWORD *)(a3 + 8);
  if ((v9 & 0x80000000) != 0) {
    unsigned int v9 = strlen(*(const char **)a3);
  }
  int v10 = sqlite3_initialize();
  int v11 = 7;
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  int v12 = (char *)sub_18126F0AC(v9 + 1);
  if (!v12) {
    goto LABEL_33;
  }
  int v13 = v12;
  memcpy(v12, v8, v9);
  v13[v9] = 0;
  if (a4) {
    uint64_t v14 = 3LL;
  }
  else {
    uint64_t v14 = 1LL;
  }
  int v15 = *v13;
  if ((v15 - 34) <= 0x3E && ((1LL << (v15 - 34)) & 0x4200000000000021LL) != 0)
  {
    if (v15 == 91) {
      int v17 = 93;
    }
    else {
      int v17 = *v13;
    }
    int v18 = v13[1];
    if (v13[1])
    {
      uint64_t v19 = 0LL;
      int v20 = 1;
      while (1)
      {
        uint64_t v21 = v20 + 1LL;
        if (v18 == v17)
        {
          LODWORD(v21) = v20 + 2;
          LOBYTE(v18) = v17;
        }

        v13[v19++] = v18;
        int v18 = v13[(int)v21];
        int v20 = v21;
      }
    }

    LODWORD(v19) = 0;
LABEL_24:
    v13[v19] = 0;
  }

  size_t v22 = strlen(v13);
  int v11 = (*(uint64_t (**)(void, _OWORD **, uint64_t, char *, size_t, uint64_t (*)(uint64_t, char, char *, int)))(*(void *)(v7 + 112) + 16LL))( *(void *)(v7 + 104),  &v30,  v14,  v13,  v22,  sub_181393174);
  uint64_t v23 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_30;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
  --qword_18C468B10;
  off_18C4653A8(v13);
  int v13 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v23 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_30:
    (*v23)((unsigned __int8 *)v13);
  }

  if (v11 || (int v11 = v31) != 0)
  {
LABEL_33:
    *((_DWORD *)a1 + 4) = v11;
LABEL_34:
    sub_18138D1E8((uint64_t)v30);
    return 0LL;
  }

  if (!a2)
  {
    int v25 = *((_DWORD *)a1 + 5);
    if ((v25 & 7) == 0)
    {
      uint64_t v28 = a1[3];
      if (sqlite3_initialize() || (uint64_t v29 = sub_18127D33C(v28, 8LL * (v25 + 8))) == 0)
      {
        *((_DWORD *)a1 + 4) = 7;
        goto LABEL_34;
      }

      a1[3] = v29;
      int v25 = *((_DWORD *)a1 + 5);
    }

    *((_DWORD *)a1 + 5) = v25 + 1;
  }

  uint64_t v26 = v30;
  if (v30)
  {
    uint64_t v27 = *((int *)v30 + 6);
    if ((_DWORD)v27) {
      LOBYTE(v30[2 * v27]) = a4;
    }
  }

  else if (*((_DWORD *)a1 + 4))
  {
    uint64_t v26 = 0LL;
    uint64_t v30 = 0LL;
  }

  else if (sqlite3_initialize() || (uint64_t v26 = (_OWORD *)sub_18126F0AC(64LL)) == 0LL)
  {
    uint64_t v26 = 0LL;
    *((_DWORD *)a1 + 4) = 7;
    uint64_t v30 = 0LL;
  }

  else
  {
    v26[2] = 0u;
    v26[3] = 0u;
    *uint64_t v26 = 0u;
    v26[1] = 0u;
    uint64_t v30 = v26;
  }

  *(void *)(a1[3] + 8LL * *((int *)a1 + 5) - 8) = v26;
  return (uint64_t)v30;
}

uint64_t sub_18138FAA0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(a2 + 24) + 24LL);
  size_t v7 = 8 * (int)v6 + 56;
  if (sqlite3_initialize() || (int v8 = (void *)sub_18126F0AC(v7)) == 0LL)
  {
    if ((int)v7 >= 1)
    {
      uint64_t v2 = 0LL;
      *(_DWORD *)(a1 + 16) = 7;
      return v2;
    }

    return 0LL;
  }

  uint64_t v2 = (uint64_t)v8;
  bzero(v8, v7);
  *(_DWORD *)uint64_t v2 = 2;
  *(_DWORD *)(v2 + 40) = v6;
  *(_DWORD *)(v2 + 12) = 1;
  *(void *)(v2 + 16) = sub_181390354;
  --*(_DWORD *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    uint64_t v9 = 0LL;
    int v10 = (void *)(v2 + 48);
    uint64_t v11 = 32 * v6;
    do
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        if (sqlite3_initialize() || (int v12 = (_OWORD *)sub_18126F0AC(64LL)) == 0LL)
        {
          *(_DWORD *)(a1 + 16) = 7;
        }

        else
        {
          uint64_t v13 = (uint64_t)v12;
          _OWORD v12[2] = 0u;
          v12[3] = 0u;
          *int v12 = 0u;
          v12[1] = 0u;
          int v14 = *(_DWORD *)(a1 + 20);
          uint64_t v15 = *(void *)(a1 + 24);
          if ((v14 & 7) != 0) {
            goto LABEL_16;
          }
          if (!sqlite3_initialize())
          {
            uint64_t v22 = sub_18127D33C(v15, 8LL * (v14 + 8));
            if (v22)
            {
              uint64_t v15 = v22;
              *(void *)(a1 + 24) = v22;
              int v14 = *(_DWORD *)(a1 + 20);
LABEL_16:
              *(_DWORD *)(a1 + 20) = v14 + 1;
              *(void *)(v15 + 8LL * v14) = v13;
              *(_DWORD *)(v13 + 24) = 1;
              if (*(_DWORD *)(a1 + 16))
              {
                int v16 = 0LL;
              }

              else
              {
                int v17 = *(const char **)(*(void *)(a2 + 24) + v9 + 40);
                unsigned int v18 = strlen(v17);
                int v19 = sqlite3_initialize();
                if ((v18 & 0x80000000) != 0 || v19 || (int v20 = (_BYTE *)sub_18126F0AC(v18 + 1)) == 0LL)
                {
                  int v16 = 0LL;
                  *(_DWORD *)(a1 + 16) = 7;
                }

                else
                {
                  int v16 = v20;
                  memcpy(v20, v17, v18);
                  v16[v18] = 0;
                }
              }

              *(void *)(v13 + 40) = v16;
              uint64_t v21 = sub_18138F688(a1, 0LL, v13);
              void *v10 = sub_18138F394(a1, 9LL, 0LL, 0LL, v21);
              goto LABEL_11;
            }
          }

          *(_DWORD *)(a1 + 16) = 7;
          sub_18138D1E8(v13);
        }
      }

_DWORD *sub_18138FCE8(_DWORD *result, _DWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = (int)result[10];
  if (*result == 3 || *a2 != *result)
  {
    result[10] = v4 + 1;
    *(void *)&result[2 * v4 + 12] = a2;
  }

  else
  {
    memcpy(&result[2 * v4 + 12], a2 + 12, 8 * a2[10]);
    v3[10] += v2[10];
    uint64_t v5 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_8:
      uint64_t result = (_DWORD *)(*v5)(v2);
      goto LABEL_10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    uint64_t result = (_DWORD *)off_18C4653A8(v2);
    uint64_t v2 = (_DWORD *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v5 = &xmmword_18C465410;
      goto LABEL_8;
    }
  }

uint64_t sub_18138FE30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 24LL);
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(v7 + 24);
  if (a3)
  {
    do
    {
      sub_1813903E0(v8, v7, 1, a4);
      if (*(_DWORD *)(v8 + 60)) {
        break;
      }
      if (*(_BYTE *)(v7 + 20)) {
        break;
      }
      uint64_t v10 = *(void *)(v7 + 136LL * *(unsigned __int16 *)(*(void *)(v7 + 88) + 4LL) + 216);
      int v11 = *(_DWORD *)(v7 + 68);
      if (!v11 && v10 >= a4) {
        break;
      }
    }

    while (!v11 || v10 > a4);
  }

  else
  {
    sub_1813903E0(*(void *)(v7 + 24), *(void *)(v6 + 48), 0, 0LL);
  }

  uint64_t v12 = *(void *)(v7 + 24);
  uint64_t result = *(unsigned int *)(v12 + 60);
  *(_DWORD *)(v12 + 60) = 0;
  if ((_DWORD)result || *(_BYTE *)(v7 + 20))
  {
    BOOL v14 = 0;
    *(_DWORD *)(a2 + 4) = 1;
  }

  else
  {
    uint64_t v15 = *(void *)(*(void *)(a2 + 32) + 24LL);
    uint64_t v16 = *(void *)(v15 + 48);
    int v17 = *(_DWORD *)(v16 + 16);
    *(_DWORD *)(v15 + 16) = v17;
    if (!*(_DWORD *)(*(void *)(a1 + 8) + 92LL)) {
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
    }
    *(void *)(a2 + 24) = *(void *)v16;
    BOOL v14 = v17 == 0;
  }

  *(_DWORD *)(a2 + 8) = v14;
  return result;
}

uint64_t sub_18138FF44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(*(void *)(a2 + 32) + 24LL);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(void *)(v8 + 56))
  {
    uint64_t v9 = 0LL;
    int v10 = 0;
    uint64_t v11 = v8 + 32;
    uint64_t v12 = v8 + 32;
    do
    {
      uint64_t v13 = *(uint64_t **)(v12 + 16);
      if (!*((_BYTE *)v13 + 20))
      {
        uint64_t v14 = *v13;
        if (v10 && *(_DWORD *)(a1 + 24) == v14 < v9)
        {
          int v10 = 1;
        }

        else
        {
          int v10 = 1;
          uint64_t v9 = v14;
        }
      }

      uint64_t v12 = *(void *)(v12 + 24);
    }

    while (v12);
    int v16 = 1;
    while (1)
    {
      int v17 = v16;
      uint64_t v18 = *(void *)(v11 + 16);
      if (!*(_BYTE *)(v18 + 20))
      {
        uint64_t v19 = *(void *)v18;
        if (*(void *)v18 == v9)
        {
          if (a3)
          {
LABEL_18:
            uint64_t v20 = v18 + 24;
            uint64_t v21 = *(void *)(v18 + 24);
            do
            {
              sub_1813903E0(v21, v18, 1, a4);
              if (*(_DWORD *)(v21 + 60)) {
                break;
              }
              if (*(_BYTE *)(v18 + 20)) {
                break;
              }
              uint64_t v22 = *(void *)(v18 + 136LL * *(unsigned __int16 *)(*(void *)(v18 + 88) + 4LL) + 216);
              int v23 = *(_DWORD *)(v18 + 68);
              if (!v23 && v22 >= a4) {
                break;
              }
            }

            while (!v23 || v22 > a4);
          }

          else
          {
            uint64_t v20 = v18 + 24;
            sub_1813903E0(*(void *)(v18 + 24), *(void *)(v11 + 16), 0, 0LL);
          }

          uint64_t result = *(unsigned int *)(*(void *)v20 + 60LL);
          *(_DWORD *)(*(void *)v20 + 60LL) = 0;
          if ((_DWORD)result) {
            goto LABEL_31;
          }
          if (*(_BYTE *)(*(void *)(v11 + 16) + 20LL)) {
            int v16 = v17;
          }
          else {
            int v16 = 0;
          }
          goto LABEL_10;
        }

        int v16 = 0;
        if (a3 && v19 != a4)
        {
          if (*(_DWORD *)(a1 + 24) == v19 > a4) {
            goto LABEL_18;
          }
          int v16 = 0;
        }
      }

uint64_t sub_1813901F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a2 + 40);
  if (v5 <= 0)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    goto LABEL_29;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a2 + 24);
  do
  {
    uint64_t v11 = *(void *)(a2 + 48 + 8 * v9);
    if (*(_DWORD *)(v11 + 4)) {
      goto LABEL_3;
    }
    uint64_t v12 = *(void *)(v11 + 24);
    if (v12 != v10)
    {
      if (!a3) {
        goto LABEL_3;
      }
      if (*(_DWORD *)(a1 + 24))
      {
        if (v12 <= a4) {
          goto LABEL_3;
        }
      }

      else if (v12 >= a4)
      {
        goto LABEL_3;
      }
    }

    uint64_t result = (*(uint64_t (**)(uint64_t))(v11 + 16))(a1);
    if ((_DWORD)result)
    {
      int v20 = 0;
      goto LABEL_30;
    }

    int v5 = *(_DWORD *)(a2 + 40);
LABEL_3:
    ++v9;
  }

  while (v9 < v5);
  uint64_t v14 = *(void *)(a2 + 48);
  if (v5 >= 2)
  {
    uint64_t v15 = v5 - 1LL;
    int v16 = (uint64_t *)(a2 + 56);
    while (2)
    {
      uint64_t v17 = *v16;
      if (*(_DWORD *)(*v16 + 4)) {
        goto LABEL_17;
      }
      if (!*(_DWORD *)(v14 + 4))
      {
        uint64_t v18 = *(void *)(v14 + 24);
        uint64_t v19 = *(void *)(v17 + 24);
        if (*(_DWORD *)(a1 + 24))
        {
          if (v18 > v19) {
            goto LABEL_17;
          }
          if (v18 >= v19)
          {
LABEL_26:
            if (*(_DWORD *)(v17 + 8)) {
              goto LABEL_17;
            }
          }
        }

        else
        {
          if (v18 < v19) {
            goto LABEL_17;
          }
          if (v18 <= v19) {
            goto LABEL_26;
          }
        }
      }

      uint64_t v14 = *v16;
LABEL_17:
      ++v16;
      if (!--v15) {
        break;
      }
      continue;
    }
  }

uint64_t sub_181390354(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 48) + 16LL))();
  if (!(_DWORD)result) {
    return sub_181392E18(a1, a2);
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_18139039C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 48) + 16LL))();
  if ((_DWORD)result || (uint64_t result = sub_18139305C(a1, a2), (_DWORD)result)) {
    *(_DWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_1813903E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v5 = result;
    int v6 = a2 + 96;
    for (BOOL i = a3 == 0; ; BOOL i = 1)
    {
      uint64_t v8 = *(unsigned __int16 *)(*(void *)(a2 + 88) + 4LL);
      int v51 = 0;
      uint64_t v9 = a2 + 136LL * v8;
      uint64_t v10 = v9 + 96;
      if (!i)
      {
        uint64_t v11 = *(void *)(a2 + 136LL * v8 + 192);
        if (v11) {
          break;
        }
      }

      uint64_t v16 = a2 + 136LL * v8;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 152))(v5, v9 + 96, &v51);
      uint64_t v17 = *(void *)(v16 + 112);
LABEL_16:
      if (v17) {
        BOOL v18 = v51 == 0;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18)
      {
LABEL_61:
        int v24 = *(_DWORD *)(a2 + 64) + v8;
LABEL_62:
        if (v24 >= 2)
        {
          do
          {
            if (*(_DWORD *)(v5 + 60)) {
              break;
            }
            int v24 = v24 >> 1;
            uint64_t result = sub_18139176C(a2, v24);
            if ((_DWORD)result)
            {
              int v39 = result;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 136LL * (int)result + 152))( v5,  a2 + 136LL * (int)result + 96,  0LL);
              int v24 = *(_DWORD *)(a2 + 64) + v39;
            }
          }

          while (v24 > 1);
        }

        uint64_t v37 = a2 + 136LL * *(unsigned __int16 *)(*(void *)(a2 + 88) + 4LL);
        uint64_t v38 = *(void *)(v37 + 112);
        *(_BYTE *)(a2 + 20) = v38 == 0;
        *(void *)(a2 + 80) = *(void *)(v37 + 216);
        if (!v38) {
          return result;
        }
        uint64_t v10 = v37 + 96;
        goto LABEL_65;
      }

      uint64_t v19 = *(void *)(a2 + 136LL * v8 + 216);
      uint64_t v20 = *(void *)(a2 + 80);
      if (v19 == v20)
      {
        int v21 = *(_DWORD *)(a2 + 68);
LABEL_24:
        uint64_t v22 = v8 ^ 1;
        if (v21) {
          int64_t v23 = 0x8000000000000000LL;
        }
        else {
          int64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        *(void *)(a2 + 80) = v23;
        int v24 = *(_DWORD *)(a2 + 64) + v8;
        uint64_t v25 = *(void *)(a2 + 88);
        int v26 = v24;
        while (2)
        {
          if (v26 >= 0) {
            int v27 = v26;
          }
          else {
            int v27 = v26 + 1;
          }
          uint64_t v28 = v25 + 4LL * (v27 >> 1);
          if (*(_BYTE *)(v28 + 2))
          {
            int64_t v29 = *(void *)(v10 + 120);
            int64_t v30 = *(void *)(a2 + 136 * v22 + 216);
            if (v29 == v30) {
              goto LABEL_62;
            }
            if (v21 == v30 > v29)
            {
              uint64_t v10 = a2 + 136 * v22 + 96;
              goto LABEL_36;
            }

            if (v21 == v30 > v23)
            {
LABEL_36:
              *(void *)(a2 + 80) = v30;
              int64_t v23 = v30;
            }
          }

          *(_WORD *)uint64_t v28 = -3855 * ((v10 - v6) >> 3);
          if ((v26 & 0xFFFFFFFE) == 2) {
            goto LABEL_65;
          }
          uint64_t v22 = *(unsigned __int16 *)(v25 + 4 * (((uint64_t)v27 >> 1) ^ 1));
          int v26 = v27 >> 1;
          continue;
        }
      }

      int v21 = v19 < v20;
      if (*(_DWORD *)(a2 + 68) == v21) {
        goto LABEL_24;
      }
LABEL_65:
      if (!*(_BYTE *)(a2 + 72) || *(_DWORD *)(v10 + 128))
      {
        uint64_t result = sub_1813908F8(a2);
        if (!(_DWORD)result) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a2, v10);
        }
      }

      if (*(_DWORD *)(v5 + 60)) {
        return result;
      }
    }

    uint64_t v12 = a2 + 136LL * v8;
    uint64_t v13 = (int *)(v12 + 108);
    int v49 = *(_DWORD *)(v12 + 104);
    if ((v49 & 2) != 0)
    {
      while (!*(_DWORD *)(v11 + 20) && *(void *)(v11 + 32) > a4)
      {
        uint64_t result = sub_181391384(v5, (_DWORD *)v11, 0);
        int v15 = *(_DWORD *)(v5 + 60);
        if (v15) {
          goto LABEL_40;
        }
      }

      int v15 = 0;
LABEL_40:
      int v31 = *(_DWORD *)(v11 + 28);
      if (v31 < *v13)
      {
        int *v13 = v31 + 1;
        uint64_t result = (uint64_t)sub_181390AD8((unsigned __int16 **)v5, (unsigned int **)v10);
LABEL_42:
        uint64_t v14 = (uint64_t (**)(uint64_t, uint64_t, void))(a2 + 136LL * v8 + 152);
        goto LABEL_54;
      }
    }

    else
    {
      if (*(_DWORD *)(v11 + 20))
      {
        uint64_t v14 = (uint64_t (**)(uint64_t, uint64_t, void))(a2 + 136LL * v8 + 152);
LABEL_53:
        uint64_t result = (*v14)(v5, v10, 0LL);
        goto LABEL_54;
      }

      if (*(void *)(v11 + 32) >= a4)
      {
        int v15 = 0;
        int v32 = *v13;
      }

      else
      {
        while (1)
        {
          int v32 = *(_DWORD *)(v11 + 28);
          uint64_t result = sub_181390D2C(v5, (_DWORD *)v11, 0);
          int v15 = *(_DWORD *)(v5 + 60);
          if (v15) {
            break;
          }
          if (*(_DWORD *)(v11 + 20) || *(void *)(v11 + 32) >= a4)
          {
            int v15 = 0;
            break;
          }
        }
      }

      if (v32 > *v13)
      {
        if (*(_DWORD *)(*(void *)v10 + 8LL) < v32)
        {
LABEL_51:
          *(_DWORD *)(v5 + 60) = 267;
          goto LABEL_42;
        }

        uint64_t v40 = a2 + 136LL * v8;
        uint64_t v43 = *(void *)(v40 + 120);
        uint64_t v41 = (void *)(v40 + 120);
        uint64_t v42 = v43;
        if (v43)
        {
          int v48 = v41;
          uint64_t v44 = &off_18C4653A8;
          if (!dword_18C465380)
          {
LABEL_78:
            uint64_t result = (*v44)(v42);
            uint64_t v41 = v48;
            goto LABEL_79;
          }

          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v42);
          --qword_18C468B10;
          uint64_t result = off_18C4653A8(v42);
          uint64_t v42 = xmmword_18C468B70;
          uint64_t v41 = v48;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v44 = &xmmword_18C465410;
            goto LABEL_78;
          }
        }

uint64_t sub_1813908F8(uint64_t a1)
{
  uint64_t v1 = a1 + 136LL * *(unsigned __int16 *)(*(void *)(a1 + 88) + 4LL);
  if (!*(void *)(v1 + 112)) {
    return 0LL;
  }
  uint64_t v2 = a1 + 136LL * *(unsigned __int16 *)(*(void *)(a1 + 88) + 4LL);
  unint64_t v5 = *(int *)(v2 + 144);
  uint64_t v4 = (int *)(v2 + 144);
  unint64_t v3 = v5;
  if (!(_DWORD)v5) {
    return 0LL;
  }
  uint64_t v6 = a1 + 136LL * *(unsigned __int16 *)(*(void *)(a1 + 88) + 4LL);
  uint64_t v8 = *(void *)(v6 + 136);
  uint64_t v7 = (void *)(v6 + 136);
  unint64_t v9 = v7[10];
  unint64_t v10 = v9 % v3;
  uint64_t v11 = *(unsigned __int8 ***)(v8 + ((uint64_t)((v9 % v3) << 32) >> 29));
  if (!v11)
  {
    uint64_t v12 = (int)v10;
    *(void *)(*v7 + 8LL * (int)v10) = sub_18138BCF4( *(void *)(a1 + 24),  (int)v10 + ((unint64_t)(**(_DWORD **)(v1 + 96) + 0x10000) << 37));
    uint64_t v11 = *(unsigned __int8 ***)(*v7 + 8 * v12);
    if (!v11) {
      return 0LL;
    }
    unint64_t v3 = *v4;
    unint64_t v9 = v7[10];
  }

  uint64_t v13 = (uint64_t)*v11;
  int v14 = **v11;
  int v15 = *((_DWORD *)v11 + 2);
  if (v14 == 4) {
    char v16 = 2;
  }
  else {
    char v16 = 3;
  }
  if (v15 <= 16) {
    unint64_t v17 = 1LL;
  }
  else {
    unint64_t v17 = (v15 - 8) >> v16;
  }
  if (!v9) {
    return *(unsigned __int8 *)(v13 + 1);
  }
  unint64_t v18 = v9 / v3 % v17;
  uint64_t v19 = v13 + 8;
  if (v14 == 4)
  {
    uint64_t v20 = (int *)(v19 + 4 * v18);
    int v21 = *v20;
    if (*v20)
    {
      int v22 = v17 + 1;
      while (((v21 << 24) | ((unint64_t)*((unsigned __int8 *)v20 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v20 + 2) << 8) | *((unsigned __int8 *)v20 + 3)) != v9)
      {
        uint64_t result = 0LL;
        if (--v22)
        {
          LODWORD(v18) = ((int)v18 + 1) % v17;
          uint64_t v20 = (int *)(v19 + 4LL * v18);
          int v21 = *v20;
          if (*v20) {
            continue;
          }
        }

        return result;
      }

      return 1LL;
    }
  }

  else
  {
    int v24 = (uint64_t *)(v19 + 8 * v18);
    uint64_t v25 = *v24;
    if (*v24)
    {
      int v26 = v17 + 1;
      while (((v25 << 56) | ((unint64_t)*((unsigned __int8 *)v24 + 1) << 48) | ((unint64_t)*((unsigned __int8 *)v24 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v24 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v24 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v24 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v24 + 6) << 8))
            + *((unsigned __int8 *)v24 + 7) != v9)
      {
        uint64_t result = 0LL;
        if (--v26)
        {
          LODWORD(v18) = ((int)v18 + 1) % v17;
          int v24 = (uint64_t *)(v19 + 8LL * v18);
          uint64_t v25 = *v24;
          if (*v24) {
            continue;
          }
        }

        return result;
      }

      return 1LL;
    }
  }

  return 0LL;
}

unsigned __int16 **sub_181390AD8(unsigned __int16 **result, unsigned int **a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2[2];
  if (v4)
  {
    unint64_t v5 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (unsigned __int16 **)(*v5)(v4);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
    --qword_18C468B10;
    uint64_t result = (unsigned __int16 **)off_18C4653A8(v4);
    uint64_t v4 = (unsigned int *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unint64_t v5 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_181390D2C(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = (uint64_t)&a2[8 * a3 + 2];
  uint64_t result = sub_181390E7C(v7);
  if ((_DWORD)result)
  {
    if (a3 + 1 < *a2)
    {
      uint64_t result = sub_181390D2C(a1, a2);
      if (!*(_DWORD *)(v7 + 44))
      {
        uint64_t v9 = *(void *)v7;
        if (*(void *)v7)
        {
          unint64_t v10 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
            --qword_18C468B10;
            off_18C4653A8(v9);
            uint64_t v9 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_12;
            }
            unint64_t v10 = &xmmword_18C465410;
          }

          (*v10)(v9);
        }

uint64_t sub_181390E7C(uint64_t a1)
{
  uint64_t v2 = *(int **)a1;
  uint64_t v3 = *(int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    int v5 = v2[2];
    if ((int)v3 >= v5)
    {
LABEL_6:
      *(_DWORD *)(a1 + 12) = 1;
    }

    else
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = *(void *)v2;
      uint64_t v8 = v3 << 32;
      uint64_t v9 = v7 + v3;
      int v10 = v3 - v5;
      while (!*(_BYTE *)(v9 + v6))
      {
        v8 += 0x100000000LL;
        if (!(v10 + (_DWORD)++v6)) {
          goto LABEL_6;
        }
      }

      *(_DWORD *)(a1 + 20) += v6 + 1;
      int v15 = sub_18138BFCC((char *)(v7 + (v8 >> 32)), &v21);
      *(void *)(a1 + 24) += v21;
      *(_DWORD *)(a1 + 8) = v15 + v4 + v6;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 8) = 1;
    uint64_t v11 = *(void *)v2;
    uint64_t v12 = (char *)(*(void *)v2 + 1LL);
    int v13 = *v12;
    if (*v12 < 0)
    {
      int v16 = *(unsigned __int8 *)(v11 + 2);
      if (*(char *)(v11 + 2) < 0)
      {
        int v17 = *(char *)(v11 + 3);
        if (v17 < 0)
        {
          char v18 = sub_18138BFCC(v12, &v21);
          *(_DWORD *)(a1 + 20) = v21 & 0x7FFFFFFF;
          unsigned int v14 = (v18 + 1);
        }

        else
        {
          *(_DWORD *)(a1 + 20) = v17 & 0x7F | (v13 << 14) & 0x1FC07F | ((v16 & 0x7F) << 7);
          unsigned int v14 = 4;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 20) = ((v13 & 0x7F) << 7) | v16;
        unsigned int v14 = 3;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 20) = v13;
      unsigned int v14 = 2;
    }

    *(_DWORD *)(a1 + 8) = v14;
    int v19 = *(_DWORD *)(a1 + 8) + sub_18138BFCC((char *)(v11 + v14), (unint64_t *)(a1 + 24));
    *(_DWORD *)(a1 + 8) = v19;
    *(_DWORD *)(a1 + 16) = v19;
  }

  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_181390FF0(uint64_t result, unsigned int **a2)
{
  uint64_t v3 = result;
  int v4 = *a2;
  int v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      uint64_t result = (*v6)(v5);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v5);
    int v5 = (unsigned int *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_181391240(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (*(_DWORD *)(*(void *)result + 92LL) == 1)
    {
      int v4 = *(_DWORD *)(a2 + 76);
      int v5 = *(uint64_t **)(a2 + 16);
      if (v4 >= *((_DWORD *)v5 + 3)) {
        int v4 = *((_DWORD *)v5 + 3);
      }
      *(_BYTE *)(a2 + 132) = 0;
      *(_DWORD *)(a2 + 128) = 1;
      if (v4 <= (int)v3 || (uint64_t v6 = *v5, *(_BYTE *)(*v5 + (int)v3)))
      {
        LODWORD(v7) = v3;
      }

      else
      {
        *(_BYTE *)(a2 + 132) = 1;
        uint64_t v7 = (int)v3 + 1LL;
        if ((int)v7 >= v4 || *(_BYTE *)(v6 + v7))
        {
          *(_DWORD *)(a2 + 128) = 0;
        }

        else
        {
          *(_DWORD *)(a2 + 128) = 1;
          LODWORD(v7) = v3 + 2;
        }
      }
    }

    else
    {
      uint64_t v8 = (char *)(**(void **)(a2 + 16) + (int)v3);
      unsigned int v9 = *v8;
      if (*v8 < 0)
      {
        int v10 = v8[1];
        if (v8[1] < 0)
        {
          int v11 = v8[2];
          if (v11 < 0)
          {
            uint64_t result = sub_18138BFCC(v8, &v12);
            unsigned int v9 = v12 & 0x7FFFFFFF;
          }

          else
          {
            unsigned int v9 = v11 & 0x7F | (v9 << 14) & 0x1FC07F | ((v10 & 0x7F) << 7);
            uint64_t result = 3LL;
          }
        }

        else
        {
          unsigned int v9 = ((v9 & 0x7F) << 7) | v10;
          uint64_t result = 2LL;
        }
      }

      else
      {
        uint64_t result = 1LL;
      }

      LODWORD(v7) = result + v3;
      *(_BYTE *)(a2 + 132) = v9 & 1;
      *(_DWORD *)(a2 + 128) = v9 >> 1;
    }

    *(void *)(a2 + 32) = (int)v7;
  }

  return result;
}

uint64_t sub_181391384(uint64_t result, _DWORD *a2, int a3)
{
  int v4 = a2;
  uint64_t v5 = result;
  uint64_t v6 = a3;
  uint64_t v7 = &a2[8 * a3];
  uint64_t v8 = v7 + 4;
  int v9 = v7[4];
  int v10 = (uint64_t *)(v7 + 2);
  if (v9 <= v7[6])
  {
    v7[5] = 1;
    goto LABEL_12;
  }

  uint64_t v20 = result;
  uint64_t v21 = a3;
  uint64_t v11 = *(void *)*v10;
  *uint64_t v8 = 0;
  sub_181390E7C((uint64_t)(v7 + 2));
  int v12 = *v8;
  int v13 = v7 + 7;
  int v14 = v7 + 8;
  while (1)
  {
    unint64_t v23 = 0LL;
    uint64_t v15 = v12;
    if (*(_BYTE *)(v11 + v12))
    {
      LODWORD(v16) = 0;
    }

    else
    {
      uint64_t v16 = 0LL;
      v12 += v16;
      v15 += v16;
    }

    uint64_t result = sub_18138BFCC((char *)(v11 + v15), &v23);
    v12 += result;
    if (v12 >= v9) {
      break;
    }
    *v13 += v16 + 1;
    *v14 += v23;
    *uint64_t v8 = v12;
  }

  uint64_t v6 = v21;
  int v4 = a2;
  uint64_t v5 = v20;
  if (a2[8 * v21 + 5])
  {
LABEL_12:
    if (a3 + 1 >= *v4) {
      return result;
    }
    uint64_t result = sub_181391384(v5, v4);
    if (v8[9]) {
      return result;
    }
    char v18 = (void *)*v10;
    if (!*v10) {
      goto LABEL_21;
    }
    int v19 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
      --qword_18C468B10;
      off_18C4653A8(v18);
      char v18 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_21;
      }
      int v19 = &xmmword_18C465410;
    }

    (*v19)(v18);
LABEL_21:
    *(_OWORD *)int v10 = 0u;
    *(_OWORD *)(v8 + 2) = 0u;
    uint64_t result = (uint64_t)sub_18138BCF4( v5,  (v6 << 31) + ((unint64_t)v4[1] << 37) + 0x1000000000LL + (int)v8[11]);
    uint64_t *v10 = result;
    if (result)
    {
      do
        uint64_t result = sub_181390E7C((uint64_t)(v8 - 2));
      while (!(_DWORD)result);
      v4[8 * v6 + 5] = 0;
    }
  }

  return result;
}

uint64_t sub_1813915A4(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = 0LL;
  int v4 = *(_DWORD *)(*(void *)a1 + 92LL);
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *v5;
  if (*((_DWORD *)v5 + 3) >= *(_DWORD *)(a2 + 76)) {
    int v8 = *(_DWORD *)(a2 + 76);
  }
  else {
    int v8 = *((_DWORD *)v5 + 3);
  }
  for (uint64_t i = *(void *)(a2 + 32); ; *(void *)(a2 + 32) = (int)i)
  {
    unint64_t v22 = 0LL;
    if (v4 == 1)
    {
      if ((int)i < v8 && !*(_BYTE *)(v7 + (int)i))
      {
        uint64_t v10 = (int)i + 1LL;
        if ((int)v10 >= v8)
        {
          LODWORD(i) = i + 1;
        }

        else if (*(_BYTE *)(v7 + v10))
        {
          LODWORD(i) = i + 1;
        }

        else
        {
          LODWORD(i) = i + 2;
        }
      }
    }

    else
    {
      uint64_t v11 = (char *)(v7 + (int)i);
      unsigned int v12 = *v11;
      if (*v11 < 0)
      {
        int v14 = v11[1];
        if (v11[1] < 0)
        {
          int v15 = v11[2];
          if (v15 < 0)
          {
            int v13 = sub_18138BFCC(v11, &v23);
            unsigned int v12 = v23 & 0x7FFFFFFF;
          }

          else
          {
            unsigned int v12 = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
            int v13 = 3;
          }
        }

        else
        {
          unsigned int v12 = ((v12 & 0x7F) << 7) | v14;
          int v13 = 2;
        }
      }

      else
      {
        int v13 = 1;
      }

      LODWORD(i) = v13 + i + (v12 >> 1);
    }

    int v16 = sub_18138BFCC((char *)(v7 + (int)i), &v22);
    *(void *)(a2 + 120) += v22;
    uint64_t v17 = *(int *)(a2 + 84);
    uint64_t v18 = *(void *)(a2 + 88);
    if (v3 >= v17)
    {
      if (sqlite3_initialize() || (uint64_t v19 = sub_18127D33C(v18, 4 * (v17 + 8))) == 0)
      {
        a1[15] = 7;
        break;
      }

      uint64_t v18 = v19;
      *(void *)(a2 + 88) = v19;
      *(_DWORD *)(a2 + 84) = v17 + 8;
      uint64_t v6 = *(void *)(a2 + 32);
    }

    *(_DWORD *)(v18 + 4 * v3) = v6;
    LODWORD(i) = i + v16;
    ++v3;
    LODWORD(v6) = i;
  }

  *(_DWORD *)(a2 + 80) = v3;
  return sub_181391240((uint64_t)a1, a2);
}

uint64_t sub_18139176C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  int v5 = *(_DWORD *)(a1 + 64) / 2;
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 != v6)
  {
    int v8 = *(unsigned __int16 *)(v4 + 8LL * a2);
    uint64_t v9 = *(unsigned __int16 *)(v4 + 4LL * ((2 * a2) | 1));
  }

  else
  {
    int v8 = 2 * v7;
    uint64_t v9 = (2 * v7) | 1u;
  }

  uint64_t v10 = v4 + 4LL * a2;
  *(_BYTE *)(v10 + 2) = 0;
  uint64_t v11 = (_BYTE *)(v10 + 2);
  if (!*(void *)(a1 + 136LL * v8 + 112)) {
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 136LL * (int)v9 + 112))
  {
    LOWORD(v9) = v8;
LABEL_20:
    *(_WORD *)(v4 + 4LL * a2) = v9;
    return 0LL;
  }

  unsigned int v12 = *(_DWORD *)(a1 + 96 + 136LL * v8 + 112);
  unsigned int v13 = *(_DWORD *)(a1 + 96 + 136LL * (int)v9 + 112);
  else {
    size_t v14 = v12;
  }
  if ((int)v14 >= 1)
  {
    int v15 = memcmp(*(const void **)(a1 + 96 + 136LL * v8 + 104), *(const void **)(a1 + 96 + 136LL * (int)v9 + 104), v14);
    if (v15) {
      goto LABEL_18;
    }
  }

  int v15 = v12 - v13;
  if (v12 != v13) {
    goto LABEL_18;
  }
  *uint64_t v11 = 1;
  uint64_t v16 = *(void *)(a1 + 96 + 136LL * v8 + 120);
  uint64_t v17 = *(void *)(a1 + 96 + 136LL * (int)v9 + 120);
  if (v16 != v17)
  {
    if (*(_DWORD *)(a1 + 68) == v16 > v17) {
      int v15 = -1;
    }
    else {
      int v15 = 1;
    }
LABEL_18:
    if (v15 < 0) {
      LOWORD(v9) = v8;
    }
    goto LABEL_20;
  }

  *(_BYTE *)(a1 + 96 + 136LL * v8 + 132) = *(_BYTE *)(a1 + 96 + 136LL * (int)v9 + 132);
  return v9;
}

uint64_t sub_1813918E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v152 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(v3 + 24);
  int v5 = *(_DWORD *)(a1 + 24);
  if (*(void *)(v4 + 56))
  {
    uint64_t v6 = 0LL;
    int v7 = 0;
    uint64_t v8 = v4 + 32;
    do
    {
      uint64_t v9 = *(void *)(v8 + 16);
      if (!*(_BYTE *)(v9 + 20))
      {
        uint64_t v10 = *(void *)v9;
        if (v7 && v5 == v10 < v6)
        {
          int v7 = 1;
        }

        else
        {
          int v7 = 1;
          uint64_t v6 = v10;
        }
      }

      uint64_t v8 = *(void *)(v8 + 24);
    }

    while (v8);
  }

  else
  {
    uint64_t v6 = **(void **)(v4 + 48);
  }

  int v11 = *(_DWORD *)(v3 + 16);
  uint64_t v144 = *(void *)(a2 + 32);
LABEL_11:
  if (v11 < 1) {
    goto LABEL_80;
  }
  uint64_t v12 = 0LL;
  int v13 = 1;
  while (1)
  {
    uint64_t v14 = *(void *)(v3 + 8 * v12 + 24);
LABEL_14:
    if (++v12 >= v11)
    {
      uint64_t v2 = a2;
      if (v13)
      {
LABEL_80:
        *(void *)(v2 + 24) = v6;
        uint64_t v45 = *(int **)(v2 + 32);
        if (*(_DWORD *)(*(void *)(a1 + 8) + 92LL))
        {
          int v46 = 0;
          uint64_t v47 = *((void *)v45 + 3);
          *(_DWORD *)(v47 + 16) = 0;
          uint64_t v48 = v47 + 32;
          do
          {
            uint64_t v50 = *(void *)(v48 + 16);
            if (!*(_BYTE *)(v50 + 20) && *(void *)v50 == v6 && *(int *)(v50 + 16) >= 1)
            {
              int v46 = 1;
              *(_DWORD *)(v47 + 16) = 1;
            }

            uint64_t v48 = *(void *)(v48 + 24);
          }

          while (v48);
          uint64_t v16 = 0LL;
LABEL_266:
          *(_DWORD *)(v2 + 8) = (v46 | v16) == 0;
          return v16;
        }

        uint64_t v51 = 0LL;
        uint64_t v142 = *(int **)(v2 + 32);
        while (2)
        {
          if (v51 >= v45[4])
          {
            uint64_t v16 = 0LL;
            goto LABEL_193;
          }

          uint64_t v52 = *(void *)&v45[2 * v51 + 6];
          uint64_t v53 = *(unsigned int *)(v52 + 24);
          uint64_t v145 = v51;
          if ((int)v53 <= 1)
          {
            if (*(void *)(v52 + 56) || *((void *)v45 + 1) || *(_BYTE *)(v52 + 33))
            {
              uint64_t v150 = 0LL;
              int v140 = *(unsigned __int8 *)(v52 + 33);
              int v55 = (char *)v151;
              *(_DWORD *)(v52 + 16) = 0;
              goto LABEL_103;
            }

            uint64_t v89 = *(void *)(v52 + 48);
            size_t v90 = *(unsigned int *)(v89 + 16);
            __int128 v91 = *(const void **)(v89 + 8);
            *(_DWORD *)(v52 + 16) = 0;
            if ((_DWORD)v90)
            {
              LODWORD(v92) = *(_DWORD *)(v52 + 20);
              uint64_t v93 = v51;
              if (v92 >= v90)
              {
                uint64_t v97 = 0LL;
                uint64_t v96 = *(void *)(v52 + 8);
              }

              else
              {
                if (!(_DWORD)v92) {
                  LODWORD(v92) = 64;
                }
                unint64_t v92 = (int)v92;
                do
                {
                  unint64_t v94 = v92;
                  v92 *= 2LL;
                }

                while (v94 < v90);
                uint64_t v95 = *(void *)(v52 + 8);
                if (sqlite3_initialize() || (uint64_t v96 = sub_18127D33C(v95, v94)) == 0)
                {
                  LODWORD(v51) = v93 + 1;
                  uint64_t v16 = 7LL;
                  uint64_t v45 = v142;
                  goto LABEL_193;
                }

                *(_DWORD *)(v52 + 20) = v94;
                *(void *)(v52 + 8) = v96;
                uint64_t v97 = *(int *)(v52 + 16);
                uint64_t v45 = v142;
              }

              memcpy((void *)(v96 + v97), v91, v90);
              uint64_t v16 = 0LL;
              *(_DWORD *)(v52 + 16) += v90;
              uint64_t v51 = v93;
            }

            else
            {
              uint64_t v16 = 0LL;
            }
          }

          else
          {
            uint64_t v150 = 0LL;
            int v140 = *(unsigned __int8 *)(v52 + 33);
            *(_DWORD *)(v52 + 16) = 0;
            if (v53 >= 5)
            {
              if (!sqlite3_initialize())
              {
                uint64_t v54 = sub_18126F0AC(32 * v53);
                if (v54)
                {
                  int v55 = (char *)v54;
                  LODWORD(v53) = *(_DWORD *)(v52 + 24);
                  goto LABEL_103;
                }
              }

              uint64_t v16 = 7LL;
              LODWORD(v51) = v145;
LABEL_193:
              if (v45[4] != (_DWORD)v51) {
                goto LABEL_265;
              }
              if ((_DWORD)v51 == 1) {
                goto LABEL_195;
              }
              if ((int)v51 < 5)
              {
                memset(v151, 0, sizeof(v151));
                if ((_DWORD)v16) {
                  goto LABEL_265;
                }
                uint64_t v146 = v151;
                if ((int)v51 < 1)
                {
                  while (1)
                  {
LABEL_211:
                    uint64_t v106 = v146;
                    uint64_t v107 = *((void *)v146 + 2);
                    int v108 = v142[4];
                    do
                    {
                      if (v108 < 1)
                      {
                        uint64_t v115 = v2;
LABEL_232:
                        int v117 = 0;
                        uint64_t v118 = (uint64_t *)v146 + 3;
                        goto LABEL_233;
                      }

                      uint64_t v109 = 0LL;
                      int v110 = 1;
                      do
                      {
                        uint64_t v111 = &v106[3 * v109];
                        uint64_t v112 = v107 - *v142 - *(int *)(*(void *)&v142[2 * v109 + 6] + 24LL);
                        uint64_t v113 = *((void *)v111 + 2);
                        if (v113 > v107 || v113 < v112)
                        {
                          while (v113 < v112)
                          {
                            *((void *)v111 + 2) = *((void *)v111 + 3);
                            if (sub_181392B00( *(void *)v111,  *((_DWORD *)v111 + 2),  (int *)v111 + 3,  (uint64_t *)v111 + 3)) {
                              *((void *)v111 + 3) = 0x4000000000000000LL;
                            }
                            uint64_t v113 = *((void *)v111 + 2);
                            if (v113 == 0x4000000000000000LL) {
                              goto LABEL_257;
                            }
                          }

                          int v110 = 0;
                          if (v113 > v107) {
                            uint64_t v107 = v113;
                          }
                          int v108 = v142[4];
                          uint64_t v106 = v146;
                        }

                        ++v109;
                      }

                      while (v109 < v108);
                    }

                    while (!v110);
                    uint64_t v115 = v2;
                    if (v108 < 1) {
                      goto LABEL_232;
                    }
                    uint64_t v116 = 0LL;
                    while (2)
                    {
                      uint64_t v122 = (uint64_t *)&v146[3 * v116];
                      uint64_t v123 = v122[2];
                      uint64_t v124 = v122 + 4;
                      uint64_t v125 = v122[5];
                      int v126 = *(_DWORD *)(v125 + 8);
                      if (!v126 || v123 != *v124)
                      {
                        unint64_t v127 = (v126 + 15);
                        LODWORD(v128) = *(_DWORD *)(v125 + 12);
                        if (!(_DWORD)v128) {
                          LODWORD(v128) = 64;
                        }
                        unint64_t v128 = (int)v128;
                        do
                        {
                          unint64_t v129 = v128;
                          v128 *= 2LL;
                        }

                        while (v129 < v127);
                        uint64_t v130 = *(void *)v125;
                        if (!sqlite3_initialize())
                        {
                          uint64_t v131 = sub_18127D33C(v130, v129);
                          if (v131)
                          {
                            *(_DWORD *)(v125 + 12) = v129;
                            *(void *)uint64_t v125 = v131;
LABEL_238:
                            sub_181392CF4(v125, v124, v123);
                          }
                        }
                      }

                      ++v116;
                      uint64_t v121 = v142[4];
                      if (v116 < v121) {
                        continue;
                      }
                      break;
                    }

                    uint64_t v119 = *((void *)v146 + 3);
                    if ((int)v121 < 1)
                    {
                      int v117 = 0;
                    }

                    else
                    {
                      uint64_t v132 = 0LL;
                      int v117 = 0;
                      sqlite3_int64 v133 = (uint64_t *)v146 + 3;
                      do
                      {
                        uint64_t v135 = *v133;
                        v133 += 6;
                        uint64_t v134 = v135;
                        if (v135 < v119)
                        {
                          int v117 = v132;
                          uint64_t v119 = v134;
                        }

                        ++v132;
                      }

                      while (v142[4] != v132);
                      uint64_t v118 = (uint64_t *)&v146[3 * v117 + 1] + 1;
LABEL_233:
                      uint64_t v119 = *v118;
                    }

                    uint64_t v120 = &v146[3 * v117];
                    *((void *)v120 + 2) = v119;
                    if (sub_181392B00( *(void *)v120,  *((_DWORD *)v120 + 2),  (int *)v120 + 3,  (uint64_t *)v120 + 3)) {
                      *((void *)v120 + 3) = 0x4000000000000000LL;
                    }
                    uint64_t v2 = v115;
                    if (*((void *)v120 + 2) == 0x4000000000000000LL)
                    {
LABEL_257:
                      unsigned int v136 = v146;
                      int v137 = *(_DWORD *)(*((void *)v146 + 5) + 8LL);
                      if (v146 != v151)
                      {
                        uint64_t v138 = &off_18C4653A8;
                        if (!dword_18C465380) {
                          goto LABEL_263;
                        }
                        if ((void)xmmword_18C468B70) {
                          xmmword_18C465400(xmmword_18C468B70);
                        }
                        qword_18C468AC8[0] -= (int)off_18C4653B8(v146);
                        --qword_18C468B10;
                        off_18C4653A8(v146);
                        unsigned int v136 = (_OWORD *)xmmword_18C468B70;
                        if ((void)xmmword_18C468B70)
                        {
                          uint64_t v138 = &xmmword_18C465410;
LABEL_263:
                          (*v138)(v136);
                        }
                      }

                      uint64_t v16 = 0LL;
                      if (v137 <= 0)
                      {
LABEL_265:
                        int v46 = 0;
                        goto LABEL_266;
                      }

LABEL_195:
                      int v46 = 1;
                      goto LABEL_266;
                    }
                  }
                }
              }

              else
              {
                if ((_DWORD)v16) {
                  goto LABEL_265;
                }
                unsigned int v98 = v51;
                if (sqlite3_initialize() || (unint64_t v105 = (_OWORD *)sub_18126F0AC(48LL * v98)) == 0LL)
                {
                  uint64_t v16 = 7LL;
                  goto LABEL_265;
                }

                uint64_t v146 = v105;
                bzero(v105, 48LL * v98);
                if (v45[4] < 1) {
                  goto LABEL_211;
                }
              }

              uint64_t v99 = 0LL;
              double v100 = (uint64_t *)v146 + 3;
              do
              {
                uint64_t v101 = *(void *)&v142[2 * v99 + 6];
                uint64_t v102 = *(void *)(v101 + 8);
                int v103 = *(_DWORD *)(v101 + 16);
                *(_OWORD *)(v100 - 3) = 0u;
                *(_OWORD *)(v100 - 1) = 0u;
                *(v100 - 3) = v102;
                *((_DWORD *)v100 - 4) = v103;
                *(v100 - 1) = *v100;
                if (sub_181392B00(v102, v103, (int *)v100 - 3, v100))
                {
                  uint64_t v104 = 0x4000000000000000LL;
                  *double v100 = 0x4000000000000000LL;
                }

                else
                {
                  uint64_t v104 = *v100;
                }

                *(v100 - 1) = v104;
                *(_DWORD *)(v101 + 16) = 0;
                v100[2] = v101 + 8;
                ++v99;
                v100 += 6;
              }

              while (v99 < v142[4]);
              goto LABEL_211;
            }

            int v55 = (char *)v151;
LABEL_103:
            bzero(v55, 32LL * (int)v53);
            LODWORD(v56) = *(_DWORD *)(v52 + 24);
            if ((int)v56 < 1)
            {
LABEL_112:
              uint64_t v139 = (uint64_t *)(v52 + 8);
              do
              {
LABEL_113:
                uint64_t v67 = *((void *)v55 + 3);
                do
                {
                  uint64_t v68 = 0LL;
                  int v69 = 1;
                  do
                  {
                    int v70 = &v55[32 * v68];
                    uint64_t v71 = v67 + v68;
                    uint64_t v72 = (uint64_t *)(v70 + 24);
                    if (*((void *)v70 + 3) != v67 + v68)
                    {
                      int v73 = v70 + 17;
                      while (1)
                      {
                        uint64_t v74 = *v72;
                        if (*v72 >= v71) {
                          break;
                        }
                        if (sub_181392B00(*(void *)v70, *((_DWORD *)v70 + 2), (int *)v70 + 3, v72))
                        {
                          uint64_t v16 = 0LL;
                          *int v73 = 1;
                          goto LABEL_145;
                        }

                        if (*v73)
                        {
                          uint64_t v16 = 0LL;
LABEL_145:
                          uint64_t v2 = a2;
                          goto LABEL_148;
                        }
                      }

                      int v69 = 0;
                      if (v74 > v71) {
                        uint64_t v67 = v74 - v68;
                      }
                      LODWORD(v56) = *(_DWORD *)(v52 + 24);
                    }

                    ++v68;
                  }

                  while (v68 < (int)v56);
                  uint64_t v2 = a2;
                }

                while (!v69);
                if (!v140 || (v67 & 0x7FFFFFFF) == 0)
                {
                  LODWORD(v75) = *(_DWORD *)(v52 + 20);
                  unint64_t v76 = (*(_DWORD *)(v52 + 16) + 15);
                  if (v76 > v75)
                  {
                    if (!(_DWORD)v75) {
                      LODWORD(v75) = 64;
                    }
                    unint64_t v75 = (int)v75;
                    do
                    {
                      unint64_t v77 = v75;
                      v75 *= 2LL;
                    }

                    while (v77 < v76);
                    uint64_t v78 = *v139;
                    if (sqlite3_initialize() || (uint64_t v79 = sub_18127D33C(v78, v77)) == 0)
                    {
                      uint64_t v16 = 7LL;
                      goto LABEL_148;
                    }

                    *(_DWORD *)(v52 + 20) = v77;
                    *(void *)(v52 + 8) = v79;
                  }

                  sub_181392CF4((uint64_t)v139, &v150, v67);
                  LODWORD(v56) = *(_DWORD *)(v52 + 24);
                }
              }

              while ((int)v56 < 1);
              uint64_t v80 = 0LL;
              uint64_t v81 = v55 + 12;
              while (1)
              {
                if (sub_181392B00( *(void *)(v81 - 12),  *((_DWORD *)v81 - 1),  (int *)v81,  (uint64_t *)(v81 + 12)))
                {
                  uint64_t v16 = 0LL;
                  v81[5] = 1;
                  goto LABEL_148;
                }

                if (v81[5]) {
                  break;
                }
                ++v80;
                uint64_t v56 = *(int *)(v52 + 24);
                v81 += 32;
                if (v80 >= v56) {
                  goto LABEL_113;
                }
              }

              uint64_t v16 = 0LL;
              goto LABEL_148;
            }

            uint64_t v57 = 0LL;
            uint64_t v58 = 0LL;
            while (2)
            {
              int v149 = 0;
              uint64_t v148 = 0LL;
              uint64_t v59 = v52 + v57;
              if (!*(void *)(v52 + v57 + 56))
              {
                BOOL v62 = 0;
                uint64_t v64 = *(void *)(v59 + 48);
                uint64_t v61 = *(void *)(v64 + 8);
                uint64_t v148 = v61;
                int v63 = *(_DWORD *)(v64 + 16);
                int v149 = v63;
LABEL_109:
                uint64_t v65 = (uint64_t *)&v55[v57];
                *(_OWORD *)uint64_t v65 = 0u;
                *((_OWORD *)v65 + 1) = 0u;
                *uint64_t v65 = v61;
                *((_DWORD *)v65 + 2) = v63;
                if (sub_181392B00(v61, v63, (int *)&v55[v57 + 12], (uint64_t *)&v55[v57 + 24]))
                {
                  uint64_t v16 = 0LL;
                  *((_BYTE *)v65 + 17) = 1;
                  *((_BYTE *)v65 + 16) = v62;
                  goto LABEL_148;
                }

                int v66 = *((unsigned __int8 *)v65 + 17);
                *((_BYTE *)v65 + 16) = v62;
                if (v66)
                {
                  uint64_t v16 = 0LL;
                  goto LABEL_148;
                }

                ++v58;
                uint64_t v56 = *(int *)(v52 + 24);
                v57 += 32LL;
                if (v58 >= v56) {
                  goto LABEL_112;
                }
                continue;
              }

              break;
            }

            v147[0] = 0LL;
            v147[1] = 0LL;
            uint64_t v60 = sub_18139271C(v59 + 32, *(void *)(v2 + 24), (uint64_t)v147, &v148, &v149);
            uint64_t v61 = v148;
            if (!(_DWORD)v60)
            {
              BOOL v62 = v148 == v147[0];
              int v63 = v149;
              goto LABEL_109;
            }

            uint64_t v16 = v60;
            if (!v148) {
              goto LABEL_148;
            }
            unint64_t v88 = (void (**)(uint64_t))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_175;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v61);
            --qword_18C468B10;
            off_18C4653A8(v61);
            uint64_t v61 = xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              unint64_t v88 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_175:
              (*v88)(v61);
            }

uint64_t sub_18139271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    int v8 = 0;
    int v11 = (uint64_t *)v38;
    goto LABEL_26;
  }

  uint64_t v7 = a1;
  int v8 = 0;
  int v9 = 4;
  unint64_t v10 = 0x18C465000uLL;
  int v11 = (uint64_t *)v38;
  do
  {
    uint64_t v12 = *(void *)(v7 + 16);
    if (*(_BYTE *)(v12 + 20) || *(void *)v12 != a2 || !*(_DWORD *)(v12 + 16)) {
      goto LABEL_4;
    }
    if (v8 == v9)
    {
      if (sqlite3_initialize() || (int v13 = (uint64_t *)sub_18126F0AC((uint64_t)v8 << 6)) == 0LL)
      {
        uint64_t v20 = 7LL;
        goto LABEL_54;
      }

      uint64_t v14 = v13;
      uint64_t v15 = v8;
      memcpy(v13, v11, 32LL * v8);
      int v9 = 2 * v8;
      uint64_t v16 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          (*(void (**)(void))(v10 + 1024))();
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
        --qword_18C468B10;
        off_18C4653A8(v11);
        int v11 = (uint64_t *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70)
        {
          unint64_t v10 = 0x18C465000LL;
          goto LABEL_20;
        }

        uint64_t v16 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
        unint64_t v10 = 0x18C465000LL;
      }

      (*v16)(v11);
    }

    else
    {
      uint64_t v15 = v8;
      uint64_t v14 = v11;
    }

uint64_t sub_181392B00(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  if ((int)v5 >= a2)
  {
LABEL_28:
    *a4 = -1LL;
    return 1LL;
  }

  uint64_t v8 = *a4;
  int v9 = (char *)(a1 + v5);
  unsigned int v10 = *v9;
  if (*v9 < 0)
  {
    int v12 = v9[1];
    if (v9[1] < 0)
    {
      int v13 = v9[2];
      if (v13 < 0)
      {
        int v11 = sub_18138BFCC(v9, &v28);
        unsigned int v10 = v28 & 0x7FFFFFFF;
      }

      else
      {
        unsigned int v10 = v13 & 0x7F | (v10 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
        int v11 = 3;
      }
    }

    else
    {
      unsigned int v10 = ((v10 & 0x7F) << 7) | v12;
      int v11 = 2;
    }
  }

  else
  {
    int v11 = 1;
  }

  int v14 = v11 + v5;
  if (v10 > 1)
  {
    uint64_t v18 = v8 & 0x7FFFFFFF00000000LL | (v10 + (_DWORD)v8 + 2147483646) & 0x7FFFFFFF;
LABEL_30:
    uint64_t result = 0LL;
    *a4 = v18;
    goto LABEL_31;
  }

  if (v10)
  {
    uint64_t v15 = (char *)(a1 + v14);
    unint64_t v16 = *v15;
    if (*v15 < 0)
    {
      unsigned int v20 = v15[1];
      if (v15[1] < 0)
      {
        int v21 = v15[2];
        if (v21 < 0)
        {
          int v17 = sub_18138BFCC(v15, &v28);
          unint64_t v16 = v28 & 0x7FFFFFFF;
        }

        else
        {
          unint64_t v16 = v21 & 0x7F | ((_DWORD)v16 << 14) & 0x1FC07F | ((v20 & 0x7F) << 7);
          int v17 = 3;
        }
      }

      else
      {
        unint64_t v16 = ((v16 & 0x7F) << 7) | v20;
        int v17 = 2;
      }
    }

    else
    {
      int v17 = 1;
    }

    int v22 = v17 + v14;
    uint64_t v23 = (char *)(a1 + v22);
    unsigned int v24 = *v23;
    if (*v23 < 0)
    {
      int v26 = v23[1];
      if (v23[1] < 0)
      {
        int v27 = v23[2];
        if (v27 < 0)
        {
          int v25 = sub_18138BFCC(v23, &v28);
          unsigned int v24 = v28 & 0x7FFFFFFF;
        }

        else
        {
          unsigned int v24 = v27 & 0x7F | (v24 << 14) & 0x1FC07F | ((v26 & 0x7F) << 7);
          int v25 = 3;
        }
      }

      else
      {
        unsigned int v24 = ((v24 & 0x7F) << 7) | v26;
        int v25 = 2;
      }
    }

    else
    {
      int v25 = 1;
    }

    if (v24 <= 1) {
      goto LABEL_28;
    }
    int v14 = v25 + v22;
    uint64_t v18 = (v16 << 32) | (v24 + 2147483646) & 0x7FFFFFFF;
    goto LABEL_30;
  }

  uint64_t result = 0LL;
LABEL_31:
  *a3 = v14;
  return result;
}

uint64_t sub_181392CF4(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if (*a2 <= a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = a3 & 0x7FFFFFFF00000000LL;
    if ((a3 & 0x7FFFFFFF00000000LL) == (*a2 & 0x7FFFFFFF00000000LL))
    {
      int v7 = *(_DWORD *)(result + 8);
      uint64_t v6 = *a2;
    }

    else
    {
      uint64_t v8 = *(void *)result;
      uint64_t v9 = *(int *)(result + 8);
      *(_DWORD *)(result + 8) = v9 + 1;
      *(_BYTE *)(v8 + v9) = 1;
      unsigned int v10 = (int8x8_t *)(*(void *)result + *(int *)(result + 8));
      if ((unint64_t)a3 >> 39)
      {
        if ((unint64_t)a3 >> 46)
        {
          int v11 = sub_181308E00(v10, a3 >> 32);
        }

        else
        {
          v10->i8[0] = (HIDWORD(a3) >> 7) | 0x80;
          v10->i8[1] = BYTE4(a3) & 0x7F;
          int v11 = 2;
        }
      }

      else
      {
        v10->i8[0] = BYTE4(a3);
        int v11 = 1;
      }

      int v7 = *(_DWORD *)(v5 + 8) + v11;
      *(_DWORD *)(v5 + 8) = v7;
    }

    int v12 = (int8x8_t *)(*(void *)v5 + v7);
    unint64_t v13 = a3 - v6 + 2;
    if (v13 > 0x7F)
    {
      if (v13 >> 14)
      {
        uint64_t result = sub_181308E00(v12, v13);
      }

      else
      {
        v12->i8[0] = (v13 >> 7) | 0x80;
        v12->i8[1] = v13 & 0x7F;
        uint64_t result = 2LL;
      }
    }

    else
    {
      v12->i8[0] = v13;
      uint64_t result = 1LL;
    }

    *(_DWORD *)(v5 + 8) += result;
    *a2 = a3;
  }

  return result;
}

uint64_t sub_181392E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  LODWORD(v5) = *(_DWORD *)(a2 + 40);
  while (2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    int v6 = 1;
    uint64_t v7 = 6LL;
    uint64_t v8 = v4;
    do
    {
      uint64_t v10 = *(void *)(a2 + 8 * v7);
      uint64_t v11 = *(void *)(v10 + 24);
      if (*(_DWORD *)(a1 + 24))
      {
        if (v8 >= v11) {
          goto LABEL_10;
        }
      }

      else if (v8 <= v11)
      {
        goto LABEL_10;
      }

      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 16))( a1,  *(void *)(a2 + 8 * v7),  1LL,  v8);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a2 + 8) = 0;
        return result;
      }

uint64_t sub_181392F34(uint64_t result)
{
  *(void *)(result + 4) = 1LL;
  if (*(int *)(result + 40) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0LL;
    uint64_t v3 = result + 48;
    do
      uint64_t result = sub_181392F34(*(void *)(v3 + 8 * v2++));
    while (v2 < *(int *)(v1 + 40));
  }

  return result;
}

uint64_t sub_181392F90(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 4 || *(_DWORD *)result == 9)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v4 == 1)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = v4 & 0xFFFFFFFE;
      uint64_t v7 = (uint64_t *)(v3 + 32);
      uint64_t v8 = v5;
      do
      {
        uint64_t v9 = *v7;
        *(_DWORD *)(*(v7 - 1) + 16) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v7 += 2;
        v8 -= 2LL;
      }

      while (v8);
      if (v5 == v4) {
        return result;
      }
    }

    uint64_t v10 = (uint64_t *)(v3 + 8 * v5 + 24);
    uint64_t v11 = v4 - v5;
    do
    {
      uint64_t v12 = *v10++;
      *(_DWORD *)(v12 + 16) = 0;
      --v11;
    }

    while (v11);
    return result;
  }

  if (*(int *)(result + 40) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = sub_181392F90(*(void *)(v1 + 48 + 8 * v6++));
    while (v6 < *(int *)(v1 + 40));
  }

  return result;
}

uint64_t sub_18139305C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  while (1)
  {
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6) {
      goto LABEL_17;
    }
    if (*(_DWORD *)(v4 + 4)) {
      goto LABEL_16;
    }
    uint64_t v7 = *(void *)(v5 + 24);
    uint64_t v8 = *(void *)(v4 + 24);
    if (!*(_DWORD *)(a1 + 24)) {
      break;
    }
    if (v7 > v8) {
      goto LABEL_16;
    }
    if (v7 < v8) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v9 = 0LL;
    if (*(_DWORD *)(v4 + 8)) {
      goto LABEL_18;
    }
LABEL_14:
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v5 + 16))(a1, v5, 0LL, 0LL);
    if ((_DWORD)v10)
    {
      uint64_t v9 = v10;
      int v6 = *(_DWORD *)(v5 + 4);
      goto LABEL_19;
    }
  }

  if (v7 < v8)
  {
LABEL_16:
    int v6 = 0;
LABEL_17:
    uint64_t v9 = 0LL;
    goto LABEL_19;
  }

  if (v7 <= v8) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v4, 1LL);
  int v6 = *(_DWORD *)(v5 + 4);
  if (*(_DWORD *)(v4 + 4) | v6) {
    goto LABEL_19;
  }
  if (*(void *)(v5 + 24) == *(void *)(v4 + 24) && !*(_DWORD *)(v4 + 8)) {
    goto LABEL_14;
  }
LABEL_18:
  int v6 = 0;
LABEL_19:
  *(_DWORD *)(a2 + 4) = v6;
  int v11 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v5 + 8);
  *(void *)(a2 + 24) = *(void *)(v5 + 24);
  if (v11) {
    sub_181392F90(v4);
  }
  return v9;
}

uint64_t sub_181393174(uint64_t a1, char a2, char *__s, int a4)
{
  uint64_t result = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)result)
  {
    uint64_t v7 = *(void *)a1;
    if (a4 >= 0x8000) {
      int v8 = 0x8000;
    }
    else {
      int v8 = a4;
    }
    if (v7)
    {
      int v9 = *(_DWORD *)(v7 + 24);
      if ((a2 & 1) != 0 && v9 >= 1)
      {
        if (!sqlite3_initialize())
        {
          size_t v10 = v8;
          uint64_t v11 = v8 + 49LL;
          uint64_t v12 = (void *)sub_18126F0AC(v11);
          if (v12)
          {
            unint64_t v13 = v12;
            bzero(v12, v11);
            v13[1] = v13 + 6;
            memcpy(v13 + 6, __s, v10);
            uint64_t result = 0LL;
            uint64_t v14 = v7 + 32LL * *(int *)(v7 + 24);
            v13[3] = *(void *)(v14 + 24);
            *(void *)(v14 + 24) = v13;
LABEL_28:
            *(_DWORD *)(a1 + 8) = result;
            return result;
          }
        }

uint64_t sub_181393304(uint64_t result, uint64_t a2, int *a3, void *a4)
{
  if (*(_DWORD *)(result + 16)) {
    return result;
  }
  uint64_t v7 = result;
  if (*(_DWORD *)a2 != 4 && *(_DWORD *)a2 != 9)
  {
    if (*(int *)(a2 + 40) >= 1)
    {
      uint64_t v18 = 0LL;
      do
        uint64_t result = sub_181393304(v7, *(void *)(a2 + 48 + 8 * v18++), a3, a4);
      while (v18 < *(int *)(a2 + 40));
    }

    return result;
  }

  uint64_t v9 = *(void *)(a2 + 32);
  size_t v10 = *(int **)(v9 + 8);
  if (v10)
  {
    int v11 = *v10;
    if (*v10 < 1)
    {
      int *v10 = 0;
LABEL_27:
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 16) = 0LL;
      return result;
    }

    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    while (v14 < *a3)
    {
      int v15 = v10[v12 + 1];
      int v16 = a3[v14 + 1];
      if (v15 == v16)
      {
        uint64_t v17 = &v10[v13++];
        v17[1] = v15;
        ++v14;
        ++v12;
        int v11 = *v10;
        if (v12 >= *v10) {
          break;
        }
      }

      else
      {
        if (v15 <= v16) {
          ++v12;
        }
        else {
          ++v14;
        }
        if (v12 >= v11) {
          break;
        }
      }
    }

    int *v10 = v13;
    if (!v13) {
      goto LABEL_27;
    }
  }

  else if (*a4)
  {
    *(void *)(v9 + 8) = a3;
    *a4 = 0LL;
  }

  else
  {
    if (a3)
    {
      int v19 = *a3;
      uint64_t result = sqlite3_initialize();
      if ((_DWORD)result || (uint64_t v21 = 4LL * (v19 - 1) + 8, (result = sub_18126F0AC(v21)) == 0))
      {
        unsigned int v20 = 0LL;
        if ((v19 & 0x80000000) == 0) {
          *(_DWORD *)(v7 + 16) = 7;
        }
      }

      else
      {
        unsigned int v20 = (void *)result;
        bzero((void *)result, v21);
        uint64_t result = (uint64_t)memcpy(v20, a3, v21);
      }
    }

    else
    {
      unsigned int v20 = 0LL;
    }

    *(void *)(v9 + 8) = v20;
  }

  return result;
}

uint64_t sub_1813934A4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 9 || v4 == 4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    int v7 = *(_DWORD *)(v6 + 16);
    if (v7 < 1) {
      goto LABEL_28;
    }
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8 + 24);
      int v10 = *(_DWORD *)(v9 + 24);
      if (!v10) {
        break;
      }
      if (v10 < 1) {
        goto LABEL_27;
      }
      uint64_t v45 = v8;
      uint64_t v46 = *(void *)(v6 + 8 * v8 + 24);
      uint64_t v11 = 0LL;
      do
      {
        int v12 = 0;
        uint64_t v47 = v11;
        int v13 = (_BYTE *)(v9 + 32 * v11 + 32);
        int v14 = v13;
        do
        {
          uint64_t v15 = *((void *)v14 + 2);
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 24);
            sub_18138D5A4(v15);
            uint64_t v17 = *(void **)(v16 + 64);
            if (v17)
            {
              *(void *)(v16 + 64) = 0LL;
              uint64_t v18 = (sqlite3_stmt *)v17[3];
              int v19 = (void *)v17[4];
              uint64_t v20 = v19[3];
              if (v20) {
                xmmword_18C465400(v20);
              }
              sub_1812F20DC(v19, v17);
              uint64_t v21 = v19[3];
              if (v21) {
                xmmword_18C465410(v21);
              }
              sqlite3_finalize(v18);
            }

            *((void *)v14 + 2) = 0LL;
          }

          int v22 = strlen(*((const char **)v14 + 1));
          uint64_t v23 = sub_181393898( *(_DWORD **)a1,  *((unsigned __int8 **)v14 + 1),  v22,  (*v13 != 0) | (2 * (*(_DWORD *)(a1 + 24) != 0)),  *(void *)(v6 + 8),  (uint64_t *)v14 + 2);
          if ((_DWORD)v23) {
            return v23;
          }
          uint64_t v24 = *((void *)v14 + 2);
          int v14 = (_BYTE *)*((void *)v14 + 3);
          if (!*(_BYTE *)(v24 + 20)) {
            int v12 = 1;
          }
        }

        while (v14);
        if (!v12) {
          goto LABEL_52;
        }
        uint64_t v9 = v46;
        uint64_t v11 = v47 + 1;
      }

      while (v47 + 1 < *(int *)(v46 + 24));
      int v7 = *(_DWORD *)(v6 + 16);
      uint64_t v8 = v45;
LABEL_27:
      if (++v8 >= v7)
      {
LABEL_28:
        *(_DWORD *)(a2 + 4) = 0;
LABEL_53:
        switch(*(_DWORD *)a2)
        {
          case 1:
            uint64_t v35 = *(void *)(a2 + 48);
            uint64_t v36 = *(unsigned int *)(a2 + 40);
            uint64_t v37 = v36 - 1;
            uint64_t v38 = a2 + 56;
            break;
          case 2:
            return sub_181392E18(a1, a2);
          case 4:
            uint64_t v42 = *(void *)(*(void *)(a2 + 32) + 24LL);
            uint64_t v43 = *(void *)(v42 + 48);
            int v44 = *(_DWORD *)(v43 + 16);
            *(_DWORD *)(v42 + 16) = v44;
            if (!*(_DWORD *)(*(void *)(a1 + 8) + 92LL)) {
              *(void *)(v42 + 8) = *(void *)(v43 + 8);
            }
            uint64_t v25 = 0LL;
            *(void *)(a2 + 24) = *(void *)v43;
            *(_DWORD *)(a2 + 8) = v44 == 0;
            return v25;
          case 9:
            return sub_1813918E4(a1, a2);
          default:
            return sub_18139305C(a1, a2);
        }

        while (2)
        {
          uint64_t v39 = *(void *)v38;
          if (!*(_DWORD *)(*(void *)v38 + 4LL))
          {
            if (*(_DWORD *)(v35 + 4)) {
              goto LABEL_56;
            }
            uint64_t v40 = *(void *)(v35 + 24);
            uint64_t v41 = *(void *)(v39 + 24);
            if (*(_DWORD *)(a1 + 24))
            {
              if (v40 <= v41)
              {
                if (v40 < v41) {
                  goto LABEL_56;
                }
LABEL_66:
                if (!*(_DWORD *)(v39 + 8)) {
LABEL_56:
                }
                  uint64_t v35 = *(void *)v38;
              }
            }

            else if (v40 >= v41)
            {
              if (v40 <= v41) {
                goto LABEL_66;
              }
              goto LABEL_56;
            }
          }

          v38 += 8LL;
          if (!--v37)
          {
LABEL_74:
            uint64_t v25 = 0LL;
            *(void *)(a2 + 24) = *(void *)(v35 + 24);
            *(void *)(a2 + 4) = *(void *)(v35 + 4);
            return v25;
          }

          continue;
        }
      }
    }

uint64_t sub_181393898(_DWORD *a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = 0LL;
  uint64_t v11 = a1 + 15;
  uint64_t v10 = *(void *)a1;
  uint64_t v110 = 0LL;
  unint64_t v12 = (a3 + 1);
  if (a3 == -1) {
    goto LABEL_2;
  }
  uint64_t v20 = 64LL;
  do
  {
    unint64_t v21 = v20;
    v20 *= 2LL;
  }

  while (v21 < v12);
  if (sqlite3_initialize() || (uint64_t v23 = sub_18127D33C(0LL, v21)) == 0)
  {
    uint64_t result = 7LL;
    goto LABEL_108;
  }

  uint64_t v9 = (unsigned __int8 *)v23;
  if (a3 < 1)
  {
LABEL_2:
    uint64_t v107 = a5;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_20;
    }
LABEL_3:
    uint64_t v16 = *(unsigned int *)(v10 + 48);
    if ((int)v16 < 1)
    {
      int v14 = 0;
      int v15 = 1;
    }

    else
    {
      uint64_t v17 = 0LL;
      int v14 = 0;
      int v15 = v16 + 1;
      while (1)
      {
        int v18 = *(_DWORD *)(*(void *)(v10 + 56) + 4 * v17);
        if (v18 == v13) {
          break;
        }
        ++v17;
        if (v18 == v13 + 1) {
          int v14 = v17;
        }
        if (v16 == v17) {
          goto LABEL_20;
        }
      }

      int v15 = v17 + 1;
    }

    goto LABEL_20;
  }

  memcpy((void *)(v23 + 1), a2, a3);
  uint64_t v107 = a5;
  if ((a4 & 1) != 0)
  {
    int v88 = 0;
    int v13 = 0;
    do
    {
      LODWORD(v89) = v88 + 1;
      if (v88 + 1 < a3 && a2[v88] >= 0xC0u)
      {
        uint64_t v89 = (int)v89;
        while ((a2[v89] & 0xC0) == 0x80)
        {
          if (a3 == ++v89)
          {
            ++v13;
            goto LABEL_3;
          }
        }
      }

      ++v13;
      int v88 = v89;
    }

    while ((int)v89 < a3);
    goto LABEL_3;
  }

  int v14 = 0;
  int v15 = 0;
LABEL_20:
  if (v15 <= *(_DWORD *)(v10 + 48))
  {
    uint64_t v32 = sub_18138B020((uint64_t)a1);
    *uint64_t v9 = v15 + 48;
    if (v32)
    {
      uint64_t v33 = v32;
      sub_18139449C((uint64_t)a1, (uint64_t)v32, a4 | 0x10, v107, v9, v12, 0xFFFFFFFF, 0, &v110);
      sub_18138A584(v33);
      uint64_t v34 = v110;
    }

    else
    {
      uint64_t v34 = 0LL;
    }

    uint64_t v35 = a6;
    goto LABEL_85;
  }

  uint64_t v24 = (uint64_t)a1;
  int v25 = *(_DWORD *)(*(void *)a1 + 92LL);
  BOOL v26 = v25 == 1;
  if (v25 == 1) {
    int v27 = sub_181397818;
  }
  else {
    int v27 = sub_181398280;
  }
  uint64_t v28 = sub_181397828;
  if (v26) {
    uint64_t v28 = sub_1813974A8;
  }
  uint64_t v102 = (void (*)(void, void, void, void))v28;
  if (v26) {
    uint64_t v29 = 1LL;
  }
  else {
    uint64_t v29 = 15LL;
  }
  uint64_t v109 = v29;
  if (v26) {
    uint64_t v30 = 32LL;
  }
  else {
    uint64_t v30 = 120LL;
  }
  uint64_t v104 = v27;
  unint64_t v105 = v30;
  if (a1[15])
  {
    uint64_t v31 = 0LL;
  }

  else if (sqlite3_initialize() || (uint64_t v36 = (uint64_t *)sub_18126F0AC((16 * v105))) == 0LL)
  {
    uint64_t v31 = 0LL;
    *uint64_t v11 = 7;
  }

  else
  {
    uint64_t v31 = v36;
    bzero(v36, (16 * v105));
  }

  uint64_t v37 = sub_18138B020((uint64_t)a1);
  uint64_t v38 = (uint64_t)v37;
  if (!v31 || !v37)
  {
    sub_18138A584(v37);
    uint64_t v35 = a6;
    if (v31) {
      goto LABEL_74;
    }
    goto LABEL_80;
  }

  char v97 = a4;
  uint64_t v113 = 0LL;
  int v111 = 1;
  __src[0] = 0LL;
  __src[1] = 0LL;
  uint64_t v106 = v31;
  uint64_t v99 = v37;
  if (v14)
  {
    *uint64_t v9 = 48;
    sub_18139449C((uint64_t)a1, (uint64_t)v37, 0x30u, v107, v9, v12, 0xFFFFFFFF, 0, (uint64_t *)&v113);
    uint64_t v39 = v113;
    sub_181395B94((uint64_t)v11, (uint64_t)v113);
    if (a1[15])
    {
      uint64_t v40 = 0LL;
    }

    else
    {
      uint64_t v40 = 0LL;
      do
      {
        if (*((_BYTE *)v39 + 20)) {
          break;
        }
        ((void (*)(void *, void *))v39[7])(v39, &v39[17 * *(unsigned __int16 *)(v39[11] + 4LL) + 12]);
        if (*((_DWORD *)v39 + 4))
        {
          v104((uint64_t)a1, *v39 - v40, (uint64_t)v39, (uint64_t)__src);
          uint64_t v40 = *v39;
        }

        sub_181398408((uint64_t)a1, (uint64_t)v39, &v114);
      }

      while (!a1[15]);
    }

    sub_18138D5A4((uint64_t)v39);
    uint64_t v38 = (uint64_t)v99;
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  *uint64_t v9 = v14 + 48;
  sub_18139449C((uint64_t)a1, v38, 0x38u, v107, v9, v12, 0xFFFFFFFF, 0, (uint64_t *)&v113);
  uint64_t v41 = v113;
  sub_181395B94((uint64_t)v11, (uint64_t)v113);
  int v108 = v11;
  unsigned int v98 = v9;
  if (!a1[15])
  {
    size_t __n = (int)v12;
    do
    {
      if (*((_BYTE *)v41 + 20)) {
        break;
      }
      int v66 = &v41[17 * *(unsigned __int16 *)(v41[11] + 4LL)];
      int v67 = *((_DWORD *)v66 + 52);
      uint64_t v68 = (const void *)v66[25];
      ((void (*)(void *, void *))v41[7])(v41, v66 + 12);
      if (v111)
      {
        if (v67 <= a3 || memcmp(v9, v68, __n)) {
          break;
        }
      }

      if (*((_DWORD *)v41 + 4))
      {
        if (*v41 <= v40)
        {
          int v69 = (int)__src[1];
          if (SLODWORD(__src[1]) >= 1)
          {
            unsigned int v70 = *v11;
            int v71 = v109;
            if (*v11)
            {
              uint64_t v40 = 0LL;
            }

            else
            {
              int v72 = 0;
              unsigned int v73 = v109;
              do
              {
                unint64_t v75 = v70;
                uint64_t v76 = v73;
                unint64_t v77 = v76 - v70;
                unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v79 = 2LL * v70;
                uint64_t v80 = &v106[v79 + 3];
                uint64_t v81 = &v106[v79];
                unint64_t v82 = (v72 * v71 + v71);
                unint64_t v83 = v75;
                while (*((_DWORD *)v81 + 2))
                {
                  ++v83;
                  v81 += 2;
                  if (v83 >= v82)
                  {
                    if ((_DWORD)v82 != (_DWORD)v76) {
                      goto LABEL_125;
                    }
                    goto LABEL_137;
                  }
                }

                int v69 = 0;
                __int128 v84 = *(_OWORD *)__src;
                __int128 v114 = *(_OWORD *)__src;
                *(_OWORD *)int __src = *(_OWORD *)v81;
                *(_OWORD *)uint64_t v81 = v84;
                LODWORD(__src[1]) = 0;
                if ((_DWORD)v82 != (_DWORD)v83) {
                  goto LABEL_125;
                }
LABEL_137:
                v102(a1, __src, v109, &v106[2 * (v72 * v71)]);
                unint64_t v85 = v75;
                if (v77 < 2) {
                  goto LABEL_141;
                }
                unint64_t v85 = (v77 & 0xFFFFFFFFFFFFFFFELL) + v75;
                do
                {
                  *((_DWORD *)v80 - 4) = 0;
                  *(_DWORD *)uint64_t v80 = 0;
                  v80 += 4;
                  v78 -= 2LL;
                }

                while (v78);
                if (v77 != (v77 & 0xFFFFFFFFFFFFFFFELL))
                {
LABEL_141:
                  unint64_t v86 = &v106[2 * v85 + 1];
                  do
                  {
                    *(_DWORD *)unint64_t v86 = 0;
                    v86 += 2;
                    ++v85;
                  }

                  while (v85 < v82);
                }

                int v69 = (int)__src[1];
LABEL_125:
                ++v72;
                uint64_t v11 = v108;
                int v71 = v109;
                unsigned int v70 = v75 + v109;
                v73 += v109;
                if (*v108) {
                  BOOL v74 = 1;
                }
                else {
                  BOOL v74 = v69 == 0;
                }
              }

              while (!v74);
              uint64_t v40 = 0LL;
              uint64_t v9 = v98;
              uint64_t v24 = (uint64_t)a1;
            }
          }
        }

        uint64_t v41 = v113;
        v104(v24, *v113 - v40, (uint64_t)v113, (uint64_t)__src);
        uint64_t v40 = *v41;
      }

      else
      {
        uint64_t v41 = v113;
      }

      sub_181398408(v24, (uint64_t)v41, &v111);
    }

    while (!*(_DWORD *)(v24 + 60));
  }

  unint64_t v42 = 0LL;
  uint64_t v43 = v109;
  int v44 = v106;
  while (2)
  {
    if (!*v11) {
      v102(a1, __src, v43, &v106[2 * v42]);
    }
    unint64_t v46 = v42 + v43;
    uint64_t v47 = v44;
    do
    {
      uint64_t v48 = *v47;
      if (*v47)
      {
        int v49 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_57;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v48);
        --qword_18C468B10;
        off_18C4653A8(v48);
        uint64_t v48 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          int v49 = &xmmword_18C465410;
LABEL_57:
          (*v49)(v48);
        }
      }

      *uint64_t v47 = 0LL;
      v47[1] = 0LL;
      v47 += 2;
      ++v42;
    }

    while (v42 < v46);
    v44 += 2 * v109;
    unint64_t v42 = v46;
    BOOL v45 = v46 >= v105;
    uint64_t v11 = v108;
    uint64_t v43 = v109;
    if (!v45) {
      continue;
    }
    break;
  }

  sub_18138D5A4((uint64_t)v113);
  uint64_t v9 = v98;
  if (*v108) {
    goto LABEL_66;
  }
  uint64_t v87 = SLODWORD(__src[1]);
  if (sqlite3_initialize() || (size_t v90 = (_DWORD *)sub_18126F0AC(v87 + 24)) == 0LL)
  {
  }

  else
  {
    __int128 v91 = v90;
    bzero(v90, v87 + 24);
    *(void *)__int128 v91 = v91 + 4;
    size_t v92 = SLODWORD(__src[1]);
    v91[2] = __src[1];
    v91[3] = v92;
    if ((_DWORD)v92) {
      memcpy(v91 + 4, __src[0], v92);
    }
    if (!*v108)
    {
      if (sqlite3_initialize() || (uint64_t v94 = sub_18126F0AC(376LL)) == 0)
      {
        *int v108 = 7;
      }

      else
      {
        uint64_t v95 = v94;
        *(void *)(v94 + 368) = 0LL;
        *(_OWORD *)(v94 + 336) = 0u;
        *(_OWORD *)(v94 + 352) = 0u;
        *(_OWORD *)(v94 + 304) = 0u;
        *(_OWORD *)(v94 + 320) = 0u;
        *(_OWORD *)(v94 + 272) = 0u;
        *(_OWORD *)(v94 + 288) = 0u;
        *(_OWORD *)(v94 + 240) = 0u;
        *(_OWORD *)(v94 + 256) = 0u;
        *(_OWORD *)(v94 + 208) = 0u;
        *(_OWORD *)(v94 + 224) = 0u;
        *(_OWORD *)(v94 + 176) = 0u;
        *(_OWORD *)(v94 + 192) = 0u;
        *(_OWORD *)(v94 + 144) = 0u;
        *(_OWORD *)(v94 + 160) = 0u;
        *(_OWORD *)(v94 + 112) = 0u;
        *(_OWORD *)(v94 + 128) = 0u;
        *(_OWORD *)(v94 + 80) = 0u;
        *(_OWORD *)(v94 + 96) = 0u;
        *(_OWORD *)(v94 + 48) = 0u;
        *(_OWORD *)(v94 + 64) = 0u;
        *(_OWORD *)(v94 + 16) = 0u;
        *(_OWORD *)(v94 + 32) = 0u;
        *(_OWORD *)uint64_t v94 = 0u;
        *(_DWORD *)(v94 + 64) = 2;
        *(void *)(v94 + 88) = v94 + 368;
        *(void *)(v94 + 24) = a1;
        *(void *)(v94 + 56) = nullsub_14;
        *(_DWORD *)(v94 + 240) = 1;
        if ((int)v91[3] < 1)
        {
          *(_BYTE *)(v94 + 20) = 1;
        }

        else
        {
          *(void *)(v94 + 248) = v91;
          *(void *)(v94 + 264) = sub_18138BFCC(*(char **)v91, (unint64_t *)(v94 + 352));
          *(_DWORD *)(v95 + 308) = v91[2];
          *(_WORD *)(*(void *)(v95 + 88) + 4LL) = 1;
          if ((v97 & 2) != 0)
          {
            *(_DWORD *)(v95 + 68) = 1;
            *(_DWORD *)(v95 + 240) |= 2u;
            sub_1813915A4(a1, v95 + 232);
          }

          else
          {
            sub_181391240((uint64_t)a1, v95 + 232);
          }

          __int128 v91 = 0LL;
          uint64_t v11 = v108;
        }

        if ((*(_BYTE *)(v95 + 240) & 2) != 0)
        {
          uint64_t v96 = sub_181396534;
        }

        else if (*(_DWORD *)(*(void *)a1 + 92LL) == 1)
        {
          uint64_t v96 = sub_1813965E8;
        }

        else
        {
          uint64_t v96 = sub_1813969F4;
        }

        *(void *)(v95 + 288) = v96;
        uint64_t v110 = v95;
        if (!v91) {
          goto LABEL_66;
        }
      }
    }

    uint64_t v93 = (uint64_t (**)(void *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_172:
      (*v93)(v91);
      goto LABEL_66;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v91);
    --qword_18C468B10;
    off_18C4653A8(v91);
    __int128 v91 = (_DWORD *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v93 = (uint64_t (**)(void *))&xmmword_18C465410;
      goto LABEL_172;
    }
  }

uint64_t sub_18139449C( uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, uint64_t *a9)
{
  uint64_t v13 = result;
  int v14 = a9;
  int v15 = *(_DWORD *)(result + 60);
  if (v15)
  {
    int v16 = 0;
  }

  else if ((a7 & 0x80000000) != 0)
  {
    if ((a3 & 0x40) != 0 || *(void *)(result + 24) == 0LL) {
      int v16 = *(_DWORD *)(a2 + 24);
    }
    else {
      int v16 = *(_DWORD *)(a2 + 24) + 1;
    }
  }

  else if (*(_DWORD *)(a2 + 16LL * a7 + 36) >= a8)
  {
    int v16 = a8;
  }

  else
  {
    int v16 = *(_DWORD *)(a2 + 16LL * a7 + 36);
  }

  int v18 = 2;
  do
  {
    unsigned int v19 = v18;
    v18 *= 2;
  }

  while ((int)v19 < v16);
  if (v15) {
    goto LABEL_303;
  }
  unint64_t v237 = (int *)(result + 60);
  uint64_t v20 = 4LL * v19 + 136LL * (int)(v19 - 1) + 232;
  uint64_t result = sqlite3_initialize();
  if ((_DWORD)result || (uint64_t result = sub_18126F0AC(v20)) == 0)
  {
    if (v20 >= 1) {
      int *v237 = 7;
    }
    goto LABEL_303;
  }

  uint64_t v229 = result;
  uint64_t v21 = v13;
  bzero((void *)result, v20);
  *(_DWORD *)(v229 + 64) = v19;
  uint64_t v22 = v229;
  *(void *)(v229 + 88) = v229 + 136LL * v19 + 96;
  *(void *)(v229 + 24) = v21;
  *(void *)(v229 + 56) = nullsub_14;
  *a9 = v229;
  *(_DWORD *)(v229 + 68) = (a3 >> 1) & 1;
  *(_BYTE *)(v229 + 72) = (a3 & 0x10) != 0;
  *(void *)(v229 + 48) = a4;
  if ((a3 & 0x20) == 0) {
    sub_181395B94((uint64_t)v237, v229);
  }
  if (*v237)
  {
LABEL_302:
    uint64_t result = sub_18138D5A4(v22);
LABEL_303:
    *int v14 = 0LL;
    return result;
  }

  int v235 = (_DWORD *)v21;
  if ((a7 & 0x80000000) == 0)
  {
    if (v16 >= 1)
    {
      uint64_t v23 = v16 - 1LL;
      uint64_t v24 = v229 + 96;
      do
      {
        sub_181395FD4((_DWORD *)v21, *(void *)(a2 + 16LL * a7 + 40) + 56LL * v23--, v24);
        v24 += 136LL;
      }

      while (v23 != -1);
    }

    goto LABEL_301;
  }

  LODWORD(v25) = 0;
  unint64_t v26 = a2 + 32;
  unint64_t v217 = a2 + 32 + 16LL * *(int *)(a2 + 28);
  if ((a3 & 0x40) == 0 && *(void *)(v21 + 24))
  {
    sub_181395CA0(v21, a5, a6, a3, v229 + 96);
    LODWORD(v25) = 1;
  }

  int v27 = a5;
  if (v26 < v217)
  {
    int v225 = a3 & 8;
    int v232 = (uint64_t **)(v21 + 104);
    char v218 = a3;
    while (1)
    {
      uint64_t v28 = *(unsigned int *)(v26 + 4);
LABEL_33:
      v26 += 16LL;
      if (v26 >= v217) {
        goto LABEL_301;
      }
    }

    uint64_t v25 = (int)v25;
    uint64_t v29 = v229;
    unint64_t v234 = v26;
    while (1)
    {
      uint64_t v33 = v28 - 1;
      uint64_t v34 = *(void *)(v26 + 8);
      unsigned int v35 = v28 - 1;
      uint64_t v36 = (unsigned int *)(v34 + 56LL * (v28 - 1));
      uint64_t v37 = v29 + 136 * v25;
      uint64_t v38 = (unsigned int **)(v37 + 96);
      if (!v27)
      {
        uint64_t v30 = v34 + 56LL * v35;
        uint64_t v31 = v29;
        uint64_t v32 = v28;
        sub_181395FD4(v235, v30, v37 + 96);
        uint64_t v28 = v32;
        uint64_t v29 = v31;
        int v27 = a5;
        goto LABEL_37;
      }

      *(void *)(v37 + 224) = 0LL;
      *(_OWORD *)(v37 + 192) = 0u;
      *(_OWORD *)(v37 + 208) = 0u;
      *(_OWORD *)(v37 + 160) = 0u;
      *(_OWORD *)(v37 + 176) = 0u;
      *(_OWORD *)(v37 + 128) = 0u;
      *(_OWORD *)(v37 + 144) = 0u;
      *(_OWORD *)uint64_t v38 = 0u;
      *(_OWORD *)(v37 + 112) = 0u;
      *uint64_t v38 = v36;
      if (!*v232)
      {
        uint64_t v39 = v28 - 1;
        uint64_t v40 = v28;
        uint64_t v41 = v29;
        unint64_t v42 = (unsigned __int8 *)sqlite3_mprintf( "SELECT pgno FROM '%q'.'%q_idx' WHERE segid=? AND term<=? ORDER BY term DESC LIMIT 1",  *(void *)(*(void *)v235 + 8LL),  *(void *)(*(void *)v235 + 16LL));
        int v44 = v42;
        if (v235[15])
        {
          int v27 = a5;
          uint64_t v29 = v41;
          uint64_t v28 = v40;
          uint64_t v33 = v39;
          if (!v42) {
            goto LABEL_37;
          }
        }

        else
        {
          if (!v42)
          {
            int v27 = a5;
            int *v237 = 7;
            uint64_t v29 = v41;
            uint64_t v28 = v40;
            uint64_t v33 = v39;
            goto LABEL_37;
          }

          v235[15] = sub_18126DFE0(**(void **)v235, v42, 0xFFFFFFFFLL, 133LL, 0LL, v232, 0LL, v43);
          uint64_t v28 = v40;
          uint64_t v33 = v39;
        }

        BOOL v45 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_50;
        }
        uint64_t v230 = v28;
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v44);
        --qword_18C468B10;
        off_18C4653A8(v44);
        int v44 = (unsigned __int8 *)xmmword_18C468B70;
        int v27 = a5;
        uint64_t v28 = v230;
        uint64_t v29 = v41;
        if ((void)xmmword_18C468B70) {
          break;
        }
      }

LABEL_275:
        unint64_t v224 = v156;
        uint64_t v184 = *v62;
        uint64_t v60 = (uint64_t)v154;
        if (v184)
        {
          int v185 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_281;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v184);
          --qword_18C468B10;
          off_18C4653A8(v184);
          uint64_t v184 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v185 = &xmmword_18C465410;
LABEL_281:
            (*v185)(v184);
          }
        }

        *size_t v227 = v224;
        *int v226 = v153;
        unsigned int v186 = __rev16(**v224);
        uint64_t v29 = v152;
        if (*((_DWORD *)v224 + 3) >= (signed int)v186)
        {
          *(void *)(v152 + 136 * v25 + 128) = sub_18138BFCC( (char *)*v224 + v186,  (unint64_t *)(v152 + 136 * v25 + 216))
                                              + v186;
          int v187 = *((_DWORD *)v224 + 2);
          uint64_t v188 = *((int *)v224 + 3);
          if ((int)v188 >= v187)
          {
            int v190 = v187 + 1;
            uint64_t v193 = v152 + 136 * v25;
          }

          else
          {
            int v189 = (char *)*v224 + v188;
            int v190 = *v189;
            uint64_t v191 = v152;
            if (*v189 < 0)
            {
              int v192 = v189[1];
              if (v189[1] < 0)
              {
                int v195 = v189[2];
                if (v195 < 0)
                {
                  sub_18138BFCC(v189, v238);
                  uint64_t v191 = v152;
                  int v190 = v238[0] & 0x7FFFFFFF;
                }

                else
                {
                  int v190 = v195 & 0x7F | (v190 << 14) & 0x1FC07F | ((v192 & 0x7F) << 7);
                }
              }

              else
              {
                int v190 = ((v190 & 0x7F) << 7) | v192;
              }
            }

            uint64_t v193 = v191 + 136 * v25;
          }

          *(_DWORD *)(v193 + 172) = v190;
          goto LABEL_300;
        }

        *uint64_t v50 = 267;
        int v27 = a5;
LABEL_204:
        if ((*(_BYTE *)(v29 + 136 * v25 + 104) & 2) != 0)
        {
          *(void *)(v29 + 136 * v25 + 152) = sub_181396534;
          uint64_t v28 = v231;
        }

        else
        {
          uint64_t v28 = v231;
          if (*(_DWORD *)(*(void *)v60 + 92LL) == 1) {
            uint64_t v142 = sub_1813965E8;
          }
          else {
            uint64_t v142 = sub_1813969F4;
          }
          *(void *)(v29 + 136 * v25 + 152) = v142;
        }

        uint64_t v159 = (*v38)[8];
        if ((int)v159 >= 1 && !*v237)
        {
          uint64_t v160 = v29;
          if (sqlite3_initialize() || (uint64_t v161 = (void *)sub_18126F0AC(16 * v159)) == 0LL)
          {
            int v27 = a5;
            int *v237 = 7;
            uint64_t v33 = v228;
            uint64_t v29 = v160;
          }

          else
          {
            uint64_t v162 = v161;
            bzero(v161, 16 * v159);
            uint64_t v29 = v160;
            uint64_t v163 = v160 + 136 * v25;
            *(void *)(v163 + 136) = v162;
            *(_DWORD *)(v163 + 144) = v159;
            int v27 = a5;
            uint64_t v33 = v228;
          }

          uint64_t v28 = v231;
        }
      }

uint64_t sub_181395B94(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v3 = **(void **)(a2 + 24);
    int v4 = *(_DWORD *)(v3 + 92);
    if (v4 == 1)
    {
      uint64_t v5 = sub_181398754;
LABEL_19:
      *(void *)(a2 + 56) = v5;
      return result;
    }

    uint64_t v6 = *(_DWORD **)(a2 + 48);
    if (!v6)
    {
      uint64_t v5 = sub_181398768;
      goto LABEL_19;
    }

    if (!*v6)
    {
      uint64_t v5 = sub_1813987D4;
      goto LABEL_19;
    }

    if (!v4)
    {
      uint64_t v5 = sub_1813987DC;
      goto LABEL_19;
    }

    unint64_t v7 = *(unsigned int *)(v3 + 24);
    if ((int)v7 > 100)
    {
      uint64_t v5 = sub_181398B20;
      goto LABEL_19;
    }

    *(void *)(a2 + 56) = sub_181398A30;
    LODWORD(v8) = *(_DWORD *)(a2 + 44);
    if (v8 < v7)
    {
      uint64_t v9 = (_DWORD *)result;
      if (!(_DWORD)v8) {
        LODWORD(v8) = 64;
      }
      unint64_t v8 = (int)v8;
      do
      {
        unint64_t v10 = v8;
        v8 *= 2LL;
      }

      while (v10 < v7);
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t result = sqlite3_initialize();
      if ((_DWORD)result || (uint64_t result = sub_18127D33C(v11, v10)) == 0)
      {
        *uint64_t v9 = 7;
      }

      else
      {
        *(_DWORD *)(a2 + 44) = v10;
        *(void *)(a2 + 32) = result;
      }
    }
  }

  return result;
}

uint64_t sub_181395CA0(uint64_t result, unsigned __int8 *__s2, int a3, char a4, uint64_t a5)
{
  unsigned int v7 = a3;
  unint64_t v8 = __s2;
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(result + 24);
  if (!__s2 || (a4 & 8) != 0)
  {
    uint64_t result = sub_181396128(*(void *)(result + 24), __s2, a3);
    *(_DWORD *)(v9 + 60) = result;
    uint64_t v13 = *(void *)(v9 + 24);
    uint64_t v14 = *(void *)(v13 + 24);
    if (!v14) {
      goto LABEL_21;
    }
    unint64_t v8 = (unsigned __int8 *)(v14 + 48);
    int v15 = strlen((const char *)(v14 + 48));
    sub_1813963FC((_DWORD *)v13, v14, 0LL);
    int v16 = *(_DWORD *)(v14 + 24);
    uint64_t result = strlen((const char *)(v14 + 48));
    if (*(_DWORD *)(v9 + 60)) {
      goto LABEL_21;
    }
    unsigned int v7 = result;
    uint64_t result = sqlite3_initialize();
    if (!(_DWORD)result)
    {
      uint64_t result = sub_18126F0AC(16LL);
      if (result)
      {
        uint64_t v21 = result;
        int v22 = v16 - v15 - 49;
        *(void *)uint64_t result = &v8[v15 + 1];
        *(void *)(result + 8) = 0LL;
        goto LABEL_31;
      }
    }

    *(_DWORD *)(v9 + 60) = 7;
  }

  else
  {
    if (a3 < 1)
    {
      unsigned int v12 = 13;
    }

    else
    {
      unint64_t v11 = a3 + 1LL;
      unsigned int v12 = 13;
      do
        v12 ^= __s2[(v11-- - 2)] ^ (8 * v12);
      while (v11 > 1);
    }

    uint64_t v17 = *(void *)(*(void *)(v10 + 32) + 8LL * (v12 % *(_DWORD *)(v10 + 20)));
    if (v17)
    {
      while (1)
      {
        if (*(_DWORD *)(v17 + 28) + 1 == v7)
        {
          uint64_t result = memcmp((const void *)(v17 + 48), v8, (int)v7);
          if (!(_DWORD)result) {
            break;
          }
        }

        uint64_t v17 = *(void *)v17;
        if (!v17) {
          goto LABEL_19;
        }
      }

      uint64_t v18 = *(int *)(v17 + 24);
      uint64_t result = sqlite3_initialize();
      if (!(_DWORD)result)
      {
        uint64_t v23 = v18 - (int)(v7 + 49);
        uint64_t result = sub_18126F0AC(v23 + 26);
        if (result)
        {
          uint64_t v21 = result;
          uint64_t v31 = result + (int)(-33 - v7);
          uint64_t v24 = result + 16;
          memcpy((void *)(result + 16), (const void *)(v17 + (int)(v7 + 49)), (int)v23);
          int v22 = sub_1813963FC((_DWORD *)v10, v17, v31) + v23;
          *(_DWORD *)(v9 + 60) = 0;
          *(void *)uint64_t v21 = v24;
          *(_DWORD *)(a5 + 8) |= 1u;
LABEL_31:
          *(_DWORD *)(a5 + 112) = 0;
          if (!v7) {
            goto LABEL_43;
          }
          LODWORD(v25) = *(_DWORD *)(a5 + 116);
          if (v25 >= v7)
          {
            uint64_t v29 = 0LL;
            uint64_t v30 = *(void *)(a5 + 104);
            size_t v26 = v7;
          }

          else
          {
            if (!(_DWORD)v25) {
              LODWORD(v25) = 64;
            }
            unint64_t v25 = (int)v25;
            size_t v26 = v7;
            do
            {
              unint64_t v27 = v25;
              v25 *= 2LL;
            }

            while (v27 < v7);
            uint64_t v28 = *(void *)(a5 + 104);
            if (sqlite3_initialize() || (uint64_t v30 = sub_18127D33C(v28, v27)) == 0)
            {
              *(_DWORD *)(v9 + 60) = 7;
              goto LABEL_43;
            }

            *(_DWORD *)(a5 + 116) = v27;
            *(void *)(a5 + 104) = v30;
            uint64_t v29 = *(int *)(a5 + 112);
          }

          memcpy((void *)(v30 + v29), v8, v26);
          *(_DWORD *)(a5 + 112) += v7;
LABEL_43:
          *(_DWORD *)(v21 + 8) = v22;
          *(_DWORD *)(v21 + 12) = v22;
          *(void *)(a5 + 16) = v21;
          *(void *)(a5 + 32) = sub_18138BFCC(*(char **)v21, (unint64_t *)(a5 + 120));
          *(_DWORD *)(a5 + 76) = *(_DWORD *)(v21 + 8);
          if ((a4 & 2) != 0)
          {
            *(_DWORD *)(a5 + 8) |= 2u;
            uint64_t result = sub_1813915A4((_DWORD *)v9, a5);
          }

          else
          {
            uint64_t result = sub_181391240(v9, a5);
          }

          goto LABEL_21;
        }
      }

      int v19 = 7;
    }

    else
    {
LABEL_19:
      int v19 = 0;
    }

    *(_DWORD *)(v9 + 60) = v19;
    *(_DWORD *)(a5 + 8) |= 1u;
  }

void sub_181395FD4(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 4) && !a1[15])
  {
    *(void *)(a3 + 128) = 0LL;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    if ((*(_BYTE *)(a3 + 8) & 2) != 0)
    {
      uint64_t v5 = sub_181396534;
    }

    else if (*(_DWORD *)(*(void *)a1 + 92LL) == 1)
    {
      uint64_t v5 = sub_1813965E8;
    }

    else
    {
      uint64_t v5 = sub_1813969F4;
    }

    *(void *)(a3 + 56) = v5;
    *(void *)a3 = a2;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 4) - 1;
    while (1)
    {
      sub_181390FF0((uint64_t)a1, (unsigned int **)a3);
      if (a1[15]) {
        break;
      }
      uint64_t v6 = *(void *)(a3 + 16);
      if (!v6) {
        break;
      }
      if (*(_DWORD *)(v6 + 8) != 4)
      {
        *(void *)(a3 + 32) = 4LL;
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(v6 + 12) + 1;
        sub_181396FD4((uint64_t)a1, a3, 0);
        sub_181391240((uint64_t)a1, a3);
        uint64_t v7 = *(unsigned int *)(*(void *)a3 + 32LL);
        if ((int)v7 >= 1 && !a1[15])
        {
          if (sqlite3_initialize() || (unint64_t v8 = (void *)sub_18126F0AC(16 * v7)) == 0LL)
          {
            a1[15] = 7;
          }

          else
          {
            uint64_t v9 = v8;
            bzero(v8, 16 * v7);
            *(void *)(a3 + 40) = v9;
            *(_DWORD *)(a3 + 48) = v7;
          }
        }

        return;
      }
    }
  }

uint64_t sub_181396128(uint64_t a1, const void *a2, int a3)
{
  *(void *)(a1 + 24) = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v7 = (uint64_t *)sub_18126F0AC(256LL);
  if (!v7) {
    return 7LL;
  }
  unint64_t v8 = v7;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      for (unint64_t j = *(uint64_t **)(*(void *)(a1 + 32) + 8 * i); j; unint64_t j = (uint64_t *)*j)
      {
        if (!a2 || *((_DWORD *)j + 7) + 1 >= a3 && !memcmp(j + 6, a2, a3))
        {
          j[1] = 0LL;
          uint64_t v12 = *v8;
          uint64_t v13 = (uint64_t)j;
          uint64_t v14 = v8;
          if (*v8)
          {
            uint64_t v15 = 0LL;
            uint64_t v13 = (uint64_t)j;
            do
            {
              uint64_t v29 = 0LL;
              int v16 = &v29;
              do
              {
                if (v13)
                {
                  if (v12)
                  {
                    uint64_t v17 = 48LL;
                    do
                    {
                      unsigned int v18 = *(unsigned __int8 *)(v13 + v17);
                      unsigned int v19 = *(unsigned __int8 *)(v12 + v17++);
                    }

                    while (v18 == v19);
                    if (v18 > v19)
                    {
                      *int v16 = v12;
                      int v16 = (uint64_t *)(v12 + 8);
                      uint64_t v12 = *(void *)(v12 + 8);
                    }

                    else
                    {
                      *int v16 = v13;
                      int v16 = (uint64_t *)(v13 + 8);
                      uint64_t v13 = *(void *)(v13 + 8);
                    }

                    *int v16 = 0LL;
                  }

                  else
                  {
                    *int v16 = v13;
                    uint64_t v13 = 0LL;
                  }
                }

                else
                {
                  *int v16 = v12;
                  uint64_t v12 = 0LL;
                }
              }

              while (v13 | v12);
              uint64_t v13 = v29;
              v8[v15++] = 0LL;
              uint64_t v14 = &v8[v15];
              uint64_t v12 = *v14;
            }

            while (*v14);
          }

          *uint64_t v14 = v13;
        }
      }
    }
  }

  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  do
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = v8[v20];
    uint64_t v29 = 0LL;
    if (v21 | v23)
    {
      uint64_t v24 = &v29;
      do
      {
        if (v21)
        {
          if (v23)
          {
            uint64_t v25 = 48LL;
            do
            {
              unsigned int v26 = *(unsigned __int8 *)(v21 + v25);
              unsigned int v27 = *(unsigned __int8 *)(v23 + v25++);
            }

            while (v26 == v27);
            if (v26 > v27)
            {
              *uint64_t v24 = v23;
              uint64_t v24 = (uint64_t *)(v23 + 8);
              uint64_t v23 = *(void *)(v23 + 8);
            }

            else
            {
              *uint64_t v24 = v21;
              uint64_t v24 = (uint64_t *)(v21 + 8);
              uint64_t v21 = *(void *)(v21 + 8);
            }

            *uint64_t v24 = 0LL;
          }

          else
          {
            *uint64_t v24 = v21;
            uint64_t v21 = 0LL;
          }
        }

        else
        {
          *uint64_t v24 = v23;
          uint64_t v23 = 0LL;
        }
      }

      while (v21 | v23);
      uint64_t v22 = v29;
    }

    ++v20;
    uint64_t v21 = v22;
  }

  while (v20 != 32);
  uint64_t v28 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    unint64_t v8 = (uint64_t *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_51;
    }
    uint64_t v28 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
  }

  (*v28)(v8);
LABEL_51:
  uint64_t result = 0LL;
  *(void *)(a1 + 24) = v22;
  return result;
}

uint64_t sub_1813963FC(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a2 + 20);
  if (!(_DWORD)v3) {
    return 0LL;
  }
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a2;
  }
  int v7 = *(_DWORD *)(a2 + 24);
  if (*a1 == 1)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      uint64_t v8 = v7 + 1LL;
      *(_BYTE *)(v6 + v7) = 0;
      if (*(_BYTE *)(a2 + 33))
      {
        v7 += 2;
        *(_BYTE *)(v6 + v8) = 0;
      }

      else
      {
        ++v7;
      }
    }
  }

  else
  {
    int v10 = v7 + ~(_DWORD)v3;
    unint64_t v11 = *(unsigned __int8 *)(a2 + 32) + 2 * v10;
    if ((int)v11 > 127)
    {
      if (v11 >= 0x4000)
      {
        else {
          int v13 = 4;
        }
        else {
          int v12 = 3;
        }
      }

      else
      {
        int v12 = 2;
      }

      memmove((void *)(v6 + v12 + (int)v3), (const void *)(v3 + v6 + 1), v10);
      uint64_t v14 = (int8x8_t *)(v6 + *(int *)(a2 + 20));
      if (v11 >> 14)
      {
        sub_181308E00(v14, v11);
      }

      else
      {
        v14->i8[0] = (v11 >> 7) | 0x80;
        v14->i8[1] = v11 & 0x7F;
      }

      int v7 = v7 + v12 - 1;
    }

    else
    {
      *(_BYTE *)(v6 + v3) = *(_BYTE *)(a2 + 32) + 2 * v10;
    }
  }

  uint64_t result = (v7 - *(_DWORD *)(a2 + 24));
  if (!a3)
  {
    *(_WORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = v7;
  }

  return result;
}

unsigned __int16 **sub_181396534(unsigned __int16 **a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 80);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    return sub_181390AD8(a1, (unsigned int **)a2);
  }
  uint64_t v7 = **(void **)(a2 + 16);
  *(_DWORD *)(a2 + 80) = v6;
  *(void *)(a2 + 32) = *(int *)(*(void *)(a2 + 88) + 4LL * v6);
  sub_181391240((uint64_t)a1, a2);
  int v8 = *(_DWORD *)(a2 + 32);
  if (*((_DWORD *)*a1 + 23) != 1) {
    v8 += *(_DWORD *)(a2 + 128);
  }
  uint64_t result = (unsigned __int16 **)sub_18138BFCC((char *)(v7 + v8), &v10);
  *(void *)(a2 + 120) -= v10;
  return result;
}

uint64_t sub_1813965E8(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a2 + 32);
  if (!*(void *)a2)
  {
    BOOL v7 = 1;
    goto LABEL_5;
  }

  if (*(_DWORD *)(*(void *)(a2 + 16) + 12LL) > v6)
  {
    BOOL v7 = 0;
LABEL_5:
    if (v6 < *(_DWORD *)(a2 + 76))
    {
      *(void *)(a2 + 32) = (int)(v6 + sub_18138BFCC((char *)(**(void **)(a2 + 16) + v6), &v38));
      *(void *)(a2 + 120) += v38;
      return sub_181391240(v5, a2);
    }

    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    {
      if (!v7)
      {
        uint64_t v25 = *(uint64_t **)(a2 + 16);
        uint64_t v26 = *v25;
        unsigned int v27 = (char *)(*v25 + *((int *)v25 + 3));
        int v28 = *v27;
        if (*v27 < 0)
        {
          int v29 = v27[1];
          if (v27[1] < 0)
          {
            int v32 = v27[2];
            if (v32 < 0)
            {
              sub_18138BFCC(v27, &v38);
              int v28 = v38 & 0x7FFFFFFF;
            }

            else
            {
              int v28 = v32 & 0x7F | (v28 << 14) & 0x1FC07F | ((v29 & 0x7F) << 7);
            }
          }

          else
          {
            int v28 = ((v28 & 0x7F) << 7) | v29;
          }
        }

        if (v6 == v28)
        {
          int v33 = 0;
        }

        else
        {
          uint64_t v34 = (char *)(v26 + v6);
          int v33 = *v34;
          if (*v34 < 0)
          {
            int v36 = v34[1];
            if (v34[1] < 0)
            {
              int v37 = v34[2];
              if (v37 < 0)
              {
                int v35 = sub_18138BFCC(v34, &v38);
                int v33 = v38 & 0x7FFFFFFF;
              }

              else
              {
                int v33 = v37 & 0x7F | (v33 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
                int v35 = 3;
              }
            }

            else
            {
              int v33 = ((v33 & 0x7F) << 7) | v36;
              int v35 = 2;
            }
          }

          else
          {
            int v35 = 1;
          }

          v6 += v35;
        }

        *(void *)(a2 + 32) = v6;
        sub_181396FD4(v5, a2, v33);
        if (!a3) {
          return sub_181391240(v5, a2);
        }
LABEL_60:
        *a3 = 1;
        return sub_181391240(v5, a2);
      }

      uint64_t v8 = *(void *)(v5 + 24);
      uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8LL);
      *(void *)(v8 + 24) = v9;
      if (v9)
      {
        unint64_t v10 = (const void *)(v9 + 48);
        int v11 = strlen((const char *)(v9 + 48));
        sub_1813963FC((_DWORD *)v8, v9, 0LL);
        int v12 = (char *)(v9 + 48 + v11 + 1);
        uint64_t v13 = *(void *)(a2 + 16);
        int v14 = *(_DWORD *)(v9 + 24) - v11 - 49;
        *(void *)uint64_t v13 = v12;
        *(_DWORD *)(v13 + 8) = v14;
        *(_DWORD *)(v13 + 12) = v14;
        *(_DWORD *)(a2 + 76) = v14;
        unsigned int v15 = strlen((const char *)(v9 + 48));
        unsigned int v16 = v15;
        *(_DWORD *)(a2 + 112) = 0;
        if (!v15) {
          goto LABEL_41;
        }
        LODWORD(v17) = *(_DWORD *)(a2 + 116);
        if (v17 >= v15)
        {
          uint64_t v30 = 0LL;
          uint64_t v31 = *(void *)(a2 + 104);
          size_t v18 = v16;
        }

        else
        {
          if (!(_DWORD)v17) {
            LODWORD(v17) = 64;
          }
          unint64_t v17 = (int)v17;
          size_t v18 = v15;
          do
          {
            unint64_t v19 = v17;
            v17 *= 2LL;
          }

          while (v19 < v15);
          uint64_t v20 = *(void *)(a2 + 104);
          if (sqlite3_initialize() || (uint64_t v31 = sub_18127D33C(v20, v19)) == 0)
          {
            *(_DWORD *)(v5 + 60) = 7;
            goto LABEL_41;
          }

          *(_DWORD *)(a2 + 116) = v19;
          *(void *)(a2 + 104) = v31;
          uint64_t v30 = *(int *)(a2 + 112);
        }

        memcpy((void *)(v31 + v30), v10, v18);
        *(_DWORD *)(a2 + 112) += v16;
LABEL_41:
        *(void *)(a2 + 32) = sub_18138BFCC(v12, (unint64_t *)(a2 + 120));
        if (!a3) {
          return sub_181391240(v5, a2);
        }
        goto LABEL_60;
      }
    }

    uint64_t v23 = *(void *)(a2 + 16);
    if (!v23) {
      goto LABEL_33;
    }
    uint64_t v24 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v23);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v23);
      uint64_t v23 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_33;
      }
      uint64_t v24 = &xmmword_18C465410;
    }

    uint64_t result = (*v24)(v23);
LABEL_33:
    *(void *)(a2 + 16) = 0LL;
    return result;
  }

  uint64_t result = sub_181390FF0(result, (unsigned int **)a2);
  if (!*(_DWORD *)(v5 + 60))
  {
    uint64_t v21 = *(void *)(a2 + 16);
    if (v21)
    {
      *(void *)(a2 + 120) = 0LL;
      if (*(void *)a2)
      {
        while (1)
        {
          int v22 = *(_DWORD *)(v21 + 12);
          BOOL v7 = v22 < 5;
          if (v22 > 4) {
            break;
          }
          uint64_t result = sub_181390FF0(v5, (unsigned int **)a2);
          if (*(_DWORD *)(v5 + 60)) {
            return result;
          }
          uint64_t v21 = *(void *)(a2 + 16);
          if (!v21) {
            return result;
          }
          *(void *)(a2 + 120) = 0LL;
          int v6 = 4;
          if (!*(void *)a2) {
            goto LABEL_5;
          }
        }

        int v6 = 4;
      }

      else
      {
        BOOL v7 = 1;
        int v6 = 4;
      }

      goto LABEL_5;
    }
  }

  return result;
}

uint64_t sub_1813969F4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  int v6 = *(uint64_t **)(a2 + 16);
  uint64_t v7 = *((int *)v6 + 3);
  int v8 = *(_DWORD *)(a2 + 128) + *(_DWORD *)(a2 + 32);
  if (v8 >= (int)v7)
  {
    if (*(void *)a2)
    {
      LODWORD(v13) = 0;
      int v14 = 0;
      while (!(_DWORD)v13)
      {
        uint64_t result = sub_181390FF0(v5, (unsigned int **)a2);
        unsigned int v15 = *(unsigned __int16 ***)(a2 + 16);
        if (!v15) {
          return result;
        }
        unsigned int v16 = (char *)*v15;
        LODWORD(v13) = __rev16(**v15);
        int v17 = *((_DWORD *)v15 + 3);
        if ((_DWORD)v13) {
          BOOL v18 = v17 <= (int)v13;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18)
        {
          if (*((_DWORD *)v15 + 2) > v17)
          {
            unint64_t v19 = &v16[v17];
            LODWORD(v13) = *v19;
            if (*v19 < 0)
            {
              int v22 = v19[1];
              if (v19[1] < 0)
              {
                int v24 = v19[2];
                if (v24 < 0)
                {
                  uint64_t result = sub_18138BFCC(v19, &v57);
                  LODWORD(v13) = v57 & 0x7FFFFFFF;
                }

                else
                {
                  LODWORD(v13) = v24 & 0x7F | ((_DWORD)v13 << 14) & 0x1FC07F | ((v22 & 0x7F) << 7);
                  uint64_t result = 3LL;
                }
              }

              else
              {
                LODWORD(v13) = ((v13 & 0x7F) << 7) | v22;
                uint64_t result = 2LL;
              }
            }

            else
            {
              uint64_t result = 1LL;
            }

            *(void *)(a2 + 32) = v13;
            *(_DWORD *)(a2 + 72) = result + v17;
            *(_DWORD *)(a2 + 76) = v13;
            int v14 = 1;
          }
        }

        else
        {
          uint64_t result = sub_18138BFCC(&v16[v13], (unint64_t *)(a2 + 120));
          uint64_t v13 = (result + v13);
          *(void *)(a2 + 32) = v13;
          int v17 = *((_DWORD *)v15 + 3);
          if (*((_DWORD *)v15 + 2) > v17)
          {
            uint64_t v20 = (char *)*v15 + v17;
            int v21 = *v20;
            if (*v20 < 0)
            {
              int v23 = v20[1];
              if (v20[1] < 0)
              {
                int v25 = v20[2];
                if (v25 < 0)
                {
                  uint64_t result = sub_18138BFCC(v20, &v57);
                  *(_DWORD *)(a2 + 76) = v57 & 0x7FFFFFFF;
                }

                else
                {
                  *(_DWORD *)(a2 + 76) = v25 & 0x7F | (v21 << 14) & 0x1FC07F | ((v23 & 0x7F) << 7);
                  uint64_t result = 3LL;
                }
              }

              else
              {
                *(_DWORD *)(a2 + 76) = ((v21 & 0x7F) << 7) | v23;
                uint64_t result = 2LL;
              }
            }

            else
            {
              *(_DWORD *)(a2 + 76) = v21;
              uint64_t result = 1LL;
            }

            *(_DWORD *)(a2 + 72) = result + v17;
            int v17 = *((_DWORD *)v15 + 3);
          }
        }

        if ((int)v13 > v17)
        {
          *(_DWORD *)(v5 + 60) = 267;
          return result;
        }
      }

      int v6 = *(uint64_t **)(a2 + 16);
      if (!v6) {
        return result;
      }
      int v11 = 0;
      if (v14)
      {
LABEL_80:
        if ((*(_BYTE *)(a2 + 8) & 1) == 0)
        {
          sub_181396FD4(v5, a2, v11);
          uint64_t result = sub_181391240(v5, a2);
          if (a3) {
            *a3 = 1;
          }
          return result;
        }

char *sub_181396FD4(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(uint64_t **)(a2 + 16);
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t result = (char *)(*v6 + v8);
  unsigned int v10 = *result;
  if (*result < 0)
  {
    int v12 = result[1];
    if (result[1] < 0)
    {
      int v13 = result[2];
      if (v13 < 0)
      {
        uint64_t result = (char *)sub_18138BFCC(result, &v32);
        unsigned int v10 = v32 & 0x7FFFFFFF;
        uint64_t v11 = result;
      }

      else
      {
        unsigned int v10 = v13 & 0x7F | (v10 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
        uint64_t v11 = 3LL;
      }
    }

    else
    {
      unsigned int v10 = ((v10 & 0x7F) << 7) | v12;
      uint64_t v11 = 2LL;
    }
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  uint64_t v14 = v11 + v8;
  size_t v15 = v10;
  uint64_t v16 = v14 + v10;
  if (v16 > *((int *)v6 + 3) || (v10 ? (BOOL v17 = *(_DWORD *)(a2 + 112) < a3) : (BOOL v17 = 1), v17))
  {
LABEL_14:
    *(_DWORD *)(a1 + 60) = 267;
    return result;
  }

  *(_DWORD *)(a2 + 112) = a3;
  unint64_t v18 = v10 + a3;
  LODWORD(v19) = *(_DWORD *)(a2 + 116);
  if (v18 <= v19)
  {
    uint64_t v22 = *(void *)(a2 + 104);
  }

  else
  {
    if (!(_DWORD)v19) {
      LODWORD(v19) = 64;
    }
    unint64_t v19 = (int)v19;
    do
    {
      unint64_t v20 = v19;
      v19 *= 2LL;
    }

    while (v20 < v18);
    uint64_t v21 = *(void *)(a2 + 104);
    if (sqlite3_initialize() || (uint64_t v22 = sub_18127D33C(v21, v20)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      goto LABEL_25;
    }

    *(_DWORD *)(a2 + 116) = v20;
    *(void *)(a2 + 104) = v22;
    a3 = *(_DWORD *)(a2 + 112);
  }

  memcpy((void *)(v22 + a3), (const void *)(v7 + v14), v15);
  *(_DWORD *)(a2 + 112) += v15;
LABEL_25:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 68) = v16;
  *(void *)(a2 + 32) = v16;
  uint64_t v23 = *(int *)(a2 + 72);
  uint64_t v24 = *(void *)(a2 + 16);
  int v25 = *(_DWORD *)(v24 + 8);
  if ((int)v23 >= v25)
  {
    int v29 = v25 + 1;
  }

  else
  {
    uint64_t v26 = v7 + v23;
    int v27 = *(unsigned __int8 *)(v7 + v23);
    if (*(char *)(v7 + v23) < 0)
    {
      int v30 = *(unsigned __int8 *)(v26 + 1);
      if (*(char *)(v26 + 1) < 0)
      {
        int v31 = *(char *)(v26 + 2);
        if (v31 < 0)
        {
          int v28 = sub_18138BFCC((char *)v26, &v32);
          int v27 = v32 & 0x7FFFFFFF;
        }

        else
        {
          int v27 = v31 & 0x7F | (v27 << 14) & 0x1FC07F | ((v30 & 0x7F) << 7);
          int v28 = 3;
        }
      }

      else
      {
        int v27 = ((v27 & 0x7F) << 7) | v30;
        int v28 = 2;
      }
    }

    else
    {
      int v28 = 1;
    }

    int v29 = *(_DWORD *)(a2 + 76) + v27;
    *(_DWORD *)(a2 + 72) = v28 + v23;
  }

  *(_DWORD *)(a2 + 76) = v29;
  if (v16 < *(int *)(v24 + 12))
  {
LABEL_41:
    uint64_t result = (char *)sub_18138BFCC((char *)(*(void *)v24 + v16), (unint64_t *)(a2 + 120));
    *(void *)(a2 + 32) = v16 + result;
    return result;
  }

  uint64_t v16 = 4LL;
  while (1)
  {
    uint64_t result = (char *)sub_181390FF0(a1, (unsigned int **)a2);
    uint64_t v24 = *(void *)(a2 + 16);
    if (!v24) {
      break;
    }
  }

  if (!*(_DWORD *)(a1 + 60)) {
    goto LABEL_14;
  }
  return result;
}

int *sub_181397248(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 60))
  {
    int v4 = 0LL;
LABEL_30:
    sub_18138DA78(v4);
    return 0LL;
  }

  int v5 = a3;
  uint64_t v8 = 0LL;
  int v4 = 0LL;
  uint64_t v9 = (a3 << 37) + a4 + 0x1000000000LL;
  while (!sqlite3_initialize())
  {
    uint64_t v11 = sub_18127D33C((uint64_t)v4, 32 * v8 + 40);
    if (!v11) {
      break;
    }
    int v12 = (int *)v11;
    uint64_t v13 = v11 + 32 * v8;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 8) = 0u;
    uint64_t v14 = sub_18138BCF4(a1, v9 + (v8 << 31));
    *(void *)(v13 + 8) = v14;
    if (v14) {
      BOOL v15 = (**(_BYTE **)v14 & 1) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    *int v12 = ++v8;
    int v10 = *(_DWORD *)(a1 + 60);
    int v4 = v12;
    if (v10 | v15) {
      goto LABEL_11;
    }
  }

  int v10 = 7;
  *(_DWORD *)(a1 + 60) = 7;
LABEL_11:
  if (v10) {
    goto LABEL_30;
  }
  v4[1] = v5;
  uint64_t v16 = *v4;
  if (a2)
  {
    if ((int)v16 >= 1)
    {
      while (1)
      {
        uint64_t v17 = v16--;
        v4[8 * v16 + 5] = 0;
        if (v17 < 2) {
          break;
        }
        unint64_t v18 = &v4[8 * v16 - 6];
        uint64_t v19 = *(void *)v18;
        if (*(void *)v18)
        {
          unint64_t v20 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
            --qword_18C468B10;
            off_18C4653A8(v19);
            uint64_t v19 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_16;
            }
            unint64_t v20 = &xmmword_18C465410;
          }

          (*v20)(v19);
        }

uint64_t sub_1813974A8(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  unint64_t v7 = (*(_DWORD *)(a4 + 8) + *((_DWORD *)a2 + 2));
  if ((_DWORD)v7)
  {
    uint64_t v8 = 64LL;
    do
    {
      unint64_t v9 = v8;
      v8 *= 2LL;
    }

    while (v9 < v7);
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_18127D33C(0LL, v9), (uint64_t v25 = result) == 0))
    {
      *(_DWORD *)(v6 + 60) = 7;
      return result;
    }
  }

  else
  {
    uint64_t v25 = 0LL;
    LODWORD(v9) = 0;
  }

  if (!*(_DWORD *)(v6 + 60))
  {
    uint64_t v24 = a2;
    if (*((int *)a2 + 2) < 1)
    {
      int64_t v11 = 0LL;
      uint64_t v10 = 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t result = sub_18138BFCC((char *)*a2, (unint64_t *)&v26);
      uint64_t v10 = result;
      int64_t v11 = v26;
    }

    if (*(int *)(a4 + 8) < 1)
    {
      if ((v10 & 0x80000000) != 0)
      {
        int v15 = 0;
        goto LABEL_46;
      }

      int64_t v13 = 0LL;
      BOOL v14 = (int)v10 >= 0;
      int v12 = -1;
    }

    else
    {
      int v12 = sub_18138BFCC(*(char **)a4, (unint64_t *)&v26);
      int64_t v13 = v26;
      BOOL v14 = (int)v10 >= 0;
    }

    int v15 = 0;
    int64_t v16 = 0LL;
    do
    {
      int64_t v17 = v11;
      int64_t v18 = v13;
      if (v14 && (v12 < 0 || v11 < v13))
      {
        uint64_t result = v25 + v15;
        unint64_t v21 = v11 - v16;
        if ((unint64_t)(v11 - v16) > 0x7F)
        {
          if (v21 >> 14)
          {
            uint64_t result = sub_181308E00((int8x8_t *)result, v21);
            int v20 = result;
          }

          else
          {
            *(_BYTE *)uint64_t result = (v21 >> 7) | 0x80;
            *(_BYTE *)(result + 1) = v21 & 0x7F;
            int v20 = 2;
          }
        }

        else
        {
          *(_BYTE *)uint64_t result = v21;
          int v20 = 1;
        }

        if ((int)v10 >= *((_DWORD *)v24 + 2))
        {
          uint64_t v10 = 0xFFFFFFFFLL;
        }

        else
        {
          uint64_t result = sub_18138BFCC((char *)(*v24 + v10), (unint64_t *)&v26);
          v10 += result;
          v11 += v26;
        }

        int64_t v13 = v18;
        int64_t v16 = v17;
      }

      else
      {
        uint64_t result = v25 + v15;
        unint64_t v19 = v13 - v16;
        if ((unint64_t)(v13 - v16) > 0x7F)
        {
          if (v19 >> 14)
          {
            uint64_t result = sub_181308E00((int8x8_t *)result, v19);
            int v20 = result;
          }

          else
          {
            *(_BYTE *)uint64_t result = (v19 >> 7) | 0x80;
            *(_BYTE *)(result + 1) = v19 & 0x7F;
            int v20 = 2;
          }
        }

        else
        {
          *(_BYTE *)uint64_t result = v19;
          int v20 = 1;
        }

        if (v14 && v11 == v18)
        {
          if ((int)v10 >= *((_DWORD *)v24 + 2))
          {
            uint64_t v10 = 0xFFFFFFFFLL;
            int64_t v11 = v18;
          }

          else
          {
            uint64_t result = sub_18138BFCC((char *)(*v24 + v10), (unint64_t *)&v26);
            v10 += result;
            int64_t v11 = v26 + v18;
          }
        }

        if (v12 >= *(_DWORD *)(a4 + 8))
        {
          int v12 = -1;
          int64_t v13 = v18;
        }

        else
        {
          uint64_t result = sub_18138BFCC((char *)(*(void *)a4 + v12), (unint64_t *)&v26);
          v12 += result;
          int64_t v13 = v26 + v18;
        }

        int64_t v16 = v18;
      }

      v15 += v20;
      BOOL v14 = (int)v10 >= 0;
    }

    while ((v10 & 0x80000000) == 0 || (v12 & 0x80000000) == 0);
LABEL_46:
    uint64_t v22 = *v24;
    *uint64_t v24 = v25;
    *((_DWORD *)v24 + 2) = v15;
    *((_DWORD *)v24 + 3) = v9;
    if (!v22) {
      return result;
    }
    uint64_t v23 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v22);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v22);
      uint64_t v22 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return result;
      }
      uint64_t v23 = &xmmword_18C465410;
    }

    return (*v23)(v22);
  }

  return result;
}

uint64_t sub_181397818(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18138A828((_DWORD *)(a1 + 60), a4, a2);
}

uint64_t sub_181397828(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  v111[129] = *MEMORY[0x1895F89C0];
  uint64_t v7 = (a3 + 1);
  __memset_chk();
  uint64_t result = (uint64_t)&v111[8 * (uint64_t)a3 + 1];
  v111[0] = result;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  uint64_t v9 = *((unsigned int *)a2 + 2);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *a2;
    *(void *)(result + 16) = *a2;
    *(void *)uint64_t result = v10 + v9;
    uint64_t result = sub_181398660(result);
  }

  if (a3 < 1) {
    return result;
  }
  uint64_t v105 = v7;
  uint64_t v11 = 0LL;
  int v12 = 0;
  int v109 = a3;
  uint64_t v13 = a3;
  do
  {
    int v15 = &v111[8 * v11 + 1];
    *(_OWORD *)int v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    uint64_t v16 = a4 + 16 * v11;
    int v19 = *(_DWORD *)(v16 + 8);
    int64_t v18 = (_DWORD *)(v16 + 8);
    uint64_t v17 = v19;
    if (v19 >= 1)
    {
      uint64_t v20 = *(void *)(a4 + 16 * v11);
      v15[2] = v20;
      *int v15 = v20 + v17;
      uint64_t result = sub_181398660((uint64_t)&v111[8 * v11 + 1]);
    }

    if (v15[2])
    {
      uint64_t v21 = v111[0];
      if (v111[0] && (uint64_t v22 = v15[1], v22 > *(void *)(v111[0] + 8LL)))
      {
        do
        {
          uint64_t v23 = v21;
          uint64_t v21 = *(void *)(v21 + 56);
        }

        while (v21 && v22 > *(void *)(v21 + 8));
        BOOL v14 = (void *)(v23 + 56);
      }

      else
      {
        BOOL v14 = v111;
      }

      v111[8 * v11 + 8] = v21;
      *BOOL v14 = v15;
    }

    v12 += *v18;
    ++v11;
  }

  while (v11 != v13);
  if (!v12) {
    return result;
  }
  unint64_t v24 = (v12 + 10 * v109 + *((_DWORD *)a2 + 2) + 9);
  if (v12 + 10 * v109 + *((_DWORD *)a2 + 2) == -9)
  {
    int v103 = a2;
    uint64_t v27 = 0LL;
    LODWORD(v26) = 0;
  }

  else
  {
    uint64_t v25 = 64LL;
    do
    {
      unint64_t v26 = v25;
      v25 *= 2LL;
    }

    while (v26 < v24);
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C(0LL, v26)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      return result;
    }

    uint64_t v27 = result;
    int v103 = a2;
  }

  int v102 = v26;
  uint64_t v28 = v111[0];
  uint64_t v104 = v27;
  if (!v111[0])
  {
    int __src = 0LL;
    int v31 = 0;
    goto LABEL_159;
  }

  int __src = 0LL;
  LODWORD(v29) = 0;
  uint64_t v30 = 0LL;
  int v31 = 0;
  while (1)
  {
    uint64_t v34 = (int8x8_t *)(v27 + v31);
    unint64_t v35 = *(void *)(v28 + 8) - v30;
    if (v35 > 0x7F)
    {
      if (v35 >> 14)
      {
        uint64_t result = sub_181308E00(v34, v35);
        uint64_t v28 = v111[0];
      }

      else
      {
        v34->i8[0] = (v35 >> 7) | 0x80;
        v34->i8[1] = v35 & 0x7F;
        uint64_t result = 2LL;
      }
    }

    else
    {
      v34->i8[0] = v35;
      uint64_t result = 1LL;
    }

    uint64_t v36 = v31 + (uint64_t)(int)result;
    uint64_t v30 = *(void *)(v28 + 8);
    uint64_t v37 = *(void *)(v28 + 56);
    if (v37)
    {
      if (v30 == *(void *)(v37 + 8)) {
        break;
      }
    }

    memcpy((void *)(v27 + (int)v36), *(const void **)(v28 + 16), *(int *)(v28 + 28) + (uint64_t)*(int *)(v28 + 24));
    int v31 = *(_DWORD *)(v28 + 24) + v36 + *(_DWORD *)(v28 + 28);
    uint64_t result = sub_181398660(v28);
    uint64_t v33 = *(void *)(v28 + 56);
    v111[0] = v33;
    if (!*(void *)(v28 + 16)) {
      goto LABEL_30;
    }
    if (v33 && (uint64_t v48 = *(void *)(v28 + 8), v48 > *(void *)(v33 + 8)))
    {
      do
      {
        uint64_t v49 = v33;
        uint64_t v33 = *(void *)(v33 + 56);
      }

      while (v33 && v48 > *(void *)(v33 + 8));
      unint64_t v32 = (uint64_t *)(v49 + 56);
    }

    else
    {
      unint64_t v32 = v111;
    }

    *(void *)(v28 + 56) = v33;
    uint64_t *v32 = v28;
LABEL_29:
    uint64_t v33 = v111[0];
LABEL_30:
    uint64_t v28 = v33;
    if (!v33) {
      goto LABEL_159;
    }
  }

  int v38 = 0;
  v111[0] = 0LL;
  int v39 = 8;
  do
  {
    if (*(void *)(v28 + 8) != v30) {
      break;
    }
    *(_DWORD *)(v28 + 40) = 0;
    *(void *)(v28 + 32) = 0LL;
    uint64_t v41 = *(void *)(v28 + 56);
    int v42 = *(_DWORD *)(v28 + 24);
    uint64_t v43 = *(void *)(v28 + 16) + *(int *)(v28 + 28);
    *(void *)(v28 + 48) = v43;
    uint64_t result = sub_181392B00(v43, v42, (int *)(v28 + 40), (uint64_t *)(v28 + 32));
    int v44 = *(_DWORD *)(v28 + 24);
    uint64_t v45 = *(void *)(v28 + 32);
    if ((v45 & 0x8000000000000000LL) == 0)
    {
      uint64_t v46 = v111[0];
      if (v111[0] && v45 > *(void *)(v111[0] + 32LL))
      {
        do
        {
          uint64_t v47 = v46;
          uint64_t v46 = *(void *)(v46 + 56);
        }

        while (v46 && v45 > *(void *)(v46 + 32));
        unint64_t v40 = (uint64_t *)(v47 + 56);
      }

      else
      {
        unint64_t v40 = v111;
      }

      *(void *)(v28 + 56) = v46;
      *unint64_t v40 = v28;
    }

    v39 += v44 + 10;
    ++v38;
    uint64_t v28 = v41;
  }

  while (v41);
  uint64_t v50 = v111[0];
  if (!v111[0] || (uint64_t v51 = *(void *)(v111[0] + 56LL)) == 0)
  {
    int v97 = 267;
    goto LABEL_156;
  }

  unint64_t v52 = (v39 + 10 * v38);
  uint64_t v106 = v30;
  uint64_t v107 = v36;
  if (v29 >= v52)
  {
    int v54 = __src;
  }

  else
  {
    if ((_DWORD)v29) {
      LODWORD(v53) = v29;
    }
    else {
      LODWORD(v53) = 64;
    }
    unint64_t v53 = (int)v53;
    do
    {
      unint64_t v29 = v53;
      v53 *= 2LL;
    }

    while (v29 < v52);
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C((uint64_t)__src, v29)) == 0)
    {
      int v97 = 7;
LABEL_156:
      uint64_t v98 = a1;
LABEL_157:
      *(_DWORD *)(v98 + 60) = v97;
      goto LABEL_158;
    }

    uint64_t v51 = *(void *)(v50 + 56);
    int v54 = (_BYTE *)result;
  }

  v111[0] = v51;
  unint64_t v55 = *(void *)(v50 + 32);
  if ((v55 & 0x8000000000000000LL) != 0)
  {
    int v58 = 0;
    unint64_t v55 = 0LL;
  }

  else
  {
    if ((v55 & 0x7FFFFFFF00000000LL) != 0)
    {
      _BYTE *v54 = 1;
      int v56 = (int8x8_t *)(v54 + 1);
      if (v55 >> 39)
      {
        if (v55 >> 46)
        {
          int v57 = sub_181308E00(v56, HIDWORD(v55));
        }

        else
        {
          v54[1] = (v55 >> 39) | 0x80;
          v54[2] = BYTE4(v55) & 0x7F;
          int v57 = 2;
        }
      }

      else
      {
        v56->i8[0] = BYTE4(v55);
        int v57 = 1;
      }

      int v59 = v57 + 1;
    }

    else
    {
      int v59 = 0;
    }

    uint64_t v60 = (int8x8_t *)&v54[v59];
    if ((v55 & 0x80000000FFFFFFFFLL) > 0x7D)
    {
      if ((v55 & 0x80000000FFFFFFFFLL) > 0x3FFD)
      {
        int v61 = sub_181308E00(v60, (v55 & 0x80000000FFFFFFFFLL) + 2);
      }

      else
      {
        v60->i8[0] = ((v55 + 2) >> 7) | 0x80;
        v60->i8[1] = (v55 + 2) & 0x7F;
        int v61 = 2;
      }
    }

    else
    {
      v60->i8[0] = v55 + 2;
      int v61 = 1;
    }

    int v58 = v59 + v61;
  }

  uint64_t result = sub_181392B00(*(void *)(v50 + 48), *(_DWORD *)(v50 + 24), (int *)(v50 + 40), (uint64_t *)(v50 + 32));
  uint64_t v62 = *(void *)(v50 + 32);
  if ((v62 & 0x8000000000000000LL) == 0)
  {
    if (v51 && v62 > *(void *)(v51 + 32))
    {
      do
      {
        uint64_t v63 = v51;
        uint64_t v51 = *(void *)(v51 + 56);
      }

      while (v51 && v62 > *(void *)(v51 + 32));
      uint64_t v64 = (void *)(v63 + 56);
    }

    else
    {
      uint64_t v64 = v111;
    }

    *(void *)(v50 + 56) = v51;
    void *v64 = v50;
  }

  uint64_t v65 = v111[0];
  uint64_t v66 = (uint64_t *)(v111[0] + 56LL);
  int __src = v54;
  if (*(void *)(v111[0] + 56LL))
  {
    do
    {
      uint64_t v74 = *(void *)(v65 + 32);
      if ((uint64_t)v55 < v74)
      {
        if ((v74 & 0x7FFFFFFF00000000LL) != (v55 & 0x7FFFFFFF00000000LL))
        {
          uint64_t v75 = v58 + 1LL;
          v54[v58] = 1;
          uint64_t v76 = (int8x8_t *)&v54[v75];
          if ((unint64_t)v74 >> 39)
          {
            if ((unint64_t)v74 >> 46)
            {
              int v77 = sub_181308E00(v76, v74 >> 32);
            }

            else
            {
              v76->i8[0] = (HIDWORD(v74) >> 7) | 0x80;
              v76->i8[1] = BYTE4(v74) & 0x7F;
              int v77 = 2;
            }
          }

          else
          {
            v76->i8[0] = BYTE4(v74);
            int v77 = 1;
          }

          int v58 = v75 + v77;
          unint64_t v55 = v74 & 0x7FFFFFFF00000000LL;
        }

        unint64_t v78 = (int8x8_t *)&v54[v58];
        unint64_t v79 = v74 - v55 + 2;
        if (v79 > 0x7F)
        {
          if (v79 >> 14)
          {
            int v80 = sub_181308E00(v78, v79);
          }

          else
          {
            v78->i8[0] = (v79 >> 7) | 0x80;
            v78->i8[1] = v79 & 0x7F;
            int v80 = 2;
          }
        }

        else
        {
          v78->i8[0] = v79;
          int v80 = 1;
        }

        v58 += v80;
        unint64_t v55 = v74;
      }

      uint64_t result = sub_181392B00(*(void *)(v65 + 48), *(_DWORD *)(v65 + 24), (int *)(v65 + 40), (uint64_t *)(v65 + 32));
      uint64_t v67 = *v66;
      v111[0] = *v66;
      uint64_t v81 = *(void *)(v65 + 32);
      if ((v81 & 0x8000000000000000LL) == 0)
      {
        if (v67 && v81 > *(void *)(v67 + 32))
        {
          do
          {
            uint64_t v82 = v67;
            uint64_t v67 = *(void *)(v67 + 56);
          }

          while (v67 && v81 > *(void *)(v67 + 32));
          unsigned int v73 = (void *)(v82 + 56);
        }

        else
        {
          unsigned int v73 = v111;
        }

        *uint64_t v66 = v67;
        *unsigned int v73 = v65;
        uint64_t v67 = v111[0];
      }

      uint64_t v66 = (uint64_t *)(v67 + 56);
      uint64_t v65 = v67;
    }

    while (*(void *)(v67 + 56));
  }

  else
  {
    uint64_t v67 = v111[0];
  }

  uint64_t v68 = *(void *)(v67 + 32);
  if ((uint64_t)v55 >= v68)
  {
    int v69 = v109;
    uint64_t v36 = v107;
  }

  else
  {
    int v69 = v109;
    if ((v68 & 0x7FFFFFFF00000000LL) != (v55 & 0x7FFFFFFF00000000LL))
    {
      uint64_t v70 = v58 + 1LL;
      v54[v58] = 1;
      int v71 = (int8x8_t *)&v54[v70];
      if ((unint64_t)v68 >> 39)
      {
        if ((unint64_t)v68 >> 46)
        {
          int v72 = sub_181308E00(v71, v68 >> 32);
        }

        else
        {
          v71->i8[0] = (HIDWORD(v68) >> 7) | 0x80;
          v71->i8[1] = BYTE4(v68) & 0x7F;
          int v72 = 2;
        }
      }

      else
      {
        v71->i8[0] = BYTE4(v68);
        int v72 = 1;
      }

      int v58 = v70 + v72;
      unint64_t v55 = v68 & 0x7FFFFFFF00000000LL;
    }

    int v83 = (int8x8_t *)&v54[v58];
    unint64_t v84 = v68 - v55 + 2;
    if (v84 > 0x7F)
    {
      uint64_t v36 = v107;
      if (v84 >> 14)
      {
        uint64_t result = sub_181308E00(v83, v84);
      }

      else
      {
        v83->i8[0] = (v84 >> 7) | 0x80;
        v83->i8[1] = v84 & 0x7F;
        uint64_t result = 2LL;
      }
    }

    else
    {
      v83->i8[0] = v84;
      uint64_t result = 1LL;
      uint64_t v36 = v107;
    }

    v58 += result;
  }

  size_t v85 = (*(_DWORD *)(v67 + 24) - *(_DWORD *)(v67 + 40));
  unsigned int v86 = v58 + v85;
  if (v58 + (int)v85 <= v39 - 8)
  {
    uint64_t v27 = v104;
    uint64_t v87 = (int8x8_t *)(v104 + v36);
    unint64_t v88 = (int)(2 * v86);
    if (2 * v86 > 0x7F)
    {
      if (v88 >> 14)
      {
        int v89 = sub_181308E00(v87, v88);
      }

      else
      {
        v87->i8[0] = (v86 >> 6) | 0x80;
        v87->i8[1] = (2 * v86) & 0x7E;
        int v89 = 2;
      }
    }

    else
    {
      v87->i8[0] = 2 * v86;
      int v89 = 1;
    }

    uint64_t v90 = v89 + (uint64_t)(int)v36;
    uint64_t result = (uint64_t)memcpy((void *)(v104 + v90), __src, v58);
    int v31 = v58 + v90;
    if ((int)v85 >= 1)
    {
      uint64_t result = (uint64_t)memcpy( (void *)(v104 + v31),  (const void *)(*(void *)(v111[0] + 48LL) + *(int *)(v111[0] + 40LL)),  v85);
      v31 += v85;
    }

    v111[0] = v28;
    if (v69 < 0)
    {
      uint64_t v33 = v28;
      uint64_t v30 = v106;
      goto LABEL_30;
    }

    uint64_t v91 = 0LL;
    uint64_t v30 = v106;
    do
    {
      uint64_t v93 = &v111[8 * v91 + 1];
      if (v93[2])
      {
        if (v93[1] == v106)
        {
          uint64_t result = sub_181398660((uint64_t)&v111[8 * v91 + 1]);
          if (v93[2])
          {
            uint64_t v94 = v111[0];
            if (v111[0] && (uint64_t v95 = v93[1], v95 > *(void *)(v111[0] + 8LL)))
            {
              do
              {
                uint64_t v96 = v94;
                uint64_t v94 = *(void *)(v94 + 56);
              }

              while (v94 && v95 > *(void *)(v94 + 8));
              int v92 = (void *)(v96 + 56);
            }

            else
            {
              int v92 = v111;
            }

            v111[8 * v91 + 8] = v94;
            *int v92 = v93;
          }
        }
      }

      ++v91;
    }

    while (v91 != v105);
    goto LABEL_29;
  }

  uint64_t v98 = a1;
  if (!*(_DWORD *)(a1 + 60))
  {
    int v97 = 267;
    goto LABEL_157;
  }

uint64_t sub_181398280(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(result + 60))
  {
    size_t v7 = *(int *)(a3 + 16);
    int v8 = *(_DWORD *)(a4 + 8);
    unsigned int v9 = *(_DWORD *)(a4 + 12);
    unint64_t v10 = (v7 + v8 + 26);
    if (v10 <= v9)
    {
      uint64_t result = *(void *)a4;
    }

    else
    {
      uint64_t v11 = result;
      if (v9) {
        LODWORD(v12) = *(_DWORD *)(a4 + 12);
      }
      else {
        LODWORD(v12) = 64;
      }
      unint64_t v12 = (int)v12;
      do
      {
        unint64_t v13 = v12;
        v12 *= 2LL;
      }

      while (v13 < v10);
      uint64_t v14 = *(void *)a4;
      uint64_t result = sqlite3_initialize();
      if ((_DWORD)result || (uint64_t result = sub_18127D33C(v14, v13)) == 0)
      {
        *(_DWORD *)(v11 + 60) = 7;
        return result;
      }

      *(_DWORD *)(a4 + 12) = v13;
      *(void *)a4 = result;
      int v8 = *(_DWORD *)(a4 + 8);
    }

    int v15 = (int8x8_t *)(result + v8);
    if (a2 > 0x7F)
    {
      if (a2 >> 14)
      {
        int v16 = sub_181308E00(v15, a2);
      }

      else
      {
        v15->i8[0] = (a2 >> 7) | 0x80;
        v15->i8[1] = a2 & 0x7F;
        int v16 = 2;
      }
    }

    else
    {
      v15->i8[0] = a2;
      int v16 = 1;
    }

    uint64_t v17 = *(int *)(a4 + 8) + (uint64_t)v16;
    *(_DWORD *)(a4 + 8) = v17;
    int64_t v18 = (int8x8_t *)(*(void *)a4 + v17);
    unint64_t v19 = 2 * v7;
    if ((2 * v7) > 0x7F)
    {
      if (v19 >> 14)
      {
        int v20 = sub_181308E00(v18, v19);
      }

      else
      {
        v18->i8[0] = (v7 >> 6) | 0x80;
        v18->i8[1] = v19 & 0x7E;
        int v20 = 2;
      }
    }

    else
    {
      v18->i8[0] = v19;
      int v20 = 1;
    }

    uint64_t v21 = *(int *)(a4 + 8) + (uint64_t)v20;
    *(_DWORD *)(a4 + 8) = v21;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)a4 + v21), *(const void **)(a3 + 8), v7);
    size_t v22 = *(int *)(a4 + 8) + v7;
    *(_DWORD *)(a4 + 8) = v22;
    *(void *)(*(void *)a4 + v22) = 0LL;
  }

  return result;
}

uint64_t sub_181398408(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v5 = result;
    int v6 = a2 + 96;
    *a3 = 0;
    do
    {
      uint64_t v7 = *(unsigned __int16 *)(*(void *)(a2 + 88) + 4LL);
      uint64_t v8 = a2 + 136 * v7;
      uint64_t v9 = v8 + 96;
      int v27 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 152))(v5, v8 + 96, &v27);
      if (*(void *)(v8 + 112)) {
        BOOL v10 = v27 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v16 = *(void *)(a2 + 136LL * v7 + 216);
        uint64_t v17 = *(void *)(a2 + 80);
        if (v16 == v17)
        {
          int v18 = *(_DWORD *)(a2 + 68);
LABEL_26:
          uint64_t v20 = v7 ^ 1;
          if (v18) {
            int64_t v21 = 0x8000000000000000LL;
          }
          else {
            int64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          *(void *)(a2 + 80) = v21;
          int v11 = *(_DWORD *)(a2 + 64) + v7;
          uint64_t v12 = *(void *)(a2 + 88);
          int v22 = v11;
          while (2)
          {
            if (v22 >= 0) {
              int v23 = v22;
            }
            else {
              int v23 = v22 + 1;
            }
            uint64_t v24 = v12 + 4LL * (v23 >> 1);
            if (*(_BYTE *)(v24 + 2))
            {
              int64_t v25 = *(void *)(v9 + 120);
              int64_t v26 = *(void *)(a2 + 136 * v20 + 216);
              if (v25 == v26) {
                goto LABEL_9;
              }
              if (v18 == v26 > v25)
              {
                uint64_t v9 = a2 + 136 * v20 + 96;
                goto LABEL_38;
              }

              if (v18 == v26 > v21)
              {
LABEL_38:
                *(void *)(a2 + 80) = v26;
                int64_t v21 = v26;
              }
            }

            *(_WORD *)uint64_t v24 = -3855 * ((v9 - v6) >> 3);
            if ((v22 & 0xFFFFFFFE) == 2) {
              goto LABEL_11;
            }
            uint64_t v20 = *(unsigned __int16 *)(v12 + 4 * (((uint64_t)v23 >> 1) ^ 1));
            int v22 = v23 >> 1;
            continue;
          }
        }

        int v18 = v16 < v17;
        if (*(_DWORD *)(a2 + 68) == v18) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(a2 + 88);
      }

      else
      {
        int v11 = *(_DWORD *)(a2 + 64) + v7;
LABEL_9:
        if (v11 >= 2)
        {
          do
          {
            if (*(_DWORD *)(v5 + 60)) {
              break;
            }
            int v11 = v11 >> 1;
            uint64_t result = sub_18139176C(a2, v11);
            if ((_DWORD)result)
            {
              int v15 = result;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 136LL * (int)result + 152))( v5,  a2 + 136LL * (int)result + 96,  0LL);
              int v11 = *(_DWORD *)(a2 + 64) + v15;
            }
          }

          while (v11 > 1);
        }

        uint64_t v12 = *(void *)(a2 + 88);
        uint64_t v13 = a2 + 136LL * *(unsigned __int16 *)(v12 + 4);
        *(_BYTE *)(a2 + 20) = *(void *)(v13 + 112) == 0LL;
        *(void *)(a2 + 80) = *(void *)(v13 + 216);
        *a3 = 1;
      }

uint64_t sub_181398660(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16) + *(int *)(result + 28);
  unint64_t v3 = v2 + *(int *)(result + 24);
  unint64_t v4 = *(void *)result;
  if (v3 >= *(void *)result)
  {
    *(void *)(result + 16) = 0LL;
  }

  else
  {
    uint64_t result = sub_18138BFCC((char *)(v2 + *(int *)(result + 24)), &v12);
    uint64_t v5 = (char *)(v3 + result);
    *(void *)(v1 + 8) += v12;
    unsigned int v6 = *v5;
    if ((v6 & 0x80) != 0)
    {
      int v8 = v5[1];
      if (v5[1] < 0)
      {
        int v10 = v5[2];
        if (v10 < 0)
        {
          uint64_t result = sub_18138BFCC(v5, &v13);
          unsigned int v9 = v13 & 0x7FFFFFFF;
        }

        else
        {
          unsigned int v9 = v10 & 0x7F | (v6 << 14) & 0x1FC07F | ((v8 & 0x7F) << 7);
          uint64_t result = 3LL;
        }
      }

      else
      {
        unsigned int v9 = ((v6 & 0x7F) << 7) | v8;
        uint64_t result = 2LL;
      }

      unsigned int v7 = v9 >> 1;
      *(_DWORD *)(v1 + 24) = v7;
      *(_DWORD *)(v1 + 28) = result;
    }

    else
    {
      unsigned int v7 = v6 >> 1;
      *(_DWORD *)(v1 + 24) = v7;
      *(_DWORD *)(v1 + 28) = 1;
    }

    else {
      int v11 = 0LL;
    }
    *(void *)(v1 + 16) = v11;
  }

  return result;
}

uint64_t sub_181398754(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)(a2 + 120);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 128);
  return result;
}

uint64_t sub_181398768(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  *(void *)uint64_t result = *(void *)(a2 + 120);
  uint64_t v3 = *(int *)(a2 + 128);
  *(_DWORD *)(result + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = v4 + v3;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v5 <= *(int *)(v6 + 12))
  {
    uint64_t v7 = *(void *)v6 + v4;
  }

  else
  {
    *(_DWORD *)(result + 40) = 0;
    uint64_t result = sub_181398B68(*(_DWORD **)(result + 24), a2, 0LL, result + 32);
    uint64_t v7 = *(void *)(v2 + 32);
  }

  *(void *)(v2 + 8) = v7;
  return result;
}

uint64_t sub_1813987D4(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1813987DC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int **)(result + 48);
  *(void *)uint64_t result = *(void *)(a2 + 120);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a2 + 128);
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  if (v4 + v5 <= *((int *)v6 + 3))
  {
    uint64_t v8 = *v6;
    uint64_t v9 = *(void *)(result + 24);
    *(_DWORD *)(result + 40) = 0;
    if (*(_DWORD *)(v9 + 60)) {
      return result;
    }
    if ((int)*v3 > 1)
    {
      LODWORD(v10) = *(_DWORD *)(result + 44);
      if (v10 < v5)
      {
        if (!(_DWORD)v10) {
          LODWORD(v10) = 64;
        }
        unint64_t v10 = (int)v10;
        do
        {
          unint64_t v11 = v10;
          v10 *= 2LL;
        }

        while (v11 < v5);
        uint64_t v12 = *(void *)(result + 32);
        uint64_t result = sqlite3_initialize();
        if ((_DWORD)result || (uint64_t result = sub_18127D33C(v12, v11)) == 0)
        {
          *(_DWORD *)(v9 + 60) = 7;
          return result;
        }

        *(_DWORD *)(v2 + 44) = v11;
        *(void *)(v2 + 32) = result;
      }
    }

    signed int v13 = 0;
    LODWORD(v14) = 0;
    int v15 = (char *)(v8 + v4);
    unint64_t v16 = v8 + v4 + v5;
    uint64_t v17 = (char *)(v8 + v4);
    while (1)
    {
      uint64_t v14 = (int)v14;
      while (1)
      {
        signed int v18 = v3[v14 + 1];
        if (v18 >= v13) {
          break;
        }
        if ((_DWORD)++v14 == *v3) {
          goto LABEL_3;
        }
      }

      if ((unint64_t)v17 >= v16)
      {
        BOOL v21 = 0;
        unsigned int v19 = v17;
      }

      else
      {
        unsigned int v19 = v17;
        do
        {
          int v20 = *v19;
          BOOL v21 = v20 == 1;
          if (v20 == 1) {
            break;
          }
          ++v19;
          if (v20 < 0)
          {
            do
              int v22 = *v19++;
            while (v22 < 0);
          }
        }

        while ((unint64_t)v19 < v16);
      }

      if (v18 == v13)
      {
        if (*v3 == 1)
        {
          *(void *)(v2 + 8) = v15;
          int v7 = (_DWORD)v19 - (_DWORD)v15;
          goto LABEL_4;
        }

        int v23 = (_DWORD)v19 - (_DWORD)v15;
        uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v2 + 32) + *(int *)(v2 + 40)), v15, v19 - v15);
        *(_DWORD *)(v2 + 40) += v23;
      }

      if (!v21) {
        goto LABEL_3;
      }
      uint64_t v17 = v19 + 2;
      signed int v13 = v19[1];
      int v15 = v19;
      if (v19[1] < 0)
      {
        int v24 = *v17;
        char v25 = v24;
        if (v24 < 0)
        {
          int v27 = v19[3];
          if (v27 < 0)
          {
            uint64_t result = sub_18138BFCC(v19 + 1, &v28);
            signed int v13 = v28 & 0x7FFFFFFF;
            uint64_t v26 = result;
          }

          else
          {
            signed int v13 = v27 & 0x7F | (v13 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
            uint64_t v26 = 3LL;
          }
        }

        else
        {
          signed int v13 = ((v13 & 0x7F) << 7) | v24;
          uint64_t v26 = 2LL;
        }

        uint64_t v17 = &v19[v26 + 1];
        int v15 = v19;
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  uint64_t result = sub_181398B68(*(_DWORD **)(result + 24), a2, v3, result + 32);
LABEL_3:
  *(void *)(v2 + 8) = *(void *)(v2 + 32);
  int v7 = *(_DWORD *)(v2 + 40);
LABEL_4:
  *(_DWORD *)(v2 + 16) = v7;
  return result;
}

uint64_t sub_181398A30(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a2 + 128);
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  if (v4 + v5 <= *((int *)v6 + 3))
  {
    uint64_t v9 = *v6;
    unint64_t v10 = *(int **)(result + 48);
    uint64_t v13 = *v10;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v13;
    uint64_t v14 = *(_BYTE **)(result + 32);
    *(void *)uint64_t result = *(void *)(a2 + 120);
    if ((int)v5 >= 1)
    {
      char v15 = 0;
      int v16 = 0;
      uint64_t v17 = (unsigned __int8 *)(v9 + v4);
      signed int v18 = &v17[v5];
      unsigned int v19 = &v11[v12];
      do
      {
        int v20 = *v17++;
        int v16 = v16 + v20 - 2;
        while (*v11 < v16)
        {
          if (++v11 == v19) {
            goto LABEL_12;
          }
        }

        if (*v11 == v16)
        {
          *v14++ = v16 - v15 + 2;
          char v15 = v16;
        }
      }

      while (v17 < v18);
    }

uint64_t sub_181398B20(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t result = sub_181398B68(*(_DWORD **)(a1 + 24), a2, *(unsigned int **)(a1 + 48), a1 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)a1 = *(void *)(a2 + 120);
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
  return result;
}

uint64_t sub_181398B68(_DWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 128);
  int v9 = *(_DWORD *)(a4 + 8);
  unsigned int v10 = *(_DWORD *)(a4 + 12);
  unint64_t v11 = (v9 + v8 + 8);
  if (v11 <= v10)
  {
    uint64_t result = *(void *)a4;
  }

  else
  {
    if (v10) {
      LODWORD(v12) = *(_DWORD *)(a4 + 12);
    }
    else {
      LODWORD(v12) = 64;
    }
    unint64_t v12 = (int)v12;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2LL;
    }

    while (v13 < v11);
    uint64_t v14 = *(void *)a4;
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C(v14, v13)) == 0)
    {
      a1[15] = 7;
      return result;
    }

    *(_DWORD *)(a4 + 12) = v13;
    *(void *)a4 = result;
    int v9 = *(_DWORD *)(a4 + 8);
    int v8 = *(_DWORD *)(a2 + 128);
  }

  *(void *)(result + v8 + v9) = 0LL;
  if (!a3) {
    return (uint64_t)sub_181398CC8( (uint64_t)a1,  (unsigned int **)a2,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_181398F44);
  }
  if (*(_DWORD *)(*(void *)a1 + 92LL))
  {
    uint64_t v21 = a3;
    uint64_t v22 = 0LL;
    uint64_t v20 = a4;
    int v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_181399268;
  }

  else
  {
    uint64_t v20 = a4;
    uint64_t v21 = a3;
    uint64_t v17 = *a3;
    if ((int)v17 < 1)
    {
      LODWORD(v17) = 0;
    }

    else
    {
      signed int v18 = a3 + 1;
      while (*v18++)
      {
        if (!--v17) {
          goto LABEL_23;
        }
      }

      LODWORD(v17) = 1;
    }

unsigned int *sub_181398CC8( uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a2;
  int v8 = 0LL;
  uint64_t v9 = *((int *)a2 + 32);
  unsigned int v10 = a2[2];
  unint64_t v11 = a2[4];
  uint64_t v12 = (uint64_t)v11 + *(void *)v10;
  uint64_t v13 = (int)v10[3] - (void)v11;
  if (v13 <= v9) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v9;
  }
  uint64_t v15 = *((int *)a2 + 3);
  if (((_BYTE)a2[1] & 2) != 0) {
    int v16 = 0;
  }
  else {
    int v16 = v15 + 1;
  }
  int v17 = ~(_DWORD)v15 + v16;
  for (uint64_t i = v15 + 1; ; ++i)
  {
    uint64_t result = (unsigned int *)a4(a1, a3, v12, v14);
    if (!v8) {
      goto LABEL_16;
    }
    uint64_t v20 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_15;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    uint64_t result = (unsigned int *)off_18C4653A8(v8);
    int v8 = (unsigned int *)xmmword_18C468B70;
    uint64_t v6 = a2;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v20 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
LABEL_15:
      uint64_t result = (unsigned int *)(*v20)(v8);
    }

void *sub_181398F44(int a1, uint64_t a2, void *__src, size_t __n)
{
  if ((int)__n >= 1)
  {
    int v4 = __n;
    uint64_t result = memcpy((void *)(*(void *)a2 + *(int *)(a2 + 8)), __src, __n);
    *(_DWORD *)(a2 + 8) += v4;
  }

  return result;
}

void sub_181398F94(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  if (a4 >= 1)
  {
    v34[11] = v4;
    v34[12] = v5;
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      int v9 = *a3;
      if (*a3 < 0)
      {
        int v11 = a3[1];
        if (a3[1] < 0)
        {
          int v12 = a3[2];
          if (v12 < 0)
          {
            uint64_t v10 = sub_18138BFCC(a3, v34);
            int v9 = v34[0] & 0x7FFFFFFF;
          }

          else
          {
            int v9 = v12 & 0x7F | (v9 << 14) & 0x1FC07F | ((v11 & 0x7F) << 7);
            uint64_t v10 = 3LL;
          }
        }

        else
        {
          int v9 = ((v9 & 0x7F) << 7) | v11;
          uint64_t v10 = 2LL;
        }
      }

      else
      {
        uint64_t v10 = 1LL;
      }

      uint64_t v13 = *(unsigned int **)(a2 + 8);
      uint64_t v14 = *v13;
      if ((int)v14 < 1)
      {
LABEL_15:
        *(_DWORD *)(a2 + 16) = 0;
      }

      else
      {
        uint64_t v15 = (int *)(v13 + 1);
        while (1)
        {
          int v16 = *v15++;
          if (v16 == v9) {
            break;
          }
          if (!--v14) {
            goto LABEL_15;
          }
        }

        *(_DWORD *)(a2 + 16) = 1;
        *(_BYTE *)(**(void **)a2 + (int)(*(_DWORD *)(*(void *)a2 + 8LL))++) = 1;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    uint64_t v17 = 0LL;
    do
    {
      if ((int)v10 >= a4)
      {
        BOOL v20 = 0;
LABEL_27:
        if (!*(_DWORD *)(a2 + 16)) {
          goto LABEL_29;
        }
      }

      else
      {
        while (1)
        {
          int v19 = a3[(int)v10];
          BOOL v20 = v19 == 1;
          if (v19 == 1) {
            break;
          }
          int v21 = (unsigned __int8 *)&a3[(int)v10];
          do
          {
            int v22 = (char)*v21++;
            uint64_t v10 = (v10 + 1);
          }

          while (v22 < 0);
        }

        BOOL v20 = 1;
        if (!*(_DWORD *)(a2 + 16)) {
          goto LABEL_29;
        }
      }

      memcpy((void *)(**(void **)a2 + *(int *)(*(void *)a2 + 8LL)), &a3[(int)v17], (int)v10 - (int)v17);
      *(_DWORD *)(*(void *)a2 + 8LL) += v10 - v17;
LABEL_29:
      if (v20)
      {
        uint64_t v18 = (int)v10 + 1LL;
        if ((int)v18 >= a4)
        {
          *(_DWORD *)(a2 + 16) = 2;
        }

        else
        {
          uint64_t v23 = (unsigned __int8 *)&a3[v18];
          int v24 = a3[v18];
          if (a3[v18] < 0)
          {
            int v25 = v23[1];
            if ((char)v23[1] < 0)
            {
              int v27 = (char)v23[2];
              if (v27 < 0)
              {
                int v26 = sub_18138BFCC((char *)v23, v34);
                int v24 = v34[0] & 0x7FFFFFFF;
              }

              else
              {
                int v24 = v27 & 0x7F | (v24 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
                int v26 = 3;
              }
            }

            else
            {
              int v24 = ((v24 & 0x7F) << 7) | v25;
              int v26 = 2;
            }

            uint64_t v18 = (v26 + v18);
          }

          else
          {
            uint64_t v18 = (v10 + 2);
          }

          unint64_t v28 = *(unsigned int **)(a2 + 8);
          uint64_t v29 = *v28;
          if ((int)v29 < 1)
          {
LABEL_46:
            *(_DWORD *)(a2 + 16) = 0;
          }

          else
          {
            uint64_t v30 = (int *)(v28 + 1);
            while (1)
            {
              int v31 = *v30++;
              if (v31 == v24) {
                break;
              }
              if (!--v29) {
                goto LABEL_46;
              }
            }

            *(_DWORD *)(a2 + 16) = 1;
            unint64_t v32 = (unsigned __int8 *)&a3[(int)v10];
            int v33 = v18 - v10;
            memcpy((void *)(**(void **)a2 + *(int *)(*(void *)a2 + 8LL)), v32, v33);
            *(_DWORD *)(*(void *)a2 + 8LL) += v33;
            uint64_t v10 = v18;
          }
        }
      }

      else
      {
        uint64_t v18 = v10;
        uint64_t v10 = v17;
      }

      uint64_t v17 = v10;
      uint64_t v10 = v18;
    }

    while ((int)v18 < a4);
  }

void sub_181399268(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    v24[9] = v4;
    v24[10] = v5;
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v11 = a3 + v9;
      int v12 = *(unsigned __int8 *)(a3 + v9);
      if (*(char *)(a3 + v9) < 0)
      {
        int v14 = *(unsigned __int8 *)(v11 + 1);
        if (*(char *)(v11 + 1) < 0)
        {
          int v15 = *(char *)(v11 + 2);
          if (v15 < 0)
          {
            uint64_t v13 = sub_18138BFCC((char *)v11, v24);
            int v12 = v24[0] & 0x7FFFFFFF;
          }

          else
          {
            int v12 = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
            uint64_t v13 = 3LL;
          }
        }

        else
        {
          int v12 = ((v12 & 0x7F) << 7) | v14;
          uint64_t v13 = 2LL;
        }
      }

      else
      {
        uint64_t v13 = 1LL;
      }

      int v16 = *(_DWORD *)(a2 + 16) + v12;
      int v17 = v16 - 2;
      *(_DWORD *)(a2 + 16) = v16 - 2;
      uint64_t v18 = *(unsigned int **)(a2 + 8);
      uint64_t v19 = *v18;
      if ((int)v19 >= 1)
      {
        BOOL v20 = (int *)(v18 + 1);
        while (1)
        {
          int v21 = *v20++;
          if (v21 == v17) {
            break;
          }
          if (!--v19) {
            goto LABEL_5;
          }
        }

        int v22 = (int8x8_t *)(**(void **)a2 + *(int *)(*(void *)a2 + 8LL));
        unsigned int v23 = v16 - *(_DWORD *)(a2 + 20);
        if (v23 <= 0x7F)
        {
          v22->i8[0] = v23;
          int v10 = 1;
        }

        else if (v23 >> 14)
        {
          int v10 = sub_181308E00(v22, (int)v23);
        }

        else
        {
          v22->i8[0] = (v23 >> 7) | 0x80;
          v22->i8[1] = v23 & 0x7F;
          int v10 = 2;
        }

        *(_DWORD *)(*(void *)a2 + 8LL) += v10;
        *(_DWORD *)(a2 + 20) = v17;
      }

uint64_t sub_1813993E0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v17 = 0LL;
  if (sqlite3_initialize()) {
    goto LABEL_2;
  }
  uint64_t v18 = 0LL;
  uint64_t v19 = (unsigned __int8 *)&v23;
  uint64_t v20 = 0x7FFFFFFD00000200LL;
  int v21 = 0;
  __int16 v22 = 0;
  sqlite3_str_vappendf((sqlite3_str *)&v18, "SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%w%s%s) %s", &a9);
  if (v19 && (v19[v21] = 0, HIDWORD(v20)) && (v22 & 0x400) == 0)
  {
    int v14 = (unsigned __int8 *)sub_1812F24E0(&v18);
    if (!v14) {
      goto LABEL_2;
    }
  }

  else
  {
    int v14 = v19;
    if (!v19)
    {
LABEL_2:
      uint64_t v11 = 7LL;
      goto LABEL_3;
    }
  }

  uint64_t v11 = sub_18126DFE0(*(void *)a2, v14, 0xFFFFFFFFLL, 129LL, 0LL, &v17, 0LL, v13);
  if ((_DWORD)v11)
  {
    int v15 = sqlite3_errmsg(*(sqlite3 **)a2);
    **(void **)(a2 + 184) = sqlite3_mprintf("%s", v15);
  }

  int v16 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_17:
    (*v16)(v14);
    goto LABEL_3;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
  --qword_18C468B10;
  off_18C4653A8(v14);
  int v14 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v16 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    goto LABEL_17;
  }

uint64_t sub_18139959C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)v2);
  if ((_DWORD)result == 101)
  {
    int v17 = 3;
  }

  else
  {
    if ((_DWORD)result != 100) {
      return result;
    }
    *(void *)(v2 + 8) = sqlite3_column_int64(*(sqlite3_stmt **)v2, 0);
    int v4 = sqlite3_column_bytes(*(sqlite3_stmt **)v2, 1);
    unint64_t v5 = (char *)sqlite3_column_blob(*(sqlite3_stmt **)v2, 1);
    if (v4 >= 1)
    {
      int v6 = (int)v5;
      uint64_t v7 = *(int *)(v2 + 24);
      if ((int)v7 < 2)
      {
        uint64_t v8 = 0LL;
        uint64_t v11 = v5;
      }

      else
      {
        uint64_t v8 = 0LL;
        int v9 = 0;
        uint64_t v10 = v7 - 1;
        uint64_t v11 = v5;
        do
        {
          int v13 = *v11;
          if (*v11 < 0)
          {
            int v14 = v11[1];
            if (v11[1] < 0)
            {
              int v15 = v11[2];
              if (v15 < 0)
              {
                unsigned int v16 = sub_18138BFCC(v11, &v18);
                int v13 = v18 & 0x7FFFFFFF;
                uint64_t v12 = v16;
              }

              else
              {
                int v13 = v15 & 0x7F | (v13 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
                uint64_t v12 = 3LL;
              }
            }

            else
            {
              int v13 = ((v13 & 0x7F) << 7) | v14;
              uint64_t v12 = 2LL;
            }
          }

          else
          {
            uint64_t v12 = 1LL;
          }

          v11 += v12;
          v9 += v13;
          *(_DWORD *)(v2 + 28 + 4 * v8++) = v9;
        }

        while (v8 < v10);
      }

      *(_DWORD *)(v2 + 4 * v8 + 28) = v6 + v4 - (_DWORD)v11;
      *(void *)(v2 + 16) = v11;
    }

    int v17 = 78;
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 80) |= v17;
  return result;
}

uint64_t sub_181399718(uint64_t *a1, int a2)
{
  uint64_t v3 = (sqlite3_stmt **)(a1 + 7);
  if (a1[7])
  {
    if ((a1[10] & 2) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t v5 = *a1;
    if (*((_DWORD *)a1 + 8) == 5) {
      unsigned int v6 = *((_DWORD *)a1 + 9) != 0;
    }
    else {
      unsigned int v6 = 2;
    }
    uint64_t v7 = *(uint64_t **)(v5 + 40);
    uint64_t v8 = (char **)(v5 + 16);
    if (a2) {
      int v9 = v8;
    }
    else {
      int v9 = 0LL;
    }
    uint64_t v4 = sub_18138AC28(v7, v6, v3, v9);
    if ((_DWORD)v4) {
      return v4;
    }
    v7[v6 + 5] = 0LL;
    if ((a1[10] & 2) == 0) {
      return 0LL;
    }
  }

  uint64_t v10 = *a1;
  sqlite3_reset((sqlite3_stmt *)a1[7]);
  uint64_t v11 = (void *)a1[7];
  uint64_t v12 = a1[9];
  if (v12) {
    int v13 = (uint64_t *)(v12 + 8);
  }
  else {
    int v13 = (uint64_t *)(*(void *)(a1[8] + 16) + 24LL);
  }
  uint64_t v14 = *v13;
  if (!sub_1812B2390(a1[7], 0))
  {
    uint64_t v15 = v11[16];
    if ((*(_WORD *)(v15 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v15, v14);
    }

    else
    {
      *(void *)uint64_t v15 = v14;
      *(_WORD *)(v15 + 20) = 4;
    }

    uint64_t v16 = *(void *)(*v11 + 24LL);
    if (v16) {
      xmmword_18C465410(v16);
    }
  }

  ++*(_DWORD *)(*(void *)(v10 + 24) + 120LL);
  int v17 = sqlite3_step(*v3);
  --*(_DWORD *)(*(void *)(v10 + 24) + 120LL);
  if (v17 == 100)
  {
    uint64_t v4 = 0LL;
    *((_DWORD *)a1 + 20) &= ~2u;
  }

  else
  {
    uint64_t v18 = sqlite3_reset(*v3);
    if ((_DWORD)v18)
    {
      uint64_t v4 = v18;
      uint64_t v19 = *(void *)(v10 + 24);
      if (*(void *)(v19 + 184))
      {
        uint64_t v20 = sqlite3_errmsg(*(sqlite3 **)v19);
        **(void **)(*(void *)(v10 + 24) + 184LL) = sqlite3_mprintf("%s", v20);
      }
    }

    else
    {
      return 267LL;
    }
  }

  return v4;
}

uint64_t sub_1813998D8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 144) + 16LL);
}

uint64_t sub_1813998E4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)a1 + 24LL) + 24LL);
}

uint64_t sub_1813998F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40LL);
  uint64_t result = sub_18139AA30(v3, 0);
  if (!(_DWORD)result)
  {
    *a2 = *(void *)(v3 + 24);
    else {
      return 267LL;
    }
  }

  return result;
}

uint64_t sub_181399940(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)(*(void *)a1 + 40LL);
  uint64_t result = sub_18139AA30((uint64_t)v5, 0);
  if (!(_DWORD)result)
  {
    *a3 = 0LL;
    uint64_t v7 = *(unsigned int *)(*v5 + 24LL);
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t result = 0LL;
      *a3 = *(void *)(v5[4] + 8LL * a2);
      return result;
    }

    if ((int)v7 >= 1)
    {
      unint64_t v8 = v5[4];
      if (v7 >= 8
        && (v8 + 8 * v7 > (unint64_t)a3 ? (BOOL v9 = v8 >= (unint64_t)(a3 + 1)) : (BOOL v9 = 1), v9))
      {
        uint64_t v10 = v7 & 0x7FFFFFFC;
        uint64_t v11 = (int64x2_t *)(v8 + 16);
        int64x2_t v12 = 0uLL;
        uint64_t v13 = v7 & 0xFFFFFFFC;
        int64x2_t v14 = 0uLL;
        do
        {
          int64x2_t v12 = vaddq_s64(v11[-1], v12);
          int64x2_t v14 = vaddq_s64(*v11, v14);
          v11 += 2;
          v13 -= 4LL;
        }

        while (v13);
        uint64_t v15 = vaddvq_s64(vaddq_s64(v14, v12));
        *a3 = v15;
        uint64_t v16 = v15;
        if (v10 == v7) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v10 = 0LL;
        uint64_t v16 = 0LL;
      }

      uint64_t v17 = v7 - v10;
      uint64_t v18 = (uint64_t *)(v8 + 8 * v10);
      do
      {
        uint64_t v19 = *v18++;
        v16 += v19;
        *a3 = v16;
        --v17;
      }

      while (v17);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_181399A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)a1 + 24LL) + 112LL)
  }
                                                                                          + 16LL))( *(void *)(*(void *)(*(void *)a1 + 24LL) + 104LL),  a4,  8LL,  a2,  a3,  a5);
  else {
    return 0LL;
  }
}

uint64_t sub_181399A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1) {
    return *(unsigned int *)(v1 + 28);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_181399AA0(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  else {
    return *(unsigned int *)(*(void *)(*(void *)(v2 + 32) + 8LL * a2) + 24LL);
  }
}

uint64_t sub_181399ACC(uint64_t a1, _DWORD *a2)
{
  if ((*(_BYTE *)(a1 + 80) & 8) == 0 || (uint64_t result = sub_18139ABA0(a1), !(_DWORD)result))
  {
    uint64_t result = 0LL;
    *a2 = *(_DWORD *)(a1 + 172);
  }

  return result;
}

uint64_t sub_181399B0C(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if ((*(_BYTE *)(a1 + 80) & 8) == 0 || (uint64_t result = sub_18139ABA0(a1), !(_DWORD)result))
  {
    if (a2 < 0 || *(_DWORD *)(a1 + 172) <= a2)
    {
      return 25LL;
    }

    else
    {
      uint64_t result = 0LL;
      uint64_t v11 = *(void *)(a1 + 176);
      int64x2_t v12 = (_DWORD *)(v11 + 12LL * a2);
      *a3 = *v12;
      *a4 = *(_DWORD *)(v11 + 12LL * a2 + 4);
      *a5 = v12[2];
    }
  }

  return result;
}

uint64_t sub_181399BA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return *(void *)(*(void *)(*(void *)(a1 + 64) + 16LL) + 24LL);
  }
}

uint64_t sub_181399BC4(_DWORD *a1, int a2, const unsigned __int8 **a3, int *a4)
{
  if (*(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 64LL) == 1 || a1[8] == 3)
  {
    int v7 = 0;
    *a3 = 0LL;
LABEL_4:
    uint64_t result = 0LL;
    *a4 = v7;
    return result;
  }

  uint64_t result = sub_181399718((uint64_t *)a1, 0);
  if (!(_DWORD)result)
  {
    int v10 = a2 + 1;
    *a3 = sqlite3_column_text(*((sqlite3_stmt **)a1 + 7), v10);
    int v7 = sqlite3_column_bytes(*((sqlite3_stmt **)a1 + 7), v10);
    goto LABEL_4;
  }

  return result;
}

uint64_t sub_181399C5C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    if (*(_DWORD *)(v6 + 88))
    {
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9) {
        int v10 = (uint64_t *)(v9 + 8);
      }
      else {
        int v10 = (uint64_t *)(*(void *)(*(void *)(a1 + 64) + 16LL) + 24LL);
      }
      uint64_t result = sub_18139B4F4(*(uint64_t **)(*(void *)a1 + 40LL), *v10, *(int **)(a1 + 16));
      goto LABEL_29;
    }

    if (!*(void *)(v6 + 72))
    {
      int v16 = *(_DWORD *)(v6 + 24);
      if (v16 >= 1)
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = *(void *)(v6 + 40);
        do
        {
          if (!*(_BYTE *)(v18 + v17))
          {
            *(_DWORD *)(*(void *)(a1 + 16) + 4 * v17) = -1;
            int v16 = *(_DWORD *)(v6 + 24);
          }

          ++v17;
        }

        while (v17 < v16);
      }

uint64_t sub_181399E70(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  int v8 = *(void **)a1;
  uint64_t v50 = 0LL;
  uint64_t v9 = sub_181381BDC(v8, &v50);
  uint64_t v10 = v50;
  if ((_DWORD)v9) {
    goto LABEL_2;
  }
  *(_DWORD *)(v50 + 32) = 1;
  *(_OWORD *)(v10 + 40) = xmmword_1813CDE50;
  *(void *)uint64_t v10 = v8;
  uint64_t v12 = *(void *)(a1 + 64);
  v51[0] = 0LL;
  v51[1] = 0LL;
  uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 8LL * a2);
  if (sqlite3_initialize())
  {
    uint64_t v14 = 0LL;
LABEL_9:
    uint64_t v11 = 7LL;
    goto LABEL_10;
  }

  uint64_t v15 = sub_18126F0AC(40LL);
  uint64_t v14 = v15;
  if (!v15) {
    goto LABEL_9;
  }
  *(void *)(v15 + 32) = 0LL;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  if (sqlite3_initialize() || (uint64_t v34 = (void *)sub_18126F0AC(8LL)) == 0LL)
  {
    *(void *)(v14 + 32) = 0LL;
    goto LABEL_9;
  }

  *uint64_t v34 = 0LL;
  *(void *)(v14 + 32) = v34;
  if (sqlite3_initialize() || (uint64_t v35 = sub_18126F0AC(56LL)) == 0)
  {
    *(void *)(v14 + 16) = 0LL;
    goto LABEL_9;
  }

  *(void *)(v35 + 48) = 0LL;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(void *)(v14 + 16) = v35;
  if (sqlite3_initialize() || (uint64_t v36 = sub_18126F0AC(40LL)) == 0)
  {
    *(void *)(*(void *)(v14 + 16) + 32LL) = 0LL;
    goto LABEL_9;
  }

  *(void *)(v36 + 32) = 0LL;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(void *)(*(void *)(v14 + 16) + 32LL) = v36;
  uint64_t v37 = *(int **)(*(void *)(*(void *)v13 + 32LL) + 8LL);
  if (!v37)
  {
    int v16 = (int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 24))
    {
LABEL_12:
      uint64_t v48 = v12;
      uint64_t v49 = a4;
      uint64_t v17 = 0LL;
      while (v17 < *v16)
      {
        uint64_t v18 = v13 + 32 * v17;
        int v19 = strlen(*(const char **)(v18 + 40));
        uint64_t v20 = sub_181393174((uint64_t)v51, 0, *(char **)(v18 + 40), v19);
        for (uint64_t i = *(void *)(v18 + 56); i && (_DWORD)v20 == 0; uint64_t i = *(void *)(i + 24))
        {
          int v23 = strlen(*(const char **)(i + 8));
          uint64_t v20 = sub_181393174((uint64_t)v51, 1, *(char **)(i + 8), v23);
        }

        uint64_t v11 = v20;
        if (!(_DWORD)v20)
        {
          uint64_t v24 = v51[0] + 32 * v17;
          *(_BYTE *)(v24 + 32) = *(_BYTE *)(v18 + 32);
          *(_BYTE *)(v24 + 33) = *(_BYTE *)(v13 + 32 * v17 + 33);
        }

        ++v17;
        if ((_DWORD)v20)
        {
          uint64_t v25 = v51[0];
          a4 = v49;
          goto LABEL_26;
        }
      }

      int v33 = (_OWORD *)v51[0];
      a4 = v49;
      if (v51[0])
      {
        uint64_t v12 = v48;
        goto LABEL_57;
      }

      uint64_t v25 = 0LL;
      uint64_t v11 = 0LL;
      goto LABEL_26;
    }

    goto LABEL_53;
  }

  int v38 = a4;
  int v39 = *v37;
  if (sqlite3_initialize() || (v47 = 4LL * (v39 - 1) + 8, (uint64_t v46 = (void *)sub_18126F0AC(v47)) == 0LL))
  {
    unint64_t v40 = 0LL;
    if (v39 >= 0) {
      uint64_t v11 = 7LL;
    }
    else {
      uint64_t v11 = 0LL;
    }
  }

  else
  {
    unint64_t v40 = v46;
    bzero(v46, v47);
    memcpy(v40, v37, v47);
    uint64_t v11 = 0LL;
  }

  a4 = v38;
  *(void *)(*(void *)(*(void *)(v14 + 16) + 32LL) + 8LL) = v40;
LABEL_10:
  int v16 = (int *)(v13 + 24);
  if (*(_DWORD *)(v13 + 24))
  {
    if (!(_DWORD)v11) {
      goto LABEL_12;
    }
LABEL_25:
    uint64_t v25 = 0LL;
    goto LABEL_26;
  }

  if ((_DWORD)v11) {
    goto LABEL_25;
  }
LABEL_53:
  if (!sqlite3_initialize())
  {
    int v33 = (_OWORD *)sub_18126F0AC(64LL);
    if (v33)
    {
      void v33[2] = 0u;
      v33[3] = 0u;
      *int v33 = 0u;
      v33[1] = 0u;
LABEL_57:
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v12;
      *(_DWORD *)(v14 + 28) = 1;
      **(void **)(v14 + 32) = v33;
      *(void *)(*(void *)(*(void *)(v14 + 16) + 32LL) + 24LL) = v33;
      uint64_t v41 = *(void *)(v14 + 16);
      *(_DWORD *)(*(void *)(v41 + 32) + 16LL) = 1;
      *(void *)int v33 = v41;
      if (*v16 != 1 || *(void *)(v13 + 56) || *(_BYTE *)(v13 + 33))
      {
        int v42 = sub_18138FF44;
        int v43 = 9;
      }

      else
      {
        int v42 = sub_18138FE30;
        int v43 = 4;
      }

      *(_DWORD *)uint64_t v41 = v43;
      *(void *)(v41 + 16) = v42;
      *(void *)(v10 + 64) = v14;
      uint64_t v10 = v50;
      goto LABEL_62;
    }
  }

  uint64_t v25 = 0LL;
  uint64_t v11 = 7LL;
LABEL_26:
  sub_18138CE6C(v14);
  sub_18138D1E8(v25);
  *(void *)(v10 + 64) = 0LL;
  if ((_DWORD)v11) {
    goto LABEL_27;
  }
LABEL_62:
  uint64_t v9 = sub_18138E9A8((uint64_t)v8, v10, 0);
  if (!(_DWORD)v9)
  {
    while (1)
    {
      if ((*(_BYTE *)(v10 + 80) & 1) != 0)
      {
        uint64_t v11 = 0LL;
        goto LABEL_27;
      }

      unsigned int v44 = a4(&unk_189B6F358, v10, a3);
      if (v44) {
        break;
      }
      uint64_t v45 = sub_181382B38(v10);
      if ((_DWORD)v45)
      {
        uint64_t v11 = v45;
        goto LABEL_27;
      }
    }

    if (v44 == 101) {
      uint64_t v11 = 0LL;
    }
    else {
      uint64_t v11 = v44;
    }
    goto LABEL_27;
  }

uint64_t sub_18139A320(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = *(void **)(a1 + 152);
  if (v6)
  {
    while (*v6 != *(void *)(a1 + 144))
    {
      uint64_t v6 = (void *)v6[3];
      if (!v6) {
        goto LABEL_4;
      }
    }

    int v8 = (void (*)(void))v6[2];
    if (v8) {
      v8(v6[1]);
    }
    goto LABEL_12;
  }

uint64_t sub_18139A3CC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (!v2) {
    return 0LL;
  }
  while (*v2 != *(void *)(a1 + 144))
  {
    uint64_t v2 = (void *)v2[3];
    if (!v2) {
      return 0LL;
    }
  }

  uint64_t v5 = v2[1];
  uint64_t v4 = v2 + 1;
  uint64_t result = v5;
  if (a2)
  {
    *uint64_t v4 = 0LL;
    v4[1] = 0LL;
  }

  return result;
}

uint64_t sub_18139A404(uint64_t a1, int a2, char **a3, _DWORD *a4, int *a5)
{
  uint64_t v8 = sub_18139AE40(a1, a2, a3, &v12);
  uint64_t v9 = v8;
  if (!(_DWORD)v8)
  {
    if (*a3) {
      uint64_t v10 = &(*a3)[v12];
    }
    else {
      uint64_t v10 = 0LL;
    }
    a3[1] = v10;
    *a4 = 0;
    *a5 = 0;
    sub_18139A47C(v8, a3, a4, a5);
  }

  return v9;
}

void sub_18139A47C(uint64_t a1, char **a2, _DWORD *a3, int *a4)
{
  uint64_t v6 = *a2;
  if (*a2 >= a2[1])
  {
    int v10 = -1;
    *a3 = -1;
  }

  else
  {
    int v8 = *v6;
    if (*v6 < 0)
    {
      int v11 = v6[1];
      if (v6[1] < 0)
      {
        int v12 = v6[2];
        if (v12 < 0)
        {
          unsigned int v13 = sub_18138BFCC(v6, &v26);
          int v8 = v26 & 0x7FFFFFFF;
          uint64_t v9 = v13;
        }

        else
        {
          int v8 = v12 & 0x7F | (v8 << 14) & 0x1FC07F | ((v11 & 0x7F) << 7);
          uint64_t v9 = 3LL;
        }
      }

      else
      {
        int v8 = ((v8 & 0x7F) << 7) | v11;
        uint64_t v9 = 2LL;
      }
    }

    else
    {
      uint64_t v9 = 1LL;
    }

    uint64_t v14 = &v6[v9];
    *a2 = v14;
    if (v8 == 1)
    {
      int v15 = *v14;
      if (*v14 < 0)
      {
        int v18 = v14[1];
        if (v14[1] < 0)
        {
          int v19 = v14[2];
          if (v19 < 0)
          {
            unsigned int v20 = sub_18138BFCC(v14, &v26);
            int v15 = v26 & 0x7FFFFFFF;
            uint64_t v16 = v20;
          }

          else
          {
            int v15 = v19 & 0x7F | (v15 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
            uint64_t v16 = 3LL;
          }
        }

        else
        {
          int v15 = ((v15 & 0x7F) << 7) | v18;
          uint64_t v16 = 2LL;
        }
      }

      else
      {
        uint64_t v16 = 1LL;
      }

      uint64_t v21 = &v14[v16];
      *a2 = v21;
      *a3 = v15;
      *a4 = 0;
      int v8 = *v21;
      if (*v21 < 0)
      {
        int v23 = v21[1];
        if (v21[1] < 0)
        {
          int v24 = v21[2];
          if (v24 < 0)
          {
            unsigned int v25 = sub_18138BFCC(v21, &v26);
            int v8 = v26 & 0x7FFFFFFF;
            uint64_t v22 = v25;
          }

          else
          {
            int v8 = v24 & 0x7F | (v8 << 14) & 0x1FC07F | ((v23 & 0x7F) << 7);
            uint64_t v22 = 3LL;
          }
        }

        else
        {
          int v8 = ((v8 & 0x7F) << 7) | v23;
          uint64_t v22 = 2LL;
        }
      }

      else
      {
        uint64_t v22 = 1LL;
      }

      int v17 = 0;
      *a2 = &v21[v22];
    }

    else
    {
      int v17 = *a4;
    }

    int v10 = v8 + v17 - 2;
  }

  *a4 = v10;
}

uint64_t sub_18139A64C(uint64_t a1, int a2, uint64_t *a3, int *a4)
{
  if (*(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 92LL) == 2)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v8 = v7 + 4LL * a2;
      if (a2) {
        int v9 = *(_DWORD *)(v8 + 24);
      }
      else {
        int v9 = 0;
      }
      int v21 = *(_DWORD *)(v8 + 28) - v9;
      uint64_t v20 = *(void *)(v7 + 16) + v9;
      *a3 = v20;
    }

    else
    {
      uint64_t v16 = *(void *)(a1 + 64);
      uint64_t v17 = *(void *)(*(void *)(v16 + 32) + 8LL * a2);
      if (*(_DWORD *)(*(void *)v17 + 4LL)
        || (uint64_t v18 = *(void *)(*(void *)v17 + 24LL), v18 != *(void *)(*(void *)(v16 + 16) + 24LL))
        || *(int *)(v17 + 16) < 1)
      {
        int v21 = 0;
        uint64_t v20 = 0LL;
        *a3 = 0LL;
      }

      else
      {
        uint64_t v19 = *(void *)(v17 + 56);
        if (v19)
        {
          uint64_t v10 = sub_18139271C(v17 + 32, v18, v19 + 32, a3, &v29);
          if ((_DWORD)v10) {
            return v10;
          }
          uint64_t v20 = *a3;
          int v21 = v29;
        }

        else
        {
          uint64_t v20 = *(void *)(*(void *)(v17 + 48) + 8LL);
          *a3 = v20;
          int v21 = *(_DWORD *)(*(void *)(v17 + 48) + 16LL);
        }
      }
    }

    uint64_t v22 = v20 + v21;
    if (v20) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0LL;
    }
    a3[1] = v23;
    *a4 = 0;
    sub_18139A864((char *)a1, (char **)a3, a4);
    return 0LL;
  }

  else
  {
    uint64_t v10 = sub_18139AE40(a1, a2, a3, &v28);
    if (!(_DWORD)v10)
    {
      int v11 = (_BYTE *)*a3;
      int v12 = v28;
      uint64_t v13 = *a3 + v28;
      if (!*a3) {
        uint64_t v13 = 0LL;
      }
      a3[1] = v13;
      if (v12 <= 0)
      {
        *a4 = -1;
      }

      else if (*v11 == 1)
      {
        int v14 = v11[1];
        if ((char)v11[1] < 0)
        {
          int v25 = v11[2];
          if ((char)v11[2] < 0)
          {
            int v26 = (char)v11[3];
            if (v26 < 0)
            {
              char v27 = sub_18138BFCC(v11 + 1, &v29);
              *a4 = v29 & 0x7FFFFFFF;
              uint64_t v15 = (v27 + 1);
            }

            else
            {
              *a4 = v26 & 0x7F | (v14 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
              uint64_t v15 = 4LL;
            }
          }

          else
          {
            *a4 = ((v14 & 0x7F) << 7) | v25;
            uint64_t v15 = 3LL;
          }
        }

        else
        {
          *a4 = v14;
          uint64_t v15 = 2LL;
        }

        *a3 = (uint64_t)&v11[v15];
      }

      else
      {
        *a4 = 0;
      }
    }
  }

  return v10;
}

char *sub_18139A864(char *result, char **a2, int *a3)
{
  if (*(_DWORD *)(*(void *)(*(void *)result + 24LL) + 92LL) != 2)
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unint64_t)a2[1];
    while ((unint64_t)v8 < v9)
    {
      int v11 = *v8;
      if (v11 == 1)
      {
        uint64_t result = v8 + 1;
        int v12 = v8[1];
        if (v8[1] < 0)
        {
          int v15 = v8[2];
          if (v8[2] < 0)
          {
            int v17 = v8[3];
            if (v17 < 0)
            {
              uint64_t result = (char *)sub_18138BFCC(result, &v18);
              *a3 = v18 & 0x7FFFFFFF;
              uint64_t v13 = ((_BYTE)result + 1);
            }

            else
            {
              *a3 = v17 & 0x7F | (v12 << 14) & 0x1FC07F | ((v15 & 0x7F) << 7);
              uint64_t v13 = 4LL;
            }
          }

          else
          {
            *a3 = ((v12 & 0x7F) << 7) | v15;
            uint64_t v13 = 3LL;
          }
        }

        else
        {
          *a3 = v12;
          uint64_t v13 = 2LL;
        }

        *a2 = &v8[v13];
        return result;
      }

      if (v11 < 0)
      {
        if (v8[1] < 0)
        {
          if (v8[2] < 0)
          {
            uint64_t result = (char *)sub_18138BFCC(v8, &v18);
            uint64_t v10 = result;
          }

          else
          {
            uint64_t v10 = 3LL;
          }
        }

        else
        {
          uint64_t v10 = 2LL;
        }
      }

      else
      {
        uint64_t v10 = 1LL;
      }

      v8 += v10;
      *a2 = v8;
    }

    goto LABEL_16;
  }

  uint64_t v5 = *a2;
  if (*a2 >= a2[1])
  {
LABEL_16:
    *a3 = -1;
    return result;
  }

  int v6 = *v5;
  if (*v5 < 0)
  {
    int v14 = v5[1];
    if (v5[1] < 0)
    {
      int v16 = v5[2];
      if (v16 < 0)
      {
        uint64_t result = (char *)sub_18138BFCC(*a2, &v18);
        int v6 = v18 & 0x7FFFFFFF;
        uint64_t v7 = result;
      }

      else
      {
        int v6 = v16 & 0x7F | (v6 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
        uint64_t v7 = 3LL;
      }
    }

    else
    {
      int v6 = ((v6 & 0x7F) << 7) | v14;
      uint64_t v7 = 2LL;
    }
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  *a2 = &v5[v7];
  *a3 = v6 + *a3 - 2;
  return result;
}

uint64_t sub_18139AA30(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  *(void *)(a1 + 24) = 0LL;
  uint64_t v5 = (unint64_t *)(a1 + 24);
  int v6 = *(_DWORD **)(a1 + 8);
  uint64_t v7 = *(char **)(a1 + 32);
  uint64_t v8 = *(int *)(*(void *)v6 + 24LL);
  bzero(v7, 8 * v8);
  unint64_t v9 = (char **)sub_18138BCF4((uint64_t)v6, 1LL);
  uint64_t v10 = v9;
  if (v6[15])
  {
    if (!v9) {
      goto LABEL_22;
    }
  }

  else if (*((_DWORD *)v9 + 2))
  {
    unsigned int v11 = sub_18138BFCC(*v9, v5);
    if ((int)v8 >= 1 && *((_DWORD *)v10 + 2) > (int)v11)
    {
      uint64_t v13 = v11;
      uint64_t v14 = 1LL;
      do
      {
        v13 += sub_18138BFCC(&(*v10)[v13], (unint64_t *)v7);
        BOOL v15 = (int)v13 < *((_DWORD *)v10 + 2) && v14++ < v8;
        v7 += 8;
      }

      while (v15);
    }
  }

  int v16 = (uint64_t (**)(char **))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
    --qword_18C468B10;
    off_18C4653A8(v10);
    uint64_t v10 = (char **)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_22;
    }
    int v16 = (uint64_t (**)(char **))&xmmword_18C465410;
  }

  (*v16)(v10);
LABEL_22:
  uint64_t result = v6[15];
  v6[15] = 0;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

uint64_t sub_18139ABA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    uint64_t v3 = *(unsigned int *)(v2 + 28);
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(*(void *)a1 + 24LL) + 24LL);
  uint64_t v5 = *(char **)(a1 + 160);
  if (!v5)
  {
    if (sqlite3_initialize() || (int v33 = (char *)sub_18126F0AC(32LL * (int)v3)) == 0LL)
    {
      else {
        uint64_t result = 7LL;
      }
      *(void *)(a1 + 160) = 0LL;
      return result;
    }

    uint64_t v5 = v33;
    bzero(v33, 32LL * (int)v3);
    *(void *)(a1 + 160) = v5;
  }

  uint64_t v6 = v3;
  if ((int)v3 >= 1)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = v5 + 12;
    do
    {
      uint64_t result = sub_18139AE40(a1, v7, &v36, &v35);
      if ((_DWORD)result)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }

      uint64_t v10 = v36;
      int v11 = v35;
      *(_OWORD *)(v8 - 12) = 0u;
      *(_OWORD *)(v8 + 4) = 0u;
      *(void *)(v8 - 12) = v10;
      *((_DWORD *)v8 - 1) = v11;
      ++v7;
      v8 += 32;
    }

    while (v7 < v3);
  }

  if ((int)v3 < 1)
  {
    uint64_t result = 0LL;
    LODWORD(v15) = 0;
    goto LABEL_44;
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = (unsigned __int8 *)(v5 + 17);
  while (1)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = v12;
    int v16 = v13;
    uint64_t v17 = 0xFFFFFFFFLL;
    unint64_t v18 = v13;
    do
    {
      int v19 = *v18;
      v18 += 32;
      if (!v19 && ((v17 & 0x80000000) != 0 || *(void *)(v16 + 7) < *(void *)&v5[32 * v17 + 24])) {
        uint64_t v17 = v14;
      }
      ++v14;
      int v16 = v18;
    }

    while (v6 != v14);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t result = 0LL;
      goto LABEL_44;
    }

    ++v12;
    uint64_t v20 = *(int *)(a1 + 168);
    uint64_t v21 = *(void *)(a1 + 176);
    if (v15 + 1 >= v20) {
      break;
    }
LABEL_28:
    char v27 = (_DWORD *)(v21 + ((0x300000000LL * v12 - 0x300000000LL) >> 30));
    int v28 = &v5[32 * v17];
    unint64_t v30 = *((void *)v28 + 3);
    unint64_t v29 = (uint64_t *)(v28 + 24);
    unint64_t v31 = HIDWORD(v30);
    *char v27 = v17;
    v27[1] = HIDWORD(v30);
    v27[2] = v30 & 0x7FFFFFFF;
    uint64_t result = 267LL;
    if ((v30 & 0x8000000000000000LL) != 0 || (int)v4 <= (int)v31)
    {
      LODWORD(v15) = v12;
      goto LABEL_44;
    }

    unint64_t v32 = &v5[32 * v17];
  }

  int v34 = v15;
  uint64_t v22 = v3;
  uint64_t v23 = v13;
  uint64_t v24 = v4;
  if ((_DWORD)v20) {
    int v25 = 2 * v20;
  }
  else {
    int v25 = 32;
  }
  if (!sqlite3_initialize())
  {
    uint64_t v26 = sub_18127D33C(v21, 12LL * v25);
    if (v26)
    {
      uint64_t v21 = v26;
      *(void *)(a1 + 176) = v26;
      *(_DWORD *)(a1 + 168) = v25;
      uint64_t v4 = v24;
      uint64_t v13 = v23;
      uint64_t v3 = v22;
      goto LABEL_28;
    }
  }

  uint64_t result = 7LL;
  LODWORD(v15) = v34;
LABEL_44:
  *(_DWORD *)(a1 + 172) = v15;
  *(_DWORD *)(a1 + 80) &= ~8u;
  return result;
}

uint64_t sub_18139AE40(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v9 = *(void *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 80) & 0x40) == 0)
  {
    uint64_t v10 = 0LL;
    if (!v9) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  if (!*(_DWORD *)(v8 + 92))
  {
    uint64_t v10 = 0LL;
    goto LABEL_21;
  }

  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(int *)(v11 + 28);
  if (sqlite3_initialize() || (uint64_t v14 = (_DWORD *)sub_18126F0AC(16 * v12)) == 0LL)
  {
    uint64_t v10 = 7LL;
    goto LABEL_7;
  }

  uint64_t v15 = v14;
  bzero(v14, 16LL * *(int *)(v11 + 28));
  uint64_t v16 = *(unsigned int *)(v11 + 28);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = *(_DWORD ***)(v11 + 32);
    unint64_t v18 = v15 + 3;
    do
    {
      int v19 = *v17;
      if (v9
        || v19[4]
        && *(void *)(*(void *)v19 + 24LL) == *(void *)(*(void *)(v11 + 16) + 24LL)
        && !*(_DWORD *)(*(void *)v19 + 4LL))
      {
        v19[4] = 0;
      }

      else
      {
        *unint64_t v18 = 1;
      }

      v18 += 4;
      ++v17;
      --v16;
    }

    while (v16);
  }

  if (*(int *)(v8 + 24) < 1)
  {
    uint64_t v10 = 0LL;
    goto LABEL_60;
  }

  uint64_t v26 = 0LL;
  while (1)
  {
    if (*(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 64LL) == 1 || *(_DWORD *)(a1 + 32) == 3)
    {
      uint64_t v28 = 0LL;
      uint64_t v10 = 0LL;
      goto LABEL_45;
    }

    uint64_t v29 = sub_181399718((uint64_t *)a1, 0);
    if ((_DWORD)v29) {
      break;
    }
    uint64_t v10 = (uint64_t)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 56), (int)v26 + 1);
    uint64_t v28 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 56), v26 + 1);
LABEL_45:
    uint64_t v30 = *(void *)(a1 + 64);
    v39[0] = v30;
    v39[1] = v15;
    v39[2] = (v26 << 32) - 1;
    uint64_t v31 = *(unsigned int *)(v30 + 28);
    if ((int)v31 >= 1)
    {
      uint64_t v32 = 0LL;
      uint64_t v33 = *(void *)(v30 + 32);
      do
      {
        int v35 = *(unsigned int **)(*(void *)(**(void **)(v33 + 8 * v32) + 32LL) + 8LL);
        if (v35)
        {
          uint64_t v34 = *v35;
          if ((int)v34 < 1)
          {
            LODWORD(v34) = 0;
            goto LABEL_48;
          }

          uint64_t v36 = (int *)(v35 + 1);
          while (1)
          {
            int v37 = *v36++;
            if (v26 == v37) {
              break;
            }
            if (!--v34) {
              goto LABEL_48;
            }
          }
        }

        LODWORD(v34) = v15[4 * v32 + 3] == 0;
LABEL_48:
        v15[4 * v32++ + 2] = v34;
      }

      while (v32 != v31);
    }

    if (v10) {
      uint64_t v10 = (*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t *, char, const void *, int)))(*(void *)(v8 + 112) + 16LL))( *(void *)(v8 + 104),  v39,  4LL,  v10,  v28,  sub_18139B1EC);
    }
  }

  uint64_t v10 = v29;
LABEL_60:
  int v38 = (uint64_t (**)(void *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    off_18C4653A8(v15);
    uint64_t v15 = (_DWORD *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v38 = (uint64_t (**)(void *))&xmmword_18C465410;
      goto LABEL_65;
    }
  }

  else
  {
LABEL_65:
    (*v38)(v15);
  }

uint64_t sub_18139B1EC(uint64_t *a1, char a2, const void *a3, int a4)
{
  uint64_t v6 = *a1;
  if (a4 >= 0x8000) {
    int v7 = 0x8000;
  }
  else {
    int v7 = a4;
  }
  if ((a2 & 1) == 0) {
    ++a1[2];
  }
  int v8 = *(_DWORD *)(v6 + 28);
  if (v8 < 1) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v21 = v6;
  while (1)
  {
    uint64_t v10 = a1[1];
    if (!*(_DWORD *)(v10 + 16 * v9 + 8)) {
      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(*(void *)(v6 + 32) + 8 * v9);
    uint64_t v12 = v11 + 32;
    while (1)
    {
      int v13 = strlen(*(const char **)(v12 + 8));
      uint64_t v12 = *(void *)(v12 + 24);
      if (!v12) {
        goto LABEL_9;
      }
    }

    uint64_t v14 = a1[2];
    LODWORD(v15) = *(_DWORD *)(v11 + 20);
    unint64_t v16 = (*(_DWORD *)(v11 + 16) + 15);
LABEL_8:
    sub_181392CF4(v11 + 8, (uint64_t *)(v10 + 16 * v9), v14);
    int v8 = *(_DWORD *)(v6 + 28);
LABEL_9:
    if (++v9 >= v8) {
      return 0LL;
    }
  }

  if (!(_DWORD)v15) {
    LODWORD(v15) = 64;
  }
  unint64_t v15 = (int)v15;
  do
  {
    unint64_t v17 = v15;
    v15 *= 2LL;
  }

  while (v17 < v16);
  uint64_t v18 = *(void *)(v11 + 8);
  if (!sqlite3_initialize())
  {
    uint64_t v19 = sub_18127D33C(v18, v17);
    if (v19)
    {
      *(_DWORD *)(v11 + 20) = v17;
      *(void *)(v11 + 8) = v19;
      uint64_t v6 = v21;
      goto LABEL_8;
    }
  }

  return 7LL;
}

uint64_t sub_18139B35C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  switch(*(_DWORD *)a1)
  {
    case 1:
      uint64_t v5 = 0LL;
      LODWORD(v4) = 0;
      do
      {
        else {
          uint64_t v4 = v4;
        }
        ++v5;
      }

      while (v5 < *(int *)(a1 + 40));
      break;
    case 2:
      uint64_t v6 = 6LL;
      do
      {
        uint64_t v7 = v6 - 5;
        ++v6;
      }

      while (v7 < *(int *)(a1 + 40));
      goto LABEL_19;
    case 4:
    case 9:
      uint64_t v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 24LL) + 16LL) > 0;
      break;
    default:
      if (sub_18139B35C(*(void *)(a1 + 48), a2)
        && !sub_18139B35C(*(void *)(a1 + 56), a2))
      {
LABEL_19:
        uint64_t v4 = 1LL;
      }

      else
      {
LABEL_17:
        sub_18139B484(a1);
LABEL_18:
        uint64_t v4 = 0LL;
      }

      break;
  }

  return v4;
}

uint64_t sub_18139B484(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 4 || *(_DWORD *)result == 9)
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 24LL) + 16LL) = 0;
  }

  else if (*(int *)(result + 40) >= 1)
  {
    uint64_t v3 = 0LL;
    do
      uint64_t result = sub_18139B484(*(void *)(v1 + 48 + 8 * v3++));
    while (v3 < *(int *)(v1 + 40));
  }

  return result;
}

uint64_t sub_18139B4F4(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  uint64_t v19 = 0LL;
  uint64_t result = sub_18138AC28(a1, 8, &v19, 0LL);
  uint64_t v7 = v19;
  if (v19)
  {
    if (!sub_1812B2390((uint64_t)v19, 0))
    {
      uint64_t v8 = *((void *)v7 + 16);
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v8, a2);
      }

      else
      {
        *(void *)uint64_t v8 = a2;
        *(_WORD *)(v8 + 20) = 4;
      }

      uint64_t v9 = *(void *)(*(void *)v7 + 24LL);
      if (v9) {
        xmmword_18C465410(v9);
      }
    }

    if (sqlite3_step(v7) == 100)
    {
      uint64_t v10 = (char *)sqlite3_column_blob(v7, 0);
      int v11 = sqlite3_column_bytes(v7, 0);
      if ((int)v5 < 1)
      {
        int v12 = 0;
LABEL_22:
        BOOL v18 = v12 != v11;
        goto LABEL_23;
      }

      int v12 = 0;
      while (v12 < v11)
      {
        uint64_t v14 = &v10[v12];
        int v15 = *v14;
        if (*v14 < 0)
        {
          int v16 = v14[1];
          if (v14[1] < 0)
          {
            int v17 = v14[2];
            if (v17 < 0)
            {
              int v13 = sub_18138BFCC(v14, &v20);
              *a3 = v20 & 0x7FFFFFFF;
            }

            else
            {
              *a3 = v17 & 0x7F | (v15 << 14) & 0x1FC07F | ((v16 & 0x7F) << 7);
              int v13 = 3;
            }
          }

          else
          {
            *a3 = ((v15 & 0x7F) << 7) | v16;
            int v13 = 2;
          }
        }

        else
        {
          *a3 = v15;
          int v13 = 1;
        }

        v12 += v13;
        ++a3;
        if (!--v5) {
          goto LABEL_22;
        }
      }
    }

    BOOL v18 = 1;
LABEL_23:
    LODWORD(result) = sqlite3_reset(v7);
    if (v18 && (_DWORD)result == 0) {
      return 267LL;
    }
    else {
      return result;
    }
  }

  return result;
}

uint64_t sub_18139B6B4(_DWORD *a1, char a2)
{
  if ((a2 & 1) == 0) {
    ++*a1;
  }
  return 0LL;
}

char *sub_18139B6CC(uint64_t a1, char *a2, ...)
{
  uint64_t result = sqlite3_vmprintf(a2, va);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_18139B70C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3)
  {
    sub_1812CF36C(97220);
    return 0LL;
  }

  __int16 v4 = *(_WORD *)(v3 + 20);
  if (((0x50505050uLL >> v4) & 1) == 0) {
    return 0LL;
  }
  if ((v4 & 0x24) != 0)
  {
    unint64_t v6 = *(void *)v3;
  }

  else if ((v4 & 8) != 0)
  {
    double v8 = *(double *)v3;
    if (*(double *)v3 >= -9.22337204e18)
    {
      if (v8 <= 9.22337204e18) {
        unint64_t v6 = (uint64_t)v8;
      }
      else {
        unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      unint64_t v6 = 0x8000000000000000LL;
    }
  }

  else if ((v4 & 0x12) != 0 && *(void *)(v3 + 8))
  {
    unint64_t v6 = sub_181303DF0(v3);
  }

  else
  {
    unint64_t v6 = 0LL;
  }

  return sub_18139B7E0(*(void *)(a1 + 40), v6, a2 + 16);
}

uint64_t sub_18139B7E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v89 = *(void *)a1;
  int v103 = 0LL;
  uint64_t result = sub_18139AA30(a1, 1);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = sub_18139CB98(*(uint64_t **)(a1 + 8), 1, a2);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v90 = (sqlite3_stmt *)a1;
  unint64_t v91 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 68LL))
  {
    uint64_t v107 = 0LL;
    if (!a3)
    {
      uint64_t result = sub_18138AC28((uint64_t *)a1, 2, &v107, 0LL);
      if ((_DWORD)result) {
        goto LABEL_53;
      }
      uint64_t v23 = v107;
      if (!sub_1812B2390((uint64_t)v107, 0))
      {
        uint64_t v24 = *((void *)v23 + 16);
        if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v24, a2);
        }

        else
        {
          *(void *)uint64_t v24 = a2;
          *(_WORD *)(v24 + 20) = 4;
        }

        uint64_t v82 = *(void *)(*(void *)v23 + 24LL);
        if (v82) {
          xmmword_18C465410(v82);
        }
      }

      if (sqlite3_step(v23) != 100)
      {
        uint64_t result = sqlite3_reset(v23);
        goto LABEL_53;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v104 = v90;
    int v105 = -1;
    while (1)
    {
      if (v11 + 1 > *(int *)(v7 + 24))
      {
        int v25 = v90;
        uint64_t v26 = *((void *)v90 + 3);
        char v27 = v107;
        if (v26 > 0)
        {
          unsigned int v22 = 0;
          goto LABEL_50;
        }

        sqlite3_reset(v107);
        uint64_t result = 267LL;
LABEL_53:
        double v8 = (uint64_t *)v90;
        goto LABEL_173;
      }

      if (*(_BYTE *)(*(void *)(v7 + 40) + v11)) {
        goto LABEL_10;
      }
      int v12 = v107;
      if (v107)
      {
        uint64_t v13 = (uint64_t)sqlite3_column_text(v107, (int)v11 + 1);
        a2 = v91;
        uint64_t v14 = sqlite3_column_bytes(v12, v11 + 1);
        goto LABEL_15;
      }

      if (!a3)
      {
LABEL_10:
        ++v11;
      }

      else
      {
        uint64_t v18 = *(void *)(a3 + 8 * v11);
        if (!v18)
        {
          uint64_t v13 = 0LL;
LABEL_33:
          sub_1812CF36C(91138);
          uint64_t v15 = 0LL;
          goto LABEL_16;
        }

        int v19 = *(unsigned __int16 *)(v18 + 20);
        if ((~v19 & 0x202) != 0 || *(_BYTE *)(v18 + 22) != 1)
        {
          if ((v19 & 1) != 0)
          {
            uint64_t v13 = 0LL;
          }

          else
          {
            uint64_t v13 = sub_181303998((int *)v18, 1);
            uint64_t v18 = *(void *)(a3 + 8 * v11);
            if (!v18) {
              goto LABEL_33;
            }
            LOWORD(v19) = *(_WORD *)(v18 + 20);
          }
        }

        else
        {
          uint64_t v13 = *(void *)(v18 + 8);
        }

        if ((v19 & 2) != 0 && *(_BYTE *)(v18 + 22) == 1)
        {
          uint64_t v15 = *(unsigned int *)(v18 + 16);
          goto LABEL_16;
        }

        if ((v19 & 0x10) != 0)
        {
          uint64_t v15 = *(unsigned int *)(v18 + 16);
          if ((v19 & 0x400) != 0) {
            uint64_t v15 = (*(_DWORD *)v18 + v15);
          }
          goto LABEL_16;
        }

        if ((v19 & 1) != 0)
        {
          uint64_t v15 = 0LL;
          goto LABEL_16;
        }

        uint64_t v14 = sub_181303970(v18, 1);
LABEL_15:
        uint64_t v15 = v14;
LABEL_16:
        int v106 = 0;
        if (v13)
        {
          unsigned int v16 = (*(uint64_t (**)(void, sqlite3_stmt **, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(void *)(v7 + 112) + 16LL))( *(void *)(v7 + 104),  &v104,  4LL,  v13,  v15,  sub_18139CD28);
          int v17 = v106;
        }

        else
        {
          int v17 = 0;
          unsigned int v16 = 0;
        }

        uint64_t v20 = *((void *)v90 + 4);
        uint64_t v21 = *(void *)(v20 + 8 * v11) - v17;
        *(void *)(v20 + 8 * v11) = v21;
        if (v21 >= 0) {
          unsigned int v22 = v16;
        }
        else {
          unsigned int v22 = 267;
        }
        ++v11;
        if (v22)
        {
          int v25 = v90;
          uint64_t v26 = *((void *)v90 + 3);
          char v27 = v107;
LABEL_50:
          *((void *)v25 + 3) = v26 - 1;
          LODWORD(result) = sqlite3_reset(v27);
          if (v22) {
            uint64_t result = v22;
          }
          else {
            uint64_t result = result;
          }
          goto LABEL_53;
        }
      }
    }
  }

  uint64_t v104 = 0LL;
  uint64_t result = sub_18138AC28((uint64_t *)a1, 8, &v104, 0LL);
  double v8 = (uint64_t *)a1;
  if ((_DWORD)result) {
    goto LABEL_173;
  }
  uint64_t v9 = v104;
  if (!sub_1812B2390((uint64_t)v104, 0))
  {
    uint64_t v10 = *((void *)v9 + 16);
    if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v10, a2);
    }

    else
    {
      *(void *)uint64_t v10 = a2;
      *(_WORD *)(v10 + 20) = 4;
    }

    uint64_t v28 = *(void *)(*(void *)v9 + 24LL);
    if (v28) {
      xmmword_18C465410(v28);
    }
  }

  unint64_t v29 = sqlite3_step(v9) == 100 ? sqlite3_column_int64(v9, 1) : 0LL;
  uint64_t result = sqlite3_reset(v9);
  if ((_DWORD)result || !v29) {
    goto LABEL_173;
  }
  uint64_t v30 = v8[1];
  uint64_t v31 = sub_18138B020(v30);
  if (!v31) {
    goto LABEL_172;
  }
  unint64_t v84 = v31;
  uint64_t v32 = v31[7];
  int v33 = 0;
  unint64_t v85 = HIDWORD(a2);
  unint64_t v86 = v29;
  uint64_t v96 = v30;
  while (2)
  {
    uint64_t v35 = v32 - 1;
    uint64_t v36 = v84[4 * (v32 - 1) + 9];
    uint64_t v95 = (uint64_t *)&v84[4 * (v32 - 1) + 10];
    uint64_t v87 = v32 - 1;
    uint64_t v88 = v32;
    while (2)
    {
      uint64_t v37 = *v95;
      uint64_t v97 = v36 - 1;
      uint64_t v98 = v36;
      unsigned int v38 = v36 - 1;
      uint64_t v101 = *v95 + 56LL * (v36 - 1);
      if (*(void *)(v101 + 16) > v29 || *(void *)(v37 + 56LL * v38 + 24) < v29) {
        goto LABEL_71;
      }
      if (!v33) {
        ++*(void *)(v37 + 56LL * v38 + 40);
      }
      ++*(_DWORD *)(v30 + 52);
      uint64_t v39 = v37 + 56LL * v38;
      unint64_t v40 = *(unsigned int *)(v39 + 32);
      double v100 = (int *)(v39 + 32);
      int v92 = *(_DWORD *)(v39 + 32);
      if (v92 < 1)
      {
        uint64_t v99 = 0LL;
        int v43 = 4;
        int v44 = *(_DWORD *)(v39 + 32);
        uint64_t v102 = 0xFFFFFFFFLL;
        uint64_t v45 = v100;
        goto LABEL_84;
      }

      uint64_t v102 = a2 % v40;
      uint64_t v41 = (unsigned __int8 **)sub_18138BCF4( v30,  (a2 % v40) | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37));
      if (!v41) {
        goto LABEL_70;
      }
      int v42 = v41;
      if (!sub_1813A3520(v41, 0, *v100, a2))
      {
        uint64_t v75 = v42;
        sub_181389984( (unsigned __int8 *)v30,  v102 | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37),  (char *)*v42,  *((_DWORD *)v42 + 2));
        uint64_t v76 = (uint64_t (**)(unsigned __int8 **))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v42);
          --qword_18C468B10;
          off_18C4653A8(v42);
          uint64_t v75 = (unsigned __int8 **)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_70;
          }
          uint64_t v76 = (uint64_t (**)(unsigned __int8 **))&xmmword_18C465410;
        }

        (*v76)(v75);
LABEL_70:
        int v33 = 1;
        goto LABEL_71;
      }

      uint64_t v99 = v42;
      if (**v42 == 4) {
        int v43 = 4;
      }
      else {
        int v43 = 8;
      }
      int v44 = *v100;
      uint64_t v45 = v100;
LABEL_84:
      if (v85) {
        int v46 = 8;
      }
      else {
        int v46 = v43;
      }
      int v47 = (*(_DWORD *)(*(void *)v30 + 136LL) - 8) / v46;
      unsigned int v48 = 32;
      if (v47 <= 32) {
        int v47 = 32;
      }
      unsigned int v93 = v47;
      if (!v44
        || v44 == 1 && ((v49 = 4 * bswap32(*((_DWORD *)*v99 + 1)), v49 <= 32) ? (unsigned int v48 = 32) : (unsigned int v48 = v49), v48 <= v93))
      {
        int v50 = 1;
      }

      else
      {
        int v50 = (2 * v44) | 1;
        unsigned int v48 = v93;
      }

      int v94 = v46;
      if (*(_DWORD *)(v30 + 60))
      {
LABEL_98:
        uint64_t v51 = 0LL;
        if (v50 < 1) {
          goto LABEL_99;
        }
      }

      else
      {
LABEL_102:
        if (sqlite3_initialize() || (unint64_t v52 = (void *)sub_18126F0AC(8LL * v50)) == 0LL)
        {
          if (v50 < 1)
          {
            uint64_t v51 = 0LL;
            if (*(_DWORD *)(v30 + 60)) {
              goto LABEL_153;
            }
            goto LABEL_118;
          }

          uint64_t v51 = 0LL;
          *(_DWORD *)(v30 + 60) = 7;
        }

        else
        {
          uint64_t v51 = (uint64_t)v52;
          bzero(v52, 8LL * v50);
          if (v50 < 1)
          {
LABEL_99:
            if (*(_DWORD *)(v30 + 60))
            {
LABEL_153:
              sub_18138D90C(v51, v50);
              uint64_t v51 = 0LL;
              int v50 = 0;
              goto LABEL_158;
            }

            goto LABEL_118;
          }
        }
      }

      uint64_t v53 = 0LL;
      int v54 = v48 * v46;
      do
      {
        if (!*(_DWORD *)(v30 + 60))
        {
          if (sqlite3_initialize() || (unint64_t v55 = (_DWORD *)sub_18126F0AC(v54 + 24LL)) == 0LL)
          {
            if (v54 >= -23) {
              *(_DWORD *)(v30 + 60) = 7;
            }
          }

          else
          {
            int v56 = v55;
            bzero(v55, v54 + 24LL);
            v56[2] = v54 + 8;
            *(void *)int v56 = v56 + 4;
            *(void *)(v51 + 8 * v53) = v56;
          }
        }

        ++v53;
      }

      while (v50 != v53);
      uint64_t v45 = v100;
      if (*(_DWORD *)(v30 + 60)) {
        goto LABEL_153;
      }
      uint64_t v57 = 0LL;
      do
      {
        ***(_BYTE ***)(v51 + 8 * v57) = v94;
        uint64_t v58 = **(void **)(v51 + 8 * v57++);
        *(_DWORD *)(v58 + 4) = 0;
      }

      while (v50 != v57);
LABEL_118:
      uint64_t v59 = 0LL;
      while (v59 < *v45)
      {
        if (v59 == v102)
        {
          uint64_t v60 = 0LL;
          int v61 = v99;
          if (!v99) {
            goto LABEL_137;
          }
        }

        else
        {
          uint64_t v60 = (unsigned __int8 **)sub_18138BCF4( v30,  v59 | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37));
          int v61 = v60;
          if (!v60)
          {
LABEL_137:
            int v71 = 0;
            goto LABEL_144;
          }
        }

        int v62 = **v61;
        if (v62 == 4) {
          int v63 = 4;
        }
        else {
          int v63 = 8;
        }
        uint64_t v64 = ((*((_DWORD *)v61 + 2) - 8) / v63);
        if ((int)v64 < 1)
        {
          int v71 = 0;
          uint64_t v45 = v100;
          if (!v59) {
            goto LABEL_143;
          }
          goto LABEL_144;
        }

        uint64_t v65 = 0LL;
        while (1)
        {
          uint64_t v67 = *v61;
          if (v62 == 4)
          {
            unsigned int v68 = *(_DWORD *)&v67[4 * v65 + 8];
            if (!v68) {
              goto LABEL_130;
            }
            unint64_t v69 = bswap32(v68);
          }

          else
          {
            unint64_t v70 = *(void *)&v67[8 * v65 + 8];
            if (!v70) {
              goto LABEL_130;
            }
            unint64_t v69 = bswap64(v70);
          }

          int v66 = sub_1813A3520(*(unsigned __int8 ***)(v51 + 8 * (v69 % v50)), 0, v50, v69);
          if (v66) {
            break;
          }
LABEL_130:
          if (v64 == ++v65)
          {
            int v71 = 0;
            goto LABEL_142;
          }
        }

        int v71 = v66;
LABEL_142:
        uint64_t v30 = v96;
        uint64_t v45 = v100;
        if (!v59) {
LABEL_143:
        }
          *(_BYTE *)(**(void **)v51 + 1LL) = (*v61)[1];
LABEL_144:
        if (v60)
        {
          int v72 = (uint64_t (**)(unsigned __int8 **))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_119;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v60);
          --qword_18C468B10;
          off_18C4653A8(v60);
          uint64_t v60 = (unsigned __int8 **)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v72 = (uint64_t (**)(unsigned __int8 **))&xmmword_18C465410;
LABEL_119:
            (*v72)(v60);
          }
        }

        ++v59;
        if (v71)
        {
          sub_18138D90C(v51, v50);
          int v50 = (2 * v50) | 1;
          unsigned int v48 = v93;
          int v46 = v94;
          if (*(_DWORD *)(v30 + 60)) {
            goto LABEL_98;
          }
          goto LABEL_102;
        }
      }

      if (*(_DWORD *)(v30 + 60)) {
        goto LABEL_153;
      }
      sub_1813A3520(*(unsigned __int8 ***)(v51 + 8 * (v91 % v50)), 1, v50, v91);
      if (v50 >= 1)
      {
        for (uint64_t i = 0LL; i != v50; ++i)
          sub_181389984( (unsigned __int8 *)v30,  i | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37),  **(char ***)(v51 + 8 * i),  *(_DWORD *)(*(void *)(v51 + 8 * i) + 8LL));
      }

      int *v45 = v50;
      sub_181389C04((unsigned __int8 *)v30, *(void *)(v30 + 144));
LABEL_158:
      unint64_t v29 = v86;
      uint64_t v32 = v88;
      double v8 = (uint64_t *)v90;
      if (v92 >= 1)
      {
        uint64_t v74 = (uint64_t (**)(unsigned __int8 **))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_164;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v99);
        --qword_18C468B10;
        off_18C4653A8(v99);
        uint64_t v99 = (unsigned __int8 **)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v74 = (uint64_t (**)(unsigned __int8 **))&xmmword_18C465410;
LABEL_164:
          (*v74)(v99);
        }
      }

      sub_18138D90C(v51, v50);
      int v33 = 1;
      a2 = v91;
      uint64_t v35 = v87;
LABEL_71:
      uint64_t v36 = v97;
      if (v98 > 1) {
        continue;
      }
      break;
    }

uint64_t sub_18139C3D8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!(_DWORD)result)
  {
    uint64_t result = sub_18139C438(*(uint64_t **)(a2 + 40), a3, a4);
    if (!(_DWORD)result) {
      uint64_t result = sub_18139C72C(*(void *)(a2 + 40), a3, *a4);
    }
  }

  *a1 = result;
  return result;
}

uint64_t sub_18139C438(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (!*(_DWORD *)(*a1 + 64))
  {
    uint64_t v26 = 0LL;
    uint64_t v10 = sub_18138AC28(a1, 3, &v26, 0LL);
    if ((_DWORD)v10)
    {
      uint64_t v11 = *(void *)v6;
      if (*(void *)v6)
      {
LABEL_9:
        int v12 = *(unsigned __int8 *)(v11 + 113);
        switch(v12)
        {
          case 186:
            goto LABEL_12;
          case 118:
            uint64_t v23 = *(void *)(v11 + 56);
            goto LABEL_43;
          case 109:
LABEL_12:
            uint64_t v13 = "unopened";
            break;
          default:
            uint64_t v13 = "invalid";
            break;
        }

uint64_t sub_18139C72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v29 = 0LL;
  unint64_t v30 = 0LL;
  uint64_t v31 = a1;
  uint64_t v7 = sub_18139AA30(a1, 1);
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    int v32 = 0;
    goto LABEL_4;
  }

  uint64_t v8 = sub_18139CB98(*(uint64_t **)(a1 + 8), 0, a3);
  int v32 = 0;
  if ((_DWORD)v8)
  {
LABEL_4:
    ++*(void *)(a1 + 24);
    uint64_t v9 = v29;
    if (v29) {
      goto LABEL_5;
    }
    return v8;
  }

  unsigned int v12 = 0;
  unsigned int v13 = 0;
  int v14 = 0;
  while (v14 < *(_DWORD *)(v6 + 24))
  {
    uint64_t v8 = 0LL;
    int v33 = 0;
    if (*(_BYTE *)(*(void *)(v6 + 40) + v14)) {
      goto LABEL_40;
    }
    uint64_t v17 = v14 + 2LL;
    uint64_t v18 = *(void *)(a2 + 8 * v17);
    if (!v18) {
      goto LABEL_27;
    }
    int v19 = *(unsigned __int16 *)(v18 + 20);
    if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
    {
      uint64_t v8 = *(void *)(v18 + 8);
      uint64_t v20 = *(void *)(a2 + 8 * v17);
      if (!v20) {
        goto LABEL_25;
      }
      goto LABEL_28;
    }

    if ((v19 & 1) != 0)
    {
LABEL_27:
      uint64_t v8 = 0LL;
      uint64_t v20 = *(void *)(a2 + 8 * v17);
      if (!v20)
      {
LABEL_25:
        sub_1812CF36C(91138);
        uint64_t v21 = 0LL;
        if (v8) {
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }

    else
    {
      uint64_t v8 = sub_181303998((int *)v18, 1);
      uint64_t v20 = *(void *)(a2 + 8 * (v32 + 2LL));
      if (!v20) {
        goto LABEL_25;
      }
    }

uint64_t sub_18139CA80(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t result = sub_181389890( *(sqlite3 **)v2,  0LL,  "DELETE FROM %Q.'%q_data';DELETE FROM %Q.'%q_idx';",
             *(void *)(v2 + 8),
             *(void *)(v2 + 16),
             *(void *)(v2 + 8),
             *(void *)(v2 + 16));
  if (!(_DWORD)result)
  {
    if (!*(_DWORD *)(v2 + 88)
      || (uint64_t result = sub_181389890( *(sqlite3 **)v2,  0LL,  "DELETE FROM %Q.'%q_docsize';",
                     *(void *)(v2 + 8),
                     *(void *)(v2 + 16)),
          !(_DWORD)result))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(_DWORD **)(v4 + 144);
      if (v5)
      {
        sub_18138A584(v5);
        *(void *)(v4 + 144) = 0LL;
      }

      uint64_t v6 = *(void *)(v4 + 24);
      if (v6)
      {
        sub_18138A70C(v6);
        *(_DWORD *)(v4 + 32) = 0;
        *(_DWORD *)(v4 + 56) = 0;
      }

      *(_DWORD *)(v4 + 52) = 0;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v9 = 0u;
      if (*(_DWORD *)(*(void *)v4 + 68LL)) {
        *(void *)&__int128 v8 = 1LL;
      }
      sub_181389984((unsigned __int8 *)v4, 1LL, &byte_1813CEAEE, 0);
      sub_181389C04((unsigned __int8 *)v4, (uint64_t)&v7);
      uint64_t result = *(unsigned int *)(v4 + 60);
      *(_DWORD *)(v4 + 60) = 0;
      if (!(_DWORD)result) {
        return sub_18138A918((uint64_t *)a1, "version", 0LL, 4);
      }
    }
  }

  return result;
}

uint64_t sub_18139CB98(uint64_t *a1, int a2, uint64_t a3)
{
  if (a1[3]) {
    goto LABEL_6;
  }
  uint64_t v6 = *a1;
  if (sqlite3_initialize()) {
    goto LABEL_3;
  }
  uint64_t v10 = sub_18126F0AC(40LL);
  a1[3] = v10;
  if (!v10) {
    goto LABEL_4;
  }
  uint64_t v11 = v10;
  *(void *)(v10 + 32) = 0LL;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 8) = a1 + 4;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)(v6 + 92);
  *(_DWORD *)(v10 + 20) = 1024;
  if (sqlite3_initialize())
  {
    *(void *)(v11 + 32) = 0LL;
  }

  else
  {
    unsigned int v13 = (void *)sub_18126F0AC(0x2000LL);
    *(void *)(v11 + 32) = v13;
    if (v13)
    {
      bzero(v13, 0x2000uLL);
      int v7 = 0;
      goto LABEL_5;
    }
  }

  unsigned int v12 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    off_18C4653A8(v11);
    uint64_t v11 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_3;
    }
    unsigned int v12 = &xmmword_18C465410;
  }

  (*v12)(v11);
LABEL_3:
  a1[3] = 0LL;
LABEL_4:
  int v7 = 7;
LABEL_5:
  *((_DWORD *)a1 + 15) = v7;
LABEL_6:
  uint64_t v8 = a1[5];
  if (v8 > a3 || v8 == a3 && !*((_DWORD *)a1 + 12) || *((_DWORD *)a1 + 8) > *(_DWORD *)(*a1 + 152)) {
    sub_18139D2FC(a1);
  }
  a1[5] = a3;
  *((_DWORD *)a1 + 12) = a2;
  if (!a2) {
    ++*((_DWORD *)a1 + 14);
  }
  uint64_t result = *((unsigned int *)a1 + 15);
  *((_DWORD *)a1 + 15) = 0;
  return result;
}

uint64_t sub_18139CD28(_DWORD *a1, char a2, unsigned __int8 *__s2, int a4)
{
  uint64_t v5 = *(uint64_t **)(*(void *)a1 + 8LL);
  int v6 = a1[3];
  if ((a2 & 1) != 0)
  {
    if (v6) {
      goto LABEL_6;
    }
    int v6 = 1;
  }

  else
  {
    ++v6;
  }

  a1[3] = v6;
LABEL_6:
  if (a4 >= 0x8000) {
    int v7 = 0x8000;
  }
  else {
    int v7 = a4;
  }
  unsigned int v8 = a1[2];
  signed int v9 = v6 - 1;
  uint64_t v10 = *v5;
  uint64_t result = sub_1813A25E4((int *)v5[3], v5[5], v8, v6 - 1, 0x30u, __s2, v7);
  int v12 = *(_DWORD *)(v10 + 48);
  if (v12 >= 1 && (_DWORD)result == 0)
  {
    uint64_t v14 = 0LL;
    do
    {
      int v15 = *(_DWORD *)(*(void *)(v10 + 56) + 4 * v14);
      if (v15 >= 1)
      {
        int v16 = 0;
        int v17 = 0;
        while (v17 < v7)
        {
          int v18 = v17 + 1;
          if (__s2[v17] >= 0xC0u)
          {
            if (v18 >= v7) {
              break;
            }
            int v19 = &__s2[v17 + 1];
            while (1)
            {
              char v20 = *v19++;
              if ((v20 & 0xC0) != 0x80) {
                break;
              }
              if (v7 == ++v18)
              {
                int v17 = v7;
                if (v16 + 1 == v15) {
                  goto LABEL_18;
                }
                goto LABEL_29;
              }
            }
          }

          int v17 = v18;
LABEL_18:
          if (++v16 == v15)
          {
            if (!v17) {
              break;
            }
            uint64_t result = sub_1813A25E4((int *)v5[3], v5[5], v8, v9, v14 + 49, __s2, v17);
            int v12 = *(_DWORD *)(v10 + 48);
            goto LABEL_30;
          }
        }
      }

uint64_t sub_18139CE94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(*a1 + 88)) {
    return 0LL;
  }
  unint64_t v23 = 0LL;
  uint64_t v6 = sub_18138AC28(a1, 6, &v23, 0LL);
  if (!(_DWORD)v6)
  {
    int v7 = (uint64_t *)v23;
    if (!sub_1812B2390((uint64_t)v23, 0))
    {
      uint64_t v8 = v7[16];
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v8, a2);
      }

      else
      {
        *(void *)uint64_t v8 = a2;
        *(_WORD *)(v8 + 20) = 4;
      }

      uint64_t v10 = *(void *)(*v7 + 24);
      if (v10) {
        xmmword_18C465410(v10);
      }
    }

    if (!*(_DWORD *)(*a1 + 68)) {
      goto LABEL_22;
    }
    uint64_t v11 = a1[1];
    int v12 = sub_18138B020(v11);
    if (v12)
    {
      uint64_t v13 = *((void *)v12 + 2);
      sub_18138A584(v12);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v6 = *(unsigned int *)(v11 + 60);
    *(_DWORD *)(v11 + 60) = 0;
    if (!sub_1812B2390((uint64_t)v7, 2u))
    {
      uint64_t v14 = v7[16];
      if ((*(_WORD *)(v14 + 148) & 0x9000) != 0)
      {
        sub_1813040AC(v14 + 128, v13);
      }

      else
      {
        *(void *)(v14 + 128) = v13;
        *(_WORD *)(v14 + 148) = 4;
      }

      uint64_t v15 = *(void *)(*v7 + 24);
      if (v15) {
        xmmword_18C465410(v15);
      }
    }

    if (!(_DWORD)v6)
    {
LABEL_22:
      uint64_t v16 = *(unsigned int *)(a3 + 8);
      if ((v16 & 0x80000000) != 0)
      {
        sub_1812CF36C(98740);
      }

      else
      {
        int v17 = *(char **)a3;
        if (!sub_1812B2390((uint64_t)v7, 1u))
        {
          if (v17)
          {
            unsigned int v18 = sub_181269368(v7[16] + 64, v17, v16, 0, 0LL);
            if (v18)
            {
              unsigned int v19 = v18;
              uint64_t v20 = *v7;
              *(_DWORD *)(v20 + 80) = v19;
              sub_1812FA264(v20, v19);
              sub_1813037C4(*v7, v19);
            }
          }

          uint64_t v21 = *(void *)(*v7 + 24);
          if (v21) {
            xmmword_18C465410(v21);
          }
        }
      }

      sqlite3_step((sqlite3_stmt *)v7);
      uint64_t v6 = sqlite3_reset((sqlite3_stmt *)v7);
      if (!sub_1812B2390((uint64_t)v7, 1u))
      {
        uint64_t v22 = *(void *)(*v7 + 24);
        if (v22) {
          xmmword_18C465410(v22);
        }
      }
    }
  }

  return v6;
}

uint64_t sub_18139D0B0(void *a1)
{
  uint64_t v2 = *(unsigned int *)(*a1 + 24LL);
  unint64_t v3 = a1[3];
  if (sqlite3_initialize())
  {
    uint64_t v4 = 0LL;
LABEL_3:
    signed int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 7LL;
    goto LABEL_4;
  }

  uint64_t v16 = (int8x8_t *)sub_18127D33C(0LL, 64LL);
  uint64_t v4 = (char *)v16;
  if (!v16) {
    goto LABEL_3;
  }
  if (v3 > 0x7F)
  {
    if (v3 >> 14)
    {
      signed int v5 = sub_181308E00(v16, v3);
      uint64_t v7 = 0LL;
      unsigned int v6 = 64;
    }

    else
    {
      uint64_t v7 = 0LL;
      v16->i8[0] = (v3 >> 7) | 0x80;
      v16->i8[1] = v3 & 0x7F;
      unsigned int v6 = 64;
      signed int v5 = 2;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    v16->i8[0] = v3;
    unsigned int v6 = 64;
    signed int v5 = 1;
  }

_DWORD *sub_18139D2FC(_DWORD *result)
{
  uint64_t v1 = (uint64_t)result;
  uint64_t v113 = *MEMORY[0x1895F89C0];
  if (result[8] || result[13])
  {
    uint64_t v2 = *((void *)result + 3);
    int v95 = 0;
    unint64_t v3 = sub_18138B020((uint64_t)result);
    uint64_t v96 = v3;
    uint64_t v4 = *(_DWORD **)(v1 + 144);
    if (v4)
    {
      sub_18138A584(v4);
      *(void *)(v1 + 144) = 0LL;
    }

    if (!*(_DWORD *)(v2 + 16) || (signed int v5 = (int *)(v1 + 60), *(_DWORD *)(v1 + 60)))
    {
      int v6 = 0;
      goto LABEL_8;
    }

    if (v3[6] >= 2000)
    {
      int v6 = 0;
      *signed int v5 = 13;
      goto LABEL_8;
    }

    __int128 v111 = 0u;
    memset(v112, 0, sizeof(v112));
    __int128 v109 = 0u;
    __int128 v110 = 0u;
    __int128 v107 = 0u;
    __int128 v108 = 0u;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    __int128 v103 = 0u;
    __int128 v104 = 0u;
    __int128 v101 = 0u;
    __int128 v102 = 0u;
    __int128 v99 = 0u;
    __int128 v100 = 0u;
    __int128 v98 = 0u;
    uint64_t v15 = v3[7];
    if ((int)v15 >= 1)
    {
      for (uint64_t i = 0LL; i != v15; ++i)
      {
        uint64_t v17 = &v3[4 * i];
        uint64_t v18 = v17[9];
        if ((int)v18 >= 1)
        {
          unsigned int v19 = (int *)*((void *)v17 + 5);
          do
          {
            int v20 = *v19;
            v19 += 14;
            unsigned int v21 = v20 - 1;
            --v18;
          }

          while (v18);
        }
      }
    }

    int v22 = -32;
    unint64_t v23 = (unsigned int *)&v98;
    do
    {
      unsigned int v25 = *v23++;
      unsigned int v24 = v25;
      v22 += 32;
    }

    while (v25 == -1);
    int v26 = 0;
    do
    {
      unsigned int v27 = v24 >> v26++;
      ++v22;
    }

    while ((v27 & 1) != 0);
    int v93 = *(_DWORD *)(*(void *)v1 + 136LL);
    uint64_t v28 = *(unsigned int *)(*(void *)v1 + 92LL);
    uint64_t v29 = *(unsigned int *)(*(void *)v1 + 176LL);
    sub_18139DD3C((uint64_t *)v1, (int *)&v98, v22);
    if (*(_DWORD *)(v1 + 60)
      || (v30 = sub_181396128(v2, 0LL, 0), (*signed int v5 = v30) != 0)
      || (v81 = v29 == 0, (uint64_t v33 = *(void *)(v2 + 24)) == 0))
    {
LABEL_37:
      sub_18138A70C(v2);
      sub_18139FDBC(v1, (uint64_t)&v98, &v95);
      int v6 = v95;
      if (v95 >= 1)
      {
        if (!v3[7])
        {
          sub_1813A0170((uint64_t)v5, &v96);
          unint64_t v3 = v96;
        }

        if (!*v5)
        {
          int v31 = v3[9];
          uint64_t v32 = *((void *)v3 + 5);
          if (sqlite3_initialize() || (uint64_t v75 = sub_18127D33C(v32, 56LL * v31 + 56)) == 0)
          {
            *signed int v5 = 7;
          }

          else
          {
            uint64_t v76 = v75 + 56LL * v3[9];
            *(void *)(v76 + 48) = 0LL;
            *(_OWORD *)(v76 + 16) = 0u;
            *(_OWORD *)(v76 + 32) = 0u;
            *(_OWORD *)uint64_t v76 = 0u;
            *((void *)v3 + 5) = v75;
            if (!*v5)
            {
              int v77 = v3[9];
              v3[9] = v77 + 1;
              uint64_t v78 = (int *)(v75 + 56LL * v77);
              int *v78 = v22;
              v78[1] = 1;
              v78[2] = v6;
              unint64_t v79 = *((void *)v3 + 2);
              if (v79)
              {
                int v80 = (int64x2_t *)(v75 + 56LL * v77);
                v80[1] = vdupq_n_s64(v79);
                v80[3].i64[0] = *(int *)(v1 + 56);
                *((void *)v3 + 2) = v79 + 1;
              }

              ++v3[6];
            }
          }
        }

        sub_1813A04AC(v1, 0, (uint64_t)v3);
      }

LABEL_137:
      if (!v39)
      {
        uint64_t v33 = *(void *)(*(void *)(v2 + 24) + 8LL);
        *(void *)(v2 + 24) = v33;
        if (v33) {
          continue;
        }
      }

      goto LABEL_37;
    }
  }

  return result;
}

  if ((HIDWORD(v93[1]) & 0x80000000) == 0 && SHIDWORD(v93[1]) < v54 && !v27)
  {
    *(void *)((char *)&v93[1] + 12) = -1LL;
    if (SDWORD1(v93[1]) >= SDWORD2(v93[1])) {
      goto LABEL_152;
    }
    while (1)
    {
      unsigned int v27 = (*(uint64_t (**)(void))(*(void *)&v93[0] + 72LL))(*((void *)&v93[0] + 1));
      if (v27) {
        goto LABEL_137;
      }
      if (LODWORD(v99[0]) == LODWORD(v93[1]))
      {
        int v58 = v98;
        uint64_t v59 = v58
            + (*(uint64_t (**)(void, void))(*(void *)&v93[0] + 56LL))( *((void *)&v93[0] + 1),  HIDWORD(v99[0]))
            - 1;
        if ((HIDWORD(v93[1]) & 0x80000000) != 0)
        {
          HIDWORD(v93[1]) = v98;
LABEL_143:
          LODWORD(v93[2]) = v59;
          goto LABEL_144;
        }

        if (v98 > SLODWORD(v93[2])) {
          goto LABEL_137;
        }
        if (v59 > SLODWORD(v93[2])) {
          goto LABEL_143;
        }
      }

void sub_18139DD3C(uint64_t *a1, int *a2, int a3)
{
  unint64_t v5 = (*(_DWORD *)(*a1 + 136) + 20);
  *((void *)a2 + 14) = 0LL;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  *a2 = a3;
  if (!*((_DWORD *)a1 + 15) && a2[21] <= 1)
  {
    uint64_t v6 = *((void *)a2 + 11);
    if (sqlite3_initialize() || (uint64_t v7 = sub_18127D33C(v6, 32LL)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }

    else
    {
      uint64_t v8 = v7;
      bzero((void *)(v7 + 32LL * a2[21]), 32 * (1LL - a2[21]));
      *((void *)a2 + 11) = v8;
      a2[21] = 1;
    }
  }

  a2[2] = 1;
  *((_BYTE *)a2 + 74) = 1;
  a2[28] = 1;
  LODWORD(v9) = a2[11];
  if (v9 < v5)
  {
    if (!(_DWORD)v9) {
      LODWORD(v9) = 64;
    }
    unint64_t v9 = (int)v9;
    do
    {
      unint64_t v10 = v9;
      v9 *= 2LL;
    }

    while (v10 < v5);
    uint64_t v11 = *((void *)a2 + 4);
    if (sqlite3_initialize() || (uint64_t v12 = sub_18127D33C(v11, v10)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }

    else
    {
      a2[11] = v10;
      *((void *)a2 + 4) = v12;
    }
  }

  LODWORD(v13) = a2[7];
  if (v13 < v5)
  {
    if (!(_DWORD)v13) {
      LODWORD(v13) = 64;
    }
    unint64_t v13 = (int)v13;
    do
    {
      unint64_t v14 = v13;
      v13 *= 2LL;
    }

    while (v14 < v5);
    uint64_t v15 = *((void *)a2 + 2);
    if (sqlite3_initialize() || (uint64_t v16 = sub_18127D33C(v15, v14)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }

    else
    {
      a2[7] = v14;
      *((void *)a2 + 2) = v16;
    }
  }

  uint64_t v17 = a1 + 11;
  if (a1[11]) {
    goto LABEL_37;
  }
  uint64_t v18 = (unsigned __int8 *)sqlite3_mprintf( "INSERT INTO '%q'.'%q_idx'(segid,term,pgno) VALUES(?,?,?)",  *(void *)(*a1 + 8),  *(void *)(*a1 + 16));
  int v20 = v18;
  if (*((_DWORD *)a1 + 15))
  {
    if (!v18) {
      return;
    }
  }

  else
  {
    if (!v18)
    {
      *((_DWORD *)a1 + 15) = 7;
      return;
    }

    *((_DWORD *)a1 + 15) = sub_18126DFE0(*(void *)*a1, v18, 0xFFFFFFFFLL, 133LL, 0LL, a1 + 11, 0LL, v19);
  }

  unsigned int v21 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
    --qword_18C468B10;
    off_18C4653A8(v20);
    int v20 = (unsigned __int8 *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_37;
    }
    unsigned int v21 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
  }

  (*v21)(v20);
LABEL_37:
  if (!*((_DWORD *)a1 + 15))
  {
    **((_DWORD **)a2 + 2) = 0;
    a2[6] = 4;
    int v22 = (void *)*v17;
    uint64_t v23 = *a2;
    if (!sub_1812B2390(*v17, 0))
    {
      uint64_t v24 = v22[16];
      if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v24, v23);
      }

      else
      {
        *(void *)uint64_t v24 = v23;
        *(_WORD *)(v24 + 20) = 4;
      }

      uint64_t v25 = *(void *)(*v22 + 24LL);
      if (v25) {
        xmmword_18C465410(v25);
      }
    }
  }

uint64_t sub_18139E03C(_DWORD *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  signed int v8 = *(_DWORD *)(a2 + 56);
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = (uint64_t *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 24);
  if ((signed int)(a3 + v11 + *(_DWORD *)(a2 + 40) + 2) >= *(_DWORD *)(*(void *)a1 + 136LL))
  {
    if (v11 >= 5)
    {
      uint64_t result = sub_18139FB7C((uint64_t)a1, (unsigned int *)a2);
      if (a1[15]) {
        return result;
      }
      int v11 = *(_DWORD *)(a2 + 24);
    }

    unint64_t v13 = a3 + v11 + 20;
    LODWORD(v14) = *(_DWORD *)(a2 + 28);
    if (v13 > v14)
    {
      if (!(_DWORD)v14) {
        LODWORD(v14) = 64;
      }
      unint64_t v14 = (int)v14;
      do
      {
        unint64_t v15 = v14;
        v14 *= 2LL;
      }

      while (v15 < v13);
      uint64_t v16 = *v10;
      if (sqlite3_initialize() || (uint64_t v17 = sub_18127D33C(v16, v15)) == 0)
      {
        a1[15] = 7;
      }

      else
      {
        *(_DWORD *)(a2 + 28) = v15;
        *(void *)(a2 + 16) = v17;
      }
    }
  }

  uint64_t v18 = (int8x8_t *)(*(void *)(a2 + 32) + *(int *)(a2 + 40));
  uint64_t v19 = *(int *)(a2 + 24);
  uint64_t v20 = *(int *)(a2 + 12);
  unint64_t v21 = v19 - v20;
  if ((v19 - v20) > 0x7F)
  {
    if (v21 >> 14)
    {
      int v22 = sub_181308E00(v18, v21);
    }

    else
    {
      v18->i8[0] = (v21 >> 7) | 0x80;
      v18->i8[1] = v21 & 0x7F;
      int v22 = 2;
    }
  }

  else
  {
    v18->i8[0] = v21;
    int v22 = 1;
  }

  *(_DWORD *)(a2 + 40) += v22;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 74))
  {
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }

    else
    {
      uint64_t v24 = 0LL;
      while (*(unsigned __int8 *)(*(void *)(a2 + 48) + v24) == a4[v24])
      {
        if (v9 == ++v24) {
          goto LABEL_38;
        }
      }

      LODWORD(v9) = v24;
    }

uint64_t sub_18139E498(unsigned __int8 *a1, uint64_t a2, char *__s, uint64_t a4)
{
  unsigned int v8 = strlen(__s);
  uint64_t v203 = 0LL;
  sub_18139449C((uint64_t)a1, a2, 0x40u, 0LL, (unsigned __int8 *)__s, v8, 0xFFFFFFFF, 0, &v203);
  if (*((_DWORD *)a1 + 15)) {
    return sub_18138D5A4(v203);
  }
  uint64_t v9 = v203;
  if (*(_BYTE *)(v203 + 20)) {
    return sub_18138D5A4(v203);
  }
  if (*(void *)(v203 + 136LL * *(unsigned __int16 *)(*(void *)(v203 + 88) + 4LL) + 216) < a4)
  {
    do
    {
      sub_1813903E0((uint64_t)a1, v9, 1, a4);
      if (*((_DWORD *)a1 + 15) || *(_BYTE *)(v9 + 20)) {
        return sub_18138D5A4(v203);
      }
      uint64_t v11 = *(void *)(v9 + 136LL * *(unsigned __int16 *)(*(void *)(v9 + 88) + 4LL) + 216);
      int v12 = *(_DWORD *)(v9 + 68);
    }

    while ((v12 || v11 < a4) && (!v12 || v11 > a4));
  }

  unsigned int v13 = *(unsigned __int16 *)(*(void *)(v9 + 88) + 4LL);
  uint64_t v14 = v9 + 136LL * *(unsigned __int16 *)(*(void *)(v9 + 88) + 4LL);
  uint64_t v16 = *(unsigned int **)(v14 + 96);
  unint64_t v15 = (unsigned int **)(v14 + 96);
  int v17 = *(_DWORD *)(*(void *)a1 + 92LL);
  uint64_t v18 = *v16;
  uint64_t v19 = (char **)v15[2];
  uint64_t v20 = *v19;
  int v21 = *((_DWORD *)v19 + 2);
  LODWORD(v19) = *((_DWORD *)v19 + 3);
  unint64_t v205 = 0LL;
  unint64_t v206 = 0LL;
  int v200 = (int)v19;
  int v197 = v21;
  int v22 = v21 - (_DWORD)v19;
  if (sqlite3_initialize() || (uint64_t v24 = (char *)sub_18126F0AC(v22 + 16)) == 0LL)
  {
    if (v22 >= -15)
    {
      *((_DWORD *)a1 + 15) = 7;
      return sub_18138D5A4(v203);
    }

    int v23 = 0LL;
  }

  else
  {
    int v23 = v24;
    bzero(v24, v22 + 16);
  }

  if (*((_DWORD *)a1 + 15)) {
    return sub_18138D5A4(v203);
  }
  uint64_t v188 = v18;
  int v202 = v22;
  memcpy(v23, &v20[v200], v22);
  uint64_t v25 = v9 + 136LL * v13;
  __len = (int *)(v25 + 160);
  uint64_t v26 = *(int *)(v25 + 108);
  int v189 = (int *)(v25 + 108);
  if ((_DWORD)v26 == *(_DWORD *)(v25 + 160)) {
    signed int v27 = *(_DWORD *)(v9 + 136LL * v13 + 164);
  }
  else {
    signed int v27 = __rev16(*(unsigned __int16 *)v20);
  }
  int64_t v28 = v27 + (unint64_t)sub_18138BFCC(&v20[v27], &v206);
  if (v17 == 1)
  {
    uint64_t v29 = *(void *)(v9 + 136LL * v13 + 128);
    for (uint64_t i = (int)v28; v29 > (int)v28; uint64_t i = (int)v28)
    {
      if (v20[i]) {
        signed int v31 = v28;
      }
      else {
        signed int v31 = v28 + 1;
      }
      if (v20[v31]) {
        signed int v27 = v31;
      }
      else {
        signed int v27 = v31 + 1;
      }
      LODWORD(v28) = v27 + sub_18138BFCC(&v20[v27], &v206);
    }

    int v32 = v202;
    int v33 = *(_DWORD *)(v9 + 136LL * v13 + 172);
  }

  else
  {
    unint64_t v34 = &v20[v28];
    unsigned int v35 = v20[v28];
    if (v20[v28] < 0)
    {
      int v37 = v34[1];
      if (v34[1] < 0)
      {
        int v38 = v34[2];
        if (v38 < 0)
        {
          int v36 = sub_18138BFCC(v34, v207);
          unsigned int v35 = v207[0] & 0x7FFFFFFF;
        }

        else
        {
          unsigned int v35 = v38 & 0x7F | (v35 << 14) & 0x1FC07F | ((v37 & 0x7F) << 7);
          int v36 = 3;
        }
      }

      else
      {
        unsigned int v35 = ((v35 & 0x7F) << 7) | v37;
        int v36 = 2;
      }
    }

    else
    {
      int v36 = 1;
    }

    int v39 = v36 + v28;
    int64_t v28 = *(void *)(v9 + 136LL * v13 + 128);
    while (v28 > v39)
    {
      signed int v27 = v39 + (v35 >> 1);
      int v40 = v27 + sub_18138BFCC(&v20[v27], &v206);
      unint64_t v41 = &v20[v40];
      unsigned int v35 = *v41;
      if ((v35 & 0x80) != 0)
      {
        int v42 = v41[1];
        if (v41[1] < 0)
        {
          int v43 = v41[2];
          if (v43 < 0)
          {
            int v44 = sub_18138BFCC(v41, v207);
            unsigned int v35 = v207[0] & 0x7FFFFFFF;
            int v39 = v44 + v40;
          }

          else
          {
            unsigned int v35 = v43 & 0x7F | (v35 << 14) & 0x1FC07F | ((v42 & 0x7F) << 7);
            int v39 = v40 + 3;
          }
        }

        else
        {
          unsigned int v35 = ((v35 & 0x7F) << 7) | v42;
          int v39 = v40 + 2;
        }
      }

      else
      {
        int v39 = v40 + 1;
      }
    }

    LODWORD(v28) = *(_DWORD *)(v9 + 136LL * v13 + 224) + v28;
    int v32 = v202;
  }

  int v199 = v23;
  if ((int)v28 >= v200)
  {
    if (*((_DWORD *)a1 + 15))
    {
LABEL_70:
      int v47 = 1;
      int v53 = v200;
      LODWORD(v28) = v200;
      goto LABEL_73;
    }

    uint64_t v78 = *v15;
    uint64_t v79 = v26 + 1;
    int __srca = *(_DWORD *)(*(void *)a1 + 92LL);
    unsigned int v191 = v13;
    while (1)
    {
      int v80 = v78;
      uint64_t v81 = *v78;
      unsigned int v82 = sub_18138BCF4((uint64_t)a1, v79 + (v81 << 37));
      if (!v82)
      {
        int v47 = 1;
        int v23 = v199;
        int v53 = v200;
        LODWORD(v28) = v200;
        int v32 = v202;
        unsigned int v13 = v191;
        goto LABEL_73;
      }

      uint64_t v83 = v82;
      unint64_t v84 = *(char **)v82;
      unsigned int v85 = __rev16(**(unsigned __int16 **)v82);
      if (v85)
      {
        int v47 = 0;
        goto LABEL_174;
      }

      uint64_t v86 = (int)v82[3];
      if ((_DWORD)v86 != v82[2])
      {
        int v87 = &v84[v86];
        int v88 = v84[v86];
        unsigned int v85 = v88;
        if (v88 < 0)
        {
          int v89 = v87[1];
          if (v87[1] < 0)
          {
            int v90 = v87[2];
            if (v90 < 0)
            {
              unint64_t v91 = v84;
              sub_18138BFCC(v87, v207);
              unint64_t v84 = v91;
              unsigned int v85 = v207[0] & 0x7FFFFFFF;
            }

            else
            {
              unsigned int v85 = v90 & 0x7F | (v85 << 14) & 0x1FC07F | ((v89 & 0x7F) << 7);
            }
          }

          else
          {
            unsigned int v85 = ((v85 & 0x7F) << 7) | v89;
          }
        }

        if (v85)
        {
          int v47 = 1;
LABEL_174:
          unsigned int v13 = v191;
          if (__srca == 1) {
            goto LABEL_279;
          }
          uint64_t v113 = (int)v83[3];
          if ((int)v85 >= (int)v113 || ((int v114 = v83[2], v85 >= 4) ? (v115 = v114 < (int)v113) : (v115 = 1), v115))
          {
            *((_DWORD *)a1 + 15) = 267;
            goto LABEL_279;
          }

          __n_4 = v84;
          uint64_t v180 = v85 - 4LL;
          int __srcc = v83[2];
          if (v114 <= (int)v113)
          {
            int __na = 0;
            __srcd = 0LL;
          }

          else
          {
            int v174 = v83[3];
            uint64_t v117 = &v84[v113];
            unsigned int __n = v84[v113];
            if (v84[v113] < 0)
            {
              int v165 = v117[1];
              if (v117[1] < 0)
              {
                int v166 = v117[2];
                if (v166 < 0)
                {
                  int v173 = sub_18138BFCC(v117, v207);
                  unsigned int __n = v207[0] & 0x7FFFFFFF;
                }

                else
                {
                  unsigned int __n = v166 & 0x7F | (__n << 14) & 0x1FC07F | ((v165 & 0x7F) << 7);
                  int v173 = 3;
                }
              }

              else
              {
                unsigned int __n = ((__n & 0x7F) << 7) | v165;
                int v173 = 2;
              }
            }

            else
            {
              int v173 = 1;
            }

            if (__n < v85)
            {
              *((_DWORD *)a1 + 15) = 267;
LABEL_278:
              unsigned int v13 = v191;
LABEL_279:
              uint64_t v167 = &off_18C4653A8;
              if (dword_18C465380)
              {
                int v23 = v199;
                int v53 = v200;
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v83);
                --qword_18C468B10;
                off_18C4653A8(v83);
                uint64_t v83 = (_DWORD *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v167 = &xmmword_18C465410;
                  goto LABEL_285;
                }
              }

              else
              {
                int v23 = v199;
                int v53 = v200;
LABEL_285:
                (*v167)(v83);
              }

              LODWORD(v28) = v53;
              int v32 = v202;
              goto LABEL_73;
            }

            unsigned int v13 = v191;
            if (*((_DWORD *)a1 + 15)) {
              goto LABEL_279;
            }
            int v168 = __srcc - v174;
            if (sqlite3_initialize() || (__srcd = (int8x8_t *)sub_18126F0AC(v168 + 2)) == 0LL)
            {
              BOOL v115 = v168 < -1;
              unsigned int v13 = v191;
              if (!v115) {
                *((_DWORD *)a1 + 15) = 7;
              }
              goto LABEL_279;
            }

            int v175 = v173 + v174;
            bzero(__srcd, v168 + 2);
            unint64_t v169 = (int)(__n - v180);
            if (__n - v180 > 0x7F)
            {
              if (v169 >> 14)
              {
                int __na = sub_181308E00(__srcd, v169);
              }

              else
              {
                __srcd->i8[0] = (v169 >> 7) | 0x80;
                __srcd->i8[1] = (__n - v180) & 0x7F;
                int __na = 2;
              }
            }

            else
            {
              __srcd->i8[0] = __n - v180;
              int __na = 1;
            }

            int v170 = v83[2];
            BOOL v171 = __OFSUB__(v170, v175);
            int v172 = v170 - v175;
            if (!((v172 < 0) ^ v171 | (v172 == 0)))
            {
              memcpy((char *)__srcd + __na, &__n_4[v175], v172);
              int __na = __na - v175 + v83[2];
            }
          }

          size_t v118 = &__n_4[v85];
          signed int v119 = v83[3] - v180;
          memmove(__n_4 + 4, v118, (int)v83[3] - v180 - 4);
          *((_WORD *)__n_4 + 1) = bswap32(v119) >> 16;
          if (__na >= 1)
          {
            memcpy(&__n_4[v119], __srcd, __na);
            v119 += __na;
          }

          if (__srcd)
          {
            uint64_t v120 = (void (**)(int8x8_t *))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_198;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(__srcd);
            --qword_18C468B10;
            off_18C4653A8(__srcd);
            __srcd = (int8x8_t *)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v120 = (void (**)(int8x8_t *))&xmmword_18C465410;
LABEL_198:
              (*v120)(__srcd);
            }
          }

          sub_181389984(a1, v79 + (v81 << 37), __n_4, v119);
          goto LABEL_278;
        }
      }

      LODWORD(v207[0]) = 0x4000000;
      if (__srca != 1) {
        sub_181389984(a1, v79 + (v81 << 37), (char *)v207, 4u);
      }
      unint64_t v92 = &off_18C4653A8;
      int v23 = v199;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v83);
        --qword_18C468B10;
        off_18C4653A8(v83);
        uint64_t v83 = (_DWORD *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_112;
        }
        unint64_t v92 = &xmmword_18C465410;
      }

      (*v92)(v83);
LABEL_112:
      ++v79;
      int v32 = v202;
      uint64_t v78 = v80;
      unsigned int v13 = v191;
      if (*((_DWORD *)a1 + 15)) {
        goto LABEL_70;
      }
    }
  }

  if (v32 < 1)
  {
    int v47 = 0;
  }

  else
  {
    uint64_t v45 = 0LL;
    int v46 = 0;
    int v47 = 0;
    do
    {
      signed int v49 = &v23[v45];
      int v50 = v23[v45];
      if (v23[v45] < 0)
      {
        int v51 = v49[1];
        if (v49[1] < 0)
        {
          int v52 = v49[2];
          if (v52 < 0)
          {
            uint64_t v48 = sub_18138BFCC(v49, v207);
            int v50 = v207[0] & 0x7FFFFFFF;
          }

          else
          {
            int v50 = v52 & 0x7F | (v50 << 14) & 0x1FC07F | ((v51 & 0x7F) << 7);
            uint64_t v48 = 3LL;
          }
        }

        else
        {
          int v50 = ((v50 & 0x7F) << 7) | v51;
          uint64_t v48 = 2LL;
        }

        int v32 = v202;
      }

      else
      {
        uint64_t v48 = 1LL;
      }

      v45 += v48;
      v46 += v50;
      if (v46 == (_DWORD)v28) {
        int v47 = 1;
      }
    }

    while ((int)v45 < v32);
  }

  int v53 = v200;
LABEL_73:
  if (v27 == bswap32(*(unsigned __int16 *)v20) >> 16)
  {
    if (!v47 && (_DWORD)v28 != v53)
    {
LABEL_93:
      if ((_DWORD)v28 == v53)
      {
        LODWORD(v65) = 0;
        LODWORD(v28) = v53;
        if (!*((_DWORD *)a1 + 15)) {
          goto LABEL_235;
        }
      }

      else
      {
        LODWORD(v28) = v28 + sub_18138BFCC(&v20[(int)v28], &v205);
        uint64_t v75 = (int8x8_t *)&v20[v27];
        unint64_t v76 = v205 + v206;
        if (v205 + v206 > 0x7F)
        {
          if (v76 >> 14)
          {
            int v77 = sub_181308E00(v75, v76);
          }

          else
          {
            v75->i8[0] = (v76 >> 7) | 0x80;
            v75->i8[1] = v76 & 0x7F;
            int v77 = 2;
          }
        }

        else
        {
          v75->i8[0] = v76;
          int v77 = 1;
        }

        LODWORD(v65) = 0;
        v27 += v77;
        if (!*((_DWORD *)a1 + 15)) {
          goto LABEL_235;
        }
      }

      goto LABEL_264;
    }

    *(_WORD *)uint64_t v20 = 0;
  }

  if (!v47) {
    goto LABEL_93;
  }
  uint64_t v54 = v9 + 136LL * v13;
  int v56 = *(_DWORD *)(v54 + 164);
  int v55 = (_DWORD *)(v54 + 164);
  if (v27 == v56 && *v189 == *__len)
  {
    if (v32 < 1)
    {
      int v59 = 0;
      LODWORD(v65) = 0;
    }

    else
    {
      uint64_t v57 = 0LL;
      int v58 = 0;
      int v59 = 0;
      while (1)
      {
        unsigned int v60 = &v199[v57];
        int v61 = v199[v57];
        if (v199[v57] < 0)
        {
          int v63 = v60[1];
          if (v60[1] < 0)
          {
            int v64 = v60[2];
            if (v64 < 0)
            {
              uint64_t v62 = sub_18138BFCC(v60, v207);
              int v61 = v207[0] & 0x7FFFFFFF;
            }

            else
            {
              int v61 = v64 & 0x7F | (v61 << 14) & 0x1FC07F | ((v63 & 0x7F) << 7);
              uint64_t v62 = 3LL;
            }
          }

          else
          {
            int v61 = ((v61 & 0x7F) << 7) | v63;
            uint64_t v62 = 2LL;
          }

          int v32 = v202;
        }

        else
        {
          uint64_t v62 = 1LL;
        }

        LODWORD(v65) = v61 + v58;
        v57 += v62;
        ++v59;
        v58 += v61;
      }

      LODWORD(v65) = v58;
    }

LABEL_155:
    if ((_DWORD)v28 == v200)
    {
      signed int v27 = (int)v65;
      LODWORD(v28) = v200;
      int v23 = v199;
      int v53 = v200;
      if (!*((_DWORD *)a1 + 15)) {
        goto LABEL_235;
      }
      goto LABEL_264;
    }

    int v204 = 0;
    __int128 v108 = &v20[(int)v28];
    int v109 = *v108;
    if ((v109 & 0x80) != 0)
    {
      int v112 = v108[1];
      if (v108[1] < 0)
      {
        int v116 = v108[2];
        if (v116 < 0)
        {
          unsigned int v110 = sub_18138BFCC(v108, v207);
          int v109 = v207[0] & 0x7FFFFFFF;
        }

        else
        {
          int v109 = v116 & 0x7F | (v109 << 14) & 0x1FC07F | ((v112 & 0x7F) << 7);
          unsigned int v110 = 3;
        }
      }

      else
      {
        int v109 = ((v109 & 0x7F) << 7) | v112;
        unsigned int v110 = 2;
      }
    }

    else
    {
      unsigned int v110 = 1;
    }

    unint64_t v121 = (int)v28 + (unint64_t)v110;
    uint64_t v122 = &v20[v121];
    int v123 = v20[v121];
    if (v20[v121] < 0)
    {
      int v125 = v122[1];
      if (v122[1] < 0)
      {
        int v126 = v122[2];
        if (v126 < 0)
        {
          int v127 = v109;
          int v124 = sub_18138BFCC(v122, v207);
          int v109 = v127;
          int v123 = v207[0] & 0x7FFFFFFF;
        }

        else
        {
          int v123 = v126 & 0x7F | (v123 << 14) & 0x1FC07F | ((v125 & 0x7F) << 7);
          int v124 = 3;
        }
      }

      else
      {
        int v123 = ((v123 & 0x7F) << 7) | v125;
        int v124 = 2;
      }
    }

    else
    {
      int v124 = 1;
    }

    int v128 = (int)v65;
    if (v59 != 1)
    {
      int __lenb = v124;
      int v129 = v123;
      int v130 = v109;
      int v131 = sub_18138BF34(&v20[(int)v65], &v204);
      int v123 = v129;
      int v109 = v130;
      int v128 = v131 + (_DWORD)v65;
      int v124 = __lenb;
    }

    int v132 = v124 + v121;
    uint64_t v133 = &v20[v128];
    if (*v133 < 0)
    {
      if (v133[1] < 0)
      {
        if (v133[2] < 0)
        {
          int __lenc = v123;
          int v135 = v109;
          int v136 = v132;
          int v134 = sub_18138BFCC(v133, v207);
          int v132 = v136;
          int v123 = __lenc;
          int v109 = v135;
        }

        else
        {
          int v134 = 3;
        }
      }

      else
      {
        int v134 = 2;
      }
    }

    else
    {
      int v134 = 1;
    }

    int v137 = v134 + v128;
    int v138 = v204;
    if (v204 >= v109) {
      int v139 = v109;
    }
    else {
      int v139 = v204;
    }
    int v140 = v123 + v109 - v139;
    if (v137 + v140 > v200 || v132 + v123 > v200)
    {
      *((_DWORD *)a1 + 15) = 267;
      signed int v27 = (int)v65;
      LODWORD(v65) = v28;
      LODWORD(v28) = v132;
LABEL_225:
      int v23 = v199;
      int v53 = v200;
      if (!*((_DWORD *)a1 + 15)) {
        goto LABEL_235;
      }
      goto LABEL_264;
    }

    int v181 = v132 + v123;
    int __n_4a = v132;
    unsigned int __lena = v123;
    int __srce = v109;
    if (v59 != 1) {
      LODWORD(v65) = sub_181305164((int8x8_t *)&v20[(int)v65], v139) + (_DWORD)v65;
    }
    uint64_t v142 = (int)v65 + (uint64_t)(int)sub_181305164((int8x8_t *)&v20[(int)v65], v140);
    uint64_t v143 = v9 + 136LL * v13;
    if (__srce <= *(_DWORD *)(v143 + 208))
    {
      if (__srce > v138)
      {
        memcpy(&v20[v142], (const void *)(*(void *)(v143 + 200) + v139), __srce - v139);
        LODWORD(v142) = v142 + __srce - v139;
      }
    }

    else
    {
      *((_DWORD *)a1 + 15) = 267;
    }

    int v23 = v199;
    memmove(&v20[(int)v142], &v20[__n_4a], __lena);
    signed int v27 = v142 + __lena;
    LODWORD(v65) = v28;
    LODWORD(v28) = v181;
LABEL_234:
    int v53 = v200;
    if (!*((_DWORD *)a1 + 15)) {
      goto LABEL_235;
    }
    goto LABEL_264;
  }

  if (v27 != 4)
  {
    LODWORD(v65) = 0;
    if (!*((_DWORD *)a1 + 15)) {
      goto LABEL_235;
    }
    goto LABEL_264;
  }

  int __src = v55;
  uint64_t v66 = *v189;
  uint64_t v67 = (v66 << 32) - 0x100000000LL;
  uint64_t v190 = v188 << 37;
  uint64_t v68 = v66 - 1;
  do
  {
    uint64_t v70 = v67;
    uint64_t v71 = v68;
    if (v68 <= *__len) {
      break;
    }
    int v72 = sub_18138BCF4((uint64_t)a1, v190 + v68);
    if (!v72) {
      break;
    }
    int v73 = v72;
    int v74 = v72[2];
    int v69 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v73);
      --qword_18C468B10;
      off_18C4653A8(v73);
      int v73 = (_DWORD *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_100;
      }
      int v69 = &xmmword_18C465410;
    }

    (*v69)(v73);
LABEL_100:
    uint64_t v67 = v70 - 0x100000000LL;
    uint64_t v68 = v71 - 1;
  }

  while (v74 == 4);
  if (*__len != (_DWORD)v71)
  {
    LODWORD(v65) = 0;
    signed int v27 = 4;
    goto LABEL_225;
  }

  sqlite3_int64 v93 = v190 + (v70 >> 32);
  unint64_t v94 = (char **)sub_18138BCF4((uint64_t)a1, v93);
  int v65 = v94;
  int v23 = v199;
  if (!v94)
  {
    signed int v27 = 4;
    goto LABEL_234;
  }

  uint64_t v96 = *((int *)v94 + 3);
  if ((_DWORD)v96 == *__src)
  {
    int __srcb = (void *)v93;
    unsigned int v97 = 0;
    signed int v98 = 0;
    __int128 v99 = *v94;
    __int128 v100 = &(*v94)[v96];
    int v192 = v94;
    int v101 = *((_DWORD *)v94 + 2) - v96;
    do
    {
      size_t v103 = v97;
      __int128 v104 = &v100[v97];
      int v105 = *v104;
      if (*v104 < 0)
      {
        int v106 = v104[1];
        if (v104[1] < 0)
        {
          int v107 = v104[2];
          if (v107 < 0)
          {
            int v102 = sub_18138BFCC(v104, v207);
            int v105 = v207[0] & 0x7FFFFFFF;
          }

          else
          {
            int v105 = v107 & 0x7F | (v105 << 14) & 0x1FC07F | ((v106 & 0x7F) << 7);
            int v102 = 3;
          }
        }

        else
        {
          int v105 = ((v105 & 0x7F) << 7) | v106;
          int v102 = 2;
        }
      }

      else
      {
        int v102 = 1;
      }

      v98 += v105;
      unsigned int v97 = v102 + v103;
    }

    while (v102 + (int)v103 < v101);
    memmove(&v99[v98], v100, v103);
    int v65 = v192;
    *((_WORD *)*v192 + 1) = bswap32(v98) >> 16;
    sub_181389984(a1, (uint64_t)__srcb, *v192, v98 + v103);
    uint64_t v95 = v188;
    if (!(_DWORD)v103) {
      sub_1813A0970((char *)a1, v188, *__len);
    }
  }

  __int128 v111 = (void (**)(char **, uint64_t))&off_18C4653A8;
  int v53 = v200;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v65);
    --qword_18C468B10;
    off_18C4653A8(v65);
    int v65 = (char **)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int128 v111 = (void (**)(char **, uint64_t))&xmmword_18C465410;
      goto LABEL_168;
    }
  }

  else
  {
LABEL_168:
    (*v111)(v65, v95);
    LODWORD(v65) = 0;
  }

  signed int v27 = 4;
  if (!*((_DWORD *)a1 + 15))
  {
LABEL_235:
    memmove(&v20[v27], &v20[(int)v28], v197 - (int)v28);
    int v144 = v202;
    unsigned int v145 = v53 - (v28 - v27);
    *((_WORD *)v20 + 1) = bswap32(v145) >> 16;
    if (v202 < 1) {
      goto LABEL_261;
    }
    int v146 = v28 - v27;
    signed int v147 = 0;
    int v148 = 0;
    uint64_t v149 = 0LL;
    unsigned int v198 = v145;
    signed int v150 = v145;
    int v201 = v146;
    do
    {
      uint64_t v152 = &v23[v149];
      int v153 = v23[v149];
      if (v23[v149] < 0)
      {
        int v155 = v152[1];
        if (v152[1] < 0)
        {
          int v156 = v152[2];
          if (v156 < 0)
          {
            unsigned int v157 = sub_18138BFCC(v152, v207);
            int v146 = v201;
            uint64_t v154 = v157;
            int v153 = v207[0] & 0x7FFFFFFF;
          }

          else
          {
            int v153 = v156 & 0x7F | (v153 << 14) & 0x1FC07F | ((v155 & 0x7F) << 7);
            uint64_t v154 = 3LL;
          }
        }

        else
        {
          int v153 = ((v153 & 0x7F) << 7) | v155;
          uint64_t v154 = 2LL;
        }

        int v144 = v202;
      }

      else
      {
        uint64_t v154 = 1LL;
      }

      v147 += v153;
      if (v147 != (_DWORD)v65)
      {
        if (v147 <= v27) {
          int v158 = 0;
        }
        else {
          int v158 = v146;
        }
        int v159 = v147 - v158;
        uint64_t v160 = (int8x8_t *)&v20[v150];
        unint64_t v161 = v147 - v158 - v148;
        if ((v147 - v158 - v148) <= 0x7F)
        {
          v160->i8[0] = v147 - v158 - v148;
          int v151 = 1;
        }

        else if (v161 >> 14)
        {
          int v151 = sub_181308E00(v160, v161);
          int v146 = v201;
          int v144 = v202;
        }

        else
        {
          v160->i8[0] = (v161 >> 7) | 0x80;
          v160->i8[1] = (v147 - v158 - v148) & 0x7F;
          int v151 = 2;
        }

        v150 += v151;
        int v148 = v159;
        int v23 = v199;
      }

      v149 += v154;
    }

    while ((int)v149 < v144);
    int v162 = *v189;
    if (v198 == v150)
    {
      uint64_t v163 = v188;
      if (v162 == 1)
      {
        unsigned int v145 = v198;
        goto LABEL_263;
      }

      sub_1813A0970((char *)a1, v188, v162);
      unsigned int v145 = v198;
LABEL_261:
      int v162 = *v189;
    }

    else
    {
      unsigned int v145 = v150;
    }

    uint64_t v163 = v188;
LABEL_263:
    sub_181389984(a1, (v163 << 37) + v162, v20, v145);
  }

uint64_t sub_18139F890(uint64_t result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = (_DWORD *)(result + 60);
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v6 = result;
    uint64_t v7 = 0LL;
    signed int v31 = a2 + 2;
    while (1)
    {
      uint64_t v11 = (int *)(*((void *)a2 + 11) + 32 * v7);
      int v12 = v11[6];
      int v13 = *(_DWORD *)(*(void *)v6 + 136LL);
      if (v12 >= v13) {
        break;
      }
      int v15 = 1;
      if (!v11[1])
      {
LABEL_4:
        unsigned int v8 = v11 - 8;
        if (!v7) {
          unsigned int v8 = (int *)v31;
        }
        unint64_t v9 = *v8;
        sub_18138A828(v3, (uint64_t)(v11 + 4), v12 >= v13);
        sub_18138A828(v3, (uint64_t)(v11 + 4), v9);
        unint64_t v10 = a3;
        goto LABEL_7;
      }

uint64_t sub_18139FB7C(uint64_t a1, unsigned int *a2)
{
  *(_WORD *)(*((void *)a2 + 2) + 2LL) = bswap32(*((unsigned __int16 *)a2 + 12)) >> 16;
  if (*((_BYTE *)a2 + 74))
  {
    if (!*((_BYTE *)a2 + 73)) {
      goto LABEL_23;
    }
    uint64_t v4 = *((void *)a2 + 11);
    uint64_t v5 = *(unsigned int *)(v4 + 24);
    unint64_t v6 = v5 + 9;
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    if ((int)v5 + 9 <= v7)
    {
      uint64_t v19 = *(void *)(v4 + 16);
    }

    else
    {
      if (v7) {
        LODWORD(v8) = *(_DWORD *)(v4 + 28);
      }
      else {
        LODWORD(v8) = 64;
      }
      unint64_t v8 = (int)v8;
      do
      {
        unint64_t v9 = v8;
        v8 *= 2LL;
      }

      while (v9 < v6);
      uint64_t v10 = *(void *)(v4 + 16);
      if (sqlite3_initialize() || (uint64_t v19 = sub_18127D33C(v10, v9)) == 0)
      {
        *(_DWORD *)(a1 + 60) = 7;
LABEL_23:
        ++a2[20];
        goto LABEL_24;
      }

      *(_DWORD *)(v4 + 28) = v9;
      *(void *)(v4 + 16) = v19;
      LODWORD(v5) = *(_DWORD *)(v4 + 24);
    }

    *(_BYTE *)(v19 + (int)v5) = 0;
    ++*(_DWORD *)(v4 + 24);
    goto LABEL_23;
  }

  size_t v11 = a2[10];
  if (!(_DWORD)v11) {
    goto LABEL_24;
  }
  int v12 = (const void *)*((void *)a2 + 4);
  signed int v13 = a2[6];
  unsigned int v14 = a2[7];
  unint64_t v15 = (v13 + v11);
  if (v15 <= v14)
  {
    uint64_t v25 = *((void *)a2 + 2);
  }

  else
  {
    if (v14) {
      LODWORD(v16) = a2[7];
    }
    else {
      LODWORD(v16) = 64;
    }
    unint64_t v16 = (int)v16;
    do
    {
      unint64_t v17 = v16;
      v16 *= 2LL;
    }

    while (v17 < v15);
    uint64_t v18 = *((void *)a2 + 2);
    if (sqlite3_initialize() || (uint64_t v25 = sub_18127D33C(v18, v17)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      goto LABEL_24;
    }

    a2[7] = v17;
    *((void *)a2 + 2) = v25;
    signed int v13 = a2[6];
  }

  memcpy((void *)(v25 + v13), v12, v11);
  a2[6] += v11;
LABEL_24:
  sub_181389984((unsigned __int8 *)a1, (int)a2[2] + ((unint64_t)*a2 << 37), *((char **)a2 + 2), a2[6]);
  a2[6] = 0;
  a2[10] = 0;
  LODWORD(v20) = a2[7];
  if (v20 >= 4)
  {
    uint64_t v24 = 0LL;
    uint64_t result = *((void *)a2 + 2);
LABEL_32:
    *(_DWORD *)(result + v24) = 0;
    a2[6] += 4;
    goto LABEL_33;
  }

  if ((_DWORD)v20) {
    uint64_t v20 = v20;
  }
  else {
    uint64_t v20 = 64LL;
  }
  do
  {
    unint64_t v21 = v20;
    v20 *= 2LL;
  }

  while (v21 < 4);
  uint64_t v22 = *((void *)a2 + 2);
  uint64_t result = sqlite3_initialize();
  if (!(_DWORD)result)
  {
    uint64_t result = sub_18127D33C(v22, v21);
    if (result)
    {
      a2[7] = v21;
      *((void *)a2 + 2) = result;
      uint64_t v24 = (int)a2[6];
      goto LABEL_32;
    }
  }

  *(_DWORD *)(a1 + 60) = 7;
LABEL_33:
  ++a2[2];
  a2[3] = 0;
  ++a2[19];
  *(_WORD *)((char *)a2 + 73) = 257;
  return result;
}

uint64_t sub_18139FDBC(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v5 = result;
    *a3 = *(_DWORD *)(a2 + 8) - 1;
  }

  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    unsigned int v7 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_12:
      uint64_t result = (*v7)(v6);
      goto LABEL_13;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v6);
    uint64_t v6 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v7 = &xmmword_18C465410;
      goto LABEL_12;
    }
  }

uint64_t sub_1813A0170(uint64_t result, int **a2)
{
  if (*(_DWORD *)result) {
    return result;
  }
  unint64_t v3 = (_DWORD *)result;
  uint64_t v4 = *a2;
  if (**a2 >= 2)
  {
    int v5 = v4[7];
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t v7 = 16LL * (v5 - 1) + 48, (result = sub_18126F0AC(v7)) == 0))
    {
      uint64_t v6 = 0LL;
      if (v5 >= -1) {
        *unint64_t v3 = 7;
      }
    }

    else
    {
      uint64_t v6 = (uint64_t *)result;
      bzero((void *)result, v7);
      uint64_t result = (uint64_t)memcpy(v6, v4, v7);
      uint64_t v8 = v4[7];
      if ((int)v8 >= 1)
      {
        if ((_DWORD)v8 == 1)
        {
          uint64_t v9 = 0LL;
        }

        else
        {
          uint64_t v9 = v8 & 0xFFFFFFFE;
          uint64_t v10 = v6 + 7;
          uint64_t v11 = v9;
          do
          {
            *(v10 - 2) = 0LL;
            void *v10 = 0LL;
            v10 += 4;
            v11 -= 2LL;
          }

          while (v11);
          if (v9 == v8)
          {
LABEL_16:
            unint64_t v14 = 0LL;
            uint64_t v15 = 0LL;
            while (1)
            {
              unint64_t v16 = &v6[v14 / 2];
              if (*v3) {
                break;
              }
              uint64_t v17 = *((int *)v16 + 9);
              if (sqlite3_initialize() || (uint64_t v18 = (void *)sub_18126F0AC(56 * v17)) == 0LL)
              {
                break;
              }

              uint64_t v19 = v18;
              bzero(v18, 56 * v17);
              v6[v14 / 2 + 5] = (uint64_t)v19;
              uint64_t result = (uint64_t)memcpy(v19, *(const void **)&v4[v14 + 10], 56 * v17);
              ++v15;
              v14 += 4LL;
              if (v15 >= v4[7]) {
                goto LABEL_21;
              }
            }

            v16[5] = 0LL;
            if (v4[7] >= 1)
            {
              uint64_t v22 = 0LL;
              unint64_t v23 = v6 + 5;
              do
              {
                uint64_t v24 = *v23;
                if (*v23)
                {
                  uint64_t v25 = &off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v24);
                    --qword_18C468B10;
                    off_18C4653A8(v24);
                    uint64_t v24 = xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70) {
                      goto LABEL_35;
                    }
                    uint64_t v25 = &xmmword_18C465410;
                  }

                  (*v25)(v24);
                }

uint64_t sub_1813A04AC(uint64_t result, int a2, uint64_t a3)
{
  if (!*(_DWORD *)(result + 60))
  {
    int v3 = *(_DWORD *)(a3 + 16LL * a2 + 36);
    if (v3)
    {
      int v4 = *(_DWORD *)(*(void *)(a3 + 16LL * a2 + 40) + 56LL * (v3 - 1) + 8)
         - *(_DWORD *)(*(void *)(a3 + 16LL * a2 + 40) + 56LL * (v3 - 1) + 4)
         + 1;
      int v5 = (void *)(a3 + 16LL * a2 + 40);
      int v6 = a2;
      do
      {
        BOOL v7 = __OFSUB__(v6--, 1);
        if (v6 < 0 != v7)
        {
          int v12 = 0;
          int v6 = -1;
          goto LABEL_20;
        }

        uint64_t v8 = *((unsigned int *)v5 - 5);
        v5 -= 2;
      }

      while (!(_DWORD)v8);
      if ((int)v8 < 1)
      {
        int v9 = 0;
      }

      else
      {
        int v9 = 0;
        uint64_t v10 = (_DWORD *)(*v5 + 8LL);
        do
        {
          int v11 = *v10 - *(v10 - 1);
          if (v11 >= v9) {
            int v9 = v11 + 1;
          }
          v10 += 14;
          --v8;
        }

        while (v8);
      }

      if (v9 >= v4) {
        int v12 = v9;
      }
      else {
        int v12 = 0;
      }
      if (v9 < v4) {
        int v6 = -1;
      }
LABEL_20:
      if (v6 >= 0) {
        int v13 = v12;
      }
      else {
        int v13 = v4;
      }
      if (v6 >= 0) {
        int v14 = v6;
      }
      else {
        int v14 = a2;
      }
      if (!*(_DWORD *)(a3 + 16LL * v14 + 32))
      {
        uint64_t v15 = v14;
        int v16 = v14 + 1;
        int v17 = *(_DWORD *)(a3 + 28);
        if (v16 < v17)
        {
          uint64_t v18 = a3 + 16 * v15;
          uint64_t v19 = (_DWORD *)(v18 + 36);
          uint64_t v20 = (uint64_t *)(v18 + 40);
          for (uint64_t i = v16; i < v17; ++i)
          {
            uint64_t v37 = a3 + 16 * i;
            if (*(_DWORD *)(v37 + 32)) {
              break;
            }
            uint64_t v21 = *(unsigned int *)(v37 + 36);
            int v38 = (_DWORD *)(v37 + 36);
            if ((int)v21 >= 1)
            {
              uint64_t v22 = (void *)(a3 + 16 * i + 40);
              uint64_t v23 = v21 + 1;
              while (1)
              {
                unsigned int v24 = v23 - 2;
                if (*(_DWORD *)(*v22 + 56LL * v24 + 8) - *(_DWORD *)(*v22 + 56LL * v24 + 4) + 1 > v13
                  || *(_DWORD *)(result + 60))
                {
                  return result;
                }

                uint64_t v25 = result;
                uint64_t v26 = a3;
                uint64_t v27 = v19;
                int v28 = *v19;
                unint64_t v29 = v20;
                uint64_t v30 = *v20;
                uint64_t result = sqlite3_initialize();
                if ((_DWORD)result || (uint64_t result = sub_18127D33C(v30, 56LL * v28 + 56)) == 0)
                {
                  *(_DWORD *)(v25 + 60) = 7;
                  return result;
                }

                uint64_t v31 = result;
                uint64_t v19 = v27;
                uint64_t result = (uint64_t)memmove((void *)(result + 56), (const void *)result, 56 * *v27);
                *(_OWORD *)uint64_t v31 = 0u;
                *(_OWORD *)(v31 + 16) = 0u;
                *(_OWORD *)(v31 + 32) = 0u;
                *(void *)(v31 + 48) = 0LL;
                *unint64_t v29 = v31;
                if (*(_DWORD *)(v25 + 60)) {
                  return result;
                }
                uint64_t v20 = v29;
                uint64_t result = v25;
                a3 = v26;
                uint64_t v32 = *v22 + 56LL * v24;
                __int128 v33 = *(_OWORD *)v32;
                __int128 v34 = *(_OWORD *)(v32 + 16);
                __int128 v35 = *(_OWORD *)(v32 + 32);
                *(void *)(v31 + 48) = *(void *)(v32 + 48);
                *(_OWORD *)(v31 + 16) = v34;
                *(_OWORD *)(v31 + 32) = v35;
                *(_OWORD *)uint64_t v31 = v33;
                ++*v27;
                --*v38;
                if ((unint64_t)--v23 <= 1)
                {
                  int v17 = *(_DWORD *)(v26 + 28);
                  break;
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1813A0730(uint64_t result, unsigned int *a2)
{
  if (a2[28])
  {
    uint64_t v3 = result;
    BOOL v4 = *(int *)(*((void *)a2 + 11) + 24LL) >= 1 && (int)a2[20] > 3;
    int v5 = a2[21];
    if (v5 >= 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
      uint64_t v8 = 0x1000000000LL;
      do
      {
        uint64_t v9 = *((void *)a2 + 11);
        uint64_t v10 = v9 + v6;
        unsigned int v11 = *(_DWORD *)(v9 + v6 + 24);
        if (!v11) {
          break;
        }
        if (v4)
        {
          uint64_t result = (uint64_t)sub_181389984( (unsigned __int8 *)v3,  v8 + *(int *)(v9 + v6) + ((unint64_t)*a2 << 37),  *(char **)(v10 + 16),  v11);
          int v5 = a2[21];
        }

        *(_DWORD *)(v10 + 24) = 0;
        *(_DWORD *)(v9 + v6 + 4) = 0;
        ++v7;
        v8 += 0x80000000LL;
        v6 += 32LL;
      }

      while (v7 < v5);
    }

    a2[20] = 0;
    if (*(_DWORD *)(v3 + 60)) {
      goto LABEL_32;
    }
    uint64_t v12 = a2[26];
    if ((int)v12 < 1)
    {
      int v14 = (uint64_t *)(v3 + 88);
      if ((v12 & 0x80000000) != 0)
      {
        sub_1812CF36C(98740);
LABEL_23:
        uint64_t v20 = (void *)*v14;
        uint64_t v21 = (int)a2[28];
        if (!sub_1812B2390(*v14, 2u))
        {
          unint64_t v22 = v4 | (unint64_t)(2 * v21);
          uint64_t v23 = v20[16];
          if ((*(_WORD *)(v23 + 148) & 0x9000) != 0)
          {
            sub_1813040AC(v23 + 128, v22);
          }

          else
          {
            *(void *)(v23 + 128) = v22;
            *(_WORD *)(v23 + 148) = 4;
          }

          uint64_t v24 = *(void *)(*v20 + 24LL);
          if (v24) {
            xmmword_18C465410(v24);
          }
        }

        sqlite3_step(*(sqlite3_stmt **)(v3 + 88));
        *(_DWORD *)(v3 + 60) = sqlite3_reset(*(sqlite3_stmt **)(v3 + 88));
        uint64_t v25 = *(void *)(v3 + 88);
        uint64_t result = sub_1812B2390(v25, 1u);
        if (!(_DWORD)result)
        {
          uint64_t result = *(void *)(*(void *)v25 + 24LL);
          if (result) {
            uint64_t result = xmmword_18C465410(result);
          }
        }

char *sub_1813A0970(char *result, int a2, int a3)
{
  if (a3 == 1) {
    return result;
  }
  int v5 = result;
  uint64_t v6 = (uint64_t *)(result + 120);
  if (*((void *)result + 15)) {
    goto LABEL_14;
  }
  uint64_t result = sqlite3_mprintf( "DELETE FROM '%q'.'%q_idx' WHERE (segid, (pgno/2)) = (?1, ?2)",  *(void *)(*(void *)result + 8LL),  *(void *)(*(void *)result + 16LL));
  uint64_t v8 = result;
  if (*((_DWORD *)v5 + 15))
  {
    if (!result) {
      goto LABEL_14;
    }
  }

  else
  {
    if (!result)
    {
      *((_DWORD *)v5 + 15) = 7;
      if (*((_DWORD *)v5 + 15)) {
        return result;
      }
      goto LABEL_15;
    }

    *((_DWORD *)v5 + 15) = sub_18126DFE0( **(void **)v5,  (unsigned __int8 *)result,  0xFFFFFFFFLL,  133LL,  0LL,  v6,  0LL,  v7);
  }

  uint64_t v9 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    uint64_t result = (char *)(*v9)(v8);
    goto LABEL_14;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
  --qword_18C468B10;
  uint64_t result = (char *)off_18C4653A8(v8);
  uint64_t v8 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v9 = (uint64_t (**)(char *))&xmmword_18C465410;
    goto LABEL_13;
  }

uint64_t sub_1813A0B84(_DWORD *a1, int **a2, int a3, int a4)
{
  int v36 = a3;
  int v5 = *a2;
  __int128 v35 = *a2;
  if (a3 < 1 || (int v5 = v35, a1[15]))
  {
    uint64_t result = 0LL;
    goto LABEL_4;
  }

  uint64_t result = 0LL;
  while (1)
  {
    uint64_t v9 = v5[7];
    signed int v12 = 0;
    if (a4 > 0) {
      goto LABEL_19;
    }
LABEL_38:
    if (v12 < 0) {
      goto LABEL_4;
    }
    sub_1813A0DD0((uint64_t)a1, &v35, v12, &v36);
    if (!a1[15] && !v35[4 * v12 + 8]) {
      sub_1813A04AC((uint64_t)a1, v12 + 1, (uint64_t)v35);
    }
    if (v36 <= 0)
    {
      uint64_t result = 1LL;
      int v5 = v35;
      goto LABEL_4;
    }

    if (a4 == 1) {
      a4 = 2;
    }
    uint64_t result = 1LL;
    int v5 = v35;
    if (a1[15]) {
      goto LABEL_4;
    }
  }

  uint64_t v10 = 0LL;
  int v11 = 0;
  signed int v12 = 0;
  int v13 = v5 + 9;
  do
  {
    int v14 = *(v13 - 1);
    if (v14)
    {
      if (v14 > v11)
      {
        signed int v12 = v10;
        int v11 = a4;
      }

      if (v11 < a4) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }

    int v16 = *v13;
    v13 += 4;
    int v15 = v16;
    if (v16 > v11)
    {
      signed int v12 = v10;
      int v11 = v15;
    }

    ++v10;
  }

  while (v9 != v10);
  if (v11 >= a4) {
    goto LABEL_38;
  }
LABEL_19:
  if (*(_DWORD *)(*(void *)a1 + 68LL))
  {
    int v17 = *(_DWORD *)(*(void *)a1 + 180LL);
    if ((int)v9 >= 1 && v17 >= 1)
    {
      uint64_t v19 = 0LL;
      int v20 = 0;
      signed int v12 = -1;
      while (1)
      {
        uint64_t v21 = &v5[4 * v19];
        uint64_t v22 = v21[9];
LABEL_25:
        if (++v19 == v9) {
          goto LABEL_38;
        }
      }

      uint64_t v23 = (int64x2_t *)*((void *)v21 + 5);
      if ((_DWORD)v22 == 1)
      {
        uint64_t v24 = 0LL;
        int64x2_t v25 = 0uLL;
      }

      else
      {
        uint64_t v24 = v22 & 0xFFFFFFFE;
        uint64_t v26 = v23 + 6;
        int64x2_t v27 = 0uLL;
        uint64_t v28 = v24;
        int64x2_t v29 = 0uLL;
        do
        {
          int64x2_t v30 = *(int64x2_t *)((char *)v26 - 56);
          int64x2_t v31 = *v26;
          v26 += 7;
          int64x2_t v29 = vaddq_s64(v30, v29);
          int64x2_t v27 = vaddq_s64(v31, v27);
          v28 -= 2LL;
        }

        while (v28);
        int64x2_t v25 = vaddq_s64(v27, v29);
        if (v24 == v22)
        {
LABEL_34:
          if (v25.i64[1] >= 1
            && v17 <= (int)(100 * v25.i64[0] / v25.i64[1])
            && v20 < (int)(100 * v25.i64[0] / v25.i64[1]))
          {
            int v20 = 100 * v25.i64[0] / v25.i64[1];
            signed int v12 = v19;
          }

          goto LABEL_25;
        }
      }

      uint64_t v32 = v22 - v24;
      __int128 v33 = &v23[2].u64[7 * v24 + 1];
      do
      {
        int64x2_t v34 = *(int64x2_t *)v33;
        v33 += 7;
        int64x2_t v25 = vaddq_s64(v34, v25);
        --v32;
      }

      while (v32);
      goto LABEL_34;
    }
  }

double sub_1813A0DD0(uint64_t a1, int **a2, signed int a3, int *a4)
{
  BOOL v4 = a4;
  uint64_t v230 = *MEMORY[0x1895F89C0];
  uint64_t v212 = *a2;
  uint64_t v8 = &(*a2)[4 * a3 + 8];
  uint64_t v228 = 0LL;
  if (a4) {
    int v202 = *a4;
  }
  else {
    int v202 = 0;
  }
  int v210 = *(_DWORD *)(*(void *)a1 + 92LL);
  __int128 v9 = 0uLL;
  __int128 v220 = 0u;
  __int128 v221 = 0u;
  __int128 v222 = 0u;
  __int128 v223 = 0u;
  __int128 v224 = 0u;
  __int128 v225 = 0u;
  __int128 v226 = 0u;
  uint64_t v227 = 0LL;
  int v10 = *v8;
  if (*v8)
  {
    int v11 = &v212[4 * a3];
    uint64_t v12 = (uint64_t)(v11 + 12);
    uint64_t v13 = *((void *)v11 + 7) + 56LL * v11[13];
    int v15 = *(_DWORD *)(v13 - 56);
    uint64_t v14 = v13 - 56;
    sub_18139DD3C((uint64_t *)a1, (int *)&v220, v15);
    DWORD2(v220) = *(_DWORD *)(v14 + 8) + 1;
    LODWORD(v227) = 0;
  }

  else
  {
    uint64_t v18 = (int *)(a1 + 60);
    int v17 = *(_DWORD *)(a1 + 60);
    if (v17)
    {
      int v19 = 0;
      int v20 = v212;
    }

    else
    {
      int v20 = v212;
      if (v212[6] < 2000)
      {
        memset(v229, 0, 252);
        uint64_t v171 = v212[7];
        if ((int)v171 >= 1)
        {
          for (uint64_t i = 0LL; i != v171; ++i)
          {
            int v173 = &v212[4 * i];
            uint64_t v174 = v173[9];
            if ((int)v174 >= 1)
            {
              int v175 = (int *)*((void *)v173 + 5);
              do
              {
                int v176 = *v175;
                v175 += 14;
                unsigned int v177 = v176 - 1;
                --v174;
              }

              while (v174);
            }
          }
        }

        int v19 = -32;
        uint64_t v178 = (unsigned int *)v229;
        do
        {
          unsigned int v180 = *v178++;
          unsigned int v179 = v180;
          v19 += 32;
        }

        while (v180 == -1);
        int v181 = 0;
        do
        {
          unsigned int v182 = v179 >> v181++;
          ++v19;
        }

        while ((v182 & 1) != 0);
        int v17 = 0;
      }

      else
      {
        int v19 = 0;
        int v17 = 13;
        *uint64_t v18 = 13;
      }
    }

    if (v20[7] - 1 == a3)
    {
      sub_1813A0170(a1 + 60, a2);
      int v20 = *a2;
      int v17 = *v18;
    }

    uint64_t v212 = v20;
    if (v17) {
      return *(double *)&v9;
    }
    int v183 = &v20[4 * a3 + 4];
    uint64_t v186 = *((void *)v183 + 5);
    int v185 = (uint64_t *)(v183 + 10);
    uint64_t v184 = v186;
    int v187 = (int *)v185 - 1;
    int v188 = *((_DWORD *)v185 - 1);
    if (sqlite3_initialize() || (uint64_t v190 = sub_18127D33C(v184, 56LL * v188 + 56)) == 0)
    {
      *uint64_t v18 = 7;
      return *(double *)&v9;
    }

    uint64_t v191 = v190 + 56LL * *v187;
    *(void *)(v191 + 48) = 0LL;
    *(void *)&__int128 v9 = 0LL;
    *(_OWORD *)(v191 + 16) = 0u;
    *(_OWORD *)(v191 + 32) = 0u;
    *(_OWORD *)uint64_t v191 = 0u;
    *int v185 = v190;
    if (*v18) {
      return *(double *)&v9;
    }
    uint64_t v12 = (uint64_t)&v212[4 * a3 + 12];
    sub_18139DD3C((uint64_t *)a1, (int *)&v220, v19);
    uint64_t v192 = *v185;
    int v193 = *v187;
    uint64_t v14 = *v185 + 56LL * (*v187)++;
    uint64_t v8 = &v212[4 * a3 + 8];
    *(_DWORD *)uint64_t v14 = v19;
    *(_DWORD *)(v14 + 4) = 1;
    ++v212[6];
    int v10 = v8[1];
    if (*((void *)v212 + 2))
    {
      uint64_t v194 = *(void *)&v212[4 * a3 + 10];
      uint64_t v195 = v192 + 56LL * v193;
      *(void *)(v195 + 16) = *(void *)(v194 + 16);
      *(void *)(v195 + 24) = *(void *)(v194 + 56LL * (v10 - 1) + 24);
    }

    BOOL v4 = a4;
  }

  uint64_t v197 = v12;
  if (*(_DWORD *)(v12 + 4) == 1)
  {
    uint64_t v16 = (uint64_t)v212;
    BOOL v200 = v212[7] == a3 + 2;
  }

  else
  {
    BOOL v200 = 0;
    uint64_t v16 = (uint64_t)v212;
  }

  int v208 = v10;
  sub_1813C2A68(a1, v16, 0x20u, 0, a3, v10, &v228);
  int v219 = v8;
  if (!*(_DWORD *)(a1 + 60))
  {
    __s2 = 0LL;
    int v40 = 0;
    unsigned int __src = 0;
    int v215 = 0;
    uint64_t v41 = v228;
    while (1)
    {
      if (*(_BYTE *)(v41 + 20)) {
        goto LABEL_13;
      }
      uint64_t v42 = *(unsigned __int16 *)(*(void *)(v41 + 88) + 4LL);
      uint64_t v43 = v41 + 136 * v42;
      size_t v44 = *(unsigned int *)(v43 + 208);
      uint64_t v45 = *(void **)(v43 + 200);
      if ((_DWORD)v44 == v40 && (v40 < 1 || !memcmp(*(const void **)(v43 + 200), __s2, v40)))
      {
        int v218 = v40;
      }

      else
      {
        if (v4 && SHIDWORD(v224) > v202) {
          goto LABEL_13;
        }
        if ((_DWORD)v44)
        {
          LODWORD(v46) = __src;
          if (!__src) {
            LODWORD(v46) = 64;
          }
          unint64_t v46 = (int)v46;
          do
          {
            unint64_t v47 = v46;
            v46 *= 2LL;
          }

          while (v47 < v44);
          if (!sqlite3_initialize())
          {
            uint64_t v48 = sub_18127D33C((uint64_t)__s2, v47);
            if (v48)
            {
              __s2 = (void *)v48;
              unsigned int __src = v47;
LABEL_76:
              memcpy(__s2, v45, v44);
              int v215 = 0;
              int v218 = v44;
              goto LABEL_77;
            }
          }

          int v218 = 0;
          int v215 = 0;
          *(_DWORD *)(a1 + 60) = 7;
        }

        else
        {
          int v218 = 0;
          int v215 = 0;
        }
      }

LABEL_292:
          int v88 = *(_DWORD *)(v21 + 64);
          int v90 = v208;
          goto LABEL_159;
        }

        uint64_t v201 = v100;
        if (v103 <= v211)
        {
          LODWORD(v109) = v211;
        }

        else
        {
          if (v211) {
            LODWORD(v107) = v211;
          }
          else {
            LODWORD(v107) = 64;
          }
          unint64_t v107 = (int)v107;
          do
          {
            unint64_t v108 = v107;
            v107 *= 2LL;
          }

          while (v108 < v103);
          if (sqlite3_initialize() || (uint64_t v112 = sub_18127D33C(v213, v108)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            LODWORD(v109) = v211;
          }

          else
          {
            LODWORD(v109) = v108;
            uint64_t v213 = v112;
          }
        }

        unsigned int v211 = v109;
        if (v109 > 3)
        {
LABEL_195:
          *(_DWORD *)uint64_t v213 = 0;
          unsigned int v111 = 4;
        }

        else
        {
          if ((_DWORD)v109) {
            uint64_t v109 = v109;
          }
          else {
            uint64_t v109 = 64LL;
          }
          do
          {
            unint64_t v110 = v109;
            v109 *= 2LL;
          }

          while (v110 < 4);
          if (!sqlite3_initialize())
          {
            uint64_t v113 = sub_18127D33C(v213, v110);
            if (v113)
            {
              unsigned int v211 = v110;
              uint64_t v213 = v113;
              goto LABEL_195;
            }
          }

          unsigned int v111 = 0;
          *(_DWORD *)(a1 + 60) = 7;
        }

        uint64_t v114 = v217 + 136 * v91;
        unint64_t v117 = *(int *)(v114 + 208);
        BOOL v115 = (unsigned int *)(v114 + 208);
        unint64_t v116 = v117;
        unint64_t v118 = v111 | 9;
        if (v118 <= v211)
        {
LABEL_206:
          int v123 = (int8x8_t *)(v213 + v111);
          if (v116 > 0x7F)
          {
            if (v116 >> 14)
            {
              unint64_t v125 = v116;
              unsigned int v126 = v111;
              int v124 = sub_181308E00(v123, v125);
              unsigned int v111 = v126;
            }

            else
            {
              v123->i8[0] = (v116 >> 7) | 0x80;
              v123->i8[1] = v116 & 0x7F;
              int v124 = 2;
            }
          }

          else
          {
            v123->i8[0] = v116;
            int v124 = 1;
          }

          signed int v121 = v124 + v111;
        }

        else
        {
          unsigned int v203 = v111;
          if (v211) {
            LODWORD(v119) = v211;
          }
          else {
            LODWORD(v119) = 64;
          }
          unint64_t v119 = (int)v119;
          do
          {
            unint64_t v120 = v119;
            v119 *= 2LL;
          }

          while (v120 < v118);
          if (!sqlite3_initialize())
          {
            uint64_t v122 = sub_18127D33C(v213, v120);
            if (v122)
            {
              unsigned int v211 = v120;
              uint64_t v213 = v122;
              unsigned int v111 = v203;
              goto LABEL_206;
            }
          }

          *(_DWORD *)(a1 + 60) = 7;
          signed int v121 = v203;
        }

        size_t v127 = *v115;
        if ((_DWORD)v127)
        {
          int v128 = (void *)*((void *)v115 - 1);
          unint64_t v129 = (v127 + v121);
          int __srca = v128;
          signed int v204 = v121;
          if (v211) {
            LODWORD(v130) = v211;
          }
          else {
            LODWORD(v130) = 64;
          }
          unint64_t v130 = (int)v130;
          do
          {
            unint64_t v131 = v130;
            v130 *= 2LL;
          }

          while (v131 < v129);
          if (sqlite3_initialize() || (uint64_t v132 = sub_18127D33C(v213, v131)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            signed int v121 = v204;
          }

          else
          {
            unsigned int v211 = v131;
            uint64_t v213 = v132;
            signed int v121 = v204;
            int v128 = __srca;
LABEL_223:
            memcpy((void *)(v213 + v121), v128, v127);
            signed int v121 = v129;
          }
        }

        int v133 = v102[3];
        size_t v134 = (v133 - v99);
        if (v133 == (_DWORD)v99) {
          goto LABEL_236;
        }
        uint64_t v135 = *(void *)v102;
        unint64_t v136 = (v134 + v121);
        signed int v205 = v121;
        if (v211) {
          LODWORD(v137) = v211;
        }
        else {
          LODWORD(v137) = 64;
        }
        unint64_t v137 = (int)v137;
        do
        {
          unint64_t v138 = v137;
          v137 *= 2LL;
        }

        while (v138 < v136);
        if (sqlite3_initialize() || (uint64_t v139 = sub_18127D33C(v213, v138)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          BOOL v4 = a4;
          uint64_t v21 = v217;
          signed int v121 = v205;
        }

        else
        {
          unsigned int v211 = v138;
          uint64_t v213 = v139;
          signed int v121 = v205;
LABEL_235:
          memcpy((void *)(v213 + v121), (const void *)(v135 + v99), v134);
          signed int v121 = v136;
          BOOL v4 = a4;
LABEL_236:
          uint64_t v21 = v217;
          if (!*(_DWORD *)(a1 + 60)) {
            *(_WORD *)(v213 + 2) = bswap32(v121) >> 16;
          }
        }

        unint64_t v140 = (v121 + 9);
        if (v140 <= v211)
        {
          uint64_t v144 = v201;
          goto LABEL_247;
        }

        signed int v141 = v121;
        if (v211) {
          LODWORD(v142) = v211;
        }
        else {
          LODWORD(v142) = 64;
        }
        unint64_t v142 = (int)v142;
        do
        {
          unint64_t v143 = v142;
          v142 *= 2LL;
        }

        while (v143 < v140);
        if (sqlite3_initialize() || (uint64_t v153 = sub_18127D33C(v213, v143)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          uint64_t v144 = v201;
          signed int v145 = v141;
        }

        else
        {
          unsigned int v211 = v143;
          uint64_t v213 = v153;
          uint64_t v144 = v201;
          signed int v121 = v141;
LABEL_247:
          *(_BYTE *)(v213 + v121) = 4;
          signed int v145 = v121 + 1;
        }

        if (*(_DWORD *)(v21 + 136 * v91 + 108) != *v97)
        {
          unsigned int v152 = v145;
          goto LABEL_287;
        }

        int v146 = *(_DWORD *)(v21 + 136 * v91 + 172);
        uint64_t v147 = v21;
        int v148 = v102[3];
        if (v146 >= v148)
        {
          unsigned int v152 = v145;
          BOOL v4 = a4;
          uint64_t v21 = v147;
          goto LABEL_287;
        }

        uint64_t v149 = v147 + 136 * v91;
        int v151 = *(_DWORD *)(v149 + 168);
        signed int v150 = (int *)(v149 + 168);
        if (v151 > v102[2])
        {
          unsigned int v152 = v145;
          BOOL v4 = a4;
          uint64_t v21 = v217;
LABEL_287:
          *(_DWORD *)(*(void *)v94 + 4LL) = *v97;
          sub_1813A23D8(a1, v216 | 1, v144);
          sub_181389984((unsigned __int8 *)a1, v144, (char *)v213, v152);
          int v89 = v219;
          goto LABEL_288;
        }

        unint64_t v154 = (v145 + 9);
        if (v154 <= v211)
        {
LABEL_266:
          unint64_t v159 = v145 + (uint64_t)(v146 + ~v148) - 4;
          uint64_t v160 = (int8x8_t *)(v213 + v145);
          if (v159 > 0x7F)
          {
            if (v159 >> 14)
            {
              signed int v162 = v145;
              int v161 = sub_181308E00(v160, v159);
              signed int v145 = v162;
            }

            else
            {
              v160->i8[0] = (v159 >> 7) | 0x80;
              v160->i8[1] = v159 & 0x7F;
              int v161 = 2;
            }
          }

          else
          {
            v160->i8[0] = v159;
            int v161 = 1;
          }

          signed int v157 = v161 + v145;
        }

        else
        {
          signed int v206 = v145;
          if (v211) {
            LODWORD(v155) = v211;
          }
          else {
            LODWORD(v155) = 64;
          }
          unint64_t v155 = (int)v155;
          do
          {
            unint64_t v156 = v155;
            v155 *= 2LL;
          }

          while (v156 < v154);
          if (!sqlite3_initialize())
          {
            uint64_t v158 = sub_18127D33C(v213, v156);
            if (v158)
            {
              unsigned int v211 = v156;
              uint64_t v213 = v158;
              signed int v145 = v206;
              goto LABEL_266;
            }
          }

          *(_DWORD *)(a1 + 60) = 7;
          signed int v157 = v206;
        }

        int v163 = v102[2];
        uint64_t v164 = *v150;
        size_t v165 = (v163 - v164);
        if (v163 == (_DWORD)v164)
        {
          unsigned int v152 = v157;
          goto LABEL_285;
        }

        uint64_t v166 = *(void *)v102;
        unint64_t v167 = (v165 + v157);
        if (v167 <= v211)
        {
LABEL_284:
          memcpy((void *)(v213 + v157), (const void *)(v166 + v164), v165);
          unsigned int v152 = v167;
LABEL_285:
          BOOL v4 = a4;
        }

        else
        {
          uint64_t v207 = *(void *)v102;
          unsigned int v152 = v157;
          if (v211) {
            LODWORD(v168) = v211;
          }
          else {
            LODWORD(v168) = 64;
          }
          unint64_t v168 = (int)v168;
          do
          {
            unint64_t v169 = v168;
            v168 *= 2LL;
          }

          while (v169 < v167);
          if (!sqlite3_initialize())
          {
            uint64_t v170 = sub_18127D33C(v213, v169);
            if (v170)
            {
              unsigned int v211 = v169;
              uint64_t v213 = v170;
              signed int v157 = v152;
              uint64_t v166 = v207;
              goto LABEL_284;
            }
          }

          *(_DWORD *)(a1 + 60) = 7;
          BOOL v4 = a4;
        }

        uint64_t v21 = v217;
        uint64_t v144 = v201;
        goto LABEL_287;
      }

      v93[1] = 0;
      uint64_t v93[2] = 0;
    }

LABEL_319:
  int *v89 = v90;
  uint64_t v38 = v228;
LABEL_46:
  sub_18138D5A4(v38);
  if (__s2)
  {
    int v39 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_52;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(__s2);
    --qword_18C468B10;
    off_18C4653A8(__s2);
    __s2 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v39 = (void (**)(void *))&xmmword_18C465410;
LABEL_52:
      (*v39)(__s2);
    }
  }

  if (v4) {
    *a4 -= HIDWORD(v224);
  }
  return *(double *)&v9;
}

uint64_t sub_1813A21F8(uint64_t result, uint64_t a2, char *__src, size_t __n)
{
  int v4 = __n;
  for (i = (_DWORD *)result; !i[15]; uint64_t result = sub_18139FB7C((uint64_t)i, (unsigned int *)a2))
  {
    int v15 = *(_DWORD *)(a2 + 24);
    int v16 = *(_DWORD *)(a2 + 40) + v15;
    int v17 = *(_DWORD *)(*(void *)i + 136LL);
    if (v16 + v4 < v17) {
      break;
    }
    int v18 = v17 - v16;
    if (v17 - v16 < 1)
    {
      LODWORD(v14) = 0;
    }

    else
    {
      LODWORD(v14) = 0;
      do
        size_t v14 = v14 + sub_18138BFCC(&__src[v14], &v24);
      while ((int)v14 < v18);
      unint64_t v19 = (v14 + v15);
      LODWORD(v20) = *(_DWORD *)(a2 + 28);
      if (v19 <= v20)
      {
        uint64_t v23 = *(void *)(a2 + 16);
LABEL_26:
        memcpy((void *)(v23 + v15), __src, v14);
        *(_DWORD *)(a2 + 24) += v14;
        goto LABEL_13;
      }

      if (!(_DWORD)v20) {
        LODWORD(v20) = 64;
      }
      unint64_t v20 = (int)v20;
      do
      {
        unint64_t v21 = v20;
        v20 *= 2LL;
      }

      while (v21 < v19);
      uint64_t v22 = *(void *)(a2 + 16);
      if (!sqlite3_initialize())
      {
        uint64_t v23 = sub_18127D33C(v22, v21);
        if (v23)
        {
          *(_DWORD *)(a2 + 28) = v21;
          *(void *)(a2 + 16) = v23;
          int v15 = *(_DWORD *)(a2 + 24);
          goto LABEL_26;
        }
      }

      i[15] = 7;
    }

uint64_t sub_1813A23D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(result + 60))
  {
    uint64_t v5 = result;
    uint64_t v6 = (uint64_t *)(result + 80);
    uint64_t v7 = *(void **)(result + 80);
    if (v7)
    {
LABEL_3:
      if (!sub_1812B2390((uint64_t)v7, 0))
      {
        uint64_t v8 = v7[16];
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v8, a2);
        }

        else
        {
          *(void *)uint64_t v8 = a2;
          *(_WORD *)(v8 + 20) = 4;
        }

        uint64_t v12 = *(void *)(*v7 + 24LL);
        if (v12) {
          xmmword_18C465410(v12);
        }
      }

      uint64_t v13 = (void *)*v6;
      if (!sub_1812B2390(*v6, 1u))
      {
        uint64_t v14 = v13[16];
        if ((*(_WORD *)(v14 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v14 + 64, a3);
        }

        else
        {
          *(void *)(v14 + 64) = a3;
          *(_WORD *)(v14 + 84) = 4;
        }

        uint64_t v15 = *(void *)(*v13 + 24LL);
        if (v15) {
          xmmword_18C465410(v15);
        }
      }

      sqlite3_step((sqlite3_stmt *)*v6);
      uint64_t result = sqlite3_reset((sqlite3_stmt *)*v6);
      goto LABEL_29;
    }

    uint64_t result = (uint64_t)sqlite3_mprintf( "DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?",  *(void *)(*(void *)result + 8LL),  *(void *)(*(void *)result + 16LL));
    uint64_t v10 = result;
    if (*(_DWORD *)(v5 + 60))
    {
      if (!result) {
        return result;
      }
    }

    else
    {
      if (!result)
      {
        uint64_t result = 7LL;
LABEL_29:
        *(_DWORD *)(v5 + 60) = result;
        return result;
      }

      *(_DWORD *)(v5 + 60) = sub_18126DFE0( **(void **)v5,  (unsigned __int8 *)result,  0xFFFFFFFFLL,  133LL,  0LL,  v6,  0LL,  v9);
    }

    unint64_t v11 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v10);
      uint64_t v10 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_17;
      }
      unint64_t v11 = &xmmword_18C465410;
    }

    uint64_t result = (*v11)(v10);
LABEL_17:
    if (*(_DWORD *)(v5 + 60)) {
      return result;
    }
    uint64_t v7 = (void *)*v6;
    goto LABEL_3;
  }

  return result;
}

uint64_t sub_1813A25E4( int *a1, unint64_t a2, unsigned int a3, signed int a4, unsigned __int8 a5, unsigned __int8 *__s2, int a7)
{
  uint64_t v10 = a1;
  int v11 = a5;
  uint64_t v12 = a1[5];
  BOOL v69 = *a1 == 0;
  if (a7 < 1)
  {
    int v14 = 13;
  }

  else
  {
    unint64_t v13 = a7 + 1LL;
    int v14 = 13;
    do
      v14 ^= __s2[(v13-- - 2)] ^ (8 * v14);
    while (v13 > 1);
  }

  uint64_t v15 = (a5 ^ (8 * v14) ^ v14) % v12;
  uint64_t v16 = *((void *)a1 + 4);
  uint64_t v17 = *(void *)(v16 + 8LL * v15);
  if (v17)
  {
    while (*(unsigned __int8 *)(v17 + 48) != v11
         || *(_DWORD *)(v17 + 28) != a7
         || memcmp((const void *)(v17 + 49), __s2, a7))
    {
      uint64_t v17 = *(void *)v17;
      if (!v17) {
        goto LABEL_18;
      }
    }

    signed int v18 = a4;
    uint64_t v19 = *(int *)(v17 + 16);
    int v20 = *(_DWORD *)(v17 + 24);
    if ((int)v19 - v20 > 21)
    {
      uint64_t v22 = v17;
      goto LABEL_43;
    }

    if (!sqlite3_initialize())
    {
      uint64_t v21 = sub_18127D33C(v17, 2 * v19);
      if (v21)
      {
        uint64_t v22 = v21;
        *(_DWORD *)(v21 + 16) = 2 * v19;
        uint64_t v23 = (uint64_t *)(*((void *)v10 + 4) + 8 * v15);
        do
        {
          unint64_t v24 = v23;
          uint64_t v23 = (uint64_t *)*v23;
        }

        while (v23 != (uint64_t *)v17);
        *unint64_t v24 = v21;
        int v20 = *(_DWORD *)(v21 + 24);
LABEL_43:
        signed int v35 = v18;
        int v48 = -v20;
        uint64_t v49 = *(void *)(v22 + 40);
        unint64_t v50 = a2 - v49;
        if (a2 == v49)
        {
          unsigned int v36 = a3;
          if ((a3 & 0x80000000) != 0) {
            goto LABEL_75;
          }
        }

        else
        {
          sub_1813963FC(v10, v22, 0LL);
          int v51 = (int8x8_t *)(v22 + *(int *)(v22 + 24));
          if (v50 > 0x7F)
          {
            if (v50 >> 14)
            {
              int v52 = sub_181308E00(v51, v50);
            }

            else
            {
              v51->i8[0] = (v50 >> 7) | 0x80;
              v51->i8[1] = v50 & 0x7F;
              int v52 = 2;
            }
          }

          else
          {
            v51->i8[0] = v50;
            int v52 = 1;
          }

          unsigned int v36 = a3;
          int v20 = *(_DWORD *)(v22 + 24) + v52;
          *(void *)(v22 + 40) = a2;
          *(_DWORD *)(v22 + 20) = v20;
          *(_DWORD *)(v22 + 24) = v20;
          int v60 = *v10;
          if (*v10 != 1)
          {
            *(_DWORD *)(v22 + 24) = ++v20;
            if (v60) {
              __int16 v61 = -1;
            }
            else {
              __int16 v61 = 0;
            }
            *(_WORD *)(v22 + 34) = v61;
            *(_DWORD *)(v22 + 36) = 0;
            int v60 = 1;
          }

          BOOL v69 = v60;
          if ((a3 & 0x80000000) != 0) {
            goto LABEL_75;
          }
        }

        goto LABEL_66;
      }
    }

    return 7LL;
  }

char *sub_1813A2C24(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[6];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = a2;
  uint64_t v5 = a2[7];
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0LL;
    int v7 = v2 - 1;
    do
    {
      int v8 = a2[v6 + 9];
      if (v8 >= 1)
      {
        if (v8 == v2)
        {
          int v7 = a2[6];
          if (v2 != 1)
          {
LABEL_23:
            ++*a2;
            return (char *)v3;
          }

uint64_t sub_1813A2EF8(uint64_t a1, char a2, char *__s2, int a4)
{
  uint64_t v7 = *(void *)(a1 + 24);
  if (a4 >= 0x8000) {
    uint64_t v8 = 0x8000LL;
  }
  else {
    uint64_t v8 = a4;
  }
  int v9 = *(_DWORD *)(a1 + 12);
  if ((a2 & 1) != 0)
  {
    if (v9) {
      goto LABEL_9;
    }
    int v9 = 1;
  }

  else
  {
    ++v9;
  }

  *(_DWORD *)(a1 + 12) = v9;
LABEL_9:
  int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 92LL);
  if (v10 == 2)
  {
    uint64_t v12 = 0LL;
    int v11 = *(_DWORD *)(a1 + 8);
  }

  else if (v10)
  {
    int v11 = 0;
    uint64_t v12 = 0LL;
  }

  else
  {
    int v11 = v9 - 1;
    uint64_t v12 = *(int *)(a1 + 8);
  }

  uint64_t result = sub_1813A33E4(v7, 0, __s2, v8, &v31);
  if (!(result | v31))
  {
    uint64_t v14 = 9 * (9LL * *(void *)a1 + v12 + v11 + 8 * (9LL * *(void *)a1 + v12)) + 48;
    if (a4 >= 1)
    {
      uint64_t v15 = __s2;
      uint64_t v16 = v8;
      do
      {
        uint64_t v17 = *v15++;
        uint64_t v14 = 9 * v14 + v17;
        --v16;
      }

      while (v16);
    }

    *(void *)(a1 + 16) ^= v14;
  }

  if (!(_DWORD)result)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = *(_DWORD *)(*(void *)(v19 + 56) + 4 * i);
      if (v20 >= 1)
      {
        int v21 = 0;
        int v22 = 0;
        while (v22 < (int)v8)
        {
          int v23 = v22 + 1;
          if (__s2[v22] >= 0xC0u)
          {
            unint64_t v24 = &__s2[v22 + 1];
            while (1)
            {
              char v25 = *v24++;
              if ((v25 & 0xC0) != 0x80) {
                break;
              }
              if ((_DWORD)v8 == ++v23)
              {
                int v22 = v8;
                if (v21 + 1 == v20) {
                  goto LABEL_27;
                }
                goto LABEL_21;
              }
            }
          }

          int v22 = v23;
LABEL_27:
          if (++v21 == v20)
          {
            if (!v22) {
              break;
            }
            uint64_t result = sub_1813A33E4(v7, (int)i + 1, __s2, v22, &v31);
            if (!v31)
            {
              uint64_t v26 = 9LL * *(void *)a1 + v12 + v11 + 8 * (9LL * *(void *)a1 + v12);
              uint64_t v27 = i + v26 + 8 * v26 + 49;
              if (v22 >= 1)
              {
                uint64_t v28 = v22;
                uint64_t v29 = __s2;
                do
                {
                  uint64_t v30 = *v29++;
                  uint64_t v27 = 9 * v27 + v30;
                  --v28;
                }

                while (v28);
              }

              *(void *)(a1 + 16) ^= v27;
            }

            goto LABEL_22;
          }
        }
      }

uint64_t sub_1813A3144(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  for (uint64_t i = 0LL; i != 512; ++i)
  {
    uint64_t v3 = *(void *)(v1 + 8 * i);
    if (v3)
    {
      do
      {
        uint64_t v4 = *(void *)(v3 + 16);
        uint64_t v5 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v3);
          --qword_18C468B10;
          off_18C4653A8(v3);
          uint64_t v3 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_7;
          }
          uint64_t v5 = &xmmword_18C465410;
        }

        (*v5)(v3);
LABEL_7:
        uint64_t v3 = v4;
      }

      while (v4);
    }
  }

  uint64_t v6 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v6)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = &xmmword_18C465410;
    return (*v6)(v1);
  }

  return result;
}

uint64_t sub_1813A32B0(uint64_t **a1, uint64_t a2, sqlite3_int64 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (unsigned __int8 *)sqlite3_mprintf("SELECT count(*) FROM %Q.'%q_%s'", (*a1)[1], (*a1)[2], a2);
  if (!v5) {
    return 7LL;
  }
  uint64_t v7 = v5;
  pStmt = 0LL;
  uint64_t v8 = sub_18126DFE0(*v4, v5, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v6);
  if (!(_DWORD)v8)
  {
    if (sqlite3_step(pStmt) == 100) {
      *a3 = sqlite3_column_int64(pStmt, 0);
    }
    uint64_t v8 = sqlite3_finalize(pStmt);
  }

  int v9 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_11;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v9 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_11:
    (*v9)(v7);
  }

  return v8;
}

uint64_t sub_1813A33E4(uint64_t result, int a2, char *__s2, int a4, _DWORD *a5)
{
  *a5 = 0;
  if (result)
  {
    uint64_t v9 = result;
    if (a4 < 1)
    {
      int v11 = 13;
    }

    else
    {
      unint64_t v10 = a4 + 1LL;
      int v11 = 13;
      do
        v11 ^= __s2[(v10-- - 2)] ^ (8 * v11);
      while (v10 > 1);
    }

    uint64_t v12 = (a2 ^ (8 * v11) ^ v11) & 0x1FF;
    uint64_t v13 = *(void *)(result + 8LL * v12);
    if (v13)
    {
      while (1)
      {
        if (*(_DWORD *)(v13 + 12) == a2 && *(_DWORD *)(v13 + 8) == a4)
        {
          uint64_t result = memcmp(*(const void **)v13, __s2, a4);
          if (!(_DWORD)result) {
            break;
          }
        }

        uint64_t v13 = *(void *)(v13 + 16);
        if (!v13) {
          goto LABEL_8;
        }
      }

      *a5 = 1;
    }

    else
    {
LABEL_8:
      if (sqlite3_initialize() || (uint64_t v14 = (_DWORD *)sub_18126F0AC(a4 + 24LL)) == 0LL)
      {
        if (a4 <= -24) {
          return 0LL;
        }
        else {
          return 7LL;
        }
      }

      else
      {
        uint64_t v15 = v14;
        bzero(v14, a4 + 24LL);
        *(void *)uint64_t v15 = v15 + 6;
        v15[2] = a4;
        v15[3] = a2;
        memcpy(v15 + 6, __s2, a4);
        uint64_t result = 0LL;
        *((void *)v15 + 2) = *(void *)(v9 + 8 * v12);
        *(void *)(v9 + 8 * v12) = v15;
      }
    }
  }

  return result;
}

uint64_t sub_1813A3520(unsigned __int8 **a1, int a2, int a3, unint64_t a4)
{
  uint64_t v4 = (uint64_t)*a1;
  int v5 = **a1;
  int v6 = *((_DWORD *)a1 + 2);
  if (v5 == 4) {
    char v7 = 2;
  }
  else {
    char v7 = 3;
  }
  if (v6 <= 16) {
    unint64_t v8 = 1LL;
  }
  else {
    unint64_t v8 = (v6 - 8) >> v7;
  }
  if (HIDWORD(a4) && v5 == 4) {
    return 2LL;
  }
  if (a4)
  {
    signed int v10 = bswap32(*(_DWORD *)(v4 + 4));
    if (a2 || v10 < (int)(v8 >> 1))
    {
      unsigned int v11 = a4 / a3 % v8;
      *(_DWORD *)(v4 + 4) = bswap32(v10 + 1);
      uint64_t v12 = (uint64_t)(*a1 + 8);
      if (v5 == 4)
      {
        int v13 = v8 + 1;
        while (*(_DWORD *)(v12 + 4LL * v11))
        {
          unsigned int v11 = (v11 + 1) % v8;
          if (!--v13) {
            return 0LL;
          }
        }

        *(_DWORD *)(v12 + 4LL * v11) = bswap32(a4);
        return 0LL;
      }

      else
      {
        int v14 = v8 + 1;
        while (*(void *)(v12 + 8LL * v11))
        {
          unsigned int v11 = (v11 + 1) % v8;
          if (!--v14) {
            return 0LL;
          }
        }

        *(void *)(v12 + 8LL * v11) = bswap64(a4);
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    *(_BYTE *)(v4 + 1) = 1;
    return 0LL;
  }

uint64_t sub_1813A363C(uint64_t **a1)
{
  uint64_t v2 = **a1;
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 113);
    switch(v3)
    {
      case 186:
        goto LABEL_5;
      case 118:
        uint64_t v5 = *(void *)(v2 + 56);
        if (*((_DWORD *)a1 + 4)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 109:
LABEL_5:
        uint64_t v4 = "unopened";
        break;
      default:
        uint64_t v4 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v4 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v4);
  sub_1812CF36C(186263);
  uint64_t v5 = 0LL;
  if (*((_DWORD *)a1 + 4))
  {
LABEL_11:
    uint64_t v6 = sub_18139D0B0(a1);
    *((_DWORD *)a1 + 4) = 0;
    if ((_DWORD)v6) {
      goto LABEL_19;
    }
  }

uint64_t sub_1813A3818(uint64_t a1, int a2, uint64_t *a3)
{
  if (a1 && (uint64_t v6 = *(void *)(a1 + 8)) != 0)
  {
    char v7 = *(void ***)(v6 + 8);
    uint64_t v8 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1812CF36C(89717);
      goto LABEL_5;
    }
  }

  else
  {
    sub_1812CF36C(97932);
    char v7 = 0LL;
    uint64_t v8 = *a3;
    if (!*a3) {
      goto LABEL_4;
    }
  }

  __int16 v10 = *(_WORD *)(v8 + 20);
  if ((v10 & 0x24) != 0)
  {
    double v9 = *(double *)v8;
    goto LABEL_18;
  }

  if ((v10 & 8) != 0)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    else {
      double v9 = -0.0;
    }
    goto LABEL_18;
  }

  if ((v10 & 0x12) != 0 && *(void *)(v8 + 8))
  {
    double v9 = COERCE_DOUBLE(sub_181303DF0(v8));
    goto LABEL_18;
  }

void sub_1813A3A40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v92 = 0LL;
  if (a4 != 5)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = 1;
      sub_181269368( *(void *)a3,  "wrong number of arguments to function snippet()",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      sub_1812CF36C(97407);
    }

    return;
  }

  int v9 = (*(uint64_t (**)(uint64_t))(a1 + 16))(a2);
  memset(v93, 0, sizeof(v93));
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  uint64_t v10 = *a5;
  if (!*a5)
  {
    sub_1812CF36C(89717);
    goto LABEL_8;
  }

  __int16 v11 = *(_WORD *)(v10 + 20);
  if ((v11 & 0x24) != 0)
  {
    double v12 = *(double *)v10;
    goto LABEL_9;
  }

  if ((v11 & 8) == 0)
  {
    if ((v11 & 0x12) != 0 && *(void *)(v10 + 8))
    {
      LODWORD(v12) = sub_181303DF0(v10);
      goto LABEL_9;
    }

LABEL_162:
  if (v27) {
    goto LABEL_163;
  }
LABEL_169:
  if (!v52)
  {
    sub_1812CF36C(97498);
    goto LABEL_190;
  }

  unint64_t v62 = (char *)*((void *)&v96 + 1);
  uint64_t v63 = (uint64_t)v52;
  uint64_t v64 = -1LL;
LABEL_189:
  sub_1812D7A8C(v63, v62, -1, 1u, (uint64_t (*)(uint64_t))v64);
LABEL_190:
  uint64_t v67 = *((void *)&v96 + 1);
  if (!*((void *)&v96 + 1)) {
    goto LABEL_197;
  }
  uint64_t v68 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_196;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v67);
  --qword_18C468B10;
  off_18C4653A8(v67);
  uint64_t v67 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v68 = &xmmword_18C465410;
LABEL_196:
    (*v68)(v67);
  }

LABEL_197:
  if ((v53 & 1) == 0)
  {
    BOOL v69 = (void (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v26);
      --qword_18C468B10;
      off_18C4653A8(v26);
      uint64_t v26 = (_BYTE *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_204;
      }
      BOOL v69 = (void (**)(void *))&xmmword_18C465410;
    }

    (*v69)(v26);
  }

void sub_1813A45C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  if (a4 != 3)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = 1;
      sub_181269368( *(void *)a3,  "wrong number of arguments to function highlight()",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      sub_1812CF36C(97407);
    }

    return;
  }

  uint64_t v9 = *a5;
  if (!*a5)
  {
    sub_1812CF36C(89717);
    goto LABEL_8;
  }

  __int16 v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 0x24) != 0)
  {
    uint64_t v11 = *(void *)v9;
    goto LABEL_9;
  }

  if ((v10 & 8) == 0)
  {
    if ((v10 & 0x12) != 0 && *(void *)(v9 + 8))
    {
      uint64_t v11 = sub_181303DF0(v9);
      goto LABEL_9;
    }

void sub_1813A49C8(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v47 = 0;
  __int16 v10 = (int *)(*(uint64_t (**)(uint64_t, void))(a1 + 120))(a2, 0LL);
  if (v10) {
    goto LABEL_2;
  }
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  int v20 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  if (sqlite3_initialize() || (__int128 v26 = (int *)sub_18126F0AC(16LL * v20 + 32)) == 0LL)
  {
    int v14 = 7;
    goto LABEL_46;
  }

  __int16 v10 = v26;
  bzero(v26, 16LL * v20 + 32);
  int *v10 = v20;
  *((void *)v10 + 2) = v10 + 8;
  *((void *)v10 + 3) = &v10[2 * v20 + 8];
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 24))(a2, &v50);
  if (v14 || (int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 32))(a2, 0xFFFFFFFFLL, &v49)) != 0)
  {
LABEL_30:
    __int128 v27 = (void (**)(void))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v10);
      --qword_18C468B10;
      off_18C4653A8(v10);
      if (!(void)xmmword_18C468B70) {
        goto LABEL_46;
      }
      __int128 v27 = (void (**)(void))&xmmword_18C465410;
    }

    (*v27)();
    goto LABEL_46;
  }

  *((double *)v10 + 1) = (double)v49 / (double)v50;
  if (v20 >= 1)
  {
    uint64_t v44 = 0LL;
    while (1)
    {
      uint64_t v48 = 0LL;
      int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t (*)(uint64_t, uint64_t, void *)))(a1 + 104))( a2,  v44,  &v48,  sub_1813A56E0);
      if (v45) {
        break;
      }
      double v46 = log(((double)(v50 - v48) + 0.5) / ((double)v48 + 0.5));
      if (v46 <= 0.0) {
        double v46 = 0.000001;
      }
      *(double *)(*((void *)v10 + 2) + 8 * v44++) = v46;
      if (v20 == v44) {
        goto LABEL_69;
      }
    }

    int v14 = v45;
    goto LABEL_30;
  }

uint64_t sub_1813A4F50(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  int v6 = *(_DWORD *)a1;
  if (*(int *)a1 < 1)
  {
    int v12 = (_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 8);
    int v19 = *(_DWORD *)(a1 + 4);
    if (v19 == v11)
    {
      if (v19) {
        int v14 = 2 * v19;
      }
      else {
        int v14 = 64;
      }
      uint64_t v20 = *(void *)(a1 + 16);
      if (sqlite3_initialize()) {
        goto LABEL_29;
      }
      uint64_t v16 = sub_18127D33C(v20, 4LL * v14);
      if (!v16) {
        goto LABEL_29;
      }
      int v6 = 0;
LABEL_36:
      *(void *)(a1 + 16) = v16;
      *(_DWORD *)(a1 + 4) = v14;
      int v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_32;
    }

    int v6 = 0;
LABEL_31:
    uint64_t v16 = *(void *)(a1 + 16);
LABEL_32:
    uint64_t v18 = 0LL;
    *int v12 = v11 + 1;
    *(_DWORD *)(v16 + 4LL * v11) = v6;
    goto LABEL_33;
  }

  if (a5 >= 1)
  {
    uint64_t v7 = (a5 - 1);
    while (1)
    {
      unsigned int v8 = *(unsigned __int8 *)(*(void *)(a1 + 24) + v7);
      if (v8 > 0x20 || ((1LL << v8) & 0x100002600LL) == 0) {
        break;
      }
      if (v7-- <= 0)
      {
        LODWORD(v7) = -1;
        break;
      }
    }

    if ((_DWORD)v7 != a5 - 1 && (v8 == 58 || v8 == 46))
    {
      int v12 = (_DWORD *)(a1 + 8);
      int v11 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 4);
      if (v13 == v11)
      {
        if (v13) {
          int v14 = 2 * v13;
        }
        else {
          int v14 = 64;
        }
        uint64_t v15 = *(void *)(a1 + 16);
        if (sqlite3_initialize() || (uint64_t v16 = sub_18127D33C(v15, 4LL * v14)) == 0)
        {
LABEL_29:
          uint64_t v18 = 7LL;
          goto LABEL_33;
        }

        goto LABEL_36;
      }

      goto LABEL_31;
    }
  }

  uint64_t v18 = 0LL;
LABEL_33:
  ++*(_DWORD *)a1;
  return v18;
}

uint64_t sub_1813A50C4( uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, _DWORD *a8, _DWORD *a9)
{
  int v9 = a7;
  uint64_t v15 = a9;
  uint64_t v40 = 0LL;
  int v39 = 0;
  uint64_t v16 = a7;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, int *))(a1 + 64))(a2, &v38);
  BOOL v18 = v38 >= 1 && (_DWORD)v17 == 0;
  uint64_t v34 = v16;
  if (v18)
  {
    int v32 = a3;
    int v33 = v9;
    int v36 = 0;
    int v21 = 0;
    int v23 = -1;
    int v24 = 1;
    uint64_t v25 = v16 + a6;
    do
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, void, char *, uint64_t *, int *))(a1 + 72))( a2,  (v24 - 1),  (char *)&v40 + 4,  &v40,  &v39);
      if ((_DWORD)v19) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = (_DWORD)v40 == a5;
      }
      if (v27)
      {
        int v28 = v39;
        BOOL v29 = v39 < a6 || v25 <= v39;
        if (!v29)
        {
          if (*(_BYTE *)(a4 + SHIDWORD(v40))) {
            ++v21;
          }
          else {
            v21 += 1000;
          }
          *(_BYTE *)(a4 + SHIDWORD(v40)) = 1;
          if (v23 < 0) {
            int v23 = v28;
          }
          int v36 = (*(uint64_t (**)(uint64_t))(a1 + 56))(a2) + v28;
        }
      }

      BOOL v29 = v24++ < v38;
    }

    while (v29 && (_DWORD)v19 == 0);
    int v9 = v33;
    uint64_t v15 = a9;
    int v20 = v32;
    int v22 = v36;
  }

  else
  {
    uint64_t v19 = v17;
    int v20 = a3;
    int v21 = 0;
    int v22 = 0;
    int v23 = -1;
  }

  *a8 = v21;
  if (v15)
  {
    uint64_t v30 = v23 - (v23 + v9 - v22) / 2;
    if (v30 + v34 > v20) {
      uint64_t v30 = v20 - v9;
    }
    *uint64_t v15 = v30 & ~(v30 >> 63);
  }

  return v19;
}

uint64_t sub_1813A527C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 32) = 0LL;
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(a2, a4 + 24);
  if (!(_DWORD)result)
  {
    *(void *)(a4 + 28) = -1LL;
    if (*(_DWORD *)(a4 + 20) >= *(_DWORD *)(a4 + 24)) {
      return 0LL;
    }
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 72LL))(*(void *)(a4 + 8));
      if ((_DWORD)result) {
        return result;
      }
      if (v11 == *(_DWORD *)(a4 + 16))
      {
        int v8 = v10 + (*(uint64_t (**)(void, void))(*(void *)a4 + 56LL))(*(void *)(a4 + 8), v12) - 1;
        if ((*(_DWORD *)(a4 + 28) & 0x80000000) != 0)
        {
          *(_DWORD *)(a4 + 28) = v10;
LABEL_6:
          *(_DWORD *)(a4 + 32) = v8;
          goto LABEL_7;
        }

        int v9 = *(_DWORD *)(a4 + 32);
        if (v10 > v9) {
          return 0LL;
        }
        if (v8 > v9) {
          goto LABEL_6;
        }
      }

uint64_t sub_1813A536C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  int v9 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v9 + 1;
  int v10 = *(_DWORD *)(a1 + 48);
  if (v10 < 0) {
    goto LABEL_13;
  }
  int v11 = *(_DWORD *)(a1 + 44);
  if (v9 > v10 || v9 < v11) {
    return 0LL;
  }
  if (v11 && v9 == v11) {
    *(_DWORD *)(a1 + 84) = a5;
  }
LABEL_13:
  if (v9 == *(_DWORD *)(a1 + 28))
  {
    uint64_t v15 = *(void *)(a1 + 72);
    if (!v15) {
      goto LABEL_18;
    }
    uint64_t v16 = *(int *)(a1 + 84);
    uint64_t v17 = v15 + v16;
    size_t v18 = (a5 - v16);
    uint64_t v19 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v18, v17);
    *(void *)(a1 + 88) = v19;
    if (!v19)
    {
      uint64_t v13 = 7LL;
    }

    else
    {
LABEL_18:
      uint64_t v13 = *(void *)(a1 + 56);
      if (v13)
      {
        size_t v20 = strlen(*(const char **)(a1 + 56));
        int v21 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v20, v13);
        *(void *)(a1 + 88) = v21;
        if (v21) {
          uint64_t v13 = 0LL;
        }
        else {
          uint64_t v13 = 7LL;
        }
      }
    }

    *(_DWORD *)(a1 + 84) = a5;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  if (v9 != *(_DWORD *)(a1 + 32)) {
    goto LABEL_56;
  }
  if ((*(_DWORD *)(a1 + 48) & 0x80000000) != 0) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 28) >= *(_DWORD *)(a1 + 44)) {
    goto LABEL_32;
  }
  if ((_DWORD)v13) {
    goto LABEL_32;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  if (!v22) {
    goto LABEL_32;
  }
  size_t v23 = strlen(*(const char **)(a1 + 56));
  int v24 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v23, v22);
  *(void *)(a1 + 88) = v24;
  if (v24)
  {
    uint64_t v13 = 0LL;
LABEL_32:
    __int128 v26 = (_DWORD *)(a1 + 84);
    uint64_t v25 = *(int *)(a1 + 84);
    if ((_DWORD)v13) {
      goto LABEL_78;
    }
    uint64_t v27 = *(void *)(a1 + 72);
    if (!v27) {
      goto LABEL_78;
    }
    uint64_t v28 = v27 + v25;
    size_t v29 = (a6 - v25);
    uint64_t v30 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v29, v28);
    *(void *)(a1 + 88) = v30;
    if (v30)
    {
LABEL_78:
      if ((_DWORD)v13 || (uint64_t v31 = *(void *)(a1 + 64)) == 0)
      {
        *__int128 v26 = a6;
        if ((_DWORD)v13) {
          goto LABEL_56;
        }
LABEL_42:
        *(void *)(a1 + 28) = -1LL;
        if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 24))
        {
LABEL_43:
          uint64_t v13 = 0LL;
          goto LABEL_56;
        }

        while (1)
        {
          uint64_t v36 = (*(uint64_t (**)(void))(*(void *)a1 + 72LL))(*(void *)(a1 + 8));
          if ((_DWORD)v36)
          {
            uint64_t v13 = v36;
            goto LABEL_56;
          }

          if (v51 == *(_DWORD *)(a1 + 16))
          {
            int v37 = v50 + (*(uint64_t (**)(void, void))(*(void *)a1 + 56LL))(*(void *)(a1 + 8), v52) - 1;
            if ((*(_DWORD *)(a1 + 28) & 0x80000000) != 0)
            {
              *(_DWORD *)(a1 + 28) = v50;
LABEL_45:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_46;
            }

            int v38 = *(_DWORD *)(a1 + 32);
            if (v50 > v38) {
              goto LABEL_43;
            }
            if (v37 > v38) {
              goto LABEL_45;
            }
          }

uint64_t sub_1813A56E0(uint64_t a1, uint64_t a2, void *a3)
{
  return 0LL;
}

uint64_t sub_1813A56F4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if ((a3 & 1) != 0) {
    return 1LL;
  }
  if (sqlite3_initialize())
  {
    uint64_t v7 = 0LL;
LABEL_4:
    uint64_t v8 = 7LL;
    goto LABEL_5;
  }

  uint64_t v10 = sub_18126F0AC(192LL);
  uint64_t v7 = v10;
  if (!v10) {
    goto LABEL_4;
  }
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 136) = 0x100000040LL;
  if (sqlite3_initialize())
  {
    *(void *)(v7 + 128) = 0LL;
    goto LABEL_4;
  }

  uint64_t v11 = sub_18126F0AC(64LL);
  *(void *)(v7 + 128) = v11;
  unsigned int v12 = "L* N* Co";
  if (!v11 || a3 < 1) {
    goto LABEL_23;
  }
  uint64_t v13 = 0LL;
  while (2)
  {
    int v14 = *(_BYTE **)(a2 + 8 * v13);
    if (!v14) {
      goto LABEL_15;
    }
    for (uint64_t i = "categories"; ; ++i)
    {
      uint64_t v16 = *v14;
      uint64_t v17 = *(unsigned __int8 *)i;
      if ((_DWORD)v16 == (_DWORD)v17) {
        break;
      }
      if (byte_1813C6343[v16] != byte_1813C6343[v17]) {
        goto LABEL_15;
      }
LABEL_19:
      ++v14;
    }

    if (*v14) {
      goto LABEL_19;
    }
    unsigned int v12 = *(const char **)(a2 + ((8 * v13) | 8));
LABEL_15:
    v13 += 2LL;
    break;
  }

LABEL_114:
      ++v38;
    }

    if (byte_1813C6343[v40] == byte_1813C6343[v41]) {
      goto LABEL_114;
    }
    uint64_t v42 = "separators";
    for (uint64_t k = *(_BYTE **)(a2 + 8 * v31); ; ++k)
    {
      uint64_t v44 = *k;
      uint64_t v45 = *(unsigned __int8 *)v42;
      if ((_DWORD)v44 == (_DWORD)v45)
      {
        if (*k) {
          goto LABEL_119;
        }
        uint64_t v50 = v7;
        int v51 = 0;
LABEL_133:
        uint64_t v8 = sub_1813A7510(v50, v33, v51);
        goto LABEL_134;
      }

      if (byte_1813C6343[v44] != byte_1813C6343[v45]) {
        break;
      }
LABEL_119:
      ++v42;
    }

    for (uint64_t m = "categories"; ; ++m)
    {
      uint64_t v47 = *v32;
      uint64_t v48 = *(unsigned __int8 *)m;
      if ((_DWORD)v47 == (_DWORD)v48) {
        break;
      }
      if (byte_1813C6343[v47] != byte_1813C6343[v48]) {
        goto LABEL_138;
      }
LABEL_124:
      ++v32;
    }

    if (*v32) {
      goto LABEL_124;
    }
    uint64_t v8 = 0LL;
LABEL_134:
    if (!(_DWORD)v8)
    {
      v31 += 2LL;
    }

    break;
  }

  if ((_DWORD)v8) {
    goto LABEL_5;
  }
LABEL_6:
  *a4 = v7;
  return v8;
}

uint64_t sub_1813A5D58(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 152);
  if (v2)
  {
    int v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_8:
      (*v3)(v2);
      goto LABEL_9;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v3 = &xmmword_18C465410;
      goto LABEL_8;
    }
  }

uint64_t sub_1813A5EF8( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, uint64_t (*a6)(uint64_t, void, char *, void, uint64_t, void))
{
  int v6 = (int)a4;
  uint64_t v8 = &a4[a5];
  int v9 = *(char **)(a1 + 128);
  uint64_t v10 = word_1813CD5C6;
  int v53 = *(_DWORD *)(a1 + 136);
  unint64_t v54 = (unint64_t)&v9[v53 - 6];
  uint64_t v11 = a4;
  do
  {
    if (v11 >= v8) {
      return 0LL;
    }
    while (1)
    {
      unsigned int v15 = *v11;
      if (((char)*v11 & 0x80000000) == 0)
      {
        if (*(_BYTE *)(a1 + *v11))
        {
          uint64_t v18 = ((_DWORD)v11 - v6);
          uint64_t v19 = v9;
LABEL_50:
          if (v15 - 65 >= 0x1A) {
            char v26 = v15;
          }
          else {
            char v26 = v15 + 32;
          }
          *v19++ = v26;
          unsigned int v12 = v11 + 1;
          goto LABEL_54;
        }

        unsigned int v12 = v11 + 1;
        goto LABEL_15;
      }

      unsigned int v12 = v11 + 1;
      if (v15 >= 0xC0)
      {
        unsigned int v16 = byte_1813C6D06[v15 - 192];
        if (v12 == v8)
        {
LABEL_4:
          unsigned int v12 = v8;
        }

        else
        {
          while (1)
          {
            char v17 = *v12;
            if ((*v12 & 0xC0) != 0x80) {
              break;
            }
            ++v12;
            unsigned int v16 = v17 & 0x3F | (v16 << 6);
            if (v12 == v8) {
              goto LABEL_4;
            }
          }
        }

        if (v16 >> 11 == 27 || v16 < 0x80 || v16 >> 1 == 0x7FFF) {
          unsigned int v15 = 65533;
        }
        else {
          unsigned int v15 = v16;
        }
      }

uint64_t sub_1813A64C8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_36;
  }
  if (sqlite3_initialize())
  {
    uint64_t v7 = 0LL;
    uint64_t result = 7LL;
  }

  else
  {
    int v9 = (_OWORD *)sub_18126F0AC(128LL);
    uint64_t v7 = v9;
    if (v9)
    {
      v9[6] = 0u;
      v9[7] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      *int v9 = 0u;
      v9[1] = 0u;
      __int128 v10 = xmmword_18C550008;
      __int128 v11 = unk_18C550018;
      __int128 v12 = unk_18C550038;
      v9[2] = xmmword_18C550028;
      v9[3] = v12;
      *int v9 = v10;
      v9[1] = v11;
      __int128 v13 = xmmword_18C550048;
      __int128 v14 = unk_18C550058;
      __int128 v15 = unk_18C550078;
      v9[6] = xmmword_18C550068;
      v9[7] = v15;
      v9[4] = v13;
      v9[5] = v14;
      if (a3 < 1)
      {
LABEL_39:
        uint64_t result = 0LL;
        goto LABEL_38;
      }

      uint64_t v16 = 0LL;
LABEL_8:
      char v17 = *(_BYTE **)(a2 + 8 * v16);
      if (v17)
      {
        uint64_t v18 = *(_BYTE **)(a2 + ((8 * v16) | 8));
        uint64_t v19 = "tokenchars";
        for (uint64_t i = *(_BYTE **)(a2 + 8 * v16); ; ++i)
        {
          uint64_t v21 = *i;
          uint64_t v22 = *(unsigned __int8 *)v19;
          if ((_DWORD)v21 == (_DWORD)v22)
          {
            if (!*i)
            {
              unsigned int v29 = *v18;
              if (*v18)
              {
                uint64_t v30 = v18 + 1;
                do
                {
                  if ((v29 & 0x80) == 0) {
                    *((_BYTE *)v7 + v29) = 1;
                  }
                  unsigned int v31 = *v30++;
                  unsigned int v29 = v31;
                }

                while (v31);
              }

uint64_t sub_1813A66F4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sub_1813A67A8( uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, int a11, uint64_t (*a12)(uint64_t, void, int8x16_t *, void, uint64_t, uint64_t))
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  int v52 = a11 - 1;
  if (a11 < 1) {
    return 0LL;
  }
  int v15 = 0;
  uint64_t v51 = a10 + 16;
  int v16 = 64;
  uint64_t v17 = a11;
  v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
  v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
  v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
  v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
  v20.i64[0] = 0x2020202020202020LL;
  v20.i64[1] = 0x2020202020202020LL;
  uint64_t v21 = (int8x16_t *)v55;
  while (1)
  {
    uint64_t v22 = v15;
    uint64_t v23 = a11 <= v15 + 1 ? (v15 + 1) : a11;
    while ((*(char *)(a10 + v22) & 0x80000000) == 0 && !*(_BYTE *)(a1 + *(unsigned __int8 *)(a10 + v22)))
    {
      if (++v22 >= v17)
      {
        uint64_t v22 = v23;
        break;
      }
    }

    if ((_DWORD)v22 == a11) {
      break;
    }
    uint64_t v24 = (v22 + 1);
    int v25 = v22;
    uint64_t v26 = v24;
    if ((int)v24 < a11)
    {
      uint64_t v26 = (int)v24;
      int v25 = v22;
      do
      {
        if (*(char *)(a10 + v26) < 0)
        {
          int v27 = v26;
        }

        else
        {
          int v27 = v26;
        }

        ++v26;
        int v25 = v27;
      }

      while (v17 != v26);
      int v25 = v52;
      uint64_t v26 = v17;
    }

uint64_t sub_1813A6BD8(uint64_t a1, const char **a2, int a3, void (***a4)(void))
{
  uint64_t v17 = 0LL;
  int v8 = a3 - 1;
  if (a3 < 1)
  {
    int v9 = "unicode61";
    if (sqlite3_initialize()) {
      goto LABEL_3;
    }
  }

  else
  {
    int v9 = *a2;
    if (sqlite3_initialize())
    {
LABEL_3:
      __int128 v10 = 0LL;
LABEL_4:
      uint64_t v11 = 7LL;
      goto LABEL_5;
    }
  }

  __int128 v13 = (void (**)(void))sub_18126F0AC(160LL);
  __int128 v10 = v13;
  if (!v13) {
    goto LABEL_4;
  }
  *((_OWORD *)v13 + 8) = 0u;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)__int128 v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *, void (**)(void)))(a1 + 16))(a1, v9, &v17, v13);
  if ((_DWORD)v11
    || (a3 <= 0 ? (int v14 = 0) : (int v14 = v8),
        v14 ? (int v15 = a2 + 1) : (int v15 = 0LL),
        uint64_t v11 = ((uint64_t (*)(uint64_t, const char **))*v10)(v17, v15),
        (_DWORD)v11))
  {
    if (v10[3]) {
      v10[1]();
    }
    int v16 = (uint64_t (**)(void (**)(void)))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_23;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
    --qword_18C468B10;
    off_18C4653A8(v10);
    __int128 v10 = (void (**)(void))xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v16 = (uint64_t (**)(void (**)(void)))&xmmword_18C465410;
LABEL_23:
      (*v16)(v10);
      __int128 v10 = 0LL;
    }
  }

uint64_t sub_1813A6D64(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 24)) {
      (*(void (**)(void))(result + 8))();
    }
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v2)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      return (*v2)(v1);
    }
  }

  return result;
}

uint64_t sub_1813A6E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a2;
  v7[1] = a6;
  v7[2] = a1 + 32;
  return (*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t, void))(a1 + 16))( *(void *)(a1 + 24),  v7,  a3,  a4,  a5,  sub_1813A78D0);
}

uint64_t sub_1813A6E60( int *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, uint64_t (*a6)(uint64_t, void, char *, void))
{
  *(void *)&v64[28] = *MEMORY[0x1895F89C0];
  int v9 = &a4[a5];
  __int128 v10 = a4;
  while (1)
  {
    unsigned int v14 = *v10++;
    unsigned int v13 = v14;
    unsigned int v15 = v14 - 192;
    if (v14 >= 0xC0)
    {
      unsigned int v16 = byte_1813C6D06[v15];
      if (v10 == v9)
      {
LABEL_8:
        __int128 v10 = v9;
      }

      else
      {
        while (1)
        {
          unsigned __int8 v17 = *v10;
          if ((*v10 & 0xC0) != 0x80) {
            break;
          }
          ++v10;
          unsigned int v16 = v17 & 0x3F | (v16 << 6);
          if (v10 == v9) {
            goto LABEL_8;
          }
        }
      }

      if (v16 >> 11 == 27 || v16 < 0x80 || v16 >> 1 == 0x7FFF) {
        unsigned int v13 = 65533;
      }
      else {
        unsigned int v13 = v16;
      }
    }

    if (!v13 || v10 >= v9) {
      return 0LL;
    }
    int v21 = *a1;
    if (*a1)
    {
      if ((int)v13 > 127)
      {
        if (HIWORD(v13))
        {
          if (v13 - 66560 < 0x28) {
            v13 += 40;
          }
          goto LABEL_45;
        }

        int v23 = 0;
        int v24 = -1;
        int v25 = 162;
        do
        {
          int v26 = v23 + v25;
          if (v23 + v25 < 0 != __OFADD__(v23, v25)) {
            ++v26;
          }
          int v27 = v26 >> 1;
          if ((int)v13 < *((unsigned __int16 *)&unk_1813CD2A0 + 2 * v27))
          {
            int v25 = v27 - 1;
          }

          else
          {
            int v23 = v27 + 1;
            int v24 = v27;
          }
        }

        while (v25 >= v23);
        uint64_t v28 = (unsigned __int16 *)((char *)&unk_1813CD2A0 + 4 * v24);
        int v29 = *v28;
        if (*((unsigned __int8 *)v28 + 3) + v29 > (int)v13)
        {
          int v30 = *((unsigned __int8 *)&unk_1813CD2A0 + 4 * v24 + 2);
          if (((v13 ^ v29) & v30 & 1) == 0) {
            unsigned int v13 = (unsigned __int16)(*(_WORD *)((char *)&unk_1813CD52C + (v30 & 0xFE)) + v13);
          }
        }
      }

      else if (v13 - 65 < 0x1A)
      {
        v13 += 32;
      }
    }

    if (v13 <= 0x7F)
    {
      char v60 = v13;
      uint64_t v22 = &v61;
      goto LABEL_46;
    }

    if (v13 <= 0x7FF)
    {
      char v60 = (v13 >> 6) | 0xC0;
      char v61 = v13 & 0x3F | 0x80;
      uint64_t v22 = &v62;
      goto LABEL_46;
    }

    if (!HIWORD(v13))
    {
      char v60 = (v13 >> 12) | 0xE0;
      char v61 = (v13 >> 6) & 0x3F | 0x80;
      char v62 = v13 & 0x3F | 0x80;
      uint64_t v22 = &v63;
      goto LABEL_46;
    }

uint64_t sub_1813A7510(uint64_t a1, char *__s, int a3)
{
  uint64_t v4 = __s;
  int v6 = strlen(__s);
  if (v6 < 1) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  int v8 = *(_DWORD *)(a1 + 144);
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v10 = sub_18127D33C(v7, 4LL * (v8 + v6));
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(a1 + 144);
  unsigned int v13 = &v4[v6];
  do
  {
    unsigned int v15 = *v4++;
    unsigned int v14 = v15;
    unsigned int v16 = v15 - 192;
    if (v15 < 0xC0)
    {
      if ((v14 & 0x80) == 0)
      {
        *(_BYTE *)(a1 + v14) = a3;
        continue;
      }
    }

    else
    {
      unsigned int v14 = byte_1813C6D06[v16];
      if (v4 == v13)
      {
        uint64_t v4 = v13;
        if (v14 >> 1 == 0x7FFF) {
          goto LABEL_23;
        }
      }

      else
      {
        while (1)
        {
          char v17 = *v4;
          if ((*v4 & 0xC0) != 0x80) {
            break;
          }
          ++v4;
          unsigned int v14 = v17 & 0x3F | (v14 << 6);
          if (v4 == v13)
          {
            uint64_t v4 = v13;
            break;
          }
        }

        if (v14 >> 1 == 0x7FFF)
        {
LABEL_23:
          unsigned int v14 = 65533;
          goto LABEL_24;
        }
      }

      if (v14 < 0x80 || (v14 & 0xFFFFF800) == 0xD800) {
        goto LABEL_23;
      }
      if (v14 >> 20) {
        goto LABEL_38;
      }
    }

uint64_t sub_1813A77C4(uint64_t a1, unsigned int a2)
{
  if (a2 >> 20) {
    goto LABEL_16;
  }
  unsigned int v2 = word_1813CC4B4[HIWORD(a2)];
  unsigned int v3 = word_1813CC4B4[HIWORD(a2) + 1];
  if (v3 <= v2) {
    goto LABEL_16;
  }
  unsigned int v4 = -1;
  do
  {
    unsigned int v5 = (v2 + v3) >> 1;
    unsigned int v6 = word_1813CC4D6[v5];
    else {
      unsigned int v2 = v5 + 1;
    }
  }

  while ((int)v3 > (int)v2);
  if ((v4 & 0x80000000) != 0
    || (uint64_t v7 = v4,
        int v8 = word_1813CC4D6[v7],
        unsigned int v9 = (unsigned __int16)word_1813CB6EA[v7],
        (unsigned __int16)a2 >= v8 + (v9 >> 5)))
  {
LABEL_16:
    unsigned int v10 = 0;
  }

  else
  {
    unsigned int v10 = v9 & 0x1F;
    if (v10 == 30)
    {
      if ((((_BYTE)a2 - (_BYTE)v8) & 1) != 0) {
        unsigned int v10 = 5;
      }
      else {
        unsigned int v10 = 9;
      }
    }
  }

  unsigned int v11 = *(unsigned __int8 *)(a1 + v10 + 160);
  int v12 = *(_DWORD *)(a1 + 144);
  BOOL v13 = __OFSUB__(v12, 1);
  int v14 = v12 - 1;
  if (v14 < 0 != v13) {
    return v11;
  }
  int v15 = 0;
  while (1)
  {
    int v16 = v15 + v14;
    if (v15 + v14 < 0 != __OFADD__(v15, v14)) {
      ++v16;
    }
    int v17 = v16 >> 1;
    int v18 = *(_DWORD *)(*(void *)(a1 + 152) + 4LL * v17);
    if (v18 == a2) {
      break;
    }
    else {
      int v15 = v17 + 1;
    }
    if (v14 < v15) {
      return v11;
    }
  }

  return v11 ^ 1;
}

uint64_t sub_1813A78D0(uint64_t *a1, uint64_t a2, void *__src, uint64_t __n, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = __n;
  uint64_t v9 = a2;
  if ((__n - 65) < 0xFFFFFFC2)
  {
    uint64_t v11 = *a1;
    int v12 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))a1[1];
    return v12(v11, a2, __src, v8, a5, a6);
  }

  BOOL v13 = (_BYTE *)a1[2];
  memcpy(v13, __src, __n);
  if (v13[(v8 - 1)] == 115)
  {
    uint64_t v14 = (v8 - 2);
    int v15 = v13[v14];
    if (v15 != 115)
    {
      if (v15 == 101)
      {
        if (v8 < 5)
        {
          if ((_DWORD)v8 != 4) {
            goto LABEL_12;
          }
        }

        else if (v13[(v8 - 4)] == 115 && v13[(v8 - 3)] == 115)
        {
          goto LABEL_13;
        }

        if (v13[(v8 - 3)] == 105)
        {
LABEL_13:
          uint64_t v8 = v14;
          goto LABEL_14;
        }
      }

LABEL_410:
      v77[2] = 101;
      __int16 v224 = 31337;
      goto LABEL_415;
    case 'g':
      uint64_t v91 = (v8 - 4);
      double v77 = &v13[v91];
      if (*(_DWORD *)&v13[v91] != 1768386412) {
        goto LABEL_439;
      }
      unsigned int v92 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v92 <= 0xA)
      {
        char v93 = 1;
        if (((1 << v92) & 0x495) != 0)
        {
          unsigned int v94 = 0;
          goto LABEL_138;
        }
      }

      unsigned int v94 = 1;
      if ((_DWORD)v8 == 5)
      {
        char v93 = 0;
        goto LABEL_138;
      }

      uint64_t v389 = 1LL;
      while (1)
      {
        int v390 = v13[v389];
        unsigned int v391 = (((v390 - 97) >> 1) | (((_BYTE)v390 - 97) << 7));
        BOOL v23 = v391 > 0xA;
        int v392 = (1 << v391) & 0x495;
        BOOL v393 = v23 || v392 == 0;
        if (!v393 || v390 == 121) {
          break;
        }
        if (v91 == ++v389)
        {
          char v93 = 0;
          unsigned int v94 = v8 - 4;
          goto LABEL_138;
        }
      }

      char v93 = 1;
      unsigned int v94 = v389;
LABEL_138:
      int v95 = v13[v94 + 1];
      unsigned int v96 = (((v95 - 97) >> 1) | (((_BYTE)v95 - 97) << 7));
      BOOL v23 = v96 > 0xA;
      int v97 = (1 << v96) & 0x495;
      if (v23 || v97 == 0)
      {
        if (v95 != 121) {
          char v93 = 1;
        }
        if ((v93 & 1) != 0) {
          goto LABEL_414;
        }
      }

      uint64_t v99 = v94 + 2LL;
      if ((int)v91 > (int)v99)
      {
        uint64_t v100 = &v13[v99];
        while (1)
        {
          char v101 = *v100++;
          unsigned int v102 = (((v101 - 97) >> 1) | ((v101 - 97) << 7));
          BOOL v23 = v102 > 0xA;
          int v103 = (1 << v102) & 0x495;
          if (v23 || v103 == 0) {
            break;
          }
          LODWORD(v99) = v99 + 1;
        }

LABEL_414:
        v77[2] = 103;
        __int16 v224 = 28524;
LABEL_415:
        *(_WORD *)double v77 = v224;
        uint64_t v8 = (int)v8 - 1LL;
      }

      goto LABEL_439;
    case 'l':
      uint64_t v105 = (v8 - 4);
      uint64_t v106 = (v8 - 3);
      unint64_t v107 = &v13[v106];
      if (*(_WORD *)&v13[v106] != 27746 || v13[v106 + 2] != 105)
      {
        uint64_t v109 = (v8 - 5);
        if (*(_DWORD *)&v13[v105] == 1768713313)
        {
          if (sub_1813AA198(v13, (int)v8 - 4))
          {
            *(_WORD *)&v13[v105] = 27745;
            uint64_t v8 = (int)v8 - 2LL;
          }

          goto LABEL_439;
        }

        if (v8 < 6)
        {
LABEL_281:
          if (*(_WORD *)v107 != 27749 || v107[2] != 105) {
            goto LABEL_439;
          }
          goto LABEL_286;
        }

        unint64_t v110 = &v13[v109];
        if (*(_DWORD *)&v13[v109] != 1819569765 || v13[v109 + 4] != 105)
        {
          if (*(_WORD *)v107 != 27749 || v107[2] != 105)
          {
            BOOL v113 = *(_DWORD *)v110 == 1819506031 && v110[4] == 105;
            if (v113 && sub_1813AA198(v13, (int)v8 - 5))
            {
              v110[2] = 115;
              __int16 v114 = 30063;
              goto LABEL_358;
            }

            goto LABEL_439;
          }

LABEL_307:
      int v182 = v13[v181 + 1];
      unsigned int v183 = (((v182 - 97) >> 1) | (((_BYTE)v182 - 97) << 7));
      BOOL v23 = v183 > 0xA;
      int v184 = (1 << v183) & 0x495;
      if (!v23 && v184 != 0) {
        goto LABEL_312;
      }
      if (v182 != 121) {
        char v180 = 1;
      }
      if ((v180 & 1) == 0)
      {
LABEL_312:
        uint64_t v186 = v181 + 2LL;
        int v187 = &v13[v186];
        while (1)
        {
          char v188 = *v187++;
          unsigned int v189 = (((v188 - 97) >> 1) | ((v188 - 97) << 7));
          BOOL v23 = v189 > 0xA;
          int v190 = (1 << v189) & 0x495;
          if (v23 || v190 == 0) {
            break;
          }
          LODWORD(v186) = v186 + 1;
        }
      }

      v107[2] = 101;
      *(_WORD *)unint64_t v107 = 27746;
      goto LABEL_439;
    case 'o':
      if ((int)v8 < 8)
      {
        if ((int)v8 < 6)
        {
          if ((_DWORD)v8 != 5) {
            goto LABEL_439;
          }
          goto LABEL_278;
        }

LABEL_244:
        uint64_t v147 = (v8 - 5);
        int v148 = &v13[v147];
        if (*(_DWORD *)&v13[v147] == 1869182049 && v13[v147 + 4] == 110)
        {
          if (sub_1813AA198(v13, v147))
          {
            v148[2] = 101;
            *(_WORD *)int v148 = 29793;
            uint64_t v8 = (int)v8 - 2LL;
          }

          goto LABEL_439;
        }

LABEL_586:
            *(_WORD *)&v13[v226] = 25449;
            goto LABEL_598;
          }

          break;
        case 's':
          uint64_t v225 = (v8 - 4);
          if (*(_DWORD *)&v13[v225] != 1936942446) {
            break;
          }
          unsigned int v240 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v240 <= 0xA)
          {
            char v241 = 1;
            if (((1 << v240) & 0x495) != 0)
            {
              unsigned int v242 = 0;
              goto LABEL_463;
            }
          }

          unsigned int v242 = 1;
          if ((_DWORD)v8 == 5)
          {
            char v241 = 0;
            goto LABEL_463;
          }

          uint64_t v354 = 1LL;
          while (1)
          {
            int v355 = v13[v354];
            unsigned int v356 = (((v355 - 97) >> 1) | (((_BYTE)v355 - 97) << 7));
            BOOL v23 = v356 > 0xA;
            int v357 = (1 << v356) & 0x495;
            BOOL v358 = v23 || v357 == 0;
            if (!v358 || v355 == 121) {
              break;
            }
            if (v225 == ++v354)
            {
              char v241 = 0;
              unsigned int v242 = v8 - 4;
              goto LABEL_463;
            }
          }

          char v241 = 1;
          unsigned int v242 = v354;
LABEL_463:
          int v243 = v13[v242 + 1];
          unsigned int v244 = (((v243 - 97) >> 1) | (((_BYTE)v243 - 97) << 7));
          BOOL v23 = v244 > 0xA;
          int v245 = (1 << v244) & 0x495;
          if (v23 || v245 == 0)
          {
            if (v243 != 121) {
              char v241 = 1;
            }
            if ((v241 & 1) != 0) {
              goto LABEL_598;
            }
          }

          uint64_t v247 = v242 + 2LL;
          int v248 = &v13[v247];
          while (1)
          {
            char v249 = *v248++;
            unsigned int v250 = (((v249 - 97) >> 1) | ((v249 - 97) << 7));
            BOOL v23 = v250 > 0xA;
            int v251 = (1 << v250) & 0x495;
            if (v23 || v251 == 0) {
              goto LABEL_598;
            }
            LODWORD(v247) = v247 + 1;
          }

        case 't':
          uint64_t v253 = (v8 - 5);
          uint64_t v254 = &v13[v253];
          if (*(_DWORD *)&v13[v253] == 1952539497 && v13[v253 + 4] == 101)
          {
            unsigned int v300 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
            if (v300 <= 0xA && (char v301 = 1, ((1 << v300) & 0x495) != 0))
            {
              unsigned int v302 = 0;
            }

            else
            {
              unsigned int v302 = 1;
              if ((_DWORD)v8 == 6)
              {
                char v301 = 0;
              }

              else
              {
                uint64_t v374 = 1LL;
                while (1)
                {
                  int v375 = v13[v374];
                  unsigned int v376 = (((v375 - 97) >> 1) | (((_BYTE)v375 - 97) << 7));
                  BOOL v23 = v376 > 0xA;
                  int v377 = (1 << v376) & 0x495;
                  BOOL v378 = v23 || v377 == 0;
                  if (!v378 || v375 == 121) {
                    break;
                  }
                  if (v253 == ++v374)
                  {
                    char v301 = 0;
                    unsigned int v302 = v8 - 5;
                    goto LABEL_558;
                  }
                }

                char v301 = 1;
                unsigned int v302 = v374;
              }
            }

LABEL_558:
            if ((int)(v302 + 1) < (int)v253)
            {
              int v303 = v13[v302 + 1];
              unsigned int v304 = (((v303 - 97) >> 1) | (((_BYTE)v303 - 97) << 7));
              BOOL v23 = v304 > 0xA;
              int v305 = (1 << v304) & 0x495;
              if (v23 || v305 == 0)
              {
                if (v303 != 121) {
                  char v301 = 1;
                }
                if ((v301 & 1) != 0) {
                  goto LABEL_487;
                }
              }

              uint64_t v307 = v302 + 2LL;
              if ((int)v253 > (int)v307)
              {
                unsigned int v308 = &v13[v307];
                while (1)
                {
                  char v309 = *v308++;
                  unsigned int v310 = (((v309 - 97) >> 1) | ((v309 - 97) << 7));
                  BOOL v23 = v310 > 0xA;
                  int v311 = (1 << v310) & 0x495;
                  if (v23 || v311 == 0) {
                    break;
                  }
                  LODWORD(v307) = v307 + 1;
                }

LABEL_487:
                *(_WORD *)uint64_t v254 = 25449;
                goto LABEL_488;
              }
            }
          }

          else
          {
            BOOL v256 = *(_DWORD *)v254 == 1953063785 && v254[4] == 105;
          }

          break;
        case 'u':
          uint64_t v225 = (v8 - 3);
          if (*(_WORD *)&v13[v225] != 30054 || v13[v225 + 2] != 108) {
            break;
          }
          unsigned int v258 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v258 <= 0xA)
          {
            char v259 = 1;
            if (((1 << v258) & 0x495) != 0)
            {
              unsigned int v260 = 0;
              goto LABEL_498;
            }
          }

          unsigned int v260 = 1;
          if ((_DWORD)v8 == 4)
          {
            char v259 = 0;
            goto LABEL_498;
          }

          uint64_t v359 = 1LL;
          while (1)
          {
            int v360 = v13[v359];
            unsigned int v361 = (((v360 - 97) >> 1) | (((_BYTE)v360 - 97) << 7));
            BOOL v23 = v361 > 0xA;
            int v362 = (1 << v361) & 0x495;
            BOOL v363 = v23 || v362 == 0;
            if (!v363 || v360 == 121) {
              break;
            }
            if (v225 == ++v359)
            {
              char v259 = 0;
              unsigned int v260 = v8 - 3;
              goto LABEL_498;
            }
          }

          char v259 = 1;
          unsigned int v260 = v359;
LABEL_498:
          int v261 = v13[v260 + 1];
          unsigned int v262 = (((v261 - 97) >> 1) | (((_BYTE)v261 - 97) << 7));
          BOOL v23 = v262 > 0xA;
          int v263 = (1 << v262) & 0x495;
          if (v23 || v263 == 0)
          {
            if (v261 != 121) {
              char v259 = 1;
            }
            if ((v259 & 1) != 0) {
              goto LABEL_598;
            }
          }

          uint64_t v265 = v260 + 2LL;
          int v266 = &v13[v265];
          while (1)
          {
            char v267 = *v266++;
            unsigned int v268 = (((v267 - 97) >> 1) | ((v267 - 97) << 7));
            BOOL v23 = v268 > 0xA;
            int v269 = (1 << v268) & 0x495;
            if (v23 || v269 == 0) {
              goto LABEL_598;
            }
            LODWORD(v265) = v265 + 1;
          }

        case 'v':
          uint64_t v225 = (v8 - 5);
          if (*(_DWORD *)&v13[v225] != 1986622561 || v13[v225 + 4] != 101) {
            break;
          }
          unsigned int v272 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v272 <= 0xA)
          {
            char v273 = 1;
            if (((1 << v272) & 0x495) != 0)
            {
              unsigned int v274 = 0;
              goto LABEL_520;
            }
          }

          unsigned int v274 = 1;
          if ((_DWORD)v8 == 6)
          {
            char v273 = 0;
            goto LABEL_520;
          }

          uint64_t v364 = 1LL;
          while (1)
          {
            int v365 = v13[v364];
            unsigned int v366 = (((v365 - 97) >> 1) | (((_BYTE)v365 - 97) << 7));
            BOOL v23 = v366 > 0xA;
            int v367 = (1 << v366) & 0x495;
            BOOL v368 = v23 || v367 == 0;
            if (!v368 || v365 == 121) {
              break;
            }
            if (v225 == ++v364)
            {
              char v273 = 0;
              unsigned int v274 = v8 - 5;
              goto LABEL_520;
            }
          }

          char v273 = 1;
          unsigned int v274 = v364;
LABEL_520:
          int v275 = v13[v274 + 1];
          unsigned int v276 = (((v275 - 97) >> 1) | (((_BYTE)v275 - 97) << 7));
          BOOL v23 = v276 > 0xA;
          int v277 = (1 << v276) & 0x495;
          if (v23 || v277 == 0)
          {
            if (v275 != 121) {
              char v273 = 1;
            }
            if ((v273 & 1) != 0) {
              goto LABEL_598;
            }
          }

          uint64_t v279 = v274 + 2LL;
          if ((int)v225 > (int)v279)
          {
            uint64_t v280 = &v13[v279];
            while (1)
            {
              char v281 = *v280++;
              unsigned int v282 = (((v281 - 97) >> 1) | ((v281 - 97) << 7));
              BOOL v23 = v282 > 0xA;
              int v283 = (1 << v282) & 0x495;
              if (v23 || v283 == 0) {
                break;
              }
              LODWORD(v279) = v279 + 1;
            }

LABEL_702:
            *(_WORD *)&v13[v285] = 27745;
LABEL_488:
            uint64_t v8 = (v8 - 3);
          }

          break;
        default:
          break;
      }

LABEL_599:
      uint64_t v313 = (int)v8 - 2LL;
      switch(v13[v313])
      {
        case 'a':
          if ((int)v8 >= 3)
          {
            int v314 = *(unsigned __int16 *)&v13[v313];
            int v315 = 27745;
            goto LABEL_658;
          }

          goto LABEL_661;
        case 'c':
          if ((int)v8 >= 5)
          {
            uint64_t v316 = (v8 - 4);
            uint64_t v313 = v316;
            if (*(_DWORD *)&v13[v316] == 1701015137) {
              goto LABEL_659;
            }
            int v315 = *(_DWORD *)&v13[v316];
            int v314 = 1701015141;
            goto LABEL_658;
          }

          goto LABEL_661;
        case 'e':
          if ((int)v8 >= 3)
          {
            int v314 = *(unsigned __int16 *)&v13[v313];
            int v315 = 29285;
            goto LABEL_658;
          }

          goto LABEL_661;
        case 'i':
          if ((int)v8 >= 3)
          {
            int v314 = *(unsigned __int16 *)&v13[v313];
            int v315 = 25449;
            goto LABEL_658;
          }

          goto LABEL_661;
        case 'l':
          if ((int)v8 >= 5)
          {
            uint64_t v317 = (v8 - 4);
            uint64_t v313 = v317;
            if (*(_DWORD *)&v13[v317] == 1701601889) {
              goto LABEL_659;
            }
            int v315 = *(_DWORD *)&v13[v317];
            int v314 = 1701601897;
            goto LABEL_658;
          }

          goto LABEL_661;
        case 'n':
          uint64_t v313 = (v8 - 3);
          v318 = (unsigned __int16 *)&v13[v313];
          if (*(_WORD *)&v13[v313] == 28257 && v13[v313 + 2] == 116) {
            goto LABEL_659;
          }
          if (v8 < 6)
          {
            if ((_DWORD)v8 != 5)
            {
LABEL_690:
              int v347 = *v318;
              int v330 = *((unsigned __int8 *)v318 + 2);
              BOOL v331 = v347 == 28261;
              int v332 = 116;
              goto LABEL_691;
            }
          }

          else
          {
            uint64_t v320 = (v8 - 5);
            if (*(_DWORD *)&v13[v320] == 1852140901 && v13[v320 + 4] == 116)
            {
              uint64_t v313 = (v8 - 5);
              goto LABEL_661;
            }
          }

          uint64_t v313 = (v8 - 4);
          if (sub_1813A9E9C(v13, (int)v8 - 4)) {
LABEL_660:
          }
            uint64_t v8 = v313;
LABEL_661:
          uint64_t v336 = (int)v8 - 1LL;
          if (v13[v336] == 101)
          {
            if (sub_1813A9B9C(v13, (int)v8 - 1))
            {
              int v338 = 0;
              char v339 = 0;
              int v340 = v13;
              uint64_t v341 = v336;
              do
              {
                int v345 = *v340++;
                int v344 = v345;
                unsigned __int8 v346 = ((v345 - 97) >> 1) | (((_BYTE)v345 - 97) << 7);
                if (v346 < 0xBu && ((0x495u >> v346) & 1) != 0)
                {
                  int v343 = 1;
                }

                else
                {
                  if (v338) {
                    BOOL v342 = v344 == 121;
                  }
                  else {
                    BOOL v342 = 0;
                  }
                  int v343 = v342;
                }

                int v338 = v343 ^ 1;
                char v339 = v338 | (2 * v339);
                --v341;
              }

              while (v341);
              if ((v339 & 7) != 5) {
LABEL_663:
              }
                uint64_t v8 = (int)v8 - 1LL;
            }
          }

          if ((int)v8 >= 2 && v13[(v8 - 1)] == 108 && v13[(v8 - 2)] == 108)
          {
            else {
              uint64_t v8 = v8;
            }
          }

          uint64_t v11 = *a1;
          int v12 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))a1[1];
          a2 = v9;
          unsigned int __src = v13;
          return v12(v11, a2, __src, v8, a5, a6);
        case 'o':
          if ((int)v8 < 4)
          {
            if ((_DWORD)v8 != 3) {
              goto LABEL_661;
            }
          }

          else
          {
            uint64_t v322 = (v8 - 3);
            if (*(_WORD *)&v13[v322] == 28521 && v13[v322 + 2] == 110)
            {
              if (v13[(v8 - 4)] - 115 <= 1)
              {
                uint64_t v313 = (v8 - 3);
              }

              goto LABEL_661;
            }
          }

          int v314 = *(unsigned __int16 *)&v13[v313];
          int v315 = 30063;
LABEL_658:
          if (v314 != v315) {
            goto LABEL_661;
          }
LABEL_659:
          goto LABEL_660;
        case 's':
          uint64_t v313 = (v8 - 3);
          int v324 = v13[v313 + 2];
          BOOL v325 = *(unsigned __int16 *)&v13[v313] == 29545;
          int v326 = 109;
          goto LABEL_649;
        case 't':
          uint64_t v313 = (v8 - 3);
          uint64_t v327 = (unsigned __int16 *)&v13[v313];
          if (*(_WORD *)&v13[v313] != 29793 || v13[v313 + 2] != 101)
          {
            int v329 = *v327;
            int v330 = *((unsigned __int8 *)v327 + 2);
            BOOL v331 = v329 == 29801;
            int v332 = 105;
LABEL_691:
            if (!v331 || v330 != v332) {
              goto LABEL_661;
            }
          }

          goto LABEL_659;
        case 'u':
          uint64_t v313 = (v8 - 3);
          int v324 = v13[v313 + 2];
          BOOL v325 = *(unsigned __int16 *)&v13[v313] == 30063;
          int v326 = 115;
          goto LABEL_649;
        case 'v':
          uint64_t v313 = (v8 - 3);
          int v333 = *(unsigned __int16 *)&v13[v313];
          int v324 = v13[v313 + 2];
          int v334 = 30313;
          goto LABEL_648;
        case 'z':
          uint64_t v313 = (v8 - 3);
          int v333 = *(unsigned __int16 *)&v13[v313];
          int v324 = v13[v313 + 2];
          int v334 = 31337;
LABEL_648:
          BOOL v325 = v333 == v334;
          int v326 = 101;
LABEL_649:
          BOOL v335 = v325 && v324 == v326;
          goto LABEL_660;
        default:
          goto LABEL_661;
      }

    default:
      goto LABEL_439;
  }

uint64_t sub_1813A9B9C(_BYTE *a1, int a2)
{
  if (a2 < 1)
  {
    int v7 = 0;
    char v3 = 1;
  }

  else
  {
    unsigned int v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    char v3 = 1;
    BOOL v4 = v2 > 0xA;
    int v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      int v7 = 1;
      if (a2 == 1)
      {
        char v3 = 0;
      }

      else
      {
        uint64_t v28 = 1LL;
        while (1)
        {
          int v29 = a1[v28];
          unsigned int v30 = (((v29 - 97) >> 1) | (((_BYTE)v29 - 97) << 7));
          BOOL v4 = v30 > 0xA;
          int v31 = (1 << v30) & 0x495;
          BOOL v32 = v4 || v31 == 0;
          if (!v32 || v29 == 121) {
            break;
          }
          if (a2 == ++v28)
          {
            char v3 = 0;
            int v7 = a2;
            goto LABEL_8;
          }
        }

        char v3 = 1;
        int v7 = v28;
      }
    }

    else
    {
      int v7 = 0;
    }
  }

uint64_t sub_1813A9E9C(_BYTE *a1, int a2)
{
  if (a2 < 1)
  {
    int v7 = 0;
    char v3 = 1;
  }

  else
  {
    unsigned int v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    char v3 = 1;
    BOOL v4 = v2 > 0xA;
    int v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      int v7 = 1;
      if (a2 == 1)
      {
        char v3 = 0;
      }

      else
      {
        uint64_t v28 = 1LL;
        while (1)
        {
          int v29 = a1[v28];
          unsigned int v30 = (((v29 - 97) >> 1) | (((_BYTE)v29 - 97) << 7));
          BOOL v4 = v30 > 0xA;
          int v31 = (1 << v30) & 0x495;
          BOOL v32 = v4 || v31 == 0;
          if (!v32 || v29 == 121) {
            break;
          }
          if (a2 == ++v28)
          {
            char v3 = 0;
            int v7 = a2;
            goto LABEL_8;
          }
        }

        char v3 = 1;
        int v7 = v28;
      }
    }

    else
    {
      int v7 = 0;
    }
  }

uint64_t sub_1813AA198(_BYTE *a1, int a2)
{
  if (a2 < 1)
  {
    unsigned int v7 = 0;
    char v3 = 1;
  }

  else
  {
    unsigned int v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    char v3 = 1;
    BOOL v4 = v2 > 0xA;
    int v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      unsigned int v7 = 1;
      if (a2 == 1)
      {
        char v3 = 0;
      }

      else
      {
        uint64_t v19 = 1LL;
        while (1)
        {
          int v20 = a1[v19];
          unsigned int v21 = (((v20 - 97) >> 1) | (((_BYTE)v20 - 97) << 7));
          BOOL v4 = v21 > 0xA;
          int v22 = (1 << v21) & 0x495;
          BOOL v23 = v4 || v22 == 0;
          if (!v23 || v20 == 121) {
            break;
          }
          if (a2 == ++v19)
          {
            char v3 = 0;
            unsigned int v7 = a2;
            goto LABEL_8;
          }
        }

        char v3 = 1;
        unsigned int v7 = v19;
      }
    }

    else
    {
      unsigned int v7 = 0;
    }
  }

uint64_t sub_1813AA308(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if ((int)v2 <= 0)
  {
    int v11 = 0;
    *((void *)a2 + 8) = 0x412E848000000000LL;
  }

  else
  {
    uint64_t v3 = 0LL;
    BOOL v4 = (_BYTE *)(*((void *)a2 + 1) + 5LL);
    unsigned int v5 = -1;
    unsigned int v6 = -1;
    unsigned int v7 = -1;
    do
    {
      if (*v4 && !*(_DWORD *)(v4 - 5))
      {
        int v8 = *(v4 - 1);
        if (v8 == 2) {
          unsigned int v7 = v3;
        }
        if (v8 == 8 || v8 == 16) {
          unsigned int v5 = v3;
        }
        if (v8 == 32 || v8 == 4) {
          unsigned int v6 = v3;
        }
      }

      ++v3;
      v4 += 12;
    }

    while (v2 != v3);
    if ((v7 & 0x80000000) != 0)
    {
      *((void *)a2 + 8) = 0x412E848000000000LL;
      int v12 = 1;
      if ((v6 & 0x80000000) != 0)
      {
        int v11 = 0;
        uint64_t v13 = 0x411E848000000000LL;
        if ((v5 & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }

      else
      {
        *(_DWORD *)(*((void *)a2 + 4) + 8LL * v6) = 1;
        *((void *)a2 + 8) = 0x411E848000000000LL;
        int v11 = 2;
        uint64_t v13 = 0x410E848000000000LL;
        int v12 = 2;
        if ((v5 & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }

      v11 |= 4u;
      *(_DWORD *)(*((void *)a2 + 4) + 8LL * v5) = v12;
      *((void *)a2 + 8) = v13;
      goto LABEL_25;
    }

    int v11 = 1;
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v7) = 1;
    *((void *)a2 + 8) = 0x4059000000000000LL;
  }

uint64_t sub_1813AA448(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_1813AA4F4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v2)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_1813AA5A0(uint64_t a1, void *a2)
{
  unsigned int v19 = 0;
  pStmt = 0LL;
  if (!*(_DWORD *)(a1 + 60))
  {
    unsigned int v5 = (unsigned __int8 *)sub_1813889B8( &v19,  "SELECT t.%Q FROM %Q.%Q AS t WHERE t.%Q MATCH '*id'",  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 24),  *(void *)(a1 + 24));
    if (!v5)
    {
      uint64_t v3 = v19;
      goto LABEL_11;
    }

    unsigned int v7 = v5;
    uint64_t v3 = sub_18126DFE0(*(void *)(a1 + 40), v5, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v6);
    int v8 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      unsigned int v7 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_11:
        *(_DWORD *)(a1 + 60) = 1;
        if (pStmt
          && sqlite3_step(pStmt) == 100
          && (sqlite3_int64 v9 = sqlite3_column_int64(pStmt, 0), (v10 = *(uint64_t **)(*(void *)(a1 + 48) + 72LL)) != 0LL))
        {
          while (v10[3] != v9)
          {
            int v10 = (uint64_t *)v10[1];
            if (!v10) {
              goto LABEL_16;
            }
          }

          uint64_t v11 = *v10;
        }

        else
        {
LABEL_16:
          uint64_t v11 = 0LL;
        }

        *(_DWORD *)(a1 + 60) = 0;
        if (v3 <= 1)
        {
          if (v11)
          {
            for (uint64_t i = *(void *)(*(void *)(v11 + 48) + 72LL); i; uint64_t i = *(void *)(i + 8))
            {
              if (*(_DWORD *)(i + 32) == 1 && *(void *)i == v11) {
                *(_DWORD *)(i + 80) |= 0x20u;
              }
            }

            uint64_t v3 = sub_1813A363C(*(uint64_t ***)(v11 + 40));
            if (!(_DWORD)v3)
            {
              uint64_t v13 = *(int *)(*(void *)(v11 + 24) + 24LL);
              if (!sqlite3_initialize())
              {
                int v16 = (void *)sub_18126F0AC(16 * v13 + 128);
                if (v16)
                {
                  uint64_t v14 = v16;
                  bzero(v16, 16 * v13 + 128);
                  uint64_t v3 = 0LL;
                  v14[1] = pStmt;
                  _OWORD v14[2] = v11;
                  uint64_t v17 = (uint64_t)&v14[*(int *)(*(void *)(v11 + 24) + 24LL) + 16];
                  v14[9] = v14 + 16;
                  v14[10] = v17;
                  goto LABEL_32;
                }
              }

              else {
                uint64_t v3 = 7LL;
              }
            }
          }

          else
          {
            uint64_t v3 = sqlite3_finalize(pStmt);
            pStmt = 0LL;
            if (!(_DWORD)v3)
            {
              *(void *)(a1 + 16) = sqlite3_mprintf( "no such fts5 table: %s.%s",  *(const char **)(a1 + 32),  *(const char **)(a1 + 24));
              uint64_t v3 = 1LL;
            }
          }
        }

        sqlite3_finalize(pStmt);
        uint64_t v14 = 0LL;
LABEL_32:
        *a2 = v14;
        return v3;
      }

      int v8 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v8)(v7);
    goto LABEL_11;
  }

  *(void *)(a1 + 16) = sqlite3_mprintf( "recursive definition for %s.%s",  *(const char **)(a1 + 32),  *(const char **)(a1 + 24));
  return 1LL;
}

uint64_t sub_1813AA830(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_1813AB878(a1);
  uint64_t v2 = *(void *)(v1 + 96);
  if (v2)
  {
    uint64_t v3 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    uint64_t v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }

uint64_t sub_1813AA96C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v8 = *(_DWORD *)(*(void *)a1 + 56LL);
  sub_1813AB878(a1);
  if ((a2 & 1) != 0)
  {
    uint64_t v10 = *a5;
    unsigned int v9 = 1;
    if ((a2 & 2) != 0)
    {
LABEL_3:
      uint64_t v11 = a5[v9++];
      if ((a2 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0LL;
    if ((a2 & 2) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t v11 = 0LL;
  if ((a2 & 4) != 0)
  {
LABEL_4:
    uint64_t v12 = a5[v9];
    if (v10) {
      goto LABEL_5;
    }
LABEL_12:
    if (v11)
    {
      int v15 = *(unsigned __int16 *)(v11 + 20);
      if ((~v15 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 1)
      {
        if ((v15 & 1) != 0)
        {
          uint64_t v14 = 0LL;
          if ((v15 & 2) == 0) {
            goto LABEL_38;
          }
        }

        else
        {
          uint64_t v14 = (unsigned __int8 *)sub_181303998((int *)v11, 1);
          LOWORD(v15) = *(_WORD *)(v11 + 20);
          if ((v15 & 2) == 0) {
            goto LABEL_38;
          }
        }
      }

      else
      {
        uint64_t v14 = *(unsigned __int8 **)(v11 + 8);
        if ((v15 & 2) == 0)
        {
LABEL_38:
          if ((v15 & 0x10) != 0)
          {
            int v17 = *(_DWORD *)(v11 + 16);
            if ((v15 & 0x400) != 0) {
              v17 += *(_DWORD *)v11;
            }
            if (!v12) {
              goto LABEL_70;
            }
          }

          else if ((v15 & 1) != 0)
          {
            int v17 = 0;
            if (!v12) {
              goto LABEL_70;
            }
          }

          else
          {
            int v17 = sub_181303970(v11, 1);
            if (!v12) {
              goto LABEL_70;
            }
          }

uint64_t sub_1813AACD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(v1 + 32) + 144LL);
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 != v2;
  if (!v4) {
    return 4LL;
  }
  uint64_t v9 = *(void *)(v1 + 24);
  int v10 = *(_DWORD *)(v9 + 24);
  uint64_t v6 = (4 * v5);
  uint64_t v11 = *(void *)a1;
  ++*(void *)(a1 + 88);
  int v12 = *(_DWORD *)(v11 + 56);
  if (v12)
  {
    if (v12 == 2)
    {
      int v13 = *(_DWORD *)(v9 + 92);
      uint64_t v14 = *(void *)(a1 + 32);
      while (v13 == 1
           || sub_181392B00( *(void *)(v14 + 8),  *(_DWORD *)(v14 + 16),  (int *)(a1 + 120),  (uint64_t *)(a1 + 112)))
      {
        *(void *)(a1 + 112) = 0LL;
        *(_DWORD *)(a1 + 120) = 0;
        uint64_t v15 = sub_1813ABAEC(*(void *)(a1 + 32));
        if ((_DWORD)v15)
        {
          uint64_t v6 = v15;
          goto LABEL_50;
        }

        uint64_t v16 = sub_1813AB9B0(a1);
        uint64_t v6 = v16;
        if (v13 == 1 || *(_DWORD *)(a1 + 24)) {
          return v6;
        }
        if ((_DWORD)v16) {
          goto LABEL_50;
        }
      }

      return 0LL;
    }
  }

  else
  {
    uint64_t v17 = *(int *)(a1 + 64);
    else {
      int v18 = v10;
    }
    uint64_t v19 = v17 + 1;
    do
    {
      if (v19 >= v10)
      {
        *(_DWORD *)(a1 + 64) = v18;
        goto LABEL_23;
      }

      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      LODWORD(v17) = v17 + 1;
      ++v19;
    }

    while (!v20);
    *(_DWORD *)(a1 + 64) = v17;
    if (v10 > (int)v17)
    {
      int v12 = 0;
      goto LABEL_25;
    }
  }

uint64_t sub_1813AB188(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1813AB190(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(*(void *)a1 + 56LL);
    if (v3 == 1)
    {
      if (a3 == 1) {
        int v8 = *(uint64_t **)(a1 + 80);
      }
      else {
        int v8 = *(uint64_t **)(a1 + 72);
      }
      goto LABEL_21;
    }

    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 24LL);
    int v5 = *(_DWORD *)(v4 + 92);
    if (!v3)
    {
      if (a3 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 80);
      }

      else
      {
        if (a3 == 1)
        {
          if (v5 != 1)
          {
            if (a2)
            {
              uint64_t v6 = *(void *)(v4 + 32);
              uint64_t v7 = *(int *)(a1 + 64);
LABEL_38:
              sub_1812D7A8C(a2, *(char **)(v6 + 8 * v7), -1, 1u, 0LL);
              return 0LL;
            }

            goto LABEL_39;
          }

          return 0LL;
        }

        uint64_t v10 = *(void *)(a1 + 72);
      }

      int v8 = (uint64_t *)(v10 + 8LL * *(int *)(a1 + 64));
LABEL_21:
      uint64_t v9 = *v8;
      if (v9 < 1) {
        return 0LL;
      }
      if (a2) {
        goto LABEL_23;
      }
LABEL_25:
      int v12 = 97441;
LABEL_40:
      sub_1812CF36C(v12);
      return 0LL;
    }

    if (a3 != 2)
    {
      if (a3 == 1)
      {
        if (!a2) {
          goto LABEL_25;
        }
        uint64_t v9 = **(void **)(a1 + 32);
      }

      else
      {
        if (v5) {
          return 0LL;
        }
        if (!a2)
        {
          int v12 = 97431;
          goto LABEL_40;
        }

        uint64_t v9 = *(void *)(a1 + 112) & 0x7FFFFFFFLL;
      }

uint64_t sub_1813AB32C(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 88);
  return 0LL;
}

uint64_t sub_1813AB33C(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, void *a5, char **a6)
{
  if (a3 == 6)
  {
    int v12 = *(const char **)(a4 + 8);
    if (strlen(v12) == 4)
    {
      BOOL v13 = *(_DWORD *)v12 == 1886217588;
      goto LABEL_5;
    }
  }

  BOOL v13 = 0;
  if (a3 != 5)
  {
LABEL_5:
    if (!v13)
    {
      uint64_t v14 = 0LL;
      *a6 = sqlite3_mprintf("wrong number of vtable arguments");
      uint64_t result = 1LL;
      goto LABEL_67;
    }
  }

  uint64_t v68 = a2;
  BOOL v16 = !v13;
  uint64_t v17 = 8LL;
  uint64_t v18 = 24LL;
  if (!v16) {
    uint64_t v17 = 24LL;
  }
  uint64_t v19 = *(const char **)(a4 + v17);
  uint64_t v20 = 32LL;
  if (!v16) {
    uint64_t v18 = 32LL;
  }
  uint64_t v21 = *(const char **)(a4 + v18);
  if (!v16) {
    uint64_t v20 = 40LL;
  }
  uint64_t v22 = *(const char **)(a4 + v20);
  int v23 = strlen(v19);
  int v24 = strlen(v21);
  unsigned int v25 = strlen(v22);
  int v26 = sqlite3_initialize();
  int v27 = 0;
  uint64_t result = 7LL;
  if ((v25 & 0x80000000) != 0 || v26) {
    goto LABEL_61;
  }
  int v67 = v23;
  int v28 = (unsigned __int8 *)sub_18126F0AC(v25 + 1);
  if (!v28)
  {
    int v27 = 0;
    uint64_t result = 7LL;
    goto LABEL_60;
  }

  int v29 = v28;
  memcpy(v28, v22, v25);
  v29[v25] = 0;
  int v30 = *v29;
  if ((v30 - 34) <= 0x3E && ((1LL << (v30 - 34)) & 0x4200000000000021LL) != 0)
  {
    if (v30 == 91) {
      int v32 = 93;
    }
    else {
      int v32 = *v29;
    }
    int v33 = v29[1];
    if (v29[1])
    {
      uint64_t v34 = 0LL;
      int v35 = 1;
      while (1)
      {
        uint64_t v36 = v35 + 1LL;
        if (v33 == v32)
        {
          if (v29[v36] != v32) {
            goto LABEL_31;
          }
          LODWORD(v36) = v35 + 2;
          LOBYTE(v33) = v32;
        }

        v29[v34++] = v33;
        int v33 = v29[(int)v36];
        int v35 = v36;
      }
    }

    LODWORD(v34) = 0;
LABEL_31:
    v29[v34] = 0;
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v38 = v29[i];
    uint64_t v39 = aCol[i];
    if ((_DWORD)v38 != (_DWORD)v39) {
      break;
    }
    if (!v29[i])
    {
      int v27 = 0;
      int v40 = 1;
      goto LABEL_51;
    }

_DWORD *sub_1813AB878(uint64_t a1)
{
  int v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 32);
  v3[7] = 0LL;
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    sub_18138D5A4(v2);
    int v5 = *(void **)(v4 + 64);
    if (v5)
    {
      *(void *)(v4 + 64) = 0LL;
      uint64_t v6 = (sqlite3_stmt *)v5[3];
      uint64_t v7 = (void *)v5[4];
      uint64_t v8 = v7[3];
      if (v8) {
        xmmword_18C465400(v8);
      }
      sub_1812F20DC(v7, v5);
      uint64_t v9 = v7[3];
      if (v9) {
        xmmword_18C465410(v9);
      }
      sqlite3_finalize(v6);
    }
  }

  uint64_t result = *(_DWORD **)(a1 + 40);
  if (result) {
    uint64_t result = sub_18138A584(result);
  }
  *int v3 = 0LL;
  v3[1] = 0LL;
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11)
  {
    int v12 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_16:
      uint64_t result = (_DWORD *)(*v12)(v11);
      goto LABEL_17;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    uint64_t result = (_DWORD *)off_18C4653A8(v11);
    uint64_t v11 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v12 = &xmmword_18C465410;
      goto LABEL_16;
    }
  }

uint64_t sub_1813AB9B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 20))
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }

  uint64_t v4 = v2 + 136LL * *(unsigned __int16 *)(*(void *)(v2 + 88) + 4LL);
  int v5 = *(_DWORD *)(v4 + 208);
  uint64_t v6 = *(void *)(v4 + 200);
  size_t v7 = (v5 - 1);
  if (v6) {
    uint64_t v8 = (const void *)(v6 + 1);
  }
  else {
    uint64_t v8 = 0LL;
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if ((v9 & 0x80000000) == 0)
  {
    int v10 = (int)v7 >= v9 ? *(_DWORD *)(a1 + 48) : v5 - 1;
    int v11 = memcmp(*(const void **)(a1 + 56), v8, v10);
  }

  *(_DWORD *)(a1 + 104) = 0;
  if (!(_DWORD)v7) {
    return 0LL;
  }
  LODWORD(v13) = *(_DWORD *)(a1 + 108);
  if (v13 >= v7)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = *(void *)(a1 + 96);
  }

  else
  {
    if (!(_DWORD)v13) {
      LODWORD(v13) = 64;
    }
    unint64_t v13 = (int)v13;
    do
    {
      unint64_t v14 = v13;
      v13 *= 2LL;
    }

    while (v14 < v7);
    uint64_t v15 = *(void *)(a1 + 96);
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v17 = sub_18127D33C(v15, v14);
    if (!v17) {
      return 7LL;
    }
    *(_DWORD *)(a1 + 108) = v14;
    *(void *)(a1 + 96) = v17;
    uint64_t v16 = *(int *)(a1 + 104);
  }

  memcpy((void *)(v17 + v16), v8, v7);
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 104) += v7;
  return result;
}

uint64_t sub_1813ABAEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  sub_1813903E0(v2, a1, 0, 0LL);
  if (!*(_DWORD *)(v2 + 60))
  {
    uint64_t v5 = a1 + 136LL * *(unsigned __int16 *)(*(void *)(a1 + 88) + 4LL);
    uint64_t v8 = *(void *)(v5 + 112);
    size_t v7 = (void *)(v5 + 112);
    uint64_t v6 = v8;
    if (v8)
    {
      if (**(_BYTE **)(a1 + 136LL * *(unsigned __int16 *)(*(void *)(a1 + 88) + 4LL) + 200) != 48)
      {
        int v9 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
          --qword_18C468B10;
          off_18C4653A8(v6);
          uint64_t v6 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_11;
          }
          int v9 = &xmmword_18C465410;
        }

        (*v9)(v6);
LABEL_11:
        *size_t v7 = 0LL;
        *(_BYTE *)(a1 + 20) = 1;
      }
    }
  }

  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t result = *(unsigned int *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  return result;
}

void sub_1813ABC04(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a3;
  if (!*(void *)a3)
  {
    sub_1812CF36C(89717);
    return;
  }

  __int16 v6 = *(_WORD *)(v4 + 20);
  if ((v6 & 0x24) != 0)
  {
    double v7 = *(double *)v4;
  }

  else if ((v6 & 8) != 0)
  {
    double v13 = *(double *)v4;
    *(void *)&double v7 = (uint64_t)v13;
  }

  else
  {
    if ((v6 & 0x12) == 0 || !*(void *)(v4 + 8)) {
      return;
    }
    LOBYTE(v7) = sub_181303DF0(v4);
  }

  if (LOBYTE(v7) - 6 >= 0xFFFFFFFB)
  {
    uint64_t v8 = (char *)sqlite3_value_blob(*(sqlite3_value **)(a3 + 8));
    if (v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      if (!v9)
      {
        sub_1812CF36C(91138);
        return;
      }

      int v10 = v8;
      __int16 v11 = *(_WORD *)(v9 + 20);
      if ((v11 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
      {
        signed int v12 = *(_DWORD *)(v9 + 16);
      }

      else if ((v11 & 0x10) != 0)
      {
        signed int v12 = *(_DWORD *)(v9 + 16);
        if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
          v12 += *(_DWORD *)v9;
        }
      }

      else
      {
        if ((v11 & 1) != 0) {
          return;
        }
        signed int v12 = sub_181303970(*(void *)(a3 + 8), 1);
      }

      if (v12 >= 4)
      {
        unsigned __int8 v15 = 8 * LOBYTE(v7) + 8;
        if (v12 >= __rev16(*((unsigned __int16 *)v10 + 1)) * v15)
        {
          if (sqlite3_initialize() || (uint64_t v17 = sub_18126F0AC(32LL)) == 0)
          {
            uint64_t v16 = &unk_18C54FA08;
          }

          else
          {
            uint64_t v16 = (_DWORD *)v17;
            *(void *)uint64_t v17 = 0LL;
            *(void *)(v17 + 8) = 0LL;
            *(_DWORD *)(v17 + 16) = 0;
            *(void *)(v17 + 20) = 2147483645LL;
            *(_WORD *)(v17 + 28) = 0;
          }

          if (__rev16(*((unsigned __int16 *)v10 + 1)))
          {
            unint64_t v18 = 0LL;
            char v19 = 2 * LOBYTE(v7);
            unint64_t v20 = (2 * LOBYTE(v7));
            do
            {
              unint64_t v21 = 0LL;
              uint64_t v22 = (unsigned __int8 *)&v10[(v18 * v15) | 4];
              int v23 = (unsigned int *)&v10[v18 * v15 + 12];
              do
              {
                int v24 = &v36[v21 / 2];
                unsigned int v25 = *v23;
                unsigned int v26 = v23[1];
                v23 += 2;
                *((_DWORD *)v24 + 2) = bswap32(v25);
                *((_DWORD *)v24 + 3) = bswap32(v26);
                v21 += 2LL;
              }

              while (v21 < v20);
              if (v18)
              {
                uint64_t v27 = v16[6];
                if ((v27 + 1) >= v16[4])
                {
                  sub_1812D3A10((uint64_t)v16, " ", 1u);
                }

                else
                {
                  v16[6] = v27 + 1;
                  *(_BYTE *)(*((void *)v16 + 1) + v27) = 32;
                }
              }

              sqlite3_str_appendf((sqlite3_str *)v16, "{%lld", v36[0]);
              if (v19)
              {
                unint64_t v28 = v20;
                int v29 = (float *)&v37;
                do
                {
                  float v30 = *v29++;
                  sqlite3_str_appendf((sqlite3_str *)v16, " %g", v30);
                  --v28;
                }

                while (v28);
              }

              uint64_t v31 = v16[6];
              if ((v31 + 1) < v16[4])
              {
                v16[6] = v31 + 1;
                *(_BYTE *)(*((void *)v16 + 1) + v31) = 125;
              }

              else
              {
                sub_1812D3A10((uint64_t)v16, "}", 1u);
              }

              ++v18;
            }

            while (v18 < __rev16(*((unsigned __int16 *)v10 + 1)));
          }

          uint64_t v32 = *((unsigned __int8 *)v16 + 28);
          int v33 = sqlite3_str_finish((sqlite3_str *)v16);
          if (a1)
          {
            sub_1812D7A8C((uint64_t)a1, v33, -1, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
            if ((_DWORD)v32) {
              int v34 = v32;
            }
            else {
              int v34 = -1;
            }
            a1[9] = v34;
            if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
            {
              if ((_DWORD)v32 == 100)
              {
                int v35 = "another row available";
              }

              else if ((_DWORD)v32 == 101)
              {
                int v35 = "no more rows available";
              }

              else if (v32 > 0x1C || ((0x1410004uLL >> v32) & 1) != 0)
              {
                int v35 = "unknown error";
              }

              else
              {
                int v35 = off_189B6EC30[v32];
              }

              sub_1812D7A8C((uint64_t)a1, v35, -1, 1u, 0LL);
            }
          }

          else
          {
            sub_1812CF36C(97498);
            sub_1812CF36C(97620);
          }
        }
      }
    }
  }

void sub_1813AC030(uint64_t a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(97220);
    goto LABEL_13;
  }

  __int16 v5 = *((_WORD *)v4 + 10);
  if (((0x1000000010001uLL >> v5) & 1) == 0)
  {
LABEL_13:
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368( *(void *)a1,  "Invalid argument to rtreedepth()",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

    int v8 = 97407;
    goto LABEL_16;
  }

  if ((v5 & 2) != 0 && *((_BYTE *)v4 + 22) == 1)
  {
    int v7 = *((_DWORD *)v4 + 4);
    goto LABEL_12;
  }

  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 1) == 0)
    {
      int v7 = sub_181303970((uint64_t)v4, 1);
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  int v7 = *((_DWORD *)v4 + 4);
  if ((*((_WORD *)v4 + 10) & 0x400) != 0) {
    v7 += *(_DWORD *)v4;
  }
LABEL_12:
  if (v7 <= 1) {
    goto LABEL_13;
  }
  uint64_t v9 = (unsigned __int16 *)sqlite3_value_blob(*a3);
  if (v9)
  {
    if (!a1)
    {
      int v8 = 97431;
LABEL_16:
      sub_1812CF36C(v8);
      return;
    }

    uint64_t v10 = __rev16(*v9);
    uint64_t v11 = *(void *)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
    {
      sub_1813040AC(v11, v10);
    }

    else
    {
      *(void *)uint64_t v11 = v10;
      *(_WORD *)(v11 + 20) = 4;
    }
  }

  else
  {
    sqlite3_result_error_nomem((sqlite3_context *)a1);
  }

void sub_1813AC170(uint64_t a1, int a2, uint64_t *a3)
{
  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368( *(void *)a1,  "wrong number of arguments to function rtreecheck()",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    else
    {
      sub_1812CF36C(97407);
    }

    return;
  }

  uint64_t v6 = *a3;
  if (!*a3) {
    goto LABEL_15;
  }
  int v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = sub_181303998((int *)v6, 1);
      if (a2 != 1) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }

uint64_t sub_1813AC7C8(uint64_t result, uint64_t a2, int a3, void *a4)
{
  unint64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(unsigned __int8 *)(result + 39) * (uint64_t)a3;
  int v7 = (unsigned int *)(v5 + (int)v6 + 12);
  do
  {
    uint64_t v8 = &a4[v4 / 2];
    *((_DWORD *)v8 + 2) = bswap32(*v7);
    *((_DWORD *)v8 + 3) = bswap32(v7[1]);
    v7 += 2;
    v4 += 2LL;
  }

  while (v4 < *(unsigned __int8 *)(result + 37));
  return result;
}

unint64_t sub_1813AC85C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(a2 + 24) + *(unsigned __int8 *)(a1 + 39) * (uint64_t)a3);
}

uint64_t sub_1813AC8AC(uint64_t a1, char *a2, ...)
{
  v8[0] = 0LL;
  va_copy((va_list)&v8[1], va);
  uint64_t v3 = (unsigned __int8 *)sqlite3_vmprintf(a2, va);
  uint64_t v5 = v3;
  if (*(_DWORD *)(a1 + 64))
  {
    if (!v3) {
      return v8[0];
    }
  }

  else
  {
    if (!v3)
    {
      *(_DWORD *)(a1 + 64) = 7;
      return v8[0];
    }

    *(_DWORD *)(a1 + 64) = sub_18126DFE0(*(void *)a1, v3, 0xFFFFFFFFLL, 128LL, 0LL, v8, 0LL, v4);
  }

  uint64_t v6 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_11;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  off_18C4653A8(v5);
  uint64_t v5 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_11:
    (*v6)(v5);
  }

  return v8[0];
}

char *sub_1813AC9BC(char *result, char *a2, ...)
{
  if (!*((_DWORD *)result + 16))
  {
    uint64_t v2 = result;
    if (*((int *)result + 20) <= 99)
    {
      uint64_t result = sqlite3_vmprintf(a2, va);
      if (!result) {
        goto LABEL_7;
      }
      uint64_t v3 = *((void *)v2 + 9);
      uint64_t v4 = "\n";
      if (!v3) {
        uint64_t v4 = &byte_1813CEAEE;
      }
      uint64_t result = sqlite3_mprintf("%z%s%z", v3, v4, result);
      *((void *)v2 + 9) = result;
      if (!result) {
LABEL_7:
      }
        *((_DWORD *)v2 + 16) = 7;
      ++*((_DWORD *)v2 + 20);
    }
  }

  return result;
}

uint64_t sub_1813ACA5C(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 64)) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void **)(result + 32);
  if (!v8)
  {
    uint64_t result = sub_1813AC8AC( result,  "SELECT data FROM %Q.'%q_node' WHERE nodeno=?",  *(void *)(result + 8),  *(void *)(result + 16));
    *(void *)(v7 + 32) = result;
    if (*(_DWORD *)(v7 + 64)) {
      return result;
    }
    uint64_t v8 = (void *)result;
  }

  if (!sub_1812B2390((uint64_t)v8, 0))
  {
    uint64_t v9 = v8[16];
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v9, a4);
    }

    else
    {
      *(void *)uint64_t v9 = a4;
      *(_WORD *)(v9 + 20) = 4;
    }

    uint64_t v10 = *(void *)(*v8 + 24LL);
    if (v10) {
      xmmword_18C465410(v10);
    }
  }

  if (sqlite3_step(*(sqlite3_stmt **)(v7 + 32)) == 100)
  {
    unsigned int v11 = a2;
    int v12 = sqlite3_column_bytes(*(sqlite3_stmt **)(v7 + 32), 0);
    int v13 = sqlite3_column_blob(*(sqlite3_stmt **)(v7 + 32), 0);
    if (sqlite3_initialize() || (int v15 = (unsigned __int16 *)sub_18126F0AC(v12)) == 0LL)
    {
      int v12 = 0;
      unint64_t v14 = 0LL;
      *(_DWORD *)(v7 + 64) = 7;
    }

    else
    {
      unint64_t v14 = v15;
      memcpy(v15, v13, v12);
    }

    a2 = v11;
  }

  else
  {
    int v12 = 0;
    unint64_t v14 = 0LL;
  }

  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(v7 + 32));
  if (!*(_DWORD *)(v7 + 64))
  {
    *(_DWORD *)(v7 + 64) = result;
    if (!v14 && !(_DWORD)result) {
      return (uint64_t)sub_1813AC9BC((char *)v7, "Node %lld missing from database", a4);
    }
  }

  if (!v14) {
    return result;
  }
  if (v12 > 3)
  {
    if (!a3)
    {
      a2 = __rev16(*v14);
      if (a2 >= 0x29)
      {
        sub_1813AC9BC((char *)v7, "Rtree depth out of range (%d)");
        goto LABEL_31;
      }
    }

    unsigned int v16 = __rev16(v14[1]);
    if ((int)(((8 * *(_DWORD *)(v7 + 28) + 8) * v16) | 4) > v12)
    {
      sub_1813AC9BC((char *)v7, "Node %lld is too small for cell count of %d (%d bytes)");
      goto LABEL_31;
    }

    if (!v16) {
      goto LABEL_31;
    }
    int v18 = 0;
    unsigned int v35 = a2 - 1;
    __int16 v34 = (char *)v14 + 19;
    int v37 = v14;
    int v38 = a2;
    unsigned int v36 = v16;
    while (1)
    {
      uint64_t v19 = *(int *)(v7 + 28);
      uint64_t v20 = 8 * v19 + 8;
      int v21 = v18;
      int v22 = (unsigned __int8 *)v14 + (int)v20 * (uint64_t)v18;
      uint64_t v39 = v22[4];
      uint64_t v40 = v22[5];
      uint64_t v41 = v22[6];
      uint64_t v42 = v22[7];
      uint64_t v43 = v22[8];
      uint64_t v44 = v22[9];
      uint64_t v45 = v22[10];
      uint64_t v46 = v22[11];
LABEL_64:
      uint64_t v32 = (v39 << 56) | (v40 << 48) | (v41 << 40) | (v42 << 32) | (v43 << 24) | (v44 << 16) | (v45 << 8);
      uint64_t v33 = v32 + v46;
      if (v38 < 1)
      {
        sub_1813ACFC0(v7, 1u, v32 + v46, a4);
        ++*(_DWORD *)(v7 + 56);
      }

      else
      {
        sub_1813ACFC0(v7, 0, v32 + v46, a4);
        sub_1813ACA5C(v7, v35, v22 + 12, v33);
        ++*(_DWORD *)(v7 + 60);
      }

      unint64_t v14 = v37;
      int v18 = v21 + 1;
      if (v21 + 1 == v36) {
        goto LABEL_31;
      }
    }

    uint64_t v23 = 0LL;
    uint64_t v24 = a3 + 3;
    uint64_t v25 = &v34[v18 * v20];
    while (1)
    {
      float v26 = COERCE_FLOAT(bswap32(*(_DWORD *)(v25 - 7)));
      float v27 = COERCE_FLOAT(bswap32(*(_DWORD *)(v25 - 3)));
      if (*(_DWORD *)(v7 + 24)) {
        break;
      }
      if (v26 > v27) {
        goto LABEL_47;
      }
LABEL_48:
      if (a3)
      {
        float v28 = COERCE_FLOAT(bswap32(*(_DWORD *)(v24 - 3)));
        float v29 = COERCE_FLOAT(bswap32(*(_DWORD *)(v24 + 1)));
        if (*(_DWORD *)(v7 + 24))
        {
          if (SLODWORD(v26) >= SLODWORD(v28) && SLODWORD(v27) <= SLODWORD(v29)) {
            goto LABEL_44;
          }
        }

        else if (v26 >= v28 && v27 <= v29)
        {
          goto LABEL_44;
        }

        sub_1813AC9BC((char *)v7, "Dimension %d of cell %d on node %lld is corrupt relative to parent", v23, v21, a4);
      }

uint64_t sub_1813ACF20(uint64_t result, const char *a2, uint64_t a3)
{
  if (!*(_DWORD *)(result + 64))
  {
    uint64_t v5 = result;
    uint64_t result = sub_1813AC8AC( result,  "SELECT count(*) FROM %Q.'%q%s'",  *(void *)(result + 8),  *(void *)(result + 16),  a2);
    if (result)
    {
      uint64_t v6 = (sqlite3_stmt *)result;
      if (sqlite3_step((sqlite3_stmt *)result) == 100)
      {
        sqlite3_int64 v7 = sqlite3_column_int64(v6, 0);
        if (v7 != a3) {
          sub_1813AC9BC((char *)v5, "Wrong number of entries in %%%s table - expected %lld, actual %lld", a2, a3, v7);
        }
      }

      uint64_t result = sqlite3_finalize(v6);
      *(_DWORD *)(v5 + 64) = result;
    }
  }

  return result;
}

uint64_t sub_1813ACFC0(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = result + 8LL * a2;
  uint64_t v10 = *(sqlite3_stmt **)(v7 + 40);
  uint64_t v9 = (void *)(v7 + 40);
  uint64_t v8 = v10;
  if (v10)
  {
    if (*(_DWORD *)(result + 64)) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1813AC8AC(result, off_189B6F550[a2], *(void *)(result + 8), *(void *)(result + 16));
    uint64_t v8 = (sqlite3_stmt *)result;
    *uint64_t v9 = result;
    if (*(_DWORD *)(v6 + 64)) {
      return result;
    }
  }

  if (!sub_1812B2390((uint64_t)v8, 0))
  {
    uint64_t v11 = *((void *)v8 + 16);
    if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v11, a3);
    }

    else
    {
      *(void *)uint64_t v11 = a3;
      *(_WORD *)(v11 + 20) = 4;
    }

    uint64_t v12 = *(void *)(*(void *)v8 + 24LL);
    if (v12) {
      xmmword_18C465410(v12);
    }
  }

  int v13 = sqlite3_step(v8);
  if (v13 == 100)
  {
  }

  else if (v13 == 101)
  {
    sub_1813AC9BC((char *)v6, "Mapping (%lld -> %lld) missing from %s table");
  }

  uint64_t result = sqlite3_reset(v8);
  if (!*(_DWORD *)(v6 + 64)) {
    *(_DWORD *)(v6 + 64) = result;
  }
  return result;
}

uint64_t sub_1813AD13C(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  return sub_1813AEEE8(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t sub_1813AD144(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  return sub_1813AEEE8(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1813AD14C(uint64_t a1, unsigned int *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  int8x16_t v4 = 0uLL;
  memset(v41, 0, 41);
  unint64_t v5 = *a2;
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *((void *)a2 + 1);
    if (v5 >= 8)
    {
      uint64_t v7 = v5 & 0x7FFFFFF8;
      uint64_t v10 = (unsigned __int8 *)(v6 + 52);
      uint64_t v11 = v5 & 0xFFFFFFF8;
      int8x16_t v12 = 0uLL;
      do
      {
        v13.i16[0] = *(v10 - 48);
        v13.i16[1] = *(v10 - 36);
        v13.i16[2] = *(v10 - 24);
        v13.i16[3] = *(v10 - 12);
        v14.i16[0] = *v10;
        v14.i16[1] = v10[12];
        v14.i16[2] = v10[24];
        v14.i16[3] = v10[36];
        int16x4_t v15 = vceq_s16(v13, (int16x4_t)0x40004000400040LL);
        int16x4_t v16 = vceq_s16(v14, (int16x4_t)0x40004000400040LL);
        int8x16_t v4 = (int8x16_t)vsubw_s16((int32x4_t)vbicq_s8(v4, (int8x16_t)vmovl_s16(v15)), v15);
        int8x16_t v12 = (int8x16_t)vsubw_s16((int32x4_t)vbicq_s8(v12, (int8x16_t)vmovl_s16(v16)), v16);
        v10 += 96;
        v11 -= 8LL;
      }

      while (v11);
      int32x4_t v17 = (int32x4_t)vorrq_s8(v4, v12);
      int v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v17, v17))) & 1;
      if (v7 == v5)
      {
LABEL_12:
        uint64_t v21 = 0LL;
        uint64_t v22 = 0LL;
        int v9 = 0;
        uint64_t v23 = (unsigned __int8 *)(*((void *)a2 + 1) + 4LL);
        while (1)
        {
          if (v8)
          {
            if (v23[1]) {
              goto LABEL_15;
            }
          }

          else if (v23[1])
          {
            int v24 = *((_DWORD *)v23 - 1);
            if (v24 > 0) {
              goto LABEL_19;
            }
            if (*v23 == 2)
            {
              uint64_t v36 = *((void *)a2 + 4);
              if (v22)
              {
                if (v22 < 2)
                {
                  uint64_t v37 = 0LL;
                  goto LABEL_50;
                }

                uint64_t v37 = v22 & 0x7FFFFFFE;
                uint64_t v38 = v36 + 8;
                uint64_t v39 = v37;
                do
                {
                  *(_DWORD *)(v38 - 8) = 0;
                  *(_DWORD *)uint64_t v38 = 0;
                  *(_BYTE *)(v38 - 4) = 0;
                  *(_BYTE *)(v38 + 4) = 0;
                  v38 += 16LL;
                  v39 -= 2LL;
                }

                while (v39);
                if (v22 != v37)
                {
LABEL_50:
                  uint64_t v40 = (_BYTE *)(v36 + 8 * v37 + 4);
                  do
                  {
                    *((_DWORD *)v40 - 1) = 0;
                    *uint64_t v40 = 0;
                    v40 += 8;
                    ++v37;
                  }

                  while (v22 != v37);
                }
              }

              uint64_t result = 0LL;
              a2[10] = 1;
              *(_DWORD *)(v36 + v21) = 1;
              *(_BYTE *)(v36 + 8LL * v22 + 4) = 1;
              *((void *)a2 + 8) = 0x403E000000000000LL;
              *((void *)a2 + 9) = 1LL;
              a2[20] = 1;
              return result;
            }

uint64_t sub_1813AD4D0(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1813AD4E8(uint64_t a1)
{
  uint64_t v2 = sqlite3_mprintf( "DROP TABLE '%q'.'%q_node';DROP TABLE '%q'.'%q_rowid';DROP TABLE '%q'.'%q_parent';",
         *(void *)(a1 + 48),
         *(void *)(a1 + 56),
         *(void *)(a1 + 48),
         *(void *)(a1 + 56),
         *(void *)(a1 + 48),
         *(void *)(a1 + 56));
  if (!v2) {
    return 7LL;
  }
  uint64_t v3 = v2;
  int8x16_t v4 = *(void **)(a1 + 112);
  if (v4 && !*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
  {
    *(void *)(a1 + 112) = 0LL;
    unint64_t v5 = (sqlite3_stmt *)v4[3];
    uint64_t v6 = (void *)v4[4];
    uint64_t v7 = v6[3];
    if (v7) {
      xmmword_18C465400(v7);
    }
    sub_1812F20DC(v6, v4);
    uint64_t v8 = v6[3];
    if (v8) {
      xmmword_18C465410(v8);
    }
    sqlite3_finalize(v5);
  }

  uint64_t v9 = sqlite3_exec(*(sqlite3 **)(a1 + 24), v3, 0LL, 0LL, 0LL);
  uint64_t v10 = (void (**)(const char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
    --qword_18C468B10;
    off_18C4653A8(v3);
    uint64_t v3 = (const char *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_16;
    }
    uint64_t v10 = (void (**)(const char *))&xmmword_18C465410;
  }

  (*v10)(v3);
LABEL_16:
  if (!(_DWORD)v9) {
    sub_1813AFB8C(a1);
  }
  return v9;
}

uint64_t sub_1813AD650(uint64_t a1, uint64_t *a2)
{
  if (sqlite3_initialize())
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = sub_18126F0AC(296LL);
    if (v4)
    {
      uint64_t v5 = 0LL;
      *(void *)(v4 + 288) = 0LL;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      ++*(_DWORD *)(a1 + 80);
      *(void *)uint64_t v4 = a1;
      goto LABEL_6;
    }
  }

  uint64_t v5 = 7LL;
LABEL_6:
  *a2 = v4;
  return v5;
}

uint64_t sub_1813AD6D8(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  sub_1813AFD68((uint64_t)a1);
  sqlite3_finalize((sqlite3_stmt *)v1[7]);
  uint64_t v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_6;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v3 = &xmmword_18C465410;
LABEL_6:
    (*v3)(v1);
  }

  int v4 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v4;
  uint64_t v5 = *(void **)(v2 + 112);
  if (v5)
  {
    if (!*(_BYTE *)(v2 + 40) && v4 == 0)
    {
      *(void *)(v2 + 112) = 0LL;
      uint64_t v7 = (sqlite3_stmt *)v5[3];
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v8[3];
      if (v9) {
        xmmword_18C465400(v9);
      }
      sub_1812F20DC(v8, v5);
      uint64_t v10 = v8[3];
      if (v10) {
        xmmword_18C465410(v10);
      }
      sqlite3_finalize(v7);
    }
  }

  return 0LL;
}

uint64_t sub_1813AD7F8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, sqlite3_value **a5)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v55 = 0LL;
  ++*(_DWORD *)(v10 + 64);
  sub_1813AFD68(a1);
  *(_DWORD *)(a1 + 12) = a2;
  if (a2 == 1)
  {
    uint64_t v11 = *a5;
    if (*a5)
    {
      __int16 v12 = *((_WORD *)v11 + 10);
      if ((v12 & 0x24) != 0)
      {
        uint64_t v13 = *(void *)v11;
        goto LABEL_75;
      }

      if ((v12 & 8) != 0)
      {
        uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
        else {
          uint64_t v13 = 0x8000000000000000LL;
        }
LABEL_75:
        sqlite3_int64 v53 = 0LL;
        int v42 = sqlite3_value_numeric_type(*a5);
        if (v42 == 1
          || v42 == 2
          && ((uint64_t v43 = *a5) == 0LL
            ? (sub_1812CF36C(89752), double v45 = 0.0)
            : (__int16 v44 = *((_WORD *)v43 + 10), (v44 & 8) != 0)
            ? (double v45 = *(double *)v43)
            : (v44 & 0x24) == 0
            ? ((v44 & 0x12) == 0
             ? (double v45 = 0.0)
             : (double v45 = sub_181303DB8((uint64_t)v43)))
            : (double v45 = (double)*(uint64_t *)v43),
              v45 == (double)v13))
        {
          uint64_t v15 = sub_1813B0374(v10, v13, &v54, &v53);
          if (!(_DWORD)v15)
          {
            uint64_t v46 = v54;
            if (v54)
            {
              uint64_t v47 = sub_1813B0468(a1, 0, 0.0);
              *(void *)(a1 + 88) = v46;
              *(void *)(v47 + 8) = v53;
              *(_BYTE *)(v47 + 17) = 1;
              uint64_t v48 = *(void *)(v46 + 24);
              uint64_t v49 = __rev16(*(unsigned __int16 *)(v48 + 2));
              if ((_DWORD)v49)
              {
                uint64_t v50 = 0LL;
                int v51 = (unsigned __int8 *)(v48 + 5);
                while ((((unint64_t)*(v51 - 1) << 56) | ((unint64_t)*v51 << 48) | ((unint64_t)v51[1] << 40) | ((unint64_t)v51[2] << 32) | ((unint64_t)v51[3] << 24) | ((unint64_t)v51[4] << 16) | ((unint64_t)v51[5] << 8))
                      + v51[6] != v13)
                {
                  v51 += *(unsigned __int8 *)(v10 + 39);
                  if (v49 == ++v50) {
                    goto LABEL_90;
                  }
                }

                uint64_t v15 = 0LL;
                *(_BYTE *)(v47 + 18) = v50;
              }

              else
              {
LABEL_90:
                uint64_t v15 = 267LL;
                *(_BYTE *)(v47 + 18) = 0;
              }

              goto LABEL_93;
            }
          }
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_93;
      }

      if ((v12 & 0x12) != 0 && *((void *)v11 + 1))
      {
        uint64_t v13 = sub_181303DF0((uint64_t)v11);
        goto LABEL_75;
      }
    }

    else
    {
      sub_1812CF36C(89717);
    }

    uint64_t v13 = 0LL;
    goto LABEL_75;
  }

  uint64_t v14 = sub_1813B05C0(v10, 1LL, 0LL, &v55);
  uint64_t v15 = v14;
  if ((int)a4 < 1 || (_DWORD)v14)
  {
    if ((_DWORD)v14) {
      goto LABEL_93;
    }
LABEL_10:
    uint64_t v16 = sub_1813B0468(a1, (*(_BYTE *)(v10 + 44) + 1), 0.0);
    if (v16)
    {
      *(void *)(v16 + 8) = 1LL;
      *(_WORD *)(v16 + 17) = 1;
      *(void *)(a1 + 88) = v55;
      uint64_t v55 = 0LL;
      uint64_t v15 = sub_1813B0A38(a1);
      goto LABEL_93;
    }

    return 7LL;
  }

  if (sqlite3_initialize())
  {
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 16) = a4;
    uint64_t v15 = 7LL;
    goto LABEL_93;
  }

  int32x4_t v17 = (void *)sub_18126F0AC(24LL * a4);
  *(void *)(a1 + 24) = v17;
  *(_DWORD *)(a1 + 16) = a4;
  if (!v17)
  {
LABEL_95:
    uint64_t v15 = 7LL;
    goto LABEL_93;
  }

  bzero(v17, 24LL * a4);
  bzero((void *)(a1 + 128), 4LL * *(int *)(v10 + 44) + 4);
  uint64_t v18 = 0LL;
  uint64_t v19 = 24LL * a4;
  int v20 = (char *)(a3 + 1);
  while (1)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = (_DWORD *)(v22 + v18);
    int v24 = sqlite3_value_numeric_type(*a5);
    int v25 = *(v20 - 1);
    v23[1] = v25;
    *uint64_t v23 = *v20 - 48;
    if (v25 >= 70) {
      break;
    }
    if (v24 == 2)
    {
      uint64_t v35 = *a5;
      if (*a5)
      {
        __int16 v36 = *((_WORD *)v35 + 10);
        if ((v36 & 8) != 0)
        {
          double v37 = *(double *)v35;
        }

        else if ((v36 & 0x24) != 0)
        {
          double v37 = (double)*(uint64_t *)v35;
        }

        else if ((v36 & 0x12) != 0)
        {
          double v37 = sub_181303DB8((uint64_t)v35);
        }

        else
        {
          double v37 = 0.0;
        }
      }

      else
      {
        sub_1812CF36C(89752);
        double v37 = 0.0;
      }

      *(double *)(v22 + v18 + 8) = v37;
      goto LABEL_21;
    }

    if (v24 != 1)
    {
      *(void *)(v22 + v18 + 8) = 0LL;
      if (v24 == 5 || (v25 & 0xFFFFFFFE) != 0x42) {
        int v38 = 64;
      }
      else {
        int v38 = 63;
      }
LABEL_47:
      v23[1] = v38;
      goto LABEL_21;
    }

    uint64_t v32 = *a5;
    if (!*a5)
    {
      sub_1812CF36C(89717);
LABEL_49:
      *(void *)(v22 + v18 + 8) = 0LL;
      goto LABEL_21;
    }

    __int16 v33 = *((_WORD *)v32 + 10);
    if ((v33 & 0x24) != 0)
    {
      uint64_t v34 = *(void *)v32;
    }

    else if ((v33 & 8) != 0)
    {
      double v39 = *(double *)v32;
      if (*(double *)v32 < -9.22337204e18)
      {
        unint64_t v40 = 0xC3E0000000000000LL;
        goto LABEL_63;
      }

      if (v39 > 9.22337204e18)
      {
        unint64_t v40 = 0x43E0000000000000LL;
LABEL_63:
        *(void *)(v22 + v18 + 8) = v40;
LABEL_64:
        if (v25 == 69)
        {
          int v38 = 68;
        }

        else
        {
          if (v25 != 67) {
            goto LABEL_21;
          }
          int v38 = 66;
        }

        goto LABEL_47;
      }

      uint64_t v34 = (uint64_t)v39;
    }

    else
    {
      if ((v33 & 0x12) == 0 || !*((void *)v32 + 1)) {
        goto LABEL_49;
      }
      uint64_t v34 = sub_181303DF0((uint64_t)v32);
    }

    *(double *)(v22 + v18 + 8) = (double)v34;
    if ((unint64_t)(v34 - 0x1000000000000LL) <= 0xFFFE000000000000LL)
    {
      int v25 = v23[1];
      goto LABEL_64;
    }

uint64_t sub_1813ADE30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    *(_BYTE *)(a1 + 10) = 0;
    sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
  }

  sub_1813B12C4(a1);
  return sub_1813B0A38(a1);
}

uint64_t sub_1813ADE6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1813ADE74( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    uint64_t v13 = a1 + 64;
  }

  else if (*(_DWORD *)(a1 + 36))
  {
    uint64_t v13 = *(void *)(a1 + 48);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = a1 + 8 * (1 - v12);
  uint64_t v17 = *(void *)(v14 + 88);
  uint64_t v15 = (uint64_t *)(v14 + 88);
  uint64_t v16 = v17;
  if (v17)
  {
    if (!v13) {
      return 0LL;
    }
  }

  else
  {
    if ((_DWORD)v12 == 1) {
      int v20 = (sqlite3_int64 *)(a1 + 72);
    }
    else {
      int v20 = (sqlite3_int64 *)(*(void *)(a1 + 48) + 8LL);
    }
    uint64_t result = sub_1813B05C0(*(void *)a1, *v20, 0LL, v15);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v16 = *v15;
    if (!v13) {
      return 0LL;
    }
  }

  if (!a3)
  {
    if (a2)
    {
LABEL_22:
      uint64_t v25 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) == 0)
      {
        uint64_t result = 0LL;
        *(void *)uint64_t v25 = v23;
        *(_WORD *)(v25 + 20) = 4;
        return result;
      }

      sub_1813040AC(*a2, v23);
      return 0LL;
    }

    int v26 = 97441;
LABEL_37:
    sub_1812CF36C(v26);
    return 0LL;
  }

  int v18 = *(unsigned __int8 *)(v11 + 37);
  if (v18 >= a3)
  {
    int v24 = (unsigned __int8 *)(*(void *)(v16 + 24)
                            + *(unsigned __int8 *)(v11 + 39) * *(unsigned __int8 *)(v13 + 18)
                            + 4 * a3
                            + 8);
    unint64_t v23 = (*v24 << 24) | ((unint64_t)v24[1] << 16) | ((unint64_t)v24[2] << 8) | v24[3];
    if (*(_BYTE *)(v11 + 38))
    {
      if (a2) {
        goto LABEL_22;
      }
      int v26 = 97431;
    }

    else
    {
      if (a2)
      {
        float v36 = COERCE_FLOAT(_byteswap_ulong(*(_DWORD *)v24));
        uint64_t v37 = *a2;
        if ((*(_WORD *)(v37 + 20) & 0x9000) != 0) {
          sub_181303888((int *)v37);
        }
        else {
          *(_WORD *)(v37 + 20) = 1;
        }
        uint64_t result = 0LL;
        *(double *)uint64_t v37 = v36;
        *(_WORD *)(v37 + 20) = 8;
        return result;
      }

      int v26 = 97397;
    }

    goto LABEL_37;
  }

  if (*(_BYTE *)(a1 + 10))
  {
LABEL_11:
    uint64_t v19 = sqlite3_column_value(*(sqlite3_stmt **)(a1 + 56), a3 - v18 + 1);
    sqlite3_result_value((sqlite3_context *)a2, v19);
    return 0LL;
  }

  float v27 = (sqlite3_stmt **)(a1 + 56);
  uint64_t v28 = *(sqlite3_stmt **)(a1 + 56);
  if (!v28)
  {
    uint64_t result = sub_18126DFE0( *(void *)(v11 + 24),  *(unsigned __int8 **)(v11 + 88),  0xFFFFFFFFLL,  128LL,  0LL,  (void *)(a1 + 56),  0LL,  a8);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v28 = *v27;
  }

  uint64_t v30 = v29[4];
  uint64_t v31 = v29[5];
  uint64_t v32 = v29[6];
  uint64_t v33 = v29[7];
  uint64_t v41 = v29[8];
  uint64_t v42 = v29[9];
  uint64_t v43 = v29[10];
  uint64_t v44 = v29[11];
  if (!sub_1812B2390((uint64_t)v28, 0))
  {
    uint64_t v34 = ((v30 << 56) | (v31 << 48) | (v32 << 40) | (v33 << 32) | (v41 << 24) | (v42 << 16) | (v43 << 8)) + v44;
    uint64_t v35 = *((void *)v28 + 16);
    if ((*(_WORD *)(v35 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v35, v34);
    }

    else
    {
      *(void *)uint64_t v35 = v34;
      *(_WORD *)(v35 + 20) = 4;
    }

    uint64_t v38 = *(void *)(*(void *)v28 + 24LL);
    if (v38) {
      xmmword_18C465410(v38);
    }
  }

  int v39 = sqlite3_step(*v27);
  if (v39 == 100)
  {
    *(_BYTE *)(a1 + 10) = 1;
    int v18 = *(unsigned __int8 *)(v11 + 37);
    goto LABEL_11;
  }

  unsigned int v40 = v39;
  sqlite3_reset(*v27);
  if (v40 == 101) {
    return 0LL;
  }
  else {
    return v40;
  }
}