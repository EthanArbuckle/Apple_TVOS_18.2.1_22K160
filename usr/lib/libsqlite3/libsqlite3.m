uint64_t sub_181266F84(char *a1, uint64_t *a2, unsigned int a3, const char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  void (**v18)(uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_s *v44;
  os_signpost_id_t v45;
  os_signpost_id_t v46;
  const char *v47;
  char *i;
  void (**v49)(char *);
  int v50;
  char *v51;
  const char *v52;
  void (**v53)(char *);
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  int v74;
  int v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  int v81;
  int v82;
  BOOL v83;
  void *v84;
  char *v85;
  char *__s;
  unsigned int v87;
  uint8_t buf[4];
  _BYTE v89[24];
  uint64_t v90;
  v90 = *MEMORY[0x1895F89C0];
  v85 = 0LL;
  __s = 0LL;
  v8 = mach_continuous_time();
  if (!a2) {
    return sub_1812CF36C(188651);
  }
  v9 = v8;
  *a2 = 0LL;
  v10 = sqlite3_initialize();
  if ((_DWORD)v10) {
    return v10;
  }
  if ((a3 & 0x8000) != 0 || !(_BYTE)word_18C465384)
  {
LABEL_7:
    if ((a3 & 0x40000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    v11 = a3 & 0xFFFDFFFF;
    goto LABEL_14;
  }

  if ((a3 & 0x10000) == 0)
  {
    LODWORD(v10) = HIBYTE(word_18C465384);
    goto LABEL_7;
  }

  LODWORD(v10) = 1;
  if ((a3 & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  if (dword_18C4654CC) {
    v11 = a3 | 0x20000;
  }
  else {
    v11 = a3;
  }
LABEL_14:
  v13 = v11 & 0xFFF600E7;
  v87 = v11 & 0xFFF600E7;
  if ((a3 & 0xFFFE7FFF) != (v11 & 0xFFF600E7)) {
    sqlite3_log( 21,  "open flag(s) 0x%08x are reserved for VFS use and do not affect behaviour when passed to sqlite3_open_v2",  v13 ^ a3 & 0xFFFE7FFF);
  }
  v14 = (void *)sub_18126F0AC(824LL);
  v15 = (uint64_t)v14;
  if (!v14) {
    goto LABEL_56;
  }
  bzero(v14, 0x338uLL);
  if (!(_DWORD)v10)
  {
    if ((dword_18C465544 & 8) == 0 || !(_BYTE)word_18C465384)
    {
      v17 = (void *)(v15 + 24);
      v16 = *(_DWORD **)(v15 + 24);
      if (!v16) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }

LABEL_22:
    v16 = (_DWORD *)qword_18C4653F0(1LL);
    *(void *)(v15 + 24) = v16;
    v17 = (void *)(v15 + 24);
    if (!v16) {
      goto LABEL_26;
    }
LABEL_33:
    xmmword_18C465400(v16);
LABEL_34:
    *(_OWORD *)(v15 + 168) = xmmword_1813C6C04;
    *(_OWORD *)(v15 + 152) = unk_1813C6BF4;
    if ((v11 & 0x2000000) != 0) {
      v19 = -1;
    }
    else {
      v19 = 255;
    }
    *(_DWORD *)(v15 + 88) = v19;
    *(_DWORD *)(v15 + 40) = 2;
    *(_BYTE *)(v15 + 113) = 109;
    *(void *)(v15 + 32) = v15 + 696;
    *(_DWORD *)(v15 + 432) = 1;
    *(_WORD *)(v15 + 436) = 0;
    *(_OWORD *)(v15 + 136) = xmmword_1813C6BE4;
    *(_DWORD *)(v15 + 180) = 0;
    *(_BYTE *)(v15 + 101) = 1;
    *(_BYTE *)(v15 + 106) = -1;
    *(void *)(v15 + 64) = qword_18C4654A8;
    *(_DWORD *)(v15 + 116) = 0;
    *(void *)(v15 + 200) = off_18C54FFA0;
    v20 = *(void *)(v15 + 48) | 0xE44484F0LL;
    *(void *)(v15 + 48) = v20;
    if ((dword_18C465544 & 0x180) != 0)
    {
      if ((dword_18C465544 & 0x80) != 0) {
        v20 &= ~0x400000uLL;
      }
      *(void *)(v15 + 48) = v20 | (dword_18C465544 << 20) & 0x10000000;
    }

    v23 = getprogname();
    if (a1
      && (strstr(a1, "/Library/AddressBook/AddressBook.sqlitedb")
       || strstr(a1, "/Library/AddressBook/AddressBookImages.sqlitedb"))
      || v23
      && (!strncmp(v23, "ContactsCoreSpotlightExtension", 0x1EuLL)
       || !strncmp(v23, "routined", 8uLL)
       || !strncmp(v23, "FavoritesTodayWidget", 0x14uLL)))
    {
      *(void *)(v15 + 48) |= 0x800uLL;
    }

    *(void *)(v15 + 656) = 0LL;
    *(_OWORD *)(v15 + 640) = 0u;
    *(void *)(v15 + 568) = 0LL;
    *(_OWORD *)(v15 + 576) = 0u;
    sub_181268AAC(v15, "BINARY", 1u, 0LL, (uint64_t)sub_1812A4AEC, 0LL, v21, v22);
    sub_181268AAC(v15, "BINARY", 3u, 0LL, (uint64_t)sub_1812A4AEC, 0LL, v24, v25);
    sub_181268AAC(v15, "BINARY", 2u, 0LL, (uint64_t)sub_1812A4AEC, 0LL, v26, v27);
    sub_181268AAC(v15, "NOCASE", 1u, 0LL, (uint64_t)sub_1812B7FAC, 0LL, v28, v29);
    sub_181268AAC(v15, "RTRIM", 1u, 0LL, (uint64_t)sub_18135F430, 0LL, v30, v31);
    if (*(_BYTE *)(v15 + 103)) {
      goto LABEL_50;
    }
    *(_DWORD *)(v15 + 76) = v13;
    if (((1 << (v11 & 7)) & 0x46) != 0)
    {
      v36 = sub_181347338(a4, a1, &v87, (uint64_t *)v15, (const char **)&__s, &v85);
    }

    else
    {
      v85 = sqlite3_mprintf("flags must include SQLITE_OPEN_READONLY or SQLITE_OPEN_READWRITE");
      v36 = sub_1812CF36C(188911);
    }

    v50 = v36;
    if (v36)
    {
      if (v36 == 7) {
        sub_1812D84D8(v15, v37, v38, v39, v40, v41, v42, v43);
      }
      v51 = v85;
      if (v85) {
        v52 = "%s";
      }
      else {
        v52 = 0LL;
      }
      sub_1812D50CC(v15, v50, v52, v39, v40, v41, v42, v43, (char)v85);
      if (v51)
      {
        v53 = (void (**)(char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v51);
          --qword_18C468B10;
          off_18C4653A8(v51);
          v51 = (char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_50;
          }
          v53 = (void (**)(char *))&xmmword_18C465410;
        }

        (*v53)(v51);
      }

        v22 = strlen(v21);
        v23 = v22 + 1;
        if (a1)
        {
          v11 = (void *)sub_1812F2264(a1, v23);
          if (!v11) {
            goto LABEL_11;
          }
LABEL_26:
          memcpy(v11, v21, v23);
          goto LABEL_11;
        }

        v11 = (void *)sub_18126F0AC(v22 + 1);
        if (v11) {
          goto LABEL_26;
        }
LABEL_11:
        v12 = &v7[v8];
        v12[2] = v11;
        v13 = *((_DWORD *)v15 + 6);
        *((_DWORD *)v12 + 6) = v13;
        *(_WORD *)((char *)v12 + 25) = (v13 >> 8) & 0xFFFB;
        *((_DWORD *)v12 + 7) = *((_DWORD *)v15 + 7);
        ++v10;
        v8 += 3LL;
        if (v10 >= *(_DWORD *)a2) {
          return v7;
        }
      }

      v14[1] = 0LL;
LABEL_21:
      v21 = (const char *)v15[2];
      if (!v21) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }

  return v7;
}

  v19 = sub_18126F0AC(v9 + 75);
  if (!v19) {
    goto LABEL_33;
  }
  v14 = v19;
  v20 = sub_18127D33C(qword_18C5505A8, 8LL * dword_18C5505A0 + 8);
  if (!v20)
  {
LABEL_27:
    v23 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_32:
      (*v23)(v14);
      goto LABEL_33;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
    --qword_18C468B10;
    off_18C4653A8(v14);
    v14 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      v23 = &xmmword_18C465410;
      goto LABEL_32;
    }

    if (v2 == 1) {
      return 101LL;
    }
    if (v2 == 2)
    {
      result = 0LL;
      *a1 = 0;
    }
  }

  sub_181311884(a1, (uint64_t)v15, v39, v31, v32, v33, v34, v35);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)a4 + *(_DWORD *)(a4 + 8) - *(_DWORD *)(a1 + 264);
  v40 = (void *)v15[9];
  if (v40)
  {
    v41 = v15[12];
    if (v41)
    {
      v42 = (uint64_t *)(*(void *)(v16 + 32) + 24LL);
      v43 = 0xFFFFFFFF00000000LL;
      do
      {
        v44 = *v42;
        v42 += 4;
        v43 += 0x100000000LL;
      }

      while (v44 != v41);
      v45 = v43 >> 32;
    }

    else
    {
      v45 = -32768LL;
    }

    v46 = *(void *)a1;
    v47 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)a1 + 528LL);
    if (v47)
    {
      if (!*(_BYTE *)(v46 + 197) && !*(_BYTE *)(a1 + 302))
      {
        v48 = v47( *(void *)(v46 + 536),  29LL,  *v15,  *v40,  *(void *)(*(void *)(v46 + 32) + 32 * v45),  *(void *)(a1 + 368));
        if (v48 == 1)
        {
          v55 = 23;
          v56 = "not authorized";
        }

        else
        {
          if ((v48 & 0xFFFFFFFD) == 0) {
            return;
          }
          v55 = 1;
          v56 = "authorizer malfunction";
        }

        sub_1812DC47C(a1, v56, v49, v50, v51, v52, v53, v54, v58);
        *(_DWORD *)(a1 + 24) = v55;
      }
    }
  }

  v34 = (*(_DWORD *)(v8 + 56) + 1);
  *(_DWORD *)(v8 + 56) = v34;
  *(_DWORD *)(v10 + 128) = v34;
  v35 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v35)
  {
    result = (uint64_t *)sub_18131044C(v11, 71LL, 1LL, v34, 0LL, a6, a7, a8);
    if (*(_BYTE *)(v10 + 36)) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }

  *(_DWORD *)(v11 + 144) = v35 + 1;
  v36 = *(void *)(v11 + 136) + 40LL * v35;
  *(void *)v36 = 0x100000047LL;
  *(_DWORD *)(v36 + 8) = v34;
  *(void *)(v36 + 12) = 0LL;
  *(void *)(v36 + 28) = 0LL;
  *(void *)(v36 + 20) = 0LL;
  *(_DWORD *)(v36 + 36) = 0;
  if (!*(_BYTE *)(v10 + 36))
  {
LABEL_27:
    v42 = v10;
    v76 = v10;
    while (1)
    {
      v44 = *(void *)(v42 + 80);
      if ((*(_BYTE *)(v44 + 5) & 0x10) != 0 && *(_BYTE *)(v42 + 33) != 90)
      {
        v54 = *(int **)(*(void *)(v42 + 112) + 32LL);
        v55 = *v54;
        result = (uint64_t *)sub_18131A140(*(void *)v8, *v54, 1);
        v59 = result;
        if ((int)v55 >= 1 && result != 0LL)
        {
          v63 = 0LL;
          v64 = v54 + 2;
          do
          {
            result = (uint64_t *)sub_181289D04(v8, *(unsigned __int8 **)v64, v56, v57, v58, a6, a7, a8);
            if (!result) {
              result = *(uint64_t **)(*(void *)v8 + 16LL);
            }
            v59[v63 + 4] = (uint64_t)result;
            *(_BYTE *)(v59[3] + v63++) = *((_BYTE *)v64 + 16);
            v64 += 6;
          }

          while (v55 != v63);
        }

        v61 = *(unsigned int *)(v8 + 52);
        v62 = *(_DWORD *)(v8 + 56);
        *(_DWORD *)(v42 + 100) = v61;
        *(_DWORD *)(v42 + 104) = v62 + 1;
        *(_DWORD *)(v8 + 52) = v61 + 1;
        *(_DWORD *)(v8 + 56) = v62 + 3;
        if (v59)
        {
          v10 = v76;
          if (*(_BYTE *)(*(void *)(*(void *)(v42 + 80) + 56LL) + 1LL) == 105)
          {
            *(_BYTE *)v59[3] = 1;
            v61 = *(unsigned int *)(v42 + 100);
          }
        }

        else
        {
          v10 = v76;
        }

        v65 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v65)
        {
          result = (uint64_t *)sub_18131044C(v11, 118LL, v61, 2LL, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v11 + 144) = v65 + 1;
          v66 = *(void *)(v11 + 136) + 40LL * v65;
          *(_DWORD *)v66 = 118;
          *(_DWORD *)(v66 + 4) = v61;
          *(_DWORD *)(v66 + 8) = 2;
          *(void *)(v66 + 12) = 0LL;
          *(void *)(v66 + 28) = 0LL;
          *(void *)(v66 + 20) = 0LL;
          *(_DWORD *)(v66 + 36) = 0;
        }

        if (*(_BYTE *)(*(void *)v11 + 103LL))
        {
          if (v59)
          {
            if (!*(void *)(*(void *)v11 + 816LL))
            {
              v46 = (*(_DWORD *)v59)-- == 1;
              if (v46) {
                result = sub_1813014B0((void *)v59[2], v59);
              }
            }
          }
        }

        else
        {
          v67 = *(void *)(v11 + 136) + 40LL * *(int *)(v11 + 144);
          *(_BYTE *)(v67 - 39) = -8;
          *(void *)(v67 - 24) = v59;
        }

        v50 = (*(_DWORD *)(v42 + 104) + 1);
        v68 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v68)
        {
          v52 = v11;
          v53 = 71LL;
          v47 = 0LL;
          goto LABEL_72;
        }

        *(_DWORD *)(v11 + 144) = v68 + 1;
        v43 = *(void *)(v11 + 136) + 40LL * v68;
        *(void *)v43 = 71LL;
      }

      else
      {
        v45 = *(char **)(v44 + 56);
        v46 = v45 == "nth_value" || v45 == "first_value";
        if (v46)
        {
          v47 = *(unsigned int *)(v8 + 52);
          v48 = *(_DWORD *)(v8 + 56);
          *(_DWORD *)(v42 + 100) = v47;
          *(_DWORD *)(v42 + 104) = v48 + 1;
          *(_DWORD *)(v8 + 52) = v47 + 1;
          *(_DWORD *)(v8 + 56) = v48 + 2;
        }

        else
        {
          if (v45 != "lead" && v45 != "lag") {
            goto LABEL_30;
          }
          v47 = *(unsigned int *)(v8 + 52);
          *(_DWORD *)(v8 + 52) = v47 + 1;
          *(_DWORD *)(v42 + 100) = v47;
        }

        v50 = *(unsigned int *)(v10 + 88);
        v51 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v51)
        {
          v52 = v11;
          v53 = 115LL;
LABEL_72:
          result = (uint64_t *)sub_18131044C(v52, v53, v47, v50, 0LL, a6, a7, a8);
          goto LABEL_30;
        }

        *(_DWORD *)(v11 + 144) = v51 + 1;
        v43 = *(void *)(v11 + 136) + 40LL * v51;
        *(_DWORD *)v43 = 115;
        *(_DWORD *)(v43 + 4) = v47;
      }

      *(_DWORD *)(v43 + 8) = v50;
      *(void *)(v43 + 12) = 0LL;
      *(void *)(v43 + 28) = 0LL;
      *(void *)(v43 + 20) = 0LL;
      *(_DWORD *)(v43 + 36) = 0;
LABEL_30:
      v42 = *(void *)(v42 + 64);
      if (!v42) {
        return result;
      }
    }
  }

    v11 = 0LL;
    goto LABEL_23;
  }

  v7 = a1[1];
  if ((int)v7 < 2)
  {
LABEL_9:
    v5 = 0LL;
    v6 = (unsigned __int8 *)*((void *)a2 + 2);
    if (!v6) {
      goto LABEL_24;
    }
    goto LABEL_10;
  }

  v8 = 0LL;
  v9 = v7 - 1;
  while (a1[v8 + 3] != v4)
  {
    if (v9 == ++v8) {
      goto LABEL_9;
    }
  }

  v5 = 1LL << (v8 + 1);
  v6 = (unsigned __int8 *)*((void *)a2 + 2);
  if (v6) {
    goto LABEL_10;
  }
LABEL_24:
  v16 = (unsigned __int8 *)*((void *)a2 + 3);
  if (!v16)
  {
    v19 = *((_DWORD *)a2 + 1);
    if ((v19 & 0x1000) != 0)
    {
      if ((v19 & 0x40) != 0) {
        *a1 = 1;
      }
      v18 = sub_181331514(a1, *((void *)a2 + 4));
      goto LABEL_58;
    }

    v20 = (int *)*((void *)a2 + 4);
    if (!v20) {
      goto LABEL_68;
    }
    v21 = *v20;
    if (*v20 < 1)
    {
      v23 = 0LL;
LABEL_67:
      v5 |= v23;
      goto LABEL_68;
    }

    v22 = 0LL;
    v23 = 0LL;
    while (1)
    {
      v25 = *(unsigned __int8 **)&v20[6 * v22 + 2];
      if (v25)
      {
        if (*v25 == 167 && (*((_DWORD *)v25 + 1) & 0x20) == 0)
        {
          v27 = *((_DWORD *)v25 + 11);
          if (a1[2] == v27)
          {
            v24 = 1LL;
            goto LABEL_37;
          }

          v28 = a1[1];
          if ((int)v28 >= 2)
          {
            v29 = 0LL;
            v30 = v28 - 1;
            while (a1[v29 + 3] != v27)
            {
              if (v30 == ++v29) {
                goto LABEL_36;
              }
            }

            v24 = 1LL << (v29 + 1);
            goto LABEL_37;
          }
        }

        else if ((*((_DWORD *)v25 + 1) & 0x810000) == 0)
        {
          v24 = sub_181332EB0(a1);
          v21 = *v20;
          goto LABEL_37;
        }
      }

        if (++v21 == v20) {
          goto LABEL_52;
        }
      }
    }

    LODWORD(v21) = 0;
LABEL_51:
    if ((_DWORD)v21 == (_DWORD)v20)
    {
LABEL_52:
      v36 = *((unsigned __int16 *)v3 + 30);
      if ((v36 & 0x80) != 0) {
        v35 = (v36 >> 9) & 1 | 2;
      }
      else {
        v35 = (v36 >> 6) & 1;
      }
    }

    else
    {
      v35 = 0;
      LODWORD(v20) = 0;
    }
  }

  else
  {
    v35 = 0;
    LODWORD(v20) = 0;
  }

  v37 = 8LL * (int)v20 + 28LL * v11;
  v38 = v37 + 136;
  if (*v6)
  {
    v45 = (int *)sub_1812F2264(*v6, v37 + 136);
    if (v45) {
      goto LABEL_58;
    }
LABEL_90:
    sub_1812DC47C((uint64_t)v6, "out of memory", v39, v40, v41, v42, v43, v44, v100);
    return 7LL;
  }

  v45 = (int *)sub_18126F0AC(v37 + 136);
  if (!v45) {
    goto LABEL_90;
  }
LABEL_58:
  bzero(v45, v38);
  *((void *)v45 + 12) = v4;
  v46 = (uint64_t)&v45[2 * v11 + 32];
  v47 = v46 + 12LL * v11;
  *((void *)v45 + 1) = v46;
  *((void *)v45 + 3) = v47;
  *((void *)v45 + 4) = v47 + 8LL * (int)v20;
  *((void *)v45 + 13) = v6;
  v45[28] = v35;
  v45[29] = 0;
  v48 = *(_DWORD *)(v4 + 20);
  if (v48 >= 1)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v104 = 0;
    v52 = *(void *)(v4 + 32) + 18LL;
    while (1)
    {
      v53 = *(_WORD *)v52;
      if ((*(_WORD *)v52 & 0x40) == 0) {
        goto LABEL_62;
      }
      v54 = (_DWORD *)(v46 + 12LL * v51);
      *v54 = *(_DWORD *)(v52 + 14);
      v54[2] = v50;
      v55 = *(_WORD *)(v52 + 2);
      v56 = v55 & 0x3FFF;
      if (v56 == 1)
      {
        if ((v53 & 0x8000) == 0)
        {
          v57 = 1 << v51;
          if (v51 >= 32) {
            v57 = 0;
          }
          v49 |= v57;
          v45[29] = v49;
        }

        *(_BYTE *)(v46 + 12LL * v51 + 4) = 2;
      }

      else
      {
        v58 = (_BYTE *)(v46 + 12LL * v51 + 4);
        if (v56 == 64)
        {
          *v58 = *(_BYTE *)(v52 + 5);
        }

        else if ((*(_WORD *)(v52 + 2) & 0x180) != 0)
        {
          if (v56 == 256) {
            *v58 = 71;
          }
          else {
            *v58 = 72;
          }
        }

        else
        {
          *v58 = v55;
          if ((v55 & 0x3C) != 0)
          {
            v59 = *(unsigned __int8 **)(*(void *)(v52 - 18) + 24LL);
            v60 = *v59;
            if (v60 == 176) {
              v60 = v59[2];
            }
            if (v60 == 138)
            {
              v59 = (unsigned __int8 *)*((void *)v59 + 4);
LABEL_82:
              if (**((int **)v59 + 4) >= 2)
              {
                v61 = 1 << v51;
                if (v51 >= 16) {
                  LOWORD(v61) = 0;
                }
                v104 |= v61;
                if (v56 == 4)
                {
                  *v58 = 32;
                }

                else if (v56 == 16)
                {
                  *v58 = 8;
                }
              }

              goto LABEL_61;
            }

            if (v60 == 177) {
              goto LABEL_82;
            }
          }
        }
      }

    ++v16;
  }

  if (*v16) {
    goto LABEL_22;
  }
  if ((v11 & 0xFFFFFFFE) == 0)
  {
LABEL_38:
    sqlite3_snprintf(128, __s, "cannot detach database %s", v9);
    goto LABEL_39;
  }

  v24 = *v14;
  if (*v14 && *(_BYTE *)(v24 + 16) || *(_DWORD *)(v24 + 24))
  {
    sqlite3_snprintf(128, __s, "database %s is locked");
    goto LABEL_39;
  }

  v26 = *(void **)(*(void *)(v12 + 56) + 64LL);
  if (v26)
  {
    v27 = *(void *)(v12 + 32 * v11 + 24);
    do
    {
      v28 = v26[2];
      if (*(void *)(v28 + 48) == v27) {
        *(void *)(v28 + 48) = *(void *)(v28 + 40);
      }
      v26 = (void *)*v26;
    }

    while (v26);
  }

  sub_1812B54BC(v24, a2);
  *v14 = 0LL;
  *(void *)(v12 + 32 * v11 + 24) = 0LL;
  return sub_181311990((void *)v8);
}

  v6 = *(_BYTE *)(a2 + 29);
  if ((v6 & 4) != 0)
  {
    v7 = *(void **)(a2 + 8);
    if (v7)
    {
      sub_1812F20DC(*(void **)a2, v7);
      v6 = *(_BYTE *)(a2 + 29);
    }

    *(_BYTE *)(a2 + 29) = v6 & 0xFB;
  }

  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0LL;
}

  if (SLODWORD(v9) >= 30) {
    v11 = 30;
  }
  else {
    v11 = LODWORD(v9);
  }
  v6 = v11 & ~(v11 >> 31);
  v7 = *a3;
  if (*a3) {
    goto LABEL_6;
  }
LABEL_26:
  sub_1812CF36C(97220);
  v7 = *a3;
  if (!*a3)
  {
    sub_1812CF36C(89752);
    goto LABEL_34;
  }

  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0) {
      goto LABEL_30;
    }
    v14 = (char *)sub_181303998((int *)v12, 1);
    v15 = *(void *)(a3 + 40);
    if (!v15) {
      goto LABEL_28;
    }
  }

  else
  {
    v14 = *(char **)(v12 + 8);
    v15 = *(void *)(a3 + 40);
    if (!v15) {
      goto LABEL_28;
    }
  }

  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0) {
      goto LABEL_29;
    }
    v14 = (char *)sub_181303998((int *)v12, 1);
    v15 = a3[5];
    if (!v15) {
      goto LABEL_38;
    }
  }

  else
  {
    v14 = *(char **)(v12 + 8);
    v15 = a3[5];
    if (!v15) {
      goto LABEL_38;
    }
  }

    v16 = 0LL;
    v17 = a3[4];
    if (v17) {
      goto LABEL_23;
    }
LABEL_20:
    sub_1812CF36C(89717);
LABEL_21:
    v18 = 0LL;
    goto LABEL_25;
  }

  v16 = *(unsigned __int8 **)(v14 + 8);
  v17 = a3[4];
  if (!v17) {
    goto LABEL_20;
  }
LABEL_23:
  v19 = *(_WORD *)(v17 + 20);
  if ((v19 & 0x24) != 0)
  {
    v18 = *(void *)v17;
  }

  else if ((v19 & 8) != 0)
  {
    v38 = *(double *)v17;
    if (*(double *)v17 >= -9.22337204e18)
    {
      if (v38 <= 9.22337204e18) {
        v18 = (uint64_t)v38;
      }
      else {
        v18 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      v18 = 0x8000000000000000LL;
    }
  }

  else
  {
    if ((v19 & 0x12) == 0 || !*(void *)(v17 + 8)) {
      goto LABEL_21;
    }
    v18 = sub_181303DF0(v17);
  }

    while ((*(_BYTE *)(v11 + 1) & 0x10) != 0 && *(_BYTE *)(v7 + 54))
    {
      v11 = *(void *)(v7 + 8) + 16LL * *(unsigned int *)(v11 + 8);
      v13 = *(_DWORD *)(v11 + 4);
      if (v13) {
        goto LABEL_15;
      }
    }
  }

  else
  {
    v12 = 0LL;
  }

  if (a1)
  {
    v18 = *(void *)a1;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
    {
      sub_1813040AC(v18, v12);
    }

    else
    {
      *(void *)v18 = v12;
      *(_WORD *)(v18 + 20) = 4;
    }
  }

  else
  {
    sub_1812CF36C(97441);
  }

            *v18 = v19;
            if ((_DWORD)result) {
              goto LABEL_31;
            }
            if (++v13 == v32)
            {
              v11 = *(void *)(v8 + 32);
              goto LABEL_32;
            }
          }

          v19 = 0LL;
LABEL_29:
          result = 7LL;
LABEL_30:
          *v18 = v19;
LABEL_31:
          *a5 = result;
        }

        return result;
      }

      v10 = *a4;
      if (*(_DWORD *)v8 == 4) {
        ++v10;
      }
      *a4 = v10;
      result = sub_1813707A8(v9, *(void *)(v8 + 16), a3, a4, a5);
      v8 = *(void *)(v8 + 24);
      if (!v8) {
        return result;
      }
    }
  }

  return result;
}

                    LODWORD(v3) = (_DWORD)v3 + 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

      v8 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v1);
        --qword_18C468B10;
        result = off_18C4653A8(v1);
        v1 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        v8 = &xmmword_18C465410;
      }

      result = (*v8)(v1);
LABEL_4:
      v1 = v2;
      if (!v2) {
        return result;
      }
    }

    v5 = &xmmword_18C465410;
LABEL_14:
    (*v5)(v3);
    goto LABEL_15;
  }

  return result;
}

    sub_1812CF36C(91138);
    goto LABEL_23;
  }

  v14 = *(const void **)(v12 + 8);
  v15 = *(_WORD *)(v12 + 20);
  if ((v15 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_30:
  if (*(_BYTE *)(v12 + 22) == 1)
  {
    v17 = *(unsigned int *)(v12 + 16);
    if (!sqlite3_initialize()) {
      goto LABEL_24;
    }
LABEL_40:
    *(void *)(a1 + 8) = 0LL;
    return 7LL;
  }

      if (!v23)
      {
LABEL_35:
        v8 = 7LL;
        goto LABEL_36;
      }

      ++*(_DWORD *)(*a1 + 120);
      if (a2 <= 2) {
        v24 = 129LL;
      }
      else {
        v24 = 133LL;
      }
      v8 = sub_18126DFE0(*(void *)v13, v23, 0xFFFFFFFFLL, v24, 0LL, v6, 0LL, v15);
      --*(_DWORD *)(*a1 + 120);
      v25 = (void (**)(unsigned __int8 *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_31;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v23);
      --qword_18C468B10;
      off_18C4653A8(v23);
      v23 = (unsigned __int8 *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        v25 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_31:
        (*v25)(v23);
      }

      if (a4 && (_DWORD)v8)
      {
        v26 = sqlite3_errmsg(*(sqlite3 **)v13);
        *a4 = sqlite3_mprintf("%s", v26);
      }

  *((void *)a2 + 8) = 0x3FF0000000000000LL;
  v13 = a2[4];
  if (v13 == 2)
  {
    v16 = *((void *)a2 + 3);
    if (!*(_DWORD *)v16 && !*(_BYTE *)(v16 + 4) && *(_DWORD *)(v16 + 8) == 1 && !*(_BYTE *)(v16 + 12)) {
      goto LABEL_36;
    }
    return 0LL;
  }

  if (v13 != 1) {
    return 0LL;
  }
  v14 = *((void *)a2 + 3);
  if (*(_DWORD *)v14) {
    return 0LL;
  }
  if (*(_BYTE *)(v14 + 4)) {
    return 0LL;
  }
LABEL_36:
  result = 0LL;
  a2[15] = 1;
  a2[10] |= 8u;
  return result;
}

      *(void *)(a1[34] + 8 * i) = 0LL;
      *(_DWORD *)(a1[35] + 4 * i) = 0;
    }
  }

  return 0LL;
}

LABEL_50:
      if (*v17) {
        xmmword_18C465410(*v17);
      }
      v32 = *(unsigned __int8 *)(v15 + 113);
      if (v32 == 109 || v32 == 118 || v32 == 186)
      {
        if (*(_BYTE *)(v15 + 103)) {
          goto LABEL_56;
        }
        v10 = (*(_DWORD *)(v15 + 88) & *(_DWORD *)(v15 + 80));
      }

      else
      {
        sqlite3_log(21, "API call with %s database connection pointer", "invalid");
        v10 = sub_1812CF36C(188008);
      }

      v33 = v10;
      if ((_DWORD)v10)
      {
        *(_BYTE *)(v15 + 113) = -70;
        goto LABEL_58;
      }

      if (qword_18C468D08 != -1) {
        dispatch_once(&qword_18C468D08, &unk_189B6F608);
      }
      if (dword_18C5506B4 == 2)
      {
        v72 = *(unsigned __int8 *)(v15 + 113);
        if (v72 == 186) {
          goto LABEL_151;
        }
        if (v72 != 118)
        {
          if (v72 != 109)
          {
LABEL_152:
            v73 = "invalid";
            goto LABEL_153;
          }

      v8 = *(void *)(v8 + 80);
      v12 = v81;
      if (!v8) {
        goto LABEL_51;
      }
    }

    goto LABEL_74;
  }

  (*(void (**)(uint64_t, unint64_t, _BYTE *))(v7 + 128))(v7, v18, v48);
  if (v49 == v50) {
    v28 = 0;
  }
  else {
    v28 = sub_181309478(v7, v18, (uint64_t)v48);
  }
  v52 = v28;
  sub_1812AC27C(v7, v46, v51, &v52);
  result = v52;
  if (!v52)
  {
    if (*(_BYTE *)(v7 + 8)) {
      goto LABEL_91;
    }
    v34 = *v8;
    if ((*(_DWORD *)(*v8 + 20) & 0x80000000) == 0 || (result = sub_18130A254(*v8), !(_DWORD)result))
    {
      else {
        v35 = (uint64_t)&a1[8 * v19 + 152];
      }
      v36 = *(void *)(v34 + 96) + 2LL * *(unsigned __int16 *)(v34 + 24);
      v37 = (*(unsigned __int8 *)(v36 - 1) | (*(unsigned __int8 *)(v36 - 2) << 8)) & (unint64_t)*(unsigned __int16 *)(v34 + 26);
      if (v37 <= 3) {
        return sub_1812FBF50(86655);
      }
      v40 = v19;
      v41 = *(_DWORD *)(*(void *)v35 + 4LL);
      v42 = *(void *)(v34 + 80) + v37;
      v43 = (*(uint64_t (**)(uint64_t, unint64_t))(v34 + 120))(v34, v42);
      v44 = *(_DWORD **)(v5 + 136);
      v52 = sub_1812ABDD4(*(void *)(v34 + 112));
      if (!v52) {
        v52 = sub_1812AFBF0(v7, v46, (char *)(v42 - 4), v43 + 4, v44, v41);
      }
      sub_1812AC27C(v34, *(unsigned __int16 *)(v34 + 24) - 1, v43, &v52);
      result = v52;
      v19 = v40;
      if (!v52)
      {
LABEL_91:
        if (3 * *(_DWORD *)(*((void *)a1 + 17) + 20LL) <= 2 * *(_DWORD *)(*((void *)a1 + 4) + 56LL)
          || (result = sub_1812AC3A8((uint64_t)a1), !(_DWORD)result))
        {
          sub_181300038(*((void *)a1 + 17));
          v29 = (char)--a1[84];
          if (v29 > v19)
          {
            v30 = v19;
            do
            {
              a1[84] = v29 - 1;
              v31 = *(void *)&a1[8 * (char)v29 + 144];
              if (v31)
              {
                v32 = *(void *)(v31 + 112);
                if ((*(_WORD *)(v32 + 52) & 0x20) != 0)
                {
                  v33 = *(void *)(v32 + 40);
                  --*(_DWORD *)(v33 + 152);
                  *(void *)(v32 + 32) = *(void *)(v33 + 168);
                  *(void *)(v33 + 168) = v32;
                  (*(void (**)(void, void, void))(**(void **)(v33 + 72) + 144LL))( *(void *)(v33 + 72),  *(void *)(v33 + 200) * (*(_DWORD *)(v32 + 48) - 1),  *(void *)(v32 + 8));
                }

                else
                {
                  sub_1812F9F44(v32);
                }

                v30 = v19;
              }

              v29 = (char)a1[84];
            }

            while (v29 > v30);
          }

          *((void *)a1 + 17) = *(void *)&a1[8 * v29 + 144];
          result = sub_1812AC3A8((uint64_t)a1);
          if (!(_DWORD)result)
          {
LABEL_74:
            if (v22)
            {
              *a1 = 2;
              v38 = *(unsigned __int16 *)(v7 + 24);
              result = 0LL;
              if (v46 >= v38)
              {
                *((_DWORD *)a1 + 1) = -1;
                *((_WORD *)a1 + 43) = v38 - 1;
              }

              else
              {
                *((_DWORD *)a1 + 1) = 1;
              }
            }

            else
            {
              v39 = sub_18129B700(a1);
              if ((v20 & 2) != 0)
              {
                sub_1812FFDBC((uint64_t)a1);
                *a1 = 3;
              }

              if (v39 == 16) {
                return 0LL;
              }
              else {
                return v39;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

        *(_DWORD *)(a1 + 32) = *__error();
        v13 = 2058LL;
        goto LABEL_68;
      }

      v40 = v18;
      v41 = 510LL;
      v42 = 3;
      v21 = sub_1812F3848(v20, (uint64_t)&v40, a1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_BYTE *)(v19 + 33) = 1;
        ++*(_DWORD *)(v19 + 28);
        goto LABEL_30;
      }
    }

    else
    {
      v21 = sub_1812F3848(v20, (uint64_t)&v37, a1);
    }

    if (v21 == -1) {
      goto LABEL_50;
    }
    goto LABEL_30;
  }

  v39 = 1;
  v14 = dword_18C54FA50 + 2LL;
  v37 = v14;
  v38 = 510LL;
  v15 = *(void *)(a1 + 16);
  v16 = *(unsigned int *)(v15 + 88);
  if ((_DWORD)v16 == -1)
  {
    v16 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(v15 + 88) = v16;
  }

  if ((*(_WORD *)(a1 + 30) & 3) != 1)
  {
    v17 = sub_1812F3848(v16, (uint64_t)&v37, a1);
LABEL_40:
    if (!v17) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  if (*(_BYTE *)(v15 + 33)) {
    goto LABEL_42;
  }
  v40 = v14;
  v41 = 510LL;
  v42 = 3;
  v17 = sub_1812F3848(v16, (uint64_t)&v40, a1);
  if ((v17 & 0x80000000) == 0)
  {
    *(_BYTE *)(v15 + 33) = 1;
    ++*(_DWORD *)(v15 + 28);
    goto LABEL_40;
  }

      v9 = 3LL;
      goto LABEL_55;
    }
  }

  v10 = *(const char **)(v5 + 8);
  v31 = 0;
  v29 = dword_18C54FA50;
  v30 = 1LL;
  v32 = *(_DWORD *)(a1 + 24);
  if (fsctl(v10, 0xC0207A17uLL, &v29, 0) == -1)
  {
    v18 = *__error();
    v9 = 5LL;
    if (((1LL << v18) & 0x1000000800012010LL) != 0) {
      goto LABEL_68;
    }
    if (v18 != 1)
    {
LABEL_51:
      if ((_DWORD)v18 != 77)
      {
        v9 = 3850LL;
        *(_DWORD *)(a1 + 32) = v18;
      }

      goto LABEL_68;
    }

    v9 = 3LL;
    *(_DWORD *)(a1 + 32) = 1;
    goto LABEL_68;
  }

  if (a2 != 1) {
    goto LABEL_28;
  }
  v11 = (random() & 0x7FFFFFFFFFFFFFFFuLL) % 0x1FD;
  v6[10] = (int32x2_t)v11;
  v12 = *(const char **)(v5 + 8);
  v31 = 0;
  v29 = dword_18C54FA50 + v11 + 2;
  v30 = 1LL;
  v32 = *(_DWORD *)(a1 + 24);
  v13 = fsctl(v12, 0xC0207A17uLL, &v29, 0);
  v14 = 0LL;
  if (v13 != -1)
  {
LABEL_18:
    LODWORD(v15) = 0;
    goto LABEL_19;
  }

  v15 = *__error();
  v14 = 5LL;
  if (((1LL << v15) & 0x1000000800012010LL) != 0) {
    goto LABEL_18;
  }
  if (v15 == 1)
  {
    v14 = 3LL;
  }

  else
  {
LABEL_76:
    if ((_DWORD)v15 == 77) {
      goto LABEL_18;
    }
    v14 = 3850LL;
  }

  *(_DWORD *)(a1 + 32) = v15;
LABEL_19:
  v16 = *(const char **)(v5 + 8);
  v31 = 1;
  v29 = dword_18C54FA50;
  v30 = 1LL;
  v32 = *(_DWORD *)(a1 + 24);
  v9 = 0LL;
  if (fsctl(v16, 0xC0207A17uLL, &v29, 0) == -1)
  {
    v17 = *__error();
    v9 = 5LL;
    if (v17 <= 0x3C)
    {
      if (((1LL << v17) & 0x1000000800012010LL) != 0) {
        goto LABEL_61;
      }
      if (v17 == 1)
      {
        v9 = 3LL;
LABEL_60:
        *(_DWORD *)(a1 + 32) = v17;
        goto LABEL_61;
      }
    }

    if ((_DWORD)v17 != 77)
    {
      v9 = 2058LL;
      goto LABEL_60;
    }
  }

      result = 0LL;
      *(_WORD *)(a1 + 20) |= 0x200u;
      break;
  }

  return result;
}

    *(void *)(v1 + 8) = 0LL;
    *(void *)(v1 + 16) = 0LL;
  }

  v27 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v27)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  result = off_18C4653A8(v1);
  v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    v27 = &xmmword_18C465410;
    return (*v27)(v1);
  }

  return result;
}

LABEL_151:
          v73 = "unopened";
LABEL_153:
          sqlite3_log(21, "API call with %s database connection pointer", v73);
          sub_1812CF36C(187543);
          goto LABEL_154;
        }

        v77 = *v17;
        if (*v17)
        {
          xmmword_18C465400(v77);
          v77 = *v17;
        }

        v78 = sub_1813B8654;
      }

      else
      {
        if (dword_18C5506B4 != 1) {
          goto LABEL_154;
        }
        v65 = *(unsigned __int8 *)(v15 + 113);
        if (v65 == 186) {
          goto LABEL_151;
        }
        if (v65 != 118)
        {
          if (v65 != 109) {
            goto LABEL_152;
          }
          goto LABEL_151;
        }

        v77 = *v17;
        if (*v17)
        {
          xmmword_18C465400(v77);
          v77 = *v17;
        }

        v78 = _sqlite_auto_profile;
      }

      *(void *)(v15 + 256) = v78;
      *(void *)(v15 + 264) = v15;
      *(_BYTE *)(v15 + 110) = *(_BYTE *)(v15 + 110) & 0xF | 0x80;
      if (v77) {
        xmmword_18C465410(v77);
      }
LABEL_154:
      if (dword_18C5506B8 == 2)
      {
        v75 = *(unsigned __int8 *)(v15 + 113);
        if (v75 == 186) {
          goto LABEL_163;
        }
        if (v75 != 118)
        {
          if (v75 != 109)
          {
LABEL_164:
            v76 = "invalid";
            goto LABEL_165;
          }

    xmmword_18C465410(v48);
    goto LABEL_152;
  }

  v97 = v96 + 1;
  while (1)
  {
    v98 = *(void *)(*(void *)(v152 + 32) + 32LL * (v97 - 2) + 8);
    if (v98)
    {
      if (*(void **)(v98 + 8) == v20) {
        break;
      }
    }
  }

  if ((v50 & 1) == 0) {
    xmmword_18C465410(v48);
  }
  if (!v157) {
    xmmword_18C465410(v18);
  }
  sqlite3_free(v43);
  sqlite3_free((void *)v17);
  return 19LL;
}

  sub_1813784F0(*v39);
  v114 = (void (**)(uint64_t *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_156:
    (*v114)(v39);
    goto LABEL_157;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v39);
  --qword_18C468B10;
  off_18C4653A8(v39);
  v39 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    v114 = (void (**)(uint64_t *))&xmmword_18C465410;
    goto LABEL_156;
  }

                ++v83;
                v84 += 32;
              }

              while (v83 < *(int *)(v52 + 24));
            }

            v45 = v142;
            if (v55 != (char *)v151)
            {
              v87 = (uint64_t (**)(char *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_165;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v55);
              --qword_18C468B10;
              off_18C4653A8(v55);
              v55 = (char *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                v87 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_165:
                (*v87)(v55);
              }
            }

            v51 = v145;
            if (v82 < 1) {
              goto LABEL_193;
            }
          }

          ++v51;
          if ((_DWORD)v16) {
            goto LABEL_193;
          }
          continue;
        }
      }

      goto LABEL_11;
    }
  }

  v15 = 0LL;
  while (1)
  {
    v17 = v14 + 32 * v15;
    if (!*(void *)(v17 + 56))
    {
      v36 = *(void *)(v17 + 48);
      v37 = *(void *)v36;
      if (*(void *)v36 == v6 || *(_BYTE *)(v36 + 20)) {
        goto LABEL_18;
      }
      v38 = v5 != 0;
      if (v6 >= v37) {
        v38 = 0;
      }
      if ((v6 <= v37 || v5 != 0) && !v38)
      {
        v13 = 0;
        v6 = *(void *)v36;
        goto LABEL_18;
      }

      v41 = *(void *)(v36 + 24);
      do
      {
        sub_1813903E0(v41, v36, 1, v6);
        if (*(_DWORD *)(v41 + 60)) {
          break;
        }
        if (*(_BYTE *)(v36 + 20)) {
          break;
        }
        v42 = *(void *)(v36 + 136LL * *(unsigned __int16 *)(*(void *)(v36 + 88) + 4LL) + 216);
        v43 = *(_DWORD *)(v36 + 68);
        if (!v43 && v42 >= v6) {
          break;
        }
      }

      while (!v43 || v42 > v6);
      v44 = *(void *)(v36 + 24);
      v16 = *(unsigned int *)(v44 + 60);
      *(_DWORD *)(v44 + 60) = 0;
      if (!(_DWORD)v16)
      {
        v13 = *(unsigned __int8 *)(v36 + 20);
        if (!*(_BYTE *)(v36 + 20))
        {
          v6 = *(void *)v36;
          goto LABEL_18;
        }
      }

      *(_DWORD *)(a2 + 4) = 1;
      return v16;
    }

    v18 = 0LL;
    v19 = 0;
    v20 = v17 + 32;
    v21 = v17 + 32;
    do
    {
      v22 = *(uint64_t **)(v21 + 16);
      if (!*((_BYTE *)v22 + 20))
      {
        v23 = *v22;
        if (v19 && v5 == v23 < v18)
        {
          v19 = 1;
        }

        else
        {
          v19 = 1;
          v18 = v23;
        }
      }

      v21 = *(void *)(v21 + 24);
    }

    while (v21);
    if (v18 != v6) {
      break;
    }
LABEL_18:
    if (++v15 >= *(int *)(v14 + 24))
    {
      v3 = v144;
      v11 = *(_DWORD *)(v144 + 16);
      goto LABEL_14;
    }
  }

  v24 = v20;
  while (1)
  {
    v25 = *(void *)(v24 + 16);
    if (!*(_BYTE *)(v25 + 20))
    {
      v26 = v5 != 0;
      if (v6 >= *(void *)v25) {
        v26 = 0;
      }
      v27 = v6 > *(void *)v25 && v5 == 0;
      if (v27 || v26) {
        break;
      }
    }

    v16 = 0LL;
LABEL_30:
    v24 = *(void *)(v24 + 24);
    if (!v24) {
      goto LABEL_49;
    }
  }

  v29 = *(void *)(v25 + 24);
  do
  {
    sub_1813903E0(v29, v25, 1, v6);
    if (*(_DWORD *)(v29 + 60)) {
      break;
    }
    if (*(_BYTE *)(v25 + 20)) {
      break;
    }
    v30 = *(void *)(v25 + 136LL * *(unsigned __int16 *)(*(void *)(v25 + 88) + 4LL) + 216);
    v31 = *(_DWORD *)(v25 + 68);
    if (!v31 && v30 >= v6) {
      break;
    }
  }

  while (!v31 || v30 > v6);
  v32 = *(void *)(v25 + 24);
  v16 = *(unsigned int *)(v32 + 60);
  *(_DWORD *)(v32 + 60) = 0;
  if (!(_DWORD)v16) {
    goto LABEL_30;
  }
LABEL_49:
  if (!(_DWORD)v16)
  {
    v6 = 0LL;
    v33 = 0;
    do
    {
      v34 = *(void *)(v20 + 16);
      if (!*(_BYTE *)(v34 + 20))
      {
        v35 = *(void *)v34;
        if (v33 && v5 == v35 < v6)
        {
          v33 = 1;
        }

        else
        {
          v33 = 1;
          v6 = v35;
        }
      }

      v20 = *(void *)(v20 + 24);
    }

    while (v20);
    v16 = 0LL;
    v13 = 0;
    if (v33) {
      goto LABEL_18;
    }
  }

  *(void *)(a2 + 4) = 1LL;
  return v16;
}

LABEL_163:
          v76 = "unopened";
LABEL_165:
          sqlite3_log(21, "API call with %s database connection pointer", v76);
          sub_1812CF36C(187488);
          goto LABEL_166;
        }

        if (*v17)
        {
          xmmword_18C465400(*v17);
          v79 = *(void *)(v15 + 24);
          *(_BYTE *)(v15 + 110) = 64;
          v80 = sub_1813B8758;
LABEL_179:
          *(void *)(v15 + 240) = v80;
          *(void *)(v15 + 248) = v15;
          if (v79) {
            xmmword_18C465410(v79);
          }
          goto LABEL_166;
        }

        v34 = 0;
        v10 = 0LL;
        v33 = 0;
        *(_BYTE *)(v15 + 110) = 64;
        v84 = sub_1813B8758;
      }

      else
      {
        if (dword_18C5506B8 != 1)
        {
LABEL_166:
          v34 = 0;
          v10 = 0LL;
          v33 = 0;
          goto LABEL_59;
        }

        v74 = *(unsigned __int8 *)(v15 + 113);
        if (v74 == 186) {
          goto LABEL_163;
        }
        if (v74 != 118)
        {
          if (v74 != 109) {
            goto LABEL_164;
          }
          goto LABEL_163;
        }

        if (*v17)
        {
          xmmword_18C465400(*v17);
          v79 = *(void *)(v15 + 24);
          *(_BYTE *)(v15 + 110) = 64;
          v80 = _sqlite_auto_trace;
          goto LABEL_179;
        }

        v34 = 0;
        v10 = 0LL;
        v33 = 0;
        *(_BYTE *)(v15 + 110) = 64;
        v84 = _sqlite_auto_trace;
      }

      *(void *)(v15 + 240) = v84;
      *(void *)(v15 + 248) = v15;
      goto LABEL_59;
    }

    v54 = v87;
    if ((v87 & 2) != 0 && geteuid() == 248)
    {
      sqlite3_log(1, "user 'setup'(248) opening database '%s' with SQLITE_OPEN_READWRITE", a1);
      v55 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT);
      if (v55) {
        sub_1813C3DC4(v55, v56, v57, v58, v59, v60, v61, v62);
      }
    }

    v63 = sub_1812696E8(*(void *)v15, __s, v15, (uint64_t *)(*(void *)(v15 + 32) + 8LL), 0, v54 | 0x100);
    if (v63)
    {
      if (v63 == 3082) {
        v64 = 7;
      }
      else {
        v64 = v63;
      }
      *(_DWORD *)(v15 + 80) = v64;
      sub_1812FA264(v15, v64);
      goto LABEL_50;
    }

    sub_18126C96C(*(void *)(*(void *)(v15 + 32) + 8LL));
    v66 = sub_18126C990(v15, *(void *)(*(void *)(v15 + 32) + 8LL));
    v67 = *(void *)(v15 + 32);
    *(void *)(v67 + 24) = v66;
    if (!*(_BYTE *)(v15 + 103))
    {
      sub_18130D2FC(v15, *(unsigned __int8 *)(v66 + 113));
      v67 = *(void *)(v15 + 32);
    }

    v68 = *(void *)(v67 + 8);
    if (*(_BYTE *)(v68 + 17))
    {
      v69 = *(_DWORD *)(v68 + 20) - 1;
      *(_DWORD *)(v68 + 20) = v69;
      if (!v69) {
        sub_1812FDEFC(v68);
      }
    }

    v70 = sub_18126C990(v15, 0LL);
    v71 = *(void *)(v15 + 32);
    *(void *)(v71 + 56) = v70;
    *(void *)v71 = "main";
    *(_BYTE *)(v71 + 16) = 3;
    *(void *)(v71 + 32) = "temp";
    *(_BYTE *)(v71 + 48) = 1;
    *(_BYTE *)(v15 + 113) = 118;
    if (*(_BYTE *)(v15 + 103)) {
      goto LABEL_50;
    }
    *(_DWORD *)(v15 + 80) = 0;
    if (*(void *)(v15 + 416)) {
      sub_1812FA264(v15, 0);
    }
    else {
      *(_DWORD *)(v15 + 84) = -1;
    }
    sub_18135F4C0(v15);
    v81 = sqlite3_errcode((sqlite3 *)v15);
    if (v81) {
      goto LABEL_193;
    }
    v82 = sub_18135F564((unsigned __int8 *)v15);
    v83 = v82 == 0;
    if (v82) {
      goto LABEL_189;
    }
    v82 = sub_18135F8F0(v15);
    v83 = v82 == 0;
    if (v82) {
      goto LABEL_189;
    }
    v82 = sub_18135FC98(v15);
    v83 = v82 == 0;
    if (v82
      || (v82 = sub_18135FE38(v15), v83 = v82 == 0, v82)
      || (v82 = sub_18135FED0(), v83 = v82 == 0, v82)
      || (v82 = sub_18135FEEC(v15), v83 = v82 == 0, v82))
    {
LABEL_189:
      v81 = v82;
      if (!v83) {
        goto LABEL_192;
      }
    }

    else
    {
      v81 = sub_18135FFF0(v15);
      if (v81) {
        goto LABEL_192;
      }
    }

    if (!*(_BYTE *)(v15 + 103))
    {
      sub_1812CEBCC((sqlite3 *)v15);
      v81 = sub_1813C2E80((sqlite3 *)v15);
    }

          ++v75;
          v74 += 32LL;
          if (v75 >= *(int *)(v15 + 40))
          {
            *((_DWORD *)a1 + 13) = v76;
            v13 = 0x18C465000LL;
            if (v76)
            {
              v19 = 1;
              goto LABEL_185;
            }

        if (v67 == v44)
        {
          v39 = 0;
          v4 = 0LL;
          goto LABEL_77;
        }

        goto LABEL_165;
      }

      if ((v66 & 0x12) != 0 && *(void *)(v65 + 8))
      {
        v67 = sub_181303DF0(v65);
        goto LABEL_163;
      }

LABEL_192:
    if (!v81)
    {
LABEL_194:
      sub_1812DFC58(v15, 0LL, dword_18C465394, dword_18C465398);
      sqlite3_wal_autocheckpoint((sqlite3 *)v15, 1000);
      goto LABEL_50;
    }

  if (v165) {
    v167 = &byte_18C550680;
  }
  else {
    v167 = (char *)(*(void *)(v10 + 136) + 40LL * v196);
  }
  *((_DWORD *)v167 + 2) = v149;
  if ((*(_BYTE *)(v164 + 49) & 4) != 0)
  {
    v168 = *(_DWORD *)(v10 + 392);
    v169 = 56LL * v168 + 20;
    v170 = v168 + 1;
    while ((int)--v170 >= 1)
    {
      v171 = v169 - 56;
      v172 = *(void *)(v10 + 400);
      v173 = *(_DWORD *)(v172 + v169 - 76);
      v169 -= 56LL;
      if (v173 == v87)
      {
        v174 = v172 + v171;
        v175 = (int *)(v172 + v171 - 16);
        if (*v175)
        {
          v177 = *(_DWORD *)(v174 - 8);
          v176 = (int *)(v174 - 8);
          if (v177)
          {
            v175 = (int *)(v172 + v171);
            if (*(_DWORD *)(v172 + v171)) {
              break;
            }
            v178 = 5LL;
          }

          else
          {
            v178 = 3LL;
            v175 = v176;
          }
        }

        else
        {
          v178 = 1LL;
        }

        *v175 = v87;
        *(_DWORD *)(v172 + 4 * v178 + v171 - 16) = v149 - 1;
        break;
      }
    }
  }

            if (v43)
            {
              v131 = 0LL;
              v132 = v228;
              v28 = v236;
              goto LABEL_227;
            }

            v28 = v236;
            v39 = v248;
            if ((int)v41 <= __s)
            {
              v41 = __s;
            }

            else
            {
              *(_DWORD *)v235 = v239;
              *((_DWORD *)v235 + 1) = v242;
              v235[1] = v246;
              v235[2] = v48;
            }

            goto LABEL_61;
          }

LABEL_193:
    *(_DWORD *)(v15 + 80) = v81;
    sub_1812FA264(v15, v81);
    goto LABEL_194;
  }

  if ((_BYTE)word_18C465384) {
    goto LABEL_22;
  }
  *(void *)(v15 + 24) = 0LL;
LABEL_26:
  v18 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    off_18C4653A8(v15);
    v15 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_56;
    }
    v18 = (void (**)(uint64_t))&xmmword_18C465410;
  }

  (*v18)(v15);
  v15 = 0LL;
LABEL_56:
  v10 = 7LL;
LABEL_57:
  sub_1812E03C8(v15, 0);
  v15 = 0LL;
  v33 = 7;
LABEL_58:
  v34 = v15 == 0;
LABEL_59:
  *a2 = v15;
  if (off_18C465508) {
    off_18C465508(qword_18C465510, v15, a1, 0LL);
  }
  if (!(_DWORD)v10) {
    sub_181347BEC(v15, 0LL, __s);
  }
  if (v9)
  {
    if (v34)
    {
      switch((_DWORD)v10)
      {
        case 0x204:
          v35 = "abort due to ROLLBACK";
          break;
        case 0x65:
          v35 = "no more rows available";
          break;
        case 0x64:
          v35 = "another row available";
          break;
        default:
          if (v33 > 0x1C || ((0x1410004uLL >> v33) & 1) != 0) {
            v35 = "unknown error";
          }
          else {
            v35 = off_189B6EC30[v33];
          }
          break;
      }
    }

    else
    {
      v35 = sqlite3_errmsg((sqlite3 *)v15);
    }

    if (qword_18C468CB8 != -1) {
      dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
    }
    v44 = (os_log_s *)qword_18C468CB0;
    if (v34) {
      v45 = os_signpost_id_generate((os_log_t)qword_18C468CB0);
    }
    else {
      v45 = os_signpost_id_make_with_pointer((os_log_t)qword_18C468CB0, (const void *)v15);
    }
    v46 = v45;
    if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (os_signpost_enabled(v44))
      {
        v47 = "(null)";
        if (a1) {
          v47 = a1;
        }
        *(_DWORD *)buf = 134218242;
        *(void *)v89 = v9;
        *(_WORD *)&v89[8] = 2080;
        *(void *)&v89[10] = v47;
        _os_signpost_emit_with_name_impl( &dword_181266000,  v44,  OS_SIGNPOST_INTERVAL_BEGIN,  v46,  "open",  "startTime=%{signpost.description:begin_time}llu path=%s",  buf,  0x16u);
      }

      if (os_signpost_enabled(v44))
      {
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v89 = v10;
        *(_WORD *)&v89[4] = 2050;
        *(void *)&v89[6] = v15;
        *(_WORD *)&v89[14] = 2082;
        *(void *)&v89[16] = v35;
        _os_signpost_emit_with_name_impl( &dword_181266000,  v44,  OS_SIGNPOST_INTERVAL_END,  v46,  "open",  "rc=%{public}d db=%{public}p errMsg=%{public}s",  buf,  0x1Cu);
      }
    }
  }

  if (!__s) {
    return v10;
  }
  for (i = __s - 4; i[3] || i[2] || i[1] || *i; --i)
    ;
  v49 = (void (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(i);
    --qword_18C468B10;
    off_18C4653A8(i);
    i = (char *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      return v10;
    }
    v49 = (void (**)(char *))&xmmword_18C465410;
  }

  (*v49)(i);
  return v10;
}

        if ((_DWORD)v18) {
          return v18;
        }
LABEL_194:
        v92 = v61;
        v94 = v63;
        v83 = v28;
        v84 = sub_1812F2E3C(v15, v99, v63, v96);
        v14 = v84;
        if (v101 || (v84 & 0x80000000) == 0)
        {
          if ((v84 & 0x80000000) == 0)
          {
            v85 = v62;
            goto LABEL_208;
          }
        }

        else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT))
        {
          sub_1813C3CF4((uint64_t)v15);
        }

        v86 = *__error();
        if (v100 && *__error() == 13 && off_18C54FCF8(v15, 0LL))
        {
          v87 = 0;
          v77 = 1544LL;
          goto LABEL_222;
        }

        v91 = v31;
        v88 = __error();
        v77 = 0LL;
        if (v83 && *v88 != 21)
        {
          v99 &= 0x20000900u;
          v89 = sub_1812F2E3C(v15, v99, v94, v96);
          if ((v89 & 0x80000000) == 0)
          {
            v14 = v89;
            v85 = v62;
            LODWORD(v29) = v29 & 0xFFFFFFF8 | 1;
            v103 = 1;
            v31 = v91;
LABEL_208:
            f_flags = v95;
            if (!off_18C54FD40(v14, __strerrbuf))
            {
              v90 = *(_WORD *)&__strerrbuf[4] & 0xF000;
              if (v90 != 0x2000 && v90 != 24576 && v90 != 0x8000)
              {
                v18 = sub_1812F2E28(49455);
                sub_1812F338C(v18, "open", v15, 49455);
                off_18C54FCE0(v14);
                goto LABEL_173;
              }

              *(void *)(v6 + 144) = v114;
            }

            if (v94 && (v29 & 0x80800) != 0) {
              sub_1812F7548(v14, v85, v92);
            }
LABEL_51:
            if (f_flags < 0)
            {
              v36 = fcntl(v14, 63) - 1;
              else {
                v37 = dword_1813CD864[v36];
              }
              *(_DWORD *)(v6 + 124) = v37;
              if ((v29 & 0x700000) != 0) {
                v37 = 0;
              }
              LODWORD(v29) = v37 | v29;
            }

            v102 = v103 | v31;
            if (!(v103 | v31))
            {
              v45 = v29 & 0x700000;
              if (*(_DWORD *)(v6 + 124) != (v29 & 0x700000))
              {
                if (v45)
                {
                  v46 = 0;
                  v47 = 0LL;
                  switch(v45 >> 20)
                  {
                    case 1u:
                    case 2u:
                    case 3u:
                    case 6u:
                    case 7u:
                      v46 = 0;
                      goto LABEL_80;
                    case 4u:
                      v46 = 1;
LABEL_80:
                      v47 = v45 >> 20;
                      break;
                    case 5u:
                      break;
                    default:
                      v47 = 0LL;
                      break;
                  }

                  v97 = v46;
                  v48 = fcntl(v14, 63);
                  v49 = v48 < 1 ? v97 : 0;
                  if ((_DWORD)v47 != v48 && (v49 & 1) == 0 && fcntl(v14, 64, v47) && *__error() != 1)
                  {
                    *(_DWORD *)(v6 + 124) = v45;
                    sub_1812F2E28(49495);
                    v50 = v104;
                    if (!v104)
                    {
LABEL_91:
                      v51 = *(_DWORD **)(v6 + 48);
                      if (v51)
                      {
                        *v51 = v14;
                        v51[1] = v29 & 3;
                      }

                      if (v31) {
                        off_18C54FE48(v15);
                      }
                      else {
                        *(_DWORD *)(v6 + 120) = v99;
                      }
                      if (*(_DWORD *)v108.f_fstypename == 1936091500)
                      {
                        *(_DWORD *)(v6 + 128) |= 2u;
                        v105[2] = 0LL;
                        v105[0] = 5LL;
                        v105[1] = 0x20000LL;
                        if (fgetattrlist(v14, v105, v106, 0x24uLL, 0) == -1)
                        {
                          *(_DWORD *)(v6 + 32) = *__error();
                          if (off_18C54FCE0(v14))
                          {
                            v64 = *(const char **)(v6 + 56);
                            v65 = *__error();
                            v119 = 0u;
                            v118 = 0u;
                            v117 = 0u;
                            v116 = 0u;
                            v115 = 0u;
                            strerror_r(v65, (char *)&v115, 0x4FuLL);
                            v66 = &byte_1813CEAEE;
                            if (v64) {
                              v66 = v64;
                            }
                            sqlite3_log( 4106,  "os_unix.c:%d: (%d) %s(%s) - %s",  49547,  v65,  "close",  v66,  (const char *)&v115);
                          }

                          return 3338LL;
                        }

                        if ((v106[20] & 1) != 0 && (v106[4] & 1) == 0) {
                          *(_DWORD *)(v6 + 128) |= 1u;
                        }
                        v52 = v31;
                      }

                      else
                      {
                        v52 = v31;
                        v53 = *(_DWORD *)v108.f_fstypename == 1868854125 && v108.f_fstypename[4] == 115;
                        if (v53
                          || (*(_DWORD *)v108.f_fstypename == 1634105445
                            ? (v54 = v108.f_fstypename[4] == 116)
                            : (v54 = 0),
                              v54))
                        {
                          *(_DWORD *)(v6 + 128) |= 1u;
                        }
                      }

                      v55 = v14;
                      if ((v108.f_reserved[0] & 2) != 0) {
                        *(_DWORD *)(v6 + 128) |= 2u;
                      }
                      v56 = 4 * v52;
                      if (v103) {
                        v56 = (4 * (v52 & 0xF)) | 2;
                      }
                      if (v10 != 256) {
                        v56 |= 0x80u;
                      }
                      if (v100) {
                        v56 |= 8u;
                      }
                      v57 = v29 & 0x40 | v56;
                      if (v10 == 256) {
                        v58 = v57 | 4;
                      }
                      else {
                        v58 = v57;
                      }
                      if (v35 && (v4 & 0xFE0FFF20) == 0x120 && *(void *)(v98 + 40))
                      {
                        v59 = getenv("SQLITE_FORCE_PROXY_LOCKING");
                        if (v59)
                        {
                          if (atoi(v59) > 0) {
                            goto LABEL_128;
                          }
                        }

                        else if ((v108.f_flags & 0x1001) == 0)
                        {
LABEL_128:
                          v18 = sub_18126BAE4(v98, v55, v6, v35, v58);
                          if (!(_DWORD)v18)
                          {
                            v60 = *(void *)v6;
                            v18 = sub_1812F4AF0(v6, ":auto:");
                            if ((_DWORD)v18)
                            {
                              if (v60) {
                                (*(void (**)(uint64_t))(v60 + 8))(v6);
                              }
                              else {
                                sub_1812BFBE0(v6);
                              }
                            }

                            return v18;
                          }

                          goto LABEL_173;
                        }
                      }

                      if (v15 && !v102 && (~dword_18C465544 & 0x60) == 0) {
                        v58 |= 0x100u;
                      }
                      if (qword_18C468CC8 == -1)
                      {
                        if ((v58 & 0x100) != 0) {
                          goto LABEL_155;
                        }
                      }

                      else
                      {
                        dispatch_once(&qword_18C468CC8, &unk_189B6D2D8);
                        if ((v58 & 0x100) != 0)
                        {
LABEL_155:
                          for (i = 0LL; i != 26; ++i)
                          {
                            v70 = (const char *)qword_18C5504D0[i];
                            if (!v70) {
                              break;
                            }
                            v71 = strlen((const char *)qword_18C5504D0[i]);
                            if (v71)
                            {
                              v72 = v71;
                              if (strlen(v35) > v71 && !strncmp(v70, v35, v72))
                              {
                                sqlite3_log( 28,  "Skipping vnode guard based on exemption path %s for file: %s",  v70,  v35);
                                v58 &= ~0x100u;
                                goto LABEL_164;
                              }
                            }
                          }

                          if (!fcntl(v55, 96)) {
                            v58 &= ~0x100u;
                          }
                        }
                      }

              ++v108;
              v110 += 26;
              if (v108 >= *v107) {
                goto LABEL_307;
              }
            }

            v377 = *((void *)v110 + 4);
            v116 = *(int **)(*((void *)v110 + 5) + 32LL);
            v117 = *v116;
            if (*v116 < 1)
            {
              v119 = 0;
LABEL_259:
              if (!v39)
              {
LABEL_192:
                v107 = v376;
                goto LABEL_193;
              }

              v107 = v376;
              v111 = v377;
              if (v119) {
                goto LABEL_193;
              }
              goto LABEL_261;
            }

            v118 = 0LL;
            v119 = 0;
LABEL_205:
            if (!sub_181320C98((uint64_t)&v116[6 * v118 + 2], v42, v39, (unsigned __int8 *)v41))
            {
LABEL_203:
              v39 = v381;
              v41 = v385;
              v42 = __srcb;
              goto LABEL_204;
            }

            if (v109 < 1) {
              goto LABEL_227;
            }
            if ((*(_WORD *)((_BYTE *)v110 + 61) & 0x400) == 0
              || (v120 = (unsigned int *)*((void *)v110 + 9), v121 = *v120, (int)v121 < 1))
            {
LABEL_224:
              if (v391[0]) {
                sub_181311F48((void *)v379, (void *)v391[0]);
              }
LABEL_226:
              v391[0] = 0LL;
              goto LABEL_227;
            }

            v122 = 0LL;
LABEL_210:
            v123 = *(_BYTE **)&v120[4 * v122 + 2];
            for (n = __srcb; ; ++n)
            {
              v125 = *v123;
              v126 = *n;
              if ((_DWORD)v125 == (_DWORD)v126)
              {
                if (!*v123)
                {
                  if ((v122 & 0x80000000) != 0) {
                    goto LABEL_224;
                  }
                  if ((v110[15] & 0x10) == 0) {
                    goto LABEL_203;
                  }
                  if ((v110[15] & 8) == 0)
                  {
                    if (v391[0]) {
                      sub_181311F48((void *)v379, (void *)v391[0]);
                    }
                    v109 = 0;
                    goto LABEL_226;
                  }

                  sub_181320E20((uint64_t *)v374, v391, v103, *((__int16 *)v15 + 24));
LABEL_227:
                  ++v109;
                  v39 = v381;
                  *((_DWORD *)v15 + 12) = v118;
                  v127 = &v116[6 * v118];
                  v128 = *(_WORD *)((char *)v127 + 25);
                  *(_WORD *)((char *)v127 + 25) = v128 | 0x40;
                  v41 = v385;
                  v42 = __srcb;
                  if ((v128 & 0x80) != 0)
                  {
                    v105 = 2;
                    v103 = (uint64_t)v110;
                    goto LABEL_192;
                  }

                  v117 = *v116;
                  v119 = 1;
                  v105 = 2;
                  v103 = (uint64_t)v110;
LABEL_204:
                  if (++v118 >= v117) {
                    goto LABEL_259;
                  }
                  goto LABEL_205;
                }
              }

              else if (byte_1813C6343[v125] != byte_1813C6343[v126])
              {
                if (++v122 == v121) {
                  goto LABEL_224;
                }
                goto LABEL_210;
              }

              ++v123;
            }
          }

          v109 = 0;
LABEL_307:
          v40 = v375;
          if (v103)
          {
            *v367 = *(_DWORD *)(v103 + 64);
            v156 = *(void *)(v103 + 32);
            *(void *)v378 = v156;
            v14 = v374;
            v106 = v372;
            v104 = v371;
            if ((*(_BYTE *)(v103 + 60) & 0x48) != 0) {
              *((_DWORD *)v15 + 1) |= 0x200000u;
            }
            v40 = *(void *)(v156 + 96);
            if (v109) {
              goto LABEL_396;
            }
          }

          else
          {
            v14 = v374;
            v106 = v372;
            v104 = v371;
            if (v109) {
              goto LABEL_396;
            }
          }
        }

        else
        {
          v109 = 0;
        }

        if (v41) {
          goto LABEL_396;
        }
        v157 = *(unsigned __int8 ***)v368;
        if (*(void *)v368)
        {
          v158 = *(unsigned __int8 *)(v14 + 218);
          if (!*(_BYTE *)(v14 + 219))
          {
            if (v39 && v158 != 128)
            {
              v164 = v39;
              for (ii = "new"; ; ++ii)
              {
                v166 = *(unsigned __int8 *)ii;
                v167 = *v164;
                if ((_DWORD)v166 == (_DWORD)v167)
                {
                  if (!*ii)
                  {
                    v168 = 1;
                    goto LABEL_342;
                  }
                }

                else if (byte_1813C6343[v166] != byte_1813C6343[v167])
                {
                  break;
                }

                ++v164;
              }
            }

            v163 = 0LL;
            if (v39 && v158 != 127)
            {
              v169 = v39;
              for (jj = "old"; ; ++jj)
              {
                v171 = *(unsigned __int8 *)jj;
                v172 = *v169;
                if ((_DWORD)v171 == (_DWORD)v172)
                {
                  if (!*jj)
                  {
                    v168 = 0;
                    goto LABEL_342;
                  }
                }

                else if (byte_1813C6343[v171] != byte_1813C6343[v172])
                {
                  goto LABEL_323;
                }

                ++v169;
              }
            }

            goto LABEL_343;
          }

          if ((*(_BYTE *)(v106 + 41) & 4) != 0)
          {
            if (v39)
            {
              v159 = *v157;
              for (kk = v39; ; ++kk)
              {
                v161 = *kk;
                v162 = *v159;
                if ((_DWORD)v161 == (_DWORD)v162)
                {
                  if (!*kk) {
                    break;
                  }
                }

                else if (byte_1813C6343[v161] != byte_1813C6343[v162])
                {
                  goto LABEL_323;
                }

                ++v159;
              }
            }

            v168 = v158 != 128;
LABEL_342:
            *v367 = v168;
            v163 = v157;
LABEL_343:
            if (!v39) {
              goto LABEL_352;
            }
LABEL_344:
            if ((*(_DWORD *)(v106 + 40) & 0x200) != 0)
            {
              v173 = *(void *)(v106 + 16);
              if (v173)
              {
                v174 = v39;
                for (mm = "excluded"; ; ++mm)
                {
                  v176 = *(unsigned __int8 *)mm;
                  v177 = *v174;
                  if ((_DWORD)v176 == (_DWORD)v177)
                  {
                    if (!*mm)
                    {
                      v163 = *(unsigned __int8 ***)(*(void *)(v173 + 64) + 40LL);
                      *v367 = 2;
                      goto LABEL_352;
                    }
                  }

                  else if (byte_1813C6343[v176] != byte_1813C6343[v177])
                  {
                    goto LABEL_352;
                  }

                  ++v174;
                }
              }
            }

            goto LABEL_352;
          }
        }

int sqlite3_initialize(void)
{
  if (!(_DWORD)qword_18C4654D4)
  {
    uint64_t v1 = os_unfair_recursive_lock_lock_with_options();
    int v0 = 0;
    if (qword_18C4654D4) {
      goto LABEL_75;
    }
    if (!qword_18C4653F0)
    {
      BOOL v2 = word_18C465384 == 0;
      if ((_BYTE)word_18C465384) {
        v3 = sub_1812F1B70;
      }
      else {
        v3 = sub_1812F20B0;
      }
      xmmword_18C4653E0 = (uint64_t (*)(void))v3;
      if ((_BYTE)word_18C465384) {
        v4 = sub_1812F1B78;
      }
      else {
        v4 = sub_1812F20B8;
      }
      *(&xmmword_18C4653E0 + 1) = (uint64_t (*)(void))v4;
      if ((_BYTE)word_18C465384) {
        v5 = (uint64_t (*)(void))sub_1812F1CA8;
      }
      else {
        v5 = nullsub_4;
      }
      off_18C4653F8 = v5;
      if ((_BYTE)word_18C465384) {
        v6 = sub_1812F1E28;
      }
      else {
        v6 = (uint64_t (*)(uint64_t))nullsub_5;
      }
      xmmword_18C465400 = v6;
      if ((_BYTE)word_18C465384) {
        v7 = sub_1812F1EA4;
      }
      else {
        v7 = (uint64_t (*)(void))sub_1812F20D0;
      }
      *(&xmmword_18C465400 + 1) = v7;
      if ((_BYTE)word_18C465384) {
        v8 = sub_1812F1EDC;
      }
      else {
        v8 = (void (*)(uint64_t))nullsub_6;
      }
      qword_18C465420 = 0LL;
      *(_OWORD *)&xmmword_18C465410 = (unint64_t)v8;
      __dmb(0xBu);
      v9 = (uint64_t (*)(void))sub_1812F1B80;
      if (v2) {
        v9 = (uint64_t (*)(void))sub_1812F20C0;
      }
      qword_18C4653F0 = v9;
    }

    int v0 = xmmword_18C4653E0(v1);
    __dmb(0xBu);
    if (v0) {
      goto LABEL_75;
    }
    if ((_BYTE)word_18C465384)
    {
      uint64_t v10 = qword_18C4653F0(2LL);
      uint64_t v11 = v10;
      if (v10)
      {
        xmmword_18C465400(v10);
        char v12 = 0;
LABEL_32:
        dword_18C4654DC = 1;
        if (!dword_18C4654E0)
        {
          if (!qword_18C4653A0) {
            sqlite3_config(4, &off_189B6EB20);
          }
          if ((_BYTE)word_18C465384) {
            uint64_t v14 = qword_18C4653F0(3LL);
          }
          else {
            uint64_t v14 = 0LL;
          }
          *(void *)&xmmword_18C468B70 = v14;
          if (!qword_18C4654B8 || dword_18C4654C0 < 512 || dword_18C4654C4 <= 0)
          {
            qword_18C4654B8 = 0LL;
            dword_18C4654C0 = 0;
          }

          int v16 = off_18C4653C8(qword_18C4653D8);
          if (v16)
          {
            int v0 = v16;
            int v13 = 0;
            xmmword_18C468B70 = 0u;
            *(_OWORD *)&qword_18C468B80 = 0u;
            goto LABEL_50;
          }
        }

        dword_18C4654E0 = 1;
        if (!qword_18C4654F0)
        {
          if ((_BYTE)word_18C465384)
          {
            uint64_t v15 = qword_18C4653F0(1LL);
            qword_18C4654F0 = v15;
            if ((_BYTE)word_18C465384 && !v15)
            {
              int v13 = 0;
              int v0 = 7;
              goto LABEL_50;
            }
          }

          else
          {
            qword_18C4654F0 = 0LL;
          }
        }

        int v0 = 0;
        ++dword_18C4654E8;
        int v13 = 1;
LABEL_50:
        if ((v12 & 1) == 0) {
          xmmword_18C465410(v11);
        }
        if (v13)
        {
          if (qword_18C4654F0) {
            xmmword_18C465400(qword_18C4654F0);
          }
          if (qword_18C4654D4)
          {
            int v0 = 0;
          }

          else
          {
            HIDWORD(qword_18C4654D4) = 1;
            sub_18134A4F4();
            sub_1813C327C();
            qword_18C468C80 = 0LL;
            xmmword_18C468C60 = 0u;
            unk_18C468C70 = 0u;
            xmmword_18C468C40 = 0u;
            unk_18C468C50 = 0u;
            xmmword_18C468C20 = 0u;
            unk_18C468C30 = 0u;
            xmmword_18C468C00 = 0u;
            unk_18C468C10 = 0u;
            xmmword_18C468BE0 = 0u;
            unk_18C468BF0 = 0u;
            xmmword_18C468BD0 = 0u;
            sub_1812DEBE0();
            if (dword_18C4654E4 || (int v0 = sub_1812DF0C4()) == 0)
            {
              dword_18C4654E4 = 1;
              int v0 = sub_1812DF138();
              if (!v0)
              {
                int v0 = sub_1812DF200();
                if (!v0)
                {
                  sub_1812DF384((void *)qword_18C4654B8, dword_18C4654C0, dword_18C4654C4);
                  __dmb(0xBu);
                  LODWORD(qword_18C4654D4) = 1;
                }
              }
            }

            HIDWORD(qword_18C4654D4) = 0;
          }

          if (qword_18C4654F0) {
            xmmword_18C465410(qword_18C4654F0);
          }
          if ((v12 & 1) == 0) {
            xmmword_18C465400(v11);
          }
          BOOL v17 = __OFSUB__(dword_18C4654E8--, 1);
          if ((dword_18C4654E8 < 0) ^ v17 | (dword_18C4654E8 == 0))
          {
            if (qword_18C4654F0) {
              off_18C4653F8();
            }
            qword_18C4654F0 = 0LL;
          }

          if ((v12 & 1) == 0) {
            xmmword_18C465410(v11);
          }
        }

LABEL_75:
        os_unfair_recursive_lock_unlock();
        return v0;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    char v12 = 1;
    goto LABEL_32;
  }

  return 0;
}

            v42 = v41 > v20;
            if (v42) {
              v19 = v26;
            }
            v26 = (char *)*((void *)v26 + 2);
            if (!v26) {
              goto LABEL_31;
            }
          }

          v44 = 4;
          goto LABEL_82;
        }
      }

      else if (byte_1813C6343[v39] != byte_1813C6343[v40])
      {
        v26 = (char *)*((void *)v26 + 8);
        if (!v26)
        {
          v20 = 0;
          break;
        }

        goto LABEL_60;
      }

      ++v37;
    }
  }

          *(void *)(v24 + 64) = v25;
          goto LABEL_76;
        }
      }

      else
      {
        v25 = *(void *)(v22 + 64);
        if (v25) {
          goto LABEL_71;
        }
      }

      *(void *)(v23 + 8) = v24;
      if (v24) {
        goto LABEL_75;
      }
      *(void *)v23 = 0LL;
      *(_BYTE *)(v23 + 49) = 2;
LABEL_76:
      *(_WORD *)(v22 + 52) = *(_WORD *)(v22 + 52) & 0xFFF0 | 1;
      if (!*(void *)(v22 + 56) && *(_BYTE *)(v23 + 48)) {
        xmmword_18C465468(*(void *)(v23 + 72), *(void *)v22, 0LL);
      }
      v22 = *v21;
      if (!*v21)
      {
        v21 = *(uint64_t **)(a1 + 336);
        goto LABEL_110;
      }
    }
  }

  v19 = *(void *)(a1 + 344);
  if (v19)
  {
LABEL_51:
    if (*(_BYTE *)(v19 + 64))
    {
      if (!*(_BYTE *)(v19 + 63)) {
        (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v19 + 8) + 112LL))( *(void *)(v19 + 8),  0LL,  1LL,  9LL);
      }
      *(_BYTE *)(v19 + 64) = 0;
      *(_DWORD *)(v19 + 124) = 0;
      *(_BYTE *)(v19 + 67) = 0;
    }

    goto LABEL_55;
  }

          *v46 = v28;
          goto LABEL_76;
        }

          v38 = *(_WORD *)(v24 + 20);
          if ((v38 & 0x2C) != 0)
          {
            v38 &= ~2u;
            *(_WORD *)(v24 + 20) = v38;
          }

          if ((_DWORD)a3 != 1)
          {
            if ((v38 & 2) == 0)
            {
              v23 = 0LL;
              *(_BYTE *)(v24 + 22) = a3;
LABEL_124:
              *a5 = v24;
              return v23;
            }

            if (*(unsigned __int8 *)(v24 + 22) != (_DWORD)a3)
            {
              v23 = sub_1812C23E8((int *)v24, a3);
              goto LABEL_124;
            }
          }

    v39 |= v40;
    ++v38;
  }

  while (v38 < v37);
  v35 = (void *)*((void *)a2 + 9);
  v47 = (int *)v35[3];
  if (!v47) {
    goto LABEL_114;
  }
LABEL_94:
  v48 = *v47;
  if (*v47 < 1)
  {
LABEL_114:
    v50 = 0LL;
    v58 = (unsigned __int8 *)v35[9];
    if (v58) {
      goto LABEL_117;
    }
    goto LABEL_129;
  }

  v49 = 0LL;
  v50 = 0LL;
  do
  {
    v52 = *(unsigned __int8 **)&v47[6 * v49 + 2];
    if (!v52)
    {
LABEL_97:
      v51 = 0LL;
      goto LABEL_98;
    }

    if (*v52 == 167 && (*((_DWORD *)v52 + 1) & 0x20) == 0)
    {
      v54 = *((_DWORD *)v52 + 11);
      if (a1[2] == v54)
      {
        v51 = 1LL;
      }

      else
      {
        v55 = a1[1];
        v56 = 0LL;
        v57 = v55 - 1;
        while (a1[v56 + 3] != v54)
        {
          if (v57 == ++v56) {
            goto LABEL_97;
          }
        }

        v51 = 1LL << (v56 + 1);
      }
    }

    else
    {
      if ((*((_DWORD *)v52 + 1) & 0x810000) != 0) {
        goto LABEL_97;
      }
      v51 = sub_181332EB0(a1);
      v48 = *v47;
    }

                  int v16 = 1;
                  goto LABEL_40;
                }
              }

      if (a2 == 1)
      {
        v50 = (uint64_t)*a3;
        if (*a3)
        {
          v51 = *(_WORD *)(v50 + 20);
          if ((v51 & 0x24) != 0)
          {
            v52 = *(void *)v50;
LABEL_87:
            v58 = sub_18139B7E0(a1[5], v52, 0LL);
            goto LABEL_88;
          }

          if ((v51 & 8) != 0)
          {
            v70 = *(double *)v50;
            if (*(double *)v50 >= -9.22337204e18)
            {
              if (v70 <= 9.22337204e18) {
                v52 = (uint64_t)v70;
              }
              else {
                v52 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              v52 = 0x8000000000000000LL;
            }

            goto LABEL_87;
          }

          if ((v51 & 0x12) != 0 && *(void *)(v50 + 8))
          {
            v52 = sub_181303DF0(v50);
            goto LABEL_87;
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        v52 = 0LL;
        goto LABEL_87;
      }

      v53 = sqlite3_value_numeric_type(a3[1]);
      if ((v53 & 0xFB) != 1)
      {
        uint64_t v15 = 20LL;
        goto LABEL_234;
      }

      v54 = v53;
      if (v12 == 1)
      {
        v55 = (uint64_t)*a3;
        if (*a3)
        {
          v56 = *(_WORD *)(v55 + 20);
          if ((v56 & 0x24) != 0)
          {
            v57 = *(void *)v55;
            goto LABEL_126;
          }

          if ((v56 & 8) != 0)
          {
            v77 = *(double *)v55;
            if (*(double *)v55 >= -9.22337204e18)
            {
              if (v77 <= 9.22337204e18) {
                v57 = (uint64_t)v77;
              }
              else {
                v57 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              v57 = 0x8000000000000000LL;
            }

int sqlite3_config(int a1, ...)
{
  uint64_t v26 = va_arg(va, void);
  unint64_t v27 = va_arg(va, void);
  uint64_t v28 = va_arg(va, void);
  int v1 = a1 - 1;
  int result = 0;
  switch(v1)
  {
    case 0:
      sub_1812CF36C(185610);
      goto LABEL_6;
    case 1:
      int result = 0;
      word_18C465384 = 1;
      return result;
    case 2:
      int result = 0;
      word_18C465384 = 257;
      return result;
    case 3:
      int result = 0;
      __int128 v3 = *(_OWORD *)v26;
      __int128 v4 = *(_OWORD *)(v26 + 16);
      __int128 v5 = *(_OWORD *)(v26 + 32);
      __int128 v6 = *(_OWORD *)(v26 + 48);
      v7 = &qword_18C4653A0;
      goto LABEL_14;
    case 4:
      if (!qword_18C4653A0) {
        sqlite3_config(4, &off_189B6EB20);
      }
      int result = 0;
      v7 = (_OWORD *)v26;
      __int128 v3 = *(_OWORD *)&qword_18C4653A0;
      __int128 v4 = *(_OWORD *)&off_18C4653B0;
      __int128 v5 = *(_OWORD *)&unk_18C4653C0;
      __int128 v6 = *(_OWORD *)&off_18C4653D0;
LABEL_14:
      v7[2] = v5;
      v7[3] = v6;
      _OWORD *v7 = v3;
      v7[1] = v4;
      break;
    case 6:
      int result = 0;
      qword_18C4654B8 = v26;
      dword_18C4654C0 = v27;
      dword_18C4654C4 = v28;
      break;
    case 8:
      int result = 0;
      dword_18C465380 = v26;
      break;
    case 9:
      int result = 0;
      xmmword_18C4653E0 = *(_OWORD *)v26;
      __int128 v8 = *(_OWORD *)(v26 + 16);
      __int128 v9 = *(_OWORD *)(v26 + 32);
      __int128 v10 = *(_OWORD *)(v26 + 48);
      qword_18C465420 = *(void *)(v26 + 64);
      *(_OWORD *)&xmmword_18C465400 = v9;
      *(_OWORD *)&xmmword_18C465410 = v10;
      *(_OWORD *)&qword_18C4653F0 = v8;
      break;
    case 10:
      int result = 0;
      *(_OWORD *)uint64_t v26 = xmmword_18C4653E0;
      __int128 v11 = *(_OWORD *)&qword_18C4653F0;
      __int128 v12 = *(_OWORD *)&xmmword_18C465400;
      __int128 v13 = *(_OWORD *)&xmmword_18C465410;
      *(void *)(v26 + 64) = qword_18C465420;
      *(_OWORD *)(v26 + 32) = v12;
      *(_OWORD *)(v26 + 48) = v13;
      *(_OWORD *)(v26 + 16) = v11;
      break;
    case 12:
      int result = 0;
      dword_18C465394 = v26;
      dword_18C465398 = v27;
      break;
    case 13:
      return result;
    case 15:
      int result = 0;
      off_18C4654F8 = (_UNKNOWN *)v26;
      qword_18C465500 = v27;
      break;
    case 16:
      int result = 0;
      byte_18C465386 = v26;
      break;
    case 17:
      int result = 0;
      __int128 v14 = *(_OWORD *)v26;
      __int128 v15 = *(_OWORD *)(v26 + 32);
      xmmword_18C465438 = *(_OWORD *)(v26 + 16);
      xmmword_18C465448 = v15;
      xmmword_18C465428 = v14;
      __int128 v16 = *(_OWORD *)(v26 + 48);
      __int128 v17 = *(_OWORD *)(v26 + 64);
      __int128 v18 = *(_OWORD *)(v26 + 80);
      off_18C465488 = *(_UNKNOWN **)(v26 + 96);
      *(_OWORD *)&xmmword_18C465468 = v17;
      xmmword_18C465478 = v18;
      xmmword_18C465458 = v16;
      break;
    case 18:
      if (!(void)xmmword_18C465438) {
        sub_1812DF5A8();
      }
      int result = 0;
      __int128 v19 = xmmword_18C465428;
      __int128 v20 = xmmword_18C465448;
      *(_OWORD *)(v26 + 16) = xmmword_18C465438;
      *(_OWORD *)(v26 + 32) = v20;
      *(_OWORD *)uint64_t v26 = v19;
      __int128 v21 = xmmword_18C465458;
      __int128 v22 = *(_OWORD *)&xmmword_18C465468;
      __int128 v23 = xmmword_18C465478;
      *(void *)(v26 + 96) = off_18C465488;
      *(_OWORD *)(v26 + 64) = v22;
      *(_OWORD *)(v26 + 80) = v23;
      *(_OWORD *)(v26 + 48) = v21;
      break;
    case 19:
      int result = 0;
      byte_18C465387 = v26;
      break;
    case 20:
      int result = 0;
      off_18C465508 = (_UNKNOWN *)v26;
      qword_18C465510 = v27;
      break;
    case 21:
      int result = 0;
      unint64_t v24 = v27;
      if (v27 >= 0x1400000) {
        unint64_t v24 = 20971520LL;
      }
      unint64_t v25 = v26 & ~(v26 >> 63);
      if (v25 >= v24) {
        unint64_t v25 = v24;
      }
      qword_18C4654A8 = v25;
      qword_18C4654B0 = v24;
      break;
    case 23:
      int result = 0;
      *(_DWORD *)uint64_t v26 = 272;
      break;
    case 24:
      int result = 0;
      dword_18C4654D0 = v26;
      break;
    case 25:
      int result = 0;
      dword_18C46539C = v26;
      break;
    case 26:
      int result = 0;
      byte_18C465388 = v26;
      break;
    case 28:
      int result = 0;
      qword_18C465518 = v26;
      break;
    default:
LABEL_6:
      int result = 1;
      break;
  }

  return result;
}

uint64_t sub_181268610()
{
  if ((byte_18C468D00 & 1) == 0)
  {
    int v0 = getenv("SQLITE_MALLOC_ZONE");
    if (!v0) {
      goto LABEL_7;
    }
    int v1 = v0;
    if (!strcmp(v0, "none")) {
      goto LABEL_14;
    }
    if (!strcmp(v1, "default"))
    {
      qword_18C5506A8 = (uint64_t)malloc_default_zone();
      goto LABEL_14;
    }

    if (!strcmp(v1, "custom")) {
      goto LABEL_10;
    }
    fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Invalid parameter to environment variable SQLITE_MALLOC_ZONE: %s. Supported values are default and custom\n",  v1);
    if ((byte_18C468D00 & 1) == 0)
    {
LABEL_7:
      BOOL v2 = getprogname();
      if (v2 && !strncmp("homed", v2, 5uLL))
      {
        zone = malloc_create_zone(0x1000uLL, 0);
        qword_18C5506A8 = (uint64_t)zone;
        __int128 v4 = "Sqlite_Heap_homed";
        goto LABEL_13;
      }

      size_t v6 = 4LL;
      sysctlbyname("hw.ncpu", &v7, &v6, 0LL, 0LL);
      if (v7 <= 1)
      {
LABEL_10:
        zone = malloc_create_zone(0x1000uLL, 0);
        qword_18C5506A8 = (uint64_t)zone;
        __int128 v4 = "Sqlite_Heap";
LABEL_13:
        malloc_set_zone_name(zone, v4);
      }

LABEL_14:
      byte_18C468D00 = 1;
    }
  }

  return 0LL;
}

  __int128 v17 = 1LL;
  if ((_DWORD)v23 != 1 && *v22)
  {
    unint64_t v24 = "temporary table name must be unqualified";
LABEL_19:
    sub_1812DC47C(a1, v24, a3, a4, a5, a6, a7, a8, a9);
    return;
  }

  if (*v8 <= 6u)
  {
    __int128 v17 = (void *)*((void *)v9 + 9);
    if (!v17)
    {
LABEL_22:
      *((_DWORD *)v9 + 1) = *((_DWORD *)v9 + 1) & 0xFFBFFFFE | 0x400000;
      goto LABEL_23;
    }

    if (*a1)
    {
      __int128 v18 = (void *)sub_1812F2264((uint64_t)*a1, 0x18uLL);
      if (v18)
      {
LABEL_18:
        *__int128 v18 = a1[24];
        a1[24] = v18;
        v18[1] = v17;
        v18[2] = sub_18128FF40;
LABEL_21:
        *((void *)v9 + 9) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      __int128 v18 = (void *)sub_18126F0AC(24LL);
      if (v18) {
        goto LABEL_18;
      }
    }

    sub_181311F48(*a1, v17);
    goto LABEL_21;
  }

    ++v8;
    ++v7;
  }

  if (byte_1813C6343[v9] == byte_1813C6343[v10]) {
    goto LABEL_14;
  }
  for (i = "false"; ; ++i)
  {
    __int128 v16 = *v6;
    __int128 v17 = *(unsigned __int8 *)i;
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      if (byte_1813C6343[v16] == byte_1813C6343[v17]) {
        goto LABEL_33;
      }
LABEL_4:
      if ((*(_BYTE *)(a2 + 4) & 0x20) != 0)
      {
        if (v2 != 2) {
          return 0LL;
        }
      }

      else if (v2 == 3 && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 40))
      {
        return 0LL;
      }

  __int128 v14 = v24;
  if (v11 > v24) {
    goto LABEL_30;
  }
  __int128 v15 = &v8[v11 - 1];
  __int128 v16 = *v15;
  if (*v15 < 0)
  {
    __int128 v17 = v15[1];
    if (v15[1] < 0)
    {
      __int128 v18 = v15[2];
      if (v18 < 0)
      {
        sub_18129BD74(v15, v21);
        if (HIDWORD(v21[0])) {
          __int128 v16 = -1;
        }
        else {
          __int128 v16 = v21[0];
        }
      }

      else
      {
        __int128 v16 = v18 & 0x7F | (v16 << 14) & 0x1FC07F | ((v17 & 0x7F) << 7);
      }
    }

    else
    {
      __int128 v16 = ((v16 & 0x7F) << 7) | v17;
    }
  }

  __int128 v20 = byte_1813C6D70[v16];
  if (v14 < v11 + v20) {
    goto LABEL_30;
  }
  sub_18129BF0C(&v8[v14 - v20], v16, (uint64_t)v21);
  *a3 = v21[0];
  if (v27) {
    sub_181303838((uint64_t)v22);
  }
  return 0LL;
}

  uint64_t v28 = *(_BYTE **)v27;
  for (i = *(unsigned __int8 **)(a2 + 96); ; ++i)
  {
    v30 = *v28;
    v31 = *i;
    if ((_DWORD)v30 == (_DWORD)v31) {
      break;
    }
    if (byte_1813C6343[v30] != byte_1813C6343[v31])
    {
      unint64_t v27 = *(void *)(v27 + 40);
      if (!v27) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

  return v12;
}

    int v7 = 0LL;
    goto LABEL_15;
  }

  if (!v6)
  {
    int v7 = "none";
    goto LABEL_15;
  }

  if (v6 == 256)
  {
    int v7 = "LZ4";
    goto LABEL_15;
  }

  if (v6 != 257) {
    goto LABEL_14;
  }
  int v7 = "LZ4_RAW";
LABEL_15:
  snprintf( v4,  0x400uLL,  "%s,%u,%u,0x%llx,0x%llx,0x%llx,%lu,0x%llx,%s\n",  "SQLite ARCHIVE_APPLE_1",  *(_DWORD *)a2,  *(_DWORD *)(a2 + 4),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  v6,  *(void *)(a2 + 32),  *(void *)(a2 + 40),  v7);
  __int128 v8 = strlen(v5);
  write(a1, v5, v8);
  free(v5);
}

  int result = 0LL;
  *((_WORD *)a1 + 10) = v2 & 0xBFFF;
  return result;
}

  __int128 v5 = 0LL;
  if (sqlite3_initialize()) {
    return 7LL;
  }
LABEL_15:
  size_t v6 = (uint64_t *)sub_18126F0AC(64LL);
  if (!v6) {
    return 7LL;
  }
  int v7 = v6;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)size_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  __int128 v8 = v6 + 1;
  __int128 v9 = strlen(__s);
  __int128 v10 = sqlite3_initialize();
  __int128 v11 = v8;
  if (!v10)
  {
    __int128 v20 = (_BYTE *)sub_18126F0AC((uint64_t)((v9 << 32) + 0x800000000LL) >> 32);
    *__int128 v8 = v20;
    if (!v20) {
      goto LABEL_18;
    }
    __int128 v21 = v20;
    memcpy(v20, __s, (uint64_t)((v9 << 32) + 0x100000000LL) >> 32);
    __int128 v22 = (v9 & ((int)v9 >> 31)) - 1;
    __int128 v23 = v9 - 1LL;
    unint64_t v24 = v9;
    while (1)
    {
      unint64_t v25 = __OFSUB__(v24--, 1);
      if (v24 < 0 != v25) {
        break;
      }
      uint64_t v26 = v21[v23--];
      if (v26 == 47)
      {
        __int128 v22 = v24 + 1;
        break;
      }
    }

    unint64_t v27 = v22;
    v21[v22] = 46;
    if (v22 >= (int)v9)
    {
LABEL_71:
      strcpy(&v21[v22 + 1], "-conch");
      BOOL v2 = sub_1812F5B20((char *)v7[1], v7, 0);
      if ((_DWORD)v2 == 14)
      {
        if ((*(_BYTE *)(a1 + 120) & 2) != 0)
        {
          BOOL v2 = 14LL;
          goto LABEL_19;
        }

        if (off_18C54FD28(*v8, v49) == -1
          && *__error() == 2
          && statfs(__s, &v50) != -1
          && (v50.f_flags & 1) != 0)
        {
          BOOL v2 = 0LL;
          *((_DWORD *)v7 + 10) = -1;
          if (!v5) {
            goto LABEL_85;
          }
          goto LABEL_79;
        }

        BOOL v2 = 14LL;
      }

      if (!v5) {
        goto LABEL_85;
      }
LABEL_79:
      if (!(_DWORD)v2)
      {
        v43 = strlen(v5) + 1;
        v44 = (void *)sub_18126F0AC(v43);
        if (!v44)
        {
          __int128 v11 = v7 + 3;
          goto LABEL_17;
        }

        v45 = (uint64_t)v44;
        memcpy(v44, v5, v43);
        v7[3] = v45;
LABEL_86:
        v46 = strlen(__s) + 1;
        v47 = (void *)sub_18126F0AC(v46);
        if (v47)
        {
          v48 = (uint64_t)v47;
          memcpy(v47, __s, v46);
          BOOL v2 = 0LL;
          v7[4] = v48;
          v7[6] = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v7;
          v7[7] = *(void *)a1;
          *(void *)a1 = &unk_189B6D220;
          return v2;
        }

        __int128 v11 = v7 + 4;
        goto LABEL_17;
      }

  if (WORD2(v12) == 2) {
    return 0LL;
  }
  int result = 1LL;
  if (a1 != -1 && (_DWORD)v12 != a1) {
    return 0LL;
  }
  return result;
}

  sub_1812B963C(a1);
  return 0LL;
}

  if (*(_BYTE *)(a1 + 17))
  {
    __int128 v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11) {
      sub_1812FDEFC(a1);
    }
  }

  return v10;
}

      __int128 v15 = 0LL;
      goto LABEL_21;
    }

  *(_WORD *)(a1 + 52) |= 8u;
  __int128 v16 = *(void *)(v2 + 80);
  uint64_t v28 = bswap32(*(_DWORD *)(a1 + 48));
  __int128 v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v16 + 24LL))( v16,  &v28,  4LL,  v3);
  if (!(_DWORD)v5)
  {
    __int128 v17 = v3 + 4;
    __int128 v5 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(v2 + 80) + 24LL))( *(void *)(v2 + 80),  v6,  *(unsigned int *)(v2 + 200),  v17);
    if (!(_DWORD)v5)
    {
      __int128 v18 = *(void *)(v2 + 80);
      __int128 v19 = v17 + *(void *)(v2 + 200);
      v29 = bswap32(v7);
      __int128 v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v18 + 24LL))( v18,  &v29,  4LL,  v19);
      if (!(_DWORD)v5)
      {
        *(void *)(v2 + 96) += *(void *)(v2 + 200) + 8LL;
        ++*(_DWORD *)(v2 + 52);
        __int128 v20 = sub_1812B8E48(*(unsigned int **)(v2 + 64), *(_DWORD *)(a1 + 48));
        __int128 v21 = *(_DWORD *)(v2 + 128);
        if (v21 < 1)
        {
          unint64_t v24 = 0;
        }

        else
        {
          __int128 v22 = 0LL;
          __int128 v23 = 0LL;
          unint64_t v24 = 0;
          unint64_t v25 = *(_DWORD *)(a1 + 48);
          do
          {
            uint64_t v26 = *(void *)(v2 + 120) + v22;
            if (*(_DWORD *)(v26 + 24) >= v25)
            {
              v24 |= sub_1812B8E48(*(unsigned int **)(v26 + 16), v25);
              __int128 v21 = *(_DWORD *)(v2 + 128);
            }

            ++v23;
            v22 += 56LL;
          }

          while (v23 < v21);
        }

        return v24 | v20;
      }
    }
  }

  return v5;
}

  int result = ((uint64_t (*)(void, void, void, uint64_t))*(&xmmword_18C465468 + 1))( *(void *)(v4 + 72),  *(void *)a1,  *(unsigned int *)(a1 + 48),  a2);
  *(_DWORD *)(a1 + 48) = a2;
  __int128 v12 = *(unsigned __int16 *)(a1 + 52);
  if ((~v12 & 0xA) != 0) {
    return result;
  }
  __int128 v13 = *(uint64_t **)(a1 + 24);
  __int128 v14 = v13[2];
  __int128 v15 = *(void *)(a1 + 72);
  if (v14 == a1)
  {
    v13[2] = v15;
    __int128 v14 = v15;
  }

  __int128 v16 = *(void *)(a1 + 64);
  if (!v16)
  {
    v13[1] = v15;
    if (!v15)
    {
      *((_BYTE *)v13 + 49) = 2;
      *(void *)(a1 + 64) = 0LL;
      *(void *)(a1 + 72) = 0LL;
      goto LABEL_24;
    }

  *(void *)(a1 + 24) = 0LL;
  if (v5)
  {
    *(_DWORD *)(a1 + 4) = v5;
  }

  else if (!*(_DWORD *)(a1 + 4))
  {
    return 0LL;
  }

  if (*(_BYTE *)a1) {
    return 0LL;
  }
  int result = 0LL;
  *(_BYTE *)a1 = 2;
  return result;
}

  if ((int)v15 >= 1)
  {
    __int128 v17 = 0LL;
    __int128 v18 = 1LL;
    while (1)
    {
      __int128 v20 = (unsigned __int8 *)sub_181332D98((uint64_t)a1, a4, v17, v15);
      if (!v20) {
        goto LABEL_18;
      }
      if (!v10) {
        break;
      }
      __int128 v21 = *v10;
      if (v10[1] <= *v10)
      {
        __int128 v22 = sub_18133E1F4(*a1, v10, v20);
        goto LABEL_24;
      }

      *__int128 v10 = v21 + 1;
      __int128 v19 = &v10[6 * v21];
      *((void *)v19 + 2) = 0LL;
      *((void *)v19 + 3) = 0LL;
      *((void *)v19 + 1) = v20;
LABEL_17:
      *(void *)&v10[6 * *v10 - 2] = a3[v18];
      a3[v18] = 0LL;
LABEL_18:
      ++v17;
      __int128 v15 = *(int *)a3;
      v18 += 2LL;
      if (v17 >= v15) {
        goto LABEL_26;
      }
    }

    __int128 v22 = (int *)sub_18133E190((void *)*a1, v20);
LABEL_24:
    __int128 v10 = v22;
    if (!v22) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

    __int128 v22 = *(void *)(v16 + 32 * v19 + 24);
    __int128 v23 = *(void *)(v22 + 72);
    if (v23)
    {
      unint64_t v24 = *v15;
      if (*v15)
      {
        unint64_t v25 = 0;
        a4 = (uint64_t)(v15 + 1);
        do
        {
          unint64_t v25 = -1640531535 * (v25 + byte_1813C6343[v24]);
          uint64_t v26 = *(unsigned __int8 *)a4++;
          unint64_t v24 = v26;
        }

        while (v26);
      }

      else
      {
        unint64_t v25 = 0;
      }

      v30 = *(_DWORD *)(v22 + 56);
      n = v25 / v30;
      v31 = (_DWORD *)(v23 + 16LL * (v25 % v30));
      __int128 v17 = (uint64_t *)(v31 + 2);
      v29 = *v31;
      if (!v29) {
        goto LABEL_5;
      }
      while (1)
      {
LABEL_30:
        __int128 v17 = (uint64_t *)*v17;
        v32 = (_BYTE *)v17[3];
        for (n = a2[3]; ; ++n)
        {
          a4 = *v32;
          a5 = *(unsigned __int8 *)n;
          if ((_DWORD)a4 != (_DWORD)a5) {
            break;
          }
          if (!*v32) {
            goto LABEL_6;
          }
LABEL_32:
          ++v32;
        }

        a4 = byte_1813C6343[a4];
        a5 = byte_1813C6343[a5];
        if ((_DWORD)a4 == (_DWORD)a5) {
          goto LABEL_32;
        }
        if (!--v29) {
          goto LABEL_5;
        }
      }
    }

    __int128 v17 = (uint64_t *)(v22 + 64);
    v29 = *(_DWORD *)(v22 + 60);
    if (v29) {
      goto LABEL_30;
    }
LABEL_5:
    __int128 v17 = &qword_18C550660;
LABEL_6:
    __int128 v18 = (uint64_t *)v17[2];
    if (!v18) {
      goto LABEL_7;
    }
    sub_1813256F8(a1, v18, n, a4, a5, a6, a7, a8);
  }

  return sub_18128FF4C((void *)v9, a2);
}

  v33 = v85 + 16 * v20;
  v36 = *(_WORD *)(v33 + 14);
  v35 = (_WORD *)(v33 + 14);
  v34 = v36;
  if ((v36 & 1) != 0)
  {
    v37 = "Cannot add a PRIMARY KEY column";
    goto LABEL_18;
  }

  if (*(void *)(v12 + 16))
  {
    v37 = "Cannot add a UNIQUE column";
LABEL_18:
    sub_1812DC47C(a1, v37, v25, v26, v27, v28, v29, v30, a9);
    return;
  }

  if ((v34 & 0x60) != 0)
  {
    if ((v34 & 0x40) == 0) {
      goto LABEL_48;
    }
    v39 = "cannot add a STORED column";
    goto LABEL_47;
  }

  if (v22 && **(_BYTE **)(v22 + 16) == 121) {
    __int128 v22 = 0LL;
  }
  if ((*(_BYTE *)(v11 + 49) & 0x40) != 0 && *(void *)(v12 + 72) && v22)
  {
    sub_1812C742C( (uint64_t *)a1,  "SELECT raise(ABORT,%Q) FROM %w.%w",  v25,  v26,  v27,  v28,  v29,  v30,  (char)"Cannot add a REFERENCES column with non-NULL default value");
    goto LABEL_39;
  }

  if ((*(_BYTE *)(v85 + 16 * v20 + 8) & 0xF) == 0 || v22 != 0)
  {
    if (!v22) {
      goto LABEL_48;
    }
LABEL_39:
    v86 = 0LL;
    v50 = v86;
    if (!v86) {
      sub_1812C742C( (uint64_t *)a1,  "SELECT raise(ABORT,%Q) FROM %w.%w",  v44,  v45,  v46,  v47,  v48,  v49,  (char)"Cannot add a column with non-constant default");
    }
    sub_1812D79D4(v50);
    goto LABEL_48;
  }

  v39 = "Cannot add a NOT NULL column with default value NULL";
LABEL_47:
  sub_1812C742C((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM %w.%w", v25, v26, v27, v28, v29, v30, (char)v39);
LABEL_48:
  v83 = (char)v19;
  v84 = (char)v18;
  v51 = *(const void **)a2;
  if (*(void *)a2)
  {
    v52 = *(unsigned int *)(a2 + 8);
    v53 = (void *)sub_1812F2264(v11, v52 + 1);
    if (v53)
    {
      v54 = v53;
      memcpy(v53, v51, v52);
      *((_BYTE *)v54 + v52) = 0;
      if (*(_DWORD *)(a2 + 8) != 1)
      {
        v61 = (unsigned __int8 *)v54 + (*(_DWORD *)(a2 + 8) - 1);
        do
        {
          v62 = *v61;
          if (v62 != 59 && (byte_1813C6558[v62] & 1) == 0) {
            break;
          }
          *v61-- = 0;
        }

        while (v61 > (unsigned __int8 *)v54);
      }

      sub_1812C742C( (uint64_t *)a1,  "UPDATE %w.sqlite_master SET sql = printf('%%.%ds, ',sql) || %Q || substr(sql,1+length(printf('%%.%ds',sql))) WHERE type = 'table' AND name = %Q",  v55,  v56,  v57,  v58,  v59,  v60,  v84);
      sub_1812F20DC((void *)v11, v54);
    }
  }

  v63 = *(void *)(a1 + 16);
  if (v63) {
    goto LABEL_91;
  }
  if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  v63 = sub_1812DC63C((uint64_t *)a1, v24, v25, v26, v27, v28, v29, v30);
  if (v63)
  {
LABEL_91:
    if (*(_BYTE *)(a1 + 31))
    {
      v64 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v64;
      v65 = *(unsigned int *)(a1 + 4LL * v64 + 224);
    }

    else
    {
      v65 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v65;
    }

    v66 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v66)
    {
      sub_18131044C(v63, 99LL, v16, v65, 2LL, v28, v29, v30);
    }

    else
    {
      *(_DWORD *)(v63 + 144) = v66 + 1;
      v67 = *(void *)(v63 + 136) + 40LL * v66;
      *(_DWORD *)v67 = 99;
      *(_DWORD *)(v67 + 4) = v16;
      *(_DWORD *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = 2;
      *(void *)(v67 + 24) = 0LL;
      *(void *)(v67 + 32) = 0LL;
      *(void *)(v67 + 16) = 0LL;
    }

    *(_DWORD *)(v63 + 272) |= 1 << v16;
    v68 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v68)
    {
      sub_18131044C(v63, 86LL, v65, 4294967294LL, 0LL, v28, v29, v30);
    }

    else
    {
      *(_DWORD *)(v63 + 144) = v68 + 1;
      v69 = *(void *)(v63 + 136) + 40LL * v68;
      *(_DWORD *)v69 = 86;
      *(_DWORD *)(v69 + 4) = v65;
      *(_DWORD *)(v69 + 8) = -2;
      *(void *)(v69 + 12) = 0LL;
      *(void *)(v69 + 28) = 0LL;
      *(void *)(v69 + 20) = 0LL;
      *(_DWORD *)(v69 + 36) = 0;
    }

    v70 = *(_DWORD *)(v63 + 144);
    v71 = (v70 + 2);
    if (*(_DWORD *)(v63 + 148) <= v70)
    {
      sub_18131044C(v63, 59LL, v65, v71, 0LL, v28, v29, v30);
    }

    else
    {
      *(_DWORD *)(v63 + 144) = v70 + 1;
      v72 = *(void *)(v63 + 136) + 40LL * v70;
      *(_DWORD *)v72 = 59;
      *(_DWORD *)(v72 + 4) = v65;
      *(_DWORD *)(v72 + 8) = v71;
      *(void *)(v72 + 12) = 0LL;
      *(void *)(v72 + 28) = 0LL;
      *(void *)(v72 + 20) = 0LL;
      *(_DWORD *)(v72 + 36) = 0;
    }

    v73 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v73)
    {
      sub_18131044C(v63, 100LL, v16, 2LL, 3LL, v28, v29, v30);
    }

    else
    {
      *(_DWORD *)(v63 + 144) = v73 + 1;
      v74 = *(void *)(v63 + 136) + 40LL * v73;
      *(_DWORD *)v74 = 100;
      *(_DWORD *)(v74 + 4) = v16;
      *(void *)(v74 + 8) = 0x300000002LL;
      *(void *)(v74 + 24) = 0LL;
      *(void *)(v74 + 32) = 0LL;
      *(void *)(v74 + 16) = 0LL;
    }

    if ((_DWORD)v65)
    {
      v75 = *(unsigned __int8 *)(a1 + 31);
      if (v75 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v75 + 1;
        *(_DWORD *)(a1 + 4 * v75 + 224) = v65;
      }
    }

    sub_18134A24C((uint64_t *)a1, v16, 3, v71, v27, v28, v29, v30);
    if (*(void *)(v12 + 32) || (*(_BYTE *)(v85 + 16 * v20 + 8) & 0xF) != 0 && (*v35 & 0x60) != 0) {
      sub_1812C742C( (uint64_t *)a1,  "SELECT CASE WHEN quick_check GLOB 'CHECK*' THEN raise(ABORT,'CHECK constraint failed') ELSE raise(ABORT,'NOT NUL L constraint failed') END  FROM pragma_quick_check(%Q,%Q) WHERE quick_check GLOB 'CHECK*' OR quick_check GLOB 'NULL*'",  v76,  v77,  v78,  v79,  v80,  v81,  v83);
    }
  }

  unint64_t v24 = v15;
  while (1)
  {
    unint64_t v25 = v24[1];
    if ((v25 & 0x82000) == 0) {
      break;
    }
    if ((v25 & 0x80000) != 0)
    {
      unint64_t v24 = *(unsigned int **)(*((void *)v24 + 4) + 8LL);
      if (!v24)
      {
LABEL_19:
        if (a4) {
          goto LABEL_20;
        }
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v24 = (unsigned int *)*((void *)v24 + 2);
      if (!v24) {
        goto LABEL_19;
      }
    }
  }

  *((_BYTE *)v24 + 2) = *(_BYTE *)v24;
  *(_BYTE *)unint64_t v24 = -80;
  v24[11] = v23;
  v24[1] = v25 & 0xFFFFDFFF;
  if (a4)
  {
LABEL_20:
    int result = (unsigned int *)a4(v12, &v43, a3, a5);
    uint64_t v26 = v32;
    if (!v32) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }

    if (a4[v4]) {
      return 0LL;
    }
  }

  __int128 v13 = 0LL;
  __int128 v14 = &v5[(v4 + 1)];
  __int128 v15 = &v5[v7];
  __int128 v16 = *v15;
  if (*v15)
  {
    do
    {
      if (v16 == 46) {
        break;
      }
      __int128 v16 = v15[++v13];
    }

    while (v15[v13]);
  }

  if (a3)
  {
    if ((_DWORD)v13)
    {
      __int128 v17 = v13 + 1;
      __int128 v18 = a3;
      __int128 v19 = v14;
      while (1)
      {
        __int128 v20 = *v19;
        if (!*v19) {
          break;
        }
        LODWORD(v20) = byte_1813C6343[v20];
        __int128 v21 = byte_1813C6343[*v18];
        if ((_DWORD)v20 != v21) {
          goto LABEL_26;
        }
        ++v19;
        ++v18;
      }

      __int128 v21 = byte_1813C6343[*v18];
LABEL_26:
      if ((_DWORD)v20 != v21) {
        return 0LL;
      }
    }

        if (++v18 != v17) {
          continue;
        }
        break;
      }

  __int128 v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) == 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    __int128 v11 = *(unsigned __int8 **)(v9 + 8);
    __int128 v12 = *(void *)(a3 + 32);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }

  if ((v10 & 1) != 0)
  {
LABEL_21:
    __int128 v11 = 0LL;
    __int128 v12 = *(void *)(a3 + 32);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }

  __int128 v11 = (unsigned __int8 *)sub_181303998((int *)v9, 1);
  __int128 v12 = *(void *)(a3 + 32);
  if (!v12)
  {
LABEL_30:
    __int128 v14 = 0LL;
    __int128 v15 = *(void *)(a3 + 40);
    if (v15) {
      goto LABEL_31;
    }
LABEL_28:
    sub_1812CF36C(89717);
    goto LABEL_29;
  }

  __int128 v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) == 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    __int128 v11 = *(unsigned __int8 **)(v9 + 8);
    __int128 v12 = a3[4];
    if (!v12) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }

  if ((v10 & 1) != 0)
  {
LABEL_21:
    __int128 v11 = 0LL;
    __int128 v12 = a3[4];
    if (!v12) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }

  __int128 v11 = (unsigned __int8 *)sub_181303998((int *)v9, 1);
  __int128 v12 = a3[4];
  if (!v12)
  {
LABEL_29:
    __int128 v14 = 0LL;
    __int128 v15 = a3[5];
    if (!v15) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }

  __int128 v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      __int128 v16 = (unsigned __int8 *)sub_181303998((int *)v14, 1);
      __int128 v17 = a3[4];
      if (v17) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }

  __int128 v8 = v2[3];
  if (v8) {
    MEMORY[0x186E0A728](*MEMORY[0x1895FBBE0], v8, *(void *)(a1 + 8));
  }
  __int128 v9 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v9)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  int result = off_18C4653A8(v2);
  BOOL v2 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    __int128 v9 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
    return (*v9)(v2);
  }

  return result;
}

  __int128 v10 = v1[15];
  if (!v10) {
    goto LABEL_21;
  }
  __int128 v11 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_20;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
  --qword_18C468B10;
  off_18C4653A8(v10);
  __int128 v10 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    __int128 v11 = &xmmword_18C465410;
LABEL_20:
    (*v11)(v10);
  }

  LODWORD(v30) = v20;
  v32 = sqlite3_reset(v21);
  if ((_DWORD)v30 == 101) {
    return v32;
  }
  else {
    return v30;
  }
}

  __int128 v8 = *(uint64_t **)(a2 + 64);
  if (v8)
  {
    __int128 v9 = *v8;
    __int128 v10 = *(void *)(a2 + 40);
    if (!v10) {
      goto LABEL_22;
    }
    __int128 v11 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
      --qword_18C468B10;
      off_18C4653A8(v10);
      __int128 v10 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_22:
        *(void *)(a2 + 40) = 0LL;
        if (v9)
        {
          __int128 v12 = *(const void ***)(v9 + 16);
          __int128 v13 = *(int *)v12;
          __int128 v14 = *(_DWORD *)(v9 + 32);
          __int128 v15 = *(void **)(a2 + 80);
          if (v14 < *(_DWORD *)(a2 + 88)) {
            goto LABEL_24;
          }
          if (v15)
          {
            __int128 v19 = (void (**)(void *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
              --qword_18C468B10;
              off_18C4653A8(v15);
              __int128 v15 = (void *)xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_39;
              }
              __int128 v19 = (void (**)(void *))&xmmword_18C465410;
            }

            (*v19)(v15);
          }

    __int128 v13 = *(int *)(a1 + 48);
    if (sqlite3_initialize() || (__int128 v20 = (_DWORD *)sub_18126F0AC(8 * v13 + 8)) == 0LL)
    {
      __int128 v12 = 7;
      goto LABEL_16;
    }

    __int128 v21 = v20;
    __int128 v22 = *(int *)(a1 + 48) + 1LL;
    bzero(v20, 8 * v22);
    if (*(_DWORD *)(a1 + 508))
    {
      v208 = 0;
    }

    else
    {
      unint64_t v27 = sub_1813636A8((uint64_t *)a1, 16, v214, 0LL);
      if (v27)
      {
        v208 = v27;
        goto LABEL_131;
      }

      v35 = v214[0];
      if (!sub_1812B2390((uint64_t)v214[0], 0))
      {
        v36 = *(void *)(*(void *)v35 + 24LL);
        if (v36) {
          xmmword_18C465410(v36);
        }
      }

      sqlite3_step(v35);
      v208 = sqlite3_reset(v35);
      if (v208)
      {
LABEL_131:
        v56 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v21);
          --qword_18C468B10;
          off_18C4653A8(v21);
          __int128 v21 = (_DWORD *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_17;
          }
          v56 = &xmmword_18C465410;
        }

        (*v56)(v21);
        goto LABEL_17;
      }
    }

    if (a2 < 2 || *(void *)(a1 + 80)) {
      goto LABEL_29;
    }
    v37 = a3[*(int *)(a1 + 48) + 3];
    if (v37)
    {
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v37 + 20)) & 1) == 0) {
        goto LABEL_175;
      }
      v37 = a3[1];
      if (v37)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v37 + 20)) & 1) != 0) {
          goto LABEL_29;
        }
LABEL_175:
        v62 = *a3;
        if (*a3)
        {
          v63 = *(_WORD *)(v62 + 20);
          if (((0xAAAAAAAAAAAAAAAALL >> v63) & 1) != 0)
          {
LABEL_221:
            v76 = *(void *)(a1 + 24);
            if (v76)
            {
              v77 = *(unsigned __int8 *)(v76 + 113);
              switch(v77)
              {
                case 186:
                  goto LABEL_225;
                case 118:
                  v79 = *(unsigned __int8 *)(v76 + 108);
                  if ((v79 - 1) < 5)
                  {
                    if (v79 == 5)
                    {
                      v80 = sub_1813758F8(a1, (sqlite3_stmt *)v37, &v207, v21);
                      __int128 v23 = 1;
                      goto LABEL_238;
                    }

    *__int128 v3 = v7;
  }

  return result;
}

  *(_DWORD *)(v1 + 508) = 0;
  return result;
}

      __int128 v13 = a3[4];
      if (!v13)
      {
        sub_1812CF36C(89717);
        goto LABEL_18;
      }

      __int128 v14 = *(_WORD *)(v13 + 20);
      if ((v14 & 0x24) != 0)
      {
        int v7 = *(double *)v13;
        goto LABEL_19;
      }

      if ((v14 & 8) == 0)
      {
        if ((v14 & 0x12) != 0 && *(void *)(v13 + 8))
        {
          LODWORD(v7) = sub_181303DF0(v13);
          goto LABEL_19;
        }

      __int128 v10 = a3 - *((void *)v11 + 1);
LABEL_7:
      int result = sub_18138A828(v3, (uint64_t)(v11 + 4), v10);
      v11[1] = 1;
      *((void *)v11 + 1) = a3;
      ++v7;
      if (*v3 | v15) {
        return result;
      }
    }

    **((_BYTE **)v11 + 2) = 1;
    sub_181389984( (unsigned __int8 *)v6,  (v7 << 31) + ((unint64_t)*a2 << 37) + 0x1000000000LL + *v11,  *((char **)v11 + 2),  v11[6]);
    if (*(_DWORD *)(v6 + 60)) {
      goto LABEL_10;
    }
    __int128 v17 = v7 + 2;
    __int128 v14 = *((void *)a2 + 11);
    if ((int)a2[21] <= (int)v7 + 2)
    {
      if (sqlite3_initialize() || (uint64_t v26 = sub_18127D33C(v14, 32 * v17)) == 0)
      {
        *__int128 v3 = 7;
LABEL_10:
        __int128 v14 = *((void *)a2 + 11);
        __int128 v11 = (int *)(v14 + 32 * v7);
        goto LABEL_11;
      }

      __int128 v14 = v26;
      bzero((void *)(v26 + 32LL * (int)a2[21]), 32LL * (int)(v17 - a2[21]));
      *((void *)a2 + 11) = v14;
      a2[21] = v17;
      __int128 v11 = (int *)(v14 + 32 * v7);
      if (*v3)
      {
LABEL_11:
        __int128 v15 = 0;
        __int128 v16 = v14 + 32 * v7;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 4) = 0;
        ++*v11;
        if (!v11[1]) {
          goto LABEL_4;
        }
        goto LABEL_14;
      }
    }

    else
    {
      __int128 v11 = (int *)(v14 + 32 * v7);
    }

    if (v11[14]) {
      goto LABEL_11;
    }
    v30 = (uint64_t *)(v11 + 12);
    __int128 v18 = *(void *)(v14 + 32 * v7 + 16);
    __int128 v19 = sub_18138BFCC((char *)(v18 + 1), &v32);
    sub_18138BFCC((char *)(v18 + (v19 + 1)), &v32);
    v29 = v32;
    v11[8] = *v11;
    __int128 v20 = v11[14];
    __int128 v21 = v11[15];
    __int128 v22 = (v20 + 9);
    if (v22 <= v21)
    {
      unint64_t v25 = (uint64_t)(v11 + 12);
      unint64_t v27 = *v30;
    }

    else
    {
      if (v21) {
        LODWORD(v23) = v11[15];
      }
      else {
        LODWORD(v23) = 64;
      }
      __int128 v23 = (int)v23;
      do
      {
        unint64_t v24 = v23;
        v23 *= 2LL;
      }

      while (v24 < v22);
      uint64_t v28 = *v30;
      if (sqlite3_initialize() || (unint64_t v27 = sub_18127D33C(v28, v24)) == 0)
      {
        *__int128 v3 = 7;
        unint64_t v25 = (uint64_t)(v11 + 12);
LABEL_35:
        sub_18138A828(v3, v25, *v11);
        sub_18138A828(v3, v25, v29);
        v11[9] = 1;
        *((void *)v11 + 5) = v29;
        goto LABEL_11;
      }

      v11[15] = v24;
      *((void *)v11 + 6) = v27;
      __int128 v20 = v11[14];
      unint64_t v25 = (uint64_t)(v11 + 12);
    }

    *(_BYTE *)(v27 + v20) = 0;
    ++v11[14];
    goto LABEL_35;
  }

  return result;
}

  if (*((_DWORD *)v5 + 15)) {
    return result;
  }
LABEL_15:
  __int128 v10 = (void *)*v6;
  if (!sub_1812B2390(*v6, 0))
  {
    __int128 v11 = v10[16];
    if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v11, a2);
    }

    else
    {
      *(void *)__int128 v11 = a2;
      *(_WORD *)(v11 + 20) = 4;
    }

    __int128 v12 = *(void *)(*v10 + 24LL);
    if (v12) {
      xmmword_18C465410(v12);
    }
  }

  __int128 v13 = (void *)*v6;
  if (!sub_1812B2390((uint64_t)v13, 1u))
  {
    __int128 v14 = v13[16];
    if ((*(_WORD *)(v14 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v14 + 64, a3);
    }

    else
    {
      *(void *)(v14 + 64) = a3;
      *(_WORD *)(v14 + 84) = 4;
    }

    __int128 v15 = *(void *)(*v13 + 24LL);
    if (v15) {
      xmmword_18C465410(v15);
    }
  }

  sqlite3_step(*((sqlite3_stmt **)v5 + 15));
  int result = (char *)sqlite3_reset(*((sqlite3_stmt **)v5 + 15));
  *((_DWORD *)v5 + 15) = (_DWORD)result;
  return result;
}

  __int128 v16 = (v8 - 2);
  __int128 v17 = (char)v13[v16];
  if (v17 == 101)
  {
    if (v8 < 4)
    {
      if ((_DWORD)v8 != 3)
      {
        __int128 v8 = 2LL;
        goto LABEL_19;
      }
    }

    else
    {
      v42 = (v8 - 3);
      if (*(_WORD *)&v13[v42] == 25957 && v13[v42 + 2] == 100)
      {
        v44 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
        v45 = 1;
        __int128 v23 = v44 > 0xA;
        v46 = (1 << v44) & 0x495;
        if (v23 || v46 == 0)
        {
          v48 = 1;
          if ((_DWORD)v8 == 4)
          {
            v45 = 0;
          }

          else
          {
            v218 = 1LL;
            while (1)
            {
              v219 = v13[v218];
              v220 = (((v219 - 97) >> 1) | (((_BYTE)v219 - 97) << 7));
              __int128 v23 = v220 > 0xA;
              v221 = (1 << v220) & 0x495;
              v222 = v23 || v221 == 0;
              if (!v222 || v219 == 121) {
                break;
              }
              if (v42 == ++v218)
              {
                v45 = 0;
                v48 = v8 - 3;
                goto LABEL_65;
              }
            }

            v45 = 1;
            v48 = v218;
          }
        }

        else
        {
          v48 = 0;
        }

  sqlite3_finalize(pStmt);
  return v7;
}

  if ((v8 - 1) > 1)
  {
    if ((v8 - 3) <= 1)
    {
      if (v8 == 4) {
        __int128 v16 = (void *)sqlite3_column_blob(a2, iCol);
      }
      else {
        __int128 v16 = (void *)sqlite3_column_text(a2, iCol);
      }
      __int128 v17 = v16;
      int result = sqlite3_column_bytes(a2, iCol);
      __int128 v18 = result;
      __int128 v20 = v8 == 4 && (_DWORD)result == 0;
      if (v17 || v20)
      {
        sub_1813BB7D4(v7, result, a4);
        return sub_1813BB8F8(v7, v17, v18, a4);
      }

      else
      {
        *a4 = 7;
      }
    }
  }

  else
  {
    if (v8 == 1) {
      __int128 v15 = COERCE_DOUBLE(sqlite3_column_int64(a2, iCol));
    }
    else {
      __int128 v15 = sqlite3_column_double(a2, iCol);
    }
    v21[0] = bswap64(*(unint64_t *)&v15);
    return sub_1813BB8F8(v7, v21, 8uLL, a4);
  }

  return result;
}

      sub_1813BB9F4((uint64_t)&v18, ")", &v20);
    }
  }

  __int128 v14 = v20;
  __int128 v15 = v18;
  if (!v20) {
    __int128 v14 = sub_18126DFE0(a1, v18, v19, 128LL, 0LL, (void *)(a3 + 8), 0LL, v7);
  }
  if (v15)
  {
    __int128 v16 = (void (**)(unsigned __int8 *, char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_23:
      (*v16)(v15, v6);
      return v14;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    off_18C4653A8(v15);
    __int128 v15 = (unsigned __int8 *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int128 v16 = (void (**)(unsigned __int8 *, char *))&xmmword_18C465410;
      goto LABEL_23;
    }
  }

  return v14;
}

void *sub_181268758(int a1)
{
  BOOL v2 = (malloc_zone_t *)qword_18C5506A8;
  if (!qword_18C5506A8) {
    BOOL v2 = malloc_default_zone();
  }
  __int128 v3 = malloc_zone_malloc(v2, a1);
  if (!v3) {
    sqlite3_log(7, "failed to allocate %u bytes of memory", a1);
  }
  return v3;
}

uint64_t sub_1812687B4()
{
  return 0LL;
}

void *__cdecl sqlite3_malloc(int a1)
{
  int v2 = sqlite3_initialize();
  if (a1 < 1 || v2) {
    return 0LL;
  }
  else {
    return (void *)sub_18126F0AC(a1);
  }
}

void sqlite3_free(void *a1)
{
  if (a1)
  {
    int v1 = a1;
    int v2 = (__int128 *)&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_7:
      (*(void (**)(void *))v2)(v1);
      return;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400();
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    int v1 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v2 = &xmmword_18C465410;
      goto LABEL_7;
    }
  }
}

void sub_1812688B0(void *ptr)
{
  int v2 = (malloc_zone_t *)qword_18C5506A8;
  if (!qword_18C5506A8) {
    int v2 = malloc_default_zone();
  }
  malloc_zone_free(v2, ptr);
}

int sqlite3_vfs_register(sqlite3_vfs *a1, int makeDflt)
{
  int result = sqlite3_initialize();
  if (result) {
    return result;
  }
  if (!a1) {
    return sub_1812CF36C(26694);
  }
  if ((_BYTE)word_18C465384)
  {
    uint64_t v5 = qword_18C4653F0(2LL);
    uint64_t v6 = v5;
    if (v5)
    {
      xmmword_18C465400(v5);
      char v7 = 0;
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  char v7 = 1;
LABEL_9:
  p_pNext = &qword_18C468B68;
  __int128 v9 = (sqlite3_vfs *)qword_18C468B68;
  if ((sqlite3_vfs *)qword_18C468B68 == a1) {
    goto LABEL_19;
  }
  if (qword_18C468B68)
  {
    __int128 v10 = (sqlite3_vfs *)qword_18C468B68;
    do
    {
      __int128 v11 = v10;
      __int128 v10 = v10->pNext;
      if (v10) {
        BOOL v12 = v10 == a1;
      }
      else {
        BOOL v12 = 1;
      }
    }

    while (!v12);
    if (v10 != a1) {
      goto LABEL_20;
    }
    p_pNext = (uint64_t *)&v11->pNext;
LABEL_19:
    uint64_t *p_pNext = (uint64_t)a1->pNext;
    __int128 v9 = (sqlite3_vfs *)qword_18C468B68;
LABEL_20:
    p_pNext = &qword_18C468B68;
    if (!makeDflt && v9)
    {
      p_pNext = (uint64_t *)&v9->pNext;
      __int128 v9 = v9->pNext;
    }
  }

  a1->pNext = v9;
  uint64_t *p_pNext = (uint64_t)a1;
  if ((v7 & 1) == 0) {
    xmmword_18C465410(v6);
  }
  return 0;
}

sqlite3_vfs *__cdecl sqlite3_vfs_find(const char *zVfsName)
{
  if (sqlite3_initialize()) {
    return 0LL;
  }
  if ((_BYTE)word_18C465384)
  {
    uint64_t v3 = qword_18C4653F0(2LL);
    uint64_t v4 = v3;
    if (v3)
    {
      xmmword_18C465400(v3);
      char v5 = 0;
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  char v5 = 1;
LABEL_8:
  int v2 = (sqlite3_vfs *)qword_18C468B68;
  if (zVfsName && qword_18C468B68)
  {
    do
    {
      if (!strcmp(zVfsName, v2->zName)) {
        break;
      }
      int v2 = v2->pNext;
    }

    while (v2);
  }

  if ((v5 & 1) == 0) {
    xmmword_18C465410(v4);
  }
  return v2;
}

uint64_t sub_181268AAC( uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == 8 || a3 == 4) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a3;
  }
  if (v9 - 4 <= 0xFFFFFFFC) {
    return sub_1812CF36C(188065);
  }
  char v14 = a3;
  if (a2)
  {
    uint64_t v17 = *(void *)(a1 + 656);
    if (v17)
    {
      int v18 = *a2;
      if (*a2)
      {
        unsigned int v19 = 0;
        __int128 v20 = (unsigned __int8 *)(a2 + 1);
        do
        {
          unsigned int v19 = -1640531535 * (v19 + byte_1813C6343[v18]);
          int v21 = *v20++;
          int v18 = v21;
        }

        while (v21);
      }

      else
      {
        unsigned int v19 = 0;
      }

      uint64_t v28 = (_DWORD *)(v17 + 16LL * (v19 % *(_DWORD *)(a1 + 640)));
      __int128 v23 = (uint64_t *)(v28 + 2);
      int v24 = *v28;
      if (v24)
      {
        while (1)
        {
LABEL_26:
          __int128 v23 = (uint64_t *)*v23;
          v29 = (_BYTE *)v23[3];
          for (i = a2; ; ++i)
          {
            uint64_t v31 = *v29;
            uint64_t v32 = *i;
            if ((_DWORD)v31 != (_DWORD)v32) {
              break;
            }
            if (!*v29) {
              goto LABEL_19;
            }
LABEL_28:
            ++v29;
          }

          if (byte_1813C6343[v31] == byte_1813C6343[v32]) {
            goto LABEL_28;
          }
          if (!--v24)
          {
            __int128 v23 = &qword_18C550660;
            goto LABEL_19;
          }
        }
      }
    }

    else
    {
      __int128 v23 = (uint64_t *)(a1 + 648);
      int v24 = *(_DWORD *)(a1 + 644);
      if (v24) {
        goto LABEL_26;
      }
    }

    __int128 v23 = &qword_18C550660;
LABEL_19:
    uint64_t v25 = v23[2];
    if (!v25) {
      goto LABEL_67;
    }
    uint64_t v26 = v25 + 40LL * v9;
    uint64_t v22 = v26 - 40;
    if (v26 == 40) {
      goto LABEL_67;
    }
  }

  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    if (!v22) {
      goto LABEL_67;
    }
  }

  if (!*(void *)(v22 + 24)) {
    goto LABEL_67;
  }
  if (!*(_DWORD *)(a1 + 208))
  {
    for (uint64_t j = *(void *)(a1 + 8); j; uint64_t j = *(void *)(j + 16))
      *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 1;
    int v34 = *(unsigned __int8 *)(v22 + 8);
    if (v9 == (v34 & 0xFFFFFFF7))
    {
      uint64_t v35 = *(void *)(a1 + 656);
      if (v35)
      {
        int v36 = *a2;
        if (*a2)
        {
          unsigned int v37 = 0;
          v38 = (unsigned __int8 *)(a2 + 1);
          do
          {
            unsigned int v37 = -1640531535 * (v37 + byte_1813C6343[v36]);
            int v39 = *v38++;
            int v36 = v39;
          }

          while (v39);
        }

        else
        {
          unsigned int v37 = 0;
        }

        v41 = (_DWORD *)(v35 + 16LL * (v37 % *(_DWORD *)(a1 + 640)));
        v40 = (uint64_t *)(v41 + 2);
      }

      else
      {
        v40 = (uint64_t *)(a1 + 648);
        v41 = (_DWORD *)(a1 + 644);
      }

      int v42 = *v41;
      if (v42)
      {
        while (1)
        {
          v40 = (uint64_t *)*v40;
          v43 = (_BYTE *)v40[3];
          for (k = a2; ; ++k)
          {
            uint64_t v45 = *v43;
            uint64_t v46 = *k;
            if ((_DWORD)v45 != (_DWORD)v46) {
              break;
            }
            if (!*v43) {
              goto LABEL_55;
            }
LABEL_48:
            ++v43;
          }

          if (byte_1813C6343[v45] == byte_1813C6343[v46]) {
            goto LABEL_48;
          }
          if (!--v42)
          {
            v40 = &qword_18C550660;
            goto LABEL_55;
          }
        }
      }

      v40 = &qword_18C550660;
LABEL_55:
      uint64_t v47 = v40[2];
      if (*(unsigned __int8 *)(v47 + 8) == v34)
      {
        v48 = *(void (**)(void))(v47 + 32);
        if (v48)
        {
          v48(*(void *)(v47 + 16));
          int v34 = *(unsigned __int8 *)(v22 + 8);
        }

        *(void *)(v47 + 24) = 0LL;
      }

      if (*(unsigned __int8 *)(v47 + 48) == v34)
      {
        v49 = *(void (**)(void))(v47 + 72);
        if (v49)
        {
          v49(*(void *)(v47 + 56));
          int v34 = *(unsigned __int8 *)(v22 + 8);
        }

        *(void *)(v47 + 64) = 0LL;
      }

      if (*(unsigned __int8 *)(v47 + 88) == v34)
      {
        v50 = *(void (**)(void))(v47 + 112);
        if (v50) {
          v50(*(void *)(v47 + 96));
        }
        *(void *)(v47 + 104) = 0LL;
      }
    }

LABEL_67:
    v51 = sub_18130D3EC(a1, v9, a2, 1);
    if (!v51) {
      return 7LL;
    }
    v51[2] = a4;
    v51[3] = a5;
    v51[4] = a6;
    *((_BYTE *)v51 + 8) = v9 | v14 & 8;
    *(_DWORD *)(a1 + 80) = 0;
    if (*(void *)(a1 + 416))
    {
      sub_1812FA264(a1, 0);
      return 0LL;
    }

    else
    {
      uint64_t v27 = 0LL;
      *(_DWORD *)(a1 + 84) = -1;
    }

    return v27;
  }

  uint64_t v27 = 5LL;
  sub_1812D50CC(a1, 5, "unable to delete/modify collation sequence due to active statements", a4, a5, a6, a7, a8, v52);
  return v27;
}

        if (++v40 == 3)
        {
          v29 = 0LL;
          goto LABEL_123;
        }

        continue;
      }
    }

    v29 = 10LL;
  }

  else
  {
    v29 = sub_1812CF36C(45085);
  }

                  __int128 v20 = v71;
                  if (v71) {
                    goto LABEL_82;
                  }
                  goto LABEL_68;
                }

                v38 = sub_1813BAF00((uint64_t)&v72, v28, (unsigned __int16 *)pStmt, (uint64_t)v29, (uint64_t)v27);
              }

              else
              {
                if (v32 == 18) {
                  goto LABEL_67;
                }
                v38 = sub_1813BB530((uint64_t)&v72, v28, (uint64_t)v29, v26, v27);
              }

              __int128 v20 = v38;
              v71 = v38;
              if (v38) {
                goto LABEL_82;
              }
LABEL_68:
              uint64_t v46 = sqlite3_reset(pStmt);
              __int128 v20 = v46;
              v71 = v46;
              if (v8 && !v46 && (int)v73 > v22 && (int)v73 > dword_18C54FB18)
              {
                __int128 v20 = v8(a4, v72);
                v71 = v20;
                LODWORD(v73) = 0;
                uint64_t v22 = -1;
              }

              if (!v20)
              {
                v29 = (unsigned __int8 *)*((void *)v29 + 3);
                if (v29) {
                  continue;
                }
              }

              goto LABEL_82;
            }

            __int128 v20 = v30;
LABEL_82:
            int v24 = *(_DWORD *)(v64 + 52);
            v49 = v20;
LABEL_83:
            if (++v25 >= v24 || v49)
            {
              int v21 = v73;
              char v7 = v59;
              __int128 v10 = v60;
              unsigned int v9 = v58;
              LODWORD(v16) = v61;
              __int128 v15 = v64;
              goto LABEL_87;
            }
          }
        }

        int v21 = v73;
LABEL_87:
        sqlite3_finalize(pStmt);
        if (v21 == v22) {
          __int128 v16 = v16;
        }
        else {
          __int128 v16 = v21;
        }
        LODWORD(v73) = v16;
        v50 = v68;
        if (!v68) {
          goto LABEL_97;
        }
        v51 = (void (**)(uint64_t))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v50);
          --qword_18C468B10;
          off_18C4653A8(v50);
          v50 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_97;
          }
          v51 = (void (**)(uint64_t))&xmmword_18C465410;
        }

        (*v51)(v50);
      }

      else
      {
        __int128 v20 = 0;
      }

        unsigned int v9 = 0LL;
        *(_BYTE *)(a1 + 28) = a2;
        v6[4].i8[0] = a2;
        goto LABEL_68;
      }

      uint64_t v25 = *__error();
      unsigned int v9 = 5LL;
      if (((1LL << v25) & 0x1000000800012010LL) != 0) {
        goto LABEL_56;
      }
      if (v25 != 1)
      {
LABEL_53:
        if ((_DWORD)v25 == 77) {
          goto LABEL_56;
        }
        unsigned int v9 = 2058LL;
LABEL_55:
        *(_DWORD *)(a1 + 32) = v25;
LABEL_56:
        if (a2 != 4) {
          goto LABEL_68;
        }
        goto LABEL_57;
      }

      if (!a5) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }

    v61 = v41(*(void *)(v40 + 536), v13, a3, 0LL, 0LL, *(void *)(a1 + 368));
    if (v61 == 1)
    {
      v62 = 23;
      v63 = "not authorized";
    }

    else
    {
      if ((v61 & 0xFFFFFFFD) == 0)
      {
        if (v61) {
          goto LABEL_67;
        }
        goto LABEL_47;
      }

      v62 = 1;
      v63 = "authorizer malfunction";
    }

    sub_1812DC47C(a1, v63, a3, a4, a5, a6, a7, a8, v64);
    *(_DWORD *)(a1 + 24) = v62;
    goto LABEL_67;
  }

  sub_1812DC47C( a1,  "Expression tree is too large (maximum depth %d)",  a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)a1 + 148LL));
LABEL_68:
  sub_181309110((void *)v15, (unsigned __int8 *)a5);
LABEL_69:
  if (a6) {
    sub_181309110((void *)v15, (unsigned __int8 *)a6);
  }
  if (a7) {
    sub_181309110((void *)v15, (unsigned __int8 *)a7);
  }
}

    uint64_t v25 = v9 + 1;
  }

  int result = sub_1813A0730((uint64_t)a1, (unsigned int *)a2);
  if (a1[15]) {
    return result;
  }
  *(_DWORD *)(a2 + 104) = 0;
  if (!v25)
  {
    __int128 v23 = 0;
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
    goto LABEL_39;
  }

  LODWORD(v41) = *(_DWORD *)(a2 + 108);
  if (v41 >= v25)
  {
    uint64_t v45 = 0LL;
    int result = *(void *)(a2 + 96);
    int v42 = v25;
  }

  else
  {
    if (!(_DWORD)v41) {
      LODWORD(v41) = 64;
    }
    v41 = (int)v41;
    int v42 = v25;
    do
    {
      v43 = v41;
      v41 *= 2LL;
    }

    while (v43 < v25);
    v44 = *(void *)(a2 + 96);
    int result = sqlite3_initialize();
    if ((_DWORD)result || (int result = sub_18127D33C(v44, v43)) == 0)
    {
      a1[15] = 7;
      *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
      return result;
    }

    *(_DWORD *)(a2 + 108) = v43;
    *(void *)(a2 + 96) = result;
    uint64_t v45 = *(int *)(a2 + 104);
  }

  int result = (uint64_t)memcpy((void *)(result + v45), a4, v42);
  *(_DWORD *)(a2 + 104) += v25;
  uint64_t v46 = a1[15];
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
  if (!v46) {
    goto LABEL_24;
  }
  return result;
}

  *a5 = v14;
  return result;
}

void *sub_181268E34(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    uint64_t v3 = (void *)sub_18126F0AC(a2);
    if (!v3) {
      return v3;
    }
    goto LABEL_3;
  }

  uint64_t v3 = (void *)sub_1812F2264(a1, a2);
  if (v3) {
LABEL_3:
  }
    bzero(v3, a2);
  return v3;
}

uint64_t sub_181268E88(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    unsigned int v11 = 0;
    BOOL v12 = (uint64_t *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 4);
    if (v13) {
      goto LABEL_35;
    }
LABEL_7:
    BOOL v12 = &qword_18C550660;
    goto LABEL_8;
  }

  int v7 = *a2;
  if (*a2)
  {
    unsigned int v8 = 0;
    unsigned int v9 = a2 + 1;
    do
    {
      unsigned int v8 = -1640531535 * (v8 + byte_1813C6343[v7]);
      int v10 = *v9++;
      int v7 = v10;
    }

    while (v10);
  }

  else
  {
    unsigned int v8 = 0;
  }

  unsigned int v11 = v8 % *(_DWORD *)a1;
  uint64_t v27 = (_DWORD *)(v6 + 16LL * v11);
  BOOL v12 = (uint64_t *)(v27 + 2);
  int v13 = *v27;
  if (!v13) {
    goto LABEL_7;
  }
  do
  {
LABEL_35:
    BOOL v12 = (uint64_t *)*v12;
    uint64_t v28 = (_BYTE *)v12[3];
    for (i = a2; ; ++i)
    {
      uint64_t v30 = *v28;
      uint64_t v31 = *i;
      if ((_DWORD)v30 != (_DWORD)v31) {
        break;
      }
      if (!*v28) {
        goto LABEL_8;
      }
LABEL_37:
      ++v28;
    }

    if (byte_1813C6343[v30] == byte_1813C6343[v31]) {
      goto LABEL_37;
    }
    --v13;
  }

  while (v13);
  BOOL v12 = &qword_18C550660;
LABEL_8:
  uint64_t v14 = v12[2];
  if (!v14)
  {
    if (!a3) {
      return 0LL;
    }
    uint64_t v15 = sub_18126F0AC(32LL);
    if (!v15) {
      return a3;
    }
    __int128 v16 = (void *)v15;
    *(void *)(v15 + 16) = a3;
    *(void *)(v15 + 24) = a2;
    unsigned int v17 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v17;
    if (v17 < 0xA || v17 <= 2 * *(_DWORD *)a1) {
      goto LABEL_84;
    }
    unsigned int v18 = 2 * v17;
    int v19 = v18 >= 0x40 ? 64 : v18;
    if (v19 == *(_DWORD *)a1) {
      goto LABEL_84;
    }
    if (off_18C550648) {
      off_18C550648(v15);
    }
    uint64_t v20 = sub_18126F0AC((16 * v19));
    int v21 = (char *)v20;
    if (off_18C550650) {
      off_18C550650(v20);
    }
    if (!v21) {
      goto LABEL_84;
    }
    uint64_t v22 = *(void *)(a1 + 16);
    if (v22)
    {
      __int128 v23 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v22);
        --qword_18C468B10;
        off_18C4653A8(v22);
        uint64_t v22 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_31;
        }
        __int128 v23 = &xmmword_18C465410;
      }

      (*v23)(v22);
    }

LABEL_31:
    *(void *)(a1 + 16) = v21;
    unsigned int v24 = (int)off_18C4653B8(v21) >> 4;
    *(_DWORD *)a1 = v24;
    bzero(v21, 16LL * v24);
    uint64_t v25 = (uint64_t *)(a1 + 8);
    uint64_t v26 = *(uint64_t **)(a1 + 8);
    *(void *)(a1 + 8) = 0LL;
    if (v26)
    {
      do
      {
        v40 = (_BYTE *)v26[3];
        int v41 = *v40;
        if (*v40)
        {
          unsigned int v42 = 0;
          v43 = v40 + 1;
          do
          {
            unsigned int v42 = -1640531535 * (v42 + byte_1813C6343[v41]);
            int v44 = *v43++;
            int v41 = v44;
          }

          while (v44);
        }

        else
        {
          unsigned int v42 = 0;
        }

        uint64_t v45 = v42 % v24;
        uint64_t v46 = (uint64_t *)*v26;
        uint64_t v47 = &v21[16 * v45];
        if (*(_DWORD *)v47)
        {
          v48 = &v21[16 * v45];
          uint64_t v49 = *((void *)v48 + 1);
          ++*(_DWORD *)v47;
          *((void *)v48 + 1) = v26;
          if (v49)
          {
            *uint64_t v26 = v49;
            uint64_t v38 = *(void *)(v49 + 8);
            unsigned int v37 = (uint64_t **)(v49 + 8);
            v26[1] = v38;
            int v39 = (uint64_t **)*v37;
            if (!*v37) {
              int v39 = (uint64_t **)(a1 + 8);
            }
            *int v39 = v26;
            goto LABEL_62;
          }
        }

        else
        {
          *(_DWORD *)uint64_t v47 = 1;
          *(void *)&v21[16 * v45 + 8] = v26;
        }

        uint64_t v50 = *v25;
        *uint64_t v26 = *v25;
        if (v50) {
          *(void *)(v50 + 8) = v26;
        }
        v26[1] = 0LL;
        unsigned int v37 = (uint64_t **)(a1 + 8);
LABEL_62:
        *unsigned int v37 = v26;
        uint64_t v26 = v46;
      }

      while (v46);
    }

    int v51 = *a2;
    if (*a2)
    {
      unsigned int v52 = 0;
      v53 = a2 + 1;
      do
      {
        unsigned int v52 = -1640531535 * (v52 + byte_1813C6343[v51]);
        int v54 = *v53++;
        int v51 = v54;
      }

      while (v54);
    }

    else
    {
      unsigned int v52 = 0;
    }

    unsigned int v11 = v52 % *(_DWORD *)a1;
LABEL_84:
    uint64_t v55 = *(void *)(a1 + 16);
    if (v55)
    {
      v56 = (_DWORD *)(v55 + 16LL * v11);
      if (*v56)
      {
        uint64_t v57 = v55 + 16LL * v11;
        uint64_t v58 = *(void *)(v57 + 8);
        ++*v56;
        *(void *)(v57 + 8) = v16;
        if (v58)
        {
          *__int128 v16 = v58;
          uint64_t v60 = *(void *)(v58 + 8);
          v59 = (void **)(v58 + 8);
          v16[1] = v60;
          v61 = *v59;
          if (!*v59) {
            v61 = (void *)(a1 + 8);
          }
          void *v61 = v16;
          v62 = v59;
LABEL_94:
          uint64_t v14 = 0LL;
          void *v62 = v16;
          return v14;
        }
      }

      else
      {
        _DWORD *v56 = 1;
        *(void *)(v55 + 16LL * v11 + 8) = v16;
      }
    }

    uint64_t v64 = *(void *)(a1 + 8);
    v62 = (void *)(a1 + 8);
    uint64_t v63 = v64;
    *__int128 v16 = v64;
    if (v64) {
      *(void *)(v63 + 8) = v16;
    }
    v16[1] = 0LL;
    goto LABEL_94;
  }

  if (a3)
  {
    v12[2] = a3;
    v12[3] = (uint64_t)a2;
    return v14;
  }

  uint64_t v32 = *v12;
  v33 = (uint64_t *)v12[1];
  if (v33)
  {
    uint64_t *v33 = v32;
    uint64_t v32 = *v12;
    if (*v12) {
      goto LABEL_45;
    }
  }

  else
  {
    *(void *)(a1 + 8) = v32;
    if (v32) {
LABEL_45:
    }
      *(void *)(v32 + 8) = v33;
  }

  if (v6)
  {
    uint64_t v34 = v6 + 16LL * v11;
    --*(_DWORD *)v34;
  }

  uint64_t v35 = (void (**)(uint64_t *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v12);
    --qword_18C468B10;
    off_18C4653A8(v12);
    BOOL v12 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v35 = (void (**)(uint64_t *))&xmmword_18C465410;
      goto LABEL_55;
    }
  }

  else
  {
LABEL_55:
    (*v35)(v12);
  }

  int v36 = *(_DWORD *)(a1 + 4) - 1;
  *(_DWORD *)(a1 + 4) = v36;
  if (!v36) {
    sub_18130D1AC(a1);
  }
  return v14;
}

  LOBYTE(v26) = a5 != 0;
  if (!a5 || v20 > 5)
  {
LABEL_68:
    if (v19) {
      goto LABEL_69;
    }
    return 0LL;
  }

  if ((v12 & 0x80) != 0)
  {
    uint64_t v30 = *(_DWORD *)(v10 + 48);
    if ((v30 & 8) != 0)
    {
      unsigned int v17 = "AUTOINCREMENT not allowed on WITHOUT ROWID tables";
      goto LABEL_6;
    }

    if ((v30 & 4) == 0)
    {
      sub_1812DC47C(a1, "PRIMARY KEY missing on table %s", a3, a4, a5, a6, a7, a8, *(void *)v10);
      return;
    }

    *(_DWORD *)(v10 + 48) = v30 | 0x280;
    sub_18131F140((uint64_t *)a1, v10);
  }

  uint64_t v31 = *(void *)(v10 + 96);
  if (v31)
  {
    uint64_t v32 = (void *)v15;
    v33 = (uint64_t *)(*(void *)(v15 + 32) + 24LL);
    LODWORD(v34) = -1;
    do
    {
      uint64_t v35 = *v33;
      v33 += 4;
      uint64_t v34 = (v34 + 1);
    }

    while (v35 != v31);
  }

  else
  {
    uint64_t v32 = (void *)v15;
    uint64_t v34 = 4294934528LL;
  }

  int v36 = *(int **)(v10 + 32);
  if (v36)
  {
    v198 = 0LL;
    v197 = 0u;
    v196 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    v200 = 0u;
    v201 = 0u;
    v199 = 0u;
    LODWORD(v199) = 1;
    *((void *)&v200 + 1) = *(void *)v10;
    *((void *)&v201 + 1) = v10;
    DWORD2(v203) = -1;
    unsigned int v37 = *(void *)(v10 + 96);
    uint64_t v38 = *(void *)(*(void *)(*(void *)a1 + 32LL) + 56LL);
    v194 = a1;
    v195 = &v199;
    int v39 = v37 == v38 ? 65540 : 327684;
    DWORD2(v197) = v39;
    sub_1813206F0((uint64_t)&v194, v36, a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(a1 + 48))
    {
      int v36 = *(int **)(v10 + 32);
      if (v36) {
        sub_181311F48(v32, v36);
      }
      *(void *)(v10 + 32) = 0LL;
    }
  }

  v40 = *(__int16 *)(v10 + 54);
  if ((*(_BYTE *)(v10 + 48) & 0x60) != 0)
  {
    v188 = a2;
    if (v40 < 1) {
      goto LABEL_76;
    }
    v187 = v13;
    v189 = v11;
    v192 = (uint64_t)v32;
    int v41 = 0LL;
    unsigned int v42 = 0LL;
    v43 = 0;
    do
    {
      int v44 = *(void *)(v10 + 8) + v41;
      if ((*(_WORD *)(v44 + 14) & 0x60) != 0)
      {
        uint64_t v45 = *(unsigned __int16 *)(v44 + 12);
        if (v45 && !*(_BYTE *)(v10 + 63) && (unsigned int v52 = *(_DWORD **)(v10 + 80)) != 0LL && *v52 >= v45) {
          uint64_t v46 = *(void *)&v52[6 * (v45 - 1) + 2];
        }
        else {
          uint64_t v46 = 0LL;
        }
        v198 = 0LL;
        v196 = 0u;
        v197 = 0u;
        v204 = 0u;
        v205 = 0u;
        v202 = 0u;
        v203 = 0u;
        v200 = 0u;
        v201 = 0u;
        v199 = 0u;
        LODWORD(v199) = 1;
        *((void *)&v200 + 1) = *(void *)v10;
        *((void *)&v201 + 1) = v10;
        DWORD2(v203) = -1;
        uint64_t v47 = *(void *)(v10 + 96);
        v48 = *(void *)(*(void *)(*(void *)a1 + 32LL) + 56LL);
        v194 = a1;
        v195 = &v199;
        if (v47 == v48) {
          uint64_t v49 = 65544;
        }
        else {
          uint64_t v49 = 327688;
        }
        DWORD2(v197) = v49;
        if (sub_1813205D4((uint64_t)&v194, v46, a3, a4, a5, a6, a7, a8))
        {
          uint64_t v50 = *(void *)(v10 + 8);
          int v51 = sub_1812F2264(v192, 0x50uLL);
          if (v51)
          {
            *(_OWORD *)(v51 + 32) = 0u;
            *(_OWORD *)(v51 + 48) = 0u;
            *(_OWORD *)(v51 + 64) = 0u;
            *(_OWORD *)int v51 = 0u;
            *(_OWORD *)(v51 + 16) = 0u;
            *(_BYTE *)int v51 = 121;
            *(_WORD *)(v51 + 52) = -1;
            *(_DWORD *)(v51 + 40) = 1;
          }

          sub_18131F8B4((uint64_t *)a1, v10, v50 + v41, (unsigned __int8 *)v51);
        }
      }

      else
      {
        ++v43;
      }

      ++v42;
      v41 += 16LL;
    }

    while (v42 < *(__int16 *)(v10 + 54));
    int v13 = v187;
    uint64_t v32 = (void *)v192;
    unsigned int v11 = v189;
    if (!v43)
    {
LABEL_76:
      uint64_t v58 = "must have at least one non-generated column";
LABEL_137:
      sub_1812DC47C(a1, v58, a3, a4, a5, a6, a7, a8, v186);
      return;
    }

    LOWORD(v40) = *(_WORD *)(v10 + 54);
    a2 = v188;
  }

  v53 = (uint64_t)v32;
  if ((__int16)v40 < 1)
  {
    v56 = 0;
    goto LABEL_83;
  }

  int v54 = *(void *)(v10 + 8);
  uint64_t v55 = (unsigned __int16)v40;
  if ((unsigned __int16)v40 == 1)
  {
    v56 = 0;
    uint64_t v57 = *(void *)(v10 + 8);
LABEL_81:
    v67 = v55 + 1;
    v68 = (unsigned __int8 *)(v57 + 10);
    do
    {
      v69 = *v68;
      v68 += 16;
      v56 += v69;
      --v67;
    }

    while (v67 > 1);
    goto LABEL_83;
  }

  v59 = 0;
  uint64_t v60 = 0;
  v61 = (unsigned __int16)v40;
  v62 = (unsigned __int16)v40 & 0xFFFE;
  uint64_t v55 = (unsigned __int16)v40 - (v40 & 0xFFFE);
  uint64_t v57 = v54 + 16 * v62;
  uint64_t v63 = (unsigned __int8 *)(v54 + 26);
  uint64_t v64 = v62;
  do
  {
    v65 = *(v63 - 16);
    v66 = *v63;
    v63 += 32;
    v59 += v65;
    v60 += v66;
    v64 -= 2LL;
  }

  while (v64);
  v56 = v60 + v59;
  if (v62 != v61) {
    goto LABEL_81;
  }
LABEL_83:
  v70 = 4 * (v56 + (*(unsigned __int16 *)(v10 + 52) >> 15));
  if (v70 >= 8)
  {
    v72 = 40;
    if (v70 >= 0x100)
    {
      v73 = v70;
      do
      {
        v72 += 40;
        v70 = v73 >> 4;
        v74 = v73 > 0xFFF;
        v73 >>= 4;
      }

      while (v74);
    }

    if (v70 < 0x10)
    {
      LOBYTE(v71) = v70;
    }

    else
    {
      do
      {
        v72 += 10;
        v71 = v70 >> 1;
        v74 = v70 > 0x1F;
        v70 >>= 1;
      }

      while (v74);
    }

    goto LABEL_93;
  }

  if ((_DWORD)v70)
  {
    LOBYTE(v71) = 8 * (v56 + (*(unsigned __int16 *)(v10 + 52) >> 15));
    v72 = 30;
LABEL_93:
    v75 = v72 + word_1813CD842[v71 & 7] - 10;
    goto LABEL_94;
  }

  v75 = 0;
LABEL_94:
  *(_WORD *)(v10 + 60) = v75;
  for (i = *(void *)(v10 + 16); i; i = *(void *)(i + 40))
  {
    v87 = *(unsigned __int16 *)(i + 96);
    if (*(_WORD *)(i + 96))
    {
      v88 = 0;
      v89 = *(__int16 **)(i + 8);
      do
      {
        v92 = *v89++;
        v91 = v92;
        if (v92 < 0) {
          v90 = 1;
        }
        else {
          v90 = *(unsigned __int8 *)(*(void *)(*(void *)(i + 24) + 8LL) + 16LL * v91 + 10);
        }
        v88 += v90;
        --v87;
      }

      while (v87);
      v93 = (4 * v88);
      if (v93 < 8)
      {
        if (!(_DWORD)v93)
        {
          LOWORD(v87) = 0;
          goto LABEL_108;
        }

        LOBYTE(v85) = 2 * v93;
        v86 = 30;
      }

      else
      {
        v86 = 40;
        if (v93 >= 0x100)
        {
          v94 = v93;
          do
          {
            v86 += 40;
            v93 = v94 >> 4;
            v74 = v94 > 0xFFF;
            v94 >>= 4;
          }

          while (v74);
        }

        LOBYTE(v85) = v93;
        if (v93 >= 0x10)
        {
          do
          {
            v86 += 10;
            v85 = v93 >> 1;
            v74 = v93 > 0x1F;
            v93 >>= 1;
          }

          while (v74);
        }
      }

      LOWORD(v87) = v86 + word_1813CD842[v85 & 7] - 10;
    }

        int result = sub_1813014B0(v9, v8);
      }

      break;
    case 314:
    case 315:
    case 316:
      uint64_t v4 = (unsigned __int8 *)a3[1];
      if (v4) {
LABEL_11:
      }
        int result = sub_181309110(*v3, v4);
      break;
    default:
      return result;
  }

  return result;
}

    if (*(void *)a7)
    {
      sub_181309110(v14, *(unsigned __int8 **)a7);
    }

    else
    {
      uint64_t v31 = *(void **)(a7 + 8);
      if (v31)
      {
        uint64_t v32 = *(_DWORD *)v31;
        if (*(int *)v31 >= 1)
        {
          v33 = 0LL;
          uint64_t v34 = 1LL;
          do
          {
            uint64_t v35 = (void *)v31[v34];
            if (v35)
            {
              sub_1812F20DC(v14, v35);
              uint64_t v32 = *(_DWORD *)v31;
            }

            ++v33;
            v34 += 2LL;
          }

          while (v33 < v32);
        }

        sub_1813014B0(v14, v31);
      }
    }

    goto LABEL_40;
  }

  unsigned int v17 = v16;
  unsigned int v18 = *v16 - 1LL;
  int v19 = *(unsigned __int8 *)(a1 + 302);
  if (v19 >= 2)
  {
    uint64_t v20 = *(void *)&v16[26 * v18 + 6];
    if (v20)
    {
      if (!v11 || !*v11) {
        unsigned int v11 = (void *)a3;
      }
      if (v19 != 3)
      {
        if (!*(void *)a1)
        {
          int v21 = sub_18126F0AC(32LL);
          if (!v21) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }

        int v21 = sub_1812F2264(*(void *)a1, 0x20uLL);
        if (v21)
        {
LABEL_17:
          *(_OWORD *)int v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(void *)int v21 = v20;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)v11;
          *(void *)(v21 + 24) = *(void *)(a1 + 408);
          *(void *)(a1 + 408) = v21;
        }
      }
    }
  }

  if (!*(_BYTE *)v2 || *(_BYTE *)(v2 + 1) != (*((void *)a1 + 16) == 0LL)) {
    return sub_1812FD54C(82351LL, v2);
  }
LABEL_10:
  *((_WORD *)a1 + 43) = 0;
  *((_WORD *)a1 + 35) = 0;
  a1[1] &= 0xF1u;
  if (*(_WORD *)(v2 + 24))
  {
    int result = 0LL;
    *a1 = 0;
    return result;
  }

  if (*(_BYTE *)(v2 + 8)) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v2 + 4) != 1) {
    return sub_1812FBF50(82363);
  }
  unsigned int v9 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v2 + 9) + *(void *)(v2 + 80) + 8LL));
  *a1 = 0;
  return sub_18129BA78((uint64_t)a1, v9);
}

  if (v11) {
    sub_181309110((void *)v14, v11);
  }
  if (v12) {
    sub_181311F48((void *)v14, v12);
  }
  int result = sub_18128FF4C((void *)v14, a4);
  if (v27) {
    return sub_1812F20DC((void *)v14, v27);
  }
  return result;
}

  v329 = *(_DWORD *)(v23 + 48);
  if ((*(void *)(v23 + 88)
     || (v40 = *(void *)(*(void *)(*(void *)a1 + 32LL) + 56LL)) != 0 && *(void *)(v40 + 64))
    && !*(_BYTE *)(a1 + 221))
  {
    int v39 = (uint64_t)sub_18133EDD4((void *)a1, (unsigned __int8 **)v23, 127LL, 0LL, &v337, v20, v21, v22);
  }

  else
  {
    int v39 = 0LL;
    v337 = 0;
  }

  v324 = *(unsigned __int8 *)(v23 + 63);
  if ((v324 == 1 || *(__int16 *)(v23 + 54) <= 0) && sub_181322320(a1, v23, v17, v18, v19, v20, v21, v22)
    || sub_18133E818(a1, v23, v39, v18, v19, v20, v21, v22))
  {
    goto LABEL_41;
  }

  v322 = v39;
  v53 = *(void *)(a1 + 16);
  if (!v53)
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    v53 = sub_1812DC63C((uint64_t *)a1, v41, v42, v43, v44, v45, v46, v47);
    if (!v53) {
      goto LABEL_41;
    }
  }

  v320 = v15;
  v321 = v8;
  if (!*(_BYTE *)(a1 + 30)) {
    *(_WORD *)(v53 + 268) |= 0x10u;
  }
  v323 = v53;
  int v54 = v39;
  uint64_t v55 = (v10 | v39) != 0;
  if (*(void *)(a1 + 168)) {
    v56 = *(void *)(a1 + 168);
  }
  else {
    v56 = a1;
  }
  uint64_t v57 = *(_DWORD *)(v56 + 124);
  uint64_t v58 = 1 << v35;
  if ((v57 & (1 << v35)) == 0)
  {
    *(_DWORD *)(v56 + 124) = v57 | v58;
    if ((_DWORD)v35 == 1)
    {
      sub_1812FA2F0(v56);
      int v54 = v322;
    }
  }

  *(_DWORD *)(v56 + 120) |= v58;
  *(_BYTE *)(v56 + 32) |= v55;
  if (!a4 && v10 && !v54 && sub_1812C758C(a1, v23, v10, v320, v35, v45, v46, v47))
  {
    v66 = 0LL;
    uint64_t v14 = 0LL;
    unsigned int v8 = v321;
LABEL_77:
    if (!*(_BYTE *)(a1 + 30) && !*(void *)(a1 + 176) && *(void *)(a1 + 160)) {
      sub_181342D84((uint64_t *)a1, v59, v60, v61, v62, v63, v64, v65);
    }
    if ((_DWORD)v66) {
      sub_18133ECB4(v323, v66, "rows inserted", v61, v62, v63, v64, v65);
    }
    goto LABEL_42;
  }

  v67 = sub_181344CA4(a1, v35, v23);
  v72 = *(_DWORD *)(a1 + 56);
  v73 = v72 + 1;
  v74 = v72 + 1 + *(__int16 *)(v23 + 54);
  *(_DWORD *)(a1 + 56) = v74;
  v317 = v67;
  v318 = v72 + 1;
  unsigned int v8 = v321;
  if (*(_BYTE *)(v23 + 63) == 1)
  {
    v73 = v72 + 2;
    *(_DWORD *)(a1 + 56) = v74 + 1;
  }

  v75 = (*(_WORD *)(v23 + 48) & 0x440) == 0;
  if (!a4 || (*((_BYTE *)a4 + 4) = 1, v76 = *a4, (int)v76 < 1))
  {
    v82 = 0xFFFFFFFFLL;
LABEL_92:
    v316 = v73;
    v319 = v73 + 1;
    if (!v10)
    {
      v102 = 0uLL;
      v335 = 0u;
      v336 = 0u;
      v334 = 0u;
      v333 = a1;
      if (v332)
      {
        v103 = v82;
        LODWORD(v104) = *v332;
        v105 = sub_1813206F0((uint64_t)&v333, v332, v68, v69, v70, v71, v82, v75);
        v106 = a2 + 8;
        if (v105)
        {
          sub_18128FF4C((void *)v12, (void *)a2);
          uint64_t v14 = 0LL;
          v48 = v332;
          goto LABEL_43;
        }

        v82 = v103;
      }

      else
      {
        LODWORD(v104) = 0;
        v106 = a2 + 8;
      }

      v98 = 0;
      v310 = -1;
      v312 = 1;
      v100 = v323;
LABEL_154:
      v128 = *(__int16 *)(v23 + 52);
      v129 = *(_DWORD *)(v23 + 48);
      if ((v128 & 0x80000000) != 0 || !*(_WORD *)(v23 + 52) || (v129 & 0x60) == 0)
      {
        v82 = *(__int16 *)(v23 + 52);
        goto LABEL_165;
      }

      v130 = *(void *)(v23 + 8);
      if (v128 < 2 || (unint64_t)(v128 - 1) >> 32)
      {
        v131 = *(__int16 *)(v23 + 52);
      }

      else
      {
        v165 = 0;
        v131 = *(_WORD *)(v23 + 52) & 1;
        v166 = v128 - 2;
        v167 = v128 & 0xFFFFFFFE;
        v168 = *(__int16 *)(v23 + 52);
        do
        {
          v168 -= (*(_WORD *)(v130 + 16LL * (v166 + 1) + 14) & 0x60) != 0;
          v165 -= (*(_WORD *)(v130 + 16LL * v166 + 14) & 0x60) != 0;
          v166 -= 2;
          v167 -= 2LL;
        }

        while (v167);
        v82 = (v165 + v168);
        v169 = (v128 & 0xFFFFFFFE) == v128;
        LODWORD(v128) = v165 + v168;
        v100 = v323;
        if (v169)
        {
LABEL_165:
          v133 = 0;
          v134 = *(__int16 *)(v23 + 54);
          if ((v129 & 0x62) != 0 && (int)v134 >= 1)
          {
            v135 = *(void *)(v23 + 8);
            if (v134 >= 9)
            {
              v137 = *(_WORD *)(v23 + 54) & 7;
              if ((*(_WORD *)(v23 + 54) & 7) == 0) {
                v137 = 8LL;
              }
              v136 = v134 - v137;
              v138 = v135 + 78;
              v139 = 0uLL;
              v140.i64[0] = 0x100000001LL;
              v140.i64[1] = 0x100000001LL;
              v141 = v136;
              v142 = 0uLL;
              do
              {
                v143.i32[0] = vzip1_s16(*(int16x4_t *)(v138 - 64), *(int16x4_t *)(v138 - 48)).u32[0];
                v143.i32[1] = vext_s8( *(int8x8_t *)(v138 - 32),  (int8x8_t)vzip1_s16(*(int16x4_t *)(v138 - 32), *(int16x4_t *)(v138 - 16)),  4uLL).i32[1];
                v144 = vext_s8( *(int8x8_t *)(v138 + 32),  (int8x8_t)vzip1_s16(*(int16x4_t *)(v138 + 32), *(int16x4_t *)(v138 + 48)),  4uLL);
                v145 = *(int16x4_t *)(v138 + 16);
                v146 = *(int16x4_t *)v138;
                v138 += 128LL;
                v145.i32[0] = vzip1_s16(v146, v145).u32[0];
                v145.i32[1] = v144.i32[1];
                v139 = vaddq_s32( v139,  (int32x4_t)vandq_s8( (int8x16_t)vmovl_u16((uint16x4_t)vtst_s16(v143, (int16x4_t)0x62006200620062LL)),  v140));
                v142 = vaddq_s32( v142,  (int32x4_t)vandq_s8( (int8x16_t)vmovl_u16((uint16x4_t)vtst_s16(v145, (int16x4_t)0x62006200620062LL)),  v140));
                v141 -= 8LL;
              }

              while (v141);
              v102 = (int16x8_t)vaddq_s32(v142, v139);
              v102.i32[0] = vaddvq_s32((int32x4_t)v102);
              v133 = v102.i32[0];
            }

            else
            {
              v136 = 0LL;
              v133 = 0;
            }

            v147 = (__int16 *)(v135 + 16 * v136 + 14);
            v148 = v134 - v136;
            do
            {
              v149 = *v147;
              v147 += 8;
              if ((v149 & 0x62) != 0) {
                ++v133;
              }
              --v148;
            }

            while (v148);
          }

          if ((_DWORD)v104 != (_DWORD)v134 - v133)
          {
            sub_1812DC47C(a1, "table %S has %d columns but %d values were supplied", v68, v69, v70, v71, v82, v75, v106);
            goto LABEL_41;
          }

      *(void *)(v14 + 192) = 0LL;
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 144) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 112) = 0u;
      *(void *)(a2 + 104 * v13++ + 112) = a2;
    }

    unsigned int v18 = *(void *)(a2 + 104 * v13 + 128);
    if (!v18) {
      goto LABEL_42;
    }
    while (1)
    {
      __int128 v23 = *(void *)(v18 + 8);
      unsigned int v24 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v18);
        --qword_18C468B10;
        off_18C4653A8(v18);
        unsigned int v18 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_60;
        }
        unsigned int v24 = &xmmword_18C465410;
      }

      (*v24)(v18);
LABEL_60:
      unsigned int v18 = v23;
      if (!v23) {
        goto LABEL_42;
      }
    }
  }

  unsigned int v11 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v11;
  if (!v11) {
    sub_1812FDEFC(a1);
  }
  return v7;
}

  *(void *)(v6 + 8) = v15;
  __int128 v16 = *(void *)(a3 + 72);
  if (v16) {
    unsigned int v17 = sub_18129C928(a1, v16, 0LL, 0LL);
  }
  else {
    unsigned int v17 = 0LL;
  }
  unsigned int v18 = *(void *)(a3 + 80);
  *(void *)(v6 + 72) = v17;
  *(void *)(v6 + 80) = v18;
  *(void *)(v6 + 16) = sub_18129CD4C(a1, *(void **)(a3 + 16), 0);
  *(void *)(v6 + 24) = sub_18129CD4C(a1, *(void **)(a3 + 24), 0);
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a3 + 32);
  *(_WORD *)(v6 + 33) = *(_WORD *)(a3 + 33);
  *(_BYTE *)(v6 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(v6 + 96) = *(_DWORD *)(a3 + 96);
  *(_DWORD *)(v6 + 124) = *(_DWORD *)(a3 + 124);
  *(void *)(v6 + 88) = *(void *)(a3 + 88);
  *(_BYTE *)(v6 + 140) = *(_BYTE *)(a3 + 140);
  int v19 = *(void *)(a3 + 40);
  if (v19) {
    uint64_t v20 = sub_18129C928(a1, v19, 0LL, 0LL);
  }
  else {
    uint64_t v20 = 0LL;
  }
  *(void *)(v6 + 40) = v20;
  int v21 = *(void *)(a3 + 48);
  if (v21) {
    uint64_t v22 = sub_18129C928(a1, v21, 0LL, 0LL);
  }
  else {
    uint64_t v22 = 0LL;
  }
  *(void *)(v6 + 48) = v22;
  *(void *)(v6 + 112) = a2;
  *(_BYTE *)(v6 + 35) = *(_BYTE *)(a3 + 35);
  return v6;
}

  uint64_t v15 = strcmp((const char *)(*(void *)a2 + 7LL), "temp_master");
  __int128 v16 = (_BYTE *)(v4 + 7);
  if (v15)
  {
    for (i = "schema"; ; ++i)
    {
      unsigned int v18 = *v16;
      int v19 = *i;
      if ((_DWORD)v18 == (_DWORD)v19)
      {
        if (!*v16) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v18] != byte_1813C6343[v19])
      {
        return 0LL;
      }

      ++v16;
    }
  }

  uint64_t v20 = "temp_schema";
  for (uint64_t j = (_BYTE *)(v4 + 7); ; ++j)
  {
    uint64_t v22 = *j;
    __int128 v23 = *v20;
    if ((_DWORD)v22 != (_DWORD)v23) {
      break;
    }
    if (!*j) {
      return 1LL;
    }
LABEL_40:
    ++v20;
  }

  if (byte_1813C6343[v22] == byte_1813C6343[v23]) {
    goto LABEL_40;
  }
  if (a3)
  {
    unsigned int v24 = "master";
    for (k = (_BYTE *)(v4 + 7); ; ++k)
    {
      uint64_t v26 = *k;
      uint64_t v27 = *v24;
      if ((_DWORD)v26 == (_DWORD)v27)
      {
        if (!*k) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v26] != byte_1813C6343[v27])
      {
        for (m = "schema"; ; ++m)
        {
          v29 = *v16;
          uint64_t v30 = *m;
          if ((_DWORD)v29 == (_DWORD)v30)
          {
            if (!*v16) {
              return 1LL;
            }
          }

          else if (byte_1813C6343[v29] != byte_1813C6343[v30])
          {
            return 0LL;
          }

          ++v16;
        }
      }

      ++v24;
    }
  }

  return 0LL;
}

              ;
            }
          }
        }

        else if (v16)
        {
          sub_18131C57C((uint64_t)a1, (uint64_t)v16);
          BOOL v12 = *v11;
        }

        ++v13;
      }

      while (v13 < v12);
    }
  }

  sub_181323844(a1, a2);
  return 0LL;
}

  uint64_t v28 = *(_DWORD *)(v11 + 56);
  v29 = v28 + v17;
  uint64_t v30 = (v28 + v17 + 2);
  *(_DWORD *)(v11 + 56) = v30;
  DWORD2(v308) = v28 + v17 + 2;
  uint64_t v31 = *(unsigned __int8 *)(v12 + 33);
  if (v31 == 88 || v31 == 86)
  {
    uint64_t v32 = v29 + 3;
    *(_DWORD *)(v11 + 56) = v29 + 3;
    v33 = v29 + 3;
  }

  else
  {
    v33 = 0;
    uint64_t v32 = v29 + 2;
  }

  uint64_t v34 = *(unsigned __int8 *)(v12 + 34);
  v292 = v20;
  if (v34 == 88 || v34 == 86)
  {
    *(_DWORD *)(v11 + 56) = ++v32;
    uint64_t v35 = v32;
  }

  else
  {
    uint64_t v35 = 0;
  }

  int v36 = (v28 + 1);
  v304 = (uint64_t *)v11;
  v297 = v33;
  v295 = v35;
  v291 = v13;
  if (*(_BYTE *)(v12 + 32) == 76)
  {
    v290 = 0LL;
    v288 = 0;
    v298 = 0;
    v299 = 0;
  }

  else
  {
    if (v13) {
      unsigned int v37 = *v13;
    }
    else {
      unsigned int v37 = 0;
    }
    uint64_t v38 = *(_DWORD *)(v12 + 120) + v36;
    int v39 = *(_DWORD **)(v12 + 16);
    if (v39) {
      v38 += *v39;
    }
    v298 = v38;
    v299 = v32 + 1;
    v40 = v37 + v32;
    int v41 = v40 + 1;
    unsigned int v42 = v40 + v37;
    v288 = v41;
    LODWORD(v309[0]) = v41;
    LODWORD(v290) = v42 + 1;
    DWORD2(v309[0]) = v42 + 1;
    v43 = v42 + v37;
    HIDWORD(v290) = v43 + 1;
    LODWORD(v309[1]) = v43 + 1;
    *(_DWORD *)(v11 + 56) = v43 + v37;
  }

  v302 = v29 + 1;
  if ((int)v17 >= 1)
  {
    int v44 = 0LL;
    do
    {
      a5 = (v36 + v44);
      uint64_t v46 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) > v46)
      {
        *(_DWORD *)(v14 + 144) = v46 + 1;
        uint64_t v45 = *(void *)(v14 + 136) + 40LL * v46;
        *(_DWORD *)uint64_t v45 = 94;
        *(_DWORD *)(v45 + 4) = v16;
        *(_DWORD *)(v45 + 8) = v44;
        *(_DWORD *)(v45 + 12) = a5;
        *(void *)(v45 + 24) = 0LL;
        *(void *)(v45 + 32) = 0LL;
        *(void *)(v45 + 16) = 0LL;
      }

      else
      {
        sub_18131044C(v14, 94LL, v16, v44, a5, a6, a7, a8);
      }

      int v44 = (v44 + 1);
    }

    while ((_DWORD)v17 != (_DWORD)v44);
  }

  uint64_t v47 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v47)
  {
    sub_18131044C(v14, 97LL, v36, v17, v302, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v47 + 1;
    v48 = *(void *)(v14 + 136) + 40LL * v47;
    *(_DWORD *)v48 = 97;
    *(_DWORD *)(v48 + 4) = v36;
    *(_DWORD *)(v48 + 8) = v17;
    *(_DWORD *)(v48 + 12) = v302;
    *(void *)(v48 + 24) = 0LL;
    *(void *)(v48 + 32) = 0LL;
    *(void *)(v48 + 16) = 0LL;
  }

  v293 = v19;
  uint64_t v49 = v19 + 1;
  uint64_t v50 = *(void *)(v12 + 16);
  v300 = v49;
  if (v50)
  {
    int v51 = *(unsigned int *)v50;
    unsigned int v52 = *(_DWORD *)(v12 + 120);
    v53 = sub_18131A140(*(void *)v11, *(_DWORD *)v50, 1);
    v56 = v53;
    v286 = v51 - 1;
    if ((int)v51 >= 1 && v53 != 0)
    {
      v62 = 0LL;
      uint64_t v63 = v50 + 8;
      do
      {
        uint64_t v64 = sub_181289D04((uint64_t)v304, *(unsigned __int8 **)v63, v54, v55, a5, a6, a7, a8);
        if (!v64) {
          uint64_t v64 = *(void *)(*v304 + 16);
        }
        *(void *)(v56 + 32 + 8 * v62) = v64;
        *(_BYTE *)(*(void *)(v56 + 24) + v62++) = *(_BYTE *)(v63 + 16);
        v63 += 24LL;
      }

      while (v51 != v62);
    }

    uint64_t v58 = (v52 + v36);
    uint64_t v50 = (*((_DWORD *)v304 + 14) + 1);
    *((_DWORD *)v304 + 14) = v50;
    v59 = *(unsigned int *)(v12 + 108);
    uint64_t v60 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v60)
    {
      uint64_t v60 = sub_18131044C(v14, 90LL, v58, v59, v51, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v60 + 1;
      v61 = *(void *)(v14 + 136) + 40LL * v60;
      *(_DWORD *)v61 = 90;
      *(_DWORD *)(v61 + 4) = v58;
      *(_DWORD *)(v61 + 8) = v59;
      *(_DWORD *)(v61 + 12) = v51;
      *(void *)(v61 + 24) = 0LL;
      *(void *)(v61 + 32) = 0LL;
      *(void *)(v61 + 16) = 0LL;
    }

    if (*(_BYTE *)(*(void *)v14 + 103LL))
    {
      uint64_t v49 = v300;
      if (v56)
      {
        if (!*(void *)(*(void *)v14 + 816LL))
        {
          unsigned int v24 = (*(_DWORD *)v56)-- == 1;
          if (v24) {
            sub_1813014B0(*(void **)(v56 + 16), (void *)v56);
          }
        }
      }
    }

    else
    {
      v65 = *(void *)(v14 + 136) + 40LL * *(int *)(v14 + 144);
      *(_BYTE *)(v65 - 39) = -8;
      *(void *)(v65 - 24) = v56;
      uint64_t v49 = v300;
    }

    v66 = (v60 + 2);
    v67 = (v60 + 4);
    v68 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v68)
    {
      sub_18131044C(v14, 14LL, v66, v67, (v60 + 2), a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v68 + 1;
      v69 = *(void *)(v14 + 136) + 40LL * v68;
      *(_DWORD *)v69 = 14;
      *(_DWORD *)(v69 + 4) = v66;
      *(_DWORD *)(v69 + 8) = v67;
      *(_DWORD *)(v69 + 12) = v66;
      *(void *)(v69 + 24) = 0LL;
      *(void *)(v69 + 32) = 0LL;
      *(void *)(v69 + 16) = 0LL;
    }

    unsigned int v11 = (uint64_t)v304;
    v70 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v70)
    {
      v285 = sub_18131044C(v14, 10LL, v50, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      v285 = *(_DWORD *)(v14 + 144);
      *(_DWORD *)(v14 + 144) = v70 + 1;
      v71 = *(void *)(v14 + 136) + 40LL * v70;
      *(_DWORD *)v71 = 10;
      *(_DWORD *)(v71 + 4) = v50;
      *(_OWORD *)(v71 + 8) = 0u;
      *(_OWORD *)(v71 + 24) = 0u;
    }

    a4 = *(unsigned int *)(v12 + 108);
    v72 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v72)
    {
      sub_18131044C(v14, 80LL, v58, a4, v286, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v72 + 1;
      v73 = *(void *)(v14 + 136) + 40LL * v72;
      *(_DWORD *)v73 = 80;
      *(_DWORD *)(v73 + 4) = v58;
      *(_DWORD *)(v73 + 8) = a4;
      *(_DWORD *)(v73 + 12) = v286;
      *(void *)(v73 + 24) = 0LL;
      *(void *)(v73 + 32) = 0LL;
      *(void *)(v73 + 16) = 0LL;
    }
  }

  else
  {
    v285 = 0;
  }

  v74 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v74)
  {
    sub_18131044C(v14, 127LL, v49, v30, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v74 + 1;
    v75 = *(void *)(v14 + 136) + 40LL * v74;
    *(_DWORD *)v75 = 127;
    *(_DWORD *)(v75 + 4) = v49;
    *(_DWORD *)(v75 + 8) = v30;
    *(void *)(v75 + 12) = 0LL;
    *(void *)(v75 + 28) = 0LL;
    *(void *)(v75 + 20) = 0LL;
    *(_DWORD *)(v75 + 36) = 0;
  }

  v76 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v76)
  {
    sub_18131044C(v14, 128LL, v49, v302, v30, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v76 + 1;
    v77 = *(void *)(v14 + 136) + 40LL * v76;
    *(_DWORD *)v77 = 128;
    *(_DWORD *)(v77 + 4) = v49;
    *(_DWORD *)(v77 + 8) = v302;
    *(_DWORD *)(v77 + 12) = v30;
    *(void *)(v77 + 24) = 0LL;
    *(void *)(v77 + 32) = 0LL;
    *(void *)(v77 + 16) = 0LL;
  }

  v78 = *(unsigned int *)(v12 + 128);
  v79 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v79)
  {
    v287 = sub_18131044C(v14, 52LL, v78, 0LL, v30, a6, a7, a8);
    v81 = *(void *)(v11 + 16);
    if (!v81) {
      goto LABEL_95;
    }
  }

  else
  {
    v287 = *(_DWORD *)(v14 + 144);
    *(_DWORD *)(v14 + 144) = v79 + 1;
    v80 = *(void *)(v14 + 136) + 40LL * v79;
    *(_DWORD *)v80 = 52;
    *(_DWORD *)(v80 + 4) = v78;
    *(_DWORD *)(v80 + 8) = 0;
    *(_DWORD *)(v80 + 12) = v30;
    *(void *)(v80 + 24) = 0LL;
    *(void *)(v80 + 32) = 0LL;
    *(void *)(v80 + 16) = 0LL;
    v81 = *(void *)(v11 + 16);
    if (!v81)
    {
LABEL_95:
      if (!*(void *)(v11 + 168) && (*(_BYTE *)(*(void *)v11 + 96LL) & 8) == 0) {
        *(_BYTE *)(v11 + 35) = 1;
      }
      v81 = sub_1812DC63C((uint64_t *)v11, a2, v78, a4, a5, a6, a7, a8);
    }
  }

  v303 = v50;
  v82 = 0;
  v83 = v12;
  do
  {
    v85 = *(void *)(v83 + 80);
    v86 = *(unsigned int *)(v83 + 92);
    v87 = *(_DWORD *)(v81 + 144);
    if (*(_DWORD *)(v81 + 148) <= v87)
    {
      sub_18131044C(v81, 75LL, 0LL, v86, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v81 + 144) = v87 + 1;
      v88 = *(void *)(v81 + 136) + 40LL * v87;
      *(void *)v88 = 75LL;
      *(_DWORD *)(v88 + 8) = v86;
      *(void *)(v88 + 12) = 0LL;
      *(void *)(v88 + 28) = 0LL;
      *(void *)(v88 + 20) = 0LL;
      *(_DWORD *)(v88 + 36) = 0;
    }

    v89 = *(int **)(*(void *)(v83 + 112) + 32LL);
    if (!v89)
    {
      if (v82 > 0) {
        goto LABEL_111;
      }
      v90 = 0;
LABEL_110:
      v82 = v90;
      goto LABEL_111;
    }

    v90 = *v89;
    if (v82 <= v90) {
      goto LABEL_110;
    }
LABEL_111:
    if (*(_DWORD *)(v12 + 132)) {
      goto LABEL_101;
    }
    v91 = *(char **)(v85 + 56);
    if (v91 == "nth_value" || v91 == "first_value")
    {
      v93 = *(unsigned int *)(v83 + 104);
      v94 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v94)
      {
        sub_18131044C(v81, 71LL, 0LL, v93, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v81 + 144) = v94 + 1;
        v95 = *(void *)(v81 + 136) + 40LL * v94;
        *(void *)v95 = 71LL;
        *(_DWORD *)(v95 + 8) = v93;
        *(void *)(v95 + 12) = 0LL;
        *(void *)(v95 + 28) = 0LL;
        *(void *)(v95 + 20) = 0LL;
        *(_DWORD *)(v95 + 36) = 0;
      }

      v86 = (*(_DWORD *)(v83 + 104) + 1);
      v96 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v96)
      {
        sub_18131044C(v81, 71LL, 0LL, v86, 0LL, a6, a7, a8);
        if ((*(_BYTE *)(v85 + 5) & 0x10) == 0) {
          goto LABEL_101;
        }
        goto LABEL_125;
      }

      *(_DWORD *)(v81 + 144) = v96 + 1;
      v97 = *(void *)(v81 + 136) + 40LL * v96;
      *(void *)v97 = 71LL;
      *(_DWORD *)(v97 + 8) = v86;
      *(void *)(v97 + 12) = 0LL;
      *(void *)(v97 + 28) = 0LL;
      *(void *)(v97 + 20) = 0LL;
      *(_DWORD *)(v97 + 36) = 0;
    }

    if ((*(_BYTE *)(v85 + 5) & 0x10) == 0) {
      goto LABEL_101;
    }
LABEL_125:
    v78 = *(unsigned int *)(v83 + 100);
    if ((_DWORD)v78)
    {
      v98 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v98)
      {
        sub_18131044C(v81, 146LL, v78, 0LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v81 + 144) = v98 + 1;
        v99 = *(void *)(v81 + 136) + 40LL * v98;
        *(_DWORD *)v99 = 146;
        *(_DWORD *)(v99 + 4) = v78;
        *(_OWORD *)(v99 + 8) = 0u;
        *(_OWORD *)(v99 + 24) = 0u;
      }

      v86 = (*(_DWORD *)(v83 + 104) + 1);
      v100 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) > v100)
      {
        *(_DWORD *)(v81 + 144) = v100 + 1;
        v84 = *(void *)(v81 + 136) + 40LL * v100;
        *(void *)v84 = 71LL;
        *(_DWORD *)(v84 + 8) = v86;
        *(void *)(v84 + 12) = 0LL;
        *(void *)(v84 + 28) = 0LL;
        *(void *)(v84 + 20) = 0LL;
        *(_DWORD *)(v84 + 36) = 0;
      }

      else
      {
        sub_18131044C(v81, 71LL, 0LL, v86, 0LL, a6, a7, a8);
      }
    }

  uint64_t v31 = *(unsigned int *)(a1 + 44);
  if (*(_DWORD *)(v14 + 148) <= (int)v77)
  {
    sub_18131044C(v14, 135LL, v31, v25, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v77 + 1;
    uint64_t v32 = *(void *)(v14 + 136) + 40LL * (int)v77;
    *(_DWORD *)uint64_t v32 = 135;
    *(_DWORD *)(v32 + 4) = v31;
    *(_DWORD *)(v32 + 8) = v25;
    *(void *)(v32 + 12) = 0LL;
    *(void *)(v32 + 28) = 0LL;
    *(void *)(v32 + 20) = 0LL;
    *(_DWORD *)(v32 + 36) = 0;
  }

  a3 = *(unsigned int *)(a1 + 60);
  v33 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v33)
  {
    sub_18131044C(v14, 135LL, a3, v27, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v33 + 1;
    uint64_t v34 = *(void *)(v14 + 136) + 40LL * v33;
    *(_DWORD *)uint64_t v34 = 135;
    *(_DWORD *)(v34 + 4) = a3;
    *(_DWORD *)(v34 + 8) = v27;
    *(void *)(v34 + 12) = 0LL;
    *(void *)(v34 + 28) = 0LL;
    *(void *)(v34 + 20) = 0LL;
    *(_DWORD *)(v34 + 36) = 0;
  }

  uint64_t v35 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) > v35)
  {
    *(_DWORD *)(v14 + 144) = v35 + 1;
    int v36 = *(void *)(v14 + 136) + 40LL * v35;
    *(_DWORD *)int v36 = 57;
    *(_DWORD *)(v36 + 4) = v27;
LABEL_43:
    *(_DWORD *)(v36 + 8) = v17;
    *(_DWORD *)(v36 + 12) = v25;
    *(void *)(v36 + 24) = 0LL;
    *(void *)(v36 + 32) = 0LL;
    *(void *)(v36 + 16) = 0LL;
LABEL_44:
    if (!(_DWORD)v25) {
      goto LABEL_50;
    }
LABEL_48:
    int v39 = *(unsigned __int8 *)(v12 + 31);
    if (v39 <= 7)
    {
      *(_BYTE *)(v12 + 31) = v39 + 1;
      *(_DWORD *)(v12 + 4 * v39 + 224) = v25;
    }

    goto LABEL_50;
  }

  unsigned int v37 = v14;
  a3 = v27;
LABEL_47:
  sub_18131044C(v37, 57LL, a3, v17, v25, a6, a7, a8);
  if ((_DWORD)v25) {
    goto LABEL_48;
  }
LABEL_50:
  if ((_DWORD)v27)
  {
    v40 = *(unsigned __int8 *)(v12 + 31);
    if (v40 <= 7)
    {
      *(_BYTE *)(v12 + 31) = v40 + 1;
      *(_DWORD *)(v12 + 4 * v40 + 224) = v27;
    }
  }

    int result = sub_181342228(v13, a2, v23, a3, a5, a6, a7, a8);
    if (result)
    {
      uint64_t v35 = result;
      int v36 = v13[2];
      if (!v36)
      {
        if (!v13[21] && (*(_BYTE *)(*v13 + 96) & 8) == 0) {
          *((_BYTE *)v13 + 35) = 1;
        }
        int v36 = sub_1812DC63C(v13, v32, v33, v34, a5, a6, a7, a8);
      }

      int result = (uint64_t *)sub_18133FC68(v13, (uint64_t)v35, a2, 2LL);
      if (result)
      {
        if (*v35) {
          unsigned int v37 = (*(_BYTE *)(*v13 + 49) & 0x20) == 0;
        }
        else {
          unsigned int v37 = 0;
        }
        uint64_t v38 = (*((_DWORD *)v13 + 14) + 1);
        *((_DWORD *)v13 + 14) = v38;
        int result = (uint64_t *)sub_1812B9B68((uint64_t *)v36, 48LL, a4, 0LL, v38, result[2], 4294967292LL, a8);
        int v39 = *(_DWORD *)(v36 + 144);
        v40 = __OFSUB__(v39, 1);
        int v41 = v39 - 1;
        if (v41 < 0 == v40) {
          *(_WORD *)(*(void *)(v36 + 136) + 40LL * v41 + 2) = v37;
        }
      }
    }

    goto LABEL_11;
  }

  return result;
}

  int v19 = *((_DWORD *)a2 + 12);
  if ((v19 & 0x8000) == 0)
  {
    if ((v19 & 0x1000) == 0) {
      return 0LL;
    }
    uint64_t v20 = *(void *)a1;
    if ((*(_BYTE *)(*(void *)a1 + 51LL) & 0x10) == 0
      || *(void *)(v20 + 592)
      || *(_DWORD *)(v20 + 220)
      || *(int *)(v20 + 564) >= 1 && !*(void *)(v20 + 600))
    {
      return 0LL;
    }
  }

  unsigned int v17 = *(_WORD *)(v15 + 20);
  if ((v17 & 0x24) != 0)
  {
    LODWORD(v16) = *(_DWORD *)v15;
    goto LABEL_33;
  }

  if ((v17 & 8) != 0)
  {
    v43 = *(double *)v15;
    if (*(double *)v15 >= -9.22337204e18)
    {
      if (v43 <= 9.22337204e18) {
        __int128 v16 = (uint64_t)v43;
      }
      else {
        LODWORD(v16) = -1;
      }
    }

    else
    {
      LODWORD(v16) = 0;
    }

    goto LABEL_33;
  }

  if ((v17 & 0x12) != 0 && *(void *)(v15 + 8))
  {
    LODWORD(v16) = sub_181303DF0(v15);
    goto LABEL_33;
  }

  unsigned int v11 = *(void *)(v1 + 88);
  if (!v11) {
    goto LABEL_38;
  }
  BOOL v12 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_37;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
  --qword_18C468B10;
  off_18C4653A8(v11);
  unsigned int v11 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    BOOL v12 = &xmmword_18C465410;
LABEL_37:
    (*v12)(v11);
  }

      __int128 v23 = &v8[v10];
      unsigned int v11 = (_DWORD)i - (_DWORD)v8 - v10;
      goto LABEL_32;
    }

    if (v11 == 91)
    {
      int v19 = &v8[v10 + 1];
      do
      {
        int v21 = *v19++;
        uint64_t v20 = v21;
      }

      while (v21 != 93 && v20 != 0);
      if (v20) {
        LODWORD(i) = (_DWORD)v19;
      }
      else {
        LODWORD(i) = (_DWORD)v19 - 1;
      }
      goto LABEL_31;
    }

      BOOL v12 = i[7];
      if (!v12) {
        goto LABEL_38;
      }
      int v13 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_37;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
      --qword_18C468B10;
      off_18C4653A8(v12);
      BOOL v12 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v13 = &xmmword_18C465410;
LABEL_37:
        (*v13)(v12);
      }

  int v13 = 0LL;
  uint64_t v14 = a3 + 88;
  while (v13 < *(int *)(a3 + 80))
  {
    if (*(void *)(v14 + 32))
    {
      uint64_t v45 = 0;
      int v44 = 0LL;
      int result = sub_1813711F8(v4, v14, *(_DWORD *)(a3 + 84), &v45, &v44);
      if (!(_DWORD)result) {
        int result = sub_181371838(v4, a3, v13, v44, v45);
      }
    }

    else
    {
      int result = 0LL;
    }

    ++v13;
    v14 += 40LL;
    if ((_DWORD)result)
    {
      __int128 v16 = 0;
      goto LABEL_40;
    }
  }

  __int128 v16 = 0;
  int result = 0LL;
LABEL_40:
  *(_DWORD *)(a3 + 56) = v16;
  return result;
}

    sub_1812CF36C(97498);
    return;
  }

  if (!v5)
  {
    if (a1)
    {
      unsigned int v11 = "Index optimized";
LABEL_25:
      sub_1812D7A8C((uint64_t)a1, v11, -1, 1u, 0LL);
      return;
    }

    goto LABEL_31;
  }

  if (!a1)
  {
    sub_1812CF36C(97620);
    return;
  }

  a1[9] = v5;
  if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
  {
    if (v5 == 516)
    {
      unsigned int v11 = "abort due to ROLLBACK";
    }

    else if (v5 == 100)
    {
      unsigned int v11 = "another row available";
    }

    else if (v5 > 0x1Cu || ((0x1410004uLL >> v5) & 1) != 0)
    {
      unsigned int v11 = "unknown error";
    }

    else
    {
      unsigned int v11 = off_189B6EC30[v5];
    }

    goto LABEL_25;
  }

          sub_1813809E0(v17, *(unsigned int *)(v7 + 48));
          int result = v24;
          if (*((_BYTE *)v4 + 10) || v24) {
            goto LABEL_35;
          }
        }
      }

      int result = v24;
      if (v24) {
        goto LABEL_35;
      }
      goto LABEL_31;
    }

  switch(v13[(int)v8 - 2])
  {
    case 'a':
      if ((int)v8 < 8)
      {
        if ((_DWORD)v8 != 7) {
          goto LABEL_439;
        }
        goto LABEL_236;
      }

      uint64_t v26 = (v8 - 7);
      uint64_t v27 = &v13[v26];
      if (*(_DWORD *)&v13[v26] != 1869182049 || *(_DWORD *)&v13[v26 + 3] != 1818324591)
      {
LABEL_236:
        v144 = (v8 - 6);
        v145 = &v13[v144];
        v146 = *(_DWORD *)&v13[v144] == 1852795252 && *(_WORD *)&v13[v144 + 4] == 27745;
        if (v146 && sub_1813AA198(v13, v144))
        {
          *v145 = 1852795252;
          unsigned int v8 = (int)v8 - 2LL;
        }

        goto LABEL_439;
      }

      v29 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v29 <= 0xA && (uint64_t v30 = 1, ((1 << v29) & 0x495) != 0))
      {
        uint64_t v31 = 0;
      }

      else
      {
        uint64_t v31 = 1;
        if ((_DWORD)v8 == 8)
        {
          uint64_t v30 = 0;
        }

        else
        {
          v379 = 1LL;
          while (1)
          {
            v380 = v13[v379];
            v381 = (((v380 - 97) >> 1) | (((_BYTE)v380 - 97) << 7));
            __int128 v23 = v381 > 0xA;
            v382 = (1 << v381) & 0x495;
            v383 = v23 || v382 == 0;
            if (!v383 || v380 == 121) {
              break;
            }
            if (v26 == ++v379)
            {
              uint64_t v30 = 0;
              uint64_t v31 = v8 - 7;
              goto LABEL_41;
            }
          }

          uint64_t v30 = 1;
          uint64_t v31 = v379;
        }
      }

  __int128 v16 = sub_1813AC8AC((uint64_t)&v48, "SELECT * FROM %Q.'%q_rowid'", v11, v8);
  if (!v16)
  {
    if (DWORD2(v53) == 7) {
      int v21 = 7;
    }
    else {
      int v21 = 0;
    }
    DWORD2(v53) = v21;
    goto LABEL_39;
  }

  unsigned int v17 = (unsigned __int16 *)v16;
  unsigned int v18 = *(void *)(*(void *)v16 + 24LL);
  if (v18)
  {
    xmmword_18C465400(v18);
    int v19 = *(void *)(*(void *)v17 + 24LL);
    uint64_t v20 = v17[130];
    if (v19) {
      xmmword_18C465410(v19);
    }
  }

  else
  {
    uint64_t v20 = v17[130];
  }

  sqlite3_finalize((sqlite3_stmt *)v17);
  uint64_t v22 = 1 - v20;
LABEL_42:
  __int128 v23 = sub_1813AC8AC((uint64_t)&v48, "SELECT * FROM %Q.%Q", v11, v8);
  if (v23)
  {
    unsigned int v24 = (sqlite3_stmt *)v23;
    uint64_t v25 = *(void *)(*(void *)v23 + 24LL);
    if (v25)
    {
      xmmword_18C465400(v25);
      uint64_t v26 = *(void *)(*(void *)v24 + 24LL);
      uint64_t v27 = *((unsigned __int16 *)v24 + 130);
      if (v26) {
        xmmword_18C465410(v26);
      }
    }

    else
    {
      uint64_t v27 = *((unsigned __int16 *)v24 + 130);
    }

    uint64_t v28 = v22 + v27;
    if (v22 + v27 < 0 != __OFADD__(v22, v27)) {
      v29 = v28 + 1;
    }
    else {
      v29 = v22 + v27;
    }
    HIDWORD(pStmt[0]) = v29 >> 1;
    if (v28 > 1)
    {
      if (sqlite3_step(v24) == 100)
      {
        uint64_t v30 = *(void *)(*(void *)v24 + 24LL);
        if (v30) {
          xmmword_18C465400(v30);
        }
        uint64_t v31 = *((void *)v24 + 20);
        if (v31 && *((unsigned __int16 *)v24 + 130) >= 2u)
        {
          uint64_t v32 = (uint64_t *)(v31 + 64);
        }

        else
        {
          v33 = *(void *)v24;
          *(_DWORD *)(v33 + 80) = 25;
          sub_1812FA264(v33, 25);
          uint64_t v32 = &qword_1813C6E90;
        }

        uint64_t v34 = *((_WORD *)v32 + 10);
        uint64_t v35 = *(void *)v24;
        int v36 = *((_DWORD *)v24 + 13);
        if (v36 || (unsigned int v37 = *(unsigned __int8 *)(v35 + 103), *(_BYTE *)(v35 + 103)))
        {
          unsigned int v37 = sub_1813037C4(v35, v36);
          uint64_t v35 = *(void *)v24;
        }

        uint64_t v38 = v34 & 0x3F;
        *((_DWORD *)v24 + 13) = v37;
        int v39 = *(void *)(v35 + 24);
        if (v39) {
          xmmword_18C465410(v39);
        }
        LODWORD(pStmt[0]) = (0x50505050uLL >> v38) & 1;
      }
    }

    else
    {
      sub_1813AC9BC((char *)&v48, "Schema corrupt or not an rtree");
    }

    v40 = sqlite3_finalize(v24);
    if (v40 != 11) {
      DWORD2(v53) = v40;
    }
  }

  if (SHIDWORD(pStmt[0]) >= 1)
  {
    if (!DWORD2(v53)) {
      sub_1813ACA5C((uint64_t)&v48, 0, 0LL, 1LL);
    }
    sub_1813ACF20((uint64_t)&v48, "_rowid", (int)v53);
    sub_1813ACF20((uint64_t)&v48, "_parent", SDWORD1(v53));
  }

  sqlite3_finalize(pStmt[1]);
  sqlite3_finalize(v52[0]);
  sqlite3_finalize(v52[1]);
  if (v15)
  {
    int v41 = DWORD2(v53);
    unsigned int v42 = (char *)v54;
    if (DWORD2(v53))
    {
LABEL_74:
      if (!a1)
      {
        sub_1812CF36C(97620);
        goto LABEL_102;
      }

      *(_DWORD *)(a1 + 36) = v41;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) == 0) {
        goto LABEL_102;
      }
      switch(v41)
      {
        case 516:
          v43 = "abort due to ROLLBACK";
          break;
        case 101:
          v43 = "no more rows available";
          break;
        case 100:
          v43 = "another row available";
          break;
        default:
          else {
            v43 = off_189B6EC30[v41];
          }
          break;
      }

      uint64_t v45 = a1;
      uint64_t v46 = 0LL;
      goto LABEL_101;
    }
  }

  else
  {
    int v44 = sqlite3_exec(v12, "END", 0LL, 0LL, 0LL);
    int v41 = DWORD2(v53);
    if (!DWORD2(v53)) {
      int v41 = v44;
    }
    DWORD2(v53) = v41;
    unsigned int v42 = (char *)v54;
    if (v41) {
      goto LABEL_74;
    }
  }

  if (!a1)
  {
    sub_1812CF36C(97498);
    goto LABEL_102;
  }

  if (v42) {
    v43 = v42;
  }
  else {
    v43 = "ok";
  }
  uint64_t v45 = a1;
  uint64_t v46 = -1LL;
LABEL_101:
  sub_1812D7A8C(v45, v43, -1, 1u, (uint64_t (*)(uint64_t))v46);
LABEL_102:
  if (!v42) {
    return;
  }
  uint64_t v47 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_108;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v42);
  --qword_18C468B10;
  off_18C4653A8(v42);
  unsigned int v42 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v47 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_108:
    (*v47)(v42);
  }

  *a1 = &v5[v17];
  return v10;
}

uint64_t sub_181269368( uint64_t a1, char *__s, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t result))
{
  if (!__s)
  {
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    {
      sub_181303888((int *)a1);
      return 0LL;
    }

    else
    {
      uint64_t result = 0LL;
      *(_WORD *)(a1 + 20) = 1;
    }

    return result;
  }

  unsigned int v7 = a4;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 136);
    BOOL v12 = a4 == 1;
    BOOL v13 = a4 > 1;
    if ((a3 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v11 = 2147483645LL;
    BOOL v12 = a4 == 1;
    BOOL v13 = a4 > 1;
    if ((a3 & 0x8000000000000000LL) == 0)
    {
LABEL_4:
      if (v13) {
        int v14 = a4;
      }
      else {
        int v14 = 1;
      }
      if (a4) {
        __int16 v15 = 2;
      }
      else {
        __int16 v15 = 16;
      }
      unsigned int v7 = v14;
      int64_t v16 = a3;
      if (a3 > v11) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
  }

  if (v12)
  {
    int64_t v16 = strlen(__s);
  }

  else
  {
    int64_t v16 = 0LL;
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      do
      {
        v16 += 2LL;
      }

      while (v16 <= v11);
    }
  }

  __int16 v15 = 514;
  if (v16 > v11)
  {
LABEL_11:
    if ((unint64_t)a5 + 1 >= 2)
    {
      if (a5 == sub_1812E1FD0) {
        sub_1812F20DC((void *)v10, __s);
      }
      else {
        a5((uint64_t)__s);
      }
    }

    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    {
      sub_181303888((int *)a1);
      uint64_t v28 = *(void *)(a1 + 24);
      if (v28) {
        goto LABEL_64;
      }
    }

    else
    {
      *(_WORD *)(a1 + 20) = 1;
      uint64_t v28 = *(void *)(a1 + 24);
      if (v28)
      {
LABEL_64:
        uint64_t v29 = *(void *)(v28 + 344);
        uint64_t result = 18LL;
        if (v29)
        {
          *(_DWORD *)(v29 + 24) = 18;
          ++*(_DWORD *)(v29 + 48);
        }

        return result;
      }
    }

    return 18LL;
  }

LABEL_25:
  if (a5 == (uint64_t (*)(uint64_t))-1LL)
  {
    uint64_t v19 = 1LL;
    if (v7 != 1) {
      uint64_t v19 = 2LL;
    }
    if (a3 >= 0) {
      uint64_t v19 = 0LL;
    }
    size_t v20 = v19 + v16;
    if (v19 + v16 <= 32) {
      signed int v21 = 32;
    }
    else {
      signed int v21 = v19 + v16;
    }
    if (*(_DWORD *)(a1 + 32) >= v21)
    {
      uint64_t v22 = *(void **)(a1 + 40);
      *(void *)(a1 + 8) = v22;
      *(_WORD *)(a1 + 20) &= 0x2Du;
    }

    else
    {
      uint64_t v22 = *(void **)(a1 + 8);
    }

    memcpy(v22, __s, v20);
  }

  else
  {
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32)) {
      sub_181303838(a1);
    }
    *(void *)(a1 + 8) = __s;
    if (a5 == sub_1812E1FD0)
    {
      *(void *)(a1 + 40) = __s;
      uint64_t v23 = *(void *)(a1 + 24);
      if (v23 && *(void *)(v23 + 520) > (unint64_t)__s)
      {
        if (*(void *)(v23 + 496) <= (unint64_t)__s)
        {
          *(_DWORD *)(a1 + 32) = 128;
          goto LABEL_51;
        }

        if (*(void *)(v23 + 504) <= (unint64_t)__s)
        {
          *(_DWORD *)(a1 + 32) = *(unsigned __int16 *)(v23 + 438);
          goto LABEL_51;
        }
      }

      *(_DWORD *)(a1 + 32) = off_18C4653B8(__s);
    }

    else
    {
      *(void *)(a1 + 48) = a5;
      *(_BYTE *)(a1 + 56) = 0;
      if (a5) {
        __int16 v18 = 4096;
      }
      else {
        __int16 v18 = 0x2000;
      }
      v15 |= v18;
    }
  }

    ++v14;
  }

  while (v14 != 4);
  if (!v15) {
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v6 = sub_18127F1E4((uint64_t)a1, v15, 0, 0LL);
  if (!(_DWORD)v6)
  {
    int v39 = 0LL;
    v40 = *(void *)(v15 + 16);
    while (*(void *)(v40 + 8 * v39++))
      ;
    *(void *)(v40 + 8 * v39 - 8) = v7;
    unsigned int v42 = *a1;
    v43 = a1[1];
    int v44 = v43 + v42;
    uint64_t v45 = *(void *)(v15 + 24) + ((int)v43 + (int)v42) * ((int)v39 - 1);
    *(void *)unsigned int v7 = v45;
    *(void *)(v7 + 8) = v45 + v42;
    *(void *)(v7 + 56) = v15;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 += v44;
      if (qword_18C468AC8 > qword_18C468B18) {
        qword_18C468B18 = qword_18C468AC8;
      }
      uint64_t v46 = qword_18C468B10;
      uint64_t v47 = ++qword_18C468B10;
      if (v46 >= qword_18C468B60) {
        qword_18C468B60 = v47;
      }
      uint64_t v6 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70) {
        uint64_t v6 = xmmword_18C465410(xmmword_18C468B70);
      }
    }
  }

  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  return result;
}

  int v25 = v20 + v19;
  if ((*(_BYTE *)(v25 + 2) || *(_BYTE *)(v25 + 1)) && v21 + 2 <= v23)
  {
    unsigned int v37 = v19;
    int v26 = sub_18130A988(a1, a4, &v39);
    if (v26)
    {
      uint64_t v19 = v37;
      char v27 = (unint64_t)v26 - v37;
      if (v21 < (int)v26 - (int)v37)
      {
        uint64_t v28 = v27 >> 8;
        goto LABEL_39;
      }

      unsigned int v24 = 78682LL;
      return sub_1812FD54C(v24, a1);
    }

    uint64_t result = v39;
    uint64_t v19 = v37;
    if (v39) {
      return result;
    }
  }

  if (v12 + v21 > v23)
  {
    if (*(_DWORD *)(a1 + 20) - v12 >= 4) {
      uint64_t v29 = 4;
    }
    else {
      uint64_t v29 = *(_DWORD *)(a1 + 20) - v12;
    }
    uint64_t v30 = v19;
    uint64_t result = sub_1812C01F4(a1, v29);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v19 = v30;
    uint64_t v23 = (unsigned __int16)(_byteswap_ushort(*v22) - 1) + 1;
  }

  LODWORD(v27) = v23 - a4;
  LODWORD(v28) = v27 >> 8;
  *uint64_t v22 = bswap32(v27) >> 16;
LABEL_39:
  *(_DWORD *)(a1 + 20) -= (unsigned __int16)v12;
  uint64_t v31 = (_DWORD *)(v19 + (int)v27);
  uint64_t v32 = a4 - 4;
  v33 = v19;
  memcpy(v31 + 1, __src + 4, v32);
  *uint64_t v31 = bswap32(a6);
  uint64_t v34 = (_BYTE *)(*(void *)(a1 + 96) + 2LL * a2);
  memmove(v34 + 2, v34, 2 * (*(unsigned __int16 *)(a1 + 24) - a2));
  *uint64_t v34 = v28;
  v34[1] = v27;
  ++*(_WORD *)(a1 + 24);
  uint64_t v35 = *(unsigned __int8 *)(a1 + 9) + v33;
  int v36 = (*(_BYTE *)(v35 + 4))++ + 1;
  if ((v36 & 0x100) != 0) {
    ++*(_BYTE *)(*(unsigned __int8 *)(a1 + 9) + v33 + 3);
  }
  if (!*(_BYTE *)(*(void *)(a1 + 72) + 33LL)) {
    return 0LL;
  }
  uint64_t v38 = 0;
  sub_181301084((_DWORD *)a1, a1, (unint64_t)__src, &v38);
  return v38;
}

    LODWORD(v155) = 0;
    unsigned int v24 = **(void **)(a1 + 8);
    if (v24) {
      (*(void (**)(void))(v24 + 80))();
    }
    signed int v21 = sub_18127C8C0(a1, &v151);
    if (v22)
    {
      int v25 = *(void *)(a1 + 160);
      if (v25)
      {
        LODWORD(v155) = *(_DWORD *)(v25 + 772);
        if ((_DWORD)v155)
        {
          int v26 = *(void *)(a1 + 8);
          if (*(void *)v26) {
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v26 + 80LL))(v26, 34LL, &v155);
          }
        }
      }
    }

    if (v151)
    {
      char v27 = *(void *)(a1 + 8);
    }

  *a3 = v45;
  return v23;
}

  unsigned int v8 = (char *)sub_18127F588(a2, "VACUUM %w INTO '%q'", a3, a4, a5, a6, a7, a8, (char)v13);
  int v26 = sqlite3_exec((sqlite3 *)a2, v8, 0LL, 0LL, 0LL);
  if (v8) {
    sub_1812F20DC((void *)a2, v8);
  }
  if ((_DWORD)v26)
  {
LABEL_31:
    char v27 = 0;
    uint64_t v28 = *(void *)(a2 + 24);
    if (!v28) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  LODWORD(v8) = *(_DWORD *)(a2 + 76) & 0xFFFFFFFC | 2;
  char v27 = *(unsigned __int8 *)(**(void **)(*(void *)(*(void *)(a2 + 32) + 32LL * v15 + 8) + 8LL) + 9LL) == 5;
  uint64_t v28 = *(void *)(a2 + 24);
  if (v28) {
LABEL_32:
  }
    xmmword_18C465410(v28);
LABEL_33:
  if (v27)
  {
    int v26 = sub_181266F84(a1, (uint64_t *)&v32, v8, 0LL);
    uint64_t v29 = v32;
    if (!(_DWORD)v26)
    {
      int v26 = sqlite3_exec(v32, "PRAGMA journal_mode=wal", 0LL, 0LL, 0LL);
      sqlite3_exec(v32, "PRAGMA user_version", 0LL, 0LL, 0LL);
      uint64_t v29 = v32;
    }
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  sub_1812E03C8((uint64_t)v29, 0);
  return v26;
}

  xmmword_18C465410(v5);
  return v4;
}

  if (*(unsigned __int8 *)(v8 + 12) >= v5)
  {
    unsigned int v7 = 0LL;
    if (!*(_BYTE *)(a1 + 17)) {
      return v7;
    }
  }

  else
  {
    unsigned int v7 = 0LL;
    *(_BYTE *)(v8 + 12) = v5;
    if (!*(_BYTE *)(a1 + 17)) {
      return v7;
    }
  }

  uint64_t v6 = *((void *)a1 + 17);
  unsigned int v7 = *((_WORD *)a1 + 43) + 1;
  *((_WORD *)a1 + 43) = v7;
  if (off_18C465520 && off_18C465520(412LL))
  {
    *(_BYTE *)uint64_t v6 = 0;
    return sub_1812FBF50(83063);
  }

  if (!*(_BYTE *)v6) {
    return sub_1812FBF50(83063);
  }
  if (*(unsigned __int16 *)(v6 + 24) > v7)
  {
    if (!*(_BYTE *)(v6 + 8))
    {
      while (1)
      {
        unsigned int v8 = *((void *)a1 + 17);
        if (*(_BYTE *)(v8 + 8)) {
          break;
        }
        uint64_t result = sub_18129BA78( (uint64_t)a1,  bswap32(*(_DWORD *)(*(void *)(v8 + 80)
                                     + (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(void *)(v8 + 96)
                                                                                    + 2LL
                                                                                    * *((unsigned __int16 *)a1 + 43))) & *(_WORD *)(v8 + 26)))));
        if ((_DWORD)result) {
          return result;
        }
      }
    }

    return 0LL;
  }

  if (*(_BYTE *)(v6 + 8))
  {
    do
    {
      __int16 v15 = (char)a1[84];
      if (!a1[84])
      {
        *a1 = 1;
        return 101LL;
      }

      *((_WORD *)a1 + 35) = 0;
      a1[1] &= 0xF9u;
      *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v15 + 86];
      int64_t v16 = *((void *)a1 + 17);
      unsigned int v17 = v15 - 1;
      a1[84] = v17;
      *((void *)a1 + 17) = *(void *)&a1[8 * v17 + 144];
      __int16 v18 = *(void *)(v16 + 112);
      if ((*(_BYTE *)(v18 + 52) & 0x20) != 0)
      {
        uint64_t v19 = *(void *)(v18 + 40);
        --*(_DWORD *)(v19 + 152);
        *(void *)(v18 + 32) = *(void *)(v19 + 168);
        *(void *)(v19 + 168) = v18;
        (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144LL))( *(void *)(v19 + 72),  *(void *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1),  *(void *)(v18 + 8));
      }

      else
      {
        sub_1812F9F44(v18);
      }

      int v14 = *((void *)a1 + 17);
    }

    while (*((unsigned __int16 *)a1 + 43) >= *(unsigned __int16 *)(v14 + 24));
    if (*(_BYTE *)(v14 + 1)) {
      return sub_18129CF68(a1);
    }
    return 0LL;
  }

  for (i = *(_DWORD *)(*(unsigned __int8 *)(v6 + 9) + *(void *)(v6 + 80) + 8LL);
        ;
        i = *(_DWORD *)(v11 + ((v13[1] | (*v13 << 8)) & *(void *)&v12)))
  {
    uint64_t result = sub_18129BA78((uint64_t)a1, bswap32(i));
    if ((_DWORD)result) {
      break;
    }
    uint64_t v10 = *((void *)a1 + 17);
    if (*(_BYTE *)(v10 + 8)) {
      return 0LL;
    }
    uint64_t v11 = *(void *)(v10 + 80);
    BOOL v12 = *(_WORD *)(v10 + 26);
    BOOL v13 = (unsigned __int8 *)(*(void *)(v10 + 96) + 2LL * *((unsigned __int16 *)a1 + 43));
  }

  return result;
}

        ;
      }
    }

    sub_18131EB5C((uint64_t *)a1, v15, v16, v17, v18, v19, v20, v21);
  }

  else
  {
    sub_1812DC47C(a1, "no such index: %S", v16, v17, v18, v19, v20, v21, a2 + 8);
  }

  *(_BYTE *)(a1 + 29) = 1;
  return sub_18128FF4C((void *)v9, (void *)a2);
}

        __int16 v15 = &v11[26 * v13];
        int64_t v16 = (unsigned int *)*((void *)v15 + 10);
        if ((*(_WORD *)((_BYTE *)v15 + 69) & 0x400) != 0)
        {
          unsigned int v17 = *v16;
          if ((int)v17 >= 1)
          {
            for (uint64_t j = 0LL; j != v17; ++j)
            {
              uint64_t v19 = *(void **)(v2 + 408);
              if (v19)
              {
                while (*v19 != *(void *)&v16[4 * j + 2])
                {
                  uint64_t v19 = (void *)v19[3];
                  if (!v19) {
                    goto LABEL_31;
                  }
                }

                *uint64_t v19 = 0LL;
              }

  BOOL v13 = *(_WORD *)(v12 + 20);
  if ((v13 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
  {
    int v14 = *(_DWORD *)(v12 + 16);
  }

  else if ((v13 & 0x10) != 0)
  {
    int v14 = *(_DWORD *)(v12 + 16);
    if ((*(_WORD *)(v12 + 20) & 0x400) != 0) {
      v14 += *(_DWORD *)v12;
    }
  }

  else
  {
    if ((v13 & 1) != 0) {
      goto LABEL_49;
    }
    int v14 = sub_181303970(v12, 1);
  }

  if (v14 < 1)
  {
LABEL_49:
    uint64_t v19 = 0LL;
    size_t v20 = 0LL;
    uint64_t v22 = 1LL;
    if (a1)
    {
LABEL_50:
      uint64_t v23 = *(void *)a1;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
      {
        sub_1813040AC(v23, v22);
      }

      else
      {
        *(void *)uint64_t v23 = v22;
        *(_WORD *)(v23 + 20) = 4;
      }

      goto LABEL_85;
    }

    goto LABEL_48;
  }

  __int16 v15 = v5 == 4 && v7 == 4;
  int64_t v16 = v15;
  if (v15)
  {
    unsigned int v17 = sqlite3_value_blob(*a3);
    __int16 v18 = (unsigned __int8 *)sqlite3_value_blob(a3[1]);
    if (v18)
    {
LABEL_43:
      uint64_t v19 = 0LL;
      size_t v20 = 0LL;
      if (v11 && !v17) {
        goto LABEL_84;
      }
      goto LABEL_45;
    }

  size_t v20 = *(void *)(v10 + 48);
  signed int v21 = a3[5];
  if (!v21) {
    goto LABEL_34;
  }
  uint64_t v22 = *(unsigned __int16 *)(v21 + 20);
  if ((~v22 & 0x202) != 0 || *(_BYTE *)(v21 + 22) != 1)
  {
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = sub_181303998((int *)v21, 1);
      unsigned int v24 = (unsigned int *)a3[6];
      if (v24) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }

  *(_DWORD *)(v1 + 4) = 0;
  return result;
}

  size_t v20 = *(void *)(a1 + 160);
  if (!v20) {
    goto LABEL_32;
  }
  signed int v21 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_31;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
  --qword_18C468B10;
  off_18C4653A8(v20);
  size_t v20 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    signed int v21 = &xmmword_18C465410;
LABEL_31:
    (*v21)(v20);
  }

        v22 += v23;
        if (v22 >= v9)
        {
          *(_DWORD *)(a1 + 152) = 0;
          return v7;
        }
      }
    }

    uint64_t v6 = *(void *)(*(void *)(a1 + 160) + v5);
    LODWORD(v3) = v3 + 1;
    ++v4;
    v5 += 16LL;
  }

  while (v6 <= 0);
  unsigned int v7 = 0LL;
  *(_DWORD *)(a1 + 152) = v3;
  return v7;
}

    *a3 = v16;
    return v11;
  }

  uint64_t v10 = sqlite3_blob_reopen(v9, iRow);
  if (!v10) {
    goto LABEL_10;
  }
LABEL_3:
  if (v10 == 1) {
    return 267LL;
  }
  else {
    return v10;
  }
}

        int64_t v16 = 0LL;
        *(void *)(v12 + 40) = 0LL;
        *(_DWORD *)(v12 + 48) = 0;
        *(_DWORD *)(v12 + 32) = 0;
LABEL_26:
        v76 = v12;
        v75 = v16;
        unsigned int v17 = 0LL;
        __int16 v18 = 0LL;
        LODWORD(v19) = 0;
        size_t v20 = (uint64_t *)(v12 + 112);
        signed int v21 = -1;
        while (1)
        {
          uint64_t v23 = *v20;
          if (!*v20) {
            goto LABEL_34;
          }
          unsigned int v24 = *(int **)(v23 + 24);
          if (!v24)
          {
            v40 = v75;
            if (v18)
            {
              int v41 = (void (**)(unsigned __int8 *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_76;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
              --qword_18C468B10;
              off_18C4653A8(v18);
              __int16 v18 = (unsigned __int8 *)xmmword_18C468B70;
              BOOL v12 = v76;
              if ((void)xmmword_18C468B70)
              {
                int v41 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_76:
                (*v41)(v18);
                BOOL v12 = v76;
              }
            }

            if (v75)
            {
              unsigned int v42 = &off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_83;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v75);
              --qword_18C468B10;
              off_18C4653A8(v75);
              v40 = xmmword_18C468B70;
              BOOL v12 = v76;
              if ((void)xmmword_18C468B70)
              {
                unsigned int v42 = &xmmword_18C465410;
LABEL_83:
                (*v42)(v40);
                BOOL v12 = v76;
              }
            }

            int v39 = 0;
LABEL_155:
            *(void *)(v12 + 40) = 0LL;
            *(_DWORD *)(v12 + 48) = 0;
LABEL_156:
            *a3 = v39;
            uint64_t result = *(void *)(v12 + 40) != 0LL;
            *(void *)(v5 + 40) = *(void *)(a1 + 48);
            return result;
          }

          int v25 = *v24;
          if (sqlite3_initialize()) {
            goto LABEL_69;
          }
          int v26 = sub_18126F0AC(v25);
          if (!v26) {
            goto LABEL_69;
          }
          char v27 = (void *)v26;
          uint64_t v28 = sub_181363B00(*(char **)(*(void *)(v23 + 24) + 8LL), (unint64_t *)&v79);
          uint64_t v29 = *(int **)(v23 + 24);
          uint64_t v19 = *v29 - (uint64_t)v28;
          memcpy(v27, (const void *)(*((void *)v29 + 1) + v28), v19);
          if (v18) {
            break;
          }
LABEL_33:
          signed int v21 = v17;
          __int16 v18 = (unsigned __int8 *)v27;
          BOOL v12 = v76;
LABEL_34:
          ++v17;
          v20 += 5;
          if (v17 >= *(int *)(v12 + 80))
          {
            int64_t v16 = v75;
            if ((v21 & 0x80000000) != 0) {
              goto LABEL_122;
            }
            uint64_t v31 = *(_DWORD *)(v12 + 60);
            if ((v31 & 0x80000000) != 0)
            {
              *(void *)(v12 + 40) = v18;
              *(_DWORD *)(v12 + 48) = v19;
              *(void *)(v12 + 24) = *(void *)(a1 + 48);
              *(_DWORD *)(v12 + 32) = 1;
              goto LABEL_122;
            }

            uint64_t v32 = *(unsigned __int8 **)(v12 + 40);
            v33 = v21 - v31;
            uint64_t v34 = v31 >= v21;
            uint64_t v35 = v31 - v21;
            if (v35 != 0 && v34) {
              int v36 = v18;
            }
            else {
              int v36 = v32;
            }
            if (v35 != 0 && v34)
            {
              unsigned int v37 = v35;
            }

            else
            {
              uint64_t v32 = v18;
              unsigned int v37 = v33;
            }

            v78 = v32;
            v79 = v36;
            if (!sqlite3_initialize())
            {
              v65 = v19 + 8;
              v66 = (int)v19 + 8;
              v67 = (_BYTE *)sub_18126F0AC(v65);
              if (v67)
              {
                v68 = v67;
                bzero(v67, v66);
                v77 = v68;
                *(void *)(v76 + 40) = v68;
                if (sub_181372A68(&v77, v37, 0, 1, &v79, &v78))
                {
                  *(_DWORD *)(v76 + 32) = 1;
                  v69 = (_DWORD)v77 - *(_DWORD *)(v76 + 40);
                  BOOL v12 = v76;
                  goto LABEL_174;
                }

                v72 = v77;
                if (v77)
                {
                  v73 = &off_18C4653A8;
                  if (!dword_18C465380) {
                    goto LABEL_172;
                  }
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v72);
                  --qword_18C468B10;
                  off_18C4653A8(v72);
                  v72 = (_BYTE *)xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    v73 = &xmmword_18C465410;
LABEL_172:
                    (*v73)(v72);
                  }
                }

                v69 = 0;
                BOOL v12 = v76;
                *(void *)(v76 + 40) = 0LL;
LABEL_174:
                *(_DWORD *)(v12 + 48) = v69;
                if (v18)
                {
                  v74 = (void (**)(unsigned __int8 *))&off_18C4653A8;
                  if (!dword_18C465380) {
                    goto LABEL_180;
                  }
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
                  --qword_18C468B10;
                  off_18C4653A8(v18);
                  __int16 v18 = (unsigned __int8 *)xmmword_18C468B70;
                  BOOL v12 = v76;
                  if ((void)xmmword_18C468B70)
                  {
                    v74 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_180:
                    (*v74)(v18);
                    BOOL v12 = v76;
                  }
                }

        uint64_t v10 = sqlite3_bind_int64(v11, v13, SLODWORD(v16));
        if ((_DWORD)v10) {
          return v10;
        }
        goto LABEL_26;
      }

      if ((v15 & 0x12) != 0 && *(void *)(v14 + 8))
      {
        LODWORD(v16) = sub_181303DF0(v14);
        goto LABEL_25;
      }
    }

    else
    {
      sub_1812CF36C(89717);
    }

    LODWORD(v16) = 0;
    goto LABEL_25;
  }

  uint64_t v6 = a2[*(int *)(a1 + 48) + 3];
  if (!v6)
  {
    sub_1812CF36C(97220);
    goto LABEL_15;
  }

  unsigned int v7 = *(_WORD *)(v6 + 20);
  if (((0xAAAAAAAAAAAAAAAALL >> v7) & 1) == 0)
  {
    unsigned int v8 = v7 & 0x3F;
    goto LABEL_13;
  }

  uint64_t v6 = a2[1];
  if (!v6)
  {
LABEL_15:
    sub_1812CF36C(97220);
    return 19LL;
  }

  unsigned int v7 = *(_WORD *)(v6 + 20);
  unsigned int v8 = v7 & 0x3F;
LABEL_13:
  if (((0x50505050uLL >> v8) & 1) == 0) {
    return 19LL;
  }
  if ((v7 & 0x24) != 0)
  {
    unsigned int v17 = *(void *)v6;
  }

  else if ((v7 & 8) != 0)
  {
    size_t v20 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v20 <= 9.22337204e18) {
        unsigned int v17 = (uint64_t)v20;
      }
      else {
        unsigned int v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      unsigned int v17 = 0x8000000000000000LL;
    }
  }

  else if ((v7 & 0x12) != 0 && *(void *)(v6 + 8))
  {
    unsigned int v17 = sub_181303DF0(v6);
  }

  else
  {
    unsigned int v17 = 0LL;
  }

  uint64_t v10 = 0LL;
  *a3 = v17;
  return v10;
}

  unsigned int v9 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v9)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v9 = &xmmword_18C465410;
    return (*v9)(v1);
  }

  return result;
}

  if (sqlite3_initialize() || (BOOL v13 = (void *)sub_18126F0AC(8LL * (v12 - 1) + 56)) == 0LL)
  {
    if (v12 >= -5) {
      *(_DWORD *)(a1 + 16) = 7;
    }
    goto LABEL_2;
  }

  uint64_t v10 = (uint64_t)v13;
  bzero(v13, 8LL * (v12 - 1) + 56);
  *(_DWORD *)uint64_t v10 = a2;
  *(void *)(v10 + 32) = a5;
  if (a2 == 1)
  {
    int64_t v16 = sub_1813901F4;
LABEL_43:
    *(void *)(v10 + 16) = v16;
LABEL_44:
    sub_18138FCE8((_DWORD *)v10, a3);
    sub_18138FCE8((_DWORD *)v10, a4);
    sub_18138ED28((char *)a1, "fts5 expression tree is too large (maximum depth %d)");
    goto LABEL_58;
  }

  if (a2 == 2)
  {
    int64_t v16 = sub_181390354;
    goto LABEL_43;
  }

  if (a2 != 9)
  {
    *(void *)(v10 + 16) = sub_18139039C;
    goto LABEL_44;
  }

  if (*(_DWORD *)(a5 + 16) == 1
    && (int v14 = *(void *)(a5 + 24), *(_DWORD *)(v14 + 24) == 1)
    && !*(void *)(v14 + 56)
    && !*(_BYTE *)(v14 + 33))
  {
    *(_DWORD *)uint64_t v10 = 4;
    __int16 v15 = sub_18138FE30;
  }

  else
  {
    __int16 v15 = sub_18138FF44;
  }

  *(void *)(v10 + 16) = v15;
  unsigned int v17 = *(_DWORD *)(a5 + 16);
  if (v17 >= 1)
  {
    __int16 v18 = a5 + 24;
    uint64_t v19 = *(unsigned int *)(a5 + 16);
    do
    {
      **(void **)__int16 v18 = v10;
      if (!*(_DWORD *)(*(void *)v18 + 24LL))
      {
        *(void *)(v10 + 16) = 0LL;
        *(_DWORD *)uint64_t v10 = 0;
      }

      v18 += 8LL;
      --v19;
    }

    while (v19);
  }

  if (!*(_DWORD *)(*(void *)a1 + 92LL)
    || v17 == 1
    && (size_t v20 = *(void *)(a5 + 24), v21 = *(_DWORD *)(v20 + 24), v21 <= 1)
    && (v21 != 1 || !*(_BYTE *)(v20 + 33)))
  {
LABEL_17:
    if (v10) {
      return (_DWORD *)v10;
    }
    goto LABEL_2;
  }

  sub_18138ED28((char *)a1, "fts5: %s queries are not supported (detail!=full)");
LABEL_58:
  sqlite3_free((void *)v10);
LABEL_2:
  sub_18138CFA4((uint64_t)a3);
  sub_18138CFA4((uint64_t)a4);
  sub_18138D08C(a5);
  return 0LL;
}

  size_t v20 = v4[7];
  uint64_t result = sqlite3_initialize();
  if ((_DWORD)result || (uint64_t result = sub_18127D33C((uint64_t)v4, 16 * v20 + 64)) == 0)
  {
    *uint64_t v3 = 7;
  }

  else
  {
    signed int v21 = result + 16 * v20;
    *(void *)(v21 + 32) = 0LL;
    *(void *)(v21 + 40) = 0LL;
    ++*(_DWORD *)(result + 28);
    *a2 = (int *)result;
  }

  return result;
}

  if (a2[4] == 1)
  {
    int v14 = *((void *)a2 + 3);
    if (!*(_DWORD *)v14 && !*(_BYTE *)(v14 + 4)) {
      a2[15] = 1;
    }
  }

  a2[10] = v11;
  return 0LL;
}

      sub_1812CF36C(v11);
      return 0LL;
    }

    if (!a2)
    {
LABEL_24:
      uint64_t v11 = 97498;
      goto LABEL_25;
    }

    char v5 = off_189B6F868[*(unsigned __int8 *)(a1 + 32)];
    uint64_t v6 = (uint64_t)a2;
    unsigned int v7 = v5;
    unsigned int v8 = -1;
    unsigned int v9 = 1;
    uint64_t v10 = 0LL;
LABEL_9:
    sub_1812D7A8C(v6, v7, v8, v9, (uint64_t (*)(uint64_t))v10);
  }

  return 0LL;
}

LABEL_51:
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 16) = v16 & 0x7FFFFFFF;
  *(_WORD *)(a1 + 20) = v15;
  *(_BYTE *)(a1 + 22) = v7;
  if (v7 >= 2 && (v16 & 0x7FFFFFFF) >= 2)
  {
    unsigned int v24 = *(unsigned __int8 **)(a1 + 8);
    int v25 = *v24;
    int v26 = v24[1];
    if (v25 == 255 && v26 == 254)
    {
      char v27 = 2;
      goto LABEL_59;
    }

    uint64_t result = 0LL;
    if (v25 == 254 && v26 == 255)
    {
      char v27 = 3;
LABEL_59:
      if (!sub_1812D7910((int *)a1))
      {
        uint64_t v30 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v30 - 2;
        memmove(*(void **)(a1 + 8), (const void *)(*(void *)(a1 + 8) + 2LL), v30 - 2);
        uint64_t result = 0LL;
        *(_BYTE *)(*(void *)(a1 + 8) + *(int *)(a1 + 16)) = 0;
        *(_BYTE *)(*(int *)(a1 + 16) + *(void *)(a1 + 8) + 1LL) = 0;
        *(_WORD *)(a1 + 20) |= 0x200u;
        *(_BYTE *)(a1 + 22) = v27;
        return result;
      }

      return 7LL;
    }
  }

  return result;
}

  unsigned int v37 = *(void *)(v9 + 24);
  if (*(unsigned __int8 *)(a1 + 302) < 2u)
  {
    if (!*(_BYTE *)(v10 + 197))
    {
      if ((*(_BYTE *)(v10 + 51) & 0x10) != 0
        && !*(void *)(v10 + 592)
        && !*(_DWORD *)(v10 + 220)
        && (*(int *)(v10 + 564) < 1 || *(void *)(v10 + 600)))
      {
        v75 = *(void *)(v9 + 56);
        if (v75)
        {
          while (1)
          {
            v76 = *(char **)(v75 + 24);
            if (v76)
            {
              v77 = strrchr(*(const char **)(v75 + 24), 95);
              if (v77)
              {
                v78 = v77;
                *v77 = 0;
                v79 = sub_1812E2C64(v10, v76, 0LL);
                *v78 = 95;
                if (v79)
                {
                  unsigned int v37 = v79;
                  if (*(_BYTE *)(v79 + 63) == 1)
                  {
                  }
                }
              }
            }

            v75 = *(void *)(v75 + 80);
            if (!v75) {
              goto LABEL_59;
            }
          }

          sub_1812DC47C( a1,  "trigger %s may not write to shadow table %s",  a3,  a4,  a5,  a6,  a7,  a8,  *(void *)v9);
          goto LABEL_74;
        }
      }

  v33 = *((void *)db + 3);
  if (v33) {
    xmmword_18C465410(v33);
  }
  return v27;
}

      signed int v21 = *(void *)(a2 + 104 * v13 + 184);
      if (v21)
      {
        if (*(void *)v21)
        {
          (*(void (**)(void))(*(void *)v21 + 8LL))(*(void *)(a2 + 104 * v13 + 184));
          *(void *)signed int v21 = 0LL;
        }

        uint64_t v22 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v21);
          --qword_18C468B10;
          off_18C4653A8(v21);
          signed int v21 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_31;
          }
          uint64_t v22 = &xmmword_18C465410;
        }

        (*v22)(v21);
      }

  if (v19 == (_OWORD *)(v10 + 696))
  {
    v43 = (_OWORD *)sub_1812F2264(v10, 0x60uLL);
    if (v43)
    {
      uint64_t v19 = v43;
      int v44 = *(__int128 **)(v10 + 32);
      uint64_t v45 = *v44;
      uint64_t v46 = v44[1];
      uint64_t v47 = v44[3];
      v43[2] = v44[2];
      v43[3] = v47;
      unsigned __int8 *v43 = v45;
      v43[1] = v46;
      goto LABEL_78;
    }

    return;
  }

  uint64_t v34 = v18 + 1;
  uint64_t v35 = 32LL * v34;
  if (!v19)
  {
    v48 = sub_1812F2264(v10, 32LL * v34);
    goto LABEL_77;
  }

  if (*(void *)(v10 + 496) <= (unint64_t)v19)
  {
    if (v35 < 0x81) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }

  if (*(void *)(v10 + 504) > (unint64_t)v19 || v35 > *(unsigned __int16 *)(v10 + 438))
  {
LABEL_76:
    v48 = sub_1812F2310(v10, *(void **)(v10 + 32), v35);
LABEL_77:
    uint64_t v19 = (_OWORD *)v48;
    if (v48) {
      goto LABEL_78;
    }
    return;
  }

      if (a1) {
        goto LABEL_52;
      }
      goto LABEL_35;
    }

  unsigned int v24 = *(_WORD *)(v23 + 20);
  if ((v24 & 2) != 0 && *(_BYTE *)(v23 + 22) == 1)
  {
    int v25 = *(_DWORD *)(v23 + 16);
  }

  else if ((v24 & 0x10) != 0)
  {
    int v25 = *(_DWORD *)(v23 + 16);
    if ((*(_WORD *)(v23 + 20) & 0x400) != 0) {
      v25 += *(_DWORD *)v23;
    }
  }

  else
  {
    if ((v24 & 1) != 0) {
      goto LABEL_86;
    }
    int v25 = sub_181303970(v23, 1);
  }

  if (!v9 || v25 != 8)
  {
LABEL_86:
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      int v36 = *(void *)a1;
      unsigned int v37 = "argument type mismatch";
LABEL_91:
      sub_181269368(v36, v37, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

      int v41 = v19;
    }
  }

  uint64_t v3 = sub_18137485C(a1, *(void *)(a1 + 24), &v41) == 0;
  for (i = *(void *)(a1 + 40); i; i = *(void *)(i + 16))
  {
    uint64_t v35 = *(void *)(i + 24);
    if (v35)
    {
      int v36 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v35);
        --qword_18C468B10;
        off_18C4653A8(v35);
        uint64_t v35 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_55;
        }
        int v36 = &xmmword_18C465410;
      }

      (*v36)(v35);
    }

  if (!(_DWORD)v20)
  {
    *a4 = *(void *)a3;
    signed int v21 = *(_DWORD *)(a3 + 8);
LABEL_53:
    *a5 = v21;
  }

      if (!*v237)
      {
        v231 = v28;
        v228 = v33;
        uint64_t v46 = *v232;
        uint64_t v47 = (int)*v36;
        if (!sub_1812B2390((uint64_t)*v232, 0))
        {
          v48 = v46[16];
          if ((*(_WORD *)(v48 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v48, v47);
          }

          else
          {
            *(void *)v48 = v47;
            *(_WORD *)(v48 + 20) = 4;
          }

          uint64_t v49 = *(void *)(*v46 + 24);
          if (v49) {
            xmmword_18C465410(v49);
          }
        }

        if ((a6 & 0x80000000) != 0)
        {
          sub_1812CF36C(98740);
          uint64_t v50 = v237;
          v33 = v228;
        }

        else
        {
          uint64_t v50 = v237;
          v33 = v228;
          if (!sub_1812B2390((uint64_t)v46, 1u))
          {
            int v51 = sub_181269368(v46[16] + 64, (char *)a5, a6, 0, 0LL);
            if (v51)
            {
              unsigned int v52 = v51;
              v53 = *v46;
              *(_DWORD *)(v53 + 80) = v52;
              sub_1812FA264(v53, v52);
              sub_1813037C4(*v46, v52);
            }

            int v54 = *(void *)(*v46 + 24);
            uint64_t v50 = v237;
            v33 = v228;
            if (v54) {
              xmmword_18C465410(v54);
            }
          }
        }

        if (sqlite3_step((sqlite3_stmt *)v46) == 100)
        {
          uint64_t v55 = sqlite3_column_int((sqlite3_stmt *)v46, 0);
          v56 = v55 >> 1;
          v219 = v55 & 1;
        }

        else
        {
          v219 = 0;
          v56 = 1;
        }

        *uint64_t v50 = sqlite3_reset((sqlite3_stmt *)v46);
        if (!sub_1812B2390((uint64_t)v46, 1u))
        {
          uint64_t v57 = *(void *)(*v46 + 24);
          if (v57) {
            xmmword_18C465410(v57);
          }
        }

        uint64_t v58 = *(_DWORD *)(v34 + 56LL * v35 + 4);
        v222 = v56;
        v220 = v58;
        if (v56 > v58) {
          uint64_t v58 = v56;
        }
        v59 = v229 + 136 * v25;
        *(_DWORD *)(v59 + 108) = v58 - 1;
        v226 = (int *)(v59 + 108);
        uint64_t v60 = (uint64_t)v235;
        sub_181390FF0((uint64_t)v235, v38);
        uint64_t v63 = *(uint64_t **)(v59 + 112);
        v62 = (void *)(v59 + 112);
        v61 = v63;
        v227 = v62;
        if (v63)
        {
          uint64_t v64 = v50;
          v65 = *v61;
          v67 = *((_DWORD *)v61 + 2);
          v66 = *((unsigned int *)v61 + 3);
          v68 = (char *)(*v61 + v66);
          v69 = *v68;
          if (*v68 < 0)
          {
            v71 = v68[1];
            if (v68[1] < 0)
            {
              v99 = v68[2];
              if (v99 < 0)
              {
                v70 = sub_18138BFCC(v68, v238);
                v69 = v238[0] & 0x7FFFFFFF;
                if ((v238[0] & 0x7FFFFFFF) <= v67) {
                  goto LABEL_80;
                }
              }

              else
              {
                v69 = v99 & 0x7F | (v69 << 14) & 0x1FC07F | ((v71 & 0x7F) << 7);
                v70 = 3;
                if (v69 <= v67) {
                  goto LABEL_80;
                }
              }
            }

            else
            {
              v69 = ((v69 & 0x7F) << 7) | v71;
              v70 = 2;
              if (v69 <= v67) {
                goto LABEL_80;
              }
            }

    if (v27 == 44) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v29;
    }
    if (v28 && (v32 & 1) != 0) {
      goto LABEL_94;
    }
    if (v21 != 13 || v22 != 34) {
      uint64_t v29 = 0;
    }
    if ((v29 & 1) != 0) {
      goto LABEL_94;
    }
    uint64_t v34 = !v28;
    uint64_t v35 = v27 == -1 ? v34 : 1;
    if ((v35 & 1) == 0) {
      break;
    }
    if (v27 == 13) {
      uint64_t v34 = 1;
    }
    if ((v34 & 1) == 0)
    {
      sub_1813C0F08(a1, "line %d: unescaped %c character", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 24));
      goto LABEL_89;
    }

    uint64_t v22 = v21;
    signed int v21 = v27;
    if (v27 == -1)
    {
LABEL_98:
      sub_1813C0F08(a1, "line %d: unterminated %c-quoted field\n", a3, a4, a5, a6, a7, a8, v23);
      *(_DWORD *)(a1 + 32) = -1;
      goto LABEL_89;
    }

uint64_t sub_1812696E8(uint64_t a1, char *__s1, uint64_t a3, uint64_t *a4, char a5, unsigned int a6)
{
  uint64_t v172 = *MEMORY[0x1895F89C0];
  if (!__s1) {
    goto LABEL_5;
  }
  int v12 = *__s1;
  BOOL v13 = *__s1 == 0;
  if (!strcmp(__s1, ":memory:")) {
    goto LABEL_8;
  }
  if (v12)
  {
    BOOL v13 = 0;
  }

  else
  {
LABEL_5:
    BOOL v13 = 1;
    if (*(_BYTE *)(a3 + 102) == 2) {
      goto LABEL_8;
    }
  }

  if ((a6 & 0x80) == 0)
  {
    int v14 = 0;
    goto LABEL_9;
  }

LABEL_8:
  a5 |= 2u;
  int v14 = 1;
LABEL_9:
  if (((v14 | v13) & (a6 >> 8)) != 0) {
    unsigned int v15 = a6 & 0xFFFFFCFF | 0x200;
  }
  else {
    unsigned int v15 = a6;
  }
  uint64_t v16 = sub_18126F0AC(72LL);
  if (!v16) {
    return 7LL;
  }
  uint64_t v17 = v16;
  unsigned int v161 = v15;
  uint64_t v18 = 0LL;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(void *)(v16 + 64) = 0LL;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_BYTE *)(v16 + 16) = 0;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 48) = v16;
  *(_DWORD *)(v16 + 56) = 1;
  if (v13) {
    goto LABEL_14;
  }
  uint64_t v18 = 0LL;
  char v27 = (v15 & 0x40) != 0 ? 0 : v14;
  if ((v27 & 1) != 0 || (v15 & 0x20000) == 0) {
    goto LABEL_14;
  }
  int v155 = v14;
  char v158 = a5;
  if (__s1) {
    int v28 = strlen(__s1) & 0x3FFFFFFF;
  }
  else {
    int v28 = 0;
  }
  size_t v39 = (v28 + 1);
  uint64_t v40 = (*(_DWORD *)(a1 + 8) + 1);
  else {
    uint64_t v41 = v40;
  }
  unsigned int v42 = (_BYTE *)sub_18126F0AC(v41);
  *(_BYTE *)(v17 + 17) = 1;
  if (!v42)
  {
    int v44 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_60:
      (*v44)(v17);
      return 7LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v17);
    --qword_18C468B10;
    off_18C4653A8(v17);
    uint64_t v17 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v44 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_60;
    }

    return 7LL;
  }

  v43 = v42;
  if (v155)
  {
    memcpy(v42, __s1, v39);
  }

  else
  {
    *unsigned int v42 = 0;
    uint64_t v45 = (*(uint64_t (**)(uint64_t, char *, uint64_t, _BYTE *))(a1 + 64))(a1, __s1, v40, v42);
    if ((v45 | 0x200) != 0x200)
    {
      uint64_t v29 = v45;
      sqlite3_free(v43);
      sqlite3_free((void *)v17);
      return v29;
    }
  }

  uint64_t v152 = a3;
  if ((_BYTE)word_18C465384)
  {
    uint64_t v46 = qword_18C4653F0(4LL);
    uint64_t v18 = v46;
    BOOL v157 = v46 == 0;
    if (v46) {
      xmmword_18C465400(v46);
    }
    if ((_BYTE)word_18C465384)
    {
      uint64_t v47 = qword_18C4653F0(2LL);
      uint64_t v48 = v47;
      if (v47)
      {
        uint64_t v49 = a4;
        xmmword_18C465400(v47);
        char v50 = 0;
        goto LABEL_149;
      }

      uint64_t v49 = a4;
    }

    else
    {
      uint64_t v49 = a4;
      uint64_t v48 = 0LL;
    }

    char v50 = 1;
  }

  else
  {
    uint64_t v49 = a4;
    uint64_t v48 = 0LL;
    uint64_t v18 = 0LL;
    char v50 = 1;
    BOOL v157 = 1;
  }

    if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      uint64_t result = *(void *)(a1 + 344);
      if (!result) {
        return result;
      }
      sub_1812DC47C(result, "out of memory", v4, v5, v6, v7, v8, v9, v12);
      uint64_t v10 = *(void *)(a1 + 344);
      *(_DWORD *)(v10 + 24) = 7;
      uint64_t v11 = *(void *)(v10 + 256);
      if (v11)
      {
        uint64_t result = 0LL;
        do
        {
          ++*(_DWORD *)(v11 + 48);
          *(_DWORD *)(v11 + 24) = 7;
          uint64_t v11 = *(void *)(v11 + 256);
        }

        while (v11);
        return result;
      }
    }

    return 0LL;
  }

  uint64_t result = sub_18126F0AC(120LL);
  if (!result) {
    goto LABEL_8;
  }
  *(void *)(result + 112) = 0LL;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  if (!*(_BYTE *)(result + 112))
  {
LABEL_7:
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 113) = 1;
  }

  return result;
}

  uint64_t result = sub_181289D04(a1, v10, a3, a4, a5, a6, a7, a8);
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

  sub_1812B963C(a1);
  return 0LL;
}

    unsigned int v8 = __error();
    uint64_t result = 0LL;
    unsigned int v9 = *v8;
    unsigned int v7 = 1;
    if (((1LL << v9) & 0x1000000800012010LL) != 0) {
      goto LABEL_21;
    }
    if (v9 == 1)
    {
      uint64_t result = 3LL;
      unsigned int v7 = 1;
    }

    else
    {
LABEL_12:
      if ((_DWORD)v9 == 77) {
        goto LABEL_21;
      }
      uint64_t result = 3850LL;
    }

  unsigned int v8 = (unsigned __int8 *)(v3 + 1);
  *(_DWORD *)(a3 + 16) = v4;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v8;
  unsigned int v9 = v4 + (_WORD)v8 - a2;
  if ((v9 & 0xFFFC) == 0) {
    unsigned int v9 = 4;
  }
  *(_WORD *)(a3 + 22) = v9;
  *(_WORD *)(a3 + 20) = v4;
  return result;
}

    *((void *)v6 + 3) = 0LL;
    *uint64_t v6 = 4;
    *((_DWORD *)v6 + 1) = a2;
LABEL_9:
    sub_1812FFDBC((uint64_t)v6);
    uint64_t v6 = (unsigned __int8 *)*((void *)v6 + 5);
    if (!v6) {
      goto LABEL_25;
    }
  }

  unsigned int v7 = *v6;
  if ((v7 | 2) != 2) {
    goto LABEL_9;
  }
  if ((v6[1] & 0x40) != 0)
  {
    uint64_t v11 = 2835LL;
    if (!*(_BYTE *)(a1 + 17)) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }

  if (v7 == 2) {
    *uint64_t v6 = 0;
  }
  else {
    *((_DWORD *)v6 + 1) = 0;
  }
  uint64_t v10 = sub_1812FFEC8((uint64_t)v6);
  if (!(_DWORD)v10)
  {
    sub_1812FFDBC((uint64_t)v6);
    *uint64_t v6 = 3;
    v6[1] &= 0xF1u;
    goto LABEL_9;
  }

  uint64_t v11 = v10;
  v6[1] &= 0xF1u;
  if (!*(_BYTE *)(a1 + 17)) {
    goto LABEL_36;
  }
LABEL_34:
  ++*(_DWORD *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 18)) {
    sub_1812FDE20(a1);
  }
LABEL_36:
  int v14 = *(void *)(*(void *)(a1 + 8) + 16LL);
  if (v14)
  {
    while (2)
    {
      unsigned int v15 = *(void *)(v14 + 24);
      if (v15)
      {
        uint64_t v16 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_38;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v15);
        --qword_18C468B10;
        off_18C4653A8(v15);
        unsigned int v15 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v16 = &xmmword_18C465410;
LABEL_38:
          (*v16)(v15);
        }
      }

      *(void *)(v14 + 24) = 0LL;
      *(_BYTE *)int v14 = 4;
      *(_DWORD *)(v14 + 4) = v11;
      sub_1812FFDBC(v14);
      int v14 = *(void *)(v14 + 40);
      if (!v14) {
        break;
      }
      continue;
    }
  }

  if (*(_BYTE *)(a1 + 17))
  {
    uint64_t v17 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v17;
    if (!v17) {
      sub_1812FDEFC(a1);
    }
LABEL_26:
    if (*(_BYTE *)(a1 + 17))
    {
      int v12 = *(_DWORD *)(a1 + 20) - 1;
      *(_DWORD *)(a1 + 20) = v12;
      if (!v12) {
        sub_1812FDEFC(a1);
      }
    }
  }

  return v11;
}

  *(void *)(v1 + 24) = 0LL;
  *(_BYTE *)int v1 = 1;
  return result;
}

  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    goto LABEL_15;
  }
  char v5 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_14;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v4);
  --qword_18C468B10;
  off_18C4653A8(v4);
  uint64_t v4 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    char v5 = &xmmword_18C465410;
LABEL_14:
    (*v5)(v4);
  }

  if (v4 == v3)
  {
LABEL_9:
    sub_18130B9D8(a1 + 104LL * v3 + 96, a1 + 56);
    return;
  }

  unsigned int v9 = *(void *)(v6 + 40);
  *(_BYTE *)(a1 + 90) = -59 * ((v6 - a1 - 96) >> 3);
  uint64_t v10 = *(_OWORD *)(a1 + 56);
  *(void *)(v6 + 48) = *(void *)(a1 + 72);
  *(_OWORD *)(v6 + 32) = v10;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  if (v9)
  {
    *(void *)(a1 + 64) = v9;
    *(_DWORD *)(a1 + 84) = off_18C4653B8(v9);
  }

  else if (*(void *)(a1 + 64))
  {
    unsigned int v15 = sub_18126F0AC(*(int *)(a1 + 84));
    *(void *)(a1 + 64) = v15;
    if (!v15) {
      return;
    }
  }

  *(void *)uint64_t v6 = 0LL;
  uint64_t v11 = (void *)sub_18126F0AC(24LL);
  if (v11)
  {
    int v12 = v11;
    if ((((int)v11 / 17) & 1) != 0)
    {
      *uint64_t v11 = sub_18130BD34;
      v11[1] = v6;
    }

    else
    {
      *uint64_t v11 = 0LL;
      sub_18130B9D8(v6, v6 + 32);
      *(_DWORD *)(v6 + 8) = 1;
      v12[2] = v13;
    }

    *(void *)uint64_t v6 = v12;
  }

  *(void *)(v1 + 16) = 0LL;
  *(_DWORD *)int v1 = 0;
  if (v2)
  {
    do
    {
      char v5 = (void *)*v2;
      uint64_t v6 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v2);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v2);
        int v2 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_11;
        }
        uint64_t v6 = &xmmword_18C465410;
      }

      uint64_t result = (*v6)(v2);
LABEL_11:
      int v2 = v5;
    }

    while (v5);
  }

  *(_DWORD *)(v1 + 4) = 0;
  return result;
}

  *(void *)(a1 + 24) = 0LL;
  char v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_14:
      uint64_t result = (*v6)(v5);
      goto LABEL_15;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v5);
    char v5 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
      goto LABEL_14;
    }
  }

    if (v8 == -1) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }

  int v12 = (int *)sub_18133E190((void *)*a1, 0LL);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_9:
  if (!*(_BYTE *)(*a1 + 197)) {
    sub_1812DC47C((uint64_t)a1, "syntax error after column name %.*s", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a3 + 8));
  }
LABEL_11:
  sub_181314178((uint64_t)a1, v12, a3, 1);
  return v12;
}

    unsigned int v8 = v3[2];
    if (v8 < 1)
    {
LABEL_12:
      uint64_t v11 = 2;
LABEL_14:
      *(_WORD *)(a1 + 36) |= v11;
      return 0LL;
    }

    unsigned int v9 = (int *)v3[3];
    while (1)
    {
      uint64_t v10 = *v9++;
      if (v10 == *((_DWORD *)a2 + 11)) {
        break;
      }
      if (!--v8) {
        goto LABEL_12;
      }
    }
  }

  return 0LL;
}

            uint64_t v10 = 0LL;
LABEL_9:
            v9 |= v10;
            if (++v8 >= v7) {
              goto LABEL_26;
            }
          }
        }
      }

      unsigned int v9 = 0LL;
LABEL_26:
      uint64_t v17 = (int *)v77[7];
      if (v17)
      {
        uint64_t v18 = *v17;
        if (*v17 >= 1)
        {
          uint64_t v19 = 0LL;
          size_t v20 = 0LL;
          while (1)
          {
            unsigned int v22 = *(unsigned __int8 **)&v17[6 * v19 + 2];
            if (v22)
            {
              if (*v22 == 167 && (*((_DWORD *)v22 + 1) & 0x20) == 0)
              {
                unsigned int v24 = *((_DWORD *)v22 + 11);
                if (a1[2] == v24)
                {
                  int v21 = 1LL;
                  goto LABEL_31;
                }

                int v25 = a1[1];
                if ((int)v25 >= 2)
                {
                  int v26 = 0LL;
                  char v27 = v25 - 1;
                  while (v4[v26] != v24)
                  {
                    if (v27 == ++v26) {
                      goto LABEL_30;
                    }
                  }

                  int v21 = 1LL << (v26 + 1);
                  goto LABEL_31;
                }
              }

              else if ((*((_DWORD *)v22 + 1) & 0x810000) == 0)
              {
                int v21 = sub_181332EB0(a1, v22);
                uint64_t v18 = *v17;
                goto LABEL_31;
              }
            }

  uint64_t v11 = a2;
  int v12 = a3;
  BOOL v13 = 0;
  v10[0] = 0LL;
  v10[3] = 0LL;
  v10[1] = sub_1813379F4;
  v10[2] = sub_181323260;
  v10[4] = 0LL;
  v10[5] = &v11;
  sub_181285228(v10, v4);
  if ((_BYTE)v13) {
    unsigned int v9 = 0x4000000;
  }
  else {
    unsigned int v9 = 64;
  }
  if (HIBYTE(v13)) {
    return 0LL;
  }
  else {
    return v9;
  }
}

      ++v17;
      uint64_t v19 = v84;
      if (v17 >= *v84) {
        goto LABEL_48;
      }
    }
  }

  uint64_t v18 = 0LL;
LABEL_48:
  if (!*((_DWORD *)v85 + 12))
  {
    int v89 = 0LL;
    __int16 v87 = 0u;
    v88 = 0u;
    uint64_t v86 = 0u;
    if (!v81[47])
    {
      v81[47] = *v18;
      size_t v52 = *((_DWORD *)v85 + 13);
      *((_DWORD *)v85 + 13) = v52 + 1;
      v81[46] = v52;
    }

    *(void *)&uint64_t v86 = v85;
    LODWORD(v87) = v80;
    DWORD2(v88) = 1024;
    *((_BYTE *)v85 + 218) = *(_BYTE *)(v79 + 16);
    v85[22] = (void *)a3;
    uint64_t v56 = v82;
    if (!sub_1813206F0((uint64_t)&v86, v18, v11, v12, v13, v14, v15, v16) && !*((_BYTE *)v83 + 103))
    {
      unint64_t v57 = *v18;
      uint64_t v58 = *((_DWORD *)v85 + 14);
      v59 = (v58 + 1);
      *((_DWORD *)v85 + 14) = v57 + v58 + 2;
      v81[48] = v59;
      if ((int)v57 < 1)
      {
        unint64_t v57 = 0LL;
      }

      else
      {
        uint64_t v60 = (uint64_t *)(v18 + 2);
        v61 = v57;
        uint64_t v62 = (v58 + 1);
        do
        {
          uint64_t v64 = v56;
          v65 = *v60;
          sub_18131E5AC(v85, *v60, v62);
          uint64_t v66 = (unsigned __int8 *)v65;
          uint64_t v56 = v64;
          if (sub_1812A3C7C(v66) == 69)
          {
            unsigned int v67 = *(_DWORD *)(v64 + 144);
            if (*(_DWORD *)(v64 + 148) > v67)
            {
              *(_DWORD *)(v64 + 144) = v67 + 1;
              char v63 = *(void *)(v64 + 136) + 40LL * v67;
              *(_DWORD *)char v63 = 87;
              *(_DWORD *)(v63 + 4) = v62;
              *(_OWORD *)(v63 + 8) = 0u;
              *(_OWORD *)(v63 + 24) = 0u;
            }

            else
            {
              sub_18131044C(v64, 87LL, v62, 0LL, 0LL, v53, v54, v55);
            }
          }

          uint64_t v62 = (v62 + 1);
          v60 += 3;
          --v61;
        }

        while (v61);
      }

      int v68 = (v57 + v59);
      int v69 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v69)
      {
        sub_18131044C(v56, 97LL, v59, v57, (v57 + v59), v53, v54, v55);
      }

      else
      {
        *(_DWORD *)(v56 + 144) = v69 + 1;
        char v70 = *(void *)(v56 + 136) + 40LL * v69;
        *(_DWORD *)char v70 = 97;
        *(_DWORD *)(v70 + 4) = v59;
        *(_DWORD *)(v70 + 8) = v57;
        *(_DWORD *)(v70 + 12) = v68;
        *(void *)(v70 + 24) = 0LL;
        *(void *)(v70 + 32) = 0LL;
        *(void *)(v70 + 16) = 0LL;
      }

      int v71 = v81[46];
      uint64_t v72 = v68 + 1;
      v73 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v73)
      {
        sub_18131044C(v56, 127LL, v71, (v68 + 1), 0LL, v53, v54, v55);
      }

      else
      {
        *(_DWORD *)(v56 + 144) = v73 + 1;
        uint64_t v74 = *(void *)(v56 + 136) + 40LL * v73;
        *(_DWORD *)uint64_t v74 = 127;
        *(_DWORD *)(v74 + 4) = v71;
        *(_DWORD *)(v74 + 8) = v72;
        *(void *)(v74 + 12) = 0LL;
        *(void *)(v74 + 28) = 0LL;
        *(void *)(v74 + 20) = 0LL;
        *(_DWORD *)(v74 + 36) = 0;
      }

      v75 = v81[46];
      uint64_t v76 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v76)
      {
        sub_18131044C(v56, 128LL, v75, v68, (v68 + 1), v53, v54, v55);
      }

      else
      {
        *(_DWORD *)(v56 + 144) = v76 + 1;
        uint64_t v77 = *(void *)(v56 + 136) + 40LL * v76;
        *(_DWORD *)uint64_t v77 = 128;
        *(_DWORD *)(v77 + 4) = v75;
        *(_DWORD *)(v77 + 8) = v68;
        *(_DWORD *)(v77 + 12) = v72;
        *(void *)(v77 + 24) = 0LL;
        *(void *)(v77 + 32) = 0LL;
        *(void *)(v77 + 16) = 0LL;
      }
    }
  }

  if (v18) {
    sub_181311F48(v83, v18);
  }
  *((_BYTE *)v85 + 218) = 0;
  v85[22] = 0LL;
}

  unsigned int v9 = a3[1];
  if (!v9)
  {
    sub_1812CF36C(89717);
    goto LABEL_12;
  }

  uint64_t v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 0x24) != 0)
  {
    uint64_t v11 = *(double *)v9;
    goto LABEL_13;
  }

  if ((v10 & 8) == 0)
  {
    if ((v10 & 0x12) != 0 && *(void *)(v9 + 8))
    {
      LODWORD(v11) = sub_181303DF0(v9);
      goto LABEL_13;
    }

  uint64_t v4 = getenv("SQLITE_ENABLE_FILE_ASSERTIONS");
  if (v4)
  {
    if (!strcmp(v4, "0")) {
      v2 &= ~2u;
    }
    else {
      v2 |= 6u;
    }
    dword_18C465544 = v2;
  }

  if (has_internal_content)
  {
    v2 |= 8u;
    dword_18C465544 = v2;
  }

  char v5 = getenv("SQLITE_ENABLE_THREAD_ASSERTIONS");
  if (v5)
  {
    if (!strcmp(v5, "0")) {
      v2 &= ~8u;
    }
    else {
      v2 |= 0x18u;
    }
    dword_18C465544 = v2;
  }

  if (has_internal_content)
  {
    v2 |= 0x40u;
    dword_18C465544 = v2;
  }

  uint64_t v6 = getenv("SQLITE_ENABLE_VNODE_GUARDS");
  if (v6) {
    dword_18C465544 = v2 & 0xFFFFFFBF | ((strcmp(v6, "0") != 0) << 6);
  }
  unsigned int v8 = getprogname();
  uint64_t result = strcmp(v8, "testfixture");
  if ((_DWORD)result)
  {
    uint64_t v10 = getprogname();
    uint64_t result = strcmp(v10, "sqlite3");
    if ((_DWORD)result)
    {
      uint64_t result = dyld_program_sdk_at_least();
      if ((result & 1) != 0 || (uint64_t v11 = getprogname(), result = strcmp(v11, "xctest"), !(_DWORD)result)) {
        dword_18C465544 |= 0x100u;
      }
    }
  }

  return result;
}

    LODWORD(v4) = 0;
    goto LABEL_9;
  }

  unsigned int v7 = *(double *)v4;
  if (*(double *)v4 < -9.22337204e18)
  {
    LODWORD(v4) = 0;
    goto LABEL_9;
  }

  if (v7 <= 9.22337204e18)
  {
    uint64_t v4 = (uint64_t)v7;
LABEL_4:
LABEL_9:
    uint64_t v6 = off_189B6F640[v4];
    if (!a1) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }

  int v14 = a3[1];
  if (!v14) {
    goto LABEL_17;
  }
  unsigned int v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = (unsigned __int8 *)sub_181303998((int *)v14, 1);
      uint64_t v17 = a3[2];
      if (v17) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }

  if (v2 == 1) {
    sqlite3_result_error_nomem(*(sqlite3_context **)a1);
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    unsigned int v9 = *(void *)(a1 + 8);
    int v12 = *(void *)(v9 - 8);
    uint64_t v11 = (void *)(v9 - 8);
    uint64_t v10 = v12;
    if (v12 >= 2)
    {
      *uint64_t v11 = v10 - 1;
      goto LABEL_19;
    }

    BOOL v13 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v13)(v11);
      goto LABEL_19;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    off_18C4653A8(v11);
    uint64_t v11 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v13 = &xmmword_18C465410;
      goto LABEL_18;
    }
  }

    sub_1812D7A8C((uint64_t)a1, "[]", 2, 1u, 0LL);
LABEL_9:
    unsigned int v7 = *(void *)a1;
    *(_BYTE *)(v7 + 23) = 74;
    *(_WORD *)(v7 + 20) |= 0x800u;
    return;
  }

  sub_1812CF36C(98123);
  sub_1812CF36C(97498);
  sub_1812CF36C(97481);
}

    sub_1812D7A8C((uint64_t)a1, "{}", 2, 1u, 0LL);
LABEL_9:
    unsigned int v7 = *(void *)a1;
    *(_BYTE *)(v7 + 23) = 74;
    *(_WORD *)(v7 + 20) |= 0x800u;
    return;
  }

  sub_1812CF36C(98123);
  sub_1812CF36C(97498);
  sub_1812CF36C(97481);
}

  *(void *)(v1 + 24) = 0LL;
  *(_DWORD *)(v1 + 16) = 0;
  if (v2)
  {
    while (1)
    {
      char v5 = (void *)*v2;
      if (*(_BYTE *)(v1 + 1))
      {
        uint64_t v6 = v2[3];
        if (v6)
        {
          unsigned int v7 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_19;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v6);
          --qword_18C468B10;
          off_18C4653A8(v6);
          uint64_t v6 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70) {
            break;
          }
        }
      }

  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_13;
  }

  return 0LL;
}

  uint64_t result = sqlite3_vmprintf(a2, va);
  *a1 = result;
  return result;
}

  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_13;
  }

  return 0LL;
}

  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_13;
  }

  return 0LL;
}

            uint64_t v19 = sub_18138E7A0((uint64_t *)(a1 + 64), v18);
            uint64_t v144 = 0LL;
            uint64_t v17 = v142;
            if ((_DWORD)v19) {
              goto LABEL_190;
            }
LABEL_9:
            if (++v15 == v17) {
              goto LABEL_117;
            }
            continue;
          case 'M':
            unsigned int v24 = *(void *)(a5 + 8 * v15);
            if (v24)
            {
              int v25 = *(unsigned __int16 *)(v24 + 20);
              if ((~v25 & 0x202) != 0 || *(_BYTE *)(v24 + 22) != 1)
              {
                if ((v25 & 1) != 0) {
                  unsigned int v24 = 0LL;
                }
                else {
                  unsigned int v24 = sub_181303998((int *)v24, 1);
                }
              }

              else
              {
                unsigned int v24 = *(void *)(v24 + 8);
              }
            }

            LODWORD(v84) = 0;
            char v85 = *(_BYTE *)(a3 + v16);
            uint64_t v86 = (unsigned __int8 *)(v143 + v16);
            do
            {
              char v84 = (10 * v84 + v85 - 48);
              __int16 v87 = *v86++;
              char v85 = v87;
              ++v16;
            }

            while ((v87 - 48) < 0xA);
            if (v24) {
              v88 = (unsigned __int8 *)v24;
            }
            else {
              v88 = (unsigned __int8 *)&byte_1813CEAEE;
            }
            if (*v88 != 42)
            {
              int v89 = sub_18138DBF0(v6, 0, v84, v88, &v144, v135);
              uint64_t v18 = v144;
              if ((_DWORD)v89)
              {
                unsigned int v8 = v89;
                goto LABEL_192;
              }

              goto LABEL_8;
            }

            do
            {
              int v92 = *++v88;
              char v91 = v92;
            }

            while (v92 == 32);
            v93 = 0LL;
            while ((v91 | 0x20) != 0x20)
            {
              v94 = &v88[v93++];
              char v91 = v94[1];
            }

            *__int16 v133 = 3;
            if ((_DWORD)v93 != 2)
            {
              if ((_DWORD)v93 == 5)
              {
                v107 = *v88;
                if ((v107 & 0xFFFFFFDF) == 0x52)
                {
                  v107 = v88[1];
                  if ((v107 & 0xFFFFFFDF) == 0x45)
                  {
                    v107 = v88[2];
                    if ((v107 & 0xFFFFFFDF) == 0x41)
                    {
                      v107 = v88[3];
                      if ((v107 & 0xFFFFFFDF) == 0x44)
                      {
                        v107 = v88[4];
                        if ((v107 & 0xFFFFFFDF) == 0x53)
                        {
LABEL_250:
                          uint64_t v18 = 0LL;
                          unsigned int v8 = 0LL;
                          *(void *)(a1 + 88) = *(int *)(*(void *)(v5 + 32) + 112LL);
                          goto LABEL_192;
                        }

                        int v108 = 115;
                      }

                      else
                      {
                        int v108 = 100;
                      }
                    }

                    else
                    {
                      int v108 = 97;
                    }
                  }

                  else
                  {
                    int v108 = 101;
                  }
                }

                else
                {
                  int v108 = 114;
                }

                if (v108 == byte_1813C6343[v107]) {
                  goto LABEL_250;
                }
              }

              goto LABEL_251;
            }

            uint64_t v127 = *v88;
            if ((v127 & 0xFFFFFFDF) == 0x49)
            {
              uint64_t v127 = v88[1];
              if ((v127 & 0xFFFFFFDF) == 0x44) {
                goto LABEL_241;
              }
              uint64_t v128 = 100;
            }

            else
            {
              uint64_t v128 = 105;
            }

            if (v128 != byte_1813C6343[v127])
            {
LABEL_251:
              uint64_t v129 = sqlite3_mprintf("unknown special query: %.*s", v93, (const char *)v88);
              uint64_t v18 = 0LL;
              uint64_t v130 = (char **)(v5 + 16);
              goto LABEL_252;
            }

  char v5 = a1[22];
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_14;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  off_18C4653A8(v5);
  char v5 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = &xmmword_18C465410;
LABEL_14:
    (*v6)(v5);
  }

  a2[2] = 0LL;
  if (v3[15]) {
    return result;
  }
  do
  {
    unsigned int v7 = *((int *)a2 + 3);
    unsigned int v8 = v7 - 1;
    *((_DWORD *)a2 + 3) = v8;
    uint64_t result = (unsigned __int16 **)sub_18138BCF4((uint64_t)v3, v8 + ((unint64_t)**a2 << 37));
    if (result)
    {
      unsigned int v9 = (unsigned int *)result;
      if (*((_DWORD *)a2 + 3) == *((_DWORD *)a2 + 16))
      {
        uint64_t v10 = (unsigned int *)*((int *)a2 + 17);
      }

      else
      {
        uint64_t v10 = (unsigned int *)__rev16(**result);
        if ((_DWORD)v10)
        {
          if (*((_DWORD *)result + 3) > (int)v10)
          {
LABEL_29:
            a2[2] = (unsigned int *)result;
            a2[4] = v10;
            goto LABEL_30;
          }

          v3[15] = 267;
        }
      }

      if (a2[2])
      {
        uint64_t v10 = a2[4];
        unsigned int v9 = a2[2];
LABEL_30:
        uint64_t result = (unsigned __int16 **)sub_18138BFCC((char *)v10 + *(void *)v9, (unint64_t *)a2 + 15);
        a2[4] = (unsigned int *)((char *)a2[4] + result);
        break;
      }

      uint64_t v6 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
        --qword_18C468B10;
        uint64_t result = (unsigned __int16 **)off_18C4653A8(v9);
        unsigned int v9 = (unsigned int *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          continue;
        }
        uint64_t v6 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
      }

      uint64_t result = (unsigned __int16 **)(*v6)(v9);
    }
  }

  while (!v3[15]);
  uint64_t v11 = a2[2];
  if (v11)
  {
    *((_DWORD *)a2 + 19) = v11[2] + 1;
    return (unsigned __int16 **)sub_1813915A4(v3, (uint64_t)a2);
  }

  return result;
}

  unsigned int v7 = *((int *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7 + 1;
  unsigned int v8 = (uint64_t)a2[3];
  if (v8)
  {
    a2[2] = (unsigned int *)v8;
    a2[3] = 0LL;
    unsigned int v9 = *(_DWORD *)(v8 + 8);
    uint64_t v10 = *(_DWORD *)(v8 + 12);
    goto LABEL_10;
  }

  uint64_t result = (uint64_t)sub_18138BCF4(v3, v7 + 1 + ((unint64_t)*v4 << 37));
  if (!result) {
    goto LABEL_23;
  }
  unsigned int v8 = result;
  unsigned int v9 = *(_DWORD *)(result + 8);
  if (v9 < 4 || (uint64_t v10 = *(_DWORD *)(result + 12), v10 > v9))
  {
    *(_DWORD *)(v3 + 60) = 267;
    BOOL v13 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v8);
      unsigned int v8 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_23;
      }
      BOOL v13 = &xmmword_18C465410;
    }

    uint64_t result = (*v13)(v8);
LABEL_23:
    a2[2] = 0LL;
    return result;
  }

  a2[2] = (unsigned int *)result;
LABEL_10:
  *((_DWORD *)a2 + 18) = v10;
  if (v10 >= v9)
  {
    *((_DWORD *)a2 + 19) = v9 + 1;
  }

  else
  {
    uint64_t v11 = (char *)(*(void *)v8 + v10);
    int v12 = *v11;
    if (*v11 < 0)
    {
      int v14 = v11[1];
      if (v11[1] < 0)
      {
        unsigned int v15 = v11[2];
        if (v15 < 0)
        {
          uint64_t result = sub_18138BFCC(v11, &v16);
          *((_DWORD *)a2 + 19) = v16 & 0x7FFFFFFF;
        }

        else
        {
          *((_DWORD *)a2 + 19) = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
          uint64_t result = 3LL;
        }
      }

      else
      {
        *((_DWORD *)a2 + 19) = ((v12 & 0x7F) << 7) | v14;
        uint64_t result = 2LL;
      }
    }

    else
    {
      *((_DWORD *)a2 + 19) = v12;
      uint64_t result = 1LL;
    }

    *((_DWORD *)a2 + 18) = result + v10;
  }

  return result;
}

      unsigned int v7 = *(void *)v1;
      if (!*(_DWORD *)(v1 + 60))
      {
        uint64_t v11 = *(_DWORD *)(v7 + 140);
        if (v11 >= 1)
        {
          if (!v3)
          {
LABEL_16:
            sub_181389C04((unsigned __int8 *)v1, (uint64_t)v3);
            uint64_t result = sub_18138A584(v3);
            *(_DWORD *)(v1 + 32) = 0;
            *(_DWORD *)(v1 + 52) = 0;
            *(_DWORD *)(v1 + 56) = 0;
            return result;
          }

          int v12 = *((void *)v3 + 1);
          BOOL v13 = v12 + *(int *)(v1 + 52) + (uint64_t)v6;
          int v14 = *(int *)(v1 + 16);
          *((void *)v3 + 1) = v13;
          sub_1813A0B84((_DWORD *)v1, &v96, v14 * (v13 / v14 - v12 / v14) * v3[7], v11);
          uint64_t v3 = v96;
          unsigned int v7 = *(void *)v1;
        }
      }

      unsigned int v8 = *(_DWORD *)(v7 + 144);
      *(void *)&uint64_t v98 = v3;
      if (v3 && v3[7] >= 1)
      {
        if (!*(_DWORD *)(v1 + 60))
        {
          unsigned int v9 = 1;
          uint64_t v10 = 9LL;
          do
          {
            if (v3[v10] < v8) {
              break;
            }
            sub_1813A0DD0(v1, (int **)&v98, v9 - 1, 0LL);
            uint64_t v3 = (int *)v98;
            sub_1813A04AC(v1, v9++, v98);
            v10 += 4LL;
          }

          while (!*(_DWORD *)(v1 + 60));
        }

        uint64_t v96 = v3;
      }

      goto LABEL_16;
    }

    char v83 = v2;
    char v82 = v28;
    uint64_t v86 = v29;
    while (1)
    {
      uint64_t v34 = strlen((const char *)(v33 + 48));
      sub_1813963FC((_DWORD *)v2, v33, 0LL);
      __src = (char *)(v33 + 48 + v34 + 1);
      int v35 = *(_DWORD *)(v33 + 24) - v34;
      int v36 = (unsigned __int8 *)(v33 + 48);
      unsigned int v37 = (v35 - 49);
      uint64_t v38 = strlen((const char *)(v33 + 48));
      if ((_DWORD)v29)
      {
        size_t v39 = *v5;
      }

      else
      {
        sub_18139E03C((_DWORD *)v1, (uint64_t)&v98, v38, v36);
        if (*(_DWORD *)(v1 + 60)) {
          goto LABEL_37;
        }
        if (v93 > DWORD2(v99) + DWORD2(v100) + (int)v37)
        {
          memcpy((void *)(v99 + SDWORD2(v99)), __src, (int)v37);
          DWORD2(v99) += v37;
          size_t v39 = *v5;
          goto LABEL_137;
        }

        size_t v39 = 0;
      }

      if (!v39 && (int)v37 >= 1)
      {
        char v84 = v36;
        char v85 = v38;
        int v90 = v37;
        char v91 = 0LL;
        LODWORD(v37) = 0;
        uint64_t v40 = 0LL;
        __int16 v87 = v81;
        while (1)
        {
          v94 = 0LL;
          uint64_t v46 = (int)v37 + (unint64_t)sub_18138BFCC(&__src[(int)v37], &v94);
          v91 += v94;
          if (!(_DWORD)v29)
          {
            size_t v53 = 0;
            uint64_t v48 = v90;
            goto LABEL_72;
          }

          uint64_t v48 = v90;
          if ((_DWORD)v28 == 1) {
            break;
          }
          if ((__src[v46] & 1) == 0) {
            goto LABEL_71;
          }
          int v92 = v40;
          uint64_t v41 = v28;
          unsigned int v42 = v29;
          v43 = (char *)v36;
          int v44 = v46;
          uint64_t v45 = (unsigned __int8 *)v43;
          sub_18139E498((unsigned __int8 *)v1, (uint64_t)v3, v43, v91);
          LODWORD(v46) = v44;
          if (!*(_DWORD *)(v1 + 60) && __src[v44] != 1)
          {
            size_t v53 = 0;
            int v36 = v45;
            uint64_t v29 = v42;
            int v28 = v41;
            uint64_t v40 = v92;
            goto LABEL_72;
          }

          LODWORD(v37) = v44 + 1;
          int v36 = v45;
          uint64_t v29 = v42;
          int v28 = v41;
          uint64_t v40 = v92;
LABEL_57:
          size_t v39 = *v5;
          if (*v5) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = (int)v37 < (int)v90;
          }
          if (!v47) {
            goto LABEL_137;
          }
        }

        if ((int)v46 >= (int)v90 || __src[v46])
        {
LABEL_71:
          size_t v53 = 0;
          goto LABEL_72;
        }

        uint64_t v49 = (char *)v36;
        char v50 = v46;
        uint64_t v51 = (unsigned __int8 *)v49;
        sub_18139E498((unsigned __int8 *)v1, (uint64_t)v3, v49, v91);
        size_t v52 = v50;
        unsigned int v37 = v50 + 1LL;
        if ((int)v37 >= (int)v90)
        {
          int v36 = v51;
LABEL_135:
          uint64_t v29 = v86;
          goto LABEL_57;
        }

        int v36 = v51;
        if (__src[v37]) {
          goto LABEL_135;
        }
        uint64_t v48 = 0LL;
        LODWORD(v46) = v52 + 2;
        size_t v53 = *v5;
        uint64_t v29 = v86;
LABEL_72:
        v88 = v46;
        if (!(v53 | v87))
        {
          sub_18139E03C((_DWORD *)v1, (uint64_t)&v98, v85, v36);
          __int16 v87 = 1;
        }

        if (BYTE9(v102))
        {
          *(_WORD *)uint64_t v99 = bswap32(WORD4(v99)) >> 16;
          unint64_t v54 = (int8x8_t *)(v99 + SDWORD2(v99));
          uint64_t v40 = v91;
          if (v91 > 0x7F)
          {
            if (v91 >> 14)
            {
              uint64_t v55 = sub_181308E00(v54, v91);
            }

            else
            {
              v54->i8[0] = (v91 >> 7) | 0x80;
              v54->i8[1] = v91 & 0x7F;
              uint64_t v55 = 2;
            }
          }

          else
          {
            v54->i8[0] = v91;
            uint64_t v55 = 1;
          }

          DWORD2(v99) += v55;
          BYTE9(v102) = 0;
          sub_18139F890(v1, (unsigned int *)&v98, v91);
        }

        else
        {
          uint64_t v56 = v91 - v40;
          uint64_t v40 = v91;
          unint64_t v57 = (int8x8_t *)(v99 + SDWORD2(v99));
          if (v56 > 0x7F)
          {
            if (v56 >> 14)
            {
              uint64_t v58 = sub_181308E00(v57, v56);
            }

            else
            {
              v57->i8[0] = (v56 >> 7) | 0x80;
              v57->i8[1] = v56 & 0x7F;
              uint64_t v58 = 2;
            }
          }

          else
          {
            v57->i8[0] = v56;
            uint64_t v58 = 1;
          }

          DWORD2(v99) += v58;
        }

        if (*v5) {
          goto LABEL_37;
        }
        int v90 = v48;
        if ((_DWORD)v28 == 1)
        {
          if (v88 >= (int)v48 || __src[v88])
          {
            LODWORD(v37) = v88;
          }

          else
          {
            char v63 = SDWORD2(v99);
            ++DWORD2(v99);
            *(_BYTE *)(v99 + v63) = 0;
            unsigned int v37 = v88 + 1LL;
            if ((int)v37 < (int)v90 && !__src[v37])
            {
              uint64_t v64 = SDWORD2(v99);
              ++DWORD2(v99);
              *(_BYTE *)(v99 + v64) = 0;
              LODWORD(v37) = v88 + 2;
            }
          }

          if (DWORD2(v100) + DWORD2(v99) >= v93) {
            sub_18139FB7C(v1, (unsigned int *)&v98);
          }
          goto LABEL_57;
        }

        v59 = &__src[v88];
        uint64_t v60 = *v59;
        if (*v59 < 0)
        {
          uint64_t v62 = v59[1];
          if (v59[1] < 0)
          {
            v65 = v59[2];
            if (v65 < 0)
            {
              v61 = sub_18138BFCC(&__src[v88], &v97);
              v59 = &__src[v88];
              uint64_t v60 = v97 & 0x7FFFFFFF;
            }

            else
            {
              uint64_t v60 = v65 & 0x7F | (v60 << 14) & 0x1FC07F | ((v62 & 0x7F) << 7);
              v61 = 3;
            }
          }

          else
          {
            uint64_t v60 = ((v60 & 0x7F) << 7) | v62;
            v61 = 2;
          }
        }

        else
        {
          v61 = 1;
        }

        uint64_t v66 = v61 + (v60 >> 1);
        if ((int)v66 + DWORD2(v99) + DWORD2(v100) <= v93)
        {
          memcpy((void *)(v99 + SDWORD2(v99)), v59, v66);
          DWORD2(v99) += v66;
LABEL_134:
          LODWORD(v37) = v66 + v88;
          uint64_t v40 = v91;
          int v2 = v83;
          int v36 = v84;
          int v28 = v82;
          goto LABEL_135;
        }

        unsigned int v67 = 0;
        while (2)
        {
          if (*v5) {
            goto LABEL_134;
          }
          int v68 = SDWORD2(v99);
          int v69 = v93 - (DWORD2(v99) + DWORD2(v100));
          char v70 = v66 - v67;
          if ((int)v66 - v67 > v69)
          {
            int v71 = (unsigned __int8 *)&v59[v67];
            if ((char)*v71 < 0)
            {
              if ((char)v71[1] < 0)
              {
                if ((char)v71[2] < 0)
                {
                  uint64_t v72 = sub_18138BFCC(&v59[v67], &v97);
                  v59 = &__src[v88];
                  if (v72 >= v69) {
                    goto LABEL_122;
                  }
                  goto LABEL_127;
                }

                uint64_t v72 = 3;
                if (v69 > 3) {
                  goto LABEL_127;
                }
              }

              else
              {
                uint64_t v72 = 2;
                if (v69 > 2) {
                  goto LABEL_127;
                }
              }

    LODWORD(v12) = 0;
    goto LABEL_9;
  }

  v65 = *(double *)v10;
  if (*(double *)v10 >= -9.22337204e18)
  {
    if (v65 <= 9.22337204e18) {
      *(void *)&int v12 = (uint64_t)v65;
    }
    else {
      LODWORD(v12) = -1;
    }
  }

  else
  {
    LODWORD(v12) = 0;
  }

    uint64_t v11 = 0LL;
    goto LABEL_9;
  }

  size_t v20 = *(double *)v9;
  if (*(double *)v9 >= -9.22337204e18)
  {
    if (v20 <= 9.22337204e18) {
      uint64_t v11 = (uint64_t)v20;
    }
    else {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v11 = 0x8000000000000000LL;
  }

  if (v7 + 1 >= a2) {
    return 0LL;
  }
  unsigned int v8 = v7;
  unsigned int v9 = a1[v7 + 1];
  uint64_t v10 = (((v9 - 97) >> 1) | (((_BYTE)v9 - 97) << 7));
  uint64_t v4 = v10 > 0xA;
  uint64_t v11 = (1 << v10) & 0x495;
  if (!v4 && v11 != 0) {
    goto LABEL_13;
  }
  if (v9 != 121) {
    uint64_t v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
LABEL_13:
    if (v7 + 2 >= a2) {
      return 0LL;
    }
    ++v7;
    BOOL v13 = &a1[v8 + 2];
    while (1)
    {
      int v14 = *v13++;
      unsigned int v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
      uint64_t v4 = v15 > 0xA;
      uint64_t v16 = (1 << v15) & 0x495;
      if (v4 || v16 == 0) {
        break;
      }
      uint64_t v18 = v7 + 2;
      ++v7;
      if (v18 >= a2) {
        return 0LL;
      }
    }
  }

  size_t v20 = &a1[v7 + 2];
  int v21 = (a2 - (v7 + 2));
  if ((int)v21 < 1)
  {
    char v27 = 0;
    goto LABEL_43;
  }

  unsigned int v22 = *v20;
  size_t v23 = (((v22 - 97) >> 1) | (((_BYTE)v22 - 97) << 7));
  unsigned int v24 = 1;
  uint64_t v4 = v23 > 0xA;
  int v25 = (1 << v23) & 0x495;
  if (!v4 && v25 != 0)
  {
    char v27 = 0;
    goto LABEL_44;
  }

  if (v22 != 121)
  {
    char v27 = 1;
    if ((_DWORD)v21 != 1)
    {
      int v44 = 0LL;
      while (1)
      {
        uint64_t v45 = a1[v7 + 3 + v44];
        uint64_t v46 = (((v45 - 97) >> 1) | (((_BYTE)v45 - 97) << 7));
        uint64_t v4 = v46 > 0xA;
        uint64_t v47 = (1 << v46) & 0x495;
        if (!v4 && v47 != 0)
        {
          char v27 = v44 + 1;
          goto LABEL_74;
        }

        if (v45 == 121) {
          break;
        }
        if (v21 - 1 == ++v44)
        {
          unsigned int v24 = 0;
          char v27 = a2 - (v7 + 2);
          goto LABEL_44;
        }
      }

      char v27 = v44 + 1;
      goto LABEL_74;
    }

  if (v7 + 1 >= a2) {
    return 0LL;
  }
  unsigned int v8 = v7;
  unsigned int v9 = a1[v7 + 1];
  uint64_t v10 = (((v9 - 97) >> 1) | (((_BYTE)v9 - 97) << 7));
  uint64_t v4 = v10 > 0xA;
  uint64_t v11 = (1 << v10) & 0x495;
  if (!v4 && v11 != 0) {
    goto LABEL_13;
  }
  if (v9 != 121) {
    uint64_t v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
LABEL_13:
    if (v7 + 2 >= a2) {
      return 0LL;
    }
    ++v7;
    BOOL v13 = &a1[v8 + 2];
    while (1)
    {
      int v14 = *v13++;
      unsigned int v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
      uint64_t v4 = v15 > 0xA;
      uint64_t v16 = (1 << v15) & 0x495;
      if (v4 || v16 == 0) {
        break;
      }
      uint64_t v18 = v7 + 2;
      ++v7;
      if (v18 >= a2) {
        return 0LL;
      }
    }
  }

  size_t v20 = &a1[v7 + 2];
  int v21 = (a2 - (v7 + 2));
  if ((int)v21 < 1)
  {
    char v27 = 0;
    goto LABEL_43;
  }

  unsigned int v22 = *v20;
  size_t v23 = (((v22 - 97) >> 1) | (((_BYTE)v22 - 97) << 7));
  unsigned int v24 = 1;
  uint64_t v4 = v23 > 0xA;
  int v25 = (1 << v23) & 0x495;
  if (!v4 && v25 != 0)
  {
    char v27 = 0;
    goto LABEL_44;
  }

  if (v22 != 121)
  {
    char v27 = 1;
    if ((_DWORD)v21 != 1)
    {
      int v44 = 0LL;
      while (1)
      {
        uint64_t v45 = a1[v7 + 3 + v44];
        uint64_t v46 = (((v45 - 97) >> 1) | (((_BYTE)v45 - 97) << 7));
        uint64_t v4 = v46 > 0xA;
        uint64_t v47 = (1 << v46) & 0x495;
        if (!v4 && v47 != 0)
        {
          char v27 = v44 + 1;
          goto LABEL_74;
        }

        if (v45 == 121) {
          break;
        }
        if (v21 - 1 == ++v44)
        {
          unsigned int v24 = 0;
          char v27 = a2 - (v7 + 2);
          goto LABEL_44;
        }
      }

      char v27 = v44 + 1;
      goto LABEL_74;
    }

  unsigned int v8 = a1[v7 + 1];
  unsigned int v9 = (((v8 - 97) >> 1) | (((_BYTE)v8 - 97) << 7));
  uint64_t v4 = v9 > 0xA;
  uint64_t v10 = (1 << v9) & 0x495;
  if (!v4 && v10 != 0) {
    goto LABEL_13;
  }
  if (v8 != 121) {
    uint64_t v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
LABEL_13:
    int v12 = v7 + 2LL;
    if ((int)v12 < a2)
    {
      BOOL v13 = &a1[v12];
      while (1)
      {
        int v14 = *v13++;
        unsigned int v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
        uint64_t v4 = v15 > 0xA;
        uint64_t v16 = (1 << v15) & 0x495;
        if (v4 || v16 == 0) {
          break;
        }
        LODWORD(v12) = v12 + 1;
      }

      return 1LL;
    }

    return 0LL;
  }

  return 1LL;
}

  *(void *)(v1 + 96) = 0LL;
  *(void *)(v1 + 104) = 0LL;
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 8));
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_13;
  }

  return 0LL;
}

  char v145 = (void *)(a1 + 2120);
  *(void *)(a1 + 2088) = 0LL;
  while (1)
  {
LABEL_9:
    char v5 = *(unsigned int *)(a1 + 2072);
    if ((v5 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 2112) = 0;
      *(void *)(a1 + 2144) = 0LL;
      *(void *)(a1 + 2104) = 0LL;
      *char v145 = 0LL;
      *(void *)(a1 + 2128) = 0LL;
      if (sqlite3_step(*(sqlite3_stmt **)(a1 + 8)) == 100
        && (uint64_t v31 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), 1), *(_DWORD *)(v138 + 32)))
      {
        unsigned int v32 = v31;
        v33 = sub_1813B65D0(v2, v31, a1 + 24);
        *(_DWORD *)(a1 + 24) = v32;
        *(_DWORD *)(a1 + 40) = 0;
        if (!*(_BYTE *)(a1 + 17))
        {
          uint64_t v34 = sqlite3_mprintf("/");
          *(void *)(a1 + 48) = v34;
          if (v34) {
            v33 = v33;
          }
          else {
            v33 = 7LL;
          }
        }

        *(_DWORD *)(a1 + 2072) = 0;
        *(_DWORD *)(a1 + 2104) = 1;
        if (!(_DWORD)v33) {
          goto LABEL_63;
        }
      }

      else
      {
        *(_BYTE *)(a1 + 16) = 1;
        return sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
      }

      return v33;
    }

    if (!*(_BYTE *)(a1 + 17))
    {
      *(_DWORD *)(a1 + 2112) = 0;
      *(void *)(a1 + 2144) = 0LL;
      *(void *)(a1 + 2104) = 0LL;
      *char v145 = 0LL;
      *(void *)(a1 + 2128) = 0LL;
    }

    uint64_t v6 = a1 + (v5 << 6);
    unsigned int v7 = v6 + 24;
    unsigned int v9 = *(_DWORD *)(v6 + 60);
    unsigned int v8 = (int *)(v6 + 60);
    uint64_t v11 = v8 - 5;
    uint64_t v10 = *(v8 - 5);
    if (v10 >= v9) {
      break;
    }
    int v12 = a1 + (v5 << 6);
    BOOL v13 = (uint64_t *)(v12 + 72);
    int v134 = (uint64_t *)(v12 + 72);
    __int16 v136 = (unsigned int *)(v12 + 80);
    BOOL v139 = v7;
    do
    {
      v141 = v10;
      uint64_t v143 = *v13;
      int v14 = *v13 + 32LL * v10;
      uint64_t v17 = *(_DWORD *)(v14 + 28);
      uint64_t v16 = (int *)(v14 + 28);
      unsigned int v15 = v17;
      uint64_t v18 = *(v16 - 5);
      while (v15 < v18)
      {
        if (!*(_BYTE *)(v2 + 17))
        {
          size_t v20 = *(_DWORD *)(*(void *)(v2 + 8) + 56LL);
          goto LABEL_25;
        }

        ++*(_DWORD *)(v2 + 20);
        if (*(_BYTE *)(v2 + 18))
        {
          size_t v20 = *(_DWORD *)(*(void *)(v2 + 8) + 56LL);
        }

        else
        {
          sub_1812FDE20(v2);
          size_t v20 = *(_DWORD *)(*(void *)(v2 + 8) + 56LL);
          if (!*(_BYTE *)(v2 + 17)) {
            goto LABEL_25;
          }
        }

        int v21 = *(_DWORD *)(v2 + 20) - 1;
        *(_DWORD *)(v2 + 20) = v21;
        if (!v21) {
          sub_1812FDEFC(v2);
        }
LABEL_25:
        ++*(_DWORD *)(a1 + 2104);
        unsigned int v22 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 24LL) + 32LL)
        size_t v23 = *(int **)(v22 + 8);
        unsigned int v24 = *(void *)(*(void *)v23 + 72LL);
        int v25 = *(_DWORD *)(a1 + 2076);
        BOOL v146 = v25;
        if (*(void *)v24)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(*(void *)v24 + 80LL))( v24,  230440LL,  &v146))
          {
            char v27 = v147;
            *(void *)(a1 + 2136) = v146;
            *(void *)(a1 + 2144) += v27;
            goto LABEL_30;
          }

          size_t v23 = *(int **)(v22 + 8);
          int v25 = *(_DWORD *)(a1 + 2076);
        }

        int v26 = *(void *)(a1 + 2144) + v23[13];
        *(void *)(a1 + 2144) = v26;
        *(void *)(a1 + 2136) = v26 * (v25 - 1);
LABEL_30:
        int v28 = *v16;
        uint64_t v18 = *(v16 - 5);
        uint64_t v29 = *(void *)(a1 + 2128);
        if ((int)v28 >= v18 - 1)
        {
          uint64_t v19 = *(v16 - 1);
          *(void *)(a1 + 2128) = v29 + v19;
          *(void *)(a1 + 2120) += v20 - (int)v19 - 4;
        }

        else
        {
          *(void *)(a1 + 2128) = v29 + v20 - 4;
        }

        unsigned int v15 = v28 + 1;
        *uint64_t v16 = v28 + 1;
        if (!*(_BYTE *)(a1 + 17))
        {
          *(void *)(a1 + 2080) = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
          *(_DWORD *)(a1 + 2076) = *(_DWORD *)(*(void *)(v143 + 32 * v141 + 16) + 4 * v28);
          *(void *)(a1 + 2096) = "overflow";
          uint64_t v128 = sqlite3_mprintf("%s%.3x+%.6x", *(const char **)(a1 + (v5 << 6) + 48), *v11, v28);
          *(void *)(a1 + 2088) = v128;
          if (v128) {
            return 0LL;
          }
          else {
            return 7LL;
          }
        }
      }

      uint64_t v30 = *v136;
      if ((_DWORD)v30)
      {
        unsigned int v7 = v139;
        goto LABEL_44;
      }

      uint64_t v10 = *v11 + 1;
      *uint64_t v11 = v10;
      unsigned int v7 = v139;
      BOOL v13 = v134;
    }

    while (v10 < *v8);
LABEL_45:
    unsigned int v37 = a1 + (v5 << 6);
    uint64_t v40 = *(void *)(v37 + 32);
    uint64_t v38 = (void *)(v37 + 32);
    size_t v39 = v40;
    sub_1813B6458(v7);
    uint64_t v41 = v38[2];
    if (v41)
    {
      unsigned int v42 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_51;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v41);
      --qword_18C468B10;
      off_18C4653A8(v41);
      uint64_t v41 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        unsigned int v42 = &xmmword_18C465410;
LABEL_51:
        (*v42)(v41);
      }
    }

    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)unsigned int v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    unsigned __int8 *v38 = v39;
    v43 = *(_DWORD *)(a1 + 2072);
    *(_DWORD *)(a1 + 2072) = v43 - 1;
    if (*(_BYTE *)(a1 + 17) && v43 < 1) {
      return 0LL;
    }
  }

  uint64_t v30 = *(unsigned int *)(a1 + (v5 << 6) + 80);
  if (!(_DWORD)v30) {
    goto LABEL_45;
  }
LABEL_44:
  int v35 = *v11;
  int v36 = *v8;
  int v44 = *(_DWORD *)(a1 + 2072);
  *(_DWORD *)(a1 + 2072) = v44 + 1;
  if (v44 >= 31)
  {
    sub_1813B6264(a1);
    return sub_1812FBF50(229270);
  }

  if ((_DWORD)v35 != v36) {
    uint64_t v30 = *(unsigned int *)(*(void *)(a1 + (v5 << 6) + 72) + 32 * v35 + 4);
  }
  *(_DWORD *)(v7 + 64) = v30;
  v33 = sub_1813B65D0(v2, v30, v7 + 64);
  ++*(_DWORD *)(a1 + 2104);
  *(_DWORD *)(v7 + 80) = 0;
  if (!*(_BYTE *)(a1 + 17))
  {
    uint64_t v45 = sqlite3_mprintf("%s%.3x/", *(const char **)(a1 + (v5 << 6) + 48), *v11);
    *(void *)(v7 + 88) = v45;
    if (v45) {
      v33 = v33;
    }
    else {
      v33 = 7LL;
    }
  }

  ++*v11;
  if ((_DWORD)v33) {
    return v33;
  }
LABEL_63:
  uint64_t v46 = *(int *)(a1 + 2072);
  uint64_t v47 = a1 + (v46 << 6);
  uint64_t v48 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t v49 = *(_DWORD *)(v47 + 24);
  v142 = v47 + 24;
  *(void *)(a1 + 2080) = v48;
  *(_DWORD *)(a1 + 2076) = v49;
  char v50 = *(void *)(v47 + 32);
  uint64_t v51 = 100LL;
  if (v49 != 1) {
    uint64_t v51 = 0LL;
  }
  size_t v52 = (unsigned __int8 *)(v50 + v51);
  size_t v53 = *v52;
  *(_BYTE *)(v47 + 56) = v53;
  unint64_t v54 = (_BYTE *)(v47 + 56);
  uint64_t v55 = v53 - 2;
  uint64_t v144 = 0;
  uint64_t v56 = 8;
  switch(v55)
  {
    case 0:
    case 3:
      uint64_t v56 = 12;
      uint64_t v144 = 1;
      goto LABEL_67;
    case 8:
    case 11:
LABEL_67:
      if (v49 == 1) {
        unint64_t v57 = v56 + 100;
      }
      else {
        unint64_t v57 = v56;
      }
      uint64_t v58 = __rev16(*(unsigned __int16 *)(v52 + 3));
      v59 = a1 + (v46 << 6);
      *(_DWORD *)(v59 + 84) = 0;
      v135 = (unsigned int *)(v59 + 84);
      int v137 = v57;
      *(_DWORD *)(v59 + 60) = v58;
      v140 = (int *)(v59 + 60);
      uint64_t v60 = *(void *)(v2 + 8);
      v61 = *(_DWORD *)(v60 + 52);
      uint64_t v62 = v52[7] - (v57 + 2 * v58) + (bswap32(*(unsigned __int16 *)(v52 + 5)) >> 16);
      char v63 = __rev16(*(unsigned __int16 *)(v52 + 1));
      break;
    default:
      goto LABEL_77;
  }

  while (v63)
  {
    if ((int)v63 < v61)
    {
      v62 += bswap32(*(unsigned __int16 *)(v50 + v63 + 2)) >> 16;
      uint64_t v64 = __rev16(*(unsigned __int16 *)(v50 + v63));
      v65 = v64 >= v63 + 4 || v64 == 0;
      char v63 = v64;
      if (v65) {
        continue;
      }
    }

    goto LABEL_77;
  }

  int v71 = a1 + (v46 << 6);
  *(_DWORD *)(v71 + 64) = v62;
  if (v144)
  {
    *(_DWORD *)(v71 + 80) = bswap32(*((_DWORD *)v52 + 2));
    if (!v58) {
      goto LABEL_78;
    }
  }

  else
  {
    *(_DWORD *)(v71 + 80) = 0;
    if (!v58) {
      goto LABEL_78;
    }
  }

  if (*(_BYTE *)(v2 + 17))
  {
    uint64_t v96 = *(_DWORD *)(v2 + 20) + 1;
    *(_DWORD *)(v2 + 20) = v96;
    if (*(_BYTE *)(v2 + 18))
    {
      uint64_t v130 = *(_DWORD *)(v60 + 56);
LABEL_116:
      uint64_t v97 = v96 - 1;
      *(_DWORD *)(v2 + 20) = v97;
      if (!v97) {
        sub_1812FDEFC(v2);
      }
    }

    else
    {
      sub_1812FDE20(v2);
      uint64_t v130 = *(_DWORD *)(*(void *)(v2 + 8) + 56LL) - *(_DWORD *)(*(void *)(v2 + 8) + 52LL) + v61;
      if (*(_BYTE *)(v2 + 17))
      {
        uint64_t v96 = *(_DWORD *)(v2 + 20);
        goto LABEL_116;
      }
    }
  }

  else
  {
    uint64_t v130 = *(_DWORD *)(v60 + 56);
  }

  uint64_t v98 = *v140;
  if (sqlite3_initialize())
  {
    *(void *)(a1 + (v46 << 6) + 72) = 0LL;
    return 7LL;
  }

  uint64_t v99 = (void *)sub_18126F0AC(32 * v98 + 32);
  v100 = a1 + (v46 << 6);
  *(void *)(v100 + 72) = v99;
  uint64_t v132 = (uint64_t *)(v100 + 72);
  if (!v99) {
    return 7LL;
  }
  bzero(v99, 32LL * *v140 + 32);
  if (*v140 >= 1)
  {
    uint64_t v101 = 0LL;
    uint64_t v131 = v130 - 4;
    __int16 v133 = v46;
    while (1)
    {
      v102 = __rev16(*(unsigned __int16 *)(v50 + v137 + 2 * v101));
      v104 = *v132;
      if (v144)
      {
        *(_DWORD *)(v104 + 32 * v101 + 4) = bswap32(*(_DWORD *)(v50 + v102));
        LODWORD(v102) = v102 + 4;
      }

      v105 = *v54;
      if (v105 != 5)
      {
        v106 = (char *)(v50 + v102);
        v107 = *v106;
        if ((v107 & 0x80) != 0)
        {
          unsigned int v109 = v106[1];
          if (v106[1] < 0)
          {
            int v110 = v106[2];
            if (v110 < 0)
            {
              int v108 = sub_18129BD74(v106, &v146);
              if (HIDWORD(v146)) {
                v107 = -1;
              }
              else {
                v107 = v146;
              }
            }

            else
            {
              v107 = v110 & 0x7F | (v107 << 14) & 0x1FC07F | ((v109 & 0x7F) << 7);
              int v108 = 3;
            }
          }

          else
          {
            v107 = ((v107 & 0x7F) << 7) | v109;
            int v108 = 2;
          }
        }

        else
        {
          int v108 = 1;
        }

        v111 = v102 + v108;
        if (v105 == 13) {
          v111 += sub_18129BD74((char *)(v50 + v111), &v146);
        }
        if (v107 > *v135) {
          _DWORD *v135 = v107;
        }
        v112 = 32 * (v130 - 12);
        if (v105 == 13) {
          v112 = 32 * v130 - 384;
        }
        BOOL v113 = ((v130 - 12) << 6) / 255 - 23;
        if (v105 == 13) {
          BOOL v113 = v130 - 35;
        }
        v114 = v112 / 255 - 23;
        uint64_t v115 = (int)(v107 - v114) % v131 + v114;
        if (v115 <= v113) {
          uint64_t v116 = v115;
        }
        else {
          uint64_t v116 = v114;
        }
        uint64_t v46 = v133;
        if ((v116 & 0x80000000) != 0) {
          break;
        }
        *(_DWORD *)(v104 + 32 * v101) = v116;
        v117 = v107 - v116;
        if (v107 > v116)
        {
          uint64_t v46 = v133;
          if ((v107 & 0x80000000) != 0) {
            break;
          }
          uint64_t v118 = v116 + v111;
          uint64_t v119 = (v130 - 5 + v117) / v131;
          uint64_t v120 = v104 + 32 * v101;
          *(_DWORD *)(v120 + 24) = v117 - (v119 - 1) * v131;
          *(_DWORD *)(v120 + 8) = v119;
          if (sqlite3_initialize())
          {
            *(void *)(v120 + 16) = 0LL;
            return 7LL;
          }

          uint64_t v121 = (_DWORD *)sub_18126F0AC(4LL * (int)v119);
          *(void *)(v120 + 16) = v121;
          int v122 = (void *)(v120 + 16);
          if (!v121) {
            return 7LL;
          }
          *uint64_t v121 = bswap32(*(_DWORD *)(v50 + v118));
          if ((int)v119 >= 2)
          {
            uint64_t v123 = 0LL;
            uint64_t v124 = v119 - 1;
            do
            {
              BOOL v146 = 0LL;
              int v125 = (*(uint64_t (**)(void))(**(void **)(v2 + 8) + 288LL))();
              if ((_DWORD)v125) {
                return v125;
              }
              int v126 = v146;
              *(_DWORD *)(*v122 + 4 * v123 + 4) = bswap32(**(_DWORD **)(v146 + 8));
              if ((*(_BYTE *)(v126 + 52) & 0x20) != 0)
              {
                uint64_t v127 = *(void *)(v126 + 40);
                --*(_DWORD *)(v127 + 152);
                *(void *)(v126 + 32) = *(void *)(v127 + 168);
                *(void *)(v127 + 168) = v126;
                (*(void (**)(void, void))(**(void **)(v127 + 72) + 144LL))( *(void *)(v127 + 72),  *(void *)(v127 + 200) * (*(_DWORD *)(v126 + 48) - 1));
              }

              else
              {
                sub_1812F9F44(v126);
              }
            }

            while (v124 != ++v123);
          }
        }
      }

      ++v101;
      uint64_t v46 = v133;
      if (v101 >= *v140) {
        goto LABEL_78;
      }
    }

  sub_181359E08(v1 + 48);
  *(_DWORD *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_13;
  }

  return 0LL;
}

  uint64_t v10 = (unsigned int *)(a1 + 48);
  sub_181359E08(a1 + 48);
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v11 = (void *)(a1 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0LL;
  if (!a2) {
    return 0LL;
  }
  int v12 = *a5;
  if (!*a5) {
    return 0LL;
  }
  BOOL v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0) {
      return 0LL;
    }
    int v14 = (const void *)sub_181303998((int *)v12, 1);
    if (!v14) {
      return 0LL;
    }
  }

  else
  {
    int v14 = *(const void **)(v12 + 8);
    if (!v14) {
      return 0LL;
    }
  }

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_DWORD *)(a1 + 104) = 1;
  unsigned int v15 = *a5;
  if (!*a5)
  {
    sub_1812CF36C(91138);
    goto LABEL_27;
  }

  uint64_t v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 0x12) == 0
    || (*(_WORD *)(v15 + 20) & 0x1000) == 0
    || *(uint64_t (**)(uint64_t))(v15 + 48) != sub_181301F94)
  {
    if ((v16 & 2) != 0 && *(_BYTE *)(v15 + 22) == 1)
    {
      uint64_t v17 = *(_DWORD *)(v15 + 16);
      goto LABEL_28;
    }

    if ((v16 & 0x10) != 0)
    {
      uint64_t v17 = *(_DWORD *)(v15 + 16);
      if ((*(_WORD *)(v15 + 20) & 0x400) != 0) {
        v17 += *(_DWORD *)v15;
      }
      goto LABEL_28;
    }

    if ((v16 & 1) == 0)
    {
      uint64_t v17 = sub_181303970(v15, 1);
      goto LABEL_28;
    }

  uint64_t result = sub_181359E08(a1 + 48);
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  return result;
}

    else {
      BOOL v13 = 0LL;
    }
LABEL_23:
    int v14 = 0LL;
    *(void *)(a1 + 8) = v13;
    if (!*(void *)(a1 + 8)) {
      goto LABEL_17;
    }
LABEL_24:
    sub_1813B7F80((uint64_t *)a1);
    return v14;
  }

  uint64_t v11 = *((unsigned __int16 *)v10 + 10);
  if (((0x4000000040004uLL >> v11) & 1) == 0) {
    goto LABEL_8;
  }
  if ((~v11 & 0x202) == 0 && *((_BYTE *)v10 + 22) == 1)
  {
    int v12 = (unsigned __int8 *)*((void *)v10 + 1);
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }

  if ((v11 & 1) == 0)
  {
    int v12 = (unsigned __int8 *)sub_181303998(*a5, 1);
    if (v12)
    {
LABEL_14:
      int v14 = sub_18126DFE0(*(void *)(v8 + 24), v12, 0xFFFFFFFFLL, 128LL, 0LL, (void *)(a1 + 8), 0LL, v9);
      *(_DWORD *)(a1 + 24) = 1;
      if (!*(void *)(a1 + 8)) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
  }

  *(void *)(a1 + 40) = 0LL;
  uint64_t v4 = *(_WORD *)(a1 + 92);
  if ((v4 & 0x9000) != 0 || *(_DWORD *)(a1 + 104))
  {
    sub_181303838(a1 + 72);
    uint64_t v4 = *(_WORD *)(a1 + 92);
  }

  if ((v4 & 0x9000) == 0)
  {
    *(_WORD *)(a1 + 92) = 1;
    if (!*(_DWORD *)(a1 + 24)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  sub_181303888((int *)(a1 + 72));
  if (*(_DWORD *)(a1 + 24)) {
LABEL_13:
  }
    sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
LABEL_14:
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = 0LL;
}

  uint64_t v4 = *(void *)(v1 + 32);
  if (!v4) {
    goto LABEL_15;
  }
  char v5 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_14;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v4);
  --qword_18C468B10;
  off_18C4653A8(v4);
  uint64_t v4 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    char v5 = &xmmword_18C465410;
LABEL_14:
    (*v5)(v4);
  }

  v1[5] = 0u;
  v1[6] = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *int v1 = 0u;
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v4)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  int v1 = (_OWORD *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    return (*v4)(v1);
  }

  return result;
}

LABEL_149:
  size_t v20 = (void *)qword_18C550640;
  if (!qword_18C550640)
  {
LABEL_150:
    a4 = v49;
    if ((v50 & 1) != 0) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }

  while (1)
  {
    v95 = (void *)*v20;
    size_t v20 = (void *)v20[14];
    if (!v20) {
      goto LABEL_150;
    }
  }

  uint64_t v96 = *(unsigned int *)(v152 + 40);
  a4 = v49;
  if ((int)v96 < 1)
  {
LABEL_189:
    *(void *)(v17 + 8) = v20;
    ++*((_DWORD *)v20 + 26);
    if ((v50 & 1) != 0)
    {
LABEL_152:
      v94 = (void (**)(void *))&off_18C4653A8;
      if (dword_18C465380)
      {
        a3 = v152;
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v43);
        --qword_18C468B10;
        off_18C4653A8(v43);
        v43 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70)
        {
LABEL_172:
          LOBYTE(v14) = v155;
          a5 = v158;
          if (v20) {
            goto LABEL_173;
          }
LABEL_14:
          *(void *)&__int128 v166 = 0LL;
          uint64_t v19 = sub_18126F0AC(152LL);
          if (!v19)
          {
            uint64_t v29 = 7LL;
            goto LABEL_269;
          }

          size_t v20 = (void *)v19;
          uint64_t v151 = a3;
          *(void *)(v19 + 144) = 0LL;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          LODWORD(v164) = 4096;
          else {
            int v21 = *(_DWORD *)(a1 + 4);
          }
          *(void *)uint64_t v19 = 0LL;
          uint64_t v156 = v18;
          if ((a5 & 2) != 0)
          {
            if (__s1)
            {
              unsigned int v22 = *__s1;
              if (*__s1)
              {
                size_t v23 = strlen(__s1) + 1;
                unsigned int v24 = (char *)sub_18126F0AC(v23);
                if (!v24) {
                  goto LABEL_84;
                }
                int v25 = v24;
                char v154 = v14;
                v153 = a4;
                memcpy(v24, __s1, v23);
                v147 = 0LL;
                __src = 0LL;
                unsigned int v22 = strlen(v25) & 0x3FFFFFFF;
                int v26 = 1;
                char v149 = 1;
                char v145 = 1;
              }

              else
              {
                char v154 = v14;
                v153 = a4;
                __src = 0LL;
                char v149 = 0;
                int v25 = 0LL;
                char v145 = 1;
                v147 = __s1;
                int v26 = 1;
              }
            }

            else
            {
              char v154 = v14;
              v153 = a4;
              v147 = 0LL;
              __src = 0LL;
              int v25 = 0LL;
              unsigned int v22 = 0;
              char v149 = 1;
              char v145 = 1;
              int v26 = 1;
            }
          }

          else if (__s1)
          {
            unsigned int v22 = *__s1;
            if (*__s1)
            {
              uint64_t v30 = *(int *)(a1 + 8) + 1LL;
              uint64_t v31 = (char *)sub_18126F0AC(2 * v30);
              if (!v31) {
                goto LABEL_84;
              }
              int v25 = v31;
              char v159 = a5;
              char v154 = v14;
              v153 = a4;
              *uint64_t v31 = 0;
              unsigned int v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t, char *))(a1 + 64))(a1, __s1, v30, v31);
              if (v32 == 512) {
                uint64_t v29 = ((int)(v161 << 7) >> 31) & 0x60E;
              }
              else {
                uint64_t v29 = v32;
              }
              int v150 = strlen(v25);
              v33 = &__s1[strlen(__s1) & 0x3FFFFFFF];
              int v35 = v33[1];
              uint64_t v34 = v33 + 1;
              LODWORD(v36) = (_DWORD)v34;
              if (v35)
              {
                int v36 = v34;
                do
                {
                  unsigned int v37 = &v36[strlen(v36) + 1];
                  int v36 = &v37[strlen(v37) + 1];
                }

                while (*v36);
              }

              if (!(_DWORD)v29)
              {
                unsigned int v22 = v150 & 0x3FFFFFFF;
                if ((v150 & 0x3FFFFFFF) + 8 <= *(_DWORD *)(a1 + 8))
                {
                  __src = v34;
                  char v149 = 0;
                  char v145 = 0;
                  int v26 = (_DWORD)v36 - (_DWORD)v34 + 1;
                  v147 = __s1;
                  a5 = v159;
                  goto LABEL_73;
                }

                uint64_t v29 = sub_1812F2E28(68697);
              }

              uint64_t v38 = (void (**)(const char *))&off_18C4653A8;
              if (dword_18C465380)
              {
                a4 = v153;
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8 -= (int)off_18C4653B8(v25);
                --qword_18C468B10;
                off_18C4653A8(v25);
                int v25 = (const char *)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70)
                {
LABEL_85:
                  uint64_t v18 = v156;
                  uint64_t v62 = *v20;
                  if (!*v20) {
                    goto LABEL_263;
                  }
                  goto LABEL_262;
                }

                uint64_t v38 = (void (**)(const char *))&xmmword_18C465410;
              }

              else
              {
                a4 = v153;
              }

              (*v38)(v25);
              uint64_t v18 = v156;
              uint64_t v62 = *v20;
              if (*v20) {
                goto LABEL_262;
              }
              goto LABEL_263;
            }

            char v154 = v14;
            v153 = a4;
            __src = 0LL;
            char v149 = 0;
            char v145 = 0;
            int v25 = 0LL;
            int v26 = 1;
            v147 = __s1;
          }

          else
          {
            char v154 = v14;
            v153 = a4;
            v147 = 0LL;
            __src = 0LL;
            char v145 = 0;
            int v25 = 0LL;
            unsigned int v22 = 0;
            int v26 = 1;
            char v149 = 1;
          }

  uint64_t v101 = (int *)*((void *)v9 + 9);
  v102 = (int *)*((void *)v9 + 5);
  unint64_t v103 = *((_DWORD *)v9 + 1);
  v1161 = 0u;
  v1162 = 0u;
  v1163 = 0u;
  v1160 = v101;
  v1147 = v9 + 72;
  v104 = *((void *)v9 + 10);
  if (v104)
  {
LABEL_150:
    v1153 = (uint64_t)*a1;
    v105 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v1170 = *(_OWORD *)v8;
    *(_OWORD *)&v1170[16] = v105;
    v1171 = *((void *)v8 + 4);
    v106 = (uint64_t)a1[2];
    if (!v106)
    {
      if (!a1[21] && (*(_BYTE *)(v1153 + 96) & 8) == 0) {
        *((_BYTE *)a1 + 35) = 1;
      }
      v106 = sub_1812DC63C((uint64_t *)a1, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
    }

    v107 = v1170[0];
    if (v1170[0] == 12)
    {
      size_t v20 = *(unsigned int *)&v1170[4];
      int v21 = **((unsigned int **)v9 + 4);
      int v108 = *(_DWORD *)(v106 + 144);
      if (*(_DWORD *)(v106 + 148) <= v108)
      {
        sub_18131044C(v106, 118LL, *(unsigned int *)&v1170[4], v21, 0LL, v23, v24, v25);
      }

      else
      {
        *(_DWORD *)(v106 + 144) = v108 + 1;
        unsigned int v109 = *(void *)(v106 + 136) + 40LL * v108;
        *(_DWORD *)unsigned int v109 = 118;
        *(_DWORD *)(v109 + 4) = v20;
        *(_DWORD *)(v109 + 8) = v21;
        *(void *)(v109 + 12) = 0LL;
        *(void *)(v109 + 28) = 0LL;
        *(void *)(v109 + 20) = 0LL;
        *(_DWORD *)(v109 + 36) = 0;
      }

      v107 = 14;
      v1170[0] = 14;
    }

    v111 = *((_DWORD *)v9 + 1);
    if ((v111 & 0x400) != 0)
    {
      v112 = *((void *)v9 + 12);
      if (!*((void *)v9 + 14))
      {
        BOOL v113 = 1;
        v114 = (uint64_t)v9;
        while (1)
        {
          uint64_t v115 = *(void *)(v114 + 80);
          if (!v115) {
            break;
          }
          v113 += v112 == 0;
          v114 = *(void *)(v114 + 80);
          if (*(void *)(v115 + 112)) {
            goto LABEL_166;
          }
        }

        sub_18131CCF8((uint64_t *)a1, 0, "SCAN %d CONSTANT ROW%s", v21, v22, v23, v24, v25, v113);
        do
        {
          sub_18128BE18((uint64_t)a1, v114, 0xFFFFFFFFLL, 0LL, 0LL, v1170, 1LL, 1LL);
          if (v112) {
            break;
          }
          *(_WORD *)(v114 + 2) = v113;
          v114 = *(void *)(v114 + 88);
        }

        while (v114);
        BOOL v13 = 0LL;
        goto LABEL_646;
      }
    }

LABEL_73:
          uint64_t v51 = (v21 + 7) & 0x7FFFFFF8;
          char v160 = a5;
          BOOL v146 = (a5 & 2) == 0;
          size_t v52 = v22;
          size_t v53 = v26;
          unint64_t v54 = 3LL * v22 + (2 * v51 + 470) + ((*(int *)(a1 + 4) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + v26;
          uint64_t v55 = (void *)sub_18126F0AC(v54);
          if (v55)
          {
            uint64_t v56 = (uint64_t)v55;
            bzero(v55, v54);
            *(void *)(v56 + 336) = v56 + 360;
            *(void *)(v56 + 72) = v56 + 440;
            unint64_t v57 = v56 + 440 + ((*(int *)(a1 + 4) + 7LL) & 0xFFFFFFFFFFFFFFF8LL);
            *(void *)(v56 + 80) = v57 + v51;
            *(void *)(v56 + 88) = v57;
            uint64_t v58 = (uint64_t *)(v57 + v51 + v51);
            *uint64_t v58 = v56;
            v59 = (char *)v58 + 12;
            *(void *)(v56 + 216) = v59;
            if ((_DWORD)v52)
            {
              memcpy(v59, v25, v52);
              uint64_t v60 = &v59[(v52 + 1)];
              if (__src) {
                memcpy(v60, __src, v53);
              }
              else {
                size_t v53 = 1LL;
              }
              *(void *)(v56 + 224) = &v60[v53];
              memcpy(&v60[v53], v25, v52);
              uint64_t v64 = &v60[v53 + v52];
              *(void *)uint64_t v64 = 0x6C616E72756F6A2DLL;
              v64 += 9;
              *(void *)(v56 + 352) = v64;
              memcpy(v64, v25, v52);
              *(_DWORD *)&v64[v52] = 1818326829;
              char v63 = v149;
              if (v25)
              {
                v65 = (void (**)(const char *))&off_18C4653A8;
                if (!dword_18C465380)
                {
LABEL_95:
                  (*v65)(v25);
                  goto LABEL_96;
                }

                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8 -= (int)off_18C4653B8(v25);
                --qword_18C468B10;
                off_18C4653A8(v25);
                int v25 = (const char *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  v65 = (void (**)(const char *))&xmmword_18C465410;
                  goto LABEL_95;
                }
              }
            }

            else
            {
              *(void *)(v56 + 224) = 0LL;
              *(void *)(v56 + 352) = 0LL;
              char v63 = v149;
            }

          size_t v53 = 0LL;
          uint64_t v31 = 0;
          LODWORD(v33) = 0;
          goto LABEL_75;
        }
      }
    }

  uint64_t result = 0LL;
  *a4 = v22;
  return result;
}

      LOBYTE(v15) = *(_BYTE *)(v6 + 18) + 1;
      *(_BYTE *)(v6 + 18) = v15;
      if (v14 > v15)
      {
        int v2 = v52;
        v17 += *(unsigned __int8 *)(v52 + 39);
        continue;
      }

      unsigned int v15 = v15;
      int v2 = v52;
LABEL_89:
      uint64_t v3 = v50;
      goto LABEL_90;
    }

    break;
  }

  size_t v20 = -1.0;
  LOBYTE(v19) = 2;
LABEL_77:
  uint64_t v40 = v15 + 1;
  *(_BYTE *)(v6 + 18) = v15 + 1;
  uint64_t v41 = *(_BYTE *)(v6 + 16);
  unsigned int v42 = v41 - 1;
  if (v41 == 1)
  {
    v43 = *(void *)(v6 + 8);
    if (v14 > v40) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }

  int v44 = *(unsigned int *)(a1 + 36);
  if ((int)v44 < 1)
  {
LABEL_82:
    LOBYTE(v15) = 0;
    if (v14 > v40)
    {
LABEL_84:
      if (v20 >= 0.0) {
        uint64_t v47 = v20;
      }
      else {
        uint64_t v47 = 0.0;
      }
      uint64_t v48 = sub_1813B0468(a1, v42, v47);
      if (!v48) {
        return 7LL;
      }
      *(_BYTE *)(v48 + 17) = v19;
      *(_BYTE *)(v48 + 18) = v15;
      unsigned int v15 = v15;
      *(void *)(v48 + 8) = v43;
      goto LABEL_89;
    }

    sub_181359E08(a1 + 48);
    *(_DWORD *)(a1 + 8) = 0;
    *uint64_t v11 = 0LL;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_74;
  }

  if (*(_BYTE *)(a1 + 25))
  {
    int v26 = *v10;
    if (sqlite3_initialize())
    {
      *(void *)(a1 + 80) = 0LL;
      goto LABEL_46;
    }

    uint64_t v34 = sub_18126F0AC(4 * v26);
    *(void *)(a1 + 80) = v34;
    if (!v34)
    {
LABEL_46:
      *(_BYTE *)(a1 + 99) = 1;
      char v27 = *(void *)(a1 + 40);
      if (v27)
      {
        int v28 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v27);
          --qword_18C468B10;
          off_18C4653A8(v27);
          char v27 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_53;
          }
          int v28 = &xmmword_18C465410;
        }

        (*v28)(v27);
      }

LABEL_96:
            *(void *)uint64_t v56 = a1;
            *(_DWORD *)(v56 + 180) = v161;
            if ((v63 & 1) != 0 || !*v147)
            {
              int v68 = 0;
              goto LABEL_101;
            }

            unsigned int v163 = 0;
            uint64_t v66 = (*(uint64_t (**)(uint64_t, void, void, void, unsigned int *))(a1 + 40))( a1,  *(void *)(v56 + 216),  *(void *)(v56 + 72),  v161 & 0x1787F7F,  &v163);
            unsigned int v67 = v163;
            *(_DWORD *)(v56 + 180) |= v163 & 0x700000;
            int v68 = (v67 >> 7) & 1;
            *(_BYTE *)(v56 + 20) = (v67 & 0x80) != 0;
            if ((_DWORD)v66)
            {
              uint64_t v29 = v66;
LABEL_103:
              uint64_t v72 = *(void *)(v56 + 72);
              if (*(void *)v72)
              {
                (*(void (**)(void))(*(void *)v72 + 8LL))(*(void *)(v56 + 72));
                *(void *)uint64_t v72 = 0LL;
              }

              sub_1812FC960(*(void *)(v56 + 328));
              v73 = (void (**)(uint64_t))&off_18C4653A8;
              uint64_t v18 = v156;
              a4 = v153;
              if (!dword_18C465380)
              {
LABEL_110:
                (*v73)(v56);
                uint64_t v62 = *v20;
                if (!*v20) {
                  goto LABEL_263;
                }
LABEL_262:
                sub_1812B5A48(v62, 0LL);
                goto LABEL_263;
              }

              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8 -= (int)off_18C4653B8(v56);
              --qword_18C468B10;
              off_18C4653A8(v56);
              uint64_t v56 = xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                v73 = (void (**)(uint64_t))&xmmword_18C465410;
                goto LABEL_110;
              }

          if (sub_181268E88(*(void *)(v10 + 96) + 8LL, *(unsigned __int8 **)v10, v10))
          {
            if (!*(_BYTE *)(v53 + 103) && !*(_BYTE *)(v53 + 104))
            {
              *(_BYTE *)(v53 + 103) = 1;
              ++*(_DWORD *)(v53 + 432);
              *(_WORD *)(v53 + 436) = 0;
              char v83 = *(void *)(v53 + 344);
              if (v83)
              {
                sub_1812DC47C(v83, "out of memory", v77, v78, v79, v80, v81, v82, v186);
                for (uint64_t j = *(void *)(v53 + 344); ; ++*(_DWORD *)(j + 48))
                {
                  *(_DWORD *)(j + 24) = 7;
                  uint64_t j = *(void *)(j + 256);
                  if (!j) {
                    break;
                  }
                }
              }
            }

            return;
          }

          *(void *)(a1 + 344) = 0LL;
          *(_DWORD *)(v53 + 44) |= 1u;
          goto LABEL_148;
        }
      }
    }
  }

  v73 = v34 ^ 1;
  if (!v35) {
    v73 = 1;
  }
  unsigned int v9 = a8;
  if ((v73 & 1) == 0)
  {
    uint64_t v74 = *(_DWORD *)(a9 + 8);
    v75 = *(void *)a9;
    if ((v74 & 0xF) == 0)
    {
      uint64_t v76 = v35;
      uint64_t v77 = a1;
      if (sqlite3_initialize() || (uint64_t v78 = sub_18127D33C(v75, 8LL * (v74 + 16))) == 0)
      {
        sub_18136257C(v76);
        int v21 = 0LL;
LABEL_80:
        uint64_t v30 = 7LL;
        goto LABEL_81;
      }

      v75 = v78;
      *(void *)a9 = v78;
      uint64_t v74 = *(_DWORD *)(a9 + 8);
      a1 = v77;
      int v35 = v76;
    }

    uint64_t v30 = 0LL;
    *(_DWORD *)(a9 + 8) = v74 + 1;
    *(void *)(v75 + 8LL * v74) = v35;
  }

LABEL_261:
              uint64_t v62 = *v20;
              if (!*v20) {
                goto LABEL_263;
              }
              goto LABEL_262;
            }

            int v71 = v67 & 1;
            uint64_t v86 = **(void **)(v56 + 72);
            if (v86) {
              __int16 v87 = (*(uint64_t (**)(void))(v86 + 96))();
            }
            else {
              __int16 v87 = 0;
            }
            if (v71)
            {
LABEL_206:
              v111 = *(const char **)(v56 + 216);
              v112 = (char *)sqlite3_uri_parameter(v111, "nolock");
              if (v112) {
                BOOL v113 = sub_181345AA0(v112, 1, 0) != 0;
              }
              else {
                BOOL v113 = 0;
              }
              *(_BYTE *)(v56 + 17) = v113;
              if ((v87 & 0x2000) == 0)
              {
                v114 = (char *)sqlite3_uri_parameter(v111, "immutable");
                if (!v114 || !sub_181345AA0(v114, 1, 0))
                {
                  char v70 = 0;
                  int v69 = 1;
LABEL_102:
                  uint64_t v29 = sub_18126C43C(v56, &v164, -1);
                  if ((_DWORD)v29) {
                    goto LABEL_103;
                  }
                  int v162 = v68;
                  uint64_t v74 = v164;
                  v75 = sub_1812FADB0;
                  if ((v160 & 2) != 0) {
                    v75 = 0LL;
                  }
                  uint64_t v76 = *(void *)(v56 + 336);
                  *(_OWORD *)(v76 + 48) = 0u;
                  *(_OWORD *)(v76 + 64) = 0u;
                  *(_OWORD *)(v76 + 16) = 0u;
                  *(_OWORD *)(v76 + 32) = 0u;
                  *(_OWORD *)uint64_t v76 = 0u;
                  *(_BYTE *)(v76 + 48) = v146;
                  *(_BYTE *)(v76 + 49) = 2;
                  *(void *)(v76 + 56) = v75;
                  *(void *)(v76 + 64) = v56;
                  *(_OWORD *)(v76 + 32) = xmmword_1813CDCA0;
                  uint64_t v77 = xmmword_18C465448(v74, 216LL, v146);
                  if (!v77)
                  {
                    uint64_t v29 = 7LL;
                    goto LABEL_103;
                  }

                  uint64_t v78 = v77;
                  uint64_t v79 = *(unsigned int *)(v76 + 32);
                  if ((v79 & 0x80000000) != 0)
                  {
                    uint64_t v80 = *(int *)(v76 + 44);
                    else {
                      uint64_t v79 = -1024LL * (int)v79 / (v80 + *(int *)(v76 + 40));
                    }
                  }

                  ((void (*)(uint64_t, uint64_t))*(&xmmword_18C465448 + 1))(v77, v79);
                  uint64_t v81 = *(void *)(v76 + 72);
                  if (v81) {
                    ((void (*)(uint64_t))*(&xmmword_18C465478 + 1))(v81);
                  }
                  *(void *)(v76 + 72) = v78;
                  *(_DWORD *)(v76 + 40) = v74;
                  *(_BYTE *)(v56 + 10) = (v160 & 1) == 0;
                  *(_DWORD *)(v56 + 188) = 0x3FFFFFFF;
                  *(_BYTE *)(v56 + 16) = v70;
                  *(_BYTE *)(v56 + 8) = v70;
                  *(_BYTE *)(v56 + 23) = v70;
                  *(_BYTE *)(v56 + 19) = v145;
                  *(_BYTE *)(v56 + 18) = v71;
                  if ((v69 & 1) != 0)
                  {
                    char v82 = 0;
                    char v83 = 10;
                    char v84 = 2;
                    char v85 = 1;
                  }

                  else
                  {
                    char v85 = 0;
                    char v84 = 0;
                    char v83 = 0;
                    char v82 = 1;
                  }

                  uint64_t v18 = v156;
                  a3 = v151;
                  a4 = v153;
                  *(_BYTE *)(v56 + 11) = v82;
                  *(_BYTE *)(v56 + 12) = v85;
                  *(_BYTE *)(v56 + 13) = 0;
                  *(_BYTE *)(v56 + 14) = v84;
                  *(_BYTE *)(v56 + 15) = v83;
                  *(_BYTE *)(v56 + 25) &= ~1u;
                  *(_WORD *)(v56 + 176) = 136;
                  *(void *)(v56 + 208) = 0x8000LL;
                  if (!v69
                    || ((*(uint64_t (**)(void))(**(void **)(v56 + 72) + 96LL))(*(void *)(v56 + 72)) & 0x1000) != 0)
                  {
                    int v90 = 512;
                  }

                  else
                  {
                    v88 = *(uint64_t (**)(void))(**(void **)(v56 + 72) + 88LL);
                    if (v88)
                    {
                      int v89 = v88();
                      if (v89 >= 0x10000) {
                        int v90 = 0x10000;
                      }
                      else {
                        int v90 = v89;
                      }
                      if (v89 < 32) {
                        int v90 = 512;
                      }
                    }

                    else
                    {
                      int v90 = 4096;
                    }
                  }

                  *(_DWORD *)(v56 + 184) = v90;
                  if ((v160 & 1) != 0)
                  {
                    char v91 = 2;
                  }

                  else
                  {
                    if (!(v160 & 2 | v162)) {
                      goto LABEL_145;
                    }
                    char v91 = 4;
                  }

                  *(_BYTE *)(v56 + 9) = v91;
LABEL_145:
                  *(void *)(v56 + 280) = sub_1812C93EC;
                  int v92 = *(_DWORD *)(v56 + 48);
                  if (v92)
                  {
                    v93 = sub_1812FCAFC;
                  }

                  else if (*(_BYTE *)(v56 + 27) && !*(void *)(v56 + 296))
                  {
                    v93 = sub_1812FCB08;
                  }

                  else
                  {
                    v93 = sub_1812FCD58;
                  }

                  *(void *)(v56 + 288) = v93;
                  *size_t v20 = v56;
                  uint64_t v115 = *(void *)(v151 + 64);
                  *(void *)(v56 + 160) = v115;
                  uint64_t v116 = **(void **)(v56 + 72);
                  if (v116 && *(int *)v116 >= 3)
                  {
                    uint64_t v164 = v115;
                    *(_BYTE *)(v56 + 27) = v115 > 0;
                    if (v92)
                    {
                      v117 = sub_1812FCAFC;
                    }

                    else if (v115 < 1 || *(void *)(v56 + 296))
                    {
                      v117 = sub_1812FCD58;
                    }

                    else
                    {
                      v117 = sub_1812FCB08;
                    }

                    *(void *)(v56 + 288) = v117;
                    (*(void (**)(void))(v116 + 80))();
                    uint64_t v56 = *v20;
                  }

                  int v171 = 0;
                  __int128 v169 = 0u;
                  __int128 v170 = 0u;
                  __int128 v167 = 0u;
                  __int128 v168 = 0u;
                  __int128 v165 = 0u;
                  __int128 v166 = 0u;
                  uint64_t v127 = *(void *)(v56 + 72);
                  if (*(void *)v127)
                  {
                    uint64_t v128 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, void))(*(void *)v127 + 16LL))( v127,  &v165,  100LL,  0LL);
                    if ((_DWORD)v128 != 522)
                    {
                      uint64_t v29 = v128;
                      if ((_DWORD)v128) {
                        goto LABEL_261;
                      }
                    }
                  }

                  *((_BYTE *)v20 + 32) = v160;
                  v20[1] = v151;
                  uint64_t v129 = *v20;
                  uint64_t v130 = *v20;
                  *(void *)(v130 + 232) = sub_1812FA40C;
                  uint64_t v131 = v130 + 232;
                  *(void *)(v129 + 240) = v20;
                  uint64_t v132 = *(void *)(v129 + 72);
                  if (*(void *)v132)
                  {
                    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v132 + 80LL))( *(void *)(v129 + 72),  15LL,  v131);
                    uint64_t v129 = *v20;
                  }

                  *(void *)(v17 + 8) = v20;
                  v20[2] = 0LL;
                  v20[3] = 0LL;
                  __int16 v133 = *(_BYTE *)(v129 + 18) != 0;
                  int v134 = (v166 << 8) | (BYTE1(v166) << 16);
                  *((_DWORD *)v20 + 13) = v134;
                  v135 = (_DWORD *)v20 + 13;
                  __int16 v136 = *((_WORD *)v20 + 20) | v133;
                  *((_WORD *)v20 + 20) = v136 | 8;
                  if ((v134 - 65537) < 0xFFFF01FF || ((v134 - 1) & v134) != 0)
                  {
                    int v137 = 0;
                    _DWORD *v135 = 0;
                    if (__s1) {
                      char v138 = v154;
                    }
                    else {
                      char v138 = 1;
                    }
                    if ((v138 & 1) != 0) {
                      goto LABEL_260;
                    }
                    BOOL v139 = 0;
                    int v137 = 0;
                    *((_BYTE *)v20 + 33) = 0;
                  }

                  else
                  {
                    int v137 = BYTE4(v166);
                    *((_WORD *)v20 + 20) = v136 | 0xA;
                    *((_BYTE *)v20 + 33) = bswap32(DWORD1(v168)) != 0;
                    BOOL v139 = bswap32(v169) != 0;
                  }

                  *((_BYTE *)v20 + 34) = v139;
LABEL_260:
                  uint64_t v29 = sub_18126C43C(v129, v135, v137);
                  if ((_DWORD)v29) {
                    goto LABEL_261;
                  }
                  *((_DWORD *)v20 + 14) = *((_DWORD *)v20 + 13) - v137;
                  *((_DWORD *)v20 + 26) = 1;
                  if (!*(_BYTE *)(v17 + 17))
                  {
LABEL_173:
                    if (*(_BYTE *)(v17 + 17))
                    {
                      uint64_t v99 = *(unsigned int *)(a3 + 40);
                      if ((int)v99 >= 1)
                      {
                        v100 = (uint64_t *)(*(void *)(a3 + 32) + 8LL);
                        while (1)
                        {
                          uint64_t v101 = *v100;
                          if (*v100)
                          {
                            if (*(_BYTE *)(v101 + 17)) {
                              break;
                            }
                          }

                          v100 += 4;
                          if (!--v99) {
                            goto LABEL_226;
                          }
                        }

                        do
                        {
                          v102 = (void *)v101;
                          uint64_t v101 = *(void *)(v101 + 40);
                        }

                        while (v101);
                        unint64_t v103 = *(void *)(v17 + 8);
                        if (v103 >= v102[1])
                        {
                          while (1)
                          {
                            v104 = v102;
                            v102 = (void *)v102[4];
                            if (!v102) {
                              break;
                            }
                            if (v102[1] >= v103)
                            {
                              v105 = v104 + 4;
                              *(void *)(v17 + 32) = v102;
                              *(void *)(v17 + 40) = v104;
                              v104 = (void *)v17;
                              goto LABEL_225;
                            }
                          }

                          v105 = v104 + 4;
                          *(void *)(v17 + 32) = 0LL;
                        }

                        else
                        {
                          v104 = 0LL;
                          v105 = v102 + 5;
                          *(void *)(v17 + 32) = v102;
                        }

                        v102 = (void *)v17;
LABEL_225:
                        v102[5] = v104;
                        uint64_t *v105 = v17;
                      }

          char v91 = 116;
          goto LABEL_282;
        }
      }

      char v91 = 110;
      goto LABEL_282;
    }

LABEL_226:
                      *a4 = v17;
                      uint64_t v118 = *(void *)(v17 + 8);
                      ++*(_DWORD *)(v17 + 20);
                      if (*(_BYTE *)(v17 + 18))
                      {
                        uint64_t v120 = *(void *)(v118 + 72);
                        v106 = (uint64_t *)(v118 + 72);
                        uint64_t v119 = v120;
                      }

                      else
                      {
                        sub_1812FDE20(v17);
                        uint64_t v121 = *(void *)(v118 + 72);
                        v106 = (uint64_t *)(v118 + 72);
                        uint64_t v119 = v121;
                        if (!*(_BYTE *)(v17 + 17)) {
                          goto LABEL_232;
                        }
                      }

                      int v122 = *(_DWORD *)(v17 + 20) - 1;
                      *(_DWORD *)(v17 + 20) = v122;
                      if (v122)
                      {
LABEL_232:
                        if (v119) {
                          goto LABEL_233;
                        }
                        LODWORD(v164) = 128;
                        sub_1812FA554(v17, &v164);
                        uint64_t v124 = *(void *)(v17 + 8);
                        if (!*(_BYTE *)(v17 + 17))
                        {
                          *(_DWORD *)(*(void *)(*(void *)v124 + 336LL) + 36LL) = 2500;
                          goto LABEL_233;
                        }

                        ++*(_DWORD *)(v17 + 20);
                        if (*(_BYTE *)(v17 + 18))
                        {
                          *(_DWORD *)(*(void *)(*(void *)v124 + 336LL) + 36LL) = 2500;
                        }

                        else
                        {
                          sub_1812FDE20(v17);
                          int v125 = *(unsigned __int8 *)(v17 + 17);
                          *(_DWORD *)(*(void *)(*(void *)v124 + 336LL) + 36LL) = 2500;
                          if (!v125) {
                            goto LABEL_233;
                          }
                        }

                        int v126 = *(_DWORD *)(v17 + 20) - 1;
                        *(_DWORD *)(v17 + 20) = v126;
                        if (!v126) {
                          sub_1812FDEFC(v17);
                        }
LABEL_233:
                        uint64_t v123 = *(void *)(*v20 + 72LL);
                        if (*(void *)v123) {
                          (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v123 + 80LL))( v123,  30LL,  v20 + 1);
                        }
                        uint64_t v29 = 0LL;
                        if (!v18) {
                          return v29;
                        }
LABEL_276:
                        xmmword_18C465410(v18);
                        return v29;
                      }

                      sub_1812FDEFC(v17);
                    }

                    else
                    {
                      *a4 = v17;
                      v106 = (uint64_t *)(*(void *)(v17 + 8) + 72LL);
                    }

                    uint64_t v119 = *v106;
                    goto LABEL_232;
                  }

                  if (!(_BYTE)word_18C465384)
                  {
LABEL_284:
                    v20[14] = qword_18C550640;
                    qword_18C550640 = (uint64_t)v20;
                    goto LABEL_173;
                  }

                  uint64_t v143 = qword_18C4653F0(2LL);
                  if (!(_BYTE)word_18C465384 || (uint64_t v144 = qword_18C4653F0(0LL), (v20[11] = v144) != 0LL))
                  {
                    if (v143)
                    {
                      xmmword_18C465400(v143);
                      v20[14] = qword_18C550640;
                      qword_18C550640 = (uint64_t)v20;
                      xmmword_18C465410(v143);
                      goto LABEL_173;
                    }

                    goto LABEL_284;
                  }

                  uint64_t v29 = 7LL;
                  uint64_t v62 = *v20;
                  if (*v20) {
                    goto LABEL_262;
                  }
LABEL_263:
                  v140 = &off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8 -= (int)off_18C4653B8(v20);
                    --qword_18C468B10;
                    off_18C4653A8(v20);
                    size_t v20 = (void *)xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70)
                    {
LABEL_269:
                      v141 = (void (**)(uint64_t))&off_18C4653A8;
                      if (dword_18C465380)
                      {
                        if ((void)xmmword_18C468B70) {
                          xmmword_18C465400(xmmword_18C468B70);
                        }
                        qword_18C468AC8 -= (int)off_18C4653B8(v17);
                        --qword_18C468B10;
                        off_18C4653A8(v17);
                        uint64_t v17 = xmmword_18C468B70;
                        if (!(void)xmmword_18C468B70)
                        {
LABEL_275:
                          *a4 = 0LL;
                          if (!v18) {
                            return v29;
                          }
                          goto LABEL_276;
                        }

                        v141 = (void (**)(uint64_t))&xmmword_18C465410;
                      }

                      (*v141)(v17);
                      goto LABEL_275;
                    }

                    v140 = &xmmword_18C465410;
                  }

                  (*v140)(v20);
                  goto LABEL_269;
                }
              }

              LOBYTE(v161) = 1;
LABEL_101:
              int v69 = 0;
              *(_WORD *)(v56 + 21) = 1025;
              char v70 = 1;
              *(_BYTE *)(v56 + 17) = 1;
              LOBYTE(v71) = v161 & 1;
              goto LABEL_102;
            }

            if (!*(_BYTE *)(v56 + 16)
              && ((*(uint64_t (**)(void))(**(void **)(v56 + 72) + 96LL))(*(void *)(v56 + 72)) & 0x1000) == 0)
            {
              v107 = *(uint64_t (**)(void))(**(void **)(v56 + 72) + 88LL);
              if (!v107)
              {
                int v110 = 4096;
                goto LABEL_205;
              }

              int v108 = v107();
              if (v108 >= 0x10000) {
                unsigned int v109 = 0x10000;
              }
              else {
                unsigned int v109 = v108;
              }
              if (v108 > 31)
              {
                *(_DWORD *)(v56 + 184) = v109;
                if (v109 > 0x1000)
                {
                  if (v109 > 0x2000) {
                    unsigned int v109 = 0x2000;
                  }
                  LODWORD(v164) = v109;
                }

                goto LABEL_206;
              }
            }

            int v110 = 512;
LABEL_205:
            *(_DWORD *)(v56 + 184) = v110;
            goto LABEL_206;
          }

          a4 = v153;
          if (!v25) {
            goto LABEL_84;
          }
          v61 = (void (**)(const char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v25);
            --qword_18C468B10;
            off_18C4653A8(v25);
            int v25 = (const char *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_84;
            }
            v61 = (void (**)(const char *))&xmmword_18C465410;
          }

          (*v61)(v25);
LABEL_84:
          uint64_t v29 = 7LL;
          goto LABEL_85;
        }

        v94 = (void (**)(void *))&xmmword_18C465410;
      }

      else
      {
        a3 = v152;
      }

      (*v94)(v43);
      goto LABEL_172;
    }

        v203 = (int)v457[v198];
        v204 = v203 - 1;
        v205 = *(unsigned __int16 *)(v432 + 2 * (v203 - 1));
        if (!*(_WORD *)(v432 + 2 * (v203 - 1)))
        {
          v206 = v199;
          v205 = sub_18130ACEC((uint64_t)&v440, (int)v203 - 1);
          v199 = v206;
        }

        v207 = v205 + 2;
        v202 = v205 + 2;
        if (!(_DWORD)v437)
        {
          if ((int)v203 >= v420)
          {
            v202 = 0;
          }

          else
          {
            v208 = *(unsigned __int16 *)(v432 + 2 * v203);
            if (!*(_WORD *)(v432 + 2 * v203))
            {
              v209 = v203;
              v210 = v199;
              v208 = sub_18130ACEC((uint64_t)&v440, v209);
              v199 = v210;
            }

            v202 = v208 + 2;
          }
        }

        v200 -= v207;
        *(_DWORD *)&v455[2 * v201] += v202;
        v457[v198] = v204;
        if (v200 > v410) {
          continue;
        }
        break;
      }

      uint64_t v3 = v430;
LABEL_235:
      *(_DWORD *)&v455[2 * v198] = v200;
      if (v204 >= v420)
      {
LABEL_247:
        v199 = v201;
      }

      else
      {
        v211 = v204;
        v212 = (_WORD *)(v397 + 2LL * v204);
        v213 = v199;
        while (1)
        {
          v215 = (unsigned __int16)*(v212 - 1);
          if (!*(v212 - 1))
          {
            v215 = sub_18130ACEC((uint64_t)&v440, v211);
            v199 = v213;
          }

          v214 = v215 + 2;
          v200 += v215 + 2;
          if (v200 > v410) {
            break;
          }
          v216 = 4 * v198;
          *(_DWORD *)&v455[v216 / 2] = v200;
          v217 = v211 + 1;
          v457[v216 / 4] = v211 + 1;
          if (!(_DWORD)v437)
          {
            if (v217 >= v415)
            {
              v214 = 0;
            }

            else
            {
              v218 = (unsigned __int16)*v212;
              if (!*v212)
              {
                v218 = sub_18130ACEC((uint64_t)&v440, (int)v211 + 1);
                v199 = v213;
              }

              v214 = v218 + 2;
            }
          }

          *(_DWORD *)&v455[2 * v201] -= v214;
          ++v212;
          ++v211;
          v251 = v415 == v217;
          uint64_t v3 = v430;
          if (v251) {
            goto LABEL_247;
          }
        }

        if (v198) {
          v219 = v457[(v198 - 1)];
        }
        else {
          v219 = 0;
        }
        if (v219 >= (int)v211)
        {
          uint64_t v11 = sub_1812FBF50(85291);
          uint64_t v48 = 0;
          int v1 = v408;
          goto LABEL_87;
        }
      }

      v198 = v201;
      break;
    }

    v220 = v432 - 2 * v437;
    v221 = v432 - 2;
    v416 = (v199 - 1);
    v222 = v416;
    v223 = v426;
    v224 = v199;
LABEL_256:
    if ((int)v222 >= 1)
    {
      v226 = *(_DWORD *)&v455[2 * v222];
      v227 = v222 - 1;
      v228 = 4 * (v222 - 1);
      v229 = *(_DWORD *)&v455[v228 / 2];
      v230 = (int)v457[v228 / 4];
      if (!*(_WORD *)(v432 + 2LL * ((int)v230 - (int)v437)))
      {
        sub_18130ACEC((uint64_t)&v440, v230 - v437);
        v220 = v432 - 2 * v437;
        LODWORD(v199) = v224;
      }

      v421 = v222;
      if (v222 == v416) {
        v231 = 0;
      }
      else {
        v231 = -2;
      }
      while (1)
      {
        v233 = v230 - 1;
        v234 = *(unsigned __int16 *)(v221 + 2 * v230);
        if (*(_WORD *)(v221 + 2 * v230))
        {
          v235 = *(unsigned __int16 *)(v220 + 2 * v230);
          if (!v226) {
            goto LABEL_262;
          }
        }

        else
        {
          v234 = sub_18130ACEC((uint64_t)&v440, (int)v230 - 1);
          v220 = v432 - 2 * v437;
          LODWORD(v199) = v224;
          v235 = *(unsigned __int16 *)(v220 + 2 * v230);
          if (!v226)
          {
LABEL_262:
            v232 = v235 + 2;
            goto LABEL_263;
          }
        }

        if (v411 || (v232 = v226 + v235 + 2, v232 > v229 + v231 - v234))
        {
          v232 = v226;
LABEL_271:
          v223 = v426;
          *(_DWORD *)&v455[2 * v421] = v232;
          *(_DWORD *)&v455[2 * v227] = v229;
          else {
            v225 = 0;
          }
          v222 = v227;
          if ((int)v230 <= v225)
          {
            uint64_t v11 = sub_1812FBF50(85335);
            uint64_t v48 = 0;
            int v1 = v408;
            uint64_t v3 = v430;
            goto LABEL_87;
          }

          goto LABEL_256;
        }

        (*v118)();
        goto LABEL_123;
      }

      v105 = v104;
      v106 = v45;
      uint64_t v128 = v104;
      v107 = SHIDWORD(v142);
      if (sqlite3_initialize()) {
        break;
      }
      int v108 = sub_18127D33C((uint64_t)v38, v107 + v39);
      if (!v108) {
        break;
      }
      uint64_t v72 = (const void *)v108;
      unsigned int v109 = v105 + v101;
      *(void *)(v109 + 184) = 0LL;
      *(_OWORD *)(v109 + 168) = 0u;
      *(_OWORD *)(v109 + 152) = 0u;
      memcpy((void *)(v108 + v39), v143, SHIDWORD(v142));
      int v110 = HIDWORD(v142);
      *(_DWORD *)(v109 + 160) = HIDWORD(v142);
      v111 = v141 < v123 && v124[v141] == 42;
      *(_DWORD *)(v109 + 164) = v111;
      v102 = (int)v142 >= 1 && v124[(v142 - 1)] == 94;
      uint64_t v45 = v106;
      v39 += v110;
      *(_DWORD *)(v105 + v101 + 168) = v102;
      v142 = 0LL;
      v141 = 0;
      v140 = 0;
      unint64_t v103 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v126 + 40))( v106,  &v143,  (char *)&v142 + 4,  &v142,  &v141,  &v140);
      v101 += 40LL;
      ++v40;
      uint64_t v38 = v72;
      if (v103)
      {
        char v5 = v103;
        v33 = v126;
        char v27 = v129;
        goto LABEL_108;
      }
    }

    if (!v38)
    {
      int v44 = qword_18C467E20 + 480;
      uint64_t v45 = v106;
      uint64_t v46 = v128;
      goto LABEL_123;
    }

    uint64_t v118 = (void (**)(void))&off_18C4653A8;
    int v44 = &qword_18C467E20[60];
    if (!dword_18C465380)
    {
      uint64_t v38 = 0LL;
      uint64_t v45 = v106;
      uint64_t v46 = v128;
      goto LABEL_226;
    }

    uint64_t v46 = v128;
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v38);
    --qword_18C468B10;
    off_18C4653A8(v38);
    uint64_t v38 = 0LL;
    uint64_t v45 = v106;
    if ((void)xmmword_18C468B70) {
      goto LABEL_220;
    }
LABEL_123:
    if (v45) {
      (*(void (**)(uint64_t **))(v126 + 32))(v45);
    }
    if (v38)
    {
      char v82 = (void (**)(const void *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_131;
      }
      char v83 = v44[366];
      if (v83) {
        xmmword_18C465400(v83);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v38);
      --qword_18C468B10;
      off_18C4653A8(v38);
      uint64_t v38 = (const void *)v44[366];
      if (v38)
      {
        char v82 = (void (**)(const void *))&xmmword_18C465410;
LABEL_131:
        (*v82)(v38);
      }
    }

    if (v46)
    {
      char v84 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_138;
      }
      char v85 = v44[366];
      if (v85) {
        xmmword_18C465400(v85);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v46);
      --qword_18C468B10;
      off_18C4653A8(v46);
      uint64_t v46 = v44[366];
      if (v46)
      {
        char v84 = &xmmword_18C465410;
LABEL_138:
        (*v84)(v46);
      }
    }

    int v12 = 0LL;
    char v5 = 7;
    BOOL v139 = 0LL;
LABEL_146:
    if (!v5) {
      break;
    }
    int v12 = v7;
    int v92 = v136;
    a1 = v129;
    __int16 v87 = v133;
LABEL_185:
    a3 = v92 - v137;
    a2 = &v87[v137];
    unsigned int v7 = v12;
    if (v5) {
      goto LABEL_230;
    }
  }

  __int16 v87 = v133;
  if (!v12)
  {
    int v12 = v7;
    int v92 = v136;
    a1 = v129;
    goto LABEL_185;
  }

  v88 = *(_DWORD *)v12;
  a1 = v129;
  if (*(_DWORD *)v12 == 5)
  {
    int v89 = 0;
    int v90 = v135 != 0;
    char v91 = 1;
    goto LABEL_154;
  }

  v93 = *(void *)(v12 + 16);
  char v91 = v93 != 0;
  int v89 = v93 == 0;
  int v90 = v135 != 0;
  if (!v93 && v135)
  {
    uint64_t v121 = 1LL;
    goto LABEL_244;
  }

uint64_t sub_18126AAF0(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  v12[0] = 0LL;
  v12[1] = a4;
  int v13 = a3;
  int v14 = 0;
  if (*a2 != 47)
  {
    if (!off_18C54FD10(v15, 1024LL))
    {
      uint64_t v9 = sub_1812F2E28(49936);
      int v10 = *__error();
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v10, __strerrbuf, 0x4FuLL);
      sqlite3_log(v9, "os_unix.c:%d: (%d) %s(%s) - %s", 49936, v10, "getcwd", a2, __strerrbuf);
      return v9;
    }

    sub_1812F8F90((uint64_t)v12, (uint64_t)v15);
  }

  sub_1812F8F90((uint64_t)v12, (uint64_t)a2);
  int v6 = v14;
  int v7 = v12[0];
  *(_BYTE *)(a4 + v14) = 0;
  if (v6 >= 2 && v7 == 0) {
    return (HIDWORD(v12[0]) != 0) << 9;
  }
  else {
    return sub_1812F2E28(49942);
  }
}

char *sqlite3_snprintf(int a1, char *a2, const char *a3, ...)
{
  if (a1 >= 1)
  {
    if (a2 && a3)
    {
      v6[0] = 0LL;
      v6[1] = a2;
      int v7 = a1;
      uint64_t v8 = 0LL;
      __int16 v9 = 0;
      sqlite3_str_vappendf((sqlite3_str *)v6, a3, va);
      uint64_t v4 = &a2[HIDWORD(v8)];
LABEL_6:
      *uint64_t v4 = 0;
      return a2;
    }

    sub_1812CF36C(33008);
    uint64_t v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  return a2;
}

void *sub_18126ACBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  else {
    return *(void **)(a1 + 8);
  }
}

uint64_t sub_18126ACE8()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v120 = *MEMORY[0x1895F89C0];
  int v10 = v3 & 0xFE0FFF00;
  if ((v3 & 4) == 0 || (int v11 = 1, v10 != 2048) && v10 != 0x4000 && v10 != 0x80000) {
    int v11 = 0;
  }
  int v12 = dword_18C468CD0;
  if (v12 != getpid())
  {
    dword_18C468CD0 = getpid();
    sqlite3_initialize();
  }

  *(void *)(v6 + 176) = 0LL;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  if (v10 == 256)
  {
    int v13 = (_DWORD *)sub_1812F60AC(v8, v4);
    if (v13)
    {
      v104 = v2;
      LODWORD(v14) = *v13;
    }

    else
    {
      if (sqlite3_initialize()) {
        return 7LL;
      }
      int v13 = (_DWORD *)sub_18126F0AC(16LL);
      if (!v13) {
        return 7LL;
      }
      v104 = v2;
      LODWORD(v14) = -1;
    }

    *(void *)(v6 + 48) = v13;
    goto LABEL_15;
  }

  v104 = v2;
  if (v8)
  {
    LODWORD(v14) = -1;
LABEL_15:
    unsigned int v15 = (char *)v8;
    goto LABEL_16;
  }

  unsigned int v15 = v107;
  uint64_t v18 = sub_1812F3E24(*(_DWORD *)(v9 + 8), v107);
  if ((_DWORD)v18) {
    return v18;
  }
  LODWORD(v14) = -1;
LABEL_16:
  int v16 = strlen(v15);
  int v17 = sqlite3_initialize();
  uint64_t v18 = 7LL;
  if (v16 < 1) {
    goto LABEL_173;
  }
  if (v17) {
    goto LABEL_173;
  }
  __int128 v19 = (char *)sub_18126F0AC(v16);
  if (!v19) {
    goto LABEL_173;
  }
  __int128 v20 = v19;
  uint64_t v21 = dirname_r(v15, v19);
  if (statfs(v21, &v108) != -1)
  {
    uint64_t v101 = (const char *)v8;
    int v100 = v11;
    int v22 = v4 & 4;
    int v103 = v4 & 1;
    size_t v23 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      uint64_t v24 = v9;
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v20);
      --qword_18C468B10;
      off_18C4653A8(v20);
      __int128 v20 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_37:
        char f_flags = v108.f_flags;
        int v28 = v4 & 2;
        uint64_t v98 = v24;
        unint64_t v29 = v4;
        if ((v4 & 2) != 0 && (v108.f_flags & 1) != 0)
        {
          int v22 = 0;
          int v28 = 0;
          unint64_t v29 = v4 & 0xFFFFFFF9;
          int v103 = 1;
        }

        if ((v108.f_flags & 0x80) == 0 && (v29 & 0x700000) != 0)
        {
          int v30 = v28;
          sqlite3_log(1, "volume does not support data protection, stripping SQLITE_OPEN_FILEPROTECTION_* flags");
          int v28 = v30;
          unint64_t v29 = v29 & 0xFF8FFFFF;
        }

        int v31 = v4 & 8;
        if (v22) {
          int v32 = (2 * (v28 != 0)) | 0x200;
        }
        else {
          int v32 = 2 * (v28 != 0);
        }
        unsigned int v33 = v32 & 0xFFFFF7FF | (((v4 >> 4) & 1) << 11);
        if ((v29 & 0x1000000) != 0) {
          int v34 = 0x20000000;
        }
        else {
          int v34 = 256;
        }
        int v99 = v33 | v34;
        if ((v14 & 0x80000000) == 0)
        {
          int v35 = v101;
          goto LABEL_51;
        }

        uint64_t v38 = ((v29 >> 20) & 7) - 1;
        int v35 = v101;
        else {
          int v39 = dword_1813CD880[v38];
        }
        char v95 = f_flags;
        int v96 = v39;
        if ((v29 & 0x80800) != 0)
        {
          if (v15)
          {
            int v42 = v28;
            int v43 = strlen(v15);
            int v28 = v42;
            uint64_t v44 = v43 & 0x3FFFFFFF;
          }

          else
          {
            uint64_t v44 = 0LL;
          }

          do
          {
            if (v44 >= 2)
            {
              uint64_t v67 = --v44;
              int v68 = v15[v44];
              if (v68 != 46) {
                continue;
              }
            }

            uint64_t v63 = 0LL;
            uint64_t v62 = 0LL;
            unsigned int v61 = 0;
            uint64_t v18 = 0LL;
            int v31 = v4 & 8;
            goto LABEL_193;
          }

          while (v68 != 45);
          int v93 = v28;
          __memcpy_chk();
          __strerrbuf[v67] = 0;
          if (off_18C54FD28(__strerrbuf, &v115))
          {
            uint64_t v63 = 0LL;
            uint64_t v62 = 0LL;
            unsigned int v61 = 0;
            uint64_t v18 = 1802LL;
          }

          else
          {
            uint64_t v18 = 0LL;
            uint64_t v63 = WORD2(v115) & 0x1FF;
            uint64_t v62 = v116;
            unsigned int v61 = DWORD1(v116);
          }

          int v28 = v93;
          int v31 = v4 & 8;
        }

        else
        {
          if ((v29 & 8) != 0)
          {
            unsigned int v61 = 0;
            uint64_t v62 = 0LL;
            uint64_t v63 = 384LL;
            goto LABEL_194;
          }

          if ((v29 & 0x40) == 0)
          {
            unsigned int v61 = 0;
            uint64_t v62 = 0LL;
            uint64_t v63 = 0LL;
            goto LABEL_194;
          }

          int v81 = v28;
          char v82 = sqlite3_uri_parameter(v15, "modeof");
          if (!v82)
          {
            unsigned int v61 = 0;
            uint64_t v62 = 0LL;
            uint64_t v63 = 0LL;
            int v28 = v81;
            goto LABEL_194;
          }

          if (off_18C54FD28(v82, __strerrbuf))
          {
            uint64_t v63 = 0LL;
            uint64_t v62 = 0LL;
            unsigned int v61 = 0;
            uint64_t v18 = 1802LL;
          }

          else
          {
            uint64_t v18 = 0LL;
            uint64_t v63 = *(_WORD *)&__strerrbuf[4] & 0x1FF;
            uint64_t v62 = v110;
            unsigned int v61 = DWORD1(v110);
          }

          int v28 = v81;
        }

LABEL_164:
                      __int16 v73 = v58 & 0xFEFF;
                      if ((~v58 & 0x102) == 0) {
                        LOWORD(v58) = v58 & 0xFEFF;
                      }
                      if ((v58 & 0x100) != 0)
                      {
                        *(void *)&__int128 v115 = v55 | 0x6700000000LL;
                        *((void *)&v115 + 1) = qword_18C54FF78;
                        if (__mac_syscall() == -1)
                        {
                          if (*__error() != 103)
                          {
                            int v74 = *__error();
                            v75 = __error();
                            uint64_t v76 = strerror(*v75);
                            sqlite3_log(1, "Failed to set vnode guard on %s (%d): %s", v35, v74, v76);
                          }

                          LOWORD(v58) = v73;
                        }
                      }

                      uint64_t v77 = sub_18126BAE4(v98, v55, v6, v35, v58);
LABEL_172:
                      uint64_t v18 = v77;
                      if (!(_DWORD)v77) {
                        return v18;
                      }
                      goto LABEL_173;
                    }

            *(void *)(a1 + 96) = v73;
            v75 = (void (**)(uint64_t))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8 -= (int)off_18C4653B8(v72);
              --qword_18C468B10;
              off_18C4653A8(v72);
              size_t v72 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70)
              {
LABEL_60:
                if (!(_DWORD)v7) {
                  return v7;
                }
                goto LABEL_99;
              }

              v75 = (void (**)(uint64_t))&xmmword_18C465410;
            }

            (*v75)(v72);
            goto LABEL_60;
          }
        }

        uint64_t v7 = 7LL;
      }
    }

      int v91 = *(void *)v14;
      v391[0] = 0LL;
      *((_DWORD *)v15 + 11) = -1;
      v367 = (int *)(v15 + 44);
      v379 = v91;
      if (!v41)
      {
        uint64_t v40 = 0LL;
        goto LABEL_186;
      }

      if ((*(_BYTE *)(v13 + 40) & 6) != 0)
      {
        uint64_t v40 = 0LL;
        uint64_t v41 = 0LL;
        goto LABEL_186;
      }

      unsigned int v92 = *(unsigned int *)(v91 + 40);
      if ((int)v92 >= 1)
      {
        int v93 = 0LL;
        unsigned int v94 = *(void *)(v91 + 32);
        while (1)
        {
          char v95 = *(_BYTE **)(v94 + 32 * v93);
          for (uint64_t j = v41; ; ++j)
          {
            char v97 = *v95;
            uint64_t v98 = *j;
            if ((_DWORD)v97 != (_DWORD)v98) {
              break;
            }
            if (!*v95)
            {
              uint64_t v40 = *(void *)(v94 + 32 * v93 + 24);
              goto LABEL_179;
            }

            a3 = v111;
            int v25 = v87;
            goto LABEL_210;
          }
        }

        int v12 = sub_1812FD54C(v80, v87);
        goto LABEL_164;
      }

      uint64_t v76 = sub_1812FAFE4(v74);
    }

    else
    {
      int v12 = v75[12];
      if ((_DWORD)v12) {
        return v12;
      }
      if (v75[46] <= v75[50]) {
        uint64_t v76 = sub_1812ABE24(v74);
      }
      else {
        uint64_t v76 = sub_1812FED50(v74);
      }
    }

    int v12 = v76;
    if ((_DWORD)v76) {
      return v12;
    }
    goto LABEL_173;
  }

  int v28 = v25;
  unint64_t v29 = *(unsigned __int8 *)(v25 + 10);
  __int128 v112 = v28;
  __int128 v110 = a3;
  if (*(_BYTE *)(v28 + 1))
  {
    int v31 = *(int *)(a2 + 36);
    int v30 = *(int *)(a2 + 40);
    int v32 = v30 + v31;
    unsigned int v33 = *(char **)(a2 + 16);
    if ((v30 + v31) > 0x7F)
    {
      int v39 = (int8x8_t *)((char *)v27 + v29);
      if (v32 >> 14)
      {
        int v34 = sub_181308E00(v39, v32);
      }

      else
      {
        v39->i8[0] = (v32 >> 7) | 0x80;
        v39->i8[1] = v32 & 0x7F;
        int v34 = 2;
      }
    }

    else
    {
      *((_BYTE *)v27 + v29) = v32;
      int v34 = 1;
    }

    uint64_t v41 = (v34 + v29);
    int v42 = (int8x8_t *)((char *)v27 + v41);
    int v43 = *(void *)(a2 + 8);
    if (v43 > 0x7F)
    {
      if (v43 >> 14)
      {
        uint64_t v44 = sub_181308E00(v42, v43);
      }

      else
      {
        v42->i8[0] = (v43 >> 7) | 0x80;
        v42->i8[1] = v43 & 0x7F;
        uint64_t v44 = 2;
      }
    }

    else
    {
      v42->i8[0] = v43;
      uint64_t v44 = 1;
    }

    unsigned int v45 = v44 + v41;
    LODWORD(v37) = v31;
  }

  else
  {
    unsigned int v33 = *(char **)a2;
    int v37 = *(void *)(a2 + 8);
    if (v37 > 0x7F)
    {
      uint64_t v40 = (int8x8_t *)((char *)v27 + v29);
      if (v37 >> 7)
      {
        if ((unint64_t)v37 >> 14)
        {
          uint64_t v38 = sub_181308E00(v40, (int)v37);
        }

        else
        {
          v40->i8[0] = (v37 >> 7) | 0x80;
          v40->i8[1] = v37 & 0x7F;
          uint64_t v38 = 2;
        }
      }

      else
      {
        v40->i8[0] = v37;
        uint64_t v38 = 1;
      }
    }

    else
    {
      *((_BYTE *)v27 + v29) = v37;
      uint64_t v38 = 1;
    }

    unsigned int v45 = v38 + v29;
    LODWORD(v32) = v37;
  }

  char v46 = v27;
  uint64_t v47 = (char *)v27 + v45;
  int v25 = v112;
  int v48 = *(unsigned __int16 *)(v112 + 14);
  if ((int)v32 <= v48)
  {
    uint64_t v66 = v32 + v45;
    if (v66 <= 4) {
      uint64_t v66 = 4;
    }
    uint64_t v114 = v66;
    memcpy(v47, v33, (int)v37);
    bzero(&v47[(int)v37], (int)v32 - (int)v37);
    char v27 = v46;
    goto LABEL_131;
  }

  v106 = v46;
  v107 = a2;
  char v49 = *(unsigned __int16 *)(v112 + 16);
  char v50 = *(void *)(v112 + 72);
  else {
    uint64_t v51 = *(unsigned __int16 *)(v112 + 16);
  }
  int v52 = v45 + (uint64_t)v51;
  uint64_t v114 = v52 + 4;
  statfs v108 = (_DWORD *)((char *)v46 + v52);
  unsigned int v109 = 0LL;
  uint64_t v124 = 0;
  while (1)
  {
    do
    {
      else {
        BOOL v53 = v32;
      }
      if ((int)v37 >= v53)
      {
        memcpy(v47, v33, v53);
      }

      else if ((int)v37 < 1)
      {
        bzero(v47, v53);
      }

      else
      {
        memcpy(v47, v33, v37);
        BOOL v53 = v37;
      }

      LODWORD(v32) = v32 - v53;
      if ((int)v32 < 1)
      {
        if (v109)
        {
          uint64_t v67 = *(void *)(v109 + 112);
          char v27 = v106;
          a2 = v107;
          a3 = v110;
          int v25 = v112;
          if ((*(_WORD *)(v67 + 52) & 0x20) != 0)
          {
            int v68 = *(void *)(v67 + 40);
            --*(_DWORD *)(v68 + 152);
            *(void *)(v67 + 32) = *(void *)(v68 + 168);
            *(void *)(v68 + 168) = v67;
            (*(void (**)(void, void, void))(**(void **)(v68 + 72) + 144LL))( *(void *)(v68 + 72),  *(void *)(v68 + 200) * (*(_DWORD *)(v67 + 48) - 1),  *(void *)(v67 + 8));
          }

          else
          {
            sub_1812F9F44(v67);
          }
        }

        else
        {
          char v27 = v106;
          a2 = v107;
          a3 = v110;
          int v25 = v112;
        }

  v107 = *(void *)(v7 + 56);
  statfs v108 = *(void *)(v107 + 24);
  if (v108)
  {
    unsigned int v109 = (_DWORD *)(v108 + 16LL * (0x55F9AA32u % *(_DWORD *)(v107 + 8)));
    __int128 v110 = (uint64_t *)(v109 + 2);
  }

  else
  {
    __int128 v110 = (uint64_t *)(v107 + 16);
    unsigned int v109 = (_DWORD *)(v107 + 12);
  }

  __int128 v111 = *v109;
  if (!v111) {
    return qword_18C550670;
  }
  while (2)
  {
    __int128 v110 = (uint64_t *)*v110;
    __int128 v112 = (_BYTE *)v110[3];
    __int128 v113 = "sqlite_temp_master";
    while (2)
    {
      uint64_t v114 = *v112;
      __int128 v115 = *(unsigned __int8 *)v113;
      if ((_DWORD)v114 == (_DWORD)v115)
      {
        if (!*v112) {
          return v110[2];
        }
        goto LABEL_170;
      }

      if (byte_1813C6343[v114] == byte_1813C6343[v115])
      {
LABEL_170:
        ++v112;
        ++v113;
        continue;
      }

      break;
    }

    if (--v111) {
      continue;
    }
    break;
  }

  __int128 v110 = &qword_18C550660;
  return v110[2];
}

LABEL_90:
                    *char v50 = v29;
                    goto LABEL_91;
                  }
                }

                *(_DWORD *)(v6 + 124) = v45;
              }
            }

            char v50 = v104;
            if (!v104) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }

          if (*__error() && *__error() != 2)
          {
            uint64_t v77 = 0LL;
            int v86 = *__error();
          }

          else
          {
            uint64_t v77 = 0LL;
          }
        }

        char v87 = 1;
LABEL_222:
        if (*__error() == 1)
        {
          uint64_t v18 = 23LL;
          sub_1812F338C(23LL, "open", v15, 49438);
        }

        else
        {
          uint64_t v18 = sub_1812F2E28(49441);
          sub_1812F2D64(v18, "open", v15, v86, 49441);
          if ((v87 & 1) == 0) {
            goto LABEL_172;
          }
        }

        goto LABEL_173;
      }

      size_t v23 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    else
    {
      uint64_t v24 = v9;
    }

    (*v23)(v20);
    goto LABEL_37;
  }

  int v25 = *__error();
  int v26 = "statfs";
  if (v25 == 2)
  {
    uint64_t v18 = sub_1812F2E28(49348);
    if ((_DWORD)v18 == 14) {
      int v26 = "open";
    }
  }

  else
  {
    uint64_t v18 = 3338LL;
  }

  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v25, __strerrbuf, 0x4FuLL);
  uint64_t v40 = &byte_1813CEAEE;
  if (v15) {
    uint64_t v40 = v15;
  }
  sqlite3_log(v18, "os_unix.c:%d: (%d) %s(%s) - %s", 49349, v25, v26, v40, __strerrbuf);
  uint64_t v41 = (uint64_t (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v20);
    --qword_18C468B10;
    off_18C4653A8(v20);
    __int128 v20 = (char *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_173;
    }
    uint64_t v41 = (uint64_t (**)(char *))&xmmword_18C465410;
  }

  (*v41)(v20);
LABEL_173:
  uint64_t v78 = *(void *)(v6 + 48);
  if (!v78) {
    return v18;
  }
  uint64_t v79 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_179:
    (*v79)(v78);
    return v18;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v78);
  --qword_18C468B10;
  off_18C4653A8(v78);
  uint64_t v78 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v79 = &xmmword_18C465410;
    goto LABEL_179;
  }

  return v18;
}

        ++*((_DWORD *)a1 + 33);
        for (uint64_t i = a1[14]; i; uint64_t i = *(void *)(i + 64))
          *(_DWORD *)(i + 24) = 1;
        sub_18126C6E4((void *)a1[42], 0);
        if (*((_BYTE *)a1 + 27))
        {
          (*(void (**)(void, void, void))(*(void *)a1[9] + 144LL))(a1[9], 0LL, 0LL);
          if (!*((_BYTE *)a1 + 16)) {
            goto LABEL_188;
          }
          goto LABEL_97;
        }

        goto LABEL_96;
      }

      int v13 = 769LL;
      if (*(_BYTE *)(v3 + 63)) {
        goto LABEL_89;
      }
    }

      a1[4] = (_DWORD)v35 - v20;
      *int v35 = 0;
      size_t v23 = v35 + 1;
      goto LABEL_91;
    }

    if (v15 < 1) {
      goto LABEL_90;
    }
    int v52 = &v18[v16];
    int v35 = (_BYTE *)v20;
    while (1)
    {
      int v57 = *v18++;
      BOOL v53 = v57;
      int v58 = v57 - 192;
      if (v57 >= 0xC0)
      {
        unsigned int v55 = byte_1813C6D06[v58];
        if (v18 == v21)
        {
          uint64_t v18 = v21;
        }

        else
        {
          while (1)
          {
            v59 = *v18;
            if ((*v18 & 0xC0) != 0x80) {
              break;
            }
            ++v18;
            unsigned int v55 = v59 & 0x3F | (v55 << 6);
            if (v18 == v21)
            {
              uint64_t v18 = v52;
              break;
            }
          }
        }

        BOOL v53 = -3;
        if (v55 >> 1 != 0x7FFF && v55 >= 0x80 && (v55 & 0xFFFFF800) != 0xD800)
        {
          if (HIWORD(v55))
          {
            *int v35 = ((v55 - 0x10000) >> 18) & 3 | 0xD8;
            v35[1] = ((v55 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v55 >> 10);
            BOOL v54 = v35 + 3;
            v35[2] = BYTE1(v55) & 3 | 0xDC;
            int v56 = 4LL;
            goto LABEL_78;
          }

          BOOL v53 = v55;
        }
      }

      *int v35 = HIBYTE(v53);
      BOOL v54 = v35 + 1;
      LOBYTE(v55) = v53;
      int v56 = 2LL;
LABEL_78:
      v35 += v56;
      *BOOL v54 = v55;
      if (v18 >= v21) {
        goto LABEL_90;
      }
    }
  }

  uint64_t v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) == 0) {
    goto LABEL_15;
  }
  if ((a1[5] & 0x400) != 0)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0) {
        goto LABEL_11;
      }
      uint64_t v6 = 1;
    }

    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    uint64_t v4 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v4;
  }

  int v155 = (uint64_t)a1;
  if (a2 < 2) {
    goto LABEL_356;
  }
LABEL_91:
  uint64_t v156 = a2;
  int v57 = 1LL;
  while (2)
  {
    int v58 = a3[v57];
    if (!v58)
    {
      uint64_t v60 = 0LL;
      goto LABEL_103;
    }

    v59 = *(unsigned __int16 *)(v58 + 20);
    if ((~v59 & 0x202) != 0 || *(_BYTE *)(v58 + 22) != 1)
    {
      if ((v59 & 1) != 0)
      {
        uint64_t v60 = 0LL;
        unsigned int v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0) {
          goto LABEL_105;
        }
LABEL_100:
        if ((v61 & 0x11) == 0) {
          goto LABEL_110;
        }
        goto LABEL_111;
      }

      uint64_t v60 = (unsigned __int8 *)sub_181303998((int *)v58, 1);
      int v58 = a3[v57];
      if (v58)
      {
        unsigned int v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0) {
          goto LABEL_105;
        }
        goto LABEL_100;
      }

  *(_WORD *)(a1 + 70) = 0;
  return v13;
}

        uint64_t v44 = (unint64_t *)v111;
        goto LABEL_91;
      }
    }

    unint64_t v29 = v114;
    uint64_t v44 = &v21[2 * v27 + 4];
    if (v39) {
      break;
    }
    unsigned int v45 = 0;
    char v46 = (char *)&v21[2 * v27];
    *((void *)v46 + 5) = 0LL;
    *((_DWORD *)v46 + 9) = 0;
LABEL_91:
    if (v27)
    {
      if (*((_DWORD *)v44 - 4) && v39 == 0) {
        unsigned int v45 = 267;
      }
    }

    if (v27 == v106 && *(_DWORD *)v44) {
      unsigned int v45 = 267;
    }
    v29 -= v39;
    int v25 = v45 == 0;
    if (!v45 && ++v27 < v105) {
      continue;
    }
    goto LABEL_109;
  }

  unsigned int v45 = 7;
LABEL_108:
  int v25 = 0;
  v21[2 * v27 + 5] = 0LL;
  v29 -= v39;
LABEL_109:
  if (v29 != 0 && v25) {
    int v22 = 267;
  }
  else {
    int v22 = v45;
  }
  uint64_t v5 = v101;
  if (!v112) {
    v21[2] = v107 + 1;
  }
  uint64_t v85 = v102;
  if (v22)
  {
    sub_18138A584(v21);
    uint64_t v21 = 0LL;
    goto LABEL_116;
  }

  char v87 = bswap32(v110);
  *(_DWORD *)(a1 + 60) = 0;
  if (!*(_DWORD *)(v102 + 136) || *(_DWORD *)(v102 + 132) != v87)
  {
    __int128 v118 = 0LL;
    __int128 v117 = 0;
    *(_OWORD *)(v102 + 136) = xmmword_1813CDE40;
    *(_DWORD *)(v102 + 152) = 0x100000;
    *(_DWORD *)(v102 + 180) = 10;
    v88 = (unsigned __int8 *)sub_1813889B8( &v117,  "SELECT k, v FROM %Q.'%q_config'",  *(void *)(v102 + 8),  *(void *)(v102 + 16));
    if (v88)
    {
      int v90 = v88;
      int v22 = sub_18126DFE0(*(void *)v102, v88, 0xFFFFFFFFLL, 128LL, 0LL, &v118, 0LL, v89);
      int v91 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_137:
        (*v91)(v90);
        goto LABEL_139;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v90);
      --qword_18C468B10;
      off_18C4653A8(v90);
      int v90 = (unsigned __int8 *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v91 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
        goto LABEL_137;
      }
    }

    else
    {
      int v22 = v117;
    }

      int v35 = 1;
      if (!a2) {
        goto LABEL_56;
      }
      goto LABEL_44;
    }

    if (v31 == 5)
    {
      int v34 = sqlite3_column_type((sqlite3_stmt *)a3, v26);
      unsigned int v33 = 1LL;
      int v35 = v34 == 5;
      if (v34 == 5)
      {
        if (!a2) {
          goto LABEL_56;
        }
      }

      else
      {
        char v27 = 0;
        if (!a2) {
          goto LABEL_56;
        }
      }

      goto LABEL_44;
    }

    int v36 = v9[1];
    if ((v36 & 0x80) != 0)
    {
      uint64_t v41 = v9[2];
      if ((char)v9[2] < 0)
      {
        int v42 = (char)v9[3];
        if (v42 < 0)
        {
          int v37 = sub_18129BD74((char *)v9 + 1, &v63);
          if (HIDWORD(v63)) {
            int v36 = -1;
          }
          else {
            int v36 = v63;
          }
        }

        else
        {
          int v36 = v42 & 0x7F | (v36 << 14) & 0x1FC07F | ((v41 & 0x7F) << 7);
          int v37 = 3;
        }
      }

      else
      {
        int v36 = ((v36 & 0x7F) << 7) | v41;
        int v37 = 2;
      }
    }

    else
    {
      int v37 = 1;
    }

    char v50 = v37 + 1;
    unsigned int v33 = (v37 + 1 + v36);
    if (sqlite3_column_type((sqlite3_stmt *)a3, v26) != v31 || v36 != sqlite3_column_bytes((sqlite3_stmt *)a3, v26)) {
      goto LABEL_88;
    }
    if (v36)
    {
      uint64_t v51 = sqlite3_column_blob((sqlite3_stmt *)a3, v26);
      if (memcmp(&v9[v50], v51, v36)) {
        goto LABEL_88;
      }
      goto LABEL_90;
    }

    int v35 = 1;
    if (!a2)
    {
LABEL_56:
      if (!v35) {
        goto LABEL_26;
      }
      if (*(_BYTE *)(a5 + v26))
      {
        sub_1813BB8F8(a1, v9, v33, &v62);
        if (v62) {
          goto LABEL_28;
        }
        goto LABEL_59;
      }

      if (v62) {
        goto LABEL_28;
      }
      int v43 = *(_DWORD *)(a1 + 8);
      uint64_t v44 = *(_DWORD *)(a1 + 12);
      unsigned int v45 = v43;
      if (v43 < v44)
      {
        char v46 = *(void *)a1;
        goto LABEL_69;
      }

      if (!v44) {
        uint64_t v44 = 128;
      }
      int v52 = v44;
      do
      {
        BOOL v53 = v52;
        v52 *= 2LL;
      }

      while (v52 <= v43);
      if (v53 > 1073741695)
      {
        if (v43 <= 2147483390)
        {
          int v52 = 2147483391LL;
          goto LABEL_101;
        }

uint64_t sub_18126BAE4(uint64_t a1, unsigned int a2, uint64_t a3, const char *a4, __int16 a5)
{
  unsigned int v8 = a2;
  uint64_t v37 = *MEMORY[0x1895F89C0];
  *(_DWORD *)(a3 + 24) = a2;
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 56) = a4;
  *(_WORD *)(a3 + 30) = a5;
  *(void *)(a3 + 96) = qword_18C4654A8;
  if ((a5 & 0x40) != 0) {
    int v10 = a4;
  }
  else {
    int v10 = 0LL;
  }
  int v11 = (char *)sqlite3_uri_parameter(v10, "psow");
  if (v11 && !sub_181345AA0(v11, 1, 1u))
  {
    __int16 v12 = a5;
  }

  else
  {
    __int16 v12 = a5 | 0x10;
    *(_WORD *)(a3 + 30) = a5 | 0x10;
  }

  int v13 = &unk_189B6D0F0;
  if ((a5 & 0x80) == 0)
  {
    int v13 = (void *)(**(uint64_t (***)(const char *, uint64_t))(a1 + 32))(a4, a3);
    *(void *)(a3 + 40) = a4;
  }

  if (v13 == &unk_189B6CF28 || v13 == &unk_189B6D058 || a4 && v13 == &unk_189B6D0F0)
  {
    if (qword_18C468B90) {
      xmmword_18C465400(qword_18C468B90);
    }
    uint64_t v14 = sub_18126C1A0(a3, (uint64_t *)(a3 + 16));
    if ((_DWORD)v14)
    {
      if ((v8 & 0x80000000) == 0 && off_18C54FCE0(v8))
      {
        unsigned int v15 = *(const char **)(a3 + 56);
        int v16 = *__error();
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v16, __strerrbuf, 0x4FuLL);
        int v17 = &byte_1813CEAEE;
        if (v15) {
          int v17 = v15;
        }
        sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48763, v16, "close", v17, __strerrbuf);
      }

      unsigned int v8 = -1;
    }

    uint64_t v18 = qword_18C468B90;
    if (qword_18C468B90) {
      goto LABEL_26;
    }
    goto LABEL_27;
  }

  if (v13 != &unk_189B6CFC0)
  {
    if (v13 != &unk_189B6D188)
    {
      uint64_t v14 = 0LL;
      goto LABEL_27;
    }

    int v23 = strlen(a4);
    if (sqlite3_initialize())
    {
      uint64_t v24 = 0LL;
    }

    else
    {
      int v31 = v23 + 6;
      uint64_t v24 = (char *)sub_18126F0AC(v31);
      if (v24)
      {
        sqlite3_snprintf(v31, v24, "%s.lock", a4);
        uint64_t v14 = 0LL;
        goto LABEL_66;
      }
    }

    uint64_t v14 = 7LL;
LABEL_66:
    *(void *)(a3 + 40) = v24;
    goto LABEL_27;
  }

  if (sqlite3_initialize())
  {
    *(void *)(a3 + 40) = 0LL;
    uint64_t v14 = 7LL;
    goto LABEL_27;
  }

  uint64_t v25 = sub_18126F0AC(16LL);
  *(void *)(a3 + 40) = v25;
  if (!v25)
  {
    uint64_t v14 = 7LL;
    goto LABEL_27;
  }

  *(void *)(v25 + 8) = a4;
  *(_DWORD *)uint64_t v25 = 0;
  srandomdev();
  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  uint64_t v14 = sub_18126C1A0(a3, (uint64_t *)(a3 + 16));
  if ((_DWORD)v14)
  {
    uint64_t v26 = *(void *)(a3 + 40);
    if (v26)
    {
      char v27 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v26);
        --qword_18C468B10;
        off_18C4653A8(v26);
        uint64_t v26 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_56;
        }
        char v27 = &xmmword_18C465410;
      }

      (*v27)(v26);
    }

LABEL_56:
    if ((v8 & 0x80000000) == 0 && off_18C54FCE0(v8))
    {
      int v28 = *(const char **)(a3 + 56);
      int v29 = *__error();
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v29, __strerrbuf, 0x4FuLL);
      int v30 = &byte_1813CEAEE;
      if (v28) {
        int v30 = v28;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48789, v29, "close", v30, __strerrbuf);
    }

    unsigned int v8 = -1;
  }

  uint64_t v18 = qword_18C468B90;
  if (qword_18C468B90) {
LABEL_26:
  }
    xmmword_18C465410(v18);
LABEL_27:
  *(_DWORD *)(a3 + 32) = 0;
  if (a4) {
    sub_1812F61EC(v8, (dispatch_source_s **)(a3 + 152), 0LL);
  }
  if ((_DWORD)v14)
  {
    if ((v8 & 0x80000000) == 0 && off_18C54FCE0(v8))
    {
      __int128 v19 = *(const char **)(a3 + 56);
      int v20 = *__error();
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v20, __strerrbuf, 0x4FuLL);
      uint64_t v21 = &byte_1813CEAEE;
      if (v19) {
        uint64_t v21 = v19;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48856, v20, "close", v21, __strerrbuf);
    }
  }

  else
  {
    *(void *)a3 = v13;
    sub_1812F2A64(a3);
  }

  return v14;
}

  if (!*(_BYTE *)(a1 + 302))
  {
    v88 = *(unsigned __int8 **)(*(void *)(v16 + 32) + 32LL * v17);
    uint64_t v89 = *(void *)a1;
    if (!*(_BYTE *)(*(void *)a1 + 197LL))
    {
      v140 = *(unsigned __int8 **)(*(void *)(v16 + 32) + 32LL * v17);
      v105 = sub_181276C70(v89, (char **)(a1 + 8), (uint64_t)v43, v36, v37, v38, v39, v40);
      if (v105)
      {
        *(_DWORD *)(a1 + 24) = v105;
        goto LABEL_88;
      }

      v88 = v140;
      if (*(_BYTE *)(v89 + 111)) {
        *(_DWORD *)(v89 + 44) |= 0x10u;
      }
    }

    int v90 = v88;
    int v91 = sub_1812E2C64(v16, v20, v88);
    if (v91)
    {
      if (v9)
      {
        sub_18128BBA8(a1, v17);
        sub_18131EB5C((uint64_t *)a1, v98, v99, v100, v101, v102, v103, v104);
      }

      else
      {
        __int128 v115 = "view";
        if (*(_BYTE *)(v91 + 63) != 2) {
          __int128 v115 = "table";
        }
        sub_1812DC47C(a1, "%s %T already exists", v92, v93, v94, v95, v96, v97, (char)v115);
      }

      goto LABEL_45;
    }

    if (sub_18130D838(v16, (unsigned __int8 *)v20, v90))
    {
      sub_1812DC47C(a1, "there is already an index named %s", v106, v107, v108, v109, v110, v111, (char)v20);
      goto LABEL_45;
    }
  }

  char v46 = sub_1812F2264(v16, 0x68uLL);
  if (!v46)
  {
    *(_DWORD *)(a1 + 24) = 7;
LABEL_88:
    ++*(_DWORD *)(a1 + 48);
    goto LABEL_45;
  }

  *(void *)(v46 + 96) = 0LL;
  *(_OWORD *)(v46 + 64) = 0u;
  *(_OWORD *)(v46 + 80) = 0u;
  *(_OWORD *)(v46 + 32) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(_OWORD *)char v46 = 0u;
  *(_OWORD *)(v46 + 16) = 0u;
  *(void *)char v46 = v20;
  *(_WORD *)(v46 + 52) = -1;
  *(void *)(v46 + 96) = *(void *)(*(void *)(v16 + 32) + 32LL * v17 + 24);
  *(_DWORD *)(v46 + 44) = 1;
  *(_WORD *)(v46 + 58) = 200;
  *(void *)(a1 + 344) = v46;
  if (!*(_BYTE *)(v16 + 197))
  {
    BOOL v54 = sub_1812B9B34((uint64_t *)a1, v47, v48, v49, v50, v51, v52, v53);
    if (v54)
    {
      unsigned int v55 = v54;
      sub_18131EC34(a1, 1, v17);
      if (v141) {
        sub_181319B54(v55, 170LL, v56, v57, v58, v59, v60, v61);
      }
      uint64_t v62 = *(_DWORD *)(a1 + 56);
      uint64_t v63 = (v62 + 1);
      uint64_t v64 = (v62 + 2);
      *(_DWORD *)(a1 + 128) = v63;
      *(_DWORD *)(a1 + 132) = v64;
      int v65 = (v62 + 3);
      *(_DWORD *)(a1 + 56) = v65;
      sub_181279C3C(v55, 99LL, v17, v65, 2LL, v59, v60, v61);
      sub_1812DC804((_DWORD *)v55, v17);
      int v74 = sub_181319BA8(v55, 16LL, v65, v66, v67, v68, v69, v70);
      if ((*(void *)(v16 + 48) & 2LL) != 0) {
        v75 = 1LL;
      }
      else {
        v75 = 4LL;
      }
      sub_181279C3C(v55, 100LL, v17, 2LL, v75, v71, v72, v73);
      sub_181279C3C(v55, 100LL, v17, 5LL, *(unsigned __int8 *)(v16 + 100), v76, v77, v78);
      if (*(_BYTE *)(*(void *)v55 + 103LL)) {
        int v83 = &byte_18C550680;
      }
      else {
        int v83 = (char *)(*(void *)(v55 + 136) + 40LL * v74);
      }
      *((_DWORD *)v83 + 2) = *(_DWORD *)(v55 + 144);
      if (v141 | v11) {
        sub_1813103F4(v55, 71LL, 0LL, v64, v79, v80, v81, v82);
      }
      else {
        *(_DWORD *)(a1 + 200) = sub_181279C3C(v55, 147LL, v17, v64, 1LL, v80, v81, v82);
      }
      sub_18131ECA8(a1, v17, v116, v117, v118, v119, v120, v121);
      sub_1813103F4(v55, 127LL, 0LL, v63, v122, v123, v124, v125);
      sub_1812B9B68((uint64_t *)v55, 77LL, 6LL, v65, 0LL, (uint64_t)&unk_1813CA322, 0xFFFFFFFFLL, v126);
      sub_181279C3C(v55, 128LL, 0LL, v65, v63, v127, v128, v129);
      __int16 v136 = *(_DWORD *)(v55 + 144);
      int v137 = __OFSUB__(v136, 1);
      char v138 = v136 - 1;
      if (v138 < 0 == v137) {
        *(_WORD *)(*(void *)(v55 + 136) + 40LL * v138 + 2) = 8;
      }
      sub_181319B54(v55, 122LL, v130, v131, v132, v133, v134, v135);
    }
  }

    sub_1812C08E0(*(void *)(v2 + 64));
    *(void *)(v2 + 64) = 0LL;
    *(void *)(v2 + 96) = 0LL;
    return v4;
  }

LABEL_58:
  if (sub_18133E818((uint64_t)a1, (uint64_t)v28, v41, v23, v24, v25, v26, v27))
  {
LABEL_2:
    int v13 = 0LL;
    goto LABEL_3;
  }

  v221 = v42;
  v220 = (uint64_t)a4;
  uint64_t v60 = v28[12];
  unsigned int v61 = *(void *)(v12 + 32);
  if (v60)
  {
    uint64_t v62 = (uint64_t *)(v61 + 24);
    LODWORD(v63) = -1;
    do
    {
      uint64_t v64 = *v62;
      v62 += 4;
      uint64_t v63 = (v63 + 1);
    }

    while (v64 != v60);
  }

  else
  {
    uint64_t v63 = 4294934528LL;
  }

  char v70 = *(void *)a1;
  size_t v71 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)a1 + 528LL);
  if (!v71 || *(_BYTE *)(v70 + 197) || a1[302])
  {
    v212 = 0;
    goto LABEL_78;
  }

  __int128 v113 = v71(*(void *)(v70 + 536), 9LL, *v28, 0LL, *(void *)(v61 + 32LL * (int)v63), *((void *)a1 + 46));
  if (v113 == 1)
  {
    uint64_t v114 = 23;
    __int128 v115 = "not authorized";
    goto LABEL_159;
  }

  if ((v113 & 0xFFFFFFFD) == 0)
  {
    v212 = v113;
LABEL_78:
    v211 = v39;
    size_t v72 = *((_DWORD *)a1 + 13);
    __int16 v73 = v72 + 1;
    *((_DWORD *)a1 + 13) = v72 + 1;
    v218 = v72;
    *(_DWORD *)(a2 + 72) = v72;
    v75 = (uint64_t)(v28 + 2);
    int v74 = v28[2];
    if (v74)
    {
      uint64_t v76 = 0;
      do
      {
        ++v76;
        int v74 = *(void *)(v74 + 40);
      }

      while (v74);
      *((_DWORD *)a1 + 13) = v73 + v76;
    }

    else
    {
      uint64_t v76 = 0;
    }

    v209 = v73;
    if (v221)
    {
      v214 = *((void *)a1 + 46);
      *((void *)a1 + 46) = *v28;
      v219 = a1;
    }

    else
    {
      v214 = 0LL;
      v219 = 0LL;
    }

    v224 = *((void *)a1 + 2);
    if (!v224)
    {
      if (!*((void *)a1 + 21) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
        a1[35] = 1;
      }
      v224 = sub_1812DC63C((uint64_t *)a1, v53, v54, v55, v56, v57, v58, v59);
      if (!v224) {
        goto LABEL_103;
      }
    }

    v207 = v41;
    v215 = (uint64_t)v8;
    if (!a1[30]) {
      *(_WORD *)(v224 + 268) |= 0x10u;
    }
    if (*((void *)a1 + 21)) {
      uint64_t v77 = *((void *)a1 + 21);
    }
    else {
      uint64_t v77 = (uint64_t)a1;
    }
    uint64_t v78 = *(_DWORD *)(v77 + 124);
    uint64_t v79 = 1 << v63;
    if ((v78 & (1 << v63)) == 0)
    {
      *(_DWORD *)(v77 + 124) = v78 | v79;
      if ((_DWORD)v63 == 1) {
        sub_1812FA2F0(v77);
      }
    }

    *(_DWORD *)(v77 + 120) |= v79;
    *(_BYTE *)(v77 + 32) |= v225;
    if (v221)
    {
      sub_18133E97C((uint64_t *)a1, (uint64_t)v28, a3, v220, v215, v218);
      unsigned int v8 = 0LL;
      v220 = 0LL;
      v231[0] = v218;
      v231[1] = v218;
    }

    else
    {
      unsigned int v8 = (unsigned __int8 *)v215;
    }

    v230 = 0LL;
    v229 = 0u;
    v228 = 0u;
    v227[0] = a1;
    v227[1] = a2;
    if (sub_1813205D4((uint64_t)v227, (uint64_t)a3, v54, v55, v56, v57, v58, v59))
    {
LABEL_103:
      int v13 = 0LL;
LABEL_104:
      uint64_t v84 = v219;
      a4 = (void *)v220;
LABEL_105:
      if (v84) {
        *((void *)v84 + 46) = v214;
      }
      goto LABEL_3;
    }

    if ((*(_BYTE *)(v12 + 52) & 1) == 0 || a1[30] || *((void *)a1 + 22) || a1[219])
    {
      v208 = 0;
    }

    else
    {
      v173 = *((_DWORD *)a1 + 14);
      v174 = (v173 + 1);
      *((_DWORD *)a1 + 14) = v174;
      v208 = v173 + 1;
      sub_1813103F4(v224, 71LL, 0LL, v174, v80, v81, v82, v83);
    }

    if (v212) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = a3 == 0LL;
    }
    int v86 = v225;
    if (!v85) {
      int v86 = 1;
    }
    if ((v86 & 1) == 0 && *v211 != 1 && !*(void *)(v12 + 360))
    {
      sub_181319D20((uint64_t)a1, v63, *((_DWORD *)v28 + 10), 1, *v28);
      if ((v28[6] & 0x80) == 0)
      {
        if (v208) {
          char v159 = v208;
        }
        else {
          char v159 = 0xFFFFFFFFLL;
        }
        sub_1812B9B68((uint64_t *)v224, 145LL, *((unsigned int *)v28 + 10), v63, v159, *v28, 0xFFFFFFFFLL, v158);
      }

      char v160 = *(void *)v75;
      if (v160)
      {
        if (v208) {
          unsigned int v161 = v208;
        }
        else {
          unsigned int v161 = 0xFFFFFFFFLL;
        }
        do
        {
          while ((*(_WORD *)(v160 + 99) & 3) != 2 || (v28[6] & 0x80) == 0)
          {
            sub_1813103F4(v224, 145LL, *(unsigned int *)(v160 + 88), v63, v155, v156, v157, v158);
            char v160 = *(void *)(v160 + 40);
            if (!v160) {
              goto LABEL_177;
            }
          }

          sub_181279C3C(v224, 145LL, *(unsigned int *)(v160 + 88), v63, v161, v156, v157, v158);
          char v160 = *(void *)(v160 + 40);
        }

        while (v160);
      }

  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = j__sqlite3_preupdate_old;
  *(void *)(a1 + 112) = j__sqlite3_preupdate_new;
  *(void *)(a1 + 120) = sub_1813BA494;
  *(void *)(a1 + 128) = sub_1813BA4AC;
  if (!v14)
  {
    int v29 = "NULL";
    goto LABEL_65;
  }

  int v28 = v14[113];
  if (v28 == 186)
  {
LABEL_60:
    int v29 = "unopened";
LABEL_65:
    sqlite3_log(21, "API call with %s database connection pointer", v29);
    sub_1812CF36C(186024);
    return v8;
  }

  if (v28 != 118)
  {
    if (v28 != 109)
    {
      int v29 = "invalid";
      goto LABEL_65;
    }

    goto LABEL_60;
  }

  int v30 = *((void *)v14 + 3);
  if (v30) {
    xmmword_18C465410(v30);
  }
  return v8;
}

                            uint64_t v6 = 5LL;
                            goto LABEL_5;
                          }

                          uint64_t v6 = v30;
                          if (!(_DWORD)v30)
                          {
                            uint64_t v6 = (*(uint64_t (**)(sqlite3_stmt *, void, uint64_t, uint64_t, _OWORD **))(*(void *)pStmt + 104LL))( pStmt,  0LL,  0x8000LL,  1LL,  &v38);
                            if (!(_DWORD)v6)
                            {
                              int v31 = v38;
                              int v32 = pStmt;
                              unsigned __int8 *v38 = 0u;
                              v31[1] = 0u;
                              __int128 v33 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 112LL);
                              while (1)
                              {
                                __int128 v34 = v33(v32, 3LL, 5LL, 10LL);
                                if ((_DWORD)v34 != 5) {
                                  break;
                                }
                                if (!v35) {
                                  goto LABEL_56;
                                }
                                LODWORD(v37) = v37 + 1;
                                uint64_t v6 = 5LL;
                                if (!v35(v36)) {
                                  goto LABEL_5;
                                }
                              }

                              uint64_t v6 = v34;
                              if (!(_DWORD)v34) {
                                goto LABEL_6;
                              }
                            }
                          }
                        }
                      }
                    }

  *(_BYTE *)(v1 + 25) &= ~4u;
  return v15;
}

        if ((int)(v35 - v36) < (int)(v33 - v34))
        {
          int v43 = *(__int16 *)(a2 + 20);
          uint64_t v44 = *((__int16 *)v7 + 10);
          if (v43 <= v44)
          {
            if (v34 > v36) {
              goto LABEL_37;
            }
          }

          else if (v34 > v36 || *(__int16 *)(a2 + 22) > *((__int16 *)v7 + 11))
          {
            goto LABEL_37;
          }

          if (*(_WORD *)(a2 + 52))
          {
            while (1)
            {
              unsigned int v45 = *(void *)(*(void *)(a2 + 64) + 8 * (v35 - 1));
              if (v45) {
                break;
              }
LABEL_64:
              uint64_t v40 = v35-- <= 1;
              if (v40) {
                goto LABEL_70;
              }
            }

            char v46 = *((unsigned __int16 *)v7 + 26);
            while (1)
            {
              uint64_t v40 = v46-- < 1;
              if (v40) {
                goto LABEL_37;
              }
            }
          }

  sub_1812B9B68((uint64_t *)v14, 117LL, 0LL, v20, 0LL, (uint64_t)&byte_1813CEAEE, 0xFFFFFFFFLL, v28);
  int v57 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v57)
  {
    int v57 = sub_18131044C(v14, 57LL, v20, 0LL, v16, v54, v55, v56);
    if (v11 != 57) {
      goto LABEL_63;
    }
LABEL_60:
    v59 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v59)
    {
      sub_18131044C(v14, v31, v18, v32, v16, v54, v55, v56);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v59 + 1;
      uint64_t v60 = *(void *)(v14 + 136) + 40LL * v59;
      *(_BYTE *)uint64_t v60 = v31;
      *(_WORD *)(v60 + 2) = 0;
      *(_DWORD *)(v60 + 4) = v18;
      *(_DWORD *)(v60 + 8) = v32;
      *(_DWORD *)(v60 + 12) = v16;
      *(_BYTE *)(v60 + 1) = 0;
      *(void *)(v60 + 24) = 0LL;
      *(void *)(v60 + 32) = 0LL;
      *(void *)(v60 + 16) = 0LL;
    }

    goto LABEL_63;
  }

  *(_DWORD *)(v14 + 144) = v57 + 1;
  int v58 = *(void *)(v14 + 136) + 40LL * v57;
  *(_DWORD *)int v58 = 57;
  *(_DWORD *)(v58 + 4) = v20;
  *(_DWORD *)(v58 + 8) = 0;
  *(_DWORD *)(v58 + 12) = v16;
  *(void *)(v58 + 24) = 0LL;
  *(void *)(v58 + 32) = 0LL;
  *(void *)(v58 + 16) = 0LL;
  if (v11 == 57) {
    goto LABEL_60;
  }
LABEL_63:
  unsigned int v61 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v61)
  {
    sub_18131044C(v14, v30, v74, v16, v16, v54, v55, v56);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v61 + 1;
    uint64_t v62 = (int32x2_t *)(*(void *)(v14 + 136) + 40LL * v61);
    v62->i8[0] = v30;
    v62->i16[1] = 0;
    v62->i32[1] = v74;
    v62[1] = vdup_n_s32(v16);
    v62->i8[1] = 0;
    v62[3] = 0LL;
    v62[4] = 0LL;
    v62[2] = 0LL;
  }

  uint64_t v63 = *(_DWORD *)(v14 + 144);
  if (*(_BYTE *)(*(void *)v14 + 103LL)) {
    uint64_t v64 = &byte_18C550680;
  }
  else {
    uint64_t v64 = (char *)(*(void *)(v14 + 136) + 40LL * v57);
  }
  *((_DWORD *)v64 + 2) = v63;
  if (*(_DWORD *)(v14 + 148) <= v63)
  {
    sub_18131044C(v14, v31, v18, v32, v16, v54, v55, v56);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v63 + 1;
    int v65 = *(void *)(v14 + 136) + 40LL * v63;
    *(_BYTE *)int v65 = v31;
    *(_WORD *)(v65 + 2) = 0;
    *(_DWORD *)(v65 + 4) = v18;
    *(_DWORD *)(v65 + 8) = v32;
    *(_DWORD *)(v65 + 12) = v16;
    *(_BYTE *)(v65 + 1) = 0;
    *(void *)(v65 + 24) = 0LL;
    *(void *)(v65 + 32) = 0LL;
    *(void *)(v65 + 16) = 0LL;
  }

  uint64_t v66 = sub_181289D04(v13, *(unsigned __int8 **)(v76 + 8), v51, v52, v53, v54, v55, v56);
  if (!v66) {
    uint64_t v66 = *(void *)(*(void *)v13 + 16LL);
  }
  if (!*(_BYTE *)(*(void *)v14 + 103LL))
  {
    uint64_t v67 = *(void *)(v14 + 136) + 40LL * *(int *)(v14 + 144);
    *(_BYTE *)(v67 - 39) = -2;
    *(void *)(v67 - 24) = v66;
  }

  int v68 = *(_DWORD *)(v14 + 144);
  if (v68 >= 1) {
    *(_WORD *)(*(void *)(v14 + 136) + 40LL * (v68 - 1) + 2) = 128;
  }
  uint64_t result = *(void *)(v14 + 24);
  char v70 = -v75;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
  {
    uint64_t result = sub_18131E420(result, v14, v70);
    if (!(_DWORD)v16) {
      goto LABEL_84;
    }
  }

  else
  {
    *(_DWORD *)(*(void *)(result + 80) + 4LL * v70) = v68;
    if (!(_DWORD)v16) {
      goto LABEL_84;
    }
  }

  size_t v71 = *(unsigned __int8 *)(v13 + 31);
  if (v71 <= 7)
  {
    *(_BYTE *)(v13 + 31) = v71 + 1;
    *(_DWORD *)(v13 + 4 * v71 + 224) = v16;
  }

  if (v17) {
    uint64_t result = (uint64_t)sub_181309110((void *)v71, v17);
  }
  if (v62)
  {
    uint64_t v60 = *(_DWORD *)(v32 + 144);
    if (v60 - 1 == v62)
    {
      *(_DWORD *)(v32 + 144) = v62;
    }

    else
    {
      if (*(_BYTE *)(*(void *)v32 + 103LL)) {
        unsigned int v61 = &byte_18C550680;
      }
      else {
        unsigned int v61 = (char *)(*(void *)(v32 + 136) + 40LL * v62);
      }
      *((_DWORD *)v61 + 2) = v60;
    }
  }

  return result;
}

    uint64_t v7 = 0;
    if (a1) {
      goto LABEL_52;
    }
    goto LABEL_35;
  }

  int v17 = *(void *)(v1 + 72);
  if (!v17) {
    goto LABEL_63;
  }
  uint64_t v18 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_62;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v17);
  --qword_18C468B10;
  off_18C4653A8(v17);
  int v17 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v18 = &xmmword_18C465410;
LABEL_62:
    (*v18)(v17);
  }

  int v23 = a1[13];
  if (!v23) {
    goto LABEL_63;
  }
  uint64_t v24 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_62;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v23);
  --qword_18C468B10;
  off_18C4653A8(v23);
  int v23 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v24 = &xmmword_18C465410;
LABEL_62:
    (*v24)(v23);
  }

char *sub_18126BF9C(const char *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return (char *)&unk_189B6D0F0;
  }
  if (statfs(a1, &v9) == -1) {
    goto LABEL_27;
  }
  if ((v9.f_flags & 1) != 0) {
    return (char *)&unk_189B6D0F0;
  }
  if (!(*(_DWORD *)v9.f_fstypename ^ 0x73667061 | v9.f_fstypename[4]))
  {
    uint64_t v3 = 0LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 7562856)
  {
    uint64_t v3 = 1LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 7562869)
  {
    uint64_t v3 = 2LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 1718642273 && *(unsigned __int16 *)&v9.f_fstypename[4] == 115)
  {
    uint64_t v3 = 3LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 1717726579 && *(unsigned __int16 *)&v9.f_fstypename[4] == 115)
  {
    uint64_t v3 = 4LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 7562862)
  {
    uint64_t v3 = 5LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

  if (*(_DWORD *)v9.f_fstypename == 1684170103 && *(_DWORD *)&v9.f_fstypename[3] == 7758180)
  {
    uint64_t v3 = 6LL;
    return (&off_189B6CEA8)[2 * v3 + 1];
  }

LABEL_27:
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (off_18C54FD70(v8, 92LL) == -1
    && (*__error() != 45 && *__error() != 25 || off_18C54FD70(v8, 7LL) == -1))
  {
    return (char *)&unk_189B6D188;
  }

  else
  {
    return (char *)&unk_189B6CF28;
  }

    if (a2 == 4)
    {
      *(_BYTE *)(a1 + 28) = 3;
      v5[4].i8[0] = 3;
      goto LABEL_29;
    }

    unsigned int v15 = dword_18C54FA50 + 2LL;
    __int128 v35 = v15;
    __int128 v36 = 510LL;
    int v16 = *(void *)(a1 + 16);
    int v17 = *(unsigned int *)(v16 + 88);
    if ((_DWORD)v17 == -1)
    {
      int v17 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v16 + 88) = v17;
    }

    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v16 + 33)) {
        goto LABEL_62;
      }
      int v39 = v15;
      uint64_t v40 = 510LL;
      uint64_t v41 = 3;
      uint64_t v18 = sub_1812F3848(v17, (uint64_t)&v39, a1);
      if (v18 < 0)
      {
LABEL_58:
        uint64_t v25 = 0;
        uint64_t v26 = *__error();
        uint64_t v8 = 5LL;
        if (((1LL << v26) & 0x1000000800012010LL) != 0) {
          goto LABEL_63;
        }
        if (v26 == 1)
        {
          uint64_t v25 = 0;
          uint64_t v8 = 3LL;
        }

        else
        {
LABEL_82:
          if ((_DWORD)v26 != 77)
          {
            uint64_t v25 = 0;
            uint64_t v8 = 3850LL;
          }
        }

      __int128 v19 = sub_1812F7DF8(a1, 3, v8 + 120, a3);
      if (!(_DWORD)v19)
      {
        *((_WORD *)v4 + 10) |= v29;
        if (a3 >= 1)
        {
          if (v10 <= v8 + 1) {
            int v20 = v8 + 1;
          }
          else {
            int v20 = v10;
          }
          memset((void *)(v5 + 4LL * v8 + 128), 255, 4LL * (v20 + ~v8) + 4);
        }

        __int16 v12 = 0LL;
LABEL_59:
        uint64_t v25 = (int)v14;
        do
        {
          uint64_t v26 = *(void *)(v5 + 56 + 8 * v25);
          if (v26) {
            xmmword_18C465410(v26);
          }
          --v25;
        }

        while (v25 > v8);
        return v12;
      }

    *((void *)a1 + 3) = 0LL;
    *a1 = 1;
    uint64_t v7 = *((_DWORD *)a1 + 20);
LABEL_28:
    uint64_t result = sub_181308FB8(*((_DWORD **)a1 + 4), v7, (uint64_t *)a1 + 17);
    if ((_DWORD)result)
    {
      *a1 = 1;
      return result;
    }

    a1[84] = 0;
    int v2 = *((void *)a1 + 17);
    a1[85] = *(_BYTE *)(v2 + 1);
    goto LABEL_31;
  }

  int v2 = *((void *)a1 + 17);
  if (a1[84])
  {
    uint64_t v3 = *(void *)(v2 + 112);
    if ((*(_WORD *)(v3 + 52) & 0x20) != 0) {
      goto LABEL_5;
    }
LABEL_4:
    sub_1812F9F44(v3);
    while (1)
    {
      uint64_t v5 = a1[84] - 1;
      a1[84] = v5;
      if (!v5) {
        break;
      }
      uint64_t v3 = *(void *)(*(void *)&a1[8 * v5 + 144] + 112LL);
      if ((*(_WORD *)(v3 + 52) & 0x20) == 0) {
        goto LABEL_4;
      }
LABEL_5:
      uint64_t v4 = *(void *)(v3 + 40);
      --*(_DWORD *)(v4 + 152);
      *(void *)(v3 + 32) = *(void *)(v4 + 168);
      *(void *)(v4 + 168) = v3;
      (*(void (**)(void, void, void))(**(void **)(v4 + 72) + 144LL))( *(void *)(v4 + 72),  *(void *)(v4 + 200) * (*(_DWORD *)(v3 + 48) - 1),  *(void *)(v3 + 8));
    }

    int v2 = *((void *)a1 + 18);
    *((void *)a1 + 17) = v2;
    goto LABEL_10;
  }

      *(_WORD *)(a1 + 36) = 0;
      return 2LL;
    }

    if (!*v6) {
      break;
    }
LABEL_33:
    ++v6;
  }

  int v11 = 0x20000000;
LABEL_37:
  *(_BYTE *)a2 = -86;
  *(_DWORD *)(a2 + 4) = v11 | v5;
  return 1LL;
}

  *(_WORD *)(a1 + 52) = v6 | 4;
  else {
    uint64_t v4 = sub_1812FAFE4(a1);
  }
  uint64_t v14 = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(v2 + 32) < v14) {
    *(_DWORD *)(v2 + 32) = v14;
  }
  return v4;
}

  uint64_t result = (void *)sub_1812F2264((uint64_t)v10, v18);
  int v22 = result;
  if (!result) {
    goto LABEL_3;
  }
LABEL_28:
  uint64_t v63 = v16;
  bzero(v22, v18);
  *int v22 = v11;
  int v23 = (unsigned __int8 *)&v22[2 * v65 + 8];
  v22[1] = *(void *)(v11 + 72);
  v22[2] = v23;
  uint64_t v24 = *(unsigned __int8 *)(v12 + 302);
  if (v24 > 3 || v24 == 2)
  {
    uint64_t v60 = *(void *)v12 ? sub_1812F2264(*(void *)v12, 0x20uLL) : sub_18126F0AC(32LL);
    if (v60)
    {
      *(_OWORD *)uint64_t v60 = 0u;
      *(_OWORD *)(v60 + 16) = 0u;
      *(void *)uint64_t v60 = v23;
      *(_OWORD *)(v60 + 8) = *(_OWORD *)a3;
      *(void *)(v60 + 24) = *(void *)(v12 + 408);
      *(void *)(v12 + 408) = v60;
    }
  }

  memcpy(v23, *(const void **)a3, *(unsigned int *)(a3 + 8));
  v23[*(unsigned int *)(a3 + 8)] = 0;
  int v30 = *v23;
  if ((char)byte_1813C6558[*v23] < 0)
  {
    int v31 = 0LL;
    if (v30 == 91) {
      int v30 = 93;
    }
    for (uint64_t i = 1; ; ++i)
    {
      __int128 v33 = i;
      __int128 v34 = v23[i];
      if (v34 == v30)
      {
        ++i;
        LOBYTE(v34) = v30;
        if (v23[v33 + 1] != v30) {
          break;
        }
      }

      v23[v31++] = v34;
    }

    v23[v31] = 0;
  }

  __int128 v35 = *v17;
  *((_DWORD *)v22 + 10) = v65;
  if (a2)
  {
    if (v65 >= 1)
    {
      __int128 v36 = 0LL;
      uint64_t v37 = *(__int16 *)(v11 + 54);
      uint64_t v10 = (void *)v66;
      while (1)
      {
        if (v37 < 1)
        {
          unsigned int v61 = 0;
          uint64_t v10 = (void *)v66;
LABEL_89:
          sub_1812DC47C( v12,  "unknown column %s in foreign key definition",  v25,  v26,  v65,  v27,  v28,  v29,  a2[3 * v61 + 2]);
LABEL_90:
          uint64_t result = sub_1812F20DC(v10, v22);
          goto LABEL_3;
        }

        uint64_t v38 = 0LL;
        int v39 = a2[3 * v36 + 2];
LABEL_45:
        for (uint64_t j = 0LL; ; ++j)
        {
          uint64_t v25 = *(unsigned __int8 *)(*(void *)(*(void *)(v11 + 8) + 16 * v38) + j);
          uint64_t v26 = *(unsigned __int8 *)(v39 + j);
          if ((_DWORD)v25 == (_DWORD)v26) {
            break;
          }
          uint64_t v25 = byte_1813C6343[v25];
          uint64_t v26 = byte_1813C6343[v26];
          if ((_DWORD)v25 != (_DWORD)v26)
          {
            if (++v38 != v37) {
              goto LABEL_45;
            }
            unsigned int v61 = v36;
            goto LABEL_89;
          }

    int v16 = sub_1813BCFF4(a1, a2, (uint64_t)&v69, a4, a5);
    goto LABEL_28;
  }

  uint64_t v38 = "sqlite_stat1";
  int v39 = v77;
  while (2)
  {
    uint64_t v40 = *v39;
    uint64_t v41 = *(unsigned __int8 *)v38;
    if ((_DWORD)v40 != (_DWORD)v41)
    {
      if (byte_1813C6343[v40] != byte_1813C6343[v41]) {
        goto LABEL_85;
      }
      goto LABEL_80;
    }

    if (*v39)
    {
LABEL_80:
      ++v39;
      ++v38;
      continue;
    }

    break;
  }

  int v28 = sub_1813BC9E8((uint64_t)a1, (uint64_t)&v69);
  if (!(_DWORD)v28)
  {
    __int128 v19 = 0;
    DWORD2(v73) = 1;
    goto LABEL_71;
  }

  uint64_t v14 = v7[3];
  if (!v14) {
    goto LABEL_34;
  }
  unsigned int v15 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_33;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v14);
  --qword_18C468B10;
  off_18C4653A8(v14);
  uint64_t v14 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v15 = &xmmword_18C465410;
LABEL_33:
    (*v15)(v14);
  }

      v5 += v4;
    }

    while (v5 < *(unsigned __int16 *)(v1 + 32));
  }

  uint64_t v8 = *(void *)(v1 + 40);
  if (v8)
  {
    statfs v9 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v8);
      --qword_18C468B10;
      off_18C4653A8(v8);
      uint64_t v8 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_43;
      }
      statfs v9 = &xmmword_18C465410;
    }

    (*v9)(v8);
  }

  int v13 = *(void *)(*(void *)(a1 + 16) + 16LL);
  if (v13) {
    xmmword_18C465410(v13);
  }
LABEL_29:
  *a2 = v5;
  return v4;
}

  if (!a4)
  {
    if (!a3) {
      return v10;
    }
LABEL_39:
    LODWORD(v15) = *(_DWORD *)a3;
    if (*(int *)a3 >= 1)
    {
LABEL_40:
      uint64_t v25 = 0LL;
      uint64_t v26 = 1LL;
      do
      {
        char v27 = (void *)a3[v26];
        if (v27)
        {
          sub_1812F20DC((void *)v12, v27);
          LODWORD(v15) = *(_DWORD *)a3;
        }

        ++v25;
        v26 += 2LL;
      }

      while (v25 < (int)v15);
    }

    if (a3[v13]) {
      return 0LL;
    }
  }

  if (a2)
  {
    for (uint64_t i = &v14[(v13 + 1)]; ; ++i)
    {
      uint64_t v24 = *i;
      uint64_t v25 = *a2;
      if ((_DWORD)v24 == (_DWORD)v25)
      {
        if (!*i) {
          return 1LL;
        }
      }

      else if (byte_1813C6343[v24] != byte_1813C6343[v25])
      {
        return 0LL;
      }

      ++a2;
    }
  }

  return 1LL;
}

      uint64_t v18 = 0LL;
LABEL_28:
      v17 |= v18;
      if (++v16 >= v15) {
        goto LABEL_47;
      }
    }
  }

  __int16 v12 = *(_WORD *)(v7 + 20);
  if ((v12 & 8) != 0)
  {
    int v13 = *(double *)v7;
    goto LABEL_35;
  }

  if ((v12 & 0x24) == 0)
  {
    if ((v12 & 0x12) != 0)
    {
      int v13 = sub_181303DB8(v7);
      goto LABEL_35;
    }

        uint64_t v18 = 4;
LABEL_28:
        LODWORD(v12) = v2;
        while (1)
        {
          do
          {
            __int16 v12 = (v12 + 1);
            __int128 v19 = *(unsigned __int8 *)(v4 + v12);
          }

          while ((unint64_t)(v19 - 58) > 0xFFFFFFFFFFFFFFF5LL);
          if ((_DWORD)v19 != 46) {
            break;
          }
          int v20 = v18 == 5;
          uint64_t v18 = 5;
          if (v20) {
            goto LABEL_33;
          }
        }

        uint64_t v21 = v19 & 0xFFFFFFDF;
        int v22 = v12 - 1;
        int v23 = *(unsigned __int8 *)(v4 + (v12 - 1));
        uint64_t v24 = *(char *)(v4 + (v12 - 1)) < 48;
        if (v21 == 69)
        {
          if ((char)v23 <= 47)
          {
            if (v23 != 46
              || (int)v12 - 2 < v2
              || (unint64_t)*(unsigned __int8 *)(v4 + (v12 - 2)) - 58 < 0xFFFFFFFFFFFFFFF6LL)
            {
              goto LABEL_33;
            }

            *((_BYTE *)a1 + 53) = 1;
            uint64_t v8 = 64;
          }

          uint64_t v25 = *(unsigned __int8 *)(v4 + (v12 + 1));
          if (v25 == 45 || v25 == 43)
          {
            uint64_t v25 = *(unsigned __int8 *)(v4 + (v12 + 2));
            LODWORD(v12) = v12 + 1;
          }

          do
          {
            __int16 v12 = (v12 + 1);
            uint64_t v26 = *(unsigned __int8 *)(v4 + v12);
          }

          while ((unint64_t)(v26 - 58) > 0xFFFFFFFFFFFFFFF5LL);
          if ((_DWORD)v26 == 46) {
            goto LABEL_33;
          }
          int v22 = v12 - 1;
          int v23 = *(unsigned __int8 *)(v4 + (v12 - 1));
          uint64_t v24 = *(char *)(v4 + (v12 - 1)) < 48;
          if ((v26 & 0xFFFFFFDF) == 0x45)
          {
            if ((char)v23 <= 47
              && v23 == 46
              && (int)v12 - 2 >= v2
              && (unint64_t)*(unsigned __int8 *)(v4 + (v12 - 2)) - 58 >= 0xFFFFFFFFFFFFFFF6LL)
            {
              *((_BYTE *)a1 + 53) = 1;
            }

            goto LABEL_33;
          }

          LOWORD(v18) = 5;
        }

        if (!v24) {
          goto LABEL_184;
        }
        if (v23 != 46
          || v22 - 1 < v2
          || (unint64_t)*(unsigned __int8 *)(v4 + (v22 - 1)) - 58 < 0xFFFFFFFFFFFFFFF6LL)
        {
LABEL_33:
          a1[17] = v12;
          return 0xFFFFFFFFLL;
        }

        *((_BYTE *)a1 + 53) = 1;
        v8 |= 0x40u;
LABEL_184:
        int v31 = v12 - v2;
        uint64_t v76 = *a1;
        if (v76 >= a1[1])
        {
          char v50 = v18 | (v8 << 8);
LABEL_188:
          sub_18135A184(a1, v50, v31, v4 + v2);
        }

        else
        {
          uint64_t v77 = *((void *)a1 + 1) + 16 * v76;
          *(_BYTE *)uint64_t v77 = v18;
          *(_BYTE *)(v77 + 1) = v8;
          *(_DWORD *)(v77 + 4) = v31;
          *(void *)(v77 + 8) = v5;
LABEL_186:
          ++*a1;
        }

        return v12;
      case 0x2E:
        uint64_t v18 = 5;
        goto LABEL_173;
      case 0x3A:
        a1[17] = v2;
        return 4294967291LL;
      case 0x5B:
        __int128 v34 = *a1;
        if (v34 >= a1[1])
        {
          __int128 v36 = sub_18135A184(a1, 7, 0, 0LL);
        }

        else
        {
          __int128 v35 = *((void *)a1 + 1) + 16 * v34;
          *(_WORD *)__int128 v35 = 7;
          *(_DWORD *)(v35 + 4) = 0;
          *(void *)(v35 + 8) = 0LL;
          __int128 v36 = (*a1)++;
        }

        if ((v36 & 0x80000000) != 0) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v51 = (unsigned __int16)++*((_WORD *)a1 + 24);
        if (v51 >= 0x321) {
          goto LABEL_215;
        }
        *(void *)(*((void *)a1 + 1) + 16LL * v36 + 8) = 0LL;
        int v2 = (v2 + 1);
        while (2)
        {
          int v52 = sub_181358F20(a1, v2);
          __int16 v12 = v52;
          if ((int)v52 < 1)
          {
            if ((_DWORD)v52 == -1) {
              return v12;
            }
            if ((_DWORD)v52 != -3) {
              goto LABEL_215;
            }
            LODWORD(v12) = a1[17];
            if (*a1 != v36 + 1) {
              *((_BYTE *)a1 + 53) = 1;
            }
          }

          else
          {
            BOOL v53 = *(unsigned __int8 *)(v4 + v52);
            if ((_DWORD)v53 == 44)
            {
LABEL_124:
              int v2 = (v12 + 1);
              continue;
            }

            if ((_DWORD)v53 != 93)
            {
              if (!byte_1813CA934[v53]) {
                goto LABEL_132;
              }
              do
              {
                __int16 v12 = (v12 + 1);
                BOOL v54 = *(unsigned __int8 *)(v4 + v12);
              }

              while (byte_1813CA934[v54]);
              if ((_DWORD)v54 == 44) {
                goto LABEL_124;
              }
              if ((_DWORD)v54 != 93)
              {
LABEL_132:
                unsigned int v55 = sub_181358F20(a1, v12);
                if (v55 == -4)
                {
                  LODWORD(v12) = a1[17];
                  goto LABEL_124;
                }

                if (v55 != -3) {
                  goto LABEL_33;
                }
                LODWORD(v12) = a1[17];
              }
            }
          }

          break;
        }

        *(_DWORD *)(*((void *)a1 + 1) + 16LL * v36 + 4) = *a1 + ~v36;
        --*((_WORD *)a1 + 24);
        return (v12 + 1);
      case 0x5D:
        a1[17] = v2;
        return 4294967293LL;
      case 0x66:
        __int16 v12 = (v2 + 5);
        uint64_t v37 = a1;
        uint64_t v38 = 3;
        goto LABEL_191;
      case 0x6E:
        __int16 v12 = (v2 + 4);
        uint64_t v37 = a1;
        uint64_t v38 = 1;
        goto LABEL_191;
      case 0x74:
        __int16 v12 = (v2 + 4);
        uint64_t v37 = a1;
        uint64_t v38 = 2;
LABEL_191:
        sub_18135A0F0(v37, v38, 0, 0LL);
        return v12;
      case 0x7B:
        uint64_t v47 = *a1;
        if (v47 >= a1[1])
        {
          char v49 = sub_18135A184(a1, 8, 0, 0LL);
        }

        else
        {
          int v48 = *((void *)a1 + 1) + 16 * v47;
          *(_WORD *)int v48 = 8;
          *(_DWORD *)(v48 + 4) = 0;
          *(void *)(v48 + 8) = 0LL;
          char v49 = (*a1)++;
        }

        if ((v49 & 0x80000000) != 0) {
          return 0xFFFFFFFFLL;
        }
        int v56 = (unsigned __int16)++*((_WORD *)a1 + 24);
        if (v56 > 0x320) {
          goto LABEL_215;
        }
        uint64_t v84 = v49;
        while (1)
        {
LABEL_138:
          LODWORD(v57) = v2 + 1;
          int v58 = *a1;
          v59 = sub_181358F20(a1, (v2 + 1));
          uint64_t v60 = v59;
          if ((int)v59 <= 0)
          {
            if ((_DWORD)v59 == -2)
            {
              LODWORD(v2) = a1[17];
              if (*a1 != v84 + 1) {
                *((_BYTE *)a1 + 53) = 1;
              }
              goto LABEL_222;
            }

            unsigned int v61 = sub_181359BE4(v4 + v57);
            int v57 = (v61 + v57);
            uint64_t v62 = *(unsigned __int8 *)(v4 + v57);
            if ((byte_1813C6558[v62] & 0x42) == 0
              && ((_DWORD)v62 != 92
               || *(_BYTE *)(v4 + (v57 + 1)) != 117
               || !sub_18135A130((unsigned __int8 *)(v4 + (v57 + 2)))))
            {
              if ((_DWORD)v60 == -1) {
                return 0xFFFFFFFFLL;
              }
LABEL_219:
              a1[17] = v57;
              return 0xFFFFFFFFLL;
            }

            uint64_t v63 = 0;
            uint64_t v85 = v61;
            uint64_t v64 = v61 + v2;
            while (1)
            {
              int v65 = (unsigned __int8 *)(v4 + v64 + v63 + 2);
              uint64_t v66 = *v65;
              if ((byte_1813C6558[v66] & 0x46) == 0 || sub_181359BE4((uint64_t)v65))
              {
                if ((_DWORD)v66 != 92) {
                  break;
                }
                if (*(_BYTE *)(v4 + v64 + v63 + 3) != 117) {
                  break;
                }
                uint64_t v67 = (unsigned __int8 *)(v4 + v64 + v63 + 4);
                if ((byte_1813C6558[*v67] & 8) == 0
                  || (byte_1813C6558[v67[1]] & 8) == 0
                  || (byte_1813C6558[v67[2]] & 8) == 0
                  || (byte_1813C6558[v67[3]] & 8) == 0)
                {
                  break;
                }
              }

              ++v63;
            }

            sub_18135A0F0(a1, 262, v63 + 1, v4 + v57);
            *((_BYTE *)a1 + 53) = 1;
            uint64_t v60 = (v85 + v2 + v63 + 2);
          }

          if (*((_BYTE *)a1 + 51)) {
            return 0xFFFFFFFFLL;
          }
          int v68 = *((void *)a1 + 1);
          if (*(_BYTE *)(v68 + 16 * v58) != 6) {
            goto LABEL_219;
          }
          *(_BYTE *)(v68 + 16 * v58 + 1) |= 0x20u;
          int v69 = *(unsigned __int8 *)(v4 + v60);
          if (v69 != 58)
          {
            if (!byte_1813CA934[v69]) {
              goto LABEL_161;
            }
            do
            {
              uint64_t v60 = (v60 + 1);
              char v70 = *(unsigned __int8 *)(v4 + v60);
            }

            while (byte_1813CA934[v70]);
            if ((_DWORD)v70 != 58)
            {
LABEL_161:
              size_t v71 = sub_181358F20(a1, v60);
              if ((_DWORD)v71 != -5)
              {
                __int16 v12 = v71;
                if ((_DWORD)v71 == -1) {
                  return v12;
                }
                a1[17] = v60;
                return 0xFFFFFFFFLL;
              }

              LODWORD(v60) = a1[17];
            }
          }

          LODWORD(v12) = v60 + 1;
          size_t v72 = sub_181358F20(a1, (v60 + 1));
          int v2 = v72;
          if ((int)v72 <= 0)
          {
            if ((_DWORD)v72 != -1) {
              goto LABEL_33;
            }
            return 0xFFFFFFFFLL;
          }

          __int16 v73 = *(unsigned __int8 *)(v4 + v72);
          if ((_DWORD)v73 != 44)
          {
            if ((_DWORD)v73 == 125) {
              goto LABEL_222;
            }
            if (!byte_1813CA934[v73]) {
              goto LABEL_170;
            }
            do
            {
              int v2 = (v2 + 1);
              int v74 = *(unsigned __int8 *)(v4 + v2);
            }

            while (byte_1813CA934[v74]);
            if ((_DWORD)v74 != 44) {
              break;
            }
          }
        }

        if ((_DWORD)v74 == 125)
        {
LABEL_222:
          *(_DWORD *)(*((void *)a1 + 1) + 16LL * v84 + 4) = *a1 + ~v84;
          --*((_WORD *)a1 + 24);
          return (v2 + 1);
        }

      if ((_DWORD)v13 == v14) {
        break;
      }
      if (v13 < v14)
      {
        if ((_DWORD)v13)
        {
          int v28 = 0LL;
          int v13 = v13;
          do
          {
            int v29 = v13;
            v6[++v28] = v13 | 0x80;
            uint64_t v18 = v13 > 0x7F;
            v13 >>= 7;
          }

          while (v18);
          *uint64_t v6 = 1;
          int v30 = &v6[v28];
          *int v30 = v29 & 0x7F;
          uint64_t v6 = v30 + 1;
          LODWORD(v13) = v28 + 1;
          int v11 = v9[v28];
        }

        int v31 = &v7[(int)v13];
        uint64_t v7 = v31;
        if (v11 >= 2)
        {
          uint64_t v7 = v31;
          do
          {
            int v32 = v11 & 0x80;
            __int128 v33 = *++v7;
            LOBYTE(v11) = v33;
          }

          while (v33 & 0xFE | v32);
        }

        __int128 v34 = (int)v7 - (int)v31;
        memcpy(v6, v31, v34);
        v6 += v34;
        goto LABEL_2;
      }

      if (v14)
      {
        unsigned int v15 = 0LL;
        int v16 = v14;
        do
        {
          int v17 = v16;
          v6[++v15] = v16 | 0x80;
          uint64_t v18 = v16 > 0x7F;
          v16 >>= 7;
        }

        while (v18);
        *uint64_t v6 = 1;
        __int128 v19 = &v6[v15];
        *__int128 v19 = v17 & 0x7F;
        uint64_t v6 = v19 + 1;
        int v20 = v15 + 1;
        __int16 v12 = v8[v15 + 1];
      }

      else
      {
        int v20 = 0;
      }

      uint64_t v21 = (unsigned __int8 *)&v8[v20];
      uint64_t v8 = (char *)v21;
      if (v12 >= 2)
      {
        uint64_t v8 = (char *)v21;
        do
        {
          int v22 = v12 & 0x80;
          int v23 = *++v8;
          LOBYTE(v12) = v23;
        }

        while (v23 & 0xFE | v22);
      }

      uint64_t v10 = (int)v8 - (int)v21;
      memcpy(v6, v21, v10);
      v6 += v10;
    }

    if ((_DWORD)v13)
    {
      uint64_t v24 = 0LL;
      int v13 = v13;
      do
      {
        uint64_t v25 = v13;
        v6[++v24] = v13 | 0x80;
        uint64_t v18 = v13 > 0x7F;
        v13 >>= 7;
      }

      while (v18);
      *uint64_t v6 = 1;
      uint64_t v26 = &v6[v24];
      *uint64_t v26 = v25 & 0x7F;
      uint64_t v6 = v26 + 1;
      char v27 = v24 + 1;
    }

    else
    {
      char v27 = 0;
    }

    __int128 v35 = &v8[v27];
    v7 += v27 + (uint64_t)(int)sub_181363B00((char *)&v7[v27], (unint64_t *)&v52);
    __int128 v36 = v52;
    uint64_t v8 = &v35[(int)sub_181363B00(v35, (unint64_t *)&v52)];
    if (v36 >= 2)
    {
      uint64_t v37 = v52;
      if (v52 >= 2)
      {
        uint64_t v38 = 0LL;
        do
        {
          int v39 = v36;
          if (v36 >= v37) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v36;
          }
          uint64_t v41 = v40 - v38;
          do
          {
            int v42 = v41;
            *v6++ = v41 | 0x80;
            uint64_t v18 = v41 > 0x7F;
            v41 >>= 7;
          }

          while (v18);
          *(v6 - 1) = v42 & 0x7F;
          if (v36 == v37)
          {
            int v43 = *v7;
            if (v43 >= 2)
            {
              if ((v43 & 0x80) != 0)
              {
                int v43 = v43 & 0x7F | (v7[1] << 7);
                if ((char)v7[1] < 0)
                {
                  int v43 = v43 & 0x3FFF | (v7[2] << 14);
                  if ((char)v7[2] < 0)
                  {
                    int v43 = v43 & 0x1FFFFF | (v7[3] << 21);
                    if ((char)v7[3] < 0)
                    {
                      int v43 = v43 & 0xFFFFFFF | ((v7[4] & 7) << 28);
                      unsigned int v45 = 5LL;
                    }

                    else
                    {
                      unsigned int v45 = 4LL;
                    }
                  }

                  else
                  {
                    unsigned int v45 = 3LL;
                  }
                }

                else
                {
                  unsigned int v45 = 2LL;
                }
              }

              else
              {
                unsigned int v45 = 1LL;
              }

              v7 += v45;
              __int128 v36 = v36 + v43 - 2;
            }

            else
            {
              __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
            }

            char v49 = *v8;
            if (v49 >= 2)
            {
              if ((v49 & 0x80) != 0)
              {
                char v49 = v49 & 0x7F | (v8[1] << 7);
                if (v8[1] < 0)
                {
                  char v49 = v49 & 0x3FFF | (v8[2] << 14);
                  if (v8[2] < 0)
                  {
                    char v49 = v49 & 0x1FFFFF | (v8[3] << 21);
                    if (v8[3] < 0)
                    {
                      char v49 = v49 & 0xFFFFFFF | ((v8[4] & 7) << 28);
                      char v50 = 5LL;
                    }

                    else
                    {
                      char v50 = 4LL;
                    }
                  }

                  else
                  {
                    char v50 = 3LL;
                  }
                }

                else
                {
                  char v50 = 2LL;
                }
              }

              else
              {
                char v50 = 1LL;
              }

              v8 += v50;
              uint64_t v37 = v39 + v49 - 2;
            }

            else
            {
              uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          else if (v36 >= v37)
          {
            char v46 = *v8;
            if (v46 >= 2)
            {
              if ((v46 & 0x80) != 0)
              {
                char v46 = v46 & 0x7F | (v8[1] << 7);
                if (v8[1] < 0)
                {
                  char v46 = v46 & 0x3FFF | (v8[2] << 14);
                  if (v8[2] < 0)
                  {
                    char v46 = v46 & 0x1FFFFF | (v8[3] << 21);
                    if (v8[3] < 0)
                    {
                      char v46 = v46 & 0xFFFFFFF | ((v8[4] & 7) << 28);
                      int v48 = 5LL;
                    }

                    else
                    {
                      int v48 = 4LL;
                    }
                  }

                  else
                  {
                    int v48 = 3LL;
                  }
                }

                else
                {
                  int v48 = 2LL;
                }
              }

              else
              {
                int v48 = 1LL;
              }

              v8 += v48;
              uint64_t v37 = v37 + v46 - 2;
            }

            else
            {
              uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          else
          {
            uint64_t v44 = *v7;
            if (v44 >= 2)
            {
              if ((v44 & 0x80) != 0)
              {
                uint64_t v44 = v44 & 0x7F | (v7[1] << 7);
                if ((char)v7[1] < 0)
                {
                  uint64_t v44 = v44 & 0x3FFF | (v7[2] << 14);
                  if ((char)v7[2] < 0)
                  {
                    uint64_t v44 = v44 & 0x1FFFFF | (v7[3] << 21);
                    if ((char)v7[3] < 0)
                    {
                      uint64_t v44 = v44 & 0xFFFFFFF | ((v7[4] & 7) << 28);
                      uint64_t v47 = 5LL;
                    }

                    else
                    {
                      uint64_t v47 = 4LL;
                    }
                  }

                  else
                  {
                    uint64_t v47 = 3LL;
                  }
                }

                else
                {
                  uint64_t v47 = 2LL;
                }
              }

              else
              {
                uint64_t v47 = 1LL;
              }

              v7 += v47;
              __int128 v36 = v36 + v44 - 2;
            }

            else
            {
              __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          uint64_t v38 = v40 - 2;
        }

        while (v36 != 0x7FFFFFFFFFFFFFFFLL || v37 != 0x7FFFFFFFFFFFFFFFLL);
        continue;
      }
    }

    break;
  }

      sub_18138D90C(*(v3 - 8), *((_DWORD *)v3 - 14));
      sub_18138DA78((int *)*(v3 - 1));
      uint64_t v10 = *(v3 - 2);
      if (v10)
      {
        int v11 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
          --qword_18C468B10;
          off_18C4653A8(v10);
          uint64_t v10 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_5;
          }
          int v11 = &xmmword_18C465410;
        }

        (*v11)(v10);
      }

  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  __int16 v12 = *(void *)(a2 + 96);
  if (!v12) {
    goto LABEL_34;
  }
  int v13 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_33;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v12);
  __int16 v12 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v13 = &xmmword_18C465410;
LABEL_33:
    uint64_t result = (*v13)(v12);
  }

          if (++v22 < v5)
          {
            v21 += 8LL;
            v23 += 12;
            if (v9 < 40) {
              continue;
            }
          }

          a2[10] = 2;
          a2[14] = 1;
          if (v9 >= 1)
          {
            int v32 = sqlite3_mprintf("%s", (const char *)v41);
            *((void *)a2 + 6) = v32;
            if (!v32) {
              return 7LL;
            }
          }

          goto LABEL_39;
        }
      }
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0;
    }

    uint64_t v18 = (unsigned __int8 *)(v6 + 12LL * v7 + 4);
    __int128 v19 = v5 - v7;
    do
    {
      int v20 = *v18;
      v18 += 12;
      if (v20 == 64) {
        uint64_t v8 = 1;
      }
      --v19;
    }

    while (v19);
    goto LABEL_12;
  }

  statfs v9 = 0;
  a2[10] = 2;
  a2[14] = 1;
LABEL_39:
  uint64_t result = 0LL;
  if (v9 >= 0) {
    __int128 v34 = v9;
  }
  else {
    __int128 v34 = v9 + 1;
  }
  __int128 v35 = *(uint64_t *)(a1 + 72) >> (v34 >> 1);
  *((double *)a2 + 8) = (double)v35 * 6.0;
  *((void *)a2 + 9) = v35;
  return result;
}

    int v17 = 0;
LABEL_28:
    if (sqlite3_initialize() || (__int128 v19 = (void *)sub_18126F0AC(v17 + 10LL)) == 0LL)
    {
      *(void *)(a1 + 64) = 0LL;
      return 7LL;
    }

    *__int128 v19 = 1LL;
    int v20 = v19 + 1;
    *(void *)(a1 + 64) = v20;
    memcpy(v20, v14, v17 + 1LL);
    uint64_t v14 = *(const void **)(a1 + 64);
    goto LABEL_35;
  }

  ++*((void *)v14 - 1);
  *(void *)(a1 + 64) = v14;
LABEL_35:
  *(_BYTE *)(a1 + 100) = 1;
  *(void *)(a1 + 32) = v14;
  uint64_t v21 = sub_181358F20((unsigned int *)(a1 + 48), 0);
  if (*(_BYTE *)(a1 + 99)) {
    goto LABEL_54;
  }
  int v22 = v21 - 1;
  if (v21 < 1) {
    goto LABEL_54;
  }
  int v23 = (uint64_t)v14 + v21 - 1;
  do
  {
    uint64_t v25 = *(unsigned __int8 *)++v23;
    uint64_t v24 = v25;
    ++v22;
  }

  while (byte_1813CA934[v25]);
  if (v24)
  {
    v22 += sub_181359BE4(v23);
    if (*((_BYTE *)v14 + v22)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 101) = 1;
  }

  if (v22 <= 0)
  {
LABEL_54:
    sub_181359E08(a1 + 48);
    if (*(_BYTE *)(a1 + 99))
    {
      uint64_t v18 = 7LL;
      goto LABEL_66;
    }

    int v29 = *(void *)(*(void *)a1 + 16LL);
    if (v29)
    {
      int v30 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v29);
        --qword_18C468B10;
        off_18C4653A8(v29);
        int v29 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_63;
        }
        int v30 = &xmmword_18C465410;
      }

      (*v30)(v29);
    }

uint64_t sub_18126C1A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (!v16 && (*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    while (1)
    {
      int v11 = off_18C54FDD0(v4, "S", 1uLL);
      if ((v11 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_31;
      }
    }

    if (v11 != 1)
    {
LABEL_31:
      *(_DWORD *)(a1 + 32) = *__error();
      return 778LL;
    }

    if ((*(_BYTE *)(a1 + 128) & 2) != 0 && fsync(v4))
    {
      *(_DWORD *)(a1 + 32) = *__error();
      return 1034LL;
    }

    if (off_18C54FD40(v4, &v14))
    {
LABEL_2:
      *(_DWORD *)(a1 + 32) = *__error();
      return 10LL;
    }
  }

  *((void *)&v17 + 1) = v15;
  *(void *)&__int128 v17 = v14;
  uint64_t v6 = qword_18C468CC0;
  if (qword_18C468CC0)
  {
    while ((void)v17 != *(void *)v6 || *((void *)&v17 + 1) != *(void *)(v6 + 8))
    {
      uint64_t v6 = *(void *)(v6 + 64);
      if (!v6) {
        goto LABEL_11;
      }
    }

    ++*(_DWORD *)(v6 + 48);
    goto LABEL_38;
  }

LABEL_11:
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v8 = (_OWORD *)sub_18126F0AC(96LL);
  if (!v8) {
    return 7LL;
  }
  uint64_t v6 = (uint64_t)v8;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *uint64_t v8 = v17;
  v8[1] = 0u;
  if ((_BYTE)word_18C465384)
  {
    uint64_t v9 = sqlite3_initialize();
    if ((_DWORD)v9)
    {
      *(void *)(v6 + 16) = 0LL;
LABEL_18:
      uint64_t v10 = (void (**)(uint64_t))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_23:
        (*v10)(v6);
        return 7LL;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v6);
      --qword_18C468B10;
      off_18C4653A8(v6);
      uint64_t v6 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v10 = (void (**)(uint64_t))&xmmword_18C465410;
        goto LABEL_23;
      }

      return 7LL;
    }

    uint64_t v12 = qword_18C4653F0(v9);
    *(void *)(v6 + 16) = v12;
    if (!v12) {
      goto LABEL_18;
    }
  }

  *(_DWORD *)(v6 + 88) = -1;
  *(_DWORD *)(v6 + 48) = 1;
  uint64_t v13 = qword_18C468CC0;
  *(void *)(v6 + 64) = qword_18C468CC0;
  *(void *)(v6 + 72) = 0LL;
  if (v13) {
    *(void *)(v13 + 72) = v6;
  }
  qword_18C468CC0 = v6;
LABEL_38:
  uint64_t result = 0LL;
  *a2 = v6;
  return result;
}

    uint64_t v7 = (v5 + 7) & 0x7FFFFFF8;
    if ((a2 & 1) == 0) {
      return (v7 + i);
    }
    uint64_t v8 = sub_18129CC6C(*((void *)v3 + 2), a2);
    uint64_t v3 = (unsigned __int8 *)*((void *)v3 + 3);
  }

  uint64_t v7 = 0;
  return (v7 + i);
}

          a1 = (unsigned __int8 *)*((void *)a1 + 2);
          continue;
        }

  if ((v7 & 0x24) != 0)
  {
    uint64_t v8 = (double)*v6;
    if (!a1) {
      return v8;
    }
  }

  else if ((v7 & 0x12) != 0)
  {
    uint64_t v8 = sub_181303DB8((uint64_t)v6);
    if (!a1) {
      return v8;
    }
  }

  else
  {
    uint64_t v8 = 0.0;
    if (!a1) {
      return v8;
    }
  }

    a3 = v8 ^ 1;
    uint64_t v6 = &a1[a4 & 1];
    uint64_t v5 = 2LL;
  }

  uint64_t v9 = &a1[a3];
  if (v6 >= v9) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v10 = *v6;
    if ((byte_1813C6558[*v6] & 1) == 0) {
      break;
    }
    v6 += v5;
    if (v6 >= v9) {
      return 0LL;
    }
  }

  if (v10 == 43 || v10 == 45) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v13 = &v6[v12];
  if (v13 >= v9)
  {
    unsigned int v14 = 0;
    __int128 v19 = 1;
    goto LABEL_65;
  }

  unsigned int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0LL;
  while (1)
  {
    __int128 v17 = *v13;
    uint64_t v16 = (char)v17 + 10 * v16 - 48;
    v13 += v5;
    uint64_t v18 = v16 <= 0x1999999999999997LL || v13 >= v9;
    if (!v18)
    {
      do
      {
        v13 += v5;
        ++v15;
      }

      while (v13 < v9);
    }

    ++v14;
    if (v13 >= v9) {
      goto LABEL_52;
    }
  }

  if ((char)v17 == 46)
  {
    uint64_t result = (result + 1);
    for (v13 += v5; v13 < v9; v13 += v5)
    {
      int v20 = *v13;
      if (v16 < 0x1999999999999998LL)
      {
        uint64_t v16 = (char)v20 + 10 * v16 - 48;
        --v15;
        ++v14;
      }
    }
  }

  if (v13 >= v9)
  {
LABEL_52:
    uint64_t v25 = 0;
    int v23 = 1;
    __int128 v19 = 1;
    goto LABEL_53;
  }

  if ((*v13 | 0x20) != 0x65)
  {
    uint64_t v25 = 0;
    int v23 = 1;
LABEL_114:
    __int128 v19 = 1;
    goto LABEL_117;
  }

  v13 += v5;
  uint64_t result = (result + 1);
  if (v13 >= v9)
  {
    uint64_t v25 = 0;
    __int128 v19 = 0;
    int v23 = 1;
    goto LABEL_53;
  }

  uint64_t v21 = *v13;
  int v22 = &v13[v5];
  if (v21 == 45)
  {
    v13 += v5;
    int v23 = -1;
  }

  else
  {
    int v23 = 1;
  }

  if (v21 == 43)
  {
    uint64_t v13 = v22;
    int v23 = 1;
  }

  if (v13 < v9)
  {
    uint64_t v24 = *v13;
    if ((unint64_t)(v24 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
    {
      uint64_t v25 = (char)v24 - 48;
      for (v13 += v5; v13 < v9; v13 += v5)
      {
        int v56 = *v13;
        int v57 = (char)v56 + 10 * v25 - 48;
        uint64_t v25 = v25 >= 10000 ? 10000 : v57;
      }

      goto LABEL_114;
    }
  }

  uint64_t v25 = 0;
  __int128 v19 = 0;
LABEL_117:
  while (v13 < v9 && (byte_1813C6558[*v13] & 1) != 0)
    v13 += v5;
LABEL_53:
  if (!v16)
  {
LABEL_65:
    int v30 = -0.0;
    if (v10 != 45) {
      int v30 = 0.0;
    }
    goto LABEL_67;
  }

  uint64_t v26 = v15 + v25 * v23;
  if ((int)v26 < 1 || v16 >= 0x1999999999999999LL)
  {
    if ((v26 & 0x80000000) == 0 || v16 % 0xA)
    {
      int v29 = v16;
    }

    else
    {
      int v28 = -v26;
      int v29 = v16;
      do
      {
        v29 /= 0xAuLL;
        --v28;
      }

      while (v28 && v29 == 10 * ((v29 * (unsigned __int128)0x199999999999999AuLL) >> 64));
      uint64_t v26 = -v28;
    }
  }

  else
  {
    do
    {
      int v32 = v26;
      int v29 = 10 * v16;
      --v26;
      if (v32 < 2) {
        break;
      }
      uint64_t v18 = v16 >= 0x28F5C28F5C28F5DLL;
      v16 *= 10LL;
    }

    while (!v18);
  }

  if (v26)
  {
    if (byte_18C46538A)
    {
      __int128 v33 = (double)v29;
      if ((int)v26 <= 0)
      {
        if (v26 > 0xFFFFFF9C)
        {
          char v46 = v26;
        }

        else
        {
          do
          {
            char v46 = v26 + 100;
            __int128 v33 = v33 * 1.0e-100;
            uint64_t v18 = __CFADD__(v26, 199);
            v26 += 100;
          }

          while (!v18);
        }

        if (v46 > -10)
        {
          char v50 = v46;
        }

        else
        {
          do
          {
            char v50 = v46 + 10;
            __int128 v33 = v33 * 1.0e-10;
            uint64_t v18 = __CFADD__(v46, 19);
            v46 += 10;
          }

          while (!v18);
        }

        if (v50 < 0)
        {
          do
          {
            __int128 v33 = v33 * 0.1;
            uint64_t v18 = __CFADD__(v50++, 1);
          }

          while (!v18);
        }
      }

      else
      {
        if (v26 >= 0x64)
        {
          do
          {
            v26 -= 100;
            __int128 v33 = v33 * 1.0e100;
          }

          while (v26 > 0x63);
        }

        if (v26 >= 0xA)
        {
          do
          {
            v26 -= 10;
            __int128 v33 = v33 * 1.0e10;
          }

          while (v26 > 9);
        }

        if (v26)
        {
          __int128 v34 = v26 + 1;
          do
          {
            __int128 v33 = v33 * 10.0;
            --v34;
          }

          while (v34 > 1);
        }
      }

      if (v33 > 1.79769313e308) {
        __int128 v33 = INFINITY;
      }
    }

    else
    {
      __int128 v35 = (double)v29;
      __int128 v36 = (unint64_t)(double)v29;
      uint64_t v37 = -(double)(v36 - v29);
      uint64_t v18 = v29 >= v36;
      uint64_t v38 = v29 - v36;
      if (v18) {
        uint64_t v37 = (double)v38;
      }
      int v58 = v37;
      v59 = (double)v29;
      if ((int)v26 <= 0)
      {
        if (v26 > 0xFFFFFF9C)
        {
          uint64_t v47 = v26;
        }

        else
        {
          do
          {
            uint64_t v47 = v26 + 100;
            *(void *)&int v48 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            int v69 = (v59 - v48) * 9.99999999e-101 + v48 * 1.18108707e-109;
            uint64_t v63 = v48 * 9.99999999e-101
                - (v48 * 9.99999999e-101
                 + v69)
                + v69
                + (v59 - v48) * 1.18108707e-109
                + v58 * 1.0e-100
                + v59 * -1.99918998e-117;
            v59 = v48 * 9.99999999e-101 + v69 + v63;
            char v49 = v48 * 9.99999999e-101 + v69;
            __int128 v35 = v59;
            uint64_t v37 = v63 + v49 - v59;
            int v58 = v37;
            uint64_t v18 = __CFADD__(v26, 199);
            v26 += 100;
          }

          while (!v18);
        }

        if (v47 > -10)
        {
          uint64_t v51 = v47;
        }

        else
        {
          do
          {
            uint64_t v51 = v47 + 10;
            *(void *)&int v52 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            char v70 = (v59 - v52) * 9.99999996e-11 + v52 * 3.99580284e-19;
            uint64_t v64 = v52 * 9.99999996e-11
                - (v52 * 9.99999996e-11
                 + v70)
                + v70
                + (v59 - v52) * 3.99580284e-19
                + v58 * 1.0e-10
                + v59 * -3.64321973e-27;
            v59 = v52 * 9.99999996e-11 + v70 + v64;
            BOOL v53 = v52 * 9.99999996e-11 + v70;
            __int128 v35 = v59;
            uint64_t v37 = v64 + v53 - v59;
            int v58 = v37;
            uint64_t v18 = __CFADD__(v47, 19);
            v47 += 10;
          }

          while (!v18);
        }

        if (v51 < 0)
        {
          do
          {
            *(void *)&BOOL v54 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            size_t v71 = (v59 - v54) * 0.0999999996 + v54 * 3.72529035e-10;
            int v65 = v54 * 0.0999999996
                - (v54 * 0.0999999996
                 + v71)
                + v71
                + (v59 - v54) * 3.72529035e-10
                + v58 * 0.1
                + v59 * -5.55111512e-18;
            v59 = v54 * 0.0999999996 + v71 + v65;
            unsigned int v55 = v54 * 0.0999999996 + v71;
            __int128 v35 = v59;
            uint64_t v37 = v65 + v55 - v59;
            int v58 = v37;
            uint64_t v18 = __CFADD__(v51++, 1);
          }

          while (!v18);
        }
      }

      else
      {
        if (v26 >= 0x64)
        {
          do
          {
            v26 -= 100;
            *(void *)&int v39 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            uint64_t v66 = (v59 - v39) * 9.99999995e99 + v39 * 5.15323793e91;
            uint64_t v60 = v39 * 9.99999995e99
                - (v39 * 9.99999995e99
                 + v66)
                + v66
                + (v59 - v39) * 5.15323793e91
                + v58 * 1.0e100
                + v59 * -1.59028911e83;
            v59 = v39 * 9.99999995e99 + v66 + v60;
            uint64_t v40 = v39 * 9.99999995e99 + v66;
            __int128 v35 = v59;
            uint64_t v37 = v60 + v40 - v59;
            int v58 = v37;
          }

          while (v26 > 0x63);
        }

        if (v26 >= 0xA)
        {
          do
          {
            v26 -= 10;
            *(void *)&uint64_t v41 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            uint64_t v67 = (v59 - v41) * 1.0e10 + v41 * 0.0;
            unsigned int v61 = v41 * 1.0e10 - (v41 * 1.0e10 + v67) + v67 + (v59 - v41) * 0.0 + v58 * 1.0e10 + v59 * 0.0;
            v59 = v41 * 1.0e10 + v67 + v61;
            int v42 = v41 * 1.0e10 + v67;
            __int128 v35 = v59;
            uint64_t v37 = v61 + v42 - v59;
            int v58 = v37;
          }

          while (v26 > 9);
        }

        if (v26)
        {
          int v43 = v26 + 1;
          do
          {
            *(void *)&uint64_t v44 = *(void *)&v35 & 0xFFFFFFFFFC000000LL;
            int v68 = (v59 - v44) * 10.0 + v44 * 0.0;
            uint64_t v62 = v44 * 10.0 - (v44 * 10.0 + v68) + v68 + (v59 - v44) * 0.0 + v58 * 10.0 + v59 * 0.0;
            v59 = v44 * 10.0 + v68 + v62;
            unsigned int v45 = v44 * 10.0 + v68;
            __int128 v35 = v59;
            uint64_t v37 = v62 + v45 - v59;
            int v58 = v37;
            --v43;
          }

          while (v43 > 1);
        }
      }

      __int128 v33 = v35 + v37;
    }
  }

  else
  {
    __int128 v33 = (double)v29;
  }

  *a2 = v33;
  if (v10 == 45)
  {
    int v30 = -v33;
LABEL_67:
    *a2 = v30;
  }

  if (!v19 || v13 != v9 || v14 < 1 || (int)result <= 0)
  {
    if ((int)result > 1)
    {
      int v31 = (_DWORD)result != 3 && v19 == 0;
      if (!v31 && v14 > 0) {
        return 0xFFFFFFFFLL;
      }
    }

    return 0LL;
  }

  return result;
}

  if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
  {
    if (!sub_181303BA0((uint64_t)a1))
    {
      uint64_t v4 = *((_WORD *)a1 + 10);
      goto LABEL_15;
    }

    return 7LL;
  }

    uint64_t v12 = *((_DWORD *)db + 10);
    uint64_t v13 = __OFSUB__(v12, 1);
    unsigned int v14 = (v12 - 1);
    if ((int)v14 < 0 != v13)
    {
LABEL_35:
      int v20 = v14;
    }

    else
    {
      uint64_t v15 = (_BYTE **)(*((void *)db + 4) + 32 * v14);
      do
      {
        uint64_t v16 = *v15;
        if (*v15)
        {
          for (uint64_t i = v9; ; ++i)
          {
            uint64_t v18 = *v16;
            __int128 v19 = *(unsigned __int8 *)i;
            if ((_DWORD)v18 == (_DWORD)v19)
            {
              if (!*v16) {
                goto LABEL_35;
              }
            }

            else if (byte_1813C6343[v18] != byte_1813C6343[v19])
            {
              break;
            }

            ++v16;
          }
        }

        if (!(_DWORD)v14)
        {
          int v22 = v9;
          for (uint64_t j = "main"; ; ++j)
          {
            uint64_t v24 = *(unsigned __int8 *)j;
            uint64_t v25 = *(unsigned __int8 *)v22;
            if ((_DWORD)v24 == (_DWORD)v25)
            {
              if (!*j)
              {
                int v20 = 0;
                if (!piSize) {
                  goto LABEL_38;
                }
LABEL_37:
                *piSize = -1LL;
                goto LABEL_38;
              }
            }

            else if (byte_1813C6343[v24] != byte_1813C6343[v25])
            {
              break;
            }

            ++v22;
          }
        }

        v15 -= 4;
        int v20 = -1;
        uint64_t v21 = (int)v14 <= 0;
        LODWORD(v14) = v14 - 1;
      }

      while (!v21);
    }

    if (!piSize) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }

  if (v9) {
    goto LABEL_11;
  }
LABEL_48:
  int v20 = -1;
  if (piSize) {
    goto LABEL_37;
  }
LABEL_38:
  if ((v20 & 0x80000000) != 0) {
    return 0LL;
  }
  if (!v11)
  {
    int v31 = *(void *)(*((void *)db + 4) + 32LL * v20 + 8);
    if (!v31) {
      return 0LL;
    }
    int v32 = *(int *)(*(void *)(v31 + 8) + 52LL);
    __int128 v33 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %w.page_count", v9);
    if (!v33) {
      return 0LL;
    }
    __int128 v35 = v33;
    __int128 v36 = sub_18126DFE0((uint64_t)db, v33, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v34);
    uint64_t v37 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v35);
      --qword_18C468B10;
      off_18C4653A8(v35);
      __int128 v35 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_58;
      }
      uint64_t v37 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v37)(v35);
LABEL_58:
    if (v36) {
      return 0LL;
    }
    if (sqlite3_step(pStmt) != 100) {
      goto LABEL_64;
    }
    uint64_t v38 = sqlite3_column_int64(pStmt, 0) * v32;
    if (piSize) {
      *piSize = v38;
    }
    if ((v7 & 1) != 0 || sqlite3_initialize())
    {
LABEL_64:
      uint64_t v26 = 0LL;
LABEL_65:
      sqlite3_finalize(pStmt);
      return v26;
    }

    uint64_t v26 = (unsigned __int8 *)sub_18126F0AC(v38);
    if (!v26) {
      goto LABEL_65;
    }
    int v42 = sqlite3_column_int(pStmt, 0);
    if (v42 < 1) {
      goto LABEL_65;
    }
    int v43 = **(void **)(v31 + 8);
    uint64_t v44 = (v42 + 1);
    unsigned int v45 = 1LL;
    char v46 = v26;
    while (1)
    {
      char v50 = 0LL;
      bzero(v46, v32);
      uint64_t v47 = v50;
      if (v50) {
        goto LABEL_84;
      }
LABEL_79:
      ++v45;
      v46 += v32;
      if (v44 == v45) {
        goto LABEL_65;
      }
    }

    uint64_t v47 = v50;
    memcpy(v46, *(const void **)(v50 + 8), v32);
LABEL_84:
    if ((*(_WORD *)(v47 + 52) & 0x20) != 0)
    {
      int v48 = *(void *)(v47 + 40);
      --*(_DWORD *)(v48 + 152);
      *(void *)(v47 + 32) = *(void *)(v48 + 168);
      *(void *)(v48 + 168) = v47;
      (*(void (**)(void, void, void))(**(void **)(v48 + 72) + 144LL))( *(void *)(v48 + 72),  *(void *)(v48 + 200) * (*(_DWORD *)(v47 + 48) - 1),  *(void *)(v47 + 8));
    }

    else
    {
      sub_1812F9F44(v47);
    }

    goto LABEL_79;
  }

  int v28 = *(void *)(v11 + 8);
  if (piSize) {
    *piSize = *(void *)v28;
  }
  if ((v7 & 1) != 0) {
    return *(unsigned __int8 **)(v28 + 24);
  }
  int v29 = *(void *)v28;
  if (sqlite3_initialize()) {
    return 0LL;
  }
  int v30 = (unsigned __int8 *)sub_18126F0AC(v29);
  uint64_t v26 = v30;
  if (v30) {
    memcpy(v30, *(const void **)(v28 + 24), *(void *)v28);
  }
  return v26;
}

    unsigned int v14 = *(_WORD *)(a1 + 262);
    goto LABEL_12;
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = (v11 >> 2) & 3;
  if (!v13) {
    goto LABEL_11;
  }
LABEL_6:
  unsigned int v14 = (4 * v13) ^ 0xC;
LABEL_12:
  *(_WORD *)(a1 + 260) = v14;
  uint64_t v16 = *(void *)(*(void *)a1 + 24LL);
  if (v16) {
    xmmword_18C465410(v16);
  }
  return v12;
}

      ++v8;
    }

    if (*v8) {
      goto LABEL_11;
    }
    if (!v7) {
      goto LABEL_2;
    }
    qword_18C467CB8[9 * i + 2] = v7[2];
    uint64_t v5 = v7 + 2;
LABEL_3:
    *uint64_t v5 = v2;
  }

  for (k = 0LL; k != 15; ++k)
  {
    unsigned int v14 = (char *)&qword_18C467E20[9 * k];
    uint64_t v15 = (char *)*((void *)v14 + 7);
    if (v15) {
      uint64_t v16 = strlen(*((const char **)v14 + 7)) & 0x3FFFFFFF;
    }
    else {
      uint64_t v16 = 0;
    }
    __int128 v17 = (void *)&xmmword_18C468BD0 + (v16 + *v15) % 23;
    uint64_t v18 = (void *)*v17;
    if (!*v17)
    {
LABEL_20:
      uint64_t v13 = (char *)&qword_18C467E20[9 * k];
      *((void *)v13 + 2) = 0LL;
      *((void *)v13 + 8) = v18;
      goto LABEL_21;
    }

    __int128 v19 = (void *)*v17;
LABEL_27:
    int v20 = (_BYTE *)v19[7];
    for (m = (unsigned __int8 *)*((void *)v14 + 7); ; ++m)
    {
      int v22 = *v20;
      int v23 = *m;
      if ((_DWORD)v22 == (_DWORD)v23) {
        break;
      }
      if (byte_1813C6343[v22] != byte_1813C6343[v23])
      {
        __int128 v19 = (void *)v19[8];
        if (v19) {
          goto LABEL_27;
        }
        goto LABEL_20;
      }

    int v23 = sub_18126DFE0((uint64_t)a2, v22, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v21);
    uint64_t v24 = (void (**)(unsigned __int8 *))&off_18C4653A8;
    uint64_t v51 = a7;
    uint64_t v25 = a8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v22);
      --qword_18C468B10;
      off_18C4653A8(v22);
      int v22 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_17:
        if ((_DWORD)v23)
        {
          _DWORD *v51 = 0LL;
          *a8 = 0LL;
          *a5 = 0;
          if (!a6) {
            return v23;
          }
LABEL_19:
          *a6 = 0LL;
          return v23;
        }

        uint64_t v26 = (v17 + 1);
        __n = v26;
        char v27 = 0;
        if (sqlite3_step(pStmt) == 100)
        {
          int v28 = a9 != 0LL;
          int v29 = v26;
          do
          {
            v29 += sqlite3_column_bytes(pStmt, 1);
            ++v27;
          }

          while (sqlite3_step(pStmt) == 100);
        }

        else
        {
          int v28 = 0;
          int v29 = v26;
        }

        int v32 = sqlite3_reset(pStmt);
        if ((_DWORD)v32)
        {
          int v23 = v32;
          __int128 v33 = 0LL;
          goto LABEL_60;
        }

        __int128 v34 = v28 + v27;
        if (sqlite3_initialize())
        {
          __int128 v33 = 0LL;
          if (!a1) {
            goto LABEL_52;
          }
          __int128 v35 = 0LL;
        }

        else
        {
          __int128 v36 = sub_18126F0AC(v29 + 10LL * v34 + 7);
          __int128 v33 = (void *)v36;
          if (!a1) {
            goto LABEL_47;
          }
          if (v36) {
            __int128 v35 = (int)off_18C4653B8(v36);
          }
          else {
            __int128 v35 = 0LL;
          }
        }

        *(void *)(a1 + 56) += v35;
LABEL_47:
        if (v33)
        {
          uint64_t v37 = &v33[v34];
          char v49 = v37;
          uint64_t v38 = &v37[v34];
          if (a6)
          {
            memcpy(&v37[v34], __s, __n);
            *a6 = v38;
            uint64_t v38 = (void *)((char *)v38 + __n);
          }

          int v48 = a1;
          if (v28)
          {
            unsigned __int8 *v38 = 0x5F6469776F725FLL;
            char *v33 = v38++;
            int v39 = 1LL;
            *char v49 = 1;
          }

          else
          {
            int v39 = 0LL;
          }

          if (sqlite3_step(pStmt) == 100)
          {
            uint64_t v40 = (char *)v33 + (v39 | (8LL * v34));
            uint64_t v41 = &v33[v39];
            do
            {
              int v42 = sqlite3_column_bytes(pStmt, 1);
              int v43 = sqlite3_column_text(pStmt, 1);
              if (!v43) {
                break;
              }
              memcpy(v38, v43, v42 + 1);
              *v41++ = v38;
              uint64_t v38 = (void *)((char *)v38 + v42 + 1);
              *v40++ = sqlite3_column_int(pStmt, 5);
            }

            while (sqlite3_step(pStmt) == 100);
          }

          int v23 = sqlite3_reset(pStmt);
          if (!(_DWORD)v23)
          {
            _DWORD *v51 = v33;
            *uint64_t v25 = v49;
            *a5 = v34;
            char v46 = a9;
            if (!a9) {
              goto LABEL_76;
            }
            goto LABEL_75;
          }

          a1 = v48;
LABEL_60:
          _DWORD *v51 = 0LL;
          *uint64_t v25 = 0LL;
          *a5 = 0;
          if (a6) {
            *a6 = 0LL;
          }
          if (a1)
          {
            if (v33) {
              uint64_t v44 = (int)off_18C4653B8(v33);
            }
            else {
              uint64_t v44 = 0LL;
            }
            *(void *)(a1 + 56) -= v44;
          }

          if (v33)
          {
            unsigned int v45 = &off_18C4653A8;
            if (!dword_18C465380)
            {
LABEL_73:
              (*v45)(v33);
              goto LABEL_74;
            }

            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
            --qword_18C468B10;
            off_18C4653A8(v33);
            __int128 v33 = (void *)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              unsigned int v45 = &xmmword_18C465410;
              goto LABEL_73;
            }
          }

  uint64_t v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    uint64_t v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1812CF36C(186024);
    return a2;
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_22;
    }

    goto LABEL_14;
  }

  int v11 = *(void *)(v8 + 24);
  if (v11) {
    xmmword_18C465410(v11);
  }
  return a2;
}

  uint64_t v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    uint64_t v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1812CF36C(186024);
    return a2;
  }

  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_22;
    }

    goto LABEL_14;
  }

  int v11 = *(void *)(v8 + 24);
  if (v11) {
    xmmword_18C465410(v11);
  }
  return a2;
}

          uint64_t v5 = 7LL;
LABEL_12:
          uint64_t v8 = (char *)*((void *)v8 + 3);
          if (!v8)
          {
            uint64_t v4 = *(_DWORD *)(v3 + 52);
            goto LABEL_7;
          }
        }
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

  a1[1] = (uint64_t)v4;
  return v4;
}

  *a5 = v6;
  a5[1] = v5;
  return result;
}

  if ((*(_WORD *)(v4 + 52) & 0x20) != 0)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    --*(_DWORD *)(v6 + 152);
    *(void *)(v4 + 32) = *(void *)(v6 + 168);
    *(void *)(v6 + 168) = v4;
    (*(void (**)(void, void, void))(**(void **)(v6 + 72) + 144LL))( *(void *)(v6 + 72),  *(void *)(v6 + 200) * (*(_DWORD *)(v4 + 48) - 1),  *(void *)(v4 + 8));
  }

  else
  {
    sub_1812F9F44(v4);
  }

  return v1;
}

  *(_DWORD *)(v1 + 80) = v2;
  *(_DWORD *)(v1 + 84) = -1;
  return v2;
}

    uint64_t v13 = sub_18127F460(v7);
    if ((_DWORD)v13)
    {
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0)
      {
LABEL_13:
        sub_1812F9F44(v7);
        goto LABEL_21;
      }
    }

    else
    {
      (*(void (**)(uint64_t))(a1 + 280))(v7);
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0) {
        goto LABEL_13;
      }
    }

    unsigned int v14 = *(void *)(v7 + 40);
    --*(_DWORD *)(v14 + 152);
    *(void *)(v7 + 32) = *(void *)(v14 + 168);
    *(void *)(v14 + 168) = v7;
    (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144LL))( *(void *)(v14 + 72),  *(void *)(v14 + 200) * (*(_DWORD *)(v7 + 48) - 1),  *(void *)(v7 + 8));
    goto LABEL_21;
  }

  if (v11 != 1)
  {
    if ((v8[5] & 0x10) != 0)
    {
      if (!a1[12])
      {
        uint64_t v12 = 1LL;
        sub_1812DC47C( (uint64_t)a1,  "sub-select returns %d columns - expected %d",  a3,  a4,  a5,  a6,  a7,  a8,  **(_DWORD **)(*((void *)v8 + 4) + 32LL));
        return v12;
      }
    }

    else
    {
      sub_1812DC47C((uint64_t)a1, "row value misused", a3, a4, a5, a6, a7, a8, v14);
    }

    return 1LL;
  }

  return 0LL;
}

  if ((_DWORD)result) {
    return result;
  }
  unsigned int v14 = a1;
  uint64_t v15 = (uint64_t)v90;
  if (!v12) {
    return result;
  }
  uint64_t v16 = v5 + 104LL * v6;
  int v83 = (int *)(v16 + 64);
  int v74 = (void *)(v16 + 80);
  __int128 v17 = 1;
  while (1)
  {
    uint64_t v18 = v12[9];
    if (v18)
    {
      uint64_t result = sub_18133673C(*v83, *v86, v3, v18);
      if (!(_DWORD)result) {
        goto LABEL_122;
      }
    }

    if ((*(_WORD *)((_BYTE *)v12 + 99) & 0x100) == 0) {
      break;
    }
    uint64_t result = 0LL;
LABEL_122:
    if ((*v89 & 2) == 0 && !(_DWORD)result)
    {
      uint64_t v12 = (void *)v12[5];
      ++v17;
      if (v12) {
        continue;
      }
    }

    return result;
  }

  __int128 v19 = *(unsigned __int16 *)v12[2];
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_BYTE *)(v2 + 17) = 0;
  *(_WORD *)(v2 + 18) = 0;
  *(void *)int v2 = a2;
  *(_WORD *)(v2 + 22) = v19;
  *(void *)(v2 + 32) = v12;
  if ((*(_WORD *)((_BYTE *)v12 + 99) & 4) != 0)
  {
    int v23 = 1;
    goto LABEL_60;
  }

  int v20 = *(int **)(*(void *)v14 + 16LL);
  if (!v20 || (uint64_t v21 = *v20, *v20 < 1))
  {
LABEL_58:
    int v23 = 1;
    goto LABEL_59;
  }

  int v22 = 0LL;
  char v87 = *v83;
  uint64_t v76 = v19;
  while (2)
  {
    uint64_t v24 = *(unsigned __int8 **)&v20[6 * v22 + 2];
    if (!v24) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v25 = *((_DWORD *)v24 + 1);
      if ((v25 & 0x82000) == 0) {
        break;
      }
      if ((v25 & 0x80000) != 0)
      {
        uint64_t v24 = *(unsigned __int8 **)(*((void *)v24 + 4) + 8LL);
        if (!v24) {
          goto LABEL_24;
        }
      }

      else
      {
        uint64_t v24 = (unsigned __int8 *)*((void *)v24 + 2);
        if (!v24) {
          goto LABEL_24;
        }
      }
    }

    if (*v24 == 167 && *((_DWORD *)v24 + 11) == v87)
    {
      uint64_t v26 = *((_DWORD *)v24 + 12);
      if (v26 < 0) {
        goto LABEL_112;
      }
      char v27 = *((unsigned __int16 *)v12 + 47);
      if (*((_WORD *)v12 + 47))
      {
        int v28 = (__int16 *)v12[1];
        while (1)
        {
          int v29 = *v28++;
          if (v26 == v29) {
            break;
          }
          if (!--v27) {
            goto LABEL_24;
          }
        }

      ++v10;
      v11 += 28;
    }

    while (v10 < *(_DWORD *)(a3 + 20));
  }

  return 0LL;
}

  uint64_t v62 = v14;
  uint64_t v63 = (int *)a2;
  uint64_t v64 = v8;
  int v65 = v13;
  uint64_t v66 = v9;
  int v68 = v10;
  if (*(int *)(v9 + 40) < 1)
  {
    __int128 v17 = 0LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    __int128 v17 = 0LL;
    uint64_t v18 = (unsigned int *)(v9 + 64);
    __int128 v19 = (unsigned int *)a6;
    do
    {
      if (a4) {
        uint64_t v21 = *(_WORD *)(*(void *)(a4 + 8) + 2 * v16);
      }
      else {
        uint64_t v21 = -1;
      }
      int v22 = sub_181341F78((uint64_t *)a1, v10, v69, v21);
      if (a6) {
        int v23 = v19;
      }
      else {
        int v23 = v18;
      }
      uint64_t v24 = *(void *)(*(void *)v9 + 8LL);
      uint64_t v25 = (uint64_t)((unint64_t)*v23 << 48) >> 44;
      uint64_t v26 = *(const void **)(v24 + v25);
      if (v26) {
        char v27 = strlen(*(const char **)(v24 + v25)) & 0x3FFFFFFF;
      }
      else {
        char v27 = 0LL;
      }
      int v28 = sub_1812F2264(v71, v27 + 81);
      int v29 = v28;
      if (v28)
      {
        *(_OWORD *)(v28 + 48) = 0u;
        *(_OWORD *)(v28 + 64) = 0u;
        *(_OWORD *)(v28 + 16) = 0u;
        *(_OWORD *)(v28 + 32) = 0u;
        *(_OWORD *)int v28 = 0u;
        *(_BYTE *)int v28 = 59;
        *(_WORD *)(v28 + 52) = -1;
        int v30 = v28 + 80;
        *(void *)(v28 + 8) = v28 + 80;
        if (v27) {
          memcpy((void *)(v28 + 80), v26, v27);
        }
        *(_BYTE *)(v30 + v27) = 0;
        *(_DWORD *)(v29 + 40) = 1;
        uint64_t v9 = v66;
      }

      int v20 = sub_1813132BC((uint64_t *)a1, 53, v22, v29);
      __int128 v17 = (unsigned __int8 *)sub_1813152F8((uint64_t *)a1, (uint64_t)v17, v20);
      ++v16;
      ++v19;
      uint64_t v10 = v68;
      a4 = v70;
    }

    while (v16 < *(int *)(v9 + 40));
  }

  int v31 = v64;
  if (v64 < 1)
  {
    int v32 = v65;
    __int128 v33 = v63;
  }

  else
  {
    int v32 = v65;
    __int128 v33 = v63;
    if (*(void *)v9 == v10)
    {
      if ((*(_BYTE *)(v10 + 48) & 0x80) != 0)
      {
        if (*(_WORD *)(a4 + 94))
        {
          int v39 = 0LL;
          uint64_t v40 = 0LL;
          do
          {
            int v42 = *(__int16 *)(*(void *)(a4 + 8) + 2 * v39);
            int v43 = sub_181341F78((uint64_t *)a1, v10, v69, v42);
            uint64_t v44 = *(const char **)(*(void *)(v10 + 8) + 16 * v42);
            if (v44) {
              unsigned int v45 = strlen(v44) & 0x3FFFFFFF;
            }
            else {
              unsigned int v45 = 0LL;
            }
            char v46 = sub_1812F2264(v71, v45 + 81);
            uint64_t v47 = v46;
            if (v46)
            {
              *(_OWORD *)(v46 + 48) = 0u;
              *(_OWORD *)(v46 + 64) = 0u;
              *(_OWORD *)(v46 + 16) = 0u;
              *(_OWORD *)(v46 + 32) = 0u;
              *(_OWORD *)char v46 = 0u;
              *(_BYTE *)char v46 = 59;
              *(_WORD *)(v46 + 52) = -1;
              int v48 = v46 + 80;
              *(void *)(v46 + 8) = v46 + 80;
              if (v45) {
                memcpy((void *)(v46 + 80), v44, v45);
              }
              *(_BYTE *)(v48 + v45) = 0;
              *(_DWORD *)(v47 + 40) = 1;
              uint64_t v9 = v66;
            }

            uint64_t v41 = sub_1813132BC((uint64_t *)a1, 45, v43, v47);
            uint64_t v40 = sub_1813152F8((uint64_t *)a1, v40, v41);
            ++v39;
            a4 = v70;
            uint64_t v10 = v68;
          }

          while (v39 < *(unsigned __int16 *)(v70 + 94));
        }

        else
        {
          uint64_t v40 = 0LL;
        }

        uint64_t v38 = sub_1813132BC((uint64_t *)a1, 19, v40, 0LL);
        int v32 = v65;
        int v31 = v64;
        __int128 v33 = v63;
      }

      else
      {
        __int128 v34 = sub_1812F2264(*(void *)a1, 0x51uLL);
        __int128 v35 = v34;
        if (v34)
        {
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)(v34 + 64) = 0u;
          *(_OWORD *)__int128 v34 = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
          *(_WORD *)__int128 v34 = 17584;
          *(_WORD *)(v34 + 52) = -1;
          *(_BYTE *)(v34 + 80) = 0;
          *(void *)(v34 + 8) = v34 + 80;
          *(_DWORD *)(v34 + 40) = 1;
          *(_DWORD *)(v34 + 44) = v69;
        }

        __int128 v36 = v63[18];
        uint64_t v37 = sub_1812F2264(v71, 0x51uLL);
        if (v37)
        {
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 64) = 0u;
          *(_OWORD *)uint64_t v37 = 0u;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_BYTE *)uint64_t v37 = -89;
          *(_WORD *)(v37 + 52) = -1;
          *(_BYTE *)(v37 + 80) = 0;
          *(void *)(v37 + 8) = v37 + 80;
          *(void *)(v37 + 72) = v10;
          *(_DWORD *)(v37 + 40) = 1;
          *(_DWORD *)(v37 + 44) = v36;
          *(_DWORD *)(v37 + 48) = -1;
        }

        uint64_t v38 = sub_1813132BC((uint64_t *)a1, 52, v35, v37);
      }

      __int128 v17 = (unsigned __int8 *)sub_1813152F8((uint64_t *)a1, (uint64_t)v17, v38);
    }
  }

  v75 = 0LL;
  int v74 = 0u;
  __int16 v73 = 0u;
  v72[0] = a1;
  v72[1] = v33;
  uint64_t result = sub_1813205D4((uint64_t)v72, (uint64_t)v17, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 48))
  {
    uint64_t result = sub_18128A51C(a1, v33, (uint64_t)v17, 0LL, 0LL, 0LL, 0LL, 0LL);
    int v56 = (uint64_t **)result;
    int v57 = *(unsigned __int8 *)(v9 + 44);
    int v58 = *(_DWORD *)(v32 + 144);
    if (*(_DWORD *)(v32 + 148) <= v58)
    {
      uint64_t result = sub_18131044C(v32, 158LL, v57, v31, 0LL, v53, v54, v55);
      if (!v56) {
        goto LABEL_56;
      }
    }

    else
    {
      *(_DWORD *)(v32 + 144) = v58 + 1;
      v59 = *(void *)(v32 + 136) + 40LL * v58;
      *(_DWORD *)v59 = 158;
      *(_DWORD *)(v59 + 4) = v57;
      *(_DWORD *)(v59 + 8) = v31;
      *(void *)(v59 + 12) = 0LL;
      *(void *)(v59 + 28) = 0LL;
      *(void *)(v59 + 20) = 0LL;
      *(_DWORD *)(v59 + 36) = 0;
      if (!result) {
        goto LABEL_56;
      }
    }

    uint64_t result = (uint64_t)sub_18128E90C(v56, v50, v57, v51, v52, v53, v54, v55);
  }

    sub_1812CF36C(91138);
    uint64_t v9 = 0;
    if (!v7) {
      return;
    }
    goto LABEL_24;
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = *(_WORD *)(v4 + 20);
  if ((v8 & 2) == 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (*(_BYTE *)(v4 + 22) == 1)
  {
    uint64_t v9 = *(_DWORD *)(v4 + 16);
    if (!v7) {
      return;
    }
    goto LABEL_24;
  }

    sub_1812CF36C(91138);
    uint64_t v9 = 0;
    if (!v7) {
      return;
    }
    goto LABEL_24;
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = *(_WORD *)(v4 + 20);
  if ((v8 & 2) == 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (*(_BYTE *)(v4 + 22) == 1)
  {
    uint64_t v9 = *(_DWORD *)(v4 + 16);
    if (!v7) {
      return;
    }
    goto LABEL_24;
  }

    sub_1812CF36C(91138);
    goto LABEL_12;
  }

  uint64_t v8 = *(_BYTE **)(v6 + 8);
  uint64_t v9 = *(_WORD *)(v6 + 20);
  if ((v9 & 2) == 0) {
    goto LABEL_19;
  }
LABEL_16:
  if (*(_BYTE *)(v6 + 22) == 1)
  {
    uint64_t v10 = *(_DWORD *)(v6 + 16);
    if (a2 != 2) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  uint64_t v21 = 0LL;
  if (a4 == -1 || (_DWORD)v30)
  {
LABEL_81:
    sqlite3_reset(v21);
    return v30;
  }

  pStmt = 0LL;
  int v31 = a1;
  int v20 = sub_1813636A8((uint64_t *)a1, 13, &pStmt, 0LL);
  uint64_t v21 = pStmt;
  if (!v20)
  {
    int v23 = v9;
    uint64_t v38 = *(_DWORD *)(v31 + 488);
    if (!sub_1812B2390((uint64_t)pStmt, 0))
    {
      int v39 = (a3 + v38 * (uint64_t)a2) << 10;
      uint64_t v40 = *((void *)v21 + 16);
      if ((*(_WORD *)(v40 + 20) & 0x9000) != 0)
      {
        sub_1813040AC(v40, v39);
      }

      else
      {
        *(void *)uint64_t v40 = v39;
        *(_WORD *)(v40 + 20) = 4;
      }

      BOOL v54 = *(void *)(*(void *)v21 + 24LL);
      if (v54) {
        xmmword_18C465410(v54);
      }
    }

    unsigned int v55 = *(_DWORD *)(v31 + 488);
    int v83 = v31;
    if (sub_1812B2390((uint64_t)v21, 1u))
    {
LABEL_62:
      if (v10) {
        int v56 = &v86;
      }
      else {
        int v56 = 0LL;
      }
      int v57 = v23 | v10;
      while (1)
      {
        int v20 = sqlite3_step(v21);
        if (v20 != 100) {
          goto LABEL_14;
        }
        pStmt = 0LL;
        char v87 = sqlite3_column_int64(v21, 1);
        int v86 = sqlite3_column_int64(v21, 2);
        int v58 = sqlite3_column_int64(v21, 3);
        v59 = sqlite3_column_bytes(v21, 4);
        uint64_t v60 = (char *)sqlite3_column_blob(v21, 4);
        unsigned int v61 = v60;
        uint64_t v62 = v87;
        if (v11 && v87 && v60)
        {
          int v20 = sub_181362E90(v83, v11, a6, v60, v59, &v87, v56);
          if (v20) {
            goto LABEL_14;
          }
          uint64_t v62 = v87;
          if (!v57) {
            int v86 = v87;
          }
        }

        int v20 = sub_1813634E4(*(_DWORD *)(a9 + 8) + 1, v57 == 0, v62, v86, v58, v61, v59, (uint64_t *)&pStmt);
        if (v20) {
          goto LABEL_14;
        }
        uint64_t v63 = pStmt;
        uint64_t v64 = *(_DWORD *)(a9 + 8);
        int v65 = *(void *)a9;
        if ((v64 & 0xF) == 0)
        {
          if (sqlite3_initialize() || (uint64_t v66 = sub_18127D33C(v65, 8LL * (v64 + 16))) == 0)
          {
            sub_18136257C((uint64_t)v63);
            goto LABEL_80;
          }

          int v65 = v66;
          *(void *)a9 = v66;
          uint64_t v64 = *(_DWORD *)(a9 + 8);
        }

        *(_DWORD *)(a9 + 8) = v64 + 1;
        *(void *)(v65 + 8LL * v64) = v63;
      }
    }

    int v68 = ((a3 + v55 * (uint64_t)a2) << 10) | 0x3FF;
    int v69 = *((void *)v21 + 16);
    if ((*(_WORD *)(v69 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v69 + 64, v68);
    }

    else
    {
      *(void *)(v69 + 64) = v68;
      *(_WORD *)(v69 + 84) = 4;
    }

  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 16) = a2;
  if (*(_BYTE *)a1 == 1) {
    uint64_t v9 = sub_18126D6B4;
  }
  else {
    uint64_t v9 = sub_181363650;
  }
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = (void *)(a1 + 8);
  int v11 = v12;
  *uint64_t v10 = 0LL;
  if (v12)
  {
    uint64_t v13 = a2 - 1;
    do
    {
      __int128 v17 = v9((char *)v11[3], *((_DWORD *)v11 + 8));
      uint64_t v18 = (uint64_t *)*v11;
      __int128 v19 = (char *)&v6[4 * (v17 & v13)];
      int v22 = *((void *)v19 + 1);
      int v20 = v19 + 8;
      uint64_t v21 = v22;
      if (v22)
      {
        *int v11 = v21;
        uint64_t v15 = *(void *)(v21 + 8);
        unsigned int v14 = (void **)(v21 + 8);
        v11[1] = v15;
        uint64_t v16 = *v14;
        if (!*v14) {
          uint64_t v16 = v10;
        }
        *uint64_t v16 = v11;
      }

      else
      {
        int v23 = *v10;
        *int v11 = *v10;
        if (v23) {
          *(void *)(v23 + 8) = v11;
        }
        v11[1] = 0LL;
        unsigned int v14 = (void **)v10;
      }

      *unsigned int v14 = v11;
      ++v6[4 * (v17 & v13)];
      *int v20 = v11;
      int v11 = v18;
    }

    while (v18);
  }

  return 0LL;
}

  a1[1] = 0LL;
  *((_DWORD *)a1 + 6) = 0;
  v3[1] = 0LL;
  v3[2] = 0LL;
  if (v5 == 101) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = v5;
  }
  *uint64_t v3 = 0LL;
  return result;
}

      ++v13;
      uint64_t v18 = *a2;
      v12 += 8LL;
      v11 += 12LL;
      if (v13 >= v18)
      {
        int v2 = v47;
        if (v16)
        {
          uint64_t v8 = 0;
          int v30 = 0;
          int v31 = 0;
        }

        else
        {
          if ((int)v18 < 1)
          {
            int v30 = 0;
            int v31 = 0;
          }

          else
          {
            int v32 = 0LL;
            __int128 v33 = 0LL;
            __int128 v34 = 0LL;
            int v31 = 0;
            int v30 = 0;
            do
            {
              __int128 v35 = *((void *)a2 + 1);
              if ((*(_DWORD *)(v35 + v32) & 0x80000000) != 0)
              {
                __int128 v36 = v35 + v32;
                if (*(_BYTE *)(v36 + 5))
                {
                  HIDWORD(v37) = *(unsigned __int8 *)(v36 + 4);
                  LODWORD(v37) = (HIDWORD(v37) << 24) - 0x4000000;
                  switch((v37 >> 26))
                  {
                    case 0u:
                    case 7u:
                      if (!v30)
                      {
                        int v30 = 1;
                        uint64_t v38 = 62;
                        goto LABEL_48;
                      }

                      break;
                    case 1u:
                    case 3u:
                      if (!v31)
                      {
                        int v31 = 1;
                        uint64_t v38 = 60;
LABEL_48:
                        *(_BYTE *)(v10 + v14++) = v38;
                        *(_DWORD *)(*((void *)a2 + 4) + v33) = ++v17;
                      }

                      break;
                    default:
                      break;
                  }
                }
              }

              ++v34;
              v33 += 8LL;
              v32 += 12LL;
            }

            while (v34 < *a2);
          }

          uint64_t v8 = 1;
        }

  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4) {
    goto LABEL_18;
  }
  uint64_t v5 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_17;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v4);
  --qword_18C468B10;
  off_18C4653A8(v4);
  uint64_t v4 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v5 = &xmmword_18C465410;
LABEL_17:
    (*v5)(v4);
  }

      v9 += 32LL;
      ++v10;
    }

    while (v11 != v9);
  }

  if (*(_DWORD *)(a1 + 16))
  {
    sub_18138CFA4(v2);
    return 0LL;
  }

  else
  {
    sub_18138D08C(a2);
  }

  return v2;
}

      if (!*(_DWORD *)(v5 + 60))
      {
        __int128 v19 = *(unsigned __int16 *)(v12 + 4);
        if (*(void *)(a2 + 136LL * v19 + 112))
        {
          unsigned int v14 = *(_DWORD *)(a2 + 136LL * v19 + 224);
          if (!v14) {
            continue;
          }
        }
      }

      uint64_t result = sub_1813908F8(a2);
      if (!(_DWORD)result) {
        return result;
      }
      unsigned int v14 = *(_DWORD *)(v5 + 60);
    }

    while (!v14);
  }

  return result;
}

  uint64_t v12 = 0LL;
  if (!v10) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v13 = *(unsigned __int16 *)(v10 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      unsigned int v14 = 0LL;
      if ((v13 & 2) == 0) {
        goto LABEL_23;
      }
    }

    else
    {
      unsigned int v14 = (unsigned __int8 *)sub_181303998((int *)v10, 1);
      LOWORD(v13) = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0) {
        goto LABEL_23;
      }
    }
  }

  else
  {
    unsigned int v14 = *(unsigned __int8 **)(v10 + 8);
    if ((v13 & 2) == 0)
    {
LABEL_23:
      if ((v13 & 0x10) != 0)
      {
        __int128 v17 = *(_DWORD *)(v10 + 16);
        uint64_t v16 = 0;
        if ((v13 & 0x400) != 0) {
          v17 += *(_DWORD *)v10;
        }
      }

      else if ((v13 & 1) != 0)
      {
        uint64_t v16 = 0;
        __int128 v17 = 0;
      }

      else
      {
        __int128 v17 = sub_181303970(v10, 1);
        uint64_t v16 = 0;
      }

      goto LABEL_71;
    }
  }

  if (*(_BYTE *)(v10 + 22) != 1) {
    goto LABEL_23;
  }
  uint64_t v16 = 0;
  __int128 v17 = *(_DWORD *)(v10 + 16);
LABEL_71:
  uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 32LL);
  uint64_t result = sub_181393898((_DWORD *)v24, v14, v17, v16, 0LL, (uint64_t *)(a1 + 32));
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v26 = *(_DWORD **)(v24 + 144);
  ++*v26;
  *(void *)(a1 + 40) = v26;
  if (v8 == 2)
  {
    uint64_t result = sub_1813AB9B0(a1);
    if ((_DWORD)result) {
      return result;
    }
    if (!*(_DWORD *)(a1 + 24) && *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 24LL) + 92LL) != 1) {
      return sub_1813AACD0(a1);
    }
  }

  else if (!*(_DWORD *)(a1 + 24))
  {
    return sub_1813AACD0(a1);
  }

  return 0LL;
}

    *(_OWORD *)(a1 + i + 56) = 0u;
    *(_OWORD *)(a1 + i + 72) = 0u;
    *(_OWORD *)(a1 + i + 24) = 0u;
    *(_OWORD *)(a1 + i + 40) = 0u;
    *(void *)(v3 + 32) = v4;
    if (v4)
    {
      uint64_t v7 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_2;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
      --qword_18C468B10;
      off_18C4653A8(v4);
      uint64_t v4 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v7 = &xmmword_18C465410;
LABEL_2:
        (*v7)(v4);
      }
    }

    *(void *)(v3 + 32) = 0LL;
  }

  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
  *(_DWORD *)(a1 + 2072) = 0;
  uint64_t v9 = *(void *)(a1 + 2088);
  if (v9)
  {
    uint64_t v10 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_23;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v9);
    uint64_t v9 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v10 = &xmmword_18C465410;
LABEL_23:
      uint64_t result = (*v10)(v9);
    }
  }

  *(void *)(a1 + 2088) = 0LL;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

    *a3 = 7;
    return result;
  }

  uint64_t result = *(void *)result;
LABEL_13:
  result += v5;
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      uint64_t result = sub_181308E00((int8x8_t *)result, (int)a2);
      int v11 = result;
    }

    else
    {
      *(_BYTE *)uint64_t result = (a2 >> 7) | 0x80;
      *(_BYTE *)(result + 1) = a2 & 0x7F;
      int v11 = 2;
    }
  }

  else
  {
    *(_BYTE *)uint64_t result = a2;
    int v11 = 1;
  }

  *(_DWORD *)(v4 + 8) += v11;
  return result;
}

uint64_t sub_18126C408(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112)) {
    return *(unsigned int *)(a1 + 112);
  }
  if ((*(_WORD *)(a1 + 30) & 0x10) != 0) {
    *(_DWORD *)(a1 + 116) |= 0x1000u;
  }
  *(_DWORD *)(a1 + 112) = 4096;
  return 4096LL;
}

uint64_t sub_18126C43C(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = *a2;
  if (*(_BYTE *)(a1 + 19) && *(_DWORD *)(a1 + 32)) {
    goto LABEL_25;
  }
  BOOL v7 = *(void *)(*(void *)(a1 + 336) + 24LL) || (_DWORD)v6 == 0;
  if (v7 || (_DWORD)v6 == *(_DWORD *)(a1 + 200)) {
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 21))
  {
    uint64_t v8 = **(void **)(a1 + 72);
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(v8 + 48))();
      if ((_DWORD)v9)
      {
        uint64_t v10 = v9;
        unint64_t v11 = 0LL;
LABEL_37:
        sub_1812FC960(v11);
        *a2 = *(void *)(a1 + 200);
        return v10;
      }
    }
  }

  uint64_t v12 = sub_1812FDBB8((int)v6 + 8);
  unint64_t v11 = v12;
  if (!v12) {
    goto LABEL_36;
  }
  *(void *)(v12 + v6) = 0LL;
  ++*(_DWORD *)(a1 + 132);
  for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  sub_18126C6E4(*(void **)(a1 + 336), 0);
  uint64_t v14 = *(void *)(a1 + 336);
  if (!*(_DWORD *)(v14 + 40)) {
    goto LABEL_24;
  }
  uint64_t v15 = xmmword_18C465448(v6, (*(_DWORD *)(v14 + 44) + 80), *(unsigned __int8 *)(v14 + 48));
  if (!v15)
  {
LABEL_36:
    uint64_t v10 = 7LL;
    goto LABEL_37;
  }

  uint64_t v16 = v15;
  uint64_t v17 = *(unsigned int *)(v14 + 32);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v18 = *(int *)(v14 + 44);
    else {
      uint64_t v17 = -1024LL * (int)v17 / (v18 + *(int *)(v14 + 40));
    }
  }

  ((void (*)(uint64_t, uint64_t))*(&xmmword_18C465448 + 1))(v15, v17);
  if (*(void *)(v14 + 72)) {
    ((void (*)(void))*(&xmmword_18C465478 + 1))();
  }
  *(void *)(v14 + 72) = v16;
  *(_DWORD *)(v14 + 40) = v6;
LABEL_24:
  sub_1812FC960(*(void *)(a1 + 328));
  *(void *)(a1 + 328) = v11;
  *(_DWORD *)(a1 + 32) = (v6 - 1) / v6;
  *(void *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 192) = dword_18C54FA50 / v6 + 1;
LABEL_25:
  *a2 = *(_DWORD *)(a1 + 200);
  if (a3 < 0) {
    LOWORD(a3) = *(_WORD *)(a1 + 178);
  }
  *(_WORD *)(a1 + 178) = a3;
  __int128 v19 = *(void (**)(void))(a1 + 304);
  if (v19) {
    v19(*(void *)(a1 + 320));
  }
  uint64_t v20 = **(void **)(a1 + 72);
  if (v20 && *(int *)v20 >= 3)
  {
    uint64_t v21 = *(void *)(a1 + 160);
    *(_BYTE *)(a1 + 27) = v21 > 0;
    if (*(_DWORD *)(a1 + 48))
    {
      int v22 = sub_1812FCAFC;
    }

    else if (v21 < 1 || *(void *)(a1 + 296))
    {
      int v22 = sub_1812FCD58;
    }

    else
    {
      int v22 = sub_1812FCB08;
    }

    *(void *)(a1 + 288) = v22;
    (*(void (**)(void))(v20 + 80))();
  }

  return 0LL;
}

const void *sub_18126C6AC(const void *ptr)
{
  if (ptr)
  {
    if (qword_18C5506A8) {
      return (const void *)(*(uint64_t (**)(void))(qword_18C5506A8 + 16))();
    }
    else {
      return (const void *)malloc_size(ptr);
    }
  }

  return ptr;
}

void *sub_18126C6E4(void *result, unsigned int a2)
{
  if (result[9])
  {
    uint64_t v3 = result;
    uint64_t v4 = *result;
    if (*result)
    {
      while (1)
      {
        uint64_t v5 = v4;
        uint64_t v4 = *(void *)(v4 + 64);
        if (*(_DWORD *)(v5 + 48) > a2) {
          break;
        }
LABEL_4:
        if (!v4) {
          goto LABEL_17;
        }
      }

      uint64_t v6 = *(void *)(v5 + 24);
      uint64_t v7 = *(void *)(v5 + 72);
      if (*(void *)(v6 + 16) == v5)
      {
        *(void *)(v6 + 16) = v7;
        if (v4)
        {
LABEL_8:
          *(void *)(v4 + 72) = v7;
          uint64_t v7 = *(void *)(v5 + 72);
          if (!v7)
          {
            *(void *)uint64_t v6 = v4;
LABEL_13:
            *(_WORD *)(v5 + 52) = *(_WORD *)(v5 + 52) & 0xFFF0 | 1;
            if (!*(void *)(v5 + 56) && *(_BYTE *)(v6 + 48)) {
              xmmword_18C465468(*(void *)(v6 + 72), *(void *)v5, 0LL);
            }
            goto LABEL_4;
          }

LABEL_12:
          *(void *)(v7 + 64) = v4;
          goto LABEL_13;
        }
      }

      else if (v4)
      {
        goto LABEL_8;
      }

      *(void *)(v6 + 8) = v7;
      if (!v7)
      {
        *(void *)uint64_t v6 = 0LL;
        *(_BYTE *)(v6 + 49) = 2;
        goto LABEL_13;
      }

      goto LABEL_12;
    }

    uint64_t v8 = v3[6];
    uint64_t v9 = (_DWORD *)v3[7];
    if (v9 && (int)*v9 >= 1)
    {
      uint64_t v10 = (uint64_t *)(v9 + 2);
      unint64_t v11 = *v9 + 1;
      while (!*v10 || !sub_18131C57C((uint64_t)a1, *v10))
      {
        v10 += 3;
        if (--v11 <= 1) {
          goto LABEL_21;
        }
      }

      return 2LL;
    }

  if (a4)
  {
    uint64_t v24 = (uint64_t)*a1;
    if (*(_DWORD *)(a3 + 8))
    {
      if (*(_BYTE *)(v24 + 197))
      {
        uint64_t v25 = "corrupt database";
LABEL_29:
        sub_1812DC47C((uint64_t)a1, v25, a3, (uint64_t)a4, a5, a6, a7, a8, v227);
        goto LABEL_30;
      }

      v239 = a11;
      int v31 = sub_18131EDC8(v24, a2);
      int v39 = a3;
      if (v31 < 0)
      {
        sub_1812DC47C((uint64_t)a1, "unknown database %T", a3, (uint64_t)a4, a5, a6, a7, a8, a2);
        goto LABEL_30;
      }
    }

    else
    {
      v239 = a11;
      int v31 = *(unsigned __int8 *)(v24 + 196);
      int v39 = a2;
    }

    v240 = v39;
    if (!*(_BYTE *)(v14 + 197))
    {
      uint64_t v40 = sub_181323B78(a1, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(a3 + 8))
      {
        int v39 = v240;
      }

      else
      {
        int v39 = v240;
        if (v40 && *(void *)(v40 + 96) == *(void *)(*(void *)(v14 + 32) + 56LL)) {
          int v31 = 1;
        }
      }
    }

    uint64_t v41 = (uint64_t)*a1;
    v242 = a1;
    int v42 = (uint64_t *)(*(void *)(v41 + 32) + 32LL * v31);
    v249 = *v42;
    int v43 = v42[3];
    v250 = "index";
    v251 = v39;
    v248 = v31 == 1;
    v243[0] = a1;
    v243[1] = sub_18132467C;
    v243[2] = sub_1813246F8;
    v243[3] = nullsub_8;
    v244 = 0;
    v245 = 0;
    v246 = &v242;
    v247 = v43;
    v258 = 0u;
    v259 = 0u;
    v256 = 0u;
    v257 = 0u;
    v253 = 0LL;
    v255 = 0u;
    memset(v252, 0, sizeof(v252));
    v254 = a4;
    sub_181285228(v243, v252);
    char v49 = sub_181321CB0((uint64_t)a1, 0, (uint64_t)(a4 + 1), v44, v45, v46, v47, v48);
    if (!v49) {
      goto LABEL_30;
    }
    int v28 = (void *)v49;
    if (v31 == 1 && *(void *)(*(void *)(v14 + 32) + 56LL) != *(void *)(v49 + 96))
    {
      sub_1812DC47C( (uint64_t)a1,  "cannot create a TEMP index on non-TEMP table %s",  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  *(void *)v49);
LABEL_97:
      char v27 = 0LL;
      goto LABEL_98;
    }

    if ((*(_BYTE *)(v49 + 48) & 0x80) != 0)
    {
      __int128 v34 = *(void *)(v49 + 16);
      for (i = v240; v34; __int128 v34 = *(void *)(v34 + 40))
      {
        if ((*(_WORD *)(v34 + 99) & 3) == 2) {
          break;
        }
      }
    }

    else
    {
      __int128 v34 = 0LL;
      uint64_t i = v240;
    }
  }

  else
  {
    int v28 = a1[43];
    if (!v28)
    {
LABEL_30:
      char v27 = 0LL;
      goto LABEL_31;
    }

    v239 = a11;
    int v29 = v28[12];
    if (v29)
    {
      int v30 = (uint64_t *)(*(void *)(v14 + 32) + 24LL);
      int v31 = -1;
      do
      {
        int v32 = *v30;
        v30 += 4;
        ++v31;
      }

      while (v32 != v29);
      uint64_t i = 0LL;
      __int128 v34 = 0LL;
    }

    else
    {
      uint64_t i = 0LL;
      __int128 v34 = 0LL;
      int v31 = -32768;
    }
  }

  char v50 = (char *)*v28;
  if (*v28)
  {
    uint64_t v51 = *v50;
    if (!*v50)
    {
      uint64_t v60 = 0;
      v59 = "sqlite_";
      goto LABEL_88;
    }

    if ((v51 & 0xFFFFFFDF) == 0x53)
    {
      int v52 = v50[1];
      if (!v50[1])
      {
        uint64_t v60 = 0;
        v59 = "qlite_";
        goto LABEL_88;
      }

      if ((v52 & 0xFFFFFFDF) == 0x51)
      {
        BOOL v53 = v50[2];
        if (!v50[2])
        {
          uint64_t v60 = 0;
          v59 = "lite_";
          goto LABEL_88;
        }

        if ((v53 & 0xFFFFFFDF) == 0x4C)
        {
          BOOL v54 = v50[3];
          if (!v50[3])
          {
            uint64_t v60 = 0;
            v59 = "ite_";
            goto LABEL_88;
          }

          if ((v54 & 0xFFFFFFDF) == 0x49)
          {
            unsigned int v55 = v50[4];
            if (!v50[4])
            {
              uint64_t v60 = 0;
              v59 = "te_";
              goto LABEL_88;
            }

            if ((v55 & 0xFFFFFFDF) == 0x54)
            {
              int v56 = v50[5];
              if (!v50[5])
              {
                uint64_t v60 = 0;
                v59 = "e_";
                goto LABEL_88;
              }

              if ((v56 & 0xFFFFFFDF) == 0x45)
              {
                int v57 = v50[6];
                if (!v50[6])
                {
                  uint64_t v60 = 0;
                  v59 = "_";
LABEL_88:
                  goto LABEL_89;
                }

                if ((_DWORD)v57 == 95)
                {
LABEL_89:
                  if (a4 && !*(_BYTE *)(v14 + 197))
                  {
                    sub_1812DC47C((uint64_t)a1, "table %s may not be indexed", a3, (uint64_t)a4, a5, a6, a7, a8, *v28);
                    goto LABEL_97;
                  }

                  goto LABEL_92;
                }

                int v58 = &byte_1813C6343[v57];
                v59 = "_";
              }

              else
              {
                int v58 = &byte_1813C6343[v56];
                v59 = "e_";
              }
            }

            else
            {
              int v58 = &byte_1813C6343[v55];
              v59 = "te_";
            }
          }

          else
          {
            int v58 = &byte_1813C6343[v54];
            v59 = "ite_";
          }
        }

        else
        {
          int v58 = &byte_1813C6343[v53];
          v59 = "lite_";
        }
      }

      else
      {
        int v58 = &byte_1813C6343[v52];
        v59 = "qlite_";
      }
    }

    else
    {
      int v58 = &byte_1813C6343[v51];
      v59 = "sqlite_";
    }

    uint64_t v60 = *v58;
    goto LABEL_88;
  }

  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      uint64_t v4 = **(void **)(a1 + 80) == 0LL;
    }

    else
    {
      ++*(_DWORD *)(a1 + 132);
      for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
        *(_DWORD *)(i + 24) = 1;
      uint64_t result = (uint64_t)sub_18126C6E4(*(void **)(a1 + 336), 0);
      uint64_t v4 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }

    *(_BYTE *)(a1 + 21) = v4;
    if (*(_BYTE *)(a1 + 27))
    {
      uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 72) + 144LL))( *(void *)(a1 + 72),  0LL,  0LL);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 27);
      *(_DWORD *)(a1 + 48) = 0;
      if (v6 && !*(void *)(a1 + 296))
      {
        uint64_t v7 = sub_1812FCB08;
LABEL_24:
        *(void *)(a1 + 288) = v7;
        goto LABEL_25;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 48) = 0;
    }

    uint64_t v7 = sub_1812FCD58;
    goto LABEL_24;
  }

  int v22 = (unsigned __int16 *)(a2 + 96);
LABEL_13:
  int v23 = *v22;
  if ((_DWORD)v23 == 1)
  {
    if (*(_BYTE *)(a1 + 31))
    {
      uint64_t v24 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v24;
      uint64_t v25 = *(_DWORD *)(a1 + 4LL * v24 + 224);
      char v50 = a4;
      uint64_t v51 = v25;
      if (!v10) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v25 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v25;
      char v50 = a4;
      uint64_t v51 = v25;
      if (!v10) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    uint64_t v26 = *(_DWORD *)(a1 + 40);
    char v27 = __OFSUB__(v26, (_DWORD)v23);
    int v28 = v26 - v23;
    if (v28 < 0 != v27)
    {
      int v29 = *(_DWORD *)(a1 + 56);
      uint64_t v25 = v29 + 1;
      *(_DWORD *)(a1 + 56) = v29 + v23;
      char v50 = a4;
      uint64_t v51 = v29 + 1;
      if (!v10) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v25 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v28;
      *(_DWORD *)(a1 + 44) = v25 + v23;
      char v50 = a4;
      uint64_t v51 = v25;
      if (!v10) {
        goto LABEL_27;
      }
    }
  }

  if (v25 != v9 || *(void *)(v10 + 72)) {
    uint64_t v10 = 0LL;
  }
LABEL_27:
  if ((_DWORD)v23)
  {
    int v30 = 0LL;
    int v31 = 8LL;
    while (1)
    {
      int v32 = *(void *)(a2 + 8);
      if (v10)
      {
        __int128 v33 = *(unsigned __int16 *)(*(void *)(v10 + 8) + 2 * v30);
        __int128 v34 = *(unsigned __int16 *)(v32 + 2 * v30);
        if (v33 != 65534 && v33 == v34) {
          goto LABEL_29;
        }
      }

      else
      {
        __int128 v34 = *(unsigned __int16 *)(v32 + 2 * v30);
      }

      if (v34 == 65534) {
        break;
      }
      *(double *)a9.i64 = sub_18131C0EC( *(void *)(a1 + 16),  *(void *)(a2 + 24),  a3,  (__int16)v34,  v51 + v30,  (uint64_t)a6,  a7,  a8,  a9);
LABEL_45:
      if ((*(__int16 *)(*(void *)(a2 + 8) + 2 * v30) & 0x80000000) == 0)
      {
        uint64_t v40 = *(_DWORD *)(v15 + 144);
        char v27 = __OFSUB__(v40, 1);
        uint64_t v41 = v40 - 1;
        if (v41 < 0 == v27)
        {
          int v42 = *(void *)(v15 + 136);
          int v43 = (_BYTE *)(v42 + 40LL * v41);
          if (*v43 == 87 && !*(_BYTE *)(*(void *)v15 + 103LL))
          {
            uint64_t v44 = v42 + 40LL * v41;
            sub_18127ABFC(*(void **)v15, *(char *)(v44 + 1), *(void *)(v44 + 16));
            *(_BYTE *)(v44 + 1) = 0;
            *(void *)(v44 + 16) = 0LL;
            void *v43 = -72;
          }
        }
      }

    uint64_t v18 = v16;
    __int128 v19 = a3;
LABEL_14:
    uint64_t v17 = sub_181289D04(v18, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_15;
  }

  if ((a2[5] & 2) != 0)
  {
LABEL_13:
    uint64_t v18 = v16;
    __int128 v19 = a2;
    goto LABEL_14;
  }

  if (a3 && (a3[5] & 2) != 0) {
    goto LABEL_12;
  }
  uint64_t v17 = sub_181289D04(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v17) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v20 = sub_1812A3C7C(a3);
  uint64_t v21 = sub_1812A3C7C(a2);
  if (v20 < 65 || v21 < 65)
  {
    if (v21 >= 65) {
      uint64_t v25 = v21;
    }
    else {
      uint64_t v25 = v20;
    }
    uint64_t v24 = v25 | 0x40;
  }

  else if (v21 > 0x42 || v20 > 0x42)
  {
    uint64_t v24 = 67;
  }

  else
  {
    uint64_t v24 = 65;
  }

  uint64_t result = sub_1812B9B68(*(uint64_t **)(v16 + 16), a4, a6, a7, a5, v17, 4294967294LL, v22);
  uint64_t v26 = *(void *)(v16 + 16);
  char v27 = *(_DWORD *)(v26 + 144);
  int v28 = __OFSUB__(v27, 1);
  int v29 = v27 - 1;
  if (v29 < 0 == v28) {
    *(_WORD *)(*(void *)(v26 + 136) + 40LL * v29 + 2) = (v24 | v9);
  }
  return result;
}

  __int128 v19 = v10 - v11;
  uint64_t v20 = v16 - v15;
  if (v16 - v15 <= v14) {
    uint64_t v20 = v14;
  }
  if (v10 == v9)
  {
    uint64_t v21 = 0LL;
    if (v19 == v20) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v21 = 8 * (*(void *)(v7 + 320) != 0LL);
    if (v19 == v20) {
      goto LABEL_21;
    }
  }

  uint64_t v37 = v10;
  int v22 = sub_18126C43C(v7, &v37, v19);
  if (v22) {
    uint64_t v21 = v22;
  }
  else {
    uint64_t v21 = 8 * (v37 != v10);
  }
LABEL_21:
  if (!(_DWORD)v21 && v10 >= 1)
  {
    int v23 = v10 * (unint64_t)a2;
    uint64_t v24 = v23 - v10;
    uint64_t v25 = v12;
    do
    {
      __int128 v36 = 0LL;
      uint64_t v26 = v24 / v9;
      if (dword_18C54FA50 / *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8LL) + 52LL) == (_DWORD)v26)
      {
        uint64_t v21 = 0LL;
        goto LABEL_45;
      }

      uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v7 + 288))( v7,  (v26 + 1),  &v36,  0LL);
      if (!(_DWORD)v21)
      {
        char v27 = v36;
        int v28 = *(_DWORD **)(v36 + 40);
        if ((*(_WORD *)(v36 + 52) & 4) != 0 && v28[8] >= *(_DWORD *)(v36 + 48))
        {
          if (!v28[32]) {
            goto LABEL_38;
          }
          uint64_t v21 = sub_1812FAFE4(v36);
          if (!(_DWORD)v21)
          {
LABEL_37:
            char v27 = v36;
LABEL_38:
            int v29 = *(void *)(v27 + 8) - v9 * v26;
            memcpy((void *)(v29 + v24), (const void *)(a3 + v24 % v10), v25);
            uint64_t v21 = 0LL;
            **(_BYTE **)(v36 + 16) = 0;
            if (!a4 && !v24)
            {
              uint64_t v21 = 0LL;
              *(_DWORD *)(v29 + 28) = bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 64LL));
            }
          }
        }

        else
        {
          uint64_t v21 = v28[12];
          if (!(_DWORD)v21)
          {
            if (v28[46] <= v28[50])
            {
              uint64_t v21 = sub_1812ABE24(v36);
              if (!(_DWORD)v21) {
                goto LABEL_37;
              }
            }

            else
            {
              uint64_t v21 = sub_1812FED50(v36);
              if (!(_DWORD)v21) {
                goto LABEL_37;
              }
            }
          }
        }
      }

      int v30 = v36;
      if (!v36) {
        goto LABEL_44;
      }
      if ((*(_WORD *)(v36 + 52) & 0x20) == 0)
      {
        sub_1812F9F44(v36);
LABEL_44:
        if ((_DWORD)v21) {
          return v21;
        }
        goto LABEL_45;
      }

      int v31 = *(void *)(v36 + 40);
      --*(_DWORD *)(v31 + 152);
      *(void *)(v30 + 32) = *(void *)(v31 + 168);
      *(void *)(v31 + 168) = v30;
      (*(void (**)(void, void, void))(**(void **)(v31 + 72) + 144LL))( *(void *)(v31 + 72),  *(void *)(v31 + 200) * (*(_DWORD *)(v30 + 48) - 1),  *(void *)(v30 + 8));
      if ((_DWORD)v21) {
        return v21;
      }
LABEL_45:
      v24 += v9;
    }

    while (v24 < v23);
  }

  return v21;
}

  sub_1812C8198(result, 0, a2);
  for (uint64_t i = *(void **)(v2 + 760); i; uint64_t i = *(void **)(v2 + 760))
  {
    *(void *)(v2 + 760) = i[3];
    sub_1812F20DC((void *)v2, i);
  }

  *(void *)(v2 + 788) = 0LL;
  *(_BYTE *)(v2 + 109) = 0;
  if (*(int *)(v2 + 40) >= 1)
  {
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      sub_1812B54BC(v9, v6);
      *(void *)(v8 + 8) = 0LL;
      *(void *)(v8 + 24) = 0LL;
    }

    if (*(int *)(v2 + 40) >= 2)
    {
      uint64_t v10 = *(void *)(v2 + 32);
      unint64_t v11 = *(void *)(v10 + 40);
      if (v11)
      {
        sub_1812B54BC(v11, v6);
        *(void *)(v10 + 40) = 0LL;
      }

      if (*(int *)(v2 + 40) >= 3)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 2LL;
        do
        {
          uint64_t v14 = *(void *)(v2 + 32) + v12;
          uint64_t v15 = *(void *)(v14 + 72);
          if (v15)
          {
            sub_1812B54BC(v15, v6);
            *(void *)(v14 + 72) = 0LL;
            *(void *)(v14 + 88) = 0LL;
          }

          ++v13;
          v12 += 32LL;
        }

        while (v13 < *(int *)(v2 + 40));
      }
    }
  }

  uint64_t v16 = *(void *)(*(void *)(v2 + 32) + 56LL);
  if (v16) {
    sub_1813070A0(v16);
  }
  sub_18130D9D8((void *)v2);
  sub_181311990((void *)v2);
  for (uint64_t j = *(void **)(v2 + 624); j; uint64_t j = (void *)*j)
  {
    uint64_t v21 = (void *)j[2];
    do
    {
      int v23 = v21[8];
      if (v23)
      {
        if ((*(_DWORD *)v23)-- == 1)
        {
          (*(void (**)(void))(v23 + 8))(*(void *)(v23 + 16));
          sub_1812F20DC((void *)v2, (void *)v23);
        }
      }

      int v22 = (void *)v21[2];
      sub_1812F20DC((void *)v2, v21);
      uint64_t v21 = v22;
    }

    while (v22);
  }

  sub_18130D1AC(v2 + 616);
  for (k = *(void **)(v2 + 648); k; k = (void *)*k)
  {
    uint64_t v25 = (void *)k[2];
    uint64_t v26 = (void (*)(void))v25[4];
    if (v26) {
      v26(v25[2]);
    }
    char v27 = (void (*)(void))v25[9];
    if (v27) {
      v27(v25[7]);
    }
    int v28 = (void (*)(void))v25[14];
    if (v28) {
      v28(v25[12]);
    }
    sub_1812F20DC((void *)v2, v25);
  }

  sub_18130D1AC(v2 + 640);
  for (m = *(void **)(v2 + 576); m; m = (void *)*m)
  {
    int v29 = m[2];
    int v30 = *(void *)(v29 + 40);
    if (v30)
    {
      *(_DWORD *)(v30 + 48) |= 0x4000u;
      if (*(void *)(v2 + 816) || (int v31 = *(_DWORD *)(v30 + 44) - 1, (*(_DWORD *)(v30 + 44) = v31) == 0)) {
        sub_181311A80((void *)v2, (void *)v30);
      }
      *(void *)(v29 + 40) = 0LL;
    }

    int v32 = *(_DWORD *)(v29 + 16) - 1;
    *(_DWORD *)(v29 + 16) = v32;
    if (!v32)
    {
      __int128 v33 = *(void (**)(void))(v29 + 32);
      if (v33) {
        v33(*(void *)(v29 + 24));
      }
      sub_1812F20DC((void *)v2, (void *)v29);
    }
  }

  sub_18130D1AC(v2 + 568);
  *(_DWORD *)(v2 + 80) = 0;
  if (*(void *)(v2 + 416))
  {
    sub_1812FA264(v2, 0);
    uint64_t v20 = *(void *)(v2 + 416);
    if (v20)
    {
      if ((*(_WORD *)(v20 + 20) & 0x9000) != 0 || *(_DWORD *)(v20 + 32)) {
        sub_181303838(*(void *)(v2 + 416));
      }
      sub_1812F20DC(*(void **)(v20 + 24), (void *)v20);
    }
  }

  else
  {
    *(_DWORD *)(v2 + 84) = -1;
  }

  *(_BYTE *)(v2 + 113) = -43;
  __int128 v34 = *(void **)(*(void *)(v2 + 32) + 56LL);
  if (v34) {
    sub_1812F20DC((void *)v2, v34);
  }
  __int128 v35 = *(void (**)(void))(v2 + 328);
  if (v35) {
    v35(*(void *)(v2 + 320));
  }
  __int128 v36 = *(void *)(v2 + 24);
  if (v36)
  {
    xmmword_18C465410(v36);
    uint64_t v37 = *(void *)(v2 + 24);
    *(_BYTE *)(v2 + 113) = -50;
    if (v37) {
      off_18C4653F8();
    }
  }

  else
  {
    *(_BYTE *)(v2 + 113) = -50;
  }

  if (*(_BYTE *)(v2 + 440))
  {
    uint64_t v38 = *(void *)(v2 + 504);
    if (v38)
    {
      int v39 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_76:
        (*v39)(v38);
        goto LABEL_77;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v38);
      --qword_18C468B10;
      off_18C4653A8(v38);
      uint64_t v38 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v39 = &xmmword_18C465410;
        goto LABEL_76;
      }
    }
  }

    uint64_t v8 = -1;
  }

  uint64_t v6 = 25;
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_46;
  }
LABEL_14:
  if (v5 == 18)
  {
    uint64_t v16 = *(void *)(v4 + 80);
    if (v16)
    {
LABEL_21:
      __int128 v19 = (uint64_t *)(*(void *)(v16 + 8) + ((unint64_t)v8 << 6));
      if (v8 == *(__int16 *)(*(void *)(v4 + 120) + 52LL))
      {
        uint64_t v20 = *(void *)(v4 + 104);
        uint64_t v21 = (_WORD *)v19 + 10;
        if ((*((_WORD *)v19 + 10) & 0x9000) != 0)
        {
          sub_1813040AC(*(void *)(v16 + 8) + ((unint64_t)v8 << 6), v20);
          goto LABEL_40;
        }

        *__int128 v19 = v20;
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    uint64_t v17 = *(int *)(v4 + 88);
    uint64_t v18 = *(void *)(*(void *)v4 + 104LL) + (v17 << 6);
    if ((*(_WORD *)(v18 + 20) & 0x400) == 0
      || (uint64_t v6 = sub_1812B7E58((int *)(*(void *)(*(void *)v4 + 104LL) + (v17 << 6)))) == 0)
    {
      uint64_t v16 = sub_1812DAD3C(v4 + 32, *(_DWORD *)(v18 + 16), *(char **)(v18 + 8));
      if (v16)
      {
        *(void *)(v4 + 80) = v16;
        goto LABEL_21;
      }

      goto LABEL_45;
    }

    goto LABEL_46;
  }

  int v22 = *(char **)(v4 + 112);
  if (!v22)
  {
    int v23 = (uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64LL) << 6;
    if (a1) {
      uint64_t v24 = (char *)sub_1812F2264(a1, (uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64LL) << 6);
    }
    else {
      uint64_t v24 = (char *)sub_18126F0AC((uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64LL) << 6);
    }
    int v22 = v24;
    if (!v24)
    {
      *(void *)(v4 + 112) = 0LL;
LABEL_45:
      uint64_t v6 = 7;
      goto LABEL_46;
    }

    bzero(v24, v23);
    *(void *)(v4 + 112) = v22;
  }

  __int128 v19 = (uint64_t *)&v22[64 * (unint64_t)v8];
  uint64_t v21 = (_WORD *)v19 + 10;
  if (*((_WORD *)v19 + 10)) {
    goto LABEL_40;
  }
  if (v8 == *(__int16 *)(*(void *)(v4 + 120) + 52LL))
  {
    *__int128 v19 = *(void *)(v4 + 104);
LABEL_39:
    *uint64_t v21 = 4;
    goto LABEL_40;
  }

  uint64_t v6 = sub_1812D80D8( (uint64_t)&v22[64 * (unint64_t)v8],  (__int128 *)(*(void *)(*(void *)v4 + 104LL) + ((uint64_t)(int)(v8 + *(_DWORD *)(v4 + 88) + 1) << 6)));
  if (v6)
  {
LABEL_46:
    *(_DWORD *)(a1 + 80) = v6;
LABEL_47:
    sub_1812FA264(a1, v6);
    if (v6) {
      return sub_1813037C4(a1, v6);
    }
    goto LABEL_48;
  }

  if (v11)
  {
    uint64_t v15 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v15)(v11);
      goto LABEL_19;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    off_18C4653A8(v11);
    unint64_t v11 = (sqlite3_value **)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v15 = (void (**)(void *))&xmmword_18C465410;
      goto LABEL_18;
    }
  }

                          uint64_t v9 = (char *)*((void *)v9 + 3);
                          if (!v9)
                          {
                            uint64_t v5 = *(_DWORD *)(v3 + 52);
                            goto LABEL_7;
                          }

                          continue;
                        }
                      }
                    }
                  }
                }
              }
            }

            break;
          }

          uint64_t v4 = 7LL;
          goto LABEL_12;
        }

        uint64_t v8 = v37;
        if (v37) {
          goto LABEL_55;
        }
      }

      else
      {
        uint64_t v8 = 0;
LABEL_51:
        if (v8)
        {
LABEL_55:
          if (!v8 && a2) {
            goto LABEL_57;
          }
LABEL_60:
          int v29 = v35;
          goto LABEL_61;
        }
      }

      uint64_t v3 = *(void *)v3;
      if (!v3) {
        goto LABEL_55;
      }
    }
  }

  uint64_t v4 = 0LL;
  if (!a2) {
    goto LABEL_60;
  }
LABEL_57:
  int v29 = v35;
LABEL_61:
  if (v29)
  {
    int v30 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_67:
      (*v30)(v29);
      return v4;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v29);
    --qword_18C468B10;
    off_18C4653A8(v29);
    int v29 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v30 = &xmmword_18C465410;
      goto LABEL_67;
    }
  }

  return v4;
}

        *(void *)(v9 + 64) = v10;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v10 = *(void *)(v6 + 64);
      if (v10) {
        goto LABEL_8;
      }
    }

    *(void *)(v8 + 8) = v9;
    if (!v9)
    {
      *(void *)uint64_t v8 = 0LL;
      *(_BYTE *)(v8 + 49) = 2;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

        if ((a3 & 1) != 0) {
          unint64_t v11 = 13;
        }
        else {
          unint64_t v11 = 10;
        }
        sub_1812B47EC(v10, v11);
        uint64_t v12 = *(void *)(v10 + 112);
        if (v12)
        {
          if ((*(_WORD *)(v12 + 52) & 0x20) != 0)
          {
            int v23 = *(void *)(v12 + 40);
            --*(_DWORD *)(v23 + 152);
            *(void *)(v12 + 32) = *(void *)(v23 + 168);
            *(void *)(v23 + 168) = v12;
            (*(void (**)(void, void, void))(**(void **)(v23 + 72) + 144LL))( *(void *)(v23 + 72),  *(void *)(v23 + 200) * (*(_DWORD *)(v12 + 48) - 1),  *(void *)(v12 + 8));
          }

          else
          {
            sub_1812F9F44(v12);
          }
        }

        uint64_t v9 = 0LL;
        *a2 = v47;
        goto LABEL_46;
      }

      uint64_t v41 = sub_1812FAFE4(v27);
    }

    else
    {
      uint64_t v9 = v39[12];
      if ((_DWORD)v9)
      {
        char v46 = v39[12];
LABEL_92:
        if ((v40 & 0x20) == 0) {
          goto LABEL_53;
        }
LABEL_69:
        __int128 v34 = *(void *)(v27 + 40);
        --*(_DWORD *)(v34 + 152);
        *(void *)(v27 + 32) = *(void *)(v34 + 168);
        *(void *)(v34 + 168) = v27;
        (*(void (**)(void, void, void))(**(void **)(v34 + 72) + 144LL))( *(void *)(v34 + 72),  *(void *)(v34 + 200) * (*(_DWORD *)(v27 + 48) - 1),  *(void *)(v27 + 8));
        goto LABEL_46;
      }

      if (v39[46] <= v39[50]) {
        uint64_t v41 = sub_1812ABE24(v27);
      }
      else {
        uint64_t v41 = sub_1812FED50(v27);
      }
    }

    uint64_t v9 = v41;
    char v46 = v41;
    if ((_DWORD)v41)
    {
      char v27 = *(void *)(v10 + 112);
      uint64_t v40 = *(_WORD *)(v27 + 52);
      goto LABEL_92;
    }

    goto LABEL_38;
  }

    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
    if (!v13)
    {
      uint64_t v15 = *(void *)(v24 + 16);
      if (*(_DWORD *)(v15 + 4) == a2)
      {
        uint64_t v17 = *(unsigned int **)(v15 + 80);
      }

      else
      {
        uint64_t v17 = *(unsigned int **)(v24 + 8);
        *(void *)(v15 + 112) = v24;
        *(void *)(v15 + 72) = a1;
        *(void *)(v15 + 80) = v17;
        *(_DWORD *)(v15 + 4) = a2;
        if (a2 == 1) {
          uint64_t v18 = 100;
        }
        else {
          uint64_t v18 = 0;
        }
        *(_BYTE *)(v15 + 9) = v18;
      }

      uint64_t v14 = 0;
      uint64_t v12 = bswap32(*v17);
      goto LABEL_28;
    }

    uint64_t v14 = v13;
    goto LABEL_14;
  }

  if (v23 != a2) {
    goto LABEL_12;
  }
  uint64_t v15 = 0LL;
  uint64_t v14 = 101;
LABEL_28:
  *a4 = v12;
  if (a3)
  {
    *a3 = v15;
  }

  else if (v15)
  {
    uint64_t v20 = *(void *)(v15 + 112);
    if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
    {
      uint64_t v21 = *(void *)(v20 + 40);
      --*(_DWORD *)(v21 + 152);
      *(void *)(v20 + 32) = *(void *)(v21 + 168);
      *(void *)(v21 + 168) = v20;
      (*(void (**)(void, void, void))(**(void **)(v21 + 72) + 144LL))( *(void *)(v21 + 72),  *(void *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1),  *(void *)(v20 + 8));
    }

    else
    {
      sub_1812F9F44(v20);
    }
  }

  if (v14 == 101) {
    return 0LL;
  }
  else {
    return v14;
  }
}

  uint64_t v14 = *(void *)(v9 + 48);
  if (v14)
  {
    uint64_t v15 = *a2;
    if (*a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a2 + 1;
      do
      {
        uint64_t v16 = -1640531535 * (v16 + byte_1813C6343[v15]);
        uint64_t v18 = *v17++;
        uint64_t v15 = v18;
      }

      while (v18);
    }

    else
    {
      uint64_t v16 = 0;
    }

    uint64_t v24 = (_DWORD *)(v14 + 16LL * (v16 % *(_DWORD *)(v9 + 32)));
    uint64_t v6 = (uint64_t *)(v24 + 2);
    int v23 = *v24;
    if (!v23) {
      goto LABEL_3;
    }
    while (1)
    {
LABEL_28:
      uint64_t v6 = (uint64_t *)*v6;
      uint64_t v25 = (_BYTE *)v6[3];
      for (k = a2; ; ++k)
      {
        char v27 = *v25;
        int v28 = *k;
        if ((_DWORD)v27 != (_DWORD)v28) {
          break;
        }
        if (!*v25) {
          goto LABEL_4;
        }
LABEL_30:
        ++v25;
      }

      if (byte_1813C6343[v27] == byte_1813C6343[v28]) {
        goto LABEL_30;
      }
      if (!--v23) {
        goto LABEL_3;
      }
    }
  }

  uint64_t v6 = (uint64_t *)(v9 + 40);
  int v23 = *(_DWORD *)(v9 + 36);
  if (v23) {
    goto LABEL_28;
  }
LABEL_3:
  uint64_t v6 = &qword_18C550660;
LABEL_4:
  uint64_t result = v6[2];
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

        sqlite3_str_appendf( (sqlite3_str *)(a1 + 72),  v10,  *(unsigned int *)(a1 + 56),  *(unsigned int *)(a1 + 60),  *(unsigned int *)(a1 + 64),  va);
        goto LABEL_13;
      }

      *(_DWORD *)(a1 + 96) = v9 + 1;
      *(_BYTE *)(*(void *)(a1 + 80) + v9) = 10;
    }

    uint64_t v10 = *(const char **)(a1 + 48);
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  uint64_t v13 = (void *)sub_1812F2310(v10, v13, v12);
  if (v13) {
    goto LABEL_13;
  }
LABEL_15:
  if (a3) {
    sub_1812F20DC((void *)v10, a3);
  }
}

      uint64_t v17 = *(void *)(v17 + 64);
    }

    while (v17);
  }

  return result;
}

          uint64_t v21 = *(void *)(v21 + 40);
          if (!v21) {
            goto LABEL_32;
          }
        }

        int v22 = *(unsigned __int16 *)(v21 + 94);
LABEL_19:
        if (v22)
        {
          uint64_t v24 = 0LL;
          uint64_t v25 = v22;
          do
          {
            *((void *)&v38 + 1) = *(void *)(*(void *)(v21 + 64) + 8 * v24);
            uint64_t v26 = *(__int16 *)(*(void *)(v21 + 8) + 2 * v24);
            if (v26 == -2)
            {
              char v27 = *(unsigned __int8 **)(*(void *)(v21 + 80) + 24 * v24 + 8);
              if (*v27 == 113) {
                goto LABEL_26;
              }
              *(void *)&int v39 = *(void *)(*(void *)(v21 + 80) + 24 * v24 + 8);
            }

            else
            {
              *(void *)&int v39 = v43;
              LODWORD(v45) = v26;
            }

            char v27 = (unsigned __int8 *)&v38;
LABEL_26:
            int v28 = v25;
            int v29 = (unsigned __int8 **)(v18 + 2);
            while (sub_18131BA10(0LL, *v29, v27, v19) > 1)
            {
              v29 += 3;
              if (!--v28) {
                goto LABEL_12;
              }
            }

            ++v24;
          }

          while (v24 != v25);
        }

        *((void *)v8 + 7) = v21;
      }

    LODWORD(v11) = 0;
    goto LABEL_13;
  }

  int v22 = *(double *)v9;
  if (*(double *)v9 >= -9.22337204e18)
  {
    if (v22 <= 9.22337204e18) {
      *(void *)&unint64_t v11 = (uint64_t)v22;
    }
    else {
      LODWORD(v11) = -1;
    }
  }

  else
  {
    LODWORD(v11) = 0;
  }

    uint64_t v10 = 0;
    if (a2 != 2) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  uint64_t v10 = *(_DWORD *)(v6 + 16);
  if ((v9 & 0x400) != 0) {
    v10 += *(_DWORD *)v6;
  }
  if (a2 != 2)
  {
LABEL_13:
    unint64_t v11 = 0;
    uint64_t v12 = &byte_1813CEAEE;
    if (!v8) {
      return;
    }
    goto LABEL_49;
  }

    uint64_t result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_BYTE *)(a1 + 46) = 1;
    return result;
  }

  uint64_t v3 = 1;
  uint64_t v1 = 2000;
  int v2 = 1;
  if (*(_BYTE *)(a1 + 41)) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v4 = v3 < 3;
  if (v3 < 3) {
    v3 += 12;
  }
  uint64_t v5 = v1 - v4;
  uint64_t result = ((double)(int)(((-5243 * (__int16)v5) >> 19)
                        + ((-5243 * (__int16)v5) >> 31)
                        + (306001 * v3 + 306001) / 10000
                        + v2
                        + (36525 * v5 + 172251900) / 0x64u
                        + ((5243 * (__int16)v5) >> 21)
                        + ((5243 * (__int16)v5) >> 31)
                        + 2)
          + -1524.5)
         * 86400000.0;
  uint64_t v7 = (uint64_t)result;
  *(void *)a1 = (uint64_t)result;
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 43))
  {
    uint64_t result = *(double *)(a1 + 32) * 1000.0 + 0.5;
    uint64_t v8 = (uint64_t)result + 3600000LL * *(int *)(a1 + 20) + 60000LL * *(int *)(a1 + 24) + v7;
    *(void *)a1 = v8;
    if (*(_BYTE *)(a1 + 44))
    {
      *(void *)a1 = v8 - 60000LL * *(int *)(a1 + 28);
      *(_WORD *)(a1 + 42) = 0;
      *(_BYTE *)(a1 + 44) = 0;
    }
  }

  return result;
}

  sqlite3_log(21, "API call with %s database connection pointer", v3);
  return sub_1812CF36C(161256);
}

    uint64_t v5 = *(void *)(v1 + 24);
    if (v5)
    {
      uint64_t v6 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v5);
        uint64_t v5 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_19;
        }
        uint64_t v6 = &xmmword_18C465410;
      }

      uint64_t result = (*v6)(v5);
    }

    int v22 = (int)v16 - (int)a2 + 1;
    memcpy(v11, a2, v22);
    uint64_t v14 = (_DWORD)v11 + v22;
    goto LABEL_13;
  }

  sub_1813724BC(&v30, (unsigned __int8 **)&v35, &v32);
  uint64_t v14 = (int)v30;
LABEL_13:
  int v23 = *(unsigned __int8 **)(a5 + 40);
  uint64_t v24 = v14 - (_DWORD)v23;
  uint64_t v25 = v24 - 1;
  if (v24 >= 1)
  {
    uint64_t v26 = *(_DWORD *)(a5 + 48);
    char v27 = __OFSUB__(v26, v25);
    int v28 = v26 - v25;
    if (v28 < 0 == v27)
    {
      bzero(&v23[v25], v28);
      *(_DWORD *)(a5 + 48) = v25;
      int v23 = *(unsigned __int8 **)(a5 + 40);
    }
  }

  *a3 = v23;
  *a4 = *(_DWORD *)(a5 + 80);
  return 1LL;
}

  uint64_t v13 = v345;
  if (v345)
  {
    uint64_t v14 = (uint64_t (**)(char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v14)(v13);
      return v6;
    }

    uint64_t v15 = v10[366];
    if (v15) {
      xmmword_18C465400(v15);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
    --qword_18C468B10;
    off_18C4653A8(v13);
    uint64_t v13 = (char *)v10[366];
    if (v13)
    {
      uint64_t v14 = (uint64_t (**)(char *))&xmmword_18C465410;
      goto LABEL_18;
    }
  }

  return v6;
}

  uint64_t v6 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_17:
    (*v6)(v3);
    goto LABEL_18;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  off_18C4653A8(v3);
  uint64_t v3 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = &xmmword_18C465410;
    goto LABEL_17;
  }

  uint64_t v5 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v5)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v5 = &xmmword_18C465410;
    return (*v5)(v1);
  }

  return result;
}

      uint64_t v6 = *(void *)(v3 + 48);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        sub_18138D5A4(v6);
        uint64_t v8 = *(void **)(v7 + 64);
        if (v8)
        {
          *(void *)(v7 + 64) = 0LL;
          uint64_t v9 = (sqlite3_stmt *)v8[3];
          uint64_t v10 = (void *)v8[4];
          unint64_t v11 = v10[3];
          if (v11) {
            xmmword_18C465400(v11);
          }
          sub_1812F20DC(v10, v8);
          uint64_t v12 = v10[3];
          if (v12) {
            xmmword_18C465410(v12);
          }
          sqlite3_finalize(v9);
        }
      }

      uint64_t v13 = *(void **)(v1 + 32 * v2 + 56);
      if (v13)
      {
        while (1)
        {
          uint64_t v14 = v13[2];
          uint64_t v15 = (void *)v13[3];
          if (v14)
          {
            uint64_t v16 = *(void *)(v14 + 24);
            sub_18138D5A4(v14);
            uint64_t v17 = *(void **)(v16 + 64);
            if (v17)
            {
              *(void *)(v16 + 64) = 0LL;
              uint64_t v18 = (sqlite3_stmt *)v17[3];
              __int128 v19 = (void *)v17[4];
              uint64_t v20 = v19[3];
              if (v20) {
                xmmword_18C465400(v20);
              }
              sub_1812F20DC(v19, v17);
              uint64_t v21 = v19[3];
              if (v21) {
                xmmword_18C465410(v21);
              }
              sqlite3_finalize(v18);
            }
          }

          int v22 = v13[4];
          if (v22)
          {
            int v23 = &off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_36;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v22);
            --qword_18C468B10;
            off_18C4653A8(v22);
            int v22 = xmmword_18C468B70;
            if ((void)xmmword_18C468B70) {
              break;
            }
          }

        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t result = (uint64_t)sub_18138BCF4( a1,  (v6 << 31)
                          + ((unint64_t)a2[1] << 37)
                          + 0x1000000000LL
                          + *(int *)(v7 + 52));
        *(void *)uint64_t v7 = result;
        if (result) {
          return sub_181390E7C(v7);
        }
      }
    }
  }

  return result;
}

    uint64_t v21 = *(void *)(result + 32);
    *(void *)(result + 8) = v21;
    uint64_t v8 = (_DWORD)v14 - v21;
  }

  else
  {
    *(_DWORD *)(result + 40) = 0;
    uint64_t result = sub_181398B68(*(_DWORD **)(result + 24), a2, *(unsigned int **)(result + 48), result + 32);
    uint64_t v7 = *(void *)(v3 + 32);
    *(void *)uint64_t v3 = *(void *)(a2 + 120);
    *(void *)(v3 + 8) = v7;
    uint64_t v8 = *(_DWORD *)(v3 + 40);
  }

  *(_DWORD *)(v3 + 16) = v8;
  return result;
}

  uint64_t v7 = a1[1];
  sub_18139D2FC(v7);
  uint64_t v8 = (void *)v7[8];
  if (v8)
  {
    v7[8] = 0LL;
    uint64_t v9 = (sqlite3_stmt *)v8[3];
    uint64_t v10 = (void *)v8[4];
    unint64_t v11 = v10[3];
    if (v11) {
      xmmword_18C465400(v11);
    }
    sub_1812F20DC(v10, v8);
    uint64_t v12 = v10[3];
    if (v12) {
      xmmword_18C465410(v12);
    }
    sqlite3_finalize(v9);
  }

  uint64_t v6 = *((unsigned int *)v7 + 15);
  *((_DWORD *)v7 + 15) = 0;
LABEL_19:
  uint64_t v13 = **a1;
  if (!v13)
  {
    uint64_t v15 = "NULL";
    goto LABEL_29;
  }

  uint64_t v14 = *(unsigned __int8 *)(v13 + 113);
  if (v14 == 186)
  {
LABEL_23:
    uint64_t v15 = "unopened";
LABEL_29:
    sqlite3_log(21, "API call with %s database connection pointer", v15);
    sub_1812CF36C(186276);
    return v6;
  }

  if (v14 != 118)
  {
    if (v14 != 109)
    {
      uint64_t v15 = "invalid";
      goto LABEL_29;
    }

    goto LABEL_23;
  }

  uint64_t v16 = *(void *)(v13 + 24);
  if (v16)
  {
    xmmword_18C465400(v16);
    uint64_t v17 = *(void *)(v13 + 24);
    *(void *)(v13 + 56) = v5;
    if (v17) {
      xmmword_18C465410(v17);
    }
  }

  else
  {
    *(void *)(v13 + 56) = v5;
  }

  return v6;
}

      uint64_t v14 = (v8 - 1);
      goto LABEL_13;
    }
  }

        uint64_t v16 = v17;
        uint64_t v15 = 2 * v17;
        uint64_t v17 = (2 * v17) | 1;
      }

      while (v17 < v11);
    }
  }

  return result;
}

          unint64_t v11 = v14;
          if (!LOBYTE(v149[0])) {
            continue;
          }
LABEL_120:
          int v81 = 0;
          uint64_t v8 = (uint64_t *)a6;
          goto LABEL_121;
        }

        uint64_t v25 = "out of memory";
      }

      sub_1813C0F08((uint64_t)v146, v25, v17, v18, v19, v20, v21, v22, v138);
      goto LABEL_12;
    }

    uint64_t v37 = v15 - 1;
    uint64_t v38 = v15 + 8;
    do
    {
      uint64_t v40 = v38;
      uint64_t v41 = *((unsigned __int8 *)v37 + 1);
      if (v37[1] < 0) {
        int v39 = __maskrune(v41, 0x4000uLL);
      }
      else {
        int v39 = *(_DWORD *)(v12 + 4 * v41 + 60) & 0x4000;
      }
      ++v37;
      uint64_t v38 = v40 + 1;
    }

    while (v39);
    if (strncmp("header", v37, 6uLL))
    {
LABEL_40:
      int v42 = sub_1813C0F70("columns", 7, v15);
      if (v42)
      {
        if (v142 < 1)
        {
          unint64_t v11 = v14;
          v142 = atoi((const char *)v42);
          if (v142 <= 0)
          {
            unsigned int v92 = "column= value must be positive";
            goto LABEL_119;
          }

          continue;
        }

        unsigned int v92 = "more than one 'columns' parameter";
LABEL_119:
        sub_1813C0F08((uint64_t)v146, v92, a3, a4, (uint64_t)a5, a6, a7, a8, v138);
      }

      else
      {
        sub_1813C0F08((uint64_t)v146, "bad parameter: '%s'", a3, a4, (uint64_t)a5, a6, a7, a8, (char)v15);
      }

      goto LABEL_120;
    }

    int v43 = (char *)(v37 + 6);
    do
    {
      unsigned int v45 = (unsigned __int8 *)v43;
      char v46 = (unsigned __int8 *)v40;
      uint64_t v47 = *v43;
      if (v47 < 0) {
        uint64_t v44 = __maskrune(v47, 0x4000uLL);
      }
      else {
        uint64_t v44 = *(_DWORD *)(v12 + 4LL * v47 + 60) & 0x4000;
      }
      int v43 = (char *)(v45 + 1);
      ++v40;
    }

    while (v44);
    if (!*v45)
    {
LABEL_76:
      unint64_t v11 = 1LL;
      goto LABEL_77;
    }

    if (*v45 != 61) {
      goto LABEL_40;
    }
    do
    {
      char v49 = v46;
      char v50 = v45[1];
      else {
        int v48 = *(_DWORD *)(v12 + 4 * v50 + 60) & 0x4000;
      }
      ++v45;
      ++v46;
    }

    while (v48);
    int v52 = v45;
    for (m = "yes"; ; ++m)
    {
      BOOL v54 = *(unsigned __int8 *)m;
      unsigned int v55 = *v52;
      if ((_DWORD)v54 != (_DWORD)v55) {
        break;
      }
      if (!*m) {
        goto LABEL_76;
      }
LABEL_61:
      ++v52;
    }

    if (byte_1813C6343[v54] == byte_1813C6343[v55]) {
      goto LABEL_61;
    }
    int v56 = v45;
    for (n = "on"; ; ++n)
    {
      int v58 = *(unsigned __int8 *)n;
      v59 = *v56;
      if ((_DWORD)v58 != (_DWORD)v59) {
        break;
      }
      if (!*n) {
        goto LABEL_76;
      }
LABEL_67:
      ++v56;
    }

    if (byte_1813C6343[v58] == byte_1813C6343[v59]) {
      goto LABEL_67;
    }
    uint64_t v60 = v45;
    for (iuint64_t i = "true"; ; ++ii)
    {
      uint64_t v62 = *(unsigned __int8 *)ii;
      uint64_t v63 = *v60;
      if ((_DWORD)v62 != (_DWORD)v63) {
        break;
      }
      if (!*ii) {
        goto LABEL_76;
      }
LABEL_73:
      ++v60;
    }

    if (byte_1813C6343[v62] == byte_1813C6343[v63]) {
      goto LABEL_73;
    }
    uint64_t v64 = *v45;
    if (v64 == 49 && !v45[1]) {
      goto LABEL_76;
    }
    int v65 = v49;
    uint64_t v66 = *v45;
    uint64_t v67 = "no";
    while (2)
    {
      int v69 = *(unsigned __int8 *)v67;
      if ((_DWORD)v69 == v66)
      {
        if (!v66) {
          goto LABEL_96;
        }
LABEL_83:
        ++v67;
        int v68 = *v65++;
        uint64_t v66 = v68;
        continue;
      }

      break;
    }

    if (byte_1813C6343[v69] == byte_1813C6343[v66]) {
      goto LABEL_83;
    }
    char v70 = v49;
    size_t v71 = *v45;
    size_t v72 = "off";
    while (2)
    {
      int v74 = *(unsigned __int8 *)v72;
      if ((_DWORD)v74 == v71)
      {
        if (!v71) {
          goto LABEL_96;
        }
LABEL_88:
        ++v72;
        __int16 v73 = *v70++;
        size_t v71 = v73;
        continue;
      }

      break;
    }

    if (byte_1813C6343[v74] == byte_1813C6343[v71]) {
      goto LABEL_88;
    }
    v75 = *v45;
    uint64_t v76 = "false";
    while (2)
    {
      uint64_t v78 = *(unsigned __int8 *)v76;
      if ((_DWORD)v78 == v75)
      {
        if (!v75) {
          goto LABEL_96;
        }
        goto LABEL_93;
      }

      if (byte_1813C6343[v78] == byte_1813C6343[v75])
      {
LABEL_93:
        ++v76;
        uint64_t v77 = *v49++;
        v75 = v77;
        continue;
      }

      break;
    }

    if (v64 != 48 || v45[1]) {
      goto LABEL_40;
    }
LABEL_96:
    unint64_t v11 = 0LL;
LABEL_77:
    if ((v14 & 0x80000000) == 0)
    {
      unsigned int v92 = "more than one 'header' parameter";
      goto LABEL_119;
    }
  }

  uint64_t v80 = v143;
  uint64_t v79 = v144;
  uint64_t v8 = (uint64_t *)a6;
  if ((v143 != 0LL) != (v144 == 0LL)) {
    goto LABEL_101;
  }
  if ((v142 < 1 || (_DWORD)v11 == 1) && sub_1813C1074((FILE **)v146, v143, v144))
  {
    int v81 = 0;
    goto LABEL_121;
  }

  if (sqlite3_initialize())
  {
    *a5 = 0LL;
    goto LABEL_108;
  }

  v88 = sub_18126F0AC(56LL);
  *a5 = v88;
  if (!v88)
  {
LABEL_108:
    sub_1813C0F08((uint64_t)v146, "out of memory", v82, v83, v84, v85, v86, v87, v138);
    int v81 = 7;
    goto LABEL_121;
  }

  int v90 = v88;
  *(void *)(v88 + 48) = 0LL;
  *(_OWORD *)(v88 + 16) = 0u;
  *(_OWORD *)(v88 + 32) = 0u;
  *(_OWORD *)v88 = 0u;
  int v91 = v145;
  if (!v145)
  {
    int v93 = v142;
    if (sqlite3_initialize() || (v104 = sub_18126F0AC(32LL)) == 0)
    {
      unsigned int v94 = (sqlite3_str *)&unk_18C54FA08;
    }

    else
    {
      unsigned int v94 = (sqlite3_str *)v104;
      *(void *)v104 = 0LL;
      *(void *)(v104 + 8) = 0LL;
      *(_DWORD *)(v104 + 16) = 0;
      *(void *)(v104 + 20) = 2147483645LL;
      *(_WORD *)(v104 + 28) = 0;
    }

    sqlite3_str_appendf(v94, "CREATE TABLE x(");
    if (v142 < 0 && (int)v11 <= 0)
    {
      int v93 = 0;
      do
      {
        sub_1813C11BC((uint64_t)v146, v105, v106, v107, v108, v109, v110, v111);
        ++v93;
      }

      while ((_DWORD)v147 == 44);
    }

    if (v93 < 1 || (int)v11 > 0)
    {
      __int128 v112 = 0;
      __int128 v113 = v93;
      __int128 v115 = v93 < 0 && (_DWORD)v11 != 0;
      __int128 v116 = &byte_1813CEAEE;
      do
      {
        sub_1813C11BC((uint64_t)v146, v105, v106, v107, v108, v109, v110, v111);
        __int128 v118 = v113 > 0 && v112 < v113 || v115;
        if (v118 == 1)
        {
          char v138 = (char)v116;
          sqlite3_str_appendf(v94, "%s%w TEXT");
          ++v112;
          __int128 v116 = ",";
        }
      }

      while ((_DWORD)v147 == 44);
      if ((v113 & 0x80000000) == 0)
      {
        if (v112 < v113)
        {
          __int128 v119 = v112 + 1;
          sqlite3_str_appendf(v94, "%sc%d TEXT", v116, v119);
          while (v113 != v119)
            sqlite3_str_appendf(v94, "%sc%d TEXT", ",", ++v119);
        }

        __int128 v112 = v113;
      }
    }

    else
    {
      sqlite3_str_appendf(v94, "%sc%d TEXT", &byte_1813CEAEE, 0);
      if (v93 == 1)
      {
        __int128 v112 = 1;
      }

      else
      {
        for (juint64_t j = 1; jj != v93; ++jj)
          sqlite3_str_appendf(v94, "%sc%d TEXT", ",", jj);
        __int128 v112 = v93;
      }
    }

    *(_DWORD *)(v90 + 48) = v112;
    sqlite3_str_appendf(v94, ")");
    uint64_t v121 = sqlite3_str_finish(v94);
    char v145 = v121;
    if (v121)
    {
      int v91 = v121;
      uint64_t v80 = v143;
      uint64_t v79 = v144;
      goto LABEL_190;
    }

    sub_1813C0F08((uint64_t)v146, "out of memory", v122, v123, v124, v125, v126, v127, v138);
    int v81 = 7;
LABEL_204:
    sub_1813C072C(v90);
LABEL_121:
    char v95 = v143;
    if (!v143) {
      goto LABEL_128;
    }
    int v96 = (void (**)(const char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v95);
      --qword_18C468B10;
      off_18C4653A8(v95);
      char v95 = (const char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_128:
        char v97 = v144;
        if (!v144) {
          goto LABEL_135;
        }
        uint64_t v98 = (void (**)(FILE *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v97);
          --qword_18C468B10;
          off_18C4653A8(v97);
          char v97 = (FILE *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70)
          {
LABEL_135:
            int v99 = v145;
            if (!v145) {
              goto LABEL_142;
            }
            int v100 = (uint64_t (**)(char *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v99);
              --qword_18C468B10;
              off_18C4653A8(v99);
              int v99 = (char *)xmmword_18C468B70;
              if (!(void)xmmword_18C468B70)
              {
LABEL_142:
                if (!LOBYTE(v149[0])) {
                  goto LABEL_151;
                }
                uint64_t v101 = *v8;
                if (*v8)
                {
                  int v102 = &off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v101);
                    --qword_18C468B10;
                    off_18C4653A8(v101);
                    uint64_t v101 = xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70) {
                      goto LABEL_150;
                    }
                    int v102 = &xmmword_18C465410;
                  }

                  (*v102)(v101);
                }

LABEL_17:
    if (!a2)
    {
      if (v3[3]
        && (uint64_t v8 = (void **)(*((uint64_t (**)(void, uint64_t, void))&xmmword_18C465458 + 1))(v3[9], 1LL, 0LL)) != 0LL)
      {
        bzero(*v8, *((int *)v3 + 10));
        a2 = 1;
      }

      else
      {
        a2 = 0;
      }
    }

    return (void *)xmmword_18C465478(v3[9], a2 + 1);
  }

  return result;
}

      ++v29;
      unint64_t v11 = (uint64_t)v31;
    }

    while (v29 < *v31);
  }

  else
  {
    if (v235) {
      *uint64_t v20 = *v235;
    }
    if ((v9 & 0x100) != 0 && (*(_BYTE *)(v14 + 96) & 0x10) == 0) {
      *(_BYTE *)(v21 + 67) = 1;
    }
    sub_18131CCF8((uint64_t *)a1, 0, "SCAN CONSTANT ROW", v24, v25, v26, v27, v28, v224);
    int v30 = v21;
  }

  int v57 = *(_DWORD *)(v30 + 124);
  if (v57 >= 1)
  {
    int v58 = v57 + 1;
    do
    {
      sub_1812A2470((int *)v11, v240, v58 - 2, v24, v25, v26, v27, v28, v224);
      --v58;
    }

    while (v58 > 1);
  }

  v59 = v246;
  uint64_t v60 = v233;
  if (a6 && *(void *)(a6 + 96)) {
    sub_18132AE20((unsigned __int8 *)v240, a6);
  }
  unsigned int v61 = v247;
  if (*(_DWORD *)(v246 + 48)) {
    goto LABEL_138;
  }
  if (*(int *)(v247 + 132) >= 1)
  {
    uint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v64 = v240;
    do
    {
      int v65 = v64[4] + v62;
      if ((*(_WORD *)(v65 + 18) & 2) == 0 && !*(void *)(v65 + 48))
      {
        uint64_t v66 = *(void *)v65;
        if (!v229
          || (v256 = 0u, v253 = 0LL, WORD2(v256) = 1, v254 = sub_1813337A4, v255 = (unint64_t)sub_18131C570, !v66)
          || (sub_18131C57C((uint64_t)&v253, v66), unsigned int v61 = v247, WORD2(v256)))
        {
          if ((*(_BYTE *)(v66 + 4) & 2) == 0 || (*(_BYTE *)(v11 + 68) & 0x40) == 0)
          {
            sub_1812B0714(v246, v66);
            unsigned int v61 = v247;
            *(_WORD *)(v65 + 18) |= 4u;
          }
        }
      }

      ++v63;
      uint64_t v64 = (uint64_t *)v249;
      v62 += 56LL;
    }

    while (v63 < *(int *)(v249 + 28));
  }

  uint64_t v67 = v231;
  if ((v231 & 0x100) != 0)
  {
    if ((*(_BYTE *)(v233 + 96) & 0x10) != 0)
    {
      uint64_t v67 = v231 & 0xFEFF;
      *(_WORD *)(v61 + 60) &= ~0x100u;
    }

    else if (sub_18132AF60(v246, v11, (uint64_t)v240, a5))
    {
      *(_BYTE *)(v247 + 67) = 1;
    }

    else if (!v235)
    {
      *(_WORD *)(v247 + 60) |= 0x80u;
      *(void *)(v247 + 16) = a5;
    }
  }

  v232 = v67;
  int v68 = v248;
  v226 = v11;
  if (v229 != 1) {
    goto LABEL_79;
  }
  if ((*(_WORD *)(v248 + 60) & 0x20) != 0) {
    goto LABEL_79;
  }
  int v69 = *(void *)(v248 + 8);
  char v70 = *(void *)(v69 + 40);
  if (*(_BYTE *)(v70 + 63) == 1 || (*(_WORD *)(v69 + 69) & 3) != 0) {
    goto LABEL_79;
  }
  __int128 v111 = *(_DWORD *)(v69 + 72);
  v242 = v248;
  __int128 v112 = v248 + 104;
  __int128 v113 = v250;
  *(_DWORD *)(v250 + 48) = 0;
  *(_WORD *)(v113 + 54) = 0;
  v253 = v68 + 104;
  v254 = (uint64_t (*)(uint64_t, unsigned __int8 *))(v68 + 104);
  BYTE8(v256) = 0;
  v255 = 0uLL;
  *(void *)&v256 = 0x8200000000LL;
  HIDWORD(v256) = v111;
  *(_WORD *)((char *)&v256 + 9) = 257;
  v257 = -1;
  while (1)
  {
    uint64_t v114 = sub_181333910(&v253);
    if (!v114) {
      break;
    }
    if (!*((void *)v114 + 5))
    {
      *(_DWORD *)(v113 + 48) = 4353;
      **(void **)(v113 + 64) = v114;
      *(_WORD *)(v113 + 52) = 1;
      *(_WORD *)(v113 + 24) = 1;
      __int128 v115 = 33;
      unsigned int v61 = v247;
      goto LABEL_151;
    }
  }

  __int128 v116 = *(void *)(v70 + 16);
  unsigned int v61 = v247;
  while (v116)
  {
    if (*(_BYTE *)(v116 + 98) && !*(void *)(v116 + 72) && *(unsigned __int16 *)(v116 + 94) <= 3u)
    {
      if ((*(_WORD *)(v116 + 99) & 8) != 0) {
        __int128 v117 = 130;
      }
      else {
        __int128 v117 = 2;
      }
      if (*(_WORD *)(v116 + 94))
      {
        __int128 v118 = 0LL;
        while (1)
        {
          v253 = v112;
          v254 = (uint64_t (*)(uint64_t, unsigned __int8 *))v112;
          BYTE8(v256) = 0;
          v255 = 0uLL;
          LODWORD(v256) = 0;
          DWORD1(v256) = v117;
          HIDWORD(v256) = v111;
          *(_WORD *)((char *)&v256 + 9) = 257;
          __int128 v119 = *(__int16 *)(*(void *)(v116 + 8) + 2 * v118);
          uint64_t v120 = *(void *)(v116 + 24);
          if (*(unsigned __int16 *)(v120 + 52) == *(unsigned __int16 *)(*(void *)(v116 + 8) + 2 * v118))
          {
            LOWORD(v119) = -1;
          }

          else if ((v119 & 0x80000000) != 0)
          {
            if (v119 == -2)
            {
              *((void *)&v255 + 1) = *(void *)(*(void *)(v116 + 80) + 24 * v118 + 8);
              *(void *)&v255 = *(void *)(*(void *)(v116 + 64) + 8 * v118);
              v257 = -2;
              uint64_t v121 = sub_181333C68((uint64_t)&v253);
              goto LABEL_172;
            }
          }

          else
          {
            BYTE8(v256) = *(_BYTE *)(*(void *)(v120 + 8) + 16LL * v119 + 9);
            *(void *)&v255 = *(void *)(*(void *)(v116 + 64) + 8 * v118);
          }

          v257 = v119;
          uint64_t v121 = sub_181333910(&v253);
LABEL_172:
          if (!v121)
          {
LABEL_154:
            unsigned int v61 = v247;
            goto LABEL_155;
          }

          while (*((void *)v121 + 5))
          {
            uint64_t v121 = sub_181333910(&v253);
            if (!v121) {
              goto LABEL_154;
            }
          }

          *(void *)(*(void *)(v113 + 64) + 8 * v118++) = v121;
          unsigned int v61 = v247;
        }
      }

      LODWORD(v118) = 0;
LABEL_155:
      if ((_DWORD)v118 == *(unsigned __int16 *)(v116 + 94))
      {
        *(_DWORD *)(v113 + 48) = 4609;
        if ((*(_WORD *)(v116 + 99) & 0x20) != 0 || (*(void *)(v116 + 104) & *(void *)(v69 + 88)) == 0LL) {
          *(_DWORD *)(v113 + 48) = 4673;
        }
        *(_WORD *)(v113 + 52) = v118;
        *(_WORD *)(v113 + 24) = v118;
        __int128 v115 = 39;
        *(void *)(v113 + 32) = v116;
LABEL_151:
        *(_WORD *)(v113 + 20) = v115;
        break;
      }
    }

    __int128 v116 = *(void *)(v116 + 40);
  }

  int v122 = *(_DWORD *)(v113 + 48);
  if (v122)
  {
    *(_WORD *)(v113 + 22) = 1;
    *(void *)(v242 + 952) = v113;
    *(void *)(v113 + 8) = 1LL;
    *(_DWORD *)(v242 + 860) = v111;
    *(_WORD *)(v242 + 70) = 1;
    uint64_t v123 = *(_DWORD **)(v242 + 16);
    uint64_t v60 = v233;
    __int128 v110 = v229;
    if (v123) {
      *(_BYTE *)(v242 + 65) = *v123;
    }
    v59 = v246;
    if ((*(_WORD *)(v242 + 60) & 0x100) != 0) {
      *(_BYTE *)(v242 + 67) = 1;
    }
    if (BYTE9(v256) >= 2u) {
      *(_DWORD *)(v113 + 48) = v122 | 0x200000;
    }
    goto LABEL_186;
  }

  int v68 = v248;
LABEL_79:
  size_t v71 = *(void *)(v68 + 8) + 8LL;
  size_t v72 = v71 + 104LL * *(unsigned __int8 *)(v68 + 64);
  v238 = **(void **)v68;
  __int16 v73 = v250;
  HIDWORD(v252) = 20000;
  if (v71 < v72)
  {
    int v74 = 0LL;
    v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0LL;
    uint64_t v78 = 0;
    uint64_t v79 = v68 + 604;
    v241 = v68;
    v244 = v250;
    do
    {
      *(_BYTE *)(v73 + 16) = v78;
      HIDWORD(v252) += 1000;
      uint64_t v80 = *(_DWORD *)(v71 + 64);
      int v81 = *(_DWORD *)(v68 + 600);
      if (v81 == v80)
      {
        char v82 = 1LL;
      }

      else
      {
        int v83 = *(unsigned int *)(v68 + 596);
        if ((int)v83 < 2)
        {
LABEL_89:
          char v82 = 0LL;
        }

        else
        {
          uint64_t v84 = 0LL;
          uint64_t v85 = v83 - 1;
          while (*(_DWORD *)(v79 + 4 * v84) != v80)
          {
            if (v85 == ++v84) {
              goto LABEL_89;
            }
          }

          char v82 = 1LL << (v84 + 1);
        }
      }

      *(void *)(v73 + 8) = v82;
      int v86 = *(unsigned __int8 *)(v71 + 60);
      char v87 = v76 | v86 & 0x62;
      if (v75) {
        v88 = v74;
      }
      else {
        v88 = 0LL;
      }
      uint64_t v89 = (v86 & 0x40) != 0 || v75;
      int v90 = (v86 >> 4) & 1;
      if (v87) {
        uint64_t v76 = v90;
      }
      else {
        uint64_t v76 = 0;
      }
      if (v87) {
        v75 = v89;
      }
      else {
        v75 = v75;
      }
      if (v87) {
        int v91 = v77 | v74;
      }
      else {
        int v91 = v88;
      }
      if (*(_BYTE *)(*(void *)(v71 + 32) + 63LL) == 1)
      {
        unsigned int v92 = v71 + 104;
        if (v71 + 104 >= v72)
        {
          int v93 = 0LL;
        }

        else
        {
          int v93 = 0LL;
          unsigned int v94 = v71;
          do
          {
            int v96 = v92;
            if (v93 || (*(_BYTE *)(v94 + 164) & 0x22) != 0)
            {
              char v97 = *(_DWORD *)(v94 + 168);
              if (v81 == v97)
              {
                char v95 = 1LL;
              }

              else
              {
                uint64_t v98 = *(unsigned int *)(v68 + 596);
                if ((int)v98 < 2)
                {
LABEL_119:
                  char v95 = 0LL;
                }

                else
                {
                  int v99 = 0LL;
                  int v100 = v98 - 1;
                  while (*(_DWORD *)(v79 + 4 * v99) != v97)
                  {
                    if (v100 == ++v99) {
                      goto LABEL_119;
                    }
                  }

                  char v95 = 1LL << (v99 + 1);
                }
              }

              v93 |= v95;
            }

            else
            {
              int v93 = 0LL;
            }

            unsigned int v92 = v96 + 104;
            unsigned int v94 = v96;
          }

          while (v96 + 104 < v72);
        }

        int v74 = v91;
        uint64_t v101 = sub_181333D7C((uint64_t)&v248, v91, v93);
        if (v101) {
          goto LABEL_128;
        }
      }

      else
      {
        int v74 = v91;
        uint64_t v101 = sub_18133472C(&v248, v91);
        int v93 = 0LL;
        if (v101) {
          goto LABEL_128;
        }
      }

      if (!*(_BYTE *)(v249 + 17))
      {
        __int16 v73 = v244;
        v77 |= *(void *)(v244 + 8);
        goto LABEL_132;
      }

      uint64_t v101 = sub_18133509C(&v248, v74, v93);
LABEL_128:
      __int16 v73 = v244;
      v77 |= *(void *)(v244 + 8);
      if (v101 == 101)
      {
        sqlite3_log(28, "abbreviated query algorithm search");
        goto LABEL_82;
      }

      if (v101) {
        goto LABEL_134;
      }
LABEL_132:
      if (*(_BYTE *)(v238 + 103)) {
        break;
      }
LABEL_82:
      ++v78;
      v71 += 104LL;
      int v68 = v241;
    }

    while (v71 < v72);
  }

  uint64_t v101 = 0;
LABEL_134:
  int v102 = *(void **)(v73 + 64);
  if (v102 != (void *)(v73 + 80))
  {
    sub_1812F20DC((void *)v238, v102);
    *(void *)(v73 + 64) = v73 + 80;
    *(_WORD *)(v73 + 56) = 3;
  }

  sub_1813365A4((void *)v238, v73);
  *(_WORD *)(v73 + 52) = 0;
  *(_DWORD *)(v73 + 48) = 0;
  v59 = v246;
  unsigned int v61 = v247;
  uint64_t v60 = v233;
  unint64_t v11 = v226;
  if (v101 || (sub_18132B214(v247, 0), unsigned int v61 = v247, *(_BYTE *)(v233 + 103)))
  {
LABEL_138:
    if (v61) {
      goto LABEL_139;
    }
    return v61;
  }

  __int128 v110 = v229;
  if (*(void *)(v247 + 16))
  {
    sub_18132B214(v247, (__int16)(*(_WORD *)(v247 + 70) + 1));
    unsigned int v61 = v247;
    if (*(_BYTE *)(v233 + 103)) {
      goto LABEL_139;
    }
LABEL_186:
    if (*(void *)(v61 + 16)) {
      goto LABEL_189;
    }
  }

  if ((*(_BYTE *)(v60 + 49) & 0x10) != 0)
  {
    sub_18132BD98(v61);
    unsigned int v61 = v247;
  }

  if (!v8)
  {
    __int128 v33 = v128 + ((v15 & 1) == 0) + v19;
    uint64_t result = *(void *)(a1 + 16);
    __int128 v34 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v34)
    {
      uint64_t result = sub_18131044C(result, 79LL, a4, v33, a6, v26, v27, v28);
    }

    else
    {
      *(_DWORD *)(result + 144) = v34 + 1;
      __int128 v35 = *(void *)(result + 136) + 40LL * v34;
      *(_DWORD *)__int128 v35 = 79;
      *(_DWORD *)(v35 + 4) = a4;
      *(_DWORD *)(v35 + 8) = v33;
      *(_DWORD *)(v35 + 12) = a6;
      *(void *)(v35 + 24) = 0LL;
      *(void *)(v35 + 32) = 0LL;
      *(void *)(v35 + 16) = 0LL;
    }
  }

      int v28 = "null";
      goto LABEL_18;
    }

    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v24 + 4 * (*(__int16 *)(v24 + 64) + v25) + 112);
    if (v26 < 0x80) {
      char v46 = byte_1813C6D70[v26];
    }
    else {
      char v46 = (v26 - 12) >> 1;
    }
    unsigned int v45 = 0LL;
    int v23 = 0LL;
    *(_DWORD *)a1 = v46;
    uint64_t v47 = *(void *)(v24 + 40);
    *(void *)(a1 + 16) = v47;
    *(_BYTE *)(v47 + 1) |= 0x10u;
    *(_BYTE *)(*(void *)(v47 + 8) + 19LL) = 1;
  }

  else
  {
    int v29 = *(sqlite3_stmt **)(a1 + 24);
    if (v29)
    {
      int v30 = sqlite3_finalize(v29);
      *(void *)(a1 + 24) = 0LL;
      uint64_t v37 = *(sqlite3 **)(a1 + 32);
      if ((_DWORD)v30)
      {
        int v23 = v30;
        uint64_t v38 = sqlite3_errmsg(v37);
        unsigned int v45 = sub_18127F588((uint64_t)v37, "%s", v39, v40, v41, v42, v43, v44, v38);
      }

      else
      {
        unsigned int v45 = sub_18127F588((uint64_t)v37, "no such rowid: %lld", v31, v32, v33, v34, v35, v36, v12);
        int v23 = 1LL;
      }
    }

    else
    {
      unsigned int v45 = 0LL;
    }
  }

    int v28 = 0LL;
  }

  int v29 = 0LL;
  int v30 = 0LL;
  int v31 = 0;
  int v32 = 0;
  LODWORD(v33) = 0;
  if (!*((_BYTE *)db + 111))
  {
LABEL_19:
    v59 = v27;
    unsigned int v61 = v10;
    uint64_t v63 = v28;
    uint64_t v60 = v9;
    __int128 v34 = v29;
    __int128 v35 = (char)v14;
    LODWORD(v14) = v31;
    __int128 v36 = v32;
    uint64_t v37 = v30;
    sub_1812FA0B4((uint64_t)db);
    int v30 = v37;
    int v32 = v36;
    int v31 = (int)v14;
    LOBYTE(v14) = v35;
    int v29 = v34;
    uint64_t v17 = pAutoinc;
    uint64_t v9 = v60;
    uint64_t v10 = v61;
    int v28 = v63;
    char v27 = v59;
  }

    if (a2)
    {
      while (1)
      {
        unint64_t v11 = *(unsigned __int8 *)(a1 + 22);
        if (v11 >= 4 && v11 != 5) {
          break;
        }
        if (*(_BYTE *)(a1 + 17)) {
          goto LABEL_31;
        }
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 4LL);
        if ((_DWORD)result != 5)
        {
          if ((_DWORD)result) {
            return result;
          }
LABEL_31:
          *(_BYTE *)(a1 + 22) = 4;
          goto LABEL_39;
        }

        uint64_t v13 = (*(uint64_t (**)(void))(a1 + 232))(*(void *)(a1 + 240));
        uint64_t result = 5LL;
        if (!v13) {
          return result;
        }
      }
    }

    goto LABEL_39;
  }

  if (!*(_BYTE *)(a1 + 8)) {
    goto LABEL_38;
  }
  uint64_t v6 = (_BYTE *)(v5 + 63);
  if (*(_BYTE *)(v5 + 63)) {
    goto LABEL_38;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 22);
  if (v7 < 4 || v7 == 5)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      *(_BYTE *)(a1 + 22) = 4;
    }

    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 4LL);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v5 = *(void *)(a1 + 344);
      uint64_t v14 = *(unsigned __int8 *)(v5 + 63);
      uint64_t v6 = (_BYTE *)(v5 + 63);
      *(_BYTE *)(a1 + 22) = 4;
      if (v14) {
        goto LABEL_37;
      }
    }
  }

  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112LL))( *(void *)(v5 + 8),  (*(__int16 *)(v5 + 60) + 3),  1LL,  5LL);
  uint64_t v5 = *(void *)(a1 + 344);
LABEL_37:
  *uint64_t v6 = 1;
LABEL_38:
  if (*(_BYTE *)(v5 + 64))
  {
LABEL_39:
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 21) = 2;
    uint64_t v15 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = v15;
    *(_DWORD *)(a1 + 44) = v15;
    *(_DWORD *)(a1 + 36) = v15;
    *(void *)(a1 + 96) = 0LL;
    return result;
  }

  if (*(_BYTE *)(v5 + 66)) {
    return 8LL;
  }
  if (*(_BYTE *)(v5 + 63)
    || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112LL))( *(void *)(v5 + 8),  0LL,  1LL,  10LL),  !(_DWORD)result))
  {
    *(_BYTE *)(v5 + 64) = 1;
    uint64_t v16 = **(uint64_t ***)(v5 + 48);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    __int128 v19 = v16[2];
    uint64_t v20 = v16[3];
    uint64_t v21 = v16[4];
    int v22 = v16[5];
    if (*(void *)(v5 + 72) == v17
      && *(void *)(v5 + 80) == v18
      && *(void *)(v5 + 88) == v19
      && *(void *)(v5 + 96) == v20
      && *(void *)(v5 + 104) == v21
      && *(void *)(v5 + 112) == v22)
    {
      goto LABEL_39;
    }

    if (!*(_BYTE *)(v5 + 63)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112LL))( *(void *)(v5 + 8),  0LL,  1LL,  9LL);
    }
    *(_BYTE *)(v5 + 64) = 0;
    return 517LL;
  }

  return result;
}

  *unint64_t v11 = 0LL;
LABEL_18:
  int v2 = 7LL;
LABEL_19:
  if (*v7)
  {
    (*(void (**)(uint64_t))(*(void *)*v7 + 8LL))(*v7);
    uint64_t v12 = *v7;
    if (*v7)
    {
      uint64_t v13 = (void (**)(uint64_t))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_26:
        (*v13)(v12);
        goto LABEL_27;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v12);
      --qword_18C468B10;
      off_18C4653A8(v12);
      uint64_t v12 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v13 = (void (**)(uint64_t))&xmmword_18C465410;
        goto LABEL_26;
      }
    }
  }

    uint64_t v6 = 5LL;
    uint64_t v7 = *(void *)(v4 + 32);
    if (!v7) {
      return v6;
    }
    goto LABEL_22;
  }

  if (*(_DWORD *)(a1 + 16) != 1) {
    goto LABEL_21;
  }
LABEL_20:
  *(_DWORD *)(v4 + 52) = 1;
LABEL_21:
  uint64_t v6 = 0LL;
  *(_DWORD *)(a1 + 16) = a2;
  uint64_t v7 = *(void *)(v4 + 32);
  if (v7) {
LABEL_22:
  }
    xmmword_18C465410(v7);
  return v6;
}

        *(void *)(a2 + 16) = 0LL;
        return result;
      }
    }

    uint64_t result = (uint64_t)memcpy(v9, v2, v8);
    goto LABEL_7;
  }

  return result;
}

    uint64_t v8 = 0LL;
LABEL_18:
    uint64_t v14 = *(void **)v9;
    uint64_t v15 = v11 - 1;
    *(_DWORD *)(v9 + 24) = v15;
    if (!v15)
    {
      uint64_t v16 = *(void *)(v9 + 16);
      uint64_t v17 = v14;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 32LL))(v16);
        uint64_t v17 = *(void **)v9;
      }

      uint64_t v18 = *(void *)(v9 + 8);
      __int128 v19 = *(_DWORD *)(v18 + 16) - 1;
      *(_DWORD *)(v18 + 16) = v19;
      if (!v19)
      {
        uint64_t v20 = *(void (**)(void))(v18 + 32);
        if (v20) {
          v20(*(void *)(v18 + 24));
        }
        sub_1812F20DC(v17, (void *)v18);
      }

      sub_1812F20DC(v14, (void *)v9);
    }

    goto LABEL_4;
  }

  return 0LL;
}

    *((void *)a1 + 3) = 0LL;
    if (v20)
    {
      *((_DWORD *)a1 + 1) = v20;
      int v2 = *a1;
    }

    else
    {
      int v2 = *a1;
      if (!*((_DWORD *)a1 + 1)) {
        goto LABEL_22;
      }
    }

    if (!v2)
    {
      int v2 = 2;
      *a1 = 2;
    }

      *((_WORD *)a1 + 43) = v5 - 1;
      if (!*(_BYTE *)(v4 + 1) || *(_BYTE *)(v4 + 8)) {
        return 0LL;
      }
      a1[1] &= 0xF1u;
      *((_WORD *)a1 + 35) = 0;
      int v2 = *a1;
      if (*a1) {
        goto LABEL_2;
      }
    }

    unint64_t v11 = bswap32(*(_DWORD *)(*(void *)(v4 + 80)
                            + ((*(unsigned __int8 *)(*(void *)(v4 + 96) + 2 * v5 + 1) | (*(unsigned __int8 *)(*(void *)(v4 + 96) + 2 * v5) << 8)) & (unint64_t)*(unsigned __int16 *)(v4 + 26))));
    while (1)
    {
      uint64_t result = sub_18129BA78((uint64_t)a1, v11);
      if ((_DWORD)result) {
        break;
      }
      uint64_t v12 = *((void *)a1 + 17);
      if (*(_BYTE *)(v12 + 8))
      {
        uint64_t result = 0LL;
        *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24) - 1;
        return result;
      }

      unint64_t v11 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v12 + 9) + *(void *)(v12 + 80) + 8LL));
      *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24);
    }
  }

  return result;
}

    if (v4[6])
    {
      uint64_t v12 = sub_18131C57C(a1);
      if (v12 | a3) {
        return 2 * (v12 != 0);
      }
    }

    else if (a3)
    {
      return 0LL;
    }

    uint64_t v4 = (void *)v4[8];
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v7 = v6 + 2;
  uint64_t v8 = *v6 + 1;
  while (!*v7 || !sub_18131C57C(a1))
  {
    v7 += 3;
    if (--v8 <= 1) {
      goto LABEL_10;
    }
  }

  return 2LL;
}

  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = 0;
      if (!v7) {
        return;
      }
    }

    else
    {
      uint64_t v9 = sub_181303970(v4, 1);
      if (!v7) {
        return;
      }
    }

    goto LABEL_24;
  }

  uint64_t v9 = *(_DWORD *)(v4 + 16);
  if ((v8 & 0x400) != 0) {
    v9 += *(_DWORD *)v4;
  }
  if (v7)
  {
LABEL_24:
    uint64_t v10 = (char *)sub_18134FED0(a1, v9 + 1LL);
    if (v10)
    {
      if (v9 >= 1)
      {
        unint64_t v11 = v9;
        uint64_t v12 = v10;
        do
        {
          uint64_t v13 = *v7++;
          *v12++ = v13 & (~byte_1813C6558[v13] | 0xDF);
          --v11;
        }

        while (v11);
      }

      if (a1) {
        sub_1812D7A8C((uint64_t)a1, v10, v9, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
      }
      else {
        sub_1812CF36C(97498);
      }
    }
  }

  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = 0;
      if (!v7) {
        return;
      }
    }

    else
    {
      uint64_t v9 = sub_181303970(v4, 1);
      if (!v7) {
        return;
      }
    }

    goto LABEL_24;
  }

  uint64_t v9 = *(_DWORD *)(v4 + 16);
  if ((v8 & 0x400) != 0) {
    v9 += *(_DWORD *)v4;
  }
  if (v7)
  {
LABEL_24:
    uint64_t v10 = (char *)sub_18134FED0(a1, v9 + 1LL);
    if (v10)
    {
      if (v9 >= 1)
      {
        unint64_t v11 = v9;
        uint64_t v12 = v10;
        do
        {
          uint64_t v13 = *v7++;
          *v12++ = byte_1813C6343[v13];
          --v11;
        }

        while (v11);
      }

      if (a1) {
        sub_1812D7A8C((uint64_t)a1, v10, v9, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
      }
      else {
        sub_1812CF36C(97498);
      }
    }
  }

  sub_1812CF36C(97220);
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a3 + 8);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_10:
  unint64_t v11 = *(_WORD *)(v10 + 20);
  if ((v11 & 0x24) != 0)
  {
    uint64_t v12 = *(double *)v10;
    goto LABEL_25;
  }

  if ((v11 & 8) == 0)
  {
    if ((v11 & 0x12) != 0 && *(void *)(v10 + 8))
    {
      LODWORD(v12) = sub_181303DF0(v10);
      goto LABEL_25;
    }

    goto LABEL_19;
  }

  LODWORD(v13) = -1;
  else {
    LODWORD(v12) = 0;
  }
LABEL_25:
  uint64_t v14 = *(void *)a3;
  if (v9 == 4)
  {
    if (v14)
    {
      uint64_t v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 2) != 0 && *(_BYTE *)(v14 + 22) == 1)
      {
        uint64_t v16 = *(_DWORD *)(v14 + 16);
        goto LABEL_44;
      }

      if ((v15 & 0x10) != 0)
      {
        uint64_t v16 = *(_DWORD *)(v14 + 16);
        if ((*(_WORD *)(v14 + 20) & 0x400) != 0) {
          v16 += *(_DWORD *)v14;
        }
LABEL_44:
        uint64_t v18 = (const char *)sqlite3_value_blob(*(sqlite3_value **)a3);
        if (!v18) {
          return;
        }
        goto LABEL_45;
      }

      if ((v15 & 1) == 0)
      {
        uint64_t v16 = sub_181303970(v14, 1);
        goto LABEL_44;
      }
    }

    else
    {
      sub_1812CF36C(91138);
    }

    uint64_t v16 = 0;
    goto LABEL_44;
  }

  if (!v14) {
    return;
  }
  uint64_t v17 = *(unsigned __int16 *)(v14 + 20);
  if ((~v17 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v17 & 1) != 0) {
      return;
    }
    uint64_t v18 = (const char *)sub_181303998((int *)v14, 1);
    if (!v18) {
      return;
    }
  }

  else
  {
    uint64_t v18 = *(const char **)(v14 + 8);
    if (!v18) {
      return;
    }
  }

  if ((LODWORD(v12) & 0x80000000) != 0 && (int v39 = *(unsigned __int8 *)v18, *v18))
  {
    uint64_t v16 = 0;
    uint64_t v40 = v18;
    do
    {
      if (v39 < 0xC0)
      {
        uint64_t v41 = *(unsigned __int8 *)++v40;
        int v39 = v41;
      }

      else
      {
        do
        {
          int v42 = *(unsigned __int8 *)++v40;
          int v39 = v42;
        }

        while ((v42 & 0xC0) == 0x80);
      }

      ++v16;
    }

    while (v39);
  }

  else
  {
    uint64_t v16 = 0;
  }

    uint64_t v16 = 0LL;
    uint64_t v17 = a3[2];
    if (v17) {
      goto LABEL_18;
    }
LABEL_15:
    sub_1812CF36C(89717);
LABEL_16:
    uint64_t v18 = 0.0;
    goto LABEL_35;
  }

  uint64_t v16 = *(unsigned __int8 **)(v14 + 8);
  uint64_t v17 = a3[2];
  if (!v17) {
    goto LABEL_15;
  }
LABEL_18:
  __int128 v19 = *(_WORD *)(v17 + 20);
  if ((v19 & 0x24) != 0)
  {
    uint64_t v18 = *(double *)v17;
  }

  else if ((v19 & 8) != 0)
  {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    else {
      uint64_t v18 = -0.0;
    }
  }

  else
  {
    if ((v19 & 0x12) == 0 || !*(void *)(v17 + 8)) {
      goto LABEL_16;
    }
    uint64_t v18 = COERCE_DOUBLE(sub_181303DF0(v17));
  }

      v7[1] = v9;
LABEL_18:
      *(_DWORD *)(v3 + 36) = 1;
      uint64_t result = sub_181269368( *(void *)v3,  "argument of ntile must be a positive integer",  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      goto LABEL_19;
    }

  uint64_t v9 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v9)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v9 = &xmmword_18C465410;
    return (*v9)(v1);
  }

  return result;
}

  uint64_t v12 = *(const char **)(a4 + 24);
  uint64_t v14 = strlen(v12);
  uint64_t v18 = 4LL;
LABEL_18:
  __int128 v19 = *(const char **)(a4 + 8 * v18);
  uint64_t v20 = strlen(v19);
  uint64_t result = sqlite3_declare_vtab(a1, "CREATE TABLE x(term, col, documents, occurrences, languageid HIDDEN)");
  if (!(_DWORD)result)
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v21 = v14;
    int v22 = v20;
    int v23 = v14 + (uint64_t)v20 + 562;
    uint64_t v24 = (void *)sub_18126F0AC(v23);
    if (!v24)
    {
      return 7LL;
    }

    else
    {
      uint64_t v25 = v24;
      bzero(v24, v23);
      v25[3] = v25 + 4;
      uint64_t v26 = (char *)v25 + v14 + 561;
      v25[8] = v25 + 70;
      v25[9] = v26;
      v25[7] = a1;
      *((_DWORD *)v25 + 130) = 1;
      memcpy(v25 + 70, v12, v21);
      memcpy(v26, v19, v22);
      char v27 = *(unsigned __int8 **)(v25[3] + 40LL);
      int v28 = *v27;
      if ((v28 - 34) <= 0x3E && ((1LL << (v28 - 34)) & 0x4200000000000021LL) != 0)
      {
        if (v28 == 91) {
          int v30 = 93;
        }
        else {
          int v30 = *v27;
        }
        int v31 = v27[1];
        if (v27[1])
        {
          int v32 = 0LL;
          __int128 v33 = 1;
          while (1)
          {
            if (v31 == v30)
            {
              if (v27[v33 + 1] != v30) {
                goto LABEL_37;
              }
              v27[v32] = v30;
              v33 += 2;
            }

            else
            {
              v27[v32] = v31;
              ++v33;
            }

            ++v32;
            int v31 = v27[v33];
            if (!v27[v33]) {
              goto LABEL_37;
            }
          }
        }

        LODWORD(v32) = 0;
LABEL_37:
        v27[v32] = 0;
      }

      uint64_t result = 0LL;
      *a5 = v25;
    }
  }

  return result;
}

  uint64_t v6 = *(void **)(v1 + 56);
  if (v6)
  {
    uint64_t v7 = (sqlite3_stmt *)v6[3];
    uint64_t v8 = (void *)v6[4];
    uint64_t v9 = v8[3];
    if (v9) {
      xmmword_18C465400(v9);
    }
    sub_1812F20DC(v8, v6);
    uint64_t v10 = v8[3];
    if (v10) {
      xmmword_18C465410(v10);
    }
    sqlite3_finalize(v7);
  }

  unint64_t v11 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v11)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unint64_t v11 = &xmmword_18C465410;
    return (*v11)(v1);
  }

  return result;
}

  uint64_t v7 = v26;
  *uint64_t v8 = v26;
  if (!a4) {
    goto LABEL_33;
  }
LABEL_18:
  if (!v7) {
    goto LABEL_33;
  }
  uint64_t v17 = *(void *)(*(void *)v7 + 24LL);
  if (!v17)
  {
    __int128 v19 = *((_DWORD *)v7 + 8);
    if ((_DWORD)v10) {
      goto LABEL_33;
    }
    goto LABEL_25;
  }

  xmmword_18C465400(v17);
  uint64_t v18 = *(void *)(*(void *)v7 + 24LL);
  __int128 v19 = *((_DWORD *)v7 + 8);
  if (v18) {
    xmmword_18C465410(v18);
  }
  if (!(_DWORD)v10)
  {
LABEL_25:
    if (v19 >= 1)
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = v19;
      do
      {
        int v22 = v20 + 1;
        int v23 = sqlite3_bind_value(v26, v20 + 1, *(const sqlite3_value **)(a4 + 8 * v20));
        if ((_DWORD)v23) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v22 >= v21;
        }
        uint64_t v20 = v22;
      }

      while (!v24);
      uint64_t v10 = v23;
    }
  }

      if (v13 != 2)
      {
        if (v13 == 64)
        {
          if (v11 < 0 || v11 > *(_DWORD *)(a1 + 48))
          {
            uint64_t v13 = 64;
            if (!v12) {
              goto LABEL_6;
            }
          }

          else
          {
            uint64_t v4 = v11 + 2;
            a2[10] = v11 + 2;
            *((void *)a2 + 8) = 0x4000000000000000LL;
            uint64_t v13 = 64;
            uint64_t v7 = v5;
            if (!v12) {
              goto LABEL_6;
            }
          }

          goto LABEL_27;
        }

  uint64_t v7 = *(void *)(v1 + 448);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_23;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v8 = &xmmword_18C465410;
LABEL_23:
    (*v8)(v7);
  }

    *(void *)(v7 + 40) = 0LL;
    *(_DWORD *)(v7 + 48) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    if (*(_DWORD *)(v7 + 56))
    {
      uint64_t v10 = *(unsigned int *)(v7 + 80);
      if ((int)v10 >= 1)
      {
        for (uint64_t i = 0LL; i != v10; ++i)
        {
          uint64_t v12 = *(uint64_t ***)(v7 + 40 * i + 120);
          if (v12)
          {
            *((_DWORD *)v12 + 3) = 0;
            *((_DWORD *)v12 + 11) = 1;
            uint64_t v13 = *((unsigned int *)v12 + 2);
            if ((int)v13 >= 1)
            {
              uint64_t v14 = *v12;
              do
              {
                *(void *)(*v14 + 112) = 0LL;
                uint64_t v15 = *v14++;
                *(_DWORD *)(v15 + 120) = 0;
                *(void *)(v15 + 128) = 0LL;
                --v13;
              }

              while (v13);
            }
          }
        }
      }

      uint64_t v16 = 0LL;
      uint64_t v17 = *v5;
      uint64_t v18 = v7 + 88;
      while (v16 < *(int *)(v7 + 80))
      {
        if (*(void *)(v18 + 32))
        {
          uint64_t v20 = 0;
          __int128 v19 = 0LL;
          uint64_t v6 = sub_1813711F8(v17, v18, *(_DWORD *)(v7 + 84), &v20, &v19);
          if (!v6) {
            uint64_t v6 = sub_181371838(v17, v7, v16, v19, v20);
          }
        }

        else
        {
          uint64_t v6 = 0;
        }

        ++v16;
        v18 += 40LL;
        if (v6) {
          goto LABEL_4;
        }
      }

      uint64_t v6 = 0;
LABEL_4:
      *(_DWORD *)(v7 + 56) = 0;
      *a3 = v6;
    }

    *(void *)(v7 + 64) = 0LL;
    *(void *)(v7 + 16) = 0LL;
    *(void *)(v7 + 24) = 0LL;
    goto LABEL_6;
  }

  return result;
}

  --*(_DWORD *)(a2 + 8);
  uint64_t v15 = (uint64_t (**)(const void *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (char *)(*v15)(v5);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  uint64_t result = (char *)off_18C4653A8(v5);
  uint64_t v5 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v15 = (uint64_t (**)(const void *))&xmmword_18C465410;
    return (char *)(*v15)(v5);
  }

  return result;
}

  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

  uint64_t v10 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v10)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v2);
  int v2 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v10 = &xmmword_18C465410;
    return (*v10)(v2);
  }

  return result;
}

  int v23 = v40;
  uint64_t v24 = v39[0];
  if (!v40)
  {
    uint64_t v25 = &byte_1813CEAEE;
    if (a2) {
      uint64_t v25 = (char *)v39[0];
    }
    uint64_t v26 = (unsigned __int8 *)sqlite3_mprintf( "SELECT %s%s FROM %Q.%Q WHERE (%s) IS (%s)",  v16,  v25,  a3,  a4,  v38[0],  v37[0]);
    if (!v26)
    {
      int v23 = 7LL;
      if (!v24) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }

    int v28 = v26;
    int v23 = sub_18126DFE0(a1, v26, 0xFFFFFFFFLL, 128LL, 0LL, a9, 0LL, v27);
    int v29 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_26;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v28);
    --qword_18C468B10;
    off_18C4653A8(v28);
    int v28 = (unsigned __int8 *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v29 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_26:
      (*v29)(v28);
    }
  }

  if (!v24) {
    goto LABEL_34;
  }
LABEL_28:
  int v30 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_33:
    (*v30)(v24);
    goto LABEL_34;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v24);
  --qword_18C468B10;
  off_18C4653A8(v24);
  uint64_t v24 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v30 = &xmmword_18C465410;
    goto LABEL_33;
  }

  *(void *)(v1 + 56) = 0LL;
  return result;
}

    sub_1813C165C((uint64_t)a1);
    sub_1813C0F08((uint64_t)a1, "cannot open '%s' for reading", v17, v18, v19, v20, v21, v22, (char)a2);
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_18126C830(uint64_t a1, char *__dst, signed int a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 160)
    || (uint64_t v6 = a4, v7 = a3, v8 = __dst, (v9 = *(void *)(a1 + 64)) != 0) && *(_DWORD *)(*(void *)v9 + 168LL))
  {
    sqlite3_log(27, "denying read from invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 80);
    int v11 = v10 - a4;
    if (v10 > a4)
    {
      if (a3 + a4 <= v10)
      {
        memcpy(__dst, (const void *)(*(void *)(a1 + 104) + a4), a3);
        return 0LL;
      }

      memcpy(__dst, (const void *)(*(void *)(a1 + 104) + a4), v11);
      v8 += v11;
      v7 -= v11;
      v6 += v11;
    }

    int v12 = sub_1812F3454(a1, v6, (uint64_t)v8, v7);
    if (v7 == v12)
    {
      return 0LL;
    }

    else if (v12 < 0)
    {
      int v13 = *(_DWORD *)(a1 + 32);
      uint64_t result = 8458LL;
    }

    else
    {
      *(_DWORD *)(a1 + 32) = 0;
      bzero(&v8[v12], (int)(v7 - v12));
      return 522LL;
    }
  }

  return result;
}

uint64_t sub_18126C96C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      return sub_1812FDE20(a1);
    }
  }

  return a1;
}

uint64_t sub_18126C990(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = (uint64_t)sub_1812FA4A0(a2, 0x78u, (uint64_t)sub_1813070A0);
    if (result)
    {
      if (!*(_BYTE *)(result + 112)) {
        goto LABEL_7;
      }
      return result;
    }

int sqlite3_overload_function(sqlite3 *a1, const char *zFuncName, int nArg)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_16;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(187460);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_16;
    }

    goto LABEL_5;
  }

  if (!zFuncName) {
    return sub_1812CF36C(187460);
  }
  uint64_t v7 = *(void *)&nArg;
  if (nArg <= -3) {
    return sub_1812CF36C(187460);
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  uint64_t v9 = sub_18126CC00((uint64_t)a1, (char *)zFuncName, v7, 1u, 0);
  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_18C465410(v10);
  }
  if (v9) {
    return 0;
  }
  char v12 = sqlite3_mprintf("%s", zFuncName);
  if (v12) {
    return sub_1812E0AEC( (uint64_t)a1,  (char *)zFuncName,  v7,  1,  (uint64_t)v12,  (uint64_t)sub_1812E101C,  0LL,  0LL,  0LL,  0LL,  (void (*)(uint64_t))sqlite3_free);
  }
  else {
    return 7;
  }
}

_BYTE *sub_18126CC00(uint64_t a1, char *__s, int a3, unsigned int a4, int a5)
{
  if (__s) {
    int v10 = strlen(__s) & 0x3FFFFFFF;
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 632);
  if (!v11)
  {
    uint64_t v16 = (uint64_t *)(a1 + 624);
    int v17 = *(_DWORD *)(a1 + 620);
    if (v17) {
      goto LABEL_40;
    }
LABEL_10:
    uint64_t v16 = &qword_18C550660;
    goto LABEL_11;
  }

  int v12 = *__s;
  if (*__s)
  {
    unsigned int v13 = 0;
    uint64_t v14 = __s + 1;
    do
    {
      unsigned int v13 = -1640531535 * (v13 + byte_1813C6343[v12]);
      int v15 = *v14++;
      int v12 = v15;
    }

    while (v15);
  }

  else
  {
    unsigned int v13 = 0;
  }

  char v27 = (_DWORD *)(v11 + 16LL * (v13 % *(_DWORD *)(a1 + 616)));
  uint64_t v16 = (uint64_t *)(v27 + 2);
  int v17 = *v27;
  if (!v17) {
    goto LABEL_10;
  }
  do
  {
LABEL_40:
    uint64_t v16 = (uint64_t *)*v16;
    int v28 = (_BYTE *)v16[3];
    for (uint64_t i = __s; ; ++i)
    {
      uint64_t v30 = *v28;
      uint64_t v31 = *i;
      if ((_DWORD)v30 != (_DWORD)v31) {
        break;
      }
      if (!*v28) {
        goto LABEL_11;
      }
LABEL_42:
      ++v28;
    }

    if (byte_1813C6343[v30] == byte_1813C6343[v31]) {
      goto LABEL_42;
    }
    --v17;
  }

  while (v17);
  uint64_t v16 = &qword_18C550660;
LABEL_11:
  uint64_t v18 = (char *)v16[2];
  if (!v18)
  {
    if (a5) {
      goto LABEL_35;
    }
    __int128 v19 = 0LL;
    goto LABEL_59;
  }

  __int128 v19 = 0LL;
  unsigned int v20 = 0;
  do
  {
    int v23 = *v18;
    if (v23 == a3)
    {
      int v24 = 4;
    }

    else
    {
      if (a3 == -2)
      {
        if (*((void *)v18 + 3)) {
          int v21 = 6;
        }
        else {
          int v21 = 0;
        }
        goto LABEL_16;
      }

      if ((v23 & 0x80000000) == 0)
      {
        int v21 = 0;
        goto LABEL_16;
      }

      int v24 = 1;
    }

    int v25 = (((*((_DWORD *)v18 + 1) & a4) >> 1) & 1) + v24;
    int v21 = v24 | 2;
    if ((*((_DWORD *)v18 + 1) & 3) != a4) {
      int v21 = v25;
    }
LABEL_16:
    BOOL v22 = v21 > v20;
    if (v22) {
      __int128 v19 = v18;
    }
    uint64_t v18 = (char *)*((void *)v18 + 2);
  }

  while (v18);
  if (!a5)
  {
    if (v19 && (*(_BYTE *)(a1 + 44) & 2) == 0)
    {
      LOBYTE(v26) = 0;
LABEL_69:
      return v19;
    }

LABEL_59:
    uint64_t v26 = (char *)*((void *)&xmmword_18C468BD0 + (v10 + byte_1813C6343[*__s]) % 0x17);
    if (!v26) {
      goto LABEL_68;
    }
LABEL_60:
    uint64_t v37 = (_BYTE *)*((void *)v26 + 7);
    for (uint64_t j = __s; ; ++j)
    {
      uint64_t v39 = *v37;
      uint64_t v40 = *j;
      if ((_DWORD)v39 == (_DWORD)v40)
      {
        if (!*v37)
        {
          unsigned int v20 = 0;
          while (1)
          {
            int v43 = *v26;
            if (v43 == a3) {
              break;
            }
            if (a3 == -2)
            {
              if (*((void *)v26 + 3)) {
                int v41 = 6;
              }
              else {
                int v41 = 0;
              }
            }

            else
            {
              if (v43 < 0)
              {
                int v44 = 1;
LABEL_82:
                int v45 = (((*((_DWORD *)v26 + 1) & a4) >> 1) & 1) + v44;
                int v41 = v44 | 2;
                if ((*((_DWORD *)v26 + 1) & 3) != a4) {
                  int v41 = v45;
                }
                goto LABEL_75;
              }

              int v41 = 0;
            }

      uint64_t v8 = *(void *)(a1 + 16);
      if (!v8)
      {
        if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
          *(_BYTE *)(a1 + 35) = 1;
        }
        uint64_t v8 = sub_1812DC63C((uint64_t *)a1, v37, a3, a4, a5, a6, a7, a8);
        if (!v8) {
          goto LABEL_75;
        }
      }

      sub_18131EC34(a1, 0, v16);
      uint64_t v38 = sub_181276C14(v10, *(const void **)v12, *(unsigned int *)(v12 + 8));
      sub_1812C742C( (uint64_t *)a1,  "INSERT INTO %Q.sqlite_master VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')",  v39,  v40,  v41,  v42,  v43,  v44,  *(void *)(*(void *)(v10 + 32) + 32LL * (int)v16));
      if (v38) {
        sub_1812F20DC((void *)v10, v38);
      }
      sub_181320254((uint64_t *)a1, v16, v45, v46, v47, v48, v49, v50);
      int v57 = sub_18127F588(v10, "type='trigger' AND name='%q'", v51, v52, v53, v54, v55, v56, (char)v18);
      sub_1813202C4(v8, v16, (uint64_t)v57, 0, v58, v59, v60, v61);
    }
  }

  else
  {
    *(void *)(a1 + 360) = v9;
    uint64_t v9 = 0LL;
  }

  if (!*(_BYTE *)(v10 + 197))
  {
LABEL_74:
    uint64_t v8 = 0LL;
    goto LABEL_75;
  }

  uint64_t v62 = sub_181268E88(*(void *)(*(void *)(v10 + 32) + 32LL * (int)v16 + 24) + 56LL, (unsigned __int8 *)v18, v9);
  if (!v62)
  {
    char v70 = *(void *)(v9 + 40);
    if (v70 == *(void *)(v9 + 48))
    {
      size_t v72 = sub_18130D648(v70 + 8, *(unsigned __int8 **)(v9 + 8));
      uint64_t v8 = 0LL;
      *(void *)(v9 + 64) = *(void *)(v72 + 88);
      *(void *)(v72 + 88) = v9;
      uint64_t v9 = 0LL;
      goto LABEL_75;
    }

    uint64_t v9 = 0LL;
    goto LABEL_74;
  }

  int v69 = v62;
  if (!*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    __int16 v73 = *(void *)(v10 + 344);
    if (v73)
    {
      sub_1812DC47C(v73, "out of memory", v63, v64, v65, v66, v67, v68, v80);
      for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = v69;
LABEL_75:
  sub_18127A200((void *)v10, v9);
  return sub_1812A01F4((void *)v10, v8);
}

      if (v33 == 5)
      {
        char v56 = *((_DWORD *)a1 + 17);
        __int128 v166 = v56 - 1;
        *((_DWORD *)a1 + 17) = v56 - 1;
        int v57 = *(int **)(a2 + 32);
        unsigned int v61 = sub_181289D04((uint64_t)a1, *(unsigned __int8 **)(a2 + 16), v27, v28, v29, v30, v31, v32);
        unsigned int v161 = v56;
        if ((_DWORD)v24 == v168)
        {
          uint64_t v63 = 0LL;
        }

        else
        {
          if (*((_BYTE *)a1 + 31))
          {
            uint64_t v62 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v62;
            uint64_t v63 = *((unsigned int *)a1 + v62 + 56);
          }

          else
          {
            uint64_t v63 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v63;
          }

          int v86 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) <= v86)
          {
            sub_18131044C(v23, 102LL, v44, v44, v63, v58, v59, v60);
          }

          else
          {
            *(_DWORD *)(v23 + 144) = v86 + 1;
            char v87 = *(void *)(v23 + 136) + 40LL * v86;
            *(_DWORD *)char v87 = 102;
            *(int32x2_t *)(v87 + 4) = vdup_n_s32(v44);
            *(_DWORD *)(v87 + 12) = v63;
            *(void *)(v87 + 24) = 0LL;
            *(void *)(v87 + 32) = 0LL;
            *(void *)(v87 + 16) = 0LL;
          }
        }

        if (*v57 < 1)
        {
LABEL_143:
          if ((_DWORD)v63)
          {
            __int128 v110 = *(_DWORD *)(v23 + 144);
            if (*(_DWORD *)(v23 + 148) <= v110)
            {
              sub_18131044C(v23, 50LL, v63, v168, 0LL, v58, v59, v60);
            }

            else
            {
              *(_DWORD *)(v23 + 144) = v110 + 1;
              __int128 v111 = *(void *)(v23 + 136) + 40LL * v110;
              *(_DWORD *)__int128 v111 = 50;
              *(_DWORD *)(v111 + 4) = v63;
              *(_DWORD *)(v111 + 8) = v168;
              *(void *)(v111 + 12) = 0LL;
              *(void *)(v111 + 28) = 0LL;
              *(void *)(v111 + 20) = 0LL;
              *(_DWORD *)(v111 + 36) = 0;
            }

            __int128 v112 = *(_DWORD *)(v23 + 144);
            if (*(_DWORD *)(v23 + 148) <= v112)
            {
              sub_18131044C(v23, 9LL, 0LL, v24, 0LL, v58, v59, v60);
            }

            else
            {
              *(_DWORD *)(v23 + 144) = v112 + 1;
              __int128 v113 = *(void *)(v23 + 136) + 40LL * v112;
              *(void *)__int128 v113 = 9LL;
              *(_DWORD *)(v113 + 8) = v24;
              *(void *)(v113 + 12) = 0LL;
              *(void *)(v113 + 28) = 0LL;
              *(void *)(v113 + 20) = 0LL;
              *(_DWORD *)(v113 + 36) = 0;
            }
          }

          uint64_t v114 = *(void *)(v23 + 24);
          __int128 v115 = -v161;
          if (*(_DWORD *)(v114 + 68) + *(_DWORD *)(v114 + 72) < 0)
          {
            sub_18131E420(v114, v23, v115);
            if (!(_DWORD)v63) {
              goto LABEL_208;
            }
          }

          else
          {
            *(_DWORD *)(*(void *)(v114 + 80) + 4LL * v115) = *(_DWORD *)(v23 + 144);
            if (!(_DWORD)v63) {
              goto LABEL_208;
            }
          }

          __int128 v116 = *((unsigned __int8 *)a1 + 31);
          if (v116 <= 7)
          {
            *((_BYTE *)a1 + 31) = v116 + 1;
            *((_DWORD *)a1 + v116 + 56) = v63;
          }

  if (*(char *)(a1 + 84) >= 1)
  {
    uint64_t v48 = *(void *)(a1 + 136);
    int v52 = *v49;
    uint64_t v51 = (char *)(v49 + 1);
    uint64_t v50 = v52;
    if (v52 <= *(unsigned __int8 *)(v48 + 11))
    {
LABEL_64:
      if ((int)v11(v50, v51, v4) <= 0 && !*((_BYTE *)v4 + 31))
      {
        *(_BYTE *)(a1 + 1) &= ~4u;
        uint64_t v14 = *(void *)(a1 + 136);
        if (!*(_BYTE *)v14)
        {
          uint64_t v54 = 82801;
          return sub_1812FBF50(v54);
        }

        goto LABEL_14;
      }

      goto LABEL_66;
    }

    if ((*v51 & 0x80000000) == 0)
    {
      uint64_t v50 = ((v50 & 0x7F) << 7) + *v51;
      if (v50 <= *(unsigned __int16 *)(v48 + 14))
      {
        uint64_t v51 = (char *)(*(void *)(v48 + 104)
        goto LABEL_64;
      }
    }
  }

            uint64_t v78 = (void *)*v78;
          }

          while (v78);
        }
      }
    }
  }

  if (sub_181268E88(v42 + 8, v43, v8))
  {
    if (!*(_BYTE *)(v11 + 103) && !*(_BYTE *)(v11 + 104))
    {
      *(_BYTE *)(v11 + 103) = 1;
      ++*(_DWORD *)(v11 + 432);
      *(_WORD *)(v11 + 436) = 0;
      char v95 = *(void *)(v11 + 344);
      if (v95)
      {
        sub_1812DC47C(v95, "out of memory", v89, v90, v91, v92, v93, v94, v97);
        for (uint64_t j = *(void *)(v11 + 344); ; ++*(_DWORD *)(j + 48))
        {
          *(_DWORD *)(j + 24) = 7;
          uint64_t j = *(void *)(j + 256);
          if (!j) {
            break;
          }
        }
      }
    }
  }

  else
  {
    *(void *)(a1 + 344) = 0LL;
  }

  BOOL v22 = SLODWORD(v21);
  int v23 = SLODWORD(v21) >= 0;
  if ((LODWORD(v21) & 0x80000000) != 0) {
    BOOL v22 = -(uint64_t)SLODWORD(v21);
  }
LABEL_61:
  int v24 = SLODWORD(v12) + (uint64_t)v16;
  int v25 = (v22 + v24) & ~((v22 + v24) >> 63);
  if (v24 >= 0) {
    int v25 = v22;
  }
  else {
    int v24 = 0LL;
  }
  if (SLODWORD(v12) < 0) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = SLODWORD(v12) - 1LL;
  }
  if (SLODWORD(v12) < 0) {
    BOOL v22 = v25;
  }
  if (v26 >= v22) {
    char v27 = v22;
  }
  else {
    char v27 = v26;
  }
  if (v23)
  {
    int v28 = v22;
  }

  else
  {
    uint64_t v26 = (v26 - v22) & ~((v26 - v22) >> 63);
    int v28 = v27;
  }

  if (v9 == 4)
  {
    if (v28 + v26 <= v16) {
      int v29 = v28;
    }
    else {
      int v29 = (v16 - v26) & ~((v16 - v26) >> 63);
    }
    if (a1)
    {
      if (v29 >> 31)
      {
        *((_DWORD *)a1 + 9) = 18;
        sub_181269368(*(void *)a1, "string or blob too big", -1LL, 1u, 0LL);
      }

      else
      {
        sub_1812D7A8C((uint64_t)a1, (char *)&v18[v26], v29, 0, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
    }

    else
    {
      sub_1812CF36C(97382);
    }
  }

  else
  {
    uint64_t v30 = *(unsigned __int8 *)v18;
    if (*v18 && v26)
    {
      do
      {
        if (v30 < 0xC0)
        {
          int v33 = *(unsigned __int8 *)++v18;
          uint64_t v30 = v33;
        }

        else
        {
          do
          {
            int v35 = *(unsigned __int8 *)++v18;
            uint64_t v30 = v35;
          }

          while ((v35 & 0xC0) == 0x80);
        }

        --v26;
        if (v30) {
          __int128 v34 = v26 == 0;
        }
        else {
          __int128 v34 = 1;
        }
      }

      while (!v34);
    }

    if (v30) {
      uint64_t v31 = v28 == 0;
    }
    else {
      uint64_t v31 = 1;
    }
    int v32 = v18;
    if (!v31)
    {
      int v32 = v18;
      do
      {
        if (v30 < 0xC0)
        {
          uint64_t v36 = *(unsigned __int8 *)++v32;
          uint64_t v30 = v36;
        }

        else
        {
          do
          {
            uint64_t v38 = *(unsigned __int8 *)++v32;
            uint64_t v30 = v38;
          }

          while ((v38 & 0xC0) == 0x80);
        }

        --v28;
        if (v30) {
          uint64_t v37 = v28 == 0;
        }
        else {
          uint64_t v37 = 1;
        }
      }

      while (!v37);
    }

    sqlite3_result_text64(a1, v18, v32 - v18, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL, 1u);
  }

        uint64_t v39 = 0;
        *(_BYTE *)(v10 + v14) = 0;
        if (a2[4] == 1)
        {
          uint64_t v40 = *((void *)a2 + 3);
          if (*(_DWORD *)v40 != *(_DWORD *)(v2 + 24) + 1 || (_DWORD)v15 == 0)
          {
            if (*(_DWORD *)v40 == -1)
            {
              uint64_t v39 = 64;
              goto LABEL_68;
            }

            uint64_t v39 = 0;
          }

          else
          {
            uint64_t v39 = 32;
LABEL_68:
            a2[15] = 1;
            if (*(_BYTE *)(v40 + 4)) {
              v39 |= 0x80u;
            }
          }
        }

        if ((v8 & 1) != 0)
        {
          if (v31 && v30)
          {
            BOOL v42 = (_DWORD)v15 == 0;
            int v43 = 500.0;
            int v44 = 250000.0;
          }

          else
          {
            BOOL v42 = (_DWORD)v15 == 0;
            if (v31 | v30)
            {
              int v43 = 750.0;
              int v44 = 750000.0;
            }

            else
            {
              int v43 = 1000.0;
              int v44 = 1000000.0;
            }
          }

          if (v42) {
            int v43 = v44;
          }
          *((double *)a2 + 8) = v43;
        }

        else
        {
          int v45 = 100.0;
          if (!(_DWORD)v15) {
            int v45 = 10.0;
          }
          *((double *)a2 + 8) = v45;
          if (!(_DWORD)v15) {
            a2[20] |= 1u;
          }
        }

        uint64_t result = 0LL;
        a2[10] = v39;
        return result;
      }
    }
  }

  return result;
}

            uint64_t result = 7LL;
            uint64_t v55 = 7;
            goto LABEL_73;
          }

          if (!v35) {
            int v35 = 128;
          }
          uint64_t v40 = v35;
          do
          {
            int v41 = v40;
            v40 *= 2LL;
          }

          while (v40 <= v19);
          if (v41 > 1073741695)
          {
            if (v19 > 2147483390) {
              goto LABEL_68;
            }
            uint64_t v40 = 2147483391LL;
          }

          BOOL v42 = *v21;
          if (!sqlite3_initialize())
          {
            uint64_t v36 = sub_18127D33C(v42, v40);
            if (v36)
            {
              *(void *)(a2 + 104) = v36;
              *(_DWORD *)(a2 + 116) = v40;
              __int128 v19 = *(_DWORD *)(a2 + 112);
              unsigned int v20 = v19;
              goto LABEL_50;
            }
          }

LABEL_35:
  if (a1)
  {
    __int128 v19 = (_BYTE *)sub_1812F2264(a1, (v10 + 73));
    if (!v19) {
      return 0LL;
    }
  }

  else
  {
    __int128 v19 = (_BYTE *)sub_18126F0AC((v10 + 73));
    if (!v19) {
      return 0LL;
    }
  }

  bzero(v19, (v10 + 73));
  int v32 = v19 + 72;
  *((void *)v19 + 7) = v19 + 72;
  *__int128 v19 = a3;
  *((_DWORD *)v19 + 1) = a4;
  memcpy(v19 + 72, __s, (v10 + 1));
  int v33 = v19[72];
  if (v19[72])
  {
    __int128 v34 = v19 + 73;
    do
    {
      *(v34 - 1) = byte_1813C6343[v33];
      int v35 = *v34++;
      int v33 = v35;
    }

    while (v35);
    int v32 = (unsigned __int8 *)*((void *)v19 + 7);
  }

  uint64_t v36 = sub_181268E88(a1 + 616, v32, (uint64_t)v19);
  if ((_BYTE *)v36 == v19)
  {
    sub_1812F20DC((void *)a1, v19);
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104)) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v53 = *(void *)(a1 + 344);
    if (!v53) {
      return 0LL;
    }
    sub_1812DC47C(v53, "out of memory", v46, v47, v48, v49, v50, v51, v56);
    uint64_t v54 = *(void *)(a1 + 344);
    *(_DWORD *)(v54 + 24) = 7;
    uint64_t v55 = *(void *)(v54 + 256);
    if (!v55) {
      return 0LL;
    }
    __int128 v19 = 0LL;
    do
    {
      ++*(_DWORD *)(v55 + 48);
      *(_DWORD *)(v55 + 24) = 7;
      uint64_t v55 = *(void *)(v55 + 256);
    }

    while (v55);
  }

  else
  {
    *((void *)v19 + 2) = v36;
  }

  return v19;
}

    if (!v21)
    {
      uint64_t v31 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v31 && ((*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00) != a7)
      {
        int v21 = sub_1812FBF50(76199);
        goto LABEL_203;
      }

      uint64_t v143 = a2;
      int v32 = **(void **)(a1 + 48);
      if (*(_DWORD *)(v32 + 96) >= v31)
      {
        uint64_t v40 = 0LL;
        goto LABEL_88;
      }

      BOOL v146 = v22;
      char v138 = a8;
      int v21 = 0;
      BOOL v139 = *(_DWORD *)(a1 + 92);
      v140 = (*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00;
      char v145 = **(void **)(a1 + 48);
      int v33 = v32 + 100;
      for (uint64_t i = 1LL; i != 5; ++i)
      {
        uint64_t v36 = *(unsigned int *)(v33 + 4 * i);
        if (v31 > v36)
        {
          uint64_t v37 = v31;
          while (1)
          {
            if (*(_BYTE *)(a1 + 63)) {
              goto LABEL_62;
            }
            uint64_t v38 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  (i + 3),  1LL,  10LL);
            int v21 = v38;
            if (!v15 || v38 != 5) {
              break;
            }
            if (!v15(a5)) {
              goto LABEL_75;
            }
          }

          if (v38)
          {
            if (v38 == 5)
            {
              int v15 = 0LL;
              uint64_t v31 = v36;
            }

            else
            {
              if (v38 != 773)
              {
                BOOL v22 = v146;
                goto LABEL_203;
              }

              LODWORD(v155) = 0;
              uint64_t v39 = *(void *)(a1 + 8);
              if (*(void *)v39) {
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v39 + 80LL))(v39, 34LL, &v155);
              }
LABEL_75:
              int v15 = 0LL;
              int v21 = 5;
              uint64_t v31 = v36;
            }
          }

          else
          {
LABEL_62:
            if (i == 1) {
              int v35 = v37;
            }
            else {
              int v35 = -1;
            }
            *(_DWORD *)(v33 + 4 * i) = v35;
            if (!*(_BYTE *)(a1 + 63)) {
              (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  (i + 3),  1LL,  9LL);
            }
            uint64_t v31 = v37;
            int v21 = 0;
          }
        }
      }

      int v32 = v145;
      if (*(_DWORD *)(v145 + 96) >= v31)
      {
        uint64_t v40 = 0LL;
        BOOL v22 = v146;
        goto LABEL_87;
      }

      int v134 = v31;
      int v41 = *(_DWORD *)(v145 + 96);
      BOOL v42 = *(unsigned int *)(a1 + 88);
      BOOL v22 = v146;
      if (sqlite3_initialize())
      {
        int v21 = 7;
        goto LABEL_36;
      }

      int v44 = ((unint64_t)(v42 + 4096) + 0xFFFFFFFF021LL) >> 12;
      int v45 = v44 << 32;
      uint64_t v46 = 2 * v42 + 32LL * (int)v44 + 40;
      int v137 = v42;
      else {
        uint64_t v47 = v42;
      }
      uint64_t v48 = (unsigned int *)sub_18126F0AC(v46 + (2 * v47));
      if (!v48)
      {
        int v21 = 7;
        BOOL v22 = v146;
        goto LABEL_36;
      }

      uint64_t v49 = v48;
      bzero(v48, v46);
      v49[1] = v44 + 1;
      uint64_t v50 = ((unint64_t)(v41 + 4097) + 0xFFFFFFFF021LL) >> 12;
      uint64_t v40 = v49;
      uint64_t v144 = v49;
      if ((int)v50 > (int)v44)
      {
LABEL_106:
        BOOL v22 = v146;
        int v32 = v145;
        while (1)
        {
          if (*(_BYTE *)(a1 + 63)) {
            goto LABEL_213;
          }
          uint64_t v51 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  3LL,  1LL,  10LL);
          int v21 = v51;
          if (!v15 || v51 != 5) {
            break;
          }
          if (!v15(a5)) {
            goto LABEL_88;
          }
        }

        if (v51)
        {
          if (v51 != 773) {
            goto LABEL_87;
          }
          LODWORD(v155) = 0;
          __int128 v110 = *(void *)(a1 + 8);
          if (*(void *)v110) {
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v110 + 80LL))(v110, 34LL, &v155);
          }
          goto LABEL_88;
        }

      uint64_t v30 = 0;
      goto LABEL_71;
    }
  }

  unsigned int v13 = 0LL;
LABEL_36:
  uint64_t v14 = *(void *)(v8 + 24);
  if (v14) {
LABEL_37:
  }
    xmmword_18C465410(v14);
  return v13;
}

    LODWORD(v11) = v9;
    goto LABEL_36;
  }

    if (!v28)
    {
      *int v58 = 0;
      *(_WORD *)(a1 + 86) = v17 >> 1;
      if (*((_BYTE *)v4 + 31)) {
        unsigned int v13 = sub_1812FBF50(82920);
      }
      else {
        unsigned int v13 = 0LL;
      }
      goto LABEL_90;
    }

    uint64_t i = v30 - 1;
    if (v16 > v30 - 1)
    {
LABEL_37:
      if (*(_BYTE *)(v14 + 8))
      {
        unsigned int v13 = 0LL;
        *(_WORD *)(a1 + 86) = v17 >> 1;
        *int v58 = v28;
        goto LABEL_90;
      }

      if (v16 >= *(unsigned __int16 *)(v14 + 24))
      {
        int v32 = *(unsigned __int8 *)(v14 + 9) + 8LL;
      }

      else
      {
        uint64_t v31 = (unsigned __int8 *)(*(void *)(v14 + 96) + 2LL * v16);
        int v32 = (v31[1] | (*v31 << 8)) & (unint64_t)*(unsigned __int16 *)(v14 + 26);
      }

      int v33 = (unsigned __int8 *)(*(void *)(v14 + 80) + v32);
      __int128 v34 = *v33;
      int v35 = v33[1];
      uint64_t v36 = v33[2];
      uint64_t v37 = v33[3];
      *(_WORD *)(a1 + 70) = 0;
      *(_BYTE *)(a1 + 1) &= 0xF9u;
      uint64_t v38 = *(char *)(a1 + 84);
      if (v38 >= 19)
      {
        uint64_t v54 = 82951;
        return sub_1812FBF50(v54);
      }

      *(_WORD *)(a1 + 2 * v38 + 88) = v16;
      *(void *)(a1 + 8 * v38 + 144) = *(void *)(a1 + 136);
      *(_WORD *)(a1 + 86) = 0;
      *(_BYTE *)(a1 + 84) = v38 + 1;
      uint64_t v39 = sub_181308FB8(*(_DWORD **)(a1 + 32), (v34 << 24) | (v35 << 16) | (v36 << 8) | v37, v59);
      if ((_DWORD)v39) {
        goto LABEL_89;
      }
      uint64_t v14 = *v59;
      int v15 = *(unsigned __int16 *)(*v59 + 24);
      int v4 = a2;
      if (!*(_WORD *)(*v59 + 24) || *(unsigned __int8 *)(v14 + 1) != *(unsigned __int8 *)(a1 + 85))
      {
        uint64_t v40 = *(void *)(v14 + 112);
        if ((*(_WORD *)(v40 + 52) & 0x20) != 0)
        {
          char v56 = *(void *)(v40 + 40);
          --*(_DWORD *)(v56 + 152);
          *(void *)(v40 + 32) = *(void *)(v56 + 168);
          *(void *)(v56 + 168) = v40;
          (*(void (**)(void, void, void))(**(void **)(v56 + 72) + 144LL))( *(void *)(v56 + 72),  *(void *)(v56 + 200) * (*(_DWORD *)(v40 + 48) - 1),  *(void *)(v40 + 8));
        }

        else
        {
          sub_1812F9F44(v40);
        }

        uint64_t v39 = sub_1812FBF50(82962);
LABEL_89:
        unsigned int v13 = v39;
        int v57 = *(_BYTE *)(a1 + 84) - 1;
        *(_BYTE *)(a1 + 84) = v57;
        *(void *)(a1 + 136) = *(void *)(a1 + 8LL * v57 + 144);
        goto LABEL_90;
      }

      goto LABEL_15;
    }
  }

  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *))(v14 + 128))( v14,  &v20[-*(unsigned __int8 *)(v14 + 10)],  v60);
  int v23 = *v60;
  if ((int)*v60 < 2
    || v23 / *(_DWORD *)(*(void *)(a1 + 32) + 56LL) > *(_DWORD *)(*(void *)(a1 + 32) + 64LL))
  {
    unsigned int v13 = sub_1812FD54C(82888LL, v14);
    goto LABEL_90;
  }

  int v24 = (char *)sub_18126F0AC((int)v23 + 18);
  if (!v24)
  {
    unsigned int v13 = 7LL;
    goto LABEL_90;
  }

  int v25 = v24;
  *(_WORD *)(a1 + 86) = v17 >> 1;
  uint64_t v26 = sub_1812BFD8C(a1, 0, v23, v24, 0);
  char v27 = &v25[v23];
  *(void *)char v27 = 0LL;
  *((void *)v27 + 1) = 0LL;
  *((_WORD *)v27 + 8) = 0;
  *(_BYTE *)(a1 + 1) &= ~4u;
  if (!(_DWORD)v26)
  {
    int v4 = a2;
    int v28 = sub_1813068A8(v23, v25, a2, 0);
    int v29 = (void (**)(char *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_30;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v25);
    --qword_18C468B10;
    off_18C4653A8(v25);
    int v25 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v29 = (void (**)(char *))&xmmword_18C465410;
LABEL_30:
      (*v29)(v25);
    }

    uint64_t v30 = v17 >> 1;
    if (v28 < 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  unsigned int v13 = v26;
  uint64_t v53 = (void (**)(char *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_78:
    (*v53)(v25);
    goto LABEL_90;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v25);
  --qword_18C468B10;
  off_18C4653A8(v25);
  int v25 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v53 = (void (**)(char *))&xmmword_18C465410;
    goto LABEL_78;
  }

      uint64_t v30 = *(void *)(v30 + 40);
      if (!v30) {
        goto LABEL_178;
      }
    }
  }

  uint64_t v31 = 1;
  int v32 = v200;
LABEL_178:
  if (!v11 && v31)
  {
    sub_1813103F4(v15, 98LL, v180, v185, v26, v27, v28, v29);
    uint64_t v156 = v32;
    BOOL v157 = sub_181319BA8(v15, 17LL, v185, v151, v152, v153, v154, v155);
    sub_1813103F4(v15, 75LL, 0LL, v192, v158, v159, v160, v161);
    sub_1812B9B68((uint64_t *)v15, 97LL, v189, 3LL, v156, (uint64_t)"BBB", 0LL, v162);
    sub_1813103F4(v15, 127LL, v10, v9, v163, v164, v165, v166);
    sub_181279C3C(v15, 128LL, v10, v156, v9, v167, v168, v169);
    __int128 v170 = *(_DWORD *)(v15 + 144);
    char v70 = __OFSUB__(v170, 1);
    int v171 = v170 - 1;
    if (v171 < 0 == v70) {
      *(_WORD *)(*(void *)(v15 + 136) + 40LL * v171 + 2) = 8;
    }
    sub_181289F90((uint64_t *)v15, -1, (uint64_t)__s, 0xFFFFFFFB);
    if (*(_BYTE *)(*(void *)v15 + 103LL)) {
      uint64_t v172 = &byte_18C550680;
    }
    else {
      uint64_t v172 = (char *)(*(void *)(v15 + 136) + 40LL * v157);
    }
    *((_DWORD *)v172 + 2) = *(_DWORD *)(v15 + 144);
  }

        int v17 = *(double *)v15;
        goto LABEL_37;
      }

  BOOL v22 = *(unsigned __int8 **)(*(void *)(v10 + 32) + 32LL * (int)v12);
  int v23 = *(void *)(v10 + 528);
  *(void *)(v10 + 528) = 0LL;
  uint64_t v30 = sub_1813523CC((uint64_t)v42, v22, v10, v16, (_DWORD)v12 == 1, a6, a7, a8);
  if (!v30)
  {
    if (v43)
    {
      uint64_t v31 = *(__int16 *)(v43 + 54);
      int v32 = v31 - 1;
      if (v31 != 1 && SLODWORD(v18) < v31)
      {
        int v33 = 0LL;
        __int128 v34 = *(void *)(v43 + 8);
        int v35 = *(void *)(v34 + 16LL * SLODWORD(v18));
        uint64_t v36 = v44;
        if (v35 && v44)
        {
          int v33 = v44;
          do
          {
            if (*v33 == v35) {
              break;
            }
            int v33 = (void *)v33[3];
          }

          while (v33);
        }

        if (v32 <= SLODWORD(v18))
        {
          uint64_t v38 = (_BYTE *)v33[1];
          for (uint64_t i = *v38; *v38; uint64_t i = *v38)
          {
            if (i == 44) {
              break;
            }
            v33[1] = --v38;
          }
        }

        else
        {
          while (*v36 != *(void *)(v34 + (((*(void *)&v18 << 32) + 0x100000000LL) >> 28)))
            uint64_t v36 = (void *)v36[3];
          uint64_t v38 = (_BYTE *)v33[1];
        }

        uint64_t v40 = (char *)sub_18127F588( v10,  "%.*s%s",  v24,  v25,  v26,  v27,  v28,  v29,  v38 - v16);
        if (a1)
        {
          sub_1812D7A8C((uint64_t)a1, v40, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          if (!v40) {
            goto LABEL_80;
          }
        }

        else
        {
          sub_1812CF36C(97498);
          if (!v40) {
            goto LABEL_80;
          }
        }

        int v41 = (void (**)(char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v40);
          --qword_18C468B10;
          off_18C4653A8(v40);
          uint64_t v40 = (char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_80;
          }
          int v41 = (void (**)(char *))&xmmword_18C465410;
        }

        (*v41)(v40);
LABEL_80:
        sub_18135379C(v42);
        *(void *)(v10 + 528) = v23;
        return;
      }
    }

    uint64_t v30 = sub_1812FBF50(124544);
  }

  sub_18135379C(v42);
  *(void *)(v10 + 528) = v23;
  if (a1)
  {
    a1[9] = v30;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
    {
      switch(v30)
      {
        case 516:
          uint64_t v37 = "abort due to ROLLBACK";
          break;
        case 101:
          uint64_t v37 = "no more rows available";
          break;
        case 100:
          uint64_t v37 = "another row available";
          break;
        default:
          else {
            uint64_t v37 = off_189B6EC30[v30];
          }
          break;
      }

      sub_1812D7A8C((uint64_t)a1, v37, -1, 1u, 0LL);
    }
  }

  else
  {
    sub_1812CF36C(97620);
  }

  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 52) = 0;
LABEL_36:
  uint64_t v14 = *(void *)(v1 + 24);
  if (!v14) {
    return result;
  }
  int v17 = *(void *)(v14 - 8);
  uint64_t v16 = (void *)(v14 - 8);
  int v15 = v17;
  if (v17 < 2)
  {
    uint64_t v18 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v16);
      --qword_18C468B10;
      uint64_t result = off_18C4653A8(v16);
      uint64_t v16 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_45;
      }
      uint64_t v18 = &xmmword_18C465410;
    }

    uint64_t result = (*v18)(v16);
  }

  else
  {
    *uint64_t v16 = v15 - 1;
  }

      uint64_t v9 = 0LL;
LABEL_36:
      int v23 = a3[1];
      if (!v23) {
        goto LABEL_202;
      }
      int v24 = *(unsigned __int16 *)(v23 + 20);
      if ((~v24 & 0x202) != 0 || *(_BYTE *)(v23 + 22) != 1)
      {
        if ((v24 & 1) == 0)
        {
          int v25 = LODWORD(v7);
          uint64_t v26 = sub_181303998((int *)v23, 1);
          LODWORD(v7) = v25;
          int v12 = (const char *)v26;
          goto LABEL_42;
        }

    *((_BYTE *)v4 + 10) = 0;
    v4[6] = v19;
    if (v21)
    {
      *(_BYTE *)(v17 + 48) = v21;
LABEL_43:
      if (!(_DWORD)result) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_18137FF60((uint64_t)v4, v17, &v24);
      while (1)
      {
        sub_1813733EC((uint64_t)v4, v17, (int *)&v24);
        if (*(_BYTE *)(v17 + 48)) {
          return 267LL;
        }
        uint64_t result = v24;
        if (*(void *)(v17 + 40) == v20 || v24 != 0) {
          goto LABEL_43;
        }
      }
    }
  }

  return result;
}

  uint64_t v11 = *(void *)(v1 + 56);
  if (!v11) {
    goto LABEL_42;
  }
  int v12 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_41;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v11);
  --qword_18C468B10;
  off_18C4653A8(v11);
  uint64_t v11 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v12 = &xmmword_18C465410;
LABEL_41:
    (*v12)(v11);
  }

    ++v27;
  }

  if (byte_1813C6343[v32] == byte_1813C6343[v33]) {
    goto LABEL_35;
  }
  __int128 v34 = "rank";
  for (juint64_t j = a2; ; ++jj)
  {
    uint64_t v38 = *jj;
    uint64_t v39 = *(unsigned __int8 *)v34;
    if ((_DWORD)v38 == (_DWORD)v39) {
      break;
    }
    if (byte_1813C6343[v38] != byte_1813C6343[v39])
    {
      for (kk = "secure-delete"; ; ++kk)
      {
        int v44 = *a2;
        int v45 = *(unsigned __int8 *)kk;
        if ((_DWORD)v44 == (_DWORD)v45)
        {
          if (!*a2)
          {
            if (sqlite3_value_numeric_type((sqlite3_value *)a3) == 1)
            {
              uint64_t v46 = sqlite3_value_int((sqlite3_value *)a3);
              if ((v46 & 0x80000000) == 0)
              {
                uint64_t v47 = v46;
                uint64_t result = 0LL;
                *(_DWORD *)(a1 + 176) = v47 != 0;
                return result;
              }
            }

            goto LABEL_72;
          }
        }

        else if (byte_1813C6343[v44] != byte_1813C6343[v45])
        {
          goto LABEL_72;
        }

        ++a2;
      }
    }

                ++v22;
                v23 += 2;
              }

              while (v22 < v4[7]);
            }

            uint64_t v26 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
              --qword_18C468B10;
              uint64_t result = off_18C4653A8(v6);
              uint64_t v6 = (uint64_t *)xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_23;
              }
              uint64_t v26 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
            }

            uint64_t result = (*v26)(v6);
LABEL_23:
            if (*v3) {
              return result;
            }
            int v4 = *a2;
            goto LABEL_25;
          }
        }

        int v12 = v8 - v9;
        unsigned int v13 = &v6[2 * v9 + 5];
        do
        {
          *unsigned int v13 = 0LL;
          v13 += 2;
          --v12;
        }

        while (v12);
        goto LABEL_16;
      }

    if (v26 >= v30) {
      goto LABEL_105;
    }
LABEL_36:
    uint64_t v31 = *v9;
    if ((v31 - 1) < 2)
    {
      if (sqlite3_column_type((sqlite3_stmt *)a3, v26) != v31)
      {
        int v33 = 9LL;
LABEL_88:
        char v27 = 0;
        if (!a2) {
LABEL_26:
        }
          sub_1813BB8F8(a1, v9, v33, &v62);
LABEL_27:
        sub_1813BACD4((uint64_t)&__src, (sqlite3_stmt *)a3, v26, &v62);
        goto LABEL_28;
      }

      int v32 = COERCE_DOUBLE(bswap64(*(void *)(v9 + 1)));
      if (v31 == 1)
      {
        int v33 = 9LL;
      }

      else
      {
        int v33 = 9LL;
      }

uint64_t sub_18126D03C( uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (!a2
    || a6 && a8
    || (a7 != 0) == (a8 == 0)
    || (a3 - 128) < 0xFFFFFF7F
    || (a9 == 0) != (a10 == 0)
    || (strlen(a2) & 0x3FFFFF00) != 0)
  {
    return sub_1812CF36C(187184);
  }

  int v20 = a4 & 0x380800;
  unsigned int v21 = a4 & 7;
  int v34 = v20;
  if (v21 - 1 >= 3)
  {
    if (v21 == 5)
    {
      uint64_t v22 = sub_18126D03C(a1, a2, a3, v20 | 1u, a5, a6, a7, a8, a9, a10, a11);
      if ((_DWORD)v22) {
        return v22;
      }
      uint64_t v22 = sub_18126D03C(a1, a2, a3, v34 | 2u, a5, a6, a7, a8, a9, a10, a11);
      if ((_DWORD)v22) {
        return v22;
      }
      unsigned int v21 = 3;
    }

    else if (v21 == 4)
    {
      unsigned int v21 = 2;
    }

    else
    {
      unsigned int v21 = 1;
    }
  }

  int v23 = sub_18126CC00(a1, a2, a3, v21, 0);
  if (!v23 || (*((_DWORD *)v23 + 1) & 3) != v21 || (char)*v23 != (_DWORD)a3)
  {
    if (!(a6 | a8)) {
      return 0LL;
    }
LABEL_26:
    uint64_t v30 = sub_18126CC00(a1, a2, a3, v21, 1);
    if (!v30) {
      return 7LL;
    }
    uint64_t v31 = v30;
    sub_18135F2A4((void *)a1, (uint64_t)v30);
    if (a11) {
      ++*a11;
    }
    uint64_t v22 = 0LL;
    *((void *)v31 + 8) = a11;
    *((_DWORD *)v31 + 1) = (*((_DWORD *)v31 + 1) & 3 | v34) ^ 0x200000;
    if (a6) {
      uint64_t v32 = a6;
    }
    else {
      uint64_t v32 = a7;
    }
    *((void *)v31 + 3) = v32;
    *((void *)v31 + 4) = a8;
    *((void *)v31 + 5) = a9;
    *((void *)v31 + 6) = a10;
    *((void *)v31 + 1) = a5;
    *uint64_t v31 = a3;
    return v22;
  }

  if (!*(_DWORD *)(a1 + 208))
  {
    for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    goto LABEL_26;
  }

  uint64_t v22 = 5LL;
  sub_1812D50CC(a1, 5, "unable to delete/modify user-function due to active statements", v24, v25, v26, v27, v28, v33);
  return v22;
}

uint64_t sub_18126D2EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)a1 == 1) {
    int v8 = sub_18126D6B4(a2, a3);
  }
  else {
    int v8 = sub_181363650(a2, a3);
  }
  int v9 = v8;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    uint64_t v11 = (*(_DWORD *)(a1 + 16) - 1) & v8;
    int v12 = (int *)(v10 + 16 * v11);
    int v15 = *v12;
    unsigned int v13 = v12 + 2;
    int v14 = v15;
    if (*(_BYTE *)a1 == 1) {
      uint64_t v16 = sub_18126D718;
    }
    else {
      uint64_t v16 = sub_181363688;
    }
    do
    {
      if (!v14) {
        goto LABEL_13;
      }
      unsigned int v13 = *(_DWORD **)v13;
      if (!v13) {
        goto LABEL_13;
      }
      --v14;
    }

    while (((unsigned int (*)(void, void, char *, uint64_t))v16)( *((void *)v13 + 3),  v13[8],  a2,  a3));
    uint64_t v17 = *((void *)v13 + 2);
    if (a4)
    {
      *((void *)v13 + 2) = a4;
      return v17;
    }

    uint64_t v21 = *(void *)v13;
    uint64_t v22 = (void *)*((void *)v13 + 1);
    if (v22)
    {
      *uint64_t v22 = v21;
      uint64_t v21 = *(void *)v13;
      if (!*(void *)v13) {
        goto LABEL_28;
      }
    }

    else
    {
      *(void *)(a1 + 8) = v21;
      if (!v21)
      {
LABEL_28:
        uint64_t v23 = *(void *)(a1 + 24) + 16 * v11;
        uint64_t v24 = (void *)(v23 + 8);
        if (*(_DWORD **)(v23 + 8) == v13) {
          *uint64_t v24 = v21;
        }
        if ((*(_DWORD *)v23)-- <= 1) {
          *uint64_t v24 = 0LL;
        }
        if (*(_BYTE *)(a1 + 1))
        {
          uint64_t v26 = *((void *)v13 + 3);
          if (v26)
          {
            uint64_t v27 = &off_18C4653A8;
            if (!dword_18C465380)
            {
LABEL_40:
              (*v27)(v26);
              goto LABEL_41;
            }

            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v26);
            --qword_18C468B10;
            off_18C4653A8(v26);
            uint64_t v26 = xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v27 = &xmmword_18C465410;
              goto LABEL_40;
            }
          }
        }

LABEL_41:
        uint64_t v28 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v13);
          --qword_18C468B10;
          off_18C4653A8(v13);
          unsigned int v13 = (_DWORD *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_47;
          }
          uint64_t v28 = &xmmword_18C465410;
        }

        (*v28)(v13);
LABEL_47:
        int v29 = *(_DWORD *)(a1 + 4);
        BOOL v30 = __OFSUB__(v29--, 1);
        *(_DWORD *)(a1 + 4) = v29;
        if ((v29 < 0) ^ v30 | (v29 == 0)) {
          sub_18136017C(a1);
        }
        return v17;
      }
    }

    *(void *)(v21 + 8) = v22;
    goto LABEL_28;
  }

    uint64_t v22 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_24;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v15);
    --qword_18C468B10;
    uint64_t v6 = off_18C4653A8(v15);
    int v15 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v22 = &xmmword_18C465410;
LABEL_24:
      uint64_t v6 = (*v22)(v15);
      int v15 = 0LL;
    }

  uint64_t v36 = *(void *)v35;
  int v91 = 0LL;
  uint64_t result = *(void *)(v35 + 40);
  if (result) {
    return result;
  }
  uint64_t v37 = *(void **)a1;
  uint64_t v38 = *(void *)(v36 + 8);
  if (v38 && v38 != *(void *)(v36 + 16)) {
    goto LABEL_9;
  }
  uint64_t v39 = v37 ? sub_1812F2264(*(void *)a1, 0x68uLL) : sub_18126F0AC(104LL);
  uint64_t v50 = v39;
  if (!v39) {
    goto LABEL_9;
  }
  *(void *)(v39 + 96) = 0LL;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)uint64_t v39 = 0u;
  *(_OWORD *)(v39 + 16) = 0u;
  uint64_t v51 = *(const void **)(v35 + 8);
  if (!v51
    || ((int v52 = strlen(*(const char **)(v35 + 8)), __n = v52 + 1, !v37)
      ? (uint64_t v53 = (char *)sub_18126F0AC(v52 + 1))
      : (uint64_t v53 = (char *)sub_1812F2264((uint64_t)v37, v52 + 1)),
        (uint64_t v54 = v53) == 0LL))
  {
    *(void *)uint64_t v50 = 0LL;
    sub_1812F20DC(v37, (void *)v50);
    goto LABEL_9;
  }

  memcpy(v53, v51, __n);
  *(void *)uint64_t v50 = v54;
  *(void *)(v35 + 40) = v50;
  *(_BYTE *)(v50 + 63) = 1;
  *(void *)(v50 + 96) = *(void *)(v37[4] + 24LL);
  *(_WORD *)(v50 + 52) = -1;
  uint64_t v55 = *(_DWORD *)(v50 + 48) | 0x8000;
  *(_DWORD *)(v50 + 44) = 1;
  *(_DWORD *)(v50 + 48) = v55;
  char v56 = strlen(v54) + 1;
  int v57 = (void *)sub_1812F2264((uint64_t)v37, v56);
  uint64_t v63 = v57;
  if (v57) {
    memcpy(v57, v54, v56);
  }
  sub_181311884(a1, v50, v63, v58, v59, v60, v61, v62);
  sub_181311884(a1, v50, 0LL, v64, v65, v66, v67, v68);
  int v74 = *(const char **)v50;
  if (*(void *)v50)
  {
    v75 = strlen(*(const char **)v50) + 1;
    uint64_t v76 = (void *)sub_1812F2264((uint64_t)v37, v75);
    uint64_t v77 = v76;
    if (v76) {
      memcpy(v76, v74, v75);
    }
  }

  else
  {
    uint64_t v77 = 0LL;
  }

  sub_181311884(a1, v50, v77, v69, v70, v71, v72, v73);
  if (!sub_18130FAF8( (uint64_t)v37,  v50,  v35,  *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *))(v36 + 16),  (void **)&v91,  v78,  v79,  v80)) {
    return *(void *)(v35 + 40);
  }
  char v87 = v91;
  sub_1812DC47C(a1, "%s", v81, v82, v83, v84, v85, v86, (char)v91);
  if (v87) {
    sub_1812F20DC(v37, v87);
  }
  v88 = *(void *)(v35 + 40);
  if (!v88) {
    return 0LL;
  }
  *(_DWORD *)(v88 + 48) |= 0x4000u;
  if (v37[102] || (uint64_t v89 = *(_DWORD *)(v88 + 44) - 1, (*(_DWORD *)(v88 + 44) = v89) == 0)) {
    sub_181311A80(v37, (void *)v88);
  }
  uint64_t result = 0LL;
  *(void *)(v35 + 40) = 0LL;
  return result;
}

    int v14 = 0LL;
    goto LABEL_42;
  }

  if ((_DWORD)v76 == 1)
  {
    uint64_t v77 = 0LL;
    goto LABEL_108;
  }

  uint64_t v77 = v76 & 0xFFFFFFFE;
  v107 = a4 + 8;
  statfs v108 = v77;
  do
  {
    *(v107 - 4) = -1;
    *v107 = -1;
    v107 += 8;
    v108 -= 2LL;
  }

  while (v108);
  if (v77 != v76)
  {
LABEL_108:
    unsigned int v109 = &a4[4 * v77 + 4];
    __int128 v110 = v76 - v77;
    do
    {
      *unsigned int v109 = -1;
      v109 += 4;
      --v110;
    }

    while (v110);
  }

  __int128 v111 = 0LL;
  char v82 = 0xFFFFFFFFLL;
  __int128 v112 = *(_WORD *)(v23 + 54);
  while (2)
  {
    __int128 v113 = v112;
    uint64_t v114 = 0LL;
    __int128 v115 = *(_BYTE **)&a4[4 * v111 + 2];
LABEL_114:
    int v68 = 0LL;
    int v69 = *(void *)(*(void *)(v23 + 8) + 16 * v114);
LABEL_117:
    char v70 = v115[v68];
    size_t v71 = *(unsigned __int8 *)(v69 + v68);
    if ((_DWORD)v70 == (_DWORD)v71)
    {
      if (!v115[v68])
      {
        a4[4 * v111 + 4] = v114;
        __int128 v116 = *(void *)(v23 + 8);
        if ((*(_WORD *)(v116 + 16 * v114 + 14) & 0x60) != 0)
        {
          sub_1812DC47C( a1,  "cannot INSERT into generated column %s",  v68,  v69,  v70,  v71,  v82,  v75,  *(void *)(v116 + 16 * v114));
          goto LABEL_41;
        }

        else {
          char v82 = v82;
        }
        else {
          v75 = 0LL;
        }
        __int128 v112 = *(_WORD *)(v23 + 54);
        if ((int)v114 >= v112)
        {
LABEL_130:
          __int128 v115 = *(_BYTE **)&a4[4 * v111 + 2];
          goto LABEL_131;
        }

  uint64_t v17 = *(void *)(v2 + 40);
  if (v17) {
    *(void *)(v17 + 32) = *(void *)(v2 + 32);
  }
  int v18 = *(void *)(v2 + 32);
  if (v18) {
    *(void *)(v18 + 40) = v17;
  }
  uint64_t v19 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v19)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v2);
  int v2 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v19 = &xmmword_18C465410;
    return (*v19)(v2);
  }

  return result;
}

      int v35 = *(void *)(*(void *)v9 + 16LL);
      uint64_t v36 = v58;
      if (!v58) {
        goto LABEL_42;
      }
      goto LABEL_45;
    }

    sqlite3_finalize(ppStmt[0]);
    uint64_t v33 = (char *)v20[1];
    if (v33)
    {
      uint64_t v34 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v33);
        int v35 = (char *)*v34++;
        uint64_t v33 = v35;
      }

      while (v35);
    }

    sqlite3_free(v20);
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = 7;
    return 0LL;
  }

  uint64_t v20 = 0LL;
  LODWORD(v16) = 0;
  uint64_t v17 = 0;
LABEL_34:
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0LL;
  uint64_t v25 = (v16 + 1);
  v20[v25] = 0LL;
  if (!v17) {
    goto LABEL_46;
  }
  uint64_t v26 = sqlite3_mprintf("SELECT 1 FROM pragma_index_list(%Q) WHERE origin='pk'", v4);
  if (!v26) {
    goto LABEL_41;
  }
  uint64_t v27 = v26;
  uint64_t v28 = sqlite3_prepare_v2(*(sqlite3 **)a1, v26, -1, ppStmt, 0LL);
  sqlite3_free(v27);
  if (v28)
  {
    int v29 = (char *)v20[1];
    if (v29)
    {
      BOOL v30 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v29);
        uint64_t v31 = (char *)*v30++;
        int v29 = v31;
      }

      while (v31);
    }

    uint64_t v32 = (char *)v20;
    goto LABEL_158;
  }

  uint64_t v36 = sqlite3_step(ppStmt[0]);
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0LL;
  if (v36 == 100)
  {
LABEL_46:
    if ((_DWORD)v16)
    {
      uint64_t v37 = v25 - 1;
      uint64_t v38 = v20 + 1;
      uint64_t v39 = v25 - 1;
      while (sqlite3_stricmp("rowid", *v38))
      {
        ++v38;
        if (!--v39) {
          goto LABEL_50;
        }
      }

      int v93 = v20 + 1;
      uint64_t v40 = 1LL;
      unsigned int v94 = v37;
      while (sqlite3_stricmp("_rowid_", *v93))
      {
        ++v93;
        if (!--v94) {
          goto LABEL_51;
        }
      }

      char v95 = v20 + 1;
      uint64_t v40 = 2LL;
      while (sqlite3_stricmp("oid", *v95))
      {
        ++v95;
        if (!--v37) {
          goto LABEL_51;
        }
      }
    }

    else
    {
LABEL_50:
      uint64_t v40 = 0LL;
LABEL_51:
      int v41 = off_189B6CC78[v40];
      if (!sqlite3_table_column_metadata(*(sqlite3 **)a1, 0LL, v4, v41, 0LL, 0LL, 0LL, 0LL, 0LL)) {
        *uint64_t v20 = v41;
      }
    }
  }

  uint64_t v98 = 0LL;
  int v99 = 0LL;
  sub_1812CE818((uint64_t)&v98, "INSERT INTO ", 0);
  BOOL v42 = sub_1812CEAE0(v4);
  sub_1812CE818((uint64_t)&v98, v4, v42);
  if (*v20)
  {
    sub_1812CE818((uint64_t)&v98, "(", 0);
    sub_1812CE818((uint64_t)&v98, (char *)*v20, 0);
    if (v20[1])
    {
      int v43 = v20 + 2;
      do
      {
        sub_1812CE818((uint64_t)&v98, ",", 0);
        int v44 = (char *)*(v43 - 1);
        int v45 = sub_1812CEAE0(v44);
        sub_1812CE818((uint64_t)&v98, v44, v45);
      }

      while (*v43++);
    }

    sub_1812CE818((uint64_t)&v98, ")", 0);
  }

  sub_1812CE818((uint64_t)&v98, " VALUES(", 0);
  zSql[0] = 0LL;
  zSql[1] = 0LL;
  sub_1812CE818((uint64_t)zSql, "SELECT ", 0);
  if (*v20)
  {
    sub_1812CE818((uint64_t)zSql, (char *)*v20, 0);
    sub_1812CE818((uint64_t)zSql, ",", 0);
  }

  uint64_t v47 = (char *)v20[1];
  if (v47)
  {
    uint64_t v48 = 2LL;
    do
    {
      uint64_t v49 = v48;
      uint64_t v50 = sub_1812CEAE0(v47);
      sub_1812CE818((uint64_t)zSql, v47, v50);
      if (!v20[v49]) {
        break;
      }
      sub_1812CE818((uint64_t)zSql, ",", 0);
      uint64_t v47 = (char *)v20[v49];
      uint64_t v48 = v49 + 1;
    }

    while (v47);
    uint64_t v51 = (char *)v20[1];
    if (*v20) {
      int v52 = 0;
    }
    else {
      int v52 = -1;
    }
    uint64_t v53 = v52 + v49;
    if (v51)
    {
      uint64_t v54 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v51);
        uint64_t v55 = (char *)*v54++;
        uint64_t v51 = v55;
      }

      while (v55);
    }
  }

  else
  {
    uint64_t v53 = *v20 != 0LL;
  }

  sqlite3_free(v20);
  sub_1812CE818((uint64_t)zSql, " FROM ", 0);
  char v56 = sub_1812CEAE0(v4);
  sub_1812CE818((uint64_t)zSql, v4, v56);
  int v57 = sqlite3_prepare_v2(*(sqlite3 **)a1, zSql[0], -1, &pStmt, 0LL);
  if (v57)
  {
    int v58 = *(_DWORD *)(a1 + 12);
    ++*(_DWORD *)(a1 + 8);
    if (!v58) {
      *(_DWORD *)(a1 + 12) = v57;
    }
    goto LABEL_157;
  }

  if (sqlite3_step(pStmt) != 100) {
    goto LABEL_157;
  }
  int v96 = a1;
  char v97 = v53;
  while (2)
  {
    (*(void (**)(void *, void))(a1 + 24))(v98, *(void *)(a1 + 32));
    if (v53 < 1) {
      goto LABEL_77;
    }
    v59 = 0;
    while (2)
    {
      if (v59) {
        (*(void (**)(const char *, void))(a1 + 24))(",", *(void *)(a1 + 32));
      }
      switch(sqlite3_column_type(pStmt, v59))
      {
        case 1:
          uint64_t v60 = sqlite3_column_int64(pStmt, v59);
          sub_1812CE7C8(a1, "%lld", v60);
          goto LABEL_81;
        case 2:
          unsigned int v61 = sqlite3_column_double(pStmt, v59);
          if (v61 == -INFINITY)
          {
            (*(void (**)(const char *, void))(a1 + 24))("-1e999", *(void *)(a1 + 32));
          }

          else if (v61 == INFINITY)
          {
            (*(void (**)(const char *, void))(a1 + 24))("1e999", *(void *)(a1 + 32));
          }

          else
          {
            uint64_t v78 = -v61;
            if (v61 >= 0.0) {
              uint64_t v78 = v61;
            }
            if (v78 == 0.0)
            {
              uint64_t v80 = 0LL;
              LODWORD(v79) = 0;
            }

            else
            {
              uint64_t v79 = *(uint64_t *)&v78 >> 52;
              uint64_t v80 = *(void *)&v78 & 0xFFFFFFFFFFFFFLL | 0x10000000000000LL;
              if ((LOBYTE(v78) & 1) == 0 && (int)v79 <= 1074)
              {
                do
                {
                  int v81 = v80;
                  char v82 = v79;
                  v80 >>= 1;
                  LODWORD(v79) = v79 + 1;
                }

                while (v82 <= 1073 && v81 >= 2 && (v81 & 2) == 0);
              }

              if (v61 < 0.0) {
                uint64_t v80 = -(uint64_t)v80;
              }
            }

            unsigned int v92 = sqlite3_mprintf("ieee754(%lld,%d)", v80, (int)v79 - 1075);
            sub_1812CE7C8(a1, "%s", v92);
            sqlite3_free(v92);
          }

          goto LABEL_81;
        case 3:
          uint64_t v62 = sqlite3_column_text(pStmt, v59);
          uint64_t v63 = (const char *)v62;
          uint64_t v64 = v62;
          while (2)
          {
            int v65 = *v64++;
            switch(v65)
            {
              case 0:
                sub_1812CE7C8(a1, "'%s'", (const char *)v62);
                goto LABEL_81;
              case 10:
              case 13:
              case 39:
                uint64_t v66 = 0;
                uint64_t v67 = 0;
                int v68 = v62;
                break;
              default:
                continue;
            }

            break;
          }

          break;
        case 4:
          LODWORD(v75) = sqlite3_column_bytes(pStmt, v59);
          uint64_t v76 = (char *)sqlite3_column_blob(pStmt, v59);
          (*(void (**)(const char *, void))(a1 + 24))("x'", *(void *)(a1 + 32));
          if ((int)v75 >= 1)
          {
            v75 = v75;
            do
            {
              LOBYTE(ppStmt[0]) = a0123456789abcd[(unint64_t)*v76 >> 4];
              uint64_t v77 = *v76++;
              *(_WORD *)((char *)ppStmt + 1) = a0123456789abcd[v77 & 0xF];
              (*(void (**)(sqlite3_stmt **, void))(a1 + 24))(ppStmt, *(void *)(a1 + 32));
              --v75;
            }

            while (v75);
          }

          (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
          goto LABEL_81;
        case 5:
          (*(void (**)(const char *, void))(a1 + 24))("NULL", *(void *)(a1 + 32));
          goto LABEL_81;
        default:
          goto LABEL_81;
      }

      while (1)
      {
        char v70 = *v68++;
        int v69 = v70;
        if (v70 != 10) {
          break;
        }
        ++v66;
LABEL_92:
        if (v69 == 13) {
          ++v67;
        }
      }

      if (v69) {
        goto LABEL_92;
      }
      if (v66)
      {
        (*(void (**)(const char *, void))(a1 + 24))("replace(", *(void *)(a1 + 32));
        if (strstr(v63, "\\n"))
        {
          size_t v71 = "\\012";
          if (strstr(v63, "\\012"))
          {
            size_t v72 = 0;
            do
            {
              __int16 v73 = v72 + 1;
              size_t v71 = (const char *)ppStmt;
              sqlite3_snprintf(20, (char *)ppStmt, "(%s%u)", "\\n", v72);
              int v74 = strstr(v63, (const char *)ppStmt);
              size_t v72 = v73;
            }

            while (v74);
          }
        }

        else
        {
          size_t v71 = "\\n";
        }
      }

      else
      {
        size_t v71 = 0LL;
      }

      if (v67)
      {
        (*(void (**)(const char *, void))(a1 + 24))("replace(", *(void *)(a1 + 32));
        if (strstr(v63, "\\r"))
        {
          int v83 = "\\015";
          if (strstr(v63, "\\015"))
          {
            uint64_t v84 = 0;
            do
            {
              uint64_t v85 = v84 + 1;
              int v83 = __little;
              sqlite3_snprintf(20, __little, "(%s%u)", "\\r", v84);
              int v86 = strstr(v63, __little);
              uint64_t v84 = v85;
            }

            while (v86);
            a1 = v96;
          }
        }

        else
        {
          int v83 = "\\r";
        }
      }

      else
      {
        int v83 = 0LL;
      }

      (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
      while (1)
      {
        v88 = *(unsigned __int8 *)v63;
        if (!*v63) {
          break;
        }
        while (1)
        {
          uint64_t v89 = 0LL;
          while (v88 > 0x27 || ((1LL << v88) & 0x8000002401LL) == 0)
          {
            int v90 = &v63[v89++];
            v88 = *((unsigned __int8 *)v90 + 1);
          }

          if (v88 == 39) {
            int v91 = v89 + 1;
          }
          else {
            int v91 = v89;
          }
          if (v91)
          {
            sub_1812CE7C8(a1, "%.*s", v91, v63);
            v63 += v91;
          }

          if (v88 != 39) {
            break;
          }
          (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
          v88 = *(unsigned __int8 *)v63;
          if (!*v63) {
            goto LABEL_150;
          }
        }

        if (!v88) {
          break;
        }
        ++v63;
        if (v88 == 10) {
          char v87 = (void *)v71;
        }
        else {
          char v87 = v83;
        }
        (*(void (**)(void *, void))(a1 + 24))(v87, *(void *)(a1 + 32));
      }

  *(_DWORD *)(a1 + 80) = v29;
  BOOL v30 = *(void *)(a1 + 416);
  if (v30)
  {
    if ((*(_WORD *)(v30 + 20) & 0x9000) == 0)
    {
      *(_WORD *)(v30 + 20) = 1;
      uint64_t v31 = *(void *)(a1 + 24);
      if (!v31) {
        return v29;
      }
      goto LABEL_45;
    }

    sub_181303888((int *)v30);
  }

  uint64_t v31 = *(void *)(a1 + 24);
  if (v31) {
LABEL_45:
  }
    xmmword_18C465410(v31);
  return v29;
}

    if ((_DWORD)v14) {
      goto LABEL_54;
    }
    if (!*((_DWORD *)v37 + 6))
    {
      if (a2)
      {
        uint64_t v23 = *(_DWORD *)(a1 + 140);
        BOOL v30 = 0LL;
        uint64_t v31 = 0LL;
        uint64_t v32 = 0;
        uint64_t v33 = v23;
        uint64_t v34 = 0;
        int v35 = 0;
        sqlite3_str_appendall((sqlite3_str *)&v30, "VACUUM");
        sqlite3_str_appendf((sqlite3_str *)&v30, " %Q", a2);
        uint64_t v24 = (char *)sub_18126ACBC((uint64_t)&v30);
        int v14 = sqlite3_exec((sqlite3 *)a1, v24, 0LL, 0LL, 0LL);
        sqlite3_free(v24);
      }

      else
      {
        int v14 = sqlite3_exec((sqlite3 *)a1, "VACUUM", 0LL, 0LL, 0LL);
      }

      if ((_DWORD)v14) {
        goto LABEL_54;
      }
    }
  }

  uint64_t v16 = *(unsigned __int8 *)(a1 + 113);
  if (v16 == 186) {
    goto LABEL_23;
  }
  if (v16 != 118)
  {
    if (v16 != 109)
    {
      uint64_t v17 = "invalid";
      goto LABEL_53;
    }

      uint64_t v28 = *(int *)(a1 + 8);
      int v29 = v109;
      if ((int)v109 >= 1)
      {
        if ((_DWORD)v10) {
          goto LABEL_208;
        }
        BOOL v30 = *(void *)(a1 + 16);
        uint64_t v31 = v27 + (unint64_t)v109;
        if (v31 <= SHIDWORD(v107))
        {
          int v35 = v106;
        }

        else
        {
          if (HIDWORD(v107)) {
            uint64_t v32 = SHIDWORD(v107);
          }
          else {
            uint64_t v32 = 128LL;
          }
          do
          {
            uint64_t v33 = v32;
            v32 *= 2LL;
          }

          while (v32 < v31);
          if (v33 > 1073741695)
          {
            uint64_t v32 = 2147483391LL;
            if (v31 > 2147483391) {
              goto LABEL_207;
            }
          }

          uint64_t v34 = v106;
          if (sqlite3_initialize() || (int v35 = sub_18127D33C(v34, v32)) == 0)
          {
            LODWORD(v28) = *(_DWORD *)(a1 + 8);
LABEL_207:
            uint64_t v10 = 7LL;
LABEL_208:
            *(_DWORD *)(a1 + 8) = v28 + v29;
            uint64_t v11 = v103;
            int v12 = v104;
            goto LABEL_5;
          }

          v106 = v35;
          HIDWORD(v107) = v32;
        }

        memcpy((void *)(v35 + v27), (const void *)(v30 + v28), v29);
        LODWORD(v107) = v27 + v29;
        LODWORD(v28) = *(_DWORD *)(a1 + 8);
        a2 = v102;
      }

      *(_DWORD *)(a1 + 8) = v28 + v29;
      uint64_t v11 = v103;
      int v12 = v104;
      if ((_DWORD)v10) {
        goto LABEL_5;
      }
      if (a2) {
        goto LABEL_195;
      }
LABEL_28:
      uint64_t v19 = sub_1813BBD3C(a1, 2);
      statfs v108 = v19;
      if ((_DWORD)v19) {
        goto LABEL_210;
      }
    }
  }

  uint64_t v10 = v9;
  uint64_t v11 = 0LL;
  int v12 = 0LL;
LABEL_5:
  unsigned int v13 = v106;
  if (v106)
  {
LABEL_6:
    int v14 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
      --qword_18C468B10;
      off_18C4653A8(v13);
      unsigned int v13 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_12;
      }
      int v14 = &xmmword_18C465410;
    }

    (*v14)(v13);
  }

  *(_DWORD *)(a1 + 32) = *__error();
  unsigned int v13 = 2314LL;
LABEL_68:
  int v35 = *(void *)(v7 + 16);
  if (v35) {
    xmmword_18C465410(v35);
  }
  if (!(_DWORD)v13) {
    *(_BYTE *)(a1 + 28) = a2;
  }
  return v13;
}

  int v18 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_46:
    (*v18)(v7);
    return v2;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v18 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
    goto LABEL_46;
  }

  return v2;
}

  *(_BYTE *)(v8 + v5) = 0;
  return v8;
}

      if (a1) {
        goto LABEL_42;
      }
      goto LABEL_47;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    int v4 = *a3;
    if (!*a3)
    {
      sub_1812CF36C(89752);
LABEL_19:
      uint64_t v10 = 0.0;
      goto LABEL_22;
    }
  }

  int v9 = *(_WORD *)(v4 + 20);
  if ((v9 & 8) != 0)
  {
    uint64_t v10 = *(double *)v4;
    goto LABEL_22;
  }

  if ((v9 & 0x24) != 0)
  {
    uint64_t v10 = (double)*(uint64_t *)v4;
    goto LABEL_22;
  }

  if ((v9 & 0x12) == 0) {
    goto LABEL_19;
  }
  uint64_t v10 = sub_181303DB8(v4);
LABEL_22:
  if (v10 >= 0.0) {
    int v12 = v10;
  }
  else {
    int v12 = -v10;
  }
  if (!a1)
  {
    int v14 = 97397;
    goto LABEL_49;
  }

  unsigned int v13 = *a1;
  if ((*(_WORD *)(v13 + 20) & 0x9000) != 0) {
    sub_181303888((int *)v13);
  }
  else {
    *(_WORD *)(v13 + 20) = 1;
  }
  *(double *)unsigned int v13 = v12;
  *(_WORD *)(v13 + 20) = 8;
}

  if (!v11 || !v14 || !v17) {
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 528);
  *(void *)(v5 + 528) = 0LL;
  if (!*(_BYTE *)(v5 + 111)) {
    sub_1812FA020(v5);
  }
  int v93 = 0u;
  unsigned int v94 = 0u;
  *(void *)&unsigned int v94 = sub_1812E2C64(v5, v14, v8);
  v92[0] = v95;
  v92[1] = sub_181353864;
  v92[2] = sub_181353900;
  v92[3] = 0LL;
  v92[4] = 0LL;
  v92[5] = &v93;
  uint64_t v25 = sub_1813523CC((uint64_t)v95, v8, v5, v11, v19, v22, v23, v24);
  if (!v25)
  {
    int v29 = *(void *)(v5 + 48);
    BOOL v30 = v98;
    if (!v98)
    {
      if (v99)
      {
        uint64_t v34 = *v99;
        if (*v99)
        {
          int v35 = v101;
          if (v101)
          {
            if (*v101 == v34)
            {
              uint64_t v37 = &v101;
            }

            else
            {
              do
              {
                uint64_t v36 = v35;
                int v35 = (void *)v35[3];
                if (!v35) {
                  goto LABEL_117;
                }
              }

              while (*v35 != v34);
              uint64_t v37 = v36 + 3;
            }

            *uint64_t v37 = v35[3];
            v35[3] = v93;
            *(void *)&int v93 = v35;
            ++DWORD2(v93);
          }
        }

        a2 = v342;
        uint64_t v24 = v341;
LABEL_42:
        sub_181362408(v24);
        if ((_DWORD)v6) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = a2 <= 0;
        }
        if (v25) {
          goto LABEL_542;
        }
      }
    }
  }

      if ((int)(v31 + 1) < (int)v26)
      {
        uint64_t v32 = v13[v31 + 1];
        uint64_t v33 = (((v32 - 97) >> 1) | (((_BYTE)v32 - 97) << 7));
        uint64_t v23 = v33 > 0xA;
        uint64_t v34 = (1 << v33) & 0x495;
        if (!v23 && v34 != 0) {
          goto LABEL_46;
        }
        if (v32 != 121) {
          BOOL v30 = 1;
        }
        if ((v30 & 1) == 0)
        {
LABEL_46:
          uint64_t v36 = v31 + 2LL;
          uint64_t v37 = &v13[v36];
          while (1)
          {
            uint64_t v38 = *v37++;
            uint64_t v39 = (((v38 - 97) >> 1) | ((v38 - 97) << 7));
            uint64_t v23 = v39 > 0xA;
            uint64_t v40 = (1 << v39) & 0x495;
            if (v23 || v40 == 0) {
              break;
            }
            LODWORD(v36) = v36 + 1;
          }
        }

        v27[2] = 101;
        v223 = 29793;
        goto LABEL_420;
      }

      goto LABEL_439;
    case 'c':
      v75 = (v8 - 4);
      if (*(_DWORD *)&v13[v75] != 1768124005)
      {
        goto LABEL_439;
      }

      __int128 v166 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v166 <= 0xA)
      {
        __int128 v167 = 1;
        if (((1 << v166) & 0x495) != 0)
        {
          __int128 v168 = 0;
          goto LABEL_291;
        }
      }

      __int128 v168 = 1;
      if ((_DWORD)v8 == 5)
      {
        __int128 v167 = 0;
        goto LABEL_291;
      }

      v399 = 1LL;
      while (1)
      {
        v400 = v13[v399];
        v401 = (((v400 - 97) >> 1) | (((_BYTE)v400 - 97) << 7));
        uint64_t v23 = v401 > 0xA;
        v402 = (1 << v401) & 0x495;
        v403 = v23 || v402 == 0;
        if (!v403 || v400 == 121) {
          break;
        }
        if (v75 == ++v399)
        {
          __int128 v167 = 0;
          __int128 v168 = v8 - 4;
          goto LABEL_291;
        }
      }

      __int128 v167 = 1;
      __int128 v168 = v399;
LABEL_291:
      __int128 v169 = v13[v168 + 1];
      __int128 v170 = (((v169 - 97) >> 1) | (((_BYTE)v169 - 97) << 7));
      uint64_t v23 = v170 > 0xA;
      int v171 = (1 << v170) & 0x495;
      if (!v23 && v171 != 0) {
        goto LABEL_296;
      }
      if (v169 != 121) {
        __int128 v167 = 1;
      }
      if ((v167 & 1) == 0)
      {
LABEL_296:
        v173 = v168 + 2LL;
        v174 = &v13[v173];
        while (1)
        {
          v175 = *v174++;
          v176 = (((v175 - 97) >> 1) | ((v175 - 97) << 7));
          uint64_t v23 = v176 > 0xA;
          v177 = (1 << v176) & 0x495;
          if (v23 || v177 == 0) {
            break;
          }
          LODWORD(v173) = v173 + 1;
        }
      }

      *(_DWORD *)&v13[v75] = 1701015141;
      goto LABEL_439;
    case 'e':
      uint64_t v76 = (v8 - 4);
      uint64_t v77 = &v13[v76];
      if (*(_DWORD *)&v13[v76] != 1919253097) {
        goto LABEL_439;
      }
      uint64_t v78 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v78 <= 0xA)
      {
        uint64_t v79 = 1;
        if (((1 << v78) & 0x495) != 0)
        {
          uint64_t v80 = 0;
          goto LABEL_120;
        }
      }

      uint64_t v80 = 1;
      if ((_DWORD)v8 == 5)
      {
        uint64_t v79 = 0;
        goto LABEL_120;
      }

      v384 = 1LL;
      while (1)
      {
        v385 = v13[v384];
        v386 = (((v385 - 97) >> 1) | (((_BYTE)v385 - 97) << 7));
        uint64_t v23 = v386 > 0xA;
        v387 = (1 << v386) & 0x495;
        v388 = v23 || v387 == 0;
        if (!v388 || v385 == 121) {
          break;
        }
        if (v76 == ++v384)
        {
          uint64_t v79 = 0;
          uint64_t v80 = v8 - 4;
          goto LABEL_120;
        }
      }

      uint64_t v79 = 1;
      uint64_t v80 = v384;
LABEL_120:
      int v81 = v13[v80 + 1];
      char v82 = (((v81 - 97) >> 1) | (((_BYTE)v81 - 97) << 7));
      uint64_t v23 = v82 > 0xA;
      int v83 = (1 << v82) & 0x495;
      if (v23 || v83 == 0)
      {
        if (v81 != 121) {
          uint64_t v79 = 1;
        }
        if ((v79 & 1) != 0) {
          goto LABEL_410;
        }
      }

      uint64_t v85 = v80 + 2LL;
      int v86 = &v13[v85];
      while (1)
      {
        char v87 = *v86++;
        v88 = (((v87 - 97) >> 1) | ((v87 - 97) << 7));
        uint64_t v23 = v88 > 0xA;
        uint64_t v89 = (1 << v88) & 0x495;
        if (v23 || v89 == 0) {
          break;
        }
        LODWORD(v85) = v85 + 1;
      }

        uint64_t v25 = *((void *)v10 + 3);
        if (v25) {
          LODWORD(v25) = *(_DWORD *)v10;
        }
        if (v24 == (_DWORD)v25)
        {
LABEL_44:
          if (sqlite3_initialize())
          {
            int v8 = 0LL;
            int v12 = 7LL;
            goto LABEL_53;
          }

          uint64_t v26 = sub_18126F0AC(v24 + 40LL);
          int v8 = v26;
          if (!v26)
          {
            int v12 = 7LL;
            goto LABEL_53;
          }

          ++*(_DWORD *)(a1 + 84);
          *(void *)uint64_t v26 = a3;
          *(void *)(v26 + 8) = a2;
          *(void *)(v26 + 16) = 1LL;
          *(void *)(v26 + 24) = v26 + 40;
          *(void *)(v26 + 32) = 0LL;
          uint64_t v27 = sub_1812DCB6C(*(int **)(a1 + 112), (char *)(v26 + 40), *(unsigned int *)(a1 + 32), 0, sub_1812DCD5C);
          int v12 = v27;
          if (a2 != 1 || (_DWORD)v27)
          {
            if ((_DWORD)v27)
            {
LABEL_59:
              --*(_DWORD *)(a1 + 84);
              BOOL v30 = &off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
                --qword_18C468B10;
                off_18C4653A8(v8);
                int v8 = xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_53;
                }
                BOOL v30 = &xmmword_18C465410;
              }

              (*v30)(v8);
              int v8 = 0LL;
LABEL_53:
              *a4 = v8;
              return v12;
            }
          }

          else
          {
            uint64_t v28 = __rev16(**(unsigned __int16 **)(v8 + 24));
            *(_DWORD *)(a1 + 44) = v28;
            if (v28 > 0x28)
            {
LABEL_58:
              int v12 = 267LL;
              goto LABEL_59;
            }
          }

          if ((*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39) >= (int)(bswap32(*(unsigned __int16 *)(*(void *)(v8 + 24) + 2LL)) >> 16))
          {
            if (a3) {
              ++*(_DWORD *)(a3 + 16);
            }
            int v12 = 0LL;
            uint64_t v31 = a1 + 8LL * (*(_DWORD *)(v8 + 8) % 0x61u);
            *(void *)(v8 + 32) = *(void *)(v31 + 192);
            *(void *)(v31 + 192) = v8;
            goto LABEL_53;
          }

          goto LABEL_58;
        }

  uint64_t v33 = v37[0];
  if (v37[0])
  {
    uint64_t v34 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_47:
      (*v34)(v33);
      return v23;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
    --qword_18C468B10;
    off_18C4653A8(v33);
    uint64_t v33 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v34 = &xmmword_18C465410;
      goto LABEL_47;
    }
  }

  return v23;
}

  if (a3)
  {
    uint64_t v26 = dword_18C550B70++;
    uint64_t v27 = sqlite3_mprintf("ATTACH '%q' AS '%q'; -- clock=%d\n", v7, zSourceName, v26);
  }

  else
  {
    uint64_t v27 = sqlite3_mprintf("-- Main database is '%q'\n", v7, v31);
  }

  uint64_t v28 = v27;
  fputs(v27, *(FILE **)(a1 + 24));
  sqlite3_free(v28);
  sqlite3_free(v7);
}

LABEL_13:
  if (!a4) {
    return a4;
  }
  int v18 = *(_DWORD *)(a1 + 16);
  if (!v18)
  {
    if (sub_181367BFC(a1, 8))
    {
LABEL_24:
      *(_DWORD *)(a1 + 4) = 0;
      return a4;
    }

    int v18 = *(_DWORD *)(a1 + 16);
  }

  if (!sqlite3_initialize())
  {
    uint64_t v19 = sub_18126F0AC(40LL);
    if (v19)
    {
      uint64_t v20 = v19;
      *(void *)(v19 + 32) = 0LL;
      *(_OWORD *)uint64_t v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      if (a2 && *(_BYTE *)(a1 + 1))
      {
        if (sqlite3_initialize() || (uint64_t v31 = (void *)sub_18126F0AC((int)a3)) == 0LL)
        {
          *(void *)(v20 + 24) = 0LL;
          sub_181367D94(v20);
          return a4;
        }

        uint64_t v32 = v31;
        bzero(v31, (int)a3);
        *(void *)(v20 + 24) = v32;
        memcpy(v32, a2, (int)a3);
      }

      else
      {
        *(void *)(v19 + 24) = a2;
      }

      *(_DWORD *)(v20 + 32) = a3;
      ++*(_DWORD *)(a1 + 4);
      uint64_t v33 = *(void *)(a1 + 24) + 16LL * ((*(_DWORD *)(a1 + 16) - 1) & v9);
      uint64_t v34 = *(void *)(v33 + 8);
      if (v34)
      {
        *(void *)uint64_t v20 = v34;
        uint64_t v36 = *(void *)(v34 + 8);
        int v35 = (uint64_t **)(v34 + 8);
        *(void *)(v20 + 8) = v36;
        uint64_t v37 = *v35;
        if (!*v35) {
          uint64_t v37 = (uint64_t *)(a1 + 8);
        }
        *uint64_t v37 = v20;
        uint64_t v38 = (uint64_t *)v35;
      }

      else
      {
        uint64_t v40 = *(void *)(a1 + 8);
        uint64_t v38 = (uint64_t *)(a1 + 8);
        uint64_t v39 = v40;
        *(void *)uint64_t v20 = v40;
        if (v40) {
          *(void *)(v39 + 8) = v20;
        }
        *(void *)(v20 + 8) = 0LL;
      }

      uint64_t *v38 = v20;
      ++*(_DWORD *)v33;
      *(void *)(v33 + 8) = v20;
      *(void *)(v20 + 16) = a4;
      return 0LL;
    }
  }

  return a4;
}

  if ((v22 & 0x80000000) != 0) {
    goto LABEL_60;
  }
  uint64_t v25 = *(__int16 *)(a2 + 2);
  if (v22 >= 8)
  {
    uint64_t v34 = 40;
    if (v22 < 0x100)
    {
      uint64_t v36 = v22;
      if (v22 < 0x10)
      {
LABEL_42:
        LOBYTE(v39) = v36;
LABEL_43:
        int v41 = (int)v22;
        if (v22 >= 8)
        {
          int v43 = 40;
          if (v22 >= 0x100)
          {
            int v44 = (int)v22;
            do
            {
              v43 += 40;
              int v41 = v44 >> 4;
              uint64_t v37 = v44 > 0xFFF;
              v44 >>= 4;
            }

            while (v37);
          }

          if (v41 < 0x10)
          {
            LOBYTE(v45) = v41;
          }

          else
          {
            do
            {
              v43 += 10;
              int v45 = v41 >> 1;
              uint64_t v37 = v41 > 0x1F;
              v41 >>= 1;
            }

            while (v37);
          }
        }

        else
        {
          int v43 = 40;
          do
          {
            v43 -= 10;
            LOBYTE(v45) = 2 * v41;
            uint64_t v40 = v41 >= 4;
            v41 *= 2LL;
          }

          while (!v40);
        }

        BOOL v42 = v43 + word_1813CD842[v45 & 7] - 10;
        goto LABEL_59;
      }
    }

    else
    {
      int v35 = v22;
      do
      {
        v34 += 40;
        uint64_t v36 = v35 >> 4;
        uint64_t v37 = v35 > 0xFFF;
        v35 >>= 4;
      }

      while (v37);
      if (v36 < 0x10) {
        goto LABEL_42;
      }
    }

    do
    {
      v34 += 10;
      uint64_t v39 = v36 >> 1;
      uint64_t v37 = v36 > 0x1F;
      v36 >>= 1;
    }

    while (v37);
    goto LABEL_43;
  }

  if (v22 >= 2)
  {
    uint64_t v34 = 40;
    uint64_t v38 = v22;
    do
    {
      v34 -= 10;
      LOBYTE(v39) = 2 * v38;
      uint64_t v40 = v38 >= 4;
      v38 *= 2LL;
    }

    while (!v40);
    goto LABEL_43;
  }

  if (v25 > 0)
  {
    BOOL v42 = 0;
LABEL_59:
    *(_WORD *)(a2 + 2) = v42;
    *(_DWORD *)(a2 + 4) |= 0x4000u;
  }

    uint64_t v5 = (unsigned __int8 *)*((void *)v5 + 1);
  }

  uint64_t v7 = a2[12];
  int v8 = *a2;
  int v9 = *((void *)v7 + 12);
  if (!v9)
  {
    BOOL v30 = (uint64_t *)(v7 + 88);
    uint64_t v31 = *((_DWORD *)v7 + 21);
    if (v31) {
      goto LABEL_67;
    }
LABEL_39:
    BOOL v30 = &qword_18C550660;
    goto LABEL_40;
  }

  uint64_t v10 = *v8;
  if (*v8)
  {
    uint64_t v11 = 0;
    int v12 = v8 + 1;
    do
    {
      uint64_t v11 = -1640531535 * (v11 + byte_1813C6343[v10]);
      unsigned int v13 = *v12++;
      uint64_t v10 = v13;
    }

    while (v13);
  }

  else
  {
    uint64_t v11 = 0;
  }

  int v41 = (_DWORD *)(v9 + 16LL * (v11 % *((_DWORD *)v7 + 20)));
  BOOL v30 = (uint64_t *)(v41 + 2);
  uint64_t v31 = *v41;
  if (!v31) {
    goto LABEL_39;
  }
  do
  {
LABEL_67:
    BOOL v30 = (uint64_t *)*v30;
    BOOL v42 = (_BYTE *)v30[3];
    for (uint64_t j = *a2; ; ++j)
    {
      int v44 = *v42;
      int v45 = *j;
      if ((_DWORD)v44 != (_DWORD)v45) {
        break;
      }
      if (!*v42) {
        goto LABEL_40;
      }
LABEL_69:
      ++v42;
    }

    if (byte_1813C6343[v44] == byte_1813C6343[v45]) {
      goto LABEL_69;
    }
    --v31;
  }

  while (v31);
  BOOL v30 = &qword_18C550660;
LABEL_40:
  for (k = v30[2]; k; k = *(void *)(k + 24))
  {
    uint64_t v33 = *(unsigned int *)(k + 40);
    if ((int)v33 >= 1)
    {
      uint64_t v34 = 0LL;
      while (*((__int16 *)a2 + 27) < 1)
      {
LABEL_60:
        if (++v34 == v33) {
          goto LABEL_43;
        }
      }

      int v35 = 0LL;
      while (1)
      {
        if ((*(_DWORD *)(a3 + 4 * v35) & 0x80000000) == 0 || a4 && v35 == *((__int16 *)a2 + 26))
        {
          uint64_t v36 = a2[1];
          if (*(void *)(k + 16 * v34 + 72))
          {
            uint64_t v37 = *(_BYTE **)&v36[16 * v35];
            for (m = *(unsigned __int8 **)(k + 16 * v34 + 72); ; ++m)
            {
              uint64_t v39 = *v37;
              uint64_t v40 = *m;
              if ((_DWORD)v39 == (_DWORD)v40)
              {
                if (!*v37) {
                  goto LABEL_62;
                }
              }

              else if (byte_1813C6343[v39] != byte_1813C6343[v40])
              {
                goto LABEL_49;
              }

              ++v37;
            }
          }

          if ((*(_WORD *)&v36[16 * v35 + 14] & 1) != 0) {
            break;
          }
        }

      LODWORD(v13) = *(_DWORD *)(a1 + 296) + 1;
      *(_DWORD *)(a1 + 296) = v13;
      goto LABEL_28;
    }

    if ((_DWORD)a3 == 2)
    {
      unsigned int v13 = *(char *)(v11 + 1) - 48LL;
      int v14 = *(_DWORD *)(v10 + 172);
    }

    else
    {
      uint64_t v20 = sub_181303E28((unsigned __int8 *)(v11 + 1), &v36, (int)a3 - 1, 1) != 0;
      unsigned int v13 = v36;
      int v14 = *(_DWORD *)(v10 + 172);
      if (v20) {
        goto LABEL_19;
      }
    }

    if (v13 >= 1 && v13 <= v14)
    {
      if (*(_DWORD *)(a1 + 296) >= (int)v13)
      {
        int v15 = *(int **)(a1 + 320);
        if (v15)
        {
          uint64_t v23 = 2;
          while (v15[v23] != (_DWORD)v13)
          {
            v23 += v15[v23 + 1];
            if (v23 >= v15[1]) {
              goto LABEL_28;
            }
          }

          goto LABEL_43;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 296) = v13;
        int v15 = *(int **)(a1 + 320);
      }

  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) != 0)
    {
      int v9 = 0;
      if (!a1) {
        return v9;
      }
    }

    else
    {
      int v9 = sub_181303970((uint64_t)v6, 1);
      if (!a1) {
        return v9;
      }
    }

    goto LABEL_20;
  }

  int v9 = *((_DWORD *)v6 + 4);
  if ((v7 & 0x400) != 0) {
    v9 += *(_DWORD *)v6;
  }
  if (a1)
  {
LABEL_20:
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *((_DWORD *)a1 + 13);
    if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      int v12 = sub_1813037C4(v10, v11);
      uint64_t v10 = *(void *)a1;
    }

    *((_DWORD *)a1 + 13) = v12;
    unsigned int v13 = *(void *)(v10 + 24);
    if (v13) {
      xmmword_18C465410(v13);
    }
  }

  return v9;
}

  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) != 0)
    {
      int v9 = 0;
      if (!a1) {
        return v9;
      }
    }

    else
    {
      int v9 = sub_181303970((uint64_t)v6, 2);
      if (!a1) {
        return v9;
      }
    }

    goto LABEL_20;
  }

  int v9 = *((_DWORD *)v6 + 4);
  if ((v7 & 0x400) != 0) {
    v9 += *(_DWORD *)v6;
  }
  if (a1)
  {
LABEL_20:
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *((_DWORD *)a1 + 13);
    if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      int v12 = sub_1813037C4(v10, v11);
      uint64_t v10 = *(void *)a1;
    }

    *((_DWORD *)a1 + 13) = v12;
    unsigned int v13 = *(void *)(v10 + 24);
    if (v13) {
      xmmword_18C465410(v13);
    }
  }

  return v9;
}

      int v9 = *(const char **)(a2 + 8);
      if (v9)
      {
        uint64_t v10 = "sqlite_stat1";
        for (uint64_t i = *(unsigned __int8 **)(a2 + 8); ; ++i)
        {
          int v12 = *(unsigned __int8 *)v10;
          unsigned int v13 = *i;
          if ((_DWORD)v12 == (_DWORD)v13)
          {
            if (!*v10)
            {
              *(_DWORD *)(a2 + 20) = 1;
              break;
            }
          }

          else if (byte_1813C6343[v12] != byte_1813C6343[v13])
          {
            break;
          }

          ++v10;
        }
      }

      if (*(_DWORD *)(a1 + 16))
      {
        int v14 = (int)v7;
        int v15 = 1;
        if (v7 >= 0x80)
        {
          do
          {
            uint64_t v16 = v14 >> 14;
            v14 >>= 7;
            ++v15;
          }

          while (v16);
        }

        *(void *)(a1 + 64) += strlen(v9) + (int)v7 + v15 + 1 + 1;
      }
    }
  }

  return v5 || *(void *)(a2 + 40) == 0LL;
}

    if (v8 + (_DWORD)v10 == *(_DWORD *)(v1 + 192)) {
      goto LABEL_14;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v1 + 288))( v1,  (v8 + v10),  &v35,  0LL);
    if ((_DWORD)v16)
    {
      int v15 = v16;
      goto LABEL_56;
    }

    int v15 = sub_1812ABE24(v35);
    uint64_t v17 = v35;
    int v18 = *(_WORD *)(v35 + 52);
    if ((v18 & 8) != 0) {
      int v9 = 1;
    }
    if ((v18 & 0x20) != 0)
    {
      uint64_t v19 = *(void *)(v35 + 40);
      --*(_DWORD *)(v19 + 152);
      *(void *)(v17 + 32) = *(void *)(v19 + 168);
      *(void *)(v19 + 168) = v17;
      (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144LL))( *(void *)(v19 + 72),  *(void *)(v19 + 200) * (*(_DWORD *)(v17 + 48) - 1),  *(void *)(v17 + 8));
    }

    else
    {
      sub_1812F9F44(v35);
    }

      uint64_t result = (void **)sub_1812F20DC(v5, v4);
      *((void *)a2 + 5) = 0LL;
    }
  }

  return result;
}

  a2[11] = 0LL;
  uint64_t v19 = (void *)a2[10];
  if (v19)
  {
    do
    {
      uint64_t v20 = v19;
      v19[11] = a2;
      uint64_t v19 = (void *)v19[10];
      a2 = v20;
    }

    while (v19);
  }

  else
  {
    uint64_t v20 = a2;
  }

  uint64_t v62 = v10;
LABEL_22:
  uint64_t v22 = 0;
  uint64_t v64 = 0;
  int v65 = (_DWORD *)v20[4];
  uint64_t v23 = v8 + 2;
  while (1)
  {
    uint64_t v66 = -1;
    if ((*(_WORD *)((_BYTE *)v23 + 17) & 4) == 0)
    {
      uint64_t v24 = *(void *)v23;
      if (*(void *)v23) {
        break;
      }
    }

  unsigned int v13 = 0;
  int v14 = 0;
  if (a3 >= 1) {
    goto LABEL_23;
  }
  if (!a1) {
    goto LABEL_46;
  }
LABEL_15:
  if (a6)
  {
    int v15 = *((unsigned int *)a1 + 6);
    if ((v15 + 1) >= *((_DWORD *)a1 + 4))
    {
      sub_1812D3A10((uint64_t)a1, a6, 1u);
      if ((v14 & 1) == 0) {
        return;
      }
    }

    else
    {
      *((_DWORD *)a1 + 6) = v15 + 1;
      *(_BYTE *)(*((void *)a1 + 1) + v15) = *a6;
      if ((v14 & 1) == 0) {
        return;
      }
    }
  }

  else
  {
    sub_1812CF36C(32737);
    if ((v14 & 1) == 0) {
      return;
    }
  }

  uint64_t v36 = 0;
LABEL_62:
  uint64_t v24 = (_DWORD *)((char *)a1 + 24);
  uint64_t v31 = *((unsigned int *)a1 + 6);
  uint64_t v26 = (void *)((char *)a1 + 8);
  uint64_t v25 = (_DWORD *)((char *)a1 + 16);
  if ((v31 + 1) >= *((_DWORD *)a1 + 4))
  {
    sub_1812D3A10((uint64_t)a1, "?", 1u);
    uint64_t v27 = 0;
    uint64_t v28 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_66;
    }
    do
    {
LABEL_74:
      if ((v27 & 1) != 0)
      {
        sub_1812CF36C(32733);
        sub_1812CF36C(32733);
      }

      else
      {
        uint64_t v33 = *v24;
        if ((v33 + 1) >= *v25)
        {
          sub_1812D3A10((uint64_t)a1, ",", 1u);
        }

        else
        {
          *uint64_t v24 = v33 + 1;
          *(_BYTE *)(*v26 + v33) = 44;
        }

        uint64_t v34 = *v24;
        if ((v34 + 1) >= *v25)
        {
          sub_1812D3A10((uint64_t)a1, "?", 1u);
        }

        else
        {
          *uint64_t v24 = v34 + 1;
          *(_BYTE *)(*v26 + v34) = 63;
        }
      }

      --v28;
    }

    while (v28);
    goto LABEL_66;
  }

  uint64_t v27 = 0;
  *uint64_t v24 = v31 + 1;
  *(_BYTE *)(*v26 + v31) = 63;
  uint64_t v28 = a3 - 1;
  if (a3 != 1) {
    goto LABEL_74;
  }
LABEL_66:
  if (v36)
  {
    if (a1)
    {
      uint64_t v32 = *((unsigned int *)a1 + 6);
      if ((v32 + 1) >= *((_DWORD *)a1 + 4))
      {
        sub_1812D3A10((uint64_t)a1, ")", 1u);
      }

      else
      {
        *((_DWORD *)a1 + 6) = v32 + 1;
        *(_BYTE *)(*((void *)a1 + 1) + v32) = 41;
      }
    }

    else
    {
      sub_1812CF36C(32733);
    }
  }

  int v12 = 16 * LODWORD(v7) + 56;
  unsigned int v13 = v12;
  if (v5)
  {
    int v14 = (void *)sub_1812F2264(v5, v12);
    if (v14) {
      goto LABEL_15;
    }
LABEL_19:
    sqlite3_result_error_nomem(a1);
    return;
  }

  int v14 = (void *)sub_18126F0AC(v12);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_15:
  bzero(v14, v13);
  *int v14 = v5;
  int v15 = a3[2];
  if (!v15)
  {
    sub_1812CF36C(89717);
    goto LABEL_29;
  }

  uint64_t v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 0x24) != 0)
  {
    uint64_t v17 = *(void *)v15;
    goto LABEL_30;
  }

  if ((v16 & 8) == 0)
  {
    if ((v16 & 0x12) != 0 && *(void *)(v15 + 8))
    {
      uint64_t v17 = sub_181303DF0(v15);
      goto LABEL_30;
    }

  unsigned int v13 = 0LL;
  uint64_t result = a3[1];
  if (!result) {
    goto LABEL_19;
  }
LABEL_14:
  int v15 = *(unsigned __int16 *)(result + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(result + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      uint64_t result = sub_181303998((int *)result, 1);
      uint64_t v16 = (unsigned __int8 *)result;
      goto LABEL_20;
    }

    uint64_t v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(v10 + 22) == 1)
    {
      int v12 = *(unsigned __int8 **)(v10 + 8);
      unsigned int v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0) {
        goto LABEL_24;
      }
LABEL_22:
      if (*(_BYTE *)(v10 + 22) == 1)
      {
        int v14 = *(_DWORD *)(v10 + 16);
        goto LABEL_33;
      }

      goto LABEL_24;
    }

    if ((v11 & 1) != 0)
    {
      int v12 = 0LL;
      unsigned int v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }

    int v12 = (unsigned __int8 *)sub_181303998((int *)v10, 1);
    uint64_t v10 = *(void *)(a3 + 8 * v7);
    if (!v10) {
      goto LABEL_31;
    }
    unsigned int v13 = *(_WORD *)(v10 + 20);
    if ((v13 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_24:
    if ((v13 & 0x10) == 0)
    {
      if ((v13 & 1) == 0)
      {
        int v14 = sub_181303970(v10, 1);
        goto LABEL_33;
      }

      goto LABEL_32;
    }

    int v14 = *(_DWORD *)(v10 + 16);
    if ((v13 & 0x400) != 0) {
      v14 += *(_DWORD *)v10;
    }
LABEL_33:
    sub_18135B6B0((uint64_t)&v20, v12, v14);
    int v15 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) < (unint64_t)v22)
    {
      ++*((void *)&v22 + 1);
      v21[v15] = 58;
    }

    else
    {
      sub_18135BB8C((uint64_t)&v20, 58);
    }

    sub_18135BCA0(&v20, *(void *)(a3 + 8 * v7 + 8));
    v7 += 2LL;
  }

  while ((int)v7 < a2);
  uint64_t v5 = *((void *)&v22 + 1);
  sub_18135BB8C((uint64_t)&v20, 125);
LABEL_44:
  sub_18135B44C((uint64_t)&v20);
  if (a1)
  {
    uint64_t v16 = *(void *)a1;
    *(_BYTE *)(v16 + 23) = 74;
    *(_WORD *)(v16 + 20) |= 0x800u;
  }

  else
  {
    sub_1812CF36C(97481);
  }

    unsigned int v13 = (a4 - v10);
    int v14 = *((_DWORD *)v8 + 14);
    int v15 = v14;
    uint64_t v16 = (int)v10;
    uint64_t v17 = v14 + a4 - v10;
    uint64_t v10 = (int)v10;
    do
    {
      ++v17;
      int v18 = v10 > 0x7F;
      v10 >>= 7;
    }

    while (v18);
    uint64_t v19 = v13;
    do
    {
      ++v17;
      int v18 = v19 > 0x7F;
      v19 >>= 7;
    }

    while (v18);
    int v12 = *(_DWORD *)(a1 + 456);
    if (v17 > v12)
    {
      if (v9) {
        goto LABEL_20;
      }
      if (sqlite3_initialize())
      {
        v8[8] = 0LL;
        return 7LL;
      }

      uint64_t v24 = sub_18126F0AC(v17);
      v8[8] = v24;
      if (!v24) {
        return 7LL;
      }
      int v9 = v8[4];
      int v15 = v14;
    }

    if (v9)
    {
      uint64_t v25 = (_BYTE *)(v8[8] + v15);
      uint64_t v26 = v16;
      do
      {
        uint64_t v27 = v26;
        *v25++ = v26 | 0x80;
        ++v14;
        int v18 = v26 > 0x7F;
        v26 >>= 7;
      }

      while (v18);
      *(v25 - 1) = v27 & 0x7F;
    }

    uint64_t v28 = (_BYTE *)(v8[8] + v14);
    int v29 = v13;
    do
    {
      BOOL v30 = v29;
      *v28++ = v29 | 0x80;
      ++v14;
      int v18 = v29 > 0x7F;
      v29 >>= 7;
    }

    while (v18);
    *(v28 - 1) = v30 & 0x7F;
    memcpy((void *)(v8[8] + v14), &a3[v16], v13);
    *((_DWORD *)v8 + 14) = v13 + v14;
    ++*((_DWORD *)v8 + 6);
    uint64_t v31 = (void *)v8[6];
    if (*((_DWORD *)v8 + 11) >= (int)a4)
    {
      uint64_t v33 = (int)a4;
    }

    else
    {
      if (sqlite3_initialize()) {
        return 7LL;
      }
      uint64_t v32 = sub_18127D33C((uint64_t)v31, 2LL * (int)a4);
      if (!v32) {
        return 7LL;
      }
      uint64_t v31 = (void *)v32;
      uint64_t v33 = (int)a4;
      *((_DWORD *)v8 + 11) = 2 * a4;
      v8[6] = v32;
    }

    v8[4] = (uint64_t)v31;
    memcpy(v31, a3, v33);
    uint64_t result = 0LL;
    *((_DWORD *)v8 + 10) = a4;
    return result;
  }

  int v12 = *(_DWORD *)(a1 + 456);
LABEL_20:
  if (sqlite3_initialize()) {
    return 7LL;
  }
  uint64_t v21 = sub_18126F0AC(v12 + 72LL);
  int v35 = v21;
  if (!v21) {
    return 7LL;
  }
  uint64_t v22 = v21;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_DWORD *)(v21 + 56) = 11;
  *(void *)(v21 + 64) = v21 + 72;
  if (v8)
  {
    uint64_t v34 = *v8;
    uint64_t result = sub_181377DB0(a1, &v34, a3, a4);
    uint64_t v23 = v34;
    if (!*v8) {
      *int v8 = v34;
    }
    v8[1] = v22;
    *(void *)(v22 + 16) = v8[2];
    *(void *)uint64_t v22 = v23;
    *(void *)(v22 + 48) = v8[6];
    *(_DWORD *)(v22 + 44) = *((_DWORD *)v8 + 11);
    v8[6] = 0LL;
  }

  else
  {
    *(void *)(v21 + 16) = v21;
    uint64_t result = sub_181377DB0(a1, &v35, a3, a4);
    uint64_t v22 = v35;
  }

  *a2 = v22;
  return result;
}

        LODWORD(v6) = 0;
        goto LABEL_14;
      }

      uint64_t v130 = *(double *)v10;
      if (*(double *)v10 >= -9.22337204e18)
      {
        if (v130 <= 9.22337204e18) {
          *(void *)&uint64_t v6 = (uint64_t)v130;
        }
        else {
          LODWORD(v6) = -1;
        }
      }

      else
      {
        LODWORD(v6) = 0;
      }

  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  int v8 = *(void *)(a2 + 16);
  if (!v8) {
    goto LABEL_20;
  }
  int v9 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_19;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v8);
  int v8 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v9 = &xmmword_18C465410;
LABEL_19:
    uint64_t result = (*v9)(v8);
  }

    __src += v14;
    v4 -= v14;
  }

  if (v4 < 1) {
    return result;
  }
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  uint64_t v10 = (v8 + v4);
  if (v10 <= v9)
  {
    uint64_t result = *(void *)(a2 + 16);
  }

  else
  {
    if (v9) {
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
    }
    else {
      LODWORD(v11) = 64;
    }
    uint64_t v11 = (int)v11;
    do
    {
      int v12 = v11;
      v11 *= 2LL;
    }

    while (v12 < v10);
    unsigned int v13 = *(void *)(a2 + 16);
    uint64_t result = sqlite3_initialize();
    if ((_DWORD)result || (uint64_t result = sub_18127D33C(v13, v12)) == 0)
    {
      i[15] = 7;
      return result;
    }

    *(_DWORD *)(a2 + 28) = v12;
    *(void *)(a2 + 16) = result;
    int v8 = *(_DWORD *)(a2 + 24);
  }

  uint64_t result = (uint64_t)memcpy((void *)(result + v8), __src, v4);
  *(_DWORD *)(a2 + 24) += v4;
  return result;
}

    *(void *)(a1 + 16) = sqlite3_mprintf("%s", v8 + 72);
    return 1LL;
  }

  return result;
}

uint64_t sub_18126D6B4(char *__s, int a2)
{
  int v2 = __s;
  if (a2 <= 0)
  {
    a2 = strlen(__s);
    if (a2 < 1) {
      return 0LL;
    }
  }

  int v3 = 0;
  unsigned int v4 = a2 + 1;
  do
  {
    int v5 = *v2++;
    v3 ^= v5 ^ (8 * v3);
    --v4;
  }

  while (v4 > 1);
  return v3 & 0x7FFFFFFF;
}

uint64_t sub_18126D718(const char *a1, int a2, char *__s2, int a4)
{
  if (a2 == a4) {
    return strncmp(a1, __s2, a2);
  }
  else {
    return 1LL;
  }
}

int sqlite3_create_function_v2( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return sub_1812E0AEC( (uint64_t)db,  (char *)zFunctionName,  *(uint64_t *)&nArg,  eTextRep,  (uint64_t)pApp,  (uint64_t)xFunc,  (uint64_t)xStep,  (uint64_t)xFinal,  0LL,  0LL,  (void (*)(uint64_t))xDestroy);
}

uint64_t sub_18126D760(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10 = *(void *)(a1 + 584);
  if (v10)
  {
    int v11 = *__s2;
    if (*__s2)
    {
      unsigned int v12 = 0;
      unsigned int v13 = __s2 + 1;
      do
      {
        unsigned int v12 = -1640531535 * (v12 + byte_1813C6343[v11]);
        int v14 = *v13++;
        int v11 = v14;
      }

      while (v14);
    }

    else
    {
      unsigned int v12 = 0;
    }

    uint64_t v22 = (_DWORD *)(v10 + 16LL * (v12 % *(_DWORD *)(a1 + 568)));
    int v15 = (uint64_t *)(v22 + 2);
    int v16 = *v22;
    if (v16)
    {
      while (1)
      {
LABEL_24:
        int v15 = (uint64_t *)*v15;
        uint64_t v23 = (_BYTE *)v15[3];
        for (uint64_t i = __s2; ; ++i)
        {
          uint64_t v25 = *v23;
          uint64_t v26 = *i;
          if ((_DWORD)v25 != (_DWORD)v26) {
            break;
          }
          if (!*v23) {
            goto LABEL_8;
          }
LABEL_26:
          ++v23;
        }

        if (byte_1813C6343[v25] == byte_1813C6343[v26]) {
          goto LABEL_26;
        }
        if (!--v16)
        {
          int v15 = &qword_18C550660;
          goto LABEL_8;
        }
      }
    }
  }

  else
  {
    int v15 = (uint64_t *)(a1 + 576);
    int v16 = *(_DWORD *)(a1 + 572);
    if (v16) {
      goto LABEL_24;
    }
  }

  int v15 = &qword_18C550660;
LABEL_8:
  if (v15[2] && !strncmp("fts", __s2, 3uLL)) {
    a5 = 0LL;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17) {
    xmmword_18C465400(v17);
  }
  sub_181310B50(a1, __s2, a3, a4, (uint64_t)a5);
  if (!*(_BYTE *)(a1 + 103))
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = *(void *)(a1 + 24);
    if (!v20) {
      return v19;
    }
    goto LABEL_18;
  }

  uint64_t v18 = sub_1813037C4(a1, 0);
  uint64_t v19 = v18;
  if (a5 && (_DWORD)v18) {
    a5(a4);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20) {
LABEL_18:
  }
    xmmword_18C465410(v20);
  return v19;
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(187045);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_18C465400(v8);
    uint64_t v9 = *((void *)a1 + 3);
    *((void *)a1 + 83) = a2;
    *((void *)a1 + 84) = a3;
    *((void *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    if (v9) {
      xmmword_18C465410(v9);
    }
  }

  else
  {
    *((void *)a1 + 83) = a2;
    *((void *)a1 + 84) = a3;
    *((void *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
  }

  return 0;
}

int sqlite3_create_function( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return sub_1812E0AEC( (uint64_t)db,  (char *)zFunctionName,  *(uint64_t *)&nArg,  eTextRep,  (uint64_t)pApp,  (uint64_t)xFunc,  (uint64_t)xStep,  (uint64_t)xFinal,  0LL,  0LL,  0LL);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (sqlite3_initialize())
    {
      return 0LL;
    }

    else
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = &v10;
      uint64_t v7 = 0x7FFFFFFD00000200LL;
      int v8 = 0;
      __int16 v9 = 0;
      sqlite3_str_vappendf((sqlite3_str *)&v5, a1, a2);
      if (v6 && (v6[v8] = 0, HIDWORD(v7)) && (v9 & 0x400) == 0) {
        return (char *)sub_1812F24E0(&v5);
      }
      else {
        return v6;
      }
    }
  }

  else
  {
    sub_1812CF36C(32945);
    return 0LL;
  }

int sqlite3_exec( sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  int v52 = 0LL;
  if (errmsg) {
    *errmsg = 0LL;
  }
  if (!a1)
  {
    uint64_t v11 = "NULL";
    goto LABEL_17;
  }

  int v10 = *((unsigned __int8 *)a1 + 113);
  if (v10 == 186)
  {
LABEL_7:
    uint64_t v11 = "unopened";
LABEL_17:
    sqlite3_log(21, "API call with %s database connection pointer", v11);
    return sub_1812CF36C(142299);
  }

  if (v10 != 118)
  {
    if (v10 != 109)
    {
      uint64_t v11 = "invalid";
      goto LABEL_17;
    }

    goto LABEL_7;
  }

  if (sql) {
    unsigned int v12 = (char *)sql;
  }
  else {
    unsigned int v12 = &byte_1813CEAEE;
  }
  uint64_t v13 = *((void *)a1 + 3);
  if (v13) {
    xmmword_18C465400(v13);
  }
  *((_DWORD *)a1 + 20) = 0;
  if (*((void *)a1 + 52)) {
    sub_1812FA264((uint64_t)a1, 0);
  }
  else {
    *((_DWORD *)a1 + 21) = -1;
  }
  while (1)
  {
    if (!*v12)
    {
      unsigned int v21 = 0;
LABEL_80:
      int v16 = 0LL;
      goto LABEL_81;
    }

    int v52 = 0LL;
    unsigned int v15 = sub_18126DFE0((uint64_t)a1, (unsigned __int8 *)v12, 0xFFFFFFFFLL, 128LL, 0LL, &v52, &v53, v5);
    if (v15)
    {
      unsigned int v21 = v15;
      goto LABEL_80;
    }

    if (v52) {
      break;
    }
    unsigned int v21 = 0;
    unsigned int v12 = v53;
LABEL_64:
    if (v21) {
      goto LABEL_80;
    }
  }

  int v16 = 0LL;
  int v17 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  while (2)
  {
    int v20 = sqlite3_step(v52);
    unsigned int v21 = v20;
    if (!callback) {
      goto LABEL_23;
    }
    if (v20 == 100)
    {
      if (!v17) {
        goto LABEL_34;
      }
      break;
    }

    BOOL v22 = v20 == 101 && v17 == 0;
    if (!v22 || (*((_BYTE *)a1 + 49) & 1) == 0)
    {
LABEL_57:
      uint64_t v36 = v52;
      if (*((_BYTE *)v52 + 267)) {
        unsigned int v21 = sub_18127A3A0((void **)v52);
      }
      else {
        unsigned int v21 = 0;
      }
      sub_1812CFA64((uint64_t)v36);
      int v52 = 0LL;
      unsigned int v12 = v53 - 1;
      do
        int v37 = *++v12;
      while ((byte_1813C6558[v37] & 1) != 0);
      if (v16) {
        sub_1812F20DC(a1, v16);
      }
      goto LABEL_64;
    }

LABEL_34:
    uint64_t v23 = (unsigned __int16 *)v52;
    if (v52)
    {
      uint64_t v24 = *(void *)(*(void *)v52 + 24LL);
      if (v24)
      {
        xmmword_18C465400(v24);
        uint64_t v25 = *(void *)(*(void *)v23 + 24LL);
        uint64_t v18 = v23[130];
        if (v25) {
          xmmword_18C465410(v25);
        }
      }

      else
      {
        uint64_t v18 = *((unsigned __int16 *)v52 + 130);
      }
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    int v16 = (void *)sub_1812F2264((uint64_t)a1, (16 * (_DWORD)v18) | 8u);
    if (!v16) {
      goto LABEL_81;
    }
    if ((_DWORD)v18)
    {
      uint64_t v26 = 0LL;
      do
      {
        v16[v26] = sub_1812D8E78((uint64_t *)v52, v26, 0, 0);
        ++v26;
      }

      while (v18 != v26);
    }

    if (v21 != 100)
    {
LABEL_54:
      if (((unsigned int (*)(void *, uint64_t, void *, void *))callback)(a4, v18, v19, v16))
      {
        uint64_t v38 = v52;
        if (*((_BYTE *)v52 + 267)) {
          sub_18127A3A0((void **)v52);
        }
        sub_1812CFA64((uint64_t)v38);
        int v52 = 0LL;
        unsigned int v21 = 4;
        *((_DWORD *)a1 + 20) = 4;
        sub_1812FA264((uint64_t)a1, 4);
        goto LABEL_81;
      }

      int v17 = 1;
LABEL_23:
      if (v21 != 100) {
        goto LABEL_57;
      }
      continue;
    }

    break;
  }

  uint64_t v19 = &v16[v18];
  if ((int)v18 < 1)
  {
    int v35 = 0;
LABEL_53:
    v19[v35] = 0LL;
    goto LABEL_54;
  }

  uint64_t v27 = 0LL;
  while (1)
  {
    uint64_t v28 = sqlite3_column_text(v52, v27);
    v19[v27] = v28;
    if (!v28 && sqlite3_column_type(v52, v27) != 5) {
      break;
    }
    if (v18 == ++v27)
    {
      int v35 = v18;
      goto LABEL_53;
    }
  }

  if (!*((_BYTE *)a1 + 103) && !*((_BYTE *)a1 + 104))
  {
    *((_BYTE *)a1 + 103) = 1;
    ++*((_DWORD *)a1 + 108);
    *((_WORD *)a1 + 218) = 0;
    uint64_t v39 = *((void *)a1 + 43);
    if (v39)
    {
      sub_1812DC47C(v39, "out of memory", v29, v30, v31, v32, v33, v34, v51);
      uint64_t v40 = *((void *)a1 + 43);
      *(_DWORD *)(v40 + 24) = 7;
      for (uint64_t i = *(void *)(v40 + 256); i; uint64_t i = *(void *)(i + 256))
      {
        ++*(_DWORD *)(i + 48);
        *(_DWORD *)(i + 24) = 7;
      }
    }
  }

  unsigned int v21 = 100;
LABEL_81:
  BOOL v42 = v52;
  if (v52)
  {
    if (*((_BYTE *)v52 + 267)) {
      sub_18127A3A0((void **)v52);
    }
    sub_1812CFA64((uint64_t)v42);
  }

  if (v16) {
    sub_1812F20DC(a1, v16);
  }
  if (v21 || *((_BYTE *)a1 + 103))
  {
    int v44 = sub_1813037C4((uint64_t)a1, v21);
    int v43 = v44;
    if (!errmsg || !v44) {
      goto LABEL_96;
    }
    int v45 = sqlite3_errmsg(a1);
    if (v45 && (uint64_t v46 = v45, v47 = strlen(v45) + 1, (v48 = (char *)sub_18126F0AC(v47)) != 0LL))
    {
      uint64_t v49 = v48;
      memcpy(v48, v46, v47);
      *errmsg = v49;
      uint64_t v50 = *((void *)a1 + 3);
      if (v50) {
        goto LABEL_99;
      }
    }

    else
    {
      *errmsg = 0LL;
      int v43 = 7;
      *((_DWORD *)a1 + 20) = 7;
      sub_1812FA264((uint64_t)a1, 7);
      uint64_t v50 = *((void *)a1 + 3);
      if (v50) {
        goto LABEL_99;
      }
    }
  }

  else
  {
    int v43 = 0;
LABEL_96:
    if (errmsg) {
      *errmsg = 0LL;
    }
    uint64_t v50 = *((void *)a1 + 3);
    if (v50) {
LABEL_99:
    }
      xmmword_18C465410(v50);
  }

  return v43;
}

            ++v43;
          }

          if (byte_1813C6343[v45] == byte_1813C6343[v46]) {
            goto LABEL_34;
          }
          BOOL v42 = *(void *)(v42 + 40);
          if (!v42)
          {
LABEL_39:
            sub_1812DC47C(a1, "no such index: %s", v31, v32, v33, v34, v35, v36, *(void *)(a7 + 96));
            int v41 = v102;
            int v37 = 0LL;
            *(_BYTE *)(a1 + 29) = 1;
            break;
          }
        }
      }
    }

    int v10 = 0;
    goto LABEL_49;
  }

  if (!*(void *)(a1 + 96)) {
    goto LABEL_47;
  }
  int v10 = (*(uint64_t (**)(void, void))(v8 + 32))(*(void *)(a1 + 80), 0LL);
  if (!v10)
  {
    if (*(_BYTE *)(a1 + 12) && *(_BYTE *)(a1 + 14))
    {
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80));
LABEL_46:
      int v10 = v11;
      goto LABEL_48;
    }

    goto LABEL_47;
  }

      *pzErrmsg = sqlite3_mprintf("%s", v26);
      uint64_t v18 = v26;
      if (!v26) {
        goto LABEL_41;
      }
      goto LABEL_35;
    }

    int v14 = v17;
    BOOL v22 = v26;
    if (v26)
    {
      uint64_t v23 = (void (**)(const char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v22);
        --qword_18C468B10;
        off_18C4653A8(v22);
        BOOL v22 = (const char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_49;
        }
        uint64_t v23 = (void (**)(const char *))&xmmword_18C465410;
      }

      (*v23)(v22);
    }

  unsigned int v21 = *(void *)(*((void *)p + 5) + 8LL);
  BOOL v22 = *(int *)(v21 + 52);
  uint64_t v23 = *(_DWORD **)(*((void *)p + 1) + 8LL);
  uint64_t v24 = v23[13];
  if (v13) {
    goto LABEL_43;
  }
  if (*(_BYTE *)(*(void *)v23 + 9LL) == 5)
  {
    if ((_DWORD)v22 == v24)
    {
      uint64_t v13 = 0;
      goto LABEL_43;
    }

      if ((dword_18C465544 & 0x20) != 0)
      {
LABEL_52:
        uint64_t v32 = *(unsigned __int8 *)(a2 + 52);
        if (v32 == 11 || v32 == 26 || *(_DWORD *)(a2 + 256))
        {
          if (qword_18C468CB8 != -1) {
            dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
          }
          uint64_t v5 = (os_log_s *)qword_18C468CA8;
          uint64_t v30 = 1;
        }

        else
        {
          uint64_t v30 = 0;
        }

        else {
          uint64_t v33 = v10;
        }
        if (qword_18C468CF0) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = *(double *)&qword_18C468CE8 <= 0.0;
        }
        if (!v34)
        {
          int v35 = (int)((double)(qword_18C468CF0 / (unint64_t)v33) + (double)v33 * *(double *)&qword_18C468CE8);
          if (v59 > v35)
          {
            if (qword_18C468CB8 != -1) {
              dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
            }
            uint64_t v5 = (os_log_s *)qword_18C468CA8;
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)unsigned int v61 = v10;
              *(_WORD *)&v61[4] = 1024;
              *(_DWORD *)&v61[6] = v35;
              *(_WORD *)&v61[10] = 1024;
              *(_DWORD *)&v61[12] = v59;
              *(_WORD *)&v61[16] = 2080;
              *(void *)&v61[18] = v6;
              _os_log_impl( &dword_181266000,  v4,  OS_LOG_TYPE_DEFAULT,  "flagged inefficient query yielding %d results (expected vdbe steps ≤ %d, actual: %d) [%s]",  buf,  0x1Eu);
            }

            uint64_t v30 = 1;
          }
        }

  uint64_t v26 = *(void *)(v14 + 32LL * v13 + 8);
  if (!v26) {
    goto LABEL_40;
  }
  if (*(_BYTE *)(v26 + 17))
  {
    ++*(_DWORD *)(v26 + 20);
    if (!*(_BYTE *)(v26 + 18)) {
      sub_1812FDE20(v26);
    }
  }

  uint64_t v27 = **(void ***)(v26 + 8);
  uint64_t v28 = v27[9];
  if (strncmp(*(const char **)(*v27 + 24LL), "unix", 4uLL))
  {
    uint64_t v29 = sub_1812CF36C(190433);
    goto LABEL_127;
  }

  if (a3)
  {
    uint64_t v32 = *(const char **)(v28 + 56);
    if (v32)
    {
      if (a4) {
        uint64_t v33 = a4;
      }
      else {
        uint64_t v33 = 16777224;
      }
      uint64_t v34 = *(_DWORD *)(v28 + 124);
      if (*(_UNKNOWN **)v28 == &unk_189B6D220) {
        int v35 = 33;
      }
      else {
        int v35 = 1;
      }
      uint64_t v36 = v35 | v34;
      uint64_t v29 = sub_181266F84(*(char **)(v28 + 56), (uint64_t *)&v55, v35 | v34, 0LL);
      int v37 = v55;
      if ((_DWORD)v29) {
        goto LABEL_124;
      }
      uint64_t v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0LL, 0LL, 0LL);
      uint64_t v29 = v38;
      if ((_DWORD)v38 != 14) {
        goto LABEL_61;
      }
      sub_1812E03C8((uint64_t)v55, 0);
      uint64_t v29 = sub_181266F84(*(char **)(v28 + 56), (uint64_t *)&v55, v36 & 0xFFFFFFFC | 2, 0LL);
      int v37 = v55;
      if ((_DWORD)v29) {
        goto LABEL_124;
      }
      uint64_t v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0LL, 0LL, 0LL);
      uint64_t v29 = v38;
LABEL_61:
      if ((_DWORD)v29)
      {
LABEL_123:
        int v37 = v55;
LABEL_124:
        sub_1812E03C8((uint64_t)v37, 0);
        goto LABEL_125;
      }

      flags = v33;
      uint64_t v40 = 0LL;
      int v41 = 0x18C54F000LL;
      while (2)
      {
        int v43 = (char *)v32;
        int v44 = a3;
        if (v40)
        {
          int v45 = (const char *)*((void *)&off_189B6F628 + v40);
          int v43 = sqlite3_mprintf("%s%s", v32, v45);
          uint64_t v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, v45);
          int v44 = (const char *)v38;
        }

        if (!v43 || !v44)
        {
          uint64_t v29 = 7LL;
          goto LABEL_99;
        }

        if ((*(unsigned int (**)(char *, uint64_t))(v41 + 3320))(v43, 4LL) && *__error() == 2)
        {
          if (!v40)
          {
            uint64_t v38 = (uint64_t)__error();
            uint64_t v48 = *(_DWORD *)v38;
LABEL_96:
            *(_DWORD *)(v28 + 32) = v48;
            uint64_t v29 = 10LL;
            goto LABEL_99;
          }

          goto LABEL_79;
        }

        uint64_t v38 = (*(uint64_t (**)(const char *, void))(v41 + 3320))(v44, 0LL);
        if (!(_DWORD)v38)
        {
          uint64_t v48 = 17;
          goto LABEL_96;
        }

        uint64_t v38 = copyfile(v43, v44, 0LL, flags);
        if ((_DWORD)v38)
        {
          uint64_t v38 = (uint64_t)__error();
          size_t v47 = *(_DWORD *)v38;
          if (*(_DWORD *)v38)
          {
            if (v47 == 12)
            {
              uint64_t v29 = 7LL;
              goto LABEL_99;
            }
          }

          else
          {
            sqlite3_log( 28,  "copyfile returned unsuccessfully without setting errno, assuming target path was inaccessible");
            size_t v47 = 2;
          }

          *(_DWORD *)(v28 + 32) = v47;
          uint64_t v29 = 10LL;
LABEL_99:
          if (off_18C550648) {
            v39.n128_f64[0] = off_18C550648(v38);
          }
          if (!(_DWORD)v40)
          {
LABEL_121:
            if (off_18C550650) {
              off_18C550650(v38);
            }
            goto LABEL_123;
          }

          uint64_t v49 = v40 - 1LL;
          while (2)
          {
            if (v43)
            {
              uint64_t v50 = (uint64_t (**)(char *, __n128))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_109;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v43);
              --qword_18C468B10;
              uint64_t v38 = off_18C4653A8(v43);
              int v43 = (char *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v50 = (uint64_t (**)(char *, __n128))&xmmword_18C465410;
LABEL_109:
                uint64_t v38 = (*v50)(v43, v39);
              }
            }

            if (v44)
            {
              char v51 = (uint64_t (**)(const char *, __n128))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_116;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v44);
              --qword_18C468B10;
              uint64_t v38 = off_18C4653A8(v44);
              int v44 = (const char *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                char v51 = (uint64_t (**)(const char *, __n128))&xmmword_18C465410;
LABEL_116:
                uint64_t v38 = (*v51)(v44, v39);
              }
            }

            int v44 = a3;
            if (v49)
            {
              uint64_t v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, *((const char **)&off_189B6F628 + v49));
              int v44 = (const char *)v38;
            }

            if (!v44) {
              goto LABEL_121;
            }
            uint64_t v38 = off_18C54FE48(v44);
            int v43 = 0LL;
            int v52 = v49-- + 1;
            if (v52 <= 1) {
              goto LABEL_121;
            }
            continue;
          }
        }

        if (v40)
        {
LABEL_79:
          uint64_t v46 = (void (**)(char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_84;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v43);
          --qword_18C468B10;
          off_18C4653A8(v43);
          int v43 = (char *)xmmword_18C468B70;
          int v41 = 0x18C54F000LL;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v46 = (void (**)(char *))&xmmword_18C465410;
LABEL_84:
            (*v46)(v43);
          }

          BOOL v42 = (uint64_t (**)(const char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v44);
            --qword_18C468B10;
            uint64_t v38 = off_18C4653A8(v44);
            int v44 = (const char *)xmmword_18C468B70;
            int v41 = 0x18C54F000uLL;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_67;
            }
            BOOL v42 = (uint64_t (**)(const char *))&xmmword_18C465410;
          }

          uint64_t v38 = (*v42)(v44);
        }

  int v16 = *v8;
  if (!*v8) {
    goto LABEL_41;
  }
  int v17 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_40;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v16);
  --qword_18C468B10;
  off_18C4653A8(v16);
  int v16 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v17 = &xmmword_18C465410;
LABEL_40:
    (*v17)(v16);
  }

  if (*v15) {
    goto LABEL_154;
  }
LABEL_35:
  if (*(_BYTE *)(a1 + 17))
  {
    int v16 = *(void *)(a1 + 8);
    if (*(void *)(v16 + 128) == a1 || (*(_WORD *)(v16 + 40) & 0x40) == 0)
    {
      int v17 = *(void *)(v16 + 120);
      if (!v17) {
        goto LABEL_39;
      }
      while (*(void *)v17 == a1 || *(_DWORD *)(v17 + 8) != 1 || *(_BYTE *)(v17 + 12) == 1)
      {
        int v17 = *(void *)(v17 + 16);
        if (!v17) {
          goto LABEL_39;
        }
      }
    }

    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v31 = v23[i];
      uint64_t v32 = aTrue[i];
      if ((_DWORD)v31 == (_DWORD)v32)
      {
        if (!v23[i]) {
          goto LABEL_44;
        }
      }

      else if (byte_1813C6343[v31] != byte_1813C6343[v32])
      {
        for (uint64_t j = 0LL; ; ++j)
        {
          uint64_t v34 = v23[j];
          int v35 = aFalse[j];
          if ((_DWORD)v34 == (_DWORD)v35)
          {
            if (!v23[j]) {
              goto LABEL_44;
            }
          }

          else if (byte_1813C6343[v34] != byte_1813C6343[v35])
          {
            uint64_t v40 = strlen(v23);
            __n = v40 + 1;
            if (v7)
            {
              uint64_t v36 = (unsigned __int8 *)sub_1812F2264(v7, v40 + 1);
              if (v36) {
                goto LABEL_48;
              }
LABEL_103:
              __buf = 0;
              int v37 = v77;
              goto LABEL_45;
            }

            uint64_t v36 = (unsigned __int8 *)sub_18126F0AC(v40 + 1);
            if (!v36) {
              goto LABEL_103;
            }
LABEL_48:
            memcpy(v36, v23, __n);
            __buf = 0;
            int v37 = v77;
LABEL_50:
            while (2)
            {
              int v41 = &v81;
              BOOL v42 = (_DWORD *)&v80 + 1;
              if (v82)
              {
                int v43 = *v36;
                if (*v36)
                {
                  int v44 = 0;
                  int v45 = v36 + 1;
                  do
                  {
                    int v44 = -1640531535 * (v44 + byte_1813C6343[v43]);
                    uint64_t v46 = *v45++;
                    int v43 = v46;
                  }

                  while (v46);
                }

                else
                {
                  int v44 = 0;
                }

                BOOL v42 = (_DWORD *)(v82 + 16LL * (v44 % v80));
                int v41 = (uint64_t *)(v42 + 2);
              }

              size_t v47 = *v42;
              if (!*v42) {
                goto LABEL_65;
              }
              while (2)
              {
                int v41 = (uint64_t *)*v41;
                uint64_t v48 = (_BYTE *)v41[3];
                uint64_t v49 = v36;
                while (2)
                {
                  uint64_t v50 = *v48;
                  char v51 = *v49;
                  if ((_DWORD)v50 == (_DWORD)v51)
                  {
                    if (!*v48) {
                      goto LABEL_66;
                    }
                    goto LABEL_60;
                  }

                  if (byte_1813C6343[v50] == byte_1813C6343[v51])
                  {
LABEL_60:
                    ++v48;
                    ++v49;
                    continue;
                  }

                  break;
                }

                if (--v47) {
                  continue;
                }
                break;
              }

  if ((*(_BYTE *)(a2 + 48) & 8) != 0) {
    sub_1812C742C(a1, "DELETE FROM %Q.sqlite_sequence WHERE name=%Q", a3, a4, a5, a6, a7, a8, *j);
  }
  sub_1812C742C(a1, "DELETE FROM %Q.sqlite_master WHERE tbl_name=%Q and type!='trigger'", a3, a4, a5, a6, a7, a8, *j);
  uint64_t v36 = *(unsigned __int8 *)(a2 + 63);
  if (v8)
  {
    if (v36 != 1) {
      goto LABEL_65;
    }
LABEL_62:
    sub_1812B9B68((uint64_t *)v14, 172LL, a3, 0LL, 0LL, *(void *)a2, 0LL, v35);
    size_t v47 = (uint64_t *)a1[21];
    if (!v47) {
      size_t v47 = a1;
    }
    *((_BYTE *)v47 + 33) = 1;
  }

  else
  {
    if (v36 == 1) {
      goto LABEL_62;
    }
    LODWORD(v37) = 0;
    uint64_t v38 = *(_DWORD *)(a2 + 40);
    while (1)
    {
      uint64_t v40 = v37 - 1;
      else {
        int v37 = 0LL;
      }
      for (k = *(void *)(a2 + 16); k; k = *(void *)(k + 40))
      {
        BOOL v42 = *(_DWORD *)(k + 88);
        else {
          int v37 = v37;
        }
      }

      if (!(_DWORD)v37) {
        break;
      }
      int v44 = *(void *)(a2 + 96);
      if (v44)
      {
        int v45 = (uint64_t *)(*(void *)(*a1 + 32) + 24LL);
        LODWORD(v39) = -1;
        do
        {
          uint64_t v46 = *v45;
          v45 += 4;
          uint64_t v39 = (v39 + 1);
        }

        while (v46 != v44);
      }

      else
      {
        uint64_t v39 = 4294934528LL;
      }

      sub_181325A30((uint64_t)a1, v37, v39, v31, v32, v33, v34, v35);
    }

    if (*(_BYTE *)(a2 + 63) == 1) {
      goto LABEL_62;
    }
  }

      uint64_t v23 = *((_DWORD *)a2 + 1) & 0x200;
      *((_DWORD *)a2 + 1) |= 0x8000000u;
      sub_181309110((void *)*v4, a2);
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((_OWORD *)a2 + 2) = 0u;
      *(_OWORD *)a2 = 0u;
      *a2 = -89;
      if (v22) {
        LODWORD(v14) = *(_DWORD *)v3[2] - 1;
      }
      *((_DWORD *)a2 + 11) = *(_DWORD *)(*v3 + 88LL);
      *((_DWORD *)a2 + 12) = v14;
      *((void *)a2 + 9) = v3[3];
      *((_DWORD *)a2 + 1) = v23;
      goto LABEL_37;
    }

      int v37 = 1 << (v25 - 1);
      if (v25 > 31) {
        int v37 = 0x80000000;
      }
      *(_DWORD *)(*(void *)(a1 + 16) + 372LL) |= v37;
      if (!v29) {
        goto LABEL_70;
      }
      goto LABEL_37;
    }

    return 0LL;
  }

  if (v24 != 117) {
    return 0LL;
  }
  int v81 = a3;
  char v82 = *(unsigned __int8 **)(v22 + 32);
  uint64_t v80 = 117;
  uint64_t v27 = 0LL;
  uint64_t v29 = (const char *)*((void *)i + 1);
  if (!v29) {
    goto LABEL_70;
  }
LABEL_37:
  uint64_t v38 = *(unsigned __int8 *)v29;
  if (*v29) {
    uint64_t v39 = v38 == v18;
  }
  else {
    uint64_t v39 = 1;
  }
  if (v39 || v38 == v19 || v38 == v20) {
    goto LABEL_70;
  }
  uint64_t v79 = a4;
  BOOL v42 = 0;
  int v43 = *(unsigned __int8 *)v29;
  do
  {
    if (v43 == v21)
    {
      if (v29[v42 + 1]) {
        v42 += 2;
      }
      else {
        ++v42;
      }
    }

    else
    {
      ++v42;
    }

    int v44 = v42;
    int v43 = v29[v42];
    if (v29[v42]) {
      int v45 = v43 == v18;
    }
    else {
      int v45 = 1;
    }
  }

  while (!v45 && v43 != v19 && v43 != v20);
  if (v42 <= 1)
  {
    unsigned int v15 = 0LL;
    if (v42 != 1 || v38 == v21) {
      goto LABEL_71;
    }
    BOOL v42 = 1;
  }

  if (v29[v42 - 1] == 255)
  {
LABEL_70:
    unsigned int v15 = 0LL;
    goto LABEL_71;
  }

  uint64_t v78 = v27;
  uint64_t v48 = v43 == v18 && v29[v42 + 1] == 0;
  *uint64_t v79 = v48;
  uint64_t v50 = strlen(v29) & 0x3FFFFFFF;
  char v51 = sub_1812F2264(v11, v50 + 81);
  int v58 = v51;
  v59 = v82;
  if (v51)
  {
    *(_OWORD *)(v51 + 48) = 0u;
    *(_OWORD *)(v51 + 64) = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    *(_OWORD *)(v51 + 32) = 0u;
    *(_OWORD *)char v51 = 0u;
    *(_BYTE *)char v51 = 117;
    *(_WORD *)(v51 + 52) = -1;
    uint64_t v60 = (_BYTE *)(v51 + 80);
    *(void *)(v51 + 8) = v51 + 80;
    if (v50)
    {
      memcpy((void *)(v51 + 80), v29, v50);
      v59 = v82;
    }

    unsigned int v61 = 0LL;
    LODWORD(v62) = 0;
    v60[v50] = 0;
    *(_DWORD *)(v58 + 40) = 1;
    v60[v44] = 0;
    uint64_t v63 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v62 = (int)v62;
      uint64_t v64 = v58 + v61++;
      *(_BYTE *)(v64 + 80) = v60[v62];
      LODWORD(v62) = v62 + 1;
      v63 += 0x100000000LL;
    }

    while ((int)v62 < v42);
    v60[v61] = 0;
    if (*v59 != 167
      || (int v65 = v59, sub_1812A3C7C(v59) != 66)
      || (v65[7] & 3) == 0 && (uint64_t v66 = *((void *)v65 + 9)) != 0 && *(_BYTE *)(v66 + 63) == 1)
    {
      if ((int)sub_1812B8054((unsigned __int8 *)(v58 + 80), &v83, v61, 1) > 0
        || (_DWORD)v61 == 1 && *v60 == 45
        || (uint64_t v67 = v63 >> 32,
            int v68 = v60[v63 >> 32],
            v60[v67] = v68 + 1,
            int v69 = sub_1812B8054((unsigned __int8 *)(v58 + 80), &v83, v61, 1),
            v60[v67] = v68,
            v69 >= 1))
      {
        sub_181309110((void *)v11, (unsigned __int8 *)v58);
        char v70 = v78;
        if (v78)
        {
          if ((*(_WORD *)(v78 + 20) & 0x9000) != 0 || *(_DWORD *)(v78 + 32))
          {
            sub_181303838(v78);
            char v70 = v78;
          }

          sub_1812F20DC(*(void **)(v70 + 24), (void *)v70);
        }

        return 0LL;
      }
    }
  }

  *int v81 = v58;
  unsigned int v15 = 1LL;
  uint64_t v27 = v78;
  if (v80 == 156)
  {
    size_t v71 = *(void *)(a1 + 16);
    size_t v72 = *((_DWORD *)i + 12);
    __int16 v73 = v72 <= 31 ? 1 << (v72 - 1) : 0x80000000;
    *(_DWORD *)(v71 + 372) |= v73;
    if (*v79 && *(_BYTE *)(*((void *)i + 1) + 1LL))
    {
      if (*(_BYTE *)(a1 + 31))
      {
        int v74 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v74;
        v75 = *(unsigned int *)(a1 + 4LL * v74 + 224);
      }

      else
      {
        v75 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v75;
      }

      sub_18128CF10((void *)a1, i, v75, v52, v53, v54, v55, v56, v57);
      uint64_t v76 = *(_BYTE *)(*(void *)v71 + 103LL)
          ? &byte_18C550680
          : (char *)(*(void *)(v71 + 136) + 40LL * *(int *)(v71 + 144) - 40);
      uint64_t v27 = v78;
      *((_DWORD *)v76 + 3) = 0;
      if ((_DWORD)v75)
      {
        uint64_t v77 = *(unsigned __int8 *)(a1 + 31);
        if (v77 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v77 + 1;
          *(_DWORD *)(a1 + 4 * v77 + 224) = v75;
        }
      }
    }
  }

    uint64_t v7 = *(_DWORD *)(v4 + 16);
    if (!a1) {
      goto LABEL_35;
    }
    goto LABEL_52;
  }

  if ((v5 & 2) != 0) {
    goto LABEL_34;
  }
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 1) == 0)
    {
      unsigned int v15 = 2;
      goto LABEL_46;
    }

    uint64_t v13 = 0.0;
    goto LABEL_35;
  }

  uint64_t v13 = (double)*(uint64_t *)v7;
LABEL_35:
  int v20 = v13;
  if (v13 >= -4.50359963e15 && v13 <= 4.50359963e15)
  {
    if (!(_DWORD)v6)
    {
      uint64_t v19 = 0.5;
      if (v13 < 0.0) {
        uint64_t v19 = -0.5;
      }
      uint64_t v13 = (double)(uint64_t)(v13 + v19);
      if (a1) {
        goto LABEL_47;
      }
LABEL_54:
      sub_1812CF36C(97397);
      return;
    }

    int v14 = sqlite3_mprintf("%!.*f", v6, *(void *)&v13);
    if (!v14)
    {
      sqlite3_result_error_nomem(a1);
      return;
    }

    unsigned int v15 = (unsigned __int8 *)v14;
    int v16 = strlen(v14);
    sub_1812B8054(v15, &v20, v16 & 0x3FFFFFFF, 1);
    int v17 = (void (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
      --qword_18C468B10;
      off_18C4653A8(v15);
      unsigned int v15 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_45;
      }
      int v17 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v17)(v15);
LABEL_45:
    uint64_t v13 = v20;
  }

  if (!a1) {
    goto LABEL_54;
  }
LABEL_47:
  uint64_t v18 = *(void *)a1;
  if ((*(_WORD *)(v18 + 20) & 0x9000) != 0) {
    sub_181303888((int *)v18);
  }
  else {
    *(_WORD *)(v18 + 20) = 1;
  }
  *(double *)uint64_t v18 = v13;
  *(_WORD *)(v18 + 20) = 8;
}

    uint64_t v23 = 0LL;
    uint64_t v24 = (unsigned int *)a3[6];
    if (v24) {
      goto LABEL_35;
    }
LABEL_32:
    sub_1812CF36C(89717);
LABEL_33:
    uint64_t result = 0LL;
    goto LABEL_37;
  }

  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = (unsigned int *)a3[6];
  if (!v24) {
    goto LABEL_32;
  }
LABEL_35:
  uint64_t v26 = *((_WORD *)v24 + 10);
  if ((v26 & 0x24) != 0)
  {
    uint64_t result = *v24;
    goto LABEL_37;
  }

  if ((v26 & 8) == 0)
  {
    if ((v26 & 0x12) != 0 && *((void *)v24 + 1))
    {
      uint64_t result = sub_181303DF0((uint64_t)v24);
      goto LABEL_37;
    }

    goto LABEL_33;
  }

  uint64_t v39 = *(double *)v24;
  if (*(double *)v24 >= -9.22337204e18)
  {
    if (v39 <= 9.22337204e18) {
      uint64_t result = (uint64_t)v39;
    }
    else {
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t result = 0x8000000000000000LL;
  }

      if ((v13 & 0x10) != 0)
      {
        int v14 = *(_DWORD *)(v10 + 16);
        if ((v13 & 0x400) != 0) {
          v14 += *(_DWORD *)v10;
        }
        goto LABEL_27;
      }

      if ((v13 & 1) == 0)
      {
        int v14 = sub_181303970(v10, 1);
        goto LABEL_27;
      }

      goto LABEL_26;
    }

    if ((v11 & 1) != 0)
    {
      unsigned int v12 = 0LL;
      uint64_t v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }

    unsigned int v12 = (unsigned __int8 *)sub_181303998((int *)v10, 1);
    int v10 = *a3;
    if (*a3)
    {
      uint64_t v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }
  }

  else
  {
    unsigned int v12 = 0LL;
  }

  sub_1812CF36C(91138);
LABEL_26:
  int v14 = 0;
LABEL_27:
  sub_18135B6B0(v7, v12, v14);
  unsigned int v15 = *(void *)(v7 + 24);
  if (v15 >= *(void *)(v7 + 16))
  {
    sub_18135BB8C(v7, 58);
  }

  else
  {
    int v16 = *(void *)(v7 + 8);
    *(void *)(v7 + 24) = v15 + 1;
    *(_BYTE *)(v16 + v15) = 58;
  }

  return sub_18135BCA0((void *)v7, a3[1]);
}

    sub_1812CF36C(97498);
    return;
  }

  uint64_t v6 = *(void *)v4;
  uint64_t v7 = **(void **)(*(void *)v4 + 72LL);
  int v69 = 0u;
  char v70 = 0u;
  __src = (void *)v4;
  size_t v72 = 0LL;
  int v68 = 0;
  int v8 = sub_18137FA74(v5, &v68, (uint64_t (*)(_DWORD *, void, uint64_t))sub_18137FA54, (uint64_t)&__src);
  if (v8)
  {
    __int16 v9 = v8;
    LODWORD(v10) = 0;
    uint64_t v11 = 0LL;
    goto LABEL_11;
  }

  int v16 = SHIDWORD(v72);
  if (sqlite3_initialize() || (uint64_t v25 = (void *)sub_18126F0AC(24 * v16)) == 0LL)
  {
    LODWORD(v10) = 0;
    uint64_t v11 = 0LL;
    *((void *)&v70 + 1) = 0LL;
    __int16 v9 = 7;
    goto LABEL_11;
  }

  uint64_t v26 = v25;
  bzero(v25, 24 * v16);
  *(void *)&char v70 = *(void *)(v4 + 48);
  *((void *)&v70 + 1) = v26;
  *(void *)&int v69 = v4;
  if (*(int *)(v6 + 48) < 1)
  {
    LODWORD(v10) = 0;
    uint64_t v11 = 0LL;
    __int16 v9 = 0;
    goto LABEL_11;
  }

  uint64_t v11 = 0LL;
  uint64_t v27 = 0LL;
  int v10 = 0LL;
  uint64_t v60 = v16;
  unsigned int v61 = v6;
  uint64_t v28 = v16;
  uint64_t v29 = 0;
  v59 = v28;
  while (1)
  {
    uint64_t v66 = 0LL;
    uint64_t v67 = 0LL;
    *((void *)&v69 + 1) = v29;
    uint64_t v30 = *(_DWORD **)(v4 + 24);
    LODWORD(__src) = 0;
    uint64_t v31 = sub_18137FA74(v30, &__src, (uint64_t (*)(_DWORD *, void, uint64_t))sub_181380188, (uint64_t)&v69);
    if (v31)
    {
      __int16 v9 = v31;
      goto LABEL_11;
    }

    uint64_t v63 = v29;
    uint64_t v64 = (uint64_t)v11;
    uint64_t v32 = sqlite3_column_text(*(sqlite3_stmt **)(v4 + 16), ++v29);
    uint64_t v33 = sqlite3_column_bytes(*(sqlite3_stmt **)(v4 + 16), v29);
    if (v32) {
      break;
    }
    if (sqlite3_column_type(*(sqlite3_stmt **)(v4 + 16), v29) != 5)
    {
      __int16 v9 = 7;
      uint64_t v11 = (char *)v64;
      goto LABEL_11;
    }

  if (!(v4 | v3))
  {
    unsigned int v21 = *(void *)(a1 + 64);
    BOOL v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(v21 + 16);
    do
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v23 + 16))(v21, v23, 0LL, 0LL);
    while (*(_DWORD *)(v23 + 8));
    int v4 = v24;
    uint64_t v25 = *(void *)(v23 + 24);
    if (*(_DWORD *)(v21 + 24))
    {
      if (v25 >= v22)
      {
LABEL_40:
        uint64_t v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 16LL) + 4LL) | *(_DWORD *)(a1 + 80) | 0x4E;
        goto LABEL_41;
      }
    }

    else if (v25 <= v22)
    {
      goto LABEL_40;
    }

    *(_DWORD *)(v23 + 4) = 1;
    goto LABEL_40;
  }

  return v4;
}

      v27 += 4;
      if (--v26) {
        continue;
      }
      break;
    }

    if (!(_DWORD)v20 && v22 != 0x7FFFFFFFFFFFFFFFLL)
    {
      LODWORD(v29) = *(_DWORD *)(a3 + 12);
      uint64_t v30 = (*(_DWORD *)(a3 + 8) + 15);
      if (v30 > v29)
      {
        if (!(_DWORD)v29) {
          LODWORD(v29) = 64;
        }
        uint64_t v29 = (int)v29;
        do
        {
          uint64_t v31 = v29;
          v29 *= 2LL;
        }

        while (v31 < v30);
        uint64_t v32 = *(void *)a3;
        if (sqlite3_initialize() || (uint64_t v24 = sub_18127D33C(v32, v31)) == 0)
        {
          int v20 = 7LL;
          continue;
        }

        *(_DWORD *)(a3 + 12) = v31;
        *(void *)a3 = v24;
      }

      sub_181392CF4(a3, &v37, v22);
      int v20 = 0LL;
      continue;
    }

    break;
  }

  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  if (*(int *)(a2 + 84) >= 1)
  {
    int v14 = 0LL;
    unsigned int v15 = 16LL;
    do
    {
      int v16 = (uint64_t *)(*(void *)(a2 + 88) + v15);
      int v17 = *v16;
      if (*v16)
      {
        uint64_t v18 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
          --qword_18C468B10;
          uint64_t result = off_18C4653A8(v17);
          int v17 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_37;
          }
          uint64_t v18 = &xmmword_18C465410;
        }

        uint64_t result = (*v18)(v17);
      }

    ;
  }

  if (byte_1813C6343[v38] == byte_1813C6343[v39]) {
    goto LABEL_34;
  }
  for (uint64_t j = 0LL; ; ++j)
  {
    BOOL v42 = v29[j];
    int v43 = aRow_0[j];
    if ((_DWORD)v42 != (_DWORD)v43) {
      break;
    }
    if (!v29[j])
    {
      uint64_t v27 = 1;
      uint64_t v40 = 1;
      goto LABEL_51;
    }

  uint64_t v31 = v38[0];
  if (!v38[0]) {
    goto LABEL_41;
  }
  uint64_t v32 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_40;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v31);
  --qword_18C468B10;
  off_18C4653A8(v31);
  uint64_t v31 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v32 = &xmmword_18C465410;
LABEL_40:
    (*v32)(v31);
  }

uint64_t sub_18126DFE0( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, void *a6, void *a7, uint64_t a8)
{
  if (a6) {
    *a6 = 0LL;
  }
  if (a7) {
    *a7 = 0LL;
  }
  if (!a6)
  {
    int v17 = 148668;
    return sub_1812CF36C(v17);
  }

  if (!a1)
  {
    int v16 = "NULL";
    goto LABEL_35;
  }

  int v15 = *(unsigned __int8 *)(a1 + 113);
  if (v15 == 186)
  {
LABEL_10:
    int v16 = "unopened";
LABEL_35:
    sqlite3_log(21, "API call with %s database connection pointer", v16);
    goto LABEL_36;
  }

  if (v15 != 118)
  {
    if (v15 != 109)
    {
      int v16 = "invalid";
      goto LABEL_35;
    }

    goto LABEL_10;
  }

  if (!a2)
  {
LABEL_36:
    int v17 = 148673;
    return sub_1812CF36C(v17);
  }

  uint64_t v18 = *(void *)(a1 + 24);
  if (v18) {
    xmmword_18C465400(v18);
  }
  if (!*(_BYTE *)(a1 + 111)) {
    sub_1812FA020(a1);
  }
  unsigned int v20 = sub_18126E238(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v20)
  {
    int v21 = 0;
    while (!*(_BYTE *)(a1 + 103))
    {
      if (v20 == 17)
      {
        if (!*(_DWORD *)(a1 + 72))
        {
          int v22 = *(_DWORD *)(a1 + 40);
          if (v22 >= 1)
          {
            uint64_t v23 = 0LL;
            uint64_t v24 = 24LL;
            do
            {
              uint64_t v25 = *(void *)(*(void *)(a1 + 32) + v24);
              if ((*(_WORD *)(v25 + 114) & 8) != 0)
              {
                sub_1813070A0(v25);
                int v22 = *(_DWORD *)(a1 + 40);
              }

              ++v23;
              v24 += 32LL;
            }

            while (v23 < v22);
          }
        }

        if (v21)
        {
          unsigned int v20 = 17;
          break;
        }

        int v21 = 1;
      }

      else
      {
        if (v20 != 513) {
          break;
        }
        if (v21 >= 25)
        {
          unsigned int v20 = 513;
          break;
        }

        ++v21;
      }

      unsigned int v20 = sub_18126E238(a1, a2, a3, a4, a5, a6, a7, v19);
      if (!v20) {
        break;
      }
    }
  }

  if (!*(_BYTE *)(a1 + 111)) {
    sub_1812FA0B4(a1);
  }
  if (v20 || *(_BYTE *)(a1 + 103)) {
    uint64_t v27 = sub_1813037C4(a1, v20);
  }
  else {
    uint64_t v27 = 0LL;
  }
  *(_DWORD *)(a1 + 688) = 0;
  uint64_t v28 = *(void *)(a1 + 24);
  if (v28) {
    xmmword_18C465410(v28);
  }
  return v27;
}

uint64_t sub_18126E238( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, void *a6, void *a7, uint64_t a8)
{
  char v10 = a4;
  unsigned int v11 = a3;
  double v14 = 0.0;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  uint64_t v87 = 0LL;
  uint64_t v15 = *(void *)(a1 + 344);
  uint64_t v77 = 0LL;
  uint64_t v78 = v15;
  *(void *)(a1 + 344) = &v63;
  uint64_t v63 = a1;
  if (a5)
  {
    *(void *)&__int128 v82 = a5;
    uint64_t v17 = *(void *)(*(void *)a5 + 24LL);
    if (v17)
    {
      xmmword_18C465400(v17);
      uint64_t v18 = *(void *)(*(void *)a5 + 24LL);
      unsigned int v19 = a5[134];
      if (v18) {
        xmmword_18C465410(v18);
      }
    }

    else
    {
      unsigned int v19 = *((unsigned __int8 *)a5 + 268);
    }

    BYTE5(v80) = (v19 >> 2) & 3;
  }

  if (*(_BYTE *)(a1 + 103))
  {
    sub_1812DC47C((uint64_t)&v63, "out of memory", a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62);
    uint64_t v20 = 7LL;
    *(_DWORD *)(a1 + 80) = 7;
    goto LABEL_125;
  }

  if ((v10 & 1) != 0)
  {
    ++BYTE12(v65);
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
  }

  BYTE13(v65) = v10;
  if (!*(_BYTE *)(a1 + 111) && *(int *)(a1 + 40) >= 1)
  {
    for (uint64_t i = 0LL; i < *(int *)(a1 + 40); ++i)
    {
      uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 32 * i + 8);
      if (!v22) {
        continue;
      }
      if (!*(_BYTE *)(v22 + 17)) {
        continue;
      }
      ++*(_DWORD *)(v22 + 20);
      if (!*(_BYTE *)(v22 + 18))
      {
        sub_1812FDE20(v22);
        if (!*(_BYTE *)(v22 + 17)) {
          continue;
        }
      }

      uint64_t v23 = *(void *)(v22 + 8);
      if (*(void *)(v23 + 128) == v22 || (*(_WORD *)(v23 + 40) & 0x40) == 0)
      {
        uint64_t v24 = *(void *)(v23 + 120);
        if (!v24)
        {
LABEL_31:
          uint64_t v20 = 0LL;
          char v25 = 1;
          goto LABEL_37;
        }

        while (*(void *)v24 == v22 || *(_DWORD *)(v24 + 8) != 1 || *(_BYTE *)(v24 + 12) == 1)
        {
          uint64_t v24 = *(void *)(v24 + 16);
          if (!v24) {
            goto LABEL_31;
          }
        }
      }

      char v25 = 0;
      uint64_t v20 = 262LL;
LABEL_37:
      int v26 = *(_DWORD *)(v22 + 20) - 1;
      *(_DWORD *)(v22 + 20) = v26;
      if (!v26) {
        sub_1812FDEFC(v22);
      }
      if ((v25 & 1) == 0)
      {
        sub_1812D50CC( a1,  v20,  "database schema is locked: %s",  a4,  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  *(void *)(*(void *)(a1 + 32) + 32 * i));
        goto LABEL_125;
      }
    }
  }

  if (*(void *)(a1 + 608)) {
    sub_18130D9D8((void *)a1);
  }
  if ((v11 & 0x80000000) != 0 || v11 && !a2[v11 - 1])
  {
    sub_18126E93C((uint64_t)&v63, a2);
  }

  else
  {
    if (*(_DWORD *)(a1 + 140) < (signed int)v11)
    {
      sub_1812D50CC(a1, 18, "statement too long", a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62);
      uint64_t v20 = sub_1813037C4(a1, 0x12u);
      goto LABEL_125;
    }

    size_t v27 = v11;
    if (a2 && (uint64_t v28 = (unsigned __int8 *)sub_1812F2264(a1, v11 + 1LL)) != 0LL)
    {
      uint64_t v29 = v28;
      memcpy(v28, a2, v27);
      v29[v27] = 0;
      sub_18126E93C((uint64_t)&v63, v29);
      *((void *)&v82 + 1) = &a2[*((void *)&v82 + 1) - (void)v29];
      sub_1812F20DC((void *)a1, v29);
    }

    else
    {
      *((void *)&v82 + 1) = &a2[v11];
    }
  }

  if (a7) {
    *a7 = *((void *)&v82 + 1);
  }
  if (!*(_BYTE *)(a1 + 197))
  {
    uint64_t v30 = *((void *)&v64 + 1);
    if (*((void *)&v64 + 1))
    {
      int v31 = DWORD2(v82);
      *(_BYTE *)(*((void *)&v64 + 1) + 266LL) = v10;
      if ((v10 & 0x80) == 0) {
        *(_DWORD *)(v30 + 372) = 0;
      }
      if (a2)
      {
        size_t v32 = v31 - (int)a2;
        uint64_t v33 = (_BYTE *)sub_1812F2264(*(void *)v30, v32 + 1);
        uint64_t v34 = v33;
        if (v33)
        {
          memcpy(v33, a2, v32);
          v34[v32] = 0;
        }
      }

      else
      {
        uint64_t v34 = 0LL;
      }

      *(void *)(v30 + 320) = v34;
    }
  }

  if (*(_BYTE *)(a1 + 103))
  {
    LODWORD(v65) = 7;
    BYTE5(v65) = 0;
LABEL_56:
    if (BYTE5(v65))
    {
      if (!*(_BYTE *)(a1 + 197))
      {
        uint64_t v38 = v63;
        if (*(int *)(v63 + 40) >= 1)
        {
          for (uint64_t j = 0LL; j < *(int *)(v38 + 40); ++j)
          {
            uint64_t v40 = *(void *)(v38 + 32) + 32 * j;
            uint64_t v41 = *(void *)(v40 + 8);
            if (v41)
            {
              int v42 = *(unsigned __int8 *)(v41 + 16);
              if (!*(_BYTE *)(v41 + 16))
              {
                int v43 = sub_1812FDF34(*(void *)(v40 + 8), 0, 0LL);
                if (v43)
                {
                  if (v43 == 3082 || v43 == 7)
                  {
                    if (*(_BYTE *)(v38 + 103) || *(_BYTE *)(v38 + 104)) {
                      goto LABEL_121;
                    }
                    *(_BYTE *)(v38 + 103) = 1;
                    ++*(_DWORD *)(v38 + 432);
                    *(_WORD *)(v38 + 436) = 0;
                    uint64_t v46 = *(void *)(v38 + 344);
                    if (!v46
                      || (sub_1812DC47C(v46, "out of memory", v44, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62),
                          uint64_t v47 = *(void *)(v38 + 344),
                          *(_DWORD *)(v47 + 24) = 7,
                          (uint64_t v48 = *(void *)(v47 + 256)) == 0))
                    {
LABEL_121:
                      LODWORD(v65) = 7;
                    }

                    else
                    {
                      do
                      {
                        ++*(_DWORD *)(v48 + 48);
                        *(_DWORD *)(v48 + 24) = 7;
                        uint64_t v48 = *(void *)(v48 + 256);
                      }

                      while (v48);
                      LODWORD(v65) = 7;
                    }
                  }

                  break;
                }
              }

              uint64_t v49 = *(void *)(v41 + 8);
              int v50 = *(unsigned __int8 *)(v41 + 17);
              if (*(_BYTE *)(v41 + 17))
              {
                ++*(_DWORD *)(v41 + 20);
                if (*(_BYTE *)(v41 + 18))
                {
                  int v50 = 1;
                }

                else
                {
                  sub_1812FDE20(v41);
                  int v50 = *(unsigned __int8 *)(v41 + 17);
                }
              }

              unsigned int v52 = *(_DWORD *)(*(void *)(*(void *)(v49 + 24) + 80LL) + 40LL);
              if (v50)
              {
                int v53 = *(_DWORD *)(v41 + 20) - 1;
                *(_DWORD *)(v41 + 20) = v53;
                if (!v53) {
                  sub_1812FDEFC(v41);
                }
              }

              uint64_t v54 = *(void *)(v38 + 32);
              uint64_t v55 = *(void *)(v54 + 32 * j + 24);
              if (bswap32(v52) != *(_DWORD *)v55)
              {
                __int16 v56 = *(_WORD *)(v55 + 114);
                if ((v56 & 1) != 0) {
                  LODWORD(v65) = 17;
                }
                *(_WORD *)(v55 + 114) = v56 | 8;
                *(_WORD *)(*(void *)(v54 + 56) + 114LL) |= 8u;
                *(_DWORD *)(v38 + 44) &= ~0x10u;
                if (!*(_DWORD *)(v38 + 72))
                {
                  int v57 = *(_DWORD *)(v38 + 40);
                  if (v57 >= 1)
                  {
                    uint64_t v58 = 0LL;
                    uint64_t v59 = 24LL;
                    do
                    {
                      uint64_t v60 = *(void *)(*(void *)(v38 + 32) + v59);
                      if ((*(_WORD *)(v60 + 114) & 8) != 0)
                      {
                        sub_1813070A0(v60);
                        int v57 = *(_DWORD *)(v38 + 40);
                      }

                      ++v58;
                      v59 += 32LL;
                    }

                    while (v58 < v57);
                  }
                }
              }

              if (!v42)
              {
                if (*(_BYTE *)(v41 + 17))
                {
                  ++*(_DWORD *)(v41 + 20);
                  if (!*(_BYTE *)(v41 + 18)) {
                    sub_1812FDE20(v41);
                  }
                }

                if (*(_BYTE *)(v41 + 17))
                {
                  int v51 = *(_DWORD *)(v41 + 20) - 1;
                  *(_DWORD *)(v41 + 20) = v51;
                  if (!v51) {
                    sub_1812FDEFC(v41);
                  }
                }
              }
            }
          }
        }
      }
    }

    uint64_t v35 = *((void *)&v64 + 1);
    if (*((void *)&v64 + 1))
    {
      if (*(_BYTE *)(*((void *)&v64 + 1) + 267LL)) {
        sub_18127A3A0(*((void ***)&v64 + 1));
      }
      sub_1812CFA64(v35);
    }

    uint64_t v20 = v65;
    if ((void)v64)
    {
      sub_1812D50CC(a1, v65, "%s", a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v64);
      uint64_t v36 = (void *)v64;
      if ((void)v64) {
        goto LABEL_123;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 80) = v65;
      if ((_DWORD)v20 || *(void *)(a1 + 416))
      {
        sub_1812FA264(a1, v20);
      }

      else
      {
        uint64_t v20 = 0LL;
        *(_DWORD *)(a1 + 84) = -1;
      }
    }

    goto LABEL_124;
  }

  if ((_DWORD)v65 && (_DWORD)v65 != 101) {
    goto LABEL_56;
  }
  *a6 = *((void *)&v64 + 1);
  *(void *)(a1 + 80) = 0xFFFFFFFF00000000LL;
  uint64_t v37 = *(void *)(a1 + 416);
  if (v37)
  {
    if ((*(_WORD *)(v37 + 20) & 0x9000) != 0)
    {
      sub_181303888((int *)v37);
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 0LL;
      *(_WORD *)(v37 + 20) = 1;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

LABEL_124:
  while (1)
  {
    uint64_t v36 = (void *)v75;
    if (!(void)v75) {
      break;
    }
    *(void *)&__int128 v75 = *(void *)(v75 + 8);
LABEL_123:
    sub_1812F20DC((void *)a1, v36);
  }

    if (*(_DWORD *)(*(void *)a1 + 792LL))
    {
      if (*(_DWORD *)(a1 + 64))
      {
        uint64_t v54 = sub_181302E18(a1, v38, v34);
        if (v54)
        {
          if (!*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 52) == 19)
          {
            *(_DWORD *)(a1 + 52) = v54;
            __int16 v56 = *(void **)(a1 + 168);
            if (v56) {
              sub_1812F20DC((void *)v2, v56);
            }
            *(void *)(a1 + 168) = 0LL;
          }

          sub_1812C8198(v2, 516, v55);
          for (n = *(void **)(v2 + 760); n; n = *(void **)(v2 + 760))
          {
            *(void *)(v2 + 760) = n[3];
            sub_1812F20DC((void *)v2, n);
          }

          *(void *)(v2 + 788) = 0LL;
          *(_BYTE *)(v2 + 109) = 0;
          *(_BYTE *)(v2 + 101) = 1;
          *(void *)(a1 + 56) = 0LL;
        }
      }
    }

    if ((*(_WORD *)(a1 + 268) & 0x10) == 0) {
      goto LABEL_141;
    }
    if (v38 == 2)
    {
      *(void *)(v2 + 120) = 0LL;
LABEL_140:
      *(void *)(a1 + 56) = 0LL;
LABEL_141:
      if (*(_DWORD *)(a1 + 276)) {
        sub_181302B04(a1);
      }
LABEL_143:
      --*(_DWORD *)(v2 + 208);
      uint64_t v59 = *(_WORD *)(a1 + 268);
      if ((v59 & 0x40) == 0)
      {
        --*(_DWORD *)(v2 + 216);
        uint64_t v59 = *(_WORD *)(a1 + 268);
      }

      if ((v59 & 0x80) != 0) {
        --*(_DWORD *)(v2 + 212);
      }
      *(_BYTE *)(a1 + 267) = 3;
      if (*(_BYTE *)(v2 + 103))
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 52) = 7;
      }

      else if (*(_DWORD *)(a1 + 52) == 5)
      {
        return 5LL;
      }

      else
      {
        return 0LL;
      }

      return result;
    }

    goto LABEL_138;
  }

  uint64_t v48 = v53;
  if (v53 != 5)
  {
    if (v53 != 3082 && (v53 & 0xFB) == 0xA)
    {
      uint64_t v60 = *(uint64_t (**)(void))(*(void *)v2 + 128LL);
      if (v60) {
        unsigned int v61 = v60();
      }
      else {
        unsigned int v61 = 0;
      }
      *(_DWORD *)(v2 + 92) = v61;
    }

    goto LABEL_117;
  }

  if ((*(_WORD *)(a1 + 268) & 0x40) == 0)
  {
    uint64_t v48 = 5;
    goto LABEL_117;
  }

  if (*(_DWORD *)(a1 + 276)) {
    sub_181302B04(a1);
  }
  return 5LL;
}

      uint64_t v41 = *(void *)(v7 + 344);
      if (v41 && !*(_BYTE *)(v7 + 8) && *(_BYTE *)(v41 + 64))
      {
        if (!*(_BYTE *)(v41 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v41 + 8) + 112LL))( *(void *)(v41 + 8),  0LL,  1LL,  9LL);
        }
        *(_BYTE *)(v41 + 64) = 0;
      }

      if (!*(_BYTE *)(v6 + 36))
      {
        int v42 = *(void *)(v6 + 24);
        if (v42)
        {
          *(void *)(v6 + 24) = 0LL;
          sub_1812F1ABC(*(void *)(v42 + 112));
        }
      }

      if (v18 == 5 && !*(_BYTE *)(v6 + 36))
      {
        int v43 = *(void *)(v6 + 8);
        uint64_t v44 = *(uint64_t (**)(void))(v43 + 664);
        if (v44)
        {
          if ((*(_DWORD *)(v43 + 688) & 0x80000000) == 0)
          {
            *(_BYTE *)(*(void *)(v43 + 680) + 784LL) = 0;
            int v45 = v44(*(void *)(v43 + 672));
            if (*(uint64_t (**)(void *, int))(v43 + 664) != sub_1812E0848)
            {
              uint64_t v46 = *(void *)(v43 + 680);
              if (*(_BYTE *)(v46 + 784))
              {
                uint64_t v47 = sub_1812E0848((void *)v46, *(_DWORD *)(v43 + 688));
                if (v45 == 109) {
                  int v45 = v47;
                }
              }
            }

            if (!v45)
            {
              *(_DWORD *)(v43 + 688) = -1;
              break;
            }

            ++*(_DWORD *)(v43 + 688);
            unsigned int v19 = *(void *)(v7 + 344);
            if (!v19) {
              continue;
            }
LABEL_42:
            uint64_t v20 = *(void *)a1;
            *(void *)(v19 + 160) = *(void *)a1;
            int v21 = *(void *)(v6 + 24);
            if (!a2 || v21) {
              goto LABEL_63;
            }
            uint64_t v18 = 0;
            if (!*(_BYTE *)(v7 + 8) && v20)
            {
              LODWORD(v56) = *(_DWORD *)(v20 + 772);
              if (!(_DWORD)v56) {
                goto LABEL_61;
              }
              uint64_t v22 = *(void *)(v19 + 8);
              if (!*(void *)v22
                || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v22 + 80LL))( v22,  34LL,  &v56))
              {
                goto LABEL_61;
              }

              if (*(_BYTE *)(v19 + 63)
                || (uint64_t v18 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v19 + 8) + 112LL))( *(void *)(v19 + 8),  0LL,  1LL,  10LL)) == 0)
              {
                uint64_t v18 = 0;
                *(_BYTE *)(v19 + 64) = 1;
              }

              LODWORD(v56) = 0;
              uint64_t v23 = *(void *)(v19 + 8);
              if (*(void *)v23) {
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v23 + 80LL))(v23, 34LL, &v56);
              }
              if (v18 != 5 && v18 != 0) {
                break;
              }
            }

            goto LABEL_62;
          }
        }
      }
    }

    break;
  }

  int v50 = *(void *)(v7 + 344);
  if (v50) {
    *(void *)(v50 + 160) = 0LL;
  }
  if (v18 == 773) {
    char v10 = 5LL;
  }
  else {
    char v10 = v18;
  }
  if ((_DWORD)v10) {
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    ++*(_DWORD *)(v6 + 60);
    if (*(_BYTE *)(a1 + 17))
    {
      *(_BYTE *)(a1 + 60) = 1;
      *(void *)(a1 + 64) = *(void *)(v6 + 120);
      *(void *)(v6 + 120) = a1 + 48;
    }
  }

  if (a2) {
    int v51 = 2;
  }
  else {
    int v51 = 1;
  }
  *(_BYTE *)(a1 + 16) = v51;
  a3 = v53;
  if (!a2
    || (unsigned int v52 = *(void *)(v6 + 24),
        *(void *)(v6 + 128) = a1,
        *(_WORD *)(v6 + 40) = *(_WORD *)(v6 + 40) & 0xFFBF | ((a2 > 1) << 6),
        *(_DWORD *)(v6 + 64) == bswap32(*(_DWORD *)(*(void *)(v52 + 80) + 28LL))))
  {
LABEL_7:
    if (a3) {
      *a3 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v6 + 24) + 80LL) + 40LL));
    }
    if (a2 && (__int16 v9 = *(_DWORD *)(*(void *)a1 + 788LL), *(_DWORD *)(v7 + 128) < v9) && *(_BYTE *)(v7 + 10)) {
      char v10 = sub_1812FEBEC(v7, v9);
    }
    else {
      char v10 = 0LL;
    }
    goto LABEL_14;
  }

  char v10 = sub_1812ABDD4(*(void *)(v52 + 112));
  if (!(_DWORD)v10)
  {
    *(_DWORD *)(*(void *)(v52 + 80) + 28LL) = bswap32(*(_DWORD *)(v6 + 64));
    a3 = v53;
    goto LABEL_7;
  }

  *(_BYTE *)(result + 24) = *((_BYTE *)a1 + 300);
  *(_WORD *)(a2 + 52) = -1;
  uint64_t result = (uint64_t)sub_18129D098( (void **)a1,  0LL,  0LL,  0LL,  result,  *(unsigned __int8 *)(a2 + 62),  0LL,  0LL,  0,  0,  2u);
  if (*((_DWORD *)a1 + 12))
  {
LABEL_125:
    *(_DWORD *)(a2 + 48) &= ~0x80u;
    return result;
  }

  for (uint64_t i = *(void *)(a2 + 16); i; uint64_t i = *(void *)(i + 40))
  {
    if ((*(_WORD *)(i + 99) & 3) == 2) {
      break;
    }
  }

  sub_1812DC47C(v12, "%s.xBestIndex malfunction", v60, (uint64_t)a7, a6, v61, v62, v63, **v97);
  return 1LL;
}

            if ((v29 & 0x4000000) != 0) {
              goto LABEL_157;
            }
            char v25 = sub_1813528A8((uint64_t)v95);
            if (v25) {
              goto LABEL_158;
            }
            sub_181353000((uint64_t)v92, v55);
            __int128 v65 = *(void **)(v55 + 56);
            if (!v65) {
              goto LABEL_157;
            }
            __int128 v66 = DWORD2(v93);
            __int128 v67 = (void *)v93;
LABEL_129:
            __int128 v68 = v65[3];
            if (!v68) {
              goto LABEL_141;
            }
            for (uint64_t j = 0LL; ; ++j)
            {
              __int128 v70 = *(unsigned __int8 *)(v68 + j);
              __int128 v71 = v14[j];
              if ((_DWORD)v70 == (_DWORD)v71)
              {
                if (!*(_BYTE *)(v68 + j))
                {
                  __int128 v72 = v101;
                  if (v101)
                  {
                    __int128 v73 = &v101;
                    if (*v101 != v68)
                    {
                      do
                      {
                        __int128 v74 = v72;
                        __int128 v72 = (void *)v72[3];
                        if (!v72) {
                          goto LABEL_141;
                        }
                      }

                      while (*v72 != v68);
                      __int128 v73 = v74 + 3;
                    }

                    *__int128 v73 = v72[3];
                    v72[3] = v67;
                    *(void *)&int v93 = v72;
                    DWORD2(v93) = ++v66;
                    __int128 v67 = v72;
                  }

LABEL_125:
  sub_1812DCA44(&v63);
  return v20;
}

                        uint64_t v98 = (unsigned int *)v10;
                        char v10 = 0LL;
                      }

                      *(void *)(v53 + 24) = v98;
                      *(void *)(v53 + 32) = a6;
                      *(void *)(a1 + 360) = v53;
                      uint64_t result = sub_18128FF4C((void *)v18, (void *)a7);
                      if (v10) {
                        goto LABEL_54;
                      }
                      goto LABEL_55;
                    }
                  }
                }

                __int128 v67 = v100;
                goto LABEL_71;
              }

              sub_1812DC47C(a1, "cannot create INSTEAD OF trigger on table: %S", v73, v74, v75, v76, v77, v78, a7 + 8);
            }

            else
            {
              __int128 v80 = "AFTER";
              if (v14 == 33) {
                __int128 v80 = "BEFORE";
              }
              sub_1812DC47C(a1, "cannot create %s trigger on view: %S", v73, v74, v75, v76, v77, v78, (char)v80);
            }

            __int128 v67 = v100;
            goto LABEL_64;
          }

          __int128 v81 = "cannot create trigger on system table";
        }

        sub_1812DC47C(a1, v81, v73, v74, v75, v76, v77, v78, v99);
        goto LABEL_70;
      }
    }
  }

  if (*(void *)v28) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 80LL))(v28, 4LL, a1 + 92);
  }
LABEL_127:
  if (*(_BYTE *)(v26 + 17))
  {
    int v53 = *(_DWORD *)(v26 + 20) - 1;
    *(_DWORD *)(v26 + 20) = v53;
    if (!v53) {
      sub_1812FDEFC(v26);
    }
  }

                  uint64_t v28 = v40;
                  free(v88);
                  return v28;
                }

                uint64_t v63 = 0;
LABEL_127:
                if (v70 != v35)
                {
                  uint64_t v28 = 0LL;
                  goto LABEL_131;
                }

                __int128 v69 = v87;
                __int128 v65 = v90;
              }

              else
              {
                uint64_t v63 = 0;
                __int128 v69 = v87;
              }

              uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v69 + 40LL))(v69, v65);
            }

            else
            {
              uint64_t v28 = 0LL;
              uint64_t v63 = 0;
            }

                  __int128 v111 = sub_1812F2264(*(void *)a1, 0x50uLL);
                  __int128 v115 = v111;
                  if (v111)
                  {
                    *(_OWORD *)(v111 + 32) = 0u;
                    *(_OWORD *)(v111 + 48) = 0u;
                    *(_OWORD *)(v111 + 64) = 0u;
                    *(_OWORD *)__int128 v111 = 0u;
                    *(_OWORD *)(v111 + 16) = 0u;
                    *(_BYTE *)__int128 v111 = 53;
                    *(_WORD *)(v111 + 52) = -1;
                    *(_DWORD *)(v111 + 40) = 1;
                    if (*(int *)(*(void *)a1 + 148LL) <= 0) {
                      sub_1812DC47C( a1,  "Expression tree is too large (maximum depth %d)",  v112,  v113,  v114,  a6,  a7,  a8,  *(_DWORD *)(*(void *)a1 + 148LL));
                    }
                    int v42 = a2;
                    if (!*(_BYTE *)(v489 + 103))
                    {
LABEL_131:
                      __int128 v116 = *(_DWORD *)(v89 + 36);
                      __int128 v117 = *(void *)(*(void *)v89 + 16LL);
                      uint64_t v28 = __OFSUB__(v116, 1);
                      __int128 v118 = v116 - 1;
                      if (v118 < 0 == v28) {
                        __int128 v117 = *(void *)(*(void *)(v117 + 32) + 24LL * v118 + 8);
                      }
                      *(void *)(v115 + 16) = v117;
                      __int128 v119 = sub_1812F2264(v489, 0x51uLL);
                      if (v119)
                      {
                        *(_OWORD *)(v119 + 32) = 0u;
                        *(_OWORD *)(v119 + 48) = 0u;
                        *(_OWORD *)(v119 + 64) = 0u;
                        *(_OWORD *)__int128 v119 = 0u;
                        *(_OWORD *)(v119 + 16) = 0u;
                        *(_BYTE *)__int128 v119 = -80;
                        *(_WORD *)(v119 + 52) = -1;
                        *(_BYTE *)(v119 + 80) = 0;
                        *(void *)(v119 + 8) = v119 + 80;
                        *(_DWORD *)(v119 + 40) = 1;
                        *(void *)(v115 + 24) = v119;
                        *(_DWORD *)(v119 + 44) = v482 + v85;
                        sub_1812B0714(a1, v115);
                      }

                      else
                      {
                        *(void *)(v115 + 24) = 0LL;
                      }

                      *(void *)(v115 + 16) = 0LL;
                    }

                    sub_181309110((void *)v489, (unsigned __int8 *)v115);
                  }

                  else
                  {
                    int v42 = a2;
                    if (!*(_BYTE *)(v489 + 103)) {
                      goto LABEL_131;
                    }
                  }

                  break;
                }
              }

              else if ((_DWORD)v106 == 94 && v105[3] == (_DWORD)v103)
              {
                v107 = (v482 + v85);
                int v103 = v105[2];
                goto LABEL_122;
              }

              v102 += 20LL;
              if (v104 == v102) {
                goto LABEL_125;
              }
            }
          }
        }

                            v208 = v41;
LABEL_126:
                            if (*(_BYTE *)(a1 + 462)) {
                              sub_181375F44((uint64_t)&v208, a1, v24);
                            }
                            ++v207;
                            goto LABEL_129;
                          }

                          if ((v32 & 0x12) != 0 && *(void *)(v31 + 8))
                          {
                            uint64_t v33 = sub_181303DF0(v31);
                            goto LABEL_78;
                          }
                        }

                        else
                        {
                          sub_1812CF36C(89717);
                        }

                        uint64_t v33 = 0LL;
                        goto LABEL_78;
                      }
                    }

                    else
                    {
                      sub_1812CF36C(97220);
                      char v25 = (sqlite3_stmt *)*a3;
                    }

                    int v26 = sub_1813758F8(a1, v25, &v207, v21);
                    v208 = v26;
                    goto LABEL_52;
                  }

uint64_t sub_18126E93C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(*(void *)a1 + 140LL);
  if (!*(_DWORD *)(*(void *)a1 + 208LL)) {
    *(_DWORD *)(v4 + 424) = 0;
  }
  *(_DWORD *)(a1 + 24) = 0;
  int v6 = -1;
  *(void *)(a1 + 336) = a2;
  int v57 = v59;
  uint64_t v58 = (void **)a1;
  *(_DWORD *)uint64_t v59 = 0;
  unsigned int v61 = (unsigned __int16 *)&v60;
  uint64_t v7 = *(void *)(v4 + 344);
  *(void *)(v4 + 344) = a1;
  uint64_t v56 = v7;
  while (1)
  {
    int v8 = sub_18126F280(v2, &v62);
    v5 -= v8;
    if (v5 < 0) {
      break;
    }
    int v15 = v8;
    while (1)
    {
      if (v62 < 164)
      {
        int v6 = v62;
        goto LABEL_66;
      }

      if (*(_DWORD *)(v4 + 424))
      {
        int v41 = 9;
        goto LABEL_108;
      }

      if (v62 != 183) {
        break;
      }
      v2 += v15;
      int v15 = sub_18126F280(v2, &v62);
      v5 -= v15;
      if (v5 < 0) {
        goto LABEL_106;
      }
    }

    if (*v2)
    {
      switch(v62)
      {
        case 166:
          if (v6 == 23)
          {
            unsigned int v19 = v2 + 6;
            do
              v19 += (int)sub_18126F280(v19, (int *)&v64);
            while ((_DWORD)v64 == 183);
            BOOL v20 = ((_DWORD)v64 - 117) > 0x30
               || ((1LL << (v64 - 117)) & 0x1800000000003LL) == 0;
            if (v20 && (_DWORD)v64 != 59 && word_1813C717A[(int)v64] != 59 && (_DWORD)v64 == 22)
            {
              int v6 = 166;
              break;
            }
          }

LABEL_62:
          int v6 = 59;
          break;
        case 165:
          if (v6 != 23) {
            goto LABEL_62;
          }
          int v21 = v2 + 4;
          do
            v21 += (int)sub_18126F280(v21, (int *)&v64);
          while ((_DWORD)v64 == 183);
          BOOL v22 = ((_DWORD)v64 - 117) > 0x30
             || ((1LL << (v64 - 117)) & 0x1800000000003LL) == 0;
          if (!v22 || (_DWORD)v64 == 59 || word_1813C717A[(int)v64] == 59)
          {
            int v6 = 165;
          }

          else if ((_DWORD)v64 == 22 || (_DWORD)v64 == 59)
          {
            int v6 = 165;
          }

          else
          {
            int v6 = 59;
          }

          break;
        case 164:
          int v16 = v2 + 6;
          do
            v16 += (int)sub_18126F280(v16, (int *)&v64);
          while ((_DWORD)v64 == 183);
          BOOL v17 = ((_DWORD)v64 - 117) > 0x30
             || ((1LL << (v64 - 117)) & 0x1800000000003LL) == 0;
          do
            v16 += (int)sub_18126F280(v16, (int *)&v64);
          while ((_DWORD)v64 == 183);
          BOOL v18 = ((_DWORD)v64 - 117) > 0x30
             || ((1LL << (v64 - 117)) & 0x1800000000003LL) == 0;
          if ((_DWORD)v64 == 24) {
            int v6 = 164;
          }
          else {
            int v6 = 59;
          }
          break;
        default:
          __int128 v64 = v2;
          LODWORD(v65) = v15;
          sub_1812DC47C(v3, "unrecognized token: %T", v9, v10, v11, v12, v13, v14, (char)&v64);
          goto LABEL_111;
      }
    }

    else
    {
      if (v6 == 1)
      {
        int v6 = 0;
      }

      else
      {
        if (!v6) {
          goto LABEL_111;
        }
        int v6 = 1;
      }

      int v15 = 0;
    }

    int v62 = v6;
LABEL_66:
    *(void *)(v3 + 280) = v2;
    *(_DWORD *)(v3 + 288) = v15;
    uint64_t v55 = v3;
    uint64_t v23 = *(void *)(v3 + 288);
    uint64_t v24 = v58;
    for (unsigned int i = *v57; ; unsigned int i = sub_18126F978((uint64_t *)&v57, v33, (uint64_t)v2, v23, v24, v12, v13, v14))
    {
      if (i <= 0x242)
      {
        uint64_t v26 = word_1813C7480[i];
        unsigned __int16 v27 = v6;
        do
        {
          unsigned __int16 v28 = v27;
          int v29 = v27;
          uint64_t v30 = v27 + v26;
          if (word_1813C7906[v30] == v29)
          {
            size_t v32 = &word_1813C8AD8[v30];
            goto LABEL_77;
          }

          unsigned __int16 v27 = word_1813C717A[v28];
        }

        while (v27);
        if (v28 && (uint64_t v31 = v26 + 101, word_1813C7906[v31] == 101)) {
          size_t v32 = &word_1813C8AD8[v31];
        }
        else {
          size_t v32 = (unsigned __int16 *)((char *)&unk_1813C9B38 + 2 * i);
        }
LABEL_77:
        unsigned int i = *v32;
      }

      uint64_t v33 = i - 1243;
      if (i < 0x4DB) {
        break;
      }
      if (!byte_1813C72EC[v33])
      {
        uint64_t v34 = (uint64_t)v57;
        if (v57 >= v61)
        {
          for (uint64_t j = (uint64_t)v58; v57 > v59; v34 = (uint64_t)v57)
          {
            int v57 = (unsigned __int16 *)(v34 - 24);
            sub_181279FFC(&v57, *(unsigned __int16 *)(v34 + 2), (uint64_t *)(v34 + 8));
          }

          sub_1812DC47C(j, "parser stack overflow", v9, v10, v11, v12, v13, v14, v54);
          uint64_t v58 = (void **)j;
          uint64_t v3 = v55;
          goto LABEL_98;
        }
      }
    }

    uint64_t v3 = v55;
    if (i > 0x4D7)
    {
      if (i == 1241)
      {
        v57 -= 12;
      }

      else
      {
        v63[0] = (uint64_t)v2;
        v63[1] = v23;
        __int128 v64 = v2;
        uint64_t v65 = v23;
        uint64_t v39 = (uint64_t)v58;
        if (*v2) {
          sub_1812DC47C((uint64_t)v58, "near %T: syntax error", v9, v10, v11, v12, v13, v14, (char)&v64);
        }
        else {
          sub_1812DC47C((uint64_t)v58, "incomplete input", v9, v10, v11, v12, v13, v14, v54);
        }
        uint64_t v58 = (void **)v39;
        sub_181279FFC(&v57, (unsigned __int16)v6, v63);
      }
    }

    else
    {
      uint64_t v36 = (uint64_t)v57;
      v57 += 12;
      if (v57 <= v61)
      {
        __int16 v38 = i + 406;
        if (i <= 0x242) {
          __int16 v38 = i;
        }
        *(_WORD *)(v36 + 24) = v38;
        *(_WORD *)(v36 + 26) = v6;
        *(void *)(v36 + 32) = v2;
        *(void *)(v36 + 40) = v23;
      }

      else
      {
        int v57 = (unsigned __int16 *)v36;
        uint64_t v37 = (uint64_t)v58;
        if (v36 > (unint64_t)v59)
        {
          do
          {
            int v57 = (unsigned __int16 *)(v36 - 24);
            sub_181279FFC(&v57, *(unsigned __int16 *)(v36 + 2), (uint64_t *)(v36 + 8));
            uint64_t v36 = (uint64_t)v57;
          }

          while (v57 > v59);
        }

        sub_1812DC47C(v37, "parser stack overflow", v9, v10, v11, v12, v13, v14, v54);
        uint64_t v58 = (void **)v37;
      }
    }

      if (*(_BYTE *)(k + 46)) {
        return 2LL;
      }
      int v6 = 1;
    }

    if ((_DWORD)v14)
    {
      uint64_t result = *(void *)(v10 + 24);
      uint64_t v46 = ~(_DWORD)v14;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) >= 0) {
        *(_DWORD *)(*(void *)(result + 80) + 4LL * v46) = *(_DWORD *)(v10 + 144);
      }
      else {
        uint64_t result = sub_18131E420(result, v10, v46);
      }
    }

    ++v11;
    v12 += 3;
  }

  while (v11 < *(_DWORD *)(v8 + 48));
  a2 = v57;
  if (!v58) {
    goto LABEL_66;
  }
LABEL_68:
  uint64_t v47 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v47)
  {
    uint64_t result = sub_18131044C(v10, 16LL, v58, 0LL, 0LL, a6, a7, a8);
    uint64_t v47 = result;
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v47 + 1;
    uint64_t v48 = *(void *)(v10 + 136) + 40LL * v47;
    *(_DWORD *)uint64_t v48 = 16;
    *(_DWORD *)(v48 + 4) = v58;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
  }

  uint64_t v23 = *(void *)(v6 + 16);
  if (v23) {
    xmmword_18C465410(v23);
  }
  if (!(_DWORD)v12) {
    *(_BYTE *)(a1 + 28) = a2;
  }
  return v12;
}

              ++v61;
              if (v54 - 1 == ++v60) {
                goto LABEL_38;
              }
            }

            v62 += 3;
            uint64_t v63 = 100;
            goto LABEL_76;
          }

    uint64_t v35 = 0LL;
    __int128 v115 = v8;
    uint64_t v36 = (v8 - 1);
    else {
      uint64_t v37 = v8;
    }
    __int16 v38 = 8LL * v37;
    do
    {
      sub_181364F08(a1, v6[v35 / 8]);
      v35 += 8LL;
    }

    while (v38 != v35);
    if (v8 >= 2)
    {
      uint64_t v39 = (int8x16_t *)&v6[(int)v8 - 2];
      uint64_t v40 = v8 - 1;
      do
      {
        int v41 = v40--;
        if ((int)v8 > v41)
        {
          uint64_t v42 = v40;
          int v43 = v6[v40];
          uint64_t v44 = v39;
          do
          {
            if ((v3(v43, v44->i64[1]) & 0x80000000) != 0) {
              break;
            }
            ++v42;
            uint64_t v45 = *v44;
            *uint64_t v44 = vextq_s8(*v44, *v44, 8uLL);
            uint64_t v44 = (int8x16_t *)((char *)v44 + 8);
            int v43 = v45.i64[0];
          }

          while (v42 < v36);
        }

        uint64_t v39 = (int8x16_t *)((char *)v39 - 8);
        LODWORD(v8) = v125;
      }

      while (v41 > 1);
    }

    uint64_t v46 = *v6;
    int v5 = a1;
    uint64_t v4 = a2;
    uint64_t v47 = v120;
    if (*(void *)(*v6 + 112)) {
      break;
    }
LABEL_7:
    *(_DWORD *)(v4 + 12) = v8;
    int v2 = v121;
  }

  __int128 v119 = 0LL;
  uint64_t v48 = 0;
  do
  {
    uint64_t v127 = 0LL;
    int v126 = 0;
    uint64_t v124 = *(void *)(v46 + 128);
    sub_181364FCC(v5, v46, &v127, &v126);
    uint64_t v49 = 1LL;
    if (v8 >= 2)
    {
      while (1)
      {
        int v50 = v6[v49];
        if (!*(void *)(v50 + 112) || *(void *)(v50 + 128) != v124) {
          break;
        }
        sub_181364FCC(v5, v50, 0LL, 0LL);
        if (v115 == ++v49)
        {
          LODWORD(v49) = v115;
          break;
        }
      }
    }

    uint64_t v51 = v126;
    if ((v47 & 4) != 0)
    {
      unsigned int v52 = 0;
      int v53 = *(_DWORD *)(v116 + 12);
      char v54 = (unsigned __int8 *)v127;
      uint64_t v55 = &v127[v126];
      uint64_t v56 = v127;
      while (1)
      {
        int v57 = (char *)v54;
        if (v56 < v55)
        {
          uint64_t v58 = 0;
          uint64_t v59 = v55 - v56;
          while (1)
          {
            uint64_t v60 = *v56;
            if (!(*v56 & 0xFE | v58)) {
              break;
            }
            ++v56;
            uint64_t v58 = v60 & 0x80;
            if (!--v59)
            {
              char v54 = (unsigned __int8 *)&v127[v126];
              if (v52 != v53) {
                goto LABEL_93;
              }
              goto LABEL_102;
            }
          }
        }

        char v54 = (unsigned __int8 *)v56;
        if (v52 == v53)
        {
LABEL_102:
          uint64_t v51 = (_DWORD)v54 - (_DWORD)v57;
          goto LABEL_104;
        }

LABEL_98:
    uint64_t v7 = v56;
    v2 += v15;
    if (*(_DWORD *)(v3 + 24)) {
      goto LABEL_111;
    }
  }

      sub_1812A1948((uint64_t)a1);
      return v13;
    }

    if (*((_BYTE *)a1 + 17)) {
      goto LABEL_48;
    }
    int v16 = (*(uint64_t (**)(void, uint64_t))(*(void *)a1[9] + 56LL))(a1[9], 1LL);
    if ((_DWORD)v16 != 5) {
      break;
    }
    if (!((unsigned int (*)(void))a1[29])(a1[30]))
    {
      uint64_t v13 = 5LL;
      goto LABEL_98;
    }
  }

  uint64_t v13 = v16;
  if ((_DWORD)v16) {
    goto LABEL_97;
  }
  uint64_t v14 = *((unsigned __int8 *)a1 + 22);
LABEL_48:
  if (v14 == 5) {
    goto LABEL_156;
  }
  *((_BYTE *)a1 + 22) = 1;
LABEL_107:
  unsigned __int16 v28 = *a1;
  int v53 = 1;
  int v29 = *(void *)a1[10];
  if (!v29)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t, void, void, int *))(v28 + 56))(v28, a1[28], 0LL, &v53);
    if ((_DWORD)v30 || v53 == 0)
    {
      uint64_t v13 = v30;
      if ((_DWORD)v30) {
        goto LABEL_98;
      }
      goto LABEL_185;
    }
  }

  unsigned int v52 = 0;
  size_t v32 = (uint64_t *)(*(uint64_t (**)(void, int *))(*(void *)a1[9] + 72LL))(a1[9], &v52);
  if (v32 | v52)
  {
    uint64_t v13 = (uint64_t)v32;
    uint64_t v34 = 0;
    if ((_DWORD)v32) {
      goto LABEL_98;
    }
    goto LABEL_155;
  }

  uint64_t v35 = a1[43];
  if (v35 && (*(__int16 *)(v35 + 60) & 0x80000000) == 0 && (LODWORD(v35) = *(_DWORD *)(v35 + 92), (_DWORD)v35))
  {
LABEL_124:
    *((_DWORD *)a1 + 47) = v35;
  }

  else
  {
    size_t v32 = (uint64_t *)a1[9];
    uint64_t v35 = *v32;
    if (*v32)
    {
      char v54 = 0LL;
      size_t v32 = (uint64_t *)(*(uint64_t (**)(void))(v35 + 48))();
      if ((_DWORD)v32) {
        goto LABEL_195;
      }
      uint64_t v35 = (v54 + a1[25] - 1) / a1[25];
      goto LABEL_124;
    }

      if (v162 == 1)
      {
        uint64_t v77 = v170;
        uint64_t v78 = *(_DWORD *)(v23 + 144);
        if (*(_DWORD *)(v23 + 148) <= v78)
        {
          __int128 v80 = v167;
          sub_18131044C(v23, 30LL, v170, v167, v44, v30, v31, v32);
        }

        else
        {
          *(_DWORD *)(v23 + 144) = v78 + 1;
          __int128 v79 = *(void *)(v23 + 136) + 40LL * v78;
          *(_DWORD *)__int128 v79 = 30;
          *(_DWORD *)(v79 + 4) = v77;
          __int128 v80 = v167;
          *(_DWORD *)(v79 + 8) = v167;
          *(_DWORD *)(v79 + 12) = v44;
          *(void *)(v79 + 24) = 0LL;
          *(void *)(v79 + 32) = 0LL;
          *(void *)(v79 + 16) = 0LL;
        }

        __int128 v84 = v168;
        __int128 v117 = *(_DWORD *)(v23 + 144);
        __int128 v81 = v158;
        if (*(_DWORD *)(v23 + 148) > v117)
        {
          char v154 = *(_DWORD *)(v23 + 144);
          *(_DWORD *)(v23 + 144) = v117 + 1;
          __int128 v118 = *(void *)(v23 + 136) + 40LL * v117;
          *(_BYTE *)__int128 v118 = 9;
          *(_OWORD *)(v118 + 1) = 0u;
          *(_OWORD *)(v118 + 17) = 0u;
          *(void *)(v118 + 32) = 0LL;
          goto LABEL_162;
        }

        __int128 v85 = sub_18131044C(v23, 9LL, 0LL, 0LL, 0LL, v30, v31, v32);
      }

      else
      {
        __int128 v81 = v158;
        sub_1812B9B68((uint64_t *)v23, 96LL, v44, v158, 0LL, (uint64_t)v164, v158, v32);
        uint64_t v77 = v170;
        __int128 v80 = v167;
        __int128 v84 = v168;
        if (v167 == v168)
        {
          sub_1812DC7B4(v23, 28LL, v170, v167, v44, v158, v82, v83);
          LODWORD(v38) = v157;
          goto LABEL_208;
        }

        __int128 v85 = sub_1812DC7B4(v23, 29LL, v170, 0LL, v44, v158, v82, v83);
      }

      char v154 = v85;
LABEL_162:
      if (v81 == 1)
      {
        unsigned __int16 v27 = v172;
        if (v172) {
          sub_1813103F4(v23, 51LL, v172, v80, v29, v30, v31, v32);
        }
      }

      if ((_DWORD)v80 == v84) {
        sub_181319CC8(v23, v80, v27, v28, v29, v30, v31, v32);
      }
      if ((_DWORD)v64)
      {
        __int128 v119 = *(void *)(v23 + 24);
        unsigned __int16 v27 = ~(_DWORD)v64;
        if (*(_DWORD *)(v119 + 68) + *(_DWORD *)(v119 + 72) < 0) {
          sub_18131E420(v119, v23, v27);
        }
        else {
          *(_DWORD *)(*(void *)(v119 + 80) + 4LL * (int)v27) = *(_DWORD *)(v23 + 144);
        }
      }

      uint64_t v120 = *(_DWORD *)(v23 + 144);
      if (*(_DWORD *)(v23 + 148) <= v120)
      {
        int v155 = sub_18131044C(v23, 36LL, v77, v80, 0LL, v30, v31, v32);
      }

      else
      {
        int v155 = *(_DWORD *)(v23 + 144);
        *(_DWORD *)(v23 + 144) = v120 + 1;
        uint64_t v121 = *(void *)(v23 + 136) + 40LL * v120;
        *(_DWORD *)uint64_t v121 = 36;
        *(_DWORD *)(v121 + 4) = v77;
        *(_DWORD *)(v121 + 8) = v80;
        *(void *)(v121 + 12) = 0LL;
        *(void *)(v121 + 28) = 0LL;
        *(void *)(v121 + 20) = 0LL;
        *(_DWORD *)(v121 + 36) = 0;
      }

      int v122 = v165;
      if (v81 <= 1)
      {
        unsigned int v163 = v80;
        if (v81 < 1) {
          goto LABEL_199;
        }
      }

      else
      {
        unsigned int v163 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v163;
      }

      uint64_t v123 = v44;
      uint64_t v44 = v77;
      uint64_t v124 = 0LL;
      int v125 = v165 + 32;
      int v126 = 8LL;
      uint64_t v127 = v81;
      while (1)
      {
        if (*((_BYTE *)a1 + 31))
        {
          uint64_t v128 = *((_BYTE *)a1 + 31) - 1;
          *((_BYTE *)a1 + 31) = v128;
          uint64_t v129 = *((unsigned int *)a1 + v128 + 56);
        }

        else
        {
          uint64_t v129 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v129;
        }

        uint64_t v130 = *v122;
        uint64_t v131 = v130;
        if (v130 == 176) {
          uint64_t v131 = v122[2];
        }
        uint64_t v132 = (int **)(v165 + 32);
        if (v131 == 177) {
          goto LABEL_187;
        }
        __int16 v133 = v122;
        if (v131 == 138) {
          break;
        }
LABEL_192:
        char v138 = sub_181289D04((uint64_t)a1, v133, v27, v28, v29, v30, v31, v32);
        BOOL v139 = *(_DWORD *)(v23 + 144);
        if (*(_DWORD *)(v23 + 148) <= v139)
        {
          sub_18131044C(v23, 94LL, v44, v124, v129, v135, v136, v137);
        }

        else
        {
          *(_DWORD *)(v23 + 144) = v139 + 1;
          v140 = *(void *)(v23 + 136) + 40LL * v139;
          *(_DWORD *)v140 = 94;
          *(_DWORD *)(v140 + 4) = v44;
          *(_DWORD *)(v140 + 8) = v124;
          *(_DWORD *)(v140 + 12) = v129;
          *(void *)(v140 + 24) = 0LL;
          *(void *)(v140 + 32) = 0LL;
          *(void *)(v140 + 16) = 0LL;
        }

        sub_1812B9B68((uint64_t *)v23, 52LL, (v124 + v123), v163, v129, v138, 4294967294LL, v137);
        if ((_DWORD)v129)
        {
          v141 = *((unsigned __int8 *)a1 + 31);
          if (v141 <= 7)
          {
            *((_BYTE *)a1 + 31) = v141 + 1;
            *((_DWORD *)a1 + v141 + 56) = v129;
          }
        }

        ++v124;
        v126 += 24LL;
        int v122 = v165;
        if (v127 == v124)
        {
          __int128 v80 = v167;
          __int128 v81 = v158;
          uint64_t v77 = v44;
          LODWORD(v44) = v123;
LABEL_199:
          v142 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) <= v142)
          {
            sub_18131044C(v23, 9LL, 0LL, v168, 0LL, v30, v31, v32);
          }

          else
          {
            *(_DWORD *)(v23 + 144) = v142 + 1;
            uint64_t v143 = *(void *)(v23 + 136) + 40LL * v142;
            *(void *)uint64_t v143 = 9LL;
            *(_DWORD *)(v143 + 8) = v168;
            *(void *)(v143 + 12) = 0LL;
            *(void *)(v143 + 28) = 0LL;
            *(void *)(v143 + 20) = 0LL;
            *(_DWORD *)(v143 + 36) = 0;
          }

          if (v81 >= 2)
          {
            sub_18131B3E0(v23, v163);
            sub_1813103F4(v23, 39LL, v77, (v155 + 1), v144, v145, v146, v147);
            sub_1813103F4(v23, 9LL, 0LL, v80, v148, v149, v150, v151);
          }

          if (*(_BYTE *)(*(void *)v23 + 103LL)) {
            uint64_t v152 = &byte_18C550680;
          }
          else {
            uint64_t v152 = (char *)(*(void *)(v23 + 136) + 40LL * v154);
          }
          LODWORD(v38) = v157;
          *((_DWORD *)v152 + 2) = *(_DWORD *)(v23 + 144);
          goto LABEL_208;
        }
      }

      uint64_t v132 = (int **)(*v125 + 32LL);
LABEL_187:
      __int16 v133 = v122;
      if (**v132 >= 2)
      {
        if (v130 == 138 || (int v134 = v165 + 32, v122[2] == 138)) {
          int v134 = (void *)(*v125 + 32LL);
        }
        __int16 v133 = *(unsigned __int8 **)(*v134 + v126);
      }

      goto LABEL_192;
    }

    v50 |= v51;
    ++v49;
  }

  while (v49 < v48);
  uint64_t v58 = *(unsigned __int8 **)(*((void *)a2 + 9) + 72LL);
  if (!v58) {
    goto LABEL_129;
  }
LABEL_117:
  if (*v58 == 167 && (*((_DWORD *)v58 + 1) & 0x20) == 0)
  {
    unsigned int v61 = *((_DWORD *)v58 + 11);
    if (a1[2] == v61)
    {
      uint64_t v60 = 1LL;
    }

    else
    {
      int v62 = a1[1];
      uint64_t v63 = 0LL;
      __int128 v64 = v62 - 1;
      while (a1[v63 + 3] != v61)
      {
        if (v64 == ++v63) {
          goto LABEL_129;
        }
      }

      uint64_t v60 = 1LL << (v63 + 1);
    }
  }

  else
  {
    if ((*((_DWORD *)v58 + 1) & 0x810000) == 0)
    {
      uint64_t v60 = sub_181332EB0(a1);
      return v39 | v50 | v60 | v5;
    }

      if (v36 == (_DWORD)v42) {
LABEL_99:
      }
        sqlite3_result_int(a1, 1);
    }

    sub_1812CF36C(97953);
    uint64_t v39 = 0LL;
    goto LABEL_99;
  }

      if (++v47 == 8)
      {
LABEL_120:
        sub_181362330(a7, "unrecognized parameter: %s", v32);
        v231 = 1;
        uint64_t v30 = v227;
        goto LABEL_121;
      }
    }

      if (v49 < 0x80 || (v49 & 0xFFFFF800) == 0xD800)
      {
LABEL_106:
        uint64_t v49 = 65533;
        if (!v21) {
          goto LABEL_122;
        }
        goto LABEL_109;
      }
    }

    if (!v21) {
      goto LABEL_118;
    }
    if ((int)v49 <= 127)
    {
      if (v49 - 65 < 0x1A) {
        v49 += 32;
      }
      if (v49 <= 0x7F)
      {
LABEL_2:
        *uint64_t v37 = v49;
        uint64_t v11 = (_DWORD)v37 + 1;
        goto LABEL_3;
      }

      goto LABEL_119;
    }

    if (HIWORD(v49))
    {
      if (v49 - 66560 < 0x28) {
        v49 += 40;
      }
LABEL_125:
      *uint64_t v37 = (v49 >> 18) & 7 | 0xF0;
      v37[1] = (v49 >> 12) & 0x3F | 0x80;
      v37[2] = (v49 >> 6) & 0x3F | 0x80;
      uint64_t v11 = (_DWORD)v37 + 4;
      v37[3] = v49 & 0x3F | 0x80;
      goto LABEL_3;
    }

LABEL_106:
  int v41 = 18;
LABEL_108:
  *(_DWORD *)(v3 + 24) = v41;
  ++*(_DWORD *)(v3 + 48);
LABEL_111:
  while (1)
  {
    uint64_t v42 = (uint64_t)v57;
    if (v57 <= v59) {
      break;
    }
    v57 -= 12;
    sub_181279FFC(&v57, *(unsigned __int16 *)(v42 + 2), (uint64_t *)(v42 + 8));
  }

  if (!*(_BYTE *)(v4 + 103))
  {
    int v43 = *(_DWORD *)(v3 + 24);
    uint64_t v44 = *(const char **)(v3 + 8);
    if (!v44) {
      goto LABEL_116;
    }
    goto LABEL_128;
  }

  int v43 = 7;
  *(_DWORD *)(v3 + 24) = 7;
  uint64_t v44 = *(const char **)(v3 + 8);
  if (v44)
  {
LABEL_128:
    sqlite3_log(v43, "%s in %s", v44, *(const char **)(v3 + 336));
    uint64_t v45 = 1LL;
    goto LABEL_129;
  }

    if ((v104 & 0x2000) != 0 && v8[15 * v13 + 117]) {
      goto LABEL_115;
    }
LABEL_133:
    if (*v186 != 67)
    {
      int v99 = HIDWORD(v8[15 * v13 + 110]);
      uint64_t v130 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) > v130)
      {
        *(_DWORD *)(v10 + 144) = v130 + 1;
        uint64_t v129 = *(void *)(v10 + 136) + 40LL * v130;
        *(void *)uint64_t v129 = 9LL;
        goto LABEL_138;
      }

      uint64_t v131 = v10;
      uint64_t v132 = 9LL;
      uint64_t v127 = 0LL;
LABEL_141:
      sub_18131044C(v131, v132, v127, v99, 0LL, a6, a7, a8);
      goto LABEL_142;
    }

    int v126 = &v8[15 * v13];
    uint64_t v127 = *((unsigned int *)v126 + 231);
    int v99 = *((unsigned int *)v126 + 221);
    uint64_t v128 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v128)
    {
      uint64_t v131 = v10;
      uint64_t v132 = 10LL;
      goto LABEL_141;
    }

    *(_DWORD *)(v10 + 144) = v128 + 1;
    uint64_t v129 = *(void *)(v10 + 136) + 40LL * v128;
    *(_DWORD *)uint64_t v129 = 10;
    *(_DWORD *)(v129 + 4) = v127;
LABEL_138:
    *(_DWORD *)(v129 + 8) = v99;
    *(void *)(v129 + 12) = 0LL;
    *(void *)(v129 + 28) = 0LL;
    *(void *)(v129 + 20) = 0LL;
    *(_DWORD *)(v129 + 36) = 0;
LABEL_142:
    __int16 v133 = (uint64_t)v12;
    if (!*(_BYTE *)(*(void *)v10 + 103LL)) {
      __int16 v133 = *(void *)(v10 + 136) + 40LL * v105;
    }
    *(_DWORD *)(v133 + 8) = *(_DWORD *)(v10 + 144);
LABEL_4:
    uint64_t v11 = v13;
  }

  while (v87 > 1);
  v140 = *((unsigned __int8 *)v8 + 64);
  if (*((_BYTE *)v8 + 64))
  {
    v141 = 0;
    v142 = (uint64_t)(v8 + 107);
    do
    {
      if (*(void *)(v142 + 56))
      {
        sub_18133D940(v8, v141, v142, v99, a5, a6, a7, a8);
        v140 = *((unsigned __int8 *)v8 + 64);
      }

      else
      {
        if ((*(_WORD *)((_BYTE *)&v183[13 * *(unsigned __int8 *)(v142 + 64) + 8] + 5) & 0x20) != 0)
        {
          v147 = *(_DWORD *)(v142 + 32);
          v148 = v184[2];
          char v149 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v148 + 103LL)) {
            char v149 = (char *)(*(void *)(v148 + 136) + 40LL * v147);
          }
          int v150 = *(_DWORD *)(v148 + 144);
          if (*(_BYTE *)(*v184 + 103)) {
            uint64_t v151 = 1;
          }
          else {
            uint64_t v151 = v150 <= v147;
          }
          if (!v151)
          {
            uint64_t v152 = *(_DWORD *)(v142 + 4);
            v153 = v183[13 * *(unsigned __int8 *)(v142 + 64) + 8];
            char v154 = v150 - v147;
            int v155 = v149 + 8;
            do
            {
              if (*(v155 - 1) == v152)
              {
                uint64_t v156 = *((unsigned __int8 *)v155 - 8);
                if (v156 == 135)
                {
                  *((_BYTE *)v155 - 8) = 126;
                  *(v155 - 1) = 0;
                }

                else if (v156 == 94)
                {
                  *((_BYTE *)v155 - 8) = 80;
                  BOOL v157 = v155[1];
                  *(v155 - 1) = *v155 + v153;
                  *(void *)int v155 = v157;
                  *((_WORD *)v155 - 3) = 2;
                }
              }

              v155 += 10;
              --v154;
            }

            while (v154);
          }

          goto LABEL_156;
        }

        uint64_t v143 = v183[13 * *(unsigned __int8 *)(v142 + 64) + 5];
        uint64_t v144 = *(void *)(v142 + 96);
        char v145 = *(_DWORD *)(v144 + 48);
        if ((v145 & 0x240) != 0)
        {
          BOOL v146 = *(void *)(v144 + 32);
          if (!v146) {
            goto LABEL_156;
          }
        }

        else
        {
          if ((v145 & 0x2000) == 0) {
            goto LABEL_156;
          }
          BOOL v146 = *(void *)(v142 + 80);
          if (!v146) {
            goto LABEL_156;
          }
        }

        if (!*(_BYTE *)(v182 + 103))
        {
          char v158 = v180;
          if (*((_BYTE *)v8 + 66))
          {
            char v158 = v180;
            if ((*(_BYTE *)(*(void *)(v146 + 24) + 48LL) & 0x80) == 0) {
              char v158 = *((_DWORD *)v8 + 19);
            }
          }

          if ((*(_WORD *)(v146 + 99) & 0x800) != 0)
          {
            char v159 = v184[12];
            if (v159)
            {
              char v160 = *(_DWORD *)(v142 + 8);
              do
              {
                if (*(_DWORD *)(v159 + 12) == v160) {
                  *(void *)(v159 + 8) = -1LL;
                }
                char v159 = *(void *)(v159 + 24);
              }

              while (v159);
            }
          }

          unsigned int v161 = *(int *)(v142 + 32) + 1LL;
          int v162 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v10 + 103LL)) {
            int v162 = (char *)(*(void *)(v10 + 136) + 40 * v161);
          }
          unsigned int v163 = &v162[40 * (v158 - (int)v161)];
          uint64_t v164 = *(_DWORD *)(v142 + 4);
          do
          {
            if (*((_DWORD *)v162 + 1) == v164)
            {
              __int128 v165 = *v162;
              if (v165 == 20)
              {
                uint64_t v172 = *(_DWORD *)(v142 + 8);
LABEL_203:
                *((_DWORD *)v162 + 1) = v172;
                goto LABEL_191;
              }

              if (v165 != 135)
              {
                if (v165 != 94) {
                  goto LABEL_191;
                }
                __int128 v166 = *((int *)v162 + 2);
                __int128 v167 = *(_DWORD *)(v143 + 48);
                if ((v167 & 0x80) != 0)
                {
                  v173 = v143 + 16;
                  do
                  {
                    __int128 v168 = *(void *)v173;
                    v174 = *(_WORD *)(*(void *)v173 + 99LL) & 3;
                    v173 = *(void *)v173 + 40LL;
                  }

                  while (v174 != 2);
                  LOWORD(v168) = *(_WORD *)(*(void *)(v168 + 8) + 2 * v166);
                }

                else
                {
                  LOWORD(v168) = *((_DWORD *)v162 + 2);
                  if ((v166 & 0x8000) == 0 && (v167 & 0x20) != 0)
                  {
                    __int128 v169 = (unsigned __int16 *)(*(void *)(v143 + 8) + 14LL);
                    __int128 v170 = -1LL;
                    LODWORD(v168) = *((_DWORD *)v162 + 2);
                    do
                    {
                      int v171 = *v169;
                      v169 += 8;
                      LODWORD(v168) = ((v171 >> 5) & 1) + v168;
                      ++v170;
                    }

                    while (v170 < (__int16)v168);
                  }
                }

                if (!*(_WORD *)(v146 + 96)) {
                  goto LABEL_191;
                }
                v175 = 0LL;
                while (*(unsigned __int16 *)(*(void *)(v146 + 8) + 2 * v175) != (unsigned __int16)v168)
                {
                }

                if ((v175 & 0x8000) != 0) {
                  goto LABEL_191;
                }
                uint64_t v172 = *(_DWORD *)(v142 + 8);
                *((_DWORD *)v162 + 2) = v175;
                goto LABEL_203;
              }

              *((_DWORD *)v162 + 1) = *(_DWORD *)(v142 + 8);
              *int v162 = -114;
            }

      uint64_t result = sub_1813BBF04(a1, v43, a3);
      *(_DWORD *)(a1 + 100) = result;
      if (!(_DWORD)result)
      {
        char v54 = *(int *)(a1 + 8);
        *a2 = *(void *)(a1 + 16) + v54;
        *(_DWORD *)(a1 + 8) = *a3 + v54;
        goto LABEL_16;
      }

      break;
    }

    uint64_t v46 = *(_DWORD *)(a1 + 92);
    uint64_t v47 = *(void *)(a1 + 144);
    uint64_t v48 = *(int *)(a1 + 120);
    if (v46) {
      uint64_t v49 = v47 + 8 * v48;
    }
    else {
      uint64_t v49 = *(void *)(a1 + 144);
    }
    if (v46) {
      int v50 = *(void *)(a1 + 144);
    }
    else {
      int v50 = v47 + 8 * v48;
    }
    unsigned int v52 = v17 == 9 || v38 == 0;
    if (v17 != 18 && v52)
    {
      if (v38) {
        int v53 = *(void *)(a1 + 136);
      }
      else {
        int v53 = 0LL;
      }
      uint64_t result = sub_1813BC054(a1, v48, v53, v49, 0LL);
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result) {
        break;
      }
      BOOL v17 = *(_DWORD *)(a1 + 124);
    }

    if (v17 == 9
      || (uint64_t result = sub_1813BC054(a1, *(_DWORD *)(a1 + 120), 0LL, v50, &v94), (*(_DWORD *)(a1 + 100) = result) == 0))
    {
      uint64_t v55 = *(_DWORD *)(a1 + 88);
      if (v55)
      {
        uint64_t v56 = *(_DWORD *)(a1 + 124);
        goto LABEL_116;
      }

      uint64_t v56 = *(_DWORD *)(a1 + 124);
      if (!*(_DWORD *)(a1 + 92)) {
        goto LABEL_147;
      }
LABEL_116:
      if (v56 == 23)
      {
        int v57 = *(unsigned int *)(a1 + 120);
        if ((int)v57 >= 1)
        {
          for (unsigned int i = 0LL; v57 != i; ++i)
          {
            if (*(_BYTE *)(*(void *)(a1 + 136) + i))
            {
              *(void *)(*(void *)(a1 + 144) + 8 * i) = *(void *)(*(void *)(a1 + 144) + 8 * i + 8 * v57);
              uint64_t v59 = *(void *)(a1 + 144);
              if (!*(void *)(v59 + 8 * i))
              {
                uint64_t v37 = 234004;
                goto LABEL_104;
              }

              *(void *)(v59 + 8 * v57 + 8 * i) = 0LL;
            }
          }
        }

        uint64_t v56 = 23;
      }

      else
      {
        if (!*(_DWORD *)(a1 + 92)) {
          goto LABEL_146;
        }
        if (v56 == 18)
        {
          uint64_t v56 = 9;
        }

        else
        {
          if (v56 != 9) {
            goto LABEL_146;
          }
          uint64_t v56 = 18;
        }

        *(_DWORD *)(a1 + 124) = v56;
      }

        ++v61;
      }

      while (v61 < (__int16)v60);
    }

    uint64_t v65 = *(unsigned __int16 *)(i + 96);
    if (*(_WORD *)(i + 96))
    {
      __int128 v66 = 0LL;
      do
      {
        if ((*(__int16 *)(*(void *)(i + 8) - 2LL + 2 * v65) & 0x80000000) == 0)
        {
          __int128 v67 = *(unsigned __int16 *)(*(void *)(i + 8) - 2LL + 2 * v65);
          if (v67 <= 0x3E
            && (*(_WORD *)(*(void *)(*(void *)(i + 24) + 8LL) + 16 * v67 + 14) & 0x20) == 0)
          {
            v66 |= 1LL << v67;
          }
        }

        --v65;
      }

      while ((unint64_t)(v65 + 1) > 1);
    }

    else
    {
      __int128 v66 = 0LL;
    }

    *(void *)(i + 104) = ~v66;
  }

  return result;
}

  if ((_DWORD)v78)
  {
    __int128 v72 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v72)
    {
      sub_18131044C(v14, 9LL, 0LL, v78, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v72 + 1;
      __int128 v73 = *(void *)(v14 + 136) + 40LL * v72;
      *(void *)__int128 v73 = 9LL;
      *(_DWORD *)(v73 + 8) = v78;
      *(void *)(v73 + 12) = 0LL;
      *(void *)(v73 + 28) = 0LL;
      *(void *)(v73 + 20) = 0LL;
      *(_DWORD *)(v73 + 36) = 0;
    }
  }

  __int128 v74 = *(void *)(v14 + 24);
  __int128 v75 = -v80;
  if (*(_DWORD *)(v74 + 68) + *(_DWORD *)(v74 + 72) < 0) {
    sub_18131E420(v74, v14, v75);
  }
  else {
    *(_DWORD *)(*(void *)(v74 + 80) + 4LL * v75) = *(_DWORD *)(v14 + 144);
  }
  return v18;
}

            v26[v28] = 0;
            sqlite3_result_text(a3, v26, v28, sqlite3_free);
          }

          return;
        }

        if (a3)
        {
          uint64_t v13 = *(_DWORD *)(a2 + 4) - 2;
          uint64_t v14 = (char *)(*(void *)(a2 + 8) + 1LL);
LABEL_43:
          sub_1812D7A8C((uint64_t)a3, v14, v13, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          return;
        }
      }

      int v16 = 97498;
LABEL_53:
      sub_1812CF36C(v16);
      return;
    case 7:
    case 8:
      if (*(_BYTE *)(a1 + 51))
      {
        sqlite3_result_error_nomem(a3);
      }

      else if (!*(_BYTE *)(a1 + 50))
      {
        v43[0] = (unint64_t)a3;
        v43[1] = (unint64_t)v46;
        uint64_t v44 = xmmword_1813CDE10;
        uint64_t v45 = 1;
        sub_18135A944(a1, a2, v43);
        sub_18135B44C((uint64_t)v43);
        if (a3)
        {
          int v15 = *(void *)a3;
          *(_BYTE *)(v15 + 23) = 74;
          *(_WORD *)(v15 + 20) |= 0x800u;
        }

        else
        {
          sub_1812CF36C(97481);
        }
      }

      return;
    default:
      if (!a3)
      {
        int v16 = 97451;
        goto LABEL_53;
      }

      int v5 = *(void *)a3;
      if ((*(_WORD *)(*(void *)a3 + 20LL) & 0x9000) != 0)
      {
        sub_181303888((int *)v5);
        return;
      }

      uint64_t v39 = 1;
      goto LABEL_101;
  }

LABEL_116:
  uint64_t v45 = 0LL;
  if (v43 > 100)
  {
    if (v43 == 101) {
      goto LABEL_129;
    }
    if (v43 != 516) {
      goto LABEL_123;
    }
    uint64_t v46 = "abort due to ROLLBACK";
LABEL_127:
    uint64_t v44 = (const char *)sub_18127F588(v4, "%s", v9, v10, v11, v12, v13, v14, (char)v46);
    *(void *)(v3 + 8) = v44;
    int v43 = *(_DWORD *)(v3 + 24);
    goto LABEL_128;
  }

  if (v43)
  {
    if (v43 == 100)
    {
      uint64_t v46 = "another row available";
      goto LABEL_127;
    }

  if (!(_DWORD)v16 && !v17 && BYTE9(v76))
  {
    int v16 = 0LL;
    *a6 = *((void *)&v75 + 1);
    *a7 = v76;
    *((void *)&v75 + 1) = 0LL;
  }

    v7 += 64LL;
    if (v22 < 0x80) {
      goto LABEL_119;
    }
    int v50 = (v22 - 12) >> 1;
LABEL_120:
    v18 += v50;
    if (v18 > a1)
    {
LABEL_132:
      *((_BYTE *)a3 + 34) = 1;
      return *((char *)a3 + 30);
    }

    if (v22 < 0x80)
    {
      BOOL v20 = 1;
    }

    else
    {
      uint64_t v51 = v22;
      BOOL v20 = 1;
      do
      {
        unsigned int v52 = v51 >> 14;
        v51 >>= 7;
        ++v20;
      }

      while (v52);
    }

    v9 += v20;
    if (v9 >= v10)
    {
      uint64_t v56 = 96029;
LABEL_141:
      unsigned int v19 = 0LL;
      *uint64_t v58 = sub_1812FBF50(v56);
      return v19;
    }
  }

  if ((v21 & 8) != 0)
  {
    BOOL v22 = a2[v9];
    uint64_t v23 = v22 == 10;
    if (v22 >= 0xA)
    {
LABEL_136:
      if (v23) {
        unsigned int v19 = 0xFFFFFFFFLL;
      }
      else {
        unsigned int v19 = 1LL;
      }
      BOOL v22 = 7;
      goto LABEL_142;
    }

    if (!a2[v9]) {
      goto LABEL_134;
    }
    sub_18129BF0C(&a2[v18], a2[v9], (uint64_t)&v59);
    uint64_t v35 = *(double *)v7;
    if (v22 == 7)
    {
      v7 += 64LL;
      BOOL v22 = 7u;
LABEL_119:
      int v50 = byte_1813C6D70[v22];
      goto LABEL_120;
    }

    if (v35 < -9.22337204e18) {
      goto LABEL_133;
    }
    if (v35 > (double)(uint64_t)v59)
    {
LABEL_135:
      BOOL v22 = 7;
      unsigned int v19 = 0xFFFFFFFFLL;
      goto LABEL_142;
    }

    unsigned int v19 = v35 < (double)(uint64_t)v59;
    goto LABEL_115;
  }

  uint64_t v26 = &a2[v9];
  if ((v21 & 2) != 0)
  {
    BOOL v22 = *v26;
    if (*v26 < 0)
    {
      uint64_t v36 = v26[1];
      if (v26[1] < 0)
      {
        __int16 v38 = v26[2];
        if (v38 < 0)
        {
          sub_18129BD74(v26, &v64);
          BOOL v22 = v64;
          if (HIDWORD(v64))
          {
            BOOL v22 = -1;
            goto LABEL_95;
          }
        }

        else
        {
          BOOL v22 = v38 & 0x7F | (v22 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
        }
      }

      else
      {
        BOOL v22 = ((v22 & 0x7F) << 7) | v36;
      }
    }

    if (v22 < 0xC) {
      goto LABEL_134;
    }
    if ((v22 & 1) == 0) {
      goto LABEL_133;
    }
LABEL_95:
    LODWORD(v40) = (v22 - 12) >> 1;
    uint64_t v60 = v40;
    if (v40 + v18 > a1 || (int v41 = *a3, v11 >= *(unsigned __int16 *)(*a3 + 8)))
    {
      uint64_t v56 = 95955;
      goto LABEL_141;
    }

    uint64_t v42 = v41 + 8 * v11;
    uint64_t v44 = *(void *)(v42 + 32);
    int v43 = (uint64_t *)(v42 + 32);
    if (v44)
    {
      int v62 = *(_BYTE *)(v41 + 4);
      uint64_t v63 = *(void *)(v41 + 16);
      unsigned int v61 = 2;
      *((void *)&v59 + 1) = &a2[v18];
      unsigned int v19 = sub_181308A00(&v59, (__int128 *)v7, *v43, v58);
      if ((_DWORD)v19) {
        goto LABEL_142;
      }
      goto LABEL_116;
    }

    uint64_t v45 = *(_DWORD *)(v7 + 16);
    unsigned int v19 = (v40 - v45);
LABEL_114:
    uint64_t v49 = memcmp(&a2[v18], *(const void **)(v7 + 8), (int)v40);
    if ((_DWORD)v49)
    {
      BOOL v22 = 7;
      unsigned int v19 = v49;
      goto LABEL_142;
    }

      if (*(_BYTE *)(v16 + 1))
      {
        uint64_t v10 = a3 + 96;
      }

      else
      {
        uint64_t v10 = a3 + 96;
      }

LABEL_123:
    else {
      uint64_t v46 = off_189B6EC30[v43];
    }
    goto LABEL_127;
  }

                  __int128 v81 = *(void *)(v28 + 32 * v29 + 8);
                  if (*(_BYTE *)(v81 + 17))
                  {
                    ++*(_DWORD *)(v81 + 20);
                    if (!*(_BYTE *)(v81 + 18)) {
                      sub_1812FDE20(v81);
                    }
                  }

                  if (*(_BYTE *)(v81 + 17))
                  {
                    __int128 v82 = *(_DWORD *)(v81 + 20) - 1;
                    *(_DWORD *)(v81 + 20) = v82;
                    if (!v82) {
                      sub_1812FDEFC(v81);
                    }
                  }

                  goto LABEL_146;
                }

          uint64_t v23 = 0LL;
          goto LABEL_124;
        }

LABEL_129:
  *(void *)(v3 + 336) = v2;
  uint64_t v47 = *(void *)(v3 + 392);
  if (v47)
  {
    uint64_t v48 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_135;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v47);
    --qword_18C468B10;
    off_18C4653A8(v47);
    uint64_t v47 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v48 = &xmmword_18C465410;
LABEL_135:
      (*v48)(v47);
    }
  }

  uint64_t v49 = *(void *)(v3 + 344);
  if (v49)
  {
    if (!*(_BYTE *)(v3 + 302))
    {
      if (*(void *)(v4 + 816) || (int v50 = *(_DWORD *)(v49 + 44) - 1, (*(_DWORD *)(v49 + 44) = v50) == 0)) {
        sub_181311A80((void *)v4, (void *)v49);
      }
    }
  }

  uint64_t v51 = *(void *)(v3 + 360);
  unsigned int v52 = *(void **)(v3 + 320);
  if (v52) {
    sub_1813014B0((void *)v4, v52);
  }
  *(void *)(v4 + 344) = v7;
  return v45;
}

          uint64_t v24 = v167;
          if (v167 == v168 && v88 >= *v57 - 1LL)
          {
            if ((_DWORD)v44 == (_DWORD)v96) {
              v106 = 50LL;
            }
            else {
              v106 = 52LL;
            }
            sub_1812B9B68((uint64_t *)v23, v106, v44, v167, v96, v61, 4294967294LL, v95);
            v107 = *(_DWORD *)(v23 + 144);
            if (v107 < 1) {
              goto LABEL_110;
            }
            statfs v108 = *(_BYTE *)v164 | 0x10;
          }

          else
          {
            if ((_DWORD)v44 == (_DWORD)v96) {
              unsigned int v109 = 51LL;
            }
            else {
              unsigned int v109 = 53LL;
            }
            sub_1812B9B68((uint64_t *)v23, v109, v44, v166, v96, v61, 4294967294LL, v95);
            v107 = *(_DWORD *)(v23 + 144);
            if (v107 < 1) {
              goto LABEL_110;
            }
            statfs v108 = *(_BYTE *)v164;
          }

          *(_WORD *)(*(void *)(v23 + 136) + 40LL * (v107 - 1) + 2) = v108;
LABEL_110:
          if (++v88 >= *v57) {
            goto LABEL_143;
          }
        }

        *(_DWORD *)(v23 + 144) = v102 + 1;
        int v103 = *(void *)(v23 + 136) + 40LL * v102;
        *(_DWORD *)int v103 = 102;
        *(_DWORD *)(v103 + 4) = v63;
        *(_DWORD *)(v103 + 8) = v92;
        *(_DWORD *)(v103 + 12) = v63;
        *(void *)(v103 + 24) = 0LL;
        *(void *)(v103 + 32) = 0LL;
        *(void *)(v103 + 16) = 0LL;
LABEL_126:
        v104 = v169;
        if (!v169) {
          goto LABEL_129;
        }
        goto LABEL_127;
      }

      int v162 = v33;
      if ((_DWORD)v24 == v168)
      {
        LODWORD(v64) = 0;
        uint64_t v65 = v24;
      }

      else
      {
        __int128 v64 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v64;
        uint64_t v65 = v64;
      }

      if ((int)v158 >= 1)
      {
        __int128 v66 = 0LL;
        while (1)
        {
          __int128 v68 = *(unsigned __int8 **)(a2 + 16);
          __int128 v69 = *v68;
          __int128 v70 = v69;
          if (v69 == 176) {
            __int128 v70 = v68[2];
          }
          if (v70 == 138) {
            break;
          }
          if (v70 == 177)
          {
            __int128 v71 = (int **)(v68 + 32);
            goto LABEL_77;
          }

    uint64_t v60 = 0LL;
  }

  return v39 | v50 | v60 | v5;
}

uint64_t sub_18126F0AC(uint64_t a1)
{
  if ((unint64_t)(a1 - 2147483392) >= 0xFFFFFFFF80000101LL)
  {
    if (!dword_18C465380) {
      return qword_18C4653A0(a1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400();
    }
    uint64_t v3 = unk_18C4653C0(a1);
    uint64_t v4 = v3;
    if (qword_18C468B40 < a1) {
      qword_18C468B40 = a1;
    }
    if (*((uint64_t *)&xmmword_18C468B70 + 1) >= 1)
    {
      if (qword_18C468AC8 >= *((void *)&xmmword_18C468B70 + 1) - (int)v3)
      {
        dword_18C468B88 = 1;
        if ((void)xmmword_18C468B70)
        {
          xmmword_18C465410();
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400();
          }
        }

        if (qword_18C468B80 && qword_18C468AC8 >= qword_18C468B80 - (int)v4)
        {
          uint64_t v1 = 0LL;
          if (!(void)xmmword_18C468B70) {
            return v1;
          }
          goto LABEL_23;
        }
      }

      else
      {
        dword_18C468B88 = 0;
      }
    }

    uint64_t v6 = qword_18C4653A0(v4);
    uint64_t v1 = v6;
    if (v6)
    {
      uint64_t v7 = qword_18C468AC8 + (int)off_18C4653B8(v6);
      qword_18C468AC8 = v7;
      if (v7 > qword_18C468B18) {
        qword_18C468B18 = v7;
      }
      uint64_t v8 = qword_18C468B10;
      uint64_t v9 = ++qword_18C468B10;
      if (v8 >= qword_18C468B60) {
        qword_18C468B60 = v9;
      }
    }

    if (!(void)xmmword_18C468B70) {
      return v1;
    }
LABEL_23:
    xmmword_18C465410();
    return v1;
  }

  return 0LL;
}

uint64_t sub_18126F280(unsigned __int8 *a1, int *a2)
{
  int v2 = *a1;
  uint64_t v3 = 1LL;
  switch(*a1)
  {
    case 0u:
      uint64_t i = 0LL;
      int v22 = 184;
      goto LABEL_107;
    case 9u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
    case 0x20u:
      uint64_t i = 0LL;
      do
        char v18 = byte_1813C6558[a1[++i]];
      while ((v18 & 1) != 0);
      goto LABEL_36;
    case 0x21u:
      if (a1[1] == 61) {
        goto LABEL_67;
      }
      goto LABEL_68;
    case 0x22u:
    case 0x27u:
    case 0x60u:
      int v20 = a1[1];
      if (!a1[1])
      {
        uint64_t v21 = 1LL;
LABEL_126:
        *a2 = 184;
        return v21;
      }

      LODWORD(i) = 1;
      while (1)
      {
        if (v20 == v2)
        {
          uint64_t i = (int)i + 1LL;
          if (a1[i] != v2) {
            break;
          }
        }

        uint64_t v21 = (int)i + 1LL;
        int v20 = a1[v21];
        LODWORD(i) = i + 1;
        if (!a1[v21]) {
          goto LABEL_126;
        }
      }

      if (v2 != 39) {
        goto LABEL_106;
      }
      int v22 = 117;
      goto LABEL_107;
    case 0x23u:
    case 0x24u:
    case 0x3Au:
    case 0x40u:
      *a2 = 156;
      int v4 = a1[1];
      if (!a1[1])
      {
        uint64_t v6 = 1LL;
LABEL_109:
        *a2 = 184;
        return v6;
      }

      int v5 = 0;
      uint64_t v6 = 1LL;
      while (2)
      {
        if ((byte_1813C6558[v4] & 0x46) != 0)
        {
          ++v5;
          LODWORD(v7) = v6;
LABEL_5:
          uint64_t v6 = (int)v7 + 1LL;
          int v4 = a1[v6];
          if (!a1[v6]) {
            goto LABEL_11;
          }
          continue;
        }

        break;
      }

      if (v4 != 40 || v5 < 1)
      {
        if (v4 != 58 || (uint64_t v7 = (int)v6 + 1LL, a1[v7] != 58))
        {
LABEL_11:
          uint64_t i = v6;
          if (v5) {
            return i;
          }
          goto LABEL_109;
        }

        goto LABEL_5;
      }

      uint64_t i = (v6 + 1);
      uint64_t v48 = &a1[(int)v6 + 1];
      while (1)
      {
        uint64_t v49 = i;
        unsigned int v51 = *v48++;
        uint64_t v50 = v51;
        if (!v51) {
          break;
        }
        uint64_t i = (i + 1);
        if ((_DWORD)v50 == 41 || (byte_1813C6558[v50] & 1) != 0)
        {
          if ((_DWORD)v50 == 41) {
            return i;
          }
          break;
        }
      }

      *a2 = 184;
      return v49;
    case 0x25u:
      int v28 = 110;
      goto LABEL_136;
    case 0x26u:
      int v28 = 102;
      goto LABEL_136;
    case 0x28u:
      int v28 = 22;
      goto LABEL_136;
    case 0x29u:
      int v28 = 23;
      goto LABEL_136;
    case 0x2Au:
      int v28 = 108;
      goto LABEL_136;
    case 0x2Bu:
      int v28 = 106;
      goto LABEL_136;
    case 0x2Cu:
      int v28 = 25;
      goto LABEL_136;
    case 0x2Du:
      int v24 = a1[1];
      if (v24 == 62)
      {
        *a2 = 112;
        if (a1[2] == 62) {
          return 3LL;
        }
        else {
          return 2LL;
        }
      }

      if (v24 != 45)
      {
        int v28 = 107;
        goto LABEL_136;
      }

      for (uint64_t i = 2LL; a1[i] && a1[i] != 10; ++i)
        ;
LABEL_36:
      int v19 = 183;
      goto LABEL_142;
    case 0x2Eu:
      int v28 = 141;
      goto LABEL_136;
    case 0x2Fu:
      if (a1[1] != 42 || !a1[2])
      {
        int v28 = 109;
        goto LABEL_136;
      }

      int v29 = a1[3];
      if (a1[2] == 42 && v29 == 47)
      {
        uint64_t i = 4LL;
        int v22 = 183;
        goto LABEL_107;
      }

      uint64_t v53 = 0LL;
      while (v29)
      {
        int v54 = a1[v53++ + 4];
        BOOL v12 = v29 == 42;
        int v29 = v54;
        if (v12)
        {
          int v29 = v54;
          if (v54 == 47)
          {
            uint64_t i = (v53 + 4);
            int v22 = 183;
LABEL_107:
            *a2 = v22;
            return i;
          }
        }
      }

      uint64_t i = (v53 + 3);
      int v22 = 183;
      goto LABEL_107;
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
LABEL_85:
      *a2 = 155;
      if (*a1 == 48 && (a1[1] | 0x20) == 0x78 && (byte_1813C6558[a1[2]] & 8) != 0)
      {
        uint64_t v46 = 3LL;
        do
          char v47 = byte_1813C6558[a1[v46++]];
        while ((v47 & 8) != 0);
        return (v46 - 1);
      }

      uint64_t v30 = 0LL;
      do
        uint64_t v31 = a1[v30++];
      while ((unint64_t)(v31 - 58) > 0xFFFFFFFFFFFFFFF5LL);
      if ((_DWORD)v31 == 46)
      {
        do
          unint64_t v32 = a1[v30++] - 58LL;
        while (v32 > 0xFFFFFFFFFFFFFFF5LL);
        *a2 = 153;
      }

      uint64_t v33 = v30 - 1;
      uint64_t i = (int)v33;
      int v34 = a1[(int)v33];
      if ((v34 | 0x20) != 0x65) {
        goto LABEL_120;
      }
      uint64_t v35 = v33 << 32;
      uint64_t v36 = a1[((v33 << 32) + 0x100000000LL) >> 32];
      if ((unint64_t)(v36 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
      {
        uint64_t v37 = (v35 + 0x200000000LL) >> 32;
      }

      else
      {
        if ((_DWORD)v36 != 45 && (_DWORD)v36 != 43) {
          goto LABEL_120;
        }
        uint64_t v37 = (v35 + 0x200000000LL) >> 32;
      }

      uint64_t v41 = (v37 << 32) - 0x100000000LL;
      do
      {
        unint64_t v42 = a1[v37++] - 58LL;
        v41 += 0x100000000LL;
      }

      while (v42 > 0xFFFFFFFFFFFFFFF5LL);
      *a2 = 153;
      uint64_t i = v41 >> 32;
      int v34 = a1[v41 >> 32];
      uint64_t v33 = v37 - 1;
LABEL_120:
      if ((byte_1813C6558[v34] & 0x46) == 0) {
        return v33;
      }
      int v43 = &a1[i + 1];
      do
      {
        *a2 = 184;
        int v44 = *v43++;
        uint64_t i = (i + 1);
      }

      while ((byte_1813C6558[v44] & 0x46) != 0);
      return i;
    case 0x3Bu:
      uint64_t i = 1LL;
      *a2 = 1;
      return i;
    case 0x3Cu:
      int v26 = a1[1];
      switch(v26)
      {
        case '<':
          int v23 = 104;
          goto LABEL_134;
        case '>':
LABEL_67:
          int v23 = 52;
          goto LABEL_134;
        case '=':
          int v23 = 55;
          goto LABEL_134;
      }

      int v28 = 56;
      goto LABEL_136;
    case 0x3Du:
      *a2 = 53;
      if (a1[1] == 61) {
        return 2LL;
      }
      else {
        return 1LL;
      }
    case 0x3Eu:
      int v27 = a1[1];
      if (v27 == 62)
      {
        int v23 = 105;
        goto LABEL_134;
      }

      if (v27 == 61)
      {
        int v23 = 57;
        goto LABEL_134;
      }

      int v28 = 54;
      goto LABEL_136;
    case 0x3Fu:
      uint64_t i = 0LL;
      *a2 = 156;
      do
        unint64_t v17 = a1[++i] - 58LL;
      while (v17 >= 0xFFFFFFFFFFFFFFF6LL);
      return i;
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
      if (byte_1813C6ED0[a1[1]] > 2u) {
        goto LABEL_103;
      }
      uint64_t v14 = 0x200000000LL;
      uint64_t v15 = 2LL;
      do
      {
        uint64_t v16 = a1[v15++];
        v14 += 0x100000000LL;
      }

      while (byte_1813C6ED0[v16] < 3u);
      if ((byte_1813C6558[v16] & 0x46) != 0)
      {
        uint64_t v3 = v14 >> 32;
        goto LABEL_104;
      }

      uint64_t i = (v15 - 1);
      *a2 = 59;
      sub_1813102D8(a1, i, a2);
      return i;
    case 0x58u:
    case 0x78u:
      if (a1[1] != 39) {
        goto LABEL_103;
      }
      *a2 = 154;
      uint64_t v9 = 2LL;
      do
        uint64_t v10 = a1[v9++];
      while ((byte_1813C6558[v10] & 8) != 0);
      uint64_t v11 = v9 - 1;
      BOOL v12 = (_DWORD)v10 == 39 && (v11 & 1) == 0;
      if (!v12)
      {
        *a2 = 184;
        for (int j = a1[v11]; a1[v11]; int j = a1[v11])
        {
          if (j == 39) {
            break;
          }
          ++v11;
        }
      }

      else {
        return v11;
      }
    case 0x59u:
    case 0x5Au:
    case 0x5Fu:
    case 0x79u:
    case 0x7Au:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xF0u:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
    case 0xFEu:
    case 0xFFu:
      goto LABEL_104;
    case 0x5Bu:
      if (v2 == 93)
      {
        int v19 = 59;
        uint64_t i = 1LL;
        goto LABEL_142;
      }

      uint64_t i = 1LL;
      while (1)
      {
        int v40 = a1[i];
        if (!a1[i]) {
          break;
        }
        ++i;
        if (v40 == 93)
        {
          int v19 = 59;
LABEL_142:
          *a2 = v19;
          return i;
        }
      }

      int v19 = 184;
      goto LABEL_142;
    case 0x7Cu:
      if (a1[1] == 124)
      {
        int v23 = 111;
LABEL_134:
        *a2 = v23;
        return 2LL;
      }

      else
      {
        int v28 = 103;
LABEL_136:
        *a2 = v28;
        return 1LL;
      }

    case 0x7Eu:
      int v28 = 114;
      goto LABEL_136;
    case 0xEFu:
      if (a1[1] == 187 && a1[2] == 191)
      {
        *a2 = 183;
        return 3LL;
      }

LABEL_103:
      uint64_t v3 = 1LL;
LABEL_104:
      LODWORD(i) = v3 - 1;
      __int16 v38 = &a1[v3];
      do
      {
        int v39 = *v38++;
        uint64_t i = (i + 1);
      }

      while ((byte_1813C6558[v39] & 0x46) != 0);
LABEL_106:
      int v22 = 59;
      goto LABEL_107;
    default:
LABEL_68:
      int v28 = 184;
      goto LABEL_136;
  }

    __int128 v68 = *(unsigned int *)(*(void *)&v126[v62] + 48LL);
    uint64_t v129 = v63;
    else {
      __int128 v69 = *(unsigned __int8 *)(*(void *)(v27 + 8) + 16 * v68 + 9);
    }
    __int128 v70 = sub_1812A3C7C(v66);
    if ((char)v69 < 65 || v70 < 65)
    {
      if (v70 >= 65) {
        __int128 v74 = v70;
      }
      else {
        __int128 v74 = v69;
      }
      __int128 v72 = v74 | 0x40;
      uint64_t v50 = v123;
      unsigned int v61 = v120;
      __int128 v73 = v129;
    }

    else
    {
      else {
        __int128 v72 = 65;
      }
      uint64_t v50 = v123;
      unsigned int v61 = v120;
      __int128 v73 = v129;
    }

    __int128 v76 = (v72 - 65) < 2 || (char)v69 > 66;
    int v27 = v121;
    if (v73 >= v50) {
      break;
    }
    v62 += 6LL;
    uint64_t v63 = v73 + 1;
  }

  while (v76);
  if (!v76) {
    goto LABEL_38;
  }
LABEL_129:
  uint64_t v77 = *(void *)(v27 + 16);
  if (!v77) {
    goto LABEL_38;
  }
  int v122 = ~(-1LL << v50);
  while (1)
  {
    __int128 v79 = *(unsigned __int16 *)(v77 + 96);
    if ((int)v50 <= v79)
    {
      __int128 v80 = v79 <= 0x3E && *(void *)(v77 + 72) == 0LL;
      if (v80
        && ((v11 & 4) == 0 || (int)v50 >= *(unsigned __int16 *)(v77 + 94) && ((int)v50 >= v79 || *(_BYTE *)(v77 + 98))))
      {
        int v125 = v77;
        if ((int)v50 >= 1)
        {
          __int128 v81 = 0LL;
          uint64_t v78 = 0LL;
          while (1)
          {
            __int128 v82 = *(unsigned __int8 **)(a2 + 16);
            __int128 v83 = *v82;
            __int128 v84 = v83;
            if (v83 == 176) {
              __int128 v84 = v82[2];
            }
            uint64_t v130 = v78;
            if (v84 == 138)
            {
              __int128 v85 = (int **)(*((void *)v82 + 4) + 32LL);
            }

            else
            {
              if (v84 != 177) {
                goto LABEL_159;
              }
              __int128 v85 = (int **)(v82 + 32);
            }

            if (**v85 >= 2)
            {
              if (v83 == 138 || v82[2] == 138) {
                __int128 v86 = (void *)(*((void *)v82 + 4) + 32LL);
              }
              else {
                __int128 v86 = v82 + 32;
              }
              __int128 v82 = *(unsigned __int8 **)(*v86 + 24 * v81 + 8);
            }

      sub_1812CF36C(91138);
      goto LABEL_111;
    }

    uint64_t v60 = *(unsigned __int8 **)(v58 + 8);
    unsigned int v61 = *(_WORD *)(v58 + 20);
    if ((v61 & 2) == 0) {
      goto LABEL_100;
    }
LABEL_105:
    int v62 = v61 & 0x11;
    if (*(_BYTE *)(v58 + 22) == 1 || v62 != 0) {
      goto LABEL_111;
    }
LABEL_110:
    sub_181303970(v58, 1);
LABEL_111:
    if (!v60) {
      return 1LL;
    }
    __int128 v64 = *v60;
    switch(byte_1813C6343[*v60])
    {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t v65 = 1LL;
        while (2)
        {
          __int128 v67 = v60[v65];
          if (!v60[v65] || (_DWORD)v67 == 58 || (byte_1813C6558[v67] & 1) != 0) {
            break;
          }
          if ((_DWORD)v67 != 45) {
            goto LABEL_116;
          }
          if ((_DWORD)v65 == 6)
          {
            __int128 v66 = sub_181356430(v60 + 1, "50f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v160);
            goto LABEL_115;
          }

          if ((_DWORD)v65 != 5) {
            goto LABEL_116;
          }
          __int128 v66 = sub_181356430(v60 + 1, "40f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v160);
LABEL_115:
          if (v66 != 1)
          {
LABEL_116:
            ++v65;
            continue;
          }

          break;
        }

        __int128 v68 = 1;
        if (v60[v65] != 45)
        {
          __int128 v69 = v60;
          goto LABEL_132;
        }

        if (v64 != 45 && v64 != 43) {
          goto LABEL_286;
        }
        if ((_DWORD)v65 == 5)
        {
        }

        else
        {
          __int128 v76 = sub_181356430(++v60, "50f-20a-20d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v160);
          if (v76 != 3) {
            goto LABEL_286;
          }
        }

        if (v159 > 11 || v158 > 30) {
          goto LABEL_286;
        }
        sub_1812C6F8C(a4);
        if (!*(_BYTE *)(a4 + 43))
        {
          sub_181355F7C(a4);
          uint64_t v77 = (*(void *)a4 + 43200000LL) % 86400000;
          *(double *)(a4 + 32) = (double)(v77 % 60000) / 1000.0;
          uint64_t v78 = (34953 * (__int16)(v77 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v77 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v77 / 60000
                                         - 60 * ((v78 >> 5) + ((unsigned __int16)(v78 & 0x8000) >> 15)));
          *(_BYTE *)(a4 + 41) = 0;
          *(_BYTE *)(a4 + 43) = 1;
        }

        *(_BYTE *)(a4 + 40) = 0;
        __int128 v80 = *(_DWORD *)(a4 + 8);
        __int128 v79 = *(_DWORD *)(a4 + 12);
        if (v64 == 45)
        {
          __int128 v81 = v80 - v160;
          __int128 v82 = v79 - v159;
          char v158 = -v158;
        }

        else
        {
          __int128 v81 = v80 + v160;
          __int128 v82 = v79 + v159;
        }

        if (v82 < 1) {
          int v125 = -((12 - v82) / 0xCu);
        }
        else {
          int v125 = (v82 - 1) / 0xCu;
        }
        *(_DWORD *)(a4 + 8) = v125 + v81;
        *(_DWORD *)(a4 + 12) = v82 - 12 * v125;
        sub_181355F7C(a4);
        *(_WORD *)(a4 + 42) = 0;
        *(void *)a4 += 86400000LL * v158;
        if (!v60[11])
        {
          __int128 v68 = 0;
          goto LABEL_286;
        }

        if ((byte_1813C6558[v60[11]] & 1) == 0) {
          goto LABEL_286;
        }
        __int128 v69 = v60 + 12;
        LODWORD(v65) = 2;
LABEL_132:
        if (v69[v65] == 58)
        {
          __int128 v70 = *v69 - 58LL;
          memset(&v161[16], 0, 32);
          if (v70 < 0xFFFFFFFFFFFFFFF6LL) {
            __int128 v71 = v69 + 1;
          }
          else {
            __int128 v71 = v69;
          }
          *(_OWORD *)unsigned int v161 = 0uLL;
          if (!sub_181356258(v71, (uint64_t)v161, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            sub_181355F7C((uint64_t)v161);
            if (v64 == 45) {
              __int128 v72 = -((*(void *)v161 - 43200000LL) % 86400000);
            }
            else {
              __int128 v72 = (*(void *)v161 - 43200000LL) % 86400000;
            }
            sub_181355F7C(a4);
            __int128 v68 = 0;
            *(_WORD *)(a4 + 42) = 0;
            *(_BYTE *)(a4 + 44) = 0;
            *(void *)a4 += v72;
            goto LABEL_286;
          }

        if (!*(_BYTE *)(v26 + 63)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v26 + 8) + 112LL))( *(void *)(v26 + 8),  1LL,  1LL,  9LL);
        }
        goto LABEL_105;
      }

      uint64_t v36 = sub_18126F0AC(v31);
      int v34 = (const void *)v36;
      uint64_t v35 = v36 == 0;
      if (v30 && v36)
      {
        *(_BYTE *)(v26 + 65) = 1;
        uint64_t v37 = *(int *)(v26 + 56);
        int v24 = (*(uint64_t (**)(void, int64_t *))(**(void **)(v26 + 8) + 48LL))( *(void *)(v26 + 8),  &v52);
        if (!v24)
        {
          __int16 v38 = **(void **)(v26 + 48);
          LODWORD(v39) = *(_DWORD *)(v38 + 128);
          uint64_t v49 = v38;
          if (v39 > *(_DWORD *)(v38 + 96))
          {
            while (1)
            {
              int v40 = ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021LL) >> 12;
              if (*(_DWORD *)(v26 + 40) > (int)v40
                && (uint64_t v41 = *(void *)(*(void *)(v26 + 48) + 8LL * (int)v40), (v50 = v41) != 0))
              {
                int v24 = 0;
              }

              else
              {
                unint64_t v42 = sub_1812FC4E0(v26, ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021LL) >> 12, &v50);
                int v24 = v42;
                uint64_t v41 = v50;
                if (!v50)
                {
                  if (v42 <= 1) {
                    int v24 = 1;
                  }
                  else {
                    int v24 = v42;
                  }
                  break;
                }
              }

              if ((_DWORD)v40)
              {
                int v43 = ((_DWORD)v40 << 12) - 34;
              }

              else
              {
                int v43 = 0;
                v41 += 136LL;
                uint64_t v50 = v41;
              }

              unsigned int v51 = v43;
              if (v24) {
                break;
              }
              int v39 = (v39 - 1);
              int v44 = (*(_DWORD *)(v41 + 4LL * (v39 - v43)) - 1) * v37;
              if ((uint64_t)(v44 + v37) <= v52)
              {
                uint64_t v45 = (*(uint64_t (**)(void, const void *, size_t, size_t))(**(void **)(v26 + 16) + 16LL))( *(void *)(v26 + 16),  v30,  v37,  v39 * (v37 + 24) + 56);
                if (v45
                  || (uint64_t v45 = (*(uint64_t (**)(void, const void *, size_t, size_t))(**(void **)(v26 + 8)
                                                                                            + 16LL))( *(void *)(v26 + 8),  v34,  v37,  v44)) != 0)
                {
                  int v24 = v45;
                  break;
                }

                if (!memcmp(v30, v34, v37))
                {
LABEL_82:
                  int v24 = 0;
                  break;
                }
              }

              *(_DWORD *)(v49 + 128) = v39;
            }
          }
        }

        uint64_t v35 = 0;
        *(_BYTE *)(v26 + 65) = 0;
LABEL_90:
        uint64_t v46 = (void (**)(const void *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v30);
          --qword_18C468B10;
          off_18C4653A8(v30);
          uint64_t v30 = (const void *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v46 = (void (**)(const void *))&xmmword_18C465410;
            goto LABEL_95;
          }
        }

        else
        {
LABEL_95:
          (*v46)(v30);
        }
      }

      else
      {
        int v24 = 7;
        if (v30) {
          goto LABEL_90;
        }
      }

      if (v35) {
        goto LABEL_103;
      }
      char v47 = (void (**)(const void *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v34);
        --qword_18C468B10;
        off_18C4653A8(v34);
        int v34 = (const void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_103;
        }
        char v47 = (void (**)(const void *))&xmmword_18C465410;
      }

      (*v47)(v34);
      goto LABEL_103;
    }

                                  *(_DWORD *)(v24 + 4LL * *(int *)(a1 + 48)) += v49;
                                  unint64_t v42 = *(_DWORD *)(a1 + 48);
LABEL_104:
                                  uint64_t v50 = v43 + 2;
                                  ++v43;
                                  ++v45;
                                }

                                while (v50 <= v42);
                              }

                              uint64_t v41 = 0;
                            }

  sqlite3_exec(v4, "RELEASE changeset", 0LL, 0LL, 0LL);
  if (!v4)
  {
    uint64_t v55 = "NULL";
    goto LABEL_112;
  }

  int v54 = *((unsigned __int8 *)v4 + 113);
  if (v54 == 186) {
    goto LABEL_107;
  }
  if (v54 == 118)
  {
    uint64_t v56 = *((void *)v4 + 3);
    if (v56) {
      xmmword_18C465410(v56);
    }
  }

  else
  {
    if (v54 == 109) {
LABEL_107:
    }
      uint64_t v55 = "unopened";
    else {
      uint64_t v55 = "invalid";
    }
LABEL_112:
    sqlite3_log(21, "API call with %s database connection pointer", v55);
    sub_1812CF36C(186024);
  }

  return v5;
}

uint64_t sub_18126F978( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  uint64_t v10 = *a1;
  switch((int)a2)
  {
    case 0:
      if (!a5[41]) {
        *((_BYTE *)a5 + 301) = 1;
      }
      goto LABEL_445;
    case 1:
      if (!a5[41]) {
        *((_BYTE *)a5 + 301) = 2;
      }
      goto LABEL_445;
    case 2:
      sub_181279478((uint64_t)a5, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 3:
      sub_1812A5200((uint64_t *)a5, *(unsigned int *)(v10 - 16), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 4:
      *(_DWORD *)(v10 + 32) = 7;
      goto LABEL_445;
    case 5:
    case 6:
    case 7:
    case 89:
    case 91:
    case 319:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      goto LABEL_445;
    case 8:
    case 9:
      sub_181312FB0((uint64_t *)a5, *(unsigned __int16 *)(v10 - 22), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 10:
      sub_1813130EC((uint64_t *)a5, 0LL, v10 + 8);
      goto LABEL_445;
    case 11:
      sub_1813130EC((uint64_t *)a5, 1LL, v10 + 8);
      goto LABEL_445;
    case 12:
      sub_1813130EC((uint64_t *)a5, 2LL, v10 + 8);
      goto LABEL_445;
    case 13:
      sub_1812778D4( (uint64_t)a5,  (_OWORD *)(v10 - 16),  v10 + 8,  *(unsigned int *)(v10 - 88),  0LL,  0LL,  *(unsigned int *)(v10 - 40),  a8,  v257);
      goto LABEL_445;
    case 14:
      uint64_t v24 = (uint64_t)*a5;
      ++*((_BYTE *)a5 + 36);
      ++*(_DWORD *)(v24 + 432);
      *(_WORD *)(v24 + 436) = 0;
      goto LABEL_445;
    case 15:
    case 18:
    case 21:
    case 47:
    case 49:
    case 62:
    case 72:
    case 81:
    case 98:
    case 242:
      *(_DWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 16:
      *(_DWORD *)(v10 - 40) = 1;
      goto LABEL_445;
    case 17:
      *(_DWORD *)(v10 + 8) = *((_BYTE *)*a5 + 197) == 0;
      goto LABEL_445;
    case 19:
      sub_1812788C8((uint64_t)a5, (void *)(v10 - 40), v10 - 16, *(unsigned int *)(v10 + 8), 0LL, a6, a7, a8, v257);
      goto LABEL_445;
    case 20:
      sub_1812788C8((uint64_t)a5, 0LL, 0LL, 0LL, *(void *)(v10 + 8), a6, a7, a8, v257);
      uint64_t v25 = *(void *)(v10 + 8);
      if (v25) {
        goto LABEL_111;
      }
      goto LABEL_445;
    case 22:
      *(_DWORD *)(v10 - 40) |= *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 23:
      int v26 = *(_DWORD *)(v10 + 16);
      if (v26 != 5) {
        goto LABEL_54;
      }
      if (sqlite3_strnicmp(*(const char **)(v10 + 8), "rowid", 5))
      {
        int v26 = *(_DWORD *)(v10 + 16);
LABEL_54:
        *(_DWORD *)(v10 - 16) = 0;
        sub_1812DC47C((uint64_t)a5, "unknown table option: %.*s", a3, a4, (uint64_t)a5, a6, a7, a8, v26);
      }

      else
      {
        *(_DWORD *)(v10 - 16) = 640;
      }

      goto LABEL_445;
    case 24:
      int v27 = *(_DWORD *)(v10 + 16);
      if (v27 != 6) {
        goto LABEL_58;
      }
      if (sqlite3_strnicmp(*(const char **)(v10 + 8), "strict", 6))
      {
        int v27 = *(_DWORD *)(v10 + 16);
LABEL_58:
        sub_1812DC47C((uint64_t)a5, "unknown table option: %.*s", a3, a4, (uint64_t)a5, a6, a7, a8, v27);
        *(_DWORD *)(v10 + 8) = 0;
      }

      else
      {
        *(_DWORD *)(v10 + 8) = 0x10000;
      }

      goto LABEL_445;
    case 25:
      sub_181277FE8( (uint64_t)a5,  *(unsigned __int8 **)(v10 - 16),  *(void *)(v10 - 8),  *(unsigned __int8 **)(v10 + 8),  *(void *)(v10 + 16),  a6,  a7,  a8);
      goto LABEL_445;
    case 26:
    case 65:
    case 104:
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 32) = 0LL;
      goto LABEL_445;
    case 27:
      *(_DWORD *)(v10 - 56) = *(_DWORD *)(v10 + 8) + *(_DWORD *)(v10 + 16) - *(_DWORD *)(v10 - 64);
      goto LABEL_445;
    case 28:
      *(_DWORD *)(v10 - 104) = *(_DWORD *)(v10 + 8) + *(_DWORD *)(v10 + 16) - *(_DWORD *)(v10 - 112);
      goto LABEL_445;
    case 29:
      *(_DWORD *)(v10 - 8) = *(_DWORD *)(v10 + 16) + *(_DWORD *)(v10 + 8) - *(_DWORD *)(v10 - 16);
      goto LABEL_445;
    case 30:
      *(void *)(v10 + 32) = a3;
      goto LABEL_445;
    case 31:
      *(void *)(v10 + 32) = a3;
      *(void *)(v10 + 40) = a4;
      goto LABEL_445;
    case 32:
    case 67:
      *(_OWORD *)(a5 + 13) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 33:
      int v28 = *(unsigned __int8 **)(v10 + 8);
      uint64_t v29 = *(void *)(v10 - 16);
      uint64_t v30 = v29 + *(unsigned int *)(v10 - 8);
      goto LABEL_70;
    case 34:
      int v28 = *(unsigned __int8 **)(v10 - 16);
      uint64_t v29 = *(void *)(v10 - 40) + 1LL;
      uint64_t v30 = *(void *)(v10 + 8);
      goto LABEL_70;
    case 35:
      int v28 = *(unsigned __int8 **)(v10 + 8);
      goto LABEL_69;
    case 36:
      int v28 = (unsigned __int8 *)sub_1813132BC((uint64_t *)a5, 173, *(void *)(v10 + 8), 0LL);
LABEL_69:
      uint64_t v29 = *(void *)(v10 - 40);
      uint64_t v30 = *(void *)(v10 - 16) + *(unsigned int *)(v10 - 8);
LABEL_70:
      sub_18129C570((uint64_t)a5, v28, v29, v30, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 37:
      uint64_t v31 = sub_1813133E8((uint64_t)a5, 117, *(const void **)(v10 + 8), *(void *)(v10 + 16));
      uint64_t v36 = (unsigned __int8 *)v31;
      if (v31) {
        sub_181313558(v31);
      }
      sub_18129C570( (uint64_t)a5,  v36,  *(void *)(v10 + 8),  *(void *)(v10 + 8) + *(unsigned int *)(v10 + 16),  v32,  v33,  v34,  v35);
      goto LABEL_445;
    case 38:
      sub_181313610((uint64_t)a5, *(_DWORD *)(v10 + 8));
      goto LABEL_445;
    case 39:
      sub_18129C170( a5,  0LL,  *(unsigned int *)(v10 - 16),  *(unsigned int *)(v10 + 8),  *(unsigned int *)(v10 - 40),  a6,  a7,  a8);
      goto LABEL_445;
    case 40:
      sub_18129D098(a5, 0LL, 0LL, 0LL, 0LL, *(unsigned int *)(v10 + 8), 0LL, 0LL, 0, 0, 1u);
      goto LABEL_445;
    case 41:
      uint64_t v37 = *(unsigned __int8 **)(v10 - 16);
      uint64_t v38 = *(void *)(v10 - 40);
      uint64_t v39 = *(void *)(v10 + 8);
      goto LABEL_100;
    case 42:
      sub_1812B177C(a5, 0LL, v10 - 40, *(void **)(v10 - 16), *(unsigned int *)(v10 + 8), a6, a7, a8);
      goto LABEL_445;
    case 43:
      int v40 = a5[43];
      if (!v40) {
        goto LABEL_445;
      }
      goto LABEL_102;
    case 44:
      sub_1813137D8((uint64_t *)a5, v10 + 8);
      goto LABEL_445;
    case 45:
      sub_1813139A4((uint64_t *)a5, *(unsigned __int8 **)(v10 - 16), 0LL, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 46:
      sub_1813139A4((uint64_t *)a5, *(unsigned __int8 **)(v10 - 40), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 48:
    case 96:
    case 122:
    case 137:
      *(_DWORD *)(v10 + 8) = 1;
      goto LABEL_445;
    case 50:
      *(_DWORD *)(v10 - 16) = *(_DWORD *)(v10 - 16) & ~*(_DWORD *)(v10 + 12) | *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 51:
      *(void *)(v10 - 16) = 0LL;
      goto LABEL_445;
    case 52:
      *(void *)(v10 - 40) = 0LL;
      goto LABEL_445;
    case 53:
      int v41 = *(_DWORD *)(v10 + 8);
      int v42 = 255;
      goto LABEL_89;
    case 54:
      int v41 = *(_DWORD *)(v10 + 8) << 8;
      int v42 = 65280;
LABEL_89:
      *(_DWORD *)(v10 - 40) = v41;
      *(_DWORD *)(v10 - 36) = v42;
      goto LABEL_445;
    case 55:
      *(_DWORD *)(v10 - 16) = 8;
      goto LABEL_445;
    case 56:
      *(_DWORD *)(v10 - 16) = 9;
      goto LABEL_445;
    case 57:
      *(_DWORD *)(v10 + 8) = 10;
      goto LABEL_445;
    case 58:
      *(_DWORD *)(v10 + 8) = 7;
      goto LABEL_445;
    case 59:
    case 64:
      *(_DWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 60:
      *(_DWORD *)(v10 - 40) = 0;
      goto LABEL_445;
    case 61:
    case 76:
    case 171:
      *(_DWORD *)(v10 - 16) = *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 63:
    case 80:
    case 140:
    case 215:
    case 218:
    case 243:
      *(_DWORD *)(v10 - 16) = 1;
      goto LABEL_445;
    case 66:
      *((_DWORD *)a5 + 28) = 0;
      goto LABEL_445;
    case 68:
      sub_18129C170( a5,  *(unsigned int **)(v10 - 64),  *(unsigned int *)(v10 + 8),  *(unsigned int *)(v10 - 40),  0LL,  a6,  a7,  a8);
      goto LABEL_445;
    case 69:
      sub_18129D098(a5, 0LL, 0LL, 0LL, *(void *)(v10 - 40), *(unsigned int *)(v10 + 8), 0LL, 0LL, 0, 0, 1u);
      goto LABEL_445;
    case 70:
      uint64_t v37 = *(unsigned __int8 **)(v10 - 40);
      uint64_t v38 = *(void *)(v10 - 64);
      uint64_t v39 = *(void *)(v10 - 16);
LABEL_100:
      sub_181313690((uint64_t)a5, v37, v38, v39);
      goto LABEL_445;
    case 71:
      sub_1812B177C( a5,  *(void **)(v10 - 136),  v10 - 64,  *(void **)(v10 - 40),  *(unsigned int *)(v10 - 16),  a6,  a7,  a8);
      int v40 = a5[43];
      if (v40)
      {
LABEL_102:
        if (!*((_BYTE *)v40 + 63))
        {
          uint64_t v43 = v40[9];
          if (v43) {
            *(_BYTE *)(v43 + 44) = *(_DWORD *)(v10 + 8);
          }
        }
      }

      goto LABEL_445;
    case 73:
    case 75:
      *(_DWORD *)(v10 + 32) = 11;
      goto LABEL_445;
    case 74:
      *(_DWORD *)(v10 - 40) = *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 77:
      *(_DWORD *)(v10 + 8) = 4;
      goto LABEL_445;
    case 78:
    case 172:
      *(_DWORD *)(v10 + 8) = 5;
      goto LABEL_445;
    case 79:
      sub_1812C9414(a5, *(void *)(v10 + 8), 0LL, *(_DWORD *)(v10 - 16), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 82:
      sub_181313CC8( (uint64_t)a5,  (void *)(v10 - 184),  (_OWORD *)(v10 - 88),  v10 - 64,  *(void **)(v10 - 40),  *(void *)(v10 + 8),  *(unsigned int *)(v10 - 160),  *(unsigned int *)(v10 - 112));
      goto LABEL_445;
    case 83:
      sub_1812C9414(a5, *(void *)(v10 + 8), 1LL, *(_DWORD *)(v10 - 16), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 84:
      uint64_t v259 = 0LL;
      memset(v258, 0, sizeof(v258));
      LOBYTE(v258[0]) = 9;
      sub_1812801A8(a5, *(void *)(v10 + 8), (uint64_t)v258, a4, (uint64_t)a5, a6, a7, a8);
      uint64_t v25 = *(void *)(v10 + 8);
      if (v25) {
LABEL_111:
      }
        sub_18128FDA0(*a5, v25, 1);
      goto LABEL_445;
    case 85:
      uint64_t v44 = *(void *)(v10 + 8);
      sub_181314024(a5, v44, *(void **)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 40) = v44;
      goto LABEL_445;
    case 86:
      uint64_t v45 = *(void *)(v10 + 8);
      sub_181314024(a5, v45, *(void **)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 64) = v45;
      goto LABEL_445;
    case 87:
      uint64_t v46 = *(void *)(v10 + 8);
      if (v46) {
        sub_181314064((uint64_t)a5, v46, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      }
      goto LABEL_445;
    case 88:
      char v47 = *(_BYTE **)(v10 + 8);
      uint64_t v48 = *(void *)(v10 - 40);
      if (v47
        && (!*((void *)v47 + 10)
         || (DWORD2(v258[0]) = 0,
             sub_181314064((uint64_t)a5, (uint64_t)v47, a3, a4, (uint64_t)a5, a6, a7, a8, v257),
             uint64_t v50 = sub_18127F854((uint64_t)a5, 0LL, 0LL, 0LL, (uint64_t)v258, (uint64_t)v47, 0LL, v49),
             (char v47 = sub_181280000(a5, 0LL, v50, 0LL, 0LL, 0LL, 0LL, 0, 0LL)) != 0LL)))
      {
        *char v47 = *(_DWORD *)(v10 - 16);
        *((void *)v47 + 10) = v48;
        if (v48) {
          *(_DWORD *)(v48 + 4) &= ~0x400u;
        }
        *((_DWORD *)v47 + 1) &= ~0x400u;
        if (*(_DWORD *)(v10 - 16) != 135)
        {
          *((_BYTE *)a5 + 34) = 1;
          *(void *)(v10 - 40) = v47;
          goto LABEL_445;
        }
      }

      else
      {
        if (v48) {
          sub_18128FDA0(*a5, v48, 1);
        }
        char v47 = 0LL;
      }

      *(void *)(v10 - 40) = v47;
      goto LABEL_445;
    case 90:
      *(_DWORD *)(v10 - 16) = 135;
      goto LABEL_445;
    case 92:
      *(void *)(v10 - 184) = sub_181280000( a5,  *(void **)(v10 - 136),  *(_OWORD **)(v10 - 112),  *(void *)(v10 - 88),  *(void *)(v10 - 64),  *(void *)(v10 - 40),  *(void *)(v10 - 16),  *(_DWORD *)(v10 - 160),  *(void *)(v10 + 8));
      goto LABEL_445;
    case 93:
      unsigned int v51 = sub_181280000( a5,  *(void **)(v10 - 160),  *(_OWORD **)(v10 - 136),  *(void *)(v10 - 112),  *(void *)(v10 - 88),  *(void *)(v10 - 64),  *(void *)(v10 - 16),  *(_DWORD *)(v10 - 184),  *(void *)(v10 + 8));
      *(void *)(v10 - 208) = v51;
      if (v51)
      {
        *((void *)v51 + 15) = *(void *)(v10 - 40);
      }

      else
      {
        v214 = *(void **)(v10 - 40);
        if (v214)
        {
          v215 = *a5;
          do
          {
            v216 = (void *)v214[8];
            sub_1813091C8(v215, v214);
            v214 = v216;
          }

          while (v216);
        }
      }

      goto LABEL_445;
    case 94:
      *(void *)(v10 - 64) = sub_181280000(a5, *(void **)(v10 - 16), 0LL, 0LL, 0LL, 0LL, 0LL, 512, 0LL);
      goto LABEL_445;
    case 95:
      uint64_t v52 = *(void *)(v10 - 88);
      uint64_t v53 = (uint64_t)sub_181280000(a5, *(void **)(v10 - 16), 0LL, 0LL, 0LL, 0LL, 0LL, 1536, 0LL);
      if (v52) {
        *(_DWORD *)(v52 + 4) &= ~0x400u;
      }
      if (v53)
      {
        *(_BYTE *)uint64_t v53 = -121;
        *(void *)(v53 + 80) = v52;
        goto LABEL_444;
      }

      *(void *)(v10 - 88) = v52;
      goto LABEL_445;
    case 97:
      *(_DWORD *)(v10 + 8) = 2;
      goto LABEL_445;
    case 99:
    case 105:
    case 108:
    case 132:
    case 142:
    case 230:
    case 233:
    case 238:
      *(void *)(v10 + 32) = 0LL;
      goto LABEL_445;
    case 100:
      int v54 = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(void *)(v10 - 88) = v54;
      if (*(_DWORD *)(v10 + 16))
      {
        sub_181314178((uint64_t)a5, v54, v10 + 8, 1);
        int v54 = *(int **)(v10 - 88);
      }

      sub_1813142D0((uint64_t *)a5, v54, *(unsigned __int8 **)(v10 - 64), *(void *)(v10 - 16));
      goto LABEL_445;
    case 101:
      uint64_t v55 = (uint64_t)*a5;
      *(void *)&v258[0] = 0LL;
      DWORD2(v258[0]) = 0;
      uint64_t v56 = sub_18127F5B0(v55, 180, (uint64_t)v258, 0);
      if (v56 && (*(_BYTE *)(v56 + 4) & 3) == 0) {
        *(_DWORD *)(v56 + 56) = *(_DWORD *)(v10 + 8) - *((_DWORD *)a5 + 84);
      }
      *(void *)(v10 - 40) = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 40), (unsigned __int8 *)v56);
      goto LABEL_445;
    case 102:
      uint64_t v57 = sub_1813132BC((uint64_t *)a5, 180, 0LL, 0LL);
      uint64_t v58 = v57;
      if (v57 && (*(_BYTE *)(v57 + 4) & 3) == 0) {
        *(_DWORD *)(v57 + 56) = *(_DWORD *)(v10 + 8) - *((_DWORD *)a5 + 84);
      }
      uint64_t v59 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 - 40), *(void *)(v10 - 32));
      uint64_t v60 = (unsigned __int8 *)sub_1813132BC((uint64_t *)a5, 141, v59, v58);
      uint64_t v53 = (uint64_t)sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 88), v60);
      goto LABEL_444;
    case 103:
    case 115:
    case 254:
    case 255:
      *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 106:
      unsigned int v61 = *(unsigned int **)(v10 + 8);
      *(void *)(v10 - 16) = v61;
      sub_181314408(v61);
      goto LABEL_445;
    case 107:
      int v62 = *(int **)(v10 - 16);
      if (v62 && *v62 >= 1) {
        LOBYTE(v62[26 * (*v62 - 1) + 17]) = *(_DWORD *)(v10 + 8);
      }
      goto LABEL_445;
    case 109:
      uint64_t v53 = (uint64_t)sub_18127F854((uint64_t)a5, *(int **)(v10 - 88), v10 - 64, v10 - 40, v10 - 16, 0LL, v10 + 8, a8);
      goto LABEL_444;
    case 110:
      uint64_t v63 = sub_18127F854((uint64_t)a5, *(int **)(v10 - 112), v10 - 88, v10 - 64, v10 - 40, 0LL, v10 + 8, a8);
      *(void *)(v10 - 112) = v63;
      sub_181314514((uint64_t *)a5, v63, v10 - 16);
      goto LABEL_445;
    case 111:
      __int128 v64 = sub_18127F854((uint64_t)a5, *(int **)(v10 - 160), v10 - 136, v10 - 112, v10 - 16, 0LL, v10 + 8, a8);
      *(void *)(v10 - 160) = v64;
      sub_181314624(a5, v64, *(void **)(v10 - 64));
      goto LABEL_445;
    case 112:
      uint64_t v65 = *(int **)(v10 - 112);
      uint64_t v66 = v10 - 16;
      __int128 v67 = *(_BYTE **)(v10 - 64);
      goto LABEL_390;
    case 113:
      __int128 v68 = *(int **)(v10 - 112);
      if (v68 || *(_DWORD *)(v10 - 8) || *(void *)(v10 + 8) || *(void *)(v10 + 16))
      {
        __int128 v69 = *(unsigned int **)(v10 - 64);
        if (v69 && *v69 == 1)
        {
          __int128 v70 = sub_18127F854((uint64_t)a5, v68, 0LL, 0LL, v10 - 16, 0LL, v10 + 8, a8);
          *(void *)(v10 - 112) = v70;
          if (v70)
          {
            uint64_t v71 = *(void *)(v10 - 64);
            uint64_t v72 = *v70 - 1LL;
            __int128 v73 = &v70[26 * v72];
            *((_OWORD *)v73 + 1) = *(_OWORD *)(v71 + 16);
            uint64_t v74 = *(void *)(v71 + 48);
            *((void *)v73 + 6) = v74;
            if (v74 && (*(_BYTE *)(v74 + 5) & 8) != 0) {
              *(_WORD *)((char *)&v70[26 * v72 + 17] + 1) |= 0x2000u;
            }
            if ((*(_WORD *)(v71 + 69) & 4) != 0)
            {
              __int128 v75 = &v70[26 * v72];
              *((void *)v75 + 12) = *(void *)(v71 + 96);
              *(void *)(v71 + 96) = 0LL;
              *(_WORD *)(v71 + 69) &= ~4u;
              *(_WORD *)((char *)v75 + 69) |= 4u;
            }

            *(void *)(v71 + 48) = 0LL;
            *(void *)(v71 + 16) = 0LL;
            *(void *)(v71 + 24) = 0LL;
          }

          sub_18128FF4C(*a5, *(void **)(v10 - 64));
        }

        else
        {
          sub_181314408(v69);
          __int128 v67 = sub_181280000(a5, 0LL, *(_OWORD **)(v10 - 64), 0LL, 0LL, 0LL, 0LL, 2048, 0LL);
          uint64_t v65 = *(int **)(v10 - 112);
          uint64_t v66 = v10 - 16;
LABEL_390:
          *(void *)(v10 - 112) = sub_18127F854((uint64_t)a5, v65, 0LL, 0LL, v66, (uint64_t)v67, v10 + 8, a8);
        }
      }

      else
      {
        *(void *)(v10 - 112) = *(void *)(v10 - 64);
      }

      goto LABEL_445;
    case 114:
    case 129:
      *(void *)(v10 + 32) = 0LL;
      *(_DWORD *)(v10 + 40) = 0;
      goto LABEL_445;
    case 116:
      uint64_t v76 = sub_18127FB3C((uint64_t *)a5, 0LL, v10 + 8, 0LL, (uint64_t)a5, a6, a7, a8);
      uint64_t v77 = v76;
      *(void *)(v10 + 8) = v77;
      goto LABEL_445;
    case 117:
      uint64_t v79 = sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      uint64_t v80 = v79;
      *(void *)(v10 - 40) = v80;
      goto LABEL_445;
    case 118:
      *(void *)(v10 + 8) = sub_18127FB3C((uint64_t *)a5, 0LL, v10 + 8, 0LL, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 119:
      *(void *)(v10 - 40) = sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 120:
      uint64_t v82 = sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 88, v10 - 40, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 88) = v82;
      if (v82) {
        *(void *)(*(void *)(v10 - 88) + 32LL) = sub_1813146DC((uint64_t)*a5, v10 + 8);
      }
      goto LABEL_445;
    case 121:
      uint64_t v83 = sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 40, 0LL, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 40) = v83;
      if (v83) {
        *(void *)(*(void *)(v10 - 40) + 32LL) = sub_1813146DC((uint64_t)*a5, v10 + 8);
      }
      goto LABEL_445;
    case 123:
      *(_DWORD *)(v10 - 16) = sub_18131479C((uint64_t)a5, v10 - 16, 0LL, 0LL, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 124:
      *(_DWORD *)(v10 - 40) = sub_18131479C((uint64_t)a5, v10 - 40, v10 - 16, 0LL, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 125:
      *(_DWORD *)(v10 - 64) = sub_18131479C((uint64_t)a5, v10 - 64, v10 - 40, v10 - 16, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 126:
      *(void *)(v10 - 16) = *(void *)(v10 + 8);
      *(void *)(v10 - 8) = 0LL;
      goto LABEL_445;
    case 127:
      uint64_t v84 = *(void *)(v10 - 16);
      *(void *)(v10 - 64) = 0LL;
      *(void *)(v10 - 56) = v84;
      goto LABEL_445;
    case 128:
      *(void *)(v10 + 32) = 0LL;
      *(void *)(v10 + 40) = 0LL;
      goto LABEL_445;
    case 130:
      *(_OWORD *)(v10 - 40) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 131:
      *(void *)(v10 - 16) = 0LL;
      *(_DWORD *)(v10 - 8) = 1;
      goto LABEL_445;
    case 133:
    case 143:
      goto LABEL_363;
    case 134:
      __int128 v85 = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(void *)(v10 - 88) = v85;
      goto LABEL_194;
    case 135:
      __int128 v85 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 - 40));
      *(void *)(v10 - 40) = v85;
LABEL_194:
      sub_181314974(v85, *(_DWORD *)(v10 - 16), *(_DWORD *)(v10 + 8));
      goto LABEL_445;
    case 136:
    case 214:
    case 217:
      *(_DWORD *)(v10 + 8) = 0;
      goto LABEL_445;
    case 138:
    case 141:
      *(_DWORD *)(v10 + 32) = -1;
      goto LABEL_445;
    case 139:
      *(_DWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 144:
    case 146:
    case 151:
    case 153:
    case 164:
    case 173:
    case 228:
    case 229:
    case 248:
    case 264:
    case 283:
      *(void *)(v10 + 32) = 0LL;
      goto LABEL_445;
    case 145:
    case 152:
    case 154:
    case 227:
    case 247:
    case 265:
    case 284:
    case 331:
      goto LABEL_419;
    case 147:
      *(void *)(v10 - 16) = sub_1813132BC((uint64_t *)a5, 148, *(void *)(v10 + 8), 0LL);
      goto LABEL_445;
    case 148:
      uint64_t v86 = *(void *)(v10 - 40);
      uint64_t v87 = *(void *)(v10 + 8);
      goto LABEL_199;
    case 149:
      uint64_t v86 = *(void *)(v10 + 8);
      uint64_t v87 = *(void *)(v10 - 40);
LABEL_199:
      *(void *)(v10 - 64) = sub_1813132BC((uint64_t *)a5, 148, v86, v87);
      goto LABEL_445;
    case 150:
      sub_181314514((uint64_t *)a5, *(int **)(v10 - 88), v10 - 64);
      sub_1812BBC2C( a5,  *(void *)(v10 - 88),  *(unsigned __int8 **)(v10 - 40),  *(void **)(v10 - 16),  *(void *)(v10 + 8),  v88,  v89,  v90);
      goto LABEL_445;
    case 155:
      sub_1813149C4((uint64_t)a5, *(void **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 16) = 0LL;
      goto LABEL_445;
    case 156:
      sub_1813149C4((uint64_t)a5, *(void **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      *(void *)(v10 - 64) = *(void *)(v10 - 40);
      goto LABEL_445;
    case 157:
      sub_181314514((uint64_t *)a5, *(int **)(v10 - 160), v10 - 136);
      int v96 = *(int **)(v10 - 64);
      if (v96)
      {
        if (*v96 >= 2)
        {
          char v97 = sub_181280000(a5, 0LL, v96, 0LL, 0LL, 0LL, 0LL, 2048, 0LL);
          DWORD2(v258[0]) = 0;
          *(void *)&v258[0] = 0LL;
          int v96 = sub_18127F854((uint64_t)a5, 0LL, 0LL, 0LL, (uint64_t)v258, (uint64_t)v97, 0LL, v98);
        }

        *(void *)(v10 - 160) = sub_181314C3C((uint64_t *)a5, *(int **)(v10 - 160), v96, v91, v92, v93, v94, v95);
      }

      int v99 = *(unsigned int **)(v10 - 88);
      if (v99 && (signed int)*v99 > *((_DWORD *)*a5 + 36))
      {
        sub_1812DC47C((uint64_t)a5, "too many columns in %s", (uint64_t)v99, v91, v92, v93, v94, v95, (char)"set list");
        int v99 = *(unsigned int **)(v10 - 88);
      }

      sub_1812B9CA8( (uint64_t)a5,  *(void *)(v10 - 160),  v99,  *(void *)(v10 - 40),  *(unsigned int *)(v10 - 184),  *(void *)(v10 - 16),  *(void *)(v10 + 8),  0LL);
      goto LABEL_445;
    case 158:
      int v100 = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 + 8));
      *(void *)(v10 - 88) = v100;
      sub_181314178((uint64_t)a5, v100, v10 - 40, 1);
      goto LABEL_445;
    case 159:
      *(void *)(v10 - 136) = sub_181314CD4( (uint64_t *)a5,  *(int **)(v10 - 136),  *(void **)(v10 - 64),  *(unsigned __int8 **)(v10 + 8),  (uint64_t)a5,  a6,  a7,  a8);
      goto LABEL_445;
    case 160:
      uint64_t v101 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 + 8));
      sub_181314178((uint64_t)a5, v101, v10 - 40, 1);
      *(void *)(v10 - 40) = v101;
      goto LABEL_445;
    case 161:
      *(void *)(v10 - 88) = sub_181314CD4( (uint64_t *)a5,  0LL,  *(void **)(v10 - 64),  *(unsigned __int8 **)(v10 + 8),  (uint64_t)a5,  a6,  a7,  a8);
      goto LABEL_445;
    case 162:
      sub_1812A5598( (uint64_t)a5,  *(void *)(v10 - 64),  *(void *)(v10 - 16),  *(unsigned int **)(v10 - 40),  *(unsigned int *)(v10 - 112),  *(void *)(v10 + 8),  a7,  a8);
      goto LABEL_445;
    case 163:
      sub_1812A5598( (uint64_t)a5,  *(void *)(v10 - 88),  0LL,  *(unsigned int **)(v10 - 64),  *(unsigned int *)(v10 - 136),  0LL,  a7,  a8);
      goto LABEL_445;
    case 165:
      *(void *)(v10 - 16) = 0LL;
      goto LABEL_218;
    case 166:
      *(void *)(v10 - 256) = sub_181314F3C( *a5,  *(void **)(v10 - 184),  *(unsigned __int8 **)(v10 - 136),  *(void **)(v10 - 40),  *(unsigned __int8 **)(v10 - 16),  *(void **)(v10 + 8));
      goto LABEL_445;
    case 167:
      *(void *)(v10 - 184) = sub_181314F3C( *a5,  *(void **)(v10 - 112),  *(unsigned __int8 **)(v10 - 64),  0LL,  0LL,  *(void **)(v10 + 8));
      goto LABEL_445;
    case 168:
      *(void *)(v10 - 88) = sub_181314F3C(*a5, 0LL, 0LL, 0LL, 0LL, 0LL);
      goto LABEL_445;
    case 169:
      *(void *)(v10 - 160) = sub_181314F3C( *a5,  0LL,  0LL,  *(void **)(v10 - 40),  *(unsigned __int8 **)(v10 - 16),  0LL);
      goto LABEL_445;
    case 170:
LABEL_218:
      sub_1813149C4((uint64_t)a5, *(void **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 174:
    case 177:
    case 234:
    case 239:
      *(void *)(v10 - 40) = *(void *)(v10 - 16);
      goto LABEL_445;
    case 175:
      *(void *)(v10 - 40) = sub_181315030((uint64_t)a5, *(void **)(v10 - 40), v10 + 8);
      goto LABEL_445;
    case 176:
      *(void *)(v10 + 8) = sub_181315030((uint64_t)a5, 0LL, v10 + 8);
      goto LABEL_445;
    case 178:
      int v20 = *(const void **)(v10 + 8);
      uint64_t v21 = *(void *)(v10 + 16);
      uint64_t v22 = (uint64_t)a5;
      LOBYTE(v19) = 59;
      goto LABEL_226;
    case 179:
      uint64_t v102 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 - 40), *(void *)(v10 - 32));
      uint64_t v14 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 + 8), *(void *)(v10 + 16));
      uint64_t v15 = (uint64_t *)a5;
      LOBYTE(v12) = -115;
      uint64_t v13 = v102;
      goto LABEL_6;
    case 180:
      uint64_t v103 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 - 88), *(void *)(v10 - 80));
      uint64_t v104 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 - 40), *(void *)(v10 - 32));
      uint64_t v105 = sub_1813133E8((uint64_t)a5, 59, *(const void **)(v10 + 8), *(void *)(v10 + 16));
      uint64_t v106 = sub_1813132BC((uint64_t *)a5, 141, v104, v105);
      v107 = a5[51];
      if (!v107) {
        goto LABEL_429;
      }
      while (*v107 != v103)
      {
        v107 = (void *)v107[3];
        if (!v107) {
          goto LABEL_429;
        }
      }

      void *v107 = 0LL;
LABEL_429:
      v223 = (uint64_t *)a5;
      char v224 = -115;
      uint64_t v225 = v103;
      goto LABEL_443;
    case 181:
    case 182:
      __int16 v19 = *(_WORD *)(v10 + 2);
      int v20 = *(const void **)(v10 + 8);
      uint64_t v21 = *(void *)(v10 + 16);
      uint64_t v22 = (uint64_t)a5;
LABEL_226:
      *(void *)(v10 + 8) = sub_1813133E8(v22, v19, v20, v21);
      goto LABEL_445;
    case 183:
      statfs v108 = (_DWORD *)(v10 + 8);
      uint64_t v109 = sub_18127F5B0((uint64_t)*a5, 155, v10 + 8, 1);
      if (v109) {
        *(_DWORD *)(v109 + 56) = *v108 - *((_DWORD *)a5 + 84);
      }
      *(void *)statfs v108 = v109;
      goto LABEL_445;
    case 184:
      __int128 v111 = (_OWORD *)(v10 + 8);
      __int128 v110 = *(unsigned __int8 **)(v10 + 8);
      if (*v110 == 35 && (unint64_t)v110[1] - 58 > 0xFFFFFFFFFFFFFFF5LL)
      {
        v258[0] = *v111;
        if (*((_BYTE *)a5 + 30))
        {
          uint64_t v222 = sub_1813132BC((uint64_t *)a5, 176, 0LL, 0LL);
          *(void *)__int128 v111 = v222;
          if (v222) {
            sub_18130DE18((unsigned __int8 *)(*(void *)&v258[0] + 1LL), (_DWORD *)(v222 + 44));
          }
        }

        else
        {
          sub_1812DC47C( (uint64_t)a5,  "near %T: syntax error",  (uint64_t)v110,  a4,  (uint64_t)a5,  a6,  a7,  a8,  (char)v258);
          *(void *)__int128 v111 = 0LL;
        }
      }

      else
      {
        uint64_t v112 = *(unsigned int *)(v10 + 16);
        uint64_t v113 = sub_1813133E8((uint64_t)a5, 156, v110, *(void *)(v10 + 16));
        *(void *)(v10 + 8) = v113;
        sub_1812B1F10((uint64_t)a5, v113, v112, v114, v115, v116, v117, v118);
      }

      goto LABEL_445;
    case 185:
      *(void *)(v10 - 40) = sub_181315264((uint64_t *)a5, *(void *)(v10 - 40), v10 + 8, 1);
      goto LABEL_445;
    case 186:
      uint64_t v119 = sub_18127F5B0((uint64_t)*a5, 36, v10 - 16, 1);
      *(void *)(v10 - 112) = v119;
      sub_18127F750(*a5, v119, *(void *)(v10 - 64), 0LL);
      goto LABEL_445;
    case 187:
      *(void *)(v10 - 88) = sub_18129F3DC( (uint64_t)a5,  *(void **)(v10 - 16),  (_DWORD *)(v10 - 88),  *(_DWORD *)(v10 - 40));
      goto LABEL_445;
    case 188:
      *(void *)(v10 - 64) = sub_18129F3DC((uint64_t)a5, 0LL, (_DWORD *)(v10 - 64), 0);
      goto LABEL_445;
    case 189:
      uint64_t v120 = sub_18129F3DC((uint64_t)a5, *(void **)(v10 - 40), (_DWORD *)(v10 - 112), *(_DWORD *)(v10 - 64));
      sub_1813152B4(a5, v120, *(void *)(v10 + 8), v121, v122, v123, v124, v125, v257);
      *(void *)(v10 - 112) = v120;
      goto LABEL_445;
    case 190:
      uint64_t v126 = sub_18129F3DC((uint64_t)a5, 0LL, (_DWORD *)(v10 - 88), 0);
      sub_1813152B4(a5, v126, *(void *)(v10 + 8), v127, v128, v129, v130, v131, v257);
      *(void *)(v10 - 88) = v126;
      goto LABEL_445;
    case 191:
      *(void *)(v10 + 8) = sub_18129F3DC((uint64_t)a5, 0LL, (_DWORD *)(v10 + 8), 0);
      goto LABEL_445;
    case 192:
      uint64_t v132 = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 64), *(unsigned __int8 **)(v10 - 16));
      uint64_t v133 = sub_1813132BC((uint64_t *)a5, 177, 0LL, 0LL);
      *(void *)(v10 - 88) = v133;
      if (v133)
      {
        *(void *)(v133 + 32) = v132;
        if (*v132) {
          *(_DWORD *)(*(void *)(v10 - 88) + 4LL) |= *(_DWORD *)(*((void *)v132 + 1) + 4LL) & 0x400208;
        }
      }

      else if (v132)
      {
        sub_181311F48(*a5, v132);
      }

      goto LABEL_445;
    case 193:
      *(void *)(v10 - 40) = sub_1813152F8((uint64_t *)a5, *(void *)(v10 - 40), *(void *)(v10 + 8));
      goto LABEL_445;
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
      __int16 v12 = *(_WORD *)(v10 - 22);
      uint64_t v13 = *(void *)(v10 - 40);
      uint64_t v14 = *(void *)(v10 + 8);
      uint64_t v15 = (uint64_t *)a5;
      goto LABEL_6;
    case 201:
      *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
      *(_DWORD *)(v10 - 8) |= 0x80000000;
      goto LABEL_445;
    case 202:
      int v134 = *(_DWORD *)(v10 - 8);
      *(_DWORD *)(v10 - 8) = v134 & 0x7FFFFFFF;
      v135 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 + 8));
      __int16 v136 = sub_18127F80C((uint64_t *)a5, v135, *(unsigned __int8 **)(v10 - 40));
      uint64_t v137 = sub_18129F3DC((uint64_t)a5, v136, (_DWORD *)(v10 - 16), 0);
      *(void *)(v10 - 40) = v137;
      if (v134 < 0)
      {
        uint64_t v137 = sub_1813132BC((uint64_t *)a5, 19, v137, 0LL);
        *(void *)(v10 - 40) = v137;
      }

      goto LABEL_255;
    case 203:
      int v138 = *(_DWORD *)(v10 - 56);
      *(_DWORD *)(v10 - 56) = v138 & 0x7FFFFFFF;
      BOOL v139 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 - 40));
      v140 = sub_18127F80C((uint64_t *)a5, v139, *(unsigned __int8 **)(v10 - 88));
      v141 = sub_18127F80C((uint64_t *)a5, v140, *(unsigned __int8 **)(v10 + 8));
      uint64_t v137 = sub_18129F3DC((uint64_t)a5, v141, (_DWORD *)(v10 - 64), 0);
      *(void *)(v10 - 88) = v137;
      if (v138 < 0)
      {
        uint64_t v137 = sub_1813132BC((uint64_t *)a5, 19, v137, 0LL);
        *(void *)(v10 - 88) = v137;
      }

LABEL_255:
      if (v137) {
        *(_DWORD *)(v137 + 4) |= 0x100u;
      }
      goto LABEL_445;
    case 204:
      __int16 v23 = *(_WORD *)(v10 + 2);
      uint64_t v142 = *(void *)(v10 - 16);
      goto LABEL_269;
    case 205:
      uint64_t v13 = *(void *)(v10 - 40);
      uint64_t v15 = (uint64_t *)a5;
      LOBYTE(v12) = 51;
      uint64_t v14 = 0LL;
LABEL_6:
      *(void *)(v10 - 40) = sub_1813132BC(v15, v12, v13, v14);
      goto LABEL_445;
    case 206:
      uint64_t v143 = sub_1813132BC((uint64_t *)a5, 45, *(void *)(v10 - 40), *(void *)(v10 + 8));
      *(void *)(v10 - 40) = v143;
      goto LABEL_262;
    case 207:
      uint64_t v144 = sub_1813132BC((uint64_t *)a5, 171, *(void *)(v10 - 64), *(void *)(v10 + 8));
      *(void *)(v10 - 64) = v144;
      goto LABEL_264;
    case 208:
      uint64_t v143 = sub_1813132BC((uint64_t *)a5, 45, *(void *)(v10 - 112), *(void *)(v10 + 8));
      *(void *)(v10 - 112) = v143;
LABEL_262:
      sub_181315458(a5, *(_BYTE **)(v10 + 8), v143, 50);
      goto LABEL_445;
    case 209:
      uint64_t v144 = sub_1813132BC((uint64_t *)a5, 171, *(void *)(v10 - 88), *(void *)(v10 + 8));
      *(void *)(v10 - 88) = v144;
LABEL_264:
      sub_181315458(a5, *(_BYTE **)(v10 + 8), v144, 51);
      goto LABEL_445;
    case 210:
    case 211:
      __int16 v23 = *(_WORD *)(v10 - 22);
      goto LABEL_268;
    case 212:
      if (*(_WORD *)(v10 - 22) == 106) {
        LOBYTE(v23) = -82;
      }
      else {
        LOBYTE(v23) = -83;
      }
LABEL_268:
      uint64_t v142 = *(void *)(v10 + 8);
LABEL_269:
      *(void *)(v10 - 16) = sub_1813132BC((uint64_t *)a5, v23, v142, 0LL);
      goto LABEL_445;
    case 213:
      char v145 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 - 40));
      BOOL v146 = sub_18127F80C((uint64_t *)a5, v145, *(unsigned __int8 **)(v10 + 8));
      *(void *)(v10 - 40) = sub_18129F3DC((uint64_t)a5, v146, (_DWORD *)(v10 - 16), 0);
      goto LABEL_445;
    case 216:
      v147 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 - 40));
      v148 = sub_18127F80C((uint64_t *)a5, v147, *(unsigned __int8 **)(v10 + 8));
      uint64_t v149 = sub_1813132BC((uint64_t *)a5, 48, *(void *)(v10 - 88), 0LL);
      *(void *)(v10 - 88) = v149;
      if (v149)
      {
        *(void *)(v149 + 32) = v148;
      }

      else if (v148)
      {
        sub_181311F48(*a5, v148);
      }

      goto LABEL_441;
    case 219:
      uint64_t v150 = *(void *)(v10 - 16);
      if (!v150)
      {
        sub_1813154AC(a5, *(unsigned __int8 **)(v10 - 88));
        if (*(_DWORD *)(v10 - 64)) {
          v217 = "true";
        }
        else {
          v217 = "false";
        }
        uint64_t v218 = sub_1813143AC((uint64_t)*a5, 117, v217);
        *(void *)(v10 - 88) = v218;
        if (v218) {
          sub_181313558(v218);
        }
        goto LABEL_445;
      }

      if (*(_DWORD *)v150 != 1) {
        goto LABEL_434;
      }
      uint64_t v151 = *(unsigned __int8 **)(v150 + 8);
      if (sub_18131552C((uint64_t)v151))
      {
        uint64_t v152 = *(void *)(v10 - 16);
        if (**(unsigned __int8 **)(v10 - 88) != 177)
        {
          *(void *)(v152 + 8) = 0LL;
          v153 = *(void **)(v10 - 16);
          if (v153) {
            sub_181311F48(*a5, v153);
          }
          uint64_t v154 = sub_1813132BC((uint64_t *)a5, 174, (uint64_t)v151, 0LL);
          *(void *)(v10 - 88) = sub_1813132BC((uint64_t *)a5, 53, *(void *)(v10 - 88), v154);
          goto LABEL_441;
        }
      }

      else
      {
        uint64_t v152 = *(void *)(v10 - 16);
      }

      if (*(_DWORD *)v152 == 1 && *v151 == 138)
      {
        uint64_t v226 = sub_1813132BC((uint64_t *)a5, 49, *(void *)(v10 - 88), 0LL);
        *(void *)(v10 - 88) = v226;
        sub_181315578(a5, v226, *((void *)v151 + 4), v227, v228, v229, v230, v231);
        *((void *)v151 + 4) = 0LL;
        goto LABEL_438;
      }

LABEL_434:
      uint64_t v232 = sub_1813132BC((uint64_t *)a5, 49, *(void *)(v10 - 88), 0LL);
      *(void *)(v10 - 88) = v232;
      if (!v232)
      {
LABEL_438:
        v253 = *(void **)(v10 - 16);
        if (v253) {
          sub_181311F48(*a5, v253);
        }
        goto LABEL_441;
      }

      v239 = *(unsigned __int8 **)(v232 + 16);
      if (*v239 == 177)
      {
        v240 = sub_1813155B0(a5, **((_DWORD **)v239 + 4), *(int **)(v10 - 16), v234, v235, v236, v237, v238);
        if (v240)
        {
          uint64_t v247 = (uint64_t)v240;
          sub_181314064((uint64_t)a5, (uint64_t)v240, v241, v242, v243, v244, v245, v246, v257);
          sub_181315578(a5, *(void *)(v10 - 88), v247, v248, v249, v250, v251, v252);
        }
      }

      else
      {
        *(void *)(v232 + 32) = *(void *)(v10 - 16);
        sub_181315710(a5, *(void *)(v10 - 88), v233, v234, v235, v236, v237, v238);
      }

LABEL_441:
      if (!*(_DWORD *)(v10 - 64)) {
        goto LABEL_445;
      }
LABEL_442:
      uint64_t v225 = *(void *)(v10 - 88);
      v223 = (uint64_t *)a5;
      char v224 = 19;
      uint64_t v106 = 0LL;
LABEL_443:
      uint64_t v53 = sub_1813132BC(v223, v224, v225, v106);
LABEL_444:
      *(void *)(v10 - 88) = v53;
LABEL_445:
      uint64_t v254 = word_1813C9FBE[v8];
      v255 = (unsigned __int16 *)(v10 + 24LL * byte_1813C72EC[v8]);
      uint64_t result = word_1813C8AD8[word_1813CA46E[*v255] + v254];
      v255[12] = result;
      v255 += 12;
      *a1 = (uint64_t)v255;
      v255[1] = v254;
      return result;
    case 220:
      uint64_t v155 = sub_1813132BC((uint64_t *)a5, 138, 0LL, 0LL);
      *(void *)(v10 - 40) = v155;
      goto LABEL_291;
    case 221:
      uint64_t v161 = sub_1813132BC((uint64_t *)a5, 49, *(void *)(v10 - 88), 0LL);
      *(void *)(v10 - 88) = v161;
      uint64_t v167 = *(void *)(v10 - 16);
      __int128 v168 = a5;
      goto LABEL_288;
    case 222:
      __int128 v169 = (int *)sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 40, v10 - 16, (uint64_t)a5, a6, a7, a8);
      __int128 v170 = sub_181280000(a5, 0LL, v169, 0LL, 0LL, 0LL, 0LL, 0, 0LL);
      int v171 = v170;
      uint64_t v172 = *(void **)(v10 + 8);
      if (v172)
      {
        if (v170) {
          v173 = v169;
        }
        else {
          v173 = 0LL;
        }
        sub_181314624(a5, v173, v172);
      }

      uint64_t v161 = sub_1813132BC((uint64_t *)a5, 49, *(void *)(v10 - 88), 0LL);
      *(void *)(v10 - 88) = v161;
      __int128 v168 = a5;
      uint64_t v167 = (uint64_t)v171;
LABEL_288:
      sub_181315578(v168, v161, v167, v162, v163, v164, v165, v166);
      if (!*(_DWORD *)(v10 - 64)) {
        goto LABEL_445;
      }
      goto LABEL_442;
    case 223:
      uint64_t v155 = sub_1813132BC((uint64_t *)a5, 20, 0LL, 0LL);
      *(void *)(v10 - 64) = v155;
LABEL_291:
      sub_181315578(a5, v155, *(void *)(v10 - 16), v156, v157, v158, v159, v160);
      goto LABEL_445;
    case 224:
      uint64_t v174 = sub_1813132BC((uint64_t *)a5, 157, *(void *)(v10 - 64), 0LL);
      *(void *)(v10 - 88) = v174;
      if (v174)
      {
        v180 = *(unsigned __int8 **)(v10 - 16);
        v181 = *(int **)(v10 - 40);
        if (v180)
        {
          v181 = sub_18127F80C((uint64_t *)a5, v181, v180);
          uint64_t v174 = *(void *)(v10 - 88);
        }

        *(void *)(v174 + 32) = v181;
        sub_181315710(a5, *(void *)(v10 - 88), (uint64_t)v180, v175, v176, v177, v178, v179);
      }

      else
      {
        v219 = *(void **)(v10 - 40);
        if (v219) {
          sub_181311F48(*a5, v219);
        }
        v220 = *(unsigned __int8 **)(v10 - 16);
        if (v220) {
          sub_181309110(*a5, v220);
        }
      }

      goto LABEL_445;
    case 225:
      v182 = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(void *)(v10 - 88) = v182;
      *(void *)(v10 - 88) = sub_18127F80C((uint64_t *)a5, v182, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 226:
      v183 = (int *)sub_18133E190(*a5, *(unsigned __int8 **)(v10 - 40));
      *(void *)(v10 - 64) = v183;
      *(void *)(v10 - 64) = sub_18127F80C((uint64_t *)a5, v183, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 231:
      *(void *)(v10 - 40) = sub_18127F80C((uint64_t *)a5, *(int **)(v10 - 40), *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 232:
      *(void *)(v10 + 8) = sub_18133E190(*a5, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 235:
      v184 = (void *)sub_18127FB3C((uint64_t *)a5, 0LL, v10 - 88, 0LL, (uint64_t)a5, a6, a7, a8);
      sub_18129D098( a5,  v10 - 160,  v10 - 136,  v184,  *(void *)(v10 - 40),  *(unsigned int *)(v10 - 232),  v10 - 256,  *(void *)(v10 + 8),  0,  *(_DWORD *)(v10 - 184),  0);
      if (*((unsigned __int8 *)a5 + 302) >= 2u)
      {
        v185 = a5[44];
        if (v185) {
          sub_18131465C((uint64_t)a5, *v185, (_OWORD *)(v10 - 88));
        }
      }

      goto LABEL_445;
    case 236:
    case 278:
      *(_DWORD *)(v10 + 8) = 2;
      goto LABEL_445;
    case 237:
      *(_DWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 240:
      *(void *)(v10 - 88) = sub_181315894( (uint64_t *)a5,  *(int **)(v10 - 88),  v10 - 40,  *(unsigned int *)(v10 - 16),  *(unsigned int *)(v10 + 8),  a6,  a7,  a8);
      goto LABEL_445;
    case 241:
      *(void *)(v10 - 40) = sub_181315894( (uint64_t *)a5,  0LL,  v10 - 40,  *(unsigned int *)(v10 - 16),  *(unsigned int *)(v10 + 8),  a6,  a7,  a8);
      goto LABEL_445;
    case 244:
      sub_181315980((uint64_t)a5, *(void *)(v10 + 8), *(_DWORD *)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 245:
      sub_181315DC4((uint64_t)a5, 0LL, *(unsigned __int8 **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 246:
      sub_181315DC4((uint64_t)a5, v10 - 16, *(unsigned __int8 **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 249:
      uint64_t v186 = v10 - 16;
      uint64_t v187 = v10 + 8;
      uint64_t v188 = (uint64_t)a5;
      uint64_t v189 = 0LL;
      goto LABEL_313;
    case 250:
      uint64_t v186 = v10 - 64;
      uint64_t v187 = v10 - 40;
      uint64_t v189 = v10 + 8;
      goto LABEL_312;
    case 251:
      uint64_t v186 = v10 - 88;
      uint64_t v187 = v10 - 64;
      uint64_t v189 = v10 - 16;
LABEL_312:
      uint64_t v188 = (uint64_t)a5;
LABEL_313:
      sub_181271D6C(v188, v186, v187, v189, 0LL, a6, a7, a8, v257);
      goto LABEL_445;
    case 252:
      uint64_t v190 = v10 - 64;
      uint64_t v191 = v10 - 40;
      uint64_t v192 = v10 + 8;
      goto LABEL_316;
    case 253:
      uint64_t v190 = v10 - 88;
      uint64_t v191 = v10 - 64;
      uint64_t v192 = v10 - 16;
LABEL_316:
      sub_181271D6C((uint64_t)a5, v190, v191, v192, 1LL, a6, a7, a8, v257);
      goto LABEL_445;
    case 256:
      *(void *)&v258[0] = *(void *)(v10 - 64);
      DWORD2(v258[0]) = *(_DWORD *)(v10 + 16) + *(_DWORD *)(v10 + 8) - LODWORD(v258[0]);
      sub_18129FC88((uint64_t)a5, *(void *)(v10 - 16), (uint64_t)v258, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 257:
      v193 = (_OWORD *)(v10 - 232);
      sub_18129E42C( (uint64_t)a5,  v10 - 160,  v10 - 136,  *(unsigned int *)(v10 - 112),  *(unsigned int *)(v10 - 88),  *(void **)(v10 - 80),  *(void *)(v10 - 40),  *(void *)(v10 + 8),  *(_DWORD *)(v10 - 232),  *(_DWORD *)(v10 - 184));
      if (*(_DWORD *)(v10 - 128)) {
        _OWORD *v193 = *(_OWORD *)(v10 - 136);
      }
      else {
        _OWORD *v193 = *(_OWORD *)(v10 - 160);
      }
      goto LABEL_445;
    case 258:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      goto LABEL_445;
    case 259:
      *(_DWORD *)(v10 - 16) = 65;
      goto LABEL_445;
    case 260:
      *(_DWORD *)(v10 + 32) = 33;
      goto LABEL_445;
    case 261:
    case 262:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      *(void *)(v10 + 16) = 0LL;
      goto LABEL_445;
    case 263:
      *(_DWORD *)(v10 - 40) = 129;
      *(void *)(v10 - 32) = *(void *)(v10 + 8);
      goto LABEL_445;
    case 266:
      *(void *)(*(void *)(*(void *)(v10 - 40) + 88LL) + 80LL) = *(void *)(v10 - 16);
      *(void *)(*(void *)(v10 - 40) + 88LL) = *(void *)(v10 - 16);
      goto LABEL_445;
    case 267:
      *(void *)(*(void *)(v10 - 16) + 88LL) = *(void *)(v10 - 16);
      goto LABEL_445;
    case 268:
      *(_OWORD *)(v10 - 40) = *(_OWORD *)(v10 + 8);
      v194 = "qualified table names are not allowed on INSERT, UPDATE, and DELETE statements within triggers";
      goto LABEL_329;
    case 269:
      v194 = "the INDEXED BY clause is not allowed on UPDATE or DELETE statements within triggers";
      goto LABEL_329;
    case 270:
      v194 = "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements within triggers";
LABEL_329:
      sub_1812DC47C((uint64_t)a5, v194, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 271:
      *(void *)(v10 - 184) = sub_18129FB80( (uint64_t)a5,  v10 - 136,  *(int **)(v10 - 40),  *(void **)(v10 - 64),  *(unsigned __int8 **)(v10 - 16),  *(_BYTE *)(v10 - 160),  *(unsigned __int8 **)(v10 - 184),  *(void *)(v10 + 8));
      goto LABEL_445;
    case 272:
      *(void *)(v10 - 160) = sub_181315FF0( (uint64_t)a5,  v10 - 88,  *(void **)(v10 - 64),  *(void *)(v10 - 40),  *(_BYTE *)(v10 - 136),  *(unsigned int ***)(v10 - 16),  *(unsigned __int8 **)(v10 - 160),  *(void *)(v10 + 8));
      goto LABEL_445;
    case 273:
      *(void *)(v10 - 112) = sub_181316178( (uint64_t)a5,  v10 - 64,  *(unsigned __int8 **)(v10 - 16),  *(unsigned __int8 **)(v10 - 112),  *(void *)(v10 + 8));
      goto LABEL_445;
    case 274:
      *(void *)(v10 - 40) = sub_181316210( *a5,  *(void *)(v10 - 16),  *(unsigned __int8 **)(v10 - 40),  *(void *)(v10 + 8));
      goto LABEL_445;
    case 275:
      uint64_t v195 = sub_1813132BC((uint64_t *)a5, 71, 0LL, 0LL);
      *(void *)(v10 - 64) = v195;
      if (v195) {
        *(_BYTE *)(v195 + 1) = 4;
      }
      goto LABEL_445;
    case 276:
      uint64_t v196 = sub_18127F5B0((uint64_t)*a5, 71, v10 - 16, 1);
      *(void *)(v10 - 112) = v196;
      if (v196) {
        *(_BYTE *)(v196 + 1) = *(_DWORD *)(v10 - 64);
      }
      goto LABEL_445;
    case 277:
      *(_DWORD *)(v10 + 8) = 1;
      goto LABEL_445;
    case 279:
      *(_DWORD *)(v10 + 8) = 3;
      goto LABEL_445;
    case 280:
      sub_181316350((uint64_t *)a5, *(void **)(v10 + 8), *(unsigned int *)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 281:
      sub_181346D48( (uint64_t)a5,  24LL,  (uint64_t)&unk_189B6E818,  *(void *)(v10 - 64),  *(void *)(v10 - 64),  *(void *)(v10 - 16),  *(void *)(v10 + 8),  a8);
      goto LABEL_445;
    case 282:
      sub_181346D48( (uint64_t)a5,  25LL,  (uint64_t)&unk_189B6E8E0,  *(void *)(v10 + 8),  0LL,  0LL,  *(void *)(v10 + 8),  a8);
      goto LABEL_445;
    case 285:
      sub_1813166FC((uint64_t *)a5, 0LL, 0LL, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 286:
      sub_1813166FC((uint64_t *)a5, v10 - 16, v10 + 8, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 287:
      sub_181316E68((uint64_t)a5, 0LL, 0LL, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 288:
      sub_181316E68((uint64_t)a5, v10 - 16, v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 289:
      sub_181317318((uint64_t)a5, *(void *)(v10 - 64), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 290:
      *(_DWORD *)(v10 - 8) = *((_DWORD *)a5 + 72) + *((_DWORD *)a5 + 70) - *(_DWORD *)(v10 - 16);
      sub_181317748((uint64_t)a5, v10 - 16, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 291:
      sub_181317D2C((uint64_t)a5, *(void *)(v10 - 64), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 292:
      uint64_t v197 = (uint64_t)*a5;
      ++*((_BYTE *)a5 + 36);
      ++*(_DWORD *)(v197 + 432);
      *(_WORD *)(v197 + 436) = 0;
      sub_181318428(a5, *(void *)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 293:
      sub_181318720((uint64_t *)a5, *(void *)(v10 - 112), v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 294:
      sub_181318B5C((uint64_t)a5, 0LL, a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 295:
      sub_181318B5C((uint64_t)a5, (_DWORD *)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 296:
      sub_181319110((uint64_t)a5, (_OWORD *)(v10 - 64), v10 - 40, v10 + 8, *(unsigned int *)(v10 - 88), a6, a7, a8);
      goto LABEL_445;
    case 297:
      sub_181319364((uint64_t)a5);
      goto LABEL_445;
    case 298:
    case 299:
    case 300:
      uint64_t v16 = a5[47];
      unint64_t v17 = *(void **)(v10 + 8);
      if (v16)
      {
        int v18 = (_DWORD)v17 + *(_DWORD *)(v10 + 16) - (_DWORD)v16;
      }

      else
      {
        a5[47] = v17;
        int v18 = *(_DWORD *)(v10 + 16);
      }

      *((_DWORD *)a5 + 96) = v18;
      goto LABEL_445;
    case 301:
    case 302:
      sub_1813193E4((uint64_t *)a5, *(void **)(v10 + 8), 1);
      goto LABEL_445;
    case 303:
      *(_BYTE *)(v10 + 8) = 1;
      goto LABEL_445;
    case 304:
      *(_BYTE *)(v10 - 16) = 0;
      goto LABEL_445;
    case 305:
      *(_BYTE *)(v10 - 40) = 2;
      goto LABEL_445;
    case 306:
      *(void *)(v10 - 112) = sub_18131946C( (uint64_t *)a5,  v10 - 112,  *(void **)(v10 - 88),  *(void *)(v10 - 16),  *(_BYTE *)(v10 - 64));
      goto LABEL_445;
    case 307:
      *(void *)(v10 + 8) = sub_1813195CC((uint64_t *)a5, 0LL, *(void **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 308:
      *(void *)(v10 - 40) = sub_1813195CC( (uint64_t *)a5,  *(_DWORD **)(v10 - 40),  *(void **)(v10 + 8),  a4,  (uint64_t)a5,  a6,  a7,  a8);
      goto LABEL_445;
    case 309:
      sub_1813197C0((uint64_t *)a5, *(void **)(v10 + 8), *(void *)(v10 - 40), a4, (uint64_t)a5, a6, a7, a8);
      *(void *)(*(void *)(v10 + 8) + 64LL) = *(void *)(v10 - 40);
LABEL_363:
      *(void *)(v10 - 40) = *(void *)(v10 + 8);
      goto LABEL_445;
    case 310:
      uint64_t v198 = *(void *)(v10 - 16);
      if (!v198) {
        goto LABEL_367;
      }
      **(void **)(v10 - 16) = sub_181276C14((uint64_t)*a5, *(const void **)(v10 - 88), *(unsigned int *)(v10 - 80));
      goto LABEL_366;
    case 311:
      v199 = *(void **)(v10 + 8);
      v200 = *(void **)(v10 - 40);
      v201 = *(void **)(v10 - 16);
      v202 = (uint64_t *)a5;
      v203 = v199;
      uint64_t v204 = 0LL;
      goto LABEL_373;
    case 312:
      v205 = *(void **)(v10 + 8);
      sub_1813198EC((uint64_t *)a5, v205, *(void **)(v10 - 40), *(void **)(v10 - 16), v10 - 112);
      *(void *)(v10 - 112) = v205;
      goto LABEL_445;
    case 313:
      uint64_t v206 = *(void *)(v10 + 8);
      v207 = *(void **)(v10 - 16);
      if (v206)
      {
        *(void *)(v206 + 16) = 0LL;
        *(void *)(v206 + 24) = v207;
        *(void *)(v10 - 64) = v206;
      }

      else
      {
        if (v207) {
          sub_181311F48(*a5, v207);
        }
        *(void *)(v10 - 64) = 0LL;
      }

      goto LABEL_445;
    case 314:
      v199 = *(void **)(v10 + 8);
      v201 = *(void **)(v10 - 16);
      uint64_t v204 = v10 - 88;
      v202 = (uint64_t *)a5;
      v203 = v199;
      v200 = 0LL;
LABEL_373:
      sub_1813198EC(v202, v203, v200, v201, v204);
      *(void *)(v10 - 88) = v199;
      goto LABEL_445;
    case 315:
      v208 = *(void **)(v10 + 8);
      sub_1813198EC((uint64_t *)a5, v208, 0LL, 0LL, v10 - 16);
      *(void *)(v10 - 16) = v208;
      goto LABEL_445;
    case 316:
      *(void *)(v10 + 32) = sub_181319990((uint64_t *)a5, 0, 90LL, 0LL, 85LL, 0LL, 0LL, a8);
      goto LABEL_445;
    case 317:
      *(void *)(v10 - 40) = sub_181319990( (uint64_t *)a5,  *(_DWORD *)(v10 - 40),  *(unsigned int *)(v10 - 16),  *(unsigned __int8 **)(v10 - 8),  85LL,  0LL,  *(unsigned __int8 *)(v10 + 8),  a8);
      goto LABEL_445;
    case 318:
      *(void *)(v10 - 112) = sub_181319990( (uint64_t *)a5,  *(_DWORD *)(v10 - 112),  *(unsigned int *)(v10 - 64),  *(unsigned __int8 **)(v10 - 56),  *(unsigned int *)(v10 - 16),  *(unsigned __int8 **)(v10 - 8),  *(unsigned __int8 *)(v10 + 8),  a8);
      goto LABEL_445;
    case 321:
    case 323:
    case 325:
      *(void *)(v10 - 16) = *(unsigned __int16 *)(v10 - 22);
      *(void *)(v10 - 8) = 0LL;
      goto LABEL_445;
    case 324:
      uint64_t v209 = *(void *)(v10 - 16);
      *(void *)(v10 - 16) = *(unsigned __int16 *)(v10 + 2);
      *(void *)(v10 - 8) = v209;
      goto LABEL_445;
    case 326:
      *(_BYTE *)(v10 + 32) = 0;
      goto LABEL_445;
    case 327:
      *(_BYTE *)(v10 - 16) = *(_BYTE *)(v10 + 8);
      goto LABEL_445;
    case 328:
    case 329:
      *(_BYTE *)(v10 - 16) = *(_BYTE *)(v10 - 22);
      goto LABEL_445;
    case 330:
      *(_BYTE *)(v10 + 8) = *(_BYTE *)(v10 + 2);
      goto LABEL_445;
    case 332:
      uint64_t v210 = *(void *)(v10 + 8);
      v211 = *(unsigned __int8 **)(v10 - 16);
      if (v210)
      {
        *(void *)(v210 + 72) = v211;
      }

      else if (v211)
      {
        sub_181309110(*a5, v211);
      }

LABEL_419:
      *(void *)(v10 - 16) = *(void *)(v10 + 8);
      goto LABEL_445;
    case 334:
      v212 = sub_181268E34((uint64_t)*a5, 0x90uLL);
      if (v212)
      {
        v212[32] = -90;
        *((void *)v212 + 9) = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = v212;
      }

      else
      {
        v221 = *(unsigned __int8 **)(v10 + 8);
        if (v221) {
          sub_181309110(*a5, v221);
        }
        *(void *)(v10 + 8) = 0LL;
      }

      goto LABEL_445;
    case 335:
      *(void *)(v10 - 64) = *(void *)(v10 - 16);
      goto LABEL_445;
    case 336:
      v213 = sub_181268E34((uint64_t)*a5, 0x90uLL);
      *(void *)(v10 - 16) = v213;
      if (v213) {
        **(void **)(v10 - 16) = sub_181276C14((uint64_t)*a5, *(const void **)(v10 + 8), *(unsigned int *)(v10 + 16));
      }
      goto LABEL_445;
    case 337:
LABEL_366:
      uint64_t v198 = *(void *)(v10 - 16);
LABEL_367:
      *(void *)(v10 - 88) = v198;
      goto LABEL_445;
    default:
      goto LABEL_445;
  }

void sub_181271D6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = a5;
  uint64_t v10 = (char *)a4;
  v962[4] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v14 = *(void *)a1;
  uint64_t v957 = *(void *)(a1 + 16);
  if (!v957)
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(v14 + 96) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v957 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v957) {
      return;
    }
  }

  int v15 = *(_DWORD *)(v957 + 144);
  if (*(_DWORD *)(v957 + 148) <= v15)
  {
    sub_18131044C(v957, 166LL, 1LL, 1LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v957 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v957 + 136) + 40LL * v15;
    *(_DWORD *)uint64_t v16 = 166;
    *(void *)(v16 + 4) = 0x100000001LL;
    *(void *)(v16 + 12) = 0LL;
    *(void *)(v16 + 28) = 0LL;
    *(void *)(v16 + 20) = 0LL;
    *(_DWORD *)(v16 + 36) = 0;
  }

  *(_DWORD *)(a1 + 56) = 2;
  uint64_t v17 = *(void *)a1;
  if (*(_DWORD *)(a3 + 8))
  {
    if (*(_BYTE *)(v17 + 197))
    {
      sub_1812DC47C(a1, "corrupt database", a3, a4, a5, a6, a7, a8, a9);
      return;
    }

    uint64_t v18 = sub_18131EDC8(v17, a2);
    uint64_t v19 = a3;
    if ((v18 & 0x80000000) != 0)
    {
      sub_1812DC47C(a1, "unknown database %T", v20, v21, v22, v23, v24, v25, a2);
      return;
    }
  }

  else
  {
    uint64_t v18 = *(unsigned __int8 *)(v17 + 196);
    uint64_t v19 = a2;
  }

  uint64_t v26 = *(void *)(v14 + 32);
  if ((_DWORD)v18 == 1)
  {
    int v27 = sub_1812FA2F0(a1);
    if (!v19 || v27) {
      return;
    }
  }

  else if (!v19)
  {
    return;
  }

  int v28 = *(const void **)v19;
  if (!*(void *)v19) {
    return;
  }
  size_t v29 = *(unsigned int *)(v19 + 8);
  uint64_t v30 = (char *)sub_1812F2264(v14, v29 + 1);
  if (!v30) {
    return;
  }
  uint64_t v31 = v30;
  memcpy(v30, v28, v29);
  v31[v29] = 0;
  int v38 = *v31;
  if ((char)byte_1813C6558[*v31] < 0)
  {
    uint64_t v39 = 0LL;
    if (v38 == 91) {
      int v38 = 93;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v41 = i;
      int v42 = v31[i];
      if (v42 == v38)
      {
        ++i;
        LOBYTE(v42) = v38;
      }

      v31[v39++] = v42;
    }

    v31[v39] = 0;
  }

  if (v9)
  {
    uint64_t v10 = (char *)sub_18127F588(v14, "-%T", v32, v33, v34, v35, v36, v37, (char)v10);
  }

  else if (v10)
  {
    uint64_t v44 = *(const void **)v10;
    if (*(void *)v10)
    {
      size_t v45 = *((unsigned int *)v10 + 2);
      uint64_t v46 = (char *)sub_1812F2264(v14, v45 + 1);
      uint64_t v10 = v46;
      if (v46)
      {
        memcpy(v46, v44, v45);
        v10[v45] = 0;
        int v47 = *v10;
        if ((char)byte_1813C6558[*v10] < 0)
        {
          uint64_t v48 = 0LL;
          if (v47 == 91) {
            int v47 = 93;
          }
          for (int j = 1; ; ++j)
          {
            uint64_t v50 = j;
            int v51 = v10[j];
            if (v51 == v47)
            {
              ++j;
              LOBYTE(v51) = v47;
            }

            v10[v48++] = v51;
          }

          v10[v48] = 0;
        }
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }
  }

  v950 = (sqlite3 *)v14;
  __s = v10;
  v946 = v31;
  if (*(_DWORD *)(a3 + 8)) {
    uint64_t v43 = *(const char **)(v26 + 32LL * v18);
  }
  else {
    uint64_t v43 = 0LL;
  }
  uint64_t v52 = *(void *)a1;
  uint64_t v53 = *(uint64_t (**)(void, uint64_t, char *, char *, const char *, void))(*(void *)a1 + 528LL);
  if (v53 && !*(_BYTE *)(v52 + 197) && !*(_BYTE *)(a1 + 302))
  {
    int v88 = v53(*(void *)(v52 + 536), 19LL, v31, v10, v43, *(void *)(a1 + 368));
    if (v88 == 1)
    {
      int v95 = 23;
      int v96 = "not authorized";
    }

    else
    {
      if ((v88 & 0xFFFFFFFD) == 0)
      {
        if (v88) {
          goto LABEL_1082;
        }
        goto LABEL_49;
      }

      int v95 = 1;
      int v96 = "authorizer malfunction";
    }

    sub_1812DC47C(a1, v96, v89, v90, v91, v92, v93, v94, v920);
    *(_DWORD *)(a1 + 24) = v95;
    goto LABEL_1082;
  }

LABEL_49:
  v962[0] = 0LL;
  v962[1] = v31;
  v962[2] = v10;
  v962[3] = 0LL;
  *((_DWORD *)v950 + 172) = 0;
  int v54 = sqlite3_file_control(v950, v43, 14, v962);
  if (v54)
  {
    int v63 = v54;
    if (v54 != 12)
    {
      if (v962[0])
      {
        sub_1812DC47C(a1, "%s", v56, v57, v58, v59, v60, v61, (char)v962[0]);
        sqlite3_free(v962[0]);
      }

      ++*(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = v63;
      goto LABEL_1082;
    }

    int v64 = 0;
    int v65 = 73;
    uint64_t v66 = &off_189B6DCE8;
    while (1)
    {
      unsigned int v67 = v64 + v65;
      int v68 = v64 + v65 < 0 != __OFADD__(v64, v65) ? v67 + 1 : v64 + v65;
      uint64_t v69 = (uint64_t)v68 >> 1;
      __int128 v70 = &(&off_189B6DCE8)[3 * (v68 >> 1)];
      if (*v70) {
        break;
      }
      int v72 = 1;
LABEL_63:
      if (v72 < 0) {
        int v65 = v69 - 1;
      }
      else {
        int v64 = v69 + 1;
      }
      if (v64 > v65) {
        goto LABEL_1082;
      }
    }

    for (uint64_t k = 0LL; ; ++k)
    {
      uint64_t v73 = v31[k];
      uint64_t v74 = (*v70)[k];
      if ((_DWORD)v73 == (_DWORD)v74)
      {
        if (!v31[k])
        {
          char v82 = *((_BYTE *)&off_189B6DCE8 + 24 * (int)v69 + 9);
          if ((v82 & 1) != 0)
          {
            int v83 = sub_181310A28((uint64_t *)a1, v55, v56, v57, v58, v59, v60, v61);
            uint64_t v66 = &off_189B6DCE8;
            if (v83) {
              goto LABEL_1082;
            }
          }

          zDbName = (char *)v43;
          if ((v82 & 2) == 0 && ((v82 & 4) == 0 || !__s))
          {
            sub_181345414((uint64_t *)v957, (uint64_t)v70);
            uint64_t v66 = &off_189B6DCE8;
          }

          uint64_t v84 = (uint64_t)v950;
          switch(LOBYTE((&off_189B6DCE8)[3 * (int)v69 + 1]))
          {
            case 0:
              if (__s
                && !sub_1812E4D40(__s, (unint64_t *)v961)
                && ((unint64_t)v961[0] & 0x8000000000000000LL) == 0)
              {
                *((_DWORD *)v950 + 192) = (uint64_t)v961[0] & 0x7FFFFFFF;
              }

              uint64_t v85 = *((int *)v950 + 192);
              goto LABEL_477;
            case 1:
              int v97 = (int)(&off_189B6DCE8)[3 * (int)v69 + 2];
              sub_1812DC804((_DWORD *)v957, v18);
              if (__s && (v67 > 0x2F || ((1LL << v67) & 0xC00030000000LL) == 0))
              {
                uint64_t v526 = sub_1812B14B8(v957, 2LL, (uint64_t)&unk_1813CA43B, v98, v99, v100, v101, v102);
                *(_DWORD *)(v526 + 4) = v18;
                *(_DWORD *)(v526 + 44) = v18;
                *(_DWORD *)(v526 + 48) = v97;
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                *(_DWORD *)(v526 + 52) = v961[0];
                *(_WORD *)(v526 + 42) = 1;
                BOOL v584 = v97 == 1;
                uint64_t v84 = (uint64_t)v950;
                uint64_t v116 = v946;
                if (v584 && (*((_BYTE *)v950 + 51) & 0x10) != 0) {
                  *(_BYTE *)(v526 + 40) = -72;
                }
                goto LABEL_635;
              }

              uint64_t v103 = (_DWORD *)sub_1812B14B8(v957, 3LL, (uint64_t)&unk_1813CA443, v98, v99, v100, v101, v102);
              v103[1] = v18;
              v103[11] = v18;
              v103[13] = v97;
              uint64_t v104 = *(unsigned int *)(v957 + 144);
              uint64_t v105 = *(void *)(v957 + 136);
              uint64_t v106 = v104 - 1;
              v107 = (unsigned __int8 *)(v105 + 40);
              do
              {
                int v108 = *v107;
                v107 += 40;
                if (v108 == 166) {
                  goto LABEL_535;
                }
                --v106;
              }

              while (v106);
              goto LABEL_1082;
            case 2:
              uint64_t v109 = *(void *)(v26 + 32LL * v18 + 8);
              if (!__s)
              {
                uint64_t v454 = sub_18130F79C(v109);
                goto LABEL_560;
              }

              int v110 = sub_1813456B8((unsigned __int8 *)__s);
              *((_BYTE *)v950 + 106) = v110;
              uint64_t v116 = v946;
              if (!sub_18130F6DC(v109, v110) && (v110 - 1) <= 1)
              {
                int v117 = *(_DWORD *)(v957 + 144);
                uint64_t v118 = (_DWORD *)sub_1812B14B8(v957, 5LL, (uint64_t)&unk_1813CA405, v111, v112, v113, v114, v115);
                v118[1] = v18;
                v118[11] = v18;
                int v119 = v117 + 4;
                uint64_t v116 = v946;
                v118[22] = v119;
                v118[41] = v18;
                v118[43] = v110 - 1;
                sub_1812DC804((_DWORD *)v957, v18);
              }

              goto LABEL_635;
            case 3:
              if (!__s)
              {
                sub_181345414((uint64_t *)v957, (uint64_t)v70);
                uint64_t v454 = ((unint64_t)(&off_189B6DCE8)[3 * (int)v69 + 2] & *((void *)v950 + 6)) != 0;
                uint64_t v455 = v957;
                goto LABEL_561;
              }

              if (*((_BYTE *)v950 + 101)) {
                unint64_t v120 = (unint64_t)(&off_189B6DCE8)[3 * (int)v69 + 2];
              }
              else {
                unint64_t v120 = (unint64_t)(&off_189B6DCE8)[3 * (int)v69 + 2] & 0xFFFFFFFFFFFFBFFFLL;
              }
              if (sub_181345AA0(__s, 1, 0))
              {
                *((void *)v950 + 6) |= v120;
                goto LABEL_700;
              }

              *((void *)v950 + 6) &= ~v120;
              if (v120 == 0x80000)
              {
                *((void *)v950 + 101) = 0LL;
                goto LABEL_700;
              }

              if ((v120 & 1) == 0) {
                goto LABEL_700;
              }
              v527 = "reset";
              v528 = __s;
              while (2)
              {
                uint64_t v529 = *v528;
                uint64_t v530 = *(unsigned __int8 *)v527;
                if ((_DWORD)v529 == (_DWORD)v530)
                {
                  if (!*v528)
                  {
                    sub_1812D6078((uint64_t)v950);
                    goto LABEL_700;
                  }
                }

                else if (byte_1813C6343[v529] != byte_1813C6343[v530])
                {
LABEL_700:
                  sub_181319B54(v957, 166LL, v121, v122, v123, v124, v125, v126);
                  sub_1813457B4((uint64_t)v950);
                  goto LABEL_1082;
                }

                ++v528;
                ++v527;
                continue;
              }

            case 5:
              if (__s)
              {
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                uint64_t v127 = v26 + 32LL * v18;
                uint64_t v128 = *(void *)(v127 + 24);
                *(_DWORD *)(v128 + 116) = v961[0];
                sub_1812FA554(*(void *)(v127 + 8), (_DWORD *)(v128 + 116));
                goto LABEL_634;
              }

              uint64_t v454 = *(int *)(*(void *)(v26 + 32LL * v18 + 24) + 116LL);
              goto LABEL_560;
            case 6:
              if (__s)
              {
                LODWORD(v961[0]) = 1;
                int v129 = sub_18130DE18((unsigned __int8 *)__s, v961);
                int v130 = (int)v961[0];
                if (!LODWORD(v961[0]))
                {
                  LODWORD(v961[0]) = 1;
                  int v130 = 1;
                }

                sub_1812FA934(*(void *)(v26 + 32LL * v18 + 8), v130);
                else {
                  unint64_t v131 = *((void *)v950 + 6) & 0xFFFFFFFFFFFFFFDFLL;
                }
                *((void *)v950 + 6) = v131;
                uint64_t v116 = v946;
                goto LABEL_361;
              }

              if ((*((_BYTE *)v950 + 48) & 0x20) == 0) {
                goto LABEL_585;
              }
              uint64_t v456 = (int)sub_1812FA934(*(void *)(v26 + 32LL * v18 + 8), 0);
              goto LABEL_586;
            case 7:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              BOOL v132 = sub_181345AA0(__s, 1, 0) != 0;
              sub_181345E54((uint64_t)v950, v132);
              goto LABEL_635;
            case 8:
              *(_DWORD *)(a1 + 56) = 2;
              uint64_t v133 = (void *)*((void *)v950 + 81);
              if (v133)
              {
                uint64_t v134 = 0LL;
                do
                {
                  uint64_t v135 = (v134 + 1);
                  sub_181345BD0(v957, 1LL, (uint64_t)"is", v57, v58, v59, v60, v61, v134);
                  uint64_t v133 = (void *)*v133;
                  uint64_t v134 = v135;
                }

                while (v133);
              }

              goto LABEL_1082;
            case 9:
              uint64_t v136 = 0LL;
              *(_DWORD *)(a1 + 56) = 1;
              do
              {
                uint64_t v137 = off_189B6F640[v136];
                if (!v137) {
                  break;
                }
                sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 1LL, 0LL, (uint64_t)v137, 0LL, v61);
                sub_1813103F4(v957, 84LL, 1LL, 1LL, v138, v139, v140, v141);
                ++v136;
              }

              while (v136 != 69);
              uint64_t v142 = *(unsigned int *)(v957 + 144);
              uint64_t v105 = *(void *)(v957 + 136);
              uint64_t v143 = v142 - 1;
              uint64_t v144 = (unsigned __int8 *)(v105 + 40);
              while (1)
              {
                int v145 = *v144;
                v144 += 40;
                if (v145 == 166) {
                  break;
                }
                if (!--v143) {
                  goto LABEL_1082;
                }
              }

    if (v14)
    {
      sqlite3_free_table((char **)v25 + 1);
      return v14;
    }

    uint64_t v24 = (uint64_t)v25;
    if (v27 <= HIDWORD(v27) || (uint64_t v24 = sub_18127D33C((uint64_t)v25, 8LL * HIDWORD(v27))) != 0)
    {
      *pazResult = (char **)(v24 + 8);
      if (pnColumn) {
        *pnColumuint64_t n = DWORD2(v27);
      }
      uint64_t v14 = 0;
      if (pnRow) {
        *pnRow = DWORD1(v27);
      }
      return v14;
    }

    sqlite3_free_table((char **)v25 + 1);
    goto LABEL_17;
  }

  return sub_1812CF36C(157459);
}
      }

            v57[v17] = 0;
          }

          int v9 = v57;
          __strlcat_chk();
        }
      }

      futimes(*(_DWORD *)(v4 + 24), 0LL);
      if (v7) {
        uint64_t v36 = v12;
      }
      else {
        uint64_t v36 = 1;
      }
      if ((v36 & 1) != 0 || (v37 = *(void *)(v4 + 16)) == 0 || (int v2 = 5LL, *(int *)(v37 + 24) <= 1))
      {
        int v2 = sub_1812F5664(a1, (uint64_t)&v62, 4LL);
        if (!(_DWORD)v2)
        {
          LOBYTE(c.count[0]) = 2;
          *(_OWORD *)((char *)c.count + 1) = v62;
          __strlcpy_chk();
          int v38 = *(unsigned int *)(v4 + 24);
          uint64_t v39 = (int)(strlen((const char *)&c.hash[2] + 1) + 17);
          while ((off_18C54FD58(v38, v39) & 0x80000000) != 0 && *__error() == 4)
            ;
          int v2 = sub_1812B0268(v4, (char *)&c, v39, 0LL);
          fsync(*(_DWORD *)(v4 + 24));
          int v40 = !v12;
          if ((_DWORD)v2) {
            int v40 = 1;
          }
        }
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64LL))(v4, 1LL);
    }

    uint64_t v6 = 0;
  }

  uint64_t v41 = *(_DWORD *)(a1 + 24);
  if ((v41 & 0x80000000) == 0 && off_18C54FCE0(v41))
  {
    int v42 = *(const char **)(a1 + 56);
    uint64_t v43 = *__error();
    memset(&c, 0, 80);
    strerror_r(v43, (char *)&c, 0x4FuLL);
    uint64_t v44 = &byte_1813CEAEE;
    if (v42) {
      uint64_t v44 = v42;
    }
    sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50979, v43, "close", v44, (const char *)&c);
  }

  *(_DWORD *)(a1 + 24) = -1;
  size_t v45 = sub_1812F2E3C(*(char **)(v1 + 32), *(_DWORD *)(a1 + 120), 0LL, 0);
  if ((v45 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 24) = v45;
    goto LABEL_77;
  }

  int v2 = sub_1812F2E28(50988);
LABEL_95:
  (*(void (**)(uint64_t, void))(*(void *)v4 + 64LL))(v4, 0LL);
  return v2;
}

  if (v15 > 19 * v6)
  {
    size_t v29 = v11 == 0;
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29) {
      uint64_t v22 = 0x8000000000000000LL;
    }
    *a2 = v22;
    return 2LL;
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = v14;
    do
    {
      uint64_t v25 = *v24;
      uint64_t v26 = a92233720368547[v23];
      if (v23 > 0x10) {
        break;
      }
      ++v23;
      v24 += v6;
    }

    while (v25 == v26);
    int v27 = (char)v25 - (char)v26;
    if ((char)v25 == (char)v26)
    {
      int v28 = (char)v14[18 * v6] - 56;
      if (v28 < 0) {
        return result;
      }
    }

    else
    {
      int v28 = 10 * v27;
      if (10 * v27 < 0) {
        return result;
      }
    }

    size_t v29 = v11 == 0;
    uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29) {
      uint64_t v30 = 0x8000000000000000LL;
    }
    *a2 = v30;
    if (v29) {
      uint64_t v31 = result;
    }
    else {
      uint64_t v31 = 3;
    }
    if (v28) {
      return 2LL;
    }
    else {
      return v31;
    }
  }

      uint64_t v26 = strlen(v9);
      a3 = v26 & 0x3FFFFFFF;
      if ((v26 & 0x3FFFFFFF) != 0)
      {
        uint64_t v25 = v9;
LABEL_51:
        sub_1812D3A10((uint64_t)&v32, v25, a3);
      }

  if (!v12) {
    return;
  }
  if (v10 >= 0) {
    uint64_t v16 = v10;
  }
  else {
    uint64_t v16 = v10 + 1;
  }
  uint64_t v17 = sub_18134FED0(a1, (v16 >> 1) + 1);
  uint64_t v18 = (char *)v17;
  if (!v17)
  {
    LODWORD(v20) = 0;
    goto LABEL_95;
  }

  LOBYTE(v19) = *v8;
  LODWORD(v20) = v17;
  if (!*v8)
  {
LABEL_95:
    if (!a1 || (_DWORD)v20 - (_DWORD)v18 < 0) {
      sub_1812CF36C(97366);
    }
    else {
      sub_1812D7A8C((uint64_t)a1, v18, (_DWORD)v20 - (_DWORD)v18, 0, (uint64_t (*)(uint64_t))sqlite3_free);
    }
    return;
  }

  uint64_t v20 = (_BYTE *)v17;
LABEL_56:
  while (1)
  {
    uint64_t v21 = v8 + 1;
    uint64_t v34 = *v21;
    if ((byte_1813C6558[v34] & 8) == 0) {
      goto LABEL_88;
    }
    *v20++ = ((((char)(2 * v34) >> 7) & 0xF9) + v34) & 0xF | (16
    uint64_t v35 = v8[2];
    v8 += 2;
    LOBYTE(v19) = v35;
    if (!v35) {
      goto LABEL_95;
    }
  }

  uint64_t v19 = v19;
  if (v19 >= 0xC0u)
  {
    uint64_t v19 = byte_1813C6D06[v19 - 192];
    uint64_t v22 = *v21;
    if ((*v21 & 0xC0) == 0x80)
    {
      do
      {
        uint64_t v23 = *++v21;
        uint64_t v19 = v22 & 0x3F | (v19 << 6);
        uint64_t v22 = v23;
      }

      while ((v23 & 0xC0) == 0x80);
    }

    if (v19 >> 11 == 27 || v19 < 0x80 || v19 >> 1 == 0x7FFF) {
      uint64_t v19 = 65533;
    }
  }

  unsigned int v8 = v21;
  uint64_t v26 = v12;
  while (v26 < &v12[v11])
  {
    uint64_t v30 = *v26++;
    size_t v29 = v30;
    uint64_t v31 = v30 - 192;
    if (v30 >= 0xC0)
    {
      size_t v29 = byte_1813C6D06[v31];
      uint64_t v32 = *v26;
      if ((*v26 & 0xC0) == 0x80)
      {
        do
        {
          uint64_t v33 = *++v26;
          size_t v29 = v32 & 0x3F | (v29 << 6);
          uint64_t v32 = v33;
        }

        while ((v33 & 0xC0) == 0x80);
      }

      if (v29 >> 11 == 27 || v29 < 0x80 || v29 >> 1 == 0x7FFF) {
        size_t v29 = 65533;
      }
    }

    if (v29 == v19)
    {
      LOBYTE(v19) = *v8;
      if (*v8) {
        goto LABEL_56;
      }
      goto LABEL_95;
    }
  }

    sub_181321444((_BYTE *)a1, (uint64_t)v24, 0LL);
    int v47 = *(unsigned int **)(v20 + 48);
    if (!v47)
    {
      int v40 = *(_DWORD *)(a1 + 48) != 0;
      goto LABEL_62;
    }

    uint64_t v48 = *v47;
    if ((int)v48 <= 0)
    {
      int v40 = *(_DWORD *)(a1 + 48) != 0;
LABEL_61:
      *(void *)(v31 + 32) = 0LL;
LABEL_62:
      *(void *)(v31 + 40) = 0LL;
      sub_18128FDA0((void *)v2, v31, 1);
      uint64_t v41 = *(int **)(v20 + 32);
      if (!v41) {
        goto LABEL_19;
      }
LABEL_63:
      uint64_t v55 = *v41;
      if (*v41 >= 1 && v40 == 0)
      {
        uint64_t v57 = 0LL;
        uint64_t v58 = 12LL;
        do
        {
          uint64_t v59 = *(void *)&v41[v58];
          if (v59)
          {
            sub_181321444((_BYTE *)a1, v59, 0LL);
            uint64_t v41 = *(int **)(v20 + 32);
            uint64_t v55 = *v41;
          }

          ++v57;
          v58 += 26LL;
        }

        while (v57 < v55);
      }

      uint64_t v33 = *(void *)(a1 + 40);
      if (v33)
      {
        do
        {
          if (*(void *)(v33 + 24)) {
            uint64_t v19 = sub_1813755BC((int **)(v33 + 24), 0LL);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v33 = *(void *)(v33 + 16);
          if (v33) {
            uint64_t v37 = v19 == 0;
          }
          else {
            uint64_t v37 = 0;
          }
        }

        while (v37);
      }

      else
      {
LABEL_50:
        uint64_t v19 = 0;
      }

  int v15 = *(void *)(v1 + 168);
  if (!v15) {
    goto LABEL_56;
  }
  uint64_t v16 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_55;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v15);
  --qword_18C468B10;
  off_18C4653A8(v15);
  int v15 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v16 = &xmmword_18C465410;
LABEL_55:
    (*v16)(v15);
  }

LABEL_535:
              *(_BYTE *)(v105 + 40) = -72;
              goto LABEL_1082;
            case 0xB:
              *(_DWORD *)(a1 + 56) = 3;
              int v146 = *((_DWORD *)v950 + 10);
              if (v146 >= 1)
              {
                uint64_t v147 = 0LL;
                for (uint64_t m = 0LL; m < v146; ++m)
                {
                  if (*(void *)(*((void *)v950 + 4) + v147 + 8))
                  {
                    sub_181345BD0(v957, 1LL, (uint64_t)"iss", v57, v58, v59, v60, v61, m);
                    int v146 = *((_DWORD *)v950 + 10);
                  }

                  v147 += 32LL;
                }
              }

              goto LABEL_1082;
            case 0xC:
              sub_1812DC804((_DWORD *)v957, v18);
              if (!__s)
              {
                *(_DWORD *)(a1 + 56) += 2;
                v457 = (_DWORD *)sub_1812B14B8(v957, 9LL, (uint64_t)&unk_1813CA3E1, v150, v151, v152, v153, v154);
                v457[1] = v18;
                v457[11] = v18;
                v457[61] = 128;
                uint64_t v116 = v946;
                goto LABEL_685;
              }

              LODWORD(v961[0]) = 0;
              sub_18130DE18((unsigned __int8 *)__s, v961);
              if (LODWORD(v961[0]) == 0x80000000) {
                unsigned int v155 = 0x7FFFFFFF;
              }
              else {
                unsigned int v155 = -LODWORD(v961[0]);
              }
              if (SLODWORD(v961[0]) >= 0) {
                uint64_t v156 = LODWORD(v961[0]);
              }
              else {
                uint64_t v156 = v155;
              }
              sub_18131EC34(a1, 0, v18);
              sub_181279C3C(v957, 100LL, v18, 3LL, v156, v157, v158, v159);
              uint64_t v160 = v26 + 32LL * v18;
              uint64_t v161 = *(void *)(v160 + 24);
              *(_DWORD *)(v161 + 116) = v156;
              sub_1812FA554(*(void *)(v160 + 8), (_DWORD *)(v161 + 116));
              goto LABEL_634;
            case 0xD:
              if (__s)
              {
                uint64_t v116 = v946;
                if ((*((_BYTE *)v950 + 44) & 0x40) != 0) {
                  goto LABEL_635;
                }
                uint64_t v162 = 0LL;
                uint64_t v163 = &off_189B6E768;
                while (1)
                {
                  uint64_t v164 = __s[v162];
                  uint64_t v165 = aUtf8_0[v162];
                  if ((_DWORD)v164 == (_DWORD)v165)
                  {
                    if (!__s[v162])
                    {
LABEL_1058:
                      unsigned int v887 = *((unsigned __int8 *)v163 + 8);
                      if (v887) {
                        unsigned int v888 = v887;
                      }
                      else {
                        unsigned int v888 = 2;
                      }
                      *(_BYTE *)(*(void *)(*(void *)(v84 + 32) + 24LL) + 113LL) = v888;
                      sub_18130D2FC(v84, v888);
                      goto LABEL_1082;
                    }
                  }

                  else if (byte_1813C6343[v164] != byte_1813C6343[v165])
                  {
                    uint64_t v166 = 0LL;
                    uint64_t v163 = &off_189B6E778;
                    while (1)
                    {
                      uint64_t v167 = __s[v166];
                      uint64_t v168 = aUtf8[v166];
                      if ((_DWORD)v167 == (_DWORD)v168)
                      {
                        if (!__s[v166])
                        {
LABEL_1057:
                          uint64_t v84 = (uint64_t)v950;
                          goto LABEL_1058;
                        }
                      }

                      else if (byte_1813C6343[v167] != byte_1813C6343[v168])
                      {
                        uint64_t v169 = 0LL;
                        uint64_t v163 = &off_189B6E788;
                        while (1)
                        {
                          uint64_t v170 = __s[v169];
                          uint64_t v171 = aUtf16le[v169];
                          if ((_DWORD)v170 == (_DWORD)v171)
                          {
                            if (!__s[v169]) {
                              goto LABEL_1057;
                            }
                          }

                          else if (byte_1813C6343[v170] != byte_1813C6343[v171])
                          {
                            uint64_t v172 = 0LL;
                            uint64_t v163 = &off_189B6E798;
                            while (1)
                            {
                              uint64_t v443 = __s[v172];
                              uint64_t v444 = aUtf16be[v172];
                              if ((_DWORD)v443 == (_DWORD)v444)
                              {
                                if (!__s[v172]) {
                                  goto LABEL_1057;
                                }
                              }

                              else if (byte_1813C6343[v443] != byte_1813C6343[v444])
                              {
                                uint64_t v445 = 0LL;
                                uint64_t v163 = &off_189B6E7A8;
                                while (1)
                                {
                                  uint64_t v489 = __s[v445];
                                  uint64_t v490 = aUtf16le_0[v445];
                                  if ((_DWORD)v489 == (_DWORD)v490)
                                  {
                                    if (!__s[v445]) {
                                      goto LABEL_1057;
                                    }
                                  }

                                  else if (byte_1813C6343[v489] != byte_1813C6343[v490])
                                  {
                                    uint64_t v491 = 0LL;
                                    uint64_t v163 = &off_189B6E7B8;
                                    while (1)
                                    {
                                      uint64_t v515 = __s[v491];
                                      uint64_t v516 = aUtf16be_0[v491];
                                      if ((_DWORD)v515 == (_DWORD)v516)
                                      {
                                        if (!__s[v491]) {
                                          goto LABEL_1057;
                                        }
                                      }

                                      else if (byte_1813C6343[v515] != byte_1813C6343[v516])
                                      {
                                        uint64_t v517 = 0LL;
                                        uint64_t v163 = &off_189B6E7C8;
                                        while (1)
                                        {
                                          uint64_t v882 = __s[v517];
                                          uint64_t v883 = aUtf16[v517];
                                          if ((_DWORD)v882 == (_DWORD)v883)
                                          {
                                            if (!__s[v517]) {
                                              goto LABEL_1057;
                                            }
                                          }

                                          else if (byte_1813C6343[v882] != byte_1813C6343[v883])
                                          {
                                            uint64_t v884 = 0LL;
                                            uint64_t v163 = &off_189B6E7D8;
                                            while (1)
                                            {
                                              uint64_t v885 = __s[v884];
                                              uint64_t v886 = aUtf16_0[v884];
                                              if ((_DWORD)v885 == (_DWORD)v886)
                                              {
                                                if (!__s[v884]) {
                                                  goto LABEL_1057;
                                                }
                                              }

                                              else if (byte_1813C6343[v885] != byte_1813C6343[v886])
                                              {
                                                sub_1812DC47C( a1,  "unsupported encoding: %s",  v56,  v57,  v58,  v59,  v60,  v61,  (char)__s);
                                                goto LABEL_1082;
                                              }

                                              ++v884;
                                            }
                                          }

                                          ++v517;
                                        }
                                      }

                                      ++v491;
                                    }
                                  }

                                  ++v445;
                                }
                              }

                              ++v172;
                            }
                          }

                          ++v169;
                        }
                      }

                      ++v166;
                    }
                  }

                  ++v162;
                }
              }

              uint64_t v116 = v946;
              v458 = (&off_189B6E768)[2 * *(unsigned __int8 *)(*(void *)a1 + 100LL)];
              goto LABEL_684;
            case 0xE:
              int v173 = *(_DWORD *)(a1 + 56);
              uint64_t v174 = (v173 + 5);
              *(_DWORD *)(a1 + 56) = v174;
              uint64_t v175 = __s;
              uint64_t v176 = *(void **)(*(void *)(*((void *)v950 + 4) + 32LL * v18 + 24) + 16LL);
              if (!v176) {
                goto LABEL_1082;
              }
              unsigned int v938 = v173 + 2;
              unsigned int v940 = v173 + 1;
              unsigned int v936 = v173 + 3;
              do
              {
                while (1)
                {
                  if (v175)
                  {
                    uint64_t v177 = sub_18129EAF4(a1, 0, v175, zDbName, v58, v59, v60, v61);
                    uint64_t v176 = 0LL;
                  }

                  else
                  {
                    uint64_t v177 = v176[2];
                    uint64_t v176 = (void *)*v176;
                  }

                  if (v177 && !*(_BYTE *)(v177 + 63) && *(void *)(v177 + 72)) {
                    break;
                  }
                  if (!v176) {
                    goto LABEL_1082;
                  }
                }

                v930 = v176;
                uint64_t v178 = *(void *)(v177 + 96);
                uint64_t v179 = *(void *)(v84 + 32);
                if (v178)
                {
                  v180 = (uint64_t *)(v179 + 24);
                  LODWORD(v181) = -1;
                  do
                  {
                    uint64_t v182 = *v180;
                    v180 += 4;
                    uint64_t v181 = (v181 + 1);
                  }

                  while (v182 != v178);
                }

                else
                {
                  uint64_t v181 = 4294934528LL;
                }

                zDbName = *(char **)(v179 + 32LL * (int)v181);
                sub_18128BBA8(a1, v181);
                sub_181319D20(a1, v181, *(_DWORD *)(v177 + 40), 0, *(void *)v177);
                int v186 = v174 + *(__int16 *)(v177 + 54);
                if (*(_DWORD *)(a1 + 56) < v186) {
                  *(_DWORD *)(a1 + 56) = v186;
                }
                sub_18128BBE0((void *)a1, 0LL, v181, v177, 112LL, v183, v184, v185);
                sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, v940, 0LL, *(void *)v177, 0LL, v187);
                uint64_t v193 = *(void *)(v177 + 72);
                if (v193)
                {
                  uint64_t v194 = 1LL;
                  uint64_t v195 = zDbName;
                  while (1)
                  {
                    uint64_t v196 = sub_1812E2C64((uint64_t)v950, *(char **)(v193 + 16), v195);
                    if (v196)
                    {
                      uint64_t v197 = v196;
                      v961[0] = 0LL;
                      sub_181319D20(a1, v181, *(_DWORD *)(v196 + 40), 0, *(void *)v196);
                      uint64_t v204 = v961[0];
                      if (v961[0])
                      {
                        sub_181279C3C(v957, 112LL, v194, *((unsigned int *)v961[0] + 22), v181, v201, v202, v203);
                        sub_181319D4C(a1, (uint64_t)v204);
                      }

                      else
                      {
                        sub_18128BBE0((void *)a1, v194, v181, v197, 112LL, v201, v202, v203);
                      }

                      uint64_t v195 = zDbName;
                    }

                    uint64_t v194 = (v194 + 1);
                    uint64_t v193 = *(void *)(v193 + 8);
                    if (!v193) {
                      goto LABEL_205;
                    }
                  }
                }

                LODWORD(v194) = 1;
LABEL_205:
                int v932 = sub_181319BA8(v957, 36LL, 0LL, v188, v189, v190, v191, v192);
                uint64_t v209 = *(void *)(v177 + 72);
                uint64_t v210 = zDbName;
                v211 = v950;
                if (v209)
                {
                  int v212 = 1;
                  do
                  {
                    unsigned int v952 = v212;
                    uint64_t v217 = sub_1812E2C64((uint64_t)v211, *(char **)(v209 + 16), v210);
                    v960 = 0LL;
                    v961[0] = 0LL;
                    if (v217) {
                      sub_18133FFAC((void **)a1, v217, v209, v961, (uint64_t *)&v960, v214, v215, v216);
                    }
                    int v219 = *(_DWORD *)(a1 + 68);
                    uint64_t v220 = (v219 - 1);
                    *(_DWORD *)(a1 + 68) = v220;
                    uint64_t v221 = *(unsigned int *)(v209 + 40);
                    int v943 = v219;
                    if ((int)v221 >= 1)
                    {
                      uint64_t v934 = v217;
                      uint64_t v222 = 0LL;
                      uint64_t v223 = 0LL;
                      char v224 = (unsigned int *)(v209 + 64);
                      do
                      {
                        if (v960) {
                          uint64_t v226 = (unsigned int *)((char *)v960 + v222);
                        }
                        else {
                          uint64_t v226 = v224;
                        }
                        *(double *)v218.i64 = sub_18131C0EC(v957, v177, 0LL, *v226, v174 + v223, v214, v215, v216, v218);
                        int v227 = *(_DWORD *)(v957 + 144);
                        if (*(_DWORD *)(v957 + 148) > v227)
                        {
                          *(_DWORD *)(v957 + 144) = v227 + 1;
                          uint64_t v225 = *(void *)(v957 + 136) + 40LL * v227;
                          *(_DWORD *)uint64_t v225 = 50;
                          *(_DWORD *)(v225 + 4) = v174 + v223;
                          *(_DWORD *)(v225 + 8) = v220;
                          *(void *)(v225 + 12) = 0LL;
                          *(void *)(v225 + 28) = 0LL;
                          *(void *)(v225 + 20) = 0LL;
                          *(_DWORD *)(v225 + 36) = 0;
                        }

                        else
                        {
                          sub_18131044C(v957, 50LL, v174 + v223, v220, 0LL, v214, v215, v216);
                        }

                        ++v223;
                        uint64_t v221 = *(int *)(v209 + 40);
                        v222 += 4LL;
                        v224 += 4;
                      }

                      while (v223 < v221);
                      uint64_t v210 = zDbName;
                      v211 = v950;
                      uint64_t v217 = v934;
                    }

                    if (v961[0])
                    {
                      uint64_t v228 = v961[0][4];
                      uint64_t v229 = v221;
                      if (!v228)
                      {
                        uint64_t v228 = sub_181338578((uint64_t)v211, (uint64_t)v961[0]);
                        uint64_t v229 = *(unsigned int *)(v209 + 40);
                      }

                      uint64_t v230 = v957;
                      sub_1812B9B68((uint64_t *)v957, 96LL, v174, v221, 0LL, v228, v229, v216);
                      unsigned int v231 = v952;
                      sub_1812DC7B4(v957, 29LL, v952, v220, v174, *(unsigned int *)(v209 + 40), v232, v233);
                    }

                    else
                    {
                      uint64_t v230 = v957;
                      unsigned int v231 = v952;
                      if (v217)
                      {
                        sub_181279C3C( v957,  30LL,  v952,  (*(_DWORD *)(v957 + 144) + 2),  v174,  v214,  v215,  v216);
                        sub_181319CC8(v957, v220, v234, v235, v236, v237, v238, v239);
                      }
                    }

                    if ((*(_DWORD *)(v177 + 48) & 0x80) != 0) {
                      uint64_t v240 = 75LL;
                    }
                    else {
                      uint64_t v240 = 135LL;
                    }
                    sub_1813103F4(v230, v240, 0LL, v938, v213, v214, v215, v216);
                    sub_181345BD0(v230, v936, (uint64_t)"siX", v241, v242, v243, v244, v245, *(void *)(v209 + 16));
                    int v246 = *(_DWORD *)(v230 + 144);
                    if (*(_DWORD *)(v230 + 148) <= v246)
                    {
                      sub_18131044C(v230, 84LL, v940, 4LL, 0LL, v206, v207, v208);
                    }

                    else
                    {
                      *(_DWORD *)(v230 + 144) = v246 + 1;
                      uint64_t v247 = *(void *)(v230 + 136) + 40LL * v246;
                      *(_DWORD *)uint64_t v247 = 84;
                      *(_DWORD *)(v247 + 4) = v940;
                      *(_DWORD *)(v247 + 8) = 4;
                      *(void *)(v247 + 12) = 0LL;
                      *(void *)(v247 + 28) = 0LL;
                      *(void *)(v247 + 20) = 0LL;
                      *(_DWORD *)(v247 + 36) = 0;
                    }

                    uint64_t v248 = *(void *)(v230 + 24);
                    int v249 = -v943;
                    if (*(_DWORD *)(v248 + 68) + *(_DWORD *)(v248 + 72) < 0) {
                      sub_18131E420(v248, v230, v249);
                    }
                    else {
                      *(_DWORD *)(*(void *)(v248 + 80) + 4LL * v249) = *(_DWORD *)(v230 + 144);
                    }
                    if (v960) {
                      sub_1812F20DC(v211, v960);
                    }
                    int v212 = v231 + 1;
                    uint64_t v209 = *(void *)(v209 + 8);
                  }

                  while (v209);
                }

                sub_1813103F4(v957, 39LL, 0LL, (v932 + 1), v205, v206, v207, v208);
                uint64_t v250 = &byte_18C550680;
                if (!*(_BYTE *)(*(void *)v957 + 103LL)) {
                  uint64_t v250 = (char *)(*(void *)(v957 + 136) + 40LL * v932);
                }
                *((_DWORD *)v250 + 2) = *(_DWORD *)(v957 + 144);
                uint64_t v84 = (uint64_t)v950;
                uint64_t v175 = __s;
                uint64_t v176 = v930;
              }

              while (v930);
              goto LABEL_1082;
            case 0xF:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              uint64_t v251 = sub_1812E2C64((uint64_t)v950, __s, zDbName);
              if (!v251) {
                goto LABEL_635;
              }
              if (*(_BYTE *)(v251 + 63)) {
                goto LABEL_635;
              }
              uint64_t v252 = *(void *)(v251 + 72);
              if (!v252) {
                goto LABEL_635;
              }
              uint64_t v253 = *(void *)(v251 + 96);
              if (v253)
              {
                uint64_t v254 = (uint64_t *)(*((void *)v950 + 4) + 24LL);
                int v255 = -1;
                do
                {
                  uint64_t v256 = *v254;
                  v254 += 4;
                  ++v255;
                }

                while (v256 != v253);
              }

              else
              {
                int v255 = -32768;
              }

              *(_DWORD *)(a1 + 56) = 8;
              sub_18128BBA8(a1, v255);
              uint64_t v902 = 0LL;
              do
              {
                if (*(int *)(v252 + 40) >= 1)
                {
                  uint64_t v903 = 0LL;
                  uint64_t v904 = v252 + 72;
                  do
                  {
                    v904 += 16LL;
                    sub_181345BD0(v957, 1LL, (uint64_t)"iissssss", v897, v898, v899, v900, v901, v902);
                    ++v903;
                  }

                  while (v903 < *(int *)(v252 + 40));
                }

                uint64_t v902 = (v902 + 1);
                uint64_t v252 = *(void *)(v252 + 8);
              }

              while (v252);
              goto LABEL_1082;
            case 0x10:
              uint64_t v257 = 0LL;
              uint64_t v258 = (*((_DWORD *)v950 + 11) >> 5) & 1;
              *(_DWORD *)(a1 + 56) = 6;
              do
              {
                uint64_t v953 = v257;
                for (uint64_t n = *((void *)&xmmword_18C468BD0 + v257); n; uint64_t n = *(void *)(n + 64))
                {
                  uint64_t v260 = n;
                  do
                  {
                    if (*(void *)(v260 + 24) && ((_DWORD)v258 || (*(_DWORD *)(v260 + 4) & 0x40000) == 0)) {
                      sub_181345BD0(v957, 1LL, (uint64_t)"sissii", v57, v58, v59, v60, v61, *(void *)(v260 + 56));
                    }
                    uint64_t v260 = *(void *)(v260 + 16);
                  }

                  while (v260);
                }

                uint64_t v257 = v953 + 1;
              }

              while (v953 != 22);
              for (iint i = (void *)*((void *)v950 + 78); ii; iint i = (void *)*ii)
                sub_181345D54(v957, ii[2], 0LL, v258, v58, v59, v60, v61);
              goto LABEL_1082;
            case 0x11:
              if (__s)
              {
                if (!sub_1812E4D40(__s, (unint64_t *)v961))
                {
                  uint64_t v493 = sqlite3_hard_heap_limit64(-1LL);
                }
              }

              uint64_t v261 = sqlite3_hard_heap_limit64(-1LL);
              goto LABEL_353;
            case 0x12:
              LODWORD(v961[0]) = 0;
              sub_18131EC34(a1, 0, v18);
              sub_1813103F4(v957, 71LL, LODWORD(v961[0]), 1LL, v262, v263, v264, v265);
              uint64_t v271 = sub_181319BA8(v957, 62LL, v18, v266, v267, v268, v269, v270);
              sub_181319BA8(v957, 84LL, 1LL, v272, v273, v274, v275, v276);
              sub_1813103F4(v957, 86LL, 1LL, 0xFFFFFFFFLL, v277, v278, v279, v280);
              sub_1813103F4(v957, 59LL, 1LL, v271, v281, v282, v283, v284);
              if (*(_BYTE *)(*(void *)v957 + 103LL)) {
                dword_18C550688 = *(_DWORD *)(v957 + 144);
              }
              else {
                *(_DWORD *)(*(void *)(v957 + 136) + 40LL * (int)v271 + 8) = *(_DWORD *)(v957 + 144);
              }
              goto LABEL_1082;
            case 0x13:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              uint64_t v285 = sub_18130D838((uint64_t)v950, (unsigned __int8 *)__s, (unsigned __int8 *)zDbName);
              uint64_t v290 = v285;
              if (v285)
              {
                uint64_t v291 = *(void *)(v285 + 48);
                if (v291) {
                  goto LABEL_277;
                }
              }

              else
              {
                uint64_t v494 = sub_18129EAF4(a1, 2, __s, zDbName, v286, v287, v288, v289);
                if (!v494) {
                  goto LABEL_635;
                }
                if ((*(_BYTE *)(v494 + 48) & 0x80) == 0) {
                  goto LABEL_635;
                }
                uint64_t v290 = *(void *)(v494 + 16);
                if (!v290) {
                  goto LABEL_635;
                }
                while ((*(_WORD *)(v290 + 99) & 3) != 2)
                {
                  uint64_t v290 = *(void *)(v290 + 40);
                  if (!v290) {
                    goto LABEL_1082;
                  }
                }

                uint64_t v84 = (uint64_t)v950;
                uint64_t v291 = *(void *)(v290 + 48);
                if (v291)
                {
LABEL_277:
                  v292 = (uint64_t *)(*(void *)(v84 + 32) + 24LL);
                  int v293 = -1;
                  do
                  {
                    uint64_t v294 = *v292;
                    v292 += 4;
                    ++v293;
                  }

                  while (v294 != v291);
LABEL_1095:
                  v905 = (&off_189B6DCE8)[3 * (int)v69 + 2];
                  if (v905) {
                    int v906 = 6;
                  }
                  else {
                    int v906 = 3;
                  }
                  uint64_t v907 = 96LL;
                  if (!v905) {
                    uint64_t v907 = 94LL;
                  }
                  uint64_t v908 = *(unsigned __int16 *)(v290 + v907);
                  *(_DWORD *)(a1 + 56) = v906;
                  sub_18128BBA8(a1, v293);
                  if (v908)
                  {
                    for (jint j = 0LL; jj != v908; ++jj)
                    {
                      sub_181345BD0(v957, 1LL, (uint64_t)"iisX", v909, v910, v911, v912, v913, jj);
                      if (v905) {
                        sub_181345BD0( v957,  4LL,  (uint64_t)"isiX",  v915,  v916,  v917,  v918,  v919,  *(unsigned __int8 *)(*(void *)(v290 + 56) + jj));
                      }
                      sub_1813103F4(v957, 84LL, 1LL, *(unsigned int *)(a1 + 56), v916, v917, v918, v919);
                    }
                  }

                  goto LABEL_1082;
                }
              }

              int v293 = -32768;
              goto LABEL_1095;
            case 0x14:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              uint64_t v295 = sub_1812E2C64((uint64_t)v950, __s, zDbName);
              if (!v295) {
                goto LABEL_635;
              }
              uint64_t v296 = v295;
              uint64_t v297 = *(void *)(v295 + 96);
              if (v297)
              {
                v298 = (uint64_t *)(*((void *)v950 + 4) + 24LL);
                int v299 = -1;
                do
                {
                  uint64_t v300 = *v298;
                  v298 += 4;
                  ++v299;
                }

                while (v300 != v297);
              }

              else
              {
                int v299 = -32768;
              }

              *(_DWORD *)(a1 + 56) = 5;
              sub_18128BBA8(a1, v299);
              uint64_t v523 = *(void *)(v296 + 16);
              if (v523)
              {
                uint64_t v524 = 0LL;
                do
                {
                  sub_181345BD0(v957, 1LL, (uint64_t)"isisi", v518, v519, v520, v521, v522, v524);
                  uint64_t v524 = (v524 + 1);
                  uint64_t v523 = *(void *)(v523 + 40);
                }

                while (v523);
              }

              goto LABEL_1082;
            case 0x15:
              int v301 = *v946;
              if (*(void *)a3) {
                uint64_t v302 = v18;
              }
              else {
                uint64_t v302 = 0xFFFFFFFFLL;
              }
              uint64_t v923 = v302;
              *(_DWORD *)(a1 + 56) = 6;
              int v303 = 100;
              LODWORD(v960) = 100;
              if (__s)
              {
                if (sub_18130DE18((unsigned __int8 *)__s, &v960))
                {
                  int v303 = (int)v960;
                  uint64_t v304 = v957;
                  uint64_t v305 = 0LL;
                  if ((int)v960 <= 0)
                  {
                    int v303 = 100;
                    LODWORD(v960) = 100;
                  }

LABEL_710:
                  sub_1813103F4(v304, 71LL, (v303 - 1), 1LL, v58, v59, v60, v61);
                  if (v305) {
                    int v537 = 2;
                  }
                  else {
                    int v537 = 1;
                  }
                  int v922 = v537;
                  if (*((int *)v950 + 10) < 1)
                  {
LABEL_1039:
                    uint64_t v881 = sub_1812B14B8(v304, 7LL, (uint64_t)&unk_1813CA41F, v532, v533, v534, v535, v536);
                    if (v881)
                    {
                      *(_DWORD *)(v881 + 8) = 1 - (_DWORD)v960;
                      *(_BYTE *)(v881 + 81) = -1;
                      *(void *)(v881 + 96) = "ok";
                      *(_BYTE *)(v881 + 201) = -1;
                      *(void *)(v881 + 216) = "database disk image is malformed";
                    }

                    if (*(_BYTE *)(*(void *)v304 + 103LL)) {
                      dword_18C55068C = *(_DWORD *)(v304 + 144) - 2;
                    }
                    else {
                      *(_DWORD *)(*(void *)(v304 + 136) + 12LL) = *(_DWORD *)(v304 + 144) - 2;
                    }
                    goto LABEL_1082;
                  }

                  uint64_t v538 = 0LL;
                  unsigned int v539 = v301 & 0xFFFFFFDF;
                  uint64_t v926 = v305;
                  unsigned int v925 = v301 & 0xFFFFFFDF;
                  while (1)
                  {
                    if ((v923 & 0x80000000) != 0 || v538 == v923)
                    {
                      sub_18128BBA8(a1, v538);
                      *(_BYTE *)(a1 + 35) = 0;
                      uint64_t v540 = *(void *)(*((void *)v950 + 4) + 32 * v538 + 24);
                      v541 = *(void **)(v540 + 16);
                      if (v541)
                      {
                        int v542 = 0;
                        int v543 = 0;
                        do
                        {
                          uint64_t v545 = v541[2];
                          if (!v305 || v305 == v545)
                          {
                            v543 += ((*(_DWORD *)(v545 + 48) >> 7) & 1) == 0;
                            uint64_t v546 = *(void *)(v545 + 16);
                            if (v546)
                            {
                              int v544 = 0;
                              do
                              {
                                ++v544;
                                uint64_t v546 = *(void *)(v546 + 40);
                              }

                              while (v546);
                              v543 += v544;
                            }

                            else
                            {
                              int v544 = 0;
                            }

                            if (v544 > v542) {
                              int v542 = v544;
                            }
                          }

                          v541 = (void *)*v541;
                        }

                        while (v541);
                        if (v543)
                        {
                          v547 = (_DWORD *)sub_1812F2264((uint64_t)v950, 4LL * (v543 + v922));
                          if (!v547) {
                            goto LABEL_1039;
                          }
                          if (v305)
                          {
                            v547[1] = 0;
                            uint64_t v548 = 1LL;
                          }

                          else
                          {
                            uint64_t v548 = 0LL;
                          }

                          for (kuint64_t k = *(void **)(v540 + 16); kk; kuint64_t k = (void *)*kk)
                          {
                            uint64_t v550 = kk[2];
                            if (!v305 || v305 == v550)
                            {
                              if ((*(_BYTE *)(v550 + 48) & 0x80) == 0)
                              {
                                uint64_t v548 = (v548 + 1);
                                v547[(int)v548] = *(_DWORD *)(v550 + 40);
                              }

                              uint64_t v551 = *(void *)(v550 + 16);
                              if (v551)
                              {
                                v552 = &v547[(int)v548 + 1];
                                do
                                {
                                  *v552++ = *(_DWORD *)(v551 + 88);
                                  uint64_t v551 = *(void *)(v551 + 40);
                                  uint64_t v548 = (v548 + 1);
                                }

                                while (v551);
                              }
                            }
                          }

                          _DWORD *v547 = v548;
                          if (*(_DWORD *)(a1 + 56) < v542 + 8) {
                            *(_DWORD *)(a1 + 56) = v542 + 8;
                          }
                          *(_BYTE *)(a1 + 31) = 0;
                          *(_DWORD *)(a1 + 40) = 0;
                          sub_1812B9B68((uint64_t *)v304, 155LL, 2LL, v548, 1LL, (uint64_t)v547, 4294967282LL, v536);
                          int v558 = *(_DWORD *)(v304 + 144);
                          BOOL v559 = __OFSUB__(v558, 1);
                          int v560 = v558 - 1;
                          if (v560 < 0 == v559) {
                            *(_WORD *)(*(void *)(v304 + 136) + 40LL * v560 + 2) = v538;
                          }
                          int v561 = sub_181319BA8(v304, 50LL, 2LL, v553, v554, v555, v556, v557);
                          v568 = sub_18127F588( (uint64_t)v950,  "*** in database %s ***\n",  v562,  v563,  v564,  v565,  v566,  v567,  *(void *)(*((void *)v950 + 4) + 32 * v538));
                          sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 3LL, 0LL, (uint64_t)v568, 4294967290LL, v569);
                          sub_181279C3C(v304, 111LL, 2LL, 3LL, 3LL, v570, v571, v572);
                          sub_181345F60(v304, v573, v574, v575, v576, v577, v578, v579);
                          v580 = &byte_18C550680;
                          if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                            v580 = (char *)(*(void *)(v304 + 136) + 40LL * v561);
                          }
                          *((_DWORD *)v580 + 2) = *(_DWORD *)(v304 + 144);
                          v581 = *(void **)(v540 + 16);
                          if (v581) {
                            break;
                          }
                        }
                      }
                    }

LABEL_715:
                  }

                  uint64_t v924 = v538;
                  while (1)
                  {
                    uint64_t v583 = v581[2];
                    if (v305) {
                      BOOL v584 = v305 == v583;
                    }
                    else {
                      BOOL v584 = 1;
                    }
                    int v585 = v584;
                    if (*(_BYTE *)(v583 + 63)) {
                      BOOL v586 = 1;
                    }
                    else {
                      BOOL v586 = v585 == 0;
                    }
                    if (v586) {
                      goto LABEL_757;
                    }
                    v928 = v581;
                    if (v539 == 81)
                    {
                      zDbNameb = 0LL;
                      unsigned int v929 = 0;
                      uint64_t v587 = (uint64_t)v950;
                    }

                    else
                    {
                      uint64_t v587 = (uint64_t)v950;
                      if ((*(_BYTE *)(v583 + 48) & 0x80) != 0)
                      {
                        uint64_t v588 = v583 + 16;
                        do
                        {
                          uint64_t v589 = *(void *)v588;
                          int v590 = *(_WORD *)(*(void *)v588 + 99LL) & 3;
                          uint64_t v588 = *(void *)v588 + 40LL;
                        }

                        while (v590 != 2);
                        uint64_t v591 = v589;
                        uint64_t v592 = sub_18131B020(a1, *(unsigned __int16 *)(v589 + 94));
                        zDbNameb = (char *)v591;
                        unsigned int v929 = v592;
                        sub_181279C3C( v304,  75LL,  1LL,  v592,  v592 + *(unsigned __int16 *)(v591 + 94) - 1,  v593,  v594,  v595);
                      }

                      else
                      {
                        zDbNameb = 0LL;
                        unsigned int v929 = 0;
                      }
                    }

                    sub_1812A6CB0(a1, v583, 112LL, 0, 1LL, 0LL, &v959, &v958);
                    sub_1813103F4(v304, 71LL, 0LL, 7LL, v596, v597, v598, v599);
                    uint64_t v604 = *(void *)(v583 + 16);
                    v931 = (uint64_t *)(v583 + 16);
                    if (v604)
                    {
                      uint64_t v605 = 8LL;
                      do
                      {
                        int v607 = *(_DWORD *)(v957 + 144);
                        if (*(_DWORD *)(v957 + 148) > v607)
                        {
                          *(_DWORD *)(v957 + 144) = v607 + 1;
                          uint64_t v606 = *(void *)(v957 + 136) + 40LL * v607;
                          *(void *)uint64_t v606 = 71LL;
                          *(_DWORD *)(v606 + 8) = v605;
                          *(void *)(v606 + 12) = 0LL;
                          *(void *)(v606 + 28) = 0LL;
                          *(void *)(v606 + 20) = 0LL;
                          *(_DWORD *)(v606 + 36) = 0;
                        }

                        else
                        {
                          sub_18131044C(v957, 71LL, 0LL, v605, 0LL, v601, v602, v603);
                        }

                        uint64_t v604 = *(void *)(v604 + 40);
                        uint64_t v605 = (v605 + 1);
                      }

                      while (v604);
                    }

                    uint64_t v304 = v957;
                    unsigned int v941 = v959;
                    sub_1813103F4(v957, 36LL, v959, 0LL, v600, v601, v602, v603);
                    unsigned int v927 = sub_1813103F4(v957, 86LL, 7LL, 1LL, v608, v609, v610, v611);
                    uint64_t v619 = v583 + 16;
                    if ((*(_BYTE *)(v583 + 48) & 0x80) != 0)
                    {
                      do
                      {
                        uint64_t v625 = *(void *)v619;
                        int v626 = *(_WORD *)(*(void *)v619 + 99LL) & 3;
                        uint64_t v619 = *(void *)v619 + 40LL;
                      }

                      while (v626 != 2);
                      uint64_t v627 = *(unsigned __int16 *)(v625 + 96) - 1;
                      v620 = zDbNameb;
                    }

                    else
                    {
                      v620 = zDbNameb;
                      if (*(__int16 *)(v583 + 54) < 1)
                      {
                        int v624 = -1;
                      }

                      else
                      {
                        uint64_t v621 = *(unsigned __int16 *)(v583 + 54);
                        uint64_t v622 = *(void *)(v583 + 8);
                        if (v621 >= 9)
                        {
                          uint64_t v628 = v621 & 7;
                          if ((v621 & 7) == 0) {
                            uint64_t v628 = 8LL;
                          }
                          uint64_t v623 = v621 - v628;
                          uint64_t v629 = v622 + 78;
                          int32x4_t v630 = 0uLL;
                          uint64_t v631 = v623;
                          int32x4_t v632 = (int32x4_t)xmmword_1813CDDE0;
                          v633.i64[0] = 0x100000001LL;
                          v633.i64[1] = 0x100000001LL;
                          do
                          {
                            v634.i32[0] = vzip1_s16(*(int16x4_t *)(v629 - 64), *(int16x4_t *)(v629 - 48)).u32[0];
                            v634.i32[1] = vext_s8( *(int8x8_t *)(v629 - 32),  (int8x8_t)vzip1_s16(*(int16x4_t *)(v629 - 32), *(int16x4_t *)(v629 - 16)),  4uLL).i32[1];
                            int8x8_t v635 = vext_s8( *(int8x8_t *)(v629 + 32),  (int8x8_t)vzip1_s16(*(int16x4_t *)(v629 + 32), *(int16x4_t *)(v629 + 48)),  4uLL);
                            int16x4_t v636 = *(int16x4_t *)(v629 + 16);
                            int16x4_t v637 = *(int16x4_t *)v629;
                            v629 += 128LL;
                            v636.i32[0] = vzip1_s16(v637, v636).u32[0];
                            v636.i32[1] = v635.i32[1];
                            int32x4_t v632 = vaddq_s32( v632,  (int32x4_t)vandq_s8( (int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8(v634, (int8x8_t)0x20002000200020LL))),  v633));
                            int32x4_t v630 = vaddq_s32( v630,  (int32x4_t)vandq_s8( (int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v636, (int8x8_t)0x20002000200020LL))),  v633));
                            v631 -= 8LL;
                          }

                          while (v631);
                          int16x8_t v618 = (int16x8_t)vaddq_s32(v630, v632);
                          v618.i32[0] = vaddvq_s32((int32x4_t)v618);
                          int v624 = v618.i32[0];
                        }

                        else
                        {
                          uint64_t v623 = 0LL;
                          int v624 = -1;
                        }

                        v638 = (__int16 *)(v622 + 16 * v623 + 14);
                        uint64_t v639 = v621 - v623;
                        do
                        {
                          __int16 v640 = *v638;
                          v638 += 8;
                          if ((v640 & 0x20) == 0) {
                            ++v624;
                          }
                          --v639;
                        }

                        while (v639);
                      }

                      uint64_t v627 = v624 - (v624 == *(__int16 *)(v583 + 52));
                    }

                    if ((v627 & 0x80000000) == 0)
                    {
                      sub_181279C3C(v957, 94LL, v941, v627, 3LL, v615, v616, v617);
                      sub_18131E740(v957, 3);
                      v620 = zDbNameb;
                    }

                    v956 = (void *)v583;
                    if (v539 != 81 && v620)
                    {
                      int v641 = sub_1812DC7B4(v957, 41LL, v941, 0LL, v929, *((unsigned __int16 *)v620 + 47), v616, v617);
                      sub_181319BA8(v957, 50LL, v929, v642, v643, v644, v645, v646);
                      v653 = sub_18127F588( v587,  "row not in PRIMARY KEY order for %s",  v647,  v648,  v649,  v650,  v651,  v652,  *(void *)v583);
                      sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 3LL, 0LL, (uint64_t)v653, 4294967290LL, v654);
                      sub_181345F60(v957, v655, v656, v657, v658, v659, v660, v661);
                      int v662 = *(_DWORD *)(v957 + 144);
                      if (*(_BYTE *)(*(void *)v957 + 103LL))
                      {
                        v663 = &byte_18C550680;
                        dword_18C550688 = *(_DWORD *)(v957 + 144);
                      }

                      else
                      {
                        uint64_t v664 = *(void *)(v957 + 136) + 40LL * v641;
                        *(_DWORD *)(v664 + 8) = v662;
                        v663 = (char *)(v664 + 40);
                      }

                      *((_DWORD *)v663 + 2) = v662;
                      v620 = zDbNameb;
                      if (*((_WORD *)zDbNameb + 47))
                      {
                        unint64_t v665 = 0LL;
                        uint64_t v666 = 8LL;
                        while (1)
                        {
                          uint64_t v627 = *(__int16 *)(*((void *)v620 + 1) + 2 * v665);
                          if ((_DWORD)v627 == -2) {
                            break;
                          }
                          v667 = v620;
                          *(double *)v618.i64 = sub_18131C0EC( *(void *)(a1 + 16),  *((void *)v620 + 3),  v941,  v627,  v929 + v665,  v615,  v616,  v617,  v618);
LABEL_808:
                          ++v665;
                          v666 += 24LL;
                          v620 = v667;
                        }

                        *(_DWORD *)(a1 + 64) = v941 + 1;
                        v612 = *(unsigned __int8 **)(*((void *)v620 + 10) + v666);
                        uint64_t v668 = *(void *)a1;
                        if (v612)
                        {
                          v669 = (unsigned __int8 *)sub_18129C928(*(void *)a1, v612, 0LL, 0LL);
                          if (!*(_BYTE *)(v668 + 103)) {
                            goto LABEL_812;
                          }
                        }

                        else
                        {
                          v669 = 0LL;
                          if (!*(_BYTE *)(v668 + 103)) {
LABEL_812:
                          }
                            sub_181319C00(a1, v669, v929 + v665);
                        }

                        if (v669) {
                          sub_181309110((void *)v668, v669);
                        }
                        *(_DWORD *)(a1 + 64) = 0;
                        v667 = zDbNameb;
                        uint64_t v583 = (uint64_t)v956;
                        goto LABEL_808;
                      }
                    }

LABEL_818:
                    if (*(__int16 *)(v583 + 54) >= 1)
                    {
                      uint64_t v670 = 0LL;
                      int v671 = *(_DWORD *)(v583 + 48);
                      int v933 = v671;
                      while (2)
                      {
                        uint64_t v672 = *(void *)(v583 + 8);
                        if ((v671 & 0x10000) != 0)
                        {
                          LODWORD(v675) = *(unsigned __int8 *)(v672 + 16 * v670 + 8);
                          BOOL v673 = v675 > 0x1F;
                          BOOL v674 = v673;
                        }

                        else
                        {
                          BOOL v673 = 0;
                          uint64_t v675 = v672 + 16 * v670;
                          BOOL v674 = *(char *)(v675 + 9) > 65;
                          LOBYTE(v675) = *(_BYTE *)(v675 + 8);
                        }

                        if ((v675 & 0xF) == 0 && !v674) {
                          goto LABEL_822;
                        }
                        uint64_t v677 = v672 + 16 * v670;
                        BOOL v937 = v673;
                        if ((*(_WORD *)(v677 + 14) & 0x20) != 0)
                        {
                          unsigned int v944 = 3;
                          sub_18131C0EC(v957, v583, v941, v670, 3LL, v615, v616, v617, v618);
                          uint64_t v679 = 5LL;
                          uint64_t v682 = 0xFFFFFFFFLL;
                          goto LABEL_852;
                        }

                        int v678 = *(unsigned __int16 *)(v672 + 16 * v670 + 12);
                        if (*(_WORD *)(v672 + 16 * v670 + 12)
                          && (v961[0] = 0LL, !*(_BYTE *)(v583 + 63))
                          && (v683 = *(_DWORD **)(v583 + 80)) != 0LL
                          && *v683 >= v678
                          && (v612 = *(unsigned __int8 **)&v683[6 * (v678 - 1) + 2]) != 0LL
                          && (sub_181312474( (uint64_t)v950,  v612,  *((unsigned __int8 *)v950 + 100),  *(unsigned __int8 *)(v672 + 16 * v670 + 9),  (uint64_t *)v961),  v961[0]))
                        {
                          uint64_t v684 = byte_1813C6455[*((_WORD *)v961[0] + 10) & 0x3F];
                          sub_1812D79D4(v961[0]);
                          uint64_t v679 = v684;
                          if ((*(_BYTE *)(v583 + 48) & 0x80) != 0)
                          {
LABEL_842:
                            for (muint64_t m = *v931; mm; muint64_t m = *(void *)(mm + 40))
                            {
                              if ((*(_WORD *)(mm + 99) & 3) == 2) {
                                break;
                              }
                            }

                            uint64_t v686 = *(unsigned __int16 *)(mm + 96);
                            if (*(_WORD *)(mm + 96))
                            {
                              uint64_t v687 = 0LL;
                              uint64_t v688 = *(void *)(mm + 8);
                              while (*(unsigned __int16 *)(v688 + 2 * v687) != (unsigned __int16)v670)
                              {
                                if (v686 == ++v687) {
                                  goto LABEL_849;
                                }
                              }
                            }

                            else
                            {
LABEL_849:
                              LOWORD(v687) = -1;
                            }

                            unsigned int v944 = (__int16)v687;
LABEL_851:
                            uint64_t v682 = v941;
LABEL_852:
                            int v939 = *(_DWORD *)(a1 + 68);
                            uint64_t v689 = (v939 - 2);
                            *(_DWORD *)(a1 + 68) = v689;
                            v935 = (unsigned __int8 *)(v677 + 8);
                            if ((*(_BYTE *)(v677 + 8) & 0xF) != 0)
                            {
                              int v690 = *(_DWORD *)(v957 + 144);
                              if (*(_DWORD *)(v957 + 148) <= v690)
                              {
                                uint64_t v692 = v679;
                                int v690 = sub_181310690(v957, 18LL, v682, v689, v944, v679, v616, v617);
                              }

                              else
                              {
                                *(_DWORD *)(v957 + 144) = v690 + 1;
                                uint64_t v691 = *(void *)(v957 + 136) + 40LL * v690;
                                *(_DWORD *)uint64_t v691 = 64786;
                                *(_DWORD *)(v691 + 4) = v682;
                                *(_DWORD *)(v691 + 8) = v689;
                                *(_DWORD *)(v691 + 12) = v944;
                                uint64_t v692 = v679;
                                *(_DWORD *)(v691 + 16) = v679;
                                *(void *)(v691 + 24) = 0LL;
                                *(void *)(v691 + 32) = 0LL;
                              }

                              int v693 = *(_DWORD *)(v957 + 144);
                              if ((v682 & 0x80000000) != 0)
                              {
                                int v695 = v690;
                                if (v693 >= 1)
                                {
                                  *(_WORD *)(*(void *)(v957 + 136) + 40LL * (v693 - 1) + 2) = 15;
                                  int v695 = v690;
                                }
                              }

                              else
                              {
                                if (v693 >= 1) {
                                  *(_WORD *)(*(void *)(v957 + 136) + 40LL * (v693 - 1) + 2) = 13;
                                }
                                if (*(_DWORD *)(v957 + 148) <= v693)
                                {
                                  sub_18131044C(v957, 94LL, v682, v944, 3LL, v679, v616, v617);
                                }

                                else
                                {
                                  *(_DWORD *)(v957 + 144) = v693 + 1;
                                  uint64_t v694 = *(void *)(v957 + 136) + 40LL * v693;
                                  *(_DWORD *)uint64_t v694 = 94;
                                  *(_DWORD *)(v694 + 4) = v682;
                                  *(_DWORD *)(v694 + 8) = v944;
                                  *(_DWORD *)(v694 + 12) = 3;
                                  *(void *)(v694 + 24) = 0LL;
                                  *(void *)(v694 + 32) = 0LL;
                                  *(void *)(v694 + 16) = 0LL;
                                }

                                int v695 = *(_DWORD *)(v957 + 144);
                                if (*(_DWORD *)(v957 + 148) <= v695)
                                {
                                  int v695 = sub_18131044C(v957, 51LL, 3LL, v689, 0LL, v679, v616, v617);
                                }

                                else
                                {
                                  *(_DWORD *)(v957 + 144) = v695 + 1;
                                  uint64_t v696 = *(void *)(v957 + 136) + 40LL * v695;
                                  *(void *)uint64_t v696 = 0x300000033LL;
                                  *(_DWORD *)(v696 + 8) = v689;
                                  *(void *)(v696 + 12) = 0LL;
                                  *(void *)(v696 + 28) = 0LL;
                                  *(void *)(v696 + 20) = 0LL;
                                  *(_DWORD *)(v696 + 36) = 0;
                                }
                              }

                              v697 = sub_18127F588( (uint64_t)v950,  "NULL value in %s.%s",  v613,  v627,  v614,  v679,  v616,  v617,  *v956);
                              sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 3LL, 0LL, (uint64_t)v697, 4294967290LL, v698);
                              uint64_t v679 = v692;
                              if (v674)
                              {
                                uint64_t v627 = (v939 - 1);
                                int v699 = *(_DWORD *)(v957 + 144);
                                if (*(_DWORD *)(v957 + 148) <= v699)
                                {
                                  sub_18131044C(v957, 9LL, 0LL, v627, 0LL, v692, v616, v617);
                                  uint64_t v679 = v692;
                                }

                                else
                                {
                                  *(_DWORD *)(v957 + 144) = v699 + 1;
                                  uint64_t v700 = *(void *)(v957 + 136) + 40LL * v699;
                                  *(void *)uint64_t v700 = 9LL;
                                  *(_DWORD *)(v700 + 8) = v627;
                                  *(void *)(v700 + 12) = 0LL;
                                  *(void *)(v700 + 28) = 0LL;
                                  *(void *)(v700 + 20) = 0LL;
                                  *(_DWORD *)(v700 + 36) = 0;
                                }

                                int v701 = *(_DWORD *)(v957 + 144);
                                if (*(_BYTE *)(*(void *)v957 + 103LL))
                                {
                                  v702 = &byte_18C550680;
                                  dword_18C550688 = *(_DWORD *)(v957 + 144);
                                }

                                else
                                {
                                  uint64_t v703 = *(void *)(v957 + 136);
                                  *(_DWORD *)(v703 + 40LL * v690 + 8) = v701;
                                  v702 = (char *)(v703 + 40LL * v695);
                                }

                                *((_DWORD *)v702 + 2) = v701;
                              }
                            }

                            if (v937)
                            {
                              int v704 = *(_DWORD *)(v957 + 144);
                              uint64_t v583 = (uint64_t)v956;
                              int v671 = v933;
                              int v705 = v939;
                              if (*(_DWORD *)(v957 + 148) <= v704)
                              {
                                sub_181310690(v957, 18LL, v682, v689, v944, v679, v616, v617);
                              }

                              else
                              {
                                *(_DWORD *)(v957 + 144) = v704 + 1;
                                uint64_t v706 = *(void *)(v957 + 136) + 40LL * v704;
                                *(_DWORD *)uint64_t v706 = 64786;
                                *(_DWORD *)(v706 + 4) = v682;
                                *(_DWORD *)(v706 + 8) = v689;
                                *(_DWORD *)(v706 + 12) = v944;
                                *(_DWORD *)(v706 + 16) = v679;
                                *(void *)(v706 + 24) = 0LL;
                                *(void *)(v706 + 32) = 0LL;
                              }

                              int v718 = *(_DWORD *)(v957 + 144);
                              BOOL v559 = __OFSUB__(v718, 1);
                              int v719 = v718 - 1;
                              if (v719 < 0 == v559) {
                                *(_WORD *)(*(void *)(v957 + 136) + 40LL * v719 + 2) = byte_1813CA419[((unint64_t)*v935 >> 4) - 1];
                              }
                              v716 = sub_18127F588( (uint64_t)v950,  "non-%s value in %s.%s",  v613,  v627,  v614,  v679,  v616,  v617,  (char)*(char **)((char *)&off_18C54FFA0[-1] + (((unint64_t)*v935 >> 1) & 0x78)));
                              goto LABEL_887;
                            }

                            uint64_t v583 = (uint64_t)v956;
                            int v671 = v933;
                            int v705 = v939;
                            if ((v933 & 0x10000) == 0)
                            {
                              int v707 = *(char *)(v672 + 16 * v670 + 9);
                              if (v707 == 66)
                              {
                                sub_1812DC7B4(v957, 18LL, v682, v689, v944, v679, v616, v617);
                                int v714 = *(_DWORD *)(v957 + 144);
                                BOOL v559 = __OFSUB__(v714, 1);
                                int v715 = v714 - 1;
                                if (v715 < 0 == v559) {
                                  *(_WORD *)(*(void *)(v957 + 136) + 40LL * v715 + 2) = 28;
                                }
                                v716 = sub_18127F588( (uint64_t)v950,  "NUMERIC value in %s.%s",  v708,  v709,  v710,  v711,  v712,  v713,  *v956);
                                goto LABEL_887;
                              }

                              if (v707 >= 67)
                              {
                                uint64_t v723 = v679;
                                sub_1812DC7B4(v957, 18LL, v682, v689, v944, v679, v616, v617);
                                int v728 = *(_DWORD *)(v957 + 144);
                                BOOL v559 = __OFSUB__(v728, 1);
                                int v729 = v728 - 1;
                                if (v729 < 0 == v559) {
                                  *(_WORD *)(*(void *)(v957 + 136) + 40LL * v729 + 2) = 27;
                                }
                                if ((v682 & 0x80000000) == 0) {
                                  sub_18131C0EC(v957, (uint64_t)v956, v941, v670, 3LL, v724, v725, v726, v727);
                                }
                                sub_1812B9B68((uint64_t *)v957, 96LL, 3LL, 1LL, 0LL, (uint64_t)"C", 0xFFFFFFFFLL, v726);
                                sub_1812DC7B4(v957, 18LL, 0xFFFFFFFFLL, v689, 3LL, v723, v730, v731);
                                int v738 = *(_DWORD *)(v957 + 144);
                                BOOL v559 = __OFSUB__(v738, 1);
                                int v739 = v738 - 1;
                                if (v739 < 0 == v559) {
                                  *(_WORD *)(*(void *)(v957 + 136) + 40LL * v739 + 2) = 28;
                                }
                                v716 = sub_18127F588( (uint64_t)v950,  "TEXT value in %s.%s",  v732,  v733,  v734,  v735,  v736,  v737,  *v956);
LABEL_887:
                                sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 3LL, 0LL, (uint64_t)v716, 4294967290LL, v717);
                              }
                            }

                            uint64_t v720 = *(void *)(v957 + 24);
                            uint64_t v721 = -v705;
                            if (*(_DWORD *)(v720 + 68) + *(_DWORD *)(v720 + 72) < 0) {
                              sub_18131E420(v720, v957, v721);
                            }
                            else {
                              *(_DWORD *)(*(void *)(v720 + 80) + 4LL * (int)v721) = *(_DWORD *)(v957 + 144);
                            }
                            sub_181345F60(v957, (uint64_t)v612, v721, v627, v614, v679, v616, v617);
                            uint64_t v722 = *(void *)(v957 + 24);
                            uint64_t v613 = (1 - v705);
                            if (*(_DWORD *)(v722 + 68) + *(_DWORD *)(v722 + 72) < 0) {
                              sub_18131E420(v722, v957, v613);
                            }
                            else {
                              *(_DWORD *)(*(void *)(v722 + 80) + 4LL * (int)v613) = *(_DWORD *)(v957 + 144);
                            }
                            v620 = zDbNameb;
LABEL_822:
                            continue;
                          }
                        }

                        else
                        {
                          uint64_t v679 = 5LL;
                          if ((*(_BYTE *)(v583 + 48) & 0x80) != 0) {
                            goto LABEL_842;
                          }
                        }

                        break;
                      }

                      uint64_t v680 = v679;
                      unsigned int v681 = sub_18131A4C0(v583, (__int16)v670);
                      uint64_t v679 = v680;
                      unsigned int v944 = v681;
                      goto LABEL_851;
                    }

LABEL_901:
                    v740 = *(void **)(v583 + 32);
                    uint64_t v305 = v926;
                    unsigned int v539 = v925;
                    if (v740 && (*((_BYTE *)v950 + 49) & 2) == 0)
                    {
                      v741 = sub_18129CD4C((uint64_t)v950, v740, 0);
                      v742 = v741;
                      if (!*((_BYTE *)v950 + 103))
                      {
                        int v743 = *(_DWORD *)(a1 + 68);
                        uint64_t v744 = (v743 - 1);
                        uint64_t v745 = (v743 - 2);
                        *(_DWORD *)(a1 + 64) = v941 + 1;
                        *(_DWORD *)(a1 + 68) = v745;
                        uint64_t v746 = *(unsigned int *)v741;
                        if ((int)v746 >= 2)
                        {
                          unint64_t v747 = v746 + 1;
                          do
                            sub_1812B0714( a1,  (unsigned __int8 **)v742[3 * (v747-- - 2) + 1],  v744,  0LL,  v614,  v615,  v616,  v617);
                          while (v747 > 2);
                        }

                        sub_1812BDE64(a1, (unsigned __int8 *)v742[1], v745, 16LL, v614, v615, v616, v617);
                        uint64_t v304 = v957;
                        sub_18131B3E0(v957, v744);
                        *(_DWORD *)(a1 + 64) = 0;
                        uint64_t v583 = (uint64_t)v956;
                        v754 = sub_18127F588( (uint64_t)v950,  "CHECK constraint failed in %s",  v748,  v749,  v750,  v751,  v752,  v753,  *v956);
                        sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 3LL, 0LL, (uint64_t)v754, 4294967290LL, v755);
                        sub_181345F60(v957, v756, v757, v758, v759, v760, v761, v762);
                        sub_18131B3E0(v957, v745);
LABEL_910:
                        sub_181311F48(v950, v742);
                        v620 = zDbNameb;
                        goto LABEL_911;
                      }

                      v620 = zDbNameb;
                      if (v741) {
                        goto LABEL_910;
                      }
                    }

LABEL_911:
                    if (v925 == 81)
                    {
                      sub_1813103F4(v304, 39LL, v941, v927, v614, v615, v616, v617);
                      v582 = &byte_18C550680;
                      uint64_t v538 = v924;
                      if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                        v582 = (char *)(*(void *)(v304 + 136) + 40LL * (int)v927 - 40);
                      }
                      *((_DWORD *)v582 + 2) = *(_DWORD *)(v304 + 144);
                      v581 = v928;
                      goto LABEL_757;
                    }

                    uint64_t v763 = *v931;
                    if (*v931)
                    {
                      uint64_t v616 = 0LL;
                      int v764 = 0;
                      uint64_t v765 = 0xFFFFFFFFLL;
                      do
                      {
                        uint64_t v766 = (*(_DWORD *)(a1 + 68) - 1);
                        *(_DWORD *)(a1 + 68) = v766;
                        if (v620 != (char *)v763)
                        {
                          uint64_t v765 = sub_1812AA5E4(a1, v763, v959, 0, 0, (int *)v961, v616, v765, v618);
                          uint64_t v770 = (v764 + 8);
                          int v771 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v771)
                          {
                            sub_18131044C(v304, 86LL, v770, 1LL, 0LL, v767, v768, v769);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v771 + 1;
                            uint64_t v772 = *(void *)(v304 + 136) + 40LL * v771;
                            *(_DWORD *)uint64_t v772 = 86;
                            *(_DWORD *)(v772 + 4) = v770;
                            *(_DWORD *)(v772 + 8) = 1;
                            *(void *)(v772 + 12) = 0LL;
                            *(void *)(v772 + 28) = 0LL;
                            *(void *)(v772 + 20) = 0LL;
                            *(_DWORD *)(v772 + 36) = 0;
                          }

                          uint64_t v773 = (v958 + v764);
                          uint64_t v774 = *(unsigned __int16 *)(v763 + 96);
                          int v775 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v775)
                          {
                            int v775 = sub_181310690(v304, 29LL, (v958 + v764), v766, v765, v774, v768, v769);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v775 + 1;
                            uint64_t v776 = *(void *)(v304 + 136) + 40LL * v775;
                            *(_DWORD *)uint64_t v776 = 64797;
                            *(_DWORD *)(v776 + 4) = v773;
                            *(_DWORD *)(v776 + 8) = v766;
                            *(_DWORD *)(v776 + 12) = v765;
                            *(_DWORD *)(v776 + 16) = v774;
                            *(void *)(v776 + 24) = 0LL;
                            *(void *)(v776 + 32) = 0LL;
                          }

                          sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 3LL, 0LL, (uint64_t)"row ", 0LL, v769);
                          int v780 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v780)
                          {
                            sub_18131044C(v304, 111LL, 7LL, 3LL, 3LL, v777, v778, v779);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v780 + 1;
                            uint64_t v781 = *(void *)(v304 + 136) + 40LL * v780;
                            *(_DWORD *)uint64_t v781 = 111;
                            *(void *)(v781 + 4) = 0x300000007LL;
                            *(_DWORD *)(v781 + 12) = 3;
                            *(void *)(v781 + 24) = 0LL;
                            *(void *)(v781 + 32) = 0LL;
                            *(void *)(v781 + 16) = 0LL;
                          }

                          sub_1812B9B68( (uint64_t *)v304,  117LL,  0LL,  4LL,  0LL,  (uint64_t)" missing from index ",  0LL,  v779);
                          int v785 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v785)
                          {
                            sub_18131044C(v304, 111LL, 4LL, 3LL, 3LL, v782, v783, v784);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v785 + 1;
                            uint64_t v786 = *(void *)(v304 + 136) + 40LL * v785;
                            *(_DWORD *)uint64_t v786 = 111;
                            *(void *)(v786 + 4) = 0x300000004LL;
                            *(_DWORD *)(v786 + 12) = 3;
                            *(void *)(v786 + 24) = 0LL;
                            *(void *)(v786 + 32) = 0LL;
                            *(void *)(v786 + 16) = 0LL;
                          }

                          unsigned int v945 = sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 4LL, 0LL, *(void *)v763, 0LL, v784);
                          int v794 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v794)
                          {
                            sub_18131044C(v304, 111LL, 4LL, 3LL, 3LL, v791, v792, v793);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v794 + 1;
                            uint64_t v795 = *(void *)(v304 + 136) + 40LL * v794;
                            *(_DWORD *)uint64_t v795 = 111;
                            *(void *)(v795 + 4) = 0x300000004LL;
                            *(_DWORD *)(v795 + 12) = 3;
                            *(void *)(v795 + 24) = 0LL;
                            *(void *)(v795 + 32) = 0LL;
                            *(void *)(v795 + 16) = 0LL;
                          }

                          int v942 = sub_181345F60(v304, v787, v788, v789, v790, v791, v792, v793);
                          int v797 = *(_DWORD *)(v304 + 144);
                          v798 = &byte_18C550680;
                          if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                            v798 = (char *)(*(void *)(v304 + 136) + 40LL * v775);
                          }
                          *((_DWORD *)v798 + 2) = v797;
                          if ((*(_BYTE *)(v583 + 48) & 0x80) == 0)
                          {
                            if (*(_DWORD *)(v304 + 148) <= v797)
                            {
                              sub_18131044C(v304, 142LL, v773, 3LL, 0LL, v615, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v304 + 144) = v797 + 1;
                              uint64_t v799 = *(void *)(v304 + 136) + 40LL * v797;
                              *(_DWORD *)uint64_t v799 = 142;
                              *(_DWORD *)(v799 + 4) = v773;
                              *(_DWORD *)(v799 + 8) = 3;
                              *(void *)(v799 + 12) = 0LL;
                              *(void *)(v799 + 28) = 0LL;
                              *(void *)(v799 + 20) = 0LL;
                              *(_DWORD *)(v799 + 36) = 0;
                            }

                            uint64_t v800 = v765 + *(unsigned __int16 *)(v763 + 96) - 1;
                            int v801 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v801)
                            {
                              int v801 = sub_18131044C(v304, 53LL, 3LL, 0LL, v800, v615, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v304 + 144) = v801 + 1;
                              uint64_t v802 = *(void *)(v304 + 136) + 40LL * v801;
                              *(_DWORD *)uint64_t v802 = 53;
                              *(void *)(v802 + 4) = 3LL;
                              *(_DWORD *)(v802 + 12) = v800;
                              *(void *)(v802 + 24) = 0LL;
                              *(void *)(v802 + 32) = 0LL;
                              *(void *)(v802 + 16) = 0LL;
                            }

                            sub_1812B9B68( (uint64_t *)v304,  117LL,  0LL,  3LL,  0LL,  (uint64_t)"rowid not at end-of-record for row ",  0LL,  v617);
                            int v806 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v806)
                            {
                              sub_18131044C(v304, 111LL, 7LL, 3LL, 3LL, v803, v804, v805);
                            }

                            else
                            {
                              *(_DWORD *)(v304 + 144) = v806 + 1;
                              uint64_t v807 = *(void *)(v304 + 136) + 40LL * v806;
                              *(_DWORD *)uint64_t v807 = 111;
                              *(void *)(v807 + 4) = 0x300000007LL;
                              *(_DWORD *)(v807 + 12) = 3;
                              *(void *)(v807 + 24) = 0LL;
                              *(void *)(v807 + 32) = 0LL;
                              *(void *)(v807 + 16) = 0LL;
                            }

                            sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 4LL, 0LL, (uint64_t)" of index ", 0LL, v805);
                            uint64_t v808 = v945 - 1;
                            int v809 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v809)
                            {
                              sub_18131044C(v304, 9LL, 0LL, v808, 0LL, v615, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v304 + 144) = v809 + 1;
                              uint64_t v810 = *(void *)(v304 + 136) + 40LL * v809;
                              *(void *)uint64_t v810 = 9LL;
                              *(_DWORD *)(v810 + 8) = v808;
                              *(void *)(v810 + 12) = 0LL;
                              *(void *)(v810 + 28) = 0LL;
                              *(void *)(v810 + 20) = 0LL;
                              *(_DWORD *)(v810 + 36) = 0;
                            }

                            v811 = &byte_18C550680;
                            if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                              v811 = (char *)(*(void *)(v304 + 136) + 40LL * v801);
                            }
                            *((_DWORD *)v811 + 2) = *(_DWORD *)(v304 + 144);
                          }

                          if (*(_WORD *)(v763 + 94))
                          {
                            unint64_t v812 = 0LL;
                            uint64_t v813 = 0LL;
                            do
                            {
                              if (*(char **)(*(void *)(v763 + 64) + 8 * v812) != "BINARY")
                              {
                                if (!(_DWORD)v813)
                                {
                                  uint64_t v813 = (*(_DWORD *)(a1 + 68) - 1);
                                  *(_DWORD *)(a1 + 68) = v813;
                                }

                                int v815 = *(_DWORD *)(v304 + 144);
                                if (*(_DWORD *)(v304 + 148) <= v815)
                                {
                                  sub_18131044C(v304, 94LL, v773, v812, 3LL, v615, v796, v617);
                                }

                                else
                                {
                                  *(_DWORD *)(v304 + 144) = v815 + 1;
                                  uint64_t v816 = *(void *)(v304 + 136) + 40LL * v815;
                                  *(_DWORD *)uint64_t v816 = 94;
                                  *(_DWORD *)(v816 + 4) = v773;
                                  *(_DWORD *)(v816 + 8) = v812;
                                  *(_DWORD *)(v816 + 12) = 3;
                                  *(void *)(v816 + 24) = 0LL;
                                  *(void *)(v816 + 32) = 0LL;
                                  *(void *)(v816 + 16) = 0LL;
                                }

                                uint64_t v614 = (v812 + v765);
                                int v817 = *(_DWORD *)(v304 + 144);
                                if (*(_DWORD *)(v304 + 148) > v817)
                                {
                                  *(_DWORD *)(v304 + 144) = v817 + 1;
                                  uint64_t v814 = *(void *)(v304 + 136) + 40LL * v817;
                                  *(void *)uint64_t v814 = 0x300000034LL;
                                  *(_DWORD *)(v814 + 8) = v813;
                                  *(_DWORD *)(v814 + 12) = v614;
                                  *(void *)(v814 + 24) = 0LL;
                                  *(void *)(v814 + 32) = 0LL;
                                  *(void *)(v814 + 16) = 0LL;
                                }

                                else
                                {
                                  sub_18131044C(v304, 52LL, 3LL, v813, v614, v615, v796, v617);
                                }
                              }

                              ++v812;
                            }

                            while (v812 < *(unsigned __int16 *)(v763 + 94));
                            if ((_DWORD)v813)
                            {
                              int v818 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v818)
                              {
                                int v818 = sub_18131044C(v304, 9LL, 0LL, 0LL, 0LL, v615, v796, v617);
                              }

                              else
                              {
                                *(_DWORD *)(v304 + 144) = v818 + 1;
                                uint64_t v819 = *(void *)(v304 + 136) + 40LL * v818;
                                *(_BYTE *)uint64_t v819 = 9;
                                *(_OWORD *)(v819 + 1) = 0u;
                                *(_OWORD *)(v819 + 17) = 0u;
                                *(void *)(v819 + 32) = 0LL;
                              }

                              uint64_t v820 = *(void *)(v304 + 24);
                              int v821 = ~(_DWORD)v813;
                              if (*(_DWORD *)(v820 + 68) + *(_DWORD *)(v820 + 72) < 0) {
                                sub_18131E420(v820, v304, v821);
                              }
                              else {
                                *(_DWORD *)(*(void *)(v820 + 80) + 4LL * v821) = *(_DWORD *)(v304 + 144);
                              }
                              sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 3LL, 0LL, (uint64_t)"row ", 0LL, v617);
                              int v825 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v825)
                              {
                                sub_18131044C(v304, 111LL, 7LL, 3LL, 3LL, v822, v823, v824);
                              }

                              else
                              {
                                *(_DWORD *)(v304 + 144) = v825 + 1;
                                uint64_t v826 = *(void *)(v304 + 136) + 40LL * v825;
                                *(_DWORD *)uint64_t v826 = 111;
                                *(void *)(v826 + 4) = 0x300000007LL;
                                *(_DWORD *)(v826 + 12) = 3;
                                *(void *)(v826 + 24) = 0LL;
                                *(void *)(v826 + 32) = 0LL;
                                *(void *)(v826 + 16) = 0LL;
                              }

                              sub_1812B9B68( (uint64_t *)v304,  117LL,  0LL,  4LL,  0LL,  (uint64_t)" values differ from index ",  0LL,  v824);
                              uint64_t v827 = v945 - 1;
                              int v828 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v828)
                              {
                                sub_18131044C(v304, 9LL, 0LL, v827, 0LL, v615, v796, v617);
                              }

                              else
                              {
                                *(_DWORD *)(v304 + 144) = v828 + 1;
                                uint64_t v829 = *(void *)(v304 + 136) + 40LL * v828;
                                *(void *)uint64_t v829 = 9LL;
                                *(_DWORD *)(v829 + 8) = v827;
                                *(void *)(v829 + 12) = 0LL;
                                *(void *)(v829 + 28) = 0LL;
                                *(void *)(v829 + 20) = 0LL;
                                *(_DWORD *)(v829 + 36) = 0;
                              }

                              v830 = &byte_18C550680;
                              if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                                v830 = (char *)(*(void *)(v304 + 136) + 40LL * v818);
                              }
                              *((_DWORD *)v830 + 2) = *(_DWORD *)(v304 + 144);
                            }
                          }

                          if (*(_BYTE *)(v763 + 98))
                          {
                            int v831 = *(_DWORD *)(a1 + 68);
                            int v832 = v831 - 1;
                            *(_DWORD *)(a1 + 68) = v831 - 1;
                            if (*(_WORD *)(v763 + 94))
                            {
                              unint64_t v833 = 0LL;
                              do
                              {
                                if (*(__int16 *)(*(void *)(v763 + 8) + 2 * v833) < 0
                                  || (*(_BYTE *)(v956[1]
                                               + 16LL * *(unsigned __int16 *)(*(void *)(v763 + 8) + 2 * v833)
                                               + 8) & 0xF) == 0)
                                {
                                  uint64_t v835 = v765 + v833;
                                  int v836 = *(_DWORD *)(v957 + 144);
                                  if (*(_DWORD *)(v957 + 148) > v836)
                                  {
                                    *(_DWORD *)(v957 + 144) = v836 + 1;
                                    uint64_t v834 = *(void *)(v957 + 136) + 40LL * v836;
                                    *(_DWORD *)uint64_t v834 = 50;
                                    *(_DWORD *)(v834 + 4) = v835;
                                    *(_DWORD *)(v834 + 8) = v832;
                                    *(void *)(v834 + 12) = 0LL;
                                    *(void *)(v834 + 28) = 0LL;
                                    *(void *)(v834 + 20) = 0LL;
                                    *(_DWORD *)(v834 + 36) = 0;
                                  }

                                  else
                                  {
                                    sub_18131044C(v957, 50LL, v835, (v831 - 1), 0LL, v615, v796, v617);
                                  }
                                }

                                ++v833;
                              }

                              while (v833 < *(unsigned __int16 *)(v763 + 94));
                            }

                            uint64_t v304 = v957;
                            int v837 = *(_DWORD *)(v957 + 144);
                            if (*(_DWORD *)(v957 + 148) <= v837)
                            {
                              int v837 = sub_18131044C(v957, 39LL, v773, 0LL, 0LL, v615, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v957 + 144) = v837 + 1;
                              uint64_t v838 = *(void *)(v957 + 136) + 40LL * v837;
                              *(_DWORD *)uint64_t v838 = 39;
                              *(_DWORD *)(v838 + 4) = v773;
                              *(_OWORD *)(v838 + 8) = 0u;
                              *(_OWORD *)(v838 + 24) = 0u;
                            }

                            int v839 = *(_DWORD *)(v957 + 144);
                            if (*(_DWORD *)(v957 + 148) <= v839)
                            {
                              sub_18131044C(v957, 9LL, 0LL, (v831 - 1), 0LL, v615, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v957 + 144) = v839 + 1;
                              uint64_t v840 = *(void *)(v957 + 136) + 40LL * v839;
                              *(void *)uint64_t v840 = 9LL;
                              *(_DWORD *)(v840 + 8) = v832;
                              *(void *)(v840 + 12) = 0LL;
                              *(void *)(v840 + 28) = 0LL;
                              *(void *)(v840 + 20) = 0LL;
                              *(_DWORD *)(v840 + 36) = 0;
                            }

                            int v841 = *(_DWORD *)(v957 + 144);
                            v842 = &byte_18C550680;
                            if (!*(_BYTE *)(*(void *)v957 + 103LL)) {
                              v842 = (char *)(*(void *)(v957 + 136) + 40LL * v837);
                            }
                            *((_DWORD *)v842 + 2) = v841;
                            uint64_t v843 = *(unsigned __int16 *)(v763 + 94);
                            if (*(_DWORD *)(v957 + 148) <= v841)
                            {
                              sub_181310690(v957, 41LL, v773, (v831 - 1), v765, v843, v796, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v957 + 144) = v841 + 1;
                              uint64_t v844 = *(void *)(v957 + 136) + 40LL * v841;
                              *(_DWORD *)uint64_t v844 = 64809;
                              *(_DWORD *)(v844 + 4) = v773;
                              *(_DWORD *)(v844 + 8) = v832;
                              *(_DWORD *)(v844 + 12) = v765;
                              *(_DWORD *)(v844 + 16) = v843;
                              *(void *)(v844 + 24) = 0LL;
                              *(void *)(v844 + 32) = 0LL;
                            }

                            sub_1812B9B68( (uint64_t *)v957,  117LL,  0LL,  3LL,  0LL,  (uint64_t)"non-unique entry in index ",  0LL,  v617);
                            int v846 = *(_DWORD *)(v957 + 144);
                            if (*(_DWORD *)(v957 + 148) <= v846)
                            {
                              sub_18131044C(v957, 9LL, 0LL, v945, 0LL, v615, v845, v617);
                            }

                            else
                            {
                              *(_DWORD *)(v957 + 144) = v846 + 1;
                              uint64_t v847 = *(void *)(v957 + 136) + 40LL * v846;
                              *(void *)uint64_t v847 = 9LL;
                              *(_DWORD *)(v847 + 8) = v945;
                              *(void *)(v847 + 12) = 0LL;
                              *(void *)(v847 + 28) = 0LL;
                              *(void *)(v847 + 20) = 0LL;
                              *(_DWORD *)(v847 + 36) = 0;
                            }

                            uint64_t v848 = *(void *)(v957 + 24);
                            int v849 = -v831;
                            if (*(_DWORD *)(v848 + 68) + *(_DWORD *)(v848 + 72) < 0) {
                              sub_18131E420(v848, v957, v849);
                            }
                            else {
                              *(_DWORD *)(*(void *)(v848 + 80) + 4LL * v849) = *(_DWORD *)(v957 + 144);
                            }
                          }

                          v850 = &byte_18C550680;
                          if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                            v850 = (char *)(*(void *)(v304 + 136) + 40LL * v942);
                          }
                          *((_DWORD *)v850 + 2) = *(_DWORD *)(v304 + 144);
                          if (LODWORD(v961[0]))
                          {
                            uint64_t v851 = *(void *)(a1 + 16);
                            uint64_t v852 = *(void *)(v851 + 24);
                            int v853 = ~LODWORD(v961[0]);
                            uint64_t v583 = (uint64_t)v956;
                            if (*(_DWORD *)(v852 + 68) + *(_DWORD *)(v852 + 72) < 0) {
                              sub_18131E420(v852, v851, v853);
                            }
                            else {
                              *(_DWORD *)(*(void *)(v852 + 80) + 4LL * v853) = *(_DWORD *)(v851 + 144);
                            }
                            uint64_t v616 = v763;
                            v620 = zDbNameb;
                          }

                          else
                          {
                            uint64_t v616 = v763;
                            v620 = zDbNameb;
                            uint64_t v583 = (uint64_t)v956;
                          }
                        }

                        ++v764;
                        uint64_t v763 = *(void *)(v763 + 40);
                      }

                      while (v763);
                    }

                    sub_1813103F4(v304, 39LL, v959, v927, v614, v615, v616, v617);
                    v855 = &byte_18C550680;
                    uint64_t v538 = v924;
                    if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                      v855 = (char *)(*(void *)(v304 + 136) + 40LL * (int)v927 - 40);
                    }
                    *((_DWORD *)v855 + 2) = *(_DWORD *)(v304 + 144);
                    sub_1812B9B68( (uint64_t *)v304,  117LL,  0LL,  2LL,  0LL,  (uint64_t)"wrong # of entries in index ",  0LL,  v854);
                    v856 = (uint64_t *)*v931;
                    uint64_t v305 = v926;
                    unsigned int v539 = v925;
                    v857 = zDbNameb;
                    if (*v931)
                    {
                      int v858 = 0;
                      int v859 = v958;
                      do
                      {
                        if (v857 != (char *)v856)
                        {
                          uint64_t v860 = (v859 + v858);
                          int v861 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v861)
                          {
                            sub_18131044C(v304, 98LL, v860, 3LL, 0LL, v534, v535, v536);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v861 + 1;
                            uint64_t v862 = *(void *)(v304 + 136) + 40LL * v861;
                            *(_DWORD *)uint64_t v862 = 98;
                            *(_DWORD *)(v862 + 4) = v860;
                            *(_DWORD *)(v862 + 8) = 3;
                            *(void *)(v862 + 12) = 0LL;
                            *(void *)(v862 + 28) = 0LL;
                            *(void *)(v862 + 20) = 0LL;
                            *(_DWORD *)(v862 + 36) = 0;
                          }

                          uint64_t v863 = (v858 + 8);
                          int v864 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v864)
                          {
                            int v864 = sub_18131044C(v304, 53LL, v863, 0LL, 3LL, v534, v535, v536);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v864 + 1;
                            uint64_t v865 = *(void *)(v304 + 136) + 40LL * v864;
                            *(_DWORD *)uint64_t v865 = 53;
                            *(_DWORD *)(v865 + 4) = v863;
                            *(void *)(v865 + 8) = 0x300000000LL;
                            *(void *)(v865 + 24) = 0LL;
                            *(void *)(v865 + 32) = 0LL;
                            *(void *)(v865 + 16) = 0LL;
                          }

                          int v866 = *(_DWORD *)(v304 + 144);
                          BOOL v559 = __OFSUB__(v866, 1);
                          int v867 = v866 - 1;
                          if (v867 < 0 == v559) {
                            *(_WORD *)(*(void *)(v304 + 136) + 40LL * v867 + 2) = 144;
                          }
                          sub_1812B9B68((uint64_t *)v304, 117LL, 0LL, 4LL, 0LL, *v856, 0LL, v536);
                          int v875 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v875)
                          {
                            sub_18131044C(v304, 111LL, 4LL, 2LL, 3LL, v872, v873, v874);
                          }

                          else
                          {
                            *(_DWORD *)(v304 + 144) = v875 + 1;
                            uint64_t v876 = *(void *)(v304 + 136) + 40LL * v875;
                            *(_DWORD *)uint64_t v876 = 111;
                            *(void *)(v876 + 4) = 0x200000004LL;
                            *(_DWORD *)(v876 + 12) = 3;
                            *(void *)(v876 + 24) = 0LL;
                            *(void *)(v876 + 32) = 0LL;
                            *(void *)(v876 + 16) = 0LL;
                          }

                          sub_181345F60(v304, v868, v869, v870, v871, v872, v873, v874);
                          v877 = &byte_18C550680;
                          if (!*(_BYTE *)(*(void *)v304 + 103LL)) {
                            v877 = (char *)(*(void *)(v304 + 136) + 40LL * v864);
                          }
                          *((_DWORD *)v877 + 2) = *(_DWORD *)(v304 + 144);
                          v857 = zDbNameb;
                        }

                        ++v858;
                        v856 = (uint64_t *)v856[5];
                      }

                      while (v856);
                    }

                    v581 = v928;
                    if (v857)
                    {
                      int v878 = *((unsigned __int16 *)v857 + 47);
                      if (v878 == 1)
                      {
                        if (!v929) {
                          goto LABEL_757;
                        }
                        uint64_t v879 = *(unsigned __int8 *)(a1 + 31);
                        *(_BYTE *)(a1 + 31) = v879 + 1;
                        v880 = (unsigned int *)(a1 + 4 * v879 + 224);
                        goto LABEL_1038;
                      }

                      if (*(_DWORD *)(a1 + 40) < v878)
                      {
                        *(_DWORD *)(a1 + 40) = v878;
                        v880 = (unsigned int *)(a1 + 44);
LABEL_1038:
                        unsigned int *v880 = v929;
                      }
                    }

LABEL_757:
                    v581 = (void *)*v581;
                    if (!v581) {
                      goto LABEL_715;
                    }
                  }
                }

                if ((v923 & 0x80000000) != 0) {
                  v492 = 0LL;
                }
                else {
                  v492 = *(_BYTE **)(*((void *)v950 + 4) + 32LL * v923);
                }
                uint64_t v305 = sub_18129EAF4(a1, 0, __s, v492, v58, v59, v60, v61);
                int v303 = (int)v960;
              }

              else
              {
                uint64_t v305 = 0LL;
              }

              uint64_t v304 = v957;
              goto LABEL_710;
            case 0x16:
              if (!__s) {
                goto LABEL_703;
              }
              int v306 = strlen(__s) & 0x3FFFFFFF;
              if (sqlite3_strnicmp(__s, "delete", v306))
              {
                if (!sqlite3_strnicmp(__s, "persist", v306))
                {
                  char v495 = 1;
                  char v308 = 3;
                  uint64_t v307 = 1LL;
                  goto LABEL_1064;
                }

                if (sqlite3_strnicmp(__s, "off", v306))
                {
                  if (sqlite3_strnicmp(__s, "truncate", v306))
                  {
                    if (sqlite3_strnicmp(__s, "memory", v306))
                    {
                      uint64_t v84 = (uint64_t)v950;
                      if (!sqlite3_strnicmp(__s, "wal", v306))
                      {
                        uint64_t v307 = 5LL;
                        char v308 = 2;
LABEL_629:
                        char v495 = 1;
LABEL_1064:
                        uint64_t v531 = v18;
                        goto LABEL_1065;
                      }

LABEL_703:
                      uint64_t v531 = v18;
                      if (!*(_DWORD *)(a3 + 8))
                      {
                        LODWORD(v18) = 0;
                        *(_DWORD *)(a3 + 8) = 1;
                        uint64_t v307 = 0xFFFFFFFFLL;
                        goto LABEL_1071;
                      }

                      char v495 = 0;
                      uint64_t v307 = 0xFFFFFFFFLL;
                      char v308 = 3;
LABEL_1065:
                      if ((_DWORD)v18 == 1)
                      {
                        LODWORD(v18) = 1;
                      }

                      else
                      {
                        uint64_t v889 = v26 + 32 * v531;
                        char v890 = v495 ^ 1;
                        if (*(_BYTE *)(v889 + 17)) {
                          char v890 = 1;
                        }
                        if ((v890 & 1) == 0)
                        {
                          uint64_t v891 = **(void **)(*(void *)(v889 + 8) + 8LL);
                          *(_BYTE *)(v889 + 16) = v308;
                          sub_1812FAF30(v891, *(_BYTE *)(v84 + 48) & 0x38 | v308);
                        }
                      }

LABEL_1071:
                      uint64_t v892 = *(unsigned int *)(v84 + 40);
                      if ((int)v892 >= 1)
                      {
                        do
                        {
                          uint64_t v896 = v892 - 1;
                          if (*(void *)(*(void *)(v84 + 32) + 32LL * (v892 - 1) + 8)
                            && ((_DWORD)v18 + 1 == (_DWORD)v892 || !*(_DWORD *)(a3 + 8)))
                          {
                            sub_1812DC804((_DWORD *)v957, v896);
                            sub_181279C3C(v957, 4LL, v896, 1LL, v307, v893, v894, v895);
                          }

                          uint64_t v892 = v896;
                        }

                        while ((unint64_t)(v896 + 1) > 1);
                      }

                      uint64_t v450 = v957;
                      uint64_t v451 = 1LL;
LABEL_1080:
                      uint64_t v507 = 1LL;
                      goto LABEL_1081;
                    }

                    uint64_t v307 = 4LL;
                    char v308 = 3;
                    char v495 = 1;
                  }

                  else
                  {
                    char v308 = 3;
                    char v495 = 1;
                    uint64_t v307 = 3LL;
                  }

                  uint64_t v84 = (uint64_t)v950;
                  goto LABEL_1064;
                }

                if ((*((_BYTE *)v950 + 51) & 0x10) != 0) {
                  goto LABEL_703;
                }
                uint64_t v307 = 2LL;
              }

              else
              {
                uint64_t v307 = 0LL;
              }

              char v308 = 3;
              goto LABEL_629;
            case 0x17:
              uint64_t v309 = **(void **)(*(void *)(v26 + 32LL * v18 + 8) + 8LL);
              v961[0] = (void *)-2LL;
              if (__s)
              {
                sub_1812E4D40(__s, (unint64_t *)v961);
                else {
                  uint64_t v310 = (uint64_t)v961[0];
                }
                *(void *)(v309 + 208) = v310;
                uint64_t v311 = *(void *)(v309 + 344);
                uint64_t v312 = v957;
                if (v311) {
                  *(void *)(v311 + 32) = v310;
                }
              }

              else
              {
                uint64_t v310 = *(void *)(v309 + 208);
                uint64_t v312 = v957;
              }

              v961[0] = (void *)v310;
              sub_1813454D8(v312, v310);
              goto LABEL_1082;
            case 0x18:
              uint64_t v313 = **(void **)(*(void *)(v26 + 32LL * v18 + 8) + 8LL);
              if (__s)
              {
                uint64_t v314 = **(void **)(v313 + 72);
                if (*__s)
                {
                  uint64_t v116 = v946;
                  if (v314)
                  {
                    v315 = *(unsigned int (**)(void))(v314 + 80);
                    goto LABEL_612;
                  }
                }

                else
                {
                  uint64_t v116 = v946;
                  if (v314)
                  {
                    v315 = *(unsigned int (**)(void))(v314 + 80);
LABEL_612:
                    if (!v315()) {
                      goto LABEL_635;
                    }
                  }
                }

                sub_1812DC47C(a1, "failed to set lock proxy file", v56, v57, v58, v59, v60, v61, v920);
                goto LABEL_635;
              }

              v961[0] = 0LL;
              uint64_t v459 = **(void **)(v313 + 72);
              if (v459)
              {
                (*(void (**)(void))(v459 + 80))();
                v458 = (char *)v961[0];
              }

              else
              {
                v458 = 0LL;
              }

              uint64_t v116 = v946;
LABEL_684:
              sub_181345374((uint64_t *)v957, (uint64_t)v458, v56, v57, v58, v59, v60, v61);
LABEL_685:
              v525 = v950;
              v498 = v116;
              goto LABEL_1084;
            case 0x19:
              int v316 = sub_181345620(__s);
              int v323 = *(_DWORD *)(a3 + 8);
              if (v323 || v316 != -1)
              {
                if (!v323)
                {
                  uint64_t v446 = *((unsigned int *)v950 + 10);
                  if ((int)v446 > 2)
                  {
                    uint64_t v447 = *((void *)v950 + 4) + 72LL;
                    uint64_t v448 = v446 - 2;
                    do
                    {
                      if ((v316 & 0x80000000) == 0)
                      {
                        uint64_t v452 = **(void **)(*(void *)v447 + 8LL);
                        if (!*(_BYTE *)(v452 + 16))
                        {
                          uint64_t v453 = *(void *)(v452 + 344);
                          if (!v453 || *(_BYTE *)(v453 + 63) != 2) {
                            *(_BYTE *)(v452 + 8) = v316;
                          }
                        }
                      }

                      v447 += 32LL;
                      --v448;
                    }

                    while (v448);
                  }

                  *((_BYTE *)v950 + 105) = v316;
                }

                v325 = (uint64_t *)v957;
                uint64_t v499 = **(void **)(*(void *)(v26 + 32LL * v18 + 8) + 8LL);
                if ((v316 & 0x80000000) == 0 && !*(_BYTE *)(v499 + 16))
                {
                  uint64_t v500 = *(void *)(v499 + 344);
                  if (!v500 || *(_BYTE *)(v500 + 63) != 2) {
                    *(_BYTE *)(v499 + 8) = v316;
                  }
                }

                v324 = (_BYTE *)(v499 + 8);
              }

              else
              {
                v324 = (char *)v950 + 105;
                v325 = (uint64_t *)v957;
              }

              if (*v324 == 1) {
                v501 = "exclusive";
              }
              else {
                v501 = "normal";
              }
              sub_181345374(v325, (uint64_t)v501, v317, v318, v319, v320, v321, v322);
              goto LABEL_1082;
            case 0x1A:
              v961[0] = 0LL;
              sub_18128BBA8(a1, v18);
              uint64_t v330 = (*(_DWORD *)(a1 + 56) + 1);
              *(_DWORD *)(a1 + 56) = v330;
              if ((*v946 & 0xDF) == 0x50)
              {
                uint64_t v331 = v957;
                sub_1813103F4(v957, 177LL, v18, v330, v326, v327, v328, v329);
              }

              else
              {
                uint64_t v331 = v957;
                if (__s && !sub_1812E4D40(__s, (unint64_t *)v961))
                {
                  uint64_t v449 = (uint64_t)v961[0];
                  if (((unint64_t)v961[0] & 0x8000000000000000LL) != 0)
                  {
                    uint64_t v449 = 0LL;
                    v961[0] = 0LL;
                    uint64_t v331 = v957;
                  }

                  else
                  {
                    uint64_t v331 = v957;
                    if (v961[0] >= (void *)0xFFFFFFFFLL)
                    {
                      uint64_t v449 = 4294967294LL;
                      v961[0] = (void *)4294967294LL;
                    }
                  }
                }

                else
                {
                  uint64_t v449 = 0LL;
                  v961[0] = 0LL;
                }

                sub_181279C3C(v331, 178LL, v18, v330, v449, v327, v328, v329);
              }

              uint64_t v450 = v331;
              uint64_t v451 = v330;
              goto LABEL_1080;
            case 0x1B:
              if (__s)
              {
                sub_1812E4D40(__s, (unint64_t *)v961);
                v332 = v961[0];
                if (((unint64_t)v961[0] & 0x8000000000000000LL) != 0)
                {
                  v332 = (void *)qword_18C4654A8;
                  v961[0] = (void *)qword_18C4654A8;
                }

                if (!*(_DWORD *)(a3 + 8)) {
                  *((void *)v950 + 8) = v332;
                }
                uint64_t v333 = *((unsigned int *)v950 + 10);
                if ((int)v333 >= 1)
                {
                  do
                  {
                    uint64_t v334 = v333 - 1;
                    uint64_t v335 = *(void *)(*((void *)v950 + 4) + 32LL * (v333 - 1) + 8);
                    if (v335 && ((_DWORD)v18 + 1 == (_DWORD)v333 || !*(_DWORD *)(a3 + 8))) {
                      sub_18134582C(v335, (uint64_t)v961[0]);
                    }
                    uint64_t v333 = v334;
                  }

                  while ((unint64_t)(v334 + 1) > 1);
                }
              }

              v961[0] = (void *)-1LL;
              int v442 = sqlite3_file_control(v950, zDbName, 18, v961);
              if (v442 != 12)
              {
                if (v442)
                {
                  ++*(_DWORD *)(a1 + 48);
                  *(_DWORD *)(a1 + 24) = v442;
                }

                else
                {
                  sub_1813454D8(v957, (uint64_t)v961[0]);
                }
              }

              goto LABEL_1082;
            case 0x1C:
              *(_DWORD *)(a1 + 56) = 1;
              for (nuint64_t n = (void *)*((void *)v950 + 72); nn; nuint64_t n = (void *)*nn)
                sub_181345BD0(v957, 1LL, (uint64_t)"s", v57, v58, v59, v60, v61, *(void *)(nn[2] + 8LL));
              goto LABEL_1082;
            case 0x1D:
              if (__s)
              {
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                char v337 = (char)v961[0];
                uint64_t v116 = v946;
              }

              else
              {
                char v337 = -2;
              }

              uint64_t v460 = *(unsigned int *)(a1 + 52);
              *(_DWORD *)(a1 + 52) = v460 + 1;
              int v461 = v18;
              if (!zDbName) {
                int v461 = *((_DWORD *)v950 + 10) - 1;
              }
              uint64_t v462 = v957;
              int v463 = v337 & 1;
              uint64_t v464 = (int)v18;
              int v955 = v461 + 1;
              do
              {
                if (v464 != 1)
                {
                  sub_18128BBA8(a1, v464);
                  for (i1 = *(void **)(*(void *)(*((void *)v950 + 4) + 32 * v464 + 24) + 16LL);
                        i1;
                        i1 = (void *)*i1)
                  {
                    uint64_t v466 = i1[2];
                    if ((*(_BYTE *)(v466 + 49) & 1) != 0)
                    {
                      __int16 v467 = *(_WORD *)(v466 + 58);
                      uint64_t v468 = *(void *)(v466 + 16);
                      if (v468)
                      {
                        while ((*(_WORD *)(v468 + 99) & 0x80) != 0)
                        {
                          uint64_t v468 = *(void *)(v468 + 40);
                          if (!v468) {
                            goto LABEL_575;
                          }
                        }
                      }

                      else
                      {
LABEL_575:
                        __int16 v469 = v467 + 46;
                        if (v467 != -46)
                        {
                          sub_18128BBE0((void *)a1, v460, v464, i1[2], 112LL, v59, v60, v61);
                          int v470 = *(_DWORD *)(v957 + 144);
                          uint64_t v57 = v470 + (v463 | 2u);
                          uint64_t v58 = v469;
                          if (*(_DWORD *)(v957 + 148) <= v470)
                          {
                            sub_18131044C(v957, 33LL, v460, v57, v58, v59, v60, v61);
                          }

                          else
                          {
                            *(_DWORD *)(v957 + 144) = v470 + 1;
                            uint64_t v471 = *(void *)(v957 + 136) + 40LL * v470;
                            *(_DWORD *)uint64_t v471 = 33;
                            *(_DWORD *)(v471 + 4) = v460;
                            *(_DWORD *)(v471 + 8) = v57;
                            *(_DWORD *)(v471 + 12) = v58;
                            *(void *)(v471 + 24) = 0LL;
                            *(void *)(v471 + 32) = 0LL;
                            *(void *)(v471 + 16) = 0LL;
                          }
                        }
                      }

                      v472 = sub_18127F588( (uint64_t)v950,  "ANALYZE %w.%w",  v56,  v57,  v58,  v59,  v60,  v61,  *(void *)(*((void *)v950 + 4) + 32 * v464));
                      if (v463)
                      {
                        uint64_t v462 = v957;
                        if (*(_BYTE *)(a1 + 31))
                        {
                          unsigned __int8 v474 = *(_BYTE *)(a1 + 31) - 1;
                          *(_BYTE *)(a1 + 31) = v474;
                          uint64_t v475 = *(unsigned int *)(a1 + 4LL * v474 + 224);
                        }

                        else
                        {
                          uint64_t v475 = (*(_DWORD *)(a1 + 56) + 1);
                          *(_DWORD *)(a1 + 56) = v475;
                        }

                        sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, v475, 0LL, (uint64_t)v472, 4294967290LL, v473);
                        sub_1813103F4(v957, 84LL, v475, 1LL, v476, v477, v478, v479);
                      }

                      else
                      {
                        uint64_t v462 = v957;
                        sub_1812B9B68((uint64_t *)v957, 148LL, 0LL, 0LL, 0LL, (uint64_t)v472, 4294967290LL, v473);
                      }
                    }
                  }
                }

                ++v464;
              }

              while (v955 != (_DWORD)v464);
LABEL_554:
              sub_181319B54(v462, 166LL, v56, v57, v58, v59, v60, v61);
              goto LABEL_1082;
            case 0x1E:
              uint64_t v338 = *(void *)(v26 + 32LL * v18 + 8);
              if (__s)
              {
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                int v339 = (int)v961[0];
                *((_DWORD *)v950 + 29) = v961[0];
                uint64_t v116 = v946;
                goto LABEL_635;
              }

              if (v338) {
                uint64_t v456 = *(int *)(*(void *)(v338 + 8) + 52LL);
              }
              else {
LABEL_585:
              }
                uint64_t v456 = 0LL;
LABEL_586:
              uint64_t v116 = v946;
              sub_1813454D8(v957, v456);
              goto LABEL_685;
            case 0x1F:
              for (uint64_t i2 = 0LL; i2 != 222; i2 += 3LL)
              {
                v349 = v66;
                sub_181345BD0(v957, 1LL, (uint64_t)"s", v57, v58, v59, v60, v61, (uint64_t)v66[i2]);
                uint64_t v66 = v349;
              }

              goto LABEL_1082;
            case 0x20:
              uint64_t v350 = *(void *)(v26 + 32LL * v18 + 8);
              if (!__s)
              {
                int v355 = -1;
                goto LABEL_598;
              }

              uint64_t v351 = 0LL;
              uint64_t v352 = v957;
              while (2)
              {
                uint64_t v353 = __s[v351];
                uint64_t v354 = aFast[v351];
                if ((_DWORD)v353 == (_DWORD)v354)
                {
                  if (!__s[v351])
                  {
                    int v355 = 2;
                    goto LABEL_594;
                  }
                }

                else if (byte_1813C6343[v353] != byte_1813C6343[v354])
                {
                  int v355 = sub_181345AA0(__s, 1, 0) != 0;
LABEL_594:
                  if (*(_DWORD *)(a3 + 8)) {
                    goto LABEL_599;
                  }
                  if (*((int *)v950 + 10) >= 1)
                  {
                    uint64_t v484 = 0LL;
                    uint64_t v485 = 8LL;
                    do
                    {
                      sub_181345590(*(void *)(*((void *)v950 + 4) + v485), v355);
                      ++v484;
                      v485 += 32LL;
                    }

                    while (v484 < *((int *)v950 + 10));
                  }

LABEL_598:
                  uint64_t v352 = v957;
LABEL_599:
                  unsigned int v486 = sub_181345590(v350, v355);
                  sub_1813454D8(v352, v486);
                  goto LABEL_1082;
                }

                ++v351;
                continue;
              }

            case 0x21:
              sqlite3_db_release_memory(v950);
              goto LABEL_1082;
            case 0x22:
              uint64_t v261 = sqlite3_soft_heap_limit64(-1LL);
LABEL_353:
              uint64_t v85 = v261;
              goto LABEL_477;
            case 0x23:
              if (!__s)
              {
                uint64_t v454 = *(unsigned __int8 *)(v26 + 32LL * v18 + 16) - 1LL;
                goto LABEL_560;
              }

              if (!*((_BYTE *)v950 + 101))
              {
                sub_1812DC47C( a1,  "Safety level may not be changed inside a transaction",  v56,  v57,  v58,  v59,  v60,  v61,  v920);
                goto LABEL_634;
              }

              uint64_t v116 = v946;
              if ((_DWORD)v18 != 1)
              {
                char v356 = sub_181345AA0(__s, 0, 1u);
                if (((v356 + 1) & 6) != 0) {
                  char v357 = (v356 + 1) & 7;
                }
                else {
                  char v357 = 1;
                }
                uint64_t v358 = v26 + 32LL * v18;
                *(_BYTE *)(v358 + 16) = v357;
                *(_BYTE *)(v358 + 17) = 1;
LABEL_361:
                sub_1813457B4((uint64_t)v950);
              }

              goto LABEL_635;
            case 0x24:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              sub_181324D00((_DWORD *)a1, zDbName);
              uint64_t v363 = sub_18129EAF4(a1, 2, __s, zDbName, v359, v360, v361, v362);
              if (!v363) {
                goto LABEL_635;
              }
              uint64_t v370 = v363;
              for (uint64_t i3 = *(void *)(v363 + 16); i3; uint64_t i3 = *(void *)(i3 + 40))
              {
                if ((*(_WORD *)(i3 + 99) & 3) == 2) {
                  break;
                }
              }

              *(_DWORD *)(a1 + 56) = 7;
              if (*(_BYTE *)(v363 + 63) != 1 && (int v372 = *(__int16 *)(v363 + 54), v372 > 0)
                || (sub_181322320(a1, v363, v364, v365, v366, v367, v368, v369),
                    int v372 = *(__int16 *)(v370 + 54),
                    v372 >= 1))
              {
                int v373 = 0;
                int v954 = 0;
                int v374 = (unsigned __int16)v372;
                uint64_t v375 = *(void *)(v370 + 8);
                v376 = &(&off_189B6DCE8)[3 * (int)v69 + 2];
                zDbNamea = (char *)v370;
                do
                {
                  __int16 v382 = *(_WORD *)(v375 + 14);
                  if ((v382 & 0x62) != 0 && !*v376)
                  {
                    ++v954;
                  }

                  else
                  {
                    if (i3 && (v382 & 1) != 0 && v374 >= 1)
                    {
                      uint64_t v383 = 0LL;
                      do
                      {
                        ++v383;
                      }

                      while ((v374 + 1) - 1LL != v383);
                    }

                    if (*v376) {
                      v384 = "issisii";
                    }
                    else {
                      v384 = "issisi";
                    }
                    sub_1812E35B4(v375, (uint64_t)&byte_1813CEAEE);
                    sub_181345BD0(v957, 1LL, (uint64_t)v384, v377, v378, v379, v380, v381, (v373 - v954));
                    LOWORD(v372) = *((_WORD *)zDbNamea + 27);
                  }

                  ++v373;
                  v375 += 16LL;
                  int v374 = (__int16)v372;
                }

                while (v373 < (__int16)v372);
              }

              goto LABEL_1082;
            case 0x25:
              *(_DWORD *)(a1 + 56) = 6;
              sub_181324D00((_DWORD *)a1, zDbName);
              v391 = zDbName;
              uint64_t v392 = 0LL;
              while (1)
              {
                v393 = v950;
                uint64_t v394 = *((void *)v950 + 4);
                if (v391)
                {
                  v395 = *(unsigned __int8 **)(v394 + 32 * v392);
                  if (v395)
                  {
                    for (i4 = v391; ; ++i4)
                    {
                      uint64_t v397 = *i4;
                      uint64_t v398 = *v395;
                      if ((_DWORD)v397 == (_DWORD)v398)
                      {
                        if (!*i4) {
                          goto LABEL_396;
                        }
                      }

                      else if (byte_1813C6343[v397] != byte_1813C6343[v398])
                      {
                        goto LABEL_388;
                      }

                      ++v395;
                    }
                  }

                  goto LABEL_388;
                }

            unsigned int v8 = v225;
          }

          break;
        case 'z':
          uint64_t v285 = (v8 - 5);
          if (*(_DWORD *)&v13[v285] != 2053729377 || v13[v285 + 4] != 101) {
            break;
          }
          uint64_t v287 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v287 <= 0xA)
          {
            uint64_t v288 = 1;
            if (((1 << v287) & 0x495) != 0)
            {
              uint64_t v289 = 0;
              goto LABEL_542;
            }
          }

          uint64_t v289 = 1;
          if ((_DWORD)v8 == 6)
          {
            uint64_t v288 = 0;
            goto LABEL_542;
          }

          uint64_t v369 = 1LL;
          while (1)
          {
            uint64_t v370 = v13[v369];
            v371 = (((v370 - 97) >> 1) | (((_BYTE)v370 - 97) << 7));
            uint64_t v23 = v371 > 0xA;
            int v372 = (1 << v371) & 0x495;
            int v373 = v23 || v372 == 0;
            if (!v373 || v370 == 121) {
              break;
            }
            if (v285 == ++v369)
            {
              uint64_t v288 = 0;
              uint64_t v289 = v8 - 5;
              goto LABEL_542;
            }
          }

          uint64_t v288 = 1;
          uint64_t v289 = v369;
LABEL_542:
          uint64_t v290 = v13[v289 + 1];
          uint64_t v291 = (((v290 - 97) >> 1) | (((_BYTE)v290 - 97) << 7));
          uint64_t v23 = v291 > 0xA;
          v292 = (1 << v291) & 0x495;
          if (v23 || v292 == 0)
          {
            if (v290 != 121) {
              uint64_t v288 = 1;
            }
            if ((v288 & 1) != 0) {
              goto LABEL_702;
            }
          }

          uint64_t v294 = v289 + 2LL;
          if ((int)v285 > (int)v294)
          {
            uint64_t v295 = &v13[v294];
            while (1)
            {
              uint64_t v296 = *v295++;
              uint64_t v297 = (((v296 - 97) >> 1) | ((v296 - 97) << 7));
              uint64_t v23 = v297 > 0xA;
              v298 = (1 << v297) & 0x495;
              if (v23 || v298 == 0) {
                break;
              }
              LODWORD(v294) = v294 + 1;
            }

LABEL_396:
                uint64_t v399 = *(void *)(v394 + 32 * v392 + 24);
                uint64_t v400 = v399 + 8;
                int v401 = *(_DWORD *)(v399 + 12);
                if (v401)
                {
LABEL_397:
                  --v401;
                  v402 = (void *)(v400 + 8);
                  while (1)
                  {
                    v402 = (void *)*v402;
                    if (!v402) {
                      break;
                    }
                    uint64_t v403 = v402[2];
                    if (!*(_WORD *)(v403 + 54))
                    {
                      v404 = sub_18127F588( (uint64_t)v950,  "SELECT*FROM%w",  v385,  v386,  v387,  v388,  v389,  v390,  *(void *)v403);
                      if (v404)
                      {
                        v405 = v404;
                        v961[0] = 0LL;
                        sub_18126DFE0(v950, v404, 0xFFFFFFFFLL, 0LL, 0LL, v961, 0LL);
                        sqlite3_finalize((sqlite3_stmt *)v961[0]);
                        sub_1812F20DC(v950, v405);
                      }

                      if (*((_BYTE *)v950 + 103))
                      {
                        sub_1812DC47C(*((void *)v950 + 43), "out of memory", v385, v386, v387, v388, v389, v390, v921);
                        *(_DWORD *)(*((void *)v950 + 43) + 24LL) = 7;
                      }

                      uint64_t v400 = *(void *)(*((void *)v950 + 4) + 32 * v392 + 24) + 8LL;
                      if (v401) {
                        goto LABEL_397;
                      }
                      break;
                    }
                  }
                }

                v406 = *(void **)(v400 + 8);
                if (v406) {
                  break;
                }
LABEL_388:
              }

              while (1)
              {
                v407 = (unsigned __int8 **)v406[2];
                if (__s)
                {
                  v408 = *v407;
                  if (*v407)
                  {
                    for (i5 = __s; ; ++i5)
                    {
                      uint64_t v410 = *i5;
                      uint64_t v411 = *v408;
                      if ((_DWORD)v410 == (_DWORD)v411)
                      {
                        if (!*i5) {
                          goto LABEL_416;
                        }
                      }

                      else if (byte_1813C6343[v410] != byte_1813C6343[v411])
                      {
                        goto LABEL_408;
                      }

                      ++v408;
                    }
                  }

                  goto LABEL_408;
                }

      if (!v202)
      {
        uint64_t v59 = 0LL;
        uint64_t v296 = *(_DWORD *)(v42 + 144);
        *((_BYTE *)v56 + 65) = v31 ^ 0x27;
        v56[17] = v486;
        v56[18] = v296;
        goto LABEL_136;
      }

      uint64_t v290 = *v202;
      uint64_t v291 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v291;
      sub_181338F40(a1, v290[3], v291, 1LL, (uint64_t)a5, a6, a7, a8);
      v292 = v290[3];
      int v293 = *v292;
      uint64_t v294 = v293;
      if (v293 == 176) {
        uint64_t v294 = v292[2];
      }
      if (v294 == 138)
      {
        uint64_t v295 = (int **)(*((void *)v292 + 4) + 32LL);
      }

      else
      {
        if (v294 != 177)
        {
LABEL_405:
          uint64_t v297 = *(unsigned __int8 *)v290;
          if (v297 == 56 || v297 == 54)
          {
            v298 = v31 == 0;
            int v299 = 55;
            uint64_t v300 = 57;
            goto LABEL_409;
          }

LABEL_416:
                uint64_t v412 = *(void *)(*((void *)v393 + 4) + 32 * v392);
                v413 = *v407;
                if (*v407) {
                  break;
                }
LABEL_407:
                sub_181345BD0(v957, 1LL, (uint64_t)"sssiii", v386, v387, v388, v389, v390, v412);
LABEL_408:
                v406 = (void *)*v406;
                if (!v406) {
                  goto LABEL_388;
                }
              }

              unint64_t v414 = *v413;
              if (!*v413)
              {
                v415 = "sqlite_";
                goto LABEL_445;
              }

              if ((v414 & 0xFFFFFFDF) == 0x53)
              {
                unint64_t v414 = v413[1];
                if (!v413[1])
                {
                  v415 = "qlite_";
                  goto LABEL_445;
                }

                if ((v414 & 0xFFFFFFDF) == 0x51)
                {
                  unint64_t v414 = v413[2];
                  if (!v413[2])
                  {
                    v415 = "lite_";
                    goto LABEL_445;
                  }

                  if ((v414 & 0xFFFFFFDF) == 0x4C)
                  {
                    unint64_t v414 = v413[3];
                    if (!v413[3])
                    {
                      v415 = "ite_";
                      goto LABEL_445;
                    }

                    if ((v414 & 0xFFFFFFDF) == 0x49)
                    {
                      unint64_t v414 = v413[4];
                      if (!v413[4])
                      {
                        v415 = "te_";
                        goto LABEL_445;
                      }

                      if ((v414 & 0xFFFFFFDF) == 0x54)
                      {
                        unint64_t v414 = v413[5];
                        if (!v413[5])
                        {
                          v415 = "e_";
                          goto LABEL_445;
                        }

                        if ((v414 & 0xFFFFFFDF) == 0x45)
                        {
                          unint64_t v414 = v413[6];
                          if (!v413[6])
                          {
                            v415 = "_";
                            v391 = zDbName;
                            v393 = v950;
LABEL_445:
                            if ((_DWORD)v414 == byte_1813C6343[*v415])
                            {
LABEL_446:
                              for (uint64_t i6 = 7u; ; ++i6)
                              {
                                uint64_t v417 = v413[i6];
                                uint64_t v418 = aSqliteMaster[i6];
                                if ((_DWORD)v417 == (_DWORD)v418)
                                {
                                  if (!v413[i6]) {
                                    goto LABEL_407;
                                  }
                                }

                                else if (byte_1813C6343[v417] != byte_1813C6343[v418])
                                {
                                  for (uint64_t i7 = 7u; ; ++i7)
                                  {
                                    uint64_t v420 = v413[i7];
                                    uint64_t v421 = aSqliteTempMast[i7];
                                    if ((_DWORD)v420 == (_DWORD)v421)
                                    {
                                      if (!v413[i7]) {
                                        goto LABEL_407;
                                      }
                                    }

                                    else if (byte_1813C6343[v420] != byte_1813C6343[v421])
                                    {
                                      goto LABEL_407;
                                    }
                                  }
                                }
                              }
                            }

                            goto LABEL_407;
                          }

                          v391 = zDbName;
                          v393 = v950;
                          if ((_DWORD)v414 == 95) {
                            goto LABEL_446;
                          }
                          v414 += (unint64_t)byte_1813C6343;
                          v415 = "_";
                        }

                        else
                        {
                          v414 += (unint64_t)byte_1813C6343;
                          v415 = "e_";
                          v391 = zDbName;
                          v393 = v950;
                        }
                      }

                      else
                      {
                        v414 += (unint64_t)byte_1813C6343;
                        v415 = "te_";
                      }
                    }

                    else
                    {
                      v414 += (unint64_t)byte_1813C6343;
                      v415 = "ite_";
                    }
                  }

                  else
                  {
                    v414 += (unint64_t)byte_1813C6343;
                    v415 = "lite_";
                  }
                }

                else
                {
                  v414 += (unint64_t)byte_1813C6343;
                  v415 = "qlite_";
                }
              }

              else
              {
                v414 += (unint64_t)byte_1813C6343;
                v415 = "sqlite_";
              }

              LODWORD(v414) = *(unsigned __int8 *)v414;
              goto LABEL_445;
            case 0x26:
              if (__s)
              {
                sub_181345920(a1, (unsigned __int8 *)__s, v56, v57, v58, v59, v60, v61, v62, v920);
                goto LABEL_634;
              }

              uint64_t v454 = *((unsigned __int8 *)v950 + 102);
LABEL_560:
              uint64_t v455 = v957;
LABEL_561:
              sub_1813454D8(v455, v454);
              uint64_t v116 = v946;
              goto LABEL_685;
            case 0x27:
              if ((_BYTE)word_18C465384)
              {
                uint64_t v422 = qword_18C4653F0(11LL);
                if (v422) {
                  xmmword_18C465400(v422);
                }
              }

              if (!__s)
              {
                sub_181345374((uint64_t *)v957, (uint64_t)sqlite3_temp_directory, v56, v57, v58, v59, v60, v61);
LABEL_649:
                if ((_BYTE)word_18C465384)
                {
                  uint64_t v502 = qword_18C4653F0(11LL);
                  if (v502) {
                    xmmword_18C465410(v502);
                  }
                }

                goto LABEL_1082;
              }

              if (!*__s || !(*(unsigned int (**)(void))(*(void *)v950 + 56LL))() && LODWORD(v961[0]))
              {
                sqlite3_free(sqlite3_temp_directory);
                if (*__s) {
                  sqlite3_temp_directory = sqlite3_mprintf("%s", __s);
                }
                else {
                  sqlite3_temp_directory = 0LL;
                }
                goto LABEL_649;
              }

              sub_1812DC47C(a1, "not a writable directory", v56, v57, v58, v59, v60, v61, v920);
              if ((_BYTE)word_18C465384)
              {
                uint64_t v497 = qword_18C4653F0(11LL);
                if (v497) {
                  xmmword_18C465410(v497);
                }
              }

LABEL_634:
              uint64_t v116 = v946;
              goto LABEL_635;
            case 0x28:
              if (__s
                && !sub_1812E4D40(__s, (unint64_t *)v961)
                && ((unint64_t)v961[0] & 0x8000000000000000LL) == 0)
              {
                sqlite3_limit(v950, 11, (uint64_t)v961[0] & 0x7FFFFFFF);
              }

              uint64_t v85 = sqlite3_limit(v950, 11, -1);
              goto LABEL_477;
            case 0x29:
              if (__s)
              {
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                sqlite3_wal_autocheckpoint(v950, (int)v961[0]);
              }

              else {
                sub_1813454D8(v957, 0LL);
              }
              goto LABEL_1082;
            case 0x2A:
              if (*(void *)a3) {
                uint64_t v423 = v18;
              }
              else {
                uint64_t v423 = 12LL;
              }
              if (!__s) {
                goto LABEL_658;
              }
              v424 = "full";
              v425 = __s;
              uint64_t v426 = v957;
              while (2)
              {
                uint64_t v427 = *v425;
                uint64_t v428 = *(unsigned __int8 *)v424;
                if ((_DWORD)v427 == (_DWORD)v428)
                {
                  if (!*v425)
                  {
                    uint64_t v429 = 1LL;
                    goto LABEL_660;
                  }
                }

                else if (byte_1813C6343[v427] != byte_1813C6343[v428])
                {
                  v480 = "restart";
                  for (i8 = __s; ; ++i8)
                  {
                    uint64_t v482 = *i8;
                    uint64_t v483 = *(unsigned __int8 *)v480;
                    if ((_DWORD)v482 == (_DWORD)v483)
                    {
                      if (!*i8)
                      {
                        uint64_t v429 = 2LL;
                        goto LABEL_660;
                      }
                    }

                    else if (byte_1813C6343[v482] != byte_1813C6343[v483])
                    {
                      v503 = "truncate";
                      for (i9 = __s; ; ++i9)
                      {
                        uint64_t v505 = *i9;
                        uint64_t v506 = *(unsigned __int8 *)v503;
                        if ((_DWORD)v505 == (_DWORD)v506)
                        {
                          if (!*i9)
                          {
                            uint64_t v429 = 3LL;
                            goto LABEL_659;
                          }
                        }

                        else if (byte_1813C6343[v505] != byte_1813C6343[v506])
                        {
LABEL_658:
                          uint64_t v429 = 0LL;
LABEL_659:
                          uint64_t v426 = v957;
LABEL_660:
                          *(_DWORD *)(a1 + 56) = 3;
                          sub_181279C3C(v426, 3LL, v423, v429, 1LL, v59, v60, v61);
                          uint64_t v450 = v426;
                          uint64_t v451 = 1LL;
                          uint64_t v507 = 3LL;
LABEL_1081:
                          sub_1813103F4(v450, 84LL, v451, v507, v58, v59, v60, v61);
                          goto LABEL_1082;
                        }

                        ++v503;
                      }
                    }

                    ++v480;
                  }
                }

                ++v425;
                ++v424;
                continue;
              }

            case 0x2B:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              uint64_t v430 = *__s;
              if (!*__s)
              {
                int v496 = 0;
                v435 = "see-";
                goto LABEL_1111;
              }

              if ((v430 & 0xFFFFFFDF) != 0x53)
              {
                v434 = &byte_1813C6343[v430];
                v435 = "see-";
LABEL_1108:
                int v496 = *v434;
                goto LABEL_1111;
              }

              uint64_t v431 = __s[1];
              if (__s[1])
              {
                if ((v431 & 0xFFFFFFDF) != 0x45)
                {
                  v434 = &byte_1813C6343[v431];
                  v435 = "ee-";
LABEL_1107:
                  uint64_t v84 = (uint64_t)v950;
                  uint64_t v116 = v946;
                  goto LABEL_1108;
                }

                uint64_t v432 = __s[2];
                if (__s[2])
                {
                  if ((v432 & 0xFFFFFFDF) == 0x45)
                  {
                    uint64_t v433 = __s[3];
                    if (__s[3])
                    {
                      uint64_t v84 = (uint64_t)v950;
                      uint64_t v116 = v946;
                      if ((_DWORD)v433 == 45) {
                        goto LABEL_1112;
                      }
                      v434 = &byte_1813C6343[v433];
                      v435 = "-";
                      goto LABEL_1108;
                    }

                    int v496 = 0;
                    v435 = "-";
                    goto LABEL_1110;
                  }

                  v434 = &byte_1813C6343[v432];
                  v435 = "e-";
                  goto LABEL_1107;
                }

                int v496 = 0;
                v435 = "e-";
              }

              else
              {
                int v496 = 0;
                v435 = "ee-";
              }

            sub_18127A200((void *)v13, (uint64_t)v580);
LABEL_635:
            *(_DWORD *)(v13 + 44) |= 1u;
            v12 += 40;
            goto LABEL_22;
          }
        }

      case 0x9Bu:
        v1517 = v12;
        v1527 = v17;
        v582 = *((void *)v12 + 2);
        uint64_t v583 = *(_DWORD *)(v582 + 4);
        v1548 = v18;
        if (v583) {
          v1506 = 0;
        }
        else {
          v1506 = *(_DWORD *)(v582 + 8) != 1;
        }
        uint64_t v838 = *((unsigned int *)v1517 + 2);
        v1559 = *((int *)v1517 + 1);
        int v839 = *(void *)(*(void *)(v13 + 32) + 32LL * *((unsigned __int16 *)v1517 + 1) + 8);
        v1502 = (int *)(v1567 + ((uint64_t)*((int *)v1517 + 3) << 6));
        uint64_t v840 = *v1502;
        int v841 = *(void *)(v839 + 8);
        v842 = *(void *)(*(void *)(v841 + 8) + 48LL);
        if (*(_BYTE *)(v839 + 17))
        {
          ++*(_DWORD *)(v839 + 20);
          if (!*(_BYTE *)(v839 + 18)) {
            sub_1812FDE20(v839);
          }
        }

        v1538 = v839;
        v1577 = 0u;
        v1578 = 0u;
        v1576 = 0u;
        memset(&__buf[1], 0, 48);
        v1579 = v13;
        *(void *)&__buf[0] = v841;
        *((void *)&__buf[0] + 1) = *(void *)v841;
        DWORD2(__buf[1]) = *(_DWORD *)(v841 + 64);
        HIDWORD(__buf[1]) = v840 + 1;
        *(void *)&v1577 = &v1571;
        *((void *)&v1577 + 1) = 0x7FFFFFFD00000064LL;
        BYTE5(v1578) = 1;
        if (!DWORD2(__buf[1])) {
          goto LABEL_2468;
        }
        uint64_t v843 = ((unint64_t)DWORD2(__buf[1]) >> 3) + 1;
        uint64_t v844 = (void *)sub_18126F0AC(v843);
        if (v844)
        {
          uint64_t v845 = v844;
          bzero(v844, v843);
          *(void *)&__buf[1] = v845;
          *((void *)&v1578 + 1) = sub_1812FDBB8(*(_DWORD *)(v841 + 52));
          if (*((void *)&v1578 + 1))
          {
            int v846 = dword_18C54FA50 / *(_DWORD *)(v841 + 52) + 1;
            if (v846 <= DWORD2(__buf[1]))
            {
              *(_BYTE *)(*(void *)&__buf[1] + (v846 >> 3)) |= 1 << ((dword_18C54FA50
                                                                     / *(_DWORD *)(v841 + 52)
                                                                     + 1) & 7);
              if (v1506)
              {
LABEL_1149:
                if (!v583)
                {
LABEL_2416:
                  v1370 = *(void *)(v841 + 8);
                  *(void *)(v1370 + 48) &= ~0x200000uLL;
                  v1371 = HIDWORD(__buf[1]);
                  if ((int)v838 >= 1 && HIDWORD(__buf[1]))
                  {
                    v1372 = 1LL;
                    do
                    {
                      v1373 = *(_DWORD *)(v582 + 4 * v1372);
                      if (v1373)
                      {
                        if (v583)
                        {
                          if (v1373 != 1 && *(_BYTE *)(v841 + 33) != 0)
                          {
                            v1375 = sub_18130008C(*(_DWORD **)&__buf[0], *(_DWORD *)(v582 + 4 * v1372), &v1569, &v1570);
                            if (v1375)
                            {
                              if (v1375 == 3082 || v1375 == 7)
                              {
                                DWORD1(__buf[2]) = 7;
                                HIDWORD(__buf[1]) = 0;
                                if (!LODWORD(__buf[2])) {
                                  LODWORD(__buf[2]) = 1;
                                }
                              }

                              sub_18130E688((uint64_t)__buf, "Failed to read ptrmap key=%u");
                            }

                            else if (v1569 != 1 || (_DWORD)v1570)
                            {
                              sub_18130E688((uint64_t)__buf, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
                            }

                            v1373 = *(_DWORD *)(v582 + 4 * v1372);
                          }
                        }

                        DWORD2(__buf[3]) = v1373;
                        sub_18130E894((uint64_t)__buf, v1373, &v1570, 0x7FFFFFFFFFFFFFFFLL);
                        v1371 = HIDWORD(__buf[1]);
                      }

                      if (v1372 >= v838) {
                        break;
                      }
                      ++v1372;
                    }

                    while (v1371);
                    v1370 = *(void *)(v841 + 8);
                  }

                  *(void *)(v1370 + 48) = v842;
                  if (v583 && DWORD2(__buf[1]) && v1371)
                  {
                    v1377 = -1;
                    do
                    {
                      v1378 = v1377 + 2;
                      v1379 = 1 << ((v1377 + 2) & 7);
                      if ((v1379 & *(_BYTE *)(*(void *)&__buf[1] + (v1378 >> 3))) != 0
                        || (v1378 >= 2
                          ? ((v1381 = v1377 / (*(_DWORD *)(v841 + 56) / 5u + 1) * (*(_DWORD *)(v841 + 56) / 5u + 1),
                              v1381 + 1 != dword_18C54FA50 / *(_DWORD *)(v841 + 52))
                           ? (v1382 = 2)
                           : (v1382 = 3),
                             v1380 = v1382 + v1381)
                          : (v1380 = 0),
                            ((_DWORD)v1378 != v1380 || !*(_BYTE *)(v841 + 33))
                         && (sub_18130E688((uint64_t)__buf, "Page %u: never used", v1377 + 2),
                             (v1379 & *(_BYTE *)(*(void *)&__buf[1] + (v1378 >> 3))) != 0)))
                      {
                        if (v1378 >= 2)
                        {
                          v1384 = v1377 / (*(_DWORD *)(v841 + 56) / 5u + 1) * (*(_DWORD *)(v841 + 56) / 5u + 1);
                          v1385 = v1384 + 1 == dword_18C54FA50 / *(_DWORD *)(v841 + 52) ? 3 : 2;
                          v1383 = v1385 + v1384;
                        }

                        else
                        {
                          v1383 = 0;
                        }

                        if ((_DWORD)v1378 == v1383 && *(_BYTE *)(v841 + 33)) {
                          sub_18130E688((uint64_t)__buf, "Page %u: pointer map referenced", v1377 + 2);
                        }
                      }

                      if (v1377 + 3 > DWORD2(__buf[1])) {
                        break;
                      }
                      ++v1377;
                    }

                    while (HIDWORD(__buf[1]));
                  }

                  goto LABEL_2468;
                }

LABEL_1110:
              uint64_t v84 = (uint64_t)v950;
              uint64_t v116 = v946;
LABEL_1111:
LABEL_1112:
              sqlite3_activate_see((uint64_t)(__s + 4));
LABEL_635:
              sub_1812F20DC((void *)v84, v116);
              v498 = __s;
LABEL_1083:
              v525 = (void *)v84;
LABEL_1084:
              sub_1812F20DC(v525, v498);
              return;
            case 0x2C:
              uint64_t v116 = v946;
              if (!__s) {
                goto LABEL_685;
              }
              v436 = (&off_189B6DCE8)[3 * (int)v69 + 2];
              if ((v67 & 0xFFFFFFFC) == 0x38)
              {
                uint64_t v437 = 0LL;
                char v438 = 0;
                do
                {
                  uint64_t v439 = __s[v437];
                  if ((byte_1813C6558[v439] & 8) == 0) {
                    break;
                  }
                  char v440 = ((((char)(2 * v439) >> 7) & 0xF9) + v439) & 0xF | (16 * v438);
                  if ((v437 & 1) != 0) {
                    *((_BYTE *)v961 + (v437 >> 1)) = v440;
                  }
                  ++v437;
                  char v438 = v440;
                }

                while (v437 != 80);
                int v487 = v437 >> 1;
                v488 = (char *)v961;
              }

              else
              {
                else {
                  int v487 = strlen(__s) & 0x3FFFFFFF;
                }
                v488 = __s;
              }

              else {
                int v508 = sqlite3_key_v2((uint64_t)v950, zDbName, v488, v487);
              }
              if (!v508 && v487)
              {
                sub_18128F970(v957, 1);
                if (!*(_BYTE *)(*(void *)v957 + 103LL)) {
                  sub_181269368(*(void *)(v957 + 152), "ok", -1LL, 1u, 0LL);
                }
                sub_181345374((uint64_t *)v957, (uint64_t)"ok", v509, v510, v511, v512, v513, v514);
              }

              goto LABEL_635;
            default:
              if (__s)
              {
                LODWORD(v961[0]) = 0;
                sub_18130DE18((unsigned __int8 *)__s, v961);
                sqlite3_busy_timeout(v950, (int)v961[0]);
              }

              uint64_t v85 = *((int *)v950 + 193);
LABEL_477:
              sub_1813454D8(v957, v85);
              goto LABEL_1082;
          }
        }
      }

      else
      {
        int v72 = byte_1813C6343[v73] - byte_1813C6343[v74];
        if (v72) {
          goto LABEL_63;
        }
      }
    }
  }

  sub_18128F970(v957, 1);
  uint64_t v76 = v962[0];
  if (!*(_BYTE *)(*(void *)v957 + 103LL))
  {
    sub_181269368( *(void *)(v957 + 152),  (char *)v962[0],  -1LL,  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    uint64_t v76 = v962[0];
  }

  if (v76)
  {
    sub_1812B9B68((uint64_t *)v957, 117LL, 0LL, 1LL, 0LL, (uint64_t)v76, 0LL, v75);
    int v80 = *(_DWORD *)(v957 + 144);
    if (*(_DWORD *)(v957 + 148) <= v80)
    {
      sub_18131044C(v957, 84LL, 1LL, 1LL, 0LL, v77, v78, v79);
    }

    else
    {
      *(_DWORD *)(v957 + 144) = v80 + 1;
      uint64_t v81 = *(void *)(v957 + 136) + 40LL * v80;
      *(_DWORD *)uint64_t v81 = 84;
      *(void *)(v81 + 4) = 0x100000001LL;
      *(void *)(v81 + 12) = 0LL;
      *(void *)(v81 + 28) = 0LL;
      *(void *)(v81 + 20) = 0LL;
      *(_DWORD *)(v81 + 36) = 0;
    }
  }

  uint64_t v86 = v962[0];
  if (v962[0])
  {
    uint64_t v87 = (void (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v86);
      --qword_18C468B10;
      off_18C4653A8(v86);
      uint64_t v86 = (void *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_1082;
      }
      uint64_t v87 = (void (**)(void *))&xmmword_18C465410;
    }

    (*v87)(v86);
  }

LABEL_1082:
  uint64_t v84 = (uint64_t)v950;
  sub_1812F20DC(v950, v946);
  v498 = __s;
  if (__s) {
    goto LABEL_1083;
  }
}

_BYTE *sub_181276C14(uint64_t a1, const void *a2, size_t a3)
{
  if (!a2) {
    return 0LL;
  }
  int v5 = (_BYTE *)sub_1812F2264(a1, a3 + 1);
  uint64_t v6 = v5;
  if (v5)
  {
    memcpy(v5, a2, a3);
    v6[a3] = 0;
  }

  return v6;
}

uint64_t sub_181276C70( uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 44);
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 24LL);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(v11 + 113);
  if ((*(_BYTE *)(v11 + 114) & 1) != 0 || (uint64_t result = sub_181276D34(a1, 0LL, a2, 0LL, a5, a6, a7, a8), !(_DWORD)result))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 40);
    if ((int)v13 >= 2)
    {
      while (1)
      {
        uint64_t v14 = v13 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(a1 + 32) + 32LL * (v13 - 1) + 24) + 114LL) & 1) == 0)
        {
          uint64_t result = sub_181276D34(a1, (v13 - 1), a2, 0LL, a5, a6, a7, a8);
          if ((_DWORD)result) {
            break;
          }
        }

        uint64_t v13 = v14;
      }
    }

    else
    {
LABEL_4:
      uint64_t result = 0LL;
      if ((v10 & 1) == 0) {
        *(_DWORD *)(a1 + 44) &= ~1u;
      }
    }
  }

  return result;
}

uint64_t sub_181276D34( uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  v102[6] = *MEMORY[0x1895F89C0];
  int v11 = *(_DWORD *)(a1 + 44);
  *(_BYTE *)(a1 + 197) = 1;
  if ((_DWORD)a2 == 1) {
    __int16 v12 = "sqlite_temp_master";
  }
  else {
    __int16 v12 = "sqlite_master";
  }
  v102[0] = "table";
  v102[1] = v12;
  v102[2] = v12;
  v102[3] = "1";
  v102[4] = "CREATE TABLE x(type text,name text,tbl_name text,rootpage int,sql text)";
  v102[5] = 0LL;
  unsigned int v13 = v11 | 0xFFFFFFBF;
  int v97 = a2;
  unsigned int v98 = 0;
  v96[0] = a1;
  v96[1] = a3;
  int v100 = 0;
  int v101 = 0;
  int v99 = a4;
  sub_1812775D4((int *)v96, a2, v102, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 44) &= v13;
  uint64_t v21 = v98;
  if (!v98)
  {
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v29 = v9;
    uint64_t v30 = v28 + 32LL * v9;
    uint64_t v32 = *(void *)(v30 + 8);
    uint64_t v31 = (uint64_t *)(v30 + 8);
    uint64_t v21 = v32;
    if (!v32)
    {
      *(_WORD *)(*(void *)(v28 + 56) + 114LL) |= 1u;
      goto LABEL_28;
    }

    if (!*(_BYTE *)(v21 + 17)
      || (++*(_DWORD *)(v21 + 20), *(_BYTE *)(v21 + 18))
      || (sub_1812FDE20(v21), (uint64_t v21 = *v31) != 0))
    {
      if (*(_BYTE *)(v21 + 16))
      {
        char v33 = 1;
        goto LABEL_24;
      }
    }

    if (!*(_BYTE *)(v21 + 17) && *(_BYTE *)(v21 + 16))
    {
      char v33 = 0;
      goto LABEL_24;
    }

    uint64_t v37 = sub_1812FDF34(v21, 0, 0LL);
    uint64_t v21 = v37;
    if ((int)v37 > 100)
    {
      if ((_DWORD)v37 == 101)
      {
        int v38 = "no more rows available";
        goto LABEL_141;
      }

      if ((_DWORD)v37 == 516)
      {
        int v38 = "abort due to ROLLBACK";
        goto LABEL_141;
      }
    }

    else
    {
      if (!(_DWORD)v37)
      {
        char v33 = 0;
        uint64_t v21 = *v31;
LABEL_24:
        uint64_t v34 = *(void *)(v21 + 8);
        int v35 = *(unsigned __int8 *)(v21 + 17);
        if (*(_BYTE *)(v21 + 17))
        {
          ++*(_DWORD *)(v21 + 20);
          if (*(_BYTE *)(v21 + 18))
          {
            int v35 = 1;
          }

          else
          {
            sub_1812FDE20(v21);
            int v35 = *(unsigned __int8 *)(v21 + 17);
          }
        }

        unsigned int v93 = *(_DWORD *)(*(void *)(*(void *)(v34 + 24) + 80LL) + 40LL);
        if (v35)
        {
          int v41 = *(_DWORD *)(v21 + 20) - 1;
          *(_DWORD *)(v21 + 20) = v41;
          if (!v41) {
            sub_1812FDEFC(v21);
          }
        }

        uint64_t v42 = *v31;
        uint64_t v43 = *(void *)(*v31 + 8);
        int v44 = *(unsigned __int8 *)(*v31 + 17);
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v42 + 20);
          if (*(_BYTE *)(v42 + 18))
          {
            int v44 = 1;
          }

          else
          {
            sub_1812FDE20(v42);
            int v44 = *(unsigned __int8 *)(v42 + 17);
          }
        }

        unsigned int v92 = *(_DWORD *)(*(void *)(*(void *)(v43 + 24) + 80LL) + 44LL);
        if (v44)
        {
          int v45 = *(_DWORD *)(v42 + 20) - 1;
          *(_DWORD *)(v42 + 20) = v45;
          if (!v45) {
            sub_1812FDEFC(v42);
          }
        }

        uint64_t v46 = *v31;
        uint64_t v47 = *(void *)(*v31 + 8);
        int v48 = *(unsigned __int8 *)(*v31 + 17);
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v46 + 20);
          if (*(_BYTE *)(v46 + 18))
          {
            int v48 = 1;
          }

          else
          {
            sub_1812FDE20(v46);
            int v48 = *(unsigned __int8 *)(v46 + 17);
          }
        }

        unsigned int v91 = *(_DWORD *)(*(void *)(*(void *)(v47 + 24) + 80LL) + 48LL);
        if (v48)
        {
          int v49 = *(_DWORD *)(v46 + 20) - 1;
          *(_DWORD *)(v46 + 20) = v49;
          if (!v49) {
            sub_1812FDEFC(v46);
          }
        }

        uint64_t v50 = *v31;
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v50 + 20);
          if (*(_BYTE *)(v50 + 18) || (sub_1812FDE20(v50), *(_BYTE *)(v50 + 17)))
          {
            int v51 = *(_DWORD *)(v50 + 20) - 1;
            *(_DWORD *)(v50 + 20) = v51;
            if (!v51) {
              sub_1812FDEFC(v50);
            }
          }
        }

        uint64_t v52 = *v31;
        uint64_t v53 = *(void *)(*v31 + 8);
        int v54 = *(unsigned __int8 *)(*v31 + 17);
        uint64_t v90 = a3;
        char v95 = v33;
        uint64_t v94 = v31;
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v52 + 20);
          if (*(_BYTE *)(v52 + 18))
          {
            int v54 = 1;
          }

          else
          {
            sub_1812FDE20(v52);
            int v54 = *(unsigned __int8 *)(v52 + 17);
          }
        }

        uint64_t v55 = *(unsigned __int8 **)(*(void *)(v53 + 24) + 80LL);
        int v56 = v55[56];
        int v57 = v55[57];
        int v58 = v55[58];
        int v59 = v55[59];
        if (v54)
        {
          int v60 = *(_DWORD *)(v52 + 20) - 1;
          *(_DWORD *)(v52 + 20) = v60;
          if (!v60) {
            sub_1812FDEFC(v52);
          }
        }

        uint64_t v61 = v28 + 32LL * v9;
        uint64_t v64 = *(void *)(v61 + 24);
        int v63 = (uint64_t *)(v61 + 24);
        uint64_t v62 = v64;
        if ((*(_BYTE *)(a1 + 51) & 2) != 0)
        {
          int v66 = 0;
          int v67 = 0;
          *(_DWORD *)uint64_t v62 = 0;
        }

        else
        {
          int v65 = (v56 << 24) | (v57 << 16);
          int v66 = bswap32(v92);
          int v67 = bswap32(v91);
          *(_DWORD *)uint64_t v62 = bswap32(v93);
          if (v65 | (v58 << 8) | v59)
          {
            char v68 = v95;
            if (v9 || (int v69 = *(_DWORD *)(a1 + 44), (v69 & 0x40) != 0))
            {
              int v79 = v59 & 3;
              uint64_t v29 = v9;
              if (v79 != *(unsigned __int8 *)(a1 + 100))
              {
                int v80 = (char *)sub_1812F2264(a1, 0x44uLL);
                uint64_t v75 = v80;
                if (v80)
                {
                  strcpy(v80, "attached databases must use the same text encoding as main database");
                  double v20 = *(double *)"same text encoding as main database";
                }

LABEL_113:
                if (*v90) {
                  sub_1812F20DC((void *)a1, *v90);
                }
                *uint64_t v90 = v75;
                uint64_t v21 = 1LL;
                if ((v68 & 1) != 0) {
                  goto LABEL_146;
                }
                goto LABEL_123;
              }
            }

            else
            {
              unsigned __int8 v70 = v59 & 3;
              if ((v59 & 3) == 0) {
                unsigned __int8 v70 = 1;
              }
              if (*(int *)(a1 + 208) >= 1 && (v69 & 4) == 0 && *(unsigned __int8 *)(a1 + 100) != v70)
              {
                uint64_t v21 = 6LL;
                uint64_t v29 = v9;
                if ((v95 & 1) != 0) {
                  goto LABEL_146;
                }
                goto LABEL_123;
              }

              sub_18130D2FC(a1, v70);
              uint64_t v62 = *v63;
              uint64_t v29 = v9;
            }

  uint64_t result = 0LL;
  *uint64_t v6 = 0;
  *a1 = v6 + 1;
  *a2 = v7 + 1;
  *a3 = v8 + 1;
  return result;
}

LABEL_83:
            uint64_t v71 = (int *)(v62 + 116);
            int v72 = *(_DWORD *)(v62 + 116);
            *(_BYTE *)(v62 + 113) = *(_BYTE *)(a1 + 100);
            if (!v72)
            {
              if (v67 == 0x80000000) {
                int v73 = 0x7FFFFFFF;
              }
              else {
                int v73 = -v67;
              }
              if (v67 >= 0) {
                int v73 = v67;
              }
              if (!v73) {
                int v73 = 128;
              }
              *uint64_t v71 = v73;
              sub_1812FA554(*v94, v71);
              uint64_t v62 = *v63;
            }

            *(_BYTE *)(v62 + 112) = v66;
            if ((_BYTE)v66)
            {
              if (v66 >= 5u)
              {
                uint64_t v74 = (char *)sub_1812F2264(a1, 0x18uLL);
                uint64_t v75 = v74;
                if (v74)
                {
                  double v20 = *(double *)"unsupported file format";
                  strcpy(v74, "unsupported file format");
                }

                goto LABEL_113;
              }
            }

            else
            {
              *(_BYTE *)(v62 + 112) = 1;
            }

            if (!v9 && v66 >= 4) {
              *(void *)(a1 + 48) &= ~2uLL;
            }
            int v101 = *(_DWORD *)(*(void *)(*v94 + 8) + 64LL);
            uint64_t v76 = (char *)sub_18127F588( a1,  "SELECT*FROM%w.%s ORDER BY rowid",  v14,  v15,  v16,  v17,  v18,  v19,  *(void *)(*(void *)(a1 + 32) + 32 * v29));
            uint64_t v77 = *(void *)(a1 + 528);
            *(void *)(a1 + 528) = 0LL;
            unsigned int v78 = sqlite3_exec( (sqlite3 *)a1,  v76,  (int (__cdecl *)(void *, int, char **, char **))sub_1812775D4,  v96,  0LL);
            *(void *)(a1 + 528) = v77;
            if (v78) {
              uint64_t v21 = v78;
            }
            else {
              uint64_t v21 = v98;
            }
            if (v76) {
              sub_1812F20DC((void *)a1, v76);
            }
            if ((_DWORD)v21)
            {
              if (!*(_BYTE *)(a1 + 103))
              {
                if ((*(_BYTE *)(a1 + 51) & 8) == 0 || (_DWORD)v21 == 7)
                {
LABEL_122:
                  if ((v68 & 1) != 0)
                  {
LABEL_146:
                    uint64_t v87 = *(void *)(v28 + 32 * v29 + 8);
                    if (*(_BYTE *)(v87 + 17))
                    {
                      int v88 = *(_DWORD *)(v87 + 20) - 1;
                      *(_DWORD *)(v87 + 20) = v88;
                      if (!v88) {
                        sub_1812FDEFC(v87);
                      }
                    }

                    goto LABEL_5;
                  }

        if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          if (os_signpost_enabled(v5))
          {
            uint64_t v39 = *(void *)(a2 + 192);
            *(_DWORD *)buf = 134218498;
            *(void *)uint64_t v61 = v39;
            *(_WORD *)&v61[8] = 2050;
            *(void *)&v61[10] = a1;
            *(_WORD *)&v61[18] = 2082;
            *(void *)&v61[20] = v37;
            _os_signpost_emit_with_name_impl( &dword_181266000,  v5,  OS_SIGNPOST_INTERVAL_BEGIN,  v36,  "execute",  "startTime=%{signpost.description:begin_time}llu db=%{public}p query=%{public,signpost.telemetry:string1,name=query}s",  buf,  0x20u);
          }

          if (os_signpost_enabled(v5))
          {
            int v40 = "NO";
            if (v30) {
              int v40 = "YES";
            }
            int v41 = *(_DWORD *)(a2 + 52);
            uint64_t v42 = *(const char **)(a2 + 168);
            if (!v42)
            {
              switch(v41)
              {
                case 516:
                  uint64_t v42 = "abort due to ROLLBACK";
                  break;
                case 101:
                  uint64_t v42 = "no more rows available";
                  break;
                case 100:
                  uint64_t v42 = "another row available";
                  break;
                default:
                  else {
                    uint64_t v42 = off_189B6EC30[*(_DWORD *)(a2 + 52)];
                  }
                  break;
              }
            }

            *(_DWORD *)buf = 136318210;
            *(void *)uint64_t v61 = v40;
            *(_WORD *)&v61[8] = 1026;
            *(_DWORD *)&v61[10] = v41;
            *(_WORD *)&v61[14] = 1026;
            *(_DWORD *)&v61[16] = v53;
            *(_WORD *)&v61[20] = 1026;
            *(_DWORD *)&v61[22] = v58;
            *(_WORD *)&v61[26] = 1026;
            uint64_t v62 = v55;
            int v63 = 1026;
            uint64_t v64 = v54;
            int v65 = 1026;
            int v66 = v57;
            int v67 = 1026;
            char v68 = v10;
            int v69 = 2082;
            unsigned __int8 v70 = v42;
            uint64_t v71 = 1026;
            int v72 = v59;
            int v73 = 1026;
            uint64_t v74 = v52;
            uint64_t v75 = 1026;
            uint64_t v76 = v51;
            uint64_t v77 = 1026;
            unsigned int v78 = v50;
            _os_signpost_emit_with_name_impl( &dword_181266000,  v5,  OS_SIGNPOST_INTERVAL_END,  v36,  "execute",  "enableTelemetry=%s rc=%{public,signpost.telemetry:number1,name=rc}d runCount=%{public}d nScan=%{public}d n Autoindex=%{public}d nSort=%{public}d nSpill=%{public}d nStep=%{public}d errMsg=%{public}s nVmStep=%{publi c,signpost.telemetry:number2,name=nVmStep}d hits=%{public}d misses=%{public}d writes=%{public}d",  buf,  0x58u);
          }
        }

        *(void *)(a2 + 192) = 0LL;
        if (!v28) {
          goto LABEL_77;
        }
LABEL_76:
        free(v28);
        goto LABEL_77;
      }

      ++v56;
    }

    if (*v56) {
      goto LABEL_83;
    }
    if (!v55) {
      goto LABEL_74;
    }
    qword_18C466050[9 * mm + 2] = v55[2];
    uint64_t v53 = v55 + 2;
LABEL_75:
    char *v53 = v50;
  }

  if (!a1) {
    goto LABEL_98;
  }
  int v35 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_98;
  }
LABEL_96:
  uint64_t v39 = *(sqlite3 **)(v35 + 24);
LABEL_99:
  *(_DWORD *)int v41 = 0;
  sqlite3_db_config(v39, 1004, 0xFFFFFFFFLL, v41, *(void *)v40);
  if (*(_DWORD *)v41) {
    goto LABEL_100;
  }
  if (!*a3)
  {
    int v38 = 97266;
    goto LABEL_93;
  }

  if ((*((_WORD *)*a3 + 10) & 0x40) != 0)
  {
LABEL_100:
    if (!a1)
    {
      int v38 = 97366;
      goto LABEL_93;
    }

    sub_1812D7A8C(a1, v40, 8, 0, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

        int v56 = &v133[v47];
        int v57 = (v136 - v47);
        int v58 = *v129;
        int v59 = **v129;
        uint64_t v138 = v47;
        if ((int)v57 < 1)
        {
          int v60 = 0LL;
        }

        else
        {
          int v60 = 0LL;
          while (1)
          {
            uint64_t v61 = v56[v60];
            uint64_t v62 = v61 > 0x29;
            int v63 = (1LL << v61) & 0x30400000000LL;
            if (!v62 && v63 != 0) {
              break;
            }
            if (v57 == ++v60)
            {
              int v60 = (v136 - v47);
              break;
            }
          }
        }

        int v65 = *((unsigned int *)v129 + 2);
        uint64_t v143 = 0LL;
        int v5 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t ***))(v59 + 24))( v58,  &v133[v47],  v60,  &v143);
        if (v5)
        {
LABEL_94:
          __int16 v12 = 0LL;
LABEL_145:
          uint64_t v139 = v12;
          uint64_t v137 = v60 + v138;
          goto LABEL_146;
        }

        *uint64_t v143 = v58;
        int v66 = v143;
        if (*(int *)v59 >= 1)
        {
          int v67 = (*(uint64_t (**)(uint64_t **, uint64_t))(v59 + 48))(v143, v65);
          int v66 = v143;
          if (v67)
          {
            int v5 = v67;
            (*(void (**)(uint64_t **))(v59 + 32))(v143);
            goto LABEL_94;
          }
        }

        uint64_t v142 = 0LL;
        uint64_t v141 = 0;
        uint64_t v140 = 0;
        char v68 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v59 + 40))( v66,  &v143,  (char *)&v142 + 4,  &v142,  &v141,  &v140);
        if (v68)
        {
          __int16 v12 = 0LL;
          if (v68 != 101 || (_DWORD)v60 == 0) {
            int v5 = v68;
          }
          else {
            int v5 = 0;
          }
          unsigned __int8 v70 = v59;
          goto LABEL_144;
        }

        uint64_t v86 = SHIDWORD(v142);
        if (sqlite3_initialize())
        {
          __int16 v12 = 0LL;
          goto LABEL_142;
        }

        uint64_t v112 = v86 + 192;
        uint64_t v113 = (void *)sub_18126F0AC(v86 + 192);
        __int16 v12 = (uint64_t)v113;
        if (v113)
        {
          bzero(v113, v112);
          *(_DWORD *)__int16 v12 = 5;
          *(void *)(v12 + 32) = v12 + 64;
          *(_DWORD *)(v12 + 144) = 1;
          *(_DWORD *)(v12 + 148) = v125;
          uint64_t v114 = SHIDWORD(v142);
          *(_DWORD *)(v12 + 160) = HIDWORD(v142);
          *(void *)(v12 + 152) = v12 + 192;
          memcpy((void *)(v12 + 192), v143, v114);
          uint64_t v115 = v141;
          if (v141 < (int)v57 && v56[v141] == 42)
          {
            *(_DWORD *)(v12 + 164) = 1;
            uint64_t v141 = v115 + 1;
          }

          int v5 = 0;
          unsigned __int8 v70 = v59;
          if (*((_DWORD *)v129 + 6))
          {
            uint64_t v116 = v142;
            if ((int)v142 >= 1)
            {
              do
              {
                int v117 = v116 - 1;
                *(_DWORD *)(v12 + 168) = 1;
                LODWORD(v142) = --v116;
              }

              while ((unint64_t)(v117 + 1) > 1);
              int v5 = 0;
            }
          }
        }

        else
        {
LABEL_142:
          int v5 = 7;
          unsigned __int8 v70 = v59;
        }

        LODWORD(v60) = v141;
LABEL_144:
        (*(void (**)(uint64_t **))(v70 + 32))(v66);
        goto LABEL_145;
      }

      --*((_DWORD *)v129 + 12);
      uint64_t v137 = v127 + 1;
LABEL_228:
      int v5 = 101;
LABEL_229:
      a3 = v136 - v137;
LABEL_230:
      int v96 = v134;
      if (v135) {
        int v119 = v134 == 0;
      }
      else {
        int v119 = 1;
      }
      if (!v119 && v5 == 101) {
        uint64_t v121 = 1LL;
      }
      else {
        uint64_t v121 = v5;
      }
      *a5 = v130 - a3;
      if ((_DWORD)v121 != 101) {
        goto LABEL_246;
      }
      uint64_t v121 = 0LL;
      goto LABEL_247;
    }

    uint64_t v27 = v129;
    if (v8 >= 2)
    {
      for (int j = 1LL; j != v8; ++j)
      {
        if (v9[j] == 34) {
          goto LABEL_51;
        }
      }

      uint64_t v137 = v127 + v8 + 1;
      int v5 = 1;
      goto LABEL_229;
    }

    LODWORD(j) = 1;
LABEL_51:
    uint64_t v137 = v127 + j + 1;
    if ((_DWORD)j == v8)
    {
      int v5 = 1;
      goto LABEL_229;
    }

    uint64_t v30 = v9 + 1;
    uint64_t v31 = (j - 1);
    uint64_t v32 = *v129;
    char v33 = **v129;
    uint64_t v34 = *((unsigned int *)v129 + 2);
    uint64_t v143 = 0LL;
    int v35 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t ***))(v33 + 24))( v32,  v30,  v31,  &v143);
    uint64_t v36 = v143;
    if (v35)
    {
      int v5 = v35;
      goto LABEL_54;
    }

    *uint64_t v143 = v32;
    int v45 = v143;
    if (*(int *)v33 >= 1)
    {
      uint64_t v55 = (*(uint64_t (**)(uint64_t **, uint64_t))(v33 + 48))(v143, v34);
      int v45 = v143;
      if (v55)
      {
        int v5 = v55;
        (*(void (**)(uint64_t **))(v33 + 32))(v143);
        uint64_t v36 = 0LL;
LABEL_54:
        uint64_t v37 = 0LL;
        int v38 = 0LL;
        uint64_t v39 = 0;
        int v40 = 0;
        if (v5 == 101) {
          goto LABEL_55;
        }
        goto LABEL_109;
      }
    }

    uint64_t v142 = 0LL;
    uint64_t v141 = 0;
    uint64_t v140 = 0;
    uint64_t v71 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v33 + 40))( v45,  &v143,  (char *)&v142 + 4,  &v142,  &v141,  &v140);
    if (v71)
    {
      int v5 = v71;
      int v40 = 0;
      uint64_t v39 = 0;
      int v72 = 0LL;
      uint64_t v128 = 0LL;
LABEL_108:
      (*(void (**)(uint64_t **))(v33 + 32))(v45);
      uint64_t v36 = 0LL;
      int v38 = v72;
      uint64_t v37 = v128;
      if (v5 == 101)
      {
LABEL_55:
        int v41 = v27;
        uint64_t v42 = v36;
        uint64_t v126 = v33;
        if (!sqlite3_initialize())
        {
          int v73 = sub_18127D33C(v37, v39 + 40LL * v40 + 192);
          if (v73)
          {
            __int16 v12 = v73;
            uint64_t v74 = v39;
            *(void *)(v73 + 144) = 0LL;
            *(_OWORD *)(v73 + 112) = 0u;
            *(_OWORD *)(v73 + 128) = 0u;
            *(_OWORD *)(v73 + 80) = 0u;
            *(_OWORD *)(v73 + 96) = 0u;
            *(_OWORD *)(v73 + 32) = 0u;
            *(_OWORD *)(v73 + 48) = 0u;
            *(_OWORD *)int v73 = 0u;
            *(_OWORD *)(v73 + 16) = 0u;
            *(_OWORD *)(v73 + 64) = 0u;
            *(_DWORD *)int v73 = 5;
            *(void *)(v73 + 32) = v73 + 64;
            uint64_t v75 = *((_DWORD *)v41 + 8);
            *(_DWORD *)(v73 + 144) = v40;
            *(_DWORD *)(v73 + 148) = v75;
            uint64_t v76 = v73 + 64 + 40LL * v40;
            uint64_t v77 = v76 + 88;
            if (v38)
            {
              memcpy((void *)(v76 + 88), v38, v74);
              unsigned int v78 = (void (**)(const void *))&off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v38);
                --qword_18C468B10;
                off_18C4653A8(v38);
                int v38 = (const void *)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_118;
                }
                unsigned int v78 = (void (**)(const void *))&xmmword_18C465410;
              }

              (*v78)(v38);
            }

        int v56 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
          --qword_18C468B10;
          uint64_t result = off_18C4653A8(v6);
          uint64_t v6 = (uint64_t *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_89;
          }
          int v56 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
        }

        uint64_t result = (*v56)(v6);
LABEL_89:
        *(void *)(a2 + 16) = 0LL;
        return result;
      }

      goto LABEL_47;
    }

    if ((*(_BYTE *)(a2 + 8) & 1) != 0) {
      goto LABEL_83;
    }
    uint64_t v29 = *(void *)(result + 24);
    uint64_t v30 = *(void *)(*(void *)(v29 + 24) + 8LL);
    *(void *)(v29 + 24) = v30;
    if (!v30) {
      goto LABEL_83;
    }
    uint64_t v31 = (const void *)(v30 + 48);
    uint64_t v32 = strlen((const char *)(v30 + 48));
    sub_1813963FC((_DWORD *)v29, v30, 0LL);
    char v33 = (char *)(v30 + 48 + v32 + 1);
    uint64_t v34 = *(void *)(a2 + 16);
    int v35 = *(_DWORD *)(v30 + 24) - v32;
    *(void *)uint64_t v34 = v33;
    *(_DWORD *)(v34 + 8) = v35 - 49;
    *(_DWORD *)(v34 + 12) = v35 - 49;
    *(_DWORD *)(a2 + 76) = v35 - 48;
    uint64_t v36 = strlen((const char *)(v30 + 48));
    uint64_t v37 = v36;
    *(_DWORD *)(a2 + 112) = 0;
    if (v36)
    {
      LODWORD(v38) = *(_DWORD *)(a2 + 116);
      if (v38 >= v36)
      {
        uint64_t v52 = 0LL;
        uint64_t v53 = *(void *)(a2 + 104);
        uint64_t v39 = v37;
      }

      else
      {
        if (!(_DWORD)v38) {
          LODWORD(v38) = 64;
        }
        int v38 = (int)v38;
        uint64_t v39 = v36;
        do
        {
          int v40 = v38;
          v38 *= 2LL;
        }

        while (v40 < v36);
        int v41 = *(void *)(a2 + 104);
        if (sqlite3_initialize() || (uint64_t v53 = sub_18127D33C(v41, v40)) == 0)
        {
          *(_DWORD *)(v5 + 60) = 7;
          goto LABEL_74;
        }

        *(_DWORD *)(a2 + 116) = v40;
        *(void *)(a2 + 104) = v53;
        uint64_t v52 = *(int *)(a2 + 112);
      }

      memcpy((void *)(v53 + v52), v31, v39);
      *(_DWORD *)(a2 + 112) += v37;
    }

    sub_1813B12C4(a1);
    goto LABEL_84;
  }

  int v45 = (uint64_t *)(*(void *)(a1 + 48) + 8LL);
  while (1)
  {
    uint64_t v46 = *v45;
    v45 += 3;
    if (v46 == v43) {
      return 267LL;
    }
    if (!--v44) {
      goto LABEL_82;
    }
  }

LABEL_133:
                uint64_t v21 = 0LL;
                uint64_t v83 = *(void *)(*(void *)(a1 + 32) + 32 * v29 + 24);
                *(_WORD *)(v83 + 114) |= 1u;
                if ((v68 & 1) != 0) {
                  goto LABEL_146;
                }
                goto LABEL_123;
              }
            }

            else
            {
              sub_1812A1C70(a1, v9);
              if (!*(_BYTE *)(a1 + 103)) {
                goto LABEL_133;
              }
            }

            sub_1812D6078(a1);
            uint64_t v28 = *(void *)(a1 + 32);
            uint64_t v21 = 7LL;
            goto LABEL_122;
          }
        }

        uint64_t v29 = v9;
        char v68 = v95;
        goto LABEL_83;
      }

      if ((_DWORD)v37 == 100)
      {
        int v38 = "another row available";
LABEL_141:
        unint64_t v84 = strlen(v38) + 1;
        uint64_t v85 = (char *)sub_1812F2264(a1, v84);
        uint64_t v86 = v85;
        if (v85) {
          memcpy(v85, v38, v84);
        }
        if (*a3) {
          sub_1812F20DC((void *)a1, *a3);
        }
        *a3 = v86;
        goto LABEL_146;
      }
    }

    else {
      int v38 = off_189B6EC30[v37];
    }
    goto LABEL_141;
  }

    ++v104;
    v105 += 26;
    v106 += 26;
    if (v104 < *v103 - 1LL) {
      continue;
    }
    break;
  }

    int v72 = byte_1813C62B2[6 * v70 + 3];
    switch(byte_1813C62B2[6 * v70 + 3])
    {
      case 0u:
      case 0xFu:
        goto LABEL_190;
      case 1u:
      case 2u:
      case 3u:
        uint64_t v379 = v21;
        uint64_t v370 = *(double *)&v7;
        if ((v383 & 2) != 0)
        {
          uint64_t v81 = *(int *)(v5 + 4);
          uint64_t v74 = 0.0;
          if (*(_DWORD *)v5 > (int)v81)
          {
            int v82 = *(void *)(v5 + 8);
            *(_DWORD *)(v5 + 4) = v81 + 1;
            uint64_t v83 = *(void *)(v82 + 8 * v81);
            if (v83)
            {
              unint64_t v84 = *(_WORD *)(v83 + 20);
              if ((v84 & 8) != 0)
              {
                uint64_t v74 = *(double *)v83;
              }

              else if ((v84 & 0x24) != 0)
              {
                uint64_t v74 = (double)*(uint64_t *)v83;
              }

              else if ((v84 & 0x12) != 0)
              {
                uint64_t v361 = v20;
                int v374 = v18;
                uint64_t v273 = v19;
                uint64_t v365 = v4;
                uint64_t v368 = v72;
                uint64_t v274 = v24;
                uint64_t v275 = sub_181303DB8(v83);
                LODWORD(v24) = v274;
                int v4 = v365;
                int v72 = v368;
                LODWORD(v19) = v273;
                LODWORD(v18) = v374;
                LOBYTE(v20) = v361;
                v10.i64[0] = 0x8080808080808080LL;
                v10.i64[1] = 0x8080808080808080LL;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
                uint64_t v74 = v275;
              }
            }

            else
            {
              uint64_t v360 = v20;
              int v373 = v18;
              uint64_t v192 = v19;
              uint64_t v364 = v4;
              uint64_t v367 = v72;
              uint64_t v193 = v24;
              sub_1812CF36C(89752);
              LODWORD(v24) = v193;
              int v4 = v364;
              int v72 = v367;
              LODWORD(v19) = v192;
              LODWORD(v18) = v373;
              LOBYTE(v20) = v360;
              v10.i64[0] = 0x8080808080808080LL;
              v10.i64[1] = 0x8080808080808080LL;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
            }
          }
        }

        else
        {
          int v73 = (double *)v387;
          v387 += 8;
          uint64_t v74 = *v73;
        }

        else {
          uint64_t v85 = v24;
        }
        if (v72 == 3)
        {
          uint64_t v86 = v85;
        }

        else if (v72 == 1)
        {
          uint64_t v86 = -v85;
        }

        else
        {
          uint64_t v86 = v85 + 1;
        }

        if ((_BYTE)v20) {
          uint64_t v115 = 26;
        }
        else {
          uint64_t v115 = 16;
        }
        uint64_t v403 = 0;
        v405 = v406;
        if (v74 >= 0.0)
        {
          v402 = 43;
          if (v74 == 0.0)
          {
            v404 = (int32x2_t)0x100000001LL;
            uint64_t v116 = "0";
            v405 = "0";
            *(double *)&uint64_t v7 = v370;
            goto LABEL_520;
          }
        }

        else
        {
          v402 = 45;
          uint64_t v74 = -v74;
        }

        if ((~*(void *)&v74 & 0x7FF0000000000000LL) == 0)
        {
          if (v74 == INFINITY) {
            int v117 = 1;
          }
          else {
            int v117 = 2;
          }
          uint64_t v403 = v117;
          v404 = 0LL;
          uint64_t v116 = v406;
          *(double *)&uint64_t v7 = v370;
          uint64_t v118 = v21;
LABEL_522:
          if (v117 == 2)
          {
            int v80 = 0LL;
            if ((_DWORD)v19) {
              uint64_t v6 = "null";
            }
            else {
              uint64_t v6 = "NaN";
            }
            if ((_DWORD)v19) {
              LODWORD(v90) = 4;
            }
            else {
              LODWORD(v90) = 3;
            }
            goto LABEL_702;
          }

          if (!v117)
          {
            uint64_t v278 = v404.i32[1];
            goto LABEL_533;
          }

          if ((_DWORD)v19)
          {
            *uint64_t v116 = 57;
            v404 = (int32x2_t)0x3E800000001LL;
            uint64_t v278 = 1000;
LABEL_533:
            if (v402 == 45) {
              uint64_t v279 = 45;
            }
            else {
              uint64_t v279 = v384;
            }
            uint64_t v280 = v278 - 1;
            uint64_t v281 = v70 == 2;
            if (v70 == 15) {
              uint64_t v281 = 1;
            }
            if (v85 <= 0) {
              uint64_t v281 = 0;
            }
            uint64_t v282 = v85 - v281;
            if (v70 == 15 || (uint64_t v283 = v20, v70 == 2))
            {
              uint64_t v283 = v118 == 0;
              uint64_t v285 = v278 < -3 || v280 > v282;
              if (v285) {
                LOBYTE(v72) = 2;
              }
              else {
                LOBYTE(v72) = 1;
              }
              if (v285) {
                uint64_t v286 = 0;
              }
              else {
                uint64_t v286 = v278 - 1;
              }
              v282 -= v286;
            }

            uint64_t v366 = v70;
            uint64_t v369 = v72;
            else {
              uint64_t v287 = v278 - 1;
            }
            uint64_t v288 = (int)v23;
            uint64_t v289 = (int)v23
                 + (uint64_t)v282
                 + (v287 & ~(v287 >> 31))
                 + 15
                 + (v287 + 2) / 3uLL;
            if (v287 < 1) {
              uint64_t v289 = (int)v23 + (uint64_t)v282 + (v287 & ~(v287 >> 31)) + 15;
            }
            if ((_DWORD)v18) {
              uint64_t v290 = v289;
            }
            else {
              uint64_t v290 = (int)v23 + (uint64_t)v282 + (v287 & ~(v287 >> 31)) + 15;
            }
            uint64_t v386 = v279;
            v371 = v283;
            if (v290 < 513)
            {
              uint64_t v294 = 0LL;
              uint64_t v6 = (char *)__src;
            }

            else
            {
              if (*((_BYTE *)v4 + 28)) {
                return;
              }
              if (v290 > (unint64_t)*((unsigned int *)v4 + 4))
              {
                uint64_t v291 = *((unsigned int *)v4 + 5);
                if (v290 > v291)
                {
                  *((_BYTE *)v4 + 28) = 18;
                  if ((_DWORD)v291)
                  {
                    char v356 = *((_BYTE *)v4 + 29);
                    if ((v356 & 4) != 0)
                    {
                      char v357 = (void *)*((void *)v4 + 1);
                      if (v357)
                      {
                        sub_1812F20DC(*(void **)v4, v357);
                        char v356 = *((_BYTE *)v4 + 29);
                      }

                      *((_BYTE *)v4 + 29) = v356 & 0xFB;
                    }

  uint64_t v22 = 7;
  uint64_t v19 = 1LL;
LABEL_142:
  if (*(_BYTE *)(*(void *)(*a3 + 24) + v11))
  {
    if (v22)
    {
    }

    else if ((*(_BYTE *)(*(void *)(*a3 + 24) + v11) & 1) == 0)
    {
      return -(int)v19;
    }
  }

  return v19;
}

LABEL_5:
  if ((_DWORD)v21)
  {
    if (((_DWORD)v21 == 3082 || (_DWORD)v21 == 7) && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      uint64_t v39 = *(void *)(a1 + 344);
      if (v39)
      {
        sub_1812DC47C(v39, "out of memory", v14, v15, v16, v17, v18, v19, v89);
        for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }

    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(v22 + 32LL * v9 + 24);
      *(_WORD *)(v23 + 114) |= 8u;
      *(_WORD *)(*(void *)(v22 + 56) + 114LL) |= 8u;
      *(_DWORD *)(a1 + 44) &= ~0x10u;
    }

    if (!*(_DWORD *)(a1 + 72))
    {
      int v24 = *(_DWORD *)(a1 + 40);
      if (v24 >= 1)
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = 24LL;
        do
        {
          uint64_t v27 = *(void *)(*(void *)(a1 + 32) + v26);
          if ((*(_WORD *)(v27 + 114) & 8) != 0)
          {
            sub_1813070A0(v27);
            int v24 = *(_DWORD *)(a1 + 40);
          }

          ++v25;
          v26 += 32LL;
        }

        while (v25 < v24);
      }
    }
  }

        ++v1;
      }
    }

    uint64_t v6 = (uint64_t (**)(void))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_17;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400();
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    off_18C4653A8(v2);
    int v2 = (char **)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
LABEL_17:
      ((void (*)(char **))*v6)(v2);
    }
  }

  if (*(_BYTE *)(a1 + 16) == 2)
  {
    sub_1812B5930(*(void *)v7, a4);
    if (!(*(unsigned int (**)(void))(*(void *)v7 + 288LL))())
    {
      unsigned int v8 = *(void *)(v15 + 16);
      if (*(_DWORD *)(v8 + 4) == 1)
      {
        int v9 = *(void *)(v8 + 80);
      }

      else
      {
        int v9 = *(void *)(v15 + 8);
        *(void *)(v8 + 112) = v15;
        *(void *)(v8 + 72) = v7;
        *(void *)(v8 + 80) = v9;
        *(_DWORD *)(v8 + 4) = 1;
        *(_BYTE *)(v8 + 9) = 100;
      }

      __int16 v12 = bswap32(*(_DWORD *)(v9 + 28));
      if (!v12) {
        __int16 v12 = *(_DWORD *)(*(void *)v7 + 32LL);
      }
      *(_DWORD *)(v7 + 64) = v12;
      sub_1812F1ABC(*(void *)(v8 + 112));
    }

    *(_BYTE *)(v7 + 36) = 1;
    sub_1812C08E0(*(void *)(v7 + 96));
    *(void *)(v7 + 96) = 0LL;
  }

  uint64_t result = sub_1812A119C(a1);
  if (*(_BYTE *)(a1 + 17))
  {
    uint64_t v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14) {
      return sub_1812FDEFC(a1);
    }
  }

  return result;
}

  if (a2 && v9) {
    sqlite3_log(539, "recovered %d pages from %s", v9, *(const char **)(a1 + 224));
  }
  if (*v10 || ((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 96LL))(*(void *)(a1 + 72)) & 0x1000) != 0)
  {
    unsigned int v13 = 512;
  }

  else
  {
    int v11 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 88LL);
    if (v11)
    {
      __int16 v12 = v11();
      if (v12 >= 0x10000) {
        unsigned int v13 = 0x10000;
      }
      else {
        unsigned int v13 = v12;
      }
      if (v12 < 32) {
        unsigned int v13 = 512;
      }
    }

    else
    {
      unsigned int v13 = 4096;
    }
  }

  *(_DWORD *)(a1 + 184) = v13;
  return v8;
}

      v2 += v7;
      int v5 = *v2;
    }

    while (*v2);
  }

    ;
  }

  if (aSqliteStat1[i]) {
    goto LABEL_5;
  }
  uint64_t v30 = sqlite3_table_column_metadata(a2, a3, __s, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)v30 == 1)
  {
    uint64_t v31 = sqlite3_mprintf(&byte_1813CEAEE);
LABEL_36:
    uint64_t v22 = (unsigned __int8 *)v31;
    uint64_t v17 = 12;
    if (!v31) {
      goto LABEL_37;
    }
    goto LABEL_11;
  }

  uint64_t v23 = v30;
  if (!(_DWORD)v30)
  {
    uint64_t v31 = sqlite3_mprintf( "SELECT 0, 'tbl',  '', 0, '', 1     UNION ALL SELECT 1, 'idx',  '', 0, '', 2     UNION ALL SELECT 2, 'stat', '', 0, '', 0");
    goto LABEL_36;
  }

  *a7 = 0LL;
  *a8 = 0LL;
  *a5 = 0;
  if (a6) {
    goto LABEL_19;
  }
  return v23;
}

  unsigned int v8 = *(void *)(a1 + 24);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (*(_BYTE *)(a1 + 111))
  {
    if (a2) {
      goto LABEL_9;
    }
LABEL_22:
    LODWORD(v10) = 0;
LABEL_23:
    uint64_t v16 = sub_1812F0E00(a1, v10, a3, a4);
    if (!*(_BYTE *)(a1 + 111)) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }

  sub_1812FA020(a1);
  if (!a2) {
    goto LABEL_22;
  }
LABEL_9:
  int v9 = *(unsigned int *)(a1 + 40);
  int v10 = 0LL;
  int v11 = *(void *)(a1 + 32);
  while (!*(void *)(v11 + 32 * v10 + 8))
  {
LABEL_11:
    if (++v10 == v9) {
      goto LABEL_19;
    }
  }

  __int16 v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (uint64_t i = a2; ; ++i)
  {
    uint64_t v14 = *i;
    uint64_t v15 = *v12;
    if ((_DWORD)v14 == (_DWORD)v15) {
      break;
    }
    if (byte_1813C6343[v14] != byte_1813C6343[v15]) {
      goto LABEL_11;
    }
LABEL_15:
    ++v12;
  }

  if (*i) {
    goto LABEL_15;
  }
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v16 = 1LL;
  if (!*(_BYTE *)(a1 + 111)) {
LABEL_24:
  }
    sub_1812FA0B4(a1);
LABEL_25:
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17) {
    xmmword_18C465410(v17);
  }
  return v16;
}

                    sub_1812F70C4(v8);
                    unsigned int v8 = 0LL;
LABEL_6:
                    *a3 = v8;
                    return v6;
                  }

                  uint64_t v25 = *v24;
                  if ((v25 & 0xFFFFFFDF) == 0x57)
                  {
                    uint64_t v25 = v24[1];
                    if ((v25 & 0xFFFFFFDF) == 0x41)
                    {
                      uint64_t v25 = v24[2];
                      if ((v25 & 0xFFFFFFDF) == 0x4C)
                      {
LABEL_47:
                        *(_DWORD *)(v8 + 8) = 1;
                        goto LABEL_48;
                      }

                      uint64_t v26 = 108;
                    }

                    else
                    {
                      uint64_t v26 = 97;
                    }
                  }

                  else
                  {
                    uint64_t v26 = 119;
                  }

                  if (v26 != byte_1813C6343[v25]) {
                    goto LABEL_48;
                  }
                  goto LABEL_47;
                case 109:
LABEL_25:
                  uint64_t v18 = "unopened";
                  break;
                default:
                  uint64_t v18 = "invalid";
                  break;
              }
            }

            else
            {
              uint64_t v18 = "NULL";
            }

            sqlite3_log(21, "API call with %s database connection pointer", v18);
            sub_1812CF36C(187045);
            goto LABEL_32;
          case 109:
LABEL_14:
            unsigned int v13 = "unopened";
            break;
          default:
            unsigned int v13 = "invalid";
            break;
        }
      }

      else
      {
        unsigned int v13 = "NULL";
      }

      sqlite3_log(21, "API call with %s database connection pointer", v13);
      sub_1812CF36C(189509);
      goto LABEL_21;
    }
  }

  return 7LL;
}

    if (++v4 == v3) {
      return 0LL;
    }
  }

    ++v3;
  }

  if (byte_1813C6343[v5] == byte_1813C6343[v6]) {
    goto LABEL_5;
  }
  for (int j = "false"; ; ++j)
  {
    int v9 = *v2;
    int v10 = *(unsigned __int8 *)j;
    if ((_DWORD)v9 == (_DWORD)v10) {
      break;
    }
    if (byte_1813C6343[v9] != byte_1813C6343[v10]) {
      return result;
    }
LABEL_11:
    ++v2;
  }

  if (*v2) {
    goto LABEL_11;
  }
  uint64_t v7 = 0x20000000;
LABEL_15:
  *(_BYTE *)uint64_t result = -86;
  *(_DWORD *)(result + 4) = v7 | v1;
  return result;
}

    __int16 v12 = **(_BYTE ***)(a2 + 72);
    unsigned int v13 = *(void *)(v10 + 584);
    if (v13)
    {
      uint64_t v14 = *v12;
      if (*v12)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v12 + 1;
        do
        {
          uint64_t v15 = -1640531535 * (v15 + byte_1813C6343[v14]);
          uint64_t v17 = *v16++;
          uint64_t v14 = v17;
        }

        while (v17);
      }

      else
      {
        uint64_t v15 = 0;
      }

      uint64_t v39 = (_DWORD *)(v13 + 16LL * (v15 % *(_DWORD *)(v10 + 568)));
      uint64_t v29 = (uint64_t *)(v39 + 2);
      uint64_t v30 = *v39;
      if (v30)
      {
        while (1)
        {
LABEL_32:
          uint64_t v29 = (uint64_t *)*v29;
          int v40 = (_BYTE *)v29[3];
          for (uint64_t i = **(unsigned __int8 ***)(a2 + 72); ; ++i)
          {
            uint64_t v42 = *v40;
            uint64_t v43 = *i;
            if ((_DWORD)v42 != (_DWORD)v43) {
              break;
            }
            if (!*v40) {
              goto LABEL_21;
            }
LABEL_34:
            ++v40;
          }

          if (byte_1813C6343[v42] == byte_1813C6343[v43]) {
            goto LABEL_34;
          }
          if (!--v30)
          {
            uint64_t v29 = &qword_18C550660;
            goto LABEL_21;
          }
        }
      }
    }

    else
    {
      uint64_t v29 = (uint64_t *)(v10 + 576);
      uint64_t v30 = *(_DWORD *)(v10 + 572);
      if (v30) {
        goto LABEL_32;
      }
    }

    uint64_t v29 = &qword_18C550660;
LABEL_21:
    uint64_t v31 = v29[2];
    if (v31)
    {
      int v48 = 0LL;
      uint64_t v28 = sub_18130FAF8( v10,  a2,  v31,  *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v31 + 16LL),  (void **)&v48,  a6,  a7,  a8);
      int v38 = v48;
      if ((_DWORD)v28)
      {
        sub_1812DC47C(a1, "%s", v32, v33, v34, v35, v36, v37, (char)v48);
        if (!*(_BYTE *)(v10 + 107)) {
          *(_DWORD *)(a1 + 24) = v28;
        }
      }

      if (v38) {
        sub_1812F20DC((void *)v10, v38);
      }
    }

    else
    {
      sub_1812DC47C(a1, "no such module: %s", 0LL, a4, a5, a6, a7, a8, **(void **)(a2 + 72));
      uint64_t v28 = 1LL;
    }

      uint64_t v7 = 0LL;
LABEL_6:
      v6 |= v7;
      if (++v5 >= v4) {
        goto LABEL_23;
      }
    }
  }

  uint64_t v6 = 0LL;
  uint64_t v14 = *(int **)(a1 + 16);
  if (v14)
  {
LABEL_24:
    uint64_t v15 = *v14;
    if (*v14 < 1)
    {
      uint64_t v17 = 0LL;
LABEL_47:
      v6 |= v17;
      goto LABEL_48;
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    while (1)
    {
      uint64_t v19 = *(unsigned __int8 **)&v14[6 * v16 + 2];
      if (v19)
      {
        if (*v19 == 167 && (*((_DWORD *)v19 + 1) & 0x20) == 0)
        {
          uint64_t v21 = *((_DWORD *)v19 + 11);
          if (*(_DWORD *)(a1 + 600) == v21)
          {
            uint64_t v18 = 1LL;
            goto LABEL_28;
          }

          uint64_t v22 = *(unsigned int *)(a1 + 596);
          if ((int)v22 >= 2)
          {
            uint64_t v23 = 0LL;
            int v24 = v22 - 1;
            while (*(_DWORD *)(a1 + 604 + 4 * v23) != v21)
            {
              if (v24 == ++v23) {
                goto LABEL_27;
              }
            }

            uint64_t v18 = 1LL << (v23 + 1);
            goto LABEL_28;
          }
        }

        else if ((*((_DWORD *)v19 + 1) & 0x810000) == 0)
        {
          uint64_t v18 = sub_181332EB0(v2, v19);
          uint64_t v15 = *v14;
          goto LABEL_28;
        }
      }

    if (v16[16] == 150)
    {
      *((void *)v16 + 1) = *a2;
      *((void *)v16 + 6) = v17;
      goto LABEL_7;
    }

    uint64_t v16 = v18;
    uint64_t v15 = (void *)*v15;
    if (v15) {
      continue;
    }
    break;
  }

  uint64_t v6 = 0LL;
  if (!a1)
  {
LABEL_6:
    sub_1812CF36C(97498);
    return;
  }

    LODWORD(v6) = 0;
    goto LABEL_6;
  }

  int v9 = *(double *)v4;
  if (*(double *)v4 >= -9.22337204e18)
  {
    if (v9 <= 9.22337204e18) {
      *(void *)&uint64_t v6 = (uint64_t)v9;
    }
    else {
      LODWORD(v6) = -1;
    }
  }

  else
  {
    LODWORD(v6) = 0;
  }

    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  int v9 = *(double *)v4;
  if (*(double *)v4 >= -9.22337204e18)
  {
    if (v9 <= 9.22337204e18) {
      uint64_t v6 = (uint64_t)v9;
    }
    else {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v6 = 0x8000000000000000LL;
  }

      v3[3] = 0LL;
      *(_OWORD *)(v3 - 1) = 0u;
      *(_OWORD *)(v3 + 1) = 0u;
      *(_OWORD *)(v3 - 5) = 0u;
      *(_OWORD *)(v3 - 3) = 0u;
      *(_OWORD *)(v3 - 9) = 0u;
      *(_OWORD *)(v3 - 7) = 0u;
      *(_OWORD *)(v3 - 13) = 0u;
      *(_OWORD *)(v3 - 11) = 0u;
      ++v2;
      v3 += 17;
    }

    int v5 = &xmmword_18C465410;
LABEL_12:
    (*v5)(v4);
    goto LABEL_13;
  }

        ++v4;
        --v3;
      }

      while (v3);
    }

    uint64_t v7 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v7)(v2);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v2);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v2);
    int v2 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v7 = &xmmword_18C465410;
      return (*v7)(v2);
    }
  }

  return result;
}

        ++v2;
        v3 += 8LL;
      }

      while (v2 < *v1);
    }

    uint64_t v6 = (uint64_t (**)(int *))&off_18C4653A8;
    if (!dword_18C465380) {
      return (int *)(*v6)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = (int *)off_18C4653A8(v1);
    uint64_t v1 = (int *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = (uint64_t (**)(int *))&xmmword_18C465410;
      return (int *)(*v6)(v1);
    }
  }

  return result;
}

      v9 += v13;
    }

    while ((int)v9 < a4);
  }

  int v9 = 0.0;
LABEL_18:
  __int16 v12 = (*v7)[9];
  if (v12)
  {
    while (*(void *)(v12 + 24) != *(void *)&v9)
    {
      __int16 v12 = *(void *)(v12 + 8);
      if (!v12) {
        goto LABEL_24;
      }
    }

    if (*(_DWORD *)(v12 + 32))
    {
      *(void *)(v12 + 144) = v7;
      uint64_t result = ((uint64_t (*)(void *, uint64_t, uint64_t, void, uint64_t *))v7[3])( &unk_189B6F358,  v12,  a1,  (a2 - 1),  a3 + 1);
      *(void *)(v12 + 144) = 0LL;
      return result;
    }
  }

            sub_1813A5D58(v7);
            uint64_t v7 = 0LL;
            goto LABEL_6;
          }

          *(_WORD *)(v7 + 187) = 257;
LABEL_63:
          *(_BYTE *)(v7 + 189) = 1;
          goto LABEL_93;
        }

        if (v24 != 112)
        {
          if (v24 != 115) {
            goto LABEL_5;
          }
          goto LABEL_63;
        }

        *(_BYTE *)(v7 + 188) = 1;
LABEL_93:
        while (1)
        {
          uint64_t v18 = *(unsigned __int8 *)v12;
          if (!*v12) {
            break;
          }
          if (v18 == 9 || v18 == 32) {
            goto LABEL_27;
          }
          ++v12;
        }

        break;
      default:
        goto LABEL_93;
    }
  }

  uint64_t v25 = 0;
  uint64_t v26 = word_1813CB6EA;
  do
  {
    uint64_t v28 = (unsigned __int16)*v26++;
    uint64_t v27 = v28;
    uint64_t v29 = v25 + (v28 >> 5);
    if (v29 >= 128) {
      uint64_t v30 = 128;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v25 < v30)
    {
      memset((void *)(v7 + v25), *(unsigned __int8 *)(v7 + 160 + (v27 & 0x1F)), (v30 + ~v25) + 1LL);
      uint64_t v25 = v30;
    }
  }

  while (v25 < 128);
  *(_BYTE *)uint64_t v7 = 0;
  if (a3 < 1)
  {
    unsigned int v8 = 0LL;
    goto LABEL_6;
  }

  uint64_t v31 = 0LL;
  while (2)
  {
    uint64_t v32 = *(_BYTE **)(a2 + 8 * v31);
    if (!v32) {
      goto LABEL_138;
    }
    char v33 = *(char **)(a2 + ((8 * v31) | 8));
    uint64_t v34 = "remove_diacritics";
    int v35 = *(_BYTE **)(a2 + 8 * v31);
    while (2)
    {
      uint64_t v36 = *v35;
      uint64_t v37 = *(unsigned __int8 *)v34;
      if ((_DWORD)v36 == (_DWORD)v37)
      {
        if (!*v35)
        {
          int v49 = *v33 - 48;
          if (v49 <= 2 && !v33[1])
          {
            unsigned int v8 = 0LL;
            *(_DWORD *)(v7 + 140) = v49;
            goto LABEL_134;
          }

  *a4 = v10;
  return v11;
}

    if (!--v5) {
      return 1LL;
    }
  }

  unsigned int v13 = *__s1;
  uint64_t v14 = 1;
  if (*__s1) {
    uint64_t v15 = v13 == 5;
  }
  else {
    uint64_t v15 = 1;
  }
  if (!v15 && v13 != 255)
  {
    if ((v13 - 1) >= 2)
    {
      uint64_t v22 = __s1[1];
      if ((v22 & 0x80) != 0)
      {
        int v24 = __s1[2];
        if (__s1[2] < 0)
        {
          uint64_t v27 = __s1[3];
          if (v27 < 0)
          {
            uint64_t v30 = sub_18129BD74(__s1 + 1, &v44);
            if (HIDWORD(v44)) {
              uint64_t v22 = -1;
            }
            else {
              uint64_t v22 = v44;
            }
            uint64_t v23 = (v30 + 1);
          }

          else
          {
            uint64_t v22 = v27 & 0x7F | (v22 << 14) & 0x1FC07F | ((v24 & 0x7F) << 7);
            uint64_t v23 = 4;
          }
        }

        else
        {
          uint64_t v22 = ((v22 & 0x7F) << 7) | v24;
          uint64_t v23 = 3;
        }
      }

      else
      {
        uint64_t v23 = 2;
      }

      uint64_t v14 = v23 + v22;
    }

    else
    {
      uint64_t v14 = 9;
    }
  }

  uint64_t v31 = *__s2;
  uint64_t v32 = 1;
  if (*__s2) {
    char v33 = v31 == 5;
  }
  else {
    char v33 = 1;
  }
  if (v33 || v31 == 255) {
    goto LABEL_55;
  }
  if ((v31 - 1) < 2)
  {
    uint64_t v32 = 9;
LABEL_55:
    if (v14 != v32) {
      return 0LL;
    }
LABEL_56:
    if (memcmp(__s1, __s2, v14)) {
      return 0LL;
    }
    __s1 += v14;
    __s2 += v14;
    goto LABEL_5;
  }

  uint64_t v34 = __s2[1];
  if ((v34 & 0x80) != 0)
  {
    uint64_t v36 = __s2[2];
    if (__s2[2] < 0)
    {
      uint64_t v37 = __s2[3];
      if (v37 < 0)
      {
        int v38 = sub_18129BD74(__s2 + 1, &v44);
        if (HIDWORD(v44)) {
          uint64_t v34 = -1;
        }
        else {
          uint64_t v34 = v44;
        }
        int v35 = (v38 + 1);
      }

      else
      {
        uint64_t v34 = v37 & 0x7F | (v34 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
        int v35 = 4;
      }
    }

    else
    {
      uint64_t v34 = ((v34 & 0x7F) << 7) | v36;
      int v35 = 3;
    }
  }

  else
  {
    int v35 = 2;
  }

  if (v14 == v35 + v34) {
    goto LABEL_56;
  }
  return 0LL;
}

LABEL_28:
  *(_BYTE *)(a1 + 197) = 0;
  return v21;
}

    if (++v21 == v20) {
      goto LABEL_3;
    }
  }

  uint64_t v17 = *((unsigned int *)a2 + 12);
  if ((v17 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v18 = *(void *)(*((void *)a2 + 9) + 8LL);
  uint64_t v19 = *(_WORD *)(v18 + 16 * v17 + 14);
  if ((v19 & 0x200) == 0)
  {
    double v20 = *(void *)(v9 + 16);
    if (v20) {
      goto LABEL_58;
    }
    return v20;
  }

  uint64_t v21 = *(void *)(v18 + 16 * v17) - 1LL;
  if ((v19 & 4) != 0)
  {
  }

  int v24 = (unsigned __int8 *)(v21 + 1);
  uint64_t v25 = *(void *)(v9 + 656);
  if (v25)
  {
    uint64_t v26 = *v24;
    if (*v24)
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unsigned __int8 *)(v21 + 2);
      do
      {
        uint64_t v27 = -1640531535 * (v27 + byte_1813C6343[v26]);
        uint64_t v29 = *v28++;
        uint64_t v26 = v29;
      }

      while (v29);
    }

    else
    {
      uint64_t v27 = 0;
    }

    uint64_t v31 = (_DWORD *)(v25 + 16LL * (v27 % *(_DWORD *)(v9 + 640)));
    uint64_t v30 = (uint64_t *)(v31 + 2);
  }

  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 648);
    uint64_t v31 = (_DWORD *)(v9 + 644);
  }

  uint64_t v32 = *v31;
  if (v32)
  {
LABEL_47:
    uint64_t v30 = (uint64_t *)*v30;
    char v33 = (_BYTE *)v30[3];
    for (uint64_t i = v24; ; ++i)
    {
      int v35 = *v33;
      uint64_t v36 = *i;
      if ((_DWORD)v35 == (_DWORD)v36)
      {
        if (!*v33) {
          goto LABEL_56;
        }
      }

      else if (byte_1813C6343[v35] != byte_1813C6343[v36])
      {
        if (!--v32)
        {
          uint64_t v30 = &qword_18C550660;
          goto LABEL_56;
        }

        goto LABEL_47;
      }

      ++v33;
    }
  }

  uint64_t v30 = &qword_18C550660;
LABEL_56:
  uint64_t v37 = v30[2];
  if (!v37) {
    return 0LL;
  }
  int v38 = v37 + 40LL * *(unsigned __int8 *)(v9 + 100);
  double v20 = v38 - 40;
  if (v38 != 40) {
    goto LABEL_58;
  }
  return v20;
}

    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
      sub_181303888((int *)a1);
    }
    else {
      *(_WORD *)(a1 + 20) = 1;
    }
    *(void *)(a1 + 8) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    return 7LL;
  }

  uint64_t v7 = *(void **)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 40);
  if (v7 != v8) {
    goto LABEL_13;
  }
  int v9 = *(void *)(a1 + 24);
  if (!v9)
  {
    uint64_t v17 = sub_18127D33C(*(void *)(a1 + 8), a2);
    *(void *)(a1 + 40) = v17;
    if (!v17)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      if (v18)
      {
        uint64_t v19 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v18);
          --qword_18C468B10;
          off_18C4653A8(v18);
          uint64_t v18 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_43;
          }
          uint64_t v19 = &xmmword_18C465410;
        }

        (*v19)(v18);
      }
    }

      uint64_t v27 = *(void *)(v8 + 32);
      if (v27)
      {
        int v100 = 0u;
        int v101 = 0u;
        unsigned int v98 = 0u;
        int v99 = 0u;
        char v95 = 0LL;
        int v97 = 0u;
        memset(v94, 0, sizeof(v94));
        int v96 = v27;
      }

      uint64_t v28 = *(void *)(v8 + 64);
      if (v28)
      {
        while (1)
        {
          uint64_t v29 = *(int **)v28;
          if (*(void *)v28)
          {
            if (*v29 >= 1) {
              break;
            }
          }

      int v24 = v12 / 4;
      uint64_t v25 = v12 / 4 + 3;
      if (v15)
      {
        uint64_t v26 = v15[1];
        uint64_t v27 = *v15;
        uint64_t v28 = v26 + v25;
        if (v26 + v25 <= (int)v27)
        {
LABEL_41:
          char v33 = &v15[v26];
          _BYTE *v33 = v13;
          v33[1] = v25;
          uint64_t v34 = v33 + 2;
          v15[1] = v28;
          memcpy(v33 + 2, (const void *)v11, v12);
          *((_BYTE *)v34 + v12) = 0;
          goto LABEL_42;
        }

        uint64_t v29 = 2 * v27 + v25;
        uint64_t v30 = 4 * v29;
        if (*(void *)(v10 + 512) > (unint64_t)v15)
        {
          if (*(void *)(v10 + 496) <= (unint64_t)v15)
          {
            if (v30 < 0x81)
            {
LABEL_34:
              *uint64_t v15 = v29;
              goto LABEL_41;
            }
          }

          else if (*(void *)(v10 + 504) <= (unint64_t)v15 && v30 <= *(unsigned __int16 *)(v10 + 438))
          {
            goto LABEL_34;
          }
        }

        uint64_t v32 = sub_1812F2310(v10, v15, v30);
        if (v32)
        {
          uint64_t v26 = *(_DWORD *)(v32 + 4);
          uint64_t v15 = (int *)v32;
          goto LABEL_40;
        }
      }

      else
      {
        LODWORD(v29) = v24 + 13;
        uint64_t v31 = sub_1812F2264(v10, 4LL * (v24 + 13));
        uint64_t v15 = (int *)v31;
        if (v31)
        {
          uint64_t v26 = 2;
          *(_DWORD *)(v31 + 4) = 2;
LABEL_40:
          *uint64_t v15 = v29;
          uint64_t v28 = v26 + v25;
          goto LABEL_41;
        }
      }

    *int v49 = a3;
    *(_DWORD *)(a1 + 8) = (_DWORD)v49 + 1 - *(_DWORD *)a1;
    v49[1] = 0;
  }

  else
  {
    memcpy(v48, v4, v7 & 0x3FFFFFFF);
    uint64_t v52 = *(int *)(a1 + 8) + v8;
    *(_DWORD *)(a1 + 8) = v52;
    *(_BYTE *)(*(void *)a1 + v52) = 0;
  }

  uint64_t v25 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v26 = 1LL;
  int v5 = 1LL;
  if (v25)
  {
LABEL_29:
    xmmword_18C465410(v25);
    return v26;
  }

  return v5;
}

  uint64_t v19 = (void *)(v7 + 464);
  double v20 = (void *)(v7 + 480);
  uint64_t v21 = a3 & 0xFFFFFFF8;
  else {
    uint64_t v22 = 0LL;
  }
  if ((int)v21 < 9 || a4 <= 0)
  {
    *(_WORD *)(v7 + 438) = 0;
    *uint64_t v19 = 0LL;
    *(void *)(v7 + 472) = 0LL;
  }

  else
  {
    uint64_t v23 = a4 * (uint64_t)a3;
    if (a2)
    {
      int v24 = a2;
    }

    else
    {
      if (off_18C550648) {
        off_18C550648(a1);
      }
      uint64_t v25 = sub_18126F0AC(v23);
      int v24 = (void *)v25;
      if (off_18C550650) {
        off_18C550650(v25);
      }
      if (v24) {
        uint64_t v23 = (int)off_18C4653B8(v24);
      }
    }

    if (v22 < 0x180)
    {
      uint64_t v26 = v23 / (v22 + 128);
      uint64_t v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
      if (v22 < 0x100)
      {
        uint64_t v21 = v22;
        LODWORD(v26) = v23 / v22;
        LODWORD(v27) = 0;
      }
    }

    else
    {
      uint64_t v26 = v23 / (v22 + 384);
      uint64_t v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
    }

    *(void *)(v7 + 504) = v24;
    *uint64_t v19 = 0LL;
    *(void *)(v7 + 472) = 0LL;
    *(_WORD *)(v7 + 436) = v21;
    *(_WORD *)(v7 + 438) = v21;
    if (v24)
    {
      if ((int)v26 >= 1)
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = v26;
        do
        {
          *int v24 = v28;
          uint64_t v28 = v24;
          int v24 = (void *)((char *)v24 + v21);
          --v29;
        }

        while (v29);
        *uint64_t v19 = (char *)v24 - v21;
      }

      *double v20 = 0LL;
      *(void *)(v7 + 488) = 0LL;
      *(void *)(v7 + 496) = v24;
      if ((int)v27 >= 1)
      {
        uint64_t v30 = 0LL;
        uint64_t v31 = v27;
        do
        {
          uint64_t v32 = v24;
          *int v24 = v30;
          v24 += 16;
          uint64_t v30 = v32;
          --v31;
        }

        while (v31);
        *double v20 = v24 - 16;
      }

      *(void *)(v7 + 512) = v24;
      *(_DWORD *)(v7 + 432) = 0;
      *(_BYTE *)(v7 + 440) = a2 == 0LL;
      char v33 = v27 + v26;
      goto LABEL_57;
    }
  }

  int v24 = 0LL;
  char v33 = 0;
  *(void *)(v7 + 504) = 0LL;
  *(void *)(v7 + 512) = 0LL;
  *(void *)(v7 + 488) = 0LL;
  *(void *)(v7 + 496) = 0LL;
  *double v20 = 0LL;
  *(_DWORD *)(v7 + 432) = 1;
  *(_WORD *)(v7 + 436) = 0;
  *(_BYTE *)(v7 + 440) = 0;
LABEL_57:
  uint64_t result = 0LL;
  *(_DWORD *)(v7 + 444) = v33;
  *(void *)(v7 + 520) = v24;
  return result;
}

  char v33 = sub_1813037C4(a1, v30);
  uint64_t v34 = *(void *)(a1 + 24);
  if (v34) {
LABEL_29:
  }
    xmmword_18C465410(v34);
  return v33;
}

      uint64_t v26 = *(void *)(v22 + 112);
      if ((*(_WORD *)(v26 + 52) & 0x20) != 0)
      {
        uint64_t v27 = *(void *)(v26 + 40);
        --*(_DWORD *)(v27 + 152);
        *(void *)(v26 + 32) = *(void *)(v27 + 168);
        *(void *)(v27 + 168) = v26;
        (*(void (**)(void, void, void))(**(void **)(v27 + 72) + 144LL))( *(void *)(v27 + 72),  *(void *)(v27 + 200) * (*(_DWORD *)(v26 + 48) - 1),  *(void *)(v26 + 8));
      }

      else
      {
        sub_1812F9F44(v26);
      }

      goto LABEL_17;
    }

    uint64_t v36 = v81 - 1;
    uint64_t v37 = (unsigned __int16 *)(v88 + v34 + 2 * (v81 - 1));
    unint64_t v84 = v30 + 1;
    int v38 = v85 - 4;
    char v89 = 1;
    while (1)
    {
      if (!*(_DWORD *)(a1 + 28))
      {
LABEL_71:
        *a3 = v96[0];
        *(void *)(a1 + 48) = 0LL;
        if (v89)
        {
          uint64_t v34 = v83;
          goto LABEL_74;
        }

        *(_BYTE *)uint64_t v22 = v78;
        goto LABEL_28;
      }

      *(_DWORD *)(a1 + 64) = v36;
      unsigned int v91 = v37 - 1;
      uint64_t v39 = __rev16(*v37);
      int v40 = v39 <= v35 || v39 > v38;
      if (!v40) {
        break;
      }
      sub_18130E688(a1, "Offset %u out of range %u..%u", v39, v84, v38);
      int v38 = v85 - 4;
      char v89 = 0;
      int v35 = v90;
      uint64_t v37 = v91;
LABEL_39:
      int v40 = v36-- <= 0;
      if (v40) {
        goto LABEL_71;
      }
    }

    uint64_t v86 = (unsigned int *)(v88 + v39);
    (*(void (**)(uint64_t))(v22 + 128))(v22);
    if (v39 + v95 > v85)
    {
      sub_18130E688(a1, "Extends off end of page");
      char v89 = 0;
      goto LABEL_47;
    }

    if (!*(_BYTE *)(v22 + 1))
    {
      int v35 = v90;
      goto LABEL_55;
    }

    int v41 = v92;
    if (v82)
    {
      if (v92 <= v96[0])
      {
LABEL_53:
        int v35 = v90;
        int v82 = 0;
        v96[0] = v41;
LABEL_55:
        uint64_t v42 = v94;
        if (v93 > v94)
        {
          uint64_t v43 = bswap32(*(unsigned int *)((char *)v86 + v95 - 4));
          if (v18[33])
          {
            int v79 = v43;
            sub_18130E7DC(a1, v43, 3, a2);
            uint64_t v43 = v79;
            uint64_t v42 = v94;
          }

          sub_18130E220((_DWORD **)a1, 0, v43, (v85 - 5 + v93 - v42) / (v85 - 4));
          int v35 = v90;
        }

        uint64_t v22 = v87;
        if (*(_BYTE *)(v87 + 8))
        {
          int v44 = *v32 + 1;
          *uint64_t v32 = v44;
          v32[v44] = (v39 + v95 - 1) | (v39 << 16);
          if (v44 >= 2)
          {
            do
            {
              int v45 = v44 >> 1;
              uint64_t v46 = v32[v45];
              uint64_t v47 = v32[v44];
              if (v46 <= v47) {
                break;
              }
              int v48 = v44;
              v32[v45] = v47;
              v32[v44] = v46;
              v44 >>= 1;
            }

            while (v48 > 3);
          }

          goto LABEL_48;
        }

        int v49 = bswap32(*v86);
        if (v18[33]) {
          sub_18130E7DC(a1, v49, 5, a2);
        }
        uint64_t v50 = sub_18130E894(a1, v49, v96, v96[0]);
        if (v50 == v21)
        {
          int v82 = 0;
        }

        else
        {
          int v51 = v50;
          sub_18130E688(a1, "Child page depth differs");
          int v82 = 0;
          uint64_t v21 = v51;
        }

    --*(_DWORD *)(v10 + 72);
    return v28;
  }

  uint64_t v18 = (__int16 *)(a2 + 54);
  if (*(__int16 *)(a2 + 54) < 0)
  {
    sub_1812DC47C(a1, "view %s is circularly defined", a3, a4, a5, a6, a7, a8, *(void *)a2);
    return 1LL;
  }

  else
  {
    uint64_t v19 = sub_18129F624(*(void *)a1, *(void *)(a2 + 64), 0LL);
    if (v19)
    {
      double v20 = v19;
      uint64_t v21 = *(_BYTE *)(a1 + 302);
      uint64_t v22 = *(_DWORD *)(a1 + 52);
      uint64_t v23 = *(_DWORD *)(a1 + 140);
      *(_BYTE *)(a1 + 302) = 0;
      sub_1812BD68C(a1, *(int **)(v19 + 40));
      *uint64_t v18 = -1;
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      int v24 = *(void *)(v10 + 528);
      *(void *)(v10 + 528) = 0LL;
      uint64_t v25 = sub_18131FA64(a1, v20, 64LL);
      *(void *)(v10 + 528) = v24;
      *(_DWORD *)(a1 + 52) = v22;
      *(_DWORD *)(a1 + 140) = v23;
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(int **)(a2 + 32);
        if (v27)
        {
          sub_181321CF4((_DWORD *)a1, v27, (_WORD *)(a2 + 54), (void *)(a2 + 8));
          if (!*(_DWORD *)(a1 + 48) && **(_DWORD **)(v20 + 32) == *v18) {
            sub_1813226D0(a1, a2, (void *)v20, 64);
          }
        }

        else
        {
          *(_WORD *)(a2 + 54) = *(_WORD *)(v25 + 54);
          *(void *)(a2 + 8) = *(void *)(v25 + 8);
          *(_DWORD *)(a2 + 48) |= *(_DWORD *)(v25 + 48) & 0x62;
          *(_WORD *)(v25 + 54) = 0;
          *(void *)(v25 + 8) = 0LL;
        }

        *(_WORD *)(a2 + 56) = *(_WORD *)(a2 + 54);
        if (*(void *)(v10 + 816) || (int v44 = *(_DWORD *)(v26 + 44) - 1, (*(_DWORD *)(v26 + 44) = v44) == 0)) {
          sub_181311A80((void *)v10, (void *)v26);
        }
        uint64_t v28 = 0LL;
      }

      else
      {
        *(_DWORD *)(a2 + 54) = 0;
        uint64_t v28 = 1LL;
      }

      sub_18128FDA0((void *)v10, v20, 1);
      int v45 = *(_DWORD *)(v10 + 432) - 1;
      *(_DWORD *)(v10 + 432) = v45;
      if (v45) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = *(_WORD *)(v10 + 438);
      }
      *(_WORD *)(v10 + 436) = v46;
      *(_BYTE *)(a1 + 302) = v21;
    }

    else
    {
      uint64_t v28 = 1LL;
    }

    *(_WORD *)(*(void *)(a2 + 96) + 114LL) |= 2u;
    if (*(_BYTE *)(v10 + 103)) {
      sub_181311D1C((void *)v10, a2);
    }
  }

  return v28;
}

      uint64_t v37 = *v22;
      if (v22[1] > *v22)
      {
        *uint64_t v22 = v37 + 1;
        int v38 = &v22[6 * v37];
        *((void *)v38 + 2) = 0LL;
        *((void *)v38 + 3) = 0LL;
        *((void *)v38 + 1) = v33;
        goto LABEL_15;
      }

      int v24 = sub_18133E1F4(*a1, v22, (unsigned __int8 *)v33);
LABEL_14:
      uint64_t v22 = v24;
LABEL_15:
    }
  }

  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
LABEL_50:
  if (*(_BYTE *)(v89 + 63) == 1) {
    uint64_t v52 = 14;
  }
  else {
    uint64_t v52 = 15;
  }
LABEL_53:
  if (a4 && *a4 >= 1)
  {
    uint64_t v53 = 0LL;
    int v54 = 2LL;
    do
    {
      int v56 = *(unsigned __int8 **)&a4[v54];
      if (v56)
      {
        int v57 = (unsigned __int8 *)sub_18129C928((uint64_t)v16, v56, 0LL, 0LL);
        if (!v22) {
          goto LABEL_56;
        }
      }

      else
      {
        int v57 = 0LL;
        if (!v22)
        {
LABEL_56:
          uint64_t v55 = (int *)sub_18133E190((void *)*a1, v57);
          goto LABEL_57;
        }
      }

      int v58 = *v22;
      if (v22[1] > *v22)
      {
        *uint64_t v22 = v58 + 1;
        int v59 = &v22[6 * v58];
        *((void *)v59 + 2) = 0LL;
        *((void *)v59 + 3) = 0LL;
        *((void *)v59 + 1) = v57;
        goto LABEL_58;
      }

      uint64_t v55 = sub_18133E1F4(*a1, v22, v57);
LABEL_57:
      uint64_t v22 = v55;
LABEL_58:
      ++v53;
      v54 += 6LL;
    }

    while (v53 < *a4);
  }

  int v60 = sub_181280000((void **)a1, v22, v85, v84, (uint64_t)v23, 0LL, v87, 276955136, v86);
  int v66 = (uint64_t)v60;
  if (v60) {
    *((_DWORD *)v60 + 1) |= 0x8000000u;
  }
  v90[0] = v52;
  char v95 = 0LL;
  unsigned int v93 = 0;
  uint64_t v94 = 0;
  unsigned int v91 = v88;
  if (a3) {
    int v67 = *(unsigned __int16 *)(a3 + 94);
  }
  else {
    int v67 = -1;
  }
  unsigned int v92 = v67;
  sub_1812801A8((void **)a1, (uint64_t)v60, (uint64_t)v90, v61, v62, v63, v64, v65);
  if (v66) {
    sub_18128FDA0(v16, v66, 1);
  }
}

  uint64_t v14 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_33:
    (*v14)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v14 = &xmmword_18C465410;
    goto LABEL_33;
  }

  return 0LL;
}

  int v11 = (_BYTE *)a1[15];
  if (v11)
  {
    *int v11 = 0;
    if (!v11[1] && !v11[2])
    {
      __int16 v12 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_36:
        (*v12)(v11);
        goto LABEL_37;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
      --qword_18C468B10;
      off_18C4653A8(v11);
      int v11 = (_BYTE *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        __int16 v12 = &xmmword_18C465410;
        goto LABEL_36;
      }
    }
  }

  uint64_t v14 = a1 + 4;
  if (*((_DWORD *)a1 + 8) != 2) {
    sub_18138CE6C(a1[8]);
  }
  uint64_t v15 = (void *)a1[19];
  if (v15)
  {
    do
    {
      uint64_t v16 = (void (*)(void))v15[2];
      uint64_t v17 = (void *)v15[3];
      if (v16) {
        v16(v15[1]);
      }
      uint64_t v18 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v15);
        --qword_18C468B10;
        off_18C4653A8(v15);
        uint64_t v15 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_33;
        }
        uint64_t v18 = &xmmword_18C465410;
      }

      (*v18)(v15);
LABEL_33:
      uint64_t v15 = v17;
    }

    while (v17);
  }

  sqlite3_finalize((sqlite3_stmt *)a1[17]);
  uint64_t v19 = a1[16];
  if (v19)
  {
    double v20 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_47:
      (*v20)(v19);
      goto LABEL_48;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
    --qword_18C468B10;
    off_18C4653A8(v19);
    uint64_t v19 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      double v20 = &xmmword_18C465410;
      goto LABEL_47;
    }
  }

      uint64_t result = 0LL;
LABEL_29:
      *(_DWORD *)(a1 + 80) &= ~4u;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      goto LABEL_30;
    }

    int v11 = 0LL;
    __int16 v12 = 0LL;
    while (1)
    {
      if (!*(_BYTE *)(*(void *)(v6 + 40) + v12))
      {
        uint64_t result = 0LL;
        unsigned int v13 = (_DWORD *)(*(void *)(a1 + 16) + v11);
        *unsigned int v13 = 0;
        if (*(_DWORD *)(*(void *)(*(void *)a1 + 24LL) + 64LL) == 1) {
          goto LABEL_13;
        }
        if (*(_DWORD *)(a1 + 32) != 3)
        {
          uint64_t result = sub_181399718((uint64_t *)a1, 0);
          if ((_DWORD)result) {
            goto LABEL_29;
          }
          uint64_t v14 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 56), (int)v12 + 1);
          uint64_t v15 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 56), v12 + 1);
          if (v14)
          {
            uint64_t result = (*(uint64_t (**)(void, _DWORD *, uint64_t, const unsigned __int8 *, uint64_t, uint64_t (*)(_DWORD *, char)))(*(void *)(v6 + 112) + 16LL))( *(void *)(v6 + 104),  v13,  8LL,  v14,  v15,  sub_18139B6B4);
            goto LABEL_13;
          }
        }
      }

      uint64_t result = 0LL;
LABEL_13:
      ++v12;
      v11 += 4LL;
      if ((_DWORD)result) {
        goto LABEL_29;
      }
    }
  }

  uint64_t result = 0LL;
  if ((a2 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(_DWORD *)(v6 + 24) <= (signed int)a2)
    {
      unsigned int v8 = 0;
      uint64_t result = 25LL;
    }

    else
    {
      unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 16) + 4LL * a2);
    }

    *a3 = v8;
    return result;
  }

    uint64_t v22 = *(_WORD *)(v20 + 20);
    if ((v22 & 2) != 0 && *(_BYTE *)(v20 + 22) == 1)
    {
      uint64_t v21 = *(unsigned int *)(v20 + 16);
      if (v8) {
        goto LABEL_39;
      }
    }

    else if ((v22 & 0x10) != 0)
    {
      uint64_t v21 = *(unsigned int *)(v20 + 16);
      if ((*(_WORD *)(v20 + 20) & 0x400) != 0) {
        uint64_t v21 = (*(_DWORD *)v20 + v21);
      }
      if (v8) {
LABEL_39:
      }
        unsigned int v8 = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(void *)(v6 + 112) + 16LL))( *(void *)(v6 + 104),  &v31,  4LL,  v8,  v21,  sub_18139CD28);
    }

    else if ((v22 & 1) != 0)
    {
      uint64_t v21 = 0LL;
      if (v8) {
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v21 = sub_181303970(v20, 1);
      if (v8) {
        goto LABEL_39;
      }
    }

      if (!v15)
      {
LABEL_54:
        if (v12 >= v8) {
          goto LABEL_55;
        }
        goto LABEL_37;
      }

      if (v15 <= 0x7F)
      {
        *v19++ = v15;
        if (v12 >= v8) {
          goto LABEL_55;
        }
        goto LABEL_37;
      }

      if (v15 <= 0x7FF)
      {
        *uint64_t v19 = (v15 >> 6) | 0xC0;
        v19[1] = v15 & 0x3F | 0x80;
        v19 += 2;
        if (v12 >= v8) {
          goto LABEL_55;
        }
        goto LABEL_37;
      }

      if (!HIWORD(v15))
      {
        *uint64_t v19 = (v15 >> 12) | 0xE0;
        v19[1] = (v15 >> 6) & 0x3F | 0x80;
        v19[2] = v15 & 0x3F | 0x80;
        v19 += 3;
        if (v12 >= v8) {
          goto LABEL_55;
        }
        goto LABEL_37;
      }

    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v30 = sub_18126F0AC(2LL * (int)v28);
    if (!v30) {
      return 7LL;
    }
    uint64_t v21 = (int8x16_t *)v30;
    uint64_t v16 = 2 * v28;
    v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
    v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
    v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
    v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
    v20.i64[0] = 0x2020202020202020LL;
    v20.i64[1] = 0x2020202020202020LL;
LABEL_31:
    if ((int)v28 >= 1)
    {
      if (v28 < 8 || (unint64_t)v21 - a10 - (int)v22 < 0x20)
      {
        uint64_t v31 = 0LL;
LABEL_35:
        uint64_t v32 = v28 - v31;
        char v33 = &v21->i8[v31];
        uint64_t v34 = (unsigned __int8 *)(a10 + v31 + (int)v22);
        do
        {
          uint64_t v36 = *v34++;
          int v35 = v36;
          uint64_t v37 = v36 + 32;
          *v33++ = v35;
          --v32;
        }

        while (v32);
        goto LABEL_39;
      }

      if (v28 >= 0x20)
      {
        uint64_t v31 = v28 & 0x7FFFFFE0;
        int v40 = (int8x16_t *)(v51 + (int)v22);
        int v41 = v21 + 1;
        uint64_t v42 = v28 & 0xFFFFFFE0;
        do
        {
          uint64_t v43 = vbslq_s8( (int8x16_t)vcgtq_u8((uint8x16_t)v19, (uint8x16_t)vaddq_s8(*v40, (int8x16_t)v18)),  vaddq_s8(*v40, v20),  *v40);
          v41[-1] = vbslq_s8( (int8x16_t)vcgtq_u8((uint8x16_t)v19, (uint8x16_t)vaddq_s8(v40[-1], (int8x16_t)v18)),  vaddq_s8(v40[-1], v20),  v40[-1]);
          _DWORD *v41 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 32LL;
        }

        while (v42);
        if (v31 == v28) {
          goto LABEL_39;
        }
        if ((((_BYTE)v26 - (_BYTE)v22) & 0x18) == 0) {
          goto LABEL_35;
        }
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      int v44 = v31;
      uint64_t v31 = v28 & 0xFFFFFFF8;
      int v45 = (int8x8_t *)(a10 + v44 + (int)v22);
      uint64_t v46 = (int8x8_t *)&v21->i8[v44];
      uint64_t v47 = v44 - v31;
      do
      {
        int v48 = *v45++;
        *v46++ = vbsl_s8( (int8x8_t)vcgt_u8( (uint8x8_t)0x1A1A1A1A1A1A1A1ALL,  (uint8x8_t)vadd_s8(v48, (int8x8_t)0xBFBFBFBFBFBFBFBFLL)),  vadd_s8(v48, (int8x8_t)0x2020202020202020LL),  v48);
        v47 += 8LL;
      }

      while (v47);
      if (v31 != v28) {
        goto LABEL_35;
      }
    }

  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v21 = *(unsigned __int8 *)(v18 + i);
    uint64_t v22 = aInt32[i];
    if ((_DWORD)v21 != (_DWORD)v22) {
      break;
    }
    if (!*(_BYTE *)(v18 + i))
    {
      uint64_t v17 = 0;
      goto LABEL_71;
    }

uint64_t sub_1812775D4( int *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = a1[4];
  *(_DWORD *)(*(void *)a1 + 44LL) |= 0x40u;
  if (!a3) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)a1;
  ++a1[7];
  if (*(_BYTE *)(v8 + 103))
  {
    sub_18130D724((uint64_t)a1, a3, 0LL, a4, a5, a6, a7, a8);
    return 1LL;
  }

  unsigned int v13 = (unsigned __int8 *)a3[3];
  if (!v13) {
    goto LABEL_27;
  }
  uint64_t v14 = (_BYTE *)a3[4];
  if (!v14)
  {
    uint64_t v25 = (unsigned __int8 *)a3[1];
    if (v25) {
      goto LABEL_21;
    }
LABEL_27:
    uint64_t v29 = a3;
    uint64_t v28 = 0LL;
LABEL_30:
    sub_18130D724((uint64_t)a1, v29, v28, a4, a5, a6, a7, a8);
    return 0LL;
  }

  if ((*v14 & 0xDF) == 0x43 && (v14[1] & 0xDF) == 0x52)
  {
    char v15 = *(_BYTE *)(v8 + 196);
    *(_BYTE *)(v8 + 196) = v9;
    uint64_t v16 = *v13;
    if ((unint64_t)(v16 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
    {
      unint64_t v36 = 0LL;
      uint64_t v37 = v13 + 1;
      while (1)
      {
        unint64_t v36 = 10 * v36 + (char)v16 - 48;
        if (v36 > 0x100000000LL) {
          break;
        }
        unsigned int v38 = *v37++;
        LODWORD(v16) = v38;
        if ((unint64_t)v38 - 58 < 0xFFFFFFFFFFFFFFF6LL)
        {
          if ((_DWORD)v16) {
            int v39 = 0;
          }
          else {
            int v39 = v36;
          }
          *(_DWORD *)(v8 + 192) = v39;
          if ((_DWORD)v16) {
            goto LABEL_10;
          }
          unsigned int v40 = a1[8];
          if (v40 < v36)
          {
            if (v40) {
              goto LABEL_10;
            }
          }

          goto LABEL_12;
        }
      }
    }

    *(_DWORD *)(v8 + 192) = 0;
LABEL_10:
    if (byte_18C465389) {
      sub_18130D724((uint64_t)a1, a3, "invalid rootpage", a4, a5, a6, a7, a8);
    }
LABEL_12:
    *(_BYTE *)(v8 + 198) &= ~1u;
    *(void *)(v8 + 200) = a3;
    pStmt = 0LL;
    sub_18126E238(v8, a3[4], 0xFFFFFFFFLL, 0LL, 0LL, &pStmt, 0LL);
    int v24 = *(_DWORD *)(v8 + 80);
    *(_BYTE *)(v8 + 196) = v15;
    if (v24 && (*(_BYTE *)(v8 + 198) & 1) == 0)
    {
      if (v24 > *(_DWORD *)(v11 + 20)) {
        *(_DWORD *)(v11 + 20) = v24;
      }
      if (v24 != 9)
      {
        if (v24 == 7)
        {
          sub_1812D84D8(v8, v17, v18, v19, v20, v21, v22, v23);
        }

        else if (v24 != 6)
        {
          int v41 = (char *)sqlite3_errmsg((sqlite3 *)v8);
          sub_18130D724(v11, a3, v41, v42, v43, v44, v45, v46);
        }
      }
    }

    *(void *)(v8 + 200) = off_18C54FFA0;
    sqlite3_finalize(pStmt);
    return 0LL;
  }

  uint64_t v25 = (unsigned __int8 *)a3[1];
  if (!v25 || *v14) {
    goto LABEL_27;
  }
LABEL_21:
  uint64_t v26 = sub_18130D838(v8, v25, *(unsigned __int8 **)(*(void *)(v8 + 32) + 32 * v9));
  if (!v26)
  {
    uint64_t v28 = "orphan index";
    goto LABEL_29;
  }

  uint64_t v27 = *v13;
  if ((unint64_t)(v27 - 58) >= 0xFFFFFFFFFFFFFFF6LL)
  {
    unint64_t v31 = 0LL;
    uint64_t v32 = v13 + 1;
    while (1)
    {
      unint64_t v31 = 10 * v31 + (char)v27 - 48;
      if (v31 > 0x100000000LL) {
        break;
      }
      unsigned int v33 = *v32++;
      LODWORD(v27) = v33;
      if ((unint64_t)v33 - 58 < 0xFFFFFFFFFFFFFFF6LL)
      {
        if ((_DWORD)v27) {
          unsigned int v34 = 0;
        }
        else {
          unsigned int v34 = v31;
        }
        *(_DWORD *)(v26 + 88) = v34;
        if (!(_DWORD)v27 && v34 >= 2 && v34 <= *(_DWORD *)(v11 + 32))
        {
          uint64_t v35 = *(void *)(*(void *)(v26 + 24) + 16LL);
          if (!v35) {
            return 0LL;
          }
          while (v35 == v26 || *(_DWORD *)(v35 + 88) != v34)
          {
            uint64_t v12 = 0LL;
            uint64_t v35 = *(void *)(v35 + 40);
            if (!v35) {
              return v12;
            }
          }
        }

        goto LABEL_24;
      }
    }
  }

  *(_DWORD *)(v26 + 88) = 0;
LABEL_24:
  uint64_t v12 = byte_18C465389;
  if (byte_18C465389)
  {
    uint64_t v28 = "invalid rootpage";
LABEL_29:
    a1 = (int *)v11;
    uint64_t v29 = a3;
    goto LABEL_30;
  }

  return v12;
}

void sub_1812778D4( uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = a7;
  int v10 = a6;
  int v11 = a5;
  int v12 = a4;
  unsigned int v13 = (_OWORD *)a3;
  uint64_t v16 = *(void *)a1;
  if (*(_BYTE *)(*(void *)a1 + 197LL))
  {
    if (*(_DWORD *)(v16 + 192) == 1)
    {
      int v141 = a6;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 196);
      if ((_DWORD)v17 == 1) {
        unint64_t v18 = 19LL;
      }
      else {
        unint64_t v18 = 14LL;
      }
      uint64_t v19 = (char *)sub_1812F2264(v16, v18);
      if (!v19)
      {
        *(_OWORD *)(a1 + 264) = *a2;
        return;
      }

      uint64_t v20 = v19;
      if ((_DWORD)v17 == 1) {
        uint64_t v21 = "sqlite_temp_master";
      }
      else {
        uint64_t v21 = "sqlite_master";
      }
      memcpy(v19, v21, v18);
      *(_OWORD *)(a1 + 264) = *a2;
      goto LABEL_41;
    }

    if (*(_DWORD *)(a3 + 8))
    {
      int v24 = "corrupt database";
      goto LABEL_19;
    }

    uint64_t v22 = (_DWORD *)(a3 + 8);
  }

  else
  {
    uint64_t v22 = (_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a3 + 8))
    {
      uint64_t v23 = sub_18131EDC8(*(void *)a1, (uint64_t)a2);
      if ((v23 & 0x80000000) != 0)
      {
        sub_1812DC47C(a1, "unknown database %T", a3, a4, a5, a6, a7, a8, (char)a2);
        return;
      }

      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }
  }

  uint64_t v23 = *(unsigned __int8 *)(v16 + 196);
  unsigned int v13 = a2;
  if (!(_DWORD)a4)
  {
LABEL_23:
    uint64_t v17 = v23;
    goto LABEL_24;
  }

LABEL_24:
  int v141 = v10;
  if (v13 && (uint64_t v25 = *(const void **)v13) != 0LL)
  {
    size_t v26 = *((unsigned int *)v13 + 2);
    uint64_t v27 = (char *)sub_1812F2264(v16, v26 + 1);
    uint64_t v20 = v27;
    if (v27)
    {
      memcpy(v27, v25, v26);
      v20[v26] = 0;
      int v28 = *v20;
      if ((char)byte_1813C6558[*v20] < 0)
      {
        uint64_t v29 = 0LL;
        if (v28 == 91) {
          int v28 = 93;
        }
        for (int i = 1; ; ++i)
        {
          uint64_t v31 = i;
          int v32 = v20[i];
          if (v32 == v28)
          {
            ++i;
            LOBYTE(v32) = v28;
          }

          v20[v29++] = v32;
        }

        v20[v29] = 0;
      }
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  unsigned int v33 = *(unsigned __int8 *)(a1 + 302);
  if (v33 > 3 || v33 == 2)
  {
    if (*(void *)a1)
    {
      uint64_t v84 = sub_1812F2264(*(void *)a1, 0x20uLL);
      if (!v84) {
        goto LABEL_40;
      }
    }

    else
    {
      uint64_t v84 = sub_18126F0AC(32LL);
      if (!v84) {
        goto LABEL_40;
      }
    }

    *(_OWORD *)uint64_t v84 = 0u;
    *(_OWORD *)(v84 + 16) = 0u;
    *(void *)uint64_t v84 = v20;
    *(_OWORD *)(v84 + 8) = *v13;
    *(void *)(v84 + 24) = *(void *)(a1 + 408);
    *(void *)(a1 + 408) = v84;
  }

  if (!v5) {
    return 0LL;
  }
  if (a2 >= 1)
  {
    for (int i = a2; i; --i)
    {
      if (*v5)
      {
        uint64_t v25 = strlen(*v5);
        if (sqlite3_initialize()) {
          goto LABEL_33;
        }
        size_t v26 = (v25 & 0x3FFFFFFF) + 1LL;
        uint64_t v27 = (void *)sub_18126F0AC(v26);
        if (!v27) {
          goto LABEL_33;
        }
        uint64_t v22 = v27;
        memcpy(v27, *v5, v26);
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      uint64_t v23 = *(void *)a1;
      int v24 = *(unsigned int *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = v24 + 1;
      *(void *)(v23 + 8 * v24) = v22;
      ++v5;
    }
  }

  uint64_t result = 0LL;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

  unsigned int v33 = *(_BYTE **)v32;
  for (int i = *(unsigned __int8 **)(a2 + 96); ; ++i)
  {
    uint64_t v35 = *v33;
    uint64_t v36 = *i;
    if ((_DWORD)v35 == (_DWORD)v36) {
      break;
    }
    if (byte_1813C6343[v35] != byte_1813C6343[v36])
    {
      int v32 = *(void *)(v32 + 40);
      if (!v32) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }

    int v10 = &qword_18C468B68;
LABEL_25:
    qword_18C465568[21 * i + 2] = v5;
    *int v10 = (uint64_t)v4;
    if ((v3 & 1) == 0) {
      xmmword_18C465410(v2);
    }
  }

  if ((_BYTE)word_18C465384) {
    int v11 = qword_18C4653F0(11LL);
  }
  else {
    int v11 = 0LL;
  }
  qword_18C468B90 = v11;
  sub_1812CD448();
  qword_18C465F40 = (uint64_t)getenv("SQLITE_TMPDIR");
  if (!qword_18C465F48)
  {
    int v12 = calloc(1uLL, 0x400uLL);
    if (!confstr(65537, (char *)v12, 0x400uLL))
    {
      free(v12);
      int v12 = 0LL;
    }

    qword_18C465F48 = (uint64_t)v12;
  }

  qword_18C465F50 = (uint64_t)getenv("TMPDIR");
  if (qword_18C468B98 == -1)
  {
    if ((_BYTE)word_18C465384) {
      goto LABEL_36;
    }
LABEL_38:
    unsigned int v13 = 0LL;
  }

  else
  {
    dispatch_once(&qword_18C468B98, &unk_189B6CDC0);
    if (!(_BYTE)word_18C465384) {
      goto LABEL_38;
    }
LABEL_36:
    unsigned int v13 = qword_18C4653F0(11LL);
  }

  qword_18C468B90 = v13;
  return 0;
}

  if (a1)
  {
    uint64_t v17 = *(void *)a1;
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32)) {
      sub_181303838(v17);
    }
    *(_WORD *)(v17 + 20) = 1;
    sub_181303838(v17);
    *(void *)uint64_t v17 = "RtreeMatchArg";
    *(void *)(v17 + 8) = v9;
    *(_WORD *)(v17 + 20) = 6657;
    *(_BYTE *)(v17 + 23) = 112;
    *(_BYTE *)(v17 + 56) = 0;
    *(void *)(v17 + 48) = sub_1813B8844;
  }

  else
  {
    sub_1812CF36C(97467);
  }

  *a3 = v9;
  return result;
}

    int v5 = qword_18C468B90;
    if (!qword_18C468B90) {
      return v4;
    }
  }

  else
  {
    int v4 = 0LL;
    int v5 = qword_18C468B90;
    if (!qword_18C468B90) {
      return v4;
    }
  }

  uint64_t v38 = *(_DWORD *)(v8 + 52);
  uint64_t v37 = *(_DWORD *)(v8 + 56);
  uint64_t v39 = (v37 + 1);
  v37 += 2;
  *(_DWORD *)(v10 + 132) = v39;
  *(_DWORD *)(v10 + 136) = v37;
  *(_DWORD *)(v8 + 52) = v38 + 1;
  *(_DWORD *)(v8 + 56) = v37;
  *(_DWORD *)(v10 + 100) = v38;
  uint64_t v40 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v40)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 71LL, 1LL, v39, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v40 + 1;
    int v41 = *(void *)(v11 + 136) + 40LL * v40;
    *(void *)int v41 = 0x100000047LL;
    *(_DWORD *)(v41 + 8) = v39;
    *(void *)(v41 + 12) = 0LL;
    *(void *)(v41 + 28) = 0LL;
    *(void *)(v41 + 20) = 0LL;
    *(_DWORD *)(v41 + 36) = 0;
  }

  uint64_t v69 = *(unsigned int *)(v10 + 136);
  uint64_t v70 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v70)
  {
    uint64_t result = (uint64_t *)sub_18131044C(v11, 71LL, 0LL, v69, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v70 + 1;
    uint64_t v71 = *(void *)(v11 + 136) + 40LL * v70;
    *(void *)uint64_t v71 = 71LL;
    *(_DWORD *)(v71 + 8) = v69;
    *(void *)(v71 + 12) = 0LL;
    *(void *)(v71 + 28) = 0LL;
    *(void *)(v71 + 20) = 0LL;
    *(_DWORD *)(v71 + 36) = 0;
  }

  uint64_t v72 = *(unsigned int *)(v10 + 100);
  uint64_t v73 = *(unsigned int *)(v10 + 88);
  int v74 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v74) {
    return (uint64_t *)sub_18131044C(v11, 115LL, v72, v73, 0LL, a6, a7, a8);
  }
  *(_DWORD *)(v11 + 144) = v74 + 1;
  uint64_t v75 = *(void *)(v11 + 136) + 40LL * v74;
  *(_DWORD *)uint64_t v75 = 115;
  *(_DWORD *)(v75 + 4) = v72;
  *(_DWORD *)(v75 + 8) = v73;
  *(void *)(v75 + 12) = 0LL;
  *(void *)(v75 + 28) = 0LL;
  *(void *)(v75 + 20) = 0LL;
  *(_DWORD *)(v75 + 36) = 0;
  return result;
}

    uint64_t v17 = (unsigned __int8 *)sub_18129C928(v12, a2, 0LL, 0LL);
    if (v17 && *v17 == 168) {
      *uint64_t v17 = -84;
    }
    unint64_t v18 = (int *)v3[2];
    if (v18)
    {
      uint64_t v19 = *v18;
      if (v18[1] > *v18)
      {
        *unint64_t v18 = v19 + 1;
        uint64_t v20 = &v18[6 * v19];
        *((void *)v20 + 2) = 0LL;
        *((void *)v20 + 3) = 0LL;
        *((void *)v20 + 1) = v17;
        goto LABEL_33;
      }

      uint64_t v21 = sub_18133E1F4(*v4, v18, v17);
    }

    else
    {
      uint64_t v21 = (int *)sub_18133E190((void *)*v4, v17);
    }

    unint64_t v18 = v21;
LABEL_33:
    v3[2] = v18;
    LODWORD(v14) = -1;
    uint64_t v22 = 1;
    if (!v18) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }

  while (*((void *)a2 + 9) != v11)
  {
    int v11 = *(void *)(v11 + 64);
    if (!v11) {
      goto LABEL_17;
    }
  }

  return 1LL;
}

    unint64_t v18 = "table %s may not be modified";
    goto LABEL_26;
  }

  char v15 = *(_DWORD *)(a2 + 48);
  if ((v15 & 0x1001) != 0)
  {
    uint64_t v16 = *(void *)a1;
    if ((v15 & 1) != 0)
    {
      if ((*(void *)(*(void *)a1 + 48LL) & 0x10000001LL) != 1 && !*(_BYTE *)(a1 + 30)) {
        goto LABEL_24;
      }
    }

    else if ((*(void *)(*(void *)a1 + 48LL) & 0x10000000) != 0 {
           && !*(void *)(v16 + 592)
    }
           && !*(_DWORD *)(v16 + 220)
           && (*(int *)(v16 + 564) < 1 || *(void *)(v16 + 600)))
    {
      goto LABEL_24;
    }
  }

        int v11 = 0;
        goto LABEL_25;
      }
    }

    sub_1812CF36C(91138);
    goto LABEL_24;
  }

  uint64_t result = sub_1812D8A04(v4, 48);
  uint64_t v7 = result;
  if (result) {
    goto LABEL_13;
  }
  return result;
}

  sub_1812CF36C(97431);
LABEL_25:
  if (!*(_BYTE *)(v7 + 50)) {
    return;
  }
  int v11 = *(_DWORD *)(v7 + 56);
  if (v11 >= 2)
  {
    *(_DWORD *)(v7 + 56) = v11 - 1;
    return;
  }

  sub_181359E08(v7);
LABEL_8:
  uint64_t v8 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_13:
    (*v8)(v7);
    return;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v8 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_13;
  }

      if ((*(_BYTE *)(v16 + 1) & 0x10) == 0 || !*(_BYTE *)(a1 + 54)) {
        break;
      }
      uint64_t v16 = v10 + 16LL * *(int *)(v16 + 8);
      char v15 = 1;
    }

    LODWORD(v19) = __s2[2];
    if ((_DWORD)v19 == 45)
    {
      uint64_t v19 = __s2[3];
      uint64_t v20 = 0;
      char v15 = 3;
      do
      {
        uint64_t v20 = 10 * v20 + (char)v19 - 48;
        uint64_t v19 = __s2[++v15];
      }

      while ((unint64_t)(v19 - 58) > 0xFFFFFFFFFFFFFFF5LL);
      uint64_t v21 = v14 >= v20;
      v14 -= v20;
      if (!v21) {
        return 0LL;
      }
    }

    else
    {
      char v15 = 2;
    }

    if ((_DWORD)v19 != 93) {
      goto LABEL_106;
    }
LABEL_46:
    __s2 += v15 + 1;
    LODWORD(v25) = v8;
    size_t v26 = *(_DWORD *)(v5 + 4);
    if (!v26) {
      goto LABEL_62;
    }
    while (1)
    {
      uint64_t v27 = 1;
      while (1)
      {
        if (v14)
        {
          if ((*(_BYTE *)(v5 + 16LL * v27 + 1) & 4) == 0 || !*(_BYTE *)(a1 + 54)) {
            --v14;
          }
          goto LABEL_57;
        }

        if ((*(_BYTE *)(v5 + 16LL * v27 + 1) & 4) == 0) {
          break;
        }
        uint64_t v14 = *(unsigned __int8 *)(a1 + 54);
        if (!*(_BYTE *)(a1 + 54)) {
          goto LABEL_60;
        }
        uint64_t v14 = 0;
LABEL_57:
        else {
          int v28 = 1;
        }
        v27 += v28;
        if (v27 > v26) {
          goto LABEL_63;
        }
      }

      uint64_t v14 = 0;
LABEL_60:
      uint64_t v29 = 0;
      if ((*(_BYTE *)(v5 + 1) & 0x10) == 0)
      {
LABEL_67:
        if ((v29 & 1) != 0)
        {
          int v5 = 0LL;
          if (a4)
          {
            if (!v14)
            {
              uint64_t v51 = sub_18135A0F0((unsigned int *)a1, 7, 1, 0LL);
              uint64_t v47 = sub_18135A7CC((unsigned int *)a1, __s2, a4);
              int v5 = 0LL;
              if (!*(_BYTE *)(a1 + 51))
              {
                if (v47)
                {
                  uint64_t v49 = *(void *)(a1 + 8) + 16LL * v25;
                  *(_DWORD *)(v49 + 8) = v51;
                  uint64_t v50 = *(_BYTE *)(v49 + 1) | 0x10;
                  goto LABEL_104;
                }
              }
            }
          }

          return v5;
        }

        LODWORD(v8) = v27 + v25;
        goto LABEL_5;
      }

      while (1)
      {
        if (!*(_BYTE *)(a1 + 54)) {
          goto LABEL_67;
        }
        uint64_t v25 = *(unsigned int *)(v5 + 8);
        int v5 = v10 + 16 * v25;
        size_t v26 = *(_DWORD *)(v5 + 4);
        if (v26) {
          break;
        }
LABEL_62:
        uint64_t v27 = 1;
LABEL_63:
        uint64_t v29 = 1;
        if ((*(_BYTE *)(v5 + 1) & 0x10) == 0) {
          goto LABEL_67;
        }
      }
    }
  }

  if (*(_BYTE *)v5 != 8) {
    return 0LL;
  }
  uint64_t v31 = __s2 + 1;
  uint64_t v30 = __s2[1];
  if (v30 == 34)
  {
    int v32 = 0;
    unsigned int v33 = __s2 + 2;
    while (1)
    {
      if (!v31[v32 + 1]) {
        goto LABEL_99;
      }
      if (v31[v32 + 1] == 34) {
        break;
      }
      ++v32;
    }

    uint64_t v54 = v32 + 2;
  }

  else
  {
    int v32 = 0;
    if (__s2[1])
    {
      do
      {
        if (v30 == 46) {
          break;
        }
        if (v30 == 91) {
          break;
        }
        uint64_t v30 = v31[++v32];
      }

      while (v31[v32]);
    }

    if (!v32)
    {
LABEL_99:
      int v5 = 0LL;
      *a5 = v31;
      return v5;
    }

    unsigned int v33 = __s2 + 1;
    uint64_t v54 = v32;
  }

  unsigned int v34 = v32;
  uint64_t v35 = v32 + 2;
  uint64_t v36 = *(_DWORD *)(v5 + 4);
  if (v36)
  {
LABEL_83:
    for (int j = 1; j <= v36; int j = v38 + v44)
    {
      uint64_t v39 = j;
      uint64_t v40 = v5 + 16LL * j;
      int v41 = *(_BYTE *)(v40 + 1);
      uint64_t v42 = *(_DWORD *)(v40 + 4);
      if ((v41 & 1) != 0)
      {
        if (v42 != (_DWORD)v34) {
          goto LABEL_92;
        }
        uint64_t v43 = *(const char **)(v5 + 16 * v39 + 8);
      }

      else
      {
        if (v42 != v35) {
          goto LABEL_92;
        }
        uint64_t v43 = (const char *)(*(void *)(v5 + 16 * v39 + 8) + 1LL);
      }

      if (!strncmp(v43, v33, v34))
      {
        LODWORD(v8) = v8 + v39 + 1;
        __s2 = &v31[v54];
        goto LABEL_5;
      }

    unsigned int v33 = v5[1];
    unsigned int v34 = v5[3];
    v5[3] = v34 + 1;
    *(_BYTE *)(v33 + v34) = 34;
  }

  return result;
}

          int v10 = "unopened";
LABEL_31:
          sqlite3_log(21, "API call with %s database connection pointer", v10);
          return sub_1812CF36C(161272);
        }

        uint64_t result = sub_18126D760(a1, "fts5vocab", (uint64_t)&unk_189B6F478, v4, 0LL);
        if (!(_DWORD)result)
        {
          uint64_t result = sub_1812E0AEC(a1, "fts5", 1LL, 1, v4, (uint64_t)sub_1813864C8, 0LL, 0LL, 0LL, 0LL, 0LL);
          if (!(_DWORD)result) {
            return sub_1812E0AEC( a1,  "fts5_source_id",  0LL,  2099201,  v4,  (uint64_t)sub_18138656C,  0LL,  0LL,  0LL,  0LL,  0LL);
          }
        }
      }
    }
  }

  return result;
}

  int v9 = *(void *)(v1 + 80);
  if (!v9) {
    goto LABEL_31;
  }
  int v10 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_30;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
  --qword_18C468B10;
  off_18C4653A8(v9);
  int v9 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v10 = &xmmword_18C465410;
LABEL_30:
    (*v10)(v9);
  }

          *int v9 = 0LL;
          v9 += 5;
          ++v8;
        }

        while (v8 < *((int *)v3 + 20));
      }

    *(void *)(v8 + 120) = 0LL;
    int v10 = *(_DWORD **)(v8 + 24);
    goto LABEL_25;
  }

  uint64_t v117 = 1;
  if (!v12[1])
  {
LABEL_52:
    v12[1] = 1;
    unsigned int v33 = v12 + 28;
    goto LABEL_57;
  }

  uint64_t v14 = sqlite3_mprintf("no such cursor: %lld", *(void *)&v9);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    uint64_t result = sub_181269368(*(void *)a1, v14, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v14) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1812CF36C(97407);
    if (!v14) {
      return result;
    }
  }

  char v15 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v15)(v14);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v14);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v14);
  uint64_t v14 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    char v15 = (uint64_t (**)(char *))&xmmword_18C465410;
    return (*v15)(v14);
  }

  return result;
}

    unint64_t v18 = word_1813CC4B4[HIWORD(v14)];
    uint64_t v19 = word_1813CC4B4[HIWORD(v14) + 1];
    if (v19 <= v18) {
      goto LABEL_38;
    }
    uint64_t v20 = -1;
    do
    {
      uint64_t v21 = (v18 + v19) >> 1;
      uint64_t v22 = word_1813CC4D6[v21];
      else {
        unint64_t v18 = v21 + 1;
      }
    }

    while ((int)v19 > (int)v18);
    if ((v20 & 0x80000000) != 0
      || (uint64_t v23 = v20,
          int v24 = word_1813CC4D6[v23],
          uint64_t v25 = (unsigned __int16)word_1813CB6EA[v23],
          (unsigned __int16)v14 >= v24 + (v25 >> 5)))
    {
LABEL_38:
      size_t v26 = 0;
      goto LABEL_39;
    }

    size_t v26 = v25 & 0x1F;
    if (v26 == 30)
    {
      if ((((_BYTE)v14 - (_BYTE)v24) & 1) != 0) {
        size_t v26 = 5;
      }
      else {
        size_t v26 = 9;
      }
    }

          if (!*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
          {
            *int v9 = 0LL;
            uint64_t v20 = (sqlite3_stmt *)*((void *)v10 + 3);
            uint64_t v21 = (void *)*((void *)v10 + 4);
            uint64_t v22 = v21[3];
            if (v22) {
              xmmword_18C465400(v22);
            }
            sub_1812F20DC(v21, v10);
            uint64_t v23 = v21[3];
            if (v23) {
              xmmword_18C465410(v23);
            }
            sqlite3_finalize(v20);
          }

          goto LABEL_31;
        }

        int v24 = *(_DWORD *)(a1 + 32);
        if (!v10)
        {
          if (!v24) {
            goto LABEL_44;
          }
          goto LABEL_52;
        }

      dword_18C5506B4 = v3;
      dword_18C5506B8 = (int)v4;
      return;
    }

    if (!strncasecmp("stderr", v4, 6uLL))
    {
      LODWORD(v4) = 1;
      goto LABEL_23;
    }

    int v5 = strncasecmp("syslog", v4, 6uLL) == 0;
    LODWORD(v4) = 2 * v5;
  }

  else
  {
    int v5 = 0;
  }

  if (v2 || v5) {
    goto LABEL_20;
  }
}

    int v62 = 7;
    goto LABEL_25;
  }

  uint64_t v19 = *(void *)a1;
LABEL_5:
  *(_DWORD *)(a1 + 8) = v16 + 1;
  *(_BYTE *)(v19 + v18) = v15;
LABEL_25:
  size_t v26 = 0LL;
  uint64_t v27 = 1;
  while (1)
  {
    if (!a3)
    {
      uint64_t v30 = 0LL;
      goto LABEL_35;
    }

    int v28 = *(void *)(*(void *)a3 + 24LL);
    if (!v28) {
      break;
    }
    xmmword_18C465400(v28);
    uint64_t v29 = *(void *)(*(void *)a3 + 24LL);
    uint64_t v30 = a3[130];
    if (v29)
    {
      xmmword_18C465410(v29);
      if (v26 >= v30) {
        goto LABEL_105;
      }
      goto LABEL_36;
    }

LABEL_40:
  *(_OWORD *)(a1 + 264) = *v13;
  if (!v20) {
    return;
  }
LABEL_41:
  if (v11) {
    uint64_t v35 = "view";
  }
  else {
    uint64_t v35 = "table";
  }
  if (*(_BYTE *)(v16 + 196) == 1) {
    int v41 = 1;
  }
  else {
    int v41 = v12;
  }
  uint64_t v42 = *(void *)(*(void *)(v16 + 32) + 32LL * v17);
  if (v41 == 1) {
    uint64_t v43 = "sqlite_temp_master";
  }
  else {
    uint64_t v43 = "sqlite_master";
  }
  uint64_t v44 = *(void *)a1;
  uint64_t v45 = *(uint64_t (**)(void, uint64_t, const char *, void, void, void))(*(void *)a1 + 528LL);
  if (v45 && !*(_BYTE *)(v44 + 197) && !*(_BYTE *)(a1 + 302))
  {
    int v112 = v45( *(void *)(v44 + 536),  18LL,  v43,  0LL,  *(void *)(*(void *)(v16 + 32) + 32LL * v17),  *(void *)(a1 + 368));
    if (v112 == 1)
    {
LABEL_92:
      int v113 = 23;
      uint64_t v114 = "not authorized";
LABEL_100:
      sub_1812DC47C(a1, v114, (uint64_t)v43, v36, v37, v38, v39, v40, v139);
      *(_DWORD *)(a1 + 24) = v113;
      goto LABEL_45;
    }

    if ((v112 & 0xFFFFFFFD) != 0) {
      goto LABEL_99;
    }
    if (v112) {
      goto LABEL_45;
    }
  }

  if (v141) {
    goto LABEL_56;
  }
  uint64_t v85 = *(void *)a1;
  uint64_t v86 = *(uint64_t (**)(void, void, char *, void, uint64_t, void))(*(void *)a1 + 528LL);
  if (!v86 || *(_BYTE *)(v85 + 197) || *(_BYTE *)(a1 + 302)) {
    goto LABEL_56;
  }
  int v87 = v86(*(void *)(v85 + 536), byte_1813CA31E[2 * v11 + v41], v20, 0LL, v42, *(void *)(a1 + 368));
  if (v87 == 1) {
    goto LABEL_92;
  }
  if ((v87 & 0xFFFFFFFD) != 0)
  {
LABEL_99:
    int v113 = 1;
    uint64_t v114 = "authorizer malfunction";
    goto LABEL_100;
  }

  if (v87)
  {
LABEL_45:
    *(_BYTE *)(a1 + 29) = 1;
    sub_1812F20DC((void *)v16, v20);
    return;
  }

    uint64_t v19 = (int *)v3[5];
    if (v19)
    {
      uint64_t v20 = *v19;
      if (*v19 >= 1)
      {
        uint64_t v21 = v19 + 2;
        do
        {
          uint64_t v23 = *((void *)v21 + 5);
          if (v23)
          {
          }

          if ((*(_WORD *)((_BYTE *)v21 + 61) & 4) != 0)
          {
            int v24 = (_DWORD *)*((void *)v21 + 11);
            if (v24)
            {
              if ((int)*v24 >= 1)
              {
                uint64_t v25 = (uint64_t *)(v24 + 2);
                size_t v26 = *v24 + 1;
                while (!*v25 || !sub_18131C57C((uint64_t)a1, *v25))
                {
                  v25 += 3;
                  if (--v26 <= 1) {
                    goto LABEL_43;
                  }
                }

                return 2LL;
              }
            }
          }

    if (!*(_BYTE *)(v18 + 197)
      && !*(_DWORD *)(a3 + 8)
      && v37
      && *(void *)(v37 + 96) == *(void *)(*(void *)(v18 + 32) + 56LL))
    {
      int v41 = 1;
    }

    uint64_t v47 = v101;
    if (!*(_BYTE *)(v18 + 103))
    {
      uint64_t v54 = *(void *)a1;
      uint64_t v104 = a1;
      uint64_t v55 = (uint64_t *)(*(void *)(v54 + 32) + 32LL * v41);
      uint64_t v111 = *v55;
      uint64_t v56 = v55[3];
      int v112 = "trigger";
      int v113 = v16;
      uint64_t v110 = v41 == 1;
      v105[0] = a1;
      v105[1] = sub_18132467C;
      v105[2] = sub_1813246F8;
      void v105[3] = nullsub_8;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      uint64_t v108 = &v104;
      uint64_t v109 = v56;
      if (!a7) {
        goto LABEL_60;
      }
      uint64_t v120 = 0u;
      uint64_t v121 = 0u;
      uint64_t v118 = 0u;
      uint64_t v119 = 0u;
      uint64_t v115 = 0LL;
      uint64_t v117 = 0u;
      memset(v114, 0, sizeof(v114));
      uint64_t v116 = a7;
      uint64_t v57 = v41;
      uint64_t v58 = sub_181285228(v105, v114);
      int v41 = v57;
      if (!v58)
      {
LABEL_60:
        uint64_t v103 = v41;
        uint64_t v59 = sub_181323B78((_BYTE *)a1, a7, v31, v32, v33, v34, v35, v36);
        if (!v59)
        {
LABEL_63:
          uint64_t v67 = 0LL;
LABEL_64:
          if (*(_BYTE *)(v18 + 196) == 1) {
            *(_BYTE *)(v18 + 198) |= 1u;
          }
          if (!v67) {
            goto LABEL_46;
          }
LABEL_71:
          sub_1812F20DC((void *)v18, v67);
          goto LABEL_46;
        }

        uint64_t v66 = v59;
        if (*(_BYTE *)(v59 + 63) == 1)
        {
          sub_1812DC47C(a1, "cannot create triggers on virtual tables", v60, v61, v62, v63, v64, v65, v99);
          goto LABEL_63;
        }

        uint64_t v68 = sub_1813146DC(v18, v16);
        if (!v68) {
          goto LABEL_46;
        }
        uint64_t v100 = (unsigned __int8 *)v68;
        if (sub_18131E81C((_BYTE *)a1, v68, "trigger", *(char **)v66, v69, v70, v71, v72))
        {
LABEL_70:
          uint64_t v67 = v100;
          goto LABEL_71;
        }

        if (*(unsigned __int8 *)(a1 + 302) <= 1u
          && sub_18130D648(*(void *)(*(void *)(v18 + 32) + 32LL * v103 + 24) + 56LL, v100))
        {
          if (a10)
          {
            sub_18128BBA8(a1, v103);
            goto LABEL_70;
          }

          uint64_t v99 = v16;
          uint64_t v81 = "trigger %T already exists";
        }

        else
        {
          if (sqlite3_strnicmp(*(const char **)v66, "sqlite_", 7))
          {
            uint64_t v79 = *(unsigned __int8 *)(v66 + 63);
            if (v14 == 65 || v79 != 2)
            {
              if (v14 != 65 || v79 == 2)
              {
                int v87 = *(void *)(v66 + 96);
                int v88 = *(void *)(v18 + 32);
                if (v87)
                {
                  uint64_t v89 = (uint64_t *)(v88 + 24);
                  uint64_t v90 = -1;
                  do
                  {
                    uint64_t v91 = *v89;
                    v89 += 4;
                    ++v90;
                  }

                  while (v91 != v87);
                }

                else
                {
                  uint64_t v90 = -32768;
                }

                uint64_t v92 = *(void *)(v88 + 32LL * v90);
                uint64_t v93 = v92;
                if (a9) {
                  uint64_t v93 = *(void *)(v88 + 32);
                }
                uint64_t v94 = v90 != 1 && a9 == 0;
                uint64_t v95 = v94 ? 7LL : 5LL;
                if (!sub_18131E794(a1, v95, (uint64_t)v100, *(void *)v66, v93))
                {
                  uint64_t v96 = v90 == 1 ? "sqlite_temp_master" : "sqlite_master";
                  uint64_t v97 = sub_18131E794(a1, 18LL, (uint64_t)v96, 0LL, v92);
                  uint64_t v47 = v101;
                  if (!v97)
                  {
LABEL_130:
                    uint64_t v82 = sub_181268E34(v18, 0x48uLL);
                    if (v82)
                    {
                      uint64_t v53 = (uint64_t)v82;
                      *uint64_t v82 = v100;
                      uint64_t v83 = sub_18129E1F8(v18, *(char **)(a7 + 24));
                      uint64_t v84 = v14 == 33 || v14 == 65;
                      *(void *)(v53 + 8) = v83;
                      *(void *)(v53 + 40) = *(void *)(*(void *)(v18 + 32) + 32LL * v103 + 24);
                      *(void *)(v53 + 48) = *(void *)(v66 + 96);
                      *(_BYTE *)(v53 + 16) = v47;
                      if (v84) {
                        uint64_t v85 = 1;
                      }
                      else {
                        uint64_t v85 = 2;
                      }
                      *(_BYTE *)(v53 + 17) = v85;
                      if (*(unsigned __int8 *)(a1 + 302) < 2u)
                      {
                        if (v10) {
                          uint64_t v98 = sub_18129C928(v18, v10, 1LL, 0LL);
                        }
                        else {
                          uint64_t v98 = 0LL;
                        }
                      }

                      else
                      {
                        uint64_t v86 = *(void **)(a1 + 408);
                        if (v86)
                        {
                          while (*v86 != *(void *)(a7 + 24))
                          {
                            uint64_t v86 = (void *)v86[3];
                            if (!v86) {
                              goto LABEL_125;
                            }
                          }

                          *uint64_t v86 = v83;
                        }

    uint64_t v17 = *(void **)(a1 + 176);
    if (v17) {
      sub_1813014B0(v2, v17);
    }
    unint64_t v18 = *(void **)(a1 + 344);
    if (v18) {
      sub_1813014B0(v2, v18);
    }
  }

  uint64_t v19 = *(void **)(a1 + 136);
  if (v19)
  {
    uint64_t v20 = 40LL * *(int *)(a1 + 144) - 40;
    do
    {
      uint64_t v21 = *((char *)v19 + v20 + 1);
      if (v21 <= -6) {
        sub_18127ABFC(v2, v21, *(void *)((char *)v19 + v20 + 16));
      }
      v20 -= 40LL;
    }

    while (v20 != -40);
    sub_1813014B0(v2, v19);
  }

  uint64_t v22 = *(void **)(a1 + 320);
  if (v22) {
    sub_1813014B0(v2, v22);
  }
  uint64_t v23 = *(void **)(a1 + 328);
  if (v23) {
    sub_1812F20DC(v2, v23);
  }
  int v24 = *(void **)(a1 + 336);
  if (v24)
  {
    do
    {
      uint64_t v25 = (void *)*v24;
      sub_1812F20DC(v2, v24);
      int v24 = v25;
    }

    while (v25);
  }

  size_t v26 = *(_DWORD *)(a1 + 392);
  if (v26 >= 1)
  {
    uint64_t v27 = 0LL;
    int v28 = 48LL;
    do
    {
      uint64_t v29 = *(void **)(*(void *)(a1 + 400) + v28);
      if (v29)
      {
        sub_1812F20DC(v2, v29);
        size_t v26 = *(_DWORD *)(a1 + 392);
      }

      ++v27;
      v28 += 56LL;
    }

    while (v27 < v26);
  }

  uint64_t v30 = *(void **)(a1 + 400);
  if (v30) {
    sub_1812F20DC(v2, v30);
  }
  if (!v2[102])
  {
    **(void **)(a1 + 8) = *(void *)(a1 + 16);
    uint64_t v31 = *(void *)(a1 + 16);
    if (v31) {
      *(void *)(v31 + 8) = *(void *)(a1 + 8);
    }
  }

  return sub_1813014B0(v2, (void *)a1);
}

  uint64_t v27 = (unsigned __int8 *)sqlite3_mprintf("ATTACH x AS %Q", zSchema);
  if (!v27)
  {
    size_t v26 = 7;
    goto LABEL_62;
  }

  uint64_t v29 = v27;
  size_t v26 = sub_18126DFE0((uint64_t)db, v27, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v28);
  uint64_t v30 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_46;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v29);
  --qword_18C468B10;
  off_18C4653A8(v29);
  uint64_t v29 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v30 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_46:
    (*v30)(v29);
  }

  if (v26) {
    goto LABEL_62;
  }
  *((_BYTE *)db + 196) = v16;
  *((_BYTE *)db + 198) |= 4u;
  uint64_t v31 = sqlite3_step(pStmt);
  *((_BYTE *)db + 198) &= ~4u;
  if (v31 != 101) {
    goto LABEL_39;
  }
  uint64_t v40 = 0LL;
  if (sqlite3_file_control(db, zSchema, 7, &v40) || *(_UNKNOWN **)v40 != &unk_189B6D390) {
    goto LABEL_39;
  }
  int v32 = *(void *)(v40 + 8);
  unsigned int v33 = *(void *)(v32 + 32);
  if (v33) {
    xmmword_18C465400(v33);
  }
  if (*(void *)(v32 + 64)) {
    uint64_t v40 = 0LL;
  }
  unsigned int v34 = *(void *)(v32 + 32);
  if (v34) {
    xmmword_18C465410(v34);
  }
  if (!v40) {
    goto LABEL_39;
  }
  size_t v26 = 0;
  uint64_t v35 = *(void *)(v40 + 8);
  *(void *)(v35 + 24) = pData;
  *(void *)uint64_t v35 = szDb;
  *(void *)(v35 + 8) = szBuf;
  uint64_t v36 = qword_18C465518;
  if (qword_18C465518 <= szBuf) {
    uint64_t v36 = szBuf;
  }
  *(void *)(v35 + 16) = v36;
  *(_DWORD *)(v35 + 44) = mFlags;
  pData = 0LL;
LABEL_62:
  sqlite3_finalize(pStmt);
  if ((mFlags & 1) != 0 && pData)
  {
    uint64_t v37 = (void (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(pData);
      --qword_18C468B10;
      off_18C4653A8(pData);
      pData = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_70;
      }
      uint64_t v37 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v37)(pData);
  }

  uint64_t v6 = 0;
  *a3 = v19;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(void *)(a1 + 416)) {
    goto LABEL_47;
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_48:
  if (!*(_BYTE *)(a1 + 103)) {
    return 0LL;
  }
  return sub_1813037C4(a1, v6);
}

  uint64_t v30 = 1;
  *((_DWORD *)a1 + 20) = 1;
LABEL_87:
  sub_1812FA264((uint64_t)a1, v30);
  uint64_t v50 = *((void *)a1 + 3);
  if (v50) {
LABEL_88:
  }
    xmmword_18C465410(v50);
  return v30;
}

  uint64_t v25 = *((void *)db + 3);
  if (v25) {
    xmmword_18C465410(v25);
  }
  return v24;
}

                if (++v20 >= v18) {
                  goto LABEL_49;
                }
              }

              if (v21 == 47) {
                LOBYTE(v21) = 95;
              }
              v57[v17++] = v21;
              goto LABEL_40;
            }

  if ((_DWORD)result) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v18;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = &v14[v15];
    while ((byte_1813C6558[*v21] & 1) != 0)
    {
      v21 += v6;
      if (v21 >= v9)
      {
        uint64_t result = 0LL;
        goto LABEL_49;
      }
    }

    uint64_t result = 1LL;
  }

  char v15 = *(void (**)(void))(*(void *)a1 + 48LL);
  if (v15) {
    v15();
  }
  if (v12 != 1)
  {
LABEL_49:
    if (v12) {
      return *(unsigned __int8 *)(a1 + 9);
    }
LABEL_50:
    sub_1812A1948(a1);
    return *(unsigned __int8 *)(a1 + 9);
  }

  uint64_t v16 = *(void *)(a1 + 72);
  if (*(void *)v16)
  {
    if (!*(_BYTE *)(a1 + 17)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 64LL))(v16, 1LL);
    }
    if (*(_BYTE *)(a1 + 22) != 5) {
      *(_BYTE *)(a1 + 22) = 1;
    }
  }

  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  return *(unsigned __int8 *)(a1 + 9);
}

  uint64_t v22 = (void *)a2[1];
  if (v22)
  {
    uint64_t v23 = *((__int16 *)a2 + 27);
    if (v23 >= 1)
    {
      int v24 = 0;
      do
      {
        if (*v22)
        {
          sub_1812F20DC(a1, (void *)*v22);
          LOWORD(v23) = *((_WORD *)a2 + 27);
        }

        ++v24;
        v22 += 2;
      }

      while (v24 < (__int16)v23);
      uint64_t v22 = (void *)a2[1];
    }

    sub_1813014B0(a1, v22);
    if (!*((_BYTE *)a2 + 63))
    {
      uint64_t v25 = (void *)a2[10];
      if (v25) {
        sub_181311F48(a1, v25);
      }
    }

    if (!a1[102])
    {
      a2[1] = 0LL;
      *((_WORD *)a2 + 27) = 0;
      if (!*((_BYTE *)a2 + 63)) {
        a2[10] = 0LL;
      }
    }
  }

  if (*a2) {
    sub_1812F20DC(a1, (void *)*a2);
  }
  size_t v26 = (void *)a2[3];
  if (v26) {
    sub_1812F20DC(a1, v26);
  }
  uint64_t v27 = (void *)a2[4];
  if (v27) {
    sub_181311F48(a1, v27);
  }
  return sub_1812F20DC(a1, a2);
}

  uint64_t v30 = *(_WORD *)(i + 99);
  *(_WORD *)(i + 99) = v30 | 0x20;
  if ((*(_BYTE *)(v4 + 198) & 2) == 0) {
    *(_WORD *)(i + 99) = v30 | 0x28;
  }
  uint64_t v31 = *(unsigned __int16 *)(i + 94);
  *(_WORD *)(i + 96) = v31;
  if (v5)
  {
    int v32 = *(_DWORD *)(i + 88);
    if (v32)
    {
      if (*(_BYTE *)(*v5 + 103LL)) {
        unsigned int v33 = &byte_18C550680;
      }
      else {
        unsigned int v33 = (char *)(v5[17] + 40LL * v32);
      }
      _BYTE *v33 = 9;
    }
  }

  *(_DWORD *)(i + 88) = *(_DWORD *)(a2 + 40);
  for (uint64_t k = *(void *)(a2 + 16); k; uint64_t k = *(void *)(k + 40))
  {
    if ((*(_WORD *)(k + 99) & 3) != 2)
    {
      if (!(_DWORD)v31) {
        goto LABEL_58;
      }
      uint64_t v37 = 0LL;
      uint64_t v38 = 0;
      do
      {
        if (*(_WORD *)(k + 94))
        {
          uint64_t v39 = 0LL;
          do
          {
            if (*(unsigned __int16 *)(*(void *)(k + 8) + 2 * v39) == *(unsigned __int16 *)(*(void *)(i + 8)
                                                                                            + 2 * v37))
            {
              uint64_t v40 = *(_BYTE **)(*(void *)(k + 64) + 8 * v39);
              for (uint64_t m = *(unsigned __int8 **)(*(void *)(i + 64) + 8 * v37); ; ++m)
              {
                uint64_t v42 = *v40;
                uint64_t v43 = *m;
                if ((_DWORD)v42 == (_DWORD)v43)
                {
                  if (!*v40) {
                    goto LABEL_64;
                  }
                }

                else if (byte_1813C6343[v42] != byte_1813C6343[v43])
                {
                  break;
                }

                ++v40;
              }
            }

            ++v39;
          }

          while (v39 != *(unsigned __int16 *)(k + 94));
        }

        ++v38;
LABEL_64:
        ++v37;
      }

      while (v37 != v31);
      if (v38)
      {
        uint64_t result = sub_18132045C(v4, k, v38 + *(unsigned __int16 *)(k + 94));
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v44 = 0LL;
        uint64_t v45 = *(unsigned __int16 *)(k + 94);
        uint64_t v46 = v45;
        while (1)
        {
          uint64_t v47 = *(unsigned __int16 *)(*(void *)(i + 8) + 2 * v44);
          uint64_t v48 = *(void *)(k + 8);
          if (v45)
          {
            for (uint64_t n = 0LL; n != v45; ++n)
            {
              if (*(unsigned __int16 *)(v48 + 2 * n) == v47)
              {
                uint64_t v50 = *(_BYTE **)(*(void *)(k + 64) + 8 * n);
                for (iint i = *(unsigned __int8 **)(*(void *)(i + 64) + 8 * v44); ; ++ii)
                {
                  uint64_t v52 = *v50;
                  uint64_t v53 = *ii;
                  if ((_DWORD)v52 == (_DWORD)v53)
                  {
                    if (!*v50) {
                      goto LABEL_91;
                    }
                  }

                  else if (byte_1813C6343[v52] != byte_1813C6343[v53])
                  {
                    break;
                  }

                  ++v50;
                }
              }
            }
          }

          *(_WORD *)(v48 + 2LL * v46) = v47;
          *(void *)(*(void *)(k + 64) + 8LL * v46) = *(void *)(*(void *)(i + 64) + 8 * v44);
          if (*(_BYTE *)(*(void *)(i + 56) + v44)) {
            *(_WORD *)(k + 99) |= 0x200u;
          }
          ++v46;
LABEL_91:
          if (++v44 == v31) {
            break;
          }
          uint64_t v45 = *(unsigned __int16 *)(k + 94);
        }
      }

      else
      {
LABEL_58:
        *(_WORD *)(k + 96) = *(_WORD *)(k + 94);
      }
    }
  }

  if (*(__int16 *)(a2 + 54) < 1)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v54 = 0LL;
    uint64_t v55 = 0;
    do
    {
      uint64_t v56 = *(__int16 **)(i + 8);
      uint64_t v57 = v31;
      while (1)
      {
        uint64_t v58 = __OFSUB__(v57--, 1);
        if (v57 < 0 != v58) {
          break;
        }
        uint64_t v59 = *v56++;
        if (v54 == v59) {
          goto LABEL_97;
        }
      }

      if ((*(_WORD *)(*(void *)(a2 + 8) + 16 * v54 + 14) & 0x20) == 0) {
        ++v55;
      }
LABEL_97:
      ++v54;
    }

    while (v54 != *(unsigned __int16 *)(a2 + 54));
  }

  uint64_t result = sub_18132045C(v4, i, v55 + (int)v31);
  if (!(_DWORD)result)
  {
    uint64_t v60 = *(__int16 *)(a2 + 54);
    if (v60 >= 1)
    {
      uint64_t v61 = 0LL;
      do
      {
        int v62 = *(__int16 **)(i + 8);
        uint64_t v63 = v31;
        while (1)
        {
          uint64_t v58 = __OFSUB__(v63--, 1);
          if (v63 < 0 != v58) {
            break;
          }
          uint64_t v64 = *v62++;
          if (v61 == v64) {
            goto LABEL_106;
          }
        }

        if ((*(_WORD *)(*(void *)(a2 + 8) + 16 * v61 + 14) & 0x20) == 0)
        {
          *(_WORD *)(*(void *)(i + 8) + 2LL * (int)v31) = v61;
          *(void *)(*(void *)(i + 64) + 8LL * (int)v31) = "BINARY";
          LODWORD(v31) = v31 + 1;
          LOWORD(v60) = *(_WORD *)(a2 + 54);
        }

          ;
        }
      }
    }
  }

  if (v5)
  {
    if (*(void **)(v4 + 400) == v5) {
      *(void *)(v4 + 400) = v5[1];
    }
  }

  return result;
}

  int v28 = *(unsigned __int16 *)(v8 + 20);
  if ((~v28 & 0x202) != 0 || *(_BYTE *)(v8 + 22) != 1)
  {
    if ((v28 & 1) != 0)
    {
      uint64_t v29 = 0LL;
      if ((v28 & 2) == 0) {
        goto LABEL_60;
      }
    }

    else
    {
      uint64_t v29 = (unsigned __int8 *)sub_181303998((int *)v8, 1);
      LOWORD(v28) = *(_WORD *)(v8 + 20);
      if ((v28 & 2) == 0) {
        goto LABEL_60;
      }
    }
  }

  else
  {
    uint64_t v29 = *(unsigned __int8 **)(v8 + 8);
    if ((v28 & 2) == 0) {
      goto LABEL_60;
    }
  }

  if (*(_BYTE *)(v8 + 22) == 1)
  {
    unsigned int v34 = *(_DWORD *)(v8 + 16);
    goto LABEL_92;
  }

    int v11 = (char *)v64;
    int v9 = 0;
    if (v29 >= *(_DWORD *)(v6 + 48)) {
      goto LABEL_11;
    }
  }

  int v62 = v29;
  unsigned int v34 = v27;
  uint64_t v35 = v10;
  uint64_t v36 = *(uint64_t **)(v6 + 72);
  uint64_t v37 = *(unsigned int *)(v4 + 32);
  uint64_t v38 = *v36;
  __src = 0LL;
  uint64_t v39 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *, uint64_t, void **))(v38 + 24))( v36,  v32,  v33,  &__src);
  if (v39)
  {
    int v9 = v39;
    goto LABEL_108;
  }

  const char *__src = v36;
  uint64_t v40 = __src;
  if (*(int *)v38 >= 1)
  {
    int v41 = (*(uint64_t (**)(void *, uint64_t))(v38 + 48))(__src, v37);
    uint64_t v40 = __src;
    uint64_t v29 = v62;
    if (!v41)
    {
      uint64_t v6 = v61;
      goto LABEL_48;
    }

    int v9 = v41;
    (*(void (**)(void *))(v38 + 32))(__src);
LABEL_108:
    LODWORD(v10) = v35;
    uint64_t v6 = v61;
    int v11 = (char *)v64;
    goto LABEL_11;
  }

  uint64_t v6 = v61;
  uint64_t v29 = v62;
LABEL_48:
  uint64_t v42 = (*(uint64_t (**)(void *, int *, char *, uint64_t *, char *, uint64_t *))(v7 + 40))( v40,  &v68,  (char *)&v67 + 4,  &v67,  (char *)&v66 + 4,  &v66);
  int v10 = v35;
  if (v42)
  {
    int v9 = v42;
    (*(void (**)(void *))(v7 + 32))(v40);
    if (v9 != 101) {
      goto LABEL_111;
    }
    uint64_t v27 = v34;
    goto LABEL_40;
  }

  uint64_t v27 = v34;
  if (v60 < 1)
  {
LABEL_87:
    (*(void (**)(void *))(v7 + 32))(v40);
    goto LABEL_40;
  }

  while (1)
  {
    uint64_t v45 = 0LL;
    uint64_t v46 = 0x7FFFFFFF;
    uint64_t v47 = (unsigned __int8 **)*((void *)&v70 + 1);
    uint64_t v48 = v59;
    do
    {
      if (*v47 && v47[1] - v47[2] < v46)
      {
        uint64_t v46 = *((_DWORD *)v47 + 2) - *((_DWORD *)v47 + 4);
        uint64_t v45 = v47;
      }

      v47 += 3;
      --v48;
    }

    while (v48);
    if (!v45)
    {
      uint64_t v6 = v61;
      uint64_t v29 = v62;
      goto LABEL_87;
    }

    uint64_t v49 = *v45;
    uint64_t v50 = **v45;
    if (v50 > 1)
    {
      if ((v50 & 0x80) != 0)
      {
        uint64_t v50 = v50 & 0x7F | (v49[1] << 7);
        if ((char)v49[1] < 0)
        {
          uint64_t v50 = v50 & 0x3FFF | (v49[2] << 14);
          if ((char)v49[2] < 0)
          {
            uint64_t v50 = v50 & 0x1FFFFF | (v49[3] << 21);
            if ((char)v49[3] < 0)
            {
              uint64_t v50 = v50 & 0xFFFFFFF | ((v49[4] & 7) << 28);
              uint64_t v51 = 5LL;
            }

            else
            {
              uint64_t v51 = 4LL;
            }
          }

          else
          {
            uint64_t v51 = 3LL;
          }
        }

        else
        {
          uint64_t v51 = 2LL;
        }
      }

      else
      {
        uint64_t v51 = 1LL;
      }

      uint64_t v52 = &v45[1][v50 - 2];
      *uint64_t v45 = &v49[v51];
      v45[1] = v52;
    }

    else
    {
      *uint64_t v45 = 0LL;
    }

    if ((int)v66 < v46)
    {
      do
      {
        uint64_t v53 = (*(uint64_t (**)(void *, int *, char *, uint64_t *, char *, uint64_t *))(v7 + 40))( v40,  &v68,  (char *)&v67 + 4,  &v67,  (char *)&v66 + 4,  &v66);
        if (v53) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = (int)v66 < v46;
        }
      }

      while (v54);
      int v9 = v53;
      if (v53) {
        break;
      }
    }

    sqlite3_snprintf( 64,  (char *)&__src,  "%d %d %d %d ",  v63,  -1431655765 * (((uint64_t)v45 - *((void *)&v70 + 1)) >> 3),  v67,  HIDWORD(v66) - v67);
    uint64_t v55 = strlen((const char *)&__src);
    uint64_t v56 = v55;
    if ((int)v10 + v55 + 1 < (int)v27)
    {
      uint64_t v43 = v55;
      uint64_t v44 = v64;
    }

    else
    {
      if (sqlite3_initialize()
        || (v43 = v56, uint64_t v27 = v56 + (uint64_t)(int)v27 + 100, (v57 = sub_18127D33C(v64, v27)) == 0))
      {
        int v9 = 7;
        goto LABEL_104;
      }

      uint64_t v44 = v57;
    }

    memcpy((void *)(v44 + (int)v10), &__src, v43);
    uint64_t v64 = v44;
    *(_BYTE *)(v44 + (int)v10 + (uint64_t)v56) = 0;
    int v10 = (int)v10 + (uint64_t)v56;
  }

  if (v53 != 101)
  {
LABEL_104:
    (*(void (**)(void *))(v7 + 32))(v40);
    int v11 = (char *)v64;
    uint64_t v6 = v61;
    goto LABEL_11;
  }

  uint64_t v6 = v61;
  uint64_t v29 = v62;
  if (*(void *)(v61 + 80)) {
    goto LABEL_87;
  }
  (*(void (**)(void *))(v7 + 32))(v40);
  int v9 = 267;
LABEL_111:
  int v11 = (char *)v64;
LABEL_11:
  uint64_t v17 = *((void *)&v70 + 1);
  if (*((void *)&v70 + 1))
  {
    unint64_t v18 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_17;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
    --qword_18C468B10;
    off_18C4653A8(v17);
    uint64_t v17 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unint64_t v18 = &xmmword_18C465410;
LABEL_17:
      (*v18)(v17);
    }
  }

  uint64_t v19 = *(void **)(v6 + 480);
  if (v19)
  {
    uint64_t v20 = (sqlite3_stmt *)v19[3];
    uint64_t v21 = (void *)v19[4];
    uint64_t v22 = v21[3];
    if (v22) {
      xmmword_18C465400(v22);
    }
    sub_1812F20DC(v21, v19);
    uint64_t v23 = v21[3];
    if (v23) {
      xmmword_18C465410(v23);
    }
    sqlite3_finalize(v20);
  }

  *(void *)(v6 + 480) = 0LL;
  if (!v9)
  {
    if (a1)
    {
      uint64_t v14 = v10 - 1;
      char v15 = sqlite3_free;
      unsigned int v13 = (uint64_t)a1;
      int v12 = v11;
      goto LABEL_33;
    }

    goto LABEL_34;
  }

  if (a1)
  {
    a1[9] = v9;
    if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0)
    {
      switch(v9)
      {
        case 516:
          int v24 = "abort due to ROLLBACK";
          break;
        case 101:
          int v24 = "no more rows available";
          break;
        case 100:
          int v24 = "another row available";
          break;
        default:
          else {
            int v24 = off_189B6EC30[v9];
          }
          break;
      }

      sub_1812D7A8C((uint64_t)a1, v24, -1, 1u, 0LL);
    }
  }

  else
  {
    sub_1812CF36C(97620);
  }

  if (v11)
  {
    uint64_t v58 = (uint64_t (**)(char *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_101;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    off_18C4653A8(v11);
    int v11 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v58 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_101:
      (*v58)(v11);
    }
  }

  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  uint64_t v14 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v14)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v14 = &xmmword_18C465410;
    return (*v14)(v1);
  }

  return result;
}

    uint64_t v23 = v33;
    int v24 = v13 + 9;
    if (v24 <= v12)
    {
      uint64_t v27 = v29;
LABEL_49:
      int v28 = (int8x8_t *)(v27 + (int)v13);
      if (v23 <= 0x7F)
      {
        v28->i8[0] = v23;
        char v15 = 1;
      }

      else if (v23 >> 14)
      {
        char v15 = sub_181308E00(v28, v23);
      }

      else
      {
        v28->i8[0] = (v23 >> 7) | 0x80;
        v28->i8[1] = v23 & 0x7F;
        char v15 = 2;
      }

      v13 += v15;
      goto LABEL_15;
    }

    if (v12) {
      LODWORD(v25) = v12;
    }
    else {
      LODWORD(v25) = 64;
    }
    uint64_t v25 = (int)v25;
    do
    {
      size_t v26 = v25;
      v25 *= 2LL;
    }

    while (v26 < v24);
    if (!sqlite3_initialize())
    {
      uint64_t v27 = sub_18127D33C(v29, v26);
      if (v27)
      {
        uint64_t v29 = v27;
        int v12 = v26;
        goto LABEL_49;
      }
    }

    uint64_t v8 = 7LL;
LABEL_15:
    uint64_t v16 = v32;
    *(void *)(*(void *)(a1 + 32) + 8LL * v32) += v33;
    uint64_t v14 = v16 + 1;
    int v32 = v16 + 1;
    if ((_DWORD)v8) {
      goto LABEL_4;
    }
  }

  uint64_t v30 = __PAIR64__(v12, v13);
  ++*(void *)(a1 + 24);
  uint64_t v8 = sub_18139CE94((uint64_t *)a1, a3, (uint64_t)&v29);
  int v9 = v29;
  if (!v29) {
    return v8;
  }
LABEL_5:
  int v10 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    off_18C4653A8(v9);
    int v9 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v10 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_10;
    }
  }

  else
  {
LABEL_10:
    (*v10)(v9);
  }

  return v8;
}

    ;
  }

  if (byte_1813C6343[v42] == byte_1813C6343[v43]) {
    goto LABEL_40;
  }
  for (uint64_t k = 0LL; ; ++k)
  {
    uint64_t v45 = v29[k];
    uint64_t v46 = aInstance[k];
    if ((_DWORD)v45 != (_DWORD)v46) {
      break;
    }
    if (!v29[k])
    {
      uint64_t v40 = 1;
      uint64_t v27 = 2;
      goto LABEL_51;
    }

    if ((v16 & 0x10) != 0)
    {
      uint64_t v17 = *((_DWORD *)a2 + 4);
      if ((v16 & 0x400) != 0) {
        v17 += *(_DWORD *)a2;
      }
      if (v15) {
        goto LABEL_51;
      }
    }

    else if ((v16 & 1) != 0)
    {
      uint64_t v17 = 0;
      if (v15) {
        goto LABEL_51;
      }
    }

    else
    {
      uint64_t v17 = sub_181303970((uint64_t)a2, 1);
      if (v15) {
        goto LABEL_51;
      }
    }

  *int v4 = v5;
  return result;
}

void sub_181277FE8( uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 344);
  if (!v8) {
    return;
  }
  uint64_t v10 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 144LL) <= *(__int16 *)(v8 + 54))
  {
    sub_1812DC47C(a1, "too many columns on %s", a3, (uint64_t)a4, a5, a6, a7, a8, *(void *)v8);
    return;
  }

  int v11 = a4;
  unint64_t v12 = a3;
  unsigned int v13 = a2;
  if (*(unsigned __int8 *)(a1 + 302) <= 1u && a3 >= 2 && (char)byte_1813C6558[*a2] < 0)
  {
    uint64_t v14 = (a3 - 1);
    if (v14 < 2)
    {
LABEL_10:
      unint64_t v12 = (a3 - 2) | a3 & 0xFFFFFFFF00000000LL;
      unsigned int v13 = a2 + 1;
    }

    else
    {
      uint64_t v15 = 1LL;
      while (((char)byte_1813C6558[a2[v15]] & 0x80000000) == 0)
      {
        if (v14 == ++v15) {
          goto LABEL_10;
        }
      }
    }
  }

  if (a5 < 0x10)
  {
LABEL_63:
    goto LABEL_64;
  }

  if (!a4) {
    goto LABEL_64;
  }
  uint64_t v16 = (a5 - 6);
  uint64_t v17 = &a4[v16];
  unint64_t v18 = a4[v16];
  if (!a4[v16])
  {
    uint64_t v20 = "always";
    goto LABEL_38;
  }

  if ((v18 & 0xFFFFFFDF) != 0x41)
  {
    v18 += (unint64_t)byte_1813C6343;
    uint64_t v20 = "always";
LABEL_37:
    LODWORD(v18) = *(unsigned __int8 *)v18;
    goto LABEL_38;
  }

  unint64_t v18 = v17[1];
  if (!v17[1])
  {
    uint64_t v20 = "lways";
    goto LABEL_38;
  }

  if ((v18 & 0xFFFFFFDF) != 0x4C)
  {
    v18 += (unint64_t)byte_1813C6343;
    uint64_t v20 = "lways";
    goto LABEL_37;
  }

  unint64_t v18 = v17[2];
  if (!v17[2])
  {
    uint64_t v20 = "ways";
    goto LABEL_38;
  }

  if ((v18 & 0xFFFFFFDF) != 0x57)
  {
    v18 += (unint64_t)byte_1813C6343;
    uint64_t v20 = "ways";
    goto LABEL_37;
  }

  unint64_t v18 = v17[3];
  if (!v17[3])
  {
    uint64_t v20 = "ays";
    goto LABEL_38;
  }

  if ((v18 & 0xFFFFFFDF) != 0x41)
  {
    v18 += (unint64_t)byte_1813C6343;
    uint64_t v20 = "ays";
    goto LABEL_37;
  }

  unint64_t v18 = v17[4];
  if (!v17[4])
  {
    uint64_t v20 = "ys";
    goto LABEL_38;
  }

  if ((v18 & 0xFFFFFFDF) != 0x59)
  {
    v18 += (unint64_t)byte_1813C6343;
    uint64_t v20 = "ys";
    goto LABEL_37;
  }

  uint64_t v19 = v17[5];
  if ((_DWORD)v19)
  {
    if ((v19 & 0xFFFFFFDF) == 0x53) {
      goto LABEL_39;
    }
    unint64_t v18 = (unint64_t)&byte_1813C6343[v19];
    uint64_t v20 = "s";
    goto LABEL_37;
  }

  LODWORD(v18) = 0;
  uint64_t v20 = "s";
LABEL_38:
  if ((_DWORD)v18 == byte_1813C6343[*v20])
  {
LABEL_39:
    uint64_t v21 = 0LL;
    int v22 = a5 - 14;
    uint64_t v23 = a4 - 1;
    do
    {
      if (v16 == v21) {
        goto LABEL_108;
      }
      char v24 = byte_1813C6558[v23[v16]];
      ++v21;
      --v23;
    }

    while ((v24 & 1) != 0);
    if ((a5 - 5 - v21) > 8)
    {
      uint64_t v25 = &a4[(v16 - v21 - 8)];
      unint64_t v26 = *v25;
      if (*v25)
      {
        if ((v26 & 0xFFFFFFDF) == 0x47)
        {
          unint64_t v26 = v25[1];
          if (!v25[1])
          {
            int v28 = "enerated";
            goto LABEL_103;
          }

          if ((v26 & 0xFFFFFFDF) == 0x45)
          {
            unint64_t v26 = v25[2];
            if (!v25[2])
            {
              int v28 = "nerated";
              goto LABEL_103;
            }

            if ((v26 & 0xFFFFFFDF) == 0x4E)
            {
              unint64_t v26 = v25[3];
              if (!v25[3])
              {
                int v28 = "erated";
                goto LABEL_103;
              }

              if ((v26 & 0xFFFFFFDF) == 0x45)
              {
                unint64_t v26 = v25[4];
                if (!v25[4])
                {
                  int v28 = "rated";
                  goto LABEL_103;
                }

                if ((v26 & 0xFFFFFFDF) == 0x52)
                {
                  unint64_t v26 = v25[5];
                  if (!v25[5])
                  {
                    int v28 = "ated";
                    goto LABEL_103;
                  }

                  if ((v26 & 0xFFFFFFDF) == 0x41)
                  {
                    unint64_t v26 = v25[6];
                    if (!v25[6])
                    {
                      int v28 = "ted";
                      goto LABEL_103;
                    }

                    if ((v26 & 0xFFFFFFDF) == 0x54)
                    {
                      unint64_t v26 = v25[7];
                      if (v25[7])
                      {
                        if ((v26 & 0xFFFFFFDF) == 0x45)
                        {
                          uint64_t v27 = v25[8];
                          if (!(_DWORD)v27)
                          {
                            LODWORD(v26) = 0;
                            int v28 = "d";
                            goto LABEL_103;
                          }

                          if ((v27 & 0xFFFFFFDF) == 0x44)
                          {
LABEL_104:
                            LODWORD(a5) = a5 - 13 - v21;
                            uint64_t v37 = (v22 - v21);
                            while (v37)
                            {
                              uint64_t v38 = &a4[v37--];
                              LODWORD(a5) = a5 - 1;
                              if ((byte_1813C6558[*(v38 - 1)] & 1) == 0) {
                                goto LABEL_63;
                              }
                            }

LABEL_108:
                            LODWORD(a5) = 0;
LABEL_109:
                            char v80 = 65;
                            char v81 = 0;
                            char v36 = 1;
                            goto LABEL_110;
                          }

                          unint64_t v26 = (unint64_t)&byte_1813C6343[v27];
                          int v28 = "d";
                        }

                        else
                        {
                          v26 += (unint64_t)byte_1813C6343;
                          int v28 = "ed";
                        }

                        goto LABEL_102;
                      }

                      int v28 = "ed";
LABEL_103:
                      LODWORD(a5) = a5 - 5 - v21;
                      goto LABEL_64;
                    }

                    v26 += (unint64_t)byte_1813C6343;
                    int v28 = "ted";
                  }

                  else
                  {
                    v26 += (unint64_t)byte_1813C6343;
                    int v28 = "ated";
                  }
                }

                else
                {
                  v26 += (unint64_t)byte_1813C6343;
                  int v28 = "rated";
                }
              }

              else
              {
                v26 += (unint64_t)byte_1813C6343;
                int v28 = "erated";
              }
            }

            else
            {
              v26 += (unint64_t)byte_1813C6343;
              int v28 = "nerated";
            }
          }

          else
          {
            v26 += (unint64_t)byte_1813C6343;
            int v28 = "enerated";
          }
        }

        else
        {
          v26 += (unint64_t)byte_1813C6343;
          int v28 = "generated";
        }

    *(_WORD *)(i + 92) = v87;
  }

  if (*v16) {
    goto LABEL_96;
  }
  uint64_t v95 = *(void *)(a1 + 16);
  if (v95) {
    goto LABEL_128;
  }
  if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
    *(_BYTE *)(a1 + 35) = 1;
  }
  uint64_t v95 = sub_1812DC63C((uint64_t *)a1, (uint64_t)v36, a3, a4, a5, a6, a7, a8);
  if (v95)
  {
LABEL_128:
    sub_181319BA8(v95, 122LL, 0LL, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v10 + 63)) {
      uint64_t v102 = "VIEW";
    }
    else {
      uint64_t v102 = "TABLE";
    }
    if (!v11)
    {
      uint64_t v190 = 0LL;
      uint64_t v103 = sub_18127F588(v53, "CREATE %s %.*s", v96, v97, v98, v99, v100, v101, (char)v102);
      goto LABEL_141;
    }

    if (*(_BYTE *)(a1 + 302))
    {
      *(_DWORD *)(a1 + 24) = 1;
      ++*(_DWORD *)(a1 + 48);
      return;
    }

    uint64_t v190 = v11;
    uint64_t v193 = (void *)v53;
    uint64_t v130 = *(_DWORD *)(a1 + 56);
    uint64_t v131 = (v130 + 1);
    *(_DWORD *)(a1 + 56) = v130 + 3;
    uint64_t v132 = *(void *)(a1 + 168);
    if (!v132) {
      uint64_t v132 = a1;
    }
    *(_BYTE *)(v132 + 33) = 1;
    sub_181279C3C(v95, 113LL, 1LL, *(unsigned int *)(a1 + 132), v34, v99, v100, v101);
    int v136 = *(_DWORD *)(v95 + 144);
    if (v136 >= 1) {
      *(_WORD *)(*(void *)(v95 + 136) + 40LL * (v136 - 1) + 2) = 16;
    }
    *(_DWORD *)(a1 + 52) = 2;
    sub_181279C3C(v95, 11LL, (v130 + 1), 0LL, (v136 + 1), v133, v134, v135);
    if (!*(_DWORD *)(a1 + 48))
    {
      BOOL v137 = sub_18131FA64(a1, v190, 65);
      if (v137)
      {
        uint64_t v143 = *(_WORD *)(v137 + 54);
        *(_WORD *)(v10 + 56) = v143;
        *(_WORD *)(v10 + 54) = v143;
        *(void *)(v10 + 8) = *(void *)(v137 + 8);
        *(_WORD *)(v137 + 54) = 0;
        *(void *)(v137 + 8) = 0LL;
        if (v193[102] || (uint64_t v144 = *(_DWORD *)(v137 + 44) - 1, (*(_DWORD *)(v137 + 44) = v144) == 0)) {
          sub_181311A80(v193, (void *)v137);
        }
        LOBYTE(v199) = 13;
        *((void *)&v200 + 1) = 0LL;
        DWORD1(v199) = v130 + 1;
        *((void *)&v199 + 1) = 0LL;
        LODWORD(v200) = 0;
        sub_1812801A8((void **)a1, v190, (uint64_t)&v199, v138, v139, v140, v141, v142);
        if (!*(_DWORD *)(a1 + 48))
        {
          uint64_t v191 = v130 + 3;
          uint64_t v151 = (v130 + 2);
          sub_18131FB8C(v95, v131, v145, v146, v147, v148, v149, v150);
          if (*(_BYTE *)(*(void *)v95 + 103LL)) {
            uint64_t v157 = &byte_18C550680;
          }
          else {
            uint64_t v157 = (char *)(*(void *)(v95 + 136) + 40LL * v136);
          }
          *((_DWORD *)v157 + 2) = *(_DWORD *)(v95 + 144);
          uint64_t v158 = sub_181319BA8(v95, 12LL, DWORD1(v199), v152, v153, v154, v155, v156);
          sub_181279C3C(v95, 97LL, HIDWORD(v199), v200, v151, v159, v160, v161);
          sub_18131FC08((void **)v95, v10, 0LL, v162, v163, v164, v165, v166);
          sub_1813103F4(v95, 127LL, 1LL, v191, v167, v168, v169, v170);
          sub_181279C3C(v95, 128LL, 1LL, v151, v191, v171, v172, v173);
          sub_181319CC8(v95, v158, v174, v175, v176, v177, v178, v179);
          if (*(_BYTE *)(*(void *)v95 + 103LL)) {
            uint64_t v185 = &byte_18C550680;
          }
          else {
            uint64_t v185 = (char *)(*(void *)(v95 + 136) + 40LL * (int)v158);
          }
          *((_DWORD *)v185 + 2) = *(_DWORD *)(v95 + 144);
          sub_181319BA8(v95, 122LL, 1LL, v180, v181, v182, v183, v184);
          uint64_t v53 = (uint64_t)v193;
          uint64_t v103 = sub_18131FF0C((uint64_t)v193, v10);
LABEL_141:
          uint64_t v110 = v103;
          sub_1812C742C( (uint64_t *)a1,  "UPDATE %Q.sqlite_master SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q WHERE rowid=#%d",  v104,  v105,  v106,  v107,  v108,  v109,  *(void *)(*(void *)(v53 + 32) + 32LL * (int)v34));
          if (v110) {
            sub_1812F20DC((void *)v53, v110);
          }
          sub_181320254((uint64_t *)a1, v34, v111, v112, v113, v114, v115, v116);
          if ((*(_BYTE *)(v10 + 48) & 8) != 0 && !*(_BYTE *)(a1 + 302))
          {
            uint64_t v123 = *(void *)(v53 + 32);
            if (!*(void *)(*(void *)(v123 + 32LL * (int)v34 + 24) + 104LL)) {
              sub_1812C742C( (uint64_t *)a1,  "CREATE TABLE %Q.sqlite_sequence(name,seq)",  v117,  v118,  v119,  v120,  v121,  v122,  *(void *)(v123 + 32LL * (int)v34));
            }
          }

          uint64_t v124 = sub_18127F588( v53,  "tbl_name='%q' AND type!='trigger'",  v117,  v118,  v119,  v120,  v121,  v122,  *(void *)v10);
          sub_1813202C4(v95, v34, (uint64_t)v124, 0, v125, v126, v127, v128);
          int v11 = v190;
          if (!*(_BYTE *)(v53 + 197))
          {
LABEL_148:
            if (!v11 && !*(_BYTE *)(v10 + 63))
            {
              if (*a2) {
                uint64_t v129 = a2;
              }
              else {
                uint64_t v129 = v13;
              }
              *(_DWORD *)(v10 + 64) = *v129 - *(_DWORD *)(a1 + 264) + 13;
            }

            return;
          }

LABEL_102:
        LODWORD(v26) = *(unsigned __int8 *)v26;
        goto LABEL_103;
      }

      int v28 = "generated";
      goto LABEL_103;
    }

    LODWORD(a5) = a5 - 5 - v21;
    goto LABEL_63;
  }

      *(void *)(*(void *)(a1 + 48) + 8 * v49++) = 0LL;
    }
  }

  uint64_t v44 = sub_18127C8C0(a1, a2);
  if ((_DWORD)v44)
  {
    uint64_t v7 = v44;
    if ((_DWORD)v44 != 5) {
      return v7;
    }
    if (**(void **)(a1 + 48) && !*(_BYTE *)(a1 + 63))
    {
      uint64_t v45 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  2LL,  1LL,  6LL);
      if (v45)
      {
        if (v45 == 5) {
          return 261LL;
        }
        else {
          return v45;
        }
      }

      if (!*(_BYTE *)(a1 + 63))
      {
        uint64_t v53 = *(void (**)(void))(**(void **)(a1 + 8) + 112LL);
        goto LABEL_210;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_BYTE *)(a1 + 70)) {
    goto LABEL_52;
  }
  uint64_t v8 = (int *)(**(void **)(a1 + 48) + 96LL);
  uint64_t v48 = *v8;
  if (*v8 != *(_DWORD *)(a1 + 88))
  {
LABEL_91:
    LODWORD(v7) = 0;
    goto LABEL_6;
  }

  if (*(_DWORD *)(a1 + 152))
  {
    if (v48) {
      goto LABEL_91;
    }
  }

  else
  {
    if (v48) {
      int v54 = *(void *)(a1 + 144) == 0LL;
    }
    else {
      int v54 = 1;
    }
    if (!v54) {
      goto LABEL_91;
    }
  }

  unsigned __int8 v55 = *(unsigned __int8 *)(a1 + 63);
  if (*(_BYTE *)(a1 + 63))
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  3LL,  1LL,  6LL);
    unsigned __int8 v55 = *(unsigned __int8 *)(a1 + 63);
  }

  if (v55 != 2) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  }
  if ((_DWORD)v7 != 5)
  {
    if ((_DWORD)v7) {
      return v7;
    }
    int v57 = **(uint64_t ***)(a1 + 48);
    uint64_t v58 = *v57;
    uint64_t v59 = v57[1];
    uint64_t v60 = v57[2];
    uint64_t v61 = v57[3];
    uint64_t v63 = v57[4];
    uint64_t v62 = v57[5];
    if (v58 == *(void *)(a1 + 72)
      && v59 == *(void *)(a1 + 80)
      && v60 == *(void *)(a1 + 88)
      && v61 == *(void *)(a1 + 96)
      && v63 == *(void *)(a1 + 104)
      && v62 == *(void *)(a1 + 112))
    {
      uint64_t v7 = 0LL;
      *(_WORD *)(a1 + 60) = 0;
      return v7;
    }

    if (!*(_BYTE *)(a1 + 63))
    {
      uint64_t v53 = *(void (**)(void))(**(void **)(a1 + 8) + 112LL);
      goto LABEL_210;
    }

    return 0xFFFFFFFFLL;
  }

          if ((*((_BYTE *)a2 + 36) & 1) != 0) {
            uint64_t v115 = 139LL;
          }
          else {
            uint64_t v115 = 138LL;
          }
          uint64_t v116 = *((unsigned int *)a2 + 3);
          uint64_t v117 = (v19 + v130);
          uint64_t v118 = (v18 - v130);
          uint64_t v119 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v119)
          {
            uint64_t result = sub_181310690(v14, v115, v116, v45, v117, v118, v27, v28);
            if (!v62)
            {
LABEL_115:
              *((_DWORD *)a2 + 13) = *(_DWORD *)(v14 + 144) - 1;
              return result;
            }
          }

          else
          {
            *(_DWORD *)(v14 + 144) = v119 + 1;
            uint64_t v120 = *(void *)(v14 + 136) + 40LL * v119;
            *(_BYTE *)uint64_t v120 = v115;
            *(_WORD *)(v120 + 2) = 0;
            *(_DWORD *)(v120 + 4) = v116;
            *(_DWORD *)(v120 + 8) = v45;
            *(_DWORD *)(v120 + 12) = v117;
            *(_DWORD *)(v120 + 16) = v118;
            *(_BYTE *)(v120 + 1) = -3;
            *(void *)(v120 + 24) = 0LL;
            *(void *)(v120 + 32) = 0LL;
            if (!v62) {
              goto LABEL_115;
            }
          }

          uint64_t v121 = *((_DWORD *)a2 + 8);
          if (!v121) {
            uint64_t v121 = *(_DWORD *)(v14 + 144);
          }
          if (*(_BYTE *)(*(void *)v14 + 103LL)) {
            uint64_t v122 = &byte_18C550680;
          }
          else {
            uint64_t v122 = (char *)(*(void *)(v14 + 136) + 40LL * v62);
          }
          *((_DWORD *)v122 + 2) = v121;
          goto LABEL_115;
        }

      *uint64_t v19 = (v15 >> 18) & 7 | 0xF0;
      v19[1] = (v15 >> 12) & 0x3F | 0x80;
      v19[2] = (v15 >> 6) & 0x3F | 0x80;
      v19[3] = v15 & 0x3F | 0x80;
      v19 += 4;
      if (v12 >= v8) {
        goto LABEL_55;
      }
LABEL_37:
      if ((unint64_t)v19 > v54)
      {
        uint64_t v20 = v10;
        uint64_t v21 = v18;
        if (sqlite3_initialize()) {
          return 7LL;
        }
        int v22 = (char *)sub_18126F0AC(2LL * v53);
        if (!v22) {
          return 7LL;
        }
        int v9 = v22;
        uint64_t v23 = *(_BYTE **)(a1 + 128);
        uint64_t v19 = &v22[v19 - v23];
        memcpy(v22, v23, v53);
        char v24 = *(void *)(a1 + 128);
        if (v24)
        {
          uint64_t v25 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_45;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v24);
          --qword_18C468B10;
          off_18C4653A8(v24);
          char v24 = xmmword_18C468B70;
          uint64_t v25 = &xmmword_18C465410;
          if ((void)xmmword_18C468B70) {
LABEL_45:
          }
            (*v25)(v24);
        }

        *(void *)(a1 + 128) = v9;
        *(_DWORD *)(a1 + 136) = 2 * v53;
        v53 *= 2;
        int v54 = (unint64_t)&v9[v53 - 6];
        unint64_t v18 = v21;
        uint64_t v10 = v20;
      }

      uint64_t v15 = *v12;
      int v11 = v12 + 1;
      if (v15 < 0xC0)
      {
        uint64_t v30 = v18;
      }

      else
      {
        int v28 = byte_1813C6D06[v15 - 192];
        if (v11 == v8)
        {
LABEL_62:
          int v11 = v8;
        }

        else
        {
          while (1)
          {
            uint64_t v29 = *v11;
            if ((*v11 & 0xC0) != 0x80) {
              break;
            }
            ++v11;
            int v28 = v29 & 0x3F | (v28 << 6);
            if (v11 == v8) {
              goto LABEL_62;
            }
          }
        }

        uint64_t v30 = v18;
        if (v28 >> 11 == 27 || v28 < 0x80 || v28 >> 1 == 0x7FFF) {
          uint64_t v15 = 65533;
        }
        else {
          uint64_t v15 = v28;
        }
      }

      if (sub_1813A77C4(a1, v15))
      {
        unint64_t v12 = v11;
        unint64_t v18 = v30;
        uint64_t v10 = word_1813CD5C6;
        if ((int)v15 <= 127)
        {
LABEL_26:
          if (v15 - 65 < 0x1A) {
            v15 += 32;
          }
          goto LABEL_28;
        }

        goto LABEL_75;
      }

      unint64_t v18 = v30;
      if (v15 - 818 < 0xFFFFFFCE)
      {
        uint64_t v10 = word_1813CD5C6;
        goto LABEL_56;
      }

      if (v15 >= 0x320) {
        int v49 = -32;
      }
      else {
        int v49 = 0;
      }
      if (v15 >= 0x320) {
        uint64_t v50 = 221688;
      }
      else {
        uint64_t v50 = 134389727;
      }
      uint64_t v10 = word_1813CD5C6;
      if (((v50 >> (v15 + v49)) & 1) == 0) {
        goto LABEL_56;
      }
      unint64_t v12 = v11;
    }

    if (*(_BYTE *)(a1 + *v12))
    {
      int v11 = v12;
      goto LABEL_50;
    }

        uint64_t v62 = 7;
        goto LABEL_28;
      }

LABEL_64:
  if ((char)byte_1813C6558[*a4] < 0)
  {
    uint64_t v29 = 1LL;
    while (((char)byte_1813C6558[a4[v29]] & 0x80000000) == 0)
    {
      if ((_DWORD)a5 - 1 == ++v29)
      {
        LODWORD(a5) = a5 - 2;
        int v11 = a4 + 1;
        break;
      }
    }
  }

  uint64_t v30 = 0LL;
  while (1)
  {
    if ((a5 & 0x80000000) != 0) {
      break;
    }
    int v32 = off_18C54FFA0[v30];
    if (v32)
    {
      if (!(_DWORD)a5) {
        goto LABEL_81;
      }
      int v33 = a5 + 1;
      unsigned int v34 = v11;
      while (1)
      {
        uint64_t v35 = *v34;
        if (!*v34) {
          break;
        }
        LODWORD(v35) = byte_1813C6343[v35];
        int v31 = byte_1813C6343[*v32];
        if ((_DWORD)v35 != v31) {
          goto LABEL_71;
        }
        ++v34;
        ++v32;
      }

      int v31 = byte_1813C6343[*v32];
LABEL_71:
      if ((_DWORD)v35 == v31) {
        goto LABEL_81;
      }
    }

        memcpy(v46, v49, v50);
        uint64_t v47 = &v46[v50];
        *uint64_t v47 = 0;
        uint64_t v46 = v47 + 1;
        ++v45;
      }

      while (v45 != v65);
    }
  }

  *((_BYTE *)v22 + 44) = 0;
  *(_WORD *)((char *)v22 + 45) = v63;
  uint64_t result = (void *)sub_181268E88(*(void *)(v11 + 96) + 80LL, (unsigned __int8 *)v22[2], (uint64_t)v22);
  if (result == v22)
  {
    uint64_t v10 = (void *)v66;
    if (!*(_BYTE *)(v66 + 103) && !*(_BYTE *)(v66 + 104))
    {
      *(_BYTE *)(v66 + 103) = 1;
      ++*(_DWORD *)(v66 + 432);
      *(_WORD *)(v66 + 436) = 0;
      uint64_t v58 = *(void *)(v66 + 344);
      if (v58)
      {
        sub_1812DC47C(v58, "out of memory", v52, v53, v54, v55, v56, v57, v62);
        for (int k = *(void *)(v66 + 344); ; ++*(_DWORD *)(k + 48))
        {
          *(_DWORD *)(k + 24) = 7;
          int k = *(void *)(k + 256);
          if (!k) {
            break;
          }
        }
      }
    }

    goto LABEL_90;
  }

  if (result)
  {
    v22[3] = result;
    result[4] = v22;
  }

  *(void *)(v11 + 72) = v22;
  uint64_t v10 = (void *)v66;
LABEL_3:
  if (a2) {
    goto LABEL_4;
  }
LABEL_5:
  if (a4) {
    return sub_181311F48(v10, a4);
  }
  return result;
}

      if (a2 >= 2) {
        goto LABEL_91;
      }
LABEL_356:
      sub_181355F7C(a4);
      if (*(_BYTE *)(a4 + 46)) {
        return 1LL;
      }
      return *(void *)a4 > 0x1A6401072FDFFuLL;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    unint64_t v12 = *a3;
    if (!*a3) {
      return 1LL;
    }
  }

  uint64_t v20 = *(unsigned __int16 *)(v12 + 20);
  if ((~v20 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v20 & 1) != 0) {
      return 1LL;
    }
    uint64_t v21 = (unsigned __int8 *)sub_181303998((int *)v12, 1);
    if (!v21) {
      return 1LL;
    }
  }

  else
  {
    uint64_t v21 = *(unsigned __int8 **)(v12 + 8);
    if (!v21) {
      return 1LL;
    }
  }

  int v22 = *v21;
  if (v22 == 45) {
    uint64_t v23 = v21 + 1;
  }
  else {
    uint64_t v23 = v21;
  }
  char v24 = &v21[(v22 == 45) + 9];
  do
  {
    uint64_t v25 = *++v24;
    unint64_t v26 = byte_1813C6558[v25] & 1;
  }

  while (v25 == 84LL || v26 != 0);
  if (!sub_181356258(v24, a4, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_60:
    *(_BYTE *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 42) = 1;
    uint64_t v44 = v160;
    uint64_t v43 = *(_DWORD *)v161;
    if (v22 == 45) {
      uint64_t v43 = -*(_DWORD *)v161;
    }
    *(_DWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 12) = v44;
    *(_DWORD *)(a4 + 16) = v159;
    if (!*(_BYTE *)(a4 + 44)) {
      goto LABEL_90;
    }
    sub_181355F7C(a4);
    unsigned int v155 = (uint64_t)a1;
    goto LABEL_64;
  }

  if (!*v24)
  {
    *(_BYTE *)(a4 + 43) = 0;
    goto LABEL_60;
  }

    if ((_DWORD)v4) {
      goto LABEL_79;
    }
  }

  int v4 = 0LL;
LABEL_79:
  if ((v23 & 1) == 0)
  {
LABEL_80:
    int v51 = *(unsigned int *)(v19 + 28);
    uint64_t v56 = (*(void *)(a1 + 200) + 4LL) * v51;
    uint64_t v52 = *(_DWORD **)(a1 + 344);
    if (v52)
    {
      if (*(_DWORD *)(v19 + 48) == v52[34])
      {
        uint64_t v53 = *(_DWORD *)(v19 + 36);
      }

      else
      {
        uint64_t v53 = 0;
        *(_DWORD *)(v19 + 36) = 0;
        *(_DWORD *)(v19 + 48) = v52[34];
      }

      if (v53 < v52[22])
      {
        v52[22] = v53;
        v52[24] = *(_DWORD *)(v19 + 40);
        v52[25] = *(_DWORD *)(v19 + 44);
        sub_1812FC724((uint64_t)v52);
        LODWORD(v51) = *(_DWORD *)(v19 + 28);
      }

      goto LABEL_88;
    }

    if (!(_DWORD)v4)
    {
LABEL_88:
      int v54 = v51 - 1;
      while (++v54 < *(_DWORD *)(a1 + 60))
      {
        unsigned __int8 v55 = sub_1812C8EA0(a1, &v56, (unsigned int *)v11, 0, 1);
        if ((_DWORD)v55)
        {
          int v4 = v55;
          goto LABEL_93;
        }
      }

      int v4 = 0LL;
    }
  }

    v2[1] = (char *)v2 + 34;
    *((_OWORD *)v2 + 1) = xmmword_1813CDE10;
    *((_BYTE *)v2 + 32) = 1;
    return result;
  }

  int v4 = *(unsigned __int16 *)(a2 + 20);
  switch(v4 & 0x3F)
  {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
    case 0xB:
    case 0xD:
    case 0xF:
    case 0x11:
    case 0x13:
    case 0x15:
    case 0x17:
    case 0x19:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x37:
    case 0x39:
    case 0x3B:
    case 0x3D:
    case 0x3F:
      uint64_t v8 = result[3];
      if ((unint64_t)(v8 + 4) < result[2])
      {
        *(_DWORD *)(result[1] + v8) = 1819047278;
        result[3] += 4LL;
        return result;
      }

      unsigned int v13 = "null";
      uint64_t v14 = 4;
      goto LABEL_57;
    case 2:
    case 0x12:
    case 0x32:
      if ((~v4 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
      {
        if ((v4 & 1) != 0)
        {
          int v5 = 0LL;
          if ((v4 & 2) == 0) {
            goto LABEL_43;
          }
        }

        else
        {
          uint64_t result = (void *)sub_181303998((int *)a2, 1);
          int v5 = (unsigned __int8 *)result;
          LOWORD(v4) = *(_WORD *)(a2 + 20);
          if ((v4 & 2) == 0) {
            goto LABEL_43;
          }
        }
      }

      else
      {
        int v5 = *(unsigned __int8 **)(a2 + 8);
        if ((v4 & 2) == 0) {
          goto LABEL_43;
        }
      }

      if (*(_BYTE *)(a2 + 22) == 1)
      {
        uint64_t v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x800) == 0) {
          return (void *)sub_18135B6B0((uint64_t)v2, v5, v14);
        }
        goto LABEL_52;
      }

  uint64_t v35 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
    --qword_18C468B10;
    off_18C4653A8(v12);
    unint64_t v12 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v35 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
      goto LABEL_69;
    }
  }

  else
  {
LABEL_69:
    (*v35)(v12);
  }

LABEL_72:
    if (++v30 == 6) {
      goto LABEL_109;
    }
  }

  sub_1812CF36C(35844);
LABEL_81:
  LODWORD(a5) = 0;
  char v80 = byte_1813CA364[v30];
  char v81 = v30 + 1;
  if ((v30 & 0x7FFFFFFB) == 1) {
    char v36 = 5;
  }
  else {
    char v36 = 1;
  }
LABEL_110:
  char v79 = v36;
  size_t v39 = a5;
  unint64_t v40 = v12 + (unint64_t)a5;
  if ((_DWORD)a5) {
    ++v40;
  }
  if (v10)
  {
    int v41 = (unsigned __int8 *)sub_1812F2264(v10, v40 + 1);
    if (!v41) {
      return;
    }
LABEL_116:
    unsigned int v42 = *(unsigned __int8 *)(a1 + 302);
    if (v42 > 3 || v42 == 2)
    {
      uint64_t v67 = *(void *)a1 ? sub_1812F2264(*(void *)a1, 0x20uLL) : sub_18126F0AC(32LL);
      if (v67)
      {
        *(_OWORD *)uint64_t v67 = 0u;
        *(_OWORD *)(v67 + 16) = 0u;
        *(void *)uint64_t v67 = v41;
        *(void *)(v67 + 8) = v13;
        *(void *)(v67 + 16) = v12;
        *(void *)(v67 + 24) = *(void *)(a1 + 408);
        *(void *)(a1 + 408) = v67;
      }
    }

    memcpy(v41, v13, v12);
    v41[v12] = 0;
    int v49 = *v41;
    if ((char)byte_1813C6558[*v41] < 0)
    {
      uint64_t v50 = 0LL;
      if (v49 == 91) {
        int v51 = 93;
      }
      else {
        int v51 = *v41;
      }
      for (int i = 1; ; ++i)
      {
        uint64_t v53 = i;
        int v54 = v41[i];
        if (v54 == v51)
        {
          ++i;
          LOBYTE(v54) = v51;
          if (v41[v53 + 1] != v51) {
            break;
          }
        }

        v41[v50++] = v54;
      }

      v41[v50] = 0;
      int v49 = *v41;
    }

    unsigned __int8 v55 = 0;
    if (v49)
    {
      uint64_t v56 = v41 + 1;
      do
      {
        v55 += byte_1813C6343[v49];
        int v57 = *v56++;
        int v49 = v57;
      }

      while (v57);
    }

    uint64_t v58 = *(unsigned __int16 *)(v8 + 54);
    if (*(__int16 *)(v8 + 54) <= 0)
    {
      uint64_t v60 = *(void **)(v8 + 8);
    }

    else
    {
      uint64_t v59 = 0LL;
      uint64_t v60 = *(void **)(v8 + 8);
      do
      {
        if (BYTE3(v60[2 * v59 + 1]) == v55)
        {
          for (uint64_t j = 0LL; ; ++j)
          {
            uint64_t v62 = v41[j];
            uint64_t v63 = *(unsigned __int8 *)(v60[2 * v59] + j);
            if ((_DWORD)v62 == (_DWORD)v63)
            {
              if (!v41[j])
              {
                sub_1812DC47C(a1, "duplicate column name: %s", v43, v44, v45, v46, v47, v48, (char)v41);
                goto LABEL_140;
              }
            }

            else if (byte_1813C6343[v62] != byte_1813C6343[v63])
            {
              break;
            }
          }
        }

        ++v59;
      }

      while (v59 != v58);
    }

    uint64_t v64 = 16LL * (__int16)v58;
    unint64_t v65 = v64 + 16;
    if (v60)
    {
      if (*(void *)(v10 + 512) > (unint64_t)v60)
      {
        uint64_t v66 = (__int16)v58;
        if (*(void *)(v10 + 496) <= (unint64_t)v60)
        {
          if (v65 < 0x81) {
            goto LABEL_158;
          }
        }

        else if (*(void *)(v10 + 504) <= (unint64_t)v60 && v65 <= *(unsigned __int16 *)(v10 + 438))
        {
          goto LABEL_158;
        }
      }

      uint64_t v68 = sub_1812F2310(v10, v60, v65);
    }

    else
    {
      uint64_t v68 = sub_1812F2264(v10, v64 + 16);
    }

    uint64_t v60 = (void *)v68;
    if (!v68)
    {
LABEL_140:
      sub_1812F20DC((void *)v10, v41);
      return;
    }

    uint64_t v66 = *(__int16 *)(v8 + 54);
LABEL_158:
    *(void *)(v8 + 8) = v60;
    uint64_t v69 = (unsigned __int8 **)&v60[2 * v66];
    *uint64_t v69 = v41;
    v69[1] = 0LL;
    *((_BYTE *)v69 + 11) = v55;
    if ((_DWORD)v39)
    {
      uint64_t v70 = &v41[strlen((const char *)v41) & 0x3FFFFFFF];
      uint64_t v71 = v70 + 1;
      memcpy(v70 + 1, v11, v39);
      v70[v39 + 1] = 0;
      if ((char)byte_1813C6558[v70[1]] < 0)
      {
        uint64_t v72 = 0LL;
        if (v70[1] == 91) {
          int v73 = 93;
        }
        else {
          int v73 = v70[1];
        }
        for (int k = 1; ; ++k)
        {
          uint64_t v75 = k;
          int v76 = v71[k];
          if (v76 == v73)
          {
            ++k;
            LOBYTE(v76) = v73;
            if (v71[v75 + 1] != v73) {
              break;
            }
          }

          v71[v72++] = v76;
        }

        v71[v72] = 0;
      }

      char v77 = sub_181312C2C(v70 + 1, (uint64_t)&v60[2 * v66]);
      uint64_t v78 = &v60[2 * v66];
      *((_BYTE *)v78 + 9) = v77;
      *((_WORD *)v78 + 7) |= 4u;
    }

    else
    {
      *((_BYTE *)v69 + 9) = v80;
      *((_BYTE *)v69 + 8) = (_BYTE)v69[1] & 0xF | (16 * v81);
      *((_BYTE *)v69 + 10) = v79;
    }

    ++*(_WORD *)(v8 + 54);
    ++*(_WORD *)(v8 + 56);
    *(_DWORD *)(a1 + 112) = 0;
  }

  else
  {
    int v41 = (unsigned __int8 *)sub_18126F0AC(v40 + 1);
    if (v41) {
      goto LABEL_116;
    }
  }

                            if (++v120 >= v115) {
                              goto LABEL_92;
                            }
                          }
                        }

                        uint64_t v122 = v113;
LABEL_92:
                        if ((_DWORD)v122)
                        {
                          uint64_t v129 = v122;
                          uint64_t v130 = (v145 + 2);
                        }

                        else
                        {
                          ++*(_DWORD *)(a1 + 56);
                          uint64_t v130 = (v145 + 2);
                          sub_1813103F4(v148, 75LL, 0LL, v130, v108, v109, v110, v111);
                          uint64_t v129 = 1LL;
                        }

                        sub_181279C3C(v148, 97LL, v130, v129, v146, v109, v110, v111);
                        if (v114) {
                          sub_1812DC7B4(v148, 138LL, v147, v146, v130, *(unsigned __int16 *)(v114 + 94), v132, v133);
                        }
                        else {
                          sub_181279C3C(v148, 128LL, v147, v146, v143, v131, v132, v133);
                        }
                        int v138 = *(_DWORD *)(v148 + 144);
                        char v139 = __OFSUB__(v138, 1);
                        uint64_t v140 = v138 - 1;
                        if (v140 < 0 == v139) {
                          *(_WORD *)(*(void *)(v148 + 136) + 40LL * v140 + 2) = 2;
                        }
                        sub_1813103F4(v148, 39LL, v147, (v144 + 1), v134, v135, v136, v137);
                        if (*(_BYTE *)(*(void *)v148 + 103LL)) {
                          int v141 = &byte_18C550680;
                        }
                        else {
                          int v141 = (char *)(*(void *)(v148 + 136) + 40LL * v144);
                        }
                        *((_DWORD *)v141 + 2) = *(_DWORD *)(v148 + 144);
                      }
                    }

  v28[2] = 0LL;
  if (v36)
  {
    if (v36 == 19) {
      return 0LL;
    }
    else {
      return v36;
    }
  }

  bzero(*(void **)(v10 + 64), 8LL * (int)v15);
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + 40) = 0LL;
  if ((int)v15 <= 0)
  {
    *(_WORD *)(v10 + 52) = 0;
    goto LABEL_113;
  }

  uint64_t v64 = 0LL;
  unint64_t v65 = v99 + 4;
  uint64_t v66 = (unsigned int *)(*((void *)a5 + 1) + 8LL);
  uint64_t v67 = -1;
  do
  {
    uint64_t v68 = *((_DWORD *)v65 - 1);
    uint64_t v69 = (v68 - 1);
    if (v68 >= 1)
    {
      uint64_t v70 = *v66;
      if ((*v66 & 0x80000000) != 0) {
        goto LABEL_124;
      }
      uint64_t v71 = *(void *)(v10 + 64);
      uint64_t v72 = *(void *)(v11 + 32);
      int v73 = v72 + 56LL * v70;
      uint64_t v60 = *(void *)v10;
      *(void *)v10 |= *(void *)(v73 + 40);
      *(void *)(v71 + 8 * v69) = v73;
      if (*v65)
      {
        if (v64 <= 0xF && ((a6 >> v64) & 1) == 0) {
          *(_WORD *)(v10 + 30) |= 1 << v69;
        }
        if (*(_BYTE *)(v72 + 56LL * v70 + 23) == 74) {
          *(_BYTE *)(v10 + 28) |= 2u;
        }
      }

      int v74 = 1 << v64;
      if (v64 >= 0x20) {
        int v74 = 0;
      }
      if ((a5[30] & v74) != 0)
      {
        *(_DWORD *)(v10 + 40) |= 1 << v69;
      }

      else if ((*(_WORD *)(v72 + 56LL * v70 + 20) & 1) != 0)
      {
        a5[15] = 0;
        a5[20] &= ~1u;
        *a7 = 1;
      }

      if (*(unsigned __int8 *)(v72 + 56LL * v70 + 23) - 75 >= 0xFFFFFFFE && *a7)
      {
        if (!a5[14])
        {
LABEL_111:
          uint64_t v58 = 0LL;
          *a8 = 1;
          return v58;
        }

        uint64_t v75 = *((void *)a5 + 6);
        if (v75)
        {
          int v76 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v75);
            --qword_18C468B10;
            off_18C4653A8(v75);
            uint64_t v75 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_110;
            }
            int v76 = &xmmword_18C465410;
          }

          (*v76)(v75);
        }

          *(_BYTE *)(v8 + 28) = 7;
          if (*(_DWORD *)(v8 + 20))
          {
            int v31 = *(_BYTE *)(v8 + 29);
            if ((v31 & 4) != 0)
            {
              int v32 = *(void **)(v8 + 8);
              if (v32)
              {
                sub_1812F20DC(*(void **)v8, v32);
                int v31 = *(_BYTE *)(v8 + 29);
              }

              *(_BYTE *)(v8 + 29) = v31 & 0xFB;
            }

            *(_DWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            *(void *)(v8 + 8) = 0LL;
          }

          goto LABEL_78;
        }

        uint64_t v25 = *(int *)(v8 + 32);
        if (!sqlite3_initialize())
        {
          unint64_t v26 = sub_18127D33C(v24, 4 * v25);
          if (v26) {
            goto LABEL_68;
          }
        }

        goto LABEL_72;
      }

      if ((v22 & 1) == 0)
      {
        uint64_t v20 = sub_181303970(v12, 1);
        goto LABEL_39;
      }

  *a1 = v3;
  return v6;
}

      uint64_t result = 0LL;
      *a4 = 1;
      return result;
    }

    if (byte_1813C6343[v13] != byte_1813C6343[v14]) {
      break;
    }
LABEL_9:
    ++v11;
  }

  uint64_t v15 = "automerge";
  for (int k = a2; ; ++k)
  {
    uint64_t v17 = *k;
    unint64_t v18 = *(unsigned __int8 *)v15;
    if ((_DWORD)v17 == (_DWORD)v18)
    {
      if (*k) {
        goto LABEL_14;
      }
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) != 1) {
        goto LABEL_72;
      }
      if (a3)
      {
        int v41 = *((_WORD *)a3 + 10);
        if ((v41 & 0x24) != 0)
        {
          unsigned int v42 = (uint64_t)*a3;
LABEL_54:
          if ((_DWORD)v42 == 1) {
            LODWORD(v43) = 4;
          }
          else {
            LODWORD(v43) = v42;
          }
          goto LABEL_97;
        }

        if ((v41 & 8) != 0)
        {
          uint64_t v60 = *(double *)a3;
          if (*(double *)a3 >= -9.22337204e18)
          {
            if (v60 > 9.22337204e18) {
              goto LABEL_72;
            }
            unsigned int v42 = (uint64_t)v60;
            goto LABEL_54;
          }
        }

        else if ((v41 & 0x12) != 0)
        {
          uint64_t v43 = a3[1];
          if (v43)
          {
            LODWORD(v42) = sub_181303DF0((uint64_t)a3);
            goto LABEL_54;
          }

      LODWORD(v21) = 1;
      goto LABEL_73;
    }

    uint64_t v17 = *((_WORD *)v36 + 10);
    if (byte_1813C6455[v17 & 0x3F] == v16)
    {
      unint64_t v18 = COERCE_DOUBLE(bswap64(*(void *)(v11 + 1)));
      if (v16 == 1)
      {
        if ((v17 & 0x24) != 0)
        {
          uint64_t v19 = *(void *)&v18 == *(void *)v36;
        }

        else if ((v17 & 8) != 0)
        {
          uint64_t v27 = *(double *)v36;
          if (*(double *)v36 >= -9.22337204e18)
          {
            int v32 = v27 <= 9.22337204e18 ? (uint64_t)v27 : 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v19 = *(void *)&v18 == v32;
          }

          else
          {
            uint64_t v19 = *(void *)&v18 == 0x8000000000000000LL;
          }
        }

        else
        {
          uint64_t v19 = (v17 & 0x12) != 0 && *((void *)v36 + 1)
        }
      }

      else
      {
        if ((v17 & 8) != 0)
        {
          char v24 = *(double *)v36;
        }

        else if ((v17 & 0x24) != 0)
        {
          char v24 = (double)*(uint64_t *)v36;
        }

        else
        {
          char v24 = (v17 & 0x12) != 0 ? sub_181303DB8((uint64_t)v36) : 0.0;
        }

        uint64_t v19 = v24 == v18;
      }

      LODWORD(v21) = !v19;
    }

    else
    {
      LODWORD(v21) = 1;
    }

    v11 += 9;
    uint64_t v20 = 8;
LABEL_74:
    if (!(_DWORD)v21)
    {
      if (*(_BYTE *)(*(void *)(a3 + 40) + v12)) {
        unsigned int v13 = v37 + v20 + 2;
      }
      else {
        unsigned int v13 = v37 + 2;
      }
      uint64_t v37 = v13;
      goto LABEL_19;
    }

    if (*(_BYTE *)(*(void *)(a3 + 40) + v12)) {
      break;
    }
    v37 += v20 + 1;
    sub_1813B9AF8(0LL, v36, &v37);
LABEL_19:
  }

  uint64_t v10 = *(int *)(a4 + 8) + 2LL;
LABEL_86:
  uint64_t v37 = v10;
LABEL_87:
  unsigned int v34 = *(int *)(a4 + 4);
  uint64_t result = 0LL;
  if (v37 > v34)
  {
    uint64_t v35 = v37 - v34;
    *(_DWORD *)(a4 + 4) = v37;
    *(void *)(a2 + 64) += v35;
  }

  return result;
}

void sub_1812788C8( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!(a3 | a5)) {
    return;
  }
  uint64_t v10 = *(void *)(a1 + 344);
  if (!v10) {
    return;
  }
  uint64_t v11 = a5;
  int v12 = a4;
  unsigned int v13 = (_DWORD *)a3;
  uint64_t v15 = *(void *)a1;
  if (a5)
  {
    uint64_t v16 = (_BYTE *)(v15 + 197);
    if (*(_BYTE *)(v15 + 197))
    {
LABEL_5:
      uint64_t v17 = &byte_1813CEAEE;
LABEL_6:
      sub_1812DC47C(a1, v17, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
  }

  else
  {
    unint64_t v18 = *(char **)v10;
    uint64_t v19 = strrchr(*(const char **)v10, 95);
    if (v19)
    {
      uint64_t v20 = v19;
      *uint64_t v19 = 0;
      uint64_t v21 = sub_1812E2C64(v15, v18, 0LL);
      *uint64_t v20 = 95;
      if (v21)
      {
      }
    }

    uint64_t v16 = (_BYTE *)(v15 + 197);
    if (*(_BYTE *)(v15 + 197))
    {
      int v22 = *(_DWORD *)(v15 + 192);
      if (*(_BYTE *)(v10 + 63))
      {
        if (v22) {
          goto LABEL_5;
        }
        *(_DWORD *)(v10 + 40) = 0;
      }

      else
      {
        *(_DWORD *)(v10 + 40) = v22;
        if (v22 == 1) {
          *(_DWORD *)(v10 + 48) |= 1u;
        }
      }
    }
  }

  if ((v12 & 0x10000) != 0)
  {
    *(_DWORD *)(v10 + 48) |= 0x10000u;
    int v23 = *(__int16 *)(v10 + 54);
    if (v23 >= 1)
    {
      uint64_t v24 = 0LL;
      uint64_t v25 = 0LL;
      while (1)
      {
        uint64_t v26 = *(void *)(v10 + 8);
        uint64_t v27 = v26 + v24;
        unsigned int v28 = *(unsigned __int8 *)(v26 + v24 + 8);
        if (v28 <= 0xF) {
          break;
        }
        if ((v28 & 0xF0) == 0x10) {
          *(_BYTE *)(v26 + v24 + 9) = 65;
        }
        if ((*(_WORD *)(v26 + v24 + 14) & 1) != 0 && (v28 & 0xF) == 0 && v25 != *(__int16 *)(v10 + 52))
        {
          *(_BYTE *)(v27 + 8) = v28 & 0xF0 | 2;
          *(_DWORD *)(v10 + 48) |= 0x800u;
          LOWORD(v23) = *(_WORD *)(v10 + 54);
        }

        ++v25;
        v24 += 16LL;
      }

      if ((*(_WORD *)(v27 + 14) & 4) == 0)
      {
        sub_1812DC47C(a1, "missing datatype for %s.%s", a3, a4, a5, a6, a7, a8, *(void *)v10);
        return;
      }

      strlen(*(const char **)v27);
      char v186 = *(void *)v10;
      uint64_t v58 = "unknown datatype for %s.%s: %s";
      goto LABEL_137;
    }
  }

void sub_181279478( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 30)) {
    return;
  }
  uint64_t v9 = *(void *)a1;
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(v9 + 103))
    {
      int v10 = 7;
      goto LABEL_95;
    }

    return;
  }

  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
    if (*(_BYTE *)(v9 + 197)) {
      goto LABEL_94;
    }
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(v9 + 96) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v11 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v11)
    {
      *(_DWORD *)(a1 + 24) = 1;
      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_91;
      }
      goto LABEL_93;
    }
  }

  if (*(_BYTE *)(a1 + 219))
  {
    int v12 = *(unsigned int **)(a1 + 200);
    if (v12[47])
    {
      int v13 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v13)
      {
        sub_18131044C(v11, 83LL, 0LL, 0LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v13 + 1;
        uint64_t v14 = *(void *)(v11 + 136) + 40LL * v13;
        *(_BYTE *)uint64_t v14 = 83;
        *(_OWORD *)(v14 + 1) = 0u;
        *(_OWORD *)(v14 + 17) = 0u;
        *(void *)(v14 + 32) = 0LL;
      }

      uint64_t v15 = v12[46];
      int v16 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v16)
      {
        int v16 = sub_18131044C(v11, 36LL, v15, 0LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v16 + 1;
        uint64_t v17 = *(void *)(v11 + 136) + 40LL * v16;
        *(_DWORD *)uint64_t v17 = 36;
        *(_DWORD *)(v17 + 4) = v15;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
      }

      uint64_t v18 = v12[48];
      if ((int)v12[47] < 1)
      {
        uint64_t v19 = 0LL;
      }

      else
      {
        uint64_t v19 = 0LL;
        do
        {
          uint64_t v21 = v12[46];
          uint64_t v22 = (v18 + v19);
          int v23 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) > v23)
          {
            *(_DWORD *)(v11 + 144) = v23 + 1;
            uint64_t v20 = *(void *)(v11 + 136) + 40LL * v23;
            *(_DWORD *)uint64_t v20 = 94;
            *(_DWORD *)(v20 + 4) = v21;
            *(_DWORD *)(v20 + 8) = v19;
            *(_DWORD *)(v20 + 12) = v22;
            *(void *)(v20 + 24) = 0LL;
            *(void *)(v20 + 32) = 0LL;
            *(void *)(v20 + 16) = 0LL;
          }

          else
          {
            sub_18131044C(v11, 94LL, v21, v19, v22, a6, a7, a8);
          }

          uint64_t v19 = (v19 + 1);
        }

        while ((int)v19 < (int)v12[47]);
      }

      int v24 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v24)
      {
        sub_18131044C(v11, 84LL, v18, v19, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v24 + 1;
        uint64_t v25 = *(void *)(v11 + 136) + 40LL * v24;
        *(_DWORD *)uint64_t v25 = 84;
        *(_DWORD *)(v25 + 4) = v18;
        *(_DWORD *)(v25 + 8) = v19;
        *(void *)(v25 + 12) = 0LL;
        *(void *)(v25 + 28) = 0LL;
        *(void *)(v25 + 20) = 0LL;
        *(_DWORD *)(v25 + 36) = 0;
      }

      uint64_t v26 = v12[46];
      uint64_t v27 = (v16 + 1);
      int v28 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v28)
      {
        sub_18131044C(v11, 39LL, v26, v27, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v28 + 1;
        uint64_t v29 = *(void *)(v11 + 136) + 40LL * v28;
        *(_DWORD *)uint64_t v29 = 39;
        *(_DWORD *)(v29 + 4) = v26;
        *(_DWORD *)(v29 + 8) = v27;
        *(void *)(v29 + 12) = 0LL;
        *(void *)(v29 + 28) = 0LL;
        *(void *)(v29 + 20) = 0LL;
        *(_DWORD *)(v29 + 36) = 0;
      }

      if (*(_BYTE *)(*(void *)v11 + 103LL)) {
        int v30 = &byte_18C550680;
      }
      else {
        int v30 = (char *)(*(void *)(v11 + 136) + 40LL * v16);
      }
      *((_DWORD *)v30 + 2) = *(_DWORD *)(v11 + 144);
    }
  }

  int v31 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v31)
  {
    sub_18131044C(v11, 70LL, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v31 + 1;
    uint64_t v32 = *(void *)(v11 + 136) + 40LL * v31;
    *(_BYTE *)uint64_t v32 = 70;
    *(_OWORD *)(v32 + 1) = 0u;
    *(_OWORD *)(v32 + 17) = 0u;
    *(void *)(v32 + 32) = 0LL;
  }

  if (*(_BYTE *)(*(void *)v11 + 103LL)) {
    int v33 = &byte_18C550680;
  }
  else {
    int v33 = *(char **)(v11 + 136);
  }
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  *((_DWORD *)v33 + 2) = *(_DWORD *)(v11 + 144);
  do
  {
    int v36 = 1 << v35;
    if ((*(_DWORD *)(a1 + 124) & (1 << v35)) == 0) {
      goto LABEL_45;
    }
    *(_DWORD *)(v11 + 272) |= v36;
    if (v34 != 32 && *(_BYTE *)(*(void *)(*(void *)(*(void *)v11 + 32LL) + v34 + 8) + 17LL)) {
      *(_DWORD *)(v11 + 276) |= v36;
    }
    uint64_t v37 = *(unsigned int **)(*(void *)(v9 + 32) + v34 + 24);
    uint64_t v38 = (*(_DWORD *)(a1 + 120) >> v35) & 1;
    uint64_t v39 = *v37;
    a6 = v37[1];
    int v40 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v40)
    {
      sub_181310690(v11, 2LL, v35, v38, v39, a6, a7, a8);
      if (*(_BYTE *)(v9 + 197)) {
        goto LABEL_45;
      }
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v40 + 1;
      uint64_t v41 = *(void *)(v11 + 136) + 40LL * v40;
      *(_DWORD *)uint64_t v41 = 64770;
      *(_DWORD *)(v41 + 4) = v35;
      *(_DWORD *)(v41 + 8) = v38;
      *(_DWORD *)(v41 + 12) = v39;
      *(_DWORD *)(v41 + 16) = a6;
      *(void *)(v41 + 24) = 0LL;
      *(void *)(v41 + 32) = 0LL;
      if (*(_BYTE *)(v9 + 197)) {
        goto LABEL_45;
      }
    }

    int v42 = *(_DWORD *)(v11 + 144);
    BOOL v43 = __OFSUB__(v42, 1);
    int v44 = v42 - 1;
    if (v44 < 0 == v43) {
      *(_WORD *)(*(void *)(v11 + 136) + 40LL * v44 + 2) = 1;
    }
LABEL_45:
    ++v35;
    v34 += 32LL;
  }

  while (v35 < *(int *)(v9 + 40));
  if (*(int *)(a1 + 304) >= 1)
  {
    uint64_t v45 = 0LL;
    do
    {
      for (uint64_t i = *(void **)(*(void *)(*(void *)(a1 + 392) + 8 * v45) + 80LL); i; uint64_t i = (void *)i[5])
      {
        if (*i == v9) {
          break;
        }
      }

      sub_1812B9B68((uint64_t *)v11, 170LL, 0LL, 0LL, 0LL, (uint64_t)i, 4294967285LL, a8);
      ++v45;
    }

    while (v45 < *(int *)(a1 + 304));
  }

  *(_DWORD *)(a1 + 304) = 0;
  if (*(int *)(a1 + 148) > 0)
  {
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    int v49 = *(uint64_t **)(a1 + 16);
    do
    {
      sub_1812B9B68( v49,  169LL,  *(unsigned int *)(*(void *)(a1 + 152) + v47),  *(unsigned int *)(*(void *)(a1 + 152) + v47 + 4),  *(unsigned __int8 *)(*(void *)(a1 + 152) + v47 + 8),  *(void *)(*(void *)(a1 + 152) + v47 + 16),  0xFFFFFFFFLL,  a8);
      ++v48;
      v47 += 24LL;
    }

    while (v48 < *(int *)(a1 + 148));
  }

  uint64_t v50 = *(uint64_t **)(a1 + 160);
  if (v50)
  {
    uint64_t v51 = *(void *)(a1 + 16);
    uint64_t v52 = *(void *)a1;
    do
    {
      int v53 = *((_DWORD *)v50 + 5);
      sub_18128BBE0( (void *)a1,  0LL,  *((int *)v50 + 4),  *(void *)(*(void *)(*(void *)(v52 + 32) + 32LL * *((int *)v50 + 4) + 24) + 104LL),  112LL,  a6,  a7,  a8);
      sub_1812B9B68((uint64_t *)v51, 117LL, 0LL, (v53 - 1), 0LL, *(void *)v50[1], 0LL, v54);
      int v59 = *(_DWORD *)(v51 + 144);
      if (v59 + 12 > *(_DWORD *)(v51 + 148))
      {
        int v59 = *(_DWORD *)(v51 + 144);
      }

      uint64_t v60 = 0LL;
      uint64_t v61 = *(void *)(v51 + 136);
      int v62 = v59;
      uint64_t v63 = 40LL * v59;
      uint64_t v64 = v61 + v63;
      do
      {
        uint64_t v65 = v61 + v63;
        uint64_t v66 = byte_1813CA2E4[v60];
        *(_BYTE *)uint64_t v65 = v66;
        int v67 = (char)byte_1813CA2E4[v60 + 2];
        *(_DWORD *)(v65 + 4) = (char)byte_1813CA2E4[v60 + 1];
        *(_DWORD *)(v65 + 8) = v67;
        if ((byte_1813C6495[v66] & 1) != 0 && v67 >= 1) {
          *(_DWORD *)(v65 + 8) = *(_DWORD *)(v51 + 144) + v67;
        }
        *(_DWORD *)(v65 + 12) = (char)byte_1813CA2E4[v60 + 3];
        *(_BYTE *)(v65 + 1) = 0;
        *(void *)(v65 + 16) = 0LL;
        *(_WORD *)(v65 + 2) = 0;
        v63 += 40LL;
        v60 += 4LL;
      }

      while ((_DWORD)v60 != 48);
      *(_DWORD *)(v51 + 144) += 12;
      if (!v61) {
        break;
      }
      uint64_t v68 = v61 + 40LL * v62;
      *(_DWORD *)(v68 + 8) = v53;
      *(_DWORD *)(v68 + 12) = v53 + 2;
      *(_DWORD *)(v64 + 92) = v53;
      *(_DWORD *)(v64 + 124) = v53 - 1;
      *(_DWORD *)(v64 + 132) = v53;
      *(_WORD *)(v64 + 122) = 16;
      *(_DWORD *)(v64 + 168) = v53 + 1;
      *(_DWORD *)(v64 + 212) = v53;
      *(_DWORD *)(v64 + 244) = v53;
      *(_DWORD *)(v64 + 288) = v53 + 2;
      *(_DWORD *)(v64 + 284) = v53;
      *(_DWORD *)(v64 + 408) = v53;
      if (!*(_DWORD *)(a1 + 52)) {
        *(_DWORD *)(a1 + 52) = 1;
      }
      uint64_t v50 = (uint64_t *)*v50;
    }

    while (v50);
  }

  int v69 = *(int **)(a1 + 88);
  if (v69)
  {
    *(_BYTE *)(a1 + 35) = 0;
    if (*v69 >= 1)
    {
      uint64_t v70 = 0LL;
      unint64_t v71 = (unsigned int *)(v69 + 7);
      do
      {
        sub_181319C00(a1, *(unsigned __int8 **)(v71 - 5), *v71);
        ++v70;
        v71 += 6;
      }

      while (v70 < *v69);
    }
  }

  if (*(_BYTE *)(a1 + 219))
  {
    uint64_t v72 = *(void *)(a1 + 200);
    uint64_t v73 = *(unsigned int *)(v72 + 188);
    if ((_DWORD)v73)
    {
      uint64_t v74 = *(unsigned int *)(v72 + 184);
      int v75 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v75)
      {
        sub_18131044C(v11, 118LL, v74, v73, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v11 + 144) = v75 + 1;
        uint64_t v76 = *(void *)(v11 + 136) + 40LL * v75;
        *(_DWORD *)uint64_t v76 = 118;
        *(_DWORD *)(v76 + 4) = v74;
        *(_DWORD *)(v76 + 8) = v73;
        *(void *)(v76 + 12) = 0LL;
        *(void *)(v76 + 28) = 0LL;
        *(void *)(v76 + 20) = 0LL;
        *(_DWORD *)(v76 + 36) = 0;
      }
    }
  }

  int v77 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v77)
  {
    sub_18131044C(v11, 9LL, 0LL, 1LL, 0LL, a6, a7, a8);
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_93;
    }
LABEL_91:
    int v10 = 1;
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v77 + 1;
    uint64_t v78 = *(void *)(v11 + 136) + 40LL * v77;
    *(_DWORD *)uint64_t v78 = 9;
    *(void *)(v78 + 4) = 0x100000000LL;
    *(void *)(v78 + 12) = 0LL;
    *(void *)(v78 + 28) = 0LL;
    *(void *)(v78 + 20) = 0LL;
    *(_DWORD *)(v78 + 36) = 0;
    if (*(_DWORD *)(a1 + 48)) {
      goto LABEL_91;
    }
LABEL_93:
    sub_181279C8C(v11, a1);
LABEL_94:
    int v10 = 101;
  }

LABEL_95:
  *(_DWORD *)(a1 + 24) = v10;
}

          uint64_t v158 = v54;
          uint64_t v57 = *(_DWORD *)(v11 + 56) + 1;
          *(_DWORD *)(v11 + 56) = v57;
          goto LABEL_96;
        }
      }

      else
      {
        uint64_t v54 = *(_DWORD *)(v11 + 56) + 1;
        *(_DWORD *)(v11 + 56) = v54;
        uint64_t v55 = v52 + 2;
        if ((_DWORD)v52 == -1) {
          goto LABEL_95;
        }
      }

      uint64_t v158 = v54;
      unint64_t v71 = *(_DWORD *)(v11 + 40);
      uint64_t v72 = __OFSUB__(v71, v55);
      uint64_t v73 = v71 - v55;
      uint64_t v155 = v55;
      uint64_t v154 = 0;
      if (v73 < 0 != v72)
      {
        uint64_t v74 = *(_DWORD *)(v11 + 56);
        uint64_t v57 = v74 + 1;
        *(_DWORD *)(v11 + 56) = v74 + v55;
      }

      else
      {
        uint64_t v57 = *(_DWORD *)(v11 + 44);
        *(_DWORD *)(v11 + 40) = v73;
        *(_DWORD *)(v11 + 44) = v57 + v55;
      }

  BOOL v43 = *(_DWORD *)(v17 + 56);
  if (v43 >= 2)
  {
    *(_DWORD *)(v17 + 56) = v43 - 1;
    return 0LL;
  }

  sub_181359E08(v17);
  int v44 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_102:
    (*v44)(v17);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
  --qword_18C468B10;
  off_18C4653A8(v17);
  uint64_t v17 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v44 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_102;
  }

  return v17;
}

uint64_t sub_181279C3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40LL * (int)result;
  *(_BYTE *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 12) = a5;
  *(_BYTE *)(v10 + 1) = 0;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + 16) = 0LL;
  return result;
}

double sub_181279C8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 176) = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0LL;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a2 + 296);
  int v6 = *(_DWORD *)(a2 + 56);
  uint64_t v7 = *(int *)(a2 + 52);
  int v67 = *(_DWORD *)(a2 + 136);
  int v8 = v7 + v6;
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 <= 0;
  }
  if (v9) {
    int v10 = v8;
  }
  else {
    int v10 = v8 + 1;
  }
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v12 = 40 * *(_DWORD *)(a1 + 144);
  uint64_t v13 = *(int *)(a2 + 60) - v12;
  sub_1813108AC((void *)a1, &v67);
  if (*(_BYTE *)(a2 + 32)) {
    __int16 v14 = 32 * (*(_BYTE *)(a2 + 33) != 0);
  }
  else {
    __int16 v14 = 0;
  }
  uint64_t v15 = v11 + v12;
  int64_t v16 = v13 & 0xFFFFFFFFFFFFFFF8LL;
  __int16 v17 = *(_WORD *)(a1 + 268) & 0xFFDF | v14;
  *(_WORD *)(a1 + 268) = v17;
  char v18 = *(_BYTE *)(a2 + 301);
  if (v18)
  {
    if (v10 <= 10) {
      int v10 = 10;
    }
    __int16 v17 = v17 & 0xFFF3 | (4 * (v18 & 3));
    *(_WORD *)(a1 + 260) = (4 * (v18 & 3)) ^ 0xC;
  }

  *(_WORD *)(a1 + 268) = v17 & 0xFFFC;
  uint64_t v19 = (uint64_t)v10 << 6;
  uint64_t v20 = v15 + v16 - v19;
  if (v16 >= v19) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = (uint64_t)v10 << 6;
  }
  if (v16 < v19)
  {
    uint64_t v22 = 0LL;
  }

  else
  {
    v16 -= v19;
    uint64_t v22 = v20;
  }

  uint64_t v23 = (uint64_t)(int)v5 << 6;
  uint64_t v24 = v16 - v23;
  if (v16 >= v23) {
    uint64_t v25 = 0LL;
  }
  else {
    uint64_t v25 = (uint64_t)(int)v5 << 6;
  }
  uint64_t v26 = v25 + v21;
  if (v16 >= (uint64_t)(int)v5 << 6)
  {
    uint64_t v27 = v15 + v24;
  }

  else
  {
    uint64_t v24 = v16;
    uint64_t v27 = 0LL;
  }

  uint64_t v28 = 8LL * v67;
  uint64_t v30 = v24 - v28;
  BOOL v29 = v24 < v28;
  if (v24 >= v28) {
    uint64_t v31 = 0LL;
  }
  else {
    uint64_t v31 = 8LL * v67;
  }
  uint64_t v32 = v26 + v31;
  if (v24 >= v28) {
    v24 -= v28;
  }
  uint64_t v33 = v15 + v30;
  if (v29) {
    uint64_t v33 = 0LL;
  }
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v33;
  uint64_t v34 = 8 * v7;
  BOOL v35 = v24 < 8 * v7;
  uint64_t v36 = v15 + v24 - 8 * v7;
  if (v24 >= 8 * v7) {
    uint64_t v37 = 0LL;
  }
  else {
    uint64_t v37 = 8 * v7;
  }
  if (v35) {
    uint64_t v36 = 0LL;
  }
  *(void *)(a1 + 120) = v36;
  *(void *)(a1 + 128) = v27;
  uint64_t v38 = v32 + v37;
  if (v32 + v37)
  {
    uint64_t v39 = sub_1812F2264(v4, v32 + v37);
    *(void *)(a1 + 344) = v39;
    if (!*(_BYTE *)(v4 + 103))
    {
      uint64_t v40 = v38 - v19;
      uint64_t v41 = v39 + v38 - v19;
      if (v38 < v19)
      {
        uint64_t v40 = v38;
        uint64_t v41 = 0LL;
      }

      uint64_t v42 = *(void *)(a1 + 104);
      uint64_t v43 = *(void *)(a1 + 112);
      if (v42) {
        uint64_t v44 = v38;
      }
      else {
        uint64_t v44 = v40;
      }
      if (!v42) {
        uint64_t v42 = v41;
      }
      uint64_t v45 = v39 + v44 - v23;
      if (v44 >= v23) {
        uint64_t v46 = v44 - v23;
      }
      else {
        uint64_t v46 = v44;
      }
      if (v44 < v23) {
        uint64_t v45 = 0LL;
      }
      uint64_t v47 = *(void *)(a1 + 120);
      if (*(void *)(a1 + 128)) {
        uint64_t v45 = *(void *)(a1 + 128);
      }
      else {
        uint64_t v44 = v46;
      }
      *(void *)(a1 + 128) = v45;
      uint64_t v48 = v44 - v28;
      uint64_t v49 = v39 + v44 - v28;
      if (v44 < v28)
      {
        uint64_t v48 = v44;
        uint64_t v49 = 0LL;
      }

      if (v43) {
        uint64_t v48 = v44;
      }
      else {
        uint64_t v43 = v49;
      }
      *(void *)(a1 + 104) = v42;
      *(void *)(a1 + 112) = v43;
      if (!v47)
      {
        if (v48 >= v34) {
          uint64_t v47 = v39 + v48 - v34;
        }
        else {
          uint64_t v47 = 0LL;
        }
      }

      *(void *)(a1 + 120) = v47;
LABEL_67:
      *(_DWORD *)(a1 + 40) = v7;
      *(_DWORD *)(a1 + 32) = v5;
      if ((int)v5 >= 1)
      {
        uint64_t v50 = *(void *)(a1 + 128);
        uint64_t v51 = v50;
        if ((_DWORD)v5 == 1) {
          goto LABEL_72;
        }
        uint64_t v52 = v5;
        uint64_t v53 = v5 & 0xFFFFFFFE;
        LODWORD(v5) = v5 - (v5 & 0xFFFFFFFE);
        uint64_t v51 = v50 + (v53 << 6);
        uint64_t v54 = v50 + 84;
        uint64_t v55 = v53;
        do
        {
          *(_WORD *)(v54 - 64) = 1;
          *(_WORD *)uint64_t v54 = 1;
          *(void *)(v54 - 60) = v4;
          *(void *)(v54 + 4) = v4;
          *(_DWORD *)(v54 - 52) = 0;
          *(_DWORD *)(v54 + 12) = 0;
          v54 += 128LL;
          v55 -= 2LL;
        }

        while (v55);
        if (v53 != v52)
        {
LABEL_72:
          unsigned int v56 = v5 + 1;
          uint64_t v57 = (_DWORD *)(v51 + 32);
          do
          {
            *((_WORD *)v57 - 6) = 1;
            *((void *)v57 - 1) = v4;
            *uint64_t v57 = 0;
            v57 += 16;
            --v56;
          }

          while (v56 > 1);
        }
      }

      *(_DWORD *)(a1 + 36) = v10;
      if (v10 < 1) {
        goto LABEL_82;
      }
      uint64_t v58 = *(void *)(a1 + 104);
      if (v10 == 1)
      {
        uint64_t v59 = *(void *)(a1 + 104);
      }

      else
      {
        uint64_t v60 = v10;
        uint64_t v61 = v10 & 0xFFFFFFFE;
        v10 -= v61;
        uint64_t v59 = v58 + (v61 << 6);
        uint64_t v62 = v58 + 84;
        uint64_t v63 = v61;
        do
        {
          *(_WORD *)(v62 - 64) = 0;
          *(_WORD *)uint64_t v62 = 0;
          *(void *)(v62 - 60) = v4;
          *(void *)(v62 + 4) = v4;
          *(_DWORD *)(v62 - 52) = 0;
          *(_DWORD *)(v62 + 12) = 0;
          v62 += 128LL;
          v63 -= 2LL;
        }

        while (v63);
        if (v61 == v60) {
          goto LABEL_82;
        }
      }

      unsigned int v64 = v10 + 1;
      uint64_t v65 = (_DWORD *)(v59 + 32);
      do
      {
        *((_WORD *)v65 - 6) = 0;
        *((void *)v65 - 1) = v4;
        *uint64_t v65 = 0;
        v65 += 16;
        --v64;
      }

      while (v64 > 1);
LABEL_82:
      bzero(*(void **)(a1 + 120), 8 * v7);
      goto LABEL_83;
    }
  }

  else if (!*(_BYTE *)(v4 + 103))
  {
    goto LABEL_67;
  }

  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0LL;
LABEL_83:
  *(_BYTE *)(a1 + 267) = 1;
  *(_DWORD *)(a1 + 52) = 0;
  *(_WORD *)(a1 + 264) = -254;
  *(void *)(a1 + 56) = 0LL;
  double result = NAN;
  *(void *)(a1 + 44) = 0xFFFFFFFF00000001LL;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0LL;
  return result;
}

void *sub_181279FFC(void *result, int a2, uint64_t *a3)
{
  uint64_t v3 = (void **)result[1];
  switch(a2)
  {
    case 204:
    case 239:
    case 240:
    case 252:
      if (*a3) {
        double result = sub_18128FDA0(*v3, *a3, 1);
      }
      break;
    case 216:
    case 217:
    case 246:
    case 248:
    case 267:
    case 278:
    case 280:
    case 283:
    case 290:
    case 295:
    case 311:
      uint64_t v4 = (unsigned __int8 *)*a3;
      if (*a3) {
        goto LABEL_11;
      }
      break;
    case 221:
    case 231:
    case 232:
    case 244:
    case 247:
    case 249:
    case 253:
    case 254:
    case 261:
    case 268:
    case 277:
    case 279:
    case 310:
      if (*a3) {
        double result = sub_181311F48(*v3, (void *)*a3);
      }
      break;
    case 238:
    case 245:
    case 256:
    case 257:
    case 262:
      double result = sub_18128FF4C(*v3, (void *)*a3);
      break;
    case 241:
      double result = sub_18130928C(*v3, (void *)*a3);
      break;
    case 251:
    case 306:
      uint64_t v5 = (void *)*a3;
      if (*a3)
      {
        int v6 = *v3;
        do
        {
          uint64_t v7 = (void *)v5[8];
          double result = sub_1813091C8(v6, v5);
          uint64_t v5 = v7;
        }

        while (v7);
      }

      break;
    case 263:
    case 270:
      int v8 = (void *)*a3;
      if (*a3)
      {
        BOOL v9 = *v3;
        int v10 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          uint64_t v11 = 0LL;
          uint64_t v12 = 1LL;
          do
          {
            uint64_t v13 = (void *)v8[v12];
            if (v13)
            {
              sub_1812F20DC(v9, v13);
              int v10 = *(_DWORD *)v8;
            }

            ++v11;
            v12 += 2LL;
          }

          while (v11 < v10);
        }

        goto LABEL_31;
      }

      break;
    case 273:
    case 307:
    case 308:
    case 309:
    case 312:
      double result = sub_1813091C8(*v3, (void *)*a3);
      break;
    case 286:
    case 291:
      double result = sub_1812A01F4(*v3, *a3);
      break;
    case 288:
      int v8 = (void *)a3[1];
      if (v8)
      {
        BOOL v9 = *v3;
        int v14 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          uint64_t v15 = 0LL;
          uint64_t v16 = 1LL;
          do
          {
            __int16 v17 = (void *)v8[v16];
            if (v17)
            {
              sub_1812F20DC(v9, v17);
              int v14 = *(_DWORD *)v8;
            }

            ++v15;
            v16 += 2LL;
          }

          while (v15 < v14);
        }

void *sub_18127A1DC(void *a1, void *a2)
{
  if (a2)
  {
    if (a1[102]) {
      return sub_181311A80(a1, a2);
    }
    int v2 = *((_DWORD *)a2 + 11) - 1;
    *((_DWORD *)a2 + 11) = v2;
    if (!v2) {
      return sub_181311A80(a1, a2);
    }
  }

  return a1;
}

void *sub_18127A200(void *result, uint64_t a2)
{
  if (a2 && !*(_BYTE *)(a2 + 18))
  {
    uint64_t v3 = result;
    sub_1812A01F4(result, *(void *)(a2 + 56));
    if (*(void *)a2) {
      sub_1812F20DC(v3, *(void **)a2);
    }
    uint64_t v4 = *(void **)(a2 + 8);
    if (v4) {
      sub_1812F20DC(v3, v4);
    }
    uint64_t v5 = *(unsigned __int8 **)(a2 + 24);
    if (v5) {
      sub_181309110(v3, v5);
    }
    int v6 = *(void **)(a2 + 32);
    if (v6)
    {
      int v7 = *(_DWORD *)v6;
      if (*(int *)v6 >= 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = 1LL;
        do
        {
          int v10 = (void *)v6[v9];
          if (v10)
          {
            sub_1812F20DC(v3, v10);
            int v7 = *(_DWORD *)v6;
          }

          ++v8;
          v9 += 2LL;
        }

        while (v8 < v7);
      }

      sub_1813014B0(v3, v6);
    }

    return sub_1812F20DC(v3, (void *)a2);
  }

  return result;
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  uint64_t v1 = pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)pStmt;
    if (!*(void *)pStmt)
    {
      sqlite3_log(21, "API called with finalized prepared statement");
      return sub_1812CF36C(96994);
    }

    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      xmmword_18C465400(v3);
    }
    sub_1812D6A08(v2, (uint64_t)v1);
    unsigned int v4 = sub_18127A3A0((void **)v1);
    sub_1812CFA64((uint64_t)v1);
    if (v4 || *(_BYTE *)(v2 + 103)) {
      LODWORD(v1) = sub_1813037C4(v2, v4);
    }
    else {
      LODWORD(v1) = 0;
    }
    sub_1812D6500(v2, v5);
  }

  return (int)v1;
}

uint64_t sub_18127A3A0(void **a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (*((_BYTE *)a1 + 267) == 2) {
    sub_18127A498((uint64_t)a1);
  }
  if (((_DWORD)a1[6] & 0x80000000) == 0)
  {
    if (off_18C465508)
    {
      if (!*((_DWORD *)a1 + 13))
      {
        uint64_t v3 = (char *)a1[40];
        if (v3)
        {
          unsigned int v4 = sub_1812D9C50(a1, v3);
          if (v4)
          {
            double v5 = v4;
            off_18C465508(qword_18C465510, *a1, v4, 1LL);
            sub_1812F20DC(*a1, v5);
          }
        }
      }
    }

    if (*(void *)(v2 + 416) || a1[21]) {
      sub_1813017FC((uint64_t)a1);
    }
    else {
      *(_DWORD *)(v2 + 80) = *((_DWORD *)a1 + 13);
    }
  }

  sqlite3_db_release_memory((sqlite3 *)v2);
  int v6 = a1[21];
  if (v6)
  {
    sub_1812F20DC((void *)v2, v6);
    a1[21] = 0LL;
  }

  a1[20] = 0LL;
  a1[29] = 0LL;
  *((_DWORD *)a1 + 57) = 0;
  a1[26] = 0LL;
  a1[27] = 0LL;
  a1[25] = 0LL;
  return (*(_DWORD *)(v2 + 88) & *((_DWORD *)a1 + 13));
}

uint64_t sub_18127A498(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(_BYTE *)(*(void *)a1 + 103LL)) {
    *(_DWORD *)(a1 + 52) = 7;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 352);
  if (v3)
  {
    do
    {
      unsigned int v4 = v3;
      uint64_t v3 = (uint64_t *)v3[1];
    }

    while (v3);
    sub_181301A74(v4);
    *(void *)(a1 + 352) = 0LL;
    *(_DWORD *)(a1 + 368) = 0;
  }

  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i < v5; ++i)
    {
      int v7 = *(unsigned __int8 **)(*(void *)(a1 + 120) + 8 * i);
      if (v7)
      {
        sub_181301B60((void **)a1, v7);
        *(void *)(*(void *)(a1 + 120) + 8 * i) = 0LL;
        int v5 = *(_DWORD *)(a1 + 40);
      }
    }
  }

  unint64_t v8 = *(void *)(a1 + 104);
  int v9 = *(_DWORD *)(a1 + 36);
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    unint64_t v41 = v8 + ((uint64_t)v9 << 6);
    uint64_t v42 = *(void **)(v8 + 24);
    if (!v42[102])
    {
      while (1)
      {
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
        {
          sub_181303838(v8);
        }

        else
        {
          if (!*(_DWORD *)(v8 + 32)) {
            goto LABEL_65;
          }
          sub_1813014B0(v42, *(void **)(v8 + 40));
          *(_DWORD *)(v8 + 32) = 0;
        }

        *(_WORD *)(v8 + 20) = 0;
LABEL_65:
        v8 += 64LL;
        if (v8 >= v41) {
          goto LABEL_16;
        }
      }
    }

    do
    {
      if (*(_DWORD *)(v8 + 32))
      {
        uint64_t v43 = *(void **)(v8 + 40);
        if (v43) {
          sub_1812F20DC(v42, v43);
        }
      }

      v8 += 64LL;
    }

    while (v8 < v41);
  }

LABEL_16:
  for (uint64_t j = *(void **)(a1 + 360); j; uint64_t j = *(void **)(a1 + 360))
  {
    *(void *)(a1 + 360) = j[1];
    unint64_t v13 = (unint64_t)(j + 14);
    int v14 = *((_DWORD *)j + 23);
    uint64_t v15 = *((int *)j + 22);
    if (v14 < 1)
    {
      int v19 = *((_DWORD *)j + 22);
      if (!(_DWORD)v15) {
        goto LABEL_40;
      }
    }

    else
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v13 + (v15 << 6);
      do
      {
        char v18 = *(unsigned __int8 **)(v17 + 8 * v16);
        if (v18)
        {
          sub_181301B60((void **)*j, v18);
          int v14 = *((_DWORD *)j + 23);
        }

        ++v16;
      }

      while (v16 < v14);
      int v19 = *((_DWORD *)j + 22);
      if (!v19) {
        goto LABEL_40;
      }
    }

    unint64_t v20 = v13 + ((uint64_t)v19 << 6);
    uint64_t v21 = (void *)j[17];
    if (!v21[102])
    {
      while (1)
      {
        if ((*(_WORD *)(v13 + 20) & 0x9000) != 0)
        {
          sub_181303838(v13);
        }

        else
        {
          if (!*(_DWORD *)(v13 + 32)) {
            goto LABEL_36;
          }
          sub_1813014B0(v21, *(void **)(v13 + 40));
          *(_DWORD *)(v13 + 32) = 0;
        }

        *(_WORD *)(v13 + 20) = 0;
LABEL_36:
        v13 += 64LL;
        if (v13 >= v20) {
          goto LABEL_40;
        }
      }
    }

    do
    {
      if (*(_DWORD *)(v13 + 32))
      {
        uint64_t v22 = *(void **)(v13 + 40);
        if (v22) {
          sub_1812F20DC(v21, v22);
        }
      }

      v13 += 64LL;
    }

    while (v13 < v20);
LABEL_40:
    uint64_t v12 = *(void **)*j;
    uint64_t v23 = (void *)j[8];
    if (v23)
    {
      do
      {
        uint64_t v24 = (void (*)(void))v23[2];
        if (v24) {
          v24(v23[1]);
        }
        j[8] = v23[3];
        sub_1812F20DC(v12, v23);
        uint64_t v23 = (void *)j[8];
      }

      while (v23);
      uint64_t v12 = *(void **)*j;
    }

    sub_1812F20DC(v12, j);
  }

  uint64_t v25 = *(void **)(a1 + 384);
  if (v25)
  {
    uint64_t v26 = *(void **)a1;
    do
    {
      uint64_t v27 = (void (*)(void))v25[2];
      if (v27) {
        v27(v25[1]);
      }
      *(void *)(a1 + 384) = v25[3];
      sub_1812F20DC(v26, v25);
      uint64_t v25 = *(void **)(a1 + 384);
    }

    while (v25);
  }

  if ((*(_WORD *)(a1 + 268) & 0x80) == 0) {
    goto LABEL_143;
  }
  sub_1813018F0((_DWORD *)a1);
  int v35 = *(_DWORD *)(a1 + 52);
  if (!v35)
  {
LABEL_77:
    char v40 = 0;
LABEL_78:
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      *(_DWORD *)(a1 + 52) = 787;
      *(_BYTE *)(a1 + 264) = 2;
      sub_181302AB0((uint64_t *)a1, "FOREIGN KEY constraint failed", v28, v29, v30, v31, v32, v33, v62);
    }

    int v38 = 0;
    goto LABEL_81;
  }

  if (*(_DWORD *)(a1 + 52) > 0xDu || ((1 << v35) & 0x2680) == 0)
  {
    if (*(_BYTE *)(a1 + 264) != 3)
    {
      int v38 = 0;
      char v40 = 0;
LABEL_81:
      int v39 = 1;
      goto LABEL_82;
    }

    goto LABEL_77;
  }

  int v36 = *(_DWORD *)(a1 + 52);
  __int16 v37 = *(_WORD *)(a1 + 268);
  if (v36 == 9 && (v37 & 0x40) != 0)
  {
    int v38 = 0;
    int v39 = 1;
    char v40 = 1;
    goto LABEL_82;
  }

  if ((v36 == 13 || v36 == 7) && (v37 & 0x20) != 0)
  {
    int v39 = 0;
    char v40 = 1;
    int v38 = 2;
  }

  else
  {
    sub_1812C8198(v2, 516, v34);
    for (int k = *(void **)(v2 + 760); k; int k = *(void **)(v2 + 760))
    {
      *(void *)(v2 + 760) = k[3];
      sub_1812F20DC((void *)v2, k);
    }

    int v38 = 0;
    *(void *)(v2 + 788) = 0LL;
    *(_BYTE *)(v2 + 109) = 0;
    char v40 = 1;
    *(_BYTE *)(v2 + 101) = 1;
    *(void *)(a1 + 56) = 0LL;
    int v39 = 1;
    if (!*(_DWORD *)(a1 + 52)) {
      goto LABEL_78;
    }
  }

    unint64_t v13 = *((_DWORD *)a2 + 1);
    if ((v13 & 0x200) == 0) {
      return 0LL;
    }
    uint64_t v11 = (unsigned __int8 *)*((void *)a2 + 2);
    if (!v11 || (v11[5] & 2) == 0)
    {
      uint64_t v11 = (unsigned __int8 *)*((void *)a2 + 3);
      if ((v13 & 0x1000) == 0)
      {
        int v14 = (unsigned int *)*((void *)a2 + 4);
        if (v14)
        {
          if (!*(_BYTE *)(v9 + 103))
          {
            uint64_t v15 = *v14;
            if ((int)v15 >= 1)
            {
              uint64_t v16 = v14 + 2;
              while ((*(_BYTE *)(*(void *)v16 + 5LL) & 2) == 0)
              {
                v16 += 6;
                if (!--v15) {
                  goto LABEL_6;
                }
              }

              uint64_t v11 = *(unsigned __int8 **)v16;
            }
          }
        }
      }
    }

            sub_1812DC47C(v246, "too many arguments on %s() - max %d", v23, v24, v25, v26, v27, v28, *(void *)v40);
            uint64_t v30 = v247;
          }
        }
      }

    ++v28;
  }

  if (*v28) {
    goto LABEL_16;
  }
  *(void *)(a2 + 104) = v27;
LABEL_23:
  uint64_t v32 = *(void *)(v23 + 96);
  uint64_t v33 = *(void *)(v12 + 32);
  if (v32)
  {
    double v34 = (uint64_t *)(v33 + 24);
    LODWORD(v35) = -1;
    do
    {
      int v36 = *v34;
      v34 += 4;
      int v35 = (v35 + 1);
    }

    while (v36 != v32);
  }

  else
  {
    int v35 = 4294934528LL;
  }

  __int16 v37 = *(void *)a1;
  int v38 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)a1 + 528LL);
  if (v38 && !*(_BYTE *)(v37 + 197) && !*(_BYTE *)(a1 + 302))
  {
    uint64_t v78 = v38( *(void *)(v37 + 536),  18LL,  *(void *)v23,  0LL,  *(void *)(v33 + 32LL * (int)v35),  *(void *)(a1 + 368));
    if (v78 == 1)
    {
      uint64_t v79 = v332;
      uint64_t v80 = 23;
      uint64_t v81 = "not authorized";
    }

    else
    {
      if ((v78 & 0xFFFFFFFD) == 0)
      {
        if (!v78) {
          goto LABEL_31;
        }
        goto LABEL_41;
      }

      uint64_t v79 = v332;
      uint64_t v80 = 1;
      uint64_t v81 = "authorizer malfunction";
    }

    v332 = v79;
    sub_1812DC47C(a1, v81, v17, v18, v19, v20, v21, v22, v298);
    int v14 = 0LL;
    *(_DWORD *)(a1 + 24) = v80;
    goto LABEL_42;
  }

  unint64_t v13 = 0;
  int v14 = *(void **)(a1 + 488);
  if (!v14) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v15 = 0;
  do
  {
    int v14 = (void *)*v14;
    --v15;
  }

  while (v14);
LABEL_18:
  if (v11 + v9 + v13 + v15 + *(_DWORD *)(a1 + 444) > 0) {
    return 5LL;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    unint64_t v17 = *(void *)(a1 + 504);
    if (v17)
    {
      char v18 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_27:
        a1 = (*v18)(v17);
        goto LABEL_28;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v17);
      --qword_18C468B10;
      a1 = off_18C4653A8(v17);
      unint64_t v17 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        char v18 = &xmmword_18C465410;
        goto LABEL_27;
      }
    }
  }

      if (*(_DWORD *)(a1 + 96)) {
        uint64_t v12 = v94 == 0;
      }
      else {
        uint64_t v12 = 1;
      }
      if (v12) {
        return 100LL;
      }
      continue;
    }

    break;
  }

  ++*(_DWORD *)(a1 + 448);
  return (uint64_t)v3;
}

  uint64_t v11 = qword_18C4653F0(11LL);
  if (v11) {
    xmmword_18C465410(v11);
  }
  return v10;
}

  *(void *)(v1 + 120) = 0LL;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

    unint64_t v17 = (v8 - 12) >> 1;
    goto LABEL_18;
  }

  BOOL v10 = *a2;
  if (*a2 < 0)
  {
    unint64_t v13 = a2[1];
    if (a2[1] < 0)
    {
      uint64_t v15 = a2[2];
      if (v15 < 0)
      {
        int v9 = sub_18129BD74(a2, (unint64_t *)&v59);
        uint64_t v11 = 0LL;
        if (DWORD1(v59)) {
          BOOL v10 = -1;
        }
        else {
          BOOL v10 = v59;
        }
      }

      else
      {
        uint64_t v11 = 0LL;
        BOOL v10 = v15 & 0x7F | (v10 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
        int v9 = 3;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      BOOL v10 = ((v10 & 0x7F) << 7) | v13;
      int v9 = 2;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    int v9 = 1;
  }

  char v18 = v10;
  if (v10 > a1) {
    goto LABEL_19;
  }
LABEL_24:
  uint64_t v58 = (char *)a3 + 31;
  while (1)
  {
    uint64_t v21 = *(_WORD *)(v7 + 20);
    if ((v21 & 0x24) == 0) {
      break;
    }
    uint64_t v22 = a2[v9];
    uint64_t v23 = v22 == 10;
    if (v22 >= 0xA) {
      goto LABEL_136;
    }
    if (v22 == 7)
    {
      uint64_t v28 = (unsigned __int8 *)&a2[v18];
      uint64_t v29 = ~((*v28 << 24) | (v28[1] << 16));
      *(void *)&uint64_t v30 = ((unint64_t)v28[4] << 24) | ((unint64_t)v28[5] << 16) | ((unint64_t)((*v28 << 24) | (v28[1] << 16) | (bswap32(*((unsigned __int16 *)v28 + 1)) >> 16)) << 32) | v28[7] | ((unint64_t)v28[6] << 8);
      *(double *)&__int16 v59 = v30;
      if ((*(void *)&v30 & 0xFFFFFFFFFFFFFLL) != 0 && (v29 & 0x7FF00000) == 0LL) {
        uint64_t v32 = 1;
      }
      else {
        uint64_t v32 = 8;
      }
      int v61 = v32;
      uint64_t v33 = v30;
      if (v30 < -9.22337204e18) {
        goto LABEL_135;
      }
      if (v30 >= 9.22337204e18) {
        goto LABEL_133;
      }
      double v34 = *(void *)v7;
      else {
        int v19 = 0xFFFFFFFFLL;
      }
      uint64_t v22 = 7;
      if ((_DWORD)v19) {
        goto LABEL_142;
      }
    }

    else
    {
      if (!a2[v9]) {
        goto LABEL_134;
      }
      uint64_t v24 = (unsigned __int8 *)&a2[v18];
      switch(a2[v9])
      {
        case 1:
          uint64_t v25 = (char)*v24;
          break;
        case 2:
          uint64_t v25 = v24[1] | (unint64_t)((uint64_t)(char)*v24 << 8);
          break;
        case 3:
          uint64_t v25 = ((uint64_t)(char)*v24 << 16) | ((unint64_t)v24[1] << 8) | v24[2];
          break;
        case 4:
          uint64_t v25 = (*v24 << 24) | ((unint64_t)v24[1] << 16) | ((unint64_t)v24[2] << 8) | v24[3];
          break;
        case 5:
          uint64_t v25 = bswap32(*(_DWORD *)(v24 + 2)) | ((unint64_t)(v24[1] | ((char)*v24 << 8)) << 32);
          break;
        case 6:
          uint64_t v25 = bswap64(*(void *)v24);
          break;
        default:
          uint64_t v25 = v22 - 8;
          break;
      }

      if (v25 < *(void *)v7) {
        goto LABEL_134;
      }
      if (v25 > *(void *)v7)
      {
        int v19 = 1LL;
        goto LABEL_142;
      }
    }

        sub_181309110((void *)*a1, v3);
        goto LABEL_17;
      }
    }

    BOOL v10 = (void *)sub_18126F0AC(24LL);
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }

  return a2;
}

  uint64_t result = sub_1812B9B68((uint64_t *)v15, 70LL, v14, a2, 0LL, (uint64_t)v13, 4294967290LL, a8);
  char v18 = *(_DWORD *)(v15 + 144);
  int v19 = __OFSUB__(v18, 1);
  unint64_t v20 = v18 - 1;
  if (v20 < 0 == v19) {
    *(_WORD *)(*(void *)(v15 + 136) + 40LL * v20 + 2) = 2;
  }
  return result;
}

  uint64_t v125 = a3;
  *(_OWORD *)(v12 + 464) = 0u;
  *(_OWORD *)(v12 + 480) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 368) = 0u;
  *(_OWORD *)(v12 + 384) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_OWORD *)(v12 + 352) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  int v14 = v9 + 56LL * a3;
  *(void *)(v14 + 32) = v12;
  *(_WORD *)(v14 + 18) |= 0x10u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 456) = 0u;
  *(_OWORD *)(v12 + 472) = 0u;
  *(_OWORD *)(v12 + 424) = 0u;
  *(_OWORD *)(v12 + 440) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_OWORD *)(v12 + 408) = 0u;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *(_BYTE *)(v12 + 17) = 0;
  *(void *)uint64_t v12 = v6;
  *(void *)(v12 + 8) = 0LL;
  *(_DWORD *)(v12 + 28) = 0;
  *(void *)(v12 + 20) = 0x800000000LL;
  *(void *)(v12 + 32) = v12 + 40;
  uint64_t result = (void *)sub_18132AD70(v12, v11, 43LL);
  uint64_t v15 = *(_DWORD *)(v12 + 20);
  if (v15 >= 1)
  {
    uint64_t v16 = v15 + 1;
    do
    {
      uint64_t result = (void *)sub_1812A2470(v5, v12, v16 - 2);
      --v16;
    }

    while (v16 > 1);
  }

  uint64_t v131 = v8;
  if (*(_BYTE *)(v8 + 103)) {
    return result;
  }
  unint64_t v17 = *(_DWORD *)(v12 + 20);
  int v130 = (uint64_t ***)v4;
  uint64_t v121 = a3;
  uint64_t v122 = v11;
  uint64_t v126 = v7;
  uint64_t v132 = v6;
  if (v17 <= 0)
  {
    uint64_t v124 = -1LL;
    *(void *)(v12 + 488) = -1LL;
    uint64_t v76 = v9 + 56LL * a3;
    *(_WORD *)(v76 + 20) = 512;
    *(_DWORD *)(v76 + 28) = -1;
    *(_BYTE *)(v4 + 17) = 1;
    goto LABEL_128;
  }

  uint64_t result = (void *)v131;
  uint64_t v127 = (uint64_t *)(v131 + 472);
  uint64_t v123 = (uint64_t *)(v131 + 464);
  char v18 = *(void *)(v12 + 32);
  int v19 = (char *)v6 + 604;
  unint64_t v20 = -1LL;
  uint64_t v21 = -1LL;
  do
  {
    uint64_t v22 = *(_WORD *)(v18 + 20);
    if ((v22 & 0x1FF) != 0)
    {
      uint64_t v23 = *(_WORD *)(v18 + 18);
      if ((v23 & 8) != 0) {
        goto LABEL_82;
      }
      uint64_t v24 = *(_DWORD *)(v18 + 28);
      uint64_t v25 = *((_DWORD *)v6 + 150);
      if (v25 == v24)
      {
        uint64_t v26 = 1LL;
        if ((v23 & 2) == 0) {
          goto LABEL_79;
        }
      }

      else
      {
        uint64_t v29 = *((unsigned int *)v6 + 149);
        if ((int)v29 < 2)
        {
LABEL_38:
          uint64_t v26 = 0LL;
          if ((v23 & 2) == 0)
          {
LABEL_79:
            v21 &= v26;
            int v54 = v26 & v20;
            if ((v22 & 2) != 0) {
              unint64_t v20 = v54;
            }
            else {
              unint64_t v20 = 0LL;
            }
            goto LABEL_82;
          }
        }

        else
        {
          uint64_t v30 = 0LL;
          uint64_t v31 = v29 - 1;
          while (*(_DWORD *)&v19[4 * v30] != v24)
          {
            if (v31 == ++v30) {
              goto LABEL_38;
            }
          }

          uint64_t v26 = 1LL << (v30 + 1);
          if ((v23 & 2) == 0) {
            goto LABEL_79;
          }
        }
      }

      uint64_t v32 = *(_DWORD *)(*(void *)(v12 + 32) + 56LL * *(int *)(v18 + 24) + 28);
      if (v25 == v32)
      {
        uint64_t v33 = 1LL;
      }

      else
      {
        double v34 = *((unsigned int *)v6 + 149);
        if ((int)v34 < 2)
        {
LABEL_48:
          uint64_t v33 = 0LL;
        }

        else
        {
          int v35 = 0LL;
          int v36 = v34 - 1;
          while (1)
          {
            __int16 v37 = *(_DWORD *)&v19[4 * v35++];
            if (v37 == v32) {
              break;
            }
            if (v36 == v35) {
              goto LABEL_48;
            }
          }

          uint64_t v33 = 1LL << v35;
        }
      }

      v26 |= v33;
      goto LABEL_79;
    }

    if (*((unsigned __int16 *)result + 218) <= 0x1E7u)
    {
      if (*((_DWORD *)result + 108))
      {
        if (*((_BYTE *)result + 103))
        {
          unint64_t v20 = 0LL;
          goto LABEL_82;
        }
      }

      else
      {
        ++*((_DWORD *)result + 113);
      }

      goto LABEL_50;
    }

    uint64_t v27 = (void *)(v131 + 472);
    uint64_t v28 = *v127;
    if (!*v127)
    {
      uint64_t v27 = (void *)(v131 + 464);
      uint64_t v28 = *v123;
      if (!*v123)
      {
        uint64_t result = (void *)v131;
        ++*(_DWORD *)(v131 + 456);
LABEL_50:
        uint64_t v28 = sub_1812F2440((uint64_t)result, 488LL);
        if (!v28)
        {
          unint64_t v20 = 0LL;
          uint64_t result = (void *)v131;
          int v6 = v132;
          goto LABEL_82;
        }

        goto LABEL_51;
      }
    }

    *uint64_t v27 = *(void *)v28;
    ++*(_DWORD *)(v131 + 448);
LABEL_51:
    *(void *)(v18 + 32) = v28;
    *(_WORD *)(v18 + 18) |= 0x20u;
    *(_WORD *)(v18 + 20) = 1024;
    *(_DWORD *)(v18 + 28) = -1;
    *(_OWORD *)(v28 + 248) = 0u;
    *(_OWORD *)(v28 + 232) = 0u;
    *(_OWORD *)(v28 + 216) = 0u;
    *(_OWORD *)(v28 + 200) = 0u;
    *(_OWORD *)(v28 + 184) = 0u;
    *(_OWORD *)(v28 + 168) = 0u;
    *(_OWORD *)(v28 + 152) = 0u;
    *(_OWORD *)(v28 + 136) = 0u;
    *(_OWORD *)(v28 + 120) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *(_OWORD *)(v28 + 456) = 0u;
    *(_OWORD *)(v28 + 472) = 0u;
    *(_OWORD *)(v28 + 424) = 0u;
    *(_OWORD *)(v28 + 440) = 0u;
    *(_OWORD *)(v28 + 392) = 0u;
    *(_OWORD *)(v28 + 408) = 0u;
    *(_OWORD *)(v28 + 360) = 0u;
    *(_OWORD *)(v28 + 376) = 0u;
    *(_OWORD *)(v28 + 328) = 0u;
    *(_OWORD *)(v28 + 344) = 0u;
    *(_OWORD *)(v28 + 296) = 0u;
    *(_OWORD *)(v28 + 312) = 0u;
    *(_OWORD *)(v28 + 264) = 0u;
    *(_OWORD *)(v28 + 280) = 0u;
    int v38 = *(void *)v4;
    *(_BYTE *)(v28 + 17) = 0;
    *(void *)uint64_t v28 = v38;
    *(void *)(v28 + 8) = 0LL;
    *(_DWORD *)(v28 + 28) = 0;
    *(void *)(v28 + 20) = 0x800000000LL;
    *(void *)(v28 + 32) = v28 + 40;
    sub_18132AD70(v28, *(void *)v18, 44LL);
    int v39 = *(_DWORD *)(v28 + 20);
    if (v39 >= 1)
    {
      char v40 = v39 + 1;
      do
      {
        sub_1812A2470(v5, v28, v40 - 2);
        --v40;
      }

      while (v40 > 1);
    }

    *(void *)(v28 + 8) = v4;
    if (*(_BYTE *)(v131 + 103) || (uint64_t v42 = *(_DWORD *)(v28 + 20), v42 < 1))
    {
      unint64_t v41 = 0LL;
      uint64_t result = (void *)v131;
      int v6 = v132;
    }

    else
    {
      uint64_t v43 = 0;
      unint64_t v41 = 0LL;
      uint64_t v44 = *(unsigned __int8 ***)(v28 + 32);
      uint64_t result = (void *)v131;
      int v6 = v132;
      do
      {
        int v45 = **v44;
        char v46 = v45 > 0x39;
        int v47 = (1LL << v45) & 0x3E6200000000000LL;
        int v48 = v46 || v47 == 0;
        if (!v48 || *((_WORD *)v44 + 10) == 64)
        {
          uint64_t v49 = *((_DWORD *)v44 + 7);
          if (*((_DWORD *)v132 + 150) == v49)
          {
            uint64_t v50 = 1LL;
          }

          else
          {
            uint64_t v51 = *((unsigned int *)v132 + 149);
            if ((int)v51 < 2)
            {
LABEL_69:
              uint64_t v50 = 0LL;
            }

            else
            {
              uint64_t v52 = 0LL;
              int v53 = v51 - 1;
              while (*(_DWORD *)&v19[4 * v52] != v49)
              {
                if (v53 == ++v52) {
                  goto LABEL_69;
                }
              }

              uint64_t v50 = 1LL << (v52 + 1);
            }
          }

          v41 |= v50;
        }

        ++v43;
        v44 += 7;
      }

      while (v43 != v42);
    }

    unint64_t v20 = 0LL;
    v21 &= v41;
LABEL_82:
    if (v17 < 2) {
      break;
    }
    --v17;
    v18 += 56LL;
  }

  while (v21);
  uint64_t v124 = v20;
  *(void *)(v12 + 488) = v21;
  double v55 = v9 + 56LL * v121;
  *(_WORD *)(v55 + 20) = 512;
  *(_DWORD *)(v55 + 28) = -1;
  if (v21)
  {
    unsigned int v56 = *(_DWORD *)(v12 + 20);
    *(_BYTE *)(v4 + 17) = 1;
    if (v56 == 2)
    {
      uint64_t v57 = 0LL;
      uint64_t v58 = *(void *)(v12 + 32);
      while (1)
      {
        if (*(_WORD *)(v58 + 20) == 1024)
        {
          __int16 v59 = *(void *)(v58 + 32);
          uint64_t v60 = *(void *)(v59 + 32);
          if (!v60) {
            break;
          }
          int v61 = (unsigned __int16 *)(v60 + 56 * v57);
        }

        else
        {
          int v61 = (unsigned __int16 *)v58;
          if (v57) {
            break;
          }
        }

        char v62 = 0LL;
        uint64_t v128 = v57 + 1;
        while (*(_WORD *)(v58 + 76) != 1024)
        {
          uint64_t v65 = (unsigned __int16 *)(v58 + 56);
          if (v62) {
            goto LABEL_87;
          }
LABEL_100:
          if (((v65[9] | v61[9]) & 0x80) == 0)
          {
            uint64_t v66 = v61[10];
            int v67 = v65[10];
            if ((v66 & 0x3E) != 0 && (v67 & 0x3E) != 0)
            {
              int v69 = v67 | v66;
              if (((v67 | v66) & 0xFFE5) == 0 || (v69 & 0xFFD9) == 0)
              {
                uint64_t result = (void *)sub_18131BA10( 0LL,  *(unsigned __int8 **)(*(void *)v61 + 16LL),  *(unsigned __int8 **)(*(void *)v65 + 16LL),  0xFFFFFFFFLL);
                if (!(_DWORD)result)
                {
                  uint64_t result = (void *)sub_18131BA10( 0LL,  *(unsigned __int8 **)(*(void *)v61 + 24LL),  *(unsigned __int8 **)(*(void *)v65 + 24LL),  0xFFFFFFFFLL);
                  if (!(_DWORD)result)
                  {
                    if ((v69 & 0x18) != 0) {
                      unint64_t v71 = 8;
                    }
                    else {
                      unint64_t v71 = 32;
                    }
                    if (((v69 - 1) & v69) != 0) {
                      uint64_t v72 = v71;
                    }
                    else {
                      uint64_t v72 = v69;
                    }
                    if (*(void *)v61)
                    {
                      uint64_t result = sub_18129C928(***v130, *(unsigned __int8 **)v61, 0LL, 0LL);
                      if (result)
                      {
                        uint64_t v73 = 52;
                        do
                        {
                          uint64_t v74 = 2 << (v73 - 52);
                          ++v73;
                        }

                        while (v74 != v72);
                        *(_BYTE *)uint64_t result = v73;
                        int v75 = sub_1812A2264((uint64_t)v130, (uint64_t)result, 3);
                        uint64_t result = (void *)sub_1812A2470(v5, v130, v75);
                      }
                    }
                  }
                }
              }
            }
          }

          ++v62;
          uint64_t v58 = *(void *)(v12 + 32);
        }

        uint64_t v63 = *(void *)(v58 + 88);
        if (v62 < *(int *)(v63 + 20))
        {
          unsigned int v64 = *(void *)(v63 + 32);
          uint64_t v65 = (unsigned __int16 *)(v64 + 56 * v62);
          if (v64) {
            goto LABEL_100;
          }
        }

    *(_BYTE *)(a2 + 28) &= ~1u;
    int v6 = (uint64_t *)(a2 + 32);
LABEL_17:
    *int v6 = 0LL;
    return result;
  }

  if ((v2 & 0x4000) != 0)
  {
    int v6 = (uint64_t *)(a2 + 32);
    int v5 = *(void *)(a2 + 32);
    if (v5)
    {
      if (*(void *)(v5 + 32))
      {
        sub_1812F20DC(result, *(void **)(v5 + 32));
        int v5 = *v6;
      }

      uint64_t result = sub_1812F20DC(v4, (void *)v5);
      goto LABEL_17;
    }
  }

  return result;
}

  *(void *)(v20 + 24) = v25;
  uint64_t v26 = v11[4];
  uint64_t v27 = *(const void **)(v26 + 32 * v16);
  if (v27)
  {
    uint64_t v28 = strlen(*(const char **)(v26 + 32 * v16)) + 1;
    uint64_t v29 = (void *)sub_1812F2264((uint64_t)v11, v28);
    uint64_t v30 = v29;
    if (v29) {
      memcpy(v29, v27, v28);
    }
  }

  else
  {
    uint64_t v30 = 0LL;
  }

  a6 = v22;
  *(void *)(v20 + 16) = v30;
  a4 = v38;
LABEL_21:
  uint64_t v31 = sub_181280000((void **)a1, 0LL, (_OWORD *)v20, (uint64_t)v17, 0LL, 0LL, a4, 0x20000, a5);
  v39[0] = 12;
  uint64_t v43 = 0LL;
  char v40 = a6;
  unint64_t v41 = 0LL;
  uint64_t v42 = 0;
  uint64_t result = (void *)sub_1812801A8((void **)a1, (uint64_t)v31, (uint64_t)v39, v32, v33, v34, v35, v36);
  if (v31) {
    return sub_18128FDA0(v11, (uint64_t)v31, 1);
  }
  return result;
}

    int v9 = 0LL;
    goto LABEL_17;
  }

  BOOL v10 = *(double *)result;
  if (*(double *)result < -9.22337204e18)
  {
    int v9 = 0x8000000000000000LL;
    goto LABEL_17;
  }

  if (v10 > 9.22337204e18)
  {
    v7[1] = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_19;
  }

  uint64_t result = (uint64_t)v10;
LABEL_13:
  v7[1] = result;
  if (result <= 0) {
    goto LABEL_18;
  }
LABEL_19:
  ++*v7;
  return result;
}

      int v6 = 97441;
      goto LABEL_21;
    default:
      if (a2)
      {
        uint64_t v3 = *(int *)(a1 + 132);
LABEL_13:
        int v5 = *(void *)a2;
        if ((*(_WORD *)(*(void *)a2 + 20LL) & 0x9000) != 0)
        {
          sub_1813040AC(v5, v3);
        }

        else
        {
          *(void *)int v5 = v3;
          *(_WORD *)(v5 + 20) = 4;
        }
      }

      else
      {
LABEL_17:
        int v6 = 97431;
LABEL_21:
        sub_1812CF36C(v6);
      }

      return 0LL;
  }

    unsigned int v4 = a2;
    *(_DWORD *)(a2 + 12) = 0;
    unint64_t v13 = *v6;
    if (!*(void *)(*v6 + 40)) {
      return 0LL;
    }
    int v14 = *(int *)(v13 + 72);
    *(_DWORD *)(a2 + 64) = v14;
    uint64_t v15 = *(const void **)(v13 + 80);
    *(void *)(a2 + 56) = v15;
    if (*(void *)v116 && (v120 & 0x10) == 0)
    {
      uint64_t result = 0LL;
      uint64_t v16 = (v120 & 8) == 0;
      unint64_t v17 = *(int *)(v116 + 8);
    }

    if (v121 < 2)
    {
      LODWORD(v8) = 1;
    }

    else
    {
      char v18 = 1LL;
      while (1)
      {
        int v19 = v6[v18];
        if (!*(void *)(v19 + 40)
          || *(_DWORD *)(v19 + 72) != (_DWORD)v14
          || memcmp(v15, *(const void **)(v19 + 80), v14))
        {
          break;
        }

        if (v2 == ++v18)
        {
          LODWORD(v8) = v2;
          goto LABEL_57;
        }
      }

      LODWORD(v8) = v18;
    }

    sub_1812CF36C(97441);
    return 0LL;
  }

  if (v5 == 1)
  {
    if (a2)
    {
      int v9 = *(void *)(a1 + 48);
      goto LABEL_14;
    }

    goto LABEL_16;
  }

  int v6 = a3;
  if (v5)
  {
LABEL_21:
    uint64_t result = sub_1813746B0(0LL, a1);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)v11 + 24LL);
      if (v12) {
        xmmword_18C465400(v12);
      }
      if (*(void *)(v11 + 160)) {
        unint64_t v13 = *(unsigned __int16 *)(v11 + 260);
      }
      else {
        unint64_t v13 = 0;
      }
      int v14 = *(void *)(*(void *)v11 + 24LL);
      if (v14) {
        xmmword_18C465410(v14);
      }
    }

    else
    {
      unint64_t v13 = 0;
    }

    if (v13 - 1 > v6)
    {
      uint64_t v15 = sqlite3_column_value(*(sqlite3_stmt **)(a1 + 16), v6 + 1);
      sqlite3_result_value((sqlite3_context *)a2, v15);
    }

    return 0LL;
  }

  if (!a2)
  {
    sub_1812CF36C(97467);
    return 0LL;
  }

  int v7 = *a2;
  if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32)) {
    sub_181303838(v7);
  }
  *(_WORD *)(v7 + 20) = 1;
  sub_181303838(v7);
  uint64_t result = 0LL;
  *(void *)int v7 = "fts3cursor";
  *(void *)(v7 + 8) = a1;
  *(_WORD *)(v7 + 20) = 6657;
  *(_BYTE *)(v7 + 23) = 112;
  *(_BYTE *)(v7 + 56) = 0;
  *(void *)(v7 + 48) = nullsub_7;
  return result;
}

    uint64_t result = 7LL;
    goto LABEL_22;
  }

        *(_OWORD *)char v18 = 0u;
        *(_OWORD *)&v4[8 * v16 - 2] = 0u;
        *(void *)char v18 = sub_18138BCF4( a1,  (((v17 << 31) + 0x7FFFFFFF00000000LL) & 0x7FFFFFFF80000000LL)
                         + ((unint64_t)v4[1] << 37)
                         + v4[8 * v16 + 7]
                         + 0x1000000000LL);
        if (*(_DWORD *)(a1 + 60)) {
          goto LABEL_30;
        }
      }
    }
  }

  else if ((int)v16 >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = (uint64_t)(v4 + 2);
    do
    {
      sub_181390E7C(v22);
      ++v21;
      v22 += 32LL;
    }

    while (v21 < *v4);
  }

  if (*(_DWORD *)(a1 + 60)) {
    goto LABEL_30;
  }
  return v4;
}

    LODWORD(v9) = v9 - v14;
    if (!*v6)
    {
      *(_DWORD *)(a1 + 60) = 267;
      return result;
    }

    uint64_t result = sub_18138BCF4(a1, i + ((unint64_t)**v6 << 37));
    if (!result) {
      return result;
    }
    unint64_t v8 = result;
    uint64_t v21 = result[2];
    if (v21 < 4) {
      break;
    }
    uint64_t v22 = result[3];
    if (v22 > v21) {
      break;
    }
    uint64_t v23 = *(void *)result;
    uint64_t v24 = v22 - 4;
    else {
      int v14 = v9;
    }
    if (!v17)
    {
      v6[3] = result;
      unint64_t v8 = 0LL;
    }

    uint64_t v12 = v23 + 4;
    --v17;
  }

  *(_DWORD *)(a1 + 60) = 267;
  uint64_t v25 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (unsigned int *)(*v25)(v8);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
  --qword_18C468B10;
  uint64_t result = (unsigned int *)off_18C4653A8(v8);
  unint64_t v8 = (unsigned int *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v25 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
    return (unsigned int *)(*v25)(v8);
  }

  return result;
}

  int v6 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v6)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v6 = &xmmword_18C465410;
    return (*v6)(v1);
  }

  return result;
}

      uint64_t v15 = 0;
      goto LABEL_17;
    }

  *a5 = v15;
  return result;
}

  int v14 = 7LL;
  if (*(void *)(a1 + 8)) {
    goto LABEL_24;
  }
LABEL_17:
  if (*(_DWORD *)(v8 + 32)) {
    uint64_t v15 = "tables_used";
  }
  else {
    uint64_t v15 = "bytecode";
  }
  *(void *)(v8 + 16) = sqlite3_mprintf("argument to %s() is not a valid SQL statement", v15);
  return 1LL;
}

  sub_1813BB7D4(a1, *(_DWORD *)(a3 + 16), a4);
  sub_1813BB8F8(a1, *(void **)(a3 + 40), *(unsigned int *)(a3 + 16), a4);
  uint64_t v15 = *(char **)(a3 + 8);
  uint64_t v16 = strlen(v15) + 1;
  return sub_1813BB8F8(a1, v15, v16, a4);
}

  uint64_t result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

LABEL_82:
  if (*(int *)(v2 + 564) >= 1 && !*(void *)(v2 + 600)
    || !*(_BYTE *)(v2 + 101)
    || *(_DWORD *)(v2 + 216) != ((*(_WORD *)(a1 + 268) & 0x40) == 0))
  {
    if (v39)
    {
      if (!*(_DWORD *)(a1 + 52) || (int v47 = *(unsigned __int8 *)(a1 + 264), v47 == 3))
      {
        int v38 = 1;
      }

      else
      {
        if (v47 != 2)
        {
          sub_1812C8198(v2, 516, v34);
          for (uint64_t m = *(void **)(v2 + 760); m; uint64_t m = *(void **)(v2 + 760))
          {
            *(void *)(v2 + 760) = m[3];
            sub_1812F20DC((void *)v2, m);
          }

          uint64_t v51 = 0LL;
          *(void *)(v2 + 788) = 0LL;
          *(_BYTE *)(v2 + 109) = 0;
          *(_BYTE *)(v2 + 101) = 1;
          *(void *)(a1 + 56) = 0LL;
          if ((*(_BYTE *)(a1 + 268) & 0x10) == 0) {
            goto LABEL_141;
          }
          goto LABEL_139;
        }

        int v38 = 2;
      }
    }

    goto LABEL_124;
  }

  int v45 = *(_DWORD *)(a1 + 52);
  if (v45)
  {
    char v46 = *(_BYTE *)(a1 + 264) == 3 ? v40 : 1;
    if ((v46 & 1) != 0)
    {
      if (v45 == 17 && *(int *)(v2 + 208) >= 2)
      {
LABEL_119:
        *(void *)(a1 + 56) = 0LL;
        *(_DWORD *)(v2 + 792) = 0;
        if ((v39 & 1) != 0) {
          goto LABEL_120;
        }
        goto LABEL_124;
      }

          if (*(_BYTE *)(a1 + 63))
          {
LABEL_83:
            v23[29] = -1;
            if (!*(_BYTE *)(a1 + 63)) {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  7LL,  1LL,  9LL,  v22);
            }
            unsigned int v4 = 0LL;
          }

          else
          {
            uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  7LL,  1LL,  10LL);
            unsigned int v4 = v28;
            if ((_DWORD)v28 != 5)
            {
              if ((_DWORD)v28) {
                goto LABEL_23;
              }
              goto LABEL_83;
            }
          }

          if (*(_DWORD *)(a1 + 92)) {
            sqlite3_log(283, "recovered %d frames from WAL file %s", *(_DWORD *)(a1 + 88), *(const char **)(a1 + 128));
          }
        }

          if (*((_DWORD *)a1 + 12)) {
            goto LABEL_15;
          }
          while (1)
          {
            uint64_t v72 = *v68;
            uint64_t v68 = (unsigned __int8 *)*((void *)v68 + 2);
          }

          if (v72 == 176) {
            uint64_t v72 = v68[2];
          }
          if ((v72 - 153) >= 3 && v72 != 117)
          {
            if (v72 != 167
              || (v68[6] & 0x20) != 0
              || (uint64_t v73 = *((void *)v68 + 9)) == 0
              || (uint64_t v74 = *((unsigned int *)v68 + 12), (v74 & 0x80000000) == 0)
              && (int v75 = *(void *)(v73 + 8)) != 0
              && (*(_BYTE *)(v75 + 16 * v74 + 8) & 0xF) == 0)
            {
              uint64_t v27 = (v44 + v66);
              uint64_t v76 = *(_DWORD *)(v23 + 144);
              if (*(_DWORD *)(v23 + 148) > v76)
              {
                *(_DWORD *)(v23 + 144) = v76 + 1;
                int v67 = *(void *)(v23 + 136) + 40LL * v76;
                *(_DWORD *)int v67 = 50;
                *(_DWORD *)(v67 + 4) = v27;
                *(_DWORD *)(v67 + 8) = v65;
                *(void *)(v67 + 12) = 0LL;
                *(void *)(v67 + 28) = 0LL;
                *(void *)(v67 + 20) = 0LL;
                *(_DWORD *)(v67 + 36) = 0;
              }

              else
              {
                sub_18131044C(v23, 50LL, v27, v65, 0LL, v30, v31, v32);
              }
            }
          }
        }

        unint64_t v71 = (int **)(*((void *)v68 + 4) + 32LL);
LABEL_77:
        if (**v71 >= 2)
        {
          if (v69 == 138 || v68[2] == 138) {
            uint64_t v68 = (unsigned __int8 *)*((void *)v68 + 4);
          }
          uint64_t v68 = *(unsigned __int8 **)(*((void *)v68 + 4) + 24 * v66 + 8);
        }

        goto LABEL_82;
      }

  sub_181343BC4((uint64_t *)a1, v16, j, v77, (uint64_t)v142, a7, 0LL, 0LL, v131);
  if (v77) {
    sub_181311F48(v12, v77);
  }
  int v54 = 0LL;
  uint64_t v70 = v16;
  int v45 = v137;
LABEL_85:
  if (*v142 == 1) {
    sub_18128E90C((uint64_t **)v54, v27, v28, v29, v30, v31, v32, v33);
  }
  uint64_t v95 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) > v95)
  {
    *(_DWORD *)(v11 + 144) = v95 + 1;
    uint64_t v96 = *(void *)(v11 + 136) + 40LL * v95;
    *(_DWORD *)uint64_t v96 = 36;
    *(_DWORD *)(v96 + 4) = v70;
    *(_OWORD *)(v96 + 8) = 0u;
    *(_OWORD *)(v96 + 24) = 0u;
    uint64_t v141 = v95;
    if (v136 < -1) {
      goto LABEL_98;
    }
LABEL_91:
    uint64_t v97 = 0LL;
    if (v140 <= 1) {
      uint64_t v98 = 1;
    }
    else {
      uint64_t v98 = v140;
    }
    do
    {
      uint64_t v100 = (v45 + v97);
      uint64_t v101 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) > v101)
      {
        *(_DWORD *)(v11 + 144) = v101 + 1;
        uint64_t v99 = *(void *)(v11 + 136) + 40LL * v101;
        *(_DWORD *)uint64_t v99 = 94;
        *(_DWORD *)(v99 + 4) = v70;
        *(_DWORD *)(v99 + 8) = v97;
        *(_DWORD *)(v99 + 12) = v100;
        *(void *)(v99 + 24) = 0LL;
        *(void *)(v99 + 32) = 0LL;
        *(void *)(v99 + 16) = 0LL;
      }

      else
      {
        sub_18131044C(v11, 94LL, v70, v97, v100, v31, v32, v33);
      }

      uint64_t v97 = (v97 + 1);
    }

    while (v98 != (_DWORD)v97);
    goto LABEL_98;
  }

  uint64_t v141 = sub_18131044C(v11, 36LL, v70, 0LL, 0LL, v31, v32, v33);
  if (v136 >= -1) {
    goto LABEL_91;
  }
LABEL_98:
  uint64_t v102 = 1;
LABEL_99:
  sub_18133EBBC((uint64_t *)a1, a3);
  uint64_t result = (void *)sub_1812B9B68((uint64_t *)v11, 7LL, 0LL, v140, v45, (uint64_t)i, 4294967285LL, v103);
  uint64_t v111 = *(_DWORD *)(v11 + 144);
  if (v111 >= 1)
  {
    if (v134 == 11) {
      uint64_t v112 = 2;
    }
    else {
      uint64_t v112 = v134;
    }
    *(_WORD *)(*(void *)(v11 + 136) + 40LL * (v111 - 1) + 2) = v112;
  }

  uint64_t v113 = a1[21];
  if (!v113) {
    uint64_t v113 = a1;
  }
  *((_BYTE *)v113 + 33) = 1;
  if (!v102) {
    return sub_18128E90C((uint64_t **)v54, v104, v105, v106, v107, v108, v109, v110);
  }
  uint64_t v114 = (v141 + 1);
  if (*(_DWORD *)(v11 + 148) <= v111)
  {
    uint64_t result = (void *)sub_18131044C(v11, 39LL, v70, v114, 0LL, v108, v109, v110);
  }

  else
  {
    *(_DWORD *)(v11 + 144) = v111 + 1;
    uint64_t v115 = *(void *)(v11 + 136) + 40LL * v111;
    *(_DWORD *)uint64_t v115 = 39;
    *(_DWORD *)(v115 + 4) = v70;
    *(_DWORD *)(v115 + 8) = v114;
    *(void *)(v115 + 12) = 0LL;
    *(void *)(v115 + 28) = 0LL;
    *(void *)(v115 + 20) = 0LL;
    *(_DWORD *)(v115 + 36) = 0;
  }

  uint64_t v116 = *(_DWORD *)(v11 + 144);
  if (*(_BYTE *)(*(void *)v11 + 103LL)) {
    uint64_t v117 = &byte_18C550680;
  }
  else {
    uint64_t v117 = (char *)(*(void *)(v11 + 136) + 40LL * v141);
  }
  *((_DWORD *)v117 + 2) = v116;
  if (*(_DWORD *)(v11 + 148) <= v116) {
    return (void *)sub_18131044C(v11, 122LL, v70, 0LL, 0LL, v108, v109, v110);
  }
  *(_DWORD *)(v11 + 144) = v116 + 1;
  uint64_t v118 = *(void *)(v11 + 136) + 40LL * v116;
  *(_DWORD *)uint64_t v118 = 122;
  *(_DWORD *)(v118 + 4) = v70;
  *(_OWORD *)(v118 + 8) = 0u;
  *(_OWORD *)(v118 + 24) = 0u;
  return result;
}

    int v19 = 0LL;
    goto LABEL_83;
  }

  uint64_t v24 = *a3;
  if (v5 != 4 && v7 != 4)
  {
    if (!v24) {
      goto LABEL_74;
    }
    uint64_t v28 = *((unsigned __int16 *)v24 + 10);
    if ((~v28 & 0x202) == 0 && *((_BYTE *)v24 + 22) == 1)
    {
      unint64_t v17 = (_BYTE *)*((void *)v24 + 1);
      goto LABEL_75;
    }

    if ((v28 & 1) != 0) {
LABEL_74:
    }
      unint64_t v17 = 0LL;
    else {
      unint64_t v17 = (_BYTE *)sub_181303998((int *)v24, 1);
    }
LABEL_75:
    uint64_t v30 = a3[1];
    if (v30)
    {
      uint64_t v31 = *((unsigned __int16 *)v30 + 10);
      if ((~v31 & 0x202) != 0 || *((_BYTE *)v30 + 22) != 1)
      {
        if ((v31 & 1) != 0) {
          goto LABEL_82;
        }
        char v18 = (unsigned __int8 *)sub_181303998((int *)v30, 1);
        if (!v18) {
          goto LABEL_82;
        }
      }

      else
      {
        char v18 = (unsigned __int8 *)*((void *)v30 + 1);
        if (!v18) {
          goto LABEL_82;
        }
      }

      goto LABEL_43;
    }

    goto LABEL_82;
  }

  uint64_t v26 = sqlite3_value_dup(v24);
  int v19 = (uint64_t)v26;
  if (!v26) {
    goto LABEL_83;
  }
  uint64_t v27 = *((unsigned __int16 *)v26 + 10);
  if ((~v27 & 0x202) == 0 && *((_BYTE *)v26 + 22) == 1)
  {
    unint64_t v17 = (_BYTE *)*((void *)v26 + 1);
    goto LABEL_68;
  }

  if ((v27 & 1) != 0)
  {
LABEL_83:
    unint64_t v20 = 0LL;
LABEL_84:
    sqlite3_result_error_nomem(a1);
    goto LABEL_85;
  }

  unint64_t v17 = (_BYTE *)sub_181303998((int *)v26, 1);
LABEL_68:
  if (!v17) {
    goto LABEL_83;
  }
  uint64_t v29 = *(_WORD *)(v19 + 20);
  if ((v29 & 2) != 0 && *(_BYTE *)(v19 + 22) == 1)
  {
    uint64_t v11 = *(_DWORD *)(v19 + 16);
  }

  else if ((v29 & 0x10) != 0)
  {
    uint64_t v11 = *(_DWORD *)(v19 + 16);
    if ((*(_WORD *)(v19 + 20) & 0x400) != 0) {
      v11 += *(_DWORD *)v19;
    }
  }

  else if ((v29 & 1) != 0)
  {
    uint64_t v11 = 0;
  }

  else
  {
    uint64_t v11 = sub_181303970(v19, 1);
  }

  int v36 = sqlite3_value_dup(a3[1]);
  unint64_t v20 = (uint64_t)v36;
  if (!v36) {
    goto LABEL_84;
  }
  __int16 v37 = *((unsigned __int16 *)v36 + 10);
  if ((~v37 & 0x202) != 0 || *((_BYTE *)v36 + 22) != 1)
  {
    if ((v37 & 1) != 0) {
      goto LABEL_84;
    }
    char v18 = (unsigned __int8 *)sub_181303998((int *)v36, 1);
  }

  else
  {
    char v18 = (unsigned __int8 *)*((void *)v36 + 1);
  }

  if (!v18) {
    goto LABEL_84;
  }
  int v38 = *(_WORD *)(v20 + 20);
  if ((v38 & 2) != 0 && *(_BYTE *)(v20 + 22) == 1)
  {
    int v14 = *(_DWORD *)(v20 + 16);
  }

  else if ((v38 & 0x10) != 0)
  {
    int v14 = *(_DWORD *)(v20 + 16);
    if ((*(_WORD *)(v20 + 20) & 0x400) != 0) {
      v14 += *(_DWORD *)v20;
    }
  }

  else if ((v38 & 1) != 0)
  {
    int v14 = 0;
  }

  else
  {
    int v14 = sub_181303970(v20, 1);
  }

    LODWORD(v51) = (_DWORD)v9;
    if (v9 >= v10) {
      goto LABEL_126;
    }
    uint64_t v52 = *v9;
    uint64_t v51 = v9 + 1;
    uint64_t v12 = *v9;
    int v53 = v52 - 192;
    if (v52 < 0xC0)
    {
      if ((v12 & 0x80) == 0)
      {
        double v55 = ((*(_DWORD *)((char *)&unk_1813CB168 + ((v12 >> 3) & 0x1C)) >> v12) & 1) == 0;
        goto LABEL_106;
      }
    }

    else
    {
      LODWORD(v12) = byte_1813C6D06[v53];
      if (v51 == v10)
      {
LABEL_87:
        uint64_t v51 = v10;
      }

      else
      {
        while (1)
        {
          int v54 = *v51;
          if ((*v51 & 0xC0) != 0x80) {
            break;
          }
          ++v51;
          LODWORD(v12) = v54 & 0x3F | ((_DWORD)v12 << 6);
          if (v51 == v10) {
            goto LABEL_87;
          }
        }
      }

      if (v12 >> 1 == 0x7FFF || v12 < 0x80 || (v12 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v12) = 65533;
      }

      else if (v12 >> 22)
      {
        double v55 = 1;
        goto LABEL_106;
      }
    }

    unsigned int v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 405;
    __int16 v59 = ((_DWORD)v12 << 10) | 0x3FF;
    do
    {
      uint64_t v60 = v58 + v56;
      if (v58 + v56 < 0 != __OFADD__(v58, v56)) {
        ++v60;
      }
      int v61 = v60 >> 1;
      char v62 = dword_1813CAB10[v61];
      if (v59 < v62) {
        uint64_t v58 = v61 - 1;
      }
      else {
        uint64_t v57 = v61;
      }
      if (v59 >= v62) {
        unsigned int v56 = v61 + 1;
      }
    }

    while (v58 >= v56);
    double v55 = (dword_1813CAB10[v57] & 0x3FFu) + (dword_1813CAB10[v57] >> 10) <= v12;
LABEL_106:
    uint64_t v63 = *(_DWORD *)(v8 + 12);
    uint64_t v25 = __OFSUB__(v63, 1);
    unsigned int v64 = v63 - 1;
    if (v64 < 0 != v25)
    {
LABEL_115:
      if (v55) {
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v65 = 0;
      while (1)
      {
        uint64_t v66 = v65 + v64;
        if (v65 + v64 < 0 != __OFADD__(v65, v64)) {
          ++v66;
        }
        int v67 = v66 >> 1;
        uint64_t v68 = *(_DWORD *)(*(void *)(v8 + 16) + 4LL * v67);
        if (v68 == (_DWORD)v12) {
          break;
        }
        else {
          uint64_t v65 = v67 + 1;
        }
        if (v64 < v65) {
          goto LABEL_115;
        }
      }

      if (!v55) {
        goto LABEL_39;
      }
    }

    if ((v12 - 818) < 0xFFFFFFCE
      || (v12 >= 0x320 ? (int v69 = -32) : (int v69 = 0),
          v12 >= 0x320 ? (uint64_t v70 = 221688) : (uint64_t v70 = 134389727),
          ((v70 >> (v12 + v69)) & 1) == 0))
    {
LABEL_126:
      uint64_t result = 0LL;
      *((_DWORD *)a1 + 5) = (_DWORD)v51 - *((_DWORD *)a1 + 2);
      *a2 = a1[4];
      *a3 = (_DWORD)v32 - *((_DWORD *)a1 + 8);
      uint64_t v72 = *((_DWORD *)a1 + 2);
      *a4 = v74 - v72;
      *a5 = (_DWORD)v9 - v72;
      uint64_t v73 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v73 + 1;
      *a6 = v73;
      return result;
    }

LABEL_118:
      sub_1812C8198(v2, 0, v34);
      goto LABEL_119;
    }
  }

  if ((uint64_t)(*(void *)(*(void *)a1 + 808LL) + *(void *)(*(void *)a1 + 800LL)) >= 1)
  {
    int v48 = 787;
    *(_DWORD *)(a1 + 52) = 787;
    *(_BYTE *)(a1 + 264) = 2;
    sub_181302AB0((uint64_t *)a1, "FOREIGN KEY constraint failed", v28, v29, v30, v31, v32, v33, v62);
    if ((*(_WORD *)(a1 + 268) & 0x40) != 0)
    {
      if (*(_DWORD *)(a1 + 276)) {
        sub_181302B04(a1);
      }
      return 1LL;
    }

      uint64_t v57 = (__int16)v19[8];
      if (v57 <= 0)
      {
        LOWORD(v45) = v57 + v45;
        if (v26) {
          goto LABEL_122;
        }
        goto LABEL_128;
      }

      if ((v19[9] & 0x80) == 0) {
        LOWORD(v45) = v45 - 20;
      }
LABEL_121:
      if (v26)
      {
LABEL_122:
      }

            uint64_t v79 = *(void *)(v12 + 32);
            uint64_t v80 = *(unsigned int *)(v79 + 80);
            if ((int)v80 >= 1)
            {
              uint64_t v81 = (int *)(v79 + 96);
              do
              {
                *((void *)v81 - 1) = v77;
                v77 += *v81;
                v81 += 10;
                --v80;
              }

              while (v80);
            }

            int v5 = 0;
            uint64_t v139 = v12;
            goto LABEL_146;
          }
        }

        if (!v37)
        {
          char v46 = 0LL;
          uint64_t v44 = &qword_18C467E20[60];
          int v45 = v42;
          goto LABEL_123;
        }

        uint64_t v43 = (void (**)(uint64_t))&off_18C4653A8;
        uint64_t v44 = &qword_18C467E20[60];
        int v45 = v42;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v37);
          --qword_18C468B10;
          off_18C4653A8(v37);
          __int16 v37 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_63;
          }
          uint64_t v43 = (void (**)(uint64_t))&xmmword_18C465410;
        }

        (*v43)(v37);
LABEL_63:
        char v46 = 0LL;
        goto LABEL_123;
      }

    uint64_t v73 = *(_OWORD **)(v19 + 56);
    if (!v73)
    {
      if (!sqlite3_initialize())
      {
        uint64_t v73 = (_OWORD *)sub_18126F0AC(124LL);
        if (v73)
        {
          *(_OWORD *)((char *)v73 + 108) = 0u;
          v73[5] = 0u;
          v73[6] = 0u;
          v73[3] = 0u;
          v73[4] = 0u;
          v73[1] = 0u;
          v73[2] = 0u;
          *uint64_t v73 = 0u;
          *(void *)(v19 + 56) = v73;
          goto LABEL_119;
        }
      }

      *(void *)(v19 + 56) = 0LL;
      uint64_t v15 = 7LL;
      goto LABEL_77;
    }

LABEL_117:
    *(_DWORD *)(a1 + 52) = v48;
    goto LABEL_118;
  }

  uint64_t v52 = *(void *)(v2 + 48);
  if ((v52 & 0x200000000LL) != 0)
  {
    *(void *)(v2 + 48) = v52 & 0xFFFFFFFDFFFFFFFFLL;
    int v48 = 11;
    goto LABEL_117;
  }

  int v53 = sub_1812A03DC(v2, a1, v34);
  if (!v53)
  {
    double v34 = 0.0;
    *(_OWORD *)(v2 + 800) = 0u;
    *(void *)(v2 + 48) &= ~0x80000uLL;
    *(_DWORD *)(v2 + 44) &= ~1u;
    *(_DWORD *)(v2 + 792) = 0;
    if ((v39 & 1) != 0)
    {
LABEL_120:
      if ((*(_WORD *)(a1 + 268) & 0x10) == 0) {
        goto LABEL_141;
      }
LABEL_138:
      uint64_t v51 = *(void *)(a1 + 56);
LABEL_139:
      uint64_t v58 = *(void *)(v2 + 128) + v51;
      *(void *)(v2 + 120) = v51;
      *(void *)(v2 + 128) = v58;
      goto LABEL_140;
    }

  uint64_t v73 = v62[7];
  if (!v62[7])
  {
    LODWORD(v74) = 0;
    uint64_t v82 = "parameters";
    goto LABEL_184;
  }

  uint64_t v74 = (unint64_t)&byte_1813C6343[v73];
  int v75 = v73 & 0xFFFFFFDF;
  if (v75 != 83)
  {
    uint64_t v80 = "stat";
    uint64_t v79 = (unsigned __int8 *)v74;
LABEL_142:
    uint64_t v83 = *v79;
    goto LABEL_143;
  }

  uint64_t v76 = v62[8];
  if (!v62[8])
  {
    uint64_t v83 = 0;
    uint64_t v80 = "tat";
    goto LABEL_143;
  }

  if ((v76 & 0xFFFFFFDF) != 0x54)
  {
    uint64_t v79 = &byte_1813C6343[v76];
    uint64_t v80 = "tat";
    goto LABEL_142;
  }

  int v77 = v62[9];
  if (!v62[9])
  {
    uint64_t v83 = 0;
    uint64_t v80 = "at";
    goto LABEL_143;
  }

  if ((v77 & 0xFFFFFFDF) != 0x41)
  {
    uint64_t v79 = &byte_1813C6343[v77];
    uint64_t v80 = "at";
    goto LABEL_142;
  }

  uint64_t v78 = v62[10];
  if (v62[10])
  {
    if ((v78 & 0xFFFFFFDF) == 0x54) {
      goto LABEL_185;
    }
    uint64_t v79 = &byte_1813C6343[v78];
    uint64_t v80 = "t";
    goto LABEL_142;
  }

  uint64_t v83 = 0;
  uint64_t v80 = "t";
LABEL_143:
  if (v83 != byte_1813C6343[*v80])
  {
    if (v75 != 80)
    {
      uint64_t v82 = "parameters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[8];
    if (!v62[8])
    {
      uint64_t v82 = "arameters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "arameters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[9];
    if (!v62[9])
    {
      uint64_t v82 = "rameters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "rameters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[10];
    if (!v62[10])
    {
      uint64_t v82 = "ameters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "ameters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[11];
    if (!v62[11])
    {
      uint64_t v82 = "meters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x4D)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "meters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[12];
    if (!v62[12])
    {
      uint64_t v82 = "eters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "eters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[13];
    if (!v62[13])
    {
      uint64_t v82 = "ters";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x54)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "ters";
      goto LABEL_183;
    }

    uint64_t v74 = v62[14];
    if (!v62[14])
    {
      uint64_t v82 = "ers";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "ers";
      goto LABEL_183;
    }

    uint64_t v74 = v62[15];
    if (!v62[15])
    {
      uint64_t v82 = "rs";
      goto LABEL_184;
    }

    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "rs";
      goto LABEL_183;
    }

    uint64_t v74 = v62[16];
    if (!v62[16])
    {
      uint64_t v82 = "s";
LABEL_184:
LABEL_188:
      sub_1812DC47C((uint64_t)a1, "table %s may not be dropped", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      return sub_18128FF4C((void *)v9, (void *)a2);
    }

    if ((v74 & 0xFFFFFFDF) != 0x53)
    {
      v74 += (unint64_t)byte_1813C6343;
      uint64_t v82 = "s";
LABEL_183:
      LODWORD(v74) = *(unsigned __int8 *)v74;
      goto LABEL_184;
    }
  }

  if (!v61)
  {
    sub_1812A0BC0(*((void *)p + 5), 0LL, v2);
    sub_1812A1010(*((void *)p + 5), 0);
  }

  if (v13 == 3082) {
    unint64_t v8 = 7;
  }
  else {
    unint64_t v8 = v13;
  }
  *((_DWORD *)p + 12) = v8;
LABEL_123:
  if (*(void *)p)
  {
    uint64_t v52 = *(void *)(*(void *)p + 24LL);
    if (v52) {
      xmmword_18C465410(v52);
    }
  }

  int v53 = *((void *)p + 5);
  if (*(_BYTE *)(v53 + 17))
  {
    int v54 = *(_DWORD *)(v53 + 20) - 1;
    *(_DWORD *)(v53 + 20) = v54;
    if (!v54) {
      sub_1812FDEFC(v53);
    }
  }

  double v55 = *(void *)(*((void *)p + 4) + 24LL);
  if (v55) {
    xmmword_18C465410(v55);
  }
  return v8;
}

        if ((v29 & 0x4000000) == 0)
        {
          unsigned int v64 = v99[9];
          if (v64) {
            sub_18131C57C((uint64_t)v92, v64);
          }
        }

        goto LABEL_157;
      }

      double v55 = v100;
      unsigned int v56 = *(void *)(v100 + 8);
      if (!v56) {
        goto LABEL_124;
      }
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v58 = *(unsigned __int8 *)(v56 + i);
        __int16 v59 = v14[i];
        if ((_DWORD)v58 == (_DWORD)v59)
        {
          if (!*(_BYTE *)(v56 + i))
          {
            uint64_t v60 = v101;
            if (*(void *)(v94 + 96) == *(void *)(v100 + 48) && v101 != 0LL)
            {
              if (*v101 == v56)
              {
                uint64_t v63 = &v101;
LABEL_123:
                *uint64_t v63 = v60[3];
                v60[3] = v93;
                *(void *)&unint64_t v93 = v60;
                ++DWORD2(v93);
              }

              else
              {
                while (1)
                {
                  char v62 = v60;
                  uint64_t v60 = (void *)v60[3];
                  if (!v60) {
                    break;
                  }
                  if (*v60 == v56)
                  {
                    uint64_t v63 = v62 + 3;
                    goto LABEL_123;
                  }
                }
              }
            }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  off_18C4653A8(v5);
  int v5 = (_DWORD *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    __int16 v86 = &xmmword_18C465410;
    goto LABEL_121;
  }

void *sub_18127ABFC(void *result, int a2, uint64_t a3)
{
  switch(a2)
  {
    case -15:
      uint64_t result = sub_1813015C0(result, (void *)a3);
      break;
    case -14:
    case -13:
    case -12:
    case -6:
      if (a3) {
        goto LABEL_3;
      }
      break;
    case -11:
      if (!result[102])
      {
        unsigned int v4 = *(void **)a3;
        int v5 = *(_DWORD *)(a3 + 24) - 1;
        *(_DWORD *)(a3 + 24) = v5;
        if (!v5)
        {
          uint64_t v6 = *(void *)(a3 + 16);
          int v7 = v4;
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
            int v7 = *(void **)a3;
          }

          uint64_t v8 = *(void *)(a3 + 8);
          int v9 = *(_DWORD *)(v8 + 16) - 1;
          *(_DWORD *)(v8 + 16) = v9;
          if (!v9)
          {
            BOOL v10 = *(void (**)(void))(v8 + 32);
            if (v10) {
              v10(*(void *)(v8 + 24));
            }
            sub_1812F20DC(v7, (void *)v8);
          }

          uint64_t v11 = v4;
          goto LABEL_28;
        }
      }

      break;
    case -10:
      if (result[102])
      {
        uint64_t result = sub_1813015FC(result, a3);
      }

      else if (a3)
      {
        if ((*(_WORD *)(a3 + 20) & 0x9000) != 0 || *(_DWORD *)(a3 + 32)) {
          sub_181303838(a3);
        }
        uint64_t v11 = *(void **)(a3 + 24);
LABEL_28:
        uint64_t result = sub_1812F20DC(v11, (void *)a3);
      }

      break;
    case -8:
      if (a3)
      {
        if (!result[102] && (*(_DWORD *)a3)-- == 1)
        {
          uint64_t result = *(void **)(a3 + 16);
          goto LABEL_3;
        }
      }

      break;
    case -7:
      if ((*(_BYTE *)(a3 + 4) & 0x10) != 0) {
LABEL_3:
      }
        uint64_t result = sub_1813014B0(result, (void *)a3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_18127AD68(uint64_t a1, int a2, _DWORD *a3)
{
  if (*(_BYTE *)(a1 + 17) || !*(_BYTE *)(a1 + 16) || a2 && *(_BYTE *)(a1 + 16) == 1) {
    return sub_1812FDF34(a1, a2, a3);
  }
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  if (a3) {
    *a3 = bswap32(*(_DWORD *)(*(void *)(v4[3] + 80) + 40LL));
  }
  if (a2 && (uint64_t v5 = *v4, v6 = *(_DWORD *)(*(void *)a1 + 788LL), *(_DWORD *)(v5 + 128) < v6) && *(_BYTE *)(v5 + 10)) {
    return sub_1812FEBEC(v5, v6);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18127ADD8(void *a1)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1[43];
  if (v2)
  {
LABEL_2:
    int v53 = 0;
    if (*(_BYTE *)(v2 + 64))
    {
      if (!*(_BYTE *)(v2 + 63)) {
        (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112LL))( *(void *)(v2 + 8),  0LL,  1LL,  9LL);
      }
      *(_BYTE *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 124) = 0;
      *(_BYTE *)(v2 + 67) = 0;
    }

    if ((*(__int16 *)(v2 + 60) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v2 + 63)) {
        (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112LL))( *(void *)(v2 + 8),  *(unsigned __int16 *)(v2 + 60) + 3,  1LL,  5LL);
      }
      *(_WORD *)(v2 + 60) = -1;
    }

    uint64_t v3 = a1[43];
    unsigned int v4 = *(void **)(v3 + 144);
    if (v4)
    {
      BOOL v10 = *v4 != *(void *)(v3 + 72)
         || v4[1] != *(void *)(v3 + 80)
         || v4[2] != *(void *)(v3 + 88)
         || v4[3] != *(void *)(v3 + 96)
         || v4[4] != *(void *)(v3 + 104)
         || v4[5] != *(void *)(v3 + 112);
      uint64_t v11 = *(void *)(v3 + 160);
      if (v11)
      {
        LODWORD(v54) = *(_DWORD *)(v11 + 772);
        if ((_DWORD)v54)
        {
          uint64_t v12 = *(void *)(v3 + 8);
          if (*(void *)v12) {
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 80LL))(v12, 34LL, &v54);
          }
        }
      }

      if (*(_BYTE *)(v3 + 63)) {
        uint64_t v13 = 0LL;
      }
      else {
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  1LL,  1LL,  6LL);
      }
      LODWORD(v54) = 0;
      uint64_t v17 = **(void **)(v3 + 8);
      if (v17) {
        (*(void (**)(void))(v17 + 80))();
      }
      if ((_DWORD)v13) {
        goto LABEL_90;
      }
    }

    else
    {
      BOOL v10 = 0;
    }

    int v18 = 1;
    do
      uint64_t v19 = sub_18127BF04(v3, &v53, 0, v18++);
    while ((_DWORD)v19 == -1);
    uint64_t v13 = v19;
    if (!v4 || (_DWORD)v19)
    {
      if (!v4 || *(_BYTE *)(v3 + 63)) {
        goto LABEL_89;
      }
    }

    else if (*v4 == *(void *)(v3 + 72) {
           && v4[1] == *(void *)(v3 + 80)
    }
           && v4[2] == *(void *)(v3 + 88)
           && v4[3] == *(void *)(v3 + 96)
           && v4[4] == *(void *)(v3 + 104)
           && v4[5] == *(void *)(v3 + 112))
    {
      uint64_t v13 = 0LL;
      if (*(_BYTE *)(v3 + 63)) {
        goto LABEL_89;
      }
    }

    else if (v4[4] == *(void *)(v3 + 104) && *((_DWORD *)v4 + 4) >= *(_DWORD *)(**(void **)(v3 + 48) + 128LL))
    {
      uint64_t v13 = 0LL;
      __int128 v26 = *(_OWORD *)v4;
      __int128 v27 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v3 + 88) = *((_OWORD *)v4 + 1);
      *(_OWORD *)(v3 + 104) = v27;
      *(_OWORD *)(v3 + 72) = v26;
      int v53 = v10;
      *(_DWORD *)(v3 + 120) = 1;
      if (*(_BYTE *)(v3 + 63)) {
        goto LABEL_89;
      }
    }

    else
    {
      *(_DWORD *)(v3 + 120) = 1;
      if (*(_BYTE *)(v3 + 64))
      {
        if (!*(_BYTE *)(v3 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  0LL,  1LL,  9LL);
        }
        *(_BYTE *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 124) = 0;
        *(_BYTE *)(v3 + 67) = 0;
      }

      if ((*(__int16 *)(v3 + 60) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v3 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  *(unsigned __int16 *)(v3 + 60) + 3,  1LL,  5LL);
        }
        *(_WORD *)(v3 + 60) = -1;
        uint64_t v13 = 769LL;
        if (!*(_BYTE *)(v3 + 63)) {
          goto LABEL_88;
        }
LABEL_89:
        if (!(v13 | v53))
        {
          uint64_t v13 = 0LL;
LABEL_96:
          if (!*((_BYTE *)a1 + 16)) {
            goto LABEL_188;
          }
LABEL_97:
          if ((_DWORD)v13) {
            goto LABEL_98;
          }
          goto LABEL_200;
        }

LABEL_88:
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  1LL,  1LL,  5LL);
    goto LABEL_89;
  }

  if (*((_BYTE *)a1 + 21))
  {
    uint64_t v13 = 0LL;
    if (!*((_BYTE *)a1 + 16)) {
      goto LABEL_188;
    }
    goto LABEL_97;
  }

  while (1)
  {
    unsigned int v14 = *((unsigned __int8 *)a1 + 22);
    if (v14 != 5 && v14 != 0)
    {
      if (v14 <= 1) {
        goto LABEL_107;
      }
LABEL_156:
      if (*((_BYTE *)a1 + 18))
      {
        uint64_t v13 = 776LL;
        goto LABEL_98;
      }

      uint64_t v13 = sub_1812FC8E4((uint64_t)a1, 4LL);
      if (!(_DWORD)v13)
      {
        if (*(void *)a1[10])
        {
LABEL_160:
          uint64_t v13 = sub_1812FDD9C((uint64_t)a1);
          if ((_DWORD)v13) {
            goto LABEL_182;
          }
          uint64_t v13 = sub_1812C8318((uint64_t)a1, *((_BYTE *)a1 + 16) == 0);
          *((_BYTE *)a1 + 21) = 0;
LABEL_181:
          if (!(_DWORD)v13) {
            goto LABEL_185;
          }
LABEL_182:
          if (v13 == 13 || v13 == 10)
          {
            *((_DWORD *)a1 + 12) = v13;
            *((_BYTE *)a1 + 21) = 6;
            a1[36] = sub_1812FCAFC;
          }

          goto LABEL_98;
        }

        if (*((_BYTE *)a1 + 9) == 2)
        {
          uint64_t v13 = 0LL;
        }

        else
        {
          uint64_t v41 = *a1;
          uint64_t v42 = (*(uint64_t (**)(void, void, void, uint64_t *))(*a1 + 56LL))(*a1, a1[28], 0LL, &v54);
          uint64_t v43 = (void *)a1[10];
          if ((_DWORD)v42) {
            BOOL v44 = 1;
          }
          else {
            BOOL v44 = (_DWORD)v54 == 0;
          }
          if (v44)
          {
            uint64_t v13 = v42;
          }

          else
          {
            int v53 = 0;
            uint64_t v45 = (*(uint64_t (**)(uint64_t, void, void *, void, int *))(v41 + 40))( v41,  a1[28],  v43,  *((_DWORD *)a1 + 45) & 0x1700000 | 0x802u,  &v53);
            uint64_t v13 = v45;
            if (!(_DWORD)v45)
            {
              if ((v53 & 1) != 0)
              {
                uint64_t v13 = sub_1812F2E28(69231);
                uint64_t v46 = a1[10];
                if (*(void *)v46)
                {
                  (*(void (**)(void))(*(void *)v46 + 8LL))(a1[10]);
                  *(void *)uint64_t v46 = 0LL;
                }
              }

              else
              {
                uint64_t v13 = 0LL;
              }
            }

            uint64_t v43 = (void *)a1[10];
          }

          if (*v43) {
            goto LABEL_160;
          }
        }

        if (!*((_BYTE *)a1 + 8)) {
          sub_1812FD3A8((uint64_t)a1, 1LL);
        }
        goto LABEL_181;
      }

          uint64_t v21 = 0;
          goto LABEL_89;
        }

        uint64_t v115 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
      }

      else
      {
        uint64_t v22 = v146;
      }

      uint64_t v32 = v145;
      (*v115)(v40);
      uint64_t v40 = 0LL;
      goto LABEL_87;
    }
  }

    *(void *)a4 = v32;
    if (v32 < 1) {
      return 1LL;
    }
    goto LABEL_89;
  }

        ++v85;
      }

      while (v85 != v50);
    }

    __int16 v59 = 0LL;
    uint64_t v56 = a5;
LABEL_136:
    uint64_t v120 = (_BYTE *)(v485 + 68);
    *(void *)uint64_t v490 = v59;
    if (v59) {
      uint64_t v121 = 1;
    }
    else {
      uint64_t v121 = 2;
    }
    v56[28] = *(_DWORD *)(v42 + 144);
LABEL_141:
    uint64_t v122 = *(_DWORD *)(a3 + 124);
    if (v122 >= 1)
    {
      uint64_t v123 = 0;
      uint64_t v124 = *(void *)(a3 + 136);
      while (1)
      {
        uint64_t v125 = *(_WORD *)(v124 + 18);
        if ((v125 & 6) == 0)
        {
          uint64_t v126 = *((void *)v56 + 13);
          if ((v126 & *(void *)(v124 + 48)) != 0)
          {
            *(_BYTE *)(a3 + 68) |= 2u;
          }

          else
          {
            uint64_t v127 = *(void *)v124;
            if ((*v120 & 0x58) != 0)
            {
              uint64_t v128 = *(_DWORD *)(v127 + 4);
              if ((v128 & 3) == 0 || (*v120 & 8) != 0 && (v128 & 1) == 0) {
                goto LABEL_144;
              }
              uint64_t v129 = *(_DWORD *)(v127 + 56);
              if (*(_DWORD *)(a3 + 600) == v129)
              {
                if ((v126 & 1) != 0) {
                  goto LABEL_144;
                }
              }

              else
              {
                int v130 = *(unsigned int *)(a3 + 596);
                if ((int)v130 >= 2)
                {
                  uint64_t v131 = 0LL;
                  uint64_t v132 = v130 - 1;
                  while (*(_DWORD *)(a3 + 604 + 4 * v131) != v129)
                  {
                    if (v132 == ++v131) {
                      goto LABEL_160;
                    }
                  }
                }
              }
            }

  unsigned int v36 = (void (**)(char *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_93;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
  --qword_18C468B10;
  off_18C4653A8(v18);
  int v18 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v36 = (void (**)(char *))&xmmword_18C465410;
LABEL_93:
    (*v36)(v18);
  }

    if (!v49)
    {
      sub_181359E08(v17);
      goto LABEL_92;
    }

    if (v37)
    {
      sqlite3_result_error_nomem(v49);
    }

    else
    {
      *((_DWORD *)v49 + 9) = 1;
      sub_181269368(*(void *)v49, "malformed JSON", -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }

    sub_181359E08(v17);
    goto LABEL_95;
  }

  v38 += sub_181359BE4(v39);
  if (!v34[v38])
  {
    *(_BYTE *)(v17 + 53) = 1;
    goto LABEL_79;
  }

  sub_181359E08(v17);
  if (!v49)
  {
LABEL_92:
    *(_BYTE *)(v17 + 50) = 1;
    return v17;
  }

            if (v39 != v31) {
              goto LABEL_19;
            }
            if (v23 == 3)
            {
              if (!v77) {
                goto LABEL_100;
              }
              uint64_t v40 = *((unsigned __int16 *)v77 + 10);
              if ((~v40 & 0x202) == 0 && *((_BYTE *)v77 + 22) == 1)
              {
                uint64_t v41 = (const void *)*((void *)v77 + 1);
                goto LABEL_101;
              }

              if ((v40 & 1) != 0)
              {
LABEL_100:
                uint64_t v41 = 0LL;
              }

              else
              {
                uint64_t v42 = sub_181303998((int *)v77, 1);
LABEL_95:
                uint64_t v41 = (const void *)v42;
              }

LABEL_126:
    if (!v29 && !(_DWORD)v35)
    {
      if (off_18C550648) {
        v33.n128_f64[0] = off_18C550648(v32);
      }
      unsigned int v36 = *((unsigned __int8 *)a1 + 22);
      if (v36 > 5 || ((1 << v36) & 0x23) == 0) {
        goto LABEL_135;
      }
      if (*((_BYTE *)a1 + 17))
      {
        if (v36 != 5) {
          goto LABEL_134;
        }
        goto LABEL_135;
      }

      uint64_t v32 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, __n128))(*(void *)a1[9] + 56LL))(a1[9], 2LL, v33);
      if (!(_DWORD)v32)
      {
        if (*((_BYTE *)a1 + 22) != 5) {
LABEL_134:
        }
          *((_BYTE *)a1 + 22) = 2;
LABEL_135:
        __int16 v37 = *(uint64_t (**)(uint64_t, void, void, __n128))(v28 + 48);
        if (v37) {
          uint64_t v32 = (uint64_t *)v37(v28, a1[28], 0LL, v33);
        }
        if (!*((_BYTE *)a1 + 8)) {
          uint64_t v32 = (uint64_t *)sub_1812FD3A8((uint64_t)a1, 1LL);
        }
      }

      int v34 = (int)off_18C550650;
      if (off_18C550650)
      {
        off_18C550650(v32);
        int v34 = 0;
      }

      goto LABEL_155;
    }
  }

  if (!v29)
  {
    LODWORD(v54) = *((_DWORD *)a1 + 45) & 0x1700000 | 0x801;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, void, void))(v28 + 40))(v28, a1[28], a1[10]);
    if ((_DWORD)v40 == 14)
    {
      int v34 = 1;
      goto LABEL_155;
    }

    uint64_t v13 = v40;
    if ((_DWORD)v40) {
      goto LABEL_98;
    }
  }

  LOBYTE(v54) = 0;
  unsigned int v38 = (*(uint64_t (**)(void, uint64_t *, uint64_t, void))(*(void *)a1[10] + 16LL))( a1[10],  &v54,  1LL,  0LL);
  if (v38 == 522) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v38;
  }
  if (!v29)
  {
    uint64_t v39 = a1[10];
    if (*(void *)v39)
    {
      (*(void (**)(void))(*(void *)v39 + 8LL))(a1[10]);
      *(void *)uint64_t v39 = 0LL;
    }
  }

  int v34 = (_BYTE)v54 != 0;
  if ((_DWORD)v13) {
    goto LABEL_98;
  }
LABEL_155:
  if (v34) {
    goto LABEL_156;
  }
LABEL_185:
  if (!*((_BYTE *)a1 + 16) && *((_BYTE *)a1 + 28))
  {
    uint64_t v50 = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(*(void *)a1[9] + 16LL))( a1[9],  &v54,  16LL,  24LL);
    if ((_DWORD)v50)
    {
      uint64_t v13 = v50;
      if ((_DWORD)v50 != 522) {
        goto LABEL_97;
      }
      uint64_t v54 = 0LL;
      uint64_t v55 = 0LL;
    }

    if (a1[17] != v54 || a1[18] != v55)
    {
      sub_1812FD400((uint64_t)a1);
      if (*((_BYTE *)a1 + 27)) {
        (*(void (**)(void, void, void))(*(void *)a1[9] + 144LL))(a1[9], 0LL, 0LL);
      }
    }
  }

  uint64_t v47 = sub_1813C1FE0((uint64_t)a1);
  uint64_t v2 = a1[43];
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v13 = v47;
  if (*((_BYTE *)a1 + 16)) {
    goto LABEL_97;
  }
LABEL_188:
  if (*((_BYTE *)a1 + 21) || (_DWORD)v13) {
    goto LABEL_97;
  }
  uint64_t v48 = a1[43];
  if (v48)
  {
    if ((*(__int16 *)(v48 + 60) & 0x80000000) == 0)
    {
      LODWORD(v48) = *(_DWORD *)(v48 + 92);
      if ((_DWORD)v48) {
        goto LABEL_197;
      }
    }
  }

  uint64_t v48 = *(void *)a1[9];
  if (v48)
  {
    uint64_t v54 = 0LL;
    uint64_t v32 = (uint64_t *)(*(uint64_t (**)(void))(v48 + 48))();
    if ((_DWORD)v32)
    {
LABEL_195:
      uint64_t v13 = (uint64_t)v32;
      goto LABEL_98;
    }

    uint64_t v48 = (v54 + a1[25] - 1) / a1[25];
LABEL_197:
  }

  *((_DWORD *)a1 + 8) = v48;
LABEL_200:
  uint64_t v13 = 0LL;
  *((_BYTE *)a1 + 21) = 1;
  *((_BYTE *)a1 + 28) = 1;
  return v13;
}

            uint64_t v72 = (uint64_t)a3[1];
            if (v72)
            {
              uint64_t v73 = *(_WORD *)(v72 + 20);
              if ((v73 & 0x24) != 0)
              {
                uint64_t v74 = *(void *)v72;
                goto LABEL_131;
              }

              if ((v73 & 8) != 0)
              {
                uint64_t v78 = *(double *)v72;
                if (*(double *)v72 >= -9.22337204e18)
                {
                  if (v78 <= 9.22337204e18) {
                    uint64_t v74 = (uint64_t)v78;
                  }
                  else {
                    uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                }

                else
                {
                  uint64_t v74 = 0x8000000000000000LL;
                }

                goto LABEL_131;
              }

              if ((v73 & 0x12) != 0 && *(void *)(v72 + 8))
              {
                uint64_t v74 = sub_181303DF0(v72);
LABEL_131:
                if (v54 != 1 || v57 == v74)
                {
                  uint64_t v58 = sub_18139B7E0(a1[5], v57, 0LL);
                  if ((_DWORD)v58) {
                    goto LABEL_88;
                  }
                  uint64_t v58 = sub_18139C438((uint64_t *)a1[5], (uint64_t)a3, a4);
                  if ((_DWORD)v58) {
                    goto LABEL_88;
                  }
                }

                else
                {
                  int v75 = (uint64_t *)a1[5];
                  if (v21 == 5)
                  {
                    v325 = sub_18139B7E0((uint64_t)v75, v57, 0LL);
                    if (!v325) {
                      v325 = sub_18139B7E0(a1[5], v74, 0LL);
                    }
                    sub_18139C3D8(&v325, (uint64_t)a1, (uint64_t)a3, a4);
                    __int16 v59 = 1;
                    uint64_t v15 = v325;
                    goto LABEL_89;
                  }

                  uint64_t v15 = sub_18139C438(v75, (uint64_t)a3, a4);
                  if ((_DWORD)v15) {
                    goto LABEL_234;
                  }
                  uint64_t v15 = sub_18139B7E0(a1[5], v57, 0LL);
                  if ((_DWORD)v15) {
                    goto LABEL_234;
                  }
                }

                uint64_t v58 = sub_18139C72C(a1[5], (uint64_t)a3, *a4);
LABEL_88:
                uint64_t v15 = v58;
                __int16 v59 = 1;
                goto LABEL_89;
              }
            }

            else
            {
              sub_1812CF36C(89717);
            }

            uint64_t v74 = 0LL;
            goto LABEL_131;
          }

          if ((v56 & 0x12) != 0 && *(void *)(v55 + 8))
          {
            uint64_t v57 = sub_181303DF0(v55);
            goto LABEL_126;
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        uint64_t v57 = 0LL;
        goto LABEL_126;
      }

      __int16 v59 = 0;
      if (v21 != 5 || v53 != 1)
      {
LABEL_158:
        uint64_t v76 = sub_18139C438((uint64_t *)a1[5], (uint64_t)a3, a4);
        if ((_DWORD)v76) {
          uint64_t v15 = v76;
        }
        else {
          uint64_t v15 = sub_18139C72C(a1[5], (uint64_t)a3, *a4);
        }
LABEL_89:
        if (v59 && !(_DWORD)v15)
        {
          if (*((_DWORD *)v8 + 44) && *((_DWORD *)v8 + 32) == 4)
          {
            uint64_t v15 = sub_18138A918((uint64_t *)a1[5], "version", 0LL, 5);
            if (!(_DWORD)v15) {
              *((_DWORD *)v8 + 32) = 5;
            }
          }

          else
          {
            uint64_t v15 = 0LL;
          }
        }

        goto LABEL_234;
      }

      uint64_t v60 = (uint64_t)a3[1];
      if (v60)
      {
        int v61 = *(_WORD *)(v60 + 20);
        if ((v61 & 0x24) != 0)
        {
          char v62 = *(void *)v60;
          goto LABEL_157;
        }

        if ((v61 & 8) != 0)
        {
          int v90 = *(double *)v60;
          if (*(double *)v60 >= -9.22337204e18)
          {
            if (v90 <= 9.22337204e18) {
              char v62 = (uint64_t)v90;
            }
            else {
              char v62 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }

          else
          {
            char v62 = 0x8000000000000000LL;
          }

uint64_t sub_18127B700(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 28);
  if (v2 >= a2) {
    return 0LL;
  }
  uint64_t v5 = *(int32x2_t **)(a1 + 16);
  int32x2_t v6 = v5[2];
  if (v6)
  {
    xmmword_18C465400(*(void *)&v6);
    int v2 = *(unsigned __int8 *)(a1 + 28);
  }

  unsigned int v7 = v5[4].u8[0];
  if (v2 != v7)
  {
    uint64_t v8 = 5LL;
    if (a2 > 1 || v7 > 2) {
      goto LABEL_79;
    }
  }

  if (a2 == 1)
  {
    if (v7 - 1 < 2)
    {
      uint64_t v8 = 0LL;
      *(_BYTE *)(a1 + 28) = 1;
      v5[3] = vadd_s32(v5[3], (int32x2_t)0x100000001LL);
      goto LABEL_79;
    }

    __int16 v9 = 1;
    uint64_t v36 = 1LL;
    __int16 v38 = 0;
LABEL_15:
    __int16 v37 = v9;
    uint64_t v10 = dword_18C54FA50;
    uint64_t v35 = dword_18C54FA50;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(unsigned int *)(v11 + 88);
    if ((_DWORD)v12 == -1)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v11 + 88) = v12;
    }

    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v11 + 33)) {
        goto LABEL_27;
      }
      uint64_t v39 = v10 + 2;
      uint64_t v40 = 510LL;
      int v41 = 3;
      int v13 = sub_1812F3848(v12, (uint64_t)&v39, a1);
      if (v13 < 0) {
        goto LABEL_23;
      }
      *(_BYTE *)(v11 + 33) = 1;
      ++*(_DWORD *)(v11 + 28);
    }

    else
    {
      int v13 = sub_1812F3848(v12, (uint64_t)&v35, a1);
    }

    if (v13)
    {
LABEL_23:
      uint64_t v14 = *__error();
      uint64_t v8 = 5LL;
      if (((1LL << v14) & 0x1000000800012010LL) == 0)
      {
        if (v14 != 1)
        {
LABEL_54:
          if ((_DWORD)v14 != 77)
          {
            uint64_t v8 = 3850LL;
            *(_DWORD *)(a1 + 32) = v14;
          }

          goto LABEL_79;
        }

        goto LABEL_53;
      }

      goto LABEL_79;
    }

LABEL_63:
        uint64_t v27 = dword_18C54FA50;
        uint64_t v35 = dword_18C54FA50;
        uint64_t v36 = 1LL;
        __int16 v37 = 2;
        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v29 = *(unsigned int *)(v28 + 88);
        if ((_DWORD)v29 == -1)
        {
          uint64_t v29 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v28 + 88) = v29;
        }

        if ((*(_WORD *)(a1 + 30) & 3) == 1)
        {
          if (*(_BYTE *)(v28 + 33))
          {
LABEL_74:
            if ((_DWORD)v8)
            {
              if ((_DWORD)v8 != 5) {
                *(_DWORD *)(a1 + 32) = v26;
              }
              goto LABEL_79;
            }

            int v32 = v5[3].i32[1] + 1;
            v5[3].i32[0] = 1;
            v5[3].i32[1] = v32;
            goto LABEL_78;
          }

          uint64_t v39 = v27 + 2;
          uint64_t v40 = 510LL;
          int v41 = 3;
          int v30 = sub_1812F3848(v29, (uint64_t)&v39, a1);
          if (v30 < 0)
          {
            int v30 = 1;
          }

          else
          {
            *(_BYTE *)(v28 + 33) = 1;
            ++*(_DWORD *)(v28 + 28);
          }
        }

        else
        {
          int v30 = sub_1812F3848(v29, (uint64_t)&v35, a1);
        }

        char v31 = v25 ^ 1;
        if (!v30) {
          char v31 = 1;
        }
        if ((v31 & 1) == 0)
        {
          uint64_t v8 = 2058LL;
          *(_DWORD *)(a1 + 32) = *__error();
          goto LABEL_79;
        }

        goto LABEL_74;
      }

      *(_BYTE *)(v16 + 33) = 1;
      ++*(_DWORD *)(v16 + 28);
    }

    else
    {
      int v18 = sub_1812F3848(v17, (uint64_t)&v35, a1);
    }

    if (v18) {
      goto LABEL_58;
    }
LABEL_62:
    uint64_t v8 = 0LL;
    LODWORD(v26) = 0;
    char v25 = 1;
    goto LABEL_63;
  }

  uint64_t v36 = 1LL;
  __int16 v38 = 0;
  if (a2 != 4) {
    goto LABEL_37;
  }
  if (v2 == 2)
  {
    __int16 v9 = 3;
    goto LABEL_15;
  }

          if (LODWORD(v33) == 0x80000000) {
            int v53 = 0;
          }
          else {
            int v53 = -LODWORD(v33);
          }
          if (SLODWORD(v33) < 0) {
            char v25 = 1LL;
          }
          else {
            char v25 = v22;
          }
          if (SLODWORD(v33) >= 0) {
            LODWORD(v23) = LODWORD(v33);
          }
          else {
            LODWORD(v23) = v53;
          }
          uint64_t v15 = v16[1];
          if (v15 == 46 || v15 == 108) {
            goto LABEL_28;
          }
          uint64_t v27 = 0;
          uint64_t v15 = (char)v15;
          ++v16;
          LOBYTE(v22) = v25;
          goto LABEL_104;
        case '+':
          v384 = 43;
          goto LABEL_27;
        case ',':
          int v18 = 44LL;
          goto LABEL_27;
        case '-':
          goto LABEL_28;
        case '.':
          int v34 = v16 + 1;
          uint64_t v15 = (char)v16[1];
          if (v15 == 42)
          {
            if ((v383 & 2) == 0)
            {
              uint64_t v35 = v387;
              v387 += 8;
              LODWORD(v36) = *v35;
              goto LABEL_81;
            }

            uint64_t v43 = *(int *)(v5 + 4);
            if (*(_DWORD *)v5 > (int)v43)
            {
              BOOL v44 = *(void *)(v5 + 8);
              *(_DWORD *)(v5 + 4) = v43 + 1;
              uint64_t v45 = *(void *)(v44 + 8 * v43);
              if (v45)
              {
                uint64_t v46 = *(_WORD *)(v45 + 20);
                if ((v46 & 0x24) != 0)
                {
                  uint64_t v36 = *(double *)v45;
                  goto LABEL_81;
                }

                if ((v46 & 8) != 0)
                {
                  int v69 = *(double *)v45;
                  if (*(double *)v45 >= -9.22337204e18)
                  {
                    if (v69 <= 9.22337204e18) {
                      *(void *)&uint64_t v36 = (uint64_t)v69;
                    }
                    else {
                      LODWORD(v36) = -1;
                    }
                  }

                  else
                  {
                    LODWORD(v36) = 0;
                  }

    if (v21) {
      goto LABEL_64;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v26 = sub_18127ADD8(*(void **)v6);
        if (v26 || (uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v6 + 288LL))()) != 0)
        {
LABEL_114:
          int v18 = v26;
          goto LABEL_124;
        }

        uint64_t v27 = *(void *)(v56 + 16);
        if (*(_DWORD *)(v27 + 4) == 1)
        {
          uint64_t v28 = *(void *)(v27 + 80);
        }

        else
        {
          uint64_t v28 = *(void *)(v56 + 8);
          *(void *)(v27 + 112) = v56;
          *(void *)(v27 + 72) = v6;
          *(void *)(v27 + 80) = v28;
          *(_DWORD *)(v27 + 4) = 1;
          *(_BYTE *)(v27 + 9) = 100;
        }

        uint64_t v29 = bswap32(*(_DWORD *)(v28 + 28));
        int v30 = *(void *)v6;
        char v31 = *(_DWORD *)(*(void *)v6 + 32LL);
        if (!v29 || *(_DWORD *)(v28 + 24) != *(_DWORD *)(v28 + 92)) {
          uint64_t v29 = *(_DWORD *)(*(void *)v6 + 32LL);
        }
        if ((*(_BYTE *)(*(void *)(v6 + 8) + 51LL) & 2) != 0 || !v29)
        {
          uint64_t v29 = 0;
          uint64_t v39 = *(_DWORD *)(v6 + 56);
          goto LABEL_145;
        }

        if (*(void *)v28 != 0x66206574694C5153LL || *(void *)(v28 + 8) != 0x332074616D726FLL) {
          goto LABEL_122;
        }
        int32x2_t v33 = *(unsigned __int8 *)(v28 + 19);
        if (v33 > 2) {
          goto LABEL_122;
        }
        if (v33 != 2 || (*(_WORD *)(v6 + 40) & 0x20) != 0)
        {
          sub_1812FE7E0((void *)v6, 3);
          break;
        }

        LODWORD(v56) = 0;
        int v34 = sub_18127BD0C(v30, &v56);
        if (v34) {
          goto LABEL_149;
        }
        sub_1812FE7E0((void *)v6, 2);
        if ((_DWORD)v56) {
          break;
        }
        sub_1812F1ABC(*(void *)(v27 + 112));
        unsigned int v7 = v54;
        if (*(void *)(v6 + 24)) {
          goto LABEL_113;
        }
      }

      if (*(_WORD *)(v28 + 21) != 8256 || *(_BYTE *)(v28 + 23) != 32) {
        goto LABEL_122;
      }
      uint64_t v36 = (*(unsigned __int8 *)(v28 + 16) << 8) | (*(unsigned __int8 *)(v28 + 17) << 16);
      __int16 v38 = *(unsigned __int8 *)(v28 + 20);
      uint64_t v39 = v36 - v38;
      if (v36 == *v55) {
        break;
      }
      sub_1812F1ABC(*(void *)(v27 + 112));
      *(_DWORD *)(v6 + 52) = v36;
      *(_DWORD *)(v6 + 56) = v39;
      *(_WORD *)(v6 + 40) |= 2u;
      uint64_t v40 = *(void *)(v6 + 136);
      unsigned int v7 = v54;
      if (v40)
      {
        *(void *)(v6 + 136) = v40 - 4;
        sub_1812FC960(v40 - 4);
        *(void *)(v6 + 136) = 0LL;
      }

      uint64_t v26 = sub_18126C43C(*(void *)v6, v55, v38);
      if (v26) {
        goto LABEL_114;
      }
      if (*(void *)(v6 + 24))
      {
LABEL_113:
        int v18 = 0;
        goto LABEL_64;
      }
    }

    if (v29 > v31)
    {
      uint64_t v29 = v31;
      if ((*(void *)(*(void *)(v6 + 8) + 48LL) & 0x10000001LL) != 1)
      {
        int v34 = sub_1812FBF50(80214);
LABEL_149:
        int v18 = v34;
        goto LABEL_123;
      }
    }

    if (v39 < 0x1E0)
    {
LABEL_122:
      int v18 = 26;
LABEL_123:
      unsigned int v7 = v54;
      sub_1812F1ABC(*(void *)(v27 + 112));
      *(void *)(v6 + 24) = 0LL;
      goto LABEL_124;
    }

    *(_WORD *)(v6 + 40) |= 2u;
    *(_DWORD *)(v6 + 52) = v36;
    *(_DWORD *)(v6 + 56) = v39;
    *(_BYTE *)(v6 + 33) = bswap32(*(_DWORD *)(v28 + 52)) != 0;
    *(_BYTE *)(v6 + 34) = bswap32(*(_DWORD *)(v28 + 64)) != 0;
LABEL_145:
    unsigned int v7 = v54;
    int v18 = 0;
    *(_WORD *)(v6 + 46) = v39 - 35;
    *(_WORD *)(v6 + 42) = ((v39 << 6) - 768) / 0xFF - 23;
    uint64_t v48 = (unsigned __int16)(((v39 << 6) - 768) / 0xFF - 23);
    uint64_t v49 = (32 * v39 - 384) / 0xFF - 23;
    *(_WORD *)(v6 + 44) = v49;
    *(_WORD *)(v6 + 48) = v49;
    if (v48 >= 0x7F) {
      LOBYTE(v48) = 127;
    }
    *(_BYTE *)(v6 + 37) = v48;
    *(void *)(v6 + 24) = v27;
    *(_DWORD *)(v6 + 64) = v29;
LABEL_64:
    if (!a2 || v18)
    {
LABEL_70:
      if (v18) {
        goto LABEL_124;
      }
    }

    else
    {
      if ((*(_WORD *)(v6 + 40) & 1) != 0)
      {
        int v18 = 8;
      }

      else
      {
        char v25 = sub_1812F177C(v7, a2 > 1, *(_BYTE *)(*(void *)a1 + 102LL) == 2);
        if (v25 != 517)
        {
          int v18 = v25;
          if (!v25) {
            int v18 = sub_1812A544C(v6);
          }
          goto LABEL_70;
        }

        if (*(_BYTE *)(v6 + 36)) {
          int v18 = 517;
        }
        else {
          int v18 = 5;
        }
      }

  uint64_t result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

      int32x2_t v33 = 0;
      int v34 = 0;
      uint64_t v35 = 405;
      uint64_t v36 = ((_DWORD)v29 << 10) | 0x3FF;
      do
      {
        __int16 v37 = v35 + v33;
        if (v35 + v33 < 0 != __OFADD__(v35, v33)) {
          ++v37;
        }
        __int16 v38 = v37 >> 1;
        uint64_t v39 = dword_1813CAB10[v38];
        if (v36 < v39) {
          uint64_t v35 = v38 - 1;
        }
        else {
          int v34 = v38;
        }
        if (v36 >= v39) {
          int32x2_t v33 = v38 + 1;
        }
      }

      while (v35 >= v33);
      goto LABEL_47;
    }

    if ((v29 & 0x80) != 0) {
      goto LABEL_63;
    }
    if ((((*(_DWORD *)((char *)&unk_1813CB168 + ((v29 >> 3) & 0x1C)) >> v29) & 1) == 0) != a2)
    {
LABEL_73:
      if ((v29 - 818) < 0xFFFFFFCE
        || (v29 >= 0x320 ? (uint64_t v40 = -32) : (uint64_t v40 = 0),
            v29 >= 0x320 ? (int v41 = 221688) : (int v41 = 134389727),
            ((v41 >> (v29 + v40)) & 1) == 0))
      {
        if (v28 < 1)
        {
          LODWORD(v42) = 0;
        }

        else
        {
          uint64_t v42 = 0LL;
          while (*(_DWORD *)(v27 + 4 * v42) < (int)v29)
          {
            if (v28 == ++v42)
            {
              LODWORD(v42) = v28;
              break;
            }
          }

          if (v28 > (int)v42)
          {
            uint64_t v43 = v28;
            do
            {
              *(_DWORD *)(v27 + 4 * v43) = *(_DWORD *)(v27 + 4 * v43 - 4);
              --v43;
            }

            while (v43 > (int)v42);
          }
        }

        *(_DWORD *)(v27 + 4LL * v42) = v29;
        ++v28;
      }
    }

  uint64_t v19 = *(void *)(v1 + 80);
  if (!v19) {
    goto LABEL_70;
  }
  int v20 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_69;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v19);
  --qword_18C468B10;
  off_18C4653A8(v19);
  uint64_t v19 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v20 = &xmmword_18C465410;
LABEL_69:
    (*v20)(v19);
  }

  char v25 = *(void *)(v2 + 32);
  uint64_t v26 = *(void **)(v25 + 64);
  if (v26)
  {
    *(void *)(v25 + 64) = 0LL;
    uint64_t v27 = (sqlite3_stmt *)v26[3];
    uint64_t v28 = (void *)v26[4];
    uint64_t v29 = v28[3];
    if (v29) {
      xmmword_18C465400(v29);
    }
    sub_1812F20DC(v28, v26);
    int v30 = v28[3];
    if (v30) {
      xmmword_18C465410(v30);
    }
    sqlite3_finalize(v27);
  }

  v14[18] = 0LL;
  uint64_t result = 0.0;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  return result;
}

          *(_DWORD *)(a1 + 48) = v20;
          uint64_t v21 = sqlite3_initialize();
          if (v20 < 0 || v21)
          {
            *(void *)(a1 + 56) = 0LL;
          }

          else
          {
            uint64_t v22 = (void *)sub_18126F0AC((v20 + 1));
            *(void *)(a1 + 56) = v22;
            if (v22)
            {
              if (v19) {
                uint64_t v23 = (char *)v19;
              }
              else {
                uint64_t v23 = &byte_1813CEAEE;
              }
              memcpy(v22, v23, *(int *)(a1 + 48) + 1LL);
              goto LABEL_70;
            }
          }

          return 7LL;
        }
      }

      if (*(_BYTE *)(v11 + 22) != 1) {
        goto LABEL_38;
      }
      uint64_t v17 = *(_DWORD *)(v11 + 16);
      if (v12) {
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v17 = 0;
      if (v12) {
        goto LABEL_45;
      }
    }

    char v31 = sqlite3_mprintf("malformed JSON");
    *(void *)(*(void *)a1 + 16LL) = v31;
    if (v31) {
      int v18 = 1LL;
    }
    else {
      int v18 = 7LL;
    }
LABEL_66:
    int v32 = *(void *)(a1 + 40);
    if (v32)
    {
      int32x2_t v33 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v32);
        --qword_18C468B10;
        off_18C4653A8(v32);
        int v32 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_73;
        }
        int32x2_t v33 = &xmmword_18C465410;
      }

      (*v33)(v32);
    }

        uint64_t v55 = v20 + 1;
        do
        {
          uint64_t v57 = *(_BYTE *)v53;
          int v53 = (uint64_t *)((char *)v53 + 1);
          uint64_t v56 = v57;
          uint64_t v58 = *(_BYTE *)v52;
          int v52 = (uint64_t *)((char *)v52 + 1);
          *(_BYTE *)uint64_t v54 = v58 ^ v56;
          uint64_t v54 = (uint64_t *)((char *)v54 + 1);
          --v55;
        }

        while (v55 > 1);
LABEL_65:
        uint64_t v16 = *(_DWORD *)(a1 + 80);
        goto LABEL_66;
      }
    }

    uint64_t v17 = v37;
    int v18 = v38;
    uint64_t v19 = v39;
    uint64_t v45 = v20;
    do
    {
      uint64_t v47 = *(_DWORD *)v18;
      int v18 = (uint64_t *)((char *)v18 + 4);
      uint64_t v46 = v47;
      uint64_t v48 = *(_DWORD *)v17;
      uint64_t v17 = (uint64_t *)((char *)v17 + 4);
      *(_DWORD *)uint64_t v19 = v48 ^ v46;
      uint64_t v19 = (uint64_t *)((char *)v19 + 4);
      int v20 = v45 - 4;
      int32x2_t v33 = v45 > 8;
      v45 -= 4;
    }

    while (v33);
    goto LABEL_56;
  }

LABEL_29:
  if (v5[3].i32[0] > 1)
  {
    uint64_t v8 = 5LL;
    goto LABEL_79;
  }

    *(_DWORD *)(v10 + 40) = 1;
  }

  return v10;
}

      ++v30;
      v31 += 24LL;
      if (v23 == v30) {
        goto LABEL_52;
      }
    }

    uint64_t v36 = v15;
    *(_DWORD *)(a1 + 64) = a3 + 1;
    __int16 v37 = *(unsigned __int8 **)(*(void *)(a2 + 80) + v31);
    __int16 v38 = *(void *)a1;
    if (v37)
    {
      uint64_t v39 = (unsigned __int8 *)sub_18129C928(*(void *)a1, v37, 0LL, 0LL);
      if (*(_BYTE *)(v38 + 103))
      {
LABEL_41:
        if (v39) {
          sub_181309110((void *)v38, v39);
        }
        *(_DWORD *)(a1 + 64) = 0;
        uint64_t v15 = v36;
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v39 = 0LL;
      if (*(_BYTE *)(v38 + 103)) {
        goto LABEL_41;
      }
    }

    sub_181319C00(a1, v39, v51 + v30);
    goto LABEL_41;
  }

      if (*((_BYTE *)v17 + 221))
      {
        int32x2_t v33 = sub_1812E2C64(v113, *(char **)(v19 + 16), v20);
        if (!v33) {
          goto LABEL_34;
        }
      }

      else
      {
        int32x2_t v33 = sub_18129EAF4((uint64_t)v17, 0, *(char **)(v19 + 16), v20, a5, a6, a7, a8);
        if (!v33) {
          goto LABEL_34;
        }
      }

      if (sub_18133FFAC((void **)v17, v33, v19, v116, (uint64_t *)&v115, a6, a7, a8))
      {
LABEL_34:
        if (!v108 || *(_BYTE *)(v113 + 103)) {
          return;
        }
        uint64_t v35 = (int8x16_t)xmmword_1813CDDC0;
        int v34 = (int8x16_t)xmmword_1813CDDB0;
        uint64_t v36 = (int8x16_t)xmmword_1813CDDD0;
        v37.i64[0] = 0x1000100010001LL;
        v37.i64[1] = 0x1000100010001LL;
        if (!v33)
        {
          __int16 v38 = v17[2];
          if (!v38)
          {
            if (!v17[21] && (*(_BYTE *)(*v17 + 96) & 8) == 0) {
              *((_BYTE *)v17 + 35) = 1;
            }
            __int16 v38 = sub_1812DC63C(v17, v30, v31, v32, a5, a6, a7, a8);
            uint64_t v35 = (int8x16_t)xmmword_1813CDDC0;
            int v34 = (int8x16_t)xmmword_1813CDDB0;
            uint64_t v36 = (int8x16_t)xmmword_1813CDDD0;
            v37.i64[0] = 0x1000100010001LL;
            v37.i64[1] = 0x1000100010001LL;
          }

          uint64_t v39 = *(_DWORD *)(v38 + 144);
          uint64_t v40 = *(_DWORD *)(v19 + 40);
          if (v40 >= 1)
          {
            int v41 = 0LL;
            uint64_t v42 = (v39 + v40 + 1);
            do
            {
              BOOL v44 = *(_DWORD *)(v19 + 16 * v41 + 64);
              uint64_t v45 = (__int16)v44;
              if ((v44 & 0x8000) == 0)
              {
                uint64_t v46 = *(void *)v19;
                if ((*(_DWORD *)(*(void *)v19 + 48LL) & 0x20) != 0)
                {
                  uint64_t v47 = *(void *)(v46 + 8);
                  if ((unsigned __int16)*(_DWORD *)(v19 + 16 * v41 + 64))
                  {
                    if ((v44 << 16) >= 0x110000)
                    {
                      uint64_t v50 = v44 & 0xF;
                      if ((v44 & 0xF) == 0) {
                        uint64_t v50 = 16LL;
                      }
                      uint64_t v48 = v45 - v50;
                      uint64_t v51 = v47 + 142;
                      int v52 = 0uLL;
                      int v53 = v48;
                      uint64_t v54 = 0uLL;
                      do
                      {
                        uint64_t v55 = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 64), v35);
                        v55.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 32), v34).i32[3];
                        v56.i32[0] = vzip1q_s16(*(int16x8_t *)(v51 - 128), *(int16x8_t *)(v51 - 112)).u32[0];
                        v56.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 96), v36).i32[1];
                        v56.i64[1] = v55.i64[1];
                        uint64_t v57 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v51 + 96), v34);
                        uint64_t v117 = *(int8x16x2_t *)(v51 + 32);
                        uint64_t v58 = vqtbl2q_s8(*(int8x16x2_t *)(v51 + 64), v35);
                        uint64_t v60 = *(int16x8_t *)v51;
                        __int16 v59 = *(int16x8_t *)(v51 + 16);
                        v51 += 256LL;
                        v58.i32[3] = v57.i32[3];
                        v57.i32[0] = vzip1q_s16(v60, v59).u32[0];
                        v57.i32[1] = vqtbl2q_s8(v117, v36).i32[1];
                        v57.i64[1] = v58.i64[1];
                        int v52 = vaddq_s16((int16x8_t)vbicq_s8(v37, (int8x16_t)vshrq_n_u16(v56, 5uLL)), v52);
                        uint64_t v54 = vaddq_s16((int16x8_t)vbicq_s8(v37, (int8x16_t)vshrq_n_u16(v57, 5uLL)), v54);
                        v53 -= 16LL;
                      }

                      while (v53);
                      uint64_t v49 = vaddvq_s16(vaddq_s16(v54, v52));
                    }

                    else
                    {
                      uint64_t v48 = 0LL;
                      uint64_t v49 = 0;
                    }

                    int v61 = v45 - v48;
                    char v62 = (unsigned __int16 *)(v47 + 16 * v48 + 14);
                    do
                    {
                      uint64_t v63 = *v62;
                      v62 += 8;
                      v49 += ((v63 >> 5) & 1) == 0;
                      --v61;
                    }

                    while (v61);
                  }

                  else
                  {
                    uint64_t v49 = 0;
                  }

                  if ((*(_WORD *)(v47 + 16 * v45 + 14) & 0x20) != 0) {
                    LOWORD(v45) = v44 - v49 + *(_WORD *)(v46 + 56);
                  }
                  else {
                    LOWORD(v45) = v49;
                  }
                }
              }

              unsigned int v64 = (v111 + (__int16)v45);
              uint64_t v65 = *(_DWORD *)(v38 + 144);
              if (*(_DWORD *)(v38 + 148) > v65)
              {
                *(_DWORD *)(v38 + 144) = v65 + 1;
                uint64_t v43 = *(void *)(v38 + 136) + 40LL * v65;
                *(_DWORD *)uint64_t v43 = 50;
                *(_DWORD *)(v43 + 4) = v64;
                *(_DWORD *)(v43 + 8) = v42;
                *(void *)(v43 + 12) = 0LL;
                *(void *)(v43 + 28) = 0LL;
                *(void *)(v43 + 20) = 0LL;
                *(_DWORD *)(v43 + 36) = 0;
              }

              else
              {
                sub_18131044C(v38, 50LL, v64, v42, 0LL, a6, a7, a8);
                v37.i64[0] = 0x1000100010001LL;
                v37.i64[1] = 0x1000100010001LL;
                uint64_t v36 = (int8x16_t)xmmword_1813CDDD0;
                uint64_t v35 = (int8x16_t)xmmword_1813CDDC0;
                int v34 = (int8x16_t)xmmword_1813CDDB0;
              }

              ++v41;
            }

            while (v41 < *(int *)(v19 + 40));
            uint64_t v39 = *(_DWORD *)(v38 + 144);
            uint64_t v8 = a2;
            int v20 = v107;
          }

          uint64_t v72 = *(unsigned __int8 *)(v19 + 44);
          if (*(_DWORD *)(v38 + 148) > v39)
          {
            *(_DWORD *)(v38 + 144) = v39 + 1;
            uint64_t v21 = *(void *)(v38 + 136) + 40LL * v39;
            *(_DWORD *)uint64_t v21 = 158;
            *(_DWORD *)(v21 + 4) = v72;
            *(_DWORD *)(v21 + 8) = -1;
            *(void *)(v21 + 12) = 0LL;
            *(void *)(v21 + 28) = 0LL;
            *(void *)(v21 + 20) = 0LL;
            *(_DWORD *)(v21 + 36) = 0;
          }

          else
          {
            sub_18131044C(v38, 158LL, v72, 0xFFFFFFFFLL, 0LL, a6, a7, a8);
          }
        }

        goto LABEL_12;
      }

      uint64_t v66 = v115;
      if (!v115)
      {
        uint64_t v114 = *(_DWORD *)(v19 + 64);
        uint64_t v66 = &v114;
      }

      if (*(int *)(v19 + 40) < 1)
      {
        int v69 = 0;
      }

      else
      {
        int v67 = 0LL;
        uint64_t v68 = 0LL;
        int v69 = 0;
        uint64_t v70 = v116[0];
        do
        {
          if (*(void *)(v113 + 528))
          {
            unint64_t v71 = (__int16 *)(v33 + 52);
            if (v70) {
              unint64_t v71 = (__int16 *)(*(void *)(v70 + 8) + v67);
            }
            int v69 = sub_1812B1CE8( (uint64_t)a1,  *(const char **)v33,  *(const char **)(*(void *)(v33 + 8) + 16LL * *v71),  v109) == 2;
          }

          ++v68;
          v67 += 2LL;
        }

        while (v68 < *(int *)(v19 + 40));
      }

      uint64_t v17 = a1;
      if ((_DWORD)v109 != 1 && *(_BYTE *)(*(void *)(*(void *)(*a1 + 32) + 32 * v109 + 8) + 17LL)) {
        sub_181319DC4((uint64_t)a1, v109, *(_DWORD *)(v33 + 40), 0, *(void *)v33);
      }
      ++*((_DWORD *)a1 + 13);
      __int16 v9 = v105;
      a7 = v106;
      uint64_t v10 = a5;
      uint64_t v11 = v103;
      if (v106) {
        sub_181340950(a1, v109, v33, v116[0], v19, (uint64_t)v66, v106, 0xFFFFFFFFLL, v69);
      }
      if ((_DWORD)v11)
      {
        uint64_t v73 = (uint64_t *)a1[21];
        if (!v73) {
          uint64_t v73 = a1;
        }
        uint64_t v74 = (uint64_t *)v73[23];
        if (!v74
          || ((int v75 = *v74, v75 != *(void *)(v19 + 48)) || *(_BYTE *)(v19 + 45) != 8)
          && (v75 != *(void *)(v19 + 56) || *(_BYTE *)(v19 + 46) != 8))
        {
          sub_181340950(a1, v109, v33, v116[0], v19, (uint64_t)v66, v11, 1LL, v69);
        }
      }

      uint64_t v8 = a2;
      int v20 = v107;
      if (v115) {
        sub_1812F20DC((void *)v113, v115);
      }
LABEL_12:
      uint64_t v19 = *(void *)(v19 + 8);
      if (!v19)
      {
        int v13 = *(void *)(v8 + 96);
        uint64_t v12 = v106;
        break;
      }
    }
  }

  uint64_t v76 = *(unsigned __int8 **)v8;
  int v77 = *(void *)(v13 + 96);
  if (!v77)
  {
    uint64_t v82 = (uint64_t *)(v13 + 88);
    uint64_t v83 = *(_DWORD *)(v13 + 84);
    if (v83) {
      goto LABEL_147;
    }
LABEL_102:
    uint64_t v82 = &qword_18C550660;
    goto LABEL_103;
  }

  uint64_t v78 = *v76;
  if (*v76)
  {
    uint64_t v79 = 0;
    uint64_t v80 = v76 + 1;
    do
    {
      uint64_t v79 = -1640531535 * (v79 + byte_1813C6343[v78]);
      uint64_t v81 = *v80++;
      uint64_t v78 = v81;
    }

    while (v81);
  }

  else
  {
    uint64_t v79 = 0;
  }

  uint64_t v98 = (_DWORD *)(v77 + 16LL * (v79 % *(_DWORD *)(v13 + 80)));
  uint64_t v82 = (uint64_t *)(v98 + 2);
  uint64_t v83 = *v98;
  if (!v83) {
    goto LABEL_102;
  }
  do
  {
LABEL_147:
    uint64_t v82 = (uint64_t *)*v82;
    uint64_t v99 = (_BYTE *)v82[3];
    for (uint64_t i = *(unsigned __int8 **)v8; ; ++i)
    {
      uint64_t v101 = *v99;
      uint64_t v102 = *i;
      if ((_DWORD)v101 != (_DWORD)v102) {
        break;
      }
      if (!*v99) {
        goto LABEL_103;
      }
LABEL_149:
      ++v99;
    }

    if (byte_1813C6343[v101] == byte_1813C6343[v102]) {
      goto LABEL_149;
    }
    --v83;
  }

  while (v83);
  uint64_t v82 = &qword_18C550660;
LABEL_103:
  uint64_t v84 = v82[2];
  if (v84)
  {
    while (2)
    {
      uint64_t v115 = 0LL;
      v116[0] = 0LL;
      if (v10)
      {
        unint64_t v85 = *(unsigned int *)(v84 + 40);
        if ((int)v85 >= 1)
        {
          __int16 v86 = 0LL;
          while (*(__int16 *)(v8 + 54) < 1)
          {
LABEL_123:
            if (++v86 == v85) {
              goto LABEL_105;
            }
          }

          uint64_t v87 = 0LL;
          while (1)
          {
            if ((*(_DWORD *)(v10 + 4 * v87) & 0x80000000) == 0 || v9 && v87 == *(__int16 *)(v8 + 52))
            {
              int v88 = *(void *)(v8 + 8);
              if (*(void *)(v84 + 16 * v86 + 72))
              {
                uint64_t v89 = *(_BYTE **)(v88 + 16 * v87);
                for (uint64_t j = *(unsigned __int8 **)(v84 + 16 * v86 + 72); ; ++j)
                {
                  unsigned __int16 v91 = *v89;
                  int v92 = *j;
                  if ((_DWORD)v91 == (_DWORD)v92)
                  {
                    if (!*v89) {
                      goto LABEL_125;
                    }
                  }

                  else if (byte_1813C6343[v91] != byte_1813C6343[v92])
                  {
                    goto LABEL_112;
                  }

                  ++v89;
                }
              }

              if ((*(_WORD *)(v88 + 16 * v87 + 14) & 1) != 0) {
                goto LABEL_125;
              }
            }

        uint64_t v47 = *((unsigned int *)a2 + 3);
        uint64_t v48 = *(_DWORD *)(v14 + 144);
        uint64_t v49 = (v48 + 4);
        if (*(_DWORD *)(v14 + 148) <= v48)
        {
          uint64_t result = sub_18131044C(v14, 60LL, v46, v49, 0LL, v26, v27, v28);
        }

        else
        {
          *(_DWORD *)(v14 + 144) = v48 + 1;
          uint64_t v50 = *(void *)(v14 + 136) + 40LL * v48;
          *(_DWORD *)uint64_t v50 = 60;
          *(_DWORD *)(v50 + 4) = v46;
          *(_DWORD *)(v50 + 8) = v49;
          *(void *)(v50 + 12) = 0LL;
          *(void *)(v50 + 28) = 0LL;
          *(void *)(v50 + 20) = 0LL;
          *(_DWORD *)(v50 + 36) = 0;
        }

        __int16 v59 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v59)
        {
          uint64_t result = sub_18131044C(v14, 32LL, v47, 0LL, 0LL, v26, v27, v28);
        }

        else
        {
          *(_DWORD *)(v14 + 144) = v59 + 1;
          uint64_t v60 = *(void *)(v14 + 136) + 40LL * v59;
          *(_DWORD *)uint64_t v60 = 32;
          *(_DWORD *)(v60 + 4) = v47;
          *(_OWORD *)(v60 + 8) = 0u;
          *(_OWORD *)(v60 + 24) = 0u;
        }

        int v61 = (v19 + v130);
        uint64_t v26 = (v128 - v130);
        char v62 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v62)
        {
          uint64_t result = sub_181310690(v14, 40LL, v47, 0LL, v61, v26, v27, v28);
          char v62 = result;
        }

        else
        {
          *(_DWORD *)(v14 + 144) = v62 + 1;
          uint64_t v63 = *(void *)(v14 + 136) + 40LL * v62;
          *(_DWORD *)uint64_t v63 = 64808;
          *(_DWORD *)(v63 + 4) = v47;
          *(_DWORD *)(v63 + 8) = 0;
          *(_DWORD *)(v63 + 12) = v61;
          *(_DWORD *)(v63 + 16) = v26;
          *(void *)(v63 + 24) = 0LL;
          *(void *)(v63 + 32) = 0LL;
        }

        unsigned int v64 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v64)
        {
          uint64_t result = sub_18131044C(v14, 130LL, v47, 0LL, 0LL, v26, v27, v28);
        }

        else
        {
          *(_DWORD *)(v14 + 144) = v64 + 1;
          uint64_t v65 = *(void *)(v14 + 136) + 40LL * v64;
          *(_DWORD *)uint64_t v65 = 130;
          *(_DWORD *)(v65 + 4) = v47;
          *(_OWORD *)(v65 + 8) = 0u;
          *(_OWORD *)(v65 + 24) = 0u;
        }

        uint64_t v36 = a3;
        if ((_DWORD)v45) {
          goto LABEL_102;
        }
        goto LABEL_97;
      }
    }

    uint64_t v99 = *((unsigned int *)a2 + 7);
    uint64_t v100 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v100)
    {
      sub_18131044C(v14, 17LL, v127, v99, 0LL, v26, v27, v28);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v100 + 1;
      uint64_t v101 = *(void *)(v14 + 136) + 40LL * v100;
      *(_DWORD *)uint64_t v101 = 17;
      *(_DWORD *)(v101 + 4) = v127;
      *(_DWORD *)(v101 + 8) = v99;
      *(void *)(v101 + 12) = 0LL;
      *(void *)(v101 + 28) = 0LL;
      *(void *)(v101 + 20) = 0LL;
      *(_DWORD *)(v101 + 36) = 0;
    }

    goto LABEL_86;
  }

  return result;
}

      if (v24 != v27)
      {
        uint64_t v29 = v28;
        if (v28) {
          goto LABEL_49;
        }
        if (strlen(v6) >= 0x81)
        {
          char v31 = strndup(v6, 0x80uLL);
          uint64_t v28 = v31;
          if (v31)
          {
            *(_WORD *)(v31 + 125) = 11822;
            v31[127] = 46;
            uint64_t v29 = v31;
            goto LABEL_49;
          }
        }

        else
        {
          uint64_t v28 = 0LL;
        }

        uint64_t v29 = v6;
LABEL_49:
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)int v61 = v57;
          *(_WORD *)&v61[4] = 2080;
          *(void *)&v61[6] = v29;
          _os_log_impl( &dword_181266000,  v4,  OS_LOG_TYPE_DEFAULT,  "spilled %d pages during execution of [%s]",  buf,  0x12u);
        }

        int32x2_t v6 = v29;
        if ((dword_18C465544 & 0x20) != 0) {
          goto LABEL_52;
        }
        goto LABEL_35;
      }

      ++v20;
    }

    if (*v20) {
      goto LABEL_29;
    }
    if (!v19) {
      goto LABEL_20;
    }
    qword_18C467E20[9 * k + 2] = v19[2];
    uint64_t v17 = v19 + 2;
LABEL_21:
    *uint64_t v17 = v14;
  }

  for (uint64_t n = 0LL; n != 10; ++n)
  {
    uint64_t v26 = (char *)&qword_18C468258[9 * n];
    uint64_t v27 = (char *)*((void *)v26 + 7);
    if (v27) {
      uint64_t v28 = strlen(*((const char **)v26 + 7)) & 0x3FFFFFFF;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = (void *)&xmmword_18C468BD0 + (v28 + *v27) % 23;
    int v30 = (void *)*v29;
    if (!*v29)
    {
LABEL_38:
      char v25 = (char *)&qword_18C468258[9 * n];
      *((void *)v25 + 2) = 0LL;
      *((void *)v25 + 8) = v30;
      goto LABEL_39;
    }

    char v31 = (void *)*v29;
LABEL_45:
    int v32 = (_BYTE *)v31[7];
    for (iuint64_t i = (unsigned __int8 *)*((void *)v26 + 7); ; ++ii)
    {
      int v34 = *v32;
      uint64_t v35 = *ii;
      if ((_DWORD)v34 == (_DWORD)v35) {
        break;
      }
      if (byte_1813C6343[v34] != byte_1813C6343[v35])
      {
        char v31 = (void *)v31[8];
        if (v31) {
          goto LABEL_45;
        }
        goto LABEL_38;
      }

  int v13 = sqlite3_db_config(a1, 1009, 0LL, 0LL);
  if ((_DWORD)v9) {
    return v9;
  }
  __int16 v9 = v13;
  if ((_DWORD)v13) {
    return v9;
  }
  if (a2) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = "main";
  }
  return sqlite3_wal_checkpoint_v2(a1, v14, 0, 0LL, 0LL);
}

  uint64_t v15 = *(unsigned __int8 *)(v2 + 113);
  if (v15 == 186)
  {
LABEL_32:
    uint64_t v14 = "unopened";
    goto LABEL_36;
  }

  if (v15 != 118)
  {
    if (v15 != 109)
    {
      uint64_t v14 = "invalid";
      goto LABEL_36;
    }

    goto LABEL_32;
  }

  uint64_t v16 = *(void *)(v2 + 24);
  if (v16) {
    xmmword_18C465410(v16);
  }
LABEL_37:
  uint64_t v17 = *(void *)(v1 + 72);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32)) {
      sub_181303838(*(void *)(v1 + 72));
    }
    sub_1812F20DC(*(void **)(v17 + 24), (void *)v17);
  }

  sub_1812E9958(v1, *(uint64_t **)(v1 + 88));
  int v18 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v18)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v18 = &xmmword_18C465410;
    return (*v18)(v1);
  }

  return result;
}

          uint64_t v39 = v26 - 1LL;
          uint64_t v40 = v26;
          while (1)
          {
            uint64_t v28 = __OFSUB__(v40--, 1);
            if ((v40 < 0) ^ v28 | (v40 == 0)) {
              break;
            }
            int v41 = *(char *)(v27 + v39--);
            if (v41 >= 66)
            {
              uint64_t v42 = (v40 + 1);
              goto LABEL_35;
            }
          }

          if (v26 < 1) {
            goto LABEL_36;
          }
          uint64_t v42 = 1LL;
LABEL_35:
          sub_1812B9B68((uint64_t *)result, 96LL, v23, v42, 0LL, v27, v42, a9);
LABEL_36:
          sub_1812F20DC(*v13, v22);
          uint64_t result = (uint64_t)v13[2];
        }

        uint64_t v43 = *v18;
        BOOL v44 = *(_DWORD *)(result + 144);
        uint64_t v11 = v45;
        if (*(_DWORD *)(result + 148) <= v44)
        {
          uint64_t result = sub_181310690(result, 64LL, v43, v45, v21, v20, a8, a9);
          goto LABEL_5;
        }

        *(_DWORD *)(result + 144) = v44 + 1;
        uint64_t v15 = *(void *)(result + 136) + 40LL * v44;
        *(_DWORD *)uint64_t v15 = 64832;
        *(_DWORD *)(v15 + 4) = v43;
        *(_DWORD *)(v15 + 8) = v45;
        *(_DWORD *)(v15 + 12) = v21;
        *(_DWORD *)(v15 + 16) = v20;
      }

      *(void *)(v15 + 24) = 0LL;
      *(void *)(v15 + 32) = 0LL;
LABEL_5:
      *int v18 = 0;
      *(_DWORD *)(v19 + 868) = 0;
      __int16 v9 = *(unsigned __int8 *)(a2 + 64);
LABEL_6:
      ++v14;
    }

    while (v14 < v9);
  }

  return result;
}

    uint64_t v17 = 0LL;
    goto LABEL_30;
  }

  uint64_t v23 = *(double *)v15;
  if (*(double *)v15 >= -9.22337204e18)
  {
    if (v23 <= 9.22337204e18) {
      uint64_t v17 = (uint64_t)v23;
    }
    else {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v17 = 0x8000000000000000LL;
  }

  LODWORD(v16) = 0;
LABEL_33:
  int v18 = *(void *)(a3 + 48);
  if (!v18) {
    goto LABEL_39;
  }
  uint64_t v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
  {
    int v20 = *(void *)(v18 + 8);
    goto LABEL_40;
  }

  if ((v19 & 1) != 0) {
LABEL_39:
  }
    int v20 = 0LL;
  else {
    int v20 = sub_181303998((int *)v18, 1);
  }
LABEL_40:
  uint64_t v21 = *(void *)(a3 + 56);
  int v136 = v5;
  if (!v21)
  {
    sub_1812CF36C(89717);
    goto LABEL_44;
  }

  uint64_t v22 = *(_WORD *)(v21 + 20);
  if ((v22 & 0x24) != 0)
  {
    uint64_t v23 = *(void *)v21;
    goto LABEL_45;
  }

  if ((v22 & 8) == 0)
  {
    if ((v22 & 0x12) != 0 && *(void *)(v21 + 8))
    {
      uint64_t v23 = sub_181303DF0(v21);
      goto LABEL_45;
    }

  uint64_t v17 = *v5;
  if ((char)*v5 < 0)
  {
    uint64_t v17 = v17 & 0x7F | (v5[1] << 7);
    if ((char)v5[1] < 0)
    {
      uint64_t v17 = v17 & 0x3FFF | (v5[2] << 14);
      if ((char)v5[2] < 0)
      {
        uint64_t v17 = v17 & 0x1FFFFF | (v5[3] << 21);
        if ((char)v5[3] < 0)
        {
          uint64_t v17 = v17 & 0xFFFFFFF | ((v5[4] & 7) << 28);
          int v18 = 5LL;
        }

        else
        {
          int v18 = 4LL;
        }
      }

      else
      {
        int v18 = 3LL;
      }
    }

    else
    {
      int v18 = 2LL;
    }
  }

  else
  {
    int v18 = 1LL;
  }

  int v24 = &v5[v18];
  char v25 = *v24;
  if ((char)*v24 < 0)
  {
    char v25 = v25 & 0x7F | (v24[1] << 7);
    if ((char)v24[1] < 0)
    {
      char v25 = v25 & 0x3FFF | (v24[2] << 14);
      if ((char)v24[2] < 0)
      {
        char v25 = v25 & 0x1FFFFF | (v24[3] << 21);
        if ((char)v24[3] < 0)
        {
          char v25 = v25 & 0xFFFFFFF | ((v24[4] & 7) << 28);
          uint64_t v26 = 5LL;
        }

        else
        {
          uint64_t v26 = 4LL;
        }
      }

      else
      {
        uint64_t v26 = 3LL;
      }
    }

    else
    {
      uint64_t v26 = 2LL;
    }
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  if (!v25) {
    return 267LL;
  }
  uint64_t v27 = &v24[v26];
  if (*(void *)(a2 + 40) + *(int *)(a2 + 48) - (void)&v24[v26] < (uint64_t)v25
    || (signed int)v17 > *(_DWORD *)(a2 + 72))
  {
    return 267LL;
  }

  uint64_t v28 = v25 + (unint64_t)v17;
  if (v28 > *(int *)(a2 + 88))
  {
    uint64_t v29 = *(void *)(a2 + 80);
    if (sqlite3_initialize()) {
      return 7LL;
    }
    int v30 = 2 * v28;
    char v31 = sub_18127D33C(v29, v30);
    if (!v31) {
      return 7LL;
    }
    *(void *)(a2 + 80) = v31;
    *(_DWORD *)(a2 + 88) = v30;
  }

  uint64_t result = sub_18136438C(a2, (uint64_t)v27, v25 + 10);
  if (!(_DWORD)result)
  {
    memcpy((void *)(*(void *)(a2 + 80) + v17), v27, v25);
    *(_DWORD *)(a2 + 72) = v25 + v17;
    int v32 = &v27[v25];
    if ((char)*v32 < 0)
    {
      int v34 = sub_1813638B4(v32, (int *)(a2 + 104));
      int32x2_t v33 = *(_DWORD *)(a2 + 104);
    }

    else
    {
      int32x2_t v33 = *v32;
      *(_DWORD *)(a2 + 104) = v33;
      int v34 = 1LL;
    }

    uint64_t v35 = &v32[v34];
    *(void *)(a2 + 96) = v35;
    *(void *)(a2 + 112) = 0LL;
    if (v33) {
      return 0LL;
    }
    else {
      return 267LL;
    }
  }

  return result;
}

    ++v33;
  }

  if (byte_1813C6343[v35] == byte_1813C6343[v36]) {
    goto LABEL_29;
  }
  uint64_t v206 = a1;
  if (a4 < 4)
  {
    if (*(_DWORD *)(v19 + 68) && *(_DWORD *)(v19 + 64) != 1) {
      goto LABEL_489;
    }
LABEL_479:
    uint64_t v167 = (void *)(v19 + 104);
    if (*(void *)(v19 + 104))
    {
      if (*(void *)(v19 + 72))
      {
LABEL_481:
        uint64_t v168 = *(char **)(v19 + 80);
        if (v168)
        {
LABEL_482:
          LODWORD(v212) = 0;
          uint64_t v215 = 0uLL;
          sub_181389378((char *)&v212, (uint64_t)&v215, "T.%Q", v168);
          if (*(_DWORD *)(v19 + 64) != 1 && *(int *)(v19 + 24) >= 1)
          {
            uint64_t v169 = 0LL;
            do
            {
              if (*(_DWORD *)(v19 + 64) == 2) {
                sub_181389378((char *)&v212, (uint64_t)&v215, ", T.%Q", *(void *)(*(void *)(v19 + 32) + 8 * v169));
              }
              else {
                sub_181389378((char *)&v212, (uint64_t)&v215, ", T.c%d");
              }
              ++v169;
            }

            while (v169 < *(int *)(v19 + 24));
          }

          *(void *)(v19 + 96) = v215;
          uint64_t v15 = v212;
          if ((_DWORD)v212) {
            goto LABEL_27;
          }
          v14[3] = v19;
          v14[6] = a3;
          LODWORD(v212) = 0;
          if (sqlite3_initialize() || (uint64_t v176 = sub_18126F0AC(152LL)) == 0)
          {
            uint64_t v170 = 0LL;
            v14[4] = 0LL;
            uint64_t v15 = 7LL;
LABEL_493:
            sub_181389624(v170);
            v14[4] = 0LL;
            goto LABEL_4;
          }

          uint64_t v170 = v176;
          *(void *)(v176 + 144) = 0LL;
          *(_OWORD *)(v176 + 112) = 0u;
          *(_OWORD *)(v176 + 128) = 0u;
          *(_OWORD *)(v176 + 80) = 0u;
          *(_OWORD *)(v176 + 96) = 0u;
          *(_OWORD *)(v176 + 48) = 0u;
          *(_OWORD *)(v176 + 64) = 0u;
          *(_OWORD *)(v176 + 16) = 0u;
          *(_OWORD *)(v176 + 32) = 0u;
          *(_OWORD *)uint64_t v176 = 0u;
          v14[4] = v176;
          *(void *)uint64_t v176 = v19;
          *(_DWORD *)(v176 + 16) = 64;
          uint64_t v177 = sub_1813889B8(&v212, "%s_data", *(const char **)(v19 + 16));
          *(void *)(v170 + 8) = v177;
          if (a1 && v177)
          {
            uint64_t v178 = sub_181389500(v19, (uint64_t)"data", (uint64_t)"id INTEGER PRIMARY KEY, block BLOB", 0, v34);
            if ((_DWORD)v178
              || (uint64_t v178 = sub_181389500( v19,  (uint64_t)"idx",  (uint64_t)"segid, term, pgno, PRIMARY KEY(segid, term)",  1,  v34),  (_DWORD)v178))
            {
              uint64_t v15 = v178;
              goto LABEL_493;
            }

            uint64_t v192 = *(_DWORD **)(v170 + 144);
            if (v192)
            {
              sub_18138A584(v192);
              *(void *)(v170 + 144) = 0LL;
            }

            uint64_t v193 = *(void *)(v170 + 24);
            if (v193)
            {
              sub_18138A70C(v193);
              *(_DWORD *)(v170 + 32) = 0;
              *(_DWORD *)(v170 + 56) = 0;
            }

            *(_DWORD *)(v170 + 52) = 0;
            uint64_t v215 = 0u;
            uint64_t v216 = 0u;
            uint64_t v217 = 0u;
            if (*(_DWORD *)(*(void *)v170 + 68LL)) {
              *(void *)&uint64_t v216 = 1LL;
            }
            sub_181389984((unsigned __int8 *)v170, 1LL, &byte_1813CEAEE, 0);
            sub_181389C04((unsigned __int8 *)v170, (uint64_t)&v215);
            uint64_t v15 = *(unsigned int *)(v170 + 60);
            *(_DWORD *)(v170 + 60) = 0;
            if ((_DWORD)v15) {
              goto LABEL_493;
            }
          }

          else
          {
            uint64_t v15 = v212;
            if ((_DWORD)v212) {
              goto LABEL_493;
            }
          }

          uint64_t v180 = v14[4];
          uint64_t v181 = *(int *)(v19 + 24);
          if (sqlite3_initialize())
          {
            uint64_t v15 = 7LL;
            v14[5] = 0LL;
            goto LABEL_4;
          }

          uint64_t v182 = 8 * v181 + 128;
          uint64_t v183 = (uint64_t *)sub_18126F0AC(v182);
          v14[5] = v183;
          if (!v183)
          {
LABEL_3:
            uint64_t v15 = 7LL;
            goto LABEL_4;
          }

          uint64_t v184 = v183;
          bzero(v183, v182);
          v184[4] = (uint64_t)(v184 + 16);
          void *v184 = v19;
          v184[1] = v180;
          if (!v206)
          {
LABEL_532:
            LODWORD(v215) = 0;
            char v186 = sub_1813889B8(&v215, "CREATE TABLE x(");
            uint64_t v187 = v186;
            if (v186)
            {
              if (*(int *)(v19 + 24) >= 1)
              {
                uint64_t v187 = sub_1813889B8(&v215, "%z%s%Q", v186, &byte_1813CEAEE, **(void **)(v19 + 32));
                if (v187)
                {
                  uint64_t v188 = 1LL;
                  do
                  {
                    uint64_t v187 = sub_1813889B8(&v215, "%z%s%Q", v187, ", ", *(void *)(*(void *)(v19 + 32) + 8 * v188++));
                  }

                  while (v187);
                }
              }
            }

            uint64_t v189 = sub_1813889B8(&v215, "%z, %Q HIDDEN, %s HIDDEN)", v187, *(void *)(v19 + 16), "rank");
            if (!v189)
            {
              uint64_t v15 = v215;
              goto LABEL_557;
            }

            uint64_t v190 = v189;
            uint64_t v15 = sqlite3_declare_vtab(*(sqlite3 **)v19, v189);
            unsigned int v191 = (uint64_t (**)(char *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v190);
              --qword_18C468B10;
              off_18C4653A8(v190);
              uint64_t v190 = (char *)xmmword_18C468B70;
              if (!(void)xmmword_18C468B70)
              {
LABEL_557:
                if ((_DWORD)v15) {
                  goto LABEL_4;
                }
                *(void *)(v19 + 184) = v34;
                uint64_t v195 = v14[4];
                __int128 v196 = sub_18138B020(v195);
                sub_18138A584(v196);
                uint64_t v15 = *(unsigned int *)(v195 + 60);
                *(_DWORD *)(v195 + 60) = 0;
                sub_181388658(v14[4]);
                *(void *)(v19 + 184) = 0LL;
                if ((_DWORD)v15) {
                  goto LABEL_4;
                }
                goto LABEL_5;
              }

              unsigned int v191 = (uint64_t (**)(char *))&xmmword_18C465410;
            }

            (*v191)(v190);
            goto LABEL_557;
          }

          if (*(_DWORD *)(v19 + 64))
          {
LABEL_525:
            if (!*(_DWORD *)(v19 + 88)
              || (*(_DWORD *)(v19 + 68)
                ? (uint64_t v185 = "id INTEGER PRIMARY KEY, sz BLOB, origin INTEGER")
                : (uint64_t v185 = "id INTEGER PRIMARY KEY, sz BLOB"),
                  uint64_t v15 = sub_181389500(v19, (uint64_t)"docsize", (uint64_t)v185, 0, v34),
                  !(_DWORD)v15))
            {
              uint64_t v15 = sub_181389500(v19, (uint64_t)"config", (uint64_t)"k PRIMARY KEY, v", 1, v34);
              if (!(_DWORD)v15)
              {
                uint64_t v15 = sub_18138A918(v184, "version", 0LL, 4);
                if (!(_DWORD)v15) {
                  goto LABEL_532;
                }
              }
            }

  uint64_t result = 0LL;
  *(void *)(a2 + 24) = *(void *)(v14 + 24);
  uint64_t v21 = *(_DWORD *)(v14 + 4);
  int v20 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)(a2 + 4) = v21;
LABEL_30:
  *(_DWORD *)(a2 + 8) = v20;
  return result;
}

      uint64_t result = 0LL;
LABEL_30:
      ++v14;
    }

    while (v14 < v12 && !(_DWORD)result);
  }

  return result;
}

LABEL_37:
  __int16 v37 = 3;
  uint64_t v19 = dword_18C54FA50 + 2LL;
  if (a2 == 2) {
    int v20 = dword_18C54FA50 + 1;
  }
  else {
    int v20 = dword_18C54FA50 + 2;
  }
  uint64_t v21 = 510LL;
  if (a2 == 2) {
    uint64_t v21 = 1LL;
  }
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(unsigned int *)(v22 + 88);
  if ((_DWORD)v23 == -1)
  {
    uint64_t v23 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(v22 + 88) = v23;
  }

  if ((*(_WORD *)(a1 + 30) & 3) == 1)
  {
    if (*(_BYTE *)(v22 + 33))
    {
LABEL_78:
      uint64_t v8 = 0LL;
      *(_BYTE *)(a1 + 28) = a2;
      v5[4].i8[0] = a2;
      goto LABEL_79;
    }

    uint64_t v39 = v19;
    uint64_t v40 = 510LL;
    int v41 = 3;
    int v24 = sub_1812F3848(v23, (uint64_t)&v39, a1);
    if (v24 < 0) {
      goto LABEL_50;
    }
    *(_BYTE *)(v22 + 33) = 1;
    ++*(_DWORD *)(v22 + 28);
  }

  else
  {
    int v24 = sub_1812F3848(v23, (uint64_t)&v35, a1);
  }

  if (!v24) {
    goto LABEL_78;
  }
LABEL_50:
  uint64_t v14 = *__error();
  uint64_t v8 = 5LL;
  if (((1LL << v14) & 0x1000000800012010LL) == 0)
  {
    if (v14 != 1) {
      goto LABEL_54;
    }
LABEL_53:
    uint64_t v8 = 3LL;
    *(_DWORD *)(a1 + 32) = v14;
  }

  uint64_t v15 = v21 + 1;
  int v34 = v21 + 1;
  if ((v21 & 0x80000000) == 0)
  {
LABEL_6:
    *((_WORD *)i + 10) = v15;
    goto LABEL_7;
  }

      *((_BYTE *)a1 + 35) = v12;
      uint64_t v157 = v38;
      if ((int)v158 < 1)
      {
        LODWORD(v43) = 0;
      }

      else
      {
        uint64_t v43 = 0LL;
        while (v43 == *((_DWORD *)v159 + v43))
        {
          if (v158 == ++v43)
          {
            BOOL v44 = v38;
            goto LABEL_59;
          }
        }
      }

      BOOL v44 = v38;
      if ((_DWORD)v43 != (_DWORD)v158)
      {
        if ((_DWORD)v158 == 1)
        {
          if (*((_BYTE *)a1 + 31))
          {
            uint64_t v45 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v45;
            BOOL v44 = *((unsigned int *)a1 + v45 + 56);
          }

          else
          {
            BOOL v44 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v44;
          }
        }

        else
        {
          uint64_t v46 = *((_DWORD *)a1 + 10);
          uint64_t v47 = __OFSUB__(v46, (_DWORD)v158);
          uint64_t v48 = v46 - v158;
          if (v48 < 0 != v47)
          {
            uint64_t v49 = *((_DWORD *)a1 + 14);
            BOOL v44 = (v49 + 1);
            *((_DWORD *)a1 + 14) = v49 + v158;
          }

          else
          {
            BOOL v44 = *((unsigned int *)a1 + 11);
            *((_DWORD *)a1 + 10) = v48;
            *((_DWORD *)a1 + 11) = v44 + v158;
          }
        }

        uint64_t v50 = v38;
        uint64_t v51 = (int *)v159;
        int v52 = v158;
        do
        {
          uint64_t v54 = *v51++;
          uint64_t v28 = (v54 + v44);
          uint64_t v55 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) > v55)
          {
            *(_DWORD *)(v23 + 144) = v55 + 1;
            int v53 = *(void *)(v23 + 136) + 40LL * v55;
            *(_DWORD *)int v53 = 80;
            *(_DWORD *)(v53 + 4) = v50;
            *(_DWORD *)(v53 + 8) = v28;
            *(void *)(v53 + 12) = 0LL;
            *(void *)(v53 + 28) = 0LL;
            *(void *)(v53 + 20) = 0LL;
            *(_DWORD *)(v53 + 36) = 0;
          }

          else
          {
            sub_18131044C(v23, 80LL, v50, v28, 0LL, v30, v31, v32);
          }

          uint64_t v50 = (v50 + 1);
          --v52;
        }

        while (v52);
        int v24 = v167;
      }

  if ((int)v16 <= 1 && (_DWORD)v16)
  {
LABEL_39:
    uint64_t v26 = 1;
    goto LABEL_62;
  }

    uint64_t v26 = 0LL;
    uint64_t v5 = 0LL;
    *a5 = v23;
    goto LABEL_109;
  }

  int v18 = *(unsigned int *)(a1 + 392);
  if ((a4 & 1) != 0)
  {
    int v20 = (int *)(*(void *)(a1 + 400) + 56LL * a2);
    goto LABEL_26;
  }

  if ((int)v18 >= 1)
  {
    uint64_t v19 = 0LL;
    int v20 = *(int **)(a1 + 400);
    while (1)
    {
      if (*((void *)v20 + 6))
      {
        uint64_t v21 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v21) {
          break;
        }
      }

      ++v19;
      v20 += 14;
      if (v18 == v19) {
        goto LABEL_28;
      }
    }

    if ((int)v19 < (int)v18)
    {
LABEL_26:
      switch(a3)
      {
        case 0:
          int v24 = v20[7];
          goto LABEL_39;
        case 1:
          int v24 = v20[8];
LABEL_39:
          if (v24 < 1) {
            __int16 v37 = -1LL;
          }
          else {
            __int16 v37 = *(void *)&v16[40 * v24 + 24];
          }
          goto LABEL_57;
        case 2:
          __int16 v38 = *((__int16 *)v20 + 20);
          uint64_t v39 = 1.0;
          if (v38 > 99)
          {
            uint64_t v40 = *((_WORD *)v20 + 20);
          }

          else
          {
            do
            {
              uint64_t v40 = v38 + 10;
              int v41 = (__int16)v38;
              uint64_t v39 = v39 * 0.5;
              v38 += 10;
            }

            while (v41 < 90);
          }

          *(double *)a5 = v39 * (double)(unint64_t)sub_1812DB6EC(v40);
          goto LABEL_108;
        case 3:
          __int16 v37 = *((void *)v20 + 6);
          goto LABEL_57;
        case 4:
          if (*v20)
          {
            __int16 v37 = *(void *)&v16[40 * *v20 + 16];
LABEL_57:
            *a5 = v37;
          }

          else
          {
            *a5 = 0LL;
          }

          goto LABEL_108;
        case 5:
          if (!*v20) {
            goto LABEL_58;
          }
          *(_DWORD *)a5 = *(_DWORD *)&v16[40 * *v20 + 4];
          goto LABEL_108;
        case 6:
          if (*v20) {
            *(_DWORD *)a5 = *(_DWORD *)&v16[40 * *v20 + 8];
          }
          else {
LABEL_58:
          }
            *(_DWORD *)a5 = -1;
          goto LABEL_108;
        case 7:
          uint64_t v42 = v20[1];
          if (!(_DWORD)v42)
          {
            BOOL v44 = -1LL;
            goto LABEL_107;
          }

          uint64_t v43 = v20[2];
          if ((int)v42 <= 0)
          {
            if ((int)v17 >= 1)
            {
              BOOL v44 = 0LL;
              uint64_t v47 = v17;
              uint64_t v48 = v16;
              do
              {
                if (*((_DWORD *)v48 + 1) == v43 && (byte_1813C6495[*v48] & 0x40) != 0) {
                  v44 += *((void *)v48 + 4);
                }
                v48 += 40;
                --v47;
              }

              while (v47);
              goto LABEL_75;
            }
          }

          else if (v43 >= (int)v42)
          {
            BOOL v44 = 0LL;
            uint64_t v45 = (v43 - v42);
            if (v43 == (_DWORD)v42)
            {
              uint64_t v46 = v20[1];
LABEL_73:
              uint64_t v56 = &v16[40 * v46 + 32];
              uint64_t v57 = v43 - v46 + 1;
              do
              {
                uint64_t v58 = *(void *)v56;
                v56 += 40;
                v44 += v58;
                --v57;
              }

              while (v57);
              goto LABEL_75;
            }

            uint64_t v49 = 0LL;
            uint64_t v50 = v45 + 1;
            uint64_t v51 = (v45 + 1) & 0x1FFFFFFFELL;
            uint64_t v46 = v51 + v42;
            int v52 = &v16[40 * v42 + 72];
            int v53 = v51;
            do
            {
              uint64_t v54 = *((void *)v52 - 5);
              uint64_t v55 = *(void *)v52;
              v52 += 80;
              v44 += v54;
              v49 += v55;
              v53 -= 2LL;
            }

            while (v53);
            v44 += v49;
            if (v50 != v51) {
              goto LABEL_73;
            }
LABEL_75:
            __int16 v59 = v20[3];
            if (!(_DWORD)v59) {
              goto LABEL_107;
            }
            uint64_t v60 = v20[4];
            if ((int)v59 <= 0)
            {
              if ((int)v17 >= 1)
              {
                uint64_t v63 = v16;
                unsigned int v64 = v17;
                do
                {
                  if (*((_DWORD *)v63 + 1) == v60 && (byte_1813C6495[*v63] & 0x40) != 0) {
                    v44 += *((void *)v63 + 4);
                  }
                  v63 += 40;
                  --v64;
                }

                while (v64);
              }
            }

            else
            {
              int v61 = (v60 - v59);
              if (v60 == (_DWORD)v59)
              {
                char v62 = v20[3];
LABEL_89:
                uint64_t v72 = v60 - v62 + 1;
                uint64_t v73 = &v16[40 * v62 + 32];
                do
                {
                  uint64_t v74 = *(void *)v73;
                  v73 += 40;
                  v44 += v74;
                  --v72;
                }

                while (v72);
                goto LABEL_91;
              }

              uint64_t v65 = 0LL;
              uint64_t v66 = v61 + 1;
              int v67 = (v61 + 1) & 0x1FFFFFFFELL;
              char v62 = v67 + v59;
              uint64_t v68 = &v16[40 * v59 + 72];
              int v69 = v67;
              do
              {
                uint64_t v70 = *((void *)v68 - 5);
                unint64_t v71 = *(void *)v68;
                v68 += 80;
                v44 += v70;
                v65 += v71;
                v69 -= 2LL;
              }

              while (v69);
              v44 += v65;
              if (v66 != v67) {
                goto LABEL_89;
              }
            }

          if (v25 == -1) {
            goto LABEL_50;
          }
        }

  if (!*(_BYTE *)(v13 + 63)) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8) + 112LL))( *(void *)(v13 + 8),  3LL,  1LL,  5LL);
  }
  *(_WORD *)(v13 + 60) = -1;
  uint64_t v29 = 1;
  do
    int v30 = sub_18127BF04(v13, &__buf, 1, v29++);
  while ((_DWORD)v30 == -1);
  uint64_t v28 = v30;
LABEL_42:
  if ((_DWORD)v28) {
    return v28;
  }
LABEL_43:
  char v31 = *(unsigned int *)(v13 + 88);
  if (!(_DWORD)v31)
  {
    __buf = 0x18E22D0082067F37LL;
    LOBYTE(v102) = BYTE3(v14);
    BYTE1(v102) = BYTE2(v14);
    BYTE2(v102) = BYTE1(v14);
    HIBYTE(v102) = v14;
    uint64_t v45 = *(_DWORD *)(v13 + 136);
    uint64_t v103 = bswap32(v45);
    if (!v45)
    {
      sqlite3_initialize();
      arc4random_buf((void *)(v13 + 104), 8uLL);
    }

    uint64_t v104 = *(void *)(v13 + 104);
    uint64_t v46 = HIDWORD(__buf) + __buf + __buf + v102;
    uint64_t v47 = v103 + HIDWORD(__buf) + __buf + v46;
    uint64_t v48 = v46 + v104 + v47;
    uint64_t v49 = v47 + HIDWORD(v104) + v48;
    uint64_t v105 = HIBYTE(v48);
    uint64_t v106 = BYTE2(v48);
    uint64_t v107 = BYTE1(v48);
    uint64_t v108 = v48;
    uint64_t v109 = HIBYTE(v49);
    uint64_t v110 = BYTE2(v49);
    uint64_t v111 = BYTE1(v49);
    uint64_t v112 = v49;
    *(_DWORD *)(v13 + 56) = v14;
    *(_BYTE *)(v13 + 85) = 0;
    *(_DWORD *)(v13 + 96) = v48;
    *(_DWORD *)(v13 + 100) = v49;
    *(_BYTE *)(v13 + 67) = 1;
    uint64_t v28 = (*(uint64_t (**)(void, uint64_t *, uint64_t, void))(**(void **)(v13 + 16) + 24LL))( *(void *)(v13 + 16),  &__buf,  32LL,  0LL);
    if ((_DWORD)v28) {
      return v28;
    }
    if (*(_BYTE *)(v13 + 68))
    {
      if (((v15 >> 2) & 3) != 0)
      {
        uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 40LL))(*(void *)(v13 + 16));
        if ((_DWORD)v28) {
          return v28;
        }
      }
    }
  }

  if (*(_DWORD *)(v13 + 56) != (_DWORD)v14) {
    return sub_1812FBF50(75914);
  }
  int v32 = *(void *)(v13 + 16);
  v96[0] = v13;
  v96[1] = v32;
  uint64_t v87 = v32;
  uint64_t v97 = 0LL;
  uint64_t v98 = v15;
  uint64_t v99 = v14;
  int32x2_t v33 = (int)v14 + 24;
  int v34 = malloc(v33);
  uint64_t v100 = v34;
  if (!v34) {
    return 7LL;
  }
  int v88 = v34;
  uint64_t v89 = v15;
  unsigned __int16 v91 = v14;
  unint64_t v93 = (int)v14 + 24;
  uint64_t v35 = v33 * v31 + 32;
  if (v5)
  {
    int v92 = 0LL;
    uint64_t v36 = v5;
    while (1)
    {
      if (!v22) {
        goto LABEL_53;
      }
      if (a4)
      {
        __int16 v37 = *(void *)(v36 + 32);
        if (!v37)
        {
          LODWORD(v31) = v31 + 1;
          goto LABEL_55;
        }
      }

      LODWORD(__buf) = 0;
      sub_1812FBF64(v13, *(_DWORD *)(v36 + 48), &__buf);
      __int16 v38 = __buf;
      if (__buf >= v22)
      {
        int v41 = *(void *)(v36 + 40);
        uint64_t v42 = *(uint64_t (**)(void, void, void, uint64_t))(v41 + 296);
        if (v42)
        {
          uint64_t v43 = v42(*(void *)(v41 + 320), *(void *)(v36 + 8), *(unsigned int *)(v36 + 48), 6LL);
          if (!v43) {
            return 7LL;
          }
        }

        else
        {
          uint64_t v43 = *(void *)(v36 + 8);
          if (!v43) {
            return 7LL;
          }
        }

        BOOL v44 = (*(uint64_t (**)(void, uint64_t, uint64_t, size_t))(**(void **)(v13 + 16) + 24LL))( *(void *)(v13 + 16),  v43,  v91,  v33 * (v38 - 1) + 56);
        if ((_DWORD)v44) {
          return v44;
        }
        *(_WORD *)(v36 + 52) &= ~0x40u;
        uint64_t v36 = *(void *)(v36 + 32);
        if (!v36) {
          goto LABEL_80;
        }
      }

      else
      {
LABEL_53:
        LODWORD(v31) = v31 + 1;
        if (a4)
        {
          __int16 v37 = *(void *)(v36 + 32);
LABEL_55:
          if (v37) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = a3;
          }
          goto LABEL_59;
        }

        uint64_t v39 = 0;
LABEL_59:
        uint64_t v40 = sub_1812FC11C((uint64_t)v96, v36, v39, v35);
        if ((_DWORD)v40) {
          goto LABEL_125;
        }
        v35 += v33;
        *(_WORD *)(v36 + 52) |= 0x40u;
        int v92 = v36;
        uint64_t v36 = *(void *)(v36 + 32);
        if (!v36) {
          goto LABEL_80;
        }
      }
    }
  }

  int v92 = 0LL;
LABEL_80:
  uint64_t v50 = v89;
  if (a4)
  {
    if (!*(_DWORD *)(v13 + 124)) {
      goto LABEL_108;
    }
    uint64_t v51 = *(_DWORD *)(v13 + 56);
    int v52 = sqlite3_initialize();
    if (v51 >= -23 && !v52)
    {
      int v53 = (v51 + 24);
      uint64_t v54 = sub_18126F0AC(v53);
      if (v54)
      {
        uint64_t v55 = (unsigned int *)v54;
        uint64_t v56 = *(_DWORD *)(v13 + 124);
        __int16 v86 = v53;
        if (v56 == 1) {
          uint64_t v57 = 24LL;
        }
        else {
          uint64_t v57 = v53 * (unint64_t)(v56 - 2) + 48;
        }
        uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(v13 + 16) + 16LL))( *(void *)(v13 + 16),  v54,  8LL,  v57);
        *(_DWORD *)(v13 + 96) = bswap32(*v55);
        *(_DWORD *)(v13 + 100) = bswap32(v55[1]);
        uint64_t v58 = *(_DWORD *)(v13 + 124);
        *(_DWORD *)(v13 + 124) = 0;
        if ((_DWORD)v28) {
          __int16 v59 = 1;
        }
        else {
          __int16 v59 = v58 > v31;
        }
        if (!v59)
        {
          uint64_t v60 = v58 + 1;
          while (1)
          {
            int v61 = (*(uint64_t (**)(void, unsigned int *, uint64_t, unint64_t))(**(void **)(v13 + 16)
                                                                                               + 16LL))( *(void *)(v13 + 16),  v55,  v86,  v86 * (unint64_t)(v60 - 2) + 32);
            if ((_DWORD)v61) {
              break;
            }
            sub_1812B0188(v13, bswap32(*v55), bswap32(v55[1]), v55 + 6, (uint64_t)&__buf);
            char v62 = (*(uint64_t (**)(void, uint64_t *, uint64_t, unint64_t))(**(void **)(v13 + 16)
                                                                                          + 24LL))( *(void *)(v13 + 16),  &__buf,  24LL,  v86 * (unint64_t)(v60 - 2) + 32);
            uint64_t v28 = v62;
            if (v60 <= v31)
            {
              ++v60;
              if (!(_DWORD)v62) {
                continue;
              }
            }

            goto LABEL_101;
          }

          uint64_t v28 = v61;
        }

      uint64_t v21 = (void *)sub_1812F2440(v20, 1016LL);
      if (v21) {
        goto LABEL_38;
      }
      goto LABEL_57;
    }

    uint64_t v21 = *(void **)(v20 + 472);
    if (v21)
    {
      uint64_t v22 = (void *)(v20 + 472);
    }

    else
    {
      uint64_t v21 = *(void **)(v20 + 464);
      if (!v21)
      {
        ++*(_DWORD *)(v20 + 456);
        goto LABEL_37;
      }

      uint64_t v22 = (void *)(v20 + 464);
    }

    *uint64_t v22 = *v21;
    ++*(_DWORD *)(v20 + 448);
LABEL_38:
    *uint64_t v21 = *(void *)a1;
    *(void *)a1 = v21;
    uint64_t v16 = v21 + 1;
    *(_WORD *)(a1 + 48) = 41;
    *(void *)(a1 + 32) = v21 + 4;
    *__int16 v9 = v21 + 1;
LABEL_39:
    *uint64_t v16 = 0LL;
    v16[1] = 0LL;
    uint64_t v23 = v7[1];
    v7[1] = 0LL;
    v7[2] = 0LL;
    if (v23)
    {
      int v24 = 1;
      do
      {
        uint64_t v19 = (void *)v23;
        v29[0] = *(void *)(v23 + 8);
        *(void *)(v23 + 16) = v7;
        *(void *)(v23 + 8) = sub_18130F34C(v29, v24++);
        uint64_t v23 = v29[0];
        unsigned int v7 = v19;
      }

      while (v29[0]);
    }

    else
    {
      uint64_t v19 = v7;
    }

        unsigned int v7 = (void **)v7[9];
      }

      while (v7);
    }

    uint64_t v11 = *(_WORD **)(a1 + 24);
    if (v11)
    {
      if (*(_WORD *)(a2 + 52))
      {
        uint64_t v12 = *(void *)a2;
        int v13 = *(__int16 *)(a2 + 20);
        uint64_t v14 = *(__int16 *)(a2 + 22);
        uint64_t v15 = v11 + 4;
        uint64_t v16 = (unsigned __int16)*v11;
        if (!*v11)
        {
LABEL_79:
          *uint64_t v11 = v16 + 1;
          uint64_t v49 = &v11[8 * v16];
          uint64_t v15 = v49 + 4;
          v49[9] = v14;
          goto LABEL_102;
        }

        uint64_t v17 = v11 + 4;
        int v18 = (unsigned __int16)*v11;
        do
        {
          uint64_t v19 = (__int16)v17[4];
          if (v19 >= v13 && (v12 & ~*(void *)v17) == 0)
          {
            uint64_t v15 = v17;
            goto LABEL_102;
          }

          if (v19 <= v13 && (*(void *)v17 & ~v12) == 0) {
            return 0LL;
          }
          --v18;
          v17 += 8;
        }

        while ((_WORD)v18);
        char v62 = v16 - 1;
        uint64_t v63 = v11 + 12;
        do
        {
          if (v15[4] > v63[4]) {
            uint64_t v15 = v63;
          }
          v63 += 8;
          --v62;
        }

        while (v62);
        if ((__int16)v15[4] > v13)
        {
LABEL_102:
          *(void *)uint64_t v15 = v12;
          v15[4] = v13;
          if ((__int16)v15[5] > v14)
          {
            uint64_t result = 0LL;
            v15[5] = v14;
            return result;
          }
        }
      }

      return 0LL;
    }

    uint64_t result = (uint64_t)sub_1813364C0(v6, a2);
    if (!result) {
      return result;
    }
    uint64_t v23 = (void *)result;
    int v24 = *(void *)result;
    if (*(void *)result)
    {
      char v25 = (uint64_t *)(v24 + 72);
      while (*v25)
      {
        uint64_t v26 = sub_1813364C0(v25, a2);
        if (!v26) {
          break;
        }
        char v25 = v26;
        uint64_t v27 = *v26;
        if (!*v26) {
          break;
        }
        *uint64_t v26 = *(void *)(v27 + 72);
        uint64_t v28 = *(void **)(v27 + 64);
        if (v28 != (void *)(v27 + 80))
        {
          sub_1812F20DC(v5, v28);
          *(void *)(v27 + 64) = v27 + 80;
          *(_WORD *)(v27 + 56) = 3;
        }

        sub_1813365A4(v5, v27);
        *(_WORD *)(v27 + 52) = 0;
        *(_DWORD *)(v27 + 48) = 0;
        sub_1813014B0(v5, (void *)v27);
      }
    }

    else
    {
      uint64_t v50 = sub_1812F2264((uint64_t)v5, 0x68uLL);
      *uint64_t v23 = v50;
      if (!v50) {
        return 7LL;
      }
      int v24 = v50;
      *(_WORD *)(v50 + 52) = 0;
      *(_WORD *)(v50 + 56) = 3;
      *(_DWORD *)(v50 + 48) = 0;
      *(void *)(v50 + 64) = v50 + 80;
      *(void *)(v50 + 72) = 0LL;
    }

    sub_1813365A4(v5, v24);
    uint64_t v51 = *(unsigned __int16 *)(a2 + 52);
    if (v51 > *(unsigned __int16 *)(v24 + 56))
    {
      int v52 = (v51 + 7) & 0x1FFF8;
      int v53 = (void *)sub_1812F2264((uint64_t)v5, 8 * v52);
      if (!v53)
      {
        *(void *)(v24 + 48) = 0LL;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)int v24 = 0u;
        uint64_t result = 7LL;
        if ((*(_BYTE *)(v24 + 49) & 4) != 0) {
          return result;
        }
        goto LABEL_93;
      }

      uint64_t v54 = v53;
      memcpy(v53, *(const void **)(v24 + 64), 8LL * *(unsigned __int16 *)(v24 + 56));
      uint64_t v55 = *(void **)(v24 + 64);
      if (v55 != (void *)(v24 + 80)) {
        sub_1812F20DC(v5, v55);
      }
      *(void *)(v24 + 64) = v54;
      *(_WORD *)(v24 + 56) = v52;
    }

    uint64_t v56 = *(_OWORD *)a2;
    uint64_t v57 = *(_OWORD *)(a2 + 16);
    uint64_t v58 = *(_OWORD *)(a2 + 32);
    __int16 v59 = *(void *)(a2 + 48);
    *(void *)(v24 + 48) = v59;
    *(_OWORD *)(v24 + 16) = v57;
    *(_OWORD *)(v24 + 32) = v58;
    *(_OWORD *)int v24 = v56;
    memcpy(*(void **)(v24 + 64), *(const void **)(a2 + 64), 8LL * WORD2(v59));
    uint64_t v60 = *(_DWORD *)(a2 + 48);
    if ((v60 & 0x400) != 0)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a2 + 28) &= ~1u;
    }

    else
    {
      uint64_t result = 0LL;
      if ((v60 & 0x4000) != 0)
      {
        *(void *)(a2 + 32) = 0LL;
        if ((*(_BYTE *)(v24 + 49) & 4) != 0) {
          return result;
        }
LABEL_93:
        int v61 = *(void *)(v24 + 32);
        return result;
      }
    }

    if ((*(_BYTE *)(v24 + 49) & 4) != 0) {
      return result;
    }
    goto LABEL_93;
  }

  int v20 = *(_WORD **)(a1 + 24);
  if (v20) {
    *int v20 = 0;
  }
  return 101LL;
}

          uint64_t v28 = v17;
          uint64_t v27 = *v6 + v17;
          if (fabs(*v6) <= fabs(v17))
          {
            int v20 = v17 - v27;
            uint64_t v21 = *v6;
          }

          else
          {
            int v20 = *v6 - v27;
            uint64_t v21 = v28;
          }

          v6[1] = v20 + v21 + v6[1];
          *int32x2_t v6 = v27;
          return;
        }

  uint64_t v27 = *(void *)(v10 + 528);
  *(void *)(v10 + 528) = 0LL;
  if (v13 && v16)
  {
    uint64_t v28 = *(void *)(v10 + 48);
    if ((_DWORD)result) {
      *(void *)(v10 + 48) = v28 & 0xFFFFFFFF9FFFFFFFLL;
    }
    uint64_t v29 = sub_1813523CC((uint64_t)v57, v13, v10, v16, v18, a6, a7, a8);
    *(void *)(v10 + 48) |= v28 & 0x60000000;
    if (v29) {
      goto LABEL_42;
    }
    if ((v20 & 0x4000000) == 0 && v60 && *(_BYTE *)(v60 + 63) == 2)
    {
      uint64_t v56 = 0u;
      uint64_t v55 = 0u;
      uint64_t v54 = 0u;
      int v53 = v57;
      sub_181321444(v57, *(void *)(v60 + 64), (uint64_t)&v53);
      if (v59) {
        uint64_t v29 = v58;
      }
      else {
        uint64_t v29 = 0;
      }
LABEL_42:
      if (v29 && v23 && (*(void *)(v10 + 48) & 0x10000001LL) != 1) {
        sub_181353638((uint64_t)a1, v23, a3[2], a3[3], v57, v30, v31, v32);
      }
      goto LABEL_100;
    }

    int32x2_t v33 = v61;
    if (v61)
    {
      if ((v20 & 0x4000000) == 0)
      {
        uint64_t v29 = sub_1813528A8((uint64_t)v57);
        if (v29) {
          goto LABEL_42;
        }
        int32x2_t v33 = v61;
      }

      int v34 = *(void *)(v33 + 48);
      if (v34)
      {
        uint64_t v35 = (uint64_t *)(*(void *)(v10 + 32) + 24LL);
        uint64_t v36 = -1;
        do
        {
          __int16 v37 = *v35;
          v35 += 4;
          ++v36;
        }

        while (v37 != v34);
      }

      else
      {
        uint64_t v36 = -32768;
      }

      uint64_t v40 = *(_DWORD *)(v10 + 40);
      int v41 = __OFSUB__(v40, 1);
      uint64_t v42 = (v40 - 1);
      if ((int)v42 < 0 == v41)
      {
        uint64_t v43 = (_BYTE **)(*(void *)(v10 + 32) + 32 * v42);
        do
        {
          BOOL v44 = *v43;
          if (*v43)
          {
            for (uint64_t i = v13; ; ++i)
            {
              uint64_t v46 = *v44;
              uint64_t v47 = *i;
              if ((_DWORD)v46 == (_DWORD)v47)
              {
                if (!*v44) {
                  goto LABEL_98;
                }
              }

              else if (byte_1813C6343[v46] != byte_1813C6343[v47])
              {
                break;
              }

              ++v44;
            }
          }

          if (!(_DWORD)v42)
          {
            uint64_t v49 = v13;
            for (uint64_t j = "main"; ; ++j)
            {
              uint64_t v51 = *(unsigned __int8 *)j;
              int v52 = *v49;
              if ((_DWORD)v51 == (_DWORD)v52)
              {
                if (!*j)
                {
                  LODWORD(v42) = 0;
                  goto LABEL_98;
                }
              }

              else if (byte_1813C6343[v51] != byte_1813C6343[v52])
              {
                break;
              }

              ++v49;
            }
          }

          v43 -= 4;
          uint64_t v48 = (int)v42 <= 0;
          LODWORD(v42) = v42 - 1;
        }

        while (!v48);
        if (v36 != -1) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }

  sub_18136EEAC(a1[3]);
  a1[15] = 0LL;
  uint64_t result = 0.0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  return result;
}

          LODWORD(v15) = v15 + 1 + v20;
        }

        else
        {
          uint64_t v19 = 10;
        }

        uint64_t v21 = v9[(int)v15];
        if (v21 <= 0x29 && ((0x30500003E01uLL >> v21) & 1) != 0)
        {
          uint64_t v22 = 0xFBFFFFFFFEuLL >> v21;
          if (sqlite3_initialize() || (uint64_t v23 = sub_18126F0AC(64LL)) == 0)
          {
            uint64_t v5 = 7;
            if ((v22 & 1) != 0) {
              goto LABEL_229;
            }
          }

          else
          {
            uint64_t v5 = 0;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)uint64_t v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_DWORD *)uint64_t v23 = *((unsigned __int8 *)&off_189B6F100 + 16 * v13 + 10);
            *(_DWORD *)(v23 + 4) = v19;
            uint64_t v139 = v23;
            uint64_t v137 = v15 + v127;
            uint64_t v12 = v23;
            if ((v22 & 1) != 0) {
              goto LABEL_146;
            }
          }
        }

        if (v21 <= 0x29 && ((1LL << v21) & 0x30400000001LL) != 0) {
          goto LABEL_146;
        }
      }

      ++v13;
    }

    while (v13 != 4);
    int v24 = *v9;
    if (v24 != 34)
    {
      if (v24 == 40)
      {
        LODWORD(v143) = 0;
        uint64_t v29 = *((_DWORD *)v129 + 12);
        *((_DWORD *)v129 + 12) = v29 + 1;
        if (v29 <= 999)
        {
          uint64_t v5 = sub_18136F840(v129, v9 + 1, (v8 - 1), &v139, &v143);
          uint64_t v137 = v127 + (_DWORD)v143 + 1;
          uint64_t v12 = v139;
        }

        else
        {
          uint64_t v5 = 1;
        }

        goto LABEL_146;
      }

      if (v24 != 41)
      {
        char v25 = *((unsigned int *)v129 + 7);
        uint64_t v125 = *((_DWORD *)v129 + 8);
        if ((int)v25 < 1)
        {
          uint64_t v47 = 0;
        }

        else
        {
          for (uint64_t i = 0LL; i != v25; ++i)
          {
            uint64_t v49 = (const char *)v129[2][i];
            uint64_t v50 = strlen(v49);
            uint64_t v51 = v50;
            if (v8 > v50 && v9[v50] == 58)
            {
              if (v50 < 0)
              {
                sub_1812CF36C(35844);
LABEL_78:
                uint64_t v47 = v127 + v51 + 1;
                uint64_t v125 = i;
                goto LABEL_83;
              }

              if (v49)
              {
                if (!v50) {
                  goto LABEL_78;
                }
                int v52 = v50 + 1;
                int v53 = v9;
                while (1)
                {
                  uint64_t v54 = *(unsigned __int8 *)v49;
                  if (!*v49) {
                    break;
                  }
                  LODWORD(v54) = byte_1813C6343[v54];
                  uint64_t v48 = byte_1813C6343[*v53];
                  if ((_DWORD)v54 != v48) {
                    goto LABEL_67;
                  }
                  ++v49;
                  ++v53;
                }

                uint64_t v48 = byte_1813C6343[*v53];
LABEL_67:
                if ((_DWORD)v54 == v48) {
                  goto LABEL_78;
                }
              }
            }
          }

          uint64_t v47 = 0;
        }

    int v30 = *(_DWORD *)(a2 + 40);
    if ((v30 & 0x80000000) == 0)
    {
      char v31 = 0;
      int v32 = (unsigned __int8 *)v47;
      int32x2_t v33 = &v47[(int)v23];
      int v34 = v47;
      while (1)
      {
        uint64_t v35 = (char *)v32;
        if (v34 < v33)
        {
          uint64_t v36 = 0;
          __int16 v37 = v33 - v34;
          while (1)
          {
            __int16 v38 = *v34;
            if (!(*v34 & 0xFE | v36)) {
              break;
            }
            ++v34;
            uint64_t v36 = v38 & 0x80;
            if (!--v37)
            {
              int v32 = (unsigned __int8 *)v33;
              if (v31 != v30) {
                goto LABEL_47;
              }
              goto LABEL_56;
            }
          }
        }

        int v32 = (unsigned __int8 *)v34;
        if (v31 == v30)
        {
LABEL_56:
          LODWORD(v23) = (_DWORD)v32 - (_DWORD)v35;
          goto LABEL_58;
        }

              *(_DWORD *)(a1 + 60) = v13;
              ++*(_DWORD *)(a1 + 112);
              return v2;
            }

          v13[4] = 0LL;
          v13[5] = 0LL;
          int v24 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
            --qword_18C468B10;
            off_18C4653A8(v13);
            int v13 = (void *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_22;
            }
            int v24 = &xmmword_18C465410;
          }

          (*v24)(v13);
LABEL_22:
          int v13 = v15;
          if (!v15) {
            goto LABEL_4;
          }
        }

        uint64_t v23 = &xmmword_18C465410;
LABEL_36:
        (*v23)(v22);
        goto LABEL_37;
      }

      ++v25;
      uint64_t v98 = v28 <= 1;
      uint64_t v28 = v33;
      uint64_t v26 = v234;
      if (v98) {
        goto LABEL_33;
      }
    }

    uint64_t v40 = v230;
    uint64_t v45 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_50:
    (*v45)(v44);
    uint64_t v27 = a5;
    uint64_t v29 = v41;
    uint64_t v28 = v40;
    goto LABEL_51;
  }

      *uint64_t v16 = 0LL;
      v16[1] = 0LL;
      ++v14;
      v15 += 32LL;
    }

    while (v14 < *(int *)(a2 + 84));
  }

  uint64_t v19 = *(void *)(a2 + 88);
  if (v19)
  {
    int v20 = &off_18C4653A8;
    if (!dword_18C465380) {
      return (*v20)(v19);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v19);
    uint64_t v19 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v20 = &xmmword_18C465410;
      return (*v20)(v19);
    }
  }

  return result;
}

LABEL_79:
  int32x2_t v33 = v5[2];
  if (v33) {
    xmmword_18C465410(*(void *)&v33);
  }
  return v8;
}

          if (*(_BYTE *)(a1 + 63))
          {
LABEL_80:
            v23[28] = -1;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  6LL,  1LL,  9LL,  v22);
              goto LABEL_82;
            }

            goto LABEL_83;
          }

          uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  6LL,  1LL,  10LL);
          if ((_DWORD)v27 != 5)
          {
            unsigned int v4 = v27;
            if ((_DWORD)v27) {
              goto LABEL_23;
            }
            goto LABEL_80;
          }

    uint64_t v46 = (uint64_t *)*v46;
    uint64_t v49 = (_BYTE *)v46[3];
    for (uint64_t i = *a2; ; ++i)
    {
      uint64_t v51 = *v49;
      int v52 = *i;
      if ((_DWORD)v51 == (_DWORD)v52)
      {
        if (!*v49) {
          goto LABEL_88;
        }
      }

      else if (byte_1813C6343[v51] != byte_1813C6343[v52])
      {
        if (!--v48)
        {
          uint64_t v46 = &qword_18C550660;
          goto LABEL_88;
        }

        goto LABEL_79;
      }

      ++v49;
    }
  }

  uint64_t v5 = a2[9];
  int32x2_t v6 = 0;
  uint64_t result = 1LL;
  while (v5)
  {
    uint64_t v14 = *((unsigned int *)v5 + 10);
    if ((int)v14 >= 1)
    {
      uint64_t v15 = (int *)(v5 + 64);
      while (1)
      {
        uint64_t v17 = *v15;
        v15 += 4;
        uint64_t v16 = v17;
        if (!--v14) {
          goto LABEL_13;
        }
      }

      int v18 = *a2;
      uint64_t v19 = (unsigned __int8 *)*((void *)v5 + 2);
      if (*a2)
      {
        if (v19)
        {
          while (1)
          {
            uint64_t v21 = *v18;
            uint64_t v22 = *v19;
            if ((_DWORD)v21 == (_DWORD)v22)
            {
              if (!*v18) {
                goto LABEL_32;
              }
            }

            else
            {
              int v20 = byte_1813C6343[v21] - byte_1813C6343[v22];
              if (v20) {
                goto LABEL_31;
              }
            }

            ++v18;
            ++v19;
          }
        }
      }

      else
      {
        if (v19) {
          int v20 = -1;
        }
        else {
          int v20 = 0;
        }
LABEL_31:
        if (!v20)
        {
LABEL_32:
          int32x2_t v6 = 1;
          uint64_t result = 2LL;
          goto LABEL_13;
        }
      }

      int32x2_t v6 = 1;
    }

        unint64_t v85 = 0;
        for (uint64_t i = 0; ; ++i)
        {
          uint64_t v87 = i;
          int v88 = v84;
          while (1)
          {
            while (1)
            {
LABEL_81:
              uint64_t v89 = __s[v88];
              if (!__s[v88] || v89 == 35)
              {
                uint64_t v120 = v12 | 0x40;
                if (v85 == 1)
                {
                  ++i;
                  v19[v87] = 0;
                }

                *(_DWORD *)&v19[i] = 0;
                uint64_t v96 = &v19[strlen(v19) & 0x3FFFFFFF];
                uint64_t v98 = *((unsigned __int8 *)v96 + 1);
                uint64_t v97 = v96 + 1;
                if (!v98)
                {
                  uint64_t v23 = v12 | 0x40;
                  goto LABEL_23;
                }

                uint64_t v118 = a5;
                while (1)
                {
                  uint64_t v102 = strlen(v97) & 0x3FFFFFFF;
                  uint64_t v103 = &v97[v102 + 1];
                  uint64_t v104 = strlen(v103);
                  uint64_t v105 = v104 & 0x3FFFFFFF;
                  switch(v102)
                  {
                    case 5:
                      if (*(_DWORD *)v97 == 1751343459 && v97[4] == 101)
                      {
                        uint64_t v116 = -393217;
                        uint64_t v117 = 393216;
                        uint64_t v108 = &off_189B6E860;
                        uint64_t v109 = "cache";
LABEL_145:
                        uint64_t v119 = v109;
                        uint64_t v110 = *v108;
                        if (!*v108) {
                          goto LABEL_153;
                        }
                        uint64_t v111 = v104 & 0x3FFFFFFF;
                        uint64_t v112 = (const char **)(v108 + 2);
                        while (v105 != (strlen(v110) & 0x3FFFFFFF) || memcmp(v103, v110, v111))
                        {
                          uint64_t v113 = *v112;
                          v112 += 2;
                          uint64_t v110 = v113;
                          if (!v113) {
                            goto LABEL_153;
                          }
                        }

                        uint64_t v114 = *((_DWORD *)v112 - 2);
                        if (!v114)
                        {
LABEL_153:
                          int v24 = sqlite3_mprintf("no such %s mode: %s", v119, v103);
                          uint64_t v17 = 1LL;
LABEL_154:
                          a5 = v118;
                          uint64_t v23 = v120;
                          goto LABEL_27;
                        }

                        if ((int)(v114 & 0xFFFFFF7F) > v117)
                        {
                          int v24 = sqlite3_mprintf("%s mode not allowed: %s", v119, v103);
                          uint64_t v17 = 3LL;
                          goto LABEL_154;
                        }

                        uint64_t v120 = v114 | v116 & v120;
                      }

                      break;
                    case 4:
                      if (*(_DWORD *)v97 == 1701080941)
                      {
                        uint64_t v117 = v120 & 0x87;
                        uint64_t v116 = -136;
                        uint64_t v108 = &off_189B6E890;
                        uint64_t v109 = "access";
                        goto LABEL_145;
                      }

                      break;
                    case 3:
                      if (*(_WORD *)v97 == 26230 && v97[2] == 115) {
                        a1 = &v97[v102 + 1];
                      }
                      break;
                  }

                  uint64_t v100 = &v103[v105];
                  uint64_t v101 = *((unsigned __int8 *)v100 + 1);
                  uint64_t v97 = v100 + 1;
                  if (!v101)
                  {
                    a5 = v118;
                    uint64_t v23 = v120;
                    goto LABEL_23;
                  }
                }
              }

              uint64_t v84 = v88 + 1LL;
              if (v89 != 37) {
                break;
              }
              int v90 = __s[v84];
              if ((byte_1813C6558[v90] & 8) == 0) {
                break;
              }
              unsigned __int16 v91 = __s[v88 + 2];
              if ((byte_1813C6558[v91] & 8) == 0) {
                break;
              }
              v88 += 3;
              uint64_t v89 = ((((char)(2 * v91) >> 7) & 0xF9) + (_BYTE)v91) & 0xF | (16
              if (((((char)(2 * v91) >> 7) & 0xF9) + (_BYTE)v91) & 0xF | (16 * ((((char)(2 * v90) >> 7) & 9) + v90)))
              {
                LODWORD(v84) = v88;
                goto LABEL_111;
              }

              int v92 = &__s[v88];
              while (1)
              {
                unint64_t v94 = *v92++;
                unint64_t v93 = v94;
                if (!v94 || v93 == 35 || !v85 && v93 == 63) {
                  break;
                }
                if (v85 == 1)
                {
                  if (v93 == 38 || v93 == 61) {
                    goto LABEL_81;
                  }
                }

                else if (v85 == 2 && v93 == 38)
                {
                  goto LABEL_81;
                }

                ++v88;
              }
            }

            if (v85 != 1) {
              break;
            }
            if (v89 != 61 && v89 != 38) {
              goto LABEL_119;
            }
            if (v19[i - 1])
            {
              if (v89 == 38)
              {
                LOBYTE(v89) = 0;
                ++i;
                v19[v87] = 0;
LABEL_119:
                unint64_t v85 = 1;
              }

              else
              {
                LOBYTE(v89) = 0;
                unint64_t v85 = 2;
              }

              goto LABEL_111;
            }

            ++v88;
            for (uint64_t j = &__s[(int)v84]; ; ++j)
            {
              unint64_t v85 = 1;
              if (!*j || *j == 35) {
                break;
              }
              if (*(j - 1) == 38)
              {
                unint64_t v85 = 1;
                goto LABEL_81;
              }

              ++v88;
            }
          }

          if (!v85 && v89 == 63 || v85 == 2 && v89 == 38)
          {
            LOBYTE(v89) = 0;
            goto LABEL_119;
          }

        unsigned __int8 *v41 = 0LL;
        *int v13 = v32 - 1;
        uint64_t v45 = (unsigned __int16 ***)(a2 + 136LL * v8 + 112);
        while (!*(_DWORD *)(v5 + 60))
        {
          uint64_t result = sub_181390FF0(v5, (unsigned int **)v10);
          uint64_t v46 = *v45;
          if (!*v45) {
            break;
          }
          uint64_t v47 = __rev16(**v46);
          if (v47)
          {
            if (v47 >= 4 && *((_DWORD *)v46 + 3) > (signed int)v47)
            {
              *(void *)(a2 + 136LL * v8 + 128) = sub_18138BFCC( (char *)*v46 + v47,  (unint64_t *)(a2 + 136LL * v8 + 216))
                                                               + v47;
              uint64_t result = sub_181391240(v5, v10);
              goto LABEL_42;
            }

            goto LABEL_51;
          }
        }

        goto LABEL_42;
      }
    }

    uint64_t v14 = (uint64_t (**)(uint64_t, uint64_t, void))(a2 + 136LL * v8 + 152);
    if (!v15) {
      goto LABEL_53;
    }
LABEL_54:
    int32x2_t v33 = a2 + 136LL * v8;
    uint64_t v35 = *(void *)(v33 + 112);
    int v34 = (uint64_t *)(v33 + 112);
    uint64_t v17 = v35;
    if (!v35) {
      goto LABEL_61;
    }
    while (1)
    {
      uint64_t v36 = v34[13];
      if ((v49 & 2) != 0)
      {
        if (v36 <= a4) {
          goto LABEL_16;
        }
      }

      else if (v36 >= a4)
      {
        goto LABEL_16;
      }

      if (*(_DWORD *)(v5 + 60)) {
        goto LABEL_16;
      }
      uint64_t result = (*v14)(v5, v10, 0LL);
      uint64_t v17 = *v34;
      if (!*v34) {
        goto LABEL_61;
      }
    }
  }

  return result;
}

uint64_t sub_18127BBE4(uint64_t a1, uint64_t a2, int a3, BOOL *a4)
{
  if (a3)
  {
    BOOL v5 = off_18C54FCF8(a2, 6LL) == 0;
  }

  else if (off_18C54FD28(a2, v8))
  {
    BOOL v5 = 0;
  }

  else
  {
    BOOL v5 = (v8[2] & 0xF000) != 0x8000 || v9 > 0;
  }

  *a4 = v5;
  return 0LL;
}

uint64_t sub_18127BC68(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 160) || (uint64_t v5 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v5 + 168LL))
  {
    sqlite3_log(27, "denying fileSize on invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    uint64_t result = off_18C54FD40(*(unsigned int *)(a1 + 24), v7);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 32) = *__error();
      return 1802LL;
    }

    else
    {
      uint64_t v6 = v8;
      *(void *)(a1 + 144) = v8;
      if (v6 == 1) {
        uint64_t v6 = 0LL;
      }
      *a2 = v6;
    }
  }

  return result;
}

uint64_t sub_18127BD0C(uint64_t a1, _DWORD *a2)
{
  if (*(_BYTE *)(a1 + 16) || *(void *)(a1 + 344))
  {
    uint64_t result = 0LL;
    *a2 = 1;
  }

  else if (!*(_BYTE *)(a1 + 17) {
         && (*(_BYTE *)(a1 + 8) || (uint64_t v5 = **(void **)(a1 + 72), *(int *)v5 >= 2) && *(void *)(v5 + 104)))
  }
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (*(void *)v4)
    {
      (*(void (**)(void))(*(void *)v4 + 8LL))(*(void *)(a1 + 80));
      *(void *)uint64_t v4 = 0LL;
    }

    uint64_t result = sub_1812FE900((uint64_t *)a1);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(a1 + 9) = 5;
      *(_BYTE *)(a1 + 21) = 0;
    }
  }

  else
  {
    return 14LL;
  }

  return result;
}

uint64_t sub_18127BDB4(const char *a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  sqlite3_snprintf(1024, __s, "%s", a1);
  int v3 = strlen(__s);
  if (v3 < 1)
  {
LABEL_4:
    if (__s[0] != 47) {
      __s[0] = 46;
    }
    uint64_t v4 = 1LL;
  }

  else
  {
    while (1)
    {
      uint64_t v4 = v3;
      if (__s[v3] == 47) {
        break;
      }
      --v3;
    }
  }

  __s[v4] = 0;
  int v5 = sub_1812F2E3C(__s, 0, 0LL, 0);
  uint64_t v6 = 0LL;
  *a2 = v5;
  if (v5 < 0)
  {
    uint64_t v6 = sub_1812F2E28(44571);
    int v7 = *__error();
    memset(__strerrbuf, 0, sizeof(__strerrbuf));
    strerror_r(v7, (char *)__strerrbuf, 0x4FuLL);
    sqlite3_log(v6, "os_unix.c:%d: (%d) %s(%s) - %s", 44571, v7, "openDirectory", __s, (const char *)__strerrbuf);
  }

  return v6;
}

uint64_t sub_18127BF04(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  v97[4] = *MEMORY[0x1895F89C0];
  if (a4 >= 6)
  {
    if (a4 < 0x65)
    {
      (*(void (**)(void))(*(void *)a1 + 112LL))();
      goto LABEL_4;
    }

    v97[0] = -1LL;
    sqlite3_file_control(*(sqlite3 **)(a1 + 160), 0LL, 103, v97);
    int v32 = HIDWORD(v97[0]);
    if (qword_18C468CB8 != -1) {
      dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
    }
    int32x2_t v33 = (os_log_s *)qword_18C468C88;
    if (os_log_type_enabled((os_log_t)qword_18C468C88, OS_LOG_TYPE_ERROR))
    {
      sub_1813C3FA0(a1, v32, v33);
      int v34 = getprogname();
      if (!v34) {
        goto LABEL_69;
      }
    }

    else
    {
      int v34 = getprogname();
      if (!v34) {
        goto LABEL_69;
      }
    }

    uint64_t v35 = v34;
    if (!strcmp(v34, "testfixture") || !strcmp(v35, "sqlite3") || !strcmp(v35, "xctest")) {
      return 15LL;
    }
LABEL_69:
    BOOL v36 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT);
    if (v36) {
      sub_1813C3F6C(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    return 15LL;
  }

LABEL_4:
  if (a3)
  {
    LODWORD(v7) = 0;
    uint64_t v8 = (int *)(**(void **)(a1 + 48) + 96LL);
    goto LABEL_6;
  }

  if (*(_BYTE *)(a1 + 70))
  {
LABEL_52:
    if (!*(_BYTE *)(a1 + 63))
    {
      unsigned int v46 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  3LL,  1LL,  6LL);
      if (v46)
      {
        if (v46 == 5) {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v7 = v46;
        }
        goto LABEL_99;
      }
    }

    *(_WORD *)(a1 + 60) = 0;
    uint64_t v28 = (*(uint64_t (**)(void, void, uint64_t, void, _BYTE *))(**(void **)(a1 + 8) + 104LL))( *(void *)(a1 + 8),  0LL,  0x8000LL,  0LL,  v95);
    if ((_DWORD)v28 == 8) {
      goto LABEL_98;
    }
    uint64_t v7 = v28;
    if ((_DWORD)v28 != 1288) {
      goto LABEL_60;
    }
    uint64_t v29 = **(_OWORD ***)(a1 + 48);
    __int128 v31 = v29[1];
    __int128 v30 = v29[2];
    *(_OWORD *)(a1 + 72) = *v29;
    *(_OWORD *)(a1 + 88) = v31;
    *(_OWORD *)(a1 + 104) = v30;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), &v96);
    if (!(_DWORD)v7)
    {
      if (v96 <= 31)
      {
        *a2 = 1;
        if (*(_DWORD *)(a1 + 88)) {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v7 = 0LL;
        }
        goto LABEL_60;
      }

      uint64_t v7 = (*(uint64_t (**)(void, void *, uint64_t, void))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  v97,  32LL,  0LL);
      if (!(_DWORD)v7)
      {
        if (*(void *)(a1 + 104) != v97[2])
        {
LABEL_98:
          uint64_t v7 = 0xFFFFFFFFLL;
          goto LABEL_99;
        }

        int v56 = *(_DWORD *)(a1 + 56);
        if (!sqlite3_initialize())
        {
          uint64_t v70 = v56 + 24;
          uint64_t v71 = sub_18126F0AC(v70);
          if (v71)
          {
            uint64_t v72 = v71;
            uint64_t v73 = *(void *)(a1 + 96);
            unint64_t v74 = *(unsigned int *)(a1 + 88) * (unint64_t)(*(_DWORD *)(a1 + 56) + 24) + 32;
            if ((uint64_t)(v74 + v70) <= v96)
            {
              while (1)
              {
                uint64_t v76 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 16)
                                                                                            + 16LL))( *(void *)(a1 + 16),  v72,  v70,  v74);
                if ((_DWORD)v76)
                {
                  uint64_t v7 = v76;
                  goto LABEL_164;
                }

                if (v93) {
                  break;
                }
                v74 += v70;
              }

              uint64_t v7 = 0xFFFFFFFFLL;
            }

            else
            {
LABEL_163:
              uint64_t v7 = 0LL;
            }

  if (!sub_181323268(v17, &v34))
  {
    *((_WORD *)i + 10) = 0;
    BOOL v23 = *(int **)(a2 + 32);
    if (*v23 >= 1)
    {
      unsigned int v24 = 0LL;
      unsigned int v25 = 2LL;
      do
      {
        if (!sub_18131BA10(0LL, v16, *(unsigned __int8 **)&v23[v25], 0xFFFFFFFFLL))
        {
          if (*(void *)(a2 + 112))
          {
            v35[0] = 0LL;
            BOOL v36 = 0u;
            uint64_t v37 = 0LL;
            uint64_t v38 = a2;
            v35[1] = sub_1813233F8;
            sub_18131C57C((uint64_t)v35, (uint64_t)v16);
          }

          *((_WORD *)i + 10) = v24 + 1;
        }

        ++v24;
        BOOL v23 = *(int **)(a2 + 32);
        v25 += 6LL;
      }

      while (v24 < *v23);
    }

    goto LABEL_7;
  }

  unsigned int v15 = v34;
  sub_1812DC47C( (uint64_t)v32,  "%r %s BY term out of range - should be between 1 and %d",  v13,  v14,  a5,  a6,  a7,  a8,  v11 + 1);
  while (1)
  {
    if ((*(_BYTE *)(v17 + 4) & 3) == 0)
    {
      __int128 v31 = *(_DWORD *)(v17 + 56);
      if (v31 > 0) {
        break;
      }
    }

    uint64_t v17 = *(void *)(v17 + 16);
    if (!v17) {
      return 1LL;
    }
  }

  *(_DWORD *)(*(void *)v32 + 84LL) = v31;
  return 1LL;
}

        if ((*((_DWORD *)a1 + 1) & 0x42000) != 0) {
          goto LABEL_11;
        }
        if (v1 != 176) {
          goto LABEL_15;
        }
        uint64_t v1 = a1[2];
        if (v1 == 176) {
          goto LABEL_15;
        }
        goto LABEL_2;
    }
  }

  uint64_t v12 = a1[2];
  if (v12) {
    goto LABEL_10;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t v12 = sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
LABEL_10:
    if (v8 != 7 && *(int *)(v10 + 40) >= 1)
    {
      unsigned int v13 = 0LL;
      if (v8 == 9) {
        int v14 = 2LL;
      }
      else {
        int v14 = 1LL;
      }
      unsigned int v15 = 8LL;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(v10 + 32) + v15);
        if (v16 && (*(_WORD *)(*(void *)(v16 + 8) + 40LL) & 1) != 0) {
          uint64_t v17 = 0LL;
        }
        else {
          uint64_t v17 = v14;
        }
        unsigned int v18 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v18)
        {
          sub_18131044C(v12, 2LL, v13, v17, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v18 + 1;
          uint64_t v19 = *(void *)(v12 + 136) + 40LL * v18;
          *(_DWORD *)uint64_t v19 = 2;
          *(_DWORD *)(v19 + 4) = v13;
          *(_DWORD *)(v19 + 8) = v17;
          *(void *)(v19 + 12) = 0LL;
          *(void *)(v19 + 28) = 0LL;
          *(void *)(v19 + 20) = 0LL;
          *(_DWORD *)(v19 + 36) = 0;
        }

        *(_DWORD *)(v12 + 272) |= 1 << v13;
        if (v13 != 1 && *(_BYTE *)(*(void *)(*(void *)(*(void *)v12 + 32LL) + v15) + 17LL)) {
          *(_DWORD *)(v12 + 276) |= 1 << v13;
        }
        ++v13;
        v15 += 32LL;
      }

      while (v13 < *(int *)(v10 + 40));
    }

    int v20 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v20)
    {
      sub_18131044C(v12, 1LL, 0LL, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v20 + 1;
      unsigned int v21 = *(void *)(v12 + 136) + 40LL * v20;
      *(_BYTE *)unsigned int v21 = 1;
      *(_OWORD *)(v21 + 1) = 0u;
      *(_OWORD *)(v21 + 17) = 0u;
      *(void *)(v21 + 32) = 0LL;
    }
  }

  if (a4) {
    ++*(_BYTE *)(v9 + 107);
  }
  int v14 = *(void *)(a2 + 8);
  if (v14)
  {
    unsigned int v15 = *(void *)(*a1 + 32LL);
    uint64_t v16 = (uint64_t *)(v15 + 24);
    uint64_t v17 = 0xFFFFFFFF00000000LL;
    do
    {
      unsigned int v18 = *v16;
      v16 += 4;
      v17 += 0x100000000LL;
    }

    while (v18 != v14);
    uint64_t v19 = (_BYTE **)(v15 + (v17 >> 27));
  }

  else
  {
    uint64_t v19 = (_BYTE **)(a2 + 16);
  }

  unsigned int v25 = sub_18129EAF4((uint64_t)a1, a3, *(char **)(a2 + 24), *v19, a5, a6, a7, a8);
  int32x2_t v33 = v25;
  if (a4)
  {
    --*(_BYTE *)(v9 + 107);
    if (!v25)
    {
      int v34 = *a1;
      uint64_t v35 = *(_DWORD *)(*a1 + 40LL);
      if (v35 >= 1)
      {
        BOOL v36 = 0LL;
        uint64_t v37 = *(_BYTE **)(a2 + 16);
        do
        {
          uint64_t v40 = *(void *)(v34 + 32) + 32 * v36;
          if (*(void *)(v40 + 8))
          {
            if (v37)
            {
              uint64_t v41 = *(unsigned __int8 **)v40;
              for (uint64_t i = v37; ; ++i)
              {
                uint64_t v43 = *i;
                uint64_t v44 = *v41;
                if ((_DWORD)v43 == (_DWORD)v44)
                {
                  if (!*i) {
                    break;
                  }
                }

                else if (byte_1813C6343[v43] != byte_1813C6343[v44])
                {
                  goto LABEL_30;
                }

                ++v41;
              }
            }

            if (a1[21]) {
              uint64_t v38 = a1[21];
            }
            else {
              uint64_t v38 = (uint64_t)a1;
            }
            uint64_t v39 = *(_DWORD *)(v38 + 124);
            if ((v39 & (1 << v36)) == 0)
            {
              *(_DWORD *)(v38 + 124) = v39 | (1 << v36);
              if (v36 == 1)
              {
                sub_1812FA2F0(v38);
                uint64_t v35 = *(_DWORD *)(v34 + 40);
              }
            }
          }

  sqlite3_exec(a1, "PRAGMA page_count", 0LL, 0LL, 0LL);
  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  if (!*((_BYTE *)a1 + 111))
  {
    sub_1812FA020((uint64_t)a1);
    if (a2) {
      goto LABEL_8;
    }
LABEL_20:
    LODWORD(v10) = 0;
    unsigned int v11 = *((void *)a1 + 4);
    goto LABEL_21;
  }

  if (!a2) {
    goto LABEL_20;
  }
LABEL_8:
  unsigned int v9 = *((unsigned int *)a1 + 10);
  if ((int)v9 < 1)
  {
LABEL_18:
    uint64_t v16 = 1LL;
    goto LABEL_23;
  }

  uint64_t v10 = 0LL;
  unsigned int v11 = *((void *)a1 + 4);
  while (!*(void *)(v11 + 32 * v10 + 8))
  {
LABEL_10:
    if (++v10 == v9) {
      goto LABEL_18;
    }
  }

  uint64_t v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (uint64_t i = a2; ; ++i)
  {
    int v14 = *i;
    unsigned int v15 = *v12;
    if ((_DWORD)v14 == (_DWORD)v15) {
      break;
    }
    if (byte_1813C6343[v14] != byte_1813C6343[v15]) {
      goto LABEL_10;
    }
LABEL_14:
    ++v12;
  }

  if (*i) {
    goto LABEL_14;
  }
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v17 = **(void **)(*(void *)(v11 + 32LL * v10 + 8) + 8LL);
  if (*(_BYTE *)(v17 + 18))
  {
    uint64_t v16 = 8LL;
    goto LABEL_23;
  }

  uint64_t v19 = *(void *)(v17 + 320);
  if (!v19)
  {
    sub_1812F0E00((uint64_t)a1, 0, &byte_1813CEAEE, 0);
    uint64_t v19 = *(void *)(v17 + 320);
    if (!v19)
    {
      uint64_t v16 = 7LL;
      goto LABEL_23;
    }
  }

  int v20 = *(unsigned __int8 *)(v17 + 21);
  if (!*(_BYTE *)(v17 + 21))
  {
    uint64_t v16 = sub_18127ADD8((void *)v17);
    if ((_DWORD)v16) {
      goto LABEL_23;
    }
  }

  unsigned int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v17 + 288))(v17, 1LL, &v48, 0LL);
  uint64_t v22 = v21;
  if (v20 <= 1 && (_DWORD)v21 == 0)
  {
    uint64_t v16 = sub_1812F177C(v17, 1, 0);
    if ((_DWORD)v16) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }

  if (!(_DWORD)v21)
  {
LABEL_46:
    unsigned int v24 = *(_DWORD *)(v17 + 32);
    goto LABEL_47;
  }

  unsigned int v24 = 0;
LABEL_47:
  LOBYTE(v26) = 0;
  uint64_t v27 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      blocint k = xmmword_1813CDB50;
      uint64_t v50 = xmmword_1813CDB60;
      v51[5] = xmmword_1813CDBC0;
      v51[6] = xmmword_1813CDBD0;
      v51[7] = xmmword_1813CDBE0;
      v51[8] = xmmword_1813CDBF0;
      v51[9] = xmmword_1813CDC00;
      v51[10] = xmmword_1813CDC10;
      v51[11] = xmmword_1813CDC20;
      v51[12] = xmmword_1813CDC30;
      v51[13] = xmmword_1813CDC40;
      if (*a3)
      {
        uint64_t v29 = 0LL;
        __int128 v30 = 0;
        __int128 v31 = 0;
        do
        {
          int v32 = *((_BYTE *)&block + v29);
          int32x2_t v33 = a3[v30];
          v31 += v32 + v33;
          int v34 = *((_BYTE *)&block + v31);
          *((_BYTE *)&block + v31) = v32;
          *((_BYTE *)&block + v29++) = v34;
          if (v33) {
            ++v30;
          }
          else {
            __int128 v30 = 0;
          }
        }

        while (v29 != 256);
      }

      uint64_t v35 = 0LL;
      BOOL v36 = 0;
      do
      {
        uint64_t v37 = *((_BYTE *)&block + v35 + 1);
        v36 += v37;
        *((_BYTE *)&block + v35 + 1) = *((_BYTE *)&block + v36);
        *((_BYTE *)&block + v36) = v37;
        *(_BYTE *)(v19 + 2 + v35) = *((_BYTE *)&block + v35 + 1) + v37;
        ++v35;
      }

      while (v35 != 32);
      uint64_t v27 = 0;
      LOBYTE(v26) = 32;
    }

    else
    {
      uint64_t v28 = 0LL;
      if (a4 >= 32) {
        uint64_t v26 = 32;
      }
      else {
        uint64_t v26 = a4;
      }
      do
      {
        *(_BYTE *)(v19 + 2 + v28) = a3[(int)v28 % v26];
        ++v28;
      }

      while (v28 != 32);
      uint64_t v27 = 0;
    }
  }

  *(_BYTE *)uint64_t v19 = v26;
  *(_BYTE *)(v19 + 1) = v27;
  if (v24 > 0 && !(_DWORD)v22)
  {
    uint64_t v38 = dword_18C54FA50 / *(_DWORD *)(v19 + 76) + 1;
    uint64_t v39 = 1LL;
    while (1)
    {
      if (v38 == (_DWORD)v39)
      {
        uint64_t v22 = 0LL;
        goto LABEL_87;
      }

      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, void))(v17 + 288))(v17, v39, &block, 0LL);
      if ((_DWORD)v40)
      {
        uint64_t v22 = v40;
        goto LABEL_93;
      }

      if (*((_DWORD *)a1 + 106))
      {
        *((_DWORD *)a1 + 106) = 0;
        uint64_t v22 = 9LL;
LABEL_93:
        unsigned int v45 = *(_OWORD *)(v19 + 34);
        unsigned int v46 = *(_OWORD *)(v19 + 50);
        *(_OWORD *)uint64_t v19 = v45;
        *(_OWORD *)(v19 + 16) = v46;
        *(_WORD *)(v19 + 32) = *(_WORD *)(v19 + 66);
        sub_1812B5930(v17, *(double *)&v45);
        uint64_t v16 = v22;
        goto LABEL_23;
      }

      uint64_t v41 = *(_DWORD **)(block + 40);
      if ((*(_WORD *)(block + 52) & 4) == 0 || v41[8] < *(_DWORD *)(block + 48)) {
        break;
      }
      if (v41[32])
      {
        uint64_t v42 = sub_1812FAFE4(block);
        goto LABEL_82;
      }

      uint64_t v22 = 0LL;
      uint64_t v43 = block;
      if ((void)block)
      {
LABEL_84:
        if ((*(_WORD *)(v43 + 52) & 0x20) != 0)
        {
          uint64_t v44 = *(void *)(v43 + 40);
          --*(_DWORD *)(v44 + 152);
          *(void *)(v43 + 32) = *(void *)(v44 + 168);
          *(void *)(v44 + 168) = v43;
          (*(void (**)(void, void, void))(**(void **)(v44 + 72) + 144LL))( *(void *)(v44 + 72),  *(void *)(v44 + 200) * (*(_DWORD *)(v43 + 48) - 1),  *(void *)(v43 + 8));
        }

        else
        {
          sub_1812F9F44(v43);
        }
      }

  unsigned int v11 = *a4;
  uint64_t v12 = *a4 + 1;
  if (*a4 < v8)
  {
    unsigned int v13 = (uint64_t *)(a1 + 136);
    uint64_t v35 = *a4 + 1;
    uint64_t v39 = a5;
    uint64_t v40 = a4;
    uint64_t v38 = a6;
    uint64_t v37 = a3;
    BOOL v36 = (uint64_t *)(a1 + 136);
    while (1)
    {
      int v14 = v11;
      unsigned int v11 = v12;
      unsigned int v15 = *(_DWORD *)(a1 + 144);
      uint64_t v16 = v14;
      uint64_t v17 = v13;
      unsigned int v18 = __OFSUB__(v14, v15);
      uint64_t v19 = v14 - v15;
      if (v19 < 0 == v18)
      {
        uint64_t v17 = (uint64_t *)*v9;
        int v20 = *(_DWORD *)(*v9 + 8LL);
        if (v19 >= v20)
        {
          unsigned int v21 = v9 + 1;
          do
          {
            v19 -= v20;
            uint64_t v22 = *v21++;
            uint64_t v17 = (uint64_t *)v22;
            int v20 = *(_DWORD *)(v22 + 8);
          }

          while (v19 >= v20);
        }

        uint64_t v16 = v19;
      }

      BOOL v23 = *v17;
      if (a2 && *(unsigned __int8 *)(v23 + 40LL * v16 + 1) == 252)
      {
        if ((int)v10 < 1)
        {
          LODWORD(v24) = 0;
        }

        else
        {
          unsigned int v24 = 0LL;
          while (v9[v24] != *(void *)(v23 + 40LL * v16 + 16))
          {
          }
        }

        if ((_DWORD)v24 == (_DWORD)v10)
        {
LABEL_22:
          uint64_t v41 = *v17;
          unsigned int v25 = sub_18128FAF0(a2, 8 * ((int)v10 + 1), v10 != 0);
          *(_DWORD *)(a1 + 52) = v25;
          if (v25)
          {
            a3 = 1LL;
            a6 = v38;
            a5 = v39;
            a4 = v40;
            BOOL v23 = v41;
            goto LABEL_36;
          }

          unsigned int v9 = *(void **)(a2 + 8);
          a4 = v40;
          BOOL v23 = v41;
          uint64_t v26 = v41 + 40LL * v16;
          v9[(int)v10] = *(void *)(v26 + 16);
          *(_WORD *)(a2 + 20) = *(_WORD *)(a2 + 20) & 0xF240 | 0x10;
          *(_DWORD *)(a2 + 16) = 8 * (v10 + 1);
          v8 += *(_DWORD *)(*(void *)(v26 + 16) + 8LL);
          LODWORD(v10) = v10 + 1;
          a6 = v38;
          a5 = v39;
          a3 = v37;
          unsigned int v13 = v36;
        }
      }

      if ((_DWORD)a3 == 2)
      {
        uint64_t v28 = *(unsigned __int8 *)(v23 + 40LL * v16);
        if (v28 == 113)
        {
          if ((*(_WORD *)(v23 + 40LL * v16 + 2) & 0x10) == 0) {
            goto LABEL_33;
          }
        }

        else if (v28 == 101 || v28 == 112)
        {
LABEL_33:
          a3 = 0LL;
          goto LABEL_36;
        }
      }

      else
      {
        if (!(_DWORD)a3)
        {
          unsigned int v11 = v35;
          goto LABEL_36;
        }

        uint64_t v27 = *(unsigned __int8 *)(v23 + 40LL * v16);
        if (v27 == 185 || v14 >= 1 && v27 == 8) {
          goto LABEL_33;
        }
      }

      uint64_t v12 = v11 + 1;
      if (v11 >= v8) {
        goto LABEL_35;
      }
    }
  }

  BOOL v23 = 0LL;
LABEL_35:
  uint64_t v16 = v11;
  *(_DWORD *)(a1 + 52) = 0;
  a3 = 101LL;
  unsigned int v11 = v12;
LABEL_36:
  *a4 = v11;
  *a5 = v16;
  *a6 = v23;
  return a3;
}

  unsigned int v13 = *(unsigned __int8 **)(a2 + 16);
  int v14 = sub_18130D838(v9, *(unsigned __int8 **)(a2 + 24), v13);
  if (v14)
  {
    uint64_t v22 = (uint64_t *)v14;
    if ((*(_WORD *)(v14 + 99) & 3) != 0)
    {
      sub_1812DC47C( a1,  "index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped",  v16,  v17,  v18,  v19,  v20,  v21,  0);
      return sub_18128FF4C((void *)v9, (void *)a2);
    }

    uint64_t v38 = *(void *)(v14 + 48);
    uint64_t v39 = *(void *)(v9 + 32);
    if (v38)
    {
      uint64_t v40 = (uint64_t *)(v39 + 24);
      uint64_t v41 = -1;
      do
      {
        uint64_t v42 = *v40;
        v40 += 4;
        ++v41;
      }

      while (v42 != v38);
    }

    else
    {
      uint64_t v41 = -32768;
    }

    uint64_t v43 = v41;
    if (v41 == 1) {
      uint64_t v44 = "sqlite_temp_master";
    }
    else {
      uint64_t v44 = "sqlite_master";
    }
    unsigned int v45 = *(void *)a1;
    unsigned int v46 = *(uint64_t (**)(void, uint64_t, const char *, void, uint64_t, void))(*(void *)a1 + 528LL);
    if (!v46) {
      goto LABEL_55;
    }
    uint64_t v47 = *(void **)(v14 + 24);
    int v48 = *(void *)(v39 + 32LL * v41);
    if (*(_BYTE *)(v45 + 197) || *(_BYTE *)(a1 + 302))
    {
      if (v41 == 1) {
        unsigned int v15 = 12LL;
      }
      else {
        unsigned int v15 = 10LL;
      }
    }

    else
    {
      uint64_t v68 = v46(*(void *)(v45 + 536), 9LL, v44, 0LL, v48, *(void *)(a1 + 368));
      if (v68 == 1)
      {
LABEL_70:
        uint64_t v70 = 23;
        uint64_t v71 = "not authorized";
LABEL_73:
        sub_1812DC47C(a1, v71, (uint64_t)v44, v17, v18, v19, v20, v21, v72);
        *(_DWORD *)(a1 + 24) = v70;
        return sub_18128FF4C((void *)v9, (void *)a2);
      }

      if ((v68 & 0xFFFFFFFD) != 0)
      {
LABEL_72:
        uint64_t v70 = 1;
        uint64_t v71 = "authorizer malfunction";
        goto LABEL_73;
      }

      if (v68) {
        return sub_18128FF4C((void *)v9, (void *)a2);
      }
      unsigned int v45 = *(void *)a1;
      unsigned int v46 = *(uint64_t (**)(void, uint64_t, const char *, void, uint64_t, void))(*(void *)a1 + 528LL);
      if ((_DWORD)v43 == 1) {
        unsigned int v15 = 12LL;
      }
      else {
        unsigned int v15 = 10LL;
      }
      if (!v46) {
        goto LABEL_55;
      }
    }

    if (*(_BYTE *)(v45 + 197) || *(_BYTE *)(a1 + 302))
    {
LABEL_55:
      uint64_t v49 = *(uint64_t **)(a1 + 16);
      if (v49) {
        goto LABEL_60;
      }
      if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
        *(_BYTE *)(a1 + 35) = 1;
      }
      uint64_t v49 = (uint64_t *)sub_1812DC63C((uint64_t *)a1, v15, (uint64_t)v44, v17, v18, v19, v20, v21);
      if (v49)
      {
LABEL_60:
        sub_18131EC34(a1, 1, v43);
        sub_1812C742C( (uint64_t *)a1,  "DELETE FROM %Q.sqlite_master WHERE name=%Q AND type='index'",  v50,  v51,  v52,  v53,  v54,  v55,  *(void *)(*(void *)(v9 + 32) + 32 * v43));
        sub_181324DE8((uint64_t *)a1, v43);
        sub_181320254((uint64_t *)a1, v43, v56, v57, v58, v59, v60, v61);
        sub_181325A30(a1, *((unsigned int *)v22 + 22), v43, v62, v63, v64, v65, v66);
        sub_1812B9B68(v49, 152LL, v43, 0LL, 0LL, *v22, 0LL, v67);
      }

      return sub_18128FF4C((void *)v9, (void *)a2);
    }

    uint64_t v69 = v46(*(void *)(v45 + 536), v15, (const char *)*v22, *v47, v48, *(void *)(a1 + 368));
    if (v69 == 1) {
      goto LABEL_70;
    }
    if ((v69 & 0xFFFFFFFD) == 0)
    {
      if (v69) {
        return sub_18128FF4C((void *)v9, (void *)a2);
      }
      goto LABEL_55;
    }

    goto LABEL_72;
  }

  if (a3)
  {
    uint64_t v28 = *(void *)a1;
    uint64_t v29 = *(_DWORD *)(*(void *)a1 + 40LL);
    if (v29 >= 1)
    {
      for (uint64_t i = 0LL; i < v29; ++i)
      {
        int32x2_t v33 = *(void *)(v28 + 32) + 32 * i;
        if (*(void *)(v33 + 8))
        {
          if (v13)
          {
            int v34 = *(unsigned __int8 **)v33;
            for (uint64_t j = v13; ; ++j)
            {
              BOOL v36 = *j;
              uint64_t v37 = *v34;
              if ((_DWORD)v36 == (_DWORD)v37)
              {
                if (!*j) {
                  break;
                }
              }

              else if (byte_1813C6343[v36] != byte_1813C6343[v37])
              {
                goto LABEL_25;
              }

              ++v34;
            }
          }

          if (*(void *)(a1 + 168)) {
            __int128 v31 = *(void *)(a1 + 168);
          }
          else {
            __int128 v31 = a1;
          }
          int v32 = *(_DWORD *)(v31 + 124);
          if ((v32 & (1 << i)) == 0)
          {
            *(_DWORD *)(v31 + 124) = v32 | (1 << i);
            if (i == 1)
            {
              sub_1812FA2F0(v31);
              uint64_t v29 = *(_DWORD *)(v28 + 40);
            }
          }
        }

  if (*(_BYTE *)(v10 + 103))
  {
    if (a3) {
      sub_181311F48((void *)v10, a3);
    }
    if (a4) {
      sub_18128FDA0((void *)v10, a4, 1);
    }
  }

  else
  {
    *(void *)(v11 + 8) = a3;
    *(void *)(v11 + 16) = a4;
    if (a2 && (uint64_t v12 = *(const void **)a2) != 0LL)
    {
      unsigned int v13 = *(unsigned int *)(a2 + 8);
      int v14 = (_BYTE *)sub_1812F2264(*a1, v13 + 1);
      unsigned int v15 = v14;
      if (v14)
      {
        memcpy(v14, v12, v13);
        v15[v13] = 0;
        if ((char)byte_1813C6558[*v15] < 0)
        {
          uint64_t v16 = 0LL;
          if (*v15 == 91) {
            uint64_t v17 = 93;
          }
          else {
            uint64_t v17 = *v15;
          }
          for (uint64_t i = 1; ; ++i)
          {
            uint64_t v19 = i;
            int v20 = v15[i];
            if (v20 == v17)
            {
              ++i;
              LOBYTE(v20) = v17;
            }

            v15[v16++] = v20;
          }

          v15[v16] = 0;
        }
      }
    }

    else
    {
      unsigned int v15 = 0LL;
    }

    *(void *)unsigned int v11 = v15;
    *(_BYTE *)(v11 + 40) = a5;
  }

  return v11;
}

    int v3 = *(void *)(v3 + 24);
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }

  unsigned int v9 = sub_1812A3C7C(a2);
  if (v9 <= 0x41)
  {
    if (*(_BYTE *)(v3 + 21) == 65) {
      goto LABEL_16;
    }
    goto LABEL_4;
  }

  unsigned int v13 = *(unsigned __int8 *)(v3 + 21);
  if (v9 == 66)
  {
    if (v13 == 66) {
      goto LABEL_16;
    }
    goto LABEL_4;
  }

  if (v13 != 67) {
    goto LABEL_4;
  }
LABEL_16:
  int v14 = *(void *)(a1 + 16);
  if (*(_BYTE *)(v3 + 20))
  {
    unsigned int v15 = *(unsigned int *)(v3 + 12);
    uint64_t v16 = *(_DWORD *)(v14 + 144);
    uint64_t v17 = (v16 + 3);
    if (*(_DWORD *)(v14 + 148) <= v16)
    {
      sub_18131044C(*(void *)(a1 + 16), 20LL, v15, v17, a3, v10, v11, v12);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v16 + 1;
      unsigned int v18 = *(void *)(v14 + 136) + 40LL * v16;
      *(_DWORD *)unsigned int v18 = 20;
      *(_DWORD *)(v18 + 4) = v15;
      *(_DWORD *)(v18 + 8) = v17;
      *(_DWORD *)(v18 + 12) = a3;
      *(void *)(v18 + 24) = 0LL;
      *(void *)(v18 + 32) = 0LL;
      *(void *)(v18 + 16) = 0LL;
    }

    unsigned int v24 = *(unsigned int *)(v3 + 12);
    unsigned int v25 = *(unsigned int *)(v3 + 16);
    uint64_t v26 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v26)
    {
      sub_18131044C(v14, 94LL, v24, v25, a3, v10, v11, v12);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v26 + 1;
      uint64_t v27 = *(void *)(v14 + 136) + 40LL * v26;
      *(_DWORD *)uint64_t v27 = 94;
      *(_DWORD *)(v27 + 4) = v24;
      *(_DWORD *)(v27 + 8) = v25;
      *(_DWORD *)(v27 + 12) = a3;
      *(void *)(v27 + 24) = 0LL;
      *(void *)(v27 + 32) = 0LL;
      *(void *)(v27 + 16) = 0LL;
    }

    uint64_t v28 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v28)
    {
      sub_18131044C(v14, 9LL, 0LL, 0LL, 0LL, v10, v11, v12);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v28 + 1;
      uint64_t v29 = *(void *)(v14 + 136) + 40LL * v28;
      *(_BYTE *)uint64_t v29 = 9;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 17) = 0u;
      *(void *)(v29 + 32) = 0LL;
    }

    __int128 v30 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = 0LL;
    sub_181319C00(a1, a2, a3);
    *(void *)(a1 + 96) = v30;
    if (*(_BYTE *)(*(void *)v14 + 103LL)) {
      dword_18C550688 = *(_DWORD *)(v14 + 144);
    }
    else {
      *(_DWORD *)(*(void *)(v14 + 136) + 40LL * (v16 + 2) + 8) = *(_DWORD *)(v14 + 144);
    }
  }

  else
  {
    int v20 = *(unsigned int *)(v3 + 12);
    unsigned int v21 = *(unsigned int *)(v3 + 16);
    uint64_t v22 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v22)
    {
      sub_18131044C(*(void *)(a1 + 16), 94LL, v20, v21, a3, v10, v11, v12);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v22 + 1;
      BOOL v23 = *(void *)(v14 + 136) + 40LL * v22;
      *(_DWORD *)BOOL v23 = 94;
      *(_DWORD *)(v23 + 4) = v20;
      *(_DWORD *)(v23 + 8) = v21;
      *(_DWORD *)(v23 + 12) = a3;
      *(void *)(v23 + 24) = 0LL;
      *(void *)(v23 + 32) = 0LL;
      *(void *)(v23 + 16) = 0LL;
    }
  }

  return a3;
}

  unsigned int v13 = *(unsigned __int8 **)(v9 + 16);
  int v14 = *v13;
  if (v14 == 176) {
    int v14 = v13[2];
  }
  if (v14 == 138)
  {
    unsigned int v15 = (unsigned int **)(*((void *)v13 + 4) + 32LL);
  }

  else
  {
    if (v14 != 177)
    {
      uint64_t v16 = 1LL;
      goto LABEL_12;
    }

    unsigned int v15 = (unsigned int **)(v13 + 32);
  }

  uint64_t v16 = **v15;
LABEL_12:
  *(_DWORD *)(v9 + 44) = a3;
  uint64_t v17 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v17)
  {
    uint64_t v19 = sub_18131044C((uint64_t)v11, 118LL, a3, v16, 0LL, a6, a7, a8);
  }

  else
  {
    *((_DWORD *)v11 + 36) = v17 + 1;
    unsigned int v18 = (uint64_t)&v11[17][5 * v17];
    *(_DWORD *)unsigned int v18 = 118;
    *(_DWORD *)(v18 + 4) = a3;
    *(_DWORD *)(v18 + 8) = v16;
    *(void *)(v18 + 12) = 0LL;
    *(void *)(v18 + 28) = 0LL;
    *(void *)(v18 + 20) = 0LL;
    *(_DWORD *)(v18 + 36) = 0;
    uint64_t v19 = v17;
  }

  uint64_t result = (uint64_t *)sub_18131A140(*v10, v16, 1);
  unsigned int v25 = result;
  uint64_t v26 = *(void *)(v9 + 32);
  if ((*(_BYTE *)(v9 + 5) & 0x10) == 0)
  {
    if (!v26) {
      goto LABEL_87;
    }
    uint64_t result = (uint64_t *)sub_1812A3C7C(v13);
    uint64_t v97 = (char)result;
    if ((int)result > 64)
    {
      if ((_DWORD)result != 69) {
        goto LABEL_55;
      }
      __int128 v30 = 67;
    }

    else
    {
      __int128 v30 = 65;
    }

    uint64_t v97 = v30;
LABEL_55:
    if (v25)
    {
      uint64_t result = (uint64_t *)sub_181289D04((uint64_t)v10, *(unsigned __int8 **)(v9 + 16), v27, v28, v29, v22, v23, v24);
      v25[4] = (uint64_t)result;
    }

    BOOL v54 = *((_BYTE *)v10 + 31);
    if (v54)
    {
      *((_BYTE *)v10 + 31) = v54 - 1;
      int v55 = *((unsigned int *)v10 + (v54 - 1) + 56);
      if (v54 != 1)
      {
        int v56 = v54 - 2;
        *((_BYTE *)v10 + 31) = v56;
        uint64_t v57 = *((unsigned int *)v10 + v56 + 56);
LABEL_67:
        int v93 = v19;
        if (*(int *)v26 >= 1)
        {
          uint64_t v59 = (unsigned __int8 **)(v26 + 8);
          uint64_t v60 = *(_DWORD *)v26 + 1;
          uint64_t v95 = v9;
          do
          {
            uint64_t v62 = *v59;
            if (v96)
            {
              uint64_t v103 = 1;
              uint64_t v100 = sub_18129C78C;
              uint64_t v101 = sub_18131C570;
              uint64_t v104 = 0;
              if (v62)
              {
                sub_18131C57C((uint64_t)v98, (uint64_t)v62);
                if (!v103)
                {
                  if (!*((_BYTE *)*v11 + 103))
                  {
                    uint64_t v63 = (uint64_t)&v11[17][5 * v96];
                    sub_18127ABFC(*v11, *(char *)(v63 - 39), *(void *)(v63 - 24));
                    *(void *)(v63 - 24) = 0LL;
                    *(_WORD *)(v63 - 40) = 184;
                    unsigned int v9 = v95;
                    if (!*((_BYTE *)*v11 + 103))
                    {
                      unsigned int v64 = (uint64_t)&v11[17][5 * v96];
                      sub_18127ABFC(*v11, *(char *)(v64 + 1), *(void *)(v64 + 16));
                      *(void *)(v64 + 16) = 0LL;
                      *(_WORD *)unsigned int v64 = 184;
                      unsigned int v9 = v95;
                    }
                  }

                  uint64_t v96 = 0;
                  *(_DWORD *)(v9 + 4) &= ~0x2000000u;
                }
              }
            }

            else
            {
              uint64_t v96 = 0;
            }

            sub_181319C00((uint64_t)v10, v62, v55);
            uint64_t result = (uint64_t *)sub_1812B9B68((uint64_t *)v11, 97LL, v55, 1LL, v57, (uint64_t)&v97, 1LL, v65);
            uint64_t v66 = *((_DWORD *)v11 + 36);
            if (*((_DWORD *)v11 + 37) > v66)
            {
              *((_DWORD *)v11 + 36) = v66 + 1;
              uint64_t v61 = (uint64_t)&v11[17][5 * v66];
              *(_DWORD *)uint64_t v61 = 64906;
              *(_DWORD *)(v61 + 4) = a3;
              *(_DWORD *)(v61 + 8) = v57;
              *(_DWORD *)(v61 + 12) = v55;
              *(_DWORD *)(v61 + 16) = 1;
              *(void *)(v61 + 24) = 0LL;
              *(void *)(v61 + 32) = 0LL;
            }

            else
            {
              uint64_t result = (uint64_t *)sub_181310690((uint64_t)v11, 138LL, a3, v57, v55, 1LL, v23, v24);
            }

            v59 += 3;
            --v60;
          }

          while (v60 > 1);
        }

        if ((_DWORD)v55)
        {
          int v67 = *((unsigned __int8 *)v10 + 31);
          if (v67 <= 7)
          {
            *((_BYTE *)v10 + 31) = v67 + 1;
            *((_DWORD *)v10 + v67 + 56) = v55;
          }
        }

        uint64_t v19 = v93;
        if ((_DWORD)v57)
        {
          uint64_t v68 = *((unsigned __int8 *)v10 + 31);
          if (v68 <= 7)
          {
            *((_BYTE *)v10 + 31) = v68 + 1;
            *((_DWORD *)v10 + v68 + 56) = v57;
          }
        }

        goto LABEL_87;
      }
    }

    else
    {
      int v55 = (*((_DWORD *)v10 + 14) + 1);
      *((_DWORD *)v10 + 14) = v55;
    }

    uint64_t v57 = (*((_DWORD *)v10 + 14) + 1);
    *((_DWORD *)v10 + 14) = v57;
    goto LABEL_67;
  }

  __int128 v31 = &byte_1813CEAEE;
  int v32 = *(_DWORD **)(v26 + 32);
  if (!v96) {
    __int128 v31 = "CORRELATED ";
  }
  uint64_t result = (uint64_t *)sub_18131CCF8(v10, 1, "%sLIST SUBQUERY %d", v20, v21, v22, v23, v24, (char)v31);
  if (*v32 != (_DWORD)v16)
  {
LABEL_87:
    if (v25)
    {
      if (*((_BYTE *)*v11 + 103))
      {
        if (!(*v11)[102])
        {
          uint64_t v58 = (*(_DWORD *)v25)-- == 1;
          if (v58)
          {
            uint64_t result = sub_1813014B0((void *)v25[2], v25);
            if (!v96) {
              return result;
            }
LABEL_99:
            uint64_t v73 = *((_DWORD *)v11 + 36);
            if (*((_DWORD *)v11 + 37) <= v73)
            {
              uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v11, 136LL, a3, 0LL, 0LL, v22, v23, v24);
            }

            else
            {
              *((_DWORD *)v11 + 36) = v73 + 1;
              unint64_t v74 = (uint64_t)&v11[17][5 * v73];
              *(_DWORD *)unint64_t v74 = 136;
              *(_DWORD *)(v74 + 4) = a3;
              *(_OWORD *)(v74 + 8) = 0u;
              *(_OWORD *)(v74 + 24) = 0u;
            }

            int v75 = *((_DWORD *)v11 + 36);
            if (*((_BYTE *)*v11 + 103)) {
              uint64_t v76 = &byte_18C550680;
            }
            else {
              uint64_t v76 = (char *)&v11[17][5 * v96];
            }
            *((_DWORD *)v76 + 2) = v75;
            int v78 = *(unsigned int *)(v9 + 72);
            uint64_t v77 = *(unsigned int *)(v9 + 76);
            if (*((_DWORD *)v11 + 37) <= v75)
            {
              uint64_t result = (uint64_t *)sub_18131044C((uint64_t)v11, 67LL, v77, v78, 1LL, v22, v23, v24);
            }

            else
            {
              *((_DWORD *)v11 + 36) = v75 + 1;
              uint64_t v79 = (uint64_t)&v11[17][5 * v75];
              *(_DWORD *)uint64_t v79 = 67;
              *(_DWORD *)(v79 + 4) = v77;
              *(_DWORD *)(v79 + 8) = v78;
              *(_DWORD *)(v79 + 12) = 1;
              *(void *)(v79 + 24) = 0LL;
              *(void *)(v79 + 32) = 0LL;
              *(void *)(v79 + 16) = 0LL;
            }

            *((_BYTE *)v10 + 31) = 0;
            *((_DWORD *)v10 + 10) = 0;
            return result;
          }
        }
      }

      else
      {
        if (v19 < 0) {
          uint64_t v19 = *((_DWORD *)v11 + 36) - 1;
        }
        uint64_t v69 = v11[17];
        uint64_t v70 = &v69[5 * v19];
        uint64_t v72 = *((unsigned __int8 *)v70 + 1);
        uint64_t v71 = (char *)v70 + 1;
        if (!v72)
        {
          v69[5 * v19 + 2] = v25;
          *uint64_t v71 = -8;
          if (!v96) {
            return result;
          }
          goto LABEL_99;
        }

        uint64_t result = sub_181310724((uint64_t *)v11, (uint64_t)&v69[5 * v19], (char *)v25, 0xFFFFFFF8);
      }
    }

    if (!v96) {
      return result;
    }
    goto LABEL_99;
  }

  v98[0] = 11;
  uint64_t v99 = a3;
  uint64_t v100 = 0LL;
  LODWORD(v101) = 0;
  unsigned int v94 = v9;
  uint64_t v102 = (void *)sub_18131D1C0(v10, v9);
  *(_DWORD *)(v26 + 8) = 0;
  uint64_t result = (uint64_t *)sub_18129F624(*v10, v26, 0LL);
  BOOL v36 = (uint64_t)result;
  uint64_t v37 = 0;
  if (!*(_BYTE *)(*v10 + 103))
  {
    uint64_t result = (uint64_t *)sub_1812801A8((void **)v10, (uint64_t)result, (uint64_t)v98, v34, v35, v22, v23, v24);
    uint64_t v37 = (_DWORD)result == 0;
  }

  if (v36) {
    uint64_t result = sub_18128FDA0((void *)*v10, v36, 1);
  }
  if (v102) {
    uint64_t result = sub_1812F20DC((void *)*v10, v102);
  }
  if (v37)
  {
    int v92 = v19;
    unsigned int v91 = a3;
    if ((int)v16 < 1)
    {
LABEL_64:
      uint64_t v19 = v92;
      unsigned int v9 = v94;
      a3 = v91;
      goto LABEL_87;
    }

    uint64_t v38 = 0LL;
    uint64_t v39 = v13 + 32;
    uint64_t v40 = v32 + 2;
    uint64_t v41 = (uint64_t **)(v25 + 4);
    uint64_t v42 = 24LL * v16;
    while (1)
    {
      uint64_t v44 = *v13;
      unsigned int v45 = v44;
      if (v44 == 176) {
        unsigned int v45 = v13[2];
      }
      unsigned int v46 = (int **)(v13 + 32);
      if (v45 != 177)
      {
        uint64_t v47 = v13;
        if (v45 != 138) {
          goto LABEL_44;
        }
        unsigned int v46 = (int **)(*v39 + 32LL);
      }

      uint64_t v47 = v13;
      if (**v46 >= 2)
      {
        if (v44 == 138 || (int v48 = v13 + 32, v13[2] == 138)) {
          int v48 = (void *)(*v39 + 32LL);
        }
        uint64_t v47 = *(unsigned __int8 **)(*v48 + v38 + 8);
      }

      ;
    }
  }

  unsigned int v13 = *(void *)(*(void *)(a2 + 40) + 16LL);
  if (!v13) {
    return 0LL;
  }
  while (!*(_BYTE *)(v13 + 98) || *(void *)(v13 + 72))
  {
LABEL_21:
    unsigned int v13 = *(void *)(v13 + 40);
    if (!v13) {
      return 0LL;
    }
  }

  if (!*(_WORD *)(v13 + 94))
  {
    LODWORD(v14) = 0;
    goto LABEL_20;
  }

  int v14 = 0LL;
  while (2)
  {
    if (sub_1813337CC(a3, v6, v14, -1LL, 2, (void *)v13)) {
      goto LABEL_27;
    }
    unsigned int v21 = *a4;
    if (*a4 < 1) {
      break;
    }
    uint64_t v22 = 0LL;
    BOOL v23 = *(unsigned __int8 **)(*(void *)(v13 + 64) + 8 * v14);
    while (1)
    {
      unsigned int v24 = (unsigned int *)&a4[6 * v22];
      unsigned int v25 = (unsigned __int8 *)*((void *)v24 + 1);
      if (v25)
      {
        uint64_t v26 = (unsigned __int8 *)*((void *)v24 + 1);
        while (1)
        {
          uint64_t v27 = *((_DWORD *)v26 + 1);
          if ((v27 & 0x82000) == 0) {
            break;
          }
          if ((v27 & 0x80000) != 0)
          {
            uint64_t v26 = *(unsigned __int8 **)(*((void *)v26 + 4) + 8LL);
            if (!v26) {
              goto LABEL_32;
            }
          }

          else
          {
            uint64_t v26 = (unsigned __int8 *)*((void *)v26 + 2);
            if (!v26) {
              goto LABEL_32;
            }
          }
        }

        uint64_t v28 = *v26;
        if ((v28 == 169 || v28 == 167)
          && *((_DWORD *)v26 + 12) == *(__int16 *)(*(void *)(v13 + 8) + 2 * v14)
          && *((_DWORD *)v26 + 11) == v6)
        {
          break;
        }
      }
    }

    if (*v6)
    {
      uint64_t result = (uint64_t *)sub_1812F2264(*v6, 0x20uLL);
      unsigned int v13 = result;
      if (!result) {
        return result;
      }
    }

    else
    {
      uint64_t result = (uint64_t *)sub_18126F0AC(32LL);
      unsigned int v13 = result;
      if (!result) {
        return result;
      }
    }

    v13[3] = v6[12];
    uint64_t result = (uint64_t *)sub_18129C928(*v6, v12, 0LL, 0LL);
    *unsigned int v13 = (uint64_t)result;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a4 + 64);
    *((_DWORD *)v13 + 3) = a3;
    *((_DWORD *)v13 + 4) = v7;
    *((_BYTE *)v13 + 20) = v11;
    uint64_t v17 = *(void *)(a2 + 32);
    if (!v17)
    {
      uint64_t result = (uint64_t *)sub_181338578(*v6, a2);
      if (!result) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a2 + 32);
    }

    *((_BYTE *)v13 + 21) = *(_BYTE *)(v17 + v7);
LABEL_24:
    v6[12] = (uint64_t)v13;
    if (!v13[3])
    {
      if (*v6)
      {
        uint64_t result = (uint64_t *)sub_1812F2264(*v6, 0x18uLL);
        if (!result) {
          goto LABEL_29;
        }
      }

      else
      {
        uint64_t result = (uint64_t *)sub_18126F0AC(24LL);
        if (!result)
        {
LABEL_29:
          unsigned int v18 = v6[12];
          if (v18)
          {
            uint64_t v19 = (void *)*v6;
            do
            {
              v6[12] = *(void *)(v18 + 24);
              if (*(void *)v18) {
                sub_181309110(v19, *(unsigned __int8 **)v18);
              }
              uint64_t result = sub_1812F20DC(v19, (void *)v18);
              unsigned int v18 = v6[12];
            }

            while (v18);
          }

          goto LABEL_4;
        }
      }

      *uint64_t result = v6[24];
      v6[24] = (uint64_t)result;
      result[1] = (uint64_t)v6;
      result[2] = (uint64_t)sub_181338514;
    }

    goto LABEL_4;
  }

  return result;
}

      LOBYTE(v10) = 0;
    }

    else
    {
      LOBYTE(v10) = -1;
    }
  }

  return (char)v10;
}

    if (++v5 != v4) {
      continue;
    }
    return result;
  }

    if (++v5 != v4) {
      continue;
    }
    return result;
  }

    unsigned int v18 = (v17 - v19);
LABEL_5:
    uint64_t v6 = *((_DWORD *)a1 + 4);
    uint64_t v7 = *((_DWORD *)a1 + 5);
    if (v7 >= v6) {
      return 101LL;
    }
  }

  if ((int)v18 > *((_DWORD *)a1 + 10))
  {
    *((_DWORD *)a1 + 10) = v18 + 20;
    __int128 v30 = a1[4];
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v26 = sub_18127D33C(v30, (int)v18 + 20);
    if (!v26) {
      return 7LL;
    }
    a1[4] = v26;
  }

  if ((int)v18 >= 1)
  {
    for (uint64_t i = 0LL; i != v18; ++i)
    {
      uint64_t v28 = *(unsigned __int8 *)(v15 + (int)v19 + i);
      *(_BYTE *)(a1[4] + i) = v28;
    }
  }

  uint64_t result = 0LL;
  *a2 = a1[4];
  *a3 = v18;
  *a4 = v19;
  *a5 = *((_DWORD *)a1 + 5);
  uint64_t v29 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v29 + 1;
  *a6 = v29;
  return result;
}

    uint64_t v17 = (v16 - v18);
LABEL_5:
    uint64_t v6 = *(_DWORD *)(a1 + 16);
    uint64_t v7 = *(_DWORD *)(a1 + 20);
    if (v7 >= v6) {
      return 101LL;
    }
  }

  uint64_t v27 = *(void *)(a1 + 32);
  if ((int)v17 > *(_DWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 40) = v17 + 20;
    if (sqlite3_initialize()) {
      return 7LL;
    }
    int v32 = sub_18127D33C(v27, (int)v17 + 20);
    if (!v32) {
      return 7LL;
    }
    uint64_t v27 = v32;
    *(void *)(a1 + 32) = v32;
    uint64_t v8 = a6;
    unsigned int v9 = a5;
    uint64_t v10 = a4;
    uint64_t v12 = a2;
    unsigned int v11 = a3;
  }

  int32x2_t v33 = (unsigned __int8 *)(v14 + (int)v18);
  if ((v17 - 21) < 0xFFFFFFEE)
  {
    if ((int)v17 < 1)
    {
      LODWORD(v43) = 0;
    }

    else
    {
      int v34 = 0;
      uint64_t v35 = (_BYTE *)v27;
      BOOL v36 = v17;
      do
      {
        uint64_t v38 = *v33++;
        uint64_t v37 = v38;
        uint64_t v39 = v38 - 65;
        uint64_t v40 = v38 + 32;
        else {
          uint64_t v41 = v34;
        }
        if (v39 >= 0x1A) {
          int v34 = v41;
        }
        else {
          uint64_t v37 = v40;
        }
        *v35++ = v37;
        --v36;
      }

      while (v36);
      if (v34)
      {
        uint64_t v42 = 3;
        LODWORD(v43) = v17;
        goto LABEL_80;
      }

      LODWORD(v43) = v17;
    }

    uint64_t v42 = 10;
LABEL_80:
    uint64_t v73 = (int)(v17 - v42);
    unint64_t v74 = v42;
    else {
      int v75 = (int)v17;
    }
    uint64_t v76 = v75 - v73;
    if ((unint64_t)(v75 - v73) >= 0x20)
    {
      uint64_t v77 = v27 + v73;
      if (v74 - v73 >= 0x20)
      {
        uint64_t v43 = v76 & 0xFFFFFFFFFFFFFFE0LL | v74;
        v73 += v76 & 0xFFFFFFFFFFFFFFE0LL;
        uint64_t v83 = (_OWORD *)(v74 + v27 + 16);
        uint64_t v84 = (__int128 *)(v77 + 16);
        uint64_t v85 = v76 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          BOOL v86 = *v84;
          *(v83 - 1) = *(v84 - 1);
          *uint64_t v83 = v86;
          v83 += 2;
          v84 += 2;
          v85 -= 32LL;
        }

        while (v85);
        if (v76 == (v76 & 0xFFFFFFFFFFFFFFE0LL)) {
          goto LABEL_111;
        }
      }

      else
      {
        uint64_t v43 = v74;
      }
    }

    else
    {
      uint64_t v43 = v74;
    }

    do
      *(_BYTE *)(v27 + v43++) = *(_BYTE *)(v27 + v73++);
    while (v73 < (int)v17);
    goto LABEL_111;
  }

  uint64_t v44 = v328;
  unsigned int v45 = 0x1700000000LL;
  unsigned int v46 = (unsigned __int8 *)(v14 + (int)v18);
  uint64_t v47 = v17;
  while (1)
  {
    uint64_t v49 = *v46++;
    int v48 = v49;
    LOBYTE(v48) = v48 + 32;
LABEL_41:
    *v44-- = v48;
    v45 -= 0x100000000LL;
    if (!--v47)
    {
      v328[5] = 0;
      *(_DWORD *)&v328[1] = 0;
      uint64_t v63 = v45 >> 32;
      unsigned int v64 = &v327[v45 >> 32];
      uint64_t v65 = *v64;
      uint64_t v326 = v27;
      uint64_t v321 = v8;
      if (v65 == 115)
      {
        uint64_t v66 = v64 + 1;
        uint64_t v65 = v64[1];
        if (v65 == 115)
        {
          *(_WORD *)unsigned int v64 = 29555;
          uint64_t v69 = 115;
          uint64_t v68 = v64;
          goto LABEL_151;
        }

        if (v65 == 101)
        {
          uint64_t v68 = v64 + 2;
          int v67 = v64[2];
          if (v67 == 105)
          {
LABEL_148:
            uint64_t v69 = 105;
            goto LABEL_149;
          }

          if (v67 == 115 && v64[3] == 115)
          {
            *(_WORD *)&v327[v63 + 2] = 29555;
            uint64_t v68 = &v327[v63 + 2];
            uint64_t v69 = 115;
LABEL_151:
            uint64_t v103 = v68[1];
            switch(v68[1])
            {
              case 'a':
                uint64_t v104 = v68 + 7;
                if (v103 == 97 && v69 == 108)
                {
                  if (v68[2] == 110 && v68[3] == 111 && v68[4] == 105 && v68[5] == 116 && v68[6] == 97)
                  {
                    uint64_t v322 = v68 + 4;
                    uint64_t v105 = *v104;
                    if (!*v104) {
                      goto LABEL_385;
                    }
                    uint64_t v106 = v68 + 8;
                    while (1)
                    {
                      uint64_t v107 = v105 - 97LL;
                      if (!(v107 == 24 ? sub_181367B70(v106) : 1 - byte_1813CB454[v107])) {
                        break;
                      }
                      uint64_t v109 = *v106++;
                      uint64_t v105 = v109;
                      if (!v109) {
                        goto LABEL_385;
                      }
                    }

                    char v308 = v106 - 1;
                    if (*(v308 - 1))
                    {
                      *(_WORD *)(v68 + 5) = 24948;
                      goto LABEL_496;
                    }

                    goto LABEL_385;
                  }
                }

                else
                {
                  if (v69 != 108) {
                    goto LABEL_368;
                  }
                  if (v103 != 97) {
                    goto LABEL_385;
                  }
                }

                if (v68[2] != 110) {
                  goto LABEL_385;
                }
                if (v68[3] != 111) {
                  goto LABEL_385;
                }
                if (v68[4] != 105) {
                  goto LABEL_385;
                }
                if (v68[5] != 116) {
                  goto LABEL_385;
                }
                uint64_t v146 = v68[6];
                if (!v146) {
                  goto LABEL_385;
                }
                while (1)
                {
                  uint64_t v147 = v146 - 97LL;
                  if (!(v147 == 24 ? sub_181367B70(v104) : 1 - byte_1813CB454[v147])) {
                    break;
                  }
                  uint64_t v149 = *v104++;
                  uint64_t v146 = v149;
                  if (!v149) {
                    goto LABEL_385;
                  }
                }

                int v293 = v104 - 1;
                if (!*(v293 - 1)) {
                  goto LABEL_385;
                }
                *(_DWORD *)(v68 + 2) = 1953066862;
                v68 += 2;
                goto LABEL_549;
              case 'c':
                if (v103 == 99 && v69 == 105)
                {
                  if (v68[2] == 110 && v68[3] == 101)
                  {
                    uint64_t v110 = v68[4];
                    if (!v110) {
                      goto LABEL_372;
                    }
                    uint64_t v111 = v68 + 5;
                    while (1)
                    {
                      uint64_t v112 = v110 - 97LL;
                      if (!(v112 == 24 ? sub_181367B70(v111) : 1 - byte_1813CB454[v112])) {
                        break;
                      }
                      uint64_t v114 = *v111++;
                      uint64_t v110 = v114;
                      if (!v114) {
                        goto LABEL_372;
                      }
                    }

                    uint64_t v241 = v111 - 1;
                    if (*(v241 - 1))
                    {
                      uint64_t v243 = 101;
LABEL_494:
                      v68[3] = v243;
                      uint64_t v234 = 28259;
                      goto LABEL_495;
                    }

                    goto LABEL_372;
                  }
                }

                else
                {
                  if (v69 != 105) {
                    goto LABEL_368;
                  }
                  if (v103 != 99)
                  {
LABEL_372:
                    if (v68[1] == 116 && v68[2] == 105 && v68[3] == 99 && v68[4] == 105)
                    {
                      unsigned int v191 = v68[5];
                      if (v191)
                      {
                        uint64_t v192 = v68 + 6;
                        while (1)
                        {
                          uint64_t v193 = v191 - 97LL;
                          if (!(v193 == 24 ? sub_181367B70(v192) : 1 - byte_1813CB454[v193])) {
                            break;
                          }
                          uint64_t v195 = *v192++;
                          unsigned int v191 = v195;
                          if (!v195) {
                            goto LABEL_549;
                          }
                        }

                        uint64_t v235 = v192 - 1;
                        if (*(v235 - 1))
                        {
                          *(_WORD *)(v68 + 3) = 26979;
                          v68 += 3;
                        }
                      }
                    }

                    goto LABEL_549;
                  }
                }

                if (v68[2] == 110 && v68[3] == 97)
                {
                  uint64_t v150 = v68[4];
                  if (v150)
                  {
                    uint64_t v151 = v68 + 5;
                    while (1)
                    {
                      uint64_t v152 = v150 - 97LL;
                      if (!(v152 == 24 ? sub_181367B70(v151) : 1 - byte_1813CB454[v152])) {
                        break;
                      }
                      uint64_t v154 = *v151++;
                      uint64_t v150 = v154;
                      if (!v154) {
                        goto LABEL_372;
                      }
                    }

                    uint64_t v248 = v151 - 1;
                    if (*(v248 - 1))
                    {
                      uint64_t v243 = 97;
                      goto LABEL_494;
                    }
                  }
                }

                goto LABEL_372;
              case 'e':
                if (v103 != 101 || v69 != 114) {
                  goto LABEL_368;
                }
                if (v68[2] != 122) {
                  goto LABEL_549;
                }
                if (v68[3] != 105) {
                  goto LABEL_549;
                }
                uint64_t v115 = v68[4];
                if (!v115) {
                  goto LABEL_549;
                }
                uint64_t v322 = v68 + 1;
                uint64_t v116 = v68 + 5;
                while (1)
                {
                  uint64_t v117 = v115 - 97LL;
                  if (!(v117 == 24 ? sub_181367B70(v116) : 1 - byte_1813CB454[v117])) {
                    break;
                  }
                  uint64_t v119 = *v116++;
                  uint64_t v115 = v119;
                  if (!v119) {
                    goto LABEL_549;
                  }
                }

                uint64_t v244 = v116 - 1;
                if (!*(v244 - 1)) {
                  goto LABEL_549;
                }
                *((_WORD *)v68 + 1) = 27002;
LABEL_496:
                uint64_t v68 = v322;
                *uint64_t v322 = 101;
LABEL_497:
                uint64_t v250 = v68 + 5;
                uint64_t v251 = v68[1];
                if (v251 == 118)
                {
                  if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97)
                  {
                    uint64_t v257 = *v250;
                    if (*v250)
                    {
                      uint64_t v258 = v68 + 6;
                      while (1)
                      {
                        uint64_t v259 = v257 - 97LL;
                        if (!(v259 == 24 ? sub_181367B70(v258) : 1 - byte_1813CB454[v259])) {
                          break;
                        }
                        uint64_t v261 = *v258++;
                        uint64_t v257 = v261;
                        if (!v261) {
                          goto LABEL_549;
                        }
                      }

                      uint64_t v304 = v258 - 1;
                      if (*(v304 - 1)) {
                        v68 += 5;
                      }
                    }

                    goto LABEL_549;
                  }
                }

                else if (v251 == 116 && v68[2] == 97 && v68[3] == 99 && v68[4] == 105)
                {
                  v324 = (unsigned __int8 *)(v68 + 3);
                  uint64_t v252 = *v250;
                  if (!*v250) {
                    goto LABEL_549;
                  }
                  uint64_t v253 = v68 + 6;
                  while (1)
                  {
                    uint64_t v254 = v252 - 97LL;
                    if (!(v254 == 24 ? sub_181367B70(v253) : 1 - byte_1813CB454[v254])) {
                      break;
                    }
                    uint64_t v256 = *v253++;
                    uint64_t v252 = v256;
                    if (!v256) {
                      goto LABEL_549;
                    }
                  }

                  uint64_t v302 = v253 - 1;
                  if (!*(v302 - 1)) {
                    goto LABEL_549;
                  }
                  int v301 = 26979;
LABEL_654:
                  *(_WORD *)(v68 + 3) = v301;
                  uint64_t v68 = (char *)v324;
                  goto LABEL_549;
                }

                if (v68[1] != 122) {
                  goto LABEL_549;
                }
                if (v68[2] != 105) {
                  goto LABEL_549;
                }
                if (v68[3] != 108) {
                  goto LABEL_549;
                }
                if (v68[4] != 97) {
                  goto LABEL_549;
                }
                uint64_t v262 = *v250;
                if (!*v250) {
                  goto LABEL_549;
                }
                v324 = (unsigned __int8 *)(v68 + 3);
                uint64_t v263 = v68 + 6;
                while (1)
                {
                  uint64_t v264 = v262 - 97LL;
                  if (!(v264 == 24 ? sub_181367B70(v263) : 1 - byte_1813CB454[v264])) {
                    break;
                  }
                  uint64_t v266 = *v263++;
                  uint64_t v262 = v266;
                  if (!v266) {
                    goto LABEL_549;
                  }
                }

                int v299 = v263 - 1;
                if (!*(v299 - 1)) {
                  goto LABEL_549;
                }
                int v301 = 24940;
                goto LABEL_654;
              case 'g':
                if (v103 != 103 || v69 != 105) {
                  goto LABEL_368;
                }
                if (v68[2] != 111) {
                  goto LABEL_372;
                }
                if (v68[3] != 108) {
                  goto LABEL_372;
                }
                uint64_t v120 = v68[4];
                if (!v120) {
                  goto LABEL_372;
                }
                uint64_t v121 = v68 + 5;
                while (1)
                {
                  uint64_t v122 = v120 - 97LL;
                  if (!(v122 == 24 ? sub_181367B70(v121) : 1 - byte_1813CB454[v122])) {
                    break;
                  }
                  uint64_t v124 = *v121++;
                  uint64_t v120 = v124;
                  if (!v124) {
                    goto LABEL_372;
                  }
                }

                int v246 = v121 - 1;
                if (!*(v246 - 1)) {
                  goto LABEL_372;
                }
                v68[3] = 108;
                *(_WORD *)++uint64_t v68 = 28519;
                goto LABEL_549;
              case 'l':
                uint64_t v320 = v68 + 3;
                if (v103 == 108 && v69 == 105)
                {
                  if (v68[2] == 98)
                  {
                    uint64_t v125 = *v320;
                    if (!*v320) {
                      goto LABEL_372;
                    }
                    uint64_t v126 = v68 + 4;
                    while (1)
                    {
                      uint64_t v127 = v125 - 97LL;
                      if (!(v127 == 24 ? sub_181367B70(v126) : 1 - byte_1813CB454[v127])) {
                        break;
                      }
                      uint64_t v129 = *v126++;
                      uint64_t v125 = v129;
                      if (!v129) {
                        goto LABEL_372;
                      }
                    }

                    uint64_t v232 = v126 - 1;
                    if (*(v232 - 1))
                    {
                      uint64_t v234 = 25196;
LABEL_495:
                      *(_WORD *)(v68 + 1) = v234;
                      uint64_t v322 = v68;
                      goto LABEL_496;
                    }

                    goto LABEL_372;
                  }
                }

                else
                {
                  if (v69 != 105) {
                    goto LABEL_368;
                  }
                  if (v103 != 108) {
                    goto LABEL_372;
                  }
                }

                uint64_t v155 = v68 + 4;
                uint64_t v322 = v68 + 2;
                if (v68[2] == 108 && *v320 == 97)
                {
                  uint64_t v156 = *v155;
                  if (!*v155) {
                    goto LABEL_372;
                  }
                  uint64_t v157 = v68 + 5;
                  while (1)
                  {
                    uint64_t v158 = v156 - 97LL;
                    if (!(v158 == 24 ? sub_181367B70(v157) : 1 - byte_1813CB454[v158])) {
                      break;
                    }
                    uint64_t v160 = *v157++;
                    uint64_t v156 = v160;
                    if (!v160) {
                      goto LABEL_372;
                    }
                  }

                  uint64_t v267 = v157 - 1;
                  if (*(v267 - 1))
                  {
                    *uint64_t v320 = 97;
                    goto LABEL_633;
                  }

                  goto LABEL_372;
                }

                if (v68[2] == 116 && *v320 == 110 && *v155 == 101)
                {
                  uint64_t v181 = v68[5];
                  if (!v181) {
                    goto LABEL_372;
                  }
                  uint64_t v182 = v68 + 6;
                  while (1)
                  {
                    uint64_t v183 = v181 - 97LL;
                    if (!(v183 == 24 ? sub_181367B70(v182) : 1 - byte_1813CB454[v183])) {
                      break;
                    }
                    uint64_t v185 = *v182++;
                    uint64_t v181 = v185;
                    if (!v185) {
                      goto LABEL_372;
                    }
                  }

                  uint64_t v295 = v182 - 1;
                  if (*(v295 - 1))
                  {
                    *uint64_t v155 = 101;
                    *uint64_t v320 = 110;
                    v68 += 2;
                    *uint64_t v322 = 116;
                    goto LABEL_549;
                  }

                  goto LABEL_372;
                }

                int v212 = v68[2];
                if (v212 != 115)
                {
                  if (v212 == 101)
                  {
                    uint64_t v213 = *v320;
                    if (*v320)
                    {
                      while (1)
                      {
                        uint64_t v214 = v213 - 97LL;
                        if (!(v214 == 24 ? sub_181367B70(v155) : 1 - byte_1813CB454[v214])) {
                          break;
                        }
                        uint64_t v216 = *v155++;
                        uint64_t v213 = v216;
                        if (!v216) {
                          goto LABEL_372;
                        }
                      }

                      uint64_t v269 = v155 - 1;
                      if (*(v269 - 1)) {
                        goto LABEL_496;
                      }
                    }
                  }

                  goto LABEL_372;
                }

                if (*v320 != 117) {
                  goto LABEL_372;
                }
                if (*v155 != 111) {
                  goto LABEL_372;
                }
                int v227 = v68[5];
                if (!v227) {
                  goto LABEL_372;
                }
                uint64_t v228 = v68 + 6;
                while (1)
                {
                  uint64_t v229 = v227 - 97LL;
                  if (!(v229 == 24 ? sub_181367B70(v228) : 1 - byte_1813CB454[v229])) {
                    break;
                  }
                  unsigned int v231 = *v228++;
                  int v227 = v231;
                  if (!v231) {
                    goto LABEL_372;
                  }
                }

                int v306 = v228 - 1;
                if (!*(v306 - 1)) {
                  goto LABEL_372;
                }
                goto LABEL_663;
              case 'o':
                if (v103 == 111 && v69 == 110)
                {
                  if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97 && v68[5] == 122 && v68[6] == 105)
                  {
                    uint64_t v322 = v68 + 4;
                    int v130 = v68[7];
                    if (!v130) {
                      goto LABEL_549;
                    }
                    uint64_t v131 = v68 + 8;
                    while (1)
                    {
                      uint64_t v132 = v130 - 97LL;
                      if (!(v132 == 24 ? sub_181367B70(v131) : 1 - byte_1813CB454[v132])) {
                        break;
                      }
                      uint64_t v134 = *v131++;
                      int v130 = v134;
                      if (!v134) {
                        goto LABEL_549;
                      }
                    }

                    uint64_t v310 = v131 - 1;
                    if (*(v310 - 1))
                    {
                      *(_WORD *)(v68 + 5) = 27002;
                      goto LABEL_496;
                    }

    int v3 = *v2++;
    uint64_t v1 = v3;
    if (!v3) {
      return 0LL;
    }
  }

  int v5 = v2 - 1;
  uint64_t v7 = *(v5 - 1);
  if (!v7) {
    return 0LL;
  }
  while (1)
  {
    unsigned int v9 = v7 - 97LL;
    if (v9 == 24) {
      break;
    }
    if (1 == byte_1813CB454[v9]) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    if (!v8) {
      return 1LL;
    }
  }

    *int v5 = v7;
  }

  return result;
}

    ++v7;
  }

  if (byte_1813C6343[v9] == byte_1813C6343[v10]) {
    goto LABEL_4;
  }
  unsigned int v11 = "hashsize";
  for (uint64_t j = a2; ; ++j)
  {
    unsigned int v13 = *j;
    int v14 = *(unsigned __int8 *)v11;
    if ((_DWORD)v13 == (_DWORD)v14)
    {
      if (*j) {
        goto LABEL_9;
      }
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) != 1) {
        goto LABEL_72;
      }
      if (!a3) {
        goto LABEL_71;
      }
      BOOL v36 = *((_WORD *)a3 + 10);
      if ((v36 & 0x24) != 0)
      {
        uint64_t v37 = (uint64_t)*a3;
      }

      else if ((v36 & 8) != 0)
      {
        uint64_t v57 = *(double *)a3;
        uint64_t v37 = (uint64_t)v57;
      }

      else
      {
        if ((v36 & 0x12) == 0 || !a3[1]) {
          goto LABEL_72;
        }
        LODWORD(v37) = sub_181303DF0((uint64_t)a3);
      }

      if ((int)v37 > 0)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 152) = v37;
        return result;
      }

      ++v2;
      uint64_t v1 = v28;
    }

    int v5 = &xmmword_18C465410;
LABEL_11:
    (*v5)(v4);
    goto LABEL_12;
  }

  if (!sqlite3_initialize())
  {
    unsigned int v9 = sub_18126F0AC(32LL);
    if (v9)
    {
      uint64_t v6 = (void *)v9;
      *(_OWORD *)unsigned int v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      uint64_t v10 = *(void *)(a1 + 152);
      *(void *)unsigned int v9 = *(void *)(a1 + 144);
      *(void *)(v9 + 24) = v10;
      *(void *)(a1 + 152) = v9;
LABEL_12:
      uint64_t result = 0LL;
      v6[1] = a2;
      void v6[2] = a3;
      return result;
    }
  }

  if (a3) {
    a3(a2);
  }
  return 7LL;
}

  if ((int)v2 >= 1)
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v10 = *(void *)(a1[4] + 8 * v8);
      unsigned int v11 = (v5 + 9);
      LODWORD(v12) = v6 ? v6 : 64;
      uint64_t v12 = (int)v12;
      do
      {
        unsigned int v13 = v12;
        v12 *= 2LL;
      }

      while (v13 < v11);
      if (!sqlite3_initialize())
      {
        int v14 = sub_18127D33C((uint64_t)v4, v13);
        if (v14) {
          break;
        }
      }

      uint64_t v7 = 7LL;
LABEL_8:
      if (++v8 == v2) {
        goto LABEL_23;
      }
    }

    uint64_t v4 = (char *)v14;
    uint64_t v6 = v13;
LABEL_19:
    unsigned int v15 = (int8x8_t *)&v4[v5];
    if (v10 <= 0x7F)
    {
      v15->i8[0] = v10;
      unsigned int v9 = 1;
    }

    else if (v10 >> 14)
    {
      unsigned int v9 = sub_181308E00(v15, v10);
    }

    else
    {
      v15->i8[0] = (v10 >> 7) | 0x80;
      v15->i8[1] = v10 & 0x7F;
      unsigned int v9 = 2;
    }

    v5 += v9;
    goto LABEL_8;
  }

  *a2 = v5;
  return result;
}

  unsigned int v9 = (sqlite3_blob **)(a1 + 112);
  uint64_t v10 = *(sqlite3_blob **)(a1 + 112);
  if (!v10) {
    goto LABEL_15;
  }
  *unsigned int v9 = 0LL;
  unsigned int v11 = sqlite3_blob_reopen(v10, a2);
  *unsigned int v9 = v10;
  if (!(_DWORD)v11)
  {
    unsigned int v24 = *(_DWORD *)(a1 + 32);
    goto LABEL_41;
  }

  uint64_t v12 = v11;
  if (!*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
  {
    *unsigned int v9 = 0LL;
    unsigned int v13 = (sqlite3_stmt *)*((void *)v10 + 3);
    int v14 = (void *)*((void *)v10 + 4);
    unsigned int v15 = v14[3];
    if (v15) {
      xmmword_18C465400(v15);
    }
    sub_1812F20DC(v14, v10);
    uint64_t v16 = v14[3];
    if (v16) {
      xmmword_18C465410(v16);
    }
    sqlite3_finalize(v13);
  }

  if ((_DWORD)v12 != 7)
  {
    uint64_t v10 = *v9;
    if (*v9) {
      goto LABEL_24;
    }
LABEL_15:
    uint64_t v17 = sqlite3_mprintf("%s_node", *(const char **)(a1 + 56));
    if (!v17) {
      return 7LL;
    }
    unsigned int v18 = v17;
    LODWORD(v12) = sqlite3_blob_open( *(sqlite3 **)(a1 + 24),  *(const char **)(a1 + 48),  v17,  "data",  a2,  0,  (sqlite3_blob **)(a1 + 112));
    uint64_t v19 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
      --qword_18C468B10;
      off_18C4653A8(v18);
      unsigned int v18 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_22:
        uint64_t v10 = *v9;
        if ((_DWORD)v12)
        {
          if (!v10)
          {
LABEL_31:
            uint64_t v8 = 0LL;
            if ((_DWORD)v12 == 1) {
              uint64_t v12 = 267LL;
            }
            else {
              uint64_t v12 = v12;
            }
            goto LABEL_53;
          }

      *(void *)(v1[34] + 8 * i) = 0LL;
      *(_DWORD *)(v1[35] + 4 * i) = 0;
    }
  }

  v6.n128_f64[0] = sub_1813C165C((uint64_t)(v1 + 1));
  uint64_t v7 = (void (**)(uint64_t *, __n128))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_16;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v7 = (void (**)(uint64_t *, __n128))&xmmword_18C465410;
LABEL_16:
    (*v7)(v1, v6);
  }

  return 0LL;
}

LABEL_99:
    if (*(int *)(a1 + 40) < 1)
    {
LABEL_109:
      *(_BYTE *)(a1 + 70) = 0;
      if (*(_BYTE *)(a1 + 64))
      {
        if (!*(_BYTE *)(a1 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  9LL);
        }
        *(_BYTE *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 124) = 0;
        *(_BYTE *)(a1 + 67) = 0;
      }

      if ((*(__int16 *)(a1 + 60) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(a1 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  *(unsigned __int16 *)(a1 + 60) + 3,  1LL,  5LL);
        }
        *(_WORD *)(a1 + 60) = -1;
      }

      *a2 = 1;
      return v7;
    }

    uint64_t v49 = 0LL;
    while (1)
    {
      uint64_t v50 = *(void *)(*(void *)(a1 + 48) + 8 * v49);
      if (v50)
      {
        uint64_t v51 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v50);
          --qword_18C468B10;
          off_18C4653A8(v50);
          uint64_t v50 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_102;
          }
          uint64_t v51 = &xmmword_18C465410;
        }

        (*v51)(v50);
      }

    uint64_t v71 = 23;
    uint64_t v72 = "not authorized";
LABEL_104:
    sub_1812DC47C((uint64_t)a1, v72, v68, v53, v29, v30, v31, v32, v94);
    *((_DWORD *)a1 + 6) = v71;
    return sub_18128FF4C((void *)v9, (void *)a2);
  }

LABEL_6:
  unsigned int v9 = *(_DWORD *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 144);
  if (v10)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 16);
    if (v11 < v9) {
      unsigned int v9 = v11;
    }
  }

  uint64_t v12 = v8 + 1;
  unsigned int v13 = v8[2];
  int v14 = v13 <= v9;
  if (v13 > v9) {
    unsigned int v13 = 0;
  }
  unsigned int v15 = v8[3];
  if (v13 <= v15 && v15 <= v9)
  {
    int v14 = 2;
    unsigned int v13 = v8[3];
  }

  unsigned int v18 = v8[4];
  if (v13 <= v18 && v18 <= v9)
  {
    int v14 = 3;
    unsigned int v13 = v8[4];
  }

  unsigned int v21 = v8[5];
  BOOL v23 = v13 > v21 || v21 > v9;
  if (v23) {
    unsigned int v24 = v14;
  }
  else {
    unsigned int v24 = 4;
  }
  if (v23) {
    unsigned int v25 = v13;
  }
  else {
    unsigned int v25 = v8[5];
  }
  if ((*(_BYTE *)(a1 + 66) & 2) != 0) {
    goto LABEL_179;
  }
  if (v25 < v9 || v24 == 0)
  {
    if (*(_BYTE *)(a1 + 63))
    {
      uint64_t v27 = 4LL;
LABEL_47:
      unsigned int v24 = 1;
LABEL_48:
      v12[v24] = v9;
      if (!*(_BYTE *)(a1 + 63)) {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  v27,  1LL,  9LL);
      }
      unsigned int v25 = v9;
      goto LABEL_180;
    }

    uint64_t v27 = 4LL;
    uint64_t v47 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  4LL,  1LL,  10LL);
    if ((_DWORD)v47 != 5)
    {
      uint64_t v7 = v47;
      if ((_DWORD)v47) {
        return v7;
      }
      goto LABEL_47;
    }

    if (*(_BYTE *)(a1 + 63))
    {
      uint64_t v27 = 5LL;
      unsigned int v24 = 2;
      goto LABEL_48;
    }

    uint64_t v27 = 5LL;
    uint64_t v52 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  5LL,  1LL,  10LL);
    if (!(_DWORD)v52)
    {
      unsigned int v24 = 2;
      goto LABEL_48;
    }

    uint64_t v7 = v52;
    if ((_DWORD)v52 != 5) {
      return v7;
    }
    if (*(_BYTE *)(a1 + 63))
    {
      uint64_t v27 = 6LL;
      unsigned int v24 = 3;
      goto LABEL_48;
    }

    uint64_t v27 = 6LL;
    uint64_t v69 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  6LL,  1LL,  10LL);
    if (!(_DWORD)v69)
    {
      unsigned int v24 = 3;
      goto LABEL_48;
    }

    uint64_t v7 = v69;
    if ((_DWORD)v69 != 5) {
      return v7;
    }
    if (*(_BYTE *)(a1 + 63))
    {
      uint64_t v27 = 7LL;
      unsigned int v24 = 4;
      goto LABEL_48;
    }

    uint64_t v27 = 7LL;
    uint64_t v77 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  7LL,  1LL,  10LL);
    if (!(_DWORD)v77)
    {
      unsigned int v24 = 4;
      goto LABEL_48;
    }

    uint64_t v7 = v77;
    if ((_DWORD)v77 != 5) {
      return v7;
    }
LABEL_179:
    if (!v24)
    {
      if ((_DWORD)v7 == 5) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1288LL;
      }
    }
  }

    a2 = v11;
    if (!v11) {
      return 0LL;
    }
  }

  uint64_t v6 = v4 + 1;
  uint64_t v7 = v4[1];
  if ((char)v4[1] < 0)
  {
    uint64_t v6 = v4 + 2;
    uint64_t v8 = v4[2] ^ (unint64_t)(v7 << 7);
    if ((char)v4[2] < 0)
    {
      uint64_t v6 = v4 + 3;
      unsigned int v9 = v4[3] ^ (v8 << 7);
      if ((char)v4[3] < 0)
      {
        uint64_t v6 = v4 + 4;
        uint64_t v7 = v4[4] ^ (v9 << 7) ^ 0x10204000;
        if ((char)v4[4] < 0)
        {
          uint64_t v6 = v4 + 5;
          uint64_t v7 = v4[5] ^ (unint64_t)(v7 << 7) ^ 0x4000;
          if ((char)v4[5] < 0)
          {
            uint64_t v6 = v4 + 6;
            uint64_t v7 = v4[6] ^ (unint64_t)(v7 << 7) ^ 0x4000;
            if ((char)v4[6] < 0)
            {
              uint64_t v6 = v4 + 7;
              uint64_t v7 = v4[7] ^ (unint64_t)(v7 << 7) ^ 0x4000;
              if ((char)v4[7] < 0)
              {
                uint64_t v6 = v4 + 8;
                uint64_t v7 = v4[8] ^ (unint64_t)(v7 << 7) ^ 0x4000;
                if ((char)v4[8] < 0)
                {
                  uint64_t v7 = (v4[9] | (unint64_t)(v7 << 8)) ^ 0x8000;
                  uint64_t v6 = v4 + 9;
                }
              }
            }
          }
        }
      }

      else
      {
        uint64_t v7 = v9 ^ 0x204000;
      }
    }

    else
    {
      uint64_t v7 = v8 ^ 0x4000;
    }
  }

  *(_DWORD *)(a3 + 16) = v3;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6 + 1;
  uint64_t v10 = v3 + (_WORD)v6 + 1 - (_WORD)a2;
  if ((v10 & 0xFFFC) == 0) {
    uint64_t v10 = 4;
  }
  *(_WORD *)(a3 + 22) = v10;
  *(_WORD *)(a3 + 20) = v3;
  return result;
}

        unsigned int v9 = v5 + v6 * 4;
        *(void *)(v9 + 8) = v8;
        *(void *)(v9 + 16) = *(void *)&a2[v6 + 4];
        v6 += 4LL;
      }
    }
  }

  return v5;
}

  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = v5 & 0xFFEF;
    *(_WORD *)(a1 + 52) = v5 & 0xFFEF;
    if ((v5 & 1) != 0)
    {
      v6 ^= 3u;
      *(_WORD *)(a1 + 52) = v6;
      uint64_t v7 = *(uint64_t **)(a1 + 24);
      uint64_t v8 = *v7;
      *(void *)(a1 + 64) = *v7;
      *(void *)(a1 + 72) = 0LL;
      if (v8)
      {
        *(void *)(v8 + 72) = a1;
      }

      else
      {
        v7[1] = a1;
        if (*((_BYTE *)v7 + 48)) {
          *((_BYTE *)v7 + 49) = 1;
        }
      }

      void *v7 = a1;
      if ((v5 & 8) == 0 && !v7[2]) {
        v7[2] = a1;
      }
    }
  }

  else
  {
    uint64_t v6 = *(_WORD *)(a1 + 52);
  }

  unsigned int v9 = *(_DWORD **)(v2 + 64);
  if (!v9) {
    goto LABEL_27;
  }
  uint64_t v10 = *(_DWORD *)(a1 + 48);
  unsigned int v11 = v10 - 1;
  if (v10 - 1 >= *v9)
  {
LABEL_20:
    if (v10 <= *(_DWORD *)(v2 + 36))
    {
      uint64_t v4 = sub_1812FF174(a1);
      if ((_DWORD)v4) {
        return v4;
      }
      uint64_t v6 = *(_WORD *)(a1 + 52);
    }

    else if (v3 != 4)
    {
      v6 |= 8u;
    }

    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v12 = v9[2];
    if (!v12) {
      break;
    }
    unsigned int v13 = v11 / v12;
    v11 %= v12;
    unsigned int v9 = *(_DWORD **)&v9[2 * v13 + 4];
    if (!v9) {
      goto LABEL_20;
    }
  }

  if (*v9 >= 0xF81u)
  {
    uint64_t v16 = v11 % 0x7C;
    uint64_t v17 = v9 + 4;
    unsigned int v18 = v17[v11 % 0x7C];
    if (v18)
    {
      uint64_t v19 = v11 + 1;
      while (v18 != v19)
      {
        if (v16 == 123) {
          uint64_t v16 = 0;
        }
        else {
          ++v16;
        }
        unsigned int v18 = v17[v16];
        if (!v18) {
          goto LABEL_20;
        }
      }

      goto LABEL_27;
    }

    goto LABEL_20;
  }

    ++v8;
  }

  if (*jj) {
    goto LABEL_6;
  }
LABEL_31:
  __int128 v31 = *(void *)(v7 + 32LL * v6 + 24);
  int v32 = (_DWORD *)(v31 + 8);
  int32x2_t v33 = *(void *)(v31 + 24);
  if (!v33)
  {
    uint64_t v38 = (uint64_t *)(v31 + 16);
    uint64_t v39 = *(_DWORD *)(v31 + 12);
    if (v39) {
      goto LABEL_57;
    }
LABEL_37:
    uint64_t v38 = &qword_18C550660;
    goto LABEL_38;
  }

  int v34 = *a2;
  if (*a2)
  {
    uint64_t v35 = 0;
    BOOL v36 = a2 + 1;
    do
    {
      uint64_t v35 = -1640531535 * (v35 + byte_1813C6343[v34]);
      uint64_t v37 = *v36++;
      int v34 = v37;
    }

    while (v37);
  }

  else
  {
    uint64_t v35 = 0;
  }

  uint64_t v49 = (_DWORD *)(v33 + 16LL * (v35 % *v32));
  uint64_t v38 = (uint64_t *)(v49 + 2);
  uint64_t v39 = *v49;
  if (!v39) {
    goto LABEL_37;
  }
LABEL_57:
  while (2)
  {
    uint64_t v38 = (uint64_t *)*v38;
    uint64_t v50 = (_BYTE *)v38[3];
    for (kint k = a2; ; ++kk)
    {
      uint64_t v52 = *v50;
      int v53 = *kk;
      if ((_DWORD)v52 != (_DWORD)v53) {
        break;
      }
      if (!*v50) {
        goto LABEL_38;
      }
LABEL_59:
      ++v50;
    }

    if (byte_1813C6343[v52] == byte_1813C6343[v53]) {
      goto LABEL_59;
    }
    if (--v39) {
      continue;
    }
    break;
  }

  uint64_t v38 = &qword_18C550660;
LABEL_38:
  unsigned int v24 = v38[2];
  if (v24) {
    return v24;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v40 = *a2;
  if (!*a2)
  {
    uint64_t v76 = 0;
    int v48 = "sqlite_";
    goto LABEL_139;
  }

  if ((v40 & 0xFFFFFFDF) != 0x53)
  {
    uint64_t v47 = &byte_1813C6343[v40];
    int v48 = "sqlite_";
LABEL_138:
    uint64_t v76 = *v47;
    goto LABEL_139;
  }

  uint64_t v41 = a2[1];
  if (!a2[1])
  {
    uint64_t v76 = 0;
    int v48 = "qlite_";
    goto LABEL_139;
  }

  if ((v41 & 0xFFFFFFDF) != 0x51)
  {
    uint64_t v47 = &byte_1813C6343[v41];
    int v48 = "qlite_";
    goto LABEL_138;
  }

  uint64_t v42 = a2[2];
  if (!a2[2])
  {
    uint64_t v76 = 0;
    int v48 = "lite_";
    goto LABEL_139;
  }

  if ((v42 & 0xFFFFFFDF) != 0x4C)
  {
    uint64_t v47 = &byte_1813C6343[v42];
    int v48 = "lite_";
    goto LABEL_138;
  }

  uint64_t v43 = a2[3];
  if (!a2[3])
  {
    uint64_t v76 = 0;
    int v48 = "ite_";
    goto LABEL_139;
  }

  if ((v43 & 0xFFFFFFDF) != 0x49)
  {
    uint64_t v47 = &byte_1813C6343[v43];
    int v48 = "ite_";
    goto LABEL_138;
  }

  uint64_t v44 = a2[4];
  if (!a2[4])
  {
    uint64_t v76 = 0;
    int v48 = "te_";
    goto LABEL_139;
  }

  if ((v44 & 0xFFFFFFDF) != 0x54)
  {
    uint64_t v47 = &byte_1813C6343[v44];
    int v48 = "te_";
    goto LABEL_138;
  }

  unsigned int v45 = a2[5];
  if (!a2[5])
  {
    uint64_t v76 = 0;
    int v48 = "e_";
    goto LABEL_139;
  }

  if ((v45 & 0xFFFFFFDF) != 0x45)
  {
    uint64_t v47 = &byte_1813C6343[v45];
    int v48 = "e_";
    goto LABEL_138;
  }

  unsigned int v46 = a2[6];
  if (!a2[6])
  {
    uint64_t v76 = 0;
    int v48 = "_";
LABEL_139:
    return 0LL;
  }

  if ((_DWORD)v46 != 95)
  {
    uint64_t v47 = &byte_1813C6343[v46];
    int v48 = "_";
    goto LABEL_138;
  }

      uint64_t v12 = *(void *)(v12 + 80);
    }

    while (v12);
  }

  if (v3[1] < 0)
  {
    if (v3[2] < 0)
    {
      if (v3[3] < 0)
      {
        if (v3[4] < 0)
        {
          if (v3[5] < 0)
          {
            if (v3[6] < 0)
            {
              if (v3[7] < 0)
              {
                uint64_t v6 = 9;
                if (v3[8] < 0) {
                  uint64_t v6 = 10;
                }
                int v5 = (_DWORD)v3 + v6;
              }

              else
              {
                int v5 = (_DWORD)v3 + 8;
              }
            }

            else
            {
              int v5 = (_DWORD)v3 + 7;
            }
          }

          else
          {
            int v5 = (_DWORD)v3 + 6;
          }
        }

        else
        {
          int v5 = (_DWORD)v3 + 5;
        }
      }

      else
      {
        int v5 = (_DWORD)v3 + 4;
      }
    }

    else
    {
      int v5 = (_DWORD)v3 + 3;
    }
  }

  else
  {
    int v5 = (_DWORD)v3 + 2;
  }

  uint64_t v7 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v7)
  {
    uint64_t v10 = v2 + v5 - (_DWORD)a2;
    if (v10 <= 4) {
      LOWORD(v10) = 4;
    }
    return (unsigned __int16)v10;
  }

  else
  {
    if (v8 > v7) {
      LOWORD(v8) = *(_WORD *)(a1 + 16);
    }
    return (unsigned __int16)(v8 + v5 - (_WORD)a2 + 4);
  }

  int v5 = v3 + 1;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v6)
  {
    unsigned int v9 = v2 + v5 - (_DWORD)a2;
    if (v9 <= 4) {
      LOWORD(v9) = 4;
    }
    return (unsigned __int16)v9;
  }

  else
  {
    if (v7 > v6) {
      LOWORD(v7) = *(_WORD *)(a1 + 16);
    }
    return (unsigned __int16)(v7 + v5 - (_WORD)a2 + 4);
  }

      if (++v11 == 7)
      {
        unsigned int v9 = v9 | 0x80;
        goto LABEL_19;
      }
    }

    unsigned int v18 = a1;
    uint64_t v19 = a2;
    int v20 = a3;
    unsigned int v21 = a4;
    sub_1812CF36C(35844);
    a4 = v21;
    a3 = v20;
    a2 = v19;
    a1 = v18;
LABEL_15:
    unsigned int v9 = v9 | byte_1813CA3CC[3 * v11 + 2];
    if (++v8 != 3) {
      continue;
    }
    break;
  }

    ;
  }

  if (*(_BYTE *)(*(void *)v9 + i)) {
    goto LABEL_6;
  }
  if (a2[2])
  {
    unsigned int v15 = "PARTITION clause";
LABEL_14:
    sub_1812DC47C((uint64_t)a1, "cannot override %s of window: %s", a3, a4, a5, a6, a7, a8, (char)v15);
    return;
  }

  if (*(void *)(v9 + 24) && a2[3])
  {
    unsigned int v15 = "ORDER BY clause";
    goto LABEL_14;
  }

  if (!*(_BYTE *)(v9 + 35))
  {
    unsigned int v15 = "frame specification";
    goto LABEL_14;
  }

  a2[2] = sub_18129CD4C(*a1, *(void **)(v9 + 16), 0);
  uint64_t v16 = *(void **)(v9 + 24);
  if (v16) {
    a2[3] = sub_18129CD4C((uint64_t)v11, v16, 0);
  }
  uint64_t v17 = (void *)a2[1];
  if (v17) {
    sub_1812F20DC(v11, v17);
  }
  a2[1] = 0LL;
}

  uint64_t result = sub_1812B9B68((uint64_t *)v14, 70LL, a2, a3, 0LL, a4, a5, a8);
  uint64_t v17 = *(_DWORD *)(v14 + 144);
  unsigned int v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v19 < 0 == v18) {
    *(_WORD *)(*(void *)(v14 + 136) + 40LL * v19 + 2) = v8;
  }
  return result;
}

  if ((*(_BYTE *)(a2 + 7) & 3) != 0) {
    return 0LL;
  }
  int v5 = *(void **)(v2 + 408);
  if (!v5) {
    return 0LL;
  }
  while (*v5 != a2 + 72)
  {
    int v5 = (void *)v5[3];
    if (!v5) {
      return 0LL;
    }
  }

  *int v5 = 0LL;
  return 0LL;
}

    ++v2;
    v8 += 28;
    if (v2 >= *(_DWORD *)(v3 + 20)) {
      goto LABEL_3;
    }
  }

  a1[1] = v3;
  *((_DWORD *)a1 + 8) = v2 + 1;
  return v8;
}

        *v8++ = v12;
LABEL_7:
        ++a3;
      }
    }

    *uint64_t v8 = 0;
    sqlite3_result_text64(a1, v7, v8 - v7, sqlite3_free, 1u);
  }

  uint64_t v7 = a3[1];
  if (v7)
  {
    uint64_t v8 = *(unsigned __int16 *)(v7 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
    {
      if ((v8 & 1) != 0) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = sub_181303998((int *)v7, 1);
      }
    }

    else
    {
      uint64_t v7 = *(void *)(v7 + 8);
    }
  }

  sqlite3_log(SLODWORD(v6), "%s", (const char *)v7);
}

  if (a1)
  {
    uint64_t v7 = v6 & ~(v6 >> 63);
    uint64_t v8 = *(void *)a1;
    if (v7 <= *(int *)(*(void *)(*(void *)a1 + 24LL) + 136LL))
    {
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
        sub_181303838(*(void *)a1);
      }
      *(_WORD *)(v8 + 20) = 1040;
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)uint64_t v8 = v7 & ~((int)v7 >> 31);
      *(_BYTE *)(v8 + 22) = 1;
      *(void *)(v8 + 8) = 0LL;
    }

    else
    {
      *(_DWORD *)(a1 + 36) = 18;
      sub_181269368(v8, "string or blob too big", -1LL, 1u, 0LL);
      *(_DWORD *)(a1 + 36) = 18;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) != 0) {
        sub_1812D7A8C(a1, "string or blob too big", -1, 1u, 0LL);
      }
    }
  }

  else
  {
    sub_1812CF36C(97601);
    sub_1812CF36C(97620);
  }

    ++v5;
    v6 += 12;
  }

  while (v3 != v5);
  if (v4 == 1)
  {
    a2[20] |= 1u;
    uint64_t v4 = 1;
  }

  uint64_t v16 = 1;
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v17 = *((void *)a2 + 4) + 8LL * v7;
    *(_DWORD *)uint64_t v17 = 1;
    *(_BYTE *)(v17 + 4) = 1;
    uint64_t v16 = 2;
  }

  if ((v10 & 0x80000000) == 0)
  {
    v4 |= 0x10000u;
    a2[10] = v4;
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v10) = v16++;
  }

  if ((v9 & 0x80000000) == 0)
  {
    v4 |= 0x20000u;
    a2[10] = v4;
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v9) = v16++;
  }

  if ((v8 & 0x80000000) == 0)
  {
    a2[10] = v4 | 0x40000;
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v8) = v16;
  }

  unsigned int v11 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_11:
    (*v11)(v9);
    goto LABEL_12;
  }

  uint64_t v12 = v10[366];
  if (v12) {
    xmmword_18C465400(v12);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
  --qword_18C468B10;
  off_18C4653A8(v9);
  unsigned int v9 = v10[366];
  if (v9)
  {
    unsigned int v11 = &xmmword_18C465410;
    goto LABEL_11;
  }

  sub_1813BB8F8(a1, *(void **)(a3 + 16), *(unsigned int *)(a3 + 8), &v37);
  return v37;
}

LABEL_180:
  int v78 = *(unsigned __int8 *)(a1 + 63);
  if (*(_BYTE *)(a1 + 63))
  {
LABEL_181:
    *(_DWORD *)(a1 + 120) = *v8 + 1;
    if (v78 != 2) {
      (*(void (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
    }
    if (v12[v24] == v25)
    {
      uint64_t v79 = **(uint64_t ***)(a1 + 48);
      uint64_t v80 = *v79;
      uint64_t v81 = v79[1];
      uint64_t v82 = v79[2];
      uint64_t v83 = v79[3];
      uint64_t v85 = v79[4];
      uint64_t v84 = v79[5];
      BOOL v86 = v80 == *(void *)(a1 + 72) && v81 == *(void *)(a1 + 80);
      BOOL v87 = v86 && v82 == *(void *)(a1 + 88);
      BOOL v88 = v87 && v83 == *(void *)(a1 + 96);
      BOOL v89 = v88 && v85 == *(void *)(a1 + 104);
      if (v89 && v84 == *(void *)(a1 + 112))
      {
        uint64_t v7 = 0LL;
        *(_WORD *)(a1 + 60) = v24;
        return v7;
      }
    }

    if (*(_BYTE *)(a1 + 63)) {
      return 0xFFFFFFFFLL;
    }
    int v53 = *(void (**)(void))(**(void **)(a1 + 8) + 112LL);
LABEL_210:
    v53();
    return 0xFFFFFFFFLL;
  }

  unsigned int v91 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  v24 + 3,  1LL,  6LL);
  if (!v91)
  {
    int v78 = *(unsigned __int8 *)(a1 + 63);
    goto LABEL_181;
  }

  if (v91 == 5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v91;
  }
}

          if (a4 && (_DWORD)v104 != *a4)
          {
            sub_1812DC47C(a1, "%d values for %d columns", v68, v69, v70, v71, v82, v75, v104);
            goto LABEL_41;
          }

          v315 = v82;
          int v306 = v98;
          if ((*(_BYTE *)(v12 + 52) & 1) == 0 || *(_BYTE *)(a1 + 30) || *(void *)(a1 + 176) || *(_BYTE *)(a1 + 219))
          {
            LODWORD(v150) = 0;
          }

          else
          {
            uint64_t v150 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v150;
            sub_1813103F4(v100, 71LL, 0LL, v150, v70, v71, v82, v75);
            uint64_t v100 = v323;
          }

          int v303 = v104;
          int v301 = v150;
          if (v324 == 2)
          {
            int v14 = 0LL;
          }

          else
          {
            uint64_t v151 = sub_1812A6CB0(a1, v23, 113LL, 0, 0xFFFFFFFFLL, 0LL, &v344[1], v344);
            uint64_t v152 = sub_1812F2264(v12, 4LL * (v151 + 2));
            int v14 = (void *)v152;
            if (!v152) {
              goto LABEL_42;
            }
            uint64_t v153 = *(_DWORD *)(a1 + 56);
            if (v151 < 1)
            {
              uint64_t v151 = 0;
              uint64_t v100 = v323;
            }

            else
            {
              uint64_t v154 = (uint64_t *)(v23 + 16);
              uint64_t v155 = v151;
              uint64_t v156 = (int *)v152;
              uint64_t v100 = v323;
              do
              {
                uint64_t v157 = *v154;
                uint64_t v158 = v153 + 1;
                *(_DWORD *)(a1 + 56) = v158;
                *v156++ = v158;
                uint64_t v153 = *(_DWORD *)(a1 + 56) + *(unsigned __int16 *)(v157 + 96);
                *(_DWORD *)(a1 + 56) = v153;
                uint64_t v154 = (uint64_t *)(v157 + 40);
                --v155;
              }

              while (v155);
            }

            uint64_t v170 = v153 + 1;
            *(_DWORD *)(a1 + 56) = v170;
            *(_DWORD *)(v152 + 4LL * v151) = v170;
          }

          if (v321)
          {
            uint64_t v171 = *(unsigned __int8 *)(v23 + 63);
            if (v171 == 2)
            {
              sub_1812DC47C(a1, "cannot UPSERT a view", v68, v69, v70, v71, v82, v75, v298);
            }

            else if (v171 == 1)
            {
              sub_1812DC47C( a1,  "UPSERT not implemented for virtual table %s",  v68,  v69,  v70,  v71,  v82,  v75,  *(void *)v23);
            }

            else if (!sub_181323AF4(a1, *v321, v68, v69, v70, v71, v82, v75))
            {
              uint64_t v172 = v344[0];
              uint64_t v326 = v344[1];
              *(_DWORD *)(a2 + 72) = v344[1];
              uint64_t v173 = v321;
              uint64_t v100 = v323;
              while (1)
              {
                v173[8] = (unsigned int *)a2;
                *((_DWORD *)v173 + 18) = v319;
                *((_DWORD *)v173 + 19) = v326;
                *((_DWORD *)v173 + 20) = v172;
                if (*v173)
                {
                  uint64_t v174 = sub_181344F00(a1, a2, (unsigned __int8 *)v173, v69, v70, v71, v82, v75);
                  uint64_t v100 = v323;
                  if (v174) {
                    break;
                  }
                }

                uint64_t v173 = (unsigned int **)v173[4];
                if (!v173) {
                  goto LABEL_222;
                }
              }
            }

            goto LABEL_42;
          }

uint64_t sub_18127C8C0(uint64_t a1, _DWORD *a2)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  if (*(int *)(a1 + 40) >= 1 && (uint64_t v78 = **(void **)(a1 + 48)) != 0)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v5 = sub_1812FC4E0(a1, 0LL, &v78);
    uint64_t v4 = v5;
    if ((_DWORD)v5)
    {
      if ((_DWORD)v5 != 1288) {
        return v4;
      }
      *(_BYTE *)(a1 + 70) = 1;
      *(_BYTE *)(a1 + 63) = 2;
      *a2 = 1;
    }

    if (!v78)
    {
      int v7 = 1;
      if (*(_BYTE *)(a1 + 70)) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }

  uint64_t v6 = sub_18127E31C(a1, a2);
  if (!(_DWORD)v6) {
    goto LABEL_45;
  }
  int v7 = v6;
  uint64_t v4 = v6;
  if ((_DWORD)v6 != 6922)
  {
    if (*(_BYTE *)(a1 + 70)) {
      goto LABEL_14;
    }
LABEL_13:
    if ((*(_BYTE *)(a1 + 66) & 2) == 0)
    {
LABEL_14:
      int v8 = *(unsigned __int8 *)(a1 + 64);
      if (!*(_BYTE *)(a1 + 64))
      {
        uint64_t v13 = *(void *)(a1 + 160);
        if (v13)
        {
          v84[0] = *(_DWORD *)(v13 + 772);
          if (v84[0])
          {
            uint64_t v14 = *(void *)(a1 + 8);
            if (*(void *)v14) {
              (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v14 + 80LL))(v14, 34LL, v84);
            }
          }
        }

        if (*(_BYTE *)(a1 + 63)) {
          uint64_t v4 = 0LL;
        }
        else {
          uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  10LL);
        }
        v84[0] = 0;
        uint64_t v15 = *(void *)(a1 + 8);
        if (*(void *)v15) {
          (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v15 + 80LL))(v15, 34LL, v84);
        }
        if ((_DWORD)v4) {
          goto LABEL_47;
        }
      }

      *(_BYTE *)(a1 + 64) = 1;
      if (*(int *)(a1 + 40) < 1 || (uint64_t v78 = **(void **)(a1 + 48)) == 0)
      {
        uint64_t v4 = sub_1812FC4E0(a1, 0LL, &v78);
        if ((_DWORD)v4) {
          goto LABEL_41;
        }
      }

      if (!sub_18127E31C(a1, a2))
      {
        uint64_t v4 = 0LL;
        int v7 = 0;
        goto LABEL_41;
      }

      int v82 = 0;
      uint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)v9) {
        (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v9 + 80LL))(v9, 34LL, &v82);
      }
      int v10 = *(unsigned __int8 *)(a1 + 65);
      uint64_t v11 = (v10 + 1);
      uint64_t v12 = (2 - v10);
      if (!*(_BYTE *)(a1 + 63))
      {
        uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  v11,  v12,  10LL);
        if ((_DWORD)v4) {
          goto LABEL_40;
        }
      }

      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), &v83);
      if ((_DWORD)v4) {
        goto LABEL_23;
      }
      if (v83 < 33) {
        goto LABEL_67;
      }
      uint64_t v4 = (*(uint64_t (**)(void, unsigned int *, uint64_t, void))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  v84,  32LL,  0LL);
      if ((_DWORD)v4) {
        goto LABEL_23;
      }
      if (((LOBYTE(v84[0]) << 24) | (BYTE1(v84[0]) << 16) | (BYTE2(v84[0]) << 8) | HIBYTE(v84[0]) & 0xFE) != 0x377F0682) {
        goto LABEL_67;
      }
      unsigned int v17 = (v85 << 24) | (v86 << 16);
      int v18 = v87;
      uint64_t v19 = v17 | v88 | (v87 << 8);
      if ((v19 & ((_DWORD)v19 - 1)) != 0
        || (v19 - 65537) < 0xFFFF01FF
        || (int v20 = HIBYTE(v84[0]) & 1,
            *(_BYTE *)(a1 + 85) = v20,
            *(_DWORD *)(a1 + 56) = v19,
            *(_DWORD *)(a1 + 136) = bswap32(v89),
            *(void *)(a1 + 104) = v90,
            sub_1812FBE28(v20 == 0, v84, 24, 0LL, (_DWORD *)(a1 + 96)),
            *(_DWORD *)(a1 + 96) != bswap32(v91))
        || *(_DWORD *)(a1 + 100) != bswap32(v92))
      {
LABEL_67:
        uint64_t v21 = 0LL;
        goto LABEL_68;
      }

      if (bswap32(v84[1]) != 3007000)
      {
        uint64_t v4 = sub_1812F2E28(73301);
        goto LABEL_23;
      }

      if (sqlite3_initialize()
        || (uint64_t v71 = (v19 + 24), (v73 = (unsigned int *)sub_18126F0AC(v71 + 0x8000)) == 0LL))
      {
        uint64_t v4 = 7LL;
        goto LABEL_23;
      }

      unsigned int v29 = 0;
      uint64_t v30 = 0LL;
      int v31 = v18 << 8;
      uint64_t v32 = (v19 + 24);
      uint64_t v69 = v73 + 6;
      int32x2_t v33 = (char *)v73 + v19 + 24;
      int v63 = v31 | HIWORD(v17);
      uint64_t v67 = (uint64_t)v73 + v19 + 24;
      unint64_t v68 = ((v83 - 32) / v71);
      unint64_t v65 = ((unint64_t)(((v83 - 32) / v71) + 4096) + 0xFFFFFFFF021LL) >> 12;
      unint64_t v66 = (unint64_t)v73 + v19 + 32792;
      uint64_t v62 = (uint64_t)v73 + v19 + 32;
      __int128 v76 = 0u;
      uint64_t v72 = v33;
      while (1)
      {
        unint64_t v34 = v29 + 4062LL;
        if (v34 >= v68) {
          unint64_t v34 = v68;
        }
        unint64_t v74 = v34;
        unint64_t v35 = ((_DWORD)v30 << 12) | 0xFDEu;
        if (v68 < v35) {
          unint64_t v35 = v68;
        }
        unint64_t v77 = v35;
        unsigned int v75 = v29;
        if (*(_DWORD *)(a1 + 40) > (int)v30
          && (uint64_t v36 = *(void *)(a1 + 48), v37 = *(void *)(v36 + 8LL * (int)v30), (v81 = v37) != 0))
        {
          uint64_t v4 = 0LL;
        }

        else
        {
          int v38 = v30;
          uint64_t v4 = sub_1812FC4E0(a1, v30, &v81);
          uint64_t v37 = v81;
          if (!v81) {
            goto LABEL_156;
          }
          uint64_t v36 = *(void *)(a1 + 48);
          LODWORD(v30) = v38;
          int32x2_t v33 = v72;
        }

        if ((_DWORD)v30) {
          unint64_t v39 = (((_DWORD)v30 << 12) - 33);
        }
        else {
          unint64_t v39 = 1LL;
        }
        *(void *)(v36 + 8LL * v30) = v33;
        if (v39 > v77)
        {
          BOOL v40 = 1;
          goto LABEL_117;
        }

        int v64 = v30;
        uint64_t v41 = (*(uint64_t (**)(void, unsigned int *, uint64_t, unint64_t))(**(void **)(a1 + 16)
                                                                                           + 16LL))( *(void *)(a1 + 16),  v73,  v32,  (v39 - 1) * v32 + 32);
        if ((_DWORD)v41) {
          break;
        }
        if (!sub_1812FC63C(a1, (unsigned int *)&v80, &v79, v69, (uint64_t)v73))
        {
          BOOL v40 = 0;
          uint64_t v4 = 0LL;
          goto LABEL_116;
        }

        BOOL v70 = 0;
        unint64_t v57 = v32 * (unint64_t)v39 + 32;
        while (1)
        {
          uint64_t v58 = sub_18127E598(a1, v39, v80);
          if ((_DWORD)v58)
          {
            uint64_t v4 = v58;
            goto LABEL_153;
          }

          int v59 = v79;
          __int128 v60 = v76;
          if (v79)
          {
            *(_DWORD *)(a1 + 88) = v39;
            *(_DWORD *)(a1 + 92) = v59;
            *(_WORD *)(a1 + 86) = v63;
            *(void *)&__int128 v60 = *(void *)(a1 + 96);
          }

          __int128 v76 = v60;
          BOOL v70 = v39 >= v77;
          if (v74 == v39) {
            break;
          }
          uint64_t v32 = v71;
          uint64_t v61 = (*(uint64_t (**)(void, unsigned int *, uint64_t, unint64_t))(**(void **)(a1 + 16)
                                                                                             + 16LL))( *(void *)(a1 + 16),  v73,  v71,  v57);
          if ((_DWORD)v61)
          {
            uint64_t v4 = v61;
            BOOL v40 = v39 >= v77;
            goto LABEL_116;
          }

          v57 += v71;
          ++v39;
          if (!sub_1812FC63C(a1, (unsigned int *)&v80, &v79, v69, (uint64_t)v73))
          {
            uint64_t v4 = 0LL;
LABEL_153:
            uint64_t v32 = v71;
            BOOL v40 = v70;
            goto LABEL_116;
          }
        }

        uint64_t v4 = 0LL;
        uint64_t v32 = v71;
        int32x2_t v33 = v72;
        unsigned int v29 = v75;
        LODWORD(v30) = v64;
        BOOL v40 = v39 >= v77;
LABEL_117:
        *(void *)(*(void *)(a1 + 48) + 8LL * v30) = v37;
        uint64_t v42 = 34LL;
        if ((_DWORD)v30) {
          uint64_t v42 = 0LL;
        }
        uint64_t v43 = 4 * v42;
        uint64_t v44 = (int32x2_t *)(v37 + 4 * v42);
        uint64_t v46 = 0x2000 - v42;
        uint64_t v47 = (0x2000 - v42) & 0x3FFC;
        v42 += v47;
        int v48 = v44 + 1;
        uint64_t v49 = (int32x2_t *)(v62 + v43);
        uint64_t v50 = v47;
        do
        {
          int32x2_t v52 = v49[-1];
          int32x2_t v51 = *v49;
          int8x8_t v53 = vmvn_s8((int8x8_t)vceq_s32(v48[-1], v52));
          if ((v53.i8[0] & 1) != 0) {
            v48[-1].i32[0] = v52.i32[0];
          }
          if ((v53.i8[4] & 1) != 0) {
            v48[-1].i32[1] = v52.i32[1];
          }
          int8x8_t v54 = vmvn_s8((int8x8_t)vceq_s32(*v48, v51));
          if ((v54.i8[0] & 1) != 0) {
            v48->i32[0] = v51.i32[0];
          }
          if ((v54.i8[4] & 1) != 0) {
            v48->i32[1] = v51.i32[1];
          }
          v48 += 2;
          v49 += 2;
          v50 -= 4LL;
        }

        while (v50);
        if (v46 != v47)
        {
LABEL_138:
          uint64_t v55 = 4 * v42;
          do
          {
            int v56 = *(_DWORD *)&v33[v55];
            if (*(_DWORD *)(v37 + v55) != v56) {
              *(_DWORD *)(v37 + v55) = v56;
            }
            v55 += 4LL;
          }

          while (v55 != 0x8000);
        }

        if (v40)
        {
          uint64_t v30 = (v30 + 1);
          v29 += 4096;
        }

LABEL_156:
        sqlite3_free(v73);
        uint64_t v21 = v76;
        if (!(_DWORD)v4)
        {
LABEL_68:
          *(void *)(a1 + 96) = v21;
          __n128 v22 = sub_18127E700(a1);
          BOOL v23 = **(_DWORD ***)(a1 + 48);
          v23[24] = 0;
          v23[32] = *(_DWORD *)(a1 + 88);
          v23[25] = 0;
          if (*(_BYTE *)(a1 + 63)) {
            goto LABEL_69;
          }
          uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  4LL,  1LL,  10LL,  v22);
          if ((_DWORD)v25 != 5)
          {
            uint64_t v4 = v25;
            if ((_DWORD)v25) {
              goto LABEL_23;
            }
LABEL_69:
            int v24 = *(_DWORD *)(a1 + 88);
            if (!v24) {
              int v24 = -1;
            }
            v23[26] = v24;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  4LL,  1LL,  9LL,  v22);
              goto LABEL_76;
            }

      ++v141;
      v142 += 120LL;
    }

    while (v141 < v140);
  }

  uint64_t v9 = v184;
  uint64_t v176 = v185;
LABEL_216:
  uint64_t v177 = *(void *)(v10 + 24);
  uint64_t v178 = ~*((_DWORD *)v8 + 13);
  if (*(_DWORD *)(v177 + 68) + *(_DWORD *)(v177 + 72) < 0) {
    sub_18131E420(v177, v10, v178);
  }
  else {
    *(_DWORD *)(*(void *)(v177 + 80) + 4LL * v178) = *(_DWORD *)(v10 + 144);
  }
  *((_WORD *)v9 + 108) = *((_DWORD *)v8 + 14);
  uint64_t result = sub_18128F8B0((void *)v182, v8);
  *((_BYTE *)v9 + 38) -= v176;
  return result;
}

LABEL_77:
            v23[27] = -1;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  5LL,  1LL,  9LL,  v22);
              goto LABEL_79;
            }

            goto LABEL_80;
          }

            ++v56;
          }

          if (byte_1813C6343[v58] == byte_1813C6343[v59]) {
            goto LABEL_77;
          }
          uint64_t v55 = *(void *)(v55 + 40);
          if (!v55)
          {
LABEL_254:
            sub_1812DC47C( (uint64_t)v2,  "no such index: %s",  (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  *((void *)v17 + 11));
            *((_BYTE *)v2 + 29) = 1;
            return 2LL;
          }
        }
      }

        uint64_t v72 = 0LL;
        unint64_t v65 = 5;
LABEL_135:
        uint64_t v159 = v72;
        if (v71) {
          sub_181309110((void *)v153, (unsigned __int8 *)v71);
        }
LABEL_137:
        int v64 = v164;
LABEL_138:
        if (v65 == 4) {
          uint64_t v109 = !v28;
        }
        else {
          uint64_t v109 = v28;
        }
        if (v109) {
          uint64_t v110 = 32LL;
        }
        else {
          uint64_t v110 = 36LL;
        }
        uint64_t v111 = v166;
        uint64_t v112 = *(_DWORD *)(v64 + 144);
        if (*(_DWORD *)(v64 + 148) <= v112)
        {
          sub_18131044C(v64, v110, v166, 0LL, 0LL, v61, v62, v63);
        }

        else
        {
          *(_DWORD *)(v64 + 144) = v112 + 1;
          uint64_t v113 = *(void *)(v64 + 136) + 40LL * v112;
          *(_BYTE *)uint64_t v113 = v110;
          *(_WORD *)(v113 + 2) = 0;
          *(_DWORD *)(v113 + 4) = v111;
          *(_BYTE *)(v113 + 1) = 0;
          *(_OWORD *)(v113 + 8) = 0u;
          *(_OWORD *)(v113 + 24) = 0u;
        }

        uint64_t v114 = *(_DWORD *)(v30 + 48);
        *(_DWORD *)(v30 + 48) = v114 | 0x800;
        if (!v10[20])
        {
          uint64_t v115 = *((_DWORD *)v12 + 17) - 1;
          *((_DWORD *)v12 + 17) = v115;
          v10[4] = v115;
        }

        uint64_t v162 = v65;
        uint64_t v116 = v10[20];
        uint64_t v117 = v116 + v50;
        v10[20] = v117;
        uint64_t v118 = (uint64_t ***)v11[1];
        uint64_t v119 = *v118;
        uint64_t v120 = (const void *)*((void *)v10 + 11);
        uint64_t v121 = 20 * v117;
        uint64_t v122 = (uint64_t *)sub_1812F2264(***v118, 20 * v117 + 16);
        if (v122)
        {
          uint64_t v158 = v10;
          *uint64_t v122 = (uint64_t)v119[11];
          v122[1] = v121;
          v119[11] = v122;
          uint64_t v126 = v122 + 2;
          if (v120) {
            memcpy(v122 + 2, v120, *((void *)v120 - 1));
          }
          *((void *)v158 + 11) = v126;
          uint64_t v127 = *(unsigned __int16 *)(v30 + 52);
          uint64_t v128 = v164;
          if ((int)v127 > (int)a4)
          {
            uint64_t v129 = 0LL;
            int v130 = 0;
            uint64_t v131 = (char *)v126 + 20 * (int)v116;
            uint64_t v132 = v156;
            if (v109) {
              uint64_t v133 = 38;
            }
            else {
              uint64_t v133 = 39;
            }
            uint64_t v155 = v133;
            uint64_t v134 = (int)a4;
            while (2)
            {
              if (v162 == 1)
              {
                uint64_t v135 = v166;
                int v136 = *(_DWORD *)(v128 + 144);
                if (*(_DWORD *)(v128 + 148) > v136)
                {
                  *(_DWORD *)(v128 + 144) = v136 + 1;
                  uint64_t v137 = *(void *)(v128 + 136) + 40LL * v136;
                  *(_DWORD *)uint64_t v137 = 135;
                  *(_DWORD *)(v137 + 4) = v135;
                  *(_DWORD *)(v137 + 8) = v132;
                  *(void *)(v137 + 12) = 0LL;
                  *(void *)(v137 + 28) = 0LL;
                  *(void *)(v137 + 20) = 0LL;
                  *(_DWORD *)(v137 + 36) = 0;
                  goto LABEL_175;
                }

                uint64_t v139 = v128;
                uint64_t v140 = 135LL;
                uint64_t v141 = v166;
                uint64_t v138 = v132;
                uint64_t v142 = 0LL;
LABEL_174:
                int v136 = sub_18131044C(v139, v140, v141, v138, v142, v123, v124, v125);
                uint64_t v128 = v164;
              }

              else
              {
                if (v159) {
                  uint64_t v138 = *((unsigned int *)v159 + v130++);
                }
                else {
                  uint64_t v138 = 0LL;
                }
                uint64_t v135 = v166;
                int v136 = *(_DWORD *)(v128 + 144);
                if (*(_DWORD *)(v128 + 148) <= v136)
                {
                  uint64_t v139 = v128;
                  uint64_t v140 = 94LL;
                  uint64_t v141 = v166;
                  uint64_t v142 = v132;
                  goto LABEL_174;
                }

                *(_DWORD *)(v128 + 144) = v136 + 1;
                __int16 v143 = *(void *)(v128 + 136) + 40LL * v136;
                *(_DWORD *)__int16 v143 = 94;
                *(_DWORD *)(v143 + 4) = v135;
                *(_DWORD *)(v143 + 8) = v138;
                *(_DWORD *)(v143 + 12) = v132;
                *(void *)(v143 + 24) = 0LL;
                *(void *)(v143 + 32) = 0LL;
                *(void *)(v143 + 16) = 0LL;
              }

    (*(void (**)(const char *, void))(a1 + 24))(");\n", *(void *)(a1 + 32));
    if (sqlite3_step(pStmt) == 100) {
      continue;
    }
    break;
  }

  int v3 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v3)(v2);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v2);
  int v2 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v3 = &xmmword_18C465410;
    return (*v3)(v2);
  }

  return result;
}

  if (*(void *)(a2 + 184)) {
    sub_1813016D8((uint64_t *)a1, a2);
  }
}

              if (v51[v60] == 32)
              {
                unint64_t v57 = v51[v60 + 7];
                if ((v57 | 0x20) == 0x20)
                {
                  uint64_t v58 = v60 + 1;
                  int v59 = &v51[v58];
LABEL_80:
                  if (v57) {
                    int v64 = 7LL;
                  }
                  else {
                    int v64 = 6LL;
                  }
                  if ((int)v58 + (int)v64 <= v53)
                  {
                    unint64_t v65 = v64 + v58;
                    unint64_t v66 = v54 - v65 + 1;
                    if (v66 < 8 || (unint64_t)-v64 < 0x20)
                    {
                      uint64_t v67 = v58;
                      goto LABEL_87;
                    }

                    if (v66 >= 0x20)
                    {
                      uint64_t v72 = v66 & 0xFFFFFFFFFFFFFFE0LL;
                      uint64_t v73 = &v51[v58 + 16];
                      unint64_t v74 = v66 & 0xFFFFFFFFFFFFFFE0LL;
                      do
                      {
                        unsigned int v75 = *(_OWORD *)&v73[v64];
                        *((_OWORD *)v73 - 1) = *(_OWORD *)&v73[v64 - 16];
                        *(_OWORD *)uint64_t v73 = v75;
                        v73 += 32;
                        v74 -= 32LL;
                      }

                      while (v74);
                      if (v66 != v72)
                      {
                        if ((v66 & 0x18) == 0)
                        {
                          v65 += v72;
                          uint64_t v67 = v72 + v58;
                          goto LABEL_87;
                        }

                        goto LABEL_100;
                      }
                    }

                    else
                    {
                      uint64_t v72 = 0LL;
LABEL_100:
                      uint64_t v67 = (v66 & 0xFFFFFFFFFFFFFFF8LL) + v58;
                      v65 += v66 & 0xFFFFFFFFFFFFFFF8LL;
                      __int128 v76 = v72 - (v66 & 0xFFFFFFFFFFFFFFF8LL);
                      unint64_t v77 = &v51[v72 + v58];
                      do
                      {
                        *(void *)unint64_t v77 = *(void *)&v77[v64];
                        v77 += 8;
                        v76 += 8LL;
                      }

                      while (v76);
                      if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8LL))
                      {
LABEL_87:
                        unint64_t v68 = &v51[v67];
                        uint64_t v69 = v67 + v64;
                        BOOL v70 = &v51[v65];
                        do
                        {
                          uint64_t v71 = *v70++;
                          *v68++ = v71;
                          ++v69;
                        }

                        while (v69 <= v54);
                      }
                    }
                  }

                  if ((_DWORD)v58 && !*v59) {
                    v51[(v58 - 1)] = 0;
                  }
                  int v48 = *(void *)(a2 + 8);
                  *(_WORD *)(v48 + 16 * v46 + 14) |= 2u;
                  *(_DWORD *)(a2 + 48) |= 2u;
                  LOWORD(v45) = *(_WORD *)(a2 + 54);
                  uint64_t v47 = 1024;
LABEL_39:
                  goto LABEL_40;
                }
              }

                unsigned __int8 v87 = (_BYTE *)(*(void *)v80 + v79);
                if (*v87 == 95)
                {
                  unsigned __int8 v88 = (*(uint64_t (**)(_BYTE *))(*(void *)v44 + 184LL))(v87 + 1);
                  int v79 = v46;
                  if (v88) {
                    *(_DWORD *)(v80 + 48) |= 0x1000u;
                  }
                }

                goto LABEL_59;
              }

              if (v81) {
                unsigned __int8 v86 = -1;
              }
              else {
                unsigned __int8 v86 = 0;
              }
              if (!v86) {
                goto LABEL_77;
              }
            }

      uint64_t v44 = 0LL;
      while (2)
      {
        unsigned int v45 = *(void *)((char *)v56 + v44);
        if (v45)
        {
          uint64_t v46 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_78;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v45);
          --qword_18C468B10;
          off_18C4653A8(v45);
          unsigned int v45 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v46 = &xmmword_18C465410;
LABEL_78:
            (*v46)(v45);
          }
        }

        v44 += 8LL;
        if (v44 == 128) {
          goto LABEL_67;
        }
        continue;
      }
    }

    unint64_t v39 = *((void *)v56 + v33);
    if (v39)
    {
      BOOL v40 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_58;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v39);
      --qword_18C468B10;
      off_18C4653A8(v39);
      unint64_t v39 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        BOOL v40 = &xmmword_18C465410;
LABEL_58:
        (*v40)(v39);
      }
    }

    uint64_t v41 = (void (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v34);
      --qword_18C468B10;
      off_18C4653A8(v34);
      unint64_t v34 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_65;
      }
      uint64_t v41 = (void (**)(char *))&xmmword_18C465410;
    }

    (*v41)(v34);
LABEL_65:
    *((void *)v56 + v33) = 0LL;
    unint64_t v34 = v60;
    LODWORD(v14) = v61[0];
    unint64_t v35 = v49;
    uint64_t v36 = a5;
LABEL_48:
    ++v33;
  }

  while (v33 != 16);
  *uint64_t v36 = v34;
  *unint64_t v35 = v14;
  uint64_t v14 = 0LL;
  uint64_t v6 = v48;
  int v8 = v51;
LABEL_67:
  sub_181362408(v8);
  if (v8)
  {
    uint64_t v42 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_73;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    int v8 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v42 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_73:
      (*v42)(v8);
    }
  }

  *(void *)(v6 + 32) = 0LL;
  return v14;
}

                  uint64_t v213 = v15;
LABEL_78:
                  uint64_t v58 = v215;
                  if (!(void)v215) {
                    goto LABEL_159;
                  }
LABEL_79:
                  int v59 = &off_18C4653A8;
                  unint64_t v34 = v208;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v58);
                    --qword_18C468B10;
                    off_18C4653A8(v58);
                    uint64_t v58 = xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70)
                    {
                      unint64_t v34 = v208;
                      goto LABEL_160;
                    }

                    int v59 = &xmmword_18C465410;
                    unint64_t v34 = v208;
                  }

                  (*v59)(v58);
                  goto LABEL_160;
                }

                unsigned int v94 = (void (**)(const char **))&xmmword_18C465410;
              }

              (*v94)(v93);
              goto LABEL_210;
            }

  BOOL v23 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v23)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    BOOL v23 = &xmmword_18C465410;
    return (*v23)(v1);
  }

  return result;
}

            uint64_t v50 = v64;
            *int v64 = 267;
            __int128 v60 = (uint64_t)v235;
          }

          else
          {
            BOOL v70 = 1;
            if (v69 > v67) {
              goto LABEL_77;
            }
LABEL_80:
            uint64_t v72 = 0;
            uint64_t v73 = 0;
            unint64_t v74 = v70 + v66;
            unsigned int v75 = v69;
            __int128 v76 = a5;
            while (1)
            {
              uint64_t v78 = (char *)(v65 + v69);
              int v79 = *v78;
              if (*v78 < 0)
              {
                int v82 = v78[1];
                if (v78[1] < 0)
                {
                  uint64_t v84 = v78[2];
                  if (v84 < 0)
                  {
                    uint64_t v83 = sub_18138BFCC(v78, v238);
                    __int128 v76 = a5;
                    int v79 = v238[0] & 0x7FFFFFFF;
                  }

                  else
                  {
                    int v79 = v84 & 0x7F | (v79 << 14) & 0x1FC07F | ((v82 & 0x7F) << 7);
                    uint64_t v83 = 3;
                  }
                }

                else
                {
                  int v79 = ((v79 & 0x7F) << 7) | v82;
                  uint64_t v83 = 2;
                }

                int v80 = v83 + v69;
                uint64_t v81 = v72 == v73;
                if (v72 < v73)
                {
LABEL_120:
                  int32x2_t v33 = v228;
                  if (!v225) {
                    goto LABEL_138;
                  }
                  goto LABEL_121;
                }
              }

              else
              {
                int v80 = v69 + 1;
                uint64_t v81 = v72 == v73;
                if (v72 < v73) {
                  goto LABEL_120;
                }
              }

              if (v81)
              {
                LODWORD(v86) = a6 - v72;
                if (v79 >= a6 - v72) {
                  unsigned __int8 v86 = v86;
                }
                else {
                  unsigned __int8 v86 = v79;
                }
                if ((_DWORD)v86)
                {
                  unsigned __int8 v87 = 0LL;
                  while (*(unsigned __int8 *)(v65 + v80 + v87) == v76[v72 + v87])
                  {
                    if (v86 == ++v87) {
                      goto LABEL_105;
                    }
                  }

                  LODWORD(v86) = v87;
                }

      uint64_t v49 = v41 + 136LL * v42;
      int32x2_t v51 = *(_DWORD *)(v49 + 224);
      uint64_t v50 = (int *)(v49 + 224);
      int32x2_t v52 = *(_DWORD *)(a1 + 60);
      if (!(v52 | v215))
      {
        sub_18139E03C((_DWORD *)a1, (uint64_t)&v220, v44, (unsigned __int8 *)v45);
        int32x2_t v52 = *(_DWORD *)(a1 + 60);
        uint64_t v215 = 1;
      }

      if (v52) {
        goto LABEL_109;
      }
      int8x8_t v53 = *(void *)(v41 + 136LL * *(unsigned __int16 *)(*(void *)(v41 + 88) + 4LL) + 216);
      int8x8_t v54 = DWORD2(v221);
      if (DWORD2(v222) + DWORD2(v221) >= *(_DWORD *)(*(void *)a1 + 136LL))
      {
        sub_18139FB7C(a1, (unsigned int *)&v220);
        int8x8_t v54 = DWORD2(v221);
      }

      uint64_t v55 = BYTE9(v224);
      if (BYTE9(v224))
      {
        *(_WORD *)uint64_t v221 = bswap32(v54) >> 16;
        sub_18139F890(a1, (unsigned int *)&v220, v53);
        uint64_t v55 = BYTE9(v224);
        int8x8_t v54 = DWORD2(v221);
      }

      if (BYTE8(v224) | v55) {
        int v56 = 0LL;
      }
      else {
        int v56 = v224;
      }
      unint64_t v57 = (v54 + 9);
      if (v57 <= HIDWORD(v221))
      {
        uint64_t v61 = v221;
LABEL_100:
        uint64_t v62 = v53 - v56;
        int v63 = (int8x8_t *)(v61 + v54);
        if (v53 - v56 > 0x7F)
        {
          uint64_t v4 = a4;
          if (v62 >> 14)
          {
            int v64 = sub_181308E00(v63, v62);
          }

          else
          {
            v63->i8[0] = (v62 >> 7) | 0x80;
            v63->i8[1] = v62 & 0x7F;
            int v64 = 2;
          }
        }

        else
        {
          v63->i8[0] = v62;
          int v64 = 1;
          uint64_t v4 = a4;
        }

        DWORD2(v221) += v64;
        goto LABEL_108;
      }

      if (HIDWORD(v221)) {
        LODWORD(v58) = HIDWORD(v221);
      }
      else {
        LODWORD(v58) = 64;
      }
      uint64_t v58 = (int)v58;
      do
      {
        int v59 = v58;
        v58 *= 2LL;
      }

      while (v59 < v57);
      __int128 v60 = v221;
      if (!sqlite3_initialize())
      {
        uint64_t v61 = sub_18127D33C(v60, v59);
        if (v61)
        {
          HIDWORD(v221) = v59;
          *(void *)&uint64_t v221 = v61;
          int8x8_t v54 = DWORD2(v221);
          goto LABEL_100;
        }
      }

      *(_DWORD *)(a1 + 60) = 7;
      uint64_t v4 = a4;
LABEL_108:
      *(void *)&char v224 = v53;
      WORD4(v224) = 0;
LABEL_109:
      if (v210 != 1)
      {
        BOOL v70 = *v50;
        uint64_t v71 = *(unsigned __int8 *)(v41 + 136LL * v42 + 228);
        uint64_t v72 = DWORD2(v221);
        uint64_t v73 = (DWORD2(v221) + 9);
        if (v73 > HIDWORD(v221))
        {
          if (HIDWORD(v221)) {
            LODWORD(v74) = HIDWORD(v221);
          }
          else {
            LODWORD(v74) = 64;
          }
          unint64_t v74 = (int)v74;
          do
          {
            unsigned int v75 = v74;
            v74 *= 2LL;
          }

          while (v75 < v73);
          __int128 v76 = v221;
          if (sqlite3_initialize() || (unint64_t v77 = sub_18127D33C(v76, v75)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            BOOL v40 = v218;
          }

          else
          {
            HIDWORD(v221) = v75;
            *(void *)&uint64_t v221 = v77;
            uint64_t v72 = DWORD2(v221);
LABEL_128:
            uint64_t v78 = v71 + 2 * v70;
            int v79 = (int8x8_t *)(v77 + v72);
            if (v78 > 0x7F)
            {
              BOOL v40 = v218;
              if (v78 >> 14)
              {
                int v80 = sub_181308E00(v79, v78);
              }

              else
              {
                v79->i8[0] = (v78 >> 7) | 0x80;
                v79->i8[1] = v78 & 0x7F;
                int v80 = 2;
              }
            }

            else
            {
              v79->i8[0] = v78;
              int v80 = 1;
              BOOL v40 = v218;
            }

            DWORD2(v221) += v80;
          }

          sub_181398CC8( a1,  (unsigned int **)(v43 + 96),  (uint64_t)&v220,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1813A21F8);
          goto LABEL_57;
        }

        unint64_t v77 = v221;
        goto LABEL_128;
      }

      if (!*(_BYTE *)(v41 + 136LL * v42 + 228))
      {
LABEL_56:
        BOOL v40 = v218;
        goto LABEL_57;
      }

      unint64_t v65 = DWORD2(v221);
      unint64_t v66 = (DWORD2(v221) + 9);
      if (v66 <= HIDWORD(v221))
      {
        uint64_t v81 = v221;
      }

      else
      {
        if (HIDWORD(v221)) {
          LODWORD(v67) = HIDWORD(v221);
        }
        else {
          LODWORD(v67) = 64;
        }
        uint64_t v67 = (int)v67;
        do
        {
          unint64_t v68 = v67;
          v67 *= 2LL;
        }

        while (v68 < v66);
        uint64_t v69 = v221;
        if (sqlite3_initialize() || (uint64_t v81 = sub_18127D33C(v69, v68)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          goto LABEL_132;
        }

        HIDWORD(v221) = v68;
        *(void *)&uint64_t v221 = v81;
        unint64_t v65 = DWORD2(v221);
      }

      *(_BYTE *)(v81 + v65) = 0;
      ++DWORD2(v221);
LABEL_132:
      if (*v50 < 1) {
        goto LABEL_56;
      }
      int v82 = DWORD2(v221);
      uint64_t v83 = (DWORD2(v221) + 9);
      BOOL v40 = v218;
      if (v83 <= HIDWORD(v221))
      {
        unsigned __int8 v87 = v221;
LABEL_144:
        *(_BYTE *)(v87 + v82) = 0;
        ++DWORD2(v221);
        goto LABEL_57;
      }

      if (HIDWORD(v221)) {
        LODWORD(v84) = HIDWORD(v221);
      }
      else {
        LODWORD(v84) = 64;
      }
      uint64_t v84 = (int)v84;
      do
      {
        unsigned __int8 v85 = v84;
        v84 *= 2LL;
      }

      while (v85 < v83);
      unsigned __int8 v86 = v221;
      if (!sqlite3_initialize())
      {
        unsigned __int8 v87 = sub_18127D33C(v86, v85);
        if (v87)
        {
          HIDWORD(v221) = v85;
          *(void *)&uint64_t v221 = v87;
          int v82 = DWORD2(v221);
          goto LABEL_144;
        }
      }

      *(_DWORD *)(a1 + 60) = 7;
LABEL_57:
      uint64_t v41 = v228;
      sub_1813903E0(a1, v228, 0, 0LL);
      if (*(_DWORD *)(a1 + 60)) {
        goto LABEL_13;
      }
    }
  }

  __s2 = 0LL;
LABEL_13:
  sub_18139FDBC(a1, (uint64_t)&v220, (_DWORD *)(v14 + 8));
  uint64_t v21 = v228;
  uint64_t v217 = v228;
  if (*(_DWORD *)(a1 + 60) || *(_BYTE *)(v228 + 20))
  {
    if (v208 < 1)
    {
LABEL_42:
      unint64_t v35 = v208;
      uint64_t v36 = v219[1] - v208;
      if (v36)
      {
        memmove(*((void **)v219 + 1), (const void *)(*((void *)v219 + 1) + 56LL * v208), 56 * v36);
        unint64_t v35 = v219[1];
      }

      uint64_t v37 = v212[6] - v208;
      v212[6] = v37;
      void *v219 = 0;
      v219[1] = v35 - v208;
      int v38 = v217;
      uint64_t v4 = a4;
      if (!*(_DWORD *)(v14 + 8))
      {
        --*(_DWORD *)(v197 + 4);
        v212[6] = v37 - 1;
      }

      goto LABEL_46;
    }

    __n128 v22 = 0LL;
    BOOL v23 = (uint64_t *)(a1 + 96);
    while (1)
    {
      uint64_t v25 = (int *)(*((void *)v219 + 1) + v22);
      *(void *)(v14 + 48) += *((void *)v25 + 6) - *((void *)v25 + 5);
      uint64_t v26 = *v25;
      sub_1813A23D8(a1, v26 << 37, ((unint64_t)(v26 + 1) << 37) - 1);
      uint64_t v27 = v25[8];
      if ((_DWORD)v27) {
        sub_1813A23D8( a1,  (unint64_t)(v26 + 0x10000) << 37,  v27 + ((unint64_t)(v26 + 0x10000) << 37) - 1);
      }
      if (*v23) {
        goto LABEL_34;
      }
      uint64_t v28 = (unsigned __int8 *)sqlite3_mprintf( "DELETE FROM '%q'.'%q_idx' WHERE segid=?",  *(void *)(*(void *)a1 + 8LL),  *(void *)(*(void *)a1 + 16LL));
      uint64_t v30 = v28;
      if (*(_DWORD *)(a1 + 60))
      {
        if (!v28) {
          goto LABEL_19;
        }
      }

      else
      {
        if (!v28)
        {
          int v24 = 7;
          goto LABEL_18;
        }

        *(_DWORD *)(a1 + 60) = sub_18126DFE0( **(void **)a1,  v28,  0xFFFFFFFFLL,  133LL,  0LL,  (void *)(a1 + 96),  0LL,  v29);
      }

      int v31 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v30);
        --qword_18C468B10;
        off_18C4653A8(v30);
        uint64_t v30 = (unsigned __int8 *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_34;
        }
        int v31 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
      }

      (*v31)(v30);
LABEL_34:
      if (*(_DWORD *)(a1 + 60)) {
        goto LABEL_19;
      }
      uint64_t v32 = (void *)*v23;
      if (!sub_1812B2390(*v23, 0))
      {
        int32x2_t v33 = v32[16];
        if ((*(_WORD *)(v33 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v33, v26);
        }

        else
        {
          *(void *)int32x2_t v33 = v26;
          *(_WORD *)(v33 + 20) = 4;
        }

        unint64_t v34 = *(void *)(*v32 + 24LL);
        if (v34) {
          xmmword_18C465410(v34);
        }
      }

      sqlite3_step((sqlite3_stmt *)*v23);
      int v24 = sqlite3_reset((sqlite3_stmt *)*v23);
LABEL_18:
      *(_DWORD *)(a1 + 60) = v24;
LABEL_19:
      v22 += 56LL;
    }
  }

  unsigned __int8 v88 = *(_DWORD *)(v228 + 64);
  unsigned int v89 = v219;
  uint64_t v90 = v208;
  if (v88 < 1) {
    goto LABEL_319;
  }
  v211 = 0;
  unsigned int v91 = 0LL;
  uint64_t v213 = 0LL;
  while (!*(_DWORD *)(a1 + 60))
  {
    unsigned int v92 = v21 + 136 * v91;
    uint64_t v95 = *(unsigned int **)(v92 + 96);
    unsigned int v94 = v92 + 96;
    uint64_t v93 = v95;
    if (v95)
    {
      if (*(void *)(v21 + 136 * v91 + 112))
      {
        uint64_t v96 = v21 + 136 * v91;
        uint64_t v98 = *(int *)(v96 + 160);
        uint64_t v97 = (_DWORD *)(v96 + 160);
        uint64_t v99 = (int)v97[1];
        uint64_t v216 = (unint64_t)*v93 << 37;
        uint64_t v100 = v216 + v98;
        uint64_t v101 = sub_18138BCF4(a1, v216 + v98);
        if (!v101)
        {
          uint64_t v21 = v217;
          unsigned int v89 = v219;
          goto LABEL_292;
        }

        uint64_t v102 = v101;
        uint64_t v103 = v101[2];
        if ((int)v103 < 4 || (uint64_t v104 = v101[3], v104 > (int)v103))
        {
          *(_DWORD *)(a1 + 60) = 267;
          uint64_t v105 = &off_18C4653A8;
          if (dword_18C465380)
          {
            uint64_t v106 = xmmword_18C468B70;
            uint64_t v21 = v217;
            unsigned int v89 = v219;
            if ((void)xmmword_18C468B70) {
              goto LABEL_168;
            }
            goto LABEL_169;
          }

          uint64_t v21 = v217;
          unsigned int v89 = v219;
LABEL_291:
          (*v105)(v102);
          goto LABEL_292;
        }

        if ((int)v99 > v104)
        {
          *(_DWORD *)(a1 + 60) = 267;
          uint64_t v21 = v217;
          unsigned int v89 = v219;
LABEL_288:
          uint64_t v105 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_291;
          }
          uint64_t v106 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70) {
LABEL_168:
          }
            xmmword_18C465400(v106);
LABEL_169:
          qword_18C468AC8[0] -= (int)off_18C4653B8(v102);
          --qword_18C468B10;
          off_18C4653A8(v102);
          uint64_t v102 = (_DWORD *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v105 = &xmmword_18C465410;
            goto LABEL_291;
          }

    uint64_t v46 = sub_1813ABAEC(v40);
    uint64_t v6 = v46;
    uint64_t v12 = *(_DWORD *)(v11 + 56);
    if (v12 == 2) {
      goto LABEL_25;
    }
    if ((_DWORD)v46) {
      return v6;
    }
    BOOL v40 = *(void *)(a1 + 32);
    uint64_t v47 = v40 + 136LL * *(unsigned __int16 *)(*(void *)(v40 + 88) + 4LL);
    int v48 = *(_DWORD *)(v47 + 208);
    uint64_t v49 = *(void *)(v47 + 200);
    uint64_t v50 = (v48 - 1);
    if (v49) {
      int32x2_t v51 = (const void *)(v49 + 1);
    }
    else {
      int32x2_t v51 = 0LL;
    }
  }

  while ((_DWORD)v50 == *(_DWORD *)(a1 + 104)
  uint64_t v6 = 0LL;
LABEL_25:
  if (!(_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 24) | v12) {
      return 0LL;
    }
    unint64_t v34 = *(_DWORD *)(a1 + 64);
    if (v34 < v10)
    {
      unint64_t v35 = (void *)(*(void *)(a1 + 80) + 8LL * v34);
      uint64_t v36 = v10 - (uint64_t)v34;
      while (!*v35++)
      {
        *(_DWORD *)(a1 + 64) = ++v34;
        if (!--v36)
        {
          unint64_t v34 = v10;
          break;
        }
      }
    }

    if (v34 == v10) {
      return 267LL;
    }
    else {
      return 0LL;
    }
  }

  return v6;
}

    *int8x8_t v54 = 0;
    sub_1813B6458(v142);
  }

LABEL_76:
          if (*(_BYTE *)(a1 + 63)) {
            goto LABEL_77;
          }
          uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  5LL,  1LL,  10LL);
          if ((_DWORD)v26 != 5)
          {
            uint64_t v4 = v26;
            if ((_DWORD)v26) {
              goto LABEL_23;
            }
            goto LABEL_77;
          }

  if (v17)
  {
    uint64_t v78 = *(_DWORD *)(v19 + 144);
    int v79 = __OFSUB__(v78, 1);
    int v80 = v78 - 1;
    if (v80 < 0 == v79) {
      *(_WORD *)(*(void *)(v19 + 136) + 40LL * v80 + 2) = 4;
    }
  }

  if ((a12 & 0x80000000) == 0 && a12 != (_DWORD)a4)
  {
    uint64_t v81 = *(_DWORD *)(v19 + 144);
    if (*(_DWORD *)(v19 + 148) <= v81)
    {
      sub_18131044C(v19, 130LL, a12, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v19 + 144) = v81 + 1;
      int v82 = *(void *)(v19 + 136) + 40LL * v81;
      *(_DWORD *)int v82 = 130;
      *(_DWORD *)(v82 + 4) = a12;
      *(_OWORD *)(v82 + 8) = 0u;
      *(_OWORD *)(v82 + 24) = 0u;
    }
  }

  uint64_t v83 = *(_DWORD *)(v19 + 144);
  int v79 = __OFSUB__(v83, 1);
  uint64_t v84 = v83 - 1;
  if (v84 < 0 == v79) {
    *(_WORD *)(*(void *)(v19 + 136) + 40LL * v84 + 2) = 2 * (v17 == 2);
  }
LABEL_86:
  if ((*(_BYTE *)(*(void *)a1 + 49LL) & 0x40) != 0)
  {
    unsigned __int8 v85 = *(void *)(a2 + 96);
    unsigned __int8 v86 = *(unsigned __int8 **)a2;
    unsigned __int8 v87 = *(void *)(v85 + 96);
    if (v87)
    {
      unsigned __int8 v88 = *v86;
      if (*v86)
      {
        unsigned int v89 = 0;
        uint64_t v90 = v86 + 1;
        do
        {
          unsigned int v89 = -1640531535 * (v89 + byte_1813C6343[v88]);
          unsigned int v91 = *v90++;
          unsigned __int8 v88 = v91;
        }

        while (v91);
      }

      else
      {
        unsigned int v89 = 0;
      }

      uint64_t v98 = (_DWORD *)(v87 + 16LL * (v89 % *(_DWORD *)(v85 + 80)));
      unsigned int v92 = (uint64_t *)(v98 + 2);
      uint64_t v93 = *v98;
      if (v93)
      {
        while (1)
        {
LABEL_112:
          unsigned int v92 = (uint64_t *)*v92;
          uint64_t v99 = (_BYTE *)v92[3];
          for (int k = *(unsigned __int8 **)a2; ; ++k)
          {
            uint64_t v101 = *v99;
            uint64_t v102 = *k;
            if ((_DWORD)v101 != (_DWORD)v102) {
              break;
            }
            if (!*v99) {
              goto LABEL_94;
            }
LABEL_114:
            ++v99;
          }

          if (byte_1813C6343[v101] == byte_1813C6343[v102]) {
            goto LABEL_114;
          }
          if (!--v93)
          {
            unsigned int v92 = &qword_18C550660;
            goto LABEL_94;
          }
        }
      }
    }

    else
    {
      unsigned int v92 = (uint64_t *)(v85 + 88);
      uint64_t v93 = *(_DWORD *)(v85 + 84);
      if (v93) {
        goto LABEL_112;
      }
    }

    unsigned int v92 = &qword_18C550660;
LABEL_94:
    for (uint64_t m = v92[2]; m; uint64_t m = *(void *)(m + 24))
    {
      uint64_t v97 = sub_181342228((uint64_t *)a1, a2, m, 0LL, a5, a6, a7, a8);
      if (v97) {
        sub_1812BED80(a1, v97, a2, v32, 2LL, 0LL, a7, a8);
      }
    }
  }

  if (v120 && v14)
  {
    do
    {
      if (*(unsigned __int8 *)(v14 + 16) == 128 && *(_BYTE *)(v14 + 17) == 2)
      {
        if (*(_BYTE *)(v14 + 18))
        {
          if (!*(void *)(a1 + 168)) {
            sub_1813402F0(a1, v14, a2, v32);
          }
        }

        else
        {
          sub_1812BED80(a1, (uint64_t *)v14, a2, v32, v18, v21, a7, a8);
        }
      }

      uint64_t v14 = *(void *)(v14 + 64);
    }

    while (v14);
  }

  uint64_t result = *(void *)(v19 + 24);
  uint64_t v96 = -v20;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
    return sub_18131E420(result, v19, v96);
  }
  *(_DWORD *)(*(void *)(result + 80) + 4LL * v96) = *(_DWORD *)(v19 + 144);
  return result;
}

    if ((_DWORD)v25 != 77)
    {
      uint64_t v12 = 2058LL;
      *(_DWORD *)(a1 + 32) = v25;
    }
  }

          uint64_t v6 = v48;
          goto LABEL_77;
        }

        if (!v23)
        {
          int v24 = (void (**)(char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_22;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
          --qword_18C468B10;
          off_18C4653A8(v20);
          int v20 = (char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70) {
            break;
          }
        }

      ++**(void **)(a1 + 80);
      goto LABEL_77;
    }

    if (v41)
    {
      if (v41 != 2) {
        goto LABEL_76;
      }
      while (!sub_181392B00(v42, v43, &v55, &v56))
      {
        if (v56 >= v10) {
          return 267LL;
        }
        ++*(void *)(*(void *)(a1 + 80) + 8 * v56);
      }
    }

    else if (!sub_181392B00(*(void *)(v40 + 8), *(_DWORD *)(v40 + 16), &v55, &v56))
    {
      int32x2_t v52 = -1;
      do
      {
        int8x8_t v54 = HIDWORD(v56);
        if (v52 == HIDWORD(v56))
        {
          int8x8_t v53 = v56 >> 32;
        }

        else
        {
          if (v10 <= SHIDWORD(v56)) {
            return 267LL;
          }
          int8x8_t v53 = v56 >> 32;
          ++*(void *)(*(void *)(a1 + 80) + 8 * (v56 >> 32));
          int32x2_t v52 = v54;
        }

        ++*(void *)(*(void *)(a1 + 72) + 8 * v53);
      }

      while (!sub_181392B00(v42, v43, &v55, &v56));
    }

LABEL_23:
        if (!*(_BYTE *)(a1 + 63)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  v11,  v12,  9LL);
        }
LABEL_40:
        int v7 = 1;
        *a2 = 1;
LABEL_41:
        if (!v8)
        {
          *(_BYTE *)(a1 + 64) = 0;
          if (!*(_BYTE *)(a1 + 63)) {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  9LL);
          }
        }

        if (!v7)
        {
LABEL_45:
          if (*(_DWORD *)(a1 + 72) != 3007000) {
            uint64_t v4 = sub_1812F2E28(74586);
          }
        }

        goto LABEL_47;
      }

      uint64_t v4 = v41;
      BOOL v40 = 0;
LABEL_116:
      unsigned int v29 = v75;
      LODWORD(v30) = v64;
      int32x2_t v33 = v72;
      goto LABEL_117;
    }

    if (!*(_BYTE *)(a1 + 63))
    {
      uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  6LL);
      if ((_DWORD)v4) {
        goto LABEL_47;
      }
      if (!*(_BYTE *)(a1 + 63))
      {
        (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  5LL);
        uint64_t v4 = 264LL;
        goto LABEL_47;
      }
    }

    uint64_t v4 = 264LL;
  }

    unsigned int v17 = *(void **)(a1 + 176);
    uint64_t v16 = (uint64_t *)(a1 + 176);
    uint64_t v15 = v17;
    if (v17)
    {
      *uint64_t v15 = a2;
      *(void *)(a2 + 8) = v15;
    }

    else
    {
      *uint64_t v13 = a2;
    }

    uint64_t v13 = v16;
    goto LABEL_30;
  }

  if (v10)
  {
    sub_18135E470((void *)a1, (uint64_t *)a2);
    uint64_t v13 = (uint64_t *)(a1 + 168);
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) < *(_DWORD *)(a1 + 124))
    {
      uint64_t v14 = *v13;
      if (!*v13) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }

    goto LABEL_23;
  }

  sub_18135E470((void *)a1, (uint64_t *)a2);
  uint64_t v11 = (uint64_t *)(a1 + 136);
  if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *(_DWORD *)(a1 + 124))
  {
    int v20 = *(void **)(a1 + 144);
    uint64_t v19 = (uint64_t *)(a1 + 144);
    int v18 = v20;
    if (v20)
    {
      *int v18 = a2;
      *(void *)(a2 + 8) = v18;
    }

    else
    {
      *uint64_t v11 = a2;
    }

    uint64_t v11 = v19;
  }

  else
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      *(void *)(v12 + 8) = a2;
      *(void *)a2 = v12;
    }

    else
    {
      *(void *)(a1 + 144) = a2;
    }
  }

  uint64_t result = 0LL;
  *uint64_t v11 = a2;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

  sub_181321444(a1, (uint64_t)v9, 0LL);
  if (*((_DWORD *)a1 + 12)) {
    goto LABEL_24;
  }
  unsigned int v29 = *((_DWORD *)v9 + 1);
  if ((v29 & 0x800000) != 0)
  {
    uint64_t v30 = *((void *)v9 + 5);
    if (sub_181325B9C(v30 + 8, (unsigned int *)v30))
    {
      int v31 = *(void *)(v30 + 32);
      if (!v31) {
        int v31 = **(void **)(v30 + 40);
      }
      sub_1812DC47C( (uint64_t)a1,  "target object/alias may not appear in FROM clause: %s",  v20,  v21,  v22,  v23,  v24,  v25,  v31);
      goto LABEL_24;
    }

    *((_DWORD *)v9 + 1) = v29 & 0xFF7FFFFF;
  }

  if (*v8 == 9) {
    sub_181325C9C(a1, (uint64_t)v9);
  }
  uint64_t v41 = *((void *)v9 + 14);
  v1142 = v12;
  if (v41)
  {
    if (!*((void *)v9 + 10))
    {
      uint64_t v42 = *((_DWORD *)v9 + 1);
      if ((v42 & 0x100000) == 0 && *((unsigned __int8 *)a1 + 302) <= 1u)
      {
        uint64_t v43 = (uint64_t)a1[2];
        if (!v43)
        {
          if (!a1[21] && ((*a1)[12] & 8) == 0) {
            *((_BYTE *)a1 + 35) = 1;
          }
          uint64_t v43 = sub_1812DC63C((uint64_t *)a1, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
          uint64_t v41 = *((void *)v9 + 14);
          uint64_t v42 = *((_DWORD *)v9 + 1);
        }

        uint64_t v44 = (uint64_t)*a1;
        v1146 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v9 + 5);
        v1152 = v11;
        v1116 = *((void *)v9 + 7);
        v1125 = *((void *)v9 + 6);
        v1108 = *((void *)v9 + 8);
        if (*a1)
        {
          unsigned int v45 = sub_1812F2264(v44, 0x68uLL);
          if (!v45)
          {
            uint64_t v46 = *(void *)(v44 + 344);
            if (v46)
            {
              *(_DWORD *)(v46 + 24) = 7;
              ++*(_DWORD *)(v46 + 48);
            }

            goto LABEL_861;
          }
        }

        else
        {
          unsigned int v45 = sub_18126F0AC(104LL);
          if (!v45) {
            goto LABEL_861;
          }
        }

        v1095 = v42;
        *(_OWORD *)unsigned int v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(void *)(v45 + 96) = 0LL;
        *(_OWORD *)(v45 + 64) = 0u;
        *(_OWORD *)(v45 + 80) = 0u;
        v1155 = a1;
        v1156 = sub_18132943C;
        v1157 = sub_181323260;
        memset(v1158, 0, 24);
        sub_181285228(&v1155, v9);
        uint64_t v47 = *((_DWORD *)v9 + 1);
        if ((v47 & 8) == 0)
        {
          v1156 = sub_1813291E4;
          v1157 = 0LL;
          sub_18131C674((uint64_t)&v1155, *((_DWORD **)v9 + 9));
          uint64_t v47 = *((_DWORD *)v9 + 1);
        }

        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 56) = 0u;
        *((_DWORD *)v9 + 1) = v47 & 0xFFEFFFF7 | 0x100000;
        int v48 = sub_18132922C((uint64_t *)a1, 0LL, *(int **)(v41 + 16), 1);
        v1132 = sub_18132922C((uint64_t *)a1, v48, *(int **)(v41 + 24), 1);
        if (v1132)
        {
          uint64_t v49 = (int *)*((void *)v9 + 9);
          if (v49)
          {
            uint64_t v50 = *v1132;
            if (*v49 <= *v1132)
            {
              int32x2_t v51 = v1132;
              *v1132 = *v49;
              if (!sub_18131BF58((unint64_t)v1132, (unint64_t)v49, 0xFFFFFFFFLL))
              {
                int32x2_t v52 = (void *)*((void *)v9 + 9);
                if (v52) {
                  sub_181311F48((void *)v44, v52);
                }
                *((void *)v9 + 9) = 0LL;
                int32x2_t v51 = v1132;
              }

              _BYTE *v51 = v50;
            }
          }
        }

        int8x8_t v53 = *((_DWORD *)a1 + 13);
        *(_DWORD *)(v41 + 88) = v53;
        *((_DWORD *)a1 + 13) = v53 + 4;
        int8x8_t v54 = (_DWORD *)*((void *)v9 + 4);
        v1167 = (uint64_t (*)(uint64_t))v45;
        v1168 = 0LL;
        v1164 = (void **)v41;
        v1165 = v1146;
        v1166 = 0LL;
        v1160 = (int *)a1;
        *(void *)&v1161 = sub_18132953C;
        *((void *)&v1161 + 1) = sub_181329778;
        v1162 = 0uLL;
        *(void *)&v1163 = &v1164;
        v1101 = (int **)(v9 + 40);
        if (v54)
        {
          uint64_t v55 = *v54;
          if ((int)*v54 >= 1)
          {
            for (uint64_t i = (uint64_t *)(v54 + 2); ; i += 3)
            {
              if (*i)
              {
                else {
                  unint64_t v57 = v55 <= 1;
                }
                if (v57)
                {
LABEL_83:
                  uint64_t v58 = (int *)v1166;
                  goto LABEL_85;
                }
              }

              else if (v55 < 2)
              {
                goto LABEL_83;
              }

              --v55;
            }
          }
        }

        uint64_t v58 = 0LL;
LABEL_85:
        int v59 = (_DWORD *)*((void *)v9 + 9);
        v1167 = (uint64_t (*)(uint64_t))v45;
        v1168 = 0LL;
        v1164 = (void **)v41;
        v1165 = v1146;
        v1166 = (uint64_t (*)(uint64_t))v58;
        v1160 = (int *)a1;
        *(void *)&v1161 = sub_18132953C;
        *((void *)&v1161 + 1) = sub_181329778;
        v1162 = 0uLL;
        *(void *)&v1163 = &v1164;
        if (!v59) {
          goto LABEL_97;
        }
        __int128 v60 = *v59;
        for (uint64_t j = (uint64_t *)(v59 + 2); ; j += 3)
        {
          if (*j)
          {
            else {
              uint64_t v62 = v60 <= 1;
            }
            if (v62)
            {
LABEL_96:
              uint64_t v58 = (int *)v1166;
LABEL_97:
              v1137 = v8;
              if (v58) {
                int v63 = *v58;
              }
              else {
                int v63 = 0;
              }
              *(_DWORD *)(v41 + 120) = v63;
              int v64 = sub_18132922C((uint64_t *)a1, v58, *(int **)(v41 + 16), 0);
              unint64_t v68 = sub_18132922C((uint64_t *)a1, v64, *(int **)(v41 + 24), 0);
              uint64_t v69 = v41;
LABEL_102:
              uint64_t v71 = *(int **)(*(void *)(v69 + 112) + 32LL);
              if ((*(_BYTE *)(*(void *)(v69 + 80) + 6LL) & 0x10) == 0)
              {
                if (v68) {
                  uint64_t v72 = *v68;
                }
                else {
                  uint64_t v72 = 0;
                }
                *(_DWORD *)(v69 + 124) = v72;
                unint64_t v68 = sub_18132922C((uint64_t *)a1, v68, v71, 0);
                goto LABEL_123;
              }

              v1162 = 0uLL;
              v1167 = (uint64_t (*)(uint64_t))v45;
              v1168 = 0LL;
              v1164 = (void **)v41;
              v1165 = v1146;
              v1166 = (uint64_t (*)(uint64_t))v68;
              v1160 = (int *)a1;
              *(void *)&v1161 = sub_18132953C;
              *((void *)&v1161 + 1) = sub_181329778;
              *(void *)&v1163 = &v1164;
              if (!v71) {
                goto LABEL_117;
              }
              uint64_t v73 = *v71;
              if (*v71 < 1) {
                goto LABEL_117;
              }
              for (int k = (uint64_t *)(v71 + 2); ; k += 3)
              {
                if (*k)
                {
                  else {
                    unsigned int v75 = v73 <= 1;
                  }
                  if (v75)
                  {
LABEL_116:
                    unint64_t v68 = (int *)v1166;
LABEL_117:
                    if (v68) {
                      __int128 v76 = *v68;
                    }
                    else {
                      __int128 v76 = 0;
                    }
                    *(_DWORD *)(v69 + 124) = v76;
                    *(_BYTE *)(v69 + 140) = 1;
LABEL_123:
                    unint64_t v77 = *(unsigned __int8 **)(v69 + 72);
                    if (v77)
                    {
                      uint64_t v78 = (unsigned __int8 *)sub_18129C928(v44, v77, 0LL, 0LL);
                      if (v68)
                      {
                        int v79 = *v68;
                        if (v68[1] > *v68)
                        {
                          *unint64_t v68 = v79 + 1;
                          int v80 = &v68[6 * v79];
                          *((void *)v80 + 2) = 0LL;
                          *((void *)v80 + 3) = 0LL;
                          *((void *)v80 + 1) = v78;
                          goto LABEL_130;
                        }

                        uint64_t v81 = sub_18133E1F4((uint64_t)*a1, v68, v78);
                      }

                      else
                      {
                        uint64_t v81 = (int *)sub_18133E190(*a1, v78);
                      }

                      unint64_t v68 = v81;
                    }

    int v24 = v18;
    return sub_1812FD54C(v24, a1);
  }

  if (v23 > *(_DWORD *)(*(void *)(a1 + 72) + 56LL))
  {
    int v18 = 78665LL;
    goto LABEL_23;
  }

    int v8 = (uint64_t (*)())sub_1812FCAFC;
LABEL_28:
    *(void *)(a1 + 288) = v8;
  }

  return result;
}

  uint64_t v13 = sub_1812A1948(v3);
  if (off_18C550650) {
    off_18C550650(v13);
  }
  uint64_t v14 = *(void *)(v3 + 80);
  if (*(void *)v14)
  {
    (*(void (**)(void))(*(void *)v14 + 8LL))(*(void *)(v3 + 80));
    *(void *)uint64_t v14 = 0LL;
  }

  uint64_t v15 = *(void *)(v3 + 72);
  if (*(void *)v15)
  {
    (*(void (**)(void))(*(void *)v15 + 8LL))(*(void *)(v3 + 72));
    *(void *)uint64_t v15 = 0LL;
  }

  sub_1812FC960(v4);
  ((void (*)(void))*(&xmmword_18C465478 + 1))(*(void *)(*(void *)(v3 + 336) + 72LL));
  uint64_t v16 = *(void (**)(void))(v3 + 312);
  if (v16) {
    v16(*(void *)(v3 + 320));
  }
  unsigned int v17 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v17)(v3);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v3);
  int v3 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v17 = &xmmword_18C465410;
    return (*v17)(v3);
  }

  return result;
}

  uint64_t v36 = a3;
  if (v130 < 1)
  {
    unsigned int v45 = 0LL;
    uint64_t v46 = v127;
    if (!v127) {
      goto LABEL_96;
    }
    goto LABEL_29;
  }

  uint64_t v126 = v18;
  uint64_t v37 = *((_DWORD *)a2 + 2);
  int v38 = *(void *)(a1 + 16);
  unint64_t v39 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v39;
  BOOL v40 = a2[5];
  if (v40) {
    uint64_t result = sub_18131B090(a1, *(_DWORD **)(a3 + 32), *v40, 0, *((_BYTE *)v40 + 4), v26, v27, v28);
  }
  uint64_t v41 = (v37 + v19);
  uint64_t v42 = (v126 - v37);
  uint64_t v43 = *(_DWORD *)(v38 + 144);
  if (*(_DWORD *)(v38 + 148) <= v43)
  {
    uint64_t result = sub_18131044C(v38, 97LL, v41, v42, v39, v26, v27, v28);
  }

  else
  {
    *(_DWORD *)(v38 + 144) = v43 + 1;
    uint64_t v44 = *(void *)(v38 + 136) + 40LL * v43;
    *(_DWORD *)uint64_t v44 = 97;
    *(_DWORD *)(v44 + 4) = v41;
    *(_DWORD *)(v44 + 8) = v42;
    *(_DWORD *)(v44 + 12) = v39;
    *(void *)(v44 + 24) = 0LL;
    *(void *)(v44 + 32) = 0LL;
    *(void *)(v44 + 16) = 0LL;
  }

  int32x2_t v51 = *(_DWORD *)(a1 + 56);
  int32x2_t v52 = (v51 + 1);
  int8x8_t v53 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(a1 + 56) = v53 + v51;
  if ((v15 & 1) != 0)
  {
    int8x8_t v54 = *((unsigned int *)a2 + 3);
    unint64_t v57 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v57)
    {
      *(_DWORD *)(v14 + 144) = v57 + 1;
      uint64_t v58 = *(void *)(v14 + 136) + 40LL * v57;
      *(_DWORD *)uint64_t v58 = 120;
      *(_DWORD *)(v58 + 4) = v54;
      *(_OWORD *)(v58 + 8) = 0u;
      *(_OWORD *)(v58 + 24) = 0u;
      uint64_t v55 = v57;
      goto LABEL_52;
    }

    unint64_t v66 = v14;
    uint64_t v67 = 120LL;
  }

  else
  {
    int8x8_t v54 = (v19 + v128);
    uint64_t v55 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v55)
    {
      *(_DWORD *)(v14 + 144) = v55 + 1;
      int v56 = *(void *)(v14 + 136) + 40LL * v55;
      *(_DWORD *)int v56 = 17;
      *(_DWORD *)(v56 + 4) = v54;
      *(_OWORD *)(v56 + 8) = 0u;
      *(_OWORD *)(v56 + 24) = 0u;
      goto LABEL_52;
    }

    unint64_t v66 = v14;
    uint64_t v67 = 17LL;
  }

  uint64_t result = sub_18131044C(v66, v67, v54, 0LL, 0LL, v26, v27, v28);
  uint64_t v55 = result;
LABEL_52:
  unint64_t v68 = *((unsigned int *)a2 + 2);
  uint64_t v69 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v69)
  {
    uint64_t result = sub_18131044C(v14, 90LL, v52, v19, v68, v26, v27, v28);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v69 + 1;
    BOOL v70 = *(void *)(v14 + 136) + 40LL * v69;
    *(_DWORD *)BOOL v70 = 90;
    *(_DWORD *)(v70 + 4) = v52;
    *(_DWORD *)(v70 + 8) = v19;
    *(_DWORD *)(v70 + 12) = v68;
    *(void *)(v70 + 24) = 0LL;
    *(void *)(v70 + 32) = 0LL;
    *(void *)(v70 + 16) = 0LL;
  }

  uint64_t v125 = v39;
  if (*(_BYTE *)(*(void *)v14 + 103LL)) {
    uint64_t v71 = &byte_18C550680;
  }
  else {
    uint64_t v71 = (char *)(*(void *)(v14 + 136) + 40LL * *((int *)a2 + 6));
  }
  if (!*(_BYTE *)(*(void *)a1 + 103LL))
  {
    uint64_t v123 = v55;
    *((_DWORD *)v71 + 2) = v126 - v53;
    uint64_t v72 = *((void *)v71 + 2);
    bzero(*(void **)(v72 + 24), *(unsigned __int16 *)(v72 + 6));
    uint64_t v124 = v52;
    if (*(_BYTE *)(*(void *)v14 + 103LL))
    {
      if (!*(void *)(*(void *)v14 + 816LL) && (*(_DWORD *)v72)-- == 1) {
        sub_1813014B0(*(void **)(v72 + 16), (void *)v72);
      }
    }

    else
    {
      unint64_t v74 = *(int *)(v14 + 144) - 1LL;
      unsigned int v75 = *(void *)(v14 + 136);
      __int128 v76 = v75 + 40 * v74;
      uint64_t v78 = *(unsigned __int8 *)(v76 + 1);
      unint64_t v77 = (_BYTE *)(v76 + 1);
      if (v78)
      {
        sub_181310724((uint64_t *)v14, v75 + 40 * v74, (char *)v72, 0xFFFFFFF8);
      }

      else
      {
        *(void *)(v75 + 40 * v74 + 16) = v72;
        *unint64_t v77 = -8;
      }
    }

    int v79 = *a2;
    int v80 = **a2;
    uint64_t v81 = sub_18131A140( *(void *)a1,  v80 - v130,  *(unsigned __int16 *)(v72 + 8) - *(unsigned __int16 *)(v72 + 6));
    unsigned __int8 v85 = v81;
    if (v80 > v130 && v81)
    {
      unsigned __int8 v86 = 0LL;
      unsigned __int8 v87 = (uint64_t)&v79[6 * v130 + 2];
      do
      {
        unsigned __int8 v88 = sub_181289D04(a1, *(unsigned __int8 **)v87, v82, v83, v84, v26, v27, v28);
        if (!v88) {
          unsigned __int8 v88 = *(void *)(*(void *)a1 + 16LL);
        }
        *(void *)(v85 + 32 + 8 * v86) = v88;
        *(_BYTE *)(*(void *)(v85 + 24) + v86++) = *(_BYTE *)(v87 + 16);
        v87 += 24LL;
      }

      while (v80 - v130 != (_DWORD)v86);
    }

    *((void *)v71 + 2) = v85;
    unsigned int v89 = *(_DWORD *)(v14 + 144);
    uint64_t v90 = (v89 + 1);
    if (*(_DWORD *)(v14 + 148) <= v89)
    {
      sub_18131044C(v14, 14LL, v90, 0LL, (v89 + 1), v26, v27, v28);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v90;
      unsigned int v91 = *(void *)(v14 + 136) + 40LL * v89;
      *(_DWORD *)unsigned int v91 = 14;
      *(void *)(v91 + 4) = v90;
      *(_DWORD *)(v91 + 12) = v90;
      *(void *)(v91 + 24) = 0LL;
      *(void *)(v91 + 32) = 0LL;
      *(void *)(v91 + 16) = 0LL;
    }

    unsigned int v45 = v125;
    int v18 = v126;
    uint64_t v46 = v127;
    unsigned int v92 = (*(_DWORD *)(a1 + 68) - 1);
    *(_DWORD *)(a1 + 68) = v92;
    uint64_t v93 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v93;
    *((_DWORD *)a2 + 4) = v93;
    *((_DWORD *)a2 + 5) = v92;
    unsigned int v94 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v94)
    {
      sub_18131044C(v14, 10LL, v93, v92, 0LL, v26, v27, v28);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v94 + 1;
      uint64_t v95 = *(void *)(v14 + 136) + 40LL * v94;
      *(_DWORD *)uint64_t v95 = 10;
      *(_DWORD *)(v95 + 4) = v93;
      *(_DWORD *)(v95 + 8) = v92;
      *(void *)(v95 + 12) = 0LL;
      *(void *)(v95 + 28) = 0LL;
      *(void *)(v95 + 20) = 0LL;
      *(_DWORD *)(v95 + 36) = 0;
    }

    uint64_t v96 = *((unsigned int *)a2 + 3);
    uint64_t v97 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v97)
    {
      sub_18131044C(v14, 146LL, v96, 0LL, 0LL, v26, v27, v28);
      if (!v127) {
        goto LABEL_86;
      }
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v97 + 1;
      uint64_t v98 = *(void *)(v14 + 136) + 40LL * v97;
      *(_DWORD *)uint64_t v98 = 146;
      *(_DWORD *)(v98 + 4) = v96;
      *(_OWORD *)(v98 + 8) = 0u;
      *(_OWORD *)(v98 + 24) = 0u;
      if (!v127)
      {
LABEL_86:
        if (*(_BYTE *)(*(void *)v14 + 103LL)) {
          uint64_t v102 = &byte_18C550680;
        }
        else {
          uint64_t v102 = (char *)(*(void *)(v14 + 136) + 40LL * v123);
        }
        *((_DWORD *)v102 + 2) = *(_DWORD *)(v14 + 144);
        uint64_t v103 = *((unsigned int *)a2 + 2);
        uint64_t result = *(void *)(a1 + 16);
        uint64_t v104 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v104)
        {
          uint64_t result = sub_18131044C(result, 79LL, v19, v124, v103, v26, v27, v28);
        }

        else
        {
          *(_DWORD *)(result + 144) = v104 + 1;
          uint64_t v105 = *(void *)(result + 136) + 40LL * v104;
          *(_DWORD *)uint64_t v105 = 79;
          *(_DWORD *)(v105 + 4) = v19;
          *(_DWORD *)(v105 + 8) = v124;
          *(_DWORD *)(v105 + 12) = v103;
          *(void *)(v105 + 24) = 0LL;
          *(void *)(v105 + 32) = 0LL;
          *(void *)(v105 + 16) = 0LL;
        }

        uint64_t v36 = a3;
        if (*(_BYTE *)(*(void *)v14 + 103LL)) {
          uint64_t v106 = &byte_18C550680;
        }
        else {
          uint64_t v106 = (char *)(*(void *)(v14 + 136) + 40LL * v89);
        }
        *((_DWORD *)v106 + 2) = *(_DWORD *)(v14 + 144);
        if (!v127)
        {
LABEL_96:
          uint64_t v62 = 0;
          if ((_DWORD)v45) {
            goto LABEL_102;
          }
LABEL_97:
          uint64_t v107 = v18;
          uint64_t v108 = *((_DWORD *)a2 + 2);
          uint64_t v109 = *(void *)(a1 + 16);
          unsigned int v45 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v45;
          uint64_t v110 = a2[5];
          if (v110) {
            uint64_t result = sub_18131B090(a1, *(_DWORD **)(v36 + 32), *v110, 0, *((_BYTE *)v110 + 4), v26, v27, v28);
          }
          uint64_t v111 = (v108 + v19);
          uint64_t v112 = (v107 - v108);
          int v18 = v107;
          uint64_t v113 = *(_DWORD *)(v109 + 144);
          if (*(_DWORD *)(v109 + 148) <= v113)
          {
            uint64_t result = sub_18131044C(v109, 97LL, v111, v112, v45, v26, v27, v28);
          }

          else
          {
            *(_DWORD *)(v109 + 144) = v113 + 1;
            uint64_t v114 = *(void *)(v109 + 136) + 40LL * v113;
            *(_DWORD *)uint64_t v114 = 97;
            *(_DWORD *)(v114 + 4) = v111;
            *(_DWORD *)(v114 + 8) = v112;
            *(_DWORD *)(v114 + 12) = v45;
            *(void *)(v114 + 24) = 0LL;
            *(void *)(v114 + 32) = 0LL;
            *(void *)(v114 + 16) = 0LL;
          }

            uint64_t v15 = 0LL;
            __n128 v22 = 0;
            goto LABEL_25;
          }

          break;
        }

        if (!v15(a5)) {
          goto LABEL_23;
        }
      }

      *(_BYTE *)(a1 + 64) = 1;
      __n128 v22 = a3;
    }

    else
    {
      __n128 v22 = 0;
    }

  if (!v6) {
    goto LABEL_26;
  }
LABEL_24:
  *(_BYTE *)uint64_t v6 = 0;
  int v18 = *(void *)(v6 + 112);
  if ((*(_WORD *)(v18 + 52) & 0x20) == 0)
  {
    sub_1812F9F44(v18);
LABEL_26:
    uint64_t v19 = v37;
    if (!v37) {
      return v16;
    }
LABEL_29:
    uint64_t v21 = *(void *)(v19 + 112);
    if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
    {
      __n128 v22 = *(void *)(v21 + 40);
      --*(_DWORD *)(v22 + 152);
      *(void *)(v21 + 32) = *(void *)(v22 + 168);
      *(void *)(v22 + 168) = v21;
      (*(void (**)(void, void, void))(**(void **)(v22 + 72) + 144LL))( *(void *)(v22 + 72),  *(void *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1),  *(void *)(v21 + 8));
    }

    else
    {
      sub_1812F9F44(v21);
    }

    return v16;
  }

  int v20 = *(void *)(v18 + 40);
  --*(_DWORD *)(v20 + 152);
  *(void *)(v18 + 32) = *(void *)(v20 + 168);
  *(void *)(v20 + 168) = v18;
  (*(void (**)(void, void, void))(**(void **)(v20 + 72) + 144LL))( *(void *)(v20 + 72),  *(void *)(v20 + 200) * (*(_DWORD *)(v18 + 48) - 1),  *(void *)(v18 + 8));
  uint64_t v19 = v37;
  if (v37) {
    goto LABEL_29;
  }
  return v16;
}

    unsigned int v17 = "unopened";
LABEL_53:
    sqlite3_log(21, "API call with %s database connection pointer", v17);
    uint64_t v14 = sub_1812CF36C(187669);
    goto LABEL_54;
  }

  uint64_t v25 = *(void *)(a1 + 24);
  if (v25) {
    xmmword_18C465400(v25);
  }
  uint64_t v26 = *(void (**)(void))(a1 + 328);
  if (v26) {
    v26(*(void *)(a1 + 320));
  }
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = sub_1812E6940;
  *(void *)(a1 + 320) = 0LL;
  uint64_t v27 = *(void *)(a1 + 24);
  if (v27) {
    xmmword_18C465410(v27);
  }
  uint64_t v14 = 0LL;
LABEL_54:
  _Block_object_dispose(&v36, 8);
  return v14;
}

        uint64_t result = 0LL;
        goto LABEL_24;
      }
    }

    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t result = 0LL;
    uint64_t v9 = 0LL;
  }

  if (v48) {
    sub_1812F1ABC(v48);
  }
  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA0B4((uint64_t)a1);
  }
  int v18 = *((void *)a1 + 3);
  if (v18) {
    xmmword_18C465410(v18);
  }
  if ((_DWORD)v16) {
    goto LABEL_43;
  }
  return v16;
}

    uint64_t v12 = 0;
    uint64_t v9 = 0LL;
    int v8 = 0;
    int v7 = 0;
    goto LABEL_28;
  }

  if (v14) {
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  uint64_t v9 = 0LL;
  int v8 = 0;
  uint64_t v6 = 0;
  int v2 = 0LL;
  int v7 = 1;
  while (1)
  {
LABEL_68:
    if ((_DWORD)v2) {
      goto LABEL_95;
    }
    if (*(_DWORD *)(a1 + 120)) {
      break;
    }
LABEL_77:
    if (*(void *)(v1 + 16))
    {
      int v2 = 0LL;
LABEL_85:
      if ((_DWORD)v2 || !v9)
      {
        if ((_DWORD)v2) {
          goto LABEL_95;
        }
        int32x2_t v51 = *(void *)(v1 + 16);
      }

      else
      {
        int v48 = strlen(v9) + 1;
        uint64_t v49 = (void *)sub_18126F0AC(v48);
        if (!v49)
        {
          *(void *)(v1 + 24) = 0LL;
          *(void *)(*(void *)(v1 + 16) + 56LL) = 0LL;
          int v2 = 7LL;
          goto LABEL_95;
        }

        uint64_t v50 = v49;
        memcpy(v49, v9, v48);
        *(void *)(v1 + 24) = v50;
        int32x2_t v51 = *(void *)(v1 + 16);
        *(void *)(v51 + 56) = v50;
      }

      *(_DWORD *)(v1 + 40) = 1;
      if (*(_UNKNOWN **)v51 == &unk_189B6CFC0)
      {
        int v2 = 0LL;
        *(void *)(*(void *)(v51 + 40) + 8LL) = *(void *)(v1 + 24);
        return v2;
      }

      return 0LL;
    }

    uint64_t v46 = v9;
    if (!v9) {
      uint64_t v46 = *(char **)(v1 + 24);
    }
    uint64_t v47 = sub_1812F5B20(v46, (uint64_t *)(v1 + 16), 1);
    int v2 = v47;
    if ((v6 & 1) == 0 || !(_DWORD)v47 || (_DWORD)v47 == 7) {
      goto LABEL_85;
    }
    uint64_t v12 = v8 != 0;
LABEL_28:
    int v2 = 5LL;
    if ((*(_BYTE *)(v4 + 120) & 2) != 0)
    {
      if (!*(void *)(v1 + 24))
      {
        uint64_t v16 = *(const char **)(v1 + 32);
        uint64_t v9 = v57;
        if (confstr(65537, v57, 0x400uLL))
        {
          unsigned int v17 = __strlcat_chk();
          if (v57[v17 - 1] != 47) {
            unsigned int v17 = __strlcat_chk();
          }
          int v18 = strlen(v16);
          uint64_t v19 = v18;
          if (v18 > 248 || ((unint64_t)(v18 + v17) << 32) - 0x3F900000001LL < 0xFFFFFBFFFFFFFFFFLL)
          {
            CC_SHA256_Init(&c);
            CC_SHA256_Update(&c, v16, v19);
            CC_SHA256_Final(md, &c);
            v22.i64[0] = 0x3030303030303030LL;
            v22.i64[1] = 0x3030303030303030LL;
            v23.i64[0] = 0x3030303030303030LL;
            v23.i64[1] = 0x3030303030303030LL;
            int v24 = (int8x16_t)vsraq_n_u8(v23, *(uint8x16_t *)md, 4uLL);
            v25.i64[0] = 0x3030303030303030LL;
            v25.i64[1] = 0x3030303030303030LL;
            uint64_t v26 = (int8x16_t)vsraq_n_u8(v25, v64, 4uLL);
            v27.i64[0] = 0x3939393939393939LL;
            v27.i64[1] = 0x3939393939393939LL;
            v28.i64[0] = 0x5757575757575757LL;
            v28.i64[1] = 0x5757575757575757LL;
            v29.i64[0] = 0x5757575757575757LL;
            v29.i64[1] = 0x5757575757575757LL;
            v30.i64[0] = 0x5757575757575757LL;
            v30.i64[1] = 0x5757575757575757LL;
            v67.val[0] = vbslq_s8( (int8x16_t)vcgtq_u8((uint8x16_t)v24, v27),  (int8x16_t)vsraq_n_u8(v29, *(uint8x16_t *)md, 4uLL),  v24);
            v24.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v24.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            int v31 = vandq_s8(*(int8x16_t *)md, v24);
            uint64_t v32 = vorrq_s8(v31, v22);
            v67.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v27), vaddq_s8(v31, v28), v32);
            v66.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v26, v27), (int8x16_t)vsraq_n_u8(v30, v64, 4uLL), v26);
            int32x2_t v33 = vandq_s8((int8x16_t)v64, v24);
            unint64_t v34 = vorrq_s8(v33, v22);
            v66.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v27), vaddq_s8(v33, v28), v34);
            unint64_t v35 = v53;
            vst2q_s8(v35, v67);
            v35 += 32;
            vst2q_s8(v35, v66);
            uint64_t v55 = 45;
            __strlcat_chk();
            strrchr(v16, 47);
            __strlcat_chk();
          }

          else
          {
            if (v18 >= 1)
            {
              int v20 = 0;
              while (1)
              {
                uint64_t v21 = v16[v20];
                if (v20 + 2 >= v18 || v21 != 46 || v16[v20 + 1] != 47) {
                  break;
                }
                if (v20)
                {
                  if (v16[v20 - 1] != 47) {
                    break;
                  }
                  ++v20;
                }

                else
                {
                  int v20 = 1;
                }

    int v8 = ((uint64_t (*)(void, uint64_t, uint64_t))*(&xmmword_18C465458 + 1))(*(void *)(v14 + 72), a2, 2LL);
    int v10 = (uint64_t *)v8;
    if (v8) {
      goto LABEL_3;
    }
    goto LABEL_24;
  }

  v15[1] |= 1u;
  uint64_t result = (unsigned int *)sub_18128CF10(v12, &v43, a3);
  uint64_t v26 = v32;
  if (!v32) {
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v27 = *(unsigned __int8 *)(v12 + 31);
  if (v27 <= 7)
  {
    *(_BYTE *)(v12 + 31) = v27 + 1;
    *(_DWORD *)(v12 + 4 * v27 + 224) = v26;
  }

      uint64_t v16 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 2LL * a4);
      if (v16 == 65534)
      {
        unsigned int v17 = "<expr>";
      }

      else if (v16 == 0xFFFF)
      {
        unsigned int v17 = "rowid";
      }

      else
      {
        unsigned int v17 = *(const char **)(*(void *)(*(void *)(a2 + 24) + 8LL) + 16LL * (__int16)v16);
      }

      sqlite3_str_appendall(a1, v17);
      if (a3 != 1)
      {
        uint64_t v19 = 2LL * a4 + 2;
        int v20 = a3 - 1LL;
        do
        {
          if (a1)
          {
            __n128 v22 = *((unsigned int *)a1 + 6);
            if ((v22 + 1) >= *((_DWORD *)a1 + 4))
            {
              sub_1812D3A10((uint64_t)a1, ",", 1u);
            }

            else
            {
              *((_DWORD *)a1 + 6) = v22 + 1;
              *(_BYTE *)(*((void *)a1 + 1) + v22) = 44;
            }
          }

          else
          {
            sub_1812CF36C(32733);
          }

          BOOL v23 = *(unsigned __int16 *)(*(void *)(a2 + 8) + v19);
          if (v23 == 65534)
          {
            uint64_t v21 = "<expr>";
          }

          else if (v23 == 0xFFFF)
          {
            uint64_t v21 = "rowid";
          }

          else
          {
            uint64_t v21 = *(const char **)(*(void *)(*(void *)(a2 + 24) + 8LL) + 16LL * (__int16)v23);
          }

          sqlite3_str_appendall(a1, v21);
          v19 += 2LL;
          --v20;
        }

        while (v20);
      }

      if (v13)
      {
        if (a1)
        {
          int v18 = *((unsigned int *)a1 + 6);
          if ((v18 + 1) >= *((_DWORD *)a1 + 4))
          {
            sub_1812D3A10((uint64_t)a1, ")", 1u);
          }

          else
          {
            *((_DWORD *)a1 + 6) = v18 + 1;
            *(_BYTE *)(*((void *)a1 + 1) + v18) = 41;
          }

          if (a6)
          {
            unsigned int v29 = *((unsigned int *)a1 + 6);
            if ((v29 + 1) >= *((_DWORD *)a1 + 4))
            {
              sub_1812D3A10((uint64_t)a1, a6, 1u);
            }

            else
            {
              *((_DWORD *)a1 + 6) = v29 + 1;
              *(_BYTE *)(*((void *)a1 + 1) + v29) = *a6;
            }
          }

          else
          {
            sub_1812CF36C(32737);
          }

          uint64_t v30 = *((unsigned int *)a1 + 6);
          if ((v30 + 1) >= *((_DWORD *)a1 + 4))
          {
            uint64_t v36 = 1;
            sub_1812D3A10((uint64_t)a1, "(", 1u);
          }

          else
          {
            *((_DWORD *)a1 + 6) = v30 + 1;
            *(_BYTE *)(*((void *)a1 + 1) + v30) = 40;
            uint64_t v36 = 1;
          }

          goto LABEL_62;
        }

        sub_1812CF36C(32733);
        sub_1812CF36C(32733);
        sub_1812CF36C(32733);
        uint64_t v36 = 1;
LABEL_49:
        int v24 = (_DWORD *)((char *)a1 + 24);
        uint64_t v25 = (_DWORD *)((char *)a1 + 16);
        uint64_t v26 = (void *)((char *)a1 + 8);
        sub_1812CF36C(32733);
        uint64_t v27 = 1;
        uint64_t v28 = a3 - 1;
        if (a3 == 1) {
          goto LABEL_66;
        }
        goto LABEL_74;
      }

      uint64_t v14 = 1;
      if (a1) {
        goto LABEL_15;
      }
LABEL_46:
      sub_1812CF36C(32733);
      if ((v14 & 1) == 0) {
        return;
      }
      uint64_t v36 = 0;
      goto LABEL_49;
    }

    goto LABEL_19;
  }

          ++v20;
        }

        if (byte_1813C6343[v22] == byte_1813C6343[v23]) {
          goto LABEL_23;
        }
        if (++v19 != v18) {
          continue;
        }
        break;
      }

      *(void *)&unsigned int v91 = 0LL;
      sub_18128FF4C((void *)v2, v23);
      if ((_DWORD)v16) {
        return v16;
      }
      goto LABEL_24;
    }

    if ((_DWORD)v48 == 1)
    {
      uint64_t v49 = 0LL;
    }

    else
    {
      uint64_t v49 = v48 & 0xFFFFFFFE;
      uint64_t v50 = (_WORD *)((char *)v47 + 49);
      int32x2_t v51 = v49;
      do
      {
        int32x2_t v52 = *v50 & 0xFFFC;
        *(v50 - 12) &= 0xFFFCu;
        *uint64_t v50 = v52;
        v50 += 24;
        v51 -= 2LL;
      }

      while (v51);
      if (v49 == v48)
      {
LABEL_60:
        BOOL v40 = *(_DWORD *)(a1 + 48) != 0;
        if (!*(void *)(v20 + 48)) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
    }

    int8x8_t v53 = v48 - v49;
    int8x8_t v54 = (_WORD *)((char *)&v47[6 * v49 + 6] + 1);
    do
    {
      *v54 &= 0xFFFCu;
      v54 += 12;
      --v53;
    }

    while (v53);
    goto LABEL_60;
  }

  return v16;
}

      if (v11 == *(_DWORD *)(a1 + 48) + 2) {
        int v10 = v5;
      }
      uint64_t v13 = 2;
      goto LABEL_26;
    }

    if (*v6 == 64)
    {
      uint64_t result = 0LL;
      a2[10] = 0;
      *((void *)a2 + 8) = 0x4A511B0EC57E649ALL;
      *((void *)a2 + 9) = 0x4000000000000LL;
      return result;
    }

        uint64_t v25 = *((void *)v56 + v19);
        if (!v25) {
          goto LABEL_30;
        }
        uint64_t v26 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_29;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v25);
        --qword_18C468B10;
        off_18C4653A8(v25);
        uint64_t v25 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v26 = &xmmword_18C465410;
LABEL_29:
          (*v26)(v25);
        }

  *a3 = v4;
  return ((_DWORD)v3 - (_DWORD)a1);
}

    LODWORD(v22) = v17;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_181398F94;
  }

  return (uint64_t)sub_181398CC8((uint64_t)a1, (unsigned int **)a2, (uint64_t)&v20, v16);
}

  int v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(*(void *)(v20 + 32) + 8LL * a2);
  if (*(_DWORD *)(*(void *)v21 + 4LL)
    || *(void *)(*(void *)v21 + 24LL) != *(void *)(*(void *)(v20 + 16) + 24LL))
  {
    __n128 v22 = 0;
    *a3 = 0LL;
  }

  else
  {
    *a3 = *(void *)(v21 + 8);
    __n128 v22 = *(_DWORD *)(v21 + 16);
  }

  *a4 = v22;
  return v10;
}

  if ((_DWORD)v7)
  {
    if (!v4) {
      return v7;
    }
  }

  else
  {
    unsigned int v17 = a1[1];
    sub_181389984((unsigned __int8 *)v17, 1LL, v4, v5);
    int v7 = *(unsigned int *)(v17 + 60);
    *(_DWORD *)(v17 + 60) = 0;
    if (!v4) {
      return v7;
    }
  }

  int v18 = (void (**)(char *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_35:
    (*v18)(v4);
    return v7;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v4);
  --qword_18C468B10;
  off_18C4653A8(v4);
  uint64_t v4 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v18 = (void (**)(char *))&xmmword_18C465410;
    goto LABEL_35;
  }

  return v7;
}

  if (!v11) {
    goto LABEL_4;
  }
  int v18 = *(unsigned __int8 *)v12;
  if (*v12)
  {
    uint64_t v19 = (_DWORD *)(v7 + 176);
    int v20 = (_BYTE *)(v7 + 165);
    while (1)
    {
LABEL_27:
      if (!v18) {
        goto LABEL_93;
      }
      if (v18 != 32 && v18 != 9) {
        break;
      }
      uint64_t v21 = *(unsigned __int8 *)++v12;
      int v18 = v21;
    }

    *(_BYTE *)(v7 + 160) = 1;
    switch(*v12)
    {
      case 'C':
        int v8 = 1LL;
        switch(v12[1])
        {
          case 'c':
            *(_BYTE *)(v7 + 161) = 1;
            goto LABEL_93;
          case 'd':
          case 'e':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'p':
          case 'q':
          case 'r':
            goto LABEL_5;
          case 'f':
            *(_BYTE *)(v7 + 162) = 1;
            goto LABEL_93;
          case 'n':
            *(_BYTE *)(v7 + 163) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 191) = 1;
            goto LABEL_93;
          case 's':
            *(_BYTE *)(v7 + 164) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42) {
              goto LABEL_5;
            }
            *(_BYTE *)(v7 + 191) = 1;
            *(_DWORD *)(v7 + 161) = 16843009;
            break;
        }

        goto LABEL_93;
      case 'L':
        int v8 = 1LL;
        switch(v12[1])
        {
          case 'C':
            *(_BYTE *)(v7 + 190) = 1;
            goto LABEL_93;
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'n':
          case 'p':
          case 'q':
          case 'r':
          case 's':
            goto LABEL_5;
          case 'l':
            *int v20 = 1;
            goto LABEL_93;
          case 'm':
            *(_BYTE *)(v7 + 166) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 167) = 1;
            goto LABEL_93;
          case 't':
            *(_BYTE *)(v7 + 168) = 1;
            goto LABEL_93;
          case 'u':
            *(_BYTE *)(v7 + 169) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42) {
              goto LABEL_5;
            }
            *(_BYTE *)(v7 + 190) = 1;
            *(_DWORD *)int v20 = 16843009;
            *(_BYTE *)(v7 + 169) = 1;
            break;
        }

        goto LABEL_93;
      case 'M':
        __n128 v22 = v12[1];
        int v8 = 1LL;
        if (v22 > 100)
        {
          if (v22 == 101)
          {
            *(_BYTE *)(v7 + 171) = 1;
            goto LABEL_93;
          }

          if (v22 == 110)
          {
            *(_BYTE *)(v7 + 172) = 1;
            goto LABEL_93;
          }
        }

        else
        {
          if (v22 == 42)
          {
            *(_WORD *)(v7 + 170) = 257;
            *(_BYTE *)(v7 + 172) = 1;
            goto LABEL_93;
          }

          if (v22 == 99)
          {
            *(_BYTE *)(v7 + 170) = 1;
            goto LABEL_93;
          }
        }

        goto LABEL_5;
      case 'N':
        BOOL v23 = v12[1];
        int v8 = 1LL;
        if (v23 > 107)
        {
          if (v23 == 108)
          {
            *(_BYTE *)(v7 + 174) = 1;
            goto LABEL_93;
          }

          if (v23 == 111)
          {
            *(_BYTE *)(v7 + 175) = 1;
            goto LABEL_93;
          }
        }

        else
        {
          if (v23 == 42)
          {
            *(_WORD *)(v7 + 173) = 257;
            *(_BYTE *)(v7 + 175) = 1;
            goto LABEL_93;
          }

          if (v23 == 100)
          {
            *(_BYTE *)(v7 + 173) = 1;
            goto LABEL_93;
          }
        }

        goto LABEL_5;
      case 'P':
        int v8 = 1LL;
        switch(v12[1])
        {
          case '*':
            *(_DWORD *)(v7 + 179) = 16843009;
            *uint64_t v19 = 16843009;
            goto LABEL_93;
          case 'c':
            *(_BYTE *)uint64_t v19 = 1;
            goto LABEL_93;
          case 'd':
            *(_BYTE *)(v7 + 177) = 1;
            goto LABEL_93;
          case 'e':
            *(_BYTE *)(v7 + 178) = 1;
            goto LABEL_93;
          case 'f':
            *(_BYTE *)(v7 + 179) = 1;
            goto LABEL_93;
          case 'i':
            *(_BYTE *)(v7 + 180) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 181) = 1;
            goto LABEL_93;
          case 's':
            *(_BYTE *)(v7 + 182) = 1;
            goto LABEL_93;
          default:
            goto LABEL_5;
        }

      case 'S':
        int v8 = 1LL;
        switch(v12[1])
        {
          case 'c':
            *(_BYTE *)(v7 + 183) = 1;
            goto LABEL_93;
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'l':
          case 'n':
            goto LABEL_5;
          case 'k':
            *(_BYTE *)(v7 + 184) = 1;
            goto LABEL_93;
          case 'm':
            *(_BYTE *)(v7 + 185) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 186) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42) {
              goto LABEL_5;
            }
            *(_DWORD *)(v7 + 183) = 16843009;
            break;
        }

        goto LABEL_93;
      case 'Z':
        int v24 = v12[1];
        int v8 = 1LL;
        if (v24 <= 111)
        {
          if (v24 != 42)
          {
            if (v24 == 108)
            {
              *(_BYTE *)(v7 + 187) = 1;
              goto LABEL_93;
            }

  uint64_t v21 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v21 + 20))
  {
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_25;
  }

  __n128 v22 = v21 + 136LL * *(unsigned __int16 *)(*(void *)(v21 + 88) + 4LL);
  BOOL v23 = *(_DWORD *)(v22 + 208);
  int v24 = *(void *)(v22 + 200);
  uint64_t v25 = (v23 - 1);
  if (v24) {
    uint64_t v26 = (const void *)(v24 + 1);
  }
  else {
    uint64_t v26 = 0LL;
  }
  uint64_t v27 = *(_DWORD *)(a1 + 48);
  if ((v27 & 0x80000000) == 0)
  {
    uint64_t v28 = (int)v25 >= v27 ? *(_DWORD *)(a1 + 48) : v23 - 1;
    unsigned int v29 = memcmp(*(const void **)(a1 + 56), v26, v28);
    if (v29 < 0 || (!v29 ? (uint64_t v30 = v27 < (int)v25) : (uint64_t v30 = 0), v30))
    {
      uint64_t v6 = 0LL;
LABEL_50:
      *(_DWORD *)(a1 + 24) = 1;
      return v6;
    }
  }

  *(_DWORD *)(a1 + 104) = 0;
  if (!(_DWORD)v25) {
    goto LABEL_61;
  }
  LODWORD(v31) = *(_DWORD *)(a1 + 108);
  if (v31 >= v25)
  {
    int v38 = 0LL;
    unint64_t v39 = *(void *)(a1 + 96);
LABEL_60:
    memcpy((void *)(v39 + v38), v26, v25);
    *(_DWORD *)(a1 + 104) += v25;
    goto LABEL_61;
  }

  if (!(_DWORD)v31) {
    LODWORD(v31) = 64;
  }
  int v31 = (int)v31;
  do
  {
    uint64_t v32 = v31;
    v31 *= 2LL;
  }

  while (v32 < v25);
  int32x2_t v33 = *(void *)(a1 + 96);
  if (!sqlite3_initialize())
  {
    unint64_t v39 = sub_18127D33C(v33, v32);
    if (v39)
    {
      *(_DWORD *)(a1 + 108) = v32;
      *(void *)(a1 + 96) = v39;
      int v38 = *(int *)(a1 + 104);
      goto LABEL_60;
    }
  }

  uint64_t v6 = 7LL;
LABEL_61:
  bzero(*(void **)(a1 + 72), 8LL * v10);
  bzero(*(void **)(a1 + 80), 8LL * v10);
  *(_DWORD *)(a1 + 64) = 0;
  if ((_DWORD)v6) {
    return v6;
  }
  BOOL v40 = *(void *)(a1 + 32);
  uint64_t v12 = *(_DWORD *)(v11 + 56);
  do
  {
    uint64_t v41 = *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 24LL) + 92LL);
    int v56 = 0LL;
    uint64_t v55 = 0;
    uint64_t v42 = *(void *)(v40 + 8);
    uint64_t v43 = *(_DWORD *)(v40 + 16);
    if (v12)
    {
      if (v12 != 1) {
        goto LABEL_77;
      }
      if (!v41 && !sub_181392B00(*(void *)(v40 + 8), *(_DWORD *)(v40 + 16), &v55, &v56))
      {
        uint64_t v44 = *(void **)(a1 + 72);
        unsigned int v45 = *v44 + 1LL;
        do
          *uint64_t v44 = v45++;
        while (!sub_181392B00(v42, v43, &v55, &v56));
      }

      uint64_t v11 = *(void *)a2;
      if ((*(_WORD *)(*(void *)a2 + 20LL) & 0x9000) != 0)
      {
        sub_1813040AC(v11, v9);
      }

      else
      {
        *(void *)uint64_t v11 = v9;
        *(_WORD *)(v11 + 20) = 4;
      }

      return 0LL;
    }

    if (v5 == 2)
    {
      int v7 = *(unsigned int *)(a1 + 112);
    }

    else
    {
      if (v5) {
        return 0LL;
      }
      int v7 = *(unsigned int *)(a1 + 116);
    }

    if ((v7 & 0x80000000) == 0 && *(_DWORD *)(v4 + 24) > (int)v7)
    {
      if (a2)
      {
        uint64_t v6 = *(void *)(v4 + 32);
        goto LABEL_38;
      }

      goto LABEL_39;
    }
  }

  else
  {
    if (!a2)
    {
LABEL_39:
      uint64_t v12 = 97498;
      goto LABEL_40;
    }

    sub_1812D7A8C( a2,  *(char **)(a1 + 96),  *(_DWORD *)(a1 + 104),  1u,  (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  return 0LL;
}

LABEL_47:
  if (*(_BYTE *)(a1 + 70))
  {
    if ((_DWORD)v4)
    {
      sub_1812FC394(a1, 0LL);
      *(_BYTE *)(a1 + 70) = 0;
      if ((_DWORD)v4 == 522) {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v4 = v4;
      }
    }

    *(_BYTE *)(a1 + 63) = 0;
  }

  return v4;
}

  unint64_t v39 = *(void *)(v15 + 40);
  if (sqlite3_initialize() || (BOOL v40 = sub_18127D33C(v39, (8 * v18) & ~((8 * v18) >> 31))) == 0)
  {
    unsigned int v17 = 3082;
    goto LABEL_53;
  }

  *(void *)(v15 + 40) = v40;
  uint64_t v41 = (int)v11 * a3;
  uint64_t v42 = a3;
  while ((*(_DWORD *)(v15 + 24) & 0x80000000) != 0)
  {
    if (sqlite3_initialize() || (uint64_t v49 = (void *)sub_18126F0AC(v41)) == 0LL)
    {
      unsigned int v17 = 7;
      goto LABEL_53;
    }

    int v48 = (uint64_t)v49;
    bzero(v49, v41);
LABEL_74:
    uint64_t v50 = *(unsigned __int16 *)(v15 + 32);
    if ((int)v11 >= 1)
    {
      int32x2_t v51 = 8 * v50;
      int32x2_t v52 = v11;
      do
      {
        *(void *)(*(void *)(v15 + 40) + v51) = v48;
        v51 += 8LL;
        v48 += v42;
        --v52;
      }

      while (v52);
    }

    unsigned int v17 = 0;
    uint64_t v46 = v50 + v11;
    *(_WORD *)(v15 + 32) = v46;
    if (v18 <= v46) {
      goto LABEL_53;
    }
  }

  if (*(_BYTE *)(v15 + 34)) {
    uint64_t v47 = 1LL;
  }
  else {
    uint64_t v47 = 3LL;
  }
  int v48 = off_18C54FED8(0LL, v41, v47, 1LL);
  if (v48 != -1) {
    goto LABEL_74;
  }
  int v64 = *(const char **)(v15 + 16);
  unint64_t v65 = *__error();
  uint64_t v104 = 0u;
  uint64_t v105 = 0u;
  uint64_t v102 = 0u;
  uint64_t v103 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v65, __strerrbuf, 0x4FuLL);
  unint64_t v66 = &byte_1813CEAEE;
  if (v64) {
    unint64_t v66 = v64;
  }
  unsigned int v17 = 5386;
  sqlite3_log(5386, "os_unix.c:%d: (%d) %s(%s) - %s", 46913, v65, "mmap", v66, __strerrbuf);
LABEL_53:
  else {
    uint64_t v43 = *(void *)(*(void *)(v15 + 40) + 8LL * a2);
  }
  *a5 = v43;
  if (v17) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = *(_BYTE *)(v15 + 34) == 0;
  }
  if (v44) {
    uint64_t v12 = v17;
  }
  else {
    uint64_t v12 = 8LL;
  }
  unsigned int v45 = *(void *)(v15 + 8);
  if (v45) {
    xmmword_18C465410(v45);
  }
  return v12;
}

      *(void *)&int v63 = 0LL;
      LODWORD(v64) = v64 | 0x4001;
      if ((*(_BYTE *)(v15 + 6) & 1) != 0)
      {
        uint64_t v50 = *(void *)(*(void *)(v15 + 40) + 48LL);
        *(void *)(v15 + 72) = *(void *)(v50 + 72);
        *(void *)(v50 + 72) = 0LL;
      }

      a3 = *(int **)(v15 + 72);
      if (v58) {
        int32x2_t v51 = v60 == 0;
      }
      else {
        int32x2_t v51 = 0;
      }
      int32x2_t v52 = v51;
      if (a3 && (v52 & 1) == 0 && sub_1812899CC(&v61, v15, a3, "ORDER", a5, a6, a7, a8)
        || *(_BYTE *)(v59 + 103))
      {
        return 2LL;
      }

      LODWORD(v64) = v64 & 0xFFFFBFFF;
      uint64_t v14 = 0uLL;
      if (v29)
      {
        int8x8_t v53 = *v29;
        uint64_t v14 = 0uLL;
        if (*v29 >= 1) {
          break;
        }
      }

          uint64_t v36 = *(void *)(v28 + 24);
          uint64_t v28 = *(void *)(v28 + 32);
          if (!v28) {
            goto LABEL_50;
          }
        }

        uint64_t v30 = (uint64_t *)(v29 + 2);
        int v31 = *v29 + 1;
        while (!*v30 || !sub_18131C57C((uint64_t)v85, *v30))
        {
          v30 += 3;
          if (--v31 <= 1) {
            goto LABEL_38;
          }
        }

        goto LABEL_74;
      }

      int v10 = 0;
      goto LABEL_48;
    }

    unsigned int v17 = *(unsigned __int8 *)(a1 + 16);
    (*(void (**)(void))(v8 + 8))(*(void *)(a1 + 80));
    void *v7 = 0LL;
    if (!v17)
    {
      int v18 = *(uint64_t (**)(void))(*(void *)a1 + 48LL);
      if (v18)
      {
        int v10 = v18();
        goto LABEL_49;
      }
    }

          ;
        }

        if (*(_BYTE *)(*(void *)(*(void *)(v11 + 8) + 16 * v38) + j)) {
          goto LABEL_47;
        }
        uint64_t v41 = &v22[2 * v36];
        *((_DWORD *)v41 + 16) = v38;
        uint64_t v42 = v41 + 8;
        if (*(unsigned __int8 *)(v12 + 302) >= 2u)
        {
          uint64_t v43 = *(void **)(v12 + 408);
          if (v43)
          {
            while (*v43 != v39)
            {
              uint64_t v43 = (void *)v43[3];
              if (!v43) {
                goto LABEL_42;
              }
            }

            void *v43 = v42;
          }
        }

    uint64_t v183 = 0;
    uint64_t v193 = *((_DWORD *)a5 + 3);
    int8x8_t v53 = v8;
    goto LABEL_48;
  }

  int32x2_t v52 = *(_BYTE *)(a1 + 31);
  if (v52)
  {
    *(_BYTE *)(a1 + 31) = v52 - 1;
    uint64_t v183 = *(_DWORD *)(a1 + 4LL * (v52 - 1) + 224);
    if ((v16 & 0xFFFFFFFD) == 0xC)
    {
      if (v52 != 1)
      {
        int8x8_t v53 = 0;
        int8x8_t v54 = v52 - 2;
        *(_BYTE *)(a1 + 31) = v54;
        uint64_t v193 = *(_DWORD *)(a1 + 4LL * v54 + 224);
        goto LABEL_48;
      }

      goto LABEL_45;
    }

    if (v8 == 1)
    {
      if (v52 != 1)
      {
        uint64_t v115 = v52 - 2;
        *(_BYTE *)(a1 + 31) = v115;
        uint64_t v193 = *(_DWORD *)(a1 + 4LL * v115 + 224);
        int8x8_t v53 = 1;
        goto LABEL_48;
      }

      goto LABEL_148;
    }

    int8x8_t v53 = v8;
  }

  else
  {
    uint64_t v183 = *(_DWORD *)(a1 + 56) + 1;
    *(_DWORD *)(a1 + 56) = v183;
    if ((v16 & 0xFFFFFFFD) == 0xC)
    {
LABEL_45:
      int8x8_t v53 = 0;
      uint64_t v55 = *(_DWORD *)(a1 + 56) + 1;
      uint64_t v193 = v55;
      goto LABEL_195;
    }

    int8x8_t v53 = v8;
    if (v8 == 1)
    {
LABEL_148:
      uint64_t v193 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v193;
      int8x8_t v53 = 1;
      goto LABEL_48;
    }
  }

  uint64_t v176 = *(_DWORD *)(a1 + 40);
  uint64_t v133 = __OFSUB__(v176, v53);
  uint64_t v177 = v176 - v53;
  if (v177 < 0 == v133)
  {
    uint64_t v193 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 40) = v177;
    *(_DWORD *)(a1 + 44) = v193 + v53;
    goto LABEL_48;
  }

  uint64_t v178 = *(_DWORD *)(a1 + 56);
  uint64_t v193 = v178 + 1;
  uint64_t v55 = v178 + v53;
LABEL_195:
  *(_DWORD *)(a1 + 56) = v55;
LABEL_48:
  int v56 = *v15 - *(_DWORD *)(a3 + 8);
  uint64_t v190 = v13;
  uint64_t v189 = a3;
  char v186 = a1;
  uint64_t v185 = v16;
  if ((*(_BYTE *)(a3 + 36) & 1) != 0)
  {
    __int128 v60 = *(unsigned int *)(a1 + 52);
    uint64_t v61 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 52) = v60 + 1;
    *(_DWORD *)(a1 + 56) = v61;
    if (*(_DWORD *)(a3 + 20))
    {
      uint64_t v62 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v62)
      {
        uint64_t v62 = sub_18131044C(v12, 15LL, 0LL, 0LL, 0LL, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v62 + 1;
        int v63 = *(void *)(v12 + 136) + 40LL * v62;
        *(_BYTE *)int v63 = 15;
        *(_OWORD *)(v63 + 1) = 0u;
        *(_OWORD *)(v63 + 17) = 0u;
        *(void *)(v63 + 32) = 0LL;
      }
    }

    else
    {
      uint64_t v62 = 0;
    }

    uint64_t v67 = v53 + v56 + 1;
    unint64_t v68 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v68)
    {
      sub_18131044C(v12, 121LL, v60, v61, v67, v19, v20, v21);
      BOOL v70 = *(_DWORD *)(v12 + 144);
      if (!v62)
      {
LABEL_72:
        if (*(_DWORD *)(v12 + 148) <= v70)
        {
          uint64_t v182 = sub_18131044C(v12, 34LL, v194, v13, 0LL, v19, v20, v21);
        }

        else
        {
          uint64_t v182 = v70;
          *(_DWORD *)(v12 + 144) = v70 + 1;
          unsigned int v75 = *(void *)(v12 + 136) + 40LL * v70;
          *(_DWORD *)unsigned int v75 = 34;
          *(_DWORD *)(v75 + 4) = v194;
          *(_DWORD *)(v75 + 8) = v13;
          *(void *)(v75 + 12) = 0LL;
          *(void *)(v75 + 28) = 0LL;
          *(void *)(v75 + 20) = 0LL;
          *(_DWORD *)(v75 + 36) = 0;
        }

        __int128 v76 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v76)
        {
          sub_18131044C(v12, 133LL, v194, v61, v60, v19, v20, v21);
          unint64_t v77 = 0;
        }

        else
        {
          unint64_t v77 = 0;
          *(_DWORD *)(v12 + 144) = v76 + 1;
          uint64_t v78 = *(void *)(v12 + 136) + 40LL * v76;
          *(_DWORD *)uint64_t v78 = 133;
          *(_DWORD *)(v78 + 4) = v194;
          *(_DWORD *)(v78 + 8) = v61;
          *(_DWORD *)(v78 + 12) = v60;
          *(void *)(v78 + 24) = 0LL;
          *(void *)(v78 + 32) = 0LL;
          *(void *)(v78 + 16) = 0LL;
        }

        goto LABEL_80;
      }
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v68 + 1;
      uint64_t v69 = *(void *)(v12 + 136) + 40LL * v68;
      *(_DWORD *)uint64_t v69 = 121;
      *(_DWORD *)(v69 + 4) = v60;
      *(_DWORD *)(v69 + 8) = v61;
      *(_DWORD *)(v69 + 12) = v67;
      *(void *)(v69 + 24) = 0LL;
      *(void *)(v69 + 32) = 0LL;
      *(void *)(v69 + 16) = 0LL;
      BOOL v70 = *(_DWORD *)(v12 + 144);
      if (!v62) {
        goto LABEL_72;
      }
    }

    if (*(_BYTE *)(*(void *)v12 + 103LL)) {
      uint64_t v71 = &byte_18C550680;
    }
    else {
      uint64_t v71 = (char *)(*(void *)(v12 + 136) + 40LL * v62);
    }
    *((_DWORD *)v71 + 2) = v70;
    goto LABEL_72;
  }

  unint64_t v57 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v57)
  {
    int v59 = sub_18131044C(v12, 35LL, v194, v13, 0LL, v19, v20, v21);
  }

  else
  {
    *(_DWORD *)(v12 + 144) = v57 + 1;
    uint64_t v58 = *(void *)(v12 + 136) + 40LL * v57;
    *(_DWORD *)uint64_t v58 = 35;
    *(_DWORD *)(v58 + 4) = v194;
    *(_DWORD *)(v58 + 8) = v13;
    *(void *)(v58 + 12) = 0LL;
    *(void *)(v58 + 28) = 0LL;
    *(void *)(v58 + 20) = 0LL;
    *(_DWORD *)(v58 + 36) = 0;
    int v59 = v57;
  }

  int v64 = *(unsigned int *)(a2 + 12);
  uint64_t v182 = v59;
  if ((int)v64 >= 1)
  {
    unint64_t v65 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v65)
    {
      sub_18131044C(v12, 59LL, v64, v191, 1LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v65 + 1;
      unint64_t v66 = *(void *)(v12 + 136) + 40LL * v65;
      *(_DWORD *)unint64_t v66 = 59;
      *(_DWORD *)(v66 + 4) = v64;
      *(_DWORD *)(v66 + 8) = v191;
      *(_DWORD *)(v66 + 12) = 1;
      *(void *)(v66 + 24) = 0LL;
      *(void *)(v66 + 32) = 0LL;
      *(void *)(v66 + 16) = 0LL;
    }

    if (*(int *)(a2 + 12) >= 1)
    {
      uint64_t v72 = *(unsigned int *)(a2 + 8);
      uint64_t v73 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v73)
      {
        sub_18131044C(v12, 86LL, v72, 0xFFFFFFFFLL, 0LL, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v73 + 1;
        unint64_t v74 = *(void *)(v12 + 136) + 40LL * v73;
        *(_DWORD *)unint64_t v74 = 86;
        *(_DWORD *)(v74 + 4) = v72;
        *(_DWORD *)(v74 + 8) = -1;
        *(void *)(v74 + 12) = 0LL;
        *(void *)(v74 + 28) = 0LL;
        *(void *)(v74 + 20) = 0LL;
        *(_DWORD *)(v74 + 36) = 0;
      }
    }
  }

  unint64_t v77 = 1;
  __int128 v60 = v194;
LABEL_80:
  uint64_t v181 = v77 + v56;
  int v79 = v181 - 1;
  int v80 = v53;
  if (v53 < 8)
  {
    uint64_t v81 = 0LL;
    int v82 = v193;
    uint64_t v83 = v180;
    goto LABEL_86;
  }

  uint64_t v81 = v53 & 0xFFFFFFF8;
  uint64_t v84 = 0uLL;
  unsigned __int8 v85 = (int32x4_t)(v181 - 1);
  uint64_t v83 = v180;
  unsigned __int8 v86 = (__int16 *)(v180 + 100);
  v87.i64[0] = 0x100000001LL;
  v87.i64[1] = 0x100000001LL;
  unsigned __int8 v88 = v81;
  do
  {
    v89.i16[0] = *(v86 - 36);
    v89.i16[1] = *(v86 - 24);
    v89.i16[2] = *(v86 - 12);
    v89.i16[3] = *v86;
    v90.i16[0] = v86[12];
    v90.i16[1] = v86[24];
    v90.i16[2] = v86[36];
    v90.i16[3] = v86[48];
    unsigned __int8 v85 = vaddq_s32(v85, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16(v89)), v87));
    uint64_t v84 = vaddq_s32(v84, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16(v90)), v87));
    v86 += 96;
    v88 -= 8LL;
  }

  while (v88);
  int v79 = vaddvq_s32(vaddq_s32(v84, v85));
  int v82 = v193;
  if (v81 != v53)
  {
LABEL_86:
    unsigned int v91 = (unsigned __int16 *)(v83 + 24LL * v81 + 28);
    unsigned int v92 = v53 - v81;
    do
    {
      uint64_t v93 = *v91;
      v91 += 12;
      if (!v93) {
        ++v79;
      }
      --v92;
    }

    while (v92);
  }

  unsigned int v94 = v83 + 8;
  uint64_t v95 = v82 - 1;
  do
  {
    uint64_t v97 = v80 - 1;
    uint64_t v98 = *(_WORD *)(v94 + 24LL * (v80 - 1) + 20) == 0;
    else {
      uint64_t v99 = v79;
    }
    uint64_t v100 = v95 + v80;
    uint64_t v101 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v101)
    {
      *(_DWORD *)(v12 + 144) = v101 + 1;
      uint64_t v96 = *(void *)(v12 + 136) + 40LL * v101;
      *(_DWORD *)uint64_t v96 = 94;
      *(_DWORD *)(v96 + 4) = v60;
      *(_DWORD *)(v96 + 8) = v99;
      *(_DWORD *)(v96 + 12) = v100;
      *(void *)(v96 + 24) = 0LL;
      *(void *)(v96 + 32) = 0LL;
      *(void *)(v96 + 16) = 0LL;
    }

    else
    {
      sub_18131044C(v12, 94LL, v60, v99, v100, v19, v20, v21);
    }

    v79 -= v98;
    int v80 = v97;
  }

  while ((unint64_t)(v97 + 1) > 1);
LABEL_98:
  uint64_t v102 = v193;
  if ((*(_BYTE *)(*(void *)v12 + 49LL) & 4) != 0)
  {
    uint64_t v103 = *(_DWORD *)(v12 + 392);
    uint64_t v104 = 56LL * v103 + 20;
    uint64_t v105 = v103 + 1;
    while ((int)--v105 >= 1)
    {
      uint64_t v106 = v104 - 56;
      uint64_t v107 = *(void *)(v12 + 400);
      uint64_t v108 = *(_DWORD *)(v107 + v104 - 76);
      v104 -= 56LL;
      if (v108 == v188)
      {
        uint64_t v109 = *(_DWORD *)(v12 + 144);
        uint64_t v110 = v107 + v106;
        uint64_t v111 = (int *)(v107 + v106 - 16);
        if (*v111)
        {
          uint64_t v113 = *(_DWORD *)(v110 - 8);
          uint64_t v112 = (int *)(v110 - 8);
          if (v113)
          {
            uint64_t v111 = (int *)(v107 + v106);
            if (*(_DWORD *)(v107 + v106)) {
              break;
            }
            uint64_t v114 = 5LL;
          }

          else
          {
            uint64_t v114 = 3LL;
            uint64_t v111 = v112;
          }
        }

        else
        {
          uint64_t v114 = 1LL;
        }

        _OWORD *v111 = v188;
        *(_DWORD *)(v107 + 4 * v114 + v106 - 16) = v109 - 1;
        break;
      }
    }
  }

  switch(v184)
  {
    case 0:
      uint64_t v118 = *((unsigned int *)a5 + 3);
      uint64_t v119 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v119)
      {
        uint64_t v135 = v12;
        int v136 = 84LL;
        uint64_t v137 = v53;
        goto LABEL_135;
      }

      *(_DWORD *)(v12 + 144) = v119 + 1;
      uint64_t v120 = *(void *)(v12 + 136) + 40LL * v119;
      *(_DWORD *)uint64_t v120 = 84;
      *(_DWORD *)(v120 + 4) = v118;
      *(_DWORD *)(v120 + 8) = v53;
      *(void *)(v120 + 12) = 0LL;
      *(void *)(v120 + 28) = 0LL;
      *(void *)(v120 + 20) = 0LL;
      *(_DWORD *)(v120 + 36) = 0;
      break;
    case 1:
      break;
    case 2:
      sub_1812B9B68((uint64_t *)v12, 97LL, v193, v53, v183, *((void *)a5 + 3), v53, v21);
      uint64_t v121 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) > v121)
      {
        *(_DWORD *)(v12 + 144) = v121 + 1;
        uint64_t v122 = *(void *)(v12 + 136) + 40LL * v121;
        *(_DWORD *)uint64_t v122 = 64906;
        *(_DWORD *)(v122 + 4) = v179;
        *(_DWORD *)(v122 + 8) = v183;
        *(_DWORD *)(v122 + 12) = v193;
        *(_DWORD *)(v122 + 16) = v53;
        goto LABEL_144;
      }

      sub_181310690(v12, 138LL, v179, v183, v193, v53, v20, v21);
      break;
    case 3:
    case 5:
      uint64_t v116 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v116)
      {
        sub_18131044C(v12, 94LL, v60, v181, v193, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v116 + 1;
        uint64_t v117 = *(void *)(v12 + 136) + 40LL * v116;
        *(_DWORD *)uint64_t v117 = 94;
        *(_DWORD *)(v117 + 4) = v60;
        *(_DWORD *)(v117 + 8) = v181;
        *(_DWORD *)(v117 + 12) = v193;
        *(void *)(v117 + 24) = 0LL;
        *(void *)(v117 + 32) = 0LL;
        *(void *)(v117 + 16) = 0LL;
      }

      uint64_t v128 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v128)
      {
        sub_18131044C(v12, 127LL, v179, v183, 0LL, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v128 + 1;
        uint64_t v129 = *(void *)(v12 + 136) + 40LL * v128;
        *(_DWORD *)uint64_t v129 = 127;
        *(_DWORD *)(v129 + 4) = v179;
        *(_DWORD *)(v129 + 8) = v183;
        *(void *)(v129 + 12) = 0LL;
        *(void *)(v129 + 28) = 0LL;
        *(void *)(v129 + 20) = 0LL;
        *(_DWORD *)(v129 + 36) = 0;
      }

      int v130 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v130)
      {
        sub_18131044C(v12, 128LL, v179, v193, v183, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v130 + 1;
        uint64_t v131 = *(void *)(v12 + 136) + 40LL * v130;
        *(_DWORD *)uint64_t v131 = 128;
        *(_DWORD *)(v131 + 4) = v179;
        *(_DWORD *)(v131 + 8) = v193;
        *(_DWORD *)(v131 + 12) = v183;
        *(void *)(v131 + 24) = 0LL;
        *(void *)(v131 + 32) = 0LL;
        *(void *)(v131 + 16) = 0LL;
      }

      uint64_t v132 = *(_DWORD *)(v12 + 144);
      uint64_t v133 = __OFSUB__(v132, 1);
      uint64_t v134 = v132 - 1;
      if (v134 < 0 == v133) {
        *(_WORD *)(*(void *)(v12 + 136) + 40LL * v134 + 2) = 8;
      }
      break;
    case 6:
      uint64_t v125 = *((unsigned int *)a5 + 2);
      if (*(_BYTE *)(v186 + 31))
      {
        uint64_t v126 = *(_BYTE *)(v186 + 31) - 1;
        *(_BYTE *)(v186 + 31) = v126;
        uint64_t v127 = *(unsigned int *)(v186 + 4LL * v126 + 224);
      }

      else
      {
        uint64_t v127 = (*(_DWORD *)(v186 + 56) + 1);
        *(_DWORD *)(v186 + 56) = v127;
      }

      uint64_t v139 = (v125 >> 31) + v193;
      uint64_t v140 = v53 - (v125 >> 31);
      uint64_t v141 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v141)
      {
        sub_18131044C(v12, 97LL, v139, v140, v127, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v141 + 1;
        uint64_t v142 = *(void *)(v12 + 136) + 40LL * v141;
        *(_DWORD *)uint64_t v142 = 97;
        *(_DWORD *)(v142 + 4) = v139;
        *(_DWORD *)(v142 + 8) = v140;
        *(_DWORD *)(v142 + 12) = v127;
        *(void *)(v142 + 24) = 0LL;
        *(void *)(v142 + 32) = 0LL;
        *(void *)(v142 + 16) = 0LL;
      }

      __int16 v143 = *(_DWORD *)(v12 + 148);
      int v144 = *(_DWORD *)(v12 + 144);
      if ((v125 & 0x80000000) != 0)
      {
        if (v143 <= v144)
        {
          uint64_t v135 = v12;
          int v136 = 128LL;
          uint64_t v118 = v179;
          uint64_t v137 = v127;
          uint64_t v102 = v193;
          uint64_t v138 = v193;
          goto LABEL_136;
        }

        *(_DWORD *)(v12 + 144) = v144 + 1;
        uint64_t v145 = *(void *)(v12 + 136) + 40LL * v144;
        *(_DWORD *)uint64_t v145 = 128;
        *(_DWORD *)(v145 + 4) = v179;
        uint64_t v102 = v193;
        *(_DWORD *)(v145 + 8) = v127;
        *(_DWORD *)(v145 + 12) = v193;
        *(void *)(v145 + 24) = 0LL;
        *(void *)(v145 + 32) = 0LL;
        *(void *)(v145 + 16) = 0LL;
      }

      else if (v143 <= v144)
      {
        uint64_t v146 = v125;
        uint64_t v102 = v193;
        sub_181310690(v12, 138LL, v179, v127, v193, v146, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v144 + 1;
        uint64_t v122 = *(void *)(v12 + 136) + 40LL * v144;
        *(_DWORD *)uint64_t v122 = 64906;
        *(_DWORD *)(v122 + 4) = v179;
        *(_DWORD *)(v122 + 8) = v127;
        *(_DWORD *)(v122 + 12) = v193;
        *(_DWORD *)(v122 + 16) = v125;
        uint64_t v102 = v193;
LABEL_144:
        *(void *)(v122 + 24) = 0LL;
        *(void *)(v122 + 32) = 0LL;
      }

      break;
    default:
      uint64_t v118 = *((unsigned int *)a5 + 1);
      uint64_t v123 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v123)
      {
        uint64_t v135 = v12;
        int v136 = 12LL;
        uint64_t v137 = 0LL;
LABEL_135:
        uint64_t v138 = 0LL;
LABEL_136:
        sub_18131044C(v135, v136, v118, v137, v138, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v123 + 1;
        uint64_t v124 = *(void *)(v12 + 136) + 40LL * v123;
        *(_DWORD *)uint64_t v124 = 12;
        *(_DWORD *)(v124 + 4) = v118;
        *(_OWORD *)(v124 + 8) = 0u;
        *(_OWORD *)(v124 + 24) = 0u;
      }

      break;
  }

  if (v183)
  {
    if (v185 == 11 && v53 != 1)
    {
      *(_DWORD *)(v186 + 40) = v53;
      uint64_t v148 = (unsigned int *)(v186 + 44);
    }

    else
    {
      if (!v102 || (uint64_t v147 = *(unsigned __int8 *)(v186 + 31), v147 > 7))
      {
LABEL_159:
        uint64_t v149 = *(unsigned __int8 *)(v186 + 31);
        if (v149 <= 7)
        {
          *(_BYTE *)(v186 + 31) = v149 + 1;
          *(_DWORD *)(v186 + 4 * v149 + 224) = v183;
        }

        goto LABEL_161;
      }

      *(_BYTE *)(v186 + 31) = v147 + 1;
      uint64_t v148 = (unsigned int *)(v186 + 4 * v147 + 224);
    }

    int *v148 = v102;
    goto LABEL_159;
  }

      ++v32;
    }

    if (*v32) {
      goto LABEL_47;
    }
    if (!v31) {
      goto LABEL_38;
    }
    qword_18C468258[9 * n + 2] = v31[2];
    unsigned int v29 = v31 + 2;
LABEL_39:
    _OWORD *v29 = v26;
  }

  for (juint64_t j = 0LL; jj != 20; ++jj)
  {
    int v38 = (char *)&qword_18C468528[9 * jj];
    unint64_t v39 = (char *)*((void *)v38 + 7);
    if (v39) {
      BOOL v40 = strlen(*((const char **)v38 + 7)) & 0x3FFFFFFF;
    }
    else {
      BOOL v40 = 0;
    }
    uint64_t v41 = (void *)&xmmword_18C468BD0 + (v40 + *v39) % 23;
    uint64_t v42 = (void *)*v41;
    if (!*v41)
    {
LABEL_56:
      uint64_t v37 = (char *)&qword_18C468528[9 * jj];
      *((void *)v37 + 2) = 0LL;
      *((void *)v37 + 8) = v42;
      goto LABEL_57;
    }

    uint64_t v43 = (void *)*v41;
LABEL_63:
    uint64_t v44 = (_BYTE *)v43[7];
    for (kint k = (unsigned __int8 *)*((void *)v38 + 7); ; ++kk)
    {
      uint64_t v46 = *v44;
      uint64_t v47 = *kk;
      if ((_DWORD)v46 == (_DWORD)v47) {
        break;
      }
      if (byte_1813C6343[v46] != byte_1813C6343[v47])
      {
        uint64_t v43 = (void *)v43[8];
        if (v43) {
          goto LABEL_63;
        }
        goto LABEL_56;
      }

  int v31 = (uint64_t *)(v26 + 344);
  if (pSnapshot && !*(_DWORD *)pSnapshot->hidden)
  {
    uint64_t v32 = 1;
  }

  else
  {
    uint64_t v32 = 0;
    *(void *)(v30 + 144) = pSnapshot;
  }

  *(_DWORD *)(v30 + 152) = v32;
  if (*(_BYTE *)(v24 + 17) || !*(_BYTE *)(v24 + 16))
  {
    uint64_t v27 = sub_1812FDF34(v24, 0, 0LL);
    uint64_t v30 = *v31;
    if (!*v31) {
      goto LABEL_51;
    }
  }

  else
  {
    uint64_t v27 = 0;
  }

  *(void *)(v30 + 144) = 0LL;
  *(_DWORD *)(v30 + 152) = 0;
  if (v25)
  {
LABEL_61:
    if (!*(_BYTE *)(v30 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v30 + 8) + 112LL))( *(void *)(v30 + 8),  1LL,  1LL,  5LL);
    }
  }

    uint64_t v28 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v23);
      --qword_18C468B10;
      off_18C4653A8(v23);
      BOOL v23 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v28 = &xmmword_18C465410;
        goto LABEL_52;
      }
    }

    else
    {
LABEL_52:
      (*v28)(v23);
    }

        if ((_DWORD)v15 != 77)
        {
          uint64_t v12 = 2058LL;
          *(_DWORD *)(a1 + 32) = v15;
          if (a2 | 0x80A) {
            goto LABEL_62;
          }
          goto LABEL_55;
        }

        goto LABEL_54;
      }

      goto LABEL_54;
    }

    goto LABEL_36;
  }

  uint64_t v9 = *(const char **)(v5 + 8);
  int v10 = dword_18C54FA50 + *(_DWORD *)(v6 + 80) + 2;
  uint64_t v28 = 0;
  uint64_t v26 = v10;
  uint64_t v27 = 1LL;
  unsigned int v29 = *(_DWORD *)(a1 + 24);
  if (fsctl(v9, 0xC0207A17uLL, &v26, 0) != -1)
  {
    uint64_t v11 = 0;
    goto LABEL_31;
  }

  uint64_t v16 = *__error();
  uint64_t v12 = 5LL;
  if (((1LL << v16) & 0x1000000800012010LL) != 0) {
    goto LABEL_74;
  }
  if (v16 == 1)
  {
    uint64_t v12 = 3LL;
  }

  else
  {
LABEL_71:
    if ((_DWORD)v16 == 77) {
      goto LABEL_74;
    }
    uint64_t v12 = 3850LL;
  }

  *(_DWORD *)(a1 + 32) = v16;
LABEL_74:
  uint64_t v11 = 0;
LABEL_55:
  int v18 = dword_18C54FA50;
  uint64_t v19 = *(void *)(v6 + 80);
  int v20 = *(_DWORD *)(v6 + 24) - 1;
  *(_DWORD *)(v6 + 24) = v20;
  if (v20)
  {
LABEL_59:
    __n128 v22 = *(_DWORD *)(v6 + 28) - 1;
    *(_DWORD *)(v6 + 28) = v22;
    if (!v22) {
      sub_1812F3108(a1);
    }
    uint64_t v12 = 0LL;
    goto LABEL_62;
  }

  if (v11
    || (uint64_t v21 = *(const char **)(v5 + 8),
        uint64_t v28 = 1,
        uint64_t v26 = v18 + v19 + 2,
        uint64_t v27 = 1LL,
        unsigned int v29 = *(_DWORD *)(a1 + 24),
        fsctl(v21, 0xC0207A17uLL, &v26, 0) != -1))
  {
    *(_BYTE *)(v6 + 32) = 0;
    *(_BYTE *)(a1 + 28) = 0;
    goto LABEL_59;
  }

  uint64_t v25 = *__error();
  uint64_t v12 = 5LL;
  if (((1LL << v25) & 0x1000000800012010LL) == 0)
  {
    if (v25 == 1)
    {
      uint64_t v12 = 3LL;
      *(_DWORD *)(a1 + 32) = 1;
      goto LABEL_62;
    }

      int v10 = (v10 + 1);
      --v6;
    }

    while (v6);
  }

  uint64_t v14 = v6[1];
  if (v14)
  {
    if (*(int *)v14 >= 1)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      do
      {
        sub_181302560(v14[3] + v15);
        ++v16;
        v15 += 80LL;
      }

      while (v16 < *(int *)v14);
    }

    unsigned int v17 = (void (**)(int *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v14);
      --qword_18C468B10;
      off_18C4653A8(v14);
      uint64_t v14 = (uint64_t *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_57;
      }
      unsigned int v17 = (void (**)(int *))&xmmword_18C465410;
    }

    (*v17)((int *)v14);
  }

      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    }
  }

  return v7;
}

        unint64_t v35 = v90;
LABEL_48:
        uint64_t v37 = v91;
        int v38 = v85 - 4;
        goto LABEL_39;
      }
    }

    else if (v92 < v96[0])
    {
      goto LABEL_53;
    }

    sub_18130E688(a1, "Rowid %lld out of order", v92);
    uint64_t v41 = v92;
    goto LABEL_53;
  }

  sub_18130E688(a1, "unable to get the page. error code=%d", v20);
LABEL_16:
  uint64_t v21 = -1;
LABEL_17:
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 60) = v9;
  return (v21 + 1);
}

                    sub_1812F20DC(v9, v39);
                    return sub_18128FF4C(v9, (void *)a2);
                  }
                }

                else if (byte_1813C6343[v59] != byte_1813C6343[v60])
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
  }

  return sub_18128FF4C(v9, (void *)a2);
}

            ++v36;
          }

          if (byte_1813C6343[v38] == byte_1813C6343[v39]) {
            goto LABEL_47;
          }
          if (++v35 != v34) {
            continue;
          }
          break;
        }

  int v7 = *(_DWORD *)(v4 + 16);
  if ((*(_WORD *)(v4 + 20) & 0x400) == 0) {
    goto LABEL_51;
  }
  v7 += *(_DWORD *)v4;
  if (!a1)
  {
LABEL_35:
    uint64_t v12 = 97431;
    goto LABEL_36;
  }

          uint64_t v14 = 97441;
          goto LABEL_49;
        }

        int v7 = (uint64_t)v15;
      }

      else
      {
        if ((v5 & 0x12) == 0 || !*(void *)(v4 + 8))
        {
          int v7 = 0LL;
          goto LABEL_41;
        }

        int v7 = sub_181303DF0(v4);
      }

      if (v7 < 0)
      {
        if (v7 != 0x8000000000000000LL)
        {
          int v7 = -v7;
          if (!a1) {
            goto LABEL_47;
          }
          goto LABEL_42;
        }

  uint64_t v15 = v16;
LABEL_48:
  if (v17)
  {
    *(_BYTE *)(v17 + 50) = 0;
    *(_DWORD *)(v17 + 76) = v14 + 1;
    return v17;
  }

    if (v4 < v7) {
      continue;
    }
    break;
  }

  uint64_t v25 = 0LL;
  *(void *)(a1 + 16) = v27;
  *(_DWORD *)(a1 + 12) = v28;
  return v25;
}

    uint64_t v50 = *(void *)(*(void *)v21 + 24LL);
    if (v50) {
      xmmword_18C465410(v50);
    }
    goto LABEL_62;
  }

        LODWORD(v23) = v23 + (_DWORD)v35 - (_DWORD)v32;
        int v31 = v32[1];
        if ((char)v32[1] < 0)
        {
          int v31 = v31 & 0x7F | (v32[2] << 7);
          if ((char)v32[2] < 0)
          {
            int v31 = v31 & 0x3FFF | (v32[3] << 14);
            if ((char)v32[3] < 0)
            {
              int v31 = v31 & 0x1FFFFF | (v32[4] << 21);
              if ((char)v32[4] < 0)
              {
                int v31 = v31 & 0xFFFFFFF | ((v32[5] & 7) << 28);
                unint64_t v34 = (char *)(v32 + 6);
              }

              else
              {
                unint64_t v34 = (char *)(v32 + 5);
              }
            }

            else
            {
              unint64_t v34 = (char *)(v32 + 4);
            }
          }

          else
          {
            unint64_t v34 = (char *)(v32 + 3);
          }
        }

        else
        {
          unint64_t v34 = (char *)(v32 + 2);
        }
      }

      unint64_t v35 = (char *)v32;
LABEL_58:
      unint64_t v39 = &v35[(int)v23];
      if (v33 - v39 >= 1) {
        bzero(v39, v33 - v39);
      }
      uint64_t v47 = v35;
    }

    if ((int)v23 >= 1)
    {
      uint64_t result = 0LL;
      *a4 = v47;
      *a3 = v45;
      *a5 = v23;
      return result;
    }

    int v8 = a1;
    if (!*(void *)(**(void **)a2 + 112LL)) {
      goto LABEL_63;
    }
  }

  int v24 = v47;
  uint64_t v25 = v46 + 1LL;
  if (v46 + 21LL <= *(void *)(a2 + 32))
  {
    uint64_t v28 = *(void **)(a2 + 24);
    goto LABEL_36;
  }

  uint64_t v26 = *(void *)(a2 + 24);
  if (!sqlite3_initialize())
  {
    uint64_t v27 = 2 * (int)v25 + 20;
    uint64_t v28 = (void *)sub_18127D33C(v26, v27);
    if (v28)
    {
      *(void *)(a2 + 24) = v28;
      *(void *)(a2 + 32) = v27;
LABEL_36:
      memcpy(v28, v24, v23 + 1);
      unsigned int v29 = *(void *)(a2 + 24) + v25;
      *(_DWORD *)(v29 + 16) = 0;
      *(void *)unsigned int v29 = 0LL;
      *(void *)(v29 + 8) = 0LL;
      uint64_t v47 = *(char **)(a2 + 24);
      goto LABEL_37;
    }
  }

  return 7LL;
}

  if (v12[2])
  {
    unsigned int v29 = *((int *)v12 + 1);
    if (sqlite3_initialize() || (uint64_t v104 = (char *)sub_18126F0AC(4 * v29)) == 0LL)
    {
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v28 = 7;
      goto LABEL_199;
    }

    uint64_t v105 = v104;
    if (*((_DWORD *)v12 + 2)) {
      memcpy(v104, v12 + 28, 4LL * *((int *)v12 + 1));
    }
    uint64_t v114 = (uint64_t (*)(uint64_t))sqlite3_free;
    int32x2_t v33 = v105;
    goto LABEL_58;
  }

  void v12[2] = 1;
  int32x2_t v33 = &v12[4 * *((int *)v12 + 1) + 32];
LABEL_57:
  uint64_t v114 = sub_18138034C;
LABEL_58:
  unint64_t v35 = 0LL;
  *((void *)&v121 + 1) = v33;
  DWORD1(v120) = *(_DWORD *)(v8 + 36);
  uint64_t v123 = 0;
  uint64_t v115 = v33;
  uint64_t v116 = *(uint64_t **)v8;
  pStmt = 0LL;
  while (1)
  {
    uint64_t v37 = v9[v35];
    if (!v9[v35]) {
      break;
    }
    LOBYTE(v121) = v9[v35];
    switch(v37)
    {
      case 'a':
        if ((v117 & 1) != 0) {
          goto LABEL_175;
        }
        int v38 = pStmt;
        if (!pStmt)
        {
          unsigned int v45 = sub_181371DD8(v116, &pStmt);
          if (v45) {
            goto LABEL_105;
          }
          int v38 = pStmt;
        }

        unint64_t v39 = sqlite3_column_bytes(v38, 0);
        BOOL v40 = sqlite3_column_blob(v38, 0);
        if (!v40) {
          goto LABEL_116;
        }
        uint64_t v41 = v40;
        uint64_t v42 = (unint64_t)&v40[v39];
        uint64_t v43 = sub_181371EB8(v40, v42, &v124);
        uint64_t v44 = v124;
        unsigned int v45 = 267;
        if (v124 < 1 || v43 > v39) {
          goto LABEL_105;
        }
        uint64_t v123 = 0;
        uint64_t v46 = 0LL;
        uint64_t v47 = &v41[v43];
        while (1)
        {
          v47 += (int)sub_181363B00(v47, (unint64_t *)&v124);
        }

        uint64_t v123 = 267;
        goto LABEL_175;
      case 'b':
        int v48 = DWORD1(v120);
        uint64_t v49 = v120 + 62;
        uint64_t v50 = v49 >> 5;
        goto LABEL_103;
      case 'c':
        if ((v117 & 1) == 0) {
          *(_DWORD *)int32x2_t v33 = v120;
        }
        goto LABEL_175;
      case 'l':
        int32x2_t v52 = *(void *)(v8 + 48);
        uint64_t v124 = 0LL;
        int8x8_t v53 = sub_1813636A8(v116, 21, (sqlite3_stmt **)&v124, 0LL);
        int8x8_t v54 = (sqlite3_stmt *)v124;
        if (v53) {
          goto LABEL_173;
        }
        if (!sub_1812B2390(v124, 0))
        {
          uint64_t v55 = *((void *)v54 + 16);
          if ((*(_WORD *)(v55 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v55, v52);
          }

          else
          {
            *(void *)uint64_t v55 = v52;
            *(_WORD *)(v55 + 20) = 4;
          }

          unsigned int v94 = *(void *)(*(void *)v54 + 24LL);
          if (v94) {
            xmmword_18C465410(v94);
          }
        }

        if (sqlite3_step(v54) == 100 && sqlite3_column_type(v54, 0) == 4)
        {
          uint64_t v123 = 0;
          uint64_t v95 = sqlite3_column_blob(v54, 0);
          uint64_t v96 = sqlite3_column_bytes(v54, 0);
          uint64_t v97 = 0LL;
          uint64_t v98 = (unint64_t)&v95[v96];
          while (1)
          {
            v95 += (int)sub_181371EB8(v95, v98, &v124);
            *(_DWORD *)(*((void *)&v121 + 1) + 4 * v97++) = v124;
          }

          uint64_t v123 = 267;
        }

        else
        {
          int8x8_t v53 = sqlite3_reset(v54);
          int8x8_t v54 = 0LL;
          if (!v53) {
            int8x8_t v53 = 267;
          }
LABEL_173:
          uint64_t v123 = v53;
        }

  uint64_t v21 = *((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    __n128 v22 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v21);
      --qword_18C468B10;
      off_18C4653A8(v21);
      uint64_t v21 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_54;
      }
      __n128 v22 = &xmmword_18C465410;
    }

    (*v22)(v21);
  }

    uint64_t result = 7LL;
    if (((0xFFFEFFFFFFFEFFFELL >> v6) & 1) != 0 || v17 > 0) {
      return result;
    }
LABEL_51:
    if (v17 >= 0x80)
    {
      int v18 = 1;
      uint64_t v19 = v17;
      do
      {
        int v20 = v19 >> 14;
        v19 >>= 7;
        ++v18;
      }

      while (v20);
      if (!a1) {
        goto LABEL_63;
      }
      if (v17 >> 14)
      {
        sub_181308E00((int8x8_t *)(a1 + 1), v17);
        if (v17 < 1) {
          goto LABEL_63;
        }
      }

      else
      {
        *(_BYTE *)(a1 + 1) = (v17 >> 7) | 0x80;
        *(_BYTE *)(a1 + 2) = v17 & 0x7F;
      }
    }

    else
    {
      if (!a1)
      {
        int v18 = 1;
        goto LABEL_63;
      }

      *(_BYTE *)(a1 + 1) = v17;
      int v18 = 1;
      if (v17 < 1)
      {
LABEL_63:
        int v10 = v17 + v18 + 1;
        uint64_t result = 0LL;
        if (!a3) {
          return result;
        }
        goto LABEL_64;
      }
    }

    memcpy((void *)(a1 + v18 + 1), v15, v17);
    goto LABEL_63;
  }

  if (a1)
  {
    int v8 = *((_WORD *)a2 + 10);
    if (((0x50505050uLL >> v6) & 1) != 0)
    {
      if ((v8 & 0x24) != 0)
      {
        uint64_t v13 = *(void *)a2;
      }

      else if ((v8 & 8) != 0)
      {
        uint64_t v21 = *(double *)a2;
        if (*(double *)a2 >= -9.22337204e18)
        {
          if (v21 <= 9.22337204e18) {
            uint64_t v13 = (uint64_t)v21;
          }
          else {
            uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v13 = 0x8000000000000000LL;
        }
      }

      else if ((v8 & 0x12) != 0 && *((void *)a2 + 1))
      {
        uint64_t v13 = sub_181303DF0((uint64_t)a2);
      }

      else
      {
        uint64_t v13 = 0LL;
      }
    }

    else
    {
      if ((v8 & 8) != 0)
      {
        uint64_t v9 = *(double *)a2;
      }

      else if ((v8 & 0x24) != 0)
      {
        uint64_t v9 = (double)*(uint64_t *)a2;
      }

      else if ((v8 & 0x12) != 0)
      {
        uint64_t v9 = sub_181303DB8((uint64_t)a2);
      }

      else
      {
        uint64_t v9 = 0.0;
      }

      uint64_t v13 = *(void *)&v9;
    }

    *(void *)(a1 + 1) = bswap64(v13);
  }

  int v10 = 9LL;
  uint64_t result = 0LL;
  if (a3) {
LABEL_64:
  }
    *a3 += v10;
  return result;
}

uint64_t sub_18127D33C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return sub_18126F0AC(a2);
  }
  uint64_t v3 = a1;
  if (!a2)
  {
    uint64_t v5 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v3);
      --qword_18C468B10;
      off_18C4653A8(v3);
      uint64_t v3 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return v3;
      }
      uint64_t v5 = &xmmword_18C465410;
    }

    (*v5)(v3);
    return 0LL;
  }

  int v6 = off_18C4653B8(a1);
  uint64_t v7 = unk_18C4653C0(a2);
  uint64_t v8 = (v7 - v6);
  if ((_DWORD)v7 == v6) {
    return v3;
  }
  uint64_t v9 = v7;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    if (qword_18C468B40 < a2) {
      qword_18C468B40 = a2;
    }
    uint64_t v10 = qword_18C468AC8;
    if (qword_18C468AC8 < *((void *)&xmmword_18C468B70 + 1) - v8) {
      goto LABEL_21;
    }
    if (*((uint64_t *)&xmmword_18C468B70 + 1) >= 1)
    {
      if ((void)xmmword_18C468B70)
      {
        xmmword_18C465410(xmmword_18C468B70);
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
      }
    }

    if (qword_18C468B80 < 1 || v10 < qword_18C468B80 - v8)
    {
LABEL_21:
      uint64_t v11 = off_18C4653B0(v3, v9);
      uint64_t v3 = v11;
      if (v11)
      {
        uint64_t v12 = qword_18C468AC8 + (int)(off_18C4653B8(v11) - v6);
        qword_18C468AC8 = v12;
        if (v12 > qword_18C468B18) {
          qword_18C468B18 = v12;
        }
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465410(xmmword_18C468B70);
      }
      return v3;
    }

    if (!(void)xmmword_18C468B70) {
      return 0LL;
    }
    xmmword_18C465410(xmmword_18C468B70);
    return 0LL;
  }

  return off_18C4653B0(v3, v7);
}

uint64_t sub_18127D5AC(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v106 = *MEMORY[0x1895F89C0];
  int v10 = off_18C54FF20();
  if (v10 < 0x8000) {
    uint64_t v11 = 1LL;
  }
  else {
    uint64_t v11 = v10 >> 15;
  }
  if (*(_DWORD *)(a1 + 160)) {
    goto LABEL_5;
  }
  uint64_t v14 = *(uint64_t **)(a1 + 64);
  if (v14)
  {
    if (*(_DWORD *)(*v14 + 168))
    {
LABEL_5:
      sqlite3_log(27, "denying shm read from invalidated fd %d", *(_DWORD *)(a1 + 24));
      return 6922LL;
    }

    goto LABEL_9;
  }

  if (sqlite3_initialize()) {
    return 7LL;
  }
  BOOL v23 = (uint64_t *)sub_18126F0AC(24LL);
  if (!v23) {
    return 7LL;
  }
  int v24 = v23;
  *BOOL v23 = 0LL;
  v23[1] = 0LL;
  v23[2] = 0LL;
  uint64_t v25 = &qword_18C467E20[60];
  if (qword_18C468B90)
  {
    xmmword_18C465400(qword_18C468B90);
    uint64_t v25 = &qword_18C467E20[60];
  }

  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(v26 + 56);
  if (v27)
  {
    uint64_t v12 = 0LL;
LABEL_27:
    *int v24 = v27;
    ++*(_DWORD *)(v27 + 48);
    *(void *)(a1 + 64) = v24;
    uint64_t v28 = v25[370];
    if (v28) {
      xmmword_18C465410(v28);
    }
    uint64_t v29 = *(void *)(v27 + 8);
    if (v29)
    {
      xmmword_18C465400(v29);
      uint64_t v30 = *(void *)(v27 + 8);
      v24[1] = *(void *)(v27 + 56);
      *(void *)(v27 + 56) = v24;
      if (!v30) {
        goto LABEL_94;
      }
      goto LABEL_93;
    }

    v24[1] = *(void *)(v27 + 56);
    *(void *)(v27 + 56) = v24;
    goto LABEL_94;
  }

  int v31 = *(const char **)(a1 + 56);
  if (off_18C54FD40(*(unsigned int *)(a1 + 24), v96))
  {
    *(_DWORD *)(a1 + 32) = *__error();
    uint64_t v12 = 1802LL;
    goto LABEL_86;
  }

  if (*(_UNKNOWN **)a1 == &unk_189B6D220)
  {
    uint64_t v54 = *(void *)(a1 + 40);
    uint64_t v55 = *(uint64_t **)(v54 + 16);
    if (!v55 || (v56 = *v55, *(int *)v56 < 2) || !*(void *)(v56 + 104) || (int v31 = *(const char **)(v54 + 24)) == 0LL)
    {
      uint64_t v12 = sub_1812F2E28(46640);
      goto LABEL_86;
    }
  }

  int v53 = strlen(v31);
  if (sqlite3_initialize() || (v92 = v53 + 182LL, v94 = v53, (uint64_t v58 = (void *)sub_18126F0AC(v92)) == 0LL))
  {
LABEL_80:
    uint64_t v12 = 7LL;
    goto LABEL_86;
  }

  uint64_t v27 = (uint64_t)v58;
  bzero(v58, v92);
  *(void *)(v27 + 16) = v27 + 176;
  int v59 = v94 + 6;
  uint64_t v95 = (char *)(v27 + 176);
  sqlite3_snprintf(v59, (char *)(v27 + 176), "%s-shm", v31);
  *(_DWORD *)(v27 + 24) = -1;
  uint64_t v60 = *(void *)(a1 + 16);
  *(void *)(v60 + 56) = v27;
  *(void *)uint64_t v27 = v60;
  if ((_BYTE)word_18C465384)
  {
    uint64_t v61 = sqlite3_initialize();
    if ((_DWORD)v61)
    {
      *(void *)(v27 + 8) = 0LL;
      goto LABEL_80;
    }

    uint64_t v67 = qword_18C4653F0(v61);
    *(void *)(v27 + 8) = v67;
    if (!v67) {
      goto LABEL_80;
    }
    uint64_t v68 = sqlite3_initialize();
    if ((_DWORD)v68)
    {
      uint64_t v69 = 0LL;
LABEL_113:
      *(void *)(v27 + 8 * v69 + 64) = 0LL;
      goto LABEL_80;
    }

    uint64_t v70 = qword_18C4653F0(v68);
    *(void *)(v27 + 64) = v70;
    if (!v70) {
      goto LABEL_80;
    }
    uint64_t v71 = sqlite3_initialize();
    if ((_DWORD)v71)
    {
      uint64_t v69 = 1LL;
      goto LABEL_113;
    }

    uint64_t v72 = qword_18C4653F0(v71);
    *(void *)(v27 + 72) = v72;
    if (!v72) {
      goto LABEL_80;
    }
    uint64_t v73 = sqlite3_initialize();
    if ((_DWORD)v73)
    {
      uint64_t v69 = 2LL;
      goto LABEL_113;
    }

    uint64_t v74 = qword_18C4653F0(v73);
    *(void *)(v27 + 80) = v74;
    if (!v74) {
      goto LABEL_80;
    }
    uint64_t v75 = sqlite3_initialize();
    if ((_DWORD)v75)
    {
      uint64_t v69 = 3LL;
      goto LABEL_113;
    }

    uint64_t v76 = qword_18C4653F0(v75);
    *(void *)(v27 + 88) = v76;
    if (!v76) {
      goto LABEL_80;
    }
    uint64_t v77 = sqlite3_initialize();
    if ((_DWORD)v77)
    {
      uint64_t v69 = 4LL;
      goto LABEL_113;
    }

    uint64_t v78 = qword_18C4653F0(v77);
    *(void *)(v27 + 96) = v78;
    if (!v78) {
      goto LABEL_80;
    }
    uint64_t v79 = sqlite3_initialize();
    if ((_DWORD)v79)
    {
      uint64_t v69 = 5LL;
      goto LABEL_113;
    }

    uint64_t v80 = qword_18C4653F0(v79);
    *(void *)(v27 + 104) = v80;
    if (!v80) {
      goto LABEL_80;
    }
    uint64_t v81 = sqlite3_initialize();
    if ((_DWORD)v81)
    {
      uint64_t v69 = 6LL;
      goto LABEL_113;
    }

    uint64_t v82 = qword_18C4653F0(v81);
    *(void *)(v27 + 112) = v82;
    if (!v82) {
      goto LABEL_80;
    }
    uint64_t v83 = sqlite3_initialize();
    if ((_DWORD)v83)
    {
      uint64_t v69 = 7LL;
      goto LABEL_113;
    }

    uint64_t v84 = qword_18C4653F0(v83);
    *(void *)(v27 + 120) = v84;
    if (!v84) {
      goto LABEL_80;
    }
  }

  if (*(_BYTE *)(v26 + 33))
  {
    uint64_t v12 = 0LL;
LABEL_139:
    uint64_t v25 = qword_18C467E20 + 480;
    goto LABEL_27;
  }

  int v85 = *(_DWORD *)(a1 + 120) & 0x20000100;
  int v86 = dword_1813CD89C[((unint64_t)*(unsigned int *)(a1 + 124) >> 20) & 7];
  if (off_18C54FCF8(v95, 6LL) && (*__error() == 1 || *__error() == 13))
  {
    *(_DWORD *)(v27 + 24) = -1;
  }

  else
  {
    if (sqlite3_uri_BOOLean(*(const char **)(a1 + 56), "readonly_shm", 0))
    {
      uint64_t v87 = *(unsigned int *)(v27 + 24);
    }

    else
    {
      uint64_t v87 = sub_1812F2E3C(v95, v85 | 0x202u, v97 & 0x1FF, v86);
      *(_DWORD *)(v27 + 24) = v87;
    }

    if ((v87 & 0x80000000) == 0) {
      goto LABEL_150;
    }
  }

  uint64_t v87 = sub_1812F2E3C(v95, v85, v97 & 0x1FF, v86);
  *(_DWORD *)(v27 + 24) = v87;
  if ((v87 & 0x80000000) != 0)
  {
    if (*__error() == 1)
    {
      uint64_t v12 = 23LL;
      sub_1812F338C(23LL, "open", v95, 46711);
    }

    else
    {
      uint64_t v12 = sub_1812F2E28(46713);
      uint64_t v90 = __error();
      sub_1812F2D64(v12, "open", v95, *v90, 46713);
    }

    goto LABEL_86;
  }

  *(_BYTE *)(v27 + 34) = 1;
LABEL_150:
  if ((*(_WORD *)(a1 + 30) & 2) == 0)
  {
    uint64_t v88 = sub_1812F75E0(v87, *(_DWORD *)(a1 + 124) & 0x700000, 1);
    uint64_t v12 = v88;
    if ((_DWORD)v88 == 10)
    {
      *(_DWORD *)(a1 + 32) = *__error();
    }

    else if (!(_DWORD)v88)
    {
      uint64_t v87 = *(unsigned int *)(v27 + 24);
      goto LABEL_154;
    }

    off_18C54FCE0(*(_DWORD *)(v27 + 24));
    goto LABEL_86;
  }

LABEL_154:
  sub_1812F7548(v87, v98, v99);
  uint64_t v89 = sub_1812F7890(a1, v27);
  uint64_t v12 = v89;
  if ((_DWORD)v89 == 1288 || !(_DWORD)v89)
  {
    sub_1812F61EC(*(_DWORD *)(v27 + 24), (dispatch_source_s **)(v27 + 160), 8LL);
    goto LABEL_139;
  }

      uint64_t v81 = 40;
      do
      {
        uint64_t v82 = v72;
        v81 += 40;
        v72 >>= 4;
      }

      while (v82 > 0xFFF);
LABEL_161:
      if (v72 >= 0x10)
      {
        do
        {
          uint64_t v84 = v72;
          v81 += 10;
          v72 >>= 1;
        }

        while (v84 > 0x1F);
      }

      goto LABEL_163;
    case 34:
      uint64_t v30 = v93;
      if ((_DWORD)v93 == 2) {
        uint64_t v30 = 0;
      }
      if (v30 < 0) {
        return byte_18C46538A != 0;
      }
      uint64_t v1 = v30 != 0;
      byte_18C46538A = v30 != 0;
      return v1;
    default:
      return v1;
  }

    int v10 = 262LL;
    goto LABEL_14;
  }

  if (v89 || v90)
  {
    if (v7)
    {
      int v94 = v7;
      uint64_t v96 = v134;
      goto LABEL_166;
    }

    int v94 = 0LL;
    uint64_t v96 = v134;
    uint64_t v87 = v133;
    if (v91)
    {
LABEL_176:
      unsigned int v99 = v12;
      uint64_t v92 = v136;
      if (v96)
      {
        *(void *)(v94 + 24) = v12;
        *(void *)(v12 + 8) = v94;
        unsigned int v99 = v96;
      }
    }

    else
    {
LABEL_179:
      while (1)
      {
        uint64_t v100 = v94;
        int v94 = *(void *)(v94 + 8);
        if (!v94) {
          break;
        }
        if (*(_DWORD *)v94 > *(_DWORD *)v12)
        {
          *(void *)(v94 + 24) = v12;
          *(void *)(v12 + 8) = v94;
          goto LABEL_183;
        }
      }

      uint64_t v96 = v12;
LABEL_183:
      *(void *)(v12 + 16) = v100;
      *(void *)(v100 + 8) = v12;
      unsigned int v99 = v96;
      uint64_t v92 = v136;
      uint64_t v87 = v133;
    }

    uint64_t v5 = 0;
    uint64_t v134 = v99;
    uint64_t v135 = v89;
    goto LABEL_185;
  }

  if (sqlite3_initialize() || (int v94 = sub_18126F0AC(64LL)) == 0)
  {
    uint64_t v121 = 7LL;
LABEL_244:
    uint64_t v96 = v134;
    goto LABEL_245;
  }

  *(_OWORD *)(v94 + 32) = 0u;
  *(_OWORD *)(v94 + 48) = 0u;
  *(_OWORD *)int v94 = 0u;
  *(_OWORD *)(v94 + 16) = 0u;
  *(_DWORD *)int v94 = 3;
  while (1)
  {
    uint64_t v95 = v7;
    uint64_t v7 = *(void *)(v7 + 8);
    if (!v7) {
      break;
    }
    if (*(int *)v7 >= 4)
    {
      *(void *)(v7 + 24) = v94;
      *(void *)(v94 + 8) = v7;
      uint64_t v96 = v134;
      goto LABEL_165;
    }
  }

  uint64_t v96 = v94;
LABEL_165:
  *(void *)(v94 + 16) = v95;
  *(void *)(v95 + 8) = v94;
LABEL_166:
  __int16 v97 = v88 != 1 || v91;
  if ((v97 & 1) != 0 || *(_DWORD *)v94 == 5)
  {
    unsigned int v98 = !v91;
    if (v88 == 5) {
      unsigned int v98 = 1;
    }
    if ((v98 & 1) != 0 || *(_DWORD *)v94 != 1)
    {
      uint64_t v87 = v133;
      if (!v91) {
        goto LABEL_179;
      }
      goto LABEL_176;
    }
  }

  uint64_t v121 = 1LL;
LABEL_245:
  sub_18136EEAC(v12);
LABEL_246:
  sub_18136EEAC(v96);
  uint64_t v96 = 0LL;
LABEL_247:
  *a4 = v96;
  return v121;
}

LABEL_86:
  sub_1812F7A58(a1);
  unint64_t v57 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_91:
    (*v57)(v24);
    goto LABEL_92;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v24);
  --qword_18C468B10;
  off_18C4653A8(v24);
  int v24 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unint64_t v57 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
    goto LABEL_91;
  }

    *__n128 v22 = (v31 >> 18) & 7 | 0xF0;
    v22[1] = (v31 >> 12) & 0x3F | 0x80;
    v22[2] = (v31 >> 6) & 0x3F | 0x80;
    uint64_t v48 = v31 & 0x3F | 0x80;
    off_t v37 = v22 + 4;
    v22[3] = v48;
LABEL_87:
    uint64_t v49 = *v32;
    if (v49 < 0xC0)
    {
      if (!*v32) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v50 = byte_1813C6D06[v49 - 192];
      uint64_t v51 = v32 + 1;
      if (v51 == v9)
      {
        uint64_t v49 = byte_1813C6D06[v49 - 192];
        if (v50 >> 1 == 0x7FFF) {
          goto LABEL_106;
        }
      }

      else
      {
        while ((*v51 & 0xC0) == 0x80)
        {
          uint64_t v49 = *v51++ & 0x3F | (v50 << 6);
          uint64_t v50 = v49;
          if (v51 == v9)
          {
            if (v49 >> 1 != 0x7FFF) {
              goto LABEL_98;
            }
            goto LABEL_106;
          }
        }

        uint64_t v49 = v50;
        if (v50 >> 1 == 0x7FFF) {
          goto LABEL_106;
        }
      }

LABEL_92:
  uint64_t v30 = qword_18C468B90;
  if (qword_18C468B90) {
LABEL_93:
  }
    xmmword_18C465410(v30);
LABEL_94:
  if ((_DWORD)v12) {
    return v12;
  }
  uint64_t v14 = *(uint64_t **)(a1 + 64);
LABEL_9:
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + 8);
  if (v16) {
    xmmword_18C465400(v16);
  }
  if (*(_BYTE *)(v15 + 35))
  {
    unsigned int v17 = sub_1812F7890(a1, v15);
    if (v17) {
      goto LABEL_53;
    }
    *(_BYTE *)(v15 + 35) = 0;
  }

  int v18 = ((int)v11 + a2) / (int)v11 * v11;
  uint64_t v19 = *(const char **)(v15 + 16);
  *(_DWORD *)(v15 + 28) = a3;
  uint64_t v20 = *(unsigned int *)(v15 + 24);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_47;
  }
  if (off_18C54FD40(v20, v96))
  {
    int v21 = *__error();
    __int128 v104 = 0u;
    __int128 v105 = 0u;
    __int128 v102 = 0u;
    __int128 v103 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v21, __strerrbuf, 0x4FuLL);
    __n128 v22 = &byte_1813CEAEE;
    if (v19) {
      __n128 v22 = v19;
    }
    unsigned int v17 = 4874;
    sqlite3_log(4874, "os_unix.c:%d: (%d) %s(%s) - %s", 46858, v21, "unixShmMap-stat", v22, __strerrbuf);
    goto LABEL_53;
  }

  uint64_t v32 = v18 * a3;
  uint64_t v33 = v100;
  if (v100 >= v32) {
    goto LABEL_47;
  }
  if (!a4)
  {
LABEL_52:
    unsigned int v17 = 0;
    goto LABEL_53;
  }

  if (v100 < 0) {
    uint64_t v33 = v100 + 4095;
  }
  uint64_t v34 = (uint64_t)(int)(v32 + ((int)v32 < 0 ? 0xFFF : 0)) >> 12;
  unint64_t v35 = (char *)(int)(v33 >> 12);
  if ((uint64_t)v35 < v34)
  {
    uint64_t v91 = v34;
    do
    {
      int v36 = *(_DWORD *)(v15 + 24);
      uint64_t v93 = v35;
      off_t v37 = ((_DWORD)v35 << 12) | 0xFFF;
      while (1)
      {
        int v38 = off_18C54FDE8(v36, &byte_1813CEAEE, 1uLL, v37);
        if ((v38 & 0x80000000) == 0) {
          break;
        }
        if (*__error() != 4)
        {
          if (*__error() == 28) {
            unsigned int v17 = 13;
          }
          else {
            unsigned int v17 = 4874;
          }
          goto LABEL_103;
        }
      }

      if (v38 != 1)
      {
        unsigned int v17 = 4874;
LABEL_103:
        int v62 = *__error();
        __int128 v104 = 0u;
        __int128 v105 = 0u;
        __int128 v102 = 0u;
        __int128 v103 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v62, __strerrbuf, 0x4FuLL);
        int v63 = &byte_1813CEAEE;
        if (v19) {
          int v63 = v19;
        }
        sqlite3_log(v17, "os_unix.c:%d: (%d) %s(%s) - %s", 46886, v62, "unixShmMap-write", v63, __strerrbuf);
        goto LABEL_53;
      }

      unint64_t v35 = v93 + 1;
    }

    while ((uint64_t)(v93 + 1) < v91);
  }

  uint64_t v61 = *((unsigned __int8 *)v28 + 63);
  if (v61 == 1)
  {
    int v62 = "virtual tables may not be indexed";
    goto LABEL_96;
  }

  if (v61 == 2)
  {
    int v62 = "views may not be indexed";
LABEL_96:
    sub_1812DC47C((uint64_t)a1, v62, a3, (uint64_t)a4, a5, a6, a7, a8, v227);
    goto LABEL_97;
  }

  uint64_t v238 = v31;
  unsigned int v231 = *(void *)(v14 + 32);
  uint64_t v234 = (unsigned __int8 **)(v231 + 32LL * v31);
  if (i)
  {
    uint64_t v27 = sub_1813146DC(v14, i);
    if (!*(_BYTE *)(v14 + 197) && sub_1812E2C64(v14, v27, *v234))
    {
      sub_1812DC47C((uint64_t)a1, "there is already a table named %s", v94, v95, v96, v97, v98, v99, (char)v27);
      goto LABEL_98;
    }

    if (sub_18130D838(v14, (unsigned __int8 *)v27, *v234))
    {
      if (a10)
      {
        sub_18128BBA8((uint64_t)a1, v238);
        sub_18131EB5C((uint64_t *)a1, v78, v79, v80, v81, v82, v83, v84);
      }

      else
      {
        sub_1812DC47C((uint64_t)a1, "index %s already exists", v72, v73, v74, v75, v76, v77, (char)v27);
      }

      goto LABEL_98;
    }
  }

  else
  {
    int v85 = v28[2];
    if (v85)
    {
      int v86 = 1;
      do
      {
        ++v86;
        int v85 = *(void *)(v85 + 40);
      }

      while (v85);
    }

    uint64_t v87 = (char *)sub_18127F588(v14, "sqlite_autoindex_%s_%d", a3, (uint64_t)a4, a5, a6, a7, a8, (char)v50);
    uint64_t v27 = v87;
    if (!v87) {
      goto LABEL_98;
    }
    if (!*((_BYTE *)a1 + 302))
    {
LABEL_122:
      uint64_t v88 = *v234;
      if ((_DWORD)v238 == 1) {
        uint64_t v89 = "sqlite_temp_master";
      }
      else {
        uint64_t v89 = "sqlite_master";
      }
      uint64_t v235 = *v234;
      uint64_t v90 = (_DWORD)v238 == 1 ? 3LL : 1LL;
      goto LABEL_130;
    }

    ++v87[7];
  }

  if (v52)
  {
    uint64_t v49 = v52[1];
    memcpy((void *)v49, v11, *(void *)(a1 + 200));
    (*(void (**)(uint64_t *))(a1 + 280))(v52);
    if ((_DWORD)v17 == 1) {
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(v49 + 24);
    }
    if (v10)
    {
      uint64_t v50 = *(uint64_t (**)(void, uint64_t, void, uint64_t))(a1 + 296);
      if (v50)
      {
        else {
          uint64_t v15 = 7LL;
        }
      }
    }

    sub_1812F9F44((uint64_t)v52);
  }

  return v15;
}

    BOOL v23 = (sqlite3_blob *)v90;
    *(_WORD *)(v90 + 8) = v43;
    *(void *)(v90 + 32) = a1;
    if (!*((_BYTE *)a1 + 111)) {
      sub_1812FA0B4((uint64_t)a1);
    }
    uint64_t v74 = v92;
    uint64_t v11 = v89;
    if (*((_BYTE *)a1 + 103)
      || (v75 = sub_1812DC84C(v90, v88, &v118, v18, v19, v20, v21, v22, v57, v58, v59), uint64_t v74 = v75, v93 > 0x30)
      || v75 != 17)
    {
      if (v74) {
        goto LABEL_121;
      }
LABEL_103:
      if (*((_BYTE *)a1 + 103))
      {
        uint64_t v74 = 0;
        if (v23) {
          goto LABEL_121;
        }
      }

      else
      {
        uint64_t v74 = 0;
        *ppBlob = v23;
      }

      goto LABEL_126;
    }

    ++v93;
    sub_1812DCA44(&v94);
    int v24 = 17;
    zDb = v87;
  }

  uint64_t v77 = sub_18127F588((uint64_t)a1, "cannot open %s column for writing", v28, v29, v30, v31, v32, v33, (char)v49);
LABEL_118:
  uint64_t v118 = v77;
  if (!*((_BYTE *)a1 + 111)) {
    sub_1812FA0B4((uint64_t)a1);
  }
  uint64_t v74 = 1;
LABEL_121:
  uint64_t v79 = *((void *)v23 + 3);
  if (v79)
  {
    if (*(_BYTE *)(v79 + 267)) {
      sub_18127A3A0(*((void ***)v23 + 3));
    }
    sub_1812CFA64(v79);
  }

  sub_1812F20DC(a1, v23);
LABEL_126:
  uint64_t v80 = v118;
  if (v118) {
    uint64_t v81 = "%s";
  }
  else {
    uint64_t v81 = 0LL;
  }
  sub_1812D50CC((uint64_t)a1, v74, v81, (uint64_t)v18, v19, v20, v21, v22, (char)v118);
  if (v80) {
    sub_1812F20DC(a1, v80);
  }
  sub_1812DCA44(&v94);
  if (v74 || *((_BYTE *)a1 + 103)) {
    uint64_t v82 = sub_1813037C4((uint64_t)a1, v74);
  }
  else {
    uint64_t v82 = 0;
  }
  uint64_t v83 = *((void *)a1 + 3);
  if (v83) {
    xmmword_18C465410(v83);
  }
  return v82;
}

  if ((_DWORD)v22) {
    goto LABEL_93;
  }
  uint64_t v47 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)(v19 + 34) = *(_OWORD *)v19;
  *(_OWORD *)(v19 + 50) = v47;
  *(_WORD *)(v19 + 66) = *(_WORD *)(v19 + 32);
  if (v20 > 1)
  {
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = sub_1812AFF08(v17, 0LL, 0);
    if (!(_DWORD)v16) {
      uint64_t v16 = sub_1812F19FC(v17);
    }
  }

      BOOL v44 = (v39 + 1);
      else {
        int v38 = 1;
      }
    }
  }

  while ((*(_BYTE *)(v5 + 1) & 0x10) != 0 && *(_BYTE *)(a1 + 54))
  {
    uint64_t v8 = *(unsigned int *)(v5 + 8);
    uint64_t v5 = v10 + 16 * v8;
    int v36 = *(_DWORD *)(v5 + 4);
    if (v36) {
      goto LABEL_83;
    }
  }

  if (!a4) {
    return 0LL;
  }
  uint64_t v45 = sub_18135A0F0((unsigned int *)a1, 8, 2, 0LL);
  unsigned __int16 v46 = sub_18135A0F0((unsigned int *)a1, 6, v34, (uint64_t)v33);
  uint64_t v47 = sub_18135A7CC((unsigned int *)a1, &v31[v54], a4);
  uint64_t v5 = 0LL;
  if (!*(_BYTE *)(a1 + 51) && v47)
  {
    uint64_t v48 = *(void *)(a1 + 8) + 16LL * v8;
    *(_DWORD *)(v48 + 8) = v45;
    *(_BYTE *)(v48 + 1) |= 0x10u;
    uint64_t v49 = *(void *)(a1 + 8) + 16LL * v46;
    uint64_t v50 = *(_BYTE *)(v49 + 1) | 1;
LABEL_104:
    *(_BYTE *)(v49 + 1) = v50;
    return v47;
  }

  return v5;
}

    int v38 = 97407;
LABEL_93:
    sub_1812CF36C(v38);
    return;
  }

  uint64_t v27 = *(void **)sqlite3_value_blob(a3[1]);
  *(void *)uint64_t v40 = v27;
  if (!v27
    || mincore(v27, 8uLL, v41)
    || (uint64_t v28 = (const void *)v27[1]) != 0LL && mincore(v28, 8uLL, v41)
    || (uint64_t v29 = (const void *)v27[2]) != 0LL && mincore(v29, 8uLL, v41)
    || (uint64_t v30 = (const void *)v27[3]) != 0LL && mincore(v30, 8uLL, v41)
    || (int v31 = (const void *)v27[4]) != 0LL && mincore(v31, 8uLL, v41)
    || (uint64_t v32 = (const void *)v27[5]) != 0LL && mincore(v32, 8uLL, v41)
    || (uint64_t v33 = (const void *)v27[6]) != 0LL && mincore(v33, 8uLL, v41))
  {
    __break(1u);
    return;
  }

  uint64_t v34 = sub_18126D2EC(v7, v9, v11, (uint64_t)v27);
  if (v34 == *(void *)v40)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368(*(void *)a1, "out of memory", -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      unint64_t v35 = *(void *)a1;
      if (*(void *)a1) {
        goto LABEL_96;
      }
    }

    else
    {
      sub_1812CF36C(97407);
    }

  if (!v29) {
    goto LABEL_101;
  }
  if (v34 == 7)
  {
    unint64_t v57 = *v29;
    if (!*v29)
    {
      LODWORD(v58) = 0;
      int v59 = "rebuild";
      goto LABEL_361;
    }

    if ((v57 & 0xFFFFFFDF) == 0x52)
    {
      uint64_t v58 = v29[1];
      if (!v29[1])
      {
        int v59 = "ebuild";
        goto LABEL_361;
      }

      if ((v58 & 0xFFFFFFDF) == 0x45)
      {
        uint64_t v58 = v29[2];
        if (!v29[2])
        {
          int v59 = "build";
          goto LABEL_361;
        }

        if ((v58 & 0xFFFFFFDF) == 0x42)
        {
          uint64_t v58 = v29[3];
          if (!v29[3])
          {
            int v59 = "uild";
            goto LABEL_361;
          }

          if ((v58 & 0xFFFFFFDF) == 0x55)
          {
            uint64_t v58 = v29[4];
            if (!v29[4])
            {
              int v59 = "ild";
              goto LABEL_361;
            }

            if ((v58 & 0xFFFFFFDF) == 0x49)
            {
              uint64_t v58 = v29[5];
              if (!v29[5])
              {
                int v59 = "ld";
                goto LABEL_361;
              }

              if ((v58 & 0xFFFFFFDF) == 0x4C)
              {
                uint64_t v58 = v29[6];
                if (!v29[6])
                {
                  int v59 = "d";
LABEL_361:
LABEL_362:
                  uint64_t v139 = sub_1813786AC(a1, 0);
                  if (v139) {
                    goto LABEL_428;
                  }
                  v214[0] = 0LL;
                  uint64_t v141 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s", *(const char **)(a1 + 440));
                  if (!v141) {
                    goto LABEL_374;
                  }
                  uint64_t v142 = sub_18126DFE0(*(void *)(a1 + 24), v141, 0xFFFFFFFFLL, 128LL, 0LL, v214, 0LL, v140);
                  LODWORD(v220[0]) = v142;
                  __int16 v143 = (void (**)(unsigned __int8 *))&off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v141);
                    --qword_18C468B10;
                    off_18C4653A8(v141);
                    uint64_t v141 = (unsigned __int8 *)xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70) {
                      goto LABEL_370;
                    }
                    __int16 v143 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
                  }

                  (*v143)(v141);
LABEL_370:
                  if (v142)
                  {
                    uint64_t v141 = 0LL;
                    int v144 = 0LL;
                    uint64_t v145 = 0LL;
                    uint64_t v146 = 0;
                    goto LABEL_375;
                  }

                  uint64_t v147 = *(_DWORD *)(a1 + 48);
                  if (!sqlite3_initialize())
                  {
                    uint64_t v151 = 12LL * v147 + 12;
                    uint64_t v152 = (unsigned __int8 *)sub_18126F0AC(v151);
                    if (v152)
                    {
                      uint64_t v141 = v152;
                      bzero(v152, v151);
                      uint64_t v153 = 4LL * *(int *)(a1 + 48) + 4;
                      int v144 = (uint64_t)&v141[v153];
                      uint64_t v145 = (uint64_t)&v141[v153 + v153];
                      if (sqlite3_step(v214[0]) == 100)
                      {
                        uint64_t v146 = 0;
                        while (1)
                        {
                          if (*(void *)(a1 + 88)) {
                            uint64_t v154 = sqlite3_column_int(v214[0], *(_DWORD *)(a1 + 48) + 1);
                          }
                          else {
                            uint64_t v154 = 0LL;
                          }
                          uint64_t v155 = sqlite3_column_int64(v214[0], 0);
                          uint64_t v156 = v155;
                          uint64_t v157 = *(void *)(a1 + 512);
                          if (v157 <= v155
                            && (v157 != v155 || *(_DWORD *)(a1 + 524))
                            && *(_DWORD *)(a1 + 520) == (_DWORD)v154
                            && *(_DWORD *)(a1 + 508) <= *(_DWORD *)(a1 + 504)
                            || (uint64_t v158 = sub_1813767BC(a1)) == 0)
                          {
                            uint64_t v158 = 0;
                            *(void *)(a1 + 512) = v156;
                            *(_DWORD *)(a1 + 520) = v154;
                            *(_DWORD *)(a1 + 524) = 0;
                          }

                          LODWORD(v220[0]) = v158;
                          bzero(v141, 4LL * *(int *)(a1 + 48) + 4);
                          if (!v158)
                          {
                            uint64_t v159 = 0LL;
                            while (v159 < *(int *)(a1 + 48))
                            {
                              if (*(_BYTE *)(*(void *)(a1 + 64) + v159))
                              {
                                ++v159;
                              }

                              else
                              {
                                uint64_t v160 = sqlite3_column_text(v214[0], (int)v159 + 1);
                                uint64_t v158 = sub_1813787D8(a1, v154, (uint64_t)v160, v159, &v141[4 * v159]);
                                *(_DWORD *)&v141[4 * *(int *)(a1 + 48)] += sqlite3_column_bytes(v214[0], ++v159);
                                if (v158) {
                                  break;
                                }
                              }
                            }

                            LODWORD(v220[0]) = v158;
                          }

                          if (*(_BYTE *)(a1 + 462))
                          {
                            sub_181375F44((uint64_t)v220, a1, (uint64_t)v141);
                            uint64_t v158 = (int)v220[0];
                          }

                          if (v158) {
                            break;
                          }
                          if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
                          {
                            uint64_t v161 = 0LL;
                            do
                              *(_DWORD *)(v144 + 4 * v161) += *(_DWORD *)&v141[4 * v161];
                            while (v161++ < *(int *)(a1 + 48));
                          }

                          ++v146;
                          if (sqlite3_step(v214[0]) != 100) {
                            goto LABEL_375;
                          }
                        }

                        sqlite3_finalize(v214[0]);
                        v214[0] = 0LL;
                      }

                      else
                      {
                        uint64_t v146 = 0;
                      }

            uint64_t v42 = 0LL;
            goto LABEL_111;
          }

          uint64_t v47 = (void *)a1;
          uint64_t v45 = 0;
LABEL_102:
          uint64_t v48 = sub_1813B1580(v47, v45);
LABEL_103:
          uint64_t v4 = v48;
LABEL_136:
          sub_1813AFB8C(a1);
          return v4;
        }
      }

      else
      {
        sub_1812CF36C(97220);
        int v65 = *a3;
        if (!*a3)
        {
          sub_1812CF36C(89717);
          goto LABEL_157;
        }
      }

      unint64_t v66 = *(_WORD *)(v65 + 20);
      if ((v66 & 0x24) != 0)
      {
        uint64_t v67 = *(void *)v65;
        goto LABEL_163;
      }

      if ((v66 & 8) != 0)
      {
        uint64_t v68 = *(double *)v65;
        if (*(double *)v65 >= -9.22337204e18)
        {
          if (v68 <= 9.22337204e18) {
            uint64_t v67 = (uint64_t)v68;
          }
          else {
            uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v67 = 0x8000000000000000LL;
        }

uint64_t sub_18127DFB0(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(uint64_t **)(a1 + 64);
  if (!v4) {
    return 5130LL;
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 5130LL;
  }
  int v8 = a2;
  int v10 = a3 + a2;
  int v11 = (1 << (a3 + a2)) + (-1 << a2);
  if (((a4 & 1) == 0 || ((unsigned __int16)v11 & (unsigned __int16)(*((_WORD *)v4 + 10) | *((_WORD *)v4 + 9))) == 0)
    && a4 != 10
    && (a4 != 6 || ((unsigned __int16)v11 & *((_WORD *)v4 + 9)) != 0))
  {
    return 0LL;
  }

  __int16 v29 = (1 << (a3 + a2)) + (-1 << a2);
  LODWORD(v14) = a2;
  if (a3 >= 1)
  {
    uint64_t v14 = a2;
    int v27 = a3 + a2;
    while (1)
    {
      uint64_t v15 = *(void *)(v5 + 64 + 8 * v14);
      if (a4 == 10)
      {
        if (v15)
        {
          uint64_t v16 = ((uint64_t (*)(void))*(&xmmword_18C465400 + 1))();
          if ((_DWORD)v16)
          {
            uint64_t v12 = v16;
            int v8 = a2;
            return v12;
          }
        }
      }

      else if (v15)
      {
        xmmword_18C465400(v15);
      }

      if (++v14 >= v10)
      {
        int v8 = a2;
        int v10 = v27;
        break;
      }
    }
  }

  uint64_t v17 = v5 + 128;
  if ((a4 & 1) == 0)
  {
    if ((a4 & 4) == 0)
    {
      if (a3 >= 1)
      {
        uint64_t v18 = v8;
        while (!*(_DWORD *)(v17 + 4 * v18))
        {
          if (++v18 >= v10) {
            goto LABEL_27;
          }
        }

LABEL_52:
        uint64_t v12 = 5LL;
        return v12;
      }

  if (!*(void *)v7)
  {
    int v6 = sub_1812FC960(v7);
    goto LABEL_21;
  }

    *((_WORD *)v10 + 26) = v18;
    *((_BYTE *)v10 + 62) = v14;
    *((_DWORD *)v10 + 12) |= 8 * v13;
    if (!a2) {
      return;
    }
    *((_BYTE *)a1 + 300) = *((_BYTE *)a2 + 24);
    uint64_t v32 = *a2;
    if ((int)v32 >= 1)
    {
      uint64_t v33 = (_WORD *)((char *)a2 + 25);
      while ((*v33 & 0x20) == 0)
      {
        v33 += 12;
        if (!--v32) {
          goto LABEL_48;
        }
      }

      uint64_t v34 = *((unsigned __int8 *)v33 - 1);
      unint64_t v35 = v34 == 3 || v34 == 0;
      int v36 = "LAST";
      if (v35) {
        int v36 = "FIRST";
      }
      sub_1812DC47C((uint64_t)a1, "unsupported use of NULLS %s", a3, a4, a5, a6, a7, a8, (char)v36);
    }

  if (v50)
  {
    uint64_t v45 = *(_DWORD *)(v15 + 144);
    if (*(_DWORD *)(v15 + 148) <= v45)
    {
      sub_18131044C(v15, 97LL, v51, v23, v50, (uint64_t)a6, a7, a8);
      if ((_DWORD)v23 == 1) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }

    *(_DWORD *)(v15 + 144) = v45 + 1;
    unsigned __int16 v46 = *(void *)(v15 + 136) + 40LL * v45;
    *(_DWORD *)unsigned __int16 v46 = 97;
    *(_DWORD *)(v46 + 4) = v51;
    *(_DWORD *)(v46 + 8) = v23;
    *(_DWORD *)(v46 + 12) = v50;
    *(void *)(v46 + 24) = 0LL;
    *(void *)(v46 + 32) = 0LL;
    *(void *)(v46 + 16) = 0LL;
  }

  if ((_DWORD)v23 == 1)
  {
LABEL_56:
    if (v51)
    {
      uint64_t v47 = *(unsigned __int8 *)(a1 + 31);
      if (v47 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v47 + 1;
        uint64_t v48 = (unsigned int *)(a1 + 4 * v47 + 224);
LABEL_62:
        int32x2_t *v48 = v51;
        return v51;
      }
    }

    return v51;
  }

  a3 = sub_18133E2C8((uint64_t *)a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v8, (uint64_t)"DELETE", v26, v27);
  uint64_t v42 = 0;
  int v8 = 0LL;
  a4 = 0LL;
  if (*v39 == 1)
  {
LABEL_57:
    goto LABEL_2;
  }

    if (a4 && v18)
    {
      *a4 = sqlite3_mprintf("table schemas do not match");
      int v8 = 17LL;
      goto LABEL_55;
    }

    if (v18) {
      int v8 = 17LL;
    }
    else {
      int v8 = v8;
    }
    if (v17 && !(_DWORD)v8)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 16);
      if ((int)v32 < 1)
      {
        uint64_t v33 = 0LL;
        goto LABEL_80;
      }

      uint64_t v33 = 0LL;
      uint64_t v34 = *(void *)(v15 + 8);
      unint64_t v35 = &byte_1813CEAEE;
      off_t v37 = *(void **)(v15 + 32);
      int v36 = *(unsigned __int8 **)(v15 + 40);
      while (1)
      {
        if (*v36++)
        {
          uint64_t v33 = sqlite3_mprintf( "%z%s%w.%w.%w=%w.%w.%w",  v33,  v35,  v10,  v34,  *v37,  a2,  v34,  *v37);
          if (!v33)
          {
LABEL_78:
            uint64_t v15 = v78;
LABEL_80:
            int v8 = sub_1812E919C(18, (uint64_t *)a1, v15, v10, (uint64_t)a2, (uint64_t)v33);
            if ((_DWORD)v8 || (int v8 = sub_1812E919C(9, (uint64_t *)a1, v78, (uint64_t)a2, v10, (uint64_t)v33), (_DWORD)v8))
            {
LABEL_82:
              if (v33)
              {
                uint64_t v39 = (void (**)(char *))&off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_88;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
                --qword_18C468B10;
                off_18C4653A8(v33);
                uint64_t v33 = (char *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v39 = (void (**)(char *))&xmmword_18C465410;
LABEL_88:
                  (*v39)(v33);
                }
              }

              goto LABEL_55;
            }

            uint64_t v40 = v78;
            size_t v41 = *(unsigned int *)(v78 + 16);
            uint64_t v42 = 0LL;
            uint64_t v43 = 0LL;
            BOOL v44 = *(void *)(a1 + 8);
            uint64_t v45 = *(void *)(v78 + 8);
            unsigned __int16 v46 = v41 - 1;
            uint64_t v47 = &byte_1813CEAEE;
            uint64_t v48 = 1;
            uint64_t v49 = *(void *)(v78 + 32);
            uint64_t v50 = *(void *)(v78 + 40);
            uint64_t v51 = "%z%s%w.%w.%w IS NOT %w.%w.%w";
            do
            {
              while (!*(_BYTE *)(v50 + v42))
              {
                uint64_t v72 = v46;
                uint64_t v73 = v49;
                uint64_t v52 = v45;
                int v53 = v44;
                uint64_t v54 = v51;
                uint64_t v43 = sqlite3_mprintf( v51,  v43,  v47,  v44,  v45,  *(void *)(v49 + 8 * v42),  a2,  v45,  *(void *)(v49 + 8 * v42));
                if (!v43) {
                  goto LABEL_109;
                }
                uint64_t v48 = 0;
                uint64_t v47 = " OR ";
                unsigned __int16 v46 = v72;
                uint64_t v49 = v73;
                uint64_t v55 = v72 == v42++;
                BOOL v44 = v53;
                uint64_t v45 = v52;
                uint64_t v51 = v54;
                if (v55) {
                  goto LABEL_101;
                }
              }

              ++v42;
            }

            while (v41 != v42);
            if ((v48 & 1) != 0) {
LABEL_99:
            }
              uint64_t v43 = sqlite3_mprintf("0");
            if (!v43)
            {
LABEL_109:
              int v8 = 7LL;
              goto LABEL_82;
            }

        uint64_t v23 = 7LL;
        goto LABEL_60;
      }

      int v24 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v24)(v22);
    goto LABEL_17;
  }

  uint64_t v17 = strlen(__s) & 0x3FFFFFFF;
  if (v17 != 12) {
    goto LABEL_10;
  }
  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t v19 = aSqliteStat1[i];
    int v20 = __s[i];
    if ((_DWORD)v19 == (_DWORD)v20) {
      break;
    }
    if (byte_1813C6343[v19] != byte_1813C6343[v20])
    {
      uint64_t v17 = 12;
      goto LABEL_10;
    }

      unint64_t v35 = *(const char **)(a2 + 112);
      int v36 = strlen(v35);
      if ((v36 & 0x80000000) == 0)
      {
        if (v19) {
          goto LABEL_347;
        }
        off_t v37 = (v36 + 1);
        int v38 = (int)v204;
        uint64_t v39 = (int)v204 + v37;
        if (v39 <= SHIDWORD(v204))
        {
          uint64_t v43 = v203;
        }

        else
        {
          if (HIDWORD(v204)) {
            uint64_t v40 = SHIDWORD(v204);
          }
          else {
            uint64_t v40 = 128LL;
          }
          do
          {
            size_t v41 = v40;
            v40 *= 2LL;
          }

          while (v40 < v39);
          if (v41 > 1073741695 && (uint64_t v40 = 2147483391LL, v39 > 2147483391)
            || (uint64_t v42 = v203, sqlite3_initialize())
            || (uint64_t v43 = sub_18127D33C(v42, v40)) == 0)
          {
            uint64_t v207 = 7;
            goto LABEL_347;
          }

          __int128 v203 = v43;
          HIDWORD(v204) = v40;
          int v38 = (int)v204;
        }

        memcpy((void *)(v43 + v38), v35, v37);
        uint64_t v19 = 0;
        LODWORD(v204) = v204 + v37;
      }

      goto LABEL_65;
    }

    uint64_t v19 = 0;
LABEL_65:
    if (!v8 || v19)
    {
LABEL_70:
      if (v19) {
        goto LABEL_347;
      }
LABEL_71:
      uint64_t v45 = v204;
      unsigned __int16 v46 = HIDWORD(v204);
      uint64_t v47 = *(_DWORD *)(a2 + 124);
      uint64_t v48 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          unsigned __int16 v46 = 128;
        }
        uint64_t v58 = v46;
        do
        {
          int v59 = v58;
          v58 *= 2LL;
        }

        while (v58 <= (int)v204);
        if (v59 > 1073741695)
        {
          uint64_t v58 = 2147483391LL;
        }

        uint64_t v60 = v203;
        if (sqlite3_initialize()) {
          goto LABEL_112;
        }
        uint64_t v49 = sub_18127D33C(v60, v58);
        if (!v49) {
          goto LABEL_112;
        }
        __int128 v203 = v49;
        HIDWORD(v204) = v58;
        uint64_t v45 = v204;
        uint64_t v48 = (int)v204;
      }

      else
      {
        uint64_t v49 = v203;
      }

      LODWORD(v204) = v45 + 1;
      *(_BYTE *)(v49 + v48) = v47;
      uint64_t v50 = *(_DWORD *)(a2 + 128);
      uint64_t v51 = v204;
      uint64_t v52 = HIDWORD(v204);
      int v53 = (int)v204;
      if ((int)v204 < SHIDWORD(v204))
      {
        uint64_t v54 = v203;
        goto LABEL_75;
      }

      if (!HIDWORD(v204)) {
        uint64_t v52 = 128;
      }
      uint64_t v79 = v52;
      do
      {
        uint64_t v80 = v79;
        v79 *= 2LL;
      }

      while (v79 <= (int)v204);
      if (v80 <= 1073741695 || (uint64_t v79 = 2147483391LL, (int)v204 <= 2147483390))
      {
        uint64_t v81 = v203;
        if (!sqlite3_initialize())
        {
          uint64_t v54 = sub_18127D33C(v81, v79);
          if (v54)
          {
            __int128 v203 = v54;
            HIDWORD(v204) = v79;
            uint64_t v51 = v204;
            int v53 = (int)v204;
LABEL_75:
            LODWORD(v204) = v51 + 1;
            *(_BYTE *)(v54 + v53) = v50;
            uint64_t v55 = HIDWORD(v205);
            if (SHIDWORD(v205) < 1) {
              goto LABEL_359;
            }
            uint64_t v56 = (int)v204;
            unint64_t v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            uint64_t v9 = v201;
            uint64_t v82 = __s1;
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204)) {
                uint64_t v83 = SHIDWORD(v204);
              }
              else {
                uint64_t v83 = 128LL;
              }
              do
              {
                uint64_t v84 = v83;
                v83 *= 2LL;
              }

              while (v83 < v57);
              goto LABEL_119;
            }

      if ((v36 & 7) != 0 && !*(_BYTE *)(v8 + 103) && !*(_BYTE *)(v8 + 104))
      {
        *(_BYTE *)(v8 + 103) = 1;
        ++*(_DWORD *)(v8 + 432);
        *(_WORD *)(v8 + 436) = 0;
        uint64_t v28 = *(void *)(v8 + 344);
        if (v28)
        {
          sub_1812DC47C(v28, "out of memory", a3, a4, a5, a6, a7, a8, v30);
          for (uint64_t i = *(void *)(v8 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }

      if (v33 && (*(_BYTE *)(v33 + HIDWORD(v35)) = 0, (_DWORD)v35) && (v36 & 0x400) == 0) {
        return sub_1812F24E0(&v32);
      }
      else {
        return (void *)v33;
      }
    case 0xF8:
      uint64_t v17 = *(void *)(a2 + 16);
      sqlite3_str_appendf((sqlite3_str *)&v32, "k(%d", *(unsigned __int16 *)(v17 + 6));
      if (*(_WORD *)(v17 + 6))
      {
        uint64_t v18 = 0LL;
        do
        {
          uint64_t v23 = *(const char ***)(v17 + 32 + 8 * v18);
          if (v23) {
            uint64_t v19 = *v23;
          }
          else {
            uint64_t v19 = &byte_1813CEAEE;
          }
          if (!strcmp(v19, "BINARY")) {
            int v20 = "B";
          }
          else {
            int v20 = v19;
          }
          if ((*(_BYTE *)(*(void *)(v17 + 24) + v18) & 1) != 0) {
            int v21 = "-";
          }
          else {
            int v21 = &byte_1813CEAEE;
          }
          if ((*(_BYTE *)(*(void *)(v17 + 24) + v18) & 2) != 0) {
            uint64_t v22 = "N.";
          }
          else {
            uint64_t v22 = &byte_1813CEAEE;
          }
          sqlite3_str_appendf((sqlite3_str *)&v32, ",%s%s%s", v21, v22, v20);
          ++v18;
        }

        while (v18 < *(unsigned __int16 *)(v17 + 6));
      }

      int v24 = HIDWORD(v35);
      if (HIDWORD(v35) + 1 >= v34)
      {
        sub_1812D3A10((uint64_t)&v32, ")", 1u);
      }

      else
      {
        ++HIDWORD(v35);
        *(_BYTE *)(v33 + v24) = 41;
      }

      int v8 = a1;
      goto LABEL_52;
    case 0xFB:
      uint64_t v9 = **(const char ***)(a2 + 16);
      if (!v9) {
        goto LABEL_52;
      }
      goto LABEL_49;
    case 0xFC:
      goto LABEL_49;
    case 0xFD:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%d");
      goto LABEL_52;
    case 0xFE:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%.18s-%s");
      goto LABEL_52;
    default:
      uint64_t v9 = *(const char **)(a2 + 16);
      if (!v9) {
        goto LABEL_52;
      }
      goto LABEL_49;
  }

  uint64_t v43 = *(unsigned __int16 *)(a1 + 86);
  if (*(unsigned __int16 *)(v41 + 24) - 1 == (_DWORD)v43)
  {
    unsigned __int16 v46 = (char *)(v44 + 1);
    uint64_t v45 = *v44;
    if (v45 > *(unsigned __int8 *)(v41 + 11))
    {
      if (*v46 < 0) {
        goto LABEL_59;
      }
      uint64_t v45 = ((v45 & 0x7F) << 7) + *v46;
      unsigned __int16 v46 = (char *)(v44 + 2);
    }

    uint64_t v47 = v11(v45, v46, v4);
    if (v47 <= 0 && !*((_BYTE *)v4 + 31))
    {
      uint64_t v13 = 0LL;
      *a3 = v47;
      return v13;
    }
  }

            uint64_t v32 = 0LL;
LABEL_53:
            v31 |= v32;
            if (++v30 >= v29) {
              goto LABEL_70;
            }
          }
        }
      }

      int v31 = 0LL;
LABEL_70:
      uint64_t v39 = (unsigned __int8 *)v77[6];
      if (!v39)
      {
        size_t v41 = 0LL;
        uint64_t v42 = (unsigned __int8 *)v77[8];
        if (!v42) {
          goto LABEL_99;
        }
        goto LABEL_87;
      }

      if (*v39 != 167 || (*((_DWORD *)v39 + 1) & 0x20) != 0) {
        break;
      }
      uint64_t v43 = *((_DWORD *)v39 + 11);
      if (a1[2] == v43)
      {
        size_t v41 = 1LL;
        goto LABEL_86;
      }

      BOOL v44 = a1[1];
      uint64_t v45 = 0LL;
      unsigned __int16 v46 = v44 - 1;
      while (v4[v45] != v43)
      {
        if (v46 == ++v45) {
          goto LABEL_85;
        }
      }

      size_t v41 = 1LL << (v45 + 1);
LABEL_86:
      uint64_t v42 = (unsigned __int8 *)v77[8];
      if (!v42) {
        goto LABEL_99;
      }
LABEL_87:
      if (*v42 == 167 && (*((_DWORD *)v42 + 1) & 0x20) == 0)
      {
        uint64_t v49 = *((_DWORD *)v42 + 11);
        if (a1[2] == v49)
        {
          uint64_t v48 = 1LL;
        }

        else
        {
          uint64_t v50 = a1[1];
          if ((int)v50 < 2)
          {
LABEL_99:
            uint64_t v48 = 0LL;
            goto LABEL_100;
          }

          uint64_t v51 = 0LL;
          uint64_t v52 = v50 - 1;
          while (v4[v51] != v49)
          {
            if (v52 == ++v51) {
              goto LABEL_99;
            }
          }

          uint64_t v48 = 1LL << (v51 + 1);
        }
      }

      else
      {
        if ((*((_DWORD *)v42 + 1) & 0x810000) != 0) {
          goto LABEL_99;
        }
        uint64_t v48 = sub_181332EB0(a1, v42);
      }

  int v8 = *a1;
  uint64_t v16 = v7;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
LABEL_53:
    sub_1813040AC(v8, v16);
    return;
  }

  *(void *)int v8 = v7;
  uint64_t v14 = 4;
LABEL_55:
  *(_WORD *)(v8 + 20) = v14;
}

      if (*(_BYTE *)(a2 + 23) == 74) {
        goto LABEL_53;
      }
      return (void *)sub_18135B6B0((uint64_t)v2, v5, v14);
    case 4:
    case 6:
    case 0xC:
    case 0xE:
    case 0x14:
    case 0x16:
    case 0x1C:
    case 0x1E:
      if ((~v4 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
      {
        if ((v4 & 1) != 0)
        {
          uint64_t v5 = 0LL;
          if ((v4 & 2) == 0) {
            goto LABEL_36;
          }
        }

        else
        {
          uint64_t result = (void *)sub_181303998((int *)a2, 1);
          uint64_t v5 = (unsigned __int8 *)result;
          LOWORD(v4) = *(_WORD *)(a2 + 20);
          if ((v4 & 2) == 0) {
            goto LABEL_36;
          }
        }
      }

      else
      {
        uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
        if ((v4 & 2) == 0) {
          goto LABEL_36;
        }
      }

      if (*(_BYTE *)(a2 + 22) == 1)
      {
        uint64_t v14 = *(_DWORD *)(a2 + 16);
        goto LABEL_53;
      }

    *(_DWORD *)(a2 + 4) = 1;
    return 0LL;
  }

  if (!*(void *)(a2 + 16))
  {
    uint64_t v25 = 0LL;
    *(_DWORD *)(a2 + 4) = 1;
    return v25;
  }

  LODWORD(v26) = *(_DWORD *)(a2 + 40);
  if ((int)v26 < 1)
  {
    int v27 = 0;
    uint64_t v25 = 0LL;
  }

  else
  {
    int v27 = 0;
    uint64_t v28 = 6LL;
    do
    {
      __int16 v29 = *(void *)(a2 + 8 * v28);
      uint64_t v30 = sub_1813934A4(a1, v29);
      v27 += *(_DWORD *)(v29 + 4);
      int v31 = v28 - 5;
      uint64_t v26 = *(int *)(a2 + 40);
      ++v28;
    }

    while (v31 < v26 && (_DWORD)v30 == 0);
    uint64_t v25 = v30;
    uint64_t v4 = *(_DWORD *)a2;
  }

  uint64_t v33 = *(void *)(a2 + 48);
  *(void *)(a2 + 24) = *(void *)(v33 + 24);
  if (v4 == 1)
  {
    if ((_DWORD)v26 == v27) {
LABEL_43:
    }
      sub_181392F34(a2);
  }

  else
  {
    if (v4 != 2)
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v33 + 4);
      if (!(_DWORD)v25) {
        goto LABEL_49;
      }
      return v25;
    }

    if (v27 >= 1) {
      goto LABEL_43;
    }
  }

  if (!(_DWORD)v25)
  {
LABEL_49:
    if (!*(_DWORD *)(a2 + 4)) {
      goto LABEL_53;
    }
    return 0LL;
  }

  return v25;
}

        int v8 = 0LL;
        uint64_t v12 = 267LL;
        goto LABEL_53;
      }

      uint64_t v19 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    (*v19)(v18);
    goto LABEL_22;
  }

  return v12;
}

LABEL_58:
      uint64_t v12 = v19;
      goto LABEL_59;
    }

    int v24 = *(_DWORD *)(v17 + 4LL * v8);
    if (v24 < 0) {
      goto LABEL_52;
    }
    if (!v24)
    {
      uint64_t v19 = sub_1812F7DF8(a1, 1, v8 + 120, a3);
      if ((_DWORD)v19) {
        goto LABEL_58;
      }
      int v24 = *(_DWORD *)(v17 + 4LL * v8);
    }

    uint64_t v12 = 0LL;
    *((_WORD *)v4 + 9) |= v29;
    *(_DWORD *)(v17 + 4LL * v8) = v24 + 1;
    goto LABEL_59;
  }

  if ((a4 & 4) != 0)
  {
    int v21 = *(_DWORD *)(v17 + 4LL * v8);
    if (v21 >= 2)
    {
      uint64_t v12 = 0LL;
      *(_DWORD *)(v17 + 4LL * v8) = v21 - 1;
      *((_WORD *)v4 + 9) &= ~v29;
      goto LABEL_59;
    }
  }

  uint64_t v22 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 56LL) + 24LL);
  if ((v22 & 0x80000000) != 0)
  {
    uint64_t v23 = a3;
  }

  else
  {
    int v31 = 2;
    uint64_t v23 = a3;
    v30[0] = v8 + 120;
    v30[1] = a3;
    if (sub_1812F3848(v22, (uint64_t)v30, a1) == -1)
    {
      if (*(_DWORD *)(a1 + 132)) {
        uint64_t v12 = 773LL;
      }
      else {
        uint64_t v12 = 5LL;
      }
      return v12;
    }
  }

  bzero((void *)(v17 + 4LL * v8), 4 * v23);
  uint64_t v12 = 0LL;
  *((_WORD *)v4 + 9) &= ~v29;
  *((_WORD *)v4 + 10) &= ~v29;
  return v12;
}

  if ((_DWORD)v9) {
    goto LABEL_46;
  }
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v6 + 288LL))();
  if ((_DWORD)v15)
  {
LABEL_24:
    uint64_t v9 = v15;
    goto LABEL_46;
  }

  uint64_t v30 = *(void *)(v49 + 16);
  if (*(_DWORD *)(v30 + 4) - 1 != v16)
  {
    int v31 = *(void *)(v49 + 8);
    *(void *)(v30 + 112) = v49;
    *(void *)(v30 + 72) = v6;
    *(void *)(v30 + 80) = v31;
    *(_DWORD *)(v30 + 4) = v19;
    if (v16) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = 100;
    }
    *(_BYTE *)(v30 + 9) = v32;
  }

  uint64_t v33 = sub_18130008C(v6, v16 + 1, &v43, &v42);
  if ((v43 - 1) <= 1u)
  {
    uint64_t v9 = sub_1812FBF50(86819);
    goto LABEL_68;
  }

  uint64_t v9 = v33;
  if (!(_DWORD)v33)
  {
    uint64_t v9 = sub_181300298(v6, v30, v43, v42, v20, 0);
    unint64_t v35 = *(void *)(v30 + 112);
    if ((*(_WORD *)(v35 + 52) & 0x20) != 0)
    {
      int v36 = *(void *)(v35 + 40);
      --*(_DWORD *)(v36 + 152);
      *(void *)(v35 + 32) = *(void *)(v36 + 168);
      *(void *)(v36 + 168) = v35;
      (*(void (**)(void, void, void))(**(void **)(v36 + 72) + 144LL))( *(void *)(v36 + 72),  *(void *)(v36 + 200) * (*(_DWORD *)(v35 + 48) - 1),  *(void *)(v35 + 8));
    }

    else
    {
      sub_1812F9F44(v35);
    }

    if ((_DWORD)v9) {
      goto LABEL_46;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v6 + 288LL))();
    if ((_DWORD)v15) {
      goto LABEL_24;
    }
    int v27 = v49;
    int v10 = *(void *)(v49 + 16);
    if (*(_DWORD *)(v10 + 4) - 1 == v16)
    {
      int v27 = *(void *)(v10 + 112);
    }

    else
    {
      off_t v37 = *(void *)(v49 + 8);
      *(void *)(v10 + 112) = v49;
      *(void *)(v10 + 72) = v6;
      *(void *)(v10 + 80) = v37;
      *(_DWORD *)(v10 + 4) = v19;
      if (v16) {
        int v38 = 0;
      }
      else {
        int v38 = 100;
      }
      *(_BYTE *)(v10 + 9) = v38;
    }

    uint64_t v48 = v10;
    uint64_t v39 = *(_DWORD **)(v27 + 40);
    uint64_t v40 = *(_WORD *)(v27 + 52);
    if ((v40 & 4) != 0 && v39[8] >= *(_DWORD *)(v27 + 48))
    {
      if (!v39[32])
      {
        unsigned __int16 v46 = 0;
LABEL_38:
        sub_1812C0570(v6, v16 + 1, 1, 0, &v46);
        uint64_t v9 = v46;
        if (v46)
        {
          if (!v10) {
            goto LABEL_46;
          }
          goto LABEL_52;
        }

        uint64_t v26 = sub_1812D5F54(a1, 4, v16 + 1);
        unsigned __int16 v46 = v26;
        if ((_DWORD)v26)
        {
          uint64_t v9 = v26;
          if (!v10) {
            goto LABEL_46;
          }
LABEL_52:
          int v27 = *(void *)(v10 + 112);
          if ((*(_WORD *)(v27 + 52) & 0x20) != 0) {
            goto LABEL_69;
          }
          goto LABEL_53;
        }

          unint64_t v57 = v51[6];
          if ((v57 | 0x20) == 0x20)
          {
            LODWORD(v58) = 0;
            int v59 = v51;
            goto LABEL_80;
          }

          goto LABEL_60;
        }
      }
    }

    return 7LL;
  }

  while (*(void *)(v15 + 8) != a2)
  {
    uint64_t v15 = *(void *)(v15 + 16);
    if (!v15) {
      goto LABEL_4;
    }
  }

  *a5 = sub_18127F588( a1,  "vtable constructor called recursively: %s",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  *(void *)a2);
  return 6LL;
}

      sub_181309110((void *)v10, v36);
      goto LABEL_59;
    }

    size_t v41 = (int *)v20[4];
    uint64_t v70 = 0u;
    uint64_t v71 = 0u;
    uint64_t v42 = v20[5];
    uint64_t v67 = v9;
    uint64_t v68 = v42;
    uint64_t v69 = v41;
    LODWORD(v71) = 524417;
    uint64_t v43 = *(void *)v9;
    BOOL v44 = *(_BYTE *)(*(void *)v9 + 107LL);
    *(_BYTE *)(v43 + 107) = 1;
    uint64_t v45 = sub_1813205D4((uint64_t)&v67, (uint64_t)v35, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(v43 + 107) = v44;
    if (v45 || *v41 < 1)
    {
LABEL_66:
      uint64_t v26 = 0;
      unint64_t v66 = 0;
    }

    else
    {
      unsigned __int16 v46 = 0LL;
      uint64_t v47 = 2LL;
      while (sub_18131BA10(0LL, *(unsigned __int8 **)&v41[v47], v36, 0xFFFFFFFFLL) >= 2)
      {
        ++v46;
        v47 += 6LL;
        if (v46 >= *v41) {
          goto LABEL_66;
        }
      }

      uint64_t v26 = v46 + 1;
      unint64_t v66 = v46 + 1;
      uint64_t v9 = a1;
      if ((v46 & 0x80000000) != 0 || a1[302] <= 1u)
      {
LABEL_68:
        int v10 = v62;
        if (!v36) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }

      uint64_t v61 = (int *)v20[4];
      uint64_t v70 = 0u;
      uint64_t v71 = 0u;
      uint64_t v48 = v20[5];
      uint64_t v67 = a1;
      uint64_t v68 = v48;
      uint64_t v69 = v61;
      LODWORD(v71) = 524417;
      uint64_t v49 = *(void *)a1;
      uint64_t v50 = *(_BYTE *)(*(void *)a1 + 107LL);
      *(_BYTE *)(v49 + 107) = 1;
      uint64_t v51 = sub_1813205D4((uint64_t)&v67, v24, a3, a4, a5, a6, a7, a8);
      uint64_t v52 = v61;
      *(_BYTE *)(v49 + 107) = v50;
      if (!v51 && *v61 >= 1)
      {
        int v53 = 0LL;
        uint64_t v54 = 2LL;
        do
        {
          uint64_t v55 = sub_18131BA10(0LL, *(unsigned __int8 **)&v52[v54], (unsigned __int8 *)v24, 0xFFFFFFFFLL);
          uint64_t v52 = v61;
          if (v55 < 2) {
            break;
          }
          ++v53;
          v54 += 6LL;
        }

        while (v53 < *v61);
      }
    }

    uint64_t v9 = a1;
    goto LABEL_68;
  }

  __int16 v29 = 0LL;
  uint64_t v30 = *(void *)(v24 + 8);
  while (1)
  {
    if ((*(_WORD *)((_BYTE *)&v65[6 * v29 + 6] + 1) & 3) == 0)
    {
      int v31 = *(_BYTE **)&v65[6 * v29 + 4];
      if (v31)
      {
        if (v30)
        {
          for (uint64_t i = *(unsigned __int8 **)(v24 + 8); ; ++i)
          {
            uint64_t v33 = *v31;
            uint64_t v34 = *i;
            if ((_DWORD)v33 == (_DWORD)v34)
            {
              if (!*v31) {
                goto LABEL_54;
              }
            }

            else if (byte_1813C6343[v33] != byte_1813C6343[v34])
            {
              goto LABEL_45;
            }

            ++v31;
          }
        }

        goto LABEL_45;
      }

      if (!v30) {
        break;
      }
    }

    LODWORD(v21) = 0;
    goto LABEL_59;
  }

  uint64_t v43 = *(double *)v19;
  if (*(double *)v19 >= -9.22337204e18)
  {
    if (v43 <= 9.22337204e18) {
      *(void *)&int v21 = (uint64_t)v43;
    }
    else {
      LODWORD(v21) = -1;
    }
  }

  else
  {
    LODWORD(v21) = 0;
  }

  *(_BYTE *)(a3 + 196) = v24;
  *(_BYTE *)(a1 + 302) = 2;
  *(void *)a1 = a3;
  *(_WORD *)(a1 + 216) = 1;
  LODWORD(result) = sub_18126E93C(a1, a4);
  if (*(_BYTE *)(a3 + 103)) {
    uint64_t result = 7LL;
  }
  else {
    uint64_t result = result;
  }
  if (!(_DWORD)result)
  {
    if (*(void *)(a1 + 344) || *(void *)(a1 + 352) || *(void *)(a1 + 360)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = sub_1812FBF50(123585);
    }
  }

  *(_BYTE *)(a3 + 196) = 0;
  return result;
}

    ++v39;
  }

  if (byte_1813C6343[v41] == byte_1813C6343[v42]) {
    goto LABEL_58;
  }
  uint64_t v43 = "merge";
  for (iuint64_t i = v24; ; ++ii)
  {
    uint64_t v45 = *(unsigned __int8 *)v43;
    unsigned __int16 v46 = *ii;
    if ((_DWORD)v45 == (_DWORD)v46)
    {
      if (*v43) {
        goto LABEL_63;
      }
      if (v29)
      {
        uint64_t v91 = *(_WORD *)(v29 + 20);
        if ((v91 & 0x24) != 0)
        {
          uint64_t v92 = *(unsigned __int8 **)v29;
          goto LABEL_222;
        }

        if ((v91 & 8) != 0)
        {
          LODWORD(v94) = -1;
          else {
            LODWORD(v92) = 0;
          }
LABEL_222:
          uint64_t v79 = *(void *)(a1[5] + 8LL);
          sub_18139D2FC((_DWORD *)v79);
          uint64_t v95 = (char *)sub_18138B020(v79);
          *(void *)&uint64_t v328 = v95;
          if (!v95)
          {
LABEL_233:
            uint64_t v15 = *(unsigned int *)(v79 + 60);
            *(_DWORD *)(v79 + 60) = 0;
            goto LABEL_234;
          }

          uint64_t v96 = v95;
          __int16 v97 = *(_DWORD *)(*(void *)v79 + 148LL);
          unsigned int v98 = *(_DWORD **)(v79 + 144);
          if (v98)
          {
            sub_18138A584(v98);
            *(void *)(v79 + 144) = 0LL;
          }

          if ((v92 & 0x80000000) != 0)
          {
            unsigned int v99 = sub_1813A2C24(v79, v96);
            sub_18138A584(v96);
            *(void *)&uint64_t v328 = v99;
            if (!v99)
            {
              int v86 = 0LL;
LABEL_232:
              sub_18138A584(v86);
              goto LABEL_233;
            }

            LODWORD(v92) = -(int)v92;
            __int16 v97 = 1;
            uint64_t v96 = v99;
          }

          if (*((_DWORD *)v96 + 7))
          {
            uint64_t v100 = sub_1813A0B84((_DWORD *)v79, (int **)&v328, (int)v92, v97);
            uint64_t v96 = (char *)v328;
            if (v100) {
              sub_181389C04((unsigned __int8 *)v79, v328);
            }
          }

          int v86 = v96;
          goto LABEL_232;
        }

        if ((v91 & 0x12) != 0 && *(void *)(v29 + 8))
        {
          LODWORD(v92) = sub_181303DF0(v29);
          goto LABEL_222;
        }
      }

      else
      {
        sub_1812CF36C(89717);
      }

      LODWORD(v92) = 0;
      goto LABEL_222;
    }

    if (byte_1813C6343[v45] != byte_1813C6343[v46]) {
      break;
    }
LABEL_63:
    ++v43;
  }

  uint64_t v47 = "integrity-check";
  for (juint64_t j = v24; ; ++jj)
  {
    int v63 = *(unsigned __int8 *)v47;
    int v64 = *jj;
    if ((_DWORD)v63 == (_DWORD)v64) {
      break;
    }
    if (byte_1813C6343[v63] != byte_1813C6343[v64]) {
      goto LABEL_116;
    }
LABEL_106:
    ++v47;
  }

  if (*v47) {
    goto LABEL_106;
  }
  if (!v29)
  {
    sub_1812CF36C(89717);
LABEL_212:
    unint64_t v66 = 0;
    goto LABEL_271;
  }

  int v65 = *(_WORD *)(v29 + 20);
  if ((v65 & 0x24) != 0)
  {
    unint64_t v66 = *(_DWORD *)v29;
    goto LABEL_271;
  }

  if ((v65 & 8) == 0)
  {
    if ((v65 & 0x12) != 0 && *(void *)(v29 + 8))
    {
      unint64_t v66 = sub_181303DF0(v29);
      goto LABEL_271;
    }

    goto LABEL_212;
  }

  LODWORD(v122) = -1;
  else {
    unint64_t v66 = 0;
  }
LABEL_271:
  uint64_t v123 = (uint64_t *)a1[5];
  uint64_t v124 = *v123;
  uint64_t v328 = 0u;
  uint64_t v329 = 0u;
  uint64_t v330 = v124;
  uint64_t v125 = *(int *)(v124 + 24);
  if (sqlite3_initialize() || (uint64_t v126 = (void *)sub_18126F0AC(12 * v125)) == 0LL)
  {
    uint64_t v15 = 7LL;
    goto LABEL_234;
  }

  uint64_t v127 = v126;
  uint64_t v128 = *(int *)(v124 + 24);
  bzero(v126, v128 * 8);
  uint64_t v129 = *(_DWORD *)(v124 + 64);
  if (v129)
  {
    int v130 = 1;
    if (!v66 || v129 != 2)
    {
LABEL_329:
      uint64_t v148 = (_DWORD *)v123[1];
      uint64_t v149 = v329;
      int v301 = *(_DWORD *)(*(void *)v148 + 92LL);
      v332 = 0LL;
      uint64_t v333 = 0LL;
      uint64_t v150 = sub_18138B020((uint64_t)v148);
      if (!v150)
      {
        v324 = v148 + 15;
        goto LABEL_591;
      }

      v298 = v149;
      int v299 = v127;
      uint64_t v300 = v130;
      uint64_t v151 = v150[7];
      uint64_t v302 = v150;
      if (v151 >= 1)
      {
        uint64_t v152 = 0LL;
LABEL_334:
        uint64_t v310 = &v150[4 * v152 + 9];
        if (*v310 < 1) {
          goto LABEL_333;
        }
        int v303 = v152;
        uint64_t v153 = 0LL;
        uint64_t v309 = &v150[4 * v152 + 10];
        while (1)
        {
          uint64_t v155 = (unsigned int *)(*v309 + 56 * v153);
          uint64_t v156 = *(void *)v148;
          uint64_t v157 = *(_DWORD *)(*(void *)v148 + 128LL);
          uint64_t v334 = 0LL;
          uint64_t v158 = v155[1];
          uint64_t v318 = (int *)(v155 + 1);
          if (!v158) {
            goto LABEL_339;
          }
          uint64_t v313 = v153;
          int v306 = v155 + 2;
          uint64_t v319 = v155[2];
          uint64_t v159 = (unsigned __int8 *)sqlite3_mprintf( "SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d ORDER BY 1, 2",  *(void *)(v156 + 8),  *(void *)(v156 + 16),  *v155);
          uint64_t v161 = v159;
          int v316 = v155;
          if (v148[15])
          {
            uint64_t v307 = v157;
            uint64_t v304 = v156;
            if (!v159) {
              goto LABEL_337;
            }
          }

          else
          {
            if (!v159)
            {
              v148[15] = 7;
              goto LABEL_337;
            }

            uint64_t v307 = v157;
            uint64_t v304 = v156;
            v148[15] = sub_18126DFE0(**(void **)v148, v159, 0xFFFFFFFFLL, 133LL, 0LL, &v334, 0LL, v160);
          }

          uint64_t v162 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v161);
            --qword_18C468B10;
            off_18C4653A8(v161);
            uint64_t v161 = (unsigned __int8 *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_352;
            }
            uint64_t v162 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
          }

          (*v162)(v161);
LABEL_352:
          if (v148[15]) {
            goto LABEL_337;
          }
          uint64_t v163 = v158 - 1;
          while (1)
          {
            if (sqlite3_step(v334) != 100) {
              goto LABEL_337;
            }
            uint64_t v164 = sqlite3_column_blob(v334, 1);
            uint64_t v165 = sqlite3_column_bytes(v334, 1);
            uint64_t v166 = sqlite3_column_int(v334, 2);
            uint64_t v167 = sqlite3_column_int(v334, 3);
            if (v166 < *v318) {
              goto LABEL_356;
            }
            uint64_t v311 = v167;
            uint64_t v168 = sub_18138BCF4((uint64_t)v148, ((unint64_t)*v316 << 37) + v166);
            if (!v168) {
              goto LABEL_337;
            }
            uint64_t v169 = v168;
            uint64_t v312 = v163;
            uint64_t v317 = v166;
            uint64_t v170 = v168[2];
            int v323 = v168;
            if (v170 < 4) {
              break;
            }
            uint64_t v171 = v168[3];
            if (v171 > v170) {
              break;
            }
            if (v170 <= v171)
            {
              if (v165
                || (v170 == 4 ? (uint64_t v176 = v171 == 4) : (uint64_t v176 = 0),
                    v176 ? (uint64_t v177 = *(_DWORD *)(v304 + 128) == 5) : (uint64_t v177 = 0),
                    !v177))
              {
                v148[15] = 267;
              }

              goto LABEL_505;
            }

            uint64_t v172 = *(unsigned __int16 **)v168;
            uint64_t v173 = (char *)(*(void *)v168 + v171);
            uint64_t v174 = *v173;
            if (*v173 < 0)
            {
              uint64_t v175 = v173[1];
              if (v173[1] < 0)
              {
                uint64_t v178 = v173[2];
                if (v178 < 0)
                {
                  sub_18138BFCC(v173, (unint64_t *)v335);
                  uint64_t v169 = v323;
                  uint64_t v174 = (uint64_t)v335[0] & 0x7FFFFFFF;
                }

                else
                {
                  uint64_t v174 = v178 & 0x7F | (v174 << 14) & 0x1FC07F | ((v175 & 0x7F) << 7);
                }
              }

              else
              {
                uint64_t v174 = ((v174 & 0x7F) << 7) | v175;
              }
            }

            uint64_t v179 = __rev16(*v172);
            uint64_t v181 = (char *)v172 + v174;
            uint64_t v182 = *v181;
            if (*v181 < 0)
            {
              uint64_t v184 = v181[1];
              if (v181[1] < 0)
              {
                uint64_t v185 = v181[2];
                if (v185 < 0)
                {
                  uint64_t v183 = sub_18138BFCC(v181, (unint64_t *)v335);
                  uint64_t v182 = (uint64_t)v335[0] & 0x7FFFFFFF;
                }

                else
                {
                  uint64_t v182 = v185 & 0x7F | (v182 << 14) & 0x1FC07F | ((v184 & 0x7F) << 7);
                  uint64_t v183 = 3;
                }
              }

              else
              {
                uint64_t v182 = ((v182 & 0x7F) << 7) | v184;
                uint64_t v183 = 2;
              }
            }

            else
            {
              uint64_t v183 = 1;
            }

            char v186 = v182 - v165;
            if (v182 >= v165) {
              uint64_t v187 = v165;
            }
            else {
              uint64_t v187 = v182;
            }
            uint64_t v169 = v323;
            if (v188 < 0) {
LABEL_397:
            }
              v148[15] = 267;
            uint64_t v320 = 0;
            uint64_t v189 = 0;
            char v308 = 0;
            uint64_t v190 = 0LL;
            unsigned int v191 = 0;
            __dst = 0LL;
            uint64_t v322 = 0LL;
            uint64_t v192 = qword_18C467E20 + 480;
            while (!v148[15])
            {
              uint64_t v193 = *(void *)v169;
              uint64_t v194 = (char *)(*(void *)v169 + v171);
              uint64_t v195 = *v194;
              if (*v194 < 0)
              {
                __int128 v197 = v194[1];
                if (v194[1] < 0)
                {
                  uint64_t v198 = v194[2];
                  if (v198 < 0)
                  {
                    __int128 v199 = v189;
                    __int128 v200 = sub_18138BFCC(v194, (unint64_t *)v335);
                    uint64_t v189 = v199;
                    uint64_t v169 = v323;
                    __int128 v196 = v200;
                    uint64_t v195 = (uint64_t)v335[0] & 0x7FFFFFFF;
                  }

                  else
                  {
                    uint64_t v195 = v198 & 0x7F | (v195 << 14) & 0x1FC07F | ((v197 & 0x7F) << 7);
                    __int128 v196 = 3;
                  }
                }

                else
                {
                  uint64_t v195 = ((v195 & 0x7F) << 7) | v197;
                  __int128 v196 = 2;
                }
              }

              else
              {
                __int128 v196 = 1;
              }

              __int128 v201 = v195 + v191;
              __int128 v202 = v169[3];
              if (v195 + v191 >= v202)
              {
LABEL_461:
                v148[15] = 267;
                __int128 v204 = v190;
                uint64_t v192 = qword_18C467E20 + 480;
                goto LABEL_462;
              }

              __int128 v203 = (char *)(v193 + v201);
              __int128 v204 = *v203;
              if (v191)
              {
                if ((v204 & 0x80) != 0)
                {
                  uint64_t v207 = v203[1];
                  if (v203[1] < 0)
                  {
                    uint64_t v209 = v203[2];
                    if (v209 < 0)
                    {
                      v211 = v196;
                      int v212 = v189;
                      __int128 v205 = sub_18138BFCC(v203, (unint64_t *)v335);
                      uint64_t v189 = v212;
                      __int128 v196 = v211;
                      uint64_t v169 = v323;
                      __int128 v204 = (uint64_t)v335[0] & 0x7FFFFFFF;
                    }

                    else
                    {
                      __int128 v204 = v209 & 0x7F | ((_DWORD)v204 << 14) & 0x1FC07F | ((v207 & 0x7F) << 7);
                      __int128 v205 = 3;
                    }
                  }

                  else
                  {
                    __int128 v204 = ((v204 & 0x7F) << 7) | v207;
                    __int128 v205 = 2;
                  }
                }

                else
                {
                  __int128 v205 = 1;
                }

                uint64_t v213 = v205 + (uint64_t)v201;
                uint64_t v214 = v193 + v213;
                uint64_t v215 = *(unsigned __int8 *)(v193 + v213);
                if (*(char *)(v193 + v213) < 0)
                {
                  uint64_t v217 = *(unsigned __int8 *)(v214 + 1);
                  if (*(char *)(v214 + 1) < 0)
                  {
                    int16x8_t v218 = *(char *)(v214 + 2);
                    if (v218 < 0)
                    {
                      uint64_t v314 = v196;
                      int v219 = v189;
                      uint64_t v216 = sub_18138BFCC((char *)v214, (unint64_t *)v335);
                      uint64_t v189 = v219;
                      __int128 v196 = v314;
                      uint64_t v169 = v323;
                      uint64_t v215 = (uint64_t)v335[0] & 0x7FFFFFFF;
                    }

                    else
                    {
                      uint64_t v215 = v218 & 0x7F | (v215 << 14) & 0x1FC07F | ((v217 & 0x7F) << 7);
                      uint64_t v216 = 3;
                    }
                  }

                  else
                  {
                    uint64_t v215 = ((v215 & 0x7F) << 7) | v217;
                    uint64_t v216 = 2;
                  }
                }

                else
                {
                  uint64_t v216 = 1;
                }

                uint64_t v220 = v216 + v213;
                if ((int)v204 > (int)v190 || (int)(v220 + v215) > v202)
                {
                  v148[15] = 267;
                  __int128 v204 = v190;
                  uint64_t v192 = &qword_18C467E20[60];
                  if ((_DWORD)v190) {
                    goto LABEL_463;
                  }
                  goto LABEL_399;
                }

                if (!v215)
                {
                  uint64_t v192 = qword_18C467E20 + 480;
                  goto LABEL_450;
                }

                uint64_t v222 = v215 + v204;
                v315 = v196;
                uint64_t v305 = v189;
                if (v308) {
                  LODWORD(v223) = v308;
                }
                else {
                  LODWORD(v223) = 64;
                }
                uint64_t v223 = (int)v223;
                do
                {
                  char v224 = v223;
                  v223 *= 2LL;
                }

                while (v224 < v222);
                if (!sqlite3_initialize())
                {
                  uint64_t v225 = sub_18127D33C((uint64_t)__dst, v224);
                  if (v225)
                  {
                    char v308 = v224;
                    __dst = (char *)v225;
LABEL_449:
                    memcpy(&__dst[v204], (const void *)(v193 + v220), v215);
                    __int128 v204 = v215 + v204;
                    uint64_t v192 = qword_18C467E20 + 480;
                    uint64_t v169 = v323;
                    __int128 v196 = v315;
                    uint64_t v189 = v305;
                    if (!v148[15])
                    {
LABEL_450:
                      uint64_t v226 = v204 - v189;
                      else {
                        int v227 = v204;
                      }
                      if ((int)v227 < 1
                        || (v228 = v196, v229 = memcmp(__dst, v322, v227), v196 = v228, uint64_t v169 = v323, !v229))
                      {
                        uint64_t v229 = v226;
                      }

                      if (v229 <= 0)
                      {
                        v148[15] = 267;
                        if ((_DWORD)v204) {
                          goto LABEL_463;
                        }
                        goto LABEL_399;
                      }
                    }

        int v36 = v43;
        goto LABEL_60;
      }
    }

    else
    {
      uint64_t v42 = (unsigned __int8 *)sqlite3_mprintf( "SELECT length(data) FROM '%q'.'%q_node' WHERE nodeno = 1",  *(void *)(v21 + 48),  *(void *)(v21 + 56));
      if (v42)
      {
        pStmt[0] = 0LL;
        uint64_t v43 = sub_18126DFE0((uint64_t)v90, v42, 0xFFFFFFFFLL, 128LL, 0LL, pStmt, 0LL, v47);
        if (!v43)
        {
          if (sqlite3_step(pStmt[0]) == 100) {
            *(_DWORD *)(v21 + 32) = sqlite3_column_int(pStmt[0], 0);
          }
          uint64_t v43 = sqlite3_finalize(pStmt[0]);
          if (!v43)
          {
            if (*(int *)(v21 + 32) > 447)
            {
              int v36 = 0;
            }

            else
            {
              void *v7 = sqlite3_mprintf("undersize RTree blobs in %q_node", *(void *)(v21 + 56));
              int v36 = 267;
            }

            goto LABEL_61;
          }
        }

        goto LABEL_58;
      }
    }

    int v36 = 7;
    goto LABEL_60;
  }

uint64_t sub_18127E31C(uint64_t a1, _DWORD *a2)
{
  int v2 = **(__int128 ***)(a1 + 48);
  if (!v2) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(void *)v5)
    {
      if (*(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)v5 + 16LL) == sub_18126C830
        && *(_DWORD *)(v5 + 128) <= 3u)
      {
        if (*(_DWORD *)(v5 + 160)) {
          goto LABEL_40;
        }
        uint64_t v16 = *(void *)(v5 + 64);
        if (v16)
        {
          if (*(_DWORD *)(*(void *)v16 + 168LL)) {
            goto LABEL_40;
          }
        }
      }
    }
  }

  __int128 v18 = *v2;
  __int128 v19 = v2[1];
  __int128 v20 = v2[2];
  if (*(_BYTE *)(a1 + 63) != 2)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 120LL))(v5);
    uint64_t v5 = *(void *)(a1 + 8);
  }

  if (v5
    && *(void *)v5
    && *(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)v5 + 16LL) == sub_18126C830
    && *(_DWORD *)(v5 + 128) <= 3u
    && (*(_DWORD *)(v5 + 160) || (uint64_t v17 = *(void *)(v5 + 64)) != 0 && *(_DWORD *)(*(void *)v17 + 168LL)))
  {
LABEL_40:
    sqlite3_log(27, "denying shm read from invalidated fd %d", *(_DWORD *)(v5 + 24));
    return 6922LL;
  }

  else
  {
    uint64_t result = 1LL;
    if (!((unint64_t)v18 ^ *((void *)v2 + 6) | *((void *)&v18 + 1) ^ *((void *)v2 + 7) | (unint64_t)v19 ^ *((void *)v2 + 8) | *((void *)&v19 + 1) ^ *((void *)v2 + 9) | (unint64_t)v20 ^ *((void *)v2 + 10) | *((void *)&v20 + 1) ^ *((void *)v2 + 11)))
    {
      if (BYTE12(v18))
      {
        int v7 = v18 + DWORD2(v18) + DWORD1(v18) + v18;
        int v8 = HIDWORD(v18) + DWORD1(v18) + v18 + v7;
        int v9 = v7 + v19 + v8;
        int v10 = DWORD1(v19) + v8 + v9;
        if (__PAIR64__( DWORD1(v20)
             + HIDWORD(v19)
             + v10
             + v9
             + DWORD2(v19)
             + v10
             + v9
             + DWORD2(v19)
             + v10
             + (int)v20
             + HIDWORD(v19)
             + v10
             + v9
             + DWORD2(v19)
             + v10,
               v9 + DWORD2(v19) + v10 + (int)v20 + HIDWORD(v19) + v10 + v9 + DWORD2(v19) + v10) == *((void *)&v20 + 1))
        {
          BOOL v15 = *(void *)(a1 + 72) == (void)v18
             && *(void *)(a1 + 80) == *((void *)&v18 + 1)
             && *(void *)(a1 + 88) == (void)v19
             && *(void *)(a1 + 96) == *((void *)&v19 + 1)
             && *(void *)(a1 + 104) == (void)v20
             && *(void *)(a1 + 112) == *((void *)&v20 + 1);
          uint64_t result = 0LL;
          if (!v15)
          {
            *a2 = 1;
            *(_OWORD *)(a1 + 72) = v18;
            *(_OWORD *)(a1 + 88) = v19;
            *(_OWORD *)(a1 + 104) = v20;
            *(_DWORD *)(a1 + 56) = (*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00;
          }
        }
      }
    }
  }

  return result;
}

void sub_18127E590()
{
}

uint64_t sub_18127E598(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = ((unint64_t)(a2 + 4096) + 0xFFFFFFFF021LL) >> 12;
  if (*(_DWORD *)(a1 + 40) > (int)v6 && (v7 = *(void *)(*(void *)(a1 + 48) + 8LL * (int)v6), (uint64_t v17 = v7) != 0))
  {
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = sub_1812FC4E0(a1, ((unint64_t)(a2 + 4096) + 0xFFFFFFFF021LL) >> 12, &v17);
    uint64_t v7 = v17;
    if (!v17)
    {
      else {
        return result;
      }
    }
  }

  uint64_t v9 = 34LL;
  if ((_DWORD)v6)
  {
    uint64_t v9 = 0LL;
    int v10 = ((_DWORD)v6 << 12) - 34;
  }

  else
  {
    int v10 = 0;
  }

  int v18 = v10;
  if (!(_DWORD)result)
  {
    int v11 = (void *)(v7 + 4 * v9);
    int v12 = a2 - v10 - 1;
    if (a2 - v10 == 1) {
      bzero(v11, (unint64_t)(0x800000000000LL - (v9 << 34)) >> 32);
    }
    uint64_t v13 = v7 + 0x4000;
    if (*((_DWORD *)v11 + v12)) {
      sub_1812FC724(a1);
    }
    uint64_t v14 = (383 * (_WORD)a3) & 0x1FFF;
    if (*(_WORD *)(v13 + 2 * v14))
    {
      int v15 = ~a2 + v10;
      while (!__CFADD__(v15++, 1))
      {
        uint64_t v14 = ((_WORD)v14 + 1) & 0x1FFF;
      }

      return sub_1812FBF50(73164);
    }

    else
    {
LABEL_17:
      uint64_t result = 0LL;
      *((_DWORD *)v11 + v12) = a3;
      *(_WORD *)(v13 + 2 * v14) = a2 - v10;
    }
  }

  return result;
}

__n128 sub_18127E700(uint64_t a1)
{
  *(_DWORD *)(a1 + 72) = 3007000;
  uint64_t v1 = a1 + 72;
  *(_BYTE *)(a1 + 84) = 1;
  int v2 = *(_DWORD *)(a1 + 76);
  int v3 = v2 + *(_DWORD *)(a1 + 84);
  uint64_t v4 = **(void **)(a1 + 48);
  int v5 = v2 + *(_DWORD *)(a1 + 80) + 6014000;
  int v6 = v3 + 3007000 + v5;
  int v7 = v5 + *(_DWORD *)(a1 + 88) + v6;
  int v8 = *(_DWORD *)(a1 + 92) + v6 + v7;
  int v9 = v7 + *(_DWORD *)(a1 + 96) + v8;
  int v10 = *(_DWORD *)(a1 + 100) + v8 + v9;
  int v11 = v9 + *(_DWORD *)(a1 + 104) + v10;
  int v12 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 116) = v12 + v10 + v11;
  __int128 v13 = *(_OWORD *)(a1 + 72);
  __int128 v14 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 80) = v14;
  *(_OWORD *)(v4 + 48) = v13;
  if (*(_BYTE *)(a1 + 63) != 2) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8));
  }
  __n128 result = *(__n128 *)v1;
  __int128 v16 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + 32) = v16;
  *(__n128 *)uint64_t v4 = result;
  return result;
}

void sqlite3_log(int iErrCode, const char *zFormat, ...)
{
  uint64_t v2 = *(void *)&iErrCode;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (off_18C4654F8 || (dword_18C465544 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    int v10 = &v14;
    int v11 = 1536;
    uint64_t v12 = 0LL;
    __int16 v13 = 0;
    sqlite3_str_vappendf((sqlite3_str *)&v9, zFormat, va);
    if (v10)
    {
      *((_BYTE *)v10 + HIDWORD(v12)) = 0;
      if ((_DWORD)v12)
      {
        if ((v13 & 0x400) == 0) {
          sub_1812F24E0(&v9);
        }
      }
    }

    if (off_18C4654F8) {
      ((void (*)(uint64_t, uint64_t, __int128 *))off_18C4654F8)(qword_18C465500, v2, &v14);
    }
    if ((dword_18C465544 & 1) != 0)
    {
      if (qword_18C468CB8 != -1) {
        dispatch_once(&qword_18C468CB8, &unk_189B6CE88);
      }
      if ((void)v14 != 0x2068637573206F6ELL || *(void *)((char *)&v14 + 7) != 0x203A656C62617420LL)
      {
        BOOL v4 = (void)v14 == 0x6E656D6574617473LL && *((void *)&v14 + 1) == 0x7374726F62612074LL;
        if (!v4 || v15 != 544497952)
        {
          int v6 = (os_log_s *)qword_18C468C88;
          os_log_type_t v7 = OS_LOG_TYPE_ERROR;
          switch((char)v2)
          {
            case 0:
            case 17:
            case 19:
            case 27:
            case 100:
            case 101:
              return;
            case 1:
            case 2:
            case 7:
            case 10:
            case 11:
            case 13:
            case 15:
            case 21:
            case 26:
              goto LABEL_24;
            case 14:
              int v6 = (os_log_s *)qword_18C468C90;
              goto LABEL_24;
            default:
              os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
LABEL_24:
              if (os_log_type_enabled(v6, v7))
              {
                if ((dword_18C465544 & 0x20) != 0)
                {
                  int v8 = (os_log_s *)qword_18C468C88;
                  if (os_log_type_enabled((os_log_t)qword_18C468C88, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315138;
                    uint64_t v17 = &v14;
                    _os_log_impl(&dword_181266000, v8, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
                  }
                }

                if (os_log_type_enabled(v6, v7))
                {
                  *(_DWORD *)buf = 136315138;
                  uint64_t v17 = &v14;
                  _os_log_impl(&dword_181266000, v6, v7, "%s", buf, 0xCu);
                }
              }

              break;
          }
        }
      }
    }
  }

uint64_t sub_18127EA60(int a1, int a2)
{
  uint64_t result = sub_18126F0AC(192LL);
  if (result)
  {
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    if (a2 <= 16) {
      int v5 = 16;
    }
    else {
      int v5 = a2;
    }
    unsigned int v6 = (v5 + 7) & 0xFFFFFFF8;
    *(_DWORD *)uint64_t result = a1;
    *(_DWORD *)(result + 4) = v6;
    int v7 = v6 + a1;
    if (v7 <= 0x20000) {
      uint64_t v8 = 0x20000LL;
    }
    else {
      uint64_t v8 = v7;
    }
    unint64_t v9 = (*MEMORY[0x1895FD560] + v8) & ~*MEMORY[0x1895FD560];
    *(void *)(result + 8) = v9;
    unint64_t v10 = v9 / v7;
    *(_DWORD *)(result + 124) = v10;
    *(_DWORD *)(result + 16) = v10;
  }

  return result;
}

uint64_t sub_18127EB04(uint64_t result, int a2)
{
  if (a2 >= 0x3FFFFFFF) {
    unsigned int v2 = 0x3FFFFFFF;
  }
  else {
    unsigned int v2 = a2;
  }
  if (v2 <= *(_DWORD *)(result + 16)) {
    unsigned int v2 = *(_DWORD *)(result + 16);
  }
  int v3 = *(_DWORD *)(result + 124);
  int v4 = (int)(v2 - 1) / v3 + 1;
  uint64_t v5 = v3 * (uint64_t)v4;
  uint64_t v6 = v5 << 31 >> 31;
  if (v6 != v5 || v6 < 0)
  {
    do
    {
      do
      {
        v4 /= 2;
        uint64_t v7 = v3 * (uint64_t)v4;
        uint64_t v5 = v7 << 31 >> 31;
      }

      while (v5 != v7);
    }

    while (v5 < 0);
  }

  *(_DWORD *)(result + 128) = v4;
  *(_DWORD *)(result + 20) = v5;
  return sub_18135E1B8(result);
}

unint64_t sub_18127EB6C(int *a1, unsigned int a2, int a3)
{
  v50[4] = *MEMORY[0x1895F89C0];
  unsigned int v49 = 0;
  if (a3 == 1 && off_18C550648) {
    off_18C550648(a1);
  }
  uint64_t v6 = sub_18135E8AC((uint64_t)a1, a2, &v49);
  unint64_t v7 = v6;
  if (!a3 || v6) {
    goto LABEL_74;
  }
  if ((*((void *)a1 + 8) || *((void *)a1 + 10) || *((void *)a1 + 12) || *((void *)a1 + 14))
    && a1[7] >= a1[5])
  {
    int v8 = a1[12];
    uint64_t v9 = *(void *)&a1[4 * (((_BYTE)v8 - 1) & 3) + 16];
    if (!v9)
    {
      do
      {
        unsigned int v10 = v8++ & 3;
        uint64_t v9 = *(void *)&a1[4 * v10 + 16];
      }

      while (!v9);
      a1[12] = v8;
    }

    uint64_t v6 = sub_18135E8AC((uint64_t)a1, *(_DWORD *)(v9 - 24), 0LL);
    if (v6)
    {
      unint64_t v7 = v6;
      int v11 = (uint64_t *)(*((void *)a1 + 5) + 8LL * (*(_DWORD *)(v6 + 16) % a1[8]));
      uint64_t v12 = *v11;
      if (*v11 != v6)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(void *)(v12 + 24);
        }

        while (v12 != v6);
        int v11 = (uint64_t *)(v13 + 24);
      }

      *int v11 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0LL;
      --a1[7];
      goto LABEL_53;
    }
  }

  if (a3 != 2 && a1[7] >= a1[5])
  {
LABEL_21:
    unint64_t v7 = 0LL;
    goto LABEL_53;
  }

  uint64_t v6 = sub_1812FDBB8(64);
  unint64_t v7 = v6;
  if (!v6) {
    goto LABEL_53;
  }
  uint64_t v14 = 0LL;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v50[0] = a1 + 42;
  v50[1] = a1 + 34;
  uint64_t v48 = (uint64_t *)(a1 + 34);
  v50[2] = a1 + 38;
  v50[3] = 0LL;
  do
  {
    __int128 v16 = (uint64_t *)v50[v14];
    if (v16)
    {
      uint64_t v15 = *v16;
      goto LABEL_25;
    }

    uint64_t v6 = sub_18126F0AC(40LL);
    uint64_t v15 = v6;
    if (!v6) {
      goto LABEL_25;
    }
    *(void *)(v6 + 32) = 0LL;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    uint64_t v17 = 8LL * a1[31];
    uint64_t v18 = (void *)sub_18126F0AC(v17);
    if (v18)
    {
      __int128 v19 = v18;
      bzero(v18, v17);
      *(void *)(v15 + 16) = v19;
      uint64_t v6 = vm_allocate(*MEMORY[0x1895FBBE0], (vm_address_t *)(v15 + 24), *((void *)a1 + 1), 1040187395);
      if (!(_DWORD)v6)
      {
        *(_BYTE *)(v15 + 32) = 2;
        uint64_t v23 = *v48;
        if (*v48)
        {
          *(void *)(v23 + 8) = v15;
          *(void *)uint64_t v15 = v23;
        }

        else
        {
          *((void *)a1 + 18) = v15;
        }

        *((void *)a1 + 17) = v15;
        ++a1[33];
        goto LABEL_25;
      }

      uint64_t v20 = *(void *)(v15 + 16);
      if (!v20) {
        goto LABEL_41;
      }
      int v21 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_39;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v20);
      --qword_18C468B10;
      off_18C4653A8(v20);
      uint64_t v20 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v21 = &xmmword_18C465410;
LABEL_39:
        (*v21)(v20);
      }
    }

    else
    {
      *(void *)(v15 + 16) = 0LL;
    }

LABEL_53:
  unsigned int v24 = a1[8];
  if (a1[7] >= v24)
  {
    unsigned int v25 = 2 * v24;
    unsigned int v26 = v25 <= 0x100 ? 256 : v25;
    uint64_t v6 = sub_18126F0AC(8LL * v26);
    if (v6)
    {
      uint64_t v27 = v6;
      bzero((void *)v6, 8LL * v26);
      uint64_t v28 = a1[8];
      if ((_DWORD)v28)
      {
        for (uint64_t i = 0LL; i != v28; ++i)
        {
          uint64_t v30 = *(void *)(*((void *)a1 + 5) + 8 * i);
          if (v30)
          {
            do
            {
              uint64_t v31 = *(void *)(v30 + 24);
              uint64_t v32 = 8LL * (*(_DWORD *)(v30 + 16) % v26);
              *(void *)(v30 + 24) = *(void *)(v27 + v32);
              *(void *)(v27 + v32) = v30;
              uint64_t v30 = v31;
            }

            while (v31);
          }
        }
      }

      uint64_t v33 = *((void *)a1 + 5);
      if (v33)
      {
        uint64_t v34 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_70;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v33);
        --qword_18C468B10;
        uint64_t v6 = off_18C4653A8(v33);
        uint64_t v33 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v34 = &xmmword_18C465410;
LABEL_70:
          uint64_t v6 = (*v34)(v33);
        }
      }

      *((void *)a1 + 5) = v27;
      a1[8] = v26;
    }
  }

  if (v7)
  {
    unsigned int v35 = a2 % a1[8];
    ++a1[7];
    *(_DWORD *)(v7 + 16) = a2;
    *(_BYTE *)(v7 + 33) = 4;
    *(void *)(v7 + 40) = 0LL;
    *(void *)(v7 + 48) = 0LL;
    bzero(*(void **)v7, *a1);
    bzero(*(void **)(v7 + 8), a1[1]);
    uint64_t v36 = *((void *)a1 + 5);
    uint64_t v37 = 8LL * v35;
    *(void *)(v7 + 24) = *(void *)(v36 + v37);
    *(void *)(v36 + v37) = v7;
  }

  if (v24)
  {
    unsigned int v24 = bswap32(*(_DWORD *)(*(void *)(v7 + 80) + 32LL));
    if (v24 > *(_DWORD *)(a1 + 64))
    {
      uint64_t v28 = sub_1812FBF50(83601);
LABEL_68:
      __int128 v16 = v28;
      goto LABEL_23;
    }

    uint64_t v28 = sub_1812FE760(a1, v24, &v37);
    if ((_DWORD)v28) {
      goto LABEL_68;
    }
    __int16 v29 = v37;
    uint64_t v30 = bswap32(*(_DWORD *)(*(void *)(v37 + 80) + 4LL));
    uint64_t v31 = *(_DWORD *)(a1 + 56) >> 2;
    if (v30 > v31 - 2)
    {
      uint64_t v28 = sub_1812FBF50(83612);
      goto LABEL_68;
    }

    if (v30 < v31 - 8)
    {
      uint64_t v28 = sub_1812ABDD4(*(void *)(v37 + 112));
      if (!(_DWORD)v28)
      {
        *(_DWORD *)(*(void *)(v29 + 80) + 4LL) = bswap32(v30 + 1);
        *(_DWORD *)(*(void *)(v29 + 80) + 4 * v30 + 8) = bswap32(v3);
        if (v6)
        {
          if ((*(_WORD *)(a1 + 40) & 4) == 0)
          {
            uint64_t v32 = *(void *)(v6 + 112);
            uint64_t v33 = *(void *)(v32 + 40);
            if (!*(_BYTE *)(v33 + 16))
            {
              uint64_t v34 = *(_WORD *)(v32 + 52);
              if ((v34 & 2) != 0 && !*(_DWORD *)(v33 + 128)) {
                *(_WORD *)(v32 + 52) = v34 & 0xFFEB | 0x10;
              }
            }
          }
        }

        uint64_t v28 = sub_1813098C0(a1, v3);
      }

      goto LABEL_68;
    }
  }

  if (v6 || (__int128 v16 = sub_1812FE760(a1, v3, &v36), v6 = v36, !(_DWORD)v16))
  {
    __int128 v16 = sub_1812ABDD4(*(void *)(v6 + 112));
    if (!(_DWORD)v16)
    {
      **(_DWORD **)(v6 + 80) = bswap32(v24);
      *(_DWORD *)(*(void *)(v6 + 80) + 4LL) = 0;
      *(_DWORD *)(*(void *)(v7 + 80) + 32LL) = bswap32(v3);
    }

    goto LABEL_24;
  }

  size_t v41 = strlen((const char *)v21);
  if ((int)sub_1812B8054(v21, v162, v41 & 0x3FFFFFFF, 1) <= 0)
  {
    uint64_t v45 = "subsec";
    for (uint64_t j = v21; ; ++j)
    {
      uint64_t v47 = *j;
      uint64_t v48 = *(unsigned __int8 *)v45;
      if ((_DWORD)v47 == (_DWORD)v48)
      {
        if (!*j)
        {
LABEL_76:
          *(_BYTE *)(a4 + 47) = 1;
          uint64_t v52 = a1[3];
          int v53 = *(void *)(v52 + 72);
          uint64_t v33 = (uint64_t *)(v52 + 72);
          uint64_t v32 = v53;
          if (v53) {
            goto LABEL_88;
          }
          uint64_t v54 = **(void **)(*a1 + 24LL);
          if (*(int *)v54 >= 2 && (uint64_t v55 = *(uint64_t (**)(void))(v54 + 136)) != 0LL)
          {
            uint64_t v56 = v55();
          }

          else
          {
            uint64_t v56 = (*(uint64_t (**)(uint64_t, _BYTE *))(v54 + 120))(v54, v161);
            char *v33 = (uint64_t)(*(double *)v161 * 86400000.0);
          }

          if (!v56)
          {
LABEL_87:
            uint64_t v32 = *v33;
            goto LABEL_88;
          }

    __int16 v29 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      unint64_t v7 = (void *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        __int16 v29 = &xmmword_18C465410;
        goto LABEL_58;
      }
    }

    else
    {
LABEL_58:
      (*v29)(v7);
    }
  }

  else
  {
    *a2 = v23;
  }

  return v10;
}

    int v11 = 1;
    goto LABEL_54;
  }

  if (a2 != 1 && *(int *)(v6 + 24) < 2)
  {
    int v11 = 1;
LABEL_31:
    unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
    if (v2 < 3)
    {
LABEL_32:
      if (v2 < 2) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }

  uint64_t v78 = v19;
  if (v10 == 2)
  {
    uint64_t v42 = *(unsigned int *)(a1 + 44);
    size_t v41 = *(unsigned int *)(a1 + 48);
    uint64_t v43 = *(unsigned int *)(v13 + 132);
    if ((_DWORD)v43) {
      goto LABEL_60;
    }
    uint64_t v44 = *(unsigned int *)(a1 + 32);
    uint64_t v45 = (uint64_t *)a1;
    uint64_t v46 = v13;
    uint64_t v47 = *(unsigned int *)(a1 + 44);
    uint64_t v48 = 1LL;
    goto LABEL_64;
  }

  if (v10 != 1)
  {
    uint64_t v42 = *(unsigned int *)(a1 + 60);
    size_t v41 = *(unsigned int *)(a1 + 64);
    if (*(_DWORD *)(v13 + 132))
    {
      uint64_t v43 = *(unsigned int *)(v13 + 136);
LABEL_60:
      unsigned int v49 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v49)
      {
        sub_18131044C(v14, 86LL, v43, 1LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v49 + 1;
        uint64_t v50 = *(void *)(v14 + 136) + 40LL * v49;
        *(_DWORD *)uint64_t v50 = 86;
        *(_DWORD *)(v50 + 4) = v43;
        *(_DWORD *)(v50 + 8) = 1;
        *(void *)(v50 + 12) = 0LL;
        *(void *)(v50 + 28) = 0LL;
        *(void *)(v50 + 20) = 0LL;
        *(_DWORD *)(v50 + 36) = 0;
      }

      goto LABEL_65;
    }

    uint64_t v44 = *(unsigned int *)(a1 + 32);
    uint64_t v45 = (uint64_t *)a1;
    uint64_t v46 = v13;
    uint64_t v47 = *(unsigned int *)(a1 + 60);
    uint64_t v48 = 0LL;
LABEL_64:
    sub_18133CBD4(v45, v46, v47, v48, v44, a6, a7, a8, a9);
    goto LABEL_65;
  }

  uint64_t v42 = *(unsigned int *)(a1 + 52);
  size_t v41 = *(unsigned int *)(a1 + 56);
  sub_18133A8DC(a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_65:
  uint64_t v51 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(a1 + 36) == v10)
  {
    if (*(_DWORD *)(v14 + 148) <= v51)
    {
      sub_18131044C(v14, 130LL, v42, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v51 + 1;
      uint64_t v52 = *(void *)(v14 + 136) + 40LL * v51;
      *(_DWORD *)uint64_t v52 = 130;
      *(_DWORD *)(v52 + 4) = v42;
      *(_OWORD *)(v52 + 8) = 0u;
      *(_OWORD *)(v52 + 24) = 0u;
    }

    uint64_t v51 = *(_DWORD *)(v14 + 144);
    if (v51 >= 1) {
      *(_WORD *)(*(void *)(v14 + 136) + 40LL * (v51 - 1) + 2) = 2;
    }
  }

  if (!v79)
  {
    int v53 = v51 + 1 + (v15 != 76);
    if (*(_DWORD *)(v14 + 148) <= v51)
    {
      sub_18131044C(v14, 39LL, v42, v53, 0LL, a6, a7, a8);
      if (v15 == 76) {
        goto LABEL_76;
      }
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v51 + 1;
      uint64_t v55 = *(void *)(v14 + 136) + 40LL * v51;
      *(_DWORD *)uint64_t v55 = 39;
      *(_DWORD *)(v55 + 4) = v42;
      *(_DWORD *)(v55 + 8) = v53;
      *(void *)(v55 + 12) = 0LL;
      *(void *)(v55 + 28) = 0LL;
      *(void *)(v55 + 20) = 0LL;
      *(_DWORD *)(v55 + 36) = 0;
      if (v15 == 76)
      {
LABEL_76:
        uint64_t v18 = 0LL;
        goto LABEL_106;
      }
    }

    uint64_t v61 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v61)
    {
      sub_18131044C(v14, 9LL, 0LL, v17, 0LL, a6, a7, a8);
      uint64_t v18 = 0LL;
      unint64_t v57 = *(int **)(v13 + 24);
      if (!v57) {
        goto LABEL_96;
      }
    }

    else
    {
      uint64_t v18 = 0LL;
      *(_DWORD *)(v14 + 144) = v61 + 1;
      int v62 = *(void *)(v14 + 136) + 40LL * v61;
      *(void *)int v62 = 9LL;
      *(_DWORD *)(v62 + 8) = v17;
      *(void *)(v62 + 12) = 0LL;
      *(void *)(v62 + 28) = 0LL;
      *(void *)(v62 + 20) = 0LL;
      *(_DWORD *)(v62 + 36) = 0;
      unint64_t v57 = *(int **)(v13 + 24);
      if (!v57) {
        goto LABEL_96;
      }
    }

      if (v30 != 150)
      {
        if (!v28[18] || v9 != 129 || v30 != 127 || a1[21]) {
          goto LABEL_35;
        }
LABEL_33:
        __int16 v29 = v28[17];
        goto LABEL_34;
      }

      v28[16] = v9;
      uint64_t v40 = *((unsigned __int8 *)a2 + 63);
      size_t v41 = v40 == 1;
      if (v40 == 1) {
        __int16 v29 = 1;
      }
      else {
        __int16 v29 = 2;
      }
      if (v41 && v9 != 127)
      {
        sub_1812DC47C( (uint64_t)a1,  "%s RETURNING is not available on virtual tables",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  (char)v27);
        __int16 v29 = 1;
      }

      v28[17] = v29;
LABEL_34:
      v26 |= v29;
LABEL_35:
      uint64_t v28 = (unsigned __int8 *)*((void *)v28 + 8);
      if (!v28)
      {
        a5 = v43;
        if (!v43) {
          goto LABEL_71;
        }
LABEL_70:
        *a5 = v26;
        goto LABEL_71;
      }
    }
  }

  if (v16 != v14)
  {
    uint64_t v23 = v16;
    do
    {
      unsigned int v24 = v23;
      uint64_t v23 = (unsigned __int8 *)*((void *)v23 + 8);
      if (v23) {
        unsigned int v25 = v23 == v14;
      }
      else {
        unsigned int v25 = 1;
      }
    }

    while (!v25);
    *((void *)v24 + 8) = 0LL;
    goto LABEL_29;
  }

  unsigned int v26 = 0;
  __int128 v16 = 0LL;
  if (a5) {
    goto LABEL_70;
  }
LABEL_71:
  if (v26) {
    return v16;
  }
  else {
    return 0LL;
  }
}

  uint64_t v28 = (*(_WORD *)(a2 + 20) & 0x12) == 0 || (*(_WORD *)(a2 + 20) & 0x1000) == 0;
  if (v28 || *(uint64_t (**)(uint64_t))(a2 + 48) != sub_181301F94)
  {
    __int16 v29 = v18;
    uint64_t v30 = v9;
    uint64_t v31 = 1;
    if (!sqlite3_initialize()) {
      goto LABEL_59;
    }
    goto LABEL_66;
  }

  __int16 v29 = v18;
  uint64_t v30 = v9;
  uint64_t v31 = 0;
  if (sqlite3_initialize()) {
    goto LABEL_66;
  }
LABEL_59:
  if (v31) {
    uint64_t v32 = v29 + 81;
  }
  else {
    uint64_t v32 = 80LL;
  }
  uint64_t v33 = sub_18126F0AC(v32);
  if (!v33)
  {
LABEL_66:
    sqlite3_result_error_nomem((sqlite3_context *)a1);
    return 0LL;
  }

  uint64_t v17 = v33;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  if ((v31 & 1) != 0)
  {
    uint64_t v34 = (_BYTE *)(v33 + 80);
    *(void *)(v33 + 16) = v33 + 80;
    memcpy((void *)(v33 + 80), v30, v11 + 1);
  }

  else
  {
    ++*((void *)v30 - 1);
    uint64_t v34 = v30;
    *(void *)(v33 + 16) = v30;
    *(_BYTE *)(v33 + 52) = 1;
  }

  *(_DWORD *)(v17 + 56) = 1;
  uint64_t v36 = sub_181358F20((unsigned int *)v17, 0);
  uint64_t v37 = *(unsigned __int8 *)(v17 + 51);
  if (*(_BYTE *)(v17 + 51)) {
    goto LABEL_88;
  }
  int v38 = v36 - 1;
  if (v36 < 1) {
    goto LABEL_88;
  }
  uint64_t v39 = (uint64_t)&v34[v36 - 1];
  do
  {
    size_t v41 = *(unsigned __int8 *)++v39;
    uint64_t v40 = v41;
    ++v38;
  }

  while (byte_1813CA934[v41]);
  if (!v40)
  {
LABEL_79:
    if (v38 > 0)
    {
      *(_DWORD *)(v17 + 60) = v11;
      *(_DWORD *)(v17 + 76) = v14 + 1;
      sqlite3_set_auxdata((sqlite3_context *)a1, v15 - 429938, (void *)v17, (void (__cdecl *)(void *))sub_181358E54);
      if (a1)
      {
        uint64_t v42 = *(void *)(*(void *)(a1 + 24) + 384LL);
        if (!v42) {
          return 0LL;
        }
        while (*(_DWORD *)(v42 + 4) != v15 - 429938 || v15 >= 429938 && *(_DWORD *)v42 != *(_DWORD *)(a1 + 32))
        {
          uint64_t v17 = 0LL;
          uint64_t v42 = *(void *)(v42 + 24);
          if (!v42) {
            return v17;
          }
        }

        return *(void *)(v42 + 8);
      }

      unsigned int v10 = 32615;
LABEL_10:
      sub_1812CF36C(v10 | 0x10000);
      return 0LL;
    }

      if (v14)
      {
        uint64_t v15 = v14;
        __int128 v16 = v2[3];
        if (v16 + (unint64_t)v14 >= v2[2])
        {
          uint64_t result = v2;
          uint64_t v13 = (const char *)v5;
LABEL_57:
          uint64_t result = (void *)sub_18135B8EC((uint64_t)result, v13, v14);
        }

        else
        {
          uint64_t result = memcpy((void *)(v2[1] + v16), v5, v14);
          v2[3] += v15;
        }
      }

      break;
    case 8:
    case 0xA:
    case 0x18:
    case 0x1A:
    case 0x20:
    case 0x22:
    case 0x24:
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x34:
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3C:
    case 0x3E:
      if ((v4 & 8) != 0)
      {
        unint64_t v7 = *(double *)a2;
      }

      else if ((v4 & 0x24) != 0)
      {
        unint64_t v7 = (double)*(uint64_t *)a2;
      }

      else if ((v4 & 0x12) != 0)
      {
        unint64_t v7 = sub_181303DB8(a2);
      }

      else
      {
        unint64_t v7 = 0.0;
      }

      return (void *)sub_18135BBCC(100, v2, "%!0.15g", *(void *)&v7);
    default:
      goto LABEL_8;
  }

  return result;
}

  if (v43 < 0) {
    goto LABEL_63;
  }
  __int16 v29 = a5[v43];
  if (v29)
  {
    uint64_t v30 = *(unsigned __int16 *)(v29 + 20);
    if ((~v30 & 0x202) != 0 || *(_BYTE *)(v29 + 22) != 1)
    {
      if ((v30 & 1) != 0) {
        __int16 v29 = 0LL;
      }
      else {
        __int16 v29 = sub_181303998((int *)v29, 1);
      }
    }

    else
    {
      __int16 v29 = *(void *)(v29 + 8);
    }
  }

  uint64_t v31 = sqlite3_mprintf("%s", (const char *)v29);
  *(void *)(a1 + 120) = v31;
  if (!v31) {
    return 7LL;
  }
  *(_DWORD *)(a1 + 128) = strlen(v31);
LABEL_63:
  if (v41 >= a4)
  {
    unsigned int v35 = 0;
    goto LABEL_72;
  }

  uint64_t v32 = a5[v41];
  if (!v32)
  {
    sub_1812CF36C(89717);
LABEL_70:
    LODWORD(v34) = 0;
    goto LABEL_71;
  }

  uint64_t v33 = *(_WORD *)(v32 + 20);
  if ((v33 & 0x24) == 0)
  {
    if ((v33 & 8) != 0)
    {
      uint64_t v39 = *(double *)v32;
      if (*(double *)v32 >= -9.22337204e18)
      {
        if (v39 <= 9.22337204e18) {
          *(void *)&uint64_t v34 = (uint64_t)v39;
        }
        else {
          LODWORD(v34) = -1;
        }
      }

      else
      {
        LODWORD(v34) = 0;
      }

      goto LABEL_71;
    }

    if ((v33 & 0x12) != 0 && *(void *)(v32 + 8))
    {
      LODWORD(v34) = sub_181303DF0(v32);
      goto LABEL_71;
    }

    goto LABEL_70;
  }

  uint64_t v34 = *(double *)v32;
LABEL_71:
  unsigned int v35 = LODWORD(v34) & ~(SLODWORD(v34) >> 31);
LABEL_72:
  *(_DWORD *)(a1 + 132) = v35;
  uint64_t v37 = *(char **)(a1 + 96);
  int v38 = *(unsigned int *)(a1 + 104);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(void *)(v17 + 80) = 0LL;
  uint64_t result = sub_181362778(v9, v35, 0, 0xFFFFFFFE, v37, v38, 0, v14, v17);
  if (!(_DWORD)result)
  {
    *(void *)(a1 + 24) = v40;
    uint64_t result = sub_181363C00(v9, (uint64_t *)v17, *(const void **)(a1 + 96), *(_DWORD *)(a1 + 104));
    if (!(_DWORD)result) {
      return sub_181361F20(a1);
    }
  }

  return result;
}

    uint64_t v46 = (char *)(v9 + v8);
    int v11 = *v46;
    if (*v46 < 0)
    {
      unsigned int v49 = v46[1];
      if (v46[1] < 0)
      {
        uint64_t v54 = v46[2];
        if (v54 < 0)
        {
          uint64_t v47 = sub_18138BFCC(v46, &v57);
          int v11 = v57 & 0x7FFFFFFF;
        }

        else
        {
          int v11 = v54 & 0x7F | (v11 << 14) & 0x1FC07F | ((v49 & 0x7F) << 7);
          uint64_t v47 = 3;
        }
      }

      else
      {
        int v11 = ((v11 & 0x7F) << 7) | v49;
        uint64_t v47 = 2;
      }
    }

    else
    {
      uint64_t v47 = 1;
    }

    v8 += v47;
    goto LABEL_78;
  }

  if (v8 != v28) {
    goto LABEL_53;
  }
LABEL_34:
  int v11 = 0;
LABEL_78:
  uint64_t v12 = 1;
LABEL_79:
  *(void *)(a2 + 32) = v8;
  if (v12) {
    goto LABEL_80;
  }
LABEL_47:
  uint64_t v42 = *(void *)(a2 + 32);
LABEL_48:
  uint64_t v43 = *v6;
  *(void *)(a2 + 32) = v42 + 1;
  uint64_t result = v43 + v42;
  uint64_t v44 = *(char *)(v43 + v42);
  if ((v44 & 0x80000000) != 0)
  {
    *(void *)(a2 + 32) = v42;
    uint64_t v44 = *(unsigned __int8 *)result;
    if (*(char *)result < 0)
    {
      uint64_t v51 = *(unsigned __int8 *)(result + 1);
      if (*(char *)(result + 1) < 0)
      {
        uint64_t v55 = *(char *)(result + 2);
        if (v55 < 0)
        {
          uint64_t result = sub_18138BFCC((char *)result, &v57);
          uint64_t v44 = v57 & 0x7FFFFFFF;
          uint64_t v48 = result;
        }

        else
        {
          uint64_t v44 = v55 & 0x7F | (v44 << 14) & 0x1FC07F | ((v51 & 0x7F) << 7);
          uint64_t v48 = 3LL;
        }
      }

      else
      {
        uint64_t v44 = ((v44 & 0x7F) << 7) | v51;
        uint64_t v48 = 2LL;
      }
    }

    else
    {
      uint64_t v48 = 1LL;
    }

    *(void *)(a2 + 32) = v48 + v42;
  }

  else
  {
    uint64_t v44 = v44;
  }

  *(_BYTE *)(a2 + 132) = v44 & 1;
  *(_DWORD *)(a2 + 128) = v44 >> 1;
  return result;
}

      sub_181359E08(a1 + 48);
      *(_DWORD *)(a1 + 8) = 0;
      *int v11 = 0LL;
      *(_BYTE *)(a1 + 24) = 0;
      uint64_t v18 = 7LL;
LABEL_74:
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      return v18;
    }

    sub_1813B773C(a1 + 48, 0LL, 0);
  }

  if (a2 != 3)
  {
    int v38 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v39 = v38;
    goto LABEL_83;
  }

  uint64_t v51 = 0LL;
  unsigned int v35 = a5[1];
  if (!v35) {
    return 0LL;
  }
  uint64_t v36 = *(unsigned __int16 *)(v35 + 20);
  if ((~v36 & 0x202) != 0 || *(_BYTE *)(v35 + 22) != 1)
  {
    if ((v36 & 1) != 0) {
      return 0LL;
    }
    uint64_t v37 = (char *)sub_181303998((int *)v35, 1);
  }

  else
  {
    uint64_t v37 = *(char **)(v35 + 8);
  }

  if (!v37) {
    return 0LL;
  }
  uint64_t v45 = a5[1];
  if (!v45)
  {
    sub_1812CF36C(91138);
LABEL_101:
    uint64_t v47 = 0;
    goto LABEL_102;
  }

  uint64_t v46 = *(_WORD *)(v45 + 20);
  if ((v46 & 2) != 0 && *(_BYTE *)(v45 + 22) == 1)
  {
    uint64_t v47 = *(_DWORD *)(v45 + 16);
    goto LABEL_102;
  }

  if ((v46 & 0x10) == 0)
  {
    if ((v46 & 1) == 0)
    {
      uint64_t v47 = sub_181303970(v45, 1);
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  uint64_t v47 = *(_DWORD *)(v45 + 16);
  if ((*(_WORD *)(v45 + 20) & 0x400) != 0) {
    v47 += *(_DWORD *)v45;
  }
LABEL_102:
  if (sqlite3_initialize())
  {
    *(void *)(a1 + 40) = 0LL;
    return 7LL;
  }

  uint64_t v48 = v47 + 1LL;
  unsigned int v49 = (void *)sub_18126F0AC(v48);
  *(void *)(a1 + 40) = v49;
  if (!v49) {
    return 7LL;
  }
  memcpy(v49, v37, v48);
  if (*v37 != 36
    || (uint64_t v39 = (unsigned __int8 *)sub_18135A250(a1 + 48, 0, (char *)(*(void *)(a1 + 40) + 1LL), 0LL, &v51),
        (uint64_t v37 = v51) != 0LL))
  {
    sqlite3_free(*(void **)(*(void *)a1 + 16LL));
    *(void *)(*(void *)a1 + 16LL) = sqlite3_mprintf("JSON path error near '%q'", v37);
    sub_1813B7678(a1);
    if (*(void *)(*(void *)a1 + 16LL)) {
      return 1LL;
    }
    else {
      return 7LL;
    }
  }

  if (!v39) {
    return 0LL;
  }
  int v38 = *(unsigned __int8 **)(a1 + 56);
LABEL_83:
  uint64_t v40 = (unint64_t)(v39 - v38) >> 4;
  *(_DWORD *)(a1 + 12) = v40;
  *(_DWORD *)(a1 + 16) = v40;
  size_t v41 = *v39;
  *(_BYTE *)(a1 + 24) = v41;
  if (v41 < 7)
  {
    uint64_t v18 = 0LL;
    *(_DWORD *)(a1 + 20) = v40 + 1;
  }

  else
  {
    *((_DWORD *)v39 + 2) = 0;
    uint64_t v42 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v42 + 1 + *((_DWORD *)v39 + 1);
    if (*(_BYTE *)(a1 + 25))
    {
      uint64_t v43 = *(void *)(a1 + 56);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(v43 + 16LL * *(unsigned int *)(*(void *)(a1 + 80) + 4 * v42));
      if (!(_DWORD)v42) {
        return 0LL;
      }
      uint64_t v44 = v42 - 1;
      if ((*(_BYTE *)(v43 + 16LL * v44 + 1) & 0x20) == 0) {
        return 0LL;
      }
      uint64_t v18 = 0LL;
      *(_DWORD *)int v11 = v44;
    }

    else
    {
      uint64_t v18 = 0LL;
      *(_DWORD *)int v11 = v42 + 1;
    }
  }

  return v18;
}

LABEL_74:
  if (a3 == 1 && off_18C550650) {
    off_18C550650(v6);
  }
  if (a1[30] < a2) {
    a1[30] = a2;
  }
  if (v7) {
    *(_BYTE *)(v7 + 32) = *(_BYTE *)(v7 + 32) & 0xFE | v49 & 1;
  }
  return v7;
}

          uint64_t v43 = strlen(v36);
          uint64_t v44 = v43 & 0x3FFFFFFF;
          if (sub_18126F280((unsigned __int8 *)v36, &v59) == (v43 & 0x3FFFFFFF) && v59 == 59)
          {
            uint64_t v45 = v6[6];
            if ((_DWORD)v45)
            {
              uint64_t v46 = *((void *)v6 + 1);
              if ((byte_1813C6558[*(unsigned __int8 *)(v46 + (v45 - 1))] & 0x46) != 0)
              {
                if ((int)v45 + 1 >= v6[4])
                {
                  sub_1812D3A10((uint64_t)v6, " ", 1u);
                }

                else
                {
                  v6[6] = v45 + 1;
                  *(_BYTE *)(v46 + v45) = 32;
                }
              }
            }

            if (v44)
            {
              uint64_t v50 = v6[6];
              if (v50 + v44 >= v6[4])
              {
                sub_1812D3A10((uint64_t)v6, v36, v44);
              }

              else
              {
                v6[6] = v50 + v44;
                memcpy((void *)(*((void *)v6 + 1) + v50), v36, v43 & 0x3FFFFFFF);
              }
            }
          }

          else
          {
            sqlite3_str_appendf((sqlite3_str *)v6, "%w", v36);
          }

          sub_1812F20DC(v55, v36);
        }

        else
        {
          if ((_DWORD)v21)
          {
            uint64_t v22 = *((void *)v6 + 1);
            if ((byte_1813C6558[*(unsigned __int8 *)(v22 + (v21 - 1))] & 0x46) != 0)
            {
              if ((int)v21 + 1 >= v6[4])
              {
                sub_1812D3A10((uint64_t)v6, " ", 1u);
              }

              else
              {
                v6[6] = v21 + 1;
                *(_BYTE *)(v22 + v21) = 32;
              }
            }
          }

          uint64_t v48 = v6[6];
          if (v48 + v17 >= v6[4])
          {
            sub_1812D3A10((uint64_t)v6, v15, v17);
          }

          else
          {
            v6[6] = v48 + v17;
            memcpy((void *)(*((void *)v6 + 1) + v48), v15, v17);
          }
        }

        if (v21 < v6[6])
        {
          do
          {
            *(_BYTE *)(*((void *)v6 + 1) + v21) = byte_1813C6343[*(unsigned __int8 *)(*((void *)v6 + 1) + v21)];
            ++v21;
          }

          while (v21 < v6[6]);
        }

        uint64_t v13 = 0;
        break;
      default:
LABEL_44:
        if ((byte_1813C6558[v10] & 0x46) != 0)
        {
          uint64_t v27 = v6[6];
          if ((_DWORD)v27)
          {
            uint64_t v28 = *((void *)v6 + 1);
            if ((byte_1813C6558[*(unsigned __int8 *)(v28 + (v27 - 1))] & 0x46) != 0)
            {
              if ((int)v27 + 1 >= v6[4])
              {
                sub_1812D3A10((uint64_t)v6, " ", 1u);
              }

              else
              {
                v6[6] = v27 + 1;
                *(_BYTE *)(v28 + v27) = 32;
              }
            }
          }
        }

        uint64_t v47 = v6[6];
        if (v47 + v17 >= v6[4])
        {
          sub_1812D3A10((uint64_t)v6, v15, v17);
        }

        else
        {
          v6[6] = v47 + v17;
          memcpy((void *)(*((void *)v6 + 1) + v47), v15, v17);
        }

        if (v47 < v6[6])
        {
          do
          {
            *(_BYTE *)(*((void *)v6 + 1) + v47) &= ~byte_1813C6558[*(unsigned __int8 *)(*((void *)v6 + 1) + v47)] | 0xDF;
            ++v47;
          }

          while (v47 < v6[6]);
        }

        break;
    }

    int v3 = v57;
LABEL_19:
    v11 += v17;
    uint64_t v15 = &v3[v11];
    unsigned int v10 = *v15;
  }

  while (*v15);
  if (v14 != 1) {
    goto LABEL_113;
  }
LABEL_115:
LABEL_128:
  unsigned int v2 = 0LL;
LABEL_129:
  *((void *)pStmt + 41) = v2;
  uint64_t v54 = *(void *)(*(void *)pStmt + 24LL);
  if (v54)
  {
    xmmword_18C465410(v54);
    return (const char *)*((void *)pStmt + 41);
  }

  return v2;
}

          uint64_t v46 = a9;
          if (!a9)
          {
LABEL_76:
            sqlite3_finalize(pStmt);
            return v23;
          }

  uint64_t v55 = 0;
  *(_DWORD *)(a2 + 4) = a5;
  if ((v53 & 0xFFFFFFFB) == 1)
  {
    uint64_t v18 = sub_1813009A8(a2);
    if (!(_DWORD)v18) {
      goto LABEL_79;
    }
  }

  else
  {
    uint64_t v46 = bswap32(**(_DWORD **)(a2 + 80));
    if (!v46 || (sub_1812C0570(a1, v46, 4, a5, &v55), (uint64_t v18 = v55) == 0))
    {
LABEL_79:
      if (v53 == 1)
      {
        return 0LL;
      }

      else
      {
        uint64_t v47 = (*(uint64_t (**)(void))(*(void *)a1 + 288LL))();
        if ((_DWORD)v47)
        {
          return v47;
        }

        else
        {
          uint64_t v48 = v56;
          unsigned int v49 = *(void *)(v56 + 16);
          if (*(_DWORD *)(v49 + 4) == v26)
          {
            uint64_t v48 = *(void *)(v49 + 112);
          }

          else
          {
            uint64_t v50 = *(void *)(v56 + 8);
            *(void *)(v49 + 112) = v56;
            *(void *)(v49 + 72) = a1;
            *(void *)(v49 + 80) = v50;
            *(_DWORD *)(v49 + 4) = v26;
            if (v26 == 1) {
              uint64_t v51 = 100;
            }
            else {
              uint64_t v51 = 0;
            }
            *(_BYTE *)(v49 + 9) = v51;
          }

          uint64_t v52 = sub_1812ABDD4(v48);
          if ((_DWORD)v52)
          {
            uint64_t v18 = v52;
            sub_18130023C(v49);
          }

          else
          {
            uint64_t v18 = sub_181300B24(v49, v6, a5, v53);
            uint64_t v55 = v18;
            sub_18130023C(v49);
            if (!(_DWORD)v18)
            {
              sub_1812C0570(a1, a5, v53, v26, &v55);
              return v55;
            }
          }
        }
      }
    }
  }

  return v18;
}

        sub_1812AB614(v24, (char)v6, 1);
        goto LABEL_75;
      case 121:
        if (a1)
        {
          unsigned int v24 = sub_1812F2264(a1, 0x40uLL);
          if (!v24) {
            goto LABEL_100;
          }
        }

        else
        {
          unsigned int v24 = sub_18126F0AC(64LL);
          if (!v24) {
            goto LABEL_100;
          }
        }

        uint64_t v23 = 0LL;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)unsigned int v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(void *)(v24 + 24) = a1;
        *(_WORD *)(v24 + 20) = 1;
        goto LABEL_124;
      case 154:
        if (a1)
        {
          unsigned int v24 = sub_1812F2264(a1, 0x40uLL);
          if (!v24)
          {
LABEL_100:
            if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v52 = *(void *)(a1 + 344);
              if (v52)
              {
                sub_1812DC47C(v52, "out of memory", v25, v26, v27, v28, v29, v30, v62);
                for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  uint64_t i = *(void *)(i + 256);
                  if (!i) {
                    break;
                  }
                }
              }
            }

            if (v24)
            {
              if ((*(_WORD *)(v24 + 20) & 0x9000) != 0 || *(_DWORD *)(v24 + 32)) {
                sub_181303838(v24);
              }
              sub_1812F20DC(*(void **)(v24 + 24), (void *)v24);
            }

            return 7LL;
          }
        }

        else
        {
          unsigned int v24 = sub_18126F0AC(64LL);
          if (!v24) {
            goto LABEL_100;
          }
        }

        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)unsigned int v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(void *)(v24 + 24) = a1;
        uint64_t v39 = *((void *)a2 + 1);
        uint64_t v40 = strlen((const char *)(v39 + 2)) & 0x3FFFFFFF;
        size_t v41 = v40 - 1;
        if (!v40) {
          size_t v41 = 0;
        }
        uint64_t v42 = (v41 >> 1);
        uint64_t v43 = (char *)sub_1812F2264(a1, (v42 + 1));
        if (!v43) {
          goto LABEL_120;
        }
        if (v40 < 3)
        {
          uint64_t v51 = 0LL;
          goto LABEL_119;
        }

        uint64_t v44 = v40 - 2;
        uint64_t v45 = 2LL;
        if (v44 > 2) {
          uint64_t v45 = v40 - 2;
        }
        if (v45 < 0x3F) {
          goto LABEL_96;
        }
        uint64_t v46 = 2LL;
        if (v44 > 2) {
          uint64_t v46 = v40 - 2;
        }
        uint64_t v47 = v46 - 1;
        if ((unint64_t)v43 >= (v47 & 0xFFFFFFFFFFFFFFFELL) + v39 + 4
          || v39 + 2 >= (unint64_t)&v43[(v47 >> 1) + 1])
        {
          uint64_t v55 = 0LL;
          uint64_t v56 = ((v45 - 1) >> 1) + 1;
          unsigned int v49 = v56 & 0x7FFFFFFFFFFFFFE0LL;
          uint64_t v48 = 2 * (v56 & 0x7FFFFFFFFFFFFFE0LL);
          unint64_t v57 = (const char *)(v39 + 34);
          v58.i64[0] = 0x4040404040404040LL;
          v58.i64[1] = 0x4040404040404040LL;
          v59.i64[0] = 0x909090909090909LL;
          v59.i64[1] = 0x909090909090909LL;
          do
          {
            uint64_t v60 = v57 - 32;
            int v64 = vld2q_s8(v60);
            int v65 = vld2q_s8(v57);
            uint64_t v61 = (int8x16_t *)&v43[v55 & 0x7FFFFFFFFFFFFFE0LL];
            unsigned int *v61 = vsliq_n_s8( vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[1], v58))), v64.val[1]),  vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[0], v58))), v64.val[0]),  4uLL);
            v61[1] = vsliq_n_s8( vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[1], v58))), v65.val[1]),  vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[0], v58))), v65.val[0]),  4uLL);
            v55 += 32LL;
            v57 += 64;
          }

          while (v49 != v55);
          if (v56 == v49) {
            goto LABEL_99;
          }
        }

        else
        {
LABEL_96:
          uint64_t v48 = 0LL;
        }

        unsigned int v49 = ((v48 + 2) >> 1) - 1;
        uint64_t v50 = &v43[v48 >> 1];
        do
        {
          *v50++ = ((((char)(2 * *(_BYTE *)(v39 + v48 + 3)) >> 7) & 0xF9) + *(_BYTE *)(v39 + v48 + 3)) & 0xF | (16 * ((((char)(2 * *(_BYTE *)(v39 + v48 + 2)) >> 7) & 0xF9) + *(_BYTE *)(v39 + v48 + 2)));
          v48 += 2LL;
          LODWORD(v49) = v49 + 1;
        }

        while (v48 < v44);
LABEL_99:
        uint64_t v51 = v49 & 0x7FFFFFFF;
LABEL_119:
        v43[v51] = 0;
LABEL_120:
        sub_181269368(v24, v43, v42, 0, sub_1812E1FD0);
        goto LABEL_123;
      case 170:
        if (a1) {
          unsigned int v35 = sub_1812F2264(a1, 0x40uLL);
        }
        else {
          unsigned int v35 = sub_18126F0AC(64LL);
        }
        uint64_t v23 = 0LL;
        unsigned int v24 = v35;
        if (v35)
        {
          *(_OWORD *)(v35 + 32) = 0u;
          *(_OWORD *)(v35 + 48) = 0u;
          *(_OWORD *)unsigned int v35 = 0u;
          *(_OWORD *)(v35 + 16) = 0u;
          *(void *)(v35 + 24) = a1;
          *(_WORD *)(v35 + 20) = 4;
          *(void *)unsigned int v35 = *(_BYTE *)(*((void *)a2 + 1) + 4LL) == 0;
        }

        goto LABEL_124;
      default:
        goto LABEL_124;
    }
  }

  int v11 = (_BYTE *)*((void *)a2 + 1);
  uint64_t v12 = *v11;
  if (!*v11)
  {
    LOBYTE(v18) = 67;
    goto LABEL_43;
  }

  uint64_t v13 = 0;
  uint64_t v14 = v11 + 1;
  uint64_t v15 = 67LL;
  while (1)
  {
    uint64_t v13 = byte_1813C6343[v12] | (v13 << 8);
    uint64_t v18 = 66LL;
    if (v13 > 1668050785)
    {
      if (v13 == 1668050786 || v13 == 1952807028) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }

    if (v13 == 1651273570) {
      break;
    }
    if (v13 != 1667785074) {
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v17 = *v14++;
    uint64_t v12 = v17;
    uint64_t v15 = v18;
    if (!v17) {
      goto LABEL_43;
    }
  }

  uint64_t v18 = 65LL;
LABEL_23:
  uint64_t v20 = v13 == 1718382433 || v13 == 1919246700 || v13 == 1685026146;
  if (v20 && v15 == 67)
  {
    uint64_t v18 = 69LL;
    goto LABEL_16;
  }

  uint64_t v18 = v15;
  if ((v13 & 0xFFFFFF) != 0x696E74) {
    goto LABEL_16;
  }
  LOBYTE(v18) = 68;
LABEL_43:
  uint64_t v31 = v18;
  uint64_t v23 = sub_181312474(a1, *((void *)a2 + 2), a3, v18, a5);
  if (*a5)
  {
    sub_1813049BC(*a5, v31, a3);
    sub_1812AB614(*a5, (char)v6, a3);
  }

  return v23;
}

      uint64_t v70 = (int *)sub_18133E190((void *)*v133, v69);
LABEL_83:
      unsigned int v24 = v70;
      uint64_t v20 = v125;
      uint64_t v76 = v126;
      if (v70) {
        goto LABEL_84;
      }
LABEL_25:
      ++v23;
      v22 += 4LL;
      v21 += 2LL;
      if (v23 >= v9[10]) {
        goto LABEL_95;
      }
    }
  }

  unsigned int v24 = 0LL;
  uint64_t v123 = 0LL;
  int v130 = 0LL;
LABEL_95:
  if (v134) {
    sub_1812F20DC(v11, v134);
  }
  uint64_t v82 = **(const char ***)v9;
  uint64_t v83 = (unsigned __int8 *)v123;
  if (!v82)
  {
    uint64_t v84 = 0LL;
    if (v119 == 7) {
      goto LABEL_99;
    }
LABEL_104:
    uint64_t v89 = 0LL;
    goto LABEL_123;
  }

  uint64_t v84 = strlen(**(const char ***)v9) & 0x3FFFFFFF;
  if (v119 != 7) {
    goto LABEL_104;
  }
LABEL_99:
  int v85 = *(void *)(v125 + 96);
  if (v85)
  {
    int v86 = (uint64_t *)(v11[4] + 24LL);
    uint64_t v87 = -1;
    do
    {
      uint64_t v88 = *v86;
      v86 += 4;
      ++v87;
    }

    while (v88 != v85);
  }

  else
  {
    uint64_t v87 = -32768;
  }

  uint64_t v90 = sub_1812F2264((uint64_t)v11, 0x6EuLL);
  uint64_t v91 = (unsigned __int8 *)v90;
  if (v90)
  {
    *(_OWORD *)(v90 + 32) = 0u;
    *(_OWORD *)(v90 + 48) = 0u;
    *(_OWORD *)uint64_t v90 = 0u;
    *(_OWORD *)(v90 + 16) = 0u;
    *(_WORD *)uint64_t v90 = 583;
    *(_WORD *)(v90 + 52) = -1;
    *(void *)(v90 + 8) = v90 + 80;
    *(_OWORD *)(v90 + 64) = 0u;
    strcpy((char *)(v90 + 80), "FOREIGN KEY constraint failed");
    *(_DWORD *)(v90 + 40) = 1;
  }

  uint64_t v92 = sub_1812F2264(*v133, 0x70uLL);
  uint64_t v93 = v92;
  if (v92)
  {
    *(void *)uint64_t v92 = 0x100000001LL;
    *(_OWORD *)(v92 + 72) = 0u;
    *(_OWORD *)(v92 + 8) = 0u;
    *(_OWORD *)(v92 + 24) = 0u;
    *(_OWORD *)(v92 + 40) = 0u;
    *(_OWORD *)(v92 + 56) = 0u;
    *(_OWORD *)(v92 + 88) = 0u;
    *(void *)(v92 + 104) = 0LL;
    *(_DWORD *)(v92 + 72) = -1;
    *(void *)(v92 + 16) = 0LL;
    *(void *)(v92 + 24) = 0LL;
    uint64_t v129 = v24;
    if (v82)
    {
      int v94 = strlen(v82) + 1;
      if (v132) {
        uint64_t v95 = (void *)sub_1812F2264(v132, v94);
      }
      else {
        uint64_t v95 = (void *)sub_18126F0AC(v94);
      }
      uint64_t v96 = v95;
      if (v95) {
        memcpy(v95, v82, v94);
      }
    }

    else
    {
      uint64_t v96 = 0LL;
    }

    *(void *)(v93 + 24) = v96;
    __int16 v97 = *(void *)(v132 + 32);
    unsigned int v98 = 32LL * v87;
    unsigned int v99 = *(const void **)(v97 + v98);
    if (v99)
    {
      uint64_t v100 = v8;
      uint64_t v101 = strlen(*(const char **)(v97 + v98)) + 1;
      __int128 v102 = (void *)sub_1812F2264(v132, v101);
      __int128 v103 = v102;
      if (v102) {
        memcpy(v102, v99, v101);
      }
      int v8 = v100;
    }

    else
    {
      __int128 v103 = 0LL;
    }

    *(void *)(v93 + 16) = v103;
    unsigned int v24 = v129;
    uint64_t v83 = (unsigned __int8 *)v123;
  }

  __int128 v104 = sub_18133E190((void *)*v133, v91);
  uint64_t v89 = sub_181280000((void **)v133, v104, (_OWORD *)v93, (uint64_t)v130, 0LL, 0LL, 0LL, 0, 0LL);
  int v130 = 0LL;
LABEL_123:
  ++*(_DWORD *)(v132 + 432);
  *(_WORD *)(v132 + 436) = 0;
  __int128 v105 = (void *)sub_1812F2264(v132, v84 + 169);
  __int128 v16 = v105;
  if (v105)
  {
    bzero(v105, v84 + 169);
    uint64_t v106 = (char *)(v16 + 9);
    v16[7] = v16 + 9;
    v16[12] = v16 + 21;
    memcpy(v16 + 21, v82, v84);
    if (v130)
    {
      uint64_t v107 = v132;
      uint64_t v108 = sub_18129C928(v132, v130, 1LL, 0LL);
      uint64_t v109 = v125;
    }

    else
    {
      uint64_t v108 = 0LL;
      uint64_t v109 = v125;
      uint64_t v107 = v132;
    }

    v16[14] = v108;
    v16[15] = sub_18129CD4C(v107, v24, 1u);
    v16[11] = sub_18129F624(v107, (uint64_t)v89, 1LL);
    if (v83)
    {
      uint64_t v110 = (unsigned __int8 *)sub_1813132BC(v133, 19, (uint64_t)v83, 0LL);
      uint64_t v83 = v110;
      if (v110) {
        uint64_t v110 = (unsigned __int8 *)sub_18129C928(v132, v110, 1LL, 0LL);
      }
      v16[3] = v110;
    }
  }

  else
  {
    uint64_t v106 = 0LL;
    uint64_t v109 = v125;
  }

  uint64_t v111 = *(_DWORD *)(v132 + 432) - 1;
  *(_DWORD *)(v132 + 432) = v111;
  if (v111) {
    uint64_t v112 = 0;
  }
  else {
    uint64_t v112 = *(_WORD *)(v132 + 438);
  }
  *(_WORD *)(v132 + 436) = v112;
  if (v130) {
    sub_181309110((void *)v132, v130);
  }
  if (v83) {
    sub_181309110((void *)v132, v83);
  }
  if (v24) {
    sub_181311F48((void *)v132, v24);
  }
  if (v89) {
    sub_18128FDA0((void *)v132, (uint64_t)v89, 1);
  }
  if (*(_BYTE *)(v132 + 103) == 1)
  {
    sub_1812C221C((void *)v132, v16);
    return 0LL;
  }

  if (v119 == 7)
  {
    uint64_t v114 = -118;
  }

  else if (v119 == 10 && !v8)
  {
    uint64_t v114 = 0x80;
  }

  else
  {
    uint64_t v114 = -127;
  }

  uint64_t *v106 = v114;
  *((void *)v106 + 1) = v16;
  uint64_t v115 = *(void *)(v109 + 96);
  v16[5] = v115;
  v16[6] = v115;
  void *v117 = v16;
  if (v8) {
    uint64_t v116 = -127;
  }
  else {
    uint64_t v116 = 0x80;
  }
  *((_BYTE *)v16 + 16) = v116;
  return v16;
}

          *((void *)v6 + 2) = v14 + v11;
          return;
        }

        uint64_t v14 = (uint64_t)v23;
LABEL_18:
        if ((v14 & 0x8000000000000000LL) == 0)
        {
          if (v11 >= 1) {
            goto LABEL_20;
          }
          goto LABEL_74;
        }

    uint64_t result = sub_18138BFCC(v33, (unint64_t *)(a2 + 120));
    uint64_t v42 = result;
    *(void *)(a2 + 32) = result;
    *a3 = 1;
    uint64_t v6 = *(uint64_t **)(a2 + 16);
    if (!v6) {
      return result;
    }
    goto LABEL_48;
  }

  uint64_t v9 = *v6;
  if (v8 < *(_DWORD *)(a2 + 76))
  {
    unsigned int v10 = sub_18138BFCC((char *)(v9 + v8), &v57);
    int v11 = 0;
    uint64_t v12 = 0;
    v8 += v10;
    *(void *)(a2 + 120) += v57;
    goto LABEL_79;
  }

  unsigned int v26 = v9 + v7;
  uint64_t v27 = *(char *)(v9 + v7);
  uint64_t v28 = *(unsigned __int8 *)(v9 + v7);
  if (v27 < 0)
  {
    uint64_t v45 = *(unsigned __int8 *)(v26 + 1);
    if (*(char *)(v26 + 1) < 0)
    {
      uint64_t v50 = *(char *)(v26 + 2);
      if (v50 < 0)
      {
        sub_18138BFCC((char *)v26, &v57);
        if (v8 == (v57 & 0x7FFFFFFF)) {
          goto LABEL_34;
        }
      }

      else if (v8 == (v50 & 0x7F | (v28 << 14) & 0x1FC07F | ((v45 & 0x7F) << 7)))
      {
        goto LABEL_34;
      }
    }

    else if (v8 == (((v28 & 0x7F) << 7) | v45))
    {
      goto LABEL_34;
    }

    int v38 = a3[2];
    if (v38)
    {
      uint64_t v5 = a4;
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v38 + 20)) & 1) != 0) {
        goto LABEL_76;
      }
    }

    else
    {
      sub_1812CF36C(97220);
      int v38 = a3[2];
      uint64_t v5 = a4;
      if (!v38)
      {
        sub_1812CF36C(89717);
        goto LABEL_105;
      }
    }

    uint64_t v43 = *(_WORD *)(v38 + 20);
    if ((v43 & 0x24) != 0)
    {
      uint64_t v44 = *(void *)v38;
      goto LABEL_146;
    }

    if ((v43 & 8) != 0)
    {
      unsigned int v49 = *(double *)v38;
      if (*(double *)v38 >= -9.22337204e18)
      {
        if (v49 <= 9.22337204e18) {
          uint64_t v44 = (uint64_t)v49;
        }
        else {
          uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }

      else
      {
        uint64_t v44 = 0x8000000000000000LL;
      }

uint64_t sub_18127F1E4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = 0;
  }
  char v8 = *(_BYTE *)(a2 + 33);
  if (!v8)
  {
    if (*(_BYTE *)(a2 + 32) == 1)
    {
      int v23 = 0;
      uint64_t result = MEMORY[0x186E0A734](*MEMORY[0x1895FBBE0], *(void *)(a2 + 24), 0LL, &v23);
      if ((_DWORD)result) {
        return result;
      }
      if (*(_BYTE *)(a1 + 184))
      {
        *(_BYTE *)(a1 + 184) = 0;
        goto LABEL_37;
      }

      if (v23 == 2)
      {
LABEL_37:
        bzero(*(void **)(a2 + 24), *(void *)(a1 + 8));
        if (*(_BYTE *)(a2 + 34))
        {
          int v21 = *(_DWORD *)(a1 + 124);
          if (v21 >= 1)
          {
            for (uint64_t i = 0LL; i < v21; ++i)
            {
              unint64_t v24 = *(void *)(*(void *)(a2 + 16) + 8 * i);
              if (v24)
              {
                sub_18135E590((int *)a1, &v24);
                int v21 = *(_DWORD *)(a1 + 124);
              }
            }
          }
        }

        if (a4) {
          *a4 = 14;
        }
        unsigned __int8 v10 = *(_BYTE *)(a2 + 33);
        if (a3 != 1) {
          *(_BYTE *)(a2 + 33) = ++v10;
        }
        goto LABEL_11;
      }

      char v8 = *(_BYTE *)(a2 + 33);
    }

    else
    {
      char v8 = 0;
    }
  }

  unsigned __int8 v10 = v8 + 1;
  *(_BYTE *)(a2 + 33) = v10;
  if (a3 == 1) {
    --*(_BYTE *)(a2 + 34);
  }
LABEL_11:
  if (v10 == 1)
  {
    sub_18135E470((void *)a1, (uint64_t *)a2);
    uint64_t v13 = (uint64_t *)(a1 + 168);
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) < *(_DWORD *)(a1 + 124))
    {
      uint64_t v14 = *v13;
      if (!*v13)
      {
LABEL_22:
        *(void *)(a1 + 176) = a2;
        goto LABEL_30;
      }

LABEL_18:
      *(void *)(v14 + 8) = a2;
      *(void *)a2 = v14;
LABEL_30:
      uint64_t result = 0LL;
      *uint64_t v13 = a2;
      *(_BYTE *)(a2 + 32) = 0;
      return result;
    }

  uint64_t v22 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v22)
  {
    int v23 = *(const void **)a5;
    if (v23)
    {
      unint64_t v24 = (_BYTE *)sub_1812F2264((uint64_t)v14, v22 + 1);
      unsigned int v25 = v24;
      if (v24)
      {
        memcpy(v24, v23, v22);
        v25[v22] = 0;
        if ((char)byte_1813C6558[*v25] < 0)
        {
          unsigned int v26 = 0LL;
          if (*v25 == 91) {
            uint64_t v27 = 93;
          }
          else {
            uint64_t v27 = *v25;
          }
          for (uint64_t i = 1; ; ++i)
          {
            __int16 v29 = i;
            uint64_t v30 = v25[i];
            if (v30 == v27)
            {
              ++i;
              LOBYTE(v30) = v27;
            }

            v25[v26++] = v30;
          }

          v25[v26] = 0;
        }
      }
    }

    else
    {
      unsigned int v25 = 0LL;
    }

    *(void *)&v17[26 * v18 + 8] = v25;
  }

  if (a6)
  {
    *(void *)&v17[26 * v18 + 12] = a6;
    if ((*(_BYTE *)(a6 + 5) & 8) != 0) {
      *(_WORD *)((char *)&v17[26 * v18 + 17] + 1) |= 0x2000u;
    }
  }

  if (a7)
  {
    if (*(void *)(a7 + 8))
    {
      uint64_t v37 = &v17[26 * v18];
      *(_WORD *)((char *)v37 + 69) |= 0x400u;
      *((void *)v37 + 10) = *(void *)(a7 + 8);
    }

    else
    {
      *(void *)&v17[26 * v18 + 20] = *(void *)a7;
    }
  }

  else
  {
    *(void *)&v17[26 * v18 + 20] = 0LL;
  }

  return v17;
}

  if ((a1[1] & 0x20) != 0)
  {
    int v23 = *(void *)(v5 + 16);
    if (v23)
    {
      unint64_t v24 = *((_DWORD *)a1 + 20);
      while ((unsigned __int8 *)v23 == a1 || v24 && *(_DWORD *)(v23 + 80) != v24)
      {
        int v23 = *(void *)(v23 + 40);
        if (!v23) {
          goto LABEL_30;
        }
      }

      uint64_t result = sub_1812FFCF0((unsigned __int8 *)v23, v24, a1);
      uint64_t v52 = result;
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
LABEL_30:
      a1[1] &= ~0x20u;
      uint64_t v52 = 0;
    }
  }

  if (!*((void *)a1 + 16) && *(_BYTE *)(v4 + 19)) {
    sub_181309424(v4, *((_DWORD *)a1 + 20), *((void *)a1 + 6), 0);
  }
  unsigned int v25 = *(void *)(v7 + 112);
  unsigned int v26 = *(_DWORD **)(v25 + 40);
  if ((*(_WORD *)(v25 + 52) & 4) == 0 || v26[8] < *(_DWORD *)(v25 + 48))
  {
    uint64_t result = v26[12];
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v27 = *(void *)(v7 + 112);
    if (v26[46] <= v26[50]) {
      uint64_t result = sub_1812ABE24(v27);
    }
    else {
      uint64_t result = sub_1812FED50(v27);
    }
LABEL_49:
    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_50;
  }

  if (v26[32])
  {
    uint64_t result = sub_1812FAFE4(*(void *)(v7 + 112));
    goto LABEL_49;
  }

  unsigned __int8 v10 = *(void *)a1;
  int v11 = *((_DWORD *)a1 + 13);
  if (v11 || (uint64_t v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    uint64_t v12 = sub_1813037C4(v10, v11);
    unsigned __int8 v10 = *(void *)a1;
  }

  *((_DWORD *)a1 + 13) = v12;
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_18C465410(v13);
  }
  return v8;
}

    __int16 v29 = *(_BYTE **)v28;
    for (uint64_t i = *(unsigned __int8 **)(v12 + 96); ; ++i)
    {
      uint64_t v31 = *v29;
      uint64_t v32 = *i;
      if ((_DWORD)v31 == (_DWORD)v32)
      {
        if (!*v29)
        {
          *(void *)(v12 + 104) = v28;
          break;
        }
      }

      else if (byte_1813C6343[v31] != byte_1813C6343[v32])
      {
        uint64_t v28 = *(void *)(v28 + 40);
        if (!v28) {
          goto LABEL_25;
        }
        goto LABEL_18;
      }

      ++v29;
    }
  }

  uint64_t v370 = v16;
  uint64_t v33 = *v17;
  uint64_t v34 = v24[12];
  if (v34)
  {
    unsigned int v35 = (uint64_t *)(*(void *)(v33 + 32) + 24LL);
    uint64_t v36 = -1;
    do
    {
      uint64_t v37 = *v35;
      v35 += 4;
      ++v36;
    }

    while (v37 != v34);
    if (v24[11]) {
      goto LABEL_34;
    }
  }

  else
  {
    uint64_t v36 = -32768;
    if (v24[11]) {
      goto LABEL_34;
    }
  }

  int v38 = *(void *)(*(void *)(v33 + 32) + 56LL);
  if (!v38 || !*(void *)(v38 + 64)) {
    goto LABEL_35;
  }
LABEL_34:
  if (*((_BYTE *)v17 + 221))
  {
LABEL_35:
    int v372 = 0LL;
    uint64_t v378 = 0;
    goto LABEL_37;
  }

  int v372 = sub_18133EDD4(v17, (unsigned __int8 **)v24, 129LL, a3, &v378, v21, v22, v23);
LABEL_37:
  uint64_t v39 = *((unsigned __int8 *)v24 + 63);
  else {
    uint64_t v40 = *a3;
  }
  v371 = v40;
  uint64_t v367 = *((unsigned __int8 *)v24 + 63);
  if (v39 == 2 || v40)
  {
    if (v39 == 1) {
      goto LABEL_46;
    }
LABEL_45:
    goto LABEL_46;
  }

  unsigned __int8 v10 = sub_18133E2C8(v17, v12, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)"UPDATE", v22, v23);
  char v8 = 0LL;
  uint64_t v9 = 0LL;
  if (*((_BYTE *)v24 + 63) != 1) {
    goto LABEL_45;
  }
LABEL_46:
LABEL_47:
  size_t v41 = *((_DWORD *)v17 + 13);
  uint64_t v42 = v41 + 1;
  *((_DWORD *)v17 + 13) = v41 + 1;
  uint64_t v43 = v24[2];
  uint64_t v359 = v10;
  if ((v24[6] & 0x80) != 0)
  {
    if (!v43)
    {
      uint64_t v44 = 0LL;
      goto LABEL_61;
    }

    uint64_t v44 = v24[2];
    do
    {
      if ((*(_WORD *)(v44 + 99) & 3) == 2) {
        break;
      }
      uint64_t v44 = *(void *)(v44 + 40);
    }

    while (v44);
  }

  else
  {
    uint64_t v44 = 0LL;
  }

  if (!v43)
  {
LABEL_61:
    uint64_t v45 = 0;
    uint64_t v46 = v41;
    goto LABEL_62;
  }

  uint64_t v45 = 0;
  uint64_t v46 = v41;
  do
  {
    if (v44 == v43) {
      uint64_t v46 = v42 + v45;
    }
    ++v45;
    uint64_t v43 = *(void *)(v43 + 40);
  }

  while (v43);
  *((_DWORD *)v17 + 13) = v42 + v45;
LABEL_62:
  uint64_t v375 = v44;
  uint64_t v358 = v9;
  int v355 = a8;
  uint64_t v343 = v41;
  if (a8)
  {
    uint64_t v46 = *(_DWORD *)(a8 + 76);
    uint64_t v345 = *(_DWORD *)(a8 + 80);
    *((_DWORD *)v17 + 13) = v41;
  }

  else
  {
    uint64_t v345 = v41 + 1;
  }

  uint64_t v364 = v12;
  uint64_t v360 = v46;
  *(_DWORD *)(v12 + 72) = v46;
  uint64_t v47 = v45 + 1;
  uint64_t v48 = sub_1812F2264((uint64_t)v13, v45 + 4LL * ((int)v47 + *((__int16 *)v24 + 27)) + 2);
  if (!v48)
  {
    unsigned __int8 v10 = v359;
    goto LABEL_476;
  }

  unsigned int v49 = (void *)v48;
  v349 = (_DWORD *)(v48 + 4LL * *((__int16 *)v24 + 27));
  memset(&v349[v45 + 1], 1, v45 + 1);
  *((_BYTE *)&v349[v45 + 1] + v47) = 0;
  uint64_t v380 = 0u;
  uint64_t v381 = 0u;
  v379[0] = v17;
  v379[1] = v364;
  v379[2] = v355;
  LODWORD(v381) = 512;
  uint64_t v366 = v17[2];
  if (!v366)
  {
    if (!v17[21] && (*(_BYTE *)(*v17 + 96) & 8) == 0) {
      *((_BYTE *)v17 + 35) = 1;
    }
    uint64_t v366 = sub_1812DC63C(v17, v50, v51, (uint64_t)v52, v53, v54, v55, v56);
    if (!v366)
    {
      unsigned __int8 v10 = v359;
      goto LABEL_475;
    }
  }

  uint64_t v350 = (uint64_t)v8;
  uint64_t v352 = (uint64_t)v13;
  uint64_t v365 = (int *)a3;
  __b = &v349[v45 + 1];
  uint64_t v354 = v17;
  if ((int)*a3 < 1)
  {
    uint64_t v353 = 0;
    LOBYTE(v58) = 0;
    uint64_t v363 = 0LL;
    uint64_t v362 = -1;
LABEL_77:
    uint64_t v341 = v58 + v353;
    int v373 = v58;
    if ((v24[6] & 0x60) != 0)
    {
      LOWORD(v61) = *((_WORD *)v24 + 27);
      do
      {
        int v62 = 0LL;
        int v63 = 0LL;
        int v64 = 0;
        do
        {
          if ((*((_DWORD *)v49 + v63) & 0x80000000) != 0)
          {
            int v65 = v24[1] + v62;
            if ((*(_WORD *)(v65 + 14) & 0x60) != 0)
            {
              unint64_t v66 = *(unsigned __int16 *)(v65 + 12);
              if (v66
                && !*((_BYTE *)v24 + 63)
                && (uint64_t v68 = (_DWORD *)v24[10]) != 0LL
                && *v68 >= v66
                && (uint64_t v69 = *(void *)&v68[6 * (v66 - 1) + 2],
                    __int16 v382 = 0LL,
                    v384 = 0u,
                    uint64_t v385 = 0LL,
                    uint64_t v386 = v49,
                    uint64_t v383 = sub_18134459C,
                    v69))
              {
                sub_18131C57C((uint64_t)&v382, v69);
                LOBYTE(v58) = v373;
                uint64_t v67 = WORD2(v385);
              }

              else
              {
                uint64_t v67 = 0;
              }

              if (!(_BYTE)v58) {
                v67 &= ~2u;
              }
              if (v67)
              {
                *((_DWORD *)v49 + v63) = 99999;
                int v64 = 1;
              }
            }
          }

          ++v63;
          uint64_t v61 = *((__int16 *)v24 + 27);
          v62 += 16LL;
        }

        while (v63 < v61);
      }

      while (v64);
    }

    if (*((_BYTE *)v24 + 63) == 1) {
      uint64_t v70 = -1LL;
    }
    else {
      uint64_t v70 = 0LL;
    }
    *(void *)(v364 + 88) = v70;
    uint64_t v71 = sub_1812AA24C((uint64_t)v17, (unsigned __int8 **)v24, (uint64_t)v49, v341);
    uint64_t v346 = v370 == 5;
    uint64_t v72 = v24[2];
    uint64_t v342 = v71;
    if (v72)
    {
      uint64_t v73 = 0LL;
      if (v341) {
        uint64_t v74 = 0;
      }
      else {
        uint64_t v74 = v71 <= 1;
      }
      uint64_t v75 = !v74;
      uint64_t v368 = v75;
      uint64_t v76 = v349;
      uint64_t v77 = v375;
      uint64_t v78 = v373;
      uint64_t v79 = &v349[v45 + 1];
      while (1)
      {
        uint64_t v82 = v368;
        if (v72 == v77) {
          uint64_t v82 = 1;
        }
        if ((v82 & 1) != 0) {
          goto LABEL_107;
        }
        uint64_t v83 = *(void *)(v72 + 72);
        if (v83)
        {
          __int16 v382 = 0LL;
          v384 = 0u;
          uint64_t v385 = 0LL;
          uint64_t v386 = v49;
          uint64_t v383 = sub_18134459C;
          sub_18131C57C((uint64_t)&v382, v83);
          uint64_t v78 = v373;
          uint64_t v84 = WORD2(v385);
          if (!v373) {
            uint64_t v84 = WORD2(v385) & 0xFFFD;
          }
          if (v84)
          {
LABEL_107:
            uint64_t v80 = *((_DWORD *)v17 + 14) + 1;
            *((_DWORD *)v17 + 14) = v80 + *(unsigned __int16 *)(v72 + 96);
            if (v80) {
              goto LABEL_108;
            }
LABEL_133:
            uint64_t v77 = v375;
LABEL_134:
            uint64_t v80 = 0;
            uint64_t v81 = v73 + 1;
            v79[v73 + 1] = 0;
            goto LABEL_109;
          }
        }

        if (!*(_WORD *)(v72 + 94)) {
          goto LABEL_133;
        }
        int v85 = 0LL;
        int v86 = 8LL;
        while ((*(__int16 *)(*(void *)(v72 + 8) + 2 * v85) & 0x80000000) == 0)
        {
LABEL_120:
          ++v85;
          v86 += 24LL;
          if (v85 >= *(unsigned __int16 *)(v72 + 94))
          {
            uint64_t v77 = v375;
            uint64_t v79 = &v349[v45 + 1];
            goto LABEL_134;
          }
        }

        uint64_t v87 = *(void *)(*(void *)(v72 + 80) + v86);
        __int16 v382 = 0LL;
        v384 = 0u;
        uint64_t v385 = 0LL;
        uint64_t v386 = v49;
        uint64_t v383 = sub_18134459C;
        if (v87)
        {
          sub_18131C57C((uint64_t)&v382, v87);
          uint64_t v78 = v373;
          uint64_t v88 = WORD2(v385);
        }

        else
        {
          uint64_t v88 = 0;
        }

        if (!v78) {
          v88 &= ~2u;
        }
        if (!v88) {
          goto LABEL_120;
        }
LABEL_128:
        uint64_t v80 = *((_DWORD *)v17 + 14) + 1;
        *((_DWORD *)v17 + 14) = v80 + *(unsigned __int16 *)(v72 + 96);
        if (v370 == 11)
        {
          uint64_t v89 = v346;
          if (*(_BYTE *)(v72 + 98) == 5) {
            uint64_t v89 = 1;
          }
          uint64_t v346 = v89;
        }

        uint64_t v79 = &v349[v45 + 1];
        if (!v80) {
          goto LABEL_133;
        }
LABEL_108:
        uint64_t v81 = v73 + 1;
        uint64_t v77 = v375;
LABEL_109:
        v349[v73] = v80;
        uint64_t v72 = *(void *)(v72 + 40);
        uint64_t v73 = v81;
        if (!v72) {
          goto LABEL_191;
        }
      }
    }

    LODWORD(v81) = 0;
    uint64_t v76 = v349;
    uint64_t v79 = &v349[v45 + 1];
LABEL_191:
    uint64_t v377 = v346;
    uint64_t v125 = *((_DWORD *)v17 + 14) + 1;
    *((_DWORD *)v17 + 14) = v125;
    v76[v81] = v125;
    if (v346) {
      memset(v79, 1, v45 + 1);
    }
    char v8 = (unsigned __int8 *)v350;
    uint64_t v13 = (void *)v352;
    a3 = (unsigned int *)v365;
    if (!*((_BYTE *)v17 + 30)) {
      *(_WORD *)(v366 + 268) |= 0x10u;
    }
    if (v372) {
      uint64_t v126 = 0;
    }
    else {
      uint64_t v126 = v342 == 0;
    }
    uint64_t v127 = !v126;
    sub_18131EC34((uint64_t)v17, v127, v36);
    uint64_t v135 = *((unsigned __int8 *)v24 + 63);
    v332 = v81;
    if (v135 == 1)
    {
      __leuint64_t n = 0;
      int v339 = 0LL;
      uint64_t v369 = 0;
      uint64_t v333 = 0;
      int v136 = v375;
      uint64_t v137 = v371;
    }

    else
    {
      uint64_t v333 = v349[v81];
      uint64_t v138 = *((_DWORD *)v17 + 14);
      uint64_t v139 = v138 + 1;
      if (v372 || v353 || v342)
      {
        uint64_t v369 = v138 + 2;
        uint64_t v140 = v139 + *((__int16 *)v24 + 27);
      }

      else
      {
        uint64_t v369 = 0;
        uint64_t v140 = v138 + 1;
      }

      int v136 = v375;
      uint64_t v137 = v371;
      if (v341) {
        uint64_t v141 = 0;
      }
      else {
        uint64_t v141 = v372 == 0LL;
      }
      uint64_t v142 = v141 && v342 == 0;
      if (v142) {
        __int16 v143 = v140;
      }
      else {
        __int16 v143 = v140 + 1;
      }
      if (v142) {
        int v144 = v139;
      }
      else {
        int v144 = v140 + 1;
      }
      HIDWORD(v339) = v144;
      __leuint64_t n = v139;
      LODWORD(v339) = v143 + 1;
      *((_DWORD *)v17 + 14) = v143 + *((__int16 *)v24 + 27);
    }

    uint64_t v145 = v367;
    if (v367 == 2)
    {
      uint64_t v338 = v17[46];
      v17[46] = *v24;
      if (v137)
      {
        uint64_t v146 = v17;
        goto LABEL_231;
      }

      sub_18133E97C(v17, (uint64_t)v24, v359, (uint64_t)v358, v350, v360);
      uint64_t v358 = 0LL;
      char v8 = 0LL;
      uint64_t v146 = v17;
    }

    else
    {
      uint64_t v338 = 0LL;
      uint64_t v146 = 0LL;
      if (v137) {
        goto LABEL_231;
      }
    }

    if (sub_1813205D4((uint64_t)v379, (uint64_t)v359, v129, v130, v131, v132, v133, v134))
    {
LABEL_229:
      unsigned __int8 v10 = v359;
      goto LABEL_473;
    }

    uint64_t v135 = *((unsigned __int8 *)v24 + 63);
    int v136 = v375;
    uint64_t v137 = v371;
LABEL_231:
    if (v135 == 1)
    {
      unsigned __int8 v10 = v359;
      sub_181342FB4((void **)v17, (int *)v364, (uint64_t)v24, (uint64_t)v365, v363, (uint64_t)v49, v359, v370);
LABEL_473:
      if (v146) {
        v146[46] = v338;
      }
      goto LABEL_475;
    }

    uint64_t v335 = *((_DWORD *)v17 + 17) - 1;
    *((_DWORD *)v17 + 17) = v335;
    if ((*(_BYTE *)(v352 + 52) & 1) == 0 || v17[22] || *((_BYTE *)v17 + 30))
    {
      uint64_t v326 = 0;
    }

    else
    {
      uint64_t v326 = 0;
      if (!v355 && !*((_BYTE *)v17 + 219))
      {
        __int128 v202 = *((_DWORD *)v17 + 14);
        __int128 v203 = (v202 + 1);
        *((_DWORD *)v17 + 14) = v203;
        uint64_t v326 = v202 + 1;
        sub_1813103F4(v366, 71LL, 0LL, v203, v131, v132, v133, v134);
        uint64_t v137 = v371;
        int v136 = v375;
      }
    }

    uint64_t v351 = v8;
    uint64_t v329 = v146;
    if (!v137 && (v24[6] & 0x80) == 0)
    {
      uint64_t v147 = __len;
      sub_181279C3C(v366, 75LL, 0LL, v333, __len, v132, v133, v134);
      uint64_t v148 = *((unsigned int *)v17 + 13);
      *((_DWORD *)v17 + 13) = v148 + 1;
      uint64_t v334 = v148;
      uint64_t v319 = sub_181279C3C(v366, 118LL, v148, 0LL, v333, v149, v150, v151);
      int v323 = 0;
      uint64_t v153 = 0;
      uint64_t v327 = 0;
      uint64_t v154 = v369;
      if (!v355) {
        goto LABEL_308;
      }
LABEL_251:
      uint64_t v162 = v153;
      sub_1812B0714((uint64_t)v17, (unsigned __int8 **)v359, v335, 16LL, v152, v132, v133, v134);
      uint64_t v166 = v162;
      uint64_t v167 = 0LL;
      uint64_t v328 = 0;
      v336 = 1;
      LODWORD(v321) = 1;
LABEL_326:
      uint64_t v320 = v164;
      uint64_t v322 = (uint64_t **)v167;
      uint64_t v330 = v166;
      if ((v24[6] & 0x80) == 0)
      {
        sub_1813103F4(v366, 135LL, v360, v147, v163, v132, v133, v134);
        uint64_t v174 = v336;
        if (v336)
        {
          uint64_t v176 = v370;
          uint64_t v128 = v319;
          if (v319)
          {
            sub_18128BDCC(v366, v319);
            uint64_t v174 = v336;
          }

          v348 = 0;
          v325 = 0LL;
          uint64_t v155 = v360;
          uint64_t v145 = v367;
          uint64_t v137 = v371;
          uint64_t v158 = v373;
          uint64_t v159 = v343;
          uint64_t v157 = v323;
        }

        else
        {
          uint64_t v198 = *((_DWORD *)v17 + 14) + 1;
          *((_DWORD *)v17 + 14) = v198;
          v349[v332] = v198;
          sub_181279C3C(v366, 128LL, v334, v333, v147, v132, v133, v134);
          v348 = 0;
          uint64_t v174 = 0;
          v325 = 0LL;
          uint64_t v155 = v360;
          uint64_t v145 = v367;
          uint64_t v137 = v371;
          uint64_t v158 = v373;
          uint64_t v159 = v343;
          uint64_t v176 = v370;
          uint64_t v157 = v323;
        }

        goto LABEL_267;
      }

      uint64_t v195 = v166;
      __int128 v196 = v375;
      if ((int)v195 >= 1)
      {
        for (uint64_t j = 0LL; j != v195; ++j)
        {
          *(double *)v165.i64 = sub_18131C0EC( v366,  (uint64_t)v24,  v360,  *(__int16 *)(*(void *)(v196 + 8) + 2 * j),  v323 + j,  v132,  v133,  v134,  v165);
          __int128 v196 = v375;
        }
      }

      uint64_t v174 = v336;
      if (v336)
      {
        v325 = v195;
        uint64_t v176 = v370;
        uint64_t v128 = v319;
        if (v319)
        {
          sub_18128BDCC(v366, v319);
          uint64_t v174 = v336;
        }

        v348 = 0;
        uint64_t v157 = v323;
        uint64_t v327 = v323;
        uint64_t v155 = v360;
        uint64_t v145 = v367;
        uint64_t v137 = v371;
        uint64_t v158 = v373;
        uint64_t v159 = v343;
        uint64_t v154 = v369;
LABEL_267:
        uint64_t v361 = v155;
        char v337 = v174;
        if (v355)
        {
          uint64_t v344 = 0;
          __ba = v335;
          if (!v158) {
            goto LABEL_355;
          }
          goto LABEL_351;
        }

        if (!v137 && v174 != 2)
        {
          uint64_t v177 = v159;
          uint64_t v178 = v157;
          sub_18128E90C(v322, v128, v129, v157, v159, v132, v133, v134);
          uint64_t v157 = v178;
          uint64_t v174 = v337;
          uint64_t v159 = v177;
          uint64_t v154 = v369;
          uint64_t v155 = v361;
        }

        uint64_t v179 = v375;
        if (v145 != 2)
        {
          LODWORD(v382) = 0;
          v376 = 0;
          if (!v174) {
            goto LABEL_284;
          }
          if ((v320 & 0x80000000) == 0) {
            __b[v320 - (int)v159] = 0;
          }
          if ((v321 & 0x80000000) == 0) {
            __b[(int)v321 - (int)v159] = 0;
          }
          if (v174 == 2 && (int)(v45 + (~(_DWORD)v321 >> 31)) > 0)
          {
            uint64_t v180 = v159;
            uint64_t v181 = v157;
            uint64_t v182 = sub_181319B54(v366, 15LL, v129, v157, v159, v132, v133, v134);
            uint64_t v183 = v180;
            uint64_t v154 = v369;
            sub_1812A6CB0((uint64_t)v17, (uint64_t)v24, 113LL, 0, v183, __b, &v382, &v376);
            LODWORD(v157) = v181;
            uint64_t v179 = v375;
            uint64_t v155 = v361;
            if (v182)
            {
              uint64_t v184 = *(_DWORD *)(v366 + 144);
              if (v184 - 1 == v182)
              {
                *(_DWORD *)(v366 + 144) = v182;
              }

              else
              {
                if (*(_BYTE *)(*(void *)v366 + 103LL)) {
                  uint64_t v314 = &byte_18C550680;
                }
                else {
                  uint64_t v314 = (char *)(*(void *)(v366 + 136) + 40LL * v182);
                }
                *((_DWORD *)v314 + 2) = v184;
                a3 = (unsigned int *)v365;
                uint64_t v155 = v361;
                uint64_t v179 = v375;
                uint64_t v154 = v369;
                LODWORD(v157) = v181;
                uint64_t v17 = v354;
              }
            }
          }

          else
          {
LABEL_284:
            uint64_t v185 = v157;
            sub_1812A6CB0((uint64_t)v17, (uint64_t)v24, 113LL, 0, v159, __b, &v382, &v376);
            LODWORD(v157) = v185;
            uint64_t v179 = v375;
            uint64_t v155 = v361;
          }

          uint64_t v176 = v370;
          uint64_t v174 = v337;
        }

        if (v174)
        {
          if (v320 != v155 && (_DWORD)v321 != v155)
          {
            sub_1812DC7B4(v366, 28LL, v361, v335, v327, v325, v133, v134);
            uint64_t v174 = v337;
            uint64_t v179 = v375;
          }

          __ba = v335;
          if (v174 != 1)
          {
            __ba = *((_DWORD *)v17 + 17) - 1;
            *((_DWORD *)v17 + 17) = __ba;
          }

          if (v179) {
            char v186 = v327;
          }
          else {
            char v186 = __len;
          }
          sub_1813103F4(v366, 50LL, v186, v335, v159, v132, v133, v134);
          uint64_t v344 = 0;
          uint64_t v137 = v371;
          if (!v373) {
            goto LABEL_355;
          }
          goto LABEL_351;
        }

        uint64_t v187 = v145;
        uint64_t v188 = v348 ^ 1;
        if (v179) {
          uint64_t v188 = 0;
        }
        if ((v188 & 1) != 0)
        {
          sub_1813103F4(v366, 36LL, v334, v335, v159, v132, v133, v134);
          uint64_t v206 = (*((_DWORD *)v17 + 17) - 1);
          *((_DWORD *)v17 + 17) = v206;
          uint64_t v344 = sub_1813103F4(v366, 135LL, v334, __len, v207, v208, v209, v210);
          __ba = v206;
          sub_181279C3C(v366, 31LL, v361, v206, __len, v211, v212, v213);
        }

        else
        {
          v324 = v157;
          uint64_t v189 = (*((_DWORD *)v17 + 17) - 1);
          *((_DWORD *)v17 + 17) = v189;
          sub_1813103F4(v366, 36LL, v334, v335, v159, v132, v133, v134);
          __ba = v189;
          uint64_t v344 = *(_DWORD *)(v366 + 144);
          if (v348)
          {
            if (v145 != 2)
            {
              if (v375)
              {
                uint64_t v190 = v330;
                if ((int)v190 >= 1)
                {
                  unsigned int v191 = 0LL;
                  do
                  {
                    sub_181279C3C(v366, 94LL, v334, v191, v324 + v191, v132, v133, v134);
                    unsigned int v191 = (v191 + 1);
                  }

                  while ((_DWORD)v190 != (_DWORD)v191);
                }

                sub_1812DC7B4(v366, 28LL, v361, __ba, v324, v190, v133, v134);
              }

              else
              {
                sub_1813103F4(v366, 135LL, v334, __len, v159, v132, v133, v134);
                sub_181279C3C(v366, 31LL, v361, v189, __len, v315, v316, v317);
              }

              a3 = (unsigned int *)v365;
              uint64_t v176 = v370;
              uint64_t v145 = v187;
              uint64_t v137 = v371;
              uint64_t v154 = v369;
              uint64_t v17 = v354;
              if (!v373)
              {
LABEL_355:
                if (v372 || v353 || v342)
                {
                  if (v342) {
                    uint64_t v223 = sub_18133F274((void **)v17, (uint64_t)v24, v129, v157, v159, v132, v133, v134);
                  }
                  else {
                    uint64_t v223 = 0;
                  }
                  char v224 = sub_18133F0A0(v17, (uint64_t)v372, a3, 0, 3u, (uint64_t)v24, v176);
                  uint64_t v230 = v375;
                  unsigned int v231 = v373;
                  if (*((__int16 *)v24 + 27) >= 1)
                  {
                    uint64_t v232 = 0LL;
                    uint64_t v233 = v224 | v223;
                    uint64_t v234 = (int8x16_t)xmmword_1813CDDB0;
                    uint64_t v235 = (int8x16_t)xmmword_1813CDDC0;
                    uint64_t v236 = (int8x16_t)xmmword_1813CDDD0;
                    v237.i64[0] = 0x1000100010001LL;
                    v237.i64[1] = 0x1000100010001LL;
                    do
                    {
                      uint64_t v238 = v24[1];
                      uint64_t v239 = v232;
                      if ((v232 & 0x8000) == 0 && (v24[6] & 0x20) != 0)
                      {
                        if ((_WORD)v232)
                        {
                          if (v232 >= 0x11)
                          {
                            if ((v232 & 0xF) != 0) {
                              uint64_t v242 = v232 & 0xF;
                            }
                            else {
                              uint64_t v242 = 16LL;
                            }
                            uint64_t v240 = v232 - v242;
                            uint64_t v243 = v238 + 142;
                            uint64_t v244 = 0uLL;
                            uint64_t v245 = 0uLL;
                            do
                            {
                              int v246 = vqtbl2q_s8(*(int8x16x2_t *)(v243 - 64), v235);
                              v246.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v243 - 32), v234).i32[3];
                              v247.i32[0] = vzip1q_s16(*(int16x8_t *)(v243 - 128), *(int16x8_t *)(v243 - 112)).u32[0];
                              v247.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v243 - 96), v236).i32[1];
                              v247.i64[1] = v246.i64[1];
                              uint64_t v387 = *(int8x16x2_t *)(v243 + 32);
                              uint64_t v248 = vqtbl2q_s8(*(int8x16x2_t *)(v243 + 64), v235);
                              v248.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v243 + 96), v234).i32[3];
                              uint64_t v250 = *(int16x8_t *)v243;
                              int v249 = *(int16x8_t *)(v243 + 16);
                              v243 += 256LL;
                              v249.i32[0] = vzip1q_s16(v250, v249).u32[0];
                              v249.i32[1] = vqtbl2q_s8(v387, v236).i32[1];
                              v249.i64[1] = v248.i64[1];
                              uint64_t v244 = vaddq_s16((int16x8_t)vbicq_s8(v237, (int8x16_t)vshrq_n_u16(v247, 5uLL)), v244);
                              uint64_t v245 = vaddq_s16( (int16x8_t)vbicq_s8(v237, (int8x16_t)vshrq_n_u16((uint16x8_t)v249, 5uLL)),  v245);
                              v242 += 16LL;
                            }

                            while (v232 != v242);
                            uint64_t v229 = vaddq_s16(v245, v244);
                            v229.i16[0] = vaddvq_s16(v229);
                            uint64_t v241 = v229.i16[0];
                          }

                          else
                          {
                            uint64_t v240 = 0LL;
                            uint64_t v241 = 0;
                          }

                          uint64_t v251 = (unsigned __int16 *)(v238 + 16 * v240 + 14);
                          do
                          {
                            uint64_t v252 = *v251;
                            v251 += 8;
                            v241 += ((v252 >> 5) & 1) == 0;
                            ++v240;
                          }

                          while (v232 != v240);
                        }

                        else
                        {
                          uint64_t v241 = 0;
                        }

                        else {
                          uint64_t v239 = v241;
                        }
                      }

                      uint64_t v253 = (v154 + v239);
                      if (v233 != -1)
                      {
                        uint64_t v254 = *(_WORD *)(v238 + 16 * v232 + 14);
                        if (v232 > 0x1F)
                        {
                          if ((v254 & 1) == 0)
                          {
LABEL_387:
                            sub_1813103F4(v366, 75LL, 0LL, (v154 + v239), v253, v226, v227, v228);
                            goto LABEL_364;
                          }
                        }

                        else if (!((1 << v232) & v233 | v254 & 1))
                        {
                          goto LABEL_387;
                        }
                      }

                      *(double *)v229.i64 = sub_18131C0EC(v366, (uint64_t)v24, v361, v232, v253, v226, v227, v228, v229);
LABEL_364:
                      ++v232;
                      uint64_t v230 = v375;
                      unsigned int v231 = v373;
                      uint64_t v234 = (int8x16_t)xmmword_1813CDDB0;
                      uint64_t v235 = (int8x16_t)xmmword_1813CDDC0;
                      uint64_t v236 = (int8x16_t)xmmword_1813CDDD0;
                      v237.i64[0] = 0x1000100010001LL;
                      v237.i64[1] = 0x1000100010001LL;
                    }

                    while ((uint64_t)v232 < *((__int16 *)v24 + 27));
                  }

                  uint64_t v176 = v370;
                  if (!v230 && !v231) {
                    sub_1813103F4(v366, 80LL, __len, HIDWORD(v339), v225, v226, v227, v228);
                  }
                }

                int v374 = sub_18133F0A0(v17, (uint64_t)v372, a3, 1u, 1u, (uint64_t)v24, v176);
                uint64_t v261 = *((__int16 *)v24 + 27);
                if (v261 >= 1)
                {
                  uint64_t v262 = 0LL;
                  uint64_t v263 = 14LL;
                  uint64_t v264 = v339;
                  do
                  {
                    if (v262 == *((__int16 *)v24 + 26))
                    {
                      uint64_t v265 = *(_DWORD *)(v366 + 144);
                      if (*(_DWORD *)(v366 + 148) <= v265)
                      {
                        sub_18131044C(v366, 75LL, 0LL, v264, 0LL, v257, v258, v259);
                      }

                      else
                      {
                        *(_DWORD *)(v366 + 144) = v265 + 1;
                        uint64_t v266 = *(void *)(v366 + 136) + 40LL * v265;
                        *(void *)uint64_t v266 = 75LL;
                        *(_DWORD *)(v266 + 8) = v264;
                        *(void *)(v266 + 12) = 0LL;
                        *(void *)(v266 + 28) = 0LL;
                        *(void *)(v266 + 20) = 0LL;
                        *(_DWORD *)(v266 + 36) = 0;
                      }
                    }

                    else
                    {
                      uint64_t v267 = *(unsigned __int16 *)(v24[1] + v263);
                      if ((v267 & 0x60) != 0)
                      {
                        LODWORD(v264) = v264 + (v267 << 26 >> 31);
                      }

                      else
                      {
                        uint64_t v268 = *((_DWORD *)v49 + v262);
                        if (v268 < 0)
                        {
                          if ((unint64_t)v262 <= 0x1F && (v378 & 1) != 0 && ((v374 >> v262) & 1) == 0)
                          {
                            sub_1813103F4(v366, 75LL, 0LL, v264, v256, v257, v258, v259);
                          }

                          else
                          {
                            *(double *)v260.i64 = sub_18131C0EC( v366,  (uint64_t)v24,  v361,  v262,  v264,  v257,  v258,  v259,  v260);
                            uint64_t v328 = 0;
                          }
                        }

                        else if (v348)
                        {
                          if (v145 != 2) {
                            LOWORD(v261) = v330;
                          }
                          sub_181279C3C(v366, 94LL, v334, (v268 + (__int16)v261), v264, v257, v258, v259);
                        }

                        else
                        {
                          sub_181319C00((uint64_t)v17, *(unsigned __int8 **)&a3[6 * v268 + 2], v264);
                        }
                      }
                    }

                    ++v262;
                    uint64_t v264 = (v264 + 1);
                    LOWORD(v261) = *((_WORD *)v24 + 27);
                    v263 += 16LL;
                  }

                  while (v262 < (__int16)v261);
                }

                if ((v24[6] & 0x60) != 0) {
                  sub_1813441E8((uint64_t)v17, v339, (uint64_t)v24, v255, v256, v257, v258, v259);
                }
                char v8 = v351;
                uint64_t v13 = (void *)v352;
                unsigned __int8 v10 = v359;
                uint64_t v269 = v370;
                uint64_t v270 = v366;
                if ((v378 & 1) != 0)
                {
                  sub_18131FC08((void **)v366, (uint64_t)v24, v339, v255, v256, v257, v258, v259);
                  sub_18133F5C0((uint64_t)v17, (uint64_t)v372, 129LL, a3, 1LL, (uint64_t)v24, __len, v370, __ba);
                  if (v145 == 2)
                  {
LABEL_458:
                    if (v326) {
                      sub_1813103F4(v270, 86LL, v326, 1LL, v256, v257, v258, v259);
                    }
                    if (v372) {
                      sub_18133F5C0((uint64_t)v17, (uint64_t)v372, 129LL, a3, 2LL, (uint64_t)v24, __len, v370, __ba);
                    }
                    if (v337 != 1)
                    {
                      sub_18131B3E0(v270, __ba);
                      if (v337 == 2) {
                        sub_18128E90C(v322, v300, v301, v302, v303, v304, v305, v306);
                      }
                      else {
                        sub_1813103F4(v270, 39LL, v334, v344, v303, v304, v305, v306);
                      }
                    }

                    sub_18131B3E0(v270, v335);
                    if (!*((_BYTE *)v17 + 30) && !(v355 | v17[22]) && v17[20]) {
                      sub_181342D84(v17, v307, v308, v309, v310, v311, v312, v313);
                    }
                    if (v326) {
                      sub_18133ECB4(v270, v326, "rows updated", v309, v310, v311, v312, v313);
                    }
                    uint64_t v146 = v329;
                    goto LABEL_473;
                  }

                  if (v375) {
                    sub_1812DC7B4(v366, 28LL, v361, __ba, v327, v325, v258, v259);
                  }
                  else {
                    sub_181279C3C(v366, 31LL, v361, __ba, __len, v257, v258, v259);
                  }
                  uint64_t v273 = *((__int16 *)v24 + 27);
                  if (v273 >= 1)
                  {
                    uint64_t v274 = 0LL;
                    uint64_t v275 = 14LL;
                    uint64_t v276 = v339;
                    do
                    {
                      uint64_t v277 = *(unsigned __int16 *)(v24[1] + v275);
                      if ((v277 & 0x60) != 0)
                      {
                        LODWORD(v276) = v276 + (v277 << 26 >> 31);
                      }

                      else if ((*((_DWORD *)v49 + v274) & 0x80000000) != 0 && v274 != *((__int16 *)v24 + 26))
                      {
                        *(double *)v272.i64 = sub_18131C0EC( v366,  (uint64_t)v24,  v361,  v274,  v276,  v257,  v258,  v259,  v272);
                        LOWORD(v273) = *((_WORD *)v24 + 27);
                      }

                      ++v274;
                      uint64_t v276 = (v276 + 1);
                      v275 += 16LL;
                    }

                    while (v274 < (__int16)v273);
                  }

                  unsigned __int8 v10 = v359;
                  uint64_t v269 = v370;
                  uint64_t v270 = v366;
                  if ((v24[6] & 0x60) != 0) {
                    sub_1813441E8((uint64_t)v17, v339, (uint64_t)v24, v271, v256, v257, v258, v259);
                  }
                }

                if (v145 != 2)
                {
                  HIDWORD(v318) = __ba;
                  LOBYTE(v318) = v269;
                  sub_1812A6F4C(v17, v24, v349, v361, v345, HIDWORD(v339), __len, v341, v318, &v377, v49, 0LL);
                  if (v377 || v341)
                  {
                    if (v375) {
                      sub_1812DC7B4(v270, 28LL, v361, __ba, v327, v325, v279, v280);
                    }
                    else {
                      sub_181279C3C(v270, 31LL, v361, __ba, __len, v278, v279, v280);
                    }
                  }

                  if (v342) {
                    sub_1812AA984(v17, (uint64_t)v24, __len, 0LL, (uint64_t)v49, v341, v279, v280);
                  }
                  sub_18133F7E0((uint64_t)v17, (uint64_t)v24, v361, v345, v349, -1, v281);
                  uint64_t v270 = v366;
                  if (v328) {
                    sub_181319BA8(v366, 143LL, v361, v282, v283, v284, v285, v286);
                  }
                  if (v341) {
                    uint64_t v287 = 0;
                  }
                  else {
                    uint64_t v287 = v342 <= 1;
                  }
                  if (v287) {
                    uint64_t v288 = 68LL;
                  }
                  else {
                    uint64_t v288 = 4LL;
                  }
                  sub_181279C3C(v366, 130LL, v361, v288, HIDWORD(v339), v284, v285, v286);
                  uint64_t v291 = v337;
                  if (v337 == 2)
                  {
                    v292 = *(_DWORD *)(v366 + 144);
                    int v293 = __OFSUB__(v292, 1);
                    uint64_t v294 = v292 - 1;
                    if (v294 < 0 == v293) {
                      *(_WORD *)(*(void *)(v366 + 136) + 40LL * v294 + 2) = 2;
                    }
                  }

                  if (!*((_BYTE *)v17 + 30))
                  {
                    sub_18131A104((void *)v366, (uint64_t)v24, -5);
                    uint64_t v291 = v337;
                  }

                  if (v342)
                  {
                    uint64_t v295 = v291;
                    sub_1812AA984(v17, (uint64_t)v24, 0LL, HIDWORD(v339), (uint64_t)v49, v341, v289, v290);
                    if (v295 == 2) {
                      uint64_t v296 = 6LL;
                    }
                    else {
                      uint64_t v296 = 4LL;
                    }
                    sub_1812AB304((uint64_t)v17, (uint64_t)v24, v361, v345, HIDWORD(v339), (uint64_t)v349, v296, 0LL, 0);
                    sub_18133F998(v17, (uint64_t)v24, (uint64_t)a3, __len, (uint64_t)v49, v341, v297, v298);
                  }

                  else
                  {
                    if (v291 == 2) {
                      int v299 = 6LL;
                    }
                    else {
                      int v299 = 4LL;
                    }
                    sub_1812AB304((uint64_t)v17, (uint64_t)v24, v361, v345, HIDWORD(v339), (uint64_t)v349, v299, 0LL, 0);
                  }
                }

                goto LABEL_458;
              }

  if ((_DWORD)v14) {
    goto LABEL_54;
  }
  if (*((_DWORD *)v37 + 6) != 1)
  {
    uint64_t v18 = *(_DWORD *)(a1 + 140);
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0;
    uint64_t v33 = v18;
    uint64_t v34 = 0;
    unsigned int v35 = 0;
    sub_1812D3A10((uint64_t)&v30, "PRAGMA ", 7u);
    if (a2) {
      sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
    }
    __int128 v19 = v34;
    if (v34 + 13 >= v32)
    {
      sub_1812D3A10((uint64_t)&v30, "auto_vacuum=1", 0xDu);
      uint64_t v20 = v31;
      if (!v31) {
        goto LABEL_33;
      }
    }

    else
    {
      v34 += 13;
      qmemcpy(&v31[v19], "auto_vacuum=1", 13);
      uint64_t v20 = v31;
      if (!v31) {
        goto LABEL_33;
      }
    }

    v20[v34] = 0;
    if (v33 && (v35 & 0x400) == 0)
    {
      int v21 = (const char *)sub_1812F24E0(&v30);
      goto LABEL_34;
    }

          *(void *)(v10 + 64) = v11;
          goto LABEL_19;
        }
      }

      else
      {
        int v11 = *(void *)(v7 + 64);
        if (v11) {
          goto LABEL_7;
        }
      }

      *(void *)(v9 + 8) = v10;
      if (!v10)
      {
        *(void *)uint64_t v9 = 0LL;
        *(_BYTE *)(v9 + 49) = 2;
        goto LABEL_19;
      }

      goto LABEL_18;
    }

  *(void *)(v11 + 192) = 0LL;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)int v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(a1 + 200) = v11;
  *(void *)int v11 = a1;
  *(void *)(v11 + 8) = a2;
  if (*(void *)a1)
  {
    uint64_t v13 = (void *)sub_1812F2264(*(void *)a1, 0x18uLL);
    if (v13) {
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v13 = (void *)sub_18126F0AC(24LL);
    if (v13)
    {
LABEL_20:
      uint64_t v14 = *(void *)(a1 + 192);
      *(void *)(a1 + 192) = v13;
      *uint64_t v13 = v14;
      v13[1] = v11;
      v13[2] = sub_181342F60;
      if (*(_BYTE *)(v10 + 103)) {
        return;
      }
      goto LABEL_28;
    }
  }

  uint64_t v15 = *(void **)a1;
  sub_181268E88(*(void *)(v15[4] + 56LL) + 56LL, "sqlite_returning", 0LL);
  __int128 v16 = *(void **)(v11 + 8);
  if (v16) {
    sub_181311F48(v15, v16);
  }
  sub_1812F20DC(v15, (void *)v11);
  if (!*(_BYTE *)(v10 + 103))
  {
LABEL_28:
    *(void *)(v11 + 16) = "sqlite_returning";
    uint64_t v17 = v11 + 16;
    *(_WORD *)(v17 + 16) = 662;
    *(_BYTE *)(v17 + 18) = 1;
    uint64_t v18 = *(void *)(*(void *)(v10 + 32) + 56LL);
    *(void *)(v17 + 40) = v18;
    *(void *)(v17 + 48) = v18;
    *(_BYTE *)(v17 + 72) = -106;
    *(void *)(v17 + 56) = v17 + 72;
    *(void *)(v17 + 80) = v17;
    *(void *)(v17 + 120) = a2;
    if (sub_181268E88(v18 + 56, "sqlite_returning", v17) == v17 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
    {
      *(_BYTE *)(v10 + 103) = 1;
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      unsigned int v25 = *(void *)(v10 + 344);
      if (v25)
      {
        sub_1812DC47C(v25, "out of memory", v19, v20, v21, v22, v23, v24, v27);
        for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
  }

    __int128 v16 = *v6 - 1LL;
    *(_WORD *)((char *)&v6[6 * v16 + 6] + 1) = *(_WORD *)((_BYTE *)&v6[6 * v16 + 6] + 1) & 0xFFF7 | (8 * (v3 >> 31));
    if ((v3 & 0x80000000) != 0)
    {
      int v3 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v3;
    }

    v6[6 * v16 + 7] = v3;
    goto LABEL_21;
  }

  unint64_t v7 = *v6 + 1;
  char v8 = (unsigned int *)(v6 + 7);
  while ((*(_WORD *)((_BYTE *)v8 - 3) & 8) == 0
       || sub_18131BA10(0LL, *(unsigned __int8 **)(v8 - 5), a2, 0xFFFFFFFFLL))
  {
    --v7;
    v8 += 6;
    if (v7 < 2) {
      goto LABEL_9;
    }
  }

  return *v8;
}

    uint64_t v15 = sub_1812A4980(v12, v8, 0LL) == 0;
    goto LABEL_19;
  }

  uint64_t v15 = 0;
LABEL_19:
  if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
    sub_181303838(v8);
  }
  sub_1812F20DC(*(void **)(v8 + 24), (void *)v8);
  if (v12)
  {
    if ((*(_WORD *)(v12 + 20) & 0x9000) != 0 || *(_DWORD *)(v12 + 32)) {
      sub_181303838(v12);
    }
    sub_1812F20DC(*(void **)(v12 + 24), (void *)v12);
  }

  if (v15) {
    return 0LL;
  }
LABEL_28:
  __int128 v16 = *((_DWORD *)a2 + 1);
  uint64_t v17 = *((_DWORD *)a3 + 1);
  uint64_t v18 = v17 | v16;
  if (((v17 | v16) & 0x800) != 0)
  {
    if ((v16 & v17 & 0x800) == 0 || *((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2)) {
      return 2LL;
    }
    return 0LL;
  }

  __int128 v19 = *a2;
  uint64_t v20 = *a3;
  if (v19 == 71 || v19 != v20)
  {
    if (v19 == 113)
    {
      uint64_t v20 = *a3;
    }

    if (v20 != 113 || sub_18131BA10(a1, a2, *((void *)a3 + 2), a4) >= 2)
    {
      if (*a2 != 169 || *a3 != 167 || (*((_DWORD *)a3 + 11) & 0x80000000) == 0 || *((_DWORD *)a2 + 11) != (_DWORD)a4) {
        return 2LL;
      }
      __int128 v19 = 169;
      int v21 = (const char *)*((void *)a2 + 1);
      if (!v21)
      {
LABEL_74:
        if (((*((_DWORD *)a3 + 1) ^ *((_DWORD *)a2 + 1)) & 0x404) != 0) {
          return 2LL;
        }
        if ((v18 & 0x10000) == 0)
        {
          if ((v18 & 0x1000) != 0
            || (v18 & 0x20) == 0 && sub_18131BA10(a1, *((void *)a2 + 2), *((void *)a3 + 2), a4))
          {
            return 2LL;
          }

          if (sub_18131BA10(a1, *((void *)a2 + 3), *((void *)a3 + 3), a4)
            || sub_18131BF58(*((void *)a2 + 4), *((void *)a3 + 4), a4))
          {
            return 2LL;
          }

          uint64_t v30 = *a2;
          if (v30 != 117 && v30 != 170 && (v18 & 0x4000) == 0)
          {
            if (*((_DWORD *)a2 + 12) != *((_DWORD *)a3 + 12) || v30 == 175 && a2[2] != a3[2]) {
              return 2LL;
            }
            if (v30 != 49)
            {
              uint64_t v31 = *((_DWORD *)a2 + 11);
              if (v31 != (_DWORD)a4 && v31 != *((_DWORD *)a3 + 11)) {
                return 2LL;
              }
            }
          }
        }

        return 0LL;
      }

      goto LABEL_32;
    }

    return 1LL;
  }

  int v21 = (const char *)*((void *)a2 + 1);
  if (!v21) {
    goto LABEL_74;
  }
LABEL_32:
  if (v19 <= 167)
  {
    if (v19 == 113)
    {
      unsigned int v25 = (unsigned __int8 *)*((void *)a3 + 1);
      if (v25)
      {
        while (1)
        {
          unsigned int v26 = *(unsigned __int8 *)v21;
          uint64_t v27 = *v25;
          if ((_DWORD)v26 == (_DWORD)v27)
          {
            if (!*v21) {
              goto LABEL_74;
            }
          }

          else if (byte_1813C6343[v26] != byte_1813C6343[v27])
          {
            return 2LL;
          }

          ++v21;
          ++v25;
        }
      }

      return 2LL;
    }

    if (v19 == 121) {
      return 0LL;
    }
    goto LABEL_66;
  }

  if (v19 != 172 && v19 != 168)
  {
LABEL_66:
    uint64_t v28 = (const char *)*((void *)a3 + 1);
    if (v28 && v19 != 167 && v19 != 169 && strcmp(v21, v28)) {
      return 2LL;
    }
    goto LABEL_74;
  }

  for (uint64_t i = (unsigned __int8 *)*((void *)a3 + 1); ; ++i)
  {
    int v23 = *(unsigned __int8 *)v21;
    unint64_t v24 = *i;
    if ((_DWORD)v23 == (_DWORD)v24) {
      break;
    }
    if (byte_1813C6343[v23] != byte_1813C6343[v24]) {
      return 2LL;
    }
LABEL_55:
    ++v21;
  }

  if (*v21) {
    goto LABEL_55;
  }
  __int16 v29 = *((_DWORD *)a2 + 1) & 0x1000000;
  if ((HIBYTE(*((_DWORD *)a3 + 1)) & 1) == HIBYTE(v29)
    && (!v29 || !sub_18131BE5C(a1, *((void *)a2 + 9), *((void *)a3 + 9), 1)))
  {
    goto LABEL_74;
  }

  return 2LL;
}

    *(_BYTE *)(v11 + 221) = 1;
    int v23 = sub_18129F858(v8, a2, 0);
    uint64_t result = (uint64_t)sub_1812BBC2C((_BYTE *)v11, (uint64_t)v23, 0LL, 0LL, 0LL, v24, v25, v26);
    *(_BYTE *)(v11 + 221) = 0;
    if ((*(_BYTE *)(v8 + 50) & 8) == 0)
    {
      uint64_t v33 = *(_DWORD *)(v12 + 144);
      uint64_t v34 = (v33 + 2);
      if (*(_DWORD *)(v12 + 148) <= v33)
      {
        sub_18131044C(v12, 49LL, 0LL, v34, 0LL, v30, v31, v32);
        uint64_t v36 = *(void *)(v11 + 16);
        if (!v36)
        {
LABEL_38:
          if (!*(void *)(v11 + 168) && (*(_BYTE *)(*(void *)v11 + 96LL) & 8) == 0) {
            *(_BYTE *)(v11 + 35) = 1;
          }
          uint64_t v36 = sub_1812DC63C((uint64_t *)v11, v27, v28, v34, v29, v30, v31, v32);
        }
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v33 + 1;
        unsigned int v35 = *(void *)(v12 + 136) + 40LL * v33;
        *(void *)unsigned int v35 = 49LL;
        *(_DWORD *)(v35 + 8) = v34;
        *(void *)(v35 + 12) = 0LL;
        *(void *)(v35 + 28) = 0LL;
        *(void *)(v35 + 20) = 0LL;
        *(_DWORD *)(v35 + 36) = 0;
        uint64_t v36 = *(void *)(v11 + 16);
        if (!v36) {
          goto LABEL_38;
        }
      }

      uint64_t v43 = *(void *)(v11 + 168);
      if (!v43) {
        uint64_t v43 = v11;
      }
      *(_BYTE *)(v43 + 33) = 1;
      uint64_t result = sub_1812B9B68((uint64_t *)v36, 70LL, 787LL, 2LL, 0LL, 0LL, 0xFFFFFFFFLL, v32);
      uint64_t v44 = *(_DWORD *)(v36 + 144);
      uint64_t v45 = __OFSUB__(v44, 1);
      uint64_t v46 = v44 - 1;
      if (v46 < 0 == v45) {
        *(_WORD *)(*(void *)(v36 + 136) + 40LL * v46 + 2) = 4;
      }
    }

    if ((_DWORD)v22)
    {
      uint64_t result = *(void *)(v12 + 24);
      uint64_t v47 = ~(_DWORD)v22;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
        return sub_18131E420(result, v12, v47);
      }
      else {
        *(_DWORD *)(*(void *)(result + 80) + 4LL * v47) = *(_DWORD *)(v12 + 144);
      }
    }
  }

  return result;
}

  if (!v16)
  {
    unsigned int v26 = 0;
    if (!a5) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }

  if ((*(_BYTE *)(v12 + 50) & 4) != 0 || !v14)
  {
LABEL_29:
    uint64_t v43 = a5;
    unsigned int v26 = 0;
    if ((_DWORD)a3 == 128) {
      uint64_t v27 = "DELETE";
    }
    else {
      uint64_t v27 = "UPDATE";
    }
    uint64_t v28 = v16;
    while (1)
    {
      uint64_t v30 = v28[16];
      if (v30 != v9) {
        goto LABEL_53;
      }
      if (!a4) {
        goto LABEL_33;
      }
      uint64_t v31 = (unsigned int *)*((void *)v28 + 4);
      if (!v31) {
        goto LABEL_33;
      }
      uint64_t v32 = *a4;
      uint64_t v33 = 0LL;
      uint64_t v34 = *v31;
      while (2)
      {
        unsigned int v35 = 0LL;
        while (2)
        {
          uint64_t v36 = *(_BYTE **)&v31[4 * v35 + 2];
          for (uint64_t j = *(unsigned __int8 **)&a4[6 * v33 + 4]; ; ++j)
          {
            int v38 = *v36;
            uint64_t v39 = *j;
            if ((_DWORD)v38 != (_DWORD)v39) {
              break;
            }
            if (!*v36)
            {
              if ((v35 & 0x80000000) == 0) {
                goto LABEL_33;
              }
              goto LABEL_42;
            }

      if (++v17 != v16) {
        continue;
      }
      break;
    }
    }

  while ((_DWORD)v12 != *(unsigned __int16 *)(v22 + 94) || !*(_BYTE *)(v22 + 98) || *(void *)(v22 + 72))
  {
LABEL_17:
    uint64_t v22 = *(void *)(v22 + 40);
    if (!v22) {
      goto LABEL_56;
    }
  }

  if (!v13)
  {
    if ((*(_WORD *)(v22 + 99) & 3) == 2)
    {
      if (v21 && (int)v12 >= 1)
      {
        if (v12 >= 0xD
          && ((unint64_t)v21 >= a3 + 16 * (unint64_t)v12 + 52
           || a3 + 64 >= (unint64_t)v21 + 4 * v12))
        {
          size_t v41 = v12 & 7;
          if ((v12 & 7) == 0) {
            size_t v41 = 8LL;
          }
          uint64_t v40 = v12 - v41;
          uint64_t v42 = (const float *)(a3 + 128);
          uint64_t v43 = (unsigned __int128 *)(v21 + 2);
          uint64_t v44 = v40;
          do
          {
            uint64_t v45 = v42 - 16;
            uint64_t v46 = (unsigned __int128)vld4q_f32(v45);
            uint64_t v47 = (unsigned __int128)vld4q_f32(v42);
            *(v43 - 1) = v46;
            void *v43 = v47;
            v42 += 32;
            v43 += 2;
            v44 -= 8LL;
          }

          while (v44);
        }

        else
        {
          uint64_t v40 = 0LL;
        }

        uint64_t v48 = (_DWORD *)v21 + v40;
        unsigned int v49 = (int *)(a3 + 16 * v40 + 64);
        uint64_t v50 = v12 - v40;
        do
        {
          uint64_t v51 = *v49;
          v49 += 4;
          *v48++ = v51;
          --v50;
        }

        while (v50);
      }

      goto LABEL_73;
    }

    goto LABEL_17;
  }

  if ((int)v12 < 1)
  {
    LODWORD(v23) = 0;
    goto LABEL_54;
  }

  int v23 = 0LL;
  unint64_t v24 = *(void *)(v22 + 8);
  while (2)
  {
    if (*(__int16 *)(v24 + 2 * v23) < 0)
    {
LABEL_54:
      if ((_DWORD)v23 == (_DWORD)v12) {
        break;
      }
      goto LABEL_17;
    }

    unsigned int v25 = *(void *)(a2 + 8) + 16LL * *(unsigned __int16 *)(v24 + 2 * v23);
    unsigned int v26 = *(_WORD *)(v25 + 14);
    if ((v26 & 0x200) != 0)
    {
      uint64_t v28 = *(void *)v25 - 1LL;
      if ((v26 & 4) != 0)
      {
      }

      uint64_t v27 = (const char *)(v28 + 1);
    }

    else
    {
      uint64_t v27 = 0LL;
    }

    if (!v27) {
      uint64_t v27 = "BINARY";
    }
    uint64_t v31 = *(_BYTE **)(*(void *)(v22 + 64) + 8 * v23);
    while (2)
    {
      uint64_t v32 = *v31;
      uint64_t v33 = *(unsigned __int8 *)v27;
      if ((_DWORD)v32 != (_DWORD)v33)
      {
        if (byte_1813C6343[v32] != byte_1813C6343[v33]) {
          goto LABEL_54;
        }
        goto LABEL_36;
      }

      if (*v31)
      {
LABEL_36:
        ++v31;
        ++v27;
        continue;
      }

      break;
    }

    uint64_t v34 = 0LL;
    unsigned int v35 = *(unsigned __int8 **)v25;
    while (2)
    {
      uint64_t v36 = *(_BYTE **)(a3 + 16 * v34 + 72);
      uint64_t v37 = v35;
LABEL_43:
      int v38 = *v36;
      uint64_t v39 = *v37;
      if ((_DWORD)v38 != (_DWORD)v39)
      {
        if (byte_1813C6343[v38] != byte_1813C6343[v39])
        {
          goto LABEL_54;
        }

        goto LABEL_42;
      }

      break;
    }

    if (*v36)
    {
LABEL_42:
      ++v36;
      ++v37;
      goto LABEL_43;
    }

    if (v21) {
      *((_DWORD *)v21 + v23) = *(_DWORD *)(a3 + 16 * v34 + 64);
    }
    if ((_DWORD)v12 == (_DWORD)v34) {
      goto LABEL_54;
    }
    break;
  }

            ++v25;
            v24 += 16LL;
          }
        }

        goto LABEL_8;
      }

      uint64_t v42 = (unsigned __int8 *)sub_18129C928(v20, v22, 0LL, 0LL);
      int v11 = (uint64_t)v42;
      if (v18)
      {
        uint64_t v43 = *v18;
        if (v18[1] > *v18)
        {
          *uint64_t v18 = v43 + 1;
          uint64_t v44 = &v18[6 * v43];
          *((void *)v44 + 2) = 0LL;
          *((void *)v44 + 3) = 0LL;
          *((void *)v44 + 1) = v42;
          if (!*(_BYTE *)(v20 + 103)) {
            goto LABEL_44;
          }
          goto LABEL_8;
        }

        uint64_t v45 = sub_18133E1F4((uint64_t)*v85, v18, v42);
      }

      else
      {
        uint64_t v45 = (int *)sub_18133E190(*v85, v42);
      }

      uint64_t v18 = v45;
      if (!*(_BYTE *)(v20 + 103))
      {
LABEL_44:
        uint64_t v46 = &v19[6 * v17];
        uint64_t v47 = (const void *)*((void *)v46 + 2);
        if (v47)
        {
          uint64_t v48 = *v18;
          unsigned int v49 = strlen(*((const char **)v46 + 2)) + 1;
          uint64_t v50 = (void *)sub_1812F2264(v20, v49);
          uint64_t v51 = v50;
          if (v50) {
            memcpy(v50, v47, v49);
          }
          int v21 = &v18[6 * v48 - 6];
          *((void *)v21 + 2) = v51;
          *(_WORD *)((char *)v21 + 25) = *(_WORD *)((_BYTE *)v21 + 25) & 0xFFFC | *(_WORD *)((_BYTE *)&v19[6 * v17 + 6]
                                                                                           + 1) & 3;
        }
      }

      sub_181358CC8(v7, *(void *)(v7 + 8), a1, 1);
LABEL_19:
      uint64_t v14 = *(_DWORD *)(v7 + 56);
      if (v14 >= 2)
      {
        *(_DWORD *)(v7 + 56) = v14 - 1;
        return;
      }

      sub_181359E08(v7);
      uint64_t v15 = (void (**)(uint64_t))&off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_27:
        (*v15)(v7);
        return;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      unint64_t v7 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v15 = (void (**)(uint64_t))&xmmword_18C465410;
        goto LABEL_27;
      }
    }
  }

    ;
  }

  while (sqlite3_step(v5) == 100);
  unsigned int v26 = sqlite3_reset(v5);
  if (!v13) {
    uint64_t v13 = v26;
  }
LABEL_29:
  uint64_t v18 = *(void **)(a1 + 480);
  if (v18)
  {
    __int128 v19 = (sqlite3_stmt *)v18[3];
    uint64_t v20 = (void *)v18[4];
    int v21 = v20[3];
    if (v21) {
      xmmword_18C465400(v21);
    }
    sub_1812F20DC(v20, v18);
    uint64_t v22 = v20[3];
    if (v22) {
      xmmword_18C465410(v22);
    }
    sqlite3_finalize(v19);
  }

  *(void *)(a1 + 480) = 0LL;
  if (v12) {
    int v23 = v13 == 0;
  }
  else {
    int v23 = 0;
  }
  if (!v23 || a2 == 0) {
    return v13;
  }
  else {
    return 101LL;
  }
}

        LODWORD(v7) = 0;
        goto LABEL_19;
      }

      uint64_t v125 = *(double *)v13;
      if (*(double *)v13 >= -9.22337204e18)
      {
        if (v125 <= 9.22337204e18) {
          *(void *)&unint64_t v7 = (uint64_t)v125;
        }
        else {
          LODWORD(v7) = -1;
        }
      }

      else
      {
        LODWORD(v7) = 0;
      }

      uint64_t v17 = 97441;
LABEL_19:
      sub_1812CF36C(v17);
    }

    return 0LL;
  }

  if (v9 == a3)
  {
    if (a2)
    {
      unsigned __int8 v10 = a1[3];
      goto LABEL_8;
    }

    goto LABEL_18;
  }

  if (v9 + 1 != a3)
  {
    if (*(_DWORD *)(v7 + 64) != 1)
    {
      *(void *)(v7 + 184) = v6 + 16;
      __int128 v16 = sub_181399718(a1, 1);
      if (!(_DWORD)v16)
      {
        int v23 = sqlite3_column_value((sqlite3_stmt *)a1[7], a3 + 1);
        sqlite3_result_value(a2, v23);
      }

      *(void *)(v7 + 184) = 0LL;
      return v16;
    }

    if (*(_DWORD *)(v7 + 68))
    {
      if (!a2)
      {
        uint64_t v17 = 97978;
        goto LABEL_19;
      }

      if (!*(void *)a2)
      {
        uint64_t v17 = 97255;
        goto LABEL_19;
      }

      if ((~*(unsigned __int16 *)(*(void *)a2 + 20LL) & 0x401) == 0)
      {
        __int128 v19 = sqlite3_mprintf( "cannot UPDATE a subset of columns on fts5 contentless-delete table: %s",  *(const char **)(v7 + 16));
        *((_DWORD *)a2 + 9) = 1;
        sub_181269368(*(void *)a2, v19, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if (v19)
        {
          uint64_t v20 = (void (**)(char *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
            --qword_18C468B10;
            off_18C4653A8(v19);
            __int128 v19 = (char *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              return 0LL;
            }
            uint64_t v20 = (void (**)(char *))&xmmword_18C465410;
          }

          (*v20)(v19);
        }
      }
    }

    return 0LL;
  }

  if (v8 != 1 && v8 != 4)
  {
    if (v8 != 2) {
      return 0LL;
    }
    int v21 = a1[8];
    if (v21) {
      uint64_t v22 = *(_DWORD *)(v21 + 28);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v34 = *(_DWORD *)(v7 + 92);
    if (v34)
    {
      if (v34 == 2)
      {
        if (v22 >= 2)
        {
          unsigned int v35 = 0LL;
          LODWORD(v36) = 0;
          uint64_t v37 = 0;
          int v38 = 0LL;
          uint64_t v39 = v22;
          uint64_t v40 = (v22 - 1);
          while (1)
          {
            size_t v41 = a1[8];
            uint64_t v42 = *(void *)(*(void *)(v41 + 32) + 8 * v35);
            if (*(_DWORD *)(*(void *)v42 + 4LL)
              || (uint64_t v43 = *(void *)(*(void *)v42 + 24LL), v43 != *(void *)(*(void *)(v41 + 16) + 24LL))
              || *(int *)(v42 + 16) < 1)
            {
              uint64_t v46 = 0;
              uint64_t v45 = 0;
            }

            else
            {
              uint64_t v44 = *(void *)(v42 + 56);
              if (v44)
              {
                uint64_t v45 = sub_18139271C(v42 + 32, v43, v44 + 32, (uint64_t *)&pStmt, &v100);
                uint64_t v46 = v100;
              }

              else
              {
                uint64_t v45 = 0;
                uint64_t v46 = *(_DWORD *)(*(void *)(v42 + 48) + 16LL);
              }
            }

            uint64_t v47 = (v37 + 9);
            if (v47 > v36)
            {
              if ((_DWORD)v36) {
                LODWORD(v48) = v36;
              }
              else {
                LODWORD(v48) = 64;
              }
              uint64_t v48 = (int)v48;
              do
              {
                uint64_t v36 = v48;
                v48 *= 2LL;
              }

              while (v36 < v47);
              if (sqlite3_initialize()) {
                goto LABEL_152;
              }
              unsigned int v49 = sub_18127D33C((uint64_t)v38, v36);
              if (!v49) {
                goto LABEL_152;
              }
              int v38 = (char *)v49;
            }

            uint64_t v50 = (int8x8_t *)&v38[v37];
            if (v46 > 0x7F)
            {
              if (v46 >> 14)
              {
                uint64_t v51 = sub_181308E00(v50, (int)v46);
              }

              else
              {
                v50->i8[0] = (v46 >> 7) | 0x80;
                v50->i8[1] = v46 & 0x7F;
                uint64_t v51 = 2;
              }
            }

            else
            {
              v50->i8[0] = v46;
              uint64_t v51 = 1;
            }

            v37 += v51;
            if (!v45 && ++v35 < v40) {
              continue;
            }
            goto LABEL_111;
          }
        }

        uint64_t v39 = v22;
        uint64_t v45 = 0;
        int v38 = 0LL;
        uint64_t v37 = 0;
        LODWORD(v36) = 0;
LABEL_111:
        if (!v45 && v39 >= 1)
        {
          int v64 = 0LL;
          int v65 = v39;
          while (1)
          {
            unint64_t v66 = a1[8];
            uint64_t v67 = *(void *)(*(void *)(v66 + 32) + 8 * v64);
            if (*(_DWORD *)(*(void *)v67 + 4LL)
              || (uint64_t v68 = *(void *)(*(void *)v67 + 24LL), v68 != *(void *)(*(void *)(v66 + 16) + 24LL))
              || *(int *)(v67 + 16) < 1)
            {
              uint64_t v72 = 0;
            }

            else
            {
              uint64_t v69 = *(void *)(v67 + 56);
              if (v69)
              {
                p_pStmt = &pStmt;
                uint64_t v71 = &v100;
                uint64_t v72 = sub_18139271C(v67 + 32, v68, v69 + 32, (uint64_t *)&pStmt, &v100);
              }

              else
              {
                uint64_t v72 = 0;
                uint64_t v73 = *(void *)(v67 + 48);
                p_pStmt = (sqlite3_stmt **)(v73 + 8);
                uint64_t v71 = (unsigned int *)(v73 + 16);
              }

              uint64_t v74 = *v71;
              if ((_DWORD)v74)
              {
                uint64_t v75 = *p_pStmt;
                uint64_t v76 = (v74 + v37);
                if (v76 > v36)
                {
                  __srca = v75;
                  if ((_DWORD)v36) {
                    LODWORD(v77) = v36;
                  }
                  else {
                    LODWORD(v77) = 64;
                  }
                  uint64_t v77 = (int)v77;
                  do
                  {
                    uint64_t v36 = v77;
                    v77 *= 2LL;
                  }

                  while (v36 < v76);
                  if (sqlite3_initialize()) {
                    break;
                  }
                  uint64_t v78 = sub_18127D33C((uint64_t)v38, v36);
                  if (!v78) {
                    break;
                  }
                  int v38 = (char *)v78;
                  uint64_t v75 = __srca;
                }

                memcpy(&v38[v37], v75, v74);
                v37 += v74;
              }
            }

            if (!v72 && ++v64 < v65) {
              continue;
            }
            break;
          }
        }
      }

      else
      {
        int v38 = 0LL;
        uint64_t v37 = 0;
      }

  if (*(int *)(v1 + 24) >= 1)
  {
    for (uint64_t i = 0LL; i < *(int *)(v1 + 24); ++i)
    {
      unint64_t v7 = *(void *)(*(void *)(v1 + 32) + 8 * i);
      if (v7)
      {
        char v8 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v7);
          --qword_18C468B10;
          off_18C4653A8(v7);
          unint64_t v7 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            continue;
          }
          char v8 = &xmmword_18C465410;
        }

        (*v8)(v7);
      }
    }
  }

  uint64_t v9 = *(void *)(v1 + 32);
  if (v9)
  {
    unsigned __int8 v10 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_34:
      (*v10)(v9);
      goto LABEL_35;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    off_18C4653A8(v9);
    uint64_t v9 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned __int8 v10 = &xmmword_18C465410;
      goto LABEL_34;
    }
  }

  unint64_t v7 = *(void *)(v1 + 8);
  if (v7)
  {
    char v8 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      unint64_t v7 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_25;
      }
      char v8 = &xmmword_18C465410;
    }

    (*v8)(v7);
  }

  if (*(_DWORD *)(a2 + 8))
  {
    if (*(void *)(a1 + 16) != a2) {
      sub_181392F90(a2);
    }
  }

  unsigned int v25 = a7 + 1LL;
  if (v25 > 15) {
    unsigned int v26 = a7 + 1LL;
  }
  else {
    unsigned int v26 = 15LL;
  }
  if ((int)v12 <= 2 * v10[4])
  {
    if (sqlite3_initialize()) {
      return 7LL;
    }
    uint64_t v68 = v26;
    int v38 = (char *)sub_18126F0AC(16 * v12);
    if (!v38) {
      return 7LL;
    }
    uint64_t v39 = v38;
    uint64_t v40 = 2 * v12;
    bzero(v38, 16 * v12);
    size_t v41 = v10[5];
    unint64_t v66 = a4;
    uint64_t v67 = v10;
    if ((int)v41 < 1)
    {
      if (!v16) {
        goto LABEL_55;
      }
    }

    else
    {
      for (uint64_t i = 0LL; i != v41; ++i)
      {
        while (1)
        {
          uint64_t v45 = *(void *)(v16 + 8 * i);
          if (!v45) {
            break;
          }
          *(void *)(v16 + 8 * i) = *(void *)v45;
          uint64_t v46 = strlen((const char *)(v45 + 48));
          if (v46 < 1)
          {
            uint64_t v43 = 13;
          }

          else
          {
            uint64_t v47 = v46 + 1LL;
            uint64_t v43 = 13;
            do
              v43 ^= *(unsigned __int8 *)(v45 + 48 + (v47-- - 2)) ^ (8 * v43);
            while (v47 > 1);
          }

          uint64_t v44 = 8LL * (v43 % v40);
          *(void *)uint64_t v45 = *(void *)&v39[v44];
          *(void *)&v39[v44] = v45;
        }
      }
    }

    int v53 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v16);
      --qword_18C468B10;
      off_18C4653A8(v16);
      __int128 v16 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_55:
        unsigned __int8 v10 = v67;
        v67[5] = v40;
        *((void *)v67 + 4) = v39;
        if (a7 < 1)
        {
          uint64_t v55 = 13;
          a4 = v66;
          unsigned int v26 = v68;
          unsigned int v25 = a7 + 1LL;
        }

        else
        {
          uint64_t v54 = a7 + 1LL;
          uint64_t v55 = 13;
          a4 = v66;
          unsigned int v26 = v68;
          unsigned int v25 = a7 + 1LL;
          do
            v55 ^= __s2[(v54-- - 2)] ^ (8 * v55);
          while (v54 > 1);
        }

        LODWORD(v15) = (v11 ^ (8 * v55) ^ v55) % v40;
        if (sqlite3_initialize()) {
          return 7LL;
        }
        goto LABEL_23;
      }

      int v53 = &xmmword_18C465410;
    }

    (*v53)(v16);
    goto LABEL_55;
  }

  if (sqlite3_initialize()) {
    return 7LL;
  }
LABEL_23:
  uint64_t v27 = v26 + 113;
  uint64_t v28 = sub_18126F0AC(v27);
  if (!v28) {
    return 7LL;
  }
  uint64_t v22 = v28;
  __int16 v29 = a4;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  *(_DWORD *)(v28 + 16) = v27;
  *(_BYTE *)(v28 + 48) = v11;
  uint64_t v30 = v28 + 48;
  memcpy((void *)(v28 + 49), __s2, a7);
  *(_DWORD *)(v22 + 28) = a7;
  *(_BYTE *)(v30 + v25) = 0;
  uint64_t v31 = *((void *)v10 + 4);
  uint64_t v32 = 8LL * v15;
  *(void *)uint64_t v22 = *(void *)(v31 + v32);
  *(void *)(v31 + v32) = v22;
  *(_DWORD *)(v22 + 24) = a7 + 50;
  ++v10[4];
  uint64_t v33 = (int8x8_t *)(v22 + a7 + 50);
  if (a2 > 0x7F)
  {
    uint64_t v36 = a3;
    if (a2 >> 14)
    {
      uint64_t v34 = sub_181308E00(v33, a2);
    }

    else
    {
      v33->i8[0] = (a2 >> 7) | 0x80;
      v33->i8[1] = a2 & 0x7F;
      uint64_t v34 = 2;
    }

    unsigned int v35 = v29;
  }

  else
  {
    v33->i8[0] = a2;
    uint64_t v34 = 1;
    unsigned int v35 = v29;
    uint64_t v36 = a3;
  }

  uint64_t v20 = *(_DWORD *)(v22 + 24) + v34;
  *(void *)(v22 + 40) = a2;
  *(_DWORD *)(v22 + 20) = v20;
  *(_DWORD *)(v22 + 24) = v20;
  uint64_t v56 = *v10;
  if (*v10 == 1)
  {
    uint64_t v48 = 0;
    if ((v36 & 0x80000000) != 0)
    {
LABEL_75:
      *(_BYTE *)(v22 + 32) = 1;
      goto LABEL_99;
    }
  }

  else
  {
    uint64_t v48 = 0;
    *(_DWORD *)(v22 + 24) = ++v20;
    if (v56) {
      unint64_t v57 = -1;
    }
    else {
      unint64_t v57 = 0;
    }
    *(_WORD *)(v22 + 34) = v57;
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_75;
    }
  }

    *(double *)(a1 + 64) = a3;
    int v11 = a1 + 64;
    *(_BYTE *)(v11 + 16) = v3;
    *(_BYTE *)(v11 - 55) = 1;
    return v11;
  }

  unint64_t v7 = a1 + 64;
  ++*(_DWORD *)(a1 + 4LL * a2 + 128);
LABEL_3:
  if (!v6) {
    goto LABEL_18;
  }
  char v8 = sub_1813B1140(a1, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    else {
      *(void *)(a1 + 88 + ((uint64_t)(0xAAAAAAAB00000000LL * ((v8 - *(void *)(a1 + 48)) >> 3) + 0x100000000LL) >> 29)) = *(void *)(a1 + 88);
    }
    *(void *)(a1 + 88) = 0LL;
    uint64_t v12 = *(_OWORD *)(a1 + 64);
    *(void *)(v9 + 16) = *(void *)(a1 + 80);
    *(_OWORD *)uint64_t v9 = v12;
    goto LABEL_18;
  }

  return 0LL;
}

        int v11 = 97441;
      }

      else
      {
        switch(*(_BYTE *)(a1 + 32))
        {
          case 0:
            if (a2)
            {
              int v3 = *(int *)(*(void *)(a1 + 16) + 4LL * *(void *)(a1 + 8) - 4);
              goto LABEL_5;
            }

            int v11 = 97431;
            break;
          case 1:
            if (!a2) {
              goto LABEL_18;
            }
            int v3 = *(void *)(*(void *)(a1 + 16) + 8LL * *(void *)(a1 + 8) - 8);
            goto LABEL_5;
          case 2:
            if (!a2)
            {
              int v11 = 97397;
              break;
            }

            uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8LL * *(void *)(a1 + 8) - 8);
            uint64_t v13 = *a2;
            if (((*a2)[5] & 0x9000) != 0) {
              sub_181303888(*a2);
            }
            else {
              *((_WORD *)v13 + 10) = 1;
            }
            *(void *)uint64_t v13 = v12;
            *((_WORD *)v13 + 10) = 8;
            return 0LL;
          case 3:
            if (!a2) {
              goto LABEL_24;
            }
            uint64_t v14 = *(char **)(*(void *)(a1 + 16) + 8LL * *(void *)(a1 + 8) - 8);
            uint64_t v6 = (uint64_t)a2;
            unint64_t v7 = v14;
            char v8 = -1;
            uint64_t v9 = 1;
            unsigned __int8 v10 = -1LL;
            goto LABEL_9;
          case 4:
            if (a2)
            {
              __int128 v16 = *(void *)(a1 + 16);
              uint64_t v17 = *(void *)(a1 + 8) - 1LL;
              char v8 = *(_DWORD *)(v16 + 16 * v17 + 8);
              if ((v8 & 0x80000000) == 0)
              {
                uint64_t v6 = (uint64_t)a2;
                unint64_t v7 = *(char **)(v16 + 16 * v17);
                uint64_t v9 = 0;
                unsigned __int8 v10 = -1LL;
                goto LABEL_9;
              }
            }

            int v11 = 97366;
            break;
          default:
            int v3 = 0LL;
            if (!a2) {
              goto LABEL_18;
            }
            goto LABEL_5;
        }
      }

uint64_t sub_18127F460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v12 = 0;
  uint64_t v3 = *(void *)(v2 + 344);
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v4 = sub_1812FBF64(v3, *(_DWORD *)(a1 + 48), &v12);
  if ((_DWORD)v4) {
    return v4;
  }
  if (v12)
  {
    uint64_t v5 = *(void *)(v2 + 344);
    int v6 = *(_DWORD *)(v2 + 200);
    int v7 = (*(unsigned __int16 *)(v5 + 86) | (*(unsigned __int16 *)(v5 + 86) << 16)) & 0x1FE00;
    if (v7 >= v6) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, unint64_t))(**(void **)(v5 + 16) + 16LL))( *(void *)(v5 + 16),  *(void *)(a1 + 8),  v8,  (v7 | 0x18u) * (unint64_t)(v12 - 1) + 56);
  }

  else
  {
LABEL_8:
    unsigned int v9 = (*(uint64_t (**)(void, void, void, void))(**(void **)(v2 + 72) + 16LL))( *(void *)(v2 + 72),  *(void *)(a1 + 8),  *(void *)(v2 + 200),  *(void *)(v2 + 200) * (*(_DWORD *)(a1 + 48) - 1));
    if (v9 == 522) {
      uint64_t v4 = 0LL;
    }
    else {
      uint64_t v4 = v9;
    }
  }

  if (*(_DWORD *)(a1 + 48) != 1) {
    goto LABEL_14;
  }
  if ((_DWORD)v4)
  {
    *(void *)(v2 + 136) = -1LL;
    *(void *)(v2 + 144) = -1LL;
LABEL_14:
    unsigned __int8 v10 = *(uint64_t (**)(void, void, void, uint64_t))(v2 + 296);
    if (!v10) {
      return v4;
    }
    goto LABEL_15;
  }

  *(_OWORD *)(v2 + 136) = *(_OWORD *)(*(void *)(a1 + 8) + 24LL);
  unsigned __int8 v10 = *(uint64_t (**)(void, void, void, uint64_t))(v2 + 296);
  if (!v10) {
    return v4;
  }
LABEL_15:
  else {
    return 7LL;
  }
}

void *sub_18127F588( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_1812FA130(a1, a2, &a9);
}

uint64_t sub_18127F5B0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  char v6 = a2;
  int v22 = 0;
  else {
    int v8 = *(_DWORD *)(a3 + 8) + 1;
  }
  uint64_t v9 = sub_1812F2264(a1, v8 + 80LL);
  uint64_t v10 = v9;
  if (v9)
  {
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    *(_BYTE *)uint64_t v9 = v6;
    *(_WORD *)(v9 + 52) = -1;
    if (a3)
    {
      if (!v8)
      {
        int v13 = v22;
        if (v22) {
          int v14 = 276826112;
        }
        else {
          int v14 = 545261568;
        }
        *(_DWORD *)(v9 + 4) |= v14;
        *(_DWORD *)(v9 + 8) = v13;
        goto LABEL_29;
      }

      int v11 = (_BYTE *)(v9 + 80);
      *(void *)(v9 + 8) = v9 + 80;
      size_t v12 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v12)
      {
        memcpy((void *)(v9 + 80), *(const void **)a3, v12);
        v11[*(unsigned int *)(a3 + 8)] = 0;
        if (!a4) {
          goto LABEL_29;
        }
LABEL_18:
        int v15 = *v11;
        if ((char)byte_1813C6558[*v11] < 0)
        {
          uint64_t v16 = 0LL;
          if (v15 == 34) {
            int v17 = 67108992;
          }
          else {
            int v17 = 0x4000000;
          }
          *(_DWORD *)(v10 + 4) |= v17;
          if (v15 == 91) {
            int v15 = 93;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v19 = i;
            int v20 = v11[i];
            if (v20 == v15)
            {
              ++i;
              LOBYTE(v20) = v15;
            }

            v11[v16++] = v20;
          }

          v11[v16] = 0;
        }

        goto LABEL_29;
      }

      *int v11 = 0;
      if (a4) {
        goto LABEL_18;
      }
    }

void *sub_18127F750(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      *(void *)(a2 + 24) = a4;
      *(_DWORD *)(a2 + 4) |= *(_DWORD *)(a4 + 4) & 0x400208;
      int v5 = *(_DWORD *)(a4 + 40) + 1;
      *(_DWORD *)(a2 + 40) = v5;
      if (!a3) {
        return result;
      }
    }

    else
    {
      int v5 = 1;
      *(_DWORD *)(a2 + 40) = 1;
      if (!a3) {
        return result;
      }
    }

    *(void *)(a2 + 16) = a3;
    *(_DWORD *)(a2 + 4) |= *(_DWORD *)(a3 + 4) & 0x400208;
    int v7 = *(_DWORD *)(a3 + 40);
    if (v7 >= v5) {
      *(_DWORD *)(a2 + 40) = v7 + 1;
    }
  }

  else
  {
    char v6 = result;
    if (a3) {
      uint64_t result = sub_181309110(result, (unsigned __int8 *)a3);
    }
    if (a4) {
      return sub_181309110(v6, (unsigned __int8 *)a4);
    }
  }

  return result;
}

int *sub_18127F80C(uint64_t *a1, int *a2, unsigned __int8 *a3)
{
  if (!a2) {
    return (int *)sub_18133E190((void *)*a1, a3);
  }
  int v3 = *a2;
  if (a2[1] <= *a2) {
    return sub_18133E1F4(*a1, a2, a3);
  }
  *a2 = v3 + 1;
  uint64_t v4 = &a2[6 * v3];
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 1) = a3;
  return a2;
}

int *sub_18127F854( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = (void *)a4;
  int v14 = *(void **)a1;
  if (!a2 && a7)
  {
    if (*(void *)a7)
    {
      int v15 = "ON";
LABEL_7:
      sub_1812DC47C(a1, "a JOIN clause is required before %s", a3, a4, a5, a6, a7, a8, (char)v15);
      goto LABEL_31;
    }

    if (*(void *)(a7 + 8))
    {
      int v15 = "USING";
      goto LABEL_7;
    }
  }

  uint64_t v16 = (int *)sub_18127FB3C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16)
  {
    if (!a7)
    {
LABEL_40:
      if (a6) {
        sub_18128FDA0(v14, a6, 1);
      }
      return 0LL;
    }

uint64_t sub_18127FB3C( uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)*a1;
  if (a2)
  {
    size_t v12 = sub_18127FE00(a1, a2, 1LL, *a2, a5, a6, a7, a8);
    uint64_t v13 = (uint64_t)v12;
    if (!v12)
    {
      sub_18128FF4C(v10, a2);
      return v13;
    }

    uint64_t v14 = *v12 - 1LL;
    if (!a4) {
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v15 = sub_1812F2264(*a1, 0x70uLL);
    uint64_t v13 = v15;
    if (!v15) {
      return v13;
    }
    uint64_t v14 = 0LL;
    *(void *)uint64_t v15 = 0x100000001LL;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(void *)(v15 + 104) = 0LL;
    *(_DWORD *)(v15 + 72) = -1;
    if (!a4) {
      goto LABEL_30;
    }
  }

  uint64_t v16 = *(const void **)a4;
  if (!*(void *)a4)
  {
LABEL_30:
    if (a3 && (uint64_t v34 = *(const void **)a3) != 0LL)
    {
      size_t v35 = *(unsigned int *)(a3 + 8);
      uint64_t v36 = (_BYTE *)sub_1812F2264((uint64_t)v10, v35 + 1);
      uint64_t v37 = v36;
      if (v36)
      {
        memcpy(v36, v34, v35);
        v37[v35] = 0;
        if ((char)byte_1813C6558[*v37] < 0)
        {
          uint64_t v38 = 0LL;
          if (*v37 == 91) {
            int v39 = 93;
          }
          else {
            int v39 = *v37;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v41 = i;
            int v42 = v37[i];
            if (v42 == v39)
            {
              ++i;
              LOBYTE(v42) = v39;
            }

            v37[v38++] = v42;
          }

          v37[v38] = 0;
        }
      }
    }

    else
    {
      uint64_t v37 = 0LL;
    }

    uint64_t v43 = v13 + 104 * v14;
    *(void *)(v43 + 16) = 0LL;
    *(void *)(v43 + 24) = v37;
    return v13;
  }

  size_t v17 = *(unsigned int *)(a4 + 8);
  uint64_t v18 = (_BYTE *)sub_1812F2264((uint64_t)v10, v17 + 1);
  unsigned int v19 = v18;
  if (v18)
  {
    memcpy(v18, v16, v17);
    v19[v17] = 0;
    if ((char)byte_1813C6558[*v19] < 0)
    {
      uint64_t v20 = 0LL;
      if (*v19 == 91) {
        int v21 = 93;
      }
      else {
        int v21 = *v19;
      }
      for (int j = 1; ; ++j)
      {
        uint64_t v23 = j;
        int v24 = v19[j];
        if (v24 == v21)
        {
          ++j;
          LOBYTE(v24) = v21;
        }

        v19[v20++] = v24;
      }

      v19[v20] = 0;
    }
  }

  *(void *)(v13 + 104 * v14 + 24) = v19;
  if (a3 && (unsigned int v25 = *(const void **)a3) != 0LL)
  {
    size_t v26 = *(unsigned int *)(a3 + 8);
    int v27 = (_BYTE *)sub_1812F2264((uint64_t)v10, v26 + 1);
    uint64_t v28 = v27;
    if (v27)
    {
      memcpy(v27, v25, v26);
      v28[v26] = 0;
      if ((char)byte_1813C6558[*v28] < 0)
      {
        uint64_t v29 = 0LL;
        if (*v28 == 91) {
          int v30 = 93;
        }
        else {
          int v30 = *v28;
        }
        for (int k = 1; ; ++k)
        {
          uint64_t v32 = k;
          int v33 = v28[k];
          if (v33 == v30)
          {
            ++k;
            LOBYTE(v33) = v30;
          }

          v28[v29++] = v33;
        }

        v28[v29] = 0;
      }
    }
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  *(void *)(v13 + 104 * v14 + 16) = v28;
  return v13;
}

int *sub_18127FE00( uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v9 = a3;
  uint64_t v10 = a2;
  int v11 = *a2;
  int v12 = *a2 + a3;
  if (v12 >= 200)
  {
    sub_1812DC47C((uint64_t)a1, "too many FROM clause terms, max: %d", a3, a4, a5, a6, a7, a8, 200);
    return 0LL;
  }

  uint64_t v13 = *a1;
  else {
    uint64_t v14 = 2LL * v11 + (int)a3;
  }
  unint64_t v15 = 104 * v14 + 8;
  if (*(void *)(v13 + 496) > (unint64_t)a2)
  {
LABEL_13:
    uint64_t v16 = (int *)sub_1812F2310(v13, a2, v15);
    uint64_t v10 = v16;
    if (!v16) {
      return v10;
    }
    int v11 = *v16;
    goto LABEL_15;
  }

  if (v15 >= 0x81) {
    goto LABEL_13;
  }
LABEL_15:
  v10[1] = v14;
LABEL_16:
  if (v11 <= v8)
  {
    uint64_t v18 = v8;
  }

  else
  {
    uint64_t v17 = v11;
    uint64_t v18 = v8;
    uint64_t v19 = 26LL * v11;
    do
    {
      --v17;
      uint64_t v20 = &v10[26 * v9 + v19];
      __int128 v21 = *(_OWORD *)&v10[v19 - 24];
      __int128 v22 = *(_OWORD *)&v10[v19 - 16];
      *((_OWORD *)v20 - 5) = *(_OWORD *)&v10[v19 - 20];
      *((_OWORD *)v20 - 4) = v22;
      *((_OWORD *)v20 - 6) = v21;
      __int128 v23 = *(_OWORD *)&v10[v19 - 12];
      __int128 v24 = *(_OWORD *)&v10[v19 - 8];
      __int128 v25 = *(_OWORD *)&v10[v19 - 4];
      *(void *)uint64_t v20 = *(void *)&v10[v19];
      *((_OWORD *)v20 - 2) = v24;
      *((_OWORD *)v20 - 1) = v25;
      *((_OWORD *)v20 - 3) = v23;
      v19 -= 26LL;
    }

    while (v17 > v8);
    int v11 = *v10;
  }

  *uint64_t v10 = v11 + v9;
  bzero(&v10[26 * (int)v18 + 2], 104LL * v9);
  if (v9 >= 1)
  {
    uint64_t v26 = v8 + v9;
    if (v18 + 1 > v26) {
      uint64_t v27 = v18 + 1;
    }
    else {
      uint64_t v27 = v8 + v9;
    }
    uint64_t v28 = v27 - v18;
    if ((unint64_t)(v27 - v18) < 2)
    {
      uint64_t v29 = v18;
LABEL_30:
      uint64_t v32 = 104 * v29 + 72;
      do
      {
        *(int *)((char *)v10 + v32) = -1;
        ++v29;
        v32 += 104LL;
      }

      while (v29 < v26);
      return v10;
    }

    uint64_t v29 = v18 + (v28 & 0xFFFFFFFFFFFFFFFELL);
    int v30 = &v10[26 * (int)v18 + 44];
    unint64_t v31 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 26) = -1;
      *int v30 = -1;
      v30 += 52;
      v31 -= 2LL;
    }

    while (v31);
    if (v28 != (v28 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_30;
    }
  }

  return v10;
}

_BYTE *sub_181280000( void **a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15 = sub_1812F2264((uint64_t)*a1, 0x80uLL);
  uint64_t v16 = (_BYTE *)v15;
  if (v15) {
    uint64_t v17 = (_BYTE *)v15;
  }
  else {
    uint64_t v17 = v25;
  }
  if (!a2)
  {
    uint64_t v18 = sub_1812F2264((uint64_t)*a1, 0x51uLL);
    if (v18)
    {
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_BYTE *)uint64_t v18 = -76;
      *(_WORD *)(v18 + 52) = -1;
      *(_BYTE *)(v18 + 80) = 0;
      *(void *)(v18 + 8) = v18 + 80;
      *(_DWORD *)(v18 + 40) = 1;
    }

    a2 = sub_18133E190(*a1, (unsigned __int8 *)v18);
  }

  if (v16) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v25;
  }
  *((void *)v19 + 4) = a2;
  *uint64_t v17 = -118;
  *((_DWORD *)v19 + 1) = a8;
  *((void *)v19 + 1) = 0LL;
  int v20 = *((_DWORD *)a1 + 35) + 1;
  *((_DWORD *)a1 + 35) = v20;
  *((_DWORD *)v19 + 4) = v20;
  *(void *)(v19 + 20) = -1LL;
  *((_WORD *)v19 + 1) = 0;
  if (!a3)
  {
    if (*a1)
    {
      a3 = (_OWORD *)sub_1812F2264((uint64_t)*a1, 0x70uLL);
      if (!a3) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }

    a3 = (_OWORD *)sub_18126F0AC(112LL);
    if (a3)
    {
LABEL_14:
      a3[5] = 0u;
      a3[6] = 0u;
      a3[3] = 0u;
      a3[4] = 0u;
      a3[1] = 0u;
      a3[2] = 0u;
      *a3 = 0u;
    }
  }

LABEL_15:
  if (v16) {
    __int128 v21 = v16;
  }
  else {
    __int128 v21 = v25;
  }
  *((void *)v21 + 5) = a3;
  *((void *)v21 + 6) = a4;
  *((void *)v21 + 7) = a5;
  *((void *)v21 + 8) = a6;
  *((void *)v21 + 9) = a7;
  *((_OWORD *)v21 + 5) = 0u;
  *((void *)v21 + 12) = a9;
  *(_OWORD *)(v21 + 104) = 0u;
  *((void *)v21 + 15) = 0LL;
  if (*((_BYTE *)*a1 + 103))
  {
    sub_18128FDA0(*a1, (uint64_t)v17, v17 != v25);
    return 0LL;
  }

  return v16;
}

      ++v16;
      v17 += 26;
    }

    while (v16 < *v341);
  }

  if (*((_DWORD *)v2 + 12)) {
    return 2LL;
  }
  __int128 v103 = *(int **)(a2 + 40);
  if (*v103 <= 1) {
    goto LABEL_246;
  }
  __int128 v104 = 0LL;
  __int128 v105 = v103 + 28;
  uint64_t v106 = v103 + 2;
  while (2)
  {
    uint64_t v107 = *((void *)v105 + 4);
    if (*((void *)v106 + 4)) {
      uint64_t v108 = v107 == 0;
    }
    else {
      uint64_t v108 = 1;
    }
    if (v108) {
      goto LABEL_133;
    }
    if ((v105[15] & 0x20) != 0) {
      uint64_t v109 = 1;
    }
    else {
      uint64_t v109 = 2;
    }
    __sa = v109;
    int v339 = v106;
    if ((v105[15] & 4) == 0) {
      goto LABEL_182;
    }
    if ((*(_WORD *)((_BYTE *)v105 + 61) & 0x400) != 0 || *((void *)v105 + 9))
    {
      LOBYTE(v312) = 0;
      uint64_t v61 = "a NATURAL join may not have an ON or USING clause";
      goto LABEL_492;
    }

    uint64_t v110 = *(__int16 *)(v107 + 54);
    if (v110 < 1) {
      goto LABEL_181;
    }
    uint64_t v111 = 0LL;
    uint64_t v112 = 0LL;
    uint64_t v335 = *((void *)v105 + 4);
    while (2)
    {
      while (2)
      {
        uint64_t v114 = *(void *)(v107 + 8);
        if ((*(_WORD *)(v114 + 16 * v111 + 14) & 2) != 0) {
          goto LABEL_149;
        }
        uint64_t v115 = 0LL;
        uint64_t v116 = *(const char **)(v114 + 16 * v111);
        while (2)
        {
          if (v116 && (uint64_t v117 = *(unsigned __int8 *)v116, *v116))
          {
            uint64_t v118 = 0;
            uint64_t v119 = (unsigned __int8 *)(v116 + 1);
            do
            {
              v118 += byte_1813C6343[v117];
              uint64_t v120 = *v119++;
              uint64_t v117 = v120;
            }

            while (v120);
          }

          else
          {
            uint64_t v118 = 0;
          }

          uint64_t v121 = *(void *)&v103[26 * v115 + 10];
          uint64_t v122 = *(__int16 *)(v121 + 54);
          if (v122 < 1) {
            goto LABEL_152;
          }
          uint64_t v123 = 0;
          uint64_t v124 = *(void *)(v121 + 8);
          uint64_t v125 = v124;
          while (*(unsigned __int8 *)(v125 + 11) != v118)
          {
LABEL_161:
            v125 += 16LL;
            if (++v123 == v122) {
              goto LABEL_152;
            }
          }

          for (int j = 0LL; ; ++j)
          {
            uint64_t v127 = *(unsigned __int8 *)(*(void *)v125 + j);
            uint64_t v128 = v116[j];
            if ((_DWORD)v127 == (_DWORD)v128) {
              break;
            }
            if (byte_1813C6343[v127] != byte_1813C6343[v128]) {
              goto LABEL_161;
            }
LABEL_165:
            ;
          }

          if (*(_BYTE *)(*(void *)v125 + j)) {
            goto LABEL_165;
          }
          if ((*(_WORD *)(v124 + 16LL * v123 + 14) & 2) != 0)
          {
LABEL_152:
            int v9 = v115++ == v104;
            if (v9) {
              goto LABEL_148;
            }
            continue;
          }

          break;
        }

        uint64_t v112 = sub_181315030((uint64_t)v350, v112, 0LL);
        if (!v112)
        {
          ++v111;
          LOWORD(v110) = *(_WORD *)(v107 + 54);
          uint64_t v2 = v350;
          continue;
        }

        break;
      }

      if (v116)
      {
        uint64_t v129 = strlen(v116);
        int v130 = v129 + 1;
        if (*v350) {
          uint64_t v131 = (void *)sub_1812F2264(*v350, v130);
        }
        else {
          uint64_t v131 = (void *)sub_18126F0AC(v129 + 1);
        }
        uint64_t v113 = v131;
        if (v131) {
          memcpy(v131, v116, v130);
        }
        uint64_t v107 = v335;
      }

      else
      {
        uint64_t v113 = 0LL;
      }

      v112[2 * *(int *)v112 - 1] = v113;
      LOWORD(v110) = *(_WORD *)(v107 + 54);
LABEL_148:
      uint64_t v2 = v350;
LABEL_149:
      break;
    }

    if (v112)
    {
      *(_WORD *)((char *)v105 + 61) |= 0x1400u;
      *((void *)v105 + 9) = v112;
    }

    __int128 v21 = 0LL;
    goto LABEL_16;
  }

  uint64_t v16 = a5;
  int v65 = v14;
  uint64_t v17 = (int *)(a3 + 8);
  uint64_t v18 = *(unsigned int *)(a3 + 8) + 16LL * (v14 - 1) + 81;
  uint64_t v19 = *(unsigned int *)a4;
  if ((int)v19 >= 1)
  {
    int v20 = (const char **)(a4 + 2);
    do
    {
      if (*v20) {
        __int128 v21 = strlen(*v20) & 0x3FFFFFFF;
      }
      else {
        __int128 v21 = 0LL;
      }
      v18 += v21 + 1;
      v20 += 3;
      --v19;
    }

    while (v19);
  }

  int v64 = 1;
  uint64_t v10 = (void *)v66;
  if (!v66)
  {
LABEL_22:
    uint64_t result = (void *)sub_18126F0AC(v18);
    __int128 v22 = result;
    if (!result) {
      goto LABEL_3;
    }
    goto LABEL_28;
  }

  if (v159) {
    sub_1812F20DC(*a1, v159);
  }
  if (v164) {
    sub_1812F20DC(*a1, v164);
  }
}

  *((_WORD *)a1 + 10) = v4 & 0xBFFF;
  int v7 = a1[4] & 0xFFFFFFFFFFFFFFFELL;
  if ((int)v7 >= 1)
  {
    int v8 = *((void *)a1 + 1);
    int v9 = v8 + v7;
    uint64_t v10 = v8 + 2;
    if (v9 > v8 + 2) {
      uint64_t v10 = v9;
    }
    int v11 = v10 + ~v8;
    int v12 = (char *)*((void *)a1 + 1);
    if (v11 >= 0xE)
    {
      uint64_t v13 = (v11 >> 1) + 1;
      if (v11 < 0x3E)
      {
        uint64_t v14 = 0LL;
        goto LABEL_105;
      }

      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFE0LL;
      int v63 = (char *)(v8 + 32);
      int v64 = v13 & 0xFFFFFFFFFFFFFFE0LL;
      do
      {
        int v65 = v63 - 32;
        uint64_t v73 = vld2q_s8(v65);
        uint64_t v74 = vld2q_s8(v63);
        unint64_t v66 = v73.val[0];
        uint64_t v67 = v74.val[0];
        vst2q_s8(v65, *(int8x16x2_t *)((char *)&v73 + 16));
        vst2q_s8(v63, *(int8x16x2_t *)((char *)&v74 + 16));
        v63 += 64;
        v64 -= 32LL;
      }

      while (v64);
      if (v13 == v14) {
        goto LABEL_112;
      }
      if ((v13 & 0x18) != 0)
      {
LABEL_105:
        int v12 = (char *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF8LL));
        uint64_t v68 = (char *)(v8 + 2 * v14);
        uint64_t v69 = v14 - (v13 & 0xFFFFFFFFFFFFFFF8LL);
        do
        {
          uint64_t v72 = vld2_s8(v68);
          uint64_t v70 = v72.val[0];
          vst2_s8(v68, *(int8x8x2_t *)((char *)&v72 + 8));
          v68 += 16;
          v69 += 8LL;
        }

        while (v69);
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8LL)) {
          goto LABEL_112;
        }
        goto LABEL_111;
      }

      int v12 = (char *)(v8 + 2 * v14);
    }

    do
    {
LABEL_111:
      uint64_t v71 = *v12;
      *int v12 = v12[1];
      v12[1] = v71;
      v12 += 2;
    }

    while ((unint64_t)v12 < v9);
  }

  uint64_t v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_20:
  uint64_t v18 = *(_WORD *)(v6 + 60);
  sub_18130DB64(v14, 1, v6 + 58, (uint64_t)&v17);
  *(_WORD *)(v6 + 60) = v18;
LABEL_21:
  *(_DWORD *)(v6 + 48) |= 0x10u;
  return 0LL;
}

    sub_1813014B0(v2, *(void **)(a1 + 152));
  }

  int v7 = *(void *)(a1 + 376);
  if (v7)
  {
    do
    {
      int v8 = *(void *)(v7 + 40);
      int v9 = *(void **)v7;
      if (*(void *)v7)
      {
        uint64_t v10 = 40LL * *(int *)(v7 + 8) - 40;
        do
        {
          int v11 = *((char *)v9 + v10 + 1);
          if (v11 <= -6) {
            sub_18127ABFC(v2, v11, *(void *)((char *)v9 + v10 + 16));
          }
          v10 -= 40LL;
        }

        while (v10 != -40);
        sub_1813014B0(v2, v9);
      }

      sub_1812F20DC(v2, (void *)v7);
      int v7 = v8;
    }

    while (v8);
  }

  if (*(_BYTE *)(a1 + 267))
  {
    int v12 = *(void *)(a1 + 128);
    if (v12)
    {
      uint64_t v13 = *(_DWORD *)(a1 + 32);
      if (v13)
      {
        uint64_t v14 = v12 + ((uint64_t)v13 << 6);
        uint64_t v15 = *(void **)(v12 + 24);
        if (!v15[102])
        {
          while (1)
          {
            if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
            {
              sub_181303838(v12);
            }

            else
            {
              if (!*(_DWORD *)(v12 + 32)) {
                goto LABEL_36;
              }
              sub_1813014B0(v15, *(void **)(v12 + 40));
              *(_DWORD *)(v12 + 32) = 0;
            }

            *(_WORD *)(v12 + 20) = 0;
LABEL_36:
            v12 += 64LL;
            if (v12 >= v14) {
              goto LABEL_40;
            }
          }
        }

        do
        {
          if (*(_DWORD *)(v12 + 32))
          {
            uint64_t v16 = *(void **)(v12 + 40);
            if (v16) {
              sub_1812F20DC(v15, v16);
            }
          }

          v12 += 64LL;
        }

        while (v12 < v14);
      }
    }

  if ((_DWORD)result == 100) {
    goto LABEL_16;
  }
  return result;
}

    uint64_t v16 = v15 + 2;
    LOBYTE(v19) = v18[v15];
LABEL_16:
    *((_BYTE *)&v34 + ++v15) = v19;
    if (v17 == v15) {
      goto LABEL_32;
    }
  }

  if (!v20) {
LABEL_32:
  }
    int v11 = sub_1812F2E3C(a1, 770, 0LL, 0);
  if ((v11 & 0x80000000) != 0) {
    goto LABEL_35;
  }
  int v8 = v11 | 0x600000000LL;
LABEL_4:
  int v33 = v8;
  int v9 = 770;
  if (sqlite3_initialize()) {
    goto LABEL_42;
  }
LABEL_38:
  __int128 v22 = sub_18126F0AC(184LL);
  if (!v22)
  {
LABEL_42:
    uint64_t v10 = 7LL;
    if (off_18C54FCE0(v33))
    {
      __int128 v23 = 0LL;
      __int128 v25 = 0LL;
      __int128 v24 = 1;
LABEL_44:
      uint64_t v26 = *__error();
      uint64_t v50 = 0u;
      uint64_t v51 = 0u;
      uint64_t v48 = 0u;
      unsigned int v49 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v26, __strerrbuf, 0x4FuLL);
      uint64_t v27 = &byte_1813CEAEE;
      if (v25) {
        uint64_t v27 = v25;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50594, v26, "close", v27, __strerrbuf);
      if ((v24 & 1) == 0) {
        goto LABEL_47;
      }
    }

    goto LABEL_53;
  }

  __int128 v23 = v22;
  *(void *)(v22 + 176) = 0LL;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)__int128 v22 = 0u;
  *(_DWORD *)(v22 + 120) = v9;
  uint64_t v34 = 0u;
  size_t v35 = 0LL;
  uint64_t v38 = 0LL;
  int v39 = 0u;
  uint64_t v40 = 0u;
  uint64_t v41 = 0u;
  int v42 = 0u;
  uint64_t v43 = 0u;
  uint64_t v44 = 0u;
  uint64_t v45 = 0u;
  uint64_t v46 = 0LL;
  uint64_t v36 = "dummy";
  uint64_t v37 = off_189B6CD60;
  void *v7 = v33;
  *(void *)(v22 + 48) = v7;
  uint64_t v10 = sub_18126BAE4((uint64_t)&v34, v33, v22, a1, 0);
  if ((_DWORD)v10)
  {
    if (off_18C54FCE0(v33))
    {
      __int128 v24 = 0;
      __int128 v25 = *(const char **)(v23 + 56);
      goto LABEL_44;
    }

  uint64_t v18 = v16 - 1;
  if (v18 <= 6)
  {
    uint64_t v17 = &dword_1813CD880[v18];
    goto LABEL_17;
  }

  uint64_t v19 = 0;
LABEL_18:
  int v20 = sub_1812F2E3C(a1, 514, v15, v19);
  if ((v20 & 0x80000000) != 0)
  {
    if (*__error() == 1)
    {
      __int128 v23 = *__error();
      int v33 = 0u;
      uint64_t v34 = 0u;
      unint64_t v31 = 0u;
      uint64_t v32 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v23, __strerrbuf, 0x4FuLL);
      int v12 = 23LL;
      sqlite3_log(23, "os_unix.c:%d: (%d) %s(%s) - %s");
    }

    else
    {
      int v12 = sub_1812F2E28(44931);
      __int128 v24 = *__error();
      int v33 = 0u;
      uint64_t v34 = 0u;
      unint64_t v31 = 0u;
      uint64_t v32 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v24, __strerrbuf, 0x4FuLL);
      sqlite3_log(v12, "os_unix.c:%d: (%d) %s(%s) - %s");
    }

    return v12;
  }

  __int128 v21 = v20;
  if (!geteuid())
  {
    __int128 v22 = off_18C54FD40(v21, __strerrbuf);
    if (v22 || (void)v31 != __PAIR64__(v13, v14))
    {
      if (!off_18C54FEC0() && off_18C54FEA8(v21, v14, v13))
      {
        int v12 = sub_1812F2E28(41169);
LABEL_26:
        *a3 = -1;
        off_18C54FCE0(v21);
        return v12;
      }

      if (v22)
      {
        int v12 = 1802LL;
        goto LABEL_26;
      }
    }
  }

  int v12 = sub_1812F75E0(v21, a2, v8);
  if ((_DWORD)v12) {
    goto LABEL_26;
  }
  *a3 = v21;
  return v12;
}

    uint64_t v13 = *(const char **)(v5 + 8);
    uint64_t v28 = 1;
    uint64_t v26 = dword_18C54FA50;
    uint64_t v27 = 1LL;
    uint64_t v29 = *(_DWORD *)(a1 + 24);
    if (fsctl(v13, 0xC0207A17uLL, &v26, 0) == -1)
    {
      uint64_t v15 = *__error();
      int v12 = 5LL;
      if (((1LL << v15) & 0x1000000800012010LL) == 0)
      {
        if (v15 == 1) {
          goto LABEL_45;
        }
        goto LABEL_47;
      }

  if (*(void *)(a1 + 64)) {
    (*(void (**)(void, void))(**(void **)(a1 + 24) + 144LL))(*(void *)(a1 + 24), 0LL);
  }
  char v6 = *(uint64_t ***)(a1 + 72);
  if (!v6) {
    goto LABEL_63;
  }
  if (!*((_DWORD *)v6 + 8)) {
    goto LABEL_47;
  }
  int v7 = *v6;
  int v8 = **v6;
  if (v8)
  {
    if (*(void *)v8) {
      (*(void (**)(void))v8)(*(void *)(v8 + 8));
    }
    int v9 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v8);
      --qword_18C468B10;
      off_18C4653A8(v8);
      int v8 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_28;
      }
      int v9 = &xmmword_18C465410;
    }

    (*v9)(v8);
LABEL_28:
    *((_DWORD *)v7 + 2) = 0;
    void *v7 = 0LL;
  }

  uint64_t v10 = v6[5];
  if (v10)
  {
    if (*v10)
    {
      (*(void (**)(uint64_t *))(*v10 + 8))(v6[5]);
      *uint64_t v10 = 0LL;
    }

    int v11 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v10);
      --qword_18C468B10;
      off_18C4653A8(v10);
      uint64_t v10 = (uint64_t *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_38;
      }
      int v11 = &xmmword_18C465410;
    }

    (*v11)((uint64_t)v10);
  }

    uint64_t result = sub_1812F2440(result, 1016LL);
    int v5 = (void *)result;
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }

  int v5 = *(void **)(result + 472);
  if (v5)
  {
    char v6 = (void *)(result + 472);
  }

  else
  {
    int v5 = *(void **)(result + 464);
    if (!v5)
    {
      ++*(_DWORD *)(result + 456);
      goto LABEL_15;
    }

    char v6 = (void *)(result + 464);
  }

  *char v6 = *v5;
  ++*(_DWORD *)(result + 448);
LABEL_16:
  *int v5 = *(void *)v3;
  int v7 = v5 + 4;
  *(void *)int v3 = v5;
  uint64_t v4 = v5 + 1;
  *(_WORD *)(v3 + 48) = 41;
  *(void *)(v3 + 32) = v7;
LABEL_17:
  *uint64_t v4 = a2;
  v4[1] = 0LL;
  int v8 = *(void **)(v3 + 24);
  if (v8)
  {
    if (*v8 >= a2) {
      *(_WORD *)(v3 + 50) &= ~1u;
    }
    int v9 = v8 + 1;
  }

  else
  {
    int v9 = (void *)(v3 + 16);
  }

  *int v9 = v4;
  *(void *)(v3 + 24) = v4;
  return result;
}

  *(void *)(a1 + 32) = 0LL;
  return result;
}

  if (*(void *)(v11 + 392))
  {
    if (!__s) {
      goto LABEL_38;
    }
    __int128 v21 = strlen(__s) + 1;
    __int128 v22 = (void *)sub_1812F2264(v11, v21);
    if (!v22) {
      goto LABEL_33;
    }
    __int128 v23 = v22;
    memcpy(v22, v8, v21);
    (*(void (**)(void, uint64_t, uint64_t, void *))(v11 + 392))(*(void *)(v11 + 408), v11, a2, v23);
    sub_1812F20DC((void *)v11, v23);
  }

  if (*(void *)(v11 + 400))
  {
    __int128 v24 = sub_1812F2264(v11, 0x40uLL);
    if (v24)
    {
      __int128 v25 = v24;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)__int128 v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_WORD *)(v24 + 20) = 1;
      *(void *)(v24 + 24) = v11;
      sub_181269368(v24, v8, -1LL, 1u, 0LL);
      uint64_t v26 = *(unsigned __int16 *)(v25 + 20);
      if ((~v26 & 0x202) != 0 || *(_BYTE *)(v25 + 22) != 2)
      {
        if ((v26 & 1) != 0)
        {
LABEL_28:
          if ((*(_WORD *)(v25 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32)) {
            sub_181303838(v25);
          }
          sub_1812F20DC(*(void **)(v25 + 24), (void *)v25);
          goto LABEL_32;
        }

        uint64_t v27 = sub_181303998((int *)v25, 2);
      }

      else
      {
        uint64_t v27 = *(void *)(v25 + 8);
      }

      if (v27) {
        (*(void (**)(void, uint64_t, void))(v11 + 400))( *(void *)(v11 + 408),  v11,  *(unsigned __int8 *)(v11 + 100));
      }
      goto LABEL_28;
    }
  }

          ++v27;
        }

        if (byte_1813C6343[v29] == byte_1813C6343[v30]) {
          goto LABEL_15;
        }
        uint64_t v26 = *(void *)(v26 + 40);
        if (!v26)
        {
LABEL_20:
          sub_1812DC47C((uint64_t)a1, "no such index: %s", v16, v17, v18, v19, v20, v21, *(void *)(a2 + 96));
          __int128 v22 = 0LL;
          a1[29] = 1;
          return v22;
        }
      }
    }
  }

  return v22;
}

      uint64_t result = (void *)sub_1812F2440(v8, 496LL);
      int v12 = (uint64_t)result;
      if (result) {
        goto LABEL_16;
      }
LABEL_123:
      *(void *)(v9 + 56LL * a3 + 32) = 0LL;
      return result;
    }

    int v12 = *(void *)(v8 + 472);
    if (v12)
    {
      uint64_t v13 = (void *)(v8 + 472);
    }

    else
    {
      int v12 = *(void *)(v8 + 464);
      if (!v12)
      {
        ++*(_DWORD *)(v8 + 456);
        goto LABEL_15;
      }

      uint64_t v13 = (void *)(v8 + 464);
    }

    *uint64_t v13 = *(void *)v12;
    ++*(_DWORD *)(v8 + 448);
  }

  else
  {
    uint64_t result = (void *)sub_18126F0AC(496LL);
    int v12 = (uint64_t)result;
    if (!result) {
      goto LABEL_123;
    }
  }

    if (v6 >= 65) {
      int v7 = v6;
    }
    else {
      int v7 = v4;
    }
    LOBYTE(v4) = v7 | 0x40;
    goto LABEL_19;
  }

  if ((*(_BYTE *)(a1 + 5) & 0x10) != 0)
  {
    char v6 = sub_1812A3C7C(*(unsigned __int8 **)(*(void *)(*(void *)(a1 + 32) + 32LL) + 8LL));
    if (v4 >= 65 && v6 >= 65)
    {
      return 1LL;
    }

    goto LABEL_15;
  }

  if (!v4) {
    return 1LL;
  }
LABEL_19:
  return a2 > 66;
}

      uint64_t v13 = *(char *)(a3 + v5);
      uint64_t result = sub_1812A3C7C(v11);
      if (v13 < 65 || (int)result < 65)
      {
        else {
          uint64_t v16 = v13;
        }
        if ((v16 & 0xFFFFFFBF) != 1 && v13 != 65)
        {
LABEL_31:
          uint64_t v17 = 0;
          while (1)
          {
            uint64_t v18 = *v11;
            if (v18 == 173) {
              uint64_t v17 = 1;
            }
            int v11 = (unsigned __int8 *)*((void *)v11 + 2);
          }

          if (v18 == 176) {
            uint64_t v18 = v11[2];
          }
          switch(v18)
          {
            case 153:
            case 155:
              if (v13 > 66) {
                goto LABEL_3;
              }
              break;
            case 154:
              if (!v17) {
                goto LABEL_3;
              }
              break;
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
              goto LABEL_4;
            case 167:
              break;
            default:
              if (v18 == 117 && v13 == 66 && v17 == 0) {
                goto LABEL_3;
              }
              break;
          }

          goto LABEL_4;
        }
      }

      else
      {
        uint64_t v15 = v13 < 0x43 && result < 0x43;
        if (v13 != 65 && !v15) {
          goto LABEL_31;
        }
      }

    if (++v14 == v12) {
      return 0LL;
    }
  }

  while (v17 != *(_DWORD *)(v18 + 88))
  {
    uint64_t v18 = *(void *)(v18 + 40);
    if (!v18) {
      goto LABEL_15;
    }
  }

  return 1LL;
}

  __int128 v21 = *(void *)a1;
  if (v11 != *(unsigned __int8 *)(*(void *)a1 + 102LL))
  {
    __int128 v22 = *(void *)(*(void *)(v21 + 32) + 40LL);
    if (v22)
    {
      if (!*(_BYTE *)(v21 + 101) || *(_BYTE *)(v22 + 16))
      {
        sub_1812DC47C(a1, "temporary storage cannot be changed from within a transaction", a3, a4, a5, a6, a7, a8, a10);
        return;
      }

      sub_1812B54BC(*(void *)(*(void *)(v21 + 32) + 40LL), a9);
      *(void *)(*(void *)(v21 + 32) + 40LL) = 0LL;
      sub_1812D6078(v21);
    }

    *(_BYTE *)(v21 + 102) = v11;
  }

    uint64_t v27 = &__s[strlen(__s) & 0x3FFFFFFF];
    uint64_t v29 = v27[1];
    uint64_t v28 = v27 + 1;
    if (v29)
    {
      while (1)
      {
        int v30 = strcmp(v28, "textkey");
        unint64_t v31 = &v28[strlen(v28) & 0x3FFFFFFF];
        if (!v30) {
          break;
        }
        uint64_t v32 = (size_t)&v31[(strlen(v31 + 1) & 0x3FFFFFFF) + 1];
        int v33 = *(unsigned __int8 *)(v32 + 1);
        uint64_t v28 = (const char *)(v32 + 1);
        if (!v33) {
          return 0LL;
        }
      }

      uint64_t v36 = a1;
      uint64_t v37 = a2;
      uint64_t v38 = (char *)(v31 + 1);
      size_t v35 = -1;
      goto LABEL_22;
    }

    return 0LL;
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = v7[(v10 & 0x3FFFFFFF) + 1 + v15];
    if ((byte_1813C6558[v17] & 8) == 0) {
      break;
    }
    uint64_t v18 = ((((char)(2 * v17) >> 7) & 0xF9) + v17) & 0xF | (16 * v16);
    if ((v15 & 1) != 0) {
      v39[v15 >> 1] = v18;
    }
    ++v15;
    uint64_t v16 = v18;
  }

  while (v15 != 80);
  size_t v35 = v15 >> 1;
  uint64_t v38 = v39;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
LABEL_22:
  sqlite3_key_v2(v36, v37, v38, v35);
  return 1LL;
}

          *(_BYTE *)(v7 + 54) = 1;
          uint64_t v13 = sub_181358B7C(v7, v12, 0LL, (uint64_t)a1);
          if (*(_BYTE *)(v7 + 50)) {
            goto LABEL_19;
          }
          if (v13) {
            sub_18135C9BC( (uint64_t)a1,  (unsigned int *)v7,  (unint64_t)(v13 - *(void *)(v7 + 8)) >> 4,  a3[v8 + 2]);
          }
          int v9 = v8 + 3;
          v8 += 2LL;
          if (v9 >= a2) {
            goto LABEL_18;
          }
        }

        int v12 = 0LL;
        goto LABEL_15;
      }

    if (v6 == v7) {
      return result;
    }
    char v6 = (v6 + 1) % *(_DWORD *)(v3 + 60);
  }

  uint64_t v10 = v5 - 1;
  return *(v10 - 1) == 0;
}

          *(void *)(v10 + 40) = 0LL;
          *(_DWORD *)(v10 + 48) = 0;
          *(_DWORD *)(v10 + 32) = 0;
          uint64_t v101 = *(void *)v6;
          if (!*(_DWORD *)(v10 + 56))
          {
            uint64_t v36 = *(unsigned __int8 *)(*(void *)v6 + 463LL);
            if (v6[76] == (_DWORD)v36 || (uint64_t v37 = *(_DWORD *)(v10 + 8)) == 0)
            {
              uint64_t result = sub_181374204(v101, v10, v4);
              uint64_t v13 = 0;
            }

            else
            {
              uint64_t result = sub_1813651BC( v36,  *(char **)v10,  v37,  (char **)(v10 + 16),  (void *)(v10 + 24),  (int *)(v10 + 48),  v4);
              uint64_t v13 = 0;
              *(void *)(v10 + 40) = *(void *)(v10 + 16);
            }

            goto LABEL_212;
          }

          uint64_t v106 = 0;
          if (*(_DWORD *)(v10 + 80) == 1)
          {
            uint64_t result = sub_181374320( v101,  *(void *)(v10 + 120),  (void *)(v10 + 24),  (void *)(v10 + 40),  (_DWORD *)(v10 + 48));
            uint64_t v13 = result;
            *uint64_t v4 = *(void *)(v10 + 40) == 0LL;
LABEL_212:
            *a3 = v13;
            *(void *)(v3 + 40) = *(void *)(v10 + 24);
            return result;
          }

          unsigned int v98 = v4;
          unsigned int v99 = v3;
          uint64_t v38 = 0LL;
          uint64_t v13 = 0;
          uint64_t v100 = v6[76];
          memset(&v108[3], 0, 64);
          if (v100) {
            int v39 = -1;
          }
          else {
            int v39 = 1;
          }
          __int128 v102 = v39;
          uint64_t v107 = 0uLL;
          memset(v108, 0, 48);
          uint64_t v40 = v101;
LABEL_72:
          if (v13)
          {
            int v42 = 0LL;
            goto LABEL_100;
          }

          uint64_t v43 = 0LL;
          uint64_t v44 = 0;
          int v42 = 0LL;
          uint64_t v45 = 120LL;
          uint64_t v46 = (_DWORD *)v108 + 2;
          break;
      }

      while (1)
      {
        uint64_t v38 = v106;
        if (v43 >= *(int *)(v10 + 80) || v106 != 0)
        {
          uint64_t v13 = 0;
          goto LABEL_100;
        }

        if (v43 == *(_DWORD *)(v10 + 60)) {
          break;
        }
        unsigned int v49 = *(void *)(v10 + v45);
        if (v49)
        {
          uint64_t result = sub_181374320(v40, v49, (void *)v46 - 2, (void *)v46 - 1, v46);
          uint64_t v13 = result;
          if (!*((void *)v46 - 1)) {
            uint64_t v106 = 1;
          }
          goto LABEL_87;
        }

        uint64_t v13 = 0;
        *(v46 - 6) = 1;
LABEL_76:
        ++v43;
        v46 += 8;
        v45 += 40LL;
        if (v13)
        {
          uint64_t v38 = v106;
LABEL_100:
          uint64_t v52 = *(_DWORD *)(v10 + 80);
          if (v52 < 1)
          {
            LOBYTE(v54) = v38;
LABEL_159:
            if (!(_BYTE)v54)
            {
              uint64_t v80 = *((int *)&v108[2 * v52 - 1] - 2);
              uint64_t result = sqlite3_initialize();
              if ((_DWORD)result || (uint64_t result = sub_18126F0AC(v80 + 8)) == 0)
              {
                uint64_t v13 = 7;
                int v3 = v99;
                goto LABEL_212;
              }

              uint64_t v81 = (unsigned __int8 *)result;
              uint64_t result = (uint64_t)memcpy((void *)result, *(const void **)&v108[2 * *(int *)(v10 + 80) - 2], (int)v80 + 1);
              *(void *)&v81[v80] = 0LL;
              uint64_t v82 = *(_DWORD *)(v10 + 80);
              if (v82 >= 2)
              {
                uint64_t v83 = 0LL;
                uint64_t v84 = 0;
                int v85 = -1;
                int v86 = (unsigned __int8 **)v108;
                while (1)
                {
                  if (!*((_DWORD *)v86 - 4))
                  {
                    uint64_t v87 = *v86;
                    __int128 v104 = v81;
                    __int128 v105 = v87;
                    __int128 v103 = v81;
                    uint64_t result = sub_181372A68(&v103, v82 + v85, 0, 1, &v105, &v104);
                    uint64_t v82 = *(_DWORD *)(v10 + 80);
                    if (!(_DWORD)result)
                    {
LABEL_168:
                      uint64_t v40 = v101;
                      goto LABEL_170;
                    }

                    uint64_t v84 = (_DWORD)v103 - (_DWORD)v81;
                  }

                  ++v83;
                  v86 += 4;
                  --v85;
                  if (v83 >= v82 - 1) {
                    goto LABEL_168;
                  }
                }
              }

              LODWORD(v83) = 0;
              uint64_t v84 = 0;
LABEL_170:
              if ((_DWORD)v83 != v82 - 1)
              {
                uint64_t v41 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_71;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v81);
                --qword_18C468B10;
                uint64_t result = off_18C4653A8(v81);
                uint64_t v81 = (unsigned __int8 *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v41 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_71:
                  uint64_t result = (*v41)(v81);
                  goto LABEL_72;
                }

                goto LABEL_72;
              }

              LOBYTE(v54) = 0;
              *(void *)(v10 + 24) = v42;
              *(void *)(v10 + 40) = v81;
              *(_DWORD *)(v10 + 48) = v84;
              *(_DWORD *)(v10 + 32) = 1;
            }

            int v3 = v99;
            *unsigned int v98 = v54;
            goto LABEL_212;
          }

          int v53 = 0;
          uint64_t v54 = v38;
          LOBYTE(v55) = v38;
          uint64_t v56 = v38;
          unint64_t v57 = v102;
          while (2)
          {
            if (!v13 && !v56)
            {
              uint64_t v58 = (unint64_t)&v108[2 * v53 - 1];
              if (*(_DWORD *)v58) {
                goto LABEL_103;
              }
              int v59 = *(void *)(v58 + 8);
              uint64_t v60 = v59 <= v42;
              if (v59 == v42) {
                uint64_t v61 = 0;
              }
              else {
                uint64_t v61 = -1;
              }
              if (!v60) {
                uint64_t v61 = 1;
              }
              if (((v61 * v57) & 0x80000000) == 0) {
                goto LABEL_103;
              }
              int v62 = (uint64_t *)(v58 | 8);
              if (*(_DWORD *)(v10 + 60) == v53)
              {
                uint64_t result = sub_181374204(v40, v10, &v106);
                unint64_t v57 = v102;
                uint64_t v13 = 0;
                int v63 = &v108[2 * v53 - 1];
                *((void *)v63 + 2) = *(void *)(v10 + 40);
                *((_DWORD *)v63 + 6) = *(_DWORD *)(v10 + 48);
                int *v62 = *(void *)(v10 + 24);
                uint64_t v38 = v106;
                uint64_t v54 = v106;
                LOBYTE(v55) = v106;
              }

              else
              {
                int v64 = *(void *)(v10 + 40LL * v53 + 120);
                if (v64)
                {
                  int v65 = v40;
                  unint64_t v66 = v54;
                  uint64_t v67 = &v108[2 * v53 - 1];
                  uint64_t result = sub_181374320(v65, v64, (void *)(v58 | 8), (void *)v67 + 2, (_DWORD *)v67 + 6);
                  uint64_t v13 = result;
                  if (*((void *)v67 + 2))
                  {
                    unint64_t v57 = v102;
                    uint64_t v54 = v66;
                  }

                  else
                  {
                    uint64_t v38 = 1LL;
                    uint64_t v106 = 1;
                    uint64_t v54 = 1LL;
                    LOBYTE(v55) = 1;
                    unint64_t v57 = v102;
                  }

                  uint64_t v40 = v101;
                }

                else
                {
                  uint64_t v13 = 0;
                  *(_DWORD *)uint64_t v58 = 1;
                }
              }

              if (*v62 == v42) {
                uint64_t v68 = 0;
              }
              else {
                uint64_t v68 = -1;
              }
              if (*v62 > v42) {
                uint64_t v68 = 1;
              }
              if (v68 * v57 > 0)
              {
                int v53 = 0;
                int v42 = *v62;
              }

              if (v13 || (_BYTE)v55)
              {
                uint64_t v56 = v55;
              }

              else
              {
                while (1)
                {
                  uint64_t v69 = (unint64_t)&v108[2 * v53 - 1];
                  if (*(_DWORD *)v69) {
                    break;
                  }
                  uint64_t v70 = *(void *)(v69 + 8);
                  uint64_t v71 = v70 <= v42;
                  if (v70 == v42) {
                    uint64_t v72 = 0;
                  }
                  else {
                    uint64_t v72 = -1;
                  }
                  if (!v71) {
                    uint64_t v72 = 1;
                  }
                  if (((v72 * v57) & 0x80000000) == 0) {
                    break;
                  }
                  uint64_t v73 = (uint64_t *)(v69 | 8);
                  if (*(_DWORD *)(v10 + 60) == v53)
                  {
                    uint64_t result = sub_181374204(v40, v10, &v106);
                    unint64_t v57 = v102;
                    uint64_t v13 = 0;
                    uint64_t v74 = &v108[2 * v53 - 1];
                    *((void *)v74 + 2) = *(void *)(v10 + 40);
                    *((_DWORD *)v74 + 6) = *(_DWORD *)(v10 + 48);
                    *uint64_t v73 = *(void *)(v10 + 24);
                    uint64_t v38 = v106;
                    uint64_t v54 = v106;
                    uint64_t v55 = v106;
                  }

                  else
                  {
                    uint64_t v75 = *(void *)(v10 + 40LL * v53 + 120);
                    if (v75)
                    {
                      uint64_t v76 = v40;
                      uint64_t v77 = v54;
                      uint64_t v78 = &v108[2 * v53 - 1];
                      uint64_t result = sub_181374320(v76, v75, (void *)(v69 | 8), (void *)v78 + 2, (_DWORD *)v78 + 6);
                      uint64_t v13 = result;
                      if (*((void *)v78 + 2))
                      {
                        uint64_t v55 = 0;
                        unint64_t v57 = v102;
                        uint64_t v54 = v77;
                      }

                      else
                      {
                        uint64_t v38 = 1LL;
                        uint64_t v106 = 1;
                        uint64_t v54 = 1LL;
                        uint64_t v55 = 1;
                        unint64_t v57 = v102;
                      }

                      uint64_t v40 = v101;
                    }

                    else
                    {
                      uint64_t v55 = 0;
                      uint64_t v13 = 0;
                      *(_DWORD *)uint64_t v69 = 1;
                    }
                  }

                  if (*v73 == v42) {
                    uint64_t v79 = 0;
                  }
                  else {
                    uint64_t v79 = -1;
                  }
                  if (*v73 > v42) {
                    uint64_t v79 = 1;
                  }
                  if (v79 * v57 > 0)
                  {
                    int v53 = 0;
                    int v42 = *v73;
                  }

                  uint64_t v56 = v55;
                  if (v13 || v55) {
                    goto LABEL_104;
                  }
                }

                LOBYTE(v55) = 0;
LABEL_103:
                uint64_t v56 = 0;
                uint64_t v13 = 0;
              }

  *a5 = v12;
  if (v10 == *a1) {
    return 0LL;
  }
  *a1 = v10;
  return 1LL;
}

      char v6 = v1[6];
      if (!v6) {
        goto LABEL_22;
      }
      int v7 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_21;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v6);
      --qword_18C468B10;
      off_18C4653A8(v6);
      char v6 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v7 = &xmmword_18C465410;
LABEL_21:
        (*v7)(v6);
      }

  memcpy(v13, __src, a4);
  *((_DWORD *)a2 + 2) = a4;
  if (v12)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void *)a1 + *(int *)(a1 + 8);
    int v20 = (int)v16;
    do
    {
      __int128 v21 = v20;
      *(_BYTE *)(v19 + v18++) = v20 | 0x80;
      __int128 v22 = v20 > 0x7F;
      v20 >>= 7;
    }

    while (v22);
    *(_BYTE *)(v19 + v18 - 1) = v21 & 0x7F;
    __int128 v23 = *(_DWORD *)(a1 + 8) + v18;
    *(_DWORD *)(a1 + 8) = v23;
  }

  else
  {
    __int128 v23 = *(_DWORD *)(a1 + 8);
  }

  __int128 v25 = 0LL;
  uint64_t v26 = *(void *)a1 + v23;
  uint64_t v27 = (a4 - v16);
  do
  {
    uint64_t v28 = v27;
    *(_BYTE *)(v26 + v25++) = v27 | 0x80;
    __int128 v22 = v27 > 0x7F;
    v27 >>= 7;
  }

  while (v22);
  *(_BYTE *)(v26 + v25 - 1) = v28 & 0x7F;
  uint64_t v29 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v29 + v25;
  memcpy((void *)(*(void *)a1 + v29 + v25), &__src[(int)v16], (a4 - v16));
  int v30 = *(int *)(a1 + 8) + (uint64_t)(a4 - (int)v16);
  *(_DWORD *)(a1 + 8) = v30;
  if (!a5) {
    return 0LL;
  }
  unint64_t v31 = 0LL;
  uint64_t v32 = *(void *)a1 + v30;
  int v33 = a6;
  do
  {
    uint64_t v34 = v33;
    *(_BYTE *)(v32 + v31++) = v33 | 0x80;
    __int128 v22 = v33 > 0x7F;
    v33 >>= 7;
  }

  while (v22);
  *(_BYTE *)(v32 + v31 - 1) = v34 & 0x7F;
  size_t v35 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v35 + v31;
  memcpy((void *)(*(void *)a1 + v35 + v31), a5, a6);
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 8) += a6;
  return result;
}

  int v7 = a1[7];
  if (v7)
  {
    if (*((_DWORD *)a1 + 8) == 5) {
      int v8 = *((_DWORD *)a1 + 9) != 0;
    }
    else {
      int v8 = 2LL;
    }
    int v9 = *(void *)(v2 + 40) + 8 * v8;
    int v11 = *(void *)(v9 + 40);
    uint64_t v10 = (void *)(v9 + 40);
    if (!v11)
    {
      sqlite3_reset((sqlite3_stmt *)a1[7]);
      *uint64_t v10 = v7;
      int v12 = (sqlite3_stmt **)a1[9];
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_22;
    }

    sqlite3_finalize((sqlite3_stmt *)a1[7]);
  }

  int v12 = (sqlite3_stmt **)a1[9];
  if (!v12) {
    goto LABEL_28;
  }
LABEL_22:
  sqlite3_finalize(*v12);
  uint64_t v13 = (void (**)(sqlite3_stmt **))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_27:
    (*v13)(v12);
    goto LABEL_28;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
  --qword_18C468B10;
  off_18C4653A8(v12);
  int v12 = (sqlite3_stmt **)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v13 = (void (**)(sqlite3_stmt **))&xmmword_18C465410;
    goto LABEL_27;
  }

        uint64_t result = 7LL;
        goto LABEL_28;
      }

      if ((v9 & 7) != 0)
      {
        uint64_t v15 = *(void *)a1;
        goto LABEL_20;
      }
    }

    else
    {
      int v9 = 0;
    }

    if (sqlite3_initialize()) {
      goto LABEL_15;
    }
    uint64_t v16 = sub_18127D33C(v7, 32LL * (v9 + 8) + 64);
    if (!v16) {
      goto LABEL_15;
    }
    uint64_t v15 = v16;
    if (!v7)
    {
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
    }

    *(void *)a1 = v16;
    *(_DWORD *)(v16 + 24) = v9;
LABEL_20:
    *(_DWORD *)(v15 + 24) = v9 + 1;
    uint64_t v17 = v15 + 32LL * v9;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    if (v8 < 0) {
      int v8 = strlen(__s);
    }
    uint64_t v18 = sqlite3_initialize();
    uint64_t v19 = 0LL;
    uint64_t result = 7LL;
    if ((v8 & 0x80000000) == 0 && !v18)
    {
      int v20 = (_BYTE *)sub_18126F0AC((v8 + 1));
      uint64_t v19 = v20;
      if (v20)
      {
        memcpy(v20, __s, v8);
        uint64_t result = 0LL;
        v19[v8] = 0;
      }

      else
      {
        uint64_t result = 7LL;
      }
    }

    *(void *)(v15 + 32LL * v9 + 40) = v19;
    goto LABEL_28;
  }

  return result;
}

      v11->f64[(int)v50] = v22 + v11->f64[(int)v50];
      __int128 v21 = (v21 + 1);
    }
  }

  uint64_t v14 = v12;
  if (!v12)
  {
LABEL_8:
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 96))(a2, 0xFFFFFFFFLL, &v50);
    if (!v14)
    {
      uint64_t v15 = *v10;
      if ((int)v15 < 1)
      {
        uint64_t v19 = 0.0;
        goto LABEL_41;
      }

      uint64_t v16 = (float64x2_t *)*((void *)v10 + 2);
      uint64_t v17 = (double)(int)v50 * 0.75 / *((double *)v10 + 1) + 0.25;
      if (v15 >= 4)
      {
        uint64_t v18 = v15 & 0x7FFFFFFC;
        uint64_t v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v17, 0);
        uint64_t v29 = v16 + 1;
        int v30 = v11 + 1;
        uint64_t v19 = 0.0;
        unint64_t v31 = (float64x2_t)vdupq_n_s64(0x400199999999999AuLL);
        uint64_t v32 = (float64x2_t)vdupq_n_s64(0x3FF3333333333333uLL);
        int v33 = v15 & 0xFFFFFFFC;
        do
        {
          uint64_t v34 = vmulq_f64(v29[-1], vdivq_f64(vmulq_f64(v30[-1], v31), vmlaq_f64(v30[-1], v32, v28)));
          size_t v35 = vmulq_f64(*v29, vdivq_f64(vmulq_f64(*v30, v31), vmlaq_f64(*v30, v32, v28)));
          uint64_t v19 = v19 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
          v29 += 2;
          v30 += 2;
          v33 -= 4LL;
        }

        while (v33);
        if (v18 == v15)
        {
LABEL_41:
          if (a3)
          {
            int v42 = *(void *)a3;
            if ((*(_WORD *)(v42 + 20) & 0x9000) != 0) {
              sub_181303888((int *)v42);
            }
            else {
              *(_WORD *)(v42 + 20) = 1;
            }
            *(double *)int v42 = -v19;
            *(_WORD *)(v42 + 20) = 8;
          }

          else
          {
            sub_1812CF36C(97397);
          }

          return;
        }
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v19 = 0.0;
      }

      uint64_t v36 = &v11->f64[v18];
      uint64_t v37 = &v16->f64[v18];
      uint64_t v38 = v15 - v18;
      do
      {
        int v39 = *v37++;
        uint64_t v40 = v39;
        uint64_t v41 = *v36++;
        uint64_t v19 = v19 + v40 * (v41 * 2.2 / (v41 + v17 * 1.2));
        --v38;
      }

      while (v38);
      goto LABEL_41;
    }
  }

      int v11 = v12;
      if (v12 >= v8) {
        return 0LL;
      }
    }

    uint64_t v18 = ((_DWORD)v11 - v6);
    uint64_t v19 = v9;
LABEL_75:
    if (HIWORD(v15))
    {
      if (v15 - 66560 < 0x28) {
        v15 += 40;
      }
      goto LABEL_102;
    }

    while (1)
    {
      int v33 = 0;
      uint64_t v34 = *(_DWORD *)(a1 + 140);
      size_t v35 = -1;
      uint64_t v36 = 162;
      do
      {
        uint64_t v37 = v33 + v36;
        if (v33 + v36 < 0 != __OFADD__(v33, v36)) {
          ++v37;
        }
        uint64_t v38 = v37 >> 1;
        if ((int)v15 < *((unsigned __int16 *)&unk_1813CD2A0 + 2 * v38))
        {
          uint64_t v36 = v38 - 1;
        }

        else
        {
          int v33 = v38 + 1;
          size_t v35 = v38;
        }
      }

      while (v36 >= v33);
      int v39 = (unsigned __int16 *)((char *)&unk_1813CD2A0 + 4 * v35);
      uint64_t v40 = *v39;
      if (*((unsigned __int8 *)v39 + 3) + v40 > (int)v15)
      {
        uint64_t v41 = *((unsigned __int8 *)&unk_1813CD2A0 + 4 * v35 + 2);
        if (((v15 ^ v40) & v41 & 1) == 0) {
          uint64_t v15 = (unsigned __int16)(*(_WORD *)((char *)&unk_1813CD52C + (v41 & 0xFE)) + v15);
        }
      }

      if (v34)
      {
        int v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 125;
        uint64_t v45 = (8 * v15) | 7;
        do
        {
          uint64_t v46 = v44 + v42;
          if (v44 + v42 < 0 != __OFADD__(v44, v42)) {
            ++v46;
          }
          uint64_t v47 = v46 >> 1;
          uint64_t v48 = v10[v47];
          if (v45 < v48) {
            uint64_t v44 = v47 - 1;
          }
          else {
            uint64_t v43 = v47;
          }
          if (v45 >= v48) {
            int v42 = v47 + 1;
          }
        }

        while (v44 >= v42);
      }

    int v8 = 0LL;
    if (a2 != 1) {
      goto LABEL_11;
    }
LABEL_16:
    int v11 = "main";
    goto LABEL_21;
  }

  int v8 = *(void *)(v6 + 8);
  if (a2 == 1) {
    goto LABEL_16;
  }
LABEL_11:
  int v9 = a3[1];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) != 0 || *(_BYTE *)(v9 + 22) != 1)
  {
    if ((v10 & 1) == 0)
    {
      int v11 = (const char *)v8;
      int v8 = sub_181303998((int *)v9, 1);
      goto LABEL_21;
    }

            __int128 v24 = *((_DWORD *)v23 - 1);
            if (v24 >= 1)
            {
LABEL_19:
              if (v24 <= *(unsigned __int8 *)(a1 + 37))
              {
                __int128 v25 = 0;
                uint64_t v26 = 65;
                switch(*v23)
                {
                  case 2u:
                    goto LABEL_23;
                  case 3u:
                  case 5u:
                  case 6u:
                  case 7u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                    goto LABEL_27;
                  case 4u:
                    LOBYTE(v25) = 0;
                    uint64_t v26 = 69;
                    goto LABEL_23;
                  case 8u:
                    LOBYTE(v25) = 1;
                    uint64_t v26 = 66;
                    goto LABEL_23;
                  case 0x10u:
                    LOBYTE(v25) = 0;
                    uint64_t v26 = 67;
                    goto LABEL_23;
                  case 0x20u:
                    LOBYTE(v25) = 1;
                    uint64_t v26 = 68;
                    goto LABEL_23;
                  default:
                    goto LABEL_21;
                }

                goto LABEL_27;
              }
            }

            __int128 v25 = *v23;
LABEL_21:
            if (v25 == 64)
            {
              LOBYTE(v25) = 1;
              uint64_t v26 = 70;
LABEL_23:
              uint64_t v27 = (char *)v41 + v9;
              *uint64_t v27 = v26;
              uint64_t v28 = v9 + 3;
              uint64_t v29 = __OFADD__(v9, 2);
              v9 += 2;
              v27[1] = v24 + 47;
              if (v9 < 0 != v29) {
                int v30 = v28;
              }
              else {
                int v30 = v9;
              }
              unint64_t v31 = *((void *)a2 + 4) + v21;
              *(_DWORD *)unint64_t v31 = v30 >> 1;
              *(_BYTE *)(v31 + 4) = v25;
            }
          }

          *(v12 - 1) = LODWORD(v15);
          uint64_t v16 = *v11;
          if (!*v11)
          {
            sub_1812CF36C(89717);
LABEL_19:
            LODWORD(v18) = 0;
            goto LABEL_20;
          }

          uint64_t v17 = *(_WORD *)(v16 + 20);
          if ((v17 & 0x24) != 0)
          {
            uint64_t v18 = *(double *)v16;
            goto LABEL_20;
          }

          if ((v17 & 8) != 0)
          {
            int v20 = *(double *)v16;
            if (*(double *)v16 >= -9.22337204e18)
            {
              if (v20 <= 9.22337204e18) {
                *(void *)&uint64_t v18 = (uint64_t)v20;
              }
              else {
                LODWORD(v18) = -1;
              }
            }

            else
            {
              LODWORD(v18) = 0;
            }
          }

          else
          {
            if ((v17 & 0x12) == 0 || !*(void *)(v16 + 8)) {
              goto LABEL_19;
            }
            LODWORD(v18) = sub_181303DF0(v16);
          }

    uint64_t v15 = sub_1813B05C0(a1, v13, 0LL, v8);
LABEL_17:
    LODWORD(result) = sqlite3_reset(*(sqlite3_stmt **)(a1 + 160));
    if ((_DWORD)result) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v15;
    }
    if ((_DWORD)result) {
      return result;
    }
    int v8 = (uint64_t *)*v8;
    if (!v8) {
      return 267LL;
    }
  }

  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = (char *)(v17 + *(unsigned __int8 *)(a1 + 39) * (uint64_t)a3 + 4);
  memmove( v18,  &v18[*(unsigned __int8 *)(a1 + 39)],  *(unsigned __int8 *)(a1 + 39) * (uint64_t)(int)(~a3 + (bswap32(*(unsigned __int16 *)(v17 + 2)) >> 16)));
  *(_WORD *)(*(void *)(a2 + 24) + 2LL) = bswap32( (*(unsigned __int8 *)(*(void *)(a2 + 24) + 3LL) | (*(unsigned __int8 *)(*(void *)(a2 + 24) + 2LL) << 8))
                                           - 1) >> 16;
  *(_DWORD *)(a2 + 20) = 1;
  if (!*(void *)a2) {
    return 0LL;
  }
  uint64_t v19 = 1431655766LL * ((*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39));
  else {
    return sub_1813B3B78(a1, a2, a4);
  }
}

      if (!a1[8])
      {
        for (int i = *(void **)(v18 + 40); i; int i = (void *)*i)
        {
          __int128 v25 = i[2];
          if (*(_DWORD *)(v25 + 88) == v16)
          {
            a1[8] = *(void *)v25;
            a1[6] = (uint64_t)"index";
          }
        }
      }
    }

    int v8 = a3 + 20;
  }

  __int128 v21 = (unsigned __int8 *)(v12 + 40LL * (int)v13);
  switch(v8)
  {
    case 0:
      if (!a2) {
        goto LABEL_52;
      }
      goto LABEL_50;
    case 1:
      if (!a2) {
        goto LABEL_47;
      }
      uint64_t v15 = off_189B6D560[*v21];
      goto LABEL_46;
    case 2:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(int *)(v12 + 40LL * (int)v13 + 4);
      goto LABEL_50;
    case 3:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(int *)(v12 + 40LL * (int)v13 + 8);
      goto LABEL_50;
    case 4:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(int *)(v12 + 40LL * (int)v13 + 12);
      goto LABEL_50;
    case 5:
    case 7:
      uint64_t v15 = (char *)a1[5];
      if (!v15)
      {
        uint64_t v15 = (char *)sub_1813043CC(*(void *)(v11 + 24), (uint64_t)v21, a3, a4, a5, a6, a7, a8);
        a1[5] = (uint64_t)v15;
      }

      if (v8 != 5) {
        return 0LL;
      }
      if (!a2) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 6:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(unsigned __int16 *)(v12 + 40LL * (int)v13 + 2);
      goto LABEL_50;
    case 8:
      goto LABEL_3;
    case 9:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(int *)(v12 + 40LL * (int)v13 + 24);
      goto LABEL_50;
    case 10:
      if (!a2) {
        goto LABEL_52;
      }
      uint64_t v13 = *(int *)(v12 + 40LL * (int)v13 + 32);
      goto LABEL_50;
    case 20:
      if (!a2) {
        goto LABEL_47;
      }
      uint64_t v15 = (char *)a1[6];
      goto LABEL_46;
    case 21:
      if (!a2) {
        goto LABEL_47;
      }
      uint64_t v15 = (char *)a1[7];
      goto LABEL_46;
    case 22:
      if (!a2) {
        goto LABEL_47;
      }
      uint64_t v15 = (char *)a1[8];
      goto LABEL_46;
    case 23:
      if (a2)
      {
        uint64_t v13 = *v21 == 113;
LABEL_50:
        __int128 v22 = *(void *)a2;
        if ((*(_WORD *)(*(void *)a2 + 20LL) & 0x9000) != 0)
        {
          sub_1813040AC(v22, v13);
        }

        else
        {
          *(void *)__int128 v22 = v13;
          *(_WORD *)(v22 + 20) = 4;
        }
      }

      else
      {
LABEL_52:
        sub_1812CF36C(97431);
      }

      break;
    default:
      return 0LL;
  }

  return 0LL;
}

  char v6 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_20:
    (*v6)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    char v6 = &xmmword_18C465410;
    goto LABEL_20;
  }

  return 0LL;
}

uint64_t sub_1812801A8( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (unsigned __int8 *)a3;
  int v9 = (unsigned __int8 *)a2;
  v1159 = 0LL;
  uint64_t v11 = (uint64_t)*a1;
  uint64_t v12 = (uint64_t)a1[2];
  if (v12)
  {
    if (!a2) {
      return 1LL;
    }
  }

  else
  {
    if (!a1[21] && (*(_BYTE *)(v11 + 96) & 8) == 0) {
      *((_BYTE *)a1 + 35) = 1;
    }
    uint64_t v12 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v9) {
      return 1LL;
    }
  }

  if (*((_DWORD *)a1 + 12)) {
    return 1LL;
  }
  uint64_t v15 = (uint64_t)*a1;
  uint64_t v16 = (uint64_t (*)(void, uint64_t, void, void, void, void *))(*a1)[66];
  if (v16 && !*(_BYTE *)(v15 + 197) && !*((_BYTE *)a1 + 302))
  {
    int v32 = v16(*(void *)(v15 + 536), 21LL, 0LL, 0LL, 0LL, a1[46]);
    if (v32 == 1)
    {
      int v39 = 23;
      uint64_t v40 = "not authorized";
    }

    else
    {
      if ((v32 & 0xFFFFFFFD) == 0)
      {
        if (v32) {
          return 1LL;
        }
        goto LABEL_14;
      }

      int v39 = 1;
      uint64_t v40 = "authorizer malfunction";
    }

    sub_1812DC47C((uint64_t)a1, v40, v33, v34, v35, v36, v37, v38, v1050);
    *((_DWORD *)a1 + 6) = v39;
    return 1LL;
  }

LABEL_130:
                    int v82 = *((_DWORD *)a1 + 14);
                    uint64_t v83 = (v82 + 1);
                    *(_DWORD *)(v69 + 92) = v83;
                    v82 += 2;
                    *((_DWORD *)a1 + 14) = v82;
                    *(_DWORD *)(v69 + 96) = v82;
                    int v84 = *(_DWORD *)(v43 + 144);
                    if (*(_DWORD *)(v43 + 148) > v84)
                    {
                      *(_DWORD *)(v43 + 144) = v84 + 1;
                      uint64_t v70 = *(void *)(v43 + 136) + 40LL * v84;
                      *(void *)uint64_t v70 = 75LL;
                      *(_DWORD *)(v70 + 8) = v83;
                      *(void *)(v70 + 12) = 0LL;
                      *(void *)(v70 + 28) = 0LL;
                      *(void *)(v70 + 20) = 0LL;
                      *(_DWORD *)(v70 + 36) = 0;
                      uint64_t v69 = *(void *)(v69 + 64);
                      if (!v69) {
                        goto LABEL_132;
                      }
                      goto LABEL_102;
                    }

                    sub_18131044C(v43, 75LL, 0LL, v83, 0LL, v65, v66, v67);
                    uint64_t v69 = *(void *)(v69 + 64);
                    if (!v69)
                    {
LABEL_132:
                      uint64_t v85 = (uint64_t)v1132;
                      if (!v68)
                      {
                        int v86 = (unsigned __int8 *)sub_1813143AC(v44, 155, "0");
                        uint64_t v87 = (int *)sub_18133E190(*a1, v86);
                        uint64_t v85 = (uint64_t)v1132;
                        uint64_t v68 = v87;
                      }

                      uint64_t v88 = sub_181280000(a1, v68, v1146, v1125, v1116, v1108, v85, 0, 0LL);
                      uint64_t v89 = sub_1812F2264((uint64_t)*a1, 0x70uLL);
                      if (v89)
                      {
                        *(void *)uint64_t v89 = 0x100000001LL;
                        *(_OWORD *)(v89 + 72) = 0u;
                        *(_OWORD *)(v89 + 8) = 0u;
                        *(_OWORD *)(v89 + 24) = 0u;
                        *(_OWORD *)(v89 + 56) = 0u;
                        *(_OWORD *)(v89 + 88) = 0u;
                        *(void *)(v89 + 104) = 0LL;
                        *(_OWORD *)(v89 + 40) = 0u;
                        *(_DWORD *)(v89 + 72) = -1;
                        *(void *)(v89 + 16) = 0LL;
                        *(void *)(v89 + 24) = 0LL;
                        *v1101 = (int *)v89;
                        *(void *)(v89 + 48) = v88;
                        *(_WORD *)(v89 + 69) |= 8u;
                        sub_1812BD68C((uint64_t)a1, *v1101);
                        *((_DWORD *)v88 + 1) |= 0x8000040u;
                        uint64_t v90 = sub_18131FA64((uint64_t)a1, (uint64_t)v88, 64);
                        *((_DWORD *)v88 + 1) |= v1095 & 8;
                        int v8 = v1137;
                        if (v90)
                        {
                          uint64_t v91 = v90;
                          __int128 v93 = *(_OWORD *)(v90 + 64);
                          __int128 v92 = *(_OWORD *)(v90 + 80);
                          uint64_t v94 = *(void *)(v90 + 96);
                          *(_OWORD *)(v45 + 48) = *(_OWORD *)(v90 + 48);
                          __int128 v95 = *(_OWORD *)v90;
                          __int128 v96 = *(_OWORD *)(v90 + 32);
                          *(_OWORD *)(v45 + 16) = *(_OWORD *)(v90 + 16);
                          *(_OWORD *)(v45 + 32) = v96;
                          *(_OWORD *)uint64_t v45 = v95;
                          *(void *)(v45 + 96) = v94;
                          *(_OWORD *)(v45 + 64) = v93;
                          *(_OWORD *)(v45 + 80) = v92;
                          *(_DWORD *)(v45 + 48) |= 0x4000u;
                          *((void *)*v1101 + 5) = v45;
                          v1155 = 0LL;
                          *(_OWORD *)&v1158[1] = 0u;
                          v1156 = sub_1813293EC;
                          v1157 = sub_181329418;
                          v1158[0] = sub_18132942C;
                          sub_181285228(&v1155, v88);
                          char v97 = 1;
                          uint64_t v45 = v91;
                        }

                        else
                        {
                          char v97 = 0;
                        }
                      }

                      else
                      {
                        *v1101 = 0LL;
                        int v8 = v1137;
                        char v97 = 1;
                        if (v88) {
                          sub_18128FDA0((void *)v44, (uint64_t)v88, 1);
                        }
                      }

                      int v98 = *(unsigned __int8 *)(v44 + 103);
                      if (*a1) {
                        unsigned int v99 = (void *)sub_1812F2264((uint64_t)*a1, 0x18uLL);
                      }
                      else {
                        unsigned int v99 = (void *)sub_18126F0AC(24LL);
                      }
                      if (v99)
                      {
                        *unsigned int v99 = a1[24];
                        a1[24] = v99;
                        v99[1] = v45;
                        v99[2] = sub_1812900D0;
                      }

                      else
                      {
                        sub_1812F20DC(*a1, (void *)v45);
                      }

                      char v100 = v97 ^ 1;
                      if (v98) {
                        char v100 = 1;
                      }
                      uint64_t v11 = v1152;
                      if ((v100 & 1) == 0) {
                        goto LABEL_149;
                      }
LABEL_24:
                      uint64_t v13 = 1LL;
                      goto LABEL_25;
                    }

                    goto LABEL_102;
                  }
                }

                else if (v73 < 2)
                {
                  goto LABEL_116;
                }

                --v73;
              }
            }
          }

          else if (v60 < 2)
          {
            goto LABEL_96;
          }

          --v60;
        }
      }
    }
  }

  if (v12)
  {
    if (*(_DWORD *)v12 > *((_DWORD *)*a1 + 36)) {
      sub_1812DC47C((uint64_t)a1, "too many columns in %s", v72, v73, v74, v75, v76, v77, (char)"index");
    }
    if (*((_DWORD *)a1 + 12)) {
      goto LABEL_98;
    }
  }

  else
  {
    uint64_t v91 = v28[1] + 16LL * *((__int16 *)v28 + 27);
    *(_WORD *)(v91 - 2) |= 8u;
    __int128 v92 = *(const char **)(v91 - 16);
    *(void *)&v252[0] = v92;
    if (v92) {
      __int128 v93 = strlen(v92) & 0x3FFFFFFF;
    }
    else {
      __int128 v93 = 0;
    }
    DWORD2(v252[0]) = v93;
    char v100 = (unsigned __int8 *)sub_18127F5B0(v14, 59, (uint64_t)v252, 0);
    uint64_t v101 = sub_18133E190(*a1, v100);
    uint64_t v12 = v101;
    if (!v101) {
      goto LABEL_98;
    }
    __int128 v102 = a9;
    if (a9 == -1) {
      __int128 v102 = 0;
    }
    LOBYTE(v101[3 * *(int *)v101]) = v102;
  }

  __int128 v228 = a7;
  __int128 v229 = v18;
  int v103 = *(unsigned int *)v12;
  uint64_t v104 = 0;
  if ((int)v103 >= 1)
  {
    __int128 v105 = v12 + 1;
    do
    {
      if (*(_BYTE *)*v105 == 113)
      {
        int v108 = *(const char **)(*v105 + 8LL);
        if (v108)
        {
          uint64_t v236 = v104;
          uint64_t v106 = strlen(v108);
          uint64_t v104 = v236;
          int v107 = v106 & 0x3FFFFFFF;
        }

        else
        {
          int v107 = 0;
        }

        v104 += v107 + 1;
      }

      v105 += 3;
      --v103;
    }

    while (v103);
  }

  uint64_t v109 = v104;
  int v110 = strlen(v27) & 0x3FFFFFFF;
  if (v34) {
    int v111 = *(_WORD *)(v34 + 94);
  }
  else {
    int v111 = 1;
  }
  uint64_t v112 = (v110 + 1);
  __int16 v113 = sub_181323CD0(v14, (__int16)(v111 + *(_DWORD *)v12), (int)v112 + v109, &__dst);
  if (*(_BYTE *)(v14 + 103)) {
    goto LABEL_156;
  }
  uint64_t v114 = (char *)__dst;
  *(void *)__int16 v113 = __dst;
  __dst = &v114[v112];
  memcpy(v114, v27, v112);
  *(void *)(v113 + 24) = v28;
  *(_BYTE *)(v113 + 98) = v229;
  *(_WORD *)(v113 + 99) = *(_WORD *)(v113 + 99) & 0xFFF4 | (8 * (v229 != 0)) | v239 & 3;
  *(void *)(v113 + 48) = *(void *)(*(void *)(v14 + 32) + 32 * v238 + 24);
  *(_WORD *)(v113 + 94) = *(_DWORD *)v12;
  if (v11)
  {
    sub_18131F804((uint64_t)a1, v28, 2LL, (uint64_t)v11, 0LL, v115, v116, v117);
    *(void *)(v113 + 72) = v11;
  }

  uint64_t v118 = *(unsigned __int8 *)(*(void *)(v231 + 32 * v238 + 24) + 112LL);
  __int128 v232 = v12;
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    __int128 v232 = 0LL;
    *(void *)(v113 + 80) = v12;
  }

  uint64_t v237 = v113;
  if (!*(_WORD *)(v113 + 94))
  {
    uint64_t v147 = 0;
    goto LABEL_209;
  }

  uint64_t v119 = (unsigned __int8 **)(v12 + 1);
  int v120 = 0LL;
  __int128 v230 = v118;
  do
  {
    uint64_t v124 = *v119;
    uint64_t v125 = **v119;
    uint64_t v126 = *v119;
    sub_18131F804((uint64_t)a1, v28, 32LL, (uint64_t)v124, 0LL, v115, v116, v117);
    if (*((_DWORD *)a1 + 12))
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = v232;
      goto LABEL_157;
    }

    for (int j = *v119; j; int j = (unsigned __int8 *)*((void *)j + 2))
    {
      if ((j[5] & 0x20) == 0) {
        break;
      }
    }

    if (*j != 167)
    {
      if (v28 == a1[43])
      {
        sub_1812DC47C( (uint64_t)a1,  "expressions prohibited in PRIMARY KEY and UNIQUE constraints",  v127,  v128,  v129,  v115,  v116,  v117,  v227);
        uint64_t v11 = 0LL;
        uint64_t v12 = v232;
        goto LABEL_156;
      }

      if (!*(void *)(v113 + 80))
      {
        *(void *)(v113 + 80) = v232;
        __int128 v232 = 0LL;
      }

      *(_WORD *)(*(void *)(v113 + 8) + 2 * v120) = -2;
      *(_WORD *)(v113 + 99) = *(_WORD *)(v113 + 99) & 0xF7F7 | 0x800;
      uint64_t v133 = *v119;
      if (**v119 != 113)
      {
LABEL_192:
        uint32x4_t v134 = v119;
        uint16x4_t v136 = v120;
        int v142 = 0LL;
        goto LABEL_195;
      }

          uint64_t v123 = (v133 + 1);
          uint64_t v124 = a1[21];
          if (!v124) {
            uint64_t v124 = a1;
          }
          *((_BYTE *)v124 + 32) = 1;
          uint64_t v125 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v125)
          {
            sub_18131044C(v11, 97LL, v45, v140, v123, v31, v32, v33);
          }

          else
          {
            *(_DWORD *)(v11 + 144) = v125 + 1;
            uint64_t v126 = *(void *)(v11 + 136) + 40LL * v125;
            *(_DWORD *)uint64_t v126 = 97;
            *(_DWORD *)(v126 + 4) = v45;
            *(_DWORD *)(v126 + 8) = v140;
            *(_DWORD *)(v126 + 12) = v123;
            *(void *)(v126 + 24) = 0LL;
            *(void *)(v126 + 32) = 0LL;
            *(void *)(v126 + 16) = 0LL;
          }

          int v127 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v127)
          {
            sub_18131044C(v11, 127LL, v70, v132, 0LL, v31, v32, v33);
          }

          else
          {
            *(_DWORD *)(v11 + 144) = v127 + 1;
            uint64_t v128 = *(void *)(v11 + 136) + 40LL * v127;
            *(_DWORD *)uint64_t v128 = 127;
            *(_DWORD *)(v128 + 4) = v70;
            *(_DWORD *)(v128 + 8) = v132;
            *(void *)(v128 + 12) = 0LL;
            *(void *)(v128 + 28) = 0LL;
            *(void *)(v128 + 20) = 0LL;
            *(_DWORD *)(v128 + 36) = 0;
          }

          uint64_t v129 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v129)
          {
            sub_18131044C(v11, 128LL, v70, v123, v132, v31, v32, v33);
          }

          else
          {
            *(_DWORD *)(v11 + 144) = v129 + 1;
            int v130 = *(void *)(v11 + 136) + 40LL * v129;
            *(_DWORD *)int v130 = 128;
            *(_DWORD *)(v130 + 4) = v70;
            *(_DWORD *)(v130 + 8) = v123;
            *(_DWORD *)(v130 + 12) = v132;
            *(void *)(v130 + 24) = 0LL;
            *(void *)(v130 + 32) = 0LL;
            *(void *)(v130 + 16) = 0LL;
          }

          goto LABEL_85;
        }

        uint64_t v28 = v72;
        uint64_t v27 = 80LL;
        if ((a5[6] & 0x40) == 0)
        {
          if (*a5 == 176) {
            uint64_t v27 = 80LL;
          }
          else {
            uint64_t v27 = 81LL;
          }
        }

        int v73 = (uint64_t)a1[2];
        uint64_t v74 = *(_DWORD *)(v73 + 144);
        if (*(_DWORD *)(v73 + 148) > v74)
        {
          *(_DWORD *)(v73 + 144) = v74 + 1;
          BOOL v75 = *(void *)(v73 + 136) + 40LL * v74;
          *(_BYTE *)BOOL v75 = v27;
          *(_WORD *)(v75 + 2) = 0;
          *(_DWORD *)(v75 + 4) = v28;
          *(_DWORD *)(v75 + 8) = v71;
          *(_BYTE *)(v75 + 1) = 0;
LABEL_120:
          *(void *)(v75 + 12) = 0LL;
          *(void *)(v75 + 28) = 0LL;
          *(void *)(v75 + 20) = 0LL;
          *(_DWORD *)(v75 + 36) = 0;
          goto LABEL_121;
        }
      }

      else
      {
        uint64_t v119 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) > v119)
        {
          *(_DWORD *)(v11 + 144) = v119 + 1;
          BOOL v75 = *(void *)(v11 + 136) + 40LL * v119;
          *(_DWORD *)BOOL v75 = 135;
          *(_DWORD *)(v75 + 4) = v144;
          *(_DWORD *)(v75 + 8) = v71;
          goto LABEL_120;
        }

        int v73 = v11;
        uint64_t v27 = 135LL;
        uint64_t v28 = v144;
      }

      int v29 = (v21 + 2);
    }

    sub_18131044C(v73, v27, v28, v29, 0LL, v31, v32, v33);
    if (*((_BYTE *)v54 + 66)) {
      goto LABEL_122;
    }
    goto LABEL_130;
  }

  uint64_t v23 = a3;
  uint32x4_t v134 = v8;
  uint64_t v140 = v14 + 2;
  uint16x4_t v136 = v14;
  if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
  {
    for (int j = *(void *)(a3 + 16); j; int j = *(void *)(j + 40))
    {
      if ((*(_WORD *)(j + 99) & 3) == 2) {
        break;
      }
    }

    uint64_t v46 = **(__int16 **)(j + 8);
    int v47 = *(_DWORD *)(a6 + 4 * v46);
    if ((v47 & 0x80000000) != 0)
    {
      int v63 = sub_1812F2264((uint64_t)*a1, 0x50uLL);
      uint64_t v24 = (unsigned int *)v63;
      if (v63)
      {
        *(_OWORD *)(v63 + 32) = 0u;
        *(_OWORD *)(v63 + 48) = 0u;
        *(_OWORD *)(v63 + 64) = 0u;
        *(_OWORD *)int v63 = 0u;
        *(_OWORD *)(v63 + 16) = 0u;
        *(_BYTE *)int v63 = 75;
        *(_WORD *)(v63 + 52) = -1;
        *(_DWORD *)(v63 + 40) = 1;
        if (*((int *)*a1 + 37) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v64,  v65,  v66,  v67,  v68,  v69,  *((_DWORD *)*a1 + 37));
        }
        v24[12] = v46 + 1;
      }

      uint64_t v23 = a3;
    }

    else
    {
      uint64_t v23 = a3;
      uint64_t v48 = *(unsigned __int8 **)(a4 + 24LL * v47 + 8);
      if (v48) {
        uint64_t v24 = sub_18129C928((uint64_t)v12, v48, 0LL, 0LL);
      }
      else {
        uint64_t v24 = 0LL;
      }
    }
  }

  else
  {
    if (a5)
    {
      uint64_t v24 = sub_18129C928((uint64_t)v12, a5, 0LL, 0LL);
    }

    else
    {
      uint64_t v56 = sub_1812F2264((uint64_t)*a1, 0x50uLL);
      uint64_t v24 = (unsigned int *)v56;
      if (v56)
      {
        *(_OWORD *)(v56 + 32) = 0u;
        *(_OWORD *)(v56 + 48) = 0u;
        *(_OWORD *)(v56 + 64) = 0u;
        *(_OWORD *)uint64_t v56 = 0u;
        *(_OWORD *)(v56 + 16) = 0u;
        *(_BYTE *)uint64_t v56 = 75;
        *(_WORD *)(v56 + 52) = -1;
        *(_DWORD *)(v56 + 40) = 1;
        if (*((int *)*a1 + 37) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v57,  v58,  v59,  v60,  v61,  v62,  *((_DWORD *)*a1 + 37));
        }
      }
    }

    int j = 0LL;
  }

  uint64_t v77 = (int *)sub_18133E190(*a1, (unsigned __int8 *)v24);
  if (*(__int16 *)(v23 + 54) >= 1)
  {
    uint64_t v78 = 0LL;
    while (1)
    {
      int v79 = *(_DWORD *)(a6 + 4 * v78);
      if ((v79 & 0x80000000) != 0) {
        break;
      }
      uint64_t v80 = *(unsigned __int8 **)(a4 + 24LL * v79 + 8);
      if (v80)
      {
        uint64_t v81 = (unsigned __int8 *)sub_18129C928((uint64_t)v12, v80, 0LL, 0LL);
        if (v77) {
          goto LABEL_75;
        }
      }

      else
      {
        uint64_t v81 = 0LL;
        if (v77)
        {
LABEL_75:
          __int128 v92 = *v77;
          if (v77[1] <= *v77)
          {
            uint64_t v77 = sub_18133E1F4((uint64_t)*a1, v77, v81);
          }

          else
          {
            *uint64_t v77 = v92 + 1;
            __int128 v93 = &v77[6 * v92];
            *((void *)v93 + 2) = 0LL;
            *((void *)v93 + 3) = 0LL;
            *((void *)v93 + 1) = v81;
          }

          goto LABEL_62;
        }
      }

      uint64_t v77 = (int *)sub_18133E190(*a1, v81);
LABEL_62:
    }

    int v82 = sub_1812F2264((uint64_t)*a1, 0x50uLL);
    uint64_t v89 = v82;
    if (v82)
    {
      *(_OWORD *)(v82 + 32) = 0u;
      *(_OWORD *)(v82 + 48) = 0u;
      *(_OWORD *)(v82 + 64) = 0u;
      *(_OWORD *)int v82 = 0u;
      *(_OWORD *)(v82 + 16) = 0u;
      *(_BYTE *)int v82 = 75;
      *(_WORD *)(v82 + 52) = -1;
      *(_DWORD *)(v82 + 40) = 1;
      if (*((int *)*a1 + 37) <= 0) {
        sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v83,  v84,  v85,  v86,  v87,  v88,  *((_DWORD *)*a1 + 37));
      }
      *(_DWORD *)(v89 + 48) = v78 + 1;
      *(_BYTE *)(v89 + 2) = 1;
    }

    if (v77)
    {
      uint64_t v90 = *v77;
      if (v77[1] > *v77)
      {
        *uint64_t v77 = v90 + 1;
        uint64_t v91 = &v77[6 * v90];
        *((void *)v91 + 2) = 0LL;
        *((void *)v91 + 3) = 0LL;
        *((void *)v91 + 1) = v89;
LABEL_81:
        uint64_t v23 = a3;
        goto LABEL_62;
      }

      uint64_t v94 = sub_18133E1F4((uint64_t)*a1, v77, (unsigned __int8 *)v89);
    }

    else
    {
      uint64_t v94 = (int *)sub_18133E190(*a1, (unsigned __int8 *)v89);
    }

    uint64_t v77 = v94;
    goto LABEL_81;
  }

          if (++v64 != v63) {
            goto LABEL_131;
          }
LABEL_143:
          uint64_t v74 = (unsigned int *)v59[6];
          if (!v74) {
            goto LABEL_121;
          }
          BOOL v75 = *v74;
          int v76 = 0LL;
          uint64_t v77 = (void *)v145;
          uint64_t v78 = DWORD2(v145);
LABEL_148:
          if (!v33) {
            goto LABEL_147;
          }
          int v79 = &v74[6 * v76];
          uint64_t v80 = *((void *)v79 + 2);
          if ((*(_WORD *)((_BYTE *)v79 + 25) & 3) != 0 || v80 == 0) {
            goto LABEL_147;
          }
          for (int j = 0LL; ; ++j)
          {
            uint64_t v83 = *(unsigned __int8 *)(v80 + j);
            int v84 = *(unsigned __int8 *)(v33 + j);
            if ((_DWORD)v83 == (_DWORD)v84)
            {
              if (!*(_BYTE *)(v80 + j))
              {
                uint64_t v85 = v144;
                if (v144)
                {
                  int v86 = &v144;
                  if (*v144 != v80)
                  {
                    do
                    {
                      uint64_t v87 = v85;
                      uint64_t v85 = (void *)v85[3];
                      if (!v85) {
                        goto LABEL_147;
                      }
                    }

                    while (*v85 != v80);
                    int v86 = v87 + 3;
                  }

                  *int v86 = v85[3];
                  v85[3] = v77;
                  *(void *)&uint64_t v145 = v85;
                  DWORD2(v145) = ++v78;
                  uint64_t v77 = v85;
                }

              if (!*(_BYTE *)(v21 + 41)) {
                goto LABEL_155;
              }
              uint64_t v74 = sqlite3_mprintf("SELECT * FROM %w.%w_rowid WHERE rowid=?1", v50, v86);
              *(void *)(v21 + 88) = v74;
              if (!v74)
              {
                uint64_t v36 = 7;
                uint64_t v33 = v90;
                goto LABEL_158;
              }

              if (sqlite3_initialize() || (int v76 = sub_18126F0AC(32LL)) == 0)
              {
                BOOL v75 = (sqlite3_str *)&unk_18C54FA08;
              }

              else
              {
                BOOL v75 = (sqlite3_str *)v76;
                if (v90) {
                  uint64_t v77 = *((_DWORD *)v90 + 34);
                }
                else {
                  uint64_t v77 = 2147483645;
                }
                *(void *)int v76 = 0LL;
                *(void *)(v76 + 8) = 0LL;
                *(_DWORD *)(v76 + 16) = 0;
                *(_DWORD *)(v76 + 20) = v77;
                *(_DWORD *)(v76 + 24) = 0;
                *(_WORD *)(v76 + 28) = 0;
              }

              uint64_t v33 = v90;
              sqlite3_str_appendf(v75, "UPDATE %w.%w_rowidSET ", v50, v86);
              if (*(_BYTE *)(v21 + 41))
              {
                sqlite3_str_appendf(v75, "a%d=?%d", 0, 2);
                if (*(unsigned __int8 *)(v21 + 41) >= 2u)
                {
                  uint64_t v78 = 1;
                  do
                  {
                    int v79 = *((unsigned int *)v75 + 6);
                    if ((v79 + 1) < *((_DWORD *)v75 + 4))
                    {
                      *((_DWORD *)v75 + 6) = v79 + 1;
                      *(_BYTE *)(*((void *)v75 + 1) + v79) = 44;
                    }

                    else
                    {
                      sub_1812D3A10((uint64_t)v75, ",", 1u);
                    }

                    sqlite3_str_appendf(v75, "a%d=?%d", v78, v78 + 2);
                    ++v78;
                  }

                  while (v78 < *(unsigned __int8 *)(v21 + 41));
                }
              }

              sqlite3_str_appendf(v75, " WHERE rowid=?1");
              uint64_t v80 = (unsigned __int8 *)sqlite3_str_finish(v75);
              if (!v80)
              {
LABEL_157:
                uint64_t v36 = 7;
                int v7 = v89;
                goto LABEL_158;
              }

              int v82 = v80;
              uint64_t v36 = sub_18126DFE0((uint64_t)v90, v80, 0xFFFFFFFFLL, 133LL, 0LL, (void *)(v21 + 184), 0LL, v81);
              uint64_t v83 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_153;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v82);
              --qword_18C468B10;
              off_18C4653A8(v82);
              int v82 = (unsigned __int8 *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v83 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_153:
                (*v83)(v82);
              }

              int v7 = v89;
LABEL_155:
              uint64_t v33 = v90;
              if (!v36)
              {
                uint64_t v10 = 0LL;
                *uint64_t v87 = v21;
                return v10;
              }

LABEL_166:
    if ((v111 & 0x2000) != 0)
    {
      uint64_t v116 = v9;
      while ((v116[5] & 0x20) != 0)
      {
        uint64_t v116 = (unsigned __int8 *)*((void *)v116 + 10);
        if (!v116) {
          goto LABEL_170;
        }
      }

      if (*((void *)v9 + 14))
      {
        sub_1812DC47C( (uint64_t)a1,  "cannot use window functions in recursive queries",  v20,  v21,  v22,  v23,  v24,  v25,  v1050);
LABEL_880:
        uint64_t v605 = 0LL;
        uint64_t v13 = 0LL;
LABEL_905:
        if (!*((_DWORD *)a1 + 12) && (v9[4] & 0x20) != 0)
        {
          int v799 = **((_DWORD **)v9 + 4);
          uint64_t v800 = sub_18131A140(v1153, v799, 1);
          if (v800)
          {
            uint64_t v806 = v800;
            uint64_t v807 = v9;
            if (v799 >= 1)
            {
              uint64_t v808 = 0LL;
              uint64_t v809 = v800 + 32;
              do
              {
                uint64_t v810 = sub_1812B63B8((uint64_t)a1, (uint64_t)v9, v808, v801, v802, v803, v804, v805);
                *(void *)(v809 + 8 * v808) = v810;
                if (!v810) {
                  *(void *)(v809 + 8 * v808) = *(void *)(v1153 + 16);
                }
                ++v808;
              }

              while (v799 != (_DWORD)v808);
              uint64_t v807 = v9;
            }

            do
            {
              unsigned int v811 = *((_DWORD *)v807 + 5);
              if ((v811 & 0x80000000) == 0)
              {
                uint64_t v812 = *(void *)v106;
                if (*(_BYTE *)(*(void *)v106 + 103LL))
                {
                  dword_18C550688 = v799;
                  int v813 = (*(_DWORD *)v806)++;
                  if (!*(void *)(v812 + 816))
                  {
                    *(_DWORD *)uint64_t v806 = v813;
                    if (!v813) {
                      sub_1813014B0(*(void **)(v806 + 16), (void *)v806);
                    }
                  }
                }

                else
                {
                  uint64_t v814 = *(void *)(v106 + 136);
                  uint64_t v815 = v814 + 40LL * v811;
                  int v817 = *(unsigned __int8 *)(v815 + 1);
                  uint64_t v816 = v815 + 1;
                  *(_DWORD *)(v816 + 7) = v799;
                  ++*(_DWORD *)v806;
                  if (v817)
                  {
                    sub_181310724((uint64_t *)v106, v814 + 40LL * v811, (char *)v806, 0xFFFFFFF8);
                  }

                  else
                  {
                    *(void *)(v814 + 40LL * v811 + 16) = v806;
                    *(_BYTE *)uint64_t v816 = -8;
                  }
                }

                *((_DWORD *)v807 + 5) = -1;
                unsigned int v818 = *((_DWORD *)v807 + 6);
                if ((v818 & 0x80000000) == 0)
                {
                  uint64_t v819 = *(void *)v106;
                  if (*(_BYTE *)(*(void *)v106 + 103LL))
                  {
                    dword_18C550688 = v799;
                    int v820 = (*(_DWORD *)v806)++;
                    if (!*(void *)(v819 + 816))
                    {
                      *(_DWORD *)uint64_t v806 = v820;
                      if (!v820) {
                        sub_1813014B0(*(void **)(v806 + 16), (void *)v806);
                      }
                    }
                  }

                  else
                  {
                    uint64_t v821 = *(void *)(v106 + 136);
                    uint64_t v822 = v821 + 40LL * v818;
                    int v824 = *(unsigned __int8 *)(v822 + 1);
                    uint64_t v823 = v822 + 1;
                    *(_DWORD *)(v823 + 7) = v799;
                    ++*(_DWORD *)v806;
                    if (v824)
                    {
                      sub_181310724((uint64_t *)v106, v821 + 40LL * v818, (char *)v806, 0xFFFFFFF8);
                    }

                    else
                    {
                      *(void *)(v821 + 40LL * v818 + 16) = v806;
                      *(_BYTE *)uint64_t v823 = -8;
                    }
                  }

                  *((_DWORD *)v807 + 6) = -1;
                }
              }

              uint64_t v807 = (unsigned __int8 *)*((void *)v807 + 10);
            }

            while (v807);
            BOOL v195 = (*(_DWORD *)v806)-- == 1;
            if (v195) {
              sub_1813014B0(*(void **)(v806 + 16), (void *)v806);
            }
          }

          else
          {
            uint64_t v13 = 7LL;
          }
        }

        *(void *)(v8 + 12) = *(void *)&v1170[12];
        if (v605)
        {
          if (*a1) {
            int v825 = (void *)sub_1812F2264((uint64_t)*a1, 0x18uLL);
          }
          else {
            int v825 = (void *)sub_18126F0AC(24LL);
          }
          if (v825)
          {
            *int v825 = a1[24];
            a1[24] = v825;
            v825[1] = v605;
            v825[2] = sub_181309100;
          }

          else
          {
            sub_18128FDA0(*a1, v605, 1);
          }
        }

      if (v38 < a3[2])
      {
        int v39 = a3[1];
        a3[3] = v38 + 1;
        uint64_t v40 = 34;
        goto LABEL_168;
      }

      return sub_18135BB8C((uint64_t)a3, 34);
    case 7:
      uint64_t v22 = a3[3];
      if (v22 >= a3[2])
      {
        uint64_t result = sub_18135BB8C((uint64_t)a3, 91);
      }

      else
      {
        uint64_t v23 = a3[1];
        a3[3] = v22 + 1;
        *(_BYTE *)(v23 + v22) = 91;
      }

      if (*(_DWORD *)(v6 + 4)) {
        goto LABEL_46;
      }
      while ((*(_BYTE *)(v6 + 1) & 0x10) != 0 && *(_BYTE *)(v4 + 54))
      {
        char v6 = *(void *)(v4 + 8) + 16LL * *(unsigned int *)(v6 + 8);
        if (*(_DWORD *)(v6 + 4))
        {
LABEL_46:
          int v32 = 1;
          do
          {
            uint64_t v34 = (unsigned __int8 *)(v6 + 16LL * v32);
            if ((v34[1] & 4) == 0 || !*(_BYTE *)(v4 + 54))
            {
              uint64_t v35 = a3[3];
              if (v35)
              {
                uint64_t v36 = a3[1];
                if ((*(_BYTE *)(v35 + v36 - 1) & 0xDF) != 0x5B)
                {
                  if (v35 >= a3[2])
                  {
                    sub_18135BB8C((uint64_t)a3, 44);
                  }

                  else
                  {
                    a3[3] = v35 + 1;
                    *(_BYTE *)(v36 + v35) = 44;
                  }
                }
              }

              uint64_t result = sub_18135A944(v4, v6 + 16LL * v32, a3);
            }

            uint64_t v37 = v32;
            if (*v34 >= 7u) {
              uint64_t v33 = *(_DWORD *)(v6 + 16LL * v32 + 4) + 1;
            }
            else {
              uint64_t v33 = 1;
            }
            v32 += v33;
          }

          while (v33 + v37 <= *(_DWORD *)(v6 + 4));
        }
      }

      uint64_t v38 = a3[3];
      if (v38 < a3[2])
      {
        int v39 = a3[1];
        a3[3] = v38 + 1;
        uint64_t v40 = 93;
        goto LABEL_168;
      }

      return sub_18135BB8C((uint64_t)a3, 93);
    case 8:
      uint64_t v24 = a3[3];
      if (v24 >= a3[2])
      {
        uint64_t result = sub_18135BB8C((uint64_t)a3, 123);
      }

      else
      {
        uint64_t v25 = a3[1];
        a3[3] = v24 + 1;
        *(_BYTE *)(v25 + v24) = 123;
      }

      if (*(_DWORD *)(v6 + 4)) {
        goto LABEL_67;
      }
      while ((*(_BYTE *)(v6 + 1) & 0x10) != 0 && *(_BYTE *)(v4 + 54))
      {
        char v6 = *(void *)(v4 + 8) + 16LL * *(unsigned int *)(v6 + 8);
        if (*(_DWORD *)(v6 + 4))
        {
LABEL_67:
          uint64_t v41 = 1;
          do
          {
            uint64_t v43 = v41 + 1;
            uint64_t v44 = (unsigned __int8 *)(v6 + 16LL * v43);
            if ((v44[1] & 4) == 0 || !*(_BYTE *)(v4 + 54))
            {
              uint64_t v45 = a3[3];
              if (v45)
              {
                uint64_t v46 = a3[1];
                if ((*(_BYTE *)(v45 + v46 - 1) & 0xDF) != 0x5B)
                {
                  if (v45 >= a3[2])
                  {
                    sub_18135BB8C((uint64_t)a3, 44);
                  }

                  else
                  {
                    a3[3] = v45 + 1;
                    *(_BYTE *)(v46 + v45) = 44;
                  }
                }
              }

              sub_18135A944(v4, v6 + 16LL * v41, a3);
              int v47 = a3[3];
              if (v47 >= a3[2])
              {
                sub_18135BB8C((uint64_t)a3, 58);
              }

              else
              {
                uint64_t v48 = a3[1];
                a3[3] = v47 + 1;
                *(_BYTE *)(v48 + v47) = 58;
              }

              uint64_t result = sub_18135A944(v4, v6 + 16LL * v43, a3);
            }

            if (*v44 >= 7u) {
              int v42 = *(_DWORD *)(v6 + 16 * v43 + 4) + 1;
            }
            else {
              int v42 = 1;
            }
            uint64_t v41 = v43 + v42;
          }

          while ((v43 + v42) <= *(_DWORD *)(v6 + 4));
        }
      }

      uint64_t v38 = a3[3];
      if (v38 >= a3[2]) {
        return sub_18135BB8C((uint64_t)a3, 125);
      }
      int v39 = a3[1];
      a3[3] = v38 + 1;
      uint64_t v40 = 125;
LABEL_168:
      *(_BYTE *)(v39 + v38) = v40;
      return result;
    default:
      int v9 = a3[3];
      if ((unint64_t)(v9 + 4) < a3[2])
      {
        uint64_t v10 = a3[1];
        uint64_t v11 = 1819047278;
LABEL_24:
        *(_DWORD *)(v10 + v9) = v11;
        a3[3] += 4LL;
        return result;
      }

      int v26 = "null";
LABEL_38:
      uint64_t v27 = (uint64_t)a3;
      uint64_t v28 = 4;
      return sub_18135B8EC(v27, v26, v28);
  }

LABEL_943:
        if (!*((void *)v9 + 11)) {
          goto LABEL_27;
        }
        return v13;
      }

      uint64_t v377 = (unsigned int *)*((void *)v9 + 5);
      uint64_t v378 = **((unsigned int **)v9 + 4);
      uint64_t v379 = (uint64_t)a1[2];
      uint64_t v380 = (uint64_t)*a1;
      uint64_t v381 = (uint64_t (*)(void, uint64_t, void, void, void, void *))(*a1)[66];
      if (!v381 || *(_BYTE *)(v380 + 197) || *((_BYTE *)a1 + 302))
      {
LABEL_521:
        uint64_t v382 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v382;
        *((_WORD *)v9 + 1) = 320;
        sub_18128A040((uint64_t)a1, (uint64_t)v9, v382, v21, v22, v23, v24, v25);
        uint64_t v387 = *((void *)v9 + 12);
        unsigned int v388 = *((_DWORD *)v9 + 2);
        unsigned int v389 = *((_DWORD *)v9 + 3);
        *((void *)v9 + 12) = 0LL;
        *((void *)v9 + 1) = 0LL;
        uint64_t v390 = *v377;
        uint64_t v1144 = v387;
        unsigned int v1134 = v382;
        unsigned int v1122 = v389;
        if ((int)v390 < 1)
        {
LABEL_525:
          uint64_t v392 = 0LL;
        }

        else
        {
          v391 = v377 + 18;
          while ((*(_WORD *)((_BYTE *)v391 - 3) & 0x40) == 0)
          {
            v391 += 26;
            if (!--v390) {
              goto LABEL_525;
            }
          }

          uint64_t v392 = *v391;
        }

        uint64_t v554 = (_DWORD *)*((void *)v9 + 9);
        uint64_t v555 = *((unsigned int *)a1 + 13);
        uint64_t v556 = (v555 + 1);
        *((_DWORD *)a1 + 13) = v556;
        v1141 = v8;
        if (*v9 == 134)
        {
          if (v554) {
            char v557 = 6;
          }
          else {
            char v557 = 5;
          }
          *((_DWORD *)a1 + 13) = v555 + 2;
        }

        else
        {
          uint64_t v556 = 0LL;
          if (v554) {
            char v557 = 7;
          }
          else {
            char v557 = 8;
          }
        }

        LOBYTE(v1155) = v557;
        v1158[0] = 0LL;
        HIDWORD(v1155) = v555;
        v1156 = 0LL;
        LODWORD(v1157) = 0;
        uint64_t v558 = (*((_DWORD *)a1 + 14) + 1);
        *((_DWORD *)a1 + 14) = v558;
        int v559 = *(_DWORD *)(v379 + 144);
        unsigned int v1128 = v388;
        if (*(_DWORD *)(v379 + 148) <= v559)
        {
          sub_18131044C(v379, 121LL, v392, v558, v378, v384, v385, v386);
        }

        else
        {
          *(_DWORD *)(v379 + 144) = v559 + 1;
          uint64_t v560 = *(void *)(v379 + 136) + 40LL * v559;
          *(_DWORD *)uint64_t v560 = 121;
          *(_DWORD *)(v560 + 4) = v392;
          *(_DWORD *)(v560 + 8) = v558;
          *(_DWORD *)(v560 + 12) = v378;
          *(void *)(v560 + 24) = 0LL;
          *(void *)(v560 + 32) = 0LL;
          *(void *)(v560 + 16) = 0LL;
        }

        if (v554)
        {
          uint64_t v561 = sub_181329D1C((uint64_t *)a1, (uint64_t)v9);
          sub_1812B9B68((uint64_t *)v379, 118LL, v555, (*v554 + 2), 0LL, v561, 4294967288LL, v562);
          v1158[1] = v554;
        }

        else
        {
          sub_1813103F4(v379, 118LL, v555, v378, v383, v384, v385, v386);
        }

        if ((_DWORD)v556)
        {
          *((_DWORD *)v9 + 5) = sub_1813103F4(v379, 118LL, v556, 0LL, v565, v566, v567, v568);
          int v569 = *((_DWORD *)v9 + 1) | 0x20;
          *((_DWORD *)v9 + 1) = v569;
        }

        else
        {
          int v569 = *((_DWORD *)v9 + 1);
        }

        *(void *)v1147 = 0LL;
        uint64_t v570 = v9;
        do
        {
          if ((v569 & 8) != 0)
          {
            sub_1812DC47C( (uint64_t)a1,  "recursive aggregate queries not supported",  v563,  v564,  v565,  v566,  v567,  v568,  v1050);
            goto LABEL_877;
          }

          uint64_t v571 = v570;
          *uint64_t v570 = -121;
          uint64_t v570 = (unsigned __int8 *)*((void *)v570 + 10);
          int v569 = *((_DWORD *)v570 + 1);
        }

        while ((v569 & 0x2000) != 0);
        *((void *)v570 + 11) = 0LL;
        sub_18131CCF8((uint64_t *)a1, 1, "SETUP", v564, v565, v566, v567, v568, v1050);
        int v572 = sub_1812801A8(a1, v570, &v1155);
        *((void *)v570 + 11) = v9;
        if (!v572)
        {
          unsigned int v1106 = sub_1813103F4(v379, 36LL, v555, v1134, v573, v574, v575, v576);
          sub_181319BA8(v379, 136LL, v392, v577, v578, v579, v580, v581);
          unsigned int v1114 = v392;
          if (v554) {
            sub_181279C3C(v379, 94LL, v555, (*v554 + 1), v558, v583, v584, v585);
          }
          else {
            sub_1813103F4(v379, 134LL, v555, v558, v582, v583, v584, v585);
          }
          sub_181319BA8(v379, 130LL, v555, v586, v587, v588, v589, v590);
          uint64_t v731 = (*((_DWORD *)a1 + 17) - 1);
          *((_DWORD *)a1 + 17) = v731;
          sub_181329ED0(v379, v1122, v731, v732, v733, v734, v735, v736);
          sub_18128BE18((uint64_t)a1, (uint64_t)v9, v1114, 0LL, 0LL, v1170, v731, v1134);
          if (v1128) {
            sub_1813103F4(v379, 61LL, v1128, v1134, v737, v738, v739, v740);
          }
          sub_18131B3E0(v379, v731);
          *((void *)v571 + 10) = 0LL;
          sub_18131CCF8((uint64_t *)a1, 1, "RECURSIVE STEP", v741, v742, v743, v744, v745, v1054);
          sub_1812801A8(a1, v9, &v1155);
          *((void *)v571 + 10) = v570;
          sub_181319CC8(v379, v1106, v746, v747, v748, v749, v750, v751);
          sub_18131B3E0(v379, v1134);
        }

LABEL_877:
        if (*(void *)v1147) {
          sub_181311F48(*a1, *(void **)v1147);
        }
        *((void *)v9 + 9) = v554;
        int v8 = v1141;
        *((void *)v9 + 12) = v1144;
        goto LABEL_880;
      }

      int v727 = v381(*(void *)(v380 + 536), 33LL, 0LL, 0LL, 0LL, a1[46]);
      if (v727 == 1)
      {
        int v729 = 23;
        uint64_t v730 = "not authorized";
      }

      else
      {
        if ((v727 & 0xFFFFFFFD) == 0)
        {
          if (v727) {
            goto LABEL_880;
          }
          goto LABEL_521;
        }

        int v729 = 1;
        uint64_t v730 = "authorizer malfunction";
      }

      sub_1812DC47C((uint64_t)a1, v730, v728, v21, v22, v23, v24, v25, v1050);
      *((_DWORD *)a1 + 6) = v729;
      goto LABEL_880;
    }

LABEL_170:
    uint64_t v117 = *(unsigned int **)v1147;
    if (*(void *)v1147)
    {
      uint64_t v118 = (uint64_t)*a1;
      uint64_t v119 = (uint64_t)a1[2];
      int v120 = *((_DWORD *)a1 + 17);
      unsigned int v1117 = v120 - 2;
      *((_DWORD *)a1 + 17) = v120 - 2;
      int v1154 = *v9;
      uint64_t v121 = *v117;
      if (v1154 == 135 || *(_BYTE *)(v118 + 103))
      {
LABEL_173:
        uint64_t v122 = (v121 + 1);
        uint64_t v123 = (_DWORD *)sub_1812F2264(v118, 4LL * (int)v122);
        uint64_t v1077 = (uint64_t)v123;
        if (!v123)
        {
          uint64_t v1074 = 0LL;
          int v127 = v1154;
          goto LABEL_201;
        }

        *uint64_t v123 = v121;
        int v127 = v1154;
        if ((int)v121 >= 1)
        {
          uint64_t v128 = v117 + 2;
          uint64_t v129 = v122 - 1;
          if ((unint64_t)(v122 - 1) >= 0xC
            && ((int v130 = (uint32x4_t *)(v123 + 1),
                 v123 + 1 < (unsigned int *)((char *)&v117[6 * v122 - 4] - 2))
              ? (BOOL v131 = v117 + 7 >= &v123[v122])
              : (BOOL v131 = 1),
                v131))
          {
            unint64_t v132 = v129 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v128 += 6 * (v129 & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v133 = (__int16 *)(v117 + 13);
            v134.i64[0] = -1LL;
            v134.i64[1] = -1LL;
            unint64_t v135 = v129 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v136.i16[0] = *(v133 - 12);
              v136.i16[1] = *v133;
              v136.i16[2] = v133[12];
              v136.i16[3] = v133[24];
              *v130++ = vaddw_u16(v134, v136);
              v133 += 48;
              v135 -= 4LL;
            }

            while (v135);
            if (v129 == (v129 & 0xFFFFFFFFFFFFFFFCLL)) {
              goto LABEL_200;
            }
          }

          else
          {
            unint64_t v132 = 1LL;
          }

          uint64_t v150 = v122 - v132;
          uint64_t v151 = &v123[v132];
          uint64_t v152 = (unsigned __int16 *)(v128 + 5);
          do
          {
            int v153 = *v152;
            v152 += 12;
            *v151++ = v153 - 1;
            --v150;
          }

          while (v150);
        }

        BOOL v75 = sub_181358F20(a1, v2);
        if (v75 == -4)
        {
          LODWORD(v2) = a1[17];
          goto LABEL_138;
        }

        if (v75 == -2)
        {
          LODWORD(v2) = a1[17];
          goto LABEL_222;
        }

        goto LABEL_215;
      case 0x7D:
        a1[17] = v2;
        return 4294967294LL;
      default:
LABEL_96:
        int v39 = 0LL;
        while (v6 != *((unsigned __int8 *)&unk_189B6EA60 + 24 * v39)
             && v6 != *((unsigned __int8 *)&unk_189B6EA60 + 24 * v39 + 1))
        {
LABEL_98:
          if (++v39 == 5) {
            goto LABEL_215;
          }
        }

        uint64_t v40 = (char *)&unk_189B6EA60 + 24 * v39;
        uint64_t v41 = v40[2];
        int v42 = (unsigned __int8 *)*((void *)v40 + 1);
        uint64_t v43 = v41 + 1;
        uint64_t v44 = (_BYTE *)(v4 + v2);
        while (1)
        {
          uint64_t v45 = *v44;
          if (!*v44) {
            break;
          }
          LODWORD(v45) = byte_1813C6343[v45];
          uint64_t v46 = byte_1813C6343[*v42];
          if ((_DWORD)v45 != v46) {
            goto LABEL_107;
          }
          ++v44;
          ++v42;
        }

        uint64_t v46 = byte_1813C6343[*v42];
LABEL_107:
        if ((_DWORD)v45 != v46) {
          goto LABEL_98;
        }
LABEL_97:
        uint64_t v12 = (v2 + v41);
        sub_18135A0F0( a1,  *((char *)&unk_189B6EA60 + 24 * v39 + 3),  *((char *)&unk_189B6EA60 + 24 * v39 + 4),  *((void *)&unk_189B6EA60 + 3 * v39 + 2));
        *((_BYTE *)a1 + 53) = 1;
        return v12;
    }
  }

LABEL_200:
        uint64_t v1074 = sub_181329D1C((uint64_t *)a1, (uint64_t)v9);
LABEL_201:
        unsigned int v1143 = v120 - 1;
        v1083 = (void *)v118;
        uint64_t v1139 = (uint64_t)v8;
        int v1080 = v120;
        if (v127 == 135)
        {
          uint64_t v154 = 0LL;
          unsigned int v155 = 0;
        }

        else
        {
          uint64_t v156 = **((unsigned int **)v9 + 4);
          uint64_t v157 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v157 + v156;
          int v158 = *(_DWORD *)(v119 + 144);
          unsigned int v1088 = v157;
          if (*(_DWORD *)(v119 + 148) <= v158)
          {
            sub_18131044C(v119, 71LL, 0LL, v157, 0LL, v124, v125, v126);
          }

          else
          {
            *(_DWORD *)(v119 + 144) = v158 + 1;
            uint64_t v159 = *(void *)(v119 + 136) + 40LL * v158;
            *(void *)uint64_t v159 = 71LL;
            *(_DWORD *)(v159 + 8) = v157;
            *(void *)(v159 + 12) = 0LL;
            *(void *)(v159 + 28) = 0LL;
            *(void *)(v159 + 20) = 0LL;
            *(_DWORD *)(v159 + 36) = 0;
          }

          uint64_t v154 = sub_18131A140(v118, v156, 1);
          if (v154) {
            BOOL v371 = (int)v156 < 1;
          }
          else {
            BOOL v371 = 1;
          }
          if (!v371)
          {
            uint64_t v372 = 0LL;
            do
            {
              *(void *)(v154 + 32 + 8 * v372) = sub_1812B63B8( (uint64_t)a1,  (uint64_t)v9,  v372,  v366,  v367,  v368,  v369,  v370);
              *(_BYTE *)(*(void *)(v154 + 24) + v372++) = 0;
            }

            while (v156 != v372);
          }

          int v127 = v1154;
          if ((v1154 & 0xFE) != 0x86)
          {
            int v1072 = v1154 & 0xFE;
            int v1113 = 0;
            v376 = v9;
LABEL_555:
            uint64_t v426 = *((void *)v376 + 10);
            *((void *)v376 + 10) = 0LL;
            *(void *)(v426 + 88) = 0LL;
            *(void *)(v426 + 72) = sub_18129CD4C((uint64_t)*a1, v117, 0);
            sub_1813232EC( (unsigned __int8 *)a1,  (uint64_t)v9,  *((int **)v9 + 9),  (uint64_t)"ORDER",  v408,  v409,  v410,  v411);
            uint64_t v1135 = v426;
            sub_1813232EC((unsigned __int8 *)a1, v426, *(int **)(v426 + 72), (uint64_t)"ORDER", v412, v413, v414, v415);
            sub_18128A040((uint64_t)a1, (uint64_t)v9, v1143, v416, v417, v418, v419, v420);
            LODWORD(v426) = 0;
            if (v1154 == 135)
            {
              unsigned int v427 = *((_DWORD *)v9 + 2);
              LODWORD(v428) = 0;
              if (v427)
              {
                int v429 = *((_DWORD *)a1 + 14);
                uint64_t v426 = (v429 + 1);
                uint64_t v428 = (v429 + 2);
                *((_DWORD *)a1 + 14) = v428;
                int v430 = *((_DWORD *)v9 + 3);
                if (v430) {
                  uint64_t v431 = (v430 + 1);
                }
                else {
                  uint64_t v431 = v427;
                }
                int v432 = *(_DWORD *)(v119 + 144);
                if (*(_DWORD *)(v119 + 148) <= v432)
                {
                  sub_18131044C(v119, 80LL, v431, v426, 0LL, v423, v424, v425);
                }

                else
                {
                  *(_DWORD *)(v119 + 144) = v432 + 1;
                  uint64_t v433 = *(void *)(v119 + 136) + 40LL * v432;
                  *(_DWORD *)uint64_t v433 = 80;
                  *(_DWORD *)(v433 + 4) = v431;
                  *(_DWORD *)(v433 + 8) = v426;
                  *(void *)(v433 + 12) = 0LL;
                  *(void *)(v433 + 28) = 0LL;
                  *(void *)(v433 + 20) = 0LL;
                  *(_DWORD *)(v433 + 36) = 0;
                }

                int v434 = *(_DWORD *)(v119 + 144);
                if (*(_DWORD *)(v119 + 148) <= v434)
                {
                  sub_18131044C(v119, 80LL, v426, v428, 0LL, v423, v424, v425);
                }

                else
                {
                  *(_DWORD *)(v119 + 144) = v434 + 1;
                  uint64_t v435 = *(void *)(v119 + 136) + 40LL * v434;
                  *(_DWORD *)uint64_t v435 = 80;
                  *(_DWORD *)(v435 + 4) = v426;
                  *(_DWORD *)(v435 + 8) = v428;
                  *(void *)(v435 + 12) = 0LL;
                  *(void *)(v435 + 28) = 0LL;
                  *(void *)(v435 + 20) = 0LL;
                  *(_DWORD *)(v435 + 36) = 0;
                }
              }
            }

            else
            {
              LODWORD(v428) = 0;
            }

            unsigned int v1067 = v428;
            v436 = (unsigned __int8 *)*((void *)v9 + 12);
            if (v436) {
              sub_181309110((void *)v118, v436);
            }
            *((void *)v9 + 12) = 0LL;
            int v437 = *((_DWORD *)a1 + 14);
            LODWORD(v438) = v437 + 1;
            unsigned int v1099 = v437 + 4;
            *((_DWORD *)a1 + 14) = v437 + 4;
            LOBYTE(v1155) = 13;
            HIDWORD(v1155) = v437 + 1;
            v1158[0] = 0LL;
            v1156 = 0LL;
            LODWORD(v1157) = 0;
            LOBYTE(v1164) = 13;
            unsigned int v1149 = v437 + 2;
            HIDWORD(v1164) = v437 + 2;
            v1167 = 0LL;
            v1165 = 0LL;
            LODWORD(v1166) = 0;
            else {
              uint64_t v439 = off_189B6F8B0[(char)(*v9 + 121)];
            }
            sub_18131CCF8((uint64_t *)a1, 1, "MERGE (%s)", v421, v422, v423, v424, v425, (char)v439);
            int v444 = *(_DWORD *)(v119 + 144);
            uint64_t v445 = (v444 + 1);
            unsigned int v1105 = v437 + 1;
            if (*(_DWORD *)(v119 + 148) <= v444)
            {
              int v444 = sub_18131044C(v119, 11LL, (v437 + 1), 0LL, v445, v441, v442, v443);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v445;
              uint64_t v446 = *(void *)(v119 + 136) + 40LL * v444;
              *(_DWORD *)uint64_t v446 = 11;
              *(_DWORD *)(v446 + 4) = v438;
              *(_DWORD *)(v446 + 8) = 0;
              *(_DWORD *)(v446 + 12) = v445;
              *(void *)(v446 + 24) = 0LL;
              *(void *)(v446 + 32) = 0LL;
              *(void *)(v446 + 16) = 0LL;
            }

            *(_DWORD *)(v1135 + 8) = v426;
            sub_18131CCF8((uint64_t *)a1, 1, "LEFT", v440, v445, v441, v442, v443, v1052);
            sub_1812801A8(a1, v1135, &v1155);
            int v451 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v451)
            {
              uint64_t v438 = v438;
              sub_18131044C(v119, 68LL, v438, 0LL, 0LL, v448, v449, v450);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v451 + 1;
              uint64_t v452 = *(void *)(v119 + 136) + 40LL * v451;
              uint64_t v438 = v438;
              *(_DWORD *)uint64_t v452 = 68;
              *(_DWORD *)(v452 + 4) = v438;
              *(_OWORD *)(v452 + 8) = 0u;
              *(_OWORD *)(v452 + 24) = 0u;
            }

            uint64_t v453 = *(void *)(v119 + 24);
            *(_BYTE *)(v453 + 31) = 0;
            *(_DWORD *)(v453 + 40) = 0;
            int v454 = *(_DWORD *)(v119 + 144);
            if (*(_BYTE *)(*(void *)v119 + 103LL)) {
              uint64_t v455 = &byte_18C550680;
            }
            else {
              uint64_t v455 = (char *)(*(void *)(v119 + 136) + 40LL * v444);
            }
            unsigned int v1127 = v437 + 3;
            *((_DWORD *)v455 + 2) = v454;
            uint64_t v456 = (v454 + 1);
            if (*(_DWORD *)(v119 + 148) <= v454)
            {
              int v1064 = sub_18131044C(v119, 11LL, v1149, 0LL, v456, v448, v449, v450);
            }

            else
            {
              int v1064 = v454;
              *(_DWORD *)(v119 + 144) = v456;
              uint64_t v457 = *(void *)(v119 + 136) + 40LL * v454;
              *(_DWORD *)uint64_t v457 = 11;
              *(void *)(v457 + 4) = v1149;
              *(_DWORD *)(v457 + 12) = v456;
              *(void *)(v457 + 24) = 0LL;
              *(void *)(v457 + 32) = 0LL;
              *(void *)(v457 + 16) = 0LL;
            }

            uint64_t v458 = v438;
            uint64_t v459 = *((void *)v9 + 1);
            *((void *)v9 + 1) = v1067;
            sub_18131CCF8((uint64_t *)a1, 1, "RIGHT", v447, v456, v448, v449, v450, v1053);
            sub_1812801A8(a1, v9, &v1164);
            *((void *)v9 + 1) = v459;
            int v463 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v463)
            {
              sub_18131044C(v119, 68LL, v1149, 0LL, 0LL, v460, v461, v462);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v463 + 1;
              uint64_t v464 = *(void *)(v119 + 136) + 40LL * v463;
              *(_DWORD *)uint64_t v464 = 68;
              *(_DWORD *)(v464 + 4) = v1149;
              *(_OWORD *)(v464 + 8) = 0u;
              *(_OWORD *)(v464 + 24) = 0u;
            }

            uint64_t v465 = v1088;
            uint64_t v466 = *(void *)(v119 + 24);
            *(_BYTE *)(v466 + 31) = 0;
            *(_DWORD *)(v466 + 40) = 0;
            uint64_t v470 = sub_181329F2C((uint64_t)a1, (uint64_t)v9, (uint64_t)&v1155, v1139, v1127, v1088, (_DWORD *)v154, v1143);
            unsigned int v1092 = 0;
            if (v1113) {
              unsigned int v1092 = sub_181329F2C( (uint64_t)a1,  (uint64_t)v9,  (uint64_t)&v1164,  v1139,  v1099,  v465,  (_DWORD *)v154,  v1143);
            }
            if (v154)
            {
              BOOL v195 = (*(_DWORD *)v154)-- == 1;
              if (v195) {
                sub_1813014B0(*(void **)(v154 + 16), (void *)v154);
              }
            }

            uint64_t v471 = v1143;
            uint64_t v472 = v1143;
            uint64_t v473 = v458;
            if (v1072 != 136)
            {
              uint64_t v472 = *(unsigned int *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= (int)v472)
              {
                uint64_t v472 = sub_18131044C(v119, 10LL, v1099, v1092, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v472 + 1;
                uint64_t v474 = *(void *)(v119 + 136) + 40LL * (int)v472;
                *(_DWORD *)uint64_t v474 = 10;
                *(_DWORD *)(v474 + 4) = v1099;
                *(_DWORD *)(v474 + 8) = v1092;
                *(void *)(v474 + 12) = 0LL;
                *(void *)(v474 + 28) = 0LL;
                *(void *)(v474 + 20) = 0LL;
                *(_DWORD *)(v474 + 36) = 0;
              }

              uint64_t v471 = *(unsigned int *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= (int)v471)
              {
                uint64_t v471 = sub_18131044C(v119, 12LL, v1149, v1143, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v471 + 1;
                uint64_t v475 = *(void *)(v119 + 136) + 40LL * (int)v471;
                *(_DWORD *)uint64_t v475 = 12;
                *(_DWORD *)(v475 + 4) = v1149;
                *(_DWORD *)(v475 + 8) = v1143;
                *(void *)(v475 + 12) = 0LL;
                *(void *)(v475 + 28) = 0LL;
                *(void *)(v475 + 20) = 0LL;
                *(_DWORD *)(v475 + 36) = 0;
              }

              int v476 = *(_DWORD *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= v476)
              {
                sub_18131044C(v119, 9LL, 0LL, v472, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v476 + 1;
                uint64_t v477 = *(void *)(v119 + 136) + 40LL * v476;
                *(void *)uint64_t v477 = 9LL;
                *(_DWORD *)(v477 + 8) = v472;
                *(void *)(v477 + 12) = 0LL;
                *(void *)(v477 + 28) = 0LL;
                *(void *)(v477 + 20) = 0LL;
                *(_DWORD *)(v477 + 36) = 0;
              }

              int v478 = *((__int16 *)v9 + 1);
              int v479 = *(__int16 *)(v1135 + 2);
              if (v478 >= v479)
              {
                __int16 v480 = *((_WORD *)v9 + 1);
                if (v479 + 49 >= v478)
                {
                  if (v479 + 31 >= v478) {
                    __int16 v480 = v478 + byte_1813CA370[v478 - v479];
                  }
                  else {
                    __int16 v480 = v478 + 1;
                  }
                }
              }

              else
              {
                __int16 v480 = *(_WORD *)(v1135 + 2);
                if (v478 + 49 >= v479)
                {
                  if (v478 + 31 >= v479) {
                    __int16 v480 = v479 + byte_1813CA370[v479 - v478];
                  }
                  else {
                    __int16 v480 = v479 + 1;
                  }
                }
              }

              *((_WORD *)v9 + 1) = v480;
            }

            uint64_t v1140 = v471;
            if (v1154 == 137)
            {
              int v509 = *(__int16 *)(v1135 + 2);
              uint64_t v510 = v472;
              if (*((__int16 *)v9 + 1) > v509)
              {
                *((_WORD *)v9 + 1) = v509;
                uint64_t v510 = v472;
              }
            }

            else
            {
              uint64_t v510 = *(unsigned int *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= (int)v510)
              {
                uint64_t v510 = sub_18131044C(v119, 10LL, v1127, v470, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v510 + 1;
                uint64_t v511 = *(void *)(v119 + 136) + 40LL * (int)v510;
                *(_DWORD *)uint64_t v511 = 10;
                *(_DWORD *)(v511 + 4) = v1127;
                *(_DWORD *)(v511 + 8) = v470;
                *(void *)(v511 + 12) = 0LL;
                *(void *)(v511 + 28) = 0LL;
                *(void *)(v511 + 20) = 0LL;
                *(_DWORD *)(v511 + 36) = 0;
              }

              int v512 = *(_DWORD *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= v512)
              {
                sub_18131044C(v119, 12LL, v458, v1143, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v512 + 1;
                uint64_t v513 = *(void *)(v119 + 136) + 40LL * v512;
                *(_DWORD *)uint64_t v513 = 12;
                *(_DWORD *)(v513 + 4) = v458;
                *(_DWORD *)(v513 + 8) = v1143;
                *(void *)(v513 + 12) = 0LL;
                *(void *)(v513 + 28) = 0LL;
                *(void *)(v513 + 20) = 0LL;
                *(_DWORD *)(v513 + 36) = 0;
              }

              int v514 = *(_DWORD *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= v514)
              {
                sub_18131044C(v119, 9LL, 0LL, v510, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v514 + 1;
                uint64_t v515 = *(void *)(v119 + 136) + 40LL * v514;
                *(void *)uint64_t v515 = 9LL;
                *(_DWORD *)(v515 + 8) = v510;
                *(void *)(v515 + 12) = 0LL;
                *(void *)(v515 + 28) = 0LL;
                *(void *)(v515 + 20) = 0LL;
                *(_DWORD *)(v515 + 36) = 0;
              }
            }

            uint64_t v516 = *(unsigned int *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= (int)v516)
            {
              uint64_t v516 = sub_18131044C(v119, 10LL, v1127, v470, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v516 + 1;
              uint64_t v517 = *(void *)(v119 + 136) + 40LL * (int)v516;
              *(_DWORD *)uint64_t v517 = 10;
              *(_DWORD *)(v517 + 4) = v1127;
              *(_DWORD *)(v517 + 8) = v470;
              *(void *)(v517 + 12) = 0LL;
              *(void *)(v517 + 28) = 0LL;
              *(void *)(v517 + 20) = 0LL;
              *(_DWORD *)(v517 + 36) = 0;
            }

            int v518 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v518)
            {
              sub_18131044C(v119, 12LL, v473, v472, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v518 + 1;
              uint64_t v519 = *(void *)(v119 + 136) + 40LL * v518;
              *(_DWORD *)uint64_t v519 = 12;
              *(_DWORD *)(v519 + 4) = v473;
              *(_DWORD *)(v519 + 8) = v472;
              *(void *)(v519 + 12) = 0LL;
              *(void *)(v519 + 28) = 0LL;
              *(void *)(v519 + 20) = 0LL;
              *(_DWORD *)(v519 + 36) = 0;
            }

            int v520 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v520)
            {
              sub_18131044C(v119, 9LL, 0LL, v1117, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v520 + 1;
              uint64_t v521 = *(void *)(v119 + 136) + 40LL * v520;
              *(void *)uint64_t v521 = 9LL;
              *(_DWORD *)(v521 + 8) = v1117;
              *(void *)(v521 + 12) = 0LL;
              *(void *)(v521 + 28) = 0LL;
              *(void *)(v521 + 20) = 0LL;
              *(_DWORD *)(v521 + 36) = 0;
            }

            if (v1154 == 135)
            {
              uint64_t v522 = v516;
              int v523 = v1080;
            }

            else if (v1154 == 137)
            {
              uint64_t v522 = v516;
              uint64_t v516 = (v516 + 1);
              int v523 = v1080;
            }

            else
            {
              uint64_t v522 = *(unsigned int *)(v119 + 144);
              if (*(_DWORD *)(v119 + 148) <= (int)v522)
              {
                uint64_t v522 = sub_18131044C(v119, 12LL, v473, v472, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v522 + 1;
                uint64_t v524 = *(void *)(v119 + 136) + 40LL * (int)v522;
                *(_DWORD *)uint64_t v524 = 12;
                *(_DWORD *)(v524 + 4) = v473;
                *(_DWORD *)(v524 + 8) = v472;
                *(void *)(v524 + 12) = 0LL;
                *(void *)(v524 + 28) = 0LL;
                *(void *)(v524 + 20) = 0LL;
                *(_DWORD *)(v524 + 36) = 0;
              }

              int v525 = *(_DWORD *)(v119 + 144);
              int v523 = v1080;
              if (*(_DWORD *)(v119 + 148) <= v525)
              {
                sub_18131044C(v119, 9LL, 0LL, v1117, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v525 + 1;
                uint64_t v526 = *(void *)(v119 + 136) + 40LL * v525;
                *(void *)uint64_t v526 = 9LL;
                *(_DWORD *)(v526 + 8) = v1117;
                *(void *)(v526 + 12) = 0LL;
                *(void *)(v526 + 28) = 0LL;
                *(void *)(v526 + 20) = 0LL;
                *(_DWORD *)(v526 + 36) = 0;
              }
            }

            uint64_t v527 = *(unsigned int *)(v119 + 144);
            if (v1113)
            {
              if (*(_DWORD *)(v119 + 148) <= (int)v527)
              {
                sub_18131044C(v119, 10LL, v1099, v1092, 0LL, v467, v468, v469);
              }

              else
              {
                *(_DWORD *)(v119 + 144) = v527 + 1;
                uint64_t v528 = *(void *)(v119 + 136) + 40LL * (int)v527;
                *(_DWORD *)uint64_t v528 = 10;
                *(_DWORD *)(v528 + 4) = v1099;
                *(_DWORD *)(v528 + 8) = v1092;
                *(void *)(v528 + 12) = 0LL;
                *(void *)(v528 + 28) = 0LL;
                *(void *)(v528 + 20) = 0LL;
                *(_DWORD *)(v528 + 36) = 0;
              }
            }

            int v529 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v529)
            {
              sub_18131044C(v119, 12LL, v1149, v510, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v529 + 1;
              uint64_t v530 = *(void *)(v119 + 136) + 40LL * v529;
              *(_DWORD *)uint64_t v530 = 12;
              *(_DWORD *)(v530 + 4) = v1149;
              *(_DWORD *)(v530 + 8) = v510;
              *(void *)(v530 + 12) = 0LL;
              *(void *)(v530 + 28) = 0LL;
              *(void *)(v530 + 20) = 0LL;
              *(_DWORD *)(v530 + 36) = 0;
            }

            int v531 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v531)
            {
              sub_18131044C(v119, 9LL, 0LL, v1117, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v531 + 1;
              uint64_t v532 = *(void *)(v119 + 136) + 40LL * v531;
              *(void *)uint64_t v532 = 9LL;
              *(_DWORD *)(v532 + 8) = v1117;
              *(void *)(v532 + 12) = 0LL;
              *(void *)(v532 + 28) = 0LL;
              *(void *)(v532 + 20) = 0LL;
              *(_DWORD *)(v532 + 36) = 0;
            }

            int v533 = *(_DWORD *)(v119 + 144);
            if (*(_BYTE *)(*(void *)v119 + 103LL)) {
              uint64_t v534 = &byte_18C550680;
            }
            else {
              uint64_t v534 = (char *)(*(void *)(v119 + 136) + 40LL * v1064);
            }
            *((_DWORD *)v534 + 2) = v533;
            if (*(_DWORD *)(v119 + 148) <= v533)
            {
              sub_18131044C(v119, 12LL, v1105, v1140, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v533 + 1;
              uint64_t v535 = *(void *)(v119 + 136) + 40LL * v533;
              *(_DWORD *)uint64_t v535 = 12;
              *(_DWORD *)(v535 + 4) = v1105;
              *(_DWORD *)(v535 + 8) = v1140;
              *(void *)(v535 + 12) = 0LL;
              *(void *)(v535 + 28) = 0LL;
              *(void *)(v535 + 20) = 0LL;
              *(_DWORD *)(v535 + 36) = 0;
            }

            int v536 = *(_DWORD *)(v119 + 144);
            if (*(_DWORD *)(v119 + 148) <= v536)
            {
              sub_18131044C(v119, 12LL, v1149, v510, 0LL, v467, v468, v469);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v536 + 1;
              uint64_t v537 = *(void *)(v119 + 136) + 40LL * v536;
              *(_DWORD *)uint64_t v537 = 12;
              *(_DWORD *)(v537 + 4) = v1149;
              *(_DWORD *)(v537 + 8) = v510;
              *(void *)(v537 + 12) = 0LL;
              *(void *)(v537 + 28) = 0LL;
              *(void *)(v537 + 20) = 0LL;
              *(_DWORD *)(v537 + 36) = 0;
            }

            uint64_t v538 = *(void *)(v119 + 24);
            int v539 = 1 - v523;
            if (*(_DWORD *)(v538 + 68) + *(_DWORD *)(v538 + 72) < 0) {
              sub_18131E420(v538, v119, v539);
            }
            else {
              *(_DWORD *)(*(void *)(v538 + 80) + 4LL * v539) = *(_DWORD *)(v119 + 144);
            }
            sub_1812B9B68((uint64_t *)v119, 89LL, 0LL, 0LL, 0LL, v1077, 4294967282LL, v469);
            sub_1812B9B68((uint64_t *)v119, 90LL, HIDWORD(v1156), HIDWORD(v1165), v121, v1074, 4294967288LL, v540);
            int v544 = *(_DWORD *)(v119 + 144);
            if (v544 >= 1) {
              *(_WORD *)(*(void *)(v119 + 136) + 40LL * (v544 - 1) + 2) = 1;
            }
            if (*(_DWORD *)(v119 + 148) <= v544)
            {
              sub_18131044C(v119, 14LL, v516, v522, v527, v541, v542, v543);
            }

            else
            {
              *(_DWORD *)(v119 + 144) = v544 + 1;
              uint64_t v545 = *(void *)(v119 + 136) + 40LL * v544;
              *(_DWORD *)uint64_t v545 = 14;
              *(_DWORD *)(v545 + 4) = v516;
              *(_DWORD *)(v545 + 8) = v522;
              *(_DWORD *)(v545 + 12) = v527;
              *(void *)(v545 + 24) = 0LL;
              *(void *)(v545 + 32) = 0LL;
              *(void *)(v545 + 16) = 0LL;
            }

            uint64_t v546 = *(void *)(v119 + 24);
            int v547 = -v523;
            if (*(_DWORD *)(v546 + 68) + *(_DWORD *)(v546 + 72) < 0) {
              sub_18131E420(v546, v119, v547);
            }
            else {
              *(_DWORD *)(*(void *)(v546 + 80) + 4LL * v547) = *(_DWORD *)(v119 + 144);
            }
            uint64_t v548 = *((void *)v376 + 10);
            if (v548)
            {
              if (*a1) {
                v549 = (void *)sub_1812F2264((uint64_t)*a1, 0x18uLL);
              }
              else {
                v549 = (void *)sub_18126F0AC(24LL);
              }
              if (v549)
              {
                void *v549 = a1[24];
                a1[24] = v549;
                v549[1] = v548;
                v549[2] = sub_181309100;
              }

              else
              {
                sub_18128FDA0(*a1, v548, 1);
              }
            }

            *((void *)v376 + 10) = v1135;
            *(void *)(v1135 + 88) = v376;
            uint64_t v550 = *(void **)(v1135 + 72);
            if (v550) {
              sub_181311F48(v1083, v550);
            }
            *(void *)(v1135 + 72) = 0LL;
            int v551 = *((_DWORD *)a1 + 78);
            if (v551)
            {
              v552 = a1[2];
              if (*(_BYTE *)(*v552 + 103LL)) {
                uint64_t v553 = &byte_18C550680;
              }
              else {
                uint64_t v553 = (char *)(v552[17] + 40LL * v551);
              }
              int v551 = *((_DWORD *)v553 + 2);
            }

            *((_DWORD *)a1 + 78) = v551;
            uint64_t v13 = *((_DWORD *)a1 + 12) != 0;
            goto LABEL_943;
          }

          unsigned int v155 = v1088;
        }

        unsigned int v1088 = v155;
        if ((*(_BYTE *)(v118 + 98) & 0x20) != 0) {
          goto LABEL_512;
        }
        int v373 = (unsigned __int8 *)*((void *)v9 + 10);
        if (!v373) {
          goto LABEL_512;
        }
        unsigned int v374 = 1;
        uint64_t v375 = v9;
        do
        {
          if (*v375 != v127) {
            break;
          }
          uint64_t v375 = v373;
          ++v374;
          int v373 = (unsigned __int8 *)*((void *)v373 + 10);
        }

        while (v373);
        if (v374 >= 4)
        {
          unsigned int v407 = 2;
          v376 = v9;
          do
          {
            v376 = (unsigned __int8 *)*((void *)v376 + 10);
            v407 += 2;
          }

          while (v407 < v374);
          int v1113 = 1;
          int v1072 = 134;
        }

        else
        {
LABEL_512:
          int v1113 = 1;
          int v1072 = 134;
          v376 = v9;
        }

        goto LABEL_555;
      }

      int v393 = 1;
      while (1)
      {
        if (v393 > **((_DWORD **)v9 + 4)) {
          goto LABEL_173;
        }
        if ((int)v121 < 1)
        {
          int v396 = 0;
        }

        else
        {
          int v396 = 0;
          uint64_t v397 = (unsigned __int16 *)(v117 + 7);
          while (1)
          {
            int v398 = *v397;
            v397 += 12;
            if (v393 == v398) {
              break;
            }
            if ((_DWORD)v121 == ++v396) {
              goto LABEL_538;
            }
          }
        }

        if (v396 == (_DWORD)v121) {
          break;
        }
LABEL_529:
        ++v393;
        if (*(_BYTE *)(v118 + 103)) {
          goto LABEL_173;
        }
      }

        for (int k = (void *)v28[10]; k; int k = (void *)k[5])
        {
          if (*k == v12) {
            break;
          }
        }

        sub_18133EBBC((uint64_t *)a1, (uint64_t)v28);
        uint64_t v181 = (_BYTE *)*((void *)a1 + 21);
        if (!v181) {
          uint64_t v181 = a1;
        }
        v181[33] = 1;
        if (v210 == 1)
        {
          sub_181319BA8(v224, 122LL, v218, v176, v177, v178, v179, v180);
          if (!*((void *)a1 + 21)) {
            a1[32] = 0;
          }
        }

        sub_1812B9B68((uint64_t *)v224, 7LL, 0LL, 1LL, v205, (uint64_t)k, 4294967285LL, v180);
        uint64_t v187 = *(_DWORD *)(v224 + 144);
        uint64_t v188 = __OFSUB__(v187, 1);
        uint64_t v189 = v187 - 1;
        int v84 = v219;
        if (v189 < 0 == v188) {
          *(_WORD *)(*(void *)(v224 + 136) + 40LL * v189 + 2) = 2;
        }
        uint64_t v112 = v208;
        goto LABEL_212;
      }

      uint64_t v138 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v138;
      uint64_t v139 = *(void *)(v107 + 32);
      uint64_t v90 = v224;
      int v8 = v216;
      if (!v139)
      {
        uint64_t v140 = v108;
        uint64_t v141 = sub_181338578(*(void *)a1, v226);
        int v108 = v140;
        int v8 = v216;
        uint64_t v139 = v141;
      }

      int v142 = v108;
      sub_1812B9B68((uint64_t *)v224, 97LL, v206, v108, v138, v139, v108, v101);
      __int128 v205 = v138;
      sub_1812DC7B4(v224, 138LL, HIDWORD(v206), v138, v206, v142, v143, v144);
      uint64_t v213 = 0;
      uint16x4_t v136 = v211;
    }

    else
    {
      uint64_t v116 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v116;
      sub_18131C0EC(v90, (uint64_t)v28, v218, 0xFFFFFFFFLL, v116, v99, v100, v101, v102);
      __int128 v205 = v116;
      if (v210)
      {
        uint64_t v112 = v208;
        goto LABEL_146;
      }

      sub_1813103F4(v90, 156LL, v203, v116, v117, v118, v119, v120);
      uint64_t v213 = 1;
      uint16x4_t v136 = v211;
    }

    uint64_t v112 = v208;
    sub_18128E90C(v13, v145, v146, v147, v148, v149, v150, v151);
    if ((v221 & 1) == 0) {
      sub_1812A6CB0((uint64_t)a1, (uint64_t)v28, 113LL, 8, v218, 0LL, &v231[1], v231);
    }
    if (v226)
    {
      uint64_t v223 = sub_181319BA8(v90, 36LL, HIDWORD(v206), v162, v163, v164, v165, v166);
      if (*v136 == 1) {
        sub_181279C3C(v90, 94LL, HIDWORD(v206), 0LL, v205, v168, v169, v170);
      }
      else {
        sub_1813103F4(v90, 134LL, HIDWORD(v206), v205, v167, v168, v169, v170);
      }
      uint64_t v13 = 0LL;
      uint64_t v217 = 0;
      char v171 = 1;
      uint64_t v112 = v208;
    }

    else
    {
      uint64_t v223 = sub_181279C3C(v90, 46LL, v203, 0LL, v205, v164, v165, v166);
      uint64_t v13 = 0LL;
      uint64_t v217 = 0;
      char v171 = 1;
    }

    goto LABEL_199;
  }

  uint64_t v114 = 1;
  uint64_t v115 = "authorizer malfunction";
LABEL_159:
  sub_1812DC47C((uint64_t)a1, v115, v54, v55, v56, v57, v58, v59, v198);
  uint64_t v13 = 0LL;
  *((_DWORD *)a1 + 6) = v114;
LABEL_3:
  uint64_t result = sub_18128FF4C((void *)v12, (void *)a2);
  if (a3) {
    uint64_t result = sub_181309110((void *)v12, a3);
  }
  if (a4) {
    uint64_t result = sub_181311F48((void *)v12, a4);
  }
  if (v8) {
    uint64_t result = sub_181309110((void *)v12, v8);
  }
  if (v13) {
    return sub_1813014B0((void *)v12, v13);
  }
  return result;
}

                              int v3 = 2LL;
LABEL_201:
                              sql += v10 >> 32;
                              goto LABEL_5;
                            }

                            if ((v18 & 0xFFFFFFDF) == 0x52) {
                              goto LABEL_189;
                            }
                            uint64_t v19 = &byte_1813C6343[v18];
                            uint64_t v20 = "r";
                          }

                          else
                          {
                            uint64_t v19 = &byte_1813C6343[v17];
                            uint64_t v20 = "er";
                          }
                        }

                        else
                        {
                          uint64_t v19 = &byte_1813C6343[v16];
                          uint64_t v20 = "ger";
                        }
                      }

                      else
                      {
                        uint64_t v19 = &byte_1813C6343[v15];
                        uint64_t v20 = "gger";
                      }
                    }

                    else
                    {
                      uint64_t v19 = &byte_1813C6343[v14];
                      uint64_t v20 = "igger";
                    }
                  }

                  else
                  {
                    uint64_t v19 = &byte_1813C6343[v13];
                    uint64_t v20 = "rigger";
                  }
                }

                else
                {
                  uint64_t v19 = &byte_1813C6343[v1];
                  uint64_t v20 = "trigger";
                }

                uint64_t v54 = *v19;
                goto LABEL_188;
              }

              if (!v1)
              {
                int v55 = 0;
                uint64_t v51 = "temporary";
                goto LABEL_198;
              }

              if ((v1 & 0xDF) == 0x54)
              {
                int v42 = *((unsigned __int8 *)sql + 1);
                if (!sql[1])
                {
                  int v55 = 0;
                  uint64_t v51 = "emporary";
                  goto LABEL_198;
                }

                if ((v42 & 0xFFFFFFDF) == 0x45)
                {
                  uint64_t v43 = *((unsigned __int8 *)sql + 2);
                  if (!sql[2])
                  {
                    int v55 = 0;
                    uint64_t v51 = "mporary";
                    goto LABEL_198;
                  }

                  if ((v43 & 0xFFFFFFDF) == 0x4D)
                  {
                    uint64_t v44 = *((unsigned __int8 *)sql + 3);
                    if (!sql[3])
                    {
                      int v55 = 0;
                      uint64_t v51 = "porary";
                      goto LABEL_198;
                    }

                    if ((v44 & 0xFFFFFFDF) == 0x50)
                    {
                      uint64_t v45 = *((unsigned __int8 *)sql + 4);
                      if (!sql[4])
                      {
                        int v55 = 0;
                        uint64_t v51 = "orary";
                        goto LABEL_198;
                      }

                      if ((v45 & 0xFFFFFFDF) == 0x4F)
                      {
                        uint64_t v46 = *((unsigned __int8 *)sql + 5);
                        if (!sql[5])
                        {
                          int v55 = 0;
                          uint64_t v51 = "rary";
                          goto LABEL_198;
                        }

                        if ((v46 & 0xFFFFFFDF) == 0x52)
                        {
                          int v47 = *((unsigned __int8 *)sql + 6);
                          if (!sql[6])
                          {
                            int v55 = 0;
                            uint64_t v51 = "ary";
                            goto LABEL_198;
                          }

                          if ((v47 & 0xFFFFFFDF) == 0x41)
                          {
                            uint64_t v48 = *((unsigned __int8 *)sql + 7);
                            if (!sql[7])
                            {
                              int v55 = 0;
                              uint64_t v51 = "ry";
                              goto LABEL_198;
                            }

                            if ((v48 & 0xFFFFFFDF) == 0x52)
                            {
                              unsigned int v49 = *((unsigned __int8 *)sql + 8);
                              if (!sql[8])
                              {
                                int v55 = 0;
                                uint64_t v51 = "y";
LABEL_198:
                                if (v55 == byte_1813C6343[*v51])
                                {
LABEL_199:
                                  int v3 = 5LL;
                                  goto LABEL_201;
                                }

                                goto LABEL_200;
                              }

                              if ((v49 & 0xFFFFFFDF) == 0x59) {
                                goto LABEL_199;
                              }
                              int v50 = &byte_1813C6343[v49];
                              uint64_t v51 = "y";
                            }

                            else
                            {
                              int v50 = &byte_1813C6343[v48];
                              uint64_t v51 = "ry";
                            }
                          }

                          else
                          {
                            int v50 = &byte_1813C6343[v47];
                            uint64_t v51 = "ary";
                          }
                        }

                        else
                        {
                          int v50 = &byte_1813C6343[v46];
                          uint64_t v51 = "rary";
                        }
                      }

                      else
                      {
                        int v50 = &byte_1813C6343[v45];
                        uint64_t v51 = "orary";
                      }
                    }

                    else
                    {
                      int v50 = &byte_1813C6343[v44];
                      uint64_t v51 = "porary";
                    }
                  }

                  else
                  {
                    int v50 = &byte_1813C6343[v43];
                    uint64_t v51 = "mporary";
                  }
                }

                else
                {
                  int v50 = &byte_1813C6343[v42];
                  uint64_t v51 = "emporary";
                }
              }

              else
              {
                int v50 = &byte_1813C6343[v1];
                uint64_t v51 = "temporary";
              }

              int v55 = *v50;
              goto LABEL_198;
            }

            if (!v1)
            {
              LODWORD(v40) = 0;
              uint64_t v41 = "temp";
              goto LABEL_155;
            }

            if ((v1 & 0xDF) == 0x54)
            {
              uint64_t v40 = *((unsigned __int8 *)sql + 1);
              if (!sql[1])
              {
                uint64_t v41 = "emp";
                goto LABEL_155;
              }

              if ((v40 & 0xFFFFFFDF) == 0x45)
              {
                uint64_t v40 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  uint64_t v41 = "mp";
                  goto LABEL_155;
                }

                if ((v40 & 0xFFFFFFDF) == 0x4D)
                {
                  uint64_t v40 = *((unsigned __int8 *)sql + 3);
                  if (!sql[3])
                  {
                    uint64_t v41 = "p";
LABEL_155:
                    goto LABEL_200;
                  }

                  if ((v40 & 0xFFFFFFDF) == 0x50) {
                    goto LABEL_199;
                  }
                  v40 += (unint64_t)byte_1813C6343;
                  uint64_t v41 = "p";
                }

                else
                {
                  v40 += (unint64_t)byte_1813C6343;
                  uint64_t v41 = "mp";
                }
              }

              else
              {
                v40 += (unint64_t)byte_1813C6343;
                uint64_t v41 = "emp";
              }
            }

            else
            {
              uint64_t v40 = (unint64_t)&byte_1813C6343[v1];
              uint64_t v41 = "temp";
            }

            LODWORD(v40) = *(unsigned __int8 *)v40;
            goto LABEL_155;
          }

          if ((_DWORD)v9 != 7)
          {
            if ((_DWORD)v9 != 3) {
              goto LABEL_200;
            }
            if (!v1)
            {
              LODWORD(v30) = 0;
              uint64_t v31 = "end";
              goto LABEL_135;
            }

            if ((v1 & 0xDF) == 0x45)
            {
              uint64_t v30 = *((unsigned __int8 *)sql + 1);
              if (!sql[1])
              {
                uint64_t v31 = "nd";
                goto LABEL_135;
              }

              if ((v30 & 0xFFFFFFDF) == 0x4E)
              {
                uint64_t v30 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  uint64_t v31 = "d";
LABEL_135:
                  if ((_DWORD)v30 == byte_1813C6343[*v31])
                  {
LABEL_136:
                    int v3 = 7LL;
                    goto LABEL_201;
                  }

                  goto LABEL_200;
                }

                if ((v30 & 0xFFFFFFDF) == 0x44) {
                  goto LABEL_136;
                }
                v30 += (unint64_t)byte_1813C6343;
                uint64_t v31 = "d";
              }

              else
              {
                v30 += (unint64_t)byte_1813C6343;
                uint64_t v31 = "nd";
              }
            }

            else
            {
              uint64_t v30 = (unint64_t)&byte_1813C6343[v1];
              uint64_t v31 = "end";
            }

            LODWORD(v30) = *(unsigned __int8 *)v30;
            goto LABEL_135;
          }

          if (!v1)
          {
            int v53 = 0;
            int v39 = "explain";
            goto LABEL_182;
          }

          if ((v1 & 0xDF) == 0x45)
          {
            int v32 = *((unsigned __int8 *)sql + 1);
            if (!sql[1])
            {
              int v53 = 0;
              int v39 = "xplain";
              goto LABEL_182;
            }

            if ((v32 & 0xFFFFFFDF) == 0x58)
            {
              uint64_t v33 = *((unsigned __int8 *)sql + 2);
              if (!sql[2])
              {
                int v53 = 0;
                int v39 = "plain";
                goto LABEL_182;
              }

              if ((v33 & 0xFFFFFFDF) == 0x50)
              {
                uint64_t v34 = *((unsigned __int8 *)sql + 3);
                if (!sql[3])
                {
                  int v53 = 0;
                  int v39 = "lain";
                  goto LABEL_182;
                }

                if ((v34 & 0xFFFFFFDF) == 0x4C)
                {
                  uint64_t v35 = *((unsigned __int8 *)sql + 4);
                  if (!sql[4])
                  {
                    int v53 = 0;
                    int v39 = "ain";
                    goto LABEL_182;
                  }

                  if ((v35 & 0xFFFFFFDF) == 0x41)
                  {
                    uint64_t v36 = *((unsigned __int8 *)sql + 5);
                    if (!sql[5])
                    {
                      int v53 = 0;
                      int v39 = "in";
                      goto LABEL_182;
                    }

                    if ((v36 & 0xFFFFFFDF) == 0x49)
                    {
                      uint64_t v37 = *((unsigned __int8 *)sql + 6);
                      if (!sql[6])
                      {
                        int v53 = 0;
                        int v39 = "n";
LABEL_182:
                        if (v53 == byte_1813C6343[*v39])
                        {
LABEL_183:
                          int v3 = 3LL;
                          goto LABEL_201;
                        }

                        goto LABEL_200;
                      }

                      if ((v37 & 0xFFFFFFDF) == 0x4E) {
                        goto LABEL_183;
                      }
                      uint64_t v38 = &byte_1813C6343[v37];
                      int v39 = "n";
                    }

                    else
                    {
                      uint64_t v38 = &byte_1813C6343[v36];
                      int v39 = "in";
                    }
                  }

                  else
                  {
                    uint64_t v38 = &byte_1813C6343[v35];
                    int v39 = "ain";
                  }
                }

                else
                {
                  uint64_t v38 = &byte_1813C6343[v34];
                  int v39 = "lain";
                }
              }

              else
              {
                uint64_t v38 = &byte_1813C6343[v33];
                int v39 = "plain";
              }
            }

            else
            {
              uint64_t v38 = &byte_1813C6343[v32];
              int v39 = "xplain";
            }
          }

          else
          {
            uint64_t v38 = &byte_1813C6343[v1];
            int v39 = "explain";
          }

          int v53 = *v38;
          goto LABEL_182;
        }

        if ((_DWORD)v9 != 6) {
          goto LABEL_200;
        }
        if (!v1)
        {
          uint64_t v52 = 0;
          int v29 = "create";
          goto LABEL_170;
        }

        if ((v1 & 0xDF) == 0x43)
        {
          uint64_t v23 = *((unsigned __int8 *)sql + 1);
          if (!sql[1])
          {
            uint64_t v52 = 0;
            int v29 = "reate";
            goto LABEL_170;
          }

          if ((v23 & 0xFFFFFFDF) == 0x52)
          {
            uint64_t v24 = *((unsigned __int8 *)sql + 2);
            if (!sql[2])
            {
              uint64_t v52 = 0;
              int v29 = "eate";
              goto LABEL_170;
            }

            if ((v24 & 0xFFFFFFDF) == 0x45)
            {
              uint64_t v25 = *((unsigned __int8 *)sql + 3);
              if (!sql[3])
              {
                uint64_t v52 = 0;
                int v29 = "ate";
                goto LABEL_170;
              }

              if ((v25 & 0xFFFFFFDF) == 0x41)
              {
                int v26 = *((unsigned __int8 *)sql + 4);
                if (!sql[4])
                {
                  uint64_t v52 = 0;
                  int v29 = "te";
                  goto LABEL_170;
                }

                if ((v26 & 0xFFFFFFDF) == 0x54)
                {
                  uint64_t v27 = *((unsigned __int8 *)sql + 5);
                  if (!sql[5])
                  {
                    uint64_t v52 = 0;
                    int v29 = "e";
LABEL_170:
                    if (v52 == byte_1813C6343[*v29])
                    {
LABEL_171:
                      int v3 = 4LL;
                      goto LABEL_201;
                    }

                    goto LABEL_200;
                  }

                  if ((v27 & 0xFFFFFFDF) == 0x45) {
                    goto LABEL_171;
                  }
                  uint64_t v28 = &byte_1813C6343[v27];
                  int v29 = "e";
                }

                else
                {
                  uint64_t v28 = &byte_1813C6343[v26];
                  int v29 = "te";
                }
              }

              else
              {
                uint64_t v28 = &byte_1813C6343[v25];
                int v29 = "ate";
              }
            }

            else
            {
              uint64_t v28 = &byte_1813C6343[v24];
              int v29 = "eate";
            }
          }

          else
          {
            uint64_t v28 = &byte_1813C6343[v23];
            int v29 = "reate";
          }
        }

        else
        {
          uint64_t v28 = &byte_1813C6343[v1];
          int v29 = "create";
        }

        uint64_t v52 = *v28;
        goto LABEL_170;
    }
  }

LABEL_538:
      v1155 = 0LL;
      LODWORD(v1156) = 0;
      uint64_t v399 = sub_18127F5B0(v118, 155, (uint64_t)&v1155, 0);
      if (!v399)
      {
        uint64_t v13 = 7LL;
        goto LABEL_943;
      }

      *(_DWORD *)(v399 + 4) |= 0x800u;
      *(_DWORD *)(v399 + 8) = v393;
      if (v117)
      {
        int v400 = *v117;
        if ((int)v117[1] > (int)*v117)
        {
          unsigned int *v117 = v400 + 1;
          uint64_t v394 = &v117[6 * v400];
          *((void *)v394 + 2) = 0LL;
          *((void *)v394 + 3) = 0LL;
          *((void *)v394 + 1) = v399;
          *(void *)v1147 = v117;
LABEL_528:
          v395 = &v117[6 * (int)v121];
          uint64_t v121 = (v121 + 1);
          *((_WORD *)v395 + 14) = v393;
          goto LABEL_529;
        }

        int v401 = sub_18133E1F4((uint64_t)*a1, v117, (unsigned __int8 *)v399);
      }

      else
      {
        int v401 = (unsigned int *)sub_18133E190(*a1, (unsigned __int8 *)v399);
      }

      uint64_t v117 = v401;
      *(void *)v1147 = v401;
      if (!v401) {
        goto LABEL_529;
      }
      goto LABEL_528;
    }

    if (!*(void *)(v104 + 80))
    {
      sub_18131CCF8((uint64_t *)a1, 1, "COMPOUND QUERY", v21, v22, v23, v24, v25, v1050);
      sub_18131CCF8((uint64_t *)a1, 1, "LEFT-MOST SUBQUERY", v137, v138, v139, v140, v141, v1051);
    }

    int v142 = *v9;
    if (v142 == 134 || v142 == 136)
    {
      if (v107 == 1)
      {
        uint64_t v149 = *(unsigned int *)&v1170[4];
      }

      else
      {
        uint64_t v149 = *((unsigned int *)a1 + 13);
        *((_DWORD *)a1 + 13) = v149 + 1;
        int v405 = *(_DWORD *)(v106 + 144);
        if (*(_DWORD *)(v106 + 148) <= v405)
        {
          int v405 = sub_18131044C(v106, 118LL, v149, 0LL, 0LL, v23, v24, v25);
        }

        else
        {
          *(_DWORD *)(v106 + 144) = v405 + 1;
          uint64_t v406 = *(void *)(v106 + 136) + 40LL * v405;
          *(_DWORD *)uint64_t v406 = 118;
          *(_DWORD *)(v406 + 4) = v149;
          *(_OWORD *)(v406 + 8) = 0u;
          *(_OWORD *)(v406 + 24) = 0u;
        }

        *((_DWORD *)v9 + 5) = v405;
        int v496 = v9;
        do
        {
          uint64_t v497 = v496;
          int v496 = (unsigned __int8 *)*((void *)v496 + 11);
        }

        while (v496);
        *((_DWORD *)v497 + 1) |= 0x20u;
      }

      LOBYTE(v1155) = 1;
      v1158[0] = 0LL;
      HIDWORD(v1155) = v149;
      v1156 = 0LL;
      LODWORD(v1157) = 0;
      uint64_t v498 = sub_1812801A8(a1, v104, &v1155);
      if ((_DWORD)v498)
      {
        uint64_t v13 = v498;
        goto LABEL_646;
      }

      int v504 = *v9;
      if (v504 == 136) {
        char v505 = 2;
      }
      else {
        char v505 = 1;
      }
      *((void *)v9 + 10) = 0LL;
      uint64_t v506 = *((void *)v9 + 12);
      *((void *)v9 + 12) = 0LL;
      LOBYTE(v1155) = v505;
      unsigned __int8 v507 = v504 + 121;
      if (v507 > 2u) {
        int v508 = "UNION";
      }
      else {
        int v508 = off_189B6F8B0[(char)v507];
      }
      sub_18131CCF8((uint64_t *)a1, 1, "%s USING TEMP B-TREE", v499, v500, v501, v502, v503, (char)v508);
      uint64_t v13 = sub_1812801A8(a1, v9, &v1155);
      uint64_t v605 = *((void *)v9 + 10);
      *((void *)v9 + 9) = 0LL;
      *((void *)v9 + 10) = v104;
      if (*v9 == 134) {
        *((_WORD *)v9 + 1) = sub_181329C8C(*((__int16 *)v9 + 1), *(__int16 *)(v104 + 2));
      }
      uint64_t v606 = (unsigned __int8 *)*((void *)v9 + 12);
      if (v606) {
        sub_181309110((void *)v1153, v606);
      }
      *((void *)v9 + 12) = v506;
      *((void *)v9 + 1) = 0LL;
      if (v107 != 1 && !*(_BYTE *)(v1153 + 103))
      {
        int v607 = *((_DWORD *)a1 + 17);
        uint64_t v608 = (v607 - 1);
        uint64_t v609 = (v607 - 2);
        *((_DWORD *)a1 + 17) = v609;
        sub_18128A040((uint64_t)a1, (uint64_t)v9, v608, v600, v601, v602, v603, v604);
        sub_1813103F4(v106, 36LL, v149, v608, v610, v611, v612, v613);
        uint64_t v614 = v8;
        uint64_t v615 = *(unsigned int *)(v106 + 144);
        sub_18128BE18((uint64_t)a1, (uint64_t)v9, v149, 0LL, 0LL, v1170, v609, v608);
        sub_18131B3E0(v106, v609);
        uint64_t v616 = v615;
        int v8 = v614;
        sub_1813103F4(v106, 39LL, v149, v616, v617, v618, v619, v620);
        sub_18131B3E0(v106, v608);
        sub_1813103F4(v106, 122LL, v149, 0LL, v621, v622, v623, v624);
      }
    }

    else if (v142 == 135)
    {
      LODWORD(v1155) = 0;
      *(void *)(v104 + 8) = *((void *)v9 + 1);
      *(void *)(v104 + 96) = *((void *)v9 + 12);
      uint64_t v143 = sub_1812801A8(a1, v104, v1170);
      *(void *)(v104 + 96) = 0LL;
      if ((_DWORD)v143)
      {
        uint64_t v13 = v143;
LABEL_646:
        *(void *)(v8 + 12) = *(void *)&v1170[12];
        goto LABEL_943;
      }

      *((void *)v9 + 10) = 0LL;
      uint64_t v591 = *(void *)(v104 + 8);
      *((void *)v9 + 1) = v591;
      if ((_DWORD)v591)
      {
        int v592 = sub_181319BA8(v106, 17LL, v591, v144, v145, v146, v147, v148);
        uint64_t v145 = *((unsigned int *)v9 + 3);
        if ((_DWORD)v145) {
          sub_181279C3C(v106, 160LL, *((unsigned int *)v9 + 2), (v145 + 1), v145, v146, v147, v148);
        }
      }

      else
      {
        int v592 = 0;
      }

      sub_18131CCF8((uint64_t *)a1, 1, "UNION ALL", v144, v145, v146, v147, v148, v1050);
      uint64_t v13 = sub_1812801A8(a1, v9, v1170);
      uint64_t v605 = *((void *)v9 + 10);
      *((void *)v9 + 10) = v104;
      int v717 = sub_181329C8C(*((__int16 *)v9 + 1), *(__int16 *)(v104 + 2));
      *((_WORD *)v9 + 1) = v717;
      uint64_t v718 = *((void *)v9 + 12);
      if (v718)
      {
        int v719 = v717;
        if (sub_181323268(*(void *)(v718 + 16), (int *)&v1155))
        {
          if ((int)v1155 >= 1)
          {
            int v720 = sub_1812E4820(v1155);
            if (v719 > v720) {
              *((_WORD *)v9 + 1) = v720;
            }
          }
        }
      }

      if (v592)
      {
        if (*(_BYTE *)(*(void *)v106 + 103LL)) {
          dword_18C550688 = *(_DWORD *)(v106 + 144);
        }
        else {
          *(_DWORD *)(*(void *)(v106 + 136) + 40LL * v592 + 8) = *(_DWORD *)(v106 + 144);
        }
      }
    }

    else
    {
      uint64_t v402 = *((unsigned int *)a1 + 13);
      *((_DWORD *)a1 + 13) = v402 + 2;
      int v403 = *(_DWORD *)(v106 + 144);
      if (*(_DWORD *)(v106 + 148) <= v403)
      {
        int v403 = sub_18131044C(v106, 118LL, v402, 0LL, 0LL, v23, v24, v25);
      }

      else
      {
        *(_DWORD *)(v106 + 144) = v403 + 1;
        uint64_t v404 = *(void *)(v106 + 136) + 40LL * v403;
        *(_DWORD *)uint64_t v404 = 118;
        *(_DWORD *)(v404 + 4) = v402;
        *(_OWORD *)(v404 + 8) = 0u;
        *(_OWORD *)(v404 + 24) = 0u;
      }

      *((_DWORD *)v9 + 5) = v403;
      uint64_t v489 = v9;
      do
      {
        uint64_t v490 = v489;
        uint64_t v489 = (unsigned __int8 *)*((void *)v489 + 11);
      }

      while (v489);
      *((_DWORD *)v490 + 1) |= 0x20u;
      LOBYTE(v1155) = 1;
      v1158[0] = 0LL;
      HIDWORD(v1155) = v402;
      v1156 = 0LL;
      LODWORD(v1157) = 0;
      uint64_t v491 = sub_1812801A8(a1, v104, &v1155);
      if ((_DWORD)v491)
      {
        uint64_t v13 = v491;
        goto LABEL_646;
      }

      *((_DWORD *)v9 + 6) = sub_1813103F4(v106, 118LL, (v402 + 1), 0LL, v492, v493, v494, v495);
      *((void *)v9 + 10) = 0LL;
      uint64_t v598 = *((void *)v9 + 12);
      *((void *)v9 + 12) = 0LL;
      HIDWORD(v1155) = v402 + 1;
      else {
        uint64_t v599 = off_189B6F8B0[(char)(*v9 + 121)];
      }
      sub_18131CCF8((uint64_t *)a1, 1, "%s USING TEMP B-TREE", v593, v594, v595, v596, v597, (char)v599);
      uint64_t v13 = sub_1812801A8(a1, v9, &v1155);
      uint64_t v605 = *((void *)v9 + 10);
      *((void *)v9 + 10) = v104;
      int v651 = *(__int16 *)(v104 + 2);
      uint64_t v652 = (unsigned __int8 *)*((void *)v9 + 12);
      if (v652) {
        sub_181309110((void *)v1153, v652);
      }
      *((void *)v9 + 12) = v598;
      if (!(_DWORD)v13)
      {
        int v653 = *((_DWORD *)a1 + 17);
        uint64_t v654 = (v653 - 1);
        uint64_t v655 = (v653 - 2);
        *((_DWORD *)a1 + 17) = v655;
        sub_18128A040((uint64_t)a1, (uint64_t)v9, v654, v646, v647, v648, v649, v650);
        unsigned int v1151 = v654;
        sub_1813103F4(v106, 36LL, v402, v654, v656, v657, v658, v659);
        if (*((_BYTE *)a1 + 31))
        {
          unsigned __int8 v664 = *((_BYTE *)a1 + 31) - 1;
          *((_BYTE *)a1 + 31) = v664;
          uint64_t v665 = *((unsigned int *)a1 + v664 + 56);
        }

        else
        {
          uint64_t v665 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v665;
        }

        unsigned int v1145 = sub_1813103F4(v106, 134LL, v402, v665, v660, v661, v662, v663);
        sub_1812DC7B4(v106, 28LL, (v402 + 1), v655, v665, 0LL, v781, v782);
        if ((_DWORD)v665)
        {
          uint64_t v783 = *((unsigned __int8 *)a1 + 31);
          if (v783 <= 7)
          {
            *((_BYTE *)a1 + 31) = v783 + 1;
            *((_DWORD *)a1 + v783 + 56) = v665;
          }
        }

        sub_18128BE18((uint64_t)a1, (uint64_t)v9, v402, 0LL, 0LL, v1170, v655, v1151);
        sub_18131B3E0(v106, v655);
        sub_1813103F4(v106, 39LL, v402, v1145, v784, v785, v786, v787);
        sub_18131B3E0(v106, v1151);
        sub_1813103F4(v106, 122LL, (v402 + 1), 0LL, v788, v789, v790, v791);
        sub_1813103F4(v106, 122LL, v402, 0LL, v792, v793, v794, v795);
      }
    }

    if (!*((void *)v9 + 11))
    {
      int v796 = *((_DWORD *)a1 + 78);
      if (v796)
      {
        int v797 = a1[2];
        if (*(_BYTE *)(*v797 + 103LL)) {
          v798 = &byte_18C550680;
        }
        else {
          v798 = (char *)(v797[17] + 40LL * v796);
        }
        int v796 = *((_DWORD *)v798 + 2);
      }

      *((_DWORD *)a1 + 78) = v796;
    }

    goto LABEL_905;
  }

  char v1126 = v103;
  uint64_t v1152 = v11;
  v1138 = v8;
  int v110 = 0;
  while (1)
  {
    if (v110 >= *v102)
    {
      uint64_t v248 = (_BYTE *)*((void *)v9 + 6);
      uint64_t v11 = v1152;
      if (v248 && *v248 == 44 && (*(_BYTE *)(v1152 + 97) & 0x80) == 0) {
        sub_1813260D8(a1, (uint64_t)v9);
      }
      if ((*(_WORD *)(v1152 + 96) & 0x201) == 0 && sub_1813261CC((uint64_t *)a1, (uint64_t)v9))
      {
        if (*(_BYTE *)(v1152 + 103)) {
          goto LABEL_24;
        }
        __int128 v102 = (int *)*((void *)v9 + 5);
      }

      if (*v102 >= 1)
      {
        uint64_t v249 = 0LL;
        uint64_t v250 = v102 - 14;
        int v251 = -1;
        v1062 = v9;
        while (1)
        {
          uint64_t v252 = &v102[26 * v249];
          uint64_t v254 = *((void *)v252 + 11);
          uint64_t v253 = (uint64_t *)(v252 + 22);
          if (!v254)
          {
            uint64_t v20 = *(void *)&v102[26 * v249 + 6];
            if (v20) {
              sub_18131E794((uint64_t)a1, 20LL, v20, (uint64_t)&byte_1813CEAEE, *(void *)&v102[26 * v249 + 4]);
            }
          }

          int v255 = &v102[26 * v249];
          uint64_t v258 = *((void *)v255 + 6);
          uint64_t v257 = (unsigned __int8 **)(v255 + 12);
          uint64_t v256 = v258;
          if (v258) {
            break;
          }
LABEL_393:
          ++v249;
          --v251;
          v250 += 26;
          if (v249 >= *v102) {
            goto LABEL_490;
          }
        }

        uint64_t v1148 = v256;
        LODWORD(v1164) = 0;
        sub_18129F4C4(v9, &v1164);
        *((_DWORD *)a1 + 77) += (_DWORD)v1164;
        int v263 = *(_DWORD *)(v1152 + 96);
        if ((v263 & 0x1000) == 0)
        {
          if ((*(_WORD *)((_BYTE *)&v102[26 * v249 + 17] + 1) & 0x100) == 0
            || (uint64_t v264 = *(void *)&v102[26 * v249 + 26], *(_BYTE *)(v264 + 18)) && *(int *)v264 <= 1)
          {
            sub_181326418( (uint64_t *)a1,  (unsigned __int8 *)v1148,  *((void *)v9 + 6),  (uint64_t)v102,  v249,  v260,  v261,  v262);
            int v263 = *(_DWORD *)(v1152 + 96);
          }
        }

        if ((v263 & 0x4000000) == 0 && (*(_WORD *)((_BYTE *)&v102[26 * v249 + 17] + 1) & 0x108) == 0)
        {
          uint64_t v312 = *v257;
          uint64_t v313 = *v257;
          while (v313)
          {
            if ((v313[4] & 9) == 0 && (!*((void *)v313 + 10) || *v313 == 135))
            {
              uint64_t v314 = *((void *)v313 + 14);
              uint64_t v313 = (unsigned __int8 *)*((void *)v313 + 10);
              if (!v314) {
                continue;
              }
            }

            goto LABEL_405;
          }

          uint64_t v328 = *v253;
          uint64_t v329 = (unsigned int *)*((void *)v312 + 9);
          if (v329)
          {
            uint64_t v330 = *v329;
            if ((int)v330 >= 1)
            {
              uint64_t v331 = (unsigned __int16 *)(v329 + 7);
              do
              {
                int v333 = *v331;
                v331 += 12;
                int v332 = v333;
                if (v333)
                {
                  unsigned int v334 = v332 - 1;
                  if (v334 >= 0x3F) {
                    LOBYTE(v334) = 63;
                  }
                  v328 |= 1LL << v334;
                }

                --v330;
              }

              while (v330);
            }
          }

          if (*(__int16 *)(*(void *)&v102[26 * v249 + 10] + 54LL) >= 1)
          {
            unint64_t v335 = 0LL;
            uint64_t v336 = *(unsigned __int16 *)(*(void *)&v102[26 * v249 + 10] + 54LL);
            do
            {
              uint64_t v337 = 1LL << v335;
              if (v335 >= 0x3F) {
                uint64_t v337 = 0x8000000000000000LL;
              }
              if ((v337 & v328) == 0 && v312 != 0LL)
              {
                int v339 = v312;
                do
                {
                  uint64_t v340 = *(void *)(*((void *)v339 + 4) + 24 * v335 + 8);
                  if (*(_BYTE *)v340 != 121)
                  {
                    *(_BYTE *)uint64_t v340 = 121;
                    *(_DWORD *)(v340 + 4) &= 0xFFF7DFFF;
                    *((_DWORD *)v339 + 1) |= 0x1000000u;
                  }

                  int v339 = (unsigned __int8 *)*((void *)v339 + 10);
                }

                while (v339);
              }

              ++v335;
            }

            while (v335 != v336);
          }
        }

LABEL_405:
        uint64_t v265 = v253 - 10;
        uint64_t v266 = a1[46];
        a1[46] = *(void **)&v102[26 * v249 + 6];
        int v267 = *((_DWORD *)v9 + 1);
        uint64_t v268 = (uint64_t)&v102[26 * (int)v249 + 2];
        v1133 = v266;
        if ((*(_BYTE *)(v268 + 62) & 1) == 0
          || (uint64_t v269 = *(void *)&v102[26 * (int)v249 + 26], v270 = *(unsigned __int8 *)(v269 + 18),
                                                            *(_BYTE *)(v269 + 18))
          && ((int v271 = *(_DWORD *)v269, v270 != 2) ? (v272 = v271 <= 1) : (v272 = 1), v272))
        {
          if ((v102[17] & 0x40) == 0 && (*((_BYTE *)*a1 + 99) & 2) == 0)
          {
            int v273 = *v102;
            v1120 = v265;
            uint64_t v274 = sub_1813266D8((uint64_t)v102, (void *)v268, (v249 + 1), *v102);
            uint64_t v265 = v1120;
            if (!v274)
            {
              if ((_DWORD)v249)
              {
                if ((v267 & 0x10000000) == 0)
                {
                  v325 = v250;
                  int v326 = v251;
                  do
                  {
                    if ((v325[31] & 0x22) != 0) {
                      break;
                    }
                    BOOL v131 = __CFADD__(v326++, 1);
                    if (v131) {
                      goto LABEL_477;
                    }
                    uint64_t v327 = *(void *)v325;
                    v325 -= 26;
                  }

                  while (!v327);
                }
              }

              else if (v273 == 1 || (v102[43] & 2) != 0 || (v267 & 0x10000000) == 0)
              {
LABEL_477:
                int v341 = *(_DWORD *)(v1142 + 144);
                int v342 = v341 + 1;
                uint64_t v343 = (*((_DWORD *)a1 + 14) + 1);
                *((_DWORD *)a1 + 14) = v343;
                uint64_t v344 = &v102[26 * v249];
                v344[15] = v343;
                int v1104 = v341;
                v1112 = (unsigned int *)(v344 + 15);
                if (*(_DWORD *)(v1142 + 148) <= v341)
                {
                  int v346 = v341 + 1;
                  sub_18131044C(v1142, 11LL, v343, 0LL, (v341 + 1), v260, v261, v262);
                  int v342 = v346;
                  LOBYTE(v265) = (_BYTE)v1120;
                }

                else
                {
                  *(_DWORD *)(v1142 + 144) = v342;
                  uint64_t v345 = *(void *)(v1142 + 136) + 40LL * v341;
                  *(_DWORD *)uint64_t v345 = 11;
                  *(_DWORD *)(v345 + 4) = v343;
                  *(_DWORD *)(v345 + 8) = 0;
                  *(_DWORD *)(v345 + 12) = v342;
                  *(void *)(v345 + 24) = 0LL;
                  *(void *)(v345 + 32) = 0LL;
                  *(void *)(v345 + 16) = 0LL;
                }

                uint64_t v347 = &v102[26 * v249];
                v347[14] = v342;
                int v348 = *v1112;
                LOBYTE(v1155) = 13;
                v1158[0] = 0LL;
                HIDWORD(v1155) = v348;
                v1156 = 0LL;
                LODWORD(v1157) = 0;
                sub_18131CCF8((uint64_t *)a1, 1, "CO-ROUTINE %!S", v275, v259, v260, v261, v262, (char)v265);
                sub_1812801A8(a1, v1148, &v1155);
                *(_WORD *)(*((void *)v347 + 5) + 58LL) = *(_WORD *)(v1148 + 2);
                *(_WORD *)((char *)v347 + 69) |= 0x20u;
                v347[16] = HIDWORD(v1156);
                uint64_t v352 = *v1112;
                int v353 = *(_DWORD *)(v1142 + 144);
                if (*(_DWORD *)(v1142 + 148) <= v353)
                {
                  sub_18131044C(v1142, 68LL, v352, 0LL, 0LL, v349, v350, v351);
                }

                else
                {
                  *(_DWORD *)(v1142 + 144) = v353 + 1;
                  uint64_t v354 = *(void *)(v1142 + 136) + 40LL * v353;
                  *(_DWORD *)uint64_t v354 = 68;
                  *(_DWORD *)(v354 + 4) = v352;
                  *(_OWORD *)(v354 + 8) = 0u;
                  *(_OWORD *)(v354 + 24) = 0u;
                }

                uint64_t v355 = *(void *)(v1142 + 24);
                *(_BYTE *)(v355 + 31) = 0;
                *(_DWORD *)(v355 + 40) = 0;
                char v356 = &byte_18C550680;
                if (!*(_BYTE *)(*(void *)v1142 + 103LL)) {
                  char v356 = (char *)(*(void *)(v1142 + 136) + 40LL * v1104);
                }
                *((_DWORD *)v356 + 2) = *(_DWORD *)(v1142 + 144);
                *((_BYTE *)a1 + 31) = 0;
                *((_DWORD *)a1 + 10) = 0;
                goto LABEL_430;
              }
            }
          }
        }

        uint64_t v276 = &v102[26 * v249];
        __int16 v278 = *(_WORD *)((char *)v276 + 69);
        uint64_t v277 = (__int16 *)((char *)v276 + 69);
        if ((v278 & 0x100) != 0
          && (uint64_t v279 = *(void *)&v102[26 * v249 + 26], v280 = *(unsigned int *)(v279 + 4), (int)v280 >= 1))
        {
          sub_1813103F4(v1142, 10LL, *(unsigned int *)(v279 + 8), v280, v259, v260, v261, v262);
          uint64_t v285 = v102[26 * v249 + 18];
          uint64_t v286 = *(unsigned int *)(v279 + 12);
          if ((_DWORD)v285 != (_DWORD)v286) {
            sub_1813103F4(v1142, 115LL, v285, v286, v281, v282, v283, v284);
          }
          __int16 v287 = *(_WORD *)(v279 + 16);
        }

        else
        {
          char v288 = (char)v265;
          uint64_t v289 = sub_1813266D8((uint64_t)v102, v265, 0LL, v249);
          if (!v289)
          {
            int v302 = *((_DWORD *)a1 + 14) + 1;
            *((_DWORD *)a1 + 14) = v302;
            int v303 = &v102[26 * v249];
            v303[15] = v302;
            v1121 = (unsigned int *)(v303 + 15);
            int v304 = sub_181319B54(v1142, 9LL, v290, v291, v292, v293, v294, v295);
            v303[14] = v304 + 1;
            v1098 = v303 + 14;
            __int16 v311 = *v277;
            *v277 |= 0x10u;
            int v1086 = v304;
            unsigned int v1111 = v304 + 1;
            if ((v311 & 8) != 0) {
              int v1103 = 0;
            }
            else {
              int v1103 = sub_181319B54(v1142, 15LL, v305, v306, v307, v308, v309, v310);
            }
            v315 = &v102[26 * v249];
            int v316 = v315[18];
            LOBYTE(v1155) = 12;
            v1158[0] = 0LL;
            HIDWORD(v1155) = v316;
            v1156 = 0LL;
            LODWORD(v1157) = 0;
            int v317 = sub_18131CCF8((uint64_t *)a1, 1, "MATERIALIZE %!S", v306, v307, v308, v309, v310, v288);
            sub_1812801A8(a1, v1148, &v1155);
            v1091 = v315 + 18;
            *(_WORD *)(*((void *)v315 + 5) + 58LL) = *(_WORD *)(v1148 + 2);
            int v9 = v1062;
            if (v1103)
            {
              uint64_t v322 = &byte_18C550680;
              if (!*(_BYTE *)(*(void *)v1142 + 103LL)) {
                uint64_t v322 = (char *)(*(void *)(v1142 + 136) + 40LL * v1103);
              }
              *((_DWORD *)v322 + 2) = *(_DWORD *)(v1142 + 144);
            }

            sub_1813103F4(v1142, 67LL, *v1121, v1111, v318, v319, v320, v321);
            sub_18131CE30(v1142, v317, v317, -1);
            int v323 = &byte_18C550680;
            if (!*(_BYTE *)(*(void *)v1142 + 103LL)) {
              int v323 = (char *)(*(void *)(v1142 + 136) + 40LL * v1086);
            }
            *((_DWORD *)v323 + 2) = *(_DWORD *)(v1142 + 144);
            *((_BYTE *)a1 + 31) = 0;
            *((_DWORD *)a1 + 10) = 0;
            if ((*v277 & 0x108) == 0x100)
            {
              uint64_t v324 = *(void *)&v102[26 * v249 + 26];
              *(void *)(v324 + 4) = *v1098;
              *(_DWORD *)(v324 + 12) = *v1091;
              *(_WORD *)(v324 + 16) = *(_WORD *)(v1148 + 2);
            }

            goto LABEL_430;
          }

          uint64_t v296 = v289;
          uint64_t v297 = *(unsigned int *)(v289 + 48);
          if ((_DWORD)v297) {
            sub_1813103F4(v1142, 10LL, *(unsigned int *)(v289 + 52), v297, v292, v293, v294, v295);
          }
          uint64_t v298 = v102[26 * v249 + 18];
          uint64_t v299 = *(unsigned int *)(v296 + 64);
          int v300 = *(_DWORD *)(v1142 + 144);
          if (*(_DWORD *)(v1142 + 148) <= v300)
          {
            sub_18131044C(v1142, 115LL, v298, v299, 0LL, v293, v294, v295);
          }

          else
          {
            *(_DWORD *)(v1142 + 144) = v300 + 1;
            uint64_t v301 = *(void *)(v1142 + 136) + 40LL * v300;
            *(_DWORD *)uint64_t v301 = 115;
            *(_DWORD *)(v301 + 4) = v298;
            *(_DWORD *)(v301 + 8) = v299;
            *(void *)(v301 + 12) = 0LL;
            *(void *)(v301 + 28) = 0LL;
            *(void *)(v301 + 20) = 0LL;
            *(_DWORD *)(v301 + 36) = 0;
          }

          __int16 v287 = *(_WORD *)(*(void *)(v296 + 40) + 2LL);
        }

        *(_WORD *)(v1148 + 2) = v287;
LABEL_430:
        if (*(_BYTE *)(v1152 + 103)) {
          goto LABEL_861;
        }
        LODWORD(v1164) = 0;
        sub_18129F4C4(v9, &v1164);
        *((_DWORD *)a1 + 77) -= (_DWORD)v1164;
        a1[46] = v1133;
        goto LABEL_393;
      }

LABEL_490:
      char v357 = (void *)*((void *)v9 + 4);
      uint64_t v358 = *((void *)v9 + 6);
      uint64_t v359 = (void *)*((void *)v9 + 7);
      uint64_t v360 = *((void *)v9 + 8);
      int v361 = *((_DWORD *)v9 + 1);
      v1170[0] = v361 & 1;
      if ((v361 & 9) == 1
        && !sub_18131BF58((unint64_t)v1160, (unint64_t)v357, 0xFFFFFFFFLL)
        && !*((void *)v9 + 14))
      {
        *((_DWORD *)v9 + 1) &= ~1u;
        uint64_t v359 = sub_18129CD4C(v1152, v357, 0);
        *((void *)v9 + 7) = v359;
        *((_DWORD *)v9 + 1) |= 8u;
        v1170[0] = 2;
      }

      if (v1160)
      {
        uint64_t v362 = sub_1813267BC((uint64_t *)a1, v1160, 0, *(_DWORD *)v357);
        uint64_t v363 = *((unsigned int *)a1 + 13);
        *((_DWORD *)a1 + 13) = v363 + 1;
        DWORD1(v1161) = v363;
        int v365 = sub_1812B9B68( (uint64_t *)v1142,  118LL,  v363,  (*v1160 + *(_DWORD *)v357 + 1),  0LL,  v362,  4294967288LL,  v364);
      }

      else
      {
        int v365 = -1;
      }

      LODWORD(v1162) = v365;
      if (*v1138 != 12
        || (sub_1813103F4(v1142, 118LL, *((unsigned int *)v1138 + 1), *(unsigned int *)v357, v22, v23, v24, v25),
            (v9[5] & 8) == 0))
      {
LABEL_627:
        uint64_t v487 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v487;
        if ((v9[5] & 0x40) == 0) {
          *((_WORD *)v9 + 1) = 320;
        }
        if (*((void *)v9 + 12)) {
          sub_18128A040((uint64_t)a1, (uint64_t)v9, v487, v21, v22, v23, v24, v25);
        }
        if (!*((_DWORD *)v9 + 2) && (v1162 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(*(void *)v1142 + 103LL)) {
            v488 = &byte_18C550680;
          }
          else {
            v488 = (char *)(*(void *)(v1142 + 136) + 40LL * v1162);
          }
          char *v488 = 119;
          BYTE12(v1162) |= 1u;
        }

        if ((v9[4] & 1) != 0)
        {
          uint64_t v626 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v626 + 1;
          *(_DWORD *)&v1170[4] = v626;
          uint64_t v627 = sub_1813267BC((uint64_t *)a1, *((int **)v9 + 4), 0, 0);
          *(_DWORD *)&v1170[8] = sub_1812B9B68((uint64_t *)v1142, 118LL, v626, 0LL, 0LL, v627, 4294967288LL, v628);
          int v629 = *(_DWORD *)(v1142 + 144);
          BOOL v630 = __OFSUB__(v629, 1);
          int v631 = v629 - 1;
          if (v631 < 0 == v630) {
            *(_WORD *)(*(void *)(v1142 + 136) + 40LL * v631 + 2) = 8;
          }
          char v625 = 3;
        }

        else
        {
          char v625 = 0;
        }

        v1170[1] = v625;
        if ((v1126 & 8) == 0 && !v359)
        {
          uint64_t v632 = *((_DWORD *)v9 + 1) & 0x4000 | ((v1170[0] != 0) << 8);
          uint64_t v633 = *((void *)v9 + 14);
          if (v633) {
            sub_181326870((uint64_t *)a1, (uint64_t)v9, v20, v21, v22, v23, v24, v25);
          }
          uint64_t v634 = sub_18128A51C( (uint64_t)a1,  v102,  v358,  v1160,  *((int **)v9 + 4),  (uint64_t)v9,  v632,  *((__int16 *)v9 + 1));
          if (!v634) {
            goto LABEL_861;
          }
          uint64_t v638 = v634;
          int v639 = *(__int16 *)(v634 + 70);
          if (v1170[0] && *(_BYTE *)(v634 + 67)) {
            v1170[1] = *(_BYTE *)(v634 + 67);
          }
          if (v1160)
          {
            int v640 = *(char *)(v634 + 65) & ~(*(char *)(v634 + 65) >> 31);
            LODWORD(v1161) = v640;
            if ((*(_BYTE *)(v634 + 68) & 4) != 0)
            {
              uint64_t v666 = v634 + 120LL * *(unsigned __int8 *)(v634 + 64);
              uint64_t v667 = *(void *)(v666 + 792);
              int v641 = (_DWORD *)(v666 + 752);
              if (v667) {
                int v641 = (_DWORD *)(v634 + 48);
              }
            }

            else
            {
              int v641 = (_DWORD *)(v634 + 48);
            }

            DWORD2(v1162) = *v641;
            if (*v1160 != v640) {
              goto LABEL_810;
            }
            v1160 = 0LL;
          }

          if ((v1162 & 0x80000000) == 0) {
            sub_18128BDCC(v1142, v1162);
          }
LABEL_810:
          int v1136 = v487;
          if (!v633)
          {
            sub_18128BE18( (uint64_t)a1,  (uint64_t)v9,  0xFFFFFFFFLL,  &v1160,  (uint64_t)v1170,  v1138,  *(unsigned int *)(v638 + 48),  *(unsigned int *)(v638 + 52));
            sub_18128E90C((uint64_t **)v638, v685, v686, v687, v688, v689, v690, v691);
            uint64_t v11 = v1152;
            uint64_t v673 = v1142;
LABEL_1084:
            if (v1170[1] == 3) {
              sub_18131CCF8((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %s", v692, v693, v694, v695, v696, (char)"DISTINCT");
            }
            if (v1160) {
              sub_1812B6E2C((uint64_t)a1, (uint64_t)v9, (uint64_t)&v1160, *(unsigned int *)v357, v1138, v694, v695, v696);
            }
            sub_18131B3E0(v673, v1136);
            uint64_t v13 = *((_DWORD *)a1 + 12) > 0;
            goto LABEL_25;
          }

          int v668 = *((_DWORD *)a1 + 17);
          int v669 = v668 - 1;
          uint64_t v670 = (v668 - 2);
          uint64_t v671 = (v668 - 3);
          *((_DWORD *)a1 + 17) = v671;
          uint64_t v672 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v672;
          sub_181326F40((uint64_t *)a1, (uint64_t)v9, (uint64_t **)v638, v672, (v668 - 1), v635, v636, v637);
          uint64_t v673 = v1142;
          sub_1813103F4(v1142, 9LL, 0LL, v671, v674, v675, v676, v677);
          sub_18131B3E0(v1142, v669);
          DWORD2(v1162) = 0;
          sub_18128BE18((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, &v1160, (uint64_t)v1170, v1138, v670, v671);
          sub_18131B3E0(v1142, v670);
          sub_181319BA8(v1142, 67LL, v672, v678, v679, v680, v681, v682);
          uint64_t v683 = v1142;
          int v684 = v671;
LABEL_1083:
          sub_18131B3E0(v683, v684);
          uint64_t v11 = v1152;
          goto LABEL_1084;
        }

        uint64_t v1150 = v360;
        if (!v359)
        {
          BOOL v645 = 0;
          *((_WORD *)v9 + 1) = 0;
          goto LABEL_834;
        }

        uint64_t v642 = (unsigned int *)*((void *)v9 + 4);
        uint64_t v643 = *v642;
        if ((int)v643 >= 1)
        {
          uint64_t v644 = v642 + 2;
          if ((_DWORD)v643 == 1)
          {
            int v697 = *v642;
LABEL_815:
            unsigned int v700 = v697 + 1;
            int v701 = (_WORD *)v644 + 11;
            do
            {
              *int v701 = 0;
              v701 += 12;
              --v700;
            }

            while (v700 > 1);
            goto LABEL_817;
          }

          int v697 = v643 - (v643 & 0xFFFFFFFE);
          v644 += 6 * (v643 & 0xFFFFFFFE);
          uint64_t v698 = (_WORD *)v642 + 27;
          uint64_t v699 = v643 & 0xFFFFFFFE;
          do
          {
            *(v698 - 12) = 0;
            *uint64_t v698 = 0;
            v698 += 24;
            v699 -= 2LL;
          }

          while (v699);
          if ((v643 & 0xFFFFFFFE) != v643) {
            goto LABEL_815;
          }
        }

LABEL_817:
        uint64_t v702 = *(unsigned int *)v359;
        if ((int)v702 >= 1)
        {
          uint64_t v703 = v359 + 1;
          if ((_DWORD)v702 == 1)
          {
            int v704 = *(_DWORD *)v359;
          }

          else
          {
            int v704 = v702 - (v702 & 0xFFFFFFFE);
            v703 += 3 * (v702 & 0xFFFFFFFE);
            int v705 = (_WORD *)v359 + 27;
            uint64_t v706 = v702 & 0xFFFFFFFE;
            do
            {
              *(v705 - 12) = 0;
              *int v705 = 0;
              v705 += 24;
              v706 -= 2LL;
            }

            while (v706);
            if ((v702 & 0xFFFFFFFE) == v702) {
              goto LABEL_825;
            }
          }

          unsigned int v707 = v704 + 1;
          uint64_t v708 = (_WORD *)v703 + 11;
          do
          {
            *uint64_t v708 = 0;
            v708 += 12;
            --v707;
          }

          while (v707 > 1);
        }

LABEL_825:
        uint64_t v709 = v1160;
        if (v1160 && (uint64_t v710 = *(unsigned int *)v359, (_DWORD)v710 == *v1160))
        {
          if ((int)v710 >= 1)
          {
            uint64_t v711 = v1160 + 6;
            uint64_t v712 = v359 + 3;
            do
            {
              char v713 = *(_BYTE *)v711;
              v711 += 6;
              *uint64_t v712 = v713 & 1;
              v712 += 24;
              --v710;
            }

            while (v710);
          }

          BOOL v645 = sub_18131BF58((unint64_t)v359, (unint64_t)v709, 0xFFFFFFFFLL) == 0;
        }

        else
        {
          BOOL v645 = 0;
        }

LABEL_834:
        int v714 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v714;
        int v715 = (uint64_t **)sub_181268E34(v1152, 0x38uLL);
        if (v715) {
          sub_18131D044((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_18132888C, (uint64_t)v715);
        }
        if (*(_BYTE *)(v1152 + 103)) {
          goto LABEL_861;
        }
        *((_DWORD *)v715 + 13) = *((_DWORD *)v9 + 4);
        memset(v1158, 0, sizeof(v1158));
        v1155 = a1;
        v1156 = v102;
        v1157 = v715;
        if (v359) {
          int v716 = *(_DWORD *)v359;
        }
        else {
          LOWORD(v716) = 0;
        }
        *((_WORD *)v715 + 1) = v716;
        v715[2] = v359;
        sub_1813288D4((uint64_t)&v1155, (int *)v357);
        sub_1813288D4((uint64_t)&v1155, v1160);
        if (v1150)
        {
          if (v359)
          {
            v1166 = 0LL;
            v1167 = 0LL;
            v1164 = a1;
            v1165 = sub_18133DE6C;
            uint64_t v1168 = 0LL;
            v1169 = v9;
            uint64_t v721 = *((void *)v9 + 8);
            if (v721) {
              sub_18131C57C((uint64_t)&v1164, v721);
            }
            uint64_t v358 = *((void *)v9 + 6);
          }

          v1166 = sub_181329418;
          v1167 = sub_18132942C;
          LODWORD(v1168) = 0;
          v1169 = &v1155;
          v1164 = 0LL;
          v1165 = sub_1812BCAB8;
          sub_18131C57C((uint64_t)&v1164, v1150);
        }

        *((_DWORD *)v715 + 9) = *((_DWORD *)v715 + 8);
        if (*((void *)v9 + 7) || *((void *)v9 + 8) || *((_DWORD *)v715 + 12) != 1) {
          unsigned int v1129 = 0;
        }
        else {
          unsigned int v1129 = sub_181328980(v1152, *v715[5], &v1159);
        }
        sub_181328B00((uint64_t)v715, (uint64_t)&v1155);
        if (*(_BYTE *)(v1152 + 103)) {
          goto LABEL_861;
        }
        unsigned int v1115 = v714;
        int v1136 = v487;
        if (v359)
        {
          int v1093 = v645;
          uint64_t v1123 = v358;
          if (*((_DWORD *)v715 + 12) == 1
            && (uint64_t v722 = v715[5], (v722[2] & 0x80000000) == 0)
            && (uint64_t v723 = *v722) != 0
            && (*(_BYTE *)(v723 + 5) & 0x10) == 0
            && (uint64_t v724 = *(void *)(v723 + 32)) != 0)
          {
            uint64_t v725 = *(unsigned __int8 **)(v724 + 8);
            if (v725) {
              uint64_t v726 = (unsigned __int8 *)sub_18129C928(v1152, v725, 0LL, 0LL);
            }
            else {
              uint64_t v726 = 0LL;
            }
            v1026 = (int *)sub_18129CD4C(v1152, v359, 0);
            v1100 = sub_18127F80C((uint64_t *)a1, v1026, v726);
            if (v1100) {
              int v1027 = 1280;
            }
            else {
              int v1027 = 0;
            }
            int v1107 = v1027;
          }

          else
          {
            v1100 = 0LL;
            int v1107 = 0;
          }

          unsigned int v752 = *((_DWORD *)a1 + 13);
          *((_DWORD *)a1 + 13) = v752 + 1;
          *((_DWORD *)v715 + 1) = v752;
          v1065 = (_DWORD *)sub_1813267BC((uint64_t *)a1, (int *)v359, 0, *((_DWORD *)v715 + 8));
          int v1057 = sub_1812B9B68( (uint64_t *)v1142,  119LL,  *((unsigned int *)v715 + 1),  *((unsigned __int16 *)v715 + 1),  0LL,  (uint64_t)v1065,  4294967288LL,  v753);
          int v754 = *((_DWORD *)a1 + 14);
          uint64_t v755 = (v754 + 4);
          int v1068 = *((_DWORD *)a1 + 17);
          uint64_t v756 = (v1068 - 2);
          *((_DWORD *)a1 + 17) = v756;
          int v1076 = v754;
          uint64_t v757 = (v754 + 5);
          int v1059 = *(_DWORD *)v359 + v755;
          *((_DWORD *)a1 + 14) = v1059 + *(_DWORD *)v359;
          unsigned int v1079 = v754 + 2;
          sub_1813103F4(v1142, 71LL, 0LL, (v754 + 2), v758, v759, v760, v761);
          unsigned int v1060 = v757;
          sub_181279C3C(v1142, 75LL, 0LL, v757, (*(_DWORD *)v359 + v755), v762, v763, v764);
          unsigned int v1082 = v1068 - 2;
          unsigned int v1087 = v755;
          sub_1813103F4(v1142, 10LL, v755, v756, v765, v766, v767, v768);
          if (v1170[0] == 2) {
            int v769 = 128;
          }
          else {
            int v769 = 64;
          }
          int v770 = v1093;
          uint64_t v771 = sub_18128A51C( (uint64_t)a1,  v102,  v1123,  (int *)v359,  v1100,  (uint64_t)v9,  v769 | (v1093 << 9) | v1107,  0LL);
          if (!v771)
          {
            if (v1100) {
              sub_181311F48((void *)v1152, v1100);
            }
            goto LABEL_861;
          }

          uint64_t v777 = v771;
          if (a1[12]) {
            sub_181328C34((uint64_t)v9, (uint64_t)v715, (uint64_t)&v1155);
          }
          int v778 = *((_DWORD *)a1 + 14);
          *((_DWORD *)v715 + 3) = v778 + 1;
          *((_DWORD *)a1 + 14) = *((_DWORD *)v715 + 8) + v778 + *((_DWORD *)v715 + 12);
          int v1073 = *(unsigned __int8 *)(v777 + 67);
          int v1130 = *(char *)(v777 + 65) & ~(*(char *)(v777 + 65) >> 31);
          int v1124 = *(_DWORD *)v359;
          uint64_t v1058 = v777;
          if (*(_DWORD *)v359 == v1130)
          {
            uint64_t v779 = 0LL;
            uint64_t v780 = 0LL;
            goto LABEL_1027;
          }

          uint64_t v838 = "GROUP BY";
          if (v1170[0] && (*((_DWORD *)v9 + 1) & 1) == 0) {
            uint64_t v838 = "DISTINCT";
          }
          int v1055 = sub_18131CCF8((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %s", v772, v773, v774, v775, v776, (char)v838);
          int v839 = *(_DWORD *)v359;
          uint64_t v840 = *((unsigned int *)v715 + 8);
          uint64_t v841 = *(unsigned int *)v359;
          if ((int)v840 >= 1)
          {
            v842 = (__int16 *)v715[3] + 11;
            int v843 = *(_DWORD *)v359;
            LODWORD(v841) = *(_DWORD *)v359;
            do
            {
              int v844 = *v842;
              v842 += 12;
              BOOL v845 = v843 <= v844;
              if (v843 > v844) {
                uint64_t v841 = v841;
              }
              else {
                uint64_t v841 = (v841 + 1);
              }
              if (v845) {
                ++v843;
              }
              --v840;
            }

            while (v840);
          }

          uint64_t v846 = sub_18131B020((uint64_t)a1, v841);
          sub_18131B090((uint64_t)a1, v359, v846, 0, 0, v847, v848, v849);
          *(_BYTE *)int v715 = 1;
          int v853 = *((_DWORD *)v715 + 8);
          if (v853 >= 1)
          {
            uint64_t v854 = 0LL;
            for (uint64_t m = 0LL; m < v853; ++m)
            {
              v856 = &v715[3][v854];
              if (v839 <= *((__int16 *)v856 + 11))
              {
                sub_181319C00((uint64_t)a1, (unsigned __int8 *)v856[1], (v839 + v846));
                ++v839;
                int v853 = *((_DWORD *)v715 + 8);
              }

              v854 += 3LL;
            }
          }

          *(_BYTE *)int v715 = 0;
          if (*((_BYTE *)a1 + 31))
          {
            unsigned __int8 v857 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v857;
            uint64_t v858 = *((unsigned int *)a1 + v857 + 56);
          }

          else
          {
            uint64_t v858 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v858;
          }

          if ((*(_BYTE *)(*(void *)v1142 + 49LL) & 4) != 0)
          {
            int v889 = *(_DWORD *)(v1142 + 144);
            uint64_t v890 = *(unsigned int *)(v1142 + 392);
            uint64_t v891 = 56 * v890;
            int v892 = v890 + 1;
            do
            {
              if (--v892 < 1) {
                goto LABEL_1007;
              }
              uint64_t v893 = v891 - 56;
              uint64_t v894 = *(void *)(v1142 + 400);
              int v895 = *(_DWORD *)(v894 + v891 - 56);
              v891 -= 56LL;
            }

            while (v895 != v1055);
            if (v889 >= 1) {
              *(_DWORD *)(v894 + v893 + 32) = v889;
            }
          }

LABEL_1007:
          sub_181279C3C(v1142, 97LL, v846, v841, v858, v850, v851, v852);
          sub_1813103F4(v1142, 139LL, *((unsigned int *)v715 + 1), v858, v896, v897, v898, v899);
          sub_18131CE30(v1142, v1055, *(_DWORD *)(v1142 + 144) - 2, -1);
          if ((_DWORD)v858)
          {
            uint64_t v907 = *((unsigned __int8 *)a1 + 31);
            if (v907 <= 7)
            {
              *((_BYTE *)a1 + 31) = v907 + 1;
              *((_DWORD *)a1 + v907 + 56) = v858;
            }
          }

          if ((_DWORD)v841 == 1)
          {
            if ((_DWORD)v846)
            {
              uint64_t v908 = *((unsigned __int8 *)a1 + 31);
              if (v908 <= 7)
              {
                *((_BYTE *)a1 + 31) = v908 + 1;
                uint64_t v909 = (_DWORD *)a1 + v908 + 56;
LABEL_1016:
                *uint64_t v909 = v846;
              }
            }
          }

          else if (*((_DWORD *)a1 + 10) < (int)v841)
          {
            *((_DWORD *)a1 + 10) = v841;
            uint64_t v909 = (_DWORD *)a1 + 11;
            goto LABEL_1016;
          }

          sub_18128E90C((uint64_t **)v1058, v900, v901, v902, v903, v904, v905, v906);
          uint64_t v780 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v780 + 1;
          *((_DWORD *)v715 + 2) = v780;
          if (*((_BYTE *)a1 + 31))
          {
            unsigned __int8 v913 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v913;
            uint64_t v779 = *((unsigned int *)a1 + v913 + 56);
          }

          else
          {
            uint64_t v779 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v779;
          }

          if ((*(_BYTE *)(*(void *)v1142 + 49LL) & 4) != 0)
          {
            int v914 = *(_DWORD *)(v1142 + 144);
            uint64_t v915 = *(unsigned int *)(v1142 + 392);
            uint64_t v916 = 56 * v915;
            int v917 = v915 + 1;
            do
            {
              if (--v917 < 1) {
                goto LABEL_1026;
              }
              uint64_t v918 = v916 - 56;
              uint64_t v919 = *(void *)(v1142 + 400);
              int v920 = *(_DWORD *)(v919 + v916 - 56);
              v916 -= 56LL;
            }

            while (v920 != v1055);
            if (v914 >= 1) {
              *(_DWORD *)(v919 + v918 + 28) = v914;
            }
          }

LABEL_1026:
          sub_181279C3C(v1142, 121LL, v780, v779, v841, v910, v911, v912);
          sub_1813103F4(v1142, 34LL, *((unsigned int *)v715 + 1), v1115, v921, v922, v923, v924);
          *((_BYTE *)v715 + 1) = 1;
          sub_18131CE30(v1142, v1055, -1, v780);
          sub_18131CE30(v1142, v1055, -1, *((_DWORD *)v715 + 1));
          int v770 = v1093;
LABEL_1027:
          if (a1[12]) {
            sub_181328D24((uint64_t)v715);
          }
          if (v770 && (*(_BYTE *)(v1152 + 96) & 4) == 0)
          {
            if (v1124 == v1130 && (*(_BYTE *)(v1058 + 68) & 8) == 0)
            {
              unsigned int v1056 = *(_DWORD *)(v1142 + 144);
LABEL_1037:
              unsigned int v1094 = v1076 + 3;
              unsigned int v1069 = v1068 - 1;
              uint64_t v925 = (v1059 + 1);
              uint64_t v926 = *(unsigned int *)v359;
              if ((int)v926 >= 1)
              {
                uint64_t v927 = 0LL;
                uint64_t v928 = 1LL;
                do
                {
                  if (v1124 == v1130)
                  {
                    *(_BYTE *)int v715 = 1;
                    sub_181319C00((uint64_t)a1, (unsigned __int8 *)v359[v928], (v925 + v927));
                  }

                  else
                  {
                    sub_181279C3C(v1142, 94LL, v780, v927, (v925 + v927), v774, v775, v776);
                  }

                  ++v927;
                  uint64_t v926 = *(int *)v359;
                  v928 += 3LL;
                }

                while (v927 < v926);
              }

              uint64_t v929 = (v1076 + 1);
              if (v1065) {
                ++*v1065;
              }
              sub_1812B9B68((uint64_t *)v1142, 90LL, v1060, v925, v926, (uint64_t)v1065, 4294967288LL, v776);
              int v930 = *(_DWORD *)(v1142 + 144);
              sub_181279C3C(v1142, 14LL, (v930 + 1), 0LL, (v930 + 1), v931, v932, v933);
              sub_181328DAC((uint64_t)a1, v925, v1060, *(unsigned int *)v359, v934, v935, v936, v937);
              sub_1813103F4(v1142, 10LL, v1094, v1069, v938, v939, v940, v941);
              sub_1813103F4(v1142, 59LL, v1079, v1115, v942, v943, v944, v945);
              sub_1813103F4(v1142, 10LL, v1087, v1082, v946, v947, v948, v949);
              if (*(_BYTE *)(*(void *)v1142 + 103LL)) {
                int v954 = &byte_18C550680;
              }
              else {
                int v954 = (char *)(*(void *)(v1142 + 136) + 40LL * v930);
              }
              *((_DWORD *)v954 + 2) = *(_DWORD *)(v1142 + 144);
              sub_1812BCF10((uint64_t)a1, v929, (uint64_t)v715, v1073, v950, v951, v952, v953);
              sub_1813103F4(v1142, 71LL, 1LL, v929, v955, v956, v957, v958);
              if (v1124 == v1130)
              {
                sub_18128E90C((uint64_t **)v1058, v959, v960, v961, v962, v963, v964, v965);
                sub_18128BDCC(v1142, v1057);
              }

              else
              {
                sub_1813103F4(v1142, 37LL, *((unsigned int *)v715 + 1), v1056, v962, v963, v964, v965);
              }

              if (v1100) {
                sub_181311F48((void *)v1152, v1100);
              }
              sub_1813103F4(v1142, 10LL, v1094, v1069, v966, v967, v968, v969);
              sub_181319CC8(v1142, v1115, v970, v971, v972, v973, v974, v975);
              uint64_t v976 = *(unsigned int *)(v1142 + 144);
              sub_1813103F4(v1142, 71LL, 1LL, v1079, v977, v978, v979, v980);
              sub_181319BA8(v1142, 67LL, v1094, v981, v982, v983, v984, v985);
              sub_18131B3E0(v1142, v1069);
              int v986 = *(_DWORD *)(v1142 + 144);
              sub_1813103F4(v1142, 59LL, v929, (v986 + 2), v987, v988, v989, v990);
              sub_181319BA8(v1142, 67LL, v1094, v991, v992, v993, v994, v995);
              sub_181328E00(a1, (uint64_t)v715, v996, v997, v998, v999, v1000, v1001);
              sub_1812B0714(a1, v1150);
              sub_18128BE18( (uint64_t)a1,  (uint64_t)v9,  0xFFFFFFFFLL,  &v1160,  (uint64_t)v1170,  v1138,  (v986 + 1),  v976);
              sub_181319BA8(v1142, 67LL, v1094, v1002, v1003, v1004, v1005, v1006);
              sub_18131B3E0(v1142, v1082);
              sub_1812BCD5C((uint64_t)a1, (uint64_t)v715, v1007, v1008, v1009, v1010, v1011, v1012);
              uint64_t v673 = v1142;
              sub_1813103F4(v1142, 71LL, 0LL, v929, v1013, v1014, v1015, v1016);
              sub_181319BA8(v1142, 67LL, v1087, v1017, v1018, v1019, v1020, v1021);
              if (v1107 && v1073) {
                sub_181328F18(a1, v1073, *((_DWORD *)v715[5] + 4), *((_DWORD *)v715[5] + 5));
              }
              goto LABEL_1082;
            }

            v1160 = 0LL;
            sub_18128BDCC(v1142, v1162);
          }

          unsigned int v1056 = *(_DWORD *)(v1142 + 144);
          if (v1124 != v1130) {
            sub_181279C3C(v1142, 133LL, *((unsigned int *)v715 + 1), v779, v780, v774, v775, v776);
          }
          goto LABEL_1037;
        }

        uint64_t v826 = sub_181329020(v9, (uint64_t)v715);
        if (v826)
        {
          uint64_t v833 = v826;
          uint64_t v834 = *(void *)(v826 + 96);
          if (v834)
          {
            uint64_t v835 = (uint64_t *)((*a1)[4] + 24LL);
            LODWORD(v836) = -1;
            do
            {
              uint64_t v837 = *v835;
              v835 += 4;
              uint64_t v836 = (v836 + 1);
            }

            while (v837 != v834);
          }

          else
          {
            uint64_t v836 = 4294934528LL;
          }

          uint64_t v862 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v862 + 1;
          uint64_t v863 = *(unsigned int *)(v826 + 40);
          sub_18128BBA8((uint64_t)a1, v836);
          sub_181319D20((uint64_t)a1, v836, *(_DWORD *)(v833 + 40), 0, *(void *)v833);
          if ((*(_BYTE *)(v833 + 48) & 0x80) != 0)
          {
            for (uint64_t n = *(void *)(v833 + 16); n; uint64_t n = *(void *)(n + 40))
            {
              if ((*(_WORD *)(n + 99) & 3) == 2) {
                break;
              }
            }
          }

          else
          {
            uint64_t n = 0LL;
          }

          if ((*(_WORD *)(*((void *)v9 + 5) + 69LL) & 1) == 0)
          {
            for (iint i = *(void *)(v833 + 16); ii; iint i = *(void *)(ii + 40))
            {
              if ((*(_WORD *)(ii + 99) & 4) == 0)
              {
                int v876 = *(__int16 *)(ii + 92);
              }
            }
          }

          if (n)
          {
            unsigned int v1131 = *(_DWORD *)(n + 88);
            uint64_t v868 = sub_181319FB0(a1, n);
            uint64_t v869 = v1142;
            sub_1812DC7B4(v1142, 112LL, v862, v1131, v836, 1LL, v870, v871);
            if (v868) {
              sub_181289F90((uint64_t *)v1142, -1, v868, 0xFFFFFFF8);
            }
          }

          else
          {
            uint64_t v869 = v1142;
            sub_1812DC7B4(v1142, 112LL, v862, v863, v836, 1LL, v864, v865);
          }

          int v877 = *((_DWORD *)a1 + 14);
          *((_DWORD *)v715 + 3) = v877 + 1;
          unsigned int v878 = *((_DWORD *)v715 + 8);
          *((_DWORD *)a1 + 14) = v878 + v877 + *((_DWORD *)v715 + 12);
          sub_1813103F4(v869, 98LL, v862, v878 + v877 + 1, v872, v873, v874, v875);
          sub_181319BA8(v869, 122LL, v862, v879, v880, v881, v882, v883);
          sub_1813290BC((uint64_t)a1, (void *)v833, n, v884, v885, v886, v887, v888);
LABEL_1081:
          v1160 = 0LL;
          sub_1812B0714(a1, v1150);
          sub_18128BE18((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, 0LL, 0LL, v1138, v1115, v1115);
          uint64_t v673 = v1142;
LABEL_1082:
          uint64_t v683 = v673;
          int v684 = v1115;
          goto LABEL_1083;
        }

        uint64_t v859 = *((unsigned int *)v715 + 12);
        if (*((_DWORD *)v715 + 9))
        {
          if ((int)v859 < 1)
          {
            LODWORD(v860) = 0;
          }

          else
          {
            uint64_t v860 = 0LL;
            uint64_t v861 = (uint64_t)(v715[5] + 1);
            while ((*(_BYTE *)(*(void *)(v861 - 8) + 7LL) & 1) != 0
                 || (*(_BYTE *)(*(void *)v861 + 4LL) & 0x20) == 0)
            {
              ++v860;
              v861 += 24LL;
              if (v859 == v860) {
                goto LABEL_1063;
              }
            }
          }

          if ((_DWORD)v860 == (_DWORD)v859)
          {
LABEL_1063:
            uint64_t v1023 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v1023;
            sub_1813103F4(v1142, 71LL, 0LL, v1023, v829, v830, v831, v832);
            v1024 = 0LL;
            int v1025 = 0;
            LODWORD(v859) = *((_DWORD *)v715 + 12);
LABEL_1072:
            int v1028 = *((_DWORD *)a1 + 14);
            *((_DWORD *)v715 + 3) = v1028 + 1;
            *((_DWORD *)a1 + 14) = v1028 + v859 + *((_DWORD *)v715 + 8);
            sub_1812BCD5C((uint64_t)a1, (uint64_t)v715, v827, v828, v829, v830, v831, v832);
            uint64_t v1029 = sub_18128A51C((uint64_t)a1, v102, v358, v1159, v1024, (uint64_t)v9, v1025 | v1129, 0LL);
            if (!v1029) {
              goto LABEL_861;
            }
            v1034 = (uint64_t **)v1029;
            int v1035 = *(unsigned __int8 *)(v1029 + 67);
            sub_1812BCF10((uint64_t)a1, v1023, (uint64_t)v715, v1035, v1030, v1031, v1032, v1033);
            if (v1035)
            {
              v1043 = v715[5];
              if (v1043) {
                sub_181328F18(a1, v1035, *((_DWORD *)v1043 + 4), *((_DWORD *)v1043 + 5));
              }
            }

            if ((_DWORD)v1023) {
              sub_1813103F4(v1142, 71LL, 1LL, v1023, v1039, v1040, v1041, v1042);
            }
            if (v1129) {
              sub_181329144(v1142, (uint64_t)v1034, v1037, v1038, v1039, v1040, v1041, v1042);
            }
            sub_18128E90C(v1034, v1036, v1037, v1038, v1039, v1040, v1041, v1042);
            sub_181328E00(a1, (uint64_t)v715, v1044, v1045, v1046, v1047, v1048, v1049);
            goto LABEL_1081;
          }
        }

        else if ((_DWORD)v859 == 1)
        {
          v1022 = v715[5];
          if ((v1022[2] & 0x80000000) != 0)
          {
            uint64_t v1023 = 0LL;
            v1024 = 0LL;
            int v1025 = 0;
          }

          else
          {
            uint64_t v1023 = 0LL;
            v1024 = *(int **)(*v1022 + 32);
            if (v1024) {
              int v1025 = 1280;
            }
            else {
              int v1025 = 0;
            }
          }

          LODWORD(v859) = 1;
          goto LABEL_1072;
        }

        uint64_t v1023 = 0LL;
        v1024 = 0LL;
        int v1025 = 0;
        goto LABEL_1072;
      }

      unint64_t v481 = *(unsigned int *)v357;
      int v482 = v481;
      if ((int)v481 > 1)
      {
        unint64_t v483 = v481 - 1;
        if ((*(_WORD *)((_BYTE *)&v357[3 * v481] + 1) & 0x40) != 0)
        {
LABEL_623:
          unsigned int v486 = (_WORD *)((char *)v357 + 25);
          do
          {
            if ((*v486 & 0x40) == 0) {
              **(_BYTE **)((char *)v486 - 17) = 121;
            }
            v486 += 12;
            --v481;
          }

          while (v481);
          goto LABEL_627;
        }

        do
        {
          uint64_t v484 = (unsigned __int8 *)v357[3 * v483 + 1];
          if (v484) {
            sub_181309110((void *)v1152, v484);
          }
          uint64_t v485 = (void *)v357[3 * v483 + 2];
          if (v485) {
            sub_1812F20DC((void *)v1152, v485);
          }
          int v482 = *(_DWORD *)v357 - 1;
          *(_DWORD *)char v357 = v482;
          if (v481 <= 2) {
            break;
          }
          unint64_t v483 = (v481-- - 2);
        }

        while ((*(_WORD *)((_BYTE *)&v357[3 * v483 + 3] + 1) & 0x40) == 0);
      }

      if (v482 < 1) {
        goto LABEL_627;
      }
      unint64_t v481 = v482;
      goto LABEL_623;
    }

    int v160 = v110;
    uint64_t v161 = &v102[26 * v110];
    char v164 = *((_BYTE *)v161 + 68);
    uint64_t v163 = (char *)(v161 + 17);
    char v162 = v164;
    uint64_t v165 = *(void *)(v163 - 20);
    uint64_t v166 = *(void *)(v163 - 28);
    if ((v164 & 0x48) != 0)
    {
      uint64_t v167 = &v102[26 * v110];
      unsigned int v169 = v167[18];
      uint64_t v168 = (unsigned int *)(v167 + 18);
      if (sub_18131C8FC(*((void *)v9 + 6), v169, v162 & 0x40))
      {
        if ((*(_BYTE *)(v1152 + 97) & 0x20) == 0)
        {
          char v170 = *v163;
          if ((*v163 & 8) != 0)
          {
            if ((*v163 & 0x10) != 0) {
              char v171 = -9;
            }
            else {
              char v171 = -41;
            }
            v170 &= v171;
            *uint64_t v163 = v170;
          }

          if ((v170 & 0x40) != 0)
          {
            uint64_t v172 = *v102;
            if (v110 + 1 < (int)v172)
            {
              uint64_t v173 = &v102[26 * v110 + 43];
              int v174 = ~v110 + v172;
              do
              {
                if ((*(_BYTE *)v173 & 0x10) != 0)
                {
                  if ((*(_BYTE *)v173 & 8) != 0) {
                    char v175 = -17;
                  }
                  else {
                    char v175 = -49;
                  }
                  *(_BYTE *)v173 &= v175;
                }

                v173 += 26;
                --v174;
              }

              while (v174);
            }

            uint64_t v176 = v172 + 1;
            uint64_t v177 = &v102[26 * (int)v172 - 9];
            do
            {
              if (--v176 <= v110) {
                break;
              }
              char v178 = *(_BYTE *)v177;
              *(_BYTE *)v177 &= ~0x40u;
              v177 -= 26;
            }

            while ((v178 & 0x10) == 0);
          }

          sub_181325FE0(*((void *)v9 + 6), *v168, v102[17] & 0x40);
        }
      }
    }

    if (!v165) {
      goto LABEL_206;
    }
    int v179 = *(__int16 *)(v166 + 54);
    if (**(_DWORD **)(v165 + 32) != v179)
    {
      sub_1812DC47C((uint64_t)a1, "expected %d columns for '%s' but got %d", v20, v21, v22, v23, v24, v25, v179);
      goto LABEL_861;
    }

    if ((*(_WORD *)((_BYTE *)&v102[26 * v110 + 17] + 1) & 0x100) != 0
      && !*(_BYTE *)(*(void *)&v102[26 * v110 + 26] + 18LL))
    {
      goto LABEL_206;
    }

    int v180 = *(_DWORD *)(v165 + 4);
    if ((v180 & 8) != 0) {
      goto LABEL_206;
    }
    uint64_t v20 = *(void *)(v165 + 72);
    if (!v20) {
      goto LABEL_244;
    }
    if ((*(void *)v1147 || *v102 >= 2)
      && (v180 & 0x8000000) == 0
      && !*(void *)(v165 + 96)
      && (v9[7] & 8) == 0
      && (*(_BYTE *)(v1152 + 98) & 4) == 0)
    {
      break;
    }

    if (v110 || (v9[6] & 4) == 0 || *v102 != 1 && (v102[43] & 0x22) == 0) {
      goto LABEL_244;
    }
    int v110 = 0;
LABEL_206:
    ++v110;
    uint64_t v104 = *((void *)v9 + 10);
    if (v104)
    {
      int v8 = v1138;
      goto LABEL_150;
    }
  }

  sub_18131D044((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_18128FF40, v20);
  *(void *)(v165 + 72) = 0LL;
LABEL_244:
  uint64_t v181 = (uint64_t)*a1;
  int v182 = *((_DWORD *)*a1 + 24);
  if ((v182 & 1) != 0
    || *((void *)v9 + 14)
    || (uint64_t v183 = (int *)*((void *)v9 + 5),
        uint64_t v184 = &v183[26 * v110],
        uint64_t v187 = *((void *)v184 + 6),
        uint64_t v185 = v184 + 12,
        uint64_t v186 = v187,
        *(void *)(v187 + 112)))
  {
LABEL_247:
    if (*(_BYTE *)(v1152 + 103)) {
      goto LABEL_861;
    }
    __int128 v102 = (int *)*((void *)v9 + 5);
    if (*v1138 >= 9u) {
      v1160 = *(int **)v1147;
    }
    goto LABEL_206;
  }

  uint64_t v188 = a1[46];
  uint64_t v189 = *(void *)(v186 + 40);
  uint64_t v190 = *(void *)(v186 + 96);
  if (v190)
  {
    if (*((void *)v9 + 12)) {
      goto LABEL_247;
    }
    if (*(void *)(v190 + 24)) {
      goto LABEL_247;
    }
    int v191 = *((_DWORD *)v9 + 1);
    if ((v191 & 0x100) != 0) {
      goto LABEL_247;
    }
  }

  else
  {
    int v191 = *((_DWORD *)v9 + 1);
  }

  if (!*(_DWORD *)v189) {
    goto LABEL_247;
  }
  int v192 = *(_DWORD *)(v186 + 4);
  if ((v192 & 1) != 0 || v190 && ((v1126 & 8) != 0 || *v183 > 1)) {
    goto LABEL_247;
  }
  uint64_t v193 = *(unsigned int **)v1147;
  if (*(void *)v1147)
  {
    if (*(void *)(v186 + 72)) {
      goto LABEL_247;
    }
  }

  if ((v1126 & 8) != 0 && *(void *)(v186 + 72)) {
    goto LABEL_247;
  }
  if (v190)
  {
    if (*((void *)v9 + 6) || *(_DWORD *)(v186 + 4) & 0x2000 | v191 & 1) {
      goto LABEL_247;
    }
  }

  else if ((v192 & 0x2000) != 0)
  {
    goto LABEL_247;
  }

  v1061 = v9;
  v1070 = v185;
  unsigned int v1075 = v185[6];
  v1102 = (int *)*((void *)v9 + 5);
  uint64_t v194 = &v183[26 * v110];
  v1078 = (char *)(v194 + 17);
  int v1081 = v194[17] & 0x60;
  if ((v194[17] & 0x60) != 0)
  {
    BOOL v195 = *(_BYTE *)(*(void *)(v189 + 40) + 63LL) != 1 && (v194[17] & 0x10 | v191 & 1) == 0;
    if (!v195) {
      goto LABEL_247;
    }
    int v1066 = 1;
  }

  else
  {
    int v1066 = 0;
  }

  if (v110 >= 1 && (*(_BYTE *)(v189 + 68) & 0x40) != 0) {
    goto LABEL_247;
  }
  if (!*(void *)(v186 + 80)) {
    goto LABEL_310;
  }
  if ((v1126 & 8) != 0 || *(void *)(v186 + 72) || v1081 | v191 & 1) {
    goto LABEL_247;
  }
  __int128 v196 = (unsigned __int8 *)v186;
  do
  {
    int v9 = v1061;
    if ((v196[4] & 9) != 0) {
      goto LABEL_247;
    }
    uint64_t v197 = *((void *)v196 + 10);
    if (v197)
    {
      if (*v196 != 135) {
        goto LABEL_247;
      }
    }

    uint64_t v198 = *((void *)v196 + 5);
    __int128 v196 = (unsigned __int8 *)*((void *)v196 + 10);
  }

  while (v197);
  if (v193)
  {
    uint64_t v199 = *v193;
    if ((int)v199 >= 1)
    {
      __int128 v200 = (unsigned __int16 *)(v193 + 7);
      do
      {
        int v201 = *v200;
        v200 += 12;
        int v9 = v1061;
        if (!v201) {
          goto LABEL_247;
        }
        --v199;
      }

      while (v199);
    }
  }

  int v9 = v1061;
  if (*v1102 < 2) {
    goto LABEL_310;
  }
  int v9 = v1061;
  v1084 = sub_181268E34(v181, 4LL * *((int *)a1 + 13) + 4);
  if (v1084) {
    *(_DWORD *)v1084 = *((_DWORD *)a1 + 13);
  }
  else {
LABEL_310:
  }
    v1084 = 0LL;
  __int128 v202 = &v1102[26 * v110];
  __int128 v203 = (void **)(v202 + 6);
  a1[46] = (void *)*((void *)v202 + 3);
  sub_18131E794((uint64_t)a1, 21LL, 0LL, 0LL, 0LL);
  a1[46] = v188;
  v1063 = *(void **)v1070;
  uint64_t v206 = (void *)*((void *)v202 + 2);
  __int128 v205 = v202 + 4;
  __int128 v204 = v206;
  if (v206) {
    sub_1812F20DC((void *)v181, v204);
  }
  if (*v203) {
    sub_1812F20DC((void *)v181, *v203);
  }
  uint64_t v19 = *(void **)&v1102[26 * v110 + 8];
  if (v19) {
    sub_1812F20DC((void *)v181, v19);
  }
  *(void *)v1070 = 0LL;
  v205[1] = 0LL;
  v205[2] = 0LL;
  void *v205 = 0LL;
  uint64_t v207 = *(void *)(v186 + 80);
  uint64_t v208 = (uint64_t)v1061;
  if (v207)
  {
    v1089 = &v1102[26 * v110 + 10];
    uint64_t v1096 = *((void *)v1061 + 10);
    do
    {
      uint64_t v210 = *(void *)(v208 + 96);
      uint64_t v1109 = *(void *)v1089;
      uint64_t v1118 = *(void *)(v208 + 72);
      *(void *)v1089 = 0LL;
      *(void *)(v208 + 96) = 0LL;
      *(void *)v1147 = 0LL;
      *((void *)v1147 + 1) = 0LL;
      uint64_t v211 = sub_18129F624(v181, v208, 0LL);
      *(void *)(v208 + 96) = v210;
      *(void *)(v208 + 72) = v1118;
      *(_BYTE *)uint64_t v208 = -121;
      *(void *)v1089 = v1109;
      if (v211)
      {
        uint64_t v209 = v211;
        int v212 = *((_DWORD *)a1 + 35) + 1;
        *((_DWORD *)a1 + 35) = v212;
        *(_DWORD *)(v211 + 16) = v212;
        if (v1084 && !*(_BYTE *)(v181 + 103)) {
          sub_181329854((uint64_t)a1, v211, v110, (uint64_t)v1084);
        }
        *(void *)(v209 + 80) = v1096;
        if (v1096) {
          *(void *)(v1096 + 88) = v209;
        }
        uint64_t v208 = (uint64_t)v1061;
        *(void *)(v209 + 88) = v1061;
        uint64_t v1096 = v209;
      }

      else
      {
        uint64_t v209 = v1096;
      }

      *(void *)(v208 + 80) = v209;
      uint64_t v207 = *(void *)(v207 + 80);
    }

    while (v207);
  }

  if (v1084) {
    sub_1812F20DC((void *)v181, v1084);
  }
  if (*(_BYTE *)(v181 + 103))
  {
    *(void *)v1070 = v1063;
    goto LABEL_384;
  }

  uint64_t v213 = &v1102[26 * v110];
  uint64_t v216 = *((void *)v213 + 5);
  uint64_t v215 = v213 + 10;
  uint64_t v214 = v216;
  if (v216)
  {
    if (*(_DWORD *)(v214 + 44) == 1)
    {
      if (a1[21]) {
        uint64_t v217 = a1[21];
      }
      else {
        uint64_t v217 = (uint64_t *)a1;
      }
      sub_18131D044(v217, (void (*)(uint64_t, uint64_t))sub_18127A1DC, v214);
    }

    else
    {
      --*(_DWORD *)(v214 + 44);
    }

    void *v215 = 0LL;
  }

  unsigned int v1071 = v110 + 1;
  uint64_t v1085 = 26LL * v110;
  uint64_t v218 = 0xFFFFFFFFLL;
  int v219 = v1061;
  v1110 = v1063;
  while (2)
  {
    char v220 = v1102[26 * v160 + 17];
    uint64_t v221 = (unsigned int *)v1110[5];
    uint64_t v222 = *v221;
    v1097 = v219;
    v1102 = (int *)*((void *)v219 + 5);
    if (v219 == v1061) {
      char v1090 = *v1078;
    }
    else {
      char v1090 = 0;
    }
    char v1119 = v220 & 0x40;
    if ((int)v222 < 2)
    {
      if ((_DWORD)v222 == 1) {
        goto LABEL_349;
      }
      int v234 = 0;
    }

    else
    {
      v1102 = sub_18127FE00((uint64_t *)a1, v1102, (v222 - 1), v1071, v22, v23, v24, v25);
      if (!v1102) {
        break;
      }
      *((void *)v219 + 5) = v1102;
LABEL_349:
      uint64_t v223 = 0LL;
      char v224 = &v1102[v1085];
      uint64_t v225 = v222;
      __int128 v226 = 0uLL;
      do
      {
        uint64_t v233 = &v224[v223];
        if ((*(_WORD *)((_BYTE *)&v224[v223 + 17] + 1) & 0x400) != 0)
        {
          sub_181309328((void *)v181, *((void **)v233 + 10));
          __int128 v226 = 0uLL;
        }

        int v227 = &v221[v223];
        __int128 v228 = *(_OWORD *)&v221[v223 + 14];
        __int128 v229 = *(_OWORD *)&v221[v223 + 18];
        __int128 v230 = *(_OWORD *)&v221[v223 + 22];
        *((void *)v233 + 13) = *(void *)&v221[v223 + 26];
        *(_OWORD *)(v233 + 18) = v229;
        *(_OWORD *)(v233 + 22) = v230;
        *(_OWORD *)(v233 + 14) = v228;
        __int128 v231 = *(_OWORD *)&v221[v223 + 2];
        __int128 v232 = *(_OWORD *)&v221[v223 + 10];
        *(_OWORD *)(v233 + 6) = *(_OWORD *)&v221[v223 + 6];
        *(_OWORD *)(v233 + 10) = v232;
        *(_OWORD *)(v233 + 2) = v231;
        *((_BYTE *)v233 + 68) |= v1119;
        uint64_t v218 = v221[v223 + 18];
        *(_OWORD *)(v227 + 18) = v226;
        *(_OWORD *)(v227 + 2) = v226;
        *(_OWORD *)(v227 + 6) = v226;
        *(_OWORD *)(v227 + 10) = v226;
        *(_OWORD *)(v227 + 14) = v226;
        *(_OWORD *)(v227 + 22) = v226;
        *((void *)v227 + 13) = 0LL;
        v223 += 26LL;
        --v225;
      }

      while (v225);
      int v234 = 1;
    }

    LOBYTE(v1102[26 * v160 + 17]) = v1090 | v1119 | v1102[26 * v160 + 17] & 0x40;
    uint64_t v235 = (unsigned int *)v1110[9];
    if (v235 && (v1097[6] & 0x40) == 0)
    {
      uint64_t v236 = *v235;
      if ((int)v236 >= 1)
      {
        if ((_DWORD)v236 == 1)
        {
          uint64_t v237 = 0LL;
          goto LABEL_363;
        }

        uint64_t v237 = v236 & 0xFFFFFFFE;
        uint64_t v238 = v235 + 13;
        uint64_t v239 = v237;
        do
        {
          *(v238 - 12) = 0;
          *uint64_t v238 = 0;
          v238 += 24;
          v239 -= 2LL;
        }

        while (v239);
        if (v237 != v236)
        {
LABEL_363:
          uint64_t v240 = v236 - v237;
          uint64_t v241 = &v235[6 * v237 + 7];
          do
          {
            *(_WORD *)uint64_t v241 = 0;
            v241 += 6;
            --v240;
          }

          while (v240);
        }
      }

      *((void *)v1097 + 9) = v235;
      v1110[9] = 0LL;
    }

    uint64_t v242 = v1110[6];
    v1110[6] = 0LL;
    if (v1081) {
      sub_1813231A8(v242, v218, 1LL);
    }
    if (v242)
    {
      uint64_t v243 = *((void *)v1097 + 6);
      if (v243) {
        uint64_t v242 = sub_1813132BC((uint64_t *)a1, 44, v242, v243);
      }
      *((void *)v1097 + 6) = v242;
    }

    if (!*(_BYTE *)(v181 + 103))
    {
      v1164 = a1;
      v1165 = (uint64_t (*)(uint64_t, uint64_t))__PAIR64__(v218, v1075);
      LODWORD(v1166) = v1066;
      uint64_t v244 = v1110;
      v1167 = (uint64_t (*)(uint64_t))v1110[4];
      do
      {
        uint64_t v245 = v244;
        uint64_t v244 = (void *)v244[10];
      }

      while (v244);
      uint64_t v1168 = v245[4];
      sub_1813298B8((uint64_t)&v1164, v1097, 0);
    }

    *((_DWORD *)v1097 + 1) |= *((_DWORD *)v1110 + 1) & 0x100;
    uint64_t v246 = v1110[12];
    if (v246)
    {
      *((void *)v1097 + 12) = v246;
      v1110[12] = 0LL;
    }

    if (v234)
    {
      uint64_t v247 = (uint64_t)&v1102[v1085 + 2];
      do
      {
        sub_181329A64(v1097, v247);
        v247 += 104LL;
        --v222;
      }

      while (v222);
    }

    int v219 = (unsigned __int8 *)*((void *)v1097 + 10);
    v1110 = (void *)v1110[10];
    if (v219) {
      continue;
    }
    break;
  }

  memset(v1158, 0, 24);
  v1155 = a1;
  v1156 = sub_18132943C;
  v1157 = sub_181323260;
  sub_181285228(&v1155, v1063);
  if (v1063) {
    sub_18128FDA0((void *)v181, (uint64_t)v1063, 1);
  }
LABEL_384:
  if (!*((_DWORD *)a1 + 12))
  {
    int v110 = -1;
    int v9 = v1061;
    goto LABEL_247;
  }

LABEL_861:
  uint64_t v13 = 1LL;
  uint64_t v11 = v1152;
LABEL_25:
  if (v1159) {
    sub_181311F48((void *)v11, v1159);
  }
LABEL_27:
  int v26 = *((_DWORD *)a1 + 78);
  if (v26)
  {
    uint64_t v27 = a1[2];
    if (*(_BYTE *)(*v27 + 103LL)) {
      uint64_t v28 = &byte_18C550680;
    }
    else {
      uint64_t v28 = (char *)(v27[17] + 40LL * v26);
    }
    int v26 = *((_DWORD *)v28 + 2);
  }

  *((_DWORD *)a1 + 78) = v26;
  return v13;
}

uint64_t sub_181285228(void *a1, void *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (!a1[2]) {
    return 0LL;
  }
  int v3 = a2;
  while (1)
  {
    int v4 = ((uint64_t (*)(void *, void *))a1[2])(a1, v3);
    if (v4) {
      return v4 & 2;
    }
    int v5 = (_DWORD *)v3[4];
    if (v5 && (int)*v5 >= 1)
    {
      char v6 = (uint64_t *)(v5 + 2);
      int v7 = *v5 + 1;
      while (!*v6 || !sub_18131C57C((uint64_t)a1, *v6))
      {
        v6 += 3;
        if (--v7 <= 1) {
          goto LABEL_12;
        }
      }

      return 2LL;
    }

LABEL_21:
    uint64_t v12 = v3[8];
    uint64_t v13 = (_DWORD *)v3[9];
    if (v13 && (int)*v13 >= 1)
    {
      uint64_t v14 = (uint64_t *)(v13 + 2);
      int v15 = *v13 + 1;
      while (!*v14 || !sub_18131C57C((uint64_t)a1, *v14))
      {
        v14 += 3;
        if (--v15 <= 1) {
          goto LABEL_30;
        }
      }

      return 2LL;
    }

  *(_DWORD *)(a1 + 32) = v13;
  if (v3)
  {
    uint64_t v14 = *(const void **)(a1 + 8);
    if (v14) {
      memcpy(*(void **)(a1 + 40), v14, *(int *)(a1 + 16));
    }
  }

  if ((*(_WORD *)(a1 + 20) & 0x1000) != 0)
  {
    int v15 = *(void *)(a1 + 48);
    if (*(_BYTE *)(a1 + 56))
    {
      (*(void (**)(void, void))(v15 + 16))(*(void *)(a1 + 48), *(void *)(a1 + 8));
      _Block_release(*(const void **)(a1 + 48));
    }

    else
    {
      ((void (*)(void))v15)(*(void *)(a1 + 8));
    }
  }

  uint64_t result = 0LL;
  *(void *)(a1 + 8) = *(void *)(a1 + 40);
  *(_WORD *)(a1 + 20) &= 0x8FFFu;
  return result;
}

  uint64_t v31 = *(unsigned __int8 *)(a1 + 302);
  if (v31 >= 2)
  {
    uint64_t v35 = 0uLL;
    *(void *)&uint64_t v33 = a1;
    *((void *)&v33 + 1) = sub_181323638;
    *(void *)&uint64_t v34 = sub_1813236A4;
    *((void *)&v34 + 1) = 0LL;
    *(_BYTE *)(a1 + 302) = 3;
    if (a2) {
      sub_18131C57C((uint64_t)&v33, (uint64_t)a2);
    }
    *(_BYTE *)(a1 + 302) = v31;
  }

  if (a2) {
    sub_181309110((void *)v10, a2);
  }
}

      if (*(_BYTE *)(v15 + 17)) {
        goto LABEL_22;
      }
LABEL_29:
      uint64_t v13 = 1;
      ++v11;
      if ((_DWORD)v9) {
        return v9;
      }
    }

    else
    {
      ++v11;
    }
  }

  if (v13)
  {
    uint64_t v21 = *(unsigned int (**)(void))(a1 + 280);
    if (v21)
    {
      if (v21(*(void *)(a1 + 272))) {
        return 531LL;
      }
    }
  }

  BOOL v22 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 8LL);
  uint64_t v23 = *v22;
  uint64_t v24 = *(unsigned __int8 *)(*v22 + 19);
  if (*(_BYTE *)(*v22 + 19) || *(_UNKNOWN **)v23 == &unk_18C465F78)
  {
    uint64_t v25 = (const char *)&unk_1813C6CDD;
  }

  else
  {
    uint64_t v25 = *(const char **)(v23 + 216);
    if (!v25)
    {
LABEL_72:
      int v42 = -1LL;
      uint64_t v43 = 8LL;
      while (++v42 < *(int *)(a1 + 40))
      {
        uint64_t v44 = *(void *)(*(void *)(a1 + 32) + v43);
        if (v44)
        {
          int v9 = sub_1812A0BC0(v44, 0LL, a3);
          v43 += 32LL;
          if ((_DWORD)v9) {
            return v9;
          }
        }

        else
        {
          v43 += 32LL;
        }
      }

      uint64_t v45 = -1LL;
      uint64_t v46 = 8LL;
      while (++v45 < *(int *)(a1 + 40))
      {
        int v47 = *(void *)(*(void *)(a1 + 32) + v46);
        if (v47)
        {
          int v9 = sub_1812A1010(v47, 0);
          v46 += 32LL;
          if ((_DWORD)v9) {
            return v9;
          }
        }

        else
        {
          v46 += 32LL;
        }
      }

      goto LABEL_118;
    }
  }

  if ((strlen(v25) & 0x3FFFFFFF) == 0 || v12 <= 1) {
    goto LABEL_72;
  }
  int v32 = *(void *)a1;
  if (v24 || *(_UNKNOWN **)v23 == &unk_18C465F78)
  {
    int v73 = 0LL;
    uint64_t v33 = (const char *)&unk_1813C6CDD;
LABEL_53:
    uint64_t v34 = strlen(v33) & 0x3FFFFFFF;
    goto LABEL_54;
  }

  uint64_t v33 = *(const char **)(v23 + 216);
  int v73 = 0LL;
  if (v33) {
    goto LABEL_53;
  }
  uint64_t v34 = 0LL;
LABEL_54:
  uint64_t v35 = (char *)sub_18127F588(a1, "%.4c%s%.16c", v26, v27, v28, v29, v30, v31, 0);
  if (!v35) {
    return 7LL;
  }
  uint64_t v36 = v35;
  uint64_t v37 = v35 + 4;
  uint64_t v38 = &v35[v34 + 4];
  sqlite3_initialize();
  arc4random_buf(&__buf, 4uLL);
  sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf);
  int v9 = (*(uint64_t (**)(uint64_t, char *, void, int *))(v32 + 56))(v32, v37, 0LL, &v72);
  if ((_DWORD)v9
    || !v72
    || (sqlite3_log(13, "MJ collide: %s", v37),
        sqlite3_initialize(),
        arc4random_buf(&__buf, 4uLL),
        sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf),
        int v9 = (*(uint64_t (**)(uint64_t, char *, void, int *))(v32 + 56))(v32, v37, 0LL, &v72),
        (_DWORD)v9)
    || !v72)
  {
LABEL_67:
    if ((_DWORD)v9) {
      goto LABEL_69;
    }
  }

  else
  {
    int v39 = 1;
    while (++v39 < 0x65)
    {
      sqlite3_initialize();
      arc4random_buf(&__buf, 4uLL);
      sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf);
      uint64_t v40 = (*(uint64_t (**)(uint64_t, char *, void, int *))(v32 + 56))(v32, v37, 0LL, &v72);
      if ((_DWORD)v40) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v72 == 0;
      }
      if (v41)
      {
        int v9 = v40;
        goto LABEL_67;
      }
    }

    sqlite3_log(13, "MJ delete: %s", v37);
    int v60 = *(void (**)(uint64_t, char *, void))(v32 + 48);
    if (v60) {
      v60(v32, v37, 0LL);
    }
  }

  int v9 = sub_181302BC0(v32, (uint64_t)v37, &v73, 16406, 0LL);
  if ((_DWORD)v9) {
    goto LABEL_69;
  }
  uint64_t v48 = *(_DWORD *)(a1 + 40);
  unsigned int v49 = v73;
  if (v48 < 1)
  {
LABEL_94:
    if (((*(uint64_t (**)(void *))(*v49 + 96LL))(v49) & 0x400) == 0)
    {
      int v59 = (*(uint64_t (**)(void *, uint64_t))(*v49 + 40LL))(v49, 2LL);
      if ((_DWORD)v59)
      {
        int v9 = v59;
        sub_1813029E8(v49);
        goto LABEL_127;
      }
    }

    uint64_t v61 = -1LL;
    BOOL v62 = 8LL;
    while (++v61 < *(int *)(a1 + 40))
    {
      int v63 = *(void *)(*(void *)(a1 + 32) + v62);
      if (v63)
      {
        int v9 = sub_1812A0BC0(v63, v37, v58);
        v62 += 32LL;
        if ((_DWORD)v9)
        {
          sub_1813029E8(v49);
          goto LABEL_69;
        }
      }

      else
      {
        v62 += 32LL;
      }
    }

    sub_1813029E8(v49);
    int v64 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 48);
    if (v64)
    {
      int v9 = v64(v32, v37, 1LL);
      uint64_t v65 = (uint64_t)sub_1812F20DC((void *)a1, v36);
      if ((_DWORD)v9) {
        return v9;
      }
    }

    else
    {
      uint64_t v65 = (uint64_t)sub_1812F20DC((void *)a1, v36);
    }

    if (off_18C550648) {
      off_18C550648(v65);
    }
    uint64_t v66 = *(_DWORD *)(a1 + 40);
    if (v66 >= 1)
    {
      uint64_t v67 = 0LL;
      uint64_t v68 = 8LL;
      do
      {
        uint64_t v65 = *(void *)(*(void *)(a1 + 32) + v68);
        if (v65)
        {
          uint64_t v65 = sub_1812A1010(v65, 1);
          uint64_t v66 = *(_DWORD *)(a1 + 40);
        }

        ++v67;
        v68 += 32LL;
      }

      while (v67 < v66);
    }

    if (off_18C550650) {
      off_18C550650(v65);
    }
LABEL_118:
    sub_1812A1B68((int *)a1, 0x80u);
    return 0LL;
  }

  int v50 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v52 = 8LL;
  while (2)
  {
    int v53 = *(void *)(*(void *)(a1 + 32) + v52);
    if (!v53 || *(_BYTE *)(v53 + 16) != 2 || (uint64_t v54 = **(void **)(v53 + 8), (v55 = *(const char **)(v54 + 224)) == 0LL))
    {
LABEL_88:
      ++v50;
      v52 += 32LL;
      if (v50 >= v48) {
        goto LABEL_94;
      }
      continue;
    }

    break;
  }

  uint64_t v56 = strlen(*(const char **)(v54 + 224));
  BOOL v57 = (*(uint64_t (**)(void *, const char *, void, uint64_t))(*v49 + 24LL))( v49,  v55,  (v56 & 0x3FFFFFFFu) + 1,  v51);
  if (!(_DWORD)v57)
  {
    v51 += (strlen(v55) & 0x3FFFFFFF) + 1;
    uint64_t v48 = *(_DWORD *)(a1 + 40);
    goto LABEL_88;
  }

  int v9 = v57;
  if (*v49)
  {
    (*(void (**)(void *))(*v49 + 8LL))(v49);
    *unsigned int v49 = 0LL;
  }

  uint64_t v69 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v49);
    --qword_18C468B10;
    off_18C4653A8(v49);
    unsigned int v49 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v69 = &xmmword_18C465410;
      goto LABEL_126;
    }
  }

  else
  {
LABEL_126:
    (*v69)(v49);
  }

  if (!v30 && !*(_BYTE *)(a1 + 103))
  {
    uint64_t v33 = 0LL;
    uint64_t v34 = *(void *)(a1 + 24);
    if (!v34) {
      return v33;
    }
    goto LABEL_29;
  }

            uint64_t v35 = 0LL;
            uint64_t v36 = 0LL;
            uint64_t v16 = *(void *)v8;
            if (*(void *)v8)
            {
              uint64_t v17 = *(unsigned __int8 *)(v16 + 113);
              switch(v17)
              {
                case 186:
                  goto LABEL_25;
                case 118:
                  uint64_t v19 = *(void *)(v16 + 24);
                  if (v19)
                  {
                    xmmword_18C465400(v19);
                    int v20 = *(void *)(v16 + 24);
                    *(void *)(v16 + 664) = sub_1812F71DC;
                    *(void *)(v16 + 672) = &v35;
                    *(void *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                    if (v20) {
                      xmmword_18C465410(v20);
                    }
                  }

                  else
                  {
                    *(void *)(v16 + 664) = sub_1812F71DC;
                    *(void *)(v16 + 672) = &v35;
                    *(void *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                  }

  *a2 = v7;
  return result;
}

    ++v8;
  }

  while (v8 < v6 && !(_DWORD)v15);
  if (!(_DWORD)v15 && v9)
  {
    do
    {
      int v29 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(v1 + 336) + 72LL),  v10,  0LL);
      if (v29)
      {
        uint64_t v30 = (uint64_t *)v29;
        uint64_t v31 = *(void *)(v29 + 8);
        if (*(void *)v31)
        {
          ++*(void *)(*(void *)(v1 + 336) + 24LL);
          ++*(void *)(v31 + 56);
LABEL_52:
          int v32 = *(_WORD *)(v31 + 52);
          *(_WORD *)(v31 + 52) = v32 | 8;
          if ((v32 & 0x20) != 0)
          {
            uint64_t v33 = *(void *)(v31 + 40);
            --*(_DWORD *)(v33 + 152);
            *(void *)(v31 + 32) = *(void *)(v33 + 168);
            *(void *)(v33 + 168) = v31;
            (*(void (**)(void, void, void))(**(void **)(v33 + 72) + 144LL))( *(void *)(v33 + 72),  *(void *)(v33 + 200) * (*(_DWORD *)(v31 + 48) - 1),  *(void *)(v31 + 8));
          }

          else
          {
            sub_1812F9F44(v31);
          }

          goto LABEL_47;
        }

        uint64_t v31 = sub_1812FD158(*(void *)(v1 + 336), v10, v30);
        if (v31) {
          goto LABEL_52;
        }
      }

    uint64_t v8 = bswap32(bswap32(*(_DWORD *)(*(void *)(v4 + 40) + 136LL)) + 1);
    *(_DWORD *)(*(void *)(v4 + 8) + 24LL) = v8;
    *(_DWORD *)(*(void *)(v4 + 8) + 92LL) = v8;
    *(_DWORD *)(*(void *)(v4 + 8) + 96LL) = -1167184384;
    goto LABEL_22;
  }

  uint64_t v1 = v5[12];
  if (!(_DWORD)v1)
  {
    if (v5[46] <= v5[50]) {
      int v7 = sub_1812ABE24(v9);
    }
    else {
      int v7 = sub_1812FED50(v9);
    }
    goto LABEL_19;
  }

    *(void *)(v15 + 64) = v16;
    uint64_t v16 = *v13;
    *(void *)(a1 + 64) = *v13;
    *(void *)(a1 + 72) = 0LL;
    if (v16) {
      goto LABEL_22;
    }
LABEL_24:
    v13[1] = a1;
    if (*((_BYTE *)v13 + 48)) {
      *((_BYTE *)v13 + 49) = 1;
    }
    goto LABEL_26;
  }

  *(void *)(v16 + 72) = v15;
  int v15 = *(void *)(a1 + 72);
  if (v15) {
    goto LABEL_21;
  }
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = 0LL;
LABEL_22:
  *(void *)(v16 + 72) = a1;
LABEL_26:
  *uint64_t v13 = a1;
  if ((v12 & 8) == 0 && !v14) {
    v13[2] = a1;
  }
  return result;
}

  int v7 = (*(uint64_t (**)(void))(*(void *)a1 + 56LL))();
  if ((_DWORD)v7) {
    return v7;
  }
  int v4 = *(void *)(a1 + 344);
  if (!v4) {
    return 0LL;
  }
LABEL_2:
  int v5 = *(unsigned __int8 *)(a1 + 22);
  if (v5 < 4 || (_DWORD)v5 == 5)
  {
    if (!*(_BYTE *)(a1 + 17))
    {
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 4LL);
      if ((_DWORD)v13)
      {
        int v7 = v13;
        uint64_t v14 = *(void *)(a1 + 72);
        if (*(void *)v14)
        {
          if (!*(_BYTE *)(a1 + 17)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 64LL))(v14, v5);
          }
          if (*(_BYTE *)(a1 + 22) != 5) {
            *(_BYTE *)(a1 + 22) = v5;
          }
        }

        goto LABEL_47;
      }

      int v4 = *(void *)(a1 + 344);
    }

    *(_BYTE *)(a1 + 22) = 4;
  }

  int v7 = sub_1812B5DC4(v4, a2, *(unsigned __int8 *)(a1 + 15), *(_DWORD *)(a1 + 200), *(void *)(a1 + 328));
  *(void *)(a1 + 344) = 0LL;
  uint64_t v8 = **(void **)(a1 + 72);
  if (v8 && *(int *)v8 >= 3)
  {
    int v9 = *(void *)(a1 + 160);
    *(_BYTE *)(a1 + 27) = v9 > 0;
    if (*(_DWORD *)(a1 + 48))
    {
      uint64_t v10 = sub_1812FCAFC;
    }

    else if (v9 < 1 || *(void *)(a1 + 296))
    {
      uint64_t v10 = sub_1812FCD58;
    }

    else
    {
      uint64_t v10 = sub_1812FCB08;
    }

    *(void *)(a1 + 288) = v10;
    (*(void (**)(void))(v8 + 80))();
  }

  if ((_DWORD)v7)
  {
    if (!*(_BYTE *)(a1 + 8)) {
      goto LABEL_42;
    }
    return v7;
  }

  uint64_t v17 = *(uint64_t (**)(void))(*(void *)a1 + 48LL);
  if (!v17) {
    return 0LL;
  }
  uint64_t v18 = v17();
  int v7 = 0LL;
  if ((_DWORD)v18) {
    uint64_t v19 = (_DWORD)v18 == 5898;
  }
  else {
    uint64_t v19 = 1;
  }
  if (!v19)
  {
    int v7 = v18;
    if (!*(_BYTE *)(a1 + 8))
    {
LABEL_42:
      uint64_t v16 = *(void *)(a1 + 72);
      if (*(void *)v16)
      {
        if (!*(_BYTE *)(a1 + 17)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 64LL))(v16, 1LL);
        }
        if (*(_BYTE *)(a1 + 22) != 5) {
          *(_BYTE *)(a1 + 22) = 1;
        }
      }

    if (*a2) {
      sub_1812F20DC(a1, *a2);
    }
    *a2 = v18;
LABEL_24:
    sqlite3_finalize(pStmt);
  }

  return v10;
}

      *(_DWORD *)(a1 + 72) = v7;
      *(_DWORD *)(result + 4LL * a3) = *(_DWORD *)(a2 + 144);
      return result;
    }

    uint64_t result = (uint64_t)sub_1812F20DC((void *)v8, v9);
    *(void *)(a1 + 80) = 0LL;
  }

  else
  {
    uint64_t result = sub_1812F2264(*(void *)a1, 4LL * v7);
    *(void *)(a1 + 80) = result;
    if (result)
    {
      if (v6 <= -90) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }

  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

  if (a3)
  {
    *a3 = v36;
    *a4 = v35;
    *a5 = v34;
  }

  return result;
}

  uint64_t v18 = (int)v5[7];
  if ((int)v18 > v8)
  {
    uint64_t v19 = *((void *)v5 + 5);
    int v20 = *((void *)v5 + 6);
    uint64_t v21 = v8;
    BOOL v22 = v18 - v8;
    if (v22 < 6) {
      goto LABEL_31;
    }
    uint64_t v23 = 8LL * v8;
    uint64_t v24 = v20 + v23;
    uint64_t v25 = v19 + v23;
    if (v24 < v19 + 8 * v18 && v25 < v20 + 8 * v18) {
      goto LABEL_31;
    }
    uint64_t v27 = 8LL * v8 + 16;
    uint64_t v28 = (int64x2_t *)(v20 + v27);
    int v29 = (int64x2_t *)(v19 + v27);
    uint64_t v30 = vdupq_n_s64(1uLL);
    uint64_t v31 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int v32 = vaddq_s64(*v28, v30);
      v28[-1] = vaddq_s64(v28[-1], v30);
      *uint64_t v28 = v32;
      v29[-1] = v30;
      _OWORD *v29 = v30;
      v28 += 2;
      v29 += 2;
      v31 -= 4LL;
    }

    while (v31);
    uint64_t v21 = v8 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      uint64_t v33 = (void *)(v20 + 8 * v21);
      uint64_t v34 = (void *)(v19 + 8 * v21);
      uint64_t v35 = v18 - v21;
      do
      {
        ++*v33++;
        *v34++ = 1LL;
        --v35;
      }

      while (v35);
    }
  }

  v11(v12, v6);
  if (!a1)
  {
    int v15 = 97397;
    goto LABEL_25;
  }

  uint64_t v17 = v16;
  uint64_t v18 = *a1;
  if ((*(_WORD *)(v18 + 20) & 0x9000) != 0) {
    sub_181303888((int *)v18);
  }
  else {
    *(_WORD *)(v18 + 20) = 1;
  }
  *(void *)uint64_t v18 = v17;
  *(_WORD *)(v18 + 20) = 8;
}

  uint64_t v12 = v1[20];
  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_27;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
  --qword_18C468B10;
  off_18C4653A8(v12);
  uint64_t v12 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v13 = &xmmword_18C465410;
LABEL_27:
    (*v13)(v12);
  }

  a1[5] = 0LL;
  int v9 = a1[8];
  if (v9)
  {
    uint64_t v10 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_27:
      (*v10)(v9);
      goto LABEL_28;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
    --qword_18C468B10;
    off_18C4653A8(v9);
    int v9 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v10 = &xmmword_18C465410;
      goto LABEL_27;
    }
  }

    v12[v17] = 0;
    *a4 = 1;
    if (__s)
    {
      uint64_t result = &__s[(int)v19];
      *a3 = v12;
      return result;
    }
  }

  uint64_t v21 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
    --qword_18C468B10;
    off_18C4653A8(v12);
    uint64_t v12 = (unsigned __int8 *)xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      return 0LL;
    }
    uint64_t v21 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
  }

  (*v21)(v12);
  return 0LL;
}

  uint64_t result = 0LL;
  *(void *)(a2 + 24) = v4;
  return result;
}

  if ((*(_BYTE *)(a5 + 8) & 2) != 0)
  {
    int v20 = sub_181396534;
  }

  else if (*(_DWORD *)(*(void *)v9 + 92LL) == 1)
  {
    int v20 = sub_1813965E8;
  }

  else
  {
    int v20 = sub_1813969F4;
  }

  *(void *)(a5 + 56) = v20;
  return result;
}

  *(_DWORD *)(a1 + 80) &= ~0x40u;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_22:
  if (!*(_DWORD *)(v8 + 92))
  {
    uint64_t v23 = v9 + 4LL * a2;
    if (a2) {
      uint64_t v24 = *(_DWORD *)(v23 + 24);
    }
    else {
      uint64_t v24 = 0;
    }
    *a4 = *(_DWORD *)(v23 + 28) - v24;
    *a3 = *(void *)(v9 + 16) + v24;
    return v10;
  }

      --*v4;
      *(_DWORD *)char v6 = 1;
    }

    *a2 = (int *)v6;
    goto LABEL_23;
  }

          if (v7 != 1 || *(_DWORD *)(*(void *)&a2[v6 + 10] + 32LL)) {
            goto LABEL_23;
          }
          return 0LL;
        }

        if (v8 == v7 && a2[v6 + 8] == v8)
        {
          if (v2 != 1) {
            goto LABEL_23;
          }
          goto LABEL_21;
        }
      }

      v6 += 4LL;
    }

    while (4 * v5 != v6);
  }

  if (*(_DWORD *)(a1 + 60)) {
    return 0LL;
  }
  if (!sqlite3_initialize())
  {
    int v11 = (char *)sub_18126F0AC(16LL * ((int)v5 + 1) + 48);
    if (v11)
    {
      uint64_t v12 = v11;
      bzero(v11, 16LL * ((int)v5 + 1) + 48);
      uint64_t v13 = v3[7];
      if (v13 < 63) {
        uint64_t v14 = v13 + 1;
      }
      else {
        uint64_t v14 = 64;
      }
      *((_DWORD *)v12 + 7) = v14;
      *(_DWORD *)uint64_t v12 = 1;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v3 + 2);
      int v15 = v14 - 1LL;
      if (!*(_DWORD *)(a1 + 60))
      {
        if (!sqlite3_initialize())
        {
          uint64_t v17 = (void *)sub_18126F0AC(56LL * v2);
          if (v17)
          {
            uint64_t v18 = v17;
            bzero(v17, 56LL * v2);
            uint64_t v19 = &v12[16 * v15];
            *((void *)v19 + 5) = v18;
            int v20 = v19 + 40;
            uint64_t v21 = v3[7];
            if ((int)v21 >= 1)
            {
              BOOL v22 = 0;
              do
              {
                uint64_t v24 = &v3[4 * (v21 - 1)];
                int v26 = v24[9];
                uint64_t v25 = v24 + 9;
                if (v26 >= 1)
                {
                  uint64_t v27 = 0LL;
                  uint64_t v28 = 0LL;
                  do
                  {
                    int v29 = *v20 + 56LL * v22 + v27;
                    uint64_t v30 = (__int128 *)(*(void *)&v3[4 * (v21 - 1) + 10] + v27);
                    uint64_t v31 = *v30;
                    int v32 = v30[1];
                    uint64_t v33 = v30[2];
                    *(void *)(v29 + 48) = *((void *)v30 + 6);
                    *(_OWORD *)(v29 + 16) = v32;
                    *(_OWORD *)(v29 + 32) = v33;
                    *(_OWORD *)int v29 = v31;
                    ++v28;
                    v27 += 56LL;
                  }

                  while (v28 < *v25);
                  v22 += v28;
                }
              }

              while (v21-- >= 2);
            }

            *(_DWORD *)&v12[16 * v15 + 36] = v2;
            *((_DWORD *)v12 + 6) = v2;
            return v12;
          }
        }

        if (v2 >= 1) {
          *(_DWORD *)(a1 + 60) = 7;
        }
      }

      *(void *)&v12[16 * v15 + 40] = 0LL;
      uint64_t v16 = (uint64_t (**)(void *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
        --qword_18C468B10;
        off_18C4653A8(v12);
        uint64_t v12 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return 0LL;
        }
        uint64_t v16 = (uint64_t (**)(void *))&xmmword_18C465410;
      }

      (*v16)(v12);
      return 0LL;
    }
  }

  int v3 = 0LL;
  *(_DWORD *)(a1 + 60) = 7;
  return (char *)v3;
}

      uint64_t result = 0LL;
LABEL_22:
      if ((_DWORD)result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

    v20 += 2;
    ++a5;
    v18 += 24LL;
    if (v19 == v18) {
      goto LABEL_10;
    }
  }

  int v26 = *a5;
  if (*a5)
  {
    if ((*((_WORD *)v26 + 10) & 0xFBF) != 0xA01) {
      goto LABEL_102;
    }
    if (*((_BYTE *)v26 + 23) != 112) {
      goto LABEL_102;
    }
    uint64_t v27 = (unsigned int *)*((void *)v26 + 1);
    if (!v27) {
      goto LABEL_102;
    }
    uint64_t v28 = *v27;
    if (sqlite3_initialize()) {
      goto LABEL_95;
    }
    int v29 = (_OWORD *)sub_18126F0AC(v28 + 112);
    if (!v29) {
      goto LABEL_95;
    }
    uint64_t v30 = v29;
    v29[5] = 0u;
    v29[6] = 0u;
    v29[3] = 0u;
    v29[4] = 0u;
    v29[1] = 0u;
    v29[2] = 0u;
    _OWORD *v29 = 0u;
    memcpy(v29 + 7, v27, *v27);
    *(void *)uint64_t v30 = *((void *)v30 + 18);
    *((_DWORD *)v30 + 2) = *((_DWORD *)v30 + 38);
    *((void *)v30 + 2) = (char *)v30 + 168;
    *((void *)v30 + 13) = *((void *)v30 + 20);
    uint64_t v31 = *((void *)v30 + 15);
    if (!v31)
    {
      v23[1] = 71;
      uint64_t v31 = *((void *)v30 + 16);
    }

    uint64_t v21 = v22 + v18;
    *(void *)(v21 + 8) = v31;
    *(void *)(v21 + 16) = v30;
    *((_DWORD *)v30 + 14) = *(unsigned __int8 *)(v10 + 37);
    *((void *)v30 + 6) = a1 + 128;
    *((_DWORD *)v30 + 16) = *(_DWORD *)(v10 + 44) + 1;
    goto LABEL_21;
  }

  sub_1812CF36C(97118);
LABEL_102:
  int v15 = 1LL;
LABEL_93:
  sub_1813AFFD4(v10, v55);
  sub_1813AFB8C(v10);
  return v15;
}

  sqlite3_str_appendf(v22, ");");
  int v32 = sqlite3_str_finish(v22);
  uint64_t v33 = v90;
  if (!v32)
  {
    uint64_t v36 = 7;
    goto LABEL_48;
  }

  uint64_t v34 = v32;
  if (v28)
  {
    uint64_t v35 = sqlite3_mprintf("%s", "Auxiliary rtree columns must be last");
    uint64_t v36 = 1;
    goto LABEL_27;
  }

  uint64_t v36 = sqlite3_declare_vtab(v90, v32);
  if (v36)
  {
    uint64_t v37 = sqlite3_errmsg(v90);
    uint64_t v35 = sqlite3_mprintf("%s", v37);
LABEL_27:
    void *v7 = v35;
  }

  uint64_t v38 = (uint64_t (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v34);
    --qword_18C468B10;
    off_18C4653A8(v34);
    uint64_t v34 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v38 = (uint64_t (**)(char *))&xmmword_18C465410;
      goto LABEL_33;
    }
  }

  else
  {
LABEL_33:
    (*v38)(v34);
  }

  if (!v36)
  {
    int v39 = *(unsigned __int8 *)(v21 + 37);
    *(_BYTE *)(v21 + 36) = *(_BYTE *)(v21 + 37) >> 1;
    if (v39 < 2)
    {
      uint64_t v40 = 2LL;
      goto LABEL_46;
    }

    if (v39 > 0xA)
    {
      uint64_t v40 = 3LL;
      goto LABEL_46;
    }

    if ((v39 & 1) != 0)
    {
      uint64_t v40 = 1LL;
LABEL_46:
      uint64_t v45 = sqlite3_mprintf("%s", *((const char **)&unk_189B6F560 + v40));
      uint64_t v36 = 0;
      goto LABEL_47;
    }

    *(_BYTE *)(v21 + 39) = 4 * v39 + 8;
    if (v88)
    {
      int v42 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.page_size", *(void *)(v21 + 48));
      if (v42)
      {
        pStmt[0] = 0LL;
        uint64_t v43 = sub_18126DFE0((uint64_t)v90, v42, 0xFFFFFFFFLL, 128LL, 0LL, pStmt, 0LL, v41);
        if (!v43)
        {
          if (sqlite3_step(pStmt[0]) == 100) {
            uint64_t v44 = sqlite3_column_int(pStmt[0], 0) - 64;
          }
          else {
            uint64_t v44 = -64;
          }
          uint64_t v36 = sqlite3_finalize(pStmt[0]);
          if (!v36)
          {
            uint64_t v52 = 51 * *(unsigned __int8 *)(v21 + 39) + 4;
            if (v52 >= v44) {
              uint64_t v52 = v44;
            }
            *(_DWORD *)(v21 + 32) = v52;
LABEL_61:
            unsigned int v49 = (void (**)(unsigned __int8 *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v42);
              --qword_18C468B10;
              off_18C4653A8(v42);
              int v42 = (unsigned __int8 *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                unsigned int v49 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
                goto LABEL_66;
              }
            }

            else
            {
LABEL_66:
              (*v49)(v42);
            }

            if (!v36)
            {
              int v50 = *(void *)(a4 + 8);
              int v86 = *(void *)(a4 + 16);
              *(void *)(v21 + 24) = v90;
              if (!v88) {
                goto LABEL_95;
              }
              if (sqlite3_initialize() || (int v53 = sub_18126F0AC(32LL)) == 0)
              {
                uint64_t v51 = (sqlite3_str *)&unk_18C54FA08;
              }

              else
              {
                uint64_t v51 = (sqlite3_str *)v53;
                if (v90) {
                  uint64_t v54 = *((_DWORD *)v90 + 34);
                }
                else {
                  uint64_t v54 = 2147483645;
                }
                *(void *)int v53 = 0LL;
                *(void *)(v53 + 8) = 0LL;
                *(_DWORD *)(v53 + 16) = 0;
                *(_DWORD *)(v53 + 20) = v54;
                *(_DWORD *)(v53 + 24) = 0;
                *(_WORD *)(v53 + 28) = 0;
              }

              int v55 = v50;
              sqlite3_str_appendf(v51, "CREATE TABLE %w.%w_rowid(rowid INTEGER PRIMARY KEY,nodeno", v50, v86);
              if (*(_BYTE *)(v21 + 41))
              {
                uint64_t v56 = 0;
                do
                  sqlite3_str_appendf(v51, ",a%d", v56++);
                while (v56 < *(unsigned __int8 *)(v21 + 41));
              }

              int v50 = v55;
              sqlite3_str_appendf(v51, ");CREATE TABLE %w.%w_node(nodeno INTEGER PRIMARY KEY,data);", v55, v86);
              sqlite3_str_appendf( v51,  "CREATE TABLE %w.%w_parent(nodeno INTEGER PRIMARY KEY,parentnode);",
                v55,
                v86);
              sqlite3_str_appendf( v51,  "INSERT INTO %w.%w_nodeVALUES(1,zeroblob(%d))",  v55,  v86,  *(unsigned int *)(v21 + 32));
              BOOL v57 = sqlite3_str_finish(v51);
              if (!v57) {
                goto LABEL_157;
              }
              uint64_t v58 = v57;
              uint64_t v36 = sqlite3_exec(v90, v57, 0LL, 0LL, 0LL);
              int v59 = (uint64_t (**)(char *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_93;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v58);
              --qword_18C468B10;
              off_18C4653A8(v58);
              uint64_t v58 = (char *)xmmword_18C468B70;
              int v50 = v55;
              if ((void)xmmword_18C468B70)
              {
                int v59 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_93:
                (*v59)(v58);
              }

              int v7 = v89;
              if (v36) {
                goto LABEL_158;
              }
LABEL_95:
              pStmt[0] = (sqlite3_stmt *)(v21 + 120);
              pStmt[1] = (sqlite3_stmt *)(v21 + 128);
              pStmt[2] = (sqlite3_stmt *)(v21 + 136);
              pStmt[3] = (sqlite3_stmt *)(v21 + 144);
              pStmt[4] = (sqlite3_stmt *)(v21 + 152);
              pStmt[5] = (sqlite3_stmt *)(v21 + 160);
              pStmt[6] = (sqlite3_stmt *)(v21 + 168);
              pStmt[7] = (sqlite3_stmt *)(v21 + 176);
              int v60 = sqlite3_table_column_metadata( v90,  *(const char **)(v21 + 48),  "sqlite_stat1",  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
              if (v60)
              {
                uint64_t v36 = v60;
                *(void *)(v21 + 72) = 0x100000LL;
                if (v60 != 1) {
                  goto LABEL_130;
                }
LABEL_117:
                uint64_t v68 = 0LL;
                while (2)
                {
                  if (v68 != 3
                    || (uint64_t v69 = "INSERT INTO%w.%w_rowid(rowid,nodeno)VALUES(?1,?2)ON CONFLICT(rowid)DO UPDATE SET n"
                              "odeno=excluded.nodeno",
                        !*(_BYTE *)(v21 + 41)))
                  {
                    uint64_t v69 = off_189B6F598[v68];
                  }

                  uint64_t v70 = (unsigned __int8 *)sqlite3_mprintf(v69, v50, v86);
                  if (!v70) {
                    goto LABEL_102;
                  }
                  int v72 = v70;
                  uint64_t v36 = sub_18126DFE0((uint64_t)v90, v70, 0xFFFFFFFFLL, 133LL, 0LL, pStmt[v68], 0LL, v71);
                  int v73 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v72);
                    --qword_18C468B10;
                    off_18C4653A8(v72);
                    int v72 = (unsigned __int8 *)xmmword_18C468B70;
                    if ((void)xmmword_18C468B70)
                    {
                      int v73 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
                      goto LABEL_127;
                    }
                  }

                  else
                  {
LABEL_127:
                    (*v73)(v72);
                  }

                  if (v68 > 6) {
                    goto LABEL_103;
                  }
                  ++v68;
                  int v7 = v89;
                  if (v36) {
                    goto LABEL_130;
                  }
                  continue;
                }
              }

              uint64_t v61 = (unsigned __int8 *)sqlite3_mprintf( "SELECT stat FROM %Q.sqlite_stat1 WHERE tbl = '%q_rowid'",  *(void *)(v21 + 48),  *(void *)(v21 + 56));
              if (v61)
              {
                int v63 = v61;
                int v64 = sub_18126DFE0((uint64_t)v90, v61, 0xFFFFFFFFLL, 128LL, 0LL, &v91, 0LL, v62);
                if (v64)
                {
                  uint64_t v36 = v64;
                  uint64_t v65 = 100LL;
                }

                else
                {
                  if (sqlite3_step(v91) == 100) {
                    uint64_t v65 = sqlite3_column_int64(v91, 0);
                  }
                  else {
                    uint64_t v65 = 100LL;
                  }
                  uint64_t v36 = sqlite3_finalize(v91);
                }

                uint64_t v66 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v63);
                  --qword_18C468B10;
                  off_18C4653A8(v63);
                  int v63 = (unsigned __int8 *)xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    uint64_t v66 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
                    goto LABEL_113;
                  }
                }

                else
                {
LABEL_113:
                  (*v66)(v63);
                }

                uint64_t v67 = 100LL;
                if (v65 > 100) {
                  uint64_t v67 = v65;
                }
                *(void *)(v21 + 72) = v67;
                int v7 = v89;
                if (!v36) {
                  goto LABEL_117;
                }
              }

              else
              {
                *(void *)(v21 + 72) = 100LL;
LABEL_102:
                uint64_t v36 = 7;
LABEL_103:
                int v7 = v89;
              }