LABEL_30:
    v16 = v3[12];
    v17 = (void *)v3[15];
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))a1[3];
      if ((char *)v18 != (char *)nullsub_8)
      {
        if (*a1)
        {
        }

        else if (v18 != sub_18131C81C)
        {
          goto LABEL_40;
        }
      }
    }

                    v35 = 0LL;
LABEL_31:
                    v31 |= v35;
                    if (++v30 >= v29) {
                      goto LABEL_71;
                    }
                  }
                }
              }

              v31 = 0LL;
            }

    v38 = sub_18131A8A4((uint64_t)a1, v165, &v171);
    goto LABEL_37;
  }

  for (i = 0LL; ; ++i)
  {
    v29 = v21[i];
    v30 = aNow[i];
    if ((_DWORD)v29 == (_DWORD)v30) {
      break;
    }
    if (byte_1813C6343[v29] != byte_1813C6343[v30]) {
      goto LABEL_53;
    }
LABEL_33:
    ;
  }

  if (v21[i]) {
    goto LABEL_33;
  }
  if (sub_181356110((uint64_t)a1))
  {
    v31 = a1[3];
    v34 = *(void *)(v31 + 72);
    v33 = (uint64_t *)(v31 + 72);
    v32 = v34;
    if (!v34)
    {
      v35 = **(void **)(*a1 + 24LL);
      if (*(int *)v35 >= 2 && (v36 = *(uint64_t (**)(void))(v35 + 136)) != 0LL)
      {
        v37 = v36();
      }

      else
      {
        v37 = (*(uint64_t (**)(uint64_t, _BYTE *))(v35 + 120))(v35, v161);
        *v33 = (uint64_t)(*(double *)v161 * 86400000.0);
      }

      if (!v37) {
        goto LABEL_87;
      }
      goto LABEL_84;
    }

          ++v36;
        }

        while (v36 < v35);
      }

      sub_18131EB5C(a1, v26, v27, v28, v29, v30, v31, v32);
      return sub_18128FF4C((void *)v9, (void *)a2);
    }
  }

  else if (!v25)
  {
    return sub_18128FF4C((void *)v9, (void *)a2);
  }

  v45 = *(void *)(v25 + 96);
  if (v45)
  {
    v46 = (uint64_t *)(*(void *)(v9 + 32) + 24LL);
    LODWORD(v47) = -1;
    do
    {
      v48 = *v46;
      v46 += 4;
      v47 = (v47 + 1);
    }

    while (v48 != v45);
  }

  else
  {
    v47 = 4294934528LL;
  }

  if ((_DWORD)v47 == 1) {
    v49 = "sqlite_temp_master";
  }
  else {
    v49 = "sqlite_master";
  }
  v50 = *(void *)(*(void *)(v9 + 32) + 32LL * (int)v47);
  v51 = *a1;
  v52 = *(uint64_t (**)(void, uint64_t, const char *, void, void, void))(*a1 + 528LL);
  if (v52 && !*(_BYTE *)(v51 + 197) && !*((_BYTE *)a1 + 302))
  {
    v67 = v52(*(void *)(v51 + 536), 9LL, v49, 0LL, *(void *)(*(void *)(v9 + 32) + 32LL * (int)v47), a1[46]);
    if (v67 == 1) {
      goto LABEL_99;
    }
    if ((v67 & 0xFFFFFFFD) != 0) {
      goto LABEL_103;
    }
    if (v67) {
      return sub_18128FF4C((void *)v9, (void *)a2);
    }
  }

  if ((_DWORD)a3)
  {
    v53 = 0LL;
    v54 = (_DWORD)v47 == 1;
    v55 = 17;
    v56 = 15;
    goto LABEL_63;
  }

  if (*(_BYTE *)(v33 + 63) != 1)
  {
    v53 = 0LL;
    v54 = (_DWORD)v47 == 1;
    v55 = 11;
    v56 = 13;
LABEL_63:
    if (v54) {
      v61 = v56;
    }
    else {
      v61 = v55;
    }
    goto LABEL_66;
  }

  v57 = (uint64_t **)(v33 + 80);
  do
  {
    v58 = *v57;
    v59 = *v57;
    v60 = *v59;
    v57 = (uint64_t **)(v59 + 5);
  }

  while (v60 != v9);
  v53 = *(void *)(v58[1] + 8);
  v61 = 30LL;
LABEL_66:
  v62 = *(unsigned __int8 **)v33;
  v63 = *a1;
  v64 = *(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void))(*a1 + 528LL);
  if (!v64) {
    goto LABEL_71;
  }
  if (!*(_BYTE *)(v63 + 197) && !*((_BYTE *)a1 + 302))
  {
    v69 = v64(*(void *)(v63 + 536), v61, v62, v53, v50, a1[46]);
    if (v69 != 1)
    {
      if ((v69 & 0xFFFFFFFD) != 0) {
        goto LABEL_103;
      }
      if (v69) {
        return sub_18128FF4C((void *)v9, (void *)a2);
      }
      v62 = *(unsigned __int8 **)v33;
      v63 = *a1;
      v64 = *(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void))(*a1 + 528LL);
      if (!v64) {
        goto LABEL_71;
      }
      goto LABEL_69;
    }

        v14 = 0LL;
        v13 = &qword_18C468B68;
        goto LABEL_31;
      }

      v8 = v11 + 2;
    }

    *v8 = qword_18C465F88;
    v9 = qword_18C468B68;
    goto LABEL_28;
  }

  return result;
}

      v18 = *(void *)(v12 + 24);
      if ((*(_WORD *)(v12 + 52) & 2) != 0)
      {
        v19 = *(void *)(v12 + 72);
        if (*(void *)(v18 + 16) == v12) {
          *(void *)(v18 + 16) = v19;
        }
        v20 = *(void *)(v12 + 64);
        if (v20)
        {
          *(void *)(v20 + 72) = v19;
          v19 = *(void *)(v12 + 72);
          if (!v19)
          {
            *(void *)v18 = v20;
            goto LABEL_54;
          }
        }

        else
        {
          *(void *)(v18 + 8) = v19;
          if (!v19)
          {
            *(void *)v18 = 0LL;
            *(_BYTE *)(v18 + 49) = 2;
            goto LABEL_54;
          }
        }

        *(void *)(v19 + 64) = v20;
      }

  sub_18128FF4C(v9, (void *)a2);
  return sub_1812F20DC(v9, v29);
}

    DWORD1(v308) = v27;
    goto LABEL_31;
  }

  if (!*(_DWORD *)(v12 + 132))
  {
    v22 = v12;
    while (1)
    {
      v23 = *(char **)(*(void *)(v22 + 80) + 56LL);
      v24 = v23 == "lag" || v23 == "lead";
      v25 = v24 || v23 == "nth_value";
      if (v25 || v23 == "first_value") {
        break;
      }
      v22 = *(void *)(v22 + 64);
      if (!v22)
      {
        if (*(_BYTE *)(v12 + 34) != 88) {
          goto LABEL_29;
        }
        if (*(_BYTE *)(v12 + 32) != 89 && sub_18133A0C4((uint64_t *)v11, *(unsigned __int8 **)(v12 + 48)))
        {
          v27 = 3;
          goto LABEL_30;
        }

        break;
      }
    }
  }

            v21 = 0LL;
LABEL_31:
            v20 |= v21;
            if (++v19 >= v18) {
              goto LABEL_48;
            }
          }
        }
      }

      v20 = 0LL;
LABEL_48:
      v28 = (int *)v77[9];
      if (v28)
      {
        v29 = *v28;
        if (*v28 >= 1)
        {
          v30 = 0LL;
          v31 = 0LL;
          while (1)
          {
            v33 = *(unsigned __int8 **)&v28[6 * v30 + 2];
            if (v33)
            {
              if (*v33 == 167 && (*((_DWORD *)v33 + 1) & 0x20) == 0)
              {
                v35 = *((_DWORD *)v33 + 11);
                if (a1[2] == v35)
                {
                  v32 = 1LL;
                  goto LABEL_53;
                }

                v36 = a1[1];
                if ((int)v36 >= 2)
                {
                  v37 = 0LL;
                  v38 = v36 - 1;
                  while (v4[v37] != v35)
                  {
                    if (v38 == ++v37) {
                      goto LABEL_52;
                    }
                  }

                  v32 = 1LL << (v37 + 1);
                  goto LABEL_53;
                }
              }

              else if ((*((_DWORD *)v33 + 1) & 0x810000) == 0)
              {
                v32 = sub_181332EB0(a1, v33);
                v29 = *v28;
                goto LABEL_53;
              }
            }

  v14[1] = v17;
  v14[2] = 0LL;
  v18 = a3[3];
  if (!v18)
  {
    sub_1812CF36C(89717);
LABEL_34:
    LODWORD(v20) = 0;
    goto LABEL_35;
  }

  v19 = *(_WORD *)(v18 + 20);
  if ((v19 & 0x24) != 0)
  {
    v20 = *(double *)v18;
    goto LABEL_35;
  }

  if ((v19 & 8) != 0)
  {
    v24 = *(double *)v18;
    if (*(double *)v18 >= -9.22337204e18)
    {
      if (v24 <= 9.22337204e18) {
        *(void *)&v20 = (uint64_t)v24;
      }
      else {
        LODWORD(v20) = -1;
      }
    }

    else
    {
      LODWORD(v20) = 0;
    }

    goto LABEL_35;
  }

  if ((v19 & 0x12) == 0 || !*(void *)(v18 + 8)) {
    goto LABEL_34;
  }
  LODWORD(v20) = sub_181303DF0(v18);
LABEL_35:
  *((_DWORD *)v14 + 6) = LODWORD(v20);
  *((_DWORD *)v14 + 7) = LODWORD(v7);
  *((_DWORD *)v14 + 8) = LODWORD(v11);
  *((_BYTE *)v14 + 36) = 0;
  v14[5] = &v14[SLODWORD(v7) + 7];
  v14[6] = v14 + 7;
  if (a1) {
    sub_1812D7A8C((uint64_t)a1, (char *)v14, 56, 0, (uint64_t (*)(uint64_t))sub_181349B38);
  }
  else {
    sub_1812CF36C(97366);
  }
}

  v16 = *(unsigned __int16 *)(v15 + 20);
  if ((~v16 & 0x202) != 0 || *(_BYTE *)(v15 + 22) != 1)
  {
    if ((v16 & 1) == 0)
    {
      v17 = (char *)sub_181303998((int *)v15, 1);
      result = a3[6];
      if (result) {
        goto LABEL_39;
      }
      goto LABEL_36;
    }

    *(void *)(a1 + 8) = a1 + 34;
    *(_OWORD *)(a1 + 16) = xmmword_1813CDE10;
    *(_BYTE *)(a1 + 32) = 1;
    return 7LL;
  }

  v6 = *(void *)(a1 + 8) - 8LL;
  if (!sqlite3_initialize())
  {
    v12 = sub_18127D33C(v6, v4 + 9);
    if (v12)
    {
      *(void *)(a1 + 8) = v12 + 8;
LABEL_23:
      result = 0LL;
      *(void *)(a1 + 16) = v4;
      return result;
    }
  }

  v7 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v6);
    --qword_18C468B10;
    off_18C4653A8(v6);
    v6 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_14;
    }
    v7 = (void (**)(uint64_t))&xmmword_18C465410;
  }

  (*v7)(v6);
LABEL_14:
  *(void *)(a1 + 8) = a1 + 34;
  *(_OWORD *)(a1 + 16) = xmmword_1813CDE10;
  *(_WORD *)(a1 + 32) = 257;
  return 7LL;
}

        *v3 = v11;
        return result;
      }

      v12 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    result = (char *)(*v12)(v9);
    goto LABEL_23;
  }

  return result;
}

        *((void *)v56 + v19) = 0LL;
        v20 = v60;
        v17 = v61[0];
        if (v19 == 15)
        {
          *((void *)&v58 + 1) = v60;
          v28 = (char *)v57 + 12;
LABEL_37:
          *((_DWORD *)v28 + 32) = v17;
          v8 = v51;
          goto LABEL_6;
        }

        v27 = v19 + 1;
        v18 = (char *)*((void *)v56 + ++v19);
        if (!v18)
        {
          *((void *)v56 + v27) = v60;
          v28 = (char *)v56 + 4 * v27;
          goto LABEL_37;
        }
      }

      v24 = (void (**)(char *))&xmmword_18C465410;
LABEL_22:
      (*v24)(v20);
      goto LABEL_23;
    }

    if (sqlite3_initialize())
    {
      *(void *)&v56[0] = 0LL;
      v14 = 7LL;
      goto LABEL_76;
    }

    v29 = (char *)sub_18126F0AC(v17 + 11LL);
    *(void *)&v56[0] = v29;
    LODWORD(v59[0]) = v17;
    if (!v29)
    {
      v14 = 7LL;
      v6 = v48;
      v8 = v51;
      goto LABEL_77;
    }

    v30 = v29;
    memcpy(v29, v16, v17);
    v31 = &v30[v17];
    *(void *)v31 = 0LL;
    *((_WORD *)v31 + 4) = 0;
    v8 = v51;
  }

  v14 = v15;
  if ((_DWORD)v15) {
    goto LABEL_76;
  }
  v33 = 0LL;
  v34 = 0LL;
  v35 = v49;
  v36 = a5;
  do
  {
    v37 = (char *)*((void *)v56 + v33);
    if (!v37) {
      goto LABEL_48;
    }
    if (!v34)
    {
      LODWORD(v14) = *((_DWORD *)v59 + v33);
      *((void *)v56 + v33) = 0LL;
      v34 = v37;
      goto LABEL_48;
    }

    v38 = sub_181371FE0(*(unsigned __int8 *)(a1 + 463), v37, *((_DWORD *)v59 + v33), v34, v14, &v60, v61);
    if ((_DWORD)v38)
    {
      v14 = v38;
      v47 = (void (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        v6 = v48;
        v8 = v51;
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v34);
        --qword_18C468B10;
        off_18C4653A8(v34);
        v34 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          v47 = (void (**)(char *))&xmmword_18C465410;
          goto LABEL_93;
        }
      }

      else
      {
        v6 = v48;
        v8 = v51;
LABEL_93:
        (*v47)(v34);
      }

    v16 = 0LL;
    *(void *)a2 = 0LL;
    *(_DWORD *)(a2 + 8) = 0;
    goto LABEL_107;
  }

  v7 = a4;
  v8 = *(_DWORD *)(a2 + 60);
  if (v8 < 0)
  {
    v16 = 0LL;
    *(void *)a2 = a4;
    *(_DWORD *)(a2 + 8) = a5;
    goto LABEL_107;
  }

  if (*(void *)a2)
  {
    if (v8 < a3) {
      v9 = a4;
    }
    else {
      v9 = *(char **)a2;
    }
    if (v8 < a3) {
      v10 = a5;
    }
    else {
      v10 = *(_DWORD *)(a2 + 8);
    }
    if (v8 < a3) {
      v11 = *(char **)a2;
    }
    else {
      v11 = a4;
    }
    if (v8 < a3) {
      v12 = *(_DWORD *)(a2 + 8);
    }
    else {
      v12 = a5;
    }
    if (v8 < a3) {
      v13 = a3 - v8;
    }
    else {
      v13 = v8 - a3;
    }
    v60 = v13;
    v14 = *(unsigned __int8 *)(a1 + 463);
    v15 = v9;
    if (v14)
    {
      if (sqlite3_initialize() || (v15 = (_BYTE *)sub_18126F0AC(v10 + 10LL)) == 0LL)
      {
        v16 = 7LL;
        v17 = (void (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_105;
        }
        goto LABEL_101;
      }
    }

    v61 = v10;
    v63 = v15;
    v57 = v15;
    v58 = v9;
    if (v12 < 1)
    {
      v21 = 0LL;
      v22 = 0LL;
    }

    else
    {
      v21 = (unsigned __int8 *)&v11[(int)sub_181363B00(v11, (unint64_t *)&v66)];
      v22 = v66;
    }

    v65 = (char *)v21;
    v9 = v57;
    v23 = (int)v57;
    if (v10 >= 1)
    {
      v24 = (unsigned __int8 *)&v58[(int)sub_181363B00(v58, (unint64_t *)&v66)];
      v25 = v66;
      v64 = (char *)v24;
      v23 = (int)v57;
      if (v21)
      {
        v26 = 0LL;
        v27 = v11;
        v28 = 0LL;
        v62 = (unint64_t)&v58[v61];
        v56 = v27;
        v59 = (unint64_t)&v27[v12];
        while (1)
        {
          if (v22 == v25) {
            v29 = 0;
          }
          else {
            v29 = -1;
          }
          if (v22 > v25) {
            v29 = 1;
          }
          if (v14) {
            v29 = -v29;
          }
          if (v29)
          {
            if (v29 < 0)
            {
              v47 = (char)*v21;
              if (*v21)
              {
                do
                {
                  v48 = v47 & 0xFFFFFF80;
                  v49 = (char)*++v21;
                  v47 = v49;
                }

                while (v48 | v49);
              }

              v65 = (char *)(v21 + 1);
              v50 = sub_181363B00((char *)v21 + 1, (unint64_t *)&v66);
              v21 = (unsigned __int8 *)&v65[v50];
              v65 = (char *)v21;
              v51 = v66;
              if (v14) {
                v51 = -v66;
              }
              v22 += v51;
              v24 = (unsigned __int8 *)v64;
            }

            else
            {
              v30 = (char)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30 & 0xFFFFFF80;
                  v32 = (char)*++v24;
                  v30 = v32;
                }

                while (v31 | v32);
              }

              v64 = (char *)(v24 + 1);
              v33 = sub_181363B00((char *)v24 + 1, (unint64_t *)&v66);
              v21 = (unsigned __int8 *)v65;
              v24 = (unsigned __int8 *)&v64[v33];
              v64 = (char *)v24;
              v34 = v66;
              if (v14) {
                v34 = -v66;
              }
              v25 += v34;
            }
          }

          else
          {
            v35 = v63;
            if (v14) {
              v36 = (_DWORD)v26 == 0;
            }
            else {
              v36 = 1;
            }
            if (v36) {
              v37 = v28;
            }
            else {
              v37 = v22;
            }
            if (v36) {
              v38 = v22;
            }
            else {
              v38 = v28;
            }
            v39 = v38 - v37;
            v40 = v63;
            do
            {
              v41 = v39;
              *v40++ = v39 | 0x80;
              v42 = v39 > 0x7F;
              v39 >>= 7;
            }

            while (v42);
            *(v40 - 1) = v41 & 0x7F;
            v63 = v40;
            v43 = 1LL;
            v44 = v22;
            if (!sub_181372A68(&v63, v60, 0, 1, (unsigned __int8 **)&v65, (unsigned __int8 **)&v64))
            {
              v63 = v35;
              v44 = v28;
              v43 = v26;
            }

            v45 = v65;
            if ((unint64_t)v65 >= v59)
            {
              v21 = 0LL;
            }

            else
            {
              v21 = (unsigned __int8 *)&v45[(int)sub_181363B00(v65, (unint64_t *)&v66)];
              v46 = v66;
              if (v14) {
                v46 = -v66;
              }
              v22 += v46;
            }

            v65 = (char *)v21;
            v52 = v64;
            if ((unint64_t)v64 >= v62)
            {
LABEL_90:
              v23 = (int)v63;
              v11 = v56;
              v9 = v57;
              break;
            }

            v24 = (unsigned __int8 *)&v52[(int)sub_181363B00(v64, (unint64_t *)&v66)];
            v64 = (char *)v24;
            v53 = v66;
            if (v14) {
              v53 = -v66;
            }
            v25 += v53;
            v28 = v44;
            v26 = v43;
          }

          if (!v21 || !v24) {
            goto LABEL_90;
          }
        }
      }
    }

    v10 = v23 - (_DWORD)v9;
    if (!v14)
    {
      v16 = 0LL;
      v9 = v58;
      v17 = (void (**)(char *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_105;
      }
      goto LABEL_101;
    }

    v54 = (void (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v58);
      --qword_18C468B10;
      off_18C4653A8(v58);
      v58 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_98:
        v16 = 0LL;
        v17 = (void (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_105;
        }
LABEL_101:
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
        --qword_18C468B10;
        off_18C4653A8(v11);
        v11 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_106;
        }
        v17 = (void (**)(char *))&xmmword_18C465410;
LABEL_105:
        (*v17)(v11);
LABEL_106:
        *(void *)a2 = v9;
        *(_DWORD *)(a2 + 8) = v10;
        goto LABEL_107;
      }

      v54 = (void (**)(char *))&xmmword_18C465410;
    }

    (*v54)(v58);
    goto LABEL_98;
  }

  v20 = (uint64_t (**)(char *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_37:
    (*v20)(v7);
    v16 = 0LL;
    goto LABEL_107;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  v7 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    v20 = (uint64_t (**)(char *))&xmmword_18C465410;
    goto LABEL_37;
  }

  v16 = 0LL;
LABEL_107:
  if (*(_DWORD *)(a2 + 60) < a3) {
    *(_DWORD *)(a2 + 60) = a3;
  }
  return v16;
}

  *a3 = 0;
  if (*(int *)(v6 + 24) >= 1)
  {
    v19 = 0;
    v20 = 0LL;
    v21 = *(void *)(a1 + 16);
    do
    {
      v19 += *(_DWORD *)(v21 + 4 * v20);
      *a3 = v19;
      ++v20;
    }

    while (v20 < *(int *)(v6 + 24));
  }

  return result;
}

      v32 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_35;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
      --qword_18C468B10;
      off_18C4653A8(v7);
      v7 = (_OWORD *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        v32 = &xmmword_18C465410;
LABEL_35:
        (*v32)(v7);
LABEL_36:
        v7 = 0LL;
      }

      result = 1LL;
    }

    else
    {
      result = 7LL;
    }
  }

    ;
  }

  if (byte_1813C6343[v21] == byte_1813C6343[v22]) {
    goto LABEL_30;
  }
  for (j = 0LL; ; ++j)
  {
    v25 = *(unsigned __int8 *)(v18 + j);
    v26 = aInt64_0[j];
    if ((_DWORD)v25 != (_DWORD)v26) {
      break;
    }
    if (!*(_BYTE *)(v18 + j))
    {
      v17 = 1;
      goto LABEL_71;
    }

LABEL_43:
          v21 += 26;
          v22 = __OFSUB__(v20--, 1);
        }

        while (!((v20 < 0) ^ v22 | (v20 == 0)));
      }
    }

    v27 = (void (*)(void *, void *))a1[3];
    if (v27) {
      v27(a1, v3);
    }
    result = 0LL;
    v3 = (void *)v3[10];
    if (!v3) {
      return result;
    }
  }

    v10 = *(void *)(a1 + 40);
    goto LABEL_50;
  }

  if (v7)
  {
    if (*(void *)(v9 + 512) > (unint64_t)v7)
    {
      if (*(void *)(v9 + 496) <= (unint64_t)v7)
      {
        if (a2 < 0x81)
        {
LABEL_10:
          v10 = *(void *)(a1 + 8);
          *(void *)(a1 + 40) = v7;
          goto LABEL_50;
        }
      }

      else if (*(void *)(v9 + 504) <= (unint64_t)v7 && *(unsigned __int16 *)(v9 + 438) >= (unint64_t)a2)
      {
        goto LABEL_10;
      }
    }

    v10 = sub_1812F2310(*(void *)(a1 + 24), *(void **)(a1 + 8), a2);
    if (!v10)
    {
      sub_1812F20DC((void *)v9, v7);
      v10 = 0LL;
    }
  }

  else
  {
    v10 = sub_1812F2264(*(void *)(a1 + 24), a2);
  }

  *(void *)(a1 + 40) = v10;
LABEL_50:
  v3 = 0;
  *(void *)(a1 + 8) = v10;
  if (!v10) {
    goto LABEL_28;
  }
LABEL_16:
  v12 = *(void *)(a1 + 24);
  if (!v12 || *(void *)(v12 + 520) <= v10) {
    goto LABEL_20;
  }
  if (*(void *)(v12 + 496) <= v10)
  {
    v13 = 128;
  }

  else
  {
    if (*(void *)(v12 + 504) > v10)
    {
LABEL_20:
      v13 = off_18C4653B8(v10);
      goto LABEL_21;
    }

    v13 = *(unsigned __int16 *)(v12 + 438);
  }

    ;
  }

  if (!v6) {
    return 0LL;
  }
  return result;
}

  if ((*(_DWORD *)(v1 + 24) & 0x80000000) == 0)
  {
    v10 = *(dispatch_object_s **)(v1 + 160);
    if (v10)
    {
      *(void *)(v1 + 160) = 0LL;
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
      {
        dispatch_source_cancel_and_wait();
        dispatch_release(v10);
      }
    }

    v11 = *(_DWORD *)(v1 + 24);
    if ((v11 & 0x80000000) == 0 && off_18C54FCE0(v11))
    {
      if (v2) {
        v12 = *(const char **)(v2 + 56);
      }
      else {
        v12 = 0LL;
      }
      v13 = *__error();
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v13, __strerrbuf, 0x4FuLL);
      v14 = &byte_1813CEAEE;
      if (v12) {
        v14 = v12;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 46485, v13, "close", v14, __strerrbuf);
    }

    *(_DWORD *)(v1 + 24) = -1;
  }

  *(void *)(*(void *)v1 + 56LL) = 0LL;
  v15 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v15)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  result = off_18C4653A8(v1);
  v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    v15 = &xmmword_18C465410;
    return (*v15)(v1);
  }

  return result;
}

    v26 = a4;
    --*(void *)(v30 + 24);
    v27 = 1;
    xmmword_18C465468(*(void *)(v30 + 72), *(void *)v24, 1LL);
    goto LABEL_44;
  }

  v53 = a3;
  v26 = a4;
  v27 = 0;
  v24 = 0LL;
LABEL_44:
  v33 = *(unsigned int *)(v16 + 48);
  sub_181300D34(v16, a5);
  v34 = *(_WORD *)(v16 + 52);
  if ((v34 & 0x11) != 0)
  {
    *(_WORD *)(v16 + 52) = v34 & 0xFFEF;
    if ((v34 & 1) != 0)
    {
      *(_WORD *)(v16 + 52) = v34 & 0xFFEF ^ 3;
      v35 = *(uint64_t **)(v16 + 24);
      *(void *)(v16 + 72) = 0LL;
      v36 = *v35;
      *(void *)(v16 + 64) = *v35;
      if (v36)
      {
        *(void *)(v36 + 72) = v16;
      }

      else
      {
        v35[1] = v16;
        if (*((_BYTE *)v35 + 48)) {
          *((_BYTE *)v35 + 49) = 1;
        }
      }

      *v35 = v16;
      if ((v34 & 8) == 0 && !v35[2]) {
        v35[2] = v16;
      }
    }
  }

  v37 = v27 ^ 1;
  if (!*(_BYTE *)(v15 + 16)) {
    v37 = 1;
  }
  if ((v37 & 1) == 0)
  {
    sub_181300D34(v24, v33);
    if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
    {
      v39 = *(void *)(v24 + 40);
      --*(_DWORD *)(v39 + 152);
      *(void *)(v24 + 32) = *(void *)(v39 + 168);
      *(void *)(v39 + 168) = v24;
      (*(void (**)(void, void, void))(**(void **)(v39 + 72) + 144LL))( *(void *)(v39 + 72),  *(void *)(v39 + 200) * (*(_DWORD *)(v24 + 48) - 1),  *(void *)(v24 + 8));
      if (!v54) {
        goto LABEL_74;
      }
      goto LABEL_59;
    }

    sub_1812F9F44(v24);
  }

  if (!v54) {
    goto LABEL_74;
  }
LABEL_59:
  v38 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v15 + 288))(v15, v54, &v56, 0LL);
  if ((_DWORD)v38)
  {
    v18 = v38;
    if (v54 <= *(_DWORD *)(v15 + 36)) {
      sub_181300F30(*(void **)(v15 + 64), v54, *(void **)(v15 + 328));
    }
    return v18;
  }

  v40 = v56;
  v41 = *(_WORD *)(v56 + 52);
  LOBYTE(v42) = v41 | 8;
  *(_WORD *)(v56 + 52) = v41 | 8;
  if ((v41 & 0x11) != 0)
  {
    v42 = v41 & 0xFFE7 | 8;
    *(_WORD *)(v40 + 52) = v42;
    if ((v41 & 1) != 0)
    {
      *(_WORD *)(v40 + 52) = v42 ^ 3;
      v43 = *(uint64_t **)(v40 + 24);
      *(void *)(v40 + 72) = 0LL;
      v44 = *v43;
      *(void *)(v40 + 64) = *v43;
      if (v44)
      {
        *(void *)(v44 + 72) = v40;
      }

      else
      {
        v43[1] = v40;
        if (*((_BYTE *)v43 + 48)) {
          *((_BYTE *)v43 + 49) = 1;
        }
      }

      *v43 = v40;
      v40 = v56;
      v42 = *(_WORD *)(v56 + 52);
    }
  }

  if ((v42 & 0x20) != 0)
  {
    v45 = *(void *)(v40 + 40);
    --*(_DWORD *)(v45 + 152);
    *(void *)(v40 + 32) = *(void *)(v45 + 168);
    *(void *)(v45 + 168) = v40;
    (*(void (**)(void, void, void))(**(void **)(v45 + 72) + 144LL))( *(void *)(v45 + 72),  *(void *)(v45 + 200) * (*(_DWORD *)(v40 + 48) - 1),  *(void *)(v40 + 8));
  }

  else
  {
    sub_1812F9F44(v40);
  }

    if ((*(_BYTE *)(v10 + 32) & 4) != 0 && !*(void *)(v10 + 16))
    {
      result = (void **)sub_1812B54BC(v9, v16);
    }

    else if (*(_BYTE *)(v9 + 17))
    {
      v22 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v22;
      if (!v22) {
        result = (void **)sub_1812FDEFC(v9);
      }
    }

    v8[1] = 0LL;
    return result;
  }

  if (v3 == 2)
  {
    v14 = (uint64_t **)*((void *)a2 + 5);
    v15 = **v14;
    --*((_DWORD *)*v14 + 2);
    return (void **)(*(uint64_t (**)(void))(v15 + 56))();
  }

  else if (v3 == 1)
  {
    v4 = (void *)*((void *)a2 + 5);
    if (v4)
    {
      v5 = *result;
      sub_181302058(*result, *((void *)a2 + 5));
      v6 = v4[8];
      if (v6)
      {
        v7 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v6);
          --qword_18C468B10;
          off_18C4653A8(v6);
          v6 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_13;
          }
          v7 = &xmmword_18C465410;
        }

        (*v7)(v6);
      }

  v38 = v14;
  v54 = sub_18129F858(v14, *(int **)(a2 + 64), 0);
  if (*(__int16 *)(a3 + 54) >= 1)
  {
    v42 = 0LL;
    v43 = 9LL;
    do
    {
      if (*(_BYTE *)(*(void *)(a3 + 8) + v43) == 69)
      {
        v45 = v42 + *(unsigned int *)(a2 + 72);
        v46 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) > v46)
        {
          *(_DWORD *)(v13 + 144) = v46 + 1;
          v44 = *(void *)(v13 + 136) + 40LL * v46;
          *(_DWORD *)v44 = 87;
          *(_DWORD *)(v44 + 4) = v45;
          *(_OWORD *)(v44 + 8) = 0u;
          *(_OWORD *)(v44 + 24) = 0u;
        }

        else
        {
          sub_18131044C(v13, 87LL, v45, 0LL, 0LL, v39, v40, v41);
        }
      }

      ++v42;
      v43 += 16LL;
    }

    while (v42 < *(__int16 *)(a3 + 54));
  }

  v47 = (unsigned int *)sub_18129CD4C(v38, *(void **)(v16 + 16), 0);
  v48 = *(unsigned __int8 **)(v16 + 24);
  if (v48) {
    v49 = sub_18129C928(v38, v48, 0LL, 0LL);
  }
  else {
    v49 = 0LL;
  }
  return sub_1812B9CA8(v12, (uint64_t)v54, v47, (uint64_t)v49, 2LL, 0LL, 0LL, v16);
}

          *((void *)v7 + 5) = 0LL;
          return result;
        }

        if ((v10 & 1) == 0)
        {
          v11 = sub_181303970(v8, 1);
          goto LABEL_25;
        }

      if ((v4 & 0x10) != 0)
      {
        v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x400) != 0) {
          v14 += *(_DWORD *)a2;
        }
        if ((v4 & 0x800) == 0) {
          return (void *)sub_18135B6B0((uint64_t)v2, v5, v14);
        }
      }

      else if ((v4 & 1) != 0)
      {
        v14 = 0;
        if ((v4 & 0x800) == 0) {
          return (void *)sub_18135B6B0((uint64_t)v2, v5, v14);
        }
      }

      else
      {
        result = (void *)sub_181303970(a2, 1);
        v14 = result;
        if ((*(_WORD *)(a2 + 20) & 0x800) == 0) {
          return (void *)sub_18135B6B0((uint64_t)v2, v5, v14);
        }
      }

    v24 = 0;
    goto LABEL_44;
  }

  v27 = 0;
LABEL_74:
  v24 = 1;
LABEL_44:
  v33 = v27;
  v34 = v20[v27 + 1];
  v35 = (((v34 - 97) >> 1) | (((_BYTE)v34 - 97) << 7));
  if (v35 > 0xA || ((1 << v35) & 0x495) == 0)
  {
    v43 = v34 == 121 ? v24 : 1;
    if ((v43 & 1) != 0) {
      return 0LL;
    }
  }

  v37 = v33 + 2;
  if ((int)v21 > (int)v33 + 2)
  {
    v38 = &a1[v33 + 4 + v7];
    while (1)
    {
      v39 = *v38++;
      v40 = (((v39 - 97) >> 1) | ((v39 - 97) << 7));
      v4 = v40 > 0xA;
      v41 = (1 << v40) & 0x495;
      if (v4 || v41 == 0) {
        break;
      }
    }

    return 0LL;
  }

  return 1LL;
}

    v24 = 0;
    goto LABEL_44;
  }

  v27 = 0;
LABEL_74:
  v24 = 1;
LABEL_44:
  v33 = v20[v27 + 1];
  v34 = (((v33 - 97) >> 1) | (((_BYTE)v33 - 97) << 7));
  v4 = v34 > 0xA;
  v35 = (1 << v34) & 0x495;
  v36 = v4 || v35 == 0;
  if (!v36 || (v33 != 121 ? (v43 = 1) : (v43 = v24), (v43 & 1) == 0))
  {
    v37 = v27 + 2;
    if ((int)v21 > (int)(v27 + 2))
    {
      v38 = &a1[v27 + 4 + (uint64_t)v7];
      while (1)
      {
        v39 = *v38++;
        v40 = (((v39 - 97) >> 1) | ((v39 - 97) << 7));
        v4 = v40 > 0xA;
        v41 = (1 << v40) & 0x495;
        if (v4 || v41 == 0) {
          break;
        }
        result = 0LL;
      }

      return 1LL;
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1812854BC(uint64_t a1, uint64_t a2)
{
  v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  int v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v4 | 0x40;
  if (*(_BYTE *)(v3 + 103)) {
    return 2LL;
  }
  if ((v4 & 0x40) != 0) {
    return 1LL;
  }
  if (*(_WORD *)(a1 + 36))
  {
    int v7 = *((_DWORD *)v2 + 35) + 1;
    *((_DWORD *)v2 + 35) = v7;
    *(_DWORD *)(a2 + 16) = v7;
  }

  v341 = *(int **)(a2 + 40);
  v314 = *(unsigned int **)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 104);
  if (v2[50]) {
    BOOL v9 = (v4 & 0x200000) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v351 = v3;
  __int16 v349 = v4;
  if (v9)
  {
    if (v8 && !*((_DWORD *)v2 + 12))
    {
LABEL_245:
      *(void *)(v8 + 8) = v2[50];
      v2[50] = v8;
    }
  }

  else
  {
    if (!v8)
    {
      uint64_t v8 = sub_1812F2264(v3, 0x40uLL);
      if (!v8)
      {
        *(void *)(a2 + 104) = 0LL;
        return 2LL;
      }

      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(a2 + 104) = v8;
    }

    *(_DWORD *)(v8 + 4) = 1;
    if (!*((_DWORD *)v2 + 12)) {
      goto LABEL_245;
    }
  }

  sub_1812BD68C((uint64_t)v2, v341);
  v350 = v2;
  if (*v341 >= 1)
  {
    int v16 = 0;
    v17 = v341 + 2;
    do
    {
      if (*((void *)v17 + 4)) {
        goto LABEL_15;
      }
      v10 = (char *)*((void *)v17 + 2);
      if (!v10)
      {
        uint64_t v34 = *((void *)v17 + 5);
        if (*v2)
        {
          uint64_t v41 = sub_1812F2264(*v2, 0x68uLL);
          if (!v41) {
            goto LABEL_257;
          }
        }

        else
        {
          uint64_t v41 = sub_18126F0AC(104LL);
          if (!v41) {
            goto LABEL_257;
          }
        }

        *(void *)(v41 + 96) = 0LL;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 80) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)(v41 + 48) = 0u;
        *(_OWORD *)uint64_t v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *((void *)v17 + 4) = v41;
        *(_DWORD *)(v41 + 44) = 1;
        v49 = (const void *)*((void *)v17 + 3);
        uint64_t v50 = *v2;
        if (v49)
        {
          size_t v51 = strlen(*((const char **)v17 + 3));
          unint64_t v52 = v51 + 1;
          if (v50)
          {
            v53 = (void *)sub_1812F2264(v50, v52);
            if (v53) {
              goto LABEL_67;
            }
          }

          else
          {
            v53 = (void *)sub_18126F0AC(v51 + 1);
            if (v53) {
LABEL_67:
            }
              memcpy(v53, v49, v52);
          }

          v2 = v350;
        }

        else
        {
          v53 = sub_18127F588(v50, "%!S", v35, v36, v37, v38, v39, v40, (char)v17);
        }

        *(void *)uint64_t v41 = v53;
        do
        {
          uint64_t v54 = v34;
          uint64_t v34 = *(void *)(v34 + 80);
        }

        while (v34);
        sub_181321CF4(v2, *(int **)(v54 + 32), (_WORD *)(v41 + 54), (void *)(v41 + 8));
        *(_WORD *)(v41 + 52) = -1;
        *(_WORD *)(v41 + 58) = 200;
        *(_DWORD *)(v41 + 48) |= 0x4200u;
        if (*((_DWORD *)v2 + 12)) {
          return 2LL;
        }
LABEL_73:
        if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) == 0) {
          goto LABEL_15;
        }
        goto LABEL_74;
      }

      v18 = (unsigned int *)v2[50];
      if (!v18
        || *((_DWORD *)v2 + 12)
        || *((void *)v17 + 1)
        || (__int16 v19 = *(_WORD *)((char *)v17 + 61), (v19 & 0x200) != 0))
      {
LABEL_33:
        if (*(void *)v17)
        {
          uint64_t v29 = *(void *)(*v2 + 32);
          v30 = (uint64_t *)(v29 + 24);
          uint64_t v31 = 0xFFFFFFFF00000000LL;
          do
          {
            uint64_t v32 = *v30;
            v30 += 4;
            v31 += 0x100000000LL;
          }

          while (v32 != *(void *)v17);
          v33 = (_BYTE **)(v29 + (v31 >> 27));
        }

        else
        {
          v33 = (_BYTE **)(v17 + 2);
        }

        uint64_t v42 = sub_18129EAF4((uint64_t)v2, 0, v10, *v33, v12, v13, v14, v15);
        *((void *)v17 + 4) = v42;
        if (!v42) {
          return 2LL;
        }
        uint64_t v43 = v42;
        unsigned int v44 = *(_DWORD *)(v42 + 44);
        if (v44 < 0xFFFF)
        {
          *(_DWORD *)(v42 + 44) = v44 + 1;
          int v45 = *(unsigned __int8 *)(v42 + 63);
          if (v45 == 1)
          {
            __int16 v46 = *(unsigned __int8 *)(a1 + 36);
            goto LABEL_46;
          }

          if ((*(_WORD *)((_BYTE *)v17 + 61) & 4) == 0)
          {
            if (!*(_BYTE *)(v42 + 63)) {
              goto LABEL_73;
            }
            __int16 v46 = *(unsigned __int8 *)(a1 + 36);
            if (*(__int16 *)(v42 + 54) <= 0)
            {
LABEL_46:
              int v45 = *(unsigned __int8 *)(v43 + 63);
            }

            if (v45 == 1)
            {
              if ((*(_WORD *)((_BYTE *)v17 + 61) & 0x80) != 0)
              {
                uint64_t v47 = *(void *)(v43 + 80);
                if (v47)
                {
                  if (((*(_DWORD *)(v351 + 48) >> 7) & 1u) < *(unsigned __int8 *)(v47 + 30)) {
                    sub_1812DC47C( (uint64_t)v2,  "unsafe use of virtual table %s",  (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  *(void *)v43);
                  }
                }
              }
            }

            else if (v45 == 2)
            {
              if ((*(_BYTE *)(v351 + 51) & 0x80) == 0
                && *(void *)(v43 + 96) != *(void *)(*(void *)(v351 + 32) + 56LL))
              {
                sub_1812DC47C( (uint64_t)v2,  "access to view %s prohibited",  (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  *(void *)v43);
              }

              *((void *)v17 + 5) = sub_18129F624(v351, *(void *)(v43 + 64), 0LL);
            }

            __int16 v48 = *(_WORD *)(v43 + 54);
            *(_WORD *)(v43 + 54) = -1;
            *(_WORD *)(a1 + 36) = 1;
            sub_181285228((void *)a1, *((void **)v17 + 5));
            *(_WORD *)(a1 + 36) = v46;
            *(_WORD *)(v43 + 54) = v48;
            v2 = v350;
            if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) != 0) {
              goto LABEL_74;
            }
            goto LABEL_15;
          }

          uint64_t v312 = *((void *)v17 + 2);
LABEL_489:
          v61 = "'%s' is not a function";
LABEL_492:
          uint64_t v311 = (uint64_t)v2;
LABEL_493:
          sub_1812DC47C(v311, v61, (uint64_t)v10, v11, v12, v13, v14, v15, v312);
          return 2LL;
        }

        sub_1812DC47C( (uint64_t)v2,  "too many references to %s: max 65535",  (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  *(void *)v42);
LABEL_257:
        *((void *)v17 + 4) = 0LL;
        return 2LL;
      }

      while (1)
      {
        uint64_t v20 = *v18;
LABEL_31:
        if (!v18[1])
        {
          v18 = (unsigned int *)*((void *)v18 + 1);
          if (v18) {
            continue;
          }
        }

        goto LABEL_33;
      }

      uint64_t v21 = 0LL;
LABEL_24:
      uint64_t v22 = 0LL;
      v23 = &v18[12 * v21];
      uint64_t v26 = *((void *)v23 + 2);
      v25 = (char **)(v23 + 4);
      uint64_t v24 = v26;
      while (1)
      {
        uint64_t v27 = v10[v22];
        uint64_t v28 = *(unsigned __int8 *)(v24 + v22);
        if ((_DWORD)v27 == (_DWORD)v28) {
          break;
        }
        if (byte_1813C6343[v27] != byte_1813C6343[v28])
        {
          if (++v21 == v20) {
            goto LABEL_31;
          }
          goto LABEL_24;
        }

LABEL_26:
        ++v22;
      }

      if (v10[v22]) {
        goto LABEL_26;
      }
      v60 = &v18[12 * v21];
      v61 = (const char *)*((void *)v60 + 5);
      v342 = (const char **)(v60 + 10);
      if (v61)
      {
        LOBYTE(v312) = v24;
        goto LABEL_492;
      }

      if ((v19 & 4) != 0)
      {
        LOBYTE(v312) = *((void *)v17 + 2);
        goto LABEL_489;
      }

      uint64_t v345 = v21;
      uint64_t v62 = *v2;
      v63 = sub_181268E34(*v2, 0x68uLL);
      if (!v63) {
        return 2LL;
      }
      v64 = v63;
      v338 = v25;
      v65 = &v18[12 * v345];
      v68 = (_BYTE *)*((void *)v65 + 6);
      v66 = v65 + 12;
      v67 = v68;
      if (!v68)
      {
        v69 = sub_181268E34(v62, 0x14uLL);
        void *v66 = v69;
        if (!v69
          || (v67 = v69, !sub_18131D044(v350, (void (*)(uint64_t, uint64_t))sub_1812900D0, (uint64_t)v69)))
        {
          sub_1812F20DC((void *)v62, v64);
          return 2LL;
        }

        v67[18] = v18[12 * v345 + 14];
      }

      *((void *)v17 + 4) = v64;
      v64[11] = 1;
      *(void *)v64 = sub_18129E1F8(v62, *v338);
      *((_WORD *)v64 + 26) = -1;
      *((_WORD *)v64 + 29) = 200;
      v64[12] |= 0x4200u;
      v70 = (unsigned __int8 *)sub_18129F624(v62, *(void *)&v18[12 * v345 + 8], 0LL);
      *((void *)v17 + 5) = v70;
      if (*(_BYTE *)(v62 + 103)) {
        return 2LL;
      }
      *((_DWORD *)v70 + 1) |= 0x4000000u;
      __int16 v77 = *(_WORD *)((char *)v17 + 61);
      if ((v77 & 2) != 0)
      {
        sub_1812DC47C((uint64_t)v350, "no such index: %s", v71, v72, v73, v74, v75, v76, *((void *)v17 + 11));
        return 2LL;
      }

      *(_WORD *)((char *)v17 + 61) = v77 | 0x100;
      *((void *)v17 + 12) = v67;
      ++*(_DWORD *)v67;
      int v78 = *v70 & 0xFE;
      v79 = v70;
      if (v78 != 134) {
        goto LABEL_112;
      }
      int v80 = -1;
      v79 = v70;
      while (2)
      {
        v81 = (unsigned int *)*((void *)v79 + 5);
        uint64_t v82 = *v81;
        uint64_t v83 = 0LL;
        while (2)
        {
          if (*(void *)&v81[26 * v83 + 4]) {
            goto LABEL_99;
          }
          v84 = *(_BYTE **)&v81[26 * v83 + 6];
          if (!v84) {
            goto LABEL_99;
          }
          v85 = *v338;
          while (2)
          {
            uint64_t v86 = *v84;
            uint64_t v87 = *v85;
            if ((_DWORD)v86 != (_DWORD)v87)
            {
              if (byte_1813C6343[v86] != byte_1813C6343[v87]) {
                goto LABEL_99;
              }
LABEL_104:
              ++v84;
              ++v85;
              continue;
            }

            break;
          }

          if (*v84) {
            goto LABEL_104;
          }
          v88 = &v81[26 * v83];
          *((void *)v88 + 5) = v64;
          ++v64[11];
          *(_WORD *)((char *)v88 + 69) |= 0x40u;
          int v89 = *((_DWORD *)v79 + 1);
          if ((v89 & 0x2000) != 0)
          {
            sub_1812DC47C( (uint64_t)v350,  "multiple references to recursive table: %s",  v71,  v72,  v73,  v74,  v75,  v76,  (char)*v338);
            return 2LL;
          }

          *((_DWORD *)v79 + 1) = v89 | 0x2000;
          if (v80 < 0)
          {
            int v80 = *((_DWORD *)v350 + 13);
            *((_DWORD *)v350 + 13) = v80 + 1;
          }

          v81[26 * v83 + 18] = v80;
LABEL_99:
          if (++v83 != v82) {
            continue;
          }
          break;
        }

  uint64_t v14 = 0;
  uint64_t v15 = v11 & 0x7C;
  if ((_DWORD)a3) {
    goto LABEL_27;
  }
LABEL_14:
  if ((v12 & 0x4000) != 0) {
    int v16 = 44;
  }
  else {
    int v16 = 80;
  }
  if ((v12 & 0x10000) != 0) {
    v17 = 16LL;
  }
  else {
    v17 = v16;
  }
  memcpy(v8, a2, v17);
LABEL_28:
  v18 = v11 & 0x14000 | v9 | v8[1] & 0xF7FEBFFF;
  v8[1] = v18;
  if (v14)
  {
    __int16 v19 = (unsigned __int8 *)v8 + v15;
    *((void *)v8 + 1) = v19;
    memcpy(v19, *((const void **)a2 + 1), v14);
    v18 = v8[1];
  }

  uint64_t v20 = *((_DWORD *)a2 + 1);
  if (((v18 | v20) & 0x810000) == 0)
  {
    uint64_t v21 = (void *)*((void *)a2 + 4);
    if ((v20 & 0x1000) != 0) {
      uint64_t v22 = sub_18129F624(a1, (uint64_t)v21, a3);
    }
    else {
      uint64_t v22 = (uint64_t)sub_18129CD4C(a1, v21, a3);
    }
    *((void *)v8 + 4) = v22;
  }

  v23 = v8[1];
  if ((v23 & 0x1014000) != 0)
  {
    if ((_DWORD)a3)
    {
      uint64_t v24 = *((_DWORD *)a2 + 1);
      v25 = 80;
      if (*a2 != 178 && (v24 & 0x1000000) == 0)
      {
        v25 = 44;
        if (!*((void *)a2 + 2))
        {
          if (*((void *)a2 + 4)) {
            v25 = 44;
          }
          else {
            v25 = 16;
          }
        }
      }
    }

    else
    {
      uint64_t v24 = *((_DWORD *)a2 + 1);
      v25 = 80;
    }

    if ((v24 & 0x800) == 0)
    {
      uint64_t v29 = (const char *)*((void *)a2 + 1);
      if (v29) {
        v25 = (v25 | 1) + (strlen(v29) & 0x3FFFFFFF);
      }
    }

    uint64_t v35 = (unsigned __int8 *)v8 + ((v25 + 7) & 0x7FFFFFF8);
    if ((v23 & 0x810000) != 0)
    {
      if ((v24 & 0x1000000) == 0) {
        goto LABEL_55;
      }
    }

    else
    {
      v30 = *((void *)a2 + 2);
      if (v30) {
        uint64_t v31 = sub_18129C928(a1, v30, 1LL, &v35);
      }
      else {
        uint64_t v31 = 0LL;
      }
      *((void *)v8 + 2) = v31;
      uint64_t v32 = *((void *)a2 + 3);
      if (v32) {
        v33 = sub_18129C928(a1, v32, 1LL, &v35);
      }
      else {
        v33 = 0LL;
      }
      *((void *)v8 + 3) = v33;
      if ((*((_DWORD *)a2 + 1) & 0x1000000) == 0)
      {
LABEL_55:
        if (!a4) {
          return v8;
        }
        goto LABEL_65;
      }
    }

    *((void *)v8 + 9) = sub_18131E040(a1, (uint64_t)v8, *((void *)a2 + 9));
    if (a4) {
LABEL_65:
    }
      *a4 = v35;
  }

  else if ((a2[6] & 0x81) == 0)
  {
    uint64_t v26 = *((void *)a2 + 2);
    *((void *)v8 + 2) = v26;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27) {
      uint64_t v28 = sub_18129C928(a1, v27, 0LL, 0LL);
    }
    else {
      uint64_t v28 = 0LL;
    }
    *((void *)v8 + 3) = v28;
  }

  return v8;
}

    ++v33;
  }

  if (*v33) {
    goto LABEL_26;
  }
  *(void *)(a2 + 104) = v32;
LABEL_32:
  if (!v28[11] && ((uint64_t v43 = *(void *)(*(void *)(*(void *)a1 + 32LL) + 56LL)) == 0 || !*(void *)(v43 + 64))
    || a1[221])
  {
    uint64_t v39 = (char *)v28 + 63;
    uint64_t v38 = *((unsigned __int8 *)v28 + 63);
    uint64_t v40 = v38 == 2;
    if ((*(_BYTE *)(*(void *)a1 + 49LL) & 0x40) == 0 || v38) {
      goto LABEL_54;
    }
LABEL_40:
    unsigned int v44 = v28[12];
    int v45 = (unsigned __int8 *)*v28;
    __int16 v46 = *(void *)(v44 + 96);
    if (v46)
    {
      uint64_t v47 = *v45;
      if (*v45)
      {
        __int16 v48 = 0;
        v49 = v45 + 1;
        do
        {
          __int16 v48 = -1640531535 * (v48 + byte_1813C6343[v47]);
          uint64_t v50 = *v49++;
          uint64_t v47 = v50;
        }

        while (v50);
      }

      else
      {
        __int16 v48 = 0;
      }

      v65 = (_DWORD *)(v46 + 16LL * (v48 % *(_DWORD *)(v44 + 80)));
      size_t v51 = (uint64_t *)(v65 + 2);
      unint64_t v52 = *v65;
      if (v52)
      {
        while (1)
        {
LABEL_65:
          size_t v51 = (uint64_t *)*v51;
          v66 = (_BYTE *)v51[3];
          for (uint64_t j = (unsigned __int8 *)*v28; ; ++j)
          {
            v68 = *v66;
            v69 = *j;
            if ((_DWORD)v68 != (_DWORD)v69) {
              break;
            }
            if (!*v66) {
              goto LABEL_49;
            }
LABEL_67:
            ++v66;
          }

          if (byte_1813C6343[v68] == byte_1813C6343[v69]) {
            goto LABEL_67;
          }
          if (!--v52)
          {
            size_t v51 = &qword_18C550660;
            goto LABEL_49;
          }
        }
      }
    }

    else
    {
      size_t v51 = (uint64_t *)(v44 + 88);
      unint64_t v52 = *(_DWORD *)(v44 + 84);
      if (v52) {
        goto LABEL_65;
      }
    }

    size_t v51 = &qword_18C550660;
LABEL_49:
    if (v51[2] || v28[9])
    {
      uint64_t v225 = 1;
      uint64_t v41 = 0LL;
      if (!v40) {
        goto LABEL_52;
      }
    }

    else
    {
LABEL_54:
      uint64_t v225 = 0;
      uint64_t v41 = 0LL;
      if (!v40) {
        goto LABEL_52;
      }
    }

    uint64_t v42 = 1;
    if (v38 == 1) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }

  uint64_t v37 = sub_18133EDD4(a1, (unsigned __int8 **)v28, 128LL, 0LL, 0LL, v25, v26, v27);
  uint64_t v39 = (char *)v28 + 63;
  uint64_t v38 = *((unsigned __int8 *)v28 + 63);
  uint64_t v40 = v38 == 2;
  if (!v37) {
    goto LABEL_40;
  }
  uint64_t v41 = (uint64_t)v37;
  uint64_t v225 = 1;
  if (v38 == 2)
  {
    uint64_t v42 = 1;
    goto LABEL_56;
  }

  *(_WORD *)(v4 + 40) &= ~0x20u;
  return result;
}

          v18 = v6[6];
          if ((int)v18 + 1 < v6[4])
          {
            v6[6] = v18 + 1;
            __int16 v19 = *((void *)v6 + 1);
            uint64_t v20 = 63;
            goto LABEL_28;
          }

          v23 = (uint64_t)v6;
          uint64_t v24 = "?";
          break;
        case 138:
          uint64_t v13 = 0;
          goto LABEL_44;
        case 183:
          goto LABEL_19;
        default:
          goto LABEL_44;
      }

  uint64_t v11 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_31:
    (*v11)(v1);
    return v2;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v11 = &xmmword_18C465410;
    goto LABEL_31;
  }

  return v2;
}

      uint64_t v20 = ((uint64_t (*)(void, void, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(v1 + 336) + 72LL),  (v8 + v10),  0LL);
      if (v20)
      {
        uint64_t v21 = (uint64_t *)v20;
        uint64_t v22 = *(void *)(v20 + 8);
        if (*(void *)v22)
        {
          ++*(void *)(*(void *)(v1 + 336) + 24LL);
          ++*(void *)(v22 + 56);
          uint64_t v35 = v22;
LABEL_38:
          uint64_t v27 = *(_WORD *)(v22 + 52);
          if ((v27 & 8) != 0) {
            BOOL v9 = 1;
          }
          if ((v27 & 0x20) != 0)
          {
            uint64_t v28 = *(void *)(v22 + 40);
            --*(_DWORD *)(v28 + 152);
            *(void *)(v22 + 32) = *(void *)(v28 + 168);
            *(void *)(v28 + 168) = v22;
            (*(void (**)(void, void, void))(**(void **)(v28 + 72) + 144LL))( *(void *)(v28 + 72),  *(void *)(v28 + 200) * (*(_DWORD *)(v22 + 48) - 1),  *(void *)(v22 + 8));
          }

          else
          {
            sub_1812F9F44(v22);
          }

          goto LABEL_14;
        }

        uint64_t v22 = sub_1812FD158(*(void *)(v1 + 336), v8 + (int)v10, v21);
        uint64_t v35 = v22;
        if (v22) {
          goto LABEL_38;
        }
      }

      uint64_t v13 = v5 - 1;
      while ((*v5 | 0x20) != 0x20)
      {
        ++v5;
        ++v13;
      }

      v5 = v13;
      do
      {
        uint64_t v15 = *++v5;
        uint64_t v14 = v15;
      }

      while (v15 == 32);
      if (!v14) {
        return result;
      }
    }

    uint64_t v8 = *(_WORD *)(a4 + 99) | 4;
    goto LABEL_12;
  }

  return result;
}

          uint64_t v21 = off_18C4653B8(v18);
LABEL_27:
          uint64_t v15 = 0LL;
          *(_DWORD *)(v8 + 60) = v21;
          *(_DWORD *)(a1 + 148) = v21 / 0x28uLL;
          *(void *)(a1 + 136) = v18;
          return v15;
        }
      }

      v18 = (void *)sub_1812F2310(*(void *)v8, v18, v20);
      if (v18)
      {
LABEL_22:
        uint64_t v13 = *(void *)v8;
        if (!*(void *)v8) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
    }

    else
    {
      v18 = (void *)sub_1812F2264(*(void *)v8, 8 * v19);
      if (v18) {
        goto LABEL_22;
      }
    }

    return 7LL;
  }

  if (*(_BYTE *)(v13 + 103) || *(_BYTE *)(v13 + 104)) {
    return 7LL;
  }
  *(_BYTE *)(v13 + 103) = 1;
  ++*(_DWORD *)(v13 + 432);
  *(_WORD *)(v13 + 436) = 0;
  uint64_t v14 = *(void *)(v13 + 344);
  uint64_t v15 = 7LL;
  if (v14)
  {
    sub_1812DC47C(v14, "out of memory", a3, a4, a5, a6, a7, a8, v23);
    for (i = *(void *)(v13 + 344); ; ++*(_DWORD *)(i + 48))
    {
      *(_DWORD *)(i + 24) = 7;
      i = *(void *)(i + 256);
      if (!i) {
        break;
      }
    }
  }

  return v15;
}

          if (a5) {
            sub_181311F48((void *)v11, a5);
          }
          return;
        }
      }

      else if (v12 <= 1)
      {
        goto LABEL_17;
      }

      --v12;
    }
  }

  if (!*(_BYTE *)(v12 + 103))
  {
    if (*a4 == 138 && v10)
    {
      v23 = *(void *)&v10[6 * v13 + 2];
      *(void *)(v23 + 24) = a4;
      *(_DWORD *)(v23 + 44) = v15;
      goto LABEL_44;
    }

    goto LABEL_36;
  }

  if (v15) {
    return (unsigned int *)sub_181309110((void *)v13, (unsigned __int8 *)v15);
  }
  return result;
}

    ++v22;
    v23 += 6;
    uint64_t v11 = *v8;
    if (v22 >= (int)v11)
    {
      uint64_t v20 = (void *)v20[11];
      if (v20) {
        uint64_t v21 = v64 == 0;
      }
      else {
        uint64_t v21 = 1;
      }
      if (v21)
      {
        if ((int)v11 >= 1)
        {
          v57 = 0LL;
          uint64_t v58 = (__int16 *)((char *)v8 + 25);
          while (1)
          {
            uint64_t v59 = *v58;
            v58 += 12;
            if ((v59 & 4) == 0) {
              break;
            }
            uint64_t result = 0LL;
            if (v11 == ++v57) {
              return result;
            }
          }

          sub_1812DC47C( (uint64_t)v9,  "%r ORDER BY term does not match any column in the result set",  a3,  a4,  a5,  a6,  a7,  a8,  v57 + 1);
          return 1LL;
        }

        return 0LL;
      }

      goto LABEL_22;
    }
  }

  while (1)
  {
    v25 = *(_DWORD *)(v24 + 4);
    if ((v25 & 0x82000) == 0) {
      break;
    }
    if ((v25 & 0x80000) != 0)
    {
      uint64_t v24 = *(void *)(*(void *)(v24 + 32) + 8LL);
      if (!v24) {
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v24 = *(void *)(v24 + 16);
      if (!v24) {
        goto LABEL_26;
      }
    }
  }

  if (sub_181323268(v24, &v66))
  {
    uint64_t v26 = v66;
    if (v66 >= 1 && v66 <= *v65) {
      goto LABEL_60;
    }
    sub_1812DC47C( (uint64_t)v9,  "%r %s BY term out of range - should be between 1 and %d",  a3,  a4,  a5,  a6,  a7,  a8,  v22 + 1);
    while (1)
    {
      if ((*(_BYTE *)(v24 + 4) & 3) == 0)
      {
        v56 = *(_DWORD *)(v24 + 56);
        if (v56 > 0) {
          break;
        }
      }

      uint64_t v24 = *(void *)(v24 + 16);
      if (!v24) {
        return 1LL;
      }
    }

    *(_DWORD *)(*(void *)v9 + 84LL) = v56;
    return 1LL;
  }

  if (*(_BYTE *)v24 != 59 || (uint64_t v28 = *v65, (int)v28 < 1))
  {
LABEL_56:
    uint64_t v35 = sub_18129C928(v10, (unsigned __int8 *)v24, 0LL, 0LL);
    uint64_t v36 = (unsigned __int8 *)v35;
    uint64_t v26 = 0;
    if (*(_BYTE *)(v10 + 103))
    {
      if (!v35)
      {
LABEL_59:
        if (v26 >= 1) {
          goto LABEL_60;
        }
LABEL_55:
        v64 = 1;
        goto LABEL_26;
      }

  uint64_t v29 = (uint64_t *)a1[2];
  if (v29) {
    goto LABEL_31;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t v29 = (uint64_t *)sub_1812DC63C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v29)
  {
LABEL_31:
    v30 = 32LL * (int)v13;
    sub_1812C742C( a1,  "DELETE FROM %Q.sqlite_master WHERE name=%Q AND type='trigger'",  a3,  a4,  a5,  a6,  a7,  a8,  *(void *)(*(void *)(v10 + 32) + v30));
    uint64_t v34 = a1[2];
    uint64_t v35 = (**(_DWORD **)(*(void *)(*a1 + 32) + v30 + 24) + 1);
    uint64_t v36 = *(_DWORD *)(v34 + 144);
    if (*(_DWORD *)(v34 + 148) <= v36)
    {
      sub_18131044C(v34, 100LL, v13, 1LL, v35, v31, v32, v33);
    }

    else
    {
      *(_DWORD *)(v34 + 144) = v36 + 1;
      uint64_t v37 = *(void *)(v34 + 136) + 40LL * v36;
      *(_DWORD *)uint64_t v37 = 100;
      *(_DWORD *)(v37 + 4) = v13;
      *(_DWORD *)(v37 + 8) = 1;
      *(_DWORD *)(v37 + 12) = v35;
      *(void *)(v37 + 24) = 0LL;
      *(void *)(v37 + 32) = 0LL;
      *(void *)(v37 + 16) = 0LL;
    }

    sub_1812B9B68(v29, 154LL, v13, 0LL, 0LL, *v8, 0LL, v33);
  }

  if (*((void *)v8 + 12)) {
    return 0LL;
  }
  if (*(_BYTE *)v13 == 44)
  {
    LODWORD(v11) = 0;
    do
    {
      uint64_t v11 = sub_181326418(a1, v8, *(void *)(v13 + 24), a4, a5) + v11;
      uint64_t v13 = *(void *)(v13 + 16);
    }

    while (*(_BYTE *)v13 == 44);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  if (sub_18132AB94(v13, a4, a5))
  {
    *((_DWORD *)v8 + 1) |= 0x1000000u;
    v25 = (int *)(a4 + 104LL * v40 + 72);
    do
    {
      uint64_t v27 = (unsigned __int8 *)sub_18129C928(*a1, (unsigned __int8 *)v13, 0LL, 0LL);
      sub_181325FE0((uint64_t)v27, 0xFFFFFFFFLL, 1LL);
      uint64_t v41 = a1;
      uint64_t v42 = *v25;
      uint64_t v43 = v42;
      unsigned int v44 = 0;
      int v45 = *((void *)v8 + 4);
      uint64_t v34 = v8;
      do
      {
        uint64_t v35 = v34;
        uint64_t v34 = (unsigned __int8 *)*((void *)v34 + 10);
      }

      while (v34);
      __int16 v46 = *((void *)v35 + 4);
      uint64_t v36 = sub_1812BD930((uint64_t)&v41, v27, v28, v29, v30, v31, v32, v33);
      uint64_t v37 = v36;
      uint64_t v38 = *((void *)v8 + 14);
      if (v38)
      {
        uint64_t v39 = *(void *)(v38 + 16);
        __int16 v48 = 1;
        v47[1] = sub_18132AC7C;
        v47[2] = 0LL;
        v49 = v39;
        v47[0] = a1;
        if (v36)
        {
          sub_18131C57C((uint64_t)v47, (uint64_t)v36);
          if (!v48)
          {
            sub_181309110((void *)*a1, v37);
            return v11;
          }
        }
      }

      if ((*((_DWORD *)v8 + 1) & 8) != 0) {
        uint64_t v26 = 64LL;
      }
      else {
        uint64_t v26 = 48LL;
      }
      *(void *)&v8[v26] = sub_1813152F8(a1, *(void *)&v8[v26], (uint64_t)v37);
      uint64_t v8 = (unsigned __int8 *)*((void *)v8 + 10);
    }

    while (v8);
    return (v11 + 1);
  }

  return v11;
}

  if (!v18) {
    goto LABEL_254;
  }
  size_t v129 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v125 = **(_WORD **)(a3 + 16);
  uint64_t v124 = (__int16)v20 - 49;
  int v120 = (__int16)v20 - 31;
  uint64_t v121 = v20;
  int v122 = (__int16)v20;
  unsigned int v123 = (__int16)v20 + 49;
  unsigned __int8 v118 = (__int16)v20 + 31;
  v119 = v20 + 1;
  v126 = v20;
  v116 = &byte_1813CA370[-(__int16)v20];
  int v117 = (__int16)v20;
  v132 = v7;
  do
  {
    uint64_t v27 = v19[10];
    if (v27 == 256 || (v19[9] & 0x80) != 0)
    {
      uint64_t v28 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 2 * v12);
      if (*(__int16 *)(*(void *)(a3 + 8) + 2 * v12) < 0)
      {
        if ((_DWORD)v28 == 0xFFFF) {
          goto LABEL_112;
        }
      }

      else if ((*(_BYTE *)(*(void *)(*(void *)(a3 + 24) + 8LL) + 16 * v28 + 8) & 0xF) != 0)
      {
        goto LABEL_112;
      }
    }

    uint64_t v29 = *(void *)(v10 + 8);
    if ((v29 & *((void *)v19 + 5)) != 0) {
      goto LABEL_112;
    }
    if (v27 == 16 && (v19[9] & 0x100) != 0) {
      goto LABEL_112;
    }
    if ((*(_BYTE *)(v7 + 60) & 0x58) != 0)
    {
      uint64_t v31 = *(_DWORD *)(*(void *)v19 + 4LL);
      if ((v31 & 3) == 0
        || *(_DWORD *)(*(void *)v19 + 56LL) != *(_DWORD *)(v7 + 64)
        || (*(_BYTE *)(v7 + 60) & 0x18) != 0 && (v31 & 2) != 0)
      {
        goto LABEL_112;
      }
    }

    else {
      uint64_t v32 = 1;
    }
    *(_BYTE *)(a1 + 32) |= v32;
    *(_DWORD *)(v10 + 48) = v137;
    *(_WORD *)(v10 + 24) = v12;
    *(_WORD *)(v10 + 26) = v135;
    *(_WORD *)(v10 + 28) = v136;
    *(_WORD *)(v10 + 52) = v138;
    if (v138 >= *(unsigned __int16 *)(v10 + 56))
    {
      uint64_t v35 = (void *)sub_1812F2264(v127, 8LL * ((v138 + 8) & 0x1FFF8));
      if (!v35)
      {
        v5 = 0LL;
        int v7 = v132;
        break;
      }

      v33 = v35;
      memcpy(v35, *(const void **)(v10 + 64), 8LL * *(unsigned __int16 *)(v10 + 56));
      uint64_t v36 = *(void **)(v10 + 64);
      if (v36 != (void *)(v10 + 80)) {
        sub_1812F20DC((void *)v127, v36);
      }
      *(void *)(v10 + 64) = v33;
      *(_WORD *)(v10 + 56) = (v138 + 8) & 0xFFF8;
      uint64_t v34 = *(unsigned __int16 *)(v10 + 52);
      uint64_t v29 = *(void *)(v10 + 8);
    }

    else
    {
      v33 = *(void **)(v10 + 64);
      uint64_t v34 = v138;
    }

    uint64_t v37 = v34 + 1;
    *(_WORD *)(v10 + 52) = v34 + 1;
    v33[v34] = v19;
    *(void *)v10 = (*((void *)v19 + 5) | v134) & ~v29;
    if ((v27 & 1) != 0)
    {
      __int16 v46 = *(void *)v19;
      int v7 = v132;
      if ((*(_BYTE *)(*(void *)v19 + 5LL) & 0x10) != 0)
      {
        if (v37 < 2u)
        {
          LODWORD(v43) = 46;
        }

        else
        {
          uint64_t v47 = v37 - 1;
          __int16 v48 = *(void **)(v10 + 64);
          LODWORD(v43) = 46;
          do
          {
            if (*v48 && *(void *)*v48 == v46) {
              LODWORD(v43) = 0;
            }
            ++v48;
            --v47;
          }

          while (v47);
        }
      }

      else
      {
        uint64_t v43 = *(void *)(v46 + 32);
        if (v43)
        {
          uint64_t v43 = *(int *)v43;
          if ((_DWORD)v43)
          {
            if (v43 >= 8)
            {
              uint64_t v59 = 40;
              if (v43 >= 0x100)
              {
                v60 = v43;
                do
                {
                  v59 += 40;
                  uint64_t v43 = v60 >> 4;
                  int v78 = v60 > 0xFFF;
                  v60 >>= 4;
                }

                while (v78);
              }

              LOBYTE(v61) = v43;
              if (v43 >= 0x10)
              {
                do
                {
                  v59 += 10;
                  v61 = v43 >> 1;
                  int v78 = v43 > 0x1F;
                  v43 >>= 1;
                }

                while (v78);
              }
            }

            else
            {
              if (v43 < 2)
              {
                LOWORD(v43) = 0;
                goto LABEL_201;
              }

              uint64_t v59 = 40;
              do
              {
                v59 -= 10;
                LOBYTE(v61) = 2 * v43;
                uint64_t v94 = v43 >= 4;
                v43 *= 2LL;
              }

              while (!v94);
            }

            LOWORD(v43) = v59 + word_1813CD842[v61 & 7] - 10;
LABEL_201:
            LODWORD(v43) = (unsigned __int16)v43;
            if ((*(_WORD *)(a3 + 99) & 0x80) == 0) {
              goto LABEL_202;
            }
            goto LABEL_99;
          }
        }
      }

      if ((*(_WORD *)(a3 + 99) & 0x80) == 0) {
        goto LABEL_202;
      }
LABEL_99:
      if (v122 >= 10)
      {
        if ((__int16)v43 >= 11)
        {
          v53 = (unsigned __int16)v43;
          uint64_t v54 = 40;
          if ((unsigned __int16)v43 >= 0x100u)
          {
            uint64_t v55 = (unsigned __int16)v43;
            do
            {
              v54 += 40;
              v53 = v55 >> 4;
              int v78 = v55 > 0xFFF;
              v55 >>= 4;
            }

            while (v78);
          }

          if (v53 >= 0x10)
          {
            do
            {
              v54 += 10;
              int v78 = v53 > 0x1F;
              v53 >>= 1;
            }

            while (v78);
          }

          unint64_t v52 = v54 + (unsigned __int16)word_1813CD842[v53 & 7] - 43;
        }

        else
        {
          unint64_t v52 = 0;
        }

        if (((*(unsigned __int16 *)(*(void *)(a3 + 16) + 2 * v12) - ((_DWORD)v43 + v121) + v52 + 10) & 0x8000) != 0)
        {
          if (a4 > 1 || (*(_BYTE *)(v127 + 98) & 2) != 0)
          {
LABEL_112:
            v5 = 0LL;
            goto LABEL_113;
          }

          *(_DWORD *)(v10 + 48) |= 0x100000u;
        }
      }

  uint64_t v13 = a3[1];
  if (!v13)
  {
    uint64_t v12 = 0LL;
    goto LABEL_36;
  }

  uint64_t v14 = *(unsigned __int16 *)(v13 + 20);
  if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
  {
    if ((v14 & 1) != 0)
    {
      uint64_t v12 = 0LL;
      uint64_t v15 = *(_WORD *)(v13 + 20);
      if ((v15 & 2) == 0) {
        goto LABEL_42;
      }
      goto LABEL_39;
    }

    uint64_t v12 = (char *)sub_181303998((int *)v13, 1);
    uint64_t v13 = a3[1];
    if (v13)
    {
      uint64_t v15 = *(_WORD *)(v13 + 20);
      if ((v15 & 2) == 0) {
        goto LABEL_42;
      }
      goto LABEL_39;
    }

        if (!v12) {
          goto LABEL_6;
        }
LABEL_27:
        HIDWORD(v15) = v13;
        LODWORD(v15) = v13 - 4;
        switch((v15 >> 2))
        {
          case 0u:
          case 7u:
            BOOL v9 = v5;
            break;
          case 1u:
          case 3u:
            uint64_t v8 = v5;
            break;
          default:
            goto LABEL_6;
        }

        goto LABEL_6;
      }

        ++v28;
        if (v231) {
          uint64_t v31 = 1;
        }
        else {
          uint64_t v31 = v28 >= __src;
        }
        if (!v31) {
          continue;
        }
        if (v231)
        {
          v70 = v211;
          v69 = v213;
LABEL_277:
          v68 = v209;
          if (!v231) {
            goto LABEL_507;
          }
          goto LABEL_278;
        }

        v70 = v211;
        v69 = v213;
        if (!v215) {
          goto LABEL_277;
        }
        if (v213)
        {
          uint64_t v76 = (uint64_t (**)(const char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_241;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v213);
          --qword_18C468B10;
          off_18C4653A8(v213);
          v69 = (const char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v76 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_241:
            (*v76)(v69);
          }
        }

        if (v211)
        {
          __int16 v77 = (uint64_t (**)(const char *))&off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_248;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v211);
          --qword_18C468B10;
          off_18C4653A8(v211);
          v70 = (const char *)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            __int16 v77 = (uint64_t (**)(const char *))&xmmword_18C465410;
LABEL_248:
            (*v77)(v70);
          }
        }

        if (v26)
        {
          v69 = 0LL;
          v70 = 0LL;
          v68 = v209;
          if (!v231)
          {
LABEL_507:
            v67 = v208;
            uint64_t v71 = __n;
            if (!v26) {
              goto LABEL_223;
            }
            goto LABEL_224;
          }

    int v7 = v12 + 1;
    if (i < 2) {
      goto LABEL_124;
    }
LABEL_86:
    if ((_DWORD)v16) {
      goto LABEL_124;
    }
    v6 = *(_DWORD *)(a3 + 8);
  }

  int v16 = sub_1813780A4((uint64_t *)v5, (uint64_t)v10);
  if (!(_DWORD)v16)
  {
    uint64_t v21 = *v10;
    pStmt = 0LL;
    int v16 = sub_1813636A8((uint64_t *)v5, 30, &pStmt, 0LL);
    if (!(_DWORD)v16)
    {
      uint64_t v22 = pStmt;
      if (!sub_1812B2390((uint64_t)pStmt, 0))
      {
        v23 = *((void *)v22 + 16);
        if ((*(_WORD *)(v23 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v23, a2);
        }

        else
        {
          *(void *)v23 = a2;
          *(_WORD *)(v23 + 20) = 4;
        }

        uint64_t v41 = *(void *)(*(void *)v22 + 24LL);
        if (v41) {
          xmmword_18C465410(v41);
        }
      }

      if (!sub_1812B2390((uint64_t)v22, 1u))
      {
        uint64_t v42 = *((void *)v22 + 16);
        if ((*(_WORD *)(v42 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v42 + 64, v21);
        }

        else
        {
          *(void *)(v42 + 64) = v21;
          *(_WORD *)(v42 + 84) = 4;
        }

        uint64_t v43 = *(void *)(*(void *)v22 + 24LL);
        if (v43) {
          xmmword_18C465410(v43);
        }
      }

      sqlite3_step(v22);
      int v16 = sqlite3_reset(v22);
    }
  }

  *a4 = 0;
  if (i >= 2) {
    goto LABEL_86;
  }
LABEL_124:
  if (!(_DWORD)v16)
  {
LABEL_127:
    if (v7 == *(_DWORD *)(a3 + 8))
    {
      int v16 = 0LL;
      goto LABEL_157;
    }

    pStmt = 0LL;
    uint64_t v92 = 0LL;
    v61 = sub_1813636A8((uint64_t *)v5, 35, &pStmt, 0LL);
    if ((_DWORD)v61)
    {
      int v16 = v61;
      uint64_t v62 = 0LL;
LABEL_150:
      *(_BYTE *)(v5 + 464) = 0;
      if (!v62) {
        goto LABEL_157;
      }
    }

    else
    {
      v63 = pStmt;
      if (!sub_1812B2390((uint64_t)pStmt, 0))
      {
        v64 = *((void *)v63 + 16);
        if ((*(_WORD *)(v64 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v64, a2);
        }

        else
        {
          *(void *)v64 = a2;
          *(_WORD *)(v64 + 20) = 4;
        }

        v65 = *(void *)(*(void *)v63 + 24LL);
        if (v65) {
          xmmword_18C465410(v65);
        }
      }

      if (sqlite3_step(v63) == 100)
      {
        v66 = 0LL;
        uint64_t v62 = 0LL;
        v67 = 0;
        do
        {
          if (v66 >= v67)
          {
            if (sqlite3_initialize() || (v67 += 16, (v69 = sub_18127D33C(v62, 4LL * v67)) == 0))
            {
              sqlite3_reset(pStmt);
              int v16 = 7LL;
              goto LABEL_150;
            }

            uint64_t v62 = v69;
          }

          v68 = v66 + 1;
          *(_DWORD *)(v62 + 4 * v66++) = sqlite3_column_int(v63, 0);
        }

        while (sqlite3_step(v63) == 100);
        v63 = pStmt;
      }

      else
      {
        uint64_t v62 = 0LL;
        v68 = 0;
      }

      v70 = sqlite3_reset(v63);
      if ((_DWORD)v70 || (v70 = sub_1813636A8((uint64_t *)v5, 31, &v92, 0LL), (_DWORD)v70))
      {
        int v16 = v70;
        goto LABEL_150;
      }

      uint64_t v73 = v92;
      if (!sub_1812B2390((uint64_t)v92, 1u))
      {
        uint64_t v74 = *((void *)v73 + 16);
        if ((*(_WORD *)(v74 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v74 + 64, a2);
        }

        else
        {
          *(void *)(v74 + 64) = a2;
          *(_WORD *)(v74 + 84) = 4;
        }

        uint64_t v75 = *(void *)(*(void *)v73 + 24LL);
        if (v75) {
          xmmword_18C465410(v75);
        }
      }

      uint64_t v76 = (_BYTE *)(v5 + 464);
      *(_BYTE *)(v5 + 464) = 1;
      if (v68)
      {
        for (uint64_t j = 0LL; j < v68; ++j)
        {
          int v78 = *(unsigned int *)(v62 + 4 * j);
          if (j == v78)
          {
            int v16 = 0LL;
          }

          else
          {
            if (!sub_1812B2390((uint64_t)v73, 2u))
            {
              v79 = *((void *)v73 + 16);
              if ((*(_WORD *)(v79 + 148) & 0x9000) != 0)
              {
                sub_1813040AC(v79 + 128, (int)v78);
              }

              else
              {
                *(void *)(v79 + 128) = (int)v78;
                *(_WORD *)(v79 + 148) = 4;
              }

              int v80 = *(void *)(*(void *)v73 + 24LL);
              if (v80) {
                xmmword_18C465410(v80);
              }
            }

            if (!sub_1812B2390((uint64_t)v73, 0))
            {
              v81 = *((void *)v73 + 16);
              if ((*(_WORD *)(v81 + 20) & 0x9000) != 0)
              {
                sub_1813040AC(v81, j);
              }

              else
              {
                *(void *)v81 = j;
                *(_WORD *)(v81 + 20) = 4;
              }

              uint64_t v82 = *(void *)(*(void *)v73 + 24LL);
              if (v82) {
                xmmword_18C465410(v82);
              }
            }

            sqlite3_step(v73);
            int v16 = sqlite3_reset(v73);
          }

          if ((_DWORD)v16) {
            break;
          }
        }

        *uint64_t v76 = 0;
      }

      else
      {
        int v16 = 0LL;
        *uint64_t v76 = 0;
        if (!v62) {
          goto LABEL_157;
        }
      }
    }

    uint64_t v71 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_156:
      (*v71)(v62);
      goto LABEL_157;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v62);
    --qword_18C468B10;
    off_18C4653A8(v62);
    uint64_t v62 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v71 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_156;
    }
  }

  uint64_t v37 = 0LL;
  *(_DWORD *)(a3 + 8) = 0;
  if (v8 < 1)
  {
    uint64_t v20 = 0LL;
    goto LABEL_51;
  }

  uint64_t v20 = 0LL;
  uint64_t v22 = -1LL;
  v23 = v8;
  while (2)
  {
    v25 = v22;
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v26 = v23;
    uint64_t v27 = v11 + 3;
    while (2)
    {
      if (!*((_BYTE *)v27 - 7))
      {
        uint64_t v28 = *v27;
        if (*v27 == v25)
        {
          if (sub_181392B00(*(v27 - 3), *((_DWORD *)v27 - 4), (int *)v27 - 3, v27))
          {
            *((_BYTE *)v27 - 7) = 1;
            goto LABEL_34;
          }

          if (!*((_BYTE *)v27 - 7))
          {
            uint64_t v28 = *v27;
            goto LABEL_32;
          }
        }

        else
        {
LABEL_32:
          if (v28 < v22) {
            uint64_t v22 = v28;
          }
        }
      }

LABEL_110:
        if ((v79[5] & 0x20) != 0)
        {
          v79 = (unsigned __int8 *)*((void *)v79 + 10);
          if (*v79 == *v70) {
            continue;
          }
        }

        break;
      }

        *((void *)a5 + 6) = 0LL;
        a5[14] = 0;
        goto LABEL_111;
      }
    }

    v65 += 8;
    ++v64;
    v66 += 3;
  }

  while (v15 != v64);
  int v80 = (v67 + 1);
  *(_WORD *)(v10 + 52) = v67 + 1;
  if (v67 < 0)
  {
LABEL_113:
    *(_DWORD *)(v10 + 24) = a5[10];
    *(_BYTE *)(v10 + 28) = *(_BYTE *)(v10 + 28) & 0xFE | a5[14] & 1;
    a5[14] = 0;
    *(void *)(v10 + 32) = *((void *)a5 + 6);
    if (a5[15]) {
      __int16 v77 = a5[4];
    }
    else {
      LOBYTE(v77) = 0;
    }
    LOWORD(v78) = 0;
    *(_BYTE *)(v10 + 29) = v77;
    *(_WORD *)(v10 + 18) = 0;
    v79 = *((double *)a5 + 8);
    if (v79 > 1.0)
    {
      if (v79 > 2000000000.0)
      {
        int v78 = 10 * (*(void *)&v79 >> 52) - 10220;
        goto LABEL_146;
      }

      uint64_t v82 = (unint64_t)v79;
      if ((unint64_t)v79 >= 8)
      {
        uint64_t v83 = 40;
        if (v82 >= 0x100)
        {
          v84 = (unint64_t)v79;
          do
          {
            v83 += 40;
            uint64_t v82 = v84 >> 4;
            v85 = v84 > 0xFFF;
            v84 >>= 4;
          }

          while (v85);
        }

        if (v82 < 0x10)
        {
          LOBYTE(v86) = v82;
        }

        else
        {
          do
          {
            v83 += 10;
            uint64_t v86 = v82 >> 1;
            v85 = v82 > 0x1F;
            v82 >>= 1;
          }

          while (v85);
        }
      }

      else
      {
        if (v82 < 2)
        {
          LOWORD(v78) = 0;
          goto LABEL_146;
        }

        uint64_t v83 = 40;
        do
        {
          v83 -= 10;
          LOBYTE(v86) = 2 * v82;
          uint64_t v87 = v82 >= 4;
          v82 *= 2LL;
        }

        while (!v87);
      }

      LOWORD(v78) = v83 + word_1813CD842[v86 & 7] - 10;
    }

LABEL_112:
      int __s = v78;
      *v342 = "circular reference: %s";
      v334 = (void *)v350[50];
      v350[50] = (uint64_t)v18;
      if ((v70[5] & 0x20) != 0)
      {
        *((void *)v79 + 13) = *((void *)v70 + 13);
        v90 = v70;
        int v97 = sub_181285228((void *)a1, v79);
        *((void *)v79 + 13) = 0LL;
        if (v97)
        {
LABEL_498:
          v350[50] = (uint64_t)v334;
          return 2LL;
        }
      }

      else
      {
        v90 = v70;
      }

      v350[50] = (uint64_t)v18;
      v98 = v90;
      do
      {
        v99 = v98;
        v98 = (unsigned __int8 *)*((void *)v98 + 10);
      }

      while (v98);
      v100 = (int *)*((void *)v99 + 4);
      v101 = *(int **)&v18[12 * v345 + 6];
      if (v101)
      {
        if (v100 && *v100 != *v101)
        {
          sub_1812DC47C( (uint64_t)v350,  "table %s has %d values for %d columns",  v91,  v92,  v93,  v94,  v95,  v96,  (char)*v338);
          v350[50] = (uint64_t)v334;
          return 2LL;
        }
      }

      else
      {
        v101 = v100;
      }

      sub_181321CF4(v350, v101, (_WORD *)v64 + 27, (void *)v64 + 1);
      if (__s == 134)
      {
        v102 = "multiple recursive references: %s";
        if ((*((_DWORD *)v90 + 1) & 0x2000) == 0) {
          v102 = "recursive reference in a subquery: %s";
        }
        *v342 = v102;
        sub_181285228((void *)a1, v90);
      }

      *v342 = 0LL;
      v2 = v350;
      v350[50] = (uint64_t)v334;
      if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) != 0)
      {
LABEL_74:
        uint64_t v55 = *(void *)(*((void *)v17 + 4) + 16LL);
        if (!v55) {
          goto LABEL_254;
        }
        while (1)
        {
          v56 = *(_BYTE **)v55;
          for (i = (unsigned __int8 *)*((void *)v17 + 11); ; ++i)
          {
            uint64_t v58 = *v56;
            uint64_t v59 = *i;
            if ((_DWORD)v58 != (_DWORD)v59) {
              break;
            }
            if (!*v56)
            {
              *((void *)v17 + 12) = v55;
              goto LABEL_15;
            }
          }
        }
      }

      else
      {
LABEL_125:
        if (*(_BYTE *)(v84 + 44) || (*(_BYTE *)(v113 + 50) & 8) != 0 || a1[21] || *((_BYTE *)a1 + 32))
        {
          if (sub_18133FFAC((void **)a1, v8, v84, v116, (uint64_t *)&v115, a6, a7, a8))
          {
            if (!v108 || *(_BYTE *)(v113 + 103)) {
              return;
            }
          }

          else
          {
            uint64_t v93 = sub_1812F2264(*a1, 0x70uLL);
            if (v93)
            {
              uint64_t v94 = (void *)v93;
              *(void *)uint64_t v93 = 0x100000001LL;
              *(_OWORD *)(v93 + 8) = 0u;
              *(_OWORD *)(v93 + 24) = 0u;
              *(_OWORD *)(v93 + 56) = 0u;
              *(_OWORD *)(v93 + 72) = 0u;
              *(_OWORD *)(v93 + 88) = 0u;
              *(void *)(v93 + 104) = 0LL;
              *(_OWORD *)(v93 + 40) = 0u;
              *(void *)(v93 + 16) = 0LL;
              *(void *)(v93 + 24) = 0LL;
              uint64_t v95 = *(void *)v84;
              *(void *)(v93 + 40) = *(void *)v84;
              *(void *)(v93 + 24) = *(void *)v95;
              ++*(_DWORD *)(v95 + 44);
              LODWORD(v95) = *((_DWORD *)a1 + 13);
              *((_DWORD *)a1 + 13) = v95 + 1;
              *(_DWORD *)(v93 + 72) = v95;
              if ((_DWORD)v11) {
                sub_181341A00((uint64_t)a1, v93, v8, v116[0], v84, (uint64_t)v115, v11, 0xFFFFFFFFLL);
              }
              if ((_DWORD)v12)
              {
                uint64_t v96 = *(unsigned __int8 *)(v84 + (v10 != 0) + 45);
                sub_181341A00((uint64_t)a1, (uint64_t)v94, a2, v116[0], v84, (uint64_t)v115, v12, 1LL);
                if (!*(_BYTE *)(v84 + 44) && (v96 | 2) != 0xA)
                {
                  int v97 = (uint64_t *)a1[21];
                  if (!v97) {
                    int v97 = a1;
                  }
                  *((_BYTE *)v97 + 33) = 1;
                }
              }

              v94[3] = 0LL;
              sub_18128FF4C((void *)v113, v94);
              uint64_t v8 = a2;
            }

            if (v115) {
              sub_1812F20DC((void *)v113, v115);
            }
          }
        }
      }

  uint64_t result = 0LL;
  *((_BYTE *)a1 + 22) = a2;
  return result;
}

      v207 = 7;
      BOOL v9 = v201;
      goto LABEL_347;
    }

    unsigned int v44 = *(void *)(*(void *)(v8 + 56)
                    + 8LL * (int)sub_1813BA254(v8, 0, (unsigned __int8 *)__s1, *(_DWORD *)(v8 + 52)));
    if (!v44) {
      goto LABEL_71;
    }
    while (!sub_1813BE67C(v8, 0, (char *)__s1, 0, *(char **)(v44 + 16)))
    {
      unsigned int v44 = *(void *)(v44 + 24);
      if (!v44) {
        goto LABEL_70;
      }
    }

    v61 = *(_DWORD *)(a2 + 124);
    if (v61 != 23)
    {
      if (v61 == 18)
      {
        if (*(_BYTE *)v44 == 18)
        {
          if (*(_BYTE *)(v44 + 1)) {
            goto LABEL_347;
          }
          uint64_t v62 = v204;
          v63 = HIDWORD(v204);
          v64 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204)) {
              v63 = 128;
            }
            uint64_t v177 = v63;
            do
            {
              uint64_t v178 = v177;
              v177 *= 2LL;
            }

            while (v177 <= (int)v204);
            if (v178 > 1073741695)
            {
              uint64_t v177 = 2147483391LL;
            }

            uint64_t v179 = v203;
            if (sqlite3_initialize()) {
              goto LABEL_297;
            }
            v65 = sub_18127D33C(v179, v177);
            if (!v65) {
              goto LABEL_297;
            }
            uint64_t v203 = v65;
            HIDWORD(v204) = v177;
            uint64_t v62 = v204;
            v64 = (int)v204;
          }

          else
          {
            v65 = v203;
          }

          LODWORD(v204) = v62 + 1;
          *(_BYTE *)(v65 + v64) = 23;
          v66 = *(_DWORD *)(a2 + 128);
          v67 = v204;
          v68 = HIDWORD(v204);
          v69 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204)) {
              v68 = 128;
            }
            uint64_t v184 = v68;
            do
            {
              v185 = v184;
              v184 *= 2LL;
            }

            while (v184 <= (int)v204);
            if (v185 > 1073741695 && (uint64_t v184 = 2147483391LL, (int)v204 > 2147483390)
              || (v186 = v203, sqlite3_initialize())
              || (v70 = sub_18127D33C(v186, v184)) == 0)
            {
              v180 = 0;
              v207 = 7;
              BOOL v9 = v201;
              goto LABEL_337;
            }

            uint64_t v203 = v70;
            HIDWORD(v204) = v184;
            v67 = v204;
            v69 = (int)v204;
          }

          else
          {
            v70 = v203;
          }

          LODWORD(v204) = v67 + 1;
          *(_BYTE *)(v70 + v69) = v66;
          uint64_t v71 = *(unsigned int *)(v44 + 8);
          if ((int)v71 < 1)
          {
            v180 = 1;
            BOOL v9 = v201;
            goto LABEL_337;
          }

          uint64_t v72 = *(const void **)(v44 + 16);
          uint64_t v73 = (int)v204;
          uint64_t v74 = (int)v204 + v71;
          BOOL v9 = v201;
          if (v74 <= SHIDWORD(v204))
          {
            int v78 = v203;
            goto LABEL_336;
          }

          if (HIDWORD(v204)) {
            uint64_t v75 = SHIDWORD(v204);
          }
          else {
            uint64_t v75 = 128LL;
          }
          do
          {
            uint64_t v76 = v75;
            v75 *= 2LL;
          }

          while (v75 < v74);
          if (v76 <= 1073741695 || (uint64_t v75 = 2147483391LL, v74 <= 2147483391))
          {
            __int16 v77 = v203;
            if (!sqlite3_initialize())
            {
              int v78 = sub_18127D33C(v77, v75);
              if (v78)
              {
                uint64_t v203 = v78;
                HIDWORD(v204) = v75;
                uint64_t v73 = (int)v204;
LABEL_336:
                memcpy((void *)(v78 + v73), v72, v71);
                LODWORD(v204) = v204 + v71;
                v180 = 1;
                goto LABEL_337;
              }
            }
          }

        v23 = 0;
LABEL_59:
        uint64_t v15 = (uint64_t)v90;
        goto LABEL_60;
      }

      goto LABEL_24;
    }

    v30 = v12[10];
    if (!v30 || (uint64_t v31 = *((_WORD *)v12 + 47)) == 0)
    {
LABEL_24:
      if (++v22 >= v21) {
        goto LABEL_58;
      }
      continue;
    }

    break;
  }

  uint64_t v32 = 0LL;
  while (2)
  {
    if (*(__int16 *)(v12[1] + 2 * v32) != -2)
    {
LABEL_43:
      if (++v32 >= (unint64_t)v31)
      {
        uint64_t v21 = *v20;
        uint64_t v14 = a1;
        __int16 v19 = v76;
        goto LABEL_24;
      }

      continue;
    }

    break;
  }

  v33 = *(void *)(v30 + 24 * v32 + 8);
  uint64_t v34 = v24;
  while (1)
  {
    uint64_t v35 = *((_DWORD *)v34 + 1);
    if ((v35 & 0x82000) == 0) {
      break;
    }
    if ((v35 & 0x80000) != 0)
    {
      uint64_t v34 = *(unsigned __int8 **)(*((void *)v34 + 4) + 8LL);
      if (!v34) {
        break;
      }
    }

    else
    {
      uint64_t v34 = (unsigned __int8 *)*((void *)v34 + 2);
      if (!v34) {
        break;
      }
    }
  }

  if (v33)
  {
    while (1)
    {
      uint64_t v36 = *(_DWORD *)(v33 + 4);
      if ((v36 & 0x82000) == 0) {
        break;
      }
      if ((v36 & 0x80000) != 0)
      {
        v33 = *(void *)(*(void *)(v33 + 32) + 8LL);
        if (!v33) {
          break;
        }
      }

      else
      {
        v33 = *(void *)(v33 + 16);
        if (!v33) {
          break;
        }
      }
    }
  }

  if (sub_18131BA10(0LL, v34, (unsigned __int8 *)v33, v87))
  {
    uint64_t v31 = *((_WORD *)v12 + 47);
    goto LABEL_43;
  }

  v23 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = (uint64_t)v90;
  __int16 v19 = v76;
LABEL_60:
  uint64_t v37 = *(unsigned __int16 *)((char *)v12 + 99);
  if ((~v37 & 3) == 0)
  {
    *(_DWORD *)(v2 + 48) = 256;
    if (v23) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v17;
    }
    *(_BYTE *)(v2 + 17) = v38;
    *(_WORD *)(v2 + 20) = v19 + 16;
    if (*(_BYTE *)(v85 + 63) == 2 || (*(_BYTE *)(v85 + 49) & 0x40) != 0) {
      *(_DWORD *)(v2 + 48) = 33554688;
    }
    uint64_t v3 = v81;
    uint64_t v39 = v19;
    sub_181336840(v81, v2, (__int16)v19);
    goto LABEL_119;
  }

  if ((v37 & 0x20) != 0)
  {
LABEL_76:
    uint64_t v43 = 576;
LABEL_77:
    uint64_t v40 = 0LL;
    *(_DWORD *)(v2 + 48) = v43;
    unsigned int v44 = v17;
    if (!v23) {
      goto LABEL_88;
    }
LABEL_78:
    if ((*(_BYTE *)(v85 + 48) & 0x80) != 0
      || v12[9]
      || (*v89 & 2) != 0
      || (uint64_t v3 = v81, !v40)
      && (*(_WORD *)((_BYTE *)v12 + 99) & 4) == 0
      && *((__int16 *)v12 + 46) < *(__int16 *)(v85 + 60)
      && (*(_WORD *)(v15 + 60) & 4) == 0
      && byte_18C465387
      && (*(_BYTE *)(**(void **)v15 + 96LL) & 0x20) == 0)
    {
      unsigned int v44 = 0;
      goto LABEL_88;
    }

LABEL_181:
    v106 = v339;
    if (*((_DWORD *)v2 + 12)) {
      return 2LL;
    }
LABEL_182:
    v132 = (int *)*((void *)v105 + 9);
    if ((*(_WORD *)((_BYTE *)v105 + 61) & 0x400) != 0)
    {
      if (*v132 < 1) {
        goto LABEL_133;
      }
      uint64_t v133 = 0LL;
      uint64_t v346 = *v2;
      uint64_t v336 = v107;
      v327 = (int *)*((void *)v105 + 9);
LABEL_188:
      v134 = *(unsigned __int8 **)&v132[4 * v133 + 2];
      uint64_t v343 = v133;
      if (v134 && (int v135 = *v134) != 0)
      {
        unsigned __int8 v136 = 0;
        v137 = v134 + 1;
        do
        {
          v136 += byte_1813C6343[v135];
          int v138 = *v137++;
          int v135 = v138;
        }

        while (v138);
      }

      else
      {
        unsigned __int8 v136 = 0;
      }

      int v139 = *(__int16 *)(v107 + 54);
      if (v139 < 1)
      {
LABEL_253:
        LOBYTE(v312) = (_BYTE)v134;
        v61 = "cannot join using column %s - column not present in both tables";
        goto LABEL_492;
      }

      unsigned int v140 = 0;
      uint64_t v141 = *(void *)(v107 + 8);
      while (*(unsigned __int8 *)(v141 + 11) != v136)
      {
LABEL_196:
        v141 += 16LL;
        if (++v140 == v139) {
          goto LABEL_253;
        }
      }

      for (uint64_t k = 0LL; ; ++k)
      {
        uint64_t v143 = *(unsigned __int8 *)(*(void *)v141 + k);
        uint64_t v144 = v134[k];
        if ((_DWORD)v143 == (_DWORD)v144)
        {
          if (!*(_BYTE *)(*(void *)v141 + k))
          {
            if (!sub_181322F64( (uint64_t)v103,  0,  v104,  v134,  v353,  (unsigned int *)&v352,  (*(unsigned __int16 *)((char *)v105 + 61) >> 12) & 1)) {
              goto LABEL_253;
            }
            int v145 = v352;
            v146 = (unsigned __int8 *)sub_1813230AC(v346, (uint64_t)v103, v353[0], v352);
            if ((*(_WORD *)((_BYTE *)&v103[26 * v353[0] + 17] + 1) & 0x2000) != 0)
            {
              uint64_t v147 = *(void *)(*(void *)&v103[26 * v353[0] + 12] + 32LL) + 24LL * v145;
              *(_WORD *)(v147 + 25) |= 0x40u;
            }

            if ((v103[17] & 0x40) == 0
              || !sub_181322F64( (uint64_t)v103,  v353[0] + 1,  v104,  v134,  v353,  (unsigned int *)&v352,  (*(unsigned __int16 *)((char *)v105 + 61) >> 12) & 1))
            {
              goto LABEL_237;
            }

            v154 = 0LL;
LABEL_210:
            if ((*(_WORD *)((_BYTE *)&v103[26 * v353[0] + 17] + 1) & 0x400) != 0)
            {
              v155 = *(unsigned int **)&v103[26 * v353[0] + 20];
              uint64_t v156 = *v155;
              if ((int)v156 >= 1)
              {
                uint64_t v157 = 0LL;
LABEL_213:
                for (uint64_t m = 0LL; ; ++m)
                {
                  uint64_t v159 = *(unsigned __int8 *)(*(void *)&v155[4 * v157 + 2] + m);
                  uint64_t v160 = v134[m];
                  if ((_DWORD)v159 == (_DWORD)v160)
                  {
                    if (!*(_BYTE *)(*(void *)&v155[4 * v157 + 2] + m))
                    {
                      if ((v157 & 0x80000000) != 0) {
                        break;
                      }
                      if (!v154)
                      {
                        v163 = (int *)sub_18133E190((void *)*v350, v146);
LABEL_227:
                        v154 = v163;
                        goto LABEL_228;
                      }

                      int v161 = *v154;
                      if (v154[1] <= *v154)
                      {
                        v163 = sub_18133E1F4(*v350, v154, v146);
                        goto LABEL_227;
                      }

                      int *v154 = v161 + 1;
                      v162 = &v154[6 * v161];
                      *((void *)v162 + 2) = 0LL;
                      *((void *)v162 + 3) = 0LL;
                      *((void *)v162 + 1) = v146;
LABEL_228:
                      int v164 = v352;
                      v146 = (unsigned __int8 *)sub_1813230AC(v346, (uint64_t)v103, v353[0], v352);
                      int v165 = v353[0];
                      if ((*(_WORD *)((_BYTE *)&v103[26 * v353[0] + 17] + 1) & 0x2000) != 0)
                      {
                        uint64_t v166 = *(void *)(*(void *)&v103[26 * v353[0] + 12] + 32LL) + 24LL * v164;
                        *(_WORD *)(v166 + 25) |= 0x40u;
                        int v165 = v353[0];
                      }

                      if (!sub_181322F64( (uint64_t)v103,  v165 + 1,  v104,  v134,  v353,  (unsigned int *)&v352,  (*(unsigned __int16 *)((char *)v105 + 61) >> 12) & 1)) {
                        goto LABEL_231;
                      }
                      goto LABEL_210;
                    }
                  }

                  else if (byte_1813C6343[v159] != byte_1813C6343[v160])
                  {
                    if (++v157 != v156) {
                      goto LABEL_213;
                    }
                    break;
                  }
                }
              }
            }

            sub_1812DC47C( (uint64_t)v350,  "ambiguous reference to %s in USING()",  v148,  v149,  v150,  v151,  v152,  v153,  (char)v134);
LABEL_231:
            if (v154)
            {
              int v167 = *v154;
              if (v154[1] <= *v154)
              {
                uint64_t v169 = (uint64_t)v350;
                v154 = sub_18133E1F4(*v350, v154, v146);
              }

              else
              {
                int *v154 = v167 + 1;
                v168 = &v154[6 * v167];
                *((void *)v168 + 2) = 0LL;
                *((void *)v168 + 3) = 0LL;
                *((void *)v168 + 1) = v146;
                uint64_t v169 = (uint64_t)v350;
              }

              v146 = (unsigned __int8 *)sub_18129F3DC(v169, v154, &off_189B6E6A8, 0);
              v2 = (uint64_t *)v169;
            }

            else
            {
              v2 = v350;
            }

        v100 = (void (**)(unsigned __int8 *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
          --qword_18C468B10;
          off_18C4653A8(v33);
          v33 = (char **)xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            v100 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
            goto LABEL_186;
          }
        }

        else
        {
LABEL_186:
          (*v100)((unsigned __int8 *)v33);
        }

        if (!v51) {
          return v132;
        }
LABEL_188:
        v33 = (char **)v50;
        if (v50)
        {
LABEL_189:
          v101 = *(void *)(v5 + 56);
          v102 = 8LL * v142;
          v33[3] = *(char **)(v101 + v102);
          *(void *)(v101 + v102) = v33;
          ++*(_DWORD *)(v5 + 48);
        }
      }

      goto LABEL_190;
    }

    uint64_t v54 = v48 == 18 || v48 == 23;
    if (v7 == 18 && v54) {
      goto LABEL_189;
    }
    uint64_t v55 = v7 == 9 || v7 == 23;
    if (v55 && v48 == 9) {
      goto LABEL_189;
    }
    if (v7 != 9 || v48 != 18)
    {
      v137 = *(_DWORD *)(a1 + 88);
      __src = v33[2];
      v67 = *((int *)v33 + 2);
      if (!sqlite3_initialize())
      {
        v68 = sub_18126F0AC(v47 + v67 + 32);
        if (v68)
        {
          uint64_t v50 = (_DWORD *)v68;
          *(_OWORD *)v68 = 0u;
          *(_OWORD *)(v68 + 16) = 0u;
          v69 = v143;
          v70 = v137;
          if (v143) {
            v69 = *((_BYTE *)v33 + 1) != 0;
          }
          uint64_t v71 = v46;
          *(_BYTE *)(v68 + 1) = v69;
          uint64_t v72 = v68 + 32;
          *(void *)(v68 + 16) = v68 + 32;
          uint64_t v147 = v68 + 32;
          if (v48 == 18)
          {
            *(_BYTE *)v68 = 18;
            if (v137)
            {
              a2 = v140;
            }

            else
            {
              unsigned int v123 = *(_DWORD *)(v5 + 16);
              a2 = v140;
              if (v123 >= 1)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v125 = (unsigned __int8 *)(v71 + 1);
                    uint64_t v124 = *v71;
                    else {
                      v71 += 9;
                    }
                    if (!--v123) {
                      goto LABEL_128;
                    }
                  }

                  v126 = *v125;
                  if ((v126 & 0x80) != 0)
                  {
                    uint64_t v128 = v71[2];
                    if (v71[2] < 0)
                    {
                      size_t v129 = v71[3];
                      if (v129 < 0)
                      {
                        unint64_t v130 = sub_18129BD74(v71 + 1, &v148);
                        if (HIDWORD(v148)) {
                          v126 = -1;
                        }
                        else {
                          v126 = v148;
                        }
                        uint64_t v127 = v130;
                      }

                      else
                      {
                        v126 = v129 & 0x7F | (v126 << 14) & 0x1FC07F | ((v128 & 0x7F) << 7);
                        uint64_t v127 = 3LL;
                      }
                    }

                    else
                    {
                      v126 = ((v126 & 0x7F) << 7) | v128;
                      uint64_t v127 = 2LL;
                    }
                  }

                  else
                  {
                    uint64_t v127 = 1LL;
                  }

                  uint64_t v71 = (char *)&v125[v127 + v126];
                  --v123;
                }

                while (v123);
              }
            }

LABEL_237:
            uint64_t v170 = sub_1813230AC(v346, (uint64_t)v103, (int)v104 + 1, v140);
            if ((*(_WORD *)((_BYTE *)v105 + 61) & 0x2000) != 0)
            {
              uint64_t v171 = *(void *)(*((void *)v105 + 5) + 32LL) + 24LL * v140;
              *(_WORD *)(v171 + 25) |= 0x40u;
            }

            uint64_t v172 = sub_1813132BC(v2, 53, (uint64_t)v146, v170);
            if (v172)
            {
              *(_DWORD *)(v172 + 4) |= __sa;
              *(_DWORD *)(v172 + 56) = *(_DWORD *)(v170 + 44);
            }

            *(void *)(a2 + 48) = sub_1813152F8(v2, *(void *)(a2 + 48), v172);
            uint64_t v133 = v343 + 1;
            v132 = v327;
            uint64_t v107 = v336;
            v106 = v339;
            if (v343 + 1 >= *v327) {
              goto LABEL_133;
            }
            goto LABEL_188;
          }
        }

        else if (byte_1813C6343[v143] != byte_1813C6343[v144])
        {
          goto LABEL_196;
        }
      }
    }

    if (v132)
    {
      sub_1813231A8(*((void *)v105 + 9), v105[16], __sa);
      *(void *)(a2 + 48) = sub_1813152F8(v2, *(void *)(a2 + 48), *((void *)v105 + 9));
      *((void *)v105 + 9) = 0LL;
      *(_WORD *)((char *)v105 + 61) |= 0x800u;
    }

        if (sub_181268E88(*(void *)(v113 + 48) + 32LL, *(unsigned __int8 **)v113, v113))
        {
          sub_1812D84D8(v14, v164, v165, v166, v167, v168, v169, v170);
          goto LABEL_268;
        }

        *(_DWORD *)(v14 + 44) |= 1u;
      }

      else
      {
        if (!a4 && (v28[6] & 0x80) != 0) {
          goto LABEL_293;
        }
        v180 = (*((_DWORD *)a1 + 14) + 1);
        *((_DWORD *)a1 + 14) = v180;
        int v181 = sub_1812B9B34((uint64_t *)a1, v150, v151, v152, v153, v154, v155, v156);
        if (!v181)
        {
          uint64_t v11 = 0LL;
          v113 = v237;
          goto LABEL_156;
        }

        v182 = v181;
        sub_18131EC34((uint64_t)a1, 1, v238);
        *(_DWORD *)(v237 + 88) = sub_181319B54(v182, 184LL, v183, v184, v185, v186, v187, v188);
        sub_181279C3C(v182, 147LL, v238, v180, 2LL, v189, v190, v191);
        if (v228)
        {
          v198 = " UNIQUE";
          if (!v229) {
            v198 = &byte_1813CEAEE;
          }
          int v199 = sub_18127F588(v14, "CREATE%s INDEX %.*s", v192, v193, v194, v195, v196, v197, (char)v198);
        }

        else
        {
          int v199 = 0LL;
        }

        sub_1812C742C( (uint64_t *)a1,  "INSERT INTO %Q.sqlite_master VALUES('index',%Q,%Q,#%d,%Q);",
          v192,
          v193,
          v194,
          v195,
          v196,
          v197,
          *(void *)(*(void *)(v14 + 32) + 32 * v238));
        if (v199) {
          sub_1812F20DC((void *)v14, v199);
        }
        if (a4)
        {
          sub_181323D98((uint64_t)a1, v237, v180, v200, v201, v202, v203, v204);
          sub_181320254((uint64_t *)a1, v238, v205, v206, v207, v208, v209, v210);
          v217 = sub_18127F588(v14, "name='%q' AND type='index'", v211, v212, v213, v214, v215, v216, *(void *)v237);
          sub_1813202C4(v182, v238, (uint64_t)v217, 0, v218, v219, v220, v221);
          sub_1813103F4(v182, 166LL, 0LL, 1LL, v222, v223, v224, v225);
        }

        if (*(_BYTE *)(*(void *)v182 + 103LL)) {
          BOOL v226 = &byte_18C550680;
        }
        else {
          BOOL v226 = (char *)(*(void *)(v182 + 136) + 40LL * *(int *)(v237 + 88));
        }
        *((_DWORD *)v226 + 2) = *(_DWORD *)(v182 + 144);
      }

      v113 = v237;
    }

    if (a4 && !*(_BYTE *)(v14 + 197))
    {
      if (*((unsigned __int8 *)a1 + 302) >= 2u)
      {
        uint64_t v11 = 0LL;
        a1[44] = (void *)v113;
        goto LABEL_98;
      }

      uint64_t v11 = 0LL;
LABEL_156:
      if (v113) {
        goto LABEL_157;
      }
      goto LABEL_98;
    }

                    int v80 = sub_181375BFC(a1, a3, a4);
                    v23 = 0;
LABEL_238:
                    unsigned int v208 = v80;
                    if (v80) {
                      goto LABEL_131;
                    }
LABEL_30:
                    uint64_t v24 = (uint64_t)&v21[v22];
                    v25 = (sqlite3_stmt *)*a3;
                    if (*a3)
                    {
                      if (((0xAAAAAAAAAAAAAAAALL >> *((_WORD *)v25 + 10)) & 1) != 0)
                      {
                        uint64_t v26 = 0;
LABEL_52:
                        if (a2 < 2 || v26)
                        {
LABEL_129:
                          if (*(_BYTE *)(a1 + 460)) {
                            sub_181376150((int *)&v208, a1, v24, (uint64_t)v21, v207);
                          }
                          goto LABEL_131;
                        }

                        uint64_t v31 = a3[*(int *)(a1 + 48) + 4];
                        if (v31)
                        {
                          uint64_t v32 = *(_WORD *)(v31 + 20);
                          if ((v32 & 0x24) != 0)
                          {
                            v33 = *(void *)v31;
                            goto LABEL_78;
                          }

                          if ((v32 & 8) != 0)
                          {
                            v65 = *(double *)v31;
                            if (*(double *)v31 >= -9.22337204e18)
                            {
                              if (v65 <= 9.22337204e18) {
                                v33 = (uint64_t)v65;
                              }
                              else {
                                v33 = 0x7FFFFFFFFFFFFFFFLL;
                              }
                            }

                            else
                            {
                              v33 = 0x8000000000000000LL;
                            }

LABEL_246:
  v173 = v314;
  uint64_t v174 = *v314;
  if ((int)v174 < 1)
  {
    int v176 = 0;
    uint64_t v178 = a2;
    uint64_t v179 = v351;
    v182 = *(int **)(a2 + 32);
    goto LABEL_482;
  }

  unint64_t v175 = 0LL;
  int v176 = 0;
  uint64_t v177 = 24 * v174;
  uint64_t v178 = a2;
  uint64_t v179 = v351;
  while (1)
  {
    v180 = *(unsigned __int8 **)&v314[v175 / 4 + 2];
    int v181 = *v180;
    if (v181 == 141) {
      int v181 = **((unsigned __int8 **)v180 + 3);
    }
    if (v181 == 180) {
      break;
    }
    v176 |= *((_DWORD *)v180 + 1);
    v175 += 24LL;
    if (v177 == v175)
    {
      v182 = *(int **)(a2 + 32);
      goto LABEL_482;
    }
  }

  v183 = v2;
  v182 = 0LL;
  v315 = v314 + 2;
  uint64_t v323 = *(void *)(*v183 + 48) & 0x44LL;
  uint64_t v184 = 0LL;
  while (2)
  {
    int v316 = v176;
    uint64_t v318 = v184;
    v190 = &v315[6 * v184];
    int v317 = *(_DWORD *)(*(void *)v190 + 4LL);
    v319 = *(_DWORD **)v190;
    int v191 = **(unsigned __int8 **)v190;
    if (v191 == 180)
    {
      v337 = 0LL;
      v192 = *(unsigned __int8 **)v190;
LABEL_273:
      int v195 = *v341;
      if (*v341 < 1)
      {
        int v189 = v316;
        char v310 = (char)v337;
        if (v337) {
          goto LABEL_475;
        }
        goto LABEL_480;
      }

      int v196 = 0;
      int v197 = 0;
      int v324 = *((_DWORD *)v192 + 14);
      v198 = v341 + 2;
LABEL_278:
      uint64_t v200 = *((void *)v198 + 4);
      v344 = (const char *)*((void *)v198 + 3);
      if (!v344) {
        v344 = *(const char **)v200;
      }
      if (*(_BYTE *)(v179 + 103))
      {
LABEL_473:
        uint64_t v178 = a2;
        v173 = v314;
        int v189 = v316;
        uint64_t v188 = v318;
        if (v197) {
          goto LABEL_263;
        }
        char v310 = (char)v337;
        if (v337)
        {
LABEL_475:
          sub_1812DC47C((uint64_t)v350, "no such table: %s", (uint64_t)v10, v11, v12, v13, v14, v15, v310);
LABEL_481:
          uint64_t v188 = v318;
          goto LABEL_263;
        }

                  ++v139;
                  ++v140;
                  goto LABEL_247;
                }

                break;
              }

              if (*v139) {
                goto LABEL_246;
              }
              if ((v138 & 0x80000000) != 0) {
                goto LABEL_279;
              }
              if ((v110[15] & 0x10) == 0) {
                goto LABEL_233;
              }
              if ((v110[15] & 8) != 0)
              {
                sub_181320E20((uint64_t *)v374, v391, v103, *((__int16 *)v15 + 24));
                uint64_t v42 = __srcb;
                goto LABEL_282;
              }

              if (v391[0])
              {
                sub_181311F48((void *)v379, (void *)v391[0]);
                uint64_t v42 = __srcb;
              }

              int v109 = 0;
LABEL_281:
              v391[0] = 0LL;
LABEL_282:
              ++v109;
              else {
                uint64_t v151 = (__int16)v130;
              }
              uint64_t v39 = v381;
              *((_DWORD *)v15 + 12) = v151;
              uint64_t v41 = v385;
              if ((*(_WORD *)((_BYTE *)v110 + 61) & 0x2000) == 0)
              {
                v103 = (uint64_t)v110;
                goto LABEL_287;
              }

              uint64_t v152 = *(void *)(*((void *)v110 + 5) + 32LL) + 24LL * v130;
              *(_WORD *)(v152 + 25) |= 0x40u;
              v103 = (uint64_t)v110;
              if (!v109)
              {
LABEL_288:
                if ((*(_DWORD *)(v111 + 48) & 0x200) == 0) {
                  v103 = (uint64_t)v110;
                }
                v105 += ((*(_DWORD *)(v111 + 48) & 0x200u) >> 9) ^ 1;
              }

              v100 = v323;
LABEL_247:
              ++v204;
              uint64_t v205 = (v205 + 1);
              uint64_t v203 = *(__int16 *)(v23 + 54);
              if (v204 >= v203) {
                goto LABEL_283;
              }
            }

            ++v327;
            if ((v207 & 0x20) != 0)
            {
              LODWORD(v205) = v205 - 1;
              goto LABEL_247;
            }

            if ((v207 & 0x40) != 0)
            {
              if ((v337 & 1) == 0) {
                goto LABEL_247;
              }
LABEL_245:
              sub_181319BA8(v100, 76LL, v205, v69, v70, v71, v82, v75);
              goto LABEL_246;
            }

            if (!a4) {
              goto LABEL_269;
            }
LABEL_255:
            unsigned int v208 = *a4;
            v69 = 0LL;
            uint64_t v209 = (int *)(a4 + 4);
            while (1)
            {
              v210 = *v209;
              v209 += 4;
              if (v204 == v210) {
                goto LABEL_265;
              }
              if (v208 == ++v69) {
                goto LABEL_269;
              }
            }
          }

LABEL_480:
        sub_1812DC47C((uint64_t)v350, "no tables specified", (uint64_t)v10, v11, v12, v13, v14, v15, v312);
        goto LABEL_481;
      }

      if ((*(_WORD *)((_BYTE *)v198 + 61) & 0x2000) != 0)
      {
        __sb = 0LL;
        uint64_t v340 = *(void *)(*((void *)v198 + 5) + 32LL);
      }

      else
      {
        if (v337)
        {
          v201 = v344;
          for (n = v337; ; ++n)
          {
            uint64_t v203 = *n;
            uint64_t v204 = *(unsigned __int8 *)v201;
            if ((_DWORD)v203 == (_DWORD)v204)
            {
              if (!*n) {
                break;
              }
            }

            else if (byte_1813C6343[v203] != byte_1813C6343[v204])
            {
              int v199 = v196 + 1;
              goto LABEL_277;
            }

            ++v201;
          }
        }

        uint64_t v205 = *(void *)(v200 + 96);
        if (!v205) {
          goto LABEL_294;
        }
        uint64_t v206 = *(void *)(v179 + 32);
        v207 = (uint64_t *)(v206 + 24);
        unsigned int v208 = -1;
        do
        {
          uint64_t v209 = *v207;
          v207 += 4;
          ++v208;
        }

        while (v209 != v205);
        if ((v208 & 0x80000000) != 0)
        {
LABEL_294:
          uint64_t v340 = 0LL;
          v210 = "*";
        }

        else
        {
          uint64_t v340 = 0LL;
          v210 = *(const char **)(v206 + 32LL * v208);
        }

        __sb = (char *)v210;
      }

      int v199 = v196 + 1;
      if (v196 + 1 >= v195)
      {
        v211 = 0LL;
        goto LABEL_321;
      }

      v211 = 0LL;
      if ((*(_WORD *)((_BYTE *)v198 + 165) & 0x400) != 0 && (v349 & 0x800) != 0)
      {
        v211 = (int *)*((void *)v198 + 22);
        if (*v211 >= 1)
        {
          int v325 = v196;
          int v328 = v197;
          int v321 = v196 + 1;
          v347 = v198;
          uint64_t v212 = 0LL;
          uint64_t v213 = 2LL;
          while (1)
          {
            v218 = v211;
            v219 = *(const void **)&v211[v213];
            if (v219) {
              size_t v220 = strlen(*(const char **)&v211[v213]) & 0x3FFFFFFF;
            }
            else {
              size_t v220 = 0LL;
            }
            uint64_t v221 = sub_1812F2264(v351, v220 + 81);
            uint64_t v222 = v221;
            if (!v221) {
              goto LABEL_311;
            }
            *(_OWORD *)(v221 + 48) = 0u;
            *(_OWORD *)(v221 + 64) = 0u;
            *(_OWORD *)(v221 + 16) = 0u;
            *(_OWORD *)(v221 + 32) = 0u;
            *(_OWORD *)uint64_t v221 = 0u;
            *(_BYTE *)uint64_t v221 = 59;
            *(_WORD *)(v221 + 52) = -1;
            uint64_t v223 = v221 + 80;
            *(void *)(v221 + 8) = v221 + 80;
            if (v220) {
              memcpy((void *)(v221 + 80), v219, v220);
            }
            *(_BYTE *)(v223 + v220) = 0;
            *(_DWORD *)(v222 + 40) = 1;
            if ((*(_BYTE *)(v222 + 4) & 3) == 0)
            {
              *(_DWORD *)(v222 + 56) = v324;
              if (v182)
              {
LABEL_312:
                int v224 = *v182;
                if (v182[1] > *v182)
                {
                  int *v182 = v224 + 1;
                  v214 = &v182[6 * v224];
                  *((void *)v214 + 2) = 0LL;
                  *((void *)v214 + 3) = 0LL;
                  *((void *)v214 + 1) = v222;
                }

                else
                {
                  v182 = sub_18133E1F4(*v350, v182, (unsigned __int8 *)v222);
                  if (!v182) {
                    goto LABEL_317;
                  }
                }

                goto LABEL_302;
              }
            }

            else
            {
LABEL_311:
              if (v182) {
                goto LABEL_312;
              }
            }

            v182 = (int *)sub_18133E190((void *)*v350, (unsigned __int8 *)v222);
            if (!v182)
            {
LABEL_317:
              uint64_t v179 = v351;
              goto LABEL_303;
            }

LABEL_302:
            int v215 = *v182;
            char v313 = (char)v219;
            uint64_t v179 = v351;
            v216 = sub_18127F588(v351, "..%s", (uint64_t)v10, v11, v12, v13, v14, v15, v313);
            v217 = &v182[6 * v215];
            *((void *)v217 - 1) = v216;
            *(_WORD *)((char *)v217 + 1) = *(_WORD *)((_BYTE *)v217 + 1) & 0xFF7C | 0x82;
LABEL_303:
            ++v212;
            v211 = v218;
            v213 += 4LL;
            if (v212 >= *v218)
            {
              v198 = v347;
              int v199 = v321;
              int v197 = v328;
              int v196 = v325;
              break;
            }
          }
        }
      }

LABEL_321:
      v326 = v211;
      int v322 = v199;
      v348 = v198;
      uint64_t v225 = 0LL;
      BOOL v226 = v196 != 0;
      v227 = v337;
      uint64_t v228 = v340;
      if (v337) {
        BOOL v226 = 0;
      }
      if (v340) {
        BOOL v229 = v337 != 0LL;
      }
      else {
        BOOL v229 = 0;
      }
      if ((v349 & 0x800) != 0) {
        BOOL v226 = 0;
      }
      BOOL v329 = v226;
      int v320 = ~v196;
      uint64_t v230 = a2;
LABEL_332:
      uint64_t v231 = *(void *)(v200 + 8);
      v232 = *(const char **)(v231 + 16 * v225);
      if (v229)
      {
        if ((*(_WORD *)(v228 + 24 * v225 + 25) & 3) != 2) {
          goto LABEL_331;
        }
        uint64_t v233 = 0LL;
        v234 = *(_BYTE **)(v228 + 24 * v225 + 16);
        unsigned int v235 = 1;
        int v236 = *v234;
        if (*v234)
        {
          do
          {
            if (v236 == 46) {
              break;
            }
            ++v233;
            ++v235;
            int v236 = v234[v233];
          }

          while (v234[v233]);
        }

        uint64_t v237 = 0LL;
        v238 = &v234[(v233 + 1)];
        v239 = &v234[v235];
        int v240 = 1;
        int v241 = *v239;
        if (*v239)
        {
          do
          {
            if (v241 == 46) {
              break;
            }
            ++v237;
            ++v240;
            int v241 = v239[v237];
          }

          while (v239[v237]);
        }

        if ((_DWORD)v237)
        {
          v242 = v227;
          while (1)
          {
            uint64_t v243 = *v238;
            if (!*v238) {
              break;
            }
            LODWORD(v243) = byte_1813C6343[v243];
            int v244 = byte_1813C6343[*v242];
            if ((_DWORD)v243 != v244) {
              goto LABEL_364;
            }
            ++v238;
            ++v242;
          }

          int v244 = byte_1813C6343[*v242];
LABEL_364:
          if ((_DWORD)v243 != v244) {
            goto LABEL_331;
          }
        }

LABEL_330:
        if (v227[v237]) {
          goto LABEL_331;
        }
      }

      __int16 v245 = *(_WORD *)(v231 + 16 * v225 + 14);
      if ((*(_BYTE *)(v230 + 6) & 2) == 0 && (v245 & 2) != 0 || (v245 & 0x400) != 0 && !v227 && (v349 & 0x800) == 0) {
        goto LABEL_331;
      }
      if (!v329) {
        goto LABEL_367;
      }
      if ((*(_WORD *)((_BYTE *)v348 + 61) & 0x400) == 0) {
        goto LABEL_367;
      }
      v246 = (unsigned int *)*((void *)v348 + 9);
      uint64_t v247 = *v246;
      uint64_t v248 = 0LL;
LABEL_355:
      v249 = *(_BYTE **)&v246[4 * v248 + 2];
      for (ii = v232; ; ++ii)
      {
        uint64_t v251 = *v249;
        uint64_t v252 = *(unsigned __int8 *)ii;
        if ((_DWORD)v251 == (_DWORD)v252)
        {
          if (!*v249)
          {
            if ((v248 & 0x80000000) == 0) {
              goto LABEL_469;
            }
            goto LABEL_367;
          }
        }

        else if (byte_1813C6343[v251] != byte_1813C6343[v252])
        {
          if (++v248 != v247) {
            goto LABEL_355;
          }
LABEL_367:
          if (v232) {
            size_t v253 = strlen(v232) & 0x3FFFFFFF;
          }
          else {
            size_t v253 = 0LL;
          }
          uint64_t v254 = sub_1812F2264(v179, v253 + 81);
          uint64_t v255 = v254;
          if (v254)
          {
            *(_OWORD *)(v254 + 48) = 0u;
            *(_OWORD *)(v254 + 64) = 0u;
            *(_OWORD *)(v254 + 16) = 0u;
            *(_OWORD *)(v254 + 32) = 0u;
            *(_OWORD *)uint64_t v254 = 0u;
            *(_BYTE *)uint64_t v254 = 59;
            *(_WORD *)(v254 + 52) = -1;
            uint64_t v256 = v254 + 80;
            *(void *)(v254 + 8) = v254 + 80;
            if (v253) {
              memcpy((void *)(v254 + 80), v232, v253);
            }
            *(_BYTE *)(v256 + v253) = 0;
            *(_DWORD *)(v255 + 40) = 1;
          }

          if (*v341 >= 2)
          {
            if ((v348[15] & 0x40) == 0) {
              goto LABEL_394;
            }
            if ((v349 & 0x800) != 0) {
              goto LABEL_394;
            }
            int v257 = *v341 + v320;
            if (v257 < 1) {
              goto LABEL_394;
            }
            v258 = v348;
LABEL_381:
            if ((*(_WORD *)((_BYTE *)v258 + 165) & 0x400) == 0) {
              goto LABEL_380;
            }
            v260 = (unsigned int *)*((void *)v258 + 22);
            if (!v260) {
              goto LABEL_380;
            }
            uint64_t v261 = *v260;
            uint64_t v262 = 0LL;
LABEL_385:
            v263 = *(_BYTE **)&v260[4 * v262 + 2];
            for (juint64_t j = v232; ; ++jj)
            {
              uint64_t v265 = *v263;
              uint64_t v266 = *(unsigned __int8 *)jj;
              if ((_DWORD)v265 == (_DWORD)v266)
              {
                if (!*v263)
                {
                  if ((v262 & 0x80000000) == 0) {
                    break;
                  }
                  goto LABEL_380;
                }
              }

              else if (byte_1813C6343[v265] != byte_1813C6343[v266])
              {
                if (++v262 != v261) {
                  goto LABEL_385;
                }
LABEL_380:
                v258 += 26;
                if (v257-- > 1) {
                  goto LABEL_381;
                }
LABEL_394:
                if (v344) {
                  size_t v267 = strlen(v344) & 0x3FFFFFFF;
                }
                else {
                  size_t v267 = 0LL;
                }
                uint64_t v268 = sub_1812F2264(v351, v267 + 81);
                uint64_t v269 = v268;
                if (v268)
                {
                  *(_OWORD *)(v268 + 48) = 0u;
                  *(_OWORD *)(v268 + 64) = 0u;
                  *(_OWORD *)(v268 + 16) = 0u;
                  *(_OWORD *)(v268 + 32) = 0u;
                  *(_OWORD *)uint64_t v268 = 0u;
                  *(_BYTE *)uint64_t v268 = 59;
                  *(_WORD *)(v268 + 52) = -1;
                  uint64_t v270 = v268 + 80;
                  *(void *)(v268 + 8) = v268 + 80;
                  if (v267) {
                    memcpy((void *)(v268 + 80), v344, v267);
                  }
                  *(_BYTE *)(v270 + v267) = 0;
                  *(_DWORD *)(v269 + 40) = 1;
                }

                uint64_t v255 = sub_1813132BC(v350, 141, v269, v255);
                if (*((unsigned __int8 *)v350 + 302) >= 2u
                  && (uint64_t v271 = *((void *)v319 + 2)) != 0
                  && (v272 = (uint64_t *)v350[51]) != 0LL)
                {
                  while (*v272 != v271)
                  {
                    v272 = (uint64_t *)v272[3];
                    if (!v272) {
                      goto LABEL_406;
                    }
                  }

                  uint64_t *v272 = v269;
                  v273 = __sb;
                  if (!__sb) {
                    goto LABEL_412;
                  }
                }

                else
                {
LABEL_406:
                  v273 = __sb;
                  if (!__sb) {
                    goto LABEL_412;
                  }
                }

                size_t v274 = strlen(v273) & 0x3FFFFFFF;
                uint64_t v275 = sub_1812F2264(v351, v274 + 81);
                uint64_t v276 = v275;
                if (v275)
                {
                  *(_OWORD *)(v275 + 48) = 0u;
                  *(_OWORD *)(v275 + 64) = 0u;
                  *(_OWORD *)(v275 + 16) = 0u;
                  *(_OWORD *)(v275 + 32) = 0u;
                  *(_OWORD *)uint64_t v275 = 0u;
                  *(_BYTE *)uint64_t v275 = 59;
                  *(_WORD *)(v275 + 52) = -1;
                  uint64_t v277 = v275 + 80;
                  *(void *)(v275 + 8) = v275 + 80;
                  if (v274) {
                    memcpy((void *)(v275 + 80), __sb, v274);
                  }
                  *(_BYTE *)(v277 + v274) = 0;
                  *(_DWORD *)(v276 + 40) = 1;
                }

                uint64_t v255 = sub_1813132BC(v350, 141, v276, v255);
                goto LABEL_412;
              }

              ++v263;
            }
          }

LABEL_412:
          if (v255 && (*(_BYTE *)(v255 + 4) & 3) == 0)
          {
            *(_DWORD *)(v255 + 56) = v324;
            if (!v182) {
              goto LABEL_419;
            }
LABEL_415:
            int v278 = *v182;
            if (v182[1] <= *v182)
            {
              v280 = sub_18133E1F4(*v350, v182, (unsigned __int8 *)v255);
              goto LABEL_420;
            }

            int *v182 = v278 + 1;
            v279 = &v182[6 * v278];
            *((void *)v279 + 2) = 0LL;
            *((void *)v279 + 3) = 0LL;
            *((void *)v279 + 1) = v255;
            uint64_t v179 = v351;
LABEL_421:
            uint64_t v281 = *v182 - 1LL;
            if ((v349 & 0x800) == 0 || *((unsigned __int8 *)v350 + 302) > 1u)
            {
              if (v323 == 4)
              {
                v282 = sub_18127F588(v179, "%s.%s", (uint64_t)v10, v11, v12, v13, v14, v15, (char)v344);
                v283 = &v182[6 * v281];
                *((void *)v283 + 2) = v282;
                *(_WORD *)((char *)v283 + 25) &= 0xFFFCu;
                int v197 = 1;
                uint64_t v230 = a2;
LABEL_440:
                v227 = v337;
                uint64_t v228 = v340;
                goto LABEL_331;
              }

              if (v232)
              {
                size_t v284 = strlen(v232);
                unint64_t v285 = v284 + 1;
                if (v179)
                {
                  v286 = (void *)sub_1812F2264(v179, v285);
                  if (!v286) {
                    goto LABEL_439;
                  }
LABEL_438:
                  memcpy(v286, v232, v285);
                }

                else
                {
                  v286 = (void *)sub_18126F0AC(v284 + 1);
                  if (v286) {
                    goto LABEL_438;
                  }
                }
              }

              else
              {
                v286 = 0LL;
              }

LABEL_439:
              v292 = &v182[6 * v281];
              *((void *)v292 + 2) = v286;
              *(_WORD *)((char *)v292 + 25) &= 0xFFFCu;
              int v197 = 1;
              uint64_t v230 = a2;
              uint64_t v179 = v351;
              goto LABEL_440;
            }

            if (v340)
            {
              uint64_t v287 = v340 + 24 * v225;
              v288 = *(const void **)(v287 + 16);
              if (v288)
              {
                size_t v289 = strlen(*(const char **)(v287 + 16));
                unint64_t v290 = v289 + 1;
                if (v179)
                {
                  v291 = (void *)sub_1812F2264(v179, v290);
                  if (v291) {
                    goto LABEL_433;
                  }
                }

                else
                {
                  v291 = (void *)sub_18126F0AC(v289 + 1);
                  if (v291) {
LABEL_433:
                  }
                    memcpy(v291, v288, v290);
                }
              }

              else
              {
                v291 = 0LL;
              }
            }

            else
            {
              v291 = sub_18127F588(v179, "%s.%s.%s", (uint64_t)v10, v11, v12, v13, v14, v15, (char)__sb);
            }

            v293 = &v182[6 * v281];
            __int16 v295 = *(_WORD *)((char *)v293 + 25);
            v294 = (_WORD *)((char *)v293 + 25);
            *(void *)((char *)v294 - 9) = v291;
            __int16 v296 = v295 & 0xFFFC;
            _WORD *v294 = v295 & 0xFFFC | 2;
            uint64_t v230 = a2;
            v227 = v337;
            uint64_t v179 = v351;
            uint64_t v228 = v340;
            if ((*(_WORD *)((_BYTE *)v348 + 61) & 0x400) == 0) {
              goto LABEL_456;
            }
            v297 = (unsigned int *)*((void *)v348 + 9);
            uint64_t v298 = *v297;
            uint64_t v299 = 0LL;
LABEL_447:
            v300 = *(_BYTE **)&v297[4 * v299 + 2];
            for (kuint64_t k = v232; ; ++kk)
            {
              uint64_t v302 = *v300;
              uint64_t v303 = *(unsigned __int8 *)kk;
              if ((_DWORD)v302 == (_DWORD)v303)
              {
                if (!*v300)
                {
                  if ((v299 & 0x80000000) == 0) {
                    goto LABEL_470;
                  }
                  goto LABEL_456;
                }
              }

              else if (byte_1813C6343[v302] != byte_1813C6343[v303])
              {
                if (++v299 != v298) {
                  goto LABEL_447;
                }
LABEL_456:
                if (!v326) {
                  goto LABEL_468;
                }
                uint64_t v304 = *v326;
                uint64_t v305 = 0LL;
                while (2)
                {
                  v306 = *(_BYTE **)&v326[4 * v305 + 2];
                  v307 = v232;
LABEL_462:
                  uint64_t v308 = *v306;
                  uint64_t v309 = *(unsigned __int8 *)v307;
                  if ((_DWORD)v308 == (_DWORD)v309)
                  {
                    if (!*v306)
                    {
                      if ((v305 & 0x80000000) == 0) {
                        goto LABEL_470;
                      }
LABEL_468:
                      if ((*(_WORD *)(*(void *)(v200 + 8) + 16 * v225 + 14) & 0x400) == 0)
                      {
LABEL_469:
                        int v197 = 1;
                        goto LABEL_331;
                      }

      uint64_t v225 = (int)v8 - 2LL;
      switch(v13[v225])
      {
        case 'a':
          BOOL v226 = (v8 - 4);
          if (*(_DWORD *)&v13[v226] != 1818321769) {
            break;
          }
          v227 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v227 <= 0xA)
          {
            uint64_t v228 = 1;
            if (((1 << v227) & 0x495) != 0)
            {
              BOOL v229 = 0;
              goto LABEL_445;
            }
          }

          BOOL v229 = 1;
          if ((_DWORD)v8 == 5)
          {
            uint64_t v228 = 0;
            goto LABEL_445;
          }

          __int16 v349 = 1LL;
          while (1)
          {
            v350 = v13[v349];
            uint64_t v351 = (((v350 - 97) >> 1) | (((_BYTE)v350 - 97) << 7));
            v23 = v351 > 0xA;
            int v352 = (1 << v351) & 0x495;
            v353 = v23 || v352 == 0;
            if (!v353 || v350 == 121) {
              break;
            }
            if (v226 == ++v349)
            {
              uint64_t v228 = 0;
              BOOL v229 = v8 - 4;
              goto LABEL_445;
            }
          }

          uint64_t v228 = 1;
          BOOL v229 = v349;
LABEL_445:
          uint64_t v230 = v13[v229 + 1];
          uint64_t v231 = (((v230 - 97) >> 1) | (((_BYTE)v230 - 97) << 7));
          v23 = v231 > 0xA;
          v232 = (1 << v231) & 0x495;
          if (v23 || v232 == 0)
          {
            if (v230 != 121) {
              uint64_t v228 = 1;
            }
            if ((v228 & 1) != 0) {
              goto LABEL_586;
            }
          }

          v234 = v229 + 2LL;
          if ((int)v226 > (int)v234)
          {
            unsigned int v235 = &v13[v234];
            while (1)
            {
              int v236 = *v235++;
              uint64_t v237 = (((v236 - 97) >> 1) | ((v236 - 97) << 7));
              v23 = v237 > 0xA;
              v238 = (1 << v237) & 0x495;
              if (v23 || v238 == 0) {
                break;
              }
              LODWORD(v234) = v234 + 1;
            }

LABEL_470:
                      _WORD *v294 = v296 | 0x102;
                      int v197 = 1;
LABEL_331:
                      goto LABEL_332;
                    }
                  }

                  else if (byte_1813C6343[v308] != byte_1813C6343[v309])
                  {
                    if (++v305 != v304) {
                      continue;
                    }
                    goto LABEL_468;
                  }

                  break;
                }

                ++v306;
                ++v307;
                goto LABEL_462;
              }

              ++v300;
            }
          }

          if (v182) {
            goto LABEL_415;
          }
LABEL_419:
          v280 = (int *)sub_18133E190((void *)*v350, (unsigned __int8 *)v255);
LABEL_420:
          v182 = v280;
          uint64_t v179 = v351;
          if (v280) {
            goto LABEL_421;
          }
          int v197 = 1;
LABEL_276:
          v198 = v348;
          int v199 = v322;
LABEL_277:
          v198 += 26;
          int v195 = *v341;
          int v196 = v199;
          if (v199 >= *v341) {
            goto LABEL_473;
          }
          goto LABEL_278;
        }

        ++v249;
      }
    }

    if (v191 == 141)
    {
      v192 = (unsigned __int8 *)*((void *)v319 + 3);
      if (*v192 == 180)
      {
        v337 = *(_BYTE **)(*((void *)v319 + 2) + 8LL);
        goto LABEL_273;
      }
    }

    if (v182)
    {
      int v193 = *v182;
      if (v182[1] <= *v182)
      {
        v194 = sub_18133E1F4(*v350, v182, (unsigned __int8 *)v319);
        goto LABEL_477;
      }

      int *v182 = v193 + 1;
      v185 = &v182[6 * v193];
      *((void *)v185 + 2) = 0LL;
      *((void *)v185 + 3) = 0LL;
      *((void *)v185 + 1) = v319;
LABEL_261:
      v186 = &v315[6 * v318];
      v187 = &v182[6 * *v182];
      *((void *)v187 - 1) = *((void *)v186 + 1);
      *(_WORD *)((char *)v187 + 1) = *(_WORD *)((_BYTE *)v187 + 1) & 0xFFFC | *(_WORD *)((_BYTE *)v186 + 17) & 3;
      *((void *)v186 + 1) = 0LL;
      uint64_t v188 = v318;
    }

    else
    {
      v194 = (int *)sub_18133E190((void *)*v350, (unsigned __int8 *)v319);
LABEL_477:
      v182 = v194;
      uint64_t v188 = v318;
      if (v194) {
        goto LABEL_261;
      }
    }

    *(void *)v190 = 0LL;
    int v189 = v316;
LABEL_263:
    int v176 = v317 | v189;
    uint64_t v184 = v188 + 1;
    break;
  }

  sub_181311F48((void *)v179, v173);
  *(void *)(v178 + 32) = v182;
  if (!v182) {
    return 0LL;
  }
LABEL_482:
  if (*v182 > *(_DWORD *)(v179 + 144))
  {
    v61 = "too many columns in result set";
    uint64_t v311 = (uint64_t)v350;
    goto LABEL_493;
  }

  if ((v176 & 0x400008) == 0) {
    return 0LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)(v178 + 4) |= 0x40000u;
  return result;
}

uint64_t sub_1812871E4( uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a2 + 4);
  if ((v8 & 4) != 0) {
    return 1LL;
  }
  uint64_t v10 = a1[5];
  uint64_t v11 = *a1;
  if ((v8 & 0x40) != 0)
  {
    int v13 = 0;
    uint64_t v58 = *(void *)(a2 + 80);
    uint64_t v59 = *(void *)v11;
    __int128 v14 = 0uLL;
    uint64_t v15 = a2;
    while (1)
    {
      *(_DWORD *)(v15 + 4) |= 4u;
      uint64_t v64 = 0LL;
      __int128 v62 = v14;
      __int128 v63 = v14;
      v61 = (unsigned __int8 *)v11;
      uint64_t v65 = v15;
      uint64_t v22 = *(int **)(v15 + 40);
      if ((*(_BYTE *)(v15 + 6) & 1) != 0)
      {
        *(void *)(*((void *)v22 + 6) + 72LL) = *(void *)(v15 + 72);
        *(void *)(v15 + 72) = 0LL;
      }

      int v60 = v13;
      if (*v22 >= 1)
      {
        uint64_t v23 = 0LL;
        uint64_t v24 = 0LL;
        do
        {
          uint64_t v25 = *(void *)&v22[v23 + 12];
          if (v25 && (*(_BYTE *)(v25 + 4) & 4) == 0)
          {
            if (v10) {
              int v26 = *(_DWORD *)(v10 + 32);
            }
            else {
              int v26 = 0;
            }
            uint64_t v27 = *(void *)(v11 + 368);
            uint64_t v28 = *(void *)&v22[v23 + 6];
            if (v28) {
              *(void *)(v11 + 368) = v28;
            }
            v68 = sub_1812871E4;
            uint64_t v69 = 0LL;
            v66 = (unsigned __int8 *)v11;
            v67 = sub_1812876D8;
            v70 = (unsigned __int8 **)v10;
            sub_181285228(&v66, (void *)v25);
            *(void *)(v11 + 368) = v27;
            if (*(_DWORD *)(v11 + 48)) {
              return 2LL;
            }
            if (v10) {
              *(_WORD *)((char *)&v22[v23 + 17] + 1) = *(_WORD *)((_BYTE *)&v22[v23 + 17] + 1) & 0xFFF7 | (8 * (*(_DWORD *)(v10 + 32) > v26));
            }
          }

          ++v24;
          uint64_t v22 = *(int **)(v15 + 40);
          v23 += 26LL;
        }

        while (v24 < *v22);
      }

      LODWORD(v64) = 16385;
      *(void *)&__int128 v62 = v22;
      *(void *)&__int128 v63 = v10;
      uint64_t v29 = *(int **)(v15 + 56);
      if (v29 || (v64 & 0x10) != 0)
      {
        int v30 = v64 & 0xFFFFBFFF;
        *(_DWORD *)(v15 + 4) |= v64 & 0x8001000 | 8;
      }

      else
      {
        int v30 = v64 & 0xFFFFBFFE;
      }

      *((void *)&v62 + 1) = *(void *)(v15 + 32);
      LODWORD(v64) = v30 | 0x80;
      uint64_t v31 = *(void *)(v15 + 64);
      if (v31)
      {
        if ((*(_BYTE *)(v15 + 4) & 8) == 0)
        {
          v56 = "HAVING clause on a non-aggregate query";
          goto LABEL_74;
        }

        LODWORD(v64) = v30 & 0xF7FF2F6F | 0x80;
        uint64_t v32 = v61;
        v66 = v61;
        v67 = sub_1812876D8;
        v33 = sub_1812871E4;
        if ((v30 & 0x80000) != 0) {
          v33 = 0LL;
        }
        v68 = v33;
        uint64_t v69 = 0LL;
        v70 = &v61;
        int v34 = *((_DWORD *)v61 + 77) + *(_DWORD *)(v31 + 40);
        *((_DWORD *)v61 + 77) = v34;
        if (*(_DWORD *)(*(void *)v32 + 148LL) < v34)
        {
          sub_1812DC47C( (uint64_t)v32,  "Expression tree is too large (maximum depth %d)",  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(*(void *)v32 + 148LL));
          return 2LL;
        }

        int v35 = v30 & 0x8009010;
        sub_18131C57C((uint64_t)&v66, v31);
        uint64_t v36 = v66;
        *((_DWORD *)v66 + 77) -= *(_DWORD *)(v31 + 40);
        int v37 = v64;
        *(_DWORD *)(v31 + 4) |= v64 & 0x8010;
        LODWORD(v64) = v37 | v35;
      }

      uint64_t v39 = *(int **)(v15 + 40);
      int v40 = *v39;
      if (*v39 >= 1)
      {
        uint64_t v41 = 0LL;
        for (uint64_t i = 0LL; i < v40; ++i)
        {
          if ((*(_WORD *)((_BYTE *)&v39[v41 + 17] + 1) & 4) != 0)
          {
            uint64_t v39 = *(int **)(v15 + 40);
            int v40 = *v39;
          }

          v41 += 26LL;
        }
      }

      if (*(unsigned __int8 *)(v11 + 302) >= 2u)
      {
        uint64_t v43 = *(void *)(v15 + 120);
        if (v43)
        {
          while (!sub_1813206F0((uint64_t)&v61, *(int **)(v43 + 24), v38, a4, a5, a6, a7, a8)
               && !sub_1813206F0((uint64_t)&v61, *(int **)(v43 + 16), v44, v45, v46, v47, v48, v49))
          {
            uint64_t v43 = *(void *)(v43 + 64);
            if (!v43) {
              goto LABEL_47;
            }
          }

          return 2LL;
        }
      }

LABEL_66:
      uint64_t v55 = *(void *)(v15 + 88);
      if (v55 && **(_DWORD **)(v15 + 32) != **(_DWORD **)(v55 + 32))
      {
        sub_181321538(v11, (_BYTE *)v55, (uint64_t)a3, a4, a5, a6, a7, a8, v57);
        return 2LL;
      }

      uint64_t v15 = *(void *)(v15 + 80);
      int v13 = v60 + 1;
      if (!v15)
      {
        return 1LL;
      }
    }

    uint64_t v54 = v29 + 2;
    while ((*(_BYTE *)(*(void *)v54 + 4LL) & 0x10) == 0)
    {
      v54 += 6;
      if (!--v53) {
        goto LABEL_66;
      }
    }

    v56 = "aggregate functions are not allowed in the GROUP BY clause";
LABEL_74:
    sub_1812DC47C(v11, v56, (uint64_t)a3, a4, a5, a6, a7, a8, v57);
    return 2LL;
  }

  else
  {
    sub_181321444(*a1, a2, v10);
    if (*(_DWORD *)(v11 + 48)) {
      return 2LL;
    }
    else {
      return 1LL;
    }
  }

    uint64_t v166 = 0;
    uint64_t v59 = *((_DWORD *)v13 + 1);
    int v164 = v15;
    int v165 = v12;
    if ((v59 & 0x1000) == 0 || **(_DWORD **)(*((void *)v13 + 4) + 32LL) == 1)
    {
      int v60 = sub_1812B346C(v12, v13, 4LL, 0LL, 0LL, &v166);
      uint64_t v64 = v164;
      uint64_t v65 = v60;
      uint64_t v159 = 0LL;
      goto LABEL_138;
    }

    if ((v59 & 0x2000000) != 0 && *((_DWORD *)v13 + 11))
    {
      v66 = (unsigned __int8 *)*((void *)v13 + 2);
      v67 = *v66;
      if (v67 == 176) {
        v67 = v66[2];
      }
      if (v67 == 138)
      {
        v66 = (unsigned __int8 *)*((void *)v66 + 4);
      }

      else if (v67 != 177)
      {
        v68 = 1;
LABEL_125:
        v105 = *v12;
        v106 = 4LL * v68;
        if (v105) {
          uint64_t v107 = (void *)sub_1812F2264(v105, 4LL * v68);
        }
        else {
          uint64_t v107 = (void *)sub_18126F0AC(4LL * v68);
        }
        BOOL v108 = v107;
        uint64_t v159 = v107;
        if (v107)
        {
          bzero(v107, v106);
          BOOL v108 = v159;
        }

        uint64_t v65 = sub_1812B346C(v12, v13, 4LL, 0LL, v108, &v166);
        goto LABEL_137;
      }

      v68 = **((_DWORD **)v66 + 4);
      goto LABEL_125;
    }

    uint64_t v69 = *v12;
    v70 = sub_18129C928(*v12, v13, 0LL, 0LL);
    uint64_t v71 = v70;
    uint64_t v153 = v69;
    if (*(_BYTE *)(v69 + 103)) {
      goto LABEL_77;
    }
    uint64_t v73 = *((void *)v70 + 4);
    if (!v73) {
      goto LABEL_134;
    }
    uint64_t v151 = v29;
    uint64_t v152 = v28;
    v154 = v70;
    uint64_t v157 = v10;
    while (1)
    {
      if (v73 == *((void *)v71 + 4)) {
        uint64_t v74 = *(void **)(*((void *)v71 + 2) + 32LL);
      }
      else {
        uint64_t v74 = 0LL;
      }
      uint64_t v75 = *(void **)(v73 + 32);
      uint64_t v160 = v73;
      int v161 = v74;
      if (*(unsigned __int16 *)(v30 + 52) > v29)
      {
        uint64_t v76 = 0LL;
        __int16 v77 = 0LL;
        int v78 = v151;
        while (1)
        {
          int v80 = *(void *)(*(void *)(v30 + 64) + 8 * v78);
          v81 = *(int *)(v80 + 36) - 1LL;
          uint64_t v82 = &v75[3 * v81];
          v85 = (unsigned __int8 *)v82[1];
          v84 = v82 + 1;
          uint64_t v83 = v85;
          if (!v85) {
            goto LABEL_89;
          }
          if (v76)
          {
            uint64_t v86 = *v76;
            if (v76[1] > *v76)
            {
              *uint64_t v76 = v86 + 1;
              uint64_t v87 = &v76[6 * v86];
              *((void *)v87 + 2) = 0LL;
              *((void *)v87 + 3) = 0LL;
              *((void *)v87 + 1) = v83;
              _BYTE *v84 = 0LL;
              if (!v74) {
                goto LABEL_89;
              }
              goto LABEL_99;
            }

            v88 = sub_18133E1F4(*v165, v76, v83);
          }

          else
          {
            v88 = (int *)sub_18133E190((void *)*v165, v83);
          }

          uint64_t v74 = v161;
          uint64_t v76 = v88;
          _BYTE *v84 = 0LL;
          if (!v161) {
            goto LABEL_89;
          }
LABEL_99:
          int v89 = &v74[3 * v81];
          uint64_t v92 = (unsigned __int8 *)v89[1];
          uint64_t v91 = v89 + 1;
          v90 = v92;
          if (v77)
          {
            uint64_t v93 = *v77;
            if (v77[1] > *v77)
            {
              *__int16 v77 = v93 + 1;
              uint64_t v94 = &v77[6 * v93];
              v94[2] = 0LL;
              v94[3] = 0LL;
              v94[1] = v90;
              goto LABEL_88;
            }

            v79 = sub_18133E1F4(*v165, v77, v90);
          }

          else
          {
            v79 = sub_18133E190((void *)*v165, v90);
          }

          uint64_t v74 = v161;
          __int16 v77 = v79;
LABEL_88:
          *uint64_t v91 = 0LL;
LABEL_89:
        }
      }

      __int16 v77 = 0LL;
      uint64_t v76 = 0LL;
LABEL_104:
      if (v75)
      {
        sub_181311F48((void *)v153, v75);
        uint64_t v74 = v161;
      }

      uint64_t v12 = v165;
      if (v74)
      {
        sub_181311F48((void *)v153, v74);
        *(void *)(*((void *)v154 + 2) + 32LL) = v77;
      }

      uint64_t v10 = v157;
      uint64_t v95 = v160;
      *(void *)(v160 + 32) = v76;
      if (v77 && *v77 == 1)
      {
        uint64_t v96 = *((void *)v77 + 1);
        *((void *)v77 + 1) = 0LL;
        int v97 = (unsigned __int8 *)*((void *)v154 + 2);
        if (v97) {
          sub_181309110((void *)v153, v97);
        }
        *((void *)v154 + 2) = v96;
        uint64_t v95 = v160;
      }

      v98 = *(unsigned int **)(v95 + 72);
      uint64_t v29 = a4;
      uint64_t v28 = v152;
      uint64_t v71 = v154;
      if (!v98) {
        goto LABEL_80;
      }
      v99 = *v98;
      if ((_DWORD)v99 == 1)
      {
        v100 = 0LL;
      }

      else
      {
        v100 = v99 & 0xFFFFFFFE;
        v101 = v98 + 13;
        v102 = v100;
        do
        {
          *(v101 - 12) = 0;
          int *v101 = 0;
          v101 += 24;
          v102 -= 2LL;
        }

        while (v102);
        if (v100 == v99) {
          goto LABEL_80;
        }
      }

      v103 = v99 - v100;
      uint64_t v104 = &v98[6 * v100 + 7];
      do
      {
        *(_WORD *)uint64_t v104 = 0;
        v104 += 6;
        --v103;
      }

      while (v103);
LABEL_80:
      uint64_t v73 = *(void *)(v95 + 80);
      if (!v73)
      {
        if (!*(_BYTE *)(v153 + 103))
        {
LABEL_134:
          uint64_t v72 = sub_181268E34(*v12, 4LL * v50);
          uint64_t v65 = sub_1812B346C(v12, v71, 4LL, 0LL, v72, &v166);
          *((_DWORD *)v13 + 11) = v166;
          goto LABEL_135;
        }

  if (!*(void *)(a2 + 64))
  {
    int v26 = *(void *)(a2 + 56);
    if (v26)
    {
      do
      {
        uint64_t v27 = *(void *)(v26 + 8);
        uint64_t v28 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v26);
          --qword_18C468B10;
          off_18C4653A8(v26);
          int v26 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_73;
          }
          uint64_t v28 = &xmmword_18C465410;
        }

        (*v28)(v26);
LABEL_73:
        int v26 = v27;
      }

      while (v27);
    }
  }

  *(void *)(a2 + 56) = 0LL;
  *(_DWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v25 = *(void **)(a2 + 48);
  if (v25) {
    sub_1812F20DC(a1, v25);
  }
  *(void *)(a2 + 48) = 0LL;
}

  *((_BYTE *)v4 + 31) = 0;
LABEL_11:
  uint64_t v12 = sub_18129B700((unsigned __int8 *)a1);
  if ((_DWORD)v12 == 16)
  {
    int v13 = 0LL;
    *a3 = -1;
    return v13;
  }

  int v13 = v12;
  if ((_DWORD)v12) {
    return v13;
  }
  __int128 v14 = *(void *)(a1 + 136);
  int v4 = a2;
LABEL_14:
  uint64_t v58 = a3;
  uint64_t v59 = (uint64_t *)(a1 + 136);
  int v60 = (uint64_t *)(a1 + 48);
  uint64_t v15 = *(unsigned __int16 *)(v14 + 24);
LABEL_15:
  uint64_t v16 = 0;
  uint64_t v17 = v15 - 1;
  for (i = v15 - 1; ; uint64_t v17 = v16 + i)
  {
    uint64_t v19 = (unsigned __int8 *)(*(void *)(v14 + 96) + (v17 & 0xFFFFFFFFFFFFFFFELL));
    uint64_t v22 = (char *)(v20 + 1);
    uint64_t v21 = *v20;
    if (*v22 < 0) {
      break;
    }
    uint64_t v21 = ((v21 & 0x7F) << 7) + *v22;
    uint64_t v22 = (char *)(v20 + 2);
LABEL_34:
    uint64_t v28 = v11(v21, v22, v4);
    int v30 = v17 >> 1;
    if (v28 < 0)
    {
LABEL_16:
      uint64_t v16 = v30 + 1;
      if (v30 + 1 > i) {
        goto LABEL_37;
      }
      continue;
    }

  if ((*(_BYTE *)(a2 + 104LL * v9 + 68) & 8) != 0) {
    sqlite3_str_appendf((sqlite3_str *)&v32, " LEFT-JOIN");
  }
  if (v33 && (v33[v35] = 0, HIDWORD(v34)) && (v36 & 0x400) == 0) {
    int v30 = sub_1812F24E0(&v32);
  }
  else {
    int v30 = v33;
  }
  return sub_1812B9B68( (uint64_t *)v13,  185LL,  *(unsigned int *)(v13 + 144),  *(unsigned int *)(a1 + 312),  0LL,  (uint64_t)v30,  4294967290LL,  v15);
}

    if ((_DWORD)v3) {
      break;
    }
    v6 = v57 + 56;
  }

  while (v57 + 56 < v52);
  return v3;
}

  uint64_t v50 = __src[0];
  if (__src[0])
  {
    BOOL v51 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_72;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v50);
    --qword_18C468B10;
    off_18C4653A8(v50);
    uint64_t v50 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v51 = (void (**)(void *))&xmmword_18C465410;
LABEL_72:
      (*v51)(v50);
    }
  }

  sub_18138A584(v99);
  int v35 = a6;
  uint64_t v31 = v106;
LABEL_74:
  char v52 = (uint64_t (**)(void *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v31);
    --qword_18C468B10;
    off_18C4653A8(v31);
    uint64_t v31 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      char v52 = (uint64_t (**)(void *))&xmmword_18C465410;
      goto LABEL_79;
    }
  }

  else
  {
LABEL_79:
    (*v52)(v31);
  }

    int v34 = v32 < 2;
    uint64_t v32 = v35;
    if (!v34) {
      continue;
    }
    break;
  }

  if (*v10 != 1)
  {
    if (*(__int16 *)(v22 + 34) != v36)
    {
      if (*v10)
      {
        *(_WORD *)(v22 + 34) = v36;
        int v35 = v36;
        goto LABEL_93;
      }

      *(_DWORD *)(v22 + 24) = v20 + 1;
      *(_BYTE *)(v22 + v20) = 1;
      uint64_t v58 = (int8x8_t *)(v22 + *(int *)(v22 + 24));
      if (v36 > 0x7F)
      {
        if (v36 >> 14)
        {
          uint64_t v59 = sub_181308E00(v58, v36);
        }

        else
        {
          v58->i8[0] = (v36 >> 7) | 0x80;
          v58->i8[1] = v36 & 0x7F;
          uint64_t v59 = 2;
        }
      }

      else
      {
        v58->i8[0] = v36;
        uint64_t v59 = 1;
      }

      uint64_t v20 = *(_DWORD *)(v22 + 24) + v59;
      *(_DWORD *)(v22 + 24) = v20;
      *(_WORD *)(v22 + 34) = v36;
      *(_DWORD *)(v22 + 36) = 0;
    }

    if (!v69) {
      goto LABEL_99;
    }
LABEL_93:
    __int128 v62 = (int8x8_t *)(v22 + v20);
    __int128 v63 = v35 - (uint64_t)*(int *)(v22 + 36);
    uint64_t v64 = v63 + 2;
    if ((v63 + 2) > 0x7F)
    {
      if (v64 >> 14)
      {
        uint64_t v65 = sub_181308E00(v62, v64);
      }

      else
      {
        v62->i8[0] = (v64 >> 7) | 0x80;
        v62->i8[1] = v64 & 0x7F;
        uint64_t v65 = 2;
      }
    }

    else
    {
      v62->i8[0] = v64;
      uint64_t v65 = 1;
    }

    uint64_t v20 = *(_DWORD *)(v22 + 24) + v65;
    *(_DWORD *)(v22 + 24) = v20;
    *(_DWORD *)(v22 + 36) = v35;
    goto LABEL_99;
  }

  *(_BYTE *)(v22 + 33) = 1;
LABEL_99:
  uint64_t result = 0LL;
  **((_DWORD **)v10 + 1) += v20 + v48;
  return result;
}

uint64_t sub_1812876D8( void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a1[5];
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = a2;
  switch(*a2)
  {
    case 0x14u:
    case 0x31u:
    case 0x8Au:
      if ((a2[5] & 0x10) == 0) {
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      }
      int v20 = *(_DWORD *)(v13 + 32);
      if ((*(_DWORD *)(v13 + 40) & 0x2E) != 0)
      {
        sub_1812DC47C(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"subqueries");
        *uint64_t v15 = 121;
        uint64_t v21 = v15;
        while (1)
        {
          if ((v21[4] & 3) == 0)
          {
            int v22 = *((_DWORD *)v21 + 14);
            if (v22 > 0) {
              break;
            }
          }

          uint64_t v21 = (unsigned __int8 *)*((void *)v21 + 2);
          if (!v21) {
            goto LABEL_68;
          }
        }

        *(_DWORD *)(*(void *)v14 + 84LL) = v22;
      }

      else
      {
        sub_181285228(a1, *((void **)a2 + 4));
      }

LABEL_68:
      if (v20 != *(_DWORD *)(v13 + 32)) {
        *((_DWORD *)v15 + 1) |= 0x40u;
      }
      *(_DWORD *)(v13 + 40) |= 0x40u;
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x2Du:
    case 0xABu:
      uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 3);
      if (!v23) {
        goto LABEL_2;
      }
      while (1)
      {
        int v24 = *((_DWORD *)v23 + 1);
        if ((v24 & 0x82000) == 0) {
          break;
        }
        if ((v24 & 0x80000) == 0)
        {
          uint64_t v23 = (unsigned __int8 *)*((void *)v23 + 2);
          if (!v23) {
            goto LABEL_2;
          }
          continue;
        }

        uint64_t v23 = *(unsigned __int8 **)(*((void *)v23 + 4) + 8LL);
        if (!v23) {
          goto LABEL_2;
        }
      }

      int v53 = *v23;
      if (v53 == 170 || v53 == 59)
      {
        uint64_t result = sub_1812876D8(a1, v23);
        if ((_DWORD)result == 2) {
          return result;
        }
        if (*v23 == 170)
        {
          uint64_t result = 0LL;
          v15[2] = *v15;
          *uint64_t v15 = -81;
          return result;
        }
      }

                uint64_t v49 = 0LL;
                goto LABEL_72;
              }
            }

            else if ((*((_DWORD *)v32 + 1) & 0x810000) == 0)
            {
              int v34 = sub_181332EB0(v249, v32);
              uint64_t v21 = v244;
              uint64_t v14 = a1;
              goto LABEL_55;
            }
          }

          uint64_t v15 = 0xFFFFFFFFLL;
          goto LABEL_255;
        }

        uint64_t v25 = sub_1812CCF60();
        db[0] = 0LL;
        uint64_t v26 = sqlite3_open_v2(a1, db, a3 | 1, 0LL);
        if (v26)
        {
          fprintf((FILE *)*MEMORY[0x1895F89D0], "sqlite3_open_v2 open failed with %d", v26);
        }

        else
        {
          sqlite3_db_config(db[0], 1006, 1LL, 0LL);
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
        }

        uint64_t v28 = mkstemp(v25);
        free(v25);
        if (v28 < 0) {
          goto LABEL_68;
        }
        bzero(filename, 0x400uLL);
        uint64_t v160 = v28;
        fcntl(v28, 50, filename);
        *(_OWORD *)v186 = *(_OWORD *)"delete";
        *(_OWORD *)&v186[16] = unk_1813C49C0;
        sub_1812CCBB4(db[0], "pragma journal_mode", v186, 0x20u);
        uint64_t v29 = *(unsigned __int16 *)v186 == 24951 && v186[2] == 108;
        uint64_t v30 = !v29;
        v198[0] = 0LL;
        uint64_t v170 = 0LL;
        uint64_t v171 = 0LL;
        uint64_t v172 = 0LL;
        if (!sqlite3_open_v2(filename, v198, a3 | 6, 0LL))
        {
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
          if (!sqlite3_file_control(v198[0], 0LL, 102, db[0]))
          {
            uint64_t v31 = calloc(1uLL, 0x800uLL);
            uint64_t v32 = calloc(1uLL, 0x800uLL);
            uint64_t v170 = v31;
            uint64_t v171 = v32;
            HIDWORD(v172) = 256;
            sqlite3_exec( v198[0],  "select name,sql from sqlite_master where type = 'index' and rootpage != 0",  (int (__cdecl *)(void *, int, char **, char **))sub_1812CD020,  &v170,  0LL);
            sqlite3_exec(v198[0], "BEGIN EXCLUSIVE", 0LL, 0LL, 0LL);
            uint64_t v33 = v172;
            if ((_DWORD)v172)
            {
              int v34 = 0LL;
              int v35 = (FILE **)MEMORY[0x1895F89D0];
              do
              {
                if (*((void *)v170 + v34) && *((void *)v171 + v34))
                {
                  int v36 = sqlite3_mprintf("DROP INDEX IF EXISTS %w", *((void *)v170 + v34));
                  *(void *)&errmsg.st_dev = 0LL;
                  int v37 = sqlite3_exec(v198[0], v36, 0LL, 0LL, (char **)&errmsg);
                  if (v37 && v37 != 101)
                  {
                    fprintf( *v35,  "while executing statement ('%s') it failed with error code %d and reason:'%s'\n",  v36,  v37,  *(const char **)&errmsg.st_dev);
                    *((void *)v170 + v34) = 0LL;
                  }

                  if (*(void *)&errmsg.st_dev) {
                    sqlite3_free(*(void **)&errmsg.st_dev);
                  }
                  sqlite3_free(v36);
                  uint64_t v33 = v172;
                }

                ++v34;
              }

              while (v34 < v33);
            }

            sqlite3_exec(v198[0], "COMMIT", 0LL, 0LL, 0LL);
            sqlite3_exec(v198[0], "VACUUM", 0LL, 0LL, 0LL);
            if (!v30)
            {
              sqlite3_exec(v198[0], "pragma journal_mode = wal", 0LL, 0LL, 0LL);
              sqlite3_exec(v198[0], "BEGIN EXCLUSIVE", 0LL, 0LL, 0LL);
              sqlite3_exec(v198[0], "COMMIT", 0LL, 0LL, 0LL);
            }
          }
        }

        if (v198[0]) {
          sqlite3_close(v198[0]);
        }
        if (db[0]) {
          sqlite3_close(db[0]);
        }
        if (!(_DWORD)v172)
        {
          int v47 = 0LL;
          __buf = 0LL;
LABEL_203:
          uint64_t v167 = open(filename, 0, 0LL);
          memset(&errmsg, 0, sizeof(errmsg));
          if (stat(filename, &errmsg) == -1)
          {
            int v112 = (FILE *)*MEMORY[0x1895F89D0];
            int v113 = __error();
            fprintf(v112, "stat failed for %d\n", *v113);
          }

          memset(&errmsg, 0, sizeof(errmsg));
          if (stat(a1, &errmsg) == -1)
          {
            uint64_t v114 = (FILE *)*MEMORY[0x1895F89D0];
            int v115 = __error();
            fprintf(v114, "stat failed for %d\n", *v115);
          }

          v116 = open(__s1, 1538, errmsg.st_mode | 0x80u);
          if (v116 < 0)
          {
            int v139 = (FILE *)*MEMORY[0x1895F89D0];
            unsigned int v140 = __error();
            fprintf(v139, "open destination failed for %d\n", *v140);
            close(v167);
          }

          else
          {
            int v117 = v116;
            *(void *)uint64_t v202 = 1LL;
            *(_OWORD *)&v202[8] = xmmword_1813C4970;
            *(void *)&v202[24] = (int)v18;
            *(void *)&v202[32] = v47;
            *(void *)&v202[40] = 0LL;
            sub_1812CCCF4(v116, (uint64_t)v202);
            uint64_t v159 = a7;
            if (v47)
            {
              write(v117, __buf, v47);
              free(__buf);
              __buf = 0LL;
            }

            uint64_t v118 = (dispatch_queue_s *)valloc(0x80000uLL);
            int v119 = valloc(0x80000uLL);
            int v120 = off_18C550490(&block, 0LL, v18);
            if (v120) {
              fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_init failed for %d\n", v120);
            }
            uint64_t v121 = read(v167, v118, 0x80000uLL);
            queuea = v118;
            if (v121 >= 1)
            {
              uint64_t v122 = (FILE **)MEMORY[0x1895F89D0];
              do
              {
                blocuint64_t k = v119;
                unint64_t v175 = 0x80000LL;
                uint64_t v176 = (uint64_t (*)(uint64_t))v118;
                uint64_t v177 = (void *)v121;
                do
                {
                  unsigned int v123 = off_18C550498(&block, 0LL);
                  if (v123 >= 2) {
                    fprintf(*v122, "compression_stream_process bravo failed for %d\n", v123);
                  }
                  if (v175 != 0x80000)
                  {
                    uint64_t v124 = 0x80000 - v175;
                    uint64_t v125 = write(v117, v119, 0x80000 - v175);
                    if (v125 != v124)
                    {
                      uint64_t v126 = v125;
                      uint64_t v127 = *v122;
                      __int16 v128 = __error();
                      fprintf(v127, "last write ended with return %ld expected %ld with errno %d\n", v126, v121, *v128);
                    }
                  }

                  if (v123 == 1) {
                    break;
                  }
                }

                while (!v123 && v177 != 0LL);
                uint64_t v118 = queuea;
                uint64_t v121 = read(v167, queuea, 0x80000uLL);
              }

              while (v121 > 0);
            }

            blocuint64_t k = v119;
            unint64_t v175 = 0x80000LL;
            uint64_t v176 = (uint64_t (*)(uint64_t))v118;
            uint64_t v177 = 0LL;
            unsigned int v130 = (FILE **)MEMORY[0x1895F89D0];
            do
            {
              uint64_t v131 = off_18C550498(&block, 1LL);
              if (v131 >= 2) {
                fprintf(*v130, "compression_stream_process bravo failed for %d\n", v131);
              }
              if (v175 != 0x80000)
              {
                v132 = 0x80000 - v175;
                uint64_t v133 = write(v117, v119, 0x80000 - v175);
                if (v133 != v132)
                {
                  uint64_t v134 = v133;
                  uint64_t v135 = *v130;
                  unsigned __int8 v136 = __error();
                  fprintf(v135, "last write ended with return %ld expected %ld with errno %d\n", v134, v121, *v136);
                }
              }
            }

            while (!v131);
            off_18C5504A0(&block);
            free(queuea);
            free(v119);
            if (v121)
            {
              uint64_t v137 = *v130;
              uint64_t v138 = __error();
              fprintf(v137, "last read ended with return %ld with errno %d\n", v121, *v138);
            }

            close(v117);
            close(v167);
            a7 = v159;
          }

          if (__buf) {
            free(__buf);
          }
          uint64_t v141 = v170;
          if (v170)
          {
            if ((_DWORD)v172)
            {
              uint64_t v142 = 0LL;
              do
                free(*((void **)v170 + v142++));
              while (v142 < v172);
              uint64_t v141 = v170;
            }

            free(v141);
            uint64_t v170 = 0LL;
          }

          uint64_t v143 = v171;
          if (v171)
          {
            if ((_DWORD)v172)
            {
              uint64_t v144 = 0LL;
              do
                free(*((void **)v171 + v144++));
              while (v144 < v172);
              uint64_t v143 = v171;
            }

            free(v143);
            uint64_t v171 = 0LL;
          }

          sub_1812CCE14(filename);
          uint64_t v107 = v160;
          goto LABEL_254;
        }

        uint64_t v39 = 0LL;
        uint64_t v40 = 0LL;
        do
        {
          uint64_t v42 = (const char *)*((void *)v171 + v39);
          if (v42 && *((void *)v170 + v39))
          {
            if (v40)
            {
              uint64_t v41 = sqlite3_mprintf("%s;\n%s", v40, v42);
              sqlite3_free(v40);
              uint64_t v40 = v41;
            }

            else
            {
              uint64_t v40 = sqlite3_mprintf("%s", *((const char **)v171 + v39));
            }
          }

          ++v39;
        }

        while (v39 < v172);
        if (v40)
        {
          uint64_t v43 = sqlite3_mprintf("%s;\n", v40);
          sqlite3_free(v40);
          if (v43)
          {
            int v44 = strlen(v43);
            if (v44)
            {
              uint64_t v45 = v44;
              uint64_t v46 = off_18C550490(&errmsg, 0LL, v18);
              if (v46)
              {
                fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_init failed for %d\n", v46);
                int v47 = 0LL;
                uint64_t v48 = 0LL;
              }

              else
              {
                int v158 = a7;
                int v108 = valloc(0x80000uLL);
                int v47 = 0LL;
                uint64_t v48 = 0LL;
                *(void *)uint64_t v166 = v43;
                *(void *)&errmsg.st_uid = v43;
                *(void *)&errmsg.st_rdev = v45 + 1;
                do
                {
                  *(void *)&errmsg.st_dev = v108;
                  errmsg.st_ino = 0x80000LL;
                  int v110 = off_18C550498(&errmsg, 1LL);
                  if (v110 >= 2) {
                    fprintf((FILE *)*MEMORY[0x1895F89D0], "compression_stream_process bravo failed for %d\n", v110);
                  }
                  uint64_t v111 = 0x80000 - errmsg.st_ino;
                  if ((int64_t)(0x80000 - errmsg.st_ino) >= 1)
                  {
                    if (v48) {
                      int v109 = (char *)realloc(v48, v111 + v47);
                    }
                    else {
                      int v109 = (char *)malloc(v111 + v47);
                    }
                    uint64_t v48 = v109;
                    memcpy(&v109[v47], v108, v111);
                    v47 += v111;
                  }
                }

                while (!v110);
                off_18C5504A0(&errmsg);
                a7 = v158;
                uint64_t v43 = *(char **)v166;
              }

              __buf = v48;
              goto LABEL_202;
            }
          }
        }

        else
        {
          uint64_t v43 = 0LL;
        }

        int v47 = 0LL;
        __buf = 0LL;
LABEL_202:
        sqlite3_free(v43);
        goto LABEL_203;
      }

      if (a5 + 1 < 2)
      {
        __s1 = a2;
        int v18 = 0xFFFFFFFFLL;
        goto LABEL_18;
      }

      if (a8)
      {
        int v19 = sqlite3_mprintf("Compression method %ld not currently supported for operationType %ld");
        goto LABEL_14;
      }
    }

    else if (a8)
    {
      int v19 = sqlite3_mprintf("Source file '%s' is not an SQLite database file, or is encrypted.  Type is %d");
LABEL_14:
      *a8 = v19;
      return 0xFFFFFFFFLL;
    }

    return 0xFFFFFFFFLL;
  }

  return v15;
}

    uint64_t v39 = (int)v9 - v27;
    uint64_t v40 = &v21[v27 + 1];
    uint64_t v41 = &__s[v27];
    do
    {
      uint64_t v42 = *v41++;
      *v40++ = v42;
      --v39;
    }

    while (v39);
LABEL_70:
    int v22 = v9;
    goto LABEL_71;
  }

  uint64_t v27 = v6[2];
  if (v27) {
    xmmword_18C465410(*(void *)&v27);
  }
  return v9;
}

  uint64_t v27 = *(void *)(v30 + 112);
  if ((*(_WORD *)(v27 + 52) & 0x20) != 0) {
    goto LABEL_69;
  }
LABEL_53:
  sub_1812F9F44(v27);
LABEL_46:
  if (*(_BYTE *)(a1 + 17))
  {
    int v24 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v24;
    if (!v24) {
      sub_1812FDEFC(a1);
    }
  }

  return v9;
}

      uint64_t v71 = *(unsigned int *)(v9 + 52);
      uint64_t v13 = (void *)v94;
      BOOL v72 = *(_DWORD *)(v94 + 144);
      if (*(_DWORD *)(v94 + 148) <= v72)
      {
        sub_181310690(v94, 180LL, v71, 0LL, v47, v45, v18, v19);
      }

      else
      {
        *(_DWORD *)(v94 + 144) = v72 + 1;
        uint64_t v73 = *(void *)(v94 + 136) + 40LL * v72;
        *(_DWORD *)uint64_t v73 = 64948;
        *(_DWORD *)(v73 + 4) = v71;
        *(_DWORD *)(v73 + 8) = 0;
        *(_DWORD *)(v73 + 12) = v47;
        *(_DWORD *)(v73 + 16) = v45;
        *(void *)(v73 + 24) = 0LL;
        *(void *)(v73 + 32) = 0LL;
      }

      v56 = v95;
      int v11 = v98;
      uint64_t v60 = v96;
      if ((_DWORD)v45 == 1)
      {
        if ((_DWORD)v47)
        {
          unsigned int v74 = *(unsigned __int8 *)(v12 + 31);
          if (v74 <= 7)
          {
            *(_BYTE *)(v12 + 31) = v74 + 1;
            BOOL v75 = (_DWORD *)(v12 + 4 * v74 + 224);
LABEL_77:
            *BOOL v75 = v47;
          }
        }
      }

      else if (*(_DWORD *)(v12 + 40) < (int)v45)
      {
        *(_DWORD *)(v12 + 40) = v45;
        BOOL v75 = v89;
        goto LABEL_77;
      }
    }

    uint64_t result = v13[3];
    int v77 = -v60;
    if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
      uint64_t result = sub_18131E420(result, (uint64_t)v13, v77);
    }
    else {
      *(_DWORD *)(*(void *)(result + 80) + 4LL * v77) = *((_DWORD *)v13 + 36);
    }
    uint64_t v78 = *(unsigned int *)(v9 + 4);
    v79 = v99;
    int v80 = (v99 + 1);
    int v81 = *((_DWORD *)v13 + 36);
    if (*((_DWORD *)v13 + 37) <= v81)
    {
      uint64_t result = sub_18131044C((uint64_t)v13, 39LL, v78, v80, 0LL, v17, v18, v19);
      v79 = v99;
    }

    else
    {
      *((_DWORD *)v13 + 36) = v81 + 1;
      uint64_t v82 = v13[17] + 40LL * v81;
      *(_DWORD *)uint64_t v82 = 39;
      *(_DWORD *)(v82 + 4) = v78;
      *(_DWORD *)(v82 + 8) = v80;
      *(void *)(v82 + 12) = 0LL;
      *(void *)(v82 + 28) = 0LL;
      *(void *)(v82 + 20) = 0LL;
      *(_DWORD *)(v82 + 36) = 0;
    }

    uint64_t v83 = *((_DWORD *)v13 + 36);
    v84 = *(unsigned __int8 *)(*v13 + 103LL);
    v85 = &byte_18C550680;
    if (!*(_BYTE *)(*v13 + 103LL)) {
      v85 = (char *)(v13[17] + 40LL * v79);
    }
    *((_DWORD *)v85 + 2) = v83;
    *(_DWORD *)(v14 + 48) &= ~0x400000u;
    if ((*(_BYTE *)(*(void *)v12 + 98LL) & 0x10) != 0) {
      break;
    }
    uint64_t v86 = *(unsigned __int8 *)(v11 + 64);
    a2 = v97 + 1;
    if (v97 + 1 < (int)v86)
    {
      int v9 = v92 + 120LL * a2;
      unsigned int v87 = v86 - a2;
      while (1)
      {
        if ((*(_BYTE *)(*(void *)(v11 + 8) + 104LL * *(unsigned __int8 *)(v9 + 64) + 68) & 0x48) == 0)
        {
          uint64_t v14 = *(void *)(v9 + 96);
          if (v14)
          {
            if ((*(void *)v14 & v56) == 0 && (*(_DWORD *)(v14 + 48) & 0x400004) == 0x400000) {
              break;
            }
          }
        }

        v9 += 120LL;
        ++a2;
        if (!--v87) {
          goto LABEL_95;
        }
      }
    }
  }

  while (a2 < (int)v86);
LABEL_95:
  if (v84) {
    int v88 = &byte_18C550680;
  }
  else {
    int v88 = (char *)(v13[17] + 40LL * v90);
  }
  *((_DWORD *)v88 + 2) = v83;
  *(void *)(v12 + 96) = v93;
  return result;
}

  if ((*a2 | 4) != 0xAC || (a2[7] & 1) == 0) {
    return v5;
  }
  int v35 = (void *)*((void *)a2 + 9);
  int v36 = (int *)v35[2];
  if (!v36 || (int v37 = *v36, *v36 < 1))
  {
    uint64_t v39 = 0LL;
    int v47 = (int *)v35[3];
    if (v47) {
      goto LABEL_94;
    }
    goto LABEL_114;
  }

  int v38 = 0LL;
  uint64_t v39 = 0LL;
  do
  {
    uint64_t v41 = *(unsigned __int8 **)&v36[6 * v38 + 2];
    if (!v41)
    {
LABEL_74:
      uint64_t v40 = 0LL;
      goto LABEL_75;
    }

    if (*v41 == 167 && (*((_DWORD *)v41 + 1) & 0x20) == 0)
    {
      uint64_t v43 = *((_DWORD *)v41 + 11);
      if (a1[2] == v43)
      {
        uint64_t v40 = 1LL;
      }

      else
      {
        int v44 = a1[1];
        uint64_t v45 = 0LL;
        uint64_t v46 = v44 - 1;
        while (a1[v45 + 3] != v43)
        {
          if (v46 == ++v45) {
            goto LABEL_74;
          }
        }

        uint64_t v40 = 1LL << (v45 + 1);
      }
    }

    else
    {
      if ((*((_DWORD *)v41 + 1) & 0x810000) != 0) {
        goto LABEL_74;
      }
      uint64_t v40 = sub_181332EB0(a1);
      int v37 = *v36;
    }

              uint64_t v27 = *(_DWORD *)(v8 + 32);
              uint64_t v28 = __OFSUB__(v27, 1);
              uint64_t v29 = v27 - 1;
              if (v29 < 0 == v28) {
                *(_DWORD *)(v26 + 4LL * v29) = v20;
              }
              *(void *)(v8 + 40) = v26;
              goto LABEL_78;
            }
          }

              if (v113) {
                *(_DWORD *)(*(void *)(a2 + 56) + 4LL * ((int)v12 / 32)) |= 1 << v12;
              }
              uint64_t v48 = *(const void ***)(a2 + 64);
              uint64_t v107 = (sqlite3_stmt **)(a2 + 64);
              if (v48)
              {
                uint64_t v49 = *(const void **)(a2 + 56);
                int v50 = -1;
                uint64_t v51 = (uint64_t *)(a2 + 64);
                do
                {
                  int v52 = v51;
                  int v53 = (sqlite3_stmt *)v48;
                  if (!memcmp(v49, v48[1], 4LL * v39))
                  {
                    uint64_t v17 = 0LL;
                    *int v52 = *((void *)v53 + 2);
                    *((void *)v53 + 2) = *v107;
                    *uint64_t v107 = v53;
                    goto LABEL_162;
                  }

                  uint64_t v51 = (uint64_t *)((char *)v53 + 16);
                  uint64_t v48 = (const void **)*((void *)v53 + 2);
                  ++v50;
                }

                while (v48);
                if (v50 >= 0xB)
                {
                  sqlite3_finalize(*(sqlite3_stmt **)v53);
                  uint64_t v54 = *v52;
                  if (*v52)
                  {
                    uint64_t v55 = &off_18C4653A8;
                    if (!dword_18C465380) {
                      goto LABEL_81;
                    }
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8[0] -= (int)off_18C4653B8(v54);
                    --qword_18C468B10;
                    off_18C4653A8(v54);
                    uint64_t v54 = xmmword_18C468B70;
                    if ((void)xmmword_18C468B70)
                    {
                      uint64_t v55 = &xmmword_18C465410;
LABEL_81:
                      (*v55)(v54);
                    }
                  }

                  *int v52 = 0LL;
                }
              }

              v56 = (96 * v39);
              uint64_t v57 = *(_BYTE **)(a1 + 112);
              if (!v57)
              {
                v61 = -1;
                goto LABEL_125;
              }

              unsigned int v58 = "sqlite_stat1";
              while (2)
              {
                __int128 v62 = *v57;
                __int128 v63 = *(unsigned __int8 *)v58;
                if ((_DWORD)v62 == (_DWORD)v63)
                {
                  if (!*v57)
                  {
                    v61 = 0;
LABEL_125:
                    unsigned int v74 = sqlite3_initialize();
                    uint64_t v17 = 7LL;
                    if (v74) {
                      return v17;
                    }
                    BOOL v75 = sub_18126F0AC(v56);
                    if (!v75) {
                      return v17;
                    }
                    int v53 = (sqlite3_stmt *)v75;
                    uint64_t v114 = 0LL;
                    int v115 = 0LL;
                    BOOL v76 = (void *)(v75 + 24);
                    *((void *)v53 + 1) = v76;
                    memcpy(v76, *(const void **)(a2 + 56), v41);
                    sub_1813BB9F4((uint64_t)&v114, "UPDATE main.", &v116);
                    sub_1813BBB08((uint64_t)&v114, *(char **)(a1 + 112), &v116);
                    sub_1813BB9F4((uint64_t)&v114, " SET ", &v116);
                    int v77 = *(_DWORD *)(a1 + 120);
                    if (v77 >= 1)
                    {
                      uint64_t v78 = 0LL;
                      v79 = &byte_1813CEAEE;
                      int v80 = 1;
                      do
                      {
                        if (!*(_BYTE *)(*(void *)(a2 + 48) + v78)
                          && *(void *)(*(void *)(a1 + 144) + 8LL * ((int)v78 + v77)))
                        {
                          sub_1813BB9F4((uint64_t)&v114, v79, &v116);
                          sub_1813BBB08((uint64_t)&v114, *(char **)(*(void *)(a2 + 40) + 8 * v78), &v116);
                          sub_1813BB9F4((uint64_t)&v114, " = ?", &v116);
                          sqlite3_snprintf(23, __s, "%d", v80);
                          sub_1813BB9F4((uint64_t)&v114, __s, &v116);
                          int v77 = *(_DWORD *)(a1 + 120);
                          v79 = ", ";
                        }

                        ++v78;
                        v80 += 2;
                      }

                      while (v78 < v77);
                    }

                    sub_1813BB9F4((uint64_t)&v114, " WHERE ", &v116);
                    if (*(int *)(a1 + 120) >= 1)
                    {
                      uint64_t v82 = 0LL;
                      uint64_t v83 = &byte_1813CEAEE;
                      v84 = 2;
                      do
                      {
                        if (*(_BYTE *)(*(void *)(a2 + 48) + v82)
                          || !v113 && *(void *)(*(void *)(a1 + 144) + 8 * v82))
                        {
                          sub_1813BB9F4((uint64_t)&v114, v83, &v116);
                          if (v61 || v82 != 1)
                          {
                            sub_1813BBB08((uint64_t)&v114, *(char **)(*(void *)(a2 + 40) + 8 * v82), &v116);
                            sub_1813BB9F4((uint64_t)&v114, " IS ?", &v116);
                            sqlite3_snprintf(23, __s, "%d", v84);
                            v85 = __s;
                          }

                          else
                          {
                            v85 = "idx IS CASE WHEN length(?4)=0 AND typeof(?4)='blob' THEN NULL ELSE ?4 END ";
                          }

                          sub_1813BB9F4((uint64_t)&v114, v85, &v116);
                          uint64_t v83 = " AND ";
                        }

                        ++v82;
                        v84 += 2;
                      }

                      while (v82 < *(int *)(a1 + 120));
                    }

                    uint64_t v17 = v116;
                    if (v116
                      || (uint64_t v17 = sub_18126DFE0(*(void *)a2, v114, v115, 128LL, 0LL, v53, 0LL, v81),
                          (_DWORD)v17))
                    {
                      uint64_t v86 = (void (**)(sqlite3_stmt *))&off_18C4653A8;
                      if (!dword_18C465380) {
                        goto LABEL_153;
                      }
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8[0] -= (int)off_18C4653B8(v53);
                      --qword_18C468B10;
                      off_18C4653A8(v53);
                      int v53 = (sqlite3_stmt *)xmmword_18C468B70;
                      if ((void)xmmword_18C468B70)
                      {
                        uint64_t v86 = (void (**)(sqlite3_stmt *))&xmmword_18C465410;
LABEL_153:
                        (*v86)(v53);
                        int v53 = 0LL;
                      }

                      unsigned int v87 = v114;
                      if (v114)
                      {
LABEL_155:
                        int v88 = (void (**)(unsigned __int8 *))&off_18C4653A8;
                        if (!dword_18C465380) {
                          goto LABEL_160;
                        }
                        if ((void)xmmword_18C468B70) {
                          xmmword_18C465400(xmmword_18C468B70);
                        }
                        qword_18C468AC8[0] -= (int)off_18C4653B8(v87);
                        --qword_18C468B10;
                        off_18C4653A8(v87);
                        unsigned int v87 = (unsigned __int8 *)xmmword_18C468B70;
                        if ((void)xmmword_18C468B70)
                        {
                          int v88 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_160:
                          (*v88)(v87);
                        }
                      }
                    }

                    else
                    {
                      *((void *)v53 + 2) = *v107;
                      *uint64_t v107 = v53;
                      unsigned int v87 = v114;
                      if (v114) {
                        goto LABEL_155;
                      }
                    }

                    if (v53) {
LABEL_162:
                    }
                      int v53 = *(sqlite3_stmt **)v53;
LABEL_163:
                    int v108 = v8;
                    int v89 = v17 == 0;
                    if (!(_DWORD)v17 && (int)v12 >= 1)
                    {
                      v90 = 0LL;
                      uint64_t v91 = 2;
                      while (1)
                      {
                        uint64_t v92 = *(void *)(a1 + 144);
                        uint64_t v93 = *(void *)(v92 + 8 * v90);
                        uint64_t v94 = *(void *)(v92 + 8LL * ((int)v90 + *(_DWORD *)(a1 + 120)));
                        if (*(_BYTE *)(*(void *)(a2 + 48) + v90)) {
                          break;
                        }
                        uint64_t v17 = 0LL;
                        if (!v113 && v93)
                        {
                          uint64_t v95 = 2 * v90 + 2;
LABEL_172:
                          if (byte_1813C6455[*(_WORD *)(v93 + 20) & 0x3F] - 3 <= 1
                            && !*(void *)(v93 + 8))
                          {
                            return 7LL;
                          }

          uint64_t v55 = 7;
          goto LABEL_69;
      }

      return 21LL;
    }
  }

  return result;
}

LABEL_2:
      if (*(_BYTE *)(*(void *)v14 + 103LL)) {
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      }
      uint64_t v17 = (unsigned __int8 *)*((void *)v15 + 2);
      int v18 = *v17;
      if (v18 == 176) {
        int v18 = v17[2];
      }
      if (v18 == 138)
      {
        uint64_t v17 = (unsigned __int8 *)*((void *)v17 + 4);
      }

      else if (v18 != 177)
      {
        int v19 = 1;
        goto LABEL_32;
      }

      int v19 = **((_DWORD **)v17 + 4);
LABEL_32:
      if (*v15 != 48)
      {
        int v37 = (unsigned __int8 *)*((void *)v15 + 3);
        int v38 = *v37;
        if (v38 == 176) {
          int v38 = v37[2];
        }
        if (v38 == 138)
        {
LABEL_77:
          int v37 = (unsigned __int8 *)*((void *)v37 + 4);
          goto LABEL_78;
        }

        goto LABEL_41;
      }

      uint64_t v33 = *((void *)v15 + 4);
      int v34 = *(unsigned __int8 **)(v33 + 8);
      int v35 = *v34;
      if (v35 == 176) {
        int v35 = v34[2];
      }
      if (v35 == 138)
      {
        int v34 = (unsigned __int8 *)*((void *)v34 + 4);
      }

      else if (v35 != 177)
      {
        int v36 = 1;
        goto LABEL_73;
      }

      int v36 = **((_DWORD **)v34 + 4);
LABEL_73:
      if (v36 != v19) {
        goto LABEL_79;
      }
      int v37 = *(unsigned __int8 **)(v33 + 32);
      int v38 = *v37;
      if (v38 == 176) {
        int v38 = v37[2];
      }
      if (v38 == 138) {
        goto LABEL_77;
      }
LABEL_41:
      if (v38 != 177)
      {
        int v36 = 1;
        goto LABEL_79;
      }

  if (off_18C54FD28(v1, v12)
    || (WORD2(v12[0]) & 0xF000) != 0x4000
    || off_18C54FCF8(v1, 3LL))
  {
    goto LABEL_5;
  }

  return v1;
}

  v2 = sub_18130C8E4(a1, v15);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = v15[0];
    *(_DWORD *)(a1 + 20) = v15[0];
    return sub_18130CC34((uint64_t *)a1, v3, (void *)(a1 + 40));
  }

  return v2;
}

  if (!v9)
  {
    if (*(int *)(v11 + 40) >= 1)
    {
      sub_181348100((uint64_t *)a1, 0LL, a3, a4, a5, a6, a7, a8);
      if (*(int *)(v11 + 40) >= 3)
      {
        uint64_t v17 = 2LL;
        do
        {
          sub_181348100((uint64_t *)a1, v17, a3, a4, a5, a6, a7, a8);
          uint64_t v17 = (v17 + 1);
        }

        while ((int)v17 < *(_DWORD *)(v11 + 40));
      }
    }

    goto LABEL_65;
  }

  if (!*(_DWORD *)(a3 + 8))
  {
    int v18 = sub_18131EDC8(v11, v9);
    if ((v18 & 0x80000000) == 0)
    {
      sub_181348100((uint64_t *)a1, v18, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }

    if (!*(_DWORD *)(a3 + 8))
    {
      int v20 = 0LL;
      goto LABEL_32;
    }
  }

  if (!*(_BYTE *)(*(void *)a1 + 197LL))
  {
    int v19 = sub_18131EDC8(*(void *)a1, v9);
    if ((v19 & 0x80000000) != 0)
    {
      sub_1812DC47C(a1, "unknown database %T", a3, a4, a5, a6, a7, a8, v9);
      goto LABEL_65;
    }

    if (*(_DWORD *)(a3 + 8)) {
      int v20 = *(unsigned __int8 **)(*(void *)(v11 + 32) + 32LL * v19);
    }
    else {
      int v20 = 0LL;
    }
    int v9 = a3;
LABEL_32:
    uint64_t v21 = *(const void **)v9;
    if (*(void *)v9)
    {
      int v22 = *(unsigned int *)(v9 + 8);
      uint64_t v23 = (unsigned __int8 *)sub_1812F2264(v11, v22 + 1);
      if (v23)
      {
        int v24 = v23;
        memcpy(v23, v21, v22);
        v24[v22] = 0;
        uint64_t v25 = *v24;
        if ((char)byte_1813C6558[*v24] < 0)
        {
          uint64_t v26 = 0LL;
          if (v25 == 91) {
            uint64_t v25 = 93;
          }
          for (uint64_t i = 1; ; ++i)
          {
            uint64_t v28 = i;
            uint64_t v29 = v24[i];
            if (v29 == v25)
            {
              ++i;
              LOBYTE(v29) = v25;
              if (v24[v28 + 1] != v25) {
                break;
              }
            }

            v24[v26++] = v29;
          }

          v24[v26] = 0;
        }

        uint64_t v30 = sub_18130D838(v11, v24, v20);
        if (v30)
        {
          int v35 = (uint64_t *)v30;
          int v36 = *(void *)(v30 + 24);
          int v37 = *(void *)(v36 + 96);
          if (v37)
          {
            int v38 = (uint64_t *)(*(void *)(*(void *)a1 + 32LL) + 24LL);
            LODWORD(v39) = -1;
            do
            {
              uint64_t v40 = *v38;
              v38 += 4;
              uint64_t v39 = (v39 + 1);
            }

            while (v40 != v37);
          }

          else
          {
            uint64_t v39 = 4294934528LL;
          }

          if (*(void *)(a1 + 168)) {
            int v47 = *(void *)(a1 + 168);
          }
          else {
            int v47 = a1;
          }
          uint64_t v48 = *(_DWORD *)(v47 + 124);
          uint64_t v49 = 1 << v39;
          if ((v48 & (1 << v39)) == 0)
          {
            *(_DWORD *)(v47 + 124) = v48 | v49;
            if ((_DWORD)v39 == 1) {
              sub_1812FA2F0(v47);
            }
          }

          *(_DWORD *)(v47 + 120) |= v49;
          int v50 = *(unsigned int *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v50 + 3;
          sub_1813483F8(a1, v39, v50, *v35, (uint64_t)"idx", v32, v33, v34);
          sub_1813486B0( a1,  v36,  (uint64_t)v35,  v50,  (*(_DWORD *)(a1 + 56) + 1),  *(unsigned int *)(a1 + 52),  v51,  v52);
          uint64_t v60 = *(void *)(a1 + 16);
          if (v60) {
            goto LABEL_61;
          }
          if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
            *(_BYTE *)(a1 + 35) = 1;
          }
          uint64_t v60 = sub_1812DC63C((uint64_t *)a1, v53, v54, v55, v56, v57, v58, v59);
          if (v60)
          {
LABEL_61:
            v61 = *(_DWORD *)(v60 + 144);
            if (*(_DWORD *)(v60 + 148) <= v61)
            {
              sub_18131044C(v60, 150LL, v39, 0LL, 0LL, v57, v58, v59);
            }

            else
            {
              *(_DWORD *)(v60 + 144) = v61 + 1;
              __int128 v62 = *(void *)(v60 + 136) + 40LL * v61;
              *(_DWORD *)__int128 v62 = 150;
              *(_DWORD *)(v62 + 4) = v39;
              *(_OWORD *)(v62 + 8) = 0u;
              *(_OWORD *)(v62 + 24) = 0u;
            }
          }
        }

        else
        {
          uint64_t v41 = sub_18129EAF4(a1, 0, (char *)v24, v20, v31, v32, v33, v34);
          if (v41) {
            sub_18134826C((uint64_t *)a1, v41, 0LL, v42, v43, v44, v45, v46);
          }
        }

        sub_1812F20DC((void *)v11, v24);
      }
    }

    goto LABEL_65;
  }

  sub_1812DC47C(a1, "corrupt database", a3, a4, a5, a6, a7, a8, v66);
LABEL_65:
  if (!*(_BYTE *)(v11 + 112))
  {
    __int128 v63 = *(void *)(a1 + 16);
    if (v63) {
      goto LABEL_71;
    }
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    __int128 v63 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (v63)
    {
LABEL_71:
      uint64_t v64 = *(_DWORD *)(v63 + 144);
      if (*(_DWORD *)(v63 + 148) <= v64)
      {
        sub_18131044C(v63, 166LL, 0LL, 0LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v63 + 144) = v64 + 1;
        uint64_t v65 = *(void *)(v63 + 136) + 40LL * v64;
        *(_BYTE *)uint64_t v65 = -90;
        *(_OWORD *)(v65 + 1) = 0u;
        *(_OWORD *)(v65 + 17) = 0u;
        *(void *)(v65 + 32) = 0LL;
      }
    }
  }

  int v11 = v9;
  if (!v10) {
    return v11;
  }
LABEL_27:
  uint64_t v26 = *(void *)v10;
  v27.n128_f64[0] = sub_18138C9F0((uint64_t *)v10);
  uint64_t v28 = (void *)(*(void *)(v26 + 48) + 72LL);
  do
  {
    uint64_t v29 = v28;
    uint64_t v30 = *v28;
    uint64_t v28 = (void *)(*v28 + 8LL);
  }

  while (v30 != v10);
  *uint64_t v29 = *(void *)(v10 + 8);
  uint64_t v31 = (void (**)(uint64_t, __n128))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_34;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
  --qword_18C468B10;
  off_18C4653A8(v10);
  int v10 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v31 = (void (**)(uint64_t, __n128))&xmmword_18C465410;
LABEL_34:
    (*v31)(v10, v27);
  }

  return v11;
}

  for (uint64_t i = *(void *)(a1 + 96); i; uint64_t i = *(void *)(a1 + 96))
  {
    if (!v4)
    {
      int v7 = __rev16(*(unsigned __int16 *)(*(void *)(i + 24) + 2LL));
      if (v7)
      {
        int v8 = 1;
        while (1)
        {
          sub_1813AC7C8(a1, i, v8 - 1, v32);
          int v9 = sub_1813B1AF4(a1, (uint64_t)v32, *(_DWORD *)(i + 8), &v33);
          if (v9) {
            break;
          }
          int v10 = v33;
          int v11 = sub_1813B208C(a1, v33, v32, *(_DWORD *)(i + 8));
          int v12 = sub_1813AFFD4(a1, v10);
          if (v11) {
            int v4 = v11;
          }
          else {
            int v4 = v12;
          }
          if (v4) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = v8 >= v7;
          }
          ++v8;
          if (v13) {
            goto LABEL_7;
          }
        }

        int v4 = v9;
      }

      else
      {
        int v4 = 0;
      }
    }

LABEL_78:
      int v36 = **((_DWORD **)v37 + 4);
LABEL_79:
      if (v19 != v36)
      {
        sub_1812DC47C(v14, "row value misused", a3, a4, a5, a6, a7, a8, v364);
        uint64_t v49 = *(void *)v14;
        while (1)
        {
          if ((v15[4] & 3) == 0)
          {
            int v50 = *((_DWORD *)v15 + 14);
            if (v50 > 0) {
              break;
            }
          }

          uint64_t v15 = (unsigned __int8 *)*((void *)v15 + 2);
          if (!v15) {
            return 2 * (*(_DWORD *)(v14 + 48) != 0);
          }
        }

  *(void *)(v10 + 32) = v19;
  uint64_t v49 = *(int *)(v10 + 40);
  uint64_t v41 = (uint64_t)&v19[2 * v49];
  *(_OWORD *)uint64_t v41 = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  LODWORD(v123) = *(_DWORD *)(v10 + 76);
  int v50 = sub_181347338( *(const char **)(*(void *)v10 + 24LL),  v16,  (unsigned int *)&v123,  (uint64_t *)v124,  (const char **)&__s,  &v126);
  if (!v50)
  {
    uint64_t v121 = (char)v16;
    LODWORD(v123) = v123 | 0x100;
    uint64_t v33 = sub_1812696E8(*(uint64_t *)v124, __s, v10, (uint64_t *)(v41 + 8), 0, v123);
    ++*(_DWORD *)(v10 + 40);
    unsigned int v58 = strlen(v17) + 1;
    uint64_t v59 = (void *)sub_1812F2264(v10, v58);
    uint64_t v67 = v59;
    if (v59) {
      memcpy(v59, v17, v58);
    }
    *(void *)uint64_t v41 = v67;
    *(_BYTE *)(v10 + 111) = 0;
    int v120 = (_BYTE *)(v10 + 111);
    if (v33)
    {
      uint64_t v68 = v121;
      if (v33 == 19)
      {
        uint64_t v125 = (char *)sub_18127F588(v10, "database is already attached", v60, v61, v62, v63, v64, v65, v119);
        uint64_t v33 = 1;
      }

      LOBYTE(v19[2 * v49 + 1]) = 3;
      goto LABEL_167;
    }

    LOBYTE(v16) = v121;
LABEL_99:
    v70 = sub_18126C990(v10, *(void *)(v41 + 8));
    *(void *)(v41 + 24) = v70;
    uint64_t v122 = (char)v16;
    if (v70)
    {
      if (*(_BYTE *)(v70 + 112) && *(unsigned __int8 *)(v70 + 113) != *(unsigned __int8 *)(v10 + 100))
      {
        int v77 = 0;
        uint64_t v125 = (char *)sub_18127F588( v10,  "attached databases must use the same text encoding as main database",  v71,  v72,  v73,  v74,  v75,  v76,  v119);
        uint64_t v33 = 1;
      }

      else
      {
        uint64_t v33 = 0;
        int v77 = 1;
      }
    }

    else
    {
      int v77 = 0;
      uint64_t v33 = 7;
    }

    uint64_t v78 = *(void *)(v41 + 8);
    if (*(_BYTE *)(v78 + 17))
    {
      ++*(_DWORD *)(v78 + 20);
      if (!*(_BYTE *)(v78 + 18))
      {
        sub_1812FDE20(v78);
        uint64_t v78 = *(void *)(v41 + 8);
      }
    }

    v79 = **(void **)(v78 + 8);
    if (!*(_BYTE *)(v79 + 16))
    {
      int v80 = *(void *)(v79 + 344);
      if (!v80 || *(_BYTE *)(v80 + 63) != 2) {
        *(_BYTE *)(v79 + 8) = *(_BYTE *)(v10 + 105);
      }
    }

    int v81 = *(void *)(*(void *)(v10 + 32) + 8LL);
    if (!v81)
    {
      LOWORD(v82) = 0;
      goto LABEL_121;
    }

    if (!*(_BYTE *)(v81 + 17))
    {
      uint64_t v82 = (*(unsigned __int16 *)(*(void *)(v81 + 8) + 40LL) >> 2) & 3;
      goto LABEL_121;
    }

    ++*(_DWORD *)(v81 + 20);
    if (*(_BYTE *)(v81 + 18))
    {
      uint64_t v82 = (*(unsigned __int16 *)(*(void *)(v81 + 8) + 40LL) >> 2) & 3;
    }

    else
    {
      sub_1812FDE20(v81);
      uint64_t v82 = (*(unsigned __int16 *)(*(void *)(v81 + 8) + 40LL) >> 2) & 3;
      if (!*(_BYTE *)(v81 + 17)) {
        goto LABEL_121;
      }
    }

    uint64_t v83 = *(_DWORD *)(v81 + 20) - 1;
    *(_DWORD *)(v81 + 20) = v83;
    if (!v83) {
      sub_1812FDEFC(v81);
    }
LABEL_121:
    v84 = *(unsigned __int8 *)(v78 + 17);
    if (*(_BYTE *)(v78 + 17))
    {
      ++*(_DWORD *)(v78 + 20);
      if (*(_BYTE *)(v78 + 18))
      {
        v84 = 1;
      }

      else
      {
        sub_1812FDE20(v78);
        v84 = *(unsigned __int8 *)(v78 + 17);
      }
    }

    *(_WORD *)(*(void *)(v78 + 8) + 40LL) = *(_WORD *)(*(void *)(v78 + 8) + 40LL) & 0xFFF3 | (4 * v82);
    if (v84)
    {
      v85 = *(_DWORD *)(v78 + 20) - 1;
      *(_DWORD *)(v78 + 20) = v85;
      if (!v85) {
        sub_1812FDEFC(v78);
      }
    }

    sub_18130F444(*(void *)(v41 + 8), *(_BYTE *)(v10 + 48) & 0x38 | 3);
    uint64_t v86 = *(void *)(v41 + 8);
    if (*(_BYTE *)(v86 + 17))
    {
      unsigned int v87 = *(_DWORD *)(v86 + 20) - 1;
      *(_DWORD *)(v86 + 20) = v87;
      if (!v87) {
        sub_1812FDEFC(v86);
      }
    }

    *(_BYTE *)(v41 + 16) = 3;
    if (v77)
    {
      if (*(void *)v41)
      {
        int v88 = a3[2];
        uint64_t v68 = v122;
        if (v88)
        {
          int v89 = *(_WORD *)(v88 + 20);
          v90 = byte_1813C6455[v89 & 0x3F];
          if ((v90 - 1) < 2)
          {
            uint64_t v94 = (char *)sub_1812F2264(v10, 0x12uLL);
            if (v94)
            {
              uint64_t v66 = *(double *)"Invalid key value";
              strcpy(v94, "Invalid key value");
            }

            uint64_t v125 = v94;
            uint64_t v33 = 1;
            goto LABEL_167;
          }

          if ((v90 - 3) < 2)
          {
            if ((v89 & 2) != 0 && *(_BYTE *)(v88 + 22) == 1)
            {
              uint64_t v91 = *(_DWORD *)(v88 + 16);
            }

            else if ((v89 & 0x10) != 0)
            {
              uint64_t v91 = *(_DWORD *)(v88 + 16);
              if ((*(_WORD *)(v88 + 20) & 0x400) != 0) {
                v91 += *(_DWORD *)v88;
              }
            }

            else if ((v89 & 1) != 0)
            {
              uint64_t v91 = 0;
            }

            else
            {
              uint64_t v91 = sub_181303970(v88, 1);
              int v88 = a3[2];
            }

            uint64_t v101 = sqlite3_value_blob((sqlite3_value *)v88);
            uint64_t v99 = *(_DWORD *)(v10 + 40) - 1;
            uint64_t v100 = v10;
            uint64_t v102 = v91;
            goto LABEL_166;
          }

          if (v90 == 5)
          {
            uint64_t v95 = __s;
            if (sub_181347BEC(v10, v17, __s))
            {
              uint64_t v33 = 0;
              goto LABEL_168;
            }

            uint64_t v96 = *(void *)(*(void *)(v10 + 32) + 8LL);
            uint64_t v97 = *(unsigned __int8 **)(**(void **)(v96 + 8) + 320LL);
            if (v97 && (v98 = *v97, v97 += 2, (uint64_t v33 = v98) != 0) || (uint64_t v33 = 0, (int)sub_1812E3B68(v96) >= 1))
            {
              uint64_t v99 = *(_DWORD *)(v10 + 40) - 1;
              uint64_t v100 = v10;
              uint64_t v101 = v97;
              uint64_t v102 = v33;
LABEL_166:
              uint64_t v33 = sub_1812F0E00(v100, v99, v101, v102);
            }
          }

          else
          {
            uint64_t v33 = 0;
          }
        }

        else
        {
          sub_1812CF36C(97220);
          uint64_t v33 = 0;
        }
      }

      else
      {
        uint64_t v33 = 7;
        uint64_t v68 = v122;
      }
    }

    else
    {
      uint64_t v68 = v122;
    }

  if (v57 > 1) {
    uint64_t v43 = v39;
  }
  else {
    uint64_t v43 = 0;
  }
  if (v43 == 1)
  {
    uint64_t v64 = 0LL;
    __int128 v63 = 0;
    int v44 = v55;
    if (!v55 || !v40)
    {
      uint64_t v45 = v54;
LABEL_97:
      if (v44) {
        uint64_t v48 = v44;
      }
      else {
        uint64_t v48 = v40;
      }
      uint64_t v49 = sub_181363924(v45, *v48, &v64, &v63);
      int v50 = v64;
      if ((_DWORD)v49)
      {
        uint64_t v16 = v49;
        if (!v64) {
          return v16;
        }
      }

      else
      {
        uint64_t v51 = *v64;
        if (*v64 < 0)
        {
          uint64_t v51 = v51 & 0x7F | (v64[1] << 7);
          if (v64[1] < 0)
          {
            uint64_t v51 = v51 & 0x3FFF | (v64[2] << 14);
            if (v64[2] < 0)
            {
              uint64_t v51 = v51 & 0x1FFFFF | (v64[3] << 21);
              if (v64[3] < 0) {
                uint64_t v51 = v51 & 0xFFFFFFF | ((v64[4] & 7) << 28);
              }
            }
          }
        }

        if (v51 >= v57)
        {
          uint64_t v16 = 267LL;
        }

        else
        {
          uint64_t v16 = sub_181362E90(v45, a2, a3, v64, v63, v44, v40);
          int v50 = v64;
          if (!v64) {
            return v16;
          }
        }
      }

      int v52 = (void (**)(char *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v50);
        --qword_18C468B10;
        off_18C4653A8(v50);
        int v50 = (char *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          return v16;
        }
        int v52 = (void (**)(char *))&xmmword_18C465410;
      }

      (*v52)(v50);
      return v16;
    }

    uint64_t v45 = v54;
    if (*v55 == *v40) {
      goto LABEL_97;
    }
    uint64_t v16 = sub_181363924(v54, *v55, &v64, &v63);
    if (!(_DWORD)v16) {
      uint64_t v16 = sub_181362E90(v54, a2, a3, v64, v63, v55, 0LL);
    }
    uint64_t v46 = v64;
    if (v64)
    {
      int v47 = (void (**)(char *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_93;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v46);
      --qword_18C468B10;
      off_18C4653A8(v46);
      uint64_t v46 = (char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v47 = (void (**)(char *))&xmmword_18C465410;
LABEL_93:
        (*v47)(v46);
      }
    }

    uint64_t v64 = 0LL;
    if (!(_DWORD)v16)
    {
      int v44 = 0LL;
      goto LABEL_97;
    }
  }

  return v16;
}

                            if (v23)
                            {
                              int v38 = sub_181375BFC(a1, a3, a4);
                              unsigned int v208 = v38;
                              if (v38)
                              {
                                if (v38 == 19 && !*(void *)(a1 + 80)) {
                                  unsigned int v208 = 267;
                                }
                                goto LABEL_126;
                              }
                            }

                            uint64_t v39 = *a4;
                            uint64_t v40 = *(void *)(a1 + 512);
                            if (v40 <= v39
                              && (v40 != v39 || *(_DWORD *)(a1 + 524))
                              && *(_DWORD *)(a1 + 520) == (_DWORD)v33
                              && *(_DWORD *)(a1 + 508) <= *(_DWORD *)(a1 + 504)
                              || (uint64_t v41 = sub_1813767BC(a1)) == 0)
                            {
                              *(void *)(a1 + 512) = v39;
                              *(_DWORD *)(a1 + 520) = v33;
                              *(_DWORD *)(a1 + 524) = 0;
                              uint64_t v42 = *(_DWORD *)(a1 + 48);
                              if (v42 >= 1)
                              {
                                uint64_t v43 = 0LL;
                                int v44 = a3 + 2;
                                uint64_t v45 = (_DWORD *)v24;
                                do
                                {
                                  if (*(_BYTE *)(*(void *)(a1 + 64) + v43)) {
                                    goto LABEL_104;
                                  }
                                  uint64_t v51 = v44[v43];
                                  if (!v51) {
                                    goto LABEL_112;
                                  }
                                  int v52 = *(unsigned __int16 *)(v51 + 20);
                                  if ((~v52 & 0x202) == 0 && *(_BYTE *)(v51 + 22) == 1)
                                  {
                                    int v53 = *(void *)(v51 + 8);
                                    goto LABEL_113;
                                  }

                                  if ((v52 & 1) != 0) {
LABEL_112:
                                  }
                                    int v53 = 0LL;
                                  else {
                                    int v53 = sub_181303998((int *)v51, 1);
                                  }
LABEL_113:
                                  uint64_t v41 = sub_1813787D8(a1, v33, v53, v43, v45);
                                  if (v41) {
                                    goto LABEL_125;
                                  }
                                  uint64_t v54 = v44[v43];
                                  if (!v54)
                                  {
                                    sub_1812CF36C(91138);
LABEL_121:
                                    uint64_t v49 = 0;
                                    goto LABEL_103;
                                  }

                                  uint64_t v55 = *(_WORD *)(v54 + 20);
                                  if ((v55 & 2) != 0 && *(_BYTE *)(v54 + 22) == 1)
                                  {
                                    uint64_t v49 = *(_DWORD *)(v54 + 16);
                                  }

                                  else
                                  {
                                    if ((v55 & 0x10) != 0)
                                    {
                                      uint64_t v49 = *(_DWORD *)(v54 + 16);
                                      if ((*(_WORD *)(v54 + 20) & 0x400) != 0) {
                                        v49 += *(_DWORD *)v54;
                                      }
                                      goto LABEL_103;
                                    }

                                    if ((v55 & 1) != 0) {
                                      goto LABEL_121;
                                    }
                                    uint64_t v49 = sub_181303970(v54, 1);
                                  }

  uint64_t v66 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 24LL) + 32LL) + 32LL * *(int *)(*(void *)a1 + 32LL) + 8);
  uint64_t v67 = *(int **)(v66 + 8);
  uint64_t v68 = *(void *)(*(void *)v67 + 72LL);
  uint64_t v69 = *(_DWORD *)(a1 + 2076);
  uint64_t v146 = v69;
  if (*(void *)v68)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(*(void *)v68 + 80LL))( v68,  230440LL,  &v146))
    {
      uint64_t v67 = *(int **)(v66 + 8);
      uint64_t v69 = *(_DWORD *)(a1 + 2076);
      goto LABEL_81;
    }

    BOOL v72 = v147;
    *(void *)(a1 + 2136) = v146;
    *(void *)(a1 + 2144) += v72;
  }

  else
  {
LABEL_81:
    v70 = *(void *)(a1 + 2144) + v67[13];
    *(void *)(a1 + 2144) = v70;
    *(void *)(a1 + 2136) = v70 * (v69 - 1);
  }

  uint64_t v73 = "internal";
  switch(*v54)
  {
    case 2:
    case 5:
      break;
    case 0xA:
    case 0xD:
      uint64_t v73 = "leaf";
      break;
    default:
      uint64_t v73 = "corrupted";
      break;
  }

  *(void *)(a1 + 2096) = v73;
  unsigned int v74 = a1 + (v46 << 6);
  int v77 = *(_DWORD *)(v74 + 60);
  BOOL v76 = (int *)(v74 + 60);
  BOOL v75 = v77;
  *(_DWORD *)(a1 + 2108) += v77;
  *(void *)(a1 + 2120) += v76[1];
  uint64_t v78 = v76[6];
  if (v78 > *(_DWORD *)(a1 + 2112)) {
    *(_DWORD *)(a1 + 2112) = v78;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    uint64_t v33 = 0LL;
    if (v75 >= 1) {
      goto LABEL_93;
    }
LABEL_99:
    uint64_t v82 = 0;
  }

  else
  {
    uint64_t v83 = sqlite3_mprintf("%s", *(const char **)(a1 + (v46 << 6) + 48));
    *(void *)(a1 + 2088) = v83;
    if (v83) {
      uint64_t v33 = 0LL;
    }
    else {
      uint64_t v33 = 7LL;
    }
    BOOL v75 = *v76;
    if (*v76 < 1) {
      goto LABEL_99;
    }
LABEL_93:
    v79 = *(int32x2_t **)(a1 + (v46 << 6) + 72);
    int v80 = v75;
    if (v75 >= 5)
    {
      v84 = v75 & 3;
      if ((v80 & 3) == 0) {
        v84 = 4LL;
      }
      int v81 = v80 - v84;
      v85 = 0LL;
      uint64_t v86 = v79 + 8;
      unsigned int v87 = v81;
      int v88 = 0LL;
      do
      {
        int v89 = vzip1_s32(v86[-8], v86[-4]);
        v90 = v86[4];
        uint64_t v91 = *v86;
        v86 += 16;
        v85 = vadd_s32(v89, v85);
        int v88 = vadd_s32(vzip1_s32(v91, v90), v88);
        v87 -= 4LL;
      }

      while (v87);
      uint64_t v92 = vadd_s32(v88, v85);
      uint64_t v82 = vpadd_s32(v92, v92).u32[0];
    }

    else
    {
      int v81 = 0LL;
      uint64_t v82 = 0;
    }

    uint64_t v93 = &v79[4 * v81];
    uint64_t v94 = v80 - v81;
    do
    {
      uint64_t v95 = v93->i32[0];
      v93 += 4;
      v82 += v95;
      --v94;
    }

    while (v94);
  }

  *(void *)(a1 + 2128) += v82;
  if (*(_BYTE *)(a1 + 17)) {
    goto LABEL_9;
  }
  return v33;
}

LABEL_84:
        *(_DWORD *)(v49 + 84) = v50;
      }

      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x30u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
      goto LABEL_2;
    case 0x32u:
    case 0x33u:
      uint64_t v25 = *(void *)(v13 + 24);
      if (v25)
      {
        int v8 = *(_DWORD *)(v25 + 32);
        uint64_t v26 = *(void *)(v25 + 24);
        if (v26)
        {
          int v9 = *(_DWORD *)(v26 + 32);
          uint64_t v27 = *(void *)(v26 + 24);
          if (v27)
          {
            int v11 = *(_DWORD *)(v27 + 32);
            uint64_t v28 = *(void *)(v27 + 24);
            if (v28)
            {
              int v12 = *(_DWORD *)(v28 + 32);
              uint64_t v29 = *(void *)(v28 + 24);
              if (v29)
              {
                uint64_t v30 = *(void *)v13;
                int v10 = *(_DWORD *)(v29 + 32);
                uint64_t v31 = *(void *)(v29 + 24);
                if (v31)
                {
                  int __src = *(_DWORD *)(v31 + 32);
                  uint64_t v32 = *(void *)(v31 + 24);
                  if (v32) {
                    int v383 = *(_DWORD *)(v32 + 32);
                  }
                }
              }

              else
              {
                uint64_t v30 = *(void *)v13;
              }
            }

            else
            {
              uint64_t v30 = *(void *)v13;
            }
          }

          else
          {
            uint64_t v30 = *(void *)v13;
          }
        }

        else
        {
          uint64_t v30 = *(void *)v13;
        }
      }

      else
      {
        uint64_t v30 = *(void *)v13;
      }

      int v238 = *(_DWORD *)(v13 + 32);
      v239 = (unsigned __int8 *)*((void *)a2 + 2);
      if (v239)
      {
        sub_18131C57C((uint64_t)a1, (uint64_t)v239);
        v239 = (unsigned __int8 *)*((void *)v15 + 2);
      }

      for (uint64_t i = v239; ; uint64_t i = (unsigned __int8 *)*((void *)i + 2))
      {
        int v241 = *i;
      }

      if (v241 == 176) {
        int v241 = i[2];
      }
      if ((v241 - 153) < 3
        || v241 == 117
        || v241 == 167
        && (i[6] & 0x20) == 0
        && (uint64_t v242 = *((void *)i + 9)) != 0
        && ((uint64_t v243 = *((unsigned int *)i + 12), (v243 & 0x80000000) != 0)
         || (uint64_t v244 = *(void *)(v242 + 8)) == 0
         || (*(_BYTE *)(v244 + 16 * v243 + 8) & 0xF) != 0))
      {
        if (*(unsigned __int8 *)(v30 + 302) <= 1u)
        {
          BOOL v245 = *v15 == 51;
          *((_DWORD *)v15 + 1) |= 0x800u;
          *((_DWORD *)v15 + 2) = v245;
          *uint64_t v15 = -101;
          *(_DWORD *)(v13 + 32) = v238;
          uint64_t v246 = *(void *)(v13 + 24);
          if (v246)
          {
            *(_DWORD *)(v246 + 32) = v8;
            uint64_t v247 = *(void *)(v246 + 24);
            if (v247)
            {
              *(_DWORD *)(v247 + 32) = v9;
              uint64_t v248 = *(void *)(v247 + 24);
              if (v248)
              {
                *(_DWORD *)(v248 + 32) = v11;
                uint64_t v249 = *(void *)(v248 + 24);
                if (v249)
                {
                  *(_DWORD *)(v249 + 32) = v12;
                  uint64_t v250 = *(void *)(v249 + 24);
                  if (v250)
                  {
                    *(_DWORD *)(v250 + 32) = v10;
                    uint64_t v251 = *(void *)(v250 + 24);
                    if (v251)
                    {
                      *(_DWORD *)(v251 + 32) = __src;
                      uint64_t v252 = *(void *)(v251 + 24);
                      if (v252) {
                        *(_DWORD *)(v252 + 32) = v383;
                      }
                    }
                  }
                }
              }
            }
          }

          if (v239) {
            sub_181309110(*(void **)v30, v239);
          }
          *((void *)v15 + 2) = 0LL;
        }
      }

      return 1LL;
    case 0x3Bu:
      uint64_t v369 = a1[5];
      uint64_t v39 = 0LL;
      uint64_t v40 = 0LL;
      uint64_t v41 = 0LL;
      uint64_t v42 = (unsigned __int8 *)*((void *)a2 + 1);
      uint64_t v379 = *(void *)v14;
      v391[0] = 0LL;
      *((_DWORD *)a2 + 11) = -1;
      v367 = (int *)(a2 + 44);
      goto LABEL_186;
    case 0x4Bu:
      uint64_t v43 = *(void *)(v13 + 8);
      *(_WORD *)a2 = 17575;
      *((void *)a2 + 9) = *(void *)(v43 + 40);
      int v44 = *((_DWORD *)a2 + 12) - 1;
      *((_DWORD *)a2 + 11) = *(_DWORD *)(v43 + 72);
      *((_DWORD *)a2 + 12) = v44;
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x8Du:
      uint64_t v45 = *((void *)a2 + 2);
      if ((*(_DWORD *)(v13 + 40) & 0x28) == 0) {
        goto LABEL_51;
      }
      sub_1812DC47C(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"the . operator");
      uint64_t v46 = v15;
      while (1)
      {
        if ((v46[4] & 3) == 0)
        {
          int v47 = *((_DWORD *)v46 + 14);
          if (v47 > 0) {
            break;
          }
        }

        uint64_t v46 = (unsigned __int8 *)*((void *)v46 + 2);
        if (!v46) {
          goto LABEL_51;
        }
      }

      *(_DWORD *)(*(void *)v14 + 84LL) = v47;
LABEL_51:
      uint64_t v48 = *((void *)v15 + 3);
      uint64_t v369 = v13;
      if (*(_BYTE *)v48 == 59)
      {
        uint64_t v41 = 0LL;
      }

      else
      {
        uint64_t v41 = *(char **)(v45 + 8);
        uint64_t v45 = *(void *)(v48 + 16);
        uint64_t v48 = *(void *)(v48 + 24);
      }

      uint64_t v39 = *(unsigned __int8 **)(v45 + 8);
      uint64_t v42 = *(unsigned __int8 **)(v48 + 8);
      if (*(unsigned __int8 *)(v14 + 302) >= 2u)
      {
        uint64_t v55 = *(void **)(v14 + 408);
        if (v55)
        {
          v56 = *(unsigned __int8 ***)(v14 + 408);
          while (*v56 != (unsigned __int8 *)v48)
          {
            v56 = (unsigned __int8 **)v56[3];
            if (!v56) {
              goto LABEL_110;
            }
          }

          const char *v56 = v15;
          uint64_t v55 = *(void **)(v14 + 408);
LABEL_110:
          if (v55)
          {
            while (*v55 != v45)
            {
              uint64_t v55 = (void *)v55[3];
              if (!v55) {
                goto LABEL_164;
              }
            }

            *uint64_t v55 = v15 + 72;
          }
        }
      }

          *uint64_t v33 = 0LL;
LABEL_52:
          *(void *)a4 = 0LL;
          return 1LL;
        }
      }

      else if (byte_1813C6343[v47] != byte_1813C6343[v48])
      {
        for (uint64_t k = "subsecond"; ; ++k)
        {
          int v50 = *v21;
          uint64_t v51 = *(unsigned __int8 *)k;
          if ((_DWORD)v50 == (_DWORD)v51)
          {
            if (!*v21) {
              goto LABEL_76;
            }
          }

          else if (byte_1813C6343[v50] != byte_1813C6343[v51])
          {
            return 1LL;
          }

          ++v21;
        }
      }

      ++v45;
    }
  }

  uint64_t v42 = v162[0];
  *(double *)(a4 + 32) = v162[0];
  *(_BYTE *)(a4 + 41) = 1;
  if (v42 >= 0.0 && v42 < 5373484.5)
  {
    *(void *)a4 = (uint64_t)(v42 * 86400000.0 + 0.5);
LABEL_89:
    *(_BYTE *)(a4 + 40) = 1;
  }

    if (v13) {
      break;
    }
    int v38 = (v38 + 1);
  }

  while (v38 <= v41);
  if (!v13) {
LABEL_109:
  }
    uint64_t v13 = sub_1812AFF08(v31, 0LL, 1);
  uint64_t v48 = v39;
  if (v39 >= dword_18C54FA50 + v60) {
    uint64_t v39 = dword_18C54FA50 + v60;
  }
  uint64_t v49 = v13 == 0;
  if (!v13)
  {
    int v50 = dword_18C54FA50 + (int)v22;
    if (v39 > v50)
    {
      do
      {
        __int128 v62 = 0LL;
        uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v11 + 288))( v11,  (v50 / v22) + 1,  &v62,  0LL);
        if (!v13) {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v40 + 24LL))( v40,  *(void *)(v62 + 8),  v22,  v50);
        }
        uint64_t v57 = v62;
        if (v62)
        {
          if ((*(_WORD *)(v62 + 52) & 0x20) != 0)
          {
            unsigned int v58 = *(void *)(v62 + 40);
            --*(_DWORD *)(v58 + 152);
            *(void *)(v57 + 32) = *(void *)(v58 + 168);
            *(void *)(v58 + 168) = v57;
            (*(void (**)(void, void, void))(**(void **)(v58 + 72) + 144LL))( *(void *)(v58 + 72),  *(void *)(v58 + 200) * (*(_DWORD *)(v57 + 48) - 1),  *(void *)(v57 + 8));
          }

          else
          {
            sub_1812F9F44(v62);
          }
        }

        v50 += v22;
        uint64_t v49 = v13 == 0;
        if (v13) {
          v56 = 0;
        }
        else {
          v56 = v50 < v39;
        }
      }

      while (v56);
    }
  }

  if (v49)
  {
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v40 + 48LL))(v40, &v62);
    if (v51)
    {
      uint64_t v13 = v51;
      goto LABEL_117;
    }

    if (v62 <= v48 || (uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v40 + 32LL))(v40, v48)) == 0)
    {
      uint64_t v13 = sub_1812D62B8(v31, 0LL);
      if (!v13)
      {
LABEL_105:
        int v47 = sub_1812A1010(*((void *)p + 1), 0);
        if (v47) {
          uint64_t v13 = v47;
        }
        else {
          uint64_t v13 = 101;
        }
      }
    }
  }

          *((_DWORD *)a1 + 20) = v30;
          if (v30) {
            goto LABEL_87;
          }
          if (*((void *)a1 + 52))
          {
            uint64_t v30 = 0;
            goto LABEL_87;
          }

          uint64_t v30 = 0;
          *((_DWORD *)a1 + 21) = -1;
          int v50 = *((void *)a1 + 3);
          if (!v50) {
            return v30;
          }
          goto LABEL_88;
      }
    }
  }

  if ((_DWORD)v18)
  {
    BOOL v72 = *(unsigned __int8 *)(v13 + 31);
    if (v72 <= 7)
    {
      *(_BYTE *)(v13 + 31) = v72 + 1;
      *(_DWORD *)(v13 + 4 * v72 + 224) = v18;
    }
  }

  return result;
}

LABEL_172:
            ++v95;
          }

          if (byte_1813C6343[v97] == byte_1813C6343[v98]) {
            goto LABEL_172;
          }
          if (++v93 == v92)
          {
            uint64_t v40 = 0LL;
            goto LABEL_180;
          }
        }
      }

      LODWORD(v93) = 0;
      uint64_t v40 = 0LL;
LABEL_179:
      if ((_DWORD)v93 != (_DWORD)v92) {
        goto LABEL_186;
      }
LABEL_180:
      uint64_t v99 = 0LL;
      while (2)
      {
        uint64_t v100 = aMain[v99];
        uint64_t v101 = v41[v99];
        if ((_DWORD)v100 != (_DWORD)v101)
        {
          if (byte_1813C6343[v100] != byte_1813C6343[v101]) {
            goto LABEL_186;
          }
          goto LABEL_182;
        }

        if (aMain[v99])
        {
LABEL_182:
          ++v99;
          continue;
        }

        break;
      }

      uint64_t v102 = *(void *)(v91 + 32);
      uint64_t v40 = *(void *)(v102 + 24);
      uint64_t v41 = *(char **)v102;
LABEL_186:
      uint64_t v103 = 0LL;
      uint64_t v104 = 0LL;
      int v105 = 0;
      BOOL v366 = v39 == 0LL;
      v380 = v15;
      v381 = v39;
      v378 = v15 + 72;
      v368 = (unsigned int *)(v14 + 176);
      v373 = v42 + 1;
      uint64_t v374 = v14;
      uint64_t v106 = v369;
      v385 = v41;
      __srcb = v42;
      while (2)
      {
        uint64_t v107 = *(int **)(v106 + 8);
        if (v107)
        {
          unsigned int v371 = v104;
          uint64_t v372 = v106;
          uint64_t v375 = v40;
          if (*v107 >= 1)
          {
            int v108 = 0;
            int v109 = 0;
            int v110 = v107 + 2;
            v376 = *(int **)(v106 + 8);
            while (1)
            {
              uint64_t v111 = *((void *)v110 + 4);
              if ((*(_WORD *)((_BYTE *)v110 + 61) & 0x2000) != 0) {
                break;
              }
              if (!v39) {
                goto LABEL_196;
              }
LABEL_261:
              if (v41)
              {
                if (*(void *)(v111 + 96) != v375) {
                  goto LABEL_193;
                }
                if (!v375)
                {
                  int v155 = strcmp(v41, "*");
                  uint64_t v41 = v385;
                  uint64_t v42 = __srcb;
                  uint64_t v39 = v381;
                  if (v155) {
                    goto LABEL_193;
                  }
                }
              }

              uint64_t v143 = *((void *)v110 + 3);
              if (v143)
              {
                uint64_t v144 = (unsigned __int8 *)*((void *)v110 + 3);
                for (uint64_t k = v39; ; ++k)
                {
                  uint64_t v146 = *k;
                  uint64_t v147 = *v144;
                  if ((_DWORD)v146 == (_DWORD)v147)
                  {
                    if (!*k) {
                      goto LABEL_295;
                    }
                  }

                  else if (byte_1813C6343[v146] != byte_1813C6343[v147])
                  {
                    goto LABEL_193;
                  }

                  ++v144;
                }
              }

              for (uint64_t m = 0LL; ; ++m)
              {
                uint64_t v149 = v39[m];
                uint64_t v150 = *(unsigned __int8 *)(*(void *)v111 + m);
                if ((_DWORD)v149 != (_DWORD)v150) {
                  break;
                }
                if (!v39[m]) {
                  goto LABEL_295;
                }
LABEL_273:
                ;
              }

              if (byte_1813C6343[v149] == byte_1813C6343[v150]) {
                goto LABEL_273;
              }
              if (*(_DWORD *)(v111 + 40) != 1) {
                goto LABEL_193;
              }
              int v153 = sub_181320EFC((uint64_t)v39, v111, v375);
              uint64_t v41 = v385;
              uint64_t v42 = __srcb;
              uint64_t v39 = v381;
              if (!v153) {
                goto LABEL_193;
              }
LABEL_295:
              if (v143)
              {
                if (*(unsigned __int8 *)(v374 + 302) >= 2u)
                {
                  v154 = *(unsigned __int8 ***)(v374 + 408);
                  if (v154)
                  {
                    while (*v154 != v378)
                    {
                      v154 = (unsigned __int8 **)v154[3];
                      if (!v154) {
                        goto LABEL_196;
                      }
                    }

                    int *v154 = 0LL;
                  }
                }
              }

LABEL_196:
              if (v42 && (int v112 = *v42) != 0)
              {
                int v113 = 0;
                uint64_t v114 = v373;
                do
                {
                  v113 += byte_1813C6343[v112];
                  int v115 = *v114++;
                  int v112 = v115;
                }

                while (v115);
              }

              else
              {
                LOBYTE(v113) = 0;
              }

              int v129 = *(__int16 *)(v111 + 54);
              if (v129 < 1)
              {
LABEL_287:
                if (!v109) {
                  goto LABEL_288;
                }
                goto LABEL_193;
              }

              unsigned int v130 = 0;
              uint64_t v131 = *(void *)(v111 + 8);
              while (2)
              {
                if (*(unsigned __int8 *)(v131 + 11) != v113)
                {
LABEL_233:
                  ++v130;
                  v131 += 16LL;
                  if (v130 == v129)
                  {
                    uint64_t v39 = v381;
                    uint64_t v41 = v385;
                    if (!v109) {
                      goto LABEL_288;
                    }
                    goto LABEL_193;
                  }

                  continue;
                }

                break;
              }

              v132 = *(_BYTE **)v131;
              uint64_t v133 = v42;
              while (2)
              {
                uint64_t v134 = *v132;
                uint64_t v135 = *v133;
                if ((_DWORD)v134 != (_DWORD)v135)
                {
                  if (byte_1813C6343[v134] != byte_1813C6343[v135]) {
                    goto LABEL_233;
                  }
LABEL_237:
                  ++v132;
                  ++v133;
                  continue;
                }

                break;
              }

              if (*v132) {
                goto LABEL_237;
              }
              if (v109 < 1) {
                goto LABEL_282;
              }
              if ((*(_WORD *)((_BYTE *)v110 + 61) & 0x400) == 0
                || (unsigned __int8 v136 = (unsigned int *)*((void *)v110 + 9), v137 = *v136, (int)v137 < 1))
              {
LABEL_279:
                if (v391[0])
                {
                  sub_181311F48((void *)v379, (void *)v391[0]);
                  uint64_t v42 = __srcb;
                }

                goto LABEL_281;
              }

              uint64_t v138 = 0LL;
              while (2)
              {
                int v139 = *(_BYTE **)&v136[4 * v138 + 2];
                unsigned int v140 = v42;
LABEL_247:
                uint64_t v141 = *v139;
                uint64_t v142 = *v140;
                if ((_DWORD)v141 != (_DWORD)v142)
                {
                  if (byte_1813C6343[v141] != byte_1813C6343[v142])
                  {
                    if (++v138 != v137) {
                      continue;
                    }
                    goto LABEL_279;
                  }

            if (v40)
            {
              int v109 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8 -= (int)off_18C4653B8(v40);
                --qword_18C468B10;
                off_18C4653A8(v40);
                uint64_t v40 = (unsigned int *)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_203;
                }
                int v109 = (uint64_t (**)(unsigned int *))&xmmword_18C465410;
              }

              (*v109)(v40);
            }

LABEL_323:
        v163 = 0LL;
        if (v39) {
          goto LABEL_344;
        }
LABEL_352:
        if (v163)
        {
          if (v42 && (int v178 = *v42) != 0)
          {
            int v179 = 0;
            v180 = v373;
            do
            {
              v179 += byte_1813C6343[v178];
              int v181 = *v180++;
              int v178 = v181;
            }

            while (v181);
          }

          else
          {
            LOBYTE(v179) = 0;
          }

          uint64_t v40 = (uint64_t)v163[12];
          v182 = v163[1];
          int v183 = *((__int16 *)v163 + 27);
          if (v183 < 1)
          {
            signed int v190 = 0;
          }

          else
          {
            signed int v184 = 0;
            v185 = v163[1];
            do
            {
              if (v185[11] == v179)
              {
                v186 = *(_BYTE **)v185;
                for (nn = v42; ; ++nn)
                {
                  uint64_t v188 = *v186;
                  uint64_t v189 = *nn;
                  if ((_DWORD)v188 == (_DWORD)v189)
                  {
                    if (!*v186)
                    {
                      else {
                        signed int v190 = v184;
                      }
                      uint64_t v39 = v381;
                      uint64_t v41 = v385;
                      if (v190 < v183) {
                        goto LABEL_394;
                      }
                      goto LABEL_376;
                    }
                  }

                  else if (byte_1813C6343[v188] != byte_1813C6343[v189])
                  {
                    break;
                  }

                  ++v186;
                }
              }

              ++v184;
              v185 += 16;
            }

            while (v184 != v183);
            signed int v190 = *((__int16 *)v163 + 27);
          }

      int v195 = v13[v194 + 1];
      int v196 = (((v195 - 97) >> 1) | (((_BYTE)v195 - 97) << 7));
      uint64_t v23 = v196 > 0xA;
      uint64_t v197 = (1 << v196) & 0x495;
      if (!v23 && v197 != 0) {
        goto LABEL_328;
      }
      if (v195 != 121) {
        uint64_t v193 = 1;
      }
      if ((v193 & 1) == 0)
      {
LABEL_328:
        int v199 = v194 + 2LL;
        uint64_t v200 = &v13[v199];
        while (1)
        {
          uint64_t v201 = *v200++;
          uint64_t v202 = (((v201 - 97) >> 1) | ((v201 - 97) << 7));
          uint64_t v23 = v202 > 0xA;
          int v203 = (1 << v202) & 0x495;
          if (v23 || v203 == 0) {
            break;
          }
          LODWORD(v199) = v199 + 1;
        }
      }

      *(_WORD *)&v13[v130] = 27745;
LABEL_438:
      int v8 = (v8 - 3);
      goto LABEL_439;
    case 't':
      uint64_t v138 = (v8 - 6);
      int v139 = (v8 - 5);
      int v110 = &v13[v139];
      if (*(_DWORD *)&v13[v139] == 1953066081 && v13[v139 + 4] == 105)
      {
        uint64_t v205 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
        if (v205 <= 0xA)
        {
          uint64_t v206 = 1;
          if (((1 << v205) & 0x495) != 0)
          {
            uint64_t v207 = 0;
            goto LABEL_339;
          }
        }

        uint64_t v207 = 1;
        if ((_DWORD)v8 == 6)
        {
          uint64_t v206 = 0;
          goto LABEL_339;
        }

        v414 = 1LL;
        while (1)
        {
          v415 = v13[v414];
          v416 = (((v415 - 97) >> 1) | (((_BYTE)v415 - 97) << 7));
          uint64_t v23 = v416 > 0xA;
          v417 = (1 << v416) & 0x495;
          v418 = v23 || v417 == 0;
          if (!v418 || v415 == 121) {
            break;
          }
          if (v139 == ++v414)
          {
            uint64_t v206 = 0;
            uint64_t v207 = v8 - 5;
            goto LABEL_339;
          }
        }

        uint64_t v206 = 1;
        uint64_t v207 = v414;
LABEL_339:
        unsigned int v208 = v13[v207 + 1];
        uint64_t v209 = (((v208 - 97) >> 1) | (((_BYTE)v208 - 97) << 7));
        uint64_t v23 = v209 > 0xA;
        uint64_t v210 = (1 << v209) & 0x495;
        if (!v23 && v210 != 0) {
          goto LABEL_344;
        }
        if (v208 != 121) {
          uint64_t v206 = 1;
        }
        if ((v206 & 1) == 0)
        {
LABEL_344:
          uint64_t v212 = v207 + 2LL;
          uint64_t v213 = &v13[v212];
          while (1)
          {
            uint64_t v214 = *v213++;
            uint64_t v215 = (((v214 - 97) >> 1) | ((v214 - 97) << 7));
            uint64_t v23 = v215 > 0xA;
            v216 = (1 << v215) & 0x495;
            if (v23 || v216 == 0) {
              break;
            }
            LODWORD(v212) = v212 + 1;
          }
        }

        uint64_t v143 = 27745;
LABEL_437:
        *(_WORD *)int v110 = v143;
        goto LABEL_438;
      }

      if (*(_DWORD *)v110 == 1953068649 && v110[4] == 105)
      {
        v110[2] = 101;
        uint64_t v114 = 30313;
        goto LABEL_358;
      }

      if (v8 < 7)
      {
        int v8 = 6LL;
        goto LABEL_439;
      }

      int v110 = &v13[v138];
      uint64_t v142 = *(_DWORD *)&v13[v138] == 1768712546 && *(_WORD *)&v13[v138 + 4] == 26996;
      if (v142 && sub_1813AA198(v13, (int)v8 - 6))
      {
        v110[2] = 101;
        uint64_t v143 = 27746;
        goto LABEL_437;
      }

LABEL_376:
          int v191 = "_ROWID_";
          for (i1 = v42; ; ++i1)
          {
            uint64_t v193 = *i1;
            uint64_t v194 = *(unsigned __int8 *)v191;
            if ((_DWORD)v193 == (_DWORD)v194)
            {
              if (!*i1)
              {
LABEL_391:
                if ((*((_BYTE *)v163 + 49) & 2) == 0) {
                  signed int v190 = -1;
                }
LABEL_393:
                uint64_t v39 = v381;
                uint64_t v41 = v385;
LABEL_394:
                if (v190 >= v183)
                {
                  int v109 = 0;
                  ++v105;
                  goto LABEL_396;
                }

                int v253 = *v367;
                if (*v367 == 2)
                {
                  BOOL v229 = (char *)v15;
                  uint64_t v230 = v368;
                  uint64_t v227 = v369;
                  if (*(unsigned __int8 *)(v14 + 302) >= 2u)
                  {
                    uint64_t v103 = 0LL;
                    *((_DWORD *)v15 + 12) = v190;
                    *((void *)v15 + 9) = v163;
                    int v109 = 1;
                    goto LABEL_542;
                  }

                  uint64_t v300 = (__int16)v190;
                  if ((v190 & 0x8000) == 0 && ((_DWORD)v163[6] & 0x20) != 0)
                  {
                    if ((_WORD)v190)
                    {
                      if ((v190 << 16) >= 0x110000)
                      {
                        uint64_t v332 = v190 & 0xF;
                        if ((v190 & 0xF) == 0) {
                          uint64_t v332 = 16LL;
                        }
                        uint64_t v301 = v300 - v332;
                        v333 = v182 + 142;
                        int16x8_t v334 = 0uLL;
                        v335.i64[0] = 0x1000100010001LL;
                        v335.i64[1] = 0x1000100010001LL;
                        uint64_t v336 = v301;
                        int16x8_t v337 = 0uLL;
                        do
                        {
                          int8x16_t v338 = vqtbl2q_s8(*((int8x16x2_t *)v333 - 2), (int8x16_t)xmmword_1813CDDC0);
                          v338.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v333 - 32LL), (int8x16_t)xmmword_1813CDDB0).i32[3];
                          v339.i32[0] = vzip1q_s16(*((int16x8_t *)v333 - 8), *((int16x8_t *)v333 - 7)).u32[0];
                          v339.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v333 - 96LL), (int8x16_t)xmmword_1813CDDD0).i32[1];
                          v339.i64[1] = v338.i64[1];
                          uint16x8_t v340 = (uint16x8_t)vqtbl2q_s8(*((int8x16x2_t *)v333 + 3), (int8x16_t)xmmword_1813CDDB0);
                          int8x16x2_t v395 = *(int8x16x2_t *)(v333 + 1);
                          int8x16_t v341 = vqtbl2q_s8(*((int8x16x2_t *)v333 + 2), (int8x16_t)xmmword_1813CDDC0);
                          int16x8_t v343 = *(int16x8_t *)v333;
                          int16x8_t v342 = *((int16x8_t *)v333 + 1);
                          v333 += 256;
                          v341.i32[3] = v340.i32[3];
                          v340.i32[0] = vzip1q_s16(v343, v342).u32[0];
                          v340.i32[1] = vqtbl2q_s8(v395, (int8x16_t)xmmword_1813CDDD0).i32[1];
                          v340.i64[1] = v341.i64[1];
                          int16x8_t v334 = vaddq_s16((int16x8_t)vbicq_s8(v335, (int8x16_t)vshrq_n_u16(v339, 5uLL)), v334);
                          int16x8_t v337 = vaddq_s16((int16x8_t)vbicq_s8(v335, (int8x16_t)vshrq_n_u16(v340, 5uLL)), v337);
                          v336 -= 16LL;
                        }

                        while (v336);
                        __int16 v302 = vaddvq_s16(vaddq_s16(v337, v334));
                      }

                      else
                      {
                        uint64_t v301 = 0LL;
                        __int16 v302 = 0;
                      }

                      uint64_t v344 = v300 - v301;
                      uint64_t v345 = &v182[16 * v301 + 14];
                      do
                      {
                        unsigned int v346 = *(unsigned __int16 *)v345;
                        v345 += 16;
                        v302 += ((v346 >> 5) & 1) == 0;
                        --v344;
                      }

                      while (v344);
                    }

                    else
                    {
                      __int16 v302 = 0;
                    }

                    if ((*(_WORD *)&v182[16 * v300 + 14] & 0x20) != 0) {
                      LOWORD(v300) = v190 - v302 + *((_WORD *)v163 + 28);
                    }
                    else {
                      LOWORD(v300) = v302;
                    }
                  }

                  uint64_t v103 = 0LL;
                  int v331 = *(_DWORD *)(*(void *)(v106 + 16) + 72LL) + (__int16)v300;
LABEL_666:
                  int *v367 = v331;
                  int v109 = 1;
                  char v236 = -80;
                }

                else
                {
                  *(void *)v378 = v163;
                  uint64_t v264 = (__int16)v190;
                  BOOL v229 = (char *)v15;
                  uint64_t v230 = v368;
                  uint64_t v227 = v369;
                  if (*(_BYTE *)(v14 + 219))
                  {
                    v15[2] = -89;
                    *((_DWORD *)v15 + 12) = v190;
                    int v265 = v253 + v253 * *((__int16 *)v163 + 27);
                    if ((v190 & 0x8000) == 0 && ((_DWORD)v163[6] & 0x20) != 0)
                    {
                      uint64_t v266 = v163[1];
                      if ((_WORD)v190)
                      {
                        if ((v190 << 16) >= 0x110000)
                        {
                          uint64_t v316 = v190 & 0xF;
                          if ((v190 & 0xF) == 0) {
                            uint64_t v316 = 16LL;
                          }
                          uint64_t v268 = v264 - v316;
                          int v317 = v266 + 142;
                          int16x8_t v318 = 0uLL;
                          v319.i64[0] = 0x1000100010001LL;
                          v319.i64[1] = 0x1000100010001LL;
                          uint64_t v320 = v268;
                          int16x8_t v321 = 0uLL;
                          do
                          {
                            int8x16_t v322 = vqtbl2q_s8(*((int8x16x2_t *)v317 - 2), (int8x16_t)xmmword_1813CDDC0);
                            v322.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v317 - 32LL), (int8x16_t)xmmword_1813CDDB0).i32[3];
                            v323.i32[0] = vzip1q_s16(*((int16x8_t *)v317 - 8), *((int16x8_t *)v317 - 7)).u32[0];
                            v323.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v317 - 96LL), (int8x16_t)xmmword_1813CDDD0).i32[1];
                            v323.i64[1] = v322.i64[1];
                            uint16x8_t v324 = (uint16x8_t)vqtbl2q_s8(*((int8x16x2_t *)v317 + 3), (int8x16_t)xmmword_1813CDDB0);
                            int8x16x2_t v394 = *(int8x16x2_t *)(v317 + 1);
                            int8x16_t v325 = vqtbl2q_s8(*((int8x16x2_t *)v317 + 2), (int8x16_t)xmmword_1813CDDC0);
                            int16x8_t v327 = *(int16x8_t *)v317;
                            int16x8_t v326 = *((int16x8_t *)v317 + 1);
                            v317 += 256;
                            v325.i32[3] = v324.i32[3];
                            v324.i32[0] = vzip1q_s16(v327, v326).u32[0];
                            v324.i32[1] = vqtbl2q_s8(v394, (int8x16_t)xmmword_1813CDDD0).i32[1];
                            v324.i64[1] = v325.i64[1];
                            int16x8_t v318 = vaddq_s16((int16x8_t)vbicq_s8(v319, (int8x16_t)vshrq_n_u16(v323, 5uLL)), v318);
                            int16x8_t v321 = vaddq_s16((int16x8_t)vbicq_s8(v319, (int8x16_t)vshrq_n_u16(v324, 5uLL)), v321);
                            v320 -= 16LL;
                          }

                          while (v320);
                          uint64_t v267 = v40;
                          __int16 v269 = vaddvq_s16(vaddq_s16(v321, v318));
                        }

                        else
                        {
                          uint64_t v267 = v40;
                          uint64_t v268 = 0LL;
                          __int16 v269 = 0;
                        }

                        uint64_t v328 = v264 - v268;
                        BOOL v329 = &v266[16 * v268 + 14];
                        do
                        {
                          unsigned int v330 = *(unsigned __int16 *)v329;
                          v329 += 16;
                          v269 += ((v330 >> 5) & 1) == 0;
                          --v328;
                        }

                        while (v328);
                      }

                      else
                      {
                        uint64_t v267 = v40;
                        __int16 v269 = 0;
                      }

                      if ((*(_WORD *)&v266[16 * v264 + 14] & 0x20) != 0) {
                        LOWORD(v264) = v190 - v269 + *((_WORD *)v163 + 28);
                      }
                      else {
                        LOWORD(v264) = v269;
                      }
                      uint64_t v40 = v267;
                    }

                    uint64_t v103 = 0LL;
                    int v331 = *(_DWORD *)(v106 + 16) + v265 + (__int16)v264 + 1;
                    goto LABEL_666;
                  }

                  *((_DWORD *)v15 + 12) = v264;
                  if (v190 < 0)
                  {
                    uint64_t v103 = 0LL;
                    v15[1] = 68;
                  }

                  else
                  {
                    int v309 = 1 << v190;
                    uint64_t v103 = 0LL;
                    if (v253) {
                      *(_DWORD *)(v14 + 212) |= v309;
                    }
                    else {
                      *(_DWORD *)(v14 + 208) |= v309;
                    }
                  }

                  int v109 = 1;
                  char v236 = 77;
                }

                              uint64_t v143 = *(unsigned __int8 **)(v142 + 8);
                              if (*v143 == 167)
                              {
                                uint64_t v211 = *((void *)v143 + 9);
                                if (*(_BYTE *)(v211 + 63) == 1)
                                {
                                  uint64_t v212 = (uint64_t **)(v211 + 80);
                                  do
                                  {
                                    uint64_t v213 = *v212;
                                    uint64_t v214 = *v212;
                                    uint64_t v215 = *v214;
                                    uint64_t v212 = (uint64_t **)(v214 + 5);
                                  }

                                  while (v215 != v243);
                                  v216 = *(uint64_t (**)(void))(*(void *)v213[2] + 144LL);
                                  if (v216)
                                  {
                                    uint64_t v247 = v216();
                                    if (v247 >= 150)
                                    {
                                      uint64_t v148 = *(unsigned __int8 **)(v142 + 32);
                                      uint64_t v149 = 1;
                                      goto LABEL_299;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }

                        goto LABEL_383;
                      }

                      uint64_t v148 = (unsigned __int8 *)*((void *)v17 + 2);
                      uint64_t v147 = (unsigned __int8 *)*((void *)v17 + 3);
                      if (*v148 == 167)
                      {
                        uint64_t v149 = *(unsigned __int8 *)(*((void *)v148 + 9) + 63LL) == 1;
                        if (v147)
                        {
LABEL_269:
                          if (*v147 == 167 && *(_BYTE *)(*((void *)v147 + 9) + 63LL) == 1)
                          {
                            ++v149;
                            uint64_t v143 = (unsigned __int8 *)*((void *)v17 + 3);
                          }

                          else
                          {
                            uint64_t v143 = (unsigned __int8 *)*((void *)v17 + 2);
                            uint64_t v148 = (unsigned __int8 *)*((void *)v17 + 3);
                          }

LABEL_667:
                if ((v229[6] & 0x81) == 0)
                {
                  v347 = (unsigned __int8 *)*((void *)v229 + 2);
                  if (v347)
                  {
                    uint64_t v348 = v40;
                    sub_181309110((void *)v379, v347);
                    uint64_t v40 = v348;
                  }

                  *((void *)v229 + 2) = 0LL;
                  __int16 v349 = (unsigned __int8 *)*((void *)v229 + 3);
                  if (v349)
                  {
                    uint64_t v350 = v40;
                    sub_181309110((void *)v379, v349);
                    uint64_t v40 = v350;
                  }

                  *((void *)v229 + 3) = 0LL;
                  *((_DWORD *)v229 + 1) |= 0x800000u;
                }

                uint64_t v351 = *((unsigned int *)v229 + 12);
                if ((v351 & 0x80000000) == 0 && v103)
                {
                  uint64_t v352 = *(void *)v378;
                  if ((*(_BYTE *)(*(void *)v378 + 48LL) & 0x60) != 0
                    && (*(_WORD *)(*(void *)(v352 + 8) + 16 * v351 + 14) & 0x60) != 0)
                  {
                    int v353 = *(__int16 *)(v352 + 54);
                    if (v353 <= 63) {
                      uint64_t v354 = ~(-1LL << v353);
                    }
                    else {
                      uint64_t v354 = -1LL;
                    }
                  }

                  else
                  {
                    uint64_t v354 = 1LL << v351;
                  }

                  *(void *)(v103 + 80) |= v354;
                }

                *BOOL v229 = v236;
                if (v109 == 1) {
                  goto LABEL_685;
                }
                return 2LL;
              }
            }

            else if (byte_1813C6343[v193] != byte_1813C6343[v194])
            {
              int v195 = "ROWID";
              for (i2 = v42; ; ++i2)
              {
                uint64_t v197 = *i2;
                uint64_t v198 = *(unsigned __int8 *)v195;
                if ((_DWORD)v197 == (_DWORD)v198)
                {
                  if (!*i2) {
                    goto LABEL_391;
                  }
                }

                else if (byte_1813C6343[v197] != byte_1813C6343[v198])
                {
                  int v199 = "OID";
                  for (i3 = v42; ; ++i3)
                  {
                    uint64_t v201 = *i3;
                    uint64_t v202 = *(unsigned __int8 *)v199;
                    if ((_DWORD)v201 == (_DWORD)v202)
                    {
                      if (!*i3) {
                        goto LABEL_391;
                      }
                    }

                    else if (byte_1813C6343[v201] != byte_1813C6343[v202])
                    {
                      goto LABEL_393;
                    }

                    ++v199;
                  }
                }

                ++v195;
              }
            }

            ++v191;
          }
        }

        int v109 = 0;
LABEL_396:
        if (v109 || v105 != 1 || !v103)
        {
          if (!v109)
          {
            int v203 = *(_DWORD *)(v106 + 40);
            if (!v39) {
              goto LABEL_421;
            }
            goto LABEL_187;
          }

          if (v109 != 1)
          {
            unsigned int v235 = "ambiguous column name";
            BOOL v229 = (char *)v15;
            char v234 = v366;
            goto LABEL_500;
          }

          char v236 = -89;
          BOOL v229 = (char *)v15;
          goto LABEL_516;
        }

        int v203 = *(_DWORD *)(v106 + 40);
        if ((v203 & 0x28) != 0) {
          goto LABEL_420;
        }
        uint64_t v204 = "_ROWID_";
        for (i4 = v42; ; ++i4)
        {
          uint64_t v206 = *i4;
          uint64_t v207 = *(unsigned __int8 *)v204;
          if ((_DWORD)v206 == (_DWORD)v207) {
            break;
          }
          if (byte_1813C6343[v206] != byte_1813C6343[v207])
          {
            unsigned int v208 = "ROWID";
            for (i5 = v42; ; ++i5)
            {
              uint64_t v210 = *i5;
              uint64_t v211 = *(unsigned __int8 *)v208;
              if ((_DWORD)v210 == (_DWORD)v211)
              {
                if (!*i5) {
                  goto LABEL_419;
                }
              }

              else if (byte_1813C6343[v210] != byte_1813C6343[v211])
              {
                uint64_t v212 = "OID";
                for (i6 = v42; ; ++i6)
                {
                  uint64_t v214 = *i6;
                  uint64_t v215 = *(unsigned __int8 *)v212;
                  if ((_DWORD)v214 == (_DWORD)v215)
                  {
                    if (!*i6) {
                      goto LABEL_419;
                    }
                  }

                  else if (byte_1813C6343[v214] != byte_1813C6343[v215])
                  {
                    goto LABEL_420;
                  }

                  ++v212;
                }
              }

              ++v208;
            }
          }

LABEL_402:
          ++v204;
        }

        if (*i4) {
          goto LABEL_402;
        }
LABEL_419:
        if ((*(_BYTE *)(*(void *)(v103 + 32) + 49LL) & 2) == 0)
        {
          BOOL v229 = (char *)v15;
          *((_DWORD *)v15 + 12) = -1;
          v15[1] = 68;
          int v109 = 1;
          char v236 = -89;
LABEL_516:
          uint64_t v230 = v368;
          uint64_t v227 = v369;
          goto LABEL_667;
        }

LABEL_420:
        int v105 = 1;
        if (!v39)
        {
LABEL_421:
          if ((v203 & 0x80) != 0)
          {
            v216 = *(unsigned int **)(v106 + 16);
            uint64_t v217 = *v216;
            if ((int)v217 >= 1)
            {
              for (uint64_t i7 = 0LL; i7 != v217; ++i7)
              {
                v219 = &v216[6 * i7];
                if ((*(_WORD *)((_BYTE *)v219 + 25) & 3) == 0)
                {
                  size_t v220 = (_BYTE *)*((void *)v219 + 2);
                  if (v220)
                  {
                    if (v42)
                    {
                      uint64_t v221 = v42;
                      for (i8 = v220; ; ++i8)
                      {
                        uint64_t v223 = *i8;
                        uint64_t v224 = *v221;
                        if ((_DWORD)v223 == (_DWORD)v224)
                        {
                          if (!*i8) {
                            goto LABEL_434;
                          }
                        }

                        else if (byte_1813C6343[v223] != byte_1813C6343[v224])
                        {
                          break;
                        }

                        ++v221;
                      }
                    }
                  }

                  else if (!v42)
                  {
LABEL_434:
                    uint64_t v225 = *(unsigned __int8 **)&v216[6 * i7 + 2];
                    int v226 = *((_DWORD *)v225 + 1);
                    if ((v203 & 1) == 0 && (v226 & 0x10) != 0)
                    {
                      sub_1812DC47C( v14,  "misuse of aliased aggregate %s",  i7,  (uint64_t)v41,  v104,  (uint64_t)v42,  a7,  a8,  (char)v220);
                      return 2LL;
                    }

                    uint64_t v227 = v369;
                    if ((v226 & 0x8000) != 0 && (v106 != v369 || (v203 & 0x4000) == 0))
                    {
                      sub_1812DC47C( v14,  "misuse of aliased window function %s",  i7,  (uint64_t)v41,  v104,  (uint64_t)v42,  a7,  a8,  (char)v220);
                      return 2LL;
                    }

                    int v228 = *v225;
                    if (v228 == 176) {
                      int v228 = v225[2];
                    }
                    BOOL v229 = (char *)v15;
                    uint64_t v230 = v368;
                    if (v228 != 138)
                    {
                      if (v228 == 177)
                      {
                        uint64_t v231 = (_DWORD **)(v225 + 32);
LABEL_447:
                        if (**v231 != 1)
                        {
                          sub_1812DC47C(v14, "row value misused", i7, (uint64_t)v41, v104, (uint64_t)v42, a7, a8, v364);
                          return 2LL;
                        }
                      }

                      uint64_t v232 = v40;
                      sub_1812BD714((uint64_t *)v14, (uint64_t)v216, i7, (uint64_t)v15, v104);
                      uint64_t v233 = *(unsigned __int8 ***)(v14 + 408);
                      uint64_t v40 = v232;
                      if (v233)
                      {
                        while (*v233 != v15)
                        {
                          uint64_t v233 = (unsigned __int8 **)v233[3];
                          if (!v233) {
                            goto LABEL_685;
                          }
                        }

                        *uint64_t v233 = 0LL;
                      }

                      goto LABEL_685;
                    }

                    uint64_t v231 = (_DWORD **)(*((void *)v225 + 4) + 32LL);
                    goto LABEL_447;
                  }
                }
              }
            }
          }
        }

LABEL_187:
        uint64_t v106 = *(void *)(v106 + 24);
        uint64_t v104 = (v104 + 1);
        uint64_t v39 = v381;
        uint64_t v41 = v385;
        if (v106) {
          continue;
        }
        break;
      }

      if (v381)
      {
        uint64_t v106 = 0LL;
        int v109 = 0;
        char v234 = 0;
LABEL_457:
        unsigned int v235 = "no such column";
        goto LABEL_458;
      }

      int v254 = *((_DWORD *)v15 + 1);
      if ((v254 & 0x80) != 0)
      {
        if (*(_BYTE *)(v379 + 197)) {
          goto LABEL_630;
        }
        if ((*(_BYTE *)(v369 + 42) & 1) != 0)
        {
          if ((*(void *)(v379 + 48) & 0x50000001LL) == 0x40000001) {
            goto LABEL_630;
          }
          char v270 = 29;
        }

        else
        {
          char v270 = 30;
        }

      v70 = *(void *)(*((void *)__s1 + 4) + 8LL);
      if (v70)
      {
        uint64_t v71 = **(void **)(v70 + 8);
        if (*(_BYTE *)(v71 + 19) || *(_UNKNOWN **)v71 == &unk_18C465F78) {
          BOOL v72 = (const char *)&unk_1813C6CDD;
        }
        else {
          BOOL v72 = *(const char **)(v71 + 216);
        }
      }

      else
      {
        BOOL v72 = 0LL;
      }

      uint64_t v73 = (const char *)sub_1812F42AC();
      if (v73 && (unsigned int v74 = v73, v75 = strlen(v73), v75 > 0))
      {
        else {
          BOOL v76 = v186.st_size == 0;
        }
        int v108 = v76;
        if (*(_UNKNOWN **)a1 == &unk_189B6D220) {
          int v109 = *(_DWORD *)(a1 + 124) | 0x20;
        }
        else {
          int v109 = *(_DWORD *)(a1 + 124);
        }
        int v110 = sub_1812F66A0(a1, v109, (uint64_t *)&errmsg);
        if (!(_DWORD)v110)
        {
          v180 = v109;
          LODWORD(v111) = 0;
          int v112 = 0;
          int v179 = *((_DWORD *)errmsg + 2) != 0;
          LOBYTE(v5) = 1;
          goto LABEL_329;
        }

        v5 = v110;
        if ((_DWORD)v110 == 26 || (_DWORD)v110 == 11)
        {
          uint64_t v111 = *(unsigned __int8 *)(a1 + 28);
          if (v111 <= 3
            && (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56LL))(a1, 1LL), (_DWORD)v5)
            || (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56LL))(a1, 4LL), (_DWORD)v5))
          {
            return v5;
          }

          v180 = v109;
          int v112 = 1;
          int v179 = -1;
LABEL_329:
          int v113 = *((void *)__s1 + 3);
          if (v113) {
            xmmword_18C465400(v113);
          }
          int v181 = v5;
          if (*((int *)__s1 + 10) < 1 || (uint64_t v114 = *(void *)(*((void *)__s1 + 4) + 8LL)) == 0)
          {
            uint64_t v122 = 0LL;
            unsigned int v123 = 0LL;
            uint64_t v124 = 0LL;
            v182 = 0;
            signed int v184 = 0LL;
            uint64_t v125 = 1;
LABEL_386:
            v5 = 2LL;
LABEL_387:
            v132 = -1;
            uint64_t v133 = v187;
            if (!v187)
            {
LABEL_389:
              if (v122)
              {
                unlink(v122);
                free(v122);
              }

              if (v123)
              {
                unlink(v123);
                free(v123);
              }

              if (v124)
              {
                unlink(v124);
                free(v124);
              }

              if ((v125 & 1) == 0)
              {
                if (*(_BYTE *)(v184 + 17))
                {
                  uint64_t v134 = *(_DWORD *)(v184 + 20) - 1;
                  *(_DWORD *)(v184 + 20) = v134;
                  if (!v134) {
                    sub_1812FDEFC(v184);
                  }
                }
              }

              uint64_t v135 = *((void *)__s1 + 3);
              if (v135) {
                xmmword_18C465410(v135);
              }
              if ((v181 & 1) != 0)
              {
                sub_1812F70C4((uint64_t)errmsg);
              }

              else
              {
                unsigned __int8 v136 = *(unsigned __int8 *)(a1 + 28);
                if (v111 < v136)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64LL))(a1, 1LL);
                  unsigned __int8 v136 = *(unsigned __int8 *)(a1 + 28);
                }
              }

              if (!(v182 | v5) && (v132 & 0x80000000) == 0)
              {
                __buf[0] = 0LL;
                if (!sub_181266F84(*(char **)(a1 + 56), (uint64_t *)__buf, v180 | 6u, 0LL))
                {
                  sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
                  sqlite3_exec(__buf[0], "PRAGMA schema_version", 0LL, 0LL, 0LL);
                }

                if (__buf[0]) {
                  sub_1812E03C8((uint64_t)__buf[0], 0);
                }
              }

              if ((_DWORD)v5)
              {
                uint64_t v137 = *(const char **)(a1 + 56);
                if (!v137) {
                  uint64_t v137 = "<dst path null>";
                }
                uint64_t v138 = "<src path null>";
                if (v72) {
                  uint64_t v138 = v72;
                }
                sqlite3_log( 1,  "unixReplaceDatabase() failed with error %d for replacing '%s' with '%s' \n",  v5,  v137,  v138);
              }

              return v5;
            }

LABEL_630:
        uint64_t v313 = *(void *)(v14 + 16);
        if (v313)
        {
          int v314 = v42 ? strlen((const char *)v42) & 0x3FFFFFFF : 0;
          v315 = (void *)sub_1812F2264(v379, (v314 + 9));
          if (v315)
          {
            void *v315 = *(void *)(v313 + 336);
            *(void *)(v313 + 336) = v315;
            memcpy(v315 + 1, __srcb, (v314 + 1));
          }
        }

        *uint64_t v15 = 117;
        *((void *)v15 + 9) = 0LL;
        return 1LL;
      }

LABEL_496:
      if ((v254 & 0x4000800) != 0)
      {
        uint64_t v106 = 0LL;
        int v109 = 0;
        char v234 = 1;
        goto LABEL_457;
      }

      uint64_t v303 = (_BYTE *)*((void *)v15 + 1);
      uint64_t v304 = "true";
      uint64_t v305 = v303;
      while (2)
      {
        uint64_t v306 = *v305;
        uint64_t v307 = *(unsigned __int8 *)v304;
        if ((_DWORD)v306 == (_DWORD)v307)
        {
          if (!*v305)
          {
            int v308 = 0x10000000;
LABEL_626:
            *uint64_t v15 = -86;
            *((_DWORD *)v15 + 1) = v308 | v254;
            return 1LL;
          }

          goto LABEL_609;
        }

        if (byte_1813C6343[v306] == byte_1813C6343[v307])
        {
LABEL_609:
          ++v305;
          ++v304;
          continue;
        }

        break;
      }

      char v310 = "false";
      unsigned int v235 = "no such column";
      while (2)
      {
        uint64_t v311 = *v303;
        uint64_t v312 = *(unsigned __int8 *)v310;
        if ((_DWORD)v311 == (_DWORD)v312)
        {
          if (!*v303)
          {
            int v308 = 0x20000000;
            goto LABEL_626;
          }

          goto LABEL_622;
        }

        if (byte_1813C6343[v311] == byte_1813C6343[v312])
        {
LABEL_622:
          ++v303;
          ++v310;
          continue;
        }

        break;
      }

      uint64_t v106 = 0LL;
      int v109 = 0;
      char v234 = 1;
LABEL_458:
      BOOL v229 = (char *)v380;
LABEL_500:
      if (!v391[0])
      {
LABEL_509:
        uint64_t v259 = v40;
        if (v41)
        {
          sub_1812DC47C(v14, "%s: %s.%s.%s", (uint64_t)v39, (uint64_t)v41, v104, (uint64_t)v42, a7, a8, (char)v235);
        }

        else if ((v234 & 1) != 0)
        {
          sub_1812DC47C(v14, "%s: %s", (uint64_t)v39, 0LL, v104, (uint64_t)v42, a7, a8, (char)v235);
        }

        else
        {
          sub_1812DC47C(v14, "%s: %s.%s", (uint64_t)v39, 0LL, v104, (uint64_t)v42, a7, a8, (char)v235);
        }

        uint64_t v230 = v368;
        uint64_t v227 = v369;
        uint64_t v40 = v259;
        if (v229)
        {
          uint64_t v277 = v229;
          while (1)
          {
            if ((v277[4] & 3) == 0)
            {
              int v278 = *((_DWORD *)v277 + 14);
              if (v278 > 0) {
                break;
              }
            }

            uint64_t v277 = (char *)*((void *)v277 + 2);
            if (!v277) {
              goto LABEL_541;
            }
          }

          *(_DWORD *)(*(void *)v14 + 84LL) = v278;
        }

LABEL_541:
        *(_BYTE *)(v14 + 29) = 1;
        ++*(_DWORD *)(v369 + 36);
LABEL_542:
        char v236 = -89;
        goto LABEL_667;
      }

      if (*v391[0] != v109 - 1)
      {
        uint64_t v258 = v40;
        sub_181311F48((void *)v379, (void *)v391[0]);
        uint64_t v41 = v385;
        uint64_t v42 = __srcb;
        uint64_t v39 = v381;
        uint64_t v40 = v258;
        goto LABEL_509;
      }

      uint64_t v232 = v40;
      int v255 = *((_DWORD *)v229 + 1);
      if ((v255 & 0x800000) != 0)
      {
        *((_DWORD *)v229 + 1) = v255 & 0xFF7FFFFF;
        uint64_t v230 = v368;
        uint64_t v227 = v369;
      }

      else
      {
        uint64_t v256 = (unsigned __int8 *)*((void *)v229 + 2);
        uint64_t v230 = v368;
        uint64_t v227 = v369;
        if (v256) {
          sub_181309110((void *)v379, v256);
        }
        *((void *)v229 + 2) = 0LL;
        int v257 = (unsigned __int8 *)*((void *)v229 + 3);
        if (v257) {
          sub_181309110((void *)v379, v257);
        }
        *((void *)v229 + 3) = 0LL;
      }

      sub_181320E20((uint64_t *)v14, v391, v103, *((__int16 *)v229 + 24));
      *BOOL v229 = -84;
      *((void *)v229 + 1) = "coalesce";
      *((_DWORD **)v229 + 4) = v391[0];
LABEL_528:
      uint64_t v40 = v232;
LABEL_685:
      if (*(void *)(*(void *)v14 + 528LL))
      {
        int v355 = *v229;
        if (v355 == 167 || v355 == 77)
        {
          if (v40)
          {
            v356 = *(unsigned int **)(v106 + 8);
            v357 = (uint64_t *)(*(void *)(*(void *)v14 + 32LL) + 24LL);
            int v358 = -1;
            do
            {
              uint64_t v359 = *v357;
              v357 += 4;
              ++v358;
            }

            while (v359 != v40);
            if ((v358 & 0x80000000) == 0)
            {
              if (v355 == 77) {
                goto LABEL_693;
              }
              uint64_t v363 = *v356;
              if ((int)v363 >= 1)
              {
                uint64_t v230 = v356 + 10;
                while (*v367 != v230[8])
                {
                  v230 += 26;
                  if (!--v363) {
                    goto LABEL_705;
                  }
                }

                    unsigned int v208 = 1;
                    goto LABEL_17;
                  }

                  v182 = 8;
LABEL_491:
                  int v139 = 1;
                  if (v168 || v182 < 2) {
                    goto LABEL_428;
                  }
                  LODWORD(v214[0]) = 0;
                  if (!*(_BYTE *)(a1 + 461))
                  {
                    sub_18136EB1C( (char *)v214,  *(sqlite3 **)(a1 + 24),  "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
                      *(void *)(a1 + 32),
                      *(void *)(a1 + 40));
                    v185 = v214[0];
                    if (LODWORD(v214[0])) {
                      goto LABEL_498;
                    }
                    *(_BYTE *)(a1 + 461) = 1;
                  }

                  v185 = sub_181378BE0(a1, v169, v182);
LABEL_498:
                  v187 = *(void **)(a1 + 480);
                  if (v187)
                  {
                    uint64_t v188 = (sqlite3_stmt *)v187[3];
                    uint64_t v189 = (void *)v187[4];
                    signed int v190 = v189[3];
                    if (v190) {
                      xmmword_18C465400(v190);
                    }
                    sub_1812F20DC(v189, v187);
                    int v191 = v189[3];
                    if (v191) {
                      xmmword_18C465410(v191);
                    }
                    sqlite3_finalize(v188);
                  }

                  *(void *)(a1 + 480) = 0LL;
                  unsigned int v208 = v185;
                  goto LABEL_17;
                }

                if (!(_DWORD)v57)
                {
                  v186 = 0;
                  int v181 = "automerge=";
                  goto LABEL_525;
                }

                if ((v57 & 0xFFFFFFDF) == 0x41)
                {
                  uint64_t v171 = v29[1];
                  if (!v29[1])
                  {
                    v186 = 0;
                    int v181 = "utomerge=";
                    goto LABEL_525;
                  }

                  if ((v171 & 0xFFFFFFDF) == 0x55)
                  {
                    uint64_t v172 = v29[2];
                    if (!v29[2])
                    {
                      v186 = 0;
                      int v181 = "tomerge=";
                      goto LABEL_525;
                    }

                    if ((v172 & 0xFFFFFFDF) == 0x54)
                    {
                      uint64_t v173 = v29[3];
                      if (!v29[3])
                      {
                        v186 = 0;
                        int v181 = "omerge=";
                        goto LABEL_525;
                      }

                      if ((v173 & 0xFFFFFFDF) == 0x4F)
                      {
                        uint64_t v174 = v29[4];
                        if (!v29[4])
                        {
                          v186 = 0;
                          int v181 = "merge=";
                          goto LABEL_525;
                        }

                        if ((v174 & 0xFFFFFFDF) == 0x4D)
                        {
                          unint64_t v175 = v29[5];
                          if (!v29[5])
                          {
                            v186 = 0;
                            int v181 = "erge=";
                            goto LABEL_525;
                          }

                          if ((v175 & 0xFFFFFFDF) == 0x45)
                          {
                            uint64_t v176 = v29[6];
                            if (!v29[6])
                            {
                              v186 = 0;
                              int v181 = "rge=";
                              goto LABEL_525;
                            }

                            if ((v176 & 0xFFFFFFDF) == 0x52)
                            {
                              uint64_t v177 = v29[7];
                              if (!v29[7])
                              {
                                v186 = 0;
                                int v181 = "ge=";
                                goto LABEL_525;
                              }

                              if ((v177 & 0xFFFFFFDF) == 0x47)
                              {
                                int v178 = v29[8];
                                if (!v29[8])
                                {
                                  v186 = 0;
                                  int v181 = "e=";
                                  goto LABEL_525;
                                }

                                if ((v178 & 0xFFFFFFDF) == 0x45)
                                {
                                  int v179 = v29[9];
                                  if (!v29[9])
                                  {
                                    v186 = 0;
                                    int v181 = "=";
LABEL_525:
LABEL_526:
                                    v192 = 0;
                                    LODWORD(v220[0]) = 0;
                                    v214[0] = 0LL;
                                    uint64_t v193 = v29[10];
                                    if ((char)v193 >= 48)
                                    {
                                      v192 = 0;
                                      uint64_t v194 = (char *)(v29 + 11);
                                      do
                                      {
                                        if (v193 > 0x39) {
                                          break;
                                        }
                                        if (v192 >= 214748363) {
                                          break;
                                        }
                                        v192 = v193 + 10 * v192 - 48;
                                        int v195 = *v194++;
                                        uint64_t v193 = v195;
                                      }

                                      while (v195 > 47);
                                    }

                                    if (v192 > 16 || v192 == 1) {
                                      v192 = 8;
                                    }
                                    *(_DWORD *)(a1 + 96) = v192;
                                    if (!*(_BYTE *)(a1 + 461))
                                    {
                                      sub_18136EB1C( (char *)v220,  *(sqlite3 **)(a1 + 24),  "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
                                        *(void *)(a1 + 32),
                                        *(void *)(a1 + 40));
                                      int v139 = v220[0];
                                      if (LODWORD(v220[0])) {
                                        goto LABEL_428;
                                      }
                                      *(_BYTE *)(a1 + 461) = 1;
                                    }

                                    int v139 = sub_1813636A8((uint64_t *)a1, 23, v214, 0LL);
                                    if (!v139)
                                    {
                                      uint64_t v197 = v214[0];
                                      if (!sub_1812B2390((uint64_t)v214[0], 0))
                                      {
                                        uint64_t v198 = *((void *)v197 + 16);
                                        if ((*(_WORD *)(v198 + 20) & 0x9000) != 0)
                                        {
                                          sub_1813040AC(v198, 2LL);
                                        }

                                        else
                                        {
                                          *(void *)uint64_t v198 = 2LL;
                                          *(_WORD *)(v198 + 20) = 4;
                                        }

                                        int v199 = *(void *)(*(void *)v197 + 24LL);
                                        if (v199) {
                                          xmmword_18C465410(v199);
                                        }
                                      }

                                      uint64_t v200 = *(int *)(a1 + 96);
                                      if (!sub_1812B2390((uint64_t)v197, 1u))
                                      {
                                        uint64_t v201 = *((void *)v197 + 16);
                                        if ((*(_WORD *)(v201 + 84) & 0x9000) != 0)
                                        {
                                          sub_1813040AC(v201 + 64, v200);
                                        }

                                        else
                                        {
                                          *(void *)(v201 + 64) = v200;
                                          *(_WORD *)(v201 + 84) = 4;
                                        }

                                        uint64_t v202 = *(void *)(*(void *)v197 + 24LL);
                                        if (v202) {
                                          xmmword_18C465410(v202);
                                        }
                                      }

                                      sqlite3_step(v197);
                                      v163 = sqlite3_reset(v197);
                                      goto LABEL_427;
                                    }

LABEL_693:
                uint64_t v360 = *(void *)v230;
                if (*(void *)v230)
                {
                  uint64_t v361 = *((unsigned int *)v229 + 12);
                  if ((v361 & 0x80000000) == 0) {
                    goto LABEL_697;
                  }
                  if (*(__int16 *)(v360 + 52) < 0)
                  {
                    v362 = "ROWID";
                  }

                  else
                  {
                    uint64_t v361 = *(unsigned __int16 *)(v360 + 52);
LABEL_697:
                    v362 = *(const char **)(*(void *)(v360 + 8) + 16 * v361);
                  }
                }
              }
            }
          }
        }
      }

LABEL_705:
      ++*(_DWORD *)(v227 + 32);
      for (; v227 != v106; ++*(_DWORD *)(v227 + 32))
        uint64_t v227 = *(void *)(v227 + 24);
      return 1LL;
    case 0x9Cu:
      if ((*(_DWORD *)(v13 + 40) & 0x2E) == 0) {
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      }
      sub_1812DC47C(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"parameters");
      *uint64_t v15 = 121;
      uint64_t v49 = *(void *)v14;
      while (1)
      {
        if ((v15[4] & 3) == 0)
        {
          int v50 = *((_DWORD *)v15 + 14);
          if (v50 > 0) {
            break;
          }
        }

        uint64_t v15 = (unsigned __int8 *)*((void *)v15 + 2);
        if (!v15) {
          return 2 * (*(_DWORD *)(v14 + 48) != 0);
        }
      }

      goto LABEL_84;
    case 0xACu:
      uint64_t v51 = *((void *)a2 + 4);
      if (v51) {
        int v52 = *(_DWORD *)v51;
      }
      else {
        int v52 = 0;
      }
      uint64_t v370 = a1[5];
      uint64_t v57 = *(void *)v14;
      unsigned int v58 = *(unsigned __int8 *)(*(void *)v14 + 100LL);
      if ((a2[7] & 1) != 0)
      {
        uint64_t v59 = *(void *)v13;
        else {
          uint64_t v60 = *((void *)a2 + 9);
        }
      }

      else
      {
        uint64_t v59 = *(void *)v13;
        uint64_t v60 = 0LL;
      }

      v61 = (int *)(v370 + 40);
      int __srca = *(_DWORD *)(v370 + 40);
      __int128 v62 = (char *)*((void *)a2 + 1);
      __int128 v63 = sub_18126CC00(v57, v62, v52, v58, 0);
      if (!v63)
      {
        v70 = sub_18126CC00(*(void *)v59, v62, -2, v58, 0);
        BOOL v72 = 0;
        BOOL v75 = v70 == 0LL;
        BOOL v76 = v70 != 0LL;
        goto LABEL_138;
      }

      v70 = v63;
      uint64_t v71 = *((void *)v63 + 4);
      BOOL v72 = v71 != 0;
      if ((v63[5] & 4) != 0)
      {
        *((_DWORD *)v15 + 1) |= 0x80000u;
        if (v52 == 2)
        {
          uint64_t v73 = v63;
          unsigned int v74 = sub_181320914(*(unsigned __int8 **)(v51 + 32));
          v70 = v73;
          *((_DWORD *)v15 + 11) = v74;
          if ((v74 & 0x80000000) != 0)
          {
            sub_1812DC47C( v59,  "second argument to %#T() must be a constant between 0.0 and 1.0",  v64,  v65,  v66,  v67,  v68,  v69,  (char)v15);
            v70 = v73;
            ++*(_DWORD *)(v370 + 36);
          }
        }

        else
        {
          if (**((_BYTE **)v63 + 7) == 117) {
            int v77 = 0x800000;
          }
          else {
            int v77 = 125829120;
          }
          *((_DWORD *)v15 + 11) = v77;
        }
      }

      uint64_t v78 = *(void *)v59;
      v79 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)v59 + 528LL);
      if (!v79 || *(_BYTE *)(v78 + 197) || *(_BYTE *)(v59 + 302)) {
        goto LABEL_121;
      }
      v260 = v70;
      int v261 = v79(*(void *)(v78 + 536), 31LL, 0LL, *((void *)v70 + 7), 0LL, *(void *)(v59 + 368));
      if (v261 == 1)
      {
        int v262 = 23;
        v263 = "not authorized";
      }

      else
      {
        if ((v261 & 0xFFFFFFFD) == 0)
        {
          v70 = v260;
          if (!v261)
          {
LABEL_121:
            int v80 = *((_DWORD *)v70 + 1);
            if ((v80 & 0x2800) != 0) {
              *((_DWORD *)v15 + 1) |= 0x100000u;
            }
            int v81 = *v61;
            if ((v80 & 0x800) != 0)
            {
              v15[2] = v81 & 0x2E;
              if ((v81 & 0x40000) != 0) {
                *((_DWORD *)v15 + 1) |= 0x40000000u;
              }
            }

            else if ((v81 & 0x2A) != 0)
            {
              uint64_t v82 = v70;
              sub_181320858(v59, v370, (uint64_t)"non-deterministic functions", 0LL, (uint64_t)v15, v67, v68, v69);
              v70 = v82;
              int v80 = *((_DWORD *)v82 + 1);
            }

            if ((v80 & 0x40000) != 0 && !*(_BYTE *)(v59 + 30) && (*(_BYTE *)(*(void *)v59 + 44LL) & 0x20) == 0)
            {
              BOOL v72 = v71 != 0;
              uint64_t v83 = (unsigned __int8 *)(v59 + 302);
              if (*(unsigned __int8 *)(v59 + 302) <= 1u)
              {
                v70 = 0LL;
                BOOL v75 = 1;
                if (v71)
                {
                  BOOL v76 = 0;
                  goto LABEL_147;
                }

                goto LABEL_461;
              }

              uint64_t v384 = 0LL;
              goto LABEL_144;
            }

            if ((v80 & 0x280000) != 0 && *(unsigned __int8 *)(v59 + 302) <= 1u)
            {
              v84 = v70;
              sub_18131AFDC(v59, (uint64_t)v15, (uint64_t)v70, v65, v66, v67, v68, v69);
              v70 = v84;
            }

            BOOL v75 = 1;
            BOOL v76 = 1;
LABEL_138:
            uint64_t v83 = (unsigned __int8 *)(v59 + 302);
            if (*(unsigned __int8 *)(v59 + 302) < 2u)
            {
              if (v70 && v60 && !*((void *)v70 + 5))
              {
                uint64_t v384 = (uint64_t)v70;
                v85 = "%#T() may not be used as a window function";
                goto LABEL_549;
              }

              if (v72)
              {
LABEL_147:
                unsigned int v87 = *((_DWORD *)v70 + 1);
                if ((*v61 & 1) == 0 || !v60 && (v87 & 0x10000) != 0 || v60 && (*v61 & 0x4000) == 0)
                {
                  uint64_t v384 = (uint64_t)v70;
                  int v88 = HIWORD(v87) & 1;
                  if (v60) {
                    int v88 = 1;
                  }
                  if (v88) {
                    int v89 = "window";
                  }
                  else {
                    int v89 = "aggregate";
                  }
                  char v365 = (char)v89;
                  v90 = "misuse of %s function %#T()";
LABEL_158:
                  uint64_t v86 = (uint64_t *)v59;
                  sub_1812DC47C(v59, v90, v64, v65, v66, v67, v68, v69, v365);
                  BOOL v72 = 0;
                  ++*(_DWORD *)(v370 + 36);
                  goto LABEL_552;
                }

                BOOL v72 = 1;
                char v237 = 1;
                if (v76)
                {
LABEL_544:
                  uint64_t v384 = (uint64_t)v70;
                  if (v75)
                  {
                    if ((v237 & 1) == 0) {
                      goto LABEL_546;
                    }
LABEL_550:
                    uint64_t v86 = (uint64_t *)v59;
                    *v61 &= (v60 == 0) ^ 0xFFFFBFFF;
                    BOOL v72 = 1;
                    goto LABEL_552;
                  }

                  goto LABEL_548;
                }

LABEL_462:
                if (!*(_BYTE *)(*(void *)v59 + 197LL) && !*(_BYTE *)(v59 + 301))
                {
                  uint64_t v384 = (uint64_t)v70;
                  v85 = "no such function: %#T";
                  goto LABEL_549;
                }

                goto LABEL_544;
              }

              if (v76)
              {
                uint64_t v384 = (uint64_t)v70;
                if (v75)
                {
LABEL_546:
                  if ((v15[7] & 1) == 0)
                  {
                    uint64_t v86 = (uint64_t *)v59;
                    BOOL v72 = 0;
                    goto LABEL_552;
                  }

                  char v365 = (char)v15;
                  v90 = "FILTER may not be used with non-aggregate %#T()";
                  goto LABEL_158;
                }

                BOOL v72 = 0;
LABEL_548:
                v85 = "wrong number of arguments to function %#T()";
LABEL_549:
                sub_1812DC47C(v59, v85, v64, v65, v66, v67, v68, v69, (char)v15);
                ++*(_DWORD *)(v370 + 36);
                if (!v72)
                {
                  uint64_t v86 = (uint64_t *)v59;
                  goto LABEL_552;
                }

                goto LABEL_550;
              }

            v239 = v238 + 1;
            do
            {
              --v239;
            }

            while (v239 > 1);
            goto LABEL_702;
          }

          uint64_t v194 = v20;
          int v195 = v24;
          int v196 = sub_181303998((int *)v113, 1);
          LODWORD(v24) = v195;
          LOBYTE(v20) = v194;
          v10.i64[0] = 0x8080808080808080LL;
          v10.i64[1] = 0x8080808080808080LL;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0LL;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0LL;
          v6 = (char *)v196;
          BOOL v72 = 5;
        }

        else
        {
          v6 = *(char **)(v113 + 8);
          BOOL v72 = 5;
        }

                    if ((_DWORD)v204) {
                      goto LABEL_463;
                    }
                    goto LABEL_399;
                  }
                }

                v148[15] = 7;
              }

              else
              {
                if ((v204 & 0x80) != 0)
                {
                  unsigned int v208 = v203[1];
                  if (v203[1] < 0)
                  {
                    uint64_t v210 = v203[2];
                    if (v210 < 0)
                    {
                      uint64_t v230 = v196;
                      uint64_t v206 = sub_18138BFCC(v203, (unint64_t *)v335);
                      int v196 = v230;
                      uint64_t v169 = v323;
                      uint64_t v204 = (uint64_t)v335[0] & 0x7FFFFFFF;
                    }

                    else
                    {
                      uint64_t v204 = v210 & 0x7F | ((_DWORD)v204 << 14) & 0x1FC07F | ((v208 & 0x7F) << 7);
                      uint64_t v206 = 3;
                    }
                  }

                  else
                  {
                    uint64_t v204 = ((v204 & 0x7F) << 7) | v208;
                    uint64_t v206 = 2;
                  }
                }

                else
                {
                  uint64_t v206 = 1;
                }

                uint64_t v231 = v206 + (uint64_t)v201;
                if (!(_DWORD)v204)
                {
                  uint64_t v189 = 0;
                  v192 = qword_18C467E20 + 480;
                  goto LABEL_400;
                }

                v315 = v196;
                if (v308 >= v204)
                {
                  memcpy(__dst, (const void *)(v193 + v231), v204);
                }

                else
                {
                  if (v308) {
                    LODWORD(v236) = v308;
                  }
                  else {
                    LODWORD(v236) = 64;
                  }
                  char v236 = (int)v236;
                  do
                  {
                    char v237 = v236;
                    v236 *= 2LL;
                  }

                  while (v237 < v204);
                  if (sqlite3_initialize() || (int v238 = (char *)sub_18127D33C((uint64_t)__dst, v237)) == 0LL)
                  {
                    uint64_t v204 = 0LL;
                    uint64_t v189 = 0;
                    v148[15] = 7;
                    v192 = qword_18C467E20 + 480;
                    uint64_t v169 = v323;
                    int v196 = v315;
                    goto LABEL_400;
                  }

                  int v308 = v237;
                  __dst = v238;
                  memcpy(v238, (const void *)(v193 + v231), v204);
                }
              }

              v192 = qword_18C467E20 + 480;
              uint64_t v169 = v323;
              int v196 = v315;
              if ((_DWORD)v204)
              {
LABEL_463:
                uint64_t v232 = v196;
                if (v320 < v204)
                {
                  if (v320) {
                    LODWORD(v233) = v320;
                  }
                  else {
                    LODWORD(v233) = 64;
                  }
                  uint64_t v233 = (int)v233;
                  do
                  {
                    char v234 = v233;
                    v233 *= 2LL;
                  }

                  while (v234 < v204);
                  if (sqlite3_initialize() || (unsigned int v235 = (void *)sub_18127D33C((uint64_t)v322, v234)) == 0LL)
                  {
                    uint64_t v189 = 0;
                    v148[15] = 7;
                  }

                  else
                  {
                    uint64_t v320 = v234;
                    int8x16_t v322 = v235;
                    memcpy(v235, __dst, v204);
LABEL_472:
                    uint64_t v189 = v204;
                  }

                  uint64_t v169 = v323;
                  int v196 = v232;
                  goto LABEL_400;
                }

                memcpy(v322, __dst, v204);
                goto LABEL_472;
              }

LABEL_461:
              BOOL v72 = 0;
              char v237 = 0;
              goto LABEL_462;
            }

            uint64_t v384 = (uint64_t)v70;
LABEL_144:
            uint64_t v86 = (uint64_t *)v59;
            if ((v15[7] & 1) != 0) {
              BOOL v72 = 1;
            }
LABEL_552:
            if (v51)
            {
              int v279 = *(_DWORD *)v51;
              if (*(int *)v51 >= 1)
              {
                for (i9 = (uint64_t *)(v51 + 8); ; i9 += 3)
                {
                  if (*i9)
                  {
                    else {
                      BOOL v281 = v279 <= 1;
                    }
                    if (v281) {
                      break;
                    }
                  }

                  else if (v279 < 2)
                  {
                    break;
                  }

                  --v279;
                }
              }
            }

            if (!v72) {
              return 1LL;
            }
            if (v60)
            {
              uint64_t v282 = *(void *)(v370 + 48);
              if (*v83 <= 1u)
              {
                uint64_t v14 = (uint64_t)v86;
                uint64_t v283 = v282 ? *(void *)(v282 + 120) : 0LL;
                sub_181320990(v86, v283, v60, v384, v66, v67, v68, v69);
                if (*(_BYTE *)(*v86 + 103)) {
                  return 2 * (*(_DWORD *)(v14 + 48) != 0);
                }
              }

              sub_18131C674((uint64_t)a1, *(_DWORD **)(v60 + 16));
              sub_18131C674((uint64_t)a1, *(_DWORD **)(v60 + 24));
              uint64_t v299 = *(void *)(v60 + 72);
              if (v299) {
                sub_18131C57C((uint64_t)a1, v299);
              }
              sub_18131E314(v282, (void *)v60);
              int v296 = *v61;
              int v297 = 0x8000;
              v382 = (_DWORD *)(v370 + 40);
            }

            else
            {
              v382 = (_DWORD *)(v370 + 40);
              *uint64_t v15 = -88;
              v15[2] = 0;
              size_t v284 = v86;
              if ((v15[7] & 1) != 0)
              {
                uint64_t v285 = *(void *)(*((void *)v15 + 9) + 72LL);
                if (v285) {
                  sub_18131C57C((uint64_t)a1, v285);
                }
              }

              uint64_t v286 = v370;
              while (1)
              {
                uint64_t v287 = v286;
                uint64_t v288 = *(void *)(v286 + 8);
                v391[0] = 0LL;
                v389[2] = 0LL;
                v390 = 0LL;
                v391[1] = sub_1813212A8;
                v391[2] = sub_181321338;
                v391[3] = sub_181321424;
                uint64_t v392 = 0LL;
                v393 = v389;
                size_t v289 = v284;
                v389[0] = *v284;
                v389[1] = v288;
                unint64_t v290 = v15;
                v291 = (_DWORD *)*((void *)v15 + 4);
                if (v291)
                {
                  int v292 = *v291;
                  if ((int)*v291 >= 1)
                  {
                    for (i10 = (uint64_t *)(v291 + 2); ; i10 += 3)
                    {
                      if (*i10)
                      {
                        else {
                          BOOL v294 = v292 <= 1;
                        }
                        if (v294) {
                          break;
                        }
                      }

                      else if (v292 < 2)
                      {
                        break;
                      }

                      --v292;
                    }
                  }
                }

                uint64_t v15 = v290;
                if ((v290[7] & 1) != 0)
                {
                  uint64_t v295 = *(void *)(*((void *)v290 + 9) + 72LL);
                  if (v295) {
                    sub_18131C57C((uint64_t)v391, v295);
                  }
                }

                size_t v284 = v289;
                if (v390) {
                  sub_1813014B0((void *)*v289, v390);
                }
                if (!WORD2(v392) || (v392 & 0x100000000LL) != 0) {
                  break;
                }
                ++v15[2];
                uint64_t v286 = *(void *)(v287 + 24);
                if (!v286) {
                  goto LABEL_600;
                }
              }

              if (!v384)
              {
LABEL_600:
                *v382 |= __srca & 0x4001;
                return 1LL;
              }

              int v296 = *(_DWORD *)(v384 + 4) & 0x8001000 ^ 0x8000010;
              int v298 = *(_DWORD *)(v287 + 40);
              v61 = (int *)(v287 + 40);
              int v297 = v298;
            }

            int *v61 = v296 | v297;
            goto LABEL_600;
          }

LABEL_532:
          *uint64_t v15 = 121;
          return 1LL;
        }

        int v262 = 1;
        v263 = "authorizer malfunction";
      }

      sub_1812DC47C(v59, v263, v64, v65, v66, v67, v68, v69, v364);
      *(_DWORD *)(v59 + 24) = v262;
      sub_1812DC47C(v59, "not authorized to use function: %#T", v271, v272, v273, v274, v275, v276, (char)v15);
      ++*(_DWORD *)(v370 + 36);
      goto LABEL_532;
    default:
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
  }

void *sub_1812899C0(void *result, unsigned __int8 *a2)
{
  if (a2) {
    return sub_181309110(result, a2);
  }
  return result;
}

uint64_t sub_1812899CC( unsigned __int8 **a1, uint64_t a2, int *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = *a1;
  if (*a3 < 1) {
    return sub_1813232EC(v32, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  int v11 = 0;
  for (uint64_t i = a3 + 2; ; i += 6)
  {
    uint64_t v16 = *(unsigned __int8 **)i;
    if (*(void *)i) {
      break;
    }
LABEL_7:
    if (++v11 >= *a3) {
      return sub_1813232EC(v32, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }

  uint64_t v17 = *(void *)i;
  while (1)
  {
    int v18 = *(_DWORD *)(v17 + 4);
    if ((v18 & 0x82000) == 0) {
      break;
    }
    if ((v18 & 0x80000) != 0)
    {
      uint64_t v17 = *(void *)(*(void *)(v17 + 32) + 8LL);
      if (!v17) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v17 = *(void *)(v17 + 16);
      if (!v17) {
        goto LABEL_7;
      }
    }
  }

  if (*a4 == 71) {
    goto LABEL_4;
  }
  if (*(_BYTE *)v17 != 59 || (int v19 = *(unsigned int **)(a2 + 32), v20 = *v19, (int)v20 < 1))
  {
LABEL_3:
    int v34 = 0;
    goto LABEL_4;
  }

  uint64_t v21 = 0LL;
  uint64_t v22 = *(void *)(v17 + 8);
  while (1)
  {
    if ((*(_WORD *)((_BYTE *)&v19[6 * v21 + 6] + 1) & 3) == 0)
    {
      uint64_t v26 = *(_BYTE **)&v19[6 * v21 + 4];
      if (v26)
      {
        if (v22)
        {
          for (uint64_t j = *(unsigned __int8 **)(v17 + 8); ; ++j)
          {
            uint64_t v28 = *v26;
            uint64_t v29 = *j;
            if ((_DWORD)v28 == (_DWORD)v29)
            {
              if (!*v26) {
                goto LABEL_37;
              }
            }

            else if (byte_1813C6343[v28] != byte_1813C6343[v29])
            {
              goto LABEL_28;
            }

            ++v26;
          }
        }

        goto LABEL_28;
      }

      if (!v22) {
        break;
      }
    }

uint64_t *sub_181289C7C(uint64_t *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if ((v2 & 0x80) == 0)
  {
    *(_DWORD *)(a2 + 4) = v2 | 0x80;
    uint64_t v3 = *(_DWORD **)(a2 + 40);
    int v4 = *v3;
    if ((int)*v3 >= 1)
    {
      int v5 = 0;
      uint64_t v6 = *result;
      int v7 = (void **)(v3 + 12);
      do
      {
        uint64_t v8 = (uint64_t)*(v7 - 1);
        if ((*(_BYTE *)(v8 + 49) & 0x40) != 0)
        {
          if (*v7)
          {
            uint64_t result = (uint64_t *)sub_1813226D0(v6, v8, *v7, 64);
            int v4 = *v3;
          }
        }

        ++v5;
        v7 += 13;
      }

      while (v5 < v4);
    }
  }

  return result;
}

uint64_t sub_181289D04( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(void *)a1;
  while (1)
  {
    int v12 = *a2;
    if (v12 == 176) {
      int v12 = a2[2];
    }
    if (v12 > 166)
    {
      switch(v12)
      {
        case 167:
          goto LABEL_28;
        case 169:
          if (*((void *)a2 + 9)) {
            goto LABEL_28;
          }
          goto LABEL_16;
        case 174:
          goto LABEL_4;
        case 177:
          int v10 = (unsigned __int8 **)(*((void *)a2 + 4) + 8LL);
          goto LABEL_5;
        default:
          goto LABEL_16;
      }
    }

    if (v12 == 36)
    {
LABEL_4:
      int v10 = (unsigned __int8 **)(a2 + 16);
LABEL_5:
      int v11 = *v10;
      goto LABEL_6;
    }

    if (v12 == 77) {
      break;
    }
    if (v12 == 113)
    {
      uint64_t v20 = sub_181311FC8(a1, *(unsigned __int8 *)(v9 + 100), 0LL, *((char **)a2 + 1), a5, a6, a7, a8);
      if (!v20) {
        return v20;
      }
LABEL_58:
      if (!*(void *)(v20 + 24)
        && !sub_181311FC8(a1, *(unsigned __int8 *)(*(void *)a1 + 100LL), v20, *(char **)v20, a5, a6, a7, a8))
      {
        return 0LL;
      }

      return v20;
    }

uint64_t *sub_181289F90(uint64_t *result, int a2, uint64_t a3, unsigned int a4)
{
  if (*(_BYTE *)(*result + 103))
  {
    if (a4 != -11) {
      return sub_18127ABFC((void *)*result, a4, a3);
    }
    return result;
  }

  if (a2 < 0)
  {
    a2 = *((_DWORD *)result + 36) - 1;
    uint64_t v4 = result[17];
    if ((a4 & 0x80000000) != 0) {
      goto LABEL_9;
    }
    return sub_181310724(result, v4 + 40LL * a2, (char *)a3, a4);
  }

  uint64_t v4 = result[17];
  if ((a4 & 0x80000000) == 0) {
    return sub_181310724(result, v4 + 40LL * a2, (char *)a3, a4);
  }
LABEL_9:
  uint64_t v5 = v4 + 40LL * a2;
  int v7 = *(unsigned __int8 *)(v5 + 1);
  uint64_t v6 = (_BYTE *)(v5 + 1);
  if (v7) {
    return sub_181310724(result, v4 + 40LL * a2, (char *)a3, a4);
  }
  if (a4 == -3)
  {
    *(_DWORD *)(v4 + 40LL * a2 + 16) = a3;
    *uint64_t v6 = -3;
  }

  else if (a3)
  {
    *(void *)(v4 + 40LL * a2 + 16) = a3;
    *uint64_t v6 = a4;
    if (a4 == -11) {
      ++*(_DWORD *)(a3 + 24);
    }
  }

  return result;
}

uint64_t sub_18128A040( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 96);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (v9) {
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = (*(_DWORD *)(result + 56) + 1);
  *(_DWORD *)(result + 56) = v13;
  *(_DWORD *)(a2 + 8) = v13;
  uint64_t v14 = *(void *)(result + 16);
  if (!v14)
  {
    if (!*(void *)(result + 168) && (*(_BYTE *)(*(void *)result + 96LL) & 8) == 0) {
      *(_BYTE *)(result + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C((uint64_t *)result, a2, a3, a4, a5, a6, a7, a8);
  }

  uint64_t v15 = *(unsigned __int8 **)(v8 + 16);
  uint64_t result = sub_181323268((uint64_t)v15, (int *)&v58);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_181319C00(v12, v15, v13);
    int v26 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v26)
    {
      uint64_t result = sub_18131044C(v14, 13LL, v13, 0LL, 0LL, v18, v19, v20);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v26 + 1;
      uint64_t v27 = *(void *)(v14 + 136) + 40LL * v26;
      *(_DWORD *)uint64_t v27 = 13;
      *(_DWORD *)(v27 + 4) = v13;
      int16x8_t v21 = 0uLL;
      *(_OWORD *)(v27 + 8) = 0u;
      *(_OWORD *)(v27 + 24) = 0u;
    }

    int v30 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v30)
    {
      *(_DWORD *)(v14 + 144) = v30 + 1;
      uint64_t v29 = *(void *)(v14 + 136) + 40LL * v30;
      *(_DWORD *)uint64_t v29 = 17;
      *(_DWORD *)(v29 + 4) = v13;
      goto LABEL_26;
    }

    uint64_t v31 = v14;
    uint64_t v32 = 17LL;
    uint64_t v33 = v13;
LABEL_34:
    uint64_t result = sub_18131044C(v31, v32, v33, a3, 0LL, v18, v19, v20);
    goto LABEL_60;
  }

  unint64_t v22 = v58;
  int v23 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) > v23)
  {
    *(_DWORD *)(v14 + 144) = v23 + 1;
    uint64_t v24 = *(void *)(v14 + 136) + 40LL * v23;
    *(_DWORD *)uint64_t v24 = 71;
    *(_DWORD *)(v24 + 4) = v22;
    *(_DWORD *)(v24 + 8) = v13;
    *(void *)(v24 + 12) = 0LL;
    *(void *)(v24 + 28) = 0LL;
    *(void *)(v24 + 20) = 0LL;
    *(_DWORD *)(v24 + 36) = 0;
    if ((_DWORD)v22) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  uint64_t result = sub_18131044C(v14, 71LL, v58, v13, 0LL, v18, v19, v20);
  if (!(_DWORD)v22)
  {
LABEL_21:
    int v28 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v28)
    {
      *(_DWORD *)(v14 + 144) = v28 + 1;
      uint64_t v29 = *(void *)(v14 + 136) + 40LL * v28;
      *(void *)uint64_t v29 = 9LL;
LABEL_26:
      *(_DWORD *)(v29 + 8) = a3;
      *(void *)(v29 + 12) = 0LL;
      *(void *)(v29 + 28) = 0LL;
      *(void *)(v29 + 20) = 0LL;
      *(_DWORD *)(v29 + 36) = 0;
      goto LABEL_60;
    }

    uint64_t v31 = v14;
    uint64_t v32 = 9LL;
    uint64_t v33 = 0LL;
    goto LABEL_34;
  }

LABEL_60:
  uint64_t v46 = *(unsigned __int8 **)(v8 + 24);
  if (v46)
  {
    int v47 = *(_DWORD *)(v12 + 56);
    uint64_t v48 = (v47 + 1);
    *(_DWORD *)(a2 + 12) = v48;
    uint64_t v49 = (v47 + 2);
    *(_DWORD *)(v12 + 56) = v49;
    if (*(void *)(v12 + 16))
    {
      uint64_t result = sub_18128CF10((void *)v12, v46, v48, v16, v17, v18, v19, v20, v21);
      if ((_DWORD)result != (_DWORD)v48)
      {
        uint64_t v50 = result;
        uint64_t v51 = 80LL;
        if ((v46[6] & 0x40) == 0)
        {
          if (*v46 == 176) {
            uint64_t v51 = 80LL;
          }
          else {
            uint64_t v51 = 81LL;
          }
        }

        uint64_t result = *(void *)(v12 + 16);
        int v52 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v52)
        {
          uint64_t result = sub_18131044C(result, v51, v50, v48, 0LL, v18, v19, v20);
        }

        else
        {
          *(_DWORD *)(result + 144) = v52 + 1;
          uint64_t v53 = *(void *)(result + 136) + 40LL * v52;
          *(_BYTE *)uint64_t v53 = v51;
          *(_WORD *)(v53 + 2) = 0;
          *(_DWORD *)(v53 + 4) = v50;
          *(_DWORD *)(v53 + 8) = v48;
          *(_BYTE *)(v53 + 1) = 0;
          *(void *)(v53 + 12) = 0LL;
          *(void *)(v53 + 28) = 0LL;
          *(void *)(v53 + 20) = 0LL;
          *(_DWORD *)(v53 + 36) = 0;
        }
      }
    }

    int v54 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v54)
    {
      uint64_t result = sub_18131044C(v14, 13LL, v48, 0LL, 0LL, v18, v19, v20);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v54 + 1;
      uint64_t v55 = *(void *)(v14 + 136) + 40LL * v54;
      *(_DWORD *)uint64_t v55 = 13;
      *(_DWORD *)(v55 + 4) = v48;
      *(_OWORD *)(v55 + 8) = 0u;
      *(_OWORD *)(v55 + 24) = 0u;
    }

    int v56 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v56)
    {
      return sub_18131044C(v14, 160LL, v13, v49, v48, v18, v19, v20);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v56 + 1;
      uint64_t v57 = *(void *)(v14 + 136) + 40LL * v56;
      *(_DWORD *)uint64_t v57 = 160;
      *(_DWORD *)(v57 + 4) = v13;
      *(_DWORD *)(v57 + 8) = v49;
      *(_DWORD *)(v57 + 12) = v48;
      *(void *)(v57 + 24) = 0LL;
      *(void *)(v57 + 32) = 0LL;
      *(void *)(v57 + 16) = 0LL;
    }
  }

  return result;
}

  if (*(_DWORD *)(a1 + 40) < (int)v23)
  {
    *(_DWORD *)(a1 + 40) = v23;
    uint64_t v48 = (unsigned int *)(a1 + 44);
    goto LABEL_62;
  }

  return v51;
}

  if ((v9 & 0x10000000) == 0
    || *(void *)(v8 + 592)
    || *(_DWORD *)(v8 + 220)
    || *(int *)(v8 + 564) >= 1 && !*(void *)(v8 + 600))
  {
    return 0LL;
  }

  uint64_t result = (uint64_t)strrchr(__s, 95);
  if (!result) {
    return result;
  }
  unint64_t v22 = (_BYTE *)result;
  *(_BYTE *)uint64_t result = 0;
  uint64_t result = sub_1812E2C64(v8, v12, 0LL);
  *unint64_t v22 = 95;
  if (!result) {
    return result;
  }
  if (*(_BYTE *)(result + 63) != 1) {
    return 0LL;
  }
  uint64_t result = sub_18131EF58(v8, result, v12);
  if ((_DWORD)result) {
    goto LABEL_59;
  }
  return result;
}

  if ((v28 & 0x10) != 0)
  {
    __int16 v34 = *(_DWORD *)(v8 + 16);
    if ((v28 & 0x400) != 0) {
      v34 += *(_DWORD *)v8;
    }
  }

  else if ((v28 & 1) != 0)
  {
    __int16 v34 = 0;
  }

  else
  {
    __int16 v34 = sub_181303970(v8, 1);
  }

    *(_BYTE *)(a2 + 74) = 0;
    *(_WORD *)(a2 + 72) = 1;
    **(_DWORD **)(a2 + 88) = *(_DWORD *)(a2 + 8);
    return result;
  }

  if (*(_DWORD *)(a2 + 8) == 1)
  {
LABEL_24:
    int v23 = 0;
    goto LABEL_39;
  }

  int v25 = a3;
  if (*(_DWORD *)(a2 + 56))
  {
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }

    else
    {
      int v26 = 0LL;
      while (*(unsigned __int8 *)(*(void *)(a2 + 48) + v26) == a4[v26])
      {
        if (v9 == ++v26) {
          goto LABEL_67;
        }
      }

      LODWORD(v9) = v26;
    }

          uint64_t v48 = sqlite3_errmsg(v90);
          *int v7 = sqlite3_mprintf("%s", v48);
          if (v42) {
            goto LABEL_61;
          }
          goto LABEL_48;
        }

uint64_t sub_18128A51C(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a8;
  __int16 v9 = a7;
  uint64_t v11 = (uint64_t)a2;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)a1;
  uint64_t v251 = 0LL;
  uint64_t v252 = 0LL;
  if (a4)
  {
    if (*a4 <= 63) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = 0LL;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  if (*a2 >= 65)
  {
    sub_1812DC47C(a1, "at most %d tables in a join", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, 64);
    return 0LL;
  }

  unsigned int v235 = v15;
  if ((a7 & 0x20) != 0) {
    int v16 = 1;
  }
  else {
    int v16 = *a2;
  }
  uint64_t v17 = 120 * v16 + 856;
  uint64_t v18 = sub_1812F2264(v14, v17 + 104);
  if (*(_BYTE *)(v14 + 103))
  {
    if (v18) {
      sub_1812F20DC((void *)v14, (void *)v18);
    }
    return 0LL;
  }

  uint64_t v228 = v13;
  *(void *)uint64_t v18 = a1;
  *(void *)(v18 + 8) = v11;
  *(void *)(v18 + 16) = v235;
  *(void *)(v18 + 24) = a5;
  *(void *)(v18 + 40) = -1LL;
  *(_BYTE *)(v18 + 64) = v16;
  int v19 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v19;
  *(_DWORD *)(v18 + 48) = v19;
  *(_DWORD *)(v18 + 52) = v19;
  *(_WORD *)(v18 + 60) = v9;
  *(_WORD *)(v18 + 62) = v8;
  *(_DWORD *)(v18 + 56) = *(__int16 *)(a1 + 216);
  *(_OWORD *)(v18 + 65) = 0u;
  uint64_t v20 = (_BYTE *)(v18 + 65);
  *(void *)(v18 + 32) = a6;
  *(_OWORD *)(v18 + 81) = 0u;
  *(void *)(v18 + 96) = 0LL;
  uint64_t v225 = v18 + 856;
  uint64_t v21 = v18;
  bzero((void *)(v18 + 856), 120LL * v16 + 104);
  *(void *)(v21 + 596) = 0xFFFFFF9D00000000LL;
  uint64_t v248 = v21;
  uint64_t v249 = v21 + 104;
  uint64_t v22 = v21 + v17;
  uint64_t v250 = v22;
  *(void *)(v22 + 64) = v21 + v17 + 80;
  *(_WORD *)(v22 + 52) = 0;
  *(_WORD *)(v22 + 56) = 3;
  *(_DWORD *)(v22 + 48) = 0;
  *(_BYTE *)(v21 + 121) = 0;
  *(void *)(v21 + 104) = v21;
  *(void *)(v21 + 112) = 0LL;
  *(_DWORD *)(v21 + 132) = 0;
  *(void *)(v21 + 124) = 0x800000000LL;
  uint64_t v247 = v21;
  *(void *)(v21 + 136) = v21 + 144;
  int v240 = (uint64_t *)(v21 + 104);
  sub_18132AD70(v21 + 104, a3, 44LL);
  uint64_t v246 = a1;
  uint64_t v233 = v14;
  int v229 = v16;
  __int16 v231 = v9;
  unsigned int v227 = v8;
  if (v16)
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = v21;
    do
    {
      uint64_t v31 = (int *)v11;
      uint64_t v32 = v11 + 104 * v29;
      int v34 = *(_DWORD *)(v32 + 72);
      uint64_t v33 = (_DWORD *)(v32 + 72);
      uint64_t v35 = *(int *)(v30 + 596);
      *(_DWORD *)(v30 + 596) = v35 + 1;
      *(_DWORD *)(v30 + 4 * v35 + 600) = v34;
      if ((*(_WORD *)((_BYTE *)v33 - 3) & 4) != 0)
      {
        uint64_t v36 = v11 + 104 * v29;
        BOOL v37 = *(int **)(v36 + 96);
        if (v37)
        {
          if (*v37 >= 1)
          {
            uint64_t v38 = 0LL;
            uint64_t v39 = 0LL;
            uint64_t v40 = *(void *)(v36 + 40);
            while ((int)v39 < *(__int16 *)(v40 + 54))
            {
              uint64_t v41 = v39 << 32;
              uint64_t v42 = *(__int16 *)(v40 + 54) - (uint64_t)(int)v39;
              __int16 v43 = (__int16 *)(*(void *)(v40 + 8) + 16LL * (int)v39 + 14);
              while (1)
              {
                __int16 v44 = *v43;
                v43 += 8;
                if ((v44 & 2) != 0) {
                  break;
                }
                v41 += 0x100000000LL;
                LODWORD(v39) = v39 + 1;
                if (!--v42) {
                  goto LABEL_16;
                }
              }

              uint64_t v45 = sub_1812F2264(*(void *)v246, 0x50uLL);
              uint64_t v30 = v247;
              if (v45)
              {
                uint64_t v46 = v45;
                *(_OWORD *)(v45 + 32) = 0u;
                *(_OWORD *)(v45 + 48) = 0u;
                *(_OWORD *)(v45 + 64) = 0u;
                *(_OWORD *)uint64_t v45 = 0u;
                *(_OWORD *)(v45 + 16) = 0u;
                *(_BYTE *)uint64_t v45 = -89;
                *(_WORD *)(v45 + 52) = -1;
                *(_DWORD *)(v45 + 40) = 1;
                *(_DWORD *)(v45 + 44) = *v33;
                *(_DWORD *)(v45 + 48) = v39;
                *(void *)(v45 + 72) = v40;
                if ((*(_BYTE *)(v40 + 48) & 0x60) == 0) {
                  goto LABEL_33;
                }
                if ((*(_WORD *)(*(void *)(v40 + 8) + (v41 >> 28) + 14) & 0x60) != 0)
                {
                  int v47 = *(__int16 *)(v40 + 54);
                  uint64_t v48 = v47 <= 63 ? ~(-1LL << v47) : -1LL;
                }

                else
                {
LABEL_33:
                  char v49 = (int)v39 >= 63 ? 63 : v39;
                  uint64_t v48 = 1LL << v49;
                }

                *(void *)&v31[26 * v29 + 22] |= v48;
                uint64_t v50 = *(unsigned __int8 **)&v37[6 * v38 + 2];
                if (v50)
                {
                  uint64_t v51 = (uint64_t *)v246;
                  int v52 = sub_18129C928(*(void *)v246, v50, 0LL, 0LL);
                }

                else
                {
                  int v52 = 0LL;
                  uint64_t v51 = (uint64_t *)v246;
                }

                uint64_t v39 = (v39 + 1);
                uint64_t v53 = sub_1813132BC(v51, 174, (uint64_t)v52, 0LL);
                uint64_t v54 = sub_1813132BC(v51, 53, v46, v53);
                uint64_t v55 = v54;
                uint64_t v56 = (*(_BYTE *)(v33 - 1) & 0x18) != 0 ? 1LL : 2LL;
                sub_1813231A8(v54, *v33, v56);
                sub_1812A2264((uint64_t)v240, v55, 1);
                ++v38;
                uint64_t v30 = v247;
                if (v38 < *v37) {
                  continue;
                }
              }

              goto LABEL_17;
            }

LABEL_189:
  if (*(_DWORD *)(v59 + 48)) {
    goto LABEL_139;
  }
  unsigned int v124 = *(unsigned __int8 *)(v61 + 64);
  uint64_t v125 = -1LL;
  if ((v232 & 0x400) != 0)
  {
    uint64_t v126 = v228;
  }

  else
  {
    uint64_t v126 = v228;
    if (a5 && v124 >= 2)
    {
      int v127 = *(_DWORD *)(v60 + 96);
      if ((v127 & 0x100) != 0) {
        goto LABEL_199;
      }
      uint64_t v128 = sub_18132BE08(v61);
      uint64_t v61 = v247;
      uint64_t v125 = v128;
      unsigned int v124 = *(unsigned __int8 *)(v247 + 64);
      int v110 = v124;
    }
  }

  if (v124 < 2) {
    goto LABEL_201;
  }
  int v127 = *(_DWORD *)(v60 + 96);
LABEL_199:
  if ((v127 & 0x80000) == 0)
  {
    sub_18132C174(v61);
    uint64_t v61 = v247;
  }

            sub_1812F20DC((void *)*v146, v150);
            goto LABEL_5;
          }
        }

        else
        {
          *((void *)v10 + 11) = 0LL;
          v10[20] = 0;
          __int16 v9 = v156;
          uint64_t v146 = v165;
        }

        uint64_t v150 = v159;
        if (!v159) {
          goto LABEL_5;
        }
        goto LABEL_189;
      }
    }
  }

  uint64_t v32 = 0LL;
  uint64_t v33 = 1;
  while (1)
  {
    int v34 = *(unsigned __int8 ***)(*(void *)(v30 + 64) + 8 * v32);
    if (v34)
    {
      if (*v34 == v13) {
        break;
      }
    }

    uint64_t v33 = ++v32 < (unint64_t)a4;
  }

  uint64_t v35 = (_WORD *)a2 + 9;
  uint64_t v36 = *((_WORD *)a2 + 9);
  if ((v36 & 4) == 0)
  {
    BOOL v37 = 0;
    uint64_t v38 = *a3;
    uint64_t v39 = a2;
    do
    {
      if (v38 && ((*v39)[4] & 1) == 0) {
        break;
      }
      uint64_t v40 = !v37 || (v36 & 0x400) == 0;
      uint64_t v41 = v40 ? 4 : 512;
      *uint64_t v35 = v41 | v36;
      uint64_t v42 = *((_DWORD *)v39 + 6);
      if ((v42 & 0x80000000) != 0) {
        break;
      }
      __int16 v43 = *((void *)v39[1] + 4);
      __int16 v44 = v43 + 56LL * v42;
      uint64_t v45 = *(_BYTE *)(v44 + 22) - 1;
      *(_BYTE *)(v44 + 22) = v45;
      if (v45) {
        break;
      }
      uint64_t v39 = (unsigned __int8 **)(v43 + 56LL * v42);
      uint64_t v35 = (_WORD *)v39 + 9;
      uint64_t v36 = *((_WORD *)v39 + 9);
      --v37;
    }

    while ((v36 & 4) == 0);
    if (!v33) {
      goto LABEL_5;
    }
  }

  return v9;
}

LABEL_201:
  *(_WORD *)(*(void *)v61 + 216LL) += *(_WORD *)(v61 + 70);
  if ((v232 & 4) != 0)
  {
    uint64_t v219 = *(void *)(v61 + 952);
    int v220 = *(_DWORD *)(v219 + 48);
    if ((v220 & 0x1000) != 0)
    {
      uint64_t v221 = *(void *)(v11 + 40);
      char v222 = 1;
    }

    else
    {
      if ((v232 & 8) == 0) {
        goto LABEL_202;
      }
      uint64_t v221 = *(void *)(v11 + 40);
      if (*(_BYTE *)(v221 + 63) == 1 || (v232 & 0x10) == 0 && (v220 & 0x2000) != 0) {
        goto LABEL_202;
      }
      if ((*(_BYTE *)(v60 + 99) & 8) != 0) {
        goto LABEL_202;
      }
      char v222 = 2;
    }

    __int16 v239 = 0;
    *(_BYTE *)(v61 + 66) = v222;
    if ((v220 & 0x40) != 0 && (*(_DWORD *)(v221 + 48) & 0x80) == 0)
    {
      __int16 v239 = v232 & 8;
      *(_DWORD *)(v219 + 48) = v220 & 0xFFFFFFBF;
    }

    goto LABEL_203;
  }

        uint64_t v32 = v125;
        goto LABEL_202;
      }

      uint64_t v104 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    (*v104)(n);
    goto LABEL_181;
  }

  if (v50 == 7 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    unint64_t v92 = *(void *)(v10 + 344);
    if (v92)
    {
      sub_1812DC47C(v92, "out of memory", v51, v52, v53, v54, v55, v56, v119);
      for (juint64_t j = *(void *)(v10 + 344); ; ++*(_DWORD *)(jj + 48))
      {
        *(_DWORD *)(jj + 24) = 7;
        juint64_t j = *(void *)(jj + 256);
        if (!jj) {
          break;
        }
      }
    }
  }

  int v57 = v126;
  if (a1)
  {
    a1[9] = 1;
    sub_181269368(*(void *)a1, v57, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v57) {
      return;
    }
LABEL_92:
    uint64_t v69 = (void (**)(char *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_97:
      (*v69)(v57);
      return;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v57);
    --qword_18C468B10;
    off_18C4653A8(v57);
    int v57 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v69 = (void (**)(char *))&xmmword_18C465410;
      goto LABEL_97;
    }
  }

  else
  {
    sub_1812CF36C(97407);
    if (v57) {
      goto LABEL_92;
    }
  }

LABEL_202:
  __int16 v239 = 0;
LABEL_203:
  if (v110 < 1)
  {
    int v223 = *(_DWORD *)(v126 + 144);
    *(_DWORD *)(v61 + 72) = v223;
    uint64_t v59 = v246;
    if (*(_BYTE *)(v60 + 103)) {
      goto LABEL_139;
    }
LABEL_348:
    *(_DWORD *)(v61 + 76) = v223;
    return v61;
  }

  uint64_t v236 = v125;
  int v129 = 0;
  int v245 = v232 & 0x20;
  BOOL v130 = (v232 & 0x20) == 0 || v227 == 0;
  BOOL v243 = v130;
  uint64_t v131 = v225;
  unsigned int v230 = v110;
  do
  {
    unsigned int v135 = *(unsigned __int8 *)(v131 + 64);
    uint64_t v136 = v11 + 104LL * *(unsigned __int8 *)(v131 + 64);
    uint64_t v139 = *(void *)(v136 + 40);
    uint64_t v137 = v136 + 40;
    uint64_t v138 = v139;
    uint64_t v140 = *(void *)(v139 + 96);
    if (v140)
    {
      uint64_t v141 = (uint64_t *)(*(void *)(v60 + 32) + 24LL);
      LODWORD(v142) = -1;
      do
      {
        uint64_t v143 = *v141;
        v141 += 4;
        uint64_t v142 = (v142 + 1);
      }

      while (v143 != v140);
    }

    else
    {
      uint64_t v142 = 4294934528LL;
    }

    uint64_t v144 = *(void *)(v131 + 96);
    uint64_t v145 = v131;
    uint64_t v146 = v144;
    if ((*(_BYTE *)(v138 + 49) & 0x40) == 0)
    {
      int v147 = *(unsigned __int8 *)(v138 + 63);
      if (v147 != 2)
      {
        if ((*(_DWORD *)(v144 + 48) & 0x400) != 0)
        {
          for (uint64_t i = *(void **)(v138 + 80); i; uint64_t i = (void *)i[5])
          {
            if (*i == v60) {
              break;
            }
          }

          sub_1812B9B68( (uint64_t *)v228,  173LL,  *(unsigned int *)(v226 + 104LL * *(unsigned __int8 *)(v131 + 64) + 72),  0LL,  0LL,  (uint64_t)i,  4294967285LL,  v108);
          uint64_t v61 = v247;
          uint64_t v131 = v145;
        }

        else if (v147 != 1)
        {
          if (*(_DWORD *)(v144 + 48) & 0x40 | v245
            && (*(_BYTE *)(v226 + 104LL * *(unsigned __int8 *)(v131 + 64) + 68) & 0x50) == 0)
          {
            sub_181319D20(v246, v142, *(_DWORD *)(v138 + 40), 0, *(void *)v138);
            uint64_t v131 = v145;
            uint64_t v61 = v247;
          }

          else
          {
            if (*(_BYTE *)(v61 + 66))
            {
              uint64_t v148 = v226;
              *(_DWORD *)(v61 + 40) = *(_DWORD *)(v226 + 104LL * *(unsigned __int8 *)(v131 + 64) + 72);
              uint64_t v149 = 113LL;
              uint64_t v150 = v61;
            }

            else
            {
              uint64_t v149 = 112LL;
              uint64_t v150 = v61;
              uint64_t v148 = v226;
            }

            sub_18128BBE0( (void *)v246,  *(unsigned int *)(v148 + 104LL * v135 + 72),  v142,  v138,  v149,  v106,  v107,  v108);
            int v194 = *(unsigned __int8 *)(v150 + 66);
            uint64_t v61 = v150;
            uint64_t v144 = v146;
            if (!v194
              && *(__int16 *)(v138 + 54) <= 63
              && (*(_BYTE *)(v138 + 48) & 0xE0) == 0
              && (*(_DWORD *)(v146 + 48) & 0x404000) == 0)
            {
              unint64_t v195 = *(void *)(v226 + 104LL * v135 + 88);
              if (v195)
              {
                uint64_t v196 = 0LL;
                do
                {
                  ++v196;
                  BOOL v197 = v195 > 1;
                  v195 >>= 1;
                }

                while (v197);
              }

              else
              {
                uint64_t v196 = 0LL;
              }

              sub_181289F90((uint64_t *)v228, -1, v196, 0xFFFFFFFD);
              uint64_t v60 = v233;
              uint64_t v61 = v247;
              uint64_t v144 = v146;
            }

            int v198 = *(_DWORD *)(v228 + 144);
            BOOL v166 = __OFSUB__(v198, 1);
            int v199 = v198 - 1;
            uint64_t v131 = v145;
            if (v199 < 0 == v166) {
              *(_WORD *)(*(void *)(v228 + 136) + 40LL * v199 + 2) = v239;
            }
          }
        }
      }
    }

    if ((*(_BYTE *)(v144 + 49) & 2) != 0)
    {
      uint64_t v152 = *(void *)(v144 + 32);
      if ((*(_BYTE *)(v138 + 48) & 0x80) != 0 && (v232 & 0x20) != 0 && (*(_WORD *)(v152 + 99) & 3) == 2)
      {
        *(_DWORD *)(v131 + 8) = *(_DWORD *)(v131 + 4);
      }

      else
      {
        if (*(_BYTE *)(v61 + 66))
        {
          uint64_t v153 = *(void *)(*(void *)v137 + 16LL);
          if (v153) {
            BOOL v154 = v153 == v152;
          }
          else {
            BOOL v154 = 1;
          }
          uint64_t v155 = v227;
          if (!v154)
          {
            LODWORD(v155) = v227;
            do
            {
              uint64_t v155 = (v155 + 1);
              uint64_t v153 = *(void *)(v153 + 40);
              if (v153) {
                BOOL v156 = v153 == v152;
              }
              else {
                BOOL v156 = 1;
              }
            }

            while (!v156);
          }

          *(_DWORD *)(v61 + 44) = v155;
          uint64_t v157 = 113LL;
        }

        else if (v243)
        {
          uint64_t v155 = *(unsigned int *)(v246 + 52);
          *(_DWORD *)(v246 + 52) = v155 + 1;
          if ((*(_WORD *)(v152 + 99) & 0x800) != 0 && (*(_BYTE *)(v60 + 99) & 1) == 0)
          {
            sub_18132C234((uint64_t *)v246, v152, v155, v137 - 32);
            uint64_t v131 = v145;
          }

          uint64_t v157 = 112LL;
        }

        else
        {
          uint64_t v157 = 101LL;
          uint64_t v155 = v227;
        }

        *(_DWORD *)(v131 + 8) = v155;
        uint64_t v158 = *(unsigned int *)(v152 + 88);
        int v159 = *(_DWORD *)(v228 + 144);
        if (*(_DWORD *)(v228 + 148) <= v159)
        {
          sub_18131044C(v228, v157, v155, v158, v142, v106, v107, v108);
        }

        else
        {
          *(_DWORD *)(v228 + 144) = v159 + 1;
          uint64_t v160 = *(void *)(v228 + 136) + 40LL * v159;
          *(_BYTE *)uint64_t v160 = v157;
          *(_WORD *)(v160 + 2) = 0;
          *(_DWORD *)(v160 + 4) = v155;
          *(_DWORD *)(v160 + 8) = v158;
          *(_DWORD *)(v160 + 12) = v142;
          *(_BYTE *)(v160 + 1) = 0;
          *(void *)(v160 + 24) = 0LL;
          *(void *)(v160 + 32) = 0LL;
          *(void *)(v160 + 16) = 0LL;
        }

        uint64_t v161 = *(void *)(v246 + 16);
        uint64_t v162 = sub_181319FB0((_DWORD *)v246, v152);
        uint64_t v61 = v247;
        uint64_t v131 = v145;
        if (v162)
        {
          if (*(_BYTE *)(*(void *)v161 + 103LL))
          {
            if (!*(void *)(*(void *)v161 + 816LL))
            {
              BOOL v154 = (*(_DWORD *)v162)-- == 1;
              if (v154)
              {
                sub_1813014B0(*(void **)(v162 + 16), (void *)v162);
                uint64_t v131 = v145;
                uint64_t v61 = v247;
              }
            }
          }

          else
          {
            uint64_t v163 = *(void *)(v161 + 136) + 40LL * *(int *)(v161 + 144);
            *(_BYTE *)(v163 - 39) = -8;
            *(void *)(v163 - 24) = v162;
          }
        }

        int v164 = *(_DWORD *)(v146 + 48);
        if ((v164 & 0xF) != 0 && (v164 & 0x188002) == 0 && (*(_WORD *)(v61 + 60) & 1) == 0 && *(_BYTE *)(v61 + 67) != 2)
        {
          int v165 = *(_DWORD *)(v228 + 144);
          BOOL v166 = __OFSUB__(v165, 1);
          int v167 = v165 - 1;
          if (v167 < 0 == v166) {
            *(_WORD *)(*(void *)(v228 + 136) + 40LL * v167 + 2) = 2;
          }
        }
      }
    }

    if ((v142 & 0x80000000) == 0)
    {
      uint64_t v168 = *(void *)(v246 + 168) ? *(void *)(v246 + 168) : v246;
      int v169 = *(_DWORD *)(v168 + 124);
      if ((v169 & (1 << v142)) == 0)
      {
        *(_DWORD *)(v168 + 124) = v169 | (1 << v142);
        if ((_DWORD)v142 == 1)
        {
          sub_1812FA2F0(v168);
          uint64_t v131 = v145;
          uint64_t v61 = v247;
        }
      }
    }

    uint64_t v11 = v226;
    if ((*(_BYTE *)(v226 + 104LL * v135 + 68) & 0x10) != 0)
    {
      uint64_t v170 = v61;
      uint64_t v171 = sub_1812F2264(**(void **)v61, 0x24uLL);
      if (v171)
      {
        uint64_t v172 = v171;
        *(void *)uint64_t v171 = *(void *)(v170 + 88);
        *(void *)(v171 + 8) = 20LL;
        *(void *)(v170 + 88) = v171;
        int v173 = *(_DWORD *)(v246 + 52);
        *(_DWORD *)(v171 + 16) = v173;
        uint64_t v174 = (unsigned int *)(v171 + 16);
        *(void *)(v145 + 56) = v171 + 16;
        uint64_t v175 = (*(_DWORD *)(v246 + 56) + 1);
        *(_DWORD *)(v246 + 52) = v173 + 1;
        *(_DWORD *)(v246 + 56) = v175;
        *(_DWORD *)(v171 + 20) = v175;
        int v176 = *(_DWORD *)(v228 + 144);
        if (*(_DWORD *)(v228 + 148) <= v176)
        {
          sub_18131044C(v228, 77LL, 0x10000LL, v175, 0LL, v106, v107, v108);
        }

        else
        {
          *(_DWORD *)(v228 + 144) = v176 + 1;
          uint64_t v177 = *(void *)(v228 + 136) + 40LL * v176;
          *(void *)uint64_t v177 = 0x100000000004DLL;
          *(_DWORD *)(v177 + 8) = v175;
          *(void *)(v177 + 12) = 0LL;
          *(void *)(v177 + 28) = 0LL;
          *(void *)(v177 + 20) = 0LL;
          *(_DWORD *)(v177 + 36) = 0;
        }

        uint64_t v178 = (*(_DWORD *)(v246 + 56) + 1);
        *(_DWORD *)(v246 + 56) = v178;
        *(_DWORD *)(v172 + 24) = v178;
        int v179 = *(_DWORD *)(v228 + 144);
        if (*(_DWORD *)(v228 + 148) <= v179)
        {
          sub_18131044C(v228, 75LL, 0LL, v178, 0LL, v106, v107, v108);
        }

        else
        {
          *(_DWORD *)(v228 + 144) = v179 + 1;
          uint64_t v180 = *(void *)(v228 + 136) + 40LL * v179;
          *(void *)uint64_t v180 = 75LL;
          *(_DWORD *)(v180 + 8) = v178;
          *(void *)(v180 + 12) = 0LL;
          *(void *)(v180 + 28) = 0LL;
          *(void *)(v180 + 20) = 0LL;
          *(_DWORD *)(v180 + 36) = 0;
        }

        uint64_t v181 = v146;
        if ((*(_BYTE *)(v138 + 48) & 0x80) != 0)
        {
          for (uint64_t j = *(void *)(v138 + 16); j; uint64_t j = *(void *)(j + 40))
          {
            if ((*(_WORD *)(j + 99) & 3) == 2) {
              break;
            }
          }

          uint64_t v186 = *v174;
          uint64_t v187 = *(unsigned __int16 *)(j + 94);
          int v188 = *(_DWORD *)(v228 + 144);
          if (*(_DWORD *)(v228 + 148) <= v188)
          {
            sub_18131044C(v228, 118LL, v186, v187, 0LL, v106, v107, v108);
          }

          else
          {
            *(_DWORD *)(v228 + 144) = v188 + 1;
            uint64_t v189 = *(void *)(v228 + 136) + 40LL * v188;
            *(_DWORD *)uint64_t v189 = 118;
            *(_DWORD *)(v189 + 4) = v186;
            *(_DWORD *)(v189 + 8) = v187;
            *(void *)(v189 + 12) = 0LL;
            *(void *)(v189 + 28) = 0LL;
            *(void *)(v189 + 20) = 0LL;
            *(_DWORD *)(v189 + 36) = 0;
          }

          uint64_t v193 = *(void *)(v246 + 16);
          uint64_t v191 = sub_181319FB0((_DWORD *)v246, j);
          uint64_t v61 = v247;
          uint64_t v131 = v145;
          uint64_t v181 = v146;
          if (!v191) {
            goto LABEL_210;
          }
          uint64_t v192 = *(void *)v193;
          if (!*(_BYTE *)(*(void *)v193 + 103LL))
          {
            uint64_t v132 = *(void *)(v193 + 136);
            int v133 = *(_DWORD *)(v193 + 144);
            goto LABEL_209;
          }
        }

        else
        {
          uint64_t v182 = *v174;
          int v183 = *(_DWORD *)(v228 + 144);
          if (*(_DWORD *)(v228 + 148) <= v183)
          {
            sub_18131044C(v228, 118LL, v182, 1LL, 0LL, v106, v107, v108);
          }

          else
          {
            *(_DWORD *)(v228 + 144) = v183 + 1;
            uint64_t v184 = *(void *)(v228 + 136) + 40LL * v183;
            *(_DWORD *)uint64_t v184 = 118;
            *(_DWORD *)(v184 + 4) = v182;
            *(_DWORD *)(v184 + 8) = 1;
            *(void *)(v184 + 12) = 0LL;
            *(void *)(v184 + 28) = 0LL;
            *(void *)(v184 + 20) = 0LL;
            *(_DWORD *)(v184 + 36) = 0;
          }

          uint64_t v190 = sub_18131A140(*(void *)v246, 1, 0);
          uint64_t v61 = v247;
          uint64_t v131 = v145;
          if (!v190) {
            goto LABEL_210;
          }
          uint64_t v191 = v190;
          *(void *)(v190 + 32) = 0LL;
          **(_BYTE **)(v190 + 24) = 0;
          uint64_t v192 = *(void *)v228;
          if (!*(_BYTE *)(*(void *)v228 + 103LL))
          {
            uint64_t v132 = *(void *)(v228 + 136);
            int v133 = *(_DWORD *)(v228 + 144);
LABEL_209:
            uint64_t v134 = v132 + 40LL * v133;
            *(_BYTE *)(v134 - 39) = -8;
            *(void *)(v134 - 24) = v191;
LABEL_210:
            *(_DWORD *)(v181 + 48) &= ~0x40u;
            *(_BYTE *)(v61 + 65) = 0;
            *(_BYTE *)(v61 + 67) = 3;
            goto LABEL_211;
          }
        }

        if (!*(void *)(v192 + 816))
        {
          BOOL v154 = (*(_DWORD *)v191)-- == 1;
          if (v154)
          {
            sub_1813014B0(*(void **)(v191 + 16), (void *)v191);
            uint64_t v131 = v145;
            uint64_t v61 = v247;
          }
        }

        goto LABEL_210;
      }

      uint64_t v131 = v145;
      *(void *)(v145 + 56) = 0LL;
      uint64_t v61 = v170;
    }

      uint64_t v40 = *(_DWORD *)(v10 + 48) | 4;
      *(_DWORD *)(v10 + 48) = v40;
      if ((v40 & 2) != 0) {
        goto LABEL_69;
      }
      goto LABEL_203;
    }

    int v7 = v132;
    if ((v27 & 0x82) != 0)
    {
      uint64_t v38 = *(__int16 *)(*(void *)(a3 + 8) + 2 * v12);
      uint64_t v39 = *(_DWORD *)(v10 + 48);
      uint64_t v40 = v39 | 1;
      *(_DWORD *)(v10 + 48) = v39 | 1;
      if (v38 == -1) {
        goto LABEL_65;
      }
      if (a4 || v38 < 0 || (uint64_t v41 = *(unsigned __int16 *)(a3 + 94), v41 - 1 != (_DWORD)v12))
      {
LABEL_67:
        if (v145 < 2u)
        {
          LOWORD(v43) = 0;
          if ((v40 & 2) != 0) {
            goto LABEL_69;
          }
        }

        else
        {
          LOWORD(v43) = 0;
          v40 |= 0x200000u;
          *(_DWORD *)(v10 + 48) = v40;
          if ((v40 & 2) != 0) {
            goto LABEL_69;
          }
        }

        goto LABEL_203;
      }

      if ((*(_WORD *)(a3 + 99) & 8) != 0 || v41 == 1 && v27 == 2 && *(_BYTE *)(a3 + 98)) {
LABEL_65:
      }
        uint64_t v42 = 4097;
      else {
        uint64_t v42 = 65537;
      }
      uint64_t v40 = v39 | v42;
      *(_DWORD *)(v10 + 48) = v40;
      goto LABEL_67;
    }

    if ((v27 & 0x100) != 0)
    {
      LOWORD(v43) = 0;
      uint64_t v40 = *(_DWORD *)(v10 + 48) | 8;
      *(_DWORD *)(v10 + 48) = v40;
      if ((v40 & 2) != 0) {
        goto LABEL_69;
      }
      goto LABEL_203;
    }

    char v49 = *(unsigned __int8 **)(*(void *)v19 + 16LL);
    uint64_t v50 = *v49;
    if (v50 == 176) {
      uint64_t v50 = v49[2];
    }
    if (v50 == 138)
    {
      char v49 = (unsigned __int8 *)*((void *)v49 + 4);
LABEL_141:
      uint64_t v51 = **((_DWORD **)v49 + 4);
      goto LABEL_142;
    }

    if (v50 == 177) {
      goto LABEL_141;
    }
    uint64_t v51 = 1;
LABEL_142:
    uint64_t v62 = *(unsigned __int16 *)(a3 + 96) - (_DWORD)v12;
    if (v51 >= v62) {
      uint64_t v63 = v62;
    }
    else {
      uint64_t v63 = v51;
    }
    if ((int)v63 < 2)
    {
      int v90 = 1;
      goto LABEL_187;
    }

    uint64_t v64 = *(_DWORD *)(v132 + 64);
    uint64_t v65 = 1LL;
    uint64_t v112 = v63;
    int v111 = v64;
    do
    {
      uint64_t v66 = *(void *)(*(void *)v19 + 24LL);
      __int16 v67 = (void *)(v66 + 32);
      if ((*(_BYTE *)(v66 + 5) & 0x10) != 0) {
        __int16 v67 = (void *)(*v67 + 32LL);
      }
      uint64_t v68 = *(unsigned __int8 **)(*(void *)(*(void *)(*(void *)v19 + 16LL) + 32LL) + 24 * v65 + 8);
      if (*v68 != 167 || *((_DWORD *)v68 + 11) != v64)
      {
        int v90 = v65;
        break;
      }

      if (*((_DWORD *)v68 + 12) != *(__int16 *)(*(void *)(a3 + 8) + 2 * (v65 + v12))
        || *(unsigned __int8 *)(*(void *)(a3 + 56) + v65 + v12) != *(unsigned __int8 *)(*(void *)(a3 + 56) + v12))
      {
        int v90 = v65;
        int v7 = v132;
        break;
      }

      BOOL v130 = *((unsigned int *)v68 + 12);
      uint64_t v114 = v65 + v12;
      __int16 v115 = v65;
      uint64_t v69 = *(unsigned __int8 **)(*v67 + 24 * v65 + 8);
      uint64_t v70 = sub_1812A3C7C(v68);
      uint64_t v113 = v69;
      unint64_t v71 = sub_1812A3C7C(v69);
      if (v70 < 65 || v71 < 65)
      {
        if (v71 >= 65) {
          int v80 = v71;
        }
        else {
          int v80 = v70;
        }
        uint64_t v79 = v80 | 0x40;
      }

      else
      {
        char v78 = v71 > 0x42 || v70 > 0x42;
        if (v78) {
          uint64_t v79 = 67;
        }
        else {
          uint64_t v79 = 65;
        }
      }

      else {
        uint64_t v82 = *(unsigned __int8 *)(*(void *)(v81 + 8) + 16 * v130 + 9);
      }
      int v7 = v132;
      if (v82 != v79)
      {
LABEL_186:
        int v90 = v115;
        break;
      }

      if ((v68[5] & 2) != 0)
      {
        uint64_t v85 = (uint64_t)v4;
        uint64_t v83 = v68;
        goto LABEL_177;
      }

      uint64_t v83 = v113;
      if (v113 && (v113[5] & 2) != 0)
      {
        uint64_t v85 = (uint64_t)v4;
LABEL_177:
        uint64_t v84 = (_BYTE **)sub_181289D04(v85, v83, v72, v73, v74, v75, v76, v77);
        if (!v84) {
          goto LABEL_186;
        }
        goto LABEL_178;
      }

      uint64_t v84 = (_BYTE **)sub_181289D04((uint64_t)v4, v68, v72, v73, v74, v75, v76, v77);
      if (!v84)
      {
        uint64_t v85 = (uint64_t)v4;
        uint64_t v83 = v113;
        goto LABEL_177;
      }

        sqlite3_result_error_nomem((sqlite3_context *)a1);
        return;
      }

      uint64_t v12 = *(const char **)(v23 + 8);
LABEL_42:
      if (!v8 || !v9 || !v12) {
        goto LABEL_202;
      }
      if (!LODWORD(v6))
      {
        if (a1)
        {
          sub_1812D7A8C(a1, &byte_1813CEAEE, -1, 1u, 0LL);
          return;
        }

        goto LABEL_217;
      }

LABEL_211:
    ++v129;
    v131 += 120LL;
  }

  while (v129 != v230);
  *(_DWORD *)(v61 + 72) = *(_DWORD *)(v228 + 144);
  uint64_t v59 = v246;
  uint64_t v200 = v236;
  if (!*(_BYTE *)(v60 + 103))
  {
    uint64_t v201 = 0LL;
    int v202 = 0;
    while (!*(_DWORD *)(v59 + 48))
    {
      uint64_t v203 = v61 + v201;
      int v204 = *(_DWORD *)(*(void *)(v61 + v201 + 952) + 48LL);
      unsigned int v205 = *(unsigned __int8 *)(v61 + v201 + 920);
      __int16 v206 = *(_WORD *)(v11 + 104LL * *(unsigned __int8 *)(v61 + v201 + 920) + 69);
      if ((v206 & 0x10) != 0)
      {
        if ((v206 & 8) != 0)
        {
          sub_1813103F4( v228,  10LL,  *(unsigned int *)(v11 + 104LL * *(unsigned __int8 *)(v61 + v201 + 920) + 60),  *(unsigned int *)(v11 + 104LL * *(unsigned __int8 *)(v61 + v201 + 920) + 56),  v105,  v106,  v107,  v108);
          uint64_t v61 = v247;
        }

        else
        {
          int v207 = sub_181319B54(v228, 15LL, v103, v104, v105, v106, v107, v108);
          sub_1813103F4( v228,  10LL,  *(unsigned int *)(v11 + 104LL * v205 + 60),  *(unsigned int *)(v11 + 104LL * v205 + 56),  v208,  v209,  v210,  v211);
          uint64_t v212 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v228 + 103LL)) {
            uint64_t v212 = (char *)(*(void *)(v228 + 136) + 40LL * v207);
          }
          *((_DWORD *)v212 + 2) = *(_DWORD *)(v228 + 144);
          uint64_t v61 = v247;
          uint64_t v11 = v226;
        }
      }

      uint64_t v213 = (unsigned int *)(v203 + 856);
      uint64_t v59 = v246;
      uint64_t v60 = v233;
      if ((v204 & 0x404000) != 0)
      {
        if ((v204 & 0x4000) != 0) {
          sub_18132C478((uint64_t *)v246, v240, v200, (uint64_t)v213, v105, v106, v107, v108);
        }
        else {
          sub_18132D78C((uint64_t *)v61, v202, (uint64_t)v213, v200, v105, v106, v107, v108);
        }
        uint64_t v61 = v247;
        if (*(_BYTE *)(v233 + 103)) {
          break;
        }
      }

      int v214 = sub_18132DF04(v246, v11, (uint64_t)v213, v232);
      *(_DWORD *)(v247 + v201 + 888) = *(_DWORD *)(v228 + 144);
      uint64_t v218 = sub_18132E468(v246, v228, v247, v202, v213, v200, v215, v216, v217);
      uint64_t v61 = v247;
      uint64_t v200 = v218;
      *(_DWORD *)(v247 + 48) = *(_DWORD *)(v247 + v201 + 880);
      if (!(v204 & 0x2000 | v245))
      {
        sub_181331228(v228, v11, (uint64_t)v213, v214);
        uint64_t v61 = v247;
      }

      ++v202;
      v201 += 120LL;
      uint64_t v59 = v246;
      uint64_t v60 = v233;
      if (120LL * v230 == v201)
      {
        int v223 = *(_DWORD *)(v228 + 144);
        goto LABEL_348;
      }
    }
  }

LABEL_139:
  *(_WORD *)(v59 + 216) = *(_DWORD *)(v61 + 56);
  sub_18128F8B0((void *)v60, (void *)v61);
  return 0LL;
}

      if (++v79 == v80) {
        goto LABEL_152;
      }
    }
  }

  uint64_t v13 = a1[14];
  if (v13) {
    goto LABEL_17;
  }
  uint64_t v100 = 0;
  uint64_t v24 = (const char *)a1[12];
  if (!a1[13]) {
    goto LABEL_171;
  }
  uint64_t v25 = (unsigned __int8 *)sub_1813889B8(&v100, "SELECT %s", (const char *)a1[13]);
  if (!v25)
  {
    int v16 = v100;
    goto LABEL_170;
  }

  uint64_t v27 = v25;
  pStmt = 0LL;
  int v16 = sub_18126DFE0(*(void *)v7, v25, 0xFFFFFFFFLL, 129LL, 0LL, &pStmt, 0LL, v26);
  uint64_t v28 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_48;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v27);
  --qword_18C468B10;
  off_18C4653A8(v27);
  uint64_t v27 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v28 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_48:
    (*v28)(v27);
  }

  if ((_DWORD)v16) {
    goto LABEL_170;
  }
  uint64_t v29 = sqlite3_step(pStmt);
  uint64_t v30 = (unsigned __int16 *)pStmt;
  if (v29 != 100)
  {
    int v16 = sqlite3_finalize(pStmt);
    goto LABEL_170;
  }

  if (pStmt)
  {
    uint64_t v31 = *(void *)(*(void *)pStmt + 24LL);
    if (v31)
    {
      xmmword_18C465400(v31);
      uint64_t v32 = *(void *)(*(void *)v30 + 24LL);
      uint64_t v33 = v30[130];
      if (v32) {
        xmmword_18C465410(v32);
      }
    }

    else
    {
      uint64_t v33 = *((unsigned __int16 *)pStmt + 130);
    }
  }

  else
  {
    uint64_t v33 = 0;
  }

  *((_DWORD *)a1 + 30) = v33;
  if (!sqlite3_initialize())
  {
    int v89 = (void *)sub_18126F0AC((8 * v33));
    if (v89)
    {
      int v90 = (uint64_t)v89;
      bzero(v89, (8 * v33));
LABEL_165:
      a1[16] = v90;
      if (*((int *)a1 + 30) >= 1)
      {
        uint64_t v91 = 0LL;
        do
        {
          *(void *)(a1[16] + 8 * v91) = sqlite3_column_value(pStmt, v91);
          ++v91;
        }

        while (v91 < *((int *)a1 + 30));
      }

      int v16 = 0LL;
      goto LABEL_169;
    }
  }

  if (!v33)
  {
    int v90 = 0LL;
    goto LABEL_165;
  }

  a1[16] = 0LL;
  int v16 = 7LL;
LABEL_169:
  a1[17] = (uint64_t)pStmt;
LABEL_170:
  if ((_DWORD)v16)
  {
LABEL_184:
    a1[14] = 0LL;
    return v16;
  }

    if (v22)
    {
      LODWORD(v92) = 0;
LABEL_167:
      if (v22 || (v92 & 0xFFFFFFFE) == 4)
      {
        *(_DWORD *)(v85 + 128) = (_DWORD)v92;
        if (!v22) {
          *(_DWORD *)(v85 + 132) = v87;
        }
      }

      else
      {
        if (*(void *)(v85 + 184)) {
          **(void **)(v85 + 184) = sqlite3_mprintf( "invalid fts5 file format (found %d, expected %d or %d) - run 'rebuild'",  (_DWORD)v92,  4,  5);
        }
        uint64_t v22 = 1;
      }

      goto LABEL_116;
    }

    if (sqlite3_step(v118) != 100)
    {
      LODWORD(v92) = 0;
LABEL_166:
      uint64_t v22 = sqlite3_finalize(v118);
      uint64_t v85 = v102;
      goto LABEL_167;
    }

    LODWORD(v92) = 0;
LABEL_145:
    uint64_t v93 = (unsigned __int8 *)sqlite3_column_text(v118, 0);
    unint64_t v94 = sqlite3_column_value(v118, 1);
    if (!v93)
    {
LABEL_143:
      sub_18138C160(v102, v93, (unsigned __int8 **)v94, &v116);
      goto LABEL_144;
    }

    uint64_t v95 = "version";
    for (uint64_t i = v93; ; ++i)
    {
      int v97 = *i;
      uint64_t v98 = *(unsigned __int8 *)v95;
      if ((_DWORD)v97 == (_DWORD)v98)
      {
        if (!*i)
        {
          if (v94)
          {
            uint64_t v99 = *((_WORD *)v94 + 10);
            if ((v99 & 0x24) != 0)
            {
              unint64_t v92 = *(unsigned __int8 **)v94;
            }

            else if ((v99 & 8) != 0)
            {
              uint64_t v100 = *(double *)v94;
              if (*(double *)v94 >= -9.22337204e18)
              {
                if (v100 <= 9.22337204e18) {
                  unint64_t v92 = (unsigned __int8 *)(uint64_t)v100;
                }
                else {
                  LODWORD(v92) = -1;
                }
              }

              else
              {
                LODWORD(v92) = 0;
              }
            }

            else if ((v99 & 0x12) != 0 && *((void *)v94 + 1))
            {
              LODWORD(v92) = sub_181303DF0((uint64_t)v94);
            }

            else
            {
              LODWORD(v92) = 0;
            }
          }

          else
          {
            sub_1812CF36C(89717);
            LODWORD(v92) = 0;
          }

uint64_t sub_18128BBA8(uint64_t result, int a2)
{
  if (*(void *)(result + 168)) {
    uint64_t result = *(void *)(result + 168);
  }
  int v2 = *(_DWORD *)(result + 124);
  if ((v2 & (1 << a2)) == 0)
  {
    *(_DWORD *)(result + 124) = v2 | (1 << a2);
    if (a2 == 1) {
      return sub_1812FA2F0(result);
    }
  }

  return result;
}

void sub_18128BBE0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a1[2];
  if (!*(_BYTE *)(*a1 + 111LL)
    && (_DWORD)a3 != 1
    && *(_BYTE *)(*(void *)(*(void *)(*a1 + 32LL) + 32LL * (int)a3 + 8) + 17LL))
  {
    sub_181319DC4((uint64_t)a1, a3, *(_DWORD *)(a4 + 40), a5 == 113, *(void *)a4);
  }

  if ((*(_BYTE *)(a4 + 48) & 0x80) != 0)
  {
    for (uint64_t i = *(void *)(a4 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }

    uint64_t v19 = *(unsigned int *)(i + 88);
    int v20 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v20)
    {
      sub_18131044C(v13, a5, a2, v19, a3, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v13 + 144) = v20 + 1;
      uint64_t v21 = *(void *)(v13 + 136) + 40LL * v20;
      *(_BYTE *)uint64_t v21 = a5;
      *(_WORD *)(v21 + 2) = 0;
      *(_DWORD *)(v21 + 4) = a2;
      *(_DWORD *)(v21 + 8) = v19;
      *(_DWORD *)(v21 + 12) = a3;
      *(_BYTE *)(v21 + 1) = 0;
      *(void *)(v21 + 24) = 0LL;
      *(void *)(v21 + 32) = 0LL;
      *(void *)(v21 + 16) = 0LL;
    }

    uint64_t v22 = a1[2];
    uint64_t v23 = sub_181319FB0(a1, i);
    if (v23)
    {
      if (*(_BYTE *)(*(void *)v22 + 103LL))
      {
        if (!*(void *)(*(void *)v22 + 816LL) && (*(_DWORD *)v23)-- == 1) {
          sub_1813014B0(*(void **)(v23 + 16), (void *)v23);
        }
      }

      else
      {
        uint64_t v25 = *(void *)(v22 + 136) + 40LL * *(int *)(v22 + 144);
        *(_BYTE *)(v25 - 39) = -8;
        *(void *)(v25 - 24) = v23;
      }
    }
  }

  else
  {
    uint64_t v14 = *(unsigned int *)(a4 + 40);
    uint64_t v15 = *(__int16 *)(a4 + 56);
    int v16 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v16)
    {
      sub_181310690(v13, a5, a2, v14, a3, v15, a7, a8);
    }

    else
    {
      *(_DWORD *)(v13 + 144) = v16 + 1;
      uint64_t v17 = *(void *)(v13 + 136) + 40LL * v16;
      *(_BYTE *)uint64_t v17 = a5;
      *(_WORD *)(v17 + 2) = 0;
      *(_DWORD *)(v17 + 4) = a2;
      *(_DWORD *)(v17 + 8) = v14;
      *(_DWORD *)(v17 + 12) = a3;
      *(_DWORD *)(v17 + 16) = v15;
      *(_BYTE *)(v17 + 1) = -3;
      *(void *)(v17 + 24) = 0LL;
      *(void *)(v17 + 32) = 0LL;
    }
  }

void *sub_18128BDCC(uint64_t a1, int a2)
{
  uint64_t result = *(void **)a1;
  if (!*((_BYTE *)result + 103))
  {
    uint64_t v4 = *(void *)(a1 + 136) + 40LL * a2;
    uint64_t result = sub_18127ABFC(result, *(char *)(v4 + 1), *(void *)(v4 + 16));
    *(void *)(v4 + 16) = 0LL;
    *(_WORD *)uint64_t v4 = 184;
  }

  return result;
}

uint64_t sub_18128BE18( uint64_t result, uint64_t a2, uint64_t a3, int **a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v156 = a8;
  unsigned int v161 = a7;
  unsigned int v8 = a6;
  uint64_t v11 = result;
  if (a5)
  {
    int v12 = *(unsigned __int8 *)(a5 + 1);
    uint64_t v13 = *(void *)(result + 16);
    if (a4) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v14 = 0LL;
    goto LABEL_8;
  }

  int v12 = 0;
  uint64_t v13 = *(void *)(result + 16);
  if (!a4) {
    goto LABEL_7;
  }
LABEL_3:
  if (*a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = 0LL;
  }
LABEL_8:
  uint64_t v15 = *((unsigned int *)a6 + 1);
  int v16 = *a6;
  if (!v14 && !v12)
  {
    uint64_t v17 = *(unsigned int *)(a2 + 12);
    if ((int)v17 >= 1)
    {
      int v18 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v18)
      {
        uint64_t result = sub_18131044C(v13, 59LL, v17, a7, 1LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v18 + 1;
        uint64_t v19 = *(void *)(v13 + 136) + 40LL * v18;
        *(_DWORD *)uint64_t v19 = 59;
        *(_DWORD *)(v19 + 4) = v17;
        *(_DWORD *)(v19 + 8) = a7;
        *(_DWORD *)(v19 + 12) = 1;
        *(void *)(v19 + 24) = 0LL;
        *(void *)(v19 + 32) = 0LL;
        *(void *)(v19 + 16) = 0LL;
      }
    }
  }

  int v163 = v12;
  int v20 = *(int **)(a2 + 32);
  uint64_t v21 = *v20;
  unsigned int v22 = *((_DWORD *)v8 + 3);
  if (!v22)
  {
    if (v14)
    {
      if ((*((_BYTE *)v14 + 36) & 1) != 0) {
        int v23 = **v14;
      }
      else {
        int v23 = **v14 + 1;
      }
      int v24 = v23 + *(_DWORD *)(v11 + 56);
    }

    else
    {
      int v23 = 0;
      int v24 = *(_DWORD *)(v11 + 56);
    }

    uint64_t v25 = (_DWORD *)(v11 + 56);
    unsigned int v22 = v24 + 1;
    *((_DWORD *)v8 + 3) = v24 + 1;
    goto LABEL_24;
  }

  int v23 = 0;
  uint64_t v25 = (_DWORD *)(v11 + 56);
  int v24 = *(_DWORD *)(v11 + 56);
  if ((int)(v22 + v21) > v24) {
LABEL_24:
  }
    *uint64_t v25 = v24 + v21;
  unsigned int v159 = v23;
  *((_DWORD *)v8 + 4) = v21;
  unsigned int v165 = v15;
  if ((a3 & 0x80000000) != 0)
  {
    char v31 = 1;
    if ((v16 - 9) >= 2 && v16 != 13)
    {
      if (v16 == 3) {
        goto LABEL_36;
      }
      char v31 = 0;
    }

    if (!v14 || v163 || v16 == 12 || v16 == 14) {
      goto LABEL_54;
    }
    v31 |= 0xCu;
    uint64_t v32 = *((int *)v14 + 2);
    uint64_t v33 = *v14;
    int v34 = **v14;
    int v35 = v21;
    if ((int)v32 < v34)
    {
      do
      {
        while (1)
        {
          int v36 = LOWORD(v33[6 * v32 + 7]);
          if (LOWORD(v33[6 * v32 + 7])) {
            break;
          }
          if (++v32 >= v34) {
            goto LABEL_47;
          }
        }

        *(_WORD *)(*(void *)(a2 + 32) + 24LL * (v36 - 1) + 28) = ++v32 - *((_DWORD *)v14 + 2);
        uint64_t v33 = *v14;
        int v34 = **v14;
      }

      while (v32 < v34);
LABEL_47:
      int v20 = *(int **)(a2 + 32);
      int v35 = *v20;
    }

    if (v35 < 1)
    {
LABEL_54:
      int v30 = v22;
    }

    else
    {
      unint64_t v37 = 0LL;
      uint64_t v38 = 24LL * v35;
      int v30 = v22;
      do
      {
        if (LOWORD(v20[v37 / 4 + 7])) {
          int v30 = 0;
        }
        uint64_t v21 = v21 - (LOWORD(v20[v37 / 4 + 7]) != 0);
        v37 += 24LL;
      }

      while (v38 != v37);
    }

    unsigned int v166 = v22;
    char v167 = v31;
    if (*(_DWORD *)(a2 + 8) && (v31 & 8) != 0 && (int)v159 >= 1)
    {
      int v30 = 0;
      v14[5] = (int *)&v166;
    }

    else
    {
      uint64_t result = sub_18131B090(v11, v20, v22, 0, v31, (uint64_t)a6, a7, a8);
    }

    goto LABEL_60;
  }

  if ((int)v21 < 1)
  {
LABEL_36:
    int v30 = v22;
    goto LABEL_60;
  }

  uint64_t v153 = v8;
  uint64_t v26 = 0LL;
  do
  {
    uint64_t v28 = v22 + v26;
    int v29 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) > v29)
    {
      *(_DWORD *)(v13 + 144) = v29 + 1;
      uint64_t v27 = *(void *)(v13 + 136) + 40LL * v29;
      *(_DWORD *)uint64_t v27 = 94;
      *(_DWORD *)(v27 + 4) = a3;
      *(_DWORD *)(v27 + 8) = v26;
      *(_DWORD *)(v27 + 12) = v28;
      *(void *)(v27 + 24) = 0LL;
      *(void *)(v27 + 32) = 0LL;
      *(void *)(v27 + 16) = 0LL;
    }

    else
    {
      uint64_t result = sub_18131044C(v13, 94LL, a3, v26, v28, (uint64_t)a6, a7, a8);
    }

    uint64_t v26 = (v26 + 1);
  }

  while ((_DWORD)v21 != (_DWORD)v26);
  int v30 = v22;
  uint64_t v15 = v15;
  unsigned int v8 = v153;
LABEL_60:
  if (v163)
  {
    uint64_t v39 = v8;
    int v40 = *(unsigned __int8 *)(a5 + 1);
    int v41 = sub_18133D5A8(v11, v40, *(unsigned int *)(a5 + 4), v161, *(unsigned int **)(a2 + 32), v22, a7, a8);
    int v42 = v40;
    unsigned int v8 = v39;
    uint64_t v15 = v165;
    uint64_t result = (uint64_t)sub_181328F18((void *)v11, v42, v41, *(_DWORD *)(a5 + 8));
    if (!v14)
    {
      uint64_t v46 = *(unsigned int *)(a2 + 12);
      if ((int)v46 >= 1)
      {
        int v47 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) <= v47)
        {
          uint64_t result = sub_18131044C(v13, 59LL, v46, v161, 1LL, (uint64_t)a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v13 + 144) = v47 + 1;
          uint64_t v48 = *(void *)(v13 + 136) + 40LL * v47;
          *(_DWORD *)uint64_t v48 = 59;
          *(_DWORD *)(v48 + 4) = v46;
          *(_DWORD *)(v48 + 8) = v161;
          *(_DWORD *)(v48 + 12) = 1;
          *(void *)(v48 + 24) = 0LL;
          *(void *)(v48 + 32) = 0LL;
          *(void *)(v48 + 16) = 0LL;
        }
      }
    }
  }

  switch(v16)
  {
    case 1:
      if (*(_BYTE *)(v11 + 31))
      {
        unsigned __int8 v63 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v63;
        uint64_t v64 = *(unsigned int *)(v11 + 4LL * v63 + 224);
      }

      else
      {
        uint64_t v64 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v64;
      }

      int v128 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v128)
      {
        uint64_t result = sub_18131044C(v13, 97LL, v22, v21, v64, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v128 + 1;
        uint64_t v129 = *(void *)(v13 + 136) + 40LL * v128;
        *(_DWORD *)uint64_t v129 = 97;
        *(_DWORD *)(v129 + 4) = v22;
        *(_DWORD *)(v129 + 8) = v21;
        *(_DWORD *)(v129 + 12) = v64;
        *(void *)(v129 + 24) = 0LL;
        *(void *)(v129 + 32) = 0LL;
        *(void *)(v129 + 16) = 0LL;
      }

      int v130 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v130)
      {
        uint64_t result = sub_181310690(v13, 138LL, v15, v64, v22, v21, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v130 + 1;
        uint64_t v131 = *(void *)(v13 + 136) + 40LL * v130;
        *(_DWORD *)uint64_t v131 = 64906;
        *(_DWORD *)(v131 + 4) = v15;
        *(_DWORD *)(v131 + 8) = v64;
        *(_DWORD *)(v131 + 12) = v22;
        *(_DWORD *)(v131 + 16) = v21;
        *(void *)(v131 + 24) = 0LL;
        *(void *)(v131 + 32) = 0LL;
      }

      if ((_DWORD)v64)
      {
        uint64_t v132 = *(unsigned __int8 *)(v11 + 31);
        if (v132 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v132 + 1;
          *(_DWORD *)(v11 + 4 * v132 + 224) = v64;
        }
      }

      goto LABEL_191;
    case 2:
      int v65 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v65)
      {
        uint64_t result = sub_18131044C(v13, 140LL, v15, v22, v21, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v65 + 1;
        uint64_t v66 = *(void *)(v13 + 136) + 40LL * v65;
        *(_DWORD *)uint64_t v66 = 140;
        *(_DWORD *)(v66 + 4) = v15;
        *(_DWORD *)(v66 + 8) = v22;
        *(_DWORD *)(v66 + 12) = v21;
        *(void *)(v66 + 24) = 0LL;
        *(void *)(v66 + 32) = 0LL;
        *(void *)(v66 + 16) = 0LL;
      }

      goto LABEL_191;
    case 3:
      int v67 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v67)
      {
        uint64_t result = sub_18131044C(v13, 71LL, 1LL, v15, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v67 + 1;
        uint64_t v68 = *(void *)(v13 + 136) + 40LL * v67;
        *(void *)uint64_t v68 = 0x100000047LL;
        *(_DWORD *)(v68 + 8) = v15;
        *(void *)(v68 + 12) = 0LL;
        *(void *)(v68 + 28) = 0LL;
        *(void *)(v68 + 20) = 0LL;
        *(_DWORD *)(v68 + 36) = 0;
      }

      goto LABEL_191;
    case 5:
    case 8:
    case 12:
    case 14:
      unsigned int v43 = v159 + 1;
      uint64_t v152 = v14;
      if (v159)
      {
        signed int v44 = *(_DWORD *)(v11 + 40);
        if (v44 <= (int)v159)
        {
          int v62 = *(_DWORD *)(v11 + 56);
          uint64_t v45 = (v62 + 1);
          *(_DWORD *)(v11 + 56) = v62 + v43;
        }

        else
        {
          uint64_t v45 = *(unsigned int *)(v11 + 44);
          *(_DWORD *)(v11 + 40) = v44 - v43;
          *(_DWORD *)(v11 + 44) = v45 + v43;
        }
      }

      else if (*(_BYTE *)(v11 + 31))
      {
        unsigned __int8 v61 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v61;
        uint64_t v45 = *(unsigned int *)(v11 + 4LL * v61 + 224);
      }

      else
      {
        uint64_t v45 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v45;
      }

      uint64_t v75 = v45 + v159;
      int v76 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v76)
      {
        uint64_t result = sub_18131044C(v13, 97LL, v22, v21, v45 + v159, (uint64_t)a6, a7, a8);
        if (v16 != 5) {
          goto LABEL_103;
        }
LABEL_109:
        int v81 = *(_DWORD *)(v13 + 144);
        uint64_t v82 = (v81 + 4);
        uint64_t v83 = (v15 + 1);
        if (*(_DWORD *)(v13 + 148) <= v81)
        {
          uint64_t result = sub_181310690(v13, 29LL, v83, v82, v45, 0LL, a7, a8);
        }

        else
        {
          *(_DWORD *)(v13 + 144) = v81 + 1;
          uint64_t v84 = *(void *)(v13 + 136) + 40LL * v81;
          *(_DWORD *)uint64_t v84 = 64797;
          *(_DWORD *)(v84 + 4) = v83;
          *(_DWORD *)(v84 + 8) = v82;
          *(_DWORD *)(v84 + 12) = v45;
          *(_DWORD *)(v84 + 16) = 0;
          *(void *)(v84 + 24) = 0LL;
          *(void *)(v84 + 32) = 0LL;
        }

        int v86 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) <= v86)
        {
          uint64_t result = sub_181310690(v13, 138LL, v83, v45, v22, v21, a7, a8);
        }

        else
        {
          *(_DWORD *)(v13 + 144) = v86 + 1;
          uint64_t v87 = *(void *)(v13 + 136) + 40LL * v86;
          *(_DWORD *)uint64_t v87 = 64906;
          *(_DWORD *)(v87 + 4) = v83;
          *(_DWORD *)(v87 + 8) = v45;
          *(_DWORD *)(v87 + 12) = v22;
          *(_DWORD *)(v87 + 16) = v21;
          *(void *)(v87 + 24) = 0LL;
          *(void *)(v87 + 32) = 0LL;
        }

        uint64_t v15 = v165;
        char v78 = v152;
        if (v152) {
          goto LABEL_104;
        }
        goto LABEL_119;
      }

      *(_DWORD *)(v13 + 144) = v76 + 1;
      uint64_t v77 = *(void *)(v13 + 136) + 40LL * v76;
      *(_DWORD *)uint64_t v77 = 97;
      *(_DWORD *)(v77 + 4) = v22;
      *(_DWORD *)(v77 + 8) = v21;
      *(_DWORD *)(v77 + 12) = v75;
      *(void *)(v77 + 24) = 0LL;
      *(void *)(v77 + 32) = 0LL;
      *(void *)(v77 + 16) = 0LL;
      if (v16 == 5) {
        goto LABEL_109;
      }
LABEL_103:
      char v78 = v152;
      if (v152)
      {
LABEL_104:
        uint64_t v79 = v78;
        uint64_t result = sub_1812B6430(v11, v78, a2, v75, v30, 1LL, v159, a8);
        signed int v80 = v159;
        goto LABEL_105;
      }

LABEL_119:
      uint64_t v79 = v78;
      if (*(_BYTE *)(v11 + 31))
      {
        unsigned __int8 v88 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v88;
        uint64_t v89 = *(unsigned int *)(v11 + 4LL * v88 + 224);
      }

      else
      {
        uint64_t v89 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v89;
      }

      int v90 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v90)
      {
        uint64_t result = sub_18131044C(v13, 127LL, v15, v89, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v90 + 1;
        uint64_t v91 = *(void *)(v13 + 136) + 40LL * v90;
        *(_DWORD *)uint64_t v91 = 127;
        *(_DWORD *)(v91 + 4) = v15;
        *(_DWORD *)(v91 + 8) = v89;
        *(void *)(v91 + 12) = 0LL;
        *(void *)(v91 + 28) = 0LL;
        *(void *)(v91 + 20) = 0LL;
        *(_DWORD *)(v91 + 36) = 0;
      }

      int v92 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v92)
      {
        uint64_t result = sub_18131044C(v13, 128LL, v15, v45, v89, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v92 + 1;
        uint64_t v93 = *(void *)(v13 + 136) + 40LL * v92;
        *(_DWORD *)uint64_t v93 = 128;
        *(_DWORD *)(v93 + 4) = v15;
        *(_DWORD *)(v93 + 8) = v45;
        *(_DWORD *)(v93 + 12) = v89;
        *(void *)(v93 + 24) = 0LL;
        *(void *)(v93 + 32) = 0LL;
        *(void *)(v93 + 16) = 0LL;
      }

      signed int v80 = v159;
      int v94 = *(_DWORD *)(v13 + 144);
      BOOL v72 = __OFSUB__(v94, 1);
      int v95 = v94 - 1;
      if (v95 < 0 == v72) {
        *(_WORD *)(*(void *)(v13 + 136) + 40LL * v95 + 2) = 8;
      }
      if ((_DWORD)v89)
      {
        uint64_t v96 = *(unsigned __int8 *)(v11 + 31);
        if (v96 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v96 + 1;
          *(_DWORD *)(v11 + 4 * v96 + 224) = v89;
        }
      }

  uint64_t result = sub_181335FD4((uint64_t)v14, v2);
  *(_WORD *)(v2 + 22) = v39;
  if (!(_DWORD)result) {
    goto LABEL_120;
  }
  return result;
}

    for (iuint64_t i = 0; ; iuint64_t i = 1)
    {
      --v49;
      do
      {
        int v76 = *++v49;
        uint64_t v75 = v76;
      }

      while (v76 == 32);
      if (v75 != 44 || (ii & 1) == 0) {
        break;
      }
      do
      {
        uint64_t v77 = *++v49;
        uint64_t v75 = v77;
      }

      while (v77 == 32);
LABEL_126:
      if (v75 - 58 <= 0xFFFFFFF5)
      {
        int v57 = sqlite3_mprintf("malformed prefix=... directive", v201);
        goto LABEL_76;
      }

      char v78 = *(int *)(v19 + 48);
      if ((_DWORD)v78 == 31)
      {
        int v57 = sqlite3_mprintf("too many prefix indexes (max %d)");
        goto LABEL_76;
      }

      uint64_t v79 = 0;
      do
      {
        if (v75 > 0x39) {
          break;
        }
        if (v79 > 999) {
          break;
        }
        uint64_t v79 = v75 + 10 * v79 - 48;
        signed int v80 = *++v49;
        uint64_t v75 = v80;
      }

      while (v80 > 47);
      if ((v79 - 1000) <= 0xFFFFFC18)
      {
        int v57 = sqlite3_mprintf("prefix length out of range (max 999)");
        goto LABEL_76;
      }

      *((_DWORD *)v73 + v78) = v79;
      ++*(_DWORD *)(v19 + 48);
    }

    if (v75) {
      goto LABEL_126;
    }
    uint64_t v15 = 0LL;
    uint64_t v213 = 0;
    uint64_t v58 = v215;
    if ((void)v215) {
      goto LABEL_79;
    }
LABEL_159:
    int v34 = v208;
LABEL_160:
    uint64_t v84 = (unsigned __int8 *)v212;
    if (v212)
    {
      uint64_t v85 = (void (**)(unsigned __int8 *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_166;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v84);
      --qword_18C468B10;
      off_18C4653A8(v84);
      uint64_t v84 = (unsigned __int8 *)xmmword_18C468B70;
      a1 = v206;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v85 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_166:
        (*v85)(v84);
      }
    }

    if ((_DWORD)v15) {
      break;
    }
    uint64_t v38 = v207 + 1;
  }

  while (v207 + 1 < (uint64_t)__s);
  if ((_DWORD)v15) {
    goto LABEL_27;
  }
  if (!*(_DWORD *)(v19 + 68)) {
    goto LABEL_479;
  }
  if (*(_DWORD *)(v19 + 64) != 1)
  {
LABEL_489:
    unint64_t v37 = sqlite3_mprintf("contentless_delete=1 requires a contentless table", v201);
    goto LABEL_33;
  }

  if (*(_DWORD *)(v19 + 88)) {
    goto LABEL_479;
  }
  unint64_t v37 = sqlite3_mprintf("contentless_delete=1 is incompatible with columnsize=0");
LABEL_33:
  *int v34 = v37;
  uint64_t v15 = 1LL;
LABEL_27:
  sub_181388A10(v19);
LABEL_4:
  sub_1813886F0((uint64_t)v14);
  uint64_t v14 = 0LL;
LABEL_5:
  *a6 = v14;
  return v15;
}

LABEL_105:
      if (v80)
      {
        uint64_t v14 = v79;
        if (*(_DWORD *)(v11 + 40) <= v80)
        {
          *(_DWORD *)(v11 + 40) = v159 + 1;
          *(_DWORD *)(v11 + 44) = v45;
        }
      }

      else
      {
        uint64_t v14 = v79;
        if ((_DWORD)v45)
        {
          uint64_t v85 = *(unsigned __int8 *)(v11 + 31);
          if (v85 <= 7)
          {
            *(_BYTE *)(v11 + 31) = v85 + 1;
            *(_DWORD *)(v11 + 4 * v85 + 224) = v45;
          }
        }
      }

      uint64_t v84 = *(void *)(v84 + 24);
      if (!v84) {
        return;
      }
      continue;
    }
  }

    if (*(_BYTE *)(v23 + 17))
    {
      ++*(_DWORD *)(v23 + 20);
      if (!*(_BYTE *)(v23 + 18)) {
        sub_1812FDE20(v23);
      }
    }

    if (*(_BYTE *)(v23 + 17))
    {
      uint64_t v48 = *(_DWORD *)(v23 + 20) - 1;
      *(_DWORD *)(v23 + 20) = v48;
      if (!v48) {
        sub_1812FDEFC(v23);
      }
    }
  }

                int v73 = v86 + v72;
                if ((_DWORD)v86 + v72 == a6)
                {
                  if (v225)
                  {
                    uint64_t v33 = v228;
                  }

                  else
                  {
                    uint64_t v33 = v228;
                    if ((_DWORD)v86 != v79)
                    {
LABEL_138:
                      uint64_t v104 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
                      if (dword_18C465380)
                      {
                        int v50 = v237;
                        if ((void)xmmword_18C468B70) {
                          xmmword_18C465400(xmmword_18C468B70);
                        }
                        qword_18C468AC8[0] -= (int)off_18C4653B8(v61);
                        --qword_18C468B10;
                        off_18C4653A8(v61);
                        unsigned __int8 v61 = (uint64_t *)xmmword_18C468B70;
                        uint64_t v60 = (uint64_t)v235;
                        int v62 = v227;
                        if ((void)xmmword_18C468B70)
                        {
                          uint64_t v104 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
                          goto LABEL_144;
                        }
                      }

                      else
                      {
                        uint64_t v60 = (uint64_t)v235;
                        int v50 = v237;
                        int v62 = v227;
LABEL_144:
                        (*v104)(v61);
                      }

                      *int v62 = 0LL;
                      goto LABEL_203;
                    }
                  }

    signed int v44 = 0LL;
    goto LABEL_146;
  }

  return 518LL;
}

LABEL_191:
      if (!v14)
      {
LABEL_192:
        uint64_t v133 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v133)
        {
          int v134 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) <= v134)
          {
            return sub_18131044C(v13, 61LL, v133, v156, 0LL, (uint64_t)a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v13 + 144) = v134 + 1;
            uint64_t v135 = *(void *)(v13 + 136) + 40LL * v134;
            *(_DWORD *)uint64_t v135 = 61;
            *(_DWORD *)(v135 + 4) = v133;
            *(_DWORD *)(v135 + 8) = v156;
            *(void *)(v135 + 12) = 0LL;
            *(void *)(v135 + 28) = 0LL;
            *(void *)(v135 + 20) = 0LL;
            *(_DWORD *)(v135 + 36) = 0;
          }
        }
      }

      return result;
    case 6:
    case 7:
      char v49 = v8;
      int v50 = v16;
      uint64_t v51 = (unsigned int *)*((void *)v49 + 4);
      uint64_t v52 = *v51;
      char v53 = *(_BYTE *)(v11 + 31);
      if (v53)
      {
        *(_BYTE *)(v11 + 31) = v53 - 1;
        int v54 = *(_DWORD *)(v11 + 4LL * (v53 - 1) + 224);
        unsigned int v55 = v52 + 2;
        if ((_DWORD)v52 == -1)
        {
          if (v53 != 1)
          {
            unsigned int v158 = *(_DWORD *)(v11 + 4LL * (v53 - 1) + 224);
            unsigned __int8 v56 = v53 - 2;
            *(_BYTE *)(v11 + 31) = v56;
            int v57 = *(_DWORD *)(v11 + 4LL * v56 + 224);
LABEL_96:
            int v154 = 1;
            unsigned int v155 = 1;
            goto LABEL_135;
          }

            v162 += 40;
          }

          while (v162 < v163);
        }
      }

LABEL_135:
      unsigned int v164 = v57;
      unsigned int v160 = v57 + v52;
      uint64_t v97 = (v57 + v52 + 1);
      if (v50 == 6)
      {
        uint64_t v98 = v165 + 1;
        uint64_t result = *(unsigned int *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) <= (int)result)
        {
          uint64_t result = sub_181310690(v13, 29LL, v98, 0LL, v22, v21, a7, a8);
        }

        else
        {
          *(_DWORD *)(v13 + 144) = result + 1;
          uint64_t v99 = *(void *)(v13 + 136) + 40LL * (int)result;
          *(_DWORD *)uint64_t v99 = 64797;
          *(void *)(v99 + 4) = v98;
          *(_DWORD *)(v99 + 12) = v22;
          *(_DWORD *)(v99 + 16) = v21;
          *(void *)(v99 + 24) = 0LL;
          *(void *)(v99 + 32) = 0LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
      }

      int v100 = *(_DWORD *)(v13 + 144);
      int v162 = result;
      if (*(_DWORD *)(v13 + 148) <= v100)
      {
        uint64_t result = sub_18131044C(v13, 97LL, v22, v21, v97, (uint64_t)a6, a7, a8);
        if (v50 != 6) {
          goto LABEL_149;
        }
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v100 + 1;
        uint64_t v101 = *(void *)(v13 + 136) + 40LL * v100;
        *(_DWORD *)uint64_t v101 = 97;
        *(_DWORD *)(v101 + 4) = v22;
        *(_DWORD *)(v101 + 8) = v21;
        *(_DWORD *)(v101 + 12) = v97;
        *(void *)(v101 + 24) = 0LL;
        *(void *)(v101 + 32) = 0LL;
        *(void *)(v101 + 16) = 0LL;
        if (v50 != 6) {
          goto LABEL_149;
        }
      }

      uint64_t v102 = v165 + 1;
      int v103 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v103)
      {
        uint64_t result = sub_18131044C(v13, 138LL, v102, v97, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v103 + 1;
        uint64_t v104 = *(void *)(v13 + 136) + 40LL * v103;
        *(_DWORD *)uint64_t v104 = 138;
        *(_DWORD *)(v104 + 4) = v102;
        *(_DWORD *)(v104 + 8) = v97;
        *(void *)(v104 + 12) = 0LL;
        *(void *)(v104 + 28) = 0LL;
        *(void *)(v104 + 20) = 0LL;
        *(_DWORD *)(v104 + 36) = 0;
      }

      int v105 = *(_DWORD *)(v13 + 144);
      BOOL v72 = __OFSUB__(v105, 1);
      int v106 = v105 - 1;
      if (v106 < 0 == v72) {
        *(_WORD *)(*(void *)(v13 + 136) + 40LL * v106 + 2) = 16;
      }
LABEL_149:
      if ((int)v52 >= 1)
      {
        unsigned int v107 = v22 - 1;
        uint64_t v108 = (unsigned __int16 *)(v51 + 7);
        uint64_t v109 = v164;
        do
        {
          int v111 = *v108;
          v108 += 12;
          uint64_t v112 = v107 + v111;
          int v113 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) > v113)
          {
            *(_DWORD *)(v13 + 144) = v113 + 1;
            uint64_t v110 = *(void *)(v13 + 136) + 40LL * v113;
            *(_DWORD *)uint64_t v110 = 81;
            *(_DWORD *)(v110 + 4) = v112;
            *(_DWORD *)(v110 + 8) = v109;
            *(void *)(v110 + 12) = 0LL;
            *(void *)(v110 + 28) = 0LL;
            *(void *)(v110 + 20) = 0LL;
            *(_DWORD *)(v110 + 36) = 0;
          }

          else
          {
            uint64_t result = sub_18131044C(v13, 81LL, v112, v109, 0LL, (uint64_t)a6, a7, a8);
          }

          uint64_t v109 = (v109 + 1);
          --v52;
        }

        while (v52);
      }

      int v114 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v114)
      {
        uint64_t v116 = v165;
        uint64_t result = sub_18131044C(v13, 126LL, v165, v160, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v114 + 1;
        uint64_t v115 = *(void *)(v13 + 136) + 40LL * v114;
        uint64_t v116 = v165;
        *(_DWORD *)uint64_t v115 = 126;
        *(_DWORD *)(v115 + 4) = v165;
        *(_DWORD *)(v115 + 8) = v160;
        *(void *)(v115 + 12) = 0LL;
        *(void *)(v115 + 28) = 0LL;
        *(void *)(v115 + 20) = 0LL;
        *(_DWORD *)(v115 + 36) = 0;
      }

      int v117 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v117)
      {
        uint64_t result = sub_18131044C(v13, 97LL, v164, v155, v158, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v117 + 1;
        uint64_t v118 = *(void *)(v13 + 136) + 40LL * v117;
        *(_DWORD *)uint64_t v118 = 97;
        *(_DWORD *)(v118 + 4) = v164;
        *(_DWORD *)(v118 + 8) = v155;
        *(_DWORD *)(v118 + 12) = v158;
        *(void *)(v118 + 24) = 0LL;
        *(void *)(v118 + 32) = 0LL;
        *(void *)(v118 + 16) = 0LL;
      }

      int v119 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v119)
      {
        uint64_t result = sub_181310690(v13, 138LL, v116, v158, v164, v155, a7, a8);
        int v121 = v162;
        if (!v162) {
          goto LABEL_169;
        }
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v119 + 1;
        uint64_t v120 = *(void *)(v13 + 136) + 40LL * v119;
        *(_DWORD *)uint64_t v120 = 64906;
        *(_DWORD *)(v120 + 4) = v116;
        *(_DWORD *)(v120 + 8) = v158;
        *(_DWORD *)(v120 + 12) = v164;
        *(_DWORD *)(v120 + 16) = v155;
        *(void *)(v120 + 24) = 0LL;
        *(void *)(v120 + 32) = 0LL;
        int v121 = v162;
        if (!v162) {
          goto LABEL_169;
        }
      }

      if (*(_BYTE *)(*(void *)v13 + 103LL)) {
        int v122 = &byte_18C550680;
      }
      else {
        int v122 = (char *)(*(void *)(v13 + 136) + 40LL * v121);
      }
      *((_DWORD *)v122 + 2) = *(_DWORD *)(v13 + 144);
LABEL_169:
      if (v158)
      {
        uint64_t v123 = *(unsigned __int8 *)(v11 + 31);
        if (v123 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v123 + 1;
          *(_DWORD *)(v11 + 4 * v123 + 224) = v158;
        }
      }

      if (v154)
      {
        if (!v164) {
          goto LABEL_191;
        }
        uint64_t v124 = *(unsigned __int8 *)(v11 + 31);
        *(_BYTE *)(v11 + 31) = v124 + 1;
        uint64_t v125 = (unsigned int *)(v11 + 4 * v124 + 224);
      }

      else
      {
        *(_DWORD *)(v11 + 40) = v155;
        uint64_t v125 = (unsigned int *)(v11 + 44);
      }

      *uint64_t v125 = v164;
      goto LABEL_191;
    case 9:
    case 13:
      if (v14) {
        return sub_1812B6430(v11, v14, a2, v22, v30, v21, v159, a8);
      }
      uint64_t v58 = v22;
      if (v16 == 13)
      {
        uint64_t v58 = *((unsigned int *)v8 + 1);
        int v59 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) > v59)
        {
          *(_DWORD *)(v13 + 144) = v59 + 1;
          uint64_t v60 = *(void *)(v13 + 136) + 40LL * v59;
          *(_DWORD *)uint64_t v60 = 12;
          *(_DWORD *)(v60 + 4) = v58;
          *(_OWORD *)(v60 + 8) = 0u;
          *(_OWORD *)(v60 + 24) = 0u;
          goto LABEL_192;
        }

        uint64_t v139 = v13;
        uint64_t v140 = 12LL;
        uint64_t v141 = 0LL;
      }

      else
      {
        int v126 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) > v126)
        {
          *(_DWORD *)(v13 + 144) = v126 + 1;
          uint64_t v127 = *(void *)(v13 + 136) + 40LL * v126;
          *(_DWORD *)uint64_t v127 = 84;
          *(_DWORD *)(v127 + 4) = v22;
          *(_DWORD *)(v127 + 8) = v21;
          *(void *)(v127 + 12) = 0LL;
          *(void *)(v127 + 28) = 0LL;
          *(void *)(v127 + 20) = 0LL;
          *(_DWORD *)(v127 + 36) = 0;
          goto LABEL_192;
        }

        uint64_t v139 = v13;
        uint64_t v140 = 84LL;
        uint64_t v141 = v21;
      }

      uint64_t result = sub_18131044C(v139, v140, v58, v141, 0LL, (uint64_t)a6, a7, a8);
      goto LABEL_192;
    case 10:
      if (!v14) {
        goto LABEL_192;
      }
      return sub_1812B6430(v11, v14, a2, v22, v30, v21, v159, a8);
    case 11:
      if (v14) {
        return sub_1812B6430(v11, v14, a2, v22, v30, v21, v159, a8);
      }
      if (*(_BYTE *)(v11 + 31))
      {
        unsigned __int8 v69 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v69;
        uint64_t v70 = *(unsigned int *)(v11 + 4LL * v69 + 224);
      }

      else
      {
        uint64_t v70 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v70;
      }

      uint64_t result = sub_1812B9B68((uint64_t *)v13, 97LL, v22, v21, v70, *((void *)v8 + 3), v21, a8);
      int v142 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v142)
      {
        uint64_t result = sub_181310690(v13, 138LL, v15, v70, v22, v21, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v142 + 1;
        uint64_t v143 = *(void *)(v13 + 136) + 40LL * v142;
        *(_DWORD *)uint64_t v143 = 64906;
        *(_DWORD *)(v143 + 4) = v15;
        *(_DWORD *)(v143 + 8) = v70;
        *(_DWORD *)(v143 + 12) = v22;
        *(_DWORD *)(v143 + 16) = v21;
        *(void *)(v143 + 24) = 0LL;
        *(void *)(v143 + 32) = 0LL;
      }

      if ((_DWORD)v70)
      {
        uint64_t v144 = *(unsigned __int8 *)(v11 + 31);
        if (v144 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v144 + 1;
          *(_DWORD *)(v11 + 4 * v144 + 224) = v70;
        }
      }

      goto LABEL_192;
    case 15:
      if (v14) {
        return sub_1812B6430(v11, v14, a2, v22, v30, v21, v159, a8);
      }
      uint64_t v136 = *((unsigned int *)v8 + 2);
      if (*(_BYTE *)(v11 + 31))
      {
        unsigned __int8 v137 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v137;
        uint64_t v138 = *(unsigned int *)(v11 + 4LL * v137 + 224);
      }

      else
      {
        uint64_t v145 = v11;
        uint64_t v138 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v145 + 56) = v138;
      }

      int v146 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v146)
      {
        sub_18131044C(v13, 50LL, v22, v156, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v146 + 1;
        uint64_t v147 = *(void *)(v13 + 136) + 40LL * v146;
        *(_DWORD *)uint64_t v147 = 50;
        *(_DWORD *)(v147 + 4) = v22;
        *(_DWORD *)(v147 + 8) = v156;
        *(void *)(v147 + 12) = 0LL;
        *(void *)(v147 + 28) = 0LL;
        *(void *)(v147 + 20) = 0LL;
        *(_DWORD *)(v147 + 36) = 0;
      }

      uint64_t v148 = (v136 >> 31) + v22;
      uint64_t v149 = v21 - (v136 >> 31);
      int v150 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v150)
      {
        sub_18131044C(v13, 97LL, v148, v149, v138, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v13 + 144) = v150 + 1;
        uint64_t v151 = *(void *)(v13 + 136) + 40LL * v150;
        *(_DWORD *)uint64_t v151 = 97;
        *(_DWORD *)(v151 + 4) = v148;
        *(_DWORD *)(v151 + 8) = v149;
        *(_DWORD *)(v151 + 12) = v138;
        *(void *)(v151 + 24) = 0LL;
        *(void *)(v151 + 32) = 0LL;
        *(void *)(v151 + 16) = 0LL;
      }

      if ((v136 & 0x80000000) != 0) {
        uint64_t result = sub_181279C3C(v13, 128LL, v15, v138, v22, (uint64_t)a6, a7, a8);
      }
      else {
        uint64_t result = sub_1812DC7B4(v13, 138LL, v15, v138, v22, v136, a7, a8);
      }
      goto LABEL_192;
    default:
      goto LABEL_191;
  }

      free(*v13);
      if (v22 != 1)
      {
        free(v13[1]);
        if (v22 != 2) {
          free(v13[2]);
        }
      }

uint64_t sub_18128CF10( void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v9 = a3;
  uint64_t v10 = a1[2];
  uint64_t v292 = 0LL;
  if (!a2)
  {
LABEL_11:
    int v22 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v22)
    {
      sub_18131044C(v10, 75LL, 0LL, v9, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v22 + 1;
      uint64_t v23 = *(void *)(v10 + 136) + 40LL * v22;
      *(void *)uint64_t v23 = 75LL;
      *(_DWORD *)(v23 + 8) = v9;
      *(void *)(v23 + 12) = 0LL;
      *(void *)(v23 + 28) = 0LL;
      *(void *)(v23 + 20) = 0LL;
      *(_DWORD *)(v23 + 36) = 0;
    }

    return v9;
  }

  uint64_t v11 = a2;
  while (2)
  {
    if (a1[12])
    {
      if ((v11[6] & 0x80) == 0)
      {
        uint64_t v13 = sub_18131A248((uint64_t)a1, v11, v9);
        if ((v13 & 0x80000000) == 0) {
          return v13;
        }
      }
    }

    uint64_t v14 = *v11;
    switch(*v11)
    {
      case 0x13u:
      case 0x72u:
        uint64_t v32 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v292 + 1);
        uint64_t v36 = v32;
        int v37 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) > v37)
        {
          *(_DWORD *)(v10 + 144) = v37 + 1;
          uint64_t v38 = *(void *)(v10 + 136) + 40LL * v37;
          *(_BYTE *)uint64_t v38 = v14;
          *(_WORD *)(v38 + 2) = 0;
          *(_DWORD *)(v38 + 4) = v32;
          *(_DWORD *)(v38 + 8) = v9;
          *(_BYTE *)(v38 + 1) = 0;
          goto LABEL_45;
        }

        uint64_t v56 = v10;
        uint64_t v57 = v14;
        goto LABEL_122;
      case 0x14u:
      case 0x8Au:
        if (*(_BYTE *)(*a1 + 103LL)) {
          return 0LL;
        }
        if ((_DWORD)v14 != 138 || (v11[5] & 0x10) == 0 || **(_DWORD **)(*((void *)v11 + 4) + 32LL) == 1) {
          return sub_1812B3EB0((void **)a1, v11, a3, a4, a5, a6, a7, a8);
        }
        if (!*((_DWORD *)a1 + 12)) {
          sub_1812DC47C( (uint64_t)a1,  "sub-select returns %d columns - expected %d",  a3,  a4,  a5,  a6,  a7,  a8,  **(_DWORD **)(*((void *)v11 + 4) + 32LL));
        }
        goto LABEL_276;
      case 0x24u:
        sub_181319C00((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v9);
        uint64_t v58 = sub_181312C2C(*((_BYTE **)v11 + 1), 0LL);
        sub_1813103F4(v10, 88LL, v9, v58, v59, v60, v61, v62);
        return v9;
      case 0x2Bu:
      case 0x2Cu:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
        uint64_t v24 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v292 + 1);
        uint64_t v25 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 3), &v292);
        int v29 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) > v29)
        {
          *(_DWORD *)(v10 + 144) = v29 + 1;
          uint64_t v30 = *(void *)(v10 + 136) + 40LL * v29;
          *(_BYTE *)uint64_t v30 = v14;
          *(_WORD *)(v30 + 2) = 0;
          *(_DWORD *)(v30 + 4) = v25;
          *(_DWORD *)(v30 + 8) = v24;
          *(_DWORD *)(v30 + 12) = v9;
          *(_BYTE *)(v30 + 1) = 0;
          goto LABEL_16;
        }

        sub_18131044C(v10, v14, v25, v24, v9, v26, v27, v28);
        goto LABEL_276;
      case 0x2Du:
      case 0xABu:
        char v280 = 0;
        if ((_DWORD)v14 == 45) {
          uint64_t v14 = 53LL;
        }
        else {
          uint64_t v14 = 52LL;
        }
        unsigned int v282 = 128;
        int v31 = 1;
        goto LABEL_27;
      case 0x30u:
        sub_18131B410((unsigned int *)a1, (uint64_t)v11, v9, 0LL, 0LL, a6, a7, a8);
        return v9;
      case 0x31u:
        int v63 = *((_DWORD *)a1 + 17);
        uint64_t v64 = (v63 - 1);
        uint64_t v65 = (v63 - 2);
        *((_DWORD *)a1 + 17) = v65;
        sub_1813103F4(v10, 75LL, 0LL, v9, a5, a6, a7, a8);
        sub_1812B26A4(a1, v11, v64, v65);
        sub_1813103F4(v10, 71LL, 1LL, v9, v66, v67, v68, v69);
        sub_18131B3E0(v10, v64);
        sub_1813103F4(v10, 86LL, v9, 0LL, v70, v71, v72, v73);
        sub_18131B3E0(v10, v65);
        return v9;
      case 0x32u:
      case 0x33u:
        int v54 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v54)
        {
          sub_18131044C(v10, 71LL, 1LL, v9, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v10 + 144) = v54 + 1;
          uint64_t v55 = *(void *)(v10 + 136) + 40LL * v54;
          *(void *)uint64_t v55 = 0x100000047LL;
          *(_DWORD *)(v55 + 8) = v9;
          *(void *)(v55 + 12) = 0LL;
          *(void *)(v55 + 28) = 0LL;
          *(void *)(v55 + 20) = 0LL;
          *(_DWORD *)(v55 + 36) = 0;
        }

        uint64_t v147 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v292 + 1);
        int v151 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v151)
        {
          int v151 = sub_18131044C(v10, v14, v147, 0LL, 0LL, v148, v149, v150);
        }

        else
        {
          *(_DWORD *)(v10 + 144) = v151 + 1;
          uint64_t v152 = *(void *)(v10 + 136) + 40LL * v151;
          *(_BYTE *)uint64_t v152 = v14;
          *(_WORD *)(v152 + 2) = 0;
          *(_DWORD *)(v152 + 4) = v147;
          *(_BYTE *)(v152 + 1) = 0;
          *(_OWORD *)(v152 + 8) = 0u;
          *(_OWORD *)(v152 + 24) = 0u;
        }

        int v153 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v153)
        {
          sub_18131044C(v10, 71LL, 0LL, v9, 0LL, v148, v149, v150);
        }

        else
        {
          *(_DWORD *)(v10 + 144) = v153 + 1;
          uint64_t v154 = *(void *)(v10 + 136) + 40LL * v153;
          *(void *)uint64_t v154 = 71LL;
          *(_DWORD *)(v154 + 8) = v9;
          *(void *)(v154 + 12) = 0LL;
          *(void *)(v154 + 28) = 0LL;
          *(void *)(v154 + 20) = 0LL;
          *(_DWORD *)(v154 + 36) = 0;
        }

        int v155 = *(_DWORD *)(v10 + 144);
        if (*(_BYTE *)(*(void *)v10 + 103LL)) {
          goto LABEL_147;
        }
        *(_DWORD *)(*(void *)(v10 + 136) + 40LL * v151 + 8) = v155;
        goto LABEL_276;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
        int v31 = 0;
        unsigned int v282 = 0;
        char v280 = 1;
LABEL_27:
        uint64_t v39 = (unsigned __int8 *)*((void *)v11 + 2);
        int v40 = *v39;
        int v41 = v40;
        if (v40 == 176) {
          int v41 = v39[2];
        }
        if (v41 == 138)
        {
          int v42 = (int **)(*((void *)v39 + 4) + 32LL);
        }

        else
        {
          if (v41 != 177) {
            goto LABEL_34;
          }
          int v42 = (int **)(v39 + 32);
        }

        if (**v42 < 2)
        {
LABEL_34:
          uint64_t v43 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v292 + 1);
          uint64_t v47 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 3), &v292);
          int v48 = *(_DWORD *)(v10 + 144);
          if (*(_DWORD *)(v10 + 148) <= v48)
          {
            sub_18131044C(v10, 71LL, 1LL, v9, 0LL, v44, v45, v46);
          }

          else
          {
            *(_DWORD *)(v10 + 144) = v48 + 1;
            uint64_t v49 = *(void *)(v10 + 136) + 40LL * v48;
            *(void *)uint64_t v49 = 0x100000047LL;
            *(_DWORD *)(v49 + 8) = v9;
            *(void *)(v49 + 12) = 0LL;
            *(void *)(v49 + 28) = 0LL;
            *(void *)(v49 + 20) = 0LL;
            *(_DWORD *)(v49 + 36) = 0;
          }

          sub_1812B0BB0( (uint64_t)a1,  v39,  *((unsigned __int8 **)v11 + 3),  v14,  v43,  v47,  (*(_DWORD *)(v10 + 144) + 2),  v282,  (*((_DWORD *)v11 + 1) >> 10) & 1);
          int v52 = *(_DWORD *)(v10 + 148);
          int v53 = *(_DWORD *)(v10 + 144);
          if (v31)
          {
            if (v52 <= v53)
            {
              uint64_t v56 = v10;
              uint64_t v57 = 71LL;
              uint64_t v36 = 0LL;
LABEL_122:
              sub_18131044C(v56, v57, v36, v9, 0LL, v33, v34, v35);
            }

            else
            {
              *(_DWORD *)(v10 + 144) = v53 + 1;
              uint64_t v38 = *(void *)(v10 + 136) + 40LL * v53;
              *(void *)uint64_t v38 = 71LL;
              *(_DWORD *)(v38 + 8) = v9;
LABEL_45:
              *(void *)(v38 + 12) = 0LL;
              *(void *)(v38 + 28) = 0LL;
              *(void *)(v38 + 20) = 0LL;
              *(_DWORD *)(v38 + 36) = 0;
            }
          }

          else if (v52 <= v53)
          {
            sub_18131044C(v10, 92LL, v43, v9, v47, v33, v34, v35);
          }

          else
          {
            *(_DWORD *)(v10 + 144) = v53 + 1;
            uint64_t v30 = *(void *)(v10 + 136) + 40LL * v53;
            *(_DWORD *)uint64_t v30 = 92;
            *(_DWORD *)(v30 + 4) = v43;
            *(_DWORD *)(v30 + 8) = v9;
            *(_DWORD *)(v30 + 12) = v47;
LABEL_16:
            *(void *)(v30 + 24) = 0LL;
            *(void *)(v30 + 32) = 0LL;
            *(void *)(v30 + 16) = 0LL;
          }

          goto LABEL_276;
        }

        int v50 = *v39;
        if (v40 == 176) {
          int v50 = v39[2];
        }
        if (v50 == 138)
        {
          uint64_t v51 = (int **)(*((void *)v39 + 4) + 32LL);
        }

        else
        {
          if (v50 != 177)
          {
            int v156 = 1;
LABEL_135:
            uint64_t v157 = a1[2];
            unsigned int v158 = (unsigned __int8 *)*((void *)v11 + 3);
            int v159 = *((_DWORD *)a1 + 17) - 1;
            *((_DWORD *)a1 + 17) = v159;
            if (*((_DWORD *)a1 + 12)) {
              goto LABEL_276;
            }
            int v278 = v158;
            int v160 = *v158;
            int v161 = v160;
            if (v160 == 176) {
              int v161 = v278[2];
            }
            if (v161 == 138)
            {
              int v162 = (unsigned __int8 *)*((void *)v278 + 4);
            }

            else
            {
              if (v161 != 177)
              {
                int v171 = 1;
                goto LABEL_164;
              }

              int v162 = v278;
            }

            int v171 = **((_DWORD **)v162 + 4);
LABEL_164:
            if (v156 != v171)
            {
LABEL_175:
              sub_1812DC47C((uint64_t)a1, "row value misused", a3, a4, a5, a6, a7, a8, v268);
              goto LABEL_276;
            }

            unsigned int v172 = *((_DWORD *)v11 + 1);
            else {
              int v173 = v14;
            }
            else {
              int v174 = v173;
            }
            int v285 = v174;
            if (v40 == 138)
            {
              int v270 = sub_1812B3EB0((void **)a1, v39, a3, a4, a5, a6, a7, a8);
              uint64_t v175 = v278;
              int v160 = *v278;
            }

            else
            {
              int v270 = 0;
              uint64_t v175 = v278;
            }

            if (v160 == 138) {
              int v269 = sub_1812B3EB0((void **)a1, v175, a3, a4, a5, a6, a7, a8);
            }
            else {
              int v269 = 0;
            }
            int v273 = (v172 >> 10) & 1;
            sub_1813103F4(v157, 71LL, 1LL, v9, a5, a6, a7, a8);
            uint64_t v178 = 0LL;
            int v179 = 0;
            uint64_t v272 = (v156 - 1);
            uint64_t v271 = (v156 - 2);
            uint64_t v180 = 8LL;
            uint64_t v275 = v39;
            unsigned int v274 = v159;
            unsigned int v276 = v9;
            while (1)
            {
              LODWORD(v287) = 0;
              v293[0] = 0;
              if (v179)
              {
                int v183 = &byte_18C550680;
                if (!*(_BYTE *)(*(void *)v157 + 103LL)) {
                  int v183 = (char *)(*(void *)(v157 + 136) + 40LL * v179);
                }
                *((_DWORD *)v183 + 2) = *(_DWORD *)(v157 + 144);
              }

              int v184 = *v39;
              if (v184 == 138)
              {
                uint64_t v187 = *(unsigned __int8 **)(*(void *)(*((void *)v39 + 4) + 32LL) + v180);
                uint64_t v189 = (v270 + v178);
                v185 = v278;
                goto LABEL_205;
              }

              v185 = v278;
              if (v184 == 177)
              {
                uint64_t v187 = *(unsigned __int8 **)(*((void *)v39 + 4) + v180);
                uint64_t v189 = sub_18131A8A4((uint64_t)a1, v187, &v287);
                goto LABEL_205;
              }

              if (v184 != 176)
              {
                uint64_t v187 = 0LL;
                uint64_t v189 = 0LL;
                goto LABEL_205;
              }

              int v186 = v39[2];
              if (v186 == 177) {
                break;
              }
              uint64_t v187 = v39;
              if (v186 == 138)
              {
                int v188 = *(int **)(*((void *)v39 + 4) + 32LL);
                goto LABEL_202;
              }

LABEL_204:
              uint64_t v189 = (v178 + *((_DWORD *)v39 + 11));
LABEL_205:
              int v190 = *v185;
              switch(v190)
              {
                case 138:
                  uint64_t v194 = v180;
                  uint64_t v192 = *(unsigned __int8 **)(*(void *)(*((void *)v185 + 4) + 32LL) + v180);
                  uint64_t v195 = (v269 + v178);
                  break;
                case 177:
                  uint64_t v194 = v180;
                  uint64_t v192 = *(unsigned __int8 **)(*((void *)v185 + 4) + v180);
                  uint64_t v195 = sub_18131A8A4((uint64_t)a1, v192, v293);
                  break;
                case 176:
                  int v191 = v185[2];
                  if (v191 != 177)
                  {
                    uint64_t v192 = v185;
                    if (v191 == 138)
                    {
                      uint64_t v193 = *(int **)(*((void *)v185 + 4) + 32LL);
LABEL_215:
                      uint64_t v192 = v185;
                      if (*v193 >= 2) {
                        uint64_t v192 = *(unsigned __int8 **)((char *)v193 + v180);
                      }
                    }

                    uint64_t v194 = v180;
                    uint64_t v195 = (v178 + *((_DWORD *)v185 + 11));
                    break;
                  }

                  uint64_t v193 = (int *)*((void *)v185 + 4);
                  goto LABEL_215;
                default:
                  uint64_t v194 = v180;
                  uint64_t v192 = 0LL;
                  uint64_t v195 = 0LL;
                  break;
              }

              int v179 = *(_DWORD *)(v157 + 144);
              sub_1812B0BB0((uint64_t)a1, v187, v192, v285, v189, v195, v274, v282, v273);
              int v199 = v287;
              if ((_DWORD)v287)
              {
                uint64_t v200 = *((unsigned __int8 *)a1 + 31);
                if (v200 <= 7)
                {
                  *((_BYTE *)a1 + 31) = v200 + 1;
                  *((_DWORD *)a1 + v200 + 56) = v199;
                }
              }

              int v201 = v293[0];
              uint64_t v39 = v275;
              if (v293[0])
              {
                uint64_t v202 = *((unsigned __int8 *)a1 + 31);
                if (v202 <= 7)
                {
                  *((_BYTE *)a1 + 31) = v202 + 1;
                  *((_DWORD *)a1 + v202 + 56) = v201;
                }
              }

              if ((v285 == 56 || v285 == 54) && v178 < (int)v272)
              {
                int v179 = *(_DWORD *)(v157 + 144);
                if (*(_DWORD *)(v157 + 148) <= v179)
                {
                  int v179 = sub_18131044C(v157, 58LL, 0LL, 0LL, 0LL, v196, v197, v198);
                }

                else
                {
                  *(_DWORD *)(v157 + 144) = v179 + 1;
                  uint64_t v203 = *(void *)(v157 + 136) + 40LL * v179;
                  *(_BYTE *)uint64_t v203 = 58;
                  *(_OWORD *)(v203 + 1) = 0u;
                  *(_OWORD *)(v203 + 17) = 0u;
                  *(void *)(v203 + 32) = 0LL;
                }
              }

              int v204 = *(_DWORD *)(v157 + 148);
              int v205 = *(_DWORD *)(v157 + 144);
              if ((v280 & 1) != 0)
              {
                if (v204 > v205)
                {
                  *(_DWORD *)(v157 + 144) = v205 + 1;
                  uint64_t v206 = *(void *)(v157 + 136) + 40LL * v205;
                  *(_DWORD *)uint64_t v206 = 92;
                  *(_DWORD *)(v206 + 4) = v189;
                  uint64_t v9 = v276;
                  *(_DWORD *)(v206 + 8) = v276;
                  *(_DWORD *)(v206 + 12) = v195;
                  *(void *)(v206 + 24) = 0LL;
                  *(void *)(v206 + 32) = 0LL;
                  *(void *)(v206 + 16) = 0LL;
                  goto LABEL_238;
                }

                uint64_t v208 = v157;
                uint64_t v209 = 92LL;
                uint64_t v210 = v189;
                uint64_t v9 = v276;
                uint64_t v211 = v276;
                uint64_t v212 = v195;
              }

              else
              {
                if (v204 > v205)
                {
                  *(_DWORD *)(v157 + 144) = v205 + 1;
                  uint64_t v207 = *(void *)(v157 + 136) + 40LL * v205;
                  *(void *)uint64_t v207 = 71LL;
                  uint64_t v9 = v276;
                  *(_DWORD *)(v207 + 8) = v276;
                  *(void *)(v207 + 12) = 0LL;
                  *(void *)(v207 + 28) = 0LL;
                  *(void *)(v207 + 20) = 0LL;
                  *(_DWORD *)(v207 + 36) = 0;
                  goto LABEL_238;
                }

                uint64_t v208 = v157;
                uint64_t v209 = 71LL;
                uint64_t v210 = 0LL;
                uint64_t v9 = v276;
                uint64_t v211 = v276;
                uint64_t v212 = 0LL;
              }

              sub_18131044C(v208, v209, v210, v211, v212, v196, v197, v198);
LABEL_238:
              if (v272 == v178)
              {
                if (*(_BYTE *)(*(void *)v157 + 103LL)) {
                  uint64_t v216 = &byte_18C550680;
                }
                else {
                  uint64_t v216 = (char *)(*(void *)(v157 + 136) + 40LL * v179);
                }
                *((_DWORD *)v216 + 2) = *(_DWORD *)(v157 + 144);
                sub_18131B3E0(v157, v274);
                if (v14 == 52)
                {
                  uint64_t v164 = v157;
                  uint64_t v165 = 19LL;
                  uint64_t v166 = v9;
                  goto LABEL_275;
                }

                goto LABEL_276;
              }

              int v213 = *(_DWORD *)(v157 + 148);
              int v214 = *(_DWORD *)(v157 + 144);
              if (v285 == 53)
              {
                if (v213 <= v214)
                {
                  sub_18131044C(v157, 51LL, v9, v274, 0LL, v196, v197, v198);
                }

                else
                {
                  *(_DWORD *)(v157 + 144) = v214 + 1;
                  uint64_t v215 = *(void *)(v157 + 136) + 40LL * v214;
                  *(_DWORD *)uint64_t v215 = 51;
                  *(_DWORD *)(v215 + 4) = v9;
                  *(_DWORD *)(v215 + 8) = v274;
                  *(void *)(v215 + 12) = 0LL;
                  *(void *)(v215 + 28) = 0LL;
                  *(void *)(v215 + 20) = 0LL;
                  *(_DWORD *)(v215 + 36) = 0;
                }

                int v182 = 53;
              }

              else
              {
                if (v213 > v214)
                {
                  *(_DWORD *)(v157 + 144) = v214 + 1;
                  uint64_t v181 = *(void *)(v157 + 136) + 40LL * v214;
                  *(void *)uint64_t v181 = 9LL;
                  *(_DWORD *)(v181 + 8) = v274;
                  *(void *)(v181 + 12) = 0LL;
                  *(void *)(v181 + 28) = 0LL;
                  *(void *)(v181 + 20) = 0LL;
                  *(_DWORD *)(v181 + 36) = 0;
                }

                else
                {
                  sub_18131044C(v157, 9LL, 0LL, v274, 0LL, v196, v197, v198);
                }

                int v182 = v285;
                if (v271 == v178) {
                  int v182 = v14;
                }
              }

              int v285 = v182;
              ++v178;
              uint64_t v180 = v194 + 24;
            }

            int v188 = (int *)*((void *)v39 + 4);
LABEL_202:
            uint64_t v187 = v39;
            if (*v188 >= 2) {
              uint64_t v187 = *(unsigned __int8 **)((char *)v188 + v180);
            }
            goto LABEL_204;
          }

          uint64_t v51 = (int **)(v39 + 32);
        }

        int v156 = **v51;
        goto LABEL_135;
      case 0x47u:
        uint64_t v74 = a1[22];
        if (!v74 && !*((_BYTE *)a1 + 30))
        {
          sub_1812DC47C((uint64_t)a1, "RAISE() may only be used within a trigger-program", a3, a4, a5, a6, a7, a8, v268);
          return 0LL;
        }

        int v75 = v11[1];
        if (v75 == 4)
        {
          sub_1812B9B68((uint64_t *)v10, 70LL, 0LL, 4LL, 0LL, *((void *)v11 + 1), 0LL, a8);
        }

        else
        {
          uint64_t v76 = (char)v75;
          if (v75 == 2)
          {
            uint64_t v77 = (void *)a1[21];
            if (!v77) {
              uint64_t v77 = a1;
            }
            *((_BYTE *)v77 + 33) = 1;
          }

          if (v74) {
            uint64_t v78 = 1811LL;
          }
          else {
            uint64_t v78 = 1LL;
          }
          sub_18131B934(a1, v78, v76, *((void *)v11 + 1), 0LL, 0LL, a7, a8);
        }

        goto LABEL_276;
      case 0x4Du:
        uint64_t v79 = *((void *)v11 + 9);
        uint64_t v80 = *((unsigned int *)v11 + 12);
        int v81 = *((_DWORD *)v11 + 11) + *((_DWORD *)v11 + 11) * *(__int16 *)(v79 + 54);
        int v82 = sub_18131A4C0(v79, (__int16)v80);
        sub_1813103F4(v10, 157LL, (v82 + v81 + 1), v9, v83, v84, v85, v86);
        if ((v80 & 0x80000000) == 0 && *(_BYTE *)(*(void *)(v79 + 8) + 16 * v80 + 9) == 69) {
          sub_181319BA8(v10, 87LL, v9, v87, v88, v89, v90, v91);
        }
        goto LABEL_276;
      case 0x71u:
        if ((v11[5] & 2) != 0) {
          goto LABEL_3;
        }
        sub_181319C00((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v9);
        uint64_t v20 = v10;
        uint64_t v21 = 179LL;
        goto LABEL_10;
      case 0x75u:
        sub_1812B9B68((uint64_t *)v10, 117LL, 0LL, v9, 0LL, *((void *)v11 + 1), 0LL, a8);
        return v9;
      case 0x99u:
        int v92 = (char *)*((void *)v11 + 1);
        uint64_t v93 = (uint64_t *)v10;
        int v94 = 0;
        goto LABEL_152;
      case 0x9Au:
        int v95 = strlen((const char *)(*((void *)v11 + 1) + 2LL)) & 0x3FFFFFFF;
        unint64_t v96 = sub_181312E18(*(void *)v10, *((void *)v11 + 1) + 2LL, v95 - 1);
        if (v95 - 1 >= 0) {
          int v98 = v95 - 1;
        }
        else {
          int v98 = v95;
        }
        sub_1812B9B68((uint64_t *)v10, 77LL, (v98 >> 1), v9, 0LL, v96, 4294967290LL, v97);
        return v9;
      case 0x9Bu:
        uint64_t v99 = (uint64_t)a1;
        int v100 = v11;
        int v101 = 0;
        goto LABEL_106;
      case 0x9Cu:
        sub_1813103F4(v10, 78LL, *((unsigned int *)v11 + 12), v9, a5, a6, a7, a8);
        if (!*(_BYTE *)(*((void *)v11 + 1) + 1LL)) {
          return v9;
        }
        uint64_t v102 = (_DWORD *)a1[40];
        if (!v102) {
          goto LABEL_82;
        }
        int v103 = 2;
        while (v102[v103] != *((_DWORD *)v11 + 12))
        {
          v103 += v102[v103 + 1];
          if (v103 >= v102[1])
          {
LABEL_82:
            uint64_t v104 = 0LL;
            goto LABEL_269;
          }
        }

        uint64_t v104 = (uint64_t)&v102[v103 + 2];
LABEL_269:
        _DWORD *v102 = 0;
        sub_18131A104((void *)v10, v104, -1);
        return v9;
      case 0x9Du:
        int v105 = (void *)*a1;
        int v106 = (int *)*((void *)v11 + 4);
        int v107 = *v106;
        uint64_t v108 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v108;
        uint64_t v109 = *((void *)v11 + 2);
        if (v109)
        {
          uint64_t v110 = (unsigned __int8 *)sub_18129C928((uint64_t)v105, *((unsigned __int8 **)v11 + 2), 0LL, 0LL);
          uint64_t v116 = (uint64_t)v110;
          if (*((_BYTE *)v105 + 103))
          {
            if (v110) {
              sub_181309110(v105, v110);
            }
            goto LABEL_276;
          }

          int v279 = v106;
          uint64_t v283 = v105;
          uint64_t v167 = v9;
          int v217 = sub_18131B6F4((uint64_t)a1, v110, (_DWORD *)&v292 + 1, v111, v112, v113, v114, v115);
          sub_18131B69C(v116, v217);
          __int128 v287 = 0u;
          __int128 v290 = 0u;
          __int128 v291 = 0u;
          __int128 v289 = 0u;
          LOBYTE(v287) = 53;
          BOOL v281 = (unsigned __int8 *)v116;
          __int128 v288 = (unint64_t)v116;
          uint64_t v168 = &v287;
          HIDWORD(v292) = 0;
        }

        else
        {
          int v279 = v106;
          BOOL v281 = 0LL;
          uint64_t v283 = v105;
          uint64_t v167 = v9;
          uint64_t v168 = 0LL;
        }

        int v218 = v107 - 1;
        char v286 = v107;
        if (v107 >= 2)
        {
          int v219 = 0;
          int v220 = (unsigned __int8 **)(v279 + 8);
          do
          {
            if (v109) {
              *((void *)&v288 + 1) = *(v220 - 3);
            }
            else {
              uint64_t v168 = (__int128 *)*(v220 - 3);
            }
            int v221 = *((_DWORD *)a1 + 17);
            *((_DWORD *)a1 + 17) = v221 - 1;
            sub_1812B0714(a1, v168);
            sub_181319C00((uint64_t)a1, *v220, v167);
            int v222 = *(_DWORD *)(v10 + 144);
            if (*(_DWORD *)(v10 + 148) <= v222)
            {
              sub_18131044C(v10, 9LL, 0LL, v108, 0LL, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v10 + 144) = v222 + 1;
              uint64_t v223 = *(void *)(v10 + 136) + 40LL * v222;
              *(void *)uint64_t v223 = 9LL;
              *(_DWORD *)(v223 + 8) = v108;
              *(void *)(v223 + 12) = 0LL;
              *(void *)(v223 + 28) = 0LL;
              *(void *)(v223 + 20) = 0LL;
              *(_DWORD *)(v223 + 36) = 0;
            }

            uint64_t v224 = *(void *)(v10 + 24);
            int v225 = -v221;
            if (*(_DWORD *)(v224 + 68) + *(_DWORD *)(v224 + 72) >= 0) {
              *(_DWORD *)(*(void *)(v224 + 80) + 4LL * v225) = *(_DWORD *)(v10 + 144);
            }
            else {
              sub_18131E420(v224, v10, v225);
            }
            v220 += 6;
            v219 += 2;
          }

          while (v218 > v219);
        }

        if ((v286 & 1) != 0)
        {
          uint64_t v226 = *(unsigned __int8 **)&v279[6 * v218 + 2];
          uint64_t v9 = v167;
          sub_181319C00((uint64_t)a1, v226, v167);
        }

        else
        {
          uint64_t v9 = v167;
          sub_1813103F4(v10, 75LL, 0LL, v167, a5, a6, a7, a8);
        }

        if (v281) {
          sub_181309110(v283, v281);
        }
        sub_18131B8D8(v10);
        sub_18131B3E0(v10, v108);
        goto LABEL_276;
      case 0xA7u:
        goto LABEL_286;
      case 0xA8u:
        int v117 = (_DWORD *)*((void *)v11 + 8);
        if (v117)
        {
          int v118 = *((__int16 *)v11 + 26);
          if ((v118 & 0x80000000) == 0 && v117[12] > v118) {
            return (v117[3] + v118 + v117[8]);
          }
        }

        sub_1812DC47C((uint64_t)a1, "misuse of aggregate: %#T()", a3, a4, a5, a6, a7, a8, (char)v11);
        goto LABEL_276;
      case 0xA9u:
        uint64_t v119 = *((void *)v11 + 8);
        int v120 = *((__int16 *)v11 + 26);
        if (*(_DWORD *)(v119 + 32) <= v120)
        {
          uint64_t v164 = v10;
          uint64_t v165 = 75LL;
          uint64_t v166 = 0LL;
LABEL_275:
          sub_1813103F4(v164, v165, v166, v9, a5, a6, a7, a8);
LABEL_276:
          int v227 = HIDWORD(v292);
          if (HIDWORD(v292))
          {
            uint64_t v228 = *((unsigned __int8 *)a1 + 31);
            if (v228 <= 7)
            {
              *((_BYTE *)a1 + 31) = v228 + 1;
              *((_DWORD *)a1 + v228 + 56) = v227;
            }
          }

          int v229 = v292;
          if ((_DWORD)v292)
          {
            uint64_t v230 = *((unsigned __int8 *)a1 + 31);
            if (v230 <= 7)
            {
              *((_BYTE *)a1 + 31) = v230 + 1;
              *((_DWORD *)a1 + v230 + 56) = v229;
            }
          }

          return v9;
        }

        if (!*(_BYTE *)v119) {
          return (*(_DWORD *)(v119 + 12) + v120);
        }
        if (*(_BYTE *)(v119 + 1))
        {
          uint64_t v121 = *(void *)(v119 + 24);
          int v122 = *((__int16 *)v11 + 26);
          uint64_t v123 = *(void *)(v121 + 24LL * v120);
          sub_181279C3C( v10,  94LL,  *(unsigned int *)(v119 + 8),  *(__int16 *)(v121 + 24LL * v120 + 22),  v9,  a6,  a7,  a8);
          if (v123
            && (*(__int16 *)(v121 + 24LL * v122 + 20) & 0x80000000) == 0
            && *(_BYTE *)(*(void *)(v123 + 8) + 16LL * *(unsigned __int16 *)(v121 + 24LL * v122 + 20) + 9) == 69)
          {
LABEL_97:
            uint64_t v20 = v10;
            uint64_t v21 = 87LL;
LABEL_10:
            sub_181319BA8(v20, v21, v9, v15, v16, v17, v18, v19);
            return v9;
          }

          return v9;
        }

        if (!*((void *)v11 + 9))
        {
          sub_181279C3C(v10, 94LL, *((unsigned int *)v11 + 11), *((unsigned int *)v11 + 12), v9, a6, a7, a8);
          return v9;
        }

        uint64_t v64 = 0LL;
        goto LABEL_215;
      }
    }

    else
    {
      sub_1812CF36C(97220);
    }

    sub_1812CF36C(97220);
    int v37 = 0LL;
    goto LABEL_175;
  }

  unsigned int v8 = a3[*(int *)(a1 + 48) + 2];
  if (v8)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v8 + 20)) & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_8;
  }

  sub_1812CF36C(97220);
  unsigned int v8 = a3[*(int *)(a1 + 48) + 2];
  if (!v8)
  {
    sub_1812CF36C(91138);
LABEL_101:
    uint64_t v208 = 7;
    goto LABEL_17;
  }

  uint64_t v70 = v91;
  if (!(void)v91) {
    return;
  }
  uint64_t v71 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_210;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v70);
  --qword_18C468B10;
  off_18C4653A8(v70);
  uint64_t v70 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v71 = &xmmword_18C465410;
LABEL_210:
    (*v71)(v70);
  }

LABEL_286:
        if ((v11[4] & 0x20) != 0)
        {
          uint64_t v9 = sub_18128CF10(a1, *((void *)v11 + 2), v9);
          uint64_t v234 = *((unsigned int *)v11 + 12);
          if ((v234 & 0x80000000) != 0 || (uint64_t v235 = *((void *)v11 + 9), (int)v234 >= *(__int16 *)(v235 + 54)))
          {
            LOBYTE(v236) = 68;
          }

          else
          {
            int v236 = *(char *)(*(void *)(v235 + 8) + 16 * v234 + 9);
            if (v236 < 66) {
              return v9;
            }
          }

          sub_1812B9B68( (uint64_t *)v10,  96LL,  v9,  1LL,  0LL,  (uint64_t)&aBcdef[v236 - 66],  0xFFFFFFFFLL,  v233);
          return v9;
        }

        uint64_t v231 = *((unsigned int *)v11 + 11);
        if ((v231 & 0x80000000) == 0) {
          goto LABEL_290;
        }
        int v232 = *((_DWORD *)a1 + 16);
        if ((v232 & 0x80000000) == 0)
        {
          uint64_t v231 = (v232 - 1);
LABEL_290:
          sub_18128E878((uint64_t)a1, *((void *)v11 + 9), *((unsigned int *)v11 + 12), v231, v9, v11[2], a7, a8, a9);
          return v9;
        }

        uint64_t v245 = *((unsigned int *)v11 + 12);
        if ((v245 & 0x80000000) != 0) {
          return ~v232;
        }
        uint64_t v246 = *((void *)v11 + 9);
        uint64_t v247 = *(void *)(v246 + 8) + 16 * v245;
        uint64_t v254 = sub_18131A4C0(v246, (__int16)v245) - v232;
        __int128 v256 = (__int16 *)(v247 + 14);
        __int16 v255 = *(_WORD *)(v247 + 14);
        if ((v255 & 0x60) != 0)
        {
          if ((*(_WORD *)(v247 + 14) & 0x100) != 0)
          {
            sub_1812DC47C( (uint64_t)a1,  "generated column loop on %s",  v248,  v249,  v250,  v251,  v252,  v253,  *(void *)v247);
            return 0LL;
          }

          else
          {
            __int16 v257 = v255 | 0x100;
            *__int128 v256 = v255 | 0x100;
            if ((v255 & 0x80) != 0)
            {
              sub_18131A600((uint64_t)a1, v246, v247, v254, v250, v251, v252, v253);
              __int16 v257 = *v256;
            }

            *__int128 v256 = v257 & 0xFE7F;
            return v254;
          }
        }

        if (*(_BYTE *)(v247 + 9) == 69)
        {
          sub_1813103F4(v10, 81LL, v254, v9, v250, v251, v252, v253);
          goto LABEL_97;
        }

        return v254;
      case 0xAAu:
        BOOL v124 = sub_18131A7C0((uint64_t)v11);
        sub_1813103F4(v10, 71LL, v124, v9, v125, v126, v127, v128);
        return v9;
      case 0xACu:
        if ((v11[7] & 1) != 0) {
          return *(unsigned int *)(*((void *)v11 + 9) + 96LL);
        }
        uint64_t v129 = (void *)*a1;
        unsigned int v130 = *(unsigned __int8 *)(*a1 + 100LL);
        if (*((_BYTE *)a1 + 35))
        {
          WORD2(v289) = 2;
          *((void *)&v287 + 1) = sub_18129C78C;
          *(void *)&__int128 v288 = sub_18131C570;
          DWORD2(v289) = 0;
          sub_18131C57C((uint64_t)&v287, (uint64_t)v11);
          if (WORD2(v289)) {
            return sub_18131A9E0((void **)a1, v11, 0xFFFFFFFFLL);
          }
        }

        int v176 = (unsigned int *)*((void *)v11 + 4);
        if (v176) {
          uint64_t v177 = *v176;
        }
        else {
          uint64_t v177 = 0LL;
        }
        BOOL v243 = sub_18126CC00((uint64_t)v129, *((char **)v11 + 1), v177, v130, 0);
        if (!v243 && (!*((_BYTE *)a1 + 301) || (BOOL v243 = sub_18126CC00((uint64_t)v129, "unknown", v177, v130, 0)) == 0LL)
          || *((void *)v243 + 4))
        {
          sub_1812DC47C((uint64_t)a1, "unknown function: %#T()", v237, v238, v239, v240, v241, v242, (char)v11);
          goto LABEL_276;
        }

        int v244 = *((_DWORD *)v243 + 1);
        if (v176 && (v244 & 0x400000) != 0) {
          return sub_18131AC98((uint64_t)a1, (unsigned __int8 **)v176, *((_DWORD *)v243 + 2), v9, v239, v240, v241, v242);
        }
        if ((v244 & 0x280000) != 0) {
          sub_18131AFDC((uint64_t)a1, (uint64_t)v11, (uint64_t)v243, v238, v239, v240, v241, v242);
        }
        unsigned int v277 = v9;
        if ((int)v177 < 1)
        {
          if (!v176)
          {
            uint64_t v263 = 0LL;
            uint64_t v259 = 0LL;
            if ((*((_BYTE *)v243 + 4) & 0x20) == 0) {
              goto LABEL_356;
            }
            goto LABEL_354;
          }

          uint64_t v260 = 0LL;
        }

        else
        {
          unint64_t v258 = 0LL;
          uint64_t v259 = 0LL;
          uint64_t v260 = 0LL;
          size_t v284 = v176;
          int v261 = (uint64_t *)(v176 + 2);
          do
          {
            if (v258 <= 0x1F)
            {
              else {
                uint64_t v259 = v259;
              }
            }

            if ((*((_BYTE *)v243 + 4) & 0x20) != 0 && !v260) {
              uint64_t v260 = sub_181289D04((uint64_t)a1, (unsigned __int8 *)*v261, v237, v238, v239, v240, v241, v242);
            }
            ++v258;
            v261 += 3;
          }

          while (v177 != v258);
          int v176 = v284;
          if (!v284)
          {
            uint64_t v263 = 0LL;
            uint64_t v177 = v177;
            goto LABEL_343;
          }

          uint64_t v177 = v177;
          if ((_DWORD)v259)
          {
            int v262 = *((_DWORD *)a1 + 14);
            uint64_t v263 = (v262 + 1);
            *((_DWORD *)a1 + 14) = v262 + v177;
            goto LABEL_336;
          }
        }

        uint64_t v263 = sub_18131B020((uint64_t)a1, v177);
        uint64_t v259 = 0LL;
LABEL_336:
        if ((*((_DWORD *)v243 + 1) & 0xC0) != 0)
        {
          uint64_t v264 = (unsigned __int8 *)*((void *)v176 + 1);
          int v265 = *v264;
          if (v265 == 169 || v265 == 167) {
            v264[2] = *((_DWORD *)v243 + 1) & 0xC0;
          }
        }

        sub_18131B090((uint64_t)a1, v176, v263, 0, 2, v240, v241, v242);
LABEL_343:
        if ((int)v177 < 2)
        {
          if ((_DWORD)v177 != 1) {
            goto LABEL_349;
          }
        }

        else if ((v11[5] & 1) != 0)
        {
          uint64_t v266 = (unsigned __int8 **)(v176 + 8);
LABEL_348:
          BOOL v243 = sub_1812BDD00((uint64_t)v129, (__int128 *)v243, v177, *v266);
LABEL_349:
          if ((*((_BYTE *)v243 + 4) & 0x20) == 0) {
            goto LABEL_356;
          }
          if (v260)
          {
LABEL_355:
            sub_1812B9B68((uint64_t *)v10, 85LL, 0LL, 0LL, 0LL, v260, 4294967294LL, v242);
LABEL_356:
            uint64_t v9 = v277;
            sub_18131B2D8(a1, v259, v263, v277, v177, (uint64_t)v243, v11[2]);
            if ((_DWORD)v177 && !(_DWORD)v259)
            {
              if ((_DWORD)v177 == 1)
              {
                if ((_DWORD)v263)
                {
                  uint64_t v267 = *((unsigned __int8 *)a1 + 31);
                  if (v267 <= 7)
                  {
                    *((_BYTE *)a1 + 31) = v267 + 1;
                    *((_DWORD *)a1 + v267 + 56) = v263;
                  }
                }
              }

              else if (*((_DWORD *)a1 + 10) < (int)v177)
              {
                *((_DWORD *)a1 + 10) = v177;
                *((_DWORD *)a1 + 11) = v263;
              }
            }

            return v9;
          }

      ++v238;
      uint64_t v223 = v426;
      if (v241 == v238)
      {
        uint64_t v252 = v433;
        if (v433 < 1)
        {
LABEL_317:
          uint64_t v3 = v430;
          v412 = 0;
          v390 = 0;
          LODWORD(v253) = v252 - 1;
        }

        else
        {
          uint64_t v253 = (v433 - 1);
          uint64_t v3 = v430;
          if (v433 == 1)
          {
            v347 = 0LL;
            goto LABEL_462;
          }

          v347 = v433 & 0xFFFFFFFE;
          uint64_t v351 = v347;
          uint64_t v352 = v454;
          int v353 = v459;
          do
          {
            uint64_t v354 = *(_DWORD *)(*(void *)v353 + 4LL);
            *(v352 - 1) = *(_DWORD *)(*((void *)v353 - 1) + 4LL);
            *uint64_t v352 = v354;
            v353 += 16;
            v352 += 2;
            v351 -= 2LL;
          }

          while (v351);
          if (v347 != v433)
          {
LABEL_462:
            int v355 = v433 - v347;
            v356 = &__src[4 * v347 + 13];
            v357 = (uint64_t *)&v459[8 * v347 - 8];
            do
            {
              int v358 = *v357++;
              *(_DWORD *)v356 = *(_DWORD *)(v358 + 4);
              v356 += 4;
              --v355;
            }

            while (v355);
          }

          if (v433 < 2)
          {
            v412 = 0;
            v390 = 1;
          }

          else
          {
            uint64_t v359 = 0LL;
            uint64_t v360 = 1LL;
            do
            {
              uint64_t v361 = v359 + 1;
              if (v359 + 1 >= (unint64_t)v433)
              {
                uint64_t v363 = v359;
              }

              else
              {
                v362 = v360;
                uint64_t v363 = v359;
                do
                {
                  if (*(_DWORD *)(*(void *)&v459[8 * v362 - 8] + 4) < *(_DWORD *)(*(void *)&v459[8 * v363 - 8] + 4)) {
                    uint64_t v363 = v362;
                  }
                  ++v362;
                }

                while (v433 != v362);
              }

              if (v359 != v363)
              {
                char v364 = *(void *)&v459[8 * v359 - 8];
                char v365 = *(unsigned int *)(v364 + 4);
                BOOL v366 = *(void *)&v459[8 * v363 - 8];
                v367 = *(unsigned int *)(v366 + 4);
                v368 = dword_18C54FA50 / *(_DWORD *)(v439 + 52) + 1;
                uint64_t v369 = *(void *)(v364 + 112);
                uint64_t v370 = *(_WORD *)(v369 + 52);
                unsigned int v371 = *(_WORD *)(*(void *)(v366 + 112) + 52LL);
                *(_WORD *)(v369 + 52) = v371;
                sub_181300D34(v369, v368);
                uint64_t v372 = *(void *)(v366 + 112);
                *(_WORD *)(v372 + 52) = v370;
                sub_181300D34(v372, v365);
                v373 = *(void *)(v364 + 112);
                *(_WORD *)(v373 + 52) = v371;
                sub_181300D34(v373, v367);
                *(_DWORD *)(v364 + 4) = v367;
                uint64_t v253 = (v433 - 1);
                *(_DWORD *)(v366 + 4) = v365;
                uint64_t v223 = v426;
              }

              ++v360;
              uint64_t v359 = v361;
            }

            while (v361 != v253);
            v412 = 1;
            v390 = 1;
            uint64_t v3 = v430;
            uint64_t v252 = v433;
          }
        }

        v417 = v253;
        uint64_t v254 = *(void *)&v459[8 * (int)v253 - 8];
        *v400 = bswap32(*(_DWORD *)(v254 + 4));
        if ((v422 & 8) == 0 && (_DWORD)v34 != v252)
        {
          else {
            __int16 v255 = &v458;
          }
          *(_DWORD *)(*(void *)(v254 + 80) + 8LL) = *(_DWORD *)(*(void *)(v255[v429] + 80) + 8LL);
        }

        v433 = v252;
        if (*(_BYTE *)(v439 + 33))
        {
          __int128 v256 = v440;
          if ((int)v440 >= 1)
          {
            __int16 v257 = 0LL;
            unint64_t v258 = 0;
            uint64_t v259 = 0LL;
            uint64_t v260 = v458;
            LODWORD(v261) = *(unsigned __int16 *)(v458 + 24) + *(unsigned __int8 *)(v458 + 12);
            int v262 = v458;
            do
            {
              if (v257 == v261)
              {
                uint64_t v263 = v258;
                uint64_t v264 = &v463[v263 + 1];
                int v265 = (uint64_t *)&v459[v263 * 8];
                uint64_t v266 = v258 + 1LL;
                do
                {
                  if (v266 >= v433) {
                    uint64_t v267 = v264;
                  }
                  else {
                    uint64_t v267 = v265;
                  }
                  int v262 = *v267;
                  int v261 = (_DWORD)v261
                       + ((_DWORD)v437 == 0)
                  ++v258;
                  ++v264;
                  ++v265;
                  ++v266;
                }

                while (v257 == v261);
              }

              char v268 = *(unsigned int **)(v441 + 8 * v257);
              if (v257 != v457[(int)v259]
                || (v260 = *(void *)&v459[8 * (int)v259], uint64_t v259 = (int)v259 + 1LL, (_DWORD)v437))
              {
                if (v258 >= v433
                  || *(_DWORD *)(v260 + 4) != *(_DWORD *)&__src[4 * v258 + 13]
                  || (unint64_t)v268 < *(void *)(v262 + 80)
                  || (unint64_t)v268 >= *(void *)(v262 + 88))
                {
                  if (!v392)
                  {
                    v423 = *(unsigned int **)(v441 + 8 * v257);
                    int v269 = v260;
                    sub_1812C0570((_DWORD *)v439, bswap32(*v268), 5, *(_DWORD *)(v260 + 4), &v448);
                    char v268 = v423;
                    uint64_t v260 = v269;
                  }

                  v424 = v259;
                  int v270 = *(unsigned __int16 *)(*((void *)&v441 + 1) + 2 * v257);
                  if (!*(_WORD *)(*((void *)&v441 + 1) + 2 * v257))
                  {
                    uint64_t v271 = v268;
                    uint64_t v272 = v260;
                    int v270 = sub_18130ACEC((uint64_t)&v440, v257);
                    char v268 = v271;
                    uint64_t v260 = v272;
                  }

                  uint64_t v11 = v448;
                  if (v270 > *(unsigned __int16 *)(v260 + 16))
                  {
                    if (!v448)
                    {
                      int v273 = v268;
                      unsigned int v274 = v260;
                      (*(void (**)(uint64_t, unsigned int *, void **))(v260 + 128))(v260, v268, v449);
                      uint64_t v260 = v274;
                      if (v450 > v451)
                      {
                        uint64_t v275 = *(void *)(v262 + 88);
                        if (v275 <= (unint64_t)v273 || (unint64_t)v273 + v451 <= v275)
                        {
                          sub_1812C0570( *(_DWORD **)(v274 + 72),  bswap32(*(unsigned int *)((char *)v273 + v452 - 4)),  3,  *(_DWORD *)(v274 + 4),  &v448);
                          uint64_t v260 = v274;
                        }

                        else
                        {
                          unsigned int v276 = sub_1812FBF50(78404);
                          uint64_t v260 = v274;
                          v448 = v276;
                        }
                      }
                    }

                    uint64_t v11 = v448;
                  }

                  if ((_DWORD)v11)
                  {
LABEL_458:
                    v1 = v408;
                    goto LABEL_498;
                  }

                  __int128 v256 = v440;
                  uint64_t v259 = v424;
                  uint64_t v223 = v426;
                }
              }

              ++v257;
            }

            while (v257 < v256);
          }
        }

        if (v412)
        {
          unsigned int v277 = 0;
          *(void *)v427 = *((void *)&v441 + 1);
          int v278 = v441;
          int v279 = v417;
          char v280 = v443;
          BOOL v281 = v457;
          unsigned int v282 = &v458;
          uint64_t v283 = v444;
          int8x16x2_t v394 = v441;
          while (1)
          {
            size_t v284 = v223;
            char v286 = *v281++;
            int v285 = v286;
            __int128 v287 = *(char **)(v278 + 8 * v286);
            __int128 v288 = *v282;
            __int128 v289 = *(unsigned __int16 *)(*(void *)v427 + 2 * v286);
            __int128 v290 = v289 + v404;
            __int128 v291 = (_DWORD *)(v434 + v277);
            if (*(_BYTE *)(*v282 + 8))
            {
              if ((_DWORD)v437)
              {
                uint64_t v292 = *(void *)(v278 + 8LL * --v285);
                v293 = *v282;
                BOOL v294 = v434 + v277;
                (*(void (**)(uint64_t, uint64_t, void **))(v288 + 128))(*v282, v292, v449);
                __int128 v287 = (char *)v294;
                uint64_t v295 = (int8x8_t *)(v294 + 4);
                int v296 = (char)v449[0];
                if (v449[0] > (void *)0x7F)
                {
                  if ((unint64_t)v449[0] >> 14)
                  {
                    int v297 = sub_181308E00(v295, (unint64_t)v449[0]);
                    __int128 v287 = (char *)(v434 + v277);
                  }

                  else
                  {
                    *(_BYTE *)(v294 + 4) = (LODWORD(v449[0]) >> 7) | 0x80;
                    *(_BYTE *)(v294 + 5) = v296 & 0x7F;
                    int v297 = 2;
                  }
                }

                else
                {
                  v295->i8[0] = (__int8)v449[0];
                  int v297 = 1;
                }

                __int128 v288 = v293;
                __int128 v290 = v297 + 4;
                __int128 v291 = 0LL;
                int v278 = v394;
              }

              else
              {
                v287 -= 4;
                if (v289 == 4)
                {
                  int v298 = *v282;
                  uint64_t v299 = (*(uint64_t (**)(uint64_t, char *))(v435 + 120))(v435, v287);
                  __int128 v288 = v298;
                  int v278 = v394;
                  __int128 v291 = (_DWORD *)(v434 + v277);
                  __int128 v290 = v299;
                }
              }
            }

            else
            {
              *(_DWORD *)(*(void *)(v288 + 80) + 8LL) = *(_DWORD *)v287;
            }

            uint64_t v300 = 5LL;
            if (SHIDWORD(v283) <= v285) {
              uint64_t v300 = 6LL;
            }
            if (SHIDWORD(v280) > v285) {
              uint64_t v300 = 3LL;
            }
            if (SDWORD2(v280) > v285) {
              uint64_t v300 = 2LL;
            }
            if (SDWORD1(v280) > v285) {
              uint64_t v300 = 1LL;
            }
            uint64_t v301 = *((void *)v442 + v300);
            uint64_t v303 = sub_1812AFBF0(v435, v284, v287, v290, v291, *(_DWORD *)(v288 + 4));
            uint64_t v3 = v430;
            if ((_DWORD)v303)
            {
              uint64_t v11 = v303;
              goto LABEL_458;
            }

            v277 += v290;
            ++v282;
            --v279;
            uint64_t v223 = v284 + 1;
            if (!v279) {
              goto LABEL_385;
            }
          }

          uint64_t v350 = 85568;
LABEL_495:
          uint64_t v306 = sub_1812FBF50(v350);
LABEL_496:
          uint64_t v11 = v306;
          v1 = v408;
          goto LABEL_497;
        }

                int v103 = sub_1812F2E3C((char *)__buf, 2, 0LL, 0);
                uint64_t v104 = v103;
                if (v103 < 0)
                {
                  if (*__error() == 2)
                  {
LABEL_295:
                    if ((v100 & 0x80000000) == 0)
                    {
                      fsync(v100);
                      off_18C54FCE0(v100);
                    }

                    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, 3LL);
LABEL_298:
                    if ((_DWORD)v5)
                    {
                      int v106 = *(const char **)(a1 + 56);
                      if (!v106) {
                        int v106 = "<dst path null>";
                      }
                      sqlite3_log( 1,  "unixTruncateDatabase() failed with %d for replacing '%s' with flags %x\n",  v5,  v106,  v183);
                    }

                    goto LABEL_302;
                  }
                }

                else if (!ftruncate(v103, 0LL))
                {
LABEL_294:
                  fsync(v104);
                  off_18C54FCE0(v104);
                  goto LABEL_295;
                }

                int v105 = __error();
                if (!(v101 | v97) && *v105)
                {
                  *(_DWORD *)(a1 + 32) = 0;
                  uint64_t v5 = 10LL;
                }

                if (v104 < 0) {
                  goto LABEL_295;
                }
                goto LABEL_294;
              }
            }

            else if (ftruncate(v99, 0LL))
            {
              goto LABEL_279;
            }

            int v101 = 0;
            goto LABEL_286;
          }

          uint64_t v87 = (char *)calloc(1uLL, (v39 + 26));
          strlcpy(v87, v38, (v39 + 26));
          if (v87[v39 - 1] != 47) {
            strlcat(v87, "/", (v39 + 26));
          }
          strlcat(v87, "tmpsqlitetruncatedbXXXXXX", (v39 + 26));
          uint64_t v88 = mkstemp(v87);
          if ((_DWORD)v88 == -1)
          {
            *(_DWORD *)(a1 + 32) = *__error();
            uint64_t v91 = 10LL;
            int v92 = 1;
LABEL_258:
            free(v87);
            goto LABEL_259;
          }

          uint64_t v89 = v88;
          __buf[0] = 0LL;
          uint64_t v90 = sub_181266F84(v87, (uint64_t *)__buf, 0x26u, 0LL);
          if ((_DWORD)v90)
          {
            uint64_t v91 = v90;
            errmsg = 0LL;
          }

          else
          {
            uint64_t v93 = *(_DWORD *)(a1 + 168);
            if (v93 >= 1) {
              sqlite3_key_v2((uint64_t)__buf[0], "main", *(_BYTE **)(a1 + 176), v93);
            }
            errmsg = 0LL;
            if ((v7 & 0x70) != 0
              && (strcpy(&__strerrbuf[44], "pragma page_size=4096"),
                  strcpy(&__strerrbuf[66], "pragma page_size=8192"),
                  strcpy(__strerrbuf, "pragma page_size=1024"),
                  strcpy(&__strerrbuf[22], "pragma page_size=2048"),
                  int v94 = sqlite3_exec( __buf[0],  &__strerrbuf[22 * ((v7 & 0x70) >> 4) - 22],  0LL,  0LL,  &errmsg),  (_DWORD)v94))
            {
              uint64_t v91 = v94;
            }

            else
            {
              int v107 = ((v7 & 0xC) >> 2) - 1;
              strcpy(__strerrbuf, "pragma auto_vacuum=0");
              strcpy(&__strerrbuf[21], "pragma auto_vacuum=1");
              strcpy(&__strerrbuf[42], "pragma auto_vacuum=2");
              if ((v7 & 0xC) == 0) {
                int v107 = 2;
              }
              uint64_t v91 = sqlite3_exec(__buf[0], &__strerrbuf[21 * v107], 0LL, 0LL, &errmsg);
              if (!(_DWORD)v91 && v40) {
                uint64_t v91 = sqlite3_exec(__buf[0], "pragma journal_mode=wal", 0LL, 0LL, &errmsg);
              }
              if (!(_DWORD)v91) {
                goto LABEL_251;
              }
            }
          }

          if (__buf[0]) {
            sqlite3_log(1, "failed to set '%s' on truncated database %s, %d: %s\n");
          }
          else {
            sqlite3_log(1, "failed to open temp database '%s' to reset truncated database %s with flags %x: %d\n");
          }
LABEL_251:
          if (__buf[0])
          {
            *(_DWORD *)__strerrbuf = 0;
            sqlite3_file_control(__buf[0], 0LL, 10, __strerrbuf);
            sub_1812E03C8((uint64_t)__buf[0], 0);
          }

          lseek(v89, 0LL, 0);
          lseek(*(_DWORD *)(a1 + 24), 0LL, 0);
          if (sub_1812F6BC0(v89, *(_DWORD *)(a1 + 24)))
          {
            int v95 = *__error();
            if (v95 == 12)
            {
              uint64_t v91 = 7LL;
            }

            else
            {
              *(_DWORD *)(a1 + 32) = v95;
              uint64_t v91 = 10LL;
            }
          }

          fsync(*(_DWORD *)(a1 + 24));
          close(v89);
          unlink(v87);
          int v92 = v91 != 0;
          goto LABEL_258;
        }

        uint64_t v5 = v41;
        if ((_DWORD)v41 == 26 || (_DWORD)v41 == 11)
        {
          int v42 = *(unsigned __int8 *)(a1 + 28);
          if (v42 > 3
            || (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56LL))(a1, 1LL), !(_DWORD)v5))
          {
            uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56LL))(a1, 4LL);
            if (!(_DWORD)v5)
            {
              uint64_t v43 = 1;
LABEL_156:
              if ((v7 & 1) != 0) {
                int v40 = 1;
              }
              else {
                int v40 = !(*(unsigned int (**)(uint64_t, char *, uint64_t, void))(*(void *)a1 + 16LL))( a1,  __strerrbuf,  20LL,  0LL)
              }
                   && (*(void *)__strerrbuf == 0x66206574694C5153LL
                     ? (uint64_t v58 = *(void *)&__strerrbuf[7] == 0x332074616D726F66LL)
                     : (uint64_t v58 = 0),
                       v58)
                   && __strerrbuf[18] == 2
                   && __strerrbuf[19] == 2;
              goto LABEL_235;
            }
          }

          uint64_t v43 = 1;
        }

        else
        {
          uint64_t v43 = 0;
        }

        LODWORD(v42) = 0;
        if ((v7 & 0x80) == 0 && (_DWORD)v5)
        {
LABEL_302:
          if (v26) {
            *(void *)(a1 + 152) = v26;
          }
          return v5;
        }

        goto LABEL_156;
      }
    }
  }

  uint64_t v5 = 12LL;
  switch(a2)
  {
    case 1:
      uint64_t v5 = 0LL;
      *(_DWORD *)__s1 = *(unsigned __int8 *)(a1 + 28);
      return v5;
    case 2:
    case 3:
      if (a2 != 3)
      {
        if (a2 != 2) {
          return 1LL;
        }
        if (*(_UNKNOWN **)a1 == &unk_189B6D220)
        {
          uint64_t v45 = *(void *)(a1 + 40);
          sub_1812F440C(a1);
          uint64_t v6 = *(const char **)(v45 + 24);
          if (!v6) {
            uint64_t v6 = ":auto: (not held)";
          }
        }

        else
        {
          uint64_t v6 = 0LL;
        }

        uint64_t v5 = 0LL;
        *(void *)__s1 = v6;
        return v5;
      }

      if (!__s1) {
        return *(void *)a1 == (void)&unk_189B6D220;
      }
      if (*(_UNKNOWN **)a1 != &unk_189B6D220) {
        return sub_1812F4AF0(a1, __s1);
      }
      if (strcmp(__s1, ":auto:"))
      {
        uint64_t v56 = *(void *)(a1 + 40);
        uint64_t v57 = *(const char **)(v56 + 24);
        if (!v57 || strncmp(*(const char **)(v56 + 24), __s1, 0x400uLL))
        {
          if (*(_BYTE *)(a1 + 28)) {
            return 5LL;
          }
          if (*__s1 && (!v57 || strncmp(v57, __s1, 0x400uLL)))
          {
            uint64_t v80 = *(void *)(v56 + 16);
            *(void *)(v56 + 16) = 0LL;
            *(_DWORD *)(v56 + 40) = 0;
            if (!v80) {
              goto LABEL_218;
            }
            uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
            if ((_DWORD)v5) {
              return v5;
            }
            int v81 = &off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8 -= (int)off_18C4653B8(v80);
              --qword_18C468B10;
              off_18C4653A8(v80);
              uint64_t v80 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70)
              {
LABEL_218:
                if (v57)
                {
                  int v82 = (void (**)(const char *))&off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8 -= (int)off_18C4653B8(v57);
                    --qword_18C468B10;
                    off_18C4653A8(v57);
                    uint64_t v57 = (const char *)xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70) {
                      goto LABEL_225;
                    }
                    int v82 = (void (**)(const char *))&xmmword_18C465410;
                  }

                  (*v82)(v57);
                }

          if (sub_1813AA198(v13, v106))
          {
            *int v107 = 101;
            unsigned int v8 = (int)v8 - 2LL;
          }

          goto LABEL_439;
        }

        v110[2] = 116;
        uint64_t v114 = 28261;
LABEL_358:
        *(_WORD *)uint64_t v110 = v114;
        unsigned int v8 = (int)v8 - 2LL;
        goto LABEL_439;
      }

      int v179 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v179 <= 0xA && (uint64_t v180 = 1, ((1 << v179) & 0x495) != 0))
      {
        uint64_t v181 = 0;
      }

      else
      {
        uint64_t v181 = 1;
        if ((_DWORD)v8 == 4)
        {
          uint64_t v180 = 0;
        }

        else
        {
          v404 = 1LL;
          while (1)
          {
            v405 = v13[v404];
            v406 = (((v405 - 97) >> 1) | (((_BYTE)v405 - 97) << 7));
            uint64_t v23 = v406 > 0xA;
            v407 = (1 << v406) & 0x495;
            v408 = v23 || v407 == 0;
            if (!v408 || v405 == 121) {
              break;
            }
            if (v106 == ++v404)
            {
              uint64_t v180 = 0;
              uint64_t v181 = v8 - 3;
              goto LABEL_307;
            }
          }

          uint64_t v180 = 1;
          uint64_t v181 = v404;
        }
      }

LABEL_354:
          uint64_t v260 = v129[2];
          goto LABEL_355;
        }

        uint64_t v266 = (unsigned __int8 **)(v176 + 2);
        goto LABEL_348;
      case 0xADu:
        int v100 = (unsigned __int8 *)*((void *)v11 + 2);
        int v132 = *v100;
        if (v132 == 153)
        {
          int v92 = (char *)*((void *)v100 + 1);
          uint64_t v93 = (uint64_t *)v10;
          int v94 = 1;
LABEL_152:
          sub_18131A804(v93, v92, v94, v9);
        }

        else
        {
          if (v132 != 155)
          {
            LOBYTE(v287) = -101;
            *(void *)((char *)&v287 + 4) = 67584LL;
            uint64_t v169 = sub_18131A8A4((uint64_t)a1, (unsigned __int8 *)&v287, (_DWORD *)&v292 + 1);
            uint64_t v143 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), &v292);
            uint64_t v145 = v10;
            uint64_t v146 = 107LL;
            uint64_t v144 = v169;
            goto LABEL_154;
          }

          uint64_t v99 = (uint64_t)a1;
          int v101 = 1;
LABEL_106:
          sub_1812B4484(v99, (uint64_t)v100, v101, v9, a5, a6, a7, a8);
        }

        return v9;
      case 0xAEu:
      case 0xB5u:
LABEL_3:
        uint64_t v11 = (unsigned __int8 *)*((void *)v11 + 2);
        if (v11) {
          continue;
        }
        goto LABEL_11;
      case 0xAFu:
        uint64_t v133 = sub_18131A8A4((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v292 + 1);
        BOOL v134 = sub_18131A7C0(*((void *)v11 + 3));
        sub_1812DC7B4(v10, 91LL, v133, v9, !v134, v134 ^ (v11[2] == 45), v135, v136);
        goto LABEL_276;
      case 0xB0u:
        return *((unsigned int *)v11 + 11);
      case 0xB1u:
        goto LABEL_175;
      case 0xB2u:
        unsigned __int8 v137 = (unsigned __int8 *)*((void *)v11 + 2);
        int v138 = *((_DWORD *)v137 + 11);
        if (!v138 || (unsigned int v139 = v137[2], *((unsigned __int8 *)a1 + 38) > v139))
        {
          int v138 = sub_1812B3EB0((void **)a1, *((unsigned __int8 **)v11 + 2), a3, a4, a5, a6, a7, a8);
          *((_DWORD *)v137 + 11) = v138;
          unsigned int v139 = *((unsigned __int8 *)a1 + 38);
          v137[2] = v139;
        }

        if (*v137 != 176) {
          unsigned int v139 = *v137;
        }
        if (v139 == 138)
        {
          uint64_t v140 = (int **)(*((void *)v137 + 4) + 32LL);
        }

        else
        {
          if (v139 != 177)
          {
            int v170 = 1;
LABEL_158:
            if (*((_DWORD *)v11 + 11) != v170)
            {
              sub_1812DC47C((uint64_t)a1, "%d columns assigned %d values", a3, a4, a5, a6, a7, a8, *((_DWORD *)v11 + 11));
              int v138 = *((_DWORD *)v137 + 11);
            }

            return (*((_DWORD *)v11 + 12) + v138);
          }

          uint64_t v140 = (int **)(v137 + 32);
        }

        int v170 = **v140;
        goto LABEL_158;
      case 0xB3u:
        char v141 = *((_BYTE *)a1 + 35);
        uint64_t v142 = *((void *)v11 + 8);
        if (!v142) {
          goto LABEL_146;
        }
        if (*(_BYTE *)v142)
        {
          if (*(_BYTE *)(v142 + 1))
          {
            uint64_t v143 = *(unsigned int *)(v142 + 8);
            uint64_t v144 = *(__int16 *)(*(void *)(v142 + 24) + 24LL * *((__int16 *)v11 + 26) + 22);
            uint64_t v145 = v10;
            uint64_t v146 = 94LL;
LABEL_154:
            sub_181279C3C(v145, v146, v143, v144, v9, a6, a7, a8);
          }

          else
          {
LABEL_146:
            int v163 = sub_181279C3C(v10, 20LL, *((unsigned int *)v11 + 11), 0LL, v9, a6, a7, a8);
            *((_BYTE *)a1 + 35) = 0;
            sub_181319C00((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v9);
            *((_BYTE *)a1 + 35) = v141;
            int v155 = *(_DWORD *)(v10 + 144);
            if (*(_BYTE *)(*(void *)v10 + 103LL)) {
LABEL_147:
            }
              dword_18C550688 = v155;
            else {
              *(_DWORD *)(*(void *)(v10 + 136) + 40LL * v163 + 8) = v155;
            }
          }
        }

        else
        {
          uint64_t v9 = (*(_DWORD *)(v142 + 12) + *((__int16 *)v11 + 26));
        }

        goto LABEL_276;
      default:
        goto LABEL_11;
    }
  }

uint64_t sub_18128E878( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  int v9 = a6;
  sub_18131C0EC(*(void *)(a1 + 16), a2, a4, a3, a5, a6, a7, a8, a9);
  if (v9)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(_BYTE *)(*(void *)v12 + 103LL)) {
      uint64_t v13 = &byte_18C550680;
    }
    else {
      uint64_t v13 = (char *)(*(void *)(v12 + 136) + 40LL * *(int *)(v12 + 144) - 40);
    }
    int v14 = *v13;
    if (v14 == 94) {
      goto LABEL_8;
    }
    if (v14 == 175)
    {
      LOWORD(v9) = v9 & 1;
LABEL_8:
      *((_WORD *)v13 + 1) = v9;
    }
  }

  return a5;
}

void *sub_18128E90C( uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a1;
  int v9 = *a1;
  uint64_t v10 = (*a1)[2];
  uint64_t v182 = **a1;
  uint64_t v11 = *((unsigned __int8 *)a1 + 64);
  if (!*((_BYTE *)a1 + 64))
  {
    char v176 = 0;
    goto LABEL_216;
  }

  char v185 = 0;
  int v183 = a1[1];
  int v184 = *a1;
  int v180 = *(_DWORD *)(v10 + 144);
  uint64_t v12 = &byte_18C550680;
  do
  {
    uint64_t v13 = v11 - 1;
    uint64_t v187 = &v8[15 * v11 - 15];
    int v14 = (unsigned int *)v187[114];
    if (v14)
    {
      uint64_t v15 = &v8[15 * v13];
      uint64_t v16 = *(void *)(v10 + 24);
      int v17 = ~*((_DWORD *)v15 + 220);
      if (*(_DWORD *)(v16 + 68) + *(_DWORD *)(v16 + 72) < 0) {
        sub_18131E420(v16, v10, v17);
      }
      else {
        *(_DWORD *)(*(void *)(v16 + 80) + 4LL * v17) = *(_DWORD *)(v10 + 144);
      }
      *((_DWORD *)v15 + 220) = 0;
      signed int v18 = *(_DWORD *)(v10 + 148);
      signed int v19 = *(_DWORD *)(v10 + 144);
      v14[4] = v19;
      uint64_t v20 = v14[2];
      uint64_t v21 = v14[3];
      if (v18 <= v19)
      {
        sub_18131044C(v10, 67LL, v20, v21, 1LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v19 + 1;
        uint64_t v22 = *(void *)(v10 + 136) + 40LL * v19;
        *(_DWORD *)uint64_t v22 = 67;
        *(_DWORD *)(v22 + 4) = v20;
        *(_DWORD *)(v22 + 8) = v21;
        *(_DWORD *)(v22 + 12) = 1;
        *(void *)(v22 + 24) = 0LL;
        *(void *)(v22 + 32) = 0LL;
        *(void *)(v22 + 16) = 0LL;
      }

      ++v185;
    }

    uint64_t v23 = &v8[15 * v13];
    uint64_t v24 = v23[119];
    int v186 = (char *)v23 + 921;
    if (*((unsigned __int8 *)v23 + 921) == 184)
    {
      int v25 = (int)v8[15 * v13 + 110];
      if (v25)
      {
        uint64_t v26 = *(void *)(v10 + 24);
        int v27 = ~v25;
        if (*(_DWORD *)(v26 + 68) + *(_DWORD *)(v26 + 72) < 0) {
          sub_18131E420(v26, v10, v27);
        }
        else {
          *(_DWORD *)(*(void *)(v26 + 80) + 4LL * v27) = *(_DWORD *)(v10 + 144);
        }
      }

      goto LABEL_51;
    }

    if (*((_BYTE *)v8 + 67) == 2
      && v11 == *((unsigned __int8 *)v8 + 64)
      && (*((_BYTE *)v24 + 49) & 2) != 0
      && (uint64_t v28 = v24[4], (*(_WORD *)(v28 + 99) & 0x80) != 0)
      && (uint64_t v29 = *((unsigned __int16 *)v24 + 15), *((_WORD *)v24 + 15))
      && *(__int16 *)(*(void *)(v28 + 16) + 2LL * *((unsigned __int16 *)v24 + 15)) >= 36)
    {
      uint64_t v30 = 0LL;
      uint64_t v31 = (*((_DWORD *)v184 + 14) + 1);
      uint64_t v32 = (unsigned int *)&v8[15 * v13 + 108];
      uint64_t v181 = v11;
      do
      {
        uint64_t v38 = *v32;
        uint64_t v39 = (v31 + v30);
        int v40 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) > v40)
        {
          *(_DWORD *)(v10 + 144) = v40 + 1;
          uint64_t v37 = *(void *)(v10 + 136) + 40LL * v40;
          *(_DWORD *)uint64_t v37 = 94;
          *(_DWORD *)(v37 + 4) = v38;
          *(_DWORD *)(v37 + 8) = v30;
          *(_DWORD *)(v37 + 12) = v39;
          *(void *)(v37 + 24) = 0LL;
          *(void *)(v37 + 32) = 0LL;
          *(void *)(v37 + 16) = 0LL;
        }

        else
        {
          int v41 = v8;
          int v42 = v12;
          uint64_t v43 = v24;
          uint64_t v44 = v32;
          sub_18131044C(v10, 94LL, v38, v30, v39, a6, a7, a8);
          uint64_t v32 = v44;
          uint64_t v24 = v43;
          uint64_t v12 = v42;
          unsigned int v8 = v41;
          uint64_t v11 = v181;
        }

        uint64_t v30 = (v30 + 1);
      }

      while ((_DWORD)v29 != (_DWORD)v30);
      *((_DWORD *)v184 + 14) += v29 + 1;
      if (*v186 == 38) {
        uint64_t v134 = 21LL;
      }
      else {
        uint64_t v134 = 24LL;
      }
      uint64_t v135 = *v32;
      int v33 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v33)
      {
        int v33 = sub_181310690(v10, v134, v135, 0LL, v31, v29, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v33 + 1;
        uint64_t v136 = *(void *)(v10 + 136) + 40LL * v33;
        *(_BYTE *)uint64_t v136 = v134;
        *(_WORD *)(v136 + 2) = 0;
        *(_DWORD *)(v136 + 4) = v135;
        *(_DWORD *)(v136 + 8) = 0;
        *(_DWORD *)(v136 + 12) = v31;
        *(_DWORD *)(v136 + 16) = v29;
        *(_BYTE *)(v136 + 1) = -3;
        *(void *)(v136 + 24) = 0LL;
        *(void *)(v136 + 32) = 0LL;
      }

      uint64_t v137 = LODWORD(v8[15 * v13 + 116]);
      int v138 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v138)
      {
        sub_18131044C(v10, 9LL, 1LL, v137, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v138 + 1;
        uint64_t v139 = *(void *)(v10 + 136) + 40LL * v138;
        *(void *)uint64_t v139 = 0x100000009LL;
        *(_DWORD *)(v139 + 8) = v137;
        *(void *)(v139 + 12) = 0LL;
        *(void *)(v139 + 28) = 0LL;
        *(void *)(v139 + 20) = 0LL;
        *(_DWORD *)(v139 + 36) = 0;
      }
    }

    else
    {
      int v33 = 0;
    }

    int v34 = (int)v8[15 * v13 + 110];
    if (v34)
    {
      uint64_t v35 = *(void *)(v10 + 24);
      int v36 = ~v34;
      if (*(_DWORD *)(v35 + 68) + *(_DWORD *)(v35 + 72) < 0) {
        sub_18131E420(v35, v10, v36);
      }
      else {
        *(_DWORD *)(*(void *)(v35 + 80) + 4LL * v36) = *(_DWORD *)(v10 + 144);
      }
    }

    uint64_t v45 = *v186;
    uint64_t v46 = &v8[15 * v13];
    uint64_t v47 = *((unsigned int *)v46 + 231);
    uint64_t v48 = *((unsigned int *)v46 + 232);
    a5 = *((unsigned __int8 *)v46 + 922);
    int v49 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v49)
    {
      sub_18131044C(v10, v45, v47, v48, a5, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v49 + 1;
      uint64_t v50 = *(void *)(v10 + 136) + 40LL * v49;
      *(_BYTE *)uint64_t v50 = v45;
      *(_WORD *)(v50 + 2) = 0;
      *(_DWORD *)(v50 + 4) = v47;
      *(_DWORD *)(v50 + 8) = v48;
      *(_DWORD *)(v50 + 12) = a5;
      *(_BYTE *)(v50 + 1) = 0;
      *(void *)(v50 + 24) = 0LL;
      *(void *)(v50 + 32) = 0LL;
      *(void *)(v50 + 16) = 0LL;
    }

    int v51 = *(_DWORD *)(v10 + 144);
    if (v51 >= 1) {
      *(_WORD *)(*(void *)(v10 + 136) + 40LL * (v51 - 1) + 2) = BYTE3(v8[15 * v13 + 115]);
    }
    int v52 = &v8[15 * v13];
    if (!*((_DWORD *)v52 + 223)) {
      goto LABEL_45;
    }
    uint64_t v53 = *(void *)(v10 + 24);
    int v54 = ~LODWORD(v8[15 * v13 + 112]);
    if (*(_DWORD *)(v53 + 68) + *(_DWORD *)(v53 + 72) < 0) {
      sub_18131E420(v53, v10, v54);
    }
    else {
      *(_DWORD *)(*(void *)(v53 + 80) + 4LL * v54) = v51;
    }
    uint64_t v55 = *((unsigned int *)v52 + 223);
    uint64_t v56 = (*((_DWORD *)v46 + 232) - 1);
    int v57 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) > v57)
    {
      *(_DWORD *)(v10 + 144) = v57 + 1;
      uint64_t v58 = *(void *)(v10 + 136) + 40LL * v57;
      *(_DWORD *)uint64_t v58 = 61;
      *(_DWORD *)(v58 + 4) = v55;
      *(_DWORD *)(v58 + 8) = v56;
      *(void *)(v58 + 12) = 0LL;
      *(void *)(v58 + 28) = 0LL;
      *(void *)(v58 + 20) = 0LL;
      *(_DWORD *)(v58 + 36) = 0;
LABEL_45:
      if (!v33) {
        goto LABEL_51;
      }
      goto LABEL_48;
    }

    sub_18131044C(v10, 61LL, v55, v56, 0LL, a6, a7, a8);
    if (!v33) {
      goto LABEL_51;
    }
LABEL_48:
    uint64_t v59 = (uint64_t)v12;
    if (!*(_BYTE *)(*(void *)v10 + 103LL)) {
      uint64_t v59 = *(void *)(v10 + 136) + 40LL * v33;
    }
    *(_DWORD *)(v59 + 8) = *(_DWORD *)(v10 + 144);
LABEL_51:
    uint64_t v60 = v11;
    uint64_t v61 = v187 + 107;
    if ((*((_BYTE *)v24 + 49) & 8) != 0)
    {
      uint64_t v62 = &v8[15 * v13];
      if (*((int *)v62 + 234) >= 1)
      {
        uint64_t v63 = *(void *)(v10 + 24);
        int v64 = ~LODWORD(v8[15 * v13 + 109]);
        if (*(_DWORD *)(v63 + 68) + *(_DWORD *)(v63 + 72) < 0) {
          sub_18131E420(v63, v10, v64);
        }
        else {
          *(_DWORD *)(*(void *)(v63 + 80) + 4LL * v64) = *(_DWORD *)(v10 + 144);
        }
        int v65 = *((_DWORD *)v62 + 234);
        if (v65 >= 1)
        {
          int v66 = *(_DWORD *)(v10 + 144);
          int v67 = *(unsigned __int8 *)(*(void *)v10 + 103LL);
          int v68 = v65 + 1;
          uint64_t v69 = (unsigned int *)v62[118] + 5 * (v65 - 1) + 2;
          do
          {
            uint64_t v72 = (uint64_t)v12;
            if (!v67) {
              uint64_t v72 = *(void *)(v10 + 136) + 40LL * (int)*(v69 - 1) + 40;
            }
            *(_DWORD *)(v72 + 8) = v66;
            if (*((unsigned __int8 *)v69 + 8) != 184)
            {
              if (v69[1])
              {
                int v73 = v24[6] & 0x40400;
                if (*v61)
                {
                  uint64_t v74 = *(v69 - 2);
                  if (v73 == 0x40000) {
                    int v75 = v66 + 1;
                  }
                  else {
                    int v75 = v66;
                  }
                  uint64_t v76 = (v75 + 2);
                  if (*(_DWORD *)(v10 + 148) <= v66)
                  {
                    sub_18131044C(v10, 25LL, v74, v76, 0LL, a6, a7, a8);
                  }

                  else
                  {
                    *(_DWORD *)(v10 + 144) = v66 + 1;
                    uint64_t v77 = *(void *)(v10 + 136) + 40LL * v66;
                    *(_DWORD *)uint64_t v77 = 25;
                    *(_DWORD *)(v77 + 4) = v74;
                    *(_DWORD *)(v77 + 8) = v76;
                    *(void *)(v77 + 12) = 0LL;
                    *(void *)(v77 + 28) = 0LL;
                    *(void *)(v77 + 20) = 0LL;
                    *(_DWORD *)(v77 + 36) = 0;
                  }
                }

                int v66 = *(_DWORD *)(v10 + 144);
                if (v73 == 0x40000)
                {
                  uint64_t v78 = LODWORD(v8[15 * v13 + 108]);
                  uint64_t v79 = (v66 + 2);
                  a5 = *v69;
                  a6 = v69[1];
                  if (*(_DWORD *)(v10 + 148) <= v66)
                  {
                    sub_181310690(v10, 26LL, v78, v79, a5, a6, a7, a8);
                  }

                  else
                  {
                    *(_DWORD *)(v10 + 144) = v66 + 1;
                    uint64_t v80 = *(void *)(v10 + 136) + 40LL * v66;
                    *(_DWORD *)uint64_t v80 = 64794;
                    *(_DWORD *)(v80 + 4) = v78;
                    *(_DWORD *)(v80 + 8) = v79;
                    *(_DWORD *)(v80 + 12) = a5;
                    *(_DWORD *)(v80 + 16) = a6;
                    *(void *)(v80 + 24) = 0LL;
                    *(void *)(v80 + 32) = 0LL;
                  }

                  int v66 = *(_DWORD *)(v10 + 144);
                  uint64_t v81 = (uint64_t)v12;
                  if (!*(_BYTE *)(*(void *)v10 + 103LL)) {
                    uint64_t v81 = *(void *)(v10 + 136) + 40LL * (int)*(v69 - 1) + 40;
                  }
                  *(_DWORD *)(v81 + 8) = v66;
                }
              }

              uint64_t v82 = *((unsigned __int8 *)v69 + 8);
              uint64_t v83 = *(v69 - 2);
              uint64_t v84 = *(v69 - 1);
              if (*(_DWORD *)(v10 + 148) > v66)
              {
                *(_DWORD *)(v10 + 144) = v66 + 1;
                uint64_t v70 = *(void *)(v10 + 136) + 40LL * v66;
                *(_BYTE *)uint64_t v70 = v82;
                *(_WORD *)(v70 + 2) = 0;
                *(_DWORD *)(v70 + 4) = v83;
                *(_DWORD *)(v70 + 8) = v84;
                *(_BYTE *)(v70 + 1) = 0;
                *(void *)(v70 + 12) = 0LL;
                *(void *)(v70 + 28) = 0LL;
                *(void *)(v70 + 20) = 0LL;
                *(_DWORD *)(v70 + 36) = 0;
              }

              else
              {
                sub_18131044C(v10, v82, v83, v84, 0LL, a6, a7, a8);
              }
            }

            int v66 = *(_DWORD *)(v10 + 144);
            int v67 = *(unsigned __int8 *)(*(void *)v10 + 103LL);
            uint64_t v71 = (uint64_t)v12;
            if (!*(_BYTE *)(*(void *)v10 + 103LL)) {
              uint64_t v71 = *(void *)(v10 + 136) + 40LL * (int)*(v69 - 1) - 40;
            }
            *(_DWORD *)(v71 + 8) = v66;
            --v68;
            v69 -= 5;
          }

          while (v68 > 1);
        }
      }
    }

    uint64_t v85 = *(void *)(v10 + 24);
    int v86 = ~HIDWORD(v8[15 * v13 + 108]);
    if (*(_DWORD *)(v85 + 68) + *(_DWORD *)(v85 + 72) < 0) {
      sub_18131E420(v85, v10, v86);
    }
    else {
      *(_DWORD *)(*(void *)(v85 + 80) + 4LL * v86) = *(_DWORD *)(v10 + 144);
    }
    uint64_t v87 = v60;
    uint64_t v88 = v187[114];
    if (v88)
    {
      uint64_t v89 = *((unsigned int *)v88 + 2);
      int v90 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v90)
      {
        sub_18131044C(v10, 67LL, v89, 0LL, 1LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v90 + 1;
        uint64_t v91 = *(void *)(v10 + 136) + 40LL * v90;
        *(_DWORD *)uint64_t v91 = 67;
        *(_DWORD *)(v91 + 4) = v89;
        *(void *)(v91 + 8) = 0x100000000LL;
        *(void *)(v91 + 24) = 0LL;
        *(void *)(v91 + 32) = 0LL;
        *(void *)(v91 + 16) = 0LL;
      }
    }

    int v92 = &v8[15 * v13];
    uint64_t v93 = *((unsigned int *)v92 + 219);
    if ((_DWORD)v93)
    {
      int v94 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v94)
      {
        sub_18131044C(v10, 9LL, 0LL, v93, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v10 + 144) = v94 + 1;
        uint64_t v95 = *(void *)(v10 + 136) + 40LL * v94;
        *(void *)uint64_t v95 = 9LL;
        *(_DWORD *)(v95 + 8) = v93;
        *(void *)(v95 + 12) = 0LL;
        *(void *)(v95 + 28) = 0LL;
        *(void *)(v95 + 20) = 0LL;
        *(_DWORD *)(v95 + 36) = 0;
      }

      int v96 = *(_DWORD *)(v10 + 144);
      if (*(_BYTE *)(*(void *)v10 + 103LL))
      {
        *((_DWORD *)v12 + 2) = v96;
        uint64_t v97 = v12;
      }

      else
      {
        uint64_t v98 = *(void *)(v10 + 136) + 40LL * *((int *)v92 + 219);
        *(_DWORD *)(v98 + 8) = v96;
        uint64_t v97 = (char *)(v98 - 80);
      }

      *((_DWORD *)v97 + 2) = v96;
    }

    uint64_t v99 = LODWORD(v8[15 * v13 + 113]);
    if ((_DWORD)v99)
    {
      uint64_t v100 = HIDWORD(v8[15 * v13 + 112]) >> 1;
      int v101 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v101)
      {
        sub_18131044C(v10, 61LL, v100, v99, 0LL, a6, a7, a8);
        uint64_t v103 = *v61;
        if (!(_DWORD)v103) {
          goto LABEL_4;
        }
        goto LABEL_103;
      }

      *(_DWORD *)(v10 + 144) = v101 + 1;
      uint64_t v102 = *(void *)(v10 + 136) + 40LL * v101;
      *(_DWORD *)uint64_t v102 = 61;
      *(_DWORD *)(v102 + 4) = v100;
      *(_DWORD *)(v102 + 8) = v99;
      *(void *)(v102 + 12) = 0LL;
      *(void *)(v102 + 28) = 0LL;
      *(void *)(v102 + 20) = 0LL;
      *(_DWORD *)(v102 + 36) = 0;
    }

    uint64_t v103 = *v61;
    if (!(_DWORD)v103) {
      goto LABEL_4;
    }
LABEL_103:
    int v104 = *((_DWORD *)v24 + 12);
    int v105 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v105)
    {
      int v105 = sub_18131044C(v10, 59LL, v103, 0LL, 0LL, a6, a7, a8);
      if ((v104 & 0x40) != 0)
      {
LABEL_105:
        if ((v104 & 0x200) != 0) {
          goto LABEL_114;
        }
        goto LABEL_106;
      }
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v105 + 1;
      uint64_t v106 = *(void *)(v10 + 136) + 40LL * v105;
      *(_DWORD *)uint64_t v106 = 59;
      *(_DWORD *)(v106 + 4) = v103;
      *(_OWORD *)(v106 + 8) = 0u;
      *(_OWORD *)(v106 + 24) = 0u;
      if ((v104 & 0x40) != 0) {
        goto LABEL_105;
      }
    }

    uint64_t v107 = HIDWORD(v8[15 * v13 + 107]);
    int v108 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v108)
    {
      sub_18131044C(v10, 136LL, v107, 0LL, 0LL, a6, a7, a8);
      if ((v104 & 0x200) != 0)
      {
LABEL_114:
        if ((v104 & 0x2000) != 0)
        {
LABEL_115:
          uint64_t v110 = (uint64_t)v8[15 * v13 + 117];
          uint64_t v111 = *(void *)(v110 + 48);
          if (v111)
          {
            uint64_t v112 = (uint64_t *)(*(void *)(v182 + 32) + 24LL);
            LODWORD(v113) = -1;
            do
            {
              uint64_t v114 = *v112;
              v112 += 4;
              uint64_t v113 = (v113 + 1);
            }

            while (v114 != v111);
          }

          else
          {
            uint64_t v113 = 4294934528LL;
          }

          uint64_t v115 = LODWORD(v8[15 * v13 + 108]);
          uint64_t v116 = *(unsigned int *)(v110 + 88);
          int v117 = *(_DWORD *)(v10 + 144);
          if (*(_DWORD *)(v10 + 148) <= v117)
          {
            sub_18131044C(v10, 101LL, v115, v116, v113, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v10 + 144) = v117 + 1;
            uint64_t v118 = *(void *)(v10 + 136) + 40LL * v117;
            *(_DWORD *)uint64_t v118 = 101;
            *(_DWORD *)(v118 + 4) = v115;
            *(_DWORD *)(v118 + 8) = v116;
            *(_DWORD *)(v118 + 12) = v113;
            *(void *)(v118 + 24) = 0LL;
            *(void *)(v118 + 32) = 0LL;
            *(void *)(v118 + 16) = 0LL;
          }

          uint64_t v119 = v184[2];
          uint64_t v120 = sub_181319FB0(v184, v110);
          if (v120)
          {
            if (*(_BYTE *)(*(void *)v119 + 103LL))
            {
              if (!*(void *)(*(void *)v119 + 816LL) && (*(_DWORD *)v120)-- == 1) {
                sub_1813014B0(*(void **)(v120 + 16), (void *)v120);
              }
            }

            else
            {
              uint64_t v122 = *(void *)(v119 + 136) + 40LL * *(int *)(v119 + 144);
              *(_BYTE *)(v122 - 39) = -8;
              *(void *)(v122 - 24) = v120;
            }
          }
        }

        uint64_t v123 = LODWORD(v8[15 * v13 + 108]);
        int v124 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v124)
        {
          sub_18131044C(v10, 136LL, v123, 0LL, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v10 + 144) = v124 + 1;
          uint64_t v125 = *(void *)(v10 + 136) + 40LL * v124;
          *(_DWORD *)uint64_t v125 = 136;
          *(_DWORD *)(v125 + 4) = v123;
          *(_OWORD *)(v125 + 8) = 0u;
          *(_OWORD *)(v125 + 24) = 0u;
        }

        goto LABEL_133;
      }
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v108 + 1;
      uint64_t v109 = *(void *)(v10 + 136) + 40LL * v108;
      *(_DWORD *)uint64_t v109 = 136;
      *(_DWORD *)(v109 + 4) = v107;
      *(_OWORD *)(v109 + 8) = 0u;
      *(_OWORD *)(v109 + 24) = 0u;
      if ((v104 & 0x200) != 0) {
        goto LABEL_114;
      }
    }

void *sub_18128F8B0(void *a1, void *a2)
{
  for (uint64_t i = a2[10]; i; uint64_t i = a2[10])
  {
    uint64_t v5 = *(void **)(i + 64);
    a2[10] = *(void *)(i + 72);
    if (v5 != (void *)(i + 80))
    {
      sub_1812F20DC(a1, v5);
      *(void *)(i + 64) = i + 80;
      *(_WORD *)(i + 56) = 3;
    }

    sub_1813365A4(a1, i);
    *(_WORD *)(i + 52) = 0;
    *(_DWORD *)(i + 48) = 0;
    sub_1813014B0(a1, (void *)i);
  }

  uint64_t v6 = (void *)a2[11];
  if (v6)
  {
    do
    {
      int v7 = (void *)*v6;
      sub_1813014B0(a1, v6);
      a2[11] = v7;
      uint64_t v6 = v7;
    }

    while (v7);
  }

  return sub_1813014B0(a1, a2);
}

uint64_t sub_18128F970(uint64_t a1, int a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(_WORD *)(a1 + 262))
  {
    unint64_t v5 = *(void *)(a1 + 152);
    if (v5)
    {
      unint64_t v6 = v5 + 320LL * *(unsigned __int16 *)(a1 + 262);
      int v7 = *(void **)(v5 + 24);
      if (!v7[102])
      {
        while (1)
        {
          if ((*(_WORD *)(v5 + 20) & 0x9000) != 0)
          {
            sub_181303838(v5);
          }

          else
          {
            if (!*(_DWORD *)(v5 + 32)) {
              goto LABEL_11;
            }
            sub_1813014B0(v7, *(void **)(v5 + 40));
            *(_DWORD *)(v5 + 32) = 0;
          }

          *(_WORD *)(v5 + 20) = 0;
LABEL_11:
          v5 += 64LL;
          if (v5 >= v6) {
            goto LABEL_15;
          }
        }
      }

      do
      {
        if (*(_DWORD *)(v5 + 32))
        {
          unsigned int v8 = *(void **)(v5 + 40);
          if (v8) {
            sub_1812F20DC(v7, v8);
          }
        }

        v5 += 64LL;
      }

      while (v5 < v6);
LABEL_15:
      int v9 = *(void **)(a1 + 152);
      if (v9) {
        sub_1812F20DC(v4, v9);
      }
    }
  }

  uint64_t v10 = (5 * a2);
  *(_WORD *)(a1 + 262) = a2;
  *(_WORD *)(a1 + 260) = a2;
  uint64_t result = sub_1812F2264((uint64_t)v4, (uint64_t)(int)v10 << 6);
  *(void *)(a1 + 152) = result;
  if (a2 >= 1)
  {
    if (result)
    {
      int v12 = 5 * a2;
      int v12 = v10 - (v10 & 0xFFFFFFFE);
      uint64_t v13 = result + 84;
      uint64_t v14 = v10 & 0xFFFFFFFE;
      do
      {
        *(_WORD *)(v13 - 64) = 1;
        *(_WORD *)uint64_t v13 = 1;
        *(void *)(v13 - 60) = v4;
        *(void *)(v13 + 4) = v4;
        *(_DWORD *)(v13 - 52) = 0;
        *(_DWORD *)(v13 + 12) = 0;
        v13 += 128LL;
        v14 -= 2LL;
      }

      while (v14);
      result += (unint64_t)(v10 & 0xFFFFFFFE) << 6;
      if ((v10 & 0xFFFFFFFE) != v10)
      {
LABEL_23:
        unsigned int v15 = v12 + 1;
        uint64_t v16 = (_DWORD *)(result + 32);
        do
        {
          *((_WORD *)v16 - 6) = 1;
          *((void *)v16 - 1) = v4;
          *uint64_t v16 = 0;
          v16 += 16;
          --v15;
        }

        while (v15 > 1);
      }
    }
  }

  return result;
}

uint64_t sub_18128FAF0(uint64_t a1, signed int a2, int a3)
{
  int v3 = a3;
  int v6 = *(_DWORD *)(a1 + 32);
  if (!a3 || v6 < 1)
  {
    if (v6 < 1) {
      goto LABEL_14;
    }
    unsigned int v8 = *(void **)(a1 + 40);
LABEL_13:
    sub_1812F20DC(*(void **)(a1 + 24), v8);
LABEL_14:
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11)
    {
      unint64_t v10 = sub_1812F2264(v11, a2);
      *(void *)(a1 + 40) = v10;
      if (v10) {
        goto LABEL_16;
      }
    }

    else
    {
      unint64_t v10 = sub_18126F0AC(a2);
      *(void *)(a1 + 40) = v10;
      if (v10) {
        goto LABEL_16;
      }
    }

void *sub_18128FDA0(void *result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    unint64_t v5 = result;
    do
    {
      uint64_t v6 = *(void *)(v4 + 80);
      int v7 = *(void **)(v4 + 32);
      if (v7) {
        sub_181311F48(v5, v7);
      }
      uint64_t result = sub_18128FF4C(v5, *(void **)(v4 + 40));
      unsigned int v8 = *(unsigned __int8 **)(v4 + 48);
      if (v8) {
        uint64_t result = sub_181309110(v5, v8);
      }
      uint64_t v9 = *(void **)(v4 + 56);
      if (v9) {
        uint64_t result = sub_181311F48(v5, v9);
      }
      unint64_t v10 = *(unsigned __int8 **)(v4 + 64);
      if (v10) {
        uint64_t result = sub_181309110(v5, v10);
      }
      uint64_t v11 = *(void **)(v4 + 72);
      if (v11) {
        uint64_t result = sub_181311F48(v5, v11);
      }
      uint64_t v12 = *(unsigned __int8 **)(v4 + 96);
      if (v12) {
        uint64_t result = sub_181309110(v5, v12);
      }
      int v13 = *(void **)(v4 + 104);
      if (v13)
      {
        if (*(int *)v13 >= 1)
        {
          uint64_t v14 = 0LL;
          uint64_t v15 = v13 + 4;
          do
          {
            uint64_t v16 = (void *)*(v15 - 1);
            if (v16) {
              sub_181311F48(v5, v16);
            }
            if (*v15) {
              sub_18128FDA0(v5, *v15, 1LL);
            }
            uint64_t v17 = (void *)*(v15 - 2);
            if (v17) {
              sub_1812F20DC(v5, v17);
            }
            ++v14;
            v15 += 6;
          }

          while (v14 < *(int *)v13);
        }

        uint64_t result = sub_1812F20DC(v5, v13);
      }

      uint64_t v18 = *(void **)(v4 + 120);
      if (v18)
      {
        do
        {
          signed int v19 = (void *)v18[8];
          uint64_t result = sub_1813091C8(v5, v18);
          uint64_t v18 = v19;
        }

        while (v19);
      }

      uint64_t v20 = *(void *)(v4 + 112);
      while (v20)
      {
        uint64_t v21 = *(void **)(v20 + 56);
        if (v21)
        {
          *uint64_t v21 = *(void *)(v20 + 64);
          uint64_t v22 = *(void *)(v20 + 64);
          if (v22) {
            *(void *)(v22 + 56) = *(void *)(v20 + 56);
          }
          *(void *)(v20 + 56) = 0LL;
          uint64_t v20 = *(void *)(v4 + 112);
        }
      }

      if (a3) {
        uint64_t result = sub_1813014B0(v5, (void *)v4);
      }
      a3 = 1;
      uint64_t v4 = v6;
    }

    while (v6);
  }

  return result;
}

void *sub_18128FF40(void *a1, void *a2)
{
  if (a2) {
    return sub_181311F48(a1, a2);
  }
  return a1;
}

void *sub_18128FF4C(void *result, void *a2)
{
  if (a2)
  {
    int v3 = result;
    if (*(int *)a2 >= 1)
    {
      int v4 = 0;
      unint64_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = (void *)v5[1];
        if (v6) {
          sub_1813014B0(v3, v6);
        }
        int v7 = (void *)v5[2];
        if (v7) {
          sub_1813014B0(v3, v7);
        }
        unsigned int v8 = (void *)v5[3];
        if (v8) {
          sub_1813014B0(v3, v8);
        }
        __int16 v9 = *(_WORD *)((char *)v5 + 61);
        if ((v9 & 2) != 0)
        {
          unint64_t v10 = (void *)v5[11];
          if (v10)
          {
            sub_1812F20DC(v3, v10);
            __int16 v9 = *(_WORD *)((char *)v5 + 61);
          }
        }

        if ((v9 & 4) != 0)
        {
          uint64_t v11 = (void *)v5[11];
          if (v11) {
            sub_181311F48(v3, v11);
          }
        }

        uint64_t v12 = v5[4];
        if (v12)
        {
          if (v3[102] || (int v13 = *(_DWORD *)(v12 + 44) - 1, (*(_DWORD *)(v12 + 44) = v13) == 0)) {
            sub_181311A80(v3, (void *)v12);
          }
        }

        uint64_t v14 = v5[5];
        if (v14) {
          sub_18128FDA0(v3, v14, 1LL);
        }
        uint64_t v15 = (void *)v5[9];
        if ((*(_WORD *)((_BYTE *)v5 + 61) & 0x400) != 0)
        {
          if (v15)
          {
            int v16 = *(_DWORD *)v15;
            if (*(int *)v15 >= 1)
            {
              uint64_t v17 = 0LL;
              uint64_t v18 = 1LL;
              do
              {
                signed int v19 = (void *)v15[v18];
                if (v19)
                {
                  sub_1812F20DC(v3, v19);
                  int v16 = *(_DWORD *)v15;
                }

                ++v17;
                v18 += 2LL;
              }

              while (v17 < v16);
            }

            sub_1813014B0(v3, v15);
          }
        }

        else if (v15)
        {
          sub_181309110(v3, (unsigned __int8 *)v5[9]);
        }

        ++v4;
        v5 += 13;
      }

      while (v4 < *(_DWORD *)a2);
    }

    return sub_1813014B0(v3, a2);
  }

  return result;
}

void *sub_1812900D0(void *result, void *a2)
{
  if (a2) {
    return sub_1812F20DC(result, a2);
  }
  return result;
}

int sqlite3_step(sqlite3_stmt *a1)
{
  if (!a1)
  {
    sqlite3_log(21, "API called with NULL prepared statement");
    return sub_1812CF36C(97882);
  }

  if (!*(void *)a1)
  {
    sqlite3_log(21, "API called with finalized prepared statement");
    return sub_1812CF36C(97882);
  }

  uint64_t v99 = *(void *)a1;
  uint64_t v12 = *(void *)(*(void *)a1 + 24LL);
  unint64_t v13 = 0x18C465000uLL;
  if (v12) {
    xmmword_18C465400(v12);
  }
  int v100 = 0;
  unint64_t v14 = 0x18C465000uLL;
  while (1)
  {
    uint64_t v15 = *(void *)a1;
    int v16 = *((unsigned __int8 *)a1 + 267);
    if (v16 == 2) {
      goto LABEL_67;
    }
    while (v16 == 3)
    {
      if (*((unsigned __int8 *)a1 + 52) - 5 > 1)
      {
        int v19 = sub_1812CF36C(97797);
        goto LABEL_191;
      }

      uint64_t v17 = *(void *)a1;
      if (*(void *)(*(void *)a1 + 24LL)) {
        (*(void (**)(void))(v13 + 1024))();
      }
      sub_1812D6A08(v17, (uint64_t)a1);
      uint64_t v1 = sub_18127A3A0((void **)a1);
      *((_BYTE *)a1 + 267) = 1;
      *((_DWORD *)a1 + 13) = 0;
      *((_WORD *)a1 + 132) = -254;
      *((void *)a1 + 7) = 0LL;
      *(void *)((char *)a1 + 44) = 0xFFFFFFFF00000001LL;
      *((_DWORD *)a1 + 16) = 0;
      *((void *)a1 + 10) = 0LL;
      if ((_DWORD)v1 || *(_BYTE *)(v17 + 103)) {
        sub_1813037C4(v17, v1);
      }
      uint64_t v18 = *(void *)(v17 + 24);
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(v14 + 1040))(v18, v1);
      }
      int v16 = *((unsigned __int8 *)a1 + 267);
    }

    if (v16 != 1) {
      goto LABEL_67;
    }
    if ((*((_WORD *)a1 + 134) & 3) == 0)
    {
      if (*(_DWORD *)(v15 + 208))
      {
        if (*(_BYTE *)(v15 + 197)) {
          goto LABEL_55;
        }
      }

      else
      {
        *(_DWORD *)(v15 + 424) = 0;
        if (*(_BYTE *)(v15 + 197)) {
          goto LABEL_55;
        }
      }

      if (*((void *)a1 + 40) && (dword_18C465544 & 1) != 0)
      {
        *((void *)a1 + 24) = mach_continuous_time();
        *((_DWORD *)a1 + 64) = 0;
        uint64_t v20 = *(unsigned int *)(v15 + 40);
        if ((int)v20 < 1)
        {
          int v21 = 0;
        }

        else
        {
          int v21 = 0;
          uint64_t v22 = *(void *)(v15 + 32) + 8LL;
          do
          {
            if (*(void *)v22) {
              v21 += *(_DWORD *)(**(void **)(*(void *)v22 + 8LL) + 248LL);
            }
            v22 += 32LL;
            --v20;
          }

          while (v20);
        }

        *((_DWORD *)a1 + 60) = v21;
        uint64_t v23 = *(unsigned int *)(v15 + 40);
        if ((int)v23 < 1)
        {
          int v24 = 0;
        }

        else
        {
          int v24 = 0;
          uint64_t v25 = *(void *)(v15 + 32) + 8LL;
          do
          {
            if (*(void *)v25) {
              v24 += *(_DWORD *)(**(void **)(*(void *)v25 + 8LL) + 252LL);
            }
            v25 += 32LL;
            --v23;
          }

          while (v23);
        }

        *((_DWORD *)a1 + 61) = v24;
        uint64_t v26 = *(unsigned int *)(v15 + 40);
        if ((int)v26 < 1)
        {
          int v27 = 0;
        }

        else
        {
          int v27 = 0;
          uint64_t v28 = *(void *)(v15 + 32) + 8LL;
          do
          {
            if (*(void *)v28) {
              v27 += *(_DWORD *)(**(void **)(*(void *)v28 + 8LL) + 256LL);
            }
            v28 += 32LL;
            --v26;
          }

          while (v26);
        }

        *((_DWORD *)a1 + 62) = v27;
        uint64_t v29 = *(unsigned int *)(v15 + 40);
        if ((int)v29 < 1)
        {
          int v30 = 0;
        }

        else
        {
          int v30 = 0;
          uint64_t v31 = *(void *)(v15 + 32) + 8LL;
          do
          {
            if (*(void *)v31) {
              v30 += *(_DWORD *)(**(void **)(*(void *)v31 + 8LL) + 260LL);
            }
            v31 += 32LL;
            --v29;
          }

          while (v29);
        }

        *((_DWORD *)a1 + 63) = v30;
      }

LABEL_55:
      if ((*(_BYTE *)(v15 + 110) & 0x82) != 0 && !*(_BYTE *)(v15 + 197) && *((void *)a1 + 40))
      {
        uint64_t v32 = *(int **)v15;
        if (**(int **)v15 >= 2 && (int v33 = (void (*)(void))*((void *)v32 + 17)) != 0LL)
        {
          v33();
        }

        else
        {
          (*((void (**)(int *, double *))v32 + 15))(v32, &v102);
          double v9 = 86400000.0;
          *(double *)v8.i64 = v102 * 86400000.0;
          *((void *)a1 + 23) = (uint64_t)(v102 * 86400000.0);
        }
      }

      ++*(_DWORD *)(v15 + 208);
      __int16 v34 = *((_WORD *)a1 + 134);
      if ((v34 & 0x40) == 0)
      {
        ++*(_DWORD *)(v15 + 216);
        __int16 v34 = *((_WORD *)a1 + 134);
      }

      if ((v34 & 0x80) != 0) {
        ++*(_DWORD *)(v15 + 212);
      }
      *((_DWORD *)a1 + 12) = 0;
      *((_BYTE *)a1 + 267) = 2;
LABEL_67:
      if ((*((_WORD *)a1 + 134) & 0xC) == 0)
      {
        ++*(_DWORD *)(v15 + 220);
        int v19 = sub_181290D34((uint64_t *)a1, v8, v9, v10, v1, v2, v3, v4, v5, v6, v7);
        --*(_DWORD *)(v15 + 220);
LABEL_158:
        ++*((_DWORD *)a1 + 59);
        if (v19 == 100)
        {
          *(_DWORD *)(v15 + 80) = 100;
          goto LABEL_226;
        }

        sub_1812D6A08(v15, (uint64_t)a1);
        *((void *)a1 + 20) = 0LL;
        if (v19 != 101)
        {
LABEL_185:
          *(_DWORD *)(v15 + 80) = v19;
          uint64_t v82 = *(void *)a1;
          uint64_t v1 = *((unsigned int *)a1 + 13);
          if (((_DWORD)v1 || *(_BYTE *)(v82 + 103)) && sub_1813037C4(v82, v1) == 7)
          {
            *((_DWORD *)a1 + 13) = 7;
          }

          goto LABEL_190;
        }

        if (!*(_BYTE *)(v15 + 101)) {
          goto LABEL_184;
        }
        if (*(int *)(v15 + 40) <= 0)
        {
          *((_DWORD *)a1 + 13) = 0;
          goto LABEL_184;
        }

        uint64_t v74 = 0LL;
        uint64_t v75 = 0LL;
        int v76 = 0;
        while (1)
        {
          uint64_t v77 = *(void *)(*(void *)(v15 + 32) + v74 + 8);
          if (!v77) {
            goto LABEL_163;
          }
          if (*(_BYTE *)(v77 + 17))
          {
            ++*(_DWORD *)(v77 + 20);
            if (!*(_BYTE *)(v77 + 18)) {
              sub_1812FDE20(v77);
            }
          }

          uint64_t v78 = *(void *)(**(void **)(v77 + 8) + 344LL);
          if (v78)
          {
            uint64_t v79 = *(unsigned int *)(v78 + 24);
            *(_DWORD *)(v78 + 24) = 0;
            if (!*(_BYTE *)(v77 + 17)) {
              goto LABEL_173;
            }
          }

          else
          {
            uint64_t v79 = 0LL;
            if (!*(_BYTE *)(v77 + 17)) {
              goto LABEL_173;
            }
          }

          int v80 = *(_DWORD *)(v77 + 20) - 1;
          *(_DWORD *)(v77 + 20) = v80;
          if (v80)
          {
LABEL_173:
            goto LABEL_163;
          }

          sub_1812FDEFC(v77);
          if ((int)v79 >= 1)
          {
LABEL_174:
            if (!v76)
            {
              uint64_t v81 = *(uint64_t (**)(void, uint64_t, void, uint64_t))(v15 + 376);
              if (v81) {
                int v76 = v81(*(void *)(v15 + 384), v15, *(void *)(*(void *)(v15 + 32) + v74), v79);
              }
            }
          }

  if (a3)
  {
    if (!v10)
    {
      uint64_t v20 = *(void *)(a1 + 72);
      if (!*(void *)v20
        || (int64x2_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v20 + 80LL))(v20, 22LL, 0LL),
            v10 == 12))
      {
        int64x2_t v10 = 0;
      }
    }
  }

  if (*(_BYTE *)(a1 + 8)) {
    goto LABEL_61;
  }
  uint64_t v26 = *(void *)(a1 + 344);
  if (!v26)
  {
LABEL_96:
    uint64_t v31 = *(void *)(a1 + 72);
    if (*(void *)v31)
    {
      if (*(_BYTE *)(a1 + 17)) {
        LODWORD(result) = 0;
      }
      else {
        LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v31 + 64LL))(v31, 1LL);
      }
      if (*(_BYTE *)(a1 + 22) != 5) {
        *(_BYTE *)(a1 + 22) = 1;
      }
    }

    else
    {
      LODWORD(result) = 0;
    }

    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    goto LABEL_62;
  }

  if (!*(_BYTE *)(v26 + 63))
  {
LABEL_61:
    LODWORD(result) = 0;
    goto LABEL_62;
  }

  *(_BYTE *)(v26 + 63) = 0;
  if (!(*(unsigned int (**)(void, void, uint64_t, uint64_t))(**(void **)(v26 + 8) + 112LL))( *(void *)(v26 + 8),  (*(__int16 *)(v26 + 60) + 3),  1LL,  6LL))
  {
    if (!*(_BYTE *)(v26 + 63)) {
      goto LABEL_96;
    }
    goto LABEL_61;
  }

  LODWORD(result) = 0;
  *(_BYTE *)(v26 + 63) = 1;
LABEL_62:
  *(_BYTE *)(a1 + 21) = 1;
  *(_BYTE *)(a1 + 24) = 0;
  if (v10) {
    return v10;
  }
  else {
    return result;
  }
}

  uint64_t v46 = v31 + 104LL * v32;
  uint64_t v47 = *v9;
  uint64_t v48 = v17 + ((*(uint64_t *)(v46 + 88) >> 63) & v34) + 1;
  uint64_t v49 = (__int16)v48;
  uint64_t v50 = 2LL * (__int16)v48;
  uint64_t v51 = v50 + 2;
  uint64_t v207 = v48;
  uint64_t v52 = v49 * 8 + ((3 * (__int16)v48 + v50 + 2 + 7) & 0xFFFFFFF8) + 112;
  uint64_t v53 = v52;
  uint64_t v200 = (void *)(v46 + 88);
  if (v47)
  {
    uint64_t result = (void *)sub_1812F2264(v47, v52);
    uint64_t v54 = result;
    if (result) {
      goto LABEL_57;
    }
LABEL_83:
    int v76 = (void **)v211;
    uint64_t v77 = (unsigned __int8 *)v215;
    goto LABEL_206;
  }

  uint64_t result = (void *)sub_18126F0AC(v52);
  uint64_t v54 = result;
  if (!result) {
    goto LABEL_83;
  }
LABEL_57:
  bzero(v54, v53);
  uint64_t v58 = &v54[v49 + 14];
  v54[1] = (char *)v58 + v51;
  v54[2] = v58;
  v54[7] = (char *)v58 + v51 + v50;
  v54[8] = v54 + 14;
  *((_WORD *)v54 + 48) = v207;
  *((_WORD *)v54 + 47) = v207 - 1;
  *(void *)(v209 + 32) = v54;
  *uint64_t v54 = "auto-index";
  v54[3] = v208;
  uint64_t v59 = v204[4];
  if (v59 >= v16)
  {
    LOBYTE(v195) = 0;
    uint64_t v60 = 0;
  }

  else
  {
    uint64_t v60 = 0;
    uint64_t v194 = 0LL;
    uint64_t v195 = 0;
    uint64_t v61 = v214 + 104LL * v210;
    uint64_t v62 = (_DWORD *)(v61 + 72);
    uint64_t v63 = (_BYTE *)(v61 + 68);
    do
    {
      double v64 = *(_DWORD *)(v59 + 28);
      if (v64 == *v62 && (*(_WORD *)(v59 + 20) & 0x82) != 0)
      {
        if ((*v63 & 0x58) == 0
          || (uint64_t v65 = *(_DWORD *)(*(void *)v59 + 4LL), (v65 & 3) != 0)
          && *(_DWORD *)(*(void *)v59 + 56LL) == v64
          && ((*v63 & 0x18) == 0 || (v65 & 2) == 0))
        {
          if ((*(void *)(v59 + 40) & a3) == 0)
          {
            double v66 = *(unsigned int *)(v59 + 32);
            if ((v66 & 0x80000000) == 0)
            {
              uint64_t v193 = *(void *)v59;
              if (sub_181333C94(*(void *)v59, *(char *)(*(void *)(*(void *)v205 + 8LL) + 16 * v66 + 9)))
              {
                uint64_t v70 = 0x8000000000000000LL;
                if ((v70 & v194) == 0)
                {
                  uint64_t v192 = v70;
                  *(_WORD *)(v54[1] + 2LL * v60) = v66;
                  uint64_t v71 = (void *)sub_1812DDD08(v211, v193, v67, v68, v69, v55, v56, v57);
                  uint64_t v72 = v71 ? (char *)*v71 : "BINARY";
                  v194 |= v192;
                  *(void *)(v54[8] + 8LL * v60++) = v72;
                  int v73 = *(unsigned __int8 **)(v193 + 16);
                  if (v73)
                  {
                    uint64_t v74 = sub_1812A3C7C(v73);
                    uint64_t v75 = v195;
                    if (v74 != 66) {
                      uint64_t v75 = 1;
                    }
                    uint64_t v195 = v75;
                  }
                }
              }
            }
          }
        }
      }

      v59 += 56LL;
    }

    while (v59 < v16);
  }

  if (v203 < 1)
  {
    int v80 = v211;
    uint64_t v81 = v208;
  }

  else
  {
    uint64_t v78 = 0LL;
    if (v198 <= 1) {
      uint64_t v79 = 1LL;
    }
    else {
      uint64_t v79 = v198;
    }
    int v80 = v211;
    uint64_t v81 = v208;
    do
    {
      if (((v30 >> v78) & 1) != 0)
      {
        *(_WORD *)(v54[1] + 2LL * v60) = v78;
        *(void *)(v54[8] + 8LL * v60++) = "BINARY";
      }

      ++v78;
    }

    while (v79 != v78);
  }

  if ((*v200 & 0x8000000000000000LL) != 0 && *(__int16 *)(v81 + 54) >= 64)
  {
    uint64_t v82 = 0;
    int v83 = v60;
    do
    {
      *(_WORD *)(v54[1] + 2 * v83) = v82 + 63;
      *(void *)(v54[8] + 8 * v83++) = "BINARY";
      unsigned int v84 = v82 + 1;
      uint64_t v85 = v82 + 64;
      ++v82;
    }

    while (v85 < *(__int16 *)(v81 + 54));
    v60 += v84;
  }

  *(_WORD *)(v54[1] + 2LL * v60) = -1;
  *(void *)(v54[8] + 8LL * v60) = "BINARY";
  uint64_t v86 = *(void *)v80;
  if ((*(_BYTE *)(*(void *)v80 + 49LL) & 4) == 0 || *(_BYTE *)(v80 + 301) == 2)
  {
    uint64_t v87 = 0;
LABEL_102:
    unsigned int v88 = (unsigned __int8 *)v215;
    goto LABEL_103;
  }

  uint64_t v99 = v54[3];
  int v100 = (sqlite3_str *)&unk_18C54FA08;
  if (!sqlite3_initialize())
  {
    int v101 = sub_18126F0AC(32LL);
    if (v101)
    {
      int v100 = (sqlite3_str *)v101;
      double v102 = *(_DWORD *)(v86 + 136);
      *(void *)int v101 = 0LL;
      *(void *)(v101 + 8) = 0LL;
      *(_DWORD *)(v101 + 16) = 0;
      *(void *)(v101 + 20) = v102;
      *(_WORD *)(v101 + 28) = 0;
    }

    else
    {
      int v100 = (sqlite3_str *)&unk_18C54FA08;
    }
  }

  sqlite3_str_appendf(v100, "CREATE AUTOMATIC INDEX ON %s(", *(const char **)v99);
  if (*((unsigned __int16 *)v54 + 48) >= 2u)
  {
    sqlite3_str_appendf( v100,  "%s%s",  &byte_1813CEAEE,  *(const char **)(*(void *)(v99 + 8) + 16LL * *(__int16 *)v54[1]));
    if (*((unsigned __int16 *)v54 + 48) >= 3u)
    {
      uint64_t v182 = 1LL;
      do
        sqlite3_str_appendf( v100,  "%s%s",  ", ",  *(const char **)(*(void *)(v99 + 8) + 16LL * *(__int16 *)(v54[1] + 2 * v182++)));
      while (v182 < *((unsigned __int16 *)v54 + 48) - 1LL);
    }
  }

  if (v100 == (sqlite3_str *)&unk_18C54FA08) {
    goto LABEL_233;
  }
  int v183 = *((void *)v100 + 1);
  if (v183
    && (*(_BYTE *)(v183 + *((unsigned int *)v100 + 6)) = 0, *((_DWORD *)v100 + 5))
    && (*((_BYTE *)v100 + 29) & 4) == 0)
  {
    int v184 = sub_1812F24E0((uint64_t *)v100);
  }

  else
  {
    int v184 = (void *)*((void *)v100 + 1);
  }

  char v185 = (void (**)(void *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_225;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v100);
  --qword_18C468B10;
  off_18C4653A8(v100);
  int v100 = (sqlite3_str *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    char v185 = (void (**)(void *))&xmmword_18C465410;
LABEL_225:
    (*v185)(v100);
  }

  if (!v184)
  {
LABEL_233:
    uint64_t v187 = *(void *)v211;
    if (!*(_BYTE *)(*(void *)v211 + 103LL))
    {
      unsigned int v88 = (unsigned __int8 *)v215;
      if (!*(_BYTE *)(v187 + 104))
      {
        *(_BYTE *)(v187 + 103) = 1;
        ++*(_DWORD *)(v187 + 432);
        *(_WORD *)(v187 + 436) = 0;
        int v188 = *(void *)(v187 + 344);
        if (v188)
        {
          sub_1812DC47C(v188, "out of memory", v179, v180, v181, v55, v56, v57, v191);
          uint64_t v189 = *(void *)(v187 + 344);
          *(_DWORD *)(v189 + 24) = 7;
          int v190 = *(void *)(v189 + 256);
          if (v190)
          {
            int v80 = v211;
            uint64_t v87 = 0;
            do
            {
              ++*(_DWORD *)(v190 + 48);
              *(_DWORD *)(v190 + 24) = 7;
              int v190 = *(void *)(v190 + 256);
            }

            while (v190);
            goto LABEL_103;
          }
        }
      }

      uint64_t v87 = 0;
      goto LABEL_238;
    }

    uint64_t v87 = 0;
    goto LABEL_235;
  }

  uint64_t v87 = sub_18131CCF8((uint64_t *)v211, 0, "%s)%s", v180, v181, v55, v56, v57, (char)v184);
  int v186 = (void (**)(void *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v184);
    --qword_18C468B10;
    off_18C4653A8(v184);
    int v184 = (void *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v186 = (void (**)(void *))&xmmword_18C465410;
      goto LABEL_232;
    }

        uint64_t v91 = v38;
        uint64_t v62 = 0LL;
        uint64_t v63 = 8LL;
        uint64_t v47 = v47;
        while (1)
        {
          double v64 = v47 + v62;
          uint64_t v65 = *(__int16 *)(v44[1] + 2 * v62);
          if ((_DWORD)v65 == -2) {
            break;
          }
          *(double *)v40.i64 = sub_18131C0EC(*(void *)(v12 + 16), v44[3], v100, v65, v47 + v62, v17, v18, v19, v40);
LABEL_57:
          ++v62;
          v63 += 24LL;
          if (v45 == v62)
          {
            unint64_t v14 = v91;
            goto LABEL_68;
          }
        }

        double v66 = v47;
        *(_DWORD *)(v12 + 64) = v100 + 1;
        uint64_t v67 = *(unsigned __int8 **)(v44[10] + v63);
        uint64_t v68 = v12;
        uint64_t v69 = *(void *)v12;
        if (v67)
        {
          uint64_t v70 = (unsigned __int8 *)sub_18129C928(v69, v67, 0LL, 0LL);
          if (*(_BYTE *)(v69 + 103))
          {
LABEL_62:
            if (v70) {
              sub_181309110((void *)v69, v70);
            }
            uint64_t v12 = v68;
            *(_DWORD *)(v68 + 64) = 0;
            uint64_t v47 = v66;
            goto LABEL_57;
          }
        }

        else
        {
          uint64_t v70 = 0LL;
          if (*(_BYTE *)(v69 + 103)) {
            goto LABEL_62;
          }
        }

        sub_181319C00(v68, v70, v64);
        goto LABEL_62;
      }

      uint64_t v50 = *(_DWORD *)(v12 + 40);
      uint64_t v51 = __OFSUB__(v50, (_DWORD)v45);
      uint64_t v52 = v50 - v45;
      if (v52 < 0 != v51)
      {
        uint64_t v53 = *(_DWORD *)(v12 + 56);
        uint64_t v47 = (v53 + 1);
        *(_DWORD *)(v12 + 56) = v53 + v45;
        if ((_DWORD)v45) {
          goto LABEL_55;
        }
      }

      else
      {
        uint64_t v47 = *(unsigned int *)(v12 + 44);
        *(_DWORD *)(v12 + 40) = v52;
        *(_DWORD *)(v12 + 44) = v47 + v45;
        if ((_DWORD)v45) {
          goto LABEL_55;
        }
      }

        int v40 = v9;
        if (*(_BYTE *)(v17 + 140))
        {
          int v41 = *((int *)v14 + 36);
          int v42 = *(void *)(v17 + 112);
          int v19 = **(_DWORD **)(v42 + 32);
          if (v19 == 1)
          {
            if (*(_BYTE *)(v13 + 31))
            {
              uint64_t v43 = *(_BYTE *)(v13 + 31) - 1;
              *(_BYTE *)(v13 + 31) = v43;
              int v40 = *(unsigned int *)(v13 + 4LL * v43 + 224);
            }

            else
            {
              int v40 = (*(_DWORD *)(v13 + 56) + 1);
              *(_DWORD *)(v13 + 56) = v40;
            }
          }

          else
          {
            uint64_t v44 = *(_DWORD *)(v13 + 40);
            uint64_t v45 = __OFSUB__(v44, v19);
            uint64_t v46 = v44 - v19;
            if (v46 < 0 != v45)
            {
              uint64_t v47 = *(_DWORD *)(v13 + 56);
              int v40 = (v47 + 1);
              *(_DWORD *)(v13 + 56) = v47 + v19;
            }

            else
            {
              int v40 = *(unsigned int *)(v13 + 44);
              *(_DWORD *)(v13 + 40) = v46;
              *(_DWORD *)(v13 + 44) = v40 + v19;
            }
          }

          uint64_t v55 = *(_DWORD **)(v42 + 32);
          double v56 = *v55;
          if ((int)*v55 < 1)
          {
            uint64_t v11 = v93;
            int64x2_t v10 = v94;
            uint64_t v12 = v92;
            uint64_t v15 = v91;
            goto LABEL_89;
          }

          uint64_t v95 = v41;
          uint64_t v57 = (void *)v13;
          uint64_t v58 = 0;
          uint64_t v59 = v57;
          uint64_t v60 = v57[2];
          uint64_t v61 = (unsigned __int8 **)(v55 + 2);
          do
          {
            uint64_t v63 = sub_18128CF10(v59, *v61, (v40 + v58), a4, a5, a6, a7, a8, a9);
            if ((_DWORD)v40 + v58 != (_DWORD)v63)
            {
              a3 = v63;
              double v64 = *(_DWORD *)(v60 + 144);
              if (*(_DWORD *)(v60 + 148) > v64)
              {
                *(_DWORD *)(v60 + 144) = v64 + 1;
                uint64_t v62 = *(void *)(v60 + 136) + 40LL * v64;
                *(_DWORD *)uint64_t v62 = 81;
                *(_DWORD *)(v62 + 4) = v63;
                *(_DWORD *)(v62 + 8) = v40 + v58;
                *(void *)(v62 + 12) = 0LL;
                *(void *)(v62 + 28) = 0LL;
                *(void *)(v62 + 20) = 0LL;
                *(_DWORD *)(v62 + 36) = 0;
              }

              else
              {
                sub_18131044C(v60, 81LL, v63, (v40 + v58), 0LL, a6, a7, a8);
              }
            }

            ++v58;
            v61 += 3;
          }

          while (v56 != v58);
          uint64_t v65 = *((int *)v14 + 36);
          if ((int)v95 < (int)v65)
          {
            double v66 = *(unsigned __int8 *)(*v14 + 103);
            uint64_t v67 = 40 * v95;
            uint64_t v68 = v65 - v95;
            uint64_t v11 = v93;
            int64x2_t v10 = v94;
            uint64_t v12 = v92;
            unint64_t v13 = (uint64_t)v59;
            double v9 = v90;
            uint64_t v15 = v91;
            uint64_t v18 = v98;
            do
            {
              uint64_t v69 = &byte_18C550680;
              if (!v66) {
                uint64_t v69 = (char *)(v14[17] + v67);
              }
              if (*v69 == 94 && *((_DWORD *)v69 + 1) == *(_DWORD *)(v92 + 88)) {
                *((_DWORD *)v69 + 1) = v93;
              }
              v67 += 40LL;
              --v68;
            }

            while (v68);
            goto LABEL_89;
          }

          uint64_t v11 = v93;
          int64x2_t v10 = v94;
          uint64_t v12 = v92;
          unint64_t v13 = (uint64_t)v59;
          double v9 = v90;
          uint64_t v15 = v91;
          uint64_t v18 = v98;
          if ((*(_BYTE *)(v98 + 4) & 0x20) == 0)
          {
LABEL_93:
            a5 = *(unsigned int *)(v17 + 92);
            uint64_t v72 = *((_DWORD *)v14 + 36);
            if (*((_DWORD *)v14 + 37) <= v72)
            {
              sub_18131044C((uint64_t)v14, v96, v10, v40, a5, a6, a7, a8);
              uint64_t v18 = v98;
            }

            else
            {
              *((_DWORD *)v14 + 36) = v72 + 1;
              int v73 = v14[17] + 40LL * v72;
              *(_BYTE *)int v73 = v96;
              *(_WORD *)(v73 + 2) = 0;
              *(_DWORD *)(v73 + 4) = v10;
              *(_DWORD *)(v73 + 8) = v40;
              *(_DWORD *)(v73 + 12) = a5;
              *(_BYTE *)(v73 + 1) = 0;
              *(void *)(v73 + 24) = 0LL;
              *(void *)(v73 + 32) = 0LL;
              *(void *)(v73 + 16) = 0LL;
            }

            uint64_t result = (uint64_t *)*v14;
            if (*(_BYTE *)(*v14 + 103))
            {
              if ((*(_BYTE *)(v18 + 4) & 0x10) != 0) {
                uint64_t result = sub_1813014B0(result, (void *)v18);
              }
            }

            else
            {
              uint64_t v74 = v14[17] + 40LL * *((int *)v14 + 36);
              *(_BYTE *)(v74 - 39) = -7;
              *(void *)(v74 - 24) = v18;
            }

            uint64_t v75 = *((_DWORD *)v14 + 36);
            uint64_t v45 = __OFSUB__(v75, 1);
            int v76 = v75 - 1;
            if (v76 < 0 == v45) {
              *(_WORD *)(v14[17] + 40LL * v76 + 2) = v19;
            }
            if (*(_BYTE *)(v17 + 140))
            {
              if (v19 == 1)
              {
                if ((_DWORD)v40)
                {
                  uint64_t v77 = *(unsigned __int8 *)(v13 + 31);
                  if (v77 <= 7)
                  {
                    *(_BYTE *)(v13 + 31) = v77 + 1;
                    uint64_t v78 = (_DWORD *)(v13 + 4 * v77 + 224);
                    goto LABEL_109;
                  }
                }
              }

              else if (*(_DWORD *)(v13 + 40) < v19)
              {
                *(_DWORD *)(v13 + 40) = v19;
                uint64_t v78 = v89;
LABEL_109:
                *uint64_t v78 = v40;
              }
            }

            if (v97)
            {
              uint64_t v79 = &byte_18C550680;
              if (!*(_BYTE *)(*v14 + 103)) {
                uint64_t v79 = (char *)(v14[17] + 40LL * v97);
              }
              *((_DWORD *)v79 + 2) = *((_DWORD *)v14 + 36);
            }

            goto LABEL_12;
          }
        }

        else
        {
LABEL_89:
          if ((*(_BYTE *)(v18 + 4) & 0x20) == 0) {
            goto LABEL_93;
          }
        }

        uint64_t v70 = sub_181289D04( v13,  *(unsigned __int8 **)(*(void *)(*(void *)(v17 + 112) + 32LL) + 8LL),  a3,  a4,  a5,  a6,  a7,  a8);
        if (!v70) {
          uint64_t v70 = *(void *)(*(void *)v13 + 16LL);
        }
        sub_1812B9B68(v14, 85LL, 0LL, 0LL, 0LL, v70, 4294967294LL, v71);
        uint64_t v18 = v98;
        goto LABEL_93;
      }

    *(void *)(i + 24) = 0LL;
  }

  uint64_t v2 = v41;
  *a2 = v41;
  return !v2 && v3;
}

    uint64_t v11 = v12;
LABEL_56:
    LODWORD(result) = a6(a2, 0LL, v9, ((_DWORD)v19 - (_DWORD)v9), v18, ((_DWORD)v12 - v6));
  }

  while (!(_DWORD)result);
  if ((_DWORD)result == 101) {
    return 0LL;
  }
  else {
    return result;
  }
}

          if ((v18 & 0x10) != 0)
          {
            uint64_t v20 = *(_DWORD *)(v12 + 16);
            if ((v18 & 0x400) != 0) {
              v20 += *(_DWORD *)v12;
            }
          }

          else if ((v18 & 1) != 0)
          {
            uint64_t v20 = 0;
          }

          else
          {
            uint64_t v20 = sub_181303970(v12, 1);
          }

  if (!(_DWORD)result)
  {
    uint64_t result = sqlite3_step(v4);
    if ((_DWORD)result != 100) {
      return sqlite3_reset(v4);
    }
  }

  return result;
}

  if (v20 >= 1) {
    goto LABEL_56;
  }
LABEL_66:
  uint64_t v59 = *(_DWORD *)(a1 + 76);
  if (v59 > v16) {
    memmove(&v15->i8[v16], &a2->i8[v16], v59 - v16);
  }
  if (a3 == 1)
  {
    v15[1].i8[0] ^= dataOut[1].u8[0];
    v15[1].i8[1] ^= dataOut[1].u8[1];
    v15[1].i8[2] ^= dataOut[1].u8[2];
    v15[1].i8[3] ^= dataOut[1].u8[3];
    v15[1].i8[4] ^= dataOut[1].u8[4];
    v15[1].i8[5] ^= dataOut[1].u8[5];
    v15[1].i8[6] ^= dataOut[1].u8[6];
    v15[1].i8[7] ^= dataOut[1].u8[7];
  }

  return v15;
}

LABEL_184:
            int v19 = 101;
            goto LABEL_185;
          }
        }
      }

      uint64_t v35 = *(void *)a1;
      if ((*((_WORD *)a1 + 134) & 0xC) == 4) {
        int v36 = 1;
      }
      else {
        int v36 = *(_BYTE *)(v35 + 51) & 1;
      }
      uint64_t v37 = *((void *)a1 + 13);
      uint64_t v38 = *(void **)(v37 + 88);
      if (v38[102])
      {
        if (*(_DWORD *)(v37 + 96))
        {
          uint64_t v39 = *(void **)(v37 + 104);
          if (v39) {
            sub_1812F20DC(*(void **)(v37 + 88), v39);
          }
        }

        if (*(_DWORD *)(v37 + 160))
        {
          int v40 = *(void **)(v37 + 168);
          if (v40) {
            sub_1812F20DC(v38, v40);
          }
        }

        if (*(_DWORD *)(v37 + 224))
        {
          int v41 = *(void **)(v37 + 232);
          if (v41) {
            sub_1812F20DC(v38, v41);
          }
        }

        if (*(_DWORD *)(v37 + 288))
        {
          int v42 = *(void **)(v37 + 296);
          if (v42) {
            sub_1812F20DC(v38, v42);
          }
        }

        if (*(_DWORD *)(v37 + 352))
        {
          uint64_t v43 = *(void **)(v37 + 360);
          if (v43) {
            sub_1812F20DC(v38, v43);
          }
        }

        if (*(_DWORD *)(v37 + 416))
        {
          uint64_t v44 = *(void **)(v37 + 424);
          if (v44) {
            sub_1812F20DC(v38, v44);
          }
        }

        if (*(_DWORD *)(v37 + 480))
        {
          uint64_t v45 = *(void **)(v37 + 488);
          if (v45) {
            sub_1812F20DC(v38, v45);
          }
        }

        if (*(_DWORD *)(v37 + 544))
        {
          uint64_t v46 = *(void **)(v37 + 552);
          if (v46) {
            sub_1812F20DC(v38, v46);
          }
        }

LABEL_97:
        if (*((_DWORD *)a1 + 13) == 7)
        {
          unint64_t v14 = 0x18C465000LL;
          if (*(_BYTE *)(v35 + 103) || *(_BYTE *)(v35 + 104))
          {
            int v19 = 1;
            unint64_t v13 = 0x18C465000LL;
          }

          else
          {
            *(_BYTE *)(v35 + 103) = 1;
            unint64_t v13 = 0x18C465000LL;
            ++*(_DWORD *)(v35 + 432);
            *(_WORD *)(v35 + 436) = 0;
            uint64_t v58 = *(void *)(v35 + 344);
            if (v58
              && (sub_1812DC47C(v58, "out of memory", v2, (uint64_t)v3, v4, v5, v6, v7, (char)__s),
                  uint64_t v59 = *(void *)(v35 + 344),
                  *(_DWORD *)(v59 + 24) = 7,
                  (uint64_t v60 = *(void *)(v59 + 256)) != 0))
            {
              do
              {
                ++*(_DWORD *)(v60 + 48);
                *(_DWORD *)(v60 + 24) = 7;
                uint64_t v60 = *(void *)(v60 + 256);
                int v19 = 1;
              }

              while (v60);
            }

            else
            {
              int v19 = 1;
            }
          }
        }

        else
        {
          unint64_t v14 = 0x18C465000uLL;
          if (v36) {
            uint64_t v47 = *((void *)a1 + 13) + 576LL;
          }
          else {
            uint64_t v47 = 0LL;
          }
          int v19 = sub_1813040F4((uint64_t)a1, v47, (*((_WORD *)a1 + 134) & 0xC) == 8, (int *)a1 + 12, &v101, &v102);
          unint64_t v13 = 0x18C465000LL;
          if (!v19)
          {
            double v56 = v102;
            uint64_t v57 = v101;
            if (*(_DWORD *)(v35 + 424))
            {
              *((_DWORD *)a1 + 13) = 9;
              sub_181302AB0((uint64_t *)a1, "interrupted", v50, v51, v52, v53, v54, v55, (char)__s);
              int v19 = 1;
            }

            else
            {
              uint64_t v97 = v37 + 64;
              uint64_t v61 = (unsigned __int8 *)(*(void *)&v102 + 40LL * v101);
              double v98 = v102;
              int __s = (char *)sub_1813043CC(v35, (uint64_t)v61, v50, v51, v52, v53, v54, v55);
              if ((*((_WORD *)a1 + 134) & 0xC) == 8)
              {
                uint64_t v62 = *(int *)(*(void *)&v56 + 40LL * (int)v57 + 4);
                if ((*(_WORD *)(v37 + 84) & 0x9000) != 0)
                {
                  uint64_t v63 = v37 + 64;
                  sub_1813040AC(v97, v62);
                  double v64 = v98;
                  unint64_t v13 = 0x18C465000LL;
                }

                else
                {
                  double v64 = v56;
                  *(void *)(v37 + 64) = v62;
                  *(_WORD *)(v37 + 84) = 4;
                  unint64_t v13 = 0x18C465000LL;
                  uint64_t v63 = v37 + 64;
                }

                uint64_t v65 = *(int *)(*(void *)&v64 + 40LL * (int)v57 + 8);
                if ((*(_WORD *)(v37 + 148) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 128, v65);
                  double v64 = v98;
                }

                else
                {
                  *(void *)(v37 + 128) = v65;
                  *(_WORD *)(v37 + 148) = 4;
                }

                uint64_t v68 = *(int *)(*(void *)&v64 + 40LL * (int)v57 + 12);
                if ((*(_WORD *)(v37 + 212) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 192, v68);
                }

                else
                {
                  *(void *)(v37 + 192) = v68;
                  *(_WORD *)(v37 + 212) = 4;
                }

                uint64_t v69 = 4LL;
              }

              else
              {
                if ((*(_WORD *)(v37 + 84) & 0x9000) != 0)
                {
                  sub_1813040AC(v97, v57);
                }

                else
                {
                  *(void *)(v37 + 64) = v57;
                  *(_WORD *)(v37 + 84) = 4;
                }

                sub_181269368(v37 + 128, off_189B6D560[*v61], -1LL, 1u, 0LL);
                double v66 = v56;
                uint64_t v67 = *(int *)(*(void *)&v56 + 40LL * (int)v57 + 4);
                if ((*(_WORD *)(v37 + 212) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 192, v67);
                  double v66 = v56;
                }

                else
                {
                  *(void *)(v37 + 192) = v67;
                  *(_WORD *)(v37 + 212) = 4;
                }

                unint64_t v13 = 0x18C465000uLL;
                uint64_t v63 = v37 + 64;
                uint64_t v70 = *(int *)(*(void *)&v66 + 40LL * (int)v57 + 8);
                if ((*(_WORD *)(v37 + 276) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 256, v70);
                  double v66 = v98;
                }

                else
                {
                  *(void *)(v37 + 256) = v70;
                  *(_WORD *)(v37 + 276) = 4;
                }

                uint64_t v71 = *(int *)(*(void *)&v66 + 40LL * (int)v57 + 12);
                if ((*(_WORD *)(v37 + 340) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 320, v71);
                  double v66 = v98;
                }

                else
                {
                  *(void *)(v37 + 320) = v71;
                  *(_WORD *)(v37 + 340) = 4;
                }

                uint64_t v72 = *(unsigned __int16 *)(*(void *)&v66 + 40LL * (int)v57 + 2);
                if ((*(_WORD *)(v37 + 468) & 0x9000) != 0)
                {
                  sub_1813040AC(v37 + 448, v72);
                }

                else
                {
                  *(void *)(v37 + 448) = v72;
                  *(_WORD *)(v37 + 468) = 4;
                }

                if ((*(_WORD *)(v37 + 532) & 0x9000) != 0) {
                  sub_181303888((int *)(v37 + 512));
                }
                else {
                  *(_WORD *)(v37 + 532) = 1;
                }
                uint64_t v69 = 6LL;
              }

              sub_181269368(v37 + (v69 << 6), __s, -1LL, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
              *((void *)a1 + 20) = v63;
              if (*(_BYTE *)(v35 + 103)) {
                int v73 = 7;
              }
              else {
                int v73 = 0;
              }
              if (*(_BYTE *)(v35 + 103)) {
                int v19 = 1;
              }
              else {
                int v19 = 100;
              }
              *((_DWORD *)a1 + 13) = v73;
            }
          }
        }

        goto LABEL_158;
      }

      uint64_t v48 = 0LL;
      while (1)
      {
        uint64_t v49 = v37 + v48;
        if ((*(_WORD *)(v37 + v48 + 84) & 0x9000) != 0)
        {
          sub_181303838(v49 + 64);
        }

        else
        {
          if (!*(_DWORD *)(v49 + 96)) {
            goto LABEL_106;
          }
          sub_1813014B0(v38, *(void **)(v37 + v48 + 104));
          *(_DWORD *)(v49 + 96) = 0;
        }

        *(_WORD *)(v49 + 84) = 0;
LABEL_106:
        v48 += 64LL;
        if (v48 == 512) {
          goto LABEL_97;
        }
      }
    }

    *((_DWORD *)a1 + 13) = 17;
    int v19 = *((char *)a1 + 266) < 0 ? sub_1813017FC((uint64_t)a1) : 1;
LABEL_190:
    v19 &= *(_DWORD *)(v15 + 88);
LABEL_191:
    if (v19 != 17) {
      goto LABEL_226;
    }
    if (v100 == 50)
    {
      int v19 = 17;
      goto LABEL_226;
    }

    int v83 = *((_DWORD *)a1 + 12);
    unsigned int v84 = sub_1812D8564((uint64_t)a1, v1, v2, (uint64_t)v3, v4, v5, v6, v7);
    if (v84) {
      break;
    }
    uint64_t v85 = *(void *)a1;
    if (*(void *)(*(void *)a1 + 24LL)) {
      (*(void (**)(void))(v13 + 1024))();
    }
    sub_1812D6A08(v85, (uint64_t)a1);
    uint64_t v1 = sub_18127A3A0((void **)a1);
    *((_BYTE *)a1 + 267) = 1;
    *((_DWORD *)a1 + 13) = 0;
    *((_WORD *)a1 + 132) = -254;
    *((void *)a1 + 7) = 0LL;
    *(void *)((char *)a1 + 44) = 0xFFFFFFFF00000001LL;
    *((_DWORD *)a1 + 16) = 0;
    *((void *)a1 + 10) = 0LL;
    if ((_DWORD)v1 || *(_BYTE *)(v85 + 103)) {
      sub_1813037C4(v85, v1);
    }
    uint64_t v86 = *(void *)(v85 + 24);
    if (v86) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 1040))(v86, v1);
    }
    ++v100;
    if ((v83 & 0x80000000) == 0) {
      *((_BYTE *)a1 + 265) = -2;
    }
  }

  unsigned int v88 = v84;
  uint64_t v89 = *(void *)(v99 + 416);
  if (!v89) {
    goto LABEL_216;
  }
  int v90 = *(unsigned __int16 *)(v89 + 20);
  if ((~v90 & 0x202) == 0 && *(_BYTE *)(v89 + 22) == 1)
  {
    uint64_t v91 = *(const char **)(v89 + 8);
    int v92 = (void *)*((void *)a1 + 21);
    if (!v92) {
      goto LABEL_218;
    }
LABEL_217:
    sub_1812F20DC((void *)v99, v92);
    goto LABEL_218;
  }

  if ((v90 & 1) != 0)
  {
LABEL_216:
    uint64_t v91 = 0LL;
    int v92 = (void *)*((void *)a1 + 21);
    if (!v92) {
      goto LABEL_218;
    }
    goto LABEL_217;
  }

  uint64_t v91 = (const char *)sub_181303998((int *)v89, 1);
  int v92 = (void *)*((void *)a1 + 21);
  if (v92) {
    goto LABEL_217;
  }
LABEL_218:
  if (*(_BYTE *)(v99 + 103))
  {
    *((void *)a1 + 21) = 0LL;
    int v19 = 7;
    *((_DWORD *)a1 + 13) = 7;
  }

  else
  {
    if (v91)
    {
      unint64_t v93 = strlen(v91) + 1;
      int v94 = (void *)sub_1812F2264(v99, v93);
      uint64_t v95 = v94;
      if (v94) {
        memcpy(v94, v91, v93);
      }
    }

    else
    {
      uint64_t v95 = 0LL;
    }

    *((void *)a1 + 21) = v95;
    int v19 = sub_1813037C4(v99, v88);
    *((_DWORD *)a1 + 13) = v19;
  }

  unint64_t v14 = 0x18C465000uLL;
LABEL_226:
  if (*(void *)(v99 + 24)) {
    (*(void (**)(void))(v14 + 1040))();
  }
  return v19;
}

  if ((_BYTE)v62)
  {
    if ((v62 & 0x400) != 0)
    {
      if (v58) {
        sub_1812F20DC(v57, v58);
      }
    }

    return 0LL;
  }

  if (!v58) {
    return v58;
  }
  *((_BYTE *)v58 + v61) = 0;
  if (!v60 || (v62 & 0x400) != 0) {
    return v58;
  }
  return sub_1812F24E0((uint64_t *)&v57);
}

      if (!v20)
      {
        uint64_t v15 = *(void *)v15;
        if (v15) {
          continue;
        }
      }

      if (!v20)
      {
        if (v8)
        {
          uint64_t v52 = v72;
LABEL_105:
          if (v52)
          {
            uint64_t v53 = &off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_111;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v52);
            --qword_18C468B10;
            off_18C4653A8(v52);
            uint64_t v52 = xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v53 = &xmmword_18C465410;
LABEL_111:
              (*v53)(v52);
            }
          }

        *(void *)(v47 + 40) = 0LL;
        *(_DWORD *)(v47 + 48) = 0;
        *(_DWORD *)(v47 + 32) = 0;
LABEL_98:
        uint64_t v5 = *(void *)(v5 + 16);
        uint64_t v45 = *(void *)(v5 + 32);
        if (v45) {
          goto LABEL_92;
        }
      }

    case 2:
      uint64_t result = sub_18137485C(a1, *(void *)(a2 + 16), a3);
      if ((_DWORD)result) {
        return sub_18137485C(a1, *(void *)(v5 + 24), a3) == 0;
      }
      return result;
    case 4:
      uint64_t v22 = sub_18137485C(a1, *(void *)(a2 + 16), a3);
      return (v22 | sub_18137485C(a1, *(void *)(v5 + 24), a3)) != 0;
    default:
      if (!*(void *)(a1 + 40)) {
        return !*(_BYTE *)(a2 + 48)
      }
            && *(void *)(a2 + 40) == *(void *)(a1 + 48)
            && *(_DWORD *)(*(void *)(a2 + 32) + 48LL) > 0;
      if (*(_BYTE *)(a2 + 50))
      {
        uint64_t v12 = *(void *)(a2 + 32);
        if (*(_DWORD *)(v12 + 32))
        {
          unint64_t v13 = *(void *)(v12 + 40);
          if (v13)
          {
            unint64_t v14 = &off_18C4653A8;
            uint64_t v15 = *(void *)(a2 + 32);
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
              --qword_18C468B10;
              off_18C4653A8(v13);
              unint64_t v13 = xmmword_18C468B70;
              uint64_t v12 = v15;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_25;
              }
              unint64_t v14 = &xmmword_18C465410;
            }

            (*v14)(v13);
            uint64_t v12 = v15;
          }
        }

        int16x8_t v342 = a2;
        uint64_t v50 = 267LL;
        if (v40 < 0 || v40 > v31 << 32) {
          goto LABEL_541;
        }
        int16x8_t v343 = v40;
        bzero((void *)v9, 0x328uLL);
        *(_DWORD *)(v9 + 712) = 1;
        if ((_DWORD)v6) {
          goto LABEL_41;
        }
        *(void *)&v349[0] = 0LL;
        uint64_t v332 = v343 + 1;
        a2 = v342;
        int v24 = v341;
        if (sub_1813636A8((uint64_t *)a1, 8, (sqlite3_stmt **)v349, 0LL))
        {
          __s1 = 0;
        }

        else
        {
          uint64_t v52 = *(sqlite3_stmt **)&v349[0];
          if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
          {
            uint64_t v53 = *((void *)v52 + 16);
            if ((*(_WORD *)(v53 + 20) & 0x9000) != 0)
            {
              sub_1813040AC(v53, v332);
            }

            else
            {
              *(void *)uint64_t v53 = v332;
              *(_WORD *)(v53 + 20) = 4;
            }

            uint64_t v57 = *(void *)(*(void *)v52 + 24LL);
            if (v57) {
              xmmword_18C465410(v57);
            }
          }

          uint64_t v58 = v10;
          sqlite3_step(v52);
          uint64_t v59 = sqlite3_column_int(v52, 0);
          uint64_t v60 = sqlite3_reset(v52);
          uint64_t v348 = v60;
          __s1 = v59;
          if (v59)
          {
            uint64_t v6 = v60;
            if (!v32)
            {
              int64x2_t v10 = v58;
              goto LABEL_134;
            }

            int64x2_t v10 = v58;
            if (__s1 != 1) {
              goto LABEL_134;
            }
            __s1 = 1;
          }

          else
          {
            __s1 = 0;
            int64x2_t v10 = v58;
          }
        }

        uint64_t v51 = sub_1813636A8((uint64_t *)a1, 15, (sqlite3_stmt **)v349, 0LL);
        if ((_DWORD)v51)
        {
          uint64_t v6 = v51;
LABEL_104:
          uint64_t v348 = v6;
          goto LABEL_42;
        }

        uint64_t v54 = *(sqlite3_stmt **)&v349[0];
        if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
        {
          uint64_t v55 = v343 + 2;
          double v56 = *((void *)v54 + 16);
          if ((*(_WORD *)(v56 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v56, v55);
          }

          else
          {
            *(void *)double v56 = v55;
            *(_WORD *)(v56 + 20) = 4;
          }

          uint64_t v61 = *(void *)(*(void *)v54 + 24LL);
          if (v61) {
            xmmword_18C465410(v61);
          }
        }

        if (!sub_1812B2390((uint64_t)v54, 1u))
        {
          uint64_t v62 = (v332 & 0xFFFFFFFFFFFFFC00LL) + 1024;
          uint64_t v63 = *((void *)v54 + 16);
          if ((*(_WORD *)(v63 + 84) & 0x9000) != 0)
          {
            sub_1813040AC(v63 + 64, v62);
          }

          else
          {
            *(void *)(v63 + 64) = v62;
            *(_WORD *)(v63 + 84) = 4;
          }

          double v64 = *(void *)(*(void *)v54 + 24LL);
          if (v64) {
            xmmword_18C465410(v64);
          }
        }

        if (sqlite3_step(v54) == 100)
        {
          uint64_t v65 = sqlite3_column_type(v54, 0);
          uint64_t v6 = sqlite3_reset(v54);
          uint64_t v348 = v6;
          if (v65 == 5) {
            *(_DWORD *)(v9 + 712) |= 2u;
          }
        }

        else
        {
          uint64_t v6 = sqlite3_reset(v54);
          uint64_t v348 = v6;
        }

          uint64_t result = 0LL;
          *(_DWORD *)(a1 + 140) = (_DWORD)v43;
          return result;
        }
      }

      else
      {
        sub_1812CF36C(89717);
      }

      LODWORD(v43) = 0;
      goto LABEL_97;
    }

    if (byte_1813C6343[v17] != byte_1813C6343[v18]) {
      break;
    }
LABEL_14:
    ++v15;
  }

  int v19 = "usermerge";
  for (uint64_t m = a2; ; ++m)
  {
    int v21 = *m;
    uint64_t v22 = *(unsigned __int8 *)v19;
    if ((_DWORD)v21 == (_DWORD)v22)
    {
      if (*m) {
        goto LABEL_19;
      }
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) != 1) {
        goto LABEL_72;
      }
      if (a3)
      {
        uint64_t v48 = *((_WORD *)a3 + 10);
        if ((v48 & 0x24) != 0)
        {
          uint64_t v49 = (uint64_t)*a3;
        }

        else if ((v48 & 8) != 0)
        {
          uint64_t v62 = *(double *)a3;
          uint64_t v49 = (uint64_t)v62;
        }

        else
        {
          if ((v48 & 0x12) == 0 || !a3[1]) {
            goto LABEL_72;
          }
          LODWORD(v49) = sub_181303DF0((uint64_t)a3);
        }

        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 148) = v49;
        return result;
      }

uint64_t sub_181290D34( uint64_t *a1, int64x2_t a2, double a3, int64x2_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = (uint64_t)a1;
  uint64_t v1580 = *MEMORY[0x1895F89C0];
  uint64_t v12 = (unsigned __int8 *)a1[17];
  uint64_t v13 = *a1;
  unsigned int v14 = *(unsigned __int8 *)(*a1 + 100);
  unint64_t v15 = a1[13];
  uint64_t v1566 = *(void *)(*a1 + 48);
  if (*((_DWORD *)a1 + 69)) {
    sub_1813018F0(a1);
  }
  if (*(void *)(v13 + 544)) {
    unint64_t v16 = (*(_DWORD *)(v13 + 560)
  }
                       + *(_DWORD *)(v11 + 296) / *(_DWORD *)(v13 + 560) * *(_DWORD *)(v13 + 560)
                       - *(_DWORD *)(v11 + 296));
  else {
    unint64_t v16 = -1LL;
  }
  v1565 = v12;
  if (*(_DWORD *)(v11 + 52) == 7)
  {
    unint64_t v17 = 0LL;
    LOBYTE(v18) = 0;
    goto LABEL_8;
  }

  *(_DWORD *)(v11 + 52) = 0;
  *(void *)(v11 + 72) = 0LL;
  *(_DWORD *)(v13 + 688) = 0;
  if (*(_DWORD *)(v13 + 424))
  {
    unint64_t v17 = 0LL;
    LOBYTE(v18) = 0;
    LODWORD(v19) = 9;
    goto LABEL_2728;
  }

  unint64_t v1567 = v15;
  int v1487 = 0;
  unint64_t v17 = 0LL;
  int v1491 = 0;
  unsigned int v1554 = v14;
  int v1555 = 0;
  uint64_t v18 = 0LL;
  v12 += 40 * *(int *)(v11 + 48);
  v1488 = (uint64_t *)(v11 + 384);
  v1490 = (char **)(v11 + 168);
  uint64_t v1564 = v11;
  uint64_t v1500 = v13;
LABEL_22:
  while (2)
  {
    if ((v1566 & 0x400) != 0) {
      ++*((void *)v12 + 3);
    }
    ++v17;
    unint64_t v22 = *v12;
    switch(*v12)
    {
      case 0u:
        int v150 = *((_DWORD *)v12 + 1);
        BOOL v151 = (const void *)*((void *)v12 + 2);
        if (v150)
        {
          uint64_t v152 = *(void *)(v13 + 760);
          if (v152)
          {
            int v153 = 0;
LABEL_163:
            int v154 = *(_BYTE **)v152;
            for (uint64_t i = (unsigned __int8 *)*((void *)v12 + 2); ; ++i)
            {
              uint64_t v156 = *v154;
              uint64_t v157 = *i;
              if ((_DWORD)v156 == (_DWORD)v157)
              {
                if (!*v154)
                {
                  if (v150 != 1 || *(int *)(v13 + 216) < 1)
                  {
                    if (*(void *)(v152 + 24))
                    {
                      BOOL v712 = 0;
                    }

                    else
                    {
                      BOOL v712 = *(_BYTE *)(v13 + 109) != 0;
                      if (v150 == 1 && *(_BYTE *)(v13 + 109))
                      {
                        uint64_t v1060 = sub_181301A00(v1564, 1, a6, (uint64_t)a7, a8, a9, a10, a11);
                        if ((_DWORD)v1060)
                        {
                          uint64_t v1453 = v1060;
                          uint64_t v11 = v1564;
                          goto LABEL_2770;
                        }

                        *(_BYTE *)(v13 + 101) = 1;
                        if (sub_18127A498(v1564) == 5)
                        {
                          *(_DWORD *)(v1564 + 48) = -858993459 * ((unint64_t)(v12 - v1565) >> 3);
                          *(_BYTE *)(v13 + 101) = 0;
                          uint64_t v1453 = 5LL;
                          *(_DWORD *)(v1564 + 52) = 5;
                          uint64_t v11 = v1564;
                          goto LABEL_2770;
                        }

                        LODWORD(v19) = *(_DWORD *)(v1564 + 52);
                        if ((_DWORD)v19)
                        {
                          *(_BYTE *)(v13 + 101) = 0;
                          uint64_t v11 = v1564;
                          goto LABEL_2728;
                        }

                        *(_BYTE *)(v13 + 109) = 0;
                        BOOL v712 = 1;
                        goto LABEL_2104;
                      }
                    }

                    unsigned int v1543 = v18;
                    int v153 = *(_DWORD *)(v13 + 788) + ~v153;
                    LODWORD(v713) = *(_DWORD *)(v13 + 40);
                    if (v150 == 2)
                    {
                      int v714 = *(_DWORD *)(v13 + 44) & 1;
                      if ((int)v713 < 1)
                      {
                        LODWORD(v19) = v1555;
                        goto LABEL_2097;
                      }

                      BOOL v1536 = v712;
                      v1516 = v12;
                      unint64_t v1525 = v17;
                      v715 = v1565;
                      uint64_t v716 = 0LL;
                      uint64_t v717 = 8LL;
                      while (1)
                      {
                        int v718 = sub_181301130(*(void *)(*(void *)(v13 + 32) + v717), 516, v714 ^ 1u);
                        if (v718) {
                          break;
                        }
                        ++v716;
                        uint64_t v713 = *(int *)(v13 + 40);
                        v717 += 32LL;
                        if (v716 >= v713)
                        {
                          LODWORD(v19) = 0;
                          uint64_t v12 = v1516;
                          unint64_t v17 = v1525;
                          goto LABEL_1622;
                        }
                      }

                      LODWORD(v19) = v718;
                      uint64_t v11 = v1564;
LABEL_2689:
                      uint64_t v12 = v1516;
                      unint64_t v17 = v1525;
LABEL_2690:
                      LOBYTE(v18) = v1543;
                      goto LABEL_2728;
                    }

                    BOOL v1536 = v712;
                    v715 = v1565;
                    int v714 = 0;
                    LODWORD(v19) = v1555;
LABEL_1622:
                    v1565 = v715;
                    unint64_t v1531 = v17;
                    uint64_t v1050 = 0LL;
                    uint64_t v1051 = 8LL;
                    while (2)
                    {
                      int v1052 = sub_1812C07C4(*(void *)(*(void *)(v13 + 32) + v1051), v150, v153, *(double *)a2.i64);
                      if (v1052)
                      {
                        LODWORD(v19) = v1052;
                        uint64_t v11 = v1564;
                        LOBYTE(v18) = v1543;
                        unint64_t v17 = v1531;
                        goto LABEL_2728;
                      }

                      ++v1050;
                      v1051 += 32LL;
                      break;
                    }

                    LODWORD(v19) = 0;
                    unint64_t v17 = v1531;
LABEL_1627:
                    BOOL v712 = v1536;
LABEL_2097:
                    if (v714)
                    {
                      int v1248 = v19;
                      for (uint64_t j = *(void *)(v13 + 8); j; uint64_t j = *(void *)(j + 16))
                        *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 1;
                      sub_1812D6078(v13);
                      *(_DWORD *)(v13 + 44) |= 1u;
                      LODWORD(v19) = v1248;
                    }

                    uint64_t v18 = v1543;
                    if ((_DWORD)v19)
                    {
LABEL_2594:
                      uint64_t v11 = v1564;
                      goto LABEL_2728;
                    }

LABEL_2104:
                    while (1)
                    {
                      v1250 = *(void **)(v13 + 760);
                      if (v1250 == (void *)v152) {
                        break;
                      }
                      *(void *)(v13 + 760) = v1250[3];
                      sub_1812F20DC((void *)v13, v1250);
                      --*(_DWORD *)(v13 + 788);
                    }

                    if (v150 == 1)
                    {
                      *(void *)(v13 + 760) = *(void *)(v152 + 24);
                      sub_1812F20DC((void *)v13, (void *)v152);
                      if (!v712)
                      {
                        --*(_DWORD *)(v13 + 788);
                        uint64_t v11 = v1564;
                        goto LABEL_2113;
                      }
                    }

                    else
                    {
                      a2 = *(int64x2_t *)(v152 + 8);
                      *(int64x2_t *)(v13 + 800) = a2;
                    }

                    BOOL v1251 = v150 != 2 && v712;
                    uint64_t v11 = v1564;
                    if (!v1251)
                    {
LABEL_2113:
                      int v68 = sub_181302F48(v13, v150, v153);
                      if (v68) {
                        goto LABEL_2579;
                      }
                    }

LABEL_2117:
                    if (*(_BYTE *)(v11 + 267) == 3)
                    {
                      uint64_t v1453 = 101LL;
                      goto LABEL_2770;
                    }

                    int v1555 = 0;
                    v12 += 40;
                    goto LABEL_22;
                  }

                  v1455 = "cannot release savepoint - SQL statements in progress";
LABEL_2682:
                  uint64_t v11 = v1564;
                  sub_181302AB0((uint64_t *)v1564, v1455, a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
                  LODWORD(v19) = 5;
                  goto LABEL_2728;
                }
              }

              else if (byte_1813C6343[v156] != byte_1813C6343[v157])
              {
                ++v153;
                uint64_t v152 = *(void *)(v152 + 24);
                if (!v152) {
                  break;
                }
                goto LABEL_163;
              }

              ++v154;
            }
          }

          uint64_t v1482 = *((void *)v12 + 2);
          v1445 = "no such savepoint: %s";
LABEL_2655:
          uint64_t v11 = v1564;
          sub_181302AB0((uint64_t *)v1564, v1445, a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
          LODWORD(v19) = 1;
          goto LABEL_2728;
        }

        if (*(int *)(v13 + 216) >= 1)
        {
          v1455 = "cannot open savepoint - SQL statements in progress";
          goto LABEL_2682;
        }

        uint64_t v11 = v1564;
        if (v151) {
          int v777 = strlen(*((const char **)v12 + 2)) & 0x3FFFFFFF;
        }
        else {
          int v777 = 0;
        }
        int v68 = sub_181302F48(v13, 0, *(_DWORD *)(v13 + 788) + *(_DWORD *)(v13 + 792));
        if (!v68)
        {
          uint64_t v1145 = sub_1812F2264(v13, (v777 + 33));
          if (v1145)
          {
            uint64_t v1146 = v1145;
            v1147 = (void *)(v1145 + 32);
            *(void *)uint64_t v1146 = v1147;
            memcpy(v1147, v151, (v777 + 1));
            if (*(_BYTE *)(v13 + 101))
            {
              *(_BYTE *)(v13 + 101) = 0;
              *(_BYTE *)(v13 + 109) = 1;
            }

            else
            {
              ++*(_DWORD *)(v13 + 788);
            }

            *(void *)(v1146 + 24) = *(void *)(v13 + 760);
            *(void *)(v13 + 760) = v1146;
            a2 = *(int64x2_t *)(v13 + 800);
            *(int64x2_t *)(v1146 + 8) = a2;
          }

          goto LABEL_2117;
        }

        goto LABEL_2579;
      case 1u:
        int v1448 = *((_DWORD *)v12 + 1);
        int v1447 = *((_DWORD *)v12 + 2);
        if (v1448 == *(unsigned __int8 *)(v13 + 101))
        {
          if (v1447) {
            v1449 = "cannot rollback - no transaction is active";
          }
          else {
            v1449 = "cannot commit - no transaction is active";
          }
          if (v1448) {
            v1450 = v1449;
          }
          else {
            v1450 = "cannot start a transaction within a transaction";
          }
          int v1451 = 1;
          uint64_t v11 = v1564;
          goto LABEL_2625;
        }

        uint64_t v11 = v1564;
        if (v1447)
        {
          sub_1812C8198(v13, 516, *(double *)a2.i64);
          char v1456 = 1;
        }

        else
        {
          if (v1448 && *(int *)(v13 + 216) > 0)
          {
            int v1451 = 5;
            v1450 = "cannot commit transaction - SQL statements in progress";
LABEL_2625:
            v1452 = (uint64_t *)v11;
            goto LABEL_2653;
          }

          uint64_t v1458 = sub_181301A00(v1564, 1, a6, (uint64_t)a7, a8, a9, a10, a11);
          if ((_DWORD)v1458)
          {
            uint64_t v1453 = v1458;
            goto LABEL_2770;
          }

          char v1456 = v1448;
        }

        *(_BYTE *)(v13 + 101) = v1456;
        if (sub_18127A498(v1564) == 5)
        {
          *(_DWORD *)(v1564 + 48) = -858993459 * ((unint64_t)(v12 - v1565) >> 3);
          *(_BYTE *)(v13 + 101) = 1 - v1448;
          goto LABEL_2650;
        }

        sub_1813019B8((void *)v13);
        goto LABEL_2698;
      case 2u:
        LODWORD(__buf[0]) = 0;
        int v158 = *((_DWORD *)v12 + 2);
        if (v158)
        {
          uint64_t v159 = *(void *)(v13 + 48);
          if ((v159 & 0x200100000LL) != 0)
          {
            if ((v159 & 0x100000) != 0) {
              LODWORD(v19) = 8;
            }
            else {
              LODWORD(v19) = 11;
            }
            uint64_t v11 = v1564;
            goto LABEL_2728;
          }
        }

        uint64_t v160 = *(void *)(v13 + 32);
        uint64_t v161 = *((int *)v12 + 1);
        uint64_t v162 = v160 + 32 * v161;
        uint64_t v163 = *(void *)(v162 + 8);
        uint64_t v11 = v1564;
        if (!v163) {
          goto LABEL_184;
        }
        uint64_t v164 = sub_18127AD68(*(void *)(v162 + 8), v158, __buf);
        if ((_DWORD)v164)
        {
          LODWORD(v19) = v164;
          if (v164 == 5)
          {
            *(_DWORD *)(v1564 + 48) = -858993459 * ((unint64_t)(v12 - v1565) >> 3);
            *(_DWORD *)(v1564 + 52) = v164;
            uint64_t v1453 = v164;
            goto LABEL_2770;
          }
        }

        else
        {
          if ((*(_WORD *)(v1564 + 268) & 0x20) != 0
            && *((_DWORD *)v12 + 2)
            && (!*(_BYTE *)(v13 + 101) || *(int *)(v13 + 212) >= 2))
          {
            int v165 = *(_DWORD *)(v1564 + 64);
            if (!v165)
            {
              int v166 = *(_DWORD *)(v13 + 792) + 1;
              *(_DWORD *)(v13 + 792) = v166;
              int v165 = *(_DWORD *)(v13 + 788) + v166;
              *(_DWORD *)(v1564 + 64) = v165;
            }

            int v167 = sub_181302F48(v13, 0, v165 - 1);
            if (!v167) {
              int v167 = sub_181305244(v163, *(_DWORD *)(v1564 + 64));
            }
            int v1555 = v167;
            a2 = *(int64x2_t *)(v13 + 800);
            *(int64x2_t *)(v1564 + 88) = a2;
LABEL_184:
            LODWORD(v19) = v1555;
            if (v1555) {
              goto LABEL_2728;
            }
          }

          if (!*((_WORD *)v12 + 1)
            || LODWORD(__buf[0]) == *((_DWORD *)v12 + 3)
            && *(_DWORD *)(*(void *)(v160 + 32 * v161 + 24) + 4LL) == *((_DWORD *)v12 + 4))
          {
            int v1555 = 0;
            v12 += 40;
            continue;
          }

          if (*v1490) {
            sub_1812F20DC((void *)v13, *v1490);
          }
          *v1490 = (char *)sub_18129E1F8(v13, "database schema has changed");
          uint64_t v1446 = *((int *)v12 + 1);
          if (**(_DWORD **)(*(void *)(v13 + 32) + 32 * v1446 + 24) != LODWORD(__buf[0])) {
            sub_1813052EC(v13, v1446);
          }
          *(_WORD *)(v1564 + 268) = *(_WORD *)(v1564 + 268) & 0xFFEC | 1;
          LODWORD(v19) = 17;
        }

        goto LABEL_2728;
      case 3u:
        DWORD2(__buf[0]) = -1;
        a2.i64[0] = 0xFFFFFFFF00000000LL;
        *(void *)&__buf[0] = 0xFFFFFFFF00000000LL;
        int v168 = *(_DWORD *)(v13 + 40);
        if (v168 < 1)
        {
          int v174 = 0;
          int v170 = 0;
          BOOL v176 = 1;
        }

        else
        {
          uint64_t v169 = 0LL;
          int v170 = 0;
          uint64_t v172 = *((unsigned int *)v12 + 1);
          int v171 = *((_DWORD *)v12 + 2);
          uint64_t v173 = 8LL;
          a7 = (char *)__buf + 8;
          a6 = (uint64_t)__buf + 4;
          do
          {
            if ((_DWORD)v172 == 12 || v172 == v169)
            {
              int v175 = sub_18135F2F4(*(void *)(*(void *)(v13 + 32) + v173), v171, (_DWORD *)a6, a7);
              a6 = 0LL;
              a7 = 0LL;
              if (v175 == 5) {
                int v174 = 0;
              }
              else {
                int v174 = v175;
              }
              if (v175 == 5) {
                int v170 = 1;
              }
              int v168 = *(_DWORD *)(v13 + 40);
            }

            else
            {
              int v174 = 0;
            }

            ++v169;
            BOOL v176 = v174 == 0;
            if (v169 >= v168) {
              break;
            }
            v173 += 32LL;
          }

          while (!v174);
        }

        if (v176 && v170 != 0) {
          int v778 = 5;
        }
        else {
          int v778 = v174;
        }
        if (v778 == 5)
        {
          int v779 = 1;
          LODWORD(__buf[0]) = 1;
        }

        else
        {
          uint64_t v11 = v1564;
          if (v778)
          {
            LODWORD(v19) = v174;
            goto LABEL_2728;
          }

          int v779 = __buf[0];
        }

        unint64_t v780 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        if ((*(_WORD *)(v780 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v1567 + ((uint64_t)*((int *)v12 + 3) << 6), v779);
        }

        else
        {
          *(void *)unint64_t v780 = v779;
          *(_WORD *)(v780 + 20) = 4;
        }

        if ((*(_WORD *)(v780 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v780 + 64, SDWORD1(__buf[0]));
        }

        else
        {
          *(void *)(v780 + 64) = SDWORD1(__buf[0]);
          *(_WORD *)(v780 + 84) = 4;
        }

        if ((*(_WORD *)(v780 + 148) & 0x9000) != 0)
        {
          sub_1813040AC(v780 + 128, SDWORD2(__buf[0]));
        }

        else
        {
          *(void *)(v780 + 128) = SDWORD2(__buf[0]);
          *(_WORD *)(v780 + 148) = 4;
        }

        int v1555 = 0;
        v12 += 40;
        continue;
      case 4u:
        unint64_t v177 = v17;
        unsigned int v1543 = v18;
        uint64_t v178 = *(void *)(v1564 + 104);
        uint64_t v179 = *((int *)v12 + 2);
        uint64_t v180 = v178 + (v179 << 6);
        __int16 v182 = *(_WORD *)(v180 + 20);
        uint64_t v181 = (_WORD *)(v180 + 20);
        unint64_t v1525 = v177;
        if ((v182 & 0x9000) != 0) {
          sub_18130875C(v178 + (v179 << 6));
        }
        else {
          *uint64_t v181 = 4;
        }
        int v781 = *((_DWORD *)v12 + 3);
        v1516 = v12;
        uint64_t v782 = *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8);
        v783 = *(uint64_t **)(v782 + 8);
        uint64_t v784 = *v783;
        int v785 = *(unsigned __int8 *)(*v783 + 9);
        if (v781 == -1) {
          int v786 = *(unsigned __int8 *)(*v783 + 9);
        }
        else {
          int v786 = v781;
        }
        int v787 = v1555;
        if (*(_BYTE *)(v784 + 19))
        {
          v788 = (const char *)&unk_1813C6CDD;
        }

        else
        {
          if (*(_UNKNOWN **)v784 == &unk_18C465F78) {
            v788 = (const char *)&unk_1813C6CDD;
          }
          else {
            v788 = *(const char **)(v784 + 216);
          }
          int v787 = v1555;
        }

        if (v786 != 5) {
          goto LABEL_1834;
        }
        if (!v788) {
          goto LABEL_1835;
        }
        if ((strlen(v788) & 0x3FFFFFFF) == 0) {
          goto LABEL_2512;
        }
        int v787 = v1555;
        if (*(_BYTE *)(v784 + 17)) {
          goto LABEL_1835;
        }
        if (*(_BYTE *)(v784 + 8))
        {
LABEL_1834:
          if (v786 == v785)
          {
LABEL_1835:
            int v786 = v785;
            goto LABEL_1836;
          }

          BOOL v1138 = v785 == 5;
          if (v785 != 5 && v786 != 5)
          {
LABEL_1836:
            int v620 = v787;
            if (v787) {
              int v1133 = v785;
            }
            else {
              int v1133 = v786;
            }
            int v1134 = sub_1813079EC(v784, v1133);
            *uint64_t v181 = 8706;
            if (v1134 == 6)
            {
              int v1135 = 0;
              *(void *)(v178 + (v179 << 6) + 8) = 0LL;
            }

            else
            {
              v1136 = off_189B6DB98[v1134];
              *(void *)(v178 + (v179 << 6) + 8) = v1136;
              int v1135 = strlen(v1136) & 0x3FFFFFFF;
            }

            uint64_t v11 = v1564;
            uint64_t v12 = v1516;
            unint64_t v17 = v1525;
            uint64_t v1137 = v178 + (v179 << 6);
            *(_DWORD *)(v1137 + 16) = v1135;
            *(_BYTE *)(v1137 + 22) = 1;
            if (v1554 != 1) {
              sub_1812C23E8((int *)(v178 + (v179 << 6)), v1554);
            }
            uint64_t v18 = v1543;
            if (!v620)
            {
              int v1555 = 0;
              uint64_t v12 = v1516 + 40;
              continue;
            }

LABEL_2640:
            LODWORD(v19) = v620;
            goto LABEL_2728;
          }

          if (!*(_BYTE *)(v13 + 101)) {
            goto LABEL_2686;
          }
        }

        else
        {
          uint64_t v1399 = **(void **)(v784 + 72);
          if (*(int *)v1399 < 2)
          {
LABEL_2512:
            int v786 = v785;
            int v787 = v1555;
            goto LABEL_1836;
          }

          if (*(void *)(v1399 + 104)) {
            BOOL v1400 = v785 == 5;
          }
          else {
            BOOL v1400 = 1;
          }
          int v787 = v1555;
          if (v1400) {
            goto LABEL_1835;
          }
          BOOL v1138 = 0;
          if (!*(_BYTE *)(v13 + 101)) {
            goto LABEL_2686;
          }
        }

        if (*(int *)(v13 + 212) < 2)
        {
          if (v1138)
          {
            int v1140 = sub_181307774(v784, v13);
            if (v1140)
            {
LABEL_2233:
              int v787 = v1140;
              goto LABEL_1836;
            }

            sub_1813079EC(v784, v786);
          }

          else
          {
            if (v785 == 4) {
              sub_1813079EC(v784, 2);
            }
            int v787 = v1555;
            if (v1555) {
              goto LABEL_1836;
            }
          }

          if (v786 == 5) {
            int v1282 = 2;
          }
          else {
            int v1282 = 1;
          }
          int v1140 = sub_1812D614C(v782, v1282);
          goto LABEL_2233;
        }

LABEL_2686:
        v1457 = "out of";
        if (v786 == 5) {
          v1457 = "into";
        }
        uint64_t v11 = v1564;
        sub_181302AB0( (uint64_t *)v1564,  "cannot change %s wal mode from within a transaction",  a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  (char)v1457);
        LODWORD(v19) = 1;
        goto LABEL_2689;
      case 5u:
        uint64_t v11 = v1564;
        *(_DWORD *)(v1564 + 256) = 1;
        uint64_t v183 = *((int *)v12 + 2);
        if ((_DWORD)v183) {
          uint64_t v184 = v1567 + (v183 << 6);
        }
        else {
          uint64_t v184 = 0LL;
        }
        int v68 = sub_181307BB4(v1490, v13, *((_DWORD *)v12 + 1), v184);
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 6u:
        uint64_t v185 = *((int *)v12 + 3);
        unint64_t v186 = v1567 + (v185 << 6);
        uint64_t v189 = *(void *)(v186 + 64);
        unint64_t v188 = v186 + 64;
        unsigned int v187 = v189;
        int v190 = *(int64x2_t **)(v1564 + 112);
        uint64_t v191 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v192 = *(uint64_t ***)(v191 + 40);
        uint64_t v193 = *v192;
        uint64_t v194 = **v192;
        uint64_t v195 = *(unsigned int *)(v1567 + (v185 << 6));
        if (v187 < 4uLL)
        {
          uint64_t v196 = 0LL;
LABEL_1255:
          v876 = &v190->i64[v196];
          uint64_t v877 = v187 - v196;
          uint64_t v878 = v1567 + (v196 << 6) + (v185 << 6) + 128;
          do
          {
            *v876++ = v878;
            v878 += 64LL;
            --v877;
          }

          while (v877);
          goto LABEL_1257;
        }

        uint64_t v196 = v187 & 0xFFFFFFFC;
        a2 = (int64x2_t)xmmword_1813CDC50;
        v873 = v190 + 1;
        uint64_t v874 = v196;
        do
        {
          int64x2_t v875 = vaddq_s64(vshlq_n_s64(a2, 6uLL), vdupq_n_s64(v188));
          v873[-1] = vaddq_s64(v875, vdupq_n_s64(0x40uLL));
          int64x2_t *v873 = vaddq_s64(v875, vdupq_n_s64(0xC0uLL));
          a2 = vaddq_s64(a2, vdupq_n_s64(4uLL));
          v873 += 2;
          v874 -= 4LL;
        }

        while (v874);
        if ((v187 & 3) != 0) {
          goto LABEL_1255;
        }
LABEL_1257:
        int v879 = (*(uint64_t (**)(uint64_t **, uint64_t, void, int64x2_t))(v194 + 64))( v192,  v195,  *((void *)v12 + 2),  a2);
        sub_181302CE4(v1564, (uint64_t)v193);
        if (v879)
        {
          LODWORD(v19) = v879;
          uint64_t v11 = v1564;
          goto LABEL_2728;
        }

        int v880 = (*(uint64_t (**)(uint64_t **))(v194 + 80))(v192);
        int v1555 = 0;
        *(_BYTE *)(v191 + 2) = 0;
        if (!v880) {
          goto LABEL_21;
        }
        goto LABEL_2168;
      case 7u:
        *(void *)&__buf[0] = 0LL;
        if (*(_BYTE *)(v13 + 103)) {
          goto LABEL_2580;
        }
        uint64_t v197 = *(uint64_t **)(*((void *)v12 + 2) + 16LL);
        uint64_t v11 = v1564;
        if (!v197) {
          goto LABEL_2590;
        }
        uint64_t v198 = *v197;
        if (!*v197) {
          goto LABEL_2590;
        }
        int v199 = *(uint64_t (**)(uint64_t *))(v198 + 104);
        if (!v199) {
          goto LABEL_21;
        }
        uint64_t v200 = *((unsigned int *)v12 + 2);
        char v201 = *(_BYTE *)(v13 + 108);
        uint64_t v202 = *(int64x2_t **)(v1564 + 112);
        unint64_t v203 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        if (v200 >= 4)
        {
          uint64_t v204 = v200 & 0x7FFFFFFC;
          unint64_t v205 = v203 + ((unint64_t)(v200 & 0xFFFFFFFC) << 6);
          v1090 = v202 + 1;
          uint64_t v1091 = v200 & 0xFFFFFFFC;
          do
          {
            int64x2_t v1092 = vdupq_n_s64(v203);
            v1090[-1] = vaddq_s64(v1092, (int64x2_t)xmmword_1813CDCE0);
            int64x2_t *v1090 = vaddq_s64(v1092, (int64x2_t)xmmword_1813CDCF0);
            v203 += 256LL;
            v1090 += 2;
            v1091 -= 4LL;
          }

          while (v1091);
          if (v204 == v200)
          {
LABEL_1739:
            int v199 = *(uint64_t (**)(uint64_t *))(v198 + 104);
LABEL_1740:
            *(_BYTE *)(v13 + 108) = v12[2];
            int v1095 = v199(v197);
            *(_BYTE *)(v13 + 108) = v201;
            sub_181302CE4(v1564, (uint64_t)v197);
            if (!v1095)
            {
              if (*((_DWORD *)v12 + 1)) {
                *(void *)(v13 + 56) = *(void *)&__buf[0];
              }
              int v1555 = 0;
              ++*(void *)(v1564 + 56);
              v12 += 40;
              continue;
            }

            LODWORD(v19) = v1095;
            if (v1095 != 19 || !*(_BYTE *)(*((void *)v12 + 2) + 28LL))
            {
              ++*(void *)(v1564 + 56);
              goto LABEL_2728;
            }

            int v1096 = *((unsigned __int16 *)v12 + 1);
            if (v1096 == 4)
            {
              int v1555 = 0;
              v12 += 40;
              continue;
            }

            if (v1096 == 5) {
              *(_BYTE *)(v1564 + 264) = 2;
            }
            else {
              *(_BYTE *)(v1564 + 264) = v1096;
            }
            goto LABEL_2728;
          }
        }

        else
        {
          uint64_t v204 = 0LL;
          unint64_t v205 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        }

        v1093 = (unint64_t *)v202 + v204;
        uint64_t v1094 = v200 - v204;
        do
        {
          *v1093++ = v205;
          v205 += 64LL;
          --v1094;
        }

        while (v1094);
        goto LABEL_1739;
      case 8u:
      case 0xB5u:
        if ((*(_BYTE *)(v13 + 110) & 0x41) != 0 && *(unsigned __int8 *)(v1564 + 265) != 254)
        {
          a7 = (char *)*((void *)v12 + 2);
          if (a7 || (a7 = *(char **)(v1564 + 320)) != 0LL)
          {
            if ((*(_BYTE *)(v13 + 110) & 0x40) != 0)
            {
              v999 = sub_1812D9C50((void *)v1564, a7);
              (*(void (**)(void, void *))(v13 + 240))(*(void *)(v13 + 248), v999);
              sqlite3_free(v999);
            }

            else if (*(int *)(v13 + 220) < 2)
            {
              (*(void (**)(uint64_t, void, uint64_t))(v13 + 240))(1LL, *(void *)(v13 + 248), v1564);
            }

            else
            {
              int v80 = sub_18127F588(v13, "-- %s", a6, (uint64_t)a7, a8, a9, a10, a11, (char)a7);
              (*(void (**)(uint64_t, void, uint64_t, void *))(v13 + 240))( 1LL,  *(void *)(v13 + 248),  v1564,  v80);
              if (v80) {
                sub_1812F20DC((void *)v13, v80);
              }
            }
          }
        }

        int v1148 = *((_DWORD *)v12 + 1);
        if (v1148 < dword_18C465538) {
          goto LABEL_1879;
        }
        if (*v12 == 181) {
          goto LABEL_21;
        }
        uint64_t v1149 = *(unsigned int *)(v1564 + 144);
        if ((int)v1149 >= 2)
        {
          v1150 = (_DWORD *)(*(void *)(v1564 + 136) + 44LL);
          uint64_t v1151 = v1149 - 1;
          do
          {
            if (*((_BYTE *)v1150 - 4) == 15) {
              _DWORD *v1150 = 0;
            }
            v1150 += 10;
            --v1151;
          }

          while (v1151);
        }

        int v1148 = 0;
        *((_DWORD *)v12 + 1) = 0;
LABEL_1879:
        *((_DWORD *)v12 + 1) = v1148 + 1;
        ++*(_DWORD *)(v1564 + 304);
        ++*(_DWORD *)(v1564 + 224);
        goto LABEL_2168;
      case 9u:
        goto LABEL_1660;
      case 0xAu:
        unint64_t v206 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v206 + 20) = 4;
        *(void *)unint64_t v206 = (int)(-858993459 * ((unint64_t)(v12 - v1565) >> 3));
        goto LABEL_1660;
      case 0xBu:
        unint64_t v207 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(void *)unint64_t v207 = *((int *)v12 + 3) - 1LL;
        *(_WORD *)(v207 + 20) = 4;
        if (!*((_DWORD *)v12 + 2)) {
          goto LABEL_21;
        }
        goto LABEL_2168;
      case 0xCu:
        unint64_t v208 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v208 + 20) = 4;
        int v209 = *(_DWORD *)v208;
        *(void *)unint64_t v208 = (int)(-858993459 * ((unint64_t)(v12 - v1565) >> 3));
        uint64_t v12 = &v1565[40 * v209 + 40];
        continue;
      case 0xDu:
        unint64_t v210 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v213 = *(_WORD *)(v210 + 20);
        uint64_t v212 = (__int16 *)(v210 + 20);
        __int16 v211 = v213;
        if ((v213 & 4) != 0
          || (sub_1812AB614(v1567 + ((uint64_t)*((int *)v12 + 1) << 6), 67, v1554), __int16 v211 = *v212, (*v212 & 4) != 0))
        {
          *uint64_t v212 = v211 & 0xF240 | 4;
          v12 += 40;
          continue;
        }

        uint64_t v11 = v1564;
        if (*((_DWORD *)v12 + 2)) {
          goto LABEL_2168;
        }
        LODWORD(v19) = 20;
        goto LABEL_2728;
      case 0xEu:
        if (v1491 < 0)
        {
          int v214 = *((_DWORD *)v12 + 1);
          goto LABEL_2169;
        }

        if (v1491)
        {
          int v214 = *((_DWORD *)v12 + 3);
          goto LABEL_2169;
        }

LABEL_326:
        int v1491 = 0;
        goto LABEL_2168;
      case 0xFu:
        uint64_t v215 = *(void *)(v1564 + 352);
        uint64_t v216 = *(void *)(v1564 + 136);
        if (v215)
        {
          unint64_t v217 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v216] >> 3);
          uint64_t v218 = *(void *)(v215 + 40);
          uint64_t v219 = v217 >> 3;
          int v220 = *(unsigned __int8 *)(v218 + v219);
          int v221 = 1 << (v217 & 7);
          if ((v221 & v220) != 0) {
            goto LABEL_2168;
          }
          *(_BYTE *)(v218 + v219) = v220 | v221;
          *((_DWORD *)v12 + 1) = *(_DWORD *)(*(void *)(v1564 + 136) + 4LL);
          v12 += 40;
        }

        else
        {
          int v789 = *(_DWORD *)(v216 + 4);
          if (v789 == *((_DWORD *)v12 + 1)) {
            goto LABEL_2168;
          }
          *((_DWORD *)v12 + 1) = v789;
          v12 += 40;
        }

        continue;
      case 0x10u:
        uint64_t v222 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v223 = *(_WORD *)(v222 + 20);
        if ((v223 & 0x24) != 0)
        {
          BOOL v224 = *(void *)v222 == 0LL;
        }

        else
        {
          if ((v223 & 1) != 0) {
            goto LABEL_1188;
          }
          if ((v223 & 8) != 0)
          {
            a2.i64[0] = *(void *)v222;
          }

          else if ((v223 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_181303DB8(v222);
          }

          else
          {
            a2.i64[0] = 0LL;
          }

          BOOL v224 = *(double *)a2.i64 == 0.0;
        }

        if (v224) {
          goto LABEL_21;
        }
        goto LABEL_2168;
      case 0x11u:
        uint64_t v225 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v226 = *(_WORD *)(v225 + 20);
        if ((v226 & 0x24) != 0)
        {
          if (*(void *)v225) {
            goto LABEL_21;
          }
          goto LABEL_2168;
        }

        if ((v226 & 1) != 0)
        {
LABEL_1188:
          if (*((_DWORD *)v12 + 3)) {
            goto LABEL_2168;
          }
          goto LABEL_21;
        }

        if ((v226 & 8) != 0)
        {
          a2.i64[0] = *(void *)v225;
        }

        else
        {
          if ((v226 & 0x12) == 0) {
            goto LABEL_2168;
          }
          *(double *)a2.i64 = sub_181303DB8(v225);
        }

        goto LABEL_2168;
      case 0x12u:
        uint64_t v227 = *((unsigned int *)v12 + 1);
        if ((v227 & 0x80000000) != 0)
        {
          if (v1567)
          {
            LOBYTE(v790) = byte_1813C6455[*(_WORD *)(v1567 + ((uint64_t)*((int *)v12 + 3) << 6) + 20) & 0x3F];
          }

          else
          {
            sub_1812CF36C(97220);
            LOBYTE(v790) = 0;
          }
        }

        else
        {
          uint64_t v228 = *(void *)(*(void *)(v1564 + 120) + 8 * v227);
          uint64_t v229 = *((int *)v12 + 3);
          if ((int)v229 < *(unsigned __int16 *)(v228 + 66))
          {
            uint64_t v230 = *(unsigned int *)(v228 + 4 * v229 + 112);
            if (v230 < 0xC)
            {
              LOWORD(v230) = byte_1813C6D5F[v230];
            }

            else if ((v230 & 1) != 0)
            {
              LOWORD(v230) = 4;
            }

            else
            {
              LOWORD(v230) = 8;
            }

LABEL_1825:
            goto LABEL_2168;
          }

          int v790 = *((_DWORD *)v12 + 4);
        }

        LODWORD(v230) = 1 << (v790 - 1);
        goto LABEL_1825;
      case 0x13u:
        uint64_t v231 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        uint64_t v232 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v232 + 20) & 1) == 0)
        {
          BOOL v233 = !sub_181304C60(v232, 0LL);
          uint64_t v234 = (_WORD *)(v231 + 20);
          if ((*(_WORD *)(v231 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v231, v233);
            v12 += 40;
            continue;
          }

          *(void *)uint64_t v231 = v233;
          goto LABEL_2406;
        }

        uint64_t v132 = (_WORD *)(v231 + 20);
        if ((*(_WORD *)(v231 + 20) & 0x9000) == 0) {
          goto LABEL_926;
        }
        sub_181303888((int *)v231);
        v12 += 40;
        continue;
      case 0x14u:
        uint64_t v235 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (!v235 || !*(_BYTE *)(v235 + 2)) {
          goto LABEL_21;
        }
        unint64_t v236 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        __int16 v238 = *(_WORD *)(v236 + 20);
        uint64_t v237 = (_WORD *)(v236 + 20);
        if ((v238 & 0x9000) != 0) {
          sub_181303888((int *)(v1567 + ((uint64_t)*((int *)v12 + 3) << 6)));
        }
        else {
          *uint64_t v237 = 1;
        }
        goto LABEL_2168;
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
        unsigned int v1543 = v18;
        uint64_t v11 = v1564;
        uint64_t v49 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        *(_WORD *)(v49 + 2) = 0;
        *(_DWORD *)(v49 + 24) = 0;
        if (!*(_BYTE *)(v49 + 4))
        {
          uint64_t v138 = *(void *)(v49 + 40);
          unsigned int v139 = *(unsigned __int8 *)(v138 + 3);
          int v140 = *((_DWORD *)v12 + 4);
          *(void *)&__buf[0] = *(void *)(v49 + 48);
          WORD6(__buf[1]) = v140;
          if ((v22 & 1) != 0) {
            char v141 = 1;
          }
          else {
            char v141 = -1;
          }
          BYTE14(__buf[1]) = v141;
          *((void *)&__buf[0] + 1) = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
          BYTE2(__buf[2]) = 0;
          int v142 = sub_181305F54(v138, (uint64_t *)__buf, (int *)&v1570);
          if (!v142)
          {
            int v143 = (v139 >> 1) & 1;
            if ((v139 & 2) != 0 && !BYTE2(__buf[2]))
            {
              int v143 = 1;
              uint64_t v18 = v1543;
              int v144 = v1570;
              goto LABEL_2166;
            }

LABEL_2138:
            if (v22 >= 0x17)
            {
              if ((v1570 & 0x80000000) != 0 || (_DWORD)v22 == 24 && !(_DWORD)v1570)
              {
                int v1254 = sub_18129CF68(*(void *)(v49 + 40));
                goto LABEL_2148;
              }

LABEL_2164:
              uint64_t v18 = v1543;
LABEL_2170:
              if (v143) {
                v12 += 40;
              }
              goto LABEL_2172;
            }

            if ((int)v1570 > 0 || (_DWORD)v22 == 21 && !(_DWORD)v1570)
            {
              uint64_t v1255 = *(void *)(v49 + 40);
              *(_BYTE *)(v1255 + 1) &= 0xF1u;
              *(_WORD *)(v1255 + 70) = 0;
              if (*(_BYTE *)v1255 || !*(_WORD *)(v1255 + 86) || !*(_BYTE *)(*(void *)(v1255 + 136) + 8LL))
              {
                int v1254 = sub_18130A018((unsigned __int8 *)v1255);
LABEL_2148:
                uint64_t v18 = v1543;
                if (v1254)
                {
                  LODWORD(v19) = v1254;
                  if (v1254 != 101) {
                    goto LABEL_2728;
                  }
                  goto LABEL_2167;
                }

                goto LABEL_2170;
              }

              --*(_WORD *)(v1255 + 86);
              goto LABEL_2164;
            }

            int v144 = **(_BYTE **)(v49 + 40) != 0;
            uint64_t v18 = v1543;
LABEL_2166:
            if (v144) {
              goto LABEL_2167;
            }
            goto LABEL_2170;
          }

LABEL_2584:
          LODWORD(v19) = v142;
          goto LABEL_2690;
        }

        v1515 = v12;
        unint64_t v1524 = v17;
        uint64_t v50 = *((int *)v12 + 3);
        uint64_t v51 = v1567 + (v50 << 6);
        uint64_t v52 = (__int16 *)(v51 + 20);
        __int16 v53 = *(_WORD *)(v51 + 20);
        LOBYTE(v54) = v53;
        if ((v53 & 0x2E) != 2) {
          goto LABEL_2123;
        }
        uint64_t v55 = *(unsigned __int8 **)(v51 + 8);
        int v56 = *(_DWORD *)(v51 + 16);
        int v1533 = *(unsigned __int8 *)(v51 + 22);
        int v57 = sub_1812B8054(v55, &v1571, v56, v1533);
        if (v57 < 1) {
          goto LABEL_2122;
        }
        double v58 = v1571;
        if (v57 != 1) {
          goto LABEL_2120;
        }
        a2.i64[0] = 0xC3DFFFFFFFFFFFFFLL;
        if (v1571 >= -9.22337204e18)
        {
          uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
          a2.i64[0] = 0x43DFFFFFFFFFFFFFLL;
          if (v1571 <= 9.22337204e18) {
            uint64_t v59 = (uint64_t)v1571;
          }
        }

        else
        {
          uint64_t v59 = 0x8000000000000000LL;
        }

        if (v1571 == 0.0
          || (unint64_t)(v59 - 0x8000000000000LL) >> 52 == 4095
          && (*(double *)a2.i64 = (double)v59, *(void *)&v1571 == COERCE__INT64((double)v59)))
        {
          *(void *)uint64_t v51 = v59;
          __int16 v1061 = 4;
        }

        else if (sub_181303E28(v55, (void *)v51, v56, v1533))
        {
LABEL_2120:
          *(double *)uint64_t v51 = v58;
          __int16 v1061 = 8;
        }

        else
        {
          __int16 v1061 = 4;
        }

        *uint64_t v52 = *v52 & 0xFFFD | v1061;
LABEL_2122:
        __int16 v54 = *v52;
LABEL_2123:
        if ((v54 & 0x24) != 0)
        {
          int64_t v1252 = *(void *)v51;
        }

        else if ((v54 & 8) != 0)
        {
          a2.i64[0] = *(void *)v51;
          uint64_t v1253 = 0x7FFFFFFFFFFFFFFFLL;
          else {
            int64_t v1252 = 0x8000000000000000LL;
          }
        }

        else if ((v54 & 0x12) != 0 && *(void *)(v1567 + (v50 << 6) + 8))
        {
          int64_t v1252 = sub_181303DF0(v51);
          __int16 v54 = *v52;
        }

        else
        {
          int64_t v1252 = 0LL;
        }

        *uint64_t v52 = v53;
        if ((v54 & 0x24) != 0)
        {
          uint64_t v11 = v1564;
          uint64_t v12 = v1515;
          unint64_t v17 = v1524;
          goto LABEL_2137;
        }

        uint64_t v11 = v1564;
        uint64_t v12 = v1515;
        unint64_t v17 = v1524;
        if ((v54 & 8) == 0)
        {
          if (v22 > 0x16 || (v54 & 1) != 0)
          {
LABEL_2158:
            uint64_t v18 = v1543;
            goto LABEL_2168;
          }

          v1256 = *(_BYTE **)(v49 + 40);
          uint64_t v18 = v1543;
          if (!*v1256 && (v1256[1] & 8) != 0)
          {
LABEL_2172:
            int v1555 = 0;
            v12 += 40;
            continue;
          }

          LODWORD(v19) = sub_181309984((uint64_t)v1256, &v1570);
          if ((_DWORD)v19) {
            goto LABEL_2728;
          }
          int v143 = 0;
          int v144 = v1570;
          goto LABEL_2166;
        }

        double v1257 = *(double *)v51;
        if (v1257 > (double)v1252)
        {
LABEL_2175:
          int v1258 = 1;
        }

        else
        {
          if (v1257 < (double)v1252)
          {
LABEL_2160:
            LODWORD(v22) = v22 + (v22 & 1) - 1;
            goto LABEL_2137;
          }

          int v1258 = 0;
        }

        LODWORD(v22) = (v22 & v1258) + v22;
LABEL_2137:
        int v142 = sub_181305CF8(*(void *)(v49 + 40), v1252, 0, (int *)&v1570);
        int v143 = 0;
        *(void *)(v49 + 72) = v1252;
        if (!v142) {
          goto LABEL_2138;
        }
        goto LABEL_2584;
      case 0x19u:
        uint64_t v239 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (v239 && !*(_BYTE *)(v239 + 2)) {
          goto LABEL_21;
        }
        goto LABEL_1660;
      case 0x1Au:
        if (*((_DWORD *)v12 + 4) > (int)*(unsigned __int16 *)(*(void *)(*(void *)(v1564 + 120)
                                                                         + 8LL * *((int *)v12 + 1))
                                                             + 6LL))
          goto LABEL_256;
        goto LABEL_21;
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
LABEL_256:
        uint64_t v11 = v1564;
        uint64_t v240 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        int v241 = *((_DWORD *)v12 + 4);
        unint64_t v242 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        *((void *)&__buf[0] + 1) = v242;
        WORD6(__buf[1]) = v241;
        if ((_WORD)v241)
        {
          uint64_t v243 = *(void *)(v240 + 40);
          *(void *)&__buf[0] = *(void *)(v240 + 48);
          BYTE14(__buf[1]) = 0;
          LODWORD(v19) = sub_181305F54(v243, (uint64_t *)__buf, (int *)(v240 + 28));
          if ((_DWORD)v19) {
            goto LABEL_2728;
          }
        }

        else
        {
          uint64_t v244 = *(void *)(v240 + 48);
          unint64_t v245 = (unint64_t)*(unsigned __int16 *)(v244 + 6) << 6;
          uint64_t v246 = *(void *)(v244 + 16);
          uint64_t v247 = v246 ? sub_1812F2264(v246, v245 + 104) : sub_18126F0AC(v245 + 104);
          uint64_t v746 = v247;
          if (!v247) {
            goto LABEL_8;
          }
          *(void *)uint64_t v247 = v244;
          *(void *)(v247 + 8) = v247 + 40;
          *(_WORD *)(v247 + 28) = *(_WORD *)(v244 + 6) + 1;
          sub_1812AF9EC( *(void *)(v240 + 48),  *(_DWORD *)(*((void *)&__buf[0] + 1) + 16LL),  *(char **)(*((void *)&__buf[0] + 1) + 8LL),  v247);
          *(_BYTE *)(v746 + 30) = 0;
          int v747 = sub_181305F54(*(void *)(v240 + 40), (uint64_t *)v746, (int *)(v240 + 28));
          sub_1812F20DC((void *)v13, (void *)v746);
          LODWORD(v19) = v747;
          if (v747) {
            goto LABEL_2728;
          }
        }

        int v748 = *(_DWORD *)(v240 + 28);
        *(_BYTE *)(v240 + 2) = v748 != 0;
        *(_BYTE *)(v240 + 3) = 0;
        *(_DWORD *)(v240 + 24) = 0;
        int v749 = *v12;
        if (v749 == 29)
        {
          if (!v748) {
            goto LABEL_2167;
          }
        }

        else
        {
          if (v748) {
            goto LABEL_2167;
          }
          if (v749 == 26)
          {
            *(_WORD *)(v240 + 6) = *((_DWORD *)v12 + 4);
          }

          else if (v749 == 27)
          {
            uint64_t v750 = WORD6(__buf[1]);
            if (WORD6(__buf[1]))
            {
              v751 = (__int16 *)(*((void *)&__buf[0] + 1) + 20LL);
              do
              {
                __int16 v752 = *v751;
                v751 += 32;
                if ((v752 & 1) != 0) {
                  goto LABEL_2167;
                }
              }

              while (--v750);
            }
          }
        }

        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x1Eu:
        uint64_t v248 = *((int *)v12 + 3);
        unint64_t v249 = v1567 + (v248 << 6);
        if ((*(_WORD *)(v249 + 20) & 0x24) != 0) {
          goto LABEL_267;
        }
        __int128 v250 = *(_OWORD *)v249;
        __int128 v251 = *(_OWORD *)(v249 + 16);
        __int128 v252 = *(_OWORD *)(v249 + 48);
        __buf[2] = *(_OWORD *)(v249 + 32);
        __buf[3] = v252;
        __buf[1] = v251;
        __buf[0] = v250;
        sub_1812AB614((uint64_t)__buf, 67, v1554);
        uint64_t v11 = v1564;
        if ((BYTE4(__buf[1]) & 4) == 0) {
          goto LABEL_2168;
        }
        int64_t v253 = *(void *)&__buf[0];
LABEL_268:
        uint64_t v254 = *(void *)(*(void *)(v11 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v255 = *(void *)(v254 + 40);
        int v1568 = 0;
        int v256 = sub_181305CF8(v255, v253, 0, &v1568);
        LODWORD(v19) = v256;
        *(void *)(v254 + 72) = v253;
        *(_WORD *)(v254 + 2) = 0;
        int v257 = v1568;
        *(_DWORD *)(v254 + 24) = 0;
        *(_DWORD *)(v254 + 28) = v257;
        if (!v257)
        {
          if (!v256)
          {
            int v1555 = 0;
            v12 += 40;
            continue;
          }

          goto LABEL_2728;
        }

        if (!*((_DWORD *)v12 + 2))
        {
          int v1433 = 105420;
          goto LABEL_2616;
        }

        int v1555 = v256;
        goto LABEL_2168;
      case 0x1Fu:
        uint64_t v248 = *((int *)v12 + 3);
LABEL_267:
        int64_t v253 = *(void *)(v1567 + (v248 << 6));
        uint64_t v11 = v1564;
        goto LABEL_268;
      case 0x20u:
      case 0x89u:
        uint64_t v11 = v1564;
        uint64_t v81 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v82 = *(_BYTE **)(v81 + 40);
        LODWORD(__buf[0]) = 0;
        if (v22 == 137)
        {
          *(_DWORD *)(v81 + 28) = -1;
          if (!*v82) {
            goto LABEL_21;
          }
        }

        else if (!*v82 && (v82[1] & 8) != 0)
        {
          int v1555 = 0;
          *(_WORD *)(v81 + 2) = 0;
          *(_DWORD *)(v81 + 24) = 0;
          v12 += 40;
          continue;
        }

        int v68 = sub_181309984((uint64_t)v82, __buf);
        int v662 = __buf[0];
        *(_WORD *)(v81 + 2) = LOBYTE(__buf[0]);
        *(_DWORD *)(v81 + 24) = 0;
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        goto LABEL_2167;
      case 0x21u:
        uint64_t v11 = v1564;
        uint64_t v258 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1)) + 40LL);
        int v259 = sub_18129B700((unsigned __int8 *)v258);
        if (v259 == 16) {
          goto LABEL_2167;
        }
        LODWORD(v19) = v259;
        if (v259) {
          goto LABEL_2728;
        }
        while (1)
        {
          uint64_t v260 = *(void *)(v258 + 136);
          if (*(_BYTE *)(v260 + 8)) {
            break;
          }
          int v68 = sub_18129BA78( v258,  bswap32(*(_DWORD *)(*(void *)(v260 + 80)
                                    + (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(void *)(v260 + 96)
                                                                                   + 2LL
                                                                                   * *(unsigned __int16 *)(v258 + 86))) & *(_WORD *)(v260 + 26)))));
          if (v68) {
            goto LABEL_2579;
          }
        }

        unint64_t v1001 = sub_1813051A0(v258);
        if ((v1001 & 0x8000000000000000LL) != 0)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        int v1555 = 0;
        goto LABEL_2168;
      case 0x22u:
      case 0x23u:
        ++*(_DWORD *)(v1564 + 288);
        ++*(_DWORD *)(v1564 + 208);
        goto LABEL_77;
      case 0x24u:
LABEL_77:
        uint64_t v11 = v1564;
        uint64_t v83 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v84 = *(void *)(v83 + 40);
        if (*(_BYTE *)v83 != 1)
        {
          int v146 = sub_18129B700(*(unsigned __int8 **)(v83 + 40));
          if (v146 == 16)
          {
            LODWORD(v19) = 0;
          }

          else
          {
            LODWORD(v19) = v146;
            if (!v146)
            {
              do
              {
                uint64_t v147 = *(void *)(v84 + 136);
                if (*(_BYTE *)(v147 + 8))
                {
                  int v149 = 0;
                  LODWORD(v19) = 0;
                  goto LABEL_1515;
                }

                int v148 = sub_18129BA78( v84,  bswap32(*(_DWORD *)(*(void *)(v147 + 80)
                                           + (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(void *)(v147 + 96)
                                                                                          + 2LL
                                                                                          * *(unsigned __int16 *)(v84 + 86))) & *(_WORD *)(v147 + 26)))));
              }

              while (!v148);
              LODWORD(v19) = v148;
              int v149 = 0;
LABEL_1515:
              *(_BYTE *)(v83 + 3) = 0;
              *(_DWORD *)(v83 + 24) = 0;
              goto LABEL_1516;
            }
          }

          int v149 = 1;
          goto LABEL_1515;
        }

        if (!*(_BYTE *)(v84 + 88))
        {
          if (*(void *)(v84 + 56))
          {
            LODWORD(v19) = sub_18130B0F0((void *)(v84 + 96), (unsigned int **)(v84 + 56));
            int v149 = 0;
            goto LABEL_1516;
          }

          int v149 = 1;
          goto LABEL_1517;
        }

        uint64_t v1486 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        sub_18130B3C8(v84);
        LODWORD(v19) = v85;
        uint64_t v1489 = v84;
        if (*(_BYTE *)(v84 + 91))
        {
          unint64_t v86 = *(unsigned __int8 *)(v84 + 91) + 1LL;
          uint64_t v87 = v84 + 104LL * *(unsigned __int8 *)(v84 + 91) - 8;
          while (1)
          {
            uint64_t v89 = *(void *)v87;
            if (*(void *)v87) {
              break;
            }
            LODWORD(v88) = 0;
LABEL_82:
            if (!(_DWORD)v19) {
              LODWORD(v19) = v88;
            }
            --v86;
            v87 -= 104LL;
            if (v86 <= 1) {
              goto LABEL_776;
            }
          }

          int v1556 = v19;
          if (*(void *)v89) {
            LODWORD(v88) = (*(uint64_t (**)(void))v89)(*(void *)(v89 + 8));
          }
          else {
            uint64_t v88 = *(void *)(v89 + 16);
          }
          unint64_t v90 = v17;
          uint64_t v91 = &off_18C4653A8;
          if (dword_18C465380)
          {
            int v92 = v1565;
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v89);
            --qword_18C468B10;
            off_18C4653A8(v89);
            uint64_t v89 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_96;
            }
            uint64_t v91 = &xmmword_18C465410;
          }

          else
          {
            int v92 = v1565;
          }

          (*v91)(v89);
LABEL_96:
          v1565 = v92;
          *(_DWORD *)(v87 + 8) = 0;
          *(void *)uint64_t v87 = 0LL;
          uint64_t v13 = v1500;
          unint64_t v17 = v90;
          LODWORD(v19) = v1556;
          goto LABEL_82;
        }

LABEL_776:
        if ((_DWORD)v19) {
          goto LABEL_2594;
        }
        uint64_t v681 = v1489;
        uint64_t v1485 = *(void *)(*(void *)(v1489 + 112) + 32LL);
        int v682 = *(unsigned __int8 *)(v1489 + 92);
        v683 = sub_18130B970;
        if (v682 == 2) {
          v683 = sub_18130B798;
        }
        if (v682 == 1) {
          v683 = sub_18130B628;
        }
        uint64_t v684 = *(unsigned __int8 *)(v1489 + 91);
        uint64_t v11 = v1564;
        if (!*(_BYTE *)(v1489 + 91)) {
          goto LABEL_1338;
        }
        if ((_DWORD)v684 == 1)
        {
          uint64_t v685 = 0LL;
LABEL_1329:
          uint64_t v910 = v684 - v685;
          v911 = (void *)(v1489 + 104LL * v685 + 160);
          do
          {
            void *v911 = v683;
            v911 += 13;
            --v910;
          }

          while (v910);
          goto LABEL_1331;
        }

        uint64_t v685 = v684 & 0xFE;
        v908 = (void *)(v1489 + 264);
        uint64_t v909 = v685;
        do
        {
          *(v908 - 13) = v683;
          void *v908 = v683;
          v908 += 26;
          v909 -= 2LL;
        }

        while (v909);
        if (v685 != v684) {
          goto LABEL_1329;
        }
LABEL_1331:
        if (v684 >= 2)
        {
          int v912 = 2;
          do
          {
            int v913 = v912;
            v912 *= 2;
          }

          while (v913 < (int)v684);
          size_t v914 = 84 * v913 + 32;
          v915 = (int *)sub_18126F0AC(v914);
          if (!v915) {
            goto LABEL_2718;
          }
          v916 = v915;
          bzero(v915, v914);
          int *v916 = v913;
          *((void *)v916 + 3) = v916 + 8;
          uint64_t v681 = v1489;
          *((void *)v916 + 1) = 0LL;
          *((void *)v916 + 2) = &v916[20 * v913 + 8];
          goto LABEL_1339;
        }

LABEL_1338:
        v916 = 0LL;
LABEL_1339:
        unint64_t v917 = 0LL;
        uint64_t v1484 = v681 + 96;
        v1519 = v12;
        unint64_t v1529 = v17;
        unsigned int v1543 = v18;
        do
        {
          while (1)
          {
            unint64_t v918 = *(unsigned __int8 *)(v681 + 91);
            if (v917 >= v918)
            {
              if (!*(_BYTE *)(v681 + 89))
              {
                *((void *)v916 + 1) = v1484;
                uint64_t v1105 = *v916;
                if ((int)v1105 >= 1)
                {
                  v1497 = v916;
                  uint64_t v1106 = 0LL;
                  uint64_t v1107 = 80 * v1105;
                  uint64_t v83 = v1486;
                  uint64_t v1108 = v1489;
                  do
                  {
                    uint64_t v1110 = *((void *)v1497 + 3) + v1106;
                    uint64_t v1111 = *(void *)(v1110 + 72);
                    if (v1111)
                    {
                      if (*(_DWORD *)(v1111 + 32))
                      {
                        uint64_t v1112 = v18;
                        v1113 = *(void **)v1111;
                        **(void **)uint64_t v1111 = 0LL;
                        v1114 = (void *)sub_18126F0AC(24LL);
                        if (!v1114)
                        {
                          LODWORD(v19) = 7;
                          uint64_t v18 = v1112;
                          uint64_t v11 = v1564;
                          uint64_t v83 = v1486;
                          uint64_t v1108 = v1489;
                          v916 = v1497;
                          goto LABEL_2246;
                        }

                        v1115 = v1114;
                        if ((((int)v1114 / 17) & 1) != 0)
                        {
                          void *v1114 = sub_18130D174;
                          v1114[1] = v1110;
                        }

                        else
                        {
                          void *v1114 = 0LL;
                          int v1116 = sub_18130C260(v1110, 1);
                          *(_DWORD *)(**(void **)(v1110 + 72) + 8LL) = 1;
                          uint64_t v13 = v1500;
                          v1115[2] = v1116;
                        }

                        void *v1113 = v1115;
                        uint64_t v18 = v1112;
                        uint64_t v83 = v1486;
                        uint64_t v1108 = v1489;
                      }

                      else
                      {
                        int v1109 = sub_18130C260(*((void *)v1497 + 3) + v1106, 0);
                        if (v1109)
                        {
                          LODWORD(v19) = v1109;
                          uint64_t v11 = v1564;
                          v916 = v1497;
                          goto LABEL_2246;
                        }
                      }
                    }

                    v1106 += 80LL;
                  }

                  while (v1107 != v1106);
                  v916 = v1497;
                  uint64_t v1283 = *v1497;
                  uint64_t v11 = v1564;
                  if ((int)v1283 >= 2)
                  {
                    unsigned int v1284 = 2 * v1283 - 2;
                    do
                    {
                      int v1287 = *v1497 / 2;
                      if (v1283 <= v1287)
                      {
                        uint64_t v1289 = *((void *)v1497 + 2);
                        unsigned int v1288 = *(_DWORD *)(v1289 + 4LL * v1284);
                        unsigned int v1286 = *(_DWORD *)(v1289 + 4LL * (v1284 + 1));
                      }

                      else
                      {
                        unsigned int v1288 = v1284 - 2 * v1287;
                        unsigned int v1286 = v1288 + 1;
                      }

                      uint64_t v1290 = *((void *)v1497 + 3);
                      if (*(void *)(v1290 + 80LL * (int)v1288 + 24))
                      {
                        if (*(void *)(v1290 + 80LL * (int)v1286 + 24))
                        {
                          uint64_t v1285 = *((void *)v1497 + 1);
                          LODWORD(__buf[0]) = 0;
                        }

                        else
                        {
                          unsigned int v1286 = v1288;
                        }
                      }

                      *(_DWORD *)(*((void *)v1497 + 2) + 4LL * --v1283) = v1286;
                      v1284 -= 2;
                      uint64_t v11 = v1564;
                    }

                    while ((unint64_t)(v1283 + 1) > 2);
                  }
                }

                uint64_t v1108 = v1489;
                LODWORD(v19) = *(unsigned __int8 *)(*(void *)(v1489 + 120) + 31LL);
                uint64_t v83 = v1486;
LABEL_2246:
                int v149 = 0;
                *(void *)(v1108 + 24) = v916;
                goto LABEL_1516;
              }

              int v967 = v918 - 1;
              uint64_t v968 = v681 + 104LL * v967;
              uint64_t v970 = *(void *)(v968 + 120);
              v969 = (uint64_t *)(v968 + 120);
              if (!v970)
              {
                uint64_t v971 = v681 + 104LL * v967;
                uint64_t v973 = *(void *)(v971 + 112);
                uint64_t v972 = v971 + 112;
                uint64_t v974 = *(void *)(v973 + 40);
                unint64_t v975 = (unint64_t)*(unsigned __int16 *)(v974 + 6) << 6;
                uint64_t v976 = *(void *)(v974 + 16);
                if (v976) {
                  uint64_t v977 = sub_1812F2264(v976, v975 + 104);
                }
                else {
                  uint64_t v977 = sub_18126F0AC(v975 + 104);
                }
                if (!v977)
                {
                  uint64_t v11 = v1564;
LABEL_2708:
                  uint64_t *v969 = 0LL;
                  if (v916)
                  {
                    if (*v916 >= 1)
                    {
                      uint64_t v1459 = 0LL;
                      uint64_t v1460 = 0LL;
                      do
                      {
                        sub_181302560(*((void *)v916 + 3) + v1459);
                        ++v1460;
                        v1459 += 80LL;
                      }

                      while (v1460 < *v916);
                    }

                    v1461 = (void (**)(unsigned int *))&off_18C4653A8;
                    if (dword_18C465380)
                    {
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8 -= (int)off_18C4653B8(v916);
                      --qword_18C468B10;
                      off_18C4653A8(v916);
                      v916 = (int *)xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70)
                      {
                        LODWORD(v19) = 7;
                        uint64_t v11 = v1564;
                        uint64_t v13 = v1500;
                        goto LABEL_2728;
                      }

                      v1461 = (void (**)(unsigned int *))&xmmword_18C465410;
                      uint64_t v11 = v1564;
                      uint64_t v13 = v1500;
                    }

                    (*v1461)((unsigned int *)v916);
                    LODWORD(v19) = 7;
                    goto LABEL_2728;
                  }

LABEL_2718:
                  LODWORD(v19) = 7;
                  goto LABEL_2728;
                }

                *(void *)uint64_t v977 = v974;
                *(void *)(v977 + 8) = v977 + 40;
                uint64_t *v969 = v977;
                *(_WORD *)(v977 + 28) = *(_WORD *)(*(void *)(*(void *)v972 + 40LL) + 6LL);
                *(_BYTE *)(v977 + 31) = 0;
                uint64_t v11 = v1564;
              }

              if (v1485) {
                uint64_t v1341 = sub_1812F2264(v1485, 0x50uLL);
              }
              else {
                uint64_t v1341 = sub_18126F0AC(80LL);
              }
              uint64_t v1342 = v1341;
              if (v1341)
              {
                *(_OWORD *)(v1341 + 48) = 0u;
                *(_OWORD *)(v1341 + 64) = 0u;
                uint64_t v1343 = (uint64_t)(v969 - 3);
                *(_OWORD *)(v1342 + 16) = 0u;
                *(_OWORD *)(v1342 + 32) = 0u;
                *(_OWORD *)uint64_t v1342 = 0u;
                *(void *)(v681 + 16) = v1342;
                uint64_t v1563 = v1342;
                v1344 = (int **)(v1342 + 72);
                int v68 = sub_18130C0FC(v1343, v916, (uint64_t *)(v1342 + 72));
                if (v68) {
                  goto LABEL_2579;
                }
                v1345 = *v1344;
                v1345[8] = 1;
                *(void *)(*(void *)v1345 + 96LL) -= v1345[6];
                unint64_t v1346 = *(unsigned __int8 *)(v681 + 91);
                if (v1346 >= 2)
                {
                  uint64_t v1347 = (v1346 - 1);
                  v1348 = (int **)(*((void *)v916 + 3) + 72LL);
                  do
                  {
                    v1349 = *v1348;
                    if (*v1348)
                    {
                      v1349[8] = 1;
                      *(void *)(*(void *)v1349 + 96LL) -= v1349[6];
                    }

                    v1348 += 10;
                    --v1347;
                  }

                  while (v1347);
                }

                v1499 = v916;
                uint64_t v1350 = -1LL;
                for (uint64_t k = 72LL; ; k += 80LL)
                {
                  while (1)
                  {
                    if (++v1350 >= (unint64_t)*(unsigned __int8 *)(v681 + 91))
                    {
                      LODWORD(v19) = sub_18130C260(v1563, 2);
                      int v149 = 0;
                      uint64_t v18 = v1543;
                      uint64_t v83 = v1486;
                      goto LABEL_1516;
                    }

                    unint64_t v1352 = v17;
                    uint64_t v1353 = *((void *)v1499 + 3);
                    uint64_t v1354 = *(void *)(v1353 + k);
                    if (v1354) {
                      break;
                    }
                    LODWORD(v19) = 0;
LABEL_2377:
                    uint64_t v11 = v1564;
                    unint64_t v17 = v1352;
                    k += 80LL;
                    if ((_DWORD)v19) {
                      goto LABEL_2690;
                    }
                  }

                  if (!*(_DWORD *)(v1354 + 32))
                  {
                    LODWORD(v19) = sub_18130C260(v1353 + k - 72, 1);
                    goto LABEL_2377;
                  }

                  v1355 = v12;
                  v1356 = *(void **)v1354;
                  **(void **)uint64_t v1354 = 0LL;
                  v1357 = (void *)sub_18126F0AC(24LL);
                  if (!v1357)
                  {
                    LODWORD(v19) = 7;
                    uint64_t v11 = v1564;
                    unint64_t v17 = v1352;
                    LOBYTE(v18) = v1543;
                    uint64_t v12 = v1355;
                    goto LABEL_2728;
                  }

                  v1358 = v1357;
                  if ((((int)v1357 / 17) & 1) != 0)
                  {
                    void *v1357 = sub_18130D174;
                    v1357[1] = v1353 + k - 72;
                  }

                  else
                  {
                    void *v1357 = 0LL;
                    int v1359 = sub_18130C260(v1353 + k - 72, 1);
                    *(_DWORD *)(**(void **)(v1353 + k) + 8LL) = 1;
                    v1358[2] = v1359;
                  }

                  void *v1356 = v1358;
                  uint64_t v11 = v1564;
                  unint64_t v17 = v1352;
                  uint64_t v12 = v1355;
                  uint64_t v681 = v1489;
                }
              }

              v969 = (uint64_t *)(v681 + 16);
              goto LABEL_2708;
            }

            uint64_t v919 = v681 + 104 * v917;
            uint64_t v922 = *(int *)(v919 + 152);
            v921 = (int *)(v919 + 152);
            uint64_t v920 = v922;
            if ((_DWORD)v922) {
              break;
            }
            ++v917;
          }

          double v1571 = 0.0;
          unint64_t v1503 = v917;
          uint64_t v1539 = (uint64_t)(v921 - 14);
          if ((int)v920 < 17)
          {
            uint64_t v1570 = 0LL;
            LODWORD(v19) = sub_18130C53C((uint64_t)(v921 - 14), v920, &v1570, (int **)&v1571);
            double v929 = v1571;
            if (!(_DWORD)v19) {
              goto LABEL_1440;
            }
LABEL_1350:
            if (v929 == 0.0) {
              goto LABEL_1443;
            }
            int v930 = v19;
            if ((int)**(_DWORD **)&v929 >= 1)
            {
              uint64_t v931 = 0LL;
              uint64_t v932 = 0LL;
              do
              {
                sub_181302560(*(void *)(*(void *)&v929 + 24LL) + v931);
                ++v932;
                v931 += 80LL;
              }

              while (v932 < (int)**(_DWORD **)&v929);
            }

            v933 = (void (**)(int *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8 -= (int)off_18C4653B8(*(void *)&v929);
              --qword_18C468B10;
              off_18C4653A8(*(void *)&v929);
              double v929 = *(double *)&xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_1360;
              }
              v933 = (void (**)(int *))&xmmword_18C465410;
            }

            (*v933)(*(int **)&v929);
LABEL_1360:
            unint64_t v17 = v1529;
            LODWORD(v19) = v930;
            uint64_t v681 = v1489;
            unint64_t v917 = v1503;
            goto LABEL_1444;
          }

          v1492 = v921;
          unint64_t v923 = v17;
          int v924 = 0;
          int v925 = -1;
          uint64_t v926 = 16LL;
          do
          {
            int v927 = v924;
            v926 *= 16LL;
            ++v925;
            ++v924;
          }

          while (v926 < v920);
          uint64_t v1570 = 0LL;
          uint64_t v928 = v1539;
          if (off_18C465520 && off_18C465520(100LL))
          {
            LODWORD(v19) = 7;
            uint64_t v11 = v1564;
            unint64_t v17 = v923;
            uint64_t v681 = v1489;
            goto LABEL_1444;
          }

          double v934 = COERCE_DOUBLE(sub_18126F0AC(1376LL));
          if (v934 == 0.0)
          {
            LODWORD(v19) = 7;
            uint64_t v11 = v1564;
            unint64_t v17 = v1529;
            uint64_t v681 = v1489;
            goto LABEL_1444;
          }

          double v929 = v934;
          bzero(*(void **)&v934, 0x560uLL);
          **(_DWORD **)&double v929 = 16;
          *(void *)(*(void *)&v929 + 8LL) = 0LL;
          *(void *)(*(void *)&v929 + 16LL) = *(void *)&v929 + 1312LL;
          *(void *)(*(void *)&v929 + 24LL) = *(void *)&v929 + 32LL;
          double v1571 = v929;
          int v935 = *v1492;
          if (*v1492 < 1)
          {
            uint64_t v11 = v1564;
            uint64_t v681 = v1489;
            goto LABEL_1440;
          }

          int v936 = 0;
          int v937 = 0;
          v1495 = v916;
          while (1)
          {
            v1569 = 0LL;
            int v1509 = v937;
            int v938 = v935 - v937;
            if (v938 >= 16) {
              int v939 = 16;
            }
            else {
              int v939 = v938;
            }
            int v940 = sub_18130C53C(v928, v939, &v1570, &v1569);
            if (v940)
            {
              LODWORD(v19) = v940;
              uint64_t v11 = v1564;
              uint64_t v18 = v1543;
              uint64_t v681 = v1489;
              goto LABEL_1350;
            }

            int v941 = sub_18130C0FC(v928, v1569, (uint64_t *)__buf);
            LODWORD(v19) = v941;
            if (v925)
            {
              int v942 = 1;
              int v943 = v927;
              do
              {
                v942 *= 16;
                --v943;
              }

              while (v943);
              int v944 = v927;
              double v945 = v929;
              if (!v941)
              {
                while (1)
                {
                  if (v936 / v942 <= 0) {
                    int v946 = -(-(v936 / v942) & 0xF);
                  }
                  else {
                    int v946 = (v936 / v942) & 0xF;
                  }
                  uint64_t v947 = *(void *)(*(void *)&v945 + 24LL) + 80LL * v946;
                  uint64_t v950 = *(void *)(v947 + 72);
                  v949 = (uint64_t *)(v947 + 72);
                  uint64_t v948 = v950;
                  if (!v950)
                  {
                    if (off_18C465520 && off_18C465520(100LL)
                      || (v951 = (int *)sub_18126F0AC(1376LL)) == 0LL)
                    {
                      LODWORD(v19) = 7;
                      break;
                    }

                    v952 = v951;
                    bzero(v951, 0x560uLL);
                    int *v952 = 16;
                    *((void *)v952 + 1) = 0LL;
                    *((void *)v952 + 2) = v952 + 328;
                    *((void *)v952 + 3) = v952 + 8;
                    int v953 = sub_18130C0FC(v1539, v952, v949);
                    if (v953)
                    {
                      LODWORD(v19) = v953;
                      break;
                    }

                    uint64_t v948 = *v949;
                  }

                  double v945 = *(double *)(v948 + 8);
                  v942 /= 16;
                  if (!--v944) {
                    goto LABEL_1384;
                  }
                }
              }

LABEL_1387:
              v954 = *(void **)&__buf[0];
              if (!*(void *)&__buf[0])
              {
                uint64_t v11 = v1564;
                uint64_t v18 = v1543;
                uint64_t v681 = v1489;
                v916 = v1495;
                unint64_t v917 = v1503;
                goto LABEL_1350;
              }

              int v1560 = v19;
              if (!*(_DWORD *)(*(void *)&__buf[0] + 32LL)) {
                goto LABEL_1417;
              }
              uint64_t v955 = **(void **)&__buf[0];
              uint64_t v956 = ***(void ***)&__buf[0];
              if (!v956)
              {
LABEL_1399:
                uint64_t v958 = v954[5];
                if (v958)
                {
                  if (*(void *)v958)
                  {
                    (*(void (**)(void))(*(void *)v958 + 8LL))(v954[5]);
                    *(void *)uint64_t v958 = 0LL;
                  }

                  v959 = &off_18C4653A8;
                  if (dword_18C465380)
                  {
                    if ((void)xmmword_18C468B70) {
                      xmmword_18C465400(xmmword_18C468B70);
                    }
                    qword_18C468AC8 -= (int)off_18C4653B8(v958);
                    --qword_18C468B10;
                    off_18C4653A8(v958);
                    uint64_t v958 = xmmword_18C468B70;
                    if (!(void)xmmword_18C468B70) {
                      goto LABEL_1408;
                    }
                    v959 = &xmmword_18C465410;
                  }

                  (*v959)(v958);
                }

LABEL_1408:
                uint64_t v960 = v954[7];
                if (!v960) {
                  goto LABEL_1417;
                }
                if (*(void *)v960)
                {
                  (*(void (**)(void))(*(void *)v960 + 8LL))(v954[7]);
                  *(void *)uint64_t v960 = 0LL;
                }

                v961 = &off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_1416;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8 -= (int)off_18C4653B8(v960);
                --qword_18C468B10;
                off_18C4653A8(v960);
                uint64_t v960 = xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  v961 = &xmmword_18C465410;
LABEL_1416:
                  (*v961)(v960);
                }

LABEL_1417:
                v962 = (int *)v954[1];
                if (!v962) {
                  goto LABEL_1427;
                }
                if (*v962 >= 1)
                {
                  uint64_t v963 = 0LL;
                  uint64_t v964 = 0LL;
                  do
                  {
                    sub_181302560(*((void *)v962 + 3) + v963);
                    ++v964;
                    v963 += 80LL;
                  }

                  while (v964 < *v962);
                }

                v965 = (void (**)(int *))&off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8 -= (int)off_18C4653B8(v962);
                  --qword_18C468B10;
                  off_18C4653A8(v962);
                  v962 = (int *)xmmword_18C468B70;
                  if (!(void)xmmword_18C468B70)
                  {
LABEL_1427:
                    v966 = &off_18C4653A8;
                    if (dword_18C465380)
                    {
                      uint64_t v928 = v1539;
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8 -= (int)off_18C4653B8(v954);
                      --qword_18C468B10;
                      off_18C4653A8(v954);
                      v954 = (void *)xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70) {
                        goto LABEL_1434;
                      }
                      v966 = &xmmword_18C465410;
                    }

                    else
                    {
                      uint64_t v928 = v1539;
                    }

                    (*v966)(v954);
LABEL_1434:
                    unint64_t v917 = v1503;
                    goto LABEL_1435;
                  }

                  v965 = (void (**)(int *))&xmmword_18C465410;
                }

                (*v965)(v962);
                goto LABEL_1427;
              }

              if (*(void *)v956) {
                (*(void (**)(void))v956)(*(void *)(v956 + 8));
              }
              v957 = &off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8 -= (int)off_18C4653B8(v956);
                --qword_18C468B10;
                off_18C4653A8(v956);
                uint64_t v956 = xmmword_18C468B70;
                if (!(void)xmmword_18C468B70) {
                  goto LABEL_1398;
                }
                v957 = &xmmword_18C465410;
              }

              (*v957)(v956);
LABEL_1398:
              *(_DWORD *)(v955 + 8) = 0;
              *(void *)uint64_t v955 = 0LL;
              goto LABEL_1399;
            }

            double v945 = v929;
            if (v941) {
              goto LABEL_1387;
            }
LABEL_1384:
            int v1560 = 0;
            *(void *)(*(void *)(*(void *)&v945 + 24LL) + 80LL * (v936 & 0xF) + 72) = *(void *)&__buf[0];
            unint64_t v917 = v1503;
            uint64_t v928 = v1539;
LABEL_1435:
            int v937 = v1509 + 16;
            v916 = v1495;
            int v935 = *v1492;
            if (v1509 + 16 >= *v1492) {
              break;
            }
            ++v936;
            LODWORD(v19) = v1560;
            if (v1560)
            {
              uint64_t v11 = v1564;
              uint64_t v18 = v1543;
              goto LABEL_1449;
            }
          }

          uint64_t v11 = v1564;
          uint64_t v18 = v1543;
          LODWORD(v19) = v1560;
LABEL_1449:
          uint64_t v681 = v1489;
          if ((_DWORD)v19) {
            goto LABEL_1350;
          }
LABEL_1440:
          if (v916)
          {
            LODWORD(v19) = sub_18130C0FC(v1539, *(int **)&v929, (uint64_t *)(*((void *)v916 + 3) + 80 * v917 + 72));
          }

          else
          {
            LODWORD(v19) = 0;
            v916 = *(int **)&v929;
          }

LABEL_1443:
          unint64_t v17 = v1529;
LABEL_1444:
          uint64_t v12 = v1519;
          ++v917;
        }

        while (!(_DWORD)v19);
        if (v916)
        {
          int v978 = v19;
          if (*v916 >= 1)
          {
            uint64_t v979 = 0LL;
            uint64_t v980 = 0LL;
            do
            {
              sub_181302560(*((void *)v916 + 3) + v979);
              ++v980;
              v979 += 80LL;
            }

            while (v980 < *v916);
          }

          v981 = (void (**)(unsigned int *))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v916);
            --qword_18C468B10;
            off_18C4653A8(v916);
            v916 = (int *)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              v981 = (void (**)(unsigned int *))&xmmword_18C465410;
              goto LABEL_1464;
            }
          }

          else
          {
LABEL_1464:
            (*v981)((unsigned int *)v916);
          }

          int v149 = 0;
          LODWORD(v19) = v978;
          uint64_t v83 = v1486;
LABEL_1516:
          if (!(_DWORD)v19)
          {
LABEL_1517:
            int v1555 = 0;
            *(_BYTE *)(v83 + 2) = v149;
            if (v149)
            {
              int v134 = *((_DWORD *)v12 + 2);
              goto LABEL_1519;
            }

            goto LABEL_21;
          }
        }

LABEL_2728:
        int v1462 = 7;
        if (!*(_BYTE *)(v13 + 103))
        {
          int v1462 = v19;
          if ((_DWORD)v19 == 8458) {
            int v1462 = sub_1812FBF50(108919);
          }
        }

        if (!*(void *)(v11 + 168) && v1462 != 3082)
        {
          v1463 = "abort due to ROLLBACK";
          if (v1462 != 516)
          {
            if (v1462 == 101)
            {
              v1463 = "no more rows available";
            }

            else if (v1462 == 100)
            {
              v1463 = "another row available";
            }

            else
            {
              v1463 = "unknown error";
              if (v1462 <= 0x1Cu)
              {
                v1463 = "unknown error";
                if (((0x1410004uLL >> v1462) & 1) == 0) {
                  v1463 = off_189B6EC30[v1462];
                }
              }
            }
          }

          sub_181302AB0((uint64_t *)v11, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, (char)v1463);
        }

        *(_DWORD *)(v11 + 52) = v1462;
        if (v1462 != 3082 && (v1462 & 0xFB) == 0xA)
        {
          int v1464 = 0;
          v1465 = *(uint64_t (**)(void))(*(void *)v13 + 128LL);
          if (v1465) {
            int v1464 = v1465();
          }
          *(_DWORD *)(v13 + 92) = v1464;
        }

        sqlite3_log( v1462,  "statement aborts at %d: [%s] %s",  -858993459 * ((v12 - v1565) >> 3),  *(const char **)(v11 + 320),  *(const char **)(v11 + 168));
        if (*(_BYTE *)(v11 + 267) == 2) {
          sub_18127A498(v11);
        }
        if (v1462 != 11)
        {
          if (v1462 == 3082 && !*(_BYTE *)(v13 + 103) && !*(_BYTE *)(v13 + 104))
          {
            *(_BYTE *)(v13 + 103) = 1;
            ++*(_DWORD *)(v13 + 432);
            *(_WORD *)(v13 + 436) = 0;
            uint64_t v1472 = *(void *)(v13 + 344);
            if (v1472)
            {
              sub_1812DC47C(v1472, "out of memory", v1466, v1467, v1468, v1469, v1470, v1471, v1483);
              for (uint64_t m = *(void *)(v13 + 344); ; ++*(_DWORD *)(m + 48))
              {
                *(_DWORD *)(m + 24) = 7;
                uint64_t m = *(void *)(m + 256);
                if (!m) {
                  break;
                }
              }
            }
          }

LABEL_2760:
          if ((_BYTE)v18) {
            goto LABEL_2761;
          }
LABEL_2769:
          uint64_t v1453 = 1LL;
          LOBYTE(v18) = 0;
          goto LABEL_2770;
        }

        if (*(_BYTE *)(v13 + 101)) {
          goto LABEL_2760;
        }
        *(void *)(v13 + 48) |= 0x200000000uLL;
        if (!(_BYTE)v18) {
          goto LABEL_2769;
        }
LABEL_2761:
        uint64_t v1474 = *(void *)(v13 + 32);
        uint64_t v1475 = *(void *)(v1474 + 32LL * (v18 - 1) + 24);
        *(_WORD *)(v1475 + 114) |= 8u;
        *(_WORD *)(*(void *)(v1474 + 56) + 114LL) |= 8u;
        *(_DWORD *)(v13 + 44) &= ~0x10u;
        if (!*(_DWORD *)(v13 + 72))
        {
          int v1476 = *(_DWORD *)(v13 + 40);
          if (v1476 >= 1)
          {
            uint64_t v1477 = 0LL;
            uint64_t v1478 = 24LL;
            do
            {
              uint64_t v1479 = *(void *)(*(void *)(v13 + 32) + v1478);
              if ((*(_WORD *)(v1479 + 114) & 8) != 0)
              {
                sub_1813070A0(v1479);
                int v1476 = *(_DWORD *)(v13 + 40);
              }

              ++v1477;
              v1478 += 32LL;
            }

            while (v1477 < v1476);
          }
        }

        uint64_t v1453 = 1LL;
LABEL_2770:
        while (v17 >= v16)
        {
          v1480 = *(unsigned int (**)(void))(v13 + 544);
          if (!v1480) {
            break;
          }
          v16 += *(unsigned int *)(v13 + 560);
          if (v1480(*(void *)(v13 + 552))) {
            goto LABEL_2727;
          }
        }

        *(_DWORD *)(v11 + 296) += v17;
        *(_DWORD *)(v11 + 216) += v17;
        if (*(_DWORD *)(v11 + 276)) {
          sub_181302B04(v11);
        }
        return v1453;
      case 0x25u:
        uint64_t v11 = v1564;
        uint64_t v261 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v262 = *(void *)(v261 + 40);
        if (*(_BYTE *)(v262 + 88))
        {
          if (*(_BYTE *)(v262 + 89))
          {
            int v263 = sub_18130C9D8(*(void *)(v262 + 16));
            if (v263) {
              goto LABEL_284;
            }
            if (!*(void *)(*(void *)(v262 + 16) + 24LL)) {
              goto LABEL_1591;
            }
            goto LABEL_1054;
          }

          LODWORD(__buf[0]) = 0;
          int v263 = sub_18130D008(*(void *)(v262 + 24), __buf);
          if (v263) {
            BOOL v1034 = 1;
          }
          else {
            BOOL v1034 = LODWORD(__buf[0]) == 0;
          }
          if (v1034)
          {
LABEL_284:
            LODWORD(v19) = v263;
            *(_DWORD *)(v261 + 24) = 0;
            if (v263 == 101)
            {
LABEL_1592:
              int v1035 = 0;
              *(_BYTE *)(v261 + 2) = 1;
LABEL_1663:
              if (!*(_DWORD *)(v13 + 424))
              {
                int v1555 = v1035;
                while (v17 >= v16)
                {
                  v1062 = *(unsigned int (**)(void))(v13 + 544);
                  if (!v1062) {
                    break;
                  }
                  v16 += *(unsigned int *)(v13 + 560);
                  if (v1062(*(void *)(v13 + 552)))
                  {
LABEL_2727:
                    LODWORD(v19) = 9;
                    unint64_t v16 = -1LL;
                    goto LABEL_2728;
                  }
                }

                goto LABEL_21;
              }

              LODWORD(v19) = 9;
              goto LABEL_2728;
            }

            if (v263) {
              goto LABEL_2728;
            }
            goto LABEL_1055;
          }
        }

        else
        {
          v791 = *(void **)(v262 + 56);
          *(void *)(v262 + 56) = v791[1];
          v791[1] = 0LL;
          if (!*(void *)(v262 + 64))
          {
            do
            {
              v792 = (void *)v791[1];
              sub_1812F20DC((void *)v13, v791);
              v791 = v792;
            }

            while (v792);
          }

          if (*(void *)(v262 + 56))
          {
LABEL_1054:
            *(_DWORD *)(v261 + 24) = 0;
LABEL_1055:
            int v1555 = 0;
            *(_BYTE *)(v261 + 2) = 0;
            uint64_t v793 = v11 + 4LL * *((unsigned __int16 *)v12 + 1);
            ++*(_DWORD *)(v793 + 280);
            ++*(_DWORD *)(v793 + 200);
LABEL_1660:
            uint64_t v12 = &v1565[40 * *((int *)v12 + 2) - 40];
LABEL_1661:
            uint64_t v11 = v1564;
            goto LABEL_1662;
          }
        }

LABEL_1591:
        *(_DWORD *)(v261 + 24) = 0;
        goto LABEL_1592;
      case 0x26u:
        uint64_t v11 = v1564;
        uint64_t v261 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v264 = *(void *)(v261 + 40);
        *(_BYTE *)(v264 + 1) &= 0xF1u;
        *(_WORD *)(v264 + 70) = 0;
        if (*(_BYTE *)v264 || !*(_WORD *)(v264 + 86) || !*(_BYTE *)(*(void *)(v264 + 136) + 8LL))
        {
          int v263 = sub_18130A018((unsigned __int8 *)v264);
          goto LABEL_284;
        }

        --*(_WORD *)(v264 + 86);
        goto LABEL_1054;
      case 0x27u:
        uint64_t v11 = v1564;
        uint64_t v261 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        int v263 = sub_18129CF68(*(void *)(v261 + 40));
        goto LABEL_284;
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Du:
        uint64_t v11 = v1564;
        uint64_t v60 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        __int16 v1573 = *((_DWORD *)v12 + 4);
        if (v22 >= 0x2A) {
          char v61 = 0;
        }
        else {
          char v61 = -1;
        }
        char v1574 = v61;
        unint64_t v62 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        uint64_t v63 = *(void *)(v60 + 40);
        double v1571 = *(double *)(v60 + 48);
        unint64_t v1572 = v62;
        sub_1812FFFE4(v63);
        signed int v64 = *(_DWORD *)(v63 + 64);
        if (v64 <= 0)
        {
          int v1433 = 106708;
          goto LABEL_2616;
        }

        WORD2(__buf[1]) = 0;
        *((void *)&__buf[1] + 1) = v13;
        LODWORD(__buf[2]) = 0;
        int v65 = *(unsigned __int16 *)(v63 + 68);
        double v66 = *(char **)(v63 + 56);
        int v67 = *(_DWORD *)(*(void *)(v63 + 136) + 88LL) - (_DWORD)v66;
        if (v65 > v67) {
          int v65 = v67 & ~(v67 >> 31);
        }
        *((void *)&__buf[0] + 1) = *(void *)(v63 + 56);
        if (v65 >= v64)
        {
          WORD2(__buf[1]) = 16400;
          LODWORD(__buf[1]) = v64;
        }

        else
        {
          int v68 = sub_1812A4B24(v63, 0, v64, (uint64_t)__buf);
          if (v68) {
            goto LABEL_2579;
          }
          signed int v64 = __buf[1];
          double v66 = (char *)*((void *)&__buf[0] + 1);
        }

        int v133 = sub_1813068A8(v64, v66, (uint64_t *)&v1571, 0);
        if (LODWORD(__buf[2])) {
          sub_181303838((uint64_t)__buf);
        }
        int v1555 = 0;
        if ((*v12 & 1) != 0) {
          int v134 = v133 + 1;
        }
        else {
          int v134 = -v133;
        }
LABEL_1519:
        if (v134 <= 0)
        {
LABEL_21:
          v12 += 40;
          continue;
        }

        goto LABEL_2168;
      case 0x2Bu:
      case 0x2Cu:
        uint64_t v93 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v94 = *(_WORD *)(v93 + 20);
        if ((v94 & 0x24) != 0)
        {
          BOOL v95 = *(void *)v93 == 0LL;
        }

        else
        {
          if ((v94 & 1) != 0)
          {
            uint64_t v861 = 2LL;
            goto LABEL_2182;
          }

          if ((v94 & 8) != 0)
          {
            a2.i64[0] = *(void *)v93;
          }

          else if ((v94 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_181303DB8(v93);
          }

          else
          {
            a2.i64[0] = 0LL;
          }

          BOOL v95 = *(double *)a2.i64 == 0.0;
        }

        uint64_t v861 = !v95;
LABEL_2182:
        uint64_t v1259 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        __int16 v1260 = *(_WORD *)(v1259 + 20);
        if ((v1260 & 0x24) != 0)
        {
          BOOL v1261 = *(void *)v1259 == 0LL;
        }

        else
        {
          if ((v1260 & 1) != 0)
          {
            uint64_t v1262 = 2LL;
            goto LABEL_2210;
          }

          if ((v1260 & 8) != 0)
          {
            a2.i64[0] = *(void *)v1259;
          }

          else if ((v1260 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_181303DB8(v1259);
          }

          else
          {
            a2.i64[0] = 0LL;
          }

          BOOL v1261 = *(double *)a2.i64 == 0.0;
        }

        uint64_t v1262 = !v1261;
LABEL_2210:
        uint64_t v1272 = v1262 + 3 * v861;
        if (*v12 == 44) {
          v1273 = (unsigned __int8 *)&unk_1813C6D4D;
        }
        else {
          v1273 = (unsigned __int8 *)&unk_1813C6D56;
        }
        uint64_t v1274 = v1273[v1272];
        uint64_t v1275 = *((int *)v12 + 3);
        if (v1274 == 2)
        {
          unint64_t v336 = v1567 + (v1275 << 6);
          __int16 v337 = *(_WORD *)(v336 + 20) & 0xF240;
LABEL_2215:
          *(_WORD *)(v336 + 20) = v337 | 1;
          v12 += 40;
        }

        else
        {
          unint64_t v1276 = v1567 + (v1275 << 6);
          *(void *)unint64_t v1276 = v1274;
          *(_WORD *)(v1276 + 20) = *(_WORD *)(v1276 + 20) & 0xF240 | 4;
          v12 += 40;
        }

        continue;
      case 0x2Eu:
        unint64_t v265 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        uint64_t v267 = (__int16 *)(v265 + 20);
        __int16 v266 = *(_WORD *)(v265 + 20);
        if ((v266 & 0x10) == 0) {
          goto LABEL_1657;
        }
        if (sub_1813073D4(*(void *)(v265 + 8), __buf))
        {
          uint64_t v268 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
          if ((*(_WORD *)(v268 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v268, *(uint64_t *)&__buf[0]);
          }

          else
          {
            *(void *)uint64_t v268 = *(void *)&__buf[0];
            *(_WORD *)(v268 + 20) = 4;
          }

          goto LABEL_1661;
        }

        __int16 v266 = *v267;
LABEL_1657:
        if ((v266 & 0x9000) != 0) {
          sub_181303888((int *)v265);
        }
        else {
          *uint64_t v267 = 1;
        }
        goto LABEL_1660;
      case 0x2Fu:
        uint64_t v269 = *((int *)v12 + 1);
        int v270 = *((_DWORD *)v12 + 4);
        uint64_t v271 = *((int *)v12 + 3);
        uint64_t v272 = v1567 + (v269 << 6);
        unint64_t v273 = v1567;
        unsigned int v274 = (uint64_t *)(v1567 + (v271 << 6));
        if (!v270) {
          goto LABEL_296;
        }
        unint64_t v273 = v1567;
        if (v270 < 0) {
          goto LABEL_21;
        }
LABEL_296:
        sub_1813072B4(*(void *)(v273 + (v269 << 6) + 8), *v274);
        v12 += 40;
        continue;
      case 0x30u:
        uint64_t v275 = (unsigned __int8 **)*((void *)v12 + 2);
        uint64_t v276 = *((int *)v12 + 3);
        if (!*((_WORD *)v12 + 1)) {
          goto LABEL_301;
        }
        uint64_t v277 = *(void *)(v1564 + 352);
        if (!v277) {
          goto LABEL_301;
        }
        do
        {
          uint64_t v277 = *(void *)(v277 + 8);
        }

        while (v277);
LABEL_301:
        if (*(_DWORD *)(v1564 + 368) >= *(_DWORD *)(v13 + 176))
        {
          v1445 = "too many levels of trigger recursion";
          goto LABEL_2655;
        }

        unint64_t v278 = v1567 + (v276 << 6);
        __int16 v280 = *(_WORD *)(v278 + 20);
        int v279 = (_WORD *)(v278 + 20);
        if ((v280 & 0x10) != 0)
        {
          __int128 v289 = *(char **)(v1567 + (v276 << 6) + 8);
          int v283 = *((_DWORD *)v289 + 22);
          unsigned __int16 v776 = *((_WORD *)v289 + 46);
          int v291 = *((_DWORD *)v275 + 4);
          uint64_t v11 = v1564;
        }

        else
        {
          unsigned int v1545 = v18;
          int v281 = *((_DWORD *)v275 + 4);
          int v282 = *((_DWORD *)v275 + 2);
          if (v281) {
            int v283 = v281 + *((_DWORD *)v275 + 3);
          }
          else {
            int v283 = *((_DWORD *)v275 + 3) + 1;
          }
          int v284 = 8 * v281;
          int v285 = v282 + 7;
          BOOL v1301 = v282 < -7;
          int v286 = v282 + 14;
          if (v1301) {
            int v285 = v286;
          }
          int v287 = v284 + (v285 >> 3) + (v283 << 6) + 112;
          __int128 v288 = (char *)sub_181268E34(v13, v287);
          if (!v288) {
            goto LABEL_2589;
          }
          __int128 v289 = v288;
          if ((*v279 & 0x9000) != 0 || *(_DWORD *)(v1567 + (v276 << 6) + 32)) {
            sub_181303838(v1567 + (v276 << 6));
          }
          _WORD *v279 = 4112;
          unint64_t v290 = v1567 + (v276 << 6);
          *(void *)(v290 + 8) = v289;
          *(_DWORD *)(v290 + 16) = v287;
          *(_BYTE *)(v290 + 56) = 0;
          *(void *)(v290 + 48) = sub_181307760;
          uint64_t v11 = v1564;
          *(void *)__int128 v289 = v1564;
          *((_DWORD *)v289 + 22) = v283;
          int v291 = *((_DWORD *)v275 + 4);
          *((_DWORD *)v289 + 23) = v291;
          *((_DWORD *)v289 + 19) = -858993459 * ((unint64_t)(v12 - v1565) >> 3);
          *((void *)v289 + 3) = *(void *)(v1564 + 104);
          *((_DWORD *)v289 + 21) = *(_DWORD *)(v1564 + 36);
          *((void *)v289 + 4) = *(void *)(v1564 + 120);
          *((_DWORD *)v289 + 18) = *(_DWORD *)(v1564 + 40);
          *((void *)v289 + 2) = *(void *)(v1564 + 136);
          *((_DWORD *)v289 + 20) = *(_DWORD *)(v1564 + 144);
          *((void *)v289 + 6) = v275[4];
          if (v283)
          {
            uint64_t v292 = v289 + 112;
            uint64_t v293 = (v283 - 1LL) & 0x3FFFFFFFFFFFFFFLL;
            if (v293)
            {
              uint64_t v294 = v293 + 1;
              uint64_t v295 = (v293 + 1) & 0x7FFFFFFFFFFFFFELL;
              int v296 = &v292[64 * v295];
              int v297 = (uint64_t *)(v289 + 200);
              uint64_t v298 = v295;
              do
              {
                *((_WORD *)v297 - 34) = 0;
                *((_WORD *)v297 - 2) = 0;
                *(v297 - 8) = v13;
                uint64_t *v297 = v13;
                v297 += 16;
                v298 -= 2LL;
              }

              while (v298);
              uint64_t v18 = v1545;
              if (v294 == v295) {
                goto LABEL_2091;
              }
            }

            else
            {
              int v296 = v289 + 112;
              uint64_t v18 = v1545;
            }

            v1239 = &v292[64 * (uint64_t)v283];
            do
            {
              *((_WORD *)v296 + 10) = 0;
              *((void *)v296 + 3) = v13;
              v296 += 64;
            }

            while (v296 != v1239);
LABEL_2091:
            unsigned __int16 v776 = v291;
            goto LABEL_2092;
          }

          unsigned __int16 v776 = v291;
          uint64_t v18 = v1545;
        }

LABEL_2092:
        ++*(_DWORD *)(v11 + 368);
        *((void *)v289 + 1) = *(void *)(v11 + 352);
        *((void *)v289 + 7) = *(void *)(v13 + 56);
        *((void *)v289 + 12) = *(void *)(v11 + 56);
        *((void *)v289 + 13) = *(void *)(*(void *)v11 + 120LL);
        *((void *)v289 + 8) = *(void *)(v11 + 384);
        *(void *)(v11 + 384) = 0LL;
        *(void *)(v11 + 56) = 0LL;
        *(void *)(v11 + 352) = v289;
        *(void *)(v11 + 104) = v289 + 112;
        *(_DWORD *)(v11 + 36) = v283;
        *(_DWORD *)(v11 + 40) = v776;
        unint64_t v1567 = (unint64_t)(v289 + 112);
        uint64_t v1240 = (uint64_t)&v289[64 * (uint64_t)v283 + 112];
        *(void *)(v11 + 120) = v1240;
        v1241 = (void *)(v1240 + 8LL * v291);
        *((void *)v289 + 5) = v1241;
        int v1242 = *((_DWORD *)v275 + 2);
        int v1243 = v1242 + 7;
        BOOL v1301 = v1242 < -7;
        int v1244 = v1242 + 14;
        if (!v1301) {
          int v1244 = v1243;
        }
        bzero(v1241, (uint64_t)v1244 >> 3);
        v1245 = *v275;
        *(void *)(v11 + 136) = *v275;
        *(_DWORD *)(v11 + 144) = *((_DWORD *)v275 + 2);
        v1565 = v1245;
        uint64_t v12 = v1245 - 40;
LABEL_1662:
        int v1035 = v1555;
        goto LABEL_1663;
      case 0x31u:
        if (*((_DWORD *)v12 + 1))
        {
          if (*(void *)(v13 + 800)) {
            goto LABEL_21;
          }
        }

        else if (*(void *)(v1564 + 80))
        {
          goto LABEL_21;
        }

        if (!*(void *)(v13 + 808)) {
          goto LABEL_2168;
        }
        goto LABEL_21;
      case 0x32u:
        goto LABEL_21;
      case 0x33u:
        goto LABEL_21;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
        unsigned int v1543 = v18;
        unint64_t v23 = v17;
        int v24 = v12;
        uint64_t v25 = *((int *)v12 + 1);
        uint64_t v26 = v1567 + (v25 << 6);
        uint64_t v27 = *((int *)v24 + 3);
        uint64_t v28 = v1567 + (v27 << 6);
        uint64_t v29 = (_WORD *)(v26 + 20);
        __int16 v30 = *(_WORD *)(v26 + 20);
        uint64_t v31 = (__int16 *)(v28 + 20);
        __int16 v32 = *(_WORD *)(v28 + 20);
        if ((v32 & v30 & 4) != 0)
        {
          if (*(void *)v28 <= *(void *)v26)
          {
            unint64_t v17 = v23;
            uint64_t v18 = v1543;
            uint64_t v12 = v24;
            int v145 = &byte_1813C6343[v22];
            if (*(void *)v28 >= *(void *)v26)
            {
              if (v145[210]) {
                goto LABEL_2168;
              }
              int v1491 = 0;
              uint64_t v12 = v24 + 40;
            }

            else
            {
              if (v145[204]) {
                goto LABEL_2168;
              }
              int v1491 = -1;
              uint64_t v12 = v24 + 40;
            }
          }

          else
          {
            unint64_t v17 = v23;
            uint64_t v18 = v1543;
            uint64_t v12 = v24;
            if (byte_1813C6343[v22 + 216]) {
              goto LABEL_2168;
            }
            int v1491 = 1;
            uint64_t v12 = v24 + 40;
          }

          continue;
        }

        v1514 = v24;
        __int16 v33 = *((_WORD *)v24 + 1);
        if (((v32 | v30) & 1) != 0)
        {
          if ((v33 & 0x80) == 0)
          {
            unint64_t v17 = v23;
            uint64_t v12 = v1514;
            if ((v33 & 0x10) != 0) {
              goto LABEL_2158;
            }
            int v1491 = 1;
            uint64_t v18 = v1543;
            uint64_t v12 = v1514 + 40;
            continue;
          }

          uint64_t v12 = v1514;
          if ((*(_WORD *)(v28 + 20) & 0x100) != 0 || (v32 & v30 & 1) == 0)
          {
            if ((v32 & 1) != 0)
            {
              int v1491 = -1;
              v1069 = (unsigned __int8 *)&unk_1813C640F;
              goto LABEL_1979;
            }

            int v1491 = 1;
            goto LABEL_1976;
          }
        }

        else
        {
          if ((v33 & 0x47u) < 0x43)
          {
            if (((v32 | v30) & 2) != 0 && (v33 & 0x47) == 0x42)
            {
              __int16 v686 = *(_WORD *)(v28 + 20);
              if ((v30 & 2) == 0 && (v30 & 0x2C) != 0)
              {
                __int16 v687 = *(_WORD *)(v26 + 20);
                sub_18129C0B0(v1567 + (v25 << 6), v1554, 1);
                __int16 v30 = *(_WORD *)(v26 + 20) & 0xF240 | v687 & 0xDBF;
                if ((_DWORD)v25 == (_DWORD)v27) {
                  __int16 v686 = v30 | 2;
                }
                else {
                  __int16 v686 = v32;
                }
                LOBYTE(v32) = v686;
              }

              __int16 v34 = v30;
              if ((v32 & 2) != 0)
              {
                __int16 v32 = v686;
                uint64_t v12 = v1514;
              }

              else
              {
                uint64_t v12 = v1514;
                if ((v32 & 0x2C) != 0)
                {
                  sub_18129C0B0(v28, v1554, 1);
                  __int16 v32 = *v31 & 0xF240 | v686 & 0xDBF;
                }

                else
                {
                  __int16 v32 = v686;
                }
              }
            }

            else
            {
              __int16 v34 = *(_WORD *)(v26 + 20);
              uint64_t v12 = v1514;
            }
          }

          else
          {
            uint64_t v12 = v1514;
            if (((v32 | v30) & 2) != 0)
            {
              __int16 v34 = *(_WORD *)(v26 + 20);
              if ((v30 & 0x2E) == 2)
              {
                sub_1812DBB5C(v26, 0);
                __int16 v32 = *v31;
              }

              if ((v32 & 0x2E) == 2) {
                sub_1812DBB5C(v28, 0);
              }
            }

            else
            {
              __int16 v34 = *(_WORD *)(v26 + 20);
            }
          }

          int v1191 = sub_1812A4980(v28, v26, *((void *)v12 + 2));
          unint64_t v22 = *v12;
          if (v1191 < 0)
          {
            int v1491 = v1191;
            v1069 = (unsigned __int8 *)&unk_1813C640F;
            uint64_t v29 = (_WORD *)(v26 + 20);
            __int16 v30 = v34;
LABEL_1979:
            int v1192 = v1069[v22];
            *uint64_t v31 = v32;
            *uint64_t v29 = v30;
            uint64_t v18 = v1543;
            unint64_t v17 = v23;
            if (v1192) {
              goto LABEL_2168;
            }
            goto LABEL_21;
          }

          uint64_t v29 = (_WORD *)(v26 + 20);
          __int16 v30 = v34;
          if (v1191)
          {
            int v1491 = v1191;
LABEL_1976:
            v1069 = (unsigned __int8 *)&unk_1813C641B;
            goto LABEL_1979;
          }
        }

        int v1491 = 0;
        v1069 = (unsigned __int8 *)&unk_1813C6415;
        goto LABEL_1979;
      case 0x3Au:
        if (!v1491) {
          goto LABEL_326;
        }
        goto LABEL_21;
      case 0x3Bu:
        uint64_t v299 = (uint64_t *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6));
        if (*v299 < 1) {
          goto LABEL_21;
        }
        *v299 -= *((int *)v12 + 3);
        goto LABEL_2168;
      case 0x3Cu:
        uint64_t v300 = (uint64_t *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6));
        uint64_t v301 = *v300;
        if (!*v300) {
          goto LABEL_21;
        }
        BOOL v1301 = v301 < 1;
        uint64_t v302 = v301 - 1;
        if (!v1301) {
          uint64_t *v300 = v302;
        }
        goto LABEL_2168;
      case 0x3Du:
        uint64_t v303 = (uint64_t *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6));
        if (*v303 != 0x8000000000000000LL)
        {
          uint64_t v304 = *v303 - 1;
          *uint64_t v303 = v304;
          if (!v304) {
            goto LABEL_2168;
          }
        }

        goto LABEL_21;
      case 0x3Eu:
        uint64_t v305 = *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8);
        uint64_t v306 = *(void *)(v305 + 8);
        if (*(_BYTE *)(v305 + 17))
        {
          ++*(_DWORD *)(v305 + 20);
          if (!*(_BYTE *)(v305 + 18)) {
            sub_1812FDE20(v305);
          }
        }

        if (!*(_BYTE *)(v306 + 33)) {
          goto LABEL_1293;
        }
        unsigned int v307 = *(_DWORD *)(v306 + 64);
        unsigned int v308 = *(_DWORD *)(v306 + 56) / 5u;
        if (v307 > 1)
        {
          unsigned int v310 = v308 + 1;
          unsigned int v881 = (v307 - 2) / v310 * v310;
          unsigned int v311 = dword_18C54FA50 / *(_DWORD *)(v306 + 52);
          if (v881 + 1 == v311) {
            int v882 = 3;
          }
          else {
            int v882 = 2;
          }
          unsigned int v309 = v882 + v881;
        }

        else
        {
          unsigned int v309 = 0;
          unsigned int v310 = v308 + 1;
          unsigned int v311 = dword_18C54FA50 / *(_DWORD *)(v306 + 52);
        }

        unsigned int v883 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v306 + 24) + 80LL) + 36LL));
        unsigned int v884 = v307 - v883 - (v308 - v307 + v883 + v309) / v308;
        unsigned int v885 = v311 + 1;
        BOOL v887 = v311 + 1 < v307 && v884 < v885;
        unsigned int v888 = v884 - v887;
        do
        {
          unsigned int v889 = v888;
          BOOL v48 = v888 >= 2;
          unsigned int v890 = v888 - 2;
          if (v48)
          {
            int v892 = v890 / v310 * v310;
            if (v892 + 1 == v311) {
              int v893 = 3;
            }
            else {
              int v893 = 2;
            }
            int v891 = v893 + v892;
          }

          else
          {
            int v891 = 0;
          }

          unsigned int v888 = v889 - 1;
        }

        while (v889 == v891 || v889 == v885);
        if (v883 >= v307 || v307 < v889)
        {
          LODWORD(v19) = sub_1812FBF50(80955);
        }

        else
        {
          if (!v883)
          {
LABEL_1293:
            LODWORD(v19) = 101;
            if (!*(_BYTE *)(v305 + 17)) {
              goto LABEL_1311;
            }
            goto LABEL_1309;
          }

          v894 = *(unsigned __int8 **)(v306 + 16);
          if (v894)
          {
            LODWORD(v19) = sub_1812FFCF0(v894, 0, 0LL);
            if ((_DWORD)v19) {
              goto LABEL_1308;
            }
            for (uint64_t n = *(void *)(v306 + 16); n; uint64_t n = *(void *)(n + 40))
              *(_BYTE *)(n + 1) &= ~4u;
          }

          LODWORD(v19) = sub_1812FF924(v306, v889, v307, 0);
          if (!(_DWORD)v19)
          {
            uint64_t v896 = *(void *)(*(void *)(v306 + 24) + 112LL);
            v897 = *(_DWORD **)(v896 + 40);
            if ((*(_WORD *)(v896 + 52) & 4) != 0 && v897[8] >= *(_DWORD *)(v896 + 48))
            {
              if (!v897[32])
              {
                LODWORD(v19) = 0;
LABEL_2560:
                *(_DWORD *)(*(void *)(*(void *)(v306 + 24) + 80LL) + 28LL) = bswap32(*(_DWORD *)(v306 + 64));
                if (!*(_BYTE *)(v305 + 17)) {
                  goto LABEL_1311;
                }
LABEL_1309:
                int v900 = *(_DWORD *)(v305 + 20) - 1;
                *(_DWORD *)(v305 + 20) = v900;
                if (!v900)
                {
                  uint64_t v901 = v305;
                  int v902 = v19;
                  sub_1812FDEFC(v901);
                  LODWORD(v19) = v902;
                }

LABEL_1311:
                uint64_t v11 = v1564;
                if ((_DWORD)v19 != 101)
                {
                  int v1555 = v19;
                  if ((_DWORD)v19) {
                    goto LABEL_2728;
                  }
                  goto LABEL_21;
                }

                goto LABEL_2167;
              }

              int v898 = sub_1812FAFE4(v896);
            }

            else
            {
              LODWORD(v19) = v897[12];
              if ((_DWORD)v19) {
                goto LABEL_2560;
              }
              if (v897[46] <= v897[50]) {
                int v898 = sub_1812ABE24(v896);
              }
              else {
                int v898 = sub_1812FED50(v896);
              }
            }

            LODWORD(v19) = v898;
            goto LABEL_2560;
          }
        }

LABEL_1308:
        if (!*(_BYTE *)(v305 + 17)) {
          goto LABEL_1311;
        }
        goto LABEL_1309;
      case 0x3Fu:
        uint64_t v11 = v1564;
        uint64_t v312 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (*(_BYTE *)(v312 + 2)) {
          goto LABEL_21;
        }
        uint64_t v313 = *(uint64_t ***)(v312 + 40);
        int v314 = *v313;
        uint64_t v315 = **v313;
        int v316 = (*(uint64_t (**)(void))(v315 + 72))();
        sub_181302CE4(v1564, (uint64_t)v314);
        if (v316)
        {
          LODWORD(v19) = v316;
          goto LABEL_2728;
        }

        int v1555 = 0;
        goto LABEL_1661;
      case 0x40u:
        uint64_t v317 = *((int *)v12 + 4);
        if ((int)v317 < 1)
        {
          unint64_t v318 = 0LL;
          int8x16_t v322 = (_DWORD *)v1564;
LABEL_1060:
          unint64_t v794 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
          unint64_t v795 = v318 % (8LL * *(int *)(v794 + 16));
          if (((*(unsigned __int8 *)(*(void *)(v794 + 8) + (v795 >> 3)) >> (v795 & 7)) & 1) != 0)
          {
            ++v322[77];
            ++v322[57];
            v12 += 40;
            continue;
          }

          ++v322[78];
          ++v322[58];
          goto LABEL_2168;
        }

        unint64_t v318 = 0LL;
        uint64_t v319 = *((int *)v12 + 3);
        uint64_t v320 = v319 + v317;
        unint64_t v321 = v1567 + (v319 << 6);
        int8x16_t v322 = (_DWORD *)v1564;
        while (1)
        {
          __int16 v324 = *(_WORD *)(v321 + 20);
          if ((v324 & 0x24) != 0)
          {
            uint64_t v325 = *(void *)v321;
          }

          else
          {
            if ((v324 & 8) == 0)
            {
              uint64_t v323 = v324 & 0x12;
              if ((_DWORD)v323) {
                v318 += v323 + 4093;
              }
              goto LABEL_349;
            }

            a2.i64[0] = *(void *)v321;
            if (*(double *)v321 >= -9.22337204e18)
            {
              else {
                uint64_t v325 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              uint64_t v325 = 0x8000000000000000LL;
            }
          }

          v318 += v325;
LABEL_349:
          v321 += 64LL;
          if (++v319 >= v320) {
            goto LABEL_1060;
          }
        }

      case 0x41u:
      case 0x42u:
        uint64_t v96 = *((void *)v12 + 2);
        uint64_t v97 = *((int *)v12 + 3);
        double v98 = (sqlite3_value *)(v1567 + (v97 << 6));
        if (*(sqlite3_value **)v96 == v98)
        {
          uint64_t v99 = (uint64_t *)v1564;
          goto LABEL_991;
        }

        uint64_t v99 = (uint64_t *)v1564;
        *(void *)(v96 + 24) = v1564;
        *(void *)uint64_t v96 = v98;
        *(_BYTE *)(v96 + 40) = v1554;
        uint64_t v100 = *(unsigned __int8 *)(v96 + 42);
        if (!*(_BYTE *)(v96 + 42)) {
          goto LABEL_991;
        }
        unint64_t v101 = *((int *)v12 + 2);
        if (v100 >= 4)
        {
          unint64_t v102 = v100 & 3;
          a2.i64[0] = *((int *)v12 + 2);
          int64x2_t v753 = vdupq_n_s64(v101);
          unint64_t v754 = *(unsigned __int8 *)(v96 + 42);
          uint64_t v755 = v100 & 0xFC;
          do
          {
            a4.i64[0] = v754;
            int64x2_t v756 = vaddq_s64(vdupq_n_s64(v754), (int64x2_t)xmmword_1813CDCC0);
            int64x2_t v757 = vdupq_n_s64(v1567);
            int8x16_t v758 = (int8x16_t)vaddq_s64(v757, vshlq_n_s64(vaddq_s64(v756, v753), 6uLL));
            int8x16_t v759 = (int8x16_t)vaddq_s64( vdupq_lane_s64(vshlq_n_s64(vaddq_s64(a2, a4), 6uLL).i64[0], 0),  vaddq_s64(v757, (int64x2_t)xmmword_1813CDCD0));
            uint64_t v760 = v96 + 8 * v756.i64[0];
            *(int8x16_t *)(v760 + 40) = vextq_s8(v758, v758, 8uLL);
            a4 = (int64x2_t)vextq_s8(v759, v759, 8uLL);
            *(int64x2_t *)(v760 + 24) = a4;
            v754 -= 4LL;
            v755 -= 4LL;
          }

          while (v755);
          if ((v100 & 0xFC) == v100)
          {
LABEL_991:
            *(_WORD *)(v1567 + (v97 << 6) + 20) = *(_WORD *)(v1567 + (v97 << 6) + 20) & 0xF240 | 1;
            (*(void (**)(uint64_t))(*(void *)(v96 + 8) + 24LL))(v96);
            int v762 = *(_DWORD *)(v96 + 36);
            if (!v762) {
              goto LABEL_21;
            }
            unsigned int v1551 = v18;
            int v633 = v1555;
            if (v762 >= 1)
            {
              char v763 = sqlite3_value_text(v98);
              sub_181302AB0(v99, "%s", v764, v765, v766, v767, v768, v769, v763);
              int v633 = *(_DWORD *)(v96 + 36);
            }

            uint64_t v770 = *v1488;
            if (*v1488)
            {
              int v771 = *(_DWORD *)(v96 + 32);
              unsigned int v772 = *((_DWORD *)v12 + 1);
              v773 = v1488;
              do
              {
                while ((v771 & 0x80000000) == 0)
                {
                  if (*(_DWORD *)v770 == v771)
                  {
                    unsigned int v774 = *(_DWORD *)(v770 + 4);
                    if ((v774 & 0x80000000) == 0 && (v774 > 0x1F || ((v772 >> v774) & 1) == 0)) {
                      break;
                    }
                  }

                  v773 = (uint64_t *)(v770 + 24);
                  uint64_t v770 = *(void *)(v770 + 24);
                  if (!v770) {
                    goto LABEL_20;
                  }
                }

                v775 = *(void (**)(void))(v770 + 16);
                if (v775) {
                  v775(*(void *)(v770 + 8));
                }
                uint64_t *v773 = *(void *)(v770 + 24);
                sub_1812F20DC((void *)v13, (void *)v770);
                uint64_t v770 = *v773;
              }

              while (*v773);
            }

LABEL_20:
            int v1555 = 0;
            *(_DWORD *)(v96 + 36) = 0;
            uint64_t v18 = v1551;
            uint64_t v11 = v1564;
            if (!v633) {
              goto LABEL_21;
            }
LABEL_2585:
            LODWORD(v19) = v633;
            goto LABEL_2728;
          }
        }

        else
        {
          unint64_t v102 = *(unsigned __int8 *)(v96 + 42);
        }

        uint64_t v761 = v1567 + ((v102 + v101) << 6) - 64;
        do
        {
          *(void *)(v96 + 40 + 8 * v102) = v761;
          v761 -= 64LL;
          BOOL v1301 = v102-- > 1;
        }

        while (v1301);
        goto LABEL_991;
      case 0x43u:
        uint64_t v326 = *((int *)v12 + 1);
        if ((*(_WORD *)(v1567 + (v326 << 6) + 20) & 4) == 0) {
          goto LABEL_21;
        }
        uint64_t v12 = &v1565[40 * *(void *)(v1567 + (v326 << 6)) + 40];
        continue;
      case 0x44u:
        unint64_t v327 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        uint64_t v12 = &v1565[40 * *(int *)&v1565[40 * *(void *)v327 + 8] - 40];
        *(_WORD *)(v327 + 20) = 0;
        goto LABEL_21;
      case 0x45u:
        goto LABEL_21;
      case 0x46u:
LABEL_363:
        uint64_t v11 = v1564;
        uint64_t v328 = *(uint64_t **)(v1564 + 352);
        int v329 = *((_DWORD *)v12 + 1);
        if (v328)
        {
          if (!v329)
          {
            *(void *)(v1564 + 352) = v328[1];
            --*(_DWORD *)(v1564 + 368);
            uint64_t v330 = *(void *)(v1564 + 56);
            uint64_t v331 = *(void *)(v13 + 128) + v330;
            *(void *)(v13 + 120) = v330;
            *(void *)(v13 + 128) = v331;
            int v332 = sub_181301A74(v328);
            uint64_t v333 = *(void *)(v1564 + 136);
            if (*((_DWORD *)v12 + 2) == 4) {
              int v332 = *(_DWORD *)(v333 + 40LL * v332 + 8) - 1;
            }
            unint64_t v1567 = *(void *)(v1564 + 104);
            v1565 = *(unsigned __int8 **)(v1564 + 136);
            uint64_t v12 = (unsigned __int8 *)(v333 + 40LL * v332 + 40);
            continue;
          }

          *(_DWORD *)(v1564 + 52) = v329;
          *(_BYTE *)(v1564 + 264) = *((_DWORD *)v12 + 2);
        }

        else
        {
          *(_DWORD *)(v1564 + 52) = v329;
          *(_BYTE *)(v1564 + 264) = *((_DWORD *)v12 + 2);
          if (!v329) {
            goto LABEL_2649;
          }
        }

        if (*((_WORD *)v12 + 1))
        {
          sub_181302AB0( (uint64_t *)v1564,  "%s constraint failed",  a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  (char)off_189B6DB38[*((unsigned __int16 *)v12 + 1) - 1]);
          v1444 = *(const char **)(v1564 + 168);
          if (*((void *)v12 + 2))
          {
            v1444 = (const char *)sub_18127F588( v13,  "%z: %s",  v1438,  v1439,  v1440,  v1441,  v1442,  v1443,  *(void *)(v1564 + 168));
            *v1490 = (char *)v1444;
          }
        }

        else
        {
          sub_181302AB0((uint64_t *)v1564, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, *((void *)v12 + 2));
          v1444 = *(const char **)(v1564 + 168);
        }

        sqlite3_log( *((_DWORD *)v12 + 1),  "abort at %d in [%s]: %s",  -858993459 * ((v12 - v1565) >> 3),  *(const char **)(v1564 + 320),  v1444);
LABEL_2649:
        if (sub_18127A498(v1564) == 5)
        {
LABEL_2650:
          uint64_t v1453 = 5LL;
          *(_DWORD *)(v11 + 52) = 5;
          goto LABEL_2770;
        }

        ++v24;
      }

      if (byte_1813C6343[v26] == byte_1813C6343[v27]) {
        goto LABEL_20;
      }
      break;
    }

    LOWORD(v18) = *((_WORD *)v10 + 27);
LABEL_7:
    if (++v16 != v15) {
      continue;
    }
    break;
  }

  uint64_t v13 = v39;
  unsigned int v14 = v40;
  uint64_t v12 = v38;
  if ((_DWORD)v15 == 1) {
    goto LABEL_33;
  }
LABEL_45:
  if (v13)
  {
    sub_1812DC47C((uint64_t)a1, "AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY", a3, a4, a5, a6, a7, a8, v37);
    goto LABEL_47;
  }

  sub_18129D098(a1, 0LL, 0LL, 0LL, (uint64_t)a2, v14, 0LL, 0LL, v12, 0, 2u);
}

        uint64_t v13 = result + 16LL * v6;
        unint64_t v16 = *(void *)(v13 + 56);
        unsigned int v14 = (void *)(v13 + 56);
        unint64_t v15 = v16;
        unint64_t v17 = (void *)(a2 + 40);
        if (v16)
        {
          *(void *)(v15 + 8) = v17;
          void *v17 = v15;
        }

        else
        {
          *(void *)(result + 16 * v6 + 64) = v17;
        }

        *unsigned int v14 = v17;
LABEL_25:
        ++*(_DWORD *)(result + 24);
        uint64_t v18 = *(void *)(a2 + 56);
        if (v18)
        {
          uint64_t v19 = *(_BYTE *)(v18 + 33) - 1;
          *(_BYTE *)(v18 + 33) = v19;
          ++*(_BYTE *)(v18 + 34);
          if (!v19)
          {
            sub_18135E470((void *)result, (uint64_t *)v18);
            uint64_t v20 = (uint64_t *)(v3 + 136);
            if (*(unsigned __int8 *)(v18 + 33) + *(unsigned __int8 *)(v18 + 34) >= *(_DWORD *)(v3 + 124))
            {
              unint64_t v22 = *(void **)(v3 + 144);
              if (v22)
              {
                *unint64_t v22 = v18;
                *(void *)(v18 + 8) = v22;
              }

              else
              {
                *uint64_t v20 = v18;
              }

              uint64_t v20 = (uint64_t *)(v3 + 144);
            }

            else
            {
              int v21 = *v20;
              if (*v20)
              {
                *(void *)(v21 + 8) = v18;
                *(void *)uint64_t v18 = v21;
              }

              else
              {
                *(void *)(v3 + 144) = v18;
              }
            }

            *uint64_t v20 = v18;
            *(_BYTE *)(v18 + 32) = 2;
          }
        }

        return sub_18135E1B8(v3);
      }

      uint64_t v4 = (unint64_t *)&v24;
    }

    sub_18135E590((int *)result, v4);
    return sub_18135E1B8(v3);
  }

  return result;
}

      uint64_t v12 = 0LL;
LABEL_21:
      unint64_t v22 = *(void *)(*a1 + 24);
      if (v22) {
        xmmword_18C465410(v22);
      }
      return v12;
    }
  }

  unsigned int v14 = (char *)sub_18126F0AC(496LL);
  if (!v14) {
    return 7LL;
  }
  unint64_t v15 = v14;
  memcpy(v14, v2 + 4, 0x1F0uLL);
  *uint64_t v6 = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  unint64_t v16 = *v2 + 61LL;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  v2[2] = ((unint64_t)v16 * (unsigned __int128)0x421084210842109uLL) >> 64;
  uint64_t v4 = sub_1812B8E48(v2, v9);
  for (uint64_t i = 0LL; i != 496; i += 4LL)
  {
    uint64_t v18 = *(unsigned int *)&v15[i];
    if ((_DWORD)v18) {
      uint64_t v4 = sub_1812B8E48(v2, v18) | v4;
    }
  }

  uint64_t v19 = (uint64_t (**)(void *))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_31:
    (*v19)(v15);
    return v4;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v15);
  --qword_18C468B10;
  off_18C4653A8(v15);
  unint64_t v15 = (char *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v19 = (uint64_t (**)(void *))&xmmword_18C465410;
    goto LABEL_31;
  }

  return v4;
}

  if ((_DWORD)v9 - (_DWORD)v6 + v8[v10] == *(_DWORD *)(v2 + 20))
  {
    unint64_t v23 = &v8[v36];
    *(_WORD *)(v23 + 5) = bswap32(v9) >> 16;
    v23[1] = 0;
    v23[2] = 0;
    bzero(&v8[v6], (int)v9 - (int)v6);
    return 0LL;
  }

  uint64_t v25 = 78535LL;
LABEL_24:
  uint64_t v26 = v2;
  return sub_1812FD54C(v25, v26);
}

  if (a4)
  {
    unint64_t v15 = sub_181303778(v13, v18 - 4, &v51);
    if ((_DWORD)v15) {
      return v15;
    }
    if (!a5)
    {
      int v24 = *(_DWORD *)(a1 + 56);
      uint64_t v25 = (*(_DWORD *)(a1 + 200) - 200);
      uint64_t v26 = v25 - 200;
      if (v25 < 0xC8) {
        uint64_t v26 = 0LL;
      }
      if (v25 >= 0xC9)
      {
        __int16 v32 = 0;
        __int16 v33 = (((v26 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
        uint64_t v27 = v25 - 200 * (v33 & 0x7FFFFFE);
        __int16 v34 = &v11[v25];
        uint64_t v35 = v33 & 0x7FFFFFE;
        do
        {
          v24 += *v34;
          v32 += *(v34 - 200);
          v34 -= 400;
          v35 -= 2LL;
        }

        while (v35);
        v24 += v32;
        if (v33 == (v33 & 0x7FFFFFE))
        {
LABEL_43:
          if (v24 != v51) {
            return 101LL;
          }
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v27 = (*(_DWORD *)(a1 + 200) - 200);
      }

      do
      {
        v24 += v11[v27];
        uint64_t v36 = v27 > 0xC8;
        v27 -= 200LL;
      }

      while (v36);
      goto LABEL_43;
    }
  }

      uint64_t v2 = &v18[v16];
      if (!*v2) {
        goto LABEL_97;
      }
    }
  }

  uint64_t v5 = *__s;
  if (*__s)
  {
    do
    {
      uint64_t v6 = 1LL;
      do
      {
        uint64_t v7 = v6;
        if (v5 == 10) {
          break;
        }
        uint64_t v5 = v2[v6++];
      }

      while (v2[v7]);
      int64x2_t v8 = v61;
      if (v61 + 3 >= v59)
      {
        sub_1812D3A10((uint64_t)&v57, "-- ", 3u);
        if ((int)v7 <= 0)
        {
LABEL_14:
          if ((_DWORD)v7) {
            sub_1812CF36C(32737);
          }
          goto LABEL_5;
        }
      }

      else
      {
        v61 += 3;
        double v9 = (char *)v58 + v8;
        v9[2] = 32;
        *(_WORD *)double v9 = 11565;
      }

      int64x2_t v10 = v61;
      if (v61 + v7 < v59)
      {
        v61 += v7;
        memcpy((char *)v58 + v10, v2, v7);
      }

      else
      {
        sub_1812D3A10((uint64_t)&v57, v2, v7);
      }

  if (pzDataType) {
    *pzDataType = v29;
  }
  if (pzCollSeq) {
    *pzCollSeq = v30;
  }
  if (v10) {
    void *v10 = v31;
  }
  if (v9) {
    *double v9 = v32;
  }
  if (v17) {
    void *v17 = v33;
  }
  int v38 = v65;
  if (!v27 && !v28)
  {
    if (v65) {
      sub_1812F20DC(db, v65);
    }
    int v38 = (char *)sub_18127F588((uint64_t)db, "no such table column: %s.%s", v21, v22, v23, v24, v25, v26, (char)v14);
    int v65 = v38;
    uint64_t v27 = 1;
  }

  if (v38) {
    uint64_t v39 = "%s";
  }
  else {
    uint64_t v39 = 0LL;
  }
  sub_1812D50CC((uint64_t)db, v27, v39, v22, v23, v24, v25, v26, (char)v38);
  if (v65) {
    sub_1812F20DC(db, v65);
  }
  if (v27 || *((_BYTE *)db + 103)) {
    uint64_t v40 = sub_1813037C4((uint64_t)db, v27);
  }
  else {
    uint64_t v40 = 0;
  }
  int v42 = *((void *)db + 3);
  if (v42) {
    xmmword_18C465410(v42);
  }
  return v40;
}

    if (pStmt) {
      sqlite3_finalize(pStmt);
    }
  }

  if (v10) {
    sub_1812E03C8(v10, 0);
  }
  if (v2 == 26) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = v2;
  }
  if ((v2 & 0xFFFFFFFE) == 0x64) {
    return 0LL;
  }
  else {
    return v6;
  }
}

      double v9 = v2[4];
      if (v3)
      {
        if (v9) {
          int64x2_t v10 = (int)off_18C4653B8(v2[4]);
        }
        else {
          int64x2_t v10 = 0LL;
        }
        *(void *)(v3 + 56) -= v10;
      }

      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v11 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v9);
        --qword_18C468B10;
        off_18C4653A8(v9);
        double v9 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_32;
        }
        uint64_t v11 = &xmmword_18C465410;
      }

      (*v11)(v9);
LABEL_32:
      uint64_t v12 = v2[7];
      if (v3)
      {
        if (v12) {
          uint64_t v13 = (int)off_18C4653B8(v2[7]);
        }
        else {
          uint64_t v13 = 0LL;
        }
        *(void *)(v3 + 56) -= v13;
      }

      if (v12)
      {
        unsigned int v14 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_43;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v12);
        --qword_18C468B10;
        off_18C4653A8(v12);
        uint64_t v12 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          unsigned int v14 = &xmmword_18C465410;
LABEL_43:
          (*v14)(v12);
        }
      }

      if (v3) {
        *(void *)(v3 + 56) -= (int)off_18C4653B8(v2);
      }
      unint64_t v15 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v2);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v2);
        uint64_t v2 = (uint64_t *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        unint64_t v15 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
      }

      uint64_t result = (*v15)(v2);
LABEL_4:
      uint64_t v2 = v16;
    }

    while (v16);
  }

  return result;
}

  unint64_t v16 = sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 1", 0LL, 0LL, 0LL);
  if ((_DWORD)v16) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  while (1)
  {
    if (sub_1812EADB4(a2, 0LL, 0LL, 0LL) != 100)
    {
      unint64_t v17 = *(_DWORD *)(a2 + 88);
      int v42 = sqlite3changeset_finalize(a2);
      if ((_DWORD)v42)
      {
        unint64_t v16 = v42;
        goto LABEL_22;
      }

      uint64_t v43 = sub_1813BC5F8(a1, v17, (uint64_t)v77, (uint64_t)&v69, a4, a5);
      uint64_t v18 = v61;
      if ((_DWORD)v43)
      {
        unint64_t v16 = v43;
        goto LABEL_23;
      }

      if (a1)
      {
        uint64_t v44 = *((unsigned __int8 *)a1 + 113);
        switch(v44)
        {
          case 186:
            goto LABEL_98;
          case 118:
            int64_t v46 = *((void *)a1 + 3);
            if (v46) {
              xmmword_18C465400(v46);
            }
            uint64_t v47 = *((uint64_t *)a1 + 101) > 0 || *((void *)a1 + 100) > 0LL;
            BOOL v48 = *((void *)a1 + 3);
            if (v48) {
              xmmword_18C465410(v48);
            }
            if (!v47)
            {
              sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 0", 0LL, 0LL, 0LL);
              if ((v61 & 1) == 0) {
                goto LABEL_115;
              }
              unint64_t v16 = 0LL;
              goto LABEL_116;
            }

  sub_1812B963C(a1);
  if (qword_18C468B90) {
    xmmword_18C465410(qword_18C468B90);
  }
  return 0LL;
}

    uint64_t v5 = 1;
    goto LABEL_25;
  }

  int64x2_t v10 = *(const char **)(v3 + 8);
  unint64_t v17 = 1;
  unint64_t v15 = dword_18C54FA50 + 1LL;
  unint64_t v16 = 1LL;
  uint64_t v18 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = 0LL;
  if (fsctl(v10, 0xC0207A17uLL, &v15, 0) != -1) {
    goto LABEL_24;
  }
  uint64_t v11 = *__error();
  uint64_t v4 = 5LL;
  if (((1LL << v11) & 0x1000000800012010LL) != 0) {
    goto LABEL_24;
  }
  if (v11 == 1)
  {
    uint64_t v4 = 3LL;
  }

  else
  {
LABEL_21:
    if ((_DWORD)v11 == 77) {
      goto LABEL_24;
    }
    uint64_t v4 = 2058LL;
  }

  *(_DWORD *)(a1 + 32) = v11;
LABEL_24:
  uint64_t v5 = 0;
  if ((_DWORD)v4)
  {
LABEL_25:
    if ((_DWORD)v4 == 5) {
      uint64_t v4 = 0LL;
    }
  }

    *(_DWORD *)(a1 + 32) = v9;
  }

  uint64_t v13 = 0LL;
LABEL_21:
  for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return v13;
}

              ;
            }
          }
  }

  return 0LL;
}

          *(void *)(v16 + 56LL * v17 + 48) = v21;
          *(void *)(a1 + 400) = v16;
          return result;
        }
      }

      uint64_t result = sub_1812F2310(result, *(void **)(a1 + 400), v15);
      unint64_t v16 = result;
      if (!result) {
        return result;
      }
LABEL_12:
      LODWORD(v13) = *(_DWORD *)(a1 + 392);
      unsigned int v14 = v13 + 1;
      goto LABEL_13;
    }

    uint64_t result = sub_1812F2264(result, 56 * (v13 + 1));
    unint64_t v16 = result;
    if (result) {
      goto LABEL_12;
    }
  }

  return result;
}

  if (*v2 >= 1)
  {
    for (uint64_t i = 0LL; i < *v2; ++i)
    {
      uint64_t v12 = *(void **)&v2[12 * i + 8];
      uint64_t v26 = 0u;
      uint64_t v27 = 0u;
      uint64_t v25 = 0u;
      int v24 = v4;
      uint64_t v13 = v4;
      if (v5)
      {
        uint64_t result = sub_181321444((_BYTE *)v4, (uint64_t)v12, (uint64_t)&v24);
        uint64_t v13 = v24;
      }

      if (*(_BYTE *)(*(void *)v13 + 103LL)) {
        return result;
      }
      uint64_t result = (void *)sub_181285228(v3, v12);
      unsigned int v14 = *(int **)&v2[12 * i + 6];
      if (!v14) {
        continue;
      }
      uint64_t v29 = 0u;
      __int16 v30 = 0u;
      v28[0] = v4;
      v28[1] = sub_181323638;
      unint64_t v15 = *v14;
      if (*v14 < 1) {
        continue;
      }
      unint64_t v16 = v5;
      unint64_t v17 = v3;
      for (uint64_t j = 2LL; ; j += 6LL)
      {
        uint64_t v19 = *(void *)&v14[j];
        if (v19) {
          break;
        }
        if (v15 <= 1) {
          goto LABEL_37;
        }
LABEL_30:
        --v15;
      }

      uint64_t result = (void *)sub_18131C57C((uint64_t)v28, v19);
      if ((_DWORD)result) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v15 <= 1;
      }
      if (!v20) {
        goto LABEL_30;
      }
LABEL_37:
      int v21 = *v14;
      int v3 = v17;
      uint64_t v5 = v16;
      if ((int)v21 >= 1)
      {
        for (uint64_t k = 0LL; k != v21; ++k)
        {
          if ((*(_WORD *)((_BYTE *)&v14[6 * k + 6] + 1) & 3) == 0)
          {
            unint64_t v23 = *(void **)(v4 + 408);
            if (v23)
            {
              while (*v23 != *(void *)&v14[6 * k + 4])
              {
                unint64_t v23 = (void *)v23[3];
                if (!v23) {
                  goto LABEL_40;
                }
              }

              int *v23 = 0LL;
            }
          }

    if (*(unsigned __int8 *)(v25 + 16) == 150)
    {
      *(void *)(v25 + 8) = *(void *)a2;
      *(void *)(v25 + 48) = v24;
      goto LABEL_22;
    }

    uint64_t v25 = v22;
    unint64_t v23 = (void *)*v23;
    if (v23) {
      continue;
    }
    break;
  }

  return 1LL;
}

    ++v18;
  }

  while (v18 != v10);
  BOOL v48 = v128;
  uint64_t v49 = *(_DWORD *)(v128 + 48);
  if ((v49 & 0x1000) != 0) {
    goto LABEL_174;
  }
  if ((v49 & 0x100) != 0)
  {
    uint64_t v111 = 0;
    uint64_t v50 = 0LL;
    __int16 v53 = 1;
    uint64_t v51 = 1;
  }

  else
  {
    uint64_t v50 = *(void *)(v128 + 32);
    if (!v50 || (*(_WORD *)(v50 + 99) & 4) != 0) {
      goto LABEL_4;
    }
    uint64_t v51 = *(unsigned __int16 *)(v50 + 96);
    __int16 v53 = (v49 & 0x8000) == 0 && *(_BYTE *)(v50 + 98) != 0;
    if (!*(_WORD *)(v50 + 96))
    {
      LOBYTE(v55) = 0;
      goto LABEL_172;
    }

    uint64_t v111 = *(unsigned __int16 *)(v50 + 94);
  }

  __int16 v54 = 0LL;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v55 = 0;
  uint64_t v113 = 0;
  int v56 = 8LL;
  uint64_t v109 = v51;
  while (1)
  {
    int v57 = *(unsigned __int16 *)(v48 + 24);
    signed int v64 = *(void *)(v48 + 64);
    int v65 = *(uint64_t **)(v64 + 8 * v54);
    double v66 = *((unsigned __int16 *)v65 + 10);
    if ((v122 & v66) == 0) {
      break;
    }
    if ((v66 & 0x180) != 0) {
      __int16 v53 = 0;
    }
LABEL_164:
    ++v54;
    ++v113;
    v56 += 8LL;
    if (v54 == v109) {
      goto LABEL_172;
    }
  }

  if ((v66 & 1) == 0)
  {
LABEL_79:
    double v58 = 1;
    goto LABEL_80;
  }

  uint64_t v88 = *v65;
  uint64_t v89 = (v57 - 1);
  unint64_t v90 = (void **)(v64 + v56);
  while (1)
  {
    double v58 = v54 == v89;
    if (v54 == v89) {
      break;
    }
    uint64_t v59 = 0;
    uint64_t v91 = *v90++;
    --v89;
    if (*v91 == v88) {
      goto LABEL_81;
    }
  }

  if (v13) {
    unint64_t v16 = (char *)v13;
  }
  else {
    unint64_t v16 = &byte_1813CEAEE;
  }
  if (v14) {
    unint64_t v17 = (char *)v14;
  }
  else {
    unint64_t v17 = &byte_1813CEAEE;
  }
  if ((*(_BYTE *)(v10 + 198) & 4) != 0)
  {
    uint64_t v123 = 0LL;
    if (sqlite3_initialize()) {
      return;
    }
    if ((_BYTE)word_18C465384)
    {
      uint64_t v29 = qword_18C4653F0(2LL);
      __int16 v30 = v29;
      if (v29)
      {
        xmmword_18C465400(v29);
        uint64_t v31 = 0;
LABEL_60:
        for (uint64_t i = qword_18C468B68; i; uint64_t i = *(void *)(i + 16))
        {
        }

        if ((v31 & 1) == 0) {
          xmmword_18C465410(v30);
        }
        *(void *)uint64_t v124 = i;
        if (!i) {
          return;
        }
        __int16 v33 = sub_1812696E8(i, "x", v10, &v123, 0, 0x100u);
        if (v33) {
          goto LABEL_201;
        }
        uint64_t v37 = v123;
        int v38 = sub_18126C990(v10, v123);
        if (!v38)
        {
          sub_1812B54BC(v37, v39);
          __int16 v33 = 7;
          goto LABEL_201;
        }

        uint64_t v40 = v38;
        int v41 = *(void *)(v10 + 32) + 32LL * *(unsigned __int8 *)(v10 + 196);
        int v42 = *(void *)(v41 + 8);
        if (v42) {
          sub_1812B54BC(v42, v39);
        }
        *(void *)(v41 + 8) = v37;
        *(void *)(v41 + 24) = v40;
        *(_BYTE *)(v10 + 111) = 0;
        uint64_t v120 = (_BYTE *)(v10 + 111);
        goto LABEL_99;
      }
    }

    else
    {
      __int16 v30 = 0LL;
    }

    uint64_t v31 = 1;
    goto LABEL_60;
  }

  uint64_t v18 = *(unsigned int *)(v10 + 40);
  if ((int)v18 >= *(_DWORD *)(v10 + 164) + 2)
  {
    uint64_t v28 = (char *)sub_18127F588( v10,  "too many attached databases - max %d",  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(v10 + 164));
LABEL_50:
    __int16 v32 = v28;
    __int16 v33 = 0;
    uint64_t v125 = v28;
    goto LABEL_202;
  }

  uint64_t v19 = *(_OWORD **)(v10 + 32);
  for (uint64_t j = 0LL; j != v18; ++j)
  {
    for (uint64_t k = 0LL; ; ++k)
    {
      unint64_t v22 = *(unsigned __int8 *)(*(void *)&v19[2 * j] + k);
      unint64_t v23 = v17[k];
      if ((_DWORD)v22 != (_DWORD)v23) {
        break;
      }
      if (!*(_BYTE *)(*(void *)&v19[2 * j] + k))
      {
LABEL_44:
        uint64_t v28 = (char *)sub_18127F588(v10, "database %s is already in use", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v17);
        goto LABEL_50;
      }

  int64x2_t v8 = (void *)(v4 + 408);
LABEL_21:
  *int64x2_t v8 = v5[3];
  v5[3] = *(unsigned __int8 **)v2;
  *(void *)uint64_t v2 = v5;
  ++*(_DWORD *)(v2 + 8);
  return 0LL;
}

      int64x2_t v8 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v2);
        --qword_18C468B10;
        uint64_t result = off_18C4653A8(v2);
        uint64_t v2 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_11;
        }
        int64x2_t v8 = &xmmword_18C465410;
      }

      uint64_t result = (*v8)(v2);
LABEL_11:
      uint64_t v2 = v5;
      if (!v5) {
        goto LABEL_25;
      }
    }

    uint64_t v7 = &xmmword_18C465410;
LABEL_19:
    (*v7)(v6);
    goto LABEL_20;
  }

      *a2 = v6;
      return result;
    }

    uint64_t v5 = result;
    if (!*a2)
    {
      uint64_t v6 = result;
      goto LABEL_20;
    }

    uint64_t v6 = sqlite3_mprintf("%s%s", *a2, result);
    uint64_t v7 = (uint64_t (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
      --qword_18C468B10;
      uint64_t result = (char *)off_18C4653A8(v5);
      uint64_t v5 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70)
      {
LABEL_10:
        if (v6) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }

      uint64_t v7 = (uint64_t (**)(char *))&xmmword_18C465410;
    }

    uint64_t result = (char *)(*v7)(v5);
    goto LABEL_10;
  }

  return result;
}

      int64x2_t v8 = *(v3 - 10);
      if (!v8) {
        goto LABEL_27;
      }
      double v9 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_26;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
      --qword_18C468B10;
      off_18C4653A8(v8);
      int64x2_t v8 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        double v9 = &xmmword_18C465410;
LABEL_26:
        (*v9)(v8);
      }

  unint64_t v16 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_25:
    (*v16)(v2);
    return v6;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v2);
  --qword_18C468B10;
  off_18C4653A8(v2);
  uint64_t v2 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unint64_t v16 = &xmmword_18C465410;
    goto LABEL_25;
  }

  return v6;
}

    unint64_t v17 = *(void *)(v12 + 8);
    uint64_t v18 = *(_DWORD *)(v12 + 16);
    uint64_t v19 = &v14[4 * v15];
    *(_OWORD *)uint64_t v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    *uint64_t v19 = v17;
    *((_DWORD *)v19 + 2) = v18;
    ++v8;
    uint64_t v11 = v14;
LABEL_4:
    uint64_t v7 = *(void *)(v7 + 24);
  }

  while (v7);
  if (v8 == 1)
  {
    uint64_t v20 = 0LL;
    *a4 = *v11;
    int v21 = *((_DWORD *)v11 + 2);
    goto LABEL_53;
  }

  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  int64x2_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_27;
  }
  uint64_t v11 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_26;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v10);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v10);
  int64x2_t v10 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v11 = &xmmword_18C465410;
LABEL_26:
    uint64_t result = (*v11)(v10);
  }

    uint64_t v11 = (const char *)v8;
    int64x2_t v8 = 0LL;
    goto LABEL_21;
  }

  uint64_t v11 = (const char *)v8;
  int64x2_t v8 = *(void *)(v9 + 8);
LABEL_21:
  if (!a1 || !*(void *)a1)
  {
    sub_1812CF36C(97953);
    uint64_t v12 = 0LL;
    __int16 v53 = 0u;
    __int16 v54 = 0u;
    *(_OWORD *)pStmt = 0u;
    *(_OWORD *)uint64_t v52 = 0u;
    BOOL v48 = 0LL;
    uint64_t v49 = v11;
    unsigned int v14 = "NULL";
    uint64_t v50 = v8;
    goto LABEL_29;
  }

  uint64_t v12 = *(sqlite3 **)(*(void *)a1 + 24LL);
  __int16 v53 = 0u;
  __int16 v54 = 0u;
  *(_OWORD *)pStmt = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  BOOL v48 = v12;
  uint64_t v49 = v11;
  uint64_t v50 = v8;
  if (!v12)
  {
    unsigned int v14 = "NULL";
    goto LABEL_29;
  }

  uint64_t v13 = *((unsigned __int8 *)v12 + 113);
  if (v13 == 186)
  {
LABEL_27:
    unsigned int v14 = "unopened";
LABEL_29:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1812CF36C(189277);
LABEL_30:
    unint64_t v15 = 1;
    goto LABEL_31;
  }

  if (v13 != 118)
  {
    if (v13 != 109)
    {
      unsigned int v14 = "invalid";
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (!*((_BYTE *)v12 + 101)) {
    goto LABEL_30;
  }
  unint64_t v15 = 0;
  DWORD2(v53) = sqlite3_exec(v12, "BEGIN", 0LL, 0LL, 0LL);
  if (DWORD2(v53))
  {
LABEL_39:
    unint64_t v22 = -1;
    goto LABEL_42;
  }

          *uint64_t v12 = LODWORD(v18);
          if (SLODWORD(v15) > SLODWORD(v18))
          {
            uint64_t v45 = v10 + 1;
            goto LABEL_101;
          }

          v10 += 2LL;
          v11 += 2;
          v12 += 2;
          if (v10 >= v9) {
            goto LABEL_74;
          }
        }

        sub_1812CF36C(89717);
LABEL_14:
        LODWORD(v15) = 0;
        goto LABEL_15;
      }
    }

    else if ((int)v9 >= 1)
    {
      int v21 = 0LL;
      unint64_t v22 = a3 + 4;
      unint64_t v23 = (float *)((unint64_t)v78 | 0xC);
      while (1)
      {
        int v24 = *(v22 - 1);
        if (v24)
        {
          uint64_t v25 = *(_WORD *)(v24 + 20);
          if ((v25 & 8) != 0)
          {
            uint64_t v26 = *(double *)v24;
          }

          else if ((v25 & 0x24) != 0)
          {
            uint64_t v26 = (double)*(uint64_t *)v24;
          }

          else if ((v25 & 0x12) != 0)
          {
            uint64_t v26 = sub_181303DB8(v24);
          }

          else
          {
            uint64_t v26 = 0.0;
          }
        }

        else
        {
          sub_1812CF36C(89752);
          uint64_t v26 = 0.0;
        }

        uint64_t v28 = 0.999999881;
        if (v26 < 0.0) {
          uint64_t v28 = 1.00000012;
        }
        uint64_t v29 = v26 * v28;
        uint64_t v27 = v26;
        if (v26 >= v27) {
          __int16 v30 = v26;
        }
        else {
          __int16 v30 = v29;
        }
        *(v23 - 1) = v30;
        uint64_t v31 = *v22;
        if (*v22)
        {
          __int16 v32 = *(_WORD *)(v31 + 20);
          if ((v32 & 8) != 0)
          {
            __int16 v33 = *(double *)v31;
          }

          else if ((v32 & 0x24) != 0)
          {
            __int16 v33 = (double)*(uint64_t *)v31;
          }

          else if ((v32 & 0x12) != 0)
          {
            __int16 v33 = sub_181303DB8(v31);
          }

          else
          {
            __int16 v33 = 0.0;
          }
        }

        else
        {
          sub_1812CF36C(89752);
          __int16 v33 = 0.0;
        }

        uint64_t v35 = 1.00000012;
        if (v33 < 0.0) {
          uint64_t v35 = 0.999999881;
        }
        uint64_t v36 = v33 * v35;
        __int16 v34 = v33;
        uint64_t v37 = v33 <= v34 ? v33 : v36;
        int *v23 = v37;
        if (v30 > v37) {
          break;
        }
        v21 += 2LL;
        v22 += 2;
        v23 += 2;
        if (v21 >= v9) {
          goto LABEL_74;
        }
      }

      uint64_t v45 = v21 + 1;
LABEL_101:
      uint64_t v47 = (void *)a1;
      goto LABEL_102;
    }

  if ((v5 & 0x80000000) == 0)
  {
    *(_DWORD *)(*((void *)a2 + 4) + 8LL * v5) = v12 + 1;
    a2[10] |= 4u;
  }

LABEL_2698:
        if (*(_DWORD *)(v11 + 52)) {
          uint64_t v1453 = 1LL;
        }
        else {
          uint64_t v1453 = 101LL;
        }
        goto LABEL_2770;
      case 0x47u:
        uint64_t v334 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v334 + 20) & 0x9000) != 0) {
          uint64_t v334 = sub_18130875C(v334);
        }
        else {
          *(_WORD *)(v334 + 20) = 4;
        }
        *(void *)uint64_t v334 = *((int *)v12 + 1);
        v12 += 40;
        continue;
      case 0x48u:
        uint64_t v335 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v335 + 20) & 0x9000) != 0) {
          uint64_t v335 = sub_18130875C(v335);
        }
        else {
          *(_WORD *)(v335 + 20) = 4;
        }
        *(void *)uint64_t v335 = **((void **)v12 + 2);
        v12 += 40;
        continue;
      case 0x49u:
        goto LABEL_1581;
      case 0x4Au:
      case 0x4Bu:
        uint64_t v103 = *(void *)(v1564 + 104);
        int v104 = *((_DWORD *)v12 + 2);
        uint64_t v105 = v104;
        uint64_t v106 = v103 + ((uint64_t)v104 << 6);
        __int16 v108 = *(_WORD *)(v106 + 20);
        uint64_t v107 = (__int16 *)(v106 + 20);
        if ((v108 & 0x9000) != 0)
        {
          sub_18130875C(v103 + ((uint64_t)v104 << 6));
          int v104 = *((_DWORD *)v12 + 2);
        }

        else
        {
          *uint64_t v107 = 4;
        }

        int v690 = *((_DWORD *)v12 + 3) - v104;
        if (*((_DWORD *)v12 + 1)) {
          __int16 v691 = 257;
        }
        else {
          __int16 v691 = 1;
        }
        *uint64_t v107 = v691;
        uint64_t v692 = v103 + (v105 << 6);
        *(_DWORD *)(v692 + 16) = 0;
        if (v690 >= 1)
        {
          uint64_t v693 = v692 + 64;
          int v694 = v690 + 1;
          do
          {
            if ((*(_WORD *)(v693 + 20) & 0x9000) != 0) {
              sub_181303888((int *)v693);
            }
            else {
              *(_WORD *)(v693 + 20) = 1;
            }
            *(_WORD *)(v693 + 20) = v691;
            *(_DWORD *)(v693 + 16) = 0;
            v693 += 64LL;
            --v694;
          }

          while (v694 > 1);
        }

        goto LABEL_21;
      case 0x4Cu:
        unint64_t v336 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v337 = *(_WORD *)(v336 + 20) & 0xFFC0;
        goto LABEL_2215;
      case 0x4Du:
        uint64_t v11 = v1564;
        uint64_t v338 = *(void *)(v1564 + 104);
        uint64_t v339 = *((int *)v12 + 2);
        uint64_t v340 = v338 + (v339 << 6);
        __int16 v342 = *(_WORD *)(v340 + 20);
        int8x16_t v341 = (_WORD *)(v340 + 20);
        if ((v342 & 0x9000) != 0) {
          sub_18130875C(v338 + (v339 << 6));
        }
        else {
          _WORD *v341 = 4;
        }
        v796 = (char *)*((void *)v12 + 2);
        if (v796)
        {
          sub_181269368(v338 + (v339 << 6), v796, *((int *)v12 + 1), 0, 0LL);
        }

        else
        {
          sub_1812D82F8(v338 + (v339 << 6), *((_DWORD *)v12 + 1));
        }

        *(_BYTE *)(v338 + (v339 << 6) + 22) = v1554;
        v12 += 40;
        continue;
      case 0x4Eu:
        uint64_t v343 = *(void *)(v1564 + 128);
        uint64_t v344 = *((int *)v12 + 1) - 1LL;
        uint64_t v345 = (int64x2_t *)(v343 + (v344 << 6));
        if ((v345[1].i16[2] & 0x12) != 0)
        {
          __int32 v346 = v345[1].i32[0];
          if ((v345[1].i16[2] & 0x400) != 0) {
            v346 += v345->i32[0];
          }
          if (v346 > *(_DWORD *)(*(void *)(v343 + (v344 << 6) + 24) + 136LL)) {
            goto LABEL_2725;
          }
        }

        v347 = (__n128 *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6));
        if ((v347[1].n128_u16[2] & 0x9000) != 0) {
          sub_181303888((int *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6)));
        }
        a2 = *v345;
        v347[1].n128_u64[0] = v345[1].u64[0];
        __n128 *v347 = (__n128)a2;
        v347[1].n128_u16[2] = v347[1].n128_u16[2] & 0x8FBF | 0x2040;
        v12 += 40;
        continue;
      case 0x4Fu:
        int v348 = *((_DWORD *)v12 + 3);
        uint64_t v349 = (uint64_t)*((int *)v12 + 2) << 6;
        uint64_t v350 = (uint64_t)*((int *)v12 + 1) << 6;
        while (1)
        {
          unint64_t v351 = v1567 + v349;
          if ((*(_WORD *)(v1567 + v349 + 20) & 0x9000) != 0 || *(_DWORD *)(v351 + 32)) {
            sub_181303838(v1567 + v349);
          }
          unint64_t v352 = v1567 + v350;
          a2 = *(int64x2_t *)(v1567 + v350);
          __int128 v353 = *(_OWORD *)(v1567 + v350 + 16);
          a4 = *(int64x2_t *)(v1567 + v350 + 32);
          __int128 v354 = *(_OWORD *)(v1567 + v350 + 48);
          *(int64x2_t *)(v351 + 32) = a4;
          *(_OWORD *)(v351 + 48) = v354;
          *(int64x2_t *)unint64_t v351 = a2;
          *(_OWORD *)(v351 + 16) = v353;
          *(_WORD *)(v352 + 20) = 1;
          *(_DWORD *)(v352 + 32) = 0;
          if ((*(_WORD *)(v351 + 20) & 0x4000) != 0)
          {
          }

          v349 += 64LL;
          v350 += 64LL;
          if (!--v348) {
            goto LABEL_21;
          }
        }

      case 0x50u:
        int v355 = *((_DWORD *)v12 + 3);
        uint64_t v356 = (uint64_t)*((int *)v12 + 2) << 6;
        uint64_t v357 = (uint64_t)*((int *)v12 + 1) << 6;
        while (2)
        {
          unint64_t v358 = v1567 + v356;
          unint64_t v359 = v1567 + v357;
          if ((*(_WORD *)(v1567 + v356 + 20) & 0x9000) != 0)
          {
            sub_18130879C(v1567 + v356, (__int128 *)v359, 0x4000);
            LOWORD(v360) = *(_WORD *)(v358 + 20);
          }

          else
          {
            a2 = *(int64x2_t *)v359;
            uint64_t v360 = *(void *)(v359 + 16);
            *(void *)(v358 + 16) = v360;
            *(int64x2_t *)unint64_t v358 = a2;
            LOWORD(v360) = WORD2(v360);
            if ((*(_WORD *)(v359 + 20) & 0x2000) == 0)
            {
              LOWORD(v360) = WORD2(v360) & 0x8FFF | 0x4000;
              *(_WORD *)(v358 + 20) = v360;
            }
          }

          if ((v360 & 0x4000) == 0) {
            goto LABEL_398;
          }
          LOWORD(v360) = *(_WORD *)(v358 + 20);
LABEL_398:
          if ((v360 & 0x800) != 0 && (*((_WORD *)v12 + 1) & 2) != 0) {
            *(_WORD *)(v358 + 20) = v360 & 0xF7FF;
          }
          if (v355)
          {
            --v355;
            v356 += 64LL;
            v357 += 64LL;
            continue;
          }

          goto LABEL_21;
        }

      case 0x51u:
        uint64_t v361 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        v362 = (__n128 *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6));
        if ((v362[1].n128_u16[2] & 0x9000) != 0) {
          goto LABEL_1153;
        }
        a2 = *(int64x2_t *)v361;
        v362[1].n128_u64[0] = *(void *)(v361 + 16);
        __n128 *v362 = (__n128)a2;
        if ((*(_BYTE *)(v361 + 21) & 0x20) != 0) {
          goto LABEL_21;
        }
        v362[1].n128_u16[2] = v362[1].n128_u16[2] & 0x8FFF | 0x4000;
        v12 += 40;
        continue;
      case 0x52u:
        uint64_t v363 = *(void *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6));
        uint64_t v364 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        uint64_t v234 = (_WORD *)(v364 + 20);
        if ((*(_WORD *)(v364 + 20) & 0x9000) != 0) {
          goto LABEL_407;
        }
        goto LABEL_2405;
      case 0x53u:
        uint64_t v11 = v1564;
        if (*(uint64_t *)(v1564 + 80) < 1)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        *(_DWORD *)(v1564 + 52) = 787;
        *(_BYTE *)(v1564 + 264) = 2;
        sub_181302AB0((uint64_t *)v1564, "FOREIGN KEY constraint failed", a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
        else {
          LODWORD(v19) = 787;
        }
        goto LABEL_2728;
      case 0x54u:
        uint64_t v11 = v1564;
        *(_DWORD *)(v1564 + 44) = (*(_DWORD *)(v1564 + 44) | 1) + 2;
        *(void *)(v1564 + 160) = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        if (*(_BYTE *)(v13 + 103)) {
          goto LABEL_8;
        }
        if ((*(_BYTE *)(v13 + 110) & 4) != 0) {
          (*(void (**)(uint64_t, void, uint64_t, void))(v13 + 240))( 4LL,  *(void *)(v13 + 248),  v1564,  0LL);
        }
        *(_DWORD *)(v1564 + 48) = -858993459 * ((unint64_t)(v12 - v1565) >> 3) + 1;
        uint64_t v1453 = 100LL;
        goto LABEL_2770;
      case 0x55u:
        uint64_t v365 = *((int *)v12 + 1);
        if (!(_DWORD)v365) {
          goto LABEL_21;
        }
        unint64_t v366 = v1567;
        goto LABEL_428;
      case 0x56u:
        uint64_t v367 = *((int *)v12 + 1);
        unint64_t v368 = v1567 + (v367 << 6);
        if (v1567)
        {
          __int16 v369 = *(_WORD *)(v368 + 20);
          if ((v369 & 0x24) != 0)
          {
            uint64_t v370 = *(void *)v368;
            goto LABEL_1901;
          }

          if ((v369 & 8) != 0)
          {
            a2.i64[0] = *(void *)v368;
            uint64_t v1158 = 0x7FFFFFFFFFFFFFFFLL;
            else {
              uint64_t v370 = 0x8000000000000000LL;
            }
            goto LABEL_1901;
          }

          if ((v369 & 0x12) != 0 && *(void *)(v1567 + (v367 << 6) + 8))
          {
            uint64_t v370 = sub_181303DF0(v1567 + (v367 << 6));
LABEL_1901:
            *(void *)unint64_t v368 = v370;
            *(_WORD *)(v1567 + (v367 << 6) + 20) = *(_WORD *)(v1567 + (v367 << 6) + 20) & 0xF240 | 4;
            *(void *)unint64_t v368 = v370 + *((int *)v12 + 2);
            v12 += 40;
            continue;
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        uint64_t v370 = 0LL;
        goto LABEL_1901;
      case 0x57u:
        uint64_t v371 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v371 + 20) & 0x24) == 0) {
          goto LABEL_21;
        }
        sub_1812DADD4(v371);
        v12 += 40;
        continue;
      case 0x58u:
        uint64_t v372 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v372 + 20) & 0x400) != 0)
        {
          int v373 = sub_1812B7E58((int *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6)));
          if (v373) {
            goto LABEL_2582;
          }
        }

        int v68 = sub_1813049BC(v372, v12[8], v1554);
        uint64_t v11 = v1564;
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x5Au:
        unint64_t v374 = v17;
        if ((*((_WORD *)v12 + 1) & 1) != 0) {
          uint64_t v375 = *((void *)v12 - 3) + 4LL;
        }
        else {
          uint64_t v375 = 0LL;
        }
        uint64_t v1537 = *((unsigned int *)v12 + 3);
        if ((int)v1537 < 1)
        {
          v12 += 40;
        }

        else
        {
          unsigned int v1550 = v18;
          uint64_t v733 = 0LL;
          uint64_t v734 = *((void *)v12 + 2);
          int v1508 = *((_DWORD *)v12 + 1);
          int v1501 = *((_DWORD *)v12 + 2);
          while (1)
          {
            v735 = v12;
            unint64_t v736 = v374;
            int v737 = v375 ? *(_DWORD *)(v375 + 4 * v733) : v733;
            char v738 = *(_BYTE *)(*(void *)(v734 + 24) + v733);
            uint64_t v739 = (v737 + v1508);
            uint64_t v740 = (v737 + v1501);
            int v741 = sub_1812A4980(v1567 + (v739 << 6), v1567 + (v740 << 6), *(void *)(v734 + 32 + 8 * v733));
            if (v741) {
              break;
            }
            ++v733;
            unint64_t v374 = v736;
            uint64_t v12 = v735;
            if (v1537 == v733)
            {
              int v1491 = 0;
              uint64_t v18 = v1550;
              unint64_t v17 = v374;
              v12 += 40;
              goto LABEL_22;
            }
          }

          if ((*(_BYTE *)(*(void *)(v734 + 24) + v733) & 2) != 0
            && ((*(_WORD *)(v1567 + (v739 << 6) + 20) & 1) != 0 || (*(_WORD *)(v1567 + (v740 << 6) + 20) & 1) != 0))
          {
            int v741 = -v741;
          }

          if ((v738 & 1) != 0) {
            int v870 = -v741;
          }
          else {
            int v870 = v741;
          }
          int v1491 = v870;
          unint64_t v871 = v736;
          uint64_t v18 = v1550;
          v872 = v735;
          unint64_t v17 = v871;
          uint64_t v12 = v872 + 40;
        }

        continue;
      case 0x5Bu:
        uint64_t v376 = *((int *)v12 + 2);
        uint64_t v377 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        __int16 v378 = *(_WORD *)(v377 + 20);
        if ((v378 & 0x24) != 0)
        {
          BOOL v379 = *(void *)v377 == 0LL;
        }

        else
        {
          if ((v378 & 1) != 0)
          {
            int v1070 = *((_DWORD *)v12 + 3);
            goto LABEL_2404;
          }

          if ((v378 & 8) != 0)
          {
            a2.i64[0] = *(void *)v377;
          }

          else if ((v378 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_181303DB8(v377);
          }

          else
          {
            a2.i64[0] = 0LL;
          }

          BOOL v379 = *(double *)a2.i64 == 0.0;
        }

        int v1070 = !v379;
LABEL_2404:
        uint64_t v364 = v1567 + (v376 << 6);
        uint64_t v363 = *((_DWORD *)v12 + 4) ^ v1070;
        uint64_t v234 = (_WORD *)(v364 + 20);
        if ((*(_WORD *)(v364 + 20) & 0x9000) != 0)
        {
LABEL_407:
          sub_1813040AC(v364, v363);
          v12 += 40;
          continue;
        }

LABEL_2405:
        *(void *)uint64_t v364 = v363;
        goto LABEL_2406;
      case 0x5Cu:
        unint64_t v366 = v1567;
        if ((*(_WORD *)(v1567 + ((uint64_t)*((int *)v12 + 1) << 6) + 20) & 1) == 0
          && (*(_WORD *)(v1567 + ((uint64_t)*((int *)v12 + 3) << 6) + 20) & 1) == 0)
        {
          uint64_t v365 = *((int *)v12 + 2);
LABEL_428:
          uint64_t v380 = v366 + (v365 << 6);
          uint64_t v234 = (_WORD *)(v380 + 20);
          if ((*(_WORD *)(v380 + 20) & 0x9000) != 0)
          {
            sub_1813040AC(v380, 0LL);
            v12 += 40;
          }

          else
          {
            *(void *)uint64_t v380 = 0LL;
LABEL_2406:
            _WORD *v234 = 4;
            v12 += 40;
          }

          continue;
        }

        uint64_t v696 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        uint64_t v132 = (_WORD *)(v696 + 20);
        if ((*(_WORD *)(v696 + 20) & 0x9000) == 0) {
          goto LABEL_926;
        }
        goto LABEL_2358;
      case 0x5Eu:
        uint64_t v11 = v1564;
        unsigned int v381 = *((_DWORD *)v12 + 2);
        uint64_t v382 = *(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1);
        int v383 = *(_DWORD *)(v1564 + 44);
        while (2)
        {
          uint64_t v384 = *(void *)v382;
          v385 = *(int **)(*(void *)v382 + 80LL);
          if (*(_DWORD *)(*(void *)v382 + 24LL) == v383)
          {
            if (**(_BYTE **)(v384 + 40))
            {
              int v68 = sub_181304D2C(v384);
              if (v68) {
                goto LABEL_2579;
              }
              while (1)
              {
LABEL_439:
                while (1)
                {
                  v385 = *(int **)(v384 + 80);
                  int v383 = *(_DWORD *)(v1564 + 44);
                  if (*(_DWORD *)(v384 + 24) == v383) {
                    break;
                  }
                  if (*(_BYTE *)(v384 + 2))
                  {
                    int v1555 = 0;
                    goto LABEL_1729;
                  }

                  uint64_t v386 = *(void *)(v384 + 40);
                  if (*(_BYTE *)(v384 + 3))
                  {
                    int v1555 = 0;
                    goto LABEL_449;
                  }

                  if (!*(_BYTE *)v386)
                  {
                    int v1555 = 0;
                    goto LABEL_1782;
                  }

                  int v68 = sub_181304D2C(v384);
                  if (v68) {
                    goto LABEL_2579;
                  }
                }

                if (!**(_BYTE **)(v384 + 40)) {
                  break;
                }
                int v68 = sub_181304D2C(v384);
                if (v68) {
                  goto LABEL_2579;
                }
              }

              int v1555 = 0;
            }

            LODWORD(v1084) = *(unsigned __int16 *)(v384 + 66);
            goto LABEL_1726;
          }

          if (*(_BYTE *)(v384 + 2))
          {
LABEL_1729:
            if (*(_BYTE *)v384 != 3 || (uint64_t v1086 = *(unsigned int *)(v384 + 28), (int)v1086 < 1))
            {
              uint64_t v696 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
              v645 = (_WORD *)(v696 + 20);
              if ((*(_WORD *)(v696 + 20) & 0x9000) != 0) {
                goto LABEL_2358;
              }
              goto LABEL_2359;
            }

            unint64_t v1087 = v1567 + (v1086 << 6);
            int v1088 = *(_DWORD *)(v1087 + 16);
            *(_DWORD *)(v384 + 96) = v1088;
            *(_DWORD *)(v384 + 100) = v1088;
            v1089 = *(char **)(v1087 + 8);
            *(void *)(v384 + 88) = v1089;
            goto LABEL_1785;
          }

          uint64_t v386 = *(void *)(v384 + 40);
          if (!*(_BYTE *)(v384 + 3))
          {
            if (*(_BYTE *)v386)
            {
              int v68 = sub_181304D2C(v384);
              if (v68) {
                goto LABEL_2579;
              }
              goto LABEL_439;
            }

            goto LABEL_1782;
          }

LABEL_449:
          uint64_t v387 = *(void *)(v384 + 8);
          if (v387)
          {
            int v388 = *(_DWORD *)(v387 + 4LL * (v381 + 1));
            if (v388)
            {
              uint64_t v382 = v384 + 32;
              unsigned int v381 = v388 - 1;
              continue;
            }
          }

          break;
        }

        v1340 = v385;
        int v68 = sub_181304CC0(v384);
        if (!v68)
        {
          int v1555 = 0;
          v385 = v1340;
LABEL_1782:
          v1117 = v385;
          sub_1812FFFE4(v386);
          v385 = v1117;
          *(_DWORD *)(v384 + 96) = *(_DWORD *)(v386 + 64);
          int v1118 = *(unsigned __int16 *)(v386 + 68);
          v1089 = *(char **)(v386 + 56);
          int v1119 = *(_DWORD *)(*(void *)(v386 + 136) + 88LL) - (_DWORD)v1089;
          if (v1118 > v1119) {
            int v1118 = v1119 & ~(v1119 >> 31);
          }
          *(_DWORD *)(v384 + 100) = v1118;
          *(void *)(v384 + 88) = v1089;
          int v383 = *(_DWORD *)(v1564 + 44);
LABEL_1785:
          *(_DWORD *)(v384 + 24) = v383;
          int v1120 = *v1089;
          int *v385 = *v1089;
          if (v1120 < 0)
          {
            v1165 = v385;
            unsigned int v1166 = sub_181304D90(v1089, v385);
            v385 = v1165;
            unint64_t v1121 = v1166;
          }

          else
          {
            unint64_t v1121 = 1LL;
          }

          *(_DWORD *)(v384 + 56) = v1121;
          *(_WORD *)(v384 + 66) = 0;
          unint64_t v1154 = *v385;
          if (*(unsigned int *)(v384 + 100) >= v1154)
          {
            v1522 = v12;
            unint64_t v1532 = v17;
            unsigned int v1543 = v18;
            LODWORD(v1084) = 0;
            uint64_t v1155 = *(void *)(v384 + 88);
LABEL_1929:
            unint64_t v1167 = v385[v1084];
            v1168 = (char *)(v1155 + v1121);
            int v1505 = v1155;
            v1511 = v385;
            unint64_t v1169 = v1155 + v1154;
            uint64_t v1170 = v384 + 112;
            unint64_t v1171 = v1084;
            while (1)
            {
              int v1172 = *v1168;
              unsigned int v1085 = *v1168;
              *(_DWORD *)(v1170 + 4 * v1171) = v1085;
              if ((v1172 & 0x80000000) == 0)
              {
                ++v1168;
                uint64_t v1084 = byte_1813C6D70[v1085];
                goto LABEL_1942;
              }

              int v1173 = *v1168;
              int v1174 = v1168[1];
              if (v1168[1] < 0)
              {
                int v1176 = v1168[2];
                if (v1176 < 0)
                {
                  unsigned int v1177 = sub_18129BD74(v1168, (unint64_t *)&v1571);
                  uint64_t v1175 = v1177;
                  unsigned int v1085 = LODWORD(v1571);
                  if (HIDWORD(*(void *)&v1571))
                  {
                    v1168 += v1177;
                    unsigned int v1085 = -1;
                    *(_DWORD *)(v1170 + 4 * v1171) = -1;
                    v385 = v1511;
                    goto LABEL_1939;
                  }

                  v385 = v1511;
                }

                else
                {
                  unsigned int v1085 = v1176 & 0x7F | (v1173 << 14) & 0x1FC07F | ((v1174 & 0x7F) << 7);
                  uint64_t v1175 = 3LL;
                }
              }

              else
              {
                unsigned int v1085 = ((v1173 & 0x7F) << 7) | v1174;
                uint64_t v1175 = 2LL;
              }

              v1168 += v1175;
              *(_DWORD *)(v1170 + 4 * v1171) = v1085;
              if (v1085 < 0x80)
              {
                LODWORD(v1084) = byte_1813C6D70[v1085];
                goto LABEL_1941;
              }

        uint64_t v197 = v362;
        int v145 = (int8x16_t)xmmword_1813CDDC0;
        int v144 = (int8x16_t)xmmword_1813CDDB0;
        int v146 = (int8x16_t)xmmword_1813CDDD0;
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        unint64_t v249 = v349;
        goto LABEL_450;
      }

      uint64_t v247 = *(_DWORD *)(v18 + 144);
      if (HIDWORD(v337))
      {
        uint64_t v248 = *(void *)(a1 + 168);
        if (!v248) {
          uint64_t v248 = a1;
        }
        *(_BYTE *)(v248 + 32) = 1;
        ++v336;
      }

      unint64_t v249 = v349;
      if (v331)
      {
        if (*(_DWORD *)(v18 + 148) <= v247)
        {
          __int128 v251 = v335;
          sub_18131044C(v18, 167LL, v335, 0LL, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v247 + 1;
          __int128 v250 = *(void *)(v18 + 136) + 40LL * v247;
          __int128 v251 = v335;
          *(_DWORD *)__int128 v250 = 167;
          *(_DWORD *)(v250 + 4) = v335;
          __int128 v252 = 0uLL;
          *(_OWORD *)(v250 + 8) = 0u;
          *(_OWORD *)(v250 + 24) = 0u;
        }

        sub_1812A9848( a1,  v15,  (uint64_t)v334,  v251,  v341,  v349,  (__int16)v343,  0LL,  v252,  5u,  v360 == v141,  v342);
        uint64_t v271 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v271)
        {
          sub_18131044C(v18, 168LL, v251, 0LL, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v271 + 1;
          uint64_t v272 = *(void *)(v18 + 136) + 40LL * v271;
          *(_DWORD *)uint64_t v272 = 168;
          *(_DWORD *)(v272 + 4) = v251;
          a9 = 0uLL;
          *(_OWORD *)(v272 + 8) = 0u;
          *(_OWORD *)(v272 + 24) = 0u;
        }

        int v145 = (int8x16_t)xmmword_1813CDDC0;
        int v144 = (int8x16_t)xmmword_1813CDDB0;
        int v146 = (int8x16_t)xmmword_1813CDDD0;
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        unint64_t v249 = v349;
        if (HIDWORD(v337))
        {
LABEL_476:
          int v263 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v263)
          {
            sub_18131044C(v18, 86LL, HIDWORD(v337), 1LL, 0LL, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v18 + 144) = v263 + 1;
            uint64_t v264 = *(void *)(v18 + 136) + 40LL * v263;
            *(_DWORD *)uint64_t v264 = 86;
            *(_DWORD *)(v264 + 4) = HIDWORD(v337);
            *(_DWORD *)(v264 + 8) = 1;
            *(void *)(v264 + 12) = 0LL;
            *(void *)(v264 + 28) = 0LL;
            *(void *)(v264 + 20) = 0LL;
            *(_DWORD *)(v264 + 36) = 0;
          }

          uint64_t v267 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v267)
          {
            uint64_t v267 = sub_18131044C(v18, 9LL, 0LL, 0LL, 0LL, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v18 + 144) = v267 + 1;
            uint64_t v268 = *(void *)(v18 + 136) + 40LL * v267;
            *(_BYTE *)uint64_t v268 = 9;
            *(_OWORD *)(v268 + 1) = 0u;
            *(_OWORD *)(v268 + 17) = 0u;
            *(void *)(v268 + 32) = 0LL;
          }

          uint64_t v269 = *(void *)(v18 + 24);
          int v270 = ~v345;
          if (*(_DWORD *)(v269 + 68) + *(_DWORD *)(v269 + 72) < 0) {
            sub_18131E420(v269, v18, v270);
          }
          else {
            *(_DWORD *)(*(void *)(v269 + 80) + 4LL * v270) = *(_DWORD *)(v18 + 144);
          }
          uint64_t v345 = *(_DWORD *)(a1 + 68) - 1;
          *(_DWORD *)(a1 + 68) = v345;
          if (*(void *)(v141 + 72))
          {
            unint64_t v273 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v273)
            {
              sub_18131044C(v18, 50LL, v350, v345, 0LL, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v273 + 1;
              unsigned int v274 = *(void *)(v18 + 136) + 40LL * v273;
              *(_DWORD *)unsigned int v274 = 50;
              *(_DWORD *)(v274 + 4) = v350;
              *(_DWORD *)(v274 + 8) = v345;
              *(void *)(v274 + 12) = 0LL;
              *(void *)(v274 + 28) = 0LL;
              *(void *)(v274 + 20) = 0LL;
              *(_DWORD *)(v274 + 36) = 0;
            }
          }

          if (v247 - v338 >= 1)
          {
            uint64_t v275 = 40LL * v338;
            uint64_t v276 = v247 - v338 + 1;
            do
            {
              uint64_t v277 = &byte_18C550680;
              if (!*(_BYTE *)(*(void *)v18 + 103LL)) {
                uint64_t v277 = (char *)(*(void *)(v18 + 136) + v275);
              }
              unint64_t v278 = *v277;
              if ((_DWORD)v278 != 142)
              {
                int v279 = *((_WORD *)v277 + 1);
                __int16 v280 = v277[1];
                int v281 = (byte_1813C6495[*v277] & 1) != 0 ? v345 : *((unsigned int *)v277 + 2);
                int v282 = (_DWORD)v280 == -3 ? (int)*((void *)v277 + 2) : *((void *)v277 + 2);
                sub_1812B9B68( (uint64_t *)v18,  v278,  *((unsigned int *)v277 + 1),  v281,  *((unsigned int *)v277 + 3),  v282,  v280,  a8);
                int v283 = *(_DWORD *)(v18 + 144);
                uint64_t v39 = __OFSUB__(v283, 1);
                int v284 = v283 - 1;
                if (v284 < 0 == v39) {
                  *(_WORD *)(*(void *)(v18 + 136) + 40LL * v284 + 2) = v279;
                }
              }

              v275 += 40LL;
              --v276;
            }

            while (v276 > 1);
          }

          sub_181324A24((uint64_t *)a1, 2LL, v141, a4, a5, a6, a7, a8);
          int v285 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v18 + 103LL)) {
            int v285 = (char *)(*(void *)(v18 + 136) + 40LL * v267);
          }
          *((_DWORD *)v285 + 2) = *(_DWORD *)(v18 + 144);
          uint64_t v339 = 1;
          unsigned int v14 = v370;
          goto LABEL_449;
        }
      }

      else
      {
        sub_1812A9848( a1,  v15,  (uint64_t)v334,  v335,  v341,  v349,  (__int16)v343,  0LL,  a9,  5u,  v360 == v141,  v342);
        int v145 = (int8x16_t)xmmword_1813CDDC0;
        int v144 = (int8x16_t)xmmword_1813CDDB0;
        int v146 = (int8x16_t)xmmword_1813CDDD0;
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        if (HIDWORD(v337)) {
          goto LABEL_476;
        }
      }

      uint64_t v339 = 1;
      uint64_t v197 = v362;
LABEL_450:
      int64_t v253 = *(void *)(v18 + 24);
      uint64_t v254 = -v355;
      if (*(_DWORD *)(v253 + 68) + *(_DWORD *)(v253 + 72) < 0)
      {
        sub_18131E420(v253, v18, v254);
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        int v146 = (int8x16_t)xmmword_1813CDDD0;
        int v145 = (int8x16_t)xmmword_1813CDDC0;
        int v144 = (int8x16_t)xmmword_1813CDDB0;
      }

      else
      {
        *(_DWORD *)(*(void *)(v253 + 80) + 4LL * v254) = *(_DWORD *)(v18 + 144);
      }

      uint64_t v114 = v249 == (_DWORD)v156;
      __int16 v33 = v356;
      if (!v114)
      {
        if (v343 == 1)
        {
          if (v249)
          {
            uint64_t v255 = *((unsigned __int8 *)v16 + 31);
            if (v255 <= 7)
            {
              *((_BYTE *)v16 + 31) = v255 + 1;
              int v256 = &v16[v255 + 56];
LABEL_460:
              *int v256 = v249;
            }
          }
        }

        else if (v16[10] < v343)
        {
          v16[10] = v343;
          int v256 = v330;
          goto LABEL_460;
        }
      }

      if (v101)
      {
        if (v344)
        {
          int v257 = *(void **)(v101 + 32);
          if (!v257 || !*v257 || !v257[7])
          {
            uint64_t v258 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v258)
            {
              sub_18131044C(v18, 9LL, 0LL, v333, 0LL, a6, a7, a8);
              v147.i64[0] = 0x1000100010001LL;
              v147.i64[1] = 0x1000100010001LL;
              int v146 = (int8x16_t)xmmword_1813CDDD0;
              int v145 = (int8x16_t)xmmword_1813CDDC0;
              int v144 = (int8x16_t)xmmword_1813CDDB0;
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v258 + 1;
              int v259 = *(void *)(v18 + 136) + 40LL * v258;
              *(void *)int v259 = 9LL;
              *(_DWORD *)(v259 + 8) = v333;
              *(void *)(v259 + 12) = 0LL;
              *(void *)(v259 + 28) = 0LL;
              *(void *)(v259 + 20) = 0LL;
              *(_DWORD *)(v259 + 36) = 0;
            }

            uint64_t v260 = &byte_18C550680;
            if (!*(_BYTE *)(*(void *)v18 + 103LL)) {
              uint64_t v260 = (char *)(*(void *)(v18 + 136) + 40LL * v344);
            }
            uint64_t v344 = 0;
            *((_DWORD *)v260 + 2) = *(_DWORD *)(v18 + 144);
          }
        }
      }

LABEL_1939:
              LODWORD(v1084) = (v1085 - 12) >> 1;
LABEL_1941:
              uint64_t v1084 = v1084;
LABEL_1942:
              v1167 += v1084;
              LOWORD(v1084) = v1171 + 1;
              v385[v1171 + 1] = v1167;
              if (v1171 < v381)
              {
                ++v1171;
              }

              LODWORD(v1084) = (unsigned __int16)v1084;
              if ((unint64_t)v1168 >= v1169)
              {
                uint64_t v18 = v1543;
              }

              else
              {
                uint64_t v18 = v1543;
              }

              LODWORD(v1084) = *v385;
              if (*v385)
              {
                if (*(void *)(v384 + 88))
                {
                  uint64_t v11 = v1564;
                  unint64_t v17 = v1532;
                }

                else
                {
                  uint64_t v11 = v1564;
                  unint64_t v17 = v1532;
                  if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2])) {
                    sub_181303838((uint64_t)__buf);
                  }
                }

                uint64_t v12 = v1522;
LABEL_2503:
                int v1396 = *((_DWORD *)v1565 + 3);
                BOOL v1397 = __OFSUB__(v1396, 1);
                int v1398 = v1396 - 1;
                if (v1398 < 0 == v1397)
                {
                  uint64_t v12 = &v1565[40 * v1398 + 40];
                  goto LABEL_22;
                }

                int v1433 = 103176;
LABEL_2616:
                LODWORD(v19) = sub_1812FBF50(v1433);
                goto LABEL_2728;
              }

              LODWORD(v1168) = v1169;
LABEL_2329:
              *(_WORD *)(v384 + 66) = v1084;
              *(_DWORD *)(v384 + 56) = (_DWORD)v1168 - v1505;
              if (*(void *)(v384 + 88))
              {
                uint64_t v12 = v1522;
                unint64_t v17 = v1532;
              }

              else
              {
                uint64_t v12 = v1522;
                unint64_t v17 = v1532;
                if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2]))
                {
                  sub_181303838((uint64_t)__buf);
                  v385 = v1511;
                  LODWORD(v1084) = *(unsigned __int16 *)(v384 + 66);
                }
              }

LABEL_2333:
              if (v381 < v1084)
              {
                unsigned int v1545 = v18;
LABEL_2335:
                uint64_t v1326 = *((int *)v12 + 3);
                a10 = v1567 + (v1326 << 6);
                v1327 = (_WORD *)(a10 + 20);
                if ((*(_WORD *)(a10 + 20) & 0x9000) != 0)
                {
                  v1328 = (int *)(v1567 + (v1326 << 6));
                  unsigned int v1542 = v381;
                  uint64_t v1329 = *((int *)v12 + 3);
                  v1330 = v385;
                  uint64_t v1331 = a10;
                  sub_181303888(v1328);
                  a10 = v1331;
                  v385 = v1330;
                  uint64_t v1326 = v1329;
                  unsigned int v381 = v1542;
                }

                if (*(_DWORD *)(v384 + 100) < v385[v381 + 1])
                {
                  *(_BYTE *)(v1567 + (v1326 << 6) + 22) = v1554;
                  int v1332 = *((_WORD *)v12 + 1) & 0xC0;
                  if ((*((_WORD *)v12 + 1) & 0xC0) == 0) {
                    goto LABEL_2343;
                  }
                  if (v1332 != 128)
                  {
                    if (v1085 < 0xC) {
                      goto LABEL_2344;
                    }
                    if ((v1085 & 1) != 0 && v1332 != 192)
                    {
LABEL_2343:
                      if (v1085 > 0x7F) {
                        goto LABEL_2345;
                      }
LABEL_2344:
                      if (byte_1813C6D70[v1085])
                      {
LABEL_2345:
                        int v1333 = sub_181304E6C(v384, v381, v1085, v385[v381], *(_DWORD *)(v1564 + 44), v1487, a10);
                        LODWORD(v19) = v1333;
                        uint64_t v18 = v1545;
                        if (!v1333)
                        {
                          int v1555 = 0;
                          v12 += 40;
                          goto LABEL_22;
                        }

                        if (v1333 != 18)
                        {
                          uint64_t v11 = v1564;
                          if (v1333 != 7) {
                            goto LABEL_2728;
                          }
                          goto LABEL_8;
                        }

LABEL_2725:
                        uint64_t v11 = v1564;
                        sub_181302AB0( (uint64_t *)v1564,  "string or blob too big",  a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  v1482);
                        LODWORD(v19) = 18;
                        goto LABEL_2728;
                      }
                    }
                  }

                  v1335 = byte_1813C6558;
LABEL_2352:
                  sub_18129BF0C(v1335, v1085, a10);
                  uint64_t v18 = v1545;
                  v12 += 40;
                  goto LABEL_22;
                }

                v1334 = (char *)(*(void *)(v384 + 88) + v385[v381]);
                if (v1085 <= 0xB)
                {
                  v1335 = v1334;
                  goto LABEL_2352;
                }

                unint64_t v1336 = (unint64_t)(v1085 - 12) >> 1;
                unint64_t v1337 = v1567 + (v1326 << 6);
                *(_DWORD *)(v1337 + 16) = v1336;
                *(_BYTE *)(v1337 + 22) = v1554;
                if (*(_DWORD *)(v1337 + 32) >= (int)v1336 + 2)
                {
                  v1339 = *(void **)(v1337 + 40);
                  *(void *)(v1337 + 8) = v1339;
                  unint64_t v1338 = v1567;
                  goto LABEL_2515;
                }

                if ((int)v1336 > *(_DWORD *)(v13 + 136))
                {
                  LOBYTE(v18) = v1545;
                  goto LABEL_2725;
                }

                _WORD *v1327 = 1;
                if (!sub_18128FAF0(a10, (int)v1336 + 2, 0))
                {
                  unint64_t v1338 = v1567;
                  v1339 = *(void **)(v1567 + (v1326 << 6) + 8);
LABEL_2515:
                  unint64_t v1401 = v1338 + (v1326 << 6);
                  memcpy(v1339, v1334, (unint64_t)(v1085 - 12) >> 1);
                  *(_BYTE *)(*(void *)(v1401 + 8) + v1336) = 0;
                  *(_BYTE *)(*(void *)(v1401 + 8) + v1336 + 1LL) = 0;
                  _WORD *v1327 = word_1813C6D6C[v1085 & 1];
                  uint64_t v18 = v1545;
                  v12 += 40;
                  goto LABEL_22;
                }

LABEL_2589:
                LOBYTE(v18) = v1545;
                uint64_t v11 = v1564;
LABEL_8:
                if (!*(_BYTE *)(v13 + 103) && !*(_BYTE *)(v13 + 104))
                {
                  *(_BYTE *)(v13 + 103) = 1;
                  ++*(_DWORD *)(v13 + 432);
                  *(_WORD *)(v13 + 436) = 0;
                  uint64_t v20 = *(void *)(v13 + 344);
                  if (v20)
                  {
                    sub_1812DC47C(v20, "out of memory", a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
                    for (iuint64_t i = *(void *)(v13 + 344); ; ++*(_DWORD *)(ii + 48))
                    {
                      *(_DWORD *)(ii + 24) = 7;
                      iuint64_t i = *(void *)(ii + 256);
                      if (!ii) {
                        break;
                      }
                    }
                  }
                }

                sub_181302AB0((uint64_t *)v11, "out of memory", a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
                LODWORD(v19) = 7;
                goto LABEL_2728;
              }

              uint64_t v696 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
              if (v12[1] == 246)
              {
                sub_1812AB5D4(v696, *((__int128 **)v12 + 2), 0x2000);
                v12 += 40;
                goto LABEL_22;
              }

              v645 = (_WORD *)(v696 + 20);
              if ((*(_WORD *)(v696 + 20) & 0x9000) != 0)
              {
LABEL_2358:
                sub_181303888((int *)v696);
                v12 += 40;
                goto LABEL_22;
              }

LABEL_2359:
              _WORD *v645 = 1;
              v12 += 40;
              goto LABEL_22;
            }
          }

          *(void *)(v384 + 88) = 0LL;
          *(_DWORD *)(v384 + 100) = 0;
          LODWORD(v1084) = 0;
LABEL_1726:
          if (v381 < v1084)
          {
            unsigned int v1545 = v18;
            unsigned int v1085 = *(_DWORD *)(v384 + 4LL * v381 + 112);
            goto LABEL_2335;
          }

          unint64_t v1121 = *(unsigned int *)(v384 + 56);
          unint64_t v1154 = *v385;
          if (v1121 >= v1154)
          {
            unsigned int v1085 = 0u;
            goto LABEL_2333;
          }

          uint64_t v1155 = *(void *)(v384 + 88);
          v1522 = v12;
          unint64_t v1532 = v17;
          unsigned int v1543 = v18;
          if (!v1155)
          {
            memset(__buf, 0, sizeof(__buf));
            v1156 = v385;
            int v1157 = sub_181304E1C(*(void *)(v384 + 40), *v385, (uint64_t)__buf);
            if (v1157)
            {
              LODWORD(v19) = v1157;
              uint64_t v11 = v1564;
              goto LABEL_2690;
            }

            int v1555 = 0;
            uint64_t v1155 = *((void *)&__buf[0] + 1);
            LODWORD(v1084) = *(unsigned __int16 *)(v384 + 66);
            unint64_t v1121 = *(unsigned int *)(v384 + 56);
            unint64_t v1154 = *v1156;
            v385 = v1156;
          }

          goto LABEL_1929;
        }

        goto LABEL_2579;
      case 0x5Fu:
        uint64_t v389 = *((void *)v12 + 2);
        int v390 = *(__int16 *)(v389 + 54);
        if (v390 < 1) {
          goto LABEL_21;
        }
        uint64_t v391 = 0LL;
        uint64_t v392 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        v393 = (unsigned __int8 *)(*(void *)(v389 + 8) + 8LL);
        while (2)
        {
          __int16 v701 = *((_WORD *)v393 + 3);
          if ((v701 & 0x60) == 0) {
            goto LABEL_854;
          }
          if ((v701 & 0x20) != 0) {
            goto LABEL_849;
          }
          if (*((_DWORD *)v12 + 3))
          {
            v392 += 64LL;
          }

          else
          {
LABEL_854:
            sub_1812AB614(v392, (char)v393[1], v1554);
            __int16 v702 = *(_WORD *)(v392 + 20);
            if ((v702 & 1) == 0)
            {
              switch((unint64_t)*v393 >> 4)
              {
                case 2uLL:
                  if ((v702 & 0x10) != 0) {
                    break;
                  }
                  goto LABEL_2587;
                case 3uLL:
                case 4uLL:
                  if ((v702 & 4) != 0) {
                    break;
                  }
                  goto LABEL_2587;
                case 5uLL:
                  if ((v702 & 4) != 0)
                  {
                    uint64_t v703 = *(void *)v392;
                    if ((unint64_t)(*(void *)v392 + 0x800000000000LL) >> 48)
                    {
                      *(double *)a2.i64 = (double)v703;
                      *(double *)uint64_t v392 = (double)v703;
                      __int16 v704 = 8;
                      __int16 v705 = -13;
                    }

                    else
                    {
                      __int16 v704 = 32;
                      __int16 v705 = -37;
                    }

                    *(_WORD *)(v392 + 20) = v705 & v702 | v704;
                  }

                  else if ((v702 & 0x28) == 0)
                  {
LABEL_2587:
                    uint64_t v11 = v1564;
                    sub_181302AB0( (uint64_t *)v1564,  "cannot store %s value in %s column %s.%s",  a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  (char)off_189B6DB58[byte_1813C6455[v702 & 0x3F] - 1]);
                    LODWORD(v19) = 3091;
                    goto LABEL_2728;
                  }

                  break;
                case 6uLL:
                  if ((v702 & 2) != 0) {
                    break;
                  }
                  goto LABEL_2587;
                default:
                  break;
              }
            }

            v392 += 64LL;
            LOWORD(v390) = *(_WORD *)(v389 + 54);
          }

LABEL_849:
          ++v391;
          v393 += 16;
          continue;
        }

      case 0x60u:
        int8x16x2_t v394 = (_BYTE *)*((void *)v12 + 2);
        uint64_t v395 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        char v398 = *v394;
        v397 = v394 + 1;
        char v396 = v398;
        do
        {
          sub_1812AB614(v395, v396, v1554);
          if (*(v397 - 1) == 69)
          {
            __int16 v402 = *(_WORD *)(v395 + 20);
            if ((v402 & 4) != 0)
            {
              uint64_t v403 = *(void *)v395;
              if ((unint64_t)(*(void *)v395 + 0x800000000000LL) >> 48)
              {
                *(double *)a2.i64 = (double)v403;
                *(double *)uint64_t v395 = (double)v403;
                __int16 v399 = 8;
                __int16 v400 = -15;
              }

              else
              {
                __int16 v399 = 32;
                __int16 v400 = -37;
              }

              *(_WORD *)(v395 + 20) = v400 & v402 | v399;
            }
          }

          int v401 = *v397++;
          char v396 = v401;
          v395 += 64LL;
        }

        while (v401);
        goto LABEL_21;
      case 0x61u:
        v404 = (_BYTE *)*((void *)v12 + 2);
        uint64_t v405 = *((int *)v12 + 2);
        unint64_t v406 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        uint64_t v1534 = *((int *)v12 + 3);
        if (v404)
        {
          char v409 = *v404;
          v408 = v404 + 1;
          char v407 = v409;
          uint64_t v410 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
          do
          {
            sub_1812AB614(v410, v407, v1554);
            if (*(v408 - 1) == 69)
            {
              __int16 v412 = *(_WORD *)(v410 + 20);
              if ((v412 & 4) != 0) {
                *(_WORD *)(v410 + 20) = v412 & 0xFFDB | 0x20;
              }
            }

            v410 += 64LL;
            int v411 = *v408++;
            char v407 = v411;
          }

          while (v411);
        }

        v1518 = v12;
        unint64_t v1528 = v17;
        uint64_t v663 = 0LL;
        int v664 = 0;
        uint64_t v665 = 0LL;
        uint64_t v666 = v406 + (v405 << 6) - 64;
        v1507 = (_DWORD *)(v1567 + (v1534 << 6));
        v667 = (int *)v666;
        unsigned int v1549 = v18;
        while (1)
        {
          unsigned int v668 = *((unsigned __int16 *)v667 + 10);
          if ((v668 & 1) != 0)
          {
            v667[9] = ((int)(v668 << 21) >> 31) & 0xA;
            ++v664;
          }

          else
          {
            if ((v668 & 0x24) == 0)
            {
              if ((v668 & 8) == 0)
              {
                unsigned int v671 = v667[4];
                unsigned int v672 = ((v668 >> 1) & 1 | (2 * v671)) + 12;
                if ((v668 & 0x400) != 0)
                {
                  uint64_t v673 = *v667;
                  v672 += 2 * v673;
                  if (v665)
                  {
                    signed int v674 = v673 + v671;
                    if ((int)(v673 + v671) > 0)
                    {
                      uint64_t v675 = v663;
                      goto LABEL_766;
                    }

                    if ((v668 & 0x10) != 0)
                    {
                      uint64_t v675 = v663;
                      signed int v674 = 1;
LABEL_766:
                      if (sub_18128FAF0((uint64_t)v667, v674, 1))
                      {
                        uint64_t v11 = v1564;
                        uint64_t v12 = v1518;
                        unint64_t v17 = v1528;
                        LOBYTE(v18) = v1549;
                        goto LABEL_8;
                      }

                      bzero((void *)(*((void *)v667 + 1) + v667[4]), *v667);
                      int v676 = *v667;
                      v667[4] += *v667;
                      *((_WORD *)v667 + 10) &= 0xF9FFu;
                      v671 += v676;
                      uint64_t v663 = v675;
                    }

                    else
                    {
                      v671 += v673;
                    }
                  }

                  else
                  {
                    v663 += v673;
                  }
                }

                if (v672 >= 0x80)
                {
                  unint64_t v678 = v672;
                  int v677 = 1;
                  do
                  {
                    unint64_t v679 = v678 >> 14;
                    v678 >>= 7;
                    ++v677;
                  }

                  while (v679);
                }

                else
                {
                  int v677 = 1;
                }

                v665 += v671;
                v664 += v677;
                v667[9] = v672;
                uint64_t v18 = v1549;
                goto LABEL_737;
              }

              ++v664;
              v665 += 8LL;
LABEL_753:
              v667[9] = 7;
              goto LABEL_737;
            }

            uint64_t v669 = *(void *)v667;
            unint64_t v670 = *(void *)v667 ^ (*(uint64_t *)v667 >> 63);
            ++v664;
            if (v670 <= 0x7F)
            {
              if ((unint64_t)v669 > 1 || *(unsigned __int8 *)(v1564 + 265) < 4u)
              {
                ++v665;
                v667[9] = 1;
              }

              else
              {
                v667[9] = v670 + 8;
              }

              goto LABEL_737;
            }

            if (v670 >> 15)
            {
              if (!(v670 >> 23))
              {
                v665 += 3LL;
                v667[9] = 3;
                goto LABEL_737;
              }

              if (!(v670 >> 31))
              {
                v665 += 4LL;
                v667[9] = 4;
                goto LABEL_737;
              }

              if (!(v670 >> 47))
              {
                v665 += 6LL;
                v667[9] = 5;
                goto LABEL_737;
              }

              v665 += 8LL;
              if ((v668 & 0x20) == 0)
              {
                v667[9] = 6;
                goto LABEL_737;
              }

              *(double *)a2.i64 = (double)v669;
              *(double *)v667 = (double)v669;
              *((_WORD *)v667 + 10) = v668 & 0xFFD7 | 8;
              goto LABEL_753;
            }

            v665 += 2LL;
            v667[9] = 2;
          }

LABEL_737:
          BOOL v95 = v667 == (int *)v406;
          v667 -= 16;
          if (v95)
          {
            if (v664 > 126)
            {
              if (v664 == 127)
              {
                int v745 = 1;
              }

              else
              {
                unint64_t v1002 = v664;
                int v745 = 1;
                do
                {
                  unint64_t v1003 = v1002 >> 14;
                  v1002 >>= 7;
                  ++v745;
                }

                while (v1003);
              }

              int v1004 = v745 + v664;
              if ((v745 + v664) >= 0x80)
              {
                unint64_t v1006 = v1004;
                int v1005 = 1;
                uint64_t v12 = v1518;
                unint64_t v17 = v1528;
                do
                {
                  unint64_t v1007 = v1006 >> 14;
                  v1006 >>= 7;
                  ++v1005;
                }

                while (v1007);
              }

              else
              {
                int v1005 = 1;
                uint64_t v12 = v1518;
                unint64_t v17 = v1528;
              }

              if (v745 >= v1005) {
                int v680 = v1004;
              }
              else {
                int v680 = v1004 + 1;
              }
            }

            else
            {
              int v680 = v664 + 1;
              uint64_t v12 = v1518;
              unint64_t v17 = v1528;
            }

            unint64_t v1008 = v680;
            uint64_t v1009 = v665 + v680;
            unint64_t v1010 = v1567 + (v1534 << 6);
            if (v1009 + v663 <= *(int *)(v1010 + 32))
            {
              *(void *)(v1010 + 8) = *(void *)(v1010 + 40);
            }

            else
            {
              uint64_t v1011 = v663;
              int v1012 = sub_181303C10((uint64_t)v1507, v1009);
              uint64_t v663 = v1011;
              if (v1012) {
                goto LABEL_2580;
              }
            }

            unint64_t v1013 = v1567 + (v1534 << 6);
            *(_WORD *)(v1013 + 20) = 16;
            *(_DWORD *)(v1013 + 16) = v1009;
            if (v663)
            {
              _DWORD *v1507 = v663;
              *(_WORD *)(v1013 + 20) = 1040;
            }

            v1014 = *(_BYTE **)(v1013 + 8);
            if ((int)v1008 > 127)
            {
              v1015 = (int8x8_t *)&v1014[(int)sub_181305164(*(int8x8_t **)(v1013 + 8), v1008)];
            }

            else
            {
              _BYTE *v1014 = v1008;
              v1015 = (int8x8_t *)(v1014 + 1);
            }

            v1016 = &v1014[v1008];
            while (2)
            {
              unint64_t v1017 = *(unsigned int *)(v406 + 36);
              if (v1017 <= 7)
              {
                v1015->i8[0] = v1017;
                v1015 = (int8x8_t *)((char *)v1015 + 1);
                if ((_DWORD)v1017)
                {
                  unint64_t v1018 = *(void *)v406;
                  unsigned int v1019 = byte_1813C6D70[v1017];
                  v1020 = &v1016[v1019 - 1];
                  unsigned int v1021 = v1019;
                  do
                  {
                    *v1020-- = v1018;
                    v1018 >>= 8;
                    --v1021;
                  }

                  while (v1021);
                  v1016 += v1019;
                }

LABEL_1550:
                BOOL v95 = v406 == v666;
                v406 += 64LL;
                if (v95) {
                  goto LABEL_21;
                }
                continue;
              }

              break;
            }

            if (v1017 > 0x7F)
            {
              if (v1017 >> 14)
              {
                int v1022 = sub_181308E00(v1015, v1017);
              }

              else
              {
                v1015->i8[0] = (v1017 >> 7) | 0x80;
                v1015->i8[1] = v1017 & 0x7F;
                int v1022 = 2;
              }

              v1015 = (int8x8_t *)((char *)v1015 + v1022);
              a6 = *(int *)(v406 + 16);
              if (!(_DWORD)a6) {
                goto LABEL_1550;
              }
            }

            else
            {
              v1015->i8[0] = v1017;
              v1015 = (int8x8_t *)((char *)v1015 + 1);
              a6 = *(unsigned int *)(v406 + 16);
            }

            memcpy(v1016, *(const void **)(v406 + 8), a6);
            v1016 += *(int *)(v406 + 16);
            goto LABEL_1550;
          }
        }

      case 0x62u:
        uint64_t v11 = v1564;
        uint64_t v413 = *((int *)v12 + 1);
        uint64_t v414 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8 * v413) + 40LL);
        if (*((_DWORD *)v12 + 3))
        {
          *(void *)&__buf[0] = sub_1813051A0(*(void *)(*(void *)(*(void *)(v1564 + 120) + 8 * v413) + 40LL));
        }

        else
        {
          *(void *)&__buf[0] = 0LL;
          int v68 = sub_1812C2070(v13, v414, __buf);
          if (v68) {
            goto LABEL_2579;
          }
          int v1555 = 0;
        }

        uint64_t v797 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v797 + 20) & 0x9000) != 0) {
          uint64_t v797 = sub_18130875C(v797);
        }
        else {
          *(_WORD *)(v797 + 20) = 4;
        }
        *(void *)uint64_t v797 = *(void *)&__buf[0];
        goto LABEL_1662;
      case 0x63u:
        uint64_t v415 = *((int *)v12 + 3);
        uint64_t v416 = *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8);
        v417 = *(void **)(v416 + 8);
        if (*(_BYTE *)(v416 + 17))
        {
          ++*(_DWORD *)(v416 + 20);
          if (!*(_BYTE *)(v416 + 18)) {
            sub_1812FDE20(v416);
          }
        }

        if ((_DWORD)v415 == 15) {
          int v418 = *(_DWORD *)(v416 + 28) + *(_DWORD *)(*v417 + 132LL);
        }
        else {
          int v418 = bswap32(*(_DWORD *)(*(void *)(v417[3] + 80LL) + 4 * v415 + 36));
        }
        if (*(_BYTE *)(v416 + 17))
        {
          int v742 = *(_DWORD *)(v416 + 20) - 1;
          *(_DWORD *)(v416 + 20) = v742;
          if (!v742) {
            sub_1812FDEFC(v416);
          }
        }

        uint64_t v743 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v743 + 20) & 0x9000) != 0) {
          uint64_t v743 = sub_18130875C(v743);
        }
        else {
          *(_WORD *)(v743 + 20) = 4;
        }
        *(void *)uint64_t v743 = v418;
        v12 += 40;
        continue;
      case 0x64u:
        uint64_t v419 = *(void *)(v13 + 32);
        uint64_t v420 = *((int *)v12 + 1);
        uint64_t v421 = v419 + 32 * v420;
        int v422 = sub_1812D5F54(*(void *)(v421 + 8), *((_DWORD *)v12 + 2), *((_DWORD *)v12 + 3));
        LODWORD(v19) = v422;
        int v423 = *((_DWORD *)v12 + 2);
        if (v423 == 2)
        {
          *(_BYTE *)(*(void *)(v421 + 24) + 112LL) = *((_DWORD *)v12 + 3);
          uint64_t v11 = v1564;
        }

        else
        {
          uint64_t v11 = v1564;
          if (v423 == 1)
          {
            int v424 = v422;
            **(_DWORD **)(v419 + 32 * v420 + 24) = *((_DWORD *)v12 + 3) - *((unsigned __int16 *)v12 + 1);
            *(_DWORD *)(v13 + 44) |= 1u;
            sub_181305458((void *)v13, *((_DWORD *)v12 + 1));
            LODWORD(v19) = v424;
          }
        }

        if (*((_DWORD *)v12 + 1) == 1)
        {
          for (juint64_t j = *(void *)(v13 + 8); jj; juint64_t j = *(void *)(jj + 16))
            *(_WORD *)(jj + 268) = *(_WORD *)(jj + 268) & 0xFFFC | 1;
          *(_WORD *)(v11 + 268) &= 0xFFFCu;
        }

        if ((_DWORD)v19) {
          goto LABEL_2728;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x65u:
        uint64_t v425 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (!v425 || *(_DWORD *)(v425 + 60) != *((_DWORD *)v12 + 2)) {
          goto LABEL_481;
        }
        sub_1813013F8(*(void *)(v425 + 40));
        int v373 = v1555;
        goto LABEL_1801;
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
        uint64_t v70 = *((int *)v12 + 1);
        uint64_t v69 = *((int *)v12 + 2);
        uint64_t v71 = *((int *)v12 + 3);
        unint64_t v72 = v1567 + (v71 << 6);
        uint64_t v73 = v1567 + (v70 << 6);
        LOBYTE(v74) = *(_WORD *)(v73 + 20);
        uint64_t v75 = v1567 + (v69 << 6);
        int v76 = *(unsigned __int16 *)(v75 + 20);
        if (((v76 | *(unsigned __int16 *)(v73 + 20)) & 1) != 0)
        {
          uint64_t v132 = (_WORD *)(v72 + 20);
          if ((*(_WORD *)(v72 + 20) & 0x9000) != 0)
          {
            sub_181303888((int *)(v1567 + (v71 << 6)));
            v12 += 40;
          }

          else
          {
LABEL_926:
            _WORD *v132 = 1;
            v12 += 40;
          }
        }

        else
        {
          if ((v76 & 0x24) != 0)
          {
            uint64_t v77 = *(void *)v75;
          }

          else if ((v76 & 8) != 0)
          {
            a2.i64[0] = *(void *)v75;
            if (*(double *)v75 >= -9.22337204e18)
            {
              else {
                uint64_t v77 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              uint64_t v77 = 0x8000000000000000LL;
            }
          }

          else if ((v76 & 0x12) != 0 && *(void *)(v1567 + (v69 << 6) + 8))
          {
            uint64_t v688 = sub_181303DF0(v75);
            unint64_t v72 = v1567 + (v71 << 6);
            uint64_t v77 = v688;
            __int16 v74 = *(_WORD *)(v73 + 20);
          }

          else
          {
            uint64_t v77 = 0LL;
          }

          if ((v74 & 0x24) != 0)
          {
            uint64_t v78 = *(void *)v73;
          }

          else if ((v74 & 8) != 0)
          {
            a2.i64[0] = *(void *)v73;
            if (*(double *)v73 >= -9.22337204e18)
            {
              else {
                uint64_t v78 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              uint64_t v78 = 0x8000000000000000LL;
            }
          }

          else if ((v74 & 0x12) != 0 && *(void *)(v1567 + (v70 << 6) + 8))
          {
            unint64_t v689 = v72;
            uint64_t v78 = sub_181303DF0(v73);
            unint64_t v72 = v689;
          }

          else
          {
            uint64_t v78 = 0LL;
          }

          int v79 = *v12;
          if (v79 == 103)
          {
            v77 |= v78;
          }

          else if (v79 == 102)
          {
            v77 &= v78;
          }

          else if (v78)
          {
            uint64_t v706 = 64LL;
            if (v78 > -64) {
              uint64_t v706 = -v78;
            }
            if (v78 >= 0)
            {
              uint64_t v707 = v78;
            }

            else
            {
              LOBYTE(v79) = -47 - v79;
              uint64_t v707 = v706;
            }

            unint64_t v708 = (unint64_t)v77 >> v707;
            if (v77 < 0) {
              unint64_t v708 = (-1LL << -(char)v707) | ((unint64_t)v77 >> v707);
            }
            uint64_t v710 = v77 < 0 && v79 != 104;
            uint64_t v711 = v710 << 63 >> 63;
            if (v707 >= 64) {
              uint64_t v77 = v711;
            }
            else {
              uint64_t v77 = v708;
            }
          }

          *(void *)unint64_t v72 = v77;
          *(_WORD *)(v1567 + (v71 << 6) + 20) = *(_WORD *)(v1567 + (v71 << 6) + 20) & 0xF240 | 4;
          v12 += 40;
        }

        continue;
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
        unsigned int v1544 = v18;
        unint64_t v1523 = v17;
        uint64_t v35 = *((int *)v12 + 2);
        uint64_t v36 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        uint64_t v37 = v12;
        uint64_t v39 = (__int16 *)(v36 + 20);
        int v38 = *(unsigned __int16 *)(v36 + 20);
        uint64_t v40 = v1567 + (v35 << 6);
        int v42 = (_WORD *)(v40 + 20);
        int v41 = *(unsigned __int16 *)(v40 + 20);
        uint64_t v43 = v37;
        uint64_t v44 = *((int *)v37 + 3);
        uint64_t v45 = (int *)(v1567 + (v44 << 6));
        if ((v38 & v41 & 4) != 0) {
          goto LABEL_31;
        }
        if (((v41 | v38) & 1) != 0)
        {
LABEL_1489:
          unint64_t v993 = v1567 + (v44 << 6);
          __int16 v995 = *(_WORD *)(v993 + 20);
          v994 = (_WORD *)(v993 + 20);
          if ((v995 & 0x9000) != 0) {
            sub_181303888(v45);
          }
          else {
            _WORD *v994 = 1;
          }
LABEL_1869:
          unint64_t v17 = v1523;
          uint64_t v18 = v1544;
          uint64_t v12 = v43 + 40;
          continue;
        }

        char v135 = v38 & 0x2D;
        if ((v38 & 0x2D) == 0)
        {
          char v135 = sub_181308808((int *)v36);
          LOWORD(v41) = *v42;
        }

        char v136 = v41 & 0x2D;
        if ((v41 & 0x2D) == 0) {
          char v136 = sub_181308808((int *)v40);
        }
        char v137 = v135 & v136;
        uint64_t v45 = (int *)(v1567 + (v44 << 6));
        if ((v137 & 4) == 0) {
          goto LABEL_1468;
        }
        unint64_t v22 = *v43;
LABEL_31:
        int64_t v46 = *(void *)v36;
        uint64_t v47 = *(void *)v40;
        *(void *)&__buf[0] = *(void *)v40;
        switch(v22)
        {
          case 'j':
            if (v46 < 0)
            {
              if (v47 < 0 && (uint64_t)(0x8000000000000001LL - v47) > v46 + 1)
              {
LABEL_1468:
                v982 = v45;
                __int16 v983 = *v39;
                if ((*v39 & 8) != 0)
                {
                  double v985 = *(double *)v36;
                  v984 = v43;
                }

                else
                {
                  v984 = v43;
                  if ((v983 & 0x24) != 0)
                  {
                    double v985 = (double)*(uint64_t *)v36;
                  }

                  else if ((v983 & 0x12) != 0)
                  {
                    double v985 = sub_181303DB8(v36);
                  }

                  else
                  {
                    double v985 = 0.0;
                  }
                }

                __int16 v986 = *v42;
                if ((*v42 & 8) != 0)
                {
                  a2.i64[0] = *(void *)v40;
                }

                else if ((v986 & 0x24) != 0)
                {
                  *(double *)a2.i64 = (double)*(uint64_t *)v40;
                }

                else if ((v986 & 0x12) != 0)
                {
                  *(double *)a2.i64 = sub_181303DB8(v40);
                }

                else
                {
                  a2.i64[0] = 0LL;
                }

                int v987 = *v984 - 106;
                uint64_t v45 = v982;
                switch(v987)
                {
                  case 0:
                    *(double *)a2.i64 = v985 + *(double *)a2.i64;
                    break;
                  case 1:
                    *(double *)a2.i64 = *(double *)a2.i64 - v985;
                    break;
                  case 2:
                    *(double *)a2.i64 = v985 * *(double *)a2.i64;
                    break;
                  case 3:
                    if (v985 == 0.0) {
                      goto LABEL_1489;
                    }
                    *(double *)a2.i64 = *(double *)a2.i64 / v985;
                    break;
                  default:
                    uint64_t v990 = sub_1812AB76C(v36);
                    uint64_t v991 = sub_1812AB76C(v40);
                    *(void *)&__buf[0] = v991;
                    uint64_t v45 = v982;
                    if (!v990) {
                      goto LABEL_1489;
                    }
                    if (v990 == -1) {
                      uint64_t v992 = 1LL;
                    }
                    else {
                      uint64_t v992 = v990;
                    }
                    *(double *)a2.i64 = (double)(v991 % v992);
                    break;
                }

                *(void *)uint64_t v45 = a2.i64[0];
                unint64_t v988 = v1567 + (v44 << 6);
                __int16 v989 = *(_WORD *)(v988 + 20) & 0xF240 | 8;
LABEL_1868:
                *(_WORD *)(v988 + 20) = v989;
                goto LABEL_1869;
              }
            }

            else
            {
              BOOL v48 = v47 < 1 || (v47 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v46;
              if (!v48) {
                goto LABEL_1468;
              }
            }

            uint64_t v698 = v47 + v46;
            goto LABEL_1479;
          case 'k':
            goto LABEL_1480;
          case 'l':
            goto LABEL_1480;
          case 'm':
            if (!v46) {
              goto LABEL_1489;
            }
            if (v46 == -1 && v47 == 0x8000000000000000LL) {
              goto LABEL_1468;
            }
            uint64_t v698 = v47 / v46;
            goto LABEL_1479;
          default:
            if (!v46) {
              goto LABEL_1489;
            }
            if (v46 == -1) {
              uint64_t v697 = 1LL;
            }
            else {
              uint64_t v697 = v46;
            }
            uint64_t v698 = v47 % v697;
LABEL_1479:
            *(void *)&__buf[0] = v698;
LABEL_1480:
            *(void *)uint64_t v45 = *(void *)&__buf[0];
            unint64_t v988 = v1567 + (v44 << 6);
            __int16 v989 = *(_WORD *)(v988 + 20) & 0xF240 | 4;
            goto LABEL_1868;
        }

      case 0x6Fu:
        unsigned int v1546 = v18;
        uint64_t v437 = *((int *)v12 + 1);
        uint64_t v436 = *((int *)v12 + 2);
        uint64_t v438 = v1567 + (v437 << 6);
        uint64_t v439 = v1567 + (v436 << 6);
        uint64_t v440 = *((int *)v12 + 3);
        uint64_t v441 = v1567 + (v440 << 6);
        v443 = (_WORD *)(v438 + 20);
        __int16 v442 = *(_WORD *)(v438 + 20);
        v445 = (_WORD *)(v439 + 20);
        __int16 v444 = *(_WORD *)(v439 + 20);
        if (v444 & 1 | v442 & 1)
        {
          if ((*(_WORD *)(v441 + 20) & 0x9000) != 0) {
            sub_181303888((int *)(v1567 + (v440 << 6)));
          }
          else {
            *(_WORD *)(v441 + 20) = 1;
          }
          uint64_t v18 = v1546;
          v12 += 40;
          continue;
        }

        uint64_t v1535 = *((int *)v12 + 2);
        if ((v442 & 0x12) != 0)
        {
          if ((*(_WORD *)(v438 + 20) & 0x400) == 0)
          {
LABEL_1671:
            __int16 v1510 = v442;
            if ((v444 & 0x12) != 0)
            {
              if ((v444 & 0x400) == 0)
              {
LABEL_1717:
                v1540 = v443;
                uint64_t v1504 = v437;
                unint64_t v1071 = v1567 + (v437 << 6);
                uint64_t v1074 = *(int *)(v1071 + 16);
                v1073 = (int *)(v1071 + 16);
                uint64_t v1072 = v1074;
                unint64_t v1075 = v1567 + (v436 << 6);
                uint64_t v1077 = *(int *)(v1075 + 16);
                v1076 = (int *)(v1075 + 16);
                unint64_t v1078 = v1077 + v1072;
                LOBYTE(v18) = v1546;
                __int16 v1493 = v444;
                v1496 = v445;
                uint64_t v1079 = v441;
                uint64_t v1080 = v436;
                uint64_t v1081 = v440;
                if (!sub_18128FAF0(v1079, (int)v1078 + 2, v440 == v436))
                {
                  v1521 = v12;
                  unint64_t v1082 = v1567 + (v1081 << 6);
                  *(_WORD *)(v1082 + 20) = *(_WORD *)(v1082 + 20) & 0xF240 | 2;
                  if ((_DWORD)v1081 != (_DWORD)v1080)
                  {
                    memcpy(*(void **)(v1082 + 8), *(const void **)(v1567 + (v1080 << 6) + 8), *v1076);
                    _WORD *v1496 = v1493;
                  }

                  memcpy((void *)(*(void *)(v1082 + 8) + *v1076), *(const void **)(v1567 + (v1504 << 6) + 8), *v1073);
                  _WORD *v1540 = v1510;
                  unint64_t v1083 = v1078 & 0xFFFFFFFFFFFFFFFELL;
                  if (v1554 <= 1) {
                    unint64_t v1083 = v1078;
                  }
                  *(_BYTE *)(*(void *)(v1082 + 8) + v1083) = 0;
                  *(_BYTE *)(v1083 + *(void *)(v1082 + 8) + 1) = 0;
                  *(_WORD *)(v1082 + 20) |= 0x200u;
                  *(_DWORD *)(v1082 + 16) = v1083;
                  *(_BYTE *)(v1082 + 22) = v1554;
                  uint64_t v18 = v1546;
                  uint64_t v12 = v1521 + 40;
                  continue;
                }

                goto LABEL_2580;
              }

              uint64_t v1063 = v440;
LABEL_1716:
              __int16 v444 = *v445 & 0xFFFD;
              uint64_t v436 = v1535;
              uint64_t v440 = v1063;
              goto LABEL_1717;
            }

            uint64_t v1063 = v440;
LABEL_2659:
            uint64_t v11 = v1564;
            LOBYTE(v18) = v1546;
            goto LABEL_8;
          }

          uint64_t v446 = *((int *)v12 + 3);
        }

        else
        {
          uint64_t v446 = *((int *)v12 + 3);
        }

        __int16 v442 = *v443 & 0xFFFD;
        __int16 v444 = *v445;
        uint64_t v436 = v1535;
        uint64_t v440 = v446;
        goto LABEL_1671;
      case 0x70u:
      case 0x71u:
LABEL_481:
        uint64_t v11 = v1564;
        if ((*(_WORD *)(v1564 + 268) & 3) == 1)
        {
          LODWORD(v19) = 516;
          goto LABEL_2728;
        }

        unint64_t v426 = v17;
        unsigned int v1545 = v18;
        uint64_t v427 = *((unsigned int *)v12 + 2);
        uint64_t v428 = *((int *)v12 + 3);
        uint64_t v429 = *(void *)(v13 + 32) + 32 * v428;
        __int16 v430 = *((_WORD *)v12 + 1);
        uint64_t v1557 = *(void *)(v429 + 8);
        if (v22 == 113)
        {
          uint64_t v431 = v430 & 8 | 4u;
          unsigned int v432 = *(unsigned __int8 *)(*(void *)(v429 + 24) + 112LL);
        }

        else
        {
          uint64_t v431 = 0LL;
        }

        LODWORD(v433) = v427;
        if ((v430 & 0x10) == 0) {
          goto LABEL_1794;
        }
        unint64_t v434 = v1567 + (v427 << 6);
        if (v1567)
        {
          __int16 v435 = *(_WORD *)(v434 + 20);
          if ((v435 & 0x24) != 0)
          {
            double v433 = *(double *)v434;
            goto LABEL_1793;
          }

          if ((v435 & 8) != 0)
          {
            *(double *)&uint64_t v1122 = NAN;
            else {
              double v433 = -0.0;
            }
LABEL_1793:
            *(double *)unint64_t v434 = v433;
            *(_WORD *)(v1567 + (v427 << 6) + 20) = *(_WORD *)(v1567 + (v427 << 6) + 20) & 0xF240 | 4;
LABEL_1794:
            int v1123 = v12[1];
            if (v1123 == 253)
            {
              uint64_t v1125 = 0LL;
              int v1126 = *((_DWORD *)v12 + 4);
              uint64_t v1124 = v1564;
              unint64_t v17 = v426;
            }

            else
            {
              uint64_t v1124 = v1564;
              unint64_t v17 = v426;
              if (v1123 == 248)
              {
                uint64_t v1125 = *((void *)v12 + 2);
                int v1126 = *(unsigned __int16 *)(v1125 + 8);
              }

              else
              {
                uint64_t v1125 = 0LL;
                int v1126 = 0;
              }
            }

            uint64_t v1127 = sub_18129B5DC(v1124, *((_DWORD *)v12 + 1), v1126, 0);
            if (!v1127) {
              goto LABEL_2589;
            }
            uint64_t v425 = v1127;
            *(_BYTE *)(v1127 + 1) = v428;
            *(_BYTE *)(v1127 + 2) = 1;
            *(_BYTE *)(v1127 + 5) |= 4u;
            *(_DWORD *)(v1127 + 60) = LODWORD(v433);
            int v373 = sub_1813054E0(v1557, LODWORD(v433), v431, v1125, *(void *)(v1127 + 40));
            *(void *)(v425 + 48) = v1125;
            *(_BYTE *)(v425 + 4) = v12[1] != 248;
            uint64_t v18 = v1545;
LABEL_1801:
            *(_BYTE *)(*(void *)(v425 + 40) + 3LL) = v12[2] & 3;
            if (!v373)
            {
              int v1555 = 0;
              v12 += 40;
              continue;
            }

LABEL_2582:
            LODWORD(v19) = v373;
            uint64_t v11 = v1564;
            goto LABEL_2728;
          }

          if ((v435 & 0x12) != 0 && *(void *)(v1567 + (v427 << 6) + 8))
          {
            double v433 = COERCE_DOUBLE(sub_181303DF0(v1567 + (v427 << 6)));
            goto LABEL_1793;
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        double v433 = 0.0;
        goto LABEL_1793;
      case 0x72u:
        uint64_t v447 = *((int *)v12 + 1);
        unint64_t v448 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        v449 = (_WORD *)(v448 + 20);
        if ((*(_WORD *)(v448 + 20) & 0x9000) != 0) {
          sub_181303888((int *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6)));
        }
        else {
          _WORD *v449 = 1;
        }
        uint64_t v798 = v1567 + (v447 << 6);
        if ((*(_WORD *)(v798 + 20) & 1) != 0) {
          goto LABEL_21;
        }
        _WORD *v449 = 4;
        *(void *)unint64_t v448 = ~sub_1812AB76C(v798);
        v12 += 40;
        continue;
      case 0x73u:
        uint64_t v11 = v1564;
        uint64_t v450 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 2));
        uint64_t v451 = sub_18129B5DC(v1564, *((_DWORD *)v12 + 1), *(__int16 *)(v450 + 64), 0);
        if (!v451) {
          goto LABEL_8;
        }
        *(_BYTE *)(v451 + 2) = 1;
        char v452 = *(_BYTE *)(v451 + 5) | 1;
        *(_BYTE *)(v451 + 5) = v452;
        *(void *)(v451 + 48) = *(void *)(v450 + 48);
        *(_BYTE *)(v451 + 4) = *(_BYTE *)(v450 + 4);
        *(_DWORD *)(v451 + 60) = *(_DWORD *)(v450 + 60);
        char v453 = v452 & 0xFB | (4 * ((*(_BYTE *)(v450 + 5) & 4) != 0));
        *(_BYTE *)(v451 + 5) = v453;
        *(void *)(v451 + 8) = *(void *)(v450 + 8);
        *(_BYTE *)(v451 + 5) = v453 | 8;
        *(_BYTE *)(v450 + 5) |= 8u;
        int v1555 = sub_1813054E0( *(void *)(v451 + 8),  *(_DWORD *)(v451 + 60),  4LL,  *(void *)(v451 + 48),  *(void *)(v451 + 40));
        v12 += 40;
        continue;
      case 0x74u:
      case 0x76u:
        uint64_t v109 = *((unsigned int *)v12 + 3);
        if ((int)v109 >= 1)
        {
          unint64_t v110 = v1567 + (v109 << 6);
          *(_DWORD *)(v110 + 16) = 0;
          *(void *)(v110 + 8) = &byte_1813CEAEE;
        }

        uint64_t v11 = v1564;
        uint64_t v111 = *((int *)v12 + 1);
        uint64_t v112 = *(void *)(*(void *)(v1564 + 120) + 8 * v111);
        if (v112 && (*(_BYTE *)(v112 + 5) & 8) == 0 && *((_DWORD *)v12 + 2) <= *(__int16 *)(v112 + 64))
        {
          *(void *)(v112 + 16) = 0LL;
          *(_DWORD *)(v112 + 24) = 0;
          int v68 = sub_1812C9D84(*(void *)(v112 + 8), *(_DWORD *)(v112 + 60), 0LL);
          if (v68) {
            goto LABEL_2579;
          }
          goto LABEL_1499;
        }

        uint64_t v113 = sub_18129B5DC(v1564, v111, *((_DWORD *)v12 + 2), 0);
        if (!v113) {
          goto LABEL_8;
        }
        uint64_t v112 = v113;
        *(_BYTE *)(v113 + 5) |= 1u;
        uint64_t v114 = (uint64_t *)(v113 + 8);
        int v68 = sub_1812696E8(*(void *)v13, 0LL, v13, (uint64_t *)(v113 + 8), *((_WORD *)v12 + 1) | 5u, 0x41Eu);
        if (v68) {
          goto LABEL_2579;
        }
        uint64_t v115 = *v114;
        if (*(_BYTE *)(*v114 + 17) || *(unsigned __int8 *)(v115 + 16) <= 1u)
        {
          int v116 = sub_1812FDF34(v115, 1, 0LL);
          if (v116) {
            goto LABEL_1498;
          }
        }

        else
        {
          uint64_t v903 = *(void *)v115;
          uint64_t v904 = **(void **)(v115 + 8);
          int v905 = *(_DWORD *)(v903 + 788);
          if (*(_DWORD *)(v904 + 128) < v905)
          {
            if (*(_BYTE *)(v904 + 10))
            {
              int v116 = sub_1812FEBEC(v904, v905);
              if (v116) {
                goto LABEL_1498;
              }
            }
          }
        }

        uint64_t v906 = *((void *)v12 + 2);
        *(void *)(v112 + 48) = v906;
        if (v906)
        {
          int v116 = sub_18130571C(*(void *)(v112 + 8), (unsigned int *)(v112 + 60), *((_WORD *)v12 + 1) | 2u);
          if (!v116) {
            int v116 = sub_1813054E0(*(void *)(v112 + 8), *(_DWORD *)(v112 + 60), 4LL, v906, *(void *)(v112 + 40));
          }
          char v907 = 0;
        }

        else
        {
          char v907 = 1;
          *(_DWORD *)(v112 + 60) = 1;
          int v116 = sub_1813054E0(*(void *)(v112 + 8), 1u, 4LL, 0LL, *(void *)(v112 + 40));
        }

        *(_BYTE *)(v112 + 4) = v907;
LABEL_1498:
        *(_BYTE *)(v112 + 5) = *(_BYTE *)(v112 + 5) & 0xFB | (4 * (*((_WORD *)v12 + 1) != 8));
        if (v116)
        {
          int v1437 = v116;
          sub_1812B54BC(*v114, *(double *)a2.i64);
          LODWORD(v19) = v1437;
          goto LABEL_2728;
        }

LABEL_1499:
        int v1555 = 0;
        *(_BYTE *)(v112 + 2) = 1;
        v12 += 40;
        continue;
      case 0x75u:
        uint64_t v454 = *(void *)(v1564 + 104);
        uint64_t v455 = *((int *)v12 + 2);
        uint64_t v456 = v454 + (v455 << 6);
        __int16 v458 = *(_WORD *)(v456 + 20);
        v457 = (__int16 *)(v456 + 20);
        if ((v458 & 0x9000) != 0) {
          sub_18130875C(v454 + (v455 << 6));
        }
        else {
          __int16 *v457 = 4;
        }
        v799 = (char *)*((void *)v12 + 2);
        if (v799) {
          int v800 = strlen(*((const char **)v12 + 2)) & 0x3FFFFFFF;
        }
        else {
          int v800 = 0;
        }
        *((_DWORD *)v12 + 1) = v800;
        if (v1554 == 1) {
          goto LABEL_1579;
        }
        __int16 v862 = *v457;
        v863 = (_BYTE *)(v454 + (v455 << 6) + 22);
        if ((*v457 & 2) != 0)
        {
          if (*v863 != v1554)
          {
            if (sub_1812C23E8((int *)(v454 + (v455 << 6)), v1554))
            {
LABEL_2580:
              uint64_t v11 = v1564;
              goto LABEL_8;
            }

            __int16 v862 = *v457;
          }
        }

        else
        {
          _BYTE *v863 = v1554;
        }

        uint64_t v1025 = v454 + (v455 << 6);
        *(_DWORD *)(v1025 + 32) = 0;
        __int16 *v457 = v862 | 0x2000;
        if (v12[1] == 250)
        {
          v1026 = (void *)*((void *)v12 + 2);
          if (v1026) {
            sub_1812F20DC((void *)v13, v1026);
          }
        }

        int v1555 = 0;
        v12[1] = -6;
        *((void *)v12 + 2) = *(void *)(v1025 + 8);
        int v800 = *(_DWORD *)(v1025 + 16);
        *((_DWORD *)v12 + 1) = v800;
LABEL_1579:
        if (v800 <= *(_DWORD *)(v13 + 136))
        {
          *uint64_t v12 = 73;
LABEL_1581:
          uint64_t v1027 = *(void *)(v1564 + 104);
          uint64_t v1028 = *((int *)v12 + 2);
          uint64_t v1029 = v1027 + (v1028 << 6);
          __int16 v1031 = *(_WORD *)(v1029 + 20);
          v1030 = (_WORD *)(v1029 + 20);
          if ((v1031 & 0x9000) != 0) {
            sub_18130875C(v1027 + (v1028 << 6));
          }
          else {
            _WORD *v1030 = 4;
          }
          _WORD *v1030 = 8706;
          uint64_t v1032 = v1027 + (v1028 << 6);
          *(void *)(v1032 + 8) = *((void *)v12 + 2);
          *(_DWORD *)(v1032 + 16) = *((_DWORD *)v12 + 1);
          *(_BYTE *)(v1032 + 22) = v1554;
          uint64_t v1033 = *((unsigned int *)v12 + 3);
          if ((int)v1033 >= 1 && *(void *)(v1567 + (v1033 << 6)) == *((unsigned __int16 *)v12 + 1))
          {
            _WORD *v1030 = 8720;
            v12 += 40;
            continue;
          }

          goto LABEL_21;
        }

        goto LABEL_2725;
      case 0x77u:
        uint64_t v459 = sub_18129B5DC(v1564, *((_DWORD *)v12 + 1), *((_DWORD *)v12 + 2), 1);
        if (!v459)
        {
          uint64_t v11 = v1564;
          goto LABEL_8;
        }

        uint64_t v460 = v459;
        int v461 = 0;
        uint64_t v462 = *((void *)v12 + 2);
        *(void *)(v459 + 48) = v462;
        unint64_t v1526 = v17;
        unsigned int v1547 = v18;
        if (*(_BYTE *)(v13 + 102) != 2 && (_BYTE)word_18C465384) {
          int v461 = *(_DWORD *)(v13 + 180);
        }
        v463 = v12;
        int v464 = *((_DWORD *)v12 + 3);
        uint64_t v465 = 8LL * *(unsigned __int16 *)(v462 + 6) + 32;
        int v1558 = v461;
        int v466 = 104 * v461 + 200;
        v467 = (void *)sub_1812F2264(v13, v465 + v466);
        if (!v467)
        {
          *(void *)(v460 + 40) = 0LL;
          LODWORD(v19) = 7;
          uint64_t v11 = v1564;
          unint64_t v17 = v1526;
          LOBYTE(v18) = v1547;
          uint64_t v12 = v463;
          goto LABEL_2728;
        }

        v468 = v467;
        bzero(v467, v465 + v466);
        *(void *)(v460 + 40) = v468;
        uint64_t v469 = *(void *)(*(void *)(v13 + 32) + 8LL);
        v470 = (char *)v468 + v466;
        v468[5] = v470;
        memcpy(v470, *(const void **)(v460 + 48), v465);
        *((void *)v470 + 2) = 0LL;
        unsigned __int8 v471 = v1558;
        if (v464 && !v1558) {
          *((_WORD *)v470 + 3) = v464;
        }
        uint64_t v12 = v463;
        if (!*(_BYTE *)(v469 + 17))
        {
          int v473 = *(_DWORD *)(*(void *)(v469 + 8) + 52LL);
          *((_DWORD *)v468 + 3) = v473;
          uint64_t v474 = v1564;
          unint64_t v17 = v1526;
          uint64_t v18 = v1547;
          goto LABEL_1635;
        }

        int v472 = *(_DWORD *)(v469 + 20) + 1;
        *(_DWORD *)(v469 + 20) = v472;
        if (*(_BYTE *)(v469 + 18))
        {
          int v473 = *(_DWORD *)(*(void *)(v469 + 8) + 52LL);
          *((_DWORD *)v468 + 3) = v473;
          uint64_t v474 = v1564;
          unint64_t v17 = v1526;
          uint64_t v18 = v1547;
        }

        else
        {
          sub_1812FDE20(v469);
          int v1053 = *(unsigned __int8 *)(v469 + 17);
          int v473 = *(_DWORD *)(*(void *)(v469 + 8) + 52LL);
          *((_DWORD *)v468 + 3) = v473;
          uint64_t v474 = v1564;
          unint64_t v17 = v1526;
          uint64_t v18 = v1547;
          if (!v1053) {
            goto LABEL_1634;
          }
          int v472 = *(_DWORD *)(v469 + 20);
          unsigned __int8 v471 = v1558;
        }

        int v1054 = v472 - 1;
        *(_DWORD *)(v469 + 20) = v1054;
        if (v1054) {
          goto LABEL_1635;
        }
        sub_1812FDEFC(v469);
LABEL_1634:
        unsigned __int8 v471 = v1558;
LABEL_1635:
        unsigned int v1055 = (v471 + 1);
        *((_BYTE *)v468 + 91) = v471 + 1;
        *((_BYTE *)v468 + 90) = v471 - 1;
        *((_BYTE *)v468 + 89) = v1055 > 1;
        v468[4] = v13;
        if (v1055 != v471 + 1) {
          goto LABEL_1751;
        }
        uint64_t v1056 = (v471 + 1);
        if (v471)
        {
          uint64_t v1057 = v1056 & 0xFE;
          v1058 = v468 + 27;
          uint64_t v1059 = v1057;
          do
          {
            *(v1058 - 13) = v468;
            void *v1058 = v468;
            v1058 += 26;
            v1059 -= 2LL;
          }

          while (v1059);
          if (v1057 == v1056)
          {
LABEL_1751:
            if (*(_BYTE *)(v13 + 102) == 2) {
              goto LABEL_1759;
            }
            int v1099 = dword_18C4654D0 * v473;
            *(_DWORD *)v468 = dword_18C4654D0 * v473;
            uint64_t v1100 = *(int *)(*(void *)(*(void *)(v13 + 32) + 24LL) + 116LL);
            uint64_t v1101 = -1024LL;
            uint64_t v1102 = v1101 * v1100;
            if (v1102 >= 0x20000000) {
              LODWORD(v1102) = 0x20000000;
            }
            *((_DWORD *)v468 + 1) = v1099;
            if (byte_18C465388)
            {
LABEL_1759:
              LODWORD(v19) = 0;
            }

            else
            {
              *((_DWORD *)v468 + 21) = v473;
              uint64_t v1104 = sub_18126F0AC(v473);
              v468[8] = v1104;
              if (v1104) {
                LODWORD(v19) = 0;
              }
              else {
                LODWORD(v19) = 7;
              }
            }

            uint64_t v11 = v474;
            if (*((unsigned __int16 *)v470 + 4) <= 0xCu)
            {
              uint64_t v1103 = *((void *)v470 + 4);
              if ((!v1103 || v1103 == *(void *)(v13 + 16)) && (**((_BYTE **)v470 + 3) & 2) == 0) {
                *((_BYTE *)v468 + 92) = 3;
              }
            }

            if (!(_DWORD)v19)
            {
              int v1555 = 0;
              v12 += 40;
              continue;
            }

            goto LABEL_2728;
          }
        }

        else
        {
          uint64_t v1057 = 0LL;
        }

        uint64_t v1097 = v1056 - v1057;
        uint64_t v1098 = 104LL * v1057 + 112;
        do
        {
          *(void *)((char *)v468 + v1098) = v468;
          v1098 += 104LL;
          --v1097;
        }

        while (v1097);
        goto LABEL_1751;
      case 0x78u:
        uint64_t v475 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v476 = *(void *)(v475 + 16);
        *(void *)(v475 + 16) = v476 + 1;
        if (!v476) {
          goto LABEL_2168;
        }
        goto LABEL_21;
      case 0x79u:
        uint64_t v11 = v1564;
        uint64_t v477 = sub_18129B5DC(v1564, *((_DWORD *)v12 + 1), *((_DWORD *)v12 + 3), 3);
        if (!v477) {
          goto LABEL_8;
        }
        *(_BYTE *)(v477 + 2) = 1;
        *(_DWORD *)(v477 + 28) = *((_DWORD *)v12 + 2);
        *(_BYTE *)(v477 + 4) = 1;
        *(void *)(v477 + 40) = &unk_18C550658;
        v12 += 40;
        continue;
      case 0x7Au:
        uint64_t v478 = *(void *)(v1564 + 120);
        uint64_t v479 = *((int *)v12 + 1);
        v480 = *(unsigned __int8 **)(v478 + 8 * v479);
        if (v480)
        {
          sub_181301B60((void **)v1564, v480);
          uint64_t v478 = *(void *)(v1564 + 120);
          uint64_t v479 = *((int *)v12 + 1);
        }

        *(void *)(v478 + 8 * v479) = 0LL;
        v12 += 40;
        continue;
      case 0x7Cu:
        uint64_t v11 = v1564;
        uint64_t v481 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 11));
        if (**(_BYTE **)(v481 + 40)) {
          goto LABEL_21;
        }
        int v482 = *((_DWORD *)v12 + 1);
        v483 = *(int **)(v481 + 48);
        uint64_t v484 = *((int *)v12 + 13);
        __int16 v1573 = *((_DWORD *)v12 + 14);
        char v1574 = 0;
        double v1571 = *(double *)&v483;
        unint64_t v1572 = v1567 + (v484 << 6);
        int v485 = v482 + 1;
        do
        {
          uint64_t v486 = *(void *)(v481 + 40);
          sub_1812FFFE4(v486);
          signed int v487 = *(_DWORD *)(v486 + 64);
          if (v487 <= 0)
          {
            int v1433 = 96383;
            goto LABEL_2616;
          }

          WORD2(__buf[1]) = 0;
          *((void *)&__buf[1] + 1) = v13;
          LODWORD(__buf[2]) = 0;
          int v488 = *(unsigned __int16 *)(v486 + 68);
          v489 = *(char **)(v486 + 56);
          int v490 = *(_DWORD *)(*(void *)(v486 + 136) + 88LL) - (_DWORD)v489;
          if (v488 > v490) {
            int v488 = v490 & ~(v490 >> 31);
          }
          *((void *)&__buf[0] + 1) = *(void *)(v486 + 56);
          if (v488 >= v487)
          {
            WORD2(__buf[1]) = 16400;
            LODWORD(__buf[1]) = v487;
          }

          else
          {
            int v68 = sub_1812A4B24(v486, 0, v487, (uint64_t)__buf);
            if (v68) {
              goto LABEL_2579;
            }
            signed int v487 = __buf[1];
            v489 = (char *)*((void *)&__buf[0] + 1);
          }

          int v491 = sub_1813068A8(v487, v489, (uint64_t *)&v1571, 0);
          if (LODWORD(__buf[2])) {
            sub_181303838((uint64_t)__buf);
          }
          if (v491 >= 1)
          {
            if (!*((_WORD *)v12 + 1)) {
              goto LABEL_2249;
            }
            goto LABEL_2167;
          }

          if ((v491 & 0x80000000) == 0) {
            goto LABEL_2167;
          }
          if (--v485 < 1)
          {
            int v1555 = 0;
            v12 += 40;
            goto LABEL_22;
          }

          *(_DWORD *)(v481 + 24) = 0;
          int v492 = sub_18129CF68(*(void *)(v481 + 40));
        }

        while (!v492);
        LODWORD(v19) = v492;
        if (v492 != 101) {
          goto LABEL_2728;
        }
LABEL_2249:
        v12 += 40;
LABEL_2167:
        int v1555 = 0;
        goto LABEL_2168;
      case 0x7Du:
        int v493 = *((_DWORD *)v12 + 2);
        uint64_t v494 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        int v495 = *(unsigned __int16 *)(v494 + 6);
        if (v493 > v495)
        {
          *(_WORD *)(v494 + 6) = v493;
          v12 += 40;
          continue;
        }

        int v744 = *((_DWORD *)v12 + 3);
        if (v744 >= v495) {
          goto LABEL_21;
        }
        *(_WORD *)(v494 + 6) = v744;
        v12 += 40;
        continue;
      case 0x7Eu:
        uint64_t v496 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v496 + 20) & 0x9000) != 0) {
          uint64_t v496 = sub_18130875C(v496);
        }
        else {
          *(_WORD *)(v496 + 20) = 4;
        }
        uint64_t v801 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v802 = *(void *)(v801 + 16);
        *(void *)(v801 + 16) = v802 + 1;
        *(void *)uint64_t v496 = v802;
        v12 += 40;
        continue;
      case 0x7Fu:
        *(void *)&__buf[0] = 0LL;
        LODWORD(v1571) = 0;
        uint64_t v11 = v1564;
        uint64_t v497 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_BYTE *)(v497 + 21) & 0x90) != 0) {
          sub_18130875C(*(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        }
        else {
          *(_WORD *)(v497 + 20) = 4;
        }
        uint64_t v803 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        int v804 = v1555;
        if ((*(_BYTE *)(v803 + 5) & 2) != 0) {
          goto LABEL_1991;
        }
        uint64_t v805 = *(void *)(v803 + 40);
        if (!*(_BYTE *)v805 && (*(_BYTE *)(v805 + 1) & 8) != 0)
        {
          LODWORD(v1571) = 0;
        }

        else
        {
          int v68 = sub_181309984(*(void *)(v803 + 40), &v1571);
          if (v68) {
            goto LABEL_2579;
          }
          if (LODWORD(v1571))
          {
            int v804 = 0;
            uint64_t v806 = 1LL;
            goto LABEL_1990;
          }

          uint64_t v805 = *(void *)(v803 + 40);
        }

        sub_1812FFFE4(v805);
        uint64_t v1193 = *(void *)(v805 + 48);
        *(void *)&__buf[0] = v1193;
        if (v1193 == 0x7FFFFFFFFFFFFFFFLL)
        {
          int v804 = 0;
          *(_BYTE *)(v803 + 5) |= 2u;
          goto LABEL_1991;
        }

        int v804 = 0;
        uint64_t v806 = v1193 + 1;
LABEL_1990:
        *(void *)&__buf[0] = v806;
LABEL_1991:
        uint64_t v1194 = *((int *)v12 + 3);
        if ((_DWORD)v1194)
        {
          uint64_t v1195 = *(void *)(v1564 + 352);
          unint64_t v1196 = v1567;
          if (v1195)
          {
            do
            {
              uint64_t v1197 = v1195;
              uint64_t v1195 = *(void *)(v1195 + 8);
            }

            while (v1195);
            unint64_t v1196 = *(void *)(v1197 + 24);
          }

          v1198 = (uint64_t *)(v1196 + (v1194 << 6));
          sub_181304904((uint64_t)v1198);
          uint64_t v1199 = *v1198;
          if (*v1198 == 0x7FFFFFFFFFFFFFFFLL || (*(_BYTE *)(v803 + 5) & 2) != 0)
          {
            LODWORD(v19) = 13;
            goto LABEL_2728;
          }

          uint64_t v1200 = *(void *)&__buf[0];
          if (*(uint64_t *)&__buf[0] <= v1199)
          {
            uint64_t v1200 = v1199 + 1;
            *(void *)&__buf[0] = v1199 + 1;
          }

          uint64_t *v1198 = v1200;
        }

        if ((*(_BYTE *)(v803 + 5) & 2) == 0) {
          goto LABEL_2014;
        }
        unsigned int v1201 = 0;
        do
        {
          sqlite3_initialize();
          arc4random_buf(__buf, 8uLL);
          *(void *)&__buf[0] = (*(void *)&__buf[0] & 0x3FFFFFFFFFFFFFFFLL) + 1;
          int v1202 = sub_181305CF8(*(void *)(v803 + 40), *(int64_t *)&__buf[0], 0, (int *)&v1571);
          if (v1202) {
            BOOL v1203 = 0;
          }
          else {
            BOOL v1203 = LODWORD(v1571) == 0;
          }
          if (!v1203) {
            break;
          }
          BOOL v48 = v1201++ >= 0x63;
        }

        while (!v48);
        if (v1202) {
          BOOL v1204 = 1;
        }
        else {
          BOOL v1204 = LODWORD(v1571) == 0;
        }
        if (!v1204)
        {
          int v804 = 0;
LABEL_2014:
          int v1555 = v804;
          *(_BYTE *)(v803 + 3) = 0;
          *(_DWORD *)(v803 + 24) = 0;
          *(void *)uint64_t v497 = *(void *)&__buf[0];
          v12 += 40;
          continue;
        }

        if (v1202) {
          LODWORD(v19) = v1202;
        }
        else {
          LODWORD(v19) = 13;
        }
        goto LABEL_2728;
      case 0x80u:
        uint64_t v498 = *((int *)v12 + 2);
        uint64_t v499 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v500 = *(void *)(v1567 + ((uint64_t)*((int *)v12 + 3) << 6));
        *((void *)&__buf[0] + 1) = v500;
        if (v12[1] != 251) {
          goto LABEL_1680;
        }
        if (*(void *)(v13 + 360))
        {
          uint64_t v501 = *(void *)(*(void *)(v13 + 32) + 32LL * *(char *)(v499 + 1));
          v502 = (void *)*((void *)v12 + 2);
          if (!v502) {
            goto LABEL_1682;
          }
          if ((*((_WORD *)v12 + 1) & 4) == 0) {
            sub_18130667C( (uint64_t *)v1564,  v499,  18,  *(void *)(*(void *)(v13 + 32) + 32LL * *(char *)(v499 + 1)),  *((void *)v12 + 2),  v500,  v498,  0xFFFFFFFF);
          }
        }

        else
        {
          if (!*(void *)(v13 + 312))
          {
LABEL_1680:
            uint64_t v501 = 0LL;
            goto LABEL_1681;
          }

          uint64_t v501 = *(void *)(*(void *)(v13 + 32) + 32LL * *(char *)(v499 + 1));
          v502 = (void *)*((void *)v12 + 2);
          if (!v502) {
            goto LABEL_1682;
          }
        }

        if (*(void *)(v13 + 312) && v502[1])
        {
LABEL_1682:
          __int16 v1064 = *((_WORD *)v12 + 1);
          if ((v1064 & 0x40) != 0) {
            goto LABEL_21;
          }
          if ((v1064 & 1) != 0)
          {
            ++*(void *)(v1564 + 56);
            if ((v1064 & 0x20) != 0) {
              *(void *)(v13 + 56) = v500;
            }
          }

          unint64_t v1065 = v1567 + (v498 << 6);
          *(void *)&__buf[1] = *(void *)(v1065 + 8);
          DWORD1(__buf[2]) = *(_DWORD *)(v1065 + 16);
          if ((v1064 & 0x10) != 0) {
            int v1066 = *(_DWORD *)(v499 + 28);
          }
          else {
            int v1066 = 0;
          }
          if ((*(_WORD *)(v1065 + 20) & 0x400) != 0) {
            int v1067 = *(_DWORD *)(v1567 + (v498 << 6));
          }
          else {
            int v1067 = 0;
          }
          uint64_t v11 = v1564;
          DWORD2(__buf[2]) = v1067;
          *(void *)&__buf[0] = 0LL;
          int v68 = sub_1812AEA4C(*(unsigned __int8 **)(v499 + 40), (uint64_t)__buf, v1064 & 0x8A, v1066);
          *(_BYTE *)(v499 + 3) = 0;
          *(_DWORD *)(v499 + 24) = 0;
          if (!v68)
          {
            ++v1487;
            if (v502)
            {
              if ((*((_WORD *)v12 + 1) & 4) != 0) {
                uint64_t v1068 = 23LL;
              }
              else {
                uint64_t v1068 = 18LL;
              }
              (*(void (**)(void, uint64_t, uint64_t, void, uint64_t))(v13 + 312))( *(void *)(v13 + 304),  v1068,  v501,  *v502,  v500);
            }

            int v1555 = 0;
            v12 += 40;
            continue;
          }

LABEL_2579:
          LODWORD(v19) = v68;
          goto LABEL_2728;
        }

LABEL_1681:
        v502 = 0LL;
        goto LABEL_1682;
      case 0x81u:
        uint64_t v503 = *((int *)v12 + 3);
        if ((_DWORD)v503) {
          unint64_t v504 = *(void *)(v1567 + (v503 << 6));
        }
        else {
          unint64_t v504 = 0LL;
        }
        uint64_t v807 = *(void *)(v1564 + 120);
        v808 = *(void **)(*(void *)(v807 + 8LL * *((int *)v12 + 1)) + 40LL);
        uint64_t v809 = *(void *)(*(void *)(v807 + 8LL * *((int *)v12 + 2)) + 40LL);
        uint64_t v810 = v808[4];
        v811 = *(int8x8_t **)(v810 + 136);
        sub_1812FFFE4(v809);
        unint64_t v812 = *(unsigned int *)(v809 + 64);
        if (v812 > 0x7F)
        {
          if (v812 >> 14)
          {
            int v814 = sub_181308E00(v811, v812);
          }

          else
          {
            v811->i8[0] = (v812 >> 7) | 0x80;
            v811->i8[1] = v812 & 0x7F;
            int v814 = 2;
          }

          v813 = (int8x8_t *)((char *)v811 + v814);
        }

        else
        {
          v811->i8[0] = v812;
          v813 = (int8x8_t *)((char *)v811 + 1);
        }

        v1520 = v12;
        unint64_t v1530 = v17;
        if (!v808[16])
        {
          if (v504 > 0x7F)
          {
            if (v504 >> 14)
            {
              uint64_t v1000 = (int)sub_181308E00(v813, v504);
            }

            else
            {
              v813->i8[0] = (v504 >> 7) | 0x80;
              v813->i8[1] = v504 & 0x7F;
              uint64_t v1000 = 2LL;
            }
          }

          else
          {
            v813->i8[0] = v504;
            uint64_t v1000 = 1LL;
          }

          v813 = (int8x8_t *)((char *)v813 + v1000);
        }

        uint64_t v1205 = *(unsigned __int16 *)(v809 + 68);
        v1206 = *(char **)(v809 + 56);
        v1207 = (unsigned int *)&v1206[v1205];
        unint64_t v1208 = *(void *)(*(void *)(v809 + 136) + 88LL);
        if ((unint64_t)&v1206[v1205] > v1208)
        {
          int v1454 = 86427;
        }

        else
        {
          uint64_t v1209 = *(unsigned int *)(v809 + 64);
          uint64_t v1210 = v808[17];
          unsigned int v1211 = *(unsigned __int16 *)(v1210 + 14);
          if ((_DWORD)v1209 == (_DWORD)v1205 && v1205 < v1211)
          {
            memcpy(v813, *(const void **)(v809 + 56), *(unsigned __int16 *)(v809 + 68));
            int v1555 = 0;
            *(_DWORD *)(v810 + 144) = v1205 + (_DWORD)v813 - *(_DWORD *)(v810 + 136);
            unint64_t v17 = v1530;
            uint64_t v12 = v1520 + 40;
            continue;
          }

          uint64_t v1213 = v809;
          v1214 = v813;
          LODWORD(v1570) = 0;
          uint64_t v1541 = v1213;
          uint64_t v1561 = **(void **)(v1213 + 32);
          *(void *)&__buf[0] = 0LL;
          if (v1209 <= v1211)
          {
            v1219 = 0LL;
            *(_DWORD *)(v810 + 144) = v1209 + (_DWORD)v813 - *(_DWORD *)(v810 + 136);
            unsigned int v1217 = v1209;
          }

          else
          {
            uint64_t v1215 = *(unsigned __int16 *)(v1210 + 16);
            signed int v1216 = (v1209 - v1215) % (*(_DWORD *)(*(void *)(v1210 + 72) + 56LL) - 4) + v1215;
            else {
              unsigned int v1217 = v1215;
            }
            unsigned int v1218 = v1217 + (_DWORD)v813 - *(_DWORD *)(v810 + 136);
            *(_DWORD *)(v810 + 144) = v1218;
            if (v1217 >= v1209)
            {
              v1219 = 0LL;
            }

            else
            {
              v1219 = (int8x8_t *)((char *)v813 + v1217);
              *(_DWORD *)(v810 + 144) = v1218 + 4;
            }
          }

          unsigned int v1512 = v1209;
          v1494 = v1219;
          if (v1209 <= v1205)
          {
            uint64_t v1220 = 0LL;
            goto LABEL_2035;
          }

          if ((unint64_t)(v1207 + 1) <= v1208)
          {
            uint64_t v1220 = bswap32(*v1207);
LABEL_2035:
            double v1498 = 0.0;
            while (1)
            {
              v1512 -= v1217;
              if (!(_DWORD)v1205) {
                goto LABEL_2041;
              }
LABEL_2037:
              int v1221 = v1217 >= v1205 ? v1205 : v1217;
              memcpy(v1214, v1206, v1221);
              v1217 -= v1221;
              LODWORD(v1205) = v1205 - v1221;
              v1214 = (int8x8_t *)((char *)v1214 + v1221);
              v1206 += v1221;
LABEL_2041:
              while (v1217)
              {
                uint64_t v1222 = *(void *)&__buf[0];
                if (*(void *)&__buf[0])
                {
                  if ((*(_WORD *)(*(void *)&__buf[0] + 52LL) & 0x20) != 0)
                  {
                    uint64_t v1223 = *(void *)(*(void *)&__buf[0] + 40LL);
                    --*(_DWORD *)(v1223 + 152);
                    *(void *)(v1222 + 32) = *(void *)(v1223 + 168);
                    *(void *)(v1223 + 168) = v1222;
                    (*(void (**)(void, void, void))(**(void **)(v1223 + 72) + 144LL))( *(void *)(v1223 + 72),  *(void *)(v1223 + 200) * (*(_DWORD *)(v1222 + 48) - 1),  *(void *)(v1222 + 8));
                  }

                  else
                  {
                    sub_1812F9F44(*(uint64_t *)&__buf[0]);
                  }
                }

                *(void *)&__buf[0] = 0LL;
                int v1224 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(v1561 + 288))( v1561,  v1220,  __buf,  2LL);
                LODWORD(v1570) = v1224;
                if (v1224)
                {
                  LODWORD(v19) = v1224;
                  goto LABEL_2075;
                }

                v1225 = *(unsigned int **)(*(void *)&__buf[0] + 8LL);
                unsigned int v1226 = *v1225;
                v1206 = (char *)(v1225 + 1);
                uint64_t v1220 = bswap32(v1226);
                int v1227 = *(_DWORD *)(*(void *)(v1541 + 32) + 56LL);
                LODWORD(v1205) = v1227 - 4;
                if (v1227 != 4) {
                  goto LABEL_2037;
                }
              }

              LODWORD(v19) = v1570;
              BOOL v1228 = (_DWORD)v1570 || v1512 == 0;
              if (!v1228 && v1494 != 0LL) {
                break;
              }
              unsigned int v1217 = 0;
LABEL_2071:
              if (!v1512 || (_DWORD)v19)
              {
LABEL_2075:
                uint64_t v11 = v1564;
                uint64_t v12 = v1520;
                unint64_t v17 = v1530;
                if (v1498 != 0.0)
                {
                  int v1233 = v19;
                  uint64_t v1234 = *(void *)(*(void *)&v1498 + 112LL);
                  if ((*(_WORD *)(v1234 + 52) & 0x20) != 0)
                  {
                    uint64_t v1235 = *(void *)(v1234 + 40);
                    --*(_DWORD *)(v1235 + 152);
                    *(void *)(v1234 + 32) = *(void *)(v1235 + 168);
                    *(void *)(v1235 + 168) = v1234;
                    (*(void (**)(void, void, void))(**(void **)(v1235 + 72) + 144LL))( *(void *)(v1235 + 72),  *(void *)(v1235 + 200) * (*(_DWORD *)(v1234 + 48) - 1),  *(void *)(v1234 + 8));
                  }

                  else
                  {
                    sub_1812F9F44(v1234);
                  }

                  LODWORD(v19) = v1233;
                }

                uint64_t v1236 = *(void *)&__buf[0];
                if (*(void *)&__buf[0])
                {
                  int v1237 = v19;
                  if ((*(_WORD *)(*(void *)&__buf[0] + 52LL) & 0x20) != 0)
                  {
                    uint64_t v1238 = *(void *)(*(void *)&__buf[0] + 40LL);
                    --*(_DWORD *)(v1238 + 152);
                    *(void *)(v1236 + 32) = *(void *)(v1238 + 168);
                    *(void *)(v1238 + 168) = v1236;
                    (*(void (**)(void, void, void))(**(void **)(v1238 + 72) + 144LL))( *(void *)(v1238 + 72),  *(void *)(v1238 + 200) * (*(_DWORD *)(v1236 + 48) - 1),  *(void *)(v1236 + 8));
                  }

                  else
                  {
                    sub_1812F9F44(*(uint64_t *)&__buf[0]);
                  }

                  LODWORD(v19) = v1237;
                }

                if (!(_DWORD)v19)
                {
                  int v1555 = 0;
                  uint64_t v12 = v1520 + 40;
                  goto LABEL_22;
                }

                goto LABEL_2728;
              }
            }

            double v1571 = 0.0;
            int v1230 = sub_1812B48CC(v810, (uint64_t *)&v1571, (int *)&v1569, 0, 0);
            LODWORD(v1570) = v1230;
            _DWORD *v1494 = bswap32(v1569);
            if (!*(_BYTE *)(v810 + 33) || v1498 == 0.0)
            {
              if (v1498 == 0.0) {
                goto LABEL_2065;
              }
            }

            else
            {
              sub_1812C0570((_DWORD *)v810, (int)v1569, 4, *(_DWORD *)(*(void *)&v1498 + 4LL), &v1570);
            }

            uint64_t v1231 = *(void *)(*(void *)&v1498 + 112LL);
            if ((*(_WORD *)(v1231 + 52) & 0x20) != 0)
            {
              uint64_t v1232 = *(void *)(v1231 + 40);
              --*(_DWORD *)(v1232 + 152);
              *(void *)(v1231 + 32) = *(void *)(v1232 + 168);
              *(void *)(v1232 + 168) = v1231;
              (*(void (**)(void, void, void))(**(void **)(v1232 + 72) + 144LL))( *(void *)(v1232 + 72),  *(void *)(v1232 + 200) * (*(_DWORD *)(v1231 + 48) - 1),  *(void *)(v1231 + 8));
            }

            else
            {
              sub_1812F9F44(v1231);
            }

LABEL_2065:
            double v1498 = v1571;
            if (v1571 == 0.0)
            {
              unsigned int v1217 = 0;
            }

            else
            {
              v1494 = *(_DWORD **)(*(void *)&v1571 + 80LL);
              _DWORD *v1494 = 0;
              v1214 = (int8x8_t *)(v1494 + 1);
              if (*(_DWORD *)(v810 + 56) - 4 >= v1512) {
                unsigned int v1217 = v1512;
              }
              else {
                unsigned int v1217 = *(_DWORD *)(v810 + 56) - 4;
              }
            }

            LODWORD(v19) = v1570;
            goto LABEL_2071;
          }

          int v1454 = 86452;
        }

        LODWORD(v19) = sub_1812FBF50(v1454);
        uint64_t v11 = v1564;
        uint64_t v12 = v1520;
        unint64_t v17 = v1530;
        goto LABEL_2728;
      case 0x82u:
        int v505 = *((_DWORD *)v12 + 2);
        uint64_t v506 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (v12[1] == 251 && ((uint64_t v507 = *(void *)(v13 + 360)) != 0 || *(void *)(v13 + 312)))
        {
          uint64_t v508 = *(void *)(*(void *)(v13 + 32) + 32LL * *(char *)(v506 + 1));
          uint64_t v509 = *((void *)v12 + 2);
          if ((*((_WORD *)v12 + 1) & 2) != 0 && *(_BYTE *)(v506 + 4))
          {
            uint64_t v510 = *(void *)(v506 + 40);
            sub_1812FFFE4(v510);
            *(void *)(v506 + 72) = *(void *)(v510 + 48);
            uint64_t v507 = *(void *)(v13 + 360);
          }

          BOOL v511 = v509 != 0;
          if (v507 && v509)
          {
            if ((v505 & 4) != 0) {
              int v512 = 23;
            }
            else {
              int v512 = 9;
            }
            sub_18130667C( (uint64_t *)v1564,  v506,  v512,  v508,  v509,  *(void *)(v506 + 72),  *((_DWORD *)v12 + 3),  0xFFFFFFFF);
            BOOL v511 = 1;
          }
        }

        else
        {
          BOOL v511 = 0;
          uint64_t v508 = 0LL;
          uint64_t v509 = 0LL;
        }

        if ((v505 & 0x40) != 0) {
          goto LABEL_21;
        }
        int v373 = sub_1812AB814(*(unsigned __int8 **)(v506 + 40), v12[2]);
        *(void *)(v506 + 24) = 0LL;
        if (v373) {
          goto LABEL_2582;
        }
        ++v1487;
        if ((v505 & 1) != 0)
        {
          ++*(void *)(v1564 + 56);
          v1023 = *(void (**)(void, uint64_t, uint64_t, void, void))(v13 + 312);
          if (v1023) {
            BOOL v1024 = v511;
          }
          else {
            BOOL v1024 = 0;
          }
          if (v1024)
          {
            if ((*(_BYTE *)(v509 + 48) & 0x80) == 0) {
              v1023(*(void *)(v13 + 304), 9LL, v508, *(void *)v509, *(void *)(v506 + 72));
            }
            int v1555 = 0;
            v12 += 40;
          }

          else
          {
            int v1555 = 0;
            v12 += 40;
          }
        }

        else
        {
          int v1555 = 0;
          v12 += 40;
        }

        continue;
      case 0x83u:
        uint64_t v513 = *(void *)(v1564 + 56);
        uint64_t v514 = *(void *)(v13 + 128) + v513;
        *(void *)(v13 + 120) = v513;
        *(void *)(v13 + 128) = v514;
        *(void *)(v1564 + 56) = 0LL;
        v12 += 40;
        continue;
      case 0x84u:
        uint64_t v515 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v516 = *((unsigned int *)v12 + 4);
        uint64_t v517 = *((int *)v12 + 3);
        uint64_t v519 = *(void *)(v515 + 40);
        uint64_t v518 = *(void *)(v515 + 48);
        v520 = *(uint64_t **)(v519 + 48);
        if (v520) {
          goto LABEL_1811;
        }
        unint64_t v521 = (unint64_t)*(unsigned __int16 *)(v518 + 6) << 6;
        uint64_t v522 = *(void *)(v518 + 16);
        if (v522) {
          uint64_t v523 = sub_1812F2264(v522, v521 + 104);
        }
        else {
          uint64_t v523 = sub_18126F0AC(v521 + 104);
        }
        v520 = (uint64_t *)v523;
        if (v523)
        {
          *(void *)uint64_t v523 = v518;
          *(void *)(v523 + 8) = v523 + 40;
          *(void *)(v519 + 48) = v523;
          *(_WORD *)(v523 + 28) = v516;
LABEL_1811:
          if (*(_BYTE *)(v519 + 88))
          {
            if (*(_BYTE *)(v519 + 89)) {
              uint64_t v1128 = *(void *)(v519 + 16);
            }
            else {
              uint64_t v1128 = *(void *)(*(void *)(v519 + 24) + 24LL)
            }
                    + 80LL * *(int *)(*(void *)(*(void *)(v519 + 24) + 16LL) + 4LL);
            v1129 = (unsigned int *)(v1128 + 20);
            v1130 = *(char **)(v1128 + 40);
          }

          else
          {
            v1129 = *(unsigned int **)(v519 + 56);
            v1130 = (char *)(v1129 + 4);
          }

          sub_1812AF9EC(v518, *v1129, v1130, (uint64_t)v520);
          if ((int)v516 >= 1)
          {
            v1131 = (__int16 *)(v520[1] + 20);
            do
            {
              __int16 v1132 = *v1131;
              v1131 += 32;
              if ((v1132 & 1) != 0) {
                goto LABEL_2167;
              }
              --v516;
            }

            while (v516);
          }

          int v1555 = 0;
          if (!sub_1813068A8( *(_DWORD *)(v1567 + (v517 << 6) + 16),  *(char **)(v1567 + (v517 << 6) + 8),  v520,  0)) {
            goto LABEL_21;
          }
LABEL_2168:
          int v214 = *((_DWORD *)v12 + 2);
LABEL_2169:
          uint64_t v12 = &v1565[40 * v214];
          continue;
        }

        *(void *)(v519 + 48) = 0LL;
        goto LABEL_2684;
      case 0x85u:
        uint64_t v524 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1)) + 40LL);
        if (*(_BYTE *)(v524 + 88))
        {
          if (*(_BYTE *)(v524 + 89)) {
            uint64_t v525 = *(void *)(v524 + 16);
          }
          else {
            uint64_t v525 = *(void *)(*(void *)(v524 + 24) + 24LL)
          }
                 + 80LL * *(int *)(*(void *)(*(void *)(v524 + 24) + 16LL) + 4LL);
          v815 = (signed int *)(v525 + 20);
          v816 = *(const void **)(v525 + 40);
        }

        else
        {
          v815 = *(signed int **)(v524 + 56);
          v816 = v815 + 4;
        }

        uint64_t v1036 = *((int *)v12 + 2);
        signed int v1037 = *v815;
        unint64_t v1038 = v1567 + (v1036 << 6);
        if (*(_DWORD *)(v1038 + 32) >= v1037)
        {
          v1040 = *(void **)(v1038 + 40);
          *(void *)(v1038 + 8) = v1040;
          __int16 v1041 = 16;
        }

        else
        {
          if (sub_18128FAF0(v1567 + (v1036 << 6), v1037, 0))
          {
LABEL_2684:
            LODWORD(v19) = 7;
            uint64_t v11 = v1564;
            goto LABEL_2728;
          }

          unint64_t v1039 = v1567 + (v1036 << 6);
          v1040 = *(void **)(v1039 + 8);
          __int16 v1041 = *(_WORD *)(v1039 + 20) & 0xF240 | 0x10;
        }

        unint64_t v1042 = v1567 + (v1036 << 6);
        *(_DWORD *)(v1042 + 16) = v1037;
        *(_WORD *)(v1042 + 20) = v1041;
        memcpy(v1040, v816, v1037);
        int v1555 = 0;
        *(_DWORD *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 3)) + 24LL) = 0;
        v12 += 40;
        continue;
      case 0x86u:
        uint64_t v526 = *(void *)(v1564 + 104);
        uint64_t v527 = *((int *)v12 + 2);
        uint64_t v528 = v526 + (v527 << 6);
        v529 = (_WORD *)(v528 + 20);
        if ((*(_WORD *)(v528 + 20) & 0x9000) != 0) {
          sub_18130875C(v526 + (v527 << 6));
        }
        else {
          _WORD *v529 = 4;
        }
        uint64_t v817 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1)) + 40LL);
        sub_1812FFFE4(v817);
        a6 = *(unsigned int *)(v817 + 64);
        uint64_t v818 = *(void *)(v817 + 56);
        int v819 = *(_DWORD *)(*(void *)(v817 + 136) + 88LL) - v818;
        else {
          unsigned int v820 = v819 & ~(v819 >> 31);
        }
        uint64_t v821 = v526 + (v527 << 6);
        *(void *)(v821 + 8) = v818;
        if (v820 >= a6)
        {
          _WORD *v529 = 16400;
          *(_DWORD *)(v821 + 16) = a6;
        }

        else
        {
          int v373 = sub_1812A4B24(v817, 0, a6, v526 + (v527 << 6));
          if (v373) {
            goto LABEL_2582;
          }
        }

        uint64_t v11 = v1564;
        if (*((_DWORD *)v12 + 3))
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        if ((*v529 & 0x4000) == 0)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        if (!sub_1812D7910((int *)v528))
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        goto LABEL_8;
      case 0x87u:
        uint64_t v530 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v531 = (_WORD *)(v530 + 20);
        if ((*(_WORD *)(v530 + 20) & 0x9000) != 0) {
          sub_18130875C(*(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        }
        else {
          _WORD *v531 = 4;
        }
        uint64_t v822 = *((int *)v12 + 1);
        uint64_t v823 = *(void *)(*(void *)(v1564 + 120) + 8 * v822);
        if (*(_BYTE *)(v823 + 2)) {
          goto LABEL_1113;
        }
        if (*(_BYTE *)(v823 + 3))
        {
          v864 = (void *)(v823 + 72);
        }

        else
        {
          uint64_t v1141 = *(void *)(v823 + 40);
          if (*(_BYTE *)v823 == 2)
          {
            uint64_t v1142 = *(void *)v1141;
            v864 = __buf;
            int v1143 = (*(uint64_t (**)(uint64_t, _OWORD *))(**(void **)v1141 + 96LL))(v1141, __buf);
            sub_181302CE4(v1564, v1142);
            if (v1143)
            {
              LODWORD(v19) = v1143;
              uint64_t v11 = v1564;
              goto LABEL_2728;
            }

            int v1555 = 0;
          }

          else
          {
            if (*(_BYTE *)v1141)
            {
              int v373 = sub_181304D2C(*(void *)(*(void *)(v1564 + 120) + 8 * v822));
              if (v373) {
                goto LABEL_2582;
              }
              if (*(_BYTE *)(v823 + 2))
              {
                int v1555 = 0;
LABEL_1113:
                _WORD *v531 = 1;
                v12 += 40;
                continue;
              }

              uint64_t v1141 = *(void *)(v823 + 40);
            }

            sub_1812FFFE4(v1141);
            int v1555 = 0;
            v864 = (void *)(v1141 + 48);
          }
        }

        *(void *)uint64_t v530 = *v864;
        v12 += 40;
        continue;
      case 0x88u:
        uint64_t v11 = v1564;
        uint64_t v532 = *((int *)v12 + 1);
        uint64_t v533 = *(void *)(*(void *)(v1564 + 120) + 8 * v532);
        if (v533) {
          goto LABEL_575;
        }
        uint64_t v533 = sub_18129B5DC(v1564, v532, 1, 3);
        if (!v533) {
          goto LABEL_8;
        }
        *(_DWORD *)(v533 + 28) = 0;
        *(_BYTE *)(v533 + 4) = 1;
        *(_BYTE *)(v533 + 5) |= 8u;
        *(void *)(v533 + 40) = &unk_18C550658;
LABEL_575:
        *(_BYTE *)(v533 + 2) = 1;
        *(_DWORD *)(v533 + 24) = 0;
        if (*(_BYTE *)v533) {
          goto LABEL_21;
        }
        sub_1813013F8(*(void *)(v533 + 40));
        v12 += 40;
        continue;
      case 0x8Au:
        uint64_t v11 = v1564;
        uint64_t v534 = *((int *)v12 + 2);
        uint64_t v535 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        __int16 v536 = *((_WORD *)v12 + 1);
        if ((v536 & 1) != 0) {
          ++*(void *)(v1564 + 56);
        }
        unint64_t v537 = v1567;
        unint64_t v538 = v1567 + (v534 << 6);
        if ((*(_WORD *)(v538 + 20) & 0x400) == 0) {
          goto LABEL_582;
        }
        int v68 = sub_1812B7E58((int *)v538);
        if (v68) {
          goto LABEL_2579;
        }
        __int16 v536 = *((_WORD *)v12 + 1);
        unint64_t v537 = v1567;
LABEL_582:
        unint64_t v539 = v537 + (v534 << 6);
        *((void *)&__buf[0] + 1) = *(int *)(v539 + 16);
        *(void *)&__buf[0] = *(void *)(v539 + 8);
        *((void *)&__buf[1] + 1) = v537 + ((uint64_t)*((int *)v12 + 3) << 6);
        LOWORD(__buf[2]) = *((_DWORD *)v12 + 4);
        int v540 = (v536 & 0x10) != 0 ? *(_DWORD *)(v535 + 28) : 0;
        int v68 = sub_1812AEA4C(*(unsigned __int8 **)(v535 + 40), (uint64_t)__buf, v536 & 0x8A, v540);
        *(_DWORD *)(v535 + 24) = 0;
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x8Bu:
        uint64_t v11 = v1564;
        uint64_t v541 = *((int *)v12 + 2);
        uint64_t v542 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        unint64_t v543 = v1567 + (v541 << 6);
        if ((*(_WORD *)(v543 + 20) & 0x400) != 0)
        {
          int v68 = sub_1812B7E58((int *)(v1567 + (v541 << 6)));
          if (v68) {
            goto LABEL_2579;
          }
        }

        uint64_t v544 = *(void *)(v542 + 40);
        uint64_t v547 = *(void *)(v543 + 8);
        v546 = (const void **)(v543 + 8);
        uint64_t v545 = v547;
        v548 = (char *)(v547 + 1);
        int v549 = *(unsigned __int8 *)(v547 + 1);
        if (*(char *)(v547 + 1) < 0)
        {
          int v550 = *(unsigned __int8 *)(v545 + 2);
          if (*(char *)(v545 + 2) < 0)
          {
            int v1144 = *(char *)(v545 + 3);
            if (v1144 < 0)
            {
              sub_18129BD74(v548, (unint64_t *)__buf);
              if (HIDWORD(*(void *)&__buf[0])) {
                int v549 = -1;
              }
              else {
                int v549 = __buf[0];
              }
            }

            else
            {
              int v549 = v1144 & 0x7F | (v549 << 14) & 0x1FC07F | ((v550 & 0x7F) << 7);
            }
          }

          else
          {
            int v549 = ((v549 & 0x7F) << 7) | v550;
          }
        }

        BOOL v1301 = v549 == 7 || (v549 - 1) > 8;
        if (v1301)
        {
          if (v549 < 11 || (v549 & 1) == 0)
          {
            *(_BYTE *)(v544 + 92) = 0;
            goto LABEL_2291;
          }

          char v1303 = *(_BYTE *)(v544 + 92) & 2;
        }

        else
        {
          char v1303 = *(_BYTE *)(v544 + 92) & 1;
        }

        *(_BYTE *)(v544 + 92) = v1303;
LABEL_2291:
        unint64_t v1304 = v1567 + (v541 << 6);
        unint64_t v1307 = *(int *)(v1304 + 16);
        v1305 = (int *)(v1304 + 16);
        unint64_t v1306 = v1307;
        unsigned int v1553 = v18;
        int v1308 = 1;
        if (v1307 >= 0x80)
        {
          unint64_t v1309 = v1306;
          do
          {
            unint64_t v1310 = v1309 >> 14;
            v1309 >>= 7;
            ++v1308;
          }

          while (v1310);
        }

        int v1311 = v1306 + 16;
        int v1312 = *(_DWORD *)(v544 + 4);
        if (!v1312) {
          goto LABEL_2303;
        }
        if (*(void *)(v544 + 64))
        {
          int v1562 = 0;
          int v1313 = *(_DWORD *)(v544 + 80);
          if (!v1313 || v1313 + v1311 <= v1312)
          {
LABEL_2304:
            *(_DWORD *)(v544 + 72) += v1308 + v1306;
            uint64_t v1316 = *(void *)(v544 + 64);
            if (v1316)
            {
              int v1317 = *(_DWORD *)(v544 + 80);
              uint64_t v1318 = *(int *)(v544 + 84);
              int v1319 = v1317 + v1311;
              uint64_t v1320 = *(void *)(v544 + 56);
              do
                v1318 *= 2LL;
              while (v1318 < v1319);
              if (v1320) {
                unsigned int v1321 = v1320 - v1316;
              }
              else {
                unsigned int v1321 = -1;
              }
              uint64_t v1322 = *(int *)(v544 + 4);
              if (v1318 < v1322) {
                uint64_t v1322 = v1318;
              }
              if (v1322 <= v1319) {
                uint64_t v1323 = v1319;
              }
              else {
                uint64_t v1323 = v1322;
              }
              uint64_t v1316 = sub_18127D33C(v1316, v1323);
              if (v1316)
              {
                if ((v1321 & 0x80000000) != 0)
                {
                  uint64_t v1320 = *(void *)(v544 + 56);
                }

                else
                {
                  uint64_t v1320 = v1316 + v1321;
                  *(void *)(v544 + 56) = v1320;
                }

                *(void *)(v544 + 64) = v1316;
                *(_DWORD *)(v544 + 84) = v1323;
                int v1317 = *(_DWORD *)(v544 + 80);
LABEL_2324:
                uint64_t v18 = v1553;
                v1325 = (_DWORD *)(v1316 + v1317);
                *(_DWORD *)(v544 + 80) = v1317 + ((v1306 + 23) & 0xFFFFFFF8);
                if (v1320) {
                  v1325[2] = v1320 - v1316;
                }
                goto LABEL_2326;
              }
            }

            else
            {
              uint64_t v1324 = sub_18126F0AC(v1311);
              if (v1324)
              {
                v1325 = (_DWORD *)v1324;
                *(void *)(v1324 + 8) = *(void *)(v544 + 56);
                uint64_t v18 = v1553;
LABEL_2326:
                memcpy(v1325 + 4, *v546, *v1305);
                _DWORD *v1325 = *v1305;
                *(void *)(v544 + 56) = v1325;
                LODWORD(v19) = v1562;
                if (v1562) {
                  goto LABEL_2594;
                }
                int v1555 = 0;
                v12 += 40;
                continue;
              }
            }

            LODWORD(v19) = 7;
            LOBYTE(v18) = v1553;
            uint64_t v11 = v1564;
            goto LABEL_2728;
          }
        }

        else
        {
          int v1314 = *(_DWORD *)(v544 + 72);
          if (v1314 <= v1312 && (v1314 <= *(_DWORD *)v544 || !dword_18C468B88))
          {
LABEL_2303:
            int v1562 = 0;
            goto LABEL_2304;
          }
        }

        sub_18130B3C8(v544);
        int v1562 = v1315;
        *(_DWORD *)(v544 + 72) = 0;
        *(_DWORD *)(v544 + 80) = 0;
        goto LABEL_2304;
      case 0x8Cu:
        uint64_t v11 = v1564;
        v551 = *(void **)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        v552 = (unsigned __int8 *)v551[5];
        *(void *)&__buf[0] = v551[6];
        WORD6(__buf[1]) = *((_DWORD *)v12 + 3);
        BYTE14(__buf[1]) = 0;
        *((void *)&__buf[0] + 1) = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
        int v68 = sub_181305F54((uint64_t)v552, (uint64_t *)__buf, (int *)&v1571);
        if (v68) {
          goto LABEL_2579;
        }
        if (LODWORD(v1571))
        {
          if (*((_WORD *)v12 + 1) && (*(void *)(v13 + 48) & 0x10000001LL) != 1)
          {
            sub_1812F30C4(779LL, 106503, "index corruption");
            LODWORD(v19) = 779;
            goto LABEL_2728;
          }
        }

        else
        {
          int v68 = sub_1812AB814(v552, 4);
          if (v68) {
            goto LABEL_2579;
          }
        }

        int v1555 = 0;
        v551[3] = 0LL;
        v12 += 40;
        continue;
      case 0x8Du:
      case 0x8Eu:
        uint64_t v11 = v1564;
        uint64_t v117 = *((int *)v12 + 1);
        uint64_t v118 = *(void *)(*(void *)(v1564 + 120) + 8 * v117);
        if (**(_BYTE **)(v118 + 40))
        {
          int v68 = sub_181304D2C(*(void *)(*(void *)(v1564 + 120) + 8 * v117));
          if (v68) {
            goto LABEL_2579;
          }
        }

        if (*(_BYTE *)(v118 + 2))
        {
          unint64_t v119 = v1567 + ((uint64_t)*((int *)v12 + 2) << 6);
          __int16 v121 = *(_WORD *)(v119 + 20);
          uint64_t v120 = (_WORD *)(v119 + 20);
          if ((v121 & 0x9000) != 0) {
            sub_181303888((int *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6)));
          }
          else {
            *uint64_t v120 = 1;
          }
          int v1555 = 0;
          v12 += 40;
        }

        else
        {
          *(void *)&__buf[0] = 0LL;
          int v68 = sub_1812A4C30(v13, *(void *)(v118 + 40), __buf);
          if (v68) {
            goto LABEL_2579;
          }
          if (*v12 == 141)
          {
            uint64_t v700 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 3));
            *(_WORD *)(v700 + 2) = 256;
            *(void *)(v700 + 72) = *(void *)&__buf[0];
            *(_DWORD *)(v700 + 24) = 0;
            *(void *)(v700 + 8) = *((void *)v12 + 2);
            *(void *)(v700 + 32) = v118;
            int v1555 = 0;
            v12 += 40;
          }

          else
          {
            uint64_t v867 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
            if ((*(_WORD *)(v867 + 20) & 0x9000) != 0) {
              uint64_t v867 = sub_18130875C(v867);
            }
            else {
              *(_WORD *)(v867 + 20) = 4;
            }
            *(void *)uint64_t v867 = *(void *)&__buf[0];
            int v1555 = 0;
            v12 += 40;
          }
        }

        continue;
      case 0x8Fu:
        uint64_t v11 = v1564;
        uint64_t v553 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (!*(_BYTE *)(v553 + 3)) {
          goto LABEL_21;
        }
        int v68 = sub_181304CC0(v553);
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x90u:
        unsigned int v1543 = v18;
        v1516 = v12;
        unint64_t v1525 = v17;
        uint64_t v11 = v1564;
        uint64_t v554 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v555 = (_WORD *)(v554 + 20);
        if ((*(_WORD *)(v554 + 20) & 0x9000) != 0) {
          sub_18130875C(v554);
        }
        else {
          _WORD *v555 = 4;
        }
        _WORD *v555 = 1;
        if (*(_DWORD *)(v13 + 212) > *(_DWORD *)(v13 + 224) + 1)
        {
          *(_BYTE *)(v1564 + 264) = 2;
          LODWORD(v19) = 6;
          goto LABEL_2689;
        }

        uint64_t v824 = *((int *)v1516 + 3);
        uint64_t v825 = *(void *)(*(void *)(v13 + 32) + 32 * v824 + 8);
        uint64_t v826 = *((unsigned int *)v1516 + 1);
        if (*(_BYTE *)(v825 + 17))
        {
          ++*(_DWORD *)(v825 + 20);
          if (!*(_BYTE *)(v825 + 18)) {
            sub_1812FDE20(v825);
          }
        }

        v827 = *(_DWORD **)(v825 + 8);
        if (v827[16] < v826)
        {
          int v828 = sub_1812FBF50(87020);
LABEL_1123:
          LODWORD(v19) = v828;
LABEL_1124:
          int v829 = 0;
          goto LABEL_1125;
        }

        int v828 = sub_1812C9D84(v825, v826, 0LL);
        if (v828) {
          goto LABEL_1123;
        }
        int v828 = (*(uint64_t (**)(void))(*(void *)v827 + 288LL))();
        if (v828) {
          goto LABEL_1123;
        }
        uint64_t v1277 = *(void *)(*(void *)&__buf[0] + 16LL);
        if (*(_DWORD *)(v1277 + 4) != (_DWORD)v826)
        {
          uint64_t v1278 = *(void *)(*(void *)&__buf[0] + 8LL);
          *(void *)(v1277 + 112) = *(void *)&__buf[0];
          *(void *)(v1277 + 72) = v827;
          *(void *)(v1277 + 80) = v1278;
          *(_DWORD *)(v1277 + 4) = v826;
          if ((_DWORD)v826 == 1) {
            char v1279 = 100;
          }
          else {
            char v1279 = 0;
          }
          *(_BYTE *)(v1277 + 9) = v1279;
        }

        if (*((_BYTE *)v827 + 33))
        {
          uint64_t v1280 = *(void *)(v825 + 8);
          if (*(_BYTE *)(v825 + 17))
          {
            ++*(_DWORD *)(v825 + 20);
            if (*(_BYTE *)(v825 + 18))
            {
              BOOL v1281 = 0;
            }

            else
            {
              sub_1812FDE20(v825);
              BOOL v1281 = *(_BYTE *)(v825 + 17) == 0;
            }
          }

          else
          {
            BOOL v1281 = 1;
          }

          unsigned int v1405 = *(_DWORD *)(*(void *)(*(void *)(v1280 + 24) + 80LL) + 52LL);
          if (!v1281)
          {
            int v1406 = *(_DWORD *)(v825 + 20) - 1;
            *(_DWORD *)(v825 + 20) = v1406;
            if (!v1406) {
              sub_1812FDEFC(v825);
            }
          }

          unsigned int v1407 = bswap32(v1405);
          if (v1407 == (_DWORD)v826)
          {
            int v1408 = sub_1812C1B04(*(void *)(v1277 + 72), v1277, *(unsigned int *)(v1277 + 4));
            uint64_t v1409 = v1277;
            int v1410 = v1408;
            uint64_t v1411 = *(void *)(v1409 + 112);
            if ((*(_WORD *)(v1411 + 52) & 0x20) != 0)
            {
              uint64_t v1413 = *(void *)(v1411 + 40);
              --*(_DWORD *)(v1413 + 152);
              *(void *)(v1411 + 32) = *(void *)(v1413 + 168);
              *(void *)(v1413 + 168) = v1411;
              (*(void (**)(void, void, void))(**(void **)(v1413 + 72) + 144LL))( *(void *)(v1413 + 72),  *(void *)(v1413 + 200) * (*(_DWORD *)(v1411 + 48) - 1),  *(void *)(v1411 + 8));
            }

            else
            {
              sub_1812F9F44(v1411);
            }

            int v829 = 0;
            LODWORD(v19) = v1410;
            if (v1410) {
              goto LABEL_1125;
            }
          }

          else
          {
            uint64_t v1412 = *(void *)(v1277 + 112);
            if ((*(_WORD *)(v1412 + 52) & 0x20) != 0)
            {
              uint64_t v1418 = *(void *)(v1412 + 40);
              --*(_DWORD *)(v1418 + 152);
              *(void *)(v1412 + 32) = *(void *)(v1418 + 168);
              *(void *)(v1418 + 168) = v1412;
              (*(void (**)(void, void, void))(**(void **)(v1418 + 72) + 144LL))( *(void *)(v1418 + 72),  *(void *)(v1418 + 200) * (*(_DWORD *)(v1412 + 48) - 1),  *(void *)(v1412 + 8));
            }

            else
            {
              sub_1812F9F44(v1412);
            }

            int v828 = (*(uint64_t (**)(void))(*(void *)v827 + 288LL))();
            if (v828) {
              goto LABEL_1123;
            }
            uint64_t v1419 = *(void *)(*(void *)&__buf[0] + 16LL);
            if (*(_DWORD *)(v1419 + 4) != v1407)
            {
              uint64_t v1420 = *(void *)(*(void *)&__buf[0] + 8LL);
              *(void *)(v1419 + 112) = *(void *)&__buf[0];
              *(void *)(v1419 + 72) = v827;
              *(void *)(v1419 + 80) = v1420;
              *(_DWORD *)(v1419 + 4) = v1407;
              if (v1407 == 1) {
                char v1421 = 100;
              }
              else {
                char v1421 = 0;
              }
              *(_BYTE *)(v1419 + 9) = v1421;
            }

            int v1422 = sub_181300298(v827, v1419, 1, 0, v826, 0);
            uint64_t v1423 = *(void *)(v1419 + 112);
            if ((*(_WORD *)(v1423 + 52) & 0x20) != 0)
            {
              uint64_t v1424 = *(void *)(v1423 + 40);
              --*(_DWORD *)(v1424 + 152);
              *(void *)(v1423 + 32) = *(void *)(v1424 + 168);
              *(void *)(v1424 + 168) = v1423;
              (*(void (**)(void, void, void))(**(void **)(v1424 + 72) + 144LL))( *(void *)(v1424 + 72),  *(void *)(v1424 + 200) * (*(_DWORD *)(v1423 + 48) - 1),  *(void *)(v1423 + 8));
            }

            else
            {
              sub_1812F9F44(v1423);
            }

            if (v1422)
            {
              LODWORD(v19) = v1422;
              goto LABEL_1124;
            }

            int v1425 = (*(uint64_t (**)(void))(*(void *)v827 + 288LL))();
            if (v1425)
            {
              LODWORD(v19) = v1425;
              int v829 = 0;
              uint64_t v13 = v1500;
              goto LABEL_1125;
            }

            uint64_t v1426 = *(void *)(*(void *)&__buf[0] + 16LL);
            if (*(_DWORD *)(v1426 + 4) == v1407)
            {
              uint64_t v1427 = *(void *)(v1426 + 72);
            }

            else
            {
              uint64_t v1428 = *(void *)(*(void *)&__buf[0] + 8LL);
              *(void *)(v1426 + 112) = *(void *)&__buf[0];
              *(void *)(v1426 + 72) = v827;
              *(void *)(v1426 + 80) = v1428;
              *(_DWORD *)(v1426 + 4) = v1407;
              if (v1407 == 1) {
                char v1429 = 100;
              }
              else {
                char v1429 = 0;
              }
              *(_BYTE *)(v1426 + 9) = v1429;
              uint64_t v1427 = (uint64_t)v827;
            }

            int v1430 = sub_1812C1B04(v1427, v1426, *(unsigned int *)(v1426 + 4));
            uint64_t v1431 = *(void *)(v1426 + 112);
            if ((*(_WORD *)(v1431 + 52) & 0x20) != 0)
            {
              uint64_t v1432 = *(void *)(v1431 + 40);
              --*(_DWORD *)(v1432 + 152);
              *(void *)(v1431 + 32) = *(void *)(v1432 + 168);
              *(void *)(v1432 + 168) = v1431;
              (*(void (**)(void, void, void))(**(void **)(v1432 + 72) + 144LL))( *(void *)(v1432 + 72),  *(void *)(v1432 + 200) * (*(_DWORD *)(v1431 + 48) - 1),  *(void *)(v1431 + 8));
            }

            else
            {
              sub_1812F9F44(v1431);
            }

            int v829 = v1407;
            uint64_t v13 = v1500;
            if (v1430)
            {
              LODWORD(v19) = v1430;
              goto LABEL_1124;
            }
          }

          unsigned int v1414 = dword_18C54FA50 / v827[13];
          do
          {
            while (1)
            {
              do
                unsigned int v1417 = v1407--;
              while (v1414 + 2 == v1417);
              if (v1407 >= 2) {
                break;
              }
              if (v1407) {
                goto LABEL_2547;
              }
            }

            unsigned int v1415 = (v1417 - 3) / (v827[14] / 5u + 1) * (v827[14] / 5u + 1);
            if (v1415 + 1 == v1414) {
              int v1416 = 3;
            }
            else {
              int v1416 = 2;
            }
          }

          while (v1407 == v1416 + v1415);
LABEL_2547:
          LODWORD(v19) = sub_1812D5F54(v825, 4, v1407);
        }

        else
        {
          int v1402 = sub_1812C1B04(*(void *)(v1277 + 72), v1277, *(unsigned int *)(v1277 + 4));
          uint64_t v1403 = *(void *)(v1277 + 112);
          if ((*(_WORD *)(v1403 + 52) & 0x20) != 0)
          {
            uint64_t v1404 = *(void *)(v1403 + 40);
            --*(_DWORD *)(v1404 + 152);
            *(void *)(v1403 + 32) = *(void *)(v1404 + 168);
            *(void *)(v1404 + 168) = v1403;
            (*(void (**)(void, void, void))(**(void **)(v1404 + 72) + 144LL))( *(void *)(v1404 + 72),  *(void *)(v1404 + 200) * (*(_DWORD *)(v1403 + 48) - 1),  *(void *)(v1403 + 8));
          }

          else
          {
            sub_1812F9F44(v1403);
          }

          int v829 = 0;
          LODWORD(v19) = v1402;
        }

LABEL_1125:
        if (*(_BYTE *)(v825 + 17))
        {
          int v830 = *(_DWORD *)(v825 + 20) - 1;
          *(_DWORD *)(v825 + 20) = v830;
          if (!v830)
          {
            uint64_t v831 = v825;
            int v832 = v19;
            sub_1812FDEFC(v831);
            LODWORD(v19) = v832;
          }
        }

        _WORD *v555 = 4;
        *(void *)uint64_t v554 = v829;
        uint64_t v11 = v1564;
        if (!(_DWORD)v19)
        {
          if (v829)
          {
            sub_18130703C(v13, v824, v829, *((_DWORD *)v1516 + 1));
            int v1555 = 0;
            uint64_t v18 = (v824 + 1);
            unint64_t v17 = v1525;
          }

          else
          {
            int v1555 = 0;
            unint64_t v17 = v1525;
            uint64_t v18 = v1543;
          }

          uint64_t v12 = v1516 + 40;
          continue;
        }

        goto LABEL_2689;
      case 0x91u:
        *(void *)&__buf[0] = 0LL;
        int v68 = sub_1812C9D84( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 2) + 8),  *((_DWORD *)v12 + 1),  __buf);
        uint64_t v556 = *((unsigned int *)v12 + 3);
        uint64_t v11 = v1564;
        if ((_DWORD)v556)
        {
          uint64_t v557 = *(void *)&__buf[0];
          *(void *)(v1564 + 56) += *(void *)&__buf[0];
        }

        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x92u:
        uint64_t v11 = v1564;
        uint64_t v558 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v559 = *(void *)(v558 + 40);
        if (*(_BYTE *)v558 == 1)
        {
          sub_181302058((void *)v13, v559);
          v12 += 40;
        }

        else
        {
          int v68 = sub_1812C9D84(*(void *)(v559 + 8), *(_DWORD *)(v559 + 80), 0LL);
          if (v68) {
            goto LABEL_2579;
          }
          int v1555 = 0;
          v12 += 40;
        }

        continue;
      case 0x93u:
        uint64_t v11 = v1564;
        uint64_t v560 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v560 + 20) & 0x9000) != 0) {
          sub_18130875C(*(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        }
        else {
          *(_WORD *)(v560 + 20) = 4;
        }
        LODWORD(__buf[0]) = 0;
        int v68 = sub_18130571C( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8),  (unsigned int *)__buf,  *((_DWORD *)v12 + 3));
        if (v68) {
          goto LABEL_2579;
        }
        int v1555 = 0;
        *(void *)uint64_t v560 = LODWORD(__buf[0]);
        v12 += 40;
        continue;
      case 0x94u:
        ++*(_BYTE *)(v13 + 112);
        int v373 = sqlite3_exec((sqlite3 *)v13, *((const char **)v12 + 2), 0LL, 0LL, 0LL);
        --*(_BYTE *)(v13 + 112);
        if (v373) {
          goto LABEL_2582;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x95u:
        uint64_t v561 = *((unsigned int *)v12 + 1);
        if (*((void *)v12 + 2))
        {
          *(void *)&__buf[0] = v13;
          *((void *)&__buf[0] + 1) = v1490;
          LODWORD(__buf[1]) = v561;
          DWORD2(__buf[1]) = 0;
          v562 = (void *)(*(void *)(v13 + 32) + 32LL * (int)v561);
          LODWORD(__buf[2]) = *(_DWORD *)(*(void *)(v562[1] + 8LL) + 64LL);
          v563 = (const char *)sub_18127F588( v13,  "SELECT*FROM%w.%s WHERE %s ORDER BY rowid",  a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  *v562);
          uint64_t v11 = v1564;
          if (!v563)
          {
            sub_1812D6078(v13);
            goto LABEL_8;
          }

          v564 = v563;
          *(_BYTE *)(v13 + 197) = 1;
          DWORD1(__buf[1]) = 0;
          HIDWORD(__buf[1]) = 0;
          int v565 = sqlite3_exec( (sqlite3 *)v13,  v563,  (int (__cdecl *)(void *, int, char **, char **))sub_1812775D4,  __buf,  0LL);
          if (v565) {
            int v566 = v565;
          }
          else {
            int v566 = DWORD1(__buf[1]);
          }
          int v567 = v566;
          if (!(v566 | HIDWORD(__buf[1]))) {
            int v567 = sub_1812FBF50(106960);
          }
          v568 = (char *)v564;
          int v569 = v567;
          sub_1812F20DC((void *)v13, v568);
          int v570 = v569;
          *(_BYTE *)(v13 + 197) = 0;
        }

        else
        {
          sub_1813070A0(*(void *)(*(void *)(v13 + 32) + 32LL * (int)v561 + 24));
          *(_DWORD *)(v13 + 44) &= ~0x10u;
          int v570 = sub_181276D34(v13, v561, v1490, *((unsigned __int16 *)v12 + 1), v833, v834, v835, v836);
          *(_DWORD *)(v13 + 44) |= 1u;
          uint64_t v11 = v1564;
          *(_WORD *)(v1564 + 268) &= 0xFFFCu;
        }

        if (!v570)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        int v620 = v570;
        sub_1812D6078(v13);
        if (v620 == 7) {
          goto LABEL_8;
        }
        goto LABEL_2640;
      case 0x96u:
        int v373 = sub_1812A1C70(v13, *((_DWORD *)v12 + 1));
        if (v373) {
          goto LABEL_2582;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0x97u:
        uint64_t v571 = sub_181268E88( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 24) + 8LL,  *((unsigned __int8 **)v12 + 2),  0LL);
        if (v571)
        {
          if (*(void *)(v13 + 816) || (int v1043 = *(_DWORD *)(v571 + 44) - 1, (*(_DWORD *)(v571 + 44) = v1043) == 0)) {
            sub_181311A80((void *)v13, (void *)v571);
          }
        }

        goto LABEL_635;
      case 0x98u:
        uint64_t v572 = sub_181268E88( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 24) + 32LL,  *((unsigned __int8 **)v12 + 2),  0LL);
        if (!v572) {
          goto LABEL_635;
        }
        uint64_t v573 = *(void *)(v572 + 24);
        uint64_t v576 = *(void *)(v573 + 16);
        v574 = (void *)(v573 + 16);
        uint64_t v575 = v576;
        if (v576 == v572) {
          goto LABEL_628;
        }
        do
        {
          if (!v575) {
            goto LABEL_629;
          }
          uint64_t v577 = v575;
          uint64_t v575 = *(void *)(v575 + 40);
        }

        while (v575 != v572);
        v574 = (void *)(v577 + 40);
LABEL_628:
        void *v574 = *(void *)(v572 + 40);
LABEL_629:
        sub_18130E1B0((void *)v13, v572);
        goto LABEL_635;
      case 0x99u:
        uint64_t v578 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v579 = (_WORD *)(v578 + 20);
        if ((*(_WORD *)(v578 + 20) & 0x9000) != 0) {
          uint64_t v578 = sub_18130875C(v578);
        }
        else {
          _WORD *v579 = 4;
        }
        _WORD *v579 = 8;
        v837 = (unint64_t *)*((void *)v12 + 2);
        a2.i64[0] = *v837;
        *(void *)uint64_t v578 = *v837;
        v12 += 40;
        continue;
      case 0x9Au:
        v580 = (void *)sub_181268E88( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 24) + 56LL,  *((unsigned __int8 **)v12 + 2),  0LL);
        if (!v580) {
          goto LABEL_21;
        }
        uint64_t v581 = v580[5];
        if (v581 != v580[6]) {
          goto LABEL_634;
        }
        v1044 = (_BYTE *)v580[1];
        uint64_t v1045 = *(void *)(v581 + 24);
        if (v1045)
        {
          int v1046 = *v1044;
          if (*v1044)
          {
            unsigned int v1047 = 0;
            v1048 = v1044 + 1;
            do
            {
              unsigned int v1047 = -1640531535 * (v1047 + byte_1813C6343[v1046]);
              int v1049 = *v1048++;
              int v1046 = v1049;
            }

            while (v1049);
          }

          else
          {
            unsigned int v1047 = 0;
          }

          v1247 = (_DWORD *)(v1045 + 16LL * (v1047 % *(_DWORD *)(v581 + 8)));
          v1246 = (uint64_t *)(v1247 + 2);
        }

        else
        {
          v1246 = (uint64_t *)(v581 + 16);
          v1247 = (_DWORD *)(v581 + 12);
        }

        int v1291 = *v1247;
        if (!v1291) {
          goto LABEL_2268;
        }
        while (1)
        {
          v1246 = (uint64_t *)*v1246;
          v1292 = (_BYTE *)v1246[3];
          for (kuint64_t k = (unsigned __int8 *)v580[1]; ; ++kk)
          {
            uint64_t v1294 = *v1292;
            uint64_t v1295 = *kk;
            if ((_DWORD)v1294 != (_DWORD)v1295) {
              break;
            }
            if (!*v1292) {
              goto LABEL_2269;
            }
LABEL_2263:
            ++v1292;
          }

          if (byte_1813C6343[v1294] == byte_1813C6343[v1295]) {
            goto LABEL_2263;
          }
          if (!--v1291)
          {
LABEL_2268:
            v1246 = &qword_18C550660;
LABEL_2269:
            uint64_t v1296 = v1246[2];
            if (v1296)
            {
              v1299 = *(void **)(v1296 + 88);
              v1297 = (void *)(v1296 + 88);
              v1298 = v1299;
              if (v1299)
              {
                if (v1298 != v580)
                {
                  do
                  {
                    v1300 = v1298;
                    v1298 = (void *)v1298[8];
                    if (!v1298) {
                      goto LABEL_634;
                    }
                  }

                  while (v1298 != v580);
                  v1297 = v1300 + 8;
                }

                void *v1297 = v580[8];
              }
            }

LABEL_1886:
                if (!*(_BYTE *)(v841 + 33))
                {
                  if (bswap32(*(_DWORD *)(*(void *)(*(void *)(v841 + 24) + 80LL) + 64LL))) {
                    sub_18130E688((uint64_t)__buf, "incremental_vacuum enabled with a max rootpage of zero");
                  }
                  goto LABEL_2416;
                }

                if ((int)v838 < 1)
                {
                  unsigned int v1153 = 0;
                }

                else
                {
                  if (v838 < 8)
                  {
                    unint64_t v1152 = 0LL;
                    unsigned int v1153 = 0;
                    goto LABEL_2410;
                  }

                  unint64_t v1152 = v838 & 0x7FFFFFF8;
                  v1362 = (uint32x4_t *)(v582 + 20);
                  uint32x4_t v1363 = 0uLL;
                  uint64_t v1364 = v838 & 0xFFFFFFF8;
                  uint32x4_t v1365 = 0uLL;
                  do
                  {
                    uint32x4_t v1363 = vmaxq_u32(v1363, v1362[-1]);
                    uint32x4_t v1365 = vmaxq_u32(v1365, *v1362);
                    v1362 += 2;
                    v1364 -= 8LL;
                  }

                  while (v1364);
                  unsigned int v1153 = vmaxvq_u32(vmaxq_u32(v1363, v1365));
                  if (v1152 != v838)
                  {
LABEL_2410:
                    unint64_t v1366 = v838 - v1152;
                    v1367 = (unsigned int *)(v582 + 4 * v1152 + 4);
                    do
                    {
                      unsigned int v1369 = *v1367++;
                      unsigned int v1368 = v1369;
                      if (v1153 <= v1369) {
                        unsigned int v1153 = v1368;
                      }
                      --v1366;
                    }

                    while (v1366);
                  }
                }

                if (v1153 != bswap32(*(_DWORD *)(*(void *)(*(void *)(v841 + 24) + 80LL) + 52LL))) {
                  sub_18130E688((uint64_t)__buf, "max rootpage (%u) disagrees with header (%u)");
                }
                goto LABEL_2416;
              }
            }

            else if (v1506)
            {
              goto LABEL_1149;
            }

            *(void *)&__buf[3] = "Freelist: ";
            sub_18130E220( (_DWORD **)__buf,  1,  bswap32(*(_DWORD *)(*(void *)(*(void *)(v841 + 24) + 80LL) + 32LL)),  bswap32(*(_DWORD *)(*(void *)(*(void *)(v841 + 24) + 80LL) + 36LL)));
            *(void *)&__buf[3] = 0LL;
            if (!v583) {
              goto LABEL_2416;
            }
            goto LABEL_1886;
          }
        }

        else
        {
          *(void *)&__buf[1] = 0LL;
        }

        DWORD1(__buf[2]) = 7;
        HIDWORD(__buf[1]) = 0;
        if (!LODWORD(__buf[2])) {
          LODWORD(__buf[2]) = 1;
        }
LABEL_2468:
        sub_1812FC960(*((unint64_t *)&v1578 + 1));
        uint64_t v1386 = *(void *)&__buf[1];
        uint64_t v12 = v1517;
        unint64_t v17 = v1527;
        uint64_t v18 = v1548;
        if (!*(void *)&__buf[1]) {
          goto LABEL_2475;
        }
        v1387 = &off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_2474;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v1386);
        --qword_18C468B10;
        off_18C4653A8(v1386);
        uint64_t v1386 = xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          v1387 = &xmmword_18C465410;
LABEL_2474:
          (*v1387)(v1386);
        }

LABEL_2475:
        uint64_t v1388 = SLODWORD(__buf[2]);
        if (LODWORD(__buf[2]))
        {
          uint64_t v1389 = v1538;
          else {
            v1513 = (void *)v1577;
          }
        }

        else
        {
          char v1390 = BYTE5(v1578);
          uint64_t v1389 = v1538;
          if ((BYTE5(v1578) & 4) != 0)
          {
            if ((void)v1577)
            {
              sub_1812F20DC(*((void **)&v1576 + 1), (void *)v1577);
              char v1390 = BYTE5(v1578);
            }

            BYTE5(v1578) = v1390 & 0xFB;
          }

          v1513 = 0LL;
          DWORD2(v1577) = 0;
          LODWORD(v1578) = 0;
          *(void *)&__int128 v1577 = 0LL;
        }

        uint64_t v11 = v1564;
        if (*(_BYTE *)(v1389 + 17))
        {
          int v1391 = *(_DWORD *)(v1389 + 20) - 1;
          *(_DWORD *)(v1389 + 20) = v1391;
          if (!v1391) {
            sub_1812FDEFC(v1389);
          }
        }

        uint64_t v1392 = v1567 + (v1559 << 6);
        int v1393 = DWORD1(__buf[2]);
        v1394 = (_WORD *)(v1392 + 20);
        if ((*(_WORD *)(v1392 + 20) & 0x9000) != 0) {
          sub_181303888((int *)(v1567 + (v1559 << 6)));
        }
        else {
          _WORD *v1394 = 1;
        }
        if ((_DWORD)v1388)
        {
          if (v1393)
          {
            sqlite3_free(v1513);
            LODWORD(v19) = v1393;
            goto LABEL_2728;
          }

          *(void *)v1502 = *(void *)v1502 - v1388 + 1;
          sub_181269368(v1392, (char *)v1513, -1LL, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
        }

        v1395 = (_BYTE *)(v1567 + (v1559 << 6) + 22);
        if ((*v1394 & 2) != 0)
        {
          int v1035 = v1393;
        }

        else
        {
          _BYTE *v1395 = v1554;
          int v1035 = v1393;
        }

        goto LABEL_1663;
      case 0x9Cu:
        uint64_t v584 = *((int *)v12 + 2);
        unint64_t v585 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v585 + 20) & 0x10) == 0
          && sub_1813071AC(v1567 + ((uint64_t)*((int *)v12 + 1) << 6)))
        {
          goto LABEL_2580;
        }

        sub_1813072B4(*(void *)(v585 + 8), *(void *)(v1567 + (v584 << 6)));
        v12 += 40;
        continue;
      case 0x9Du:
        v362 = (__n128 *)(*(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        v586 = &v362[1].n128_i16[2];
        if ((v362[1].n128_u16[2] & 0x9000) != 0)
        {
          v362 = (__n128 *)sub_18130875C((uint64_t)v362);
          __int16 v587 = *v586;
        }

        else
        {
          __int16 v587 = 4;
          __int16 *v586 = 4;
        }

        uint64_t v361 = *(void *)(*(void *)(v1564 + 352) + 24LL)
             + ((*(int *)(*(void *)(*(void *)(v1564 + 352) + 16LL)
                        + 40LL * *(int *)(*(void *)(v1564 + 352) + 76LL)
                        + 4)
               + (uint64_t)*((int *)v12 + 1)) << 6);
        if ((v587 & 0x9000) != 0)
        {
LABEL_1153:
          sub_18130879C((uint64_t)v362, (__int128 *)v361, 0x4000);
          v12 += 40;
          continue;
        }

        a2 = *(int64x2_t *)v361;
        v362[1].n128_u64[0] = *(void *)(v361 + 16);
        __n128 *v362 = (__n128)a2;
        if ((*(_BYTE *)(v361 + 21) & 0x20) != 0) {
          goto LABEL_21;
        }
        __int16 *v586 = *v586 & 0x8FFF | 0x4000;
        v12 += 40;
        continue;
      case 0x9Eu:
        if ((*(_BYTE *)(v13 + 50) & 8) != 0)
        {
          *(void *)(v13 + 808) += *((int *)v12 + 2);
          v12 += 40;
        }

        else
        {
          uint64_t v588 = *((int *)v12 + 2);
          if (*((_DWORD *)v12 + 1)) {
            *(void *)(v13 + 800) += v588;
          }
          else {
            *(void *)(v1564 + 80) += v588;
          }
          v12 += 40;
        }

        continue;
      case 0x9Fu:
        uint64_t v589 = *(void *)(v1564 + 352);
        unint64_t v590 = v1567;
        if (v589)
        {
          do
          {
            uint64_t v591 = v589;
            uint64_t v589 = *(void *)(v589 + 8);
          }

          while (v589);
          unint64_t v590 = *(void *)(v591 + 24);
        }

        uint64_t v592 = *((int *)v12 + 1);
        unint64_t v593 = v590 + (v592 << 6);
        if (v590)
        {
          __int16 v594 = *(_WORD *)(v593 + 20);
          if ((v594 & 0x24) != 0)
          {
            uint64_t v595 = *(void *)v593;
            goto LABEL_1907;
          }

          if ((v594 & 8) != 0)
          {
            a2.i64[0] = *(void *)v593;
            uint64_t v1159 = 0x7FFFFFFFFFFFFFFFLL;
            else {
              uint64_t v595 = 0x8000000000000000LL;
            }
LABEL_1907:
            *(void *)unint64_t v593 = v595;
            *(_WORD *)(v590 + (v592 << 6) + 20) = *(_WORD *)(v590 + (v592 << 6) + 20) & 0xF240 | 4;
            uint64_t v1160 = *((int *)v12 + 2);
            unint64_t v1161 = v1567 + (v1160 << 6);
            if (v1567)
            {
              __int16 v1162 = *(_WORD *)(v1161 + 20);
              if ((v1162 & 0x24) != 0)
              {
                uint64_t v1163 = *(void *)v1161;
                goto LABEL_1921;
              }

              if ((v1162 & 8) != 0)
              {
                a2.i64[0] = *(void *)v1161;
                uint64_t v1164 = 0x7FFFFFFFFFFFFFFFLL;
                else {
                  uint64_t v1163 = 0x8000000000000000LL;
                }
LABEL_1921:
                *(void *)unint64_t v1161 = v1163;
                *(_WORD *)(v1567 + (v1160 << 6) + 20) = *(_WORD *)(v1567 + (v1160 << 6) + 20) & 0xF240 | 4;
                if (*(void *)v593 < v1163)
                {
                  *(void *)unint64_t v593 = v1163;
                  v12 += 40;
                  continue;
                }

                goto LABEL_21;
              }

              if ((v1162 & 0x12) != 0 && *(void *)(v1567 + (v1160 << 6) + 8))
              {
                uint64_t v1163 = sub_181303DF0(v1567 + (v1160 << 6));
                goto LABEL_1921;
              }
            }

            else
            {
              sub_1812CF36C(89717);
            }

            uint64_t v1163 = 0LL;
            goto LABEL_1921;
          }

          if ((v594 & 0x12) != 0 && *(void *)(v590 + (v592 << 6) + 8))
          {
            uint64_t v595 = sub_181303DF0(v590 + (v592 << 6));
            goto LABEL_1907;
          }
        }

        else
        {
          sub_1812CF36C(89717);
        }

        uint64_t v595 = 0LL;
        goto LABEL_1907;
      case 0xA0u:
        uint64_t v596 = *((int *)v12 + 3);
        uint64_t v597 = *((int *)v12 + 1);
        uint64_t v598 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v598 + 20) & 0x9000) != 0) {
          uint64_t v598 = sub_18130875C(v598);
        }
        else {
          *(_WORD *)(v598 + 20) = 4;
        }
        uint64_t v847 = *(void *)(v1567 + (v597 << 6));
        if (v847 < 1)
        {
          *(void *)uint64_t v598 = -1LL;
          v12 += 40;
        }

        else
        {
          unint64_t v848 = *(void *)(v1567 + (v596 << 6)) & ~(*(uint64_t *)(v1567 + (v596 << 6)) >> 63);
          unint64_t v849 = v847 ^ 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v850 = v848 + v847;
          if (v849 < v848) {
            uint64_t v850 = -1LL;
          }
          *(void *)uint64_t v598 = v850;
          v12 += 40;
        }

        continue;
      case 0xA1u:
      case 0xA2u:
        int v122 = *((unsigned __int16 *)v12 + 1);
        uint64_t v123 = (8 * v122 + 55) & 0xFFFF8;
        uint64_t v124 = sub_1812F2264(v13, v123 + 64);
        if (!v124) {
          goto LABEL_2580;
        }
        uint64_t v125 = v124;
        *(void *)(v124 + 16) = 0LL;
        uint64_t v126 = v124 + v123;
        *(void *)uint64_t v124 = v124 + v123;
        *(_WORD *)(v126 + 20) = 1;
        *(void *)(v126 + 24) = v13;
        *(_DWORD *)(v126 + 32) = 0;
        *(void *)(v124 + 8) = *((void *)v12 + 2);
        uint64_t v11 = v1564;
        *(void *)(v124 + 24) = v1564;
        *(_BYTE *)(v124 + 41) = 0;
        *(_DWORD *)(v124 + 32) = -858993459 * ((unint64_t)(v12 - v1565) >> 3);
        *(_DWORD *)(v124 + 36) = 0;
        *(_BYTE *)(v124 + 40) = v1554;
        *(_BYTE *)(v124 + 42) = v122;
        *((void *)v12 + 2) = v124;
        *(_WORD *)uint64_t v12 = -3677;
LABEL_656:
        uint64_t v599 = *((int *)v12 + 3);
        unint64_t v600 = v1567 + (v599 << 6);
        if (*(void *)(v125 + 16) == v600) {
          goto LABEL_905;
        }
        *(void *)(v125 + 16) = v600;
        uint64_t v601 = *(unsigned __int8 *)(v125 + 42);
        if (!*(_BYTE *)(v125 + 42)) {
          goto LABEL_905;
        }
        unint64_t v602 = *((int *)v12 + 2);
        if (v601 >= 4)
        {
          unint64_t v603 = v601 & 3;
          a2.i64[0] = *((int *)v12 + 2);
          int64x2_t v719 = vdupq_n_s64(v602);
          unint64_t v720 = *(unsigned __int8 *)(v125 + 42);
          uint64_t v721 = v601 & 0xFC;
          do
          {
            a4.i64[0] = v720;
            int64x2_t v722 = vaddq_s64(vdupq_n_s64(v720), (int64x2_t)xmmword_1813CDCC0);
            int64x2_t v723 = vdupq_n_s64(v1567);
            int8x16_t v724 = (int8x16_t)vaddq_s64(v723, vshlq_n_s64(vaddq_s64(v722, v719), 6uLL));
            int8x16_t v725 = (int8x16_t)vaddq_s64( vdupq_lane_s64(vshlq_n_s64(vaddq_s64(a2, a4), 6uLL).i64[0], 0),  vaddq_s64(v723, (int64x2_t)xmmword_1813CDCD0));
            uint64_t v726 = v125 + 8 * v722.i64[0];
            *(int8x16_t *)(v726 + 40) = vextq_s8(v724, v724, 8uLL);
            a4 = (int64x2_t)vextq_s8(v725, v725, 8uLL);
            *(int64x2_t *)(v726 + 24) = a4;
            v720 -= 4LL;
            v721 -= 4LL;
          }

          while (v721);
          if ((v601 & 0xFC) == v601)
          {
LABEL_905:
            ++*(_DWORD *)(v1567 + (v599 << 6) + 16);
            uint64_t v728 = 48LL;
            if (!*((_DWORD *)v12 + 1)) {
              uint64_t v728 = 24LL;
            }
            (*(void (**)(uint64_t))(*(void *)(v125 + 8) + v728))(v125);
            int v729 = *(_DWORD *)(v125 + 36);
            if (!v729) {
              goto LABEL_21;
            }
            int v730 = v1555;
            if (v729 >= 1)
            {
              uint64_t v731 = *(void *)v125;
              if (*(void *)v125)
              {
                int v732 = *(unsigned __int16 *)(v731 + 20);
                if ((~v732 & 0x202) != 0 || *(_BYTE *)(v731 + 22) != 1)
                {
                  if ((v732 & 1) != 0) {
                    LOBYTE(v731) = 0;
                  }
                  else {
                    LOBYTE(v731) = sub_181303998((int *)v731, 1);
                  }
                }

                else
                {
                  uint64_t v731 = *(void *)(v731 + 8);
                }
              }

              sub_181302AB0((uint64_t *)v11, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, v731);
              int v730 = *(_DWORD *)(v125 + 36);
            }

            if (*(_BYTE *)(v125 + 41))
            {
              uint64_t v996 = *((int *)v12 - 9);
              if ((_DWORD)v996)
              {
                uint64_t v997 = v1567 + (v996 << 6);
                if ((*(_WORD *)(v997 + 20) & 0x9000) != 0)
                {
                  sub_1813040AC(v997, 1LL);
                }

                else
                {
                  *(void *)uint64_t v997 = 1LL;
                  *(_WORD *)(v997 + 20) = 4;
                }
              }

              *(_BYTE *)(v125 + 41) = 0;
            }

            uint64_t v998 = *(void *)v125;
            if ((*(_WORD *)(*(void *)v125 + 20LL) & 0x9000) != 0 || *(_DWORD *)(v998 + 32))
            {
              sub_181303838(v998);
              uint64_t v998 = *(void *)v125;
            }

            int v1555 = 0;
            *(_WORD *)(v998 + 20) = 1;
            *(_DWORD *)(v125 + 36) = 0;
            if (!v730) {
              goto LABEL_21;
            }
LABEL_2593:
            LODWORD(v19) = v730;
            goto LABEL_2728;
          }
        }

        else
        {
          unint64_t v603 = *(unsigned __int8 *)(v125 + 42);
        }

        uint64_t v727 = v1567 + ((v603 + v602) << 6) - 64;
        do
        {
          *(void *)(v125 + 40 + 8 * v603) = v727;
          v727 -= 64LL;
          BOOL v1301 = v603-- > 1;
        }

        while (v1301);
        goto LABEL_905;
      case 0xA3u:
        uint64_t v125 = *((void *)v12 + 2);
        uint64_t v11 = v1564;
        goto LABEL_656;
      case 0xA4u:
      case 0xA5u:
        uint64_t v127 = *((int *)v12 + 1);
        unint64_t v128 = v1567 + (v127 << 6);
        uint64_t v129 = *((int *)v12 + 3);
        if ((_DWORD)v129)
        {
          unint64_t v130 = v1567 + (v129 << 6);
          uint64_t v131 = *((void *)v12 + 2);
          memset((char *)&__buf[1] + 8, 0, 32);
          if ((*(_WORD *)(v130 + 20) & 0x9000) != 0) {
            sub_181303888((int *)v130);
          }
          else {
            *(_WORD *)(v130 + 20) = 1;
          }
          *(void *)&__buf[0] = v130;
          *((void *)&__buf[0] + 1) = v131;
          *(void *)&__buf[1] = v1567 + (v127 << 6);
          BYTE8(__buf[2]) = *(_BYTE *)(*(void *)(*(void *)&__buf[1] + 24LL) + 100LL);
          (*(void (**)(_OWORD *))(v131 + 40))(__buf);
          int v695 = DWORD1(__buf[2]);
          unint64_t v128 = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        }

        else
        {
          int v695 = sub_1812BD41C(v1567 + (v127 << 6), *((void *)v12 + 2));
        }

        uint64_t v11 = v1564;
        if (!v695)
        {
          if ((*(_WORD *)(v128 + 20) & 2) != 0)
          {
            int v1555 = 0;
            v12 += 40;
          }

          else
          {
            int v1555 = 0;
            *(_BYTE *)(v128 + 22) = v1554;
            v12 += 40;
          }

          continue;
        }

        int v1434 = v695;
        if (!v128) {
          goto LABEL_2644;
        }
        int v1435 = *(unsigned __int16 *)(v128 + 20);
        if ((~v1435 & 0x202) != 0 || *(_BYTE *)(v128 + 22) != 1)
        {
          if ((v1435 & 1) != 0) {
LABEL_2644:
          }
            LOBYTE(v1436) = 0;
          else {
            LOBYTE(v1436) = sub_181303998((int *)v128, 1);
          }
        }

        else
        {
          uint64_t v1436 = *(void *)(v128 + 8);
        }

        sub_181302AB0((uint64_t *)v1564, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, v1436);
        LODWORD(v19) = v1434;
        goto LABEL_2728;
      case 0xA6u:
        if (*((_DWORD *)v12 + 1))
        {
          *(_WORD *)(v1564 + 268) = *(_WORD *)(v1564 + 268) & 0xFFFC | (*((_WORD *)v12 + 4) + 1) & 3;
          v12 += 40;
          continue;
        }

        uint64_t v851 = *(void *)(v13 + 8);
        if (v851)
        {
          __int16 v852 = (*((_WORD *)v12 + 4) + 1) & 3;
          do
          {
            *(_WORD *)(v851 + 268) = *(_WORD *)(v851 + 268) & 0xFFFC | v852;
            uint64_t v851 = *(void *)(v851 + 16);
          }

          while (v851);
        }

        goto LABEL_21;
      case 0xA7u:
        uint64_t v604 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1)) + 40LL);
        *(_BYTE *)(v604 + 1) |= 0x40u;
        v12 += 40;
        continue;
      case 0xA8u:
        uint64_t v605 = *(void *)(*(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1)) + 40LL);
        *(_BYTE *)(v605 + 1) &= ~0x40u;
        v12 += 40;
        continue;
      case 0xA9u:
        a6 = v12[12];
        if (!v12[12] && (*(_BYTE *)(v13 + 52) & 4) != 0) {
          goto LABEL_21;
        }
        int v606 = sub_18130832C( *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8),  *((_DWORD *)v12 + 2),  a6);
        uint64_t v11 = v1564;
        if (!v606)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        LODWORD(v19) = v606;
        if (v606 == 6)
        {
          uint64_t v1482 = *((void *)v12 + 2);
          v1450 = "database table is locked: %s";
          v1452 = (uint64_t *)v1564;
          int v1451 = v19;
LABEL_2653:
          sub_181302AB0(v1452, v1450, a6, (uint64_t)a7, a8, a9, a10, a11, v1482);
          LODWORD(v19) = v1451;
        }

        goto LABEL_2728;
      case 0xAAu:
        uint64_t v607 = *((void *)v12 + 2);
        uint64_t v608 = *(unsigned int *)(v13 + 564);
        if ((int)v608 < 1 || *(void *)(v13 + 600))
        {
          uint64_t v11 = v1564;
          if (!v607)
          {
            int v1555 = 0;
            v12 += 40;
            continue;
          }

          uint64_t v609 = **(void **)(v607 + 16);
          uint64_t v19 = *(void *)(v609 + 112);
          if (!v19) {
            goto LABEL_1968;
          }
          if ((int)v608 >= 1)
          {
            v610 = *(void **)(v13 + 600);
            do
            {
              if (*v610 == v607)
              {
                LODWORD(v19) = 0;
                goto LABEL_1968;
              }

              ++v610;
              --v608;
            }

            while (v608);
          }

          *(double *)a2.i64 = sub_18130FA18(v13);
          LODWORD(v19) = v611;
          if (!v611)
          {
            LODWORD(v19) = (*(uint64_t (**)(void, double))(v609 + 112))( *(void *)(v607 + 16),  *(double *)a2.i64);
            if (!(_DWORD)v19)
            {
              int v612 = *(_DWORD *)(v13 + 792);
              int v613 = *(_DWORD *)(v13 + 788);
              uint64_t v614 = *(void *)(v13 + 600);
              uint64_t v615 = *(int *)(v13 + 564);
              *(_DWORD *)(v13 + 564) = v615 + 1;
              *(void *)(v614 + 8 * v615) = v607;
              ++*(_DWORD *)(v607 + 24);
              LODWORD(v19) = v613 + v612;
              if ((_DWORD)v19)
              {
                v616 = *(uint64_t (**)(void, void))(v609 + 160);
                if (v616)
                {
                  *(_DWORD *)(v607 + 32) = v19;
                  LODWORD(v19) = v616(*(void *)(v607 + 16), (v19 - 1));
                }

                else
                {
                  LODWORD(v19) = 0;
                }
              }
            }

            goto LABEL_1968;
          }
        }

        else
        {
          LODWORD(v19) = 6;
          uint64_t v11 = v1564;
        }

        if (!v607) {
          goto LABEL_1969;
        }
LABEL_1968:
        uint64_t v1189 = *(void *)(v607 + 16);
        int v1190 = v19;
        sub_181302CE4(v11, v1189);
        LODWORD(v19) = v1190;
LABEL_1969:
        if (!(_DWORD)v19)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        goto LABEL_2728;
      case 0xABu:
        memset(&__buf[2], 0, 32);
        *(void *)&__buf[1] = 0LL;
        __buf[0] = 0u;
        *((void *)&__buf[1] + 1) = v13;
        v617 = (int64x2_t *)(v1567 + ((uint64_t)*((int *)v12 + 2) << 6));
        a2 = *v617;
        *(void *)&__buf[1] = v617[1].i64[0];
        __buf[0] = a2;
        char v618 = BYTE4(__buf[1]);
        int v619 = WORD2(__buf[1]) & 0xEFFF;
        WORD2(__buf[1]) &= ~0x1000u;
        if ((v618 & 0x12) != 0)
        {
          uint64_t v11 = v1564;
          if ((v617[1].i16[2] & 0x2000) != 0)
          {
            int v620 = 0;
          }

          else
          {
            WORD2(__buf[1]) = v619 | 0x4000;
            int v620 = sub_1812D7910((int *)__buf);
            int v619 = WORD2(__buf[1]);
          }
        }

        else
        {
          int v620 = 0;
          uint64_t v11 = v1564;
        }

        if ((~v619 & 0x202) != 0 || BYTE6(__buf[1]) != 1)
        {
          if ((v619 & 1) != 0) {
            goto LABEL_1303;
          }
          a6 = sub_181303998((int *)__buf, 1);
        }

        else
        {
          a6 = *((void *)&__buf[0] + 1);
        }

        if (a6)
        {
          sub_1813084C4(v13, *((_DWORD *)v12 + 1), (char *)a6, (void **)v1490);
          int v620 = v899;
        }

LABEL_1303:
        if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2])) {
          sub_181303838((uint64_t)__buf);
        }
        if (v620) {
          goto LABEL_2640;
        }
        int v1555 = 0;
        v12 += 40;
        continue;
      case 0xACu:
        ++*(_DWORD *)(v13 + 224);
        uint64_t v621 = sub_1812E2C64(v13, *((char **)v12 + 2), *(_BYTE **)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1)));
        if (!v621
          || (uint64_t v622 = v621, *(_BYTE *)(v621 + 63) != 1)
          || (v624 = (void *)(v621 + 80), (v623 = *(void **)(v621 + 80)) == 0LL))
        {
          int v1555 = 0;
          --*(_DWORD *)(v13 + 224);
          v12 += 40;
          continue;
        }

        uint64_t v625 = *(void *)(v621 + 80);
        uint64_t v11 = v1564;
        do
        {
          if (*(int *)(*(void *)(v625 + 16) + 8LL) >= 1)
          {
            --*(_DWORD *)(v13 + 224);
            LODWORD(v19) = 6;
            goto LABEL_2728;
          }

          uint64_t v625 = *(void *)(v625 + 40);
        }

        while (v625);
        v626 = 0LL;
        void *v624 = 0LL;
        do
        {
          uint64_t v629 = *v623;
          v630 = (void *)v623[5];
          if (*v623 == v13)
          {
            uint64_t v628 = 0LL;
            v627 = (void *)(v621 + 80);
            v626 = v623;
          }

          else
          {
            v627 = (void *)(v629 + 608);
            uint64_t v628 = *(void *)(v629 + 608);
          }

          void *v627 = v623;
          v623[5] = v628;
          v623 = v630;
        }

        while (v630);
        uint64_t v1178 = *(void *)v626[1];
        v1179 = *(uint64_t (**)(void))(v1178 + 40);
        if (!v1179) {
          v1179 = *(uint64_t (**)(void))(v1178 + 32);
        }
        ++*(_DWORD *)(v621 + 44);
        LODWORD(v19) = v1179(v626[2]);
        if (!(_DWORD)v19)
        {
          v626[2] = 0LL;
          void *v624 = 0LL;
          v1180 = (void *)*v626;
          int v1181 = *((_DWORD *)v626 + 6) - 1;
          *((_DWORD *)v626 + 6) = v1181;
          if (!v1181)
          {
            uint64_t v1182 = v626[2];
            v1183 = v1180;
            if (v1182)
            {
              (*(void (**)(uint64_t))(*(void *)v1182 + 32LL))(v1182);
              v1183 = (void *)*v626;
            }

            uint64_t v1184 = v626[1];
            int v1185 = *(_DWORD *)(v1184 + 16) - 1;
            *(_DWORD *)(v1184 + 16) = v1185;
            if (!v1185)
            {
              v1186 = *(void (**)(void))(v1184 + 32);
              if (v1186) {
                v1186(*(void *)(v1184 + 24));
              }
              sub_1812F20DC(v1183, (void *)v1184);
            }

            sub_1812F20DC(v1180, v626);
            uint64_t v11 = v1564;
            LODWORD(v19) = 0;
          }
        }

        if (*(void *)(v13 + 816) || (int v1360 = *(_DWORD *)(v622 + 44) - 1, (*(_DWORD *)(v622 + 44) = v1360) == 0))
        {
          v1187 = (void *)v622;
          int v1188 = v19;
          sub_181311A80((void *)v13, v1187);
          LODWORD(v19) = v1188;
        }

        --*(_DWORD *)(v13 + 224);
        if (!(_DWORD)v19)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        goto LABEL_2728;
      case 0xADu:
        *(void *)&__buf[0] = 0LL;
        uint64_t v631 = *(void *)(*((void *)v12 + 2) + 16LL);
        if (!v631)
        {
          LODWORD(v19) = 6;
          uint64_t v11 = v1564;
          goto LABEL_2728;
        }

        uint64_t v632 = *(void *)v631;
        uint64_t v11 = v1564;
        if (!*(void *)v631)
        {
LABEL_2590:
          LODWORD(v19) = 6;
          goto LABEL_2728;
        }

        int v633 = (*(uint64_t (**)(void, _OWORD *))(v632 + 48))( *(void *)(*((void *)v12 + 2) + 16LL),  __buf);
        sub_181302CE4(v1564, v631);
        if (v633) {
          goto LABEL_2585;
        }
        **(void **)&__buf[0] = v631;
        uint64_t v634 = sub_18129B5DC(v1564, *((_DWORD *)v12 + 1), 0, 2);
        if (v634)
        {
          int v1555 = 0;
          *(void *)(v634 + 40) = *(void *)&__buf[0];
          ++*(_DWORD *)(v631 + 8);
          v12 += 40;
          continue;
        }

        (*(void (**)(void))(v632 + 56))(*(void *)&__buf[0]);
        goto LABEL_8;
      case 0xAEu:
        uint64_t v11 = v1564;
        uint64_t v635 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        if (sqlite3_initialize()) {
          goto LABEL_8;
        }
        v636 = (void *)sub_18126F0AC(16LL);
        if (!v636) {
          goto LABEL_8;
        }
        v637 = v636;
        void *v636 = *(void *)(v635 + 40);
        v636[1] = v1567 + ((uint64_t)*((int *)v12 + 3) << 6);
        uint64_t v638 = *(void *)(v1564 + 104);
        uint64_t v639 = *((int *)v12 + 2);
        uint64_t v640 = v638 + (v639 << 6);
        v641 = (_WORD *)(v640 + 20);
        if ((*(_BYTE *)(v640 + 21) & 0x90) != 0) {
          sub_18130875C(v638 + (v639 << 6));
        }
        else {
          _WORD *v641 = 4;
        }
        _WORD *v641 = 1;
        sub_181303838(v638 + (v639 << 6));
        *(void *)uint64_t v640 = "ValueList";
        uint64_t v868 = v638 + (v639 << 6);
        *(void *)(v868 + 8) = v637;
        _WORD *v641 = 6657;
        *(_BYTE *)(v868 + 23) = 112;
        *(_BYTE *)(v868 + 56) = 0;
        *(void *)(v868 + 48) = sub_1813086A8;
        v12 += 40;
        continue;
      case 0xAFu:
        uint64_t v642 = *(void *)(*(void *)(v1564 + 120) + 8LL * *((int *)v12 + 1));
        uint64_t v643 = *((int *)v12 + 3);
        unint64_t v644 = v1567 + (v643 << 6);
        if (*(_BYTE *)(v642 + 2))
        {
          v645 = (_WORD *)(v644 + 20);
          if ((*(_WORD *)(v644 + 20) & 0x9000) != 0)
          {
            sub_181303888((int *)(v1567 + (v643 << 6)));
            v12 += 40;
            continue;
          }

          goto LABEL_2359;
        }

        unsigned int v1552 = v18;
        v853 = **(uint64_t ***)(v642 + 40);
        uint64_t v854 = *v853;
        memset((char *)__buf + 8, 0, 48);
        *(void *)&__buf[0] = v1567 + (v643 << 6);
        BYTE8(__buf[2]) = v1554;
        v855 = (_WORD *)(v644 + 20);
        if ((v12[2] & 1) != 0)
        {
          if ((*(_WORD *)(v644 + 20) & 0x9000) != 0) {
            sub_181303888((int *)v644);
          }
          else {
            _WORD *v855 = 1;
          }
          _WORD *v855 = 1025;
          *(_DWORD *)unint64_t v644 = 0;
        }

        else
        {
          _WORD *v855 = *(_WORD *)(v644 + 20) & 0xF240 | 1;
        }

        int v1263 = (*(uint64_t (**)(void, _OWORD *, void))(v854 + 88))( *(void *)(v642 + 40),  __buf,  *((unsigned int *)v12 + 2));
        sub_181302CE4(v1564, (uint64_t)v853);
        if (SDWORD1(__buf[2]) < 1)
        {
          int v730 = v1263;
        }

        else
        {
          char v1264 = sqlite3_value_text((sqlite3_value *)v644);
          sub_181302AB0((uint64_t *)v1564, "%s", v1265, v1266, v1267, v1268, v1269, v1270, v1264);
          int v730 = DWORD1(__buf[2]);
        }

        uint64_t v18 = v1552;
        v1271 = (_BYTE *)(v1567 + (v643 << 6) + 22);
        if ((*v855 & 2) != 0)
        {
          uint64_t v11 = v1564;
        }

        else
        {
          _BYTE *v1271 = v1554;
          uint64_t v11 = v1564;
        }

        if (!v730)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        goto LABEL_2593;
      case 0xB0u:
        uint64_t v646 = *(void *)(v13 + 48);
        *(void *)(v13 + 48) = v646 | 0x4000000;
        uint64_t v647 = *(void *)(*((void *)v12 + 2) + 16LL);
        uint64_t v648 = *((int *)v12 + 1);
        unint64_t v649 = v1567 + (v648 << 6);
        v650 = (_BYTE *)(v649 + 22);
        if ((*(_WORD *)(v649 + 20) & 2) != 0)
        {
          uint64_t v11 = v1564;
          if (*v650 != 1)
          {
            int v68 = sub_1812C23E8((int *)v649, 1);
            if (v68) {
              goto LABEL_2579;
            }
          }
        }

        else
        {
          _BYTE *v650 = 1;
          uint64_t v11 = v1564;
        }

        int v633 = (*(uint64_t (**)(uint64_t, void))(*(void *)v647 + 152LL))( v647,  *(void *)(v1567 + (v648 << 6) + 8));
        if ((v646 & 0x4000000) == 0) {
          *(void *)(v13 + 48) &= ~0x4000000uLL;
        }
        sub_181302CE4(v11, v647);
        *(_WORD *)(v11 + 268) &= 0xFFFCu;
        if (!v633)
        {
          int v1555 = 0;
          v12 += 40;
          continue;
        }

        goto LABEL_2585;
      case 0xB1u:
        uint64_t v651 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v651 + 20) & 0x9000) != 0) {
          uint64_t v651 = sub_18130875C(v651);
        }
        else {
          *(_WORD *)(v651 + 20) = 4;
        }
        *(void *)uint64_t v651 = *(unsigned int *)(*(void *)(*(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8)
                                                      + 8LL)
                                          + 64LL);
        v12 += 40;
        continue;
      case 0xB2u:
        uint64_t v652 = *(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v652 + 20) & 0x9000) != 0) {
          sub_18130875C(*(void *)(v1564 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        }
        else {
          *(_WORD *)(v652 + 20) = 4;
        }
        uint64_t v856 = *(void *)(*(void *)(v13 + 32) + 32LL * *((int *)v12 + 1) + 8);
        unsigned int v857 = *((_DWORD *)v12 + 3);
        if (v857)
        {
          if (*(_DWORD *)(*(void *)(v856 + 8) + 64LL) <= v857) {
            unsigned int v858 = *((_DWORD *)v12 + 3);
          }
          else {
            unsigned int v858 = *(_DWORD *)(*(void *)(v856 + 8) + 64LL);
          }
        }

        else
        {
          unsigned int v858 = 0;
        }

        if (*(_BYTE *)(v856 + 17))
        {
          ++*(_DWORD *)(v856 + 20);
          if (!*(_BYTE *)(v856 + 18)) {
            sub_1812FDE20(v856);
          }
        }

        uint64_t v865 = **(void **)(v856 + 8);
        if (v858) {
          *(_DWORD *)(v865 + 188) = v858;
        }
        else {
          unsigned int v858 = *(_DWORD *)(v865 + 188);
        }
        if (*(_BYTE *)(v856 + 17))
        {
          int v866 = *(_DWORD *)(v856 + 20) - 1;
          *(_DWORD *)(v856 + 20) = v866;
          if (!v866) {
            sub_1812FDEFC(v856);
          }
        }

        *(void *)uint64_t v652 = v858;
        v12 += 40;
        continue;
      case 0xB3u:
        unint64_t v653 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v653 + 20) &= ~0x800u;
        v12 += 40;
        continue;
      case 0xB4u:
        uint64_t v654 = *((int *)v12 + 4);
        if ((int)v654 < 1)
        {
          unint64_t v655 = 0LL;
LABEL_1176:
          unint64_t v859 = v1567 + ((uint64_t)*((int *)v12 + 1) << 6);
          unint64_t v860 = v655 % (8LL * *(int *)(v859 + 16));
          *(_BYTE *)(*(void *)(v859 + 8) + (v860 >> 3)) |= 1 << (v860 & 7);
          v12 += 40;
          continue;
        }

        unint64_t v655 = 0LL;
        uint64_t v656 = *((int *)v12 + 3);
        uint64_t v657 = v656 + v654;
        unint64_t v658 = v1567 + (v656 << 6);
        break;
      default:
        goto LABEL_21;
    }

    break;
  }

  while (1)
  {
    __int16 v660 = *(_WORD *)(v658 + 20);
    if ((v660 & 0x24) != 0)
    {
      uint64_t v661 = *(void *)v658;
    }

    else
    {
      if ((v660 & 8) == 0)
      {
        uint64_t v659 = v660 & 0x12;
        if ((_DWORD)v659) {
          v655 += v659 + 4093;
        }
        goto LABEL_719;
      }

      a2.i64[0] = *(void *)v658;
      if (*(double *)v658 >= -9.22337204e18)
      {
        else {
          uint64_t v661 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }

      else
      {
        uint64_t v661 = 0x8000000000000000LL;
      }
    }

    v655 += v661;
LABEL_719:
    v658 += 64LL;
    if (++v656 >= v657) {
      goto LABEL_1176;
    }
  }

uint64_t sub_18129B5DC(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 104);
  if (a2 >= 1) {
    v7 += (*(int *)(a1 + 36) - (uint64_t)a2) << 6;
  }
  uint64_t v8 = 8LL * a3 + 120;
  int v9 = 296;
  if (a4) {
    int v9 = 0;
  }
  int v10 = v8 + v9;
  uint64_t v11 = a2;
  uint64_t v12 = *(unsigned __int8 **)(*(void *)(a1 + 120) + 8LL * a2);
  if (v12)
  {
    sub_181301B60((void **)a1, v12);
    *(void *)(*(void *)(a1 + 120) + 8 * v11) = 0LL;
  }

  int v13 = *(_DWORD *)(v7 + 32);
  if (v13 >= v10)
  {
    uint64_t result = *(void *)(v7 + 40);
  }

  else
  {
    if (v13 >= 1) {
      sub_1812F20DC(*(void **)(v7 + 24), *(void **)(v7 + 40));
    }
    uint64_t v14 = *(void *)(v7 + 24);
    if (v14) {
      uint64_t result = sub_1812F2264(v14, v10);
    }
    else {
      uint64_t result = sub_18126F0AC(v10);
    }
    *(void *)(v7 + 40) = result;
    *(void *)(v7 + 8) = result;
    if (!result)
    {
      *(_DWORD *)(v7 + 32) = 0;
      return result;
    }

    *(_DWORD *)(v7 + 32) = v10;
  }

  *(void *)(*(void *)(a1 + 120) + 8 * v11) = result;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_BYTE *)uint64_t result = a4;
  *(_WORD *)(result + 64) = a3;
  *(void *)(result + 80) = result + 4LL * a3 + 112;
  if (!a4)
  {
    unint64_t v16 = (_OWORD *)(*(void *)(v7 + 8) + v8);
    *(void *)(result + 40) = v16;
    *unint64_t v16 = 0uLL;
    v16[1] = 0uLL;
  }

  return result;
}

uint64_t sub_18129B700(unsigned __int8 *a1)
{
  if ((char)a1[84] < 0)
  {
    unsigned int v7 = *((_DWORD *)a1 + 20);
    if (!v7)
    {
LABEL_17:
      *a1 = 1;
      return 16LL;
    }

    unsigned int v8 = *a1;
    if (v8 < 3) {
      goto LABEL_28;
    }
    if (v8 == 4) {
      return *((unsigned int *)a1 + 1);
    }
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      uint64_t v11 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v10);
        --qword_18C468B10;
        off_18C4653A8(v10);
        uint64_t v10 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_27;
        }
        uint64_t v11 = &xmmword_18C465410;
      }

      (*v11)(v10);
    }

uint64_t sub_18129B974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = (unsigned __int8 *)(*(void *)(a1 + 80) + *(unsigned __int8 *)(a1 + 9));
  if (sub_1812FD430(a1, *v3))
  {
    uint64_t v4 = 79043LL;
    return sub_1812FD54C(v4, a1);
  }

  uint64_t v5 = *(unsigned int *)(v2 + 52);
  *(_WORD *)(a1 + 26) = v5 - 1;
  *(_BYTE *)(a1 + 12) = 0;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 10);
  *(_WORD *)(a1 + 18) = *(unsigned __int8 *)(a1 + 9) + (_WORD)v6 + 8;
  uint64_t v7 = *(void *)(a1 + 80);
  *(void *)(a1 + 88) = v7 + v5;
  *(void *)(a1 + 96) = &v3[v6 + 8];
  *(void *)(a1 + 104) = v7 + v6;
  unsigned int v8 = __rev16(*(unsigned __int16 *)(v3 + 3));
  *(_WORD *)(a1 + 24) = v8;
  if (((int)v5 - 8) / 6u < v8)
  {
    uint64_t v4 = 79057LL;
    return sub_1812FD54C(v4, a1);
  }

  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)a1 = 1;
  if ((*(_BYTE *)(*(void *)(v2 + 8) + 50LL) & 0x20) != 0) {
    return sub_1812FD65C(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18129BA78(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(char *)(a1 + 84);
  if (v2 >= 19) {
    return sub_1812FBF50(82202);
  }
  *(_WORD *)(a1 + 70) = 0;
  *(_BYTE *)(a1 + 1) &= 0xF9u;
  *(_WORD *)(a1 + 2 * v2 + 88) = *(_WORD *)(a1 + 86);
  uint64_t v5 = (uint64_t *)(a1 + 136);
  *(void *)(a1 + 8 * v2 + 144) = *(void *)(a1 + 136);
  *(_WORD *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 84) = v2 + 1;
  uint64_t result = sub_181308FB8(*(_DWORD **)(a1 + 32), a2, (uint64_t *)(a1 + 136));
  if (!(_DWORD)result)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = *(void *)(v6 + 112);
    if ((*(_WORD *)(v7 + 52) & 0x20) != 0)
    {
      uint64_t v8 = *(void *)(v7 + 40);
      --*(_DWORD *)(v8 + 152);
      *(void *)(v7 + 32) = *(void *)(v8 + 168);
      *(void *)(v8 + 168) = v7;
      (*(void (**)(void, void, void))(**(void **)(v8 + 72) + 144LL))( *(void *)(v8 + 72),  *(void *)(v8 + 200) * (*(_DWORD *)(v7 + 48) - 1),  *(void *)(v7 + 8));
    }

    else
    {
      sub_1812F9F44(v7);
    }

    uint64_t result = sub_1812FBF50(82216);
  }

  char v9 = *(_BYTE *)(a1 + 84) - 1;
  *(_BYTE *)(a1 + 84) = v9;
  *(void *)(a1 + 136) = *(void *)(a1 + 8LL * v9 + 144);
  return result;
}

uint64_t sub_18129BBA4(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  uint64_t v4 = a2;
  if ((char)*a2 < 0)
  {
    uint64_t v4 = a2 + 1;
    int v5 = a2[1] & 0x7F | ((v3 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v3 = v5;
      goto LABEL_6;
    }

    uint64_t v4 = a2 + 2;
    unsigned int v3 = a2[2] & 0x7F | (v5 << 7);
    if ((a2[2] & 0x80) != 0)
    {
      uint64_t v4 = a2 + 3;
      unsigned int v3 = a2[3] & 0x7F | (v3 << 7);
      if ((a2[3] & 0x80) != 0)
      {
        uint64_t v4 = a2 + 4;
        int v5 = a2[4] & 0x7F | (v3 << 7);
        if ((a2[4] & 0x80) == 0) {
          goto LABEL_3;
        }
        uint64_t v4 = a2 + 5;
        unsigned int v3 = a2[5] & 0x7F | (v5 << 7);
        if ((a2[5] & 0x80) != 0)
        {
          uint64_t v4 = a2 + 6;
          int v5 = a2[6] & 0x7F | (v3 << 7);
          if ((a2[6] & 0x80) == 0) {
            goto LABEL_3;
          }
          uint64_t v4 = a2 + 7;
          unsigned int v3 = a2[7] & 0x7F | (v5 << 7);
          if ((a2[7] & 0x80) != 0)
          {
            uint64_t v4 = a2 + 8;
            int v5 = a2[8] & 0x7F | (v3 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }

uint64_t sub_18129BD74(char *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 < 0)
  {
    uint64_t v4 = a1[1];
    if (a1[1] < 0)
    {
      int v5 = a1[2];
      unsigned int v6 = v5 & 0x7F | (*a1 << 14) & 0x1FFFFF;
      if (v5 < 0)
      {
        int v7 = (a1[3] | ((_DWORD)v4 << 14)) & 0x1FC07F;
        if (a1[3] < 0)
        {
          unsigned int v8 = a1[4];
          int v9 = v8 | (v6 << 14);
          if (a1[4] < 0)
          {
            unsigned int v10 = v7 | (v6 << 7);
            int v11 = a1[5] | (v7 << 14);
            if (a1[5] < 0)
            {
              int v12 = a1[6] | (v9 << 14);
              if (a1[6] < 0)
              {
                int v13 = v12 & 0x1FC07F;
                int v14 = a1[7] | (v11 << 14);
                if (a1[7] < 0)
                {
                  unint64_t v15 = a1[8] | (v13 << 15) | (v14 << 8) & 0x1FC07F00u | ((unint64_t)((v8 >> 3) & 0xF | (16 * v10)) << 32);
                  uint64_t result = 9LL;
                }

                else
                {
                  unint64_t v15 = v14 & 0xF01FC07F | (v13 << 7) | ((unint64_t)(v10 >> 4) << 32);
                  uint64_t result = 8LL;
                }

                *a2 = v15;
              }

              else
              {
                uint64_t result = 7LL;
                *a2 = v12 & 0xF01FC07F | (v11 << 7) & 0xFE03F80 | ((unint64_t)(v10 >> 11) << 32);
              }
            }

            else
            {
              uint64_t result = 6LL;
              *a2 = v11 | (v9 << 7) & 0xFE03F80u | ((unint64_t)(v10 >> 18) << 32);
            }
          }

          else
          {
            uint64_t result = 5LL;
            *a2 = v9 | (v7 << 7) | ((unint64_t)(v6 >> 18) << 32);
          }
        }

        else
        {
          uint64_t result = 4LL;
          *a2 = v7 | (v6 << 7);
        }
      }

      else
      {
        uint64_t result = 3LL;
        *a2 = v6 | ((v4 & 0x7F) << 7);
      }
    }

    else
    {
      uint64_t result = 2LL;
      *a2 = v4 | ((v2 & 0x7F) << 7);
    }
  }

  else
  {
    uint64_t result = 1LL;
    *a2 = v2;
  }

  return result;
}

char *sub_18129BF0C(char *result, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
    case 11:
      *(_WORD *)(a3 + 20) = 1;
      return result;
    case 1:
      unint64_t v5 = *result;
      goto LABEL_12;
    case 2:
      unint64_t v5 = result[1] | (unint64_t)((uint64_t)*result << 8);
      goto LABEL_12;
    case 3:
      unint64_t v6 = ((uint64_t)*result << 16) | ((unint64_t)result[1] << 8);
      uint64_t v7 = result[2];
      goto LABEL_10;
    case 4:
      unint64_t v6 = ((uint64_t)*result << 24) | ((unint64_t)result[1] << 16) | ((unint64_t)result[2] << 8);
      uint64_t v7 = result[3];
LABEL_10:
      unint64_t v5 = v6 | v7;
      goto LABEL_12;
    case 5:
      unint64_t v5 = bswap32(*(_DWORD *)(result + 2)) | ((unint64_t)(result[1] | (*result << 8)) << 32);
      goto LABEL_12;
    case 6:
    case 7:
      int v3 = (*result << 24) | (result[1] << 16);
      unint64_t v4 = ((unint64_t)result[4] << 24) | ((unint64_t)result[5] << 16) | ((unint64_t)(v3 | (bswap32(*((unsigned __int16 *)result + 1)) >> 16)) << 32) | result[7] | ((unint64_t)result[6] << 8);
      if (a2 == 6)
      {
        *(void *)a3 = v4;
LABEL_13:
        *(_WORD *)(a3 + 20) = 4;
      }

      else
      {
        *(void *)a3 = v4;
        uint64_t v8 = ~v3 & 0x7FF00000;
        if ((v4 & 0xFFFFFFFFFFFFFLL) != 0 && v8 == 0) {
          __int16 v10 = 1;
        }
        else {
          __int16 v10 = 8;
        }
        *(_WORD *)(a3 + 20) = v10;
      }

      return result;
    case 8:
    case 9:
      unint64_t v5 = (a2 - 8);
LABEL_12:
      *(void *)a3 = v5;
      goto LABEL_13;
    case 10:
      *(_WORD *)(a3 + 20) = 1025;
      *(_DWORD *)(a3 + 16) = 0;
      *(_DWORD *)a3 = 0;
      return result;
    default:
      *(void *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 16) = (a2 - 12) >> 1;
      *(_WORD *)(a3 + 20) = word_1813C6DF0[a2 & 1];
      return result;
  }

const unsigned __int8 *__cdecl sqlite3_value_text(const unsigned __int8 *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || result[22] != 1)
    {
      if ((v1 & 1) != 0) {
        return 0LL;
      }
      else {
        return (const unsigned __int8 *)sub_181303998((int *)result, 1);
      }
    }

    else
    {
      return (const unsigned __int8 *)*((void *)result + 1);
    }
  }

  return result;
}

uint64_t sub_18129C0B0(uint64_t a1, int a2, int a3)
{
  if (*(int *)(a1 + 32) >= 32)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    *(void *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 20) &= 0x2Du;
  }

  else
  {
    if (sub_18128FAF0(a1, 32, 0))
    {
      *(_BYTE *)(a1 + 22) = 0;
      return 7LL;
    }

    uint64_t v7 = *(void **)(a1 + 8);
  }

  sub_181303C44(v7, a1);
  *(_BYTE *)(a1 + 22) = 1;
  __int16 v8 = *(_WORD *)(a1 + 20) | 0x202;
  if (a3) {
    __int16 v8 = *(_WORD *)(a1 + 20) & 0xFDD1 | 0x202;
  }
  *(_WORD *)(a1 + 20) = v8;
  if (a2 != 1) {
    sub_1812C23E8((int *)a1, a2);
  }
  return 0LL;
}

void sub_18129C170( void **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10 = a1[43];
  if (!v10)
  {
LABEL_47:
    if (!a2) {
      return;
    }
    goto LABEL_48;
  }

  int v11 = *((_DWORD *)v10 + 12);
  if ((v11 & 4) != 0)
  {
    sub_1812DC47C((uint64_t)a1, "table %s has more than one primary key", a3, a4, a5, a6, a7, a8, *v10);
    goto LABEL_47;
  }

  int v12 = a5;
  int v13 = a4;
  uint64_t v14 = a3;
  *((_DWORD *)v10 + 12) = v11 | 4;
  if (!a2)
  {
    uint64_t v18 = *((__int16 *)v10 + 27) - 1LL;
    uint64_t v17 = v10[1] + 16 * v18;
    __int16 v29 = *(_WORD *)(v17 + 14);
    *(_WORD *)(v17 + 14) = v29 | 1;
    if ((v29 & 0x60) != 0) {
      sub_1812DC47C((uint64_t)a1, "generated columns cannot be part of the PRIMARY KEY", a3, a4, a5, a6, a7, a8, v37);
    }
LABEL_33:
    if (!v17 || v12 == 1 || (*(_BYTE *)(v17 + 8) & 0xF0) != 0x40) {
      goto LABEL_45;
    }
    if (a2 && *((unsigned __int8 *)a1 + 302) >= 2u)
    {
      for (uint64_t i = *((void *)a2 + 1); i; uint64_t i = *(void *)(i + 16))
      {
        if ((*(_BYTE *)(i + 5) & 0x20) == 0) {
          break;
        }
      }

      uint64_t v31 = a1[51];
      if (v31)
      {
        while (*v31 != i)
        {
          uint64_t v31 = (void *)v31[3];
          if (!v31) {
            goto LABEL_52;
          }
        }

        *uint64_t v31 = (char *)v10 + 52;
      }
    }

LABEL_48:
    sub_181311F48(*a1, a2);
    return;
  }

  uint64_t v15 = *a2;
  int v38 = a5;
  int v39 = a4;
  unsigned int v40 = a3;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  LOWORD(v18) = -1;
  while (2)
  {
    for (uint64_t j = *(unsigned __int8 **)&a2[6 * v16 + 2]; j; uint64_t j = (unsigned __int8 *)*((void *)j + 2))
    {
      if ((j[5] & 0x20) == 0) {
        break;
      }
    }

    int v20 = *j;
    int v21 = j;
    if (v20 == 117) {
      goto LABEL_14;
    }
    if (v20 == 113)
    {
      int v21 = (_BYTE *)*((void *)j + 2);
      if (*v21 != 117) {
        goto LABEL_7;
      }
LABEL_14:
      *int v21 = 59;
      int v20 = *j;
    }

    if (v20 != 59) {
      goto LABEL_7;
    }
    if (*((__int16 *)v10 + 27) < 1)
    {
      LOWORD(v18) = 0;
      goto LABEL_7;
    }

    uint64_t v18 = 0LL;
    unint64_t v22 = (_BYTE *)*((void *)j + 1);
    uint64_t v23 = v10[1];
    while (2)
    {
      int v24 = *(unsigned __int8 **)(v23 + 16 * v18);
      for (uint64_t k = v22; ; ++k)
      {
        uint64_t v26 = *k;
        uint64_t v27 = *v24;
        if ((_DWORD)v26 != (_DWORD)v27) {
          break;
        }
        if (!*k)
        {
          uint64_t v17 = v23 + 16 * v18;
          __int16 v28 = *(_WORD *)(v17 + 14);
          *(_WORD *)(v17 + 14) = v28 | 1;
          if ((v28 & 0x60) != 0) {
            sub_1812DC47C( (uint64_t)a1,  "generated columns cannot be part of the PRIMARY KEY",  a3,  a4,  a5,  a6,  a7,  a8,  v37);
          }
          goto LABEL_7;
        }

  *(void *)(a1 + 96) = 0LL;
LABEL_49:
  sub_1812C08E0(*(void *)(a1 + 64));
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 19) && *(_BYTE *)(a1 + 16))
    {
      if (!a3 || !**(void **)(a1 + 72)) {
        goto LABEL_107;
      }
      uint64_t v27 = *(uint64_t **)(a1 + 336);
      LODWORD(v28) = *((_DWORD *)v27 + 8);
      if ((v28 & 0x80000000) != 0)
      {
        __int16 v28 = -1024LL * (int)v28 / (*((int *)v27 + 11) + (uint64_t)*((int *)v27 + 10));
        if (v28 >= 1000000000) {
          LODWORD(v28) = 1000000000;
        }
      }

      __int16 v29 = *v27;
      if (*v27)
      {
        __int16 v30 = 0LL;
        do
        {
          __int16 v29 = *(void *)(v29 + 64);
          v30 += 100LL;
        }

        while (v29);
      }

      else
      {
        __int16 v30 = 0LL;
      }

      if (!(_DWORD)v28 || (int)(v30 / (int)v28) < 25)
      {
LABEL_107:
        int v21 = *(uint64_t **)(a1 + 336);
        for (uint64_t i = *v21; i; uint64_t i = *(void *)(i + 64))
          *(_WORD *)(i + 52) &= 0xFFF3u;
        v21[2] = v21[1];
LABEL_110:
        sub_18126C6E4(v21, *(_DWORD *)(a1 + 32));
        uint64_t v19 = *(void *)(a1 + 344);
        if (v19) {
          goto LABEL_51;
        }
        goto LABEL_111;
      }
    }

    int v21 = *(uint64_t **)(a1 + 336);
    unint64_t v22 = *v21;
    if (!*v21) {
      goto LABEL_110;
    }
    while (1)
    {
      uint64_t v23 = *(void *)(v22 + 24);
      int v24 = *(void *)(v22 + 72);
      if (*(void *)(v23 + 16) == v22)
      {
        *(void *)(v23 + 16) = v24;
        uint64_t v25 = *(void *)(v22 + 64);
        if (v25)
        {
LABEL_71:
          *(void *)(v25 + 72) = v24;
          int v24 = *(void *)(v22 + 72);
          if (!v24)
          {
            *(void *)uint64_t v23 = v25;
            goto LABEL_76;
          }

    *(_DWORD *)(v21 + 84) = v22;
  }

  if ((_DWORD)v8) {
    goto LABEL_4;
  }
LABEL_49:
  uint64_t v27 = sub_18126C43C(a1, &v49, 0xFFFFFFFFLL);
  __int16 v10 = (_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  if ((_DWORD)v27
    || (__int16 v28 = (int8x8_t *)(*(void *)(a1 + 328) + 4LL),
        uint64_t v27 = sub_1813C2140(*(void *)(a1 + 80), v28, *(_DWORD *)(*(void *)a1 + 8LL) + 1),
        (_DWORD)v27)
    || *(unsigned __int8 *)(a1 + 21) - 4 <= 0xFFFFFFFC
    && ((__int16 v29 = *(void *)(a1 + 72), *(void *)v29)
     && ((uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v29 + 80LL))(v29, 21LL, 0LL),
          (_DWORD)v27 != 12)
       ? (__int16 v30 = (_DWORD)v27 == 0)
       : (__int16 v30 = 1),
         !v30)
     || !*(_BYTE *)(a1 + 11)
     && *(_BYTE *)(a1 + 14)
     && (uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40LL))(*(void *)(a1 + 72)), (_DWORD)v27)))
  {
    __int16 v8 = v27;
    goto LABEL_5;
  }

  __int16 v8 = sub_1812A1380(a1, v28->i8[0] != 0, 0);
  if ((_DWORD)v8 || !v28->i8[0] || !v50) {
    goto LABEL_5;
  }
  **(_DWORD **)(a1 + 328) = 0;
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = 2LL * *(int *)(*(void *)a1 + 4LL);
  __int16 v33 = (void *)sub_18126F0AC(v32);
  if (!v33)
  {
    __int16 v8 = 7LL;
    goto LABEL_5;
  }

  int v34 = v33;
  bzero(v33, v32);
  __int16 v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, void *, void, void))(v31 + 40))( v31,  v28,  v34,  *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u,  0LL);
  if (!(_DWORD)v8)
  {
    BOOL v35 = *(int *)(v31 + 4);
    __int16 v8 = (*(uint64_t (**)(void *, uint64_t *))(*(void *)v34 + 48LL))(v34, &v55);
    if (!(_DWORD)v8)
    {
      uint64_t v43 = *(int *)(v31 + 8) + 1LL;
      uint64_t v36 = (_DWORD *)sub_18126F0AC(v55 + v43 + 6);
      if (v36)
      {
        uint64_t v44 = v36;
        *uint64_t v36 = 0;
        __s1 = (char *)v55;
        BOOL v48 = (const char *)(v36 + 1);
        __int16 v8 = (*(uint64_t (**)(void *))(*(void *)v34 + 16LL))(v34);
        if (!(_DWORD)v8)
        {
          v48[v55] = 0;
          v48[v55 + 1] = 0;
          if (v55 < 1)
          {
LABEL_88:
            if (*(void *)v34)
            {
              (*(void (**)(void *))(*(void *)v34 + 8LL))(v34);
              *(void *)int v34 = 0LL;
            }

            unsigned int v40 = *(uint64_t (**)(uint64_t, int8x8_t *, void))(v31 + 48);
            if (v40) {
              __int16 v8 = v40(v31, v28, 0LL);
            }
            else {
              __int16 v8 = 0LL;
            }
          }

          else
          {
            uint64_t v45 = (uint64_t)v34 + v35;
            char v37 = v48;
            __s1a = (int8x8_t *)&v48[(void)__s1 + 2];
            while (1)
            {
              __int16 v8 = (*(uint64_t (**)(uint64_t, const char *, void, int *))(v31 + 56))(v31, v37, 0LL, &v54);
              if ((_DWORD)v8) {
                break;
              }
              if (v54)
              {
                int v38 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, void))(v31 + 40))( v31,  v37,  v45,  *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u,  0LL);
                if ((_DWORD)v38)
                {
                  int v39 = v38;
LABEL_94:
                  __int16 v8 = v39;
                  break;
                }

                int v39 = sub_1813C2140(v45, __s1a, v43);
                if (*(void *)v45)
                {
                  (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
                  *(void *)uint64_t v45 = 0LL;
                }

                if ((_DWORD)v39) {
                  goto LABEL_94;
                }
              }

              v37 += (strlen(v37) & 0x3FFFFFFF) + 1;
              if (v37 - v48 >= v55) {
                goto LABEL_88;
              }
            }
          }
        }

        int v41 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v44);
          --qword_18C468B10;
          off_18C4653A8(v44);
          uint64_t v44 = (_DWORD *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_101;
          }
          int v41 = &xmmword_18C465410;
        }

        (*v41)(v44);
      }

      else
      {
        __int16 v8 = 7LL;
      }
    }
  }

    if ((_DWORD)v5) {
      break;
    }
    int v3 = *(void *)v3;
  }

  while (v3);
  __int16 v28 = v34;
  a3 = v32;
  if (!v32 || (_DWORD)v5)
  {
    if (!v34) {
      return v5;
    }
    __int16 v29 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v28);
      --qword_18C468B10;
      off_18C4653A8(v28);
      __int16 v28 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return v5;
      }
      __int16 v29 = &xmmword_18C465410;
    }

    (*v29)(v28);
    return v5;
  }

  a2 = v31;
LABEL_55:
  *a3 = v28;
  unint64_t v5 = 0LL;
  if (a2) {
    *a2 = v35;
  }
  return v5;
}

      ++v30;
    }

    if (*v30) {
      goto LABEL_48;
    }
    if ((v22 & 0x80000000) == 0)
    {
      int v34 = *(unsigned __int16 *)(*(void *)(v13 + 8) + 2 * v14);
      if (*(__int16 *)(*(void *)(v13 + 8) + 2 * v14) < 0)
      {
        if ((_DWORD)v34 != 0xFFFF) {
          break;
        }
        goto LABEL_27;
      }

      if ((*(_BYTE *)(*(void *)(*(void *)(v13 + 24) + 8LL) + 16 * v34 + 8) & 0xF) != 0)
      {
LABEL_27:
        continue;
      }
    }

    break;
  }

  uint64_t v25 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v26 = -1LL;
  uint64_t v27 = *(_BYTE *)(*(void *)(a1 + 8) + 68LL);
  __int16 v28 = *(_BYTE *)(a1 + 64);
  do
  {
    uint64_t v31 = a1 + 120 * (v25 - 1);
    uint64_t v32 = *(void *)(v31 + 952);
    __int16 v33 = *(void *)(a1 + 8);
    int v34 = *(unsigned __int8 *)(v32 + 16);
    if ((*(_BYTE *)(v33 + 104LL * *(unsigned __int8 *)(v32 + 16) + 68) & 0x18) == 8
      && ((*(_WORD *)(a1 + 60) & 0x100) != 0 || (*(_BYTE *)(v32 + 49) & 0x10) != 0))
    {
      __int16 v29 = *(void *)(v32 + 8);
      if ((v29 & v6) == 0)
      {
        BOOL v35 = *(_DWORD *)(a1 + 124);
        if (v35 < 1)
        {
LABEL_69:
          if (v28 != v25)
          {
            memmove((void *)(v31 + 856), (const void *)(a1 + 120 * v25 + 856), 120 * (v28 - (int)v25));
            __int16 v28 = *(_BYTE *)(a1 + 64);
          }

          v26 &= ~v29;
          *(_BYTE *)(a1 + 64) = --v28;
        }

        else
        {
          uint64_t v36 = *(void *)(a1 + 136);
          char v37 = v36 + 56LL * v35;
          int v38 = (_DWORD *)(v33 + 104LL * v34 + 72);
          int v39 = (void *)v36;
          while (((v39[6] & v29) == 0 || (*(_BYTE *)(*v39 + 4LL) & 1) != 0 && *(_DWORD *)(*v39 + 56LL) == *v38)
               && ((v27 & 0x40) == 0 || (*(_BYTE *)(*v39 + 4LL) & 2) == 0 || *(_DWORD *)(*v39 + 56LL) != *v38))
          {
            v39 += 7;
            if ((unint64_t)v39 >= v37)
            {
              do
              {
                if ((*(void *)(v36 + 48) & v29) != 0) {
                  *(_WORD *)(v36 + 18) |= 4u;
                }
                v36 += 56LL;
              }

              while (v36 < v37);
              goto LABEL_69;
            }
          }
        }
      }
    }
  }

  while (v25-- > 2);
  return v26;
}

      unint64_t v22 = *(_WORD *)(v12 + 20);
      if ((v22 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
      {
        int v20 = *(_DWORD *)(v12 + 16);
        goto LABEL_39;
      }

      if ((v22 & 0x10) != 0)
      {
        int v20 = *(_DWORD *)(v12 + 16);
        if ((*(_WORD *)(v12 + 20) & 0x400) != 0) {
          v20 += *(_DWORD *)v12;
        }
LABEL_39:
        if (v14)
        {
          if (v20 <= 0)
          {
            if (v20) {
              sub_1812CF36C(32737);
            }
          }

          else
          {
            int v21 = *(unsigned int *)(v8 + 24);
            if ((v21 + v20) >= *(_DWORD *)(v8 + 16))
            {
              sub_1812D3A10(v8, v14, v20);
            }

            else
            {
              *(_DWORD *)(v8 + 24) = v21 + v20;
              memcpy((void *)(*(void *)(v8 + 8) + v21), v14, v20);
            }
          }
        }

        else
        {
          int v20 = 0;
        }

        uint64_t v23 = (const float *)(v8 + 36);
        int v24 = *(void *)(v8 + 40);
        if (v20 == *(_DWORD *)(v8 + 36))
        {
          if (!v24) {
            goto LABEL_78;
          }
        }

        else if (!v24)
        {
          __int16 v30 = *(int *)(v8 + 32);
          if (!sqlite3_initialize())
          {
            uint64_t v26 = sub_18126F0AC(4 * v30 + 4);
            if (v26)
            {
              int v38 = *(_DWORD *)(v8 + 32);
              int v39 = (v38 - 1);
              if (v38 > 1)
              {
                if (v38 >= 9)
                {
                  if (v26 >= v8 + 40 || (unint64_t)v23 >= v26 + 4 * v39)
                  {
                    int v41 = 0LL;
                    unsigned int v40 = v39 & 0xFFFFFFF8;
                    int v42 = vld1q_dup_f32(v23);
                    do
                    {
                      uint64_t v43 = (float32x4_t *)(v26 + v41);
                      *uint64_t v43 = v42;
                      v43[1] = v42;
                      v41 += 32LL;
                    }

                    while (((4 * v39) & 0x3FFFFFFE0LL) != v41);
                    if (v40 == v39) {
                      goto LABEL_68;
                    }
                  }

                  else
                  {
                    unsigned int v40 = 0LL;
                  }
                }

                else
                {
                  unsigned int v40 = 0LL;
                }

                do
                  *(float *)(v26 + 4 * v40++) = *v23;
                while (v39 != v40);
              }

    ++v31;
  }

  if (byte_1813C6343[v33] == byte_1813C6343[v34]) {
    goto LABEL_48;
  }
  BOOL v35 = "rebuild";
  for (uint64_t m = v24; ; ++m)
  {
    char v37 = *(unsigned __int8 *)v35;
    int v38 = *m;
    if ((_DWORD)v37 == (_DWORD)v38)
    {
      if (*v35) {
        goto LABEL_53;
      }
      if (*(_DWORD *)(v30 + 64) == 1)
      {
        sub_18139B6CC((uint64_t)a1, "'rebuild' may not be used with a contentless fts5 table");
        goto LABEL_163;
      }

      uint64_t v87 = a1[5];
      uint64_t v328 = 0uLL;
      uint64_t v88 = *(void *)v87;
      v335[0] = 0LL;
      int v332 = v87;
      uint64_t v333 = 0LL;
      uint64_t v89 = sub_18139CA80(v87);
      if ((_DWORD)v89 || (uint64_t v89 = sub_18139AA30(v87, 1), (_DWORD)v89))
      {
        uint64_t v15 = v89;
        sqlite3_reset(0LL);
        goto LABEL_234;
      }

      uint64_t v93 = sub_18138AC28((uint64_t *)v87, 10, v335, 0LL);
      if ((_DWORD)v93)
      {
        uint64_t v15 = v93;
        sqlite3_reset(v335[0]);
        goto LABEL_234;
      }

      unint64_t v102 = 0;
LABEL_237:
      uint64_t v103 = v335[0];
      int v104 = sqlite3_step(v335[0]);
      uint64_t v105 = v104 == 100;
      if (v104 != 100)
      {
        uint64_t v15 = 0LL;
        goto LABEL_314;
      }

      uint64_t v106 = sqlite3_column_int64(v103, 0);
      uint64_t v107 = sub_18139CB98(*(uint64_t **)(v87 + 8), 0, v106);
      LODWORD(v333) = 0;
      if ((_DWORD)v107)
      {
        uint64_t v15 = v107;
LABEL_313:
        ++*(void *)(v87 + 24);
        uint64_t v105 = 1;
LABEL_314:
        int v145 = v328;
        if ((void)v328)
        {
          int v146 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_320;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v145);
          --qword_18C468B10;
          off_18C4653A8(v145);
          int v145 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v146 = &xmmword_18C465410;
LABEL_320:
            (*v146)(v145);
          }
        }

        uint64_t v147 = sqlite3_reset(v335[0]);
        if (v105) {
          goto LABEL_234;
        }
        uint64_t v15 = v147;
        if ((_DWORD)v147) {
          goto LABEL_234;
        }
        uint64_t v71 = sub_18139D0B0((void *)v87);
LABEL_194:
        uint64_t v15 = v71;
        goto LABEL_234;
      }

      __int16 v108 = 0;
      uint64_t v109 = 0;
      while (1)
      {
        if (v108 >= *(_DWORD *)(v88 + 24))
        {
          *((void *)&v328 + 1) = __PAIR64__(v102, v109);
          ++*(void *)(v87 + 24);
          __int16 v121 = sub_18139CE94((uint64_t *)v87, v106, (uint64_t)&v328);
          if ((_DWORD)v121)
          {
            uint64_t v15 = v121;
            uint64_t v105 = 1;
            goto LABEL_314;
          }

          goto LABEL_237;
        }

        uint64_t v15 = 0LL;
        HIDWORD(v333) = 0;
        if (!*(_BYTE *)(*(void *)(v88 + 40) + v108))
        {
          uint64_t v112 = v335[0];
          uint64_t v15 = (uint64_t)sqlite3_column_text(v335[0], v108 + 1);
          uint64_t v113 = sqlite3_column_bytes(v112, v333 + 1);
          if (v15) {
            uint64_t v15 = (*(uint64_t (**)(void, sqlite3_int64 *, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(void *)(v88 + 112) + 16LL))( *(void *)(v88 + 104),  &v332,  4LL,  v15,  v113,  sub_18139CD28);
          }
        }

        uint64_t v114 = SHIDWORD(v333);
        uint64_t v115 = v109 + 9;
        if (v102) {
          LODWORD(v116) = v102;
        }
        else {
          LODWORD(v116) = 64;
        }
        int v116 = (int)v116;
        do
        {
          uint64_t v117 = v116;
          v116 *= 2LL;
        }

        while (v117 < v115);
        uint64_t v118 = v328;
        if (!sqlite3_initialize())
        {
          unint64_t v119 = sub_18127D33C(v118, v117);
          if (v119)
          {
            *(void *)&uint64_t v328 = v119;
            unint64_t v102 = v117;
            goto LABEL_257;
          }
        }

        uint64_t v15 = 7LL;
LABEL_243:
        uint64_t v111 = v333;
        *(void *)(*(void *)(v87 + 32) + 8LL * (int)v333) += SHIDWORD(v333);
        __int16 v108 = v111 + 1;
        LODWORD(v333) = v111 + 1;
        if ((_DWORD)v15) {
          goto LABEL_313;
        }
      }

      unint64_t v119 = v328;
LABEL_257:
      uint64_t v120 = (int8x8_t *)(v119 + (int)v109);
      if (v114 <= 0x7F)
      {
        v120->i8[0] = v114;
        unint64_t v110 = 1;
      }

      else if (v114 >> 14)
      {
        unint64_t v110 = sub_181308E00(v120, v114);
      }

      else
      {
        v120->i8[0] = (v114 >> 7) | 0x80;
        v120->i8[1] = v114 & 0x7F;
        unint64_t v110 = 2;
      }

      v109 += v110;
      goto LABEL_243;
    }

    if (byte_1813C6343[v37] != byte_1813C6343[v38]) {
      break;
    }
LABEL_53:
    ++v35;
  }

  int v39 = "optimize";
  for (uint64_t n = v24; ; ++n)
  {
    int v41 = *(unsigned __int8 *)v39;
    int v42 = *n;
    if ((_DWORD)v41 != (_DWORD)v42) {
      break;
    }
    if (!*v39)
    {
      int v79 = *(void *)(a1[5] + 8LL);
      sub_18139D2FC((_DWORD *)v79);
      int v80 = sub_18138B020(v79);
      uint64_t v81 = *(_DWORD **)(v79 + 144);
      if (v81)
      {
        sub_18138A584(v81);
        *(void *)(v79 + 144) = 0LL;
      }

      if (!v80) {
        goto LABEL_233;
      }
      uint64_t v82 = sub_1813A2C24(v79, v80);
      *(void *)&uint64_t v328 = v82;
      sub_18138A584(v80);
      if (!v82) {
        goto LABEL_233;
      }
      uint64_t v83 = 0LL;
      uint64_t v84 = -1;
      do
      {
        int v85 = *(_DWORD *)&v82[v83 + 36];
        v83 += 16LL;
        ++v84;
      }

      while (!v85);
      if (!*(_DWORD *)(v79 + 60))
      {
        do
        {
          uint64_t v82 = (char *)v328;
          LODWORD(v332) = 1000;
          sub_1813A0DD0(v79, (int **)&v328, v84, (int *)&v332);
        }

        while (!*(_DWORD *)(v79 + 60));
        uint64_t v82 = (char *)v328;
      }

  if ((a1[10] & 0x10) == 0) {
    goto LABEL_63;
  }
  int v21 = a1[12];
  if (v21)
  {
    unint64_t v22 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_55:
      (*v22)(v21);
      goto LABEL_56;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v21);
    --qword_18C468B10;
    off_18C4653A8(v21);
    int v21 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unint64_t v22 = &xmmword_18C465410;
      goto LABEL_55;
    }
  }

  if (v36 <= 1) {
    __int16 v10 = 1LL;
  }
  else {
    __int16 v10 = v36;
  }
  sub_1813AFB8C(v21);
  return v10;
}

uint64_t sub_18129C4D8(int a1)
{
  return (a1 + 7) & 0xFFFFFFF8;
}

void *sub_18129C4E4(void *ptr, int a2)
{
  unint64_t v4 = (malloc_zone_t *)qword_18C5506A8;
  if (!qword_18C5506A8) {
    unint64_t v4 = malloc_default_zone();
  }
  unint64_t v5 = malloc_zone_realloc(v4, ptr, a2);
  if (!v5)
  {
    if (qword_18C5506A8) {
      int v6 = (*(uint64_t (**)(uint64_t, void *))(qword_18C5506A8 + 16))(qword_18C5506A8, ptr);
    }
    else {
      int v6 = malloc_size(ptr);
    }
    sqlite3_log(7, "failed memory resize %u to %u bytes", v6, a2);
  }

  return v5;
}

void sub_18129C570( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 344);
  if (v11)
  {
    int v12 = a4;
    int v13 = (unsigned __int8 *)a3;
    __int16 v14 = 4;
    if (*(_BYTE *)(v10 + 197))
    {
      if (*(_BYTE *)(v10 + 196) == 1) {
        __int16 v14 = 4;
      }
      else {
        __int16 v14 = 5;
      }
    }

    uint64_t v15 = *(void *)(v11 + 8);
    uint64_t v16 = *(__int16 *)(v11 + 54) - 1LL;
    uint64_t v17 = (uint64_t *)(v15 + 16 * v16);
    WORD2(v35) = v14;
    *((void *)&v33 + 1) = sub_18129C78C;
    *(void *)&__int128 v34 = sub_18131C570;
    DWORD2(v35) = 0;
    if (a2)
    {
      sub_18131C57C((uint64_t)&v33, (uint64_t)a2);
      if (!WORD2(v35))
      {
        uint64_t v32 = *v17;
        uint64_t v18 = "default value of column [%s] is not constant";
        goto LABEL_20;
      }
    }

    if ((*(_WORD *)(v15 + 16 * v16 + 14) & 0x60) != 0)
    {
      uint64_t v18 = "cannot use DEFAULT on a generated column";
LABEL_20:
      sub_1812DC47C(a1, v18, a3, a4, a5, a6, a7, a8, v32);
      goto LABEL_21;
    }

    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v33 = 0u;
    LOBYTE(v33) = -75;
    int v19 = v12 - (_DWORD)v13;
    do
    {
      int v20 = v13;
      int v21 = v19;
      int v22 = *v13++;
      --v19;
    }

    while ((byte_1813C6558[v22] & 1) != 0);
    uint64_t v23 = v21;
    uint64_t v24 = ((uint64_t)v21 << 32) + 0x100000000LL;
    uint64_t v25 = v23 - 2;
    do
    {
      char v26 = byte_1813C6558[v13[v25]];
      v24 -= 0x100000000LL;
      --v25;
    }

    while ((v26 & 1) != 0);
    size_t v27 = v24 >> 32;
    __int16 v28 = (_BYTE *)sub_1812F2264(v10, (v24 >> 32) + 1);
    __int16 v29 = v28;
    if (v28)
    {
      memcpy(v28, v20, v27);
      v29[v27] = 0;
    }

    *((void *)&v33 + 1) = v29;
    *(void *)&__int128 v34 = a2;
    DWORD1(v33) = 0x2000;
    __int16 v30 = (unsigned __int8 *)sub_18129C928(v10, (unsigned __int8 *)&v33, 1LL, 0LL);
    if (*((void *)&v33 + 1)) {
      sub_1812F20DC((void *)v10, *((void **)&v33 + 1));
    }
    sub_18131F8B4((uint64_t *)a1, v11, (uint64_t)v17, v30);
  }

uint64_t sub_18129C78C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 36);
  if (v2 == 2 && (*(_BYTE *)(a2 + 4) & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v3 = 0LL;
  switch(*(_BYTE *)a2)
  {
    case 0x8D:
    case 0xB0:
    case 0xB3:
      goto LABEL_27;
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xAA:
    case 0xAB:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB1:
    case 0xB2:
      return v3;
    case 0x9C:
      if (v2 == 4) {
        goto LABEL_27;
      }
      if (v2 != 5) {
        return 0LL;
      }
      *(_BYTE *)a2 = 121;
      return 0LL;
    case 0xA7:
    case 0xA8:
    case 0xA9:
      goto LABEL_4;
    case 0xAC:
      unsigned int v12 = *(_DWORD *)(a2 + 4);
      int v13 = (v12 >> 20) & 1;
      if (v2 > 3) {
        int v13 = 1;
      }
      if (v13 != 1 || (v12 & 0x1000000) != 0) {
        goto LABEL_27;
      }
      if (v2 != 5) {
        return 0LL;
      }
      *(_DWORD *)(a2 + 4) = v12 | 0x40000000;
      return 0LL;
    default:
      if (*(_BYTE *)a2 != 59) {
        return v3;
      }
      int v5 = *(_DWORD *)(a2 + 4);
      if ((v5 & 0x4000800) != 0) {
        goto LABEL_4;
      }
      int v6 = *(_BYTE **)(a2 + 8);
      uint64_t v7 = "true";
      __int16 v8 = v6;
      break;
  }

  while (1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 != (_DWORD)v10) {
      break;
    }
    if (!*v8)
    {
      int v11 = 0x10000000;
      goto LABEL_37;
    }

unsigned int *sub_18129C928(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a4)
  {
    __int16 v8 = (unsigned int *)*a4;
    int v9 = 0x8000000;
    if (!*a4) {
      return v8;
    }
  }

  else
  {
    int v10 = sub_18129CC6C(a2, a3);
    __int16 v8 = (unsigned int *)sub_1812F2264(a1, v10);
    int v9 = 0;
    if (!v8) {
      return v8;
    }
  }

  if (!(_DWORD)a3 || *a2 == 178 || (a2[7] & 1) != 0)
  {
    int v11 = 80;
    int v12 = *((_DWORD *)a2 + 1);
    if ((v12 & 0x800) != 0) {
      goto LABEL_26;
    }
  }

  else
  {
    int v11 = 16428;
    if (*((void *)a2 + 2))
    {
      int v12 = *((_DWORD *)a2 + 1);
      if ((v12 & 0x800) != 0) {
        goto LABEL_26;
      }
    }

    else
    {
      if (*((void *)a2 + 4)) {
        int v11 = 16428;
      }
      else {
        int v11 = 65552;
      }
      int v12 = *((_DWORD *)a2 + 1);
      if ((v12 & 0x800) != 0) {
        goto LABEL_26;
      }
    }
  }

  int v13 = (const char *)*((void *)a2 + 1);
  if (v13)
  {
    unsigned int v14 = (strlen(v13) & 0x3FFFFFFF) + 1;
    size_t v15 = v11 & 0x7C;
    if (!(_DWORD)a3) {
      goto LABEL_14;
    }
LABEL_27:
    memcpy(v8, a2, v15);
    goto LABEL_28;
  }

uint64_t sub_18129CC6C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  for (int i = 0; v3; i += v8 + v7)
  {
    if (!(_DWORD)a2 || *v3 == 178 || (v3[7] & 1) != 0)
    {
      int v5 = 80;
      if ((v3[5] & 8) == 0) {
        goto LABEL_9;
      }
    }

    else
    {
      if (!*((void *)v3 + 2))
      {
        if (*((void *)v3 + 4)) {
          int v5 = 44;
        }
        else {
          int v5 = 16;
        }
        if ((v3[5] & 8) != 0) {
          goto LABEL_11;
        }
LABEL_9:
        int v6 = (const char *)*((void *)v3 + 1);
        if (v6) {
          int v5 = (v5 | 1) + (strlen(v6) & 0x3FFFFFFF);
        }
        goto LABEL_11;
      }

      int v5 = 44;
      if ((v3[5] & 8) == 0) {
        goto LABEL_9;
      }
    }

void *sub_18129CD4C(uint64_t a1, void *a2, unsigned int a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a1 && *(void *)(a1 + 520) > (unint64_t)a2)
  {
    if (*(void *)(a1 + 496) <= (unint64_t)a2)
    {
      int v5 = 128;
      goto LABEL_7;
    }

    if (*(void *)(a1 + 504) <= (unint64_t)a2)
    {
      int v5 = *(unsigned __int16 *)(a1 + 438);
      goto LABEL_7;
    }
  }

  int v5 = off_18C4653B8(a2);
LABEL_7:
  int v6 = (void *)sub_1812F2264(a1, v5);
  int v7 = v6;
  if (v6)
  {
    *int v6 = *a2;
    if (*(int *)a2 >= 1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v26 = 0LL;
      int v10 = 0;
      while (1)
      {
        unsigned int v14 = &v7[v8];
        size_t v15 = &a2[v8];
        unsigned int v16 = (unsigned __int8 *)a2[v8 + 1];
        if (!v16) {
          break;
        }
        uint64_t v17 = sub_18129C928(a1, a2[v8 + 1], a3, 0LL);
        v14[1] = v17;
        if (*v16 != 178 || v17 == 0) {
          goto LABEL_21;
        }
        uint64_t v19 = v17;
        uint64_t v20 = *(void *)(v17 + 24);
        if (v20)
        {
          uint64_t v26 = *((void *)v16 + 3);
          *(void *)(v17 + 16) = v20;
          uint64_t v9 = v20;
          int v21 = (const char *)v15[2];
          if (!v21) {
            goto LABEL_10;
          }
        }

        else
        {
          uint64_t v24 = *((void *)v16 + 2);
          if (v24 != v26)
          {
            if (v24) {
              uint64_t v9 = sub_18129C928(a1, v24, a3, 0LL);
            }
            else {
              uint64_t v9 = 0LL;
            }
            *(void *)(v19 + 24) = v9;
            uint64_t v26 = v24;
          }

          *(void *)(v19 + 16) = v9;
          int v21 = (const char *)v15[2];
          if (!v21)
          {
LABEL_10:
            int v11 = 0LL;
            goto LABEL_11;
          }
        }

uint64_t sub_18129CF68(uint64_t a1)
{
  *(_WORD *)(a1 + 70) = 0;
  *(_BYTE *)(a1 + 1) &= 0xF9u;
  if (*(_BYTE *)a1) {
    return sub_181309CB0((unsigned __int8 *)a1);
  }
  uint64_t v2 = *(void *)(a1 + 136);
  __int16 v3 = *(_WORD *)(a1 + 86);
  *(_WORD *)(a1 + 86) = v3 + 1;
  if (*(unsigned __int16 *)(v2 + 24) <= (unsigned __int16)(v3 + 1))
  {
    *(_WORD *)(a1 + 86) = v3;
    return sub_181309CB0((unsigned __int8 *)a1);
  }

  if (!*(_BYTE *)(v2 + 8))
  {
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 136);
      if (*(_BYTE *)(v5 + 8)) {
        break;
      }
      uint64_t result = sub_18129BA78( a1,  bswap32(*(_DWORD *)(*(void *)(v5 + 80)
      if ((_DWORD)result) {
        return result;
      }
    }
  }

  return 0LL;
}

void *sub_18129D020(uint64_t *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 100);
  int v6 = *(unsigned __int8 *)(v4 + 197);
  uint64_t result = sub_18130D3EC(v4, *(unsigned __int8 *)(v4 + 100), a2, v6);
  if (!v6 && (!result || !result[3])) {
    return (void *)sub_181311FC8((uint64_t)a1, v5, (uint64_t)result, a2, v8, v9, v10, v11);
  }
  return result;
}

void *sub_18129D098( void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned __int8 a11)
{
  uint64_t v11 = (unsigned __int8 *)a8;
  int v12 = (void *)a5;
  uint64_t v14 = (uint64_t)*a1;
  __dst = 0LL;
  if (*((_DWORD *)a1 + 12)) {
    goto LABEL_30;
  }
  if (a11 != 2 && *((_BYTE *)a1 + 302) == 1) {
    goto LABEL_30;
  }
  int v18 = a6;
  if (!*(_BYTE *)(v14 + 197))
  {
    int v26 = sub_181276C70(v14, (char **)a1 + 1, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v26)
    {
      uint64_t v27 = 0LL;
      *((_DWORD *)a1 + 6) = v26;
      ++*((_DWORD *)a1 + 12);
      goto LABEL_31;
    }

    if (*(_BYTE *)(v14 + 111)) {
      *(_DWORD *)(v14 + 44) |= 0x10u;
    }
  }

  if (v12)
  {
    uint64_t v21 = *(unsigned int *)v12;
    if ((int)v21 >= 1)
    {
      unint64_t v22 = 0LL;
      uint64_t v23 = 24 * v21;
      while ((*(_WORD *)((_BYTE *)&v12[v22 / 8 + 3] + 1) & 0x20) == 0)
      {
        v22 += 24LL;
        if (v23 == v22) {
          goto LABEL_12;
        }
      }

      int v35 = LOBYTE(v12[v22 / 8 + 3]);
      BOOL v36 = v35 == 3 || v35 == 0;
      __int128 v37 = "LAST";
      if (v36) {
        __int128 v37 = "FIRST";
      }
      char v227 = (char)v37;
      int v25 = "unsupported use of NULLS %s";
      goto LABEL_29;
    }
  }

LABEL_188:
      int v134 = v119;
      char v135 = (const char *)*((void *)v133 + 1);
      unint64_t v136 = v120;
      if (v135)
      {
        char v137 = (const char *)*((void *)v133 + 1);
        int v138 = strlen(v137);
        char v135 = v137;
        uint64_t v139 = v138 & 0x3FFFFFFF;
      }

      else
      {
        uint64_t v139 = 0LL;
      }

      uint64_t v143 = v139 + 1;
      int v142 = (char *)__dst;
      memcpy(__dst, v135, v139 + 1);
      __dst = &v142[v143];
      unsigned int v118 = v230;
      goto LABEL_195;
    }

    uint64_t v131 = *((unsigned int *)j + 12);
    if ((v131 & 0x80000000) != 0)
    {
      LODWORD(v131) = *((__int16 *)v28 + 26);
    }

    else
    {
      uint64_t v132 = v28[1];
      if ((*(_BYTE *)(v132 + 16 * v131 + 8) & 0xF) == 0)
      {
        *(_WORD *)(v113 + 99) &= ~8u;
        uint64_t v132 = v28[1];
      }

      if ((*(_WORD *)(v132 + 16 * v131 + 14) & 0x20) != 0) {
        *(_WORD *)(v113 + 99) |= 0xC00u;
      }
    }

    *(_WORD *)(*(void *)(v113 + 8) + 2 * v120) = v131;
    int v133 = *v119;
    if (**v119 == 113) {
      goto LABEL_188;
    }
    if ((v131 & 0x80000000) != 0) {
      goto LABEL_192;
    }
    uint64_t v140 = v28[1];
    __int16 v141 = *(_WORD *)(v140 + 16LL * v131 + 14);
    if ((v141 & 0x200) == 0) {
      goto LABEL_192;
    }
    uint64_t v144 = *(void *)(v140 + 16LL * v131) - 1LL;
    int v134 = v119;
    unint64_t v136 = v120;
    if ((v141 & 4) != 0)
    {
    }

    int v142 = (char *)(v144 + 1);
LABEL_195:
    if (!v142) {
      int v142 = "BINARY";
    }
    if (!*(_BYTE *)(v14 + 197) && !sub_18129D020((uint64_t *)a1, v142))
    {
      uint64_t v11 = 0LL;
      int v12 = v232;
      uint64_t v113 = v237;
      goto LABEL_156;
    }

    *(void *)(*(void *)(v237 + 64) + 8 * v136) = v142;
    unint64_t v121 = v136;
    int v122 = v134;
    uint64_t v113 = v237;
    char v123 = *((_BYTE *)v122 + 16);
    if (v118 <= 3) {
      char v123 = 0;
    }
    *(_BYTE *)(*(void *)(v237 + 56) + v121) = v123;
    unint64_t v120 = v121 + 1;
    unint64_t v119 = v122 + 3;
  }

  while (v120 < *(unsigned __int16 *)(v237 + 94));
  unsigned int v147 = v120;
LABEL_209:
  int v12 = v232;
  if (v34)
  {
    unsigned int v233 = v147;
    unsigned int v148 = *(unsigned __int16 *)(v34 + 94);
    if (*(_WORD *)(v34 + 94))
    {
      unint64_t v149 = 0LL;
      do
      {
        if (sub_1813203C8(v113, *(unsigned __int16 *)(v113 + 94), v34, v149))
        {
          --*(_WORD *)(v113 + 96);
        }

        else
        {
          *(_WORD *)(*(void *)(v113 + 8) + 2LL * (int)v233) = *(_WORD *)(*(void *)(v34 + 8) + 2 * v149);
          *(void *)(*(void *)(v113 + 64) + 8LL * (int)v233) = *(void *)(*(void *)(v34 + 64) + 8 * v149);
          *(_BYTE *)(*(void *)(v113 + 56) + (int)v233++) = *(_BYTE *)(*(void *)(v34 + 56) + v149);
          unsigned int v148 = *(unsigned __int16 *)(v34 + 94);
        }

        ++v149;
      }

      while (v149 < v148);
    }
  }

  else
  {
    *(_WORD *)(*(void *)(v113 + 8) + 2LL * v147) = -1;
    *(void *)(*(void *)(v113 + 64) + 8LL * v147) = "BINARY";
  }

  sub_18130DAAC(v113);
  if (!a1[43]) {
    sub_18131F994(v113);
  }
  sub_181320560(v113);
  if (a4)
  {
    uint64_t v157 = *(unsigned __int16 *)(v113 + 96);
    if ((int)v157 >= *((__int16 *)v28 + 27))
    {
      __int16 v158 = *(_WORD *)(v113 + 99);
      *(_WORD *)(v113 + 99) = v158 | 0x20;
      int v159 = *((__int16 *)v28 + 27);
      if (v159 >= 1)
      {
        int v160 = 0;
        while (1)
        {
          if (v160 != *((__int16 *)v28 + 26))
          {
            if (!(_DWORD)v157) {
              break;
            }
            uint64_t v161 = 0LL;
            while (*(unsigned __int16 *)(*(void *)(v113 + 8) + 2 * v161) != (unsigned __int16)v160)
            {
              if (v157 == ++v161) {
                goto LABEL_231;
              }
            }

            if ((v161 & 0x8000) != 0) {
              break;
            }
          }

          if (++v160 == v159) {
            goto LABEL_232;
          }
        }

  pStmt = 0LL;
  uint64_t v66 = sub_1813636A8((uint64_t *)a1, 27, &pStmt, 0LL);
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    goto LABEL_346;
  }

  uint64_t v70 = pStmt;
  uint64_t v71 = *(int *)(a1 + 520);
  if (!sub_1812B2390((uint64_t)pStmt, 0))
  {
    uint64_t v72 = *((void *)v70 + 16);
    if ((*(_WORD *)(v72 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v72, v71);
    }

    else
    {
      *(void *)uint64_t v72 = v71;
      *(_WORD *)(v72 + 20) = 4;
    }

    uint64_t v82 = *(void *)(*(void *)v70 + 24LL);
    if (v82) {
      xmmword_18C465410(v82);
    }
  }

  uint64_t v83 = *(int *)(a1 + 488);
  if (!sub_1812B2390((uint64_t)v70, 1u))
  {
    uint64_t v84 = *((void *)v70 + 16);
    if ((*(_WORD *)(v84 + 84) & 0x9000) != 0)
    {
      sub_1813040AC(v84 + 64, v83);
    }

    else
    {
      *(void *)(v84 + 64) = v83;
      *(_WORD *)(v84 + 84) = 4;
    }

    uint64_t v85 = *(void *)(*(void *)v70 + 24LL);
    if (v85) {
      xmmword_18C465410(v85);
    }
  }

  uint64_t v68 = 0LL;
  while (1)
  {
    int v86 = pStmt;
    if (sqlite3_step(pStmt) != 100) {
      break;
    }
    uint64_t v87 = sqlite3_column_int(v86, 0);
    uint64_t v88 = *(_DWORD *)(a1 + 488);
    if (v88 < 1)
    {
      uint64_t v67 = 0;
    }

    else
    {
      uint64_t v89 = v87;
      uint64_t v90 = 0LL;
      uint64_t v67 = 0;
      uint64_t v91 = v87;
      do
      {
        if (v67)
        {
          int v92 = 0LL;
        }

        else
        {
          v220[1] = 0LL;
          uint64_t v222 = 0;
          v220[0] = 0LL;
          uint64_t v221 = 19;
          *(_OWORD *)uint64_t v214 = 0u;
          uint64_t v215 = 0u;
          uint64_t v216 = 0u;
          unint64_t v217 = 0u;
          uint64_t v218 = 0u;
          uint64_t v219 = 0LL;
          int v93 = sub_181362778(a1, v89, v90, 0xFFFFFFFE, 0LL, 0LL, 0, 1, (uint64_t)v214);
          if (v93
            || (*(void *)&v215 = v220, (int v93 = sub_181363C00(a1, (uint64_t *)v214, 0LL, 0)) != 0)
            || (int v93 = sub_1813644CC(a1, (uint64_t)v214), v93 != 100))
          {
            uint64_t v67 = v93;
            int v92 = 0LL;
          }

          else
          {
            int v92 = 0LL;
            do
            {
              uint64_t v95 = *((void *)&v218 + 1);
              uint64_t v96 = (int)v219;
              uint64_t v212 = 0LL;
              uint64_t v213 = 0LL;
              uint64_t v97 = sub_181363B00(*((char **)&v218 + 1), &v213);
              if (v97 < (int)v96)
              {
                uint64_t v98 = 0LL;
                uint64_t v99 = v95 + v96;
                uint64_t v100 = (char *)(v95 + v97);
                do
                {
                  uint64_t v211 = 0LL;
                  v100 += (int)sub_181363B00(v100, &v211);
                  if ((unint64_t)v100 < v99)
                  {
                    if (v211 > 1)
                    {
                      uint64_t v98 = v98 + v211 - 2;
                      unint64_t v101 = v218;
                      char v102 = v213
                           + v91
                           + 8 * v213
                           + v90
                           + 8 * (v213 + v91 + 8 * v213)
                           + (int)v212
                           + 8 * (v213 + v91 + 8 * v213 + v90 + 8 * (v213 + v91 + 8 * v213));
                      uint64_t v103 = v102 + (int)v98 + 8 * v102;
                      if ((int)v218 >= 1)
                      {
                        int v104 = (char *)*((void *)&v217 + 1);
                        do
                        {
                          uint64_t v105 = *v104++;
                          uint64_t v103 = 9 * v103 + v105;
                          --v101;
                        }

                        while (v101);
                      }

                      v92 ^= v103;
                    }

                    else
                    {
                      uint64_t v212 = 0LL;
                      if (v211)
                      {
                        uint64_t v98 = 0LL;
                        v100 += (int)sub_181363B00(v100, &v212);
                      }

                      else
                      {
                        v100 += (int)sub_181363B00(v100, &v211);
                        uint64_t v98 = 0LL;
                        if (*(_BYTE *)(a1 + 463)) {
                          int v106 = v213 - v211;
                        }
                        else {
                          int v106 = v211 + v213;
                        }
                        uint64_t v213 = v106;
                      }
                    }
                  }
                }

                while ((unint64_t)v100 < v99);
              }

              uint64_t v94 = sub_1813644CC(a1, (uint64_t)v214);
            }

            while (v94 == 100);
            uint64_t v67 = v94;
          }

          sub_181362408((uint64_t)v214);
          uint64_t v88 = *(_DWORD *)(a1 + 488);
        }

        v68 ^= v92;
        ++v90;
      }

      while (v90 < v88);
    }

    if (v67)
    {
      sqlite3_reset(pStmt);
      uint64_t v69 = 0LL;
      goto LABEL_346;
    }
  }

  int v107 = sqlite3_reset(v86);
  if (v107)
  {
    uint64_t v67 = v107;
    uint64_t v69 = 0LL;
    goto LABEL_346;
  }

  __int16 v108 = **(void **)(a1 + 72);
  v220[0] = 0LL;
  int v109 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s", *(const char **)(a1 + 440));
  if (v109)
  {
    __int16 v111 = v109;
    uint64_t v67 = sub_18126DFE0(*(void *)(a1 + 24), v109, 0xFFFFFFFFLL, 128LL, 0LL, v220, 0LL, v110);
    size_t v112 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
    uint64_t v205 = v108;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v111);
      --qword_18C468B10;
      off_18C4653A8(v111);
      __int16 v111 = (unsigned __int8 *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_298;
      }
      size_t v112 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v112)(v111);
LABEL_298:
    if (!v67)
    {
      if (sqlite3_step(v220[0]) == 100)
      {
        uint64_t v69 = 0LL;
        while (1)
        {
          uint64_t v113 = sqlite3_column_int64(v220[0], 0);
          uint64_t v204 = *(void *)(a1 + 88) ? sqlite3_column_int(v220[0], *(_DWORD *)(a1 + 48) + 1) : 0;
          uint64_t v114 = *(_DWORD *)(a1 + 48);
          if (v114 >= 1) {
            break;
          }
LABEL_304:
          uint64_t v67 = 0;
          if (sqlite3_step(v220[0]) != 100) {
            goto LABEL_345;
          }
        }

        uint64_t v115 = 0LL;
        uint64_t v116 = 9 * v113 + v204;
        uint64_t v203 = 81 * v116;
        uint64_t v117 = 9 * v116;
        while (1)
        {
          while (*(_BYTE *)(*(void *)(a1 + 64) + v115))
          {
            if (++v115 >= v114) {
              goto LABEL_304;
            }
          }

          uint64_t v206 = v115 + 1;
          unsigned int v118 = sqlite3_column_text(v220[0], (int)v115 + 1);
          unint64_t v119 = *(uint64_t **)(a1 + 72);
          unint64_t v120 = *v119;
          v214[0] = 0LL;
          uint64_t v67 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *, uint64_t, sqlite3_stmt **))(v120 + 24))( v119,  v118,  0xFFFFFFFFLL,  v214);
          unint64_t v121 = v214[0];
          if (v67) {
            goto LABEL_313;
          }
          *(void *)v214[0] = v119;
          char v123 = v214[0];
          if (*(int *)v120 >= 1)
          {
            uint64_t v67 = (*(uint64_t (**)(sqlite3_stmt *, void))(v120 + 48))(v214[0], v204);
            char v123 = v214[0];
            if (v67) {
              break;
            }
          }

          LODWORD(v213) = 0;
          LODWORD(v212) = 0;
          LODWORD(v211) = 0;
          uint64_t v209 = 0;
          int v122 = v205;
          uint64_t v124 = v123;
          for (uint64_t i = (*(uint64_t (**)(void))(v205 + 40))(); !i; uint64_t i = (*(uint64_t (**)(void))(v205 + 40))())
          {
            uint64_t v126 = 9 * (v115 + v203) + v209;
            if ((int)v213 >= 1)
            {
              uint64_t v127 = v214[0];
              uint64_t v128 = v213;
              do
              {
                uint64_t v129 = *(char *)v127;
                uint64_t v127 = (sqlite3_stmt *)((char *)v127 + 1);
                uint64_t v126 = 9 * v126 + v129;
                --v128;
              }

              while (v128);
            }

            v69 ^= v126;
            unint64_t v130 = *(unsigned int *)(a1 + 488);
            if ((int)v130 > 1)
            {
              for (uint64_t j = 1LL; j != v130; ++j)
              {
                uint64_t v132 = *(unsigned int *)(*(void *)(a1 + 496) + 40 * j);
                if ((int)v132 <= (int)v213)
                {
                  int v133 = j + v117 + v115 + 8 * (j + v117);
                  int v134 = v133 + v209 + 8 * v133;
                  if ((int)v132 >= 1)
                  {
                    char v135 = v214[0];
                    do
                    {
                      unint64_t v136 = *(char *)v135;
                      char v135 = (sqlite3_stmt *)((char *)v135 + 1);
                      int v134 = 9 * v134 + v136;
                      --v132;
                    }

                    while (v132);
                  }

                  v69 ^= v134;
                }
              }
            }

            LODWORD(v213) = 0;
            LODWORD(v212) = 0;
            LODWORD(v211) = 0;
            uint64_t v209 = 0;
          }

          uint64_t v67 = i;
          unint64_t v121 = v124;
LABEL_319:
          if (v121) {
            (*(void (**)(void))(v122 + 32))();
          }
          if (v67 != 101) {
            goto LABEL_345;
          }
          uint64_t v114 = *(_DWORD *)(a1 + 48);
          ++v115;
          if (v206 >= v114) {
            goto LABEL_304;
          }
        }

        (*(void (**)(sqlite3_stmt *))(v120 + 32))(v214[0]);
        unint64_t v121 = 0LL;
LABEL_313:
        int v122 = v205;
        goto LABEL_319;
      }

      uint64_t v67 = 0;
    }

    uint64_t v69 = 0LL;
    goto LABEL_345;
  }

  uint64_t v69 = 0LL;
  uint64_t v67 = 7;
LABEL_345:
  sqlite3_finalize(v220[0]);
LABEL_346:
  if (v68 != v69 && v67 == 0) {
    int v138 = 267;
  }
  else {
    int v138 = v67;
  }
  uint64_t v208 = v138;
LABEL_17:
  uint64_t v14 = *(void **)(a1 + 480);
  if (v14)
  {
    size_t v15 = (sqlite3_stmt *)v14[3];
    unsigned int v16 = (void *)v14[4];
    uint64_t v17 = v16[3];
    if (v17) {
      xmmword_18C465400(v17);
    }
    sub_1812F20DC(v16, v14);
    int v18 = v16[3];
    if (v18) {
      xmmword_18C465410(v18);
    }
    sqlite3_finalize(v15);
  }

  *(void *)(a1 + 480) = 0LL;
  return v208;
}

LABEL_231:
        *(_WORD *)(v113 + 99) = v158 & 0xFFDF;
      }
    }
  }

LABEL_232:
  if (v28 != a1[43] || (uint64_t v171 = v28[2]) == 0)
  {
LABEL_233:
    if (*((unsigned __int8 *)a1 + 302) <= 1u)
    {
      if (*(_BYTE *)(v14 + 197))
      {
        if (a4)
        {
          int v162 = *(_DWORD *)(v14 + 192);
          *(_DWORD *)(v113 + 88) = v162;
          uint64_t v163 = *(void *)(*(void *)(v113 + 24) + 16LL);
          if (v163)
          {
            while (v163 == v113 || *(_DWORD *)(v163 + 88) != v162)
            {
              uint64_t v163 = *(void *)(v163 + 40);
              if (!v163) {
                goto LABEL_237;
              }
            }

            sub_1812DC47C((uint64_t)a1, "invalid rootpage", v151, v152, v153, v154, v155, v156, v227);
            uint64_t v11 = 0LL;
            *((_DWORD *)a1 + 6) = sub_1812FBF50(132026);
            goto LABEL_156;
          }
        }

  uint64_t v88 = (unsigned __int8 *)v215;
  (*v186)(v184);
LABEL_238:
  uint64_t v80 = v211;
LABEL_103:
  uint64_t v89 = *(unsigned int *)(v80 + 52);
  *(_DWORD *)(v80 + 52) = v89 + 1;
  *(_DWORD *)(a4 + 8) = v89;
  uint64_t v90 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v90)
  {
    sub_18131044C(v10, 116LL, v89, v207, 0LL, v55, v56, v57);
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v90 + 1;
    uint64_t v91 = *(void *)(v10 + 136) + 40LL * v90;
    *(_DWORD *)uint64_t v91 = 116;
    *(_DWORD *)(v91 + 4) = v89;
    *(_DWORD *)(v91 + 8) = v207;
    *(void *)(v91 + 12) = 0LL;
    *(void *)(v91 + 28) = 0LL;
    *(void *)(v91 + 20) = 0LL;
    *(_DWORD *)(v91 + 36) = 0;
  }

  int v92 = (_DWORD *)v80;
  int v93 = *(void *)(v80 + 16);
  uint64_t v94 = sub_181319FB0(v92, (uint64_t)v54);
  if (v94)
  {
    if (*(_BYTE *)(*(void *)v93 + 103LL))
    {
      if (!*(void *)(*(void *)v93 + 816LL) && (*(_DWORD *)v94)-- == 1) {
        sub_1813014B0(*(void **)(v94 + 16), (void *)v94);
      }
    }

    else
    {
      uint64_t v103 = *(void *)(v93 + 136) + 40LL * *(int *)(v93 + 144);
      *(_BYTE *)(v103 - 39) = -8;
      *(void *)(v103 - 24) = v94;
    }
  }

  uint64_t v76 = (void **)v211;
  if ((*(_BYTE *)(*(void *)v211 + 98LL) & 8) == 0 && (_BYTE)v195)
  {
    sub_1813386F0(v211, *v204, a4);
    int v104 = (*(_DWORD *)(v211 + 56) + 1);
    *(_DWORD *)(v211 + 56) = v104;
    *(_DWORD *)(a4 + 52) = v104;
    uint64_t v105 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v105)
    {
      sub_18131044C(v10, 77LL, 10000LL, v104, 0LL, v95, v96, v97);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v105 + 1;
      int v106 = *(void *)(v10 + 136) + 40LL * v105;
      *(void *)int v106 = 0x27100000004DLL;
      *(_DWORD *)(v106 + 8) = v104;
      *(void *)(v106 + 12) = 0LL;
      *(void *)(v106 + 28) = 0LL;
      *(void *)(v106 + 20) = 0LL;
      *(_DWORD *)(v106 + 36) = 0;
    }
  }

  int v107 = v214 + 104LL * v210;
  int v109 = *(_WORD *)(v107 + 69);
  __int16 v108 = (_WORD *)(v107 + 69);
  __int16 v111 = *(unsigned int *)(v10 + 144);
  int v110 = *(_DWORD *)(v10 + 148);
  size_t v112 = *(_DWORD *)(v10 + 144);
  if ((v109 & 0x20) != 0)
  {
    uint64_t v115 = *(unsigned int *)(v214 + 104LL * v210 + 60);
    if (v110 <= (int)v111)
    {
      LODWORD(v111) = sub_18131044C(v10, 71LL, 0LL, 0LL, 0LL, v95, v96, v97);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v111 + 1;
      uint64_t v116 = *(void *)(v10 + 136) + 40LL * v112;
      *(_BYTE *)uint64_t v116 = 71;
      *(_OWORD *)(v116 + 1) = 0u;
      *(_OWORD *)(v116 + 17) = 0u;
      *(void *)(v116 + 32) = 0LL;
    }

    unint64_t v121 = *(unsigned int *)(v214 + 104LL * v210 + 56);
    int v122 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v122)
    {
      sub_18131044C(v10, 11LL, v115, 0LL, v121, v95, v96, v97);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v122 + 1;
      char v123 = *(void *)(v10 + 136) + 40LL * v122;
      *(_DWORD *)char v123 = 11;
      *(_DWORD *)(v123 + 4) = v115;
      *(_DWORD *)(v123 + 8) = 0;
      *(_DWORD *)(v123 + 12) = v121;
      *(void *)(v123 + 24) = 0LL;
      *(void *)(v123 + 32) = 0LL;
      *(void *)(v123 + 16) = 0LL;
    }

    uint64_t v124 = *(unsigned int *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= (int)v124)
    {
      uint64_t v213 = v111;
      __int16 v111 = sub_18131044C(v10, 12LL, v115, 0LL, 0LL, v95, v96, v97);
      if (!v88) {
        goto LABEL_138;
      }
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v124 + 1;
      int v125 = *(void *)(v10 + 136) + 40LL * (int)v124;
      *(_DWORD *)int v125 = 12;
      *(_DWORD *)(v125 + 4) = v115;
      *(_OWORD *)(v125 + 8) = 0u;
      *(_OWORD *)(v125 + 24) = 0u;
      uint64_t v213 = v111;
      __int16 v111 = v124;
      if (!v88)
      {
LABEL_138:
        uint64_t v117 = 0;
        unsigned int v118 = *(_BYTE *)(v211 + 31);
        if (!v118) {
          goto LABEL_139;
        }
LABEL_129:
        unint64_t v119 = v118 - 1;
        *(_BYTE *)(v211 + 31) = v119;
        unint64_t v120 = *(_DWORD *)(v211 + 4LL * v119 + 224);
        goto LABEL_140;
      }
    }
  }

  else
  {
    uint64_t v113 = *(unsigned int *)(a4 + 4);
    if (v110 <= (int)v111)
    {
      __int16 v111 = sub_18131044C(v10, 36LL, v113, 0LL, 0LL, v95, v96, v97);
      uint64_t v213 = 0;
      if (!v88) {
        goto LABEL_138;
      }
    }

    else
    {
      uint64_t v213 = 0;
      *(_DWORD *)(v10 + 144) = v111 + 1;
      uint64_t v114 = *(void *)(v10 + 136) + 40LL * v112;
      *(_DWORD *)uint64_t v114 = 36;
      *(_DWORD *)(v114 + 4) = v113;
      *(_OWORD *)(v114 + 8) = 0u;
      *(_OWORD *)(v114 + 24) = 0u;
      if (!v88) {
        goto LABEL_138;
      }
    }
  }

  uint64_t v117 = *(_DWORD *)(v211 + 68) - 1;
  *(_DWORD *)(v211 + 68) = v117;
  sub_1812B0714(v211, v88);
  *(_DWORD *)(v209 + 48) |= 0x20000u;
  unsigned int v118 = *(_BYTE *)(v211 + 31);
  if (v118) {
    goto LABEL_129;
  }
LABEL_139:
  unint64_t v120 = *(_DWORD *)(v211 + 56) + 1;
  *(_DWORD *)(v211 + 56) = v120;
LABEL_140:
  uint64_t v216 = v120;
  uint64_t result = (void *)sub_1812AA5E4(v211, v54, *(unsigned int *)(a4 + 4));
  uint64_t v129 = (int)result;
  unint64_t v130 = *(unsigned int *)(a4 + 52);
  if ((_DWORD)v130)
  {
    uint64_t v126 = *(unsigned __int16 *)(v209 + 24);
    uint64_t v131 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v131)
    {
      uint64_t result = (void *)sub_181310690(v10, 180LL, v130, 0LL, (uint64_t)result, v126, v127, v128);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v131 + 1;
      uint64_t v132 = *(void *)(v10 + 136) + 40LL * v131;
      *(_DWORD *)uint64_t v132 = 64948;
      *(_DWORD *)(v132 + 4) = v130;
      *(_DWORD *)(v132 + 8) = 0;
      *(_DWORD *)(v132 + 12) = (_DWORD)result;
      *(_DWORD *)(v132 + 16) = v126;
      *(void *)(v132 + 24) = 0LL;
      *(void *)(v132 + 32) = 0LL;
    }
  }

  int v133 = *(_DWORD *)(v10 + 144);
  uint64_t v77 = v88;
  if ((*(_BYTE *)(*(void *)v10 + 49LL) & 4) != 0)
  {
    int v134 = *(unsigned int *)(v10 + 392);
    char v135 = 56 * v134;
    unint64_t v136 = v134 + 1;
    while (--v136 >= 1)
    {
      char v137 = v135 - 56;
      int v138 = *(void *)(v10 + 400);
      uint64_t v139 = *(_DWORD *)(v138 + v135 - 56);
      v135 -= 56LL;
      if (v139 == v87)
      {
        if (v87 >= 1) {
          *(_DWORD *)(v138 + v137 + 28) = v87;
        }
        if (v133 >= 1) {
          *(_DWORD *)(v138 + v137 + 32) = v133;
        }
        break;
      }
    }
  }

  uint64_t v140 = *(unsigned int *)(a4 + 8);
  if (*(_DWORD *)(v10 + 148) <= v133)
  {
    uint64_t result = (void *)sub_18131044C(v10, 138LL, v140, v216, 0LL, v126, v127, v128);
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v133 + 1;
    __int16 v141 = *(void *)(v10 + 136) + 40LL * v133;
    *(_DWORD *)__int16 v141 = 138;
    *(_DWORD *)(v141 + 4) = v140;
    *(_DWORD *)(v141 + 8) = v216;
    *(void *)(v141 + 12) = 0LL;
    *(void *)(v141 + 28) = 0LL;
    *(void *)(v141 + 20) = 0LL;
    *(_DWORD *)(v141 + 36) = 0;
  }

  int v142 = *(_DWORD *)(v10 + 144);
  if (v142 >= 1) {
    *(_WORD *)(*(void *)(v10 + 136) + 40LL * (v142 - 1) + 2) = 16;
  }
  if (!v88)
  {
LABEL_160:
    if ((*v108 & 0x20) == 0) {
      goto LABEL_161;
    }
    goto LABEL_167;
  }

  uint64_t result = *(void **)(v10 + 24);
  uint64_t v143 = ~v117;
  if (*((_DWORD *)result + 17) + *((_DWORD *)result + 18) >= 0)
  {
    *(_DWORD *)(result[10] + 4LL * v143) = v142;
    goto LABEL_160;
  }

  uint64_t result = (void *)sub_18131E420((uint64_t)result, v10, v143);
  if ((*v108 & 0x20) == 0)
  {
LABEL_161:
    uint64_t v144 = *(unsigned int *)(a4 + 4);
    int v145 = (v111 + 1);
    int v146 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v146)
    {
      uint64_t result = (void *)sub_18131044C(v10, 39LL, v144, v145, 0LL, v126, v127, v128);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v146 + 1;
      unsigned int v147 = *(void *)(v10 + 136) + 40LL * v146;
      *(_DWORD *)unsigned int v147 = 39;
      *(_DWORD *)(v147 + 4) = v144;
      *(_DWORD *)(v147 + 8) = v145;
      *(void *)(v147 + 12) = 0LL;
      *(void *)(v147 + 28) = 0LL;
      *(void *)(v147 + 20) = 0LL;
      *(_DWORD *)(v147 + 36) = 0;
    }

    unsigned int v148 = v216;
    unint64_t v149 = *(_DWORD *)(v10 + 144);
    if (v149 >= 1) {
      *(_WORD *)(*(void *)(v10 + 136) + 40LL * (v149 - 1) + 2) = 3;
    }
    goto LABEL_186;
  }

LABEL_293:
    uint64_t v11 = 0LL;
    *(void *)(v113 + 40) = v28[2];
    v28[2] = v113;
    goto LABEL_98;
  }

  uint64_t v172 = *(unsigned __int16 *)(v113 + 94);
  while (*(unsigned __int16 *)(v171 + 94) != (_DWORD)v172)
  {
LABEL_247:
    uint64_t v171 = *(void *)(v171 + 40);
    if (!v171) {
      goto LABEL_233;
    }
  }

  if (!*(_WORD *)(v113 + 94))
  {
    LODWORD(v173) = 0;
LABEL_246:
    if ((_DWORD)v173 == (_DWORD)v172) {
      goto LABEL_258;
    }
    goto LABEL_247;
  }

  uint64_t v173 = 0LL;
  do
  {
    if (*(unsigned __int16 *)(*(void *)(v171 + 8) + 2 * v173) != *(unsigned __int16 *)(*(void *)(v113 + 8)
                                                                                        + 2 * v173))
      goto LABEL_246;
    int v174 = *(_BYTE **)(*(void *)(v171 + 64) + 8 * v173);
    for (uint64_t k = *(unsigned __int8 **)(*(void *)(v113 + 64) + 8 * v173); ; ++k)
    {
      uint64_t v176 = *v174;
      uint64_t v177 = *k;
      if ((_DWORD)v176 == (_DWORD)v177) {
        break;
      }
      if (byte_1813C6343[v176] != byte_1813C6343[v177]) {
        goto LABEL_246;
      }
LABEL_254:
      ++v174;
    }

    if (*v174) {
      goto LABEL_254;
    }
    ++v173;
  }

  while (v173 != v172);
LABEL_258:
  int v178 = *(unsigned __int8 *)(v171 + 98);
  int v179 = *(unsigned __int8 *)(v113 + 98);
  if (v178 != v179)
  {
    if (v178 != 11 && v179 != 11)
    {
      sub_1812DC47C((uint64_t)a1, "conflicting ON CONFLICT clauses specified", v151, v152, v153, v154, v155, v156, 0);
      int v178 = *(unsigned __int8 *)(v171 + 98);
    }

    if (v178 == 11) {
      *(_BYTE *)(v171 + 98) = *(_BYTE *)(v237 + 98);
    }
  }

  if (v239 == 2) {
    *(_WORD *)(v171 + 99) = *(_WORD *)(v171 + 99) & 0xFFFC | 2;
  }
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    uint64_t v11 = 0LL;
    *(void *)(v237 + 40) = a1[44];
    a1[44] = (void *)v237;
    goto LABEL_98;
  }

          uint64_t v182 = ((v177 < v176) - v237 + v269[0]) & ~(((v177 < v176) - v237 + v269[0]) >> 31);
          v145 >>= v182;
          v157 += v182;
          uint64_t v181 = v240;
        }

        else
        {
LABEL_291:
          uint64_t v181 = v240;
        }

        if (!v181 && v157 < 1)
        {
          uint64_t v183 = HIDWORD(v264);
          if (HIDWORD(v264))
          {
            if (v264 < 0) {
              uint64_t v183 = strlen(__sa);
            }
            uint64_t v170 = v156;
            if (v254 + v183 + 1 >= (int)v156)
            {
              if (sqlite3_initialize()) {
                goto LABEL_375;
              }
              uint64_t v184 = v183;
              uint64_t v189 = sub_18127D33C(v131, v183 + (uint64_t)(int)v156 + 100);
              if (!v189) {
                goto LABEL_375;
              }
              uint64_t v131 = v189;
              uint64_t v170 = v183 + (uint64_t)(int)v156 + 100;
            }

            else
            {
              uint64_t v184 = v183;
            }

            uint64_t v188 = v254;
            memcpy((void *)(v131 + v254), __sa, v184);
            uint64_t v28 = v236;
            uint64_t v156 = v170;
LABEL_312:
            *(_BYTE *)(v131 + v183 + (uint64_t)v188) = 0;
            uint64_t v254 = v183 + v188;
          }

          else
          {
            uint64_t v28 = v236;
          }

          uint64_t v161 = v266;
          int v142 = v241;
          uint64_t v154 = v247;
          uint64_t v151 = v250;
          if (v266 < v157)
          {
            int v159 = 0;
            __int16 v158 = 1;
            goto LABEL_270;
          }

LABEL_268:
  uint64_t v11 = 0LL;
  uint64_t v113 = v237;
LABEL_157:
  sub_18130E1B0((void *)v14, v113);
LABEL_98:
  uint64_t v65 = v28[2];
  signed int v64 = v28 + 2;
  uint64_t v63 = v65;
  if (v65)
  {
    if (*(_BYTE *)(v63 + 98) == 5)
    {
LABEL_105:
      while (1)
      {
        uint64_t v67 = *(void *)(v63 + 40);
        if (!v67 || *(_BYTE *)(v67 + 98) == 5) {
          break;
        }
        void *v64 = v67;
        signed int v64 = (void *)(v67 + 40);
        *(void *)(v63 + 40) = *(void *)(v67 + 40);
        *(void *)(v67 + 40) = v63;
      }
    }

    else
    {
      while (1)
      {
        uint64_t v66 = v63;
        uint64_t v63 = *(void *)(v63 + 40);
        if (!v63) {
          break;
        }
        if (*(_BYTE *)(v63 + 98) == 5)
        {
          signed int v64 = (void *)(v66 + 40);
          goto LABEL_105;
        }
      }
    }
  }

            free(v20);
            return v15;
          }

void *sub_18129E1F8(uint64_t a1, char *__s)
{
  if (!__s) {
    return 0LL;
  }
  size_t v4 = strlen(__s);
  unint64_t v5 = v4 + 1;
  if (a1)
  {
    int v6 = (void *)sub_1812F2264(a1, v5);
    if (!v6) {
      return v6;
    }
    goto LABEL_7;
  }

  int v6 = (void *)sub_18126F0AC(v4 + 1);
  if (v6) {
LABEL_7:
  }
    memcpy(v6, __s, v5);
  return v6;
}

uint64_t sub_18129E278(uint64_t result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v23 = a2;
    if (a3)
    {
      size_t v4 = (unint64_t *)&v23;
    }

    else
    {
      uint64_t v24 = a2;
      uint64_t v5 = *(void *)(a2 + 56);
      if (v5)
      {
        uint64_t v6 = (((2 * *(_BYTE *)(a2 + 32)) ^ 2) + *(_BYTE *)(result + 48)) & 3;
        *(_BYTE *)(a2 + 33) = v6;
        uint64_t v7 = *(unsigned int *)(result + 124);
        if ((int)v7 >= 1)
        {
          uint64_t v8 = *(uint64_t **)(v5 + 16);
          while (1)
          {
            uint64_t v9 = *v8;
            BOOL v10 = !*v8 || v9 == a2;
            ++v8;
            if (!--v7) {
              goto LABEL_20;
            }
          }

          uint64_t v11 = (void *)(v9 + 40);
          while (1)
          {
            int v12 = v11;
            uint64_t v11 = (void *)v11[1];
            if (!v11) {
              break;
            }
            if (v11[2] != v5)
            {
              *uint64_t v11 = a2 + 40;
              *(void *)(a2 + 40) = v12;
              v12[1] = a2 + 40;
              *(void *)(a2 + 48) = v11;
              goto LABEL_25;
            }
          }
        }

void *sub_18129E42C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  BOOL v10 = (unsigned __int8 *)a8;
  char v13 = a5;
  int v14 = a4;
  uint64_t v16 = a2;
  uint64_t v18 = *(void *)a1;
  int v19 = *(_DWORD *)(a3 + 8);
  if (a9)
  {
    if (v19)
    {
      uint64_t v20 = "temporary trigger may not have qualified name";
LABEL_7:
      sub_1812DC47C(a1, v20, a3, a4, a5, (uint64_t)a6, a7, a8, v99);
      goto LABEL_46;
    }

    if (!a7) {
      goto LABEL_46;
    }
    int v21 = 1;
  }

  else
  {
    if (v19)
    {
      if (*(_BYTE *)(v18 + 197))
      {
        uint64_t v20 = "corrupt database";
        goto LABEL_7;
      }

      int v21 = sub_18131EDC8(*(void *)a1, a2);
      a2 = a3;
      if (v21 < 0)
      {
        sub_1812DC47C(a1, "unknown database %T", v22, v23, a5, (uint64_t)a6, a7, a8, v16);
        goto LABEL_46;
      }
    }

    else
    {
      int v21 = *(unsigned __int8 *)(v18 + 196);
    }

    uint64_t v16 = a2;
    if (!a7) {
      goto LABEL_46;
    }
  }

  if (!*(_BYTE *)(v18 + 103))
  {
    int v102 = v21;
    if (v21 != 1 && *(_BYTE *)(v18 + 197))
    {
      uint64_t v24 = *(void **)(a7 + 16);
      if (v24) {
        sub_1812F20DC((void *)v18, v24);
      }
      *(void *)(a7 + 16) = 0LL;
    }

    uint64_t v25 = *(void *)(a7 + 8);
    char v101 = v13;
    if (v25)
    {
      uint64_t v26 = *(void *)(*(void *)a1 + 32LL);
      uint64_t v27 = (uint64_t *)(v26 + 24);
      uint64_t v28 = 0xFFFFFFFF00000000LL;
      do
      {
        uint64_t v29 = *v27;
        v27 += 4;
        v28 += 0x100000000LL;
      }

      while (v29 != v25);
      uint64_t v30 = (_BYTE **)(v26 + (v28 >> 27));
    }

    else
    {
      uint64_t v30 = (_BYTE **)(a7 + 16);
    }

    uint64_t v37 = sub_18129EAF4(a1, 0, *(char **)(a7 + 24), *v30, a5, (uint64_t)a6, a7, a8);
    uint64_t v38 = *(void *)(a7 + 40);
    if (v38)
    {
      uint64_t v39 = *(void **)a1;
      if (*(void *)(*(void *)a1 + 816LL) || (int v40 = *(_DWORD *)(v38 + 44) - 1, (*(_DWORD *)(v38 + 44) = v40) == 0)) {
        sub_181311A80(v39, (void *)v38);
      }
    }

    *(void *)(a7 + 40) = v37;
    *(_WORD *)(a7 + 69) |= 0x200u;
    int v41 = v102;
    if (v37)
    {
      ++*(_DWORD *)(v37 + 44);
      if ((*(_WORD *)(a7 + 69) & 2) != 0)
      {
        uint64_t v42 = *(void *)(v37 + 16);
        if (!v42) {
          goto LABEL_39;
        }
        while (1)
        {
          uint64_t v43 = *(_BYTE **)v42;
          for (uint64_t i = *(unsigned __int8 **)(a7 + 96); ; ++i)
          {
            uint64_t v45 = *v43;
            uint64_t v46 = *i;
            if ((_DWORD)v45 != (_DWORD)v46) {
              break;
            }
            if (!*v43)
            {
              *(void *)(a7 + 104) = v42;
              goto LABEL_40;
            }

LABEL_46:
  uint64_t result = sub_18128FF4C((void *)v18, (void *)a7);
  if (a6)
  {
    int v49 = *(_DWORD *)a6;
    if (*(int *)a6 >= 1)
    {
      uint64_t v50 = 0LL;
      uint64_t v51 = 1LL;
      do
      {
        uint64_t v52 = (void *)a6[v51];
        if (v52)
        {
          sub_1812F20DC((void *)v18, v52);
          int v49 = *(_DWORD *)a6;
        }

        ++v50;
        v51 += 2LL;
      }

      while (v50 < v49);
    }

    uint64_t result = sub_1813014B0((void *)v18, a6);
  }

  uint64_t v53 = 0LL;
  if (v10) {
LABEL_54:
  }
    uint64_t result = sub_181309110((void *)v18, v10);
LABEL_55:
  if (!*(void *)(a1 + 360)) {
    return sub_18127A200((void *)v18, v53);
  }
  return result;
}

  uint64_t v25 = *((void *)a1 + 17);
  if ((*(_DWORD *)(v25 + 20) & 0x80000000) != 0)
  {
    if (*a1 >= 2u)
    {
      uint64_t v17 = 86256;
      return sub_1812FBF50(v17);
    }

    int v12 = sub_18130A254(*((void *)a1 + 17));
    char v123 = v12;
    if ((_DWORD)v12) {
      return v12;
    }
  }

  uint64_t v26 = *(void *)(v8 + 8);
  uint64_t v27 = *(_DWORD **)(v26 + 136);
  if (a3 < 0)
  {
    char v123 = 0;
    else {
      uint64_t v35 = *(_DWORD *)(v26 + 144);
    }
    uint64_t v114 = v35;
    if (*(_BYTE *)(v26 + 33) && v35 > *(unsigned __int16 *)(v25 + 14))
    {
      (*(void (**)(uint64_t, _DWORD *, uint64_t *))(v25 + 128))(v25, v27, v115);
      uint64_t v36 = v27;
      if ((_DWORD)v116 != WORD2(v116))
      {
        sub_1812C0570(*(_DWORD **)(v8 + 8), bswap32(*(_DWORD *)((char *)v27 + v35 - 4)), 3, *(_DWORD *)(v25 + 4), &v123);
        int v12 = v123;
        if (v123) {
          return v12;
        }
      }

      uint64_t v27 = v36;
    }

    uint64_t v37 = (*(_DWORD *)(v8 + 12) + v11 + *(_DWORD *)(v8 + 32));
    uint64_t v38 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v38)
    {
      sub_18131044C(v10, 162LL, 0LL, v17, v37, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v38 + 1;
      uint64_t v39 = *(void *)(v10 + 136) + 40LL * v38;
      *(void *)uint64_t v39 = 162LL;
      *(_DWORD *)(v39 + 8) = v17;
      *(_DWORD *)(v39 + 12) = v37;
      *(void *)(v39 + 24) = 0LL;
      *(void *)(v39 + 32) = 0LL;
      *(void *)(v39 + 16) = 0LL;
    }

    int v40 = *v29;
    uint64_t result = *(void *)v10;
    if (*(_BYTE *)(*(void *)v10 + 103LL))
    {
      if ((*(_BYTE *)(v40 + 4) & 0x10) != 0) {
        uint64_t result = (uint64_t)sub_1813014B0((void *)result, (void *)v40);
      }
    }

    else
    {
      int v41 = *(void *)(v10 + 136) + 40LL * *(int *)(v10 + 144);
      *(_BYTE *)(v41 - 39) = -7;
      *(void *)(v41 - 24) = v40;
    }

    uint64_t v42 = *(_DWORD *)(v10 + 144);
    uint64_t v23 = __OFSUB__(v42, 1);
    uint64_t v43 = v42 - 1;
    if (v43 < 0 == v23) {
      *(_WORD *)(*(void *)(v10 + 136) + 40LL * v43 + 2) = v15;
    }
    if (v15 != 1)
    {
      if (*(_DWORD *)(v9 + 40) >= v15) {
        goto LABEL_62;
      }
      *(_DWORD *)(v9 + 40) = v15;
      uint64_t v45 = v55;
      goto LABEL_61;
    }

    if ((_DWORD)v17)
    {
      uint64_t v44 = *(unsigned __int8 *)(v9 + 31);
      if (v44 <= 7)
      {
        *(_BYTE *)(v9 + 31) = v44 + 1;
        uint64_t v45 = (_DWORD *)(v9 + 4 * v44 + 224);
LABEL_61:
        *uint64_t v45 = v17;
      }
    }

    if ((_DWORD)v17 || !a3) {
      return v17;
    }
    return sub_1812FD54C(82064LL, v5);
  }

  uint64_t v22 = *(void **)(a1 + 16);
  uint64_t v23 = (v19 - (int)v21 + *(_DWORD *)(a1 + 64) - 5) / v20;
  if (!v22 || (v24 = off_18C4653B8(v22), uint64_t v22 = *(void **)(a1 + 16), v24 < 4 * v23))
  {
    uint64_t v22 = (void *)sub_18127D33C((uint64_t)v22, 8LL * v23);
    if (!v22) {
      return 7LL;
    }
    *(void *)(a1 + 16) = v22;
  }

  bzero(v22, 4LL * v23);
  uint64_t v25 = 0LL;
  *(_BYTE *)(a1 + 1) |= 4u;
  if (!(_DWORD)v17) {
    goto LABEL_46;
  }
LABEL_25:
  uint64_t v28 = 4 * v25;
  while (v17 <= v11[16])
  {
    uint64_t v29 = *(void *)(a1 + 16);
    *(_DWORD *)(v29 + v28) = v17;
    if (v18 >= v20)
    {
      uint64_t v32 = *(_DWORD *)(v29 + v28 + 4);
      if (v32)
      {
        uint64_t v17 = 0LL;
        uint64_t v38 = v32;
      }

      else
      {
        uint64_t v17 = sub_1813096B0((uint64_t)v11, v17, 0LL, &v38);
      }

      v18 -= v20;
    }

    else
    {
      if (v18 + a3 <= v20) {
        uint64_t v30 = a3;
      }
      else {
        uint64_t v30 = v20 - v18;
      }
      uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v11 + 288LL))();
      if ((_DWORD)v31)
      {
        uint64_t v17 = v31;
        a3 -= v30;
        if (!a3) {
          return v17;
        }
      }

      else
      {
        uint64_t v33 = *(unsigned int **)(v37 + 8);
        uint64_t v38 = bswap32(*v33);
        uint64_t v17 = sub_1812C0104((char *)v33 + v18 + 4, a4, v30, v36, v37);
        if (v37)
        {
          if ((*(_WORD *)(v37 + 52) & 0x20) != 0)
          {
            uint64_t v34 = *(void *)(v37 + 40);
            --*(_DWORD *)(v34 + 152);
            *(void *)(v37 + 32) = *(void *)(v34 + 168);
            *(void *)(v34 + 168) = v37;
            (*(void (**)(void, void, void))(**(void **)(v34 + 72) + 144LL))( *(void *)(v34 + 72),  *(void *)(v34 + 200) * (*(_DWORD *)(v37 + 48) - 1),  *(void *)(v37 + 8));
          }

          else
          {
            sub_1812F9F44(v37);
          }
        }

        uint64_t v18 = 0;
        a3 -= v30;
        if (!a3) {
          return v17;
        }
      }

      a4 += (int)v30;
    }

    if (!(_DWORD)v17)
    {
      uint64_t v17 = v38;
      v28 += 4LL;
      if (v38) {
        continue;
      }
    }

    goto LABEL_46;
  }

  return sub_1812FBF50(81979);
}

  *(_DWORD *)(a1 + 52) = a2;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    return 0LL;
  }
LABEL_49:
  while (1)
  {
    uint64_t v26 = *(void **)(v5 + 16);
    if (v26) {
      break;
    }
LABEL_48:
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      return 0LL;
    }
  }

  while (1)
  {
    while (*v26 < a3)
    {
      uint64_t v26 = (void *)v26[1];
      if (!v26) {
        goto LABEL_48;
      }
    }

    if (*v26 <= a3) {
      return 1LL;
    }
    uint64_t v26 = (void *)v26[2];
    if (!v26) {
      goto LABEL_48;
    }
  }

  uint64_t v22 = *(_BYTE *)(v5 + 463);
LABEL_47:
  *(_BYTE *)(a1 + 76) = v22;
  *(_WORD *)(a1 + 8) = v9;
  uint64_t v23 = v11 >= 2;
  uint64_t v24 = v11 - 2;
  if (!v23)
  {
LABEL_78:
    if (v9 == 1)
    {
      uint64_t v6 = sub_18136F298((uint64_t *)a1);
      if ((_DWORD)v6) {
        return v6;
      }
      uint64_t v6 = sqlite3_bind_value(*(sqlite3_stmt **)(a1 + 16), 1, (const sqlite3_value *)v12);
      goto LABEL_96;
    }

    if (v9) {
      return sub_1813692F0(a1);
    }
    if (v15 | v16) {
      uint64_t v45 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid BETWEEN %lld AND %lld ORDER BY rowid %s");
    }
    else {
      uint64_t v45 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s ORDER BY rowid %s");
    }
    int v49 = v45;
    if (v45)
    {
      ++*(_DWORD *)(v5 + 104);
      uint64_t v6 = sub_18126DFE0(*(void *)(v5 + 24), v45, 0xFFFFFFFFLL, 129LL, 0LL, (void *)(a1 + 16), 0LL, v46);
      --*(_DWORD *)(v5 + 104);
      uint64_t v50 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v49);
        --qword_18C468B10;
        off_18C4653A8(v49);
        int v49 = (unsigned __int8 *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70)
        {
LABEL_96:
          if ((_DWORD)v6) {
            return v6;
          }
          return sub_1813692F0(a1);
        }

        uint64_t v50 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
      }

      (*v50)(v49);
      goto LABEL_96;
    }

    return 7LL;
  }

  if (!v12)
  {
    sub_1812CF36C(97220);
    return 7LL;
  }

  uint64_t v25 = *(unsigned __int16 *)(v12 + 20);
  if ((~v25 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v25 & 1) != 0)
    {
LABEL_60:
      if (((0xAAAAAAAAAAAAAAAALL >> v25) & 1) == 0) {
        return 7LL;
      }
      uint64_t v64 = v12;
      uint64_t v26 = 0LL;
      uint64_t v27 = 1;
      *(_DWORD *)(a1 + 32) = 0;
      if (!v14) {
        goto LABEL_62;
      }
      goto LABEL_57;
    }

    uint64_t v26 = (char *)sub_181303998((int *)v12, 1);
    if (!v26)
    {
LABEL_53:
      LOWORD(v25) = *(_WORD *)(v12 + 20);
      goto LABEL_60;
    }
  }

  else
  {
    uint64_t v26 = *(char **)(v12 + 8);
    if (!v26) {
      goto LABEL_53;
    }
  }

  uint64_t v64 = v12;
  uint64_t v27 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if (!v14)
  {
LABEL_62:
    LODWORD(v29) = 0;
    goto LABEL_63;
  }

      uint64_t v253 = LODWORD(v7);
      uint64_t v27 = v255;
      if (!v27[3])
      {
        if (a1)
        {
          uint64_t v126 = &byte_1813CEAEE;
          uint64_t v127 = a1;
          uint64_t v128 = 0;
          uint64_t v129 = 0LL;
LABEL_242:
          sub_1812D7A8C(v127, v126, v128, 1u, (uint64_t (*)(uint64_t))v129);
          return;
        }

    ++v34;
  }

  if (*jj) {
    goto LABEL_46;
  }
  if (!a3) {
    goto LABEL_134;
  }
  int v58 = *((unsigned __int16 *)a3 + 10);
  if ((~v58 & 0x202) == 0 && *((_BYTE *)a3 + 22) == 1)
  {
    uint64_t v59 = a3[1];
    goto LABEL_135;
  }

  if ((v58 & 1) != 0) {
LABEL_134:
  }
    uint64_t v59 = 0LL;
  else {
    uint64_t v59 = (unsigned __int8 *)sub_181303998((int *)a3, 1);
  }
LABEL_135:
  uint64_t result = sub_18138C7A4(v59, &v65, &v64);
  if ((_DWORD)result == 1) {
    goto LABEL_72;
  }
  if (!(_DWORD)result)
  {
    sqlite3_free(*(void **)(a1 + 160));
    sqlite3_free(*(void **)(a1 + 168));
    uint64_t result = 0LL;
    uint64_t v61 = v64;
    *(void *)(a1 + 160) = v65;
    *(void *)(a1 + 168) = v61;
  }

  return result;
}

  if (a3)
  {
    a3[9] = v14;
    if ((*(_WORD *)(*(void *)a3 + 20LL) & 1) != 0)
    {
      switch(v14)
      {
        case 516:
          uint64_t v43 = "abort due to ROLLBACK";
          break;
        case 101:
          uint64_t v43 = "no more rows available";
          break;
        case 100:
          uint64_t v43 = "another row available";
          break;
        default:
          else {
            uint64_t v43 = off_189B6EC30[v14];
          }
          break;
      }

      sub_1812D7A8C((uint64_t)a3, v43, -1, 1u, 0LL);
    }
  }

  else
  {
    sub_1812CF36C(97620);
  }

          uint64_t v34 = *(_DWORD *)(a1 + 24);
          uint64_t v35 = *(_DWORD *)(a1 + 20) + 1;
          *(_DWORD *)(a1 + 20) = v35;
          if (v35 >= v34) {
            goto LABEL_43;
          }
        }
      }

      uint64_t v32 = strlen(*(const char **)(a1 + 64));
      uint64_t v33 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v32, v31);
      *(void *)(a1 + 88) = v33;
      if (v33)
      {
        *uint64_t v26 = a6;
        goto LABEL_42;
      }
    }

    goto LABEL_55;
  }

  uint64_t v26 = (_DWORD *)(a1 + 84);
LABEL_55:
  *uint64_t v26 = a6;
  char v13 = 7LL;
LABEL_56:
  uint64_t v39 = *(_DWORD *)(a1 + 48);
  if ((v39 & 0x80000000) == 0 && v9 == v39)
  {
    int v40 = *(void *)(a1 + 72);
    if ((_DWORD)v13) {
      int v41 = 1;
    }
    else {
      int v41 = v40 == 0;
    }
    if (!v41)
    {
      uint64_t v42 = *(int *)(a1 + 84);
      uint64_t v43 = v40 + v42;
      uint64_t v44 = (a6 - v42);
      uint64_t v45 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v44, v43);
      *(void *)(a1 + 88) = v45;
      if (v45) {
        char v13 = 0LL;
      }
      else {
        char v13 = 7LL;
      }
    }

    *(_DWORD *)(a1 + 84) = a6;
    if (v9 >= *(_DWORD *)(a1 + 28) && v9 < *(_DWORD *)(a1 + 32))
    {
      uint64_t v46 = *(void *)(a1 + 64);
      if ((_DWORD)v13) {
        char v47 = 1;
      }
      else {
        char v47 = v46 == 0;
      }
      if (!v47)
      {
        uint64_t v48 = strlen(*(const char **)(a1 + 64));
        int v49 = sqlite3_mprintf("%z%.*s", *(void *)(a1 + 88), v48, v46);
        *(void *)(a1 + 88) = v49;
        if (v49) {
          return 0LL;
        }
        else {
          return 7LL;
        }
      }
    }
  }

  return v13;
}

    ;
  }

  if (byte_1813C6343[v45] == byte_1813C6343[v46]) {
    goto LABEL_46;
  }
  uint64_t v27 = 0;
  int v40 = 0;
  *a6 = sqlite3_mprintf("fts5vocab: unknown table type: %Q", v29);
LABEL_51:
  char v47 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v29);
    --qword_18C468B10;
    off_18C4653A8(v29);
    uint64_t v29 = (unsigned __int8 *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      char v47 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
      goto LABEL_56;
    }
  }

  else
  {
LABEL_56:
    (*v47)(v29);
  }

  if (v40) {
    uint64_t result = sqlite3_declare_vtab(a1, off_189B6F538[v27]);
  }
  else {
    uint64_t result = 1LL;
  }
LABEL_60:
  uint64_t v23 = v67;
LABEL_61:
  if ((_DWORD)result)
  {
    int v14 = 0LL;
  }

  else
  {
    uint64_t v48 = v23 + 1;
    int v49 = v24 + 1;
    uint64_t v50 = v48 + v49 + 64;
    if (sqlite3_initialize() || (uint64_t v51 = (_DWORD *)sub_18126F0AC((int)v50)) == 0LL)
    {
      int v14 = 0LL;
      if (v50 << 32 <= 0) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = 7LL;
      }
    }

    else
    {
      int v14 = v51;
      bzero(v51, (int)v50);
      v14[14] = v27;
      *((void *)v14 + 5) = a1;
      *((void *)v14 + 6) = v68;
      *((void *)v14 + 3) = v14 + 16;
      *((void *)v14 + 4) = (char *)v14 + v49 + 64;
      memcpy(v14 + 16, v21, v49);
      memcpy((char *)v14 + v49 + 64, v19, v48);
      uint64_t v52 = (unsigned __int8 *)*((void *)v14 + 3);
      uint64_t v53 = *v52;
      if ((v53 - 34) <= 0x3E && ((1LL << (v53 - 34)) & 0x4200000000000021LL) != 0)
      {
        if (v53 == 91) {
          uint64_t v55 = 93;
        }
        else {
          uint64_t v55 = *v52;
        }
        uint64_t v56 = v52[1];
        if (v52[1])
        {
          int v57 = 0LL;
          int v58 = 1;
          while (1)
          {
            uint64_t v59 = v58 + 1LL;
            if (v56 == v55)
            {
              if (v52[v59] != v55) {
                goto LABEL_83;
              }
              LODWORD(v59) = v58 + 2;
              LOBYTE(v56) = v55;
            }

            v52[v57++] = v56;
            uint64_t v56 = v52[(int)v59];
            int v58 = v59;
          }
        }

        LODWORD(v57) = 0;
LABEL_83:
        v52[v57] = 0;
      }

      uint64_t v60 = (unsigned __int8 *)*((void *)v14 + 4);
      uint64_t v61 = *v60;
      if ((v61 - 34) > 0x3E || ((1LL << (v61 - 34)) & 0x4200000000000021LL) == 0)
      {
        uint64_t result = 0LL;
      }

      else
      {
        if (v61 == 91) {
          uint64_t v61 = 93;
        }
        uint64_t v63 = v60[1];
        if (v60[1])
        {
          uint64_t v64 = 0LL;
          uint64_t v65 = 1;
          while (1)
          {
            uint64_t v66 = v65 + 1LL;
            if (v63 == v61)
            {
              if (v60[v66] != v61) {
                goto LABEL_97;
              }
              LODWORD(v66) = v65 + 2;
              LOBYTE(v63) = v61;
            }

            v60[v64++] = v63;
            uint64_t v63 = v60[(int)v66];
            uint64_t v65 = v66;
          }
        }

        LODWORD(v64) = 0;
LABEL_97:
        uint64_t result = 0LL;
        v60[v64] = 0;
      }
    }
  }

uint64_t sub_18129EAF4( uint64_t a1, char a2, char *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)a1;
  if ((*(_BYTE *)(*(void *)a1 + 44LL) & 0x10) == 0 && !*(_BYTE *)(v12 + 197))
  {
    int v21 = sub_181276C70(*(void *)a1, (char **)(a1 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v21)
    {
      int v22 = v21;
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 24) = v22;
      ++*(_DWORD *)(a1 + 48);
      return result;
    }

    if (*(_BYTE *)(v12 + 111)) {
      *(_DWORD *)(v12 + 44) |= 0x10u;
    }
  }

  uint64_t result = sub_1812E2C64(v12, a3, a4);
  if (result)
  {
    if (*(_BYTE *)(result + 63) != 1 || (*(_BYTE *)(a1 + 37) & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }

  if ((*(_BYTE *)(a1 + 37) & 4) != 0 || *(_BYTE *)(v12 + 197))
  {
LABEL_9:
    if ((a2 & 2) != 0) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 29) = 1;
LABEL_11:
    uint64_t v20 = "no such view";
    if ((a2 & 1) == 0) {
      uint64_t v20 = "no such table";
    }
    if (a4) {
      sub_1812DC47C(a1, "%s: %s.%s", v14, v15, v16, v17, v18, v19, (char)v20);
    }
    else {
      sub_1812DC47C(a1, "%s: %s", v14, v15, v16, v17, v18, v19, (char)v20);
    }
    return 0LL;
  }

  uint64_t v23 = *(void *)(v12 + 584);
  if (v23)
  {
    int v24 = *a3;
    if (*a3)
    {
      unsigned int v25 = 0;
      uint64_t v26 = a3 + 1;
      do
      {
        unsigned int v25 = -1640531535 * (v25 + byte_1813C6343[v24]);
        int v27 = *v26++;
        int v24 = v27;
      }

      while (v27);
    }

    else
    {
      unsigned int v25 = 0;
    }

    uint64_t v29 = (_DWORD *)(v23 + 16LL * (v25 % *(_DWORD *)(v12 + 568)));
    uint64_t v28 = (uint64_t *)(v29 + 2);
  }

  else
  {
    uint64_t v28 = (uint64_t *)(v12 + 576);
    uint64_t v29 = (_DWORD *)(v12 + 572);
  }

  int v30 = *v29;
  if (v30)
  {
LABEL_31:
    uint64_t v28 = (uint64_t *)*v28;
    uint64_t v31 = (_BYTE *)v28[3];
    for (uint64_t i = a3; ; ++i)
    {
      uint64_t v33 = *v31;
      uint64_t v34 = *i;
      if ((_DWORD)v33 == (_DWORD)v34)
      {
        if (!*v31) {
          goto LABEL_40;
        }
      }

      else if (byte_1813C6343[v33] != byte_1813C6343[v34])
      {
        if (!--v30)
        {
          uint64_t v28 = &qword_18C550660;
          goto LABEL_40;
        }

        goto LABEL_31;
      }

      ++v31;
    }
  }

  uint64_t v28 = &qword_18C550660;
LABEL_40:
  uint64_t v35 = v28[2];
  if (!v35)
  {
    if (!a3) {
      goto LABEL_9;
    }
    uint64_t v40 = *a3;
    if (!*a3)
    {
      int v49 = 0;
      uint64_t v48 = "pragma_";
      goto LABEL_98;
    }

    if ((v40 & 0xFFFFFFDF) == 0x50)
    {
      uint64_t v41 = a3[1];
      if (!a3[1])
      {
        int v49 = 0;
        uint64_t v48 = "ragma_";
        goto LABEL_98;
      }

      if ((v41 & 0xFFFFFFDF) == 0x52)
      {
        uint64_t v42 = a3[2];
        if (!a3[2])
        {
          int v49 = 0;
          uint64_t v48 = "agma_";
          goto LABEL_98;
        }

        if ((v42 & 0xFFFFFFDF) == 0x41)
        {
          uint64_t v43 = a3[3];
          if (!a3[3])
          {
            int v49 = 0;
            uint64_t v48 = "gma_";
            goto LABEL_98;
          }

          if ((v43 & 0xFFFFFFDF) == 0x47)
          {
            uint64_t v44 = a3[4];
            if (!a3[4])
            {
              int v49 = 0;
              uint64_t v48 = "ma_";
              goto LABEL_98;
            }

            if ((v44 & 0xFFFFFFDF) == 0x4D)
            {
              uint64_t v45 = a3[5];
              if (!a3[5])
              {
                int v49 = 0;
                uint64_t v48 = "a_";
                goto LABEL_98;
              }

              if ((v45 & 0xFFFFFFDF) == 0x41)
              {
                uint64_t v46 = a3[6];
                if (!a3[6])
                {
                  int v49 = 0;
                  uint64_t v48 = "_";
LABEL_98:
                  goto LABEL_99;
                }

                if ((_DWORD)v46 == 95)
                {
LABEL_99:
                  uint64_t v35 = sub_181310A94(v12, a3);
                  if (!v35) {
                    goto LABEL_9;
                  }
                  goto LABEL_41;
                }

                char v47 = &byte_1813C6343[v46];
                uint64_t v48 = "_";
              }

              else
              {
                char v47 = &byte_1813C6343[v45];
                uint64_t v48 = "a_";
              }
            }

            else
            {
              char v47 = &byte_1813C6343[v44];
              uint64_t v48 = "ma_";
            }
          }

          else
          {
            char v47 = &byte_1813C6343[v43];
            uint64_t v48 = "gma_";
          }
        }

        else
        {
          char v47 = &byte_1813C6343[v42];
          uint64_t v48 = "agma_";
        }
      }

      else
      {
        char v47 = &byte_1813C6343[v41];
        uint64_t v48 = "ragma_";
      }
    }

    else
    {
      char v47 = &byte_1813C6343[v40];
      uint64_t v48 = "pragma_";
    }

    int v49 = *v47;
    goto LABEL_98;
  }

uint64_t sub_18129F0B4(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = sub_1812F2264(a1, (16LL * *a2) | 8);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_DWORD *)uint64_t v4 = *a2;
    *(_BYTE *)(v4 + 4) = *((_BYTE *)a2 + 4);
    if (*a2 >= 1)
    {
      uint64_t v6 = 0LL;
      for (uint64_t i = 0LL; i < *a2; ++i)
      {
        BOOL v10 = *(const void **)&a2[v6 + 2];
        if (v10)
        {
          size_t v11 = strlen(*(const char **)&a2[v6 + 2]);
          unint64_t v12 = v11 + 1;
          if (a1)
          {
            uint64_t v8 = (void *)sub_1812F2264(a1, v12);
            if (!v8) {
              goto LABEL_6;
            }
LABEL_12:
            memcpy(v8, v10, v12);
            goto LABEL_6;
          }

          uint64_t v8 = (void *)sub_18126F0AC(v11 + 1);
          if (v8) {
            goto LABEL_12;
          }
        }

        else
        {
          uint64_t v8 = 0LL;
        }

void *sub_18129F1C0(uint64_t a1, char a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  if (*(_DWORD *)(a1 + 48)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  size_t v14 = v13 + 97;
  if (*(void *)a1)
  {
    uint64_t v5 = (void *)sub_1812F2264(*(void *)a1, v13 + 97);
    if (!v5) {
      return v5;
    }
  }

  else
  {
    uint64_t v5 = (void *)sub_18126F0AC(v13 + 97);
    if (!v5) {
      return v5;
    }
  }

  bzero(v5, v14);
  uint64_t v15 = v5 + 12;
  memcpy(v5 + 12, *(const void **)a3, *(unsigned int *)(a3 + 8));
  if ((char)byte_1813C6558[*((unsigned __int8 *)v5 + 96)] < 0)
  {
    uint64_t v16 = 0LL;
    if (*((_BYTE *)v5 + 96) == 91) {
      int v17 = 93;
    }
    else {
      int v17 = *((unsigned __int8 *)v5 + 96);
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v19 = i;
      int v20 = *((unsigned __int8 *)v15 + i);
      if (v20 == v17)
      {
        ++i;
        LOBYTE(v20) = v17;
      }

      *((_BYTE *)v15 + v16++) = v20;
    }

    *((_BYTE *)v15 + v16) = 0;
  }

  v5[3] = v15;
  *(_BYTE *)uint64_t v5 = a2;
  int v21 = a5 - (_DWORD)a4;
  do
  {
    int v22 = a4;
    int v23 = v21;
    int v24 = *a4++;
    --v21;
  }

  while ((byte_1813C6558[v24] & 1) != 0);
  uint64_t v25 = v23;
  uint64_t v26 = ((uint64_t)v23 << 32) + 0x100000000LL;
  uint64_t v27 = v25 - 2;
  do
  {
    char v28 = byte_1813C6558[a4[v27]];
    v26 -= 0x100000000LL;
    --v27;
  }

  while ((v28 & 1) != 0);
  size_t v29 = v26 >> 32;
  int v30 = (_BYTE *)sub_1812F2264(v12, (v26 >> 32) + 1);
  uint64_t v31 = v30;
  if (v30)
  {
    memcpy(v30, v22, v29);
    v31[v29] = 0;
    int v32 = *v31;
    if (*v31)
    {
      uint64_t v33 = v31 + 1;
      do
      {
        if ((byte_1813C6558[v32] & 1) != 0) {
          *(v33 - 1) = 32;
        }
        int v34 = *v33++;
        int v32 = v34;
      }

      while (v34);
    }
  }

  v5[9] = v31;
  unsigned int v35 = *(unsigned __int8 *)(a1 + 302);
  if (v35 >= 2 && v35 != 3)
  {
    uint64_t v36 = v5[3];
    if (*(void *)a1)
    {
      uint64_t v37 = sub_1812F2264(*(void *)a1, 0x20uLL);
      if (!v37) {
        return v5;
      }
    }

    else
    {
      uint64_t v37 = sub_18126F0AC(32LL);
      if (!v37) {
        return v5;
      }
    }

    *(_OWORD *)uint64_t v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(void *)uint64_t v37 = v36;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)a3;
    *(void *)(v37 + 24) = *(void *)(a1 + 408);
    *(void *)(a1 + 408) = v37;
  }

  return v5;
}

uint64_t sub_18129F3DC(uint64_t a1, void *a2, _DWORD *a3, int a4)
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = sub_18127F5B0(*(void *)a1, 172, (uint64_t)a3, 1);
  uint64_t v16 = v9;
  if (v9)
  {
    *(_DWORD *)(v9 + 56) = *a3 - *(_DWORD *)(a1 + 336);
    if (a2 && *(_DWORD *)a2 > *(_DWORD *)(*(void *)a1 + 160LL) && !*(_BYTE *)(a1 + 30)) {
      sub_1812DC47C(a1, "too many arguments on function %T", v10, v11, v12, v13, v14, v15, (char)a3);
    }
    *(void *)(v16 + 32) = a2;
    *(_DWORD *)(v16 + 4) |= 8u;
    sub_181315710((_DWORD *)a1, v16, v10, v11, v12, v13, v14, v15);
    if (a4 == 1) {
      *(_DWORD *)(v16 + 4) |= 4u;
    }
  }

  else if (a2)
  {
    sub_181311F48(v8, a2);
  }

  return v16;
}

void *sub_18129F4C4(void *result, _DWORD *a2)
{
  for (; result; uint64_t result = (void *)result[10])
  {
    uint64_t v2 = result[6];
    if (v2)
    {
      int v3 = *(_DWORD *)(v2 + 40);
      if (v3 > *a2) {
        *a2 = v3;
      }
    }

    uint64_t v4 = result[8];
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 40);
      if (v5 > *a2) {
        *a2 = v5;
      }
    }

    uint64_t v6 = result[12];
    if (v6)
    {
      int v7 = *(_DWORD *)(v6 + 40);
      if (v7 > *a2) {
        *a2 = v7;
      }
    }

    uint64_t v8 = (int *)result[4];
    if (v8)
    {
      int v9 = *v8;
      if (*v8 >= 1)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = 2LL;
        do
        {
          uint64_t v12 = *(void *)&v8[v11];
          if (v12)
          {
            int v13 = *(_DWORD *)(v12 + 40);
            if (v13 > *a2)
            {
              *a2 = v13;
              int v9 = *v8;
            }
          }

          ++v10;
          v11 += 6LL;
        }

        while (v10 < v9);
      }
    }

    uint64_t v14 = (int *)result[7];
    if (v14)
    {
      int v15 = *v14;
      if (*v14 >= 1)
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = 2LL;
        do
        {
          uint64_t v18 = *(void *)&v14[v17];
          if (v18)
          {
            int v19 = *(_DWORD *)(v18 + 40);
            if (v19 > *a2)
            {
              *a2 = v19;
              int v15 = *v14;
            }
          }

          ++v16;
          v17 += 6LL;
        }

        while (v16 < v15);
      }
    }

    int v20 = (int *)result[9];
    if (v20)
    {
      int v21 = *v20;
      if (*v20 >= 1)
      {
        uint64_t v22 = 0LL;
        uint64_t v23 = 2LL;
        do
        {
          uint64_t v24 = *(void *)&v20[v23];
          if (v24)
          {
            int v25 = *(_DWORD *)(v24 + 40);
            if (v25 > *a2)
            {
              *a2 = v25;
              int v21 = *v20;
            }
          }

          ++v22;
          v23 += 6LL;
        }

        while (v22 < v21);
      }
    }
  }

  return result;
}

uint64_t sub_18129F624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = 0LL;
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0LL;
    int v7 = &v22;
    do
    {
      uint64_t v8 = sub_1812F2264(a1, 0x80uLL);
      if (!v8) {
        break;
      }
      uint64_t v9 = v8;
      *(void *)(v8 + 32) = sub_18129CD4C(a1, *(void **)(v4 + 32), a3);
      *(void *)(v9 + 40) = sub_18129F858(a1, *(int **)(v4 + 40), a3);
      uint64_t v10 = *(void *)(v4 + 48);
      if (v10) {
        uint64_t v11 = sub_18129C928(a1, v10, a3, 0LL);
      }
      else {
        uint64_t v11 = 0LL;
      }
      *(void *)(v9 + 48) = v11;
      *(void *)(v9 + 56) = sub_18129CD4C(a1, *(void **)(v4 + 56), a3);
      uint64_t v12 = *(void *)(v4 + 64);
      if (v12) {
        uint64_t v13 = sub_18129C928(a1, v12, a3, 0LL);
      }
      else {
        uint64_t v13 = 0LL;
      }
      *(void *)(v9 + 64) = v13;
      *(void *)(v9 + 72) = sub_18129CD4C(a1, *(void **)(v4 + 72), a3);
      *(_BYTE *)uint64_t v9 = *(_BYTE *)v4;
      *(void *)(v9 + 88) = v6;
      *(void *)(v9 + 80) = 0LL;
      uint64_t v14 = *(void *)(v4 + 96);
      if (v14) {
        uint64_t v15 = sub_18129C928(a1, v14, a3, 0LL);
      }
      else {
        uint64_t v15 = 0LL;
      }
      *(void *)(v9 + 96) = v15;
      *(void *)(v9 + 8) = 0LL;
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v4 + 4) & 0xFFFFFFDF;
      *(void *)(v9 + 20) = -1LL;
      *(_WORD *)(v9 + 2) = *(_WORD *)(v4 + 2);
      *(void *)(v9 + 104) = sub_18131DEE0(a1, *(int **)(v4 + 104));
      *(void *)(v9 + 112) = 0LL;
      uint64_t v16 = *(void *)(v4 + 120);
      v23[0] = 0LL;
      if (v16)
      {
        uint64_t v17 = v23;
        do
        {
          uint64_t v18 = sub_18131E040(a1, 0LL, v16);
          uint64_t *v17 = v18;
          if (!v18) {
            break;
          }
          uint64_t v17 = (uint64_t *)(v18 + 64);
          uint64_t v16 = *(void *)(v16 + 64);
        }

        while (v16);
        uint64_t v19 = v23[0];
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      *(void *)(v9 + 120) = v19;
      int v20 = *(unsigned __int8 *)(a1 + 103);
      if (*(void *)(v4 + 112))
      {
        if (*(_BYTE *)(a1 + 103))
        {
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(v4 + 16);
LABEL_26:
          *(void *)(v9 + 88) = 0LL;
          sub_18128FDA0((void *)a1, v9, 1);
          return v22;
        }

        v23[2] = sub_18131E304;
        v23[3] = 0LL;
        v23[0] = 0LL;
        v23[1] = sub_18131E2D0;
        v23[5] = v9;
        sub_181285228(v23, (void *)v9);
        int v20 = *(unsigned __int8 *)(a1 + 103);
      }

      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v4 + 16);
      if (v20) {
        goto LABEL_26;
      }
      *int v7 = v9;
      uint64_t v4 = *(void *)(v4 + 80);
      uint64_t v6 = v9;
      int v7 = (uint64_t *)(v9 + 80);
    }

    while (v4);
  }

  return v22;
}

_DWORD *sub_18129F858(uint64_t a1, int *a2, unsigned int a3)
{
  if (!a2) {
    return 0LL;
  }
  if (*a2 <= 0) {
    int v5 = 112;
  }
  else {
    int v5 = 104 * *a2 + 8;
  }
  uint64_t v6 = (_DWORD *)sub_1812F2264(a1, v5);
  int v7 = v6;
  if (v6)
  {
    int v8 = *a2;
    *uint64_t v6 = *a2;
    v6[1] = v8;
    if (*a2 >= 1)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
      while (1)
      {
        uint64_t v13 = &a2[v9];
        uint64_t v14 = *(const char **)&a2[v9 + 4];
        *(void *)&v7[v9 + 2] = *(void *)&a2[v9 + 2];
        if (!v14)
        {
          uint64_t v17 = 0LL;
          goto LABEL_17;
        }

        size_t v15 = strlen(v14);
        unint64_t v16 = v15 + 1;
        if (!a1) {
          break;
        }
        uint64_t v17 = (void *)sub_1812F2264(a1, v16);
        if (v17) {
          goto LABEL_16;
        }
LABEL_17:
        *(void *)&v7[v9 + 4] = v17;
        uint64_t v18 = (const void *)*((void *)v13 + 3);
        if (!v18)
        {
          int v21 = 0LL;
          goto LABEL_24;
        }

        size_t v19 = strlen(*((const char **)v13 + 3));
        size_t v20 = v19 + 1;
        if (!a1)
        {
          int v21 = (void *)sub_18126F0AC(v19 + 1);
          if (!v21) {
            goto LABEL_24;
          }
LABEL_23:
          memcpy(v21, v18, v20);
          goto LABEL_24;
        }

        int v21 = (void *)sub_1812F2264(a1, v20);
        if (v21) {
          goto LABEL_23;
        }
LABEL_24:
        uint64_t v22 = &v7[v9];
        *(void *)&v7[v9 + 6] = v21;
        uint64_t v23 = &a2[v9];
        uint64_t v24 = *(const void **)&a2[v9 + 8];
        if (!v24)
        {
          uint64_t v27 = 0LL;
          goto LABEL_31;
        }

        size_t v25 = strlen(*(const char **)&a2[v9 + 8]);
        size_t v26 = v25 + 1;
        if (!a1)
        {
          uint64_t v27 = (void *)sub_18126F0AC(v25 + 1);
          if (!v27) {
            goto LABEL_31;
          }
LABEL_30:
          memcpy(v27, v24, v26);
          goto LABEL_31;
        }

        uint64_t v27 = (void *)sub_1812F2264(a1, v26);
        if (v27) {
          goto LABEL_30;
        }
LABEL_31:
        *((void *)v22 + 4) = v27;
        v22[17] = v23[17];
        v22[18] = v23[18];
        *((void *)v22 + 7) = *((void *)v23 + 7);
        __int16 v28 = *(_WORD *)((char *)v22 + 69);
        if ((v28 & 2) != 0)
        {
          size_t v29 = *(const void **)&a2[v9 + 24];
          if (v29)
          {
            size_t v30 = strlen(*(const char **)&a2[v9 + 24]);
            unint64_t v31 = v30 + 1;
            if (a1)
            {
              int v32 = (void *)sub_1812F2264(a1, v31);
              if (!v32) {
                goto LABEL_39;
              }
LABEL_38:
              memcpy(v32, v29, v31);
            }

            else
            {
              int v32 = (void *)sub_18126F0AC(v30 + 1);
              if (v32) {
                goto LABEL_38;
              }
            }
          }

          else
          {
            int v32 = 0LL;
          }

LABEL_39:
          *(void *)&v7[v9 + 24] = v32;
          __int16 v28 = *(_WORD *)((char *)v22 + 69);
        }

        uint64_t v33 = *(_DWORD **)&a2[v9 + 26];
        *(void *)&v7[v9 + 26] = v33;
        if ((v28 & 0x100) != 0)
        {
          ++*v33;
          __int16 v28 = *(_WORD *)((char *)v22 + 69);
        }

        if ((v28 & 4) != 0) {
          *(void *)&v7[v9 + 24] = sub_18129CD4C(a1, *(void **)&a2[v9 + 24], a3);
        }
        int v34 = &a2[v9];
        uint64_t v35 = *(void *)&a2[v9 + 10];
        *(void *)&v7[v9 + 10] = v35;
        if (v35) {
          ++*(_DWORD *)(v35 + 44);
        }
        *(void *)&v7[v9 + 12] = sub_18129F624(a1, *((void *)v34 + 6), a3);
        uint64_t v36 = (int *)*((void *)v34 + 10);
        if ((*(_WORD *)((_BYTE *)v34 + 69) & 0x400) != 0)
        {
          uint64_t v11 = sub_18129F0B4(a1, v36);
        }

        else if (v36)
        {
          uint64_t v11 = sub_18129C928(a1, v36, a3, 0LL);
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        uint64_t v12 = &v7[v9];
        *((void *)v12 + 10) = v11;
        *((void *)v12 + 11) = *(void *)&a2[v9 + 22];
        ++v10;
        v9 += 26LL;
        if (v10 >= *a2) {
          return v7;
        }
      }

      uint64_t v17 = (void *)sub_18126F0AC(v15 + 1);
      if (!v17) {
        goto LABEL_17;
      }
LABEL_16:
      memcpy(v17, v14, v16);
      goto LABEL_17;
    }
  }

  return v7;
}

              uint64_t v33 = (unsigned __int8 *)*((void *)v33 + 10);
            }

            while (v33);
          }

          if (v75)
          {
            uint64_t v63 = *(void *)(v76 + 24);
            uint64_t v64 = ~v75;
            if (*(_DWORD *)(v63 + 68) + *(_DWORD *)(v63 + 72) < 0) {
              sub_18131E420(v63, v76, v64);
            }
            else {
              *(_DWORD *)(*(void *)(v63 + 80) + 4LL * v64) = *(_DWORD *)(v76 + 144);
            }
          }

          uint64_t v65 = *(_DWORD *)(v76 + 144);
          if (*(_DWORD *)(v76 + 148) <= v65)
          {
            sub_18131044C(v76, 70LL, 0LL, 0LL, 0LL, v15, v16, v17);
          }

          else
          {
            *(_DWORD *)(v76 + 144) = v65 + 1;
            uint64_t v66 = *(void *)(v76 + 136) + 40LL * v65;
            *(_BYTE *)uint64_t v66 = 70;
            *(_OWORD *)(v66 + 1) = 0u;
            *(_OWORD *)(v66 + 17) = 0u;
            *(void *)(v66 + 32) = 0LL;
          }

          if (*(_DWORD *)(v79 + 48))
          {
            if (!(void)v81) {
              goto LABEL_71;
            }
            sub_1812F20DC(v80, (void *)v81);
            if (*(_DWORD *)(v79 + 48)) {
              goto LABEL_71;
            }
          }

          else
          {
            *(void *)(v79 + 8) = v81;
            uint64_t v69 = DWORD2(v83[0]);
            uint64_t v70 = v82;
            *(_DWORD *)(v79 + 48) = DWORD2(v83[0]);
            *(_DWORD *)(v79 + 24) = v70;
            if (v69) {
              goto LABEL_71;
            }
          }

          uint64_t v67 = *(void *)(v76 + 136);
          sub_1813108AC((void *)v76, (int *)(v78 + 136));
          *(_DWORD *)(v77 + 8) = *(_DWORD *)(v76 + 144);
          *(void *)(v76 + 136) = 0LL;
          *(void *)uint64_t v77 = v67;
LABEL_71:
          *(int32x2_t *)(v77 + 12) = vrev64_s32(*(int32x2_t *)((char *)v83 + 12));
          *(void *)(v77 + 32) = v74;
          *(void *)(v10 + 28) = *((void *)&v86 + 1);
          sub_1812CFA64(v76);
LABEL_72:
          sub_1812DCA44(&v80);
          return v10;
        }
      }

      uint64_t v12 = (char *)sub_18127F588(v9, "-- TRIGGER %s", (uint64_t)v12, v13, v14, v15, v16, v17, v23);
      if (*(_BYTE *)(*v24 + 103))
      {
        if (v12) {
          sub_1813014B0((void *)*v24, v12);
        }
      }

      else
      {
        size_t v26 = *((int *)v24 + 36) - 1LL;
        uint64_t v27 = v24[17];
        __int16 v28 = v27 + 40 * v26;
        size_t v30 = *(unsigned __int8 *)(v28 + 1);
        size_t v29 = (_BYTE *)(v28 + 1);
        if (v30)
        {
          sub_181310724(v24, v27 + 40 * v26, v12, 0xFFFFFFFA);
        }

        else if (v12)
        {
          *(void *)(v27 + 40 * v26 + 16) = v12;
          *size_t v29 = -6;
        }
      }

      goto LABEL_30;
    }
  }

  *(void *)(v10 + 16) = 0LL;
  return 0LL;
}

      sub_1813BB7D4((uint64_t)&v203, *(_DWORD *)(a2 + 120), &v207);
      uint64_t v27 = *(unsigned int *)(a2 + 120);
      size_t v19 = v207;
      if ((int)v27 >= 1 && !v207)
      {
        __int16 v28 = *(const void **)(a2 + 136);
        size_t v29 = (int)v204;
        size_t v30 = (int)v204 + v27;
        if (v30 <= SHIDWORD(v204))
        {
          int v34 = v203;
        }

        else
        {
          if (HIDWORD(v204)) {
            unint64_t v31 = SHIDWORD(v204);
          }
          else {
            unint64_t v31 = 128LL;
          }
          do
          {
            int v32 = v31;
            v31 *= 2LL;
          }

          while (v31 < v30);
          if (v32 > 1073741695 && (unint64_t v31 = 2147483391LL, v30 > 2147483391)
            || (uint64_t v33 = v203, sqlite3_initialize())
            || (int v34 = sub_18127D33C(v33, v31)) == 0)
          {
            size_t v19 = 7;
            uint64_t v207 = 7;
            goto LABEL_52;
          }

          uint64_t v203 = v34;
          HIDWORD(v204) = v31;
          size_t v29 = (int)v204;
        }

        memcpy((void *)(v34 + v29), v28, v27);
        size_t v19 = 0;
        LODWORD(v204) = v204 + v27;
      }

  uint64_t v53 = a3;
  *(_WORD *)(v6 + 40) = v13 & 0xFFEF;
  if (!*(_DWORD *)(v6 + 64)) {
    *(_WORD *)(v6 + 40) = v13 | 0x10;
  }
  uint64_t v18 = 0;
  uint64_t v54 = v7;
  int v55 = (_DWORD *)(v6 + 52);
  size_t v19 = *(void *)(v7 + 344);
  if (v19) {
    goto LABEL_42;
  }
  while (2)
  {
    int v21 = *(void *)(v6 + 24);
    if (a2 && !v21)
    {
LABEL_61:
      uint64_t v18 = 0;
LABEL_62:
      int v21 = *(void *)(v6 + 24);
    }

  sub_1812DC47C(a1, "table %s may not be altered", a3, a4, a5, a6, a7, a8, (char)*a2);
  return 1LL;
}

    unint64_t v31 = a1[4];
    uint64_t v9 = v51;
  }

  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  if (a2 == 1) {
    uint64_t v24 = 3;
  }
  else {
    uint64_t v24 = 19;
  }
  *(_DWORD *)(a1 + 112) = v24;
  if (a2 == 1 || (v42 & 0x80000000) == 0)
  {
    size_t v25 = *a5;
    if (*a5)
    {
      size_t v26 = *(unsigned __int16 *)(v25 + 20);
      if ((~v26 & 0x202) != 0 || *(_BYTE *)(v25 + 22) != 1)
      {
        if ((v26 & 1) != 0) {
          goto LABEL_53;
        }
        uint64_t v27 = (const char *)sub_181303998((int *)v25, 1);
        if (!v27) {
          goto LABEL_53;
        }
      }

      else
      {
        uint64_t v27 = *(const char **)(v25 + 8);
        if (!v27) {
          goto LABEL_53;
        }
      }

      __int16 v28 = sqlite3_mprintf("%s", v27);
      *uint64_t v40 = v28;
      if (!v28) {
        return 7LL;
      }
      *(_DWORD *)(a1 + 104) = strlen(v28);
    }
  }

          if (sqlite3_initialize())
          {
            *(void *)(a2 + 80) = 0LL;
            return 7LL;
          }

          uint64_t v23 = sub_18126F0AC(2LL * v14 + 2);
          *(void *)(a2 + 80) = v23;
          if (!v23) {
            return 7LL;
          }
          size_t v15 = (void *)v23;
          *(_DWORD *)(a2 + 88) = 2 * v14 + 2;
LABEL_24:
          memcpy(v15, *(const void **)(v9 + 24), v14);
          *(_BYTE *)(*(void *)(a2 + 80) + v14) = 0;
          *(_DWORD *)(a2 + 72) = v14;
          if (!sqlite3_initialize())
          {
            size_t v20 = v13 + 1;
            int v21 = (void *)sub_18126F0AC(v13 + 1);
            if (v21)
            {
              uint64_t v22 = v21;
              memcpy(v21, v12[1], v13 + 1);
              uint64_t result = 0LL;
              *(_DWORD *)(a2 + 104) = v20;
              *(_DWORD *)(a2 + 48) = v20;
              *(void *)(a2 + 96) = v22;
              *(void *)(a2 + 40) = v22;
              *(void *)(a2 + 64) += 8LL;
              return result;
            }
          }

          return 7LL;
        }

        return 0LL;
      }

      uint64_t v11 = &xmmword_18C465410;
    }

    (*v11)(v10);
    goto LABEL_22;
  }

  sub_181364288(a2);
  unint64_t v16 = *(void *)(a2 + 32);
  if (v16 >= *(void *)(a2 + 16)) {
    return 0LL;
  }
  *(void *)(a2 + 32) = v16 + 1;
  uint64_t result = sub_181363924(a1, v16 + 1, (char **)(a2 + 40), (_DWORD *)(a2 + 48));
  if ((_DWORD)result) {
    return result;
  }
  int v5 = *(unsigned __int8 **)(a2 + 40);
  if (*(void *)(a2 + 56))
  {
LABEL_7:
    while ((uint64_t)&v5[-*(void *)(a2 + 40) + 20] > *(int *)(a2 + 52))
    {
      uint64_t result = sub_1813643E8(a2);
      if (*(void *)(a2 + 56)) {
        int v7 = (_DWORD)result == 0;
      }
      else {
        int v7 = 0;
      }
      if (!v7)
      {
        if ((_DWORD)result) {
          return result;
        }
        break;
      }
    }
  }

    uint64_t v38 = a12(a2, 0LL, v21, (v26 - v22), v22, v26);
    uint64_t v39 = v38;
    size_t v15 = v25 + 2;
    if (v25 + 2 < a11)
    {
      v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
      v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
      v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v20.i64[0] = 0x2020202020202020LL;
      v20.i64[1] = 0x2020202020202020LL;
      if (!v38) {
        continue;
      }
    }

    goto LABEL_54;
  }

  uint64_t v39 = 0;
LABEL_54:
  if (v21 != (int8x16_t *)v55 && v21)
  {
    uint64_t v50 = (uint64_t (**)(int8x16_t *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_61;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v21);
    --qword_18C468B10;
    off_18C4653A8(v21);
    int v21 = (int8x16_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v50 = (uint64_t (**)(int8x16_t *))&xmmword_18C465410;
LABEL_61:
      (*v50)(v21);
    }
  }

  if (v39 == 101) {
    return 0LL;
  }
  else {
    return v39;
  }
}

    if (*(unsigned __int8 *)(a1 + v26 + 160) != a3)
    {
      if (v14 - 818 < 0xFFFFFFCE
        || (v14 >= 0x320 ? (uint64_t v27 = -32) : (uint64_t v27 = 0),
            v14 >= 0x320 ? (__int16 v28 = 221688) : (__int16 v28 = 134389727),
            ((v28 >> (v14 + v27)) & 1) == 0))
      {
        if (v12 < 1)
        {
          LODWORD(v29) = 0;
        }

        else
        {
          size_t v29 = 0LL;
          while (*(_DWORD *)(v11 + 4 * v29) <= v14)
          {
            if (v12 == ++v29)
            {
              LODWORD(v29) = v12;
              break;
            }
          }
        }

        size_t v30 = (unsigned int *)(v11 + 4LL * v29);
        memmove((void *)(v11 + 4LL * (v29 + 1)), v30, 4LL * (v12 - (int)v29));
        _BYTE *v30 = v14;
        ++v12;
      }
    }
  }

  while (v4 < v13);
  uint64_t result = 0LL;
  *(void *)(a1 + 152) = v11;
  *(_DWORD *)(a1 + 144) = v12;
  return result;
}

      uint64_t v11 = (int)v11;
      uint64_t result = (void **)memcpy(v5, __src, (int)v11);
      uint64_t v9 = 1;
      uint64_t v10 = (int)v11;
LABEL_5:
      v5 += v10;
      __src += v11;
      a4 += v9;
      if (!--v8) {
        goto LABEL_40;
      }
    }

    LODWORD(v11) = 9;
LABEL_13:
    uint64_t v14 = *a4;
    if (*a4) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

    ;
  }

  if (byte_1813C6343[v25] == byte_1813C6343[v26]) {
    goto LABEL_39;
  }
  for (uint64_t k = 0LL; ; ++k)
  {
    __int16 v28 = *(unsigned __int8 *)(v18 + k);
    size_t v29 = aDouble[k];
    if ((_DWORD)v28 != (_DWORD)v29) {
      break;
    }
    if (!*(_BYTE *)(v18 + k))
    {
      uint64_t v17 = 2;
      goto LABEL_71;
    }

void *sub_18129FB80( uint64_t a1, uint64_t a2, int *a3, void *a4, unsigned __int8 *a5, char a6, unsigned __int8 *a7, int a8)
{
  uint64_t v13 = *(void **)a1;
  uint64_t v14 = sub_18129F1C0(a1, 129, a2, a7, a8);
  size_t v15 = v14;
  if (v14)
  {
    if (*(unsigned __int8 *)(a1 + 302) < 2u)
    {
      v14[6] = sub_18129CD4C((uint64_t)v13, a4, 1u);
      if (a5) {
        uint64_t v17 = sub_18129C928((uint64_t)v13, a5, 1LL, 0LL);
      }
      else {
        uint64_t v17 = 0LL;
      }
      v15[5] = v17;
      unint64_t v16 = sub_18129F858((uint64_t)v13, a3, 1u);
    }

    else
    {
      v14[5] = a5;
      v14[6] = a4;
      unint64_t v16 = a3;
      a5 = 0LL;
      a4 = 0LL;
      a3 = 0LL;
    }

    v15[4] = v16;
    *((_BYTE *)v15 + 1) = a6;
  }

  if (a4) {
    sub_181311F48(v13, a4);
  }
  if (a5) {
    sub_181309110(v13, a5);
  }
  sub_18128FF4C(v13, a3);
  return v15;
}

void *sub_18129FC88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(void *)(a1 + 360);
  uint64_t v10 = *(void *)a1;
  *(void *)(a1 + 360) = 0LL;
  if (*(_DWORD *)(a1 + 48)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v9 == 0;
  }
  if (v11) {
    goto LABEL_75;
  }
  uint64_t v12 = a3;
  uint64_t v14 = *(void *)(v9 + 40);
  if (v14)
  {
    size_t v15 = (uint64_t *)(*(void *)(v10 + 32) + 24LL);
    LODWORD(v16) = -1;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      uint64_t v16 = (v16 + 1);
    }

    while (v17 != v14);
  }

  else
  {
    uint64_t v16 = 4294934528LL;
  }

  uint64_t v18 = *(char **)v9;
  *(void *)(v9 + 56) = a2;
  if (a2)
  {
    uint64_t v19 = a2;
    do
    {
      *(void *)(v19 + 8) = v9;
      uint64_t v19 = *(void *)(v19 + 80);
    }

    while (v19);
  }

  uint64_t v82 = v18;
  if (v18) {
    int v20 = strlen(v18) & 0x3FFFFFFF;
  }
  else {
    int v20 = 0;
  }
  int v83 = v20;
  uint64_t v84 = a1;
  int v21 = (uint64_t *)(*(void *)(v10 + 32) + 32LL * (int)v16);
  uint64_t v91 = *v21;
  uint64_t v22 = v21[3];
  uint64_t v92 = "trigger";
  uint64_t v93 = &v82;
  BOOL v90 = (_DWORD)v16 == 1;
  v85[0] = a1;
  v85[1] = sub_18132467C;
  v85[2] = sub_1813246F8;
  v85[3] = nullsub_8;
  int v86 = 0;
  __int16 v87 = 0;
  uint64_t v88 = &v84;
  uint64_t v89 = v22;
  if (v8)
  {
    uint64_t v81 = v12;
    while (!sub_181285228(v85, *(void **)(v8 + 16)))
    {
      uint64_t v23 = *(void *)(v8 + 40);
      if (v23)
      {
      }

      uint64_t v24 = *(_DWORD **)(v8 + 48);
      if (v24 && (int)*v24 >= 1)
      {
        size_t v25 = (uint64_t *)(v24 + 2);
        int v26 = *v24 + 1;
        while (!*v25 || !sub_18131C57C((uint64_t)v85, *v25))
        {
          v25 += 3;
          if (--v26 <= 1) {
            goto LABEL_28;
          }
        }

        goto LABEL_74;
      }

LABEL_38:
          uint64_t v32 = *(void *)(v28 + 8);
          uint64_t v33 = *(_DWORD **)(v28 + 16);
          if (v33 && (int)*v33 >= 1)
          {
            int v34 = (uint64_t *)(v33 + 2);
            int v35 = *v33 + 1;
            while (!*v34 || !sub_18131C57C((uint64_t)v85, *v34))
            {
              v34 += 3;
              if (--v35 <= 1) {
                goto LABEL_47;
              }
            }

            goto LABEL_74;
          }

    uint64_t v19 = 0LL;
    int v20 = a3[1];
    if (!v20) {
      return;
    }
    goto LABEL_39;
  }

  uint64_t v19 = *(unsigned __int8 **)(v17 + 8);
  int v20 = a3[1];
  if (!v20) {
    return;
  }
LABEL_39:
  int v21 = *(unsigned __int16 *)(v20 + 20);
  if ((~v21 & 0x202) != 0 || *(_BYTE *)(v20 + 22) != 1)
  {
    if ((v21 & 1) != 0) {
      return;
    }
    uint64_t v22 = (const char *)sub_181303998((int *)v20, 1);
  }

  else
  {
    uint64_t v22 = *(const char **)(v20 + 8);
  }

  if (v22 && v19)
  {
    uint64_t v23 = sub_1812BF304(v19, v22, v8, v16);
    if (a1)
    {
      uint64_t v24 = v23 == 0;
      size_t v25 = *(void *)a1;
      if ((*(_WORD *)(*(void *)a1 + 20LL) & 0x9000) != 0)
      {
        sub_1813040AC(v25, v24);
      }

      else
      {
        *(void *)size_t v25 = v24;
        *(_WORD *)(v25 + 20) = 4;
      }
    }

    else
    {
      sub_1812CF36C(97431);
    }
  }

      sub_1812D3A10(v23, v24, 1u);
      goto LABEL_19;
    }

    switch(v60)
    {
      case 22:
        size_t v29 = v6[6];
        if (v12 == 49) {
          uint64_t v13 = v6[6];
        }
        size_t v30 = v56;
        if (v12 == 49) {
          size_t v30 = v58 + 1;
        }
        uint64_t v56 = v30;
        if ((int)v29 + 1 >= v6[4])
        {
          sub_1812D3A10((uint64_t)v6, "(", 1u);
        }

        else
        {
          v6[6] = v29 + 1;
          *(_BYTE *)(*((void *)v6 + 1) + v29) = 40;
        }

        ++v58;
        goto LABEL_19;
      case 23:
        if (v13 < 1)
        {
          int v31 = v58;
        }

        else
        {
          int v31 = v58;
          if (v58 == v56)
          {
            uint64_t v32 = v13 + 1;
            v6[6] = v13 + 1;
            uint64_t v33 = v13 + 6;
            if (v13 + 6 >= v6[4])
            {
              sub_1812D3A10((uint64_t)v6, "?,?,?", 5u);
              uint64_t v13 = 0;
            }

            else
            {
              uint64_t v13 = 0;
              v6[6] = v33;
              int v34 = *((void *)v6 + 1) + v32;
              *(_BYTE *)(v34 + 4) = 63;
              *(_DWORD *)int v34 = 742337599;
            }
          }
        }

        uint64_t v58 = v31 - 1;
        uint64_t v18 = v6[6];
        if ((int)v18 + 1 < v6[4])
        {
          v6[6] = v18 + 1;
          uint64_t v19 = *((void *)v6 + 1);
          int v20 = 41;
LABEL_28:
          *(_BYTE *)(v19 + v18) = v20;
          goto LABEL_19;
        }

        uint64_t v23 = (uint64_t)v6;
        uint64_t v24 = ")";
        goto LABEL_38;
      case 59:
        int v21 = v6[6];
        if ((char)byte_1813C6558[v10] < 0)
        {
          int v35 = (char *)sub_1812F2264((uint64_t)v55, v16 + 1LL);
          if (!v35)
          {
            int v3 = v57;
            uint64_t v13 = 0;
            goto LABEL_19;
          }

          uint64_t v36 = v35;
          memcpy(v35, v15, v17);
          v36[v17] = 0;
          uint64_t v59 = 0;
          uint64_t v37 = *v36;
          if ((char)byte_1813C6558[*v36] < 0)
          {
            uint64_t v38 = 0LL;
            if (v37 == 91) {
              uint64_t v37 = 93;
            }
            for (uint64_t i = 1; ; ++i)
            {
              uint64_t v40 = i;
              uint64_t v41 = v36[i];
              if (v41 == v37)
              {
                ++i;
                LOBYTE(v41) = v37;
              }

              v36[v38++] = v41;
            }

            v36[v38] = 0;
          }

          if (*v15 == 34)
          {
            uint64_t v42 = (const char *)*((void *)pStmt + 42);
            if (v42)
            {
              while (strcmp(v36, v42 + 8))
              {
                uint64_t v42 = *(const char **)v42;
                if (!v42) {
                  goto LABEL_74;
                }
              }

              uint64_t v49 = v6[6];
              if ((int)v49 + 1 >= v6[4])
              {
                sub_1812D3A10((uint64_t)v6, "?", 1u);
              }

              else
              {
                v6[6] = v49 + 1;
                *(_BYTE *)(*((void *)v6 + 1) + v49) = 63;
              }

              int v3 = v57;
              sub_1812F20DC(v55, v36);
              uint64_t v13 = 0;
              goto LABEL_19;
            }
          }

  size_t v15 = *(void *)(v1 + 32);
  if (v15)
  {
    xmmword_18C465410(v15);
    if (*(void *)(v1 + 32)) {
      off_18C4653F8();
    }
  }

  uint64_t v16 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_48;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v16 = &xmmword_18C465410;
LABEL_48:
    (*v16)(v1);
  }

  return 0LL;
}

  int v21 = *(void *)a1[9];
  if (v21 && *(int *)v21 >= 3)
  {
    uint64_t v22 = a1[20];
    *((_BYTE *)a1 + 27) = v22 > 0;
    if (*((_DWORD *)a1 + 12))
    {
      uint64_t v23 = sub_1812FCAFC;
    }

    else if (v22 < 1 || a1[37])
    {
      uint64_t v23 = sub_1812FCD58;
    }

    else
    {
      uint64_t v23 = sub_1812FCB08;
    }

    a1[36] = (uint64_t)v23;
    (*(void (**)(void))(v21 + 80))();
  }

  return v6;
}

  uint64_t v12 = v6[7];
  if (!v12) {
    goto LABEL_47;
  }
  if (*v12)
  {
    (*(void (**)(uint64_t *))(*v12 + 8))(v6[7]);
    *uint64_t v12 = 0LL;
  }

  uint64_t v13 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_46;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v12);
  --qword_18C468B10;
  off_18C4653A8(v12);
  uint64_t v12 = (uint64_t *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v13 = &xmmword_18C465410;
LABEL_46:
    (*v13)((uint64_t)v12);
  }

  a3 = *(void *)(v11 + 16);
  if (!a3) {
    goto LABEL_69;
  }
LABEL_44:
  uint64_t v37 = *(void *)(a3 + 24);
  if (v37) {
    return a3;
  }
  uint64_t v38 = *(_BYTE **)a3;
  while (2)
  {
    if (!v38)
    {
      uint64_t v45 = *(void *)(v11 + 16);
      goto LABEL_67;
    }

    uint64_t v39 = *(void *)(v11 + 656);
    uint64_t v40 = (char *)(v11 + 648);
    int __s = (char *)(v11 + 644);
    if (v39)
    {
      uint64_t v41 = *v38;
      if (*v38)
      {
        uint64_t v42 = 0;
        uint64_t v43 = (unsigned __int8 *)(*(void *)a3 + 1LL);
        do
        {
          uint64_t v42 = -1640531535 * (v42 + byte_1813C6343[v41]);
          uint64_t v44 = *v43++;
          uint64_t v41 = v44;
        }

        while (v44);
      }

      else
      {
        uint64_t v42 = 0;
      }

      uint64_t v46 = *(_DWORD *)(v11 + 640);
      uint64_t k = v42 / v46;
      int __s = (char *)(v39 + 16LL * (v42 % v46));
      uint64_t v40 = __s + 8;
    }

    uint64_t v47 = *(_DWORD *)__s;
    if (!*(_DWORD *)__s) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v40 = *(char **)v40;
      int __s = (char *)*((void *)v40 + 3);
      for (uint64_t k = *(void *)a3; ; ++k)
      {
        a6 = *__s;
        a7 = *(unsigned __int8 *)k;
        if ((_DWORD)a6 != (_DWORD)a7) {
          break;
        }
        if (!*__s) {
          goto LABEL_64;
        }
LABEL_58:
        ++__s;
      }

      a6 = byte_1813C6343[a6];
      a7 = byte_1813C6343[a7];
      if ((_DWORD)a6 == (_DWORD)a7) {
        goto LABEL_58;
      }
      --v47;
    }

    while (v47);
LABEL_63:
    uint64_t v40 = (char *)&qword_18C550660;
LABEL_64:
    uint64_t v48 = *((void *)v40 + 2);
    if (v48) {
      uint64_t v45 = v48 + 40LL * byte_1813C7177[v37] - 40;
    }
    else {
      uint64_t v45 = 0LL;
    }
LABEL_67:
    if (!*(void *)(v45 + 24))
    {
      if (++v37 == 3) {
        goto LABEL_69;
      }
      continue;
    }

    break;
  }

  uint64_t v60 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v45;
  *(_OWORD *)(a3 + 16) = v60;
  *(void *)(a3 + 32) = 0LL;
  return a3;
}

      *uint64_t v48 = 65;
LABEL_39:
      ++v9;
    }

    while (v9 != v70);
  }

  *a5 = v69;
  return v12;
}

        if (a1)
        {
          *((_DWORD *)a1 + 9) = 1;
          sub_181269368(*a1, "integer overflow", -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          return;
        }

        uint64_t v14 = 97407;
        goto LABEL_49;
      }

      int v20 = 0;
      goto LABEL_39;
    }

    uint64_t v14 = 0LL;
LABEL_37:
    sub_1812CF36C(91138);
    goto LABEL_38;
  }

  if (!v10)
  {
    size_t v15 = 1;
LABEL_58:
    *(_DWORD *)(v8 + 36) = v15;
    goto LABEL_78;
  }

  if ((unint64_t)*(unsigned int *)(v8 + 24) + 1 >= *(unsigned int *)(v8 + 16))
  {
    BOOL v11 = sub_1812D3698((void **)v8, 1LL);
    if (v11 < 1) {
      goto LABEL_78;
    }
  }

  else
  {
    BOOL v11 = 1;
  }

  uint64_t v17 = v11 + 1;
  do
  {
    uint64_t v18 = *(void *)(v8 + 8);
    uint64_t v19 = *(unsigned int *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v19 + 1;
    *(_BYTE *)(v18 + v19) = 44;
    --v17;
  }

  while (v17 > 1);
LABEL_78:
  ++*(_DWORD *)(v8 + 32);
  uint64_t result = (unsigned __int16 *)*a3;
  if (!*a3)
  {
    int v34 = 0LL;
    goto LABEL_86;
  }

  uint64_t v33 = result[10];
  if ((~v33 & 0x202) == 0 && *((_BYTE *)result + 22) == 1)
  {
    int v34 = (const void *)*((void *)result + 1);
    goto LABEL_93;
  }

  if ((v33 & 1) != 0)
  {
    int v34 = 0LL;
    goto LABEL_93;
  }

  int v34 = (const void *)sub_181303998((int *)result, 1);
  uint64_t result = (unsigned __int16 *)*a3;
  if (!*a3)
  {
LABEL_86:
    uint64_t result = (unsigned __int16 *)sub_1812CF36C(91138);
    goto LABEL_87;
  }

    uint64_t v17 = 0LL;
    uint64_t result = a3[6];
    if (result) {
      goto LABEL_39;
    }
LABEL_36:
    uint64_t result = sub_1812CF36C(89717);
LABEL_37:
    uint64_t v19 = 0LL;
    goto LABEL_41;
  }

  uint64_t v17 = *(char **)(v15 + 8);
  uint64_t result = a3[6];
  if (!result) {
    goto LABEL_36;
  }
LABEL_39:
  int v20 = *(_WORD *)(result + 20);
  if ((v20 & 0x24) != 0)
  {
    uint64_t v19 = *(void *)result;
    goto LABEL_41;
  }

  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x12) != 0 && *(void *)(result + 8))
    {
      uint64_t result = sub_181303DF0(result);
      uint64_t v19 = result;
      goto LABEL_41;
    }

    goto LABEL_37;
  }

  uint64_t v33 = *(double *)result;
  if (*(double *)result >= -9.22337204e18)
  {
    if (v33 <= 9.22337204e18) {
      uint64_t v19 = (uint64_t)v33;
    }
    else {
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v19 = 0x8000000000000000LL;
  }

  (*(void (**)(void))(**(void **)(v1 + 72) + 16LL))(*(void *)(v1 + 72));
  uint64_t v13 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_43:
    (*v13)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v13 = &xmmword_18C465410;
    goto LABEL_43;
  }

  return 0LL;
}

      uint64_t v14 = (uint64_t (**)(void))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_43;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(i);
      --qword_18C468B10;
      off_18C4653A8(i);
      uint64_t result = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v14 = (uint64_t (**)(void))&xmmword_18C465410;
LABEL_43:
        uint64_t result = (*v14)();
      }

      if (!v2) {
        return result;
      }
      size_t v15 = i == *(void **)(v2 + 16);
      uint64_t i = (void *)v2;
      if (v15)
      {
        uint64_t v16 = *(void **)(v2 + 24);
        for (i = (void *)v2; v16; uint64_t v16 = (void *)i[3])
        {
          do
          {
            uint64_t i = v16;
            uint64_t v16 = (void *)v16[2];
          }

          while (v16);
        }
      }
    }
  }

  return result;
}

    sub_18138A828(a1 + 15, (uint64_t)v10, (int)v9);
    uint64_t v23 = v9;
LABEL_39:
    uint64_t v27 = a1 + 15;
    uint64_t v28 = v23;
    uint64_t result = sub_18138A828(v27, (uint64_t)v10, (int)a3 - (uint64_t)v23);
    size_t v29 = a3 - v23;
    if (!(_DWORD)v29) {
      goto LABEL_50;
    }
    size_t v30 = *(_DWORD *)(a2 + 24);
    int v31 = *(_DWORD *)(a2 + 28);
    uint64_t v32 = (v30 + v29);
    if (v32 <= v31)
    {
      uint64_t result = *v10;
    }

    else
    {
      if (v31) {
        LODWORD(v33) = *(_DWORD *)(a2 + 28);
      }
      else {
        LODWORD(v33) = 64;
      }
      uint64_t v33 = (int)v33;
      do
      {
        int v34 = v33;
        v33 *= 2LL;
      }

      while (v34 < v32);
      int v35 = *v10;
      uint64_t result = sqlite3_initialize();
      if ((_DWORD)result || (uint64_t result = sub_18127D33C(v35, v34)) == 0)
      {
        *uint64_t v27 = 7;
        goto LABEL_50;
      }

      *(_DWORD *)(a2 + 28) = v34;
      *(void *)(a2 + 16) = result;
      size_t v30 = *(_DWORD *)(a2 + 24);
    }

    uint64_t result = (uint64_t)memcpy((void *)(result + v30), &a4[v28], v29);
    *(_DWORD *)(a2 + 24) += v29;
LABEL_50:
    *(_DWORD *)(a2 + 56) = 0;
    if (a3)
    {
      LODWORD(v36) = *(_DWORD *)(a2 + 60);
      if (v36 >= a3)
      {
        uint64_t v40 = 0LL;
        uint64_t result = *(void *)(a2 + 48);
        uint64_t v37 = a3;
LABEL_59:
        uint64_t result = (uint64_t)memcpy((void *)(result + v40), a4, v37);
        *(_DWORD *)(a2 + 56) += a3;
        goto LABEL_60;
      }

      if (!(_DWORD)v36) {
        LODWORD(v36) = 64;
      }
      uint64_t v36 = (int)v36;
      uint64_t v37 = a3;
      do
      {
        uint64_t v38 = v36;
        v36 *= 2LL;
      }

      while (v38 < a3);
      uint64_t v39 = *(void *)(a2 + 48);
      uint64_t result = sqlite3_initialize();
      if (!(_DWORD)result)
      {
        uint64_t result = sub_18127D33C(v39, v38);
        if (result)
        {
          *(_DWORD *)(a2 + 60) = v38;
          *(void *)(a2 + 48) = result;
          uint64_t v40 = *(int *)(a2 + 56);
          goto LABEL_59;
        }
      }

      *uint64_t v27 = 7;
    }

  *a4 = v7;
  return result;
}

      sub_1812CF36C(97441);
      return 0LL;
    case 3:
      if (*(_BYTE *)(a1 + 17)) {
        return 0LL;
      }
      if (a2)
      {
        int v5 = *(char **)(a1 + 2096);
        goto LABEL_43;
      }

void *sub_1812A01F4(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    int v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v2 + 80);
      int v5 = *(unsigned __int8 **)(v2 + 40);
      if (v5) {
        sub_181309110(v3, v5);
      }
      uint64_t v6 = *(void **)(v2 + 48);
      if (v6) {
        sub_181311F48(v3, v6);
      }
      uint64_t v7 = *(void *)(v2 + 16);
      if (v7) {
        sub_18128FDA0(v3, v7, 1);
      }
      uint64_t v8 = *(void **)(v2 + 56);
      if (v8)
      {
        int v9 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          uint64_t v10 = 0LL;
          uint64_t v11 = 1LL;
          do
          {
            uint64_t v12 = (void *)v8[v11];
            if (v12)
            {
              sub_1812F20DC(v3, v12);
              int v9 = *(_DWORD *)v8;
            }

            ++v10;
            v11 += 2LL;
          }

          while (v10 < v9);
        }

        sub_1813014B0(v3, v8);
      }

      uint64_t v13 = *(void **)(v2 + 64);
      if (v13) {
        sub_181311EB0(v3, v13);
      }
      sub_18128FF4C(v3, *(void **)(v2 + 32));
      uint64_t v14 = *(void **)(v2 + 72);
      if (v14) {
        sub_1812F20DC(v3, v14);
      }
      uint64_t result = sub_1812F20DC(v3, (void *)v2);
      uint64_t v2 = v4;
    }

    while (v4);
  }

  return result;
}

uint64_t sub_1812A02FC(uint64_t a1, void *a2, int *a3, _DWORD *a4)
{
  int v5 = a2;
  uint64_t v6 = *a3;
  *a4 = v6;
  if ((v6 & (v6 - 1)) != 0) {
    goto LABEL_10;
  }
  if ((_DWORD)v6) {
    unint64_t v8 = 48 * v6;
  }
  else {
    unint64_t v8 = 24LL;
  }
  if (a2)
  {
    if (*(void *)(a1 + 512) > (unint64_t)a2)
    {
      if (*(void *)(a1 + 496) <= (unint64_t)a2)
      {
        if (v8 < 0x81)
        {
LABEL_10:
          uint64_t v9 = (uint64_t)a2;
LABEL_15:
          uint64_t v10 = (void *)(v9 + 24LL * (int)v6);
          void *v10 = 0LL;
          v10[1] = 0LL;
          v10[2] = 0LL;
          ++*a3;
          return v9;
        }
      }

      else if (*(void *)(a1 + 504) <= (unint64_t)a2 && v8 <= *(unsigned __int16 *)(a1 + 438))
      {
        goto LABEL_10;
      }
    }

    uint64_t v9 = sub_1812F2310(a1, a2, v8);
    if (v9) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v9 = sub_1812F2264(a1, v8);
    if (v9) {
      goto LABEL_15;
    }
  }

  *a4 = -1;
  return (uint64_t)v5;
}

uint64_t sub_1812A03DC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = 0LL;
  while (v5 < *(int *)(a1 + 564))
  {
    uint64_t v7 = *(void *)(*(void *)(v6 + 8 * v5) + 16LL);
    if (v7 && (unint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL)) != 0LL)
    {
      uint64_t v9 = v8(v7);
      sub_181302CE4(a2, v7);
      ++v5;
      if ((_DWORD)v9)
      {
        *(void *)(a1 + 600) = v6;
        return v9;
      }
    }

    else
    {
      ++v5;
    }
  }

  uint64_t v11 = 0LL;
  int v12 = 0;
  int v13 = 0;
  *(void *)(a1 + 600) = v6;
  while (v11 < *(int *)(a1 + 40))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(v14 + 32 * v11 + 8);
    if (v15 && *(_BYTE *)(v15 + 16) == 2)
    {
      if (*(_BYTE *)(v15 + 17))
      {
        ++*(_DWORD *)(v15 + 20);
        if (!*(_BYTE *)(v15 + 18))
        {
          sub_1812FDE20(v15);
          uint64_t v14 = *(void *)(a1 + 32);
        }
      }

      uint64_t v16 = **(void **)(v15 + 8);
      if (*(_BYTE *)(v14 + 32 * v11 + 16) == 1 || ((0x34uLL >> *(_BYTE *)(v16 + 9)) & 1) != 0 || *(_BYTE *)(v16 + 16))
      {
        uint64_t v9 = *(unsigned int *)(v16 + 48);
        if (!(_DWORD)v9) {
          goto LABEL_27;
        }
      }

      else
      {
        if (!*(_BYTE *)(v16 + 20)) {
          ++v12;
        }
        uint64_t v9 = *(unsigned int *)(v16 + 48);
        if (!(_DWORD)v9)
        {
LABEL_27:
          if (!*(void *)(v16 + 344))
          {
            while (1)
            {
              unsigned int v18 = *(unsigned __int8 *)(v16 + 22);
              if (v18 >= 4 && v18 != 5) {
                break;
              }
              if (*(_BYTE *)(v16 + 17)) {
                goto LABEL_42;
              }
              uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v16 + 72) + 56LL))( *(void *)(v16 + 72),  4LL);
              if ((_DWORD)v20 != 5)
              {
                uint64_t v9 = v20;
                if ((_DWORD)v20) {
                  goto LABEL_21;
                }
LABEL_42:
                uint64_t v9 = 0LL;
                *(_BYTE *)(v16 + 22) = 4;
                goto LABEL_21;
              }

              if (!(*(unsigned int (**)(void))(v16 + 232))(*(void *)(v16 + 240)))
              {
                uint64_t v9 = 5LL;
                if (*(_BYTE *)(v15 + 17)) {
                  goto LABEL_22;
                }
                goto LABEL_29;
              }
            }
          }

          uint64_t v9 = 0LL;
          if (!*(_BYTE *)(v15 + 17)) {
            goto LABEL_29;
          }
LABEL_22:
          int v17 = *(_DWORD *)(v15 + 20) - 1;
          *(_DWORD *)(v15 + 20) = v17;
          if (!v17) {
            sub_1812FDEFC(v15);
          }
          goto LABEL_29;
        }
      }

LABEL_127:
  uint64_t v70 = *(void (**)(uint64_t, char *, void))(v32 + 48);
  if (v70) {
    v70(v32, v37, 0LL);
  }
LABEL_69:
  sub_1812F20DC((void *)a1, v36);
  return v9;
}

      uint64_t v105 = *(void *)(v105 + 64);
      if (!v105) {
        goto LABEL_14;
      }
    }
  }

  __int128 v120 = 1;
  uint64_t v113 = a11;
  size_t v25 = -1;
LABEL_14:
  uint64_t v29 = sub_18133F274((void **)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v31 = *(_DWORD *)(a1 + 56);
  uint64_t v32 = (v31 + 1);
  *(_DWORD *)(a1 + 56) = v32 + *(__int16 *)(a2 + 54);
  uint64_t v33 = *(_DWORD *)(v19 + 144);
  if (*(_DWORD *)(v19 + 148) <= v33)
  {
    sub_18131044C(v19, 80LL, v121, (v31 + 1), 0LL, v26, v27, v28);
  }

  else
  {
    *(_DWORD *)(v19 + 144) = v33 + 1;
    size_t v34 = *(void *)(v19 + 136) + 40LL * v33;
    *(_DWORD *)size_t v34 = 80;
    *(_DWORD *)(v34 + 4) = v121;
    *(_DWORD *)(v34 + 8) = v32;
    *(void *)(v34 + 12) = 0LL;
    *(void *)(v34 + 28) = 0LL;
    *(void *)(v34 + 20) = 0LL;
    *(_DWORD *)(v34 + 36) = 0;
  }

  int v35 = *(__int16 *)(a2 + 54);
  if (v35 >= 1)
  {
    uint64_t v36 = 0LL;
    uint64_t v37 = v29 | v25;
    uint64_t v38 = v31 + 2;
    int v39 = (int8x16_t)xmmword_1813CDDB0;
    uint64_t v40 = (int8x16_t)xmmword_1813CDDC0;
    BOOL v41 = (int8x16_t)xmmword_1813CDDD0;
    v42.i64[0] = 0x1000100010001LL;
    v42.i64[1] = 0x1000100010001LL;
    do
    {
      if (v37 == -1 || v36 <= 0x1F && ((v37 >> v36) & 1) != 0)
      {
        uint64_t v43 = v36;
        if ((v36 & 0x8000) == 0 && (*(_DWORD *)(a2 + 48) & 0x20) != 0)
        {
          uint64_t v44 = *(void *)(a2 + 8);
          if ((_WORD)v36)
          {
            if (v36 >= 0x11)
            {
              uint64_t v47 = 16LL;
              if ((v36 & 0xF) != 0) {
                uint64_t v47 = v36 & 0xF;
              }
              uint64_t v45 = v36 - v47;
              int v48 = v44 + 142;
              uint64_t v49 = 0uLL;
              uint64_t v50 = 0uLL;
              do
              {
                uint64_t v51 = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 64), v40);
                v51.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 32), v39).i32[3];
                v52.i32[0] = vzip1q_s16(*(int16x8_t *)(v48 - 128), *(int16x8_t *)(v48 - 112)).u32[0];
                v52.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 96), v41).i32[1];
                v52.i64[1] = v51.i64[1];
                char v123 = *(int8x16x2_t *)(v48 + 32);
                uint64_t v53 = vqtbl2q_s8(*(int8x16x2_t *)(v48 + 64), v40);
                v53.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v48 + 96), v39).i32[3];
                uint64_t v55 = *(int16x8_t *)v48;
                uint64_t v54 = *(int16x8_t *)(v48 + 16);
                v48 += 256LL;
                v54.i32[0] = vzip1q_s16(v55, v54).u32[0];
                v54.i32[1] = vqtbl2q_s8(v123, v41).i32[1];
                v54.i64[1] = v53.i64[1];
                uint64_t v49 = vaddq_s16((int16x8_t)vbicq_s8(v42, (int8x16_t)vshrq_n_u16(v52, 5uLL)), v49);
                uint64_t v50 = vaddq_s16((int16x8_t)vbicq_s8(v42, (int8x16_t)vshrq_n_u16((uint16x8_t)v54, 5uLL)), v50);
                v47 += 16LL;
              }

              while (v36 != v47);
              uint64_t v30 = vaddq_s16(v50, v49);
              v30.i16[0] = vaddvq_s16(v30);
              uint64_t v46 = v30.i16[0];
            }

            else
            {
              uint64_t v45 = 0LL;
              uint64_t v46 = 0;
            }

            int v56 = (unsigned __int16 *)(v44 + 16 * v45 + 14);
            do
            {
              uint64_t v57 = *v56;
              v56 += 8;
              v46 += ((v57 >> 5) & 1) == 0;
              ++v45;
            }

            while (v36 != v45);
          }

          else
          {
            uint64_t v46 = 0;
          }

          else {
            uint64_t v43 = v46;
          }
        }

        *(double *)v30.i64 = sub_18131C0EC(v19, a2, a4, v36, (v38 + v43), v26, v27, v28, v30);
        LOWORD(v35) = *(_WORD *)(a2 + 54);
        uint64_t v40 = (int8x16_t)xmmword_1813CDDC0;
        int v39 = (int8x16_t)xmmword_1813CDDB0;
        BOOL v41 = (int8x16_t)xmmword_1813CDDD0;
        v42.i64[0] = 0x1000100010001LL;
        v42.i64[1] = 0x1000100010001LL;
      }

      ++v36;
    }

    while ((uint64_t)v36 < (__int16)v35);
  }

  if (v14)
  {
    double v58 = *(_DWORD *)(v19 + 144);
    uint64_t v59 = v14;
    int v21 = v114;
    unsigned int v18 = a10;
    do
    {
      if (*(unsigned __int8 *)(v59 + 16) == 128 && *(_BYTE *)(v59 + 17) == 1)
      {
        if (*(_BYTE *)(v59 + 18))
        {
          if (!*(void *)(a1 + 168)) {
            sub_1813402F0(a1, v59, a2, v32);
          }
        }

        else
        {
          sub_1812BED80(a1, (uint64_t *)v59, a2, v32, a10, v114, v27, v28);
        }
      }

      uint64_t v59 = *(void *)(v59 + 64);
    }

    while (v59);
    uint64_t v60 = *(_DWORD *)(v19 + 144);
    uint64_t v61 = v58 < v60;
    uint64_t v20 = v115;
    int v17 = v113;
    if (v61)
    {
      if (*(_DWORD *)(v19 + 148) <= v60)
      {
        sub_181310690(v19, v118, a4, v114, v121, v119, v27, v28);
      }

      else
      {
        *(_DWORD *)(v19 + 144) = v60 + 1;
        uint64_t v62 = *(void *)(v19 + 136) + 40LL * v60;
        *(_BYTE *)uint64_t v62 = v118;
        *(_WORD *)(v62 + 2) = 0;
        *(_DWORD *)(v62 + 4) = a4;
        *(_DWORD *)(v62 + 8) = v114;
        *(_DWORD *)(v62 + 12) = v121;
        *(_DWORD *)(v62 + 16) = v119;
        *(_BYTE *)(v62 + 1) = -3;
        *(void *)(v62 + 24) = 0LL;
        *(void *)(v62 + 32) = 0LL;
      }

      a12 = -1;
    }
  }

  else
  {
    unsigned int v18 = a10;
    uint64_t v20 = v115;
    int v17 = v113;
    int v21 = v114;
  }

  sub_1812AA984((uint64_t *)a1, a2, v32, 0LL, 0LL, 0LL, v27, v28);
LABEL_63:
  if (*(_BYTE *)(a2 + 63) == 2) {
    goto LABEL_86;
  }
  sub_18133F7E0(a1, a2, a4, v116, 0LL, a12, a9);
  uint64_t v70 = v117 != 0;
  uint64_t v71 = *(_DWORD *)(v19 + 144);
  if (*(_DWORD *)(v19 + 148) <= v71)
  {
    sub_18131044C(v19, 130LL, a4, v70, 0LL, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 30)) {
      goto LABEL_74;
    }
LABEL_68:
    uint64_t v73 = *(unsigned __int8 **)a2;
    if (*(void *)a2)
    {
      for (uint64_t j = "sqlite_stat1"; ; ++j)
      {
        uint64_t v75 = *v73;
        uint64_t v76 = *(unsigned __int8 *)j;
        if ((_DWORD)v75 == (_DWORD)v76)
        {
          if (!*v73) {
            goto LABEL_74;
          }
        }

        else if (byte_1813C6343[v75] != byte_1813C6343[v76])
        {
          goto LABEL_76;
        }

        ++v73;
      }
    }

    goto LABEL_76;
  }

  *(_DWORD *)(v19 + 144) = v71 + 1;
  int v72 = *(void *)(v19 + 136) + 40LL * v71;
  *(_DWORD *)int v72 = 130;
  *(_DWORD *)(v72 + 4) = a4;
  *(_DWORD *)(v72 + 8) = v70;
  *(void *)(v72 + 12) = 0LL;
  *(void *)(v72 + 28) = 0LL;
  *(void *)(v72 + 20) = 0LL;
  *(_DWORD *)(v72 + 36) = 0;
  if (*(_BYTE *)(a1 + 30)) {
    goto LABEL_68;
  }
LABEL_74:
  if (!*(_BYTE *)(*(void *)v19 + 103LL))
  {
    uint64_t v77 = *(void *)(v19 + 136) + 40LL * *(int *)(v19 + 144);
    *(_BYTE *)(v77 - 39) = -5;
    *(void *)(v77 - 24) = a2;
  }

                  uint64_t v69 = 0LL;
LABEL_128:
                  v54 |= v69;
                  if (++v68 >= v67) {
                    goto LABEL_104;
                  }
                }
              }
            }

            uint64_t v54 = 0LL;
LABEL_104:
            v3 |= v54;
          }

          if (++v53 >= *v6) {
            break;
          }
          continue;
        }
      }

      a2 = v77[10];
      if (!a2) {
        return v3;
      }
    }

    if ((*((_DWORD *)v39 + 1) & 0x810000) == 0)
    {
      BOOL v41 = sub_181332EB0(a1, v39);
      goto LABEL_86;
    }

uint64_t sub_1812A0BC0(uint64_t a1, _BYTE *a2, double a3)
{
  if (*(_BYTE *)(a1 + 16) != 2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1812FDE20(a1);
    if (!*(_BYTE *)(v5 + 33)) {
      goto LABEL_8;
    }
  }

  else if (!*(_BYTE *)(v5 + 33))
  {
LABEL_8:
    uint64_t v9 = *(void *)v5;
    if (*(_BYTE *)(v5 + 35)) {
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v5 + 64);
    }
    uint64_t v10 = sub_1812AFF08(v9, a2, 0);
LABEL_11:
    uint64_t v11 = v10;
    if (!*(_BYTE *)(a1 + 17)) {
      return v11;
    }
    goto LABEL_12;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)v6;
  for (uint64_t i = *(void *)(v6 + 16); i; uint64_t i = *(void *)(i + 40))
    *(_BYTE *)(i + 1) &= ~4u;
  if (*(_BYTE *)(v6 + 34)) {
    goto LABEL_8;
  }
  unsigned int v14 = *(_DWORD *)(v6 + 64);
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    unsigned int v16 = v15 / (*(_DWORD *)(v6 + 56) / 5u + 1) * (*(_DWORD *)(v6 + 56) / 5u + 1);
    else {
      int v17 = 2;
    }
    if (v17 + v16 == v14) {
      goto LABEL_26;
    }
  }

  else if (!v14)
  {
    goto LABEL_26;
  }

  unsigned int v18 = dword_18C54FA50;
  if (v14 == dword_18C54FA50 / *(_DWORD *)(v6 + 52) + 1)
  {
LABEL_26:
    uint64_t v10 = sub_1812FBF50(81006);
    goto LABEL_11;
  }

  uint64_t v19 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v6 + 24) + 80LL) + 36LL));
  uint64_t v20 = *(void *)a1;
  int v21 = *(uint64_t (**)(void, void, void, uint64_t))(*(void *)a1 + 336LL);
  if (v21)
  {
    uint64_t v22 = *(unsigned int *)(v20 + 40);
    uint64_t v23 = *(void *)(v20 + 32);
    if ((int)v22 < 1)
    {
      LODWORD(v24) = 0;
    }

    else
    {
      uint64_t v24 = 0LL;
      size_t v25 = (void *)(v23 + 8);
      while (*v25 != a1)
      {
        ++v24;
        v25 += 4;
        if (v22 == v24)
        {
          LODWORD(v24) = *(_DWORD *)(v20 + 40);
          break;
        }
      }
    }

    unsigned int v27 = v21(*(void *)(v20 + 320), *(void *)(v23 + 32LL * v24), *(unsigned int *)(v6 + 64), v19);
    else {
      unsigned int v26 = v27;
    }
    if (!v26) {
      goto LABEL_8;
    }
    unsigned int v18 = dword_18C54FA50;
  }

  else
  {
    unsigned int v26 = v19;
  }

  unsigned int v28 = *(_DWORD *)(v6 + 56) / 5u;
  if (v14 > 1)
  {
    unsigned int v30 = v28 + 1;
    int v32 = v15 / v30 * v30;
    int v31 = v18 / *(_DWORD *)(v6 + 52);
    if (v32 + 1 == v31) {
      int v33 = 3;
    }
    else {
      int v33 = 2;
    }
    int v29 = v33 + v32;
  }

  else
  {
    int v29 = 0;
    unsigned int v30 = v28 + 1;
    int v31 = v18 / *(_DWORD *)(v6 + 52);
  }

  unsigned int v34 = v14 - v26 - (v26 - v14 + v28 + v29) / v28;
  unsigned int v35 = v31 + 1;
  BOOL v36 = v31 + 1 >= v14 || v34 >= v35;
  int v37 = !v36;
  unsigned int v38 = v34 - v37;
  do
  {
    unsigned int v39 = v38;
    BOOL v36 = v38 >= 2;
    unsigned int v40 = v38 - 2;
    if (v36)
    {
      int v42 = v40 / v30 * v30;
      if (v42 + 1 == v31) {
        int v43 = 3;
      }
      else {
        int v43 = 2;
      }
      int v41 = v43 + v42;
    }

    else
    {
      int v41 = 0;
    }

    unsigned int v38 = v39 - 1;
  }

  while (v39 == v41 || v39 == v35);
  if (v39 > v14)
  {
    uint64_t v10 = sub_1812FBF50(81033);
    goto LABEL_11;
  }

  int v54 = v19;
  if (v39 >= v14)
  {
    uint64_t v11 = 0LL;
    BOOL v46 = 1;
  }

  else
  {
    uint64_t v44 = *(unsigned __int8 **)(v6 + 16);
    if (v44 && (uint64_t v45 = sub_1812FFCF0(v44, 0, 0LL), (_DWORD)v45))
    {
      uint64_t v11 = v45;
      BOOL v46 = 0;
    }

    else
    {
      BOOL v47 = v26 == v19;
      do
      {
        uint64_t v48 = sub_1812FF924(v6, v39, v14, v47);
        uint64_t v11 = v48;
        --v14;
        BOOL v46 = (_DWORD)v48 == 0;
      }

      while (v14 > v39 && !(_DWORD)v48);
    }
  }

  BOOL v49 = !v46;
  if ((_DWORD)v11 == 101) {
    BOOL v49 = 0;
  }
  if (!v49 && v54)
  {
    uint64_t v50 = *(void *)(*(void *)(v6 + 24) + 112LL);
    uint64_t v51 = *(_DWORD **)(v50 + 40);
    if ((*(_WORD *)(v50 + 52) & 4) != 0 && v51[8] >= *(_DWORD *)(v50 + 48))
    {
      if (!v51[32])
      {
        uint64_t v11 = 0LL;
        goto LABEL_84;
      }

      uint64_t v52 = sub_1812FAFE4(v50);
    }

    else
    {
      uint64_t v11 = v51[12];
      if ((_DWORD)v11)
      {
LABEL_84:
        uint64_t v53 = *(void *)(v6 + 24);
        if (v26 == v54)
        {
          *(_DWORD *)(*(void *)(v53 + 80) + 32LL) = 0;
          *(_DWORD *)(*(void *)(*(void *)(v6 + 24) + 80LL) + 36LL) = 0;
          uint64_t v53 = *(void *)(v6 + 24);
        }

        *(_DWORD *)(*(void *)(v53 + 80) + 28LL) = bswap32(v39);
        *(_BYTE *)(v6 + 35) = 1;
        *(_DWORD *)(v6 + 64) = v39;
        goto LABEL_87;
      }

      if (v51[46] <= v51[50]) {
        uint64_t v52 = sub_1812ABE24(v50);
      }
      else {
        uint64_t v52 = sub_1812FED50(v50);
      }
    }

    uint64_t v11 = v52;
    goto LABEL_84;
  }

LABEL_87:
  if (!(_DWORD)v11) {
    goto LABEL_8;
  }
  sub_1812B5930(v7, a3);
  if (!*(_BYTE *)(a1 + 17)) {
    return v11;
  }
LABEL_12:
  int v12 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v12;
  if (!v12) {
    sub_1812FDEFC(a1);
  }
  return v11;
}

  __int128 v119 = v55;
  __int128 v121 = v27;
  if ((_DWORD)v50 == 1)
  {
    if ((*(_DWORD *)(*((void *)v126 + 1) + 48LL) & 0x80000000) != 0)
    {
      uint64_t v59 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v59)
      {
        uint64_t v59 = sub_18131044C(v14, 15LL, 0LL, 0LL, 0LL, (uint64_t)a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v59 + 1;
        uint64_t v60 = *(void *)(v14 + 136) + 40LL * v59;
        *(_BYTE *)uint64_t v60 = 15;
        *(_OWORD *)(v60 + 1) = 0u;
        *(_OWORD *)(v60 + 17) = 0u;
        *(void *)(v60 + 32) = 0LL;
      }

      sub_18128BBE0((void *)a1, v15, v55, v27, 112LL, (uint64_t)a6, a7, a8);
      sub_18131CCF8( (uint64_t *)a1,  0,  "USING ROWID SEARCH ON TABLE %s FOR IN-OPERATOR",  v95,  v96,  v97,  v98,  v99,  *(void *)v27);
      if (*(_BYTE *)(*(void *)v14 + 103LL)) {
        __int128 v100 = &byte_18C550680;
      }
      else {
        __int128 v100 = (char *)(*(void *)(v14 + 136) + 40LL * v59);
      }
      *((_DWORD *)v100 + 2) = *(_DWORD *)(v14 + 144);
      uint64_t result = 1LL;
      goto LABEL_50;
    }
  }

  else if ((int)v50 < 1)
  {
    goto LABEL_129;
  }

  uint64_t v61 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v124 = *v61;
  uint64_t v127 = (int **)(v61 + 32);
  uint64_t v62 = 2LL;
  uint64_t v63 = 1LL;
  __int128 v120 = v61;
  do
  {
    uint64_t v64 = v124;
    if (v124 == 176) {
      uint64_t v64 = v61[2];
    }
    uint64_t v65 = v127;
    if (v64 != 177)
    {
      int v66 = v61;
      if (v64 != 138) {
        goto LABEL_103;
      }
      uint64_t v65 = (int **)(*v127 + 8);
    }

    int v66 = v61;
    if (**v65 >= 2)
    {
      if (v124 == 138 || (uint64_t v67 = v127, v61[2] == 138)) {
        uint64_t v67 = (int **)(*v127 + 8);
      }
      int v66 = *(unsigned __int8 **)&(*v67)[v62];
    }

      if ((int)v39 < v24)
      {
        unsigned int v39 = (v39 + 1);
        if (!(_DWORD)v22) {
          continue;
        }
      }

      goto LABEL_92;
    }

    uint64_t v22 = v41[12];
    if (!(_DWORD)v22)
    {
      if (v41[46] <= v41[50]) {
        int v42 = sub_1812ABE24(block);
      }
      else {
        int v42 = sub_1812FED50(block);
      }
LABEL_82:
      uint64_t v22 = v42;
    }

    int v43 = block;
    if ((void)block) {
      goto LABEL_84;
    }
    goto LABEL_87;
  }

        uint64_t v57 = v128;
        uint64_t v4 = (uint64_t)v130;
      }
    }
  }

  uint64_t v11 = v122;
  uint64_t v7 = v126;
  uint64_t v6 = v132;
  if (!v124) {
    return result;
  }
LABEL_128:
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = (char *)v6 + 604;
  char v80 = -1;
  while (2)
  {
    uint64_t v81 = *(_DWORD *)(v12 + 20);
    if (v81 < 1) {
      break;
    }
    uint64_t v82 = *(void *)(v12 + 32);
    int v83 = v82 + 18;
    while (1)
    {
      *(_WORD *)(v82 + 18) &= ~0x40u;
      uint64_t v85 = *(_DWORD *)(v82 + 28);
      if (v85 != v80)
      {
        if (*((_DWORD *)v132 + 150) == v85)
        {
          uint64_t v84 = 1LL;
        }

        else
        {
          int v86 = *((unsigned int *)v132 + 149);
          if ((int)v86 < 2)
          {
LABEL_140:
            uint64_t v84 = 0LL;
          }

          else
          {
            __int16 v87 = 0LL;
            uint64_t v88 = v86 - 1;
            while (1)
            {
              uint64_t v89 = *(_DWORD *)&v79[4 * v87++];
              if (v89 == v85) {
                break;
              }
              if (v88 == v87) {
                goto LABEL_140;
              }
            }

            uint64_t v84 = 1LL << v87;
          }
        }

        if ((v84 & v124) != 0) {
          break;
        }
      }

      v82 += 56LL;
      v83 += 56LL;
      BOOL v46 = v81-- <= 1;
      if (v46)
      {
        uint64_t v11 = v122;
        goto LABEL_165;
      }
    }

    if (v81 < 1)
    {
      uint64_t v78 = 1;
      goto LABEL_162;
    }

    __int128 v120 = v77;
    BOOL v90 = 0;
    uint64_t v91 = *(_DWORD *)(v82 + 32);
    uint64_t v129 = *(unsigned __int8 **)(*(void *)v82 + 16LL);
    while (2)
    {
      if (*(_DWORD *)(v83 + 10) != v85)
      {
        *(_WORD *)v83 &= ~0x40u;
        goto LABEL_145;
      }

      if (*(_DWORD *)(v83 + 14) != v91) {
        goto LABEL_159;
      }
      uint64_t v92 = *(void *)(v83 - 18);
      if (v91 != -2)
      {
LABEL_151:
        uint64_t v93 = sub_1812A3C7C(*(unsigned __int8 **)(v92 + 24));
        uint64_t result = (void *)sub_1812A3C7C(*(unsigned __int8 **)(v92 + 16));
        if (v93) {
          BOOL v94 = v93 == (_DWORD)result;
        }
        else {
          BOOL v94 = 1;
        }
        if (!v94)
        {
          uint64_t v78 = 0;
          uint64_t v4 = (uint64_t)v130;
          uint64_t v7 = v126;
          goto LABEL_161;
        }

        *(_WORD *)v83 |= 0x40u;
        uint64_t v7 = v126;
LABEL_145:
        ++v90;
        v83 += 56LL;
        if (v81 == v90)
        {
          uint64_t v78 = 1;
          goto LABEL_160;
        }

        continue;
      }

      break;
    }

    uint64_t result = (void *)sub_18131BA10((uint64_t)v7, *(unsigned __int8 **)(v92 + 16), v129, 0xFFFFFFFFLL);
    if (!(_DWORD)result)
    {
      uint64_t v92 = *(void *)(v83 - 18);
      goto LABEL_151;
    }

    unsigned int v35 = 0;
    goto LABEL_88;
  }

  unsigned int v35 = *((_DWORD *)result + 4);
  if ((result[10] & 0x400) != 0) {
    v35 += *(_DWORD *)result;
  }
LABEL_88:
  if (!v34) {
    return result;
  }
  if (v35 <= 0)
  {
    if (!v35) {
      return result;
    }
    uint64_t v9 = 32737;
    return (unsigned __int16 *)sub_1812CF36C(v9);
  }

  BOOL v36 = *(unsigned int *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v36 + v35;
  return (unsigned __int16 *)memcpy((void *)(*(void *)(v8 + 8) + v36), v34, v35);
}

              unsigned int v39 = 0;
            }

uint64_t sub_1812A1010(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16)) {
    return 0LL;
  }
  if (!*(_BYTE *)(a1 + 17) || (++*(_DWORD *)(a1 + 20), *(_BYTE *)(a1 + 18)))
  {
    if (v2 != 2) {
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(unsigned int *)(*(void *)v5 + 48LL);
    if (!(_DWORD)v7)
    {
      ++*(_DWORD *)(v6 + 132);
      if (*(_BYTE *)(v6 + 21) == 2 && *(_BYTE *)(v6 + 8) && *(_BYTE *)(v6 + 9) == 1)
      {
        *(_BYTE *)(v6 + 21) = 1;
LABEL_28:
        --*(_DWORD *)(a1 + 28);
        *(_BYTE *)(v5 + 36) = 1;
        sub_1812C08E0(*(void *)(v5 + 96));
        *(void *)(v5 + 96) = 0LL;
        goto LABEL_29;
      }

      uint64_t v8 = sub_1812A1380(v6, *(unsigned __int8 *)(v6 + 24), 1);
      uint64_t v7 = v8;
      if (v8 == 13 || v8 == 10)
      {
        *(_DWORD *)(v6 + 48) = v8;
        *(_BYTE *)(v6 + 21) = 6;
        if ((_DWORD)v8)
        {
          uint64_t v10 = sub_1812FCAFC;
        }

        else if (*(_BYTE *)(v6 + 27) && !*(void *)(v6 + 296))
        {
          uint64_t v10 = sub_1812FCB08;
        }

        else
        {
          uint64_t v10 = sub_1812FCD58;
        }

        *(void *)(v6 + 288) = v10;
      }
    }

    if (!a2 && (_DWORD)v7)
    {
      if (!*(_BYTE *)(a1 + 17)) {
        return v7;
      }
      goto LABEL_31;
    }

    goto LABEL_28;
  }

  sub_1812FDE20(a1);
  if (*(_BYTE *)(a1 + 16) == 2) {
    goto LABEL_5;
  }
LABEL_29:
  sub_1812A119C(a1);
  if (!*(_BYTE *)(a1 + 17)) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
LABEL_31:
  int v11 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v11;
  if (!v11) {
    sub_1812FDEFC(a1);
  }
  return v7;
}

uint64_t sub_1812A119C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  *(_BYTE *)(v3 + 35) = 0;
  if (*(_BYTE *)(result + 16))
  {
    if (*(int *)(v2 + 212) >= 2)
    {
      if (*(void *)(v3 + 128) == result)
      {
        *(void *)(v3 + 128) = 0LL;
        *(_WORD *)(v3 + 40) &= 0xFF3Fu;
        for (uint64_t i = *(void *)(v3 + 120); i; uint64_t i = *(void *)(i + 16))
          *(_BYTE *)(i + 12) = 1;
      }

      *(_BYTE *)(result + 16) = 1;
      return result;
    }

    uint64_t v6 = (uint64_t *)(v3 + 120);
    uint64_t v5 = *(void *)(v3 + 120);
    if (v5)
    {
      do
      {
        if (*(void *)v5 == v1)
        {
          uint64_t v7 = *(void *)(v5 + 16);
          *uint64_t v6 = v7;
          if (*(_DWORD *)(v5 + 8) == 1) {
            goto LABEL_11;
          }
          uint64_t v8 = &off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v5);
            --qword_18C468B10;
            uint64_t result = off_18C4653A8(v5);
            uint64_t v5 = xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_10;
            }
            uint64_t v8 = &xmmword_18C465410;
          }

          uint64_t result = (*v8)(v5);
        }

        else
        {
          uint64_t v6 = (uint64_t *)(v5 + 16);
        }

LABEL_10:
        uint64_t v7 = *v6;
LABEL_11:
        uint64_t v5 = v7;
      }

      while (v7);
    }

    if (*(void *)(v3 + 128) == v1)
    {
      *(void *)(v3 + 128) = 0LL;
      int v9 = *(_DWORD *)(v3 + 60);
      __int16 v10 = -193;
    }

    else
    {
      int v9 = *(_DWORD *)(v3 + 60);
      if (v9 != 2) {
        goto LABEL_25;
      }
      __int16 v10 = -129;
    }

    *(_WORD *)(v3 + 40) &= v10;
LABEL_25:
    int v11 = v9 - 1;
    *(_DWORD *)(v3 + 60) = v11;
    if (!v11) {
      *(_BYTE *)(v3 + 36) = 0;
    }
  }

  *(_BYTE *)(v1 + 16) = 0;
  if (!*(_BYTE *)(v3 + 36))
  {
    uint64_t v12 = *(void *)(v3 + 24);
    if (v12)
    {
      *(void *)(v3 + 24) = 0LL;
      return sub_1812F1ABC(*(void *)(v12 + 112));
    }
  }

  return result;
}

    *(_BYTE *)(a1 + 21) = 0;
    goto LABEL_12;
  }

  if (!*(_BYTE *)(a1 + 8))
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (!*(void *)v8
      || ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 96LL))(v8) & 0x800) == 0
      || (*(_BYTE *)(a1 + 9) & 5) != 1)
    {
      int v9 = *(void *)(a1 + 80);
      if (*(void *)v9)
      {
        (*(void (**)(void))(*(void *)v9 + 8LL))(*(void *)(a1 + 80));
        *(void *)int v9 = 0LL;
      }
    }

    uint64_t result = *(void *)(a1 + 72);
    if (*(void *)result)
    {
      if (*(_BYTE *)(a1 + 17)) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 64LL))(result, 0LL);
      }
      if (*(_BYTE *)(a1 + 22) != 5) {
        *(_BYTE *)(a1 + 22) = 0;
      }
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
      if ((_DWORD)result && *(_BYTE *)(a1 + 21) == 6) {
        *(_BYTE *)(a1 + 22) = 5;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    }

    goto LABEL_10;
  }

  if (!v14)
  {
    __int128 v120 = 0;
    int v32 = 0LL;
    goto LABEL_63;
  }

  uint64_t v115 = v20;
  uint64_t v114 = v20 - 1;
  if (*(_BYTE *)(a2 + 63) != 2)
  {
    __int128 v120 = 1;
LABEL_125:
    uint64_t v113 = a11;
    size_t v25 = 0;
    uint64_t v105 = v14;
    while (1)
    {
      if (*(_BYTE *)(v105 + 18))
      {
        size_t v25 = -1;
      }

      else
      {
        int v106 = *(void *)(a1 + 168);
        if (!v106) {
          int v106 = a1;
        }
        __int16 v107 = *(void *)(v106 + 184);
        if (v107)
        {
          while (*(void *)v107 != v105 || *(_DWORD *)(v107 + 24) != a10)
          {
            __int16 v107 = *(void *)(v107 + 8);
            if (!v107) {
              goto LABEL_134;
            }
          }
        }

        else
        {
LABEL_134:
          __int16 v107 = sub_1812BE6C4(a1, (uint64_t *)v105, a2, a10);
          *(_DWORD *)(*(void *)a1 + 84LL) = -1;
          if (!v107) {
            goto LABEL_127;
          }
        }

        v25 |= *(_DWORD *)(v107 + 28);
      }

  uint64_t v5 = (_WORD)a2 + v3 + 1;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v6) {
    return (unsigned __int16)(v2 + v5 - (_WORD)a2);
  }
  if (v7 > v6) {
    LOWORD(v7) = *(_WORD *)(a1 + 16);
  }
  return (unsigned __int16)(v7 + v5 - (_WORD)a2 + 4);
}

  *(void *)&uint64_t v440 = 0LL;
  LODWORD(v449[0]) = 0;
  uint64_t v8 = *(void *)(v3 + 72);
  int v9 = *(void *)(v3 + 112);
  __int16 v10 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v10[8] >= *(_DWORD *)(v9 + 48))
  {
    if (v10[32])
    {
      int v11 = sub_1812FAFE4(v9);
      if ((_DWORD)v11) {
        goto LABEL_505;
      }
    }
  }

  else
  {
    int v11 = v10[12];
    if ((_DWORD)v11)
    {
LABEL_505:
      *(void *)(v1 + 152) = 0LL;
      goto LABEL_502;
    }

    if (v10[46] <= v10[50])
    {
      int v11 = sub_1812ABE24(v9);
      if ((_DWORD)v11) {
        goto LABEL_505;
      }
    }

    else
    {
      int v11 = sub_1812FED50(v9);
      if ((_DWORD)v11) {
        goto LABEL_505;
      }
    }
  }

  LODWORD(v458) = sub_1812B48CC(v8, (uint64_t *)&v440, (int *)v449, *(_DWORD *)(v3 + 4), 0);
  uint64_t v5 = v440;
  sub_1812B7EE4(v3, v440, &v458);
  if (*(_BYTE *)(v8 + 33)) {
    sub_1812C0570((_DWORD *)v8, (int)v449[0], 5, *(_DWORD *)(v3 + 4), &v458);
  }
  int v11 = v458;
  if (!(_DWORD)v458)
  {
    memcpy((void *)(v5 + 28), (const void *)(v3 + 28), 2LL * *(unsigned __int8 *)(v3 + 12));
    memcpy((void *)(v5 + 40), (const void *)(v3 + 40), 8LL * *(unsigned __int8 *)(v3 + 12));
    *(_BYTE *)(v5 + 12) = *(_BYTE *)(v3 + 12);
    sub_1812B47EC(v3, **(_BYTE **)(v5 + 80) & 0xF7);
    *(_DWORD *)(*(unsigned __int8 *)(v3 + 9) + *(void *)(v3 + 80) + 8LL) = bswap32(v449[0]);
    *(_BYTE *)(v1 + 84) = 1;
    *(_DWORD *)(v1 + 86) = 0;
    *(void *)(v1 + 144) = v3;
    *(void *)(v1 + 152) = v5;
    goto LABEL_4;
  }

  *(void *)(v1 + 152) = 0LL;
  if (v5)
  {
    uint64_t v387 = *(void *)(v5 + 112);
    if ((*(_WORD *)(v387 + 52) & 0x20) != 0)
    {
      int v388 = *(void *)(v387 + 40);
      --*(_DWORD *)(v388 + 152);
      *(void *)(v387 + 32) = *(void *)(v388 + 168);
      *(void *)(v388 + 168) = v387;
      (*(void (**)(void, void, void))(**(void **)(v388 + 72) + 144LL))( *(void *)(v388 + 72),  *(void *)(v388 + 200) * (*(_DWORD *)(v387 + 48) - 1),  *(void *)(v387 + 8));
    }

    else
    {
      sub_1812F9F44(v387);
    }
  }

  uint64_t result = sub_1812CF36C(97220);
  LODWORD(v9) = 1;
LABEL_11:
  if ((_DWORD)v9) {
    __int16 v10 = v7 == 0LL;
  }
  else {
    __int16 v10 = 1;
  }
  if (!v10) {
LABEL_15:
  }
    ++*v7;
  return result;
}

  if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
  {
    uint64_t result = sub_181303BA0((uint64_t)a1);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v2 = *((_WORD *)a1 + 10);
  }

  int v13 = v31;
LABEL_11:
  v29[0] = MEMORY[0x1895F87A8];
  v29[1] = 0x40000000LL;
  v29[2] = sub_1812E6908;
  v29[3] = &unk_189B6CDE8;
  v29[4] = &v36;
  unsigned int v14 = sqlite3_exec_b(a1, v13, (uint64_t)v29, v5, v6, v7, v8, v9);
  if (!v13) {
    goto LABEL_18;
  }
  unsigned int v15 = (void (**)(unsigned __int8 *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_17;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
  --qword_18C468B10;
  off_18C4653A8(v13);
  int v13 = (unsigned __int8 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    unsigned int v15 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_17:
    (*v15)(v13);
  }

  uint64_t v8 = strlen((const char *)__s) & 0x3FFFFFFF;
  int v9 = a1 + 11;
  __int16 v10 = (v8 + 1);
  int v11 = a1 + 11;
  do
  {
LABEL_11:
    int v11 = (void *)*v11;
    if (!v11)
    {
      if (sqlite3_initialize() || (uint64_t v22 = sub_18126F0AC((v8 + 65))) == 0)
      {
        int __s = 7LL;
      }

      else
      {
        uint64_t v23 = v22;
        a1[7] += (int)off_18C4653B8(v22);
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)uint64_t v23 = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(void *)(v23 + 8) = v23 + 64;
        memcpy((void *)(v23 + 64), (const void *)__s, v10);
        do
        {
          uint64_t v24 = v9;
          int v9 = (uint64_t *)*v9;
        }

        while (v9);
        int __s = 0LL;
        *uint64_t v24 = v23;
      }

      goto LABEL_24;
    }

    uint64_t v12 = (_BYTE *)v11[1];
  }

  while (!v12);
  int v13 = v8 + 2;
  unsigned int v14 = (unsigned __int8 *)__s;
  while (1)
  {
    unsigned int v15 = *v12;
    if (!*v12) {
      break;
    }
    LODWORD(v15) = byte_1813C6343[v15];
    unsigned int v16 = byte_1813C6343[*v14];
    if ((_DWORD)v15 != v16) {
      goto LABEL_19;
    }
    ++v12;
    ++v14;
  }

  unsigned int v16 = byte_1813C6343[*v14];
LABEL_19:
  if ((_DWORD)v15 != v16) {
    goto LABEL_11;
  }
LABEL_20:
  int __s = 0LL;
LABEL_24:
  int v17 = *a1;
  if (!*a1)
  {
    uint64_t v19 = "NULL";
    goto LABEL_33;
  }

  unsigned int v18 = *(unsigned __int8 *)(v17 + 113);
  if (v18 == 186)
  {
LABEL_28:
    uint64_t v19 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    sub_1812CF36C(186024);
    return __s;
  }

  if (v18 != 118)
  {
    if (v18 != 109)
    {
      uint64_t v19 = "invalid";
      goto LABEL_33;
    }

    goto LABEL_28;
  }

  uint64_t v20 = *(void *)(v17 + 24);
  if (v20) {
    xmmword_18C465410(v20);
  }
  return __s;
}

  *((_DWORD *)a1 + 5) = a2;
  uint64_t v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    __int16 v10 = "NULL";
    goto LABEL_22;
  }

  *((_DWORD *)a1 + 6) = a2;
  uint64_t v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    __int16 v10 = "NULL";
    goto LABEL_22;
  }

      *(void *)(v14 + 16) = 0LL;
      unsigned int v16 = *(void *)(v14 + 8);
      if (v16)
      {
        while (*(void *)(v16 + 56))
        {
          unsigned int v16 = *(void *)(v16 + 72);
          if (!v16) {
            goto LABEL_23;
          }
        }

        goto LABEL_18;
      }
    }

          *(void *)(v4 + 64) = v5;
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v5 = *(void *)(v1 + 64);
        if (!v5) {
          goto LABEL_9;
        }
      }

      *(void *)(v5 + 72) = v4;
      uint64_t v4 = *(void *)(v1 + 72);
      if (v4) {
        goto LABEL_10;
      }
      *(void *)uint64_t v3 = v5;
LABEL_11:
      *(_WORD *)(v1 + 52) = *(_WORD *)(v1 + 52) & 0xFFF0 | 1;
      if (!*(void *)(v1 + 56))
      {
        if (*(_BYTE *)(v3 + 48)) {
          uint64_t result = (uint64_t *)xmmword_18C465468(*(void *)(v3 + 72), *(void *)v1, 0LL);
        }
      }

      uint64_t v1 = *v2;
    }

    while (*v2);
  }

  return result;
}

    *uint64_t v4 = 0LL;
  }

  sub_1812F20DC(*a1, v4);
  return sub_181301B60(a1, a2);
}

  *a3 = v12;
  return v13;
}

  *((_WORD *)a1 + 10) = 1;
}

    a3 = v8 ^ 1;
    uint64_t v7 = &a1[a4 & 1];
    uint64_t v6 = 2;
  }

  int v9 = &a1[a3];
  if (v7 >= v9)
  {
LABEL_14:
    int v11 = 1;
  }

  else
  {
    while (1)
    {
      __int16 v10 = *v7;
      if ((byte_1813C6558[v10] & 1) == 0) {
        break;
      }
      v7 += v6;
      if (v7 >= v9) {
        goto LABEL_14;
      }
    }

    uint64_t v12 = &v7[v6];
    if ((_DWORD)v10 == 45)
    {
      v7 += v6;
      int v13 = 0;
    }

    else
    {
      int v13 = 1;
    }

    if ((_DWORD)v10 == 43)
    {
      uint64_t v7 = v12;
      int v11 = 1;
    }

    else
    {
      int v11 = v13;
    }
  }

  unsigned int v14 = v7;
  if (v7 < v9)
  {
    unsigned int v14 = v7;
    do
    {
      if (*v14 != 48) {
        break;
      }
      v14 += v6;
    }

    while (v14 < v9);
  }

  if (v14 >= v9)
  {
    LODWORD(v15) = 0;
    unsigned int v16 = 0LL;
    unsigned int v18 = 1;
    goto LABEL_35;
  }

  unsigned int v15 = 0LL;
  unsigned int v16 = 0LL;
  do
  {
    int v17 = v14[v15];
    unsigned int v18 = (v17 - 48) < 0xA;
    unsigned int v16 = v17 + 10 * v16 - 48;
    v15 += v6;
  }

  while (&v14[v15] < v9);
  if ((v16 & 0x8000000000000000LL) == 0)
  {
LABEL_35:
    if (!v11) {
      unsigned int v16 = -v16;
    }
    *a2 = v16;
    if ((_DWORD)v15) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }

  uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v11) {
    uint64_t v19 = 0x8000000000000000LL;
  }
  *a2 = v19;
  if ((_DWORD)v15) {
    goto LABEL_40;
  }
LABEL_38:
  if (v7 == v14)
  {
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_49;
  }

        sub_1812C221C(a1, *(void **)(v5 + 48));
        sub_1812C221C(a1, *(void **)(v5 + 56));
        uint64_t v7 = *(void *)(v5 + 8);
        sub_1812F20DC(a1, (void *)v5);
        uint64_t v5 = v7;
        if (!v7) {
          goto LABEL_40;
        }
      }
    }

    int v17 = a2[8];
    if (v17) {
      sub_18128FDA0(a1, v17, 1LL);
    }
  }

  if (!*(_BYTE *)(v20 + 103)) {
    uint64_t result = sub_181319C00(v11, v19, a4);
  }
  if (v19) {
    uint64_t result = (uint64_t)sub_181309110((void *)v20, v19);
  }
  uint64_t v22 = *(char *)(a3 + 9);
  int v21 = a3 + 9;
  if (v22 >= 66) {
    uint64_t result = sub_1812B9B68((uint64_t *)v12, 96LL, a4, 1LL, 0LL, v21, 1LL, a8);
  }
  if (v16)
  {
    if (*(_BYTE *)(*(void *)v12 + 103LL)) {
      uint64_t v23 = &byte_18C550680;
    }
    else {
      uint64_t v23 = (char *)(*(void *)(v12 + 136) + 40LL * v16);
    }
    *((_DWORD *)v23 + 2) = *(_DWORD *)(v12 + 144);
  }

  if (*(_DWORD *)(v11 + 48) > v13) {
    *(_DWORD *)(*(void *)v11 + 84LL) = -1;
  }
  return result;
}

    int v9 = (_DWORD *)v4[2];
    if (v9 && (int)*v9 >= 1)
    {
      __int16 v10 = v9 + 2;
      int v11 = *v9 + 1;
      while (!*v10 || !sub_18131C57C(a1))
      {
        v10 += 3;
        if (--v11 <= 1) {
          goto LABEL_17;
        }
      }

      return 2LL;
    }

  uint64_t v6 = *(void *)(a2 + 32);
LABEL_11:
  uint64_t v7 = *a1;
  if (v7)
  {
    uint64_t v8 = sub_1812F2264(v7, v5 + 1);
    if (!v8) {
      return v8;
    }
  }

  else
  {
    uint64_t v8 = sub_18126F0AC(v5 + 1);
    if (!v8) {
      return v8;
    }
  }

  if (v5 >= 1)
  {
    int v9 = 0LL;
    __int16 v10 = v2 + 32;
    int v11 = (_BYTE *)v8;
    while (1)
    {
      unsigned int v14 = *v2;
      unsigned int v15 = v14;
      if (v14 == 176) {
        unsigned int v15 = v2[2];
      }
      unsigned int v16 = (int **)(v2 + 32);
      if (v15 == 177) {
        goto LABEL_27;
      }
      int v17 = v2;
      if (v15 == 138) {
        break;
      }
LABEL_32:
      int v13 = sub_1812A3C7C(v17);
      if (v6)
      {
        uint64_t v19 = sub_1812A3C7C(*(unsigned __int8 **)(*(void *)(v6 + 32) + v9 + 8));
        if (v13 < 65 || v19 < 65)
        {
          if (v19 >= 65) {
            uint64_t v12 = v19;
          }
          else {
            uint64_t v12 = v13;
          }
          LOBYTE(v13) = v12 | 0x40;
        }

        else if (v19 > 0x42 || v13 > 0x42)
        {
          LOBYTE(v13) = 67;
        }

        else
        {
          LOBYTE(v13) = 65;
        }
      }

      *v11++ = v13;
      v9 += 24LL;
    }

    unsigned int v16 = (int **)(*v10 + 32LL);
LABEL_27:
    int v17 = v2;
    if (**v16 >= 2)
    {
      if (v14 == 138 || (unsigned int v18 = v2 + 32, v2[2] == 138)) {
        unsigned int v18 = (void *)(*v10 + 32LL);
      }
      int v17 = *(unsigned __int8 **)(*v18 + v9 + 8);
    }

    goto LABEL_32;
  }

      *((void *)v11 + 2) = v9;
      *((_BYTE *)v11 + 56) = *((_BYTE *)v10 + 56);
      v7 += 12LL;
    }
  }

  return v6;
}

  int v11 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v11)
  {
    sub_181310690(v10, 113LL, 0LL, 1LL, a2, 5LL, a7, a8);
    if (*(_DWORD *)(a1 + 52)) {
      return;
    }
  }

  else
  {
    *(_DWORD *)(v10 + 144) = v11 + 1;
    uint64_t v12 = *(void *)(v10 + 136) + 40LL * v11;
    *(_DWORD *)uint64_t v12 = 64881;
    *(void *)(v12 + 4) = 0x100000000LL;
    *(_DWORD *)(v12 + 12) = a2;
    *(_DWORD *)(v12 + 16) = 5;
    *(void *)(v12 + 24) = 0LL;
    *(void *)(v12 + 32) = 0LL;
    if (*(_DWORD *)(a1 + 52)) {
      return;
    }
  }

  *(_DWORD *)(a1 + 52) = 1;
}

      v16 += 56LL;
      if (v16 >= v59) {
        goto LABEL_71;
      }
    }

    unsigned int v18 = *(void **)(v16 + 32);
LABEL_15:
    *((void *)&v64 + 1) = v18;
    v61[0] = 0;
    if (*(_BYTE *)(*(void *)v56 + 63LL) == 1)
    {
      uint64_t v3 = sub_181333D7C((uint64_t)&v64, a2, a3);
      if ((_DWORD)v3) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v3 = sub_18133472C(&v64, a2);
      if ((_DWORD)v3) {
        goto LABEL_20;
      }
    }

    uint64_t v3 = sub_18133509C(&v64, a2, a3);
LABEL_20:
    uint64_t v19 = v61[0];
    if (v61[0])
    {
      if (v17)
      {
        LOWORD(v62[0]) = v61[0];
        __memcpy_chk();
      }

      else
      {
        uint64_t v20 = LOWORD(v62[0]);
        __memcpy_chk();
        LOWORD(v62[0]) = 0;
        if (v20)
        {
          int v21 = 0LL;
          uint64_t v22 = 0;
          do
          {
            uint64_t v23 = 0LL;
            uint64_t v24 = &v60[v21];
            size_t v25 = (void *)v24 + 1;
            unsigned int v26 = (__int16 *)(v24 + 1);
            unsigned int v27 = (__int16 *)v24 + 9;
            unsigned int v28 = v22;
            do
            {
              int v29 = &v61[8 * v23];
              unsigned int v30 = *v26;
              int v31 = (__int16)v29[8];
              if (v30 >= v31)
              {
                int v32 = *v26;
                if (v31 + 49 >= v30)
                {
                  if (v31 + 31 >= v30) {
                    int v32 = v30 + byte_1813CA370[v30 - v31];
                  }
                  else {
                    int v32 = v30 + 1;
                  }
                }
              }

              else
              {
                int v32 = v29[8];
                if (v30 + 49 >= v31)
                {
                  if (v30 + 31 >= v31) {
                    int v32 = v31 + byte_1813CA370[v31 - v30];
                  }
                  else {
                    int v32 = v31 + 1;
                  }
                }
              }

              int v33 = *v27;
              unsigned int v34 = (__int16)v61[8 * v23 + 9];
              if (v33 >= v34)
              {
                unsigned int v35 = *v27;
                if (v34 + 49 >= v33)
                {
                  if (v34 + 31 >= v33) {
                    unsigned int v35 = v33 + byte_1813CA370[v33 - v34];
                  }
                  else {
                    unsigned int v35 = v33 + 1;
                  }
                }
              }

              else
              {
                unsigned int v35 = v61[8 * v23 + 9];
                if (v33 + 49 >= v34)
                {
                  if (v33 + 31 >= v34) {
                    unsigned int v35 = v34 + byte_1813CA370[v34 - v33];
                  }
                  else {
                    unsigned int v35 = v34 + 1;
                  }
                }
              }

              BOOL v36 = *((void *)v29 + 1) | *v25;
              if ((_WORD)v28)
              {
                int v37 = (char *)v62 + 8;
                unsigned int v38 = v28;
                while (1)
                {
                  unsigned int v39 = *((__int16 *)v37 + 4);
                  if (v39 >= v32 && (v36 & ~*(void *)v37) == 0) {
                    break;
                  }
                  if (v39 <= v32 && (*(void *)v37 & ~v36) == 0) {
                    goto LABEL_26;
                  }
                  --v38;
                  v37 += 16;
                  if (!(_WORD)v38)
                  {
                    int v41 = (unsigned __int16)v28 - 1LL;
                    int v42 = (char *)&v62[1] + 8;
                    int v37 = (char *)v62 + 8;
                    do
                    {
                      int v43 = v37;
                      uint64_t v44 = *((__int16 *)v37 + 4);
                      uint64_t v45 = *((__int16 *)v42 + 4);
                      if (v44 > v45) {
                        int v37 = v42;
                      }
                      v42 += 16;
                      --v41;
                    }

                    while (v41);
                    BOOL v46 = (__int16 *)&v62[(unsigned __int16)v28];
                    if (v44 <= v45) {
                      BOOL v46 = (__int16 *)(v43 + 8);
                    }
                    if (*v46 <= v32) {
                      goto LABEL_26;
                    }
                    break;
                  }
                }
              }

              else
              {
LABEL_54:
                uint64_t v22 = v28 + 1;
                LOWORD(v62[0]) = v28 + 1;
                unsigned int v40 = (unint64_t)&v62[(unsigned __int16)v28];
                int v37 = (char *)(v40 | 8);
                *(_WORD *)(v40 + 18) = v35;
                unsigned int v28 = v22;
              }

              *(void *)int v37 = v36;
              *((_WORD *)v37 + 4) = v32;
LABEL_26:
              ++v23;
            }

            while (v23 != v19);
            ++v21;
          }

          while (v21 != v20);
        }
      }

      int v17 = 0;
      int v11 = (uint64_t)a1;
      goto LABEL_10;
    }

    LOWORD(v62[0]) = 0;
    int v11 = (uint64_t)a1;
LABEL_71:
    *(_WORD *)(v8 + 52) = 1;
    **(void **)(v8 + 64) = v57;
    *(_DWORD *)(v8 + 48) = 0x2000;
    *(_WORD *)(v8 + 18) = 0;
    *(_BYTE *)(v8 + 17) = 0;
    *(void *)(v8 + 32) = 0LL;
    *(void *)(v8 + 40) = 0LL;
    *(void *)(v8 + 24) = 0LL;
    if (!(_DWORD)v3 && LOWORD(v62[0]))
    {
      BOOL v47 = 1LL;
      uint64_t v48 = (_WORD *)&v62[1] + 1;
      do
      {
        *(_WORD *)(v8 + 20) = *(v48 - 1) + 1;
        *(_WORD *)(v8 + 22) = *v48;
        *(void *)uint64_t v8 = *(void *)(v48 - 5);
        uint64_t v3 = sub_181335FD4(v11, v8);
        if ((_DWORD)v3) {
          break;
        }
        v48 += 8;
      }

      while (v47++ < LOWORD(v62[0]));
    }

  *(_WORD *)(a1 + 36) = 1;
  return 2LL;
}

    int v9 = *(void *)(v9 + 64);
    if (v9) {
      continue;
    }
    return v8;
  }

  uint64_t v88 = a2;
  int v86 = (uint64_t)v18;
  __int16 v87 = (uint64_t)v17;
  uint64_t v84 = (uint64_t)v20;
  uint64_t v85 = v19;
  if (!a3)
  {
    unsigned int v39 = *(unsigned __int8 *)(v89 + 63);
    if (v39 != 2)
    {
      if (v39 == 1) {
        uint64_t v52 = 14;
      }
      else {
        uint64_t v52 = 15;
      }
      uint64_t v68 = sub_1812F2264(*a1, 0x50uLL);
      uint64_t v75 = (unsigned __int8 *)v68;
      if (v68)
      {
        *(_OWORD *)(v68 + 32) = 0u;
        *(_OWORD *)(v68 + 48) = 0u;
        *(_OWORD *)(v68 + 64) = 0u;
        *(_OWORD *)uint64_t v68 = 0u;
        *(_OWORD *)(v68 + 16) = 0u;
        *(_BYTE *)uint64_t v68 = 75;
        *(_WORD *)(v68 + 52) = -1;
        *(_DWORD *)(v68 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v69,  v70,  v71,  v72,  v73,  v74,  *(_DWORD *)(*a1 + 148));
        }
      }

      uint64_t v22 = (int *)sub_18133E190((void *)*a1, v75);
      if (a8)
      {
        uint64_t v76 = sub_1812F2264(*a1, 0x50uLL);
        int v83 = (unsigned __int8 *)v76;
        if (v76)
        {
          *(_OWORD *)(v76 + 32) = 0u;
          *(_OWORD *)(v76 + 48) = 0u;
          *(_OWORD *)(v76 + 64) = 0u;
          *(_OWORD *)uint64_t v76 = 0u;
          *(_OWORD *)(v76 + 16) = 0u;
          *(_BYTE *)uint64_t v76 = 75;
          *(_WORD *)(v76 + 52) = -1;
          *(_DWORD *)(v76 + 40) = 1;
          if (*(int *)(*a1 + 148) <= 0) {
            sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v77,  v78,  v79,  v80,  v81,  v82,  *(_DWORD *)(*a1 + 148));
          }
        }

        uint64_t v23 = (int *)sub_18133E190((void *)*a1, v83);
      }

      else
      {
        uint64_t v23 = 0LL;
      }

      goto LABEL_53;
    }

    if (*(__int16 *)(v89 + 54) < 1)
    {
      uint64_t v23 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v52 = 14;
      goto LABEL_53;
    }

    unsigned int v40 = 0;
    uint64_t v22 = 0LL;
    while (1)
    {
      int v42 = sub_1812F2264(*a1, 0x50uLL);
      BOOL v49 = v42;
      if (v42)
      {
        *(_OWORD *)(v42 + 32) = 0u;
        *(_OWORD *)(v42 + 48) = 0u;
        *(_OWORD *)(v42 + 64) = 0u;
        *(_OWORD *)int v42 = 0u;
        *(_OWORD *)(v42 + 16) = 0u;
        *(_BYTE *)int v42 = 75;
        *(_WORD *)(v42 + 52) = -1;
        *(_DWORD *)(v42 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v43,  v44,  v45,  v46,  v47,  v48,  *(_DWORD *)(*a1 + 148));
        }
        *(_DWORD *)(v49 + 48) = v40 + 1;
      }

      if (v22)
      {
        uint64_t v50 = *v22;
        if (v22[1] > *v22)
        {
          *uint64_t v22 = v50 + 1;
          uint64_t v51 = &v22[6 * v50];
          *((void *)v51 + 2) = 0LL;
          *((void *)v51 + 3) = 0LL;
          *((void *)v51 + 1) = v49;
          goto LABEL_40;
        }

        int v41 = sub_18133E1F4(*a1, v22, (unsigned __int8 *)v49);
      }

      else
      {
        int v41 = (int *)sub_18133E190((void *)*a1, (unsigned __int8 *)v49);
      }

      uint64_t v22 = v41;
LABEL_40:
      if (++v40 >= *(__int16 *)(v89 + 54))
      {
        uint64_t v23 = 0LL;
        uint64_t v52 = 14;
        goto LABEL_53;
      }
    }
  }

  if (*(_WORD *)(a3 + 94))
  {
    int v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    while (1)
    {
      size_t v25 = *(__int16 *)(*(void *)(a3 + 8) + 2 * v21);
      unsigned int v26 = sub_1812F2264(*a1, 0x50uLL);
      int v33 = v26;
      if (v26)
      {
        *(_OWORD *)(v26 + 32) = 0u;
        *(_OWORD *)(v26 + 48) = 0u;
        *(_OWORD *)(v26 + 64) = 0u;
        *(_OWORD *)unsigned int v26 = 0u;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_BYTE *)unsigned int v26 = 75;
        *(_WORD *)(v26 + 52) = -1;
        *(_DWORD *)(v26 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0) {
          sub_1812DC47C( (uint64_t)a1,  "Expression tree is too large (maximum depth %d)",  v27,  v28,  v29,  v30,  v31,  v32,  *(_DWORD *)(*a1 + 148));
        }
        *(_DWORD *)(v33 + 48) = v25 + 1;
        if (!a8) {
          goto LABEL_27;
        }
        unsigned int v34 = (unsigned __int8 *)sub_18129C928((uint64_t)v16, (unsigned __int8 *)v33, 0LL, 0LL);
        if (!v23) {
          goto LABEL_26;
        }
      }

      else
      {
        if (!a8) {
          goto LABEL_27;
        }
        unsigned int v34 = 0LL;
        if (!v23)
        {
LABEL_26:
          uint64_t v23 = (int *)sub_18133E190((void *)*a1, v34);
LABEL_27:
          if (!v22) {
            goto LABEL_13;
          }
          goto LABEL_28;
        }
      }

      unsigned int v35 = *v23;
      if (v23[1] <= *v23)
      {
        uint64_t v23 = sub_18133E1F4(*a1, v23, v34);
        if (!v22)
        {
LABEL_13:
          uint64_t v24 = (int *)sub_18133E190((void *)*a1, (unsigned __int8 *)v33);
          goto LABEL_14;
        }
      }

      else
      {
        int *v23 = v35 + 1;
        BOOL v36 = &v23[6 * v35];
        *((void *)v36 + 2) = 0LL;
        *((void *)v36 + 3) = 0LL;
        *((void *)v36 + 1) = v34;
        if (!v22) {
          goto LABEL_13;
        }
      }

  if (!*a1) {
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(*a1 + 24);
LABEL_13:
  int v9 = &byte_1813CEAEE;
  if (v7) {
    int v9 = (char *)v7;
  }
  __int16 v10 = *(unsigned int *)(v8 + 40);
  if ((int)v10 < 1)
  {
LABEL_37:
    sqlite3_snprintf(128, __s, "no such database: %s");
LABEL_39:
    if (!a1) {
      return (void *)sub_1812CF36C(97407);
    }
    *((_DWORD *)a1 + 9) = 1;
    return (void *)sub_181269368(*a1, __s, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }

  int v11 = 0LL;
  uint64_t v12 = *(void *)(v8 + 32);
  while (1)
  {
    int v13 = v12 + 32 * v11;
    unsigned int v15 = *(void *)(v13 + 8);
    unsigned int v14 = (uint64_t *)(v13 + 8);
    if (v15) {
      break;
    }
LABEL_18:
    if (++v11 == v10) {
      goto LABEL_37;
    }
  }

  unsigned int v16 = *(_BYTE **)(v12 + 32 * v11);
  for (uint64_t i = v9; ; ++i)
  {
    unsigned int v18 = *v16;
    uint64_t v19 = *i;
    if ((_DWORD)v18 == (_DWORD)v19) {
      break;
    }
    if (byte_1813C6343[v18] != byte_1813C6343[v19])
    {
      if (!v11)
      {
        uint64_t v20 = v9;
        for (uint64_t j = "main"; ; ++j)
        {
          uint64_t v22 = *(unsigned __int8 *)j;
          uint64_t v23 = *v20;
          if ((_DWORD)v22 == (_DWORD)v23)
          {
            if (!*j) {
              goto LABEL_38;
            }
          }

          else if (byte_1813C6343[v22] != byte_1813C6343[v23])
          {
            goto LABEL_18;
          }

          ++v20;
        }
      }

      goto LABEL_18;
    }

  sub_1812D7A8C(a1, v6, -1, 1u, 0LL);
}

  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1812CF36C(186263);
  if (!a1)
  {
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v2, v6);
  }

  else
  {
    *(void *)uint64_t v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }

  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1812CF36C(186291);
  if (!a1)
  {
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v2, v6);
  }

  else
  {
    *(void *)uint64_t v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }

  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1812CF36C(186307);
  if (!a1)
  {
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v2, v6);
  }

  else
  {
    *(void *)uint64_t v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }

  uint64_t result = sub_1812CF36C(97220);
  LODWORD(v9) = 1;
LABEL_11:
  if ((_DWORD)v9) {
    __int16 v10 = v7 == 0LL;
  }
  else {
    __int16 v10 = 1;
  }
  if (!v10) {
LABEL_15:
  }
    --*v7;
  return result;
}

  uint64_t result = sub_18126F0AC(a2);
  if (result) {
    return result;
  }
  sqlite3_result_error_nomem(a1);
  return 0LL;
}

  uint64_t v7 = *(void *)(v1 + 64);
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_16;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v7);
  --qword_18C468B10;
  off_18C4653A8(v7);
  uint64_t v7 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v8 = &xmmword_18C465410;
LABEL_16:
    (*v8)(v7);
  }

  if (v7 >= *(_DWORD *)(a1 + 60)) {
    sub_18135EA10(a1);
  }
  __int16 v10 = *(_DWORD *)(a1 + 28);
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t result = *(void *)(v6 + 72);
  if (*(_WORD *)(result + 22)) {
    goto LABEL_14;
  }
  if ((*(_DWORD *)(a1 + 56) + 1) < *(_DWORD *)(a1 + 36))
  {
    if (dword_18C550610 && *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) <= SHIDWORD(xmmword_18C550600))
    {
      if (!dword_18C55063C)
      {
LABEL_14:
        uint64_t result = *(void *)(a1 + 72);
        if (result) {
          goto LABEL_15;
        }
        if (!*(_DWORD *)(a1 + 56))
        {
          uint64_t v20 = DWORD2(xmmword_18C550600);
          if (DWORD2(xmmword_18C550600))
          {
            if (*(_DWORD *)(a1 + 36) >= 3u)
            {
              if (off_18C550648)
              {
                off_18C550648(0LL);
                uint64_t v20 = DWORD2(xmmword_18C550600);
              }

              if (v20 < 1)
              {
                uint64_t v22 = -1024LL * v20;
                int v21 = *(int *)(a1 + 24);
              }

              else
              {
                int v21 = *(int *)(a1 + 24);
                uint64_t v22 = v21 * v20;
              }

              unsigned int v30 = v21 * *(unsigned int *)(a1 + 36);
              if (v22 >= v30) {
                int v31 = v30;
              }
              else {
                int v31 = v22;
              }
              int v32 = sub_18126F0AC(v31);
              int v33 = v32;
              *(void *)(a1 + 80) = v32;
              if (off_18C550650) {
                off_18C550650(v32);
              }
              if (v33)
              {
                unsigned int v34 = off_18C4653B8(v33);
                unsigned int v35 = *(int *)(a1 + 24);
                BOOL v36 = *(int *)(a1 + 16);
                int v37 = *(void *)(a1 + 72);
                unsigned int v38 = v34 / (int)v35;
                do
                {
                  unsigned int v39 = v33 + v36;
                  *(void *)unsigned int v39 = v33;
                  *(void *)(v39 + 8) = v33 + v36 + 56;
                  *(_DWORD *)(v39 + 20) = 1;
                  *(void *)(v39 + 24) = v37;
                  *(void *)(v39 + 48) = 0LL;
                  v33 += v35;
                  int v37 = v39;
                  --v38;
                }

                while (v38);
                uint64_t result = v33 + v36 - v35;
                goto LABEL_15;
              }

              uint64_t result = *(void *)(a1 + 72);
              if (result)
              {
LABEL_15:
                uint64_t v12 = (void *)(result + 24);
                *(void *)(a1 + 72) = *(void *)(result + 24);
LABEL_24:
                *uint64_t v12 = 0LL;
                unsigned int v15 = *(int **)(a1 + 8);
                unsigned int v16 = *v15;
                int v17 = 1;
                goto LABEL_25;
              }
            }
          }
        }

        if (a3 == 1)
        {
          if (off_18C550648) {
            off_18C550648(0LL);
          }
          int v13 = sub_1812FDBB8(*(_DWORD *)(a1 + 24));
          unsigned int v14 = v13;
          if (off_18C550650) {
            off_18C550650(v13);
          }
          if (v14) {
            goto LABEL_23;
          }
        }

        else
        {
          unsigned int v14 = sub_1812FDBB8(*(_DWORD *)(a1 + 24));
          if (v14)
          {
LABEL_23:
            uint64_t result = v14 + *(int *)(a1 + 16);
            *(void *)uint64_t result = v14;
            *(void *)(result + 8) = result + 56;
            *(_DWORD *)(result + 20) = 0;
            uint64_t v12 = (void *)(result + 48);
            goto LABEL_24;
          }
        }

        return 0LL;
      }
    }

    else if (!dword_18C468B88)
    {
      goto LABEL_14;
    }
  }

  uint64_t v23 = *(void *)(result + 32);
  uint64_t v24 = (void *)(*(void *)(v23 + 64) + 8LL * (*(_DWORD *)(result + 16) % *(_DWORD *)(v23 + 60)));
  do
  {
    size_t v25 = v24;
    unsigned int v26 = *v24;
    uint64_t v24 = (void *)(*v24 + 24LL);
  }

  while (v26 != result);
  *size_t v25 = *(void *)(result + 24);
  --*(_DWORD *)(v23 + 56);
  unsigned int v27 = *(void *)(result + 48);
  unsigned int v28 = *(void *)(result + 32);
  *(void *)(v27 + 40) = *(void *)(result + 40);
  *(void *)(*(void *)(result + 40) + 48LL) = v27;
  *(void *)(result + 40) = 0LL;
  --*(_DWORD *)(v28 + 52);
  if (*(_DWORD *)(v28 + 24) != *(_DWORD *)(a1 + 24))
  {
    if (*(_WORD *)(result + 20))
    {
      *(void *)(result + 24) = *(void *)(v28 + 72);
      *(void *)(v28 + 72) = result;
    }

    else
    {
      sub_1812FC960(*(void *)result);
    }

    --**(_DWORD **)(v28 + 8);
    goto LABEL_14;
  }

  unsigned int v16 = v10 - *(_DWORD *)(v28 + 28);
  int v29 = *(_DWORD *)(v6 + 20);
  unsigned int v15 = (int *)(v6 + 20);
  int v17 = v29;
LABEL_25:
  *unsigned int v15 = v16 + v17;
  unsigned int v18 = *(_DWORD *)(a1 + 60);
  ++*(_DWORD *)(a1 + 56);
  *(_DWORD *)(result + 16) = a2;
  uint64_t v19 = 8LL * (a2 % v18);
  *(void *)(result + 24) = *(void *)(*(void *)(a1 + 64) + v19);
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = 0LL;
  **(void **)(result + 8) = 0LL;
  *(void *)(*(void *)(a1 + 64) + v19) = result;
  if (*(_DWORD *)(a1 + 44) < a2) {
    *(_DWORD *)(a1 + 44) = a2;
  }
  return result;
}

  if (v1)
  {
    uint64_t v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_16:
      (*v6)(v1);
      return 0LL;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
      goto LABEL_16;
    }
  }

  return 0LL;
}

  uint64_t v5 = *(void *)(v1 + 440);
  if (!v5) {
    goto LABEL_17;
  }
  uint64_t v6 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_16;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v5);
  --qword_18C468B10;
  off_18C4653A8(v5);
  uint64_t v5 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v6 = &xmmword_18C465410;
LABEL_16:
    (*v6)(v5);
  }

    if ((v12 & 0x80) != 0 || byte_1813CB46E[v12])
    {
      uint64_t i = &v8[v10];
      do
      {
        do
        {
          unsigned int v18 = *++i;
          int v17 = v18;
        }

        while (v18 < 0);
      }

      while (byte_1813CB46E[v17]);
      goto LABEL_31;
    }

    ++v10;
  }

  if (v8[v10])
  {
    if (v11 == 34) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }

  uint64_t v23 = 0LL;
LABEL_32:
  uint64_t v73 = a3;
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v8;
  }
  size_t v25 = v11;
  v24[v11] = 0;
  unsigned int v26 = *v24;
  if ((v26 - 34) <= 0x3E && ((1LL << (v26 - 34)) & 0x4200000000000021LL) != 0)
  {
    if (v26 == 91) {
      unsigned int v28 = 93;
    }
    else {
      unsigned int v28 = *v24;
    }
    int v29 = v24[1];
    if (v24[1])
    {
      unsigned int v30 = 0LL;
      int v31 = 1;
      while (1)
      {
        if (v29 == v28)
        {
          v24[v30] = v28;
          v31 += 2;
        }

        else
        {
          v24[v30] = v29;
          ++v31;
        }

        ++v30;
        int v29 = v24[v31];
        if (!v24[v31]) {
          goto LABEL_50;
        }
      }
    }

    LODWORD(v30) = 0;
LABEL_50:
    v24[v30] = 0;
  }

  int v32 = strlen(v24);
  if (!a1 || !*(void *)(a1 + 24)) {
    goto LABEL_114;
  }
  int v33 = (v32 + 1);
  unsigned int v34 = *(_BYTE *)a1 == 1 ? sub_18126D6B4(v24, v33) : sub_181363650(v24, v33);
  unsigned int v35 = *(void *)(a1 + 24);
  if (!v35) {
    goto LABEL_114;
  }
  BOOL v36 = (_DWORD *)(v35 + 16LL * ((*(_DWORD *)(a1 + 16) - 1) & v34));
  unsigned int v39 = *v36;
  unsigned int v38 = (const char **)(v36 + 2);
  int v37 = v39;
  unsigned int v40 = *(_BYTE *)a1 == 1 ? sub_18126D718 : (uint64_t (*)(const char *, int, char *, int))sub_181363688;
  do
  {
    if (!v37) {
      goto LABEL_114;
    }
    unsigned int v38 = (const char **)*v38;
    if (!v38) {
      goto LABEL_114;
    }
    --v37;
  }

  while (v40(v38[3], *((_DWORD *)v38 + 8), v24, v33));
  int v41 = v38[2];
  if (!v41)
  {
LABEL_114:
    sub_181362330(a4, "unknown tokenizer: %s", v24);
    uint64_t v67 = 1LL;
    goto LABEL_115;
  }

  int v42 = (unint64_t)&v24[v25 + 1];
  if (v42 >= v74)
  {
    uint64_t v44 = 0LL;
    BOOL v46 = 0LL;
    int v66 = v73;
LABEL_124:
    uint64_t v67 = (*((uint64_t (**)(uint64_t, uint64_t, const char ***))v41 + 1))(v46, v44, v66);
    if ((_DWORD)v67) {
      sub_181362330(a4, "unknown tokenizer");
    }
    else {
      *char *v66 = v41;
    }
    if (!v44) {
      goto LABEL_115;
    }
    uint64_t v69 = (void (**)(uint64_t))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v44);
      --qword_18C468B10;
      off_18C4653A8(v44);
      uint64_t v44 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_115;
      }
      uint64_t v69 = (void (**)(uint64_t))&xmmword_18C465410;
    }

    (*v69)(v44);
LABEL_115:
    uint64_t v68 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380)
    {
      uint64_t v44 = (uint64_t)v8;
      goto LABEL_121;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v44 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v68 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_121;
    }

    return v67;
  }

  int v72 = v38[2];
  int v43 = 0LL;
  uint64_t v44 = 0LL;
  while (2)
  {
    uint64_t v45 = 0LL;
    BOOL v46 = v43;
    BOOL v47 = (unsigned __int8 *)(v42 + 1);
    while (2)
    {
      uint64_t v48 = *(char *)(v42 + v45);
      BOOL v49 = *(unsigned __int8 *)(v42 + v45);
      if (v48 > 38)
      {
        if (v48 == 39 || v48 == 96) {
          break;
        }
        if (v48 == 91)
        {
          do
          {
            uint64_t v51 = *v47++;
            uint64_t v50 = v51;
          }

          while (v51 != 93 && v50 != 0);
          if (!v50) {
            LODWORD(v47) = (_DWORD)v47 - 1;
          }
          goto LABEL_94;
        }

        goto LABEL_74;
      }

      if (!*(_BYTE *)(v42 + v45)) {
        goto LABEL_113;
      }
      if (v48 != 34)
      {
LABEL_74:
        if ((v49 & 0x80) != 0 || byte_1813CB46E[v49])
        {
          BOOL v47 = (unsigned __int8 *)(v42 + v45);
          do
          {
            do
            {
              double v58 = (char)*++v47;
              uint64_t v57 = v58;
            }

            while (v58 < 0);
          }

          while (byte_1813CB46E[v57]);
          goto LABEL_94;
        }

        ++v45;
        ++v47;
        continue;
      }

      break;
    }

    uint64_t v53 = (unsigned __int8 *)(v42 + v45);
    BOOL v47 = (unsigned __int8 *)(v42 + v45 + 1);
    int v54 = *v47;
    if (!*v47)
    {
      uint64_t v55 = 1;
      goto LABEL_95;
    }

    do
    {
      if ((_DWORD)v49 == v54)
      {
        BOOL v47 = v53 + 2;
        if (v53[2] != (_DWORD)v49) {
          break;
        }
      }

      uint64_t v53 = v47;
      int v56 = *++v47;
      int v54 = v56;
    }

    while (v56);
LABEL_94:
    uint64_t v55 = (_DWORD)v47 - v42 - v45;
LABEL_95:
    if (!sqlite3_initialize())
    {
      ++v43;
      uint64_t v59 = sub_18127D33C(v44, 8 * (v46 + 1));
      if (v59)
      {
        uint64_t v44 = v59;
        *(void *)(v59 + 8 * v46) = v42 + v45;
        *(_BYTE *)(v42 + v45 + v55) = 0;
        uint64_t v60 = *(unsigned __int8 *)(v42 + v45);
        if ((v60 - 34) <= 0x3E && ((1LL << (v60 - 34)) & 0x4200000000000021LL) != 0)
        {
          if (v60 == 91) {
            uint64_t v60 = 93;
          }
          uint64_t v61 = v42 + v45;
          uint64_t v62 = *(unsigned __int8 *)(v42 + v45 + 1);
          if (*(_BYTE *)(v42 + v45 + 1))
          {
            uint64_t v63 = 0LL;
            uint64_t v64 = 1;
            while (1)
            {
              if (v62 == v60)
              {
                if (*(unsigned __int8 *)(v42 + v64 + 1LL + v45) != v60)
                {
LABEL_108:
                  uint64_t v65 = v63;
                  goto LABEL_110;
                }

                *(_BYTE *)(v61 + v63) = v60;
                v64 += 2;
              }

              else
              {
                *(_BYTE *)(v61 + v63) = v62;
                ++v64;
              }

              ++v63;
              uint64_t v62 = *(unsigned __int8 *)(v42 + v64 + v45);
              if (!*(_BYTE *)(v42 + v64 + v45)) {
                goto LABEL_108;
              }
            }
          }

          uint64_t v65 = 0LL;
LABEL_110:
          *(_BYTE *)(v42 + v65 + v45) = 0;
        }

        v42 += v55 + v45 + 1;
        if (v42 >= v74)
        {
          ++v46;
LABEL_113:
          int v41 = v72;
          int v66 = v73;
          goto LABEL_124;
        }

        continue;
      }
    }

    break;
  }

  uint64_t v70 = (uint64_t (**)(char *))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v70 = (uint64_t (**)(char *))&xmmword_18C465410;
      goto LABEL_139;
    }
  }

  else
  {
LABEL_139:
    (*v70)(v8);
  }

  if (!v44) {
    return 7LL;
  }
  uint64_t v68 = (void (**)(uint64_t))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v44);
    --qword_18C468B10;
    off_18C4653A8(v44);
    uint64_t v44 = xmmword_18C468B70;
    uint64_t v67 = 7LL;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v68 = (void (**)(uint64_t))&xmmword_18C465410;
      goto LABEL_121;
    }
  }

  else
  {
    uint64_t v67 = 7LL;
LABEL_121:
    (*v68)(v44);
  }

  return v67;
}

  (*v7)(v4);
  uint64_t v4 = 0LL;
  uint64_t result = 7LL;
LABEL_22:
  *a1 = v4;
  return result;
}

  *(void *)(v4 + 480) = 0LL;
  if (v5 == 101)
  {
    if (a1)
    {
      int v11 = "Index already optimal";
      goto LABEL_25;
    }

  v1[1] = 0LL;
  *((_DWORD *)v1 + 6) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[4] = 0LL;
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_15:
    (*v4)(v1);
    return 0LL;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  off_18C4653A8(v1);
  uint64_t v1 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    goto LABEL_15;
  }

  return 0LL;
}

  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  if (a2 != 1) {
    return 1LL;
  }
  uint64_t v12 = *a5;
  if (!*a5)
  {
    unsigned int v14 = 0LL;
    goto LABEL_22;
  }

  int v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      unsigned int v14 = 0LL;
      unsigned int v15 = *(_WORD *)(v12 + 20);
      if ((v15 & 2) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }

    unsigned int v14 = (const void *)sub_181303998((int *)v12, 1);
    uint64_t v12 = *a5;
    if (*a5)
    {
      unsigned int v15 = *(_WORD *)(v12 + 20);
      if ((v15 & 2) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }

  uint64_t v6 = (int)v3[10];
  if ((int)v4 < (int)v6)
  {
    uint64_t v7 = v3[3];
    uint64_t v8 = (uint64_t *)&v3[2 * v4 + 12];
    int v9 = v6 - v4;
    do
    {
      __int16 v10 = *v8++;
      int v11 = *(_DWORD *)(v10 + 12);
      if (v7 <= v11 + 1) {
        uint64_t v7 = v11 + 1;
      }
      v3[3] = v7;
      --v9;
    }

    while (v9);
  }

  return result;
}

      int v11 = *(void *)(v11 + 24);
      if (!v11)
      {
        uint64_t result = 0LL;
        int v17 = v16;
LABEL_31:
        uint64_t v7 = a1;
        uint64_t v6 = a2;
        *(_DWORD *)(a2 + 4) = (result | v17) != 0;
        return result;
      }
    }
  }

  size_t v25 = *(void *)(v8 + 48);
  unsigned int v26 = *(void *)(v25 + 24);
  if (a3)
  {
    do
    {
      sub_1813903E0(v26, v25, 1, a4);
      if (*(_DWORD *)(v26 + 60)) {
        break;
      }
      if (*(_BYTE *)(v25 + 20)) {
        break;
      }
      unsigned int v27 = *(void *)(v25 + 136LL * *(unsigned __int16 *)(*(void *)(v25 + 88) + 4LL) + 216);
      unsigned int v28 = *(_DWORD *)(v25 + 68);
      if (!v28 && v27 >= a4) {
        break;
      }
    }

    while (!v28 || v27 > a4);
  }

  else
  {
    sub_1813903E0(*(void *)(v25 + 24), *(void *)(v8 + 48), 0, 0LL);
  }

  int v29 = *(void *)(v25 + 24);
  uint64_t result = *(unsigned int *)(v29 + 60);
  *(_DWORD *)(v29 + 60) = 0;
  if ((_DWORD)result)
  {
    *(_DWORD *)(v6 + 4) = 1;
  }

  else
  {
    unsigned int v30 = *(_BYTE *)(v25 + 20) != 0;
    *(_DWORD *)(v6 + 4) = v30;
    if (!v30) {
      return sub_1813918E4(v7, v6);
    }
  }

  return result;
}

      if (*(_DWORD *)(v10 + 4))
      {
        sub_181392F34(a2);
        uint64_t v4 = v8;
        goto LABEL_18;
      }

      uint64_t v4 = *(void *)(v10 + 24);
      if (v8 != v4) {
        uint64_t v6 = 0;
      }
      if (*(_DWORD *)(v10 + 8)) {
        *(_DWORD *)(a2 + 8) = 1;
      }
      uint64_t v5 = *(int *)(a2 + 40);
      int v9 = v7 - 5;
      ++v7;
      uint64_t v8 = v4;
    }

    while (v9 < v5);
    if (!v6) {
      continue;
    }
    break;
  }

uint64_t sub_1812A1380(uint64_t a1, int a2, int a3)
{
  uint64_t v7 = *(uint64_t **)(a1 + 80);
  uint64_t v8 = *v7;
  if (!*v7) {
    goto LABEL_34;
  }
  if ((_UNKNOWN *)v8 == &unk_189B6D428)
  {
    uint64_t v12 = (void *)v7[2];
    if (!v12)
    {
LABEL_22:
      unsigned int v10 = 0;
      *uint64_t v7 = 0LL;
      goto LABEL_49;
    }

    while (1)
    {
      int v13 = (void *)*v12;
      unsigned int v14 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v12);
        --qword_18C468B10;
        off_18C4653A8(v12);
        uint64_t v12 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_16;
        }
        unsigned int v14 = &xmmword_18C465410;
      }

      (*v14)(v12);
LABEL_16:
      uint64_t v12 = v13;
      if (!v13) {
        goto LABEL_22;
      }
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + 9);
  if (v9 == 1) {
    goto LABEL_25;
  }
  if (v9 != 3)
  {
    if (v9 != 5 && *(_BYTE *)(a1 + 8))
    {
LABEL_25:
      if (a2)
      {
        BOOL v15 = 1;
        if (!*(void *)(a1 + 96)) {
          goto LABEL_47;
        }
      }

      else
      {
        BOOL v15 = *(_BYTE *)(a1 + 16) != 0;
        if (!*(void *)(a1 + 96)) {
          goto LABEL_47;
        }
      }

      uint64_t v16 = *(void *)(a1 + 208);
      if (v15 || !v16)
      {
        unsigned int v10 = (*(uint64_t (**)(void, void))(v8 + 32))(*(void *)(a1 + 80), 0LL);
        if (v10) {
          goto LABEL_48;
        }
      }

      else
      {
        unsigned int v10 = (*(uint64_t (**)(void, void *, uint64_t, void))(v8 + 24))( *(void *)(a1 + 80),  &unk_1813C6CEA,  28LL,  0LL);
        if (v10) {
          goto LABEL_48;
        }
      }

      if (*(_BYTE *)(a1 + 11)) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 80) + 40LL))( *(void *)(a1 + 80),  *(unsigned __int8 *)(a1 + 14) | 0x10u);
      }
      if (v10) {
        goto LABEL_48;
      }
      if (v16 < 1) {
        goto LABEL_48;
      }
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 48LL))(*(void *)(a1 + 80), &v34);
      if (v10) {
        goto LABEL_48;
      }
      if (v34 > v16)
      {
        unsigned int v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 32LL))(*(void *)(a1 + 80), v16);
        goto LABEL_46;
      }

LABEL_111:
  if (a3 && !v10)
  {
    unsigned int v33 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 40) <= v33) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = sub_1812C8DA0(a1, v33);
    }
  }

        if (++v111 == v76) {
          goto LABEL_92;
        }
        continue;
      }

      goto LABEL_116;
    }

    break;
  }

  uint64_t v70 = byte_1813C6343[v70];
  uint64_t v71 = byte_1813C6343[v71];
  if ((_DWORD)v70 == (_DWORD)v71)
  {
LABEL_116:
    ++v68;
    goto LABEL_117;
  }

  if (++v114 != v113) {
    goto LABEL_114;
  }
LABEL_131:
  __int128 v117 = 0LL;
  while (2)
  {
    __int128 v118 = v115[v117];
    __int128 v119 = aRowid_6[v117];
    if ((_DWORD)v118 != (_DWORD)v119)
    {
      if (byte_1813C6343[v118] != byte_1813C6343[v119])
      {
        __int128 v120 = "ROWID";
        for (uint64_t k = v115; ; ++k)
        {
          int v122 = *k;
          char v123 = *(unsigned __int8 *)v120;
          if ((_DWORD)v122 == (_DWORD)v123)
          {
            if (!*k) {
              goto LABEL_146;
            }
          }

          else if (byte_1813C6343[v122] != byte_1813C6343[v123])
          {
            uint64_t v124 = "OID";
            for (uint64_t m = v115; ; ++m)
            {
              uint64_t v126 = *m;
              uint64_t v127 = *(unsigned __int8 *)v124;
              if ((_DWORD)v126 == (_DWORD)v127)
              {
                if (!*m) {
                  goto LABEL_146;
                }
              }

              else if (byte_1813C6343[v126] != byte_1813C6343[v127])
              {
                goto LABEL_148;
              }

              ++v124;
            }
          }

          ++v120;
        }
      }

      goto LABEL_133;
    }

    if (v115[v117])
    {
LABEL_133:
      ++v117;
      continue;
    }

    break;
  }

          v19[i] = v89;
        }
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }

    uint64_t v61 = &__s[v22];
    uint64_t v62 = v22 + (v13 & 7);
    uint64_t v22 = v21 - (v13 & 7);
    uint64_t v63 = 0uLL;
    uint64_t v64 = (int64x2_t)(unint64_t)v20;
    uint64_t v65 = v62 - v21;
    int v66 = (int8x16_t)vdupq_n_s64(1uLL);
    uint64_t v67 = 0uLL;
    uint64_t v68 = 0uLL;
    do
    {
      uint64_t v69 = *(int8x8_t *)v61;
      v61 += 8;
      uint64_t v70 = vmovl_u8((uint8x8_t)vceq_s8(v69, (int8x8_t)0x2626262626262626LL));
      uint64_t v71 = vmovl_u16(*(uint16x4_t *)v70.i8);
      v72.i64[0] = v71.u32[0];
      v72.i64[1] = v71.u32[1];
      uint64_t v73 = (int64x2_t)vandq_s8(v72, v66);
      v72.i64[0] = v71.u32[2];
      v72.i64[1] = v71.u32[3];
      uint64_t v74 = (int64x2_t)vandq_s8(v72, v66);
      uint64_t v75 = vmovl_high_u16(v70);
      v72.i64[0] = v75.u32[0];
      v72.i64[1] = v75.u32[1];
      uint64_t v76 = (int64x2_t)vandq_s8(v72, v66);
      v72.i64[0] = v75.u32[2];
      v72.i64[1] = v75.u32[3];
      uint64_t v68 = vaddq_s64(v68, (int64x2_t)vandq_s8(v72, v66));
      uint64_t v67 = vaddq_s64(v67, v76);
      uint64_t v63 = vaddq_s64(v63, v74);
      uint64_t v64 = vaddq_s64(v64, v73);
      v65 += 8LL;
    }

    while (v65);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v64, v67), vaddq_s64(v63, v68)));
    if ((v13 & 7) == 0) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }

  if (byte_18C465386) {
    BOOL v15 = v14 > 4;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15) {
    goto LABEL_10;
  }
LABEL_14:
  if (!sqlite3_initialize())
  {
    unsigned int v18 = (_DWORD *)sub_18126F0AC((v14 + 8));
    if (v18)
    {
      char *v18 = 0;
      uint64_t v19 = (const char *)(v18 + 1);
      if ((_DWORD)v14)
      {
        unsigned int v14 = v14;
        memcpy(v18 + 1, __s, v14);
      }

      else
      {
        unsigned int v14 = 0LL;
      }

      *(_DWORD *)&v19[v14] = 0;
      uint64_t v23 = v12 & 0xFFFFFFBF;
LABEL_23:
      if (sqlite3_initialize())
      {
        *a4 = 0LL;
LABEL_25:
        uint64_t v24 = sqlite3_mprintf("no such vfs: %s");
LABEL_26:
        int v17 = 1LL;
LABEL_27:
        *a6 = v24;
        for (uint64_t k = v19 - 4; k[3] || k[2] || k[1] || *k; --k)
          ;
        uint64_t v26 = (uint64_t (**)(const char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(k);
          --qword_18C468B10;
          off_18C4653A8(k);
          uint64_t k = (const char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_39;
          }
          uint64_t v26 = (uint64_t (**)(const char *))&xmmword_18C465410;
        }

        (*v26)(k);
LABEL_39:
        uint64_t v19 = 0LL;
LABEL_55:
        *a3 = v23;
        *a5 = v19;
        return v17;
      }

      if ((_BYTE)word_18C465384)
      {
        unsigned int v27 = v23;
        uint64_t v28 = qword_18C4653F0(2LL);
        uint64_t v29 = v28;
        if (v28)
        {
          xmmword_18C465400(v28);
          uint64_t v30 = 0;
LABEL_47:
          uint64_t v31 = qword_18C468B68;
          if (a1 && qword_18C468B68)
          {
            do
            {
              uint64_t v31 = *(void *)(v31 + 16);
            }

            while (v31);
          }

          if ((v30 & 1) == 0) {
            xmmword_18C465410(v29);
          }
          *a4 = v31;
          uint64_t v23 = v27;
          if (v31)
          {
            int v17 = 0LL;
            goto LABEL_55;
          }

          goto LABEL_25;
        }
      }

      else
      {
        unsigned int v27 = v23;
        uint64_t v29 = 0LL;
      }

      uint64_t v30 = 1;
      goto LABEL_47;
    }
  }

  return 7LL;
}

  *(_BYTE *)(v27 + (int)v43) = 0;
  *unsigned int v11 = v43;
LABEL_595:
  uint64_t result = 0LL;
  *uint64_t v12 = *(void *)(a1 + 32);
  void *v10 = v18;
  *int v9 = *(_DWORD *)(a1 + 20);
  int v285 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v285 + 1;
  *uint64_t v8 = v285;
  return result;
}

              uint64_t v4 = sub_1813B1708(a1, v42);
              if (a2 < 2) {
                goto LABEL_136;
              }
LABEL_112:
              if ((_DWORD)v4) {
                goto LABEL_136;
              }
              uint64_t v77 = 0LL;
              if ((v39 & 1) == 0)
              {
                *uint64_t v5 = *(void *)&v78[0];
LABEL_131:
                uint64_t v4 = sub_1813B1AF4(a1, (uint64_t)v78, 0, &v77);
                if ((_DWORD)v4) {
                  goto LABEL_136;
                }
                *(_DWORD *)(a1 + 104) = -1;
                double v58 = v77;
                uint64_t v59 = sub_1813B208C(a1, v77, v78, 0);
                uint64_t v60 = sub_1813AFFD4(a1, v58);
                uint64_t v4 = v59 ? v59 : v60;
                if ((_DWORD)v4) {
                  goto LABEL_136;
                }
                if (!*(_BYTE *)(a1 + 41))
                {
                  uint64_t v4 = 0LL;
                  goto LABEL_136;
                }

                uint64_t v62 = *(sqlite3_stmt **)(a1 + 184);
                uint64_t v63 = *v5;
                if (!sub_1812B2390((uint64_t)v62, 0))
                {
                  uint64_t v64 = *((void *)v62 + 16);
                  if ((*(_WORD *)(v64 + 20) & 0x9000) != 0)
                  {
                    sub_1813040AC(v64, v63);
                  }

                  else
                  {
                    *(void *)uint64_t v64 = v63;
                    *(_WORD *)(v64 + 20) = 4;
                  }

                  uint64_t v74 = *(void *)(*(void *)v62 + 24LL);
                  if (v74) {
                    xmmword_18C465410(v74);
                  }
                }

                if (*(_BYTE *)(a1 + 41))
                {
                  uint64_t v75 = 0LL;
                  do
                  {
                    sqlite3_bind_value(v62, v75 + 2, (const sqlite3_value *)a3[v75 + 3 + *(unsigned __int8 *)(a1 + 37)]);
                    ++v75;
                  }

                  while (v75 < *(unsigned __int8 *)(a1 + 41));
                }

                sqlite3_step(v62);
                uint64_t v48 = sqlite3_reset(v62);
                goto LABEL_103;
              }

              uint64_t v50 = *(void *)(a1 + 144);
              if (!sub_1812B2390(v50, 0))
              {
                uint64_t v51 = *(void *)(*(void *)v50 + 24LL);
                if (v51) {
                  xmmword_18C465410(v51);
                }
              }

              uint64_t v52 = *(void *)(a1 + 144);
              if (!sub_1812B2390(v52, 1u))
              {
                uint64_t v53 = *(void *)(*(void *)v52 + 24LL);
                if (v53) {
                  xmmword_18C465410(v53);
                }
              }

              sqlite3_step(*(sqlite3_stmt **)(a1 + 144));
              uint64_t v4 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 144));
              int v54 = *(void *)(a1 + 24);
              if (v54)
              {
                uint64_t v55 = *(unsigned __int8 *)(v54 + 113);
                switch(v55)
                {
                  case 186:
                    goto LABEL_124;
                  case 118:
                    uint64_t v57 = *(void *)(v54 + 56);
                    goto LABEL_130;
                  case 109:
LABEL_124:
                    int v56 = "unopened";
                    break;
                  default:
                    int v56 = "invalid";
                    break;
                }
              }

              else
              {
                int v56 = "NULL";
              }

              sqlite3_log(21, "API call with %s database connection pointer", v56);
              sub_1812CF36C(186263);
              uint64_t v57 = 0LL;
LABEL_130:
              *(void *)&v78[0] = v57;
              *uint64_t v5 = v57;
              if ((_DWORD)v4) {
                goto LABEL_136;
              }
              goto LABEL_131;
            }

            if ((v41 & 0x12) != 0 && *(void *)(v40 + 8))
            {
              int v42 = sub_181303DF0(v40);
              goto LABEL_111;
            }

uint64_t sub_1812A1948(uint64_t a1)
{
  *(void *)(a1 + 64) = 0LL;
  uint64_t result = sub_1812FD1B4(a1);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 64))
    {
      if (!*(_BYTE *)(v3 + 63)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  0LL,  1LL,  9LL);
      }
      *(_BYTE *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 124) = 0;
      *(_BYTE *)(v3 + 67) = 0;
    }

    if ((*(__int16 *)(v3 + 60) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v3 + 63)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v3 + 8) + 112LL))( *(void *)(v3 + 8),  *(unsigned __int16 *)(v3 + 60) + 3,  1LL,  5LL);
      }
      *(_WORD *)(v3 + 60) = -1;
    }

int *sub_1812A1B68(int *result, unsigned int a2)
{
  uint64_t v2 = (void *)*((void *)result + 75);
  if (v2)
  {
    uint64_t v3 = result;
    *((void *)result + 75) = 0LL;
    if (result[141] >= 1)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = a2;
      do
      {
        uint64_t v6 = v2[v4];
        uint64_t v7 = *(void **)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = *(void (**)(void))(*v7 + v5);
          if (v8) {
            v8();
          }
        }

        *(_DWORD *)(v6 + 32) = 0;
        uint64_t v9 = *(void **)v6;
        int v10 = *(_DWORD *)(v6 + 24) - 1;
        *(_DWORD *)(v6 + 24) = v10;
        if (!v10)
        {
          uint64_t v11 = *(void *)(v6 + 16);
          uint64_t v12 = v9;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(void *)v11 + 32LL))(v11);
            uint64_t v12 = *(void **)v6;
          }

          uint64_t v13 = *(void *)(v6 + 8);
          int v14 = *(_DWORD *)(v13 + 16) - 1;
          *(_DWORD *)(v13 + 16) = v14;
          if (!v14)
          {
            BOOL v15 = *(void (**)(void))(v13 + 32);
            if (v15) {
              v15(*(void *)(v13 + 24));
            }
            sub_1812F20DC(v12, (void *)v13);
          }

          sub_1812F20DC(v9, (void *)v6);
        }

        ++v4;
      }

      while (v4 < *((int *)v3 + 141));
    }

    uint64_t result = (int *)sub_1812F20DC(v3, v2);
    *((_DWORD *)v3 + 141) = 0;
  }

  return result;
}

uint64_t sub_1812A1C70(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 32LL * a2 + 24);
  for (uint64_t i = *(void **)(v4 + 16); i; uint64_t i = (void *)*i)
    *(_DWORD *)(i[2] + 48LL) &= ~0x10u;
  uint64_t v6 = *(void **)(v4 + 40);
  if (v6)
  {
    do
    {
      *(_WORD *)(v6[2] + 99LL) &= ~0x80u;
      uint64_t v6 = (void *)*v6;
    }

    while (v6);
    uint64_t v3 = *(void *)(a1 + 32);
  }

  v29[0] = a1;
  uint64_t v7 = *(_BYTE **)(v3 + 32LL * a2);
  v29[1] = v7;
  uint64_t v8 = sub_1812E2C64(a1, "sqlite_stat1", v7);
  if (v8 && !*(_BYTE *)(v8 + 63))
  {
    uint64_t v23 = (const char *)sub_18127F588( a1,  "SELECT tbl,idx,stat FROM %Q.sqlite_stat1",  v9,  v10,  v11,  v12,  v13,  v14,  (char)v7);
    if (v23)
    {
      uint64_t v24 = (char *)v23;
      uint64_t v15 = sqlite3_exec((sqlite3 *)a1, v23, (int (__cdecl *)(void *, int, char **, char **))sub_1812C7184, v29, 0LL);
      sub_1812F20DC((void *)a1, v24);
      uint64_t v16 = *(void **)(v4 + 40);
      if (!v16) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v15 = 7LL;
      uint64_t v16 = *(void **)(v4 + 40);
      if (!v16) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = *(void **)(v4 + 40);
    if (!v16) {
      goto LABEL_27;
    }
  }

  do
  {
    uint64_t v17 = v16[2];
    if ((*(_WORD *)(v17 + 99) & 0x80) == 0)
    {
      else {
        unint64_t v18 = *(unsigned __int16 *)(v17 + 94);
      }
      uint64_t v20 = *(_WORD **)(v17 + 16);
      uint64_t v19 = *(void *)(v17 + 24);
      int v21 = *(__int16 *)(v19 + 58);
      if (v21 <= 98)
      {
        LOWORD(v21) = 99;
        *(_WORD *)(v19 + 58) = 99;
      }

      if (*(void *)(v17 + 72)) {
        LOWORD(v21) = v21 - 10;
      }
      *uint64_t v20 = v21;
      memcpy(v20 + 1, &unk_1813C6E00, 2 * (v18 & 0x7FFF));
      LODWORD(v22) = *(unsigned __int16 *)(v17 + 94);
      if (v18 < v22)
      {
        do
        {
          v20[v18 + 1] = 23;
          unint64_t v22 = *(unsigned __int16 *)(v17 + 94);
          ++v18;
        }

        while (v18 < v22);
      }

      if (*(_BYTE *)(v17 + 98)) {
        v20[v22] = 0;
      }
    }

    uint64_t v16 = (void *)*v16;
  }

  while (v16);
LABEL_27:
  if ((_DWORD)v15 == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v26 = *(void *)(a1 + 344);
    if (v26)
    {
      sub_1812DC47C(v26, "out of memory", v9, v10, v11, v12, v13, v14, v28);
      for (uint64_t j = *(void *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
      {
        *(_DWORD *)(j + 24) = 7;
        uint64_t j = *(void *)(j + 256);
        if (!j) {
          break;
        }
      }
    }
  }

  return v15;
}

int sqlite3_get_table( sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
{
  if (pazResult) {
    *pazResult = 0LL;
  }
  if (pnColumn) {
    *pnColumuint64_t n = 0;
  }
  if (pnRow) {
    *pnRow = 0;
  }
  if (pzErrmsg) {
    *pzErrmsg = 0LL;
  }
  if (!db)
  {
    uint64_t v13 = "NULL";
    goto LABEL_21;
  }

  int v12 = *((unsigned __int8 *)db + 113);
  if (v12 == 186)
  {
LABEL_13:
    uint64_t v13 = "unopened";
LABEL_21:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1812CF36C(157459);
  }

  if (v12 != 118)
  {
    if (v12 != 109)
    {
      uint64_t v13 = "invalid";
      goto LABEL_21;
    }

    goto LABEL_13;
  }

  if (pazResult)
  {
    uint64_t v26 = 0LL;
    __int128 v27 = xmmword_1813CDB40;
    int v28 = 0;
    if (sqlite3_initialize() || (uint64_t v16 = (void *)sub_18126F0AC(160LL), (v25 = v16) == 0LL))
    {
LABEL_17:
      int v14 = 7;
LABEL_18:
      *((_DWORD *)db + 20) = v14;
      return v14;
    }

    *uint64_t v16 = 0LL;
    int v17 = sqlite3_exec(db, zSql, (int (__cdecl *)(void *, int, char **, char **))sub_1812A4E20, &v25, pzErrmsg);
    *uint64_t v25 = HIDWORD(v27);
    if (v17 == 4)
    {
      sqlite3_free_table((char **)v25 + 1);
      unint64_t v18 = v26;
      if (!v26) {
        goto LABEL_41;
      }
      if (!pzErrmsg)
      {
LABEL_35:
        int v21 = (void (**)(const char *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v18);
          --qword_18C468B10;
          off_18C4653A8(v18);
          unint64_t v18 = (const char *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_41;
          }
          int v21 = (void (**)(const char *))&xmmword_18C465410;
        }

        (*v21)(v18);
LABEL_41:
        int v14 = v28;
        goto LABEL_18;
      }

      uint64_t v19 = *pzErrmsg;
      if (*pzErrmsg)
      {
        uint64_t v20 = (void (**)(char *))&off_18C4653A8;
        if (!dword_18C465380)
        {
LABEL_33:
          (*v20)(v19);
          goto LABEL_34;
        }

        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v19);
        --qword_18C468B10;
        off_18C4653A8(v19);
        uint64_t v19 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v20 = (void (**)(char *))&xmmword_18C465410;
          goto LABEL_33;
        }
      }

uint64_t sub_1812A2264(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = *(unsigned int *)(a1 + 20);
  uint64_t v7 = *(int *)(a1 + 24);
  if ((int)result < (int)v7)
  {
LABEL_4:
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 20) = result + 1;
    if ((a3 & 2) == 0) {
      *(_DWORD *)(a1 + 28) = result + 1;
    }
    if (!a2)
    {
      *(_WORD *)(v14 + 56LL * (int)result + 16) = 1;
LABEL_10:
      *(void *)(v14 + 56LL * (int)result) = a2;
      uint64_t v16 = v14 + 56LL * (int)result;
      *(_WORD *)(v16 + 18) = a3;
      *(void *)(v16 + 8) = a1;
      *(_OWORD *)(v16 + 20) = 0u;
      *(_OWORD *)(v16 + 36) = 0u;
      *(_DWORD *)(v16 + 52) = 0;
      return result;
    }

    if ((*(_BYTE *)(a2 + 6) & 8) == 0)
    {
      __int16 v15 = 1;
      goto LABEL_30;
    }

    unint64_t v17 = *(int *)(a2 + 44);
    if (v17 >= 8)
    {
      __int16 v18 = 40;
      if (v17 >= 0x100)
      {
        unint64_t v19 = *(int *)(a2 + 44);
        do
        {
          v18 += 40;
          unint64_t v17 = v19 >> 4;
          BOOL v20 = v19 > 0xFFF;
          v19 >>= 4;
        }

        while (v20);
      }

      if (v17 < 0x10)
      {
        LOBYTE(v21) = v17;
      }

      else
      {
        do
        {
          v18 += 10;
          unint64_t v21 = v17 >> 1;
          BOOL v20 = v17 > 0x1F;
          v17 >>= 1;
        }

        while (v20);
      }
    }

    else
    {
      if (v17 < 2)
      {
        __int16 v15 = -270;
        goto LABEL_30;
      }

      __int16 v18 = 40;
      do
      {
        v18 -= 10;
        LOBYTE(v21) = 2 * v17;
        BOOL v22 = v17 >= 4;
        v17 *= 2LL;
      }

      while (!v22);
    }

    __int16 v15 = v18 + word_1813CD842[v21 & 7] - 280;
LABEL_30:
    *(_WORD *)(v14 + 56LL * (int)result + 16) = v15;
    do
    {
      int v24 = *(_DWORD *)(a2 + 4);
      if ((v24 & 0x82000) == 0) {
        break;
      }
      uint64_t v23 = (uint64_t *)((v24 & 0x80000) != 0 ? *(void *)(a2 + 32) + 8LL : a2 + 16);
      a2 = *v23;
    }

    while (*v23);
    goto LABEL_10;
  }

  uint64_t v8 = *(const void **)(a1 + 32);
  uint64_t v9 = *(void ****)a1;
  uint64_t v10 = ***(void ****)a1;
  uint64_t v11 = 112 * v7;
  int v12 = (void *)sub_1812F2264((uint64_t)v10, 112 * v7 + 16);
  if (v12)
  {
    *int v12 = v9[11];
    v12[1] = v11;
    v9[11] = (void **)v12;
    uint64_t v13 = v12 + 2;
    *(void *)(a1 + 32) = v13;
    memcpy(v13, v8, 56LL * *(int *)(a1 + 20));
    uint64_t result = *(unsigned int *)(a1 + 20);
    *(_DWORD *)(a1 + 24) *= 2;
    goto LABEL_4;
  }

  *(void *)(a1 + 32) = 0LL;
  if (a2 && (a3 & 1) != 0) {
    sub_181309110(v10, (unsigned __int8 *)a2);
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 32) = v8;
  return result;
}

void sub_1812A2470( int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v254[1] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *a2;
  uint64_t v252 = 0LL;
  uint64_t v253 = 0LL;
  uint64_t v10 = *(uint64_t **)v9;
  uint64_t v11 = **(void **)v9;
  if (!*(_BYTE *)(v11 + 103))
  {
    int v12 = a3;
    uint64_t v14 = a1;
    uint64_t v15 = a2[4];
    int v16 = a3;
    uint64_t v249 = (_DWORD *)(v9 + 592);
    uint64_t v242 = v15 + 56LL * (int)a3;
    unint64_t v17 = *(unsigned __int8 **)v242;
    *(_DWORD *)(v9 + 592) = 0;
    __int16 v18 = (unsigned __int8 *)*((void *)v17 + 2);
    if (v18)
    {
      if (*v18 == 167 && (*((_DWORD *)v18 + 1) & 0x20) == 0)
      {
        int v22 = *((_DWORD *)v18 + 11);
        if (*(_DWORD *)(v9 + 600) == v22)
        {
          uint64_t v21 = 1LL;
          goto LABEL_16;
        }

        uint64_t v23 = *(unsigned int *)(v9 + 596);
        if ((int)v23 >= 2)
        {
          uint64_t v24 = 0LL;
          uint64_t v25 = v23 - 1;
          while (*(_DWORD *)(v9 + 604 + 4 * v24) != v22)
          {
            if (v25 == ++v24) {
              goto LABEL_15;
            }
          }

          uint64_t v21 = 1LL << (v24 + 1);
LABEL_16:
          unsigned int v26 = *v17;
          uint64_t v250 = (uint64_t)a2;
          int v251 = v16;
          BOOL v248 = v10;
          uint64_t v244 = v21;
          if (v26 == 49)
          {
            int v27 = sub_18131D0B8(v10, (uint64_t)v17, a3, a4, a5, a6, a7, a8);
            uint64_t v14 = a1;
            if (v27) {
              return;
            }
            int v28 = (int *)*((void *)v17 + 4);
            int v245 = v12;
            uint64_t v243 = v11;
            if ((v17[5] & 0x10) != 0)
            {
              uint64_t v43 = sub_181331514(v249, (uint64_t)v28);
              uint64_t v14 = a1;
              uint64_t v31 = v43;
              uint64_t v21 = v244;
            }

            else
            {
              uint64_t v21 = v244;
              if (v28)
              {
                int v29 = *v28;
                if (*v28 >= 1)
                {
                  uint64_t v30 = 0LL;
                  uint64_t v31 = 0LL;
                  while (1)
                  {
                    BOOL v36 = *(unsigned __int8 **)&v28[6 * v30 + 2];
                    if (v36)
                    {
                      if (*v36 == 167 && (*((_DWORD *)v36 + 1) & 0x20) == 0)
                      {
                        int v38 = *((_DWORD *)v36 + 11);
                        if (*(_DWORD *)(v9 + 600) == v38)
                        {
                          uint64_t v35 = 1LL;
                          goto LABEL_31;
                        }

                        uint64_t v39 = *(unsigned int *)(v9 + 596);
                        if ((int)v39 >= 2)
                        {
                          uint64_t v40 = 0LL;
                          uint64_t v41 = v39 - 1;
                          while (*(_DWORD *)(v9 + 604 + 4 * v40) != v38)
                          {
                            if (v41 == ++v40) {
                              goto LABEL_30;
                            }
                          }

                          uint64_t v35 = 1LL << (v40 + 1);
                          goto LABEL_31;
                        }
                      }

                      else if ((*((_DWORD *)v36 + 1) & 0x810000) == 0)
                      {
                        uint64_t v35 = sub_181332EB0(v249, v36);
                        uint64_t v21 = v244;
                        uint64_t v14 = a1;
                        int v29 = *v28;
                        goto LABEL_31;
                      }
                    }

LABEL_71:
            *(void *)(v15 + 56LL * v16 + 40) = v31;
            unint64_t v49 = v31 | v21;
            uint64_t v10 = v248;
LABEL_72:
            if (*v249) {
              *(_WORD *)(v15 + 56LL * v16 + 18) |= 0x1000u;
            }
            int v53 = *((_DWORD *)v17 + 1);
            if ((v53 & 3) == 0) {
              goto LABEL_78;
            }
            int v54 = *((_DWORD *)v17 + 14);
            if (*(_DWORD *)(v9 + 600) == v54)
            {
              unint64_t v55 = 1LL;
              if ((v53 & 1) == 0)
              {
LABEL_77:
                if (v55 > v49 >> 1)
                {
LABEL_78:
                  unint64_t v241 = 0LL;
LABEL_89:
                  uint64_t v59 = v15 + 56LL * v16;
                  *(void *)(v59 + 48) = v49;
                  uint64_t v60 = (void *)(v59 + 48);
                  *(v60 - 3) = -1LL;
                  *((_WORD *)v60 - 14) = 0;
                  uint64_t v61 = (_WORD *)v60 - 14;
                  if (v26 > 0x39 || ((1LL << v26) & 0x3E6200000000000LL) == 0)
                  {
                    unsigned int v91 = *v17;
                    if (v91 > 0x32)
                    {
                      uint64_t v85 = v250;
                      if (v91 == 51)
                      {
                        __int16 v107 = (unsigned __int8 *)*((void *)v17 + 2);
                        if (*v107 == 167 && (v53 & 1) == 0 && (*((_DWORD *)v107 + 12) & 0x80000000) == 0)
                        {
                          __int16 v108 = sub_18129C928(v243, *((unsigned __int8 **)v17 + 2), 0LL, 0LL);
                          uint64_t v109 = sub_18127F5B0(v243, 121, 0LL, 0);
                          uint64_t v110 = (uint64_t)v108;
                          uint64_t v10 = v248;
                          uint64_t v111 = sub_1813132BC(v248, 54, v110, v109);
                          int v112 = sub_1812A2264(v250, v111, 131);
                          if (v112)
                          {
                            uint64_t v113 = *(void *)(v250 + 32) + 56LL * v112;
                            *(void *)(v113 + 40) = 0LL;
                            *(void *)(v113 + 28) = *(void *)(v107 + 44);
                            *(_WORD *)(v113 + 20) = 4;
                            uint64_t v114 = *(void *)(v250 + 32);
                            uint64_t v115 = v114 + 56LL * v112;
                            *(_DWORD *)(v115 + 24) = v245;
                            uint64_t v116 = v114 + 56LL * v16;
                            *(_WORD *)(v115 + 16) = *(_WORD *)(v116 + 16);
                            ++*(_BYTE *)(v116 + 22);
                            *(_WORD *)(v116 + 18) |= 8u;
                            uint64_t v242 = v116;
                            *(void *)(v113 + 48) = *(void *)(v116 + 48);
                          }
                        }

                        goto LABEL_221;
                      }

                      if (v91 == 172)
                      {
                        if (*(_BYTE *)(v250 + 16) != 44
                          || !sub_181332800( (uint64_t)v10,  (uint64_t)v17,  (uint64_t *)&v253,  (BOOL *)&v252 + 1,  &v252))
                        {
                          goto LABEL_221;
                        }

                        __int128 v101 = *(unsigned __int8 **)(*((void *)v17 + 4) + 32LL);
                        int v102 = v253;
                        if (v253) {
                          unsigned int v103 = sub_18129C928(v243, v253, 0LL, 0LL);
                        }
                        else {
                          unsigned int v103 = 0LL;
                        }
                        int v218 = v252;
                        if ((_DWORD)v252)
                        {
                          if (!*(_BYTE *)(*v248 + 103))
                          {
                            *(_WORD *)(v15 + 56LL * v16 + 18) |= 0x400u;
                            uint64_t v219 = (_BYTE *)*((void *)v102 + 1);
                            int v220 = *v219;
                            if (*v219)
                            {
                              uint64_t v221 = 0LL;
                              do
                              {
                                _BYTE *v219 = v220 & (~byte_1813C6558[v220] | 0xDF);
                                *(_BYTE *)(*((void *)v103 + 1) + v221++) = byte_1813C6343[v220];
                                uint64_t v219 = (_BYTE *)(v221 + *((void *)v102 + 1));
                                int v220 = *v219;
                              }

                              while (*v219);
                            }
                          }
                        }

                        if (!*(_BYTE *)(v243 + 103))
                        {
                          uint64_t v222 = *((void *)v103 + 1);
                          if (v222) {
                            size_t v223 = strlen(*((const char **)v103 + 1)) & 0x3FFFFFFF;
                          }
                          else {
                            size_t v223 = 0LL;
                          }
                          size_t v224 = v223 - 1;
                          uint64_t v225 = *(unsigned __int8 *)(v222 + v224);
                          if (v218)
                          {
                            if ((_DWORD)v225 == 64) {
                              HIDWORD(v252) = 0;
                            }
                            LOBYTE(v225) = byte_1813C6343[v225];
                          }

                          *(_BYTE *)(v222 + v224) = v225 + 1;
                        }

                        if (v218) {
                          __int16 v226 = "NOCASE";
                        }
                        else {
                          __int16 v226 = "BINARY";
                        }
                        if (v101) {
                          char v227 = sub_18129C928(v243, v101, 0LL, 0LL);
                        }
                        else {
                          char v227 = 0LL;
                        }
                        uint64_t v228 = sub_1813211C8(v248, (uint64_t)v227, v226);
                        uint64_t v229 = sub_1813132BC(v248, 57, v228, (uint64_t)v102);
                        if (v229 && (*((_DWORD *)v17 + 1) & 3) != 0)
                        {
                          *(_DWORD *)(v229 + 4) |= *((_DWORD *)v17 + 1) & 3;
                          *(_DWORD *)(v229 + 56) = *((_DWORD *)v17 + 14);
                        }

                        uint64_t v230 = sub_1812A2264(v250, v229, 259);
                        if (v101) {
                          uint64_t v231 = sub_18129C928(v243, v101, 0LL, 0LL);
                        }
                        else {
                          uint64_t v231 = 0LL;
                        }
                        uint64_t v232 = sub_1813211C8(v248, (uint64_t)v231, v226);
                        uint64_t v233 = sub_1813132BC(v248, 56, v232, (uint64_t)v103);
                        if (v233 && (*((_DWORD *)v17 + 1) & 3) != 0)
                        {
                          *(_DWORD *)(v233 + 4) |= *((_DWORD *)v17 + 1) & 3;
                          *(_DWORD *)(v233 + 56) = *((_DWORD *)v17 + 14);
                        }

                        uint64_t v234 = sub_1812A2264(v250, v233, 259);
                        sub_1812A2470(a1, v250, v230);
                        sub_1812A2470(a1, v250, v234);
                        uint64_t v235 = *(void *)(v250 + 32);
                        uint64_t v242 = v235 + 56LL * v16;
                        if (HIDWORD(v252))
                        {
                          uint64_t v236 = v235 + 56LL * (int)v230;
                          *(_DWORD *)(v236 + 24) = v245;
                          uint64_t v237 = v235 + 56LL * v16;
                          *(_WORD *)(v236 + 16) = *(_WORD *)(v237 + 16);
                          LOBYTE(v236) = *(_BYTE *)(v237 + 22);
                          uint64_t v238 = v235 + 56LL * (int)v234;
                          *(_DWORD *)(v238 + 24) = v245;
                          *(_WORD *)(v238 + 16) = *(_WORD *)(v237 + 16);
                          *(_BYTE *)(v237 + 22) = v236 + 2;
                        }

                        goto LABEL_151;
                      }
                    }

                    else
                    {
                      uint64_t v85 = v250;
                      if (v91 == 43)
                      {
                        sub_181331C40(v14, v250, v245);
                        uint64_t v242 = *(void *)(v250 + 32) + 56LL * v16;
                        goto LABEL_221;
                      }

                      if (v91 == 48)
                      {
                        if (*(_BYTE *)(v250 + 16) == 44)
                        {
                          uint64_t v92 = *((void *)v17 + 4);
                          uint64_t v93 = (unsigned __int8 *)*((void *)v17 + 2);
                          if (v93) {
                            BOOL v94 = sub_18129C928(v243, v93, 0LL, 0LL);
                          }
                          else {
                            BOOL v94 = 0LL;
                          }
                          uint64_t v182 = *(unsigned __int8 **)(v92 + 8);
                          if (v182) {
                            uint64_t v183 = sub_18129C928(v243, v182, 0LL, 0LL);
                          }
                          else {
                            uint64_t v183 = 0LL;
                          }
                          uint64_t v184 = sub_1813132BC(v10, 57, (uint64_t)v94, (uint64_t)v183);
                          if (v184 && (*((_DWORD *)v17 + 1) & 3) != 0)
                          {
                            *(_DWORD *)(v184 + 4) |= *((_DWORD *)v17 + 1) & 3;
                            *(_DWORD *)(v184 + 56) = *((_DWORD *)v17 + 14);
                          }

                          uint64_t v185 = sub_1812A2264(v250, v184, 3);
                          int v186 = v185;
                          sub_1812A2470(a1, v250, v185);
                          uint64_t v187 = *(void *)(v250 + 32);
                          uint64_t v188 = v187 + 56LL * v186;
                          *(_DWORD *)(v188 + 24) = v245;
                          uint64_t v189 = v187 + 56LL * v16;
                          *(_WORD *)(v188 + 16) = *(_WORD *)(v189 + 16);
                          ++*(_BYTE *)(v189 + 22);
                          uint64_t v190 = (unsigned __int8 *)*((void *)v17 + 2);
                          if (v190) {
                            uint64_t v191 = sub_18129C928(v243, v190, 0LL, 0LL);
                          }
                          else {
                            uint64_t v191 = 0LL;
                          }
                          uint64_t v192 = *(unsigned __int8 **)(v92 + 32);
                          if (v192) {
                            uint64_t v193 = sub_18129C928(v243, v192, 0LL, 0LL);
                          }
                          else {
                            uint64_t v193 = 0LL;
                          }
                          uint64_t v194 = sub_1813132BC(v10, 55, (uint64_t)v191, (uint64_t)v193);
                          if (v194 && (*((_DWORD *)v17 + 1) & 3) != 0)
                          {
                            *(_DWORD *)(v194 + 4) |= *((_DWORD *)v17 + 1) & 3;
                            *(_DWORD *)(v194 + 56) = *((_DWORD *)v17 + 14);
                          }

                          uint64_t v195 = sub_1812A2264(v250, v194, 3);
                          int v196 = v195;
                          sub_1812A2470(a1, v250, v195);
                          uint64_t v197 = *(void *)(v250 + 32);
                          uint64_t v198 = v197 + 56LL * v196;
                          *(_DWORD *)(v198 + 24) = v245;
                          uint64_t v199 = v197 + 56LL * v16;
                          *(_WORD *)(v198 + 16) = *(_WORD *)(v199 + 16);
                          uint64_t v242 = v199;
                          ++*(_BYTE *)(v199 + 22);
                        }

                        goto LABEL_221;
                      }
                    }

  if (*(int *)(v8 + 36) >= 1)
  {
    unint64_t v49 = 0;
    uint64_t v50 = (unsigned __int8 **)(*(void *)(v8 + 24) + 8LL);
    do
    {
      uint64_t v51 = *v50;
      v50 += 3;
      uint64_t result = sub_181319C00(v9, v51, (v49 + *(_DWORD *)(v8 + 12)));
      ++v49;
    }

    while (v49 < *(_DWORD *)(v8 + 36));
  }

  *(_BYTE *)uint64_t v8 = 0;
  if (v47)
  {
    uint64_t v52 = *(_DWORD *)(v10 + 144);
    if (v52 - 1 == v47)
    {
      *(_DWORD *)(v10 + 144) = v47;
    }

    else
    {
      if (*(_BYTE *)(*(void *)v10 + 103LL)) {
        int v53 = &byte_18C550680;
      }
      else {
        int v53 = (char *)(*(void *)(v10 + 136) + 40LL * v47);
      }
      *((_DWORD *)v53 + 2) = v52;
    }
  }

  return result;
}

        if (!os_signpost_enabled(v5))
        {
          if (!v28) {
            goto LABEL_77;
          }
          goto LABEL_76;
        }

        BOOL v36 = os_signpost_id_make_with_pointer(v5, (const void *)a2);
        int v37 = v28;
        if (!v28)
        {
          if (strlen(v6) >= 0x81)
          {
            int v38 = strndup(v6, 0x80uLL);
            int v28 = v38;
            if (v38)
            {
              *(_WORD *)(v38 + 125) = 11822;
              v38[127] = 46;
              int v37 = v38;
              goto LABEL_83;
            }
          }

          else
          {
            int v28 = 0LL;
          }

          int v37 = (char *)v6;
        }

  if (v27)
  {
    if ((*(_WORD *)(v27 + 20) & 0x9000) != 0 || *(_DWORD *)(v27 + 32))
    {
      unint64_t v49 = v27;
      sub_181303838(v27);
      int v27 = v49;
    }

    sub_1812F20DC(*(void **)(v27 + 24), (void *)v27);
  }

  return v15;
}

            int v38 = *(void *)(v38 + 8);
            if (v38) {
              goto LABEL_72;
            }
LABEL_85:
            int v48 = *v30;
            if (!*v30) {
              goto LABEL_157;
            }
            for (uint64_t m = 0LL; ; ++m)
            {
              uint64_t v50 = v14[m];
              uint64_t v51 = *(unsigned __int8 *)(v48 + m);
              if ((_DWORD)v50 == (_DWORD)v51)
              {
                if (!v14[m])
                {
                  *(void *)&BOOL v94 = v30;
                  if ((v29 & 0x4000000) == 0)
                  {
                    sub_18131C674((uint64_t)v92, (_DWORD *)v30[4]);
                    int v48 = *v30;
                  }

                  if (v48)
                  {
                    uint64_t v52 = v101;
                    if (v101)
                    {
                      if (*v101 == v48)
                      {
                        int v54 = &v101;
LABEL_121:
                        *int v54 = v52[3];
                        v52[3] = v93;
                        *(void *)&uint64_t v93 = v52;
                        ++DWORD2(v93);
                      }

                      else
                      {
                        while (1)
                        {
                          int v53 = v52;
                          uint64_t v52 = (void *)v52[3];
                          if (!v52) {
                            break;
                          }
                          if (*v52 == v48)
                          {
                            int v54 = v53 + 3;
                            goto LABEL_121;
                          }
                        }
                      }
                    }
                  }

                  goto LABEL_157;
                }
              }

              else if (byte_1813C6343[v50] != byte_1813C6343[v51])
              {
                goto LABEL_157;
              }
            }
          }
        }

        else if (byte_1813C6343[v43] != byte_1813C6343[v44])
        {
          goto LABEL_71;
        }
      }
    }

    if ((v29 & 0x4000000) != 0) {
      goto LABEL_157;
    }
    int v32 = v98[8];
    uint64_t v90 = 0u;
    unsigned int v91 = 0u;
    uint64_t v89 = 0u;
    uint64_t v88 = v95;
    *(_DWORD *)(v32 + 4) &= ~0x200000u;
    sub_181321444(v95, v30[8], (uint64_t)&v88);
    if (!v97)
    {
      sub_181285228(v92, (void *)v30[8]);
      goto LABEL_157;
    }

    uint64_t v25 = v96;
    if (!v96) {
LABEL_157:
    }
      uint64_t v25 = sub_1813531B0((uint64_t)a1, (uint64_t *)&v93, (uint64_t)v11, v17, 1LL, v26, v27, v28);
  }

      sub_1812CF36C(89717);
      goto LABEL_72;
    }

    if (byte_1813C6343[v21] != byte_1813C6343[v22]) {
      break;
    }
LABEL_19:
    ++v19;
  }

  uint64_t v23 = "crisismerge";
  for (uint64_t n = a2; ; ++n)
  {
    uint64_t v25 = *n;
    unsigned int v26 = *(unsigned __int8 *)v23;
    if ((_DWORD)v25 == (_DWORD)v26)
    {
      if (*n) {
        goto LABEL_24;
      }
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) != 1) {
        goto LABEL_72;
      }
      if (a3)
      {
        uint64_t v50 = *((_WORD *)a3 + 10);
        if ((v50 & 0x24) != 0)
        {
          uint64_t v51 = (uint64_t)*a3;
          goto LABEL_82;
        }

        if ((v50 & 8) != 0)
        {
          uint64_t v63 = *(double *)a3;
          if (*(double *)a3 >= -9.22337204e18)
          {
            if (v63 > 9.22337204e18) {
              goto LABEL_72;
            }
            uint64_t v51 = (uint64_t)v63;
LABEL_82:
            if ((v51 & 0x80000000) != 0) {
              goto LABEL_72;
            }
            else {
              uint64_t v52 = v51;
            }
          }
        }

        else if ((v50 & 0x12) != 0 && a3[1])
        {
          LODWORD(v51) = sub_181303DF0((uint64_t)a3);
          goto LABEL_82;
        }
      }

      else
      {
        sub_1812CF36C(89717);
      }

      uint64_t v52 = 16;
LABEL_127:
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 144) = v52;
      return result;
    }

    if (byte_1813C6343[v25] != byte_1813C6343[v26]) {
      break;
    }
LABEL_24:
    ++v23;
  }

  int v27 = "deletemerge";
  for (iint i = a2; ; ++ii)
  {
    int v32 = *ii;
    unsigned int v33 = *(unsigned __int8 *)v27;
    if ((_DWORD)v32 != (_DWORD)v33) {
      break;
    }
    if (!*ii)
    {
      if (sqlite3_value_numeric_type((sqlite3_value *)a3) == 1)
      {
        int v54 = sqlite3_value_int((sqlite3_value *)a3);
        else {
          unint64_t v55 = 0;
        }
        if (v54 >= 0) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 10;
        }
      }

      else
      {
        *a4 = 1;
        uint64_t v56 = 10;
      }

      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 180) = v56;
      return result;
    }

LABEL_222:
                    if (v91 == 53)
                    {
LABEL_225:
                      uint64_t v126 = (unsigned __int8 *)*((void *)v17 + 2);
                      int v127 = *v126;
                      if (v127 == 176) {
                        int v127 = v126[2];
                      }
                      if (v127 == 138)
                      {
                        uint64_t v128 = (int **)(*((void *)v126 + 4) + 32LL);
                      }

                      else
                      {
                        if (v127 != 177) {
                          goto LABEL_258;
                        }
                        uint64_t v128 = (int **)(v126 + 32);
                      }

                      int v129 = **v128;
                      if (v129 >= 2)
                      {
                        unint64_t v130 = (unsigned __int8 *)*((void *)v17 + 3);
                        int v131 = *v130;
                        if (v131 == 176) {
                          int v131 = v130[2];
                        }
                        if (v131 == 138)
                        {
                          uint64_t v132 = (_DWORD **)(*((void *)v130 + 4) + 32LL);
                        }

                        else
                        {
                          if (v131 != 177) {
                            goto LABEL_258;
                          }
                          uint64_t v132 = (_DWORD **)(v130 + 32);
                        }

                        if (**v132 == v129
                          && ((v126[5] & 0x10) == 0 || (v130[5] & 0x10) == 0)
                          && *(_BYTE *)(v85 + 16) == 44)
                        {
                          for (int i = 0; i != v129; ++i)
                          {
                            char v135 = sub_181332D98((uint64_t)v10, *((unsigned __int8 **)v17 + 2), i, v129);
                            unint64_t v136 = sub_181332D98((uint64_t)v10, *((unsigned __int8 **)v17 + 3), i, v129);
                            uint64_t v137 = sub_1813132BC(v10, *v17, (uint64_t)v135, (uint64_t)v136);
                            if (v137 && (*((_DWORD *)v17 + 1) & 3) != 0)
                            {
                              *(_DWORD *)(v137 + 4) |= *((_DWORD *)v17 + 1) & 3;
                              *(_DWORD *)(v137 + 56) = *((_DWORD *)v17 + 14);
                            }

                            uint64_t v134 = sub_1812A2264(v85, v137, 32769);
                            sub_1812A2470(a1, v85, v134);
                          }

                          uint64_t v181 = *(void *)(v85 + 32) + 56LL * v16;
                          *(_WORD *)(v181 + 18) |= 6u;
                          *(_WORD *)(v181 + 20) = 0x2000;
                          goto LABEL_383;
                        }
                      }

          if ((v312 & 1) != 0)
          {
            if (v10)
            {
              int v175 = v100;
              uint64_t v176 = sub_181319BA8(v100, 12LL, v339, v69, v70, v71, v82, v75);
              HIDWORD(v300) = v176;
              if ((v315 & 0x80000000) != 0)
              {
                LODWORD(v300) = v176;
              }

              else
              {
                uint64_t v177 = v176;
                sub_1813103F4(v175, 80LL, v315 + v306, v316, v70, v71, v82, v75);
                LODWORD(v300) = v177;
              }

              uint64_t v100 = v175;
            }

            else
            {
              uint64_t v300 = 0LL;
            }
          }

          else
          {
            uint64_t v178 = sub_181319BA8(v100, 36LL, v310, v69, v70, v71, v82, v75);
            uint64_t v100 = v323;
            LODWORD(v300) = v178;
            HIDWORD(v300) = *(_DWORD *)(v323 + 144);
          }

          LODWORD(v203) = *(__int16 *)(v23 + 54);
          if ((int)v203 >= 1)
          {
            uint64_t v204 = 0LL;
            unint64_t v327 = 0;
            uint64_t v205 = v319;
            while (1)
            {
              uint64_t v206 = *(void *)(v23 + 8);
              uint64_t v207 = *(_WORD *)(v206 + 16 * v204 + 14);
              if ((v207 & 0x62) != 0) {
                break;
              }
              if (a4) {
                goto LABEL_255;
              }
              if (!v303)
              {
LABEL_269:
                uint64_t v214 = *(unsigned __int16 *)(v206 + 16 * v204 + 12);
                if (v214 && !*(_BYTE *)(v23 + 63) && (uint64_t v216 = *(_DWORD **)(v23 + 80)) != 0LL && *v216 >= v214) {
                  uint64_t v215 = *(void *)&v216[6 * (v214 - 1) + 2];
                }
                else {
                  uint64_t v215 = 0LL;
                }
                sub_18131E5AC((void *)a1, v215, v205);
                goto LABEL_246;
              }

              uint64_t v69 = (v204 - v327);
LABEL_265:
              if ((v312 & 1) != 0)
              {
                if (v10)
                {
                  if (v306 == v319) {
                    goto LABEL_247;
                  }
                  uint64_t v211 = (v69 + v306);
                  uint64_t v212 = v100;
                  uint64_t v213 = 81LL;
                  goto LABEL_282;
                }

                uint64_t v299 = *(void *)&v332[6 * (int)v69 + 2];
                uint64_t v217 = sub_18128CF10((void *)a1, (unsigned __int8 *)v299, v205, v69, v70, v71, v82, v75, v102);
                if ((_DWORD)v217 != (_DWORD)v205)
                {
                  uint64_t v211 = v217;
                  if ((*(_DWORD *)(v299 + 4) & 0x400000) != 0) {
                    uint64_t v213 = 80LL;
                  }
                  else {
                    uint64_t v213 = 81LL;
                  }
                  uint64_t v212 = v323;
LABEL_282:
                  sub_1813103F4(v212, v213, v211, v205, v70, v71, v82, v75);
                }
              }

              else
              {
                sub_181279C3C(v100, 94LL, v310, v69, v205, v71, v82, v75);
              }

  if (v109)
  {
    int v104 = *(void *)(v109 + 112);
    if ((*(_WORD *)(v104 + 52) & 0x20) != 0)
    {
      uint64_t v105 = *(void *)(v104 + 40);
      --*(_DWORD *)(v105 + 152);
      *(void *)(v104 + 32) = *(void *)(v105 + 168);
      *(void *)(v105 + 168) = v104;
      (*(void (**)(void, void, void))(**(void **)(v105 + 72) + 144LL))( *(void *)(v105 + 72),  *(void *)(v105 + 200) * (*(_DWORD *)(v104 + 48) - 1),  *(void *)(v104 + 8));
    }

    else
    {
      sub_1812F9F44(v104);
    }
  }

  return v12;
}

LABEL_258:
                      if (*(_BYTE *)(v85 + 16) != 44)
                      {
LABEL_383:
                        uint64_t v217 = *(void *)(v250 + 32) + 56LL * v251;
                        *(void *)(v217 + 40) |= v241;
                        return;
                      }

                      if (v91 - 51 >= 2 && v91 != 171)
                      {
                        if (v91 == 172)
                        {
                          uint64_t v142 = *((void *)v17 + 4);
                          if (v142)
                          {
                            if (*(_DWORD *)v142 == 2)
                            {
                              uint64_t v143 = *(unsigned __int8 **)(v142 + 32);
                              if (*v143 == 167 && *(_BYTE *)(*((void *)v143 + 9) + 63LL) == 1)
                              {
                                uint64_t v144 = (_BYTE *)*((void *)v17 + 1);
                                int v145 = "match";
                                for (uint64_t j = v144; ; ++j)
                                {
                                  uint64_t v157 = *j;
                                  uint64_t v158 = *(unsigned __int8 *)v145;
                                  if ((_DWORD)v157 == (_DWORD)v158)
                                  {
                                    if (!*j)
                                    {
                                      uint64_t v159 = 0LL;
LABEL_294:
                                      LOBYTE(v247) = (&off_189B6E6E8)[2 * v159 + 1];
                                      unsigned int v148 = *(unsigned __int8 **)(v142 + 8);
                                      int v149 = 1;
LABEL_299:
                                      uint64_t v160 = v9 + 604;
                                      while (2)
                                      {
                                        uint64_t v167 = v143;
                                        if (v148)
                                        {
                                          if (*v148 == 167 && (*((_DWORD *)v148 + 1) & 0x20) == 0)
                                          {
                                            int v170 = *((_DWORD *)v148 + 11);
                                            if (*(_DWORD *)(v9 + 600) == v170)
                                            {
                                              uint64_t v169 = 1LL;
                                              if (v143) {
                                                goto LABEL_318;
                                              }
                                              goto LABEL_334;
                                            }

                                            uint64_t v171 = *(unsigned int *)(v9 + 596);
                                            if ((int)v171 >= 2)
                                            {
                                              uint64_t v172 = 0LL;
                                              uint64_t v173 = v171 - 1;
                                              while (*(_DWORD *)(v160 + 4 * v172) != v170)
                                              {
                                                if (v173 == ++v172) {
                                                  goto LABEL_317;
                                                }
                                              }

                                              uint64_t v169 = 1LL << (v172 + 1);
                                              if (v143) {
                                                goto LABEL_318;
                                              }
                                              goto LABEL_334;
                                            }
                                          }

                                          else if ((*((_DWORD *)v148 + 1) & 0x810000) == 0)
                                          {
                                            uint64_t v169 = sub_181332EB0(v249, v148);
                                            if (!v143) {
                                              goto LABEL_334;
                                            }
LABEL_318:
                                            if (*v143 != 167 || (*((_DWORD *)v143 + 1) & 0x20) != 0)
                                            {
                                              if ((*((_DWORD *)v143 + 1) & 0x810000) != 0
                                                || (sub_181332EB0(v249, v143) & v169) == 0)
                                              {
                                                goto LABEL_334;
                                              }

LABEL_301:
                                              uint64_t v143 = v148;
                                              unsigned int v148 = v167;
                                              if (v149-- <= 1) {
                                                goto LABEL_383;
                                              }
                                              continue;
                                            }

                                            int v175 = *((_DWORD *)v143 + 11);
                                            if (*(_DWORD *)(v9 + 600) == v175)
                                            {
                                              if ((v169 & 1) != 0) {
                                                goto LABEL_301;
                                              }
                                            }

                                            else
                                            {
                                              uint64_t v176 = *(unsigned int *)(v9 + 596);
                                              if ((int)v176 >= 2)
                                              {
                                                uint64_t v177 = 0LL;
                                                uint64_t v178 = v176 - 1;
                                                while (*(_DWORD *)(v160 + 4 * v177) != v175)
                                                {
                                                  if (v178 == ++v177) {
                                                    goto LABEL_334;
                                                  }
                                                }
                                              }
                                            }

  int v22 = v229;
  uint64_t v14 = a9;
  if (*v237) {
    goto LABEL_302;
  }
  int v196 = v237;
  uint64_t v197 = *(_DWORD *)(v229 + 64);
  if (v197 >= 2)
  {
    do
    {
      uint64_t v198 = v197 - 1;
      uint64_t v199 = sub_18139176C(v229, v197 - 1);
      uint64_t v200 = v196;
      if (v199)
      {
        uint64_t v201 = v199;
        if (!*v196) {
          (*(void (**)(_DWORD *, uint64_t, void))(v229 + 136LL * v199 + 152))( v235,  v229 + 136LL * v199 + 96,  0LL);
        }
        uint64_t v202 = *(_DWORD *)(v229 + 64);
        uint64_t v203 = __OFADD__(v202, v201);
        uint64_t v204 = v202 + v201;
        if (v204 < 0 != v203) {
          ++v204;
        }
        uint64_t v205 = v204 >> 1;
        uint64_t v200 = v196;
        if (v204 >> 1 >= v198)
        {
          do
          {
            if (*v200) {
              break;
            }
            uint64_t v207 = sub_18139176C(v229, v205);
            if (v207)
            {
              uint64_t v208 = v207;
              (*(void (**)(_DWORD *, uint64_t, void))(v229 + 136LL * v207 + 152))( v235,  v229 + 136LL * v207 + 96,  0LL);
              uint64_t v205 = *(_DWORD *)(v229 + 64) + v208;
            }

            uint64_t v206 = v205 >= 0 ? v205 : v205 + 1;
            uint64_t v205 = v206 >> 1;
            uint64_t v200 = v237;
          }

          while (v206 >> 1 >= v198);
        }
      }

      int v196 = v200;
      __int128 v98 = v197-- <= 2;
    }

    while (!v98);
  }

  uint64_t v209 = *(unsigned __int16 *)(*(void *)(v229 + 88) + 4LL);
  uint64_t v210 = v229 + 136LL * *(unsigned __int16 *)(*(void *)(v229 + 88) + 4LL);
  uint64_t v211 = *(void *)(v210 + 112);
  *(_BYTE *)(v229 + 20) = v211 == 0;
  *(void *)(v229 + 80) = *(void *)(v210 + 216);
  if (*(_BYTE *)(v229 + 72) && !*v196 && v211 && !*(_DWORD *)(v229 + 136LL * v209 + 224)) {
    return sub_1813903E0((uint64_t)v235, v229, 0, 0LL);
  }
  uint64_t result = sub_1813908F8(v229);
  if ((_DWORD)result) {
    return sub_1813903E0((uint64_t)v235, v229, 0, 0LL);
  }
  if (!*(_BYTE *)(v229 + 20)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v229 + 56))( v229,  v229 + 136LL * *(unsigned __int16 *)(*(void *)(v229 + 88) + 4LL) + 96);
  }
  return result;
}

LABEL_334:
                                            if (v148) {
                                              int v179 = sub_18129C928(v243, v148, 0LL, 0LL);
                                            }
                                            else {
                                              int v179 = 0LL;
                                            }
                                            uint64_t v180 = sub_1813132BC(v248, 46, 0LL, (uint64_t)v179);
                                            if ((v17[4] & 1) != 0 && v180)
                                            {
                                              *(_DWORD *)(v180 + 4) |= 1u;
                                              *(_DWORD *)(v180 + 56) = *((_DWORD *)v17 + 14);
                                            }

                                            int v161 = sub_1812A2264(v250, v180, 3);
                                            uint64_t v162 = *(void *)(v250 + 32) + 56LL * v161;
                                            *(void *)(v162 + 40) = v169;
                                            *(void *)(v162 + 28) = *(void *)(v143 + 44);
                                            *(_WORD *)(v162 + 20) = 64;
                                            *(_BYTE *)(v162 + 23) = v247;
                                            uint64_t v163 = *(void *)(v250 + 32);
                                            uint64_t v164 = v163 + 56LL * v161;
                                            *(_DWORD *)(v164 + 24) = v245;
                                            uint64_t v165 = v163 + 56LL * v251;
                                            *(_WORD *)(v164 + 16) = *(_WORD *)(v165 + 16);
                                            ++*(_BYTE *)(v165 + 22);
                                            *(_WORD *)(v165 + 18) |= 8u;
                                            *(void *)(v162 + 48) = *(void *)(v165 + 48);
                                            goto LABEL_301;
                                          }
                                        }

                                        break;
                                      }

LABEL_317:
                                      uint64_t v169 = 0LL;
                                      if (!v143) {
                                        goto LABEL_334;
                                      }
                                      goto LABEL_318;
                                    }
                                  }

                                  else if (byte_1813C6343[v157] != byte_1813C6343[v158])
                                  {
                                    uint64_t v200 = "glob";
                                    uint64_t v159 = 1LL;
                                    for (uint64_t k = (_BYTE *)*((void *)v17 + 1); ; ++k)
                                    {
                                      uint64_t v202 = *k;
                                      uint64_t v203 = *(unsigned __int8 *)v200;
                                      if ((_DWORD)v202 == (_DWORD)v203)
                                      {
                                        if (!*k) {
                                          goto LABEL_294;
                                        }
                                      }

                                      else if (byte_1813C6343[v202] != byte_1813C6343[v203])
                                      {
                                        uint64_t v204 = "like";
                                        uint64_t v159 = 2LL;
                                        for (uint64_t m = (_BYTE *)*((void *)v17 + 1); ; ++m)
                                        {
                                          uint64_t v206 = *m;
                                          uint64_t v207 = *(unsigned __int8 *)v204;
                                          if ((_DWORD)v206 == (_DWORD)v207)
                                          {
                                            if (!*m) {
                                              goto LABEL_294;
                                            }
                                          }

                                          else if (byte_1813C6343[v206] != byte_1813C6343[v207])
                                          {
                                            uint64_t v208 = "regexp";
                                            uint64_t v159 = 3LL;
                                            while (1)
                                            {
                                              uint64_t v209 = *v144;
                                              uint64_t v210 = *(unsigned __int8 *)v208;
                                              if ((_DWORD)v209 == (_DWORD)v210)
                                              {
                                                if (!*v144) {
                                                  goto LABEL_294;
                                                }
                                              }

                                              else if (byte_1813C6343[v209] != byte_1813C6343[v210])
                                              {
                                                goto LABEL_376;
                                              }

                                              ++v144;
                                              ++v208;
                                            }
                                          }

                                          ++v204;
                                        }
                                      }

                                      ++v200;
                                    }
                                  }

                                  ++v145;
                                }
                              }

LABEL_285:
                          switch(v91)
                          {
                            case 0xABu:
                              LOBYTE(v247) = 69;
                              break;
                            case 0x34u:
                              LOBYTE(v247) = 68;
                              break;
                            case 0x33u:
                              LOBYTE(v247) = 70;
                              break;
                            default:
                              LOBYTE(v247) = 0;
                              break;
                          }

                          if (v149) {
                            goto LABEL_299;
                          }
                          goto LABEL_383;
                        }
                      }

                      else
                      {
                        int v149 = 0;
                        if (v147) {
                          goto LABEL_269;
                        }
                      }

                      uint64_t v143 = (unsigned __int8 *)*((void *)v17 + 2);
                      unsigned int v148 = 0LL;
                      goto LABEL_285;
                    }

                    if (v91 != 49)
                    {
                      if (v91 != 45) {
                        goto LABEL_258;
                      }
                      goto LABEL_225;
                    }

                    if (*(_DWORD *)(v242 + 36)) {
                      goto LABEL_258;
                    }
                    int v138 = (unsigned __int8 *)*((void *)v17 + 2);
                    if (*v138 != 177) {
                      goto LABEL_258;
                    }
                    if ((v17[5] & 0x10) == 0) {
                      goto LABEL_258;
                    }
                    uint64_t v139 = *((void *)v17 + 4);
                    if (*(void *)(v139 + 80))
                    {
                      if ((*(_BYTE *)(v139 + 5) & 2) == 0) {
                        goto LABEL_258;
                      }
                    }

                    if (*(void *)(v139 + 112) || *(_BYTE *)(v85 + 16) != 44) {
                      goto LABEL_258;
                    }
                    int v140 = 177;
                    int v141 = 1;
                    while (v140 != 138)
                    {
                      if (v140 == 177)
                      {
                        uint64_t v155 = (int **)(v138 + 32);
LABEL_278:
                        int v156 = **v155;
                        goto LABEL_280;
                      }

                      int v156 = 1;
LABEL_280:
                      if (v141 - 1 >= v156) {
                        goto LABEL_383;
                      }
                      uint64_t v150 = sub_1812A2264(v250, (uint64_t)v17, 32770);
                      int v151 = v150;
                      *(_DWORD *)(*(void *)(v250 + 32) + 56LL * (int)v150 + 36) = v141;
                      sub_1812A2470(a1, v250, v150);
                      uint64_t v152 = *(void *)(v250 + 32);
                      uint64_t v153 = v152 + 56LL * v151;
                      *(_DWORD *)(v153 + 24) = v245;
                      uint64_t v154 = v152 + 56LL * v251;
                      *(_WORD *)(v153 + 16) = *(_WORD *)(v154 + 16);
                      ++*(_BYTE *)(v154 + 22);
                      int v138 = (unsigned __int8 *)*((void *)v17 + 2);
                      int v140 = *v138;
                      ++v141;
                      if (v140 == 176) {
                        int v140 = v138[2];
                      }
                    }

                    uint64_t v155 = (int **)(*((void *)v138 + 4) + 32LL);
                    goto LABEL_278;
                  }

                  for (uint64_t n = (unsigned __int8 *)*((void *)v17 + 2); n; uint64_t n = (unsigned __int8 *)*((void *)n + 2))
                  {
                    if ((n[5] & 0x20) == 0) {
                      break;
                    }
                  }

                  uint64_t v63 = (unsigned __int8 *)*((void *)v17 + 3);
                  for (iint i = v49; v63; v63 = (unsigned __int8 *)*((void *)v63 + 2))
                  {
                    if ((v63[5] & 0x20) == 0) {
                      break;
                    }
                  }

                  uint64_t v64 = v15 + 56LL * v16;
                  if ((*(void *)(v64 + 40) & v21) != 0) {
                    __int16 v65 = 2048;
                  }
                  else {
                    __int16 v65 = 0x3FFF;
                  }
                  __int16 v240 = v65;
                  int v66 = *(_DWORD *)(v64 + 36);
                  BOOL v67 = __OFSUB__(v66, 1);
                  int v68 = v66 - 1;
                  if (v68 < 0 == v67) {
                    uint64_t n = *(unsigned __int8 **)(*((void *)n + 4) + 24LL * v68 + 8);
                  }
                  uint64_t v69 = (unsigned int *)v60 - 5;
                  int v70 = *n;
                  uint64_t v71 = n;
                  if (v26 - 54 <= 3 && v70 == 177)
                  {
                    uint64_t v71 = *(unsigned __int8 **)(*((void *)n + 4) + 8LL);
                    int v70 = *v71;
                  }

                  if (v70 == 167)
                  {
                    unsigned int v72 = *((_DWORD *)v71 + 11);
                    unsigned int v73 = *((_DWORD *)v71 + 12);
                    v254[0] = __PAIR64__(v73, v72);
                  }

                  else
                  {
                    uint64_t v74 = *v14;
                    a4 = 0LL;
                    while (1)
                    {
                      uint64_t v75 = *(void *)(*(void *)&v14[26 * a4 + 10] + 16LL);
                      if (v75) {
                        break;
                      }
LABEL_109:
                      if (++a4 == v74) {
                        goto LABEL_125;
                      }
                    }

                    while (!*(void *)(v75 + 80))
                    {
                      uint64_t v75 = *(void *)(v75 + 40);
                      if (!v75) {
                        goto LABEL_109;
                      }
                    }

                    int v76 = sub_181333430(v14, v254, v71, a4);
                    uint64_t v14 = a1;
                    if (!v76)
                    {
LABEL_125:
                      if (v26 == 45) {
                        *(_WORD *)(v15 + 56LL * v16 + 18) |= 0x800u;
                      }
                      if (v63)
                      {
                        int v78 = *v63;
                        uint64_t v79 = v63;
                        if (v26 - 54 <= 3 && v78 == 177)
                        {
                          uint64_t v79 = *(unsigned __int8 **)(*((void *)v63 + 4) + 8LL);
                          int v78 = *v79;
                        }

                        if (v78 == 167)
                        {
                          v254[0] = *(void *)(v79 + 44);
                          goto LABEL_141;
                        }

                        uint64_t v80 = *v14;
                        if ((int)v80 >= 1)
                        {
                          uint64_t v81 = 0LL;
                          while (1)
                          {
                            uint64_t v82 = *(void *)(*(void *)&v14[26 * v81 + 10] + 16LL);
                            if (v82) {
                              break;
                            }
LABEL_135:
                            if (++v81 == v80) {
                              goto LABEL_146;
                            }
                          }

                          while (!*(void *)(v82 + 80))
                          {
                            uint64_t v82 = *(void *)(v82 + 40);
                            if (!v82) {
                              goto LABEL_135;
                            }
                          }

                          if (sub_181333430(v14, v254, v79, v81))
                          {
LABEL_141:
                            if ((v63[4] & 0x20) == 0)
                            {
                              if ((*((_DWORD *)v60 - 5) & 0x80000000) != 0)
                              {
                                __int16 v95 = 0;
                                uint64_t v84 = v17;
                                uint64_t v96 = v242;
                                uint64_t v85 = v250;
                                uint64_t v10 = v248;
                              }

                              else
                              {
                                int v83 = (unsigned __int8 *)sub_18129C928(v243, v17, 0LL, 0LL);
                                uint64_t v84 = v83;
                                uint64_t v85 = v250;
                                uint64_t v10 = v248;
                                if (*(_BYTE *)(v243 + 103))
                                {
                                  if (v83) {
                                    sub_181309110((void *)v243, v83);
                                  }
                                  return;
                                }

                                int v104 = sub_1812A2264(v250, (uint64_t)v83, 3);
                                if (!v104) {
                                  return;
                                }
                                uint64_t v105 = *(void *)(v250 + 32);
                                uint64_t v96 = v105 + 56LL * v104;
                                *(_DWORD *)(v96 + 24) = v245;
                                uint64_t v106 = v105 + 56LL * v251;
                                *(_WORD *)(v96 + 16) = *(_WORD *)(v106 + 16);
                                ++*(_BYTE *)(v106 + 22);
                                if (v26 == 45) {
                                  *(_WORD *)(v105 + 56LL * v104 + 18) |= 0x800u;
                                }
                                uint64_t v242 = v105 + 56LL * v251;
                                *(_WORD *)(v242 + 18) |= 8u;
                                if (sub_181331B0C((uint64_t)v248, (unsigned __int8 **)v84))
                                {
                                  *(_WORD *)(v105 + 56LL * v251 + 20) |= 0x800u;
                                  __int16 v95 = 2048;
                                }

                                else
                                {
                                  __int16 v95 = 0;
                                }
                              }

                              uint64_t v97 = v244;
                              __int128 v98 = (unsigned __int8 *)*((void *)v84 + 2);
                              if (*v98 == 177) {
                                goto LABEL_209;
                              }
                              __int128 v99 = (unsigned __int8 *)*((void *)v84 + 3);
                              if (*v99 == 177) {
                                goto LABEL_209;
                              }
                              if ((v98[5] & 2) != 0)
                              {
                                __int128 v99 = (unsigned __int8 *)*((void *)v84 + 2);
                              }

                              else if ((v99[5] & 2) == 0)
                              {
                                uint64_t v100 = sub_181289D04((uint64_t)v10, v98, (uint64_t)v79, a4, a5, a6, a7, a8);
                                if (v100)
                                {
LABEL_201:
                                  __int128 v117 = (unsigned __int8 *)*((void *)v84 + 3);
                                  if ((v117[5] & 2) != 0)
                                  {
                                    uint64_t v120 = (uint64_t)v10;
                                  }

                                  else
                                  {
                                    __int128 v118 = (unsigned __int8 *)*((void *)v84 + 2);
                                    if (!v118 || (v118[5] & 2) == 0)
                                    {
                                      uint64_t v119 = sub_181289D04((uint64_t)v10, v117, (uint64_t)v79, a4, a5, a6, a7, a8);
                                      if (v119)
                                      {
LABEL_208:
                                        uint64_t v97 = v244;
                                        if (v100 == v119)
                                        {
LABEL_210:
                                          *((int8x16_t *)v84 + 1) = vextq_s8( *((int8x16_t *)v84 + 1),  *((int8x16_t *)v84 + 1),  8uLL);
                                          unsigned int v121 = *v84;
                                          BOOL v122 = v121 >= 0x36;
                                          char v123 = v121 - 54;
                                          if (v122) {
                                            unsigned __int8 *v84 = (v123 ^ 2) + 54;
                                          }
                                          *(void *)(v96 + 28) = v254[0];
                                          *(void *)(v96 + 40) = v241 | v97;
                                          *(void *)(v96 + 48) = ii;
                                          int v124 = *v84;
                                          switch(v124)
                                          {
                                            case '-':
                                              LOWORD(v125) = 128;
                                              break;
                                            case '1':
                                              LOWORD(v125) = 1;
                                              break;
                                            case '2':
                                              LOWORD(v125) = 256;
                                              break;
                                            default:
                                              int v125 = 2 << (v124 - 53);
                                              break;
                                          }

                                          *(_WORD *)(v96 + 20) = (v125 + v95) & v240;
                                          int v16 = v251;
                                          goto LABEL_221;
                                        }

LABEL_209:
                                        *((_DWORD *)v84 + 1) ^= 0x400u;
                                        goto LABEL_210;
                                      }
                                    }

                                    uint64_t v120 = (uint64_t)v10;
                                    __int128 v117 = v118;
                                  }

                                  uint64_t v119 = sub_181289D04(v120, v117, (uint64_t)v79, a4, a5, a6, a7, a8);
                                  goto LABEL_208;
                                }
                              }

                              uint64_t v100 = sub_181289D04((uint64_t)v10, v99, (uint64_t)v79, a4, a5, a6, a7, a8);
                              goto LABEL_201;
                            }
                          }
                        }
                      }

      if (*(_DWORD *)(a3 + 16)) {
        uint64_t v11 = sub_1813B9DFC(a1, a3, a4, v16);
      }
      else {
        uint64_t v11 = 0;
      }
      goto LABEL_216;
    }

LABEL_146:
                      if (v26 == 50)
                      {
                        int v86 = *((_DWORD *)v17 + 1);
                        uint64_t v10 = v248;
                        if ((v86 & 1) == 0)
                        {
                          while (1)
                          {
                            int v87 = *n;
                            uint64_t n = (unsigned __int8 *)*((void *)n + 2);
                          }

                          if (v87 == 176) {
                            int v87 = n[2];
                          }
                          if ((v87 - 153) < 3
                            || v87 == 117
                            || v87 == 167
                            && (n[6] & 0x20) == 0
                            && (uint64_t v88 = *((void *)n + 9)) != 0
                            && ((uint64_t v89 = *((unsigned int *)n + 12), (v89 & 0x80000000) != 0)
                             || (uint64_t v90 = *(void *)(v88 + 8)) == 0
                             || (*(_BYTE *)(v90 + 16 * v89 + 8) & 0xF) != 0))
                          {
                            unsigned __int8 *v17 = -86;
                            *((void *)v17 + 1) = "false";
                            *((_DWORD *)v17 + 1) = v86 | 0x20000000;
                            void *v60 = 0LL;
                            _WORD *v61 = 0;
                          }
                        }

                        uint64_t v85 = v250;
                        goto LABEL_221;
                      }

                      uint64_t v85 = v250;
LABEL_151:
                      uint64_t v10 = v248;
LABEL_221:
                      unsigned int v91 = *v17;
                      goto LABEL_222;
                    }

                    unsigned int v72 = v254[0];
                    unsigned int v73 = HIDWORD(v254[0]);
                    uint64_t v69 = (unsigned int *)v60 - 5;
                  }

                  unsigned int *v69 = v72;
                  *(_DWORD *)(v64 + 32) = v73;
                  switch(v26)
                  {
                    case '-':
                      LOWORD(v77) = 128;
                      break;
                    case '1':
                      LOWORD(v77) = 1;
                      break;
                    case '2':
                      LOWORD(v77) = 256;
                      break;
                    default:
                      int v77 = 2 << (v26 - 53);
                      break;
                  }

                  _WORD *v61 = v77 & v240;
                  goto LABEL_125;
                }

                if (*v14 < 1 || (v14[17] & 0x40) == 0)
                {
                  unint64_t v241 = 0LL;
                  v53 &= ~2u;
                  *((_DWORD *)v17 + 1) = v53;
                  goto LABEL_89;
                }

  if ((v329 & 0x80) == 0)
  {
    uint64_t v75 = 0LL;
    uint64_t v82 = v111;
    goto LABEL_111;
  }

      if (!v55)
      {
LABEL_147:
        if (v56 == 23)
        {
          uint64_t v88 = *(_DWORD *)(a1 + 120);
          if (v88 >= 1)
          {
            for (uint64_t j = 0LL; j < v88; ++j)
            {
              if (!*(_BYTE *)(*(void *)(a1 + 136) + j))
              {
                uint64_t v90 = *(void *)(a1 + 144);
                if (!*(void *)(v90 + 8LL * ((int)j + v88)))
                {
                  unsigned int v91 = *(void *)(v90 + 8 * j);
                  if (v91)
                  {
                    if ((*(_WORD *)(v91 + 20) & 0x9000) != 0 || *(_DWORD *)(v91 + 32)) {
                      sub_181303838(*(void *)(v90 + 8 * j));
                    }
                    sub_1812F20DC(*(void **)(v91 + 24), (void *)v91);
                    uint64_t v90 = *(void *)(a1 + 144);
                    uint64_t v88 = *(_DWORD *)(a1 + 120);
                  }

                  *(void *)(v90 + 8 * j) = 0LL;
                }
              }
            }
          }
        }
      }

    *(_WORD *)(v10 + 20) = v78;
    uint64_t v88 = *((void *)a5 + 9);
    if (v88 >= 8)
    {
      uint64_t v90 = 40;
      if (v88 >= 0x100)
      {
        unsigned int v91 = *((void *)a5 + 9);
        do
        {
          v90 += 40;
          uint64_t v88 = v91 >> 4;
          uint64_t v85 = v91 > 0xFFF;
          v91 >>= 4;
        }

        while (v85);
      }

      if (v88 < 0x10)
      {
        LOBYTE(v92) = v88;
      }

      else
      {
        do
        {
          v90 += 10;
          uint64_t v92 = v88 >> 1;
          uint64_t v85 = v88 > 0x1F;
          v88 >>= 1;
        }

        while (v85);
      }
    }

    else
    {
      if (v88 < 2)
      {
        uint64_t v89 = 0;
        goto LABEL_161;
      }

      uint64_t v90 = 40;
      do
      {
        v90 -= 10;
        LOBYTE(v92) = 2 * v88;
        int v87 = v88 >= 4;
        v88 *= 2LL;
      }

      while (!v87);
    }

    uint64_t v89 = v90 + word_1813CD842[v92 & 7] - 10;
LABEL_161:
    *(_WORD *)(v10 + 22) = v89;
    *(_DWORD *)(v10 + 48) = *(_DWORD *)(v10 + 48) & 0xFFFFEFFF | ((a5[20] & 1) << 12);
    uint64_t v58 = sub_181335FD4(a1, v10);
    if ((*(_BYTE *)(v10 + 28) & 1) == 0) {
      return v58;
    }
    uint64_t v93 = *(void *)(v10 + 32);
    if (v93)
    {
      BOOL v94 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v93);
        --qword_18C468B10;
        off_18C4653A8(v93);
        uint64_t v93 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_169;
        }
        BOOL v94 = &xmmword_18C465410;
      }

      (*v94)(v93);
    }

      *(void *)&v78[0] = v44;
      __int16 v65 = *a3;
      if (*a3)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v65 + 20)) & 1) != 0)
        {
LABEL_165:
          uint64_t v69 = *(void **)(a1 + 136);
          if (!sub_1812B2390((uint64_t)v69, 0))
          {
            int v70 = v69[16];
            if ((*(_WORD *)(v70 + 20) & 0x9000) != 0)
            {
              sub_1813040AC(v70, v44);
            }

            else
            {
              *(void *)int v70 = v44;
              *(_WORD *)(v70 + 20) = 4;
            }

            uint64_t v71 = *(void *)(*v69 + 24LL);
            if (v71) {
              xmmword_18C465410(v71);
            }
          }

          unsigned int v72 = sqlite3_step(*(sqlite3_stmt **)(a1 + 136));
          unsigned int v73 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 136));
          if (v72 != 100) {
            goto LABEL_174;
          }
          if (sqlite3_vtab_on_conflict(*(sqlite3 **)(a1 + 24)) == 5)
          {
            unsigned int v73 = sub_1813B1708(a1, v44);
LABEL_174:
            uint64_t v4 = v73;
            uint64_t v39 = 0;
LABEL_77:
            uint64_t v40 = *a3;
            if (*a3)
            {
              if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v40 + 20)) & 1) != 0)
              {
                if (a2 < 2) {
                  goto LABEL_136;
                }
                goto LABEL_112;
              }
            }

            else
            {
              sub_1812CF36C(97220);
              uint64_t v40 = *a3;
              if (!*a3)
              {
                sub_1812CF36C(89717);
                goto LABEL_92;
              }
            }

            uint64_t v41 = *(_WORD *)(v40 + 20);
            if ((v41 & 0x24) != 0)
            {
              int v42 = *(void *)v40;
              goto LABEL_111;
            }

            if ((v41 & 8) != 0)
            {
              uint64_t v46 = *(double *)v40;
              if (*(double *)v40 >= -9.22337204e18)
              {
                if (v46 <= 9.22337204e18) {
                  int v42 = (uint64_t)v46;
                }
                else {
                  int v42 = 0x7FFFFFFFFFFFFFFFLL;
                }
              }

              else
              {
                int v42 = 0x8000000000000000LL;
              }

LABEL_120:
                sub_1812DC47C((uint64_t)v10, "ON clause references tables to its right", a3, a4, a5, a6, a7, a8, a9);
                return;
              }
            }

            else
            {
              uint64_t v56 = *(unsigned int *)(v9 + 596);
              if ((int)v56 < 2)
              {
LABEL_83:
                unint64_t v55 = 0LL;
                if ((v53 & 1) == 0) {
                  goto LABEL_77;
                }
              }

              else
              {
                uint64_t v57 = 0LL;
                uint64_t v58 = v56 - 1;
                while (*(_DWORD *)(v9 + 604 + 4 * v57) != v54)
                {
                  if (v58 == ++v57) {
                    goto LABEL_83;
                  }
                }

                unint64_t v55 = 1LL << (v57 + 1);
                if ((v53 & 1) == 0) {
                  goto LABEL_77;
                }
              }
            }

            v49 |= v55;
            if (v55 > v49 >> 1)
            {
              unint64_t v241 = v55 - 1;
              goto LABEL_89;
            }

            goto LABEL_120;
          }

          int v32 = (unsigned __int8 *)*((void *)v17 + 3);
          if (v32)
          {
            if (*v32 == 167 && (*((_DWORD *)v32 + 1) & 0x20) == 0)
            {
              int v42 = *((_DWORD *)v32 + 11);
              if (*(_DWORD *)(v9 + 600) == v42)
              {
                uint64_t v34 = 1LL;
                goto LABEL_55;
              }

              uint64_t v44 = *(unsigned int *)(v9 + 596);
              if ((int)v44 >= 2)
              {
                uint64_t v45 = 0LL;
                uint64_t v46 = v44 - 1;
                while (*(_DWORD *)(v9 + 604 + 4 * v45) != v42)
                {
                  if (v46 == ++v45) {
                    goto LABEL_54;
                  }
                }

                uint64_t v34 = 1LL << (v45 + 1);
LABEL_55:
                *(void *)(v15 + 56LL * v16 + 40) = v34;
                int v47 = *((_DWORD *)v17 + 1);
                int v245 = v12;
                uint64_t v243 = v11;
                if (*((void *)v17 + 2) && (v47 & 0x41000) == 0 && !*((void *)v17 + 4))
                {
                  unint64_t v49 = v34 | v21;
                  goto LABEL_72;
                }

                if (*v17 != 167 || (v47 & 0x20) != 0)
                {
                  if ((v47 & 0x810000) == 0)
                  {
                    unint64_t v49 = sub_181332EB0(v249, v17);
                    uint64_t v21 = v244;
                    uint64_t v14 = a1;
                    goto LABEL_72;
                  }
                }

                else
                {
                  int v48 = *((_DWORD *)v17 + 11);
                  if (*(_DWORD *)(v9 + 600) == v48)
                  {
                    unint64_t v49 = 1LL;
                    goto LABEL_72;
                  }

                  uint64_t v50 = *(unsigned int *)(v9 + 596);
                  if ((int)v50 >= 2)
                  {
                    uint64_t v51 = 0LL;
                    uint64_t v52 = v50 - 1;
                    while (*(_DWORD *)(v9 + 604 + 4 * v51) != v48)
                    {
                      if (v52 == ++v51) {
                        goto LABEL_68;
                      }
                    }

                    unint64_t v49 = 1LL << (v51 + 1);
                    goto LABEL_72;
                  }
                }

    if (ppDb) {
      sqlite3_close(ppDb);
    }
    close((int)v127[0]);
    dispatch_sync(v16, &unk_189B6CBC0);
    dispatch_release(v16);
    int v87 = *(_DWORD *)(v124 + 24);
    a5 = v107;
    if (v87 != -1) {
      close(v87);
    }
    _Block_object_dispose(&v123, 8);
    goto LABEL_125;
  }

  return v11;
}

  sub_1813BC898((uint64_t)&v69);
  sqlite3_finalize((sqlite3_stmt *)v70);
  sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
  sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
  unint64_t v49 = *((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    uint64_t v50 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_126;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v49);
    --qword_18C468B10;
    off_18C4653A8(v49);
    unint64_t v49 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v50 = &xmmword_18C465410;
LABEL_126:
      (*v50)(v49);
    }
  }

  uint64_t v51 = *((void *)&v74 + 1);
  if (*((void *)&v74 + 1))
  {
    uint64_t v52 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_133;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v51);
    --qword_18C468B10;
    off_18C4653A8(v51);
    uint64_t v51 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v52 = &xmmword_18C465410;
LABEL_133:
      (*v52)(v51);
    }
  }

  int v53 = *((void *)&v75 + 1);
  if (*((void *)&v75 + 1))
  {
    int v54 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_140;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v53);
    --qword_18C468B10;
    off_18C4653A8(v53);
    int v53 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      int v54 = &xmmword_18C465410;
LABEL_140:
      (*v54)(v53);
    }
  }

  if (!a1)
  {
    uint64_t v56 = "NULL";
    goto LABEL_150;
  }

  unint64_t v55 = *((unsigned __int8 *)a1 + 113);
  if (v55 == 186) {
    goto LABEL_145;
  }
  if (v55 == 118)
  {
    uint64_t v57 = *((void *)a1 + 3);
    if (v57) {
      xmmword_18C465410(v57);
    }
  }

  else
  {
    if (v55 == 109) {
LABEL_145:
    }
      uint64_t v56 = "unopened";
    else {
      uint64_t v56 = "invalid";
    }
LABEL_150:
    sqlite3_log(21, "API call with %s database connection pointer", v56);
    sub_1812CF36C(186024);
  }

  return v16;
}

  int v104 = v116;
LABEL_123:
  sub_1812F20DC(v104, v23);
}

            uint64_t v61 = 0LL;
          }

    v14[32] = 0;
    uint64_t result = sub_181336B2C((uint64_t)v14, v82, (uint64_t)v12, 0);
    if (v14[32] == 1) {
      *(_DWORD *)(v85 + 48) |= 0x100u;
    }
    goto LABEL_122;
  }

  uint64_t v40 = v12[13] & *v74;
  *(_DWORD *)(v2 + 48) = 512;
  if (v40 == 0x8000000000000000LL
    || (*(_WORD *)((_BYTE *)v12 + 99) & 0x800) != 0 && v40 && (*(_WORD *)((_BYTE *)v12 + 99) & 0x400) == 0)
  {
    uint64_t v41 = v19;
    int v42 = sub_181336A80(v15, (uint64_t)v12, *v83);
    unint64_t v19 = v41;
    if (!v42) {
      goto LABEL_74;
    }
    uint64_t v43 = *(_DWORD *)(v2 + 48) | v42;
    goto LABEL_77;
  }

  if (!v40) {
    goto LABEL_76;
  }
LABEL_74:
  uint64_t v44 = v17;
  if (v23) {
    goto LABEL_78;
  }
LABEL_88:
  *(_BYTE *)(v2 + 17) = v44;
  uint64_t v45 = *(__int16 *)(v85 + 60);
  uint64_t v46 = v19 + 15 * *((__int16 *)v12 + 46) / v45 + 1;
  *(_WORD *)(v2 + 20) = v19 + 15 * *((__int16 *)v12 + 46) / v45 + 1;
  uint64_t v3 = v81;
  if (v40)
  {
    int v47 = v19 + 16;
    if (*(int *)(v15 + 124) >= 1)
    {
      int v77 = v19;
      int v48 = 0LL;
      unint64_t v49 = 0LL;
      uint64_t v50 = *v83;
      while (1)
      {
        uint64_t v51 = *(void *)(v15 + 136);
        uint64_t v52 = *(void *)(v51 + v48);
        v101[0] = 0LL;
        int v102 = 0u;
        uint64_t v100 = v50;
        __int128 v99 = v12;
        v101[1] = sub_181337AF4;
        unsigned int v103 = 0LL;
        int v104 = &v99;
        if (v52)
        {
          sub_18131C57C((uint64_t)v101, v52);
          if (WORD2(v103)) {
            break;
          }
        }

        int v53 = *(__int16 *)(v51 + v48 + 16);
        if (v53 >= 1)
        {
          if ((*(_WORD *)(v51 + v48 + 20) & 0x82) != 0) {
            LOWORD(v53) = -20;
          }
          else {
            LOWORD(v53) = -1;
          }
        }

        uint64_t v15 = (uint64_t)v90;
        v47 += v53;
        ++v49;
        v48 += 56LL;
      }

      uint64_t v15 = (uint64_t)v90;
LABEL_99:
      LOWORD(v46) = *(_WORD *)(v2 + 20);
      uint64_t v14 = a1;
      uint64_t v3 = v81;
      LOWORD(v19) = v77;
    }

    if ((__int16)v46 >= v47)
    {
      if (v47 + 49 >= (__int16)v46)
      {
        else {
          LOWORD(v46) = v46 + 1;
        }
      }
    }

    else if ((__int16)v46 + 49 >= v47)
    {
      else {
        LOWORD(v46) = v47 + 1;
      }
    }

    else
    {
      LOWORD(v46) = v47;
    }

    *(_WORD *)(v2 + 20) = v46;
  }

  uint64_t v39 = v19;
  sub_181336840(v3, v2, (__int16)v19);
  if ((*v86 & 0x10) != 0 && v12[10])
  {
    *(_WORD *)(v2 + 22) = v39;
    goto LABEL_120;
  }

LABEL_54:
          uint64_t v34 = 0LL;
          goto LABEL_55;
        }
      }

      else if ((*((_DWORD *)v18 + 1) & 0x810000) == 0)
      {
        uint64_t v20 = sub_181332EB0(v249, v18);
        uint64_t v14 = a1;
        uint64_t v21 = v20;
        goto LABEL_16;
      }
    }

      goto LABEL_55;
    }

    if (*(unsigned __int8 *)(a1 + 28) < 2u)
    {
LABEL_36:
      if (a2 == 1 || *(int *)(v6 + 24) >= 2)
      {
        int v12 = 0LL;
        *(_BYTE *)(v6 + 32) = 1;
        if (a2) {
          goto LABEL_62;
        }
      }

      else
      {
        int v12 = 0LL;
        if (a2) {
          goto LABEL_62;
        }
      }

      goto LABEL_55;
    }

      --*(void *)(v18 + 24);
      uint64_t v8 = xmmword_18C465468(*(void *)(v18 + 72), *(void *)v12, 1LL);
      goto LABEL_55;
    }
  }

  else
  {
    int v12 = sub_1812FD158(v11, a2, v10);
    *a3 = v12;
    if ((a4 & 1) != 0) {
      goto LABEL_28;
    }
  }

  if (!*(void *)(v12 + 40)) {
    goto LABEL_28;
  }
  uint64_t v24 = 0LL;
  ++*(_DWORD *)(a1 + 248);
  ++*(_DWORD *)(a1 + 264);
  return v24;
}

  unsigned int v26 = v29 + 1;
LABEL_60:
  if (v9[302] > 1u)
  {
LABEL_25:
    *(_WORD *)((char *)v23 + 17) |= 4u;
    goto LABEL_26;
  }

  BOOL v67 = 0LL;
  LODWORD(v68) = 0;
  int v37 = sub_18127F5B0(v10, 155, (uint64_t)&v67, 0);
  if (v37)
  {
    *(_DWORD *)(v37 + 4) |= 0x800u;
    *(_DWORD *)(v37 + 8) = v26;
    int v38 = *(void *)v23;
    uint64_t v39 = (uint64_t *)v23;
    if (*(void *)v23 != v24)
    {
      do
      {
        uint64_t v40 = v38;
        int v38 = *(void *)(v38 + 16);
      }

      while (*(_BYTE *)v38 == 113);
      uint64_t v39 = (uint64_t *)(v40 + 16);
    }

    *uint64_t v39 = v37;
    sub_181309110((void *)v10, (unsigned __int8 *)v24);
    *((_WORD *)v23 + 10) = v26;
    goto LABEL_25;
  }

  return 1LL;
}

  if (v11 != (uint64_t *)v38 && v11)
  {
    unsigned int v33 = (uint64_t (**)(uint64_t *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_61;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v11);
    --qword_18C468B10;
    off_18C4653A8(v11);
    uint64_t v11 = (uint64_t *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v33 = (uint64_t (**)(uint64_t *))&xmmword_18C465410;
LABEL_61:
      (*v33)(v11);
    }
  }

  return v20;
}

  if (v17)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = v17;
      if ((*(_WORD *)(*(void *)a3 + 20LL) & 1) != 0)
      {
        switch(v17)
        {
          case 516:
            uint64_t v23 = "abort due to ROLLBACK";
            break;
          case 101:
            uint64_t v23 = "no more rows available";
            break;
          case 100:
            uint64_t v23 = "another row available";
            break;
          default:
            else {
              uint64_t v23 = off_189B6EC30[v17];
            }
            break;
        }

        sub_1812D7A8C(a3, v23, -1, 1u, 0LL);
      }
    }

    else
    {
      sub_1812CF36C(97620);
    }
  }

uint64_t sub_1812A3C7C(unsigned __int8 *a1)
{
  while (2)
  {
    int v1 = *a1;
LABEL_2:
    switch(v1)
    {
      case 138:
        uint64_t v2 = *(void *)(*((void *)a1 + 4) + 32LL);
        goto LABEL_14;
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 168:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
        goto LABEL_4;
      case 167:
        uint64_t v3 = *((void *)a1 + 9);
        goto LABEL_19;
      case 169:
        uint64_t v3 = *((void *)a1 + 9);
        if (!v3)
        {
          if ((*((_DWORD *)a1 + 1) & 0x42000) == 0)
          {
LABEL_15:
            uint64_t v4 = a1 + 1;
LABEL_16:
            LOBYTE(v5) = *v4;
            return (char)v5;
          }

LABEL_19:
        uint64_t v7 = *((unsigned int *)a1 + 12);
        if ((v7 & 0x80000000) == 0 && (int)v7 < *(__int16 *)(v3 + 54))
        {
          uint64_t v4 = (_BYTE *)(*(void *)(v3 + 8) + 16 * v7 + 9);
          goto LABEL_16;
        }

        return 68LL;
      case 177:
        uint64_t v2 = *((void *)a1 + 4);
        goto LABEL_14;
      case 178:
        uint64_t v2 = *(void *)(*(void *)(*((void *)a1 + 2) + 32LL) + 32LL) + 24LL * *((int *)a1 + 12);
LABEL_14:
        a1 = *(unsigned __int8 **)(v2 + 8);
        continue;
      default:
        if (v1 == 36)
        {
          uint64_t v8 = (_BYTE *)*((void *)a1 + 1);
          int v9 = *v8;
          if (!*v8) {
            return 67LL;
          }
          int v10 = 0;
          uint64_t v11 = v8 + 1;
          uint64_t v12 = 67LL;
          while (2)
          {
            int v10 = byte_1813C6343[v9] | (v10 << 8);
            uint64_t v5 = 66LL;
            if (v10 > 1668050785)
            {
              if (v10 != 1668050786 && v10 != 1952807028) {
                goto LABEL_36;
              }
            }

            else if (v10 == 1651273570)
            {
              uint64_t v5 = 65LL;
              if ((_DWORD)v12 != 67 && (_DWORD)v12 != 69)
              {
LABEL_36:
                BOOL v16 = v10 == 1718382433 || v10 == 1919246700 || v10 == 1685026146;
                if (v16 && (_DWORD)v12 == 67)
                {
                  uint64_t v5 = 69LL;
                }

                else
                {
                  uint64_t v5 = v12;
                  if ((v10 & 0xFFFFFF) == 0x696E74) {
                    return 68LL;
                  }
                }
              }
            }

            else if (v10 != 1667785074)
            {
              goto LABEL_36;
            }

            int v14 = *v11++;
            int v9 = v14;
            uint64_t v12 = v5;
            if (!v14) {
              return (char)v5;
            }
            continue;
          }
        }

      *(void *)(a1 + 8) = sqlite3_mprintf("sqlite3_get_table() called with two or more incompatible queries");
      uint64_t result = 1LL;
      *(_DWORD *)(a1 + 32) = 1;
      return result;
    }

    goto LABEL_24;
  }

  *(_DWORD *)(a1 + 24) = a2;
  if (a2 >= 1)
  {
    unint64_t v17 = a2;
    do
    {
      __int16 v18 = sqlite3_mprintf("%s", *a4);
      if (!v18) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)a1;
      uint64_t v20 = *(unsigned int *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = v20 + 1;
      *(void *)(v19 + 8 * v20) = v18;
      ++a4;
    }

    while (--v17);
  }

    sub_1812DC47C(a1, "variable number must be between ?1 and ?%d", a3, a4, a5, a6, a7, a8, v14);
    uint64_t v21 = *(void *)a1;
    while (1)
    {
      if ((*(_BYTE *)(v8 + 4) & 3) == 0)
      {
        int v22 = *(_DWORD *)(v8 + 56);
        if (v22 > 0) {
          break;
        }
      }

      uint64_t v8 = *(void *)(v8 + 16);
      if (!v8) {
        return;
      }
    }

  uint64_t v7 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v7)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v1);
  int v1 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v7 = &xmmword_18C465410;
    return (*v7)(v1);
  }

  return result;
}

  *(void *)(a1 + 176) = 0LL;
  uint64_t result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

      int v22 = *((_DWORD *)a2 + 1);
      if ((v22 & 0x10000001) != 0x10000000)
      {
        if ((v22 & 0x20000001) == 0x20000000) {
          goto LABEL_69;
        }
        uint64_t result = sub_18131A8A4(result, a2, (_DWORD *)&v51 + 1);
        uint64_t v25 = result;
        int v27 = (_DWORD)v9 != 0;
        int v28 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v28)
        {
          *(_DWORD *)(v8 + 144) = v28 + 1;
          int v29 = *(void *)(v8 + 136) + 40LL * v28;
          *(_DWORD *)int v29 = 16;
          *(_DWORD *)(v29 + 4) = result;
          *(_DWORD *)(v29 + 8) = a3;
          *(_DWORD *)(v29 + 12) = v27;
          *(void *)(v29 + 24) = 0LL;
          *(void *)(v29 + 32) = 0LL;
          *(void *)(v29 + 16) = 0LL;
          uint64_t v21 = HIDWORD(v51);
          if (!HIDWORD(v51)) {
            goto LABEL_69;
          }
          goto LABEL_67;
        }

        int v42 = v8;
        uint64_t v43 = 16LL;
        uint64_t v46 = a3;
LABEL_56:
        uint64_t result = sub_18131044C(v42, v43, v25, v46, v27, a6, a7, a8);
        uint64_t v21 = HIDWORD(v51);
        if (!HIDWORD(v51)) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }

      uint64_t v23 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v23)
      {
        int v42 = v8;
        uint64_t v43 = 9LL;
        uint64_t v25 = 0LL;
LABEL_55:
        uint64_t v46 = a3;
        int v27 = 0LL;
        goto LABEL_56;
      }

      *(_DWORD *)(v8 + 144) = v23 + 1;
      uint64_t v24 = *(void *)(v8 + 136) + 40LL * v23;
      *(void *)uint64_t v24 = 9LL;
      *(_DWORD *)(v24 + 8) = a3;
LABEL_52:
      *(void *)(v24 + 12) = 0LL;
      *(void *)(v24 + 28) = 0LL;
      *(void *)(v24 + 20) = 0LL;
      *(_DWORD *)(v24 + 36) = 0;
      uint64_t v21 = HIDWORD(v51);
      if (HIDWORD(v51))
      {
LABEL_67:
        int v48 = *(unsigned __int8 *)(v12 + 31);
        if (v48 <= 7)
        {
          *(_BYTE *)(v12 + 31) = v48 + 1;
          *(_DWORD *)(v12 + 4 * v48 + 224) = v21;
        }
      }

  int v9 = *(void *)(v1 + 32);
  if (!v9) {
    goto LABEL_26;
  }
  int v10 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_25;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8[0] -= (int)off_18C4653B8(v9);
  --qword_18C468B10;
  off_18C4653A8(v9);
  int v9 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v10 = &xmmword_18C465410;
LABEL_25:
    (*v10)(v9);
  }

  if (v12)
  {
    BOOL v16 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_25:
      (*v16)(v12);
      return v10;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v12);
    --qword_18C468B10;
    off_18C4653A8(v12);
    uint64_t v12 = (unsigned __int8 *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      BOOL v16 = (void (**)(void *))&xmmword_18C465410;
      goto LABEL_25;
    }
  }

  return v10;
}

      if (*__error() != 4) {
        return v9;
      }
    }

    int v9 = off_18C54FCC8(a1, a2, v7);
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_19;
    }
LABEL_15:
    if (v8 == 2560) {
      off_18C54FE48(a1);
    }
    off_18C54FCE0(v9);
    sqlite3_log(28, "attempt to open %s as file descriptor %d", a1, v9);
    if ((off_18C54FCC8("/dev/null", 0, a3) & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
  }

  if ((_DWORD)a3)
  {
    int v10 = !off_18C54FD40(v9, v16) && v18 == 0;
    if (v10 && (v17 & 0x1FF) != (_DWORD)a3) {
      off_18C54FE18(v9, a3);
    }
  }

  if (fcntl(v9, 95, 1LL) == -1)
  {
    uint64_t v11 = *__error();
    uint64_t v12 = __error();
    uint64_t v13 = strerror(*v12);
    sqlite3_log(28, "Failed to confine fd %d for file %s (%d): %s", v9, a1, v11, v13);
  }

  return v9;
}

  if ((int)v4 + 1 < (int)v2)
  {
    __int16 v18 = v2 - v9;
    v9 += v18 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *uint64_t v8 = 0;
      v8[14] = 0;
      v8 += 28;
      v19 -= 2LL;
    }

    while (v19);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_24:
      uint64_t v20 = v2 - v9;
      uint64_t v21 = (_DWORD *)(v7 + 56 * v9 + 32);
      do
      {
        *uint64_t v21 = 0;
        v21 += 14;
        --v20;
      }

      while (v20);
    }
  }

  int v22 = *((unsigned __int8 *)v1 + 9);
  if (v22 == 2)
  {
LABEL_27:
    ++*((_DWORD *)v1 + 15);
    if ((int)v2 >= 1)
    {
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      uint64_t v25 = 0LL;
      do
      {
        unsigned int v26 = v1[15] + v23;
        if (*(_DWORD *)(v26 + 24) >= v5)
        {
          uint64_t v25 = sub_1812B8E48(*(unsigned int **)(v26 + 16), v5) | v25;
          LODWORD(v2) = *((_DWORD *)v1 + 32);
        }

        ++v24;
        v23 += 56LL;
      }

      while (v24 < (int)v2);
      return v25;
    }

    return 0LL;
  }

  int v27 = v1[11];
  if (!*(void *)v27)
  {
    if (v22 == 4 || *((_BYTE *)v1 + 26))
    {
      int v28 = *v1;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)int v27 = 0u;
      int v29 = 1016;
      uint64_t v30 = -1;
      goto LABEL_37;
    }

    uint64_t v30 = dword_18C46539C;
    int v28 = *v1;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)int v27 = 0u;
    if (v30)
    {
      if (v30 <= 0) {
        int v29 = 1016;
      }
      else {
        int v29 = v30;
      }
LABEL_37:
      *(void *)int v27 = &unk_189B6D428;
      *(_DWORD *)(v27 + 8) = v29;
      *(_DWORD *)(v27 + 12) = v30;
      *(_DWORD *)(v27 + 56) = 8222;
      *(void *)(v27 + 64) = v28;
      *(void *)(v27 + 72) = 0LL;
    }

    else
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, void))(v28 + 40))(v28, 0LL);
      if ((_DWORD)v25) {
        return v25;
      }
    }
  }

  uint64_t v31 = *(void *)(a1 + 8);
  int v32 = *((unsigned int *)v1 + 15);
  unsigned int v33 = v1[25];
  if (*((_BYTE *)v1 + 26)
    || (BOOL v36 = (uint64_t (*)(uint64_t, void, void, uint64_t))v1[37]) == 0LL
    || (v25 = 7LL, (uint64_t v31 = v36(v1[40], *(void *)(a1 + 8), *(unsigned int *)(a1 + 48), 7LL)) != 0))
  {
    uint64_t v34 = (v33 + 4) * v32;
    uint64_t v35 = v1[11];
    int v38 = bswap32(*(_DWORD *)(a1 + 48));
    uint64_t v25 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v35 + 24LL))( v35,  &v38,  4LL,  v34);
    if (!(_DWORD)v25)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v1[11] + 24LL))( v1[11],  v31,  *((unsigned int *)v1 + 50),  v34 + 4);
      if (!(_DWORD)v25)
      {
        uint64_t v5 = *(_DWORD *)(a1 + 48);
        LODWORD(v2) = *((_DWORD *)v1 + 32);
        goto LABEL_27;
      }
    }
  }

  return v25;
}

  if ((int)v13 + 1 >= v14)
  {
    sub_1812D3A10((uint64_t)&v24, ")", 1u);
    unint64_t v17 = v25;
    if (!v25) {
      goto LABEL_26;
    }
  }

  else
  {
    HIDWORD(v27) = v13 + 1;
    v25[v13] = 41;
    unint64_t v17 = v25;
    if (!v25) {
      goto LABEL_26;
    }
  }

  v17[HIDWORD(v27)] = 0;
  if ((_DWORD)v27 && (v28 & 0x400) == 0) {
    sub_1812F24E0(&v24);
  }
LABEL_26:
  __int16 v18 = sqlite3_declare_vtab(a1, zSQL);
  if ((_DWORD)v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = sqlite3_errmsg(a1);
    uint64_t v21 = sqlite3_mprintf("%s", v20);
    int v22 = 0LL;
    *a6 = v21;
  }

  else
  {
    if (sqlite3_initialize())
    {
      int v22 = 0LL;
    }

    else
    {
      int v22 = sub_18126F0AC(48LL);
      if (v22)
      {
        unint64_t v19 = 0LL;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)int v22 = 0u;
        *(void *)(v22 + 24) = a1;
        *(void *)(v22 + 32) = a2;
        *(_BYTE *)(v22 + 41) = v11;
        *(_BYTE *)(v22 + 40) = v15;
        goto LABEL_33;
      }
    }

    unint64_t v19 = 7LL;
  }

  if ((v9 & 0x38) == 0x20 || (v9 & 0x21) == 0x21 || (v9 & 0x80) != 0)
  {
    sub_1812DC47C(a1, "unknown join type: %T%s%T%s%T", a3, a4, a5, a6, a7, a8, a2);
    return 1LL;
  }

  return v9;
}

  uint64_t v13 = &a3[v7];
  if (*v13 == 95)
  {
    int v14 = **(_BYTE ***)(a2 + 72);
    uint64_t v15 = *(void *)(a1 + 584);
    if (v15)
    {
      BOOL v16 = *v14;
      if (*v14)
      {
        unint64_t v17 = 0;
        __int16 v18 = v14 + 1;
        do
        {
          unint64_t v17 = -1640531535 * (v17 + byte_1813C6343[v16]);
          unint64_t v19 = *v18++;
          BOOL v16 = v19;
        }

        while (v19);
      }

      else
      {
        unint64_t v17 = 0;
      }

      unsigned int v26 = (_DWORD *)(v15 + 16LL * (v17 % *(_DWORD *)(a1 + 568)));
      uint64_t v20 = (uint64_t *)(v26 + 2);
      uint64_t v21 = *v26;
      if (v21)
      {
        while (1)
        {
LABEL_34:
          uint64_t v20 = (uint64_t *)*v20;
          int v27 = (_BYTE *)v20[3];
          for (int i = **(unsigned __int8 ***)(a2 + 72); ; ++i)
          {
            int v29 = *v27;
            uint64_t v30 = *i;
            if ((_DWORD)v29 != (_DWORD)v30) {
              break;
            }
            if (!*v27) {
              goto LABEL_27;
            }
LABEL_36:
            ++v27;
          }

          if (byte_1813C6343[v29] == byte_1813C6343[v30]) {
            goto LABEL_36;
          }
          if (!--v21)
          {
            uint64_t v20 = &qword_18C550660;
            goto LABEL_27;
          }
        }
      }
    }

    else
    {
      uint64_t v20 = (uint64_t *)(a1 + 576);
      uint64_t v21 = *(_DWORD *)(a1 + 572);
      if (v21) {
        goto LABEL_34;
      }
    }

    uint64_t v20 = &qword_18C550660;
LABEL_27:
    int v22 = (uint64_t *)v20[2];
    if (v22)
    {
      uint64_t v23 = *v22;
      if (*(int *)v23 >= 3)
      {
        uint64_t v24 = *(uint64_t (**)(_BYTE *))(v23 + 184);
        if (v24) {
          return v24(v13 + 1);
        }
      }
    }
  }

  return 0LL;
}

  if (v11 != 2 || a3 && (!*(_BYTE *)(a3 + 18) || *(void *)(a3 + 64))) {
    return 0LL;
  }
  __int16 v18 = "cannot modify %s because it is a view";
LABEL_26:
  sub_1812DC47C(a1, v18, a3, a4, a5, a6, a7, a8, *(void *)a2);
  return 1LL;
}

            ++v21;
          }

          if (byte_1813C6343[v23] == byte_1813C6343[v24]) {
            goto LABEL_19;
          }
          if (++v20 != v19) {
            continue;
          }
          break;
        }

    uint64_t v12 = 0LL;
LABEL_21:
    sqlite3_result_value(a1, *(sqlite3_value **)(a3 + 8 * v12));
    return;
  }

  if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*(void *)a3 + 20LL)) & 1) == 0)
  {
    if (a2 >= 2) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v9 & 0x10) == 0)
  {
    if ((v9 & 1) == 0)
    {
      int v10 = sub_181303970(v6, 1);
      if (a2 != 2) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }

    BOOL v16 = 0LL;
    goto LABEL_20;
  }

  BOOL v16 = *(unsigned __int8 **)(result + 8);
LABEL_20:
  unint64_t v17 = *(void *)(v10 + 528);
  *(void *)(v10 + 528) = 0LL;
  if (!*(_BYTE *)(v10 + 111)) {
    uint64_t result = sub_1812FA020(v10);
  }
  if (!v13 || !v16) {
    goto LABEL_92;
  }
  uint64_t v21 = sub_1813523CC((uint64_t)v44, v13, v10, v16, 0LL, a6, a7, a8);
  if (v21) {
    goto LABEL_74;
  }
  memset(v43, 0, sizeof(v43));
  v42[0] = v44;
  v42[1] = sub_1813539F0;
  v42[2] = sub_181352874;
  v42[3] = 0LL;
  v42[4] = 0LL;
  v42[5] = v43;
  int v22 = v46;
  if (!v46)
  {
    uint64_t v24 = v47;
    if (!v47)
    {
      uint64_t v21 = sub_1813528A8((uint64_t)v44);
      if (!v21)
      {
        sub_181353000((uint64_t)v42, v48);
        goto LABEL_70;
      }

      goto LABEL_71;
    }

    uint64_t v25 = *(_DWORD **)(v47 + 80);
    if (v25)
    {
      unsigned int v26 = *v25;
      if ((int)*v25 >= 1)
      {
        for (int i = (uint64_t *)(v25 + 2); ; i += 3)
        {
          if (*i)
          {
            else {
              int v28 = v26 <= 1;
            }
            if (v28)
            {
LABEL_44:
              uint64_t v24 = v47;
              break;
            }
          }

          else if (v26 < 2)
          {
            goto LABEL_44;
          }

          --v26;
        }
      }
    }

    int v29 = *(void *)(v24 + 72);
    if (v29) {
      sub_18131C57C((uint64_t)v42, v29);
    }
    goto LABEL_70;
  }

  if (*(_BYTE *)(v46 + 63) == 2)
  {
    uint64_t v23 = *(void *)(v46 + 64);
    *(_DWORD *)(v23 + 4) &= ~0x200000u;
    uint64_t v45 = 0;
    sub_181321444(v44, v23, 0LL);
    if (*(_BYTE *)(v10 + 103)) {
      uint64_t v21 = 7;
    }
    else {
      uint64_t v21 = v45;
    }
    if (!v21)
    {
      sub_181285228(v42, (void *)v23);
      goto LABEL_70;
    }

    goto LABEL_71;
  }

  uint64_t v30 = *(_DWORD **)(v46 + 32);
  if (!v30) {
    goto LABEL_59;
  }
  uint64_t v31 = *v30;
  for (uint64_t j = (uint64_t *)(v30 + 2); !*j; j += 3)
  {
    if (v31 < 2) {
      goto LABEL_58;
    }
LABEL_51:
    --v31;
  }

  else {
    unsigned int v33 = v31 <= 1;
  }
  if (!v33) {
    goto LABEL_51;
  }
LABEL_58:
  int v22 = v46;
LABEL_59:
  if (*(__int16 *)(v22 + 54) >= 1)
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = 12LL;
    do
    {
      BOOL v36 = *(unsigned __int16 *)(*(void *)(v22 + 8) + v35);
      if (*(_WORD *)(*(void *)(v22 + 8) + v35))
      {
        if (!*(_BYTE *)(v22 + 63))
        {
          int v37 = *(_DWORD **)(v22 + 80);
          if (v37)
          {
            if (*v37 >= v36)
            {
              int v38 = *(void *)&v37[6 * (v36 - 1) + 2];
              if (v38)
              {
                sub_18131C57C((uint64_t)v42, v38);
                int v22 = v46;
              }
            }
          }
        }
      }

      ++v34;
      v35 += 16LL;
    }

    while (v34 < *(__int16 *)(v22 + 54));
  }

      if (*(_BYTE *)(v2 + 103)) {
        BOOL v16 = 7LL;
      }
      else {
        BOOL v16 = v40;
      }
      *(void *)&unsigned int v91 = v23;
      if (!(_DWORD)v16)
      {
        uint64_t v35 = *(void *)(v20 + 40);
        if (!v35) {
          goto LABEL_75;
        }
        BOOL v36 = v93;
        LODWORD(v93) = v93 & 0xF7FF6FEF;
        int v37 = v90;
        BOOL v94 = v90;
        __int16 v95 = sub_1812876D8;
        if ((v36 & 0x80000) != 0) {
          int v38 = 0LL;
        }
        else {
          int v38 = sub_1812871E4;
        }
        uint64_t v96 = v38;
        uint64_t v97 = 0LL;
        __int128 v98 = &v90;
        uint64_t v39 = *(_DWORD *)(v90 + 308) + *(_DWORD *)(v35 + 40);
        *(_DWORD *)(v90 + 308) = v39;
        if (*(_DWORD *)(*(void *)v37 + 148LL) < v39)
        {
          sub_1812DC47C( v37,  "Expression tree is too large (maximum depth %d)",  v25,  v26,  v27,  v28,  v29,  v30,  *(_DWORD *)(*(void *)v37 + 148LL));
          BOOL v16 = 1LL;
          goto LABEL_23;
        }

        uint64_t v60 = v36 & 0x8009010;
        sub_18131C57C((uint64_t)&v94, v35);
        uint64_t v61 = v94;
        *(_DWORD *)(v94 + 308) -= *(_DWORD *)(v35 + 40);
        uint64_t v62 = v93;
        *(_DWORD *)(v35 + 4) |= v93 & 0x8010;
        LODWORD(v93) = v62 | v60;
        if (SHIDWORD(v92) >= 1 || *(int *)(v61 + 48) > 0)
        {
          BOOL v16 = 1LL;
        }

        else
        {
LABEL_75:
          uint64_t v63 = sub_1813206F0((uint64_t)&v90, *(int **)(v20 + 48), v25, v26, v27, v28, v29, v30);
          BOOL v16 = v63;
          int v70 = *(void *)(v20 + 64);
          if (v70 && !(_DWORD)v63)
          {
            *(void *)(v70 + 64) = v23;
            *((void *)&v91 + 1) = v70;
            LODWORD(v93) = 512;
            BOOL v16 = sub_1813206F0((uint64_t)&v90, *(int **)v70, v64, v65, v66, v67, v68, v69);
            if (!(_DWORD)v16)
            {
              BOOL v16 = sub_1813206F0((uint64_t)&v90, *(int **)(v70 + 16), v71, v72, v73, v74, v75, v76);
              if (!(_DWORD)v16) {
            }
              }

            LODWORD(v93) = 0;
          }
        }
      }

  unint64_t v17 = (char *)sub_18126F0AC(v16);
  int v14 = 0LL;
  if (!v17) {
    return 7LL;
  }
LABEL_20:
  uint64_t v51 = (void *)v14;
  uint64_t v44 = a1;
  bzero(v17, v16);
  int __src = 0LL;
  int v48 = 0;
  int v22 = (unsigned __int8 *)&v17[v15];
  int v47 = &v17[4 * v13 + 2];
LABEL_21:
  memcpy(v17, v9, v13);
  uint64_t v23 = *a2;
  if (*a2)
  {
    uint64_t v46 = 2 * v12;
    do
    {
      for (int i = *(void *)(v23 + 24); i; int i = *(void *)(i + 24))
      {
        if (*(void *)(i + 8) > *(void *)(v23 + 8)) {
          uint64_t v23 = i;
        }
      }

      uint64_t v25 = a2;
      do
      {
        unsigned int v26 = v25;
        int v27 = *v25;
        uint64_t v25 = (void *)(*v25 + 24LL);
      }

      while (v27 != v23);
      *unsigned int v26 = *(void *)(v23 + 24);
      int v28 = *(unsigned __int8 **)(v23 + 8);
      if (v8)
      {
        if (v50 || (int v29 = v45, v30 = v8, (byte_1813C6558[*v28] & 0x46) == 0))
        {
          else {
            int v29 = v48;
          }
          uint64_t v30 = __src;
        }
      }

      else
      {
        memcpy(v22, v28, *(unsigned int *)(v23 + 16));
        v22[*(unsigned int *)(v23 + 16)] = 0;
        uint64_t v31 = *v22;
        if ((char)byte_1813C6558[*v22] < 0)
        {
          int v32 = 0LL;
          if (v31 == 91) {
            uint64_t v31 = 93;
          }
          for (uint64_t j = 1; ; ++j)
          {
            uint64_t v34 = j;
            uint64_t v35 = v22[j];
            if (v35 == v31)
            {
              ++j;
              LOBYTE(v35) = v31;
              if (v22[v34 + 1] != v31) {
                break;
              }
            }

            v22[v32++] = v35;
          }

          v22[v32] = 0;
        }

        BOOL v36 = &byte_1813CEAEE;
        uint64_t v30 = v47;
        sqlite3_snprintf(v46, v47, "%Q%s", v22, v36);
        if (v47) {
          int v29 = strlen(v47) & 0x3FFFFFFF;
        }
        else {
          int v29 = 0;
        }
      }

      int v37 = v8;
      int v38 = v9;
      uint64_t v39 = *(void *)(v23 + 8) - (void)v9;
      uint64_t v40 = *(_DWORD *)(v23 + 16);
      if (v40 != v29)
      {
        memmove(&v17[v29 + v39], &v17[(v40 + v39)], v12 - (v40 + (_DWORD)v39));
        v12 += v29 - *(_DWORD *)(v23 + 16);
        v17[v12] = 0;
      }

      memcpy(&v17[(int)v39], v30, v29);
      sub_1812F20DC(v51, (void *)v23);
      uint64_t v23 = *a2;
      int v9 = v38;
      uint64_t v8 = v37;
    }

    while (*a2);
  }

  if (v44) {
    sub_1812D7A8C(v44, v17, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sub_1812CF36C(97498);
  }
  unint64_t v19 = __src;
  sub_1812F20DC(v51, v17);
  uint64_t v41 = 0LL;
  if (__src)
  {
LABEL_61:
    int v42 = (uint64_t (**)(const char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
      --qword_18C468B10;
      off_18C4653A8(v19);
      unint64_t v19 = (const char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return v41;
      }
      int v42 = (uint64_t (**)(const char *))&xmmword_18C465410;
    }

    (*v42)(v19);
  }

  return v41;
}

  *(void *)(a1 + 8) = a1 + 34;
  *(void *)&uint64_t result = 100LL;
  *(_OWORD *)(a1 + 16) = xmmword_1813CDE10;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

    *(_DWORD *)(v1 + 8) = 0;
    *(void *)int v1 = 0LL;
    *(void *)(v1 + 24) = 0LL;
  }

  return result;
}

    if (++v20 >= v18) {
      goto LABEL_17;
    }
  }

  uint64_t result = *ppBlob;
  while (2)
  {
    if (result)
    {
      uint64_t result = (sqlite3_blob *)sqlite3_blob_reopen(result, v24);
      if ((_DWORD)result) {
        break;
      }
      goto LABEL_35;
    }

    int v29 = *(const char **)(v21 + 472);
    if (!v29)
    {
      uint64_t result = (sqlite3_blob *)sqlite3_mprintf("%s_segments", *(const char **)(v21 + 40));
      int v29 = (const char *)result;
      *(void *)(v21 + 472) = result;
      if (!result)
      {
        uint64_t v30 = 7;
        goto LABEL_41;
      }
    }

    uint64_t result = (sqlite3_blob *)sqlite3_blob_open( *(sqlite3 **)(v21 + 24),  *(const char **)(v21 + 32),  v29,  "block",  v24,  0,  ppBlob);
    if (!(_DWORD)result)
    {
LABEL_35:
      uint64_t result = *ppBlob;
      if (*ppBlob)
      {
        uint64_t v25 = *((void *)result + 3);
        if (v25) {
          LODWORD(v25) = *(_DWORD *)result;
        }
      }

      else
      {
        LODWORD(v25) = 0;
      }

      unsigned int v26 = v25 + 35;
      int v27 = ((int)v25 + 34) / v22 + v19;
      if (v26 > v22) {
        unint64_t v19 = v27;
      }
      if (v24++ >= *(void *)(v23 + 16))
      {
        uint64_t v13 = v31;
        unint64_t v17 = v32;
        __int16 v18 = *(_DWORD *)(v32 + 8);
        int v14 = v33;
        uint64_t v15 = v34;
        goto LABEL_19;
      }

      continue;
    }

    break;
  }

  if ((_DWORD)result == 1) {
    uint64_t v30 = 267;
  }
  else {
    uint64_t v30 = (int)result;
  }
LABEL_41:
  *(_DWORD *)(v34 + 32) = v19;
  *a6 = v30;
  return result;
}

      uint64_t v15 = a3[3];
      if (v15)
      {
        BOOL v16 = *(unsigned __int16 *)(v15 + 20);
        if ((~v16 & 0x202) != 0 || *(_BYTE *)(v15 + 22) != 1)
        {
          if ((v16 & 1) != 0)
          {
            uint64_t v8 = 0LL;
            unint64_t v17 = a3[2];
            if (!v17) {
              goto LABEL_35;
            }
          }

          else
          {
            __int16 v18 = LODWORD(v7);
            unint64_t v19 = sub_181303998((int *)v15, 1);
            LODWORD(v7) = v18;
            uint64_t v8 = (const char *)v19;
            unint64_t v17 = a3[2];
            if (!v17) {
              goto LABEL_35;
            }
          }
        }

        else
        {
          uint64_t v8 = *(const char **)(v15 + 8);
          unint64_t v17 = a3[2];
          if (!v17) {
            goto LABEL_35;
          }
        }
      }

      else
      {
        uint64_t v8 = 0LL;
LABEL_28:
        unint64_t v17 = a3[2];
        if (!v17) {
          goto LABEL_35;
        }
      }

      uint64_t v20 = *(unsigned __int16 *)(v17 + 20);
      if ((~v20 & 0x202) == 0 && *(_BYTE *)(v17 + 22) == 1)
      {
        int v9 = *(const char **)(v17 + 8);
        goto LABEL_36;
      }

      if ((v20 & 1) == 0)
      {
        uint64_t v21 = LODWORD(v7);
        int v22 = sub_181303998((int *)v17, 1);
        LODWORD(v7) = v21;
        int v9 = (const char *)v22;
        goto LABEL_36;
      }

      __int16 v18 = *v8;
      if (*v8)
      {
        unint64_t v19 = *(unsigned __int8 *)(v18 + 113);
        switch(v19)
        {
          case 186:
            goto LABEL_23;
          case 118:
            unint64_t v49 = *(unsigned __int8 *)(v18 + 108);
            if ((v49 - 1) < 5)
            {
              uint64_t v21 = byte_1813C6658[v49 - 1];
              if (v12 != 1) {
                goto LABEL_75;
              }
              goto LABEL_73;
            }

            goto LABEL_72;
          case 109:
LABEL_23:
            uint64_t v20 = "unopened";
            break;
          default:
            uint64_t v20 = "invalid";
            break;
        }
      }

      else
      {
        uint64_t v20 = "NULL";
      }

      sqlite3_log(21, "API call with %s database connection pointer", v20);
LABEL_72:
      sub_1812CF36C(162440);
      uint64_t v21 = 0;
      if (v12 != 1) {
        goto LABEL_75;
      }
LABEL_73:
      if (*((_DWORD *)v8 + 16) == 1 && !*((_DWORD *)v8 + 17))
      {
        BOOL v67 = "DELETE from";
        if (a2 > 1) {
          BOOL v67 = "UPDATE";
        }
        a1[2] = sqlite3_mprintf("cannot %s contentless fts5 table: %s", v67, (const char *)v8[2]);
        uint64_t v15 = 1LL;
        goto LABEL_234;
      }

        if ((v16 & 0x80000000) != 0 || byte_1813CB4F3[v17])
        {
          int v22 = 0LL;
          do
          {
            while (1)
            {
              unsigned int v26 = (char)i[v22 + 1];
              if ((v26 & 0x80000000) == 0) {
                break;
              }
              ++v22;
            }

            ++v22;
          }

          while (byte_1813CB4F3[v26]);
          uint64_t v20 = v22 | v19;
          if ((_DWORD)v22 == 2)
          {
            if (*(_WORD *)i == 21071) {
              uint64_t v21 = 1;
            }
            else {
              uint64_t v21 = 9;
            }
          }

          else if ((_DWORD)v22 == 3)
          {
            int v27 = *(unsigned __int16 *)i;
            int v28 = i[2];
            if (v27 ^ 0x4F4E | v28 ^ 0x54) {
              int v29 = 9;
            }
            else {
              int v29 = 3;
            }
            if (v27 ^ 0x4E41 | v28 ^ 0x44) {
              uint64_t v21 = v29;
            }
            else {
              uint64_t v21 = 2;
            }
          }

          else
          {
LABEL_43:
            uint64_t v21 = 9;
          }

          goto LABEL_47;
        }

        int v87 = (char *)a4;
        uint64_t v88 = a3 & 0xFFFFFFFF00000000LL | 1;
        sub_18138ED28((char *)&v89, "fts5: syntax error near %.1s");
LABEL_136:
        uint64_t v21 = 0;
LABEL_48:
        v13[1] = (unsigned __int8 *)&v89;
        uint64_t v30 = *v13;
        uint64_t v31 = **v13;
        int v32 = v21;
        break;
    }

    while (1)
    {
      if (v31 <= 0x22)
      {
        int v37 = byte_1813CB594[v31] + v32;
        int v38 = byte_1813CB5B7[v37];
        uint64_t v39 = (char *)&byte_1813CB653[v37];
        uint64_t v40 = (unsigned __int8 *)&unk_1813CB630 + v31;
        if (v38 == (_DWORD)v32) {
          uint64_t v40 = (unsigned __int8 *)v39;
        }
        uint64_t v31 = *v40;
      }

      if (v31 < 0x53) {
        break;
      }
      if (v31 != 105 && v31 != 110)
      {
        uint64_t v41 = (uint64_t)v13[1];
LABEL_63:
        switch(v31)
        {
          case 'S':
            *(void *)(v41 + 32) = *((void *)v30 + 1);
            goto LABEL_51;
          case 'T':
            int v42 = (uint64_t)sub_18138EE8C((_DWORD *)v41, *((_DWORD **)v30 - 2));
            goto LABEL_97;
          case 'U':
          case '^':
            *((void *)v30 - 5) = *((void *)v30 - 2);
            goto LABEL_51;
          case 'V':
          case 'Y':
            unsigned int v33 = (uint64_t)sub_18138EFF0((uint64_t *)v41, 0LL, (uint64_t)(v30 + 8));
            goto LABEL_50;
          case 'W':
            uint64_t v43 = sub_18138EFF0((uint64_t *)v41, 0LL, (uint64_t)(v30 + 8));
            *((void *)v30 - 2) = v43;
            uint64_t v44 = (uint64_t)sub_18138EE8C((_DWORD *)v41, v43);
            goto LABEL_99;
          case 'X':
            uint64_t v44 = (uint64_t)sub_18138EFF0((uint64_t *)v41, *((unsigned int **)v30 - 2), (uint64_t)(v30 + 8));
            goto LABEL_99;
          case 'Z':
            uint64_t v45 = (_DWORD *)*((void *)v30 - 5);
            uint64_t v46 = (_DWORD *)*((void *)v30 + 1);
            int v47 = v41;
            int v48 = 2;
            goto LABEL_73;
          case '[':
            uint64_t v45 = (_DWORD *)*((void *)v30 - 5);
            uint64_t v46 = (_DWORD *)*((void *)v30 + 1);
            int v47 = v41;
            int v48 = 1;
            goto LABEL_73;
          case '\\':
            uint64_t v45 = (_DWORD *)*((void *)v30 - 5);
            uint64_t v46 = (_DWORD *)*((void *)v30 + 1);
            int v47 = v41;
            int v48 = 3;
LABEL_73:
            *((void *)v30 - 5) = sub_18138F394(v47, v48, v45, v46, 0LL);
            goto LABEL_51;
          case ']':
            sub_18138EC30((char *)v41, *((void *)v30 - 2), *((int **)v30 - 11));
            *((void *)v30 - 11) = *((void *)v30 - 2);
            goto LABEL_51;
          case 'a':
            unint64_t v49 = (_DWORD *)*((void *)v30 - 2);
            uint64_t v50 = *((void *)v30 + 1);
            if (*(_DWORD *)(v41 + 16))
            {
              uint64_t v51 = *((void *)v30 + 1);
              sub_18138CFA4(*((void *)v30 - 2));
              sub_18138CFA4(v51);
              *((void *)v30 - 2) = 0LL;
            }

            else
            {
              uint64_t v61 = (_DWORD *)*((void *)v30 - 2);
              if (*v49 == 2) {
                uint64_t v61 = *(_DWORD **)&v49[2 * v49[10] + 10];
              }
              if (*(_DWORD *)v50)
              {
                if (*v61)
                {
                  *((void *)v30 - 2) = sub_18138F394(v41, 2, *((_DWORD **)v30 - 2), (_DWORD *)v50, 0LL);
                }

                else
                {
                  uint64_t v62 = (_DWORD *)*((void *)v30 + 1);
                  uint64_t v85 = (uint64_t)v61;
                  if (v61 != v49)
                  {
                    *(void *)&v49[2 * v49[10] + 10] = v50;
                    uint64_t v62 = v49;
                  }

                  uint64_t v63 = v62;
                  uint64_t v64 = *(int *)(*(void *)(v50 + 32) + 16LL);
                  __int16 v65 = *(void *)(v41 + 24) + 8LL * (*(_DWORD *)(v41 + 20) + ~(_DWORD)v64);
                  memmove((void *)v65, (const void *)(v65 + 8), 8 * v64);
                  --*(_DWORD *)(v41 + 20);
                  sub_18138CFA4(v85);
                  *((void *)v30 - 2) = v63;
                }
              }

              else
              {
                sub_18138CFA4(*((void *)v30 + 1));
                --*(_DWORD *)(v41 + 20);
                *((void *)v30 - 2) = v49;
              }
            }

            goto LABEL_51;
          case 'b':
            unsigned int v33 = (uint64_t)sub_18138F394(v41, 9, 0LL, 0LL, *((void *)v30 + 1));
            goto LABEL_50;
          case 'c':
            uint64_t v52 = sub_18138F394(v41, 9, 0LL, 0LL, *((void *)v30 + 1));
            sub_18138EC30((char *)v41, (uint64_t)v52, *((int **)v30 - 5));
            *((void *)v30 - 5) = v52;
            goto LABEL_51;
          case 'd':
          case 'g':
            unsigned int v33 = sub_18138F688(v41, 0LL, *((void *)v30 + 1));
LABEL_50:
            *((void *)v30 + 1) = v33;
            goto LABEL_51;
          case 'e':
            int v53 = *((void *)v30 + 1);
            if (v53 && *(_DWORD *)(v53 + 24))
            {
              *(_BYTE *)(v53 + 33) = 1;
              int v53 = *((void *)v30 + 1);
            }

            *((void *)v30 - 2) = sub_18138F688(v41, 0LL, v53);
            goto LABEL_51;
          case 'f':
            int v54 = (const char *)*((void *)v30 - 11);
            if (*((_DWORD *)v30 - 20) != 4 || *(_DWORD *)v54 != 1380009294) {
              sub_18138ED28((char *)v41, "fts5: syntax error near %.*s", *((_DWORD *)v30 - 20), v54);
            }
            unint64_t v55 = (int *)*((void *)v30 - 5);
            if (!v55) {
              goto LABEL_110;
            }
            uint64_t v56 = *((unsigned int *)v30 - 2);
            if (!(_DWORD)v56)
            {
              uint64_t v58 = 10;
LABEL_109:
              *unint64_t v55 = v58;
              goto LABEL_110;
            }

            if ((int)v56 < 1)
            {
              uint64_t v58 = 0;
              goto LABEL_109;
            }

            uint64_t v57 = 0LL;
            uint64_t v58 = 0;
            uint64_t v59 = (const char *)*((void *)v30 - 2);
            while (1)
            {
              uint64_t v60 = v59[v57];
              uint64_t v58 = v60 + 10 * v58 - 48;
              if (v56 == ++v57) {
                goto LABEL_109;
              }
            }

            sub_18138ED28((char *)v41, "expected integer, got %.*s", *((_DWORD *)v30 - 2), v59);
LABEL_110:
            *((void *)v30 - 11) = *((void *)v30 - 5);
            break;
          case 'h':
            uint64_t v44 = sub_18138F688(v41, *((void *)v30 - 2), *((void *)v30 + 1));
            goto LABEL_99;
          case 'i':
            *((void *)v30 + 4) = 0LL;
            *((_DWORD *)v30 + 10) = 0;
            goto LABEL_51;
          case 'j':
            *((_OWORD *)v30 - 1) = *(_OWORD *)(v30 + 8);
            goto LABEL_51;
          case 'k':
            int v42 = sub_18138F7D4((uint64_t *)v41, *((void *)v30 - 8), (uint64_t)(v30 - 16), *((_DWORD *)v30 + 2));
LABEL_97:
            *((void *)v30 - 8) = v42;
            goto LABEL_51;
          case 'l':
            uint64_t v44 = sub_18138F7D4((uint64_t *)v41, 0LL, (uint64_t)(v30 - 16), *((_DWORD *)v30 + 2));
LABEL_99:
            *((void *)v30 - 2) = v44;
            goto LABEL_51;
          case 'm':
            *((_DWORD *)v30 + 2) = 1;
            goto LABEL_51;
          case 'n':
            *((_DWORD *)v30 + 8) = 0;
            goto LABEL_51;
          default:
            goto LABEL_51;
        }

        goto LABEL_51;
      }

      uint64_t v41 = (uint64_t)v13[1];
      if (v30 >= v13[302])
      {
        uint64_t j = v86;
        if ((unint64_t)v30 > v86)
        {
          do
          {
            *uint64_t v13 = v30 - 24;
            sub_18138ED78(v30[1], (uint64_t *)v30 + 1);
            uint64_t v30 = *v13;
          }

          while ((unint64_t)*v13 > v86);
        }

        sub_18138ED28((char *)v41, "fts5: parser stack overflow");
        v13[1] = (unsigned __int8 *)v41;
LABEL_124:
        a3 = v88;
        goto LABEL_132;
      }

      if (v31 - 83 <= 0x1B) {
        goto LABEL_63;
      }
LABEL_51:
      uint64_t v34 = v31 - 83;
      uint64_t v35 = byte_1813CB6BC[v34];
      BOOL v36 = &v30[24 * byte_1813CB578[v34]];
      uint64_t v31 = byte_1813CB653[byte_1813CB6D8[*v36] + v35];
      v36[24] = v31;
      uint64_t v30 = v36 + 24;
      *uint64_t v13 = v30;
      v30[1] = v35;
    }

    if (v31 > 0x4F)
    {
      if (v31 != 81)
      {
        a3 = v88;
        v93[0] = v14;
        v93[1] = v88;
        uint64_t v69 = (char *)v13[1];
        sub_18138ED28(v69, "fts5: syntax error near %.*s", v88, (const char *)i);
        v13[1] = (unsigned __int8 *)v69;
        sub_18138ED78(v32, v93);
        goto LABEL_131;
      }

      *uint64_t v13 = v30 - 24;
      uint64_t j = v86;
      a3 = v88;
    }

    else
    {
      *uint64_t v13 = v30 + 24;
      if (v30 + 24 > v13[302])
      {
        *uint64_t v13 = v30;
        int v66 = (char *)v13[1];
        for (uint64_t j = v86; (unint64_t)*v13 > v86; v30 = *v13)
        {
          *uint64_t v13 = v30 - 24;
          sub_18138ED78(v30[1], (uint64_t *)v30 + 1);
        }

        sub_18138ED28(v66, "fts5: parser stack overflow");
        v13[1] = (unsigned __int8 *)v66;
        goto LABEL_124;
      }

      int v68 = v31 + 31;
      if (v31 <= 0x22) {
        int v68 = v31;
      }
      v30[24] = v68;
      v30[25] = v32;
      a3 = v88;
      *((void *)v30 + 4) = v14;
      *((void *)v30 + 5) = v88;
LABEL_131:
      uint64_t j = v86;
    }

  *(_DWORD *)(a1 + 16) = 7;
LABEL_2:
  sub_18138D08C(a2);
  sub_18138D1E8(a3);
  return 0LL;
}

    int v28 = (v26 - v22);
    if (v21 != (int8x16_t *)v55 && v21)
    {
      int v29 = (void (**)(int8x16_t *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v21);
        --qword_18C468B10;
        off_18C4653A8(v21);
        uint64_t v21 = (int8x16_t *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_28;
        }
        int v29 = (void (**)(int8x16_t *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))&xmmword_18C465410;
      }

      (*v29)(v21, a3, a4, a5, a6, a7, a8, v18, v19);
    }

  unint64_t v19 = (int)v8 - 1LL;
  if ((int)v8 > 1 && v13[v19] == 121)
  {
    uint64_t v20 = 0LL;
    while (1)
    {
      uint64_t v21 = v13[v20];
      int v22 = (((v21 - 97) >> 1) | (((_BYTE)v21 - 97) << 7));
      uint64_t v23 = v22 > 0xA;
      uint64_t v24 = (1 << v22) & 0x495;
      uint64_t v25 = v23 || v24 == 0;
      if (!v25 || v20 && v21 == 121) {
        break;
      }
    }

    v13[v19] = 105;
  }

  *(_DWORD *)(v1 + 36) = 0;
  *(void *)(v1 + 48) = 0LL;
  return result;
}

  *(void *)(a1 + 24) = v13;
  if (a2 <= 2)
  {
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_72;
  }

  __int16 v18 = a5[2];
  if (!v18) {
    goto LABEL_36;
  }
  unint64_t v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
  {
    __int16 v18 = *(void *)(v18 + 8);
    if (!v18) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }

  if ((v19 & 1) != 0)
  {
    __int16 v18 = 0LL;
    goto LABEL_36;
  }

  __int16 v18 = sub_181303998((int *)v18, 1);
  if (!v18)
  {
LABEL_36:
    *(void *)(*(void *)a1 + 16LL) = sqlite3_mprintf("unknown datatype: %Q", v18);
    return 1LL;
  }

uint64_t sub_1812A3E6C( uint64_t *a1, unsigned __int8 **a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v9 = a6;
  int v10 = a3;
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  uint64_t v13 = *a2;
  int v14 = **a2;
  if (v14 == 53) {
    goto LABEL_4;
  }
  uint64_t v15 = a1[2];
  if (v14 == 50)
  {
    int v26 = *(_DWORD *)(v15 + 144);
    if (*(_DWORD *)(v15 + 148) <= v26)
    {
      sub_18131044C(v15, 75LL, 0LL, a6, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v15 + 144) = v26 + 1;
      uint64_t v27 = *(void *)(v15 + 136) + 40LL * v26;
      *(void *)uint64_t v27 = 75LL;
      *(_DWORD *)(v27 + 8) = a6;
      *(void *)(v27 + 12) = 0LL;
      *(void *)(v27 + 28) = 0LL;
      *(void *)(v27 + 20) = 0LL;
      *(_DWORD *)(v27 + 36) = 0;
    }

    goto LABEL_5;
  }

  if (v14 == 45)
  {
LABEL_4:
    uint64_t v9 = sub_18128CF10(v12, *((unsigned __int8 **)v13 + 3), a6, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }

  BOOL v28 = a5;
  int v29 = a4;
  uint64_t v30 = *((void *)a3 + 12);
  if ((*(_BYTE *)(v30 + 49) & 4) == 0)
  {
    uint64_t v31 = *(void *)(v30 + 32);
    if (v31)
    {
      else {
        BOOL v28 = a5;
      }
    }
  }

  if ((int)a4 < 1)
  {
LABEL_50:
    uint64_t v47 = *(unsigned __int16 *)(v30 + 52);
    unsigned int v156 = a6;
    if ((int)v47 <= (int)a4)
    {
      signed int v50 = 0;
    }

    else
    {
      uint64_t v48 = *(void *)(v30 + 64);
      unint64_t v49 = v47 - (int)a4;
      if (v49 >= 2)
      {
        int v52 = 0;
        int v53 = 0;
        unint64_t v51 = (v49 & 0xFFFFFFFFFFFFFFFELL) + (int)a4;
        int v54 = (unsigned __int8 ***)(v48 + 8LL * (int)a4 + 8);
        unint64_t v55 = v49 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (**(v54 - 1) == v13) {
            ++v52;
          }
          if (**v54 == v13) {
            ++v53;
          }
          v54 += 2;
          v55 -= 2LL;
        }

        while (v55);
        signed int v50 = v53 + v52;
        if (v49 == (v49 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_66;
        }
      }

      else
      {
        signed int v50 = 0;
        unint64_t v51 = (int)a4;
      }

      uint64_t v56 = (unsigned __int8 ***)(v48 + 8 * v51);
      uint64_t v57 = v47 - v51;
      do
      {
        uint64_t v58 = *v56++;
        if (*v58 == v13) {
          ++v50;
        }
        --v57;
      }

      while (v57);
    }

LABEL_175:
              *((_DWORD *)v131 + 1) = v136;
              int v144 = *(_DWORD *)(v128 + 144);
              if (*(_DWORD *)(v128 + 148) <= v144)
              {
                sub_18131044C(v128, 50LL, v132, 0LL, 0LL, v123, v124, v125);
                uint64_t v128 = v164;
                if (v129) {
                  goto LABEL_160;
                }
LABEL_179:
                *(_DWORD *)int v131 = v135;
                v131[16] = v155;
                if ((int)a4 < 1)
                {
                  *((_DWORD *)v131 + 3) = 0;
                }

                else
                {
                  *((_DWORD *)v131 + 2) = v156 - a4;
                  *((_DWORD *)v131 + 3) = a4;
                }
              }

              else
              {
                *(_DWORD *)(v128 + 144) = v144 + 1;
                uint64_t v145 = *(void *)(v128 + 136) + 40LL * v144;
                *(_DWORD *)uint64_t v145 = 50;
                *(_DWORD *)(v145 + 4) = v132;
                *(_OWORD *)(v145 + 8) = 0u;
                *(_OWORD *)(v145 + 24) = 0u;
                if (!v129) {
                  goto LABEL_179;
                }
LABEL_160:
                v131[16] = -72;
              }

              v131 += 20;
              uint64_t v127 = *(unsigned __int16 *)(v30 + 52);
LABEL_162:
              ++v134;
              --v129;
              uint64_t v132 = (v132 + 1);
              if (v134 >= v127) {
                break;
              }
              continue;
            }
          }

          uint64_t v9 = v156;
          int v10 = v158;
          int v146 = v165;
          if ((int)a4 >= 1 && (*(_DWORD *)(v30 + 48) & 0x100400) == 0)
          {
            uint64_t v147 = v158[2];
            int v148 = *(_DWORD *)(v128 + 144);
            if (*(_DWORD *)(v128 + 148) <= v148)
            {
              sub_18131044C(v128, 125LL, v147, 0LL, a4, v123, v124, v125);
              uint64_t v150 = v159;
              if (!v159)
              {
LABEL_5:
                if ((*(_BYTE *)(*((void *)v10 + 12) + 50LL) & 0x20) == 0 || (*((_WORD *)v11 + 10) & 0x800) == 0)
                {
                  BOOL v16 = (_WORD *)v11 + 9;
                  __int16 v17 = *((_WORD *)v11 + 9);
                  if ((v17 & 4) == 0)
                  {
                    int v18 = 0;
                    int v19 = *v10;
                    do
                    {
                      if (v19 && ((*v11)[4] & 1) == 0) {
                        break;
                      }
                      BOOL v20 = !v18 || (v17 & 0x400) == 0;
                      __int16 v21 = v20 ? 4 : 512;
                      *BOOL v16 = v21 | v17;
                      unsigned int v22 = *((_DWORD *)v11 + 6);
                      if ((v22 & 0x80000000) != 0) {
                        break;
                      }
                      uint64_t v23 = *((void *)v11[1] + 4);
                      uint64_t v24 = v23 + 56LL * v22;
                      char v25 = *(_BYTE *)(v24 + 22) - 1;
                      *(_BYTE *)(v24 + 22) = v25;
                      if (v25) {
                        break;
                      }
                      uint64_t v11 = (unsigned __int8 **)(v23 + 56LL * v22);
                      BOOL v16 = (_WORD *)v11 + 9;
                      __int16 v17 = *((_WORD *)v11 + 9);
                      --v18;
                    }

                    while ((v17 & 4) == 0);
                  }
                }

                return v9;
              }
            }

            else
            {
              *(_DWORD *)(v128 + 144) = v148 + 1;
              uint64_t v149 = *(void *)(v128 + 136) + 40LL * v148;
              *(_DWORD *)uint64_t v149 = 125;
              *(_DWORD *)(v149 + 4) = v147;
              *(_DWORD *)(v149 + 8) = 0;
              *(_DWORD *)(v149 + 12) = a4;
              *(void *)(v149 + 24) = 0LL;
              *(void *)(v149 + 32) = 0LL;
              *(void *)(v149 + 16) = 0LL;
              uint64_t v150 = v159;
              if (!v159) {
                goto LABEL_5;
              }
            }

uint64_t sub_1812A4978(unsigned int a1, char *a2, uint64_t *a3)
{
  return sub_1813068A8(a1, a2, a3, 0);
}

uint64_t sub_1812A4980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3 = *(_WORD *)(a1 + 20);
  __int16 v4 = *(_WORD *)(a2 + 20);
  if (((v4 | v3) & 0x2C) == 0)
  {
    if (((v4 | v3) & 2) != 0)
    {
      if ((v3 & 2) == 0) {
        return 1LL;
      }
      if ((v4 & 2) == 0) {
        return 0xFFFFFFFFLL;
      }
      if (a3) {
        return sub_181308A00((__int128 *)a1, (__int128 *)a2, a3, 0LL);
      }
    }

    return sub_181308B9C(a1, a2);
  }

  if ((v4 & v3 & 8) != 0)
  {
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    if ((v3 & 0x24) != 0)
    {
      if ((v4 & 8) == 0)
      {
        if ((v4 & 0x24) != 0)
        {
LABEL_4:
          if (*(void *)a1 >= *(void *)a2) {
            return *(void *)a1 > *(void *)a2;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }

        return 0xFFFFFFFFLL;
      }

      double v8 = *(double *)a2;
      if (*(double *)a2 >= -9.22337204e18)
      {
        if (v8 >= 9.22337204e18) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v9 = *(void *)a1;
        if (*(void *)a1 <= (uint64_t)v8)
        {
          return 0xFFFFFFFFLL;
        }
      }

      return 1LL;
    }

    if ((v3 & 8) == 0) {
      return 1LL;
    }
    if ((v4 & 0x24) == 0) {
      return 0xFFFFFFFFLL;
    }
    double v6 = *(double *)a1;
    if (v6 >= 9.22337204e18) {
      return 1LL;
    }
    uint64_t v7 = *(void *)a2;
    else {
      return 0xFFFFFFFFLL;
    }
  }

uint64_t sub_1812A4AEC(int a1, int a2, void *__s1, int a4, void *__s2)
{
  unsigned int v5 = a2 - a4;
  if (a2 >= a4) {
    int v6 = a4;
  }
  else {
    int v6 = a2;
  }
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v5;
  }
}

uint64_t sub_1812A4B24(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  *(_WORD *)(a4 + 20) = 1;
  if (*(_DWORD *)(a4 + 32) >= (signed int)(a3 + 1))
  {
    int v10 = *(char **)(a4 + 40);
    *(void *)(a4 + 8) = v10;
    *(_WORD *)(a4 + 20) = 1;
LABEL_7:
    uint64_t v9 = sub_1812BFD8C(a1, a2, a3, v10, 0);
    if ((_DWORD)v9)
    {
      if ((*(_WORD *)(a4 + 20) & 0x9000) != 0 || *(_DWORD *)(a4 + 32)) {
        sub_181303838(a4);
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(a4 + 8) + a3) = 0;
      *(_WORD *)(a4 + 20) = 16;
      *(_DWORD *)(a4 + 16) = a3;
    }

    return v9;
  }

  uint64_t v9 = sub_18128FAF0(a4, a3 + 1, 0);
  if (!(_DWORD)v9)
  {
    int v10 = *(char **)(a4 + 8);
    goto LABEL_7;
  }

  return v9;
}

uint64_t sub_1812A4C30(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  __int16 v25 = 0;
  uint64_t v26 = a1;
  int v27 = 0;
  int v7 = *(unsigned __int16 *)(a2 + 68);
  double v8 = *(char **)(a2 + 56);
  int v9 = *(_DWORD *)(*(void *)(a2 + 136) + 88LL) - (_DWORD)v8;
  if (v7 > v9) {
    int v7 = v9 & ~(v9 >> 31);
  }
  uint64_t v23 = *(char **)(a2 + 56);
  if (v7 >= v6)
  {
    __int16 v25 = 16400;
    unsigned int v24 = v6;
  }

  else
  {
    uint64_t result = sub_1812A4B24(a2, 0, v6, (uint64_t)v22);
    if ((_DWORD)result) {
      return result;
    }
    double v8 = v23;
  }

  unsigned int v11 = *v8;
  if (*v8 < 0)
  {
    int v12 = v8[1];
    if (v8[1] < 0)
    {
      int v13 = v8[2];
      if (v13 < 0)
      {
        sub_18129BD74(v8, v21);
        unsigned int v11 = v21[0];
        if (HIDWORD(v21[0]))
        {
          unsigned int v11 = -1;
          goto LABEL_14;
        }
      }

      else
      {
        unsigned int v11 = v13 & 0x7F | (v11 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
      }
    }

    else
    {
      unsigned int v11 = ((v11 & 0x7F) << 7) | v12;
    }
  }

  if (v11 < 3)
  {
LABEL_30:
    if (v27) {
      sub_181303838((uint64_t)v22);
    }
    return sub_1812FBF50(96350);
  }

uint64_t sub_1812A4E20(uint64_t a1, int a2, const char **a3, const char **a4)
{
  unsigned int v5 = a3;
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  if (a3) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  char v11 = v10;
  int v12 = a2 << v11;
  if (v12 + *(_DWORD *)(a1 + 28) > v9)
  {
    *(_DWORD *)(a1 + 16) = v12 + 2 * v9;
    uint64_t v13 = sub_18127D33C(*(void *)a1, 8LL * (v12 + 2 * v9));
    if (!v13)
    {
LABEL_33:
      *(_DWORD *)(a1 + 32) = 7;
      return 1LL;
    }

    *(void *)a1 = v13;
    int v8 = *(_DWORD *)(a1 + 20);
  }

  if (v8)
  {
    if (*(_DWORD *)(a1 + 24) != a2)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      if (v14)
      {
        uint64_t v15 = &off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v14);
          --qword_18C468B10;
          off_18C4653A8(v14);
          uint64_t v14 = xmmword_18C468B70;
          if (!(void)xmmword_18C468B70) {
            goto LABEL_19;
          }
          uint64_t v15 = &xmmword_18C465410;
        }

        (*v15)(v14);
      }

char *sqlite3_mprintf(const char *a1, ...)
{
  if (sqlite3_initialize()) {
    return 0LL;
  }
  else {
    return sqlite3_vmprintf(a1, va);
  }
}

void sqlite3_free_table(char **result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v2 = result - 1;
    if ((int)*(result - 1) >= 2)
    {
      for (uint64_t i = *(result - 1) - 1LL; i; --i)
      {
        __int16 v4 = *v1;
        if (*v1)
        {
          unsigned int v5 = (uint64_t (**)(void))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400();
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v4);
            --qword_18C468B10;
            off_18C4653A8(v4);
            __int16 v4 = (char *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_5;
            }
            unsigned int v5 = &xmmword_18C465410;
          }

          ((void (*)(char *))*v5)(v4);
        }

void sub_1812A5200( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  uint64_t v10 = *a1;
  char v11 = *(uint64_t (**)(void, uint64_t, const char *, void, void, uint64_t))(*a1 + 528);
  if (v11 && !*(_BYTE *)(v10 + 197) && !*((_BYTE *)a1 + 302))
  {
    int v22 = v11(*(void *)(v10 + 536), 22LL, "BEGIN", 0LL, 0LL, a1[46]);
    if (v22 == 1)
    {
      int v23 = 23;
      uint64_t v24 = "not authorized";
    }

    else
    {
      if ((v22 & 0xFFFFFFFD) == 0)
      {
        if (v22) {
          return;
        }
        goto LABEL_4;
      }

      int v23 = 1;
      uint64_t v24 = "authorizer malfunction";
    }

    sub_1812DC47C((uint64_t)a1, v24, a3, a4, a5, a6, a7, a8, v25);
    *((_DWORD *)a1 + 6) = v23;
    return;
  }

uint64_t sub_1812A544C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64)) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 112);
  unsigned int v6 = *(_DWORD **)(v5 + 40);
  if ((*(_WORD *)(v5 + 52) & 4) == 0 || v6[8] < *(_DWORD *)(v5 + 48))
  {
    uint64_t result = v6[12];
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v7 = *(void *)(v3 + 112);
    if (v6[46] <= v6[50])
    {
      uint64_t result = sub_1812ABE24(v7);
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
      uint64_t result = sub_1812FED50(v7);
      if ((_DWORD)result) {
        return result;
      }
    }

    goto LABEL_13;
  }

  if (!v6[32] || (uint64_t result = sub_1812FAFE4(*(void *)(v3 + 112)), !(_DWORD)result))
  {
LABEL_13:
    strcpy((char *)v4, "SQLite format 3");
    *(_BYTE *)(v4 + 16) = BYTE1(*(_DWORD *)(a1 + 52));
    *(_BYTE *)(v4 + 17) = *(_WORD *)(a1 + 54);
    *(_WORD *)(v4 + 18) = 257;
    *(_BYTE *)(v4 + 20) = *(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 56);
    *(_WORD *)(v4 + 21) = 8256;
    *(_BYTE *)(v4 + 23) = 32;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 84) = 0u;
    sub_1812B47EC(v3, 13);
    uint64_t result = 0LL;
    *(_WORD *)(a1 + 40) |= 2u;
    char v8 = *(_BYTE *)(a1 + 33);
    *(_WORD *)(v4 + 52) = 0;
    *(_BYTE *)(v4 + 54) = 0;
    *(_BYTE *)(v4 + 55) = v8;
    char v9 = *(_BYTE *)(a1 + 34);
    *(_WORD *)(v4 + 64) = 0;
    *(_BYTE *)(v4 + 66) = 0;
    *(_BYTE *)(v4 + 67) = v9;
    *(_DWORD *)(a1 + 64) = 1;
    *(_BYTE *)(v4 + 31) = 1;
  }

  return result;
}

void *sub_1812A5598( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (unsigned int **)a6;
  uint64_t v10 = a3;
  *(void *)uint64_t v344 = 0LL;
  uint64_t v12 = *(void *)a1;
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t result = sub_18128FF4C(*(void **)a1, (void *)a2);
    uint64_t v14 = 0LL;
    goto LABEL_44;
  }

  unsigned int v15 = a5;
  unsigned int v339 = 0;
  if (a3 && (*(_BYTE *)(a3 + 5) & 2) != 0 && !*(void *)(a3 + 80))
  {
    int v332 = *(int **)(a3 + 32);
    *(void *)(a3 + 32) = 0LL;
    sub_18128FDA0((void *)v12, a3, 1);
    uint64_t v10 = 0LL;
  }

  else
  {
    int v332 = 0LL;
  }

  uint64_t v23 = sub_181321CB0(a1, 0, a2 + 8, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v24 = *(void *)(a2 + 40);
  if (v24)
  {
    char v25 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 816LL) || (int v26 = *(_DWORD *)(v24 + 44) - 1, (*(_DWORD *)(v24 + 44) = v26) == 0)) {
      sub_181311A80(v25, (void *)v24);
    }
  }

  *(void *)(a2 + 40) = v23;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (!v23) {
    goto LABEL_41;
  }
  ++*(_DWORD *)(v23 + 44);
  if ((*(_WORD *)(a2 + 69) & 2) == 0) {
    goto LABEL_23;
  }
  uint64_t v27 = *(void *)(v23 + 16);
  if (!v27)
  {
LABEL_21:
    sub_1812DC47C(a1, "no such index: %s", v17, v18, v19, v20, v21, v22, *(void *)(a2 + 96));
    goto LABEL_22;
  }

LABEL_283:
          int v218 = *(_DWORD *)(a1 + 68) - 1;
          *(_DWORD *)(a1 + 68) = v218;
          uint64_t v219 = v316;
          unsigned int v328 = v218;
          if ((v337 & 1) != 0)
          {
            uint64_t v224 = sub_18131B020(a1, (__int16)v203 + 1);
            unsigned int v308 = v224;
            if ((v315 & 0x80000000) != 0)
            {
              uint64_t v231 = v323;
              int v232 = v224;
              sub_1813103F4(v323, 71LL, 0xFFFFFFFFLL, v224, v220, v221, v222, v223);
            }

            else
            {
              if ((v312 & 1) != 0)
              {
                uint64_t v225 = v224;
                sub_181319C00(a1, *(unsigned __int8 **)&v332[6 * v315 + 2], v224);
                uint64_t v231 = v323;
              }

              else
              {
                uint64_t v231 = v323;
                uint64_t v225 = v224;
                sub_181279C3C(v323, 94LL, v310, v315, v224, v221, v222, v223);
              }

              int v305 = sub_181319BA8(v231, 51LL, v225, v226, v227, v228, v229, v230);
              sub_1813103F4(v231, 71LL, 0xFFFFFFFFLL, v225, v236, v237, v238, v239);
              if (*(_BYTE *)(*(void *)v231 + 103LL)) {
                int v245 = &byte_18C550680;
              }
              else {
                int v245 = (char *)(*(void *)(v231 + 136) + 40LL * v305);
              }
              *((_DWORD *)v245 + 2) = *(_DWORD *)(v231 + 144);
              int v232 = v308;
              sub_181319BA8(v231, 13LL, v308, v240, v241, v242, v243, v244);
            }

            uint64_t v246 = (v232 + 1);
            sub_181279C3C(v231, 80LL, v319, v246, (*(__int16 *)(v23 + 56) - 1), v233, v234, v235);
            if ((*(_BYTE *)(v23 + 48) & 0x60) != 0) {
              sub_1813441E8(a1, v246, v23, v247, v248, v249, v250, v251);
            }
            uint64_t v252 = v246;
            int v218 = v328;
            uint64_t v219 = v316;
            if (v324 != 2) {
              sub_18131FC08((void **)v323, v23, v252, v247, v248, v249, v250, v251);
            }
            sub_18133F5C0(a1, v322, 127LL, 0LL, 1LL, v23, v308 + (__int16)~*(_WORD *)(v23 + 54), v320, v328);
            int v253 = *(__int16 *)(v23 + 54);
            if (*(_WORD *)(v23 + 54))
            {
              uint64_t v100 = v323;
              if (*(_DWORD *)(a1 + 40) > v253) {
                goto LABEL_304;
              }
              *(_DWORD *)(a1 + 40) = v253 + 1;
              uint64_t v254 = (unsigned int *)(a1 + 44);
              goto LABEL_303;
            }

            uint64_t v100 = v323;
            if (v308)
            {
              uint64_t v255 = *(unsigned __int8 *)(a1 + 31);
              if (v255 <= 7)
              {
                *(_BYTE *)(a1 + 31) = v255 + 1;
                uint64_t v254 = (unsigned int *)(a1 + 4 * v255 + 224);
LABEL_303:
                *uint64_t v254 = v308;
              }
            }
          }

LABEL_304:
          if (v324 == 2)
          {
LABEL_347:
            if (v301) {
              sub_1813103F4(v323, 86LL, v301, 1LL, v70, v71, v82, v75);
            }
            if (v322) {
              sub_18133F5C0(a1, v322, 127LL, 0LL, 2LL, v23, v316 + (__int16)~*(_WORD *)(v23 + 54), v320, v328);
            }
            sub_18131B3E0(v323, v328);
            if ((v312 & 1) != 0)
            {
              uint64_t v66 = v301;
              uint64_t v59 = HIDWORD(v300);
              if (v10)
              {
                sub_181319CC8(v323, HIDWORD(v300), v60, v61, v62, v63, v64, v65);
                if (*(_BYTE *)(*(void *)v323 + 103LL)) {
                  int v291 = &byte_18C550680;
                }
                else {
                  int v291 = (char *)(*(void *)(v323 + 136) + 40LL * (int)v300);
                }
                *((_DWORD *)v291 + 2) = *(_DWORD *)(v323 + 144);
              }
            }

            else
            {
              sub_1813103F4(v323, 39LL, v310, HIDWORD(v300), v62, v63, v64, v65);
              uint64_t v66 = v301;
              if (*(_BYTE *)(*(void *)v323 + 103LL)) {
                int v297 = &byte_18C550680;
              }
              else {
                int v297 = (char *)(*(void *)(v323 + 136) + 40LL * (int)v300);
              }
              *((_DWORD *)v297 + 2) = *(_DWORD *)(v323 + 144);
              sub_181319BA8(v323, 122LL, v310, v292, v293, v294, v295, v296);
            }

            goto LABEL_77;
          }

          if (*(_BYTE *)(v23 + 63) == 1)
          {
            sub_1813103F4(v100, 75LL, 0LL, v318, v70, v71, v82, v75);
            uint64_t v100 = v323;
          }

          uint64_t v256 = v315;
          if ((v315 & 0x80000000) != 0)
          {
            if (*(_BYTE *)(v23 + 63) != 1 && (v329 & 0x80) == 0)
            {
              sub_181279C3C(v100, 127LL, v344[1], v219, v317, v71, v82, v75);
              unsigned int v330 = 1;
LABEL_327:
              sub_1813451A8(a1, v317, v219, v258, v259, v260, v261, v262);
              if ((*(_BYTE *)(v23 + 48) & 0x60) != 0) {
                sub_1813441E8(a1, v319, v23, v273, v274, v275, v276, v277);
              }
              if (*(_BYTE *)(v23 + 63) == 1)
              {
                for (uint64_t j = *(void **)(v23 + 80); j; uint64_t j = (void *)j[5])
                {
                  if (*j == v12) {
                    break;
                  }
                }

                sub_18133EBBC((uint64_t *)a1, v23);
                sub_1812B9B68( (uint64_t *)v323,  7LL,  1LL,  (*(__int16 *)(v23 + 54) + 2),  v318,  (uint64_t)j,  4294967285LL,  v280);
                int v281 = *(_DWORD *)(v323 + 144);
                BOOL v282 = __OFSUB__(v281, 1);
                int v283 = v281 - 1;
                if (v283 < 0 == v282)
                {
                  if (v320 == 11) {
                    __int16 v284 = 2;
                  }
                  else {
                    __int16 v284 = v320;
                  }
                  *(_WORD *)(*(void *)(v323 + 136) + 40LL * v283 + 2) = v284;
                }

                uint64_t v285 = *(void *)(a1 + 168);
                if (!v285) {
                  uint64_t v285 = a1;
                }
                *(_BYTE *)(v285 + 33) = 1;
              }

              else
              {
                LODWORD(v333) = 0;
                unsigned int v286 = v218;
                uint64_t v287 = v344[1];
                unsigned int v325 = v344[0];
                sub_1812A6F4C( a1,  v23,  (uint64_t)v14,  v344[1],  v344[0],  v318,  0LL,  (v315 & 0x80000000) == 0,  v278,  v320,  v286,  (int *)&v333,  0LL,  (uint64_t)v8);
                if ((*(_BYTE *)(v12 + 49) & 0x40) != 0) {
                  sub_1812AA984((uint64_t *)a1, v23, 0LL, v318, 0LL, 0LL, v288, v289);
                }
                if ((_DWORD)v333) {
                  BOOL v290 = *(void *)(v323 + 376) == 0LL;
                }
                else {
                  BOOL v290 = 1;
                }
                sub_1812AB304(a1, v23, v287, v325, v318, (uint64_t)v14, 0LL, v330, v290);
              }

              goto LABEL_347;
            }

            sub_1813103F4(v100, 75LL, 0LL, v219, v70, v71, v82, v75);
          }

          else
          {
            if ((v312 & 1) != 0)
            {
              if (!v10)
              {
                __int128 v257 = *(unsigned __int8 **)&v332[6 * v315 + 2];
                if (*v257 == 121 && *(_BYTE *)(v23 + 63) != 1)
                {
                  sub_181279C3C(v323, 127LL, v344[1], v219, v317, v71, v82, v75);
                  unsigned int v330 = 1;
                  char v8 = v321;
                  int v218 = v328;
                  goto LABEL_327;
                }

                sub_181319C00(a1, v257, v219);
                char v8 = v321;
              }
            }

            else
            {
              sub_181279C3C(v100, 94LL, v310, v315, v219, v71, v82, v75);
            }

            if (*(_BYTE *)(v23 + 63) == 1)
            {
              uint64_t v219 = v316;
              sub_1813103F4(v323, 50LL, v316, (*(_DWORD *)(v323 + 144) + 2), v70, v71, v82, v75);
              uint64_t v268 = v323;
            }

            else
            {
              int v331 = sub_181319BA8(v323, 51LL, v316, v256, v70, v71, v82, v75);
              sub_181279C3C(v323, 127LL, v344[1], v316, v317, v269, v270, v271);
              uint64_t v268 = v323;
              if (*(_BYTE *)(*(void *)v323 + 103LL)) {
                uint64_t v272 = &byte_18C550680;
              }
              else {
                uint64_t v272 = (char *)(*(void *)(v323 + 136) + 40LL * v331);
              }
              *((_DWORD *)v272 + 2) = *(_DWORD *)(v323 + 144);
              uint64_t v219 = v316;
            }

            int v218 = v328;
            sub_181319BA8(v268, 13LL, v219, v263, v264, v265, v266, v267);
          }

          unsigned int v330 = 0;
          goto LABEL_327;
        }
      }

      unint64_t v132 = v131 + 1;
      LODWORD(v82) = v128;
      do
        uint64_t v82 = v82 - ((*(_WORD *)(v130 + 16LL * (v132-- - 2) + 14) & 0x60) != 0);
      while (v132 > 1);
      goto LABEL_165;
    }

    unsigned int v314 = v82;
    uint64_t v83 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v83;
    int v309 = *(_DWORD *)(v323 + 144);
    char v84 = v75;
    sub_181279C3C(v323, 11LL, v83, 0LL, (v309 + 1), v71, v82, v75);
    v338[0] = 13;
    unsigned int v311 = v83;
    unsigned int v339 = v83;
    int v340 = 0;
    uint64_t v343 = 0LL;
    unsigned int v90 = v319;
    if (!v84) {
      unsigned int v90 = 0;
    }
    int v91 = *(__int16 *)(v23 + 54);
    unsigned int v341 = v90;
    int v342 = v91;
    uint64_t v14 = 0LL;
    if (!*(_DWORD *)(a1 + 48))
    {
      int v98 = v341;
      sub_18131FB8C(v323, v311, v92, v93, v94, v95, v96, v97);
      uint64_t v100 = v323;
      if (*(_BYTE *)(*(void *)v323 + 103LL)) {
        __int128 v101 = &byte_18C550680;
      }
      else {
        __int128 v101 = (char *)(*(void *)(v323 + 136) + 40LL * v309);
      }
      *((_DWORD *)v101 + 2) = *(_DWORD *)(v323 + 144);
      uint64_t v104 = **(unsigned int **)(v10 + 32);
      if (!v322)
      {
        int v159 = sub_181344DC0((uint64_t *)a1, v35, v23, v99, v70, v71, v82, v75);
        uint64_t v82 = v314;
        uint64_t v100 = v323;
        if (!v159)
        {
          unsigned int v310 = 0;
          char v312 = 1;
          char v106 = a2 + 8;
          goto LABEL_154;
        }
      }

      unsigned int v307 = v98;
      unsigned int v310 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v310 + 1;
      char v160 = *(_BYTE *)(a1 + 31);
      if (v160)
      {
        *(_BYTE *)(a1 + 31) = v160 - 1;
        int v161 = *(_DWORD *)(a1 + 4LL * (v160 - 1) + 224);
        if (v160 != 1)
        {
          unsigned int v302 = *(_DWORD *)(a1 + 4LL * (v160 - 1) + 224);
          uint64_t v162 = v104;
          unsigned __int8 v163 = v160 - 2;
          *(_BYTE *)(a1 + 31) = v163;
          uint64_t v104 = *(unsigned int *)(a1 + 4LL * v163 + 224);
LABEL_229:
          sub_1813103F4(v100, 118LL, v310, v162, v70, v71, v82, v75);
          unsigned int v313 = sub_181319BA8(v323, 12LL, v339, v179, v180, v181, v182, v183);
          int v304 = v162;
          sub_181279C3C(v323, 97LL, v307, v162, v302, v184, v185, v186);
          sub_1813103F4(v323, 127LL, v310, v104, v187, v188, v189, v190);
          sub_181279C3C(v323, 128LL, v310, v302, v104, v191, v192, v193);
          sub_181319CC8(v323, v313, v194, v195, v196, v197, v198, v199);
          uint64_t v100 = v323;
          if (*(_BYTE *)(*(void *)v323 + 103LL)) {
            uint64_t v200 = &byte_18C550680;
          }
          else {
            uint64_t v200 = (char *)(*(void *)(v323 + 136) + 40LL * (int)v313);
          }
          uint64_t v82 = v314;
          char v106 = a2 + 8;
          *((_DWORD *)v200 + 2) = *(_DWORD *)(v323 + 144);
          int v98 = v307;
          if (v302)
          {
            uint64_t v201 = *(unsigned __int8 *)(a1 + 31);
            if (v201 <= 7)
            {
              *(_BYTE *)(a1 + 31) = v201 + 1;
              *(_DWORD *)(a1 + 4 * v201 + 224) = v302;
            }
          }

          if ((_DWORD)v104 && (uint64_t v202 = *(unsigned __int8 *)(a1 + 31), v202 <= 7))
          {
            char v312 = 0;
            *(_BYTE *)(a1 + 31) = v202 + 1;
            *(_DWORD *)(a1 + 4 * v202 + 224) = v104;
            LODWORD(v104) = v304;
          }

          else
          {
            char v312 = 0;
            LODWORD(v104) = v304;
          }

          goto LABEL_154;
        }

        uint64_t v162 = v104;
        int v164 = *(_DWORD *)(a1 + 56);
      }

      else
      {
        uint64_t v162 = v104;
        int v164 = *(_DWORD *)(a1 + 56) + 1;
        int v161 = v164;
      }

      unsigned int v302 = v161;
      uint64_t v104 = (v164 + 1);
      *(_DWORD *)(a1 + 56) = v104;
      goto LABEL_229;
    }

LABEL_148:
  sub_1812DC47C(a1, "table %S has no column named %s", v68, v69, v70, v71, v82, v75, a2 + 8);
LABEL_22:
  uint64_t v14 = 0LL;
  *(_BYTE *)(a1 + 29) = 1;
LABEL_42:
  uint64_t result = sub_18128FF4C((void *)v12, (void *)a2);
  uint64_t v48 = v332;
  if (v332) {
LABEL_43:
  }
    uint64_t result = sub_181311F48((void *)v12, v48);
LABEL_44:
  if (v8) {
    uint64_t result = sub_181311EB0((void *)v12, v8);
  }
  if (v10) {
    uint64_t result = sub_18128FDA0((void *)v12, v10, 1);
  }
  if (a4)
  {
    int v49 = *a4;
    if ((int)*a4 >= 1)
    {
      uint64_t v50 = 0LL;
      uint64_t v51 = 2LL;
      do
      {
        int v52 = *(void **)&a4[v51];
        if (v52)
        {
          sub_1812F20DC((void *)v12, v52);
          int v49 = *a4;
        }

        ++v50;
        v51 += 4LL;
      }

      while (v50 < v49);
    }

    uint64_t result = sub_1813014B0((void *)v12, a4);
  }

  if (v14) {
    return sub_1813014B0((void *)v12, v14);
  }
  return result;
}

            uint64_t v82 = *(_DWORD *)(v52 + 16);
            if (*(int *)(v52 + 24) >= 1)
            {
              uint64_t v83 = 0LL;
              char v84 = v55 + 16;
              do
              {
                if (*v84)
                {
                  uint64_t v85 = *((void *)v84 - 2);
                  if (v85)
                  {
                    uint64_t v86 = &off_18C4653A8;
                    if (dword_18C465380)
                    {
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8[0] -= (int)off_18C4653B8(v85);
                      --qword_18C468B10;
                      off_18C4653A8(v85);
                      uint64_t v85 = xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70) {
                        goto LABEL_151;
                      }
                      uint64_t v86 = &xmmword_18C465410;
                    }

                    (*v86)(v85);
                  }
                }

uint64_t sub_1812A6CB0( uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, _BYTE *a6, _DWORD *a7, _DWORD *a8)
{
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    uint64_t v10 = 0LL;
    *a8 = -999;
    *a7 = -999;
    return v10;
  }

  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)(a2 + 96);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v16 + 32) + 24LL);
    LODWORD(v19) = -1;
    do
    {
      uint64_t v20 = *v18;
      v18 += 4;
      uint64_t v19 = (v19 + 1);
    }

    while (v20 != v17);
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v19 = 4294934528LL;
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }

  a5 = *(unsigned int *)(a1 + 52);
LABEL_7:
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = (a5 + 1);
  *a7 = a5;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0 || a6 && !*a6)
  {
    if (!*(_BYTE *)(v16 + 111)
      && (_DWORD)v19 != 1
      && *(_BYTE *)(*(void *)(*(void *)(v16 + 32) + 32LL * (int)v19 + 8) + 17LL))
    {
      sub_181319DC4(a1, v19, *(_DWORD *)(a2 + 40), a3 == 113, *(void *)a2);
    }
  }

  else
  {
    sub_18128BBE0((void *)a1, a5, v19, a2, a3, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  }

  *a8 = v22;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23)
  {
    uint64_t v36 = a7;
    uint64_t v37 = a2;
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v24 = v22 + v10;
      if ((*(_WORD *)(v23 + 99) & 3) == 2 && (*(_BYTE *)(v37 + 48) & 0x80) != 0)
      {
        a4 = 0;
        *uint64_t v36 = v24;
      }

      if (!a6 || a6[v10 + 1])
      {
        uint64_t v25 = *(unsigned int *)(v23 + 88);
        int v26 = *(_DWORD *)(v21 + 144);
        if (*(_DWORD *)(v21 + 148) <= v26)
        {
          sub_18131044C(v21, a3, v24, v25, v19, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
        }

        else
        {
          *(_DWORD *)(v21 + 144) = v26 + 1;
          uint64_t v27 = *(void *)(v21 + 136) + 40LL * v26;
          *(_BYTE *)uint64_t v27 = a3;
          *(_WORD *)(v27 + 2) = 0;
          *(_DWORD *)(v27 + 4) = v24;
          *(_DWORD *)(v27 + 8) = v25;
          *(_DWORD *)(v27 + 12) = v19;
          *(_BYTE *)(v27 + 1) = 0;
          *(void *)(v27 + 24) = 0LL;
          *(void *)(v27 + 32) = 0LL;
          *(void *)(v27 + 16) = 0LL;
        }

        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v29 = sub_181319FB0((_DWORD *)a1, v23);
        if (v29)
        {
          if (*(_BYTE *)(*(void *)v28 + 103LL))
          {
            if (!*(void *)(*(void *)v28 + 816LL) && (*(_DWORD *)v29)-- == 1) {
              sub_1813014B0(*(void **)(v29 + 16), (void *)v29);
            }
          }

          else
          {
            uint64_t v31 = *(void *)(v28 + 136) + 40LL * *(int *)(v28 + 144);
            *(_BYTE *)(v31 - 39) = -8;
            *(void *)(v31 - 24) = v29;
          }
        }

        int v32 = *(_DWORD *)(v21 + 144);
        BOOL v33 = __OFSUB__(v32, 1);
        int v34 = v32 - 1;
        if (v34 < 0 == v33) {
          *(_WORD *)(*(void *)(v21 + 136) + 40LL * v34 + 2) = a4;
        }
      }

      ++v10;
      uint64_t v23 = *(void *)(v23 + 40);
    }

    while (v23);
    LODWORD(v22) = v22 + v10;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_1812A6F4C( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, unsigned __int8 a10, unsigned int a11, int *a12, uint64_t a13, uint64_t a14)
{
  int v352 = a8;
  unsigned int v354 = a7;
  uint64_t v14 = a6;
  unsigned int v341 = a5;
  uint64_t v363 = a3;
  uint64_t v15 = a2;
  uint64_t v16 = (_DWORD *)a1;
  uint64_t v17 = a13;
  uint64_t v361 = *(void *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  int v19 = *(_DWORD *)(a2 + 48);
  if ((v19 & 0x80) != 0)
  {
    uint64_t v21 = a2 + 16;
    do
    {
      uint64_t v22 = *(void *)v21;
      int v23 = *(_WORD *)(*(void *)v21 + 99LL) & 3;
      uint64_t v21 = *(void *)v21 + 40LL;
    }

    while (v23 != 2);
    uint64_t v360 = v22;
    int v20 = *(unsigned __int16 *)(v22 + 94);
  }

  else
  {
    uint64_t v360 = 0LL;
    int v20 = 1;
  }

  int v343 = v20;
  unsigned int v335 = a4;
  unsigned int v369 = a10;
  uint64_t v359 = a2;
  unsigned int v370 = a6;
  if ((v19 & 0x800) != 0)
  {
    int v42 = 0;
    int v43 = 0;
    char v44 = 0;
    unsigned int v364 = a6 + 1;
    int v358 = *(__int16 *)(a2 + 54);
    int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
    int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
    int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
    v48.i64[0] = 0x1000100010001LL;
    v48.i64[1] = 0x1000100010001LL;
    int v49 = 1;
    while (1)
    {
      int v374 = v43;
      if (v358 >= 1) {
        break;
      }
LABEL_133:
      int v43 = v374;
      uint64_t v16 = (_DWORD *)a1;
      if (v44 & 1 | ((v42 | v374) == 0)) {
        goto LABEL_7;
      }
      int v49 = 0;
      char v44 = 1;
      if (v374 >= 1)
      {
        int v49 = 0;
        if ((*(_BYTE *)(v15 + 48) & 0x60) != 0)
        {
          sub_1813441E8(a1, v364, v15, a4, a5, a6, a7, a8);
          v48.i64[0] = 0x1000100010001LL;
          v48.i64[1] = 0x1000100010001LL;
          int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
          int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
          int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
          uint64_t v17 = a13;
          int v49 = 0;
        }
      }
    }

    unint64_t v50 = 0LL;
    int v366 = v49;
    while (1)
    {
      uint64_t v51 = *(void *)(v15 + 8);
      uint64_t v52 = v51 + 16 * v50;
      unsigned int v53 = *(_BYTE *)(v52 + 8) & 0xF;
      if (v44 & 1 | ((*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0))
      {
        if (v17 && (*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0 && (*(_DWORD *)(v17 + 4 * v50) & 0x80000000) != 0) {
          goto LABEL_61;
        }
        if (v53 == 11) {
          unsigned int v53 = 2;
        }
        if (a10 == 11) {
          uint64_t v54 = v53;
        }
        else {
          uint64_t v54 = a10;
        }
        if ((_DWORD)v54 == 5)
        {
          if ((v44 & 1) != 0 || !*(_WORD *)(v51 + 16 * v50 + 12)) {
            uint64_t v54 = 2LL;
          }
          else {
            uint64_t v54 = 5LL;
          }
        }

        else if ((((*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0) & ~v49) != 0)
        {
          goto LABEL_61;
        }

        __int16 v55 = v50;
        if ((v50 & 0x8000) == 0 && (*(_DWORD *)(v15 + 48) & 0x20) != 0)
        {
          if ((_WORD)v50)
          {
            if (v50 >= 0x11)
            {
              uint64_t v58 = 16LL;
              if ((v50 & 0xF) != 0) {
                uint64_t v58 = v50 & 0xF;
              }
              unint64_t v56 = v50 - v58;
              uint64_t v59 = v51 + 142;
              int16x8_t v60 = 0uLL;
              int16x8_t v61 = 0uLL;
              do
              {
                int8x16_t v62 = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 64), v46);
                v62.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 32), v45).i32[3];
                v63.i32[0] = vzip1q_s16(*(int16x8_t *)(v59 - 128), *(int16x8_t *)(v59 - 112)).u32[0];
                v63.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 96), v47).i32[1];
                v63.i64[1] = v62.i64[1];
                int8x16x2_t v379 = *(int8x16x2_t *)(v59 + 32);
                int8x16_t v64 = vqtbl2q_s8(*(int8x16x2_t *)(v59 + 64), v46);
                v64.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v59 + 96), v45).i32[3];
                int16x8_t v66 = *(int16x8_t *)v59;
                int16x8_t v65 = *(int16x8_t *)(v59 + 16);
                v59 += 256LL;
                v65.i32[0] = vzip1q_s16(v66, v65).u32[0];
                v65.i32[1] = vqtbl2q_s8(v379, v47).i32[1];
                v65.i64[1] = v64.i64[1];
                int16x8_t v60 = vaddq_s16((int16x8_t)vbicq_s8(v48, (int8x16_t)vshrq_n_u16(v63, 5uLL)), v60);
                int16x8_t v61 = vaddq_s16((int16x8_t)vbicq_s8(v48, (int8x16_t)vshrq_n_u16((uint16x8_t)v65, 5uLL)), v61);
                v58 += 16LL;
              }

              while (v50 != v58);
              a9 = vaddq_s16(v61, v60);
              a9.i16[0] = vaddvq_s16(a9);
              unsigned __int16 v57 = a9.i16[0];
            }

            else
            {
              unint64_t v56 = 0LL;
              unsigned __int16 v57 = 0;
            }

            unsigned int v67 = (unsigned __int16 *)(v51 + 16 * v56 + 14);
            do
            {
              unsigned int v68 = *v67;
              v67 += 8;
              v57 += ((v68 >> 5) & 1) == 0;
              ++v56;
            }

            while (v50 != v56);
          }

          else
          {
            unsigned __int16 v57 = 0;
          }

          else {
            __int16 v55 = v57;
          }
        }

        uint64_t v69 = v364 + v55;
        switch((int)v54)
        {
          case 1:
          case 3:
            goto LABEL_100;
          case 2:
            uint64_t v70 = *(void *)(a1 + 168);
            if (!v70) {
              uint64_t v70 = a1;
            }
            *(_BYTE *)(v70 + 33) = 1;
LABEL_100:
            uint64_t v71 = sub_18127F588(v361, "%s.%s", a3, a4, a5, a6, a7, a8, *(void *)v15);
            int v72 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v72)
            {
              sub_18131044C(v18, 69LL, 1299LL, v54, v69, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v72 + 1;
              uint64_t v73 = *(void *)(v18 + 136) + 40LL * v72;
              *(void *)uint64_t v73 = 0x51300000045LL;
              *(_DWORD *)(v73 + 8) = v54;
              *(_DWORD *)(v73 + 12) = v69;
              *(void *)(v73 + 24) = 0LL;
              *(void *)(v73 + 32) = 0LL;
              *(void *)(v73 + 16) = 0LL;
            }

            uint64_t v14 = v370;
            int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
            int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
            int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
            v48.i64[0] = 0x1000100010001LL;
            v48.i64[1] = 0x1000100010001LL;
            if (*(_BYTE *)(*(void *)v18 + 103LL))
            {
              if (v71)
              {
                sub_1813014B0(*(void **)v18, v71);
                v48.i64[0] = 0x1000100010001LL;
                v48.i64[1] = 0x1000100010001LL;
                int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
                int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
                int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
              }
            }

            else
            {
              uint64_t v74 = *(void *)(v18 + 136) + 40LL * *(int *)(v18 + 144);
              *(_BYTE *)(v74 - 39) = -6;
              *(void *)(v74 - 24) = v71;
            }

            int v75 = *(_DWORD *)(v18 + 144);
            BOOL v39 = __OFSUB__(v75, 1);
            int v76 = v75 - 1;
            if (v76 < 0 == v39) {
              *(_WORD *)(*(void *)(v18 + 136) + 40LL * v76 + 2) = 1;
            }
            uint64_t v17 = a13;
            int v49 = v366;
            break;
          case 5:
            int v79 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v79)
            {
              int v79 = sub_18131044C(v18, 51LL, v69, 0LL, 0LL, a6, a7, a8);
              uint64_t v17 = a13;
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v79 + 1;
              uint64_t v80 = *(void *)(v18 + 136) + 40LL * v79;
              *(_DWORD *)uint64_t v80 = 51;
              *(_DWORD *)(v80 + 4) = v69;
              a9 = 0uLL;
              *(_OWORD *)(v80 + 8) = 0u;
              *(_OWORD *)(v80 + 24) = 0u;
            }

            int v81 = *(unsigned __int16 *)(v51 + 16 * v50 + 12);
            if (*(_WORD *)(v51 + 16 * v50 + 12)
              && !*(_BYTE *)(v15 + 63)
              && (uint64_t v85 = *(_DWORD **)(v15 + 80)) != 0LL
              && *v85 >= v81)
            {
              a2 = *(void *)&v85[6 * (v81 - 1) + 2];
              uint64_t v83 = *(void *)a1;
              if (a2)
              {
                uint64_t v82 = (unsigned __int8 *)sub_18129C928(*(void *)a1, (unsigned __int8 *)a2, 0LL, 0LL);
                uint64_t v17 = a13;
              }

              else
              {
                uint64_t v82 = 0LL;
              }
            }

            else
            {
              uint64_t v82 = 0LL;
              uint64_t v83 = *(void *)a1;
            }

            if (*(_BYTE *)(v83 + 103))
            {
              if (!v82) {
                goto LABEL_123;
              }
LABEL_122:
              sub_181309110((void *)v83, v82);
              uint64_t v17 = a13;
              goto LABEL_123;
            }

            sub_181319C00(a1, v82, v69);
            uint64_t v17 = a13;
            if (v82) {
              goto LABEL_122;
            }
LABEL_123:
            char v84 = &byte_18C550680;
            uint64_t v14 = v370;
            if (!*(_BYTE *)(*(void *)v18 + 103LL)) {
              char v84 = (char *)(*(void *)(v18 + 136) + 40LL * v79);
            }
            ++v374;
            *((_DWORD *)v84 + 2) = *(_DWORD *)(v18 + 144);
            uint64_t v15 = v359;
            int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
            int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
            int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
            v48.i64[0] = 0x1000100010001LL;
            v48.i64[1] = 0x1000100010001LL;
            int v49 = v366;
            break;
          default:
            int v77 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v77)
            {
              sub_18131044C(v18, 50LL, v69, a11, 0LL, a6, a7, a8);
              int v49 = v366;
              v48.i64[0] = 0x1000100010001LL;
              v48.i64[1] = 0x1000100010001LL;
              int8x16_t v47 = (int8x16_t)xmmword_1813CDDD0;
              int8x16_t v46 = (int8x16_t)xmmword_1813CDDC0;
              int8x16_t v45 = (int8x16_t)xmmword_1813CDDB0;
              uint64_t v17 = a13;
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v77 + 1;
              uint64_t v78 = *(void *)(v18 + 136) + 40LL * v77;
              *(_DWORD *)uint64_t v78 = 50;
              *(_DWORD *)(v78 + 4) = v69;
              *(_DWORD *)(v78 + 8) = a11;
              *(void *)(v78 + 12) = 0LL;
              *(void *)(v78 + 28) = 0LL;
              *(void *)(v78 + 20) = 0LL;
              *(_DWORD *)(v78 + 36) = 0;
            }

            uint64_t v14 = v370;
            break;
        }
      }

      else
      {
        ++v42;
      }

LABEL_61:
      if (++v50 == v358) {
        goto LABEL_133;
      }
    }
  }

  if ((_DWORD)v14 && (_DWORD)v14 != 5)
  {
    *(_DWORD *)(a1 + 32) = v15;
    char v9 = v14;
  }

  else if ((_DWORD)v9 == 5 || !(_DWORD)v9)
  {
    if (v13 != -1)
    {
      uint64_t v26 = v6[3].i32[1] + 1;
      v6[3].i32[0] = 1;
      v6[3].i32[1] = v26;
      goto LABEL_67;
    }

    char v9 = v14;
    if (!(_DWORD)v14) {
      goto LABEL_67;
    }
  }

      ++v51;
LABEL_62:
      ++v50;
      v52 += 56LL;
      if (v48 == v50) {
        goto LABEL_92;
      }
    }
  }

  int v104 = 0;
  uint64_t v51 = 0;
LABEL_92:
  *int8x16_t v45 = v51;
  if ((int)v20 < 1)
  {
    uint16x8_t v63 = 0;
  }

  else
  {
    uint16x8_t v63 = 0;
    int v20 = v20;
    int8x16_t v64 = v8 + 6;
    do
    {
      int16x8_t v65 = *((void *)v64 - 2);
      uint64_t v113 = 1;
      uint64_t v111 = sub_18129C78C;
      uint64_t v112 = sub_18131C570;
      BOOL v114 = 0;
      if (v65)
      {
        sub_18131C57C((uint64_t)&v110, v65);
        if (!v113)
        {
          int16x8_t v66 = v47 + 8LL * v63;
          *(_DWORD *)int16x8_t v66 = *(_DWORD *)(v65 + 48);
          *(_BYTE *)(v66 + 4) = *v64 & 1;
          ++v63;
        }
      }

      v64 += 24;
      --v20;
    }

    while (v20);
  }

  v45[4] = v63;
  *(_WORD *)(v108 + 18) = 0;
  *(_DWORD *)(v108 + 48) = 1024;
  *(_WORD *)(v108 + 52) = 0;
  *(_BYTE *)(v108 + 28) &= ~1u;
  unsigned int v67 = *v45;
  if ((int)v67 <= *(unsigned __int16 *)(v108 + 56))
  {
LABEL_104:
    uint64_t v73 = sub_181335664(a1, a2, -1LL, 0, (unsigned int *)v45, v104, &v110, &v109);
    if (v109) {
      uint64_t v73 = sub_181335664(a1, a2, -1LL, 0, (unsigned int *)v45, v104, &v110, 0LL);
    }
    int8x16_t v62 = v73;
    if (!(_DWORD)v73)
    {
      uint64_t v74 = *(void *)v108 & ~a2;
      if (v74 || v110)
      {
        uint64_t v80 = ~a2;
        if (v110)
        {
          int8x16_t v62 = sub_181335664(a1, a2, -1LL, 1u, (unsigned int *)v45, v104, &v110, 0LL);
          int v81 = *(void *)v108 & v80;
          uint64_t v82 = v81 == 0;
          if ((_DWORD)v62) {
            goto LABEL_150;
          }
        }

        else
        {
          int v81 = 0LL;
          uint64_t v82 = 0;
        }

        uint64_t v83 = 0LL;
        int v102 = v82;
        while ((int)v67 >= 1)
        {
          char v84 = v83;
          uint64_t v85 = (int *)(*((void *)v45 + 1) + 8LL);
          uint64_t v83 = -1LL;
          uint64_t v86 = v67;
          do
          {
            unint64_t v87 = *v85;
            v85 += 3;
            uint64_t v88 = *(void *)(*(void *)(v107 + 32) + 56LL * v87 + 40) & v80;
            if (v88 < v83 && v88 > v84) {
              uint64_t v83 = v88;
            }
            --v86;
          }

          while (v86);
          if (v83 == -1LL) {
            break;
          }
          if (v83 != v74 && v83 != v81)
          {
            int v91 = sub_181335664(a1, a2, v83 | a2, 0, (unsigned int *)v45, v104, &v110, 0LL);
            int8x16_t v62 = v91;
            if (*(void *)v108 == a2)
            {
              if (!v110) {
                uint64_t v82 = 1;
              }
              int v102 = 1;
            }

            if ((_DWORD)v91) {
              goto LABEL_150;
            }
          }
        }

        if (v102)
        {
          int8x16_t v62 = 0LL;
        }

        else
        {
          int8x16_t v62 = sub_181335664(a1, a2, a2, 0, (unsigned int *)v45, v104, &v110, 0LL);
          if (!v110) {
            uint64_t v82 = 1;
          }
        }
      }

      else
      {
        int8x16_t v62 = 0LL;
      }
    }

LABEL_7:
  uint64_t v24 = *(int **)(v15 + 32);
  if (!v24)
  {
    int v357 = 0;
    uint64_t v33 = a14;
LABEL_141:
    uint64_t v25 = v361;
    goto LABEL_142;
  }

  uint64_t v25 = v361;
  if ((*(_BYTE *)(v361 + 49) & 2) == 0)
  {
    v16[16] = ~(_DWORD)v14;
    if (*v24 >= 1)
    {
      uint64_t v26 = 0LL;
      int v357 = 0;
      unsigned int v373 = v14 + 1;
      if (a10 == 11) {
        LODWORD(v27) = 2;
      }
      else {
        LODWORD(v27) = a10;
      }
      uint64_t v28 = (uint64_t *)(v24 + 4);
      while (1)
      {
        uint64_t v29 = (unsigned __int8 *)*(v28 - 1);
        if (!v17) {
          break;
        }
        a9 = 0uLL;
        v375[0] = 0LL;
        __int128 v376 = 0u;
        uint64_t v377 = 0LL;
        uint64_t v378 = v17;
        v375[1] = sub_18134459C;
        if (v29)
        {
          sub_18131C57C((uint64_t)v375, (uint64_t)v29);
          uint64_t v17 = a13;
          int v30 = WORD2(v377);
        }

        else
        {
          int v30 = 0;
        }

        if (!v352) {
          v30 &= ~2u;
        }
        if (v30) {
          break;
        }
        uint64_t v33 = a14;
LABEL_16:
        ++v26;
        v28 += 3;
        if (v26 >= *v24) {
          goto LABEL_140;
        }
      }

      if (!v357)
      {
        sub_18131FC08((void **)v18, v15, v373, a4, a5, a6, a7, a8);
        int v357 = 1;
      }

      int v31 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v31 - 1;
      if (v29)
      {
        uint64_t v29 = (unsigned __int8 *)sub_18129C928(v361, v29, 0LL, 0LL);
        if (*(_BYTE *)(v361 + 103)) {
          goto LABEL_29;
        }
      }

      else if (*(_BYTE *)(v361 + 103))
      {
LABEL_29:
        if (v29) {
          sub_181309110((void *)v361, v29);
        }
        if ((_DWORD)v27 == 4)
        {
          int v32 = *(_DWORD *)(v18 + 144);
          uint64_t v14 = v370;
          uint64_t v33 = a14;
          if (*(_DWORD *)(v18 + 148) <= v32)
          {
            sub_18131044C(v18, 9LL, 0LL, a11, 0LL, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v18 + 144) = v32 + 1;
            uint64_t v34 = *(void *)(v18 + 136) + 40LL * v32;
            *(void *)uint64_t v34 = 9LL;
            *(_DWORD *)(v34 + 8) = a11;
            *(void *)(v34 + 12) = 0LL;
            *(void *)(v34 + 28) = 0LL;
            *(void *)(v34 + 20) = 0LL;
            *(_DWORD *)(v34 + 36) = 0;
          }

          LODWORD(v27) = 4;
LABEL_50:
          uint64_t v41 = *(void *)(v18 + 24);
          a3 = -v31;
          if (*(_DWORD *)(v41 + 68) + *(_DWORD *)(v41 + 72) >= 0) {
            *(_DWORD *)(*(void *)(v41 + 80) + 4LL * (int)a3) = *(_DWORD *)(v18 + 144);
          }
          else {
            sub_18131E420(v41, v18, a3);
          }
          uint64_t v15 = v359;
          uint64_t v17 = a13;
          goto LABEL_16;
        }

        uint64_t v35 = *v28;
        if ((_DWORD)v27 == 5) {
          uint64_t v27 = 2LL;
        }
        else {
          uint64_t v27 = v27;
        }
        uint64_t v36 = *(void *)(a1 + 16);
        if (v36)
        {
          if ((_DWORD)v27 != 2)
          {
LABEL_42:
            sub_1812B9B68((uint64_t *)v36, 70LL, 275LL, v27, 0LL, v35, 0LL, a8);
            int v38 = *(_DWORD *)(v36 + 144);
            BOOL v39 = __OFSUB__(v38, 1);
            int v40 = v38 - 1;
            if (v40 < 0 == v39) {
              *(_WORD *)(*(void *)(v36 + 136) + 40LL * v40 + 2) = 3;
            }
            uint64_t v14 = v370;
            uint64_t v33 = a14;
            goto LABEL_50;
          }
        }

        else
        {
          if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
            *(_BYTE *)(a1 + 35) = 1;
          }
          uint64_t v36 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)v27 != 2) {
            goto LABEL_42;
          }
        }

        uint64_t v37 = *(void *)(a1 + 168);
        if (!v37) {
          uint64_t v37 = a1;
        }
        *(_BYTE *)(v37 + 33) = 1;
        goto LABEL_42;
      }

      sub_1812BDE64(a1, v29, (v31 - 1), 16LL, a5, a6, a7, a8);
      goto LABEL_29;
    }

    int v357 = 0;
    uint64_t v33 = a14;
LABEL_140:
    uint64_t v16 = (_DWORD *)a1;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_141;
  }

  int v357 = 0;
  uint64_t v33 = a14;
LABEL_142:
  uint64_t v86 = *(void *)(v15 + 16);
  v375[0] = v86;
  if (!v33) {
    goto LABEL_150;
  }
  if (!*(void *)v33)
  {
    unsigned int v90 = 0LL;
    if (*(_BYTE *)(v33 + 40))
    {
      int v91 = 6;
    }

    else
    {
      uint64_t v33 = 0LL;
      int v91 = 4;
    }

    unsigned int v369 = v91;
    goto LABEL_155;
  }

  if (!v86)
  {
LABEL_150:
    unsigned int v90 = 0LL;
LABEL_155:
    char v353 = 1;
    goto LABEL_156;
  }

  unint64_t v87 = 0LL;
  uint64_t v88 = 0LL;
  int v89 = 0;
  do
  {
    uint64_t v86 = *(void *)(v86 + 40);
    ++v89;
    v88 += 16LL;
    v87 += 18LL;
  }

  while (v86);
  LODWORD(v375[0]) = v89;
  if (v25)
  {
    unsigned int v90 = (uint64_t *)sub_1812F2264(v25, v87);
    if (!v90) {
      return;
    }
  }

  else
  {
    unsigned int v90 = (uint64_t *)sub_18126F0AC(v87);
    if (!v90) {
      return;
    }
  }

  bzero(v90, v87);
  int v109 = 0;
  *(void *)(v33 + 48) = v90;
  uint64_t v110 = (void *)v33;
  do
  {
    if (!*v110) {
      break;
    }
    uint64_t v111 = v110[7];
    if (v111)
    {
      uint64_t v112 = *(void *)(v15 + 16);
      uint64_t v113 = 0LL;
      if (v112) {
        BOOL v114 = v112 == v111;
      }
      else {
        BOOL v114 = 1;
      }
      if (!v114)
      {
        do
        {
          ++v113;
          uint64_t v112 = *(void *)(v112 + 40);
          if (v112) {
            BOOL v115 = v112 == v111;
          }
          else {
            BOOL v115 = 1;
          }
        }

        while (!v115);
      }

      if (!*((_BYTE *)v90 + v113 + v88))
      {
        *((_BYTE *)v90 + v113 + v88) = 1;
        uint64_t v116 = &v90[2 * v109];
        uint64_t *v116 = v112;
        *((_DWORD *)v116 + 2) = v113;
        ++v109;
      }
    }

    uint64_t v110 = (void *)v110[4];
  }

  while (v110);
  uint64_t v117 = *(void *)(v15 + 16);
  if (v117)
  {
    uint64_t v118 = 0LL;
    do
    {
      if (!*((_BYTE *)v90 + v118 + v88))
      {
        uint64_t v119 = &v90[2 * v109];
        uint64_t *v119 = v117;
        *((_DWORD *)v119 + 2) = v118;
        ++v109;
      }

      ++v118;
      uint64_t v117 = *(void *)(v117 + 40);
    }

    while (v117);
  }

  char v353 = 0;
LABEL_156:
  uint64_t v92 = *(void *)(v25 + 48);
  if ((v92 & 0x6000) == 0) {
    goto LABEL_173;
  }
  if ((v92 & 0x2000) == 0)
  {
    if ((*(_BYTE *)(*(void *)v16 + 49LL) & 0x40) != 0 && !*(_BYTE *)(v15 + 63))
    {
      uint64_t v93 = *(void *)(v15 + 96);
      uint64_t v94 = *(unsigned __int8 **)v15;
      uint64_t v95 = *(void *)(v93 + 96);
      if (v95)
      {
        int v96 = *v94;
        if (*v94)
        {
          unsigned int v97 = 0;
          int v98 = v94 + 1;
          do
          {
            unsigned int v97 = -1640531535 * (v97 + byte_1813C6343[v96]);
            int v99 = *v98++;
            int v96 = v99;
          }

          while (v99);
        }

        else
        {
          unsigned int v97 = 0;
        }

        unsigned int v314 = (_DWORD *)(v95 + 16LL * (v97 % *(_DWORD *)(v93 + 80)));
        unsigned int v313 = (uint64_t *)(v314 + 2);
      }

      else
      {
        unsigned int v313 = (uint64_t *)(v93 + 88);
        unsigned int v314 = (_DWORD *)(v93 + 84);
      }

      int v316 = *v314;
      if (v316)
      {
        while (1)
        {
          unsigned int v313 = (uint64_t *)*v313;
          unsigned int v317 = (_BYTE *)v313[3];
          for (uint64_t i = *(unsigned __int8 **)v15; ; ++i)
          {
            uint64_t v319 = *v317;
            uint64_t v320 = *i;
            if ((_DWORD)v319 != (_DWORD)v320) {
              break;
            }
            if (!*v317) {
              goto LABEL_596;
            }
LABEL_571:
            ++v317;
          }

          if (byte_1813C6343[v319] == byte_1813C6343[v320]) {
            goto LABEL_571;
          }
          if (!--v316)
          {
LABEL_594:
            unsigned int v313 = &qword_18C550660;
            goto LABEL_596;
          }
        }
      }

      goto LABEL_595;
    }

    ++v12;
    v11 += 2LL;
    if (v10 == v12) {
      goto LABEL_21;
    }
  }

  *(_DWORD *)(v15 - 4) = bswap32(a3);
  if ((_DWORD)v10 != (_DWORD)v12) {
    return 0LL;
  }
LABEL_27:
  uint64_t v18 = 80702LL;
  return sub_1812FD54C(v18, a1);
}

  uint64_t v13 = a1[2];
  if (v13) {
    goto LABEL_12;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  uint64_t v13 = sub_1812DC63C(a1, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  if (v13)
  {
LABEL_12:
    uint64_t v14 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v14)
    {
      sub_18131044C(v13, 1LL, 1LL, v9, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v13 + 144) = v14 + 1;
      uint64_t v15 = *(void *)(v13 + 136) + 40LL * v14;
      *(void *)uint64_t v15 = 0x100000001LL;
      *(_DWORD *)(v15 + 8) = v9;
      *(void *)(v15 + 12) = 0LL;
      *(void *)(v15 + 28) = 0LL;
      *(void *)(v15 + 20) = 0LL;
      *(_DWORD *)(v15 + 36) = 0;
    }
  }

      if (++v14 == v13) {
        goto LABEL_38;
      }
    }

      if (++v11 >= v8) {
        return result;
      }
    }

    if ((v14 & 8) != 0)
    {
      --v11;
      --v8;
      goto LABEL_7;
    }

    uint64_t v17 = v27 + (unsigned __int16)*i;
    uint64_t v18 = (v11 + a3);
    int v19 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v19)
    {
      uint64_t v25 = v13;
      uint64_t v26 = v12;
      goto LABEL_31;
    }

    *(_DWORD *)(v13 + 144) = v19 + 1;
    int v20 = *(void *)(v13 + 136) + 40LL * v19;
    *(_BYTE *)int v20 = v12;
    *(_WORD *)(v20 + 2) = 0;
    *(_DWORD *)(v20 + 4) = v17;
    *(_DWORD *)(v20 + 8) = v18;
    goto LABEL_24;
  }

  return result;
}

      ;
    }
  }

  return result;
}

    ++v7;
  }

  if (*i) {
    goto LABEL_7;
  }
  for (uint64_t k = (unsigned __int8 **)(v4 + 1); ; uint64_t k = (unsigned __int8 **)(v18 + 16))
  {
    uint64_t v18 = *k;
    int v19 = *v18;
  }

  if (v19 == 176) {
    int v19 = v18[2];
  }
  if ((v19 - 153) < 3
    || v19 == 117
    || v19 == 167
    && (v18[6] & 0x20) == 0
    && (int v20 = *((void *)v18 + 9)) != 0
    && ((uint64_t v21 = *((unsigned int *)v18 + 12), (v21 & 0x80000000) != 0)
     || (uint64_t v22 = *(void *)(v20 + 8)) == 0
     || (*(_BYTE *)(v22 + 16 * v21 + 8) & 0xF) != 0))
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v15 = 1LL;
LABEL_34:
  int v23 = sub_18129CD4C(a1, v4, 0);
  *a3 = v23;
  if (v23) {
    *((_BYTE *)v23 + 24) = v14;
  }
  return v15;
}

  uint64_t result = sub_1812B9B68((uint64_t *)v20, 70LL, v19, a2, 0LL, (uint64_t)v18, 4294967290LL, v17);
  int v23 = *(_DWORD *)(v20 + 144);
  uint64_t v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v25 < 0 == v24) {
    *(_WORD *)(*(void *)(v20 + 136) + 40LL * v25 + 2) = 2;
  }
  return result;
}

    char v8 = 0;
    if (*((void *)v5 + 2)) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }

  char v8 = *(_DWORD *)v6;
  if (!*((void *)v5 + 2)) {
    goto LABEL_4;
  }
LABEL_8:
  if (v8 >= 1)
  {
    uint64_t v10 = (int64x2_t *)*((void *)v5 + 5);
    if (v8 >= 4uLL)
    {
      char v11 = v8 - (unint64_t)(v8 & 3);
      uint64_t v12 = v10 + 1;
      uint64_t v13 = vdupq_n_s64(1uLL);
      uint64_t v14 = v11;
      do
      {
        uint64_t v15 = vaddq_s64(*v12, v13);
        v12[-1] = vaddq_s64(v12[-1], v13);
        *uint64_t v12 = v15;
        v12 += 2;
        v14 -= 4LL;
      }

      while (v14);
      if ((v8 & 3) == 0) {
        goto LABEL_21;
      }
    }

    else
    {
      char v11 = 0LL;
    }

    uint64_t v16 = &v10->i64[v11];
    uint64_t v17 = v8 - v11;
    do
    {
      ++*v16++;
      --v17;
    }

    while (v17);
  }

  if (!*(void *)a1) {
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(*(void *)a1 + 24LL);
  if (v8) {
    goto LABEL_14;
  }
  uint64_t v15 = (2 * v13) | 1;
  uint64_t v16 = 3 * v15;
  if (v14)
  {
    uint64_t v17 = (char *)sub_1812F2264(v14, 3 * v15);
    if (!v17) {
      return 7LL;
    }
    goto LABEL_20;
  }

  char v11 = (v10 + 1);
  if (a2 != 2)
  {
    if (v9 && v7 && *(void *)(v7 + 24))
    {
      uint64_t v15 = *(_BYTE *)v7 == 1 ? sub_18126D6B4(v9, v11) : sub_181363650(v9, v11);
      uint64_t v16 = *(void *)(v7 + 24);
      if (v16)
      {
        uint64_t v17 = (int *)(v16 + 16LL * ((*(_DWORD *)(v7 + 16) - 1) & v15));
        int v20 = *v17;
        uint64_t v18 = v17 + 2;
        int v19 = v20;
        if (*(_BYTE *)v7 == 1) {
          uint64_t v21 = sub_18126D718;
        }
        else {
          uint64_t v21 = sub_181363688;
        }
        while (v19)
        {
          uint64_t v18 = *(_DWORD **)v18;
          if (!v18) {
            break;
          }
          --v19;
          if (!((unsigned int (*)(void, void, char *, uint64_t))v21)( *((void *)v18 + 3),  v18[8],  v9,  v11))
          {
            *(void *)int v40 = *((void *)v18 + 2);
            if (*(void *)v40) {
              goto LABEL_83;
            }
            break;
          }
        }
      }
    }

    uint64_t v22 = sqlite3_mprintf("unknown tokenizer: %s", v9);
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_181269368(*(void *)a1, v22, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      if (!v22) {
        return;
      }
    }

    else
    {
      sub_1812CF36C(97407);
      if (!v22) {
        return;
      }
    }

    uint64_t v26 = (void (**)(char *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v22);
      --qword_18C468B10;
      off_18C4653A8(v22);
      uint64_t v22 = (char *)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        return;
      }
      uint64_t v26 = (void (**)(char *))&xmmword_18C465410;
    }

    (*v26)(v22);
    return;
  }

  if (a1 && *(void *)a1)
  {
    uint64_t v12 = *(sqlite3 **)(*(void *)a1 + 24LL);
  }

  else
  {
    sub_1812CF36C(97953);
    uint64_t v12 = 0LL;
  }

  *(_DWORD *)int v40 = 0;
  sqlite3_db_config(v12, 1004, 0xFFFFFFFFLL, v40);
  int v23 = (uint64_t)a3[1];
  if (!*(_DWORD *)v40)
  {
    if (v23)
    {
      if ((*(_WORD *)(v23 + 20) & 0x40) != 0) {
        goto LABEL_51;
      }
    }

    else
    {
      sub_1812CF36C(97266);
    }

    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      uint64_t v36 = *(void *)a1;
      uint64_t v37 = "fts3_tokenizer requires bound parameters";
      goto LABEL_91;
    }

    goto LABEL_92;
  }

  if (!v23)
  {
    sub_1812CF36C(91138);
    goto LABEL_86;
  }

  sub_18136EB1C( (char *)&v9,  v2,  "CREATE TABLE %Q.'%q_segments'(blockid INTEGER PRIMARY KEY, block BLOB);",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40));
  sub_18136EB1C( (char *)&v9,  v2,  "CREATE TABLE %Q.'%q_segdir'(level INTEGER,idx INTEGER,start_block INTEGER,leaves_end_block INTEGER,end_block INTEGER ,root BLOB,PRIMARY KEY(level, idx));",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40));
  if (*(_BYTE *)(a1 + 462)) {
    sub_18136EB1C( (char *)&v9,  v2,  "CREATE TABLE %Q.'%q_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
  }
      *(void *)(a1 + 32),
      *(void *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 461)) {
    return v9;
  }
  sub_18136EB1C( (char *)&v9,  *(sqlite3 **)(a1 + 24),  "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
    *(void *)(a1 + 32),
    *(void *)(a1 + 40));
  uint64_t result = v9;
  if (!v9) {
    *(_BYTE *)(a1 + 461) = 1;
  }
  return result;
}

      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_3;
      }
    }
  }

      ++v3;
      v4 += 2;
    }

    while (v3 < (int)v1[7]);
  }

  uint64_t v7 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (_DWORD *)(*v7)(v1);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v1);
  --qword_18C468B10;
  uint64_t result = (_DWORD *)off_18C4653A8(v1);
  int v1 = (_DWORD *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v7 = &xmmword_18C465410;
    return (_DWORD *)(*v7)(v1);
  }

  return result;
}

  uint64_t v13 = *(void *)(a1 + 72);
  if (v13)
  {
    sub_18139B35C(*(void *)(*(void *)(a1 + 64) + 16LL), *(void *)(v13 + 8));
    char v9 = *(void *)(a1 + 72);
  }

  else
  {
    char v9 = 0LL;
  }

      unsigned int v6 = *(_DWORD *)(a4 + 24);
      uint64_t v7 = *(_DWORD *)(a4 + 20) + 1;
      *(_DWORD *)(a4 + 20) = v7;
      if (v7 >= v6) {
        return 0LL;
      }
    }
  }

  return result;
}

              v16 += 2LL;
              goto LABEL_8;
            }
          }

          else if (byte_1813C6343[v21] != byte_1813C6343[v22])
          {
            for (uint64_t j = "separators"; ; ++j)
            {
              uint64_t v24 = *v17;
              uint64_t v25 = *(unsigned __int8 *)j;
              if ((_DWORD)v24 == (_DWORD)v25)
              {
                if (!*v17)
                {
                  uint64_t v26 = *v18;
                  if (*v18)
                  {
                    uint64_t v27 = v18 + 1;
                    do
                    {
                      if ((v26 & 0x80) == 0) {
                        *((_BYTE *)v7 + v26) = 0;
                      }
                      uint64_t v28 = *v27++;
                      uint64_t v26 = v28;
                    }

                    while (v28);
                  }

                  goto LABEL_7;
                }
              }

              else if (byte_1813C6343[v24] != byte_1813C6343[v25])
              {
                goto LABEL_30;
              }

              ++v17;
            }
          }

          ++v19;
        }
      }

    *(void *)(a1 + 96) = *(void *)(i + 32);
    --*(_DWORD *)(a1 + 84);
    unsigned int v6 = (void (**)(uint64_t))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(i);
      --qword_18C468B10;
      off_18C4653A8(i);
      uint64_t i = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        continue;
      }
      unsigned int v6 = (void (**)(uint64_t))&xmmword_18C465410;
    }

    (*v6)(i);
  }

  LODWORD(result) = sub_1813AFFD4(a1, v30);
  if (v4) {
    return v4;
  }
  else {
    return result;
  }
}

LABEL_173:
    __int128 v334 = 0LL;
    goto LABEL_174;
  }

  if ((*(void *)(v15 + 88)
     || (uint64_t v100 = *(void *)(*(void *)(*(void *)v16 + 32LL) + 56LL)) != 0 && *(void *)(v100 + 64))
    && !*((_BYTE *)v16 + 221))
  {
    __int128 v334 = sub_18133EDD4(v16, (unsigned __int8 **)v15, 128LL, 0LL, 0LL, a6, a7, a8);
    if (v334) {
      goto LABEL_599;
    }
  }

  if ((*(_BYTE *)(*(void *)v16 + 49LL) & 0x40) == 0 || *(_BYTE *)(v15 + 63)) {
    goto LABEL_173;
  }
  uint64_t v304 = *(void *)(v15 + 96);
  int v305 = *(unsigned __int8 **)v15;
  uint64_t v306 = *(void *)(v304 + 96);
  if (v306)
  {
    int v307 = *v305;
    if (*v305)
    {
      unsigned int v308 = 0;
      int v309 = v305 + 1;
      do
      {
        unsigned int v308 = -1640531535 * (v308 + byte_1813C6343[v307]);
        int v310 = *v309++;
        int v307 = v310;
      }

      while (v310);
    }

    else
    {
      unsigned int v308 = 0;
    }

    unsigned int v315 = (_DWORD *)(v306 + 16LL * (v308 % *(_DWORD *)(v304 + 80)));
    unsigned int v313 = (uint64_t *)(v315 + 2);
  }

  else
  {
    unsigned int v313 = (uint64_t *)(v304 + 88);
    unsigned int v315 = (_DWORD *)(v304 + 84);
  }

  int v323 = *v315;
  if (v323)
  {
LABEL_587:
    unsigned int v313 = (uint64_t *)*v313;
    int v324 = (_BYTE *)v313[3];
    for (uint64_t j = *(unsigned __int8 **)v15; ; ++j)
    {
      uint64_t v326 = *v324;
      uint64_t v327 = *j;
      if ((_DWORD)v326 == (_DWORD)v327)
      {
        if (!*v324) {
          goto LABEL_596;
        }
      }

      else if (byte_1813C6343[v326] != byte_1813C6343[v327])
      {
        if (!--v323) {
          goto LABEL_594;
        }
        goto LABEL_587;
      }

      ++v324;
    }
  }

      if (v13)
      {
        uint64_t v86 = (uint64_t (**)(void *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_179;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
        --qword_18C468B10;
        off_18C4653A8(v13);
        uint64_t v13 = (_BYTE *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v86 = (uint64_t (**)(void *))&xmmword_18C465410;
LABEL_179:
          (*v86)(v13);
        }
      }

      sub_1812C08E0((uint64_t)v9);
      return v1;
    case 9:
      off_18C465520 = (uint64_t (*)(void))v93;
      return ((uint64_t (*)(void))v93)(0LL);
    case 10:
      int v1 = 0;
      off_18C550648 = (double (*)(void))v93;
      off_18C550650 = v94;
      return v1;
    case 11:
      int v1 = dword_18C54FA50;
      if ((_DWORD)v93) {
        dword_18C54FA50 = v93;
      }
      return v1;
    case 12:
      unsigned int __buf = 0;
      return 0;
    case 13:
      return v93;
    case 15:
      int v1 = 0;
      *(_DWORD *)(v93 + 96) = (_DWORD)v94;
      return v1;
    case 17:
      int v1 = 0;
      *(_DWORD *)(v93 + 44) ^= 0x20u;
      return v1;
    case 18:
      dword_18C465528 = v93;
      int v1 = 0;
      if ((_DWORD)v93 == 2) {
        off_18C465530 = (uint64_t (*)(void, void, __n128))v94;
      }
      else {
        off_18C465530 = 0LL;
      }
      return v1;
    case 19:
      int v1 = 0;
      dword_18C465538 = v93;
      return v1;
    case 20:
      int v1 = 0;
      dword_18C465390 = v93;
      return v1;
    case 22:
      return 123410;
    case 23:
      return qword_18C4654D4 == 0;
    case 24:
      int v1 = 0;
      *(_DWORD *)(v93 + 184) = (_DWORD)v94;
      return v1;
    case 25:
      uint64_t v14 = *(void *)(v93 + 24);
      if (v14) {
        xmmword_18C465400(v14);
      }
      if (!v94) {
        goto LABEL_94;
      }
      uint64_t v15 = *(_DWORD *)(v93 + 40);
      uint64_t v16 = __OFSUB__(v15, 1);
      uint64_t v17 = (v15 - 1);
      uint64_t v18 = (_BYTE **)(*(void *)(v93 + 32) + 32 * v17);
      while (1)
      {
        int v19 = *v18;
        if (*v18) {
          break;
        }
LABEL_41:
        if (!(_DWORD)v17)
        {
          uint64_t v24 = (unsigned __int8 *)v94;
          for (uint64_t i = "main"; ; ++i)
          {
            uint64_t v26 = *(unsigned __int8 *)i;
            uint64_t v27 = *v24;
            if ((_DWORD)v26 == (_DWORD)v27)
            {
              if (!*i)
              {
                LOBYTE(v17) = 0;
LABEL_89:
                *(_BYTE *)(v93 + 196) = v17;
                *(_BYTE *)(v93 + 198) = *(_BYTE *)(v93 + 198) & 0xFD | (2 * (v95 & 1));
                *(_BYTE *)(v93 + 197) = v95 & 1;
                *(_DWORD *)(v93 + 192) = (_DWORD)v96;
LABEL_94:
                int8x16_t v48 = *(void *)(v93 + 24);
                if (!v48) {
                  return 0;
                }
                xmmword_18C465410(v48);
                return 0;
              }
            }

            else if (byte_1813C6343[v26] != byte_1813C6343[v27])
            {
              break;
            }

            ++v24;
          }
        }

        v18 -= 4;
        int v23 = (int)v17 <= 0;
        LODWORD(v17) = v17 - 1;
        if (v23) {
          goto LABEL_94;
        }
      }

      for (uint64_t j = (unsigned __int8 *)v94; ; ++j)
      {
        uint64_t v21 = *v19;
        uint64_t v22 = *j;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*v19)
          {
            if ((v17 & 0x80000000) == 0) {
              goto LABEL_89;
            }
            goto LABEL_94;
          }
        }

        else if (byte_1813C6343[v21] != byte_1813C6343[v22])
        {
          goto LABEL_41;
        }

        ++v19;
      }

    case 27:
      uint64_t v28 = *(_WORD *)(*(void *)v93 + 20LL);
      if ((v28 & 4) == 0) {
        return 0;
      }
      int v1 = 0;
      *(_WORD *)(*(void *)v93 + 20LL) = v28 & 0xFFDB | 0x20;
      return v1;
    case 28:
      return sub_1812CF36C(189645);
    case 29:
      int v1 = 0;
      byte_18C465389 = v93;
      return v1;
    case 30:
      int v1 = 0;
      *(void *)uint64_t v94 = 0LL;
      return v1;
    case 31:
      switch((int)v93)
      {
        case 0:
          int v1 = 0;
          *(_DWORD *)uint64_t v94 = dword_18C5504B0;
          break;
        case 1:
          int v1 = 0;
          dword_18C5504B0 = *(_DWORD *)v94;
          break;
        case 2:
          int v1 = 0;
          *(_DWORD *)uint64_t v94 = dword_18C5504B4;
          break;
        case 3:
          int v1 = 0;
          dword_18C5504B4 = *(_DWORD *)v94;
          break;
        default:
          return 0;
      }

      return v1;
    case 33:
      if (*(double *)&v93 <= 2000000000.0)
      {
        int v49 = (unint64_t)*(double *)&v93;
        if ((unint64_t)*(double *)&v93 >= 8)
        {
          uint64_t v52 = 40;
          if (v49 >= 0x100)
          {
            unsigned int v53 = (unint64_t)*(double *)&v93;
            do
            {
              v52 += 40;
              int v49 = v53 >> 4;
              int v23 = v53 > 0xFFF;
              v53 >>= 4;
            }

            while (v23);
          }

          if (v49 < 0x10)
          {
            LOBYTE(v54) = v49;
          }

          else
          {
            do
            {
              v52 += 10;
              uint64_t v54 = v49 >> 1;
              int v23 = v49 > 0x1F;
              v49 >>= 1;
            }

            while (v23);
          }
        }

        else
        {
          if (v49 < 2)
          {
LABEL_99:
            LOWORD(v29) = 0;
            unint64_t v50 = v95;
            uint64_t v51 = v96;
            *(_DWORD *)uint64_t v94 = 0;
            goto LABEL_143;
          }

          uint64_t v52 = 40;
          do
          {
            v52 -= 10;
            LOBYTE(v54) = 2 * v49;
            uint64_t v71 = v49 >= 4;
            v49 *= 2LL;
          }

          while (!v71);
        }

        LOWORD(v29) = v52 + word_1813CD842[v54 & 7] - 10;
      }

      else
      {
        uint64_t v29 = 10 * (v93 >> 52) - 10220;
      }

      unint64_t v50 = v95;
      uint64_t v51 = v96;
      *(_DWORD *)uint64_t v94 = (__int16)v29;
      if ((__int16)v29 >= 610)
      {
        int v72 = 0x7FFFFFFFFFFFFFFFLL;
        *uint64_t v95 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_154;
      }

  sub_18133CBD4((uint64_t *)v11, v9, v109, 0LL, *(unsigned int *)(v11 + 32), v98, v99, v100, v101);
  uint64_t v148 = *(void *)(v8 + 24);
  int v149 = -v166;
  if (*(_DWORD *)(v148 + 68) + *(_DWORD *)(v148 + 72) < 0) {
    sub_18131E420(v148, v8, v149);
  }
  else {
    *(_DWORD *)(*(void *)(v148 + 80) + 4LL * (int)v149) = *(_DWORD *)(v8 + 144);
  }
  uint64_t v150 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v150)
  {
    sub_18131044C(v8, 39LL, v109, v111, 0LL, v145, v146, v147);
  }

  else
  {
    *(_DWORD *)(v8 + 144) = v150 + 1;
    int v151 = *(void *)(v8 + 136) + 40LL * v150;
    *(_DWORD *)int v151 = 39;
    *(_DWORD *)(v151 + 4) = v109;
    *(_DWORD *)(v151 + 8) = v111;
    *(void *)(v151 + 12) = 0LL;
    *(void *)(v151 + 28) = 0LL;
    *(void *)(v151 + 20) = 0LL;
    *(_DWORD *)(v151 + 36) = 0;
  }

  uint64_t v152 = *(_DWORD *)(v8 + 144);
  if (*(_BYTE *)(*(void *)v8 + 103LL))
  {
    int v153 = &byte_18C550680;
    dword_18C550688 = *(_DWORD *)(v8 + 144);
  }

  else
  {
    uint64_t v154 = *(void *)(v8 + 136);
    *(_DWORD *)(v154 + 40LL * ((int)v111 - 1) + 8) = v152;
    int v153 = (char *)(v154 + 40LL * ((int)v111 + 1));
  }

  *((_DWORD *)v153 + 2) = v152;
  if ((_DWORD)v110)
  {
    uint64_t v155 = *(unsigned __int8 *)(v10 + 31);
    if (v155 <= 7)
    {
      *(_BYTE *)(v10 + 31) = v155 + 1;
      *(_DWORD *)(v10 + 4 * v155 + 224) = v110;
    }
  }

  if (v168)
  {
    uint64_t v156 = *(unsigned __int8 *)(v10 + 31);
    if (v156 <= 7)
    {
      *(_BYTE *)(v10 + 31) = v156 + 1;
      *(_DWORD *)(v10 + 4 * v156 + 224) = v168;
    }
  }

  if ((_DWORD)v13)
  {
    if ((_DWORD)v13 == 1)
    {
      if (v165)
      {
        unint64_t v157 = *(unsigned __int8 *)(v10 + 31);
        if (v157 <= 7)
        {
          *(_BYTE *)(v10 + 31) = v157 + 1;
          *(_DWORD *)(v10 + 4 * v157 + 224) = v165;
        }
      }

      if (v167)
      {
        int v158 = *(unsigned __int8 *)(v10 + 31);
        if (v158 <= 7)
        {
          *(_BYTE *)(v10 + 31) = v158 + 1;
          *(_DWORD *)(v10 + 4 * v158 + 224) = v167;
        }
      }
    }

    else if (*(_DWORD *)(v10 + 40) < (int)v13)
    {
      *(_DWORD *)(v10 + 40) = v13;
      *(_DWORD *)(v10 + 44) = v165;
    }
  }

  uint64_t result = (uint64_t)sub_18133A530(v11, 1LL, v149, v143, v144, v145, v146, v147);
LABEL_199:
  uint64_t v160 = *(unsigned int *)(v169 + 24);
  int v159 = *(unsigned int *)(v169 + 28);
  int v161 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v161) {
    return sub_18131044C(v8, 10LL, v159, v160, 0LL, a6, a7, a8);
  }
  *(_DWORD *)(v8 + 144) = v161 + 1;
  uint64_t v162 = *(void *)(v8 + 136) + 40LL * v161;
  *(_DWORD *)uint64_t v162 = 10;
  *(_DWORD *)(v162 + 4) = v159;
  *(_DWORD *)(v162 + 8) = v160;
  *(void *)(v162 + 12) = 0LL;
  *(void *)(v162 + 28) = 0LL;
  *(void *)(v162 + 20) = 0LL;
  *(_DWORD *)(v162 + 36) = 0;
  return result;
}

        int v123 = *(void *)(*(void *)v106 + 24LL);
        char v11 = v155;
        if (v123) {
          xmmword_18C465410(v123);
        }
      }
    }

    sqlite3_step(v106);
    uint64_t v124 = sqlite3_reset(v106);
    char v8 = v124;
    if (v39 && !(_DWORD)v124) {
      goto LABEL_177;
    }
  }

            uint64_t v83 = 101;
            goto LABEL_177;
          }

          uint64_t v83 = 122;
        }

        else
        {
          uint64_t v83 = 105;
        }
      }

      else
      {
        uint64_t v83 = 110;
      }

LABEL_595:
  unsigned int v313 = &qword_18C550660;
LABEL_596:
  if (v313[2])
  {
    __int128 v334 = 0LL;
LABEL_599:
    a4 = (v16[14] + 1);
    v16[14] = a4;
    int v328 = *(_DWORD *)(v18 + 144);
    HIDWORD(v337) = a4;
    if (*(_DWORD *)(v18 + 148) <= v328)
    {
      sub_18131044C(v18, 71LL, 0LL, a4, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v18 + 144) = v328 + 1;
      uint64_t v329 = *(void *)(v18 + 136) + 40LL * v328;
      *(void *)uint64_t v329 = 71LL;
      *(_DWORD *)(v329 + 8) = a4;
      *(void *)(v329 + 12) = 0LL;
      *(void *)(v329 + 28) = 0LL;
      *(void *)(v329 + 20) = 0LL;
      *(_DWORD *)(v329 + 36) = 0;
    }

    LODWORD(v337) = v16[17] - 1;
    v16[17] = v337;
    goto LABEL_175;
  }

  __int128 v334 = 0LL;
  if (*(void *)(v15 + 72)) {
    goto LABEL_599;
  }
LABEL_174:
  uint64_t v337 = 0LL;
LABEL_175:
  uint64_t v101 = 0LL;
  int v102 = 0;
  if (v352)
  {
    int v103 = 0;
    int v339 = 0;
    unsigned int v340 = 0;
    int v347 = 0;
    int v344 = 0;
    if (!v360)
    {
      int v104 = v16[17];
      int v105 = v104 - 1;
      v16[17] = v104 - 1;
      uint64_t v106 = v369;
      if (v369 == 11)
      {
        if (*(_BYTE *)(v15 + 62) == 11) {
          uint64_t v106 = 2LL;
        }
        else {
          uint64_t v106 = *(unsigned __int8 *)(v15 + 62);
        }
      }

      if (v33)
      {
        uint64_t v101 = v33;
        while (*(void *)v101 && *(void *)(v101 + 56))
        {
          uint64_t v101 = *(void *)(v101 + 32);
          if (!v101) {
            goto LABEL_186;
          }
        }

        if (*(_BYTE *)(v101 + 40)) {
          uint64_t v106 = 6LL;
        }
        else {
          uint64_t v106 = 4LL;
        }
        if (v101 == v33)
        {
          int v347 = 0;
          uint64_t v101 = v33;
          goto LABEL_218;
        }

LABEL_186:
        int v107 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v107)
        {
          int v347 = sub_18131044C(v18, 9LL, 0LL, 0LL, 0LL, a6, a7, a8);
        }

        else
        {
          int v347 = *(_DWORD *)(v18 + 144);
          *(_DWORD *)(v18 + 144) = v107 + 1;
          uint64_t v108 = *(void *)(v18 + 136) + 40LL * v107;
          *(_BYTE *)uint64_t v108 = 9;
          a9 = 0uLL;
          *(_OWORD *)(v108 + 1) = 0u;
          *(_OWORD *)(v108 + 17) = 0u;
          *(void *)(v108 + 32) = 0LL;
        }
      }

      else
      {
        int v347 = 0;
        uint64_t v101 = 0LL;
      }

LABEL_218:
      if ((_DWORD)v106 != 5 || v369 == 5)
      {
        unsigned int v340 = 0;
      }

      else
      {
        unsigned int v340 = 0;
        if (*(void *)(v15 + 16) && !v347)
        {
          int v123 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v123)
          {
            unsigned int v340 = sub_18131044C(v18, 9LL, 0LL, 0LL, 0LL, a6, a7, a8) + 1;
          }

          else
          {
            unsigned int v340 = v123 + 1;
            *(_DWORD *)(v18 + 144) = v123 + 1;
            uint64_t v124 = *(void *)(v18 + 136) + 40LL * v123;
            *(_BYTE *)uint64_t v124 = 9;
            a9 = 0uLL;
            *(_OWORD *)(v124 + 1) = 0u;
            *(_OWORD *)(v124 + 17) = 0u;
            *(void *)(v124 + 32) = 0LL;
          }
        }
      }

      int v121 = *(_DWORD *)(v18 + 144);
      if (v354)
      {
        if (*(_DWORD *)(v18 + 148) <= v121)
        {
          sub_18131044C(v18, 53LL, v14, (v104 - 1), v354, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v121 + 1;
          uint64_t v122 = *(void *)(v18 + 136) + 40LL * v121;
          *(_DWORD *)uint64_t v122 = 53;
          *(_DWORD *)(v122 + 4) = v14;
          *(_DWORD *)(v122 + 8) = v105;
          *(_DWORD *)(v122 + 12) = v354;
          *(void *)(v122 + 24) = 0LL;
          *(void *)(v122 + 32) = 0LL;
          *(void *)(v122 + 16) = 0LL;
        }

        int v121 = *(_DWORD *)(v18 + 144);
        if (v121 >= 1) {
          *(_WORD *)(*(void *)(v18 + 136) + 40LL * (v121 - 1) + 2) = 144;
        }
      }

      if (*(_DWORD *)(v18 + 148) <= v121)
      {
        sub_18131044C(v18, 31LL, v335, (v104 - 1), v14, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v18 + 144) = v121 + 1;
        uint64_t v125 = *(void *)(v18 + 136) + 40LL * v121;
        *(_DWORD *)uint64_t v125 = 31;
        *(_DWORD *)(v125 + 4) = v335;
        *(_DWORD *)(v125 + 8) = v105;
        *(_DWORD *)(v125 + 12) = v14;
        *(void *)(v125 + 24) = 0LL;
        *(void *)(v125 + 32) = 0LL;
        *(void *)(v125 + 16) = 0LL;
      }

      switch((int)v106)
      {
        case 1:
        case 2:
        case 3:
          goto LABEL_244;
        case 4:
          goto LABEL_246;
        case 5:
          if (HIDWORD(v337))
          {
            uint64_t v126 = (_DWORD *)*((void *)v16 + 21);
            if (!v126) {
              uint64_t v126 = v16;
            }
            *((_BYTE *)v126 + 32) = 1;
            sub_1812A9848((uint64_t)v16, v15, (uint64_t)v334, v335, v341, v14, 1LL, 0LL, a9, 5u, 1u, 0xFFFFFFFF);
            int v127 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v127)
            {
              int v129 = 1;
              sub_18131044C(v18, 86LL, HIDWORD(v337), 1LL, 0LL, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v127 + 1;
              uint64_t v128 = *(void *)(v18 + 136) + 40LL * v127;
              *(_DWORD *)uint64_t v128 = 86;
              *(_DWORD *)(v128 + 4) = HIDWORD(v337);
              int v129 = 1;
              *(_DWORD *)(v128 + 8) = 1;
              *(void *)(v128 + 12) = 0LL;
              *(void *)(v128 + 28) = 0LL;
              *(void *)(v128 + 20) = 0LL;
              *(_DWORD *)(v128 + 36) = 0;
            }

            int v339 = 1;
          }

          else
          {
            int v311 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v311)
            {
              sub_18131044C(v18, 130LL, v335, 64LL, 0LL, a6, a7, a8);
            }

            else
            {
              *(_DWORD *)(v18 + 144) = v311 + 1;
              uint64_t v312 = *(void *)(v18 + 136) + 40LL * v311;
              *(_DWORD *)uint64_t v312 = 130;
              *(_DWORD *)(v312 + 4) = v335;
              *(_DWORD *)(v312 + 8) = 64;
              *(void *)(v312 + 12) = 0LL;
              *(void *)(v312 + 28) = 0LL;
              *(void *)(v312 + 20) = 0LL;
              *(_DWORD *)(v312 + 36) = 0;
            }

            if (!*(_BYTE *)(*(void *)v18 + 103LL))
            {
              uint64_t v321 = *(void *)(v18 + 136) + 40LL * *(int *)(v18 + 144);
              *(_BYTE *)(v321 - 39) = -5;
              *(void *)(v321 - 24) = v15;
            }

            int v339 = 1;
            if (*(void *)(v15 + 16))
            {
              uint64_t v322 = (_DWORD *)*((void *)v16 + 21);
              if (!v322) {
                uint64_t v322 = v16;
              }
              *((_BYTE *)v322 + 32) = 1;
              sub_18133F7E0((uint64_t)v16, v15, v335, v341, 0LL, -1, a9);
              int v129 = 0;
            }

            else
            {
              int v129 = 0;
            }
          }

          goto LABEL_250;
        case 6:
          sub_18134473C((uint64_t)v16, v33, v15, 0LL, v335, a6, a7, a8);
LABEL_246:
          int v130 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v130)
          {
            sub_18131044C(v18, 9LL, 0LL, a11, 0LL, a6, a7, a8);
LABEL_249:
            int v129 = 0;
            int v339 = 0;
          }

          else
          {
            int v129 = 0;
            int v339 = 0;
            *(_DWORD *)(v18 + 144) = v130 + 1;
            uint64_t v131 = *(void *)(v18 + 136) + 40LL * v130;
            *(void *)uint64_t v131 = 9LL;
            *(_DWORD *)(v131 + 8) = a11;
            *(void *)(v131 + 12) = 0LL;
            *(void *)(v131 + 28) = 0LL;
            *(void *)(v131 + 20) = 0LL;
            *(_DWORD *)(v131 + 36) = 0;
          }

LABEL_250:
          uint64_t v132 = *(void *)(v18 + 24);
          int v133 = -v104;
          if (*(_DWORD *)(v132 + 68) + *(_DWORD *)(v132 + 72) < 0)
          {
            sub_18131E420(v132, v18, v133);
            int v102 = v129;
            if (!v33) {
              goto LABEL_257;
            }
          }

          else
          {
            *(_DWORD *)(*(void *)(v132 + 80) + 4LL * v133) = *(_DWORD *)(v18 + 144);
            int v102 = v129;
            if (!v33) {
              goto LABEL_257;
            }
          }

          if (v101 != v33)
          {
            int v134 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v134)
            {
              int v344 = sub_18131044C(v18, 9LL, 0LL, 0LL, 0LL, a6, a7, a8);
              int v103 = 0;
            }

            else
            {
              int v103 = 0;
              int v344 = *(_DWORD *)(v18 + 144);
              *(_DWORD *)(v18 + 144) = v134 + 1;
              uint64_t v135 = *(void *)(v18 + 136) + 40LL * v134;
              *(_BYTE *)uint64_t v135 = 9;
              a9 = 0uLL;
              *(_OWORD *)(v135 + 1) = 0u;
              *(_OWORD *)(v135 + 17) = 0u;
              *(void *)(v135 + 32) = 0LL;
            }

            break;
          }

LABEL_257:
          if (v340)
          {
            int v136 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v136)
            {
              int v103 = sub_18131044C(v18, 9LL, 0LL, 0LL, 0LL, a6, a7, a8);
            }

            else
            {
              int v137 = *(_DWORD *)(v18 + 144);
              *(_DWORD *)(v18 + 144) = v136 + 1;
              int v103 = v136;
              uint64_t v138 = *(void *)(v18 + 136) + 40LL * v137;
              *(_BYTE *)uint64_t v138 = 9;
              a9 = 0uLL;
              *(_OWORD *)(v138 + 1) = 0u;
              *(_OWORD *)(v138 + 17) = 0u;
              *(void *)(v138 + 32) = 0LL;
            }

            if (*(_BYTE *)(*(void *)v18 + 103LL)) {
              int32x4_t v139 = &byte_18C550680;
            }
            else {
              int32x4_t v139 = (char *)(*(void *)(v18 + 136) + 40LL * (int)(v340 - 1));
            }
            int v344 = 0;
            *((_DWORD *)v139 + 2) = *(_DWORD *)(v18 + 144);
          }

          else
          {
            int v103 = 0;
            unsigned int v340 = 0;
            int v344 = 0;
          }

          break;
        default:
          uint64_t v106 = 2LL;
LABEL_244:
          sub_181344614((uint64_t *)v16, v106, v15, a4, a5, a6, a7, a8);
          goto LABEL_249;
      }
    }
  }

  else
  {
    int v103 = 0;
    int v339 = 0;
    unsigned int v340 = 0;
    int v347 = 0;
    int v344 = 0;
  }

  int v336 = v102;
  int v348 = v90;
  if ((v353 & 1) != 0)
  {
    LODWORD(v140) = 0;
    unsigned int v90 = v375;
  }

  else
  {
    LODWORD(v140) = *((_DWORD *)v90 + 2);
  }

  int v332 = v103;
  uint64_t v141 = *v90;
  if (!v141)
  {
    unsigned int v345 = v337;
LABEL_516:
    int v287 = v339;
    uint64_t v286 = v340;
    if (v340) {
      goto LABEL_517;
    }
    goto LABEL_524;
  }

  int v362 = 0;
  unsigned int v367 = v14 + 1;
  int v372 = ~(_DWORD)v14;
  unsigned int v330 = v16 + 11;
  if (v354) {
    BOOL v142 = v334 == 0LL;
  }
  else {
    BOOL v142 = 1;
  }
  int v143 = !v142;
  int v331 = v143;
  unsigned int v333 = v347 + 1;
  int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
  int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
  int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
  v147.i64[0] = 0x1000100010001LL;
  v147.i64[1] = 0x1000100010001LL;
  unsigned int v345 = v337;
  uint64_t v356 = v33;
  while (1)
  {
    while (1)
    {
      uint64_t v368 = (int)v140;
      if (v33)
      {
        uint64_t v101 = v33;
        do
        {
          if (!*(void *)v101) {
            break;
          }
          if (*(void *)(v101 + 56) == v141) {
            break;
          }
          uint64_t v101 = *(void *)(v101 + 32);
        }

        while (v101);
        if (v347 && v101 == v33)
        {
          uint64_t v148 = &byte_18C550680;
          if (!*(_BYTE *)(*(void *)v18 + 103LL)) {
            uint64_t v148 = (char *)(*(void *)(v18 + 136) + 40LL * v347);
          }
          *((_DWORD *)v148 + 2) = *(_DWORD *)(v18 + 144);
          uint64_t v101 = v33;
        }
      }

      int v149 = v16[17];
      unsigned int v365 = v149 - 1;
      v16[17] = v149 - 1;
      if (!v357)
      {
        sub_18131FC08((void **)v18, v15, v367, a4, a5, a6, a7, a8);
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
        int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
        int v357 = 1;
        if (!*(void *)(v141 + 72)) {
          goto LABEL_305;
        }
LABEL_295:
        uint64_t v150 = *(unsigned int *)(v363 + 4 * v368);
        int v151 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v151)
        {
          sub_18131044C(v18, 75LL, 0LL, v150, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v151 + 1;
          uint64_t v152 = *(void *)(v18 + 136) + 40LL * v151;
          *(void *)uint64_t v152 = 75LL;
          *(_DWORD *)(v152 + 8) = v150;
          *(void *)(v152 + 12) = 0LL;
          *(void *)(v152 + 28) = 0LL;
          *(void *)(v152 + 20) = 0LL;
          *(_DWORD *)(v152 + 36) = 0;
        }

        v16[16] = v372;
        int v153 = *(unsigned __int8 **)(v141 + 72);
        uint64_t v154 = *(void *)v16;
        if (v153) {
          uint64_t v155 = sub_18129C928(*(void *)v16, v153, 0LL, 0LL);
        }
        else {
          uint64_t v155 = 0LL;
        }
        int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
        int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        if (*(_BYTE *)(v154 + 103))
        {
          if (!v155)
          {
LABEL_304:
            v16[16] = 0;
            goto LABEL_305;
          }
        }

        else
        {
          sub_1812B0714((uint64_t)v16, (unsigned __int8 **)v155, v365, 16LL, a5, a6, a7, a8);
          v147.i64[0] = 0x1000100010001LL;
          v147.i64[1] = 0x1000100010001LL;
          int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
          int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
          int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
          if (!v155) {
            goto LABEL_304;
          }
        }

        sub_181309110((void *)v154, (unsigned __int8 *)v155);
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
        int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
        goto LABEL_304;
      }

      if (*(void *)(v141 + 72)) {
        goto LABEL_295;
      }
LABEL_305:
      a5 = *(unsigned int *)(v363 + 4 * v368);
      uint64_t v156 = (a5 + 1);
      int v355 = v149;
      unsigned int v350 = *(_DWORD *)(v363 + 4 * v368);
      if (*(_WORD *)(v141 + 96))
      {
        unint64_t v157 = 0LL;
        while (1)
        {
          int v158 = *(unsigned __int16 *)(*(void *)(v141 + 8) + 2 * v157);
          if (v158 == 0xFFFF) {
            goto LABEL_317;
          }
          if (v158 == 65534)
          {
            v16[16] = v372;
            int v159 = *(unsigned __int8 **)(*(void *)(v141 + 80) + 24 * v157 + 8);
            uint64_t v160 = *(void *)v16;
            if (v159)
            {
              int v161 = sub_18129C928(*(void *)v16, v159, 0LL, 0LL);
              v147.i64[0] = 0x1000100010001LL;
              v147.i64[1] = 0x1000100010001LL;
              int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
              int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
              int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
              uint64_t v162 = (unsigned __int8 *)v161;
              if (!*(_BYTE *)(v160 + 103)) {
                goto LABEL_313;
              }
            }

            else
            {
              uint64_t v162 = 0LL;
              if (!*(_BYTE *)(v160 + 103))
              {
LABEL_313:
                sub_181319C00((uint64_t)v16, v162, (v156 + v157));
                v147.i64[0] = 0x1000100010001LL;
                v147.i64[1] = 0x1000100010001LL;
                int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
                int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
                int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
              }
            }

            if (v162)
            {
              sub_181309110((void *)v160, v162);
              v147.i64[0] = 0x1000100010001LL;
              v147.i64[1] = 0x1000100010001LL;
              int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
              int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
              int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
            }

            v16[16] = 0;
            goto LABEL_308;
          }

          __int16 v163 = *(_WORD *)(*(void *)(v141 + 8) + 2 * v157);
          if (*(unsigned __int16 *)(v15 + 52) == (unsigned __int16)v158)
          {
LABEL_317:
            uint64_t v164 = (v156 + v157);
            int v165 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v165)
            {
              uint64_t v167 = v18;
              uint64_t v168 = 82LL;
              uint64_t v169 = v14;
LABEL_342:
              sub_18131044C(v167, v168, v169, v164, 0LL, a6, a7, a8);
              v147.i64[0] = 0x1000100010001LL;
              v147.i64[1] = 0x1000100010001LL;
              int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
              int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
              int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
              goto LABEL_308;
            }

            *(_DWORD *)(v18 + 144) = v165 + 1;
            uint64_t v166 = *(void *)(v18 + 136) + 40LL * v165;
            *(_DWORD *)uint64_t v166 = 82;
            *(_DWORD *)(v166 + 4) = v14;
          }

          else
          {
            if (((__int16)v158 & 0x80000000) == 0 && (*(_DWORD *)(v15 + 48) & 0x20) != 0)
            {
              uint64_t v170 = *(void *)(v15 + 8);
              if ((_WORD)v158)
              {
                unint64_t v171 = (__int16)v158 & 0xFFFFFFFFLL;
                if (v171 >= 0x11)
                {
                  uint64_t v174 = *(_WORD *)(*(void *)(v141 + 8) + 2 * v157) & 0xF;
                  if ((*(_WORD *)(*(void *)(v141 + 8) + 2 * v157) & 0xF) == 0) {
                    uint64_t v174 = 16LL;
                  }
                  unint64_t v172 = v171 - v174;
                  uint64_t v175 = v170 + 142;
                  int16x8_t v176 = 0uLL;
                  unint64_t v177 = v172;
                  int16x8_t v178 = 0uLL;
                  do
                  {
                    int8x16_t v179 = vqtbl2q_s8(*(int8x16x2_t *)(v175 - 64), v145);
                    v179.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v175 - 32), v144).i32[3];
                    v180.i32[0] = vzip1q_s16(*(int16x8_t *)(v175 - 128), *(int16x8_t *)(v175 - 112)).u32[0];
                    v180.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v175 - 96), v146).i32[1];
                    v180.i64[1] = v179.i64[1];
                    uint16x8_t v181 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v175 + 96), v144);
                    int8x16x2_t v380 = *(int8x16x2_t *)(v175 + 32);
                    int8x16_t v182 = vqtbl2q_s8(*(int8x16x2_t *)(v175 + 64), v145);
                    int16x8_t v184 = *(int16x8_t *)v175;
                    int16x8_t v183 = *(int16x8_t *)(v175 + 16);
                    v175 += 256LL;
                    v182.i32[3] = v181.i32[3];
                    v181.i32[0] = vzip1q_s16(v184, v183).u32[0];
                    v181.i32[1] = vqtbl2q_s8(v380, v146).i32[1];
                    v181.i64[1] = v182.i64[1];
                    int16x8_t v176 = vaddq_s16((int16x8_t)vbicq_s8(v147, (int8x16_t)vshrq_n_u16(v180, 5uLL)), v176);
                    int16x8_t v178 = vaddq_s16((int16x8_t)vbicq_s8(v147, (int8x16_t)vshrq_n_u16(v181, 5uLL)), v178);
                    v177 -= 16LL;
                  }

                  while (v177);
                  a9 = vaddq_s16(v178, v176);
                  a9.i16[0] = vaddvq_s16(a9);
                  unsigned __int16 v173 = a9.i16[0];
                }

                else
                {
                  unint64_t v172 = 0LL;
                  unsigned __int16 v173 = 0;
                }

                unint64_t v185 = v171 - v172;
                uint64_t v186 = (unsigned __int16 *)(v170 + 16 * v172 + 14);
                do
                {
                  unsigned int v187 = *v186;
                  v186 += 8;
                  v173 += ((v187 >> 5) & 1) == 0;
                  --v185;
                }

                while (v185);
              }

              else
              {
                unint64_t v171 = 0LL;
                unsigned __int16 v173 = 0;
              }

              if ((*(_WORD *)(v170 + 16 * v171 + 14) & 0x20) != 0) {
                __int16 v163 = v163 - v173 + *(_WORD *)(v15 + 56);
              }
              else {
                __int16 v163 = v173;
              }
            }

            uint64_t v169 = v367 + v163;
            uint64_t v164 = (v156 + v157);
            int v188 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v188)
            {
              uint64_t v167 = v18;
              uint64_t v168 = 81LL;
              goto LABEL_342;
            }

            *(_DWORD *)(v18 + 144) = v188 + 1;
            uint64_t v166 = *(void *)(v18 + 136) + 40LL * v188;
            *(_DWORD *)uint64_t v166 = 81;
            *(_DWORD *)(v166 + 4) = v169;
          }

          *(_DWORD *)(v166 + 8) = v164;
          *(void *)(v166 + 12) = 0LL;
          *(void *)(v166 + 28) = 0LL;
          *(void *)(v166 + 20) = 0LL;
          *(_DWORD *)(v166 + 36) = 0;
LABEL_308:
          ++v157;
          a4 = *(unsigned __int16 *)(v141 + 96);
          if (v157 >= a4)
          {
            a5 = *(unsigned int *)(v363 + 4 * v368);
            int v149 = v355;
            goto LABEL_345;
          }
        }
      }

      a4 = 0LL;
LABEL_345:
      int v189 = *(_DWORD *)(v18 + 144);
      if (*(_DWORD *)(v18 + 148) <= v189)
      {
        sub_18131044C(v18, 97LL, v156, a4, a5, a6, a7, a8);
        v147.i64[0] = 0x1000100010001LL;
        v147.i64[1] = 0x1000100010001LL;
        int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
        int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
        int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
        if (!v354) {
          goto LABEL_351;
        }
      }

      else
      {
        *(_DWORD *)(v18 + 144) = v189 + 1;
        uint64_t v190 = *(void *)(v18 + 136) + 40LL * v189;
        *(_DWORD *)uint64_t v190 = 97;
        *(_DWORD *)(v190 + 4) = v156;
        *(_DWORD *)(v190 + 8) = a4;
        *(_DWORD *)(v190 + 12) = a5;
        *(void *)(v190 + 24) = 0LL;
        *(void *)(v190 + 32) = 0LL;
        *(void *)(v190 + 16) = 0LL;
        if (!v354) {
          goto LABEL_351;
        }
      }

      if (!v352 && v360 == v141)
      {
LABEL_362:
        uint64_t v195 = *(void *)(v18 + 24);
        int v196 = -v149;
        if (*(_DWORD *)(v195 + 68) + *(_DWORD *)(v195 + 72) < 0)
        {
          sub_18131E420(v195, v18, v196);
          v147.i64[0] = 0x1000100010001LL;
          v147.i64[1] = 0x1000100010001LL;
          int8x16_t v146 = (int8x16_t)xmmword_1813CDDD0;
          int8x16_t v145 = (int8x16_t)xmmword_1813CDDC0;
          int8x16_t v144 = (int8x16_t)xmmword_1813CDDB0;
        }

        else
        {
          *(_DWORD *)(*(void *)(v195 + 80) + 4LL * v196) = *(_DWORD *)(v18 + 144);
        }

        uint64_t v33 = v356;
LABEL_366:
        int v197 = v362;
        goto LABEL_367;
      }

LABEL_351:
      int v191 = *(unsigned __int8 *)(v141 + 98);
      if (!*(_BYTE *)(v141 + 98)) {
        goto LABEL_362;
      }
      if (v191 == 11) {
        int v191 = 2;
      }
      if (v369 != 11) {
        int v191 = v369;
      }
      if (v101)
      {
        if (*(_BYTE *)(v101 + 40)) {
          int v191 = 6;
        }
        else {
          int v191 = 4;
        }
      }

      unsigned int v346 = v191;
      unsigned int v192 = v368 + v341;
      a6 = *(unsigned __int16 *)(v141 + 94);
      int v193 = *(_DWORD *)(v18 + 144);
      if (*(_DWORD *)(v18 + 148) <= v193)
      {
        int v193 = sub_181310690(v18, 27LL, v368 + v341, v365, v156, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v18 + 144) = v193 + 1;
        uint64_t v194 = *(void *)(v18 + 136) + 40LL * v193;
        *(_DWORD *)uint64_t v194 = 64795;
        *(_DWORD *)(v194 + 4) = v192;
        *(_DWORD *)(v194 + 8) = v365;
        *(_DWORD *)(v194 + 12) = v156;
        *(_DWORD *)(v194 + 16) = a6;
        *(void *)(v194 + 24) = 0LL;
        *(void *)(v194 + 32) = 0LL;
      }

      unsigned int v199 = v156;
      if (v360 != v141)
      {
        if (v343 == 1)
        {
          if (*((_BYTE *)v16 + 31))
          {
            unsigned __int8 v200 = *((_BYTE *)v16 + 31) - 1;
            *((_BYTE *)v16 + 31) = v200;
            unsigned int v199 = v16[v200 + 56];
          }

          else
          {
            unsigned int v199 = v16[14] + 1;
            v16[14] = v199;
          }
        }

        else
        {
          int v201 = v16[10];
          BOOL v39 = __OFSUB__(v201, v343);
          int v202 = v201 - v343;
          if (v202 < 0 != v39)
          {
            int v203 = v16[14];
            unsigned int v199 = v203 + 1;
            v16[14] = v203 + v343;
          }

          else
          {
            unsigned int v199 = v16[11];
            v16[10] = v202;
            v16[11] = v199 + v343;
          }
        }
      }

      unsigned int v342 = v368 + v341;
      int v338 = v193;
      unsigned int v349 = v199;
      uint64_t v204 = v360;
      if (v354 || v346 == 5)
      {
        if ((*(_BYTE *)(v15 + 48) & 0x80) != 0)
        {
          if (v360 != v141 && *(_WORD *)(v360 + 94))
          {
            unint64_t v209 = 0LL;
            do
            {
              if (*(_WORD *)(v141 + 96))
              {
                uint64_t v211 = 0LL;
                while (*(unsigned __int16 *)(*(void *)(v141 + 8) + 2 * v211) != *(unsigned __int16 *)(*(void *)(v360 + 8) + 2 * v209))
                {
                }
              }

              else
              {
LABEL_404:
                LOWORD(v211) = -1;
              }

              a4 = (__int16)v211;
              a5 = v349 + v209;
              int v212 = *(_DWORD *)(v18 + 144);
              if (*(_DWORD *)(v18 + 148) > v212)
              {
                *(_DWORD *)(v18 + 144) = v212 + 1;
                uint64_t v210 = *(void *)(v18 + 136) + 40LL * v212;
                *(_DWORD *)uint64_t v210 = 94;
                *(_DWORD *)(v210 + 4) = v192;
                *(_DWORD *)(v210 + 8) = a4;
                *(_DWORD *)(v210 + 12) = a5;
                *(void *)(v210 + 24) = 0LL;
                *(void *)(v210 + 32) = 0LL;
                *(void *)(v210 + 16) = 0LL;
              }

              else
              {
                sub_18131044C(v18, 94LL, v192, a4, a5, a6, a7, a8);
              }

              ++v209;
            }

            while (v209 < *(unsigned __int16 *)(v360 + 94));
          }

          if (v354)
          {
            int v213 = v349;
            if ((*(_WORD *)(v141 + 99) & 3) == 2) {
              int v213 = v156;
            }
            int v351 = v213;
            if (*(_WORD *)(v360 + 94))
            {
              unint64_t v214 = 0LL;
              LODWORD(v215) = *(_DWORD *)(v18 + 144) + *(unsigned __int16 *)(v360 + 94);
              LODWORD(v216) = 52;
              do
              {
                uint64_t v217 = *(char **)(*(void *)(v204 + 64) + 8 * v214);
                uint64_t v218 = *(unsigned __int8 *)(*(void *)a1 + 100LL);
                int v219 = *(unsigned __int8 *)(*(void *)a1 + 197LL);
                uint64_t v220 = sub_18130D3EC(*(void *)a1, *(unsigned __int8 *)(*(void *)a1 + 100LL), v217, v219);
                uint64_t v224 = (uint64_t)v220;
                if (!v219 && (!v220 || !v220[3])) {
                  uint64_t v224 = sub_181311FC8(a1, v218, (uint64_t)v220, v217, v221, (uint64_t)v220, v222, v223);
                }
                uint64_t v15 = v359;
                uint64_t v204 = v360;
                uint64_t v14 = v370;
                uint64_t v225 = *(__int16 *)(*(void *)(v360 + 8) + 2 * v214);
                else {
                  uint64_t v215 = v215;
                }
                else {
                  uint64_t v216 = v216;
                }
                v226.i64[0] = 0x1000100010001LL;
                v226.i64[1] = 0x1000100010001LL;
                if ((v225 & 0x8000000000000000LL) == 0 && (*(_DWORD *)(v359 + 48) & 0x20) != 0)
                {
                  uint64_t v227 = *(void *)(v359 + 8);
                  if (*(_WORD *)(*(void *)(v360 + 8) + 2 * v214))
                  {
                    uint64_t v228 = v225;
                    if (v225 >= 0x11uLL)
                    {
                      uint64_t v231 = v225 & 0xF;
                      if ((v225 & 0xF) == 0) {
                        uint64_t v231 = 16LL;
                      }
                      uint64_t v229 = v225 - v231;
                      uint64_t v232 = v227 + 142;
                      int16x8_t v233 = 0uLL;
                      uint64_t v234 = v229;
                      int16x8_t v235 = 0uLL;
                      do
                      {
                        int8x16_t v236 = vqtbl2q_s8(*(int8x16x2_t *)(v232 - 64), (int8x16_t)xmmword_1813CDDC0);
                        v236.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v232 - 32), (int8x16_t)xmmword_1813CDDB0).i32[3];
                        v237.i32[0] = vzip1q_s16(*(int16x8_t *)(v232 - 128), *(int16x8_t *)(v232 - 112)).u32[0];
                        v237.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v232 - 96), (int8x16_t)xmmword_1813CDDD0).i32[1];
                        v237.i64[1] = v236.i64[1];
                        uint16x8_t v238 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v232 + 96), (int8x16_t)xmmword_1813CDDB0);
                        int8x16x2_t v381 = *(int8x16x2_t *)(v232 + 32);
                        int8x16_t v239 = vqtbl2q_s8(*(int8x16x2_t *)(v232 + 64), (int8x16_t)xmmword_1813CDDC0);
                        int16x8_t v241 = *(int16x8_t *)v232;
                        int16x8_t v240 = *(int16x8_t *)(v232 + 16);
                        v232 += 256LL;
                        v239.i32[3] = v238.i32[3];
                        v238.i32[0] = vzip1q_s16(v241, v240).u32[0];
                        v238.i32[1] = vqtbl2q_s8(v381, (int8x16_t)xmmword_1813CDDD0).i32[1];
                        v238.i64[1] = v239.i64[1];
                        int16x8_t v233 = vaddq_s16((int16x8_t)vbicq_s8(v226, (int8x16_t)vshrq_n_u16(v237, 5uLL)), v233);
                        int16x8_t v235 = vaddq_s16((int16x8_t)vbicq_s8(v226, (int8x16_t)vshrq_n_u16(v238, 5uLL)), v235);
                        v234 -= 16LL;
                      }

                      while (v234);
                      __int16 v230 = vaddvq_s16(vaddq_s16(v235, v233));
                    }

                    else
                    {
                      uint64_t v229 = 0LL;
                      __int16 v230 = 0;
                    }

                    uint64_t v242 = v225 - v229;
                    uint64_t v243 = (unsigned __int16 *)(v227 + 16 * v229 + 14);
                    do
                    {
                      unsigned int v244 = *v243;
                      v243 += 8;
                      v230 += ((v244 >> 5) & 1) == 0;
                      --v242;
                    }

                    while (v242);
                  }

                  else
                  {
                    uint64_t v228 = 0LL;
                    __int16 v230 = 0;
                  }

                  if ((*(_WORD *)(v227 + 16 * v228 + 14) & 0x20) != 0) {
                    LOWORD(v225) = v225 - v230 + *(_WORD *)(v359 + 56);
                  }
                  else {
                    LOWORD(v225) = v230;
                  }
                }

                sub_1812B9B68( (uint64_t *)v18,  v216,  v354 + 1 + (__int16)v225,  v215,  (v351 + v214),  v224,  4294967294LL,  v223);
                int v245 = *(_DWORD *)(v18 + 144);
                BOOL v39 = __OFSUB__(v245, 1);
                int v246 = v245 - 1;
                if (v246 < 0 == v39) {
                  *(_WORD *)(*(void *)(v18 + 136) + 40LL * v246 + 2) = 144;
                }
                ++v214;
              }

              while (v214 < *(unsigned __int16 *)(v360 + 94));
            }
          }
        }

        else
        {
          int v205 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v205)
          {
            sub_18131044C(v18, 142LL, v192, v199, 0LL, a6, a7, a8);
            if (!v354) {
              goto LABEL_384;
            }
          }

          else
          {
            *(_DWORD *)(v18 + 144) = v205 + 1;
            uint64_t v206 = *(void *)(v18 + 136) + 40LL * v205;
            *(_DWORD *)uint64_t v206 = 142;
            *(_DWORD *)(v206 + 4) = v192;
            *(_DWORD *)(v206 + 8) = v199;
            *(void *)(v206 + 12) = 0LL;
            *(void *)(v206 + 28) = 0LL;
            *(void *)(v206 + 20) = 0LL;
            *(_DWORD *)(v206 + 36) = 0;
            if (!v354) {
              goto LABEL_384;
            }
          }

          int v261 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v261)
          {
            sub_18131044C(v18, 53LL, v349, v365, v354, a6, a7, a8);
          }

          else
          {
            *(_DWORD *)(v18 + 144) = v261 + 1;
            uint64_t v262 = *(void *)(v18 + 136) + 40LL * v261;
            *(_DWORD *)uint64_t v262 = 53;
            *(_DWORD *)(v262 + 4) = v349;
            *(_DWORD *)(v262 + 8) = v365;
            *(_DWORD *)(v262 + 12) = v354;
            *(void *)(v262 + 24) = 0LL;
            *(void *)(v262 + 32) = 0LL;
            *(void *)(v262 + 16) = 0LL;
          }

          int v265 = *(_DWORD *)(v18 + 144);
          BOOL v39 = __OFSUB__(v265, 1);
          int v266 = v265 - 1;
          if (v266 < 0 == v39) {
            *(_WORD *)(*(void *)(v18 + 136) + 40LL * v266 + 2) = 144;
          }
        }
      }

              if (v137)
              {
                uint64_t v216 = v366;
                uint64_t v217 = HIDWORD(v339);
                sub_181279C3C(v366, 94LL, v334, v362, HIDWORD(v339), v132, v133, v134);
              }

              else
              {
                uint64_t v217 = HIDWORD(v339);
                sub_181319C00((uint64_t)v17, v363, HIDWORD(v339));
                uint64_t v216 = v366;
              }

              sub_181319BA8(v216, 13LL, v217, v218, v219, v220, v221, v222);
              uint64_t v154 = v369;
              goto LABEL_355;
            }
          }

          else
          {
            sub_1813103F4(v366, 134LL, v334, v327, v159, v132, v133, v134);
            sub_1812DC7B4(v366, 28LL, v361, v189, v327, 0LL, v214, v215);
          }
        }

        int v137 = v371;
        uint64_t v154 = v369;
        if (!v373) {
          goto LABEL_355;
        }
        goto LABEL_351;
      }

      unsigned int v199 = *(void *)(v196 + 32);
      if (!v199) {
        unsigned int v199 = sub_181338578(v352, v375);
      }
      sub_1812B9B68((uint64_t *)v366, 97LL, v323, v195, v327, v199, v195, v134);
      sub_1812DC7B4(v366, 138LL, v334, v327, v323, v195, v200, v201);
      unint64_t v157 = v323;
      int v348 = 0;
      uint64_t v174 = 0;
      unsigned int v325 = 0LL;
      uint64_t v155 = v360;
      int8x16_t v145 = v367;
      int v137 = v371;
      int v158 = v373;
      int v159 = v343;
      uint64_t v154 = v369;
LABEL_266:
      int16x8_t v176 = v370;
      goto LABEL_267;
    }

    if (v136) {
      int v153 = *(_WORD *)(v136 + 94);
    }
    else {
      int v153 = 0;
    }
    uint64_t v155 = v360;
    uint64_t v156 = *((_DWORD *)v17 + 14);
    unint64_t v157 = (v156 + 1);
    uint64_t v152 = (v156 + v153);
    uint64_t v327 = v137 + v152 + 1;
    *((_DWORD *)v17 + 14) = v327;
    unsigned int v325 = v153;
    if (v355)
    {
      __int128 v334 = 0;
      if (!v137)
      {
        int v323 = v156 + 1;
        uint64_t v319 = 0;
        int8x16_t v147 = __len;
        uint64_t v154 = v369;
        goto LABEL_251;
      }

      unsigned int v330 = v153;
      int v158 = v373;
      int v159 = v343;
      uint64_t v154 = v369;
    }

    else
    {
      unsigned int v330 = v153;
      uint64_t v160 = v137 + v153;
      if (v367 == 2) {
        int v161 = *((__int16 *)v24 + 27);
      }
      else {
        int v161 = 0;
      }
      int8x16_t v147 = __len;
      int v347 = v160 + v161;
      uint64_t v168 = *((unsigned int *)v17 + 13);
      *((_DWORD *)v17 + 13) = v168 + 1;
      __int128 v334 = v168;
      int v323 = v157;
      if (v136)
      {
        sub_181279C3C(v366, 75LL, 0LL, v157, v152, v132, v133, v134);
        uint64_t v319 = sub_1813103F4(v366, 118LL, v168, v347, v169, v170, v171, v172);
        unsigned __int16 v173 = sub_181319FB0(v17, v136);
        if (v173)
        {
          *(_WORD *)(v173 + 8) = v347;
          sub_18131A104((void *)v366, v173, -8);
        }

        int8x16_t v147 = __len;
      }

      else
      {
        uint64_t v319 = sub_1813103F4(v366, 118LL, v168, v347, v152, v132, v133, v134);
      }

      int8x16_t v146 = v329;
      if (!v371)
      {
        unsigned int v346 = v377;
        uint64_t v154 = v369;
        int v153 = v330;
LABEL_308:
        unsigned int v192 = 4LL;
        if (!v372 && !*((_BYTE *)v17 + 30) && !v342 && !v341 && !v346 && (!v359 || (v359[6] & 0x40) == 0)) {
          unsigned int v192 = 12LL;
        }
        int v331 = v153;
        uint64_t v167 = sub_18128A51C((uint64_t)v17, (int *)v364, (uint64_t)v359, 0LL, 0LL, 0LL, v192, v345);
        if (!v167) {
          goto LABEL_229;
        }
        uint64_t v164 = *(void *)(v167 + 40);
        uint64_t v321 = HIDWORD(v164);
        int v193 = *(unsigned __int8 *)(v167 + 66);
        int v328 = *(_BYTE *)(v167 + 68) & 1;
        if (v193 != 1)
        {
          uint64_t v194 = (uint64_t *)v17[21];
          if (!v194) {
            uint64_t v194 = v17;
          }
          *((_BYTE *)v194 + 32) = 1;
          if (v193 == 2)
          {
            int v336 = 2;
            if ((v164 & 0x8000000000000000LL) != 0 || v360 == HIDWORD(v164)) {
              goto LABEL_325;
            }
            int v193 = 2 * (__b[HIDWORD(v164) - v343] == 0);
          }
        }

        int v336 = v193;
LABEL_325:
        uint64_t v166 = v331;
        goto LABEL_326;
      }

      sub_181343BC4(v17, v334, v375, v365, v364, v359, v358, v8, v318);
      int v137 = v371;
      int8x16_t v145 = v367;
      uint64_t v155 = v360;
      if (v367 == 2) {
        uint64_t v155 = v334;
      }
      int v158 = v373;
      int v159 = v343;
      uint64_t v154 = v369;
      unint64_t v157 = v323;
    }

    uint64_t v174 = 0;
    uint64_t v175 = (uint64_t *)v17[21];
    if (!v175) {
      uint64_t v175 = v17;
    }
    int v348 = 1;
    *((_BYTE *)v175 + 32) = 1;
    LODWORD(v321) = (_DWORD)v175;
    uint64_t v322 = 0LL;
    uint64_t v320 = (int)v175;
    uint64_t v327 = v157;
    int v328 = 1;
    goto LABEL_266;
  }

  unsigned __int16 v57 = 0LL;
  uint64_t v363 = 0LL;
  uint64_t v58 = 0LL;
  char v353 = 0;
  int v362 = -1;
  uint64_t v59 = v375;
  int16x8_t v60 = v371;
  while (2)
  {
    unsigned int v90 = &a3[6 * v57];
    uint64_t v93 = (_BYTE *)*((void *)v90 + 2);
    uint64_t v92 = v90 + 4;
    int v91 = v93;
    if (v93)
    {
      uint64_t v94 = *v91;
      if (*v91)
      {
        uint64_t v95 = 0;
        int v96 = v91 + 1;
        do
        {
          v95 += byte_1813C6343[v94];
          unsigned int v97 = *v96++;
          uint64_t v94 = v97;
        }

        while (v97);
        int v98 = v92 - 1;
        if (!v60)
        {
LABEL_146:
          int v99 = v58;
          uint64_t v100 = v98;
          uint64_t v101 = sub_1813205D4((uint64_t)v379, *v98, (uint64_t)v98, (uint64_t)v52, v53, v54, v55, v56);
          int v98 = v100;
          uint64_t v17 = v354;
          uint64_t v58 = v99;
          int16x8_t v60 = v371;
          uint64_t v59 = v375;
          if (v101)
          {
            uint64_t v13 = (void *)v352;
            uint64_t v10 = v359;
            a3 = (unsigned int *)v365;
            goto LABEL_475;
          }
        }
      }

      else
      {
        uint64_t v95 = 0;
        int v98 = v92 - 1;
        if (!v60) {
          goto LABEL_146;
        }
      }
    }

    else
    {
      uint64_t v95 = 0;
      int v98 = v92 - 1;
      if (!v60) {
        goto LABEL_146;
      }
    }

    if (*((__int16 *)v24 + 27) >= 1)
    {
      int v102 = 0LL;
      int v103 = v24[1];
      do
      {
        if (*(unsigned __int8 *)(v103 + 16 * v102 + 11) == v95)
        {
          for (uint64_t k = 0LL; ; ++k)
          {
            int v105 = *(unsigned __int8 *)(*(void *)(v103 + 16 * v102) + k);
            uint64_t v106 = *(unsigned __int8 *)(*v92 + k);
            if ((_DWORD)v105 == (_DWORD)v106)
            {
              if (!*(_BYTE *)(*(void *)(v103 + 16 * v102) + k))
              {
                if ((_DWORD)v102 == *((__int16 *)v24 + 26))
                {
                  uint64_t v363 = (unsigned __int8 *)*v98;
                  uint64_t v58 = 1LL;
                  int v362 = v57;
                  a3 = (unsigned int *)v365;
                }

                else
                {
                  uint64_t v119 = *(_WORD *)(v103 + 16 * v102 + 14);
                  a3 = (unsigned int *)v365;
                  if (v59 && (v119 & 1) != 0)
                  {
                    char v353 = 1;
                  }

                  else if ((v119 & 0x60) != 0)
                  {
                    sub_1812DC47C( (uint64_t)v17,  "cannot UPDATE generated column %s",  (uint64_t)v98,  (uint64_t)v52,  v53,  v54,  v55,  v56,  *(void *)(v103 + 16 * v102));
                    goto LABEL_189;
                  }
                }

                *((_DWORD *)v49 + v102) = v57;
                uint64_t v52 = *(const char **)(v103 + 16LL * v102);
                goto LABEL_180;
              }
            }

            else if (byte_1813C6343[v105] != byte_1813C6343[v106])
            {
              break;
            }
          }
        }

        ++v102;
      }

      while (v102 != *((unsigned __int16 *)v24 + 27));
    }

    a3 = (unsigned int *)v365;
    if (v59)
    {
LABEL_188:
      sub_1812DC47C((uint64_t)v17, "no such column: %s", (uint64_t)v98, (uint64_t)v52, v53, v54, v55, v56, *v92);
      *((_BYTE *)v17 + 29) = 1;
      goto LABEL_189;
    }

    int v107 = "_ROWID_";
    for (uint64_t m = (_BYTE *)*v92; ; ++m)
    {
      int v109 = *m;
      uint64_t v110 = *(unsigned __int8 *)v107;
      if ((_DWORD)v109 == (_DWORD)v110) {
        break;
      }
      if (byte_1813C6343[v109] != byte_1813C6343[v110])
      {
        uint64_t v111 = "ROWID";
        for (uint64_t n = (_BYTE *)*v92; ; ++n)
        {
          uint64_t v113 = *n;
          BOOL v114 = *(unsigned __int8 *)v111;
          if ((_DWORD)v113 == (_DWORD)v114)
          {
            if (!*n) {
              goto LABEL_174;
            }
          }

          else if (byte_1813C6343[v113] != byte_1813C6343[v114])
          {
            BOOL v115 = "OID";
            for (iuint64_t i = (_BYTE *)*v92; ; ++ii)
            {
              uint64_t v117 = *ii;
              uint64_t v118 = *(unsigned __int8 *)v115;
              if ((_DWORD)v117 == (_DWORD)v118)
              {
                if (!*ii) {
                  goto LABEL_174;
                }
              }

              else if (byte_1813C6343[v117] != byte_1813C6343[v118])
              {
                goto LABEL_188;
              }

              ++v115;
            }
          }

          ++v111;
        }
      }

LABEL_384:
      if (v346 - 1 < 3)
      {
        uint64_t v16 = (_DWORD *)a1;
        sub_181324A24((uint64_t *)a1, v346, v141, a4, a5, a6, a7, a8);
        goto LABEL_449;
      }

      uint64_t v16 = (_DWORD *)a1;
      if (v346 == 4) {
        goto LABEL_393;
      }
      if (v346 == 6)
      {
        sub_18134473C(a1, v356, v15, v141, v342, a6, a7, a8);
LABEL_393:
        int v207 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v207)
        {
          sub_18131044C(v18, 9LL, 0LL, a11, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v207 + 1;
          uint64_t v208 = *(void *)(v18 + 136) + 40LL * v207;
          *(void *)uint64_t v208 = 9LL;
          *(_DWORD *)(v208 + 8) = a11;
          *(void *)(v208 + 12) = 0LL;
          *(void *)(v208 + 28) = 0LL;
          *(void *)(v208 + 20) = 0LL;
          *(_DWORD *)(v208 + 36) = 0;
        }

LABEL_367:
      if ((v353 & 1) == 0) {
        break;
      }
      LODWORD(v140) = v368 + 1;
      uint64_t v141 = *(void *)(v375[0] + 40LL);
      v375[0] = v141;
      if (!v141) {
        goto LABEL_516;
      }
    }

    uint64_t v140 = v197 + 1LL;
    int v362 = v140;
    uint64_t v198 = &v348[2 * v140];
    LODWORD(v140) = *((_DWORD *)v198 + 2);
    uint64_t v141 = *v198;
    if (!*v198) {
      goto LABEL_516;
    }
  }

  int v287 = v339;
  uint64_t v286 = v340;
  if (!v340) {
    goto LABEL_524;
  }
LABEL_517:
  int v288 = *(_DWORD *)(v18 + 144);
  if (*(_DWORD *)(v18 + 148) <= v288)
  {
    sub_18131044C(v18, 9LL, 0LL, v286, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v18 + 144) = v288 + 1;
    uint64_t v289 = *(void *)(v18 + 136) + 40LL * v288;
    *(void *)uint64_t v289 = 9LL;
    *(_DWORD *)(v289 + 8) = v286;
    *(void *)(v289 + 12) = 0LL;
    *(void *)(v289 + 28) = 0LL;
    *(void *)(v289 + 20) = 0LL;
    *(_DWORD *)(v289 + 36) = 0;
  }

  if (*(_BYTE *)(*(void *)v18 + 103LL)) {
    BOOL v290 = &byte_18C550680;
  }
  else {
    BOOL v290 = (char *)(*(void *)(v18 + 136) + 40LL * v332);
  }
  *((_DWORD *)v290 + 2) = *(_DWORD *)(v18 + 144);
LABEL_524:
  if (v336)
  {
    int v291 = *(_DWORD *)(v18 + 144);
    if (*(_DWORD *)(v18 + 148) <= v291)
    {
      sub_18131044C(v18, 17LL, HIDWORD(v337), v345, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v18 + 144) = v291 + 1;
      uint64_t v292 = *(void *)(v18 + 136) + 40LL * v291;
      *(_DWORD *)uint64_t v292 = 17;
      *(_DWORD *)(v292 + 4) = HIDWORD(v337);
      *(_DWORD *)(v292 + 8) = v345;
      *(void *)(v292 + 12) = 0LL;
      *(void *)(v292 + 28) = 0LL;
      *(void *)(v292 + 20) = 0LL;
      *(_DWORD *)(v292 + 36) = 0;
    }

    int v293 = *(_DWORD *)(v18 + 144);
    if (v360)
    {
      if (*(_DWORD *)(v18 + 148) <= v293)
      {
        sub_18131044C(v18, 9LL, 0LL, v337, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v18 + 144) = v293 + 1;
        uint64_t v294 = *(void *)(v18 + 136) + 40LL * v293;
        *(void *)uint64_t v294 = 9LL;
        *(_DWORD *)(v294 + 8) = v337;
        *(void *)(v294 + 12) = 0LL;
        *(void *)(v294 + 28) = 0LL;
        *(void *)(v294 + 20) = 0LL;
        *(_DWORD *)(v294 + 36) = 0;
      }
    }

    else
    {
      if (v354)
      {
        if (*(_DWORD *)(v18 + 148) <= v293)
        {
          sub_18131044C(v18, 53LL, v14, v337, v354, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v18 + 144) = v293 + 1;
          uint64_t v295 = *(void *)(v18 + 136) + 40LL * v293;
          *(_DWORD *)uint64_t v295 = 53;
          *(_DWORD *)(v295 + 4) = v14;
          *(_DWORD *)(v295 + 8) = v337;
          *(_DWORD *)(v295 + 12) = v354;
          *(void *)(v295 + 24) = 0LL;
          *(void *)(v295 + 32) = 0LL;
          *(void *)(v295 + 16) = 0LL;
        }

        int v293 = *(_DWORD *)(v18 + 144);
        if (v293 >= 1) {
          *(_WORD *)(*(void *)(v18 + 136) + 40LL * (v293 - 1) + 2) = 144;
        }
      }

      if (*(_DWORD *)(v18 + 148) <= v293)
      {
        sub_18131044C(v18, 31LL, v335, v337, v14, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v18 + 144) = v293 + 1;
        uint64_t v296 = *(void *)(v18 + 136) + 40LL * v293;
        *(_DWORD *)uint64_t v296 = 31;
        *(_DWORD *)(v296 + 4) = v335;
        *(_DWORD *)(v296 + 8) = v337;
        *(_DWORD *)(v296 + 12) = v14;
        *(void *)(v296 + 24) = 0LL;
        *(void *)(v296 + 32) = 0LL;
        *(void *)(v296 + 16) = 0LL;
      }

      sub_181344614((uint64_t *)v16, 2LL, v15, v286, a5, a6, a7, a8);
    }

    uint64_t v297 = *(void *)(v18 + 24);
    int v298 = ~v345;
    if (*(_DWORD *)(v297 + 68) + *(_DWORD *)(v297 + 72) >= 0)
    {
      *(_DWORD *)(*(void *)(v297 + 80) + 4LL * v298) = *(_DWORD *)(v18 + 144);
      goto LABEL_546;
    }

    sub_18131E420(v297, v18, v298);
    if ((*(_BYTE *)(v15 + 48) & 0x80) != 0) {
      goto LABEL_553;
    }
  }

  else
  {
LABEL_546:
    if ((*(_BYTE *)(v15 + 48) & 0x80) != 0) {
      goto LABEL_553;
    }
  }

  uint64_t v299 = *(unsigned int *)(v363 + 4LL * (int)v140);
  uint64_t v300 = (v14 + 1);
  uint64_t v301 = *(__int16 *)(v15 + 56);
  int v302 = *(_DWORD *)(v18 + 144);
  if (*(_DWORD *)(v18 + 148) <= v302)
  {
    sub_18131044C(v18, 97LL, v300, v301, v299, a6, a7, a8);
    if (v357) {
      goto LABEL_553;
    }
  }

  else
  {
    *(_DWORD *)(v18 + 144) = v302 + 1;
    uint64_t v303 = *(void *)(v18 + 136) + 40LL * v302;
    *(_DWORD *)uint64_t v303 = 97;
    *(_DWORD *)(v303 + 4) = v300;
    *(_DWORD *)(v303 + 8) = v301;
    *(_DWORD *)(v303 + 12) = v299;
    *(void *)(v303 + 24) = 0LL;
    *(void *)(v303 + 32) = 0LL;
    *(void *)(v303 + 16) = 0LL;
    if (v357) {
      goto LABEL_553;
    }
  }

  sub_18131FC08((void **)v18, v15, 0LL, v301, v299, a6, a7, a8);
LABEL_553:
  *a12 = v287;
}

uint64_t sub_1812A9848( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned int a12)
{
  int v12 = a8;
  unsigned int v119 = a7;
  unsigned int v121 = a6;
  unsigned int v116 = a5;
  uint64_t v14 = a3;
  int v17 = a11;
  uint64_t v18 = a10;
  uint64_t v19 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 68);
  uint64_t v21 = (v20 - 1);
  *(_DWORD *)(a1 + 68) = v21;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0) {
    int v22 = 28;
  }
  else {
    int v22 = 31;
  }
  unsigned int v118 = v22;
  if (!a11)
  {
    int v23 = *(_DWORD *)(v19 + 144);
    if (*(_DWORD *)(v19 + 148) <= v23)
    {
      sub_181310690(v19, v118, a4, (v20 - 1), a6, a7, a7, a8);
    }

    else
    {
      *(_DWORD *)(v19 + 144) = v23 + 1;
      uint64_t v24 = *(void *)(v19 + 136) + 40LL * v23;
      *(_BYTE *)uint64_t v24 = v118;
      *(_WORD *)(v24 + 2) = 0;
      *(_DWORD *)(v24 + 4) = a4;
      *(_DWORD *)(v24 + 8) = v21;
      *(_DWORD *)(v24 + 12) = a6;
      *(_DWORD *)(v24 + 16) = a7;
      *(_BYTE *)(v24 + 1) = -3;
      *(void *)(v24 + 24) = 0LL;
      *(void *)(v24 + 32) = 0LL;
    }
  }

  int v117 = v12;
  if ((*(_BYTE *)(*(void *)a1 + 49LL) & 0x40) == 0 || *(_BYTE *)(a2 + 63)) {
    goto LABEL_10;
  }
  uint64_t v63 = *(void *)(a2 + 96);
  int8x16_t v64 = *(unsigned __int8 **)a2;
  uint64_t v65 = *(void *)(v63 + 96);
  if (v65)
  {
    int v66 = *v64;
    if (*v64)
    {
      unsigned int v67 = 0;
      unsigned int v68 = v64 + 1;
      do
      {
        unsigned int v67 = -1640531535 * (v67 + byte_1813C6343[v66]);
        int v69 = *v68++;
        int v66 = v69;
      }

      while (v69);
    }

    else
    {
      unsigned int v67 = 0;
    }

    uint64_t v108 = (_DWORD *)(v65 + 16LL * (v67 % *(_DWORD *)(v63 + 80)));
    int v103 = (uint64_t *)(v108 + 2);
    int v104 = *v108;
    if (v104)
    {
      while (1)
      {
LABEL_143:
        int v103 = (uint64_t *)*v103;
        int v109 = (_BYTE *)v103[3];
        for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
        {
          uint64_t v111 = *v109;
          uint64_t v112 = *i;
          if ((_DWORD)v111 != (_DWORD)v112) {
            break;
          }
          if (!*v109) {
            goto LABEL_122;
          }
LABEL_145:
          ++v109;
        }

        if (byte_1813C6343[v111] == byte_1813C6343[v112]) {
          goto LABEL_145;
        }
        if (!--v104)
        {
          int v103 = &qword_18C550660;
          goto LABEL_122;
        }
      }
    }
  }

  else
  {
    int v103 = (uint64_t *)(v63 + 88);
    int v104 = *(_DWORD *)(v63 + 84);
    if (v104) {
      goto LABEL_143;
    }
  }

  int v103 = &qword_18C550660;
LABEL_122:
  if (v103[2] || *(void *)(a2 + 72))
  {
    int v115 = v20;
    unsigned int v114 = v20 - 1;
    BOOL v120 = v14 != 0;
    if (v14) {
      goto LABEL_125;
    }
    int v113 = a11;
    int v25 = 0;
    goto LABEL_14;
  }

uint64_t sub_1812AA24C(uint64_t a1, unsigned __int8 **a2, uint64_t a3, int a4)
{
  if ((*(_BYTE *)(*(void *)a1 + 49LL) & 0x40) == 0 || *((_BYTE *)a2 + 63)) {
    return 0LL;
  }
  if (!a3)
  {
    int v23 = a2[12];
    uint64_t v24 = *a2;
    uint64_t v25 = *((void *)v23 + 12);
    if (v25)
    {
      int v26 = *v24;
      if (*v24)
      {
        unsigned int v27 = 0;
        uint64_t v28 = v24 + 1;
        do
        {
          unsigned int v27 = -1640531535 * (v27 + byte_1813C6343[v26]);
          int v29 = *v28++;
          int v26 = v29;
        }

        while (v29);
      }

      else
      {
        unsigned int v27 = 0;
      }

      uint64_t v47 = (_DWORD *)(v25 + 16LL * (v27 % *((_DWORD *)v23 + 20)));
      __int16 v46 = (uint64_t *)(v47 + 2);
    }

    else
    {
      __int16 v46 = (uint64_t *)(v23 + 88);
      uint64_t v47 = v23 + 84;
    }

    int v48 = *v47;
    if (!v48)
    {
      __int16 v46 = &qword_18C550660;
LABEL_88:
      if (v46[2]) {
        return 1LL;
      }
      uint64_t result = 1LL;
      if (!a2[9]) {
        return 0LL;
      }
      return result;
    }

uint64_t sub_1812AA5E4( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int *a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  int v9 = a8;
  uint64_t v10 = a7;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!a6) {
    goto LABEL_8;
  }
  int v16 = *(unsigned __int8 **)(a2 + 72);
  if (v16)
  {
    int v17 = *(_DWORD *)(a1 + 68) - 1;
    *(_DWORD *)(a1 + 68) = v17;
    *a6 = v17;
    *(_DWORD *)(a1 + 64) = a3 + 1;
    uint64_t v18 = *a6;
    uint64_t v19 = *(void *)a1;
    uint64_t v21 = sub_18129C928(*(void *)a1, v16, 0LL, 0LL);
    if (!*(_BYTE *)(v19 + 103)) {
      sub_1812B0714(a1, (unsigned __int8 **)v21, v18, 16LL, v20, (uint64_t)a6, a7, a8);
    }
    if (v21) {
      sub_181309110((void *)v19, (unsigned __int8 *)v21);
    }
    uint64_t v10 = 0LL;
    *(_DWORD *)(a1 + 64) = 0;
LABEL_8:
    if (!a5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }

  *a6 = 0;
  if (!a5) {
    goto LABEL_12;
  }
LABEL_9:
  if ((*(_WORD *)(a2 + 99) & 8) != 0)
  {
    uint64_t v22 = (unsigned __int16 *)(a2 + 94);
    goto LABEL_13;
  }

void sub_1812AA984( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v113 = *a1;
  if ((*(_BYTE *)(*a1 + 49) & 0x40) == 0) {
    return;
  }
  uint64_t v8 = a2;
  if (*(_BYTE *)(a2 + 63)) {
    return;
  }
  int v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(v113 + 32);
  if (v13)
  {
    uint64_t v15 = (uint64_t *)(v14 + 24);
    int v16 = -1;
    int v17 = a1;
    do
    {
      uint64_t v18 = *v15;
      v15 += 4;
      ++v16;
    }

    while (v18 != v13);
  }

  else
  {
    int v16 = -32768;
    int v17 = a1;
  }

  int v108 = *((unsigned __int8 *)v17 + 221);
  uint64_t v19 = *(void *)(a2 + 72);
  if (v19)
  {
    uint64_t v109 = v16;
    uint64_t v20 = *(_BYTE **)(v14 + 32LL * v16);
    unsigned int v106 = a3;
    int v111 = a3 + 1;
    uint64_t v107 = v20;
    int v105 = a6;
    unsigned int v103 = a4;
    while (1)
    {
      int v115 = 0LL;
      v116[0] = 0LL;
      if (v10)
      {
        uint64_t v22 = *(unsigned __int8 **)v8;
        uint64_t v23 = *(unsigned __int8 **)(v19 + 16);
        if (*(void *)v8)
        {
          if (v23)
          {
            while (1)
            {
              uint64_t v24 = *v22;
              uint64_t v25 = *v23;
              if ((_DWORD)v24 == (_DWORD)v25)
              {
                if (!*v22) {
                  goto LABEL_29;
                }
              }

              else if (byte_1813C6343[v24] != byte_1813C6343[v25])
              {
                break;
              }

              ++v22;
              ++v23;
            }
          }
        }

        else if (!v23)
        {
          goto LABEL_29;
        }

        uint64_t v26 = *(unsigned int *)(v19 + 40);
        BOOL v27 = (int *)(v19 + 64);
        while (1)
        {
          uint64_t v29 = *v27;
          v27 += 4;
          int v28 = v29;
          if (!--v26) {
            goto LABEL_12;
          }
        }
      }

uint64_t sub_1812AB304( uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = a6;
  int v11 = a9;
  uint64_t v46 = result;
  uint64_t v12 = *(void *)(result + 16);
  uint64_t v13 = *(void *)(a2 + 16);
  if (!v13)
  {
    uint64_t v33 = 0LL;
    if ((*(_BYTE *)(a2 + 48) & 0x80) != 0) {
      return result;
    }
    goto LABEL_27;
  }

  unsigned int v43 = a8;
  unsigned int v44 = a3;
  unsigned int v45 = a5;
  uint64_t v14 = 0LL;
  unsigned int v47 = a7;
  __int16 v15 = a7 & 2 | (16 * (a9 != 0)) | 1;
  uint64_t v16 = a4;
  do
  {
    uint64_t v17 = *(unsigned int *)(v9 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (*(void *)(v13 + 72))
      {
        int v18 = *(_DWORD *)(v12 + 144);
        uint64_t v19 = (v18 + 2);
        if (*(_DWORD *)(v12 + 148) <= v18)
        {
          uint64_t result = sub_18131044C(v12, 50LL, v17, v19, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v12 + 144) = v18 + 1;
          uint64_t v20 = *(void *)(v12 + 136) + 40LL * v18;
          *(_DWORD *)uint64_t v20 = 50;
          *(_DWORD *)(v20 + 4) = v17;
          *(_DWORD *)(v20 + 8) = v19;
          *(void *)(v20 + 12) = 0LL;
          *(void *)(v20 + 28) = 0LL;
          *(void *)(v20 + 20) = 0LL;
          *(_DWORD *)(v20 + 36) = 0;
        }
      }

      __int16 v21 = *(_WORD *)(v13 + 99);
      if ((v21 & 3) == 2)
      {
        int v22 = *(_DWORD *)(a2 + 48);
        if ((v22 & 0x80) != 0) {
          __int16 v23 = v15;
        }
        else {
          __int16 v23 = 16 * (a9 != 0);
        }
        if ((v22 & 0x80) != 0 && !v47)
        {
          uint64_t result = sub_181344B84(v46, a2, (v16 + v14), *(unsigned int *)(v9 + 4 * v14), a5, a6, a7, a8);
          __int16 v21 = *(_WORD *)(v13 + 99);
          __int16 v23 = v15;
        }
      }

      else
      {
        __int16 v23 = 16 * (a9 != 0);
      }

      uint64_t v24 = v16 + v14;
      uint64_t v25 = *(unsigned int *)(v9 + 4 * v14);
      a5 = (v25 + 1);
      BOOL v26 = (v21 & 8) == 0;
      uint64_t v27 = 94LL;
      if (v26) {
        uint64_t v27 = 96LL;
      }
      a6 = *(unsigned __int16 *)(v13 + v27);
      int v28 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v28)
      {
        uint64_t result = sub_181310690(v12, 138LL, v24, v25, a5, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v28 + 1;
        uint64_t v29 = *(void *)(v12 + 136) + 40LL * v28;
        *(_DWORD *)uint64_t v29 = 64906;
        *(_DWORD *)(v29 + 4) = v24;
        *(_DWORD *)(v29 + 8) = v25;
        *(_DWORD *)(v29 + 12) = a5;
        *(_DWORD *)(v29 + 16) = a6;
        *(void *)(v29 + 24) = 0LL;
        *(void *)(v29 + 32) = 0LL;
      }

      int v30 = *(_DWORD *)(v12 + 144);
      BOOL v31 = __OFSUB__(v30, 1);
      int v32 = v30 - 1;
      if (v32 < 0 == v31) {
        *(_WORD *)(*(void *)(v12 + 136) + 40LL * v32 + 2) = v23;
      }
    }

    ++v14;
    uint64_t v13 = *(void *)(v13 + 40);
  }

  while (v13);
  uint64_t v33 = v14;
  a3 = v44;
  a5 = v45;
  int v11 = a9;
  a8 = v43;
  a7 = v47;
  if ((*(_BYTE *)(a2 + 48) & 0x80) == 0)
  {
LABEL_27:
    char v34 = a7 | 1;
    if (!(_DWORD)a7) {
      char v34 = 33;
    }
    if (*(_BYTE *)(v46 + 30)) {
      char v35 = 0;
    }
    else {
      char v35 = v34;
    }
    if ((_DWORD)a8) {
      v35 |= 8u;
    }
    if (v11) {
      unsigned __int8 v36 = v35 | 0x10;
    }
    else {
      unsigned __int8 v36 = v35;
    }
    uint64_t v37 = *(unsigned int *)(v9 + 4 * v33);
    int v38 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v38)
    {
      uint64_t result = sub_18131044C(v12, 128LL, a3, v37, a5, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v38 + 1;
      uint64_t v39 = *(void *)(v12 + 136) + 40LL * v38;
      *(_DWORD *)uint64_t v39 = 128;
      *(_DWORD *)(v39 + 4) = a3;
      *(_DWORD *)(v39 + 8) = v37;
      *(_DWORD *)(v39 + 12) = a5;
      *(void *)(v39 + 24) = 0LL;
      *(void *)(v39 + 32) = 0LL;
      *(void *)(v39 + 16) = 0LL;
    }

    if (!*(_BYTE *)(v46 + 30) && !*(_BYTE *)(*(void *)v12 + 103LL))
    {
      uint64_t v40 = *(void *)(v12 + 136) + 40LL * *(int *)(v12 + 144);
      *(_BYTE *)(v40 - 39) = -5;
      *(void *)(v40 - 24) = a2;
    }

    int v41 = *(_DWORD *)(v12 + 144);
    BOOL v31 = __OFSUB__(v41, 1);
    int v42 = v41 - 1;
    if (v42 < 0 == v31) {
      *(_WORD *)(*(void *)(v12 + 136) + 40LL * v42 + 2) = v36;
    }
  }

  return result;
}

void sub_1812AB5D4(uint64_t a1, __int128 *a2, __int16 a3)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
  {
    sub_18130879C(a1, a2, a3);
  }

  else
  {
    __int128 v3 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v3;
    if ((*((_BYTE *)a2 + 21) & 0x20) == 0) {
      *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0x8FFF | a3;
    }
  }

void sub_1812AB614(uint64_t a1, int a2, int a3)
{
  if (a2 < 67)
  {
    if (a2 != 66) {
      return;
    }
    __int16 v10 = *(_WORD *)(a1 + 20);
    if ((v10 & 2) != 0 || (v10 & 0x2C) == 0) {
      goto LABEL_30;
    }
    if (*(int *)(a1 + 32) >= 32)
    {
      uint64_t v12 = *(void **)(a1 + 40);
      *(void *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 20) = v10 & 0x2D;
    }

    else
    {
      if (sub_18128FAF0(a1, 32, 0))
      {
        *(_BYTE *)(a1 + 22) = 0;
LABEL_30:
        __int16 v9 = *(_WORD *)(a1 + 20) & 0xFFD3;
        goto LABEL_31;
      }

      uint64_t v12 = *(void **)(a1 + 8);
    }

    sub_181303C44(v12, a1);
    *(_BYTE *)(a1 + 22) = 1;
    *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xFDD1 | 0x202;
    if (a3 != 1) {
      sub_1812C23E8((int *)a1, a3);
    }
    goto LABEL_30;
  }

  __int16 v4 = *(_WORD *)(a1 + 20);
  if ((v4 & 4) != 0) {
    return;
  }
  if ((v4 & 0x28) != 0)
  {
    if ((v4 & 0x20) != 0) {
      goto LABEL_17;
    }
    double v5 = *(double *)a1;
    if (*(double *)a1 >= -9.22337204e18
      && v5 <= 9.22337204e18
      && v5 == (double)(uint64_t)v5
      && (unint64_t)((uint64_t)v5 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      *(void *)a1 = (uint64_t)v5;
LABEL_17:
      __int16 v9 = v4 & 0xF240 | 4;
LABEL_31:
      *(_WORD *)(a1 + 20) = v9;
    }
  }

  else if ((v4 & 2) != 0)
  {
    sub_1812DBB5C(a1, 1);
  }

uint64_t sub_1812AB76C(uint64_t a1)
{
  if (!a1)
  {
    sub_1812CF36C(89717);
    return 0LL;
  }

  __int16 v1 = *(_WORD *)(a1 + 20);
  if ((v1 & 0x24) != 0) {
    return *(void *)a1;
  }
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *(void *)(a1 + 8)) {
      return sub_181303DF0(a1);
    }
    return 0LL;
  }

  double v3 = *(double *)a1;
  if (v3 <= 9.22337204e18) {
    return (uint64_t)v3;
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1812AB814(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)(v4 + 8);
  if (*a1)
  {
    if (*a1 < 3u) {
      return sub_1812FBF50(86548);
    }
    uint64_t result = sub_181308C74((uint64_t)a1);
    unsigned int v52 = result;
    if ((_DWORD)result) {
      return result;
    }
    if (*a1) {
      return 0LL;
    }
  }

  uint64_t v8 = (uint64_t *)(a1 + 136);
  uint64_t v7 = *((void *)a1 + 17);
  uint64_t v9 = *((unsigned __int16 *)a1 + 43);
  unsigned int v10 = *(unsigned __int16 *)(v7 + 24);
  int v11 = (char)a1[84];
  uint64_t v12 = *(void *)(v7 + 80);
  unsigned int v13 = *(unsigned __int16 *)(v7 + 26);
  uint64_t v14 = *(void *)(v7 + 96);
  __int16 v15 = (unsigned __int8 *)(v14 + 2 * v9);
  int v16 = *v15;
  int v17 = v15[1];
  if ((*(_DWORD *)(v7 + 20) & 0x80000000) != 0)
  {
    int v45 = (char)a1[84];
    int v47 = *((unsigned __int16 *)a1 + 43);
    uint64_t v14 = *(void *)(v7 + 96);
    unsigned int v10 = *(unsigned __int16 *)(v7 + 24);
    LODWORD(v9) = v47;
    int v11 = v45;
  }

  unint64_t v18 = v12 + ((v17 | (v16 << 8)) & v13);
  int v19 = v11;
  unsigned int v46 = v9;
  char v20 = a2;
  if ((a2 & 2) != 0)
  {
    if (*(_BYTE *)(v7 + 8))
    {
      int v21 = *(_DWORD *)(v7 + 20);
      if ((int)(v21 + (*(uint64_t (**)(uint64_t, unint64_t))(v7 + 120))(v7, v18) + 2) <= (int)(2 * *(_DWORD *)(v5 + 56) / 3u)
        && *(_WORD *)(v7 + 24) != 1)
      {
        int v22 = 1;
        if (*(_BYTE *)(v7 + 8)) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
    }

    uint64_t result = sub_1812FFEC8((uint64_t)a1);
    if ((_DWORD)result) {
      return result;
    }
  }

  int v22 = 0;
  if (*(_BYTE *)(v7 + 8)) {
    goto LABEL_18;
  }
LABEL_42:
  a1[1] &= 0xF1u;
  *((_WORD *)a1 + 35) = 0;
  if (!*a1 && *((_WORD *)a1 + 43) && *(_BYTE *)(*v8 + 8))
  {
    --*((_WORD *)a1 + 43);
  }

  else
  {
    uint64_t result = sub_18130A018(a1);
    if ((_DWORD)result) {
      return result;
    }
  }

uint64_t sub_1812ABDD4(uint64_t a1)
{
  __int16 v1 = *(_DWORD **)(a1 + 40);
  if ((*(_WORD *)(a1 + 52) & 4) != 0 && v1[8] >= *(_DWORD *)(a1 + 48))
  {
    uint64_t v2 = v1[32];
    if (!(_DWORD)v2) {
      return v2;
    }
    return sub_1812FAFE4(a1);
  }

  else
  {
    uint64_t v2 = v1[12];
    if ((_DWORD)v2) {
      return v2;
    }
    if (v1[46] <= v1[50]) {
      return sub_1812ABE24(a1);
    }
    else {
      return sub_1812FED50(a1);
    }
  }

uint64_t sub_1812ABE24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(v2 + 21);
  if (v3 == 2)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 48);
    if ((_DWORD)v4) {
      return v4;
    }
    if (*(void *)(v2 + 344) || *(_BYTE *)(v2 + 9) == 2) {
      goto LABEL_5;
    }
    uint64_t v20 = *(void *)v2;
    int v21 = *(_DWORD *)(v2 + 32);
    int v22 = (_OWORD *)sub_18126F0AC(512LL);
    if (!v22)
    {
      *(void *)(v2 + 64) = 0LL;
      return 7LL;
    }

    v22[30] = 0u;
    v22[31] = 0u;
    v22[28] = 0u;
    v22[29] = 0u;
    v22[26] = 0u;
    v22[27] = 0u;
    v22[24] = 0u;
    v22[25] = 0u;
    v22[22] = 0u;
    v22[23] = 0u;
    v22[20] = 0u;
    v22[21] = 0u;
    v22[18] = 0u;
    v22[19] = 0u;
    v22[16] = 0u;
    v22[17] = 0u;
    v22[14] = 0u;
    v22[15] = 0u;
    v22[12] = 0u;
    v22[13] = 0u;
    v22[10] = 0u;
    v22[11] = 0u;
    char v22[8] = 0u;
    v22[9] = 0u;
    v22[6] = 0u;
    v22[7] = 0u;
    v22[4] = 0u;
    v22[5] = 0u;
    v22[2] = 0u;
    v22[3] = 0u;
    *int v22 = 0u;
    v22[1] = 0u;
    *(_DWORD *)int v22 = v21;
    *(void *)(v2 + 64) = v22;
    uint64_t v23 = *(void *)(v2 + 80);
    if (!*(void *)v23)
    {
      if (*(_BYTE *)(v2 + 9) == 4)
      {
        *(_OWORD *)(v23 + 48) = 0uLL;
        *(_OWORD *)(v23 + 64) = 0uLL;
        *(_OWORD *)(v23 + 16) = 0uLL;
        *(_OWORD *)(v23 + 32) = 0uLL;
        *(_OWORD *)uint64_t v23 = 0uLL;
        *(void *)uint64_t v23 = &unk_189B6D428;
        *(void *)(v23 + 8) = -4294966280LL;
        *(_DWORD *)(v23 + 56) = 0;
        *(void *)(v23 + 64) = 0LL;
        *(void *)(v23 + 72) = 0LL;
      }

      else
      {
        int v24 = *(_DWORD *)(v2 + 180);
        int v25 = *(unsigned __int8 *)(v2 + 16);
        int v26 = dword_18C46539C;
        uint64_t v4 = sub_1812FDD28(v2);
        if (!(_DWORD)v4)
        {
          if (v25) {
            int v27 = v26;
          }
          else {
            int v27 = 0;
          }
          if (v25) {
            int v28 = 4126;
          }
          else {
            int v28 = 2054;
          }
          uint64_t v4 = sub_1812FBDC8(v20, *(void *)(v2 + 224), *(void *)(v2 + 80), v28 | v24 & 0x1700000u, v27);
        }

        if ((_DWORD)v4) {
          goto LABEL_56;
        }
      }
    }

    *(_DWORD *)(v2 + 52) = 0;
    *(_BYTE *)(v2 + 24) = 0;
    *(void *)(v2 + 96) = 0LL;
    *(void *)(v2 + 104) = 0LL;
    uint64_t v4 = sub_1812B8B24(v2);
    if (!(_DWORD)v4)
    {
LABEL_5:
      int v3 = 3;
      *(_BYTE *)(v2 + 21) = 3;
      goto LABEL_6;
    }

uint64_t sub_1812AC150(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = a2[4];
  if (((char)a2[4] & 0x80000000) == 0)
  {
    __int16 v3 = 4;
    goto LABEL_10;
  }

  int v4 = a2[5] & 0x7F | ((v2 & 0x7F) << 7);
  if ((a2[5] & 0x80) == 0)
  {
    __int16 v3 = 5;
LABEL_5:
    unsigned int v2 = v4;
    goto LABEL_10;
  }

  unsigned int v2 = a2[6] & 0x7F | (v4 << 7);
  if ((a2[6] & 0x80) != 0)
  {
    unsigned int v2 = a2[7] & 0x7F | (v2 << 7);
    if ((a2[7] & 0x80) != 0)
    {
      int v4 = a2[8] & 0x7F | (v2 << 7);
      if ((a2[8] & 0x80) == 0)
      {
        __int16 v3 = 8;
        goto LABEL_5;
      }

      unsigned int v2 = a2[9] & 0x7F | (v4 << 7);
      if ((a2[9] & 0x80) != 0)
      {
        int v4 = a2[10] & 0x7F | (v2 << 7);
        if ((a2[10] & 0x80) == 0)
        {
          __int16 v3 = 10;
          goto LABEL_5;
        }

        unsigned int v2 = a2[11] & 0x7F | (v4 << 7);
        if ((a2[11] & 0x80) != 0)
        {
          int v4 = a2[12] & 0x7F | (v2 << 7);
          __int16 v3 = 12;
          goto LABEL_5;
        }

        __int16 v3 = 11;
      }

      else
      {
        __int16 v3 = 9;
      }
    }

    else
    {
      __int16 v3 = 7;
    }
  }

  else
  {
    __int16 v3 = 6;
  }

uint64_t sub_1812AC27C(uint64_t result, int a2, int a3, _DWORD *a4)
{
  if (!*a4)
  {
    uint64_t v6 = result;
    unsigned int v7 = (unsigned __int16 *)(*(void *)(result + 96) + 2LL * a2);
    unsigned int v8 = __rev16(*v7);
    if (v8 + a3 <= *(_DWORD *)(*(void *)(result + 72) + 56LL))
    {
      uint64_t v9 = *(void *)(result + 80);
      uint64_t v10 = *(unsigned __int8 *)(result + 9);
      uint64_t result = sub_18130A6D4(result, v8, (unsigned __int16)a3);
      if ((_DWORD)result)
      {
        *a4 = result;
      }

      else
      {
        unsigned __int16 v11 = *(_WORD *)(v6 + 24) - 1;
        *(_WORD *)(v6 + 24) = v11;
        if (v11)
        {
          uint64_t result = (uint64_t)memmove(v7, v7 + 1, 2 * (v11 - a2));
          uint64_t v12 = v10 + v9;
          *(_BYTE *)(v12 + 3) = *(_BYTE *)(v6 + 25);
          *(_BYTE *)(v12 + 4) = *(_BYTE *)(v6 + 24);
          int v13 = *(_DWORD *)(v6 + 20) + 2;
        }

        else
        {
          uint64_t v14 = v10 + v9;
          *(_DWORD *)(v14 + 1) = 0;
          *(_BYTE *)(v14 + 7) = 0;
          *(_BYTE *)(v14 + 5) = BYTE1(*(_DWORD *)(*(void *)(v6 + 72) + 56LL));
          *(_BYTE *)(v14 + 6) = *(_DWORD *)(*(void *)(v6 + 72) + 56LL);
          int v13 = *(_DWORD *)(*(void *)(v6 + 72) + 56LL)
              - (*(unsigned __int8 *)(v6 + 9)
        }

        *(_DWORD *)(v6 + 20) = v13;
      }
    }

    else
    {
      uint64_t result = sub_1812FBF50(83991);
      *a4 = result;
    }
  }

  return result;
}

uint64_t sub_1812AC3A8(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = 0LL;
  v463[3] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 136);
  int64x2_t v406 = vdupq_n_s64(8uLL);
  while (1)
  {
    if ((*(_DWORD *)(v3 + 20) & 0x80000000) != 0 && sub_18130A254(v3))
    {
LABEL_499:
      uint64_t v11 = 0LL;
      goto LABEL_502;
    }

    if (*(_BYTE *)(v3 + 12)) {
      break;
    }
    if (3 * *(_DWORD *)(v3 + 20) <= 2 * *(_DWORD *)(*(void *)(v1 + 32) + 56LL)) {
      goto LABEL_499;
    }
    int v6 = *(unsigned __int8 *)(v1 + 84);
    if (!*(_BYTE *)(v1 + 84)) {
      goto LABEL_499;
    }
LABEL_23:
    if (*(int *)(*(void *)(v3 + 112) + 56LL) >= 2)
    {
      int v385 = 85860;
LABEL_501:
      uint64_t v11 = sub_1812FBF50(v385);
      goto LABEL_502;
    }

    uint64_t v12 = (char)v6 - 1LL;
    uint64_t v13 = *(void *)(v1 + 8 * v12 + 144);
    int v14 = *(unsigned __int16 *)(v1 + 2 * v12 + 88);
    uint64_t v15 = *(void *)(v13 + 112);
    unsigned int v16 = *(_DWORD **)(v15 + 40);
    if ((*(_WORD *)(v15 + 52) & 4) != 0 && v16[8] >= *(_DWORD *)(v15 + 48))
    {
      if (v16[32])
      {
        uint64_t v11 = sub_1812FAFE4(v15);
        if ((_DWORD)v11) {
          goto LABEL_201;
        }
      }
    }

    else
    {
      uint64_t v11 = v16[12];
      if ((_DWORD)v11) {
        goto LABEL_201;
      }
      if (v16[46] <= v16[50])
      {
        uint64_t v11 = sub_1812ABE24(v15);
        if ((_DWORD)v11) {
          goto LABEL_201;
        }
      }

      else
      {
        uint64_t v11 = sub_1812FED50(v15);
        if ((_DWORD)v11) {
          goto LABEL_201;
        }
      }
    }

    if ((*(_DWORD *)(v13 + 20) & 0x80000000) != 0)
    {
      uint64_t v30 = sub_18130A254(v13);
      if ((_DWORD)v30)
      {
        uint64_t v11 = v30;
        goto LABEL_201;
      }
    }

    if (*(_BYTE *)(v3 + 2)
      && *(_BYTE *)(v3 + 12) == 1
      && *(unsigned __int16 *)(v3 + 28) == *(unsigned __int16 *)(v3 + 24)
      && *(_DWORD *)(v13 + 4) != 1
      && *(unsigned __int16 *)(v13 + 24) == v14)
    {
      if (!*(_WORD *)(v3 + 28))
      {
        uint64_t v11 = sub_1812FBF50(84712);
        goto LABEL_201;
      }

      uint64_t v17 = *(void *)(v3 + 72);
      uint64_t v11 = sub_1812B48CC(v17, (uint64_t *)v449, (int *)v456, 0, 0);
      if ((_DWORD)v11) {
        goto LABEL_201;
      }
      v463[0] = *(void *)(v3 + 40);
      v455[0] = (*(uint64_t (**)(uint64_t))(v3 + 120))(v3);
      int v18 = (unsigned __int16 *)v449[0];
      sub_1812B47EC((uint64_t)v449[0], 13);
      LODWORD(v440) = 1;
      *((void *)&v440 + 1) = v3;
      *(void *)&__int128 v441 = v463;
      uint64_t v19 = *(void *)(v3 + 88);
      *((void *)&v441 + 1) = v455;
      *(void *)&v442[0] = v19;
      LODWORD(v443) = 2;
      uint64_t v20 = sub_18130AAA4((uint64_t)&v440, 0, 1, (uint64_t)v18);
      v457[0] = v20;
      if ((_DWORD)v20)
      {
        uint64_t v11 = v20;
        if (!v18) {
          goto LABEL_201;
        }
      }

      else
      {
        *((_DWORD *)v18 + 5) = *(_DWORD *)(v17 + 56) - (v18[9] + v455[0]) - 2;
        if (*(_BYTE *)(v17 + 33))
        {
          sub_1812C0570((_DWORD *)v17, v456[0], 5, *(_DWORD *)(v13 + 4), v457);
          if (v455[0] > v18[8] && !v457[0])
          {
            unint64_t v236 = v463[0];
            (*((void (**)(unsigned __int16 *, void, uint64_t *))v18 + 16))(v18, v463[0], &v458);
            if (v460 > v461)
            {
              unint64_t v237 = *((void *)v18 + 11);
              if (v237 <= v236 || v236 + v461 <= v237) {
                sub_1812C0570( *((_DWORD **)v18 + 9),  bswap32(*(_DWORD *)(v462 + v236 - 4)),  3,  *((_DWORD *)v18 + 1),  v457);
              }
              else {
                v457[0] = sub_1812FBF50(78404);
              }
            }
          }
        }

        unint64_t v374 = 0LL;
        uint64_t v375 = *(void *)(v3 + 96) + 2LL * *(unsigned __int16 *)(v3 + 24);
        unint64_t v376 = *(void *)(v3 + 80)
             + ((*(unsigned __int8 *)(v375 - 1) | (*(unsigned __int8 *)(v375 - 2) << 8)) & (unint64_t)*(unsigned __int16 *)(v3 + 26));
        do
        {
          unint64_t v377 = v374 + 1;
          v463[0] = v376 + v374 + 1;
          if (v374 > 7) {
            break;
          }
          int v378 = *(char *)(v376 + v374++);
        }

        while (v378 < 0);
        uint64_t v379 = 0LL;
        unint64_t v380 = v376 + v377;
        do
        {
          int8x16x2_t v381 = &__src[v379];
          v463[0] = v380 + v379 + 1;
          int v382 = *(char *)(v380 + v379++);
          v381[4] = v382;
        }

        while (v382 < 0 && v379 + v380 < v380 + 9);
        uint64_t v11 = v457[0];
        if (!v457[0]) {
          uint64_t v11 = sub_1812AFBF0(v13, *(unsigned __int16 *)(v13 + 24), __src, (int)v379 + 4, 0LL, *(_DWORD *)(v3 + 4));
        }
        *(_DWORD *)(*(unsigned __int8 *)(v13 + 9) + *(void *)(v13 + 80) + 8LL) = bswap32(v456[0]);
        if (!v18) {
          goto LABEL_201;
        }
      }

      uint64_t v383 = *((void *)v18 + 14);
      if ((*(_WORD *)(v383 + 52) & 0x20) != 0)
      {
        uint64_t v384 = *(void *)(v383 + 40);
        --*(_DWORD *)(v384 + 152);
        *(void *)(v383 + 32) = *(void *)(v384 + 168);
        *(void *)(v384 + 168) = v383;
        (*(void (**)(void, void, void))(**(void **)(v384 + 72) + 144LL))( *(void *)(v384 + 72),  *(void *)(v384 + 200) * (*(_DWORD *)(v383 + 48) - 1),  *(void *)(v383 + 8));
      }

      else
      {
        sub_1812F9F44(v383);
      }

      goto LABEL_201;
    }

    uint64_t v21 = sub_1812FDBB8(*(_DWORD *)(*(void *)(v1 + 32) + 52LL));
    char v22 = *(_BYTE *)(v1 + 3);
    int v445 = 0;
    char v446 = 0;
    uint64_t v444 = 0LL;
    __int128 v443 = 0u;
    __int128 v440 = 0u;
    __int128 v441 = 0u;
    memset(v442, 0, sizeof(v442));
    unint64_t v434 = v21;
    if (!v21)
    {
      uint64_t v11 = 7LL;
      if (v2) {
        goto LABEL_199;
      }
      goto LABEL_200;
    }

    int v23 = v22 & 1;
    int v24 = *(unsigned __int8 *)(v13 + 12);
    int v25 = *(unsigned __int16 *)(v13 + 24);
    LODWORD(v26) = v25 + v24;
    int v27 = v14 - 1;
    if (v25 + v24 == v14) {
      int v27 = v14 + v23 - 2;
    }
    if (!v14) {
      int v27 = 0;
    }
    int v411 = v23;
    if (v26 >= 2)
    {
      unint64_t v26 = (2 - v23);
    }

    else
    {
      int v27 = 0;
      unint64_t v26 = v26;
    }

    unint64_t v429 = v26;
    uint64_t v430 = v3;
    int v28 = v27 - v24 + v26;
    unint64_t v407 = v2;
    uint64_t v408 = v1;
    int v399 = v6;
    int v402 = v14;
    if (v28 == v25)
    {
      unint64_t v29 = *(unsigned __int8 *)(v13 + 9) + 8LL;
    }

    else
    {
      uint64_t v31 = (unsigned __int8 *)(*(void *)(v13 + 96) + 2LL * v28);
      unint64_t v29 = (v31[1] | (*v31 << 8)) & (unint64_t)*(unsigned __int16 *)(v13 + 26);
    }

    int v32 = 0;
    unint64_t v33 = v26;
    int64_t v34 = (v26 + 1);
    uint64_t v439 = *(void *)(v13 + 72);
    __int16 v400 = (unsigned int *)(*(void *)(v13 + 80) + v29);
    unsigned int v35 = bswap32(*v400);
    uint64_t v36 = v26;
    int v426 = v27;
    uint64_t v435 = v13;
    int v436 = v27 - 1;
    for (uint64_t i = sub_181308FB8((_DWORD *)v439, v35, &v463[v36]); ; uint64_t i = sub_181308FB8((_DWORD *)v439, v35, &v463[v36]))
    {
      unsigned int v448 = i;
      if ((_DWORD)i)
      {
        uint64_t v11 = i;
        goto LABEL_85;
      }

      uint64_t v38 = v463[v33];
      if ((*(_DWORD *)(v38 + 20) & 0x80000000) != 0)
      {
        uint64_t v39 = sub_18130A254(v463[v33]);
        unsigned int v448 = v39;
        if ((_DWORD)v39)
        {
          uint64_t v11 = v39;
LABEL_85:
          __memset_chk();
          int v48 = 0;
          uint64_t v1 = v408;
          goto LABEL_86;
        }
      }

      v32 += *(unsigned __int16 *)(v38 + 24) + 4;
      if (!v33) {
        break;
      }
      if (*(_BYTE *)(v13 + 12))
      {
        if (v436 + (_DWORD)v33 == *(unsigned __int16 *)(v13 + 28))
        {
          int v40 = *(unsigned int **)(v13 + 40);
          *(void *)&v457[2 * v33 + 3] = v40;
          unsigned int v35 = bswap32(*v40);
          uint64_t v11 = 0LL;
          *(_DWORD *)&v454[4 * v33 + 12] = (*(uint64_t (**)(uint64_t))(v13 + 120))(v13);
          *(_BYTE *)(v13 + 12) = 0;
          goto LABEL_70;
        }

        int v41 = v426 + v33 - 1;
      }

      else
      {
        int v41 = v436 + v33;
      }

      unint64_t v42 = (unsigned __int8 *)(*(void *)(v13 + 96) + 2LL * (v41 - *(unsigned __int8 *)(v13 + 12)));
      *(void *)&v457[2 * v33 + 3] = v43;
      unsigned int v44 = *v43;
      unsigned int v45 = (*(uint64_t (**)(uint64_t, unsigned int *))(v13 + 120))(v13, v43);
      int v46 = v45;
      *(_DWORD *)&v454[4 * v33 + 12] = v45;
      if ((*(_BYTE *)(v439 + 40) & 0xC) != 0)
      {
        int v47 = (_DWORD)v43 - *(_DWORD *)(v13 + 80);
        if ((signed int)(v47 + v45) <= *(_DWORD *)(v439 + 56))
        {
          memcpy((void *)(v434 + v47), v43, v45);
          uint64_t v13 = v435;
          *(void *)&v457[2 * v33 + 3] = (char *)v43 + v434 - *(void *)(v435 + 80);
        }
      }

      unsigned int v35 = bswap32(v44);
      sub_1812AC27C(v13, v41 - *(unsigned __int8 *)(v13 + 12), v46, &v448);
      uint64_t v11 = v448;
LABEL_70:
      --v36;
      --v33;
      if ((_DWORD)v11) {
        goto LABEL_85;
      }
    }

    unsigned int v447 = v35;
    unint64_t v51 = (v32 + 3);
    unsigned int v52 = v51 & 0x7FFFFFFC;
    uint64_t v53 = sub_18126F0AC((int)(*(_DWORD *)(v439 + 52) + 10 * (v51 & 0x7FFFFFFC)));
    *(void *)&__int128 v441 = v53;
    if (!v53)
    {
      int v48 = 0;
      uint64_t v11 = 7LL;
      uint64_t v1 = v408;
      uint64_t v3 = v430;
      goto LABEL_185;
    }

    uint64_t v54 = v53;
    unint64_t v55 = 0LL;
    int v56 = 0;
    LODWORD(v57) = 0;
    uint64_t v58 = v53 + 8LL * v52;
    uint64_t v414 = v58 + 2LL * v52;
    uint64_t v419 = v58;
    *((void *)&v441 + 1) = v58;
    *((void *)&v440 + 1) = v463[0];
    int v392 = *(unsigned __int8 *)(v463[0] + 8LL);
    uint64_t v404 = 4LL * *(unsigned __int8 *)(v463[0] + 8LL);
    uint64_t v437 = *(unsigned __int8 *)(v463[0] + 2LL);
    uint64_t v409 = v53 + 8;
    uint64_t v393 = v53 + 16;
    uint64_t v396 = v53 + 40 * ((v51 >> 2) & 0x1FFFFFFF);
    while (2)
    {
      uint64_t v59 = v463[v55];
      int16x8_t v60 = *(unsigned __int8 **)(v59 + 80);
      if (*v60 != **(unsigned __int8 **)(v463[0] + 80LL))
      {
        int v188 = 85133;
        goto LABEL_275;
      }

      unint64_t v431 = v55;
      uint64_t v61 = *(unsigned __int16 *)(v59 + 24);
      unint64_t v62 = *(unsigned __int16 *)(v59 + 26);
      uint64_t v63 = *(unsigned __int16 *)(v59 + 18);
      unint64_t v64 = (unint64_t)&v60[v63];
      bzero((void *)(v58 + 2LL * (int)v57), 2 * (*(unsigned __int8 *)(v59 + 12) + v61));
      LODWORD(v65) = *(unsigned __int8 *)(v59 + 12);
      int64x2_t v66 = vdupq_n_s64((unint64_t)v60);
      if (!*(_BYTE *)(v59 + 12))
      {
        v69.i64[0] = 0x100000001LL;
        v69.i64[1] = 0x100000001LL;
        uint64_t v58 = v419;
        goto LABEL_128;
      }

      uint64_t v67 = *(unsigned __int16 *)(v59 + 28);
      if (v61 < v67)
      {
        int v188 = 85157;
        goto LABEL_275;
      }

      uint64_t v68 = (int)v57;
      if (*(_WORD *)(v59 + 28))
      {
        v69.i64[0] = 0x100000001LL;
        v69.i64[1] = 0x100000001LL;
        uint64_t v58 = v419;
        if (v67 < 0x10
          || ((uint64_t v70 = (int64x2_t *)(v54 + 8LL * (int)v57),
               uint64_t v71 = (v67 - 1),
               v70 < (int64x2_t *)&v60[2 * v71 + 2 + v63])
            ? (BOOL v72 = v64 >= v409 + 8 * ((int)v57 + v71))
            : (BOOL v72 = 1),
              !v72))
        {
          LODWORD(v73) = 0;
          goto LABEL_115;
        }

        uint64_t v73 = (unsigned __int16)v67 & 0xFFF0;
        uint64_t v68 = v73 + (int)v57;
        v64 += 2 * v73;
        int8x16_t v74 = (int8x16_t)vdupq_n_s64(v62);
        uint64_t v75 = v73;
        do
        {
          uint64_t v76 = (const char *)&v60[v63];
          int8x16x2_t v465 = vld2q_s8(v76);
          uint16x8_t v77 = vmovl_u8(*(uint8x8_t *)v465.val[0].i8);
          int8x16_t v78 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v77.i8);
          int8x16_t v79 = (int8x16_t)vmovl_high_u16(v77);
          uint16x8_t v80 = vmovl_high_u8((uint8x16_t)v465.val[0]);
          int8x16_t v81 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v80.i8);
          int8x16_t v82 = (int8x16_t)vmovl_high_u16(v80);
          uint16x8_t v83 = vmovl_high_u8((uint8x16_t)v465.val[1]);
          int8x16_t v84 = (int8x16_t)vmovl_high_u16(v83);
          int8x16_t v85 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v83.i8);
          v465.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v465.val[1].i8);
          v465.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v465.val[0]);
          v465.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v465.val[0].i8);
          int8x8_t v86 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v465.val[0], v465.val[0], 8uLL));
          v87.i64[0] = v86.u32[0];
          v87.i64[1] = v86.u32[1];
          int8x16_t v88 = v87;
          *(int8x8_t *)v465.val[0].i8 = vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v78.i8, 8uLL),  *(int8x8_t *)v465.val[0].i8);
          v87.i64[0] = v465.val[0].u32[0];
          v87.i64[1] = v465.val[0].u32[1];
          v465.val[0] = v87;
          *(int8x8_t *)v78.i8 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v465.val[1], v465.val[1], 8uLL));
          v87.i64[0] = v78.u32[0];
          v87.i64[1] = v78.u32[1];
          int8x16_t v89 = v87;
          int8x8_t v90 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
          v87.i64[0] = v90.u32[0];
          v87.i64[1] = v90.u32[1];
          int8x16_t v91 = v87;
          *(int8x8_t *)v465.val[1].i8 = vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v79.i8, 8uLL),  *(int8x8_t *)v465.val[1].i8);
          v87.i64[0] = v465.val[1].u32[0];
          v87.i64[1] = v465.val[1].u32[1];
          v465.val[1] = v87;
          *(int8x8_t *)v79.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v81.i8, 8uLL), *(int8x8_t *)v85.i8);
          v87.i64[0] = v79.u32[0];
          v87.i64[1] = v79.u32[1];
          int8x16_t v92 = v87;
          *(int8x8_t *)v81.i8 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
          v87.i64[0] = v81.u32[0];
          v87.i64[1] = v81.u32[1];
          int8x16_t v93 = v87;
          *(int8x8_t *)v82.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v82.i8, 8uLL), *(int8x8_t *)v84.i8);
          v87.i64[0] = v82.u32[0];
          v87.i64[1] = v82.u32[1];
          v70[6] = vaddq_s64(v66, (int64x2_t)vandq_s8(v87, v74));
          v70[7] = vaddq_s64(v66, (int64x2_t)vandq_s8(v93, v74));
          v70[4] = vaddq_s64(v66, (int64x2_t)vandq_s8(v92, v74));
          v70[5] = vaddq_s64(v66, (int64x2_t)vandq_s8(v91, v74));
          v70[2] = vaddq_s64(v66, (int64x2_t)vandq_s8(v465.val[1], v74));
          v70[3] = vaddq_s64(v66, (int64x2_t)vandq_s8(v89, v74));
          int64x2_t *v70 = vaddq_s64(v66, (int64x2_t)vandq_s8(v465.val[0], v74));
          v70[1] = vaddq_s64(v66, (int64x2_t)vandq_s8(v88, v74));
          v70 += 8;
          v63 += 32LL;
          v75 -= 16LL;
        }

        while (v75);
        if (v73 != v67)
        {
LABEL_115:
          int v94 = v67 - v73;
          do
          {
            *(void *)(v54 + 8 * v68) = &v60[(*(unsigned __int8 *)(v64 + 1) | (*(unsigned __int8 *)v64 << 8)) & v62];
            v64 += 2LL;
            ++v68;
            --v94;
          }

          while (v94);
        }

        uint64_t v68 = (int)v68;
      }

      else
      {
        v69.i64[0] = 0x100000001LL;
        v69.i64[1] = 0x100000001LL;
        uint64_t v58 = v419;
      }

      else {
        uint64_t v65 = v65;
      }
      if (v65 < 8 || (uint64_t v95 = 8 * v68, (unint64_t)(8 * v68 + v54 - v59 - 40) < 0x20))
      {
        uint64_t v96 = 0LL;
        goto LABEL_125;
      }

      uint64_t v96 = v65 & 0xFC;
      v68 += v96;
      int v129 = (__int128 *)(v59 + 56);
      int v130 = (_OWORD *)(v393 + v95);
      uint64_t v131 = v96;
      do
      {
        __int128 v132 = *v129;
        *(v130 - 1) = *(v129 - 1);
        *int v130 = v132;
        v129 += 2;
        v130 += 2;
        v131 -= 4LL;
      }

      while (v131);
      if (v96 != v65)
      {
LABEL_125:
        uint64_t v97 = v65 - v96;
        int v98 = (uint64_t *)(v59 + 8 * v96 + 40);
        do
        {
          uint64_t v99 = *v98++;
          *(void *)(v54 + 8 * v68++) = v99;
          --v97;
        }

        while (v97);
      }

      LODWORD(v440) = v68;
      LODWORD(v57) = v68;
LABEL_128:
      uint64_t v100 = *(unsigned __int16 *)(v59 + 18);
      uint64_t v101 = 2LL * *(unsigned __int16 *)(v59 + 24);
      uint64_t v102 = &v60[v100 + v101];
      if (v64 >= (unint64_t)v102)
      {
        unint64_t v121 = v431;
        goto LABEL_161;
      }

      uint64_t v103 = (int)v57;
      unint64_t v104 = (unint64_t)&v60[v101 + v100];
      unint64_t v105 = v64 + 2;
      if (v104 <= v64 + 2) {
        unint64_t v106 = v64 + 2;
      }
      else {
        unint64_t v106 = v104;
      }
      unint64_t v107 = v106 + ~v64;
      if (v107 < 0xE) {
        goto LABEL_157;
      }
      unint64_t v108 = v54 + 8LL * (int)v57;
      if (v104 <= v105) {
        unint64_t v104 = v64 + 2;
      }
      unint64_t v109 = v104 + ~v64;
      unint64_t v110 = v409 + 8 * ((int)v57 + (v109 >> 1));
      unint64_t v111 = v105 + (v109 & 0xFFFFFFFFFFFFFFFELL);
      BOOL v112 = v108 >= v111 || v64 >= v110;
      BOOL v113 = !v112;
      BOOL v114 = (unint64_t)&v440 >= v111 || v64 >= (unint64_t)&v440 + 4;
      BOOL v115 = !v114;
      BOOL v116 = (unint64_t)&v440 >= v110 || v108 >= (unint64_t)&v440 + 4;
      if (!v116 || v113 || v115)
      {
LABEL_157:
        unint64_t v57 = (int)v57;
        uint64_t v122 = (unsigned __int8 *)v64;
        goto LABEL_158;
      }

      uint64_t v117 = (v107 >> 1) + 1;
      int8x16_t v118 = (int8x16_t)vdupq_n_s64(v62);
      if (v107 >= 0x1E)
      {
        int64x2_t v133 = vdupq_n_s64((int)v57);
        int32x4_t v134 = (int32x4_t)vaddq_s64(v133, (int64x2_t)xmmword_1813CDD40);
        unint64_t v119 = v117 & 0xFFFFFFFFFFFFFFF0LL;
        int32x4_t v135 = (int32x4_t)vaddq_s64(v133, (int64x2_t)xmmword_1813CDD50);
        int64x2_t v136 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDD60);
        int64x2_t v137 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDD70);
        int64x2_t v138 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDD80);
        int64x2_t v139 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDD90);
        int64x2_t v140 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDDA0);
        int64x2_t v141 = vaddq_s64(v133, (int64x2_t)xmmword_1813CDC50);
        unint64_t v120 = (v117 & 0xFFFFFFFFFFFFFFF0LL) + (int)v57;
        BOOL v142 = (int64x2_t *)(v54 + 8LL * (int)v57);
        unint64_t v143 = v117 & 0xFFFFFFFFFFFFFFF0LL;
        int8x16_t v144 = (const char *)v64;
        do
        {
          int8x16x2_t v466 = vld2q_s8(v144);
          v144 += 32;
          uint16x8_t v145 = vmovl_u8(*(uint8x8_t *)v466.val[0].i8);
          int8x16_t v146 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v145.i8);
          int8x16_t v147 = (int8x16_t)vmovl_high_u16(v145);
          uint16x8_t v148 = vmovl_high_u8((uint8x16_t)v466.val[0]);
          int8x16_t v149 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v148.i8);
          int8x16_t v150 = (int8x16_t)vmovl_high_u16(v148);
          uint16x8_t v151 = vmovl_high_u8((uint8x16_t)v466.val[1]);
          int8x16_t v152 = (int8x16_t)vmovl_high_u16(v151);
          int8x16_t v153 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v151.i8);
          v466.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v466.val[1].i8);
          v466.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v466.val[0]);
          v466.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v466.val[0].i8);
          int8x8_t v154 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v466.val[0], v466.val[0], 8uLL));
          v155.i64[0] = v154.u32[0];
          v155.i64[1] = v154.u32[1];
          int8x16_t v156 = v155;
          *(int8x8_t *)v466.val[0].i8 = vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v146.i8, 8uLL),  *(int8x8_t *)v466.val[0].i8);
          v155.i64[0] = v466.val[0].u32[0];
          v155.i64[1] = v466.val[0].u32[1];
          v466.val[0] = v155;
          *(int8x8_t *)v146.i8 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v466.val[1], v466.val[1], 8uLL));
          v155.i64[0] = v146.u32[0];
          v155.i64[1] = v146.u32[1];
          int8x16_t v157 = v155;
          int8x8_t v158 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL));
          v155.i64[0] = v158.u32[0];
          v155.i64[1] = v158.u32[1];
          int8x16_t v159 = v155;
          *(int8x8_t *)v466.val[1].i8 = vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v147.i8, 8uLL),  *(int8x8_t *)v466.val[1].i8);
          v155.i64[0] = v466.val[1].u32[0];
          v155.i64[1] = v466.val[1].u32[1];
          v466.val[1] = v155;
          *(int8x8_t *)v147.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v149.i8, 8uLL), *(int8x8_t *)v153.i8);
          v155.i64[0] = v147.u32[0];
          v155.i64[1] = v147.u32[1];
          int8x16_t v160 = v155;
          *(int8x8_t *)v149.i8 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
          v155.i64[0] = v149.u32[0];
          v155.i64[1] = v149.u32[1];
          int8x16_t v161 = v155;
          *(int8x8_t *)v150.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v150.i8, 8uLL), *(int8x8_t *)v152.i8);
          v155.i64[0] = v150.u32[0];
          v155.i64[1] = v150.u32[1];
          v142[6] = vaddq_s64(v66, (int64x2_t)vandq_s8(v155, v118));
          v142[7] = vaddq_s64(v66, (int64x2_t)vandq_s8(v161, v118));
          v142[4] = vaddq_s64(v66, (int64x2_t)vandq_s8(v160, v118));
          v142[5] = vaddq_s64(v66, (int64x2_t)vandq_s8(v159, v118));
          v142[2] = vaddq_s64(v66, (int64x2_t)vandq_s8(v466.val[1], v118));
          v142[3] = vaddq_s64(v66, (int64x2_t)vandq_s8(v157, v118));
          *BOOL v142 = vaddq_s64(v66, (int64x2_t)vandq_s8(v466.val[0], v118));
          v142[1] = vaddq_s64(v66, (int64x2_t)vandq_s8(v156, v118));
          v142 += 8;
          int32x4_t v162 = vaddq_s32(vuzp1q_s32(v135, v134), v69);
          LODWORD(v440) = v162.i32[3];
          v466.val[1] = (int8x16_t)vdupq_n_s64(0x10uLL);
          int64x2_t v139 = vaddq_s64(v139, (int64x2_t)v466.val[1]);
          int64x2_t v140 = vaddq_s64(v140, (int64x2_t)v466.val[1]);
          int64x2_t v141 = vaddq_s64(v141, (int64x2_t)v466.val[1]);
          int64x2_t v138 = vaddq_s64(v138, (int64x2_t)v466.val[1]);
          int64x2_t v137 = vaddq_s64(v137, (int64x2_t)v466.val[1]);
          int64x2_t v136 = vaddq_s64(v136, (int64x2_t)v466.val[1]);
          int32x4_t v135 = (int32x4_t)vaddq_s64((int64x2_t)v135, (int64x2_t)v466.val[1]);
          int32x4_t v134 = (int32x4_t)vaddq_s64((int64x2_t)v134, (int64x2_t)v466.val[1]);
          v143 -= 16LL;
        }

        while (v143);
        if (v117 == v119)
        {
          LODWORD(v57) = v162.i32[3];
          unint64_t v121 = v431;
          goto LABEL_161;
        }

        if ((v117 & 8) != 0) {
          goto LABEL_178;
        }
        uint64_t v122 = (unsigned __int8 *)(v64 + 2 * v119);
        unint64_t v57 = v119 + (int)v57;
LABEL_158:
        unint64_t v121 = v431;
        goto LABEL_159;
      }

      unint64_t v119 = 0LL;
      unint64_t v120 = (int)v57;
LABEL_178:
      unint64_t v57 = (v117 & 0xFFFFFFFFFFFFFFF8LL) + (int)v57;
      uint64_t v122 = (unsigned __int8 *)(v64 + 2 * (v117 & 0xFFFFFFFFFFFFFFF8LL));
      int64x2_t v163 = vdupq_n_s64(v120);
      int32x4_t v164 = (int32x4_t)vaddq_s64(v163, (int64x2_t)xmmword_1813CDD80);
      int32x4_t v165 = (int32x4_t)vaddq_s64(v163, (int64x2_t)xmmword_1813CDD90);
      int64x2_t v166 = vaddq_s64(v163, (int64x2_t)xmmword_1813CDDA0);
      int64x2_t v167 = vaddq_s64(v163, (int64x2_t)xmmword_1813CDC50);
      uint64_t v168 = (const char *)(v64 + 2 * v119);
      unint64_t v169 = v119 - (v117 & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v170 = (int64x2_t *)(v54 + 8 * (v119 + v103));
      do
      {
        int8x16_t v464 = (int8x16_t)vld2_s8(v168);
        v168 += 16;
        uint16x8_t v171 = vmovl_u8(*(uint8x8_t *)v464.i8);
        int8x16_t v172 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v171.i8);
        int8x16_t v173 = (int8x16_t)vmovl_high_u16(v171);
        int8x16_t v464 = (int8x16_t)vmovl_u8((uint8x8_t)v464.u64[1]);
        *(uint32x4_t *)((char *)&v464 + 8) = vmovl_high_u16((uint16x8_t)v464);
        int8x16_t v464 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v464.i8);
        int8x8_t v174 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v464, v464, 8uLL));
        v175.i64[0] = v174.u32[0];
        v175.i64[1] = v174.u32[1];
        int8x16_t v176 = v175;
        *(int8x8_t *)v464.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v172.i8, 8uLL), *(int8x8_t *)v464.i8);
        v175.i64[0] = v464.u32[0];
        v175.i64[1] = v464.u32[1];
        int8x16_t v464 = v175;
        *(int8x8_t *)v172.i8 = vorr_s8( (int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL), 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8( *(int8x16_t *)((char *)&v464 + 8),  *(int8x16_t *)((char *)&v464 + 8),  8uLL));
        v175.i64[0] = v172.u32[0];
        v175.i64[1] = v172.u32[1];
        int8x16_t v177 = v175;
        v464.u64[1] = (unint64_t)vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v173.i8, 8uLL),  (int8x8_t)v464.u64[1]);
        v175.i64[0] = v464.u32[2];
        v175.i64[1] = v464.u32[3];
        v170[2] = vaddq_s64(v66, (int64x2_t)vandq_s8(v175, v118));
        v170[3] = vaddq_s64(v66, (int64x2_t)vandq_s8(v177, v118));
        *uint64_t v170 = vaddq_s64(v66, (int64x2_t)vandq_s8(v464, v118));
        v170[1] = vaddq_s64(v66, (int64x2_t)vandq_s8(v176, v118));
        v170 += 4;
        int32x4_t v178 = vaddq_s32(vuzp1q_s32(v165, v164), v69);
        LODWORD(v440) = v178.i32[3];
        int32x4_t v165 = (int32x4_t)vaddq_s64((int64x2_t)v165, v406);
        int64x2_t v166 = vaddq_s64(v166, v406);
        int64x2_t v167 = vaddq_s64(v167, v406);
        int32x4_t v164 = (int32x4_t)vaddq_s64((int64x2_t)v164, v406);
        v169 += 8LL;
      }

      while (v169);
      unint64_t v121 = v431;
      if (v117 == (v117 & 0xFFFFFFFFFFFFFFF8LL))
      {
        LODWORD(v57) = v178.i32[3];
        goto LABEL_161;
      }

LABEL_159:
      int8x16x2_t v123 = (void *)(v54 + 8 * v57);
      do
      {
        *v123++ = &v60[(v122[1] | (*v122 << 8)) & v62];
        LODWORD(v57) = v57 + 1;
        LODWORD(v440) = v57;
        v122 += 2;
      }

      while (v122 < v102);
LABEL_161:
      v456[v121] = v57;
      if (v121 < v429 && !(_DWORD)v437)
      {
        unsigned __int16 v124 = *(_DWORD *)&v455[2 * v121];
        *(_WORD *)(v58 + 2LL * (int)v57) = v124;
        uint64_t v125 = (char *)(v414 + v56);
        v56 += v124;
        memcpy(v125, *(const void **)&v457[2 * v121 + 5], v124);
        uint64_t v58 = v419;
        *(void *)(v54 + 8LL * (int)v57) = &v125[v404];
        unsigned __int16 v126 = *(_WORD *)(v419 + 2LL * (int)v57) - 4 * v392;
        *(_WORD *)(v419 + 2LL * (int)v57) = v126;
        if (*(_BYTE *)(v59 + 8))
        {
          if (v126 <= 3u)
          {
            int v127 = (_BYTE *)(v396 + v56);
            do
            {
              *v127++ = 0;
              unsigned int v128 = (unsigned __int16)++*(_WORD *)(v419 + 2LL * (int)v57);
              ++v56;
            }

            while (v128 < 4);
          }
        }

        else
        {
          *(_DWORD *)&v125[v404] = *(_DWORD *)(*(void *)(v59 + 80) + 8LL);
        }

        LODWORD(v57) = v57 + 1;
        LODWORD(v440) = v57;
      }

      unint64_t v55 = v121 + 1;
      if (v55 != v34) {
        continue;
      }
      break;
    }

    uint64_t v189 = 0LL;
    int v190 = 0;
    int v191 = v404 + *(_DWORD *)(v439 + 56) - 12;
    int v410 = v191;
    while (2)
    {
      uint64_t v192 = v463[v189];
      *((void *)v442 + v190) = *(void *)(v192 + 88);
      int v193 = v456[v189];
      *((_DWORD *)&v443 + v190) = v193;
      if (v190)
      {
        if (v193 == *((_DWORD *)&v443 + v190 - 1)) {
          LODWORD(v194) = v190 - 1;
        }
        else {
          LODWORD(v194) = v190;
        }
        uint64_t v195 = v435;
        if (!(_DWORD)v437)
        {
LABEL_211:
          uint64_t v194 = (int)v194 + 1LL;
          *((void *)v442 + v194) = *(void *)(v195 + 88);
          *((_DWORD *)&v443 + v194) = v193 + 1;
        }
      }

      else
      {
        LODWORD(v194) = 0;
        uint64_t v195 = v435;
        if (!(_DWORD)v437) {
          goto LABEL_211;
        }
      }

      int v196 = v191 - *(_DWORD *)(v192 + 20);
      *(_DWORD *)&v455[2 * v189] = v196;
      if (*(_BYTE *)(v192 + 12))
      {
        unint64_t v197 = 0LL;
        do
        {
          v196 += (*(uint64_t (**)(uint64_t, void))(v192 + 120))(v192, *(void *)(v192 + 8 * v197 + 40)) + 2;
          *(_DWORD *)&v455[2 * v189] = v196;
          ++v197;
        }

        while (v197 < *(unsigned __int8 *)(v192 + 12));
      }

      v457[v189++] = v193;
      int v190 = v194 + 1;
      int v191 = v410;
      if (v189 != v34) {
        continue;
      }
      break;
    }

    unint64_t v198 = 0LL;
    int v420 = v440;
    uint64_t v415 = (int)v440;
    uint64_t v432 = *((void *)&v441 + 1);
    uint64_t v397 = *((void *)&v441 + 1) + 2LL;
    int64_t v199 = v34;
    uint64_t v3 = v430;
    while (2)
    {
      int v200 = *(_DWORD *)&v455[2 * v198];
      if (v200 <= v410)
      {
        int v204 = v457[v198];
        int64_t v201 = v198 + 1;
        goto LABEL_235;
      }

      int64_t v201 = v198 + 1;
      while (2)
      {
        if (v201 >= (int)v199)
        {
          if (v198 < 4)
          {
            *(_DWORD *)&v455[2 * v201] = 0;
            v457[v201] = v420;
            int64_t v199 = (v198 + 2);
            goto LABEL_226;
          }

          *(_DWORD *)&v455[2 * v198] = v200;
          int v188 = 85258;
LABEL_275:
          uint64_t v11 = sub_1812FBF50(v188);
          int v48 = 0;
          uint64_t v1 = v408;
LABEL_86:
          uint64_t v3 = v430;
          goto LABEL_87;
        }

            int8x16_t v87 = *(unsigned __int8 **)&v126[6 * v81 + 2];
            unsigned int v128 = v81;
            if ((v82[5] & 2) != 0)
            {
              int8x16_t v89 = a1;
              goto LABEL_165;
            }

            if (v87 && (v87[5] & 2) != 0
              || (int8x16_t v88 = (_BYTE **)sub_181289D04(a1, v82, a3, a4, a5, (uint64_t)a6, a7, a8)) == 0LL)
            {
              int8x16_t v89 = a1;
              int8x16_t v82 = v87;
LABEL_165:
              int8x16_t v88 = (_BYTE **)sub_181289D04(v89, v82, a3, a4, a5, (uint64_t)a6, a7, a8);
            }

            int8x8_t v90 = 0LL;
            LODWORD(v50) = v123;
            uint16x8_t v77 = v125;
            int8x16_t v78 = v130;
            while (*((_DWORD *)v87 + 12) != *(__int16 *)(*(void *)(v125 + 8) + 2 * v90))
            {
LABEL_167:
              if (++v90 == v123) {
                goto LABEL_132;
              }
            }

            if (v88)
            {
              int8x16_t v91 = *v88;
              for (uint64_t j = *(unsigned __int8 **)(*(void *)(v125 + 64) + 8 * v90); ; ++j)
              {
                int8x16_t v93 = *v91;
                int v94 = *j;
                if ((_DWORD)v93 == (_DWORD)v94)
                {
                  if (!*v91) {
                    break;
                  }
                }

                else if (byte_1813C6343[v93] != byte_1813C6343[v94])
                {
                  goto LABEL_167;
                }

                ++v91;
              }
            }

            if ((_DWORD)v123 != (_DWORD)v90 && ((1LL << v90) & v130) == 0)
            {
              if (a5) {
                *(_DWORD *)(a5 + 4 * v128) = v90;
              }
              int8x16_t v78 = (1LL << v90) | v130;
              int8x16_t v81 = v128 + 1;
              if (v128 + 1 != v123) {
                continue;
              }
            }

            goto LABEL_132;
          }
        }

        int8x16_t v78 = 0LL;
LABEL_132:
        if (v78 == v122) {
          break;
        }
      }
    }

    uint16x8_t v77 = *(void *)(v77 + 40);
    if (!v77) {
      goto LABEL_38;
    }
  }

  uint64_t v101 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v101)
  {
    uint64_t v101 = sub_18131044C(v14, 15LL, 0LL, 0LL, 0LL, (uint64_t)a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v101 + 1;
    uint64_t v102 = *(void *)(v14 + 136) + 40LL * v101;
    *(_BYTE *)uint64_t v102 = 15;
    *(_OWORD *)(v102 + 1) = 0u;
    *(_OWORD *)(v102 + 17) = 0u;
    *(void *)(v102 + 32) = 0LL;
  }

  sub_18131CCF8((uint64_t *)a1, 0, "USING INDEX %s FOR IN-OPERATOR", a4, a5, (uint64_t)a6, a7, a8, *(void *)v125);
  unint64_t v106 = *(unsigned int *)(v125 + 88);
  unint64_t v107 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v107)
  {
    sub_18131044C(v14, 112LL, v15, v106, v119, v103, v104, v105);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v107 + 1;
    unint64_t v108 = *(void *)(v14 + 136) + 40LL * v107;
    *(_DWORD *)unint64_t v108 = 112;
    *(_DWORD *)(v108 + 4) = v15;
    *(_DWORD *)(v108 + 8) = v106;
    *(_DWORD *)(v108 + 12) = v119;
    *(void *)(v108 + 24) = 0LL;
    *(void *)(v108 + 32) = 0LL;
    *(void *)(v108 + 16) = 0LL;
  }

  unint64_t v109 = *(void *)(a1 + 16);
  unint64_t v110 = sub_181319FB0((_DWORD *)a1, v125);
  if (v110)
  {
    if (*(_BYTE *)(*(void *)v109 + 103LL))
    {
      if (!*(void *)(*(void *)v109 + 816LL))
      {
        uint16x8_t v80 = (*(_DWORD *)v110)-- == 1;
        if (v80) {
          sub_1813014B0(*(void **)(v110 + 16), (void *)v110);
        }
      }
    }

    else
    {
      BOOL v116 = *(void *)(v109 + 136) + 40LL * *(int *)(v109 + 144);
      *(_BYTE *)(v116 - 39) = -8;
      *(void *)(v116 - 24) = v110;
    }
  }

  uint64_t v117 = **(unsigned __int8 **)(v125 + 56);
  if (v10)
  {
    int8x16_t v118 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v118;
    _DWORD *v10 = v118;
    if ((_DWORD)v123 == 1) {
      sub_18131D410(v14, v15, v118, v111, v112, v113, v114, v115);
    }
  }

  uint64_t result = (v117 + 3);
  if (*(_BYTE *)(*(void *)v14 + 103LL)) {
    dword_18C550688 = *(_DWORD *)(v14 + 144);
  }
  else {
    *(_DWORD *)(*(void *)(v14 + 136) + 40LL * v101 + 8) = *(_DWORD *)(v14 + 144);
  }
LABEL_50:
  if (a5 && (result - 5) <= 0xFFFFFFFD)
  {
    int v40 = *(unsigned __int8 **)(a2 + 16);
    int v41 = *v40;
    if (v41 == 176) {
      int v41 = v40[2];
    }
    if (v41 == 138)
    {
      int v40 = (unsigned __int8 *)*((void *)v40 + 4);
    }

    else if (v41 != 177)
    {
      unint64_t v42 = 1;
      goto LABEL_59;
    }

    unint64_t v42 = **((_DWORD **)v40 + 4);
    if (v42 >= 1)
    {
LABEL_59:
      int v43 = v42;
      if (v42 < 8)
      {
        unsigned int v44 = 0LL;
        goto LABEL_64;
      }

      unsigned int v44 = v42 & 0x7FFFFFF8;
      unsigned int v45 = (int32x4_t)xmmword_1813CDDF0;
      int v46 = (int32x4_t *)(a5 + 16);
      v47.i64[0] = 0x400000004LL;
      v47.i64[1] = 0x400000004LL;
      v48.i64[0] = 0x800000008LL;
      v48.i64[1] = 0x800000008LL;
      uint64_t v49 = v43 & 0xFFFFFFF8;
      do
      {
        v46[-1] = v45;
        *int v46 = vaddq_s32(v45, v47);
        unsigned int v45 = vaddq_s32(v45, v48);
        v46 += 2;
        v49 -= 8LL;
      }

      while (v49);
      for (; v43 != v44; ++v44)
LABEL_64:
        *(_DWORD *)(a5 + 4 * v44) = v44;
    }
  }

  *a6 = v15;
  return result;
}

    int8x16_t v78 = 0;
LABEL_160:
    char v4 = (uint64_t)v130;
LABEL_161:
    uint16x8_t v77 = v120;
LABEL_162:
    uint16x8_t v80 = v85;
    uint64_t v95 = v78 | v77++;
    uint64_t v11 = v122;
    if (!v95) {
      continue;
    }
    break;
  }

    if (++v91 >= v88) {
      break;
    }
  }

  if (v213)
  {
    uint64_t v189 = (void (**)(uint64_t))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_318;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v213);
    --qword_18C468B10;
    off_18C4653A8(v213);
    int64_t v213 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v189 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_318:
      (*v189)(v213);
    }
  }

LABEL_263:
        --v230;
        int v229 = v229 - v234 - 2;
        v457[v227] = v233;
        int v226 = v232;
        if (v230 + 1 <= 1) {
          goto LABEL_271;
        }
      }
    }

    int v422 = **(unsigned __int8 **)(v463[0] + 80LL);
    if ((int)v199 < 1)
    {
      int v252 = 0;
      goto LABEL_317;
    }

    unint64_t v238 = 0LL;
    int v433 = 0;
    uint64_t v239 = (v402 - v223);
    int v240 = v440;
    uint64_t v241 = v199;
    uint64_t v1 = v408;
    while (1)
    {
      if (v238 <= v429)
      {
        unint64_t v245 = v238;
        uint64_t v246 = v463[v238];
        *(void *)&v459[v245 * 8 - 8] = v246;
        v463[v245] = 0LL;
        uint64_t v247 = *(void *)(v246 + 112);
        uint64_t v248 = *(_DWORD **)(v247 + 40);
        if ((*(_BYTE *)(v247 + 52) & 4) != 0 && v248[8] >= *(_DWORD *)(v247 + 48))
        {
          if (v248[32])
          {
            uint64_t v249 = sub_1812FAFE4(v247);
            goto LABEL_303;
          }

          uint64_t v11 = 0LL;
        }

        else
        {
          uint64_t v11 = v248[12];
          if (!(_DWORD)v11)
          {
            if (v248[46] <= v248[50]) {
              uint64_t v249 = sub_1812ABE24(v247);
            }
            else {
              uint64_t v249 = sub_1812FED50(v247);
            }
LABEL_303:
            uint64_t v11 = v249;
          }
        }

        unsigned int v448 = v11;
        ++v433;
        if (v239 == v238) {
          int v250 = 2;
        }
        else {
          int v250 = 1;
        }
        BOOL v251 = v250 != *(_DWORD *)(*(void *)(v246 + 112) + 56LL) && (_DWORD)v11 == 0;
        if (v251)
        {
          uint64_t v11 = sub_1812FBF50(85368);
          goto LABEL_497;
        }

        if ((_DWORD)v11) {
          goto LABEL_497;
        }
        goto LABEL_286;
      }

      unsigned int v242 = v411 ? 1 : v447;
      uint64_t v243 = sub_1812B48CC(v439, (uint64_t *)v449, (int *)&v447, v242, 0);
      unsigned int v448 = v243;
      if ((_DWORD)v243) {
        break;
      }
      unsigned int v244 = v449[0];
      sub_1812B47EC((uint64_t)v449[0], v422);
      *(void *)&v459[8 * v238 - 8] = v244;
      ++v433;
      v456[v238] = v240;
      if (*(_BYTE *)(v439 + 33))
      {
        sub_1812C0570((_DWORD *)v439, v244[1], 5, *(_DWORD *)(v435 + 4), &v448);
        uint64_t v11 = v448;
        if (v448) {
          goto LABEL_497;
        }
      }

LABEL_385:
        int v304 = 1 - v433;
        if (1 - v433 >= v433)
        {
LABEL_433:
          unsigned int v448 = 0;
          if (v399 == 1
            && !*(_WORD *)(v435 + 24)
            && (uint64_t v341 = v458, *(_DWORD *)(v458 + 20) >= (int)*(unsigned __int8 *)(v435 + 9)))
          {
            unsigned int v448 = sub_1812C01F4(v458, -1);
            sub_1812B7EE4(v341, v435, &v448);
            uint64_t v11 = v448;
            uint64_t v1 = v408;
            int v48 = v433;
            if (!v448) {
              uint64_t v11 = sub_1812C1B04(*(void *)(v341 + 72), v341, *(unsigned int *)(v341 + 4));
            }
          }

          else
          {
            if (*(_BYTE *)(v439 + 33)) {
              BOOL v342 = v392 == 0;
            }
            else {
              BOOL v342 = 0;
            }
            int v343 = v390;
            if (!v342) {
              int v343 = 0;
            }
            uint64_t v1 = v408;
            int v48 = v433;
            if (v343 == 1)
            {
              uint64_t v344 = v433;
              unsigned int v345 = &v458;
              do
              {
                uint64_t v346 = *v345++;
                sub_1812C0570( (_DWORD *)v439,  bswap32(*(_DWORD *)(*(void *)(v346 + 80) + 8LL)),  5,  *(_DWORD *)(v346 + 4),  &v448);
                --v344;
              }

              while (v344);
              uint64_t v11 = v448;
            }

            else
            {
              uint64_t v11 = 0LL;
            }
          }

          if (v48 <= (int)v429)
          {
            int v348 = &v463[v48];
            int v349 = v34;
            do
            {
              if (!(_DWORD)v11) {
                uint64_t v11 = sub_1812C1B04(*(void *)(*v348 + 72), *v348, *(unsigned int *)(*v348 + 4));
              }
              ++v348;
              --v349;
            }

            while (v48 != v349);
          }

          goto LABEL_87;
        }

        BOOL v398 = v437 == 0;
        int v391 = v440;
        int v389 = v457[0];
        uint64_t v413 = *((void *)&v441 + 1);
        uint64_t v305 = *((void *)&v440 + 1);
        uint64_t v395 = v441;
        while (2)
        {
          if (v304 >= 0) {
            uint64_t v309 = v304;
          }
          else {
            uint64_t v309 = -v304;
          }
          if (!*((_BYTE *)&v445 + v309))
          {
            if (v304 < 0)
            {
              uint64_t v310 = (int)v309 - 1LL;
              if ((signed int)v456[v310] >= v457[v310])
              {
LABEL_398:
                int v311 = v391;
                int v312 = v457[v310] + v398;
                int v313 = v457[v309] - v312;
                goto LABEL_402;
              }
            }

            else
            {
              if (v304)
              {
                uint64_t v310 = (int)v309 - 1;
                goto LABEL_398;
              }

              int v312 = 0;
              int v311 = 0;
              int v313 = v389;
LABEL_402:
              uint64_t v314 = *(void *)&v459[8 * v309 - 8];
              uint64_t v403 = *(unsigned __int8 *)(v314 + 9);
              uint64_t v405 = *(void *)(v314 + 80);
              uint64_t v315 = *(void *)(v314 + 96);
              uint64_t v316 = *(unsigned __int16 *)(v314 + 24);
              int v317 = *(unsigned __int8 *)(v314 + 12);
              int v318 = v311 - v312;
              int v438 = v313;
              int v428 = v312;
              int v425 = v311;
              if (v311 >= v312)
              {
                int v320 = *(unsigned __int16 *)(v314 + 24);
              }

              else
              {
                int v319 = sub_18130AD28(v314, v311, v312 - v311, (uint64_t)&v440);
                int v320 = v316 - v319;
                if ((int)v316 < v319)
                {
                  int v350 = 84598;
                  goto LABEL_495;
                }

                memmove(*(void **)(v314 + 96), (const void *)(*(void *)(v314 + 96) + 2 * v319), 2 * v316);
                int v313 = v438;
                int v312 = v428;
                int v311 = v425;
              }

              int v321 = v311 + v316 + v317;
              if (v321 > v313 + v312)
              {
                int v322 = sub_18130AD28(v314, v313 + v312, v321 - (v313 + v312), (uint64_t)&v440);
                int v311 = v425;
                v320 -= v322;
              }

              int v308 = v410;
              int v323 = v438;
              int v324 = (void *)(v405 + __rev16(*(unsigned __int16 *)(v403 + v405 + 5)));
              v449[0] = v324;
              unint64_t v418 = v315 + 2 * v438;
              int v325 = v428;
              uint64_t v401 = v314;
              if (v428 >= v311) {
                goto LABEL_415;
              }
              if (v318 >= v438) {
                int v318 = v438;
              }
              uint64_t v326 = *(_WORD **)(v314 + 96);
              memmove(&v326[v318], *(const void **)(v401 + 96), 2 * v320);
              uint64_t v327 = v326;
              uint64_t v314 = v401;
              int v328 = sub_18130AF20(v401, v418, v449, v327, v428, v318, (uint64_t)&v440);
              int v311 = v425;
              int v323 = v438;
              if (v328) {
                goto LABEL_427;
              }
              v320 += v318;
              int v325 = v428;
LABEL_415:
              unsigned __int8 v329 = *(_BYTE *)(v314 + 12);
              if (v329)
              {
                uint64_t v330 = 0LL;
                do
                {
                  int v331 = v311 + *(unsigned __int16 *)(v314 + 2 * v330 + 28);
                  int v332 = v331 - v325;
                  if (v331 - v325 >= 0 && v332 < v323)
                  {
                    uint64_t v333 = *(void *)(v314 + 96) + (2 * v332);
                    if (v320 > v332) {
                      memmove((void *)(v333 + 2), (const void *)v333, 2 * (v320 - v332));
                    }
                    if (!*(_WORD *)(v413 + 2LL * v331)) {
                      sub_18130ACEC((uint64_t)&v440, v331);
                    }
                    __int128 v334 = (_WORD *)v333;
                    uint64_t v314 = v401;
                    int v335 = sub_18130AF20(v401, v418, v449, v334, v331, 1, (uint64_t)&v440);
                    int v323 = v438;
                    int v311 = v425;
                    if (v335) {
                      goto LABEL_427;
                    }
                    ++v320;
                    unsigned __int8 v329 = *(_BYTE *)(v401 + 12);
                    int v325 = v428;
                  }
                }

                while (++v330 < (unint64_t)v329);
              }

              int v336 = sub_18130AF20( v314,  v418,  v449,  (_WORD *)(*(void *)(v314 + 96) + 2 * v320),  v320 + v325,  v323 - v320,  (uint64_t)&v440);
              int v323 = v438;
              if (v336)
              {
LABEL_427:
                if (v323 < 1)
                {
                  int v350 = 84672;
                  goto LABEL_495;
                }

                uint64_t v337 = (void *)(v395 + 8LL * v428);
                int v338 = v323 + 1;
                int v339 = (_WORD *)(v413 + 2LL * v428);
                do
                {
                  if (!*v339) {
                    _WORD *v339 = (*(uint64_t (**)(uint64_t, void))(v305 + 120))(v305, *v337);
                  }
                  ++v337;
                  ++v339;
                  --v338;
                }

                while (v338 > 1);
                uint64_t v306 = sub_18130AAA4((uint64_t)&v440, v428, v438, v314);
                uint64_t v307 = v314;
                int v308 = v410;
                if ((_DWORD)v306) {
                  goto LABEL_496;
                }
              }

              else
              {
                *(_WORD *)(v314 + 24) = v438;
                *(_BYTE *)(v314 + 12) = 0;
                uint64_t v340 = v403 + v405;
                *(_BYTE *)(v340 + 3) = BYTE1(v438);
                *(_BYTE *)(v340 + 4) = *(_BYTE *)(v314 + 24);
                *(_WORD *)(v403 + v405 + 5) = bswap32(LODWORD(v449[0]) - v405) >> 16;
                uint64_t v307 = v314;
              }

              *((_BYTE *)&v445 + v309) = 1;
              *(_DWORD *)(v307 + 20) = v308 - *(_DWORD *)&v455[2 * v309];
              uint64_t v3 = v430;
            }
          }

          if (++v304 == v433) {
            goto LABEL_433;
          }
          continue;
        }
      }
    }

    uint64_t v11 = v243;
LABEL_497:
    uint64_t v3 = v430;
LABEL_498:
    int v48 = v433;
LABEL_87:
    uint64_t v49 = v441;
    if ((void)v441)
    {
      unsigned __int16 v50 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_182;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v49);
      --qword_18C468B10;
      off_18C4653A8(v49);
      uint64_t v49 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        unsigned __int16 v50 = &xmmword_18C465410;
LABEL_182:
        (*v50)(v49);
      }
    }

LABEL_185:
    int8x16_t v179 = v463;
    do
    {
      if (*v179)
      {
        uint64_t v180 = *(void *)(*v179 + 112LL);
        if ((*(_WORD *)(v180 + 52) & 0x20) != 0)
        {
          uint64_t v181 = *(void *)(v180 + 40);
          --*(_DWORD *)(v181 + 152);
          *(void *)(v180 + 32) = *(void *)(v181 + 168);
          *(void *)(v181 + 168) = v180;
          (*(void (**)(void, void, void))(**(void **)(v181 + 72) + 144LL))( *(void *)(v181 + 72),  *(void *)(v181 + 200) * (*(_DWORD *)(v180 + 48) - 1),  *(void *)(v180 + 8));
        }

        else
        {
          sub_1812F9F44(v180);
        }
      }

      ++v179;
      --v34;
    }

    while (v34);
    if (v48 >= 1)
    {
      uint64_t v182 = v48;
      int16x8_t v183 = &v458;
      do
      {
        if (*v183)
        {
          uint64_t v184 = *(void *)(*v183 + 112);
          if ((*(_WORD *)(v184 + 52) & 0x20) != 0)
          {
            uint64_t v185 = *(void *)(v184 + 40);
            --*(_DWORD *)(v185 + 152);
            *(void *)(v184 + 32) = *(void *)(v185 + 168);
            *(void *)(v185 + 168) = v184;
            (*(void (**)(void, void, void))(**(void **)(v185 + 72) + 144LL))( *(void *)(v185 + 72),  *(void *)(v185 + 200) * (*(_DWORD *)(v184 + 48) - 1),  *(void *)(v184 + 8));
          }

          else
          {
            sub_1812F9F44(v184);
          }
        }

        ++v183;
        --v182;
      }

      while (v182);
    }

    unint64_t v2 = v407;
    if (v407) {
LABEL_199:
    }
      sub_1812FC960(v2);
LABEL_200:
    unint64_t v2 = v434;
LABEL_201:
    *(_BYTE *)(v3 + 12) = 0;
    uint64_t v186 = *(void *)(v3 + 112);
    if ((*(_WORD *)(v186 + 52) & 0x20) != 0)
    {
      uint64_t v187 = *(void *)(v186 + 40);
      --*(_DWORD *)(v187 + 152);
      *(void *)(v186 + 32) = *(void *)(v187 + 168);
      *(void *)(v187 + 168) = v186;
      (*(void (**)(void, void, void))(**(void **)(v187 + 72) + 144LL))( *(void *)(v187 + 72),  *(void *)(v187 + 200) * (*(_DWORD *)(v186 + 48) - 1),  *(void *)(v186 + 8));
    }

    else
    {
      sub_1812F9F44(v186);
    }

    char v4 = *(_BYTE *)(v1 + 84) - 1;
    *(_BYTE *)(v1 + 84) = v4;
    uint64_t v5 = *(void *)(v1 + 8LL * v4 + 144);
LABEL_4:
    *(void *)(v1 + 136) = v5;
    uint64_t v3 = v5;
    if ((_DWORD)v11) {
      goto LABEL_502;
    }
  }

  int v6 = *(unsigned __int8 *)(v1 + 84);
  if (*(_BYTE *)(v1 + 84)) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(v1 + 32) + 16LL);
  if (v7)
  {
    while (v7 == v1 || *(_BYTE *)v7 || *(void *)(v7 + 136) != *(void *)(v1 + 136))
    {
      uint64_t v7 = *(void *)(v7 + 40);
      if (!v7) {
        goto LABEL_10;
      }
    }

    int v385 = 85800;
    goto LABEL_501;
  }

  int8x16_t v84 = *(unsigned __int8 *)(v33 + 63);
  if ((_DWORD)a3)
  {
    if (v84 != 2)
    {
      sub_1812DC47C((uint64_t)a1, "use DROP TABLE to delete table %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      return sub_18128FF4C((void *)v9, (void *)a2);
    }
  }

  else if (v84 == 2)
  {
    sub_1812DC47C((uint64_t)a1, "use DROP VIEW to delete view %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
    return sub_18128FF4C((void *)v9, (void *)a2);
  }

  if (sub_1812B9B34(a1, v61, (uint64_t)v62, v53, v29, v30, v31, v32))
  {
    sub_18131EC34((uint64_t)a1, 1, v47);
    if (!(_DWORD)a3)
    {
      sub_181324DE8(a1, v47);
      sub_181324F90((uint64_t)a1, (int *)a2, v33, v89, v90, v91, v92, v93);
    }

    sub_1813252E0(a1, v33, v47, a3, v85, v86, v87, v88);
  }

  return sub_18128FF4C((void *)v9, (void *)a2);
}

LABEL_502:
  if (v2) {
    sub_1812FC960(v2);
  }
  return v11;
}

uint64_t sub_1812AEA4C(unsigned __int8 *a1, uint64_t a2, char a3, int a4)
{
  int v122 = a4;
  uint64_t v8 = *((void *)a1 + 1);
  unsigned __int8 v9 = a1[1];
  if ((v9 & 0x20) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)(v8 + 8) + 16LL);
    if (v10)
    {
      int v11 = *((_DWORD *)a1 + 20);
      while ((unsigned __int8 *)v10 == a1 || v11 && *(_DWORD *)(v10 + 80) != v11)
      {
        uint64_t v10 = *(void *)(v10 + 40);
        if (!v10)
        {
          if (!a1) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }

      uint64_t v12 = sub_1812FFCF0((unsigned __int8 *)v10, v11, a1);
      unsigned int v123 = v12;
      if ((_DWORD)v12) {
        return v12;
      }
      if (a4) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_12:
      a1[1] = v9 & 0xDF;
LABEL_13:
      unsigned int v123 = 0;
      if (a4)
      {
LABEL_14:
      }
    }
  }

  if (*a1 >= 3u)
  {
    uint64_t v12 = sub_18129B700(a1);
    unsigned int v123 = v12;
    if ((v12 & 0xFFFFFFEF) != 0) {
      return v12;
    }
  }

  if (*((void *)a1 + 16))
  {
    if (a3 & 2 | a4)
    {
      if (a4) {
        goto LABEL_46;
      }
    }

    else
    {
      __int16 v22 = *(_WORD *)(a2 + 32);
      if (v22)
      {
        uint64_t v23 = *(void *)(a2 + 24);
        v115[0] = *((void *)a1 + 16);
        v115[1] = v23;
        __int16 v117 = v22;
        char v118 = 0;
        char v119 = 0;
        uint64_t v24 = sub_181305F54((uint64_t)a1, v115, &v122);
      }

      else
      {
        uint64_t v24 = sub_1812AF8DC((uint64_t)a1, *(char **)a2, *(void *)(a2 + 8), (a3 & 8) != 0, &v122);
      }

      uint64_t v12 = v24;
      unsigned int v123 = v24;
      if ((_DWORD)v24) {
        return v12;
      }
      if (v122) {
        goto LABEL_46;
      }
    }

    sub_1812FFFE4((uint64_t)a1);
    uint64_t v13 = *((void *)a1 + 6);
    if (v13 == *(void *)(a2 + 8))
    {
      BOOL v116 = *(char **)a2;
      int v120 = v13;
      int v121 = 0;
      uint64_t v14 = *((void *)a1 + 17);
      uint64_t v15 = (_BYTE *)*((void *)a1 + 7);
      uint64_t v16 = *((unsigned __int16 *)a1 + 34);
      if ((unint64_t)&v15[v16] <= *(void *)(v14 + 88)
        && (unint64_t)v15 >= *(void *)(v14 + 80) + (unint64_t)*(unsigned __int16 *)(v14 + 18))
      {
        if ((_DWORD)v13 == (_DWORD)v16) {
          return sub_18130A35C(v14, v15, (uint64_t)v115, 0, v13);
        }
        else {
          return sub_18130A500((uint64_t)a1, (uint64_t)v115);
        }
      }

      int v17 = 86052;
      return sub_1812FBF50(v17);
    }
  }

  else
  {
    if (*(_BYTE *)(v8 + 19))
    {
      int v18 = *((_DWORD *)a1 + 20);
      uint64_t v19 = *(void *)(a2 + 8);
      *(_BYTE *)(v8 + 19) = 0;
      for (uint64_t i = *(void *)(*(void *)(v8 + 8) + 16LL); i; uint64_t i = *(void *)(i + 40))
      {
        if ((*(_BYTE *)(i + 1) & 0x10) != 0)
        {
          *(_BYTE *)(v8 + 19) = 1;
          if (*(_DWORD *)(i + 80) == v18 && *(void *)(i + 48) == v19) {
            *(_BYTE *)uint64_t i = 1;
          }
        }
      }
    }

    if ((a1[1] & 2) != 0 && *(void *)(a2 + 8) == *((void *)a1 + 6))
    {
      if (*((_WORD *)a1 + 35) && *((_DWORD *)a1 + 16) == *(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 36)) {
        return sub_18130A1EC((uint64_t)a1, a2);
      }
    }

    else if (!a4)
    {
      uint64_t v12 = sub_181305CF8((uint64_t)a1, *(void *)(a2 + 8), (a3 & 8) != 0, &v122);
      unsigned int v123 = v12;
      if ((_DWORD)v12) {
        return v12;
      }
    }
  }

LABEL_132:
    uint64_t v69 = *((unsigned __int16 *)a1 + 43);
    *((_WORD *)a1 + 35) = 0;
    if (v122)
    {
      uint64_t v70 = v27;
      int v71 = v114;
      if (v122 < 0 && *(_WORD *)(v25 + 24))
      {
        *((_WORD *)a1 + 43) = v69 + 1;
        LODWORD(v69) = (unsigned __int16)(v69 + 1);
        a1[1] &= ~2u;
      }

      goto LABEL_136;
    }

    if (v69 >= *(unsigned __int16 *)(v25 + 24))
    {
      int v17 = 86295;
      return sub_1812FBF50(v17);
    }

    uint64_t v70 = v27;
    uint64_t v74 = *(void *)(v25 + 112);
    uint64_t v75 = *(_DWORD **)(v74 + 40);
    if ((*(_WORD *)(v74 + 52) & 4) != 0 && v75[8] >= *(_DWORD *)(v74 + 48))
    {
      if (!v75[32])
      {
LABEL_173:
        int8x16_t v93 = (_DWORD *)(*(void *)(v25 + 80)
                       + ((*(unsigned __int8 *)(*(void *)(v25 + 96) + 2 * v69 + 1) | (*(unsigned __int8 *)(*(void *)(v25 + 96) + 2 * v69) << 8)) & (unint64_t)*(unsigned __int16 *)(v25 + 26)));
        if (!*(_BYTE *)(v25 + 8)) {
          _DWORD *v70 = *v93;
        }
        (*(void (**)(uint64_t, _DWORD *, uint64_t *))(v25 + 128))(v25, v93, v115);
        if ((_DWORD)v116 == WORD2(v116)) {
          unsigned int v94 = 0;
        }
        else {
          unsigned int v94 = sub_181309478(v25, (uint64_t)v93, (uint64_t)v115);
        }
        unsigned int v123 = v94;
        a1[1] &= ~4u;
        if (v114 == HIWORD(v116)
          && (_DWORD)v116 == WORD2(v116)
          && (!*(_BYTE *)(*(void *)(v8 + 8) + 33LL) || v114 < *(unsigned __int16 *)(v25 + 16)))
        {
          if ((unint64_t)v93 >= *(void *)(v25 + 80) + (unint64_t)*(unsigned __int8 *)(v25 + 9) + 10)
          {
            if ((unint64_t)v93 + v114 <= *(void *)(v25 + 88))
            {
              memcpy(v93, v70, v114);
              return 0LL;
            }

            int v17 = 86325;
          }

          else
          {
            int v17 = 86322;
          }

          return sub_1812FBF50(v17);
        }

        sub_1812AC27C(v25, v69, HIWORD(v116), &v123);
        uint64_t v12 = v123;
        int v71 = v114;
        if (v123) {
          return v12;
        }
LABEL_136:
        int v72 = v71 + 2;
        if (v71 + 2 > *(_DWORD *)(v25 + 20))
        {
          uint64_t v12 = 0LL;
          uint64_t v73 = *(unsigned __int8 *)(v25 + 12);
          *(_BYTE *)(v25 + 12) = v73 + 1;
          *(void *)(v25 + 8 * v73 + 40) = v70;
          *(_WORD *)(v25 + 2 * v73 + 28) = v69;
LABEL_210:
          if (!*(_BYTE *)(v25 + 12)) {
            return v12;
          }
          a1[1] &= ~2u;
          uint64_t v101 = sub_1812AC3A8((uint64_t)a1);
          uint64_t v12 = v101;
          *(_BYTE *)(*((void *)a1 + 17) + 12LL) = 0;
          *a1 = 1;
          if ((a3 & 2) == 0 || (_DWORD)v101) {
            return v12;
          }
          sub_1812FFDBC((uint64_t)a1);
          if (*((void *)a1 + 16))
          {
            uint64_t v102 = (void *)sub_18126F0AC(*(void *)(a2 + 8));
            *((void *)a1 + 3) = v102;
            if (!v102)
            {
              uint64_t v12 = 7LL;
              goto LABEL_218;
            }

            memcpy(v102, *(const void **)a2, *(void *)(a2 + 8));
          }

          uint64_t v12 = 0LL;
LABEL_218:
          *a1 = 3;
          *((void *)a1 + 9) = *(void *)(a2 + 8);
          return v12;
        }

        uint64_t v77 = *(void *)(v25 + 112);
        int8x16_t v78 = *(_DWORD **)(v77 + 40);
        if ((*(_WORD *)(v77 + 52) & 4) != 0 && v78[8] >= *(_DWORD *)(v77 + 48))
        {
          if (!v78[32]) {
            goto LABEL_157;
          }
          uint64_t v79 = sub_1812FAFE4(v77);
        }

        else
        {
          uint64_t v12 = v78[12];
          if ((_DWORD)v12) {
            goto LABEL_210;
          }
          if (v78[46] <= v78[50]) {
            uint64_t v79 = sub_1812ABE24(v77);
          }
          else {
            uint64_t v79 = sub_1812FED50(v77);
          }
        }

        uint64_t v12 = v79;
        if ((_DWORD)v79) {
          goto LABEL_210;
        }
LABEL_157:
        char v111 = a3;
        uint64_t v80 = 78662LL;
        uint64_t v81 = *(void *)(v25 + 80);
        uint64_t v82 = *(unsigned __int8 *)(v25 + 9);
        LODWORD(v115[0]) = 0;
        int v83 = *(unsigned __int16 *)(v25 + 18) + 2 * *(unsigned __int16 *)(v25 + 24);
        uint64_t v84 = v25;
        int8x16_t v85 = (unsigned __int16 *)(v82 + v81 + 5);
        int v86 = __rev16(*v85);
        if (v83 <= v86)
        {
          uint64_t v87 = v84;
          if (v86 <= *(_DWORD *)(*(void *)(v84 + 72) + 56LL)) {
            goto LABEL_165;
          }
          uint64_t v80 = 78665LL;
        }

        else
        {
          uint64_t v87 = v84;
          if (!v86 && *(_DWORD *)(*(void *)(v84 + 72) + 56LL) == 0x10000)
          {
            int v86 = 0x10000;
LABEL_165:
            uint64_t v113 = v81;
            uint64_t v88 = v82 + v81;
            int8x16_t v89 = sub_18130A988(v87, v114, v115);
            if (v89)
            {
              unint64_t v90 = (unint64_t)v89 - v113;
              if (v83 >= (int)v89 - (int)v113)
              {
                uint64_t v25 = v87;
                uint64_t v12 = sub_1812FD54C(78682LL, v87);
LABEL_209:
                a3 = v111;
                goto LABEL_210;
              }

              unint64_t v91 = v90 >> 8;
              uint64_t v25 = v87;
              int v92 = v114;
LABEL_194:
              *(_DWORD *)(v25 + 20) -= (unsigned __int16)v72;
              memcpy((void *)(v113 + (int)v90), v70, v92);
              uint64_t v96 = (_BYTE *)(*(void *)(v25 + 96) + 2LL * v69);
              memmove(v96 + 2, v96, 2 * (*(unsigned __int16 *)(v25 + 24) - (int)v69));
              *uint64_t v96 = v91;
              v96[1] = v90;
              ++*(_WORD *)(v25 + 24);
              uint64_t v97 = *(unsigned __int8 *)(v25 + 9) + v113;
              __int16 v98 = (*(_BYTE *)(v97 + 4))++ + 1;
              if ((v98 & 0x100) != 0) {
                ++*(_BYTE *)(*(unsigned __int8 *)(v25 + 9) + v113 + 3);
              }
              if (*(_BYTE *)(*(void *)(v25 + 72) + 33LL)
                && (unsigned int v125 = 0,
                    (*(void (**)(uint64_t, _DWORD *, uint64_t *))(v25 + 128))(v25, v70, v115),
                    v116 > WORD2(v116)))
              {
                unint64_t v99 = *(void *)(v25 + 88);
                if (v99 <= (unint64_t)v70 || (unint64_t)v70 + WORD2(v116) <= v99)
                {
                  sub_1812C0570( *(_DWORD **)(v25 + 72),  bswap32(*(_DWORD *)((char *)v70 + HIWORD(v116) - 4)),  3,  *(_DWORD *)(v25 + 4),  &v125);
                  uint64_t v12 = v125;
                }

                else
                {
                  uint64_t v12 = sub_1812FBF50(78404);
                }
              }

              else
              {
                uint64_t v12 = 0LL;
              }

              goto LABEL_209;
            }

            uint64_t v12 = LODWORD(v115[0]);
            if (!LODWORD(v115[0]))
            {
LABEL_187:
              if (v83 + v72 <= v86)
              {
LABEL_193:
                int v92 = v114;
                LODWORD(v90) = v86 - v114;
                LODWORD(v91) = v90 >> 8;
                unsigned __int16 *v85 = bswap32(v90) >> 16;
                uint64_t v25 = v87;
                goto LABEL_194;
              }

              if (*(_DWORD *)(v87 + 20) - v72 >= 4) {
                int v95 = 4;
              }
              else {
                int v95 = *(_DWORD *)(v87 + 20) - v72;
              }
              uint64_t v12 = sub_1812C01F4(v87, v95);
              if (!(_DWORD)v12)
              {
                int v86 = (unsigned __int16)(_byteswap_ushort(*v85) - 1) + 1;
                goto LABEL_193;
              }
            }

              *v74++ = -1;
LABEL_133:
              v64 += v77;
              v73 += v87;
              ++v75;
              a2 = v140;
              if (v75 >= *(int *)(v5 + 16))
              {
                uint64_t v50 = __srca;
                unint64_t v99 = __srca[2];
                goto LABEL_180;
              }
            }

            uint64_t v87 = 9;
LABEL_159:
            if (v76 == 255) {
              goto LABEL_132;
            }
            goto LABEL_160;
          }

          LODWORD(v99) = (_DWORD)v50 + 32;
LABEL_180:
          __int128 v132 = 0LL;
          v50[2] = (_DWORD)v74 - v99;
          int v51 = 1;
        }

        else
        {
          int v51 = 0;
          __int128 v132 = 7LL;
          a2 = v140;
        }

      unsigned int v56 = 1;
LABEL_133:
      uint64_t v60 = *(void *)(*(void *)(v5 + 24) + 32LL);
      uint64_t v79 = *(unsigned __int8 **)(v60 + 40);
      LODWORD(v78) = *(_DWORD *)(v60 + 80);
      if (v56)
      {
        unsigned int v61 = *(void *)(v5 + 16);
        if (v61)
        {
          do
          {
            uint64_t v64 = v61;
            if (*(_DWORD *)v61 == 1) {
              uint64_t v64 = *(void *)(v61 + 24);
            }
            int v62 = sub_181375764(*(_DWORD *)(*(void *)(v61 + 8) + 4LL), v51, &v79, &v78, *(void *)(v64 + 32));
            unsigned int v61 = *(void *)(v61 + 16);
            if (v61) {
              uint64_t v63 = v62 == 0;
            }
            else {
              uint64_t v63 = 1;
            }
          }

          while (!v63);
          unsigned int v56 = v62;
        }
      }

      int v71 = (void (**)(char *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_163;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v51);
      --qword_18C468B10;
      off_18C4653A8(v51);
      int v51 = (char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v71 = (void (**)(char *))&xmmword_18C465410;
LABEL_163:
        (*v71)(v51);
      }

      if (v56) {
        return 1LL;
      }
LABEL_88:
      if (*(_DWORD *)v5 != 1) {
        return 0LL;
      }
      int v44 = *(_DWORD **)(v5 + 8);
      if (v44)
      {
        if (*v44 == 1) {
          return 0LL;
        }
      }

      int v45 = *(void *)(v5 + 32);
      if (v45)
      {
LABEL_92:
        if (*(void *)(v5 + 40) != *(void *)(a1 + 48)) {
          return 0LL;
        }
        sub_18136F1D8(v45);
        return 0LL;
      }

      while (1)
      {
        int v46 = *(void *)(v5 + 24);
        if (*(void *)(v46 + 40) != *(void *)(a1 + 48)) {
          goto LABEL_98;
        }
        int v47 = *(void *)(v46 + 32);
        if (*(_DWORD *)(v47 + 32))
        {
          int v48 = *(void *)(v47 + 40);
          if (v48)
          {
            int v49 = &off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v48);
              --qword_18C468B10;
              off_18C4653A8(v48);
              int v48 = xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_97;
              }
              int v49 = &xmmword_18C465410;
            }

            (*v49)(v48);
          }
        }

    a4 = (unsigned __int8 *)v87;
  }

  while ((_DWORD)v32 && !DWORD2(v90));
  while (1)
  {
    uint64_t v70 = *v13;
    *uint64_t v13 = v70 - 24;
    sub_18138ED78(v70[1], (uint64_t *)v70 + 1);
  }

  int v71 = (void (**)(unsigned __int8 **))&off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v13);
    --qword_18C468B10;
    off_18C4653A8(v13);
    uint64_t v13 = (unsigned __int8 **)xmmword_18C468B70;
    int v72 = v82;
    if ((void)xmmword_18C468B70)
    {
      int v71 = (void (**)(unsigned __int8 **))&xmmword_18C465410;
      goto LABEL_145;
    }
  }

  else
  {
    int v72 = v82;
LABEL_145:
    (*v71)(v13);
  }

  if (*(_DWORD *)(v83 + 24) > v84 && *((void *)&v91 + 1) != 0LL && DWORD2(v90) == 0)
  {
    if (sqlite3_initialize()) {
      goto LABEL_157;
    }
    uint64_t v77 = (int *)sub_18126F0AC(8LL);
    if (!v77) {
      goto LABEL_157;
    }
    *(void *)uint64_t v77 = 0LL;
    *uint64_t v77 = 1;
    v77[1] = v84;
    sub_18138EC30((char *)&v89, *((uint64_t *)&v91 + 1), v77);
    if (DWORD2(v90)) {
      goto LABEL_158;
    }
LABEL_154:
    if (sqlite3_initialize())
    {
      *a5 = 0LL;
LABEL_157:
      DWORD2(v90) = 7;
      goto LABEL_158;
    }

    int8x16_t v78 = sub_18126F0AC(40LL);
    *a5 = v78;
    if (!v78) {
      goto LABEL_157;
    }
    uint64_t v79 = v78;
    if (*((void *)&v91 + 1))
    {
      *(void *)(v78 + 16) = *((void *)&v91 + 1);
    }

    else
    {
      if (!DWORD2(v90))
      {
        if (!sqlite3_initialize())
        {
          uint64_t v81 = sub_18126F0AC(56LL);
          if (v81)
          {
            *(void *)(v81 + 48) = 0LL;
            *(_OWORD *)(v81 + 16) = 0u;
            *(_OWORD *)(v81 + 32) = 0u;
            *(_OWORD *)uint64_t v81 = 0u;
            *(void *)(v79 + 16) = v81;
            *(_DWORD *)(v81 + 4) = 1;
            goto LABEL_176;
          }
        }

        DWORD2(v90) = 7;
      }

      *(void *)(v79 + 16) = 0LL;
    }

LABEL_131:
        unsigned int v123 = 0;
        goto LABEL_132;
      }

      v47 += v53;
      v33 += v53;
      LODWORD(v37) = v37 - v53;
      v51 -= v53;
    }

    while (v51);
    v115[0] = 0LL;
    int v54 = v124;
    unsigned int v55 = v124;
    if (*(_BYTE *)(v50 + 33))
    {
      unsigned int v56 = v124;
      while (1)
      {
        while (1)
        {
          unsigned int v57 = v56++;
          if (v56 < 2) {
            break;
          }
          unsigned int v58 = (v57 - 1) / (*(_DWORD *)(v50 + 56) / 5u + 1) * (*(_DWORD *)(v50 + 56) / 5u + 1);
          else {
            int v59 = 2;
          }
          if (v56 != v59 + v58) {
            goto LABEL_107;
          }
        }

        if (v56)
        {
LABEL_107:
          if (v57 != dword_18C54FA50 / *(_DWORD *)(v50 + 52))
          {
            unsigned int v55 = v57 + 1;
            unsigned int v124 = v57 + 1;
            break;
          }
        }
      }
    }

    uint64_t v60 = sub_1812B48CC(v50, v115, (int *)&v124, v55, 0);
    uint64_t v12 = v60;
    unsigned int v125 = v60;
    if (*(_BYTE *)(v50 + 33))
    {
      if (!(_DWORD)v60) {
        break;
      }
    }

    if ((_DWORD)v60) {
      goto LABEL_222;
    }
    unsigned int v61 = v124;
LABEL_118:
    *unint64_t v108 = bswap32(v61);
    if (v109)
    {
      uint64_t v63 = *(void *)(v109 + 112);
      if ((*(_WORD *)(v63 + 52) & 0x20) != 0)
      {
        uint64_t v64 = *(void *)(v63 + 40);
        --*(_DWORD *)(v64 + 152);
        *(void *)(v63 + 32) = *(void *)(v64 + 168);
        *(void *)(v64 + 168) = v63;
        (*(void (**)(void, void, void))(**(void **)(v64 + 72) + 144LL))( *(void *)(v64 + 72),  *(void *)(v64 + 200) * (*(_DWORD *)(v63 + 48) - 1),  *(void *)(v63 + 8));
      }

      else
      {
        sub_1812F9F44(v63);
      }
    }

    uint64_t v65 = v115[0];
    unint64_t v108 = *(_DWORD **)(v115[0] + 80);
    uint64_t v109 = v115[0];
    *unint64_t v108 = 0;
    int v47 = (char *)(*(void *)(v65 + 80) + 4LL);
    int v51 = *(_DWORD *)(v50 + 56) - 4;
  }

  unsigned int v61 = v124;
  if (v54) {
    int v62 = 4;
  }
  else {
    int v62 = 3;
  }
  sub_1812C0570((_DWORD *)v50, v124, v62, v54, &v125);
  uint64_t v12 = v125;
  if (!v125) {
    goto LABEL_118;
  }
  if (v115[0])
  {
    uint64_t v100 = *(void *)(v115[0] + 112);
    if ((*(_WORD *)(v100 + 52) & 0x20) != 0)
    {
      uint64_t v103 = *(void *)(v100 + 40);
      --*(_DWORD *)(v103 + 152);
      *(void *)(v100 + 32) = *(void *)(v103 + 168);
      *(void *)(v103 + 168) = v100;
      (*(void (**)(void, void, void))(**(void **)(v103 + 72) + 144LL))( *(void *)(v103 + 72),  *(void *)(v103 + 200) * (*(_DWORD *)(v100 + 48) - 1),  *(void *)(v100 + 8));
    }

    else
    {
      sub_1812F9F44(v100);
    }
  }

            free(v88);
            if (*(_BYTE *)(v13 + 67))
            {
              uint64_t v74 = *(void *)(v13 + 32);
              if ((v74 & 0x8000000000000000LL) == 0)
              {
                else {
                  uint64_t v75 = v93 * (v63 + v31) + 32;
                }
                if (off_18C550648) {
                  v73.n128_f64[0] = off_18C550648(v72);
                }
                uint64_t v76 = (*(uint64_t (**)(void, uint64_t *, __n128))(**(void **)(v13 + 16) + 48LL))( *(void *)(v13 + 16),  &__buf,  v73);
                uint64_t v77 = v76;
                if (!(_DWORD)v76)
                {
                  if (__buf <= v75)
                  {
                    uint64_t v77 = 0;
                  }

                  else
                  {
                    uint64_t v76 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 16) + 32LL))( *(void *)(v13 + 16),  v75);
                    uint64_t v77 = v76;
                  }
                }

                if (off_18C550650) {
                  off_18C550650(v76);
                }
                if (v77) {
                  sqlite3_log(v77, "cannot limit WAL size: %s", *(const char **)(v13 + 128));
                }
                *(_BYTE *)(v13 + 67) = 0;
              }
            }

            goto LABEL_147;
          }

          uint64_t v64 = (void (**)(unsigned int *))&xmmword_18C465410;
        }

        (*v64)(v55);
        goto LABEL_107;
      }
    }

    return 7LL;
  }

  free(v88);
  uint64_t v28 = 0LL;
  uint64_t v63 = 0;
LABEL_147:
  int8x16_t v78 = *(_DWORD *)(v13 + 88);
  if (v5 && !(_DWORD)v28)
  {
    uint64_t v79 = v5;
    do
    {
      if ((*(_WORD *)(v79 + 52) & 0x40) != 0) {
        uint64_t v28 = sub_18127E598(v13, ++v78, *(_DWORD *)(v79 + 48));
      }
      else {
        uint64_t v28 = 0LL;
      }
      uint64_t v79 = *(void *)(v79 + 32);
      if (v79) {
        uint64_t v80 = (_DWORD)v28 == 0;
      }
      else {
        uint64_t v80 = 0;
      }
    }

    while (v80);
  }

  uint64_t v81 = v28 == 0;
  if (!(_DWORD)v28 && v63 >= 1)
  {
    do
    {
      uint64_t v82 = sub_18127E598(v13, ++v78, *(_DWORD *)(v92 + 48));
      uint64_t v81 = v82 == 0;
      if ((_DWORD)v82) {
        int v83 = 0;
      }
      else {
        int v83 = v63 > 1;
      }
      --v63;
    }

    while (v83);
    uint64_t v28 = v82;
  }

  if (v81)
  {
    *(_WORD *)(v13 + 86) = v91 & 0xFF00 | WORD1(v91);
    *(_DWORD *)(v13 + 88) = v78;
    if (a4)
    {
      ++*(_DWORD *)(v13 + 80);
      *(_DWORD *)(v13 + 92) = a3;
      sub_18127E700(v13);
      *(_DWORD *)(v13 + 24) = v78;
    }
  }

  else if ((_DWORD)v28)
  {
    return v28;
  }

  uint64_t v28 = 0LL;
  uint64_t v84 = *(void *)(a1 + 112);
  if (v84 && v5)
  {
LABEL_171:
    sub_1812FC81C(v84, *(_DWORD *)(v5 + 48), *(void *)(v5 + 8));
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 32);
      if (!v5) {
        return 0LL;
      }
      uint64_t v84 = *(void *)(a1 + 112);
      if (v84) {
        goto LABEL_171;
      }
    }
  }

  return v28;
}

uint64_t sub_1812AF8DC(uint64_t a1, char *a2, int64_t a3, char a4, int *a5)
{
  unsigned int v6 = a3;
  if (!a2) {
    return sub_181305CF8(a1, a3, a4, a5);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  unint64_t v10 = (unint64_t)*(unsigned __int16 *)(v9 + 6) << 6;
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    uint64_t v12 = sub_1812F2264(v11, v10 + 104);
    if (v12) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v12 = sub_18126F0AC(v10 + 104);
    if (v12)
    {
LABEL_4:
      *(void *)uint64_t v12 = v9;
      *(void *)(v12 + 8) = v12 + 40;
      *(_WORD *)(v12 + 28) = *(_WORD *)(v9 + 6) + 1;
      sub_1812AF9EC(v9, v6, a2, v12);
      else {
        uint64_t v13 = sub_1812FBF50(77695);
      }
      uint64_t v15 = v13;
      sub_1812F20DC(*(void **)(*(void *)(a1 + 128) + 16LL), (void *)v12);
      return v15;
    }
  }

  return 7LL;
}

void sub_1812AF9EC(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 8);
  *(_BYTE *)(a4 + 30) = 0;
  unsigned int v8 = *a3;
  if ((v8 & 0x80) != 0)
  {
    int v10 = a3[1];
    if (a3[1] < 0)
    {
      int v11 = a3[2];
      if (v11 < 0)
      {
        unsigned int v9 = sub_18129BD74(a3, &v21);
        if (HIDWORD(v21)) {
          unsigned int v8 = -1;
        }
        else {
          unsigned int v8 = v21;
        }
      }

      else
      {
        unsigned int v8 = v11 & 0x7F | (v8 << 14) & 0x1FC07F | ((v10 & 0x7F) << 7);
        unsigned int v9 = 3;
      }
    }

    else
    {
      unsigned int v8 = ((v8 & 0x7F) << 7) | v10;
      unsigned int v9 = 2;
    }
  }

  else
  {
    unsigned int v9 = 1;
  }

  unsigned int v12 = 0;
  unsigned int v13 = v8;
  do
  {
    if (v9 >= v8 || v13 > a2) {
      break;
    }
    uint64_t v15 = &a3[v9];
    unsigned int v16 = *v15;
    if ((v16 & 0x80) != 0)
    {
      int v18 = v15[1];
      if (v15[1] < 0)
      {
        int v19 = v15[2];
        if (v19 < 0)
        {
          int v17 = sub_18129BD74(v15, &v21);
          unsigned int v16 = HIDWORD(v21) ? -1 : v21;
        }

        else
        {
          unsigned int v16 = v19 & 0x7F | (v16 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
          int v17 = 3;
        }
      }

      else
      {
        unsigned int v16 = ((v16 & 0x7F) << 7) | v18;
        int v17 = 2;
      }
    }

    else
    {
      int v17 = 1;
    }

    *(_BYTE *)(v7 + 22) = *(_BYTE *)(a1 + 4);
    *(void *)(v7 + 24) = *(void *)(a1 + 16);
    *(_DWORD *)(v7 + 32) = 0;
    *(void *)(v7 + 8) = 0LL;
    sub_18129BF0C(&a3[v13], v16, v7);
    unsigned int v14 = v16 < 0x80 ? byte_1813C6D70[v16] : (v16 - 12) >> 1;
    v9 += v17;
    v13 += v14;
    v7 += 64LL;
    ++v12;
  }

  while (v12 < *(unsigned __int16 *)(a4 + 28));
  if (v13 > a2 && v12)
  {
    if ((*(_WORD *)(v7 - 44) & 0x9000) != 0) {
      sub_181303888((int *)(v7 - 64));
    }
    else {
      *(_WORD *)(v7 - 44) = 1;
    }
  }

  *(_WORD *)(a4 + 28) = v12;
}

uint64_t sub_1812AFBF0(uint64_t a1, int a2, char *__src, int a4, _DWORD *__dst, unsigned int a6)
{
  uint64_t v7 = __dst;
  if (*(_BYTE *)(a1 + 12) || (int v12 = a4 + 2, a4 + 2 > *(_DWORD *)(a1 + 20)))
  {
    if (__dst) {
      memcpy(__dst, __src, a4);
    }
    else {
      uint64_t v7 = __src;
    }
    uint64_t result = 0LL;
    *uint64_t v7 = bswap32(a6);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 12);
    *(_BYTE *)(a1 + 12) = v14 + 1;
    *(void *)(a1 + 8 * v14 + 40) = v7;
    *(_WORD *)(a1 + 2 * v14 + 28) = a2;
    return result;
  }

  uint64_t v15 = *(void *)(a1 + 112);
  unsigned int v16 = *(_DWORD **)(v15 + 40);
  if ((*(_WORD *)(v15 + 52) & 4) != 0 && v16[8] >= *(_DWORD *)(v15 + 48))
  {
    if (!v16[32]) {
      goto LABEL_17;
    }
    uint64_t result = sub_1812FAFE4(*(void *)(a1 + 112));
  }

  else
  {
    uint64_t result = v16[12];
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v17 = *(void *)(a1 + 112);
    if (v16[46] <= v16[50]) {
      uint64_t result = sub_1812ABE24(v17);
    }
    else {
      uint64_t result = sub_1812FED50(v17);
    }
  }

  if ((_DWORD)result) {
    return result;
  }
LABEL_17:
  uint64_t v18 = 78662LL;
  uint64_t v19 = *(void *)(a1 + 80);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v39 = 0;
  int v21 = *(unsigned __int16 *)(a1 + 18) + 2 * *(unsigned __int16 *)(a1 + 24);
  __int16 v22 = (unsigned __int16 *)(v20 + v19 + 5);
  int v23 = __rev16(*v22);
  if (v21 > v23)
  {
    if (!v23 && *(_DWORD *)(*(void *)(a1 + 72) + 56LL) == 0x10000)
    {
      int v23 = 0x10000;
      goto LABEL_25;
    }

uint64_t sub_1812AFF08(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)v3)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (!**(void **)(a1 + 72)) {
        goto LABEL_18;
      }
      uint64_t v7 = *(uint64_t **)(a1 + 336);
      LODWORD(v8) = *((_DWORD *)v7 + 8);
      if ((v8 & 0x80000000) != 0)
      {
        uint64_t v8 = -1024LL * (int)v8 / (*((int *)v7 + 11) + (uint64_t)*((int *)v7 + 10));
        if (v8 >= 1000000000) {
          LODWORD(v8) = 1000000000;
        }
      }

      uint64_t v9 = *v7;
      if (*v7)
      {
        uint64_t v10 = 0LL;
        do
        {
          uint64_t v9 = *(void *)(v9 + 64);
          v10 += 100LL;
        }

        while (v9);
        if (!(_DWORD)v8)
        {
LABEL_18:
          for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
            *(_DWORD *)(i + 24) = 1;
LABEL_39:
          if (!*(void *)(a1 + 344))
          {
            uint64_t v3 = 0LL;
            *(_BYTE *)(a1 + 21) = 5;
            return v3;
          }

          return 0LL;
        }
      }

      else
      {
        uint64_t v10 = 0LL;
        if (!(_DWORD)v8) {
          goto LABEL_18;
        }
      }
    }

    if (*(void *)(a1 + 344))
    {
      uint64_t v18 = 0LL;
      int v12 = sub_1812FF3A4(*(uint64_t **)(a1 + 336));
      if (!v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(a1 + 288))(a1, 1LL, &v18, 0LL);
        int v12 = (_BYTE *)v18;
        *(void *)(v18 + 32) = 0LL;
      }

      uint64_t v3 = sub_1812FB334(a1, (uint64_t)v12, *(_DWORD *)(a1 + 32), 1);
      uint64_t v13 = v18;
      if (v18)
      {
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          uint64_t v16 = *(void *)(v18 + 40);
          --*(_DWORD *)(v16 + 152);
          *(void *)(v13 + 32) = *(void *)(v16 + 168);
          *(void *)(v16 + 168) = v13;
          (*(void (**)(void, void, void))(**(void **)(v16 + 72) + 144LL))( *(void *)(v16 + 72),  *(void *)(v16 + 200) * (*(_DWORD *)(v13 + 48) - 1),  *(void *)(v13 + 8));
        }

        else
        {
          sub_1812F9F44(v18);
        }
      }

      if (!(_DWORD)v3) {
        sub_1812FD2DC(*(uint64_t **)(a1 + 336));
      }
      goto LABEL_38;
    }

    uint64_t v3 = sub_1812FF5F0(a1);
    if (!(_DWORD)v3)
    {
      uint64_t v3 = sub_1812FF754(a1, a2);
      if (!(_DWORD)v3)
      {
        uint64_t v3 = sub_1812B9104(a1, 0);
        if (!(_DWORD)v3)
        {
          uint64_t v14 = sub_1812FF3A4(*(uint64_t **)(a1 + 336));
          uint64_t v3 = sub_1812B9394((void *)a1, (uint64_t)v14);
          if (!(_DWORD)v3)
          {
            sub_1812FD2DC(*(uint64_t **)(a1 + 336));
            unsigned int v15 = *(_DWORD *)(a1 + 32);
            if (v15 <= *(_DWORD *)(a1 + 40)
              || (uint64_t v3 = sub_1812C8DA0(a1, v15 - (v15 == *(_DWORD *)(a1 + 192))), !(_DWORD)v3))
            {
              if (a3) {
                goto LABEL_39;
              }
              uint64_t v3 = sub_1812D62B8(a1, (uint64_t)a2);
LABEL_38:
              if ((_DWORD)v3) {
                return v3;
              }
              goto LABEL_39;
            }
          }
        }
      }
    }
  }

  return v3;
}

uint64_t sub_1812B0188(uint64_t result, int a2, int a3, unsigned int *a4, uint64_t a5)
{
  *(_BYTE *)a5 = HIBYTE(a2);
  *(_BYTE *)(a5 + 1) = BYTE2(a2);
  *(_BYTE *)(a5 + 2) = BYTE1(a2);
  *(_BYTE *)(a5 + 3) = a2;
  *(_BYTE *)(a5 + 4) = HIBYTE(a3);
  *(_BYTE *)(a5 + 5) = BYTE2(a3);
  *(_BYTE *)(a5 + 6) = BYTE1(a3);
  *(_BYTE *)(a5 + 7) = a3;
  if (*(_DWORD *)(result + 124))
  {
    *(void *)(a5 + 8) = 0LL;
    *(void *)(a5 + 16) = 0LL;
  }

  else
  {
    uint64_t v6 = result;
    *(void *)(a5 + 8) = *(void *)(result + 104);
    uint64_t v7 = (int *)(result + 96);
    int v8 = *(_DWORD *)(result + 96);
    int v9 = *(unsigned __int8 *)(result + 85);
    BOOL v10 = *(_BYTE *)(result + 85) == 0;
    int v11 = v7[1];
    int v12 = v8 + v11;
    unsigned int v13 = *(_DWORD *)a5;
    if (v9)
    {
      unsigned int v13 = bswap32(v13);
      unsigned int v14 = bswap32(*(_DWORD *)(a5 + 4));
    }

    else
    {
      unsigned int v14 = *(_DWORD *)(a5 + 4);
    }

    int v15 = v12 + v13;
    *(_DWORD *)(v6 + 96) = v15;
    *(_DWORD *)(v6 + 100) = v14 + v11 + v15;
    uint64_t result = sub_1812FBE28(v10, a4, *(_DWORD *)(v6 + 56), v7, v7);
    *(_DWORD *)(a5 + 16) = bswap32(*(_DWORD *)(v6 + 96));
    *(_DWORD *)(a5 + 20) = bswap32(*(_DWORD *)(v6 + 100));
  }

  return result;
}

uint64_t sub_1812B0268(uint64_t a1, char *__buf, uint64_t a3, off_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 160)
    || (off_t v7 = a4, LODWORD(v8) = a3, v9 = __buf, (v10 = *(void *)(a1 + 64)) != 0) && *(_DWORD *)(*(void *)v10 + 168LL))
  {
    sqlite3_log(27, "denying write to invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    int v11 = sub_1812F35E0(a1, a4, __buf, a3);
    BOOL v12 = v11 < (int)v8;
    if (v11 < (int)v8 && v11 >= 1)
    {
      do
      {
        uint64_t v8 = (v8 - v11);
        v7 += v11;
        v9 += v11;
        int v11 = sub_1812F35E0(a1, v7, v9, v8);
        BOOL v12 = v11 < (int)v8;
      }

      while (v11 < (int)v8 && v11 > 0);
    }

    if (v12)
    {
      if (*(_DWORD *)(a1 + 32) == 28)
      {
        unsigned int v14 = *(const char **)(a1 + 56);
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(28, __strerrbuf, 0x4FuLL);
        int v15 = &byte_1813CEAEE;
        if (v14) {
          int v15 = v14;
        }
        uint64_t v5 = 13LL;
        sqlite3_log(13, "os_unix.c:%d: (%d) %s(%s) - %s", 44378, 28, "unixWrite", v15, __strerrbuf);
      }

      else
      {
        return 778LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_1812B03F0(uint64_t a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 160) || (uint64_t v5 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v5 + 168LL))
  {
    sqlite3_log(27, "denying sync of invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    if ((a2 & 0xF) == 3) {
      int v6 = 85;
    }
    else {
      int v6 = 0;
    }
    if ((*(_BYTE *)(a1 + 128) & 2) != 0) {
      int v7 = 51;
    }
    else {
      int v7 = v6;
    }
    int v8 = *(_DWORD *)(a1 + 24);
    if ((!v7 || fcntl(v8, v7, 0LL)) && fsync(v8))
    {
      *(_DWORD *)(a1 + 32) = *__error();
      int v9 = *(const char **)(a1 + 56);
      int v10 = *__error();
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v10, __strerrbuf, 0x4FuLL);
      int v11 = &byte_1813CEAEE;
      if (v9) {
        int v11 = v9;
      }
      uint64_t v3 = 1034LL;
      sqlite3_log(1034, "os_unix.c:%d: (%d) %s(%s) - %s", 44635, v10, "full_fsync", v11, __strerrbuf);
    }

    else if ((*(_WORD *)(a1 + 30) & 8) != 0)
    {
      if (!off_18C54FE60(*(const char **)(a1 + 56), &v15))
      {
        fsync(v15);
        if ((v15 & 0x80000000) == 0)
        {
          if (off_18C54FCE0(v15))
          {
            BOOL v12 = *(const char **)(a1 + 56);
            int v13 = *__error();
            __int128 v19 = 0u;
            __int128 v20 = 0u;
            __int128 v17 = 0u;
            __int128 v18 = 0u;
            *(_OWORD *)__strerrbuf = 0u;
            strerror_r(v13, __strerrbuf, 0x4FuLL);
            unsigned int v14 = &byte_1813CEAEE;
            if (v12) {
              unsigned int v14 = v12;
            }
            sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 44655, v13, "close", v14, __strerrbuf);
          }
        }
      }

      uint64_t v3 = 0LL;
      *(_WORD *)(a1 + 30) &= ~8u;
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

unint64_t sub_1812B060C(unint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 120) >= a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 32);
    if ((_DWORD)v4)
    {
      for (unint64_t i = 0LL; i < v4; ++i)
      {
        unint64_t v6 = *(void *)(*(void *)(v3 + 40) + 8 * i);
        unint64_t v9 = v6;
        if (v6)
        {
          do
          {
            unsigned int v7 = *(_DWORD *)(v6 + 16);
            unint64_t v6 = *(void *)(v6 + 24);
            if (v7 >= a2) {
              uint64_t result = sub_18135E590((int *)v3, &v9);
            }
            unint64_t v9 = v6;
          }

          while (v6);
          unint64_t v4 = *(unsigned int *)(v3 + 32);
        }
      }
    }

    unsigned int v8 = a2 - 1;
    if (!a2) {
      unsigned int v8 = 0;
    }
    *(_DWORD *)(v3 + 120) = v8;
  }

  return result;
}

uint64_t sub_1812B06B0(uint64_t a1, sqlite3 *db, char *zDb, int a4)
{
  if ((int)a1 <= a4)
  {
    if (off_18C550648) {
      off_18C550648(a1);
    }
    uint64_t v6 = sqlite3_wal_checkpoint_v2(db, zDb, 0, 0LL, 0LL);
    if (off_18C550650) {
      off_18C550650(v6);
    }
  }

  return 0LL;
}

void sub_1812B0714( uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v53 = 0LL;
  if (!a2 || !v8) {
    return;
  }
  uint64_t v9 = a4;
  int v13 = *(unsigned __int8 *)a2;
  uint64_t v14 = v13 ^ 1u;
  switch(*(_BYTE *)a2)
  {
    case 0x13:
      sub_1812BDE64(a1, a2[2], a3, a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 0x2B:
    case 0x2C:
      uint64_t v15 = sub_18131E690((unsigned __int8 *)a2);
      if ((unsigned __int8 **)v15 != a2)
      {
        uint64_t v20 = v15;
LABEL_43:
        sub_1812B0714(a1, v20);
        goto LABEL_54;
      }

      if (v13 == 44)
      {
        sub_1812B0714(a1, a2[2]);
        uint64_t v20 = (uint64_t)a2[3];
        goto LABEL_43;
      }

      uint64_t v52 = (*(_DWORD *)(a1 + 68) - 1);
      *(_DWORD *)(a1 + 68) = v52;
      sub_1812BDE64(a1, a2[2], v52, v9 ^ 0x10, v16, v17, v18, v19);
      sub_1812B0714(a1, a2[3]);
      sub_18131B3E0(v8, v52);
      goto LABEL_54;
    case 0x2D:
    case 0xAB:
      if (v13 == 45) {
        uint64_t v14 = 52LL;
      }
      else {
        uint64_t v14 = 53LL;
      }
      uint64_t v9 = 128LL;
      goto LABEL_10;
    case 0x30:
      sub_18131B410( (unsigned int *)a1,  (uint64_t)a2,  a3,  (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1812B0714,  a4,  a6,  a7,  a8);
      goto LABEL_54;
    case 0x31:
      if ((_DWORD)a4)
      {
        sub_1812B26A4((void **)a1, (uint64_t)a2, a3, a3, a5, a6, a7, a8);
      }

      else
      {
        uint64_t v51 = (*(_DWORD *)(a1 + 68) - 1);
        *(_DWORD *)(a1 + 68) = v51;
        sub_1812B26A4((void **)a1, (uint64_t)a2, a3, v51, a5, a6, a7, a8);
        sub_18131B3E0(v8, v51);
      }

      goto LABEL_54;
    case 0x32:
    case 0x33:
      uint64_t v29 = sub_18131A8A4(a1, a2[2], (_DWORD *)&v53 + 1);
      uint64_t v30 = v29;
      if (*(_BYTE *)(*(void *)v8 + 103LL)) {
        uint64_t v31 = &byte_18C550680;
      }
      else {
        uint64_t v31 = (char *)(*(void *)(v8 + 136) + 40LL * *(int *)(v8 + 144) - 40);
      }
      if (*((_DWORD *)v31 + 3) == (_DWORD)v29 && *v31 == 94) {
        *((_WORD *)v31 + 1) |= 0x80u;
      }
      int v45 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v45)
      {
        *(_DWORD *)(v8 + 144) = v45 + 1;
        uint64_t v28 = *(void *)(v8 + 136) + 40LL * v45;
        *(_BYTE *)uint64_t v28 = v13 ^ 1;
        *(_WORD *)(v28 + 2) = 0;
        *(_DWORD *)(v28 + 4) = v29;
        *(_DWORD *)(v28 + 8) = a3;
        *(_BYTE *)(v28 + 1) = 0;
        goto LABEL_50;
      }

      uint64_t v43 = v8;
      uint64_t v44 = v13 ^ 1u;
      goto LABEL_52;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
LABEL_10:
      uint64_t v21 = a2[2];
      int v22 = *v21;
      if (v22 == 176) {
        int v22 = v21[2];
      }
      if (v22 == 138)
      {
        int v23 = (int **)(*((void *)v21 + 4) + 32LL);
      }

      else
      {
        if (v22 != 177)
        {
LABEL_17:
          uint64_t v24 = sub_18131A8A4(a1, v21, (_DWORD *)&v53 + 1);
          uint64_t v25 = sub_18131A8A4(a1, a2[3], &v53);
          sub_1812B0BB0(a1, a2[2], a2[3], v14, v24, v25, a3, v9, (*((_DWORD *)a2 + 1) >> 10) & 1);
          goto LABEL_54;
        }

        int v23 = (int **)(v21 + 32);
      }

      if (**v23 <= 1) {
        goto LABEL_17;
      }
LABEL_18:
      int v26 = *((_DWORD *)a2 + 1);
      if ((v26 & 0x20000001) != 0x20000000)
      {
        if ((v26 & 0x10000001) == 0x10000000) {
          goto LABEL_54;
        }
        uint64_t v32 = sub_18131A8A4(a1, (unsigned __int8 *)a2, (_DWORD *)&v53 + 1);
        uint64_t v30 = v32;
        BOOL v33 = (_DWORD)v9 != 0;
        int v34 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v34)
        {
          *(_DWORD *)(v8 + 144) = v34 + 1;
          uint64_t v35 = *(void *)(v8 + 136) + 40LL * v34;
          *(_DWORD *)uint64_t v35 = 17;
          *(_DWORD *)(v35 + 4) = v32;
          *(_DWORD *)(v35 + 8) = a3;
          *(_DWORD *)(v35 + 12) = v33;
          *(void *)(v35 + 24) = 0LL;
          *(void *)(v35 + 32) = 0LL;
          *(void *)(v35 + 16) = 0LL;
          goto LABEL_54;
        }

        uint64_t v43 = v8;
        uint64_t v44 = 17LL;
        uint64_t v46 = a3;
        goto LABEL_53;
      }

      int v27 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v27)
      {
        uint64_t v43 = v8;
        uint64_t v44 = 9LL;
        uint64_t v30 = 0LL;
LABEL_52:
        uint64_t v46 = a3;
        BOOL v33 = 0LL;
LABEL_53:
        sub_18131044C(v43, v44, v30, v46, v33, a6, a7, a8);
        goto LABEL_54;
      }

      *(_DWORD *)(v8 + 144) = v27 + 1;
      uint64_t v28 = *(void *)(v8 + 136) + 40LL * v27;
      *(void *)uint64_t v28 = 9LL;
      *(_DWORD *)(v28 + 8) = a3;
LABEL_50:
      *(void *)(v28 + 12) = 0LL;
      *(void *)(v28 + 28) = 0LL;
      *(void *)(v28 + 20) = 0LL;
      *(_DWORD *)(v28 + 36) = 0;
LABEL_54:
      int v47 = HIDWORD(v53);
      if (HIDWORD(v53))
      {
        uint64_t v48 = *(unsigned __int8 *)(a1 + 31);
        if (v48 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v48 + 1;
          *(_DWORD *)(a1 + 4 * v48 + 224) = v47;
        }
      }

      int v49 = v53;
      if ((_DWORD)v53)
      {
        uint64_t v50 = *(unsigned __int8 *)(a1 + 31);
        if (v50 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v50 + 1;
          *(_DWORD *)(a1 + 4 * v50 + 224) = v49;
        }
      }

      return;
    case 0xAF:
      int v36 = *((unsigned __int8 *)a2 + 2);
      uint64_t v37 = a2[3];
      while (1)
      {
        int v38 = *((_DWORD *)v37 + 1);
        if ((v38 & 0x82000) == 0) {
          break;
        }
        if ((v38 & 0x80000) != 0) {
          uint64_t v37 = *(unsigned __int8 **)(*((void *)v37 + 4) + 8LL);
        }
        else {
          uint64_t v37 = (unsigned __int8 *)*((void *)v37 + 2);
        }
      }

      BOOL v39 = v36 == 171;
      BOOL v40 = v36 != 171;
      int v41 = v39;
      unint64_t v42 = a2[2];
      if (((v41 ^ (*(_BYTE *)(*((void *)v37 + 1) + 4LL) != 0)) & 1) != 0) {
        sub_1812BDE64(a1, v42, a3, (16 * v40), a5, a6, a7, a8);
      }
      else {
        sub_1812B0714(a1, v42);
      }
      goto LABEL_54;
    default:
      goto LABEL_18;
  }

uint64_t sub_1812B0BB0( uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (*(_DWORD *)(result + 48)) {
    return result;
  }
  char v9 = a8;
  uint64_t v16 = result;
  if (a9)
  {
    if ((a3[5] & 2) == 0)
    {
      if (a2 && (a2[5] & 2) != 0) {
        goto LABEL_13;
      }
      uint64_t v17 = sub_181289D04(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v17) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return sub_18126DFE0((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, 128LL, 0LL, ppStmt, pzTail, v5);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
LABEL_8:
    uint64_t v6 = &qword_1813C6E90;
    goto LABEL_9;
  }

  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
LABEL_9:
  int v8 = *((unsigned __int16 *)v6 + 10);
  if ((~v8 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 1)
  {
    if ((v8 & 1) != 0)
    {
      char v9 = 0LL;
      if (!a1) {
        return v9;
      }
    }

    else
    {
      char v9 = (const unsigned __int8 *)sub_181303998((int *)v6, 1);
      if (!a1) {
        return v9;
      }
    }
  }

  else
  {
    char v9 = (const unsigned __int8 *)v6[1];
    if (!a1) {
      return v9;
    }
  }

  uint64_t v10 = *(void *)a1;
  unsigned int v11 = *((_DWORD *)a1 + 13);
  if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    int v12 = sub_1813037C4(v10, v11);
    uint64_t v10 = *(void *)a1;
  }

  *((_DWORD *)a1 + 13) = v12;
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_18C465410(v13);
  }
  return v9;
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    if (v4) {
      xmmword_18C465400(v4);
    }
    uint64_t v5 = *((void *)a1 + 20);
    if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
    {
      uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
      goto LABEL_9;
    }

    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
  }

  uint64_t v6 = &qword_1813C6E90;
LABEL_9:
  __int16 v8 = *((_WORD *)v6 + 10);
  if ((v8 & 0x24) != 0)
  {
    sqlite3_int64 v9 = *v6;
  }

  else if ((v8 & 8) != 0)
  {
    double v15 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v15 <= 9.22337204e18) {
        sqlite3_int64 v9 = (uint64_t)v15;
      }
      else {
        sqlite3_int64 v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      sqlite3_int64 v9 = 0x8000000000000000LL;
    }
  }

  else if ((v8 & 0x12) != 0 && v6[1])
  {
    sqlite3_int64 v9 = sub_181303DF0((uint64_t)v6);
  }

  else
  {
    sqlite3_int64 v9 = 0LL;
  }

  if (a1)
  {
    uint64_t v10 = *(void *)a1;
    unsigned int v11 = *((_DWORD *)a1 + 13);
    if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      int v12 = sub_1813037C4(v10, v11);
      uint64_t v10 = *(void *)a1;
    }

    *((_DWORD *)a1 + 13) = v12;
    uint64_t v13 = *(void *)(v10 + 24);
    if (v13) {
      xmmword_18C465410(v13);
    }
  }

  return v9;
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  uint64_t v1 = pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)pStmt;
    uint64_t v3 = *(void *)(*(void *)pStmt + 24LL);
    if (v3) {
      xmmword_18C465400(v3);
    }
    sub_1812D6A08(v2, (uint64_t)v1);
    unsigned int v4 = sub_18127A3A0((void **)v1);
    *((_BYTE *)v1 + 267) = 1;
    *((_DWORD *)v1 + 13) = 0;
    *((_WORD *)v1 + 132) = -254;
    *((void *)v1 + 7) = 0LL;
    *(void *)((char *)v1 + 44) = 0xFFFFFFFF00000001LL;
    *((_DWORD *)v1 + 16) = 0;
    *((void *)v1 + 10) = 0LL;
    if (v4 || (LODWORD(v1) = 0, *(_BYTE *)(v2 + 103))) {
      LODWORD(v1) = sub_1813037C4(v2, v4);
    }
    uint64_t v5 = *(void *)(v2 + 24);
    if (v5) {
      xmmword_18C465410(v5);
    }
  }

  return (int)v1;
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
    if (v2) {
      xmmword_18C465400(*(void *)(*(void *)a1 + 24LL));
    }
    int v3 = *((_DWORD *)a1 + 8);
    if (v3 >= 1)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
      uint64_t v6 = *((void *)a1 + 16);
      do
      {
        uint64_t v7 = v6 + v4;
        if ((*(_WORD *)(v6 + v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32))
        {
          sub_181303838(v7);
          uint64_t v6 = *((void *)a1 + 16);
          int v3 = *((_DWORD *)a1 + 8);
        }

        *(_WORD *)(v6 + v4 + 20) = 1;
        ++v5;
        v4 += 64LL;
      }

      while (v5 < v3);
    }

    if (*((_DWORD *)a1 + 93)) {
      *((_WORD *)a1 + 134) = *((_WORD *)a1 + 134) & 0xFFFC | 1;
    }
    if (v2) {
      xmmword_18C465410(v2);
    }
  }

  return 0;
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return sub_181266F84((char *)filename, (uint64_t *)ppDb, 6u, 0LL);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_14;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(189509);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_14;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (v6)
  {
    xmmword_18C465400(v6);
    uint64_t v7 = *((void *)a1 + 3);
    if (onoff) {
      int v8 = -1;
    }
    else {
      int v8 = 255;
    }
    *((_DWORD *)a1 + 22) = v8;
    if (v7) {
      xmmword_18C465410(v7);
    }
  }

  else
  {
    if (onoff) {
      int v10 = -1;
    }
    else {
      int v10 = 255;
    }
    *((_DWORD *)a1 + 22) = v10;
  }

  return 0;
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_13;
  }

  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1812CF36C(187104);
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_13;
    }

    goto LABEL_5;
  }

  uint64_t v6 = *((void *)a1 + 3);
  if (ms < 1)
  {
    if (v6)
    {
      xmmword_18C465400(v6);
      uint64_t v9 = *((void *)a1 + 3);
      *(_OWORD *)((char *)a1 + 664) = 0u;
      *((void *)a1 + 85) = a1;
      *((_DWORD *)a1 + 172) = 0;
      if (v9) {
        xmmword_18C465410(v9);
      }
    }

    else
    {
      *(_OWORD *)((char *)a1 + 664) = 0u;
      *((void *)a1 + 85) = a1;
      *((_DWORD *)a1 + 172) = 0;
    }

    *((_DWORD *)a1 + 193) = 0;
  }

  else if (v6)
  {
    xmmword_18C465400(v6);
    uint64_t v7 = *((void *)a1 + 3);
    *((void *)a1 + 83) = sub_1812E0848;
    *((void *)a1 + 84) = a1;
    *((void *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    if (v7) {
      xmmword_18C465410(v7);
    }
    *((_DWORD *)a1 + 193) = ms;
  }

  else
  {
    *((void *)a1 + 83) = sub_1812E0848;
    *((void *)a1 + 84) = a1;
    *((void *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    *((_DWORD *)a1 + 193) = ms;
  }

  return 0;
}

int sqlite3_changes(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_DWORD *)a1 + 30);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186291);
  return 0;
}

int sqlite3_set_authorizer( sqlite3 *a1, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_16;
  }

  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1812CF36C(127458);
  }

  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_16;
    }

    goto LABEL_5;
  }

  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_18C465400(v8);
  }
  *((void *)a1 + 66) = xAuth;
  *((void *)a1 + 67) = pUserData;
  if (xAuth)
  {
    for (uint64_t i = *((void *)a1 + 1); i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 2;
  }

  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_18C465410(v10);
  }
  return 0;
}

uint64_t sub_1812B14B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (char *)a3;
  int v9 = a2;
  int v11 = *(_DWORD *)(a1 + 144);
  if (v11 + (int)a2 > *(_DWORD *)(a1 + 148))
  {
    int v11 = *(_DWORD *)(a1 + 144);
  }

  uint64_t v13 = *(void *)(a1 + 136);
  uint64_t result = v13 + 40LL * v11;
  if (v9 >= 1)
  {
    uint64_t v14 = v13 + 40LL * v11 + 8;
    int v15 = v9;
    do
    {
      uint64_t v16 = *v8;
      *(_BYTE *)(v14 - 8) = v16;
      *(_DWORD *)(v14 - 4) = v8[1];
      int v17 = v8[2];
      *(_DWORD *)uint64_t v14 = v17;
      if ((byte_1813C6495[v16] & 1) != 0 && v17 >= 1) {
        *(_DWORD *)uint64_t v14 = *(_DWORD *)(a1 + 144) + v17;
      }
      *(_DWORD *)(v14 + 4) = v8[3];
      *(_BYTE *)(v14 - 7) = 0;
      *(void *)(v14 + 8) = 0LL;
      *(_WORD *)(v14 - 6) = 0;
      v14 += 40LL;
      v8 += 4;
      --v15;
    }

    while (v15);
    int v11 = *(_DWORD *)(a1 + 144);
  }

  *(_DWORD *)(a1 + 144) = v11 + v9;
  return result;
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  int v1 = (unsigned __int16 *)pStmt;
  if (pStmt)
  {
    if (*(void *)(*(void *)pStmt + 24LL))
    {
      xmmword_18C465400();
      uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
      LODWORD(v1) = v1[130];
      if (v2) {
        xmmword_18C465410();
      }
    }

    else
    {
      LODWORD(v1) = *((unsigned __int16 *)pStmt + 130);
    }
  }

  return (int)v1;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    if (v4) {
      xmmword_18C465400(v4);
    }
    uint64_t v5 = *((void *)a1 + 20);
    if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
    {
      uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
      goto LABEL_9;
    }

    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
  }

  uint64_t v6 = &qword_1813C6E90;
LABEL_9:
  __int16 v8 = *((_WORD *)v6 + 10);
  if ((v8 & 0x24) != 0)
  {
    double v9 = *(double *)v6;
  }

  else if ((v8 & 8) != 0)
  {
    double v15 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v15 <= 9.22337204e18) {
        *(void *)&double v9 = (uint64_t)v15;
      }
      else {
        LODWORD(v9) = -1;
      }
    }

    else
    {
      LODWORD(v9) = 0;
    }
  }

  else if ((v8 & 0x12) != 0 && v6[1])
  {
    LODWORD(v9) = sub_181303DF0((uint64_t)v6);
  }

  else
  {
    LODWORD(v9) = 0;
  }

  if (a1)
  {
    uint64_t v10 = *(void *)a1;
    unsigned int v11 = *((_DWORD *)a1 + 13);
    if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      int v12 = sub_1813037C4(v10, v11);
      uint64_t v10 = *(void *)a1;
    }

    *((_DWORD *)a1 + 13) = v12;
    uint64_t v13 = *(void *)(v10 + 24);
    if (v13) {
      xmmword_18C465410(v13);
    }
  }

  return LODWORD(v9);
}

uint64_t sub_1812B1738(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112)) {
    return *(unsigned int *)(a1 + 116);
  }
  if ((*(_WORD *)(a1 + 30) & 0x10) != 0) {
    *(_DWORD *)(a1 + 116) |= 0x1000u;
  }
  *(_DWORD *)(a1 + 112) = 4096;
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1812B176C(uint64_t a1, signed int a2)
{
  return sub_1812F3970(a1, a2, 0);
}

uint64_t sub_1812B1774(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void *sub_1812B177C( void *result, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)*result;
  uint64_t v11 = result[43];
  if (!v11) {
    goto LABEL_3;
  }
  uint64_t v12 = (uint64_t)result;
  if (*((_BYTE *)result + 302) == 1) {
    goto LABEL_3;
  }
  uint64_t v66 = *result;
  if (!a2)
  {
    uint64_t v15 = *(__int16 *)(v11 + 54);
    if (v15 < 1) {
      goto LABEL_5;
    }
    if (a4)
    {
      int v14 = *(_DWORD *)a4;
      if (*(_DWORD *)a4 != 1)
      {
        sub_1812DC47C( (uint64_t)result,  "foreign key on %s should reference only one column of table %T",  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  *(void *)(*(void *)(v11 + 8) + 16LL * (v15 - 1)));
        return sub_181311F48(v10, a4);
      }

      goto LABEL_15;
    }

    __int16 v16 = a5;
    int v14 = 1;
LABEL_26:
    int v64 = 0;
    int v65 = v14;
    int v17 = (int *)(a3 + 8);
    uint64_t v18 = *(unsigned int *)(a3 + 8) + 16LL * (v14 - 1) + 81;
    if (!v10) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }

  int v14 = *(_DWORD *)a2;
  if (!a4)
  {
    __int16 v16 = a5;
    goto LABEL_26;
  }

  if (*(_DWORD *)a4 != v14)
  {
    sub_1812DC47C( (uint64_t)result,  "number of columns in foreign key does not match the number of columns in the referenced table",  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  v62);
LABEL_4:
    uint64_t result = sub_181311F48(v10, a2);
    goto LABEL_5;
  }

LABEL_42:
        if (++v36 == v65) {
          goto LABEL_59;
        }
      }
    }
  }

  else
  {
    *((_DWORD *)v22 + 16) = *(__int16 *)(v11 + 54) - 1;
LABEL_59:
    int v44 = v64;
    if (v65 <= 0) {
      int v44 = 0;
    }
    if (v44 == 1)
    {
      uint64_t v45 = 0LL;
      uint64_t v46 = &v23[v35 + 1];
      do
      {
        uint64_t v48 = &a4[3 * v45];
        int v49 = (const void *)v48[2];
        if (v49) {
          size_t v50 = strlen((const char *)v48[2]) & 0x3FFFFFFF;
        }
        else {
          size_t v50 = 0LL;
        }
        v22[2 * v45 + 9] = v46;
        if (*(unsigned __int8 *)(v12 + 302) >= 2u)
        {
          uint64_t v51 = *(const void ***)(v12 + 408);
          if (v51)
          {
            while (*v51 != v49)
            {
              uint64_t v51 = (const void **)v51[3];
              if (!v51) {
                goto LABEL_64;
              }
            }

            *uint64_t v51 = v46;
          }
        }

      *(void *)(a1 + 320) = v15;
      goto LABEL_43;
    }

    uint64_t v13 = 8;
    goto LABEL_43;
  }

  if (*(_BYTE *)(v12 + 16))
  {
    uint64_t v13 = 0;
  }

  else
  {
    uint64_t v13 = 0;
    if (!*(_BYTE *)(v12 + 20)) {
      goto LABEL_43;
    }
  }

  if ((_DWORD)v22 != v24) {
    goto LABEL_42;
  }
LABEL_43:
  uint64_t v25 = *(_DWORD *)(v21 + 64);
  int v59 = *(unsigned __int8 *)(*(void *)v23 + 9LL);
  uint64_t v60 = v23[13];
  if (nPage)
  {
    uint64_t v26 = *((unsigned int *)p + 6);
    uint64_t v27 = 1;
    while (v26 <= v25 && !v13)
    {
      uint64_t v28 = v27;
      if ((_DWORD)v26 == dword_18C54FA50 / *(_DWORD *)(*(void *)(*((void *)p + 5) + 8LL) + 52LL) + 1)
      {
        uint64_t v13 = 0;
      }

      else
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v11 + 288))(v11, v26, &v62, 2LL);
        if (!v13)
        {
          uint64_t v13 = sub_1812D5C44((uint64_t)p, v26, *(void *)(v62 + 8), 0);
          uint64_t v29 = v62;
          if (v62)
          {
            if ((*(_WORD *)(v62 + 52) & 0x20) != 0)
            {
              int v30 = *(void *)(v62 + 40);
              --*(_DWORD *)(v30 + 152);
              *(void *)(v29 + 32) = *(void *)(v30 + 168);
              *(void *)(v30 + 168) = v29;
              (*(void (**)(void, void, void))(**(void **)(v30 + 72) + 144LL))( *(void *)(v30 + 72),  *(void *)(v30 + 200) * (*(_DWORD *)(v29 + 48) - 1),  *(void *)(v29 + 8));
            }

            else
            {
              sub_1812F9F44(v62);
            }
          }
        }

        LODWORD(v26) = *((_DWORD *)p + 6);
      }

      uint64_t v26 = (v26 + 1);
      *((_DWORD *)p + 6) = v26;
      uint64_t v27 = v28 + 1;
      if ((nPage & 0x80000000) == 0 && v28 >= nPage) {
        break;
      }
    }
  }

  uint64_t v31 = v12;
  if (v13 != 101)
  {
    if (v13) {
      goto LABEL_117;
    }
    uint64_t v32 = *((_DWORD *)p + 6);
    *((_DWORD *)p + 13) = v25 - v32 + 1;
    *((_DWORD *)p + 14) = v25;
    if (v25 >= v32)
    {
      uint64_t v13 = 0;
      if (!*((_DWORD *)p + 15))
      {
        uint64_t v46 = **(void **)(*((void *)p + 5) + 8LL);
        *((void *)p + 8) = *(void *)(v46 + 112);
        *(void *)(v46 + 112) = p;
        *((_DWORD *)p + 15) = 1;
      }

      goto LABEL_117;
    }
  }

  if (!v25)
  {
    uint64_t v33 = *((void *)p + 1);
    if (*(_BYTE *)(v33 + 17))
    {
      ++*(_DWORD *)(v33 + 20);
      if (!*(_BYTE *)(v33 + 18)) {
        sub_1812FDE20(v33);
      }
    }

    int v34 = *(void *)(v33 + 8);
    *(_DWORD *)(v34 + 64) = 0;
    uint64_t v13 = sub_1812A544C(v34);
    if (*(_BYTE *)(v33 + 17))
    {
      int v35 = *(_DWORD *)(v33 + 20) - 1;
      *(_DWORD *)(v33 + 20) = v35;
      if (!v35) {
        sub_1812FDEFC(v33);
      }
    }

    if (v13 != 101 && v13 != 0) {
      goto LABEL_117;
    }
    uint64_t v25 = 1;
  }

  uint64_t v13 = sub_1812D5F54(*((void *)p + 1), 1, *((_DWORD *)p + 4) + 1);
  if (v13) {
    goto LABEL_117;
  }
  if (*(void *)p) {
    sub_1812D6078(*(void *)p);
  }
  if (v59 == 5)
  {
    uint64_t v13 = sub_1812D614C(*((void *)p + 1), 2);
    if (v13) {
      goto LABEL_117;
    }
  }

  if ((int)v22 >= v60)
  {
    *(_DWORD *)(v12 + 32) = (int)v22 / v60 * v25;
    uint64_t v13 = sub_1812AFF08(v12, 0LL, 0);
    if (v13) {
      goto LABEL_117;
    }
    goto LABEL_105;
  }

  int v37 = (int)(v25 + v60 / (int)v22 - 1) / (v60 / (int)v22);
  uint64_t v38 = v37
  uint64_t v39 = (int)v22 * (uint64_t)(int)v25;
  BOOL v40 = *(void *)(v31 + 72);
  int v41 = *(_DWORD *)(v31 + 32);
  do
  {
    if ((_DWORD)v38 == dword_18C54FA50 / *(_DWORD *)(*(void *)(*((void *)p + 1) + 8LL) + 52LL) + 1)
    {
      uint64_t v13 = 0;
      goto LABEL_84;
    }

    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v31 + 288))(v31, v38, &v62, 0LL);
    if (v13) {
      goto LABEL_84;
    }
    unint64_t v42 = *(_DWORD **)(v62 + 40);
    if ((*(_WORD *)(v62 + 52) & 4) == 0 || v42[8] < *(_DWORD *)(v62 + 48))
    {
      uint64_t v13 = v42[12];
      if (v13) {
        goto LABEL_96;
      }
      if (v42[46] <= v42[50]) {
        uint64_t v43 = sub_1812ABE24(v62);
      }
      else {
        uint64_t v43 = sub_1812FED50(v62);
      }
LABEL_95:
      uint64_t v13 = v43;
LABEL_96:
      int v44 = v62;
      if (!v62) {
        goto LABEL_84;
      }
      goto LABEL_97;
    }

    if (v42[32])
    {
      uint64_t v43 = sub_1812FAFE4(v62);
      goto LABEL_95;
    }

    uint64_t v13 = 0;
    int v44 = v62;
    if (!v62) {
      goto LABEL_84;
    }
LABEL_97:
    if ((*(_WORD *)(v44 + 52) & 0x20) != 0)
    {
      uint64_t v45 = *(void *)(v44 + 40);
      --*(_DWORD *)(v45 + 152);
      *(void *)(v44 + 32) = *(void *)(v45 + 168);
      *(void *)(v45 + 168) = v44;
      (*(void (**)(void, void, void))(**(void **)(v45 + 72) + 144LL))( *(void *)(v45 + 72),  *(void *)(v45 + 200) * (*(_DWORD *)(v44 + 48) - 1),  *(void *)(v44 + 8));
    }

    else
    {
      sub_1812F9F44(v44);
    }

        uint64_t v39 = 2;
        uint64_t v26 = dword_18C54FA50;
        int v37 = dword_18C54FA50;
        uint64_t v38 = 2LL;
        uint64_t v27 = *(void *)(a1 + 16);
        uint64_t v28 = *(unsigned int *)(v27 + 88);
        if ((_DWORD)v28 == -1)
        {
          uint64_t v28 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v27 + 88) = v28;
        }

        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          uint64_t v29 = sub_1812F3848(v28, (uint64_t)&v37, a1);
LABEL_49:
          if (v29) {
            goto LABEL_50;
          }
          goto LABEL_51;
        }

        if (*(_BYTE *)(v27 + 33))
        {
LABEL_51:
          *(_BYTE *)(v7 + 32) = 1;
          goto LABEL_52;
        }

        BOOL v40 = v26 + 2;
        int v41 = 510LL;
        unint64_t v42 = 3;
        uint64_t v29 = sub_1812F3848(v28, (uint64_t)&v40, a1);
        if ((v29 & 0x80000000) == 0)
        {
          *(_BYTE *)(v27 + 33) = 1;
          ++*(_DWORD *)(v27 + 28);
          goto LABEL_49;
        }

      uint64_t v19 = *(void *)(a2 + 104 * v13 + 168);
      if (!v19) {
        goto LABEL_51;
      }
      if (*(void *)v19)
      {
        (*(void (**)(void))(*(void *)v19 + 8LL))(*(void *)(a2 + 104 * v13 + 168));
        *(void *)uint64_t v19 = 0LL;
      }

      int v20 = &off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_50;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v19);
      --qword_18C468B10;
      off_18C4653A8(v19);
      uint64_t v19 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        int v20 = &xmmword_18C465410;
LABEL_50:
        (*v20)(v19);
      }

        if (++v33 != v32) {
          continue;
        }
        break;
      }

  if ((v15 & 0x10) != 0)
  {
    uint64_t v11 = *(_DWORD *)(v13 + 16);
    if ((v15 & 0x400) != 0) {
      v11 += *(_DWORD *)v13;
    }
    if (!v8) {
      return;
    }
  }

  else if ((v15 & 1) != 0)
  {
    uint64_t v11 = 0;
    if (!v8) {
      return;
    }
  }

  else
  {
    uint64_t v11 = sub_181303970(v13, 1);
    if (!v8) {
      return;
    }
  }

  if (a2[4] != 1) {
    return 0LL;
  }
  uint64_t v18 = *((void *)a2 + 3);
  if ((*(_DWORD *)v18 & 0x80000000) == 0 && *(_DWORD *)v18 != *(_DWORD *)(a1 + 48) + 1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (*(_BYTE *)(v18 + 4)) {
    uint64_t v19 = "DESC";
  }
  else {
    uint64_t v19 = "ASC";
  }
  *((void *)a2 + 6) = v19;
  a2[15] = 1;
  return result;
}

              *((_DWORD *)v43 + 10) = v40;
              uint64_t v12 = v41;
            }

            uint64_t result = 0LL;
            ++v12;
            __int16 v16 = 1;
          }
        }
      }
    }
  }

  uint64_t v13 = *(void *)(v1 + 160);
  if (!v13) {
    goto LABEL_49;
  }
  int v14 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_48;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v13);
  --qword_18C468B10;
  off_18C4653A8(v13);
  uint64_t v13 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    int v14 = &xmmword_18C465410;
LABEL_48:
    (*v14)(v13);
  }

      if (v6 == byte_1813C6343[*a1]) {
        return v3;
      }
      return 0LL;
    }

    goto LABEL_12;
  }

  if (v1 != 88 && v1 != 120)
  {
    if (v1 == 110) {
      goto LABEL_5;
    }
LABEL_12:
    if (v2 == 45 || (uint64_t v7 = a1, v2 == 43)) {
      uint64_t v7 = a1 + 1;
    }
    do
    {
      double v9 = *v7++;
      __int16 v8 = v9;
    }

    while ((v9 - 58) > 0xFFFFFFF5);
    uint64_t v10 = (char *)(v7 - 1);
    if (v8 == 46 && *v7 - 58 >= 0xFFFFFFF6)
    {
      uint64_t v10 = (char *)v7;
      do
        uint64_t v11 = *++v10;
      while ((v11 - 58) > 0xFFFFFFF5);
    }

    else {
      return v10;
    }
  }

  if (a1[1] != 39) {
    return 0LL;
  }
  for (int i = 0LL; ; ++i)
  {
    if ((a1[i + 2] - 48) >= 0xAu)
    {
      int v14 = a1[i + 2] - 39;
      if (v14 > 0x3F) {
        return 0LL;
      }
      if (((1LL << v14) & 0xFC000000FC000000LL) == 0) {
        break;
      }
    }
  }

  if (a1[i + 2] != 39) {
    return 0LL;
  }
  uint64_t v15 = i + 2;
  __int16 v16 = (uint64_t)&a1[i + 3];
  if ((v15 & 1) != 0) {
    return 0LL;
  }
  else {
    return (char *)v16;
  }
}

  if (*(int *)(v1 + 20) >= 1)
  {
    uint64_t v25 = *(void *)(v1 + 8);
    if (v25)
    {
      uint64_t v26 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v25);
        --qword_18C468B10;
        off_18C4653A8(v25);
        uint64_t v25 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_50;
        }
        uint64_t v26 = &xmmword_18C465410;
      }

      (*v26)(v25);
    }

        sqlite3_log(21, "API call with %s database connection pointer", v13);
        sub_1812CF36C(186263);
        int v23 = 0LL;
        goto LABEL_43;
      }
    }

    else
    {
      int v20 = v26;
      size_t v21 = 1LL;
      while (v21 <= *(int *)(v6 + 24) + 1LL)
      {
        uint64_t v22 = sqlite3_bind_value(v20, v21, *(const sqlite3_value **)(a2 + 8 * v21));
        ++v21;
        if ((_DWORD)v22) {
          goto LABEL_38;
        }
      }

      sqlite3_step(v20);
      uint64_t v22 = sqlite3_reset(v20);
LABEL_38:
      uint64_t v10 = v22;
      uint64_t v11 = *(void *)v6;
      if (*(void *)v6) {
        goto LABEL_9;
      }
    }

    uint64_t v13 = "NULL";
    goto LABEL_42;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  if (v7)
  {
    __int16 v8 = *(_WORD *)(v7 + 20);
    if (((0x50505050uLL >> v8) & 1) != 0)
    {
      if ((v8 & 0x24) != 0)
      {
        double v9 = *(void *)v7;
      }

      else if ((v8 & 8) != 0)
      {
        uint64_t v25 = *(double *)v7;
        if (*(double *)v7 >= -9.22337204e18)
        {
          if (v25 <= 9.22337204e18) {
            double v9 = (uint64_t)v25;
          }
          else {
            double v9 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }

        else
        {
          double v9 = 0x8000000000000000LL;
        }
      }

      else if ((v8 & 0x12) != 0 && *(void *)(v7 + 8))
      {
        double v9 = sub_181303DF0(v7);
      }

      else
      {
        double v9 = 0LL;
      }

      uint64_t v10 = 0LL;
      *a3 = v9;
      return v10;
    }
  }

  else
  {
    sub_1812CF36C(97220);
    uint64_t v6 = *a1;
  }

  if (!*(_DWORD *)(v6 + 88)) {
    return 20LL;
  }
  uint64_t v26 = 0LL;
  uint64_t v10 = sub_18138AC28(a1, 6, &v26, 0LL);
  if (!(_DWORD)v10)
  {
    int v14 = v26;
    if (!sub_1812B2390((uint64_t)v26, 0))
    {
      uint64_t v15 = *(void *)(*(void *)v14 + 24LL);
      if (v15) {
        xmmword_18C465410(v15);
      }
    }

    if (!sub_1812B2390((uint64_t)v14, 1u))
    {
      __int16 v16 = *(void *)(*(void *)v14 + 24LL);
      if (v16) {
        xmmword_18C465410(v16);
      }
    }

    sqlite3_step(v14);
    uint64_t v10 = sqlite3_reset(v14);
    if (!(_DWORD)v10)
    {
      int v17 = *(void *)*a1;
      if (!v17)
      {
        uint64_t v19 = "NULL";
        goto LABEL_54;
      }

      uint64_t v18 = *(unsigned __int8 *)(v17 + 113);
      if (v18 == 186)
      {
LABEL_27:
        uint64_t v19 = "unopened";
LABEL_54:
        sqlite3_log(21, "API call with %s database connection pointer", v19);
        sub_1812CF36C(186263);
        int v23 = 0LL;
        uint64_t v10 = 0LL;
        goto LABEL_43;
      }

      if (v18 != 118)
      {
        if (v18 != 109)
        {
          uint64_t v19 = "invalid";
          goto LABEL_54;
        }

        goto LABEL_27;
      }

      int v23 = *(void *)(v17 + 56);
      uint64_t v10 = 0LL;
LABEL_43:
      *a3 = v23;
    }
  }

  return v10;
}

uint64_t sub_1812B1CE8(uint64_t a1, const char *a2, const char *a3, int a4)
{
  uint64_t v4 = *(void *)a1;
  if (!*(_BYTE *)(*(void *)a1 + 197LL))
  {
    uint64_t v10 = *(void *)(*(void *)(v4 + 32) + 32LL * a4);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, const char *, const char *, uint64_t, void))(v4 + 528))( *(void *)(v4 + 536),  20LL,  a2,  a3,  v10,  *(void *)(a1 + 368));
    if ((_DWORD)v11 == 1)
    {
      uint64_t v18 = sqlite3_mprintf("%s.%s", a2, a3);
      sub_1812DC47C(a1, "access to %z is prohibited", v19, v20, v21, v22, v23, v24, (char)v18);
      uint64_t v5 = 1LL;
      int v25 = 23;
    }

    else
    {
      uint64_t v5 = v11;
      if ((v11 & 0xFFFFFFFD) == 0) {
        return v5;
      }
      sub_1812DC47C(a1, "authorizer malfunction", v12, v13, v14, v15, v16, v17, v27);
      int v25 = 1;
    }

    *(_DWORD *)(a1 + 24) = v25;
    return v5;
  }

  return 0LL;
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return sub_1812D8E78((uint64_t *)a1, N, 0, 0);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v9 = *(void *)a1;
    *(_DWORD *)(v9 + 80) = 25;
    sub_1812FA264(v9, 25);
LABEL_10:
    uint64_t v6 = &qword_1813C6E90;
    LOBYTE(v7) = 1;
    goto LABEL_11;
  }

  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 8) != 0)
  {
    double v8 = *(double *)v6;
    if (!a1) {
      return v8;
    }
    goto LABEL_18;
  }

void sub_1812B1F10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *(void *)(a2 + 8);
    if (!*(_BYTE *)(v11 + 1))
    {
      LODWORD(v13) = *(_DWORD *)(a1 + 296) + 1;
      *(_DWORD *)(a1 + 296) = v13;
LABEL_43:
      *(_DWORD *)(v8 + 48) = v13;
      sub_1812DC47C(a1, "too many SQL variables", a3, a4, a5, a6, a7, a8, v35);
      uint64_t v21 = *(void *)a1;
      while (1)
      {
        if ((*(_BYTE *)(v8 + 4) & 3) == 0)
        {
          int v22 = *(_DWORD *)(v8 + 56);
          if (v22 > 0) {
            break;
          }
        }

        uint64_t v8 = *(void *)(v8 + 16);
        if (!v8) {
          return;
        }
      }

      goto LABEL_48;
    }

    int v12 = a3;
    if (*(_BYTE *)v11 != 63)
    {
      uint64_t v15 = *(int **)(a1 + 320);
      if (v15)
      {
        int v16 = v15[1];
        int v17 = 2;
        while (1)
        {
          uint64_t v18 = v17;
          uint64_t v19 = (const char *)&v15[v17 + 2];
          int v17 = v15[v18 + 1] + v18;
          if (v17 >= v16) {
            goto LABEL_13;
          }
        }

        LODWORD(v13) = v15[v18];
        if ((_DWORD)v13) {
          goto LABEL_43;
        }
      }

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return sub_1812B2220((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, 1u);
}

uint64_t sub_1812B2220( uint64_t *a1, int a2, char *a3, uint64_t a4, uint64_t (*a5)(uint64_t result), unsigned int a6)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v20 = *a1;
      if (*a1)
      {
        uint64_t v12 = 25LL;
        *(_DWORD *)(v20 + 80) = 25;
        sub_1812FA264(v20, 25);
        goto LABEL_14;
      }

      sqlite3_log(21, "API called with finalized prepared statement");
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }

    uint64_t v12 = 25LL;
  }

  else
  {
    uint64_t v11 = (a2 - 1);
    uint64_t v12 = sub_1812B2390((uint64_t)a1, a2 - 1);
    if (!(_DWORD)v12)
    {
      if (a3)
      {
        uint64_t v13 = a1[16];
        unsigned int v14 = sub_181269368(v13 + (v11 << 6), a3, a4, a6, a5);
        unsigned int v15 = v14;
        if (a6 && !v14)
        {
          int v16 = *(unsigned __int8 *)(*a1 + 100);
          uint64_t v17 = v13 + (v11 << 6);
          __int16 v18 = *(_WORD *)(v17 + 20);
          uint64_t v19 = (_BYTE *)(v17 + 22);
          if ((v18 & 2) == 0)
          {
            uint64_t v12 = 0LL;
            *uint64_t v19 = v16;
            goto LABEL_21;
          }

          unsigned int v15 = sub_1812C23E8((int *)(v13 + (v11 << 6)), v16);
        }

        if (v15)
        {
          uint64_t v21 = *a1;
          *(_DWORD *)(v21 + 80) = v15;
          sub_1812FA264(v21, v15);
          uint64_t v12 = sub_1813037C4(*a1, v15);
          goto LABEL_21;
        }
      }

uint64_t sub_1812B2390(uint64_t a1, unsigned int a2)
{
  if (!a1)
  {
    sqlite3_log(21, "API called with NULL prepared statement");
LABEL_17:
    int v10 = 98645;
    return sub_1812CF36C(v10);
  }

  if (!*(void *)a1)
  {
    sqlite3_log(21, "API called with finalized prepared statement");
    goto LABEL_17;
  }

  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (*(_BYTE *)(a1 + 267) != 1)
  {
    uint64_t v11 = *(void *)a1;
    *(_DWORD *)(v11 + 80) = 21;
    sub_1812FA264(v11, 21);
    uint64_t v12 = *(void *)(*(void *)a1 + 24LL);
    if (v12) {
      xmmword_18C465410(v12);
    }
    sqlite3_log(21, "bind on a busy prepared statement: [%s]", *(const char **)(a1 + 320));
    int v10 = 98653;
    return sub_1812CF36C(v10);
  }

  if (*(_DWORD *)(a1 + 32) <= a2)
  {
    uint64_t v14 = *(void *)a1;
    uint64_t v9 = 25LL;
    *(_DWORD *)(v14 + 80) = 25;
    sub_1812FA264(v14, 25);
    uint64_t v15 = *(void *)(*(void *)a1 + 24LL);
    if (v15) {
      xmmword_18C465410(v15);
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 128) + ((unint64_t)a2 << 6);
    uint64_t v6 = (_WORD *)(v5 + 20);
    if ((*(_WORD *)(v5 + 20) & 0x9000) != 0 || *(_DWORD *)(v5 + 32)) {
      sub_181303838(v5);
    }
    *uint64_t v6 = 1;
    *(_DWORD *)(*(void *)a1 + 80LL) = 0;
    int v7 = *(_DWORD *)(a1 + 372);
    if (!v7) {
      return 0LL;
    }
    int v8 = 1 << a2;
    if (a2 > 0x1E) {
      int v8 = 0x80000000;
    }
    if ((v7 & v8) != 0)
    {
      uint64_t v9 = 0LL;
      *(_WORD *)(a1 + 268) = *(_WORD *)(a1 + 268) & 0xFFFC | 1;
    }

    else
    {
      return 0LL;
    }
  }

  return v9;
}

int sqlite3_expired(sqlite3_stmt *a1)
{
  if (!a1) {
    return 1;
  }
  if (!*(void *)(*(void *)a1 + 24LL)) {
    return (*((_WORD *)a1 + 134) & 3) != 0;
  }
  xmmword_18C465400();
  uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
  BOOL v3 = (*((_WORD *)a1 + 134) & 3) != 0;
  if (v2) {
    xmmword_18C465410();
  }
  return v3;
}

void sqlite3_progress_handler(sqlite3 *a1, int a2, int (__cdecl *a3)(void *), void *a4)
{
  if (!a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_18;
  }

  int v5 = *((unsigned __int8 *)a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1812CF36C(187079);
    return;
  }

  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_18;
    }

    goto LABEL_5;
  }

  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_18C465400(v10);
  }
  if (a2 <= 0) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = a3;
  }
  if (a2 <= 0) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = a4;
  }
  *((void *)a1 + 68) = v11;
  *((_DWORD *)a1 + 140) = a2 & ~(a2 >> 31);
  *((void *)a1 + 69) = v12;
  uint64_t v13 = *((void *)a1 + 3);
  if (v13) {
    xmmword_18C465410(v13);
  }
}

void sub_1812B26A4( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  unsigned int v172 = 0;
  unsigned int v170 = 0;
  char v12 = *((_BYTE *)a1 + 35);
  uint64_t v13 = *(unsigned __int8 **)(a2 + 16);
  int32x4_t v164 = (void *)sub_18131D1C0((uint64_t *)a1, a2);
  uint64_t v14 = *(unsigned __int8 **)(a2 + 16);
  int v15 = *v14;
  if (v15 == 176) {
    int v15 = v14[2];
  }
  int32x4_t v165 = v13;
  if (v15 == 138)
  {
    uint64_t v14 = (unsigned __int8 *)*((void *)v14 + 4);
  }

  else if (v15 != 177)
  {
    uint64_t v16 = 1LL;
    goto LABEL_9;
  }

  uint64_t v16 = **((unsigned int **)v14 + 4);
LABEL_9:
  uint64_t v17 = 5LL * (int)v16;
  size_t v18 = v17 + 1;
  unsigned int v167 = v9;
  if (*a1) {
    uint64_t v19 = (void *)sub_1812F2264((uint64_t)*a1, v17 + 1);
  }
  else {
    uint64_t v19 = (void *)sub_18126F0AC(v17 + 1);
  }
  uint64_t v22 = (uint64_t)v19;
  uint64_t v158 = v16;
  unsigned int v168 = v8;
  if (v19) {
    bzero(v19, v18);
  }
  int8x16_t v159 = (void *)v22;
  if (!*((_BYTE *)*a1 + 103))
  {
    uint64_t v23 = (uint64_t)a1[2];
    uint64_t v24 = v167;
    if (v167 == v168) {
      int v25 = 0LL;
    }
    else {
      int v25 = &v172;
    }
    int v26 = sub_1812B346C((uint64_t)a1, a2, 3LL, (uint64_t)v25, v22, &v170, v20, v21);
    int v33 = v26;
    *((_BYTE *)a1 + 35) = 0;
    int v34 = *v165;
    int v35 = v34;
    if (v34 == 176) {
      int v35 = v165[2];
    }
    if (v35 == 138)
    {
      uint64_t v36 = (unsigned __int8 *)*((void *)v165 + 4);
    }

    else
    {
      if (v35 != 177) {
        goto LABEL_30;
      }
      uint64_t v36 = v165;
    }

    uint64_t v37 = **((unsigned int **)v36 + 4);
    if ((_DWORD)v37 != 1)
    {
      int v171 = 0;
      if (v34 == 138)
      {
        uint64_t v38 = sub_1812B3EB0(a1, v165, v27, v28, v29, v30, v31, v32);
      }

      else
      {
        int v39 = *((_DWORD *)a1 + 14);
        uint64_t v38 = (v39 + 1);
        *((_DWORD *)a1 + 14) = v39 + v37;
        if ((int)v37 >= 1)
        {
          int v160 = v26;
          uint64_t v40 = (v39 + 1);
          uint64_t v41 = 0LL;
          uint64_t v42 = 24 * v37;
          unsigned int v156 = v39 + 1;
          do
          {
            sub_18131E5AC(a1, *(void *)(*((void *)v165 + 4) + v41 + 8), v40);
            v41 += 24LL;
            uint64_t v40 = (v40 + 1);
          }

          while (v42 != v41);
          uint64_t v38 = v156;
          int v33 = v160;
        }
      }

LABEL_208:
          if ((_DWORD)v44 != (_DWORD)v38)
          {
            if ((_DWORD)v44)
            {
              uint64_t v153 = *((unsigned __int8 *)a1 + 31);
              if (v153 <= 7)
              {
                *((_BYTE *)a1 + 31) = v153 + 1;
                *((_DWORD *)a1 + v153 + 56) = v44;
              }
            }
          }

          goto LABEL_15;
        }

        uint64_t v88 = 0LL;
        while (1)
        {
          int8x16_t v89 = &v57[6 * v88];
          unint64_t v91 = (unsigned __int8 *)*((void *)v89 + 1);
          unint64_t v90 = (unsigned __int8 **)(v89 + 2);
          uint64_t v92 = sub_18131A8A4((uint64_t)a1, v91, &v169);
          uint64_t v96 = v92;
          if (!(_DWORD)v63) {
            goto LABEL_126;
          }
          while (1)
          {
            uint64_t v97 = (uint64_t)*v90;
            int v98 = **v90;
            unint64_t v90 = (unsigned __int8 **)(v97 + 16);
          }

          if (v98 == 176) {
            int v98 = *(unsigned __int8 *)(v97 + 2);
          }
          if (v98 == 117) {
            goto LABEL_126;
          }
          if (v98 == 167 && (*(_BYTE *)(v97 + 6) & 0x20) == 0)
          {
            uint64_t v99 = *(void *)(v97 + 72);
            if (v99)
            {
              uint64_t v100 = *(unsigned int *)(v97 + 48);
              if ((v100 & 0x80000000) != 0) {
                goto LABEL_126;
              }
              uint64_t v101 = *(void *)(v99 + 8);
              if (!v101 || (*(_BYTE *)(v101 + 16 * v100 + 8) & 0xF) != 0) {
                goto LABEL_126;
              }
            }
          }

          int v102 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) > v102) {
            break;
          }
          sub_18131044C(v23, 102LL, v63, v92, v63, v93, v94, v95);
          int v104 = v169;
          if (!v169) {
            goto LABEL_129;
          }
LABEL_127:
          uint64_t v105 = *((unsigned __int8 *)a1 + 31);
          if (v105 <= 7)
          {
            *((_BYTE *)a1 + 31) = v105 + 1;
            *((_DWORD *)a1 + v105 + 56) = v104;
          }

uint64_t sub_1812B346C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (_DWORD *)a4;
  char v11 = a3;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C((uint64_t *)a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  }

  uint64_t v15 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v15 + 1;
  if (v10 && (*(_BYTE *)(a2 + 5) & 0x10) != 0)
  {
    uint64_t v16 = *(_DWORD **)(*(void *)(a2 + 32) + 32LL);
    uint64_t v17 = *v16;
    if ((int)v17 < 1)
    {
      LODWORD(v18) = 0;
    }

    else
    {
      uint64_t v18 = 0LL;
      while (1)
      {
        for (int i = (unsigned __int8 **)&v16[6 * v18 + 2]; ; int i = (unsigned __int8 **)(v20 + 16))
        {
          uint64_t v20 = *i;
          int v21 = *v20;
        }

        if (v21 == 176) {
          int v21 = v20[2];
        }
        if ((v21 - 153) >= 3 && v21 != 117)
        {
          if (v21 != 167) {
            break;
          }
          if ((v20[6] & 0x20) != 0) {
            break;
          }
          uint64_t v22 = *((void *)v20 + 9);
          if (!v22) {
            break;
          }
          uint64_t v23 = *((unsigned int *)v20 + 12);
          if ((v23 & 0x80000000) == 0)
          {
            uint64_t v24 = *(void *)(v22 + 8);
            if (v24)
            {
              if ((*(_BYTE *)(v24 + 16 * v23 + 8) & 0xF) == 0) {
                break;
              }
            }
          }
        }

        if (++v18 == v17)
        {
          LODWORD(v18) = *v16;
          break;
        }
      }
    }

    if ((_DWORD)v18 == (_DWORD)v17) {
      uint64_t v10 = 0LL;
    }
  }

  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_38;
  }
  if ((*(_DWORD *)(a2 + 4) & 0x1040) != 0x1000) {
    goto LABEL_38;
  }
  uint64_t v25 = *(void *)(a2 + 32);
  if (*(void *)(v25 + 80)) {
    goto LABEL_38;
  }
  if ((*(_BYTE *)(v25 + 4) & 9) != 0) {
    goto LABEL_38;
  }
  if (*(void *)(v25 + 96)) {
    goto LABEL_38;
  }
  if (*(void *)(v25 + 48)) {
    goto LABEL_38;
  }
  uint64_t v26 = *(void *)(v25 + 40);
  if (*(_DWORD *)v26 != 1) {
    goto LABEL_38;
  }
  if (*(void *)(v26 + 48)) {
    goto LABEL_38;
  }
  uint64_t v27 = *(void *)(v26 + 40);
  if (*(_BYTE *)(v27 + 63) == 1) {
    goto LABEL_38;
  }
  uint64_t v126 = *(unsigned int **)(v25 + 32);
  LODWORD(v50) = *v126;
  if ((int)*v126 >= 1)
  {
    uint64_t v51 = (unsigned __int8 **)(v126 + 2);
    uint64_t v52 = *v126;
    do
    {
      if (**v51 != 167) {
        goto LABEL_38;
      }
      v51 += 3;
      --v52;
    }

    while (v52);
    if (!v25)
    {
LABEL_38:
      if ((v11 & 1) != 0 && (*(_BYTE *)(a2 + 5) & 0x10) == 0)
      {
        uint64_t v28 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = 0LL;
        unsigned __int16 v134 = 1;
        __int128 v132 = sub_18129C78C;
        int64x2_t v133 = sub_18131C570;
        int v135 = 0;
        sub_18131C57C((uint64_t)v131, a2);
        int v29 = v134;
        *(void *)(a2 + 16) = v28;
        if (!v29 || **(int **)(a2 + 32) <= 2)
        {
          --*(_DWORD *)(a1 + 52);
          uint64_t result = 5LL;
          LODWORD(v15) = -1;
          goto LABEL_50;
        }
      }

      __int16 v31 = *(_WORD *)(a1 + 216);
      if ((v11 & 4) != 0)
      {
        *(_WORD *)(a1 + 216) = 0;
      }

      else if (v10)
      {
        int v32 = *(_DWORD *)(a1 + 56);
        uint64_t v33 = (v32 + 1);
        BOOL v34 = v32 == -1;
        *(_DWORD *)(a1 + 56) = v33;
        _DWORD *v10 = v33;
        sub_18131D58C((uint64_t *)a1, a2, v15, a4, a5, (uint64_t)a6, a7, a8);
        if (!v34) {
          sub_18131D410(v14, v15, v33, v35, v36, v37, v38, v39);
        }
        goto LABEL_49;
      }

      sub_18131D58C((uint64_t *)a1, a2, v15, a4, a5, (uint64_t)a6, a7, a8);
LABEL_49:
      *(_WORD *)(a1 + 216) = v31;
      uint64_t result = 2LL;
      goto LABEL_50;
    }
  }

  uint64_t v53 = *(void *)(v27 + 96);
  if (v53)
  {
    int v54 = (uint64_t *)(*(void *)(*(void *)a1 + 32LL) + 24LL);
    LODWORD(v55) = -1;
    do
    {
      uint64_t v56 = *v54;
      v54 += 4;
      uint64_t v55 = (v55 + 1);
    }

    while (v56 != v53);
  }

  else
  {
    uint64_t v55 = 4294934528LL;
  }

  if (*(void *)(a1 + 168)) {
    uint64_t v57 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v57 = a1;
  }
  int v58 = *(_DWORD *)(v57 + 124);
  unint64_t v123 = *v126;
  if ((v58 & (1 << v55)) != 0)
  {
    if ((_DWORD)v55 == 1) {
      goto LABEL_87;
    }
  }

  else
  {
    *(_DWORD *)(v57 + 124) = v58 | (1 << v55);
    if ((_DWORD)v55 == 1)
    {
      sub_1812FA2F0(v57);
LABEL_86:
      LODWORD(v50) = v123;
      goto LABEL_87;
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(*(void *)a1 + 32LL) + 32LL * (int)v55 + 8) + 17LL))
  {
    sub_181319DC4(a1, v55, *(_DWORD *)(v27 + 40), 0, *(void *)v27);
    goto LABEL_86;
  }

uint64_t sub_1812B3EB0( void **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)a1 + 12)) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t)a1[2];
  uint64_t v13 = *((void *)a2 + 4);
  int v14 = *((_DWORD *)a2 + 1);
  if ((v14 & 0x2000000) != 0)
  {
    sub_18131CCF8((uint64_t *)a1, 0, "REUSE SUBQUERY %d", a4, a5, a6, a7, a8, *(_DWORD *)(v13 + 16));
    uint64_t v23 = *((unsigned int *)a2 + 18);
    uint64_t v22 = *((unsigned int *)a2 + 19);
    int v24 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v24)
    {
      sub_18131044C(v12, 10LL, v22, v23, 0LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v24 + 1;
      uint64_t v25 = *(void *)(v12 + 136) + 40LL * v24;
      *(_DWORD *)uint64_t v25 = 10;
      *(_DWORD *)(v25 + 4) = v22;
      *(_DWORD *)(v25 + 8) = v23;
      *(void *)(v25 + 12) = 0LL;
      *(void *)(v25 + 28) = 0LL;
      *(void *)(v25 + 20) = 0LL;
      *(_DWORD *)(v25 + 36) = 0;
    }

    return *((unsigned int *)a2 + 11);
  }

  *((_DWORD *)a2 + 1) = v14 | 0x2000000;
  uint64_t v15 = (*((_DWORD *)a1 + 14) + 1);
  *((_DWORD *)a1 + 14) = v15;
  *((_DWORD *)a2 + 19) = v15;
  int v16 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v16)
  {
    int v17 = sub_18131044C(v12, 74LL, 0LL, v15, 0LL, a6, a7, a8) + 1;
  }

  else
  {
    int v17 = v16 + 1;
    *(_DWORD *)(v12 + 144) = v16 + 1;
    uint64_t v18 = *(void *)(v12 + 136) + 40LL * v16;
    *(void *)uint64_t v18 = 74LL;
    *(_DWORD *)(v18 + 8) = v15;
    *(void *)(v18 + 12) = 0LL;
    *(void *)(v18 + 28) = 0LL;
    *(void *)(v18 + 20) = 0LL;
    *(_DWORD *)(v18 + 36) = 0;
  }

  *((_DWORD *)a2 + 18) = v17;
  if ((a2[4] & 0x40) != 0)
  {
    int v26 = 0;
  }

  else
  {
    int v26 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v26)
    {
      int v26 = sub_18131044C(v12, 15LL, 0LL, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v26 + 1;
      uint64_t v27 = *(void *)(v12 + 136) + 40LL * v26;
      *(_BYTE *)uint64_t v27 = 15;
      *(_OWORD *)(v27 + 1) = 0u;
      *(_OWORD *)(v27 + 17) = 0u;
      *(void *)(v27 + 32) = 0LL;
    }
  }

  uint64_t v28 = &byte_1813CEAEE;
  if (!v26) {
    uint64_t v28 = "CORRELATED ";
  }
  int v29 = sub_18131CCF8((uint64_t *)a1, 1, "%sSCALAR SUBQUERY %d", v15, a5, a6, a7, a8, (char)v28);
  int v33 = v29;
  if ((*(_BYTE *)(*(void *)v12 + 49LL) & 4) != 0)
  {
    uint64_t v34 = *(unsigned int *)(v12 + 392);
    uint64_t v35 = 56 * v34;
    int v36 = v34 + 1;
    while (--v36 >= 1)
    {
      uint64_t v37 = v35 - 56;
      uint64_t v38 = *(void *)(v12 + 400);
      int v39 = *(_DWORD *)(v38 + v35 - 56);
      v35 -= 56LL;
      if (v39 == v29)
      {
        if (v29 >= 1) {
          *(_DWORD *)(v38 + v37 + 28) = v29;
        }
        break;
      }
    }
  }

  int v40 = *a2;
  if (v40 == 138) {
    int v41 = **(_DWORD **)(v13 + 32);
  }
  else {
    int v41 = 1;
  }
  int v42 = *((_DWORD *)a1 + 14);
  uint64_t v43 = (v42 + 1);
  uint64_t v85 = 0LL;
  unsigned int v82 = v42 + 1;
  uint64_t v83 = 0LL;
  int v84 = 0;
  uint64_t v44 = (v42 + v41);
  *((_DWORD *)a1 + 14) = v44;
  if (v40 == 138)
  {
    v81[0] = 10;
    HIDWORD(v83) = v42 + 1;
    int v84 = v41;
    int v45 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v45)
    {
      *(_DWORD *)(v12 + 144) = v45 + 1;
      uint64_t v46 = *(void *)(v12 + 136) + 40LL * v45;
      *(void *)uint64_t v46 = 75LL;
      *(_DWORD *)(v46 + 8) = v43;
      *(_DWORD *)(v46 + 12) = v44;
      *(void *)(v46 + 24) = 0LL;
      *(void *)(v46 + 32) = 0LL;
      *(void *)(v46 + 16) = 0LL;
      goto LABEL_36;
    }

    uint64_t v49 = v12;
    uint64_t v50 = 75LL;
  }

  else
  {
    v81[0] = 3;
    int v47 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v47)
    {
      *(_DWORD *)(v12 + 144) = v47 + 1;
      uint64_t v48 = *(void *)(v12 + 136) + 40LL * v47;
      *(void *)uint64_t v48 = 71LL;
      *(_DWORD *)(v48 + 8) = v43;
      *(void *)(v48 + 12) = 0LL;
      *(void *)(v48 + 28) = 0LL;
      *(void *)(v48 + 20) = 0LL;
      *(_DWORD *)(v48 + 36) = 0;
      goto LABEL_36;
    }

    uint64_t v49 = v12;
    uint64_t v50 = 71LL;
    uint64_t v44 = 0LL;
  }

  sub_18131044C(v49, v50, 0LL, v43, v44, v30, v31, v32);
LABEL_36:
  uint64_t v51 = (uint64_t)*a1;
  if (!*(void *)(v13 + 96))
  {
    int v86 = "1";
    int v87 = 1;
    uint64_t v56 = sub_18127F5B0(v51, 155, (uint64_t)&v86, 0);
    *(void *)(v13 + 96) = sub_1813132BC((uint64_t *)a1, 148, v56, 0LL);
    goto LABEL_51;
  }

  int v86 = "0";
  int v87 = 1;
  uint64_t v52 = sub_18127F5B0(v51, 155, (uint64_t)&v86, 0);
  if (v52)
  {
    uint64_t v53 = v52;
    *(_BYTE *)(v52 + 1) = 67;
    int v54 = *(unsigned __int8 **)(*(void *)(v13 + 96) + 16LL);
    if (v54) {
      uint64_t v55 = sub_18129C928(v51, v54, 0LL, 0LL);
    }
    else {
      uint64_t v55 = 0LL;
    }
    uint64_t v57 = sub_1813132BC((uint64_t *)a1, 52, (uint64_t)v55, v53);
  }

  else
  {
    uint64_t v57 = 0LL;
  }

  int v58 = *(unsigned __int8 **)(*(void *)(v13 + 96) + 16LL);
  if (!*a1)
  {
    int v59 = (void *)sub_18126F0AC(24LL);
    if (v59) {
      goto LABEL_46;
    }
LABEL_48:
    if (v58) {
      sub_181309110(*a1, v58);
    }
    goto LABEL_50;
  }

  int v59 = (void *)sub_1812F2264((uint64_t)*a1, 0x18uLL);
  if (!v59) {
    goto LABEL_48;
  }
LABEL_46:
  *int v59 = a1[24];
  a1[24] = v59;
  v59[1] = v58;
  v59[2] = sub_1812899C0;
LABEL_50:
  *(void *)(*(void *)(v13 + 96) + 16LL) = v57;
LABEL_51:
  *(_DWORD *)(v13 + 8) = 0;
  if (sub_1812801A8(a1, v13, v81))
  {
    uint64_t v8 = 0LL;
    a2[2] = *a2;
    *a2 = -74;
  }

  else
  {
    uint64_t v8 = v82;
    *((_DWORD *)a2 + 11) = v82;
    uint64_t v63 = *(void *)v12;
    if (v26)
    {
      if (*(_BYTE *)(v63 + 103)) {
        int v64 = &byte_18C550680;
      }
      else {
        int v64 = (char *)(*(void *)(v12 + 136) + 40LL * v26);
      }
      *((_DWORD *)v64 + 2) = *(_DWORD *)(v12 + 144);
    }

    if ((*(_BYTE *)(v63 + 49) & 4) != 0)
    {
      unsigned int v65 = *(_DWORD *)(v12 + 392);
      uint64_t v66 = 56LL * v65 + 20;
      unsigned int v67 = v65 + 1;
      while ((int)--v67 >= 1)
      {
        uint64_t v68 = v66 - 56;
        uint64_t v69 = *(void *)(v12 + 400);
        int v70 = *(_DWORD *)(v69 + v66 - 76);
        v66 -= 56LL;
        if (v70 == v33)
        {
          int v71 = *(_DWORD *)(v12 + 144);
          uint64_t v72 = v69 + v68;
          unint64_t v73 = (int *)(v69 + v68 - 16);
          if (*v73)
          {
            int v75 = *(_DWORD *)(v72 - 8);
            char v74 = (int *)(v72 - 8);
            if (v75)
            {
              unint64_t v73 = (int *)(v69 + v68);
              if (*(_DWORD *)(v69 + v68)) {
                break;
              }
              uint64_t v76 = 5LL;
            }

            else
            {
              uint64_t v76 = 3LL;
              unint64_t v73 = v74;
            }
          }

          else
          {
            uint64_t v76 = 1LL;
          }

          *unint64_t v73 = v33;
          *(_DWORD *)(v69 + 4 * v76 + v68 - 16) = v71 - 1;
          break;
        }
      }
    }

    uint64_t v78 = *((unsigned int *)a2 + 18);
    uint64_t v77 = *((unsigned int *)a2 + 19);
    int v79 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v79)
    {
      sub_18131044C(v12, 67LL, v77, v78, 1LL, v60, v61, v62);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v79 + 1;
      uint64_t v80 = *(void *)(v12 + 136) + 40LL * v79;
      *(_DWORD *)uint64_t v80 = 67;
      *(_DWORD *)(v80 + 4) = v77;
      *(_DWORD *)(v80 + 8) = v78;
      *(_DWORD *)(v80 + 12) = 1;
      *(void *)(v80 + 24) = 0LL;
      *(void *)(v80 + 32) = 0LL;
      *(void *)(v80 + 16) = 0LL;
    }

    *((_BYTE *)a1 + 31) = 0;
    *((_DWORD *)a1 + 10) = 0;
  }

  return v8;
}

void sub_1812B4484( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if ((*(_BYTE *)(a2 + 5) & 8) != 0)
  {
    unsigned int v25 = *(_DWORD *)(a2 + 8);
    if (a3) {
      uint64_t v26 = -v25;
    }
    else {
      uint64_t v26 = v25;
    }
    int v27 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v27)
    {
      sub_18131044C(*(void *)(a1 + 16), 71LL, v26, a4, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v10 + 144) = v27 + 1;
      uint64_t v28 = *(void *)(v10 + 136) + 40LL * v27;
      *(_DWORD *)uint64_t v28 = 71;
      *(_DWORD *)(v28 + 4) = v26;
      *(_DWORD *)(v28 + 8) = a4;
      *(void *)(v28 + 12) = 0LL;
      *(void *)(v28 + 28) = 0LL;
      *(void *)(v28 + 20) = 0LL;
      *(_DWORD *)(v28 + 36) = 0;
    }
  }

  else
  {
    uint64_t v12 = *(char **)(a2 + 8);
    int v13 = sub_1812E4D40(v12, (unint64_t *)&v33);
    if (a3) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v13 == 3;
    }
    int v21 = !v20;
    BOOL v22 = v13 == 2 || v21 == 0;
    if (v22 || a3 && v33 == 0x8000000000000000LL)
    {
      if (!v12) {
        goto LABEL_40;
      }
      int v23 = *v12;
      int v24 = "0x";
      if (*v12)
      {
        if (v23 != 48)
        {
LABEL_20:
          int v23 = byte_1813C6343[v23];
          goto LABEL_36;
        }

        int v23 = v12[1];
        if (v12[1])
        {
          if ((v23 & 0xFFFFFFDF) == 0x58)
          {
LABEL_37:
            uint64_t v32 = &byte_1813CEAEE;
            if (a3) {
              uint64_t v32 = "-";
            }
            sub_1812DC47C(a1, "hex literal too big: %s%#T", v14, v15, v16, v17, v18, v19, (char)v32);
            return;
          }

          int v24 = "x";
          goto LABEL_20;
        }

        int v24 = "x";
      }

LABEL_36:
LABEL_40:
      sub_18131A804((uint64_t *)v10, v12, a3, a4);
      return;
    }

    if (a3)
    {
      if (v13 == 3) {
        uint64_t v29 = 0x8000000000000000LL;
      }
      else {
        uint64_t v29 = -v33;
      }
      uint64_t v33 = v29;
    }

    uint64_t v30 = (void *)sub_1812F2264(*(void *)v10, 8uLL);
    if (v30) {
      void *v30 = v33;
    }
    sub_1812B9B68((uint64_t *)v10, 72LL, 0LL, a4, 0LL, (uint64_t)v30, 4294967283LL, v31);
  }

          char v74 = a2;
          uint64_t v33 = (unsigned __int8 *)a2[7];
          if (v33)
          {
            uint64_t v34 = *((void *)&v81 + 1);
            uint64_t v35 = v80;
            do
            {
              int v36 = a4;
              if (a4 == 11) {
                int v36 = v33[1];
              }
              BYTE4(v87) = v36;
              if (*((void *)v33 + 9))
              {
                uint64_t v37 = sub_18127F588((uint64_t)v35, "-- %s", (uint64_t)v12, v13, v14, v15, v16, v17, *((void *)v33 + 9));
                sub_1812B9B68((uint64_t *)v34, 181LL, 0x7FFFFFFFLL, 1LL, 0LL, (uint64_t)v37, 4294967290LL, v38);
              }

              int v39 = *v33;
              switch(v39)
              {
                case 127:
                  uint64_t v44 = sub_18133FCD0((uint64_t *)&v80, (uint64_t)v33);
                  int v45 = sub_18129F624((uint64_t)v35, *((void *)v33 + 2), 0LL);
                  uint64_t v46 = sub_18129F0B4((uint64_t)v35, *((int **)v33 + 7));
                  int v47 = BYTE4(v87);
                  uint64_t v48 = sub_18133FEE0(v35, *((void *)v33 + 8));
                  sub_1812A5598(&v80, v44, v45, v46, v47, v48);
                  break;
                case 128:
                  uint64_t v52 = sub_18133FCD0((uint64_t *)&v80, (uint64_t)v33);
                  uint64_t v53 = (unsigned __int8 *)*((void *)v33 + 5);
                  if (v53) {
                    int v54 = (unsigned __int8 *)sub_18129C928((uint64_t)v35, v53, 0LL, 0LL);
                  }
                  else {
                    int v54 = 0LL;
                  }
                  sub_1812BBC2C(&v80, (uint64_t)v52, v54, 0LL, 0LL, v49, v50, v51);
                  break;
                case 129:
                  int v40 = sub_18133FCD0((uint64_t *)&v80, (uint64_t)v33);
                  int v41 = (unsigned int *)sub_18129CD4C((uint64_t)v35, *((void **)v33 + 6), 0);
                  int v42 = (unsigned __int8 *)*((void *)v33 + 5);
                  if (v42) {
                    uint64_t v43 = sub_18129C928((uint64_t)v35, v42, 0LL, 0LL);
                  }
                  else {
                    uint64_t v43 = 0LL;
                  }
                  sub_1812B9CA8((uint64_t)&v80, (uint64_t)v40, v41, (uint64_t)v43, BYTE4(v87), 0LL, 0LL, 0LL);
                  break;
                default:
                  uint64_t v55 = sub_18129F624((uint64_t)v35, *((void *)v33 + 2), 0LL);
                  v102[0] = 4;
                  uint64_t v105 = 0LL;
                  uint64_t v103 = 0LL;
                  uint64_t v104 = 0LL;
                  sub_1812801A8(&v80, v55, (uint64_t)v102, v56, v57, v58, v59, v60);
                  if (v55) {
                    sub_18128FDA0(v35, v55, 1);
                  }
                  goto LABEL_39;
              }

              uint64_t v61 = *(_DWORD *)(v34 + 144);
              if (*(_DWORD *)(v34 + 148) <= v61)
              {
                sub_18131044C(v34, 131LL, 0LL, 0LL, 0LL, v15, v16, v17);
              }

              else
              {
                *(_DWORD *)(v34 + 144) = v61 + 1;
                uint64_t v62 = *(void *)(v34 + 136) + 40LL * v61;
                *(_BYTE *)uint64_t v62 = -125;
                *(_OWORD *)(v62 + 1) = 0u;
                *(_OWORD *)(v62 + 17) = 0u;
                *(void *)(v62 + 32) = 0LL;
              }

  if (v151)
  {
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
  }

  LODWORD(v155) = 0;
  uint64_t v28 = *(void *)(a1 + 8);
  if (*(void *)v28) {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v28 + 80LL))(v28, 34LL, &v155);
  }
  *(void *)(a1 + 160) = 0LL;
  if (*(_BYTE *)(a1 + 64))
  {
    if (!*(_BYTE *)(a1 + 63)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  9LL);
    }
    *(_BYTE *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_BYTE *)(a1 + 67) = 0;
  }

  if (*(_BYTE *)(a1 + 65))
  {
    if (!*(_BYTE *)(a1 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  1LL,  1LL,  9LL);
    }
    *(_BYTE *)(a1 + 65) = 0;
  }

  if (v21 == 773) {
    uint64_t v29 = 5;
  }
  else {
    uint64_t v29 = v21;
  }
  if (v29) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v22 == a3;
  }
  if (v30) {
    return v29;
  }
  else {
    return 5LL;
  }
}

    uint64_t v19 = *__error();
    goto LABEL_38;
  }

  return 0xFFFFFFFFLL;
}

    BOOL v20 = v8[3];
    if (v20)
    {
      int v21 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v20);
        --qword_18C468B10;
        uint64_t result = (void **)off_18C4653A8(v20);
        BOOL v20 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_43;
        }
        int v21 = &xmmword_18C465410;
      }

      uint64_t result = (void **)(*v21)(v20);
    }

  int v24 = *((unsigned __int8 *)a1 + 302);
  if (v24 >= 2)
  {
    v29[0] = a1;
    v29[1] = sub_181323638;
    void v29[2] = sub_1813236A4;
    memset(&v29[3], 0, 24);
    *((_BYTE *)a1 + 302) = 3;
    sub_18131C57C((uint64_t)v29, (uint64_t)a4);
    *((_BYTE *)a1 + 302) = v24;
  }

  sub_181309110((void *)*a1, a4);
  if (a3) {
    goto LABEL_39;
  }
  return v10;
}

        uint64_t v37 = *(void *)(v37 + 72);
        if (!v37) {
          goto LABEL_32;
        }
      }

      uint64_t v53 = (**(_DWORD **)(*(void *)(v27 + 32) + 32LL) + 59) / 30;
      int v54 = (int)v53;
      if (v53 >= 8)
      {
        uint64_t v57 = 40;
        if (v54 >= 0x100)
        {
          int v58 = v54;
          do
          {
            v57 += 40;
            int v54 = v58 >> 4;
            int v59 = v58 > 0xFFF;
            v58 >>= 4;
          }

          while (v59);
        }

        LOBYTE(v60) = v54;
        if (v54 >= 0x10)
        {
          do
          {
            v57 += 10;
            uint64_t v60 = v54 >> 1;
            int v59 = v54 > 0x1F;
            v54 >>= 1;
          }

          while (v59);
        }
      }

      else
      {
        if (v53 < 2)
        {
          uint64_t v55 = 0;
          goto LABEL_80;
        }

        uint64_t v57 = 40;
        do
        {
          v57 -= 10;
          LOBYTE(v60) = 2 * v54;
          uint64_t v61 = v54 >= 4;
          v54 *= 2LL;
        }

        while (!v61);
      }

      uint64_t v55 = v57 + word_1813CD842[v60 & 7] - 10;
LABEL_80:
      uint64_t v62 = v55 + a2;
      if (v45 < 1) {
        goto LABEL_95;
      }
      uint64_t v63 = 100 * (v117 - v45) / v117;
      int v64 = (int)v63;
      if (v63 >= 8)
      {
        uint64_t v66 = 40;
        if (v64 >= 0x100)
        {
          unsigned int v67 = v64;
          do
          {
            v66 += 40;
            int v64 = v67 >> 4;
            int v59 = v67 > 0xFFF;
            v67 >>= 4;
          }

          while (v59);
        }

        LOBYTE(v68) = v64;
        if (v64 >= 0x10)
        {
          do
          {
            v66 += 10;
            uint64_t v68 = v64 >> 1;
            int v59 = v64 > 0x1F;
            v64 >>= 1;
          }

          while (v59);
        }
      }

      else
      {
        if (v63 < 2)
        {
          unsigned int v65 = -66;
LABEL_94:
          v62 += v65;
LABEL_95:
          if ((*(_WORD *)(v27 + 60) & 0x4000) != 0)
          {
            if (v45) {
              int v70 = 16;
            }
            else {
              int v70 = 10;
            }
            v62 += v70;
            uint64_t v69 = *(__int16 *)(v27 + 62);
            if (v69 >= a2) {
              LOWORD(v69) = a2;
            }
          }

          else
          {
            LOWORD(v69) = a2 - 10;
          }

          if ((__int16)v69 < 11)
          {
            int v71 = 0;
LABEL_111:
            uint64_t v52 = v71 + v62;
            *(_WORD *)&v112[2 * v45] = v52;
            goto LABEL_112;
          }

          uint64_t v72 = (unsigned __int16)v69;
          if ((unsigned __int16)v69 < 0x100u)
          {
            unint64_t v73 = 40;
            if (v72 < 0x10)
            {
LABEL_110:
              int v71 = v73 + word_1813CD842[v72 & 7] - 43;
              goto LABEL_111;
            }
          }

          else
          {
            unint64_t v73 = 40;
            char v74 = v72;
            do
            {
              v73 += 40;
              uint64_t v72 = v74 >> 4;
              int v59 = v74 > 0xFFF;
              v74 >>= 4;
            }

            while (v59);
            if (v72 < 0x10) {
              goto LABEL_110;
            }
          }

          do
          {
            v73 += 10;
            int v59 = v72 > 0x1F;
            v72 >>= 1;
          }

          while (v59);
          goto LABEL_110;
        }

        uint64_t v66 = 40;
        do
        {
          v66 -= 10;
          LOBYTE(v68) = 2 * v64;
          uint64_t v61 = v64 >= 4;
          v64 *= 2LL;
        }

        while (!v61);
      }

      unsigned int v65 = v66 + word_1813CD842[v68 & 7] - 76;
      goto LABEL_94;
    }

    uint64_t v33 = 0LL;
LABEL_29:
    ++v111;
    uint64_t v18 = v108;
    BOOL v20 = (uint64_t)v34;
    uint64_t v32 = v33;
    uint64_t v4 = v113;
    ++v122;
  }

  while (v122 != v113);
  uint64_t v85 = v107;
  if ((_DWORD)v33)
  {
    if ((int)v33 < 2)
    {
      uint64_t v6 = v104;
    }

    else
    {
      int v86 = v34 + 4;
      int v87 = v33 - 1LL;
      uint64_t v6 = v104;
      do
      {
        v86 += 4;
        --v87;
      }

      while (v87);
    }

    uint64_t v88 = (uint64_t *)v34[3];
    uint64_t v89 = *(void *)(v27 + 8);
    uint64_t v90 = (void *)(v27 + 952);
    uint64_t v18 = v105;
    BOOL v3 = (void **)v106;
    do
    {
      unint64_t v91 = *v88++;
      unsigned __int8 *v90 = v91;
      uint64_t v92 = *(unsigned __int8 *)(v91 + 16);
      *((_BYTE *)v90 - 32) = v92;
      *((_DWORD *)v90 - 23) = *(_DWORD *)(v89 + 104LL * v92 + 72);
      v90 += 15;
      --v85;
    }

    while (v85);
    BOOL v20 = (uint64_t)v34;
    goto LABEL_171;
  }

  BOOL v3 = (void **)v106;
  sub_1812DC47C(v106, "no query solution", v12, v13, v14, v15, v16, v17, v103);
  uint64_t v18 = v105;
  return sub_1812F20DC(*v3, v18);
}

      int v24 = 0LL;
LABEL_37:
      v23 |= v24;
      if (++v22 >= v21) {
        goto LABEL_67;
      }
    }
  }

  if (*v16 == 167 && (*((_DWORD *)v16 + 1) & 0x20) == 0)
  {
    uint64_t v31 = *((_DWORD *)v16 + 11);
    if (a1[2] == v31)
    {
      uint64_t v18 = 1LL;
      goto LABEL_58;
    }

    uint64_t v32 = a1[1];
    if ((int)v32 >= 2)
    {
      uint64_t v33 = 0LL;
      uint64_t v34 = v32 - 1;
      while (a1[v33 + 3] != v31)
      {
        if (v34 == ++v33) {
          goto LABEL_68;
        }
      }

      uint64_t v18 = 1LL << (v33 + 1);
      goto LABEL_58;
    }
  }

  else if ((*((_DWORD *)v16 + 1) & 0x810000) == 0)
  {
    uint64_t v18 = sub_181332EB0(a1);
LABEL_58:
    v5 |= v18;
  }

    sub_1812CF36C(91138);
    char v11 = 0;
    if (!v8) {
      return;
    }
    goto LABEL_49;
  }

  uint64_t v12 = *(char **)(v13 + 8);
  uint64_t v15 = *(_WORD *)(v13 + 20);
  if ((v15 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_39:
  if (*(_BYTE *)(v13 + 22) == 1)
  {
    char v11 = *(_DWORD *)(v13 + 16);
    if (!v8) {
      return;
    }
    goto LABEL_49;
  }

      sub_1812CF36C(89752);
      uint64_t v17 = 0.0;
      goto LABEL_37;
    }

    uint64_t v12 = *a3;
    if (*a3)
    {
      int v13 = *((_WORD *)v12 + 10);
      if ((v13 & 0x24) != 0)
      {
        uint64_t v14 = *(void *)v12;
        goto LABEL_18;
      }

      if ((v13 & 8) != 0)
      {
        int v23 = *(double *)v12;
        if (*(double *)v12 < -9.22337204e18)
        {
          uint64_t v14 = 0x8000000000000000LL;
          goto LABEL_57;
        }

        if (v23 > 9.22337204e18)
        {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          if (v11 >= 1)
          {
LABEL_20:
            if ((v11 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v14) {
              goto LABEL_74;
            }
LABEL_59:
            *((_BYTE *)v6 + 33) = 1;
            int v24 = *((void *)v6 + 2);
            if ((unint64_t)(v24 - 0x10000000000000LL) > 0xFFE0000000000000LL)
            {
              *uint64_t v6 = (double)v24;
              uint64_t v26 = 0.0;
            }

            else
            {
              if (v24 <= 0) {
                unsigned int v25 = -(-v24 & 0x3FFF);
              }
              else {
                unsigned int v25 = (void)v6[2] & 0x3FFFLL;
              }
              *uint64_t v6 = (double)(v24 - v25);
              uint64_t v26 = (double)v25;
            }

            v6[1] = v26;
            *((_BYTE *)v6 + 32) = 1;
            uint64_t v8 = *a3;
            if (*a3) {
              goto LABEL_12;
            }
            goto LABEL_69;
          }

      if ((v4 & 0x10) != 0)
      {
        uint64_t v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x400) != 0) {
          v14 += *(_DWORD *)a2;
        }
      }

      else
      {
        if ((v4 & 1) != 0) {
          return result;
        }
        uint64_t result = (void *)sub_181303970(a2, 1);
        uint64_t v14 = result;
      }

      int v27 = *v6;
      *a3 = *v6;
      sqlite3_reset(v27);
      return v8;
    case 6:
      if (*(_DWORD *)(v13 + 68)) {
        int v21 = ",?";
      }
      else {
        int v21 = &byte_1813CEAEE;
      }
      uint64_t v14 = sqlite3_mprintf(off_189B6F300[a2], *(void *)(v13 + 8), *(void *)(v13 + 16), v21);
      goto LABEL_21;
    case 8:
      if (*(_DWORD *)(v13 + 68)) {
        BOOL v22 = ",origin";
      }
      else {
        BOOL v22 = &byte_1813CEAEE;
      }
      uint64_t v14 = sqlite3_mprintf(off_189B6F300[a2], v22, *(void *)(v13 + 8), *(void *)(v13 + 16));
      goto LABEL_21;
    case 10:
      uint64_t v14 = sqlite3_mprintf(off_189B6F300[a2], *(void *)(v13 + 96), *(void *)(v13 + 72));
      goto LABEL_21;
    default:
      uint64_t v14 = sqlite3_mprintf(off_189B6F300[a2], *(void *)(v13 + 8), *(void *)(v13 + 16));
LABEL_21:
      int v23 = (unsigned __int8 *)v14;
      goto LABEL_22;
  }

            int v13 = 7;
            goto LABEL_37;
          }
        }

        uint64_t v2 = 0LL;
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v12 = 0;
    }

    if (!v6) {
      uint64_t v12 = sqlite3_blob_open( **(sqlite3 ***)a1,  *(const char **)(*(void *)a1 + 8LL),  *(const char **)(a1 + 8),  "block",  a2,  0,  (sqlite3_blob **)v5);
    }
    goto LABEL_18;
  }

  return 0LL;
}

    if ((_DWORD)v5) {
      break;
    }
    int v13 = *(void *)v13;
  }

  while (v13);
  uint64_t v49 = v58;
  uint64_t v50 = v59;
  if (!(_DWORD)v5)
  {
LABEL_102:
    const void *v49 = v14;
    *uint64_t v50 = v71;
    goto LABEL_103;
  }

  uint64_t v51 = v71;
  if (v71)
  {
    uint64_t v52 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_100;
    }
    uint64_t v53 = v15[366];
    if (v53) {
      xmmword_18C465400(v53);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v51);
    --qword_18C468B10;
    off_18C4653A8(v51);
    uint64_t v51 = v15[366];
    if (v51)
    {
      uint64_t v52 = &xmmword_18C465410;
LABEL_100:
      (*v52)(v51);
    }
  }

int *sub_1812B4678(int *result, uint64_t a2)
{
  uint64_t v2 = (_WORD *)(a2 + 18);
  __int16 v3 = *(_WORD *)(a2 + 18);
  if ((v3 & 4) == 0)
  {
    int v4 = 0;
    int v5 = *result;
    do
    {
      if (v5 && (*(_BYTE *)(*(void *)a2 + 4LL) & 1) == 0) {
        break;
      }
      if ((*(void *)(a2 + 48) & *((void *)result + 13)) != 0LL) {
        break;
      }
      BOOL v6 = (v3 & 0x400) == 0 || v4 == 0;
      __int16 v7 = v6 ? 4 : 512;
      _WORD *v2 = v7 | v3;
      unsigned int v8 = *(_DWORD *)(a2 + 24);
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      uint64_t v9 = *(void *)(*(void *)(a2 + 8) + 32LL);
      uint64_t v10 = v9 + 56LL * v8;
      char v11 = *(_BYTE *)(v10 + 22) - 1;
      *(_BYTE *)(v10 + 22) = v11;
      if (v11) {
        break;
      }
      a2 = v9 + 56LL * v8;
      uint64_t v2 = (_WORD *)(a2 + 18);
      __int16 v3 = *(_WORD *)(a2 + 18);
      --v4;
    }

    while ((v3 & 4) == 0);
  }

  return result;
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v8 = *(void *)a1;
      if (*(void *)a1)
      {
        int v6 = 25;
        *(_DWORD *)(v8 + 80) = 25;
        sub_1812FA264(v8, 25);
        return v6;
      }

      sqlite3_log(21, "API called with finalized prepared statement", a3);
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3);
    }

    return 25;
  }

  uint64_t v5 = (a2 - 1);
  int v6 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    uint64_t v7 = *((void *)a1 + 16) + (v5 << 6);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v7, a3);
    }

    else
    {
      *(void *)uint64_t v7 = a3;
      *(_WORD *)(v7 + 20) = 4;
    }

    uint64_t v9 = *(void *)(*(void *)a1 + 24LL);
    if (v9) {
      xmmword_18C465410(v9);
    }
    return 0;
  }

  return v6;
}

uint64_t sub_1812B47EC(uint64_t a1, int a2)
{
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 9);
  if ((*(_WORD *)(v5 + 40) & 0xC) != 0) {
    bzero((void *)(v4 + v6), (*(_DWORD *)(v5 + 56) - v6));
  }
  *(_BYTE *)(v4 + v6) = a2;
  if ((a2 & 8) != 0) {
    int v7 = 8;
  }
  else {
    int v7 = 12;
  }
  uint64_t v8 = (v7 + v6);
  uint64_t v9 = v4 + v6;
  *(_DWORD *)(v9 + 1) = 0;
  *(_BYTE *)(v9 + 7) = 0;
  *(_BYTE *)(v9 + 5) = BYTE1(*(_DWORD *)(v5 + 56));
  *(_BYTE *)(v9 + 6) = *(_DWORD *)(v5 + 56);
  *(_DWORD *)(a1 + 20) = (unsigned __int16)(*(_DWORD *)(v5 + 56) - v8);
  uint64_t result = sub_1812FD430(a1, a2);
  *(_WORD *)(a1 + 18) = v8;
  uint64_t v11 = *(unsigned int *)(v5 + 52);
  *(void *)(a1 + 88) = v4 + v11;
  *(void *)(a1 + 96) = v4 + v8;
  *(void *)(a1 + 104) = v4 + *(unsigned __int8 *)(a1 + 10);
  *(_BYTE *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 26) = v11 - 1;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t sub_1812B48CC(uint64_t a1, uint64_t *a2, int *a3, unsigned int a4, int a5)
{
  uint64_t v120 = 0LL;
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 64);
  unsigned int v7 = bswap32(*(_DWORD *)(*(void *)(v5 + 80) + 36LL));
  if (v7 >= v6) {
    return sub_1812FBF50(83243);
  }
  if (v7)
  {
    if (a5 == 2)
    {
      BOOL v12 = 1;
    }

    else if (a5 == 1 && v6 >= a4)
    {
      uint64_t v16 = sub_18130008C((_DWORD *)a1, a4, &v119, 0LL);
      BOOL v12 = v119 == 2;
      if ((_DWORD)v16) {
        return v16;
      }
    }

    else
    {
      BOOL v12 = 0;
    }

    uint64_t v18 = *(void *)(v5 + 112);
    uint64_t v19 = *(_DWORD **)(v18 + 40);
    if ((*(_WORD *)(v18 + 52) & 4) != 0 && v19[8] >= *(_DWORD *)(v18 + 48))
    {
      if (v19[32])
      {
        uint64_t v16 = sub_1812FAFE4(v18);
        if ((_DWORD)v16) {
          return v16;
        }
      }
    }

    else
    {
      uint64_t v16 = v19[12];
      if ((_DWORD)v16) {
        return v16;
      }
      if (v19[46] <= v19[50])
      {
        uint64_t v16 = sub_1812ABE24(v18);
        if ((_DWORD)v16) {
          return v16;
        }
      }

      else
      {
        uint64_t v16 = sub_1812FED50(v18);
        if ((_DWORD)v16) {
          return v16;
        }
      }
    }

    int v114 = a5;
    uint64_t v20 = 0LL;
    unsigned int v21 = 0;
    *(_DWORD *)(*(void *)(v5 + 80) + 36LL) = bswap32(v7 - 1);
    uint64_t v115 = (unsigned int *)a3;
    uint64_t v113 = a2;
    unsigned int v117 = v6;
    while (1)
    {
      uint64_t v22 = v20;
      if (v20)
      {
        int v23 = *(unsigned __int8 **)(v20 + 80);
        int v24 = (*v23 << 24) | (v23[1] << 16) | (v23[2] << 8);
        unsigned int v25 = v23 + 3;
      }

      else
      {
        uint64_t v26 = *(unsigned __int8 **)(v5 + 80);
        int v24 = (v26[32] << 24) | (v26[33] << 16) | (v26[34] << 8);
        unsigned int v25 = v26 + 35;
      }

      unsigned int v27 = *v25;
      unsigned int v28 = v24 | v27;
      if ((v24 | v27) > v6 || v21 > v7)
      {
        uint64_t v16 = sub_1812FBF50(83299);
        goto LABEL_218;
      }

      uint64_t v30 = sub_1813008A0(a1, v24 | v27, &v120);
      if ((_DWORD)v30)
      {
        uint64_t v16 = v30;
        goto LABEL_218;
      }

      uint64_t v118 = v22;
      uint64_t v20 = v120;
      uint64_t v31 = *(_DWORD **)(v120 + 80);
      uint64_t v32 = bswap32(v31[1]);
      if (!v12 && !(_DWORD)v32) {
        break;
      }
      if (v32 > (*(_DWORD *)(a1 + 56) >> 2) - 2)
      {
        uint64_t v102 = v120;
        uint64_t v103 = sub_1812FBF50(83328);
        uint64_t v20 = v102;
        uint64_t v16 = v103;
        goto LABEL_214;
      }

      if (v12)
      {
        BOOL v37 = v114 == 2;
        if (v28 >= a4) {
          BOOL v37 = 0;
        }
        BOOL v38 = v28 != a4 && !v37;
        if (!v38)
        {
          *uint64_t v115 = v28;
          *a2 = v20;
          uint64_t v39 = *(void *)(v20 + 112);
          int v40 = *(_DWORD **)(v39 + 40);
          if ((*(_WORD *)(v39 + 52) & 4) == 0 || v40[8] < *(_DWORD *)(v39 + 48))
          {
            uint64_t v16 = v40[12];
            uint64_t v22 = v118;
            if ((_DWORD)v16) {
              goto LABEL_215;
            }
            uint64_t v41 = v20;
            if (v40[46] <= v40[50]) {
              uint64_t v42 = sub_1812ABE24(v39);
            }
            else {
              uint64_t v42 = sub_1812FED50(v39);
            }
            goto LABEL_119;
          }

          uint64_t v22 = v118;
          if (v40[32])
          {
            uint64_t v41 = v20;
            uint64_t v42 = sub_1812FAFE4(v39);
LABEL_119:
            uint64_t v16 = v42;
            uint64_t v20 = v41;
            if ((_DWORD)v42) {
              goto LABEL_215;
            }
          }

          if ((_DWORD)v32)
          {
            uint64_t v112 = v20;
            int v64 = *(unsigned __int8 **)(v20 + 80);
            int v65 = v64[8];
            int v66 = v64[9];
            int v67 = v64[11];
            unsigned int v68 = (v65 << 24) | (v66 << 16) | (v64[10] << 8) | v67;
            if (v68 > v117)
            {
              uint64_t v69 = sub_1812FBF50(83362);
LABEL_212:
              uint64_t v16 = v69;
LABEL_213:
              uint64_t v20 = v112;
LABEL_214:
              uint64_t v22 = v118;
              goto LABEL_215;
            }

            unsigned __int8 v111 = v64[10];
            uint64_t v69 = sub_1813008A0(a1, v68, &v119);
            if ((_DWORD)v69) {
              goto LABEL_212;
            }
            char v110 = v67;
            uint64_t v70 = v119;
            uint64_t v71 = *(void *)(v119 + 112);
            uint64_t v72 = *(_DWORD **)(v71 + 40);
            uint64_t v73 = v112;
            if ((*(_WORD *)(v71 + 52) & 4) == 0 || v72[8] < *(_DWORD *)(v71 + 48))
            {
              uint64_t v16 = v72[12];
              if ((_DWORD)v16) {
                goto LABEL_210;
              }
              if (v72[46] <= v72[50]) {
                uint64_t v74 = sub_1812ABE24(v71);
              }
              else {
                uint64_t v74 = sub_1812FED50(v71);
              }
              goto LABEL_151;
            }

            if (v72[32])
            {
              uint64_t v74 = sub_1812FAFE4(v71);
LABEL_151:
              uint64_t v16 = v74;
              uint64_t v73 = v112;
              if ((_DWORD)v74)
              {
LABEL_210:
                sub_18130023C(v70);
                goto LABEL_213;
              }
            }

            **(_DWORD **)(v70 + 80) = **(_DWORD **)(v73 + 80);
            *(_DWORD *)(*(void *)(v70 + 80) + 4LL) = bswap32(v32 - 1);
            memcpy( (void *)(*(void *)(v70 + 80) + 8LL),  (const void *)(*(void *)(v73 + 80) + 12LL),  (4 * (v32 - 1)));
            sub_18130023C(v70);
            if (v118)
            {
              uint64_t v69 = sub_1812ABDD4(*(void *)(v118 + 112));
              char v85 = v110;
              if ((_DWORD)v69) {
                goto LABEL_212;
              }
              int v86 = *(_BYTE **)(v118 + 80);
              *int v86 = v65;
              v86[1] = v66;
              v86[2] = v111;
              int v87 = v86 + 3;
            }

            else
            {
              uint64_t v88 = *(_BYTE **)(v5 + 80);
              v88[32] = v65;
              v88[33] = v66;
              v88[34] = v111;
              int v87 = v88 + 35;
              char v85 = v110;
            }

            *int v87 = v85;
            unsigned int v6 = v117;
            uint64_t v22 = v118;
          }

          else if (v22)
          {
            uint64_t v75 = *(void *)(v22 + 112);
            uint64_t v76 = *(_DWORD **)(v75 + 40);
            if ((*(_WORD *)(v75 + 52) & 4) != 0 && v76[8] >= *(_DWORD *)(v75 + 48))
            {
              unsigned int v6 = v117;
              if (v76[32])
              {
                uint64_t v89 = v20;
                uint64_t v16 = sub_1812FAFE4(v75);
                uint64_t v20 = v89;
                if ((_DWORD)v16) {
                  goto LABEL_215;
                }
              }
            }

            else
            {
              uint64_t v16 = v76[12];
              if ((_DWORD)v16) {
                goto LABEL_215;
              }
              uint64_t v77 = v20;
              uint64_t v78 = v76[46] <= v76[50] ? sub_1812ABE24(v75) : sub_1812FED50(v75);
              uint64_t v16 = v78;
              unsigned int v6 = v117;
              uint64_t v20 = v77;
              if ((_DWORD)v78) {
                goto LABEL_215;
              }
            }

            **(_DWORD **)(v22 + 80) = **(_DWORD **)(v20 + 80);
          }

          else
          {
            *(_DWORD *)(*(void *)(v5 + 80) + 32LL) = **(_DWORD **)(v20 + 80);
            unsigned int v6 = v117;
          }

          uint64_t v20 = 0LL;
          BOOL v12 = 0;
          uint64_t v16 = 0LL;
          uint64_t v120 = 0LL;
          goto LABEL_113;
        }
      }

      if ((_DWORD)v32)
      {
        if (!a4) {
          goto LABEL_90;
        }
        if (v114 == 2)
        {
          uint64_t v43 = 0LL;
          int v44 = 8;
          while (bswap32(*(_DWORD *)((char *)v31 + (v44 & 0xFFFFFFFC))) > a4)
          {
            ++v43;
            v44 += 4;
            if (v32 == v43) {
              goto LABEL_90;
            }
          }

          goto LABEL_91;
        }

        if (v32 >= 2)
        {
          LODWORD(v43) = 0;
          int v45 = bswap32(v31[2]) - a4;
          if (v45 == 0x80000000) {
            int v46 = 0x7FFFFFFF;
          }
          else {
            int v46 = -v45;
          }
          if (v45 < 0) {
            int v45 = v46;
          }
          int v47 = 12;
          for (uint64_t i = 1LL; i != v32; ++i)
          {
            int v49 = bswap32(*(_DWORD *)((char *)v31 + (v47 & 0xFFFFFFFC))) - a4;
            if (v49 == 0x80000000) {
              int v50 = 0x7FFFFFFF;
            }
            else {
              int v50 = -v49;
            }
            if (v49 < 0) {
              int v49 = v50;
            }
            if (v49 < v45)
            {
              LODWORD(v43) = i;
              int v45 = v49;
            }

            v47 += 4;
          }
        }

        else
        {
LABEL_90:
          LODWORD(v43) = 0;
        }

LABEL_91:
        uint64_t v51 = (_DWORD *)((char *)v31 + (4 * v43 + 8));
        unsigned int v52 = bswap32(*v51);
        if (v52 > v117 || v52 <= 1)
        {
          uint64_t v104 = v120;
          uint64_t v105 = sub_1812FBF50(83427);
          uint64_t v20 = v104;
          uint64_t v16 = v105;
          uint64_t v22 = v118;
          if (!v104)
          {
LABEL_218:
            if (v22)
            {
              uint64_t v108 = *(void *)(v22 + 112);
              if ((*(_WORD *)(v108 + 52) & 0x20) != 0)
              {
                uint64_t v109 = *(void *)(v108 + 40);
                --*(_DWORD *)(v109 + 152);
                *(void *)(v108 + 32) = *(void *)(v109 + 168);
                *(void *)(v109 + 168) = v108;
                (*(void (**)(void, void, void))(**(void **)(v109 + 72) + 144LL))( *(void *)(v109 + 72),  *(void *)(v109 + 200) * (*(_DWORD *)(v108 + 48) - 1),  *(void *)(v108 + 8));
              }

              else
              {
                sub_1812F9F44(v108);
              }
            }

            return v16;
          }

            uint64_t v75 = v20[5];
            if (!(_DWORD)v75) {
              goto LABEL_107;
            }
            uint64_t v76 = v20[6];
            if ((int)v75 <= 0)
            {
              if ((int)v17 >= 1)
              {
                do
                {
                  if (*((_DWORD *)v16 + 1) == v76 && (byte_1813C6495[*v16] & 0x40) != 0) {
                    v44 += *((void *)v16 + 4);
                  }
                  v16 += 40;
                  --v17;
                }

                while (v17);
              }
            }

            else
            {
              uint64_t v77 = (v76 - v75);
              if (v76 == (_DWORD)v75)
              {
                uint64_t v78 = v75;
LABEL_105:
                int v86 = v76 - v78 + 1;
                int v87 = &v16[40 * v78 + 32];
                do
                {
                  uint64_t v88 = *(void *)v87;
                  v87 += 40;
                  v44 += v88;
                  --v86;
                }

                while (v86);
                goto LABEL_107;
              }

              unsigned int v79 = 0LL;
              uint64_t v80 = v77 + 1;
              uint64_t v81 = (v77 + 1) & 0x1FFFFFFFELL;
              uint64_t v78 = v81 + v75;
              unsigned int v82 = &v16[40 * v75 + 72];
              unsigned int v83 = v81;
              do
              {
                unsigned int v84 = *((void *)v82 - 5);
                char v85 = *(void *)v82;
                v82 += 80;
                v44 += v84;
                v79 += v85;
                v83 -= 2LL;
              }

              while (v83);
              v44 += v79;
              if (v80 != v81) {
                goto LABEL_105;
              }
            }

  uint64_t v16 = v28;
LABEL_21:
  uint64_t v17 = *(_DWORD *)(a2 + 88);
  sqlite3changeset_finalize(a2);
LABEL_22:
  uint64_t v18 = v61;
LABEL_23:
  sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 0", 0LL, 0LL, 0LL);
  if ((v18 & 1) == 0)
  {
    if ((_DWORD)v16)
    {
      sqlite3_exec(a1, "ROLLBACK TO changeset_apply", 0LL, 0LL, 0LL);
      sqlite3_exec(a1, "RELEASE changeset_apply", 0LL, 0LL, 0LL);
      goto LABEL_120;
    }

        int v49 = v340;
        if (v30 > v340) {
          int v49 = v30;
        }
        if (v49 >= v41) {
          uint64_t v30 = v41;
        }
        else {
          uint64_t v30 = v49;
        }
        uint64_t v347 = v30;
        int v338 = 1;
        uint64_t v32 = 1;
        a1 = v339;
        if (v30 < 1)
        {
LABEL_540:
          int v50 = v6;
LABEL_541:
          unsigned int v6 = v50;
LABEL_542:
          if (v338)
          {
            if (!(_DWORD)v6)
            {
              *(void *)&v349[0] = 0LL;
              unsigned int v6 = sub_1813636A8((uint64_t *)a1, 23, (sqlite3_stmt **)v349, 0LL);
              if (!(_DWORD)v6)
              {
                uint64_t v305 = *(uint64_t **)&v349[0];
                if (!sub_1812B2390(*(uint64_t *)&v349[0], 0))
                {
                  uint64_t v306 = v305[16];
                  if ((*(_WORD *)(v306 + 20) & 0x9000) != 0)
                  {
                    sub_1813040AC(v306, 1LL);
                  }

                  else
                  {
                    *(void *)uint64_t v306 = 1LL;
                    *(_WORD *)(v306 + 20) = 4;
                  }

                  uint64_t v307 = *(void *)(*v305 + 24);
                  if (v307) {
                    xmmword_18C465410(v307);
                  }
                }

                int v308 = v346;
                if ((v346 & 0x80000000) != 0)
                {
                  sub_1812CF36C(98740);
                }

                else
                {
                  uint64_t v309 = v345;
                  if (!sub_1812B2390((uint64_t)v305, 1u))
                  {
                    if (v309)
                    {
                      uint64_t v310 = sub_181269368(v305[16] + 64, v309, v308, 0, 0LL);
                      if (v310)
                      {
                        int v311 = v310;
                        int v312 = *v305;
                        *(_DWORD *)(v312 + 80) = v311;
                        sub_1812FA264(v312, v311);
                        sub_1813037C4(*v305, v311);
                      }
                    }

                    int v313 = *(void *)(*v305 + 24);
                    if (v313) {
                      xmmword_18C465410(v313);
                    }
                  }
                }

                sqlite3_step((sqlite3_stmt *)v305);
                unsigned int v6 = sqlite3_reset((sqlite3_stmt *)v305);
                if (!sub_1812B2390((uint64_t)v305, 1u))
                {
                  uint64_t v314 = *(void *)(*v305 + 24);
                  if (v314) {
                    xmmword_18C465410(v314);
                  }
                }

                uint64_t v9 = v334;
              }
            }
          }

          break;
        }

LABEL_215:
          uint64_t v106 = *(void *)(v20 + 112);
          if ((*(_WORD *)(v106 + 52) & 0x20) != 0)
          {
            uint64_t v107 = *(void *)(v106 + 40);
            --*(_DWORD *)(v107 + 152);
            *(void *)(v106 + 32) = *(void *)(v107 + 168);
            *(void *)(v107 + 168) = v106;
            (*(void (**)(void, void, void))(**(void **)(v107 + 72) + 144LL))( *(void *)(v107 + 72),  *(void *)(v107 + 200) * (*(_DWORD *)(v106 + 48) - 1),  *(void *)(v106 + 8));
          }

          else
          {
            sub_1812F9F44(v106);
          }

          goto LABEL_218;
        }

        if (v52 < a4 && v114 == 2 || !v12 || v52 == a4)
        {
          *uint64_t v115 = v52;
          uint64_t v57 = *(void *)(v20 + 112);
          int v58 = *(_DWORD **)(v57 + 40);
          if ((*(_WORD *)(v57 + 52) & 4) == 0 || v58[8] < *(_DWORD *)(v57 + 48))
          {
            uint64_t v16 = v58[12];
            if ((_DWORD)v16) {
              goto LABEL_214;
            }
            uint64_t v59 = v20;
            if (v58[46] <= v58[50]) {
              uint64_t v60 = sub_1812ABE24(v57);
            }
            else {
              uint64_t v60 = sub_1812FED50(v57);
            }
            goto LABEL_138;
          }

          if (v58[32])
          {
            uint64_t v59 = v20;
            uint64_t v60 = sub_1812FAFE4(v57);
LABEL_138:
            uint64_t v16 = v60;
            uint64_t v20 = v59;
            if ((_DWORD)v60) {
              goto LABEL_214;
            }
          }

          v31[1] = bswap32(v32 - 1);
          unsigned int v79 = *v115;
          uint64_t v80 = *(unsigned int **)(a1 + 96);
          if (!v80)
          {
            uint64_t v81 = v20;
            a2 = v113;
            unsigned int v6 = v117;
            uint64_t v22 = v118;
            goto LABEL_176;
          }

          a2 = v113;
          unsigned int v6 = v117;
          uint64_t v22 = v118;
          if (*v80 < v79)
          {
            uint64_t v81 = v20;
            goto LABEL_176;
          }

          unsigned int v82 = v79 - 1;
          if (v79 - 1 >= *v80) {
            goto LABEL_175;
          }
          while (1)
          {
            unsigned int v83 = v80[2];
            if (!v83) {
              break;
            }
            unsigned int v84 = v82 / v83;
            v82 %= v83;
            uint64_t v80 = *(unsigned int **)&v80[2 * v84 + 4];
            if (!v80)
            {
              uint64_t v81 = v20;
              goto LABEL_176;
            }
          }

          if (*v80 <= 0xF80)
          {
            uint64_t v81 = v20;
            goto LABEL_176;
          }

          unsigned int v90 = v82 % 0x7C;
          unsigned int v91 = v80[v82 % 0x7C + 4];
          if (v91)
          {
            uint64_t v81 = v20;
            unsigned int v92 = v82 + 1;
            do
            {
              if (v91 == v92) {
                break;
              }
              if (v90 == 123) {
                unsigned int v90 = 0;
              }
              else {
                ++v90;
              }
              unsigned int v91 = v80[v90 + 4];
            }

            while (v91);
          }

          else
          {
LABEL_175:
            uint64_t v81 = v20;
          }

          if (v37)
          {
            uint64_t v74 = *(_WORD *)(v37 + 20);
            if ((v74 & 0x24) != 0)
            {
              uint64_t v75 = *(void *)v37;
              goto LABEL_220;
            }

            if ((v74 & 8) != 0)
            {
              uint64_t v81 = *(double *)v37;
              if (*(double *)v37 >= -9.22337204e18)
              {
                if (v81 <= 9.22337204e18) {
                  uint64_t v75 = (uint64_t)v81;
                }
                else {
                  uint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
                }
              }

              else
              {
                uint64_t v75 = 0x8000000000000000LL;
              }

LABEL_176:
          uint64_t v93 = sub_1813008A0(a1, v79, a2);
          if ((_DWORD)v93)
          {
            uint64_t v16 = v93;
            goto LABEL_178;
          }

          uint64_t v16 = sub_1812ABDD4(*(void *)(*a2 + 112));
          if ((_DWORD)v16)
          {
            sub_18130023C(*a2);
            BOOL v12 = 0;
            *a2 = 0LL;
          }

          else
          {
LABEL_178:
            BOOL v12 = 0;
          }

          uint64_t v20 = v81;
          goto LABEL_113;
        }

        uint64_t v16 = 0LL;
        BOOL v12 = 1;
        a2 = v113;
        goto LABEL_112;
      }

      uint64_t v16 = 0LL;
LABEL_112:
      unsigned int v6 = v117;
      uint64_t v22 = v118;
LABEL_113:
      if (v22)
      {
        uint64_t v61 = v20;
        uint64_t v62 = *(void *)(v22 + 112);
        if ((*(_WORD *)(v62 + 52) & 0x20) != 0)
        {
          uint64_t v63 = *(void *)(v62 + 40);
          --*(_DWORD *)(v63 + 152);
          *(void *)(v62 + 32) = *(void *)(v63 + 168);
          *(void *)(v63 + 168) = v62;
          (*(void (**)(void, void, void))(**(void **)(v63 + 72) + 144LL))( *(void *)(v63 + 72),  *(void *)(v63 + 200) * (*(_DWORD *)(v62 + 48) - 1),  *(void *)(v62 + 8));
        }

        else
        {
          sub_1812F9F44(v62);
        }

        uint64_t v20 = v61;
      }

      ++v21;
      BOOL v38 = !v12;
      BOOL v12 = 1;
      if (v38)
      {
        uint64_t v22 = 0LL;
        if (!v20) {
          goto LABEL_218;
        }
        goto LABEL_215;
      }
    }

    uint64_t v33 = *(void *)(v120 + 112);
    uint64_t v34 = *(_DWORD **)(v33 + 40);
    if ((*(_WORD *)(v33 + 52) & 4) != 0 && v34[8] >= *(_DWORD *)(v33 + 48))
    {
      if (!v34[32])
      {
LABEL_72:
        BOOL v12 = 0;
        uint64_t v16 = 0LL;
        *uint64_t v115 = v28;
        *(_DWORD *)(*(void *)(v5 + 80) + 32LL) = *v31;
        *a2 = v20;
        uint64_t v120 = 0LL;
        uint64_t v20 = 0LL;
        goto LABEL_112;
      }

      uint64_t v35 = v120;
      uint64_t v36 = sub_1812FAFE4(v33);
    }

    else
    {
      uint64_t v16 = v34[12];
      if ((_DWORD)v16) {
        goto LABEL_214;
      }
      uint64_t v35 = v120;
      if (v34[46] <= v34[50]) {
        uint64_t v36 = sub_1812ABE24(v33);
      }
      else {
        uint64_t v36 = sub_1812FED50(v33);
      }
    }

    uint64_t v16 = v36;
    uint64_t v20 = v35;
    if ((_DWORD)v36) {
      goto LABEL_214;
    }
    uint64_t v31 = *(_DWORD **)(v35 + 80);
    goto LABEL_72;
  }

  uint64_t v14 = *(void *)(v5 + 112);
  uint64_t v15 = *(_DWORD **)(v14 + 40);
  if ((*(_WORD *)(v14 + 52) & 4) != 0 && v15[8] >= *(_DWORD *)(v14 + 48))
  {
    if (!v15[32]) {
      goto LABEL_186;
    }
    uint64_t v17 = sub_1812FAFE4(v14);
  }

  else
  {
    uint64_t v16 = v15[12];
    if ((_DWORD)v16) {
      return v16;
    }
    if (v15[46] <= v15[50]) {
      uint64_t v17 = sub_1812ABE24(v14);
    }
    else {
      uint64_t v17 = sub_1812FED50(v14);
    }
  }

  uint64_t v16 = v17;
  if ((_DWORD)v17) {
    return v16;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 64);
LABEL_186:
  unsigned int v94 = v6 + 1;
  *(_DWORD *)(a1 + 64) = v6 + 1;
  unsigned int v95 = dword_18C54FA50 / *(_DWORD *)(a1 + 52);
  if (v6 == v95)
  {
    unsigned int v94 = v6 + 2;
    *(_DWORD *)(a1 + 64) = v6 + 2;
  }

  if (*(_BYTE *)(a1 + 33))
  {
    if (v94 >= 2)
    {
      unsigned int v97 = (v94 - 2) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
      int v98 = v97 + 1 == v95 ? 3 : 2;
      unsigned int v96 = v98 + v97;
    }

    else
    {
      unsigned int v96 = 0;
    }

    if (v96 == v94)
    {
      uint64_t v119 = 0LL;
      uint64_t v16 = sub_1813008A0(a1, v94, &v119);
      if ((_DWORD)v16) {
        return v16;
      }
      uint64_t v99 = v119;
      uint64_t v16 = sub_1812ABDD4(*(void *)(v119 + 112));
      sub_18130023C(v99);
      if ((_DWORD)v16) {
        return v16;
      }
      int v100 = *(_DWORD *)(a1 + 64);
      unsigned int v94 = v100 + 1;
      *(_DWORD *)(a1 + 64) = v100 + 1;
      if (v100 == dword_18C54FA50 / *(_DWORD *)(a1 + 52))
      {
        unsigned int v94 = v100 + 2;
        *(_DWORD *)(a1 + 64) = v100 + 2;
      }
    }
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 80LL) + 28LL) = bswap32(v94);
  int v101 = *(_DWORD *)(a1 + 64);
  *a3 = v101;
  uint64_t v16 = sub_1813008A0(a1, v101, a2);
  if (!(_DWORD)v16)
  {
    uint64_t v16 = sub_1812ABDD4(*(void *)(*a2 + 112));
    if ((_DWORD)v16)
    {
      sub_18130023C(*a2);
      *a2 = 0LL;
    }
  }

  return v16;
}

        int32x4_t v164 = 8;
LABEL_177:
        sub_181279C3C(v62, 134LL, v63, v202, 1LL, v160, v161, v162);
        if ((*(_BYTE *)(v8 + 44) & 4) == 0 && (*(_BYTE *)(a2 + 48) & 0x80) != 0 && (*(_WORD *)(v143 + 99) & 3) == 2) {
          sub_181344B84(a1, a2, (v63 + 1), v202, v175, v176, v177, v178);
        }
LABEL_181:
        sub_1813103F4(v62, 138LL, (v63 + 1), v202, v175, v176, v177, v178);
        int16x8_t v183 = *(_DWORD *)(v62 + 144);
        int64x2_t v133 = __OFSUB__(v183, 1);
        uint64_t v184 = v183 - 1;
        if (v184 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40LL * v184 + 2) = v164;
        }
        sub_1813103F4(v62, 39LL, v63, (v163 + 1), v179, v180, v181, v182);
        uint64_t v189 = &byte_18C550680;
        if (!*(_BYTE *)(*(void *)v62 + 103LL)) {
          uint64_t v189 = (char *)(*(void *)(v62 + 136) + 40LL * v163);
        }
        *((_DWORD *)v189 + 2) = *(_DWORD *)(v62 + 144);
        sub_1813103F4(v62, 122LL, v63, 0LL, v185, v186, v187, v188);
        sub_1813103F4(v62, 122LL, (v63 + 1), 0LL, v144, v145, v146, v147);
        uint64_t v143 = *(void *)(v143 + 40);
        if (!v143) {
          goto LABEL_185;
        }
      }

      int32x4_t v165 = *(unsigned __int16 *)(i + 96);
      if (!*(_WORD *)(i + 96))
      {
        LODWORD(v166) = 0;
LABEL_174:
        if ((_DWORD)v166 == (_DWORD)v165) {
          goto LABEL_175;
        }
        goto LABEL_176;
      }

      unsigned int v166 = 0LL;
LABEL_165:
      unsigned int v167 = *(unsigned __int8 **)(*(void *)(i + 64) + 8 * v166);
      if (!v167) {
        goto LABEL_174;
      }
      for (uint64_t j = "BINARY"; ; ++j)
      {
        int v169 = *(unsigned __int8 *)j;
        unsigned int v170 = *v167;
        if ((_DWORD)v169 == (_DWORD)v170)
        {
          if (!*j)
          {
            if (++v166 == v165)
            {
LABEL_175:
              sub_181319BA8(v62, 137LL, (v63 + 1), v158, v159, v160, v161, v162);
              sub_1813103F4(v62, 129LL, (v63 + 1), v63, v171, v172, v173, v174);
              int32x4_t v164 = 152;
              goto LABEL_181;
            }

            goto LABEL_165;
          }
        }

        else if (byte_1813C6343[v169] != byte_1813C6343[v170])
        {
          goto LABEL_174;
        }

        ++v167;
      }
    }

    return 0LL;
  }

  uint64_t result = 0LL;
  if ((v57 & 0x100000000LL) == 0 && !*(void *)(a2 + 72)) {
    goto LABEL_104;
  }
  return result;
}

    *(void *)unsigned int v79 = 0LL;
    *(void *)(v79 + 8) = v83;
    *(void *)(v79 + 32) = v91;
    uint64_t v80 = HIDWORD(v90);
    *(_DWORD *)(v79 + 24) = 0;
    *(_DWORD *)(v79 + 28) = v80;
    *(void *)&unsigned int v91 = 0LL;
    goto LABEL_165;
  }

  if (!DWORD2(v90)) {
    goto LABEL_154;
  }
LABEL_158:
  sub_18138CFA4(*((uint64_t *)&v91 + 1));
  uint64_t v75 = v91;
  if ((void)v91)
  {
    uint64_t v76 = &off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_164;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v75);
    --qword_18C468B10;
    off_18C4653A8(v75);
    uint64_t v75 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v76 = &xmmword_18C465410;
LABEL_164:
      (*v76)(v75);
    }
  }

uint64_t sub_1812B54BC(uint64_t a1, double a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  sub_1812B57D4(v2, 0, 0, a2);
  if (!*(_BYTE *)(v2 + 17)) {
    goto LABEL_23;
  }
  int v4 = *(_DWORD *)(v2 + 20) - 1;
  *(_DWORD *)(v2 + 20) = v4;
  if (!v4)
  {
    sub_1812FDEFC(v2);
    if (!*(_BYTE *)(v2 + 17)) {
      goto LABEL_23;
    }
  }

  if ((_BYTE)word_18C465384)
  {
    uint64_t v5 = qword_18C4653F0(2LL);
    uint64_t v6 = v5;
    if (v5)
    {
      xmmword_18C465400(v5);
      char v7 = 0;
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  char v7 = 1;
LABEL_12:
  int v8 = *(_DWORD *)(v3 + 104);
  *(_DWORD *)(v3 + 104) = v8 - 1;
  if (v8 <= 1)
  {
    uint64_t v9 = &qword_18C550640;
    uint64_t v10 = qword_18C550640;
    if (qword_18C550640 == v3)
    {
LABEL_17:
      *uint64_t v9 = *(void *)(v3 + 112);
    }

    else
    {
      while (v10)
      {
        uint64_t v11 = v10;
        uint64_t v10 = *(void *)(v10 + 112);
        if (v10 == v3)
        {
          uint64_t v9 = (uint64_t *)(v11 + 112);
          goto LABEL_17;
        }
      }
    }

    if (*(void *)(v3 + 88)) {
      off_18C4653F8();
    }
  }

  if ((v7 & 1) == 0) {
    xmmword_18C465410(v6);
  }
  if (v8 > 1) {
    goto LABEL_41;
  }
LABEL_23:
  sub_1812B5A48(*(void *)v3, *(void *)v2);
  BOOL v12 = *(void (**)(void))(v3 + 80);
  if (v12 && *(void *)(v3 + 72)) {
    v12();
  }
  uint64_t v13 = *(void *)(v3 + 72);
  if (!v13) {
    goto LABEL_33;
  }
  uint64_t v14 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v13);
    --qword_18C468B10;
    off_18C4653A8(v13);
    uint64_t v13 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_33;
    }
    uint64_t v14 = &xmmword_18C465410;
  }

  (*v14)(v13);
LABEL_33:
  uint64_t v15 = *(void *)(v3 + 136);
  if (v15)
  {
    *(void *)(v3 + 136) = v15 - 4;
    sub_1812FC960(v15 - 4);
    *(void *)(v3 + 136) = 0LL;
  }

  uint64_t v16 = &off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_40;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  off_18C4653A8(v3);
  uint64_t v3 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v16 = &xmmword_18C465410;
LABEL_40:
    (*v16)(v3);
  }

uint64_t sub_1812B57D4(uint64_t a1, int a2, int a3, double a4)
{
  int v5 = a2;
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1812FDE20(a1);
    if (v5) {
      goto LABEL_4;
    }
  }

  else if (a2)
  {
LABEL_4:
    sub_181301130(a1, v5, a3);
    goto LABEL_5;
  }

  uint64_t v10 = *(unsigned __int8 **)(v7 + 16);
  if (v10)
  {
    int v11 = sub_1812FFCF0(v10, 0, 0LL);
    if (v11)
    {
      int v5 = v11;
      a3 = 0;
      goto LABEL_4;
    }
  }

uint64_t sub_1812B5930(uint64_t a1, double a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 21);
  if (v3 == 6) {
    return *(unsigned int *)(a1 + 48);
  }
  if (v3 < 2) {
    return 0LL;
  }
  if (*(void *)(a1 + 344))
  {
    unsigned int v5 = sub_1813030CC(a1, 2, -1, a2);
    LODWORD(result) = sub_1812A1380(a1, *(unsigned __int8 *)(a1 + 24), 0);
    if (v5) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = result;
    }
  }

  else if (v3 == 2 || **(void **)(a1 + 80) == 0LL)
  {
    uint64_t result = sub_1812A1380(a1, 0, 0);
    if (v3 >= 3 && !*(_BYTE *)(a1 + 19))
    {
      *(_DWORD *)(a1 + 48) = 4;
      *(_BYTE *)(a1 + 21) = 6;
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t result = sub_1812C8318(a1, 0);
  }

  if (result == 13 || result == 10)
  {
    *(_DWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 21) = 6;
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 27) && !*(void *)(a1 + 296)) {
        uint64_t v8 = sub_1812FCB08;
      }
      else {
        uint64_t v8 = sub_1812FCD58;
      }
      goto LABEL_28;
    }

uint64_t sub_1812B5A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 328);
  if (off_18C550648) {
    off_18C550648(a1);
  }
  uint64_t v5 = *(void *)(v3 + 168);
  if (v5)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 32);
      uint64_t v8 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v5);
        --qword_18C468B10;
        off_18C4653A8(v5);
        uint64_t v5 = xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_9;
        }
        uint64_t v8 = &xmmword_18C465410;
      }

      (*v8)(v5);
LABEL_9:
      uint64_t v5 = v7;
    }

    while (v7);
  }

  *(_BYTE *)(v3 + 8) = 0;
  if (!a2
    || (*(_BYTE *)(a2 + 49) & 8) != 0
    || !*(_BYTE *)(v3 + 16)
    && *(_DWORD *)(v3 + 32)
    && (uint64_t v9 = **(void **)(v3 + 72)) != 0
    && (int v10 = (*(uint64_t (**)(void))(v9 + 80))(), v10 != 12)
    && v10)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = v4;
  }

  sub_1812B5DC4(*(void *)(v3 + 344), a2, *(unsigned __int8 *)(v3 + 15), *(_DWORD *)(v3 + 200), v6);
  *(void *)(v3 + 344) = 0LL;
  ++*(_DWORD *)(v3 + 132);
  for (uint64_t i = *(void *)(v3 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  sub_18126C6E4(*(void **)(v3 + 336), 0);
  if (!*(_BYTE *)(v3 + 19))
  {
    uint64_t v19 = *(uint64_t **)(v3 + 80);
    uint64_t v20 = *v19;
    if (!*v19)
    {
LABEL_55:
      int v23 = *(unsigned __int8 *)(v3 + 21);
      if (*(_BYTE *)(v3 + 21))
      {
        if (v23 == 1)
        {
          if (!*(_BYTE *)(v3 + 8)) {
            sub_1812A1380(v3, 0, 0);
          }
        }

        else if (v23 != 6)
        {
          if (off_18C550648) {
            double v12 = off_18C550648(v19);
          }
          uint64_t v24 = sub_1812B5930(v3, v12);
          if (off_18C550650) {
            off_18C550650(v24);
          }
        }
      }

      goto LABEL_23;
    }

    if (!*(_BYTE *)(v3 + 11))
    {
      uint64_t v19 = (uint64_t *)(*(uint64_t (**)(void))(v20 + 40))();
      if ((_DWORD)v19)
      {
LABEL_42:
        if (v19 == 13 || v19 == 10)
        {
          *(_DWORD *)(v3 + 48) = (_DWORD)v19;
          *(_BYTE *)(v3 + 21) = 6;
          if ((_DWORD)v19)
          {
            uint64_t v22 = sub_1812FCAFC;
          }

          else if (*(_BYTE *)(v3 + 27) && !*(void *)(v3 + 296))
          {
            uint64_t v22 = sub_1812FCB08;
          }

          else
          {
            uint64_t v22 = sub_1812FCD58;
          }

          *(void *)(v3 + 288) = v22;
        }

        goto LABEL_55;
      }

      uint64_t v20 = **(void **)(v3 + 80);
    }

    uint64_t v19 = (uint64_t *)(*(uint64_t (**)(void))(v20 + 48))();
    goto LABEL_42;
  }

uint64_t sub_1812B5DC4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(void *)v10) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 80LL))(v10, 106LL, 0LL);
  }
  uint64_t v11 = **(void **)(v9 + 16);
  if (v11) {
    (*(void (**)(void))(v11 + 80))();
  }
  if (a5)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 8) + 56LL))(*(void *)(v9 + 8), 4LL);
    if ((_DWORD)v12) {
      goto LABEL_11;
    }
    if (!*(_BYTE *)(v9 + 63)) {
      *(_BYTE *)(v9 + 63) = 1;
    }
    uint64_t v12 = sub_1812C09C4(v9, a2, 0, 0LL, 0LL, a3, a4, a5, 0LL, 0LL);
    if ((_DWORD)v12)
    {
LABEL_11:
      uint64_t v13 = v12;
      a5 = 0LL;
      goto LABEL_17;
    }

    uint64_t v14 = **(void **)(v9 + 8);
    if (v14) {
      (*(void (**)(void))(v14 + 80))();
    }
    a5 = 1LL;
  }

  uint64_t v13 = 0LL;
LABEL_17:
  uint64_t v15 = sub_1812FC394(v9, a5);
  uint64_t v17 = *(void *)(v9 + 16);
  if (*(void *)v17)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v17 + 8LL))(*(void *)(v9 + 16));
    *(void *)uint64_t v17 = 0LL;
  }

  if ((_DWORD)a5)
  {
    if (off_18C550648) {
      v16.n128_f64[0] = off_18C550648(v15);
    }
    uint64_t v18 = *(void *)v9;
    uint64_t v19 = *(uint64_t (**)(__n128))(*(void *)v9 + 48LL);
    if (v19) {
      uint64_t v18 = v19(v16);
    }
    if (off_18C550650) {
      off_18C550650(v18);
    }
  }

  uint64_t v20 = *(void *)(v9 + 48);
  if (!v20) {
    goto LABEL_33;
  }
  unsigned int v21 = &off_18C4653A8;
  if (dword_18C465380)
  {
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v20);
    --qword_18C468B10;
    off_18C4653A8(v20);
    uint64_t v20 = xmmword_18C468B70;
    if (!(void)xmmword_18C468B70) {
      goto LABEL_33;
    }
    unsigned int v21 = &xmmword_18C465410;
  }

  (*v21)(v20);
LABEL_33:
  uint64_t v22 = (void (**)(uint64_t))&off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_38:
    (*v22)(v9);
    return v13;
  }

  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v9);
  --qword_18C468B10;
  off_18C4653A8(v9);
  uint64_t v9 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v22 = (void (**)(uint64_t))&xmmword_18C465410;
    goto LABEL_38;
  }

  return v13;
}

uint64_t sub_1812B6064(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2)
  {
    for (unint64_t i = 0LL; i < v2; ++i)
    {
      unint64_t v4 = *(void *)(*(void *)(v1 + 40) + 8 * i);
      unint64_t v9 = v4;
      if (v4)
      {
        do
        {
          unint64_t v4 = *(void *)(v4 + 24);
          sub_18135E590((int *)v1, &v9);
          unint64_t v9 = v4;
        }

        while (v4);
        unint64_t v2 = *(unsigned int *)(v1 + 32);
      }
    }
  }

  *(_DWORD *)(v1 + 120) = 0;
  while (*(void *)(v1 + 144))
    sub_18135E2A8(v1, *(void *)(v1 + 136));
  while (*(void *)(v1 + 160))
    sub_18135E2A8(v1, *(void *)(v1 + 152));
  uint64_t v5 = *(void *)(v1 + 40);
  if (v5)
  {
    uint64_t v6 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v6)(v5);
      goto LABEL_19;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v5);
    --qword_18C468B10;
    off_18C4653A8(v5);
    uint64_t v5 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v6 = &xmmword_18C465410;
      goto LABEL_18;
    }
  }

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    return sqlite3_value_blob((sqlite3_value *)&qword_1813C6E90);
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
  {
    uint64_t v6 = (sqlite3_value *)(v5 + ((unint64_t)iCol << 6));
  }

  else
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
    uint64_t v6 = (sqlite3_value *)&qword_1813C6E90;
  }

  uint64_t v8 = sqlite3_value_blob(v6);
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = *((_DWORD *)a1 + 13);
  if (v10 || (int v11 = *(unsigned __int8 *)(v9 + 103), *(_BYTE *)(v9 + 103)))
  {
    int v11 = sub_1813037C4(v9, v10);
    uint64_t v9 = *(void *)a1;
  }

  *((_DWORD *)a1 + 13) = v11;
  uint64_t v12 = *(void *)(v9 + 24);
  if (v12) {
    xmmword_18C465410(v12);
  }
  return v8;
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    return 5;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
  {
    uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  }

  else
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
    uint64_t v6 = &qword_1813C6E90;
  }

  int v8 = byte_1813C6455[*((_WORD *)v6 + 10) & 0x3F];
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = *((_DWORD *)a1 + 13);
  if (v10 || (int v11 = *(unsigned __int8 *)(v9 + 103), *(_BYTE *)(v9 + 103)))
  {
    int v11 = sub_1813037C4(v9, v10);
    uint64_t v9 = *(void *)a1;
  }

  *((_DWORD *)a1 + 13) = v11;
  uint64_t v12 = *(void *)(v9 + 24);
  if (v12) {
    xmmword_18C465410(v12);
  }
  return v8;
}

uint64_t sub_1812B63B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v11 = *(void *)(a2 + 80);
  if (!v11 || (uint64_t result = sub_1812B63B8(a1, v11, a3)) == 0)
  {
    uint64_t v13 = *(_DWORD **)(a2 + 32);
    if (*v13 <= v8) {
      return 0LL;
    }
    else {
      return sub_181289D04(a1, *(unsigned __int8 **)&v13[6 * v8 + 2], a3, a4, a5, a6, a7, a8);
    }
  }

  return result;
}

uint64_t sub_1812B6430( uint64_t a1, int **a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v14 = *(void *)(a1 + 16);
  char v15 = *((_BYTE *)a2 + 36);
  __n128 v16 = *a2;
  if ((v15 & 1) != 0) {
    int v17 = a6;
  }
  else {
    int v17 = a6 + 1;
  }
  int v128 = *v16;
  int v18 = v17 + *v16;
  int v130 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 12) = *(_DWORD *)(v14 + 144);
  if ((_DWORD)a7)
  {
    uint64_t v19 = (a4 - a7);
  }

  else
  {
    int v20 = *(_DWORD *)(a1 + 56);
    uint64_t v19 = (v20 + 1);
    *(_DWORD *)(a1 + 56) = v20 + v18;
  }

  int v21 = *(_DWORD *)(a3 + 12);
  if (v21) {
    unsigned int v22 = v21 + 1;
  }
  else {
    unsigned int v22 = *(_DWORD *)(a3 + 8);
  }
  unsigned int v127 = v22;
  int v23 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v23;
  *((_DWORD *)a2 + 7) = v23;
  if (a5) {
    char v24 = 5;
  }
  else {
    char v24 = 1;
  }
  uint64_t result = sub_18131B090(a1, v16, v19, a5, v24, a6, a7, a8);
  if ((v15 & 1) == 0)
  {
    uint64_t v29 = *((unsigned int *)a2 + 3);
    uint64_t v30 = (v19 + v128);
    int v31 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v31)
    {
      uint64_t result = sub_18131044C(v14, 126LL, v29, v30, 0LL, v26, v27, v28);
      goto LABEL_17;
    }

    *(_DWORD *)(v14 + 144) = v31 + 1;
    uint64_t v32 = *(void *)(v14 + 136) + 40LL * v31;
    *(_DWORD *)uint64_t v32 = 126;
    *(_DWORD *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 8) = v30;
    *(void *)(v32 + 12) = 0LL;
    *(void *)(v32 + 28) = 0LL;
    *(void *)(v32 + 20) = 0LL;
    *(_DWORD *)(v32 + 36) = 0;
  }

uint64_t sub_1812B6E2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned int *)(a3 + 28);
  int v14 = *(_DWORD *)(a1 + 68);
  unsigned int v191 = v14 - 1;
  *(_DWORD *)(a1 + 68) = v14 - 1;
  char v15 = *(_DWORD **)a3;
  int v16 = *a5;
  unsigned int v179 = *((_DWORD *)a5 + 1);
  uint64_t v180 = *(void *)(a2 + 32);
  else {
    int v17 = "RIGHT PART OF ";
  }
  int v18 = sub_18131CCF8((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %sORDER BY", a4, (uint64_t)a5, a6, a7, a8, (char)v17);
  int v22 = v18;
  if ((*(_BYTE *)(*(void *)v12 + 49LL) & 4) != 0)
  {
    int v23 = *(_DWORD *)(a3 + 48);
    int v24 = *(_DWORD *)(a3 + 52);
    uint64_t v25 = *(unsigned int *)(v12 + 392);
    uint64_t v26 = 56LL * v25 + 20;
    int v27 = v25 + 1;
    while (--v27 >= 1)
    {
      uint64_t v28 = v26 - 56;
      uint64_t v29 = *(void *)(v12 + 400);
      int v30 = *(_DWORD *)(v29 + v26 - 76);
      v26 -= 56LL;
      if (v30 == v18)
      {
        if (v24 < 0) {
          int v24 = *(_DWORD *)(v12 + 144) - 1;
        }
        uint64_t v31 = v29 + v28;
        uint64_t v32 = (int *)(v29 + v28 - 16);
        if (*v32)
        {
          int v34 = *(_DWORD *)(v31 - 8);
          uint64_t v33 = (int *)(v31 - 8);
          if (v34)
          {
            uint64_t v32 = (int *)(v29 + v28);
            if (*(_DWORD *)(v29 + v28)) {
              break;
            }
            uint64_t v35 = 5LL;
          }

          else
          {
            uint64_t v35 = 3LL;
            uint64_t v32 = v33;
          }
        }

        else
        {
          uint64_t v35 = 1LL;
        }

        *uint64_t v32 = v23;
        *(_DWORD *)(v29 + 4 * v35 + v28 - 16) = v24;
        int v23 = *(_DWORD *)(a3 + 48);
        uint64_t v25 = *(unsigned int *)(v12 + 392);
        break;
      }
    }

    uint64_t v36 = 56 * v25;
    int v37 = v25 + 1;
    while (--v37 >= 1)
    {
      uint64_t v38 = v36 - 56;
      uint64_t v39 = *(void *)(v12 + 400);
      int v40 = *(_DWORD *)(v39 + v36 - 56);
      v36 -= 56LL;
      if (v40 == v18)
      {
        if (v18 >= 1) {
          *(_DWORD *)(v39 + v38 + 28) = v18;
        }
        if (v23 >= 1) {
          *(_DWORD *)(v39 + v38 + 32) = v23;
        }
        break;
      }
    }
  }

  uint64_t v41 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v41)
  {
    uint64_t v42 = *(unsigned int *)(a3 + 16);
    int v43 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v43)
    {
      sub_18131044C(v12, 10LL, v42, v41, 0LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v43 + 1;
      uint64_t v44 = *(void *)(v12 + 136) + 40LL * v43;
      *(_DWORD *)uint64_t v44 = 10;
      *(_DWORD *)(v44 + 4) = v42;
      *(_DWORD *)(v44 + 8) = v41;
      *(void *)(v44 + 12) = 0LL;
      *(void *)(v44 + 28) = 0LL;
      *(void *)(v44 + 20) = 0LL;
      *(_DWORD *)(v44 + 36) = 0;
    }

    int v45 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v45)
    {
      sub_18131044C(v12, 9LL, 0LL, v13, 0LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v45 + 1;
      uint64_t v46 = *(void *)(v12 + 136) + 40LL * v45;
      *(void *)uint64_t v46 = 9LL;
      *(_DWORD *)(v46 + 8) = v13;
      *(void *)(v46 + 12) = 0LL;
      *(void *)(v46 + 28) = 0LL;
      *(void *)(v46 + 20) = 0LL;
      *(_DWORD *)(v46 + 36) = 0;
    }

    uint64_t v47 = *(void *)(v12 + 24);
    int v48 = ~*(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(v47 + 68) + *(_DWORD *)(v47 + 72) < 0) {
      sub_18131E420(v47, v12, v48);
    }
    else {
      *(_DWORD *)(*(void *)(v47 + 80) + 4LL * v48) = *(_DWORD *)(v12 + 144);
    }
  }

  unsigned int v194 = *(_DWORD *)(a3 + 12);
  int v184 = v16 - 9;
  int v187 = v14;
  int v188 = v22;
  if (v16 == 9 || v16 == 13) {
    goto LABEL_47;
  }
  if (v16 == 10)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      uint64_t v49 = *((unsigned int *)a5 + 3);
      int v50 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v50)
      {
        sub_18131044C(v12, 75LL, 0LL, v49, 0LL, v19, v20, v21);
      }

      else
      {
        *(_DWORD *)(v12 + 144) = v50 + 1;
        uint64_t v51 = *(void *)(v12 + 136) + 40LL * v50;
        *(void *)uint64_t v51 = 75LL;
        *(_DWORD *)(v51 + 8) = v49;
        *(void *)(v51 + 12) = 0LL;
        *(void *)(v51 + 28) = 0LL;
        *(void *)(v51 + 20) = 0LL;
        *(_DWORD *)(v51 + 36) = 0;
      }
    }

LABEL_161:
  uint64_t v150 = (v182 + 1);
  uint64_t v151 = *(void *)(v12 + 24);
  int v152 = -v187;
  if (*(_DWORD *)(v151 + 68) + *(_DWORD *)(v151 + 72) < 0) {
    sub_18131E420(v151, v12, v152);
  }
  else {
    *(_DWORD *)(*(void *)(v151 + 80) + 4LL * v152) = *(_DWORD *)(v12 + 144);
  }
  int v153 = *(_DWORD *)(v12 + 148);
  int v154 = *(_DWORD *)(v12 + 144);
  if ((*(_BYTE *)(v189 + 36) & 1) != 0)
  {
    if (v153 > v154)
    {
      *(_DWORD *)(v12 + 144) = v154 + 1;
      uint64_t v155 = *(void *)(v12 + 136) + 40LL * v154;
      int v156 = 37;
      goto LABEL_169;
    }

    uint64_t v157 = v12;
    uint64_t v158 = 37LL;
  }

  else
  {
    if (v153 > v154)
    {
      *(_DWORD *)(v12 + 144) = v154 + 1;
      uint64_t v155 = *(void *)(v12 + 136) + 40LL * v154;
      int v156 = 39;
LABEL_169:
      *(_DWORD *)uint64_t v155 = v156;
      *(_DWORD *)(v155 + 4) = v194;
      *(_DWORD *)(v155 + 8) = v150;
      *(void *)(v155 + 12) = 0LL;
      *(void *)(v155 + 28) = 0LL;
      *(void *)(v155 + 20) = 0LL;
      *(_DWORD *)(v155 + 36) = 0;
      goto LABEL_173;
    }

    uint64_t v157 = v12;
    uint64_t v158 = 39LL;
  }

  sub_18131044C(v157, v158, v194, v150, 0LL, v19, v20, v21);
LABEL_173:
  if ((*(_BYTE *)(*(void *)v12 + 49LL) & 4) != 0)
  {
    int v159 = *(_DWORD *)(v12 + 144) - 1;
    unsigned int v160 = *(_DWORD *)(v12 + 392);
    uint64_t v161 = 56LL * v160 + 20;
    unsigned int v162 = v160 + 1;
    while ((int)--v162 >= 1)
    {
      uint64_t v163 = v161 - 56;
      uint64_t v164 = *(void *)(v12 + 400);
      int v165 = *(_DWORD *)(v164 + v161 - 76);
      v161 -= 56LL;
      if (v165 == v188)
      {
        uint64_t v166 = v164 + v163;
        unsigned int v167 = (int *)(v164 + v163 - 16);
        if (*v167)
        {
          int v169 = *(_DWORD *)(v166 - 8);
          unsigned int v168 = (int *)(v166 - 8);
          if (v169)
          {
            unsigned int v167 = (int *)(v164 + v163);
            if (*(_DWORD *)(v164 + v163)) {
              break;
            }
            uint64_t v170 = 5LL;
          }

          else
          {
            uint64_t v170 = 3LL;
            unsigned int v167 = v168;
          }
        }

        else
        {
          uint64_t v170 = 1LL;
        }

        *unsigned int v167 = v159;
        *(_DWORD *)(v164 + 4 * v170 + v163 - 16) = v159;
        break;
      }
    }
  }

  uint64_t v171 = *(unsigned int *)(v189 + 16);
  if ((_DWORD)v171)
  {
    int v172 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v172)
    {
      sub_18131044C(v12, 67LL, v171, 0LL, 0LL, v19, v20, v21);
    }

    else
    {
      *(_DWORD *)(v12 + 144) = v172 + 1;
      uint64_t v173 = *(void *)(v12 + 136) + 40LL * v172;
      *(_DWORD *)uint64_t v173 = 67;
      *(_DWORD *)(v173 + 4) = v171;
      *(_OWORD *)(v173 + 8) = 0u;
      *(_OWORD *)(v173 + 24) = 0u;
    }
  }

  uint64_t result = *(void *)(v12 + 24);
  int v175 = ~v190;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
    return sub_18131E420(result, v12, v175);
  }
  *(_DWORD *)(*(void *)(result + 80) + 4LL * v175) = *(_DWORD *)(v12 + 144);
  return result;
}

      ++v107;
    }

    if (*m) {
      goto LABEL_161;
    }
LABEL_174:
    int v363 = (unsigned __int8 *)*v98;
    uint64_t v58 = 1LL;
    LODWORD(v102) = -1;
    uint64_t v362 = v57;
    char v52 = "ROWID";
LABEL_180:
    uint64_t v120 = *v17;
    int v121 = *(uint64_t (**)(void, uint64_t, void, const char *, void, uint64_t))(*v17 + 528);
    if (!v121 || *(_BYTE *)(v120 + 197) || *((_BYTE *)v17 + 302))
    {
LABEL_136:
      continue;
    }

    break;
  }

  uint64_t v122 = v58;
  int v123 = v121(*(void *)(v120 + 536), 23LL, *v24, v52, *(void *)(*(void *)(v352 + 32) + 32LL * v36), v17[46]);
  if (v123 == 1)
  {
    int v204 = "not authorized";
    int v205 = 23;
  }

  else
  {
    if ((v123 & 0xFFFFFFFD) == 0)
    {
      if (v123 == 2) {
        *((_DWORD *)v49 + (int)v102) = -1;
      }
      int v59 = v375;
      uint64_t v60 = v371;
      uint64_t v58 = v122;
      goto LABEL_136;
    }

    int v205 = 1;
    int v204 = "authorizer malfunction";
  }

  sub_1812DC47C((uint64_t)v17, v204, v124, (uint64_t)v52, v53, v54, v55, v56, v318);
  *((_DWORD *)v17 + 6) = v205;
LABEL_189:
  uint64_t v13 = (void *)v352;
  unsigned int v10 = v359;
LABEL_475:
  sub_1812F20DC(v13, v49);
  uint64_t v9 = v358;
LABEL_476:
  uint64_t v12 = v364;
LABEL_2:
  uint64_t result = sub_18128FF4C(v13, (void *)v12);
  if (a3) {
    uint64_t result = sub_181311F48(v13, a3);
  }
  if (v10) {
    uint64_t result = sub_181309110(v13, v10);
  }
  if (v9) {
    uint64_t result = sub_181311F48(v13, v9);
  }
  if (v8) {
    return sub_181309110(v13, v8);
  }
  return result;
}

uint64_t sub_1812B7E58(int *a1)
{
  int v2 = a1[4];
  signed int v3 = *a1 + v2;
  if ((v3 < 0) ^ __OFADD__(*a1, v2) | (v3 == 0))
  {
    if ((a1[5] & 0x10) == 0) {
      return 0LL;
    }
    signed int v3 = 1;
  }

  bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
  uint64_t result = 0LL;
  a1[4] += *a1;
  *((_WORD *)a1 + 10) &= 0xF9FFu;
  return result;
}

uint64_t sub_1812B7EE4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (!*a3)
  {
    uint64_t v5 = result;
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v6 = *(void *)(result + 80);
    uint64_t v8 = *(void *)(a2 + 80);
    uint64_t v9 = *(unsigned __int8 *)(result + 9);
    if (*(_DWORD *)(a2 + 4) == 1) {
      uint64_t v10 = 100LL;
    }
    else {
      uint64_t v10 = 0LL;
    }
    uint64_t v11 = (const void *)(v6 + v9);
    uint64_t v12 = __rev16(*(unsigned __int16 *)(v6 + v9 + 5));
    memcpy((void *)(v8 + v12), (const void *)(v6 + v12), (*(_DWORD *)(v7 + 56) - v12));
    memcpy((void *)(v8 + v10), v11, *(unsigned __int16 *)(v5 + 18) + 2LL * *(unsigned __int16 *)(v5 + 24));
    *(_BYTE *)a2 = 0;
    uint64_t result = sub_18129B974(a2);
    if (!(_DWORD)result)
    {
      uint64_t result = sub_18130A254(a2);
      if (!(_DWORD)result)
      {
        if (!*(_BYTE *)(v7 + 33)) {
          return result;
        }
        uint64_t result = sub_1813009A8(a2);
      }
    }

    *a3 = result;
  }

  return result;
}

uint64_t sub_1812B7FAC(uint64_t a1, int a2, _BYTE *a3, int a4, unsigned __int8 *a5)
{
  uint64_t v5 = (a2 - a4);
  if (a2 >= a4) {
    int v6 = a4;
  }
  else {
    int v6 = a2;
  }
  if (v6 < 0)
  {
    sub_1812CF36C(35844);
    return v5;
  }

  if (!a3)
  {
    if (a5) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = 0LL;
    }
    if ((_DWORD)result) {
      return result;
    }
    return v5;
  }

  if (!a5) {
    return 1LL;
  }
  if (!v6) {
    return v5;
  }
  int v7 = v6 + 1;
  while (1)
  {
    uint64_t v8 = *a3;
    if (!*a3) {
      break;
    }
    LODWORD(v8) = byte_1813C6343[v8];
    int v9 = byte_1813C6343[*a5];
    if ((_DWORD)v8 != v9) {
      goto LABEL_21;
    }
    ++a3;
    ++a5;
  }

  int v9 = byte_1813C6343[*a5];
LABEL_21:
  uint64_t result = (v8 - v9);
  if (!(_DWORD)result) {
    return v5;
  }
  return result;
}

uint64_t sub_1812B8054(unsigned __int8 *a1, double *a2, int a3, int a4)
{
  *a2 = 0.0;
  if (!a3) {
    return 0LL;
  }
  if (a4 == 1)
  {
    uint64_t v5 = 1LL;
    int v6 = a1;
    uint64_t result = 1LL;
  }

  else
  {
    LODWORD(v8) = 3 - a4;
    if (3 - a4 >= (int)(a3 & 0xFFFFFFFE))
    {
      uint64_t result = 1LL;
    }

    else
    {
      uint64_t v8 = (int)v8;
      while (!a1[v8])
      {
        v8 += 2LL;
        if (v8 >= (int)(a3 & 0xFFFFFFFE))
        {
          uint64_t result = 1LL;
          goto LABEL_11;
        }
      }

      uint64_t result = 4294967196LL;
    }

int sqlite3_create_collation( sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  return sqlite3_create_collation_v2(a1, zName, eTextRep, pArg, xCompare, 0LL);
}

uint64_t sub_1812B8B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 328);
  unsigned int v3 = *(_DWORD *)(a1 + 200);
  uint64_t v4 = *(unsigned int *)(a1 + 184);
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 128);
  if ((int)v6 >= 1)
  {
    int v7 = (void *)(*(void *)(a1 + 120) + 8LL);
    do
    {
      if (!*v7) {
        *int v7 = *(void *)(a1 + 96);
      }
      v7 += 7;
      --v6;
    }

    while (v6);
  }

  uint64_t v8 = *(void *)(a1 + 96);
  if (v8) {
    uint64_t v9 = v4 + v4 * ((v8 - 1) / v4);
  }
  else {
    uint64_t v9 = 0LL;
  }
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v9;
  if (*(_BYTE *)(a1 + 11)
    || *(_BYTE *)(a1 + 9) == 4
    || (uint64_t v10 = **(void **)(a1 + 72)) != 0 && ((*(uint64_t (**)(void))(v10 + 96))() & 0x200) != 0)
  {
    *(void *)uint64_t v2 = 0xD763A120F905D5D9LL;
    *(_DWORD *)(v2 + 8) = -1;
  }

  else
  {
    *(_DWORD *)(v2 + 8) = 0;
    *(void *)uint64_t v2 = 0LL;
  }

  sqlite3_initialize();
  arc4random_buf((void *)(a1 + 56), 4uLL);
  *(_DWORD *)(v2 + 12) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(v2 + 16) = bswap32(*(_DWORD *)(a1 + 36));
  *(_DWORD *)(v2 + 20) = bswap32(*(_DWORD *)(a1 + 184));
  *(_DWORD *)(v2 + 24) = bswap32(*(_DWORD *)(a1 + 200));
  bzero((void *)(v2 + 28), v5 - 28);
  unsigned int v11 = -(int)v5;
  while (1)
  {
    v11 += v5;
    if (v11 >= *(_DWORD *)(a1 + 184)) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  v2,  v5,  *(void *)(a1 + 96));
    *(void *)(a1 + 96) += v5;
    if ((_DWORD)result) {
      return result;
    }
  }

  return 0LL;
}

void sqlite3_randomness(int N, void *P)
{
  if (N >= 1)
  {
    if (P) {
      arc4random_buf(P, N);
    }
  }

uint64_t sub_1812B8CE4(int a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v5 = (int)a2;
  bzero(a3, (int)a2);
  dword_18C468CD0 = getpid();
  uint64_t v6 = sub_1812F2E3C("/dev/urandom", 0, 0LL, 0);
  if ((v6 & 0x80000000) != 0)
  {
    time((time_t *)__strerrbuf);
    *a3 = *(void *)__strerrbuf;
    *((_DWORD *)a3 + 2) = dword_18C468CD0;
    return 12LL;
  }

  else
  {
    uint64_t v7 = v6;
    while ((off_18C54FD88(v7, a3, v5) & 0x80000000) != 0 && *__error() == 4)
      ;
    if (off_18C54FCE0(v7))
    {
      int v8 = *__error();
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v8, __strerrbuf, 0x4FuLL);
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50043, v8, "close", &byte_1813CEAEE, __strerrbuf);
    }
  }

  return v4;
}

uint64_t sub_1812B8E48(unsigned int *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = a1;
  unsigned int v3 = a2 - 1;
  if (*a1 < 0xF81)
  {
LABEL_3:
    uint64_t v4 = 0LL;
    *((_BYTE *)v2 + ((unint64_t)v3 >> 3) + 16) |= 1 << (v3 & 7);
    return v4;
  }

  while (1)
  {
    unsigned int v5 = v2[2];
    uint64_t v6 = v2 + 4;
    if (!v5) {
      break;
    }
    uint64_t v7 = v3 / v5;
    uint64_t v2 = (unsigned int *)*((void *)v6 + v7);
    if (!v2)
    {
      int v8 = (unsigned int *)sub_18126F0AC(512LL);
      if (!v8)
      {
        *((void *)v6 + v7) = 0LL;
        return 7LL;
      }

      uint64_t v2 = v8;
      *((_OWORD *)v8 + 30) = 0u;
      *((_OWORD *)v8 + 31) = 0u;
      *((_OWORD *)v8 + 28) = 0u;
      *((_OWORD *)v8 + 29) = 0u;
      *((_OWORD *)v8 + 26) = 0u;
      *((_OWORD *)v8 + 27) = 0u;
      *((_OWORD *)v8 + 24) = 0u;
      *((_OWORD *)v8 + 25) = 0u;
      *((_OWORD *)v8 + 22) = 0u;
      *((_OWORD *)v8 + 23) = 0u;
      *((_OWORD *)v8 + 20) = 0u;
      *((_OWORD *)v8 + 21) = 0u;
      *((_OWORD *)v8 + 18) = 0u;
      *((_OWORD *)v8 + 19) = 0u;
      *((_OWORD *)v8 + 16) = 0u;
      *((_OWORD *)v8 + 17) = 0u;
      *((_OWORD *)v8 + 14) = 0u;
      *((_OWORD *)v8 + 15) = 0u;
      *((_OWORD *)v8 + 12) = 0u;
      *((_OWORD *)v8 + 13) = 0u;
      *((_OWORD *)v8 + 10) = 0u;
      *((_OWORD *)v8 + 11) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)int v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *int v8 = v5;
      *((void *)v6 + v7) = v8;
    }

    v3 %= v5;
    if (*v2 <= 0xF80) {
      goto LABEL_3;
    }
  }

  uint64_t v9 = v3 + 1;
  uint64_t v10 = v3 % 0x7C;
  int v11 = *((_DWORD *)v6 + v10);
  if (v11)
  {
    while (v11 != (_DWORD)v9)
    {
      else {
        uint64_t v10 = 0LL;
      }
      int v11 = *((_DWORD *)v6 + v10);
      if (!v11)
      {
        unsigned int v12 = v2[1];
        if (v12 >= 0x3E) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
    }

    return 0LL;
  }

  unsigned int v12 = v2[1];
  if (v12 < 0x7B)
  {
LABEL_16:
    uint64_t v4 = 0LL;
    v2[1] = v12 + 1;
    *((_DWORD *)v6 + v10) = v9;
    return v4;
  }

uint64_t sub_1812B9104(uint64_t a1, int a2)
{
  v18[1] = *MEMORY[0x1895F89C0];
  uint64_t result = *(unsigned int *)(a1 + 48);
  if ((_DWORD)result) {
    return result;
  }
  if (!*(void *)(a1 + 344))
  {
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 22);
      if (v5 >= 4 && v5 != 5) {
        break;
      }
      if (*(_BYTE *)(a1 + 17)) {
        goto LABEL_13;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56LL))(*(void *)(a1 + 72), 4LL);
      if ((_DWORD)result != 5)
      {
        if ((_DWORD)result) {
          return result;
        }
LABEL_13:
        *(_BYTE *)(a1 + 22) = 4;
        break;
      }
    }
  }

  if (*(_BYTE *)(a1 + 11)) {
    goto LABEL_18;
  }
  if (**(void **)(a1 + 80) && *(_BYTE *)(a1 + 9) != 4)
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(void *)v9)
    {
      __int16 v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96LL))(v9);
      if ((v10 & 0x200) != 0)
      {
        char v11 = 1;
LABEL_43:
        if ((v10 & 0x400) == 0)
        {
          if (*(unsigned __int8 *)(a1 + 14) | (16 * (*(_BYTE *)(a1 + 14) == 3)))
          {
            uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80));
            if ((_DWORD)result) {
              return result;
            }
          }
        }

        *(void *)(a1 + 104) = *(void *)(a1 + 96);
        char v15 = a2 ? v11 : 1;
        if ((v15 & 1) == 0)
        {
          *(_DWORD *)(a1 + 52) = 0;
          uint64_t result = sub_1812B8B24(a1);
          if ((_DWORD)result) {
            return result;
          }
        }

        goto LABEL_18;
      }
    }

    else
    {
      __int16 v10 = 0;
    }

    unint64_t v16 = 0xD763A120F905D5D9LL;
    unsigned int v17 = bswap32(*(_DWORD *)(a1 + 52));
    uint64_t v12 = *(void *)(a1 + 96);
    if (v12) {
      uint64_t v13 = *(unsigned int *)(a1 + 184) + *(unsigned int *)(a1 + 184) * ((v12 - 1) / *(unsigned int *)(a1 + 184));
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t result = (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v18,  8LL,  v13);
    if (!(_DWORD)result)
    {
      if (v18[0] != 0xD763A120F905D5D9LL)
      {
LABEL_37:
        if ((v10 & 0x400) == 0)
        {
          if (*(_BYTE *)(a1 + 12))
          {
            if (*(_BYTE *)(a1 + 14))
            {
              uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80));
              if ((_DWORD)result) {
                return result;
              }
            }
          }
        }

        uint64_t result = (*(uint64_t (**)(void, unint64_t *, uint64_t, void))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  &v16,  12LL,  *(void *)(a1 + 104));
        if ((_DWORD)result) {
          return result;
        }
        char v11 = 0;
        goto LABEL_43;
      }

      uint64_t result = (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24LL))( *(void *)(a1 + 80),  &unk_1813C6CE9,  1LL,  v13);
    }

    if ((_DWORD)result != 522 && (_DWORD)result != 0) {
      return result;
    }
    goto LABEL_37;
  }

  *(void *)(a1 + 104) = *(void *)(a1 + 96);
LABEL_18:
  uint64_t v7 = *(uint64_t **)(a1 + 336);
  for (uint64_t i = *v7; i; uint64_t i = *(void *)(i + 64))
    *(_WORD *)(i + 52) &= ~8u;
  uint64_t result = 0LL;
  v7[2] = v7[1];
  *(_BYTE *)(a1 + 21) = 4;
  return result;
}

uint64_t sub_1812B9394(void *a1, uint64_t a2)
{
  if (*(void *)a1[9] || (uint64_t v14 = (*(uint64_t (**)(void, void))(*a1 + 40LL))(*a1, 0LL), !(_DWORD)v14))
  {
    unsigned int v4 = *((_DWORD *)a1 + 11);
    uint64_t v5 = *((unsigned int *)a1 + 8);
    if (v4 < v5 && (*(void *)(a2 + 32) || *(_DWORD *)(a2 + 48) > v4))
    {
      uint64_t v15 = a1[25] * v5;
      uint64_t v6 = a1[9];
      if (*(void *)v6)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 80LL))(v6, 5LL, &v15);
        LODWORD(v5) = *((_DWORD *)a1 + 8);
      }

      *((_DWORD *)a1 + 11) = v5;
    }

    if (!a2) {
      return 0LL;
    }
    while (1)
    {
      uint64_t v7 = *(unsigned int *)(a2 + 48);
      if (v7 > *((_DWORD *)a1 + 8) || (*(_WORD *)(a2 + 52) & 0x10) != 0)
      {
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v8 = a1[25];
        if ((_DWORD)v7 == 1)
        {
          unsigned int v9 = bswap32(bswap32(*(_DWORD *)(*(void *)(a2 + 40) + 136LL)) + 1);
          *(_DWORD *)(*(void *)(a2 + 8) + 24LL) = v9;
          *(_DWORD *)(*(void *)(a2 + 8) + 92LL) = v9;
          *(_DWORD *)(*(void *)(a2 + 8) + 96LL) = -1167184384;
        }

        __int16 v10 = (uint64_t (*)(void, void, uint64_t, uint64_t))a1[37];
        if (v10)
        {
          uint64_t v11 = v10(a1[40], *(void *)(a2 + 8), v7, 6LL);
          if (!v11) {
            return 7LL;
          }
        }

        else
        {
          uint64_t v11 = *(void *)(a2 + 8);
        }

        uint64_t v14 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)a1[9] + 24LL))( a1[9],  v11,  *((unsigned int *)a1 + 50),  v8 * (v7 - 1));
        if ((_DWORD)v7 == 1) {
          *(_OWORD *)(a1 + 17) = *(_OWORD *)(v11 + 24);
        }
        ++*((_DWORD *)a1 + 64);
        ++*((_DWORD *)a1 + 68);
        uint64_t v12 = a1[14];
        if (v12) {
          sub_1812FC81C(v12, v7, *(void *)(a2 + 8));
        }
      }

      if (!(_DWORD)v14)
      {
        a2 = *(void *)(a2 + 32);
        if (a2) {
          continue;
        }
      }

      return v14;
    }
  }

  return v14;
}

uint64_t sub_1812B9590(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 152) = 0LL;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }

  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      *(void *)(v4 + 8) = *(void *)(v3 + 40);
      *(void *)(v3 + 40) = v4;
      *(_DWORD *)(a1 + 24) = -1;
      *(void *)(a1 + 48) = 0LL;
    }

    sub_1812F2B48(a1);
  }

  sub_1812B963C(a1);
  if (qword_18C468B90) {
    xmmword_18C465410(qword_18C468B90);
  }
  return 0LL;
}

double sub_1812B963C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(dispatch_object_s **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 152) = 0LL;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }

  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    off_18C54FEF0(v3, *(void *)(a1 + 88));
    *(void *)(a1 + 104) = 0LL;
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 88) = 0LL;
  }

  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 0x80000000) == 0)
  {
    if (off_18C54FCE0(v4))
    {
      uint64_t v5 = *(const char **)(a1 + 56);
      int v6 = *__error();
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v6, __strerrbuf, 0x4FuLL);
      uint64_t v7 = &byte_1813CEAEE;
      if (v5) {
        uint64_t v7 = v5;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 42798, v6, "close", v7, __strerrbuf);
    }

    *(_DWORD *)(a1 + 24) = -1;
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    unsigned int v9 = &off_18C4653A8;
    if (!dword_18C465380)
    {
LABEL_18:
      (*v9)(v8);
      goto LABEL_19;
    }

    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v8);
    --qword_18C468B10;
    off_18C4653A8(v8);
    uint64_t v8 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      unsigned int v9 = &xmmword_18C465410;
      goto LABEL_18;
    }
  }

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v8 = *(void *)a1;
    *(_DWORD *)(v8 + 80) = 25;
    sub_1812FA264(v8, 25);
LABEL_9:
    int v6 = &qword_1813C6E90;
    __int16 v7 = 1;
    goto LABEL_13;
  }

  int v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) == 1)
  {
    int v9 = *((_DWORD *)v6 + 4);
    if (!a1) {
      return v9;
    }
    goto LABEL_20;
  }

uint64_t sub_1812B9920(uint64_t a1, const char *a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (off_18C54FE48(a2) == -1)
  {
    if (*__error() == 2) {
      return 5898LL;
    }
    int v6 = *__error();
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v6, __strerrbuf, 0x4FuLL);
    uint64_t v5 = 2570LL;
    sqlite3_log(2570, "os_unix.c:%d: (%d) %s(%s) - %s");
    return v5;
  }

  if (!fsync(v12))
  {
    uint64_t v5 = 0LL;
    int v10 = v12;
    if (v12 < 0) {
      return v5;
    }
    goto LABEL_16;
  }

  int v8 = *__error();
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v8, __strerrbuf, 0x4FuLL);
  if (a2) {
    int v9 = a2;
  }
  else {
    int v9 = &byte_1813CEAEE;
  }
  uint64_t v5 = 1290LL;
  sqlite3_log(1290, "os_unix.c:%d: (%d) %s(%s) - %s", 49766, v8, "fsync", v9, __strerrbuf);
  int v10 = v12;
  if ((v12 & 0x80000000) == 0)
  {
LABEL_16:
    if (off_18C54FCE0(v10))
    {
      int v11 = *__error();
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v11, __strerrbuf, 0x4FuLL);
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
  }

  return v5;
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return sqlite3_bind_int64(a1, a2, a3);
}

uint64_t sub_1812B9B34( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[2]) {
    return a1[2];
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0) {
    *((_BYTE *)a1 + 35) = 1;
  }
  return sub_1812DC63C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1812B9B68( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a7;
  uint64_t v11 = *((unsigned int *)a1 + 36);
  if (*((_DWORD *)a1 + 37) <= (int)v11)
  {
    uint64_t v11 = sub_18131044C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }

  else
  {
    *((_DWORD *)a1 + 36) = v11 + 1;
    uint64_t v12 = a1[17] + 40LL * (int)v11;
    *(_BYTE *)uint64_t v12 = a2;
    *(_WORD *)(v12 + 2) = 0;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = a4;
    *(_DWORD *)(v12 + 12) = a5;
    *(_BYTE *)(v12 + 1) = 0;
    *(void *)(v12 + 24) = 0LL;
    *(void *)(v12 + 32) = 0LL;
    *(void *)(v12 + 16) = 0LL;
  }

  if (*(_BYTE *)(*a1 + 103))
  {
    if (v8 != -11) {
      sub_18127ABFC((void *)*a1, v8, a6);
    }
    return v11;
  }

  int v13 = v11;
  if ((v11 & 0x80000000) != 0)
  {
    int v13 = *((_DWORD *)a1 + 36) - 1;
    uint64_t v14 = a1[17];
    if ((v8 & 0x80000000) != 0) {
      goto LABEL_11;
    }
LABEL_12:
    sub_181310724(a1, v14 + 40LL * v13, (char *)a6, v8);
    return v11;
  }

  uint64_t v14 = a1[17];
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v15 = v14 + 40LL * v13;
  int v17 = *(unsigned __int8 *)(v15 + 1);
  __int128 v16 = (_BYTE *)(v15 + 1);
  if (v17) {
    goto LABEL_12;
  }
  if (v8 == -3)
  {
    *(_DWORD *)(v14 + 40LL * v13 + 16) = a6;
    *__int128 v16 = -3;
  }

  else if (a6)
  {
    *(void *)(v14 + 40LL * v13 + 16) = a6;
    *__int128 v16 = v8;
    if (v8 == -11) {
      ++*(_DWORD *)(a6 + 24);
    }
  }

  return v11;
}

void *sub_1812B9CA8( uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = (unsigned __int8 *)a7;
  int v9 = (void *)a6;
  int v10 = (unsigned __int8 *)a4;
  uint64_t v12 = a2;
  BOOL v377 = 0;
  int v13 = *(void **)a1;
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_2;
  }
  unsigned int v16 = a5;
  int v17 = (uint64_t *)a1;
  uint64_t v24 = (void *)sub_181321CB0(a1, 0, a2 + 8, a4, a5, a6, a7, a8);
  uint64_t v25 = *(void *)(v12 + 40);
  if (v25)
  {
    unsigned int v26 = (void *)*v17;
    if (*(void *)(*v17 + 816) || (int v27 = *(_DWORD *)(v25 + 44) - 1, (*(_DWORD *)(v25 + 44) = v27) == 0)) {
      sub_181311A80(v26, (void *)v25);
    }
  }

  *(void *)(v12 + 40) = v24;
  *(_WORD *)(v12 + 69) |= 0x200u;
  if (!v24) {
    goto LABEL_2;
  }
  ++*((_DWORD *)v24 + 11);
  if ((*(_WORD *)(v12 + 69) & 2) != 0)
  {
    uint64_t v28 = v24[2];
    if (!v28)
    {
LABEL_25:
      sub_1812DC47C((uint64_t)v17, "no such index: %s", v18, v19, v20, v21, v22, v23, *(void *)(v12 + 96));
      *((_BYTE *)v17 + 29) = 1;
      goto LABEL_2;
    }

void *sub_1812BBC2C( _BYTE *a1, uint64_t a2, unsigned __int8 *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = (unsigned __int8 *)a5;
  *(void *)char v231 = 0LL;
  uint64_t v12 = *(void *)a1;
  if (*((_DWORD *)a1 + 12)) {
    goto LABEL_2;
  }
  uint64_t v16 = *(void *)(a2 + 8);
  if (v16)
  {
    uint64_t v17 = *(void *)(v12 + 32);
    uint64_t v18 = (uint64_t *)(v17 + 24);
    uint64_t v19 = 0xFFFFFFFF00000000LL;
    do
    {
      uint64_t v20 = *v18;
      v18 += 4;
      v19 += 0x100000000LL;
    }

    while (v20 != v16);
    uint64_t v21 = (_BYTE **)(v17 + (v19 >> 27));
  }

  else
  {
    uint64_t v21 = (_BYTE **)(a2 + 16);
  }

  uint64_t v28 = (void *)sub_18129EAF4((uint64_t)a1, 0, *(char **)(a2 + 24), *v21, a5, a6, a7, a8);
  uint64_t v29 = *(void *)(a2 + 40);
  if (v29)
  {
    double v30 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 816LL) || (int v31 = *(_DWORD *)(v29 + 44) - 1, (*(_DWORD *)(v29 + 44) = v31) == 0)) {
      sub_181311A80(v30, (void *)v29);
    }
  }

  *(void *)(a2 + 40) = v28;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (!v28) {
    goto LABEL_2;
  }
  ++*((_DWORD *)v28 + 11);
  if ((*(_WORD *)(a2 + 69) & 2) == 0) {
    goto LABEL_32;
  }
  uint64_t v32 = v28[2];
  if (!v32)
  {
LABEL_31:
    sub_1812DC47C((uint64_t)a1, "no such index: %s", v22, v23, v24, v25, v26, v27, *(void *)(a2 + 96));
    int v13 = 0LL;
    a1[29] = 1;
    goto LABEL_3;
  }

LABEL_177:
      int v13 = 0LL;
      int v84 = v219;
      a4 = (void *)v220;
      uint64_t v112 = v208;
      goto LABEL_221;
    }

    if (BYTE8(v229) & 0x40 | v225) {
      uint64_t v87 = 20LL;
    }
    else {
      uint64_t v87 = 28LL;
    }
    if ((v28[6] & 0x80) != 0)
    {
      do
      {
        uint64_t v91 = *(void *)v75;
        int v92 = *(_WORD *)(*(void *)v75 + 99LL) & 3;
        uint64_t v75 = *(void *)v75 + 40LL;
      }

      while (v92 != 2);
      uint64_t v93 = *(__int16 *)(v91 + 94);
      __int16 v213 = *(_WORD *)(v91 + 94);
      uint64_t v94 = *((unsigned int *)a1 + 13);
      int v95 = *((_DWORD *)a1 + 14);
      LODWORD(v206) = v95 + 1;
      HIDWORD(v206) = v94;
      *((_DWORD *)a1 + 13) = v94 + 1;
      *((_DWORD *)a1 + 14) = v95 + v93;
      uint64_t v90 = v224;
      int v204 = sub_1813103F4(v224, 118LL, v94, v93, v80, v81, v82, v83);
      uint64_t v226 = v91;
      sub_181319D4C((uint64_t)a1, v91);
      unsigned int v203 = 0;
    }

    else
    {
      int v88 = *((_DWORD *)a1 + 14);
      uint64_t v89 = (v88 + 1);
      *((_DWORD *)a1 + 14) = v89;
      uint64_t v90 = v224;
      unsigned int v203 = v88 + 1;
      sub_1813103F4(v224, 75LL, 0LL, v89, v80, v81, v82, v83);
      uint64_t v226 = 0LL;
      uint64_t v206 = 0LL;
      int v204 = 0;
      __int16 v213 = 1;
    }

    uint64_t v96 = sub_18128A51C((uint64_t)a1, (int *)a2, (uint64_t)a3, 0LL, 0LL, 0LL, v87, v209);
    int v13 = (uint64_t **)v96;
    if (!v96) {
      goto LABEL_104;
    }
    unint64_t v103 = *(void *)(v96 + 40);
    int v210 = *(unsigned __int8 *)(v96 + 66);
    if (v210 != 1)
    {
      uint64_t v104 = (_BYTE *)*((void *)a1 + 21);
      if (!v104) {
        uint64_t v104 = a1;
      }
      v104[32] = 1;
    }

    if ((*(_BYTE *)(v96 + 68) & 1) != 0)
    {
      uint64_t v105 = v90;
      uint64_t v224 = v90;
      unint64_t v106 = v103;
      sub_181319BA8(v105, 143LL, v218, v97, v98, v99, v100, v101);
      unint64_t v103 = v106;
      uint64_t v90 = v224;
    }

    unint64_t v200 = v103;
    unint64_t v201 = HIDWORD(v103);
    if (v208) {
      sub_1813103F4(v90, 86LL, v208, 1LL, v98, v99, v100, v101);
    }
    uint64_t v107 = v226;
    int v202 = v13;
    if (v226)
    {
      uint64_t v216 = v8;
      uint64_t v108 = v213;
      if ((int)v108 >= 1)
      {
        uint64_t v109 = v90;
        uint64_t v110 = 0LL;
        do
        {
          uint64_t v111 = v108;
          *(double *)v102.i64 = sub_18131C0EC( v109,  (uint64_t)v28,  v218,  *(__int16 *)(*(void *)(v107 + 8) + 2 * v110),  (v206 + v110),  v99,  v100,  v101,  v102);
          uint64_t v108 = v111;
          uint64_t v107 = v226;
          ++v110;
        }

        while (v111 != v110);
      }

      if (v210)
      {
        unsigned int v205 = v206;
        uint64_t v90 = v224;
        uint64_t v112 = v208;
        unsigned int v8 = v216;
LABEL_146:
        int v121 = (uint64_t **)sub_1812F2264(v12, v76 + 2);
        int v13 = v121;
        if (!v121)
        {
          sub_18128E90C(v202, v122, v123, v124, v125, v126, v127, v128);
          goto LABEL_104;
        }

        size_t v129 = v76 + 1LL;
        memset(v121, 1, v129);
        *((_BYTE *)v13 + v129) = 0;
        if ((v200 & 0x80000000) == 0) {
          *((_BYTE *)v13 + (int)(v200 - v218)) = 0;
        }
        uint64_t v136 = v211;
        if ((v200 & 0x8000000000000000LL) == 0) {
          *((_BYTE *)v13 + (int)(v201 - v218)) = 0;
        }
        if (v204) {
          sub_18128BDCC(v90, v204);
        }
        unsigned int v217 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v217;
        if ((v221 & 1) == 0)
        {
          if (v210 == 2)
          {
            int v222 = sub_181319B54(v90, 15LL, v130, v131, v132, v133, v134, v135);
            sub_1812A6CB0((uint64_t)a1, (uint64_t)v28, 113LL, 8, v218, v13, &v231[1], v231);
            int v137 = *(_DWORD *)(v90 + 144);
            if (v137 - 1 == v222)
            {
              *(_DWORD *)(v90 + 144) = v222;
            }

            else
            {
              if (*(_BYTE *)(*(void *)v90 + 103LL)) {
                uint64_t v172 = &byte_18C550680;
              }
              else {
                uint64_t v172 = (char *)(*(void *)(v90 + 136) + 40LL * v222);
              }
              *((_DWORD *)v172 + 2) = v137;
            }
          }

          else
          {
            sub_1812A6CB0((uint64_t)a1, (uint64_t)v28, 113LL, 8, v218, v13, &v231[1], v231);
          }
        }

        if (*v211 == 1)
        {
          unsigned int v223 = 0;
          char v171 = 0;
          goto LABEL_200;
        }

        char v171 = 0;
        unsigned int v223 = 0;
LABEL_199:
        if (*v136 != 1)
        {
          HIBYTE(v199) = v210;
          LOBYTE(v199) = 11;
          sub_1812A9848(a1, v28, v207, v231[1], v231[0], v205, v213, a1[30] == 0, v199);
          int v84 = v219;
LABEL_212:
          if ((v171 & 1) != 0)
          {
            if (v226) {
              sub_1813103F4(v224, 39LL, HIDWORD(v206), v223 + 1, v183, v184, v185, v186);
            }
            else {
              sub_181319CC8(v224, v223, HIDWORD(v206), v182, v183, v184, v185, v186);
            }
            if (*(_BYTE *)(*(void *)v224 + 103LL)) {
              unint64_t v197 = &byte_18C550680;
            }
            else {
              unint64_t v197 = (char *)(*(void *)(v224 + 136) + 40LL * (int)v223);
            }
            a4 = (void *)v220;
            *((_DWORD *)v197 + 2) = *(_DWORD *)(v224 + 144);
          }

          else
          {
            sub_18131B3E0(v224, v217);
            sub_18128E90C(v202, v190, v191, v192, v193, v194, v195, v196);
            a4 = (void *)v220;
          }

  __int16 v199 = *(unsigned __int8 *)(v11 + 44);
  if (*(_BYTE *)(v11 + 44))
  {
LABEL_185:
    unint64_t v201 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v201)
    {
      sub_18131044C(v14, 158LL, v199, v9, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v201 + 1;
      int v202 = *(void *)(v14 + 136) + 40LL * v201;
      *(_DWORD *)int v202 = 158;
      *(_DWORD *)(v202 + 4) = v199;
      *(_DWORD *)(v202 + 8) = v9;
      *(void *)(v202 + 12) = 0LL;
      *(void *)(v202 + 28) = 0LL;
      *(void *)(v202 + 20) = 0LL;
      *(_DWORD *)(v202 + 36) = 0;
    }

    goto LABEL_188;
  }

  if ((*(_BYTE *)(*v13 + 50) & 8) != 0 || v13[21] || *((_BYTE *)v13 + 32))
  {
    if ((int)v9 >= 1)
    {
      unint64_t v200 = (uint64_t *)v13[21];
      if (!v200) {
        unint64_t v200 = v13;
      }
      *((_BYTE *)v200 + 33) = 1;
    }

    goto LABEL_185;
  }

  uint64_t v207 = v13[2];
  if (v207)
  {
    unsigned int v208 = 0LL;
  }

  else
  {
    if ((*(_BYTE *)(*v13 + 96) & 8) == 0) {
      *((_BYTE *)v13 + 35) = 1;
    }
    uint64_t v207 = sub_1812DC63C(v13, a2, v199, a4, a5, a6, a7, a8);
    unsigned int v208 = (uint64_t *)v13[21];
  }

  if (!v208) {
    unsigned int v208 = v13;
  }
  *((_BYTE *)v208 + 33) = 1;
  sub_1812B9B68((uint64_t *)v207, 70LL, 787LL, 2LL, 0LL, 0LL, 0xFFFFFFFFLL, a8);
  unsigned int v209 = *(_DWORD *)(v207 + 144);
  uint64_t v56 = __OFSUB__(v209, 1);
  int v210 = v209 - 1;
  if (v210 < 0 == v56) {
    *(_WORD *)(*(void *)(v207 + 136) + 40LL * v210 + 2) = 4;
  }
LABEL_188:
  double result = *(void *)(v14 + 24);
  int v204 = -v16;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0) {
    double result = sub_18131E420(result, v14, v204);
  }
  else {
    *(_DWORD *)(*(void *)(result + 80) + 4LL * v204) = *(_DWORD *)(v14 + 144);
  }
  unsigned int v205 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v205) {
    return sub_18131044C(v14, 122LL, v50, 0LL, 0LL, a6, a7, a8);
  }
  *(_DWORD *)(v14 + 144) = v205 + 1;
  uint64_t v206 = *(void *)(v14 + 136) + 40LL * v205;
  *(_DWORD *)uint64_t v206 = 122;
  *(_DWORD *)(v206 + 4) = v50;
  *(_OWORD *)(v206 + 8) = 0u;
  *(_OWORD *)(v206 + 24) = 0u;
  return result;
}

      if ((_DWORD)v13)
      {
LABEL_178:
        uint64_t v83 = a3[3];
        if (v83 + (unint64_t)v13 >= a3[2])
        {
LABEL_180:
          uint64_t v27 = (uint64_t)a3;
          uint64_t v26 = (const char *)v12;
          uint64_t v28 = v13;
          return sub_18135B8EC(v27, v26, v28);
        }

        else
        {
          double result = (uint64_t)memcpy((void *)(a3[1] + v83), v12, v13);
          a3[3] += v13;
        }
      }

      return result;
    case 6:
      if ((v5 & 1) == 0)
      {
        uint64_t v12 = *(unsigned __int8 **)(v6 + 8);
        int v13 = *(unsigned int *)(v6 + 4);
        if ((v5 & 0x40) == 0)
        {
LABEL_28:
          uint64_t v21 = a3[3];
          if (v21 + v13 >= a3[2]) {
            goto LABEL_180;
          }
          double result = (uint64_t)memcpy((void *)(a3[1] + v21), v12, v13);
          a3[3] += v13;
          return result;
        }

        uint64_t v17 = a3[3];
        if (v17 >= a3[2])
        {
          double result = sub_18135BB8C((uint64_t)a3, 34);
        }

        else
        {
          uint64_t v18 = a3[1];
          a3[3] = v17 + 1;
          *(_BYTE *)(v18 + v17) = 34;
        }

        uint64_t v51 = v13 - 2;
        if ((_DWORD)v13 != 2)
        {
          int v52 = v12 + 1;
          while (1)
          {
            uint64_t v54 = 0LL;
            uint64_t v55 = v51;
            while (v52[v54] != 92)
            {
              if (v51 == ++v54)
              {
                LODWORD(v54) = v51;
                goto LABEL_106;
              }
            }

            if ((_DWORD)v54)
            {
              uint64_t v55 = v54;
LABEL_106:
              uint64_t v56 = a3[3];
              if (v56 + v55 >= a3[2])
              {
                double result = sub_18135B8EC((uint64_t)a3, v52, v54);
              }

              else
              {
                double result = (uint64_t)memcpy((void *)(a3[1] + v56), v52, v55);
                a3[3] += v55;
              }

              v51 -= v54;
              if (!v51) {
                goto LABEL_165;
              }
              v52 += v55;
            }

            uint64_t v57 = v52[1];
            if (v57 <= 0x75)
            {
              switch(v52[1])
              {
                case 0xAu:
                  goto LABEL_99;
                case 0xDu:
                  uint64_t v53 = v52[2] == 10;
                  if (v52[2] == 10) {
                    ++v52;
                  }
                  v51 -= v53;
                  goto LABEL_99;
                case 0x27u:
                  uint64_t v58 = a3[3];
                  if (v58 >= a3[2])
                  {
                    double result = sub_18135BB8C((uint64_t)a3, 39);
                  }

                  else
                  {
                    uint64_t v59 = a3[1];
                    a3[3] = v58 + 1;
                    *(_BYTE *)(v59 + v58) = 39;
                  }

                  goto LABEL_99;
                case 0x30u:
                  uint64_t v60 = a3[3];
                  if ((unint64_t)(v60 + 6) < a3[2])
                  {
                    uint64_t v61 = a3[1] + v60;
                    uint64_t v62 = 12336;
                    goto LABEL_123;
                  }

                  uint64_t v68 = (uint64_t)a3;
                  uint64_t v69 = "\\u0000";
                  break;
                default:
                  goto LABEL_126;
              }

              goto LABEL_132;
            }

            if (v57 == 118) {
              break;
            }
            if (v57 == 120)
            {
              uint64_t v65 = a3[3];
              if ((unint64_t)(v65 + 4) >= a3[2])
              {
                double result = sub_18135B8EC((uint64_t)a3, "\\u00", 4u);
                int v66 = a3[3];
              }

              else
              {
                *(_DWORD *)(a3[1] + v65) = 808482140;
                int v66 = a3[3] + 4LL;
                a3[3] = v66;
              }

              v52 += 2;
              if ((unint64_t)(v66 + 2) >= a3[2])
              {
                double result = sub_18135B8EC((uint64_t)a3, v52, 2u);
              }

              else
              {
                *(_WORD *)(a3[1] + v66) = *(_WORD *)v52;
                a3[3] += 2LL;
              }

              v51 -= 2;
              goto LABEL_99;
            }

            if (v57 != 226)
            {
LABEL_126:
              int v67 = a3[3];
              if ((unint64_t)(v67 + 2) >= a3[2])
              {
                double result = sub_18135B8EC((uint64_t)a3, v52, 2u);
                goto LABEL_99;
              }

              *(_WORD *)(a3[1] + v67) = *(_WORD *)v52;
              uint64_t v64 = a3[3] + 2LL;
LABEL_128:
              a3[3] = v64;
              goto LABEL_99;
            }

            v52 += 2;
            v51 -= 2;
LABEL_99:
            v52 += 2;
            v51 -= 2;
            if (!v51) {
              goto LABEL_165;
            }
          }

          uint64_t v63 = a3[3];
          if ((unint64_t)(v63 + 6) >= a3[2])
          {
            uint64_t v68 = (uint64_t)a3;
            uint64_t v69 = "\\u0009";
LABEL_132:
            double result = sub_18135B8EC(v68, v69, 6u);
            goto LABEL_99;
          }

          uint64_t v61 = a3[1] + v63;
          uint64_t v62 = 14640;
LABEL_123:
          *(_WORD *)(v61 + 4) = v62;
          *(_DWORD *)uint64_t v61 = 808482140;
          uint64_t v64 = a3[3] + 6LL;
          goto LABEL_128;
        }

        unsigned int v208 = v40;
        uint64_t v29 = v221;
        goto LABEL_26;
      case 7:
        v19[v216++] = v39;
        uint64_t v29 = v221;
        goto LABEL_25;
      default:
        goto LABEL_120;
    }
  }

    if (*v39)
    {
      uint64_t v125 = v39[2];
      v39[2] = v125 + 1;
      uint64_t v150 = v39;
      unsigned int v8 = sub_181377C44((uint64_t *)a1, v125, (char *)v39[7], *((_DWORD *)v39 + 13));
      if ((_DWORD)v8)
      {
LABEL_179:
        ++*(_DWORD *)(a1 + 100);
        int v39 = v150;
        goto LABEL_136;
      }

      uint64_t v126 = (void *)*v39;
      uint64_t v127 = v39[1];
      uint64_t v128 = v39[2];
      size_t v129 = *(void **)*v39;
      if (v129)
      {
        uint64_t v130 = 1;
        do
        {
          uint64_t v131 = v128;
          uint64_t v132 = v126[2];
          uint64_t v133 = v129;
          if (v132)
          {
            do
            {
              uint64_t v134 = 10LL;
              uint64_t v135 = v127;
              do
              {
                --v134;
                uint64_t v36 = v135 > 0x7F;
                v135 >>= 7;
              }

              while (v36);
              *(_BYTE *)(*(void *)(v132 + 64) + v134) = v130;
              uint64_t v136 = (_BYTE *)(*(void *)(v132 + 64) + v134 + 1);
              int v137 = v127;
              do
              {
                uint64_t v138 = v137;
                *v136++ = v137 | 0x80;
                uint64_t v36 = v137 > 0x7F;
                v137 >>= 7;
              }

              while (v36);
              *(v136 - 1) = v138 & 0x7F;
              uint64_t v139 = sub_181377C44( (uint64_t *)a1,  v128,  (char *)(*(void *)(v132 + 64) + v134),  *(_DWORD *)(v132 + 56) - (int)v134);
              unsigned int v8 = v139;
              ++v128;
              if (!*(void *)(v132 + 8)) {
                break;
              }
              v127 += *(int *)(v132 + 24) + 1LL;
              uint64_t v132 = *(void *)(v132 + 8);
            }

            while (!(_DWORD)v139);
            if ((_DWORD)v139) {
              goto LABEL_179;
            }
            uint64_t v133 = (void *)*v126;
          }

          ++v130;
          size_t v129 = (void *)*v133;
          uint64_t v127 = v131;
          uint64_t v126 = v133;
        }

        while (*v133);
        uint64_t v126 = v133;
        uint64_t v127 = v131;
      }

      else
      {
        uint64_t v130 = 1;
      }

      uint64_t v140 = 10LL;
      uint64_t v141 = v127;
      do
      {
        --v140;
        uint64_t v36 = v141 > 0x7F;
        v141 >>= 7;
      }

      while (v36);
      *(_BYTE *)(v126[8] + v140) = v130;
      uint64_t v142 = (_BYTE *)(v126[8] + v140 + 1);
      do
      {
        uint64_t v143 = v127;
        *v142++ = v127 | 0x80;
        uint64_t v105 = v127 >= 0x80;
        v127 >>= 7;
      }

      while (v105);
      *(v142 - 1) = v143 & 0x7F;
      int v39 = v150;
      unsigned int v8 = sub_1813781BC( (uint64_t *)a1,  v145,  v144,  v150[1],  v125,  v128 - 1,  v150[8],  (char *)(v126[8] + v140),  *((_DWORD *)v126 + 14) - (int)v140);
      uint64_t v11 = v155;
    }

    else
    {
      unsigned int v8 = sub_1813781BC((uint64_t *)a1, v145, v144, 0LL, 0LL, 0LL, v39[8], (char *)v39[7], *((_DWORD *)v39 + 13));
    }

    ++*(_DWORD *)(a1 + 100);
    if (!(_DWORD)v8)
    {
      if (a4 == -1 || v145 < v11) {
        unsigned int v8 = sub_1813777A4((uint64_t *)a1, v145, v39[8]);
      }
      else {
        unsigned int v8 = 0LL;
      }
    }

    goto LABEL_137;
  }

  uint64_t v101 = v156;
  int16x8_t v102 = DWORD2(v156);
  v165[0] = 0LL;
  if (SDWORD2(v156) < 1) {
    goto LABEL_122;
  }
  unint64_t v103 = 0LL;
  do
  {
    uint64_t v104 = sub_1813780A4((uint64_t *)a1, *(void *)(v101 + 8 * v103++));
    if ((_DWORD)v104) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v103 >= v102;
    }
  }

  while (!v105);
  unsigned int v8 = v104;
  if (!(_DWORD)v104)
  {
LABEL_122:
    if (v146)
    {
      unsigned int v8 = sub_1813636A8((uint64_t *)a1, 26, v165, 0LL);
      if ((_DWORD)v8) {
        goto LABEL_136;
      }
      unint64_t v106 = v165[0];
      uint64_t v107 = *(_DWORD *)(a1 + 488);
      if (!sub_1812B2390((uint64_t)v165[0], 0))
      {
        uint64_t v108 = ((int)a3 + v107 * (uint64_t)(int)a2) << 10;
        uint64_t v109 = *((void *)v106 + 16);
        if ((*(_WORD *)(v109 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v109, v108);
        }

        else
        {
          *(void *)uint64_t v109 = v108;
          *(_WORD *)(v109 + 20) = 4;
        }

        uint64_t v119 = *(void *)(*(void *)v106 + 24LL);
        uint64_t v11 = v155;
        if (v119) {
          xmmword_18C465410(v119);
        }
      }

      uint64_t v120 = *(_DWORD *)(a1 + 488);
      if (!sub_1812B2390((uint64_t)v106, 1u))
      {
        int v121 = (((int)a3 + v120 * (uint64_t)(int)a2) << 10) | 0x3FF;
        uint64_t v122 = *((void *)v106 + 16);
        if ((*(_WORD *)(v122 + 84) & 0x9000) != 0)
        {
          sub_1813040AC(v122 + 64, v121);
        }

        else
        {
          *(void *)(v122 + 64) = v121;
          *(_WORD *)(v122 + 84) = 4;
        }

        goto LABEL_173;
      }
    }

    else
    {
      unsigned int v8 = sub_1813636A8((uint64_t *)a1, 16, v165, 0LL);
      if ((_DWORD)v8) {
        goto LABEL_136;
      }
      unint64_t v106 = v165[0];
      uint64_t v116 = *(_DWORD *)(a1 + 488);
      if (!sub_1812B2390((uint64_t)v165[0], 0))
      {
        uint64_t v117 = (((int)a3 + v116 * (uint64_t)(int)a2) << 10) + a4;
        uint64_t v118 = *((void *)v106 + 16);
        if ((*(_WORD *)(v118 + 20) & 0x9000) != 0)
        {
          sub_1813040AC(v118, v117);
        }

        else
        {
          *(void *)uint64_t v118 = v117;
          *(_WORD *)(v118 + 20) = 4;
        }

      if (v83 == byte_1813C6343[v81]) {
        goto LABEL_178;
      }
      if (v53 != 67)
      {
        uint64_t v91 = 99;
        uint64_t v89 = *v48;
        goto LABEL_282;
      }

      if (v50 == 1) {
        goto LABEL_283;
      }
      uint64_t v89 = v48[1];
      if ((v89 & 0xFFFFFFDF) != 0x4F)
      {
        uint64_t v91 = 111;
        goto LABEL_282;
      }

      uint64_t v90 = &aContent[v51];
      if (&aContent[v51] == "ontent")
      {
LABEL_283:
        if (!*(_DWORD *)(v19 + 64))
        {
          if (*v49)
          {
            *(_DWORD *)(v19 + 64) = 2;
            *(void *)(v19 + 72) = sub_1813889B8(&v214, "%Q.%Q", *(void *)(v19 + 8), v49);
            uint64_t v15 = v214;
          }

          else
          {
            uint64_t v15 = 0LL;
            *(_DWORD *)(v19 + 64) = 1;
          }

          goto LABEL_299;
        }

        uint64_t v122 = sqlite3_mprintf("multiple content=... directives", v201, v202);
        goto LABEL_298;
      }

      uint64_t v89 = v48[2];
      if ((v89 & 0xFFFFFFDF) == 0x4E)
      {
        if (v90 == "ntent") {
          goto LABEL_283;
        }
        uint64_t v89 = v48[3];
        if ((v89 & 0xFFFFFFDF) != 0x54) {
          goto LABEL_261;
        }
        if (v90 == "tent") {
          goto LABEL_283;
        }
        uint64_t v89 = v48[4];
        if ((v89 & 0xFFFFFFDF) != 0x45)
        {
          uint64_t v91 = 101;
          goto LABEL_282;
        }

        if (v90 == "ent") {
          goto LABEL_283;
        }
        uint64_t v89 = v48[5];
        if ((v89 & 0xFFFFFFDF) == 0x4E)
        {
          if (v90 == "nt") {
            goto LABEL_283;
          }
          uint64_t v89 = v48[6];
          if ((v89 & 0xFFFFFFDF) == 0x54)
          {
            if (v90 != "t")
            {
              uint64_t v91 = 0;
              uint64_t v89 = v48[7];
LABEL_282:
              if (v91 == byte_1813C6343[v89]) {
                goto LABEL_283;
              }
              uint64_t v123 = 0LL;
              uint64_t v124 = v48 + 18;
              while (1)
              {
                if (v123 == 18)
                {
                  uint64_t v125 = 0;
                  goto LABEL_294;
                }

                uint64_t v125 = byte_1813C6343[aContentlessDel_1[v123]];
                if (v51 + 1 == ++v123) {
                  goto LABEL_295;
                }
              }

              uint64_t v124 = &v48[v123];
LABEL_294:
              if (v125 == byte_1813C6343[*v124])
              {
LABEL_295:
                uint64_t v126 = *v49;
                if ((v126 & 0xFE) == 0x30 && !v49[1])
                {
                  uint64_t v15 = 0LL;
                  *(_DWORD *)(v19 + 68) = v126 == 49;
                  goto LABEL_299;
                }

                uint64_t v122 = sqlite3_mprintf("malformed contentless_delete=... directive", v201, v202);
                goto LABEL_298;
              }

              if (v53 != 67)
              {
                uint64_t v131 = 99;
                uint64_t v127 = *v48;
                goto LABEL_331;
              }

              if (v50 == 1) {
                goto LABEL_365;
              }
              uint64_t v127 = v48[1];
              if ((v127 & 0xFFFFFFDF) != 0x4F)
              {
                uint64_t v131 = 111;
                goto LABEL_331;
              }

              uint64_t v128 = &aContentRowid[v51];
              if (&aContentRowid[v51] == "ontent_rowid") {
                goto LABEL_365;
              }
              uint64_t v127 = v48[2];
              if ((v127 & 0xFFFFFFDF) != 0x4E)
              {
                uint64_t v130 = 110;
                size_t v129 = v48[2];
                goto LABEL_364;
              }

              if (v128 == "ntent_rowid") {
                goto LABEL_365;
              }
              size_t v129 = v48[3];
              if ((v129 & 0xFFFFFFDF) == 0x54)
              {
                if (v128 == "tent_rowid") {
                  goto LABEL_365;
                }
                size_t v129 = v48[4];
                if ((v129 & 0xFFFFFFDF) != 0x45)
                {
                  uint64_t v130 = 101;
                  goto LABEL_364;
                }

                if (v128 == "ent_rowid") {
                  goto LABEL_365;
                }
                size_t v129 = v48[5];
                if ((v129 & 0xFFFFFFDF) != 0x4E)
                {
                  uint64_t v130 = 110;
                  goto LABEL_364;
                }

                if (v128 == "nt_rowid") {
                  goto LABEL_365;
                }
                size_t v129 = v48[6];
                if ((v129 & 0xFFFFFFDF) == 0x54)
                {
                  if (v128 == "t_rowid") {
                    goto LABEL_365;
                  }
                  size_t v129 = v48[7];
                  if (v129 == 95)
                  {
                    if (v128 == "_rowid") {
                      goto LABEL_365;
                    }
                    size_t v129 = v48[8];
                    if ((v129 & 0xFFFFFFDF) == 0x52)
                    {
                      if (v128 == "rowid") {
                        goto LABEL_365;
                      }
                      size_t v129 = v48[9];
                      if ((v129 & 0xFFFFFFDF) == 0x4F)
                      {
                        if (v128 == "owid") {
                          goto LABEL_365;
                        }
                        size_t v129 = v48[10];
                        if ((v129 & 0xFFFFFFDF) == 0x57)
                        {
                          if (v128 == "wid") {
                            goto LABEL_365;
                          }
                          size_t v129 = v48[11];
                          if ((v129 & 0xFFFFFFDF) == 0x49)
                          {
                            if (v128 == "id") {
                              goto LABEL_365;
                            }
                            size_t v129 = v48[12];
                            if ((v129 & 0xFFFFFFDF) == 0x44)
                            {
                              if (v128 != "d")
                              {
                                uint64_t v130 = 0;
                                size_t v129 = v48[13];
                                goto LABEL_364;
                              }

LABEL_221:
          if (!a1[30] && !*((void *)a1 + 22) && *((void *)a1 + 20)) {
            sub_181342D84((uint64_t *)a1, v152, v153, v154, v155, v156, v157, v158);
          }
          if ((_DWORD)v112) {
            sub_18133ECB4(v224, v112, "rows deleted", v154, v155, v156, v157, v158);
          }
          goto LABEL_105;
        }

          if (++v110 == v109) {
            goto LABEL_217;
          }
          goto LABEL_222;
        }
      }

      else if (byte_1813C6343[v120] != byte_1813C6343[v121])
      {
        goto LABEL_221;
      }

      ++v118;
    }
  }

uint64_t sub_1812BCAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = (int *)v3[1];
  uint64_t v6 = v3[2];
  switch(*(_BYTE *)a2)
  {
    case 0xA7:
    case 0xA9:
    case 0xB3:
      if (!v5) {
        return 0LL;
      }
      int v7 = *v5;
      if (*v5 < 1) {
        return 0LL;
      }
      unsigned int v8 = v5 + 18;
      while (1)
      {
        int v9 = *v8;
        v8 += 26;
        if (*(_DWORD *)(a2 + 44) == v9) {
          break;
        }
        if (!--v7) {
          return 0LL;
        }
      }

      sub_18133DFA8((uint64_t *)v4, v6, (unsigned __int8 *)a2);
      return 0LL;
    case 0xA8:
      int v10 = *(_DWORD *)(v6 + 48);
      if (v10 < 1 || (uint64_t v11 = *(unsigned __int8 ***)(v6 + 40), v12 = *v11, *v11 == (unsigned __int8 *)a2))
      {
        unsigned int v13 = 0;
      }

      else
      {
        unsigned int v13 = 0;
        uint64_t v14 = v11 + 3;
        do
        {
          int v15 = sub_18131BA10(0LL, v12, (unsigned __int8 *)a2, 0xFFFFFFFFLL);
          int v10 = *(_DWORD *)(v6 + 48);
          if (!v15) {
            break;
          }
          uint64_t v16 = *v14;
          v14 += 3;
          uint64_t v12 = v16;
        }

        while (v16 != (unsigned __int8 *)a2);
      }

      if ((int)v13 >= v10)
      {
        unsigned int v20 = *(unsigned __int8 *)(*(void *)v4 + 100LL);
        uint64_t v21 = sub_1812A02FC(*(void *)v4, *(void **)(v6 + 40), (int *)(v6 + 48), v27);
        *(void *)(v6 + 40) = v21;
        unsigned int v13 = v27[0];
        if ((v27[0] & 0x80000000) == 0)
        {
          uint64_t v22 = v21;
          *(void *)(v21 + 24LL * LODWORD(v27[0])) = a2;
          uint64_t v23 = *(int **)(a2 + 32);
          if (v23) {
            int v24 = *v23;
          }
          else {
            int v24 = 0;
          }
          *(void *)(v21 + 24LL * v13 + 8) = sub_18126CC00(*(void *)v4, *(char **)(a2 + 8), v24, v20, 0);
          if ((*(_BYTE *)(a2 + 4) & 4) != 0)
          {
            int v25 = *(_DWORD *)(v4 + 52);
            *(_DWORD *)(v4 + 52) = v25 + 1;
          }

          else
          {
            int v25 = -1;
          }

          *(_DWORD *)(v22 + 24LL * v13 + 16) = v25;
        }
      }

      *(_WORD *)(a2 + 52) = v13;
      *(void *)(a2 + 64) = v6;
      return 1LL;
    default:
      if ((*((_BYTE *)v3 + 42) & 2) == 0) {
        return 0LL;
      }
      uint64_t v17 = *(void *)(v4 + 96);
      if (!v17) {
        return 0LL;
      }
      break;
  }

  while (1)
  {
    uint64_t v18 = *(unsigned int *)(v17 + 8);
    if ((v18 & 0x80000000) == 0
      && !sub_18131BA10(0LL, (unsigned __int8 *)a2, *(unsigned __int8 **)v17, v18))
    {
      break;
    }

    uint64_t v17 = *(void *)(v17 + 24);
    if (!v17) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a2 + 7) & 3) != 0 || *v5 < 1 || v5[18] != *(_DWORD *)(v17 + 8) || *(void *)(a2 + 64)) {
    return 0LL;
  }
  if (*(_DWORD *)(v4 + 48)) {
    return 2LL;
  }
  *(_OWORD *)&v28[16] = 0u;
  __int128 v29 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  memset(v27, 0, sizeof(v27));
  LOBYTE(v27[0]) = -87;
  *(void *)&v28[12] = *(void *)(v17 + 12);
  sub_18133DFA8((uint64_t *)v4, v6, (unsigned __int8 *)v27);
  if (*(_DWORD *)(v4 + 48)) {
    return 2LL;
  }
  __int16 v26 = *(_WORD *)&v28[20];
  *(void *)(*(void *)(v6 + 24) + 24LL * *(__int16 *)&v28[20] + 8) = a2;
  *(void *)(a2 + 64) = v6;
  *(_WORD *)(a2 + 52) = v26;
  return 1LL;
}

void sub_1812BCD5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 48);
  if (v8 && !*(_DWORD *)(a1 + 48))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(unsigned int *)(a2 + 12);
    uint64_t v13 = (v8 + v12 - 1);
    int v14 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v14)
    {
      sub_18131044C(*(void *)(a1 + 16), 75LL, 0LL, v12, v13, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v11 + 144) = v14 + 1;
      uint64_t v15 = *(void *)(v11 + 136) + 40LL * v14;
      *(void *)uint64_t v15 = 75LL;
      *(_DWORD *)(v15 + 8) = v12;
      *(_DWORD *)(v15 + 12) = v13;
      *(void *)(v15 + 24) = 0LL;
      *(void *)(v15 + 32) = 0LL;
      *(void *)(v15 + 16) = 0LL;
    }

    if (*(int *)(a2 + 48) >= 1)
    {
      int v16 = 0;
      uint64_t v17 = (unsigned int *)(*(void *)(a2 + 40) + 16LL);
      do
      {
        if ((*v17 & 0x80000000) == 0)
        {
          uint64_t v18 = *(void *)(*((void *)v17 - 2) + 32LL);
          if (v18 && *(_DWORD *)v18 == 1)
          {
            uint64_t v25 = sub_18131A140(*(void *)a1, 1, 1);
            if (v25)
            {
              uint64_t v26 = sub_181289D04(a1, *(unsigned __int8 **)(v18 + 8), v19, v20, v21, v22, v23, v24);
              if (!v26) {
                uint64_t v26 = *(void *)(*(void *)a1 + 16LL);
              }
              *(void *)(v25 + 32) = v26;
              **(_BYTE **)(v25 + 24) = *(_BYTE *)(v18 + 24);
            }

            v17[1] = sub_1812B9B68((uint64_t *)v11, 118LL, *v17, 0LL, 0LL, v25, 4294967288LL, v24);
            sub_18131CCF8( (uint64_t *)a1,  0,  "USE TEMP B-TREE FOR %s(DISTINCT)",  v27,  v28,  v29,  v30,  v31,  *(void *)(*((void *)v17 - 1) + 56LL));
          }

          else
          {
            sub_1812DC47C(a1, "DISTINCT aggregates must have exactly one argument", a3, v12, v13, a6, a7, a8, v32);
            unsigned int *v17 = -1;
          }
        }

        ++v16;
        v17 += 6;
      }

      while (v16 < *(_DWORD *)(a2 + 48));
    }
  }

uint64_t sub_1812BCF10( uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(result + 48)) {
    return result;
  }
  uint64_t v8 = a3;
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(result + 16);
  *(_BYTE *)a3 = 1;
  if (*(int *)(a3 + 48) < 1)
  {
LABEL_66:
    int v47 = 0;
    if (a2)
    {
      unsigned int v58 = a2;
      if (*(_DWORD *)(v8 + 36)) {
        goto LABEL_68;
      }
    }

    goto LABEL_71;
  }

  unsigned int v57 = a2;
  int v11 = 0;
  unsigned int v58 = 0;
  uint64_t v12 = *(uint64_t **)(a3 + 40);
  uint64_t v55 = (_DWORD *)(result + 44);
  do
  {
    uint64_t v13 = *(_DWORD **)(*v12 + 32);
    if ((*(_BYTE *)(*v12 + 7) & 1) != 0)
    {
      uint64_t v18 = *(void *)(*(void *)(*v12 + 72) + 72LL);
      if (*(_DWORD *)(v8 + 36) && v57 && (*(_DWORD *)(v12[1] + 4) & 0x20) != 0)
      {
        int v19 = v58;
        if (!v58)
        {
          int v19 = *(_DWORD *)(v9 + 56) + 1;
          *(_DWORD *)(v9 + 56) = v19;
        }

        unsigned int v58 = v19;
        int v20 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v20)
        {
          sub_18131044C(v10, 80LL, v57, v58, 0LL, a6, a7, a8);
        }

        else
        {
          *(_DWORD *)(v10 + 144) = v20 + 1;
          uint64_t v21 = *(void *)(v10 + 136) + 40LL * v20;
          *(_DWORD *)uint64_t v21 = 80;
          *(_DWORD *)(v21 + 4) = v57;
          *(_DWORD *)(v21 + 8) = v58;
          *(void *)(v21 + 12) = 0LL;
          *(void *)(v21 + 28) = 0LL;
          *(void *)(v21 + 20) = 0LL;
          *(_DWORD *)(v21 + 36) = 0;
        }
      }

      uint64_t v14 = (*(_DWORD *)(v9 + 68) - 1);
      *(_DWORD *)(v9 + 68) = v14;
      sub_1812B0714(v9, v18);
      if (!v13)
      {
LABEL_39:
        int v15 = 0;
        uint64_t v29 = v12 + 1;
        uint64_t v17 = 0LL;
        if ((*(_BYTE *)(v12[1] + 4) & 0x20) == 0)
        {
          uint64_t v17 = 0LL;
          goto LABEL_46;
        }

        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      if (!v13) {
        goto LABEL_39;
      }
    }

    int v15 = *v13;
    if (*v13 == 1)
    {
      if (*(_BYTE *)(v9 + 31))
      {
        unsigned __int8 v16 = *(_BYTE *)(v9 + 31) - 1;
        *(_BYTE *)(v9 + 31) = v16;
        uint64_t v17 = *(unsigned int *)(v9 + 4LL * v16 + 224);
      }

      else
      {
        uint64_t v17 = (*(_DWORD *)(v9 + 56) + 1);
        *(_DWORD *)(v9 + 56) = v17;
      }
    }

    else
    {
      int v22 = *(_DWORD *)(v9 + 40);
      BOOL v23 = __OFSUB__(v22, v15);
      int v24 = v22 - v15;
      if (v24 < 0 != v23)
      {
        int v25 = *(_DWORD *)(v9 + 56);
        uint64_t v17 = (v25 + 1);
        *(_DWORD *)(v9 + 56) = v25 + v15;
      }

      else
      {
        uint64_t v17 = *(unsigned int *)(v9 + 44);
        *(_DWORD *)(v9 + 40) = v24;
        *(_DWORD *)(v9 + 44) = v17 + v15;
      }
    }

    sub_18131B090(v9, v13, v17, 0, 1, a6, a7, a8);
    uint64_t v28 = *((unsigned int *)v12 + 4);
    if ((v28 & 0x80000000) == 0)
    {
      if (!(_DWORD)v14)
      {
        uint64_t v14 = (*(_DWORD *)(v9 + 68) - 1);
        *(_DWORD *)(v9 + 68) = v14;
      }

      *((_DWORD *)v12 + 4) = sub_18133D5A8(v9, a4, v28, v14, v13, v17, a7, a8);
    }

    uint64_t v29 = v12 + 1;
    if ((*(_BYTE *)(v12[1] + 4) & 0x20) != 0)
    {
      if (v15 >= 1)
      {
        uint64_t v30 = (unsigned __int8 **)(v13 + 2);
        int v31 = 1;
        do
        {
          char v32 = *v30;
          v30 += 3;
          uint64_t v33 = sub_181289D04(v9, v32, v28, v26, v27, a6, a7, a8);
          if (v33) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 < v15;
          }
          ++v31;
        }

        while (v34);
        uint64_t v35 = v33;
        uint64_t v8 = a3;
        if (v33)
        {
          uint64_t v36 = v58;
          if (!v58)
          {
LABEL_42:
            if (*(_DWORD *)(v8 + 36))
            {
              uint64_t v36 = (*(_DWORD *)(v9 + 56) + 1);
              *(_DWORD *)(v9 + 56) = v36;
            }

            else
            {
              uint64_t v36 = 0LL;
            }
          }

LABEL_45:
          unsigned int v58 = v36;
          sub_1812B9B68((uint64_t *)v10, 85LL, v36, 0LL, 0LL, v35, 4294967294LL, a8);
          goto LABEL_46;
        }
      }

        int v25 = *(void *)(*a1 + 24LL);
        if (v25) {
          xmmword_18C465410(v25);
        }
        uint64_t v63 = v19;
      }

      uint64_t v26 = a1[16];
      uint64_t v27 = (int)v19 - 1LL;
      uint64_t v28 = (__int128 *)(v26 + (v27 << 6));
      uint64_t v29 = *((_WORD *)v28 + 10);
      if ((v29 & 1) != 0)
      {
        uint64_t v30 = v61;
        if (v61 + 4 >= v59)
        {
          sub_1812D3A10((uint64_t)&v57, "NULL", 4u);
        }

        else
        {
          v61 += 4;
          *(_DWORD *)((char *)v58 + v30) = 1280070990;
        }
      }

      else if ((v29 & 0x24) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v57, "%lld");
      }

      else if ((v29 & 8) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v57, "%!.15g", *(void *)v28);
      }

      else
      {
        if ((v29 & 2) != 0)
        {
          char v32 = *(unsigned __int8 *)(v3 + 100);
          if (v32 != 1)
          {
            uint64_t v55 = 0u;
            uint64_t v56 = 0u;
            int v52 = 0u;
            uint64_t v53 = 0LL;
            uint64_t v54 = v3;
            sub_181269368((uint64_t)&v52, *(char **)(v26 + (v27 << 6) + 8), *(int *)(v26 + (v27 << 6) + 16), v32, 0LL);
            if ((v53 & 0x200000000LL) == 0)
            {
              BYTE6(v53) = 1;
              goto LABEL_79;
            }

            if (BYTE6(v53) == 1)
            {
LABEL_79:
              uint64_t v28 = &v52;
            }

            else
            {
              uint64_t v28 = &v52;
              if (sub_1812C23E8((int *)&v52, 1) == 7)
              {
                LOBYTE(v62) = 7;
                uint64_t v59 = 0;
                goto LABEL_79;
              }
            }
          }

          int v42 = *((unsigned int *)v28 + 4);
          int v43 = *((void *)v28 + 1);
          if ((int)v42 <= 2048)
          {
LABEL_84:
            unsigned int v45 = *((unsigned int *)v28 + 4);
          }

          else
          {
            uint64_t v44 = 2048LL;
            while ((*(_BYTE *)(v43 + v44) & 0xC0) == 0x80)
            {
              if (v42 == ++v44) {
                goto LABEL_84;
              }
            }

            unsigned int v45 = v44;
          }

          sqlite3_str_appendf((sqlite3_str *)&v57, "'%.*q'", v45, v43);
          int v46 = *((_DWORD *)v28 + 4);
          int v47 = __OFSUB__(v46, (_DWORD)v45);
          uint64_t v48 = v46 - v45;
          if (!((v48 < 0) ^ v47 | (v48 == 0))) {
            sqlite3_str_appendf((sqlite3_str *)&v57, "/*+%d bytes*/", v48);
          }
          goto LABEL_20;
        }

        if ((*((_WORD *)v28 + 10) & 0x400) != 0)
        {
          sqlite3_str_appendf((sqlite3_str *)&v57, "zeroblob(%d)");
        }

        else
        {
          int v31 = v61;
          if (v61 + 2 >= v59)
          {
            sub_1812D3A10((uint64_t)&v57, "x'", 2u);
          }

          else
          {
            v61 += 2;
            *(_WORD *)((char *)v58 + v31) = 10104;
          }

          uint64_t v33 = v26 + (v27 << 6);
          uint64_t v36 = *(_DWORD *)(v33 + 16);
          uint64_t v35 = (int *)(v33 + 16);
          BOOL v34 = v36;
          if (v36 >= 2048) {
            uint64_t v37 = 2048;
          }
          else {
            uint64_t v37 = v34;
          }
          uint64_t v51 = v37;
          if (v34 >= 1)
          {
            int v38 = 0LL;
            uint64_t v39 = (void *)(v26 + (v27 << 6) + 8);
            if (v37 <= 1) {
              uint64_t v40 = 1LL;
            }
            else {
              uint64_t v40 = v37;
            }
            do
              sqlite3_str_appendf((sqlite3_str *)&v57, "%02x", *(unsigned __int8 *)(*v39 + v38++));
            while (v40 != v38);
          }

          uint64_t v41 = v61;
          if (v61 + 1 >= v59)
          {
            sub_1812D3A10((uint64_t)&v57, "'", 1u);
          }

          else
          {
            ++v61;
            *((_BYTE *)v58 + v41) = 39;
          }

          if (*v35 > v51) {
            sqlite3_str_appendf((sqlite3_str *)&v57, "/*+%d bytes*/");
          }
        }
      }

    uint64_t v26 = v75;
    if (v75)
    {
      uint64_t v27 = &off_18C4653A8;
      if (!dword_18C465380)
      {
LABEL_51:
        (*v27)(v26);
        goto LABEL_52;
      }

      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v26);
      --qword_18C468B10;
      off_18C4653A8(v26);
      uint64_t v26 = xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        uint64_t v27 = &xmmword_18C465410;
        goto LABEL_51;
      }
    }

          ;
        }
      }
    }

    else
    {
      sub_1812DC47C((uint64_t)a1, "no such trigger: %S", n, a4, a5, a6, a7, a8, (_BYTE)a2 + 8);
    }

    *((_BYTE *)a1 + 29) = 1;
  }

  else
  {
    uint64_t v14 = 0;
    int v15 = (_BYTE *)a2[3];
    unsigned __int8 v16 = *(void *)(v9 + 32);
    while (1)
    {
      int v19 = v14 ^ (v14 < 2);
      if (!v12) {
        break;
      }
      int v20 = *(_BYTE **)(v16 + 32 * v19);
      for (uint64_t k = (unsigned __int8 *)a2[2]; ; ++k)
      {
        uint64_t n = *v20;
        a4 = *k;
        if ((_DWORD)n != (_DWORD)a4) {
          break;
        }
        if (!*v20) {
          goto LABEL_14;
        }
LABEL_11:
        ++v20;
      }

      uint64_t n = byte_1813C6343[n];
      a4 = byte_1813C6343[a4];
      if ((_DWORD)n == (_DWORD)a4) {
        goto LABEL_11;
      }
      if (!(_DWORD)v19)
      {
        uint64_t v27 = (unsigned __int8 *)a2[2];
        for (uint64_t m = "main"; ; ++m)
        {
          uint64_t n = *(unsigned __int8 *)m;
          a4 = *v27;
          if ((_DWORD)n == (_DWORD)a4)
          {
            if (!*m) {
              goto LABEL_14;
            }
          }

          else
          {
            uint64_t n = byte_1813C6343[n];
            a4 = byte_1813C6343[a4];
            if ((_DWORD)n != (_DWORD)a4) {
              break;
            }
          }

          ++v27;
        }
      }

    if (++v29 == v28) {
      goto LABEL_56;
    }
  }

        sub_1812B9B68((uint64_t *)v20, 113LL, v53, v52, v17, v24, 4294967288LL, v42);
        uint64_t v61 = *(_DWORD *)(v20 + 144);
        if (v61 >= 1) {
          *(_WORD *)(*(void *)(v20 + 136) + 40LL * (v61 - 1) + 2) = (16 * (v8 >> 31)) ^ 0x11;
        }
        if (*(_DWORD *)(v20 + 148) <= v61)
        {
          uint64_t v61 = sub_18131044C(v20, 34LL, v25, 0LL, 0LL, v58, v59, v60);
          if (*(_BYTE *)(a2 + 98)) {
            goto LABEL_49;
          }
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v61 + 1;
          uint64_t v62 = *(void *)(v20 + 136) + 40LL * v61;
          *(_DWORD *)uint64_t v62 = 34;
          *(_DWORD *)(v62 + 4) = v25;
          *(_OWORD *)(v62 + 8) = 0u;
          *(_OWORD *)(v62 + 24) = 0u;
          if (*(_BYTE *)(a2 + 98))
          {
LABEL_49:
            uint64_t v63 = *(unsigned int *)(v20 + 144);
            if (*(_DWORD *)(v20 + 148) <= (int)v63)
            {
              uint64_t v63 = sub_18131044C(v20, 9LL, 0LL, 1LL, 0LL, v58, v59, v60);
            }

            else
            {
              *(_DWORD *)(v20 + 144) = v63 + 1;
              uint64_t v64 = *(void *)(v20 + 136) + 40LL * (int)v63;
              *(_DWORD *)uint64_t v64 = 9;
              *(void *)(v64 + 4) = 0x100000000LL;
              *(void *)(v64 + 12) = 0LL;
              *(void *)(v64 + 28) = 0LL;
              *(void *)(v64 + 20) = 0LL;
              *(_DWORD *)(v64 + 36) = 0;
            }

            uint64_t v68 = *(unsigned __int16 *)(a2 + 94);
            int v67 = *(unsigned int *)(v20 + 144);
            if (*(_DWORD *)(v20 + 148) <= (int)v67)
            {
              sub_181310690(v20, 132LL, v25, v63, v38, v68, v59, v60);
            }

            else
            {
              *(_DWORD *)(v20 + 144) = v67 + 1;
              uint64_t v69 = *(void *)(v20 + 136) + 40LL * (int)v67;
              *(_DWORD *)uint64_t v69 = 64900;
              *(_DWORD *)(v69 + 4) = v25;
              *(_DWORD *)(v69 + 8) = v63;
              *(_DWORD *)(v69 + 12) = v38;
              *(_DWORD *)(v69 + 16) = v68;
              *(void *)(v69 + 24) = 0LL;
              *(void *)(v69 + 32) = 0LL;
            }

            sub_181324A24((uint64_t *)a1, 2LL, a2, v56, v57, v68, v59, v60);
            int v66 = *(_DWORD *)(v20 + 144);
            if (*(_BYTE *)(*(void *)v20 + 103LL)) {
              uint64_t v70 = &byte_18C550680;
            }
            else {
              uint64_t v70 = (char *)(*(void *)(v20 + 136) + 40LL * (int)v63);
            }
            *((_DWORD *)v70 + 2) = v66;
            goto LABEL_63;
          }
        }

        uint64_t v65 = *(void *)(a1 + 168);
        if (!v65) {
          uint64_t v65 = a1;
        }
        *(_BYTE *)(v65 + 33) = 1;
        int v66 = *(_DWORD *)(v20 + 144);
        int v67 = v66;
LABEL_63:
        if (*(_DWORD *)(v20 + 148) <= (signed int)v66)
        {
          sub_18131044C(v20, 133LL, v25, v38, v53, v58, v59, v60);
          if ((*(_WORD *)(a2 + 99) & 0x200) != 0) {
            goto LABEL_70;
          }
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v66 + 1;
          int v71 = *(void *)(v20 + 136) + 40LL * (int)v66;
          *(_DWORD *)int v71 = 133;
          *(_DWORD *)(v71 + 4) = v25;
          *(_DWORD *)(v71 + 8) = v38;
          *(_DWORD *)(v71 + 12) = v53;
          *(void *)(v71 + 24) = 0LL;
          *(void *)(v71 + 32) = 0LL;
          *(void *)(v71 + 16) = 0LL;
          if ((*(_WORD *)(a2 + 99) & 0x200) != 0) {
            goto LABEL_70;
          }
        }

        unsigned int v72 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v72)
        {
          sub_18131044C(v20, 137LL, v53, 0LL, 0LL, v58, v59, v60);
        }

        else
        {
          *(_DWORD *)(v20 + 144) = v72 + 1;
          unsigned int v73 = *(void *)(v20 + 136) + 40LL * v72;
          *(_DWORD *)unsigned int v73 = 137;
          *(_DWORD *)(v73 + 4) = v53;
          *(_OWORD *)(v73 + 8) = 0u;
          *(_OWORD *)(v73 + 24) = 0u;
        }

    if ((*((_DWORD *)a1 + 9) & v13) == 0) {
      goto LABEL_6;
    }
    if ((v13 & 0x100) == 0 && a1[2])
    {
      int v19 = **(void **)v3;
      int v20 = *(void *)v8;
      if (sub_181333C94(*(void *)v8, *((char *)a1 + 40)))
      {
        uint64_t v27 = (_BYTE **)sub_1812DDD08(v19, v20, v21, v22, v23, v24, v25, v26);
        if (!v27) {
          uint64_t v27 = *(_BYTE ***)(*(void *)v19 + 16LL);
        }
        uint64_t v28 = *v27;
        for (uint64_t i = (unsigned __int8 *)a1[2]; ; ++i)
        {
          uint64_t v30 = *v28;
          int v31 = *i;
          if ((_DWORD)v30 == (_DWORD)v31)
          {
            if (!*v28)
            {
              LOWORD(v13) = v8[10];
              goto LABEL_57;
            }
          }

          else if (byte_1813C6343[v30] != byte_1813C6343[v31])
          {
            goto LABEL_6;
          }

          ++v28;
        }
      }

      goto LABEL_6;
    }

  if (v14 <= v11)
  {
    char v32 = *v18;
    uint64_t v21 = 1;
    while (*v17 != v32 || memcmp(v17, v18, v14))
    {
      ++v21;
      uint64_t v33 = v11 + 1;
      BOOL v34 = v17 + 1;
      while (1)
      {
        uint64_t v35 = v33;
        uint64_t v17 = v34;
        if ((v16 & 1) != 0) {
          break;
        }
        ++v34;
        --v33;
        if ((*v17 & 0xC0) != 0x80) {
          goto LABEL_98;
        }
      }

      uint64_t v33 = v11;
LABEL_98:
      int v11 = v35 - 2;
      if (v14 >= v33) {
        goto LABEL_46;
      }
    }
  }

  else
  {
LABEL_46:
    uint64_t v21 = 0;
  }

  int v22 = v21;
  if (a1) {
    goto LABEL_50;
  }
LABEL_48:
  sub_1812CF36C(97431);
LABEL_85:
  if (v19)
  {
    if ((*(_WORD *)(v19 + 20) & 0x9000) != 0 || *(_DWORD *)(v19 + 32)) {
      sub_181303838(v19);
    }
    sub_1812F20DC(*(void **)(v19 + 24), (void *)v19);
  }

  if (v20)
  {
    if ((*(_WORD *)(v20 + 20) & 0x9000) != 0 || *(_DWORD *)(v20 + 32)) {
      sub_181303838(v20);
    }
    sub_1812F20DC(*(void **)(v20 + 24), (void *)v20);
  }

  if (LODWORD(v12) <= 1) {
    LODWORD(v12) = 1;
  }
  if (a2 != 3)
  {
    if (!a1 || !*(void *)a1) {
      sub_1813C4034();
    }
    int v22 = *(int *)(*(void *)(*(void *)a1 + 24LL) + 136LL);
    BOOL v23 = 1;
    goto LABEL_61;
  }

  int v19 = *(void *)(a3 + 16);
  if (!v19)
  {
    sub_1812CF36C(89717);
    goto LABEL_58;
  }

  int v20 = *(_WORD *)(v19 + 20);
  if ((v20 & 0x24) != 0)
  {
    uint64_t v21 = *(double *)v19;
    goto LABEL_59;
  }

  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x12) != 0 && *(void *)(v19 + 8))
    {
      LODWORD(v21) = sub_181303DF0(v19);
      goto LABEL_59;
    }

  double result = *(void *)(a3 + 64);
  if (!result)
  {
    double result = sub_1812CF36C(89717);
LABEL_49:
    uint64_t v26 = 0LL;
    goto LABEL_50;
  }

  int v25 = *(_WORD *)(result + 20);
  if ((v25 & 0x24) != 0)
  {
    uint64_t v26 = *(void *)result;
    goto LABEL_50;
  }

  if ((v25 & 8) != 0)
  {
    unsigned int v45 = *(double *)result;
    if (*(double *)result >= -9.22337204e18)
    {
      if (v45 <= 9.22337204e18) {
        uint64_t v26 = (uint64_t)v45;
      }
      else {
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v26 = 0x8000000000000000LL;
    }

    goto LABEL_50;
  }

  if ((v25 & 0x12) == 0 || !*(void *)(result + 8)) {
    goto LABEL_49;
  }
  double result = sub_181303DF0(result);
  uint64_t v26 = result;
LABEL_50:
  if (!v8 || !v14 || !v20 || (v16 & 0x80000000) != 0) {
    return result;
  }
  uint64_t v135 = v23;
  uint64_t v27 = *(void *)(v136 + 528);
  if (!*(_BYTE *)(v136 + 111)) {
    sub_1812FA020(v136);
  }
  double result = sub_1812E2C64(v136, v14, v11);
  if (!result || (int v31 = result, (int)v16 >= *(__int16 *)(result + 54)))
  {
    if (!*(_BYTE *)(v136 + 111)) {
      return sub_1812FA0B4(v136);
    }
    return result;
  }

  uint64_t v134 = v27;
  char v32 = (unsigned __int8 *)v8;
  uint64_t v33 = *(void *)(*(void *)(result + 8) + 16LL * v16);
  uint64_t v145 = 0u;
  uint64_t v146 = 0u;
  else {
    BOOL v34 = v16;
  }
  HIDWORD(v145) = v34;
  *(void *)(v136 + 528) = 0LL;
  uint64_t v133 = (uint64_t)v32;
  uint64_t v35 = sub_1813523CC((uint64_t)v138, v11, v136, v32, v26, v28, v29, v30);
  v137[0] = v138;
  v137[1] = sub_18135276C;
  v137[2] = sub_181352874;
  v137[3] = 0LL;
  v137[4] = 0LL;
  v137[5] = &v145;
  *(void *)&uint64_t v146 = v31;
  if (v35) {
    goto LABEL_253;
  }
  uint64_t v39 = v141;
  if (!v141)
  {
    uint64_t v41 = (char *)v20;
    if (v142)
    {
      sub_18131C674((uint64_t)v137, *(_DWORD **)(v142 + 80));
      int v46 = *(void *)(v142 + 72);
      uint64_t v40 = v135;
      if (v46) {
        sub_18131C57C((uint64_t)v137, v46);
      }
      goto LABEL_252;
    }

    uint64_t v35 = sub_1813528A8((uint64_t)v138);
    if (v35) {
      goto LABEL_253;
    }
    unsigned int v58 = v143;
    uint64_t v59 = *(void **)(v143 + 56);
    if (!v59) {
      goto LABEL_164;
    }
LABEL_122:
    uint64_t v60 = (char *)v59[3];
    uint64_t v61 = v59[8];
    if (v61) {
      sub_181352E48((uint64_t)v138, (uint64_t)&v145, *(unsigned int **)(v61 + 16), v33);
    }
    uint64_t v62 = (unsigned int *)v59[7];
    if (!v62) {
      goto LABEL_143;
    }
    uint64_t v63 = *v62;
    uint64_t v64 = 0LL;
    uint64_t v65 = (void *)v145;
    int v66 = DWORD2(v145);
LABEL_131:
    if (!v33) {
      goto LABEL_130;
    }
    int v67 = *(void *)&v62[4 * v64 + 2];
    if (!v67) {
      goto LABEL_130;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v69 = *(unsigned __int8 *)(v67 + i);
      uint64_t v70 = *(unsigned __int8 *)(v33 + i);
      if ((_DWORD)v69 == (_DWORD)v70)
      {
        if (!*(_BYTE *)(v67 + i))
        {
          int v71 = v144;
          if (v144)
          {
            unsigned int v72 = &v144;
            if (*v144 != v67)
            {
              do
              {
                unsigned int v73 = v71;
                int v71 = (void *)v71[3];
                if (!v71) {
                  goto LABEL_130;
                }
              }

              while (*v71 != v67);
              unsigned int v72 = v73 + 3;
            }

            *unsigned int v72 = v71[3];
            v71[3] = v65;
            *(void *)&uint64_t v145 = v71;
            DWORD2(v145) = ++v66;
            uint64_t v65 = v71;
          }

  *(void *)(v1 + 24) = 0LL;
  return result;
}

        v24[4] = 0LL;
        uint64_t v4 = v23;
        uint64_t v8 = v53;
        uint64_t v12 = v54;
        unsigned __int8 v16 = v55;
LABEL_46:
        void v18[2] = 0LL;
      }
    }

    unsigned int v57 = 0LL;
    unsigned int v58 = 0LL;
    uint64_t v6 = sub_181371DD8((uint64_t *)v4, &v59);
    if (!(_DWORD)v6)
    {
      uint64_t v41 = v59;
      int v42 = sqlite3_column_blob(v59, 0);
      if (!v42) {
        goto LABEL_75;
      }
      int v43 = v42;
      uint64_t v44 = sqlite3_column_bytes(v41, 0);
      unsigned int v45 = (unint64_t)&v43[v44];
      int v46 = sub_181371EB8(v43, v45, &v58);
      if (v46 >= v44) {
        goto LABEL_75;
      }
      int v47 = &v43[v46];
      do
        v47 += (int)sub_181371EB8(v47, v45, &v57);
      while ((unint64_t)v47 < v45);
      uint64_t v48 = v57;
      int v49 = v58;
      if (!v58 || v57 == 0)
      {
LABEL_75:
        sqlite3_reset(v41);
        return 267LL;
      }

      else
      {
        *(void *)(a1 + 88) = v58;
        *(_DWORD *)(a1 + 84) = (v48 / v49 + *(int *)(v4 + 468)) / *(int *)(v4 + 468);
        uint64_t v51 = sqlite3_reset(v41);
        uint64_t v6 = v51;
        uint64_t v12 = v54;
        if (!(_DWORD)v51)
        {
          uint64_t v56 = *(_DWORD *)(a1 + 84);
          goto LABEL_14;
        }
      }
    }
  }

  return v6;
}

    uint64_t v60 = (v13 >> 18) & 7 | 0xF0;
    uint64_t v61 = (v13 >> 12) & 0x3F | 0x80;
    uint64_t v62 = (v13 >> 6) & 0x3F | 0x80;
    uint64_t v63 = v13 & 0x3F | 0x80;
    int v22 = v64;
LABEL_46:
    char v32 = v10 + 1;
    int v31 = *v10;
    if (v31 >= 0xC0)
    {
      int v31 = byte_1813C6D06[v31 - 192];
      if (v32 == v9)
      {
LABEL_50:
        char v32 = v9;
      }

      else
      {
        while (1)
        {
          uint64_t v33 = *v32;
          if ((*v32 & 0xC0) != 0x80) {
            break;
          }
          ++v32;
          int v31 = v33 & 0x3F | (v31 << 6);
          if (v32 == v9) {
            goto LABEL_50;
          }
        }
      }

      if (v31 >> 11 == 27 || v31 < 0x80 || v31 >> 1 == 0x7FFF) {
        int v31 = 65533;
      }
    }

    if (v31) {
      uint64_t v36 = v32 >= v9;
    }
    else {
      uint64_t v36 = 1;
    }
    if (v36) {
      return 0LL;
    }
    if (v21)
    {
      if ((int)v31 > 127)
      {
        if (HIWORD(v31))
        {
          if (v31 - 66560 < 0x28) {
            v31 += 40;
          }
          goto LABEL_86;
        }

        uint64_t v39 = 0;
        uint64_t v40 = -1;
        uint64_t v41 = 162;
        do
        {
          int v42 = v39 + v41;
          if (v39 + v41 < 0 != __OFADD__(v39, v41)) {
            ++v42;
          }
          int v43 = v42 >> 1;
          if ((int)v31 < *((unsigned __int16 *)&unk_1813CD2A0 + 2 * v43))
          {
            uint64_t v41 = v43 - 1;
          }

          else
          {
            uint64_t v39 = v43 + 1;
            uint64_t v40 = v43;
          }
        }

        while (v41 >= v39);
        uint64_t v44 = (unsigned __int16 *)((char *)&unk_1813CD2A0 + 4 * v40);
        unsigned int v45 = *v44;
        if (*((unsigned __int8 *)v44 + 3) + v45 > (int)v31)
        {
          int v46 = *((unsigned __int8 *)&unk_1813CD2A0 + 4 * v40 + 2);
          if (((v31 ^ v45) & v46 & 1) == 0) {
            int v31 = (unsigned __int16)(*(_WORD *)((char *)&unk_1813CD52C + (v46 & 0xFE)) + v31);
          }
        }
      }

      else if (v31 - 65 < 0x1A)
      {
        v31 += 32;
      }
    }

    if (v31 <= 0x7F)
    {
      *int v22 = v31;
      uint64_t v37 = v22 + 1;
      goto LABEL_87;
    }

    if (v31 <= 0x7FF)
    {
      *int v22 = (v31 >> 6) | 0xC0;
      int v38 = v31 & 0x3F | 0x80;
      uint64_t v37 = v22 + 2;
      v22[1] = v38;
      goto LABEL_87;
    }

    if (!HIWORD(v31))
    {
      *int v22 = (v31 >> 12) | 0xE0;
      v22[1] = (v31 >> 6) & 0x3F | 0x80;
      int v47 = v31 & 0x3F | 0x80;
      uint64_t v37 = v22 + 3;
      v22[2] = v47;
      goto LABEL_87;
    }

          uint64_t v18 = *(unsigned __int16 *)(v12 + 20);
          if ((~v18 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
          {
            if ((v18 & 1) != 0)
            {
              int v19 = 0LL;
              if ((v18 & 2) == 0) {
                goto LABEL_55;
              }
            }

            else
            {
              int v19 = sub_181303998((int *)v12, 1);
              LOWORD(v18) = *(_WORD *)(v12 + 20);
              if ((v18 & 2) == 0) {
                goto LABEL_55;
              }
            }
          }

          else
          {
            int v19 = *(void *)(v12 + 8);
            if ((v18 & 2) == 0) {
              goto LABEL_55;
            }
          }

          if (*(_BYTE *)(v12 + 22) == 1)
          {
            int v20 = *(_DWORD *)(v12 + 16);
            goto LABEL_63;
          }

    ;
  }

  if (byte_1813C6343[v28] == byte_1813C6343[v29]) {
    goto LABEL_45;
  }
  for (uint64_t m = 0LL; ; ++m)
  {
    int v31 = *(unsigned __int8 *)(v18 + m);
    char v32 = aChar_0[m];
    if ((_DWORD)v31 != (_DWORD)v32) {
      break;
    }
    if (!*(_BYTE *)(v18 + m))
    {
      uint64_t v17 = 3;
      goto LABEL_71;
    }

uint64_t sub_1812BD41C(uint64_t a1, uint64_t a2)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  WORD2(v7) = 1;
  *((void *)&v7 + 1) = *(void *)(a1 + 24);
  v10[1] = a2;
  v10[2] = a1;
  v10[0] = &v6;
  LOBYTE(v12) = *(_BYTE *)(*((void *)&v7 + 1) + 100LL);
  (*(void (**)(void *))(a2 + 32))(v10);
  __int128 v3 = v7;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v4 = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v4;
  return HIDWORD(v11);
}

void sub_1812BD4AC(uint64_t *a1)
{
  if (!a1)
  {
    sub_1812CF36C(98123);
    sub_1812CF36C(97441);
    return;
  }

  uint64_t v2 = a1[1];
  if (!v2 || !*(void *)(v2 + 32))
  {
    sub_1812CF36C(98123);
    goto LABEL_8;
  }

  uint64_t v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    __int128 v4 = *(uint64_t **)(v3 + 8);
    if (v4) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v5 = 0LL;
    goto LABEL_12;
  }

  __int128 v4 = (uint64_t *)sub_1812D8A04((uint64_t)a1, 0);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v5 = *v4;
LABEL_12:
  uint64_t v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1813040AC(v6, v5);
  }

  else
  {
    *(void *)uint64_t v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  if (a1 && (uint64_t v2 = *((void *)a1 + 1)) != 0 && *(void *)(v2 + 32))
  {
    uint64_t v3 = *((void *)a1 + 2);
    else {
      return sub_1812D8A04((uint64_t)a1, nBytes);
    }
  }

  else
  {
    sub_1812CF36C(98123);
    return 0LL;
  }

uint64_t sub_1812BD5C0(uint64_t result, int a2, uint64_t *a3)
{
  if (!result || (uint64_t v5 = *(void *)(result + 8)) == 0 || !*(void *)(v5 + 32))
  {
    double result = sub_1812CF36C(98123);
    if (!a2) {
      return result;
    }
    __int128 v7 = 0LL;
    uint64_t v8 = *a3;
    if (*a3) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }

  uint64_t v6 = *(void *)(result + 16);
  if ((*(__int16 *)(v6 + 20) & 0x80000000) == 0)
  {
    double result = (uint64_t)sub_1812D8A04(result, 8);
    __int128 v7 = (void *)result;
    if (a2) {
      goto LABEL_6;
    }
LABEL_18:
    if (!v7) {
      return result;
    }
    goto LABEL_15;
  }

  __int128 v7 = *(void **)(v6 + 8);
  if (!a2) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v8 = *a3;
  if (*a3)
  {
LABEL_7:
    unint64_t v9 = (0x5555555555555555uLL >> *(_WORD *)(v8 + 20)) & 1;
    goto LABEL_11;
  }

uint64_t sub_1812BD68C(uint64_t result, int *a2)
{
  if (a2)
  {
    int v3 = *a2;
    if (*a2 >= 1)
    {
      uint64_t v4 = result;
      int v5 = 0;
      uint64_t v6 = a2 + 18;
      do
      {
        if ((*v6 & 0x80000000) != 0)
        {
          int v7 = *(_DWORD *)(v4 + 52);
          *(_DWORD *)(v4 + 52) = v7 + 1;
          *uint64_t v6 = v7;
          uint64_t v8 = *((void *)v6 - 3);
          if (v8)
          {
            double result = sub_1812BD68C(v4, *(void *)(v8 + 40));
            int v3 = *a2;
          }
        }

        ++v5;
        v6 += 26;
      }

      while (v5 < v3);
    }
  }

  return result;
}

uint64_t *sub_1812BD714(uint64_t *result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v7 = result;
  uint64_t v8 = *(unsigned __int8 **)(a2 + 24LL * a3 + 8);
  uint64_t v9 = *result;
  if (!v8)
  {
    if (*(_BYTE *)(v9 + 103)) {
      return result;
    }
    BOOL v10 = 0LL;
LABEL_10:
    if (*(_BYTE *)a4 == 113)
    {
      __int128 v11 = *(const void **)(a4 + 8);
      if (v11)
      {
        size_t v12 = strlen(*(const char **)(a4 + 8)) & 0x3FFFFFFF;
        if (v12)
        {
          uint64_t v13 = sub_1812F2264(*v7, v12 + 81);
          if (v13)
          {
            uint64_t v14 = v13;
            *(_OWORD *)(v13 + 48) = 0u;
            *(_OWORD *)(v13 + 64) = 0u;
            *(_OWORD *)(v13 + 16) = 0u;
            *(_OWORD *)(v13 + 32) = 0u;
            *(_OWORD *)uint64_t v13 = 0u;
            *(_BYTE *)uint64_t v13 = 113;
            *(_WORD *)(v13 + 52) = -1;
            uint64_t v15 = v13 + 80;
            *(void *)(v13 + 8) = v13 + 80;
            memcpy((void *)(v13 + 80), v11, v12);
            *(_BYTE *)(v15 + v12) = 0;
            *(_DWORD *)(v14 + 40) = 1;
            *(void *)(v14 + 16) = v10;
            *(_DWORD *)(v14 + 4) |= 0x2200u;
            BOOL v10 = (uint64_t *)v14;
          }
        }
      }
    }

    __int128 v20 = *(_OWORD *)v10;
    __int128 v23 = *((_OWORD *)v10 + 3);
    __int128 v24 = *((_OWORD *)v10 + 4);
    __int128 v21 = *((_OWORD *)v10 + 1);
    __int128 v22 = *((_OWORD *)v10 + 2);
    __int128 v16 = *(_OWORD *)(a4 + 64);
    __int128 v18 = *(_OWORD *)(a4 + 16);
    __int128 v17 = *(_OWORD *)(a4 + 32);
    *((_OWORD *)v10 + 3) = *(_OWORD *)(a4 + 48);
    *((_OWORD *)v10 + 4) = v16;
    *((_OWORD *)v10 + 1) = v18;
    *((_OWORD *)v10 + 2) = v17;
    *(_OWORD *)BOOL v10 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v22;
    *(_OWORD *)(a4 + 48) = v23;
    *(_OWORD *)(a4 + 64) = v24;
    if ((*(_BYTE *)(a4 + 7) & 1) != 0)
    {
      uint64_t v19 = *(void *)(a4 + 72);
      if (v19) {
        *(void *)(v19 + 112) = a4;
      }
    }

    if (*v7)
    {
      double result = (uint64_t *)sub_1812F2264(*v7, 0x18uLL);
      if (result)
      {
LABEL_20:
        *double result = v7[24];
        v7[24] = (uint64_t)result;
        result[1] = (uint64_t)v10;
        result[2] = (uint64_t)sub_1812899C0;
        return result;
      }
    }

    else
    {
      double result = (uint64_t *)sub_18126F0AC(24LL);
      if (result) {
        goto LABEL_20;
      }
    }

    return sub_181309110((void *)*v7, (unsigned __int8 *)v10);
  }

  double result = (uint64_t *)sub_18129C928(*result, v8, 0LL, 0LL);
  BOOL v10 = result;
  if (!*(_BYTE *)(v9 + 103))
  {
    if (a5 > 0)
    {
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      v25[0] = 0LL;
      v25[1] = sub_181321284;
      DWORD2(v27) = a5;
      if (result) {
        sub_18131C57C((uint64_t)v25, (uint64_t)result);
      }
    }

    goto LABEL_10;
  }

  if (result) {
    return sub_181309110((void *)v9, (unsigned __int8 *)result);
  }
  return result;
}

unsigned __int8 *sub_1812BD930( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  if (!a2) {
    return v8;
  }
  int v10 = *((_DWORD *)a2 + 1);
  if ((v10 & 3) != 0 && *((_DWORD *)a2 + 14) == *(_DWORD *)(a1 + 8)) {
    *((_DWORD *)a2 + 14) = *(_DWORD *)(a1 + 12);
  }
  int v11 = *a2;
  if (v11 == 179)
  {
    if (*((_DWORD *)a2 + 11) == *(_DWORD *)(a1 + 8)) {
      *((_DWORD *)a2 + 11) = *(_DWORD *)(a1 + 12);
    }
    goto LABEL_16;
  }

  if (v11 != 167 || (v10 & 0x20) != 0 || *((_DWORD *)a2 + 11) != *(_DWORD *)(a1 + 8))
  {
LABEL_16:
    *((void *)a2 + 2) = sub_1812BD930(a1, *((void *)a2 + 2));
    *((void *)v8 + 3) = sub_1812BD930(a1, *((void *)v8 + 3));
    __int128 v17 = (int *)*((void *)v8 + 4);
    if ((v8[5] & 0x10) != 0)
    {
      sub_1813298B8(a1, *((void **)v8 + 4), 1);
    }

    else if (v17 && *v17 >= 1)
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 2LL;
      do
      {
        *(void *)&v17[v19] = sub_1812BD930(a1, *(void *)&v17[v19]);
        ++v18;
        v19 += 6LL;
      }

      while (v18 < *v17);
    }

    if ((v8[7] & 1) != 0)
    {
      __int128 v20 = (void *)*((void *)v8 + 9);
      v20[9] = sub_1812BD930(a1, v20[9]);
      __int128 v21 = (int *)v20[2];
      if (v21 && *v21 >= 1)
      {
        uint64_t v22 = 0LL;
        uint64_t v23 = 2LL;
        do
        {
          *(void *)&v21[v23] = sub_1812BD930(a1, *(void *)&v21[v23]);
          ++v22;
          v23 += 6LL;
        }

        while (v22 < *v21);
      }

      __int128 v24 = (int *)v20[3];
      if (v24 && *v24 >= 1)
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = 2LL;
        do
        {
          *(void *)&v24[v26] = sub_1812BD930(a1, *(void *)&v24[v26]);
          ++v25;
          v26 += 6LL;
        }

        while (v25 < *v24);
      }
    }

    return v8;
  }

  int v12 = *((_DWORD *)a2 + 12);
  uint64_t v13 = *(unsigned __int8 **)(*(void *)(a1 + 24) + 24LL * v12 + 8);
  int v14 = *v13;
  int v15 = v14;
  if (v14 == 176) {
    int v15 = v13[2];
  }
  if (v15 == 138)
  {
    __int128 v16 = (int **)(*((void *)v13 + 4) + 32LL);
  }

  else
  {
    if (v15 != 177) {
      goto LABEL_35;
    }
    __int128 v16 = (int **)(v13 + 32);
  }

  if (**v16 < 2)
  {
LABEL_35:
    uint64_t v27 = **(void **)a1;
    if (!*(_DWORD *)(a1 + 16)) {
      goto LABEL_43;
    }
    if (v14 == 167)
    {
      int v28 = *(_DWORD *)(a1 + 12);
      if (*((_DWORD *)v13 + 11) == v28)
      {
LABEL_43:
        uint64_t v30 = sub_18129C928(v27, v13, 0LL, 0LL);
        int v31 = (unsigned __int8 *)v30;
        if (*(_BYTE *)(v27 + 103))
        {
          if (v30) {
            sub_181309110((void *)v27, (unsigned __int8 *)v30);
          }
        }

        else
        {
          if (*(_DWORD *)(a1 + 16)) {
            v30[1] |= 0x200000u;
          }
          int v32 = *((_DWORD *)v8 + 1);
          if ((v32 & 3) != 0) {
            sub_1813231A8((uint64_t)v30, *((unsigned int *)v8 + 14), v32 & 3);
          }
          sub_181309110((void *)v27, v8);
          if (*v31 == 170)
          {
            BOOL v39 = sub_18131A7C0((uint64_t)v31);
            *int v31 = -101;
            *((_DWORD *)v31 + 1) |= 0x800u;
            *((_DWORD *)v31 + 2) = v39;
          }

          uint64_t v40 = sub_181289D04(*(void *)a1, v31, v33, v34, v35, v36, v37, v38);
          int v47 = (char **)sub_181289D04( *(void *)a1,  *(unsigned __int8 **)(*(void *)(a1 + 32) + 24LL * v12 + 8),  v41,  v42,  v43,  v44,  v45,  v46);
          if ((char **)v40 != v47 || (int v49 = *v31, v49 != 113) && v49 != 167)
          {
            if (v47) {
              uint64_t v48 = *v47;
            }
            else {
              uint64_t v48 = "BINARY";
            }
            int v31 = (unsigned __int8 *)sub_1813211C8(*(uint64_t **)a1, (uint64_t)v31, v48);
          }

          *((_DWORD *)v31 + 1) &= ~0x200u;
          return v31;
        }

        return v8;
      }
    }

    else
    {
      int v28 = *(_DWORD *)(a1 + 12);
    }

    v52[0] = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    LOBYTE(v52[0]) = -77;
    v52[1] = (unint64_t)v13;
    HIDWORD(v53) = v28;
    LODWORD(v54) = -99;
    uint64_t v13 = (unsigned __int8 *)v52;
    DWORD1(v52[0]) = 0x40000;
    goto LABEL_43;
  }

  uint64_t v29 = *(void *)a1;
  if ((v13[5] & 0x10) != 0)
  {
    if (!*(_DWORD *)(v29 + 48)) {
      sub_1812DC47C( v29,  "sub-select returns %d columns - expected %d",  a3,  a4,  a5,  a6,  a7,  a8,  **(_DWORD **)(*((void *)v13 + 4) + 32LL));
    }
  }

  else
  {
    sub_1812DC47C(v29, "row value misused", a3, a4, a5, a6, a7, a8, v51);
  }

  return v8;
}

__int128 *sub_1812BDD00(uint64_t a1, __int128 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  if (!a4) {
    return a2;
  }
  if (*a4 != 167) {
    return a2;
  }
  uint64_t v5 = *((void *)a4 + 9);
  if (!v5) {
    return a2;
  }
  if (*(_BYTE *)(v5 + 63) != 1) {
    return a2;
  }
  int v7 = (uint64_t **)(v5 + 80);
  do
  {
    uint64_t v8 = *v7;
    uint64_t v9 = *v7;
    uint64_t v10 = *v9;
    int v7 = (uint64_t **)(v9 + 5);
  }

  while (v10 != a1);
  int v11 = *(unsigned int (**)(void))(*(void *)v8[2] + 144LL);
  if (!v11 || !v11()) {
    return a2;
  }
  int v12 = (const char *)*((void *)a2 + 7);
  if (v12)
  {
    size_t v13 = (strlen(v12) & 0x3FFFFFFF) + 73;
    if (a1) {
      goto LABEL_11;
    }
LABEL_15:
    int v14 = (_OWORD *)sub_18126F0AC(v13);
    if (v14) {
      goto LABEL_12;
    }
    return a2;
  }

  size_t v13 = 73LL;
  if (!a1) {
    goto LABEL_15;
  }
LABEL_11:
  int v14 = (_OWORD *)sub_1812F2264(a1, v13);
  if (!v14) {
    return a2;
  }
LABEL_12:
  bzero(v14, v13);
  __int128 v15 = a2[1];
  __int128 v16 = a2[2];
  uint64_t v17 = *((void *)a2 + 8);
  v14[3] = a2[3];
  __int128 v18 = *a2;
  v14[1] = v15;
  v14[2] = v16;
  *int v14 = v18;
  *((void *)v14 + 7) = (char *)v14 + 72;
  *((void *)v14 + 8) = v17;
  uint64_t v19 = (const char *)*((void *)a2 + 7);
  if (v19) {
    size_t v20 = (strlen(v19) & 0x3FFFFFFF) + 1;
  }
  else {
    size_t v20 = 1LL;
  }
  memcpy((char *)v14 + 72, v19, v20);
  *((void *)v14 + 3) = v23;
  *((void *)v14 + 1) = v22;
  *((_DWORD *)v14 + 1) |= 0x10u;
  return v14;
}

uint64_t sub_1812BDE64( uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v51 = 0LL;
  if (!a2 || !v8) {
    return result;
  }
  uint64_t v9 = a4;
  uint64_t v12 = result;
  uint64_t v13 = *a2;
  switch(*a2)
  {
    case 0x13u:
      uint64_t v30 = *((void *)a2 + 2);
      goto LABEL_41;
    case 0x2Bu:
    case 0x2Cu:
      uint64_t v14 = sub_18131E690(a2);
      if ((unsigned __int8 *)v14 != a2)
      {
        uint64_t v15 = v14;
LABEL_65:
        double result = sub_1812BDE64(v12, v15, a3, v9);
        goto LABEL_69;
      }

      if ((_DWORD)v13 != 44)
      {
        sub_1812BDE64(v12, *((void *)a2 + 2), a3, v9);
        uint64_t v15 = *((void *)a2 + 3);
        goto LABEL_65;
      }

      int v44 = *(_DWORD *)(v12 + 68) - 1;
      *(_DWORD *)(v12 + 68) = v44;
      sub_1812B0714(v12, *((void *)a2 + 2));
      sub_1812BDE64(v12, *((void *)a2 + 3), a3, v9);
      double result = sub_18131B3E0(v8, v44);
      int v21 = HIDWORD(v51);
      if (HIDWORD(v51)) {
        goto LABEL_67;
      }
      goto LABEL_69;
    case 0x2Du:
    case 0xABu:
      if ((_DWORD)v13 == 45) {
        uint64_t v13 = 53LL;
      }
      else {
        uint64_t v13 = 52LL;
      }
      uint64_t v9 = 128LL;
      goto LABEL_10;
    case 0x30u:
      double result = (uint64_t)sub_18131B410( (unsigned int *)result,  (uint64_t)a2,  a3,  (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1812BDE64,  a4,  a6,  a7,  a8);
      goto LABEL_69;
    case 0x31u:
      int v31 = *(_DWORD *)(result + 68);
      uint64_t v32 = (v31 - 1);
      *(_DWORD *)(result + 68) = v32;
      if ((_DWORD)a4) {
        uint64_t v33 = a3;
      }
      else {
        uint64_t v33 = v32;
      }
      sub_1812B26A4((void **)result, (uint64_t)a2, v32, v33, a5, a6, a7, a8);
      int v37 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v37)
      {
        sub_18131044C(v8, 9LL, 0LL, a3, 0LL, v34, v35, v36);
      }

      else
      {
        *(_DWORD *)(v8 + 144) = v37 + 1;
        uint64_t v38 = *(void *)(v8 + 136) + 40LL * v37;
        *(void *)uint64_t v38 = 9LL;
        *(_DWORD *)(v38 + 8) = a3;
        *(void *)(v38 + 12) = 0LL;
        *(void *)(v38 + 28) = 0LL;
        *(void *)(v38 + 20) = 0LL;
        *(_DWORD *)(v38 + 36) = 0;
      }

      double result = *(void *)(v8 + 24);
      int v47 = -v31;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
      {
        double result = sub_18131E420(result, v8, v47);
        int v21 = HIDWORD(v51);
        if (HIDWORD(v51)) {
          goto LABEL_67;
        }
      }

      else
      {
        *(_DWORD *)(*(void *)(result + 80) + 4LL * v47) = *(_DWORD *)(v8 + 144);
        int v21 = HIDWORD(v51);
        if (HIDWORD(v51)) {
          goto LABEL_67;
        }
      }

      goto LABEL_69;
    case 0x32u:
    case 0x33u:
      double result = sub_18131A8A4(result, *((unsigned __int8 **)a2 + 2), (_DWORD *)&v51 + 1);
      uint64_t v25 = result;
      if (*(_BYTE *)(*(void *)v8 + 103LL)) {
        uint64_t v26 = &byte_18C550680;
      }
      else {
        uint64_t v26 = (char *)(*(void *)(v8 + 136) + 40LL * *(int *)(v8 + 144) - 40);
      }
      if (*((_DWORD *)v26 + 3) == (_DWORD)result && *v26 == 94) {
        *((_WORD *)v26 + 1) |= 0x80u;
      }
      int v45 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v45)
      {
        *(_DWORD *)(v8 + 144) = v45 + 1;
        uint64_t v24 = *(void *)(v8 + 136) + 40LL * v45;
        *(_BYTE *)uint64_t v24 = v13;
        *(_WORD *)(v24 + 2) = 0;
        *(_DWORD *)(v24 + 4) = result;
        *(_DWORD *)(v24 + 8) = a3;
        *(_BYTE *)(v24 + 1) = 0;
        goto LABEL_52;
      }

      uint64_t v42 = v8;
      uint64_t v43 = v13;
      goto LABEL_55;
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
LABEL_10:
      __int128 v16 = (unsigned __int8 *)*((void *)a2 + 2);
      int v17 = *v16;
      if (v17 == 176) {
        int v17 = v16[2];
      }
      if (v17 == 138)
      {
        __int128 v18 = (int **)(*((void *)v16 + 4) + 32LL);
      }

      else
      {
        if (v17 != 177) {
          goto LABEL_17;
        }
        __int128 v18 = (int **)(v16 + 32);
      }

      if (**v18 <= 1)
      {
LABEL_17:
        uint64_t v19 = sub_18131A8A4(result, v16, (_DWORD *)&v51 + 1);
        uint64_t v20 = sub_18131A8A4(v12, *((unsigned __int8 **)a2 + 3), &v51);
        double result = sub_1812B0BB0( v12,  *((unsigned __int8 **)a2 + 2),  *((unsigned __int8 **)a2 + 3),  v13,  v19,  v20,  a3,  v9,  (*((_DWORD *)a2 + 1) >> 10) & 1);
        int v21 = HIDWORD(v51);
        if (!HIDWORD(v51)) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }

LABEL_69:
      int v49 = v51;
      if ((_DWORD)v51)
      {
        uint64_t v50 = *(unsigned __int8 *)(v12 + 31);
        if (v50 <= 7)
        {
          *(_BYTE *)(v12 + 31) = v50 + 1;
          *(_DWORD *)(v12 + 4 * v50 + 224) = v49;
        }
      }

      return result;
    case 0xAFu:
      int v39 = a2[2];
      uint64_t v40 = *((void *)a2 + 3);
      while (1)
      {
        int v41 = *(_DWORD *)(v40 + 4);
        if ((v41 & 0x82000) == 0) {
          break;
        }
        if ((v41 & 0x80000) != 0) {
          uint64_t v40 = *(void *)(*(void *)(v40 + 32) + 8LL);
        }
        else {
          uint64_t v40 = *(void *)(v40 + 16);
        }
      }

      uint64_t v30 = *((void *)a2 + 2);
      if ((v39 == 171) != (*(_BYTE *)(*(void *)(v40 + 8) + 4LL) != 0)) {
LABEL_41:
      }
        double result = sub_1812B0714(result, v30);
      else {
        double result = ((uint64_t (*)(void))sub_1812BDE64)();
      }
      goto LABEL_69;
    default:
      goto LABEL_19;
  }

  if (*(_BYTE *)(v63 + 197) || *((_BYTE *)a1 + 302)) {
    goto LABEL_71;
  }
  uint64_t v70 = v64(*(void *)(v63 + 536), 9LL, v62, 0LL, v50, a1[46]);
  if (v70 == 1) {
    goto LABEL_99;
  }
  if ((v70 & 0xFFFFFFFD) != 0)
  {
LABEL_103:
    int v71 = 1;
    unsigned int v72 = "authorizer malfunction";
    goto LABEL_104;
  }

  if (v70) {
    return sub_18128FF4C((void *)v9, (void *)a2);
  }
  uint64_t v62 = *(unsigned __int8 **)v33;
LABEL_71:
  if (!v62) {
    goto LABEL_126;
  }
  uint64_t v65 = *v62;
  if (!*v62)
  {
    int v66 = "sqlite_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x53)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "sqlite_";
LABEL_115:
    LODWORD(v65) = *(unsigned __int8 *)v65;
    goto LABEL_116;
  }

  uint64_t v65 = v62[1];
  if (!v62[1])
  {
    int v66 = "qlite_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x51)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "qlite_";
    goto LABEL_115;
  }

  uint64_t v65 = v62[2];
  if (!v62[2])
  {
    int v66 = "lite_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x4C)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "lite_";
    goto LABEL_115;
  }

  uint64_t v65 = v62[3];
  if (!v62[3])
  {
    int v66 = "ite_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x49)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "ite_";
    goto LABEL_115;
  }

  uint64_t v65 = v62[4];
  if (!v62[4])
  {
    int v66 = "te_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x54)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "te_";
    goto LABEL_115;
  }

  uint64_t v65 = v62[5];
  if (!v62[5])
  {
    int v66 = "e_";
    goto LABEL_116;
  }

  if ((v65 & 0xFFFFFFDF) != 0x45)
  {
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "e_";
    goto LABEL_115;
  }

  uint64_t v65 = v62[6];
  if (v62[6])
  {
    if ((_DWORD)v65 == 95) {
      goto LABEL_117;
    }
    v65 += (unint64_t)byte_1813C6343;
    int v66 = "_";
    goto LABEL_115;
  }

  int v66 = "_";
LABEL_116:
  if ((_DWORD)v65 != byte_1813C6343[*v66])
  {
LABEL_126:
    uint64_t v81 = *(_DWORD *)(v33 + 48);
    if ((v81 & 0x1000) != 0 && (*(_BYTE *)(v9 + 51) & 0x10) != 0 && !*(void *)(v9 + 592) && !*(_DWORD *)(v9 + 220))
    {
      goto LABEL_188;
    }

    if ((v81 & 0x8000) != 0) {
      goto LABEL_188;
    }
    goto LABEL_185;
  }

    sub_1812DC47C(a1, "no such collation sequence: %s", a3, (uint64_t)__s, k, a6, a7, a8, (char)v8);
    a3 = 0LL;
    *(_DWORD *)(a1 + 24) = 257;
    return a3;
  }

        sub_1812CF36C(89717);
        goto LABEL_70;
      }

      *((_BYTE *)v6 + 33) = 0;
      uint64_t v15 = *a3;
      if (*a3)
      {
        __int128 v16 = *((_WORD *)v15 + 10);
        if ((v16 & 8) == 0) {
          goto LABEL_24;
        }
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    int v11 = *((void *)v6 + 2);
    if (v7 != 1)
    {
      if ((unint64_t)(v11 - 0x10000000000000LL) > 0xFFE0000000000000LL)
      {
        *uint64_t v6 = (double)v11;
        uint64_t v19 = 0.0;
      }

      else
      {
        if (v11 <= 0) {
          __int128 v18 = -(-v11 & 0x3FFF);
        }
        else {
          __int128 v18 = (void)v6[2] & 0x3FFFLL;
        }
        *uint64_t v6 = (double)(v11 - v18);
        uint64_t v19 = (double)v18;
      }

      v6[1] = v19;
      *((_BYTE *)v6 + 32) = 1;
      uint64_t v15 = *a3;
      if (*a3)
      {
        __int128 v16 = *((_WORD *)v15 + 10);
        if ((v16 & 8) == 0)
        {
LABEL_24:
          if ((v16 & 0x24) != 0)
          {
            int v17 = (double)*(uint64_t *)v15;
          }

          else if ((v16 & 0x12) != 0)
          {
            int v17 = sub_181303DB8((uint64_t)v15);
          }

          else
          {
            int v17 = 0.0;
          }

            int v39 = 7;
            goto LABEL_131;
          }
        }

        int v78 = v18;
        int v79 = (unsigned __int8 *)v27;
        uint64_t v77 = v27;
        sub_181372A68(&v79, v17 - v21, 0, 1, &v78, &v77);
        uint64_t v30 = (void (**)(unsigned __int8 *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
          --qword_18C468B10;
          off_18C4653A8(v18);
          __int128 v18 = (unsigned __int8 *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70)
          {
LABEL_32:
            LODWORD(v19) = (_DWORD)v79 - (_DWORD)v27;
            if ((_DWORD)v79 == (_DWORD)v27)
            {
              unsigned int v57 = (void (**)(void *))&off_18C4653A8;
              if (dword_18C465380)
              {
                unsigned int v58 = v75;
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v27);
                --qword_18C468B10;
                off_18C4653A8(v27);
                BOOL v27 = (void *)xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  unsigned int v57 = (void (**)(void *))&xmmword_18C465410;
                  goto LABEL_146;
                }
              }

              else
              {
                unsigned int v58 = v75;
LABEL_146:
                (*v57)(v27);
              }

              if (v58)
              {
                uint64_t v70 = &off_18C4653A8;
                if (!dword_18C465380) {
                  goto LABEL_153;
                }
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v58);
                --qword_18C468B10;
                off_18C4653A8(v58);
                unsigned int v58 = xmmword_18C468B70;
                if ((void)xmmword_18C468B70)
                {
                  uint64_t v70 = &xmmword_18C465410;
LABEL_153:
                  (*v70)(v58);
                }
              }

              int v39 = 0;
              uint64_t v12 = v76;
              goto LABEL_155;
            }

            goto LABEL_33;
          }

          uint64_t v30 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
        }

        (*v30)(v18);
        goto LABEL_32;
      }

      if (*(void *)(a2 + 40) == *(void *)(a1 + 48))
      {
        uint64_t v12 = *(void *)(a2 + 32);
        if (*(void *)(v12 + 40))
        {
          if (*(_DWORD *)(v12 + 32)) {
            __int128 v16 = *(void *)(v12 + 40);
          }
          else {
            __int128 v16 = 0LL;
          }
          goto LABEL_26;
        }
      }

      return !*(_BYTE *)(a2 + 48)
          && *(void *)(a2 + 40) == *(void *)(a1 + 48)
          && *(_DWORD *)(*(void *)(a2 + 32) + 48LL) > 0;
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t, int *, void (__cdecl *)(void *)))(a1 + 112))(a2, v10, sqlite3_free);
  if (v14) {
    goto LABEL_46;
  }
LABEL_2:
  int v11 = (float64x2_t *)*((void *)v10 + 3);
  bzero(v11, 8LL * *v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, int *))(a1 + 64))(a2, &v47);
  if (v12) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v47 < 1;
  }
  if (!v13)
  {
    int v21 = 0LL;
    while (1)
    {
      int v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(a1 + 72))( a2,  v21,  &v50,  &v49,  &v48);
      if (v23)
      {
        uint64_t v14 = v23;
        goto LABEL_46;
      }

      int v22 = 1.0;
      if ((int)v49 < a4)
      {
        uint64_t v24 = *(void *)(a5 + 8LL * (int)v49);
        if (!v24)
        {
          sub_1812CF36C(89752);
LABEL_23:
          int v22 = 0.0;
          goto LABEL_15;
        }

        uint64_t v25 = *(_WORD *)(v24 + 20);
        if ((v25 & 8) != 0)
        {
          int v22 = *(double *)v24;
        }

        else
        {
          if ((v25 & 0x24) == 0)
          {
            if ((v25 & 0x12) != 0)
            {
              int v22 = sub_181303DB8(v24);
              goto LABEL_15;
            }

            goto LABEL_23;
          }

          int v22 = (double)*(uint64_t *)v24;
        }
      }

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  uint64_t v2 = zName;
  if (zName)
  {
    int v4 = strlen(zName);
    if (a1)
    {
      int v5 = v4;
      uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
      if (v6) {
        xmmword_18C465400(v6);
      }
      uint64_t v7 = *((void *)a1 + 22);
      if (v7)
      {
        size_t v8 = v5 & 0x3FFFFFFF;
        int v9 = *(_DWORD *)(v7 + 4);
        int v10 = 2;
        while (1)
        {
          uint64_t v11 = v10;
          uint64_t v12 = (const char *)(v7 + 4LL * v10 + 8);
          if (!strncmp(v12, v2, v8) && !v12[v8]) {
            break;
          }
          int v10 = *(_DWORD *)(v7 + 4 * v11 + 4) + v11;
          if (v10 >= v9) {
            goto LABEL_11;
          }
        }

        LODWORD(v2) = *(_DWORD *)(v7 + 4 * v11);
      }

      else
      {
LABEL_11:
        LODWORD(v2) = 0;
      }

      uint64_t v13 = *(void *)(*(void *)a1 + 24LL);
      if (v13) {
        xmmword_18C465410(v13);
      }
    }

    else
    {
      LODWORD(v2) = 0;
    }
  }

  return (int)v2;
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1)
      {
        int v6 = 25;
        *(_DWORD *)(v10 + 80) = 25;
        sub_1812FA264(v10, 25);
        return v6;
      }

      sqlite3_log(21, "API called with finalized prepared statement", a3);
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3);
    }

    return 25;
  }

  uint64_t v5 = (a2 - 1);
  int v6 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    uint64_t v7 = *((void *)a1 + 16) + (v5 << 6);
    size_t v8 = (_WORD *)(v7 + 20);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0) {
      sub_181303888((int *)v7);
    }
    else {
      *size_t v8 = 1;
    }
    *(double *)uint64_t v7 = a3;
    *size_t v8 = 8;
    uint64_t v9 = *(void *)(*(void *)a1 + 24LL);
    if (v9) {
      xmmword_18C465410(v9);
    }
    return 0;
  }

  return v6;
}

void sub_1812BE584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1812A4980( *(void *)a3,  *(void *)(a3 + 8),  *(void *)(*(void *)(*(void *)(a1 + 24) + 136LL) + 40LL * *(int *)(a1 + 32) - 24))) {
    sqlite3_result_value((sqlite3_context *)a1, *(sqlite3_value **)a3);
  }
}

int sqlite3_value_int(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1812CF36C(89717);
LABEL_5:
    LODWORD(v2) = 0;
    return v2;
  }

  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0) {
    return *(void *)a1;
  }
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *((void *)a1 + 1))
    {
      LODWORD(v2) = sub_181303DF0((uint64_t)a1);
      return v2;
    }

    goto LABEL_5;
  }

  double v3 = *(double *)a1;
  if (*(double *)a1 >= -9.22337204e18)
  {
    if (v3 <= 9.22337204e18) {
      return (uint64_t)v3;
    }
    else {
      LODWORD(v2) = -1;
    }
  }

  else
  {
    LODWORD(v2) = 0;
  }

  return v2;
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1813040AC(v2, a2);
    }

    else
    {
      *(void *)uint64_t v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }

  else
  {
    sub_1812CF36C(97431);
  }

uint64_t sub_1812BE6C4(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (*(void *)(a1 + 168)) {
    uint64_t v8 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v8 = a1;
  }
  uint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v10 = sub_1812F2264(*(void *)a1, 0x28uLL);
    if (!v10) {
      return v10;
    }
  }

  else
  {
    uint64_t v10 = sub_18126F0AC(40LL);
    if (!v10) {
      return v10;
    }
  }

  *(void *)(v10 + 32) = 0LL;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 8) = *(void *)(v8 + 184);
  *(void *)(v8 + 184) = v10;
  if (v9)
  {
    uint64_t v18 = sub_1812F2264(v9, 0x30uLL);
    if (v18) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v18 = sub_18126F0AC(48LL);
    if (v18)
    {
LABEL_10:
      __int128 v19 = 0uLL;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(void *)(v10 + 16) = v18;
      uint64_t v20 = *(void *)(v8 + 16);
      *(void *)(v18 + 40) = *(void *)(v20 + 376);
      *(void *)(v20 + 376) = v18;
      *(void *)uint64_t v10 = a2;
      *(_DWORD *)(v10 + 24) = a4;
      *(void *)(v10 + 28) = -1LL;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      memset(v83, 0, sizeof(v83));
      __int128 v84 = 0u;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      __int128 v95 = 0u;
      __int128 v96 = 0u;
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      uint64_t v97 = 0LL;
      uint64_t v21 = *(void *)(v9 + 344);
      uint64_t v87 = 0LL;
      uint64_t v88 = v21;
      *(void *)(v9 + 344) = &v80;
      uint64_t v80 = (void *)v9;
      if (*(_BYTE *)(v9 + 103))
      {
        sub_1812DC47C((uint64_t)&v80, "out of memory", (uint64_t)v12, v13, v14, v15, v16, v17, v73);
        __int128 v19 = 0uLL;
        int v22 = (uint64_t *)*((void *)&v81 + 1);
      }

      else
      {
        int v22 = 0LL;
      }

      __int128 v101 = v19;
      __int128 v100 = v19;
      __int128 v99 = v19;
      uint64_t v98 = &v80;
      *(void *)&__int128 v84 = v8;
      *((void *)&v84 + 1) = a3;
      uint64_t v23 = *a2;
      *((void *)&v94 + 1) = *a2;
      BYTE2(v87) = *((_BYTE *)a2 + 16);
      LOWORD(v87) = *(_WORD *)(a1 + 216);
      BYTE13(v82) = *(_BYTE *)(a1 + 37);
      uint64_t v24 = v22;
      if (v22)
      {
        if (!v23) {
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v25 = sub_1812DC63C((uint64_t *)&v80, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        if (!v25)
        {
          if (*(_DWORD *)(a1 + 48))
          {
            if ((void)v81) {
              sub_1812F20DC(v80, (void *)v81);
            }
          }

          else
          {
            *(void *)(a1 + 8) = v81;
            int v72 = v82;
            *(_DWORD *)(a1 + 48) = DWORD2(v83[0]);
            *(_DWORD *)(a1 + 24) = v72;
          }

          goto LABEL_72;
        }

        uint64_t v24 = (uint64_t *)v25;
        uint64_t v23 = *a2;
        if (!*a2)
        {
LABEL_30:
          int v31 = (unsigned __int8 *)a2[3];
          uint64_t v78 = v8;
          uint64_t v79 = a1;
          uint64_t v76 = (uint64_t)v24;
          uint64_t v77 = v18;
          if (v31)
          {
            uint64_t v32 = sub_18129C928(v9, v31, 0LL, 0LL);
            if (*(_BYTE *)(v9 + 103)
              || sub_1813205D4((uint64_t)&v98, (uint64_t)v32, (uint64_t)v12, v13, v14, v15, v16, v17))
            {
              int v75 = 0;
              if (!v32) {
                goto LABEL_36;
              }
              goto LABEL_34;
            }

            int v71 = --HIDWORD(v83[1]);
            sub_1812B0714((uint64_t)&v80, (unsigned __int8 **)v32, HIDWORD(v83[1]), 16LL, v14, v15, v16, v17);
            int v75 = v71;
            if (v32) {
LABEL_34:
            }
              sub_181309110((void *)v9, (unsigned __int8 *)v32);
          }

          else
          {
            int v75 = 0;
          }

uint64_t sub_1812BED80( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a5;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
    if (!*(void *)(a1 + 168) && (*(_BYTE *)(*(void *)a1 + 96LL) & 8) == 0) {
      *(_BYTE *)(a1 + 35) = 1;
    }
    uint64_t v14 = sub_1812DC63C((uint64_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }

  uint64_t v15 = *(void *)(a1 + 168);
  if (!v15) {
    uint64_t v15 = a1;
  }
  uint64_t result = *(void *)(v15 + 184);
  if (result)
  {
    while (*(uint64_t **)result != a2 || *(_DWORD *)(result + 24) != v9)
    {
      uint64_t result = *(void *)(result + 8);
      if (!result) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t result = sub_1812BE6C4(a1, a2, a3, v9);
    *(_DWORD *)(*(void *)a1 + 84LL) = -1;
    if (!result) {
      return result;
    }
  }

  if (*a2) {
    __int16 v17 = (*(_BYTE *)(*(void *)a1 + 49LL) & 0x20) == 0;
  }
  else {
    __int16 v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v18;
  uint64_t result = sub_1812B9B68((uint64_t *)v14, 48LL, a4, a6, v18, *(void *)(result + 16), 4294967292LL, a8);
  int v19 = *(_DWORD *)(v14 + 144);
  BOOL v20 = __OFSUB__(v19, 1);
  int v21 = v19 - 1;
  if (v21 < 0 == v20) {
    *(_WORD *)(*(void *)(v14 + 136) + 40LL * v21 + 2) = v17;
  }
  return result;
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v5 = *(void *)a1;
      if (*(void *)a1)
      {
        int v3 = 25;
        *(_DWORD *)(v5 + 80) = 25;
        sub_1812FA264(v5, 25);
        return v3;
      }

      sqlite3_log(21, "API called with finalized prepared statement");
    }

    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }

    return 25;
  }

  int v3 = sub_1812B2390((uint64_t)a1, a2 - 1);
  if (!v3)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    if (v4) {
      xmmword_18C465410(v4);
    }
    return 0;
  }

  return v3;
}

void sub_1812BEF54(uint64_t a1, int a2, uint64_t *a3)
{
  if (!a1)
  {
    sub_1812CF36C(97953);
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  if (!*(void *)a1)
  {
    sub_1812CF36C(97953);
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t v8 = *(unsigned __int8 **)(v7 + 8);
    uint64_t v9 = *a3;
    if (*a3) {
      goto LABEL_7;
    }
LABEL_15:
    sub_1812CF36C(91138);
LABEL_16:
    int v11 = 0;
    goto LABEL_17;
  }

  uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7) {
    goto LABEL_14;
  }
LABEL_6:
  sub_1812CF36C(97932);
  uint64_t v8 = 0LL;
  uint64_t v9 = *a3;
  if (!*a3) {
    goto LABEL_15;
  }
LABEL_7:
  __int16 v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    int v11 = *(_DWORD *)(v9 + 16);
    goto LABEL_17;
  }

  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 1) == 0)
    {
      int v11 = sub_181303970(v9, 1);
      goto LABEL_17;
    }

    goto LABEL_16;
  }

  int v11 = *(_DWORD *)(v9 + 16);
  if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
    v11 += *(_DWORD *)v9;
  }
LABEL_17:
  if (v11 > *(_DWORD *)(v6 + 168))
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      uint64_t v12 = "LIKE or GLOB pattern too complex";
LABEL_20:
      sub_181269368(*(void *)a1, v12, -1LL, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }

LABEL_65:
    sub_1812CF36C(97407);
    return;
  }

  if (a2 == 3)
  {
    uint64_t v13 = a3[2];
    if (!v13) {
      return;
    }
    int v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
    {
      if ((v14 & 1) != 0) {
        return;
      }
      uint64_t v15 = (unsigned __int8 *)sub_181303998((int *)v13, 1);
      if (!v15) {
        return;
      }
    }

    else
    {
      uint64_t v15 = *(unsigned __int8 **)(v13 + 8);
      if (!v15) {
        return;
      }
    }

    uint64_t v16 = *v15;
    if (!*v15) {
      goto LABEL_63;
    }
    int v26 = 0;
    unsigned int v27 = *v15;
    uint64_t v28 = v15;
    do
    {
      int v31 = v26;
      if (v27 < 0xC0)
      {
        unsigned int v29 = *++v28;
        unsigned int v27 = v29;
      }

      else
      {
        do
        {
          unsigned int v32 = *++v28;
          unsigned int v27 = v32;
        }

        while ((v32 & 0xC0) == 0x80);
      }

      ++v26;
      if (v27) {
        BOOL v30 = v28 + 1 == 0LL;
      }
      else {
        BOOL v30 = 1;
      }
    }

    while (!v30);
    if (v31)
    {
LABEL_63:
      if (a1)
      {
        *(_DWORD *)(a1 + 36) = 1;
        uint64_t v12 = "ESCAPE expression must be a single character";
        goto LABEL_20;
      }

      goto LABEL_65;
    }

    if (v16 >= 0xC0)
    {
      unsigned int v33 = byte_1813C6D06[(v16 - 192)];
      unsigned __int8 v34 = v15[1];
      if ((v34 & 0xC0) == 0x80)
      {
        uint64_t v35 = v15 + 2;
        do
        {
          unsigned int v33 = v34 & 0x3F | (v33 << 6);
          unsigned __int8 v36 = *v35++;
          unsigned __int8 v34 = v36;
        }

        while ((v36 & 0xC0) == 0x80);
      }

      if (v33 >> 11 == 27 || v33 < 0x80 || v33 >> 1 == 0x7FFF) {
        uint64_t v16 = 65533LL;
      }
      else {
        uint64_t v16 = v33;
      }
    }

    if ((_DWORD)v16 == *v8 || (_DWORD)v16 == v8[1])
    {
      int v39 = *(_DWORD *)v8;
      int v40 = v39;
      if ((_DWORD)v16 == BYTE1(v39)) {
        BYTE1(v40) = 0;
      }
      uint64_t v8 = (unsigned __int8 *)&v40;
    }
  }

  else
  {
    uint64_t v16 = v8[2];
  }

  uint64_t v17 = *a3;
  if (!*a3) {
    goto LABEL_38;
  }
  int v18 = *(unsigned __int16 *)(v17 + 20);
  if ((~v18 & 0x202) != 0 || *(_BYTE *)(v17 + 22) != 1)
  {
    if ((v18 & 1) == 0)
    {
      int v19 = (unsigned __int8 *)sub_181303998((int *)v17, 1);
      uint64_t v20 = a3[1];
      if (!v20) {
        return;
      }
      goto LABEL_39;
    }

      ++v44;
    }

    if (*v44) {
      goto LABEL_65;
    }
    if (!v43) {
      goto LABEL_56;
    }
    qword_18C468528[9 * jj + 2] = v43[2];
    int v41 = v43 + 2;
LABEL_57:
    *int v41 = v38;
  }

  for (muint64_t m = 0LL; mm != 101; ++mm)
  {
    uint64_t v50 = (char *)&qword_18C466050[9 * mm];
    uint64_t v51 = (char *)*((void *)v50 + 7);
    if (v51) {
      int v52 = strlen(*((const char **)v50 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v52 = 0;
    }
    __int128 v53 = (void *)&xmmword_18C468BD0 + (v52 + *v51) % 23;
    __int128 v54 = (void *)*v53;
    if (!*v53)
    {
LABEL_74:
      uint64_t v49 = (char *)&qword_18C466050[9 * mm];
      *((void *)v49 + 2) = 0LL;
      *((void *)v49 + 8) = v54;
      goto LABEL_75;
    }

    uint64_t v55 = (void *)*v53;
LABEL_81:
    uint64_t v56 = (_BYTE *)v55[7];
    for (nuint64_t n = (unsigned __int8 *)*((void *)v50 + 7); ; ++nn)
    {
      uint64_t v58 = *v56;
      uint64_t v59 = *nn;
      if ((_DWORD)v58 == (_DWORD)v59) {
        break;
      }
      if (byte_1813C6343[v58] != byte_1813C6343[v59])
      {
        uint64_t v55 = (void *)v55[8];
        if (v55) {
          goto LABEL_81;
        }
        goto LABEL_74;
      }

              int v41 = &qword_18C550660;
LABEL_66:
              int v52 = v41[2];
              if (v52)
              {
                if ((*(_WORD *)(v52 + 17) & 0x80) != 0) {
                  *((_WORD *)v18 + 7) |= 0x400u;
                }
                __int128 v53 = strlen((const char *)v36);
                uint64_t v60 = v53;
                if ((v53 & 0x3FFFFFFF) != 0)
                {
                  int v61 = v53 & 0x3FFFFFFF;
                  while (v61-- > 1)
                  {
                    uint64_t v63 = v36[v61];
                  }

                  LOBYTE(v61) = 0;
                  LODWORD(v63) = *v36;
LABEL_74:
                  if ((_DWORD)v63 == 58) {
                    uint64_t v60 = v61;
                  }
                }

                ++__buf;
                unsigned __int8 v36 = (unsigned __int8 *)sub_18127F588(v7, "%.*z:%u", v54, v55, v56, v57, v58, v59, v60);
                int v64 = *(void *)a1;
                if (*(_DWORD *)(*(void *)a1 + 424LL))
                {
                  ++a1[12];
                  a1[6] = 9;
                }

                int v65 = *(unsigned int (**)(void))(v64 + 544);
                if (v65)
                {
                  uint64_t v66 = a1[36] + 1;
                  a1[36] = v66;
                  if (v66 >= *(_DWORD *)(v64 + 560))
                  {
                    if (v65(*(void *)(v64 + 552)))
                    {
                      ++a1[12];
                      a1[6] = 9;
                    }

                    a1[36] = 0;
                  }
                }

                if (__buf >= 4)
                {
                  sqlite3_initialize();
                  arc4random_buf(&__buf, 4uLL);
                }

                if (v36) {
                  continue;
                }
LABEL_45:
                unsigned __int8 v36 = 0LL;
                uint64_t v38 = 0;
                uint64_t *v18 = 0LL;
                LOBYTE(v39) = 1;
              }

              else
              {
                uint64_t *v18 = v36;
                int v39 = *v36;
                if (*v36)
                {
                  uint64_t v38 = 0;
                  uint64_t v67 = 1LL;
                  do
                  {
                    v38 += byte_1813C6343[v39];
                    int v39 = v36[v67++];
                  }

                  while (v39);
                }

                else
                {
                  uint64_t v38 = 0;
                }
              }

              break;
            }

            uint64_t v20 = a2;
            *((_BYTE *)v18 + 11) = v38;
            if ((a2[6 * v19 + 6] & 0x10000) != 0) {
              *((_WORD *)v18 + 7) |= 0x400u;
            }
            if ((v39 & 1) == 0)
            {
              uint64_t v68 = sub_181268E88((uint64_t)&v80, v36, v78);
              uint64_t v20 = a2;
              if (v68 == v78 && !*(_BYTE *)(v7 + 103) && !*(_BYTE *)(v7 + 104))
              {
                *(_BYTE *)(v7 + 103) = 1;
                ++*(_DWORD *)(v7 + 432);
                *(_WORD *)(v7 + 436) = 0;
                int v69 = *(void *)(v7 + 344);
                if (v69)
                {
                  sub_1812DC47C(v69, "out of memory", v9, v10, v11, v12, v13, v14, v73);
                  uint64_t v20 = a2;
                  for (uint64_t k = *(void *)(v7 + 344); ; ++*(_DWORD *)(k + 48))
                  {
                    *(_DWORD *)(k + 24) = 7;
                    uint64_t k = *(void *)(k + 256);
                    if (!k) {
                      break;
                    }
                  }
                }
              }
            }

            ++v19;
            v18 += 2;
            uint64_t v17 = a1 + 12;
            if (v19 == v37) {
              goto LABEL_110;
            }
            goto LABEL_11;
          }
        }
      }
    }
  }

  LODWORD(v37) = v19;
LABEL_110:
  uint64_t v5 = v75;
  uint64_t v15 = v74;
LABEL_111:
  uint64_t result = sub_18130D1AC((uint64_t)&v80);
  if (*v17)
  {
    if ((_DWORD)v37)
    {
      int v37 = v37;
      int v72 = (void **)v15;
      do
      {
        if (*v72) {
          sub_1812F20DC((void *)v7, *v72);
        }
        v72 += 2;
        --v37;
      }

      while (v37);
    }

    else if (!v15)
    {
LABEL_119:
      *a4 = 0LL;
      *uint64_t v5 = 0;
      return result;
    }

    uint64_t result = (uint64_t)sub_1812F20DC((void *)v7, v15);
    goto LABEL_119;
  }

  return result;
}

  sub_1812B9B68((uint64_t *)v14, 151LL, a3, 0LL, 0LL, *(void *)a2, 0LL, v35);
  uint64_t result = a1[2];
  int v52 = (**(_DWORD **)(*(void *)(*a1 + 32) + 32LL * (int)a3 + 24) + 1);
  __int128 v53 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v53)
  {
    uint64_t result = sub_18131044C(result, 100LL, a3, 1LL, v52, v48, v49, v50);
  }

  else
  {
    *(_DWORD *)(result + 144) = v53 + 1;
    __int128 v54 = *(void *)(result + 136) + 40LL * v53;
    *(_DWORD *)__int128 v54 = 100;
    *(_DWORD *)(v54 + 4) = a3;
    *(_DWORD *)(v54 + 8) = 1;
    *(_DWORD *)(v54 + 12) = v52;
    *(void *)(v54 + 24) = 0LL;
    *(void *)(v54 + 32) = 0LL;
    *(void *)(v54 + 16) = 0LL;
  }

  uint64_t v55 = *(void *)(*(void *)(v12 + 32) + 32LL * (int)a3 + 24);
  uint64_t v56 = *(_WORD *)(v55 + 114);
  if ((v56 & 2) != 0)
  {
    uint64_t v57 = *(void **)(v55 + 16);
    if (v57)
    {
      do
      {
        uint64_t v58 = v57[2];
        if (*(_BYTE *)(v58 + 63) == 2) {
          uint64_t result = (uint64_t)sub_181311D1C((void *)v12, v58);
        }
        uint64_t v57 = (void *)*v57;
      }

      while (v57);
      uint64_t v55 = *(void *)(*(void *)(v12 + 32) + 32 * v20 + 24);
      uint64_t v56 = *(_WORD *)(v55 + 114);
    }

    *(_WORD *)(v55 + 114) = v56 & 0xFFFD;
  }

  return result;
}

    uint64_t v25 = "another row available";
LABEL_70:
    sub_1812D7A8C((uint64_t)a1, v25, -1, 1u, 0LL);
    return;
  }

  sub_181303888((int *)v22);
  int v21 = v31;
  int v23 = *(_WORD *)(*(void *)a1 + 20LL);
  if ((_BYTE)v31) {
    BOOL v24 = v31;
  }
  else {
    BOOL v24 = -1;
  }
  a1[9] = v24;
  if ((v23 & 1) != 0)
  {
    if (v21 != 100) {
      goto LABEL_62;
    }
    goto LABEL_65;
  }

                  v27 |= 2u;
                  continue;
                case 0x78:
                  BOOL v30 = (unsigned __int8 *)(v4 + (v12 + 1));
                  if ((byte_1813C6558[*v30] & 8) == 0 || (byte_1813C6558[v30[1]] & 8) == 0) {
                    goto LABEL_33;
                  }
                  goto LABEL_80;
                default:
                  if (*(unsigned __int8 *)(v4 + v12) != 226
                    || *(unsigned __int8 *)(v4 + (v12 + 1)) != 128
                    || (*(_BYTE *)(v4 + (v12 + 2)) & 0xFE) != 0xA8)
                  {
                    goto LABEL_33;
                  }

            uint64_t v16 = v32;
            if (!(_DWORD)v32)
            {
              __int128 v89 = 0LL;
              uint64_t v16 = sub_1813636A8((uint64_t *)v5, 33, (sqlite3_stmt **)&v89, 0LL);
              if (!(_DWORD)v16)
              {
                int v37 = (uint64_t *)v89;
                if (!sub_1812B2390((uint64_t)v89, 0))
                {
                  uint64_t v38 = v37[16];
                  if ((*(_WORD *)(v38 + 20) & 0x9000) != 0)
                  {
                    sub_1813040AC(v38, v33);
                  }

                  else
                  {
                    *(void *)uint64_t v38 = v33;
                    *(_WORD *)(v38 + 20) = 4;
                  }

                  int v44 = *(void *)(*v37 + 24);
                  if (v44) {
                    xmmword_18C465410(v44);
                  }
                }

                uint64_t v45 = v15;
                uint64_t v46 = v95;
                if ((v95 & 0x80000000) != 0)
                {
                  sub_1812CF36C(98740);
                }

                else
                {
                  uint64_t v47 = (char *)pStmt;
                  if (!sub_1812B2390((uint64_t)v37, 1u))
                  {
                    if (v47)
                    {
                      uint64_t v48 = sub_181269368(v37[16] + 64, v47, v46, 0, 0LL);
                      if (v48)
                      {
                        uint64_t v49 = v48;
                        uint64_t v50 = *v37;
                        *(_DWORD *)(v50 + 80) = v49;
                        sub_1812FA264(v50, v49);
                        sub_1813037C4(*v37, v49);
                      }
                    }

                    uint64_t v51 = *(void *)(*v37 + 24);
                    if (v51) {
                      xmmword_18C465410(v51);
                    }
                  }
                }

                if (!sub_1812B2390((uint64_t)v37, 2u))
                {
                  int v52 = v37[16];
                  if ((*(_WORD *)(v52 + 148) & 0x9000) != 0)
                  {
                    sub_1813040AC(v52 + 128, a2);
                  }

                  else
                  {
                    *(void *)(v52 + 128) = a2;
                    *(_WORD *)(v52 + 148) = 4;
                  }

                  __int128 v53 = *(void *)(*v37 + 24);
                  if (v53) {
                    xmmword_18C465410(v53);
                  }
                }

                if (!sub_1812B2390((uint64_t)v37, 3u))
                {
                  __int128 v54 = v37[16];
                  if ((*(_WORD *)(v54 + 212) & 0x9000) != 0)
                  {
                    sub_1813040AC(v54 + 192, v45);
                  }

                  else
                  {
                    *(void *)(v54 + 192) = v45;
                    *(_WORD *)(v54 + 212) = 4;
                  }

                  uint64_t v55 = *(void *)(*v37 + 24);
                  if (v55) {
                    xmmword_18C465410(v55);
                  }
                }

                sqlite3_step((sqlite3_stmt *)v37);
                uint64_t v16 = sqlite3_reset((sqlite3_stmt *)v37);
                if (!sub_1812B2390((uint64_t)v37, 1u))
                {
                  uint64_t v56 = *(void *)(*v37 + 24);
                  if (v56) {
                    xmmword_18C465410(v56);
                  }
                }
              }
            }
          }

          break;
        }
      }
    }

    uint64_t v17 = pStmt;
    if (pStmt)
    {
      int v18 = (void (**)(sqlite3_stmt *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_18;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v17);
      --qword_18C468B10;
      off_18C4653A8(v17);
      uint64_t v17 = (sqlite3_stmt *)xmmword_18C468B70;
      uint64_t v5 = a1;
      if ((void)xmmword_18C468B70)
      {
        int v18 = (void (**)(sqlite3_stmt *))&xmmword_18C465410;
LABEL_18:
        (*v18)(v17);
      }
    }

    int v19 = v92;
    if (!v92) {
      goto LABEL_26;
    }
    uint64_t v20 = (void (**)(sqlite3_stmt *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_25;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v19);
    --qword_18C468B10;
    off_18C4653A8(v19);
    int v19 = (sqlite3_stmt *)xmmword_18C468B70;
    uint64_t v5 = a1;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v20 = (void (**)(sqlite3_stmt *))&xmmword_18C465410;
LABEL_25:
      (*v20)(v19);
    }

        uint64_t v49 = v13[v48 + 1];
        uint64_t v50 = (((v49 - 97) >> 1) | (((_BYTE)v49 - 97) << 7));
        int v23 = v50 > 0xA;
        uint64_t v51 = (1 << v50) & 0x495;
        if (!v23 && v51 != 0) {
          goto LABEL_70;
        }
        if (v49 != 121) {
          uint64_t v45 = 1;
        }
        if ((v45 & 1) == 0)
        {
LABEL_70:
          __int128 v53 = v48 + 2LL;
          __int128 v54 = &v13[v53];
          while (1)
          {
            uint64_t v55 = *v54++;
            uint64_t v56 = (((v55 - 97) >> 1) | ((v55 - 97) << 7));
            int v23 = v56 > 0xA;
            uint64_t v57 = (1 << v56) & 0x495;
            if (v23 || v57 == 0) {
              break;
            }
            LODWORD(v53) = v53 + 1;
          }
        }

        *(_WORD *)&v13[v42] = 25957;
        uint64_t v8 = (v8 - 1);
        goto LABEL_19;
      }
    }

    if (*(_WORD *)&v13[v16] != 25701) {
      goto LABEL_19;
    }
    int v65 = 0LL;
    while (1)
    {
      uint64_t v66 = v13[v65];
      uint64_t v67 = (((v66 - 97) >> 1) | (((_BYTE)v66 - 97) << 7));
      int v23 = v67 > 0xA;
      uint64_t v68 = (1 << v67) & 0x495;
      int v69 = v23 || v68 == 0;
      if (!v69 || v65 && v66 == 121) {
        break;
      }
      if (v16 == ++v65) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v16 = (v8 - 3);
    if (*(_WORD *)&v13[v16] != 28265 || v13[v16 + 2] != 103) {
      goto LABEL_19;
    }
    uint64_t v60 = 0LL;
    while (1)
    {
      int v61 = v13[v60];
      uint64_t v62 = (((v61 - 97) >> 1) | (((_BYTE)v61 - 97) << 7));
      int v23 = v62 > 0xA;
      uint64_t v63 = (1 << v62) & 0x495;
      int v64 = v23 || v63 == 0;
      if (!v64 || v60 && v61 == 121) {
        break;
      }
      if (v16 == ++v60) {
        goto LABEL_19;
      }
    }
  }

  int v70 = &v13[(int)v16];
  char v73 = (char)*(v70 - 2);
  int v72 = v70 - 2;
  int v71 = v73;
  if (v73 == 105)
  {
    if ((int)v16 >= 3 && *(_WORD *)v72 == 31337)
    {
      uint64_t v74 = "ize";
      goto LABEL_367;
    }
  }

  else if (v71 == 98)
  {
    if ((int)v16 >= 3 && *(_WORD *)v72 == 27746)
    {
      uint64_t v74 = "ble";
      goto LABEL_367;
    }
  }

  else if (v71 == 97 && (int)v16 >= 3 && *(_WORD *)v72 == 29793)
  {
    uint64_t v74 = "ate";
LABEL_367:
    *(_WORD *)int v72 = *(_WORD *)v74;
    v72[2] = v74[2];
    uint64_t v8 = (v16 + 1);
    goto LABEL_19;
  }

  uint64_t v8 = (int)v16 - 1LL;
  uint64_t v150 = v13[v8];
  uint64_t v151 = (((v150 - 97) >> 1) | (((_BYTE)v150 - 97) << 7));
  int v23 = v151 > 0xA;
  uint64_t v152 = (1 << v151) & 0x495;
  uint64_t v153 = v23 || v152 == 0;
  if (!v153 || (v150 - 108) <= 0xE && ((1 << (v150 - 108)) & 0x4081) != 0 || v150 != v71)
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    uint64_t v156 = v13;
    uint64_t v157 = v16;
    do
    {
      uint64_t v161 = *v156++;
      uint64_t v160 = v161;
      uint64_t v162 = ((v161 - 97) >> 1) | (((_BYTE)v161 - 97) << 7);
      if (v162 < 0xBu && ((0x495u >> v162) & 1) != 0)
      {
        uint64_t v159 = 1;
      }

      else
      {
        if (v154) {
          uint64_t v158 = v160 == 121;
        }
        else {
          uint64_t v158 = 0;
        }
        uint64_t v159 = v158;
      }

      uint64_t v154 = v159 ^ 1;
      uint64_t v155 = v154 | (2 * v155);
      --v157;
    }

    while (v157);
    if ((v155 & 7) == 5)
    {
      uint64_t v8 = (v16 + 1);
      v13[(int)v16] = 101;
    }

    else
    {
LABEL_276:
      uint64_t v8 = v16;
    }
  }

uint64_t sub_1812BF304(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v103 = a1;
  if (!a1 || (uint64_t v4 = a2) == 0LL)
  {
    sub_1812CF36C(135666);
    return 1LL;
  }

  uint64_t v7 = 0LL;
  int v8 = a3[1];
  int v9 = *a3;
  int v10 = a3[3];
  while (1)
  {
    int v12 = (char)*a1;
    int v11 = a1 + 1;
    unsigned int v13 = v12;
    int v14 = v11;
    uint64_t v103 = v11;
    if ((v12 & 0x80000000) == 0) {
      break;
    }
    if (v13 < 0xC0) {
      goto LABEL_14;
    }
    unsigned int v13 = byte_1813C6D06[v13 - 192];
    unsigned __int8 v15 = *v11;
    if ((*v11 & 0xC0) == 0x80)
    {
      do
      {
        unsigned __int8 v16 = *++v14;
        unsigned int v13 = v15 & 0x3F | (v13 << 6);
        unsigned __int8 v15 = v16;
      }

      while ((v16 & 0xC0) == 0x80);
      uint64_t v103 = v14;
    }

    unsigned int v17 = 65533;
    if (v13 >> 1 != 0x7FFF && v13 >= 0x80 && (v13 & 0xFFFFF800) != 0xD800) {
      goto LABEL_14;
    }
LABEL_16:
    if (v17 == (_DWORD)a4)
    {
      if (a3[2])
      {
        unsigned int v19 = *(unsigned __int8 *)v4++;
        unsigned int v18 = v19;
        unsigned int v20 = v19 - 192;
        if (v19 < 0xC0)
        {
          if (!v18) {
            return 1LL;
          }
        }

        else
        {
          unsigned int v18 = byte_1813C6D06[v20];
          char v21 = *v4;
          if ((*v4 & 0xC0) == 0x80)
          {
            do
            {
              char v22 = *++v4;
              unsigned int v18 = v21 & 0x3F | (v18 << 6);
              char v21 = v22;
            }

            while ((v22 & 0xC0) == 0x80);
          }

          if (v18 >> 11 == 27 || v18 < 0x80 || v18 >> 1 == 0x7FFF) {
            unsigned int v18 = 65533;
          }
        }

        a1 = v14 + 1;
        uint64_t v103 = v14 + 1;
        unsigned int v25 = *v14;
        if (v25 >= 0xC0)
        {
          unsigned int v26 = byte_1813C6D06[v25 - 192];
          unsigned __int8 v27 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v28 = *++a1;
              unsigned int v26 = v27 & 0x3F | (v26 << 6);
              unsigned __int8 v27 = v28;
            }

            while ((v28 & 0xC0) == 0x80);
            uint64_t v103 = a1;
          }

          int v29 = 0;
          int v30 = 0;
          if (v26 >> 11 == 27 || v26 < 0x80 || v26 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
          else {
            unsigned int v25 = v26;
          }
          goto LABEL_76;
        }

        if (v25 == 94)
        {
          a1 = v14 + 2;
          uint64_t v103 = v14 + 2;
          unsigned int v25 = v14[1];
          if (v25 >= 0xC0)
          {
            unsigned int v33 = byte_1813C6D06[v25 - 192];
            unsigned __int8 v34 = *a1;
            if ((*a1 & 0xC0) == 0x80)
            {
              do
              {
                unsigned __int8 v35 = *++a1;
                unsigned int v33 = v34 & 0x3F | (v33 << 6);
                unsigned __int8 v34 = v35;
              }

              while ((v35 & 0xC0) == 0x80);
              uint64_t v103 = a1;
            }

            int v30 = 0;
            if (v33 >> 11 == 27 || v33 < 0x80 || v33 >> 1 == 0x7FFF) {
              unsigned int v25 = 65533;
            }
            else {
              unsigned int v25 = v33;
            }
            int v29 = 1;
            goto LABEL_76;
          }

          int v29 = 1;
          if (v25 != 93)
          {
LABEL_75:
            int v30 = 0;
            goto LABEL_76;
          }
        }

        else
        {
          int v29 = 0;
          if (v25 != 93) {
            goto LABEL_75;
          }
        }

        int v30 = v18 == 93;
        uint64_t v38 = a1 + 1;
        uint64_t v103 = a1 + 1;
        unsigned int v25 = *a1;
        if (v25 >= 0xC0)
        {
          unsigned int v39 = byte_1813C6D06[v25 - 192];
          unsigned __int8 v40 = *v38;
          if ((*v38 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v41 = *++v38;
              unsigned int v39 = v40 & 0x3F | (v39 << 6);
              unsigned __int8 v40 = v41;
            }

            while ((v41 & 0xC0) == 0x80);
            uint64_t v103 = v38;
          }

          if (v39 >> 11 == 27 || v39 < 0x80 || v39 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
          else {
            unsigned int v25 = v39;
          }
        }

        a1 = v38;
LABEL_76:
        unsigned int v44 = 0;
LABEL_85:
        switch(v25)
        {
          case 0x2Du:
            unsigned int v47 = *a1;
            if (v47 == 93 || v44 == 0 || v47 == 0) {
              goto LABEL_97;
            }
            ++a1;
            if (v47 >= 0xC0)
            {
              unsigned int v54 = byte_1813C6D06[v47 - 192];
              unsigned __int8 v55 = *a1;
              if ((*a1 & 0xC0) == 0x80)
              {
                do
                {
                  unsigned __int8 v56 = *++a1;
                  unsigned int v54 = v55 & 0x3F | (v54 << 6);
                  unsigned __int8 v55 = v56;
                }

                while ((v56 & 0xC0) == 0x80);
              }

              if (v54 >> 11 == 27 || v54 < 0x80 || v54 >> 1 == 0x7FFF) {
                unsigned int v47 = 65533;
              }
              else {
                unsigned int v47 = v54;
              }
            }

            BOOL v59 = v18 <= v47 && v18 >= v44;
            unsigned int v44 = 0;
            if (v59) {
              int v30 = 1;
            }
            break;
          case 0u:
            return 1LL;
          case 0x5Du:
            uint64_t v103 = a1;
            uint64_t v90 = 1LL;
            if (v30 == v29) {
              return v90;
            }
            continue;
          default:
LABEL_97:
            if (v18 == v25) {
              int v30 = 1;
            }
            unsigned int v44 = v25;
            break;
        }

        unsigned int v50 = *a1++;
        unsigned int v25 = v50;
        unsigned int v51 = v50 - 192;
        if (v50 >= 0xC0)
        {
          unsigned int v25 = byte_1813C6D06[v51];
          unsigned __int8 v52 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v53 = *++a1;
              unsigned int v25 = v52 & 0x3F | (v25 << 6);
              unsigned __int8 v52 = v53;
            }

            while ((v53 & 0xC0) == 0x80);
          }

          if (v25 >> 11 == 27 || v25 < 0x80 || v25 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
        }

        goto LABEL_85;
      }

      a1 = v14 + 1;
      uint64_t v103 = v14 + 1;
      unsigned int v17 = *v14;
      if (v17 < 0xC0)
      {
        uint64_t v7 = v14 + 1;
        if (!*v14) {
          return 1LL;
        }
      }

      else
      {
        unsigned int v17 = byte_1813C6D06[v17 - 192];
        unsigned __int8 v60 = *a1;
        if ((*a1 & 0xC0) == 0x80)
        {
          do
          {
            unsigned __int8 v61 = *++a1;
            unsigned int v17 = v60 & 0x3F | (v17 << 6);
            unsigned __int8 v60 = v61;
          }

          while ((v61 & 0xC0) == 0x80);
          uint64_t v103 = a1;
        }

        if (v17 >> 11 == 27 || v17 < 0x80 || v17 >> 1 == 0x7FFF) {
          unsigned int v17 = 65533;
        }
        uint64_t v7 = a1;
      }
    }

    else
    {
      a1 = v14;
    }

    unsigned int v65 = *(unsigned __int8 *)v4++;
    unsigned int v64 = v65;
    unsigned int v66 = v65 - 192;
    if (v65 >= 0xC0)
    {
      unsigned int v64 = byte_1813C6D06[v66];
      char v67 = *v4;
      if ((*v4 & 0xC0) == 0x80)
      {
        do
        {
          char v68 = *++v4;
          unsigned int v64 = v67 & 0x3F | (v64 << 6);
          char v67 = v68;
        }

        while ((v68 & 0xC0) == 0x80);
      }

      if (v64 >> 11 == 27 || v64 < 0x80 || v64 >> 1 == 0x7FFF) {
        unsigned int v64 = 65533;
      }
    }

    if (v17 != v64
      && (!v10 || (v64 | v17) > 0x7F || byte_1813C6343[v17] != byte_1813C6343[v64]))
    {
      if (v17 != v8) {
        return 1LL;
      }
      uint64_t v90 = 1LL;
      if (!v64 || a1 == v7) {
        return v90;
      }
    }
  }

  if (!v13) {
    return *v4 != 0;
  }
LABEL_14:
  if (v13 != v9)
  {
    unsigned int v17 = v13;
    goto LABEL_16;
  }

  while (1)
  {
    unsigned int v73 = *v14++;
    unsigned int v72 = v73;
    uint64_t v103 = v14;
    unsigned int v74 = v73 - 192;
    if (v73 >= 0xC0)
    {
      unsigned int v75 = byte_1813C6D06[v74];
      unsigned __int8 v76 = *v14;
      if ((*v14 & 0xC0) == 0x80)
      {
        do
        {
          unsigned __int8 v77 = *++v14;
          unsigned int v75 = v76 & 0x3F | (v75 << 6);
          unsigned __int8 v76 = v77;
        }

        while ((v77 & 0xC0) == 0x80);
        uint64_t v103 = v14;
      }

      if (v75 >> 11 == 27 || v75 < 0x80 || v75 >> 1 == 0x7FFF) {
        unsigned int v72 = 65533;
      }
      else {
        unsigned int v72 = v75;
      }
    }

    BOOL v80 = v8 && v72 == v8;
    BOOL v81 = v80;
    if (v72 != v9 && !v81) {
      break;
    }
    if (v72 == v8)
    {
      unsigned int v84 = *(unsigned __int8 *)v4++;
      unsigned int v83 = v84;
      if (v84 < 0xC0)
      {
        uint64_t v90 = 2LL;
        if (!v83) {
          return v90;
        }
      }

      else
      {
        for (char i = *v4; (i & 0xC0) == 0x80; char i = v86)
          char v86 = *++v4;
      }
    }
  }

  if (!v72) {
    return 0LL;
  }
  if (v72 == (_DWORD)a4)
  {
    if (a3[2])
    {
      if (*v4)
      {
        uint64_t v87 = v14 - 1;
        while (1)
        {
          uint64_t v88 = sub_1812BF304(v87, v4, a3, a4);
          if ((_DWORD)v88 != 1) {
            break;
          }
          if (*(unsigned __int8 *)v4 < 0xC0u)
          {
            ++v4;
          }

          else
          {
            do
              char v89 = *++v4;
            while ((v89 & 0xC0) == 0x80);
          }

          uint64_t v90 = 2LL;
          if (!*v4) {
            return v90;
          }
        }

        return v88;
      }

      return 2LL;
    }

    unsigned int v72 = sub_181311DCC(&v103);
    if (!v72) {
      return 2LL;
    }
  }

  if (v72 < 0x80)
  {
    if (v10)
    {
      uint64_t v91 = v72;
      LOBYTE(v72) = v72 & (~byte_1813C6558[v72] | 0xDF);
      unsigned __int8 v92 = byte_1813C6343[v91];
      __charset[2] = 0;
    }

    else
    {
      unsigned __int8 v92 = 0;
    }

    __charset[0] = v72;
    __charset[1] = v92;
    __int128 v100 = v103;
    while (1)
    {
      __int128 v101 = &v4[strcspn(v4, __charset)];
      if (!*v101) {
        break;
      }
      uint64_t v4 = v101 + 1;
      uint64_t v88 = sub_1812BF304(v100, v101 + 1, a3, a4);
      if ((_DWORD)v88 != 1) {
        return v88;
      }
    }

    return 2LL;
  }

  __int128 v93 = v103;
  while (1)
  {
    int v94 = *v4++;
    unsigned int v95 = v94;
    if (v94 < 0)
    {
      if (v95 >= 0xC0)
      {
        unsigned int v95 = byte_1813C6D06[v95 - 192];
        char v96 = *v4;
        if ((*v4 & 0xC0) == 0x80)
        {
          do
          {
            char v97 = *++v4;
            unsigned int v95 = v96 & 0x3F | (v95 << 6);
            char v96 = v97;
          }

          while ((v97 & 0xC0) == 0x80);
        }

        if (v95 >> 11 == 27 || v95 < 0x80 || v95 >> 1 == 0x7FFF) {
          unsigned int v95 = 65533;
        }
      }
    }

    else if (!v95)
    {
      return 2LL;
    }

    if (v95 == v72)
    {
      uint64_t v90 = sub_1812BF304(v93, v4, a3, a4);
      if ((_DWORD)v90 != 1) {
        break;
      }
    }
  }

  return v90;
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  if (n < 0) {
    return sub_1812CF36C(98740);
  }
  else {
    return sub_1812B2220((uint64_t *)a1, a2, (char *)a3, n, (uint64_t (*)(uint64_t))a5, 0);
  }
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  if (!pDb)
  {
    uint64_t v4 = "NULL";
    goto LABEL_11;
  }

  int v3 = *((unsigned __int8 *)pDb + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    int v6 = 99162;
    goto LABEL_12;
  }

  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_11;
    }

    goto LABEL_5;
  }

  if (pStmt && *(sqlite3 **)pStmt != pDb)
  {
    int v6 = 99167;
LABEL_12:
    sub_1812CF36C(v6);
    return 0LL;
  }

  uint64_t v9 = *((void *)pDb + 3);
  if (v9)
  {
    xmmword_18C465400(v9);
    uint64_t v10 = *((void *)pDb + 3);
    int v11 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt) {
      int v11 = (sqlite3_stmt **)((char *)pStmt + 16);
    }
    uint64_t v7 = *v11;
    if (v10) {
      xmmword_18C465410(v10);
    }
  }

  else
  {
    int v12 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt) {
      int v12 = (sqlite3_stmt **)((char *)pStmt + 16);
    }
    return *v12;
  }

  return v7;
}

int sqlite3_close(sqlite3 *a1)
{
  return sub_1812E03C8((uint64_t)a1, 0);
}

uint64_t sub_1812BFBE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1812F2A64(a1);
  sub_1812F3970(a1, 0, 0);
  int v3 = *(dispatch_object_s **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 152) = 0LL;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v3);
    }
  }

  if (qword_18C468B90) {
    xmmword_18C465400(qword_18C468B90);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4) {
    xmmword_18C465400(v4);
  }
  if (*(_DWORD *)(v2 + 28))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(v6 + 8) = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = v6;
    *(_DWORD *)(a1 + 24) = -1;
    *(void *)(a1 + 48) = 0LL;
  }

  uint64_t v7 = *(void *)(v2 + 16);
  if (v7) {
    xmmword_18C465410(v7);
  }
  sub_1812F2B48(a1);
  sub_1812B963C(a1);
  if (qword_18C468B90) {
    xmmword_18C465410(qword_18C468B90);
  }
  return 0LL;
}

uint64_t sub_1812BFCC8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  BOOL v2 = __OFSUB__(v1--, 1);
  *(_DWORD *)(result + 32) = v1;
  if (!((v1 < 0) ^ v2 | (v1 == 0))) {
    return result;
  }
  uint64_t v3 = result;
  sub_18136017C(result);
  uint64_t v4 = &off_18C4653A8;
  if (!dword_18C465380) {
    return (*v4)(v3);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v3);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v3);
  uint64_t v3 = xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v4 = &xmmword_18C465410;
    return (*v4)(v3);
  }

  return result;
}

uint64_t sub_1812BFD8C(uint64_t a1, unsigned int a2, unsigned int a3, char *a4, int a5)
{
  uint64_t v5 = *(void *)(a1 + 136);
  if (*(unsigned __int16 *)(a1 + 86) >= *(unsigned __int16 *)(v5 + 24))
  {
    uint64_t v14 = 81902LL;
    return sub_1812FD54C(v14, v5);
  }

  int v11 = *(_DWORD **)(a1 + 32);
  sub_1812FFFE4(a1);
  uint64_t v12 = *(void *)(a1 + 56);
  unsigned int v13 = *(unsigned __int16 *)(a1 + 68);
  if (v12 - *(void *)(v5 + 80) > (unint64_t)(v11[14] - v13))
  {
    uint64_t v14 = 81917LL;
    return sub_1812FD54C(v14, v5);
  }

  if (v13 <= a2)
  {
    uint64_t v17 = 0LL;
    unsigned int v18 = a2 - v13;
  }

  else
  {
    if (a3 + a2 <= v13) {
      size_t v16 = a3;
    }
    else {
      size_t v16 = v13 - a2;
    }
    uint64_t v17 = sub_1812C0104((const void *)(v12 + a2), a4, v16, a5, *(void *)(v5 + 112));
    unsigned int v18 = 0;
    a3 -= v16;
    a4 += (int)v16;
    if ((_DWORD)v17) {
      goto LABEL_46;
    }
  }

  if (!a3) {
    goto LABEL_46;
  }
  int v36 = a5;
  int v19 = v11[14];
  unsigned int v20 = v19 - 4;
  uint64_t v21 = *(unsigned __int16 *)(a1 + 68);
  uint64_t v17 = bswap32(*(_DWORD *)(v12 + v21));
  unsigned int v38 = v17;
  if ((*(_BYTE *)(a1 + 1) & 4) != 0)
  {
    uint64_t v26 = *(void *)(a1 + 16);
    int v27 = v18 / v20;
    if (*(_DWORD *)(v26 + 4LL * (v18 / v20)))
    {
      uint64_t v25 = v27;
      uint64_t v17 = *(unsigned int *)(v26 + 4LL * v27);
      unsigned int v38 = v17;
      v18 %= v20;
      if ((_DWORD)v17) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v25 = 0LL;
      if ((_DWORD)v17) {
        goto LABEL_25;
      }
    }

uint64_t sub_1812C0104(const void *a1, void *a2, size_t a3, int a4, uint64_t a5)
{
  int v5 = a3;
  if (!a4)
  {
    a3 = (int)a3;
    uint64_t v10 = a2;
    int v11 = a1;
LABEL_14:
    memcpy(v10, v11, a3);
    return 0LL;
  }

  int v8 = *(_DWORD **)(a5 + 40);
  if ((*(_WORD *)(a5 + 52) & 4) == 0 || v8[8] < *(_DWORD *)(a5 + 48))
  {
    uint64_t result = v8[12];
    if ((_DWORD)result) {
      return result;
    }
    if (v8[46] <= v8[50])
    {
      uint64_t result = sub_1812ABE24(a5);
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
      uint64_t result = sub_1812FED50(a5);
      if ((_DWORD)result) {
        return result;
      }
    }

    goto LABEL_13;
  }

  if (!v8[32] || (uint64_t result = sub_1812FAFE4(a5), !(_DWORD)result))
  {
LABEL_13:
    a3 = v5;
    uint64_t v10 = (void *)a1;
    int v11 = a2;
    goto LABEL_14;
  }

  return result;
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *((void *)a1 + 1);
    if (v1) {
      return *(void **)(v1 + 8);
    }
  }

  sub_1812CF36C(97932);
  return 0LL;
}

uint64_t sub_1812C01F4(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 9);
  unint64_t v4 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 24);
  unint64_t v6 = (v4 + 2 * v5);
  uint64_t v7 = *(_DWORD **)(a1 + 72);
  int v8 = *(char **)(a1 + 80);
  LODWORD(v9) = v7[14];
  uint64_t v10 = v3 + 7;
  if (v8[v3 + 7] > a2)
  {
    int v11 = v9 - 4;
LABEL_3:
    uint64_t v37 = v3 + 7;
    int v38 = v4 + 2 * v5;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    if (*(_WORD *)(a1 + 24))
    {
      int v39 = v11;
      int v12 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
      unsigned int v13 = *(char **)(*(void *)v7 + 328LL);
      memcpy(v13, v8, (int)v9);
      uint64_t v2 = a1;
      unsigned __int8 v15 = v8;
      uint64_t v16 = (uint64_t)&v8[v4 + 1];
      int v17 = v9;
      while (1)
      {
        unsigned int v18 = __rev16(*(unsigned __int16 *)(v16 - 1));
        unsigned int v19 = (*(uint64_t (**)(uint64_t, char *))(v2 + 120))(v2, &v13[v18]);
        LODWORD(v9) = v9 - v19;
        if ((int)v9 < v12 || (int)(v18 + v19) > v17)
        {
          uint64_t v25 = 78521LL;
          uint64_t v26 = a1;
          return sub_1812FD54C(v25, v26);
        }

        *(_WORD *)(v16 - 1) = bswap32(v9) >> 16;
        memcpy(&v15[v9], &v13[v18], v19);
        v16 += 2LL;
        --v5;
        uint64_t v2 = a1;
        if (!v5) {
          goto LABEL_19;
        }
      }

      uint64_t v25 = 78515LL;
      goto LABEL_24;
    }

    unsigned __int8 v15 = *(char **)(a1 + 80);
LABEL_19:
    int v8 = v15;
    uint64_t v10 = v37;
    LODWORD(v6) = v38;
    v8[v37] = 0;
    goto LABEL_20;
  }

  uint64_t v21 = __rev16(*(unsigned __int16 *)&v8[v3 + 1]);
  int v11 = v9 - 4;
  if ((int)v21 > (int)v9 - 4)
  {
    uint64_t v25 = 78462LL;
    goto LABEL_24;
  }

  if (!(_DWORD)v21) {
    goto LABEL_3;
  }
  uint64_t v22 = __rev16(*(unsigned __int16 *)&v8[v21]);
  if ((int)v22 > v11)
  {
    uint64_t v25 = 78465LL;
    goto LABEL_24;
  }

  unsigned int v27 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
  int v28 = v21 - v27;
  if (v21 <= v27)
  {
    uint64_t v25 = 78473LL;
    goto LABEL_24;
  }

  unsigned int v29 = __rev16(*(unsigned __int16 *)&v8[v21 + 2]);
  unsigned int v30 = v29 + v21;
  if ((_DWORD)v22)
  {
    if (v22 < v30)
    {
      uint64_t v25 = 78476LL;
      goto LABEL_24;
    }

    unsigned int v31 = __rev16(*(unsigned __int16 *)&v8[v22 + 2]);
    if ((int)(v31 + v22) > (int)v9)
    {
      uint64_t v25 = 78478LL;
      goto LABEL_24;
    }

    uint64_t v32 = a1;
    unsigned int v40 = v22;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    memmove(&v8[v31 + v30], &v8[v30], (int)(v22 - v30));
    int v28 = v21 - v27;
    v29 += v31;
  }

  else
  {
    if ((int)v30 > (int)v9)
    {
      uint64_t v25 = 78482LL;
      goto LABEL_24;
    }

    uint64_t v32 = a1;
    unsigned int v40 = v22;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    unsigned int v31 = 0;
  }

  uint64_t v9 = v29 + v27;
  memmove(&v8[v9], &v8[v27], v28);
  if (v4 >= v6)
  {
    uint64_t v2 = v32;
  }

  else
  {
    unsigned int v33 = &v8[v4];
    uint64_t v2 = v32;
    do
    {
      unsigned int v34 = __rev16(*(unsigned __int16 *)v33);
      unsigned int v35 = v29;
      v33 += 2;
    }

    while (v33 < &v8[v6]);
  }

_DWORD *sub_1812C0570(_DWORD *result, int a2, int a3, int a4, _DWORD *a5)
{
  if (*a5) {
    return result;
  }
  if (a2 == 1)
  {
    unsigned int v9 = 0;
  }

  else
  {
    if (!a2)
    {
      uint64_t result = (_DWORD *)sub_1812FBF50(77893);
LABEL_11:
      *a5 = (_DWORD)result;
      return result;
    }

    unsigned int v10 = (a2 - 2) / (result[14] / 5u + 1) * (result[14] / 5u + 1);
    else {
      int v11 = 2;
    }
    unsigned int v9 = v11 + v10;
  }

  uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 288LL))();
  if ((_DWORD)result) {
    goto LABEL_11;
  }
  if (**(_BYTE **)(v19 + 16))
  {
    int v12 = 77906;
  }

  else
  {
    int v13 = ~v9 + a2;
    uint64_t v14 = (5 * v13);
    if (5 * v13 >= 0)
    {
      uint64_t v15 = *(void *)(v19 + 8);
      if (*(unsigned __int8 *)(v15 + v14) != a3 || bswap32(*(_DWORD *)(v15 + v14 + 1)) != a4)
      {
        int v16 = sub_1812ABDD4(v19);
        *a5 = v16;
        if (!v16)
        {
          *(_BYTE *)(v15 + v14) = a3;
          int v17 = (_BYTE *)(v15 + v14);
          v17[1] = HIBYTE(a4);
          v17[2] = BYTE2(a4);
          v17[3] = BYTE1(a4);
          v17[4] = a4;
        }
      }

      goto LABEL_16;
    }

    int v12 = 77911;
  }

  *a5 = sub_1812FBF50(v12);
LABEL_16:
  uint64_t result = (_DWORD *)v19;
  if (v19)
  {
    if ((*(_WORD *)(v19 + 52) & 0x20) != 0)
    {
      uint64_t v18 = *(void *)(v19 + 40);
      --*(_DWORD *)(v18 + 152);
      *(void *)(v19 + 32) = *(void *)(v18 + 168);
      *(void *)(v18 + 168) = v19;
      return (_DWORD *)(*(uint64_t (**)(void, void, void))(**(void **)(v18 + 72) + 144LL))( *(void *)(v18 + 72),  *(void *)(v18 + 200) * (*(_DWORD *)(v19 + 48) - 1),  *(void *)(v19 + 8));
    }

    else
    {
      return (_DWORD *)sub_1812F9F44(v19);
    }
  }

  return result;
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 7);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }

  else
  {
    uint64_t v2 = "NULL";
  }

  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1812CF36C(186263);
  return 0LL;
}

uint64_t sub_1812C07C4(uint64_t a1, int a2, int a3, double a4)
{
  if (!a1 || *(_BYTE *)(a1 + 16) != 2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1812FDE20(a1);
    if (a2 != 2) {
      goto LABEL_12;
    }
  }

  else if (a2 != 2)
  {
    goto LABEL_12;
  }

  int v8 = *(unsigned __int8 **)(v7 + 16);
  if (!v8 || (uint64_t v9 = sub_1812FFCF0(v8, 0, 0LL), !(_DWORD)v9))
  {
LABEL_12:
    uint64_t v9 = sub_1813030CC(*(void *)v7, a2, a3, a4);
    if (!(_DWORD)v9)
    {
      if (a3 < 0 && (*(_WORD *)(v7 + 40) & 0x10) != 0) {
        *(_DWORD *)(v7 + 64) = 0;
      }
      uint64_t v9 = sub_1812A544C(v7);
      unsigned int v11 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v7 + 24) + 80LL) + 28LL));
      if (!v11) {
        unsigned int v11 = *(_DWORD *)(*(void *)v7 + 32LL);
      }
      *(_DWORD *)(v7 + 64) = v11;
    }
  }

  if (*(_BYTE *)(a1 + 17))
  {
    int v12 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v12;
    if (!v12) {
      sub_1812FDEFC(a1);
    }
  }

  return v9;
}

uint64_t sub_1812C08E0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 8))
    {
      for (uint64_t i = 16LL; i != 512; i += 8LL)
        sub_1812C08E0(*(void *)(v1 + i));
    }

    uint64_t v3 = (uint64_t (**)(void))&off_18C4653A8;
    if (!dword_18C465380) {
      return ((uint64_t (*)(uint64_t))*v3)(v1);
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400();
    }
    qword_18C468AC8 -= (int)off_18C4653B8(v1);
    --qword_18C468B10;
    uint64_t result = off_18C4653A8(v1);
    uint64_t v1 = xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      uint64_t v3 = &xmmword_18C465410;
      return ((uint64_t (*)(uint64_t))*v3)(v1);
    }
  }

  return result;
}

int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
{
  return sqlite3_wal_checkpoint_v2(db, zDb, 0, 0LL, 0LL);
}

uint64_t sub_1812C09C4( uint64_t a1, uint64_t a2, int a3, unsigned int (*a4)(uint64_t), uint64_t a5, unsigned int a6, int a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v168 = *MEMORY[0x1895F89C0];
  int v151 = 0;
  if (*(_BYTE *)(a1 + 66)) {
    return 8LL;
  }
  uint64_t v15 = a4;
  *(void *)(a1 + 160) = a2;
  if (a2)
  {
    if (a4)
    {
      LODWORD(v155) = *(_DWORD *)(a2 + 772);
      if ((_DWORD)v155)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (*(void *)v19) {
          (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v19 + 80LL))(v19, 34LL, &v155);
        }
      }
    }
  }

  unsigned int v147 = a6;
  if (*(_BYTE *)(a1 + 63)
    || (int v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  1LL,  1LL,  10LL),  v22 = a3,  !v21))
  {
    *(_BYTE *)(a1 + 65) = 1;
    if (a3)
    {
      while (!*(_BYTE *)(a1 + 63))
      {
        int v20 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  0LL,  1LL,  10LL);
        int v21 = v20;
        if (!v15 || v20 != 5)
        {
          if (v20)
          {
            if (v20 != 5)
            {
              int v22 = a3;
              if (v20 != 773) {
                goto LABEL_35;
              }
              LODWORD(v155) = 0;
              uint64_t v23 = *(void *)(a1 + 8);
              if (*(void *)v23) {
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v23 + 80LL))(v23, 34LL, &v155);
              }
            }

LABEL_213:
        unsigned int v150 = *(_DWORD *)(v145 + 96);
        *(_DWORD *)(v145 + 128) = v134;
        uint64_t v111 = (v147 >> 2) & 3;
        if ((_DWORD)v111
          && (int v112 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 40LL))( *(void *)(a1 + 16),  (v147 >> 2) & 3)) != 0)
        {
          int v21 = v112;
        }

        else
        {
          unsigned int v113 = v139;
          *(void *)&__int128 v155 = v139 * (unint64_t)v140;
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 80LL))( *(void *)(a1 + 8),  39LL,  0LL);
          int v21 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  &__buf);
          if (!v21)
          {
            if (__buf < (uint64_t)v155)
            {
              if ((uint64_t)(__buf + *(unsigned int *)(a1 + 88) * (unint64_t)v140 + 0x10000) < (uint64_t)v155)
              {
                int v21 = sub_1812FBF50(74117);
                goto LABEL_217;
              }

              uint64_t v116 = *(void *)(a1 + 8);
              if (*(void *)v116) {
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v116 + 80LL))(v116, 5LL, &v155);
              }
            }

            uint64_t v117 = v40[1];
            if ((int)v117 >= 1)
            {
              unsigned int v118 = 0;
              while (1)
              {
                unsigned int v119 = *v40;
                unsigned int v120 = -1;
                do
                {
                  uint64_t v122 = (v117 - 1);
                  uint64_t v123 = &v144[8 * v122];
                  uint64_t v124 = v123 + 2;
                  signed int v125 = v123[2];
                  signed int v126 = v123[8];
                  if (v125 < v126)
                  {
                    uint64_t v127 = *((void *)v123 + 3);
                    uint64_t v128 = (unsigned __int16 *)(*((void *)v123 + 2) + 2LL * v125);
                    while (1)
                    {
                      unsigned int v130 = *v128++;
                      unsigned int v129 = v130;
                      unsigned int v131 = *(_DWORD *)(v127 + 4LL * v130);
                      if (v131 > v119) {
                        break;
                      }
                      *uint64_t v124 = ++v125;
                      if (v126 == v125) {
                        goto LABEL_248;
                      }
                    }

                    if (v131 < v120)
                    {
                      unsigned int v118 = v144[8 * v122 + 9] + v129;
                      unsigned int v120 = v131;
                    }
                  }

LABEL_248:
                  ;
                }

                while (v117-- > 1);
                *uint64_t v144 = v120;
                if (v120 == -1)
                {
                  int v21 = 0;
                  goto LABEL_269;
                }

                if (*(_DWORD *)(v143 + 424)) {
                  break;
                }
                if (v118 > v150 && v118 <= v134 && v120 <= v113)
                {
                  int v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 16)
                                                                                               + 16LL))( *(void *)(a1 + 16),  v138,  v140,  (v140 | 0x18) * (unint64_t)(v118 - 1) + 56);
                  if (v132
                    || (v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  v138,  v140,  v140 * (unint64_t)(v120 - 1)),  unsigned int v113 = v139,  v132))
                  {
                    int v21 = v132;
                    goto LABEL_269;
                  }
                }

                unsigned int v40 = v144;
                uint64_t v117 = v144[1];
              }

              if (*(_BYTE *)(v143 + 103)) {
                int v21 = 7;
              }
              else {
                int v21 = 9;
              }
LABEL_269:
              int v22 = v146;
              unsigned int v40 = v144;
              uint64_t v32 = v145;
              goto LABEL_218;
            }

              ++v173;
              ++v164;
              if (*v237) {
                goto LABEL_274;
              }
              continue;
            }

            break;
          }

          uint64_t v179 = __rev16(**(unsigned __int16 **)v174) == 0;
          uint64_t v180 = v223;
          if (v179) {
            int v181 = (unsigned __int16 **)v174;
          }
          else {
            int v181 = v223;
          }
          if (v179) {
            uint64_t v182 = v221;
          }
          else {
            uint64_t v182 = v173;
          }
          if (!v179) {
            uint64_t v180 = (unsigned __int16 **)v174;
          }
          int v221 = v182;
          unsigned int v223 = v180;
          if (v181)
          {
            uint64_t v183 = (uint64_t (**)(unsigned __int16 **))&off_18C4653A8;
            if (!dword_18C465380) {
              goto LABEL_272;
            }
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v181);
            --qword_18C468B10;
            off_18C4653A8(v181);
            int v181 = (unsigned __int16 **)xmmword_18C468B70;
            if ((void)xmmword_18C468B70)
            {
              uint64_t v183 = (uint64_t (**)(unsigned __int16 **))&xmmword_18C465410;
LABEL_272:
              (*v183)(v181);
            }
          }

          char v171 = (uint64_t)v235;
          uint64_t v62 = v227;
          if (v177 < v176) {
            goto LABEL_274;
          }
          goto LABEL_248;
        }

        uint64_t v152 = v29;
        uint64_t v153 = *(int *)(v151 + 28);
        int v154 = (_DWORD *)v60;
        __int128 v155 = (unsigned __int16 **)sub_18138BCF4(v60, v153 + ((unint64_t)**v38 << 37));
        if (!v155) {
          goto LABEL_300;
        }
        __int128 v156 = v155;
        __int128 v157 = *((_DWORD *)v155 + 2);
        if (v157 < 4 || *((_DWORD *)v155 + 3) > v157)
        {
          *unint64_t v50 = 267;
          __int128 v158 = (uint64_t (**)(unsigned __int16 **))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400(xmmword_18C468B70);
            }
            qword_18C468AC8[0] -= (int)off_18C4653B8(v156);
            --qword_18C468B10;
            off_18C4653A8(v156);
            __int128 v156 = (unsigned __int16 **)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_300;
            }
            __int128 v158 = (uint64_t (**)(unsigned __int16 **))&xmmword_18C465410;
          }

          (*v158)(v156);
          goto LABEL_300;
        }

LABEL_264:
            int v21 = 0;
            *unsigned int v40 = -1;
            int v22 = v146;
          }
        }

  if (v23)
  {
    __int128 v164 = (void (**)(void *))&off_18C4653A8;
    if (!dword_18C465380) {
      goto LABEL_270;
    }
    if ((void)xmmword_18C468B70) {
      xmmword_18C465400(xmmword_18C468B70);
    }
    qword_18C468AC8[0] -= (int)off_18C4653B8(v23);
    --qword_18C468B10;
    off_18C4653A8(v23);
    uint64_t v23 = (char *)xmmword_18C468B70;
    if ((void)xmmword_18C468B70)
    {
      __int128 v164 = (void (**)(void *))&xmmword_18C465410;
LABEL_270:
      (*v164)(v23);
    }
  }

  return sub_18138D5A4(v203);
}

LABEL_217:
        uint64_t v32 = v145;
LABEL_218:
        uint64_t v114 = *(void *)(a1 + 8);
        if (*(void *)v114) {
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v114 + 80LL))(v114, 37LL, 0LL);
        }
        if (!v21
          && (v134 != *(_DWORD *)(**(void **)(a1 + 48) + 16LL)
           || (int v21 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  v140 * (unint64_t)*(unsigned int *)(a1 + 92))) == 0 && (!(_DWORD)v111 || (int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40LL))( *(void *)(a1 + 8),  v111)) == 0)))
        {
          int v21 = 0;
          *(_DWORD *)(v32 + 96) = v134;
        }

        if (!*(_BYTE *)(a1 + 63)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  3LL,  1LL,  9LL);
        }
        goto LABEL_87;
      }

      unsigned __int8 v53 = (_WORD *)((char *)v49 + v46);
      uint64_t v54 = (int)v50;
      uint64_t v55 = v45 >> 32;
      uint64_t v136 = v45 >> 32;
      if (v54 > v45 >> 32) {
        uint64_t v55 = v54;
      }
      uint64_t v135 = v55;
      uint64_t v133 = v49 + 6;
      v56.i64[0] = 0x8000800080008LL;
      v56.i64[1] = 0x8000800080008LL;
      v57.i64[0] = 0x10001000100010LL;
      v57.i64[1] = 0x10001000100010LL;
LABEL_123:
      if (v54 < *(int *)(a1 + 40))
      {
        uint64_t v59 = *(void *)(*(void *)(a1 + 48) + 8 * v54);
        uint64_t v153 = v59;
        if (v59)
        {
          BOOL v60 = v54 == 0;
          uint64_t v61 = 34LL;
          if (v54) {
            uint64_t v61 = 0LL;
          }
          uint64_t v62 = v59 + 4 * v61;
          goto LABEL_133;
        }
      }

      unsigned int v63 = sub_1812FC4E0(a1, v54, &v153);
      int v21 = v63;
      if (v153)
      {
        BOOL v60 = v54 == 0;
        uint64_t v61 = 34LL;
        if (v54) {
          uint64_t v61 = 0LL;
        }
        if (v63) {
          goto LABEL_231;
        }
        uint64_t v62 = v153 + 4 * v61;
        v56.i64[0] = 0x8000800080008LL;
        v56.i64[1] = 0x8000800080008LL;
        v57.i64[0] = 0x10001000100010LL;
        v57.i64[1] = 0x10001000100010LL;
LABEL_133:
        if (v60) {
          uint64_t v64 = 0LL;
        }
        else {
          uint64_t v64 = (((_DWORD)v54 << 12) - 34);
        }
        unint64_t v65 = (unint64_t)(0x4000 - 4 * v61) >> 2;
        if (v54 == v136) {
          uint64_t v66 = (v137 - v64);
        }
        else {
          uint64_t v66 = v65;
        }
        uint64_t v67 = (int)v40[1];
        uint64_t v148 = (uint64_t)&v40[8 * v67 + 2] + 2 * v64;
        uint64_t v149 = v66;
        int v154 = v64 | 1;
        uint64_t v142 = v54;
        unsigned int v141 = v64 | 1;
        if ((int)v66 <= 0)
        {
          int v70 = 0LL;
          int v71 = 0;
          __int128 v166 = 0u;
          __int128 v167 = 0u;
          __int128 v164 = 0u;
          __int128 v165 = 0u;
          __int128 v162 = 0u;
          __int128 v163 = 0u;
          __int128 v160 = 0u;
          __int128 v161 = 0u;
          __int128 v158 = 0u;
          __int128 v159 = 0u;
          __int128 v156 = 0u;
          __int128 v157 = 0u;
          unsigned int v72 = 1;
          __int128 v155 = 0u;
          goto LABEL_171;
        }

        uint64_t v68 = 32 * v67;
        if (v66 >= 0x10)
        {
          uint64_t v69 = v66 & 0x7FFFFFF0;
          unsigned int v73 = (int16x8_t *)((char *)v133 + 2 * v64 + v68);
          uint64_t v74 = v69;
          int16x8_t v75 = (int16x8_t)xmmword_1813CDCB0;
          do
          {
            v73[-1] = v75;
            *unsigned int v73 = vaddq_s16(v75, v56);
            int16x8_t v75 = vaddq_s16(v75, v57);
            v73 += 2;
            v74 -= 16LL;
          }

          while (v74);
          uint64_t v66 = v149;
          if (v69 == v149) {
            goto LABEL_148;
          }
        }

        else
        {
          uint64_t v69 = 0LL;
        }

        uint64_t v76 = -v66;
        uint64_t v77 = v69 + 4;
        uint64_t v78 = (char *)v40 + 2 * v64 + v68;
        do
        {
          *(_WORD *)&v78[2 * v77] = v77 - 4;
          ++v77;
        }

        while (v76 + v77 != 4);
LABEL_148:
        uint64_t v79 = 0LL;
        __int128 v166 = 0u;
        __int128 v167 = 0u;
        __int128 v164 = 0u;
        __int128 v165 = 0u;
        __int128 v162 = 0u;
        __int128 v163 = 0u;
        __int128 v160 = 0u;
        __int128 v161 = 0u;
        __int128 v158 = 0u;
        __int128 v159 = 0u;
        __int128 v156 = 0u;
        __int128 v157 = 0u;
        __int128 v155 = 0u;
        while (1)
        {
          int v70 = (char *)(v148 + 2 * v79);
          unsigned int v81 = 0;
          int v71 = 1;
          if ((v79 & 1) != 0) {
            break;
          }
LABEL_149:
          BOOL v80 = &v155 + v81;
          *((void *)v80 + 1) = v70;
          *(_DWORD *)BOOL v80 = v71;
          ++v79;
          LODWORD(v66) = v149;
          if (v79 == v149)
          {
            unsigned int v72 = v81 + 1;
            if (v81 + 1 > 0xC) {
              goto LABEL_122;
            }
LABEL_171:
            uint64_t v95 = v72;
            while (2)
            {
              char v96 = &v155 + v95;
              char v97 = (unsigned __int16 *)*((void *)v96 + 1);
              int v98 = *(_DWORD *)v96;
              BOOL v99 = v98 > 0;
              BOOL v100 = v71 > 0;
              if (v71 <= 0 && v98 < 1)
              {
                int v71 = 0;
                goto LABEL_172;
              }

              uint64_t v101 = 0LL;
              int v102 = 0;
              int v103 = 0;
              while (2)
              {
                if (!v99)
                {
                  uint64_t v106 = v103;
LABEL_184:
                  ++v103;
                  uint64_t v105 = (unsigned __int16 *)&v70[2 * v106];
                  goto LABEL_185;
                }

                uint64_t v104 = v102;
                if (v100
                  && *(_DWORD *)(v62 + 4LL * v97[v102]) >= *(_DWORD *)(v62 + 4LL * *(unsigned __int16 *)&v70[2 * v103]))
                {
                  uint64_t v106 = v103;
                  goto LABEL_184;
                }

                ++v102;
                uint64_t v105 = &v97[v104];
LABEL_185:
                uint64_t v107 = *v105;
                int v108 = *(_DWORD *)(v62 + 4 * v107);
                v53[v101] = v107;
                if (v102 < v98 && *(_DWORD *)(v62 + 4LL * v97[v102]) == v108) {
                  ++v102;
                }
                BOOL v99 = v102 < v98;
                ++v101;
                BOOL v100 = v103 < v71;
                if (v103 < v71 || v102 < v98) {
                  continue;
                }
                break;
              }

              int v71 = v101;
LABEL_172:
              memcpy(v97, v53, (2 * v71));
              int v70 = (char *)v97;
              v56.i64[0] = 0x8000800080008LL;
              v56.i64[1] = 0x8000800080008LL;
              v57.i64[0] = 0x10001000100010LL;
              v57.i64[1] = 0x10001000100010LL;
              LODWORD(v66) = v149;
LABEL_173:
              if ((_DWORD)++v95 != 13) {
                continue;
              }
              break;
            }

        sub_1812CF36C(97498);
        return;
      }

      unsigned int v223 = (char *)v8;
      uint64_t v224 = (char *)v12;
      int v222 = (char *)v9;
      __int128 v228 = (_DWORD *)a1;
      __int16 v241 = v27;
      uint64_t v28 = *v27;
      if (SLODWORD(v6) <= -64) {
        unsigned int v29 = -64;
      }
      else {
        unsigned int v29 = LODWORD(v6);
      }
      if (v29 >= 64) {
        BOOL v30 = 64;
      }
      else {
        BOOL v30 = v29;
      }
      uint64_t v31 = v30 - 1;
      uint64_t v32 = 1LL;
      int8x16_t v236 = *v27;
      uint64_t v33 = v253;
      uint64_t v226 = -v30;
      uint64_t v227 = v30;
      int v225 = v30 - 1;
      int v233 = vdupq_n_s64(2uLL);
      char v231 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
      unint64_t v232 = (int8x16_t)vdupq_n_s64(0x3FuLL);
      int8x16_t v237 = -v30;
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_55;
      }
      while (2)
      {
        unsigned int v34 = 0LL;
        int v35 = 0LL;
        uint64_t v36 = 0LL;
        uint64_t v37 = v241;
        __int128 v229 = v32;
        do
        {
          uint64_t v230 = v34;
          int v38 = &v269[6 * v34 + 1];
          *int v38 = 0LL;
          v38[1] = 0LL;
          int8x16_t v235 = v38;
          v38[2] = 0LL;
          if (*(int *)(v28 + 48) >= 1)
          {
            uint64_t v39 = 0;
            unsigned int v40 = 0xFFFFFFFFLL;
            while ((v33 & 0x80000000) == 0 && v39 != v33)
            {
              int v41 = v40;
LABEL_61:
              ++v39;
              unsigned int v40 = v41;
              if (v39 >= *(_DWORD *)(v28 + 48)) {
                goto LABEL_57;
              }
            }

            uint64_t v259 = 0LL;
            int16x8_t v260 = 0LL;
            int v261 = 0LL;
            uint64_t v262 = v37;
            uint64_t v263 = 0LL;
            uint64_t v42 = (_DWORD *)v37[3];
            v269[0] = 0;
            int v43 = sub_18137FA74( v42,  v269,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_18137FA54,  (uint64_t)&v262);
            if (v43) {
              goto LABEL_225;
            }
            unint64_t v44 = v263;
            if (sqlite3_initialize())
            {
              int v43 = 7;
LABEL_225:
              unsigned int v131 = 0LL;
              int v132 = v228;
              goto LABEL_227;
            }

            int __s = v40;
            uint64_t v45 = (char *)sub_18126F0AC(48LL * (int)v44);
            if (!v45)
            {
              int v43 = 7;
              uint64_t v28 = v236;
              goto LABEL_225;
            }

            size_t v46 = v45;
            bzero(v45, 48LL * (int)v44);
            int16x8_t v260 = v46;
            uint64_t v37 = v241;
            uint64_t v256 = (uint64_t **)v241;
            uint64_t v257 = v39;
            uint64_t v258 = v237;
            LODWORD(v259) = v44;
            LODWORD(v261) = -1;
            int v47 = (_DWORD *)v241[3];
            LODWORD(v262) = 0;
            int v43 = sub_18137FA74( v47,  &v262,  (uint64_t (*)(_DWORD *, void, uint64_t))sub_18137F940,  (uint64_t)&v256);
            int8x16_t v248 = v39;
            if (v43)
            {
              __int16 v239 = 0;
              uint64_t v242 = 0;
              int8x16_t v246 = 0LL;
              uint64_t v48 = 0LL;
              int v41 = 0LL;
            }

            else
            {
              if ((int)v44 >= 1)
              {
                if (v44 >= 5)
                {
                  unint64_t v50 = v44 & 3;
                  if ((v44 & 3) == 0) {
                    unint64_t v50 = 4LL;
                  }
                  uint64_t v49 = v44 - v50;
                  int v51 = 0uLL;
                  uint64_t v52 = (int8x16_t)(unint64_t)v36;
                  unsigned __int8 v53 = (int64x2_t *)(v260 + 120);
                  uint64_t v54 = v49;
                  uint64_t v55 = (int64x2_t)xmmword_1813CDC50;
                  do
                  {
                    int16x8_t v56 = v53[-3];
                    int16x8_t v57 = v53[-6];
                    uint64_t v58 = v53[3];
                    uint64_t v59 = *v53;
                    v53 += 12;
                    BOOL v60 = (uint64x2_t)vdupq_n_s64(1uLL);
                    uint64_t v52 = vorrq_s8( vbicq_s8( (int8x16_t)vshlq_u64(v60, (uint64x2_t)vandq_s8((int8x16_t)v55, v232)),  (int8x16_t)vceqzq_s64(vzip1q_s64(v57, v56))),  v52);
                    int v51 = vorrq_s8( vbicq_s8( (int8x16_t)vshlq_u64(v60, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v55, v233), v232)),  (int8x16_t)vceqzq_s64(vzip1q_s64(v59, v58))),  v51);
                    uint64_t v55 = vaddq_s64(v55, vdupq_n_s64(4uLL));
                    v54 -= 4LL;
                  }

                  while (v54);
                  uint64_t v61 = vorrq_s8(v51, v52);
                  uint64_t v36 = vorr_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
                }

                else
                {
                  uint64_t v49 = 0LL;
                }

                uint64_t v62 = (uint64_t *)&v260[48 * v49 + 24];
                do
                {
                  unsigned int v63 = *v62;
                  v62 += 6;
                  if (v63) {
                    uint64_t v64 = 1LL << v49;
                  }
                  else {
                    uint64_t v64 = 0LL;
                  }
                  *(void *)&v36 |= v64;
                  ++v49;
                }

                while (v44 != v49);
              }

              LODWORD(v65) = 0;
              uint64_t v66 = 0LL;
              uint64_t v67 = 0LL;
              uint64_t v68 = v261;
              uint64_t v69 = 0xFFFFFFFFLL;
              int v70 = v259;
              int v71 = v258;
LABEL_84:
              int v41 = v69;
              uint64_t v48 = v67;
              int8x16_t v246 = v66;
              uint64_t v242 = v65;
              LODWORD(v65) = v68;
              while ((v65 & 0x80000000) != 0)
              {
                LODWORD(v261) = 0;
                if ((int)v70 >= 1)
                {
                  uint64_t v92 = 0LL;
                  uint64_t v93 = v258;
                  do
                  {
                    char v96 = &v260[48 * v92];
                    int v98 = (unsigned __int8 *)*((void *)v96 + 3);
                    char v97 = (unsigned __int8 **)(v96 + 24);
                    int v94 = v98;
                    if (v98)
                    {
                      for (uint64_t i = (uint64_t)*(v97 - 1); ; i += (int)(v100 - 2))
                      {
                        if (i >= v93) {
                          goto LABEL_133;
                        }
                        BOOL v100 = *v94;
                        if (v100 < 2) {
                          break;
                        }
                        if ((v100 & 0x80) != 0)
                        {
                          BOOL v100 = v100 & 0x7F | (v94[1] << 7);
                          if ((char)v94[1] < 0)
                          {
                            BOOL v100 = v100 & 0x3FFF | (v94[2] << 14);
                            if ((char)v94[2] < 0)
                            {
                              BOOL v100 = v100 & 0x1FFFFF | (v94[3] << 21);
                              if ((char)v94[3] < 0)
                              {
                                BOOL v100 = v100 & 0xFFFFFFF | ((v94[4] & 7) << 28);
                                BOOL v99 = 5LL;
                              }

                              else
                              {
                                BOOL v99 = 4LL;
                              }
                            }

                            else
                            {
                              BOOL v99 = 3LL;
                            }
                          }

                          else
                          {
                            BOOL v99 = 2LL;
                          }
                        }

                        else
                        {
                          BOOL v99 = 1LL;
                        }

                        v94 += v99;
                      }

                      int v94 = 0LL;
                      uint64_t i = -1LL;
LABEL_133:
                      *(v97 - 1) = (unsigned __int8 *)i;
                      *char v97 = v94;
                    }

                    ++v92;
                  }

                  while (v92 != v70);
                  LODWORD(v65) = 0;
LABEL_150:
                  uint64_t v101 = 0LL;
                  uint64_t v69 = 0LL;
                  uint64_t v66 = 0LL;
                  uint64_t v67 = 0LL;
                  int v102 = v258 + (uint64_t)(int)v65;
                  while (1)
                  {
                    int v103 = &v260[48 * v101];
                    uint64_t v104 = (unsigned __int8 *)*((void *)v103 + 5);
                    if (v104)
                    {
                      uint64_t v105 = *(void *)&v260[48 * v101 + 32];
                    }

LABEL_122:
            unsigned int v40 = v144;
            uint64_t v58 = &v144[8 * v142];
            v58[8] = v71;
            v58[9] = v141;
            *((void *)v58 + 2) = v148;
            *((void *)v58 + 3) = v62;
            uint64_t v54 = v142 + 1;
            if (v142 == v135) {
              goto LABEL_106;
            }
            goto LABEL_123;
          }
        }

        __int128 v82 = (char *)(v148 + 2 * v79);
LABEL_153:
        unsigned int v83 = &v155 + v81;
        int v70 = (char *)*((void *)v83 + 1);
        int v84 = *(_DWORD *)v83;
        BOOL v85 = v84 > 0;
        BOOL v86 = v71 > 0;
        if (v71 <= 0 && v84 < 1)
        {
          int v71 = 0;
          goto LABEL_152;
        }

        uint64_t v87 = 0LL;
        int v88 = 0;
        int v89 = 0;
        while (1)
        {
          if (v85)
          {
            uint64_t v90 = v88;
            if (!v86
              || *(_DWORD *)(v62 + 4LL * *(unsigned __int16 *)&v70[2 * v88]) < *(_DWORD *)(v62
                                                                                         + 4LL
                                                                                         * *(unsigned __int16 *)&v82[2 * v89]))
            {
              ++v88;
              uint64_t v91 = &v70[2 * v90];
              goto LABEL_163;
            }

            uint64_t v92 = v89;
          }

          else
          {
            uint64_t v92 = v89;
          }

          ++v89;
          uint64_t v91 = &v82[2 * v92];
LABEL_163:
          uint64_t v93 = *(unsigned __int16 *)v91;
          int v94 = *(_DWORD *)(v62 + 4 * v93);
          v53[v87] = v93;
          BOOL v85 = v88 < v84;
          ++v87;
          BOOL v86 = v89 < v71;
          if (v89 >= v71 && v88 >= v84)
          {
            int v71 = v87;
LABEL_152:
            memcpy(v70, v53, (2 * v71));
            ++v81;
            __int128 v82 = v70;
            v56.i64[0] = 0x8000800080008LL;
            v56.i64[1] = 0x8000800080008LL;
            v57.i64[0] = 0x10001000100010LL;
            v57.i64[1] = 0x10001000100010LL;
            goto LABEL_153;
          }
        }
      }

      if (v63 <= 1) {
        int v21 = 1;
      }
      else {
        int v21 = v63;
      }
LABEL_231:
      unsigned __int8 v115 = (uint64_t (**)(unsigned int *))&off_18C4653A8;
      if (dword_18C465380)
      {
        int v22 = v146;
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v40);
        --qword_18C468B10;
        off_18C4653A8(v40);
        unsigned int v40 = (unsigned int *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70)
        {
          uint64_t v32 = v145;
LABEL_87:
          if (v21 != 5)
          {
LABEL_89:
            if (v22 && !v21)
            {
              if (*(_DWORD *)(v32 + 96) < *(_DWORD *)(a1 + 88))
              {
LABEL_92:
                int v21 = 5;
                goto LABEL_196;
              }

              if (v22 >= 2)
              {
                sqlite3_initialize();
                arc4random_buf(&__buf, 4uLL);
                while (1)
                {
                  if (*(_BYTE *)(a1 + 63)) {
                    goto LABEL_117;
                  }
                  int v43 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  4LL,  4LL,  10LL);
                  int v21 = v43;
                  if (!v15 || v43 != 5) {
                    break;
                  }
                  if (!v15(a5)) {
                    goto LABEL_92;
                  }
                }

                if (!v43)
                {
LABEL_117:
                  if (v22 == 3)
                  {
                    sub_1812FC318(a1, __buf);
                    int v21 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  0LL);
                  }

                  else
                  {
                    int v21 = 0;
                  }

                  if (!*(_BYTE *)(a1 + 63)) {
                    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112LL))( *(void *)(a1 + 8),  4LL,  4LL,  9LL);
                  }
                  goto LABEL_196;
                }

                if (v43 != 773) {
                  goto LABEL_196;
                }
                LODWORD(v155) = 0;
                uint64_t v52 = *(void *)(a1 + 8);
                if (*(void *)v52) {
                  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v52 + 80LL))(v52, 34LL, &v155);
                }
                goto LABEL_92;
              }

              int v21 = 0;
            }

              uint64_t v207 = 7;
              unsigned int v10 = 7;
              if (!a3) {
                goto LABEL_3;
              }
              goto LABEL_348;
            }

            goto LABEL_345;
          }

                uint64_t v39 = 0;
                if (!v16 || *(void *)(v12 + 40) == v16) {
                  goto LABEL_156;
                }
                uint64_t v59 = &off_18C4653A8;
                if (dword_18C465380)
                {
                  if ((void)xmmword_18C468B70) {
                    xmmword_18C465400(xmmword_18C468B70);
                  }
                  qword_18C468AC8[0] -= (int)off_18C4653B8(v16);
                  --qword_18C468B10;
                  off_18C4653A8(v16);
                  int v16 = xmmword_18C468B70;
                  if ((void)xmmword_18C468B70)
                  {
                    uint64_t v59 = &xmmword_18C465410;
                    goto LABEL_129;
                  }
                }

                else
                {
LABEL_129:
                  (*v59)(v16);
                }

                uint64_t v39 = 0;
LABEL_131:
                int v12 = v76;
                goto LABEL_156;
              }
            }

            if (v18)
            {
              int v38 = (void (**)(unsigned __int8 *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_68;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v18);
              --qword_18C468B10;
              off_18C4653A8(v18);
              uint64_t v18 = (unsigned __int8 *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                int v38 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_68:
                (*v38)(v18);
              }
            }

  if (*(_DWORD *)(a1 + 60))
  {
    sub_18138A584(v21);
LABEL_124:
    int v21 = 0LL;
  }

  *(void *)(a1 + 144) = v21;
  if (*(_DWORD *)(a1 + 60)) {
    return 0LL;
  }
LABEL_126:
  uint64_t result = *(_DWORD **)(a1 + 144);
  ++*result;
  return result;
}

              int v70 = v72;
            }

            else
            {
              unsigned int v72 = 1;
              if (v69 <= 1) {
                goto LABEL_122;
              }
              do
              {
LABEL_127:
                int v70 = v72;
                uint64_t v74 = (char *)&v71[v72];
                if (*v74 < 0)
                {
                  if (v74[1] < 0)
                  {
                    if (v74[2] < 0)
                    {
                      unsigned int v73 = sub_18138BFCC(v74, &v97);
                      uint64_t v59 = &__src[v88];
                    }

                    else
                    {
                      unsigned int v73 = 3;
                    }
                  }

                  else
                  {
                    unsigned int v73 = 2;
                  }
                }

                else
                {
                  unsigned int v73 = 1;
                }

                unsigned int v72 = v73 + v70;
              }

              while (v72 <= v69);
            }
          }

          memcpy((void *)(v99 + v68), &v59[v67], v70);
          DWORD2(v99) += v70;
          if (DWORD2(v100) + DWORD2(v99) >= v93) {
            sub_18139FB7C(v1, (unsigned int *)&v98);
          }
          v67 += v70;
          uint64_t v5 = (int *)(v1 + 60);
          uint64_t v59 = &__src[v88];
          continue;
        }
      }

LABEL_203:
            if (v21 == 5 || !v21)
            {
              if (a9) {
                *a9 = *(_DWORD *)(a1 + 88);
              }
              if (a10) {
                *a10 = *(_DWORD *)(**(void **)(a1 + 48) + 96LL);
              }
            }

            goto LABEL_36;
          }

              if (!v93) {
                goto LABEL_210;
              }
LABEL_204:
              int v94 = (void (**)(const char **))&off_18C4653A8;
              if (dword_18C465380)
              {
                if ((void)xmmword_18C468B70) {
                  xmmword_18C465400(xmmword_18C468B70);
                }
                qword_18C468AC8[0] -= (int)off_18C4653B8(v93);
                --qword_18C468B10;
                off_18C4653A8(v93);
                uint64_t v93 = (const char **)xmmword_18C468B70;
                if (!(void)xmmword_18C468B70)
                {
LABEL_210:
                  a1 = v206;
                  if (v204)
                  {
LABEL_211:
                    uint64_t v95 = (void (**)(void *))&off_18C4653A8;
                    if (dword_18C465380)
                    {
                      if ((void)xmmword_18C468B70) {
                        xmmword_18C465400(xmmword_18C468B70);
                      }
                      qword_18C468AC8[0] -= (int)off_18C4653B8(v204);
                      --qword_18C468B10;
                      off_18C4653A8(v204);
                      int v204 = (void *)xmmword_18C468B70;
                      if (!(void)xmmword_18C468B70) {
                        goto LABEL_299;
                      }
                      uint64_t v95 = (void (**)(void *))&xmmword_18C465410;
                    }

                    (*v95)(v204);
LABEL_299:
                    a1 = v206;
                  }

        unsigned int v29 = v229;
        uint64_t v27 = a5;
        if (*v50 | v225) {
          goto LABEL_204;
        }
        uint64_t v143 = v229 + 136 * v25;
        int v146 = *(_DWORD *)(v143 + 104);
        uint64_t v144 = (int *)(v143 + 104);
        uint64_t v145 = v146;
        unsigned int v147 = v146 | 1;
        *uint64_t v144 = v146 | 1;
        uint64_t v148 = *v62;
        if (!*v62) {
          goto LABEL_204;
        }
        if ((v218 & 2) != 0)
        {
          unsigned int v147 = v145 | 3;
          *uint64_t v144 = v145 | 3;
        }

        if (v222 >= v220)
        {
          if (v219)
          {
            uint64_t v149 = *(_DWORD *)(v229 + 136 * v25 + 160);
            if (v149 != *v226 || *(_DWORD *)(v229 + 136 * v25 + 172) >= *(_DWORD *)(v148 + 12))
            {
              unsigned int v150 = sub_181397248(v60, v147 & 2, **v38, v149);
              unsigned int v29 = v229;
              uint64_t v27 = a5;
              *(void *)(v229 + 136 * v25 + 192) = v150;
            }
          }
        }

        if ((v218 & 2) == 0) {
          goto LABEL_204;
        }
        int v151 = *(void *)(v29 + 136 * v25 + 192);
        if (!v151 || *(_DWORD *)(*(void *)v60 + 128LL) != 4)
        {
          int v154 = (_DWORD *)v60;
          __int128 v164 = *v226;
          if (*(_DWORD *)(v29 + 136 * v25 + 160) == (_DWORD)v164) {
            __int128 v165 = *(unsigned int *)(v29 + 136 * v25 + 164);
          }
          else {
            __int128 v165 = 4LL;
          }
          __int128 v166 = *v62;
          __int128 v167 = (int)v165;
          uint64_t v168 = (int)v165 + 8;
          uint64_t v169 = v165 << 32;
          do
          {
            v169 += 0x100000000LL;
            int v98 = v167++ < v168;
          }

          while (v98);
          uint64_t v152 = v29;
          uint64_t v170 = v29 + 136 * v25;
          *(void *)(v170 + 128) = v169 >> 32;
          if (*(_DWORD *)(v170 + 172) < *(_DWORD *)(v166 + 12) || *v50) {
            goto LABEL_300;
          }
          char v171 = (uint64_t)v154;
          int v221 = 0;
          unsigned int v223 = 0LL;
          uint64_t v172 = *v38;
          int v173 = v164 + 1;
          while (2)
          {
            if (v164 >= (int)v172[2])
            {
LABEL_274:
              LODWORD(v153) = v221;
              __int128 v156 = v223;
              uint64_t v33 = v228;
              uint64_t v152 = v229;
              int v154 = (_DWORD *)v171;
              unint64_t v50 = v237;
              if (v223) {
                goto LABEL_275;
              }
LABEL_300:
              BOOL v60 = (uint64_t)v154;
              sub_1813915A4(v154, (uint64_t)v38);
              uint64_t v27 = a5;
              unsigned int v29 = v152;
              goto LABEL_204;
            }

            uint64_t v174 = sub_18138BCF4(v171, v164 + ((unint64_t)*v172 << 37) + 1);
            if (!v174) {
              goto LABEL_248;
            }
            int v175 = v174;
            uint64_t v176 = v174[2];
            if (v176 < 4 || (uint64_t v177 = v174[3], v177 > v176))
            {
              *int8x16_t v237 = 267;
              uint64_t v178 = &off_18C4653A8;
              if (!dword_18C465380)
              {
                char v171 = (uint64_t)v235;
                goto LABEL_247;
              }

              char v171 = (uint64_t)v235;
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v175);
              --qword_18C468B10;
              off_18C4653A8(v175);
              int v175 = (_DWORD *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                uint64_t v178 = &xmmword_18C465410;
LABEL_247:
                (*v178)(v175);
              }

    unsigned int v11 = 7;
    goto LABEL_216;
  }

  size_t v46 = *(_DWORD *)(a4 + 16);
  if (v46 < 1)
  {
    uint64_t v15 = 0;
    goto LABEL_15;
  }

  int v47 = 0;
  uint64_t v48 = 0LL;
  uint64_t v15 = 0;
  if (a1 == 18) {
    uint64_t v49 = 112LL;
  }
  else {
    uint64_t v49 = 104LL;
  }
  do
  {
    if (*(_BYTE *)(*(void *)(a4 + 40) + v48))
    {
      unsigned int v11 = (*(uint64_t (**)(void, uint64_t, sqlite3_value **))(a3 + v49))(*(void *)(a3 + 96), v48, &v78);
      if (v11) {
        goto LABEL_215;
      }
      if (v78)
      {
        unint64_t v50 = *((unsigned __int16 *)v78 + 10);
        int v51 = v50 & 0x3F;
        uint64_t v52 = byte_1813C6455[v50 & 0x3F];
        v15 ^= (8 * v15) ^ v52;
        if ((v52 - 1) <= 1)
        {
          if (((0x50505050uLL >> v51) & 1) != 0)
          {
            if ((v50 & 0x24) != 0)
            {
              uint64_t v54 = *(void *)v78;
            }

            else if ((v50 & 8) != 0)
            {
              *(void *)&unint64_t v4 = *(void *)v78;
              int16x8_t v56 = (uint64_t)*(double *)v78;
              else {
                uint64_t v54 = 0x8000000000000000LL;
              }
            }

            else if ((v50 & 0x12) != 0 && *((void *)v78 + 1))
            {
              uint64_t v54 = sub_181303DF0((uint64_t)v78);
            }

            else
            {
              uint64_t v54 = 0LL;
            }
          }

          else
          {
            if ((v50 & 8) != 0)
            {
              *(void *)&unint64_t v4 = *(void *)v78;
            }

            else if ((v50 & 0x24) != 0)
            {
              *(double *)&unint64_t v4 = (double)*(uint64_t *)v78;
            }

            else if ((v50 & 0x12) != 0)
            {
              *(double *)&unint64_t v4 = sub_181303DB8((uint64_t)v78);
            }

            else
            {
              *(void *)&unint64_t v4 = 0LL;
            }

            uint64_t v54 = v4;
          }

          v15 ^= HIDWORD(v54) ^ (8 * (v54 ^ (8 * v15) ^ v15)) ^ v54 ^ (8 * v15);
          goto LABEL_126;
        }

        if ((v52 - 3) <= 1)
        {
          if (((0x4000000040004uLL >> v51) & 1) != 0)
          {
            if ((~v50 & 0x202) == 0 && *((_BYTE *)v78 + 22) == 1)
            {
              uint64_t v55 = (unsigned __int8 *)*((void *)v78 + 1);
              goto LABEL_162;
            }

            if ((v50 & 1) != 0)
            {
              uint64_t v55 = 0LL;
LABEL_162:
              if (v78)
              {
                int16x8_t v57 = *((_WORD *)v78 + 10);
                if ((v57 & 2) != 0 && *((_BYTE *)v78 + 22) == 1)
                {
                  LODWORD(v58) = *((_DWORD *)v78 + 4);
                  goto LABEL_171;
                }

                if ((v57 & 0x10) != 0)
                {
                  LODWORD(v58) = *((_DWORD *)v78 + 4);
                  if ((*((_WORD *)v78 + 10) & 0x400) != 0) {
                    LODWORD(v58) = *(_DWORD *)v78 + v58;
                  }
LABEL_171:
                  if (v55)
                  {
                    if ((int)v58 >= 1)
                    {
                      uint64_t v58 = v58;
                      do
                      {
                        uint64_t v59 = *v55++;
                        v15 ^= v59 ^ (8 * v15);
                        --v58;
                      }

                      while (v58);
                    }
                  }

                  else
                  {
                    unsigned int v11 = 7;
                  }

                  goto LABEL_126;
                }

                if ((v57 & 1) == 0)
                {
                  LODWORD(v58) = sub_181303970((uint64_t)v78, 1);
                  goto LABEL_171;
                }
              }

              else
              {
                sub_1812CF36C(91138);
              }

              LODWORD(v58) = 0;
              goto LABEL_171;
            }

            unsigned __int8 v53 = sub_181303998((int *)v78, 1);
          }

          else
          {
            unsigned __int8 v53 = (uint64_t)sqlite3_value_blob(v78);
          }

          uint64_t v55 = (unsigned __int8 *)v53;
          goto LABEL_162;
        }
      }

      else
      {
        sub_1812CF36C(97220);
        v15 ^= 8 * v15;
      }

      int v47 = 1;
LABEL_126:
      size_t v46 = *(_DWORD *)(a4 + 16);
    }

    ++v48;
  }

  while (v48 < v46);
  if (!v47) {
    goto LABEL_15;
  }
  unsigned int v11 = 0;
LABEL_215:
  unsigned int v10 = a3 + 96;
LABEL_216:
  if (*(_DWORD *)(a4 + 20))
  {
    *(void *)&unint64_t v4 = v74;
    uint64_t v69 = v75;
    *(_OWORD *)unsigned int v10 = v74;
    *(_OWORD *)(v10 + 16) = v69;
    *(void *)(v10 + 32) = v76;
  }

  if (v11) {
    goto LABEL_7;
  }
  return *(double *)&v4;
}

uint64_t sub_1812C1980(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 160) || (uint64_t v5 = a2, (v6 = *(void *)(a1 + 64)) != 0) && *(_DWORD *)(*(void *)v6 + 168LL))
  {
    sqlite3_log(27, "denying truncate of invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922LL;
  }

  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 72);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    while (1)
    {
      int v9 = off_18C54FD58(v8, v5);
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_13;
      }
    }

    if (v9)
    {
LABEL_13:
      *(_DWORD *)(a1 + 32) = *__error();
      unsigned int v10 = *(const char **)(a1 + 56);
      int v11 = *__error();
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v11, __strerrbuf, 0x4FuLL);
      int v12 = &byte_1813CEAEE;
      if (v10) {
        int v12 = v10;
      }
      uint64_t v3 = 1546LL;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44694, v11, "ftruncate", v12, __strerrbuf);
      return v3;
    }

    uint64_t v3 = 0LL;
    if (v5 < *(void *)(a1 + 80)) {
      *(void *)(a1 + 80) = v5;
    }
  }

  return v3;
}

uint64_t sub_1812C1B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = 0LL;
  unsigned int v3 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!a2)
  {
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_18C465458 + 1))( *(void *)(*(void *)(*(void *)a1 + 336LL) + 72LL),  a3,  0LL);
    if (v10)
    {
      int v11 = (uint64_t *)v10;
      int v12 = *(void **)(v10 + 8);
      if (*v12)
      {
        ++*(void *)(*(void *)(v9 + 336) + 24LL);
        ++v12[7];
        goto LABEL_10;
      }

      int v12 = (void *)sub_1812FD158(*(void *)(v9 + 336), v3, v11);
      if (v12)
      {
LABEL_10:
        uint64_t v6 = v12[2];
        if (*(_DWORD *)(v6 + 4) != v3)
        {
          uint64_t v13 = v12[1];
          *(void *)(v6 + 112) = v12;
          *(void *)(v6 + 72) = a1;
          *(void *)(v6 + 80) = v13;
          *(_DWORD *)(v6 + 4) = v3;
          *(_BYTE *)(v6 + 9) = 0;
        }

        goto LABEL_13;
      }
    }

    uint64_t v6 = 0LL;
LABEL_13:
    uint64_t v36 = v6;
    goto LABEL_14;
  }

  uint64_t v36 = a2;
  uint64_t v8 = *(void *)(a2 + 112);
  ++*(void *)(v8 + 56);
  ++*(void *)(*(void *)(v8 + 24) + 24LL);
LABEL_14:
  uint64_t v14 = *(void *)(v7 + 112);
  __int128 v15 = *(_DWORD **)(v14 + 40);
  if ((*(_WORD *)(v14 + 52) & 4) != 0 && v15[8] >= *(_DWORD *)(v14 + 48))
  {
    if (!v15[32])
    {
      unsigned int v35 = 0;
      goto LABEL_34;
    }

    uint64_t v17 = sub_1812FAFE4(v14);
  }

  else
  {
    uint64_t v16 = v15[12];
    if ((_DWORD)v16) {
      goto LABEL_23;
    }
    if (v15[46] <= v15[50]) {
      uint64_t v17 = sub_1812ABE24(v14);
    }
    else {
      uint64_t v17 = sub_1812FED50(v14);
    }
  }

  uint64_t v16 = v17;
  unsigned int v35 = v17;
  if ((_DWORD)v17) {
    goto LABEL_23;
  }
LABEL_34:
  uint64_t v23 = *(void *)(v7 + 80);
  unsigned int v24 = bswap32(*(_DWORD *)(v23 + 36));
  *(_DWORD *)(v23 + 36) = bswap32(v24 + 1);
  if ((*(_WORD *)(a1 + 40) & 4) == 0)
  {
    if (*(_BYTE *)(a1 + 33)) {
      goto LABEL_36;
    }
    goto LABEL_53;
  }

  if (!v6)
  {
    uint64_t v16 = sub_1812FE760(a1, v3, &v36);
    uint64_t v6 = v36;
    if ((_DWORD)v16) {
      goto LABEL_23;
    }
  }

  uint64_t v25 = *(void *)(v6 + 112);
  uint64_t v26 = *(_DWORD **)(v25 + 40);
  if ((*(_WORD *)(v25 + 52) & 4) != 0 && v26[8] >= *(_DWORD *)(v25 + 48))
  {
    if (!v26[32])
    {
      unsigned int v35 = 0;
      goto LABEL_52;
    }

    uint64_t v27 = sub_1812FAFE4(v25);
  }

  else
  {
    uint64_t v16 = v26[12];
    if ((_DWORD)v16) {
      goto LABEL_24;
    }
    if (v26[46] <= v26[50]) {
      uint64_t v27 = sub_1812ABE24(v25);
    }
    else {
      uint64_t v27 = sub_1812FED50(v25);
    }
  }

  uint64_t v16 = v27;
  unsigned int v35 = v27;
  if ((_DWORD)v27) {
    goto LABEL_24;
  }
LABEL_52:
  bzero(*(void **)(v6 + 80), *(unsigned int *)(*(void *)(v6 + 72) + 52LL));
  if (*(_BYTE *)(a1 + 33))
  {
LABEL_36:
    sub_1812C0570((_DWORD *)a1, v3, 2, 0, &v35);
    uint64_t v16 = v35;
    if (v35) {
      goto LABEL_23;
    }
  }

const char *__cdecl sqlite3_bind_parameter_name(sqlite3_stmt *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  if (*(void *)(*(void *)a1 + 24LL)) {
    xmmword_18C465400();
  }
  uint64_t v4 = *((void *)a1 + 22);
  if (v4)
  {
    int v5 = 2;
    while (*(_DWORD *)(v4 + 4LL * v5) != a2)
    {
      v5 += *(_DWORD *)(v4 + 4LL * v5 + 4);
      if (v5 >= *(_DWORD *)(v4 + 4)) {
        goto LABEL_8;
      }
    }

    uint64_t v6 = (const char *)(v4 + 4LL * v5 + 8);
  }

  else
  {
LABEL_8:
    uint64_t v6 = 0LL;
  }

  if (*(void *)(*(void *)a1 + 24LL)) {
    xmmword_18C465410();
  }
  return v6;
}

uint64_t sub_1812C2070(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_18129B700((unsigned __int8 *)a2);
  if ((_DWORD)result == 16)
  {
    uint64_t result = 0LL;
    *a3 = 0LL;
  }

  else if (!(_DWORD)result)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(_DWORD *)(a1 + 424)) {
        return 0LL;
      }
      uint64_t v8 = *(void *)(a2 + 136);
      if (*(_BYTE *)(v8 + 8)) {
        break;
      }
      uint64_t v10 = *(unsigned __int16 *)(v8 + 24);
      if (!*(_BYTE *)(v8 + 1)) {
        v7 += v10;
      }
LABEL_16:
      uint64_t v15 = *(unsigned __int16 *)(a2 + 86);
      if ((_DWORD)v15 == (_DWORD)v10) {
        uint64_t v16 = (unsigned int *)(*(unsigned __int8 *)(v8 + 9) + *(void *)(v8 + 80) + 8LL);
      }
      else {
      uint64_t result = sub_18129BA78(a2, bswap32(*v16));
      }
      if ((_DWORD)result) {
        return result;
      }
    }

    v7 += *(unsigned __int16 *)(v8 + 24);
    while (1)
    {
      uint64_t v11 = *(char *)(a2 + 84);
      if (!*(_BYTE *)(a2 + 84)) {
        break;
      }
      *(_WORD *)(a2 + 70) = 0;
      *(_BYTE *)(a2 + 1) &= 0xF9u;
      *(_WORD *)(a2 + 86) = *(_WORD *)(a2 + 2 * v11 + 86);
      char v12 = v11 - 1;
      *(_BYTE *)(a2 + 84) = v12;
      *(void *)(a2 + 136) = *(void *)(a2 + 8LL * v12 + 144);
      uint64_t v13 = *(void *)(v8 + 112);
      if ((*(_BYTE *)(v13 + 52) & 0x20) != 0)
      {
        uint64_t v14 = *(void *)(v13 + 40);
        --*(_DWORD *)(v14 + 152);
        *(void *)(v13 + 32) = *(void *)(v14 + 168);
        *(void *)(v14 + 168) = v13;
        (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144LL))( *(void *)(v14 + 72),  *(void *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1),  *(void *)(v13 + 8));
      }

      else
      {
        sub_1812F9F44(v13);
      }

      unsigned int v9 = *(unsigned __int16 *)(a2 + 86);
      uint64_t v8 = *(void *)(a2 + 136);
      LODWORD(v10) = *(unsigned __int16 *)(v8 + 24);
      if (v9 < v10)
      {
        *(_WORD *)(a2 + 86) = v9 + 1;
        goto LABEL_16;
      }
    }

    *a3 = v7;
    return sub_18129B700((unsigned __int8 *)a2);
  }

  return result;
}

void *sub_1812C221C(void *result, void *a2)
{
  if (a2)
  {
    unsigned int v3 = result;
    uint64_t v4 = (void *)a2[7];
    int v5 = (unsigned __int8 *)v4[5];
    if (v5) {
      sub_181309110(result, v5);
    }
    uint64_t v6 = (void *)v4[6];
    if (v6) {
      sub_181311F48(v3, v6);
    }
    uint64_t v7 = v4[2];
    if (v7) {
      sub_18128FDA0(v3, v7, 1LL);
    }
    uint64_t v8 = (unsigned __int8 *)a2[3];
    if (v8) {
      sub_181309110(v3, v8);
    }
    return sub_1812F20DC(v3, a2);
  }

  return result;
}

int sqlite3_open16(const void *filename, sqlite3 **ppDb)
{
  if (!ppDb) {
    return sub_1812CF36C(189122);
  }
  *ppDb = 0LL;
  int result = sqlite3_initialize();
  if (!result)
  {
    uint64_t v5 = sub_18126F0AC(64LL);
    if (!v5) {
      return 7;
    }
    uint64_t v6 = v5;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    if (filename) {
      uint64_t v7 = (char *)filename;
    }
    else {
      uint64_t v7 = (char *)&unk_1813C6C14;
    }
    *(_OWORD *)uint64_t v5 = 0uLL;
    *(_OWORD *)(v5 + 16) = 0uLL;
    *(_WORD *)(v5 + 20) = 1;
    *(void *)(v5 + 24) = 0LL;
    sub_181269368(v5, v7, -1LL, 2u, 0LL);
    int v8 = *(unsigned __int16 *)(v6 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
    {
      if ((v8 & 1) != 0) {
        goto LABEL_18;
      }
      unsigned int v9 = (char *)sub_181303998((int *)v6, 1);
      if (!v9) {
        goto LABEL_18;
      }
    }

    else
    {
      unsigned int v9 = *(char **)(v6 + 8);
      if (!v9)
      {
LABEL_18:
        unsigned __int8 v11 = 7;
LABEL_19:
        if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32)) {
          sub_181303838(v6);
        }
        sub_1812F20DC(*(void **)(v6 + 24), (void *)v6);
        return v11;
      }
    }

    int v10 = sub_181266F84(v9, (uint64_t *)ppDb, 6u, 0LL);
    unsigned __int8 v11 = v10;
    if (!v10)
    {
      uint64_t v12 = *(void *)(*((void *)*ppDb + 4) + 24LL);
      unsigned __int8 v11 = 0;
      if ((*(_WORD *)(v12 + 114) & 1) == 0)
      {
        *((_BYTE *)*ppDb + 100) = 2;
        *(_BYTE *)(v12 + 113) = 2;
      }
    }

    goto LABEL_19;
  }

  return result;
}

uint64_t sub_1812C23E8(int *a1, int a2)
{
  if (a2 == 1 || *((_BYTE *)a1 + 22) == 1)
  {
    int v15 = a1[4];
    unint64_t v16 = v15;
    if (a2 == 1)
    {
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      a1[4] = v16;
      uint64_t v17 = (4 * (v16 >> 1)) | 1;
      v15 &= ~1u;
    }

    else
    {
      uint64_t v17 = 2LL * v15 + 2;
    }

    uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 1);
    uint64_t v19 = *((void *)a1 + 3);
    if (v19)
    {
      unint64_t v20 = sub_1812F2264(v19, v17);
      if (!v20) {
        return 7LL;
      }
    }

    else
    {
      unint64_t v20 = sub_18126F0AC(v17);
      if (!v20) {
        return 7LL;
      }
    }

    uint64_t v21 = &v18[v16];
    int v22 = *((unsigned __int8 *)a1 + 22);
    if (v22 != 1)
    {
      if (v22 == 2)
      {
        uint64_t v23 = (_BYTE *)v20;
        if (v15 >= 1)
        {
          uint64_t v23 = (_BYTE *)v20;
          do
          {
            int v28 = *v18;
            uint64_t v29 = v18 + 2;
            int v30 = v18[1];
            unsigned int v31 = v28 | (v30 << 8);
            if ((v30 & 0xF8) != 0xD8 || v29 >= v21)
            {
              if (v31 > 0x7F)
              {
                char v33 = v28 & 0x3F | 0x80;
                if (v31 > 0x7FF)
                {
                  _BYTE *v23 = (v18[1] >> 4) | 0xE0;
                  v23[1] = (v31 >> 6) & 0x3F | 0x80;
                  v23[2] = v33;
                  v23 += 3;
                }

                else
                {
                  _BYTE *v23 = (v31 >> 6) | 0xC0;
                  v23[1] = v33;
                  v23 += 2;
                }
              }

              else
              {
                *v23++ = v28;
              }
            }

            else
            {
              int v24 = v18[2];
              uint64_t v29 = v18 + 4;
              char v25 = v24 & 0x3F | 0x80;
              unsigned int v26 = v24 & 0xFFFC00FF | ((v18[3] & 3) << 8) & 0x3FF | (*v18 << 10);
              unsigned int v27 = ((v31 << 10) & 0xF0000) + 0x10000;
              _BYTE *v23 = (v27 >> 18) | 0xF0;
              v23[1] = ((v27 & 0xFFFF0000 | (unsigned __int16)((_WORD)v28 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v26 >> 6) & 0x3F | 0x80;
              v23[3] = v25;
              v23 += 4;
            }

            uint64_t v18 = v29;
          }

          while (v29 < v21);
        }
      }

      else
      {
        uint64_t v23 = (_BYTE *)v20;
        if (v15 >= 1)
        {
          uint64_t v23 = (_BYTE *)v20;
          do
          {
            int v46 = *v18;
            int v47 = v18 + 2;
            int v48 = v18[1];
            unsigned int v49 = v48 | (v46 << 8);
            if ((v46 & 0xF8) != 0xD8 || v47 >= v21)
            {
              if (v49 > 0x7F)
              {
                char v51 = v48 & 0x3F | 0x80;
                if (v49 > 0x7FF)
                {
                  _BYTE *v23 = (*v18 >> 4) | 0xE0;
                  v23[1] = (v49 >> 6) & 0x3F | 0x80;
                  v23[2] = v51;
                  v23 += 3;
                }

                else
                {
                  _BYTE *v23 = (v49 >> 6) | 0xC0;
                  v23[1] = v51;
                  v23 += 2;
                }
              }

              else
              {
                *v23++ = v48;
              }
            }

            else
            {
              int v47 = v18 + 4;
              int v42 = v18[3];
              char v43 = v42 & 0x3F | 0x80;
              unsigned int v44 = v42 & 0xFFFC00FF | ((v18[2] & 3) << 8) & 0x3FF | (v18[1] << 10);
              unsigned int v45 = ((v49 << 10) & 0xF0000) + 0x10000;
              _BYTE *v23 = (v45 >> 18) | 0xF0;
              v23[1] = ((v45 & 0xFFFF0000 | (unsigned __int16)((_WORD)v48 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v44 >> 6) & 0x3F | 0x80;
              v23[3] = v43;
              v23 += 4;
            }

            uint64_t v18 = v47;
          }

          while (v47 < v21);
        }
      }

      a1[4] = (_DWORD)v23 - v20;
LABEL_91:
      _BYTE *v23 = 0;
      __int16 v60 = a1[5] & 0x83D | 0x202;
      if ((a1[5] & 0x9000) != 0 || a1[8]) {
        sub_181303838((uint64_t)a1);
      }
      *((_WORD *)a1 + 10) = v60;
      *((_BYTE *)a1 + 22) = a2;
      *((void *)a1 + 1) = v20;
      *((void *)a1 + 5) = v20;
      uint64_t v61 = *((void *)a1 + 3);
      if (v61 && *(void *)(v61 + 520) > v20)
      {
        if (*(void *)(v61 + 496) <= v20)
        {
          int v62 = 128;
          goto LABEL_99;
        }

        if (*(void *)(v61 + 504) <= v20)
        {
          int v62 = *(unsigned __int16 *)(v61 + 438);
          goto LABEL_99;
        }
      }

      int v62 = off_18C4653B8(v20);
LABEL_99:
      uint64_t result = 0LL;
      a1[8] = v62;
      return result;
    }

    unsigned int v35 = (_BYTE *)v20;
    if (a2 == 2)
    {
      if (v15 >= 1)
      {
        uint64_t v36 = &v18[v16];
        unsigned int v35 = (_BYTE *)v20;
        while (1)
        {
          unsigned int v38 = *v18++;
          __int16 v37 = v38;
          unsigned int v39 = v38 - 192;
          if (v38 < 0xC0) {
            goto LABEL_47;
          }
          unsigned int v40 = byte_1813C6D06[v39];
          if (v18 == v21)
          {
            uint64_t v18 = v21;
          }

          else
          {
            while (1)
            {
              unsigned __int8 v41 = *v18;
              if ((*v18 & 0xC0) != 0x80) {
                break;
              }
              ++v18;
              unsigned int v40 = v41 & 0x3F | (v40 << 6);
              if (v18 == v21)
              {
                uint64_t v18 = v36;
                break;
              }
            }
          }

          __int16 v37 = -3;
          if (v40 >> 1 == 0x7FFF || v40 < 0x80 || (v40 & 0xFFFFF800) == 0xD800) {
            goto LABEL_47;
          }
          if (HIWORD(v40))
          {
            *unsigned int v35 = ((v40 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v40 >> 10);
            v35[1] = ((v40 - 0x10000) >> 18) & 3 | 0xD8;
            void v35[2] = v40;
            v35[3] = BYTE1(v40) & 3 | 0xDC;
            v35 += 4;
            if (v18 >= v21) {
              break;
            }
          }

          else
          {
            __int16 v37 = v40;
LABEL_47:
            *(_WORD *)unsigned int v35 = v37;
            v35 += 2;
            if (v18 >= v21) {
              break;
            }
          }
        }
      }

int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1812C2AC8((uint64_t)db, (char *)zSql, nByte, 128LL, ppStmt, pzTail);
}

uint64_t sub_1812C2AC8(uint64_t a1, char *__s, int a3, uint64_t a4, void *a5, void *a6)
{
  int v9 = a3;
  uint64_t v35 = 0LL;
  if (a6) {
    *a6 = 0LL;
  }
  if (!a5) {
    return sub_1812CF36C(148826);
  }
  *a5 = 0LL;
  if (!a1)
  {
    uint64_t v13 = "NULL";
    goto LABEL_24;
  }

  int v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 == 186)
  {
LABEL_8:
    uint64_t v13 = "unopened";
LABEL_24:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1812CF36C(148830);
  }

  if (v12 != 118)
  {
    if (v12 != 109)
    {
      uint64_t v13 = "invalid";
      goto LABEL_24;
    }

    goto LABEL_8;
  }

  if (!__s) {
    return sub_1812CF36C(148830);
  }
  if ((a3 & 0x80000000) == 0 && a3)
  {
    uint64_t v15 = 0LL;
    do
    {
      if (!__s[v15] && !__s[v15 + 1]) {
        break;
      }
      v15 += 2LL;
    }

    while ((int)v15 < a3);
    int v9 = v15;
  }

  uint64_t v16 = *(void *)(a1 + 24);
  if (v16) {
    xmmword_18C465400(v16);
  }
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v36 = 0u;
  uint64_t v37 = 0LL;
  uint64_t v38 = a1;
  sub_181269368((uint64_t)&v36, __s, v9, 2u, 0LL);
  if ((v37 & 0x200000000LL) != 0)
  {
    if (BYTE6(v37) != 1) {
      sub_1812C23E8((int *)&v36, 1);
    }
  }

  else
  {
    BYTE6(v37) = 1;
  }

  if (*(_BYTE *)(a1 + 103))
  {
    goto LABEL_47;
  }

  uint64_t v18 = (void *)*((void *)&v36 + 1);
  if (!*((void *)&v36 + 1))
  {
LABEL_47:
    unsigned int v19 = 0;
    goto LABEL_51;
  }

  unsigned int v19 = sub_18126DFE0(a1, *((unsigned __int8 **)&v36 + 1), 0xFFFFFFFFLL, a4, 0LL, a5, &v35, v17);
  if (a6 && v35)
  {
    unint64_t v20 = (unint64_t)v18 + (v35 - (_DWORD)v18);
    unsigned int v21 = *(unsigned __int8 *)v18;
    if (*(_BYTE *)v18 && v20 > (unint64_t)v18)
    {
      int v22 = 1;
      uint64_t v23 = v18;
      do
      {
        int v26 = v22;
        if (v21 < 0xC0)
        {
          unsigned int v24 = *((unsigned __int8 *)v23 + 1);
          uint64_t v23 = (void *)((char *)v23 + 1);
          unsigned int v21 = v24;
        }

        else
        {
          do
          {
            unsigned int v27 = *((unsigned __int8 *)v23 + 1);
            uint64_t v23 = (void *)((char *)v23 + 1);
            unsigned int v21 = v27;
          }

          while ((v27 & 0xC0) == 0x80);
        }

        ++v22;
        if (v21) {
          BOOL v25 = (unint64_t)v23 >= v20;
        }
        else {
          BOOL v25 = 1;
        }
      }

      while (!v25);
      unsigned int v31 = __s + 1;
      int v28 = __s + 1;
      do
      {
        char v32 = *v28;
        v28 += 2;
        if ((v32 & 0xFC) == 0xD8)
        {
          int v33 = v31[2] & 0xFC;
          __int16 v34 = v31 + 4;
          if (v33 == 220) {
            int v28 = v34;
          }
        }

        unsigned int v31 = v28;
        --v26;
      }

      while (v26);
    }

    else
    {
      LODWORD(v28) = (_DWORD)__s + 1;
    }

    *a6 = &__s[(int)v28 + ~(_DWORD)__s];
  }

  sub_1812F20DC((void *)a1, v18);
  if (v19) {
    goto LABEL_53;
  }
LABEL_51:
  if (*(_BYTE *)(a1 + 103))
  {
LABEL_53:
    uint64_t v29 = sub_1813037C4(a1, v19);
    goto LABEL_54;
  }

  uint64_t v29 = 0LL;
LABEL_54:
  uint64_t v30 = *(void *)(a1 + 24);
  if (v30) {
    xmmword_18C465410(v30);
  }
  return v29;
}

int sqlite3_data_count(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0;
  }
  if (*(void *)(*(void *)pStmt + 24LL)) {
    xmmword_18C465400();
  }
  if (*((void *)pStmt + 20)) {
    int v2 = *((unsigned __int16 *)pStmt + 130);
  }
  else {
    int v2 = 0;
  }
  if (*(void *)(*(void *)pStmt + 24LL)) {
    xmmword_18C465410();
  }
  return v2;
}

const void *__cdecl sqlite3_column_text16(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  if (v4) {
    xmmword_18C465400(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1812FA264(v7, 25);
LABEL_8:
    signed int v6 = &qword_1813C6E90;
    goto LABEL_9;
  }

  signed int v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
LABEL_9:
  int v8 = *((unsigned __int16 *)v6 + 10);
  if ((~v8 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 2)
  {
    if ((v8 & 1) != 0)
    {
      int v9 = 0LL;
      if (!a1) {
        return v9;
      }
    }

    else
    {
      int v9 = (const void *)sub_181303998((int *)v6, 2);
      if (!a1) {
        return v9;
      }
    }
  }

  else
  {
    int v9 = (const void *)v6[1];
    if (!a1) {
      return v9;
    }
  }

  uint64_t v10 = *(void *)a1;
  unsigned int v11 = *((_DWORD *)a1 + 13);
  if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    int v12 = sub_1813037C4(v10, v11);
    uint64_t v10 = *(void *)a1;
  }

  *((_DWORD *)a1 + 13) = v12;
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_18C465410(v13);
  }
  return v9;
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sub_1812B2220((uint64_t *)a1, a2, (char *)a3, (int)(a4 & 0xFFFFFFFE), (uint64_t (*)(uint64_t))a5, 2u);
}

uint64_t sub_1812C2F30(uint64_t a1, char *__src, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  signed int v6 = __src;
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 < 1 || a4 + (int)a3 <= v8)
  {
    if (a4 < 1)
    {
      if (!a4)
      {
        uint64_t v36 = *(void *)(a1 + 16);
        if (v36)
        {
          memcpy((void *)(v36 + 8), __src, (int)a3);
          return 0LL;
        }
      }
    }

    else if (*(void *)(a1 + 24) != a4)
    {
      sub_1812C32AC(a1, a4);
    }

    if ((int)v5 >= 1)
    {
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t v19 = 3082LL;
      while (1)
      {
        int v22 = *(void **)(a1 + 32);
        uint64_t v24 = *(int *)(a1 + 8);
        uint64_t v25 = v20 % v24;
        int v26 = v24 - v20 % v24;
        else {
          int v27 = v5;
        }
        if (!(_DWORD)v25)
        {
          uint64_t v28 = (v24 + 8);
          int v29 = sqlite3_initialize();
          uint64_t v30 = (void *)sub_18126F0AC(v28);
          if (!v30) {
            return 3082LL;
          }
          void *v30 = 0LL;
          if (v22) {
            unsigned int v21 = v22;
          }
          else {
            unsigned int v21 = (void *)(a1 + 16);
          }
          *unsigned int v21 = v30;
          *(void *)(a1 + 32) = v30;
          int v22 = v30;
        }

        memcpy((char *)v22 + v25 + 8, v6, v27);
        v6 += v27;
        uint64_t v20 = *(void *)(a1 + 24) + v27;
        *(void *)(a1 + 24) = v20;
        BOOL v23 = __OFSUB__((_DWORD)v5, v27);
        LODWORD(v5) = v5 - v27;
      }
    }

    return 0LL;
  }

  uint64_t v10 = *(void *)a1;
  LODWORD(v11) = *(_DWORD *)(a1 + 8);
  int v12 = *(void **)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  __int128 v14 = *(_OWORD *)(a1 + 32);
  uint64_t v45 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v43 = v15;
  __int128 v44 = v14;
  uint64_t v41 = v17;
  uint64_t v42 = v16;
  uint64_t v18 = (*(uint64_t (**)(void))(v16 + 40))();
  uint64_t v19 = v18;
  if ((_DWORD)v18)
  {
LABEL_10:
    if (*(void *)a1) {
      (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
    }
    *(void *)a1 = v10;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v8;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 32) = v44;
    *(void *)(a1 + 48) = v45;
    *(void *)(a1 + 56) = v43;
    *(void *)(a1 + 64) = v42;
    *(void *)(a1 + 72) = v41;
    return v19;
  }

  if (v12)
  {
    uint64_t v40 = v10;
    uint64_t v38 = v4;
    uint64_t v31 = 0LL;
    char v32 = v12;
    int v39 = v11;
    do
    {
      else {
        uint64_t v11 = (v13 - v31);
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 24LL))( a1,  v32 + 1,  v11,  v31);
      if ((_DWORD)v33)
      {
        uint64_t v19 = v33;
        uint64_t v10 = v40;
        LODWORD(v11) = v39;
        goto LABEL_10;
      }

      v31 += (int)v11;
      char v32 = (void *)*v32;
    }

    while (v32);
    uint64_t v4 = v38;
    do
    {
      __int16 v34 = (void *)*v12;
      uint64_t v35 = &off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v12);
        --qword_18C468B10;
        off_18C4653A8(v12);
        int v12 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_38;
        }
        uint64_t v35 = &xmmword_18C465410;
      }

      (*v35)(v12);
LABEL_38:
      int v12 = v34;
    }

    while (v34);
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v6, v5, v4);
}

uint64_t sub_1812C32AC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) > a2)
  {
    if (a2)
    {
      uint64_t v4 = (void *)(a1 + 16);
      uint64_t v5 = *(int *)(a1 + 8);
      do
      {
        uint64_t v4 = (void *)*v4;
        if (v4) {
          BOOL v6 = v5 < a2;
        }
        else {
          BOOL v6 = 0;
        }
        v5 += *(int *)(a1 + 8);
      }

      while (v6);
      if (!v4)
      {
        uint64_t v10 = 0LL;
        goto LABEL_31;
      }

      uint64_t v7 = (void *)*v4;
      if (*v4)
      {
        do
        {
          uint64_t v8 = (void *)*v7;
          int v9 = (uint64_t (**)(void))&off_18C4653A8;
          if (dword_18C465380)
          {
            if ((void)xmmword_18C468B70) {
              xmmword_18C465400();
            }
            qword_18C468AC8 -= (int)off_18C4653B8(v7);
            --qword_18C468B10;
            off_18C4653A8(v7);
            uint64_t v7 = (void *)xmmword_18C468B70;
            if (!(void)xmmword_18C468B70) {
              goto LABEL_12;
            }
            int v9 = &xmmword_18C465410;
          }

          ((void (*)(void *))*v9)(v7);
LABEL_12:
          uint64_t v7 = v8;
        }

        while (v8);
      }

      uint64_t v10 = v4;
LABEL_29:
      *uint64_t v4 = 0LL;
LABEL_31:
      *(void *)(a1 + 24) = a2;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = 0LL;
      *(void *)(a1 + 48) = 0LL;
      return 0LL;
    }

    uint64_t v4 = (void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 16);
    if (!v11)
    {
LABEL_28:
      uint64_t v10 = 0LL;
      goto LABEL_29;
    }

    while (1)
    {
      int v12 = (void *)*v11;
      uint64_t v13 = (uint64_t (**)(void))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400();
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v11);
        --qword_18C468B10;
        off_18C4653A8(v11);
        uint64_t v11 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_22;
        }
        uint64_t v13 = &xmmword_18C465410;
      }

      ((void (*)(void *))*v13)(v11);
LABEL_22:
      uint64_t v11 = v12;
      if (!v12) {
        goto LABEL_28;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1812C3488(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    do
    {
      int v2 = (void *)*v1;
      unsigned int v3 = (uint64_t (**)(void))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400();
        }
        qword_18C468AC8 -= (int)off_18C4653B8(v1);
        --qword_18C468B10;
        off_18C4653A8(v1);
        uint64_t v1 = (void *)xmmword_18C468B70;
        if (!(void)xmmword_18C468B70) {
          goto LABEL_4;
        }
        unsigned int v3 = &xmmword_18C465410;
      }

      ((void (*)(void *))*v3)(v1);
LABEL_4:
      uint64_t v1 = v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_1812C355C(uint64_t a1, int a2, char *__s1)
{
  uint64_t v193 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (*(void *)a1)
    {
      if (*(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)a1 + 16LL) == sub_18126C830
        && a2 != 106
        && *(_DWORD *)(a1 + 128) <= 3u
        && (*(_DWORD *)(a1 + 160) || (uint64_t v34 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v34 + 168LL)))
      {
        if (a2 != 101 || !__s1 || (int v7 = *(_DWORD *)__s1, (*(_DWORD *)__s1 & 0x80) == 0))
        {
          sqlite3_log(27, "denying fcntl on invalidated fd %d", *(_DWORD *)(a1 + 24));
          return 6922LL;
        }

        uint64_t v26 = *(void *)(a1 + 152);
        *(void *)(a1 + 152) = 0LL;
LABEL_91:
        *(void *)&v186.st_dev = 0LL;
        if (*(_UNKNOWN **)a1 == &unk_189B6D220) {
          int v36 = *(_DWORD *)(a1 + 124) | 0x20;
        }
        else {
          int v36 = *(_DWORD *)(a1 + 124);
        }
        if ((v7 & 0x7F) != 0)
        {
          uint64_t v37 = (const char *)sub_1812F42AC();
          if (!v37 || (uint64_t v38 = v37, v39 = strlen(v37), v39 <= 0))
          {
            sqlite3_log(1, "Truncate database failed because TMPDIR is not set correctly\n");
            uint64_t v5 = 3LL;
            goto LABEL_302;
          }
        }

        else
        {
          uint64_t v38 = 0LL;
          int v39 = 0;
        }

        int v40 = v7 & 1;
        int v183 = v36;
        uint64_t v41 = sub_1812F66A0(a1, v36, (uint64_t *)&v186.st_dev);
        if (!(_DWORD)v41)
        {
          LODWORD(v42) = 0;
          if ((v7 & 1) != 0)
          {
            int v43 = 0;
          }

          else
          {
            int v43 = 0;
            if (*(void *)&v186.st_dev)
            {
              LODWORD(v42) = 0;
              int v43 = 0;
              int v40 = *(_DWORD *)(*(void *)&v186.st_dev + 8LL);
            }
          }

LABEL_235:
          if ((v7 & 0x7F) == 0)
          {
            uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, *(_DWORD *)(a1 + 128) & 1LL);
            BOOL v92 = 0;
LABEL_259:
            if ((v7 & 0x80) != 0 || (uint64_t v5 = v91, !(_DWORD)v91))
            {
              sub_1812F6DC4(a1, 0);
              uint64_t v5 = 0LL;
            }

            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, 3LL);
            if (v43)
            {
              unsigned int v96 = *(unsigned __int8 *)(a1 + 28);
              if (v42 < v96)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64LL))(a1, 1LL);
                unsigned int v96 = *(unsigned __int8 *)(a1 + 28);
              }
            }

            else if (*(void *)&v186.st_dev)
            {
              sub_1812F70C4(*(uint64_t *)&v186.st_dev);
            }

            __strlcpy_chk();
            __strlcat_chk();
            __strlcpy_chk();
            __strlcat_chk();
            if (ftruncate(*(_DWORD *)(a1 + 24), 0LL))
            {
              int v97 = *__error();
              if (v97)
              {
                *(_DWORD *)(a1 + 32) = v97;
                uint64_t v5 = 10LL;
                char v98 = 1;
                goto LABEL_277;
              }

              char v98 = 0;
            }

            else
            {
              char v98 = 0;
              int v97 = 0;
            }

            uint64_t v5 = 0LL;
LABEL_277:
            int v99 = sub_1812F2E3C(__strerrbuf, 2, 0LL, 0);
            int v100 = v99;
            if (v99 < 0)
            {
              if (*__error() != 2)
              {
LABEL_279:
                int v101 = *__error();
                if (v101) {
                  char v102 = v98;
                }
                else {
                  char v102 = 1;
                }
                if ((v102 & 1) == 0)
                {
                  *(_DWORD *)(a1 + 32) = v101;
                  uint64_t v5 = 10LL;
                }

    uint64_t v80 = v211;
    goto LABEL_102;
  }

LABEL_225:
                size_t v83 = strlen(__s1) + 1;
                int v84 = (void *)sub_18126F0AC(v83);
                BOOL v85 = v84;
                if (v84) {
                  memcpy(v84, __s1, v83);
                }
                uint64_t v5 = 0LL;
                *(void *)(v56 + 24) = v85;
                return v5;
              }

              unsigned int v81 = &xmmword_18C465410;
            }

            (*v81)(v80);
            goto LABEL_218;
          }
        }
      }

      return 0LL;
    case 4:
      uint64_t v5 = 0LL;
      *(_DWORD *)__s1 = *(_DWORD *)(a1 + 32);
      return v5;
    case 5:
      *(void *)(a1 + 136) = *(void *)__s1;
      uint64_t v8 = *(void *)__s1;
      if (off_18C54FD40(*(unsigned int *)(a1 + 24), __strerrbuf))
      {
        *(_DWORD *)(a1 + 32) = *__error();
        return 1802LL;
      }

      uint64_t v46 = (v8 + *(int *)(a1 + 72) - 1) / *(int *)(a1 + 72) * *(int *)(a1 + 72);
      if (v46 <= v191) {
        goto LABEL_122;
      }
      uint64_t v47 = v192;
      off_t v48 = v191 + v192 + ~(v191 % v192);
      uint64_t v49 = v46 - 1 + v192;
      if (v48 >= v49) {
        goto LABEL_122;
      }
      do
      {
        if (v48 >= v46) {
          off_t v50 = v46 - 1;
        }
        else {
          off_t v50 = v48;
        }
        off_t v48 = v50 + v47;
      }

      while (v50 + v47 < v49);
LABEL_122:
      uint64_t v68 = *(unsigned int *)(a1 + 24);
      while (1)
      {
        int v69 = off_18C54FD58(v68, v8);
        if ((v69 & 0x80000000) == 0) {
          break;
        }
        if (*__error() != 4) {
          goto LABEL_203;
        }
      }

      if (!v69) {
        return sub_1812F3F64(a1, v8);
      }
LABEL_203:
      *(_DWORD *)(a1 + 32) = *__error();
      uint64_t v77 = *(const char **)(a1 + 56);
      int v78 = *__error();
      memset(__strerrbuf, 0, 80);
      strerror_r(v78, __strerrbuf, 0x4FuLL);
      uint64_t v79 = &byte_1813CEAEE;
      if (v77) {
        uint64_t v79 = v77;
      }
      uint64_t v5 = 1546LL;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44827, v78, "ftruncate", v79, __strerrbuf);
      return v5;
    case 6:
      uint64_t v5 = 0LL;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)__s1;
      return v5;
    case 10:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        uint64_t v5 = 0LL;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 2) & 1;
      }

      else
      {
        __int16 v9 = *(_WORD *)(a1 + 30);
        uint64_t v5 = 0LL;
        if (*(_DWORD *)__s1) {
          *(_WORD *)(a1 + 30) = v9 | 4;
        }
        else {
          *(_WORD *)(a1 + 30) = v9 & 0xFFFB;
        }
      }

      return v5;
    case 12:
      uint64_t v5 = 0LL;
      *(void *)__s1 = sqlite3_mprintf("%s", *(const char **)(*(void *)(a1 + 8) + 24LL));
      return v5;
    case 13:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        uint64_t v5 = 0LL;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 4) & 1;
      }

      else
      {
        __int16 v10 = *(_WORD *)(a1 + 30);
        uint64_t v5 = 0LL;
        if (*(_DWORD *)__s1) {
          *(_WORD *)(a1 + 30) = v10 | 0x10;
        }
        else {
          *(_WORD *)(a1 + 30) = v10 & 0xFFEF;
        }
      }

      return v5;
    case 16:
      uint64_t v11 = *(int *)(*(void *)(a1 + 8) + 8LL);
      if (sqlite3_initialize()) {
        return 0LL;
      }
      int v12 = (char *)sub_18126F0AC(v11);
      if (!v12) {
        return 0LL;
      }
      uint64_t v13 = v12;
      sub_1812F3E24(*(_DWORD *)(*(void *)(a1 + 8) + 8LL), v12);
      uint64_t v5 = 0LL;
      *(void *)__s1 = v13;
      return v5;
    case 18:
      uint64_t v14 = *(void *)__s1;
      if (*(void *)__s1 >= qword_18C4654B0) {
        uint64_t v14 = qword_18C4654B0;
      }
      *(void *)__s1 = *(void *)(a1 + 96);
      if (v14 < 0) {
        return 0LL;
      }
      if (v14 == *(void *)(a1 + 96)) {
        return 0LL;
      }
      if (*(_DWORD *)(a1 + 76)) {
        return 0LL;
      }
      uint64_t v16 = (void *)(a1 + 80);
      uint64_t v15 = *(void *)(a1 + 80);
      *(void *)(a1 + 96) = v14;
      if (v15 < 1) {
        return 0LL;
      }
      uint64_t v17 = *(void *)(a1 + 104);
      if (v17)
      {
        off_18C54FEF0(v17, *(void *)(a1 + 88));
        *(void *)(a1 + 104) = 0LL;
        *uint64_t v16 = 0LL;
        *(void *)(a1 + 88) = 0LL;
      }

      return sub_1812F3F64(a1, -1LL);
    case 20:
      uint64_t v19 = *(void *)(a1 + 16);
      if (v19)
      {
        else {
          LODWORD(v19) = *(void *)&__strerrbuf[8] != *(void *)(*(void *)(a1 + 16) + 8LL);
        }
      }

      uint64_t v5 = 0LL;
      *(_DWORD *)__s1 = v19;
      return v5;
    case 34:
      uint64_t v5 = 0LL;
      int v20 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)__s1;
      *(_DWORD *)__s1 = v20;
      return v5;
    case 40:
      *(_DWORD *)__s1 = 0;
      unsigned int v21 = *(uint64_t **)(a1 + 64);
      if (!v21) {
        return 0LL;
      }
      uint64_t v22 = *v21;
      *(void *)&char __strerrbuf[16] = 0x300000000LL;
      *(_OWORD *)__strerrbuf = xmmword_1813CDC60;
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23) {
        xmmword_18C465400(v23);
      }
      uint64_t v24 = *(unsigned int *)(v22 + 24);
      int v25 = off_18C54FD70(v24, 92LL);
      if (v25 != -1) {
        goto LABEL_52;
      }
      if (*__error() != 45 && *__error() != 25) {
        goto LABEL_108;
      }
      int v25 = off_18C54FD70(v24, 7LL);
LABEL_52:
      if ((v25 & 0x80000000) == 0)
      {
        uint64_t v5 = 0LL;
        *(_DWORD *)__s1 = *(unsigned __int16 *)&__strerrbuf[20] != 2;
      }

      else
      {
LABEL_108:
        uint64_t v5 = 3850LL;
      }

      uint64_t v44 = *(void *)(v22 + 8);
      if (v44) {
        xmmword_18C465410(v44);
      }
      return v5;
    case 101:
      uint64_t v26 = 0LL;
      if (__s1) {
        int v7 = *(_DWORD *)__s1;
      }
      else {
        LOBYTE(v7) = 0;
      }
      goto LABEL_91;
    case 102:
      if (!__s1)
      {
        uint64_t v35 = "NULL";
LABEL_154:
        uint64_t v5 = 21LL;
        sqlite3_log(21, "API call with %s database connection pointer", v35);
        return v5;
      }

      int v27 = __s1[113];
      switch(v27)
      {
        case 186:
          goto LABEL_60;
        case 118:
          char v51 = *(unsigned __int8 **)(**(void **)(*(void *)(*((void *)__s1 + 4) + 8LL) + 8LL) + 320LL);
          if (v51 && (v53 = *v51, v51 += 2, (int v52 = v53) != 0))
          {
            int v54 = *(_DWORD *)(a1 + 168);
          }

          else
          {
            int v54 = *(_DWORD *)(a1 + 168);
            if (v54 < 1)
            {
LABEL_186:
              int v187 = 0LL;
              errmsg = 0LL;
              goto LABEL_187;
            }

            int v52 = 0;
          }

          if (v52 != v54 || memcmp(v51, *(const void **)(a1 + 176), v54))
          {
            sqlite3_log(21, "Replacement SPI only supports encrypted databases when keys match");
            return sub_1812CF36C(45972);
          }

          goto LABEL_186;
        case 109:
LABEL_60:
          uint64_t v28 = "unopened";
          break;
        default:
          uint64_t v28 = "invalid";
          break;
      }

      sqlite3_log(21, "API call with %s database connection pointer", v28);
      int v55 = __s1[113];
      int v187 = 0LL;
      errmsg = 0LL;
      if (v55 == 186)
      {
LABEL_147:
        uint64_t v35 = "unopened";
        goto LABEL_154;
      }

      if (v55 != 118)
      {
        if (v55 != 109)
        {
          uint64_t v35 = "invalid";
          goto LABEL_154;
        }

        goto LABEL_147;
      }

LABEL_388:
            sub_1812E03C8((uint64_t)v133, 0);
            int v187 = 0LL;
            goto LABEL_389;
          }

          uint64_t v184 = *(void *)(*((void *)__s1 + 4) + 8LL);
          if (*(_BYTE *)(v114 + 17))
          {
            ++*(_DWORD *)(v114 + 20);
            if (!*(_BYTE *)(v114 + 18))
            {
              sub_1812FDE20(v114);
              uint64_t v114 = v184;
            }
          }

          uint64_t v115 = *(void *)(**(void **)(v114 + 8) + 72LL);
          if (!*(void *)v115)
          {
            uint64_t v122 = 0LL;
            uint64_t v123 = 0LL;
            uint64_t v124 = 0LL;
            int v182 = 0;
LABEL_385:
            char v125 = 0;
            goto LABEL_386;
          }

          if ((*(_DWORD *)(v115 + 120) & 2) != 0) {
            int v116 = 2;
          }
          else {
            int v116 = 1;
          }
          int v117 = v116 | *(_DWORD *)(v115 + 124);
          if (*(_UNKNOWN **)v115 == &unk_189B6D220) {
            unsigned int v118 = v117 | 0x20;
          }
          else {
            unsigned int v118 = v117;
          }
          uint64_t v178 = v115;
          unsigned int v177 = v118;
          uint64_t v119 = sub_181266F84(*(char **)(v115 + 56), (uint64_t *)&v187, v118, 0LL);
          if ((_DWORD)v119)
          {
            uint64_t v5 = v119;
            LODWORD(v120) = 0;
            int v121 = 0;
            int v182 = 0;
            int v176 = -1;
          }

          else
          {
            __buf[0] = 0LL;
            int v128 = sqlite3_file_control(v187, 0LL, 7, __buf);
            if (__buf[0]) {
              BOOL v129 = v128 == 0;
            }
            else {
              BOOL v129 = 0;
            }
            if (v129) {
              unsigned int v130 = __buf[0];
            }
            else {
              unsigned int v130 = (sqlite3 *)v178;
            }
            int v131 = sub_1812F6B0C((uint64_t)v130);
            int v176 = v131 == 1;
            sqlite3_busy_timeout(v187, *((_DWORD *)__s1 + 193));
            uint64_t v5 = sqlite3_exec(v187, "BEGIN DEFERRED; PRAGMA schema_version", 0LL, 0LL, 0LL);
            if ((_DWORD)v5 == 14 && v131 == 1)
            {
              sub_1812E03C8((uint64_t)v187, 0);
              int v187 = 0LL;
              uint64_t v5 = sub_181266F84(*(char **)(v178 + 56), (uint64_t *)&v187, v177 & 0xFFFFFFFC | 2, 0LL);
              if (!(_DWORD)v5)
              {
                sqlite3_busy_timeout(v187, *((_DWORD *)__s1 + 193));
                uint64_t v5 = sqlite3_exec(v187, "BEGIN DEFERRED; PRAGMA schema_version", 0LL, 0LL, 0LL);
              }
            }

            if (v131 == 1 && (_DWORD)v5 == 14)
            {
              if (v187)
              {
                sub_1812E03C8((uint64_t)v187, 0);
                LODWORD(v120) = 0;
                int v182 = 0;
                uint64_t v5 = 0LL;
                int v187 = 0LL;
              }

              else
              {
                LODWORD(v120) = 0;
                int v182 = 0;
                uint64_t v5 = 0LL;
              }

              int v121 = 1;
              goto LABEL_345;
            }

            if (v179 == v176) {
              int v145 = 1;
            }
            else {
              int v145 = v112;
            }
            int v121 = (v108 | v145) ^ 1;
            if ((_DWORD)v5 == 26 || (_DWORD)v5 == 11)
            {
              uint64_t v120 = *(unsigned __int8 *)(v178 + 28);
              if (*(_BYTE *)(v178 + 28))
              {
                uint64_t v5 = 0LL;
              }

              else
              {
                int v182 = 1;
                uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v178 + 56LL))(v178, 1LL);
                if (!(_DWORD)v5)
                {
                  LODWORD(v120) = 0;
                  goto LABEL_345;
                }

                if (*(_BYTE *)(v178 + 28)) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v178 + 64LL))(v178, v120);
                }
                LODWORD(v120) = 0;
              }

              int v182 = 1;
            }

            else
            {
              LODWORD(v120) = 0;
              int v182 = 0;
            }
          }

LABEL_345:
          if ((*(_DWORD *)(v178 + 24) & 0x80000000) == 0)
          {
            if ((_DWORD)v5)
            {
              uint64_t v122 = 0LL;
              uint64_t v123 = 0LL;
              uint64_t v124 = 0LL;
              char v125 = 0;
              goto LABEL_387;
            }

            int v170 = v120;
            unsigned int __fd = *(_DWORD *)(v178 + 24);
            if (!v121)
            {
              uint64_t v172 = 0LL;
              int v173 = 0LL;
              __dst = 0LL;
              LODWORD(v5) = 0;
              int v140 = -1;
              unsigned int v174 = -1;
              goto LABEL_452;
            }

            __buf[0] = 0LL;
            unsigned int v139 = (char *)calloc(1uLL, (v75 + 25));
            strlcpy(v139, v74, (v75 + 25));
            __dst = v139;
            if (v139[v75 - 1] != 47) {
              strlcat(v139, "/", (v75 + 25));
            }
            strlcat(v139, "tmpsqlitereplacedbXXXXXX", (v75 + 25));
            int v140 = mkstemp(v139);
            if (v140 == -1)
            {
              uint64_t v172 = 0LL;
              int v173 = 0LL;
              *(_DWORD *)(a1 + 32) = *__error();
              unsigned int v174 = -1;
              LODWORD(v5) = 10;
              goto LABEL_452;
            }

            size_t v141 = (v75 + 30);
            uint64_t v142 = (char *)calloc(1uLL, v141);
            strlcpy(v142, v139, v141);
            int v173 = v142;
            strlcat(v142, "-wal", v141);
            uint64_t v143 = (char *)calloc(1uLL, v141);
            strlcpy(v143, v139, v141);
            uint64_t v172 = v143;
            strlcat(v143, "-shm", v141);
            lseek(__fd, 0LL, 0);
            lseek(v140, 0LL, 0);
            if (fcopyfile(__fd, v140, 0LL, 8u))
            {
              int v144 = *__error();
              if (v144 == 12)
              {
                LODWORD(v5) = 7;
              }

              else
              {
                *(_DWORD *)(a1 + 32) = v144;
                LODWORD(v5) = 10;
              }

              fsync(v140);
              unsigned int v174 = -1;
              goto LABEL_450;
            }

            fsync(v140);
            __strlcpy_chk();
            __strlcat_chk();
            uint64_t v146 = sub_1812F2E3C(__strerrbuf, 0, 0LL, 0);
            if ((v146 & 0x80000000) != 0)
            {
              if (*__error() == 2)
              {
                unsigned int v174 = -1;
                goto LABEL_492;
              }

              *(_DWORD *)(a1 + 32) = *__error();
              unsigned int v174 = -1;
            }

            else
            {
              uint64_t v147 = v146;
              unsigned int v174 = sub_1812F2E3C(v173, 1538, 0LL, 0);
              if ((v174 & 0x80000000) == 0)
              {
                lseek(v174, 0LL, 0);
                lseek(v147, 0LL, 0);
                int v148 = sub_1812F6BC0(v147, v174);
                if (v148)
                {
                  int v149 = *__error();
                  if (v149 == 12)
                  {
                    LODWORD(v5) = 7;
                  }

                  else
                  {
                    *(_DWORD *)(a1 + 32) = v149;
                    LODWORD(v5) = 10;
                  }
                }

                else
                {
                  LODWORD(v5) = 0;
                }

                fsync(v174);
                off_18C54FCE0(v147);
                if (v148)
                {
LABEL_450:
                  if (__buf[0]) {
                    sub_1812E03C8((uint64_t)__buf[0], 0);
                  }
                  goto LABEL_452;
                }

            uint64_t v113 = v203;
            goto LABEL_346;
          }
        }
      }

LABEL_492:
                int v156 = sub_181266F84(__dst, (uint64_t *)__buf, v177 & 0xFFFFFFFC | 2, 0LL);
                if (v156)
                {
                  LODWORD(v5) = v156;
                  goto LABEL_450;
                }

                sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
                if (!sub_18126DFE0( (uint64_t)__s1,  "PRAGMA main.cache_size",  0xFFFFFFFFLL,  0LL,  0LL,  &pStmt,  0LL,  v157))
                {
                  int v168 = sqlite3_step(pStmt);
                  if (v168 == 100)
                  {
                    int v158 = sqlite3_column_int(pStmt, 0);
                    sqlite3_finalize(pStmt);
                    if (v158 < 1) {
                      goto LABEL_499;
                    }
                    goto LABEL_496;
                  }

                  sqlite3_finalize(pStmt);
                  if (!v168) {
                    goto LABEL_499;
                  }
                }

                int v158 = 256;
LABEL_496:
                __int128 v159 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_size=%d", v158);
                sub_18126DFE0((uint64_t)__buf[0], v159, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v160);
                while (sqlite3_step(pStmt) == 100)
                  ;
                sqlite3_finalize(pStmt);
                sqlite3_free(v159);
LABEL_499:
                int v162 = 0;
                if (sub_18126DFE0( (uint64_t)__s1,  "PRAGMA main.cache_spill",  0xFFFFFFFFLL,  0LL,  0LL,  &pStmt,  0LL,  v161)) {
                  goto LABEL_500;
                }
                int v169 = sqlite3_step(pStmt);
                if (v169 == 100)
                {
                  int v162 = sqlite3_column_int(pStmt, 0);
                  sqlite3_finalize(pStmt);
                  if (v162 < 0) {
                    goto LABEL_503;
                  }
                }

                else
                {
                  sqlite3_finalize(pStmt);
                  if (!v169)
                  {
LABEL_503:
                    int v165 = sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version; COMMIT;", 0LL, 0LL, 0LL);
                    if (v176 == v179)
                    {
                      LODWORD(v5) = v165;
                      BOOL v166 = 1;
                    }

                    else
                    {
                      BOOL v166 = v179 != 0;
                      if (v179) {
                        __int128 v167 = "PRAGMA journal_mode=WAL";
                      }
                      else {
                        __int128 v167 = "PRAGMA journal_mode=DELETE";
                      }
                      LODWORD(v5) = sqlite3_exec(__buf[0], v167, 0LL, 0LL, 0LL);
                    }

                    if (v187)
                    {
                      sub_1812E03C8((uint64_t)__buf[0], 0);
                      __buf[0] = 0LL;
                    }

                    else
                    {
                      int v187 = __buf[0];
                      sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version;", 0LL, 0LL, 0LL);
                    }

                    if (!v166)
                    {
                      if ((v174 & 0x80000000) == 0)
                      {
                        off_18C54FCE0(v174);
                        unsigned int v174 = -1;
                      }

                      unlink(v173);
                      free(v173);
                      unlink(v172);
                      free(v172);
                      uint64_t v172 = 0LL;
                      int v173 = 0LL;
                    }

                    if (!(_DWORD)v5) {
                      unsigned int __fd = v140;
                    }
LABEL_452:
                    if (v187) {
                      uint64_t v5 = v5;
                    }
                    else {
                      uint64_t v5 = 2LL;
                    }
                    if ((_DWORD)v5) {
                      goto LABEL_484;
                    }
                    __strlcpy_chk();
                    __strlcat_chk();
                    if ((v174 & 0x80000000) != 0
                      && (unsigned int v174 = sub_1812F2E3C(__strerrbuf, 0, 0LL, 0), (v174 & 0x80000000) != 0))
                    {
                      int v151 = 0;
                    }

                    else
                    {
                      LODWORD(pStmt) = -1;
                      __strlcpy_chk();
                      __strlcat_chk();
                      uint64_t v150 = sub_1812F7204((char *)__buf, *(unsigned int *)(a1 + 124), &pStmt);
                      if ((_DWORD)v150)
                      {
                        uint64_t v5 = v150;
                        off_18C54FCE0(v174);
                        int v151 = 1;
                        goto LABEL_479;
                      }

                      lseek(v174, 0LL, 0);
                      int v152 = (int)pStmt;
                      lseek((int)pStmt, 0LL, 0);
                      int v153 = sub_1812F6BC0(v174, v152);
                      if (v153)
                      {
                        int v154 = *__error();
                        if (v154 == 12)
                        {
                          uint64_t v5 = 7LL;
                        }

                        else
                        {
                          *(_DWORD *)(a1 + 32) = v154;
                          uint64_t v5 = 10LL;
                        }
                      }

                      else
                      {
                        uint64_t v5 = 0LL;
                      }

                      fsync(v152);
                      off_18C54FCE0(v152);
                      off_18C54FCE0(v174);
                      int v151 = 1;
                      if (v153)
                      {
LABEL_479:
                        if (v182) {
                          sub_1812F705C((unsigned __int8 *)v178, v170);
                        }
                        else {
                          sqlite3_exec(v187, "COMMIT", 0LL, 0LL, 0LL);
                        }
                        if (!(_DWORD)v5)
                        {
                          sub_1812F6DC4(a1, v151);
                          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, 3LL);
                        }

LABEL_484:
                        if ((v140 & 0x80000000) == 0) {
                          close(v140);
                        }
                        char v125 = 0;
                        uint64_t v122 = __dst;
                        uint64_t v124 = v172;
                        uint64_t v123 = v173;
                        int v132 = v174;
                        uint64_t v133 = v187;
                        if (!v187) {
                          goto LABEL_389;
                        }
                        goto LABEL_388;
                      }
                    }

                    LODWORD(__buf[0]) = 0;
                    LODWORD(pStmt) = 0;
                    pread(__fd, __buf, 4uLL, 24LL);
                    pread(*(_DWORD *)(a1 + 24), &pStmt, 4uLL, 24LL);
                    lseek(__fd, 0LL, 0);
                    lseek(*(_DWORD *)(a1 + 24), 0LL, 0);
                    if (sub_1812F6BC0(__fd, *(_DWORD *)(a1 + 24)))
                    {
                      int v155 = *__error();
                      if (v155 == 12)
                      {
                        uint64_t v5 = 7LL;
                      }

                      else
                      {
                        *(_DWORD *)(a1 + 32) = v155;
                        uint64_t v5 = 10LL;
                      }
                    }

                    else
                    {
                      uint64_t v5 = 0LL;
                    }

                    if (LODWORD(__buf[0]) == (_DWORD)pStmt)
                    {
                      LODWORD(pStmt) = LODWORD(__buf[0]) + 1;
                      off_18C54FDE8(*(_DWORD *)(a1 + 24), &pStmt, 4uLL, 24LL);
                    }

                    goto LABEL_479;
                  }

                  int v162 = 0;
                }

        uint64_t v286 = v334;
        if (!(_DWORD)v6)
        {
          if (*(_BYTE *)(v334 + 48)) {
            BOOL v287 = 0LL;
          }
          else {
            BOOL v287 = *(void *)(v334 + 40);
          }
          uint64_t v286 = v334;
          BOOL v6 = sub_1813781BC( (uint64_t *)v339,  *(void *)(v334 + 8) + 1LL,  *(_DWORD *)(v334 + 16),  *(void *)(v334 + 24),  *(void *)(v334 + 56),  *(void *)(v334 + 32),  v287,  *(char **)(v334 + 40LL * v281 + 80),  *(_DWORD *)(v334 + 40LL * v281 + 88));
        }

        uint64_t v289 = *(void *)(v286 + 40LL * v281 + 80);
        if (v289)
        {
          uint64_t v290 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_499;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v289);
          --qword_18C468B10;
          off_18C4653A8(v289);
          uint64_t v289 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            uint64_t v290 = &xmmword_18C465410;
LABEL_499:
            (*v290)(v289);
          }
        }

        int v291 = *(void *)(v334 + 40LL * v281 + 64);
        if (v291)
        {
          int v292 = &off_18C4653A8;
          if (!dword_18C465380) {
            goto LABEL_506;
          }
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8[0] -= (int)off_18C4653B8(v291);
          --qword_18C468B10;
          off_18C4653A8(v291);
          int v291 = xmmword_18C468B70;
          if ((void)xmmword_18C468B70)
          {
            int v292 = &xmmword_18C465410;
LABEL_506:
            (*v292)(v291);
          }
        }

        int v348 = v6;
LABEL_508:
        __int16 v9 = v334;
        if (!v190 || *(_BYTE *)(v334 + 48))
        {
          a1 = v339;
        }

        else
        {
          a1 = v339;
          sub_1813777A4((uint64_t *)v339, v332, *(void *)(v334 + 40));
        }

LABEL_500:
                __int128 v163 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_spill=%d", v162);
                sub_18126DFE0((uint64_t)__buf[0], v163, 0xFFFFFFFFLL, 128LL, 0LL, &pStmt, 0LL, v164);
                while (sqlite3_step(pStmt) == 100)
                  ;
                sqlite3_finalize(pStmt);
                sqlite3_free(v163);
                goto LABEL_503;
              }

              if (*__error() == 2)
              {
                off_18C54FCE0(v147);
                goto LABEL_492;
              }

              *(_DWORD *)(a1 + 32) = *__error();
              off_18C54FCE0(v147);
            }

            LODWORD(v5) = 10;
            goto LABEL_450;
          }

          uint64_t v122 = 0LL;
          uint64_t v123 = 0LL;
          uint64_t v124 = 0LL;
          goto LABEL_385;
        }
      }

      else
      {
        sqlite3_log(1, "Replace database failed because TMPDIR is not set correctly\n");
        return 3LL;
      }

      return v5;
    case 103:
      if (!__s1) {
        return 21LL;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 24);
      if ((v29 & 0x80000000) != 0)
      {
        uint64_t v5 = 1LL;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }

      int v30 = *(_DWORD *)__s1;
      uint64_t v31 = off_18C54FDA0(*(unsigned int *)(a1 + 24), __strerrbuf, 100LL, 0LL);
      uint64_t v32 = v31;
      if (v31)
      {
        if (v31 != 100
          || (*(void *)__strerrbuf == 0x66206574694C5153LL
            ? (BOOL v33 = *(void *)&__strerrbuf[8] == 0x332074616D726FLL)
            : (BOOL v33 = 0),
              !v33))
        {
          uint64_t v5 = 26LL;
          *((_DWORD *)__s1 + 1) = 2;
          return v5;
        }
      }

      if (sub_1812F7708(v30, v29, 1, dword_18C54FA50 + 2, 0x1FEu))
      {
        uint64_t v5 = 0LL;
        *((_DWORD *)__s1 + 1) = 1;
        return v5;
      }

      if (v32 != 100 || __strerrbuf[18] != 2)
      {
        int v67 = sub_1812F7708(v30, v29, 1, dword_18C54FA50, 1u);
        if (!v67)
        {
          int v67 = sub_1812F7708(v30, v29, 1, dword_18C54FA50 + 1, 1u);
          if (!v67) {
            int v67 = sub_1812F7708(v30, v29, 3, dword_18C54FA50 + 2, 0x1FEu);
          }
        }

        goto LABEL_358;
      }

      int v60 = strlen(*(const char **)(a1 + 56));
      int v61 = sqlite3_initialize();
      uint64_t v5 = 7LL;
      int v62 = -1;
      if (v60 < -99 || v61)
      {
LABEL_367:
        *((_DWORD *)__s1 + 1) = v62;
        return v5;
      }

      unsigned int v63 = (char *)sub_18126F0AC((v60 + 100));
      if (!v63)
      {
        uint64_t v5 = 7LL;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }

      unint64_t v64 = v63;
      memcpy(v63, *(const void **)(a1 + 56), v60);
      strcpy(&v64[v60], "-shm");
      uint64_t v65 = open(v64, 0, 0LL);
      if ((v65 & 0x80000000) != 0)
      {
        if (*__error() != 2)
        {
          uint64_t v5 = 14LL;
          sub_1812F338C(14LL, "open", v64, 47695);
          sqlite3_free(v64);
          *((_DWORD *)__s1 + 1) = -1;
          return v5;
        }

        int v67 = 0;
      }

      else
      {
        uint64_t v66 = v65;
        int v67 = sub_1812F7708(v30, v65, 1, 0x7Au, 1u);
        if (!v67)
        {
          int v67 = sub_1812F7708(v30, v66, 1, 0x79u, 1u);
          if (!v67) {
            int v67 = sub_1812F7708(v30, v66, 1, 0x78u, 1u);
          }
        }

        close(v66);
      }

      signed int v126 = (void (**)(char *))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_357;
      }
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8 -= (int)off_18C4653B8(v64);
      --qword_18C468B10;
      off_18C4653A8(v64);
      unint64_t v64 = (char *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        signed int v126 = (void (**)(char *))&xmmword_18C465410;
LABEL_357:
        (*v126)(v64);
      }

LABEL_358:
      if (v32) {
        int v127 = 0;
      }
      else {
        int v127 = 3;
      }
      if (v67) {
        int v62 = (v67 >> 31) | 1;
      }
      else {
        int v62 = v127;
      }
      if (v67) {
        uint64_t v5 = v67 >> 31;
      }
      else {
        uint64_t v5 = 0LL;
      }
      goto LABEL_367;
    case 104:
      sub_1812F4194();
      return 12LL;
    case 106:
      if (!a1
        || !*(void *)a1
        || *(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)a1 + 16LL) != sub_18126C830
        || *(_DWORD *)(a1 + 128) > 3u)
      {
        return 1LL;
      }

      unsigned __int8 v59 = *(dispatch_object_s **)(a1 + 152);
      if (!v59) {
        return 0LL;
      }
      *(void *)(a1 + 152) = 0LL;
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) != 0) {
        return 0LL;
      }
      dispatch_source_cancel_and_wait();
      dispatch_release(v59);
      return 0LL;
    case 107:
      uint64_t v5 = 0LL;
      *(_DWORD *)(a1 + 168) = *(_DWORD *)__s1;
      return v5;
    case 108:
      uint64_t v5 = 0LL;
      *(void *)(a1 + 176) = __s1;
      return v5;
    case 204:
      uint64_t v5 = 0LL;
      *(_DWORD *)__s1 = HIBYTE(*(unsigned __int16 *)(a1 + 30)) & 1;
      return v5;
    default:
      return v5;
  }

void sub_1812C588C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL sub_1812C5898( void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (!a2)
  {
    uint64_t v15 = a1[3];
    uint64_t v18 = *(void *)(v15 + 72);
    uint64_t v17 = (uint64_t *)(v15 + 72);
    uint64_t v16 = v18;
    if (v18) {
      goto LABEL_9;
    }
    uint64_t v38 = **(void **)(*a1 + 24LL);
    if (*(int *)v38 >= 2 && (int v39 = *(unsigned int (**)(void))(v38 + 136)) != 0LL)
    {
      if (!v39())
      {
LABEL_49:
        uint64_t v16 = *v17;
LABEL_9:
        *(void *)a4 = v16;
        BOOL result = 1LL;
        if (v16 >= 1)
        {
          *(_BYTE *)(a4 + 40) = 1;
          return 0LL;
        }

        return result;
      }
    }

    else
    {
      int v40 = (*(uint64_t (**)(uint64_t, _BYTE *))(v38 + 120))(v38, v161);
      uint64_t *v17 = (uint64_t)(*(double *)v161 * 86400000.0);
      if (!v40) {
        goto LABEL_49;
      }
    }

    uint64_t *v17 = 0LL;
    goto LABEL_52;
  }

  uint64_t v12 = *a3;
  if (*a3)
  {
    __int16 v13 = *(_WORD *)(v12 + 20);
    if (byte_1813C6455[v13 & 0x3F] - 1 <= 1)
    {
      if ((v13 & 8) != 0)
      {
        double v14 = *(double *)v12;
      }

      else if ((v13 & 0x24) != 0)
      {
        double v14 = (double)*(uint64_t *)v12;
      }

      else if ((v13 & 0x12) != 0)
      {
        double v14 = sub_181303DB8(v12);
      }

      else
      {
        double v14 = 0.0;
      }

      uint64_t v155 = (uint64_t)a1;
      *(double *)(a4 + 32) = v14;
      *(_BYTE *)(a4 + 41) = 1;
      if (v14 >= 0.0 && v14 < 5373484.5)
      {
        *(void *)a4 = (uint64_t)(v14 * 86400000.0 + 0.5);
        *(_BYTE *)(a4 + 40) = 1;
        if (a2 >= 2) {
          goto LABEL_91;
        }
        goto LABEL_356;
      }

LABEL_144:
          int v68 = 1;
          goto LABEL_286;
        }

        int8x16x2_t v73 = (const char *)&v60[v65 - 1];
        do
          int v74 = *(unsigned __int8 *)++v73;
        while ((byte_1813C6558[v74] & 1) != 0);
        int v75 = strlen(v73) & 0x3FFFFFFF;
        if ((v73[v75 - 1] & 0xDF) == 0x53) {
          int v107 = v75 - 1;
        }
        else {
          int v107 = v75;
        }
        sub_181355F7C(a4);
        uint64_t v108 = 0LL;
        double v109 = v162[0];
        if (v162[0] >= 0.0) {
          double v110 = 0.5;
        }
        else {
          double v110 = -0.5;
        }
        uint64_t v111 = "second";
        while (1)
        {
          if (v107 == *((unsigned __int8 *)&unk_1813CA7D4 + 16 * v108))
          {
            uint64_t v116 = 0LL;
            while (1)
            {
              uint64_t v117 = v111[v116];
              if (!v111[v116]) {
                break;
              }
              LODWORD(v117) = byte_1813C6343[v117];
              int v118 = byte_1813C6343[v73[v116]];
              if ((_DWORD)v117 != v118) {
                goto LABEL_242;
              }
            }

            int v118 = byte_1813C6343[v73[v116]];
LABEL_242:
            if ((_DWORD)v117 != v118) {
              goto LABEL_234;
            }
LABEL_230:
            float v112 = *((float *)&unk_1813CA7D4 + 4 * v108 + 2);
            double v113 = (float)-v112;
            double v114 = v112;
            if (v162[0] > v113 && v162[0] < v114) {
              break;
            }
          }

      uint64_t v95 = v204;
      uint64_t v96 = HIDWORD(v204);
      int v97 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          uint64_t v96 = 128;
        }
        char v181 = v96;
        __int16 v9 = v201;
        do
        {
          int v182 = v181;
          v181 *= 2LL;
        }

        while (v181 <= (int)v204);
        if (v182 > 1073741695 && (char v181 = 2147483391LL, (int)v204 > 2147483390)
          || (int v183 = v203, sqlite3_initialize())
          || (char v98 = sub_18127D33C(v183, v181)) == 0)
        {
          uint64_t v207 = 7;
LABEL_325:
          uint64_t v172 = *(_DWORD *)(a2 + 120);
          unsigned int v174 = HIDWORD(v205) + (_DWORD)__s1 - (_DWORD)v86;
          int v175 = *(char **)(v44 + 16);
          int v176 = *(_DWORD *)(v44 + 8);
          int v173 = (char *)v86;
LABEL_326:
          sub_1813BEF8C((uint64_t)&v203, v172, v173, v174, v175, v176, &v207);
          __int16 v10 = v207;
          if (!a3) {
            goto LABEL_3;
          }
          goto LABEL_348;
        }

        unsigned int v203 = v98;
        HIDWORD(v204) = v181;
        uint64_t v95 = v204;
        int v97 = (int)v204;
      }

      else
      {
        char v98 = v203;
      }

      LODWORD(v204) = v95 + 1;
      *(_BYTE *)(v98 + v97) = 18;
      int v99 = *(_DWORD *)(a2 + 128);
      int v100 = v204;
      int v101 = HIDWORD(v204);
      int v102 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v101 = 128;
        }
        int v187 = v101;
        do
        {
          BOOL v188 = v187;
          v187 *= 2LL;
        }

        while (v187 <= (int)v204);
        if (v188 > 1073741695 && (int v187 = 2147483391LL, (int)v204 > 2147483390)
          || (int v189 = v203, sqlite3_initialize())
          || (uint64_t v103 = sub_18127D33C(v189, v187)) == 0)
        {
          uint64_t v207 = 7;
          goto LABEL_324;
        }

        unsigned int v203 = v103;
        HIDWORD(v204) = v187;
        int v100 = v204;
        int v102 = (int)v204;
      }

      else
      {
        uint64_t v103 = v203;
      }

      LODWORD(v204) = v100 + 1;
      *(_BYTE *)(v103 + v102) = v99;
LABEL_324:
      __int16 v9 = v201;
      goto LABEL_325;
    }

    double v114 = (char *)__s1;
    uint64_t v196 = *(char **)(v44 + 16);
    uint64_t v115 = (int)v204;
    uint64_t v116 = SHIDWORD(v205) + (uint64_t)*(int *)(v44 + 8) + (int)v204 + 2;
    if (v116 <= SHIDWORD(v204))
    {
      uint64_t v195 = a3;
      uint64_t v121 = v203;
      uint64_t v119 = *(char **)(v44 + 16);
    }

    else
    {
      if (HIDWORD(v204)) {
        uint64_t v117 = SHIDWORD(v204);
      }
      else {
        uint64_t v117 = 128LL;
      }
      do
      {
        int v118 = v117;
        v117 *= 2LL;
      }

      while (v117 < v116);
      uint64_t v119 = *(char **)(v44 + 16);
      if (v118 > 1073741695)
      {
        uint64_t v117 = 2147483391LL;
        if (v116 > 2147483391) {
          goto LABEL_122;
        }
      }

      int v120 = v203;
      if (sqlite3_initialize()) {
        goto LABEL_122;
      }
      uint64_t v121 = sub_18127D33C(v120, v117);
      if (!v121) {
        goto LABEL_122;
      }
      uint64_t v195 = a3;
      unsigned int v203 = v121;
      HIDWORD(v204) = v117;
      uint64_t v115 = (int)v204;
    }

    unsigned int v125 = (_BYTE *)(v121 + v115);
    *unsigned int v125 = 23;
    v125[1] = *(_DWORD *)(a2 + 128);
    if (*(int *)(a2 + 120) < 1)
    {
      a3 = v195;
      __int16 v10 = v207;
      if (!v195) {
        goto LABEL_3;
      }
      goto LABEL_348;
    }

    int v126 = 0LL;
    __int16 v199 = 0;
    __dst = v125 + 2;
    for (uint64_t j = v119; ; j += v137)
    {
      while (1)
      {
        unsigned int v128 = *v114;
        int v129 = 1;
        if (*v114) {
          int v130 = v128 == 5;
        }
        else {
          int v130 = 1;
        }
        if (!v130 && v128 != 255)
        {
          if ((v128 - 1) >= 2)
          {
            int v131 = v114[1];
            if ((v131 & 0x80) != 0)
            {
              uint64_t v133 = v114[2];
              if (v114[2] < 0)
              {
                int v134 = v114[3];
                if (v134 < 0)
                {
                  uint64_t v135 = sub_18129BD74(v114 + 1, &v208);
                  int v131 = v208;
                  if (HIDWORD(v208)) {
                    int v131 = -1;
                  }
                  __int16 v132 = (v135 + 1);
                }

                else
                {
                  int v131 = v134 & 0x7F | (v131 << 14) & 0x1FC07F | ((v133 & 0x7F) << 7);
                  __int16 v132 = 4;
                }
              }

              else
              {
                int v131 = ((v131 & 0x7F) << 7) | v133;
                __int16 v132 = 3;
              }
            }

            else
            {
              __int16 v132 = 2;
            }

            int v129 = v132 + v131;
          }

          else
          {
            int v129 = 9;
          }
        }

        unsigned int v136 = *j;
        uint64_t v137 = 1;
        if (*j) {
          uint64_t v138 = v136 == 5;
        }
        else {
          uint64_t v138 = 1;
        }
        if (!v138 && v136 != 255)
        {
          if ((v136 - 1) >= 2)
          {
            unsigned int v139 = j[1];
            if ((v139 & 0x80) != 0)
            {
              uint64_t v141 = j[2];
              if (j[2] < 0)
              {
                uint64_t v142 = j[3];
                if (v142 < 0)
                {
                  uint64_t v143 = sub_18129BD74(j + 1, &v208);
                  unsigned int v139 = v208;
                  if (HIDWORD(v208)) {
                    unsigned int v139 = -1;
                  }
                  int v140 = (v143 + 1);
                }

                else
                {
                  unsigned int v139 = v142 & 0x7F | (v139 << 14) & 0x1FC07F | ((v141 & 0x7F) << 7);
                  int v140 = 4;
                }
              }

              else
              {
                unsigned int v139 = ((v139 & 0x7F) << 7) | v141;
                int v140 = 3;
              }
            }

            else
            {
              int v140 = 2;
            }

            uint64_t v137 = v140 + v139;
          }

          else
          {
            uint64_t v137 = 9;
          }
        }

        if (*(_BYTE *)(*(void *)(a2 + 136) + v126)) {
          goto LABEL_221;
        }
        if (v136 == 255) {
          break;
        }
        if (!v136)
        {
          uint64_t v146 = v199;
          if (v128) {
            uint64_t v146 = 1;
          }
          __int16 v199 = v146;
LABEL_221:
          uint64_t v144 = v129;
          memcpy(__dst, v114, v129);
          __dst += v129;
          goto LABEL_222;
        }

        if (!v128) {
          break;
        }
        memcpy(__dst, j, v137);
        __dst += v137;
        v114 += v129;
        ++v126;
        uint64_t v147 = *(int *)(a2 + 120);
        if (v126 >= v147)
        {
LABEL_235:
          int v148 = 0LL;
          int v149 = v196;
          int v150 = __dst;
          while (2)
          {
            int v153 = *v114;
            uint64_t v154 = 1;
            if (*v114) {
              uint64_t v155 = v153 == 5;
            }
            else {
              uint64_t v155 = 1;
            }
            if (!v155 && v153 != 255)
            {
              if ((v153 - 1) >= 2)
              {
                uint64_t v156 = v114[1];
                if ((v156 & 0x80) != 0)
                {
                  int v158 = v114[2];
                  if (v114[2] < 0)
                  {
                    int v159 = v114[3];
                    if (v159 < 0)
                    {
                      int v160 = sub_18129BD74(v114 + 1, &v208);
                      uint64_t v156 = v208;
                      if (HIDWORD(v208)) {
                        uint64_t v156 = -1;
                      }
                      char v157 = (v160 + 1);
                    }

                    else
                    {
                      uint64_t v156 = v159 & 0x7F | (v156 << 14) & 0x1FC07F | ((v158 & 0x7F) << 7);
                      char v157 = 4;
                    }
                  }

                  else
                  {
                    uint64_t v156 = ((v156 & 0x7F) << 7) | v158;
                    char v157 = 3;
                  }
                }

                else
                {
                  char v157 = 2;
                }

                uint64_t v154 = v157 + v156;
              }

              else
              {
                uint64_t v154 = 9;
              }
            }

            uint64_t v161 = *v149;
            if (*v149) {
              int v162 = v161 == 5;
            }
            else {
              int v162 = 1;
            }
            if (v162 || v161 == 255)
            {
              if (v161 != 255 || *(_BYTE *)(*(void *)(a2 + 136) + v148) != 0)
              {
                int v152 = 1;
                goto LABEL_277;
              }

              *v150++ = 0;
              uint64_t v151 = v154;
              int v152 = 1;
            }

            else
            {
              if ((v161 - 1) >= 2)
              {
                uint64_t v164 = v149[1];
                if ((v164 & 0x80) != 0)
                {
                  BOOL v166 = v149[2];
                  if (v149[2] < 0)
                  {
                    __int128 v167 = v149[3];
                    if (v167 < 0)
                    {
                      int v168 = sub_18129BD74(v149 + 1, &v208);
                      uint64_t v164 = v208;
                      if (HIDWORD(v208)) {
                        uint64_t v164 = -1;
                      }
                      int v165 = (v168 + 1);
                    }

                    else
                    {
                      uint64_t v164 = v167 & 0x7F | (v164 << 14) & 0x1FC07F | ((v166 & 0x7F) << 7);
                      int v165 = 4;
                    }
                  }

                  else
                  {
                    uint64_t v164 = ((v164 & 0x7F) << 7) | v166;
                    int v165 = 3;
                  }
                }

                else
                {
                  int v165 = 2;
                }

                int v152 = v165 + v164;
              }

              else
              {
                int v152 = 9;
              }

        v124 += 56LL;
        uint64_t v28 = __OFSUB__(v122--, 1);
        if ((v122 < 0) ^ v28 | (v122 == 0))
        {
          uint64_t v121 = v123;
          if (v123 > 0) {
            goto LABEL_141;
          }
          break;
        }
      }
    }

    int v140 = *(_DWORD *)(a3 + 132);
    if (v140 >= 1)
    {
      uint64_t v141 = *(uint64_t **)(a3 + 136);
      do
      {
        if ((*((_WORD *)v141 + 9) & 6) == 0
          && (*((_WORD *)v141 + 10) & 0x82) != 0
          && (*((_WORD *)v141 + 10) & 0x800) != 0
          && *((_DWORD *)v141 + 7) == v486
          && (*v120 & 0x58) == 0)
        {
          uint64_t v146 = *v141;
          uint64_t v147 = *((_DWORD *)v141 + 8);
          *(void *)&uint64_t v497 = a3 + 104;
          *((void *)&v497 + 1) = a3 + 104;
          BYTE8(v499) = 0;
          uint64_t v498 = 0uLL;
          *(void *)&uint64_t v499 = 0x8300000000LL;
          HIDWORD(v499) = v486;
          *(_WORD *)((char *)&v499 + 9) = 257;
          if (v147 != -2)
          {
            v502 = v147;
            int v148 = sub_181333910((uint64_t *)&v497);
            if (v148)
            {
              int v149 = 0LL;
              do
              {
                int v150 = *((void *)v148 + 5);
                if ((v150 & v487) == 0)
                {
                  if (!v150 && (v148[10] & 0x82) != 0)
                  {
                    int v149 = v148;
                    goto LABEL_202;
                  }

                  if (!v149) {
                    int v149 = v148;
                  }
                }

                int v148 = sub_181333910((uint64_t *)&v497);
              }

              while (v148);
              if (!v149) {
                goto LABEL_183;
              }
LABEL_202:
              if ((v149[9] & 4) == 0)
              {
                uint64_t v151 = *(__int128 **)v149;
                if ((v149[10] & 1) == 0
                  || (*((_BYTE *)v151 + 5) & 0x10) == 0
                  || **(int **)(*((void *)v151 + 4) + 32LL) <= 1)
                {
                  uint64_t v142 = v151[1];
                  uint64_t v143 = v151[2];
                  uint64_t v144 = v151[4];
                  uint64_t v500 = v151[3];
                  uint64_t v501 = v144;
                  uint64_t v498 = v142;
                  uint64_t v499 = v143;
                  uint64_t v497 = *v151;
                  *(void *)&uint64_t v498 = *(void *)(v146 + 16);
                  sub_1812B0714(a1, &v497);
                  v149[9] |= 4u;
                }
              }
            }
          }
        }

        uint64_t v72 = *++v12;
        double v14 = v72;
        LODWORD(v13) = v13 - 1;
      }

      if (v14 != 48 || (v12[1] | 0x20) != 0x78) {
        goto LABEL_178;
      }
      int v84 = 0LL;
      BOOL result = sub_1812E4D40((char *)v12, &v84);
      int v80 = a3[3];
      int v81 = (_DWORD *)(a3[1] + v80);
      *(_DWORD *)((char *)v81 + 3) = 960051557;
      const char *v81 = 1697656377;
      a3[3] += 7LL;
      return result;
    case 5:
      uint64_t v12 = *(unsigned __int8 **)(v6 + 8);
      __int16 v13 = *(unsigned int *)(v6 + 4);
      if ((v5 & 0x40) == 0) {
        goto LABEL_28;
      }
      uint64_t v29 = *v12;
      if (v29 == 43) {
        goto LABEL_150;
      }
      if (v29 == 45)
      {
        uint64_t v30 = a3[3];
        if (v30 >= a3[2])
        {
          BOOL result = sub_18135BB8C((uint64_t)a3, 45);
        }

        else
        {
          uint64_t v31 = a3[1];
          a3[3] = v30 + 1;
          *(_BYTE *)(v31 + v30) = 45;
        }

        __int16 v213 = v40;
        uint64_t v29 = v221;
        goto LABEL_26;
      case 3:
        uint64_t v30 = v227;
        if (!v211) {
          goto LABEL_152;
        }
        int v59 = (uint64_t (**)(char *))&off_18C4653A8;
        if (!dword_18C465380) {
          goto LABEL_151;
        }
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v211);
        --qword_18C468B10;
        off_18C4653A8(v211);
        uint64_t v211 = (char *)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          int v59 = (uint64_t (**)(char *))&xmmword_18C465410;
LABEL_151:
          (*v59)(v211);
        }

  float v112 = v39[5];
  if (v112)
  {
    double v113 = &off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v112);
      --qword_18C468B10;
      off_18C4653A8(v112);
      float v112 = xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_151;
      }
      double v113 = &xmmword_18C465410;
    }

    (*v113)(v112);
  }

          if (sqlite3_step(v118) != 100) {
            goto LABEL_166;
          }
          goto LABEL_145;
        }
      }

      else if (byte_1813C6343[v97] != byte_1813C6343[v98])
      {
        goto LABEL_143;
      }

      ++v95;
    }
  }

  uint64_t v86 = &off_18C4653A8;
  if (!dword_18C465380)
  {
LABEL_121:
    (*v86)(v5);
    goto LABEL_122;
  }

      ++DWORD1(v93[1]);
      if (SDWORD1(v93[1]) >= SDWORD2(v93[1])) {
        goto LABEL_137;
      }
    }
  }

  if (!v27) {
LABEL_152:
  }
    int v27 = (*(uint64_t (**)(uint64_t, void, void, _OWORD *, uint64_t (*)(uint64_t, char, uint64_t, uint64_t, int, int)))(a1 + 40))( a2,  *((void *)&v95 + 1),  v96,  v93,  sub_1813A536C);
  if ((int)v94 < (int)v92 - 1)
  {
    if (v27) {
      goto LABEL_163;
    }
    int v60 = __s;
    __int16 v61 = strlen(__s);
LABEL_160:
    *((void *)&v96 + 1) = sqlite3_mprintf("%z%.*s", *((void *)&v96 + 1), v61, v60);
    if (*((void *)&v96 + 1)) {
      goto LABEL_169;
    }
    int v27 = 7;
LABEL_163:
    if (!v52)
    {
      sub_1812CF36C(97620);
      goto LABEL_190;
    }

    v52[9] = v27;
    if ((*(_WORD *)(*(void *)v52 + 20LL) & 1) == 0) {
      goto LABEL_190;
    }
    switch(v27)
    {
      case 516:
        int v62 = "abort due to ROLLBACK";
        break;
      case 101:
        int v62 = "no more rows available";
        break;
      case 100:
        int v62 = "another row available";
        break;
      default:
        else {
          int v62 = off_189B6EC30[v27];
        }
        break;
    }

    unsigned int v63 = (uint64_t)v52;
    int v64 = 0LL;
    goto LABEL_189;
  }

  if (!v27 && *((void *)&v95 + 1))
  {
    int v60 = (char *)(*((void *)&v95 + 1) + SDWORD1(v96));
    __int16 v61 = (v96 - DWORD1(v96));
    goto LABEL_160;
  }

LABEL_234:
          ++v108;
          v111 += 16;
          if (v108 == 6)
          {
            int v68 = 1;
            goto LABEL_285;
          }
        }

        if ((_DWORD)v108 != 5)
        {
          if ((_DWORD)v108 == 4)
          {
            sub_1812C6E98(a4);
            int v126 = (int)v109;
            int v127 = *(_DWORD *)(a4 + 12) + (int)v109;
            if (v127 < 1) {
              unsigned int v128 = -((12 - v127) / 0xCu);
            }
            else {
              unsigned int v128 = (v127 - 1) / 0xCu;
            }
            *(_DWORD *)(a4 + 8) += v128;
            *(_DWORD *)(a4 + 12) = v127 - 12 * v128;
LABEL_283:
            *(_BYTE *)(a4 + 40) = 0;
            double v109 = v109 - (double)v126;
          }

          sub_181355F7C(a4);
          int v68 = 0;
          *(void *)a4 += (uint64_t)(v110 + v109 * 1000.0 * *((float *)&unk_1813CA7D4 + 4 * v108 + 3));
LABEL_285:
          *(_WORD *)(a4 + 42) = 0;
          *(_BYTE *)(a4 + 44) = 0;
LABEL_286:
          if (!v68) {
            goto LABEL_287;
          }
          return 1LL;
        }

        int v126 = (int)v162[0];
        sub_1812C6E98(a4);
        *(_DWORD *)(a4 + 8) += v126;
        goto LABEL_283;
      case 'a':
        size_t v83 = v60 + 1;
        int v84 = "auto";
        while (2)
        {
          uint64_t v86 = *(unsigned __int8 *)v84;
          if (v64 != (_DWORD)v86)
          {
            if (byte_1813C6343[v64] != byte_1813C6343[v86]) {
              return 1LL;
            }
LABEL_154:
            ++v84;
            int v85 = *v83++;
            int v64 = v85;
            continue;
          }

          break;
        }

        if (v64) {
          goto LABEL_154;
        }
        if (v57 > 1) {
          return 1LL;
        }
        if (!*(_BYTE *)(a4 + 41) || *(_BYTE *)(a4 + 40)) {
          goto LABEL_171;
        }
        double v87 = *(double *)(a4 + 32);
        if (v87 >= -2.1086676e11 && v87 <= 2.53402301e11)
        {
          *(_WORD *)(a4 + 42) = 0;
          *(_BYTE *)(a4 + 44) = 0;
          *(void *)a4 = (uint64_t)(v87 * 1000.0 + 2.1086676e14 + 0.5);
          *(_BYTE *)(a4 + 40) = 1;
          goto LABEL_171;
        }

                double v104 = __src;
                unint64_t v70 = v137;
              }
            }

            *(_BYTE *)uint64_t v50 = 23;
LABEL_264:
            v50[2] = v147 - v50[4];
            goto LABEL_265;
          }

          *(_BYTE *)int v68 = 9;
          if (v137)
          {
LABEL_262:
            memcpy((void *)(v68 + 32), v46, v47);
            uint64_t v147 = v72 + v47;
          }

          else
          {
            sub_1813BE9E0((void **)&v147, *(_DWORD *)(v5 + 16), v46, __src);
          }

          a2 = v140;
          goto LABEL_264;
        }
      }

      uint64_t v133 = (void (**)(unsigned __int8 *))&off_18C4653A8;
      if (dword_18C465380)
      {
        if ((void)xmmword_18C468B70) {
          xmmword_18C465400(xmmword_18C468B70);
        }
        qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
        --qword_18C468B10;
        off_18C4653A8(v33);
        BOOL v33 = (char **)xmmword_18C468B70;
        if ((void)xmmword_18C468B70)
        {
          uint64_t v133 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
          goto LABEL_279;
        }
      }

      else
      {
LABEL_279:
        (*v133)((unsigned __int8 *)v33);
      }

      return 7LL;
    }

    int v56 = (void (**)(unsigned __int8 *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v33);
      --qword_18C468B10;
      off_18C4653A8(v33);
      BOOL v33 = (char **)xmmword_18C468B70;
      if (!(void)xmmword_18C468B70) {
        goto LABEL_190;
      }
      int v56 = (void (**)(unsigned __int8 *))&xmmword_18C465410;
    }

    (*v56)((unsigned __int8 *)v33);
LABEL_190:
  }

  *(void *)(a1[3] + 184LL) = 0LL;
  return v15;
}

LABEL_287:
        if (++v57 == v156) {
          goto LABEL_356;
        }
        continue;
      case 'j':
        uint64_t v88 = v60 + 1;
        uint64_t v89 = "julianday";
        while (2)
        {
          uint64_t v91 = *(unsigned __int8 *)v89;
          if (v64 == (_DWORD)v91)
          {
            if (!v64)
            {
              if (v57 > 1 || !*(_BYTE *)(a4 + 40) || !*(_BYTE *)(a4 + 41)) {
                return 1LL;
              }
LABEL_171:
              *(_BYTE *)(a4 + 41) = 0;
              goto LABEL_287;
            }
          }

          else if (byte_1813C6343[v64] != byte_1813C6343[v91])
          {
            return 1LL;
          }

          ++v89;
          int v90 = *v88++;
          int v64 = v90;
          continue;
        }

      case 'l':
        BOOL v92 = v60 + 1;
        int v93 = "localtime";
        while (2)
        {
          uint64_t v95 = *(unsigned __int8 *)v93;
          if (v64 == (_DWORD)v95)
          {
            if (!v64)
            {
              int v68 = sub_181356520(a4, v155);
              goto LABEL_286;
            }
          }

          else if (byte_1813C6343[v64] != byte_1813C6343[v95])
          {
            return 1LL;
          }

          ++v93;
          int v94 = *v92++;
          int v64 = v94;
          continue;
        }

      case 's':
        if (*v60)
        {
          uint64_t v96 = v60[1];
          if (v60[1])
          {
            if ((v96 & 0xFFFFFFDF) == 0x54)
            {
              uint64_t v96 = v60[2];
              if (v60[2])
              {
                if ((v96 & 0xFFFFFFDF) == 0x41)
                {
                  uint64_t v96 = v60[3];
                  if (v60[3])
                  {
                    if ((v96 & 0xFFFFFFDF) == 0x52)
                    {
                      uint64_t v96 = v60[4];
                      if (v60[4])
                      {
                        if ((v96 & 0xFFFFFFDF) == 0x54)
                        {
                          uint64_t v96 = v60[5];
                          if (v60[5])
                          {
                            if ((_DWORD)v96 == 32)
                            {
                              uint64_t v96 = v60[6];
                              if (v60[6])
                              {
                                if ((v96 & 0xFFFFFFDF) == 0x4F)
                                {
                                  uint64_t v96 = v60[7];
                                  if (v60[7])
                                  {
                                    if ((v96 & 0xFFFFFFDF) == 0x46)
                                    {
                                      uint64_t v96 = v60[8];
                                      if (v60[8])
                                      {
                                        if ((_DWORD)v96 == 32) {
                                          goto LABEL_324;
                                        }
                                        int v97 = " ";
                                        LODWORD(v96) = byte_1813C6343[v96];
                                      }

                                      else
                                      {
                                        int v97 = " ";
                                      }
                                    }

                                    else
                                    {
                                      int v97 = "f ";
                                      LODWORD(v96) = byte_1813C6343[v96];
                                    }
                                  }

                                  else
                                  {
                                    int v97 = "f ";
                                  }
                                }

                                else
                                {
                                  int v97 = "of ";
                                  LODWORD(v96) = byte_1813C6343[v96];
                                }
                              }

                              else
                              {
                                int v97 = "of ";
                              }
                            }

                            else
                            {
                              int v97 = " of ";
                              LODWORD(v96) = byte_1813C6343[v96];
                            }
                          }

                          else
                          {
                            int v97 = " of ";
                          }
                        }

                        else
                        {
                          int v97 = "t of ";
                          LODWORD(v96) = byte_1813C6343[v96];
                        }
                      }

                      else
                      {
                        int v97 = "t of ";
                      }
                    }

                    else
                    {
                      int v97 = "rt of ";
                      LODWORD(v96) = byte_1813C6343[v96];
                    }
                  }

                  else
                  {
                    int v97 = "rt of ";
                  }
                }

                else
                {
                  int v97 = "art of ";
                  LODWORD(v96) = byte_1813C6343[v96];
                }
              }

              else
              {
                int v97 = "art of ";
              }
            }

            else
            {
              int v97 = "tart of ";
              LODWORD(v96) = byte_1813C6343[v96];
            }
          }

          else
          {
            int v97 = "tart of ";
          }
        }

        else
        {
          LODWORD(v96) = 0;
          int v97 = "start of ";
        }

        if ((_DWORD)v96 != byte_1813C6343[*v97])
        {
          uint64_t v146 = v60 + 1;
          uint64_t v147 = v60 + 1;
          int v148 = *v60;
          for (uint64_t m = "subsec"; ; ++m)
          {
            uint64_t v151 = *(unsigned __int8 *)m;
            if (v148 == (_DWORD)v151)
            {
              if (!v148)
              {
LABEL_353:
                *(_BYTE *)(a4 + 47) = 1;
                goto LABEL_287;
              }
            }

            else if (byte_1813C6343[v148] != byte_1813C6343[v151])
            {
              for (uint64_t n = "subsecond"; ; ++n)
              {
                uint64_t v154 = *(unsigned __int8 *)n;
                if (v64 == (_DWORD)v154)
                {
                  if (!v64) {
                    goto LABEL_353;
                  }
                }

                else if (byte_1813C6343[v64] != byte_1813C6343[v154])
                {
                  return 1LL;
                }

                int v153 = *v146++;
                int v64 = v153;
              }
            }

            int v150 = *v147++;
            int v148 = v150;
          }
        }

LABEL_324:
        if (*(_BYTE *)(a4 + 40) || *(_BYTE *)(a4 + 42) || *(_BYTE *)(a4 + 43))
        {
          int v134 = v60 + 9;
          sub_1812C6F8C(a4);
          *(_WORD *)(a4 + 43) = 1;
          *(_DWORD *)(a4 + 20) = 0;
          *(_DWORD *)(a4 + 24) = 0;
          *(void *)(a4 + 32) = 0LL;
          uint64_t v135 = "month";
          unsigned int v136 = v60 + 9;
          *(_WORD *)(a4 + 40) = 0;
          while (1)
          {
            uint64_t v137 = *v136;
            uint64_t v138 = *(unsigned __int8 *)v135;
            if ((_DWORD)v137 == (_DWORD)v138)
            {
              if (!*v136)
              {
                *(_DWORD *)(a4 + 16) = 1;
                goto LABEL_287;
              }
            }

            else if (byte_1813C6343[v137] != byte_1813C6343[v138])
            {
              unsigned int v139 = "year";
              for (iuint64_t i = v60 + 9; ; ++ii)
              {
                uint64_t v141 = *ii;
                uint64_t v142 = *(unsigned __int8 *)v139;
                if ((_DWORD)v141 == (_DWORD)v142)
                {
                  if (!*ii)
                  {
                    *(void *)(a4 + 12) = 0x100000001LL;
                    goto LABEL_287;
                  }
                }

                else if (byte_1813C6343[v141] != byte_1813C6343[v142])
                {
                  for (juint64_t j = "day"; ; ++jj)
                  {
                    uint64_t v144 = *v134;
                    uint64_t v145 = *(unsigned __int8 *)jj;
                    if ((_DWORD)v144 == (_DWORD)v145)
                    {
                      if (!*v134) {
                        goto LABEL_287;
                      }
                    }

                    else if (byte_1813C6343[v144] != byte_1813C6343[v145])
                    {
                      return 1LL;
                    }

                    ++v134;
                  }
                }

                ++v139;
              }
            }

            ++v136;
            ++v135;
          }
        }

        return 1LL;
      case 'u':
        char v98 = v60 + 1;
        int v99 = v60 + 1;
        int v100 = *v60;
        int v101 = "unixepoch";
        while (2)
        {
          uint64_t v103 = *(unsigned __int8 *)v101;
          if (v100 == (_DWORD)v103)
          {
            if (!v100)
            {
              if (*(_BYTE *)(a4 + 41))
              {
                if (v57 <= 1)
                {
                  double v104 = *(double *)(a4 + 32) * 1000.0 + 2.1086676e14;
                  if (v104 >= 0.0 && v104 < 4.64269061e14)
                  {
                    *(_BYTE *)(a4 + 44) = 0;
                    *(void *)a4 = (uint64_t)(v104 + 0.5);
                    *(_DWORD *)(a4 + 40) = 1;
                    goto LABEL_287;
                  }
                }

                return 1LL;
              }

              goto LABEL_245;
            }

LABEL_199:
            ++v101;
            int v102 = *v99++;
            int v100 = v102;
            continue;
          }

          break;
        }

        if (byte_1813C6343[v100] == byte_1813C6343[v103]) {
          goto LABEL_199;
        }
LABEL_245:
        for (kuint64_t k = "utc"; ; ++kk)
        {
          uint64_t v121 = *(unsigned __int8 *)kk;
          if (v64 == (_DWORD)v121) {
            break;
          }
          if (byte_1813C6343[v64] != byte_1813C6343[v121]) {
            return 1LL;
          }
LABEL_247:
          int v120 = *v98++;
          int v64 = v120;
        }

        if (v64) {
          goto LABEL_247;
        }
        if (sub_181356110(v155))
        {
          if (*(_BYTE *)(a4 + 45)) {
            goto LABEL_287;
          }
          sub_181355F7C(a4);
          uint64_t v122 = *(void *)a4;
          *(void *)&v161[40] = 1LL;
          memset(&v161[8], 0, 32);
          *(void *)uint64_t v161 = v122;
          if (!sub_181356520((uint64_t)v161, v155))
          {
            sub_181355F7C((uint64_t)v161);
            uint64_t v123 = v122;
            uint64_t v124 = v122 - *(void *)v161;
            if (v122 == *(void *)v161) {
              goto LABEL_260;
            }
            *(void *)&v161[40] = 1LL;
            memset(&v161[8], 0, 32);
            uint64_t v123 = v124 + v122;
            *(void *)uint64_t v161 = v124 + v122;
            sub_181355F7C((uint64_t)v161);
            if (v122 == *(void *)v161) {
              goto LABEL_260;
            }
            *(void *)&v161[40] = 1LL;
            memset(&v161[8], 0, 32);
            v123 += v122 - *(void *)v161;
            *(void *)uint64_t v161 = v123;
            sub_181355F7C((uint64_t)v161);
            if (v122 == *(void *)v161)
            {
LABEL_260:
              *(_OWORD *)(a4 + 16) = 0u;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)a4 = 0u;
              *(void *)a4 = v123;
              *(_BYTE *)(a4 + 40) = 1;
              *(_BYTE *)(a4 + 45) = 1;
              goto LABEL_287;
            }

            *(void *)&v161[40] = 1LL;
            memset(&v161[8], 0, 32);
            v123 += v122 - *(void *)v161;
            *(void *)uint64_t v161 = v123;
            if (!sub_181356520((uint64_t)v161, v155))
            {
              sub_181355F7C((uint64_t)v161);
              goto LABEL_260;
            }
          }
        }

        return 1LL;
      case 'w':
        if (*v60)
        {
          uint64_t v105 = v60[1];
          if (v60[1])
          {
            if ((v105 & 0xFFFFFFDF) == 0x45)
            {
              uint64_t v105 = v60[2];
              if (v60[2])
              {
                if ((v105 & 0xFFFFFFDF) == 0x45)
                {
                  uint64_t v105 = v60[3];
                  if (v60[3])
                  {
                    if ((v105 & 0xFFFFFFDF) == 0x4B)
                    {
                      uint64_t v105 = v60[4];
                      if (v60[4])
                      {
                        if ((v105 & 0xFFFFFFDF) == 0x44)
                        {
                          uint64_t v105 = v60[5];
                          if (v60[5])
                          {
                            if ((v105 & 0xFFFFFFDF) == 0x41)
                            {
                              uint64_t v105 = v60[6];
                              if (v60[6])
                              {
                                if ((v105 & 0xFFFFFFDF) == 0x59)
                                {
                                  uint64_t v105 = v60[7];
                                  if (v60[7])
                                  {
                                    if ((_DWORD)v105 == 32) {
                                      goto LABEL_312;
                                    }
                                    uint64_t v106 = " ";
                                    LODWORD(v105) = byte_1813C6343[v105];
                                  }

                                  else
                                  {
                                    uint64_t v106 = " ";
                                  }
                                }

                                else
                                {
                                  uint64_t v106 = "y ";
                                  LODWORD(v105) = byte_1813C6343[v105];
                                }
                              }

                              else
                              {
                                uint64_t v106 = "y ";
                              }
                            }

                            else
                            {
                              uint64_t v106 = "ay ";
                              LODWORD(v105) = byte_1813C6343[v105];
                            }
                          }

                          else
                          {
                            uint64_t v106 = "ay ";
                          }
                        }

                        else
                        {
                          uint64_t v106 = "day ";
                          LODWORD(v105) = byte_1813C6343[v105];
                        }
                      }

                      else
                      {
                        uint64_t v106 = "day ";
                      }
                    }

                    else
                    {
                      uint64_t v106 = "kday ";
                      LODWORD(v105) = byte_1813C6343[v105];
                    }
                  }

                  else
                  {
                    uint64_t v106 = "kday ";
                  }
                }

                else
                {
                  uint64_t v106 = "ekday ";
                  LODWORD(v105) = byte_1813C6343[v105];
                }
              }

              else
              {
                uint64_t v106 = "ekday ";
              }
            }

            else
            {
              uint64_t v106 = "eekday ";
              LODWORD(v105) = byte_1813C6343[v105];
            }
          }

          else
          {
            uint64_t v106 = "eekday ";
          }
        }

        else
        {
          LODWORD(v105) = 0;
          uint64_t v106 = "weekday ";
        }

  if (!a1)
  {
    sub_1812CF36C(97620);
LABEL_206:
    if (v27) {
      goto LABEL_231;
    }
    goto LABEL_232;
  }

  *(_DWORD *)(a1 + 36) = v28;
  if ((*(_WORD *)(*(void *)a1 + 20LL) & 1) == 0) {
    goto LABEL_206;
  }
  switch(v28)
  {
    case 516:
      int v102 = "abort due to ROLLBACK";
      break;
    case 101:
      int v102 = "no more rows available";
      break;
    case 100:
      int v102 = "another row available";
      break;
    default:
      else {
        int v102 = off_189B6EC30[v28];
      }
      break;
  }

  sub_1812D7A8C(a1, v102, -1, 1u, 0LL);
  if (v27) {
LABEL_231:
  }
    v27((uint64_t)v26);
LABEL_232:
  int v107 = *(void **)(v11 + 480);
  if (v107)
  {
    uint64_t v108 = (sqlite3_stmt *)v107[3];
    double v109 = (void *)v107[4];
    double v110 = v109[3];
    if (v110) {
      xmmword_18C465400(v110);
    }
    sub_1812F20DC(v109, v107);
    uint64_t v111 = v109[3];
    if (v111) {
      xmmword_18C465410(v111);
    }
    sqlite3_finalize(v108);
  }

  *(void *)(v11 + 480) = 0LL;
}

LABEL_312:
        int v129 = strlen((const char *)v60 + 8);
        if (v162[0] < 0.0) {
          return 1LL;
        }
        if (v162[0] >= 7.0) {
          return 1LL;
        }
        int v130 = (int)v162[0];
        sub_1812C6F8C(a4);
        if (!*(_BYTE *)(a4 + 43))
        {
          sub_181355F7C(a4);
          int v131 = (*(void *)a4 + 43200000LL) % 86400000;
          *(double *)(a4 + 32) = (double)(v131 % 60000) / 1000.0;
          __int16 v132 = (34953 * (__int16)(v131 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v131 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v131 / 60000
                                         - 60 * ((v132 >> 5) + ((unsigned __int16)(v132 & 0x8000) >> 15)));
          *(_BYTE *)(a4 + 41) = 0;
          *(_BYTE *)(a4 + 43) = 1;
        }

        *(_BYTE *)(a4 + 44) = 0;
        *(_BYTE *)(a4 + 40) = 0;
        sub_181355F7C(a4);
        uint64_t v133 = (*(void *)a4 + 129600000LL) / 86400000 % 7;
        if (v133 > v130) {
          v133 -= 7LL;
        }
        *(void *)a4 += 86400000 * (v130 - v133);
        *(_WORD *)(a4 + 42) = 0;
        *(_BYTE *)(a4 + 44) = 0;
        goto LABEL_287;
      default:
        return 1LL;
    }
  }

uint64_t sub_1812C6E24(uint64_t a1, void *a2)
{
  *a2 = 1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000LL;
  return 0LL;
}

double sub_1812C6E98(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 43))
  {
    sub_181355F7C(a1);
    int v3 = (*(_DWORD *)a1 + 43200000) % 86400000;
    double result = (double)(v3 % 60000) / 1000.0;
    *(double *)(a1 + 32) = result;
    __int16 v4 = (34953 * (__int16)(v3 / 60000)) >> 16;
    *(_DWORD *)(a1 + 20) = v3 / 3600000;
    *(_DWORD *)(a1 + 24) = (__int16)(v3 / 60000
                                   - 60 * ((v4 >> 5) + ((unsigned __int16)(v4 & 0x8000) >> 15)));
    *(_BYTE *)(a1 + 41) = 0;
    *(_BYTE *)(a1 + 43) = 1;
  }

  return result;
}

uint64_t sub_1812C6F8C(uint64_t result)
{
  uint64_t v1 = (_BYTE *)(result + 42);
  if (!*(_BYTE *)(result + 42))
  {
    if (*(_BYTE *)(result + 40))
    {
      if (*(void *)result < 0x1A6401072FE00uLL)
      {
        int v2 = (*(void *)result + 43200000LL) / 0x5265C00uLL
           + (int)(((double)(int)((*(void *)result + 43200000LL) / 0x5265C00uLL) + -1867216.25) / 36524.25)
           - (int)(((double)(int)((*(void *)result + 43200000LL) / 0x5265C00uLL) + -1867216.25) / 36524.25) / 4
           + 1525;
        int v3 = (int)(((double)v2 + -122.1) / 365.25);
        int v4 = v2 - 36525 * (v3 & 0x7FFFu) / 0x64;
        int v5 = (int)((double)v4 / 30.6001);
        *(_DWORD *)(result + 16) = v4 - (int)((double)v5 * 30.6001);
        if (v5 < 14) {
          int v6 = -1;
        }
        else {
          int v6 = -13;
        }
        int v7 = v6 + v5;
        if (v7 > 2) {
          int v8 = -4716;
        }
        else {
          int v8 = -4715;
        }
        *(_DWORD *)(result + 8) = v8 + v3;
        *(_DWORD *)(result + 12) = v7;
      }

      else
      {
        *(_OWORD *)(result + 16) = 0u;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)double result = 0u;
        uint64_t v1 = (_BYTE *)(result + 46);
      }
    }

    else
    {
      *(void *)(result + 8) = 0x1000007D0LL;
      *(_DWORD *)(result + 16) = 1;
    }

    *uint64_t v1 = 1;
  }

  return result;
}

void **sub_1812C70E8(void **result, void *a2, char *__s)
{
  int v4 = result;
  if (!__s)
  {
    int v8 = 0LL;
    goto LABEL_8;
  }

  size_t v6 = strlen(__s);
  unint64_t v7 = v6 + 1;
  if (!a2)
  {
    double result = (void **)sub_18126F0AC(v6 + 1);
    int v8 = result;
    if (!result) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  double result = (void **)sub_1812F2264((uint64_t)a2, v7);
  int v8 = result;
  if (result) {
LABEL_7:
  }
    double result = (void **)memcpy(v8, __s, v7);
LABEL_8:
  if (*v4) {
    double result = (void **)sub_1812F20DC(a2, *v4);
  }
  *int v4 = v8;
  return result;
}

uint64_t sub_1812C7184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  if (!*(void *)a3) {
    return 0LL;
  }
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  uint64_t v5 = sub_1812E2C64(*(void *)a1, *(char **)a3, *(_BYTE **)(a1 + 8));
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(unsigned __int8 **)(a3 + 8);
  if (!v7) {
    goto LABEL_15;
  }
  int v8 = *(char **)a3;
  if (!*(void *)a3)
  {
LABEL_16:
    uint64_t v12 = sub_18130D838(*(void *)a1, v7, *(unsigned __int8 **)(a1 + 8));
    double v14 = *(unsigned __int8 **)(a3 + 16);
    if (v12)
    {
      __int16 v13 = *(_WORD *)(v12 + 99);
      goto LABEL_18;
    }

    goto LABEL_20;
  }

  for (uint64_t i = *(unsigned __int8 **)(a3 + 8); ; ++i)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = *i;
    if ((_DWORD)v10 == (_DWORD)v11) {
      break;
    }
    if (byte_1813C6343[v10] != byte_1813C6343[v11]) {
      goto LABEL_16;
    }
LABEL_9:
    ++v8;
  }

  if (*v8) {
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v5 + 16);
  if (v12)
  {
    while (1)
    {
      __int16 v13 = *(_WORD *)(v12 + 99);
      if ((v13 & 3) == 2) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 40);
      if (!v12) {
        goto LABEL_15;
      }
    }

    double v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_18:
    int v15 = *(unsigned __int16 *)(v12 + 94) + 1;
    *(_WORD *)(v12 + 99) = v13 & 0xFFFB;
    sub_18130DB64(v14, v15, *(void *)(v12 + 16), v12);
    *(_WORD *)(v12 + 99) |= 0x80u;
    if (!*(void *)(v12 + 72))
    {
      *(_WORD *)(v6 + 58) = **(_WORD **)(v12 + 16);
      goto LABEL_21;
    }

    return 0LL;
  }

uint64_t sub_1812C72E0(uint64_t a1, int a2, int a3, int a4, int8x8_t a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18)) {
      sub_1812FDE20(a1);
    }
  }

  int v10 = *(_DWORD *)(v9 + 52);
  *(_BYTE *)(v9 + 38) = a3;
  int v11 = v10 - *(_DWORD *)(v9 + 56);
  if (v11 > a3) {
    a3 = v11;
  }
  if ((*(_WORD *)(v9 + 40) & 2) != 0)
  {
    if (!*(_BYTE *)(a1 + 17)) {
      return 8LL;
    }
    int v17 = *(_DWORD *)(a1 + 20);
    uint64_t v16 = 8LL;
    goto LABEL_23;
  }

  if ((a2 - 512) <= 0xFE00)
  {
    a5.i32[0] = a2;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(a5);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.i32[0] <= 1u)
    {
      BOOL v13 = a3 > 32 && a2 == 512;
      int v14 = v13 ? 1024 : a2;
      *(_DWORD *)(v9 + 52) = v14;
      uint64_t v15 = *(void *)(v9 + 136);
      if (v15)
      {
        *(void *)(v9 + 136) = v15 - 4;
        sub_1812FC960(v15 - 4);
        *(void *)(v9 + 136) = 0LL;
      }
    }
  }

  uint64_t v16 = sub_18126C43C(*(void *)v9, (_DWORD *)(v9 + 52), a3);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v9 + 52) - (unsigned __int16)a3;
  if (a4) {
    *(_WORD *)(v9 + 40) |= 2u;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    int v17 = *(_DWORD *)(a1 + 20);
LABEL_23:
    int v18 = v17 - 1;
    *(_DWORD *)(a1 + 20) = v18;
    if (!v18) {
      sub_1812FDEFC(a1);
    }
  }

  return v16;
}

uint64_t *sub_1812C742C( uint64_t *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!*((_DWORD *)result + 12))
  {
    uint64_t v9 = result;
    if (!*((_BYTE *)result + 302))
    {
      uint64_t v10 = *result;
      int v11 = *(_DWORD *)(*result + 44);
      double result = (uint64_t *)sub_1812FA130(*result, a2, &a9);
      if (result)
      {
        uint8x8_t v12 = result;
        ++*((_BYTE *)v9 + 30);
        uint64_t v21 = v9[51];
        __int128 v19 = *(_OWORD *)(v9 + 47);
        __int128 v20 = *(_OWORD *)(v9 + 49);
        __int128 v15 = *(_OWORD *)(v9 + 39);
        __int128 v16 = *(_OWORD *)(v9 + 41);
        __int128 v17 = *(_OWORD *)(v9 + 43);
        __int128 v18 = *(_OWORD *)(v9 + 45);
        __int128 v13 = *(_OWORD *)(v9 + 35);
        __int128 v14 = *(_OWORD *)(v9 + 37);
        v9[51] = 0LL;
        *(_OWORD *)(v9 + 47) = 0u;
        *(_OWORD *)(v9 + 49) = 0u;
        *(_OWORD *)(v9 + 43) = 0u;
        *(_OWORD *)(v9 + 45) = 0u;
        *(_OWORD *)(v9 + 39) = 0u;
        *(_OWORD *)(v9 + 41) = 0u;
        *(_OWORD *)(v9 + 35) = 0u;
        *(_OWORD *)(v9 + 37) = 0u;
        *(_DWORD *)(v10 + 44) |= 2u;
        sub_18126E93C(v9, result);
        *(_DWORD *)(v10 + 44) = v11;
        double result = sub_1812F20DC((void *)v10, v12);
        *(_OWORD *)(v9 + 47) = v19;
        *(_OWORD *)(v9 + 49) = v20;
        v9[51] = v21;
        *(_OWORD *)(v9 + 39) = v15;
        *(_OWORD *)(v9 + 41) = v16;
        *(_OWORD *)(v9 + 43) = v17;
        *(_OWORD *)(v9 + 45) = v18;
        *(_OWORD *)(v9 + 35) = v13;
        *(_OWORD *)(v9 + 37) = v14;
        --*((_BYTE *)v9 + 30);
      }

      else
      {
        if (!*(_BYTE *)(v10 + 103)) {
          *((_DWORD *)v9 + 6) = 18;
        }
        ++*((_DWORD *)v9 + 12);
      }
    }
  }

  return result;
}

uint64_t sub_1812C758C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 400) || *(void *)(a3 + 104) || *(_BYTE *)(a2 + 63) == 1) {
    return 0LL;
  }
  uint64_t v8 = *(void *)a1;
  if ((_DWORD)a4 == 11)
  {
  }

  uint64_t v9 = *(void *)(a3 + 40);
  if (*(_DWORD *)v9 != 1) {
    return 0LL;
  }
  if (*(void *)(v9 + 48)) {
    return 0LL;
  }
  if (*(void *)(a3 + 48)) {
    return 0LL;
  }
  if (*(void *)(a3 + 72)) {
    return 0LL;
  }
  if (*(void *)(a3 + 56)) {
    return 0LL;
  }
  if (*(void *)(a3 + 96)) {
    return 0LL;
  }
  if (*(void *)(a3 + 80)) {
    return 0LL;
  }
  unsigned int v203 = a5;
  if ((*(_BYTE *)(a3 + 4) & 1) != 0) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = a4;
  uint64_t result = sub_181321CB0(a1, 0, v9 + 8, a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  if (*(_DWORD *)(result + 40) == *(_DWORD *)(a2 + 40) && *(void *)(result + 96) == *(void *)(a2 + 96)) {
    return 0LL;
  }
  int v20 = *(_DWORD *)(a2 + 48);
  int v21 = *(_DWORD *)(result + 48);
  if (((v21 ^ v20) & 0x80) != 0) {
    return 0LL;
  }
  if (*(_BYTE *)(result + 63)) {
    return 0LL;
  }
  int v22 = *(unsigned __int16 *)(a2 + 54);
  if (v22 != *(unsigned __int16 *)(result + 54)
    || *(unsigned __int16 *)(a2 + 52) != *(unsigned __int16 *)(result + 52)
    || (v20 & 0x10000) != 0 && (v21 & 0x10000) == 0)
  {
    return 0LL;
  }

  if ((__int16)v22 >= 1)
  {
    uint64_t v23 = 0LL;
    do
    {
      uint64_t v24 = *(void *)(a2 + 8);
      uint64_t v201 = *(void *)(v19 + 8);
      uint64_t v25 = v24 + 16 * v23;
      __int16 v27 = *(_WORD *)(v25 + 14);
      int v26 = (__int16 *)(v25 + 14);
      int v28 = v27 & 0x60;
      uint64_t v29 = v201 + 16 * v23;
      __int16 v31 = *(_WORD *)(v29 + 14);
      uint64_t v30 = (_WORD *)(v29 + 14);
      if (v28 != (v31 & 0x60)) {
        return 0LL;
      }
      if (v28)
      {
        int v32 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(_BYTE *)(v19 + 63)
          && (uint64_t v50 = *(_DWORD **)(v19 + 80)) != 0LL
          && *v50 >= v32)
        {
          BOOL v33 = *(unsigned __int8 **)&v50[6 * (v32 - 1) + 2];
        }

        else
        {
          BOOL v33 = 0LL;
        }

        int v34 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(_BYTE *)(a2 + 63)
          && (uint64_t v51 = *(_DWORD **)(a2 + 80)) != 0LL
          && *v51 >= v34)
        {
          uint64_t v35 = *(unsigned __int8 **)&v51[6 * (v34 - 1) + 2];
        }

        else
        {
          uint64_t v35 = 0LL;
        }
      }

      __int16 v36 = *v26;
      if ((*v26 & 0x200) != 0)
      {
        uint64_t v38 = *(void *)(v24 + 16 * v23) - 1LL;
        if ((v36 & 4) != 0)
        {
        }

        int v37 = (const char *)(v38 + 1);
      }

      else
      {
        int v37 = 0LL;
      }

      if ((*v30 & 0x200) != 0)
      {
        uint64_t v42 = *(void *)(v201 + 16 * v23) - 1LL;
        if ((*v30 & 4) != 0)
        {
        }

        int v41 = (const char *)(v42 + 1);
      }

      else
      {
        int v41 = 0LL;
      }

      if (sqlite3_stricmp(v37, v41)
        || (*(_BYTE *)(v24 + 16 * v23 + 8) & 0xF) != 0 && (*(_BYTE *)(v201 + 16 * v23 + 8) & 0xF) == 0)
      {
        return 0LL;
      }

      if (v23 && (v36 & 0x60) == 0)
      {
        int v45 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(_BYTE *)(a2 + 63)
          && (uint64_t v52 = *(_DWORD **)(a2 + 80)) != 0LL
          && *v52 >= v45)
        {
          uint64_t v46 = *(void *)&v52[6 * (v45 - 1) + 2];
        }

        else
        {
          uint64_t v46 = 0LL;
        }

        int v47 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(_BYTE *)(v19 + 63)
          && (uint64_t v48 = *(_DWORD **)(v19 + 80)) != 0LL
          && *v48 >= v47)
        {
          uint64_t v49 = *(void *)&v48[6 * (v47 - 1) + 2];
        }

        else if (v46)
        {
          return 0LL;
        }
      }
    }

    while (++v23 < *(__int16 *)(a2 + 54));
  }

  uint64_t v53 = *(void *)(a2 + 16);
  if (v53)
  {
    int v54 = 0;
    while (1)
    {
      if (*(_BYTE *)(v53 + 98)) {
        int v54 = 1;
      }
      uint64_t v55 = *(void *)(v19 + 16);
      if (!v55) {
        return 0LL;
      }
      while (1)
      {
        uint64_t result = sub_18134520C(v53, v55);
        if ((_DWORD)result) {
          break;
        }
        uint64_t v55 = *(void *)(v55 + 40);
        if (!v55) {
          return result;
        }
      }

      if (*(_DWORD *)(v55 + 88) == *(_DWORD *)(v53 + 88) && *(void *)(v19 + 96) == *(void *)(a2 + 96))
      {
        if (!off_18C465520) {
          return 0LL;
        }
        uint64_t result = off_18C465520(411LL);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v53 = *(void *)(v53 + 40);
      if (!v53) {
        goto LABEL_97;
      }
    }
  }

  int v54 = 0;
LABEL_97:
  unint64_t v56 = *(void *)(a2 + 32);
  uint64_t v57 = *(void *)(v8 + 48);
  if ((v57 & 0x4000) == 0)
  {
    if ((v57 & 0x100000000LL) == 0)
    {
LABEL_104:
      uint64_t v58 = *(void *)(v19 + 96);
      if (v58)
      {
        int v59 = (uint64_t *)(*(void *)(v8 + 32) + 24LL);
        LODWORD(v60) = -1;
        do
        {
          uint64_t v61 = *v59;
          v59 += 4;
          uint64_t v60 = (v60 + 1);
        }

        while (v61 != v58);
      }

      else
      {
        uint64_t v60 = 4294934528LL;
      }

      uint64_t v62 = sub_1812B9B34((uint64_t *)a1, v56, v13, v14, v15, v16, v17, v18);
      sub_18128BBA8(a1, v60);
      uint64_t v63 = *(unsigned int *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v63 + 2;
      uint64_t v68 = sub_181344CA4(a1, v203, a2);
      char v69 = *(_BYTE *)(a1 + 31);
      if (v69)
      {
        unsigned __int8 v70 = v69 - 1;
        *(_BYTE *)(a1 + 31) = v70;
        unsigned int v202 = *(_DWORD *)(a1 + 4LL * v70 + 224);
      }

      else
      {
        unsigned int v202 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v202;
      }

      sub_1813103F4(v62, 75LL, 0LL, v202, v64, v65, v66, v67);
      if (*(_BYTE *)(a1 + 31))
      {
        unsigned __int8 v74 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v74;
        unsigned int v200 = *(_DWORD *)(a1 + 4LL * v74 + 224);
      }

      else
      {
        unsigned int v200 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v200;
      }

      sub_18128BBE0((void *)a1, (v63 + 1), v203, a2, 113LL, v71, v72, v73);
      if ((*(_BYTE *)(v8 + 44) & 4) == 0
        && (*(__int16 *)(a2 + 52) < 0 && *(void *)(a2 + 16) || v54 || (v11 - 3) <= 0xFFFFFFFD))
      {
        int v79 = sub_1813103F4(v62, 36LL, (v63 + 1), 0LL, v75, v76, v77, v78);
        int v198 = sub_181319B54(v62, 9LL, v80, v81, v82, v83, v84, v85);
        if (*(_BYTE *)(*(void *)v62 + 103LL)) {
          uint64_t v86 = &byte_18C550680;
        }
        else {
          uint64_t v86 = (char *)(*(void *)(v62 + 136) + 40LL * v79);
        }
        *((_DWORD *)v86 + 2) = *(_DWORD *)(v62 + 144);
      }

      else
      {
        int v198 = 0;
      }

      if ((*(_BYTE *)(v19 + 48) & 0x80) != 0)
      {
        sub_181319D20(a1, v203, *(_DWORD *)(a2 + 40), 1, *(void *)a2);
        sub_181319D20(a1, v60, *(_DWORD *)(v19 + 40), 0, *(void *)v19);
        int v199 = 0;
      }

      else
      {
        sub_18128BBE0((void *)a1, v63, v60, v19, 112LL, v76, v77, v78);
        int v199 = sub_1813103F4(v62, 36LL, v63, 0LL, v87, v88, v89, v90);
        if (*(__int16 *)(a2 + 52) < 0)
        {
          if (*(void *)(a2 + 16) || (*(_BYTE *)(v8 + 44) & 8) != 0)
          {
            uint64_t v115 = v62;
            uint64_t v116 = 135LL;
            uint64_t v117 = v63;
          }

          else
          {
            uint64_t v115 = v62;
            uint64_t v116 = 127LL;
            uint64_t v117 = (v63 + 1);
          }

          uint64_t v100 = sub_1813103F4(v115, v116, v117, v200, v91, v92, v93, v94);
        }

        else
        {
          uint64_t v100 = sub_1813103F4(v62, 135LL, v63, v200, v91, v92, v93, v94);
          if ((*(_BYTE *)(v8 + 44) & 4) == 0)
          {
            int v101 = sub_181279C3C(v62, 31LL, (v63 + 1), 0LL, v200, v97, v98, v99);
            sub_181344614((uint64_t *)a1, v11, a2, v102, v103, v104, v105, v106);
            if (*(_BYTE *)(*(void *)v62 + 103LL)) {
              int v107 = &byte_18C550680;
            }
            else {
              int v107 = (char *)(*(void *)(v62 + 136) + 40LL * v101);
            }
            *((_DWORD *)v107 + 2) = *(_DWORD *)(v62 + 144);
          }

          sub_1813451A8(a1, v68, v200, v95, v96, v97, v98, v99);
        }

        int v123 = *(_DWORD *)(v8 + 44);
        if ((v123 & 4) != 0)
        {
          sub_181319BA8(v62, 137LL, (v63 + 1), v118, v119, v120, v121, v122);
          int v123 = *(_DWORD *)(v8 + 44);
          __int16 v124 = 152;
        }

        else
        {
          __int16 v124 = 169;
        }

        if ((v123 & 4) != 0)
        {
          sub_181279C3C(v62, 129LL, (v63 + 1), v63, v200, v120, v121, v122);
        }

        else
        {
          sub_181279C3C(v62, 134LL, v63, v202, 1LL, v120, v121, v122);
          v124 &= 0x39u;
        }

        sub_181279C3C(v62, 128LL, (v63 + 1), v202, v200, v125, v126, v127);
        if ((*(_BYTE *)(v8 + 44) & 4) == 0) {
          sub_181289F90((uint64_t *)v62, -1, a2, 0xFFFFFFFB);
        }
        int v132 = *(_DWORD *)(v62 + 144);
        BOOL v133 = __OFSUB__(v132, 1);
        int v134 = v132 - 1;
        if (v134 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40LL * v134 + 2) = v124;
        }
        sub_1813103F4(v62, 39LL, v63, v100, v128, v129, v130, v131);
        sub_1813103F4(v62, 122LL, v63, 0LL, v135, v136, v137, v138);
        sub_1813103F4(v62, 122LL, (v63 + 1), 0LL, v139, v140, v141, v142);
      }

      uint64_t v143 = *(void *)(a2 + 16);
      if (!v143)
      {
LABEL_185:
        if (v199)
        {
          if (*(_BYTE *)(*(void *)v62 + 103LL)) {
            uint64_t v190 = &byte_18C550680;
          }
          else {
            uint64_t v190 = (char *)(*(void *)(v62 + 136) + 40LL * v199);
          }
          *((_DWORD *)v190 + 2) = *(_DWORD *)(v62 + 144);
        }

        if (v200)
        {
          uint64_t v191 = *(unsigned __int8 *)(a1 + 31);
          if (v191 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v191 + 1;
            *(_DWORD *)(a1 + 4 * v191 + 224) = v200;
          }
        }

        if (v202)
        {
          uint64_t v192 = *(unsigned __int8 *)(a1 + 31);
          if (v192 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v192 + 1;
            *(_DWORD *)(a1 + 4 * v192 + 224) = v202;
          }
        }

        if (!v198) {
          return 1LL;
        }
        if (*(void *)(a1 + 160)) {
          sub_181342D84((uint64_t *)a1, v108, v109, v110, v111, v112, v113, v114);
        }
        sub_1813103F4(v62, 70LL, 0LL, 0LL, v111, v112, v113, v114);
        if (*(_BYTE *)(*(void *)v62 + 103LL)) {
          unint64_t v197 = &byte_18C550680;
        }
        else {
          unint64_t v197 = (char *)(*(void *)(v62 + 136) + 40LL * v198);
        }
        *((_DWORD *)v197 + 2) = *(_DWORD *)(v62 + 144);
        sub_1813103F4(v62, 122LL, (v63 + 1), 0LL, v193, v194, v195, v196);
        return 0LL;
      }

      while (1)
      {
        for (uint64_t i = *(void *)(v19 + 16); i; uint64_t i = *(void *)(i + 40))
        {
          if (sub_18134520C(v143, i)) {
            break;
          }
        }

        sub_181279C3C(v62, 112LL, v63, *(unsigned int *)(i + 88), v60, v112, v113, v114);
        sub_181319D4C(a1, i);
        sub_181279C3C(v62, 113LL, (v63 + 1), *(unsigned int *)(v143 + 88), v203, v149, v150, v151);
        sub_181319D4C(a1, v143);
        int v156 = *(_DWORD *)(v62 + 144);
        BOOL v133 = __OFSUB__(v156, 1);
        int v157 = v156 - 1;
        if (v157 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40LL * v157 + 2) = 1;
        }
        int v163 = sub_1813103F4(v62, 36LL, v63, 0LL, v152, v153, v154, v155);
        if ((*(_BYTE *)(v8 + 44) & 4) != 0) {
          break;
        }
        if ((*(_BYTE *)(v19 + 48) & 0x80) != 0)
        {
          if ((*(_WORD *)(v143 + 99) & 3) == 2) {
            __int16 v164 = 9;
          }
          else {
            __int16 v164 = 8;
          }
          goto LABEL_177;
        }

uint64_t sub_1812C8198(uint64_t a1, int a2, double a3)
{
  if (off_18C550648) {
    a3 = off_18C550648(a1);
  }
  if (*(_BYTE *)(a1 + 111))
  {
    if ((*(_BYTE *)(a1 + 44) & 1) == 0)
    {
LABEL_5:
      BOOL v5 = 0;
      goto LABEL_8;
    }
  }

  else
  {
    sub_1812FA020(a1);
    if ((*(_BYTE *)(a1 + 44) & 1) == 0) {
      goto LABEL_5;
    }
  }

  BOOL v5 = *(_BYTE *)(a1 + 197) == 0;
LABEL_8:
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6 < 1)
  {
    int v8 = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    int v8 = 0;
    uint64_t v9 = 8LL;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + v9);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 2) {
          int v8 = 1;
        }
        sub_1812B57D4(v10, a2, !v5, a3);
        int v6 = *(_DWORD *)(a1 + 40);
      }

      ++v7;
      v9 += 32LL;
    }

    while (v7 < v6);
  }

  uint64_t result = (uint64_t)sub_1812A1B68((int *)a1, 0x88u);
  if (off_18C550650) {
    uint64_t result = off_18C550650(result);
  }
  if (v5)
  {
    for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    uint64_t result = (uint64_t)sub_1812D6078(a1);
  }

  if (!*(_BYTE *)(a1 + 111)) {
    uint64_t result = sub_1812FA0B4(a1);
  }
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 48) &= 0xFFFFFFFDFFF7FFFFLL;
  uint64_t v13 = *(uint64_t (**)(void))(a1 + 296);
  if (v13 && (v8 || !*(_BYTE *)(a1 + 101))) {
    return v13(*(void *)(a1 + 288));
  }
  return result;
}

uint64_t sub_1812C8318(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  int v50 = 1;
  unsigned int v51 = 0;
  int v49 = *(void *)(a1 + 200);
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 48LL))(*(void *)(a1 + 80), &v53);
  if ((_DWORD)v5
    || (int v6 = *(int8x8_t **)(a1 + 328),
        uint64_t v5 = sub_1813C2140(*(void *)(a1 + 80), v6, *(_DWORD *)(*(void *)a1 + 8LL) + 1),
        (_DWORD)v5))
  {
    uint64_t v8 = v5;
    int v9 = 0;
LABEL_4:
    uint64_t v10 = (_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    goto LABEL_5;
  }

  if (v6->i8[0])
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, void, int *))(v4 + 56))(v4, v6, 0LL, &v50);
    int v9 = 0;
    if ((_DWORD)v8) {
      goto LABEL_48;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    int v9 = 0;
  }

  if (v50)
  {
    int v9 = 0;
    *(void *)(a1 + 96) = 0LL;
    uint64_t v15 = (uint64_t *)(a1 + 96);
    int v16 = a2;
LABEL_26:
    while (1)
    {
      *(float *)&double v7 = sub_1812C8B74(a1, a2, v53, &v52, &v51, v7);
      if ((_DWORD)v17) {
        break;
      }
      LODWORD(v18) = v52;
      uint64_t v19 = *(unsigned int *)(a1 + 184);
      if (v52 == -1)
      {
        uint64_t v18 = (v53 - v19) / (*(void *)(a1 + 200) + 8LL);
        int v52 = v18;
      }

      uint64_t v20 = *v15;
      if (!(v18 | a2) && *(void *)(a1 + 104) + v19 == v20)
      {
        uint64_t v18 = (v53 - v20) / (*(void *)(a1 + 200) + 8LL);
        int v52 = v18;
      }

      if (v20 == v19)
      {
        unsigned int v21 = v51;
        uint64_t v22 = sub_1812C8DA0(a1, v51);
        if ((_DWORD)v22)
        {
          uint64_t v8 = v22;
          goto LABEL_4;
        }

        *(_DWORD *)(a1 + 32) = v21;
        if (*(_DWORD *)(a1 + 188) < v21) {
          *(_DWORD *)(a1 + 188) = v21;
        }
      }

      if ((_DWORD)v18)
      {
        int v23 = 0;
        int v24 = v9 + v18;
        while (1)
        {
          if (v16)
          {
            ++*(_DWORD *)(a1 + 132);
            for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
              *(_DWORD *)(i + 24) = 1;
            sub_18126C6E4(*(void **)(a1 + 336), 0);
          }

          uint64_t v26 = sub_1812C8EA0(a1, (void *)(a1 + 96), 0LL, 1, 0);
          if ((_DWORD)v26) {
            break;
          }
          int v16 = 0;
          ++v9;
          if (++v23 == (_DWORD)v18)
          {
            int v9 = v24;
            goto LABEL_26;
          }
        }

        uint64_t v8 = v26;
        if ((_DWORD)v26 != 101)
        {
          if ((_DWORD)v26 == 522) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        int v16 = 0;
        *uint64_t v15 = v53;
      }
    }

    uint64_t v8 = v17;
    if ((_DWORD)v17 != 101) {
      goto LABEL_4;
    }
    goto LABEL_49;
  }

LABEL_101:
  if (*(void *)v34)
  {
    (*(void (**)(void *))(*(void *)v34 + 8LL))(v34);
    *(void *)int v34 = 0LL;
  }

  uint64_t v42 = (uint64_t (**)(void *))&off_18C4653A8;
  if (!dword_18C465380) {
    goto LABEL_108;
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v34);
  --qword_18C468B10;
  off_18C4653A8(v34);
  int v34 = (void *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v42 = (uint64_t (**)(void *))&xmmword_18C465410;
LABEL_108:
    (*v42)(v34);
  }

                if (!sqlite3_strnicmp(a2, "sqlite_", 7))
                {
                  uint64_t v77 = a2 + 7;
                  uint64_t v78 = "schema";
                  for (uint64_t m = a2 + 7; ; ++m)
                  {
                    uint64_t v80 = *m;
                    uint64_t v81 = *v78;
                    if ((_DWORD)v80 == (_DWORD)v81)
                    {
                      if (!*m)
                      {
                        uint64_t v32 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 24LL) + 8LL);
LABEL_127:
                        uint64_t v90 = "sqlite_master";
                        return sub_18130D648((uint64_t)v32, (unsigned __int8 *)v90);
                      }
                    }

                    else if (byte_1813C6343[v80] != byte_1813C6343[v81])
                    {
                      for (uint64_t n = "temp_schema"; ; ++n)
                      {
                        uint64_t v83 = *v77;
                        uint64_t v84 = *n;
                        if ((_DWORD)v83 == (_DWORD)v84)
                        {
                          if (!*v77)
                          {
                            uint64_t v32 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 56LL) + 8LL);
                            uint64_t v90 = "sqlite_temp_master";
                            return sub_18130D648((uint64_t)v32, (unsigned __int8 *)v90);
                          }
                        }

                        else if (byte_1813C6343[v83] != byte_1813C6343[v84])
                        {
                          return 0LL;
                        }

                        ++v77;
                      }
                    }

                    ++v78;
                  }
                }

                return 0LL;
              }
            }
          }
        }

        else
        {
          int v59 = (uint64_t *)(v25 + 16);
          uint64_t v60 = *(_DWORD *)(v25 + 12);
          if (v60) {
            goto LABEL_116;
          }
        }

        int v59 = &qword_18C550660;
        goto LABEL_77;
      }
    }

    else
    {
      uint64_t v22 = (uint64_t *)(v16 + 16);
      int v23 = *(_DWORD *)(v16 + 12);
      if (v23) {
        goto LABEL_67;
      }
    }

    uint64_t v22 = &qword_18C550660;
    goto LABEL_24;
  }

  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if ((int)v5 < 1)
  {
LABEL_11:
    for (iuint64_t i = "main"; ; ++ii)
    {
      int v13 = *a3;
      uint64_t v14 = *(unsigned __int8 *)ii;
      if ((_DWORD)v13 == (_DWORD)v14)
      {
        if (!*a3)
        {
          LODWORD(v6) = 0;
          double v7 = *(void *)(a1 + 32);
          goto LABEL_31;
        }
      }

      else if (byte_1813C6343[v13] != byte_1813C6343[v14])
      {
        return 0LL;
      }

      ++a3;
    }
  }

  int v6 = 0LL;
  double v7 = *(void *)(a1 + 32);
LABEL_4:
  uint64_t v8 = *(unsigned __int8 **)(v7 + 32 * v6);
  for (juint64_t j = a3; ; ++jj)
  {
    uint64_t v10 = *jj;
    uint64_t v11 = *v8;
    if ((_DWORD)v10 == (_DWORD)v11) {
      break;
    }
    if (byte_1813C6343[v10] != byte_1813C6343[v11])
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
      goto LABEL_4;
    }

            if (*(int *)(v40 + 16) < 1)
            {
              uint64_t v57 = 0LL;
              uint64_t v61 = 0LL;
            }

            else
            {
              unsigned __int8 v74 = v43;
              unint64_t v56 = 0LL;
              uint64_t v57 = 0LL;
              uint64_t v58 = *(void *)(a1 + 8);
              while (1)
              {
                int v59 = v57 ? ", " : &byte_1813CEAEE;
                uint64_t v57 = sqlite3_mprintf( "%z%s%w.%w.%w",  v57,  v59,  v58,  *(void *)(v40 + 8),  *(void *)(*(void *)(v40 + 32) + 8 * v56));
                if (!v57) {
                  break;
                }
                ++v56;
                uint64_t v60 = *(int *)(v40 + 16);
                if (v56 >= v60) {
                  goto LABEL_112;
                }
              }

              LODWORD(v60) = *(_DWORD *)(v40 + 16);
LABEL_112:
              if ((int)v60 < 1)
              {
                uint64_t v61 = 0LL;
              }

              else
              {
                uint64_t v62 = 0LL;
                uint64_t v61 = 0LL;
                do
                {
                  if (v61) {
                    uint64_t v63 = ", ";
                  }
                  else {
                    uint64_t v63 = &byte_1813CEAEE;
                  }
                  uint64_t v61 = sqlite3_mprintf( "%z%s%w.%w.%w",  v61,  v63,  a2,  *(void *)(v40 + 8),  *(void *)(*(void *)(v40 + 32) + 8 * v62));
                  if (!v61) {
                    break;
                  }
                  ++v62;
                }

                while (v62 < *(int *)(v40 + 16));
              }

              uint64_t v43 = v74;
            }

            uint64_t v64 = (unsigned __int8 *)sqlite3_mprintf( "SELECT %s,%s FROM %w.%w, %w.%w WHERE %s AND (%z)",  v57,  v61,  *(void *)(a1 + 8),  *(void *)(v40 + 8),  a2,  *(void *)(v40 + 8),  v33,  v43);
            uint64_t v66 = v64;
            uint64_t v8 = 7LL;
            if (v61)
            {
              if (v57)
              {
                if (v64)
                {
                  uint64_t v8 = sub_18126DFE0(*(void *)a1, v64, 0xFFFFFFFFLL, 0LL, 0LL, &v80, 0LL, v65);
                  if (!(_DWORD)v8)
                  {
                    uint64_t v67 = *(void *)(a1 + 96);
                    *(void *)uint64_t v67 = v80;
                    *(_DWORD *)(v67 + 12) = *(_DWORD *)(v40 + 16);
                    while (sqlite3_step(v80) == 100)
                    {
                      if (*(_DWORD *)(v40 + 24)) {
                        uint64_t v68 = sqlite3_column_int64(v80, 0);
                      }
                      else {
                        uint64_t v68 = 0LL;
                      }
                      sub_1813B8D20(23, v68, a1, v40);
                    }

                    uint64_t v8 = sqlite3_finalize(v80);
                  }
                }
              }
            }

            if (v66)
            {
              char v69 = (uint64_t (**)(unsigned __int8 *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_139;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v66);
              --qword_18C468B10;
              off_18C4653A8(v66);
              uint64_t v66 = (unsigned __int8 *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                char v69 = (uint64_t (**)(unsigned __int8 *))&xmmword_18C465410;
LABEL_139:
                (*v69)(v66);
              }
            }

            if (v57)
            {
              unsigned __int8 v70 = (void (**)(char *))&off_18C4653A8;
              if (!dword_18C465380) {
                goto LABEL_146;
              }
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v57);
              --qword_18C468B10;
              off_18C4653A8(v57);
              uint64_t v57 = (char *)xmmword_18C468B70;
              if ((void)xmmword_18C468B70)
              {
                unsigned __int8 v70 = (void (**)(char *))&xmmword_18C465410;
LABEL_146:
                (*v70)(v57);
              }
            }

            if (!v61) {
              goto LABEL_82;
            }
            uint64_t v71 = (void (**)(char *))&off_18C4653A8;
            if (dword_18C465380)
            {
              if ((void)xmmword_18C468B70) {
                xmmword_18C465400(xmmword_18C468B70);
              }
              qword_18C468AC8[0] -= (int)off_18C4653B8(v61);
              --qword_18C468B10;
              off_18C4653A8(v61);
              uint64_t v61 = (char *)xmmword_18C468B70;
              if (!(void)xmmword_18C468B70) {
                goto LABEL_82;
              }
              uint64_t v71 = (void (**)(char *))&xmmword_18C465410;
            }

            (*v71)(v61);
            goto LABEL_82;
          }

          uint64_t v35 = " AND ";
        }

        ++v37;
        if (!--v32) {
          goto LABEL_78;
        }
      }
    }

    goto LABEL_55;
  }

        uint64_t v64 = (void (**)(unsigned int *))&off_18C4653A8;
        if (dword_18C465380)
        {
          if ((void)xmmword_18C468B70) {
            xmmword_18C465400(xmmword_18C468B70);
          }
          qword_18C468AC8 -= (int)off_18C4653B8(v55);
          --qword_18C468B10;
          off_18C4653A8(v55);
          uint64_t v55 = (unsigned int *)xmmword_18C468B70;
          if (!(void)xmmword_18C468B70)
          {
LABEL_107:
            int v50 = v89;
            if ((_DWORD)v28) {
              return v28;
            }
LABEL_108:
            uint64_t v65 = v50 & 3;
            if ((v50 & 3) != 0)
            {
              if (*(_BYTE *)(v13 + 69))
              {
                uint64_t v90 = v50 & 3;
                uint64_t v66 = *(uint64_t (**)(void))(**(void **)(v13 + 16) + 88LL);
                if (v66)
                {
                  uint64_t v67 = v66();
                  if (v67 >= 0x10000) {
                    LODWORD(v68) = 0x10000;
                  }
                  else {
                    LODWORD(v68) = v67;
                  }
                  if (v67 >= 32) {
                    uint64_t v68 = v68;
                  }
                  else {
                    uint64_t v68 = 512LL;
                  }
                }

                else
                {
                  uint64_t v68 = 4096LL;
                }

                unsigned __int8 v70 = (v35 + v68 - 1) / v68 * v68;
                uint64_t v97 = v70;
                if (v35 < v70)
                {
                  uint64_t v63 = 0;
                  uint64_t v71 = v35;
                  while (1)
                  {
                    int v40 = sub_1812FC11C((uint64_t)v96, v92, a3, v71);
                    if ((_DWORD)v40) {
                      break;
                    }
                    v71 += v93;
                    ++v63;
                    if (v71 >= v70) {
                      goto LABEL_127;
                    }
                  }

    uint64_t v83 = *(void *)(v83 + 64);
  }

  while (v83);
  int v101 = *((_DWORD *)v304 + 14);
  *((_DWORD *)v304 + 14) = v101 + v82;
  LODWORD(v308) = v101 + 1;
  if (v297)
  {
    sub_181319C00((uint64_t)v304, *(unsigned __int8 **)(v12 + 40), v297);
    if (*(_BYTE *)(v12 + 32) == 89) {
      int v107 = 3LL;
    }
    else {
      int v107 = 0LL;
    }
    sub_18133A1C0(v304, v297, v107, v102, v103, v104, v105, v106);
  }

  uint64_t v108 = v50;
  uint64_t v109 = v299;
  if (v295)
  {
    sub_181319C00((uint64_t)v304, *(unsigned __int8 **)(v12 + 48), v295);
    if (*(_BYTE *)(v12 + 32) == 89) {
      uint64_t v115 = 4LL;
    }
    else {
      uint64_t v115 = 1LL;
    }
    sub_18133A1C0(v304, v295, v115, v110, v111, v112, v113, v114);
  }

  if (*(_BYTE *)(v12 + 32) == 89)
  {
LABEL_163:
    uint64_t v116 = *(unsigned __int8 *)(v12 + 33);
  }

  else
  {
    uint64_t v116 = *(unsigned __int8 *)(v12 + 33);
    if (v297 && v116 == *(unsigned __int8 *)(v12 + 34))
    {
      if (v116 == 86) {
        uint64_t v117 = 57LL;
      }
      else {
        uint64_t v117 = 55LL;
      }
      uint64_t v118 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v118)
      {
        uint64_t v118 = sub_18131044C(v14, v117, v297, 0LL, v295, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v118 + 1;
        uint64_t v119 = *(void *)(v14 + 136) + 40LL * v118;
        *(_BYTE *)uint64_t v119 = v117;
        *(_WORD *)(v119 + 2) = 0;
        *(_DWORD *)(v119 + 4) = v297;
        *(_DWORD *)(v119 + 8) = 0;
        *(_DWORD *)(v119 + 12) = v295;
        *(_BYTE *)(v119 + 1) = 0;
        *(void *)(v119 + 24) = 0LL;
        *(void *)(v119 + 32) = 0LL;
        *(void *)(v119 + 16) = 0LL;
      }

      sub_18133A530((uint64_t)v305, 0LL, v78, v86, a5, a6, a7, a8);
      uint64_t v127 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v127)
      {
        sub_18131044C(v14, 36LL, v293, 0LL, 0LL, v124, v125, v126);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v127 + 1;
        uint64_t v128 = *(void *)(v14 + 136) + 40LL * v127;
        *(_DWORD *)uint64_t v128 = 36;
        *(_DWORD *)(v128 + 4) = v293;
        *(_OWORD *)(v128 + 8) = 0u;
        *(_OWORD *)(v128 + 24) = 0u;
      }

      sub_18133A8DC((uint64_t)v305, v120, v121, v122, v123, v124, v125, v126);
      uint64_t v129 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v129)
      {
        sub_18131044C(v14, 146LL, v293, 0LL, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v129 + 1;
        uint64_t v130 = *(void *)(v14 + 136) + 40LL * v129;
        *(_DWORD *)uint64_t v130 = 146;
        *(_DWORD *)(v130 + 4) = v293;
        *(_OWORD *)(v130 + 8) = 0u;
        *(_OWORD *)(v130 + 24) = 0u;
      }

      uint64_t v131 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v131)
      {
        sub_18131044C(v14, 9LL, 0LL, v301, 0LL, a6, a7, a8);
      }

      else
      {
        *(_DWORD *)(v14 + 144) = v131 + 1;
        int v132 = *(void *)(v14 + 136) + 40LL * v131;
        *(void *)int v132 = 9LL;
        *(_DWORD *)(v132 + 8) = v301;
        *(void *)(v132 + 12) = 0LL;
        *(void *)(v132 + 28) = 0LL;
        *(void *)(v132 + 20) = 0LL;
        *(_DWORD *)(v132 + 36) = 0;
      }

      if (*(_BYTE *)(*(void *)v14 + 103LL)) {
        BOOL v133 = &byte_18C550680;
      }
      else {
        BOOL v133 = (char *)(*(void *)(v14 + 136) + 40LL * v118);
      }
      uint64_t v109 = v299;
      *((_DWORD *)v133 + 2) = *(_DWORD *)(v14 + 144);
      goto LABEL_163;
    }
  }

  if (v116 == 86 && v295 && *(_BYTE *)(v12 + 32) != 89)
  {
    int v134 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v134)
    {
      sub_18131044C(v14, 107LL, v297, v295, v297, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v134 + 1;
      uint64_t v135 = *(void *)(v14 + 136) + 40LL * v134;
      *(_DWORD *)uint64_t v135 = 107;
      *(_DWORD *)(v135 + 4) = v297;
      *(_DWORD *)(v135 + 8) = v295;
      *(_DWORD *)(v135 + 12) = v297;
      *(void *)(v135 + 24) = 0LL;
      *(void *)(v135 + 32) = 0LL;
      *(void *)(v135 + 16) = 0LL;
    }
  }

  if (*(_BYTE *)(v12 + 33) != 90)
  {
    uint64_t v136 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v136)
    {
      sub_18131044C(v14, 36LL, v289, 0LL, 0LL, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v136 + 1;
      uint64_t v137 = *(void *)(v14 + 136) + 40LL * v136;
      *(_DWORD *)uint64_t v137 = 36;
      *(_DWORD *)(v137 + 4) = v289;
      *(_OWORD *)(v137 + 8) = 0u;
      *(_OWORD *)(v137 + 24) = 0u;
    }
  }

  uint64_t v138 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v138)
  {
    sub_18131044C(v14, 36LL, v293, 0LL, 0LL, a6, a7, a8);
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v138 + 1;
    uint64_t v139 = *(void *)(v14 + 136) + 40LL * v138;
    *(_DWORD *)uint64_t v139 = 36;
    *(_DWORD *)(v139 + 4) = v293;
    *(_OWORD *)(v139 + 8) = 0u;
    *(_OWORD *)(v139 + 24) = 0u;
  }

  uint64_t v140 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v140)
  {
    sub_18131044C(v14, 36LL, v292, 0LL, 0LL, a6, a7, a8);
    if (!(_DWORD)v109) {
      goto LABEL_194;
    }
  }

  else
  {
    *(_DWORD *)(v14 + 144) = v140 + 1;
    uint64_t v141 = *(void *)(v14 + 136) + 40LL * v140;
    *(_DWORD *)uint64_t v141 = 36;
    *(_DWORD *)(v141 + 4) = v292;
    uint64_t v142 = 0uLL;
    *(_OWORD *)(v141 + 8) = 0u;
    *(_OWORD *)(v141 + 24) = 0u;
    if (!(_DWORD)v109) {
      goto LABEL_194;
    }
  }

  if (v291)
  {
    uint64_t v143 = (*v291 - 1);
    uint64_t v144 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v144)
    {
      sub_18131044C(v14, 80LL, v298, v109, v143, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v144 + 1;
      uint64_t v145 = *(void *)(v14 + 136) + 40LL * v144;
      *(_DWORD *)uint64_t v145 = 80;
      *(_DWORD *)(v145 + 4) = v298;
      *(_DWORD *)(v145 + 8) = v109;
      *(_DWORD *)(v145 + 12) = v143;
      *(void *)(v145 + 24) = 0LL;
      *(void *)(v145 + 32) = 0LL;
      *(void *)(v145 + 16) = 0LL;
    }

    uint64_t v146 = (*v291 - 1);
    uint64_t v147 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v147)
    {
      sub_18131044C(v14, 80LL, v109, v288, v146, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v147 + 1;
      int v148 = *(void *)(v14 + 136) + 40LL * v147;
      *(_DWORD *)int v148 = 80;
      *(_DWORD *)(v148 + 4) = v109;
      *(_DWORD *)(v148 + 8) = v288;
      *(_DWORD *)(v148 + 12) = v146;
      *(void *)(v148 + 24) = 0LL;
      *(void *)(v148 + 32) = 0LL;
      *(void *)(v148 + 16) = 0LL;
    }

    uint64_t v149 = (*v291 - 1);
    uint64_t v150 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v150)
    {
      sub_18131044C(v14, 80LL, v109, v290, v149, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v150 + 1;
      uint64_t v151 = *(void *)(v14 + 136) + 40LL * v150;
      *(_DWORD *)uint64_t v151 = 80;
      *(_DWORD *)(v151 + 4) = v109;
      *(_DWORD *)(v151 + 8) = v290;
      *(_DWORD *)(v151 + 12) = v149;
      *(void *)(v151 + 24) = 0LL;
      *(void *)(v151 + 32) = 0LL;
      *(void *)(v151 + 16) = 0LL;
    }

    a5 = (*v291 - 1);
    uint64_t v152 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v152)
    {
      sub_18131044C(v14, 80LL, v109, HIDWORD(v290), a5, a6, a7, a8);
    }

    else
    {
      *(_DWORD *)(v14 + 144) = v152 + 1;
      uint64_t v153 = *(void *)(v14 + 136) + 40LL * v152;
      *(_DWORD *)uint64_t v153 = 80;
      *(_DWORD *)(v153 + 4) = v109;
      *(_DWORD *)(v153 + 8) = HIDWORD(v290);
      *(_DWORD *)(v153 + 12) = a5;
      *(void *)(v153 + 24) = 0LL;
      *(void *)(v153 + 32) = 0LL;
      *(void *)(v153 + 16) = 0LL;
    }
  }

  if (!v58) {
    goto LABEL_166;
  }
  uint64_t v68 = 0LL;
  int v123 = v54;
  char v69 = v62;
  while (1)
  {
    if (((v15 >> v68) & 1) != 0) {
      goto LABEL_104;
    }
    unsigned __int8 v70 = &a2[12 * v68];
    uint64_t v73 = (unsigned __int8 *)*((void *)v70 + 1);
    uint64_t v72 = (unsigned __int8 **)(v70 + 4);
    uint64_t v71 = v73;
    if (!v73) {
      goto LABEL_104;
    }
    while (1)
    {
      unsigned __int8 v74 = *((_DWORD *)v71 + 1);
      if ((v74 & 0x82000) == 0) {
        break;
      }
      if ((v74 & 0x80000) != 0)
      {
        uint64_t v71 = *(unsigned __int8 **)(*((void *)v71 + 4) + 8LL);
        if (!v71) {
          goto LABEL_104;
        }
      }

      else
      {
        uint64_t v71 = (unsigned __int8 *)*((void *)v71 + 2);
        if (!v71) {
          goto LABEL_104;
        }
      }
    }

    if (!v120) {
      int v59 = 0;
    }
    if (v62 < -1) {
      break;
    }
    uint64_t v75 = *v71;
    if ((v75 == 169 || v75 == 167) && *((_DWORD *)v71 + 11) == v130 && *((_DWORD *)v71 + 12) == v62) {
      goto LABEL_134;
    }
LABEL_104:
    if (v59)
    {
    }

    goto LABEL_166;
  }

  uint64_t v76 = *(void *)(*(void *)(v50 + 80) + 24 * v54 + 8);
  while (1)
  {
    uint64_t v77 = *((_DWORD *)v71 + 1);
    if ((v77 & 0x82000) == 0) {
      break;
    }
    if ((v77 & 0x80000) != 0)
    {
      uint64_t v71 = *(unsigned __int8 **)(*((void *)v71 + 4) + 8LL);
      if (!v71) {
        break;
      }
    }

    else
    {
      uint64_t v71 = (unsigned __int8 *)*((void *)v71 + 2);
      if (!v71) {
        break;
      }
    }
  }

  if (v76)
  {
    while (1)
    {
      uint64_t v78 = *(_DWORD *)(v76 + 4);
      if ((v78 & 0x82000) == 0) {
        break;
      }
      if ((v78 & 0x80000) != 0)
      {
        uint64_t v76 = *(void *)(*(void *)(v76 + 32) + 8LL);
        if (!v76) {
          break;
        }
      }

      else
      {
        uint64_t v76 = *(void *)(v76 + 16);
        if (!v76) {
          break;
        }
      }
    }
  }

  int v79 = sub_18131BA10(0LL, v71, (unsigned __int8 *)v76, v130);
  int v54 = v123;
  uint64_t v62 = v69;
  if (v79) {
    goto LABEL_104;
  }
LABEL_134:
  if (v62 != -1)
  {
    uint64_t v80 = *a1;
    uint64_t v81 = (_BYTE **)sub_181289D04(*a1, *v72, a3, a4, a5, a6, (uint64_t)a7, a8);
    if (!v81) {
      uint64_t v81 = *(_BYTE ***)(*(void *)v80 + 16LL);
    }
    uint64_t v82 = *v81;
    int v54 = v123;
    uint64_t v83 = *(unsigned __int8 **)(*(void *)(v50 + 64) + 8 * v123);
    uint64_t v48 = v128;
    uint64_t v62 = v69;
    while (1)
    {
      uint64_t v84 = *v82;
      uint64_t v85 = *v83;
      if ((_DWORD)v84 == (_DWORD)v85)
      {
        if (!*v82) {
          break;
        }
      }

      else if (byte_1813C6343[v84] != byte_1813C6343[v85])
      {
        goto LABEL_104;
      }

      ++v82;
      ++v83;
    }
  }

  if ((v117 & 0x80) != 0) {
    *(_WORD *)(v48 + 30) = v113 + 1;
  }
  if ((v117 & 0x40) != 0)
  {
    uint64_t v86 = v68;
    uint64_t v87 = a2[12 * v68 + 12];
LABEL_158:
    uint64_t v55 = v116;
    unint64_t v56 = v110;
    if ((v87 & 2) != 0)
    {
      *(_DWORD *)(v48 + 48) |= 0x80000u;
      uint64_t v55 = v116;
    }

    if (v62 == -1) {
      uint64_t v55 = 1;
    }
    v15 |= 1LL << v86;
    uint64_t v53 = v114;
    goto LABEL_164;
  }

  if (!v107)
  {
    uint64_t v86 = v68;
    uint64_t v87 = a2[12 * v68 + 12];
    uint64_t v106 = v87 & 1 ^ v108;
    if (v106) {
      *a7 |= 1LL << v127;
    }
    else {
      uint64_t v106 = 0;
    }
LABEL_157:
    int v107 = 1;
    goto LABEL_158;
  }

  uint64_t v86 = v68;
  uint64_t v87 = a2[12 * v68 + 12];
  if ((v108 ^ v106) == (v87 & 1)) {
    goto LABEL_157;
  }
LABEL_166:
  uint64_t v92 = v54 < v111 || (_DWORD)v54 == 0;
  uint64_t v53 = v114;
  if (v92) {
    uint64_t v53 = 0;
  }
  LOBYTE(v55) = v116;
LABEL_172:
  if (v55 | v53)
  {
    int v9 = a2;
    uint64_t v8 = v117;
LABEL_174:
    uint64_t v93 = 0LL;
    v126 |= *(void *)(v48 + 8);
    while (2)
    {
      if (((1LL << v93) & v15) != 0) {
        goto LABEL_182;
      }
      uint64_t v96 = *(unsigned __int8 **)&v9[12 * v93 + 4];
      if (v96)
      {
        if (*v96 == 167 && (*((_DWORD *)v96 + 1) & 0x20) == 0)
        {
          uint64_t v98 = *((_DWORD *)v96 + 11);
          if (*((_DWORD *)a1 + 150) == v98)
          {
            uint64_t v94 = 1LL;
          }

          else
          {
            uint64_t v99 = *((unsigned int *)a1 + 149);
            uint64_t v100 = 0LL;
            int v101 = v99 - 1;
            while (*(_DWORD *)&v132[4 * v100] != v98)
            {
              if (v101 == ++v100) {
                goto LABEL_176;
              }
            }

            uint64_t v94 = 1LL << (v100 + 1);
          }
        }

        else if ((*((_DWORD *)v96 + 1) & 0x810000) != 0 || (uint64_t v94 = sub_181332EB0(v119, v96)) == 0)
        {
LABEL_176:
          LOWORD(v138) = 1;
          int v134 = sub_18129C78C;
          uint64_t v135 = sub_18131C570;
          uint64_t v139 = 0;
          sub_18131C57C((uint64_t)&v133, (uint64_t)v96);
          if ((_WORD)v138) {
            goto LABEL_177;
          }
LABEL_182:
          if (++v93 == v10)
          {
            uint64_t v14 = v125;
            int v13 = v127;
            int v16 = v128;
            uint64_t v17 = v112;
            goto LABEL_201;
          }

          continue;
        }
      }

      else
      {
LABEL_177:
        uint64_t v94 = 0LL;
      }

      break;
    }

    if ((v94 & ~v126) != 0) {
      uint64_t v95 = 0LL;
    }
    else {
      uint64_t v95 = 1LL << v93;
    }
    v15 |= v95;
    goto LABEL_182;
  }

  uint64_t v102 = 1;
LABEL_213:
  if (v15 != v121)
  {
    if (v102)
    {
      while (v10 >= 2)
      {
        if ((~v15 & ~(-1LL << --v10)) == 0) {
          return (char)v10;
        }
      }

              uint64_t v43 = &v22[v32];
              uint64_t v18 = &v43[v31];
              goto LABEL_104;
            }

            uint64_t v42 = (uint64_t)sqlite3_value_blob(v77);
            goto LABEL_95;
          }

          int v28 = COERCE_DOUBLE(bswap64(*(void *)(v18 + 1)));
          v18 += 9;
          if (v23 != 1)
          {
            if (v77)
            {
              BOOL v33 = *((_WORD *)v77 + 10);
              if ((v33 & 8) != 0)
              {
                *(void *)&uint64_t v4 = *(void *)v77;
              }

              else if ((v33 & 0x24) != 0)
              {
                *(double *)&uint64_t v4 = (double)*(uint64_t *)v77;
              }

              else if ((v33 & 0x12) != 0)
              {
                *(double *)&uint64_t v4 = sub_181303DB8((uint64_t)v77);
              }

              else
              {
                *(void *)&uint64_t v4 = 0LL;
              }
            }

            else
            {
              sub_1812CF36C(89752);
              *(void *)&uint64_t v4 = 0LL;
            }

            goto LABEL_104;
          }

          if (!v77) {
            break;
          }
          uint64_t v29 = *((_WORD *)v77 + 10);
          if ((v29 & 0x24) != 0)
          {
            BOOL v30 = *(void *)v77;
            goto LABEL_57;
          }

          if ((v29 & 8) != 0)
          {
            *(void *)&uint64_t v4 = *(void *)v77;
            if (*(double *)v77 >= -9.22337204e18)
            {
              else {
                BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }

            else
            {
              BOOL v30 = 0x8000000000000000LL;
            }
          }

          else
          {
            if ((v29 & 0x12) == 0 || !*((void *)v77 + 1)) {
              goto LABEL_56;
            }
            BOOL v30 = sub_181303DF0((uint64_t)v77);
          }

      int v54 = *(void *)a1;
      if (sqlite3_initialize()) {
        goto LABEL_102;
      }
      uint64_t v46 = sub_18127D33C(v54, v52);
      if (!v46) {
        goto LABEL_102;
      }
      *(void *)a1 = v46;
      *(_DWORD *)(a1 + 12) = v52;
      uint64_t v43 = *(_DWORD *)(a1 + 8);
      uint64_t v45 = v43;
LABEL_69:
      *(_DWORD *)(a1 + 8) = v43 + 1;
      *(_BYTE *)(v46 + v45) = 0;
      if (v62) {
        goto LABEL_28;
      }
LABEL_59:
      uint64_t v38 = HIDWORD(__n);
      uint64_t v39 = (int)__n;
      if ((int)__n < SHIDWORD(__n))
      {
        int v40 = __src;
LABEL_61:
        LODWORD(__n) = v39 + 1;
        v40[v39] = 0;
        goto LABEL_28;
      }

      if (!HIDWORD(__n)) {
        uint64_t v38 = 128;
      }
      int v47 = v38;
      do
      {
        uint64_t v48 = v47;
        v47 *= 2LL;
      }

      while (v47 <= (int)__n);
      if (v48 > 1073741695)
      {
        int v47 = 2147483391LL;
      }

      int v49 = __src;
      if (!sqlite3_initialize())
      {
        int v40 = (_BYTE *)sub_18127D33C((uint64_t)v49, v47);
        if (v40)
        {
          int __src = v40;
          HIDWORD(__n) = v47;
          goto LABEL_61;
        }
      }

      goto LABEL_102;
    }

uint64_t sub_1812C8A48(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return 0LL;
}

uint64_t sub_1812C8A58(uint64_t a1, char *__dst, int a3, uint64_t a4)
{
  uint64_t v4 = a4 + a3;
  if (v4 > *(void *)(a1 + 24)) {
    return 522LL;
  }
  if (a4 && *(void *)(a1 + 40) == a4)
  {
    uint64_t v8 = *(void **)(a1 + 48);
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = (void *)(a1 + 16);
    do
    {
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        break;
      }
      v9 += *(int *)(a1 + 8);
    }

    while (v9 <= a4);
  }

  uint64_t v10 = *(int *)(a1 + 8);
  uint64_t v11 = a4 % v10;
  int v12 = v10 - a4 % v10;
  int v13 = a3 - v12;
  if (a3 < v12) {
    int v12 = a3;
  }
  uint64_t v14 = v12;
  memcpy(__dst, (char *)v8 + v11 + 8, v12);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v8 = (void *)*v8;
    if (v13 && v8 != 0LL)
    {
      int v16 = &__dst[v14];
      do
      {
        int v17 = *(_DWORD *)(a1 + 8);
        int v18 = v13 - v17;
        if (v13 < v17) {
          int v17 = v13;
        }
        uint64_t v19 = v17;
        memcpy(v16, v8 + 1, v17);
        if (v18 < 0) {
          break;
        }
        v16 += v19;
        uint64_t v8 = (void *)*v8;
        BOOL v20 = !v18 || v8 == 0LL;
        int v13 = v18;
      }

      while (!v20);
    }
  }

  uint64_t result = 0LL;
  if (v8) {
    uint64_t v21 = v4;
  }
  else {
    uint64_t v21 = 0LL;
  }
  *(void *)(a1 + 40) = v21;
  *(void *)(a1 + 48) = v8;
  return result;
}

float sub_1812C8B74(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, double a6)
{
  v19[1] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9)
  {
    uint64_t v10 = v9 - 1;
    uint64_t v11 = *(unsigned int *)(a1 + 184);
    uint64_t v12 = v11 + v11 * (v10 / v11);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v11 = *(unsigned int *)(a1 + 184);
  }

  *(void *)(a1 + 96) = v12;
  if (v12 + v11 <= a3
    && (!a2 && v12 == *(void *)(a1 + 104)
     || !(*(unsigned int (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v19,  8LL,  v12)
     && v19[0] == 0xD763A120F905D5D9LL)
    && !(*(unsigned int (**)(void, unsigned int *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  &v18,  4LL,  v12 + 8))
  {
    *a4 = bswap32(v18);
    if (!(*(unsigned int (**)(void, unsigned int *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  &v18,  4LL,  v12 + 12))
    {
      *(_DWORD *)(a1 + 56) = bswap32(v18);
      if (!(*(unsigned int (**)(void, unsigned int *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  &v18,  4LL,  v12 + 16))
      {
        *a5 = bswap32(v18);
        uint64_t v13 = *(void *)(a1 + 96);
        if (v13)
        {
          unsigned int v14 = *(_DWORD *)(a1 + 184);
LABEL_15:
          *(void *)(a1 + 96) = v13 + v14;
          return *(float *)&a6;
        }

        if (!sub_181303778(*(void *)(a1 + 80), v12 + 20, &v17)
          && !sub_181303778(*(void *)(a1 + 80), v12 + 24, &v18))
        {
          unsigned int v15 = v18;
          if (!v18)
          {
            unsigned int v15 = *(_DWORD *)(a1 + 200);
            unsigned int v18 = v15;
          }

          if (v15 - 512 <= 0xFE00)
          {
            unsigned int v14 = v17;
            if (v17 >= 0x20 && v17 <= 0x10000)
            {
              a6 = COERCE_DOUBLE(vceqz_s32((int32x2_t)vand_s8( (int8x8_t)__PAIR64__(v15, v17),  (int8x8_t)vadd_s32( (int32x2_t)__PAIR64__(v15, v17),  (int32x2_t)-1LL))));
              if ((BYTE4(a6) & 1) != 0 && (LOBYTE(a6) & 1) != 0)
              {
                sub_18126C43C(a1, &v18, 0xFFFFFFFFLL);
                *(_DWORD *)(a1 + 184) = v14;
                uint64_t v13 = *(void *)(a1 + 96);
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }

  return *(float *)&a6;
}

uint64_t sub_1812C8DA0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t result = (*(uint64_t (**)(uint64_t, int64_t *))(*(void *)v3 + 48LL))(v3, &v10);
  int64_t v7 = (int)v5 * (unint64_t)a2;
  int64_t v9 = v7;
  if ((_DWORD)result) {
    return result;
  }
  if (v10 == v7) {
    return 0LL;
  }
  if (v10 <= v7)
  {
    uint64_t v8 = *(void **)(a1 + 328);
    bzero(v8, (int)v5);
    (*(void (**)(void, uint64_t, int64_t *))(**(void **)(a1 + 72) + 80LL))( *(void *)(a1 + 72),  5LL,  &v9);
    uint64_t result = (*(uint64_t (**)(void, void *, void, int64_t))(**(void **)(a1 + 72) + 24LL))( *(void *)(a1 + 72),  v8,  (int)v5,  v9 - (int)v5);
    if (!(_DWORD)result) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32LL))(*(void *)(a1 + 72));
    if (!(_DWORD)result)
    {
LABEL_12:
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 40) = a2;
    }
  }

  return result;
}

uint64_t sub_1812C8EA0(uint64_t a1, void *a2, unsigned int *a3, int a4, int a5)
{
  if (a4) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *(_BYTE *)(a1 + 26) == 0;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 328);
  uint64_t v12 = 80LL;
  if (!a4) {
    uint64_t v12 = 88LL;
  }
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t, void))(*(void *)v13 + 16LL))(v13, &v52, 4LL, *a2);
  if ((_DWORD)v14) {
    return v14;
  }
  unsigned int v16 = v52;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void, uint64_t))(*(void *)v13 + 16LL))( v13,  v11,  *(unsigned int *)(a1 + 200),  *a2 + 4LL);
  if ((_DWORD)v15) {
    return v15;
  }
  uint64_t v17 = bswap32(v16);
  uint64_t v18 = *(void *)(a1 + 200) + (4 * a4 + 4) + *a2;
  *a2 = v18;
  if (!(_DWORD)v17 || (_DWORD)v17 == *(_DWORD *)(a1 + 192)) {
    return 101LL;
  }
  if (a3)
  {
    unsigned int v20 = v17 - 1;
    if ((int)v17 - 1 < *a3)
    {
      uint64_t v21 = a3;
      while (1)
      {
        unsigned int v22 = v21[2];
        if (!v22) {
          break;
        }
        unsigned int v23 = v20 / v22;
        v20 %= v22;
        uint64_t v21 = *(unsigned int **)&v21[2 * v23 + 4];
        if (!v21) {
          goto LABEL_20;
        }
      }

      if (*v21 >= 0xF81)
      {
        unsigned int v28 = v20 % 0x7C;
        uint64_t v29 = v21 + 4;
        int v30 = v29[v20 % 0x7C];
        if (v30)
        {
          unsigned int v31 = v20 + 1;
          while (v30 != v31)
          {
            if (v28 == 123) {
              unsigned int v28 = 0;
            }
            else {
              ++v28;
            }
            int v30 = v29[v28];
            if (!v30) {
              goto LABEL_20;
            }
          }

          return 0LL;
        }
      }

      else if (((*((unsigned __int8 *)v21 + ((unint64_t)v20 >> 3) + 16) >> (v20 & 7)) & 1) != 0)
      {
        return 0LL;
      }
    }
  }

LABEL_44:
  if (a3)
  {
    uint64_t v15 = sub_1812B8E48(a3, v17);
    if ((_DWORD)v15) {
      return v15;
    }
  }

  if ((_DWORD)v17 == 1)
  {
    int v37 = v11[20];
    if (*(__int16 *)(a1 + 178) != v37)
    {
      *(_WORD *)(a1 + 178) = v37;
      uint64_t v38 = *(void (**)(void, void))(a1 + 304);
      if (v38) {
        v38(*(void *)(a1 + 320), *(unsigned int *)(a1 + 200));
      }
    }
  }

  if (*(void *)(a1 + 344))
  {
    uint64_t v39 = 0LL;
    int v52 = 0LL;
    if (!a4) {
      goto LABEL_55;
    }
  }

  else
  {
    uint64_t v39 = sub_1812FD0DC(a1, v17);
    int v52 = v39;
    if (!a4)
    {
      if (!v39) {
        goto LABEL_55;
      }
      BOOL v40 = (*((_WORD *)v39 + 26) & 8) == 0;
      goto LABEL_59;
    }
  }

  if (*(_BYTE *)(a1 + 11))
  {
LABEL_55:
    BOOL v40 = 1;
    goto LABEL_59;
  }

  BOOL v40 = *a2 <= *(void *)(a1 + 104);
LABEL_59:
  int v41 = *(uint64_t **)(a1 + 72);
  uint64_t v42 = *v41;
  if (!*v41) {
    goto LABEL_62;
  }
  if (*(unsigned __int8 *)(a1 + 21) <= 3u)
  {
    if (*(_BYTE *)(a1 + 21)) {
      LOBYTE(v40) = 0;
    }
    if (v40) {
      goto LABEL_69;
    }
LABEL_62:
    uint64_t v15 = 0LL;
    if (!a4 && !v39)
    {
      *(_BYTE *)(a1 + 25) |= 2u;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(a1 + 288))(a1, v17, &v52, 1LL);
      *(_BYTE *)(a1 + 25) &= ~2u;
      if ((_DWORD)v15) {
        return v15;
      }
      sub_1812FF10C((uint64_t)v52);
    }

    goto LABEL_92;
  }

  if (!v40) {
    goto LABEL_62;
  }
LABEL_69:
  uint64_t v43 = *(void *)(a1 + 200);
  uint64_t v44 = v43 * (v17 - 1);
  if (v10)
  {
    uint64_t v15 = (*(uint64_t (**)(void, unsigned __int8 *))(v42 + 24))(*(void *)(a1 + 72), v11);
  }

  else
  {
    uint64_t v45 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v45)
    {
      uint64_t v11 = (unsigned __int8 *)v45(*(void *)(a1 + 320), v11, v17, 7LL);
      int v41 = *(uint64_t **)(a1 + 72);
      uint64_t v43 = *(void *)(a1 + 200);
      uint64_t v42 = *v41;
    }

    uint64_t v15 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t))(v42 + 24))(v41, v11, v43, v44);
    uint64_t v46 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v46)
    {
      if (v46(*(void *)(a1 + 320), v11, v17, 3LL)) {
        uint64_t v15 = v15;
      }
      else {
        uint64_t v15 = 7LL;
      }
    }
  }

  if (*(void *)(a1 + 112))
  {
    if (v10)
    {
      int v47 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (!v47
        || (v47(*(void *)(a1 + 320), v11, v17, 3LL) ? (uint64_t v15 = v15) : (uint64_t v15 = 7LL), *(void *)(a1 + 112)))
      {
        sub_1812FC81C();
      }

      uint64_t v48 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (v48)
      {
        uint64_t v11 = (unsigned __int8 *)v48(*(void *)(a1 + 320), v11, v17, 7LL);
        if (v11) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = 7LL;
        }
      }
    }

    else
    {
      sub_1812FC81C();
    }
  }

    v16[2] = v19;
    goto LABEL_45;
  }

        if (v11 >= 254) {
          LOBYTE(v11) = -2;
        }
        *(_BYTE *)(a2 + 10) = v11 + 1;
        return (char)v8;
      }
    }
  }

  if (a2)
  {
    uint64_t v11 = 0;
    LOBYTE(v8) = 67;
    goto LABEL_44;
  }

  LOBYTE(v8) = 67;
  return (char)v8;
}

    sub_1813014B0((void *)v12, a3);
    return v10;
  }

      if ((v47[5] & 2) != 0)
      {
        uint64_t v43 = (uint64_t)v10;
      }

      else
      {
        uint64_t v49 = *(unsigned __int8 **)&v40[v38 / 4];
        if (!v49 || (v49[5] & 2) == 0)
        {
          uint64_t result = (uint64_t *)sub_181289D04((uint64_t)v10, v47, v33, v34, v35, v22, v23, v24);
          if (result) {
            goto LABEL_33;
          }
        }

        uint64_t v43 = (uint64_t)v10;
        int v47 = v49;
      }

      uint64_t result = (uint64_t *)sub_181289D04(v43, v47, v33, v34, v35, v22, v23, v24);
LABEL_33:
      *v41++ = result;
      v38 += 24LL;
      if (v42 == v38) {
        goto LABEL_64;
      }
    }
  }

  if (v25)
  {
    uint64_t v58 = (*(_DWORD *)v25)-- == 1;
    if (v58) {
      return sub_1813014B0((void *)v25[2], v25);
    }
  }

  return result;
}

    unsigned int v23 = 0LL;
    goto LABEL_45;
  }

  uint64_t v44 = *(double *)v21;
  if (*(double *)v21 >= -9.22337204e18)
  {
    if (v44 <= 9.22337204e18) {
      unsigned int v23 = (uint64_t)v44;
    }
    else {
      unsigned int v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  else
  {
    unsigned int v23 = 0x8000000000000000LL;
  }

  if ((v14 & 0x10) != 0)
  {
    BOOL v10 = *(_DWORD *)(v8 + 16);
    if ((v14 & 0x400) != 0) {
      v10 += *(_DWORD *)v8;
    }
  }

  else
  {
    if ((v14 & 1) != 0) {
      goto LABEL_6;
    }
    BOOL v10 = sub_181303970(v8, 1);
  }

      v25 += 8;
      ++v23;
      v24 += 8LL;
    }

    if (SLODWORD(v26) <= SLODWORD(v27)) {
      goto LABEL_48;
    }
LABEL_47:
    sub_1813AC9BC((char *)v7, "Dimension %d of cell %d on node %lld is corrupt", v23, v21, a4);
    goto LABEL_48;
  }

  sub_1813AC9BC((char *)v7, "Node %lld is too small (%d bytes)");
LABEL_31:
  uint64_t v17 = (uint64_t (**)(unsigned __int16 *))&off_18C4653A8;
  if (!dword_18C465380) {
    return (*v17)(v14);
  }
  if ((void)xmmword_18C468B70) {
    xmmword_18C465400(xmmword_18C468B70);
  }
  qword_18C468AC8 -= (int)off_18C4653B8(v14);
  --qword_18C468B10;
  uint64_t result = off_18C4653A8(v14);
  uint64_t v14 = (unsigned __int16 *)xmmword_18C468B70;
  if ((void)xmmword_18C468B70)
  {
    uint64_t v17 = (uint64_t (**)(unsigned __int16 *))&xmmword_18C465410;
    return (*v17)(v14);
  }

  return result;
}

    if (!v35 || *(_BYTE *)(a5 + v26)) {
      goto LABEL_27;
    }
    if (!v62) {
      goto LABEL_59;
    }
LABEL_28:
    v9 += (int)v33;
    ++v26;
  }

  if (v26 < a3[130]) {
    goto LABEL_36;
  }
LABEL_105:
  if (v27)
  {
    *(_DWORD *)(a1 + 8) = v58;
    uint64_t v55 = __src;
    if (!__src) {
      return v62;
    }
LABEL_109:
    unint64_t v56 = (void (**)(void *))&off_18C4653A8;
    if (dword_18C465380)
    {
      if ((void)xmmword_18C468B70) {
        xmmword_18C465400(xmmword_18C468B70);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v55);
      --qword_18C468B10;
      off_18C4653A8(v55);
      uint64_t v55 = (void *)xmmword_18C468B70;
      if ((void)xmmword_18C468B70)
      {
        unint64_t v56 = (void (**)(void *))&xmmword_18C465410;
        goto LABEL_114;
      }
    }

    else
    {
LABEL_114:
      (*v56)(v55);
    }
  }

  else
  {
    uint64_t v55 = __src;
    sub_1813BB8F8(a1, __src, __n, &v62);
    if (v55) {
      goto LABEL_109;
    }
  }

  return v62;
}

        uint64_t v5 = v70;
        if (v70) {
          goto LABEL_89;
        }
LABEL_45:
        int v30 = sqlite3_reset(pStmt);
        unsigned __int8 v70 = v30;
        unsigned int v28 = (unsigned __int8 *)*((void *)v28 + 3);
        if ((_DWORD)v30) {
          unsigned int v31 = 1;
        }
        else {
          unsigned int v31 = v28 == 0LL;
        }
      }

      while (!v31);
      uint64_t v5 = v30;
LABEL_89:
      int v24 = *(_DWORD *)(v13 + 52);
      uint64_t v29 = v5;
LABEL_90:
      ++v25;
    }

    while (v25 < v24 && !v29);
    uint64_t v14 = v72;
    int64_t v9 = v60;
    uint64_t v4 = v61;
    uint64_t v15 = qword_18C467E20 + 480;
    uint64_t v19 = v62;
LABEL_26:
    sqlite3_finalize(pStmt);
    if (v14 == v19) {
      uint64_t v14 = v63;
    }
    LODWORD(v72) = v14;
    unsigned int v20 = v67;
    if (v67)
    {
      uint64_t v21 = (void (**)(uint64_t))&off_18C4653A8;
      if (!dword_18C465380) {
        goto LABEL_34;
      }
      unsigned int v22 = v15[366];
      if (v22) {
        xmmword_18C465400(v22);
      }
      qword_18C468AC8[0] -= (int)off_18C4653B8(v20);
      --qword_18C468B10;
      off_18C4653A8(v20);
      unsigned int v20 = v15[366];
      if (v20)
      {
        uint64_t v21 = (void (**)(uint64_t))&xmmword_18C465410;
LABEL_34:
        (*v21)(v20);
      }
    }

_BYTE *sub_1812C93EC(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 16);
  if (*result)
  {
    *uint64_t result = 0;
  }

  return result;
}

void *sub_1812C9414( void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(_BYTE *)(*a1 + 103LL)) {
    return sub_18128FF4C((void *)v9, (void *)a2);
  }
  if (!*(_BYTE *)(v9 + 197))
  {
    int v20 = *(_DWORD *)(v9 + 44);
    uint64_t v21 = *(void *)(*(void *)(v9 + 32) + 24LL);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v21 + 113);
    if ((*(_BYTE *)(v21 + 114) & 1) != 0 || (int v22 = sub_181276D34(v9, 0LL, (char **)a1 + 1, 0LL, a5, a6, a7, a8)) == 0)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 40);
      if ((int)v23 < 2)
      {
LABEL_13:
        if ((v20 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(_BYTE *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_4;
      }

      while (1)
      {
        uint64_t v24 = v23 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32LL * (v23 - 1) + 24) + 114LL) & 1) == 0)
        {
          int v22 = sub_181276D34(v9, (v23 - 1), (char **)a1 + 1, 0LL, a5, a6, a7, a8);
          if (v22) {
            break;
          }
        }

        uint64_t v23 = v24;
      }
    }

    *((_DWORD *)a1 + 6) = v22;
    ++*((_DWORD *)a1 + 12);
    return sub_18128FF4C((void *)v9, (void *)a2);
  }

uint64_t sub_1812C9D84(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
    {
      sub_1812FDE20(a1);
      int64_t v7 = *(unsigned __int8 **)(v6 + 16);
      if (v7) {
        goto LABEL_4;
      }
LABEL_13:
      if (*(_BYTE *)(a1 + 19))
      {
        *(_BYTE *)(a1 + 19) = 0;
        for (uint64_t i = *(void *)(*(void *)(a1 + 8) + 16LL); i; uint64_t i = *(void *)(i + 40))
        {
          if ((*(_BYTE *)(i + 1) & 0x10) != 0)
          {
            *(_BYTE *)(a1 + 19) = 1;
            if (*(_DWORD *)(i + 80) == a2) {
              *(_BYTE *)uint64_t i = 1;
            }
          }
        }
      }

      uint64_t v9 = sub_1812C9EB0(v6, a2, 0, a3);
      goto LABEL_21;
    }
  }

  int64_t v7 = *(unsigned __int8 **)(v6 + 16);
  if (!v7) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v8 = v7;
  while (a2)
  {
    if (*((_DWORD *)v8 + 20) == a2)
    {
      int64_t v7 = v8;
      break;
    }

    uint64_t v8 = (unsigned __int8 *)*((void *)v8 + 5);
    if (!v8) {
      goto LABEL_13;
    }
  }

  uint64_t v9 = sub_1812FFCF0(v7, a2, 0LL);
  if (!(_DWORD)v9) {
    goto LABEL_13;
  }
LABEL_21:
  if (*(_BYTE *)(a1 + 17))
  {
    int v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11) {
      sub_1812FDEFC(a1);
    }
  }

  return v9;
}

uint64_t sub_1812C9EB0(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 64) < a2) {
    return sub_1812FBF50(86909);
  }
  uint64_t v9 = sub_181308FB8((_DWORD *)a1, a2, &v22);
  if (!(_DWORD)v9)
  {
    uint64_t v10 = v22;
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
    {
      int v11 = a2 == 1 ? 2 : 1;
      if (v11 != *(_DWORD *)(*(void *)(v22 + 112) + 56LL))
      {
        uint64_t v17 = sub_1812FBF50(86916);
LABEL_23:
        uint64_t v9 = v17;
        goto LABEL_24;
      }
    }

    uint64_t v12 = *(unsigned __int8 *)(v22 + 9);
    LODWORD(v13) = *(unsigned __int16 *)(v22 + 24);
    if (*(_WORD *)(v22 + 24))
    {
      uint64_t v14 = 0LL;
      unint64_t v15 = 0LL;
      do
      {
        if (!*(_BYTE *)(v10 + 8))
        {
          uint64_t v17 = sub_1812C9EB0(a1, bswap32(*v16), 1LL, a4);
          if ((_DWORD)v17) {
            goto LABEL_23;
          }
        }

        (*(void (**)(uint64_t, unsigned int *, _DWORD *))(v10 + 128))(v10, v16, v20);
        if (v20[4] != v21)
        {
          uint64_t v17 = sub_181309478(v10, (uint64_t)v16, (uint64_t)v20);
          if ((_DWORD)v17) {
            goto LABEL_23;
          }
        }

        ++v15;
        unint64_t v13 = *(unsigned __int16 *)(v10 + 24);
        v14 += 2LL;
      }

      while (v15 < v13);
    }

    if (*(_BYTE *)(v10 + 8))
    {
      if (!a4)
      {
LABEL_20:
        if (!a3)
        {
          uint64_t v9 = sub_1812ABDD4(*(void *)(v10 + 112));
          if (!(_DWORD)v9) {
            sub_1812B47EC(v10, *(unsigned __int8 *)(*(void *)(v10 + 80) + v12) | 8);
          }
          goto LABEL_24;
        }

        uint64_t v17 = sub_1812C1B04(*(void *)(v10 + 72), v10, *(unsigned int *)(v10 + 4));
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v9 = sub_1812C9EB0(a1, bswap32(*(_DWORD *)(v12 + *(void *)(v10 + 80) + 8)), 1LL, a4);
      if ((_DWORD)v9)
      {
LABEL_24:
        uint64_t v18 = *(void *)(v10 + 112);
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          uint64_t v19 = *(void *)(v18 + 40);
          --*(_DWORD *)(v19 + 152);
          *(void *)(v18 + 32) = *(void *)(v19 + 168);
          *(void *)(v19 + 168) = v18;
          (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144LL))( *(void *)(v19 + 72),  *(void *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1),  *(void *)(v18 + 8));
        }

        else
        {
          sub_1812F9F44(v18);
        }

        return v9;
      }

      if (!a4 || *(_BYTE *)(v10 + 1)) {
        goto LABEL_20;
      }
      LODWORD(v13) = *(unsigned __int16 *)(v10 + 24);
    }

    *a4 += v13;
    goto LABEL_20;
  }

  return v9;
}

uint64_t _sqlite3_apple_archive_type(const char *a1, int *a2, char **a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  *a2 = -1;
  int v6 = open(a1, 0, 0LL);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    ssize_t v8 = pread(v6, __buf, 0x16uLL, 0LL);
    if (v8 == 22)
    {
      if (*(_DWORD *)__buf != 1766609235 || *(_DWORD *)&__buf[3] != 543519849) {
        goto LABEL_7;
      }
      if (*(void *)__buf == 0x66206574694C5153LL && *(void *)&__buf[7] == 0x332074616D726F66LL)
      {
        uint64_t v10 = 0LL;
        int v11 = 3;
        goto LABEL_8;
      }

      BOOL v17 = *(void *)__buf == 0x41206574694C5153LL && *(void *)&__buf[8] == 0x415F455649484352LL;
      if (!v17 || *(void *)&__buf[14] != 0x315F454C5050415FLL)
      {
LABEL_7:
        uint64_t v10 = 0LL;
        int v11 = 1;
LABEL_8:
        *a2 = v11;
LABEL_30:
        close(v7);
        return v10;
      }

      memset(v21, 0, sizeof(v21));
      if (!sub_1812CA364(v7, (uint64_t)v21))
      {
        if (*((void *)&v21[0] + 1) == 2LL)
        {
          uint64_t v10 = 0LL;
          int v11 = 5;
        }

        else
        {
          if (*((void *)&v21[0] + 1) != 1LL)
          {
            uint64_t v10 = 0LL;
            *a2 = 0;
            goto LABEL_30;
          }

          uint64_t v10 = 0LL;
          int v11 = 4;
        }

        goto LABEL_8;
      }

      if (a3)
      {
        uint64_t v19 = __error();
        uint64_t v10 = *v19;
        *a3 = sqlite3_mprintf("sql_read_archive_header('%s') failed with errno %d", a1, *v19);
        goto LABEL_30;
      }
    }

    else if (a3)
    {
      ssize_t v13 = v8;
      uint64_t v14 = __error();
      uint64_t v15 = *v14;
      *a3 = sqlite3_mprintf("pread('%s') failed returning %ld bytes with errno %d", a1, v13, *v14);
      uint64_t v10 = v15;
      goto LABEL_30;
    }

    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }

  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = __error();
  uint64_t v10 = *v12;
  *a3 = sqlite3_mprintf("open('%s') failed with errno %d", a1, *v12);
  return v10;
}

uint64_t sub_1812CA364(int a1, uint64_t a2)
{
  uint64_t v4 = (char *)calloc(1uLL, 0x400uLL);
  if (read(a1, v4, 0x16uLL) != 22 || strncmp("SQLite ARCHIVE_APPLE_1", v4, 0x16uLL)) {
    return 0xFFFFFFFFLL;
  }
  char v9 = 0;
  if (read(a1, &v9, 1uLL) >= 1)
  {
    int v6 = v4 + 22;
    do
    {
      if (v9 == 10) {
        break;
      }
      *v6++ = v9;
    }

    while (read(a1, &v9, 1uLL) > 0);
  }

  ssize_t v8 = 0LL;
  int v7 = strchr(v4, 44);
  *(_DWORD *)a2 = strtol(v7 + 1, &v8, 0);
  *(_DWORD *)(a2 + 4) = strtol(v8 + 1, &v8, 0);
  *(void *)(a2 + 8) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 16) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 24) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 32) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 40) = strtoll(v8 + 1, &v8, 0);
  free(v4);
  return 0LL;
}

uint64_t _sqlite3_apple_archive( const char *a1, char *a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, void *a7, char **a8)
{
  uint64_t v208 = *MEMORY[0x1895F89C0];
  if (qword_18C550488 != -1) {
    dispatch_once(&qword_18C550488, &unk_189B6CAF0);
  }
  int v169 = -1;
  uint64_t v15 = _sqlite3_apple_archive_type(a1, &v169, a8);
  if (!(_DWORD)v15)
  {
    if (v169 == 3)
    {
      else {
        int v17 = a4;
      }
      if ((_DWORD)a4 != 3)
      {
        __s1 = a2;
        if (a5) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = 2049LL;
        }
LABEL_18:
        int v20 = (const char **)calloc(1uLL, 0x20uLL);
        if (v17 == 3)
        {
          uint64_t v15 = sub_1812CBDB8(a1, __s1, a3);
          *int v20 = strdup(__s1);
          memset(&v168, 0, sizeof(v168));
          uint64_t v23 = sqlite3_mprintf("%s-wal", __s1);
          if (stat(v23, &v168) || v168.st_size < 1)
          {
            free(v23);
            int v24 = 1;
          }

          else
          {
            *int v20 = v23;
            int v24 = 2;
          }

          memset(&v168, 0, sizeof(v168));
          uint64_t v27 = sqlite3_mprintf("%s-journal", __s1);
          if (stat(v27, &v168) || v168.st_size < 1)
          {
            free(v27);
            if (!(_DWORD)v15) {
              goto LABEL_256;
            }
          }

          else
          {
            ++v24;
            *int v20 = v27;
            if (!(_DWORD)v15) {
              goto LABEL_256;
            }
          }

          goto LABEL_265;
        }

        if (v17 != 2)
        {
          if (v17 != 1)
          {
            if (a8) {
              *a8 = sqlite3_mprintf("Unknown operation type %ld", a4);
            }
            uint64_t v15 = 0xFFFFFFFFLL;
            goto LABEL_268;
          }

          unsigned __int16 v21 = sub_1812CCF60();
          ppDb = 0LL;
          int v22 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0LL);
          if (v22)
          {
            fprintf((FILE *)*MEMORY[0x1895F89D0], "sqlite3_open_v2 open failed with %d", v22);
          }

          else
          {
            sqlite3_db_config(ppDb, 1006, 1LL, 0LL);
            sqlite3_busy_timeout(ppDb, 60000);
            sqlite3_extended_result_codes(ppDb, 1);
          }

          int v38 = mkstemp(v21);
          free(v21);
          if ((v38 & 0x80000000) == 0)
          {
            bzero(filename, 0x400uLL);
            fcntl(v38, 50, filename);
            int v184 = 0LL;
            if (sqlite3_open_v2(filename, &v184, a3 | 6, 0LL)
              || (sqlite3_busy_timeout(ppDb, 60000),
                  sqlite3_extended_result_codes(ppDb, 1),
                  sqlite3_file_control(v184, 0LL, 102, ppDb)))
            {
              if (!v184) {
                goto LABEL_95;
              }
              sqlite3_close(v184);
            }

            else
            {
              if (ppDb) {
                sqlite3_close(ppDb);
              }
              ppDb = v184;
            }

            int v184 = 0LL;
LABEL_95:
            memset(v206, 0, sizeof(v206));
            __int128 v205 = 0u;
            __int128 v204 = 0u;
            __int128 v203 = 0u;
            memset(&v202[5], 0, 48);
            qmemcpy(v202, "UTF-8", 5);
            *(_OWORD *)db = xmmword_1813C4990;
            __int128 v201 = unk_1813C49A0;
            *(_OWORD *)int v198 = *(_OWORD *)"delete";
            __int128 v199 = unk_1813C49C0;
            uint64_t v49 = ppDb;
            *(void *)&errmsg.st_dev = 0LL;
            do
              int v50 = sqlite3_prepare(v49, "pragma legacy_file_format", -1, (sqlite3_stmt **)&errmsg, 0LL);
            while (v50 == 5);
            dispatch_queue_t queue = (dispatch_queue_t)v18;
            if (v50)
            {
              int v52 = a7;
              int v53 = 0;
            }

            else
            {
              do
                int v51 = sqlite3_step(*(sqlite3_stmt **)&errmsg.st_dev);
              while (v51 == 5);
              int v52 = a7;
              if (v51 == 100) {
                int v53 = sqlite3_column_int(*(sqlite3_stmt **)&errmsg.st_dev, 0);
              }
              else {
                int v53 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&errmsg.st_dev);
            }

            sub_1812CCBB4(ppDb, "pragma encoding", v202, 0x80u);
            BOOL v54 = ppDb;
            *(void *)&errmsg.st_dev = 0LL;
            do
              int v55 = sqlite3_prepare(v54, "pragma page_size", -1, (sqlite3_stmt **)&errmsg, 0LL);
            while (v55 == 5);
            int v165 = v38;
            if (v55)
            {
              uint64_t v57 = v20;
              int v58 = 4096;
            }

            else
            {
              do
                int v56 = sqlite3_step(*(sqlite3_stmt **)&errmsg.st_dev);
              while (v56 == 5);
              uint64_t v57 = v20;
              if (v56 == 100) {
                int v58 = sqlite3_column_int(*(sqlite3_stmt **)&errmsg.st_dev, 0);
              }
              else {
                int v58 = 4096;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&errmsg.st_dev);
            }

            sub_1812CCBB4(ppDb, "pragma auto_vacuum", (char *)db, 0x20u);
            int v59 = ppDb;
            *(void *)&errmsg.st_dev = 0LL;
            do
              int v60 = sqlite3_prepare(v59, "pragma application_id", -1, (sqlite3_stmt **)&errmsg, 0LL);
            while (v60 == 5);
            if (v60)
            {
              int v62 = 0;
            }

            else
            {
              do
                int v61 = sqlite3_step(*(sqlite3_stmt **)&errmsg.st_dev);
              while (v61 == 5);
              if (v61 == 100) {
                int v62 = sqlite3_column_int(*(sqlite3_stmt **)&errmsg.st_dev, 0);
              }
              else {
                int v62 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&errmsg.st_dev);
            }

            uint64_t v63 = ppDb;
            *(void *)&errmsg.st_dev = 0LL;
            do
              int v64 = sqlite3_prepare(v63, "pragma user_version", -1, (sqlite3_stmt **)&errmsg, 0LL);
            while (v64 == 5);
            if (v64)
            {
              int v67 = 0;
              unint64_t v65 = (FILE **)MEMORY[0x1895F89D0];
            }

            else
            {
              unint64_t v65 = (FILE **)MEMORY[0x1895F89D0];
              do
                int v66 = sqlite3_step(*(sqlite3_stmt **)&errmsg.st_dev);
              while (v66 == 5);
              if (v66 == 100) {
                int v67 = sqlite3_column_int(*(sqlite3_stmt **)&errmsg.st_dev, 0);
              }
              else {
                int v67 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&errmsg.st_dev);
            }

            sub_1812CCBB4(ppDb, "pragma journal_mode", (char *)v198, 0x20u);
            uint64_t v68 = (char *)calloc(1uLL, 0x400uLL);
            if (v53)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma legacy_file_format = %d;\n", v53);
              __strlcat_chk();
            }

            if (*(_DWORD *)v202 != 759583829 || v202[4] != 56)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma encoding = %s;\n", v202);
              __strlcat_chk();
            }

            a7 = v52;
            if (v58 != 4096)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma page_size = %d;\n", v58);
              __strlcat_chk();
            }

            if (LOBYTE(db[0]) != 48)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma auto_vacuuuint64_t m = %s;\n", (const char *)db);
              __strlcat_chk();
            }

            int v20 = v57;
            if (v62)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma application_id = %d;\n", v62);
              __strlcat_chk();
            }

            int v70 = v165;
            if (v67)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma user_versiouint64_t n = %d;\n", v67);
              __strlcat_chk();
            }

            if (LODWORD(v198[0]) != 1701602660 || WORD2(v198[0]) != 25972)
            {
              __int128 v196 = 0u;
              __int128 v197 = 0u;
              __int128 v194 = 0u;
              __int128 v195 = 0u;
              __int128 v192 = 0u;
              __int128 v193 = 0u;
              __int128 v191 = 0u;
              memset(&errmsg, 0, sizeof(errmsg));
              __sprintf_chk((char *)&errmsg, 0, 0x100uLL, "pragma journal_mode = %s;\n", (const char *)v198);
              __strlcat_chk();
            }

            __strlcat_chk();
            uint64_t v72 = dispatch_queue_create("sql dump", 0LL);
            *(void *)int v189 = -1LL;
            if (pipe(v189))
            {
              uint64_t v73 = *v65;
              unint64_t v74 = __error();
              fprintf(v73, "pipe failed for %d\n", *v74);
            }

            else
            {
              uint64_t v180 = 0LL;
              uint64_t v181 = &v180;
              uint64_t v182 = 0x2000000000LL;
              int v183 = v189[1];
              fcntl(v189[0], 73, 1LL);
              fcntl(v189[1], 73, 1LL);
              blocuint64_t k = (void *)MEMORY[0x1895F87A8];
              uint64_t v175 = 0x40000000LL;
              uint64_t v176 = sub_1812CCC60;
              uint64_t v177 = &unk_189B6CB18;
              uint64_t v178 = &v180;
              uint64_t v179 = ppDb;
              dispatch_async(v72, &block);
              memset(&errmsg, 0, sizeof(errmsg));
              if (stat(a1, &errmsg) == -1)
              {
                int v75 = (FILE *)*MEMORY[0x1895F89D0];
                uint64_t v76 = __error();
                fprintf(v75, "stat failed for %d\n", *v76);
              }

              int v77 = open(__s1, 1538, errmsg.st_mode | 0x80u);
              uint64_t v78 = (FILE **)MEMORY[0x1895F89D0];
              if (v77 < 0)
              {
                uint64_t v104 = (FILE *)*MEMORY[0x1895F89D0];
                uint64_t v105 = __error();
                fprintf(v104, "open destination failed for %d\n", *v105);
                close(v189[0]);
              }

              else
              {
                int v79 = v77;
                int v157 = v20;
                *(void *)uint64_t v186 = 1LL;
                *(_OWORD *)&v186[8] = xmmword_1813C4980;
                uint64_t v187 = 0LL;
                uint64_t v188 = 0LL;
                *(void *)&v186[24] = (int)queue;
                sub_1812CCCF4(v77, (uint64_t)v186);
                uint64_t v80 = valloc(0x80000uLL);
                int v81 = valloc(0x80000uLL);
                int v82 = off_18C550490(&v170, 0LL, queue);
                if (v82) {
                  fprintf(*v78, "compression_stream_init failed for %d\n", v82);
                }
                uint64_t v170 = v81;
                uint64_t v171 = (void *)0x80000;
                uint64_t v172 = v68;
                size_t v173 = strlen(v68);
                int v83 = off_18C550498(&v170, 0LL);
                if (v83) {
                  fprintf(*v78, "compression_stream_process failed for %d\n", v83);
                }
                if (v171 != (void *)0x80000)
                {
                  uint64_t v84 = 0x80000LL - (void)v171;
                  ssize_t v85 = write(v79, v81, 0x80000LL - (void)v171);
                  if (v85 != v84)
                  {
                    ssize_t v86 = v85;
                    uint64_t v87 = (FILE *)*MEMORY[0x1895F89D0];
                    int v154 = *__error();
                    uint64_t v88 = v87;
                    uint64_t v78 = (FILE **)MEMORY[0x1895F89D0];
                    fprintf(v88, "last write ended with return %ld expected %ld with errno %d\n", v86, v84, v154);
                  }
                }

                free(v68);
                ssize_t v89 = read(v189[0], v80, 0x80000uLL);
                if (v89 >= 1)
                {
                  do
                  {
                    uint64_t v170 = v81;
                    uint64_t v171 = (void *)0x80000;
                    uint64_t v172 = (char *)v80;
                    size_t v173 = v89;
                    int v90 = off_18C550498(&v170, 0LL);
                    if (v90) {
                      fprintf(*v78, "compression_stream_process failed for %d\n", v90);
                    }
                    if (v171 != (void *)0x80000)
                    {
                      uint64_t v91 = 0x80000LL - (void)v171;
                      ssize_t v92 = write(v79, v81, 0x80000LL - (void)v171);
                      if (v92 != v91)
                      {
                        ssize_t v93 = v92;
                        char v94 = (FILE *)*MEMORY[0x1895F89D0];
                        int v155 = *__error();
                        uint64_t v95 = v94;
                        uint64_t v78 = (FILE **)MEMORY[0x1895F89D0];
                        fprintf(v95, "last write ended with return %ld expected %ld with errno %d\n", v93, v91, v155);
                      }
                    }

                    ssize_t v89 = read(v189[0], v80, 0x80000uLL);
                  }

                  while (v89 > 0);
                }

                do
                {
                  uint64_t v170 = v81;
                  uint64_t v171 = (void *)0x80000;
                  uint64_t v172 = (char *)v80;
                  size_t v173 = 0LL;
                  unsigned int v96 = off_18C550498(&v170, 1LL);
                  if (v96 >= 2) {
                    fprintf(*v78, "compression_stream_process bravo failed for %d\n", v96);
                  }
                  if (v171 != (void *)0x80000)
                  {
                    uint64_t v97 = 0x80000LL - (void)v171;
                    ssize_t v98 = write(v79, v81, 0x80000LL - (void)v171);
                    BOOL v29 = v98 == v97;
                    uint64_t v78 = (FILE **)MEMORY[0x1895F89D0];
                    if (!v29)
                    {
                      ssize_t v99 = v98;
                      uint64_t v100 = (FILE *)*MEMORY[0x1895F89D0];
                      int v156 = *__error();
                      int v101 = v100;
                      uint64_t v78 = (FILE **)MEMORY[0x1895F89D0];
                      fprintf(v101, "last write ended with return %ld expected %ld with errno %d\n", v99, v89, v156);
                    }
                  }
                }

                while (!v96);
                off_18C5504A0(&v170);
                free(v80);
                free(v81);
                if (v89)
                {
                  uint64_t v102 = *v78;
                  uint64_t v103 = __error();
                  fprintf(v102, "last read ended with return %ld with errno %d\n", v89, *v103);
                }

                close(v79);
                close(v189[0]);
                uint64_t v68 = 0LL;
                int v20 = v157;
                a7 = v52;
                int v70 = v165;
              }

              dispatch_sync(v72, &unk_189B6CB58);
              dispatch_release(v72);
              int v106 = *((_DWORD *)v181 + 6);
              if (v106 != -1) {
                close(v106);
              }
              _Block_object_dispose(&v180, 8);
            }

            if (v68) {
              free(v68);
            }
            if (ppDb) {
              sqlite3_close(ppDb);
            }
            sub_1812CCE14(filename);
            int v107 = v70;
LABEL_254:
            close(v107);
            uint64_t v15 = 0LL;
LABEL_255:
            *int v20 = strdup(__s1);
            int v24 = 1;
            if (!(_DWORD)v15)
            {
LABEL_256:
              size_t v145 = strlen(*v20);
              if (v24 == 1)
              {
                size_t v146 = v145 + 9;
              }

              else
              {
                size_t v146 = v145 + strlen(v20[1]) + 18;
                if (v24 != 2) {
                  v146 += strlen(v20[2]) + 9;
                }
              }

              size_t v147 = v146 + 8;
              int v148 = sqlite3_malloc(v147);
              bzero(v148, v147);
              uint64_t v149 = (char *)&v148[v24 + 1];
              size_t v150 = strlen(*v20);
              *int v148 = v149;
              strcpy(v149, *v20);
              if (v24 != 1)
              {
                uint64_t v151 = &v149[v150 + 1];
                size_t v152 = strlen(v20[1]);
                v148[1] = v151;
                strcpy(v151, v20[1]);
                if (v24 != 2)
                {
                  uint64_t v153 = &v151[v152 + 1];
                  v148[2] = v153;
                  strcpy(v153, v20[2]);
                }
              }

              uint64_t v15 = 0LL;
              if (a7) {
                *a7 = v148;
              }
            }